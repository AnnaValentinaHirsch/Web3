*GitHub Repository "ahessert/indigo"*

'''--- db-node/dbt/dbt_trigger.py ---
import sys
import shutil

from run_dbt import download_dbt_deps, run_dbt_wrapper

DBT_PACKAGE_FILE = '/tmp/packages.yml'
DBT_PROJECT_YML = 'dbt_project.yml'

def run(event, context):
    print(event)

    model_name = event['modelName']

    packages = event['packageList']
    formmated_packages = ['  - git: ' + package for package in packages]
    formatted_yml = 'packages:\n' + '\n'.join(formmated_packages)

    print('\n', model_name, '\n')
    print(formatted_yml)
    
    yml_file = open(DBT_PACKAGE_FILE, 'w+')
    yml_file.write(formatted_yml)
    yml_file.close()

    # Copy project config to /tmp directory to download packages
    shutil.copy(DBT_PROJECT_YML, '/tmp/' + DBT_PROJECT_YML)
    download_dbt_deps()

    build_params = ['build', '-s', model_name]
    exit_code = run_dbt_wrapper(build_params)
    sys.exit(exit_code)

'''
'''--- db-node/dbt/requirements.txt ---
agate==1.6.3
attrs==21.4.0
Babel==2.9.1
boto3==1.20.43
botocore==1.23.43
certifi==2021.10.8
cffi==1.15.0
charset-normalizer==2.0.10
click==8.0.3
colorama==0.4.4
dbt-core==1.0.1
dbt-extractor==0.4.0
dbt-postgres==1.0.1
dbt-redshift==1.0.0
future==0.18.2
hologram==0.0.14
idna==3.3
importlib-metadata==4.10.1
isodate==0.6.1
Jinja2==2.11.3
jmespath==0.10.0
jsonschema==3.1.1
leather==0.3.4
Logbook==1.5.3
MarkupSafe==2.0.1
mashumaro==2.9
minimal-snowplow-tracker==0.0.2
msgpack==1.0.3
networkx==2.6.3
packaging==21.3
parsedatetime==2.4
psycopg2-binary==2.9.3
pycparser==2.21
pyparsing==3.0.7
pyrsistent==0.18.1
python-dateutil==2.8.2
python-slugify==5.0.2
pytimeparse==1.1.8
pytz==2021.3
PyYAML==6.0
requests==2.27.1
s3transfer==0.5.0
six==1.16.0
sqlparse==0.4.2
text-unidecode==1.3
typing-extensions==3.10.0.2
urllib3==1.26.8
Werkzeug==2.0.2
zipp==3.7.0

'''
'''--- db-node/dbt/run_dbt.py ---
import sys
import logging

from typing import List

from dbt.logger import log_manager
from dbt.utils import ExitCodes

import dbt.main
import dbt.version

EXPECTED_DBT_VERSION = '1.0.1'

def download_dbt_deps():
    run_dbt_wrapper(["deps", "--project-dir", "/tmp"])
    # Reset dbt logger before running build task
    log_manager._file_handler.reset()

def run_dbt_wrapper(args: List[str]) -> int:
    """Copy of DBT.main that also logs errors to sentries.
    It can also serve as a place to plug in other behaviors
    that can't be implemented directly in DBT.
    This will need to be updated if the DBT version is incremented.
    """

    assert dbt.version.__version__ == EXPECTED_DBT_VERSION, \
        "This script should only be used with DBT version "\
        f"{EXPECTED_DBT_VERSION}, got {dbt.version.__version__}. "\
        "If you're updating the DBT version, please ensure that "\
        "the wrapper script is updated to match `dbt.main:main`!"

    logger = logging.getLogger('dbt')
    
    try:
        logger.info("Running args %s", args)
        results, succeeded = dbt.main.handle_and_check(args)
        if succeeded:
            exit_code = ExitCodes.Success
        else:
            exit_code = ExitCodes.ModelError

            errors = []
            for result in results:
                if result.status == 'ERROR':
                    errors.append(result.error)

            if not errors:
                logger.error("DBT completed with an unknown error.")

    except KeyboardInterrupt:
        logger.info("ctrl-c")
        exit_code = ExitCodes.UnhandledError

    except SystemExit as e:
        exit_code = e.code

    except BaseException as e:
        logger.exception(str(e))

        exit_code = ExitCodes.UnhandledError

    return exit_code

if __name__ == '__main__':
    params = sys.argv[1:]
    exit_code = run_dbt_wrapper(params)
    sys.exit(exit_code)

'''
'''--- frontend/.eslintrc.js ---
module.exports = {
  'env': {
    'browser': true,
    'es2021': true,
    'jest': true,
  },
  'extends': [
    'eslint:recommended',
    'plugin:react/recommended',
  ],
  'settings': {
    'react': {
      'version': 'latest',
    },
  },
  'parserOptions': {
    'ecmaFeatures': {
      'jsx': true,
    },
    'ecmaVersion': 12,
    'sourceType': 'module',
  },
  'plugins': [
    'react',
  ],
  'rules': {
    'no-undef': 0,
    'indent': [
      'error',
      2,
      { 'SwitchCase': 1 },
    ],
    'linebreak-style': [
      'error',
      'unix',
    ],
    'quotes': [
      'error',
      'single',
    ],
    'semi': [
      'error',
      'always',
    ],
    'comma-dangle': [
      'error',
      'only-multiline',
    ],
  },
};

'''
'''--- frontend/babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react'],
  env: {
    test: {
      plugins: ['@babel/plugin-transform-runtime'],
    },
  },
};

'''
'''--- frontend/jest.config.js ---
/** @type {import('ts-jest/dist/types').InitialOptionsTsJest} */
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'jsdom',
  transform: {
    // transform files with ts-jest
    '^.+\\.(js|ts)$': 'ts-jest',
  },
  globals: {
    'ts-jest': {
      tsconfig: {
        // allow js in typescript
        allowJs: true,
      },
    },
  },
};

'''
'''--- frontend/public/index.html ---
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, shrink-to-fit=no"
    />
    <meta name="theme-color" content="#ffffff" />
    <meta name="description" content="Indigo" />
    <meta
      name="robots"
      content="max-snippet:-1, max-image-preview:large, max-video-preview:-1"
    />
    <meta property="og:locale" content="en_US" />
    <meta property="og:type" content="website" />
    <meta property="og:title" content="Indigo" />
    <meta property="og:description" content="Indigo" />
    <meta property="og:url" content="http://localhost:3000/" />
    <link rel="preconnect" href="https://fonts.gstatic.com" />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap"
      rel="stylesheet"
    />
    <title>Project Indigo</title>
  </head>
  <body>
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script
      async
      src="https://www.googletagmanager.com/gtag/js?id=G-M5Q0DRCYKV"
    ></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag('js', new Date());

      gtag('config', 'G-M5Q0DRCYKV');
    </script>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

'''
'''--- frontend/src/components/About.js ---
/* eslint-disable react/no-unescaped-entities */
import React from 'react';
import { Box, Grid, Typography } from '@mui/material';

const About = () => {

  return (
    <Grid container spacing={4}>
      <Grid item xs={12}>
        <Box>
          <Typography variant="h2">This is an example text</Typography>
          <Typography variant="body1">
            I'm baby 8-bit pok pok palo santo offal knausgaard distillery mlkshk
            poutine. Godard hot chicken butcher, enamel pin paleo austin
            readymade deep v. Banh mi wayfarers squid pitchfork, beard fashion
            axe retro jianbing fingerstache. Helvetica cloud bread pickled
            drinking vinegar 8-bit, kickstarter artisan shabby chic cornhole
            distillery skateboard seitan.
          </Typography>
        </Box>
      </Grid>
    </Grid>
  );
};

export default About;

'''
'''--- frontend/src/components/ConnectPrompt.js ---
import React from 'react';
import { WalletButton } from 'components';
import { Typography, Box } from '@mui/material';
import PropTypes from 'prop-types';
import NetworkIcon from './NetworkIcon';

const ConnectPrompt = ({ provider, chainId }) => {

  return (
    <Box
      display="flex"
      justifyContent="center"
      alignItems="center"
      flexDirection="column"
      height="45vh"
      gap={3}
    >
      <Typography variant="h5">
        Please connect wallet to view marketplace
      </Typography>
      {!provider && <WalletButton />}
      {!chainId && <NetworkIcon fullText />}
    </Box>
  );
};

ConnectPrompt.propTypes = {
  provider: PropTypes.any,
  chainId: PropTypes.bool,
};

export default ConnectPrompt;

'''
'''--- frontend/src/components/Container.js ---
import React from 'react';
import PropTypes from 'prop-types';
import Box from '@mui/material/Box';

const Container = ({ children, ...rest }) => (
  <Box
    maxWidth={{ sm: 720, md: 1236 }}
    width={1}
    margin={'0 auto'}
    paddingX={2}
    paddingY={{ xs: 4, sm: 6, md: 8 }}
    {...rest}
  >
    {children}
  </Box>
);

Container.propTypes = {
  children: PropTypes.node.isRequired,
};

export default Container;

'''
'''--- frontend/src/components/HeroImage.js ---
/* eslint-disable react/no-unescaped-entities */
import React from 'react';
import { Box } from '@mui/material';
import PropTypes from 'prop-types';
// import { LazyLoadImage } from 'react-lazy-load-image-component';

const HeroImage = ({ hidden, height, cropped=false }) => {
  return (
    <Box
      sx={{
        backgroundColor: '#000',
        display: hidden ? 'none' : 'block',
      }}
      height={height ?? '40vh'}
      minHeight={height ??'40vh'}
      width="100vw"
    >
      <Box
        component={'img'}
        src={cropped ? './cropped-sky.png' : './sky.jpeg'}
        height='100%'
        width='100%'
        sx={{
          objectFit: 'cover',
          objectPosition: 'bottom',
        }}
      />
    </Box>
  );
};

HeroImage.propTypes = {
  hidden: PropTypes.bool,
  height: PropTypes.string,
  cropped: PropTypes.bool,
};

export default HeroImage;

'''
'''--- frontend/src/components/InstructionCard.js ---
import React from 'react';
import { Container } from 'components';
import {
  Typography,
  Box,
  useTheme,
  Card,
  CardContent,
  Divider,
  Grid,
} from '@mui/material';
import PropTypes from 'prop-types';
import styled from '@emotion/styled';

const SpacedDivider = styled(Divider)`
  margin: 30px 10px;
  background: black;
`;

const InstructionRow = ({ number, title, children }) => {
  return (
    <>
      <SpacedDivider />
      <CardContent>
        <Grid container alignItems="center">
          <Grid item xs={1} paddingX={2}>
            <Typography
              fontWeight="bold"
              variant="h2"
              sx={{
                textShadow:
                  '0 0 32px rgb(192 219 255 / 48%), 0 0 8px rgb(65 120 255 / 24%)',
              }}
            >
              {number}
            </Typography>
          </Grid>
          <Grid item xs={6} display="flex" alignItems="center" paddingX={3}>
            <Typography>{title}</Typography>
          </Grid>
          <Grid item xs={5} display="flex" alignItems="center" paddingX={2}>
            <Box marginLeft="auto">{children}</Box>
          </Grid>
        </Grid>
      </CardContent>
    </>
  );
};

InstructionRow.propTypes = {
  number: PropTypes.number.isRequired,
  title: PropTypes.string.isRequired,
  children: PropTypes.node.isRequired,
};

const InstructionCard = ({ title, children }) => {
  const theme = useTheme();

  return (
    <Box
      sx={{
        background: `linear-gradient(${theme.palette.background.paper} , ${theme.palette.common.black} 15%, ${theme.palette.background.paper})`,
      }}
      paddingTop="80px"
    >
      <Container style={{ position: 'relative' }}>
        <Box>
          <Typography
            variant="h3"
            fontWeight="bold"
            sx={{
              textShadow:
                '0 0 32px rgb(192 219 255 / 48%), 0 0 8px rgb(65 120 255 / 24%)',
            }}
          >
            {title}
          </Typography>
        </Box>
        <Container display="flex" justifyContent={'center'}>
          <Card
            sx={{
              padding: 2,
              width: '100%',
              maxWidth: '1000px',
              minWidth: '500px',
              background: 'linear-gradient(#1E0067, #4900FF)',
            }}
          >
            {children}
          </Card>
        </Container>
      </Container>
    </Box>
  );
};

InstructionCard.propTypes = {
  children: PropTypes.node,
  title: PropTypes.string,
};

export { InstructionRow, InstructionCard, SpacedDivider };

'''
'''--- frontend/src/components/Jobs.js ---
import React from 'react';
import Grid from '@mui/material/Grid';
import Box from '@mui/material/Box';
import PropTypes from 'prop-types';
import ModelCard from 'components/ModelCard';

const mock = [
  {
    modelName: 'Sushi Defi dApp Data',
    dapps: ['sushiswap'],
    address: '0x12345',
    description:
      'SushiSwap is a software running on Ethereum that seeks to incentivize a network of users to operate a platform where users can buy and sell crypto assets. ',
    feeTotal: '7',
    url:'312'
  },
  {
    modelName: 'Near + Sushi Volume',
    dapps: ['sushiswap', 'near'],
    address: '0x12345',
    description:
      'Near Protocol, a smart contract-enabled blockchain just like Ethereum, was launched in 2020 to incentivise developers to create and launch more decentralised applications.',
    feeTotal: '7',
    url:'312'
  },
  {
    modelName: 'Aurora + Curve',
    dapps: ['aurora', 'curve'],
    address: '0x12345',
    description:
      'Curve is a exchange protocol based on Ethereum, providing stablecoin transactions with low slippage.',
    feeTotal: '7',
    url:'312'
  },
  {
    modelName: 'Data Correlation',
    dapps: ['sushiswap', 'twitter', 'curve', 'chainlink'],
    address: '0x12345',
    description:
      'Chainlink is a decentralized oracle network that provides real-world data to smart contracts on the blockchain.',
    feeTotal: '7',
    url:'312'
  },
  {
    modelName: 'Ecosystem data',
    dapps: ['twitter', 'chainlink', 'near', 'terra', 'curve'],
    address: '0x12345',
    description:
      'Terra is an open-source blockchain platform for algorithmic stablecoins, that are pegged against traditional fiat.',
    feeTotal: '7',
    url:'312'
  },
];

const Jobs = ({ data }) => {
  data=data.concat(mock);
  return (
    <Box>
      <Grid container spacing={4} height='100%'>
        {data.map((item, i) => (
          <ModelCard item={item} key={item.modelName + i} />
        ))}
      </Grid>
    </Box>
  );
};

Jobs.propTypes = {
  data: PropTypes.array,
};

export default Jobs;

'''
'''--- frontend/src/components/Modal.js ---
import React from 'react';
import { Box, Card, Modal, Link } from '@mui/material';
import PropTypes from 'prop-types';
import { AiOutlineLoading3Quarters } from 'react-icons/ai';
import { keyframes } from '@emotion/react';
import { BiLinkExternal } from 'react-icons/bi';
import { FaRegCheckCircle } from 'react-icons/fa';

const rotate = keyframes`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
`;

const LoadingModal = ({ isLoading, setIsLoading, href, message }) => {
  return (
    <GenericModal isOpen={isLoading} setIsOpen={setIsLoading}>
      <Box
        display="flex"
        justifyContent="center"
        sx={{
          animation: `${rotate} 1s infinite linear`,
        }}
      >
        <AiOutlineLoading3Quarters size={40} />
      </Box>
      <Link
        underline="none"
        component="a"
        href={href}
        target="_blank"
        color="text.primary"
        variant={'h6'}
        style={{
          pointerEvents: href ? 'auto' : 'none',
        }}
      >
        {message} {href && <BiLinkExternal size={11} />}
      </Link>
    </GenericModal>
  );
};

const SuccessModal = ({ isOpen, setIsOpen, href, message }) => {
  return (
    <GenericModal isOpen={isOpen} setIsOpen={setIsOpen}>
      <Box display="flex" justifyContent="center">
        <FaRegCheckCircle size={40} />
      </Box>
      <Link
        underline="none"
        component="a"
        href={href}
        target="_blank"
        color="text.primary"
        variant={'h6'}
      >
        {message} {href && <BiLinkExternal size={11} />}
      </Link>
    </GenericModal>
  );
};

const GenericModal = ({ children, isOpen, setIsOpen }) => {
  return (
    <Modal
      open={isOpen}
      onClose={() => (setIsOpen ? setIsOpen(false) : undefined)}
      aria-labelledby="modal-modal-title"
      aria-describedby="modal-modal-description"
    >
      <Card
        sx={{
          position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          width: 400,
          bgcolor: 'background.paper',
          boxShadow: 1,
        }}
      >
        <Box
          padding={4}
          alignItems="center"
          display="flex"
          flexDirection="column"
          gap={2}
        >
          {children}
        </Box>
      </Card>
    </Modal>
  );
};

GenericModal.propTypes = {
  isOpen: PropTypes.bool.isRequired,
  setIsOpen: PropTypes.func,
  children: PropTypes.node.isRequired,
};

SuccessModal.propTypes = {
  isOpen: PropTypes.any.isRequired,
  setIsOpen: PropTypes.func,
  href: PropTypes.string,
  message: PropTypes.string.isRequired,
};

LoadingModal.propTypes = {
  isLoading: PropTypes.any.isRequired,
  setIsLoading: PropTypes.func,
  href: PropTypes.string,
  message: PropTypes.string.isRequired,
};

export { GenericModal, LoadingModal, SuccessModal };

'''
'''--- frontend/src/components/ModelCard.js ---
import React from 'react';
import { useTheme } from '@mui/material/styles';
import Grid from '@mui/material/Grid';
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import Card from '@mui/material/Card';
import CardMedia from '@mui/material/CardMedia';
import CardContent from '@mui/material/CardContent';
import Button from '@mui/material/Button';
import Tooltip from '@mui/material/Tooltip';
import PropTypes from 'prop-types';
import Ellipses from 'svg/illustrations/Ellipses';
import { useNavigate } from 'react-router-dom';
import formatModelName from 'utils/formatModelName';

const imageMappings = {
  near: 'near.svg',
  sushiswap: 'sushiswap.svg',
  curve: 'curve.svg',
  twitter: 'twitter.svg',
  chainlink: 'chainlink.svg',
  terra: 'terra.svg',
  ethereum: 'eth.svg',
};

function getLogo(dapp) {
  const path = imageMappings[dapp];
  return path ? `/logo/${path}` : undefined;
}

const ModelCardMedia = ({ dapps, itemsShown = 4 }) => {
  const [size, wrap] = dapps.length === 2 ? [150, 'nowrap'] : [130, 'wrap'];
  let ellipses = dapps.length > 4;
  let displayCount = 0;

  if (dapps.length === 1) {
    return (
      <Box
        display="flex"
        justifyContent="center"
        height={{ xs: '200px', sm: '250px' }}
      >
        <CardMedia
          sx={{ maxWidth: '300px' }}
          src={getLogo(dapps[0])}
          component="img"
        />
      </Box>
    );
  }

  return (
    <Box
      height={{ xs: '200px', sm: '250px' }}
      sx={{
        borderRadius: '10px',
        display: 'flex',
        flexWrap: wrap,
        justifyContent: 'center',
        alignItems: 'center',
        position: 'relative',
        minWidth: '300px',
      }}
    >
      {dapps.map((dapp, index) => {
        if (!getLogo(dapp) || displayCount >= itemsShown) {
          ellipses = true;
          return;
        }
        displayCount += 1;
        return (
          <Box
            sx={{
              zIndex: '1',
              display: 'flex',
              justifyContent: 'center',
              width: size,
              height: size,
            }}
            key={`${dapp}-${index}`}
          >
            <img
              src={getLogo(dapp)}
              style={{
                height: '100%',
                filter:
                  'drop-shadow(1px 1px 0 black) drop-shadow(-1px -1px 0 black)',
              }}
            />
          </Box>
        );
      })}
      {ellipses && (
        <Tooltip title={dapps.join(', ')} arro>
          <Box
            sx={{
              position: 'absolute',
              bottom: { xs: '10%', sm: '0px' },
              right: '45px',
              zIndex: '2',
              width: '30px',
            }}
          >
            <Ellipses />
          </Box>
        </Tooltip>
      )}
    </Box>
  );
};

const ModelCardContent = ({ item, hasLink = true, children }) => {
  const navigate = useNavigate();
  const { description, address, modelName, feeTotal, url } = item;

  return (
    <CardContent
      sx={{
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'flex-start',
      }}
    >
      <Typography variant={'h4'} sx={{ fontWeight: 'bold' }}>
        {formatModelName(modelName)}
      </Typography>
      {address && (
        <Typography variant={'h6'} sx={{ fontWeight: 500 }}>
          Author: {address}
        </Typography>
      )}
      <Box marginTop={2} marginBottom={3} height="100px">
        <Typography variant={'subtitle2'} color="text.secondary">
          {description}
        </Typography>
        {children}
      </Box>
      {feeTotal && url === '312' && (
        <Button
          variant={'outlined'}
          color="secondary"
          disabled
          fullWidth
          size="large"
        >
          <Typography variant={'h6'} fontWeight="bold">
            Coming Soon
          </Typography>
        </Button>
      )}

      {feeTotal && hasLink && url !== '312' && (
        <Button
          variant={'outlined'}
          size="large"
          color="secondary"
          onClick={() => navigate(`/market/${modelName}`)}
          fullWidth
        >
          <Typography variant={'h6'} fontWeight="bold">
            Payload: {feeTotal} $INDG
          </Typography>
        </Button>
      )}
      {feeTotal && !hasLink && url !== '312' ? (
        <Typography variant={'h6'} color="secondary" fontWeight="bold">
          Access: {feeTotal} $INDG
        </Typography>
      ) : (
        <></>
      )}
    </CardContent>
  );
};

const ModelCard = ({ item }) => {
  const theme = useTheme();

  return (
    <Grid item xs={12} sm={6} md={4}>
      <Box
        display={'block'}
        width={1}
        minWidth={{ xs: '550px', sm: '0' }}
        height={1}
        sx={{
          textDecoration: 'none',
          transition: 'all .2s ease-in-out',
          '&:hover': {
            transform: `translateY(-${theme.spacing(1 / 2)})`,
          },
        }}
      >
        <Box
          component={Card}
          width={1}
          height={1}
          data-aos={'fade-up'}
          data-aos-delay={1 * 100}
          data-aos-offset={100}
          data-aos-duration={600}
          flexDirection={'column'}
          display={'flex'}
          sx={{
            background: 'linear-gradient(#1E0067, #4900FF)',
            '&:hover': {
              borderRight: `${theme.spacing(1 / 2)} solid ${
                theme.palette.secondary.main
              }`,
            },
          }}
        >
          <ModelCardMedia dapps={item.dapps} />
          <ModelCardContent item={item} />
        </Box>
      </Box>
    </Grid>
  );
};

ModelCard.propTypes = {
  item: PropTypes.shape({
    dapps: PropTypes.arrayOf(PropTypes.string).isRequired,
    modelName: PropTypes.string.isRequired,
    address: PropTypes.string,
    url: PropTypes.string,
    description: PropTypes.string.isRequired,
    feeTotal: PropTypes.string,
  }).isRequired,
};

ModelCardMedia.propTypes = {
  dapps: PropTypes.arrayOf(PropTypes.string).isRequired,
  itemsShown: PropTypes.number,
};

ModelCardContent.propTypes = {
  item: PropTypes.shape({
    modelName: PropTypes.string.isRequired,
    address: PropTypes.string,
    url: PropTypes.string,
    description: PropTypes.string.isRequired,
    feeTotal: PropTypes.string,
  }).isRequired,
  hasLink: PropTypes.bool,
  children: PropTypes.node,
};

export { ModelCardContent, ModelCardMedia };
export default ModelCard;

'''
'''--- frontend/src/components/NetworkIcon.js ---
import React, { useContext } from 'react';
import PropTypes from 'prop-types';
import Button from '@mui/material/Button';
import IconButton from '@mui/material/IconButton';
import Tooltip from '@mui/material/Tooltip';
import { useTheme } from '@mui/material/styles';
import { useContract } from 'hooks';
import { IoMdPulse } from 'react-icons/io';
import { AppContext } from 'context/AppContext';

const NetworkIcon = ({ isAurora = false, fullText = false }) => {
  const theme = useTheme();
  const { provider } = useContext(AppContext);
  const { changeNetwork } = useContract(provider);
  const title = isAurora ? 'Connected' : 'Connect to Aurora Network';
  if(!provider) return null;

  return (
    <>
      {fullText ? (
        <Button
          onClick={changeNetwork}
          size="large"
          color="primary"
          variant="contained"
          display="flex"
          sx={{ gap: 1 }}
        >
          <IoMdPulse size={30} />
          {title}
        </Button>
      ) : (
        <Tooltip arrow title={title}>
          <IconButton
            onClick={changeNetwork}
            color={isAurora ? 'inherit' : 'warning'}
            sx={{
              background: `${theme.palette.primary.dark} !important`,
            }}
          >
            <IoMdPulse size={30} />
          </IconButton>
        </Tooltip>
      )}
    </>
  );
};

NetworkIcon.propTypes = {
  isAurora: PropTypes.bool,
  fullText: PropTypes.bool,
};

export default NetworkIcon;

'''
'''--- frontend/src/components/Page.js ---
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { ThemeProvider } from '@mui/material/styles';
import Paper from '@mui/material/Paper';
import CssBaseline from '@mui/material/CssBaseline';
import getTheme from 'theme';
import AOS from 'aos';

export const useDarkMode = () => {
  const [themeMode, setTheme] = useState('dark');
  const [mountedComponent, setMountedComponent] = useState(false);

  const setMode = (mode) => {
    try {
      window.localStorage.setItem('themeMode', mode);
    } catch {
      /* do nothing */
    }

    setTheme(mode);
  };

  const themeToggler = () => {
    themeMode === 'light' ? setMode('dark') : setMode('light');
  };

  useEffect(() => {
    try {
      const localTheme = window.localStorage.getItem('themeMode');
      localTheme ? setTheme(localTheme) : setMode('dark');
    } catch {
      setMode('dark');
    }

    setMountedComponent(true);
  }, []);

  return [themeMode, themeToggler, mountedComponent];
};

export default function Page({ children }) {
  React.useEffect(() => {
    // Remove the server-side injected CSS.
    const jssStyles = document.querySelector('#jss-server-side');
    if (jssStyles) {
      jssStyles.parentElement.removeChild(jssStyles);
    }

    AOS.init({
      once: true,
      delay: 0,
      duration: 800,
      offset: 0,
      easing: 'ease-in-out',
    });
  }, []);

  const [themeMode, themeToggler, mountedComponent] = useDarkMode();

  useEffect(() => {
    AOS.refresh();
  }, [mountedComponent, themeMode]);

  return (
    <ThemeProvider theme={getTheme(themeMode, themeToggler)}>
      {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}
      <CssBaseline />
      <Paper elevation={0}>{children}</Paper>
    </ThemeProvider>
  );
}

Page.propTypes = {
  children: PropTypes.node.isRequired,
};

'''
'''--- frontend/src/components/SearchBar.js ---
import React from 'react';
import { Card, TextField, InputAdornment, Box } from '@mui/material';

const Search = () => {
  function handleSubmit(e){
    e.preventDefault();
    alert('not implemented yet');
  }

  return (
    <Card>
      <form noValidate autoComplete="off" onSubmit={handleSubmit}>
        <Box display="flex" alignItems={'center'}>
          <Box width={1} marginRight={1}>
            <TextField
              sx={{
                height: 54,
                '& .MuiOutlinedInput-notchedOutline': {
                  border: '0 !important',
                },
              }}
              variant="outlined"
              color="primary"
              size="medium"
              placeholder="Search"
              fullWidth
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <Box
                      component={'svg'}
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                      width={24}
                      height={24}
                      color={'primary.main'}
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                      />
                    </Box>
                  </InputAdornment>
                ),
              }}
            />
          </Box>
        </Box>
      </form>
    </Card>
  );
};

export default Search;

'''
'''--- frontend/src/components/Table.js ---
import React from 'react';
import mockGraphData from '../utils/mockGraphData.json';
import { DataGrid } from '@mui/x-data-grid';

const Table = (data) => {
  console.log(data);

  function transformRedshiftData(data) {
    const { modelData } = data;
    if (!modelData) throw new Error('Invalid model format');
    const { ColumnMetadata, Records } = data.modelData;

    const columns = ColumnMetadata.map((column) => ({
      field: column.label,
      headerName: column.label,
      flex: 1,
      minWidth: 125,
    }));

    const rows = Records.map((record, index) => {
      let row = { id: index };
      columns.forEach(({ field }, i) => {
        row[field] = [...Object.values(record[i])];
      });
      return row;
    });

    return {
      columns,
      rows,
    };
  }

  const { rows, columns } = transformRedshiftData(mockGraphData);

  return (
    <div style={{ height: 400, width: '100%' }}>
      <DataGrid
        rows={rows}
        columns={columns}
        pageSize={5}
        rowsPerPageOptions={[5]}
        checkboxSelection
        disableSelectionOnClick
      />
    </div>
  );
};

export default Table;

'''
'''--- frontend/src/components/ThemeModeToggler.js ---
import React from 'react';
import Button from '@mui/material/Button';
import { alpha, useTheme } from '@mui/material/styles';

const ThemeModeToggler = () => {
  const theme = useTheme();
  const { themeToggler } = theme;
  const { mode } = theme.palette;

  return (
    <Button
      variant={'outlined'}
      onClick={() => themeToggler()}
      aria-label="Dark mode toggler"
      color={mode === 'light' ? 'primary' : 'secondary'}
      sx={{
        borderRadius: 2,
        minWidth: 'auto',
        padding: 0.5,
        borderColor: alpha(theme.palette.divider, 0.2),
      }}
    >
      {mode === 'light' ? (
        <svg
          width={20}
          height={20}
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
          />
        </svg>
      ) : (
        <svg
          width={20}
          height={20}
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
          />
        </svg>
      )}
    </Button>
  );
};

export default ThemeModeToggler;

'''
'''--- frontend/src/components/index.js ---
import About from './About';
import Container from './Container';
import Table from './Table';
import HeroImage from './HeroImage';
import Jobs from './Jobs';
import {GenericModal, LoadingModal, SuccessModal} from './Modal';
import ModelCard from './ModelCard';
import NetworkIcon from './NetworkIcon';
import Page from './Page';
import SearchBar from './SearchBar';
import ThemeModeToggler from './ThemeModeToggler';
import WalletButton from './WalletButton';
import ConnectPrompt from './ConnectPrompt';

export {
  About,
  Container,
  ConnectPrompt,
  Table,
  GenericModal,
  HeroImage,
  Jobs,
  LoadingModal,
  ModelCard,
  NetworkIcon,
  Page,
  SearchBar,
  SuccessModal,
  ThemeModeToggler,
  WalletButton
};

'''
'''--- frontend/src/hooks/index.js ---
import useContract from './useContract';

export { useContract };

'''
'''--- frontend/src/hooks/tests/useContract.test.js ---
/**
 * @jest-environment jsdom
 */

import useContract from '../useContract';
import { renderHook} from '@testing-library/react-hooks';

describe('Contract Tests', () => {
  let hook;

  beforeEach(() => {
    hook = renderHook(() => useContract());
  });

  it('should instantiate contract', () => {
    expect(true).toBeTruthy();
  });
});

'''
'''--- frontend/src/hooks/tests/useMetamask.test.js ---
import useMetamask from '../useMetamask';
import { renderHook} from '@testing-library/react-hooks';
import ethers from 'ethers';
import ganache from 'ganache-cli';

describe('Contract Tests', () => {
  let hook;

  beforeEach(() => {
    hook = renderHook(() => useMetamask());
  });

  it('should render hook', () => {
    const { provider } = hook;
    expect(true).toBeTruthy();
  });
});

'''
'''--- frontend/src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import reportWebVitals from './reportWebVitals';
import App from './App';

ReactDOM.render(<App />, document.getElementById('root'));

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

'''
'''--- frontend/src/layout/components/Footer/Footer.js ---
import React from 'react';
import Grid from '@mui/material/Grid';
import Box from '@mui/material/Box';
import Link from '@mui/material/Link';
import IndigoLogo from 'svg/illustrations/IndigoLogo';
import { developerDocUrl, githubUrl } from 'utils/constants';

const Footer = () => {

  const links = [
    {
      title: 'Documentation',
      uri: developerDocUrl,
    },
    {
      title: 'Github',
      uri: githubUrl,
    },
  ];

  return (
    <Grid container spacing={2}>
      <Grid item xs={12}>
        <Box
          display={'flex'}
          justifyContent={'space-between'}
          alignItems={'center'}
          width={1}
          flexDirection={{ xs: 'column', sm: 'row' }}
        >
          <Box display="flex" flexWrap={'wrap'} alignItems={'center'}>
            {links.map(({ title, uri }, index) => (
              <Box marginRight={2} key={`${title}-${index}`}>
                <Link
                  underline="none"
                  component="a"
                  href={uri}
                  color="text.primary"
                  variant={'subtitle2'}
                  target='_blank'
                >
                  {title}
                </Link>
              </Box>
            ))}
          </Box>
          <Box component="a" href="/" title="Indigo" width={80}>
            <IndigoLogo />
          </Box>
        </Box>
      </Grid>
    </Grid>
  );
};

export default Footer;

'''
'''--- frontend/src/layout/components/Footer/index.js ---
export { default } from './Footer';

'''
'''--- frontend/src/layout/components/Sidebar/Sidebar.js ---
import React from 'react';
import PropTypes from 'prop-types';
import Drawer from '@mui/material/Drawer';
import Box from '@mui/material/Box';
import { SidebarNav } from './components';

const Sidebar = ({ pages, open, variant, onClose }) => {
  return (
    <Drawer
      anchor="left"
      onClose={() => onClose()}
      open={open}
      variant={variant}
      sx={{
        '& .MuiPaper-root': {
          width: '100%',
          maxWidth: 280,
        },
      }}
    >
      <Box
        sx={{
          height: '100%',
          padding: 1,
        }}
      >
        <SidebarNav pages={pages} />
      </Box>
    </Drawer>
  );
};

Sidebar.propTypes = {
  onClose: PropTypes.func,
  open: PropTypes.bool.isRequired,
  variant: PropTypes.string.isRequired,
  pages: PropTypes.object.isRequired,
};

export default Sidebar;

'''
'''--- frontend/src/layout/components/Sidebar/components/SidebarNav/SidebarNav.js ---
import React from 'react';
import PropTypes from 'prop-types';
import Box from '@mui/material/Box';
import IndigoLogo from 'svg/illustrations/IndigoLogo';
import {WalletButton} from 'components';

import { SingleNavItem } from './components/NavItem';
import { githubUrl, developerDocUrl } from 'utils/constants';

const SidebarNav = ({ pages }) => {
  return (
    <Box>
      <Box width={1} paddingX={2} paddingY={1}>
        <Box
          display={'flex'}
          component="a"
          href="/"
          title="theFront"
          width={{ xs: 100, md: 120 }}
        >
          <IndigoLogo />
        </Box>
      </Box>
      <Box paddingX={2}>
        {Object.values(pages).map((page) => {
          const key = `${page.title}-page`;
          return <SingleNavItem id={key} key={key} item={page} />;
        })}
        <SingleNavItem
          id={'documentation-page'}
          item={{ href: githubUrl, title: 'Github' }}
          target='_blank'
        />
        <SingleNavItem
          id={'documentation-page'}
          item={{ href: developerDocUrl, title: 'Documentation' }}
          target='_blank'
        />
        <Box marginY={1}>
          <WalletButton fullWidth/>
        </Box>
      </Box>
    </Box>
  );
};

SidebarNav.propTypes = {
  pages: PropTypes.object.isRequired,
};

export default SidebarNav;

'''
'''--- frontend/src/layout/components/Sidebar/components/SidebarNav/components/NavItem.js ---
import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import { alpha, useTheme } from '@mui/material/styles';
import Accordion from '@mui/material/Accordion';
import AccordionSummary from '@mui/material/AccordionSummary';
import AccordionDetails from '@mui/material/AccordionDetails';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import Grid from '@mui/material/Grid';
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Typography from '@mui/material/Typography';

const MultiNavItem = ({ title, items }) => {
  const theme = useTheme();
  const [activeLink, setActiveLink] = useState('');
  useEffect(() => {
    setActiveLink(window && window.location ? window.location.pathname : '');
  }, []);

  const hasActiveLink = () => items.find((i) => i.href === activeLink);

  return (
    <Box>
      <Accordion
        disableGutters
        elevation={0}
        sx={{ backgroundColor: 'transparent' }}
      >
        <AccordionSummary
          expandIcon={<ExpandMoreIcon />}
          aria-controls="panel1a-content"
          id="panel1a-header"
          sx={{ padding: 0 }}
        >
          <Typography
            fontWeight={hasActiveLink() ? 600 : 400}
            color={hasActiveLink() ? 'primary' : 'text.primary'}
          >
            {title}
          </Typography>
        </AccordionSummary>
        <AccordionDetails sx={{ padding: 0 }}>
          <Grid container spacing={1}>
            {items.map((p, i) => (
              <Grid item key={i} xs={12}>
                <Button
                  size={'large'}
                  component={'a'}
                  href={p.href}
                  fullWidth
                  sx={{
                    justifyContent: 'flex-start',
                    color:
                      activeLink === p.href
                        ? theme.palette.primary.main
                        : theme.palette.text.primary,
                    backgroundColor:
                      activeLink === p.href
                        ? alpha(theme.palette.primary.main, 0.1)
                        : 'transparent',
                    fontWeight: activeLink === p.href ? 600 : 400,
                  }}
                >
                  {p.title}
                  {p.isNew && (
                    <Box
                      padding={0.5}
                      display={'inline-flex'}
                      borderRadius={1}
                      bgcolor={'primary.main'}
                      marginLeft={2}
                    >
                      <Typography
                        variant={'caption'}
                        sx={{ color: 'common.white', lineHeight: 1 }}
                      >
                        new
                      </Typography>
                    </Box>
                  )}
                </Button>
              </Grid>
            ))}
          </Grid>
        </AccordionDetails>
      </Accordion>
    </Box>
  );
};

const SingleNavItem = ({item, ...props}) => {
  const theme = useTheme();
  return (
    <Button
      size={'large'}
      component={'a'}
      href={item.href}
      fullWidth
      sx={{
        justifyContent: 'flex-start',
        color: theme.palette.text.main,
        backgroundColor:'transparent',
        fontWeight: 400,
      }}
      {...props}
    >
      {item.title}
    </Button>
  );
};

MultiNavItem.propTypes = {
  items: PropTypes.array.isRequired,
  title: PropTypes.string.isRequired,
  onClose: PropTypes.func,
};

SingleNavItem.propTypes = {
  id: PropTypes.string.isRequired,
  item: PropTypes.object.isRequired,
  colorInvert: PropTypes.bool,
};

export { MultiNavItem, SingleNavItem };

'''
'''--- frontend/src/layout/components/Sidebar/components/SidebarNav/index.js ---
export { default } from './SidebarNav';

'''
'''--- frontend/src/layout/components/Sidebar/components/index.js ---
export { default as SidebarNav } from './SidebarNav';

'''
'''--- frontend/src/layout/components/Sidebar/index.js ---
export { default } from './Sidebar';

'''
'''--- frontend/src/layout/components/Topbar/components/NavItem/NavItem.js ---
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import { alpha, useTheme } from '@mui/material/styles';
import Popover from '@mui/material/Popover';
import Typography from '@mui/material/Typography';
import Grid from '@mui/material/Grid';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import { useNavigate } from 'react-router';

const SingleNavItem = ({ id, items, colorInvert = false }) => {
  const navigate = useNavigate();
  const item = items;
  const linkColor = colorInvert ? 'common.white' : 'text.primary';

  return (
    <Box
      display={'flex'}
      alignItems={'center'}
      aria-describedby={id}
      sx={{ cursor: 'pointer' }}
      onClick={()=>navigate(item.href)}
    >
      <Typography fontWeight={400} color={linkColor} component="a" href={items.href} sx={{textDecoration:'none'}}>
        {item.title}
      </Typography>
    </Box>
  );
};

const MultiNavItem = ({ title, id, items, colorInvert = false }) => {
  const theme = useTheme();

  const [anchorEl, setAnchorEl] = useState(null);
  const [openedPopoverId, setOpenedPopoverId] = useState(null);

  const handleClick = (event, popoverId) => {
    setAnchorEl(event.target);
    setOpenedPopoverId(popoverId);
  };

  const handleClose = () => {
    setAnchorEl(null);
    setOpenedPopoverId(null);
  };

  const [activeLink, setActiveLink] = useState('');
  useEffect(() => {
    setActiveLink(window && window.location ? window.location.pathname : '');
  }, []);

  const hasActiveLink = () => items.find((i) => i.href === activeLink);
  const linkColor = colorInvert ? 'common.white' : 'text.primary';

  return (
    <Box>
      <Box
        display={'flex'}
        alignItems={'center'}
        aria-describedby={id}
        sx={{ cursor: 'pointer' }}
        onClick={(e) => handleClick(e, id)}
      >
        <Typography
          fontWeight={openedPopoverId === id || hasActiveLink() ? 700 : 400}
          color={linkColor}
        >
          {title}
        </Typography>
        <ExpandMoreIcon
          sx={{
            marginLeft: theme.spacing(1 / 4),
            width: 16,
            height: 16,
            transform: openedPopoverId === id ? 'rotate(180deg)' : 'none',
            color: linkColor,
          }}
        />
      </Box>
      <Popover
        elevation={3}
        id={id}
        open={openedPopoverId === id}
        anchorEl={anchorEl}
        onClose={handleClose}
        anchorOrigin={{
          vertical: 'bottom',
          horizontal: 'center',
        }}
        transformOrigin={{
          vertical: 'top',
          horizontal: 'center',
        }}
        sx={{
          '.MuiPaper-root': {
            maxWidth: items.length > 12 ? 350 : 250,
            padding: 2,
            marginTop: 4,
            borderTopRightRadius: 0,
            borderTopLeftRadius: 0,
            borderBottomRightRadius: 8,
            borderBottomLeftRadius: 8,
            borderTop: `3px solid ${theme.palette.primary.main}`,
          },
        }}
      >
        <Grid container spacing={0.5}>
          {items.map((p, i) => (
            <Grid item key={i} xs={items.length > 12 ? 6 : 12}>
              <Button
                component={'a'}
                href={p.href}
                fullWidth
                sx={{
                  justifyContent: 'flex-start',
                  color:
                    activeLink === p.href
                      ? theme.palette.primary.main
                      : theme.palette.text.primary,
                  backgroundColor:
                    activeLink === p.href
                      ? alpha(theme.palette.primary.main, 0.1)
                      : 'transparent',
                  fontWeight: activeLink === p.href ? 600 : 400,
                }}
              >
                {p.title}
                {p.isNew && (
                  <Box
                    padding={0.5}
                    display={'inline-flex'}
                    borderRadius={1}
                    bgcolor={'primary.main'}
                    marginLeft={2}
                  >
                    <Typography
                      variant={'caption'}
                      sx={{ color: 'common.white', lineHeight: 1 }}
                    >
                      new
                    </Typography>
                  </Box>
                )}
              </Button>
            </Grid>
          ))}
        </Grid>
      </Popover>
    </Box>
  );
};

MultiNavItem.propTypes = {
  title: PropTypes.string.isRequired,
  id: PropTypes.string.isRequired,
  items: PropTypes.array.isRequired,
  colorInvert: PropTypes.bool,
};

SingleNavItem.propTypes = {
  id: PropTypes.string.isRequired,
  items: PropTypes.object.isRequired,
  colorInvert: PropTypes.bool,
};

export {SingleNavItem, MultiNavItem};

'''
'''--- frontend/src/layout/components/Topbar/components/NavItem/index.js ---
export { SingleNavItem, MultiNavItem } from './NavItem';

'''
'''--- frontend/src/layout/components/Topbar/components/index.js ---
export { SingleNavItem, MultiNavItem } from './NavItem';

'''
'''--- frontend/src/layout/components/Topbar/index.js ---
import React, { useState, useEffect, useContext } from 'react';
import PropTypes from 'prop-types';
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import IconButton from '@mui/material/IconButton';
import Tooltip from '@mui/material/Tooltip';
import { alpha, useTheme } from '@mui/material/styles';
import MenuIcon from '@mui/icons-material/Menu';
import IndigoLogo from 'svg/illustrations/IndigoLogo';
import IndigoIcon from 'svg/illustrations/IndigoIcon';
import { WalletButton } from 'components';
import { useContract } from 'hooks';
import { AppContext } from 'context/AppContext';
import { CHAIN_ID } from 'utils/constants';
import { SingleNavItem } from './components/NavItem';
import { useNavigate } from 'react-router-dom';
import { NetworkIcon } from 'components';

const Topbar = ({ onSidebarOpen, pages, colorInvert = false }) => {
  const theme = useTheme();
  const { provider } = useContext(AppContext);
  const [isAurora, setIsAurora] = useState(false);
  const { addToMetamask } = useContract(provider);
  const navigate = useNavigate();

  useEffect(() => {
    (async () => {
      if (provider) {
        const { chainId } = await provider.getNetwork();
        if (chainId === CHAIN_ID) {
          setIsAurora(true);
        } else {
          setIsAurora(false);
        }
      }
    })();
  }, [provider]);

  return (
    <Box
      display={'flex'}
      justifyContent={'space-between'}
      alignItems={'center'}
      marginTop="10px"
    >
      <Box
        display={'flex'}
        justifyContent={{ xs: 'space-between', md: 'flex-start' }}
        alignItems="center"
        sx={{ gap: 2 }}
      >
        <Box
          display={'flex'}
          alignItems="flex-start"
          justifyContent="space-between"
          component="a"
          href="https://indigodapp.com/"
          target="_blank"
          title="Indigo"
          width="120px"
          marginX={2}
        >
          <IndigoLogo />
        </Box>
        <Box
          sx={{ display: { xs: 'none', md: 'flex' }, gap: '30px' }}
          alignItems={'center'}
        >
          {Object.values(pages).map((page) => {
            const key = `${page.title}-page`;
            return (
              <SingleNavItem
                id={key}
                key={key}
                items={page}
                colorInvert={colorInvert}
              />
            );
          })}
        </Box>
      </Box>
      <Box sx={{ display: { xs: 'none', md: 'flex' }, gap: 2 }}>
        <Button
          variant="contained"
          sx={{
            color: theme.palette.text.primary,
            background: `linear-gradient( to right, ${theme.palette.secondary.main}, ${theme.palette.secondary.dark})`,
            fontWeight: 'bold',
          }}
          onClick={() => navigate('/mint')}
        >
          Mint NFT Model
        </Button>
        <WalletButton />
        <NetworkIcon isAurora={isAurora} />
        <Tooltip arrow title="Add $INDG to Metamask">
          <IconButton
            onClick={addToMetamask}
            sx={{
              background: `${theme.palette.primary.dark} !important`,
            }}
          >
            <IndigoIcon
              size={30}
              style={{ filter: 'brightness(0) invert(1)' }}
            />
          </IconButton>
        </Tooltip>
      </Box>
      <Box sx={{ display: { xs: 'block', md: 'none' } }} alignItems={'center'}>
        <Button
          onClick={() => onSidebarOpen()}
          aria-label="Menu"
          variant={'outlined'}
          sx={{
            borderRadius: 2,
            minWidth: 'auto',
            padding: 1,
            borderColor: alpha(theme.palette.divider, 0.2),
          }}
        >
          <MenuIcon />
        </Button>
      </Box>
    </Box>
  );
};

Topbar.propTypes = {
  onSidebarOpen: PropTypes.func,
  pages: PropTypes.object,
  colorInvert: PropTypes.bool,
  enterApp: PropTypes.bool,
};

export default Topbar;

'''
'''--- frontend/src/layout/components/index.js ---
import Topbar from './Topbar';
import Sidebar from './Sidebar';
import Footer from './Footer';

export { Topbar, Sidebar, Footer };

'''
'''--- frontend/src/layout/index.js ---
import React, { useState } from 'react';
import PropTypes from 'prop-types';
import { useTheme } from '@mui/material/styles';
import useMediaQuery from '@mui/material/useMediaQuery';
import Box from '@mui/material/Box';
import Divider from '@mui/material/Divider';
import AppBar from '@mui/material/AppBar';
import useScrollTrigger from '@mui/material/useScrollTrigger';
import pages from './navigation';
import { Topbar, Sidebar, Footer } from './components';
import { Container, HeroImage } from 'components';

const Main = ({ children, colorInvert = false, enterApp = false, hideImage=false, noGradient = false }) => {
  const theme = useTheme();
  const isMd = useMediaQuery(theme.breakpoints.up('md'), {
    defaultMatches: true,
  });

  const [openSidebar, setOpenSidebar] = useState(false);

  const handleSidebarOpen = () => {
    setOpenSidebar(true);
  };

  const handleSidebarClose = () => {
    setOpenSidebar(false);
  };

  const open = isMd ? false : openSidebar;

  const trigger = useScrollTrigger({
    disableHysteresis: true,
    threshold: 38,
  });

  return (
    <Box>
      <AppBar
        position={'absolute'}
        sx={{
          top: 0,
          background: `linear-gradient(${theme.palette.background.paper}, rgba(0,0,0,0))`,
        }}
        elevation={0}
      >
        <Container paddingY={1}>
          <Topbar
            onSidebarOpen={handleSidebarOpen}
            pages={pages}
            colorInvert={trigger ? false : colorInvert}
            enterApp={enterApp}
          />
        </Container>
      </AppBar>
      <Sidebar
        onClose={handleSidebarClose}
        open={open}
        variant="temporary"
        pages={pages}
      />
      <HeroImage hidden={hideImage} cropped />
      <main
        style={{
          background: noGradient
            ? theme.palette.background.paper
            : `linear-gradient(${theme.palette.common.black}, ${theme.palette.background.paper})`,
        }}
      >
        {children}
        <Divider />
      </main>
      <Container paddingY={4}>
        <Footer />
      </Container>
    </Box>
  );
};

Main.propTypes = {
  children: PropTypes.node,
  colorInvert: PropTypes.bool,
  bgcolor: PropTypes.string,
  enterApp: PropTypes.bool,
  hideImage: PropTypes.bool,
  noGradient: PropTypes.bool,
};

export default Main;

'''
'''--- frontend/src/layout/navigation.js ---
const pages = {
  market: {
    title: 'Marketplace',
    href: '/'
  },
  airdrop: {
    title: 'Airdrop',
    href: '/airdrop'
  },
  instructions: {
    title: 'Instructions',
    href: 'https://indigodapp.com/instructions/'
  },
};

export default pages;

'''
'''--- frontend/src/reportWebVitals.js ---
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- frontend/src/routes.js ---
import React from 'react';
import { Routes as ReactRoutes, Route, Navigate } from 'react-router-dom';
import Market from './views/Market';
import DisplayData from './views/DisplayData';
import Developer from './views/Developer';
import ModelPreview from './views/ModelPreview';
import Airdrop from './views/Airdrop';
import Mint from './views/Mint';

const Routes = () => {
  return (
    <ReactRoutes>
      <Route path="/" element={<Market/>} />
      <Route path="/developer" element={<Developer/>} />
      <Route path="/market/:id" element={<ModelPreview/>} />
      <Route path="/airdrop" element={<Airdrop />} />
      <Route path="/mint" element={<Mint />} />
      <Route path="/data" element={<DisplayData/>} />
      <Route path="*" element={<Navigate replace to="/" />} />
    </ReactRoutes>
  );
};

export default Routes;

'''
'''--- frontend/src/svg/illustrations/Airtable.js ---
import React from 'react';
import PropTypes from 'prop-types';

const AirtableIcon = ({ style, size, disabled }) => {
  const colors = [
    '#eee',
    '#FCB400',
    '#18BFFF',
    '#F82B60',
    'rgba(0, 0, 0, 0.25)',
  ];

  function isColored(number) {
    if (disabled || !colors[number]) return '#EEEEEF';
    return colors[number];
  }

  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width={size}
      viewBox="0 0 680 148"
      shapeRendering="geometricPrecision"
      style={{
        opacity: disabled ? 0.4 : 1,
        ...style,
      }}
    >
      <path
        fill={isColored(0)}
        d="M272.85 85.198L261.013 53.29c-.483-1.305-2.329-1.305-2.813 0L246.365 85.2a1.5 1.5 0 0 0 1.407 2.021h23.671a1.5 1.5 0 0 0 1.406-2.022m5.469 17.934h-37.42a1.5 1.5 0 0 0-1.406.978l-7.367 19.854a1.5 1.5 0 0 1-1.406.978H214.5a1.5 1.5 0 0 1-1.392-2.058l37.341-93.022a1.5 1.5 0 0 1 1.393-.94h15.53c.612 0 1.163.372 1.392.94l37.34 93.021a1.5 1.5 0 0 1-1.392 2.06h-16.216a1.5 1.5 0 0 1-1.406-.979l-7.368-19.854a1.5 1.5 0 0 0-1.406-.978m35.387-41.564h13.872a1.5 1.5 0 0 1 1.5 1.5v60.374a1.5 1.5 0 0 1-1.5 1.5h-13.872a1.5 1.5 0 0 1-1.5-1.5V63.068a1.5 1.5 0 0 1 1.5-1.5m65.964 14.687a1.5 1.5 0 0 1-1.5 1.5h-.42c-6.859 0-11.89 1.646-15.09 4.938-3.202 3.292-4.8 8.734-4.8 16.324v24.426a1.5 1.5 0 0 1-1.5 1.5h-13.736a1.5 1.5 0 0 1-1.5-1.5V63.068a1.5 1.5 0 0 1 1.5-1.5h13.598a1.5 1.5 0 0 1 1.5 1.5V75.01h.275c1.646-4.938 4.252-8.731 7.82-11.385 3.565-2.651 7.955-3.978 13.167-3.978h.686v16.607zm37.93-.558a1.5 1.5 0 0 0-1.5 1.5v25.112c0 2.561.5 4.39 1.508 5.487 1.005 1.097 2.743 1.646 5.212 1.646h1.381a1.5 1.5 0 0 1 1.5 1.5v12.637a1.5 1.5 0 0 1-1.5 1.5h-5.908c-6.127 0-10.836-1.577-14.128-4.732-3.293-3.155-4.939-7.84-4.939-14.06v-29.09a1.5 1.5 0 0 0-1.5-1.5h-8.659a1.5 1.5 0 0 1-1.5-1.5V63.068a1.5 1.5 0 0 1 1.5-1.5h8.66a1.5 1.5 0 0 0 1.5-1.5V37.691a1.5 1.5 0 0 1 1.5-1.5h13.872a1.5 1.5 0 0 1 1.5 1.5v22.377a1.5 1.5 0 0 0 1.5 1.5h10.031a1.5 1.5 0 0 1 1.5 1.5v11.13a1.5 1.5 0 0 1-1.5 1.5h-10.03zm63.521 30.453c3.155-3.292 4.732-7.59 4.732-12.895 0-5.302-1.577-9.602-4.732-12.894-3.155-3.292-7.294-4.938-12.415-4.938-5.122 0-9.258 1.646-12.414 4.938-3.154 3.292-4.732 7.592-4.732 12.894 0 5.305 1.578 9.603 4.732 12.895 3.156 3.292 7.292 4.938 12.414 4.938 5.121 0 9.26-1.646 12.415-4.938m-32.03 16.872c-4.664-2.651-8.346-6.516-11.042-11.591-2.699-5.075-4.047-11.133-4.047-18.176 0-7.04 1.348-13.1 4.047-18.175 2.696-5.075 6.378-8.937 11.042-11.591 4.664-2.652 9.784-3.978 15.363-3.978 4.938 0 9.167.96 12.69 2.88 3.518 1.92 6.33 4.619 8.435 8.094h.274v-7.417a1.5 1.5 0 0 1 1.5-1.5h13.735a1.5 1.5 0 0 1 1.5 1.5v60.374a1.5 1.5 0 0 1-1.5 1.5H487.35a1.5 1.5 0 0 1-1.5-1.5v-7.416h-.274c-2.105 3.477-4.917 6.173-8.436 8.093-3.522 1.92-7.75 2.88-12.689 2.88-5.579 0-10.699-1.326-15.363-3.977m110.62-16.872c3.155-3.292 4.732-7.59 4.732-12.895 0-5.302-1.577-9.602-4.732-12.894-3.154-3.292-7.293-4.938-12.414-4.938-5.122 0-9.259 1.646-12.414 4.938-3.154 3.292-4.733 7.592-4.733 12.894 0 5.305 1.579 9.603 4.733 12.895 3.155 3.292 7.292 4.938 12.414 4.938 5.121 0 9.26-1.646 12.414-4.938m-20.85 17.969c-3.521-1.92-6.334-4.616-8.436-8.093h-.275v7.416a1.5 1.5 0 0 1-1.5 1.5h-13.872a1.5 1.5 0 0 1-1.5-1.5V30.42a1.5 1.5 0 0 1 1.5-1.5h13.872a1.5 1.5 0 0 1 1.5 1.5v40.064h.275c2.102-3.475 4.915-6.173 8.436-8.093 3.52-1.921 7.75-2.881 12.689-2.881 5.577 0 10.699 1.326 15.363 3.978 4.664 2.654 8.344 6.516 11.042 11.59C580.649 80.156 582 86.216 582 93.256c0 7.043-1.351 13.1-4.047 18.176-2.698 5.075-6.378 8.94-11.042 11.59-4.664 2.652-9.786 3.979-15.363 3.979-4.939 0-9.169-.96-12.689-2.881m66.513.823H591.5a1.5 1.5 0 0 1-1.5-1.5v-93.02a1.5 1.5 0 0 1 1.5-1.5h13.872a1.5 1.5 0 0 1 1.5 1.5v93.02a1.5 1.5 0 0 1-1.5 1.5m32.722-48.696c-2.3 1.794-3.853 4.384-4.657 7.772-.221.934.508 1.83 1.468 1.83h26.4c.916 0 1.636-.82 1.488-1.724-.528-3.205-1.902-5.76-4.123-7.672-2.606-2.24-6.014-3.36-10.22-3.36-4.207 0-7.66 1.051-10.356 3.154m33.813-7.888c5.395 5.9 8.093 14.245 8.093 25.034v1.792a1.5 1.5 0 0 1-1.5 1.5h-44.104a1.51 1.51 0 0 0-1.485 1.766c.705 4.008 2.478 7.192 5.32 9.551 3.245 2.7 7.339 4.047 12.277 4.047 6.375 0 12.276-2.488 17.702-7.465.663-.608 1.714-.479 2.228.26l6.744 9.68a1.5 1.5 0 0 1-.23 1.982 49.67 49.67 0 0 1-10.944 7.271c-4.39 2.148-9.557 3.224-15.5 3.224-6.858 0-12.85-1.396-17.97-4.184-5.123-2.788-9.1-6.72-11.933-11.797-2.836-5.075-4.253-10.95-4.253-17.627 0-6.674 1.372-12.572 4.115-17.695 2.743-5.12 6.584-9.098 11.523-11.934 4.938-2.833 10.699-4.252 17.284-4.252 9.69 0 17.236 2.95 22.633 8.847m-341.02-29.11c0 5.658-4.587 10.245-10.246 10.245-5.66 0-10.247-4.587-10.247-10.246 0-5.659 4.588-10.246 10.247-10.246s10.246 4.587 10.246 10.246"
      />
      <path
        fill={isColored(1)}
        d="M79 1.867L13.04 29.16c-3.668 1.518-3.63 6.729.061 8.192l66.235 26.266a24.575 24.575 0 0 0 18.12 0l66.236-26.267c3.69-1.462 3.73-6.672.06-8.19L97.794 1.866a24.578 24.578 0 0 0-18.795 0"
      />
      <path
        fill={isColored(2)}
        d="M94.273 77.96v65.617c0 3.12 3.147 5.258 6.048 4.108l73.806-28.648a4.418 4.418 0 0 0 2.79-4.108V49.313c0-3.121-3.147-5.258-6.048-4.108L97.063 73.853a4.42 4.42 0 0 0-2.79 4.108"
      />
      <path
        fill={isColored(3)}
        d="M77.038 81.346L55.134 91.922l-2.224 1.075-46.238 22.155C3.742 116.566 0 114.43 0 111.174V49.588c0-1.178.604-2.195 1.414-2.96a5.024 5.024 0 0 1 1.12-.84c1.104-.663 2.68-.84 4.02-.31L76.67 73.26c3.564 1.414 3.844 6.408.368 8.087"
      />
      <path
        fill="rgba(0, 0, 0, 0.25)"
        d="M77.038 81.346L55.134 91.922 1.414 46.627a5.024 5.024 0 0 1 1.12-.839c1.104-.663 2.68-.84 4.02-.31L76.67 73.26c3.564 1.414 3.844 6.408.368 8.087"
      />
    </svg>
  );
};

AirtableIcon.propTypes = {
  style: PropTypes.object,
  size: PropTypes.string,
  disabled: PropTypes.bool,
};

export default AirtableIcon;

'''
'''--- frontend/src/svg/illustrations/Ellipses.js ---
import React from 'react';
import PropTypes from 'prop-types';
import { useTheme } from '@mui/material/styles';

const Ellipses = ({ style }) => {
  const theme = useTheme();
  const stroke = theme.palette.text.secondary;

  return (
    <svg
      width="100%"
      height="100%"
      viewBox="0 0 512 512"
      xmlns="http://www.w3.org/2000/svg"
      style={style}
    >
      <path
        d="M448,256c0-106-86-192-192-192S64,150,64,256s86,192,192,192S448,362,448,256Z"
        style={{
          fill: 'none',
          stroke: stroke,
          strokeMiterLimit: 10,
          strokeWidth: '32px',
        }}
      />
      <circle style={{ fill: stroke }} cx="256" cy="256" r="26" />
      <circle style={{ fill: stroke }} cx="346" cy="256" r="26" />
      <circle
        style={{ fill: stroke}}
        cx="166"
        cy="256"
        r="26"
      />
    </svg>
  );
};

Ellipses.propTypes = {
  style: PropTypes.object,
};

export default Ellipses;

'''
'''--- frontend/src/svg/illustrations/IndigoGearIcon.js ---
import React from 'react';
import PropTypes from 'prop-types';

const IndigoGearIcon = ({ style, size }) => {
  return (
    <svg
      width={size ?? '240'}
      height={size ?? '165'}
      viewBox="0 0 240 165"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      style={style}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M142.394 82.2182C142.394 84.9314 142.146 87.5623 141.816 90.1933L159.254 103.842C160.824 105.075 161.237 107.295 160.246 109.104L143.716 137.551C142.725 139.36 140.493 140.018 138.675 139.36L118.096 131.056C113.798 134.344 109.336 137.058 104.129 139.195L101.071 160.983C100.74 162.956 99.0048 164.436 96.9386 164.436H63.8801C61.8139 164.436 60.0783 162.956 59.7478 160.983L56.6898 139.195C51.4831 137.14 47.0202 134.344 42.7226 131.056L22.1437 139.36C20.3255 140.018 18.094 139.36 17.1023 137.551L0.573 109.104C-0.501402 107.295 -0.00552329 105.075 1.56476 103.842L19.0031 90.1933C18.6725 87.5623 18.4246 84.9314 18.4246 82.2182C18.4246 79.505 18.6725 76.7918 19.0031 73.9963L1.56476 60.5948C-0.00552329 59.3615 -0.501402 57.1416 0.573 55.3328L17.1023 26.8853C18.094 25.0765 20.3255 24.3366 22.1437 25.0765L42.7226 33.2984C47.0202 30.0918 51.4831 27.2964 56.6898 25.241L59.7478 3.45316C60.0783 1.47993 61.8139 0 63.8801 0H96.9386C99.0048 0 100.74 1.47993 101.071 3.45316L104.129 25.241C109.336 27.2964 113.798 30.0918 118.096 33.2984L138.675 25.0765C140.493 24.3366 142.725 25.0765 143.716 26.8853L160.246 55.3328C161.237 57.1416 160.824 59.3615 159.254 60.5948L141.816 73.9963C142.146 76.7918 142.394 79.505 142.394 82.2182Z"
        fill="#C4C4C4"
      />
      <path
        d="M196.748 89.5357C193.401 88.4111 190.637 86.0073 189.063 82.8533C187.489 79.6992 187.235 76.0532 188.355 72.7173C189.476 69.3814 191.881 66.6289 195.04 65.0654C198.199 63.5018 201.854 63.2552 205.201 64.3798C208.548 65.5045 211.313 67.9082 212.886 71.0623C214.46 74.2164 214.715 77.8624 213.594 81.1982C212.473 84.5341 210.068 87.2866 206.909 88.8502C203.75 90.4138 200.095 90.6604 196.748 89.5357ZM226.592 89.4456C227.123 88.3441 227.617 87.2304 228.016 86.0445C228.414 84.8586 228.705 83.6363 228.971 82.366L238.547 79.0646C239.413 78.7558 239.92 77.8461 239.753 76.9101L236.72 62.0527C236.553 61.1167 235.688 60.4662 234.786 60.5231L224.601 61.1C223.197 59.0684 221.661 57.1923 219.691 55.5306L221.557 45.559C221.703 44.6481 221.163 43.7468 220.262 43.4439L205.84 38.5977C204.938 38.2948 203.964 38.6872 203.53 39.5012L198.996 48.5763C196.422 48.7114 194.065 49.279 191.719 50.0505L183.949 43.4401C183.264 42.8501 182.182 42.8464 181.484 43.4916L170.095 53.5027C169.36 54.1358 169.25 55.1788 169.754 55.948L175.393 64.3622C174.839 65.5356 174.332 66.6851 173.934 67.8711C173.535 69.057 173.257 70.2433 173.015 71.4418L163.402 74.8509C162.536 75.1598 161.994 76.0574 162.197 77.0055L165.229 91.8628C165.396 92.7988 166.273 93.4134 167.163 93.3925L177.361 92.7796C178.752 94.8471 180.289 96.7232 182.258 98.3849L180.392 108.357C180.247 109.267 180.786 110.169 181.688 110.472L196.11 115.318C197.011 115.621 197.986 115.228 198.42 114.414L202.954 105.339C205.539 105.168 207.885 104.637 210.243 103.829L218.001 110.476C218.697 111.03 219.767 111.069 220.466 110.424L231.855 100.413C232.553 99.7676 232.699 98.7368 232.195 97.9675L226.592 89.4456Z"
        fill="#C4C4C4"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M88.2897 123.228C107.514 119.542 122.049 102.499 122.049 82.0311C122.049 58.871 103.439 40.096 80.4829 40.096C57.5267 40.096 38.917 58.871 38.917 82.0311C38.917 101.743 52.3981 118.279 70.5662 122.765V87.2352L88.2897 69.3543V123.228ZM70.5662 49.8879H88.2897V57.3367L70.5662 75.2177V49.8879Z"
        fill="#270480"
      />
    </svg>
  );
};

IndigoGearIcon.propTypes = {
  style: PropTypes.object,
  size: PropTypes.string,
};

export default IndigoGearIcon;

'''
'''--- frontend/src/svg/illustrations/IndigoIcon.js ---
import React from 'react';
import PropTypes from 'prop-types';

const IndigoIcon = ({ style, size }) => {
  return (
    <svg
      width={size ?? '100%'}
      height={size ?? '100%'}
      viewBox="0 0 77 77"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      style={style}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M45.5451 76.0117C63.2791 72.6417 76.687 57.0584 76.687 38.3435C76.687 17.167 59.52 0 38.3435 0C17.167 0 0 17.167 0 38.3435C0 56.3674 12.436 71.4866 29.1956 75.5889V43.1015L45.5451 26.752V76.0117ZM29.1956 8.95332H45.5451V15.7637L29.1956 32.1132V8.95332Z"
        fill="#3F0FB7"
      />
    </svg>
  );
};

IndigoIcon.propTypes = {
  style: PropTypes.object,
  size: PropTypes.number,
};

export default IndigoIcon;

'''
'''--- frontend/src/svg/illustrations/IndigoLogo.js ---
import React from 'react';
import PropTypes from 'prop-types';
// import { useTheme } from '@mui/material/styles';

const IndigoLogo = ({ style }) => {
  // const theme = useTheme();

  return (
    <svg
      width="100%"
      viewBox="0 0 175 99"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      style={style}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M12.7804 12.0426H0.806396V29.0045L12.7804 17.0305V12.0426ZM12.7804 25.078L0.806396 37.0521V61.6493H12.7804V25.078Z"
        fill="white"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M108.002 12.0426H96.0283V29.0044L108.002 17.0304V12.0426ZM108.002 25.078L96.0283 37.052V61.6493H108.002V25.078Z"
        fill="white"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M77.4972 12.1412V61.6493H89.4712V0.167143L77.4972 12.1412Z"
        fill="white"
      />
      <circle cx="69.0868" cy="47.252" r="14.3973" fill="white" />
      <circle cx="160.603" cy="47.252" r="14.3973" fill="white" />
      <rect
        x="129.67"
        y="47.1094"
        width="11.974"
        height="35.9221"
        fill="white"
      />
      <circle cx="127.246" cy="47.252" r="14.3973" fill="white" />
      <circle cx="127.246" cy="84.0293" r="14.3973" fill="white" />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M18.7675 37.5147V61.6493H30.7415V40.1232C31.1543 40.0308 31.5837 39.982 32.0244 39.982C35.2522 39.982 37.8688 42.5986 37.8688 45.8265C37.8688 46.0677 37.8542 46.3056 37.8258 46.5392H37.8688V61.4462C37.8688 61.4462 37.8689 61.4462 37.8689 61.4462V61.6493H49.8429V47.1094H49.8422C49.7657 39.2236 43.3494 32.8546 35.4455 32.8546C33.7983 32.8546 32.2156 33.1312 30.7415 33.6406V25.5406L18.7675 37.5147Z"
        fill="white"
      />
    </svg>
  );
};

IndigoLogo.propTypes = {
  style: PropTypes.object,
};

export default IndigoLogo;

'''
'''--- frontend/src/svg/illustrations/LayoutMain.js ---
import React from 'react';
import PropTypes from 'prop-types';

const LayoutMain = ({
  width = 94,
  height = 94,
  fillColor = 'currentColor',
}) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width={width}
      height={height}
      fill="none"
      viewBox="0 0 94 94"
    >
      <g
        fill="none"
        fillRule="evenodd"
        transform="translate(-963 -562) translate(307 541) translate(21) translate(635 21)"
      >
        <rect
          width="93"
          height="92"
          x="0.5"
          y="0.5"
          stroke={fillColor}
          rx="4"
        ></rect>
        <rect width="58" height="6" x="18" y="6" fill={fillColor} rx="1"></rect>
        <rect
          width="58"
          height="71"
          x="18"
          y="16"
          fill={fillColor}
          rx="1"
        ></rect>
      </g>
    </svg>
  );
};

LayoutMain.propTypes = {
  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  fillColor: PropTypes.string,
};

export default LayoutMain;

'''
'''--- frontend/src/svg/illustrations/Metamask.js ---
import React from 'react';
import PropTypes from 'prop-types';

const MetamaskIcon = ({ style, size }) => {
  return (
    <svg
      version="1.1"
      id="Layer_1"
      xmlns="http://www.w3.org/2000/svg"
      x="0px"
      y="0px"
      width={size ?? '100%'}
      height={size ?? '100%'}
      viewBox="0 0 318.6 318.6"
      style={style}
    >
      <style type="text/css">
        {`
					.st0{fill:#E2761B;stroke:#E2761B;stroke-linecap:round;stroke-linejoin:round;}
					.st1{fill:#E4761B;stroke:#E4761B;stroke-linecap:round;stroke-linejoin:round;}
					.st2{fill:#D7C1B3;stroke:#D7C1B3;stroke-linecap:round;stroke-linejoin:round;}
					.st3{fill:#233447;stroke:#233447;stroke-linecap:round;stroke-linejoin:round;}
					.st4{fill:#CD6116;stroke:#CD6116;stroke-linecap:round;stroke-linejoin:round;}
					.st5{fill:#E4751F;stroke:#E4751F;stroke-linecap:round;stroke-linejoin:round;}
					.st6{fill:#F6851B;stroke:#F6851B;stroke-linecap:round;stroke-linejoin:round;}
					.st7{fill:#C0AD9E;stroke:#C0AD9E;stroke-linecap:round;stroke-linejoin:round;}
					.st8{fill:#161616;stroke:#161616;stroke-linecap:round;stroke-linejoin:round;}
					.st9{fill:#763D16;stroke:#763D16;stroke-linecap:round;stroke-linejoin:round;}
				`}
      </style>
      <polygon className="st0" points="274.1,35.5 174.6,109.4 193,65.8 " />
      <g>
        <polygon className="st1" points="44.4,35.5 143.1,110.1 125.6,65.8 	" />
        <polygon
          className="st1"
          points="238.3,206.8 211.8,247.4 268.5,263 284.8,207.7 	"
        />
        <polygon
          className="st1"
          points="33.9,207.7 50.1,263 106.8,247.4 80.3,206.8 	"
        />
        <polygon
          className="st1"
          points="103.6,138.2 87.8,162.1 144.1,164.6 142.1,104.1 	"
        />
        <polygon
          className="st1"
          points="214.9,138.2 175.9,103.4 174.6,164.6 230.8,162.1 	"
        />
        <polygon
          className="st1"
          points="106.8,247.4 140.6,230.9 111.4,208.1 	"
        />
        <polygon
          className="st1"
          points="177.9,230.9 211.8,247.4 207.1,208.1 	"
        />
      </g>
      <g>
        <polygon
          className="st2"
          points="211.8,247.4 177.9,230.9 180.6,253 180.3,262.3 	"
        />
        <polygon
          className="st2"
          points="106.8,247.4 138.3,262.3 138.1,253 140.6,230.9 	"
        />
      </g>
      <polygon className="st3" points="138.8,193.5 110.6,185.2 130.5,176.1 " />
      <polygon className="st3" points="179.7,193.5 188,176.1 208,185.2 " />
      <g>
        <polygon className="st4" points="106.8,247.4 111.6,206.8 80.3,207.7 	" />
        <polygon className="st4" points="207,206.8 211.8,247.4 238.3,207.7 	" />
        <polygon
          className="st4"
          points="230.8,162.1 174.6,164.6 179.8,193.5 188.1,176.1 208.1,185.2 	"
        />
        <polygon
          className="st4"
          points="110.6,185.2 130.6,176.1 138.8,193.5 144.1,164.6 87.8,162.1 	"
        />
      </g>
      <g>
        <polygon className="st5" points="87.8,162.1 111.4,208.1 110.6,185.2 	" />
        <polygon
          className="st5"
          points="208.1,185.2 207.1,208.1 230.8,162.1 	"
        />
        <polygon
          className="st5"
          points="144.1,164.6 138.8,193.5 145.4,227.6 146.9,182.7 	"
        />
        <polygon
          className="st5"
          points="174.6,164.6 171.9,182.6 173.1,227.6 179.8,193.5 	"
        />
      </g>
      <polygon
        className="st6"
        points="179.8,193.5 173.1,227.6 177.9,230.9 207.1,208.1 208.1,185.2 "
      />
      <polygon
        className="st6"
        points="110.6,185.2 111.4,208.1 140.6,230.9 145.4,227.6 138.8,193.5 "
      />
      <polygon
        className="st7"
        points="180.3,262.3 180.6,253 178.1,250.8 140.4,250.8 138.1,253 138.3,262.3 106.8,247.4 117.8,256.4 
140.1,271.9 178.4,271.9 200.8,256.4 211.8,247.4 "
      />
      <polygon
        className="st8"
        points="177.9,230.9 173.1,227.6 145.4,227.6 140.6,230.9 138.1,253 140.4,250.8 178.1,250.8 180.6,253 "
      />
      <g>
        <polygon
          className="st9"
          points="278.3,114.2 286.8,73.4 274.1,35.5 177.9,106.9 214.9,138.2 267.2,153.5 278.8,140 273.8,136.4 
281.8,129.1 275.6,124.3 283.6,118.2 	"
        />
        <polygon
          className="st9"
          points="31.8,73.4 40.3,114.2 34.9,118.2 42.9,124.3 36.8,129.1 44.8,136.4 39.8,140 51.3,153.5 103.6,138.2 
140.6,106.9 44.4,35.5 	"
        />
      </g>
      <polygon
        className="st6"
        points="267.2,153.5 214.9,138.2 230.8,162.1 207.1,208.1 238.3,207.7 284.8,207.7 "
      />
      <polygon
        className="st6"
        points="103.6,138.2 51.3,153.5 33.9,207.7 80.3,207.7 111.4,208.1 87.8,162.1 "
      />
      <polygon
        className="st6"
        points="174.6,164.6 177.9,106.9 193.1,65.8 125.6,65.8 140.6,106.9 144.1,164.6 145.3,182.8 145.4,227.6 
173.1,227.6 173.3,182.8 "
      />
    </svg>
  );
};

MetamaskIcon.propTypes = {
  style: PropTypes.object,
  size: PropTypes.string,
};

export default MetamaskIcon;

'''
'''--- frontend/src/svg/illustrations/MetamaskLogoText.js ---
import React from 'react';
import PropTypes from 'prop-types';

const MetamaskLogoText = ({ style, size }) => {
  return (
    <svg
      version="1.1"
      id="Layer_1"
      xmlns="http://www.w3.org/2000/svg"
      x="0px"
      y="0px"
      viewBox="0 0 1549.4 480"
      width={size ?? '100%'}
      style={style}
    >
      <style type="text/css">{`
        .st0{fill:#161616;}
        .st1{fill:#E17726;stroke:#E17726;stroke-linecap:round;stroke-linejoin:round;}
        .st2{fill:#E27625;stroke:#E27625;stroke-linecap:round;stroke-linejoin:round;}
        .st3{fill:#D5BFB2;stroke:#D5BFB2;stroke-linecap:round;stroke-linejoin:round;}
        .st4{fill:#233447;stroke:#233447;stroke-linecap:round;stroke-linejoin:round;}
        .st5{fill:#CC6228;stroke:#CC6228;stroke-linecap:round;stroke-linejoin:round;}
        .st6{fill:#E27525;stroke:#E27525;stroke-linecap:round;stroke-linejoin:round;}
        .st7{fill:#F5841F;stroke:#F5841F;stroke-linecap:round;stroke-linejoin:round;}
        .st8{fill:#C0AC9D;stroke:#C0AC9D;stroke-linecap:round;stroke-linejoin:round;}
        .st9{fill:#161616;stroke:#161616;stroke-linecap:round;stroke-linejoin:round;}
        .st10{fill:#763E1A;stroke:#763E1A;stroke-linecap:round;stroke-linejoin:round;}
      `}</style>
      <g>
        <path
          className="st0"
          d="M1276.6,240.7c-6.8-4.5-14.3-7.7-21.4-11.7c-4.6-2.6-9.5-4.9-13.5-8.2c-6.8-5.6-5.4-16.6,1.7-21.4
		c10.2-6.8,27.1-3,28.9,10.9c0,0.3,0.3,0.5,0.6,0.5h15.4c0.4,0,0.7-0.3,0.6-0.7c-0.8-9.6-4.5-17.6-11.3-22.7
		c-6.5-4.9-13.9-7.5-21.8-7.5c-40.7,0-44.4,43.1-22.5,56.7c2.5,1.6,24,12.4,31.6,17.1c7.6,4.7,10,13.3,6.7,20.1
		c-3,6.2-10.8,10.5-18.6,10c-8.5-0.5-15.1-5.1-17.4-12.3c-0.4-1.3-0.6-3.8-0.6-4.9c0-0.3-0.3-0.6-0.6-0.6h-16.7
		c-0.3,0-0.6,0.3-0.6,0.6c0,12.1,3,18.8,11.2,24.9c7.7,5.8,16.1,8.2,24.8,8.2c22.8,0,34.6-12.9,37-26.3
		C1292.2,260.3,1288.3,248.5,1276.6,240.7z"
        />
        <path
          className="st0"
          d="M551.5,182.1h-7.4h-8.1c-0.3,0-0.5,0.2-0.6,0.4l-13.7,45.2c-0.2,0.6-1,0.6-1.2,0l-13.7-45.2
		c-0.1-0.3-0.3-0.4-0.6-0.4h-8.1h-7.4h-10c-0.3,0-0.6,0.3-0.6,0.6v115.4c0,0.3,0.3,0.6,0.6,0.6h16.7c0.3,0,0.6-0.3,0.6-0.6v-87.7
		c0-0.7,1-0.8,1.2-0.2l13.8,45.5l1,3.2c0.1,0.3,0.3,0.4,0.6,0.4h12.8c0.3,0,0.5-0.2,0.6-0.4l1-3.2l13.8-45.5
		c0.2-0.7,1.2-0.5,1.2,0.2v87.7c0,0.3,0.3,0.6,0.6,0.6h16.7c0.3,0,0.6-0.3,0.6-0.6V182.7c0-0.3-0.3-0.6-0.6-0.6H551.5z"
        />
        <path
          className="st0"
          d="M1020.9,182.1c-0.3,0-0.5,0.2-0.6,0.4l-13.7,45.2c-0.2,0.6-1,0.6-1.2,0l-13.7-45.2c-0.1-0.3-0.3-0.4-0.6-0.4
		h-25.4c-0.3,0-0.6,0.3-0.6,0.6v115.4c0,0.3,0.3,0.6,0.6,0.6h16.7c0.3,0,0.6-0.3,0.6-0.6v-87.7c0-0.7,1-0.8,1.2-0.2l13.8,45.5l1,3.2
		c0.1,0.3,0.3,0.4,0.6,0.4h12.8c0.3,0,0.5-0.2,0.6-0.4l1-3.2l13.8-45.5c0.2-0.7,1.2-0.5,1.2,0.2v87.7c0,0.3,0.3,0.6,0.6,0.6h16.7
		c0.3,0,0.6-0.3,0.6-0.6V182.7c0-0.3-0.3-0.6-0.6-0.6H1020.9z"
        />
        <path
          className="st0"
          d="M805.5,182.1h-31.1h-16.7h-31.1c-0.3,0-0.6,0.3-0.6,0.6v14.4c0,0.3,0.3,0.6,0.6,0.6h30.5v100.4
		c0,0.3,0.3,0.6,0.6,0.6h16.7c0.3,0,0.6-0.3,0.6-0.6V197.7h30.5c0.3,0,0.6-0.3,0.6-0.6v-14.4C806.1,182.4,805.9,182.1,805.5,182.1z"
        />
        <path
          className="st0"
          d="M904,298.7h15.2c0.4,0,0.7-0.4,0.6-0.8l-31.4-115.8c-0.1-0.3-0.3-0.4-0.6-0.4H882h-10.2H866
		c-0.3,0-0.5,0.2-0.6,0.4l-31.4,115.8c-0.1,0.4,0.2,0.8,0.6,0.8h15.2c0.3,0,0.5-0.2,0.6-0.4l9.1-33.7c0.1-0.3,0.3-0.4,0.6-0.4h33.6
		c0.3,0,0.5,0.2,0.6,0.4l9.1,33.7C903.5,298.5,903.8,298.7,904,298.7z M864.1,247.7l12.2-45.1c0.2-0.6,1-0.6,1.2,0l12.2,45.1
		c0.1,0.4-0.2,0.8-0.6,0.8h-24.4C864.3,248.5,864,248.1,864.1,247.7z"
        />
        <path
          className="st0"
          d="M1163.2,298.7h15.2c0.4,0,0.7-0.4,0.6-0.8l-31.4-115.8c-0.1-0.3-0.3-0.4-0.6-0.4h-5.8H1131h-5.8
		c-0.3,0-0.5,0.2-0.6,0.4l-31.4,115.8c-0.1,0.4,0.2,0.8,0.6,0.8h15.2c0.3,0,0.5-0.2,0.6-0.4l9.1-33.7c0.1-0.3,0.3-0.4,0.6-0.4h33.6
		c0.3,0,0.5,0.2,0.6,0.4l9.1,33.7C1162.7,298.5,1162.9,298.7,1163.2,298.7z M1123.3,247.7l12.2-45.1c0.2-0.6,1-0.6,1.2,0l12.2,45.1
		c0.1,0.4-0.2,0.8-0.6,0.8h-24.4C1123.5,248.5,1123.2,248.1,1123.3,247.7z"
        />
        <path
          className="st0"
          d="M629.7,281.6v-35.8c0-0.3,0.3-0.6,0.6-0.6h44.5c0.3,0,0.6-0.3,0.6-0.6v-14.4c0-0.3-0.3-0.6-0.6-0.6h-44.5
		c-0.3,0-0.6-0.3-0.6-0.6v-30.6c0-0.3,0.3-0.6,0.6-0.6h50.6c0.3,0,0.6-0.3,0.6-0.6v-14.4c0-0.3-0.3-0.6-0.6-0.6h-51.2h-17.3
		c-0.3,0-0.6,0.3-0.6,0.6v15v31.9v15.6v37v15.8c0,0.3,0.3,0.6,0.6,0.6h17.3H683c0.3,0,0.6-0.3,0.6-0.6v-15.2c0-0.3-0.3-0.6-0.6-0.6
		h-52.8C629.9,282.2,629.7,282,629.7,281.6z"
        />
        <path
          className="st0"
          d="M1429.2,297.7l-57.8-59.7c-0.2-0.2-0.2-0.6,0-0.8l52-54c0.4-0.4,0.1-1-0.4-1h-21.3c-0.2,0-0.3,0.1-0.4,0.2
		l-44.1,45.8c-0.4,0.4-1,0.1-1-0.4v-45c0-0.3-0.3-0.6-0.6-0.6h-16.7c-0.3,0-0.6,0.3-0.6,0.6v115.4c0,0.3,0.3,0.6,0.6,0.6h16.7
		c0.3,0,0.6-0.3,0.6-0.6v-50.8c0-0.5,0.7-0.8,1-0.4l50,51.6c0.1,0.1,0.3,0.2,0.4,0.2h21.3C1429.3,298.7,1429.6,298,1429.2,297.7z"
        />
      </g>
      <g>
        <polygon className="st1" points="366,120 264.9,195 283.7,150.8 	" />
        <g>
          <polygon className="st2" points="132.8,120 233,195.7 215.1,150.8 		" />
          <polygon
            className="st2"
            points="329.6,293.9 302.7,335.1 360.3,351 376.8,294.8 		"
          />
          <polygon
            className="st2"
            points="122.1,294.8 138.5,351 196,335.1 169.2,293.9 		"
          />
          <polygon
            className="st2"
            points="192.9,224.3 176.9,248.5 233.9,251.1 232,189.6 		"
          />
          <polygon
            className="st2"
            points="305.9,224.3 266.2,188.9 264.9,251.1 321.9,248.5 		"
          />
          <polygon className="st2" points="196,335.1 230.5,318.4 200.8,295.2 		" />
          <polygon className="st2" points="268.3,318.4 302.7,335.1 298,295.2 		" />
        </g>
        <g>
          <polygon
            className="st3"
            points="302.7,335.1 268.3,318.4 271.1,340.8 270.8,350.3 		"
          />
          <polygon
            className="st3"
            points="196,335.1 228,350.3 227.8,340.8 230.5,318.4 		"
          />
        </g>
        <polygon className="st4" points="228.6,280.4 200,272 220.2,262.7 	" />
        <polygon className="st4" points="270.2,280.4 278.6,262.7 298.9,272 	" />
        <g>
          <polygon className="st5" points="196,335.1 201,293.9 169.2,294.8 		" />
          <polygon className="st5" points="297.8,293.9 302.7,335.1 329.6,294.8 		" />
          <polygon
            className="st5"
            points="321.9,248.5 264.9,251.1 270.2,280.4 278.6,262.7 298.9,272 		"
          />
          <polygon
            className="st5"
            points="200,272 220.2,262.7 228.6,280.4 233.9,251.1 176.9,248.5 		"
          />
        </g>
        <g>
          <polygon className="st6" points="176.9,248.5 200.8,295.2 200,272 		" />
          <polygon className="st6" points="298.9,272 298,295.2 321.9,248.5 		" />
          <polygon
            className="st6"
            points="233.9,251.1 228.6,280.4 235.3,315 236.8,269.4 		"
          />
          <polygon
            className="st6"
            points="264.9,251.1 262.1,269.3 263.5,315 270.2,280.4 		"
          />
        </g>
        <polygon
          className="st7"
          points="270.2,280.4 263.5,315 268.3,318.4 298,295.2 298.9,272 	"
        />
        <polygon
          className="st7"
          points="200,272 200.8,295.2 230.5,318.4 235.3,315 228.6,280.4 	"
        />
        <polygon
          className="st8"
          points="270.8,350.3 271.1,340.8 268.5,338.6 230.3,338.6 227.8,340.8 228,350.3 196,335.1 207.2,344.3 
		229.9,360 268.8,360 291.6,344.3 302.7,335.1 	"
        />
        <polygon
          className="st9"
          points="268.3,318.4 263.5,315 235.3,315 230.5,318.4 227.8,340.8 230.3,338.6 268.5,338.6 271.1,340.8 	"
        />
        <g>
          <polygon
            className="st10"
            points="370.3,199.9 378.8,158.5 366,120 268.3,192.5 305.9,224.3 359,239.8 370.7,226.1 365.6,222.4 
			373.7,215 367.5,210.2 375.6,204 		"
          />
          <polygon
            className="st10"
            points="120,158.5 128.6,199.9 123.1,204 131.3,210.2 125.1,215 133.2,222.4 128.1,226.1 139.8,239.8 
			192.9,224.3 230.5,192.5 132.8,120 		"
          />
        </g>
        <polygon
          className="st7"
          points="359,239.8 305.9,224.3 321.9,248.5 298,295.2 329.6,294.8 376.8,294.8 	"
        />
        <polygon
          className="st7"
          points="192.9,224.3 139.8,239.8 122.1,294.8 169.2,294.8 200.8,295.2 176.9,248.5 	"
        />
        <polygon
          className="st7"
          points="264.9,251.1 268.3,192.5 283.7,150.8 215.1,150.8 230.5,192.5 233.9,251.1 235.2,269.5 235.3,315 
		263.5,315 263.6,269.5 	"
        />
      </g>
    </svg>
  );
};

MetamaskLogoText.propTypes = {
  style: PropTypes.object,
  size: PropTypes.string,
};

export default MetamaskLogoText;

'''
'''--- frontend/src/svg/illustrations/PhoneSkeleton.js ---
import React from 'react';
import { useTheme } from '@mui/material/styles';

const PhoneSkeleton = () => {
  const theme = useTheme();

  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      x={0}
      y={0}
      enableBackground="new 0 0 444 908"
      viewBox="0 0 444 908"
    >
      <path
        fill={theme.palette.background.paper}
        stroke={theme.palette.alternate.dark}
        strokeMiterlimit="10"
        d="M378.8.5H65.6C29.6.5.5 29.6.5 65.6V843c0 35.9 29.1 65.1 65.1 65.1h313.2c35.9 0 65.1-29.1 65.1-65.1V65.6c0-36-29.2-65.1-65.1-65.1zm46.5 838.8c0 28-21.8 50.7-48.8 50.7H67.9c-26.9 0-48.8-22.7-48.8-50.7V74.1c0-28 21.8-50.7 48.8-50.7h35.3c4 0 7.2 3.4 7.2 7.5 0 14.9 11.6 27 26 27h171.5c14.4.1 26-12 26-27 0-4.1 3.2-7.5 7.2-7.5h35.4c26.9 0 48.8 22.7 48.8 50.7v765.2z"
      ></path>
      <path
        fill="none"
        stroke={theme.palette.alternate.dark}
        strokeMiterlimit="10"
        strokeWidth="4"
        d="M243.3 37.3h-46.4c-2 0-3.6-1.6-3.6-3.6h0c0-2 1.6-3.6 3.6-3.6h46.4c2 0 3.6 1.6 3.6 3.6h0c0 2-1.6 3.6-3.6 3.6z"
      ></path>
      <circle
        cx="270"
        cy="33.7"
        r="5.5"
        fill="none"
        stroke={theme.palette.alternate.dark}
        strokeMiterlimit="10"
        strokeWidth="4"
      ></circle>
      <path
        fill={theme.palette.alternate.dark}
        d="M285.7 880.3h-127c-1.4 0-2.6-1.2-2.6-2.6 0-1.4 1.2-2.6 2.6-2.6h127c1.4 0 2.6 1.2 2.6 2.6 0 1.5-1.2 2.6-2.6 2.6z"
      ></path>
    </svg>
  );
};

export default PhoneSkeleton;

'''
'''--- frontend/src/theme/index.js ---
import { responsiveFontSizes } from '@mui/material';
import { createTheme } from '@mui/material/styles';
import shadows from './shadows';
import { light, dark } from './palette';

const getTheme = (mode, themeToggler) =>
  responsiveFontSizes(
    createTheme({
      palette: mode === 'light' ? light : dark,
      shadows: shadows(mode),
      typography: {
        fontFamily: '"Inter", sans-serif',
        button: {
          textTransform: 'none',
          fontWeight: 'medium',
        },
      },
      zIndex: {
        appBar: 1200,
        drawer: 1300,
      },
      components: {
        MuiButton: {
          styleOverrides: {
            root: {
              fontWeight: 400,
              borderRadius: 5,
              paddingTop: 10,
              paddingBottom: 10,
            },
            containedSecondary: mode === 'light' ? { color: 'white' } : {},
          },
        },
        MuiInputBase: {
          styleOverrides: {
            root: {
              borderRadius: 5,
            },
          },
        },
        MuiOutlinedInput: {
          styleOverrides: {
            root: {
              borderRadius: 5,
            },
            input: {
              borderRadius: 5,
            },
          },
        },
        MuiCard: {
          styleOverrides: {
            root: {
              borderRadius: 8,
            },
          },
        },
      },
      themeToggler,
    }),
  );

export default getTheme;

'''
'''--- frontend/src/theme/palette.js ---
export const light = {
  alternate: {
    main: '#f7faff',
    dark: '#edf1f7',
  },
  cardShadow: 'rgba(23, 70, 161, .11)',
  mode: 'light',
  primary: {
    main: '#377dff',
    light: '#467de3',
    dark: '#2f6ad9',
    contrastText: '#fff',
  },
  secondary: {
    light: '#ffb74d',
    main: '#f9b934',
    dark: '#FF9800',
    contrastText: 'rgba(0, 0, 0, 0.87)',
  },
  text: {
    primary: '#1e2022',
    secondary: '#677788',
  },
  divider: 'rgba(0, 0, 0, 0.12)',
  background: {
    paper: '#ffffff',
    default: '#ffffff',
    level2: '#f5f5f5',
    level1: '#ffffff',
    gradient: 'green',
  },
};

export const dark = {
  alternate: {
    main: '#1a2138',
    dark: '#151a30',
  },
  cardShadow: 'rgba(0, 0, 0, .11)',
  common: {
    black: '#000',
    white: '#fff',
  },
  mode: 'dark',
  primary: {
    main: '#9370DB',
    light: '#4900FF',
    dark: '#1E0067',
    contrastText: '#fff',
  },
  secondary: {
    main: '#F433AB',
    light: '#FF85C6',
    dark: '#cc006d',
    contrastText: 'rgba(0, 0, 0, 0.87)',
  },
  warning: {
    light: '#ffb74d',
    main: '#FFA500',
    dark: '#f57c00',
    contrastText: 'rgba(0, 0, 0, 0.8)',
  },
  text: {
    primary: '#EEEEEF',
    secondary: '#AEB0B4',
  },
  divider: 'rgba(255, 255, 255, 0.12)',
  background: {
    paper: '#270480',
    default: '#270480',
    level2: '#3C06C6',
    level1: '#7E4EF9',
  },
};

'''
'''--- frontend/src/theme/shadows.js ---
import { alpha } from '@mui/material/styles';
const shadows = (themeMode = 'light') => {
  const rgb = themeMode === 'light' ? '#8c98a4' : '#FFF';

  return [
    'none',
    `0 3px 6px 0 ${alpha(rgb, 0.25)}`,
    `0 12px 15px ${alpha(rgb, 0.1)}`,
    `0 6px 24px 0 ${alpha(rgb, 0.125)}`,
    `0 10px 40px 10px ${alpha(rgb, 0.175)}`,
    `0 10px 40px 10px ${alpha(rgb, 0.175)}`,
    `0 10px 40px 10px ${alpha(rgb, 0.175)}`,
    `0 10px 40px 10px ${alpha(rgb, 0.175)}`,
    `0 10px 40px 10px ${alpha(rgb, 0.175)}`,
    `0 10px 40px 10px ${alpha(rgb, 0.175)}`,
    `0 10px 40px 10px ${alpha(rgb, 0.175)}`,
    `0 10px 40px 10px ${alpha(rgb, 0.175)}`,
    `0 10px 40px 10px ${alpha(rgb, 0.175)}`,
    `0 10px 40px 10px ${alpha(rgb, 0.175)}`,
    `0 10px 40px 10px ${alpha(rgb, 0.175)}`,
    `0 10px 40px 10px ${alpha(rgb, 0.175)}`,
    `0 10px 40px 10px ${alpha(rgb, 0.175)}`,
    `0 10px 40px 10px ${alpha(rgb, 0.175)}`,
    `0 10px 40px 10px ${alpha(rgb, 0.175)}`,
    `0 10px 40px 10px ${alpha(rgb, 0.175)}`,
    `0 10px 40px 10px ${alpha(rgb, 0.175)}`,
    `0 10px 40px 10px ${alpha(rgb, 0.175)}`,
    `0 10px 40px 10px ${alpha(rgb, 0.175)}`,
    `0 10px 40px 10px ${alpha(rgb, 0.175)}`,
    `0 10px 40px 10px ${alpha(rgb, 0.175)}`,
  ];
};

export default shadows;

'''
'''--- frontend/src/utils/constants.js ---
// AURORA
export const CHAIN_ID = 1313161555;
export const CHAIN_ID_0x = '0x4e454153';
// ROPSTEN
// export const CHAIN_ID = 3;
// export const CHAIN_ID_0x = '1';

export const blockExplorerUrl = 'https://testnet.aurorascan.dev';
export const developerDocUrl =
  'https://github.com/ahessert/indigo_developer_template';
export const githubUrl = 'https://github.com/ahessert/indigo';

export function getTransactionUrl(txHash) {
  return `${blockExplorerUrl}/tx/${txHash}`;
}

'''
'''--- hardhat.config.js ---
require("@nomiclabs/hardhat-waffle");
require('dotenv').config();
require("./scripts/tasks/balance");

// You need to export an object to set up your config
// Go to https://hardhat.org/config/ to learn more

const AURORA_PRIVATE_KEY = process.env.AURORA_PRIVATE_KEY;
const mnemonic = process.env.MNEMONIC;

/**
 * @type import('hardhat/config').HardhatUserConfig
 */
module.exports = {
  defaultNetwork: "hardhat",
  solidity: "0.8.4",
  networks: {
    hardhat: {},
    testnet: {
      url: 'https://testnet.aurora.dev',
      accounts: [`0x${AURORA_PRIVATE_KEY}`],
      chainId: 1313161555,
      gasPrice: 10000000
    },
    mainnet: {
      url: 'https://mainnet.aurora.dev',
      accounts: [`0x${AURORA_PRIVATE_KEY}`],
      chainId: 1313161554,
    },
    local_aurora: {
      url: 'http://localhost:8545',
      accounts: [`0x${AURORA_PRIVATE_KEY}`],
    },
    ropsten: {
      url: `https://ropsten.infura.io/v3/${process.env.INFURA_API_KEY}`,
      accounts: [`0x${AURORA_PRIVATE_KEY}`],
      chainId: 3,
    },
  },
};

'''
'''--- scripts/deploy.js ---
const hre = require('hardhat');

async function main() {
  const signer = await hre.ethers.getSigner();
  console.log();
  console.log('Deploying contracts with the account: ',await signer.getAddress());
  console.log('account balance: ', hre.ethers.utils.formatEther(await signer.getBalance()));

  // Start deployment, returning a promise that resolves to a contract object
  const contract = await hre.ethers.getContractFactory('Models');
  const gasToUse = await ethers.provider.estimateGas(contract.getDeployTransaction())
  console.log(hre.ethers.utils.formatEther(gasToUse))

  const indigo = await contract.deploy();
  await indigo.deployed();

  console.log('Contract deployed to address:', indigo.address);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });

'''
'''--- scripts/tasks/balance.js ---
task("balance", "Prints an account's balance")
  .addParam("account", "The account's address")
  .setAction(async ({account}) => {
    const balance = await hre.ethers.provider.getBalance(account)

    console.log(hre.ethers.utils.formatEther(balance), "ETH");
  });

module.exports = {};
'''