*GitHub Repository "mhassanist/wallet-selection-guestbook"*

'''--- .env ---
SASS_PATH="./src"

'''
'''--- README.md ---
# wallet-selection-guestbook

'''
'''--- as-pect.config.js ---
module.exports = require('near-sdk-as/imports')

'''
'''--- asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json",
  "entry": "assembly/main.ts",
  "options": {
    "binaryFile": "out/main.wasm"
  }
} 

'''
'''--- assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />

'''
'''--- assembly/__tests__/guestbook.spec.ts ---
import { addMessage, getMessages } from '../main';
import { PostedMessage, messages } from '../model';
import { VMContext, Context, u128 } from 'near-sdk-as';

function createMessage(text: string): PostedMessage {
  return new PostedMessage(text);
}

const message = createMessage('hello world');

describe('message tests', () => {
  afterEach(() => {
    while(messages.length > 0) {
      messages.pop();
    }
  });

  it('adds a message', () => {
    addMessage('hello world');
    expect(messages.length).toBe(
      1,
      'should only contain one message'
    );
    expect(messages[0]).toStrictEqual(
      message,
      'message should be "hello world"'
    );
  });

  it('adds a premium message', () => {
    VMContext.setAttached_deposit(u128.from('10000000000000000000000'));
    addMessage('hello world');
    const messageAR = getMessages();
    expect(messageAR[0].premium).toStrictEqual(true,
      'should be premium'
    );
  });

  it('retrieves messages', () => {
    addMessage('hello world');
    const messagesArr = getMessages();
    expect(messagesArr.length).toBe(
      1,
      'should be one message'
    );
    expect(messagesArr).toIncludeEqual(
      message,
      'messages should include:\n' + message.toJSON()
    );
  });

  it('only show the last 10 messages', () => {
    addMessage('hello world');
    const newMessages: PostedMessage[] = [];
    for(let i: i32 = 0; i < 10; i++) {
      const text = 'message #' + i.toString();
      newMessages.push(createMessage(text));
      addMessage(text);
    }
    const messages = getMessages();
    log(messages.slice(7, 10));
    expect(messages).toStrictEqual(
      newMessages,
      'should be the last ten messages'
    );
    expect(messages).not.toIncludeEqual(
      message,
      'shouldn\'t contain the first element'
    );
  });
});

describe('attached deposit tests', () => {
  beforeEach(() => {
    VMContext.setAttached_deposit(u128.fromString('0'));
    VMContext.setAccount_balance(u128.fromString('0'));
  });

  it('attaches a deposit to a contract call', () => {
    log('Initial account balance: ' + Context.accountBalance.toString());

    addMessage('hello world');
    VMContext.setAttached_deposit(u128.from('10'));

    log('Attached deposit: 10');
    log('Account balance after deposit: ' + Context.accountBalance.toString());

    expect(Context.accountBalance.toString()).toStrictEqual(
      '10',
      'balance should be 10'
    );
  });
});

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />

'''
'''--- assembly/main.ts ---
import { PostedMessage, messages } from './model';

// --- contract code goes below

// The maximum number of latest messages the contract returns.
const MESSAGE_LIMIT = 10;

/**
 * Adds a new message under the name of the sender's account id.\
 * NOTE: This is a change method. Which means it will modify the state.\
 * But right now we don't distinguish them with annotations yet.
 */
export function addMessage(text: string): void {
  // Creating a new message and populating fields with our data
  const message = new PostedMessage(text);
  // Adding the message to end of the persistent collection
  messages.push(message);
}

/**
 * Returns an array of last N messages.\
 * NOTE: This is a view method. Which means it should NOT modify the state.
 */
export function getMessages(): PostedMessage[] {
  const numMessages = min(MESSAGE_LIMIT, messages.length);
  const startIndex = messages.length - numMessages;
  const result = new Array<PostedMessage>(numMessages);
  for(let i = 0; i < numMessages; i++) {
    result[i] = messages[i + startIndex];
  }
  return result;
}

'''
'''--- assembly/model.ts ---
import { context, u128, PersistentVector } from "near-sdk-as";

/** 
 * Exporting a new class PostedMessage so it can be used outside of this file.
 */
@nearBindgen
export class PostedMessage {
  premium: boolean;
  sender: string;
  constructor(public text: string) {
    this.premium = context.attachedDeposit >= u128.from('10000000000000000000000');
    this.sender = context.sender;
  }
}
/**
 * collections.vector is a persistent collection. Any changes to it will
 * be automatically saved in the storage.
 * The parameter to the constructor needs to be unique across a single contract.
 * It will be used as a prefix to all keys required to store data in the storage.
 */
export const messages = new PersistentVector<PostedMessage>("m");

'''
'''--- assembly/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ]
}

'''
'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react']
}

'''
'''--- neardev/shared-test-staging/test.near.json ---
{"account_id":"test.near","private_key":"ed25519:2wyRcSwSuHtRVmkMCGjPwnzZmQLeXLzLLyED1NDMt4BjnKgQL6tF85yBx6Jr26D2dUNeC716RBoTxntVHsegogYw"}

'''
'''--- neardev/shared-test/test.near.json ---
{"account_id":"test.near","private_key":"ed25519:2wyRcSwSuHtRVmkMCGjPwnzZmQLeXLzLLyED1NDMt4BjnKgQL6tF85yBx6Jr26D2dUNeC716RBoTxntVHsegogYw"}

'''
'''--- package.json ---
{
  "name": "wallet-selector-messages",
  "version": "0.1.0",
  "homepage": "https://mhassanist.github.io/wallet-selection-guestbook",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "web": "nodemon --watch assembly -e ts --exec parcel src/index.html --open",
    "build": "yarn build:contract && yarn build:web",
    "build:contract": "asb",
    "build:contract:debug": "asb --target debug",
    "build:web": "parcel build src/index.html --public-url ./",
    "deploy": "yarn build && near deploy",
    "dev": "yarn build:contract:debug && near dev-deploy && nodemon --watch assembly -e ts --exec yarn dev:start",
    "lint": "eslint \"./**/*.js\" \"./**/*.jsx\"",
    "start": "yarn deploy && parcel src/index.html",
    "dev:start": "env-cmd -f ./neardev/dev-account.env parcel src/index.html",
    "test": "yarn build:contract:debug && asp && jest",
    "predeploy": "npm run build",
    "deploypg": "gh-pages -d dist"
  },
  "devDependencies": {
    "@babel/core": "^7.14.0",
    "@babel/preset-env": "^7.16.4",
    "@babel/preset-react": "^7.13.13",
    "@types/react": "^18.0.6",
    "@types/react-dom": "^18.0.2",
    "@typescript-eslint/eslint-plugin": "^4.22.1",
    "@typescript-eslint/parser": "^4.33.0",
    "babel-jest": "^27.4.2",
    "eslint": "^7.32.0",
    "gh-pages": "^3.2.3",
    "jest": "^26.6.3",
    "jest-environment-node": "^26.6.2",
    "near-cli": "^3.0.0",
    "near-sdk-as": "3.2.3",
    "node-sass": "^7.0.1",
    "nodemon": "^2.0.7",
    "parcel-bundler": "^1.12.5",
    "react-test-renderer": "^17.0.2",
    "sass": "^1.44.0",
    "typescript": "^4.6.3"
  },
  "dependencies": {
    "@near-wallet-selector/core": "^3.0.2",
    "@near-wallet-selector/ledger": "^3.0.2",
    "@near-wallet-selector/math-wallet": "^3.0.2",
    "@near-wallet-selector/near-wallet": "^3.0.2",
    "@near-wallet-selector/sender": "^3.0.2",
    "@near-wallet-selector/wallet-connect": "^3.0.2",
    "big.js": "^6.1.1",
    "env-cmd": "^10.1.0",
    "near-api-js": "^0.44.2",
    "prop-types": "^15.7.2",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "regenerator-runtime": "^0.13.9"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "jest": {
    "projects": [
      {
        "displayName": "User interface tests",
        "testEnvironment": "jsdom",
        "testMatch": [
          "<rootDir>/src/tests/ui/*.js"
        ]
      },
      {
        "displayName": "Integration tests",
        "testEnvironment": "near-cli/test_environment",
        "testMatch": [
          "<rootDir>/src/tests/integration/*.js"
        ]
      }
    ],
    "testPathIgnorePatterns": [
      "assembly/*"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- src/environments/environment.prod.ts ---
export const environment = {
  production: true,
};

'''
'''--- src/environments/environment.ts ---
// This file can be replaced during build by using the `fileReplacements` array.
// When building for production, this file is replaced with `environment.prod.ts`.

export const environment = {
  production: false,
};

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <link rel="apple-touch-icon" href="./favicon.ico" />
    <title>NEAR Guest Book</title>
    <meta property="og:title" content="NEAR Guest Book" />
    <meta
      property="og:description"
      content="A guest book with comments stored on the NEAR blockchain"
    />
    <!-- <meta property="og:image" content=""> -->
    <!-- <meta property="og:url" content=""> -->
    <!-- <meta name="twitter:card" content="summary_large_image"> -->
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script src="./main.tsx"></script>
  </body>
</html>

'''
'''--- src/interfaces.ts ---
import { AccountView } from "near-api-js/lib/providers/provider";

export interface Message {
  premium: boolean;
  sender: string;
  text: string;
}

export type Account = AccountView & {
  account_id: string;
};

'''
'''--- src/polyfills.ts ---
/**
 * Polyfill stable language features. These imports will be optimized by `@babel/preset-env`.
 *
 * See: https://github.com/zloirock/core-js#babel
 */
import "core-js/stable";
import "regenerator-runtime/runtime";

'''
'''--- tsconfig.json ---
// {
//   "extends": "../../tsconfig.base.json",
//   "compilerOptions": {
//     "jsx": "react-jsx",
//     "allowJs": true,
//     "esModuleInterop": true,
//     "forceConsistentCasingInFileNames": true,
//     "strict": true,
//     "noImplicitOverride": true,
//     "noPropertyAccessFromIndexSignature": true,
//     "noImplicitReturns": true,
//     "noFallthroughCasesInSwitch": true
//   },
//   "files": [],
//   "include": [],
//   "references": [
//     {
//       "path": "./tsconfig.app.json"
//     },
//     {
//       "path": "./tsconfig.spec.json"
//     }
//   ]
// }
{
  "compilerOptions": {
    /* Specify ECMAScript target version */
    "target": "es5",
    /* Specify module code generation */
    "module": "esnext",
    /* Specify library files to be included in the compilation. */
    "lib": [
      "ESNext",
      "DOM"
    ],
    /* Specify JSX code generation */
    "jsx": "react",
    /* Generate corresponding .map files */
    "sourceMap": true,
    /* Enable all strict type-checking options */
    "strict": true,
    /* Specify module resolution strategy */
    "moduleResolution": "node",
    /* Base directory to resolve non-absolute module names */
    "baseUrl": "./src",
    /* Maps imports to locations - e.g. ~models will go to ./src/models */
    "paths": {
      "~/*": [ "./*" ]
    },
    /* List of folders to include type definitions from */
    "typeRoots": [
      "node_modules/@types"
    ],
    /* allow import React instead of import * as React */
    "allowSyntheticDefaultImports": true,
    /*  Emit interop between CommonJS and ES modules */
    "esModuleInterop": true,
  },
  "include": ["src"],
  "exclude": ["node_modules"]
}

'''