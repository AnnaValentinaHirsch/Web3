*GitHub Repository "johnedvard/gamedevjs2023-toki"*

'''--- @types/phaser/index.d.ts ---
// @types/phaser/index.d.ts
/// <reference path="../../node_modules/phaser/types/SpinePlugin.d.ts" />
/// <reference path="../../node_modules/phaser/types/SpineGameObject.d.ts" />
/// <reference path="../../node_modules/phaser/types/spine.d.ts" />
/// <reference path="../../node_modules/phaser/types/matter.d.ts" />

'''
'''--- README.md ---
## Toki

Toki only plays well in Chrome, not Safari.

Toki, a gamedev entry for the [gamedevjs 2023 gamejam](https://itch.io/jam/gamedevjs-2023/rate/2035033). This game is still being worked on. Check out this tag, [gamedevjs2023](https://github.com/johnedvard/gamedevjs2023-toki/tree/gamedevjs2023), to see the code in the state it was submitted to the game jam.

https://github.com/johnedvard/gamedevjs2023-toki/assets/656024/e1095267-3a70-4a05-8735-4ceb187b7244

### NEAR

NEAR should work on [Itch.io](https://johnonym.itch.io/toki), where the game jam competition is hosted, but if it doesn't, use these URLs instead to play the game and test the NEAR NFT integration.

[Mainnet](https://gamedevjs2023-toki.netlify.app/)
[Testnet](https://gamedevjs2023-toki-testnet.netlify.app/)

It's possible to buy NFTs from the store (after completing the tutorial level.) These NFTs are also listed on [Paras's Markeplace](https://paras.id/), which means you can transfer or sell the NFTs to others.

## Get started

```
npm install
npm run start
```

## Result from the gamejam

- Placed 1st the web3 challenge
- Placed 9th in the open source challenge
- Ranked 33rd overall

| Criteria         | Rank | Score\* | Raw Score |
| ---------------- | ---- | ------- | --------- |
| Web3             | #1   | n/a     | n/a       |
| Interoperability | #2   | n/a     | n/a       |
| Arcadians        | #3   | n/a     | n/a       |
| Overlord's Arena | #3   | n/a     | n/a       |
| Open Source      | #9   | n/a     | n/a       |
| Audio            | #25  | 3.545   | 3.545     |
| Overall          | #33  | 3.441   | 3.441     |
| Theme            | #39  | 3.545   | 3.545     |
| Innovation       | #45  | 3.250   | 3.250     |
| Graphics         | #46  | 3.568   | 3.568     |
| Gameplay         | #55  | 3.295   | 3.295     |

Ranked from 44 ratings. Score is adjusted from raw score by the median number of ratings per game in the jam.

'''
'''--- index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/logo.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Toki</title>
    <link rel="manifest" href="/manifest.json" />
  </head>
  <body>
    <canvas id="moons-of-terra"></canvas>
    <script type="module" src="/src/main.ts"></script>
  </body>
</html>

'''
'''--- package.json ---
{
  "name": "gamedevjs2023-toki",
  "private": false,
  "version": "1.0.0",
  "files": [
    "dist"
  ],
  "main": "./dist/toki.umd.cjs",
  "module": "./dist/toki.js",
  "exports": {
    ".": {
      "import": "./dist/toki.js",
      "require": "./dist/toki.cjs"
    }
  },
  "author": "johnedvard",
  "type": "module",
  "scripts": {
    "start": "vite",
    "start:mainnet": "vite --mode dev",
    "build:testnet": "tsc && vite build --mode testnet",
    "build:mainnet": "tsc && vite build --mode mainnet",
    "build:lib": "tsc && vite build --config vite.config.lib.ts --mode mainnet",
    "preview": "vite preview",
    "server": "tsc server/main.ts && node server/main.js"
  },
  "devDependencies": {
    "@types/node": "^18.15.11",
    "eslint": "^8.38.0",
    "sass": "^1.62.0",
    "typescript": "^5.0.4",
    "vite": "^4.3.7"
  },
  "dependencies": {
    "@esbuild-plugins/node-globals-polyfill": "^0.2.3",
    "@esbuild-plugins/node-modules-polyfill": "^0.2.2",
    "near-api-js": "^2.1.0",
    "phaser": "^3.60.0",
    "svg-to-phaser-path": "^0.3.0"
  }
}

'''
'''--- public/assets/toki/bitmap/atari-classic.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<!--Created using Glyph Designer - http://www.71squared.com/glyphdesigner-->
<font>
    <info face="AtariClassicChunky" size="64" bold="0" italic="0" chasrset="" unicode="0" stretchH="100" smooth="1" aa="1" padding="0,0,0,0" spacing="2,2"/>
    <common lineHeight="65" base="56" scaleW="512" scaleH="512" pages="1" packed="0"/>
    <pages>
        <page id="0" file="atari-classic.png"/>
    </pages>
    <chars count="95">
        <char id="32" x="53" y="461" width="0" height="0" xoffset="0" yoffset="57" xadvance="64" page="0" chnl="0" letter="space"/>
        <char id="33" x="333" y="324" width="17" height="49" xoffset="24" yoffset="8" xadvance="64" page="0" chnl="0" letter="!"/>
        <char id="34" x="327" y="418" width="49" height="25" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="&quot;"/>
        <char id="35" x="295" y="2" width="65" height="49" xoffset="0" yoffset="8" xadvance="64" page="0" chnl="0" letter="#"/>
        <char id="36" x="80" y="2" width="49" height="57" xoffset="8" yoffset="0" xadvance="64" page="0" chnl="0" letter="$"/>
        <char id="37" x="308" y="273" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="%"/>
        <char id="38" x="21" y="2" width="57" height="57" xoffset="8" yoffset="0" xadvance="64" page="0" chnl="0" letter="&amp;"/>
        <char id="39" x="405" y="418" width="17" height="25" xoffset="24" yoffset="8" xadvance="64" page="0" chnl="0" letter="'"/>
        <char id="40" x="96" y="324" width="33" height="49" xoffset="24" yoffset="8" xadvance="64" page="0" chnl="0" letter="("/>
        <char id="41" x="131" y="324" width="33" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter=")"/>
        <char id="42" x="352" y="324" width="65" height="41" xoffset="0" yoffset="8" xadvance="64" page="0" chnl="0" letter="*"/>
        <char id="43" x="104" y="418" width="49" height="41" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="+"/>
        <char id="44" x="378" y="418" width="25" height="25" xoffset="16" yoffset="40" xadvance="64" page="0" chnl="0" letter=","/>
        <char id="45" x="2" y="461" width="49" height="9" xoffset="8" yoffset="24" xadvance="64" page="0" chnl="0" letter="-"/>
        <char id="46" x="424" y="418" width="17" height="17" xoffset="24" yoffset="40" xadvance="64" page="0" chnl="0" letter="."/>
        <char id="47" x="410" y="69" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="/"/>
        <char id="48" x="359" y="120" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="0"/>
        <char id="49" x="206" y="273" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="1"/>
        <char id="50" x="257" y="222" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="2"/>
        <char id="51" x="155" y="222" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="3"/>
        <char id="52" x="53" y="120" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="4"/>
        <char id="53" x="308" y="222" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="5"/>
        <char id="54" x="53" y="222" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="6"/>
        <char id="55" x="104" y="273" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="7"/>
        <char id="56" x="308" y="69" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="8"/>
        <char id="57" x="104" y="222" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="9"/>
        <char id="58" x="198" y="418" width="17" height="41" xoffset="24" yoffset="16" xadvance="64" page="0" chnl="0" letter=":"/>
        <char id="59" x="306" y="324" width="25" height="49" xoffset="16" yoffset="16" xadvance="64" page="0" chnl="0" letter=";"/>
        <char id="60" x="131" y="2" width="41" height="57" xoffset="16" yoffset="0" xadvance="64" page="0" chnl="0" letter="&lt;"/>
        <char id="61" x="276" y="418" width="49" height="33" xoffset="8" yoffset="16" xadvance="64" page="0" chnl="0" letter="="/>
        <char id="62" x="174" y="2" width="41" height="57" xoffset="8" yoffset="0" xadvance="64" page="0" chnl="0" letter="&gt;"/>
        <char id="63" x="359" y="222" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="?"/>
        <char id="64" x="2" y="120" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="@"/>
        <char id="65" x="461" y="222" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="A"/>
        <char id="66" x="2" y="171" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="B"/>
        <char id="67" x="308" y="120" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="C"/>
        <char id="68" x="104" y="171" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="D"/>
        <char id="69" x="155" y="171" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="E"/>
        <char id="70" x="206" y="171" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="F"/>
        <char id="71" x="257" y="120" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="G"/>
        <char id="72" x="53" y="273" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="H"/>
        <char id="73" x="257" y="273" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="I"/>
        <char id="74" x="359" y="171" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="J"/>
        <char id="75" x="104" y="69" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="K"/>
        <char id="76" x="257" y="171" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="L"/>
        <char id="77" x="421" y="2" width="57" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="M"/>
        <char id="78" x="104" y="120" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="N"/>
        <char id="79" x="206" y="120" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="O"/>
        <char id="80" x="53" y="171" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="P"/>
        <char id="81" x="53" y="69" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="Q"/>
        <char id="82" x="155" y="69" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="R"/>
        <char id="83" x="2" y="222" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="S"/>
        <char id="84" x="2" y="273" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="T"/>
        <char id="85" x="206" y="222" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="U"/>
        <char id="86" x="410" y="222" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="V"/>
        <char id="87" x="362" y="2" width="57" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="W"/>
        <char id="88" x="461" y="69" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="X"/>
        <char id="89" x="410" y="171" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="Y"/>
        <char id="90" x="155" y="120" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="Z"/>
        <char id="91" x="166" y="324" width="33" height="49" xoffset="24" yoffset="8" xadvance="64" page="0" chnl="0" letter="["/>
        <char id="92" x="359" y="69" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="\"/>
        <char id="93" x="201" y="324" width="33" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="]"/>
        <char id="94" x="217" y="418" width="57" height="33" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="^"/>
        <char id="95" x="443" y="418" width="65" height="9" xoffset="0" yoffset="48" xadvance="64" page="0" chnl="0" letter="_"/>
        <char id="96" x="2" y="69" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="`"/>
        <char id="97" x="112" y="375" width="49" height="41" xoffset="8" yoffset="16" xadvance="64" page="0" chnl="0" letter="a"/>
        <char id="98" x="461" y="120" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="b"/>
        <char id="99" x="155" y="418" width="41" height="41" xoffset="8" yoffset="16" xadvance="64" page="0" chnl="0" letter="c"/>
        <char id="100" x="410" y="120" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="d"/>
        <char id="101" x="367" y="375" width="49" height="41" xoffset="8" yoffset="16" xadvance="64" page="0" chnl="0" letter="e"/>
        <char id="102" x="53" y="324" width="41" height="49" xoffset="16" yoffset="8" xadvance="64" page="0" chnl="0" letter="f"/>
        <char id="103" x="461" y="273" width="49" height="49" xoffset="8" yoffset="16" xadvance="64" page="0" chnl="0" letter="g"/>
        <char id="104" x="308" y="171" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="h"/>
        <char id="105" x="271" y="324" width="33" height="49" xoffset="16" yoffset="8" xadvance="64" page="0" chnl="0" letter="i"/>
        <char id="106" x="217" y="2" width="41" height="57" xoffset="16" yoffset="8" xadvance="64" page="0" chnl="0" letter="j"/>
        <char id="107" x="206" y="69" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="k"/>
        <char id="108" x="236" y="324" width="33" height="49" xoffset="16" yoffset="8" xadvance="64" page="0" chnl="0" letter="l"/>
        <char id="109" x="419" y="324" width="57" height="41" xoffset="8" yoffset="16" xadvance="64" page="0" chnl="0" letter="m"/>
        <char id="110" x="163" y="375" width="49" height="41" xoffset="8" yoffset="16" xadvance="64" page="0" chnl="0" letter="n"/>
        <char id="111" x="316" y="375" width="49" height="41" xoffset="8" yoffset="16" xadvance="64" page="0" chnl="0" letter="o"/>
        <char id="112" x="410" y="273" width="49" height="49" xoffset="8" yoffset="16" xadvance="64" page="0" chnl="0" letter="p"/>
        <char id="113" x="359" y="273" width="49" height="49" xoffset="8" yoffset="16" xadvance="64" page="0" chnl="0" letter="q"/>
        <char id="114" x="214" y="375" width="49" height="41" xoffset="8" yoffset="16" xadvance="64" page="0" chnl="0" letter="r"/>
        <char id="115" x="265" y="375" width="49" height="41" xoffset="8" yoffset="16" xadvance="64" page="0" chnl="0" letter="s"/>
        <char id="116" x="155" y="273" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="t"/>
        <char id="117" x="418" y="375" width="49" height="41" xoffset="8" yoffset="16" xadvance="64" page="0" chnl="0" letter="u"/>
        <char id="118" x="2" y="418" width="49" height="41" xoffset="8" yoffset="16" xadvance="64" page="0" chnl="0" letter="v"/>
        <char id="119" x="2" y="375" width="57" height="41" xoffset="8" yoffset="16" xadvance="64" page="0" chnl="0" letter="w"/>
        <char id="120" x="61" y="375" width="49" height="41" xoffset="8" yoffset="16" xadvance="64" page="0" chnl="0" letter="x"/>
        <char id="121" x="2" y="324" width="49" height="49" xoffset="8" yoffset="16" xadvance="64" page="0" chnl="0" letter="y"/>
        <char id="122" x="53" y="418" width="49" height="41" xoffset="8" yoffset="16" xadvance="64" page="0" chnl="0" letter="z"/>
        <char id="123" x="257" y="69" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="{"/>
        <char id="124" x="2" y="2" width="17" height="65" xoffset="24" yoffset="0" xadvance="64" page="0" chnl="0" letter="|"/>
        <char id="125" x="461" y="171" width="49" height="49" xoffset="8" yoffset="8" xadvance="64" page="0" chnl="0" letter="}"/>
        <char id="126" x="260" y="2" width="33" height="57" xoffset="8" yoffset="0" xadvance="64" page="0" chnl="0" letter="~"/>
    </chars>
</font>
'''
'''--- public/assets/toki/levels/level0.svg ---
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="8269px" height="2311px" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:1;">
    <rect id="level0" x="0" y="0" width="8268.22" height="2310.37" style="fill:#565a75;"/>
    <clipPath id="_clip1">
        <rect id="level01" serif:id="level0" x="0" y="0" width="8268.22" height="2310.37"/>
    </clipPath>
    <g clip-path="url(#_clip1)">
        <g id="mountain--parallax-back-" serif:id="mountain {parallax-back}">
            <path d="M6190.64,956.457C6168.52,852.906 6018.67,791.393 5931.21,773.14C5843.75,754.887 5754.73,869.998 5665.86,846.94C5574.16,823.146 5495.5,663.742 5380.97,630.37C5245.65,590.939 5028.07,634.564 4853.94,610.355C4670.86,584.902 4457.91,470.587 4282.49,477.65C4111.99,484.515 3966.48,609.407 3801.43,652.731C3613.8,701.979 3310.86,714.426 3156.75,773.14C3043.51,816.281 2997.87,1000.68 2876.77,1005.01C2734.08,1010.12 2435.07,811.894 2300.58,803.801C2208.52,798.262 2107.85,906.614 2069.84,956.457C2040.24,995.267 2029.58,1079.66 2072.52,1102.86C2223.83,1184.6 2657.77,1403.93 2977.68,1446.92C3487.66,1515.44 4611.4,1491.84 5132.38,1514.01C5456.55,1527.8 5927.16,1672.83 6103.53,1579.91C6279.91,1486.98 6219.36,1090.92 6190.64,956.457Z" style="fill:#c6b7be;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M5927.84,777.187C5903.86,772.743 5795.82,802.694 5845.3,811.874C5909.53,823.791 5931.56,800.008 5966.19,811.874C6000.82,823.741 6000.17,870.249 6033.32,855.014C6066.47,839.779 6084.39,834.294 6101.57,864.17C6118.75,894.047 6155.5,908.013 6145.3,886.184C6142.71,880.63 6113.28,853.334 6064.96,828.035C6021.7,805.386 5965.28,784.124 5927.84,777.187Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M5312.92,627.778C5258.86,623.612 5114.66,608.611 5211.21,660.897C5268.65,692.004 5297.47,649.03 5332.1,660.897C5366.72,672.763 5366.07,719.271 5399.23,704.036C5432.38,688.801 5442.35,688.81 5459.53,718.686C5476.72,748.563 5531.51,760.653 5516.36,741.925C5444.7,653.374 5377.53,632.756 5312.92,627.778Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M4376.4,494.094C4308.98,478.191 4146.62,480.015 4201.64,525.065C4252.18,566.45 4287.9,513.198 4322.53,525.065C4357.16,536.932 4356.51,583.44 4389.66,568.204C4422.81,552.969 4432.79,552.978 4449.97,582.855C4467.15,612.731 4511.52,629.718 4506.79,606.094C4502.53,584.75 4456.22,512.922 4376.4,494.094Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M4608.76,551.771C4574.73,534.195 4449.27,491.484 4488.28,525.017C4533.22,563.641 4524.96,596.131 4552.46,606.101C4582.17,616.874 4622.54,623.17 4630.94,608.16C4639.34,593.149 4624.18,559.738 4608.76,551.771Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M4124.84,574.956C4117.24,572.89 4112.56,560.094 4108.32,558.09C4097.67,553.069 4083.47,550.624 4081.04,558.68C4078.62,566.735 4088.45,596.166 4092.56,591.759C4104.28,579.205 4135.62,599.387 4133.55,610.621C4131.03,624.281 4260.18,629.107 4226.31,614.935C4206.84,606.786 4194.73,579.415 4172.45,575.531C4154.75,572.447 4135.52,577.862 4124.84,574.956Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M3132.13,798.028C3114.28,810.963 2973.7,934.669 3076.84,910.72C3140.47,895.945 3130.5,842.147 3163.62,826.558C3196.74,810.97 3228.65,844.807 3241.85,810.79C3255.04,776.773 3262.2,769.834 3295.34,779.319C3328.47,788.804 3372.14,770.112 3352.31,756.44C3334.39,744.089 3198.54,749.914 3132.13,798.028Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M2410.87,841.745C2416.89,869.544 2355.02,847.577 2314.56,886.137C2284.89,914.415 2269.58,827.844 2242.63,845.856C2214.65,864.549 2175.07,814.219 2301.88,803.885C2329.84,801.607 2409.04,833.296 2410.87,841.745Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
        </g>
        <path id="ground--collision-" serif:id="ground {collision}" d="M1614.2,-247.057C2187.82,329.174 1041.23,37.103 982.123,159.038C854.401,422.511 997.646,1165.37 1385.54,1109.38C1592.64,1079.49 1878.3,951.512 2126.34,985.516C2414.15,1024.97 2397.57,1346.13 3112.45,1346.13C3827.34,1346.13 3703.2,1031.76 4027.54,977.47C4404.11,914.445 5143.87,1129.52 5371.86,967.979C5511.17,869.277 5703.88,470.937 5387.68,231.22C5186.38,78.615 5522.23,-28.646 5477,-144.614C5380.17,-392.887 5603.09,-761.627 5917.18,-811.408C6659.48,-929.057 6997.14,-332.457 7204.99,-17.878C7500.79,429.809 8026.39,2403.58 7170.27,2694.37C5791.92,3162.53 288.832,3241.15 -1065.11,2791.12C-1950.53,2496.83 -1205.44,576.817 -953.37,-5.788C-707.894,-573.15 1327.02,-535.543 1614.2,-247.057Z" style="fill:#565a75;stroke:#000;stroke-width:15px;stroke-miterlimit:1.5;"/>
        <circle id="storeBooth" cx="3075.48" cy="1236.89" r="30.661" style="fill:#f0e;"/>
        <circle id="_-door---to-level1---numCapsules-2-" serif:id="{door} {to-level1} {numCapsules-2}" cx="4164.77" cy="880.077" r="30.661" style="fill:#f0e;"/>
        <circle id="_-door---to-level2---numCapsules-2-" serif:id="{door} {to-level2} {numCapsules-2}" cx="4551.13" cy="910.738" r="30.661" style="fill:#f0e;"/>
        <circle id="_-door---to-level3---numCapsules-3-" serif:id="{door} {to-level3} {numCapsules-3}" cx="4997.41" cy="941.4" r="30.661" style="fill:#f0e;"/>
        <circle id="start" cx="1364.94" cy="930.425" r="30.661" style="fill:#f0e;"/>
        <path id="foreground-shadow--parallax-front-" serif:id="foreground-shadow {parallax-front}" d="M8622,-491.18C8620.59,-554.246 5799.98,-344.1 5776.44,-272.287C5747.11,-182.846 5761.63,59.318 5729.59,307.569C5726.5,331.533 5765.14,355.554 5761.1,379.499C5756.99,403.819 5710.19,428.062 5704.94,452.089C5674.02,593.525 5621.73,727.485 5530.71,825.783C5490.84,868.834 5450.2,911.322 5409.2,952.67C5404.08,957.84 5410.89,976.459 5405.76,981.592C5400.84,986.51 5383.97,977.943 5379.04,982.825C5135.38,1224.22 5035.67,1364.96 4774.36,1278.73C4759.15,1273.71 4732.96,1307.27 4718.38,1302.47C4704.69,1297.96 4702.57,1255.07 4689.47,1250.82C4578,1214.66 4488.66,1189.02 4433.2,1193.89C4278.48,1207.49 3971.67,1577.11 3566.9,1645.13C3546.05,1648.64 3527.75,1677.08 3507.16,1680.48C3486.41,1683.91 3463.38,1662.32 3442.98,1665.62C3398.6,1672.83 3355.17,1679.71 3313.16,1686.15C2860.76,1755.51 2167.41,1762.07 1809.3,1715.99C1711.17,1703.37 1616.83,1671.96 1526.09,1629.73C1501.9,1618.47 1442.15,1657.72 1418.47,1645.07C1390.54,1630.15 1398.78,1563.11 1371.55,1546.72C1300.18,1503.76 1231.2,1456.59 1164.53,1409.67C1133.94,1388.14 979.943,1284.81 890.948,1223.88C857.617,1201.06 814.854,1237.45 799.171,1226.17C758.95,1197.23 788.084,1158.25 745.459,1125.22C420.956,873.74 17.92,472.882 -99.705,-28.952C-236.093,-610.843 -1158.35,-414.14 -1161.65,-374.778C-1164.75,-337.742 -1536.31,2741.56 -1531.51,2899.11C-1526.15,3074.77 8279.84,2686.87 8268.22,2600.44C8256.61,2514.01 8627.4,-249.251 8622,-491.18Z" style="fill:#313343;stroke:#313343;stroke-width:5px;"/>
        <g id="grass">
            <g>
                <path d="M3949.03,1151.32C3959.49,1151.32 3968.02,1153.49 3968.08,1156.16C3968.14,1158.83 3959.71,1161 3949.26,1161C3938.8,1161 3930.27,1158.83 3930.2,1156.16C3930.14,1153.49 3938.58,1151.32 3949.03,1151.32Z" style="fill:#313343;stroke:#313343;stroke-width:4.34px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
                <path d="M3913.44,1118.44C3913.44,1118.44 3939.93,1125.09 3952.78,1151.55C3965.64,1178.01 3928.18,1143.05 3913.44,1118.44Z" style="fill:#c6b7be;stroke:#313343;stroke-width:2.94px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
                <path d="M3949.4,1102.64C3949.4,1102.64 3966.16,1124.39 3959.65,1152.65C3953.14,1180.91 3945.55,1130.67 3949.4,1102.64Z" style="fill:#c6b7be;stroke:#313343;stroke-width:2.92px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
            </g>
            <g>
                <path d="M3976.35,1092.95C3986.8,1092.95 3995.34,1095.12 3995.4,1097.8C3995.47,1100.47 3987.03,1102.64 3976.58,1102.64C3966.12,1102.64 3957.59,1100.47 3957.53,1097.8C3957.46,1095.12 3965.9,1092.95 3976.35,1092.95Z" style="fill:#313343;stroke:#313343;stroke-width:4.34px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
                <path d="M3940.76,1060.08C3940.76,1060.08 3967.25,1066.73 3980.1,1093.19C3992.95,1119.65 3955.5,1084.68 3940.76,1060.08Z" style="fill:#c6b7be;stroke:#313343;stroke-width:2.94px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
                <path d="M3976.72,1044.27C3976.72,1044.27 3993.49,1066.03 3986.97,1094.29C3980.46,1122.55 3972.87,1072.31 3976.72,1044.27Z" style="fill:#c6b7be;stroke:#313343;stroke-width:2.92px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
            </g>
            <g>
                <path d="M4014.76,1122.14C4004.31,1122.14 3996.49,1124.31 3997.32,1126.98C3998.14,1129.65 4007.3,1131.82 4017.75,1131.82C4028.2,1131.82 4036.02,1129.65 4035.19,1126.98C4034.37,1124.31 4025.22,1122.14 4014.76,1122.14Z" style="fill:#313343;stroke:#313343;stroke-width:3.69px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
                <path d="M4039.45,1089.26C4039.45,1089.26 4015.16,1095.91 4011.09,1122.37C4007.01,1148.83 4032.87,1113.87 4039.45,1089.26Z" style="fill:#c6b7be;stroke:#313343;stroke-width:2.5px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
                <path d="M3998.25,1073.46C3998.25,1073.46 3988.7,1095.21 4004.58,1123.47C4020.46,1151.73 4011.4,1101.49 3998.25,1073.46Z" style="fill:#c6b7be;stroke:#313343;stroke-width:2.91px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
            </g>
            <g>
                <path d="M1772.73,1122.43C1783.18,1122.43 1790.95,1124.6 1790.06,1127.28C1789.16,1129.95 1779.95,1132.12 1769.5,1132.12C1759.05,1132.12 1751.29,1129.95 1752.18,1127.28C1753.07,1124.6 1762.28,1122.43 1772.73,1122.43Z" style="fill:#313343;stroke:#313343;stroke-width:3.64px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
                <path d="M1748.88,1089.56C1748.88,1089.56 1772.99,1096.2 1776.4,1122.67C1779.81,1149.13 1754.83,1114.16 1748.88,1089.56Z" style="fill:#c6b7be;stroke:#313343;stroke-width:2.47px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
                <path d="M1790.48,1073.75C1790.48,1073.75 1799.48,1095.51 1782.88,1123.77C1766.28,1152.02 1776.62,1101.78 1790.48,1073.75Z" style="fill:#c6b7be;stroke:#313343;stroke-width:2.92px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
            </g>
            <g>
                <path d="M1947.73,1225.7C1937.27,1225.7 1929.33,1227.87 1930,1230.54C1930.67,1233.22 1939.71,1235.38 1950.16,1235.38C1960.61,1235.38 1968.55,1233.22 1967.88,1230.54C1967.21,1227.87 1958.18,1225.7 1947.73,1225.7Z" style="fill:#313343;stroke:#313343;stroke-width:3.79px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
                <path d="M1974.29,1192.83C1974.29,1192.83 1949.63,1199.47 1944.04,1225.93C1938.45,1252.39 1966.31,1217.43 1974.29,1192.83Z" style="fill:#c6b7be;stroke:#313343;stroke-width:2.57px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
                <path d="M1933.99,1177.02C1933.99,1177.02 1923.2,1198.77 1937.47,1227.03C1951.74,1255.29 1945.54,1205.05 1933.99,1177.02Z" style="fill:#c6b7be;stroke:#313343;stroke-width:2.89px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
            </g>
            <g>
                <path d="M1870.47,1241.51C1880.92,1241.51 1888.86,1243.67 1888.19,1246.35C1887.52,1249.02 1878.49,1251.19 1868.04,1251.19C1857.58,1251.19 1849.64,1249.02 1850.32,1246.35C1850.99,1243.67 1860.02,1241.51 1870.47,1241.51Z" style="fill:#313343;stroke:#313343;stroke-width:3.79px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
                <path d="M1843.91,1208.63C1843.91,1208.63 1868.57,1215.28 1874.16,1241.74C1879.75,1268.2 1851.89,1233.24 1843.91,1208.63Z" style="fill:#c6b7be;stroke:#313343;stroke-width:2.57px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
                <path d="M1884.2,1192.83C1884.2,1192.83 1895,1214.58 1880.73,1242.84C1866.46,1271.1 1872.65,1220.86 1884.2,1192.83Z" style="fill:#c6b7be;stroke:#313343;stroke-width:2.89px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
            </g>
            <g>
                <path d="M2303.61,1298.63C2314.06,1298.63 2321.83,1300.8 2320.93,1303.47C2320.04,1306.15 2310.83,1308.32 2300.38,1308.32C2289.93,1308.32 2282.16,1306.15 2283.06,1303.47C2283.95,1300.8 2293.16,1298.63 2303.61,1298.63Z" style="fill:#313343;stroke:#313343;stroke-width:3.64px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
                <path d="M2279.76,1265.76C2279.76,1265.76 2303.87,1272.4 2307.28,1298.87C2310.69,1325.33 2285.71,1290.36 2279.76,1265.76Z" style="fill:#c6b7be;stroke:#313343;stroke-width:2.47px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
                <path d="M2321.36,1249.95C2321.36,1249.95 2330.36,1271.7 2313.76,1299.96C2297.16,1328.22 2307.5,1277.98 2321.36,1249.95Z" style="fill:#c6b7be;stroke:#313343;stroke-width:2.92px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
            </g>
        </g>
        <rect id="_-box-" serif:id="{box}" x="1747.98" y="831.505" width="79.317" height="79.317" style="fill:none;stroke:#0f0f1b;stroke-width:5px;"/>
    </g>
</svg>

'''
'''--- public/assets/toki/levels/level1.svg ---
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="8269px" height="2311px" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:1;">
    <rect id="level1" x="0" y="0" width="8268.22" height="2310.37" style="fill:#565a75;"/>
    <clipPath id="_clip1">
        <rect id="level11" serif:id="level1" x="0" y="0" width="8268.22" height="2310.37"/>
    </clipPath>
    <g clip-path="url(#_clip1)">
        <g id="mountain--parallax-back-" serif:id="mountain {parallax-back}">
            <path d="M3319.39,1248.19C3297.27,1144.64 3147.42,1083.12 3059.96,1064.87C2972.5,1046.62 2883.48,1161.73 2794.62,1138.67C2702.91,1114.88 2624.25,955.473 2509.73,922.102C2374.41,882.671 2156.82,926.295 1982.7,902.086C1799.62,876.633 1586.67,762.318 1411.25,769.381C1240.74,776.246 1095.23,901.138 930.18,944.462C742.556,993.711 439.613,1006.16 285.504,1064.87C172.267,1108.01 126.624,1292.41 5.525,1296.74C-137.17,1301.85 -436.179,1103.62 -570.668,1095.53C-662.724,1089.99 -763.399,1198.35 -801.409,1248.19C-831.006,1287 -841.671,1371.39 -798.729,1394.59C-647.422,1476.33 -213.475,1695.66 106.432,1738.65C616.409,1807.17 1740.16,1783.57 2261.13,1805.74C2585.3,1819.53 3055.91,1964.56 3232.29,1871.64C3408.66,1778.71 3348.11,1382.65 3319.39,1248.19Z" style="fill:#c6b7be;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M3056.6,1068.92C3032.62,1064.47 2924.58,1094.43 2974.06,1103.61C3038.28,1115.52 3060.32,1091.74 3094.94,1103.61C3129.57,1115.47 3128.92,1161.98 3162.07,1146.75C3195.23,1131.51 3213.14,1126.03 3230.32,1155.9C3247.5,1185.78 3284.25,1199.74 3274.06,1177.91C3271.46,1172.36 3242.04,1145.07 3193.72,1119.77C3150.45,1097.12 3094.03,1075.86 3056.6,1068.92Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M2441.68,919.509C2387.61,915.343 2243.41,900.342 2339.96,952.628C2397.4,983.735 2426.22,940.761 2460.85,952.628C2495.47,964.495 2494.83,1011 2527.98,995.767C2561.13,980.532 2571.11,980.541 2588.29,1010.42C2605.47,1040.29 2660.27,1052.38 2645.11,1033.66C2573.45,945.105 2506.29,924.487 2441.68,919.509Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M1505.16,785.826C1437.74,769.922 1275.37,771.746 1330.39,816.796C1380.94,858.181 1416.65,804.93 1451.28,816.796C1485.91,828.663 1485.26,875.171 1518.41,859.936C1551.56,844.701 1561.54,844.709 1578.72,874.586C1595.9,904.463 1640.27,921.449 1635.55,897.825C1631.28,876.481 1584.97,804.654 1505.16,785.826Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M1737.51,843.503C1703.48,825.926 1578.03,783.215 1617.04,816.748C1661.97,855.373 1653.71,887.862 1681.21,897.832C1710.92,908.605 1751.3,914.901 1759.69,899.891C1768.09,884.88 1752.94,851.469 1737.51,843.503Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M1253.59,866.687C1246,864.622 1241.32,851.825 1237.07,849.821C1226.42,844.8 1212.22,842.355 1209.8,850.411C1207.37,858.467 1217.2,887.897 1221.32,883.49C1233.04,870.937 1264.37,891.118 1262.3,902.353C1259.78,916.012 1388.93,920.838 1355.07,906.666C1335.59,898.518 1323.49,871.146 1301.2,867.262C1283.51,864.178 1264.28,869.594 1253.59,866.687Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M260.881,1089.76C243.028,1102.69 102.452,1226.4 205.595,1202.45C269.226,1187.68 259.256,1133.88 292.374,1118.29C325.493,1102.7 357.406,1136.54 370.597,1102.52C383.789,1068.51 390.957,1061.57 424.091,1071.05C457.225,1080.54 500.897,1061.84 481.06,1048.17C463.139,1035.82 327.292,1041.64 260.881,1089.76Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
        </g>
        <g id="mountain--parallax-back-1" serif:id="mountain {parallax-back}">
            <path d="M6975.39,877.216C6953.27,773.665 6803.43,712.152 6715.96,693.899C6628.5,675.646 6539.48,790.757 6450.62,767.7C6358.91,743.905 6280.25,584.501 6165.73,551.13C6030.41,511.699 5812.83,555.323 5638.7,531.114C5455.62,505.661 5242.67,391.346 5067.25,398.409C4896.74,405.274 4751.23,530.166 4586.18,573.49C4398.56,622.739 4095.61,635.186 3941.51,693.899C3828.27,737.041 3691.37,813.476 3661.53,925.772C3631.68,1038.07 3615.05,1334.42 3762.43,1367.67C4138.37,1452.51 5396.16,1412.6 5917.13,1434.77C6241.3,1448.56 6711.91,1593.59 6888.29,1500.66C7064.66,1407.74 7004.11,1011.68 6975.39,877.216Z" style="fill:#c6b7be;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M6712.6,697.946C6688.62,693.502 6580.58,723.454 6630.06,732.634C6694.28,744.55 6716.32,720.767 6750.94,732.634C6785.57,744.5 6784.92,791.008 6818.07,775.773C6851.23,760.538 6869.14,755.053 6886.32,784.929C6903.5,814.806 6940.25,828.772 6930.06,806.943C6927.46,801.389 6898.04,774.093 6849.72,748.795C6806.46,726.145 6750.03,704.883 6712.6,697.946Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M6097.68,548.537C6043.61,544.371 5899.41,529.37 5995.96,581.656C6053.4,612.763 6082.22,569.789 6116.85,581.656C6151.48,593.523 6150.83,640.031 6183.98,624.795C6217.13,609.56 6227.11,609.569 6244.29,639.446C6261.47,669.322 6316.27,681.413 6301.11,662.685C6229.46,574.133 6162.29,553.515 6097.68,548.537Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M5161.16,414.854C5093.74,398.95 4931.38,400.774 4986.39,445.824C5036.94,487.209 5072.66,433.958 5107.28,445.824C5141.91,457.691 5141.26,504.199 5174.41,488.964C5207.57,473.729 5217.54,473.737 5234.72,503.614C5251.9,533.491 5296.27,550.477 5291.55,526.853C5287.28,505.509 5240.97,433.682 5161.16,414.854Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M5393.51,472.531C5359.48,454.954 5234.03,412.243 5273.04,445.776C5317.97,484.401 5309.71,516.89 5337.21,526.86C5366.93,537.633 5407.3,543.929 5415.7,528.919C5424.09,513.909 5408.94,480.497 5393.51,472.531Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M4909.59,495.715C4902,493.65 4897.32,480.853 4893.07,478.849C4882.42,473.828 4868.23,471.383 4865.8,479.439C4863.37,487.495 4873.2,516.925 4877.32,512.518C4889.04,499.965 4920.38,520.146 4918.3,531.381C4915.78,545.04 5044.93,549.866 5011.07,535.694C4991.59,527.546 4979.49,500.174 4957.2,496.29C4939.51,493.206 4920.28,498.622 4909.59,495.715Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M3846.14,746.576C3818.88,764.451 3609.53,942.775 3779.46,926.812C3884.3,916.963 3854.16,822.032 3906.79,803.326C3959.42,784.62 4022.08,850.597 4036.25,795.337C4050.42,740.077 4060.94,729.899 4119.73,754.306C4178.52,778.713 4248.38,757.251 4211.23,728.897C4177.67,703.28 3947.56,680.088 3846.14,746.576Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
        </g>
        <rect id="_-box-" serif:id="{box}" x="3241.55" y="967.793" width="79.317" height="79.317" style="fill:none;stroke:#0f0f1b;stroke-width:5px;"/>
        <rect id="_-box-1" serif:id="{box}" x="3241.55" y="882.542" width="79.317" height="79.317" style="fill:none;stroke:#0f0f1b;stroke-width:5px;"/>
        <rect id="_-box-2" serif:id="{box}" x="1793.48" y="804.776" width="79.317" height="79.317" style="fill:none;stroke:#0f0f1b;stroke-width:5px;"/>
        <rect id="_-box-3" serif:id="{box}" x="1793.48" y="719.525" width="79.317" height="79.317" style="fill:none;stroke:#0f0f1b;stroke-width:5px;"/>
        <path id="ground--collision-" serif:id="ground {collision}" d="M1614.2,-247.057C2187.82,329.174 1147.15,-160.627 982.123,159.038C922.895,273.763 1163.56,550.582 894.61,671.036C664.817,773.954 1168.69,1140.68 1385.54,1109.38C1592.64,1079.49 2037.75,751.354 2126.34,985.516C2171.86,1105.84 2117.84,1333.14 2139.69,1516.21C2165.35,1731.11 2295.54,1885.07 2813.99,1733.48C2950.46,1693.59 2786.29,1381.86 2884.41,1155.18C2988.72,914.221 4006.38,1332.3 4001.99,1155.18C3988.8,622.953 4499.47,994.198 4929.21,1008.36C5145.93,1015.5 5297.99,1020.32 5371.86,967.979C5511.17,869.277 5538.64,350.906 5046.63,160.34C4811.08,69.105 5522.23,-28.646 5477,-144.614C5380.17,-392.887 5603.09,-761.627 5917.18,-811.408C6659.48,-929.057 6997.14,-332.457 7204.99,-17.878C7500.79,429.809 8026.39,2403.58 7170.27,2694.37C5791.92,3162.53 288.832,3241.15 -1065.11,2791.12C-1950.53,2496.83 -1205.44,576.817 -953.37,-5.788C-707.894,-573.15 1327.02,-535.543 1614.2,-247.057Z" style="fill:#565a75;stroke:#000;stroke-width:15px;stroke-miterlimit:1.5;"/>
        <path id="foreground-shadow--parallax-front-" serif:id="foreground-shadow {parallax-front}" d="M8613.22,-345.223C8611.81,-408.289 6618.78,-219.882 6595.23,-148.069C6565.91,-58.628 6580.43,183.536 6548.39,431.787C6545.3,455.751 6583.93,479.772 6579.89,503.717C6575.79,528.038 6528.99,552.28 6523.73,576.307C6492.81,717.743 6440.53,851.703 6349.51,950.001C6309.64,993.053 6268.99,1035.54 6228,1076.89C6222.87,1082.06 6229.69,1100.68 6224.55,1105.81C6219.63,1110.73 6202.76,1102.16 6197.84,1107.04C5954.18,1348.43 5165.01,1796.44 4903.69,1710.21C4888.48,1705.19 4862.3,1738.75 4847.72,1733.95C4834.02,1729.44 4831.9,1686.56 4818.8,1682.31C4707.34,1646.14 4618,1620.5 4562.53,1625.38C4407.82,1638.97 3962.89,1723.06 3558.12,1791.09C3537.28,1794.59 3518.98,1823.03 3498.39,1826.44C3477.64,1829.87 3454.6,1808.27 3434.2,1811.58C3389.82,1818.79 3346.39,1825.67 3304.38,1832.11C2851.99,1901.47 2158.63,1908.03 1800.53,1861.95C1702.4,1849.32 1608.05,1817.92 1517.32,1775.69C1493.12,1764.43 1433.38,1803.67 1409.69,1791.03C1381.76,1776.11 1390,1709.06 1362.77,1692.67C1291.4,1649.72 1222.43,1602.55 1155.75,1555.63C1125.16,1534.1 971.167,1430.77 882.172,1369.84C848.841,1347.02 806.078,1383.4 790.395,1372.12C750.174,1343.19 779.308,1304.21 736.683,1271.17C412.18,1019.7 9.144,618.839 -108.481,117.005C-244.869,-464.886 -1167.12,-268.183 -1170.42,-228.821C-1173.53,-191.785 -1545.09,2887.51 -1540.29,3045.07C-1534.93,3220.73 8271.06,2832.83 8259.45,2746.4C8247.83,2659.97 8618.62,-103.294 8613.22,-345.223Z" style="fill:#313343;stroke:#313343;stroke-width:5px;"/>
        <circle id="_-door---to-level0---goal-" serif:id="{door} {to-level0} {goal}" cx="5169.45" cy="934.764" r="30.661" style="fill:#f0e;"/>
        <circle id="_-timeCapsule-" serif:id="{timeCapsule}" cx="4384.23" cy="763.83" r="30.661" style="fill:#00f683;"/>
        <circle id="start" cx="1364.94" cy="930.425" r="30.661" style="fill:#f0e;"/>
        <circle id="_-spinningBar---safe-" serif:id="{spinningBar} {safe}" cx="2727.95" cy="1055.15" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-" serif:id="{spinningBar}" cx="2647.72" cy="1366.46" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-1" serif:id="{spinningBar}" cx="2395.96" cy="1646.64" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar---safe-1" serif:id="{spinningBar} {safe}" cx="2334.64" cy="919.848" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-timeCapsule-1" serif:id="{timeCapsule}" cx="1461.77" cy="327.902" r="30.661" style="fill:#00f683;"/>
    </g>
</svg>

'''
'''--- public/assets/toki/levels/level2.svg ---
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="14934px" height="5410px" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:1;">
    <rect id="level2" x="-0" y="-0" width="14933.2" height="5409.21" style="fill:#565a75;"/>
    <clipPath id="_clip1">
        <rect id="level21" serif:id="level2" x="-0" y="-0" width="14933.2" height="5409.21"/>
    </clipPath>
    <g clip-path="url(#_clip1)">
        <g id="mountain--parallax-back-" serif:id="mountain {parallax-back}">
            <path d="M1167.94,1875.97C1182.43,1782.24 1339.91,1710.91 1427.37,1692.65C1514.83,1674.4 1603.86,1789.51 1692.72,1766.45C1784.42,1742.66 1863.08,1583.26 1977.61,1549.88C2112.93,1510.45 2330.51,1554.08 2504.64,1529.87C2687.72,1504.41 2900.67,1390.1 3076.09,1397.16C3246.6,1404.03 3392.1,1528.92 3557.15,1572.24C3744.78,1621.49 4047.72,1633.94 4201.83,1692.65C4315.07,1735.8 4360.71,1920.19 4481.81,1924.53C4624.5,1929.64 4923.51,1731.41 5058,1723.31C5150.06,1717.78 5197.25,1864.38 5288.74,1875.97C5397.01,1889.68 5581.01,1749.89 5707.63,1805.6C5896.4,1888.65 6076.04,2023.02 6109.94,2244.52C6135.96,2414.51 4958.62,2374.85 4380.9,2366.43C3747.84,2357.2 2818.33,2207.7 2311.59,2189.14C1987.34,2177.26 1531.04,2307.23 1340.43,2255.04C1206.54,2218.37 1153.45,1969.7 1167.94,1875.97Z" style="fill:#c6b7be;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M1430.74,1696.7C1454.72,1692.26 1562.76,1722.21 1513.28,1731.39C1449.05,1743.3 1427.02,1719.52 1392.39,1731.39C1357.76,1743.25 1358.41,1789.76 1325.26,1774.53C1292.11,1759.29 1274.2,1753.81 1257.01,1783.68C1239.83,1813.56 1203.08,1827.53 1213.28,1805.7C1215.87,1800.14 1245.3,1772.85 1293.62,1747.55C1336.88,1724.9 1393.3,1703.64 1430.74,1696.7Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M2045.66,1547.29C2099.72,1543.12 2243.93,1528.12 2147.37,1580.41C2089.93,1611.52 2061.11,1568.54 2026.49,1580.41C1991.86,1592.28 1992.51,1638.78 1959.36,1623.55C1926.2,1608.31 1916.23,1608.32 1899.05,1638.2C1881.86,1668.08 1827.07,1680.17 1842.22,1661.44C1913.88,1572.89 1981.05,1552.27 2045.66,1547.29Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M2982.18,1413.61C3049.6,1397.7 3211.96,1399.53 3156.94,1444.58C3106.4,1485.96 3070.68,1432.71 3036.05,1444.58C3001.43,1456.44 3002.07,1502.95 2968.92,1487.72C2935.77,1472.48 2925.79,1472.49 2908.61,1502.37C2891.43,1532.25 2847.07,1549.23 2851.79,1525.61C2856.05,1504.26 2902.36,1432.44 2982.18,1413.61Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M2749.82,1471.29C2783.85,1453.71 2909.31,1411 2870.3,1444.53C2825.36,1483.15 2833.62,1515.64 2806.12,1525.61C2776.41,1536.39 2736.04,1542.68 2727.64,1527.67C2719.24,1512.66 2734.4,1479.25 2749.82,1471.29Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M3233.74,1494.47C3241.34,1492.4 3246.02,1479.61 3250.27,1477.6C3260.91,1472.58 3275.11,1470.14 3277.54,1478.19C3279.96,1486.25 3270.13,1515.68 3266.02,1511.27C3254.3,1498.72 3222.96,1518.9 3225.03,1530.13C3227.55,1543.79 3098.4,1548.62 3132.27,1534.45C3151.74,1526.3 3163.85,1498.93 3186.13,1495.04C3203.83,1491.96 3223.06,1497.38 3233.74,1494.47Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M4226.45,1717.54C4244.31,1730.48 4384.88,1854.18 4281.74,1830.23C4218.11,1815.46 4228.08,1761.66 4194.96,1746.07C4161.84,1730.48 4129.93,1764.32 4116.74,1730.3C4103.55,1696.29 4096.38,1689.35 4063.24,1698.83C4030.11,1708.32 3986.44,1689.62 4006.27,1675.95C4024.19,1663.6 4160.04,1669.43 4226.45,1717.54Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M4935.2,1769.72C4929.19,1797.52 4991.06,1775.55 5031.52,1814.11C5061.19,1842.39 5076.49,1755.82 5103.45,1773.83C5131.43,1792.52 5171,1742.19 5044.2,1731.86C5016.24,1729.58 4937.03,1761.27 4935.2,1769.72Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M5527.61,1832.05C5521.59,1859.85 5668.9,1818.15 5695.85,1836.16C5723.83,1854.86 5763.4,1804.53 5636.6,1794.19C5608.64,1791.91 5529.43,1823.6 5527.61,1832.05Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
        </g>
        <g id="mountain--parallax-back-1" serif:id="mountain {parallax-back}">
            <path d="M4674.25,2417.13C4688.74,2323.4 4846.21,2252.06 4933.68,2233.81C5021.14,2215.56 5110.16,2330.67 5199.02,2307.61C5290.73,2283.82 5369.39,2124.41 5483.91,2091.04C5619.23,2051.61 5836.81,2095.23 6010.94,2071.03C6194.02,2045.57 6406.97,1931.26 6582.39,1938.32C6752.9,1945.18 6898.4,2070.08 7063.46,2113.4C7251.08,2162.65 7554.02,2175.1 7708.13,2233.81C7821.37,2276.95 7867.01,2461.35 7988.11,2465.68C8130.81,2470.79 8429.82,2272.56 8564.31,2264.47C8656.36,2258.93 8703.56,2405.54 8795.05,2417.13C8903.32,2430.84 9087.31,2291.05 9213.93,2346.76C9402.7,2429.81 9582.34,2564.17 9616.25,2785.68C9642.26,2955.67 8464.92,2916.01 7887.2,2907.59C7254.15,2898.36 6324.64,2748.86 5817.89,2730.3C5493.65,2718.42 5037.35,2848.39 4846.74,2796.19C4712.85,2759.53 4659.76,2510.86 4674.25,2417.13Z" style="fill:#c6b7be;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M4937.04,2237.86C4961.02,2233.41 5069.06,2263.37 5019.58,2272.55C4955.35,2284.46 4933.32,2260.68 4898.69,2272.55C4864.07,2284.41 4864.72,2330.92 4831.56,2315.68C4798.41,2300.45 4780.5,2294.96 4763.32,2324.84C4746.14,2354.72 4709.39,2368.68 4719.58,2346.85C4722.17,2341.3 4751.6,2314 4799.92,2288.71C4843.18,2266.06 4899.61,2244.8 4937.04,2237.86Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M5551.96,2088.45C5606.03,2084.28 5750.23,2069.28 5653.68,2121.57C5596.24,2152.67 5567.42,2109.7 5532.79,2121.57C5498.16,2133.43 5498.81,2179.94 5465.66,2164.71C5432.51,2149.47 5422.53,2149.48 5405.35,2179.36C5388.17,2209.23 5333.37,2221.32 5348.53,2202.6C5420.18,2114.04 5487.35,2093.43 5551.96,2088.45Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M6488.48,1954.77C6555.9,1938.86 6718.26,1940.68 6663.24,1985.74C6612.7,2027.12 6576.98,1973.87 6542.36,1985.74C6507.73,1997.6 6508.38,2044.11 6475.23,2028.88C6442.07,2013.64 6432.1,2013.65 6414.92,2043.53C6397.73,2073.4 6353.37,2090.39 6358.09,2066.76C6362.36,2045.42 6408.66,1973.59 6488.48,1954.77Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M6256.13,2012.44C6290.16,1994.87 6415.61,1952.15 6376.6,1985.69C6331.67,2024.31 6339.93,2056.8 6312.43,2066.77C6282.71,2077.54 6242.34,2083.84 6233.94,2068.83C6225.55,2053.82 6240.7,2020.41 6256.13,2012.44Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M6740.05,2035.63C6747.64,2033.56 6752.32,2020.76 6756.57,2018.76C6767.22,2013.74 6781.41,2011.29 6783.84,2019.35C6786.27,2027.41 6776.44,2056.84 6772.32,2052.43C6760.6,2039.88 6729.26,2060.06 6731.34,2071.29C6733.86,2084.95 6604.7,2089.78 6638.57,2075.61C6658.05,2067.46 6670.15,2040.09 6692.43,2036.2C6710.13,2033.12 6729.36,2038.53 6740.05,2035.63Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M7732.76,2258.7C7750.61,2271.63 7891.19,2395.34 7788.04,2371.39C7724.41,2356.62 7734.38,2302.82 7701.26,2287.23C7668.15,2271.64 7636.23,2305.48 7623.04,2271.46C7609.85,2237.44 7602.68,2230.5 7569.55,2239.99C7536.41,2249.47 7492.74,2230.78 7512.58,2217.11C7530.5,2204.76 7666.35,2210.58 7732.76,2258.7Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M8441.51,2310.88C8435.49,2338.68 8497.37,2316.71 8537.83,2355.27C8567.5,2383.55 8582.8,2296.97 8609.76,2314.99C8637.73,2333.68 8677.31,2283.35 8550.5,2273.01C8522.54,2270.74 8443.34,2302.43 8441.51,2310.88Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M9033.91,2373.21C9027.89,2401.01 9175.2,2359.31 9202.16,2377.32C9230.13,2396.01 9269.71,2345.68 9142.9,2335.35C9114.94,2333.07 9035.74,2364.76 9033.91,2373.21Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
        </g>
        <g id="mountain--parallax-back-2" serif:id="mountain {parallax-back}">
            <path d="M8341.97,1519.86C8356.45,1426.12 8513.93,1354.79 8601.39,1336.54C8688.85,1318.29 8777.87,1433.4 8866.74,1410.34C8958.44,1386.54 9037.1,1227.14 9151.63,1193.77C9286.95,1154.34 9504.53,1197.96 9678.66,1173.75C9861.74,1148.3 10074.7,1033.99 10250.1,1041.05C10420.6,1047.91 10566.1,1172.81 10731.2,1216.13C10918.8,1265.38 11221.7,1277.83 11375.8,1336.54C11489.1,1379.68 11534.7,1564.08 11655.8,1568.41C11798.5,1573.52 12097.5,1375.29 12232,1367.2C12324.1,1361.66 12371.3,1508.27 12462.8,1519.86C12571,1533.57 12755,1393.78 12881.6,1449.49C13070.4,1532.54 13250.1,1666.9 13284,1888.4C13310,2058.4 12132.6,2018.74 11554.9,2010.32C10921.9,2001.09 9992.35,1851.59 9485.61,1833.03C9161.36,1821.15 8705.06,1951.12 8514.45,1898.92C8380.56,1862.26 8327.48,1613.59 8341.97,1519.86Z" style="fill:#c6b7be;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M8604.76,1340.59C8628.74,1336.14 8736.78,1366.09 8687.3,1375.27C8623.07,1387.19 8601.04,1363.41 8566.41,1375.27C8531.78,1387.14 8532.43,1433.65 8499.28,1418.41C8466.13,1403.18 8448.22,1397.69 8431.03,1427.57C8413.85,1457.45 8377.1,1471.41 8387.3,1449.58C8389.89,1444.03 8419.32,1416.73 8467.64,1391.43C8510.9,1368.78 8567.32,1347.52 8604.76,1340.59Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M9219.68,1191.18C9273.74,1187.01 9417.94,1172.01 9321.39,1224.3C9263.95,1255.4 9235.13,1212.43 9200.51,1224.3C9165.88,1236.16 9166.53,1282.67 9133.38,1267.43C9100.22,1252.2 9090.25,1252.21 9073.07,1282.09C9055.88,1311.96 9001.09,1324.05 9016.24,1305.32C9087.9,1216.77 9155.07,1196.15 9219.68,1191.18Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M10156.2,1057.49C10223.6,1041.59 10386,1043.41 10331,1088.46C10280.4,1129.85 10244.7,1076.6 10210.1,1088.46C10175.4,1100.33 10176.1,1146.84 10142.9,1131.6C10109.8,1116.37 10099.8,1116.38 10082.6,1146.25C10065.5,1176.13 10021.1,1193.12 10025.8,1169.49C10030.1,1148.15 10076.4,1076.32 10156.2,1057.49Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M9923.84,1115.17C9957.87,1097.59 10083.3,1054.88 10044.3,1088.41C9999.38,1127.04 10007.6,1159.53 9980.15,1169.5C9950.43,1180.27 9910.06,1186.57 9901.66,1171.56C9893.26,1156.55 9908.42,1123.14 9923.84,1115.17Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M10407.8,1138.35C10415.4,1136.29 10420,1123.49 10424.3,1121.49C10434.9,1116.47 10449.1,1114.02 10451.6,1122.08C10454,1130.13 10444.2,1159.57 10440,1155.16C10428.3,1142.6 10397,1162.79 10399.1,1174.02C10401.6,1187.68 10272.4,1192.51 10306.3,1178.33C10325.8,1170.18 10337.9,1142.81 10360.1,1138.93C10377.8,1135.85 10397.1,1141.26 10407.8,1138.35Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M11400.5,1361.43C11418.3,1374.36 11558.9,1498.07 11455.8,1474.12C11392.1,1459.34 11402.1,1405.55 11369,1389.96C11335.9,1374.37 11303.9,1408.21 11290.8,1374.19C11277.6,1340.17 11270.4,1333.23 11237.3,1342.72C11204.1,1352.2 11160.5,1333.51 11180.3,1319.84C11198.2,1307.49 11334.1,1313.31 11400.5,1361.43Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M12109.2,1413.6C12103.2,1441.4 12165.1,1419.44 12205.5,1458C12235.2,1486.27 12250.5,1399.7 12277.5,1417.71C12305.4,1436.41 12345,1386.08 12218.2,1375.74C12190.3,1373.46 12111.1,1405.15 12109.2,1413.6Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M12701.6,1475.94C12695.6,1503.74 12842.9,1462.04 12869.9,1480.05C12897.8,1498.74 12937.4,1448.41 12810.6,1438.08C12782.7,1435.8 12703.5,1467.49 12701.6,1475.94Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
        </g>
        <circle id="_-spinningBar-" serif:id="{spinningBar}" cx="3267.08" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-1" serif:id="{spinningBar}" cx="3497.71" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-2" serif:id="{spinningBar}" cx="3728.35" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-3" serif:id="{spinningBar}" cx="3958.99" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-4" serif:id="{spinningBar}" cx="4189.63" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-5" serif:id="{spinningBar}" cx="4420.27" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-6" serif:id="{spinningBar}" cx="4650.9" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-7" serif:id="{spinningBar}" cx="4881.54" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-8" serif:id="{spinningBar}" cx="5112.18" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-9" serif:id="{spinningBar}" cx="5342.82" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-10" serif:id="{spinningBar}" cx="5475.56" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-11" serif:id="{spinningBar}" cx="5706.2" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-12" serif:id="{spinningBar}" cx="5936.84" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-13" serif:id="{spinningBar}" cx="6167.48" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-14" serif:id="{spinningBar}" cx="6398.11" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-15" serif:id="{spinningBar}" cx="6628.75" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <g id="platform-group" serif:id="platform group">
            <rect id="_-platform-" serif:id="{platform}" x="2074.4" y="810.642" width="270.959" height="61.322" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:1.2px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
            <path id="_-patrolRoute-" serif:id="{patrolRoute}" d="M2209.88,810.642L2209.88,298.793" style="fill:none;stroke:#0f0f1b;stroke-width:2.5px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
        </g>
        <g id="platform-group1" serif:id="platform group">
            <rect id="_-platform-1" serif:id="{platform}" x="2966.45" y="1855.98" width="270.959" height="61.322" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:1.2px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
            <path id="_-patrolRoute-1" serif:id="{patrolRoute}" d="M3076.88,1886.77L3667.97,1758.2" style="fill:none;stroke:#0f0f1b;stroke-width:2.5px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
        </g>
        <g id="platform-group2" serif:id="platform group">
            <rect id="_-platform-2" serif:id="{platform}" x="1760.56" y="1353.15" width="270.959" height="61.322" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:1.2px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
            <path id="_-patrolRoute-2" serif:id="{patrolRoute}" d="M1896.04,1353.15L1896.04,841.303" style="fill:none;stroke:#0f0f1b;stroke-width:2.5px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
        </g>
        <g id="_-parallax-back-" serif:id="{parallax-back}">
            <path d="M802.733,501.04C731.051,507.565 626.759,419.967 608.667,366.208C564.539,235.087 486.69,39.582 520.789,-110.959C557.16,-271.532 793.06,-358.457 921.764,-389.74C1452.93,-518.846 3090.64,-319.291 3822.87,-287.153C4320.73,-265.302 5066.81,-298.058 5315.16,-196.915C5474.65,-131.962 5470.7,250.576 5312.97,319.704C5223.07,359.109 5070.63,399.076 4888.01,434.872C4863.9,439.598 4825.59,397.406 4800.51,401.976C4787.95,404.262 4788.97,453.371 4776.2,455.614C4388.8,523.669 3905.9,571.213 3587.81,560.162C3557.02,559.092 3536.09,531.894 3505.67,528.246C3484.81,525.744 3454.38,547.425 3433.67,543.86C3085.95,483.983 2758.71,282.695 2410.63,227.537C2385.61,223.572 2369.29,195.922 2344.03,193.574C2320.23,191.361 2287.5,214.354 2263.47,213.762C2037.62,208.201 1723.29,286.617 1427.66,363.355C1405.89,369.007 1384.22,347.63 1362.69,353.229C1334.65,360.524 1306.85,394.764 1279.39,401.836C1095.94,449.082 927.638,489.67 802.733,501.04Z" style="fill:#51556e;stroke:#51556b;stroke-width:5px;"/>
            <g id="japanese-skies" serif:id="japanese skies">
                <g>
                    <path d="M5060.09,174.884C5060.09,165.86 5052.77,158.534 5043.74,158.534L4826.52,158.534C4817.5,158.534 4810.17,165.86 4810.17,174.884C4810.17,183.907 4817.5,191.233 4826.52,191.233L5043.74,191.233C5052.77,191.233 5060.09,183.907 5060.09,174.884Z" style="fill:#565a75;"/>
                    <path d="M4916.66,225.211L4853.82,225.211C4862.85,225.211 4870.18,217.312 4870.18,207.583C4870.18,197.853 4862.85,189.954 4853.82,189.954L4916.66,189.954C4907.64,189.954 4900.31,197.853 4900.31,207.583C4900.31,217.312 4907.64,225.211 4916.66,225.211Z" style="fill:#565a75;"/>
                    <path d="M5117.47,240.282C5117.47,231.258 5110.15,223.932 5101.12,223.932L4769.14,223.932C4760.12,223.932 4752.79,231.258 4752.79,240.282C4752.79,249.305 4760.12,256.631 4769.14,256.631L5101.12,256.631C5110.15,256.631 5117.47,249.305 5117.47,240.282Z" style="fill:#565a75;"/>
                </g>
                <g>
                    <path d="M2630.74,207.583C2630.74,198.559 2623.41,191.233 2614.39,191.233L2397.17,191.233C2388.14,191.233 2380.82,198.559 2380.82,207.583C2380.82,216.606 2388.14,223.932 2397.17,223.932L2614.39,223.932C2623.41,223.932 2630.74,216.606 2630.74,207.583Z" style="fill:#565a75;"/>
                    <path d="M2487.31,257.91L2424.47,257.91C2433.49,257.91 2440.82,250.011 2440.82,240.282C2440.82,230.552 2433.49,222.653 2424.47,222.653L2487.31,222.653C2478.28,222.653 2470.96,230.552 2470.96,240.282C2470.96,250.011 2478.28,257.91 2487.31,257.91Z" style="fill:#565a75;"/>
                    <path d="M2522.13,272.981C2522.13,263.957 2514.8,256.631 2505.78,256.631L2339.79,256.631C2330.76,256.631 2323.44,263.957 2323.44,272.981C2323.44,282.004 2330.76,289.33 2339.79,289.33L2505.78,289.33C2514.8,289.33 2522.13,282.004 2522.13,272.981Z" style="fill:#565a75;"/>
                    <path d="M2440.82,338.378C2440.82,329.355 2433.49,322.029 2424.47,322.029L2339.79,322.029C2330.76,322.029 2323.44,329.355 2323.44,338.378C2323.44,347.402 2330.76,354.728 2339.79,354.728L2424.47,354.728C2433.49,354.728 2440.82,347.402 2440.82,338.378Z" style="fill:#565a75;"/>
                </g>
                <g>
                    <path d="M3633.31,33.298C3633.31,24.275 3640.64,16.949 3649.66,16.949L3866.88,16.949C3875.9,16.949 3883.23,24.275 3883.23,33.298C3883.23,42.322 3875.9,49.648 3866.88,49.648L3649.66,49.648C3640.64,49.648 3633.31,42.322 3633.31,33.298Z" style="fill:#565a75;"/>
                    <path d="M3776.74,83.626L3839.58,83.626C3830.55,83.626 3823.23,75.727 3823.23,65.997C3823.23,56.268 3830.55,48.369 3839.58,48.369L3776.74,48.369C3785.76,48.369 3793.09,56.268 3793.09,65.997C3793.09,75.727 3785.76,83.626 3776.74,83.626Z" style="fill:#565a75;"/>
                    <path d="M3741.92,98.696C3741.92,89.673 3749.25,82.347 3758.27,82.347L3924.26,82.347C3933.28,82.347 3940.61,89.673 3940.61,98.696C3940.61,107.72 3933.28,115.046 3924.26,115.046L3758.27,115.046C3749.25,115.046 3741.92,107.72 3741.92,98.696Z" style="fill:#565a75;"/>
                </g>
                <g>
                    <path d="M4320.44,372.635L4383.28,372.635C4374.25,372.635 4366.93,364.736 4366.93,355.007C4366.93,345.277 4374.25,337.378 4383.28,337.378L4320.44,337.378C4329.46,337.378 4336.79,345.277 4336.79,355.007C4336.79,364.736 4329.46,372.635 4320.44,372.635Z" style="fill:#565a75;"/>
                    <path d="M4263.17,322.029C4263.17,313.005 4270.49,305.68 4279.52,305.68L4415.52,305.68C4424.55,305.68 4431.87,313.005 4431.87,322.029C4431.87,331.052 4424.55,338.378 4415.52,338.378L4279.52,338.378C4270.49,338.378 4263.17,331.052 4263.17,322.029Z" style="fill:#565a75;"/>
                    <path d="M4263.17,386.985C4263.17,377.961 4270.49,370.635 4279.52,370.635L4610.95,370.635C4619.98,370.635 4627.3,377.961 4627.3,386.985C4627.3,396.008 4619.98,403.334 4610.95,403.334L4279.52,403.334C4270.49,403.334 4263.17,396.008 4263.17,386.985Z" style="fill:#565a75;"/>
                </g>
            </g>
            <path d="M5285.59,762.207C5213.9,768.732 5109.61,681.134 5091.52,627.375C5070.4,564.612 5041.55,487.099 5020.95,406.826C4998.52,319.395 4985.87,228.691 5003.64,150.208C5040.01,-10.365 5275.91,-97.29 5404.62,-128.573C5935.78,-257.679 7573.49,-58.124 8305.72,-25.986C8803.58,-4.135 9549.67,-36.891 9798.02,64.252C9957.51,129.205 9953.55,511.743 9795.83,580.871C9705.92,620.276 9553.49,660.243 9370.87,696.039C9346.76,700.765 9308.45,658.573 9283.36,663.143C9270.81,665.429 9271.82,714.538 9259.06,716.781C8871.66,784.836 8388.75,832.38 8070.66,821.329C8039.87,820.259 8018.94,793.061 7988.53,789.413C7967.67,786.911 7937.23,808.592 7916.53,805.027C7568.81,745.15 7241.56,543.862 6893.49,488.704C6868.46,484.739 6852.14,457.089 6826.89,454.741C6803.08,452.528 6770.36,475.521 6746.32,474.929C6520.48,469.368 6206.14,547.784 5910.52,624.522C5888.74,630.174 5867.07,608.797 5845.55,614.396C5817.51,621.691 5789.7,655.931 5762.24,663.003C5578.79,710.249 5410.49,750.837 5285.59,762.207Z" style="fill:#51556e;stroke:#51556b;stroke-width:5px;"/>
        </g>
        <path id="ground--collision-" serif:id="ground {collision}" d="M2705.3,1754.06C3114.16,1798.41 3416.22,3029.69 3420.25,3231.18C3424.27,3432.67 -82.259,3074.6 -929.05,3111.34C-1775.84,3148.08 -1329.14,1608.94 -1446.73,890.132C-1564.33,171.325 501.606,367.216 568.068,403.334C634.531,439.452 616.155,652.319 587.27,695.633C558.386,738.947 561.823,880.542 648.299,963.005C734.774,1045.47 685.508,1156.09 512.388,1313.44C291.028,1514.63 361.738,1747.99 512.388,1770.34C692.668,1797.09 891.485,1566.33 1594.07,1473.95C2296.65,1381.57 2126.82,1691.31 2705.3,1754.06Z" style="fill:#565a75;stroke:#0f0f1b;stroke-width:15px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
        <path id="ground--collision-1" serif:id="ground {collision}" d="M7180.86,1754.06C6771.99,1798.41 6469.93,3029.69 6465.91,3231.18C6461.89,3432.67 9968.41,3074.6 10815.2,3111.34C11662,3148.08 11215.3,1608.94 11332.9,890.132C11450.5,171.325 9384.55,367.216 9318.09,403.334C9251.62,439.452 9270,652.319 9298.89,695.633C9327.77,738.947 9324.33,880.542 9237.86,963.005C9151.38,1045.47 9200.65,1156.09 9373.77,1313.44C9595.13,1514.63 9524.42,1747.98 9373.77,1770.34C9193.49,1797.1 8802.25,1965.83 8292.09,1474C8284.72,1466.89 8191.17,1471.78 7855.46,1474C7616.17,1475.58 7588.1,1709.88 7180.86,1754.06Z" style="fill:#565a75;stroke:#0f0f1b;stroke-width:15px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
        <g id="japanese-skies1" serif:id="japanese skies">
            <g>
                <path d="M8888.63,174.884C8888.63,165.86 8881.31,158.534 8872.28,158.534L8655.06,158.534C8646.04,158.534 8638.71,165.86 8638.71,174.884C8638.71,183.907 8646.04,191.233 8655.06,191.233L8872.28,191.233C8881.31,191.233 8888.63,183.907 8888.63,174.884Z" style="fill:#565a75;"/>
                <path d="M8745.2,225.211L8682.37,225.211C8691.39,225.211 8698.72,217.312 8698.72,207.583C8698.72,197.853 8691.39,189.954 8682.37,189.954L8745.2,189.954C8736.18,189.954 8728.85,197.853 8728.85,207.583C8728.85,217.312 8736.18,225.211 8745.2,225.211Z" style="fill:#565a75;"/>
                <path d="M8946.01,240.282C8946.01,231.258 8938.69,223.932 8929.66,223.932L8597.68,223.932C8588.66,223.932 8581.33,231.258 8581.33,240.282C8581.33,249.305 8588.66,256.631 8597.68,256.631L8929.66,256.631C8938.69,256.631 8946.01,249.305 8946.01,240.282Z" style="fill:#565a75;"/>
            </g>
            <g>
                <path d="M6459.28,207.583C6459.28,198.559 6451.95,191.233 6442.93,191.233L6225.71,191.233C6216.69,191.233 6209.36,198.559 6209.36,207.583C6209.36,216.606 6216.69,223.932 6225.71,223.932L6442.93,223.932C6451.95,223.932 6459.28,216.606 6459.28,207.583Z" style="fill:#565a75;"/>
                <path d="M6315.85,257.91L6253.01,257.91C6262.04,257.91 6269.36,250.011 6269.36,240.282C6269.36,230.552 6262.04,222.653 6253.01,222.653L6315.85,222.653C6306.83,222.653 6299.5,230.552 6299.5,240.282C6299.5,250.011 6306.83,257.91 6315.85,257.91Z" style="fill:#565a75;"/>
                <path d="M6350.67,272.981C6350.67,263.957 6343.34,256.631 6334.32,256.631L6168.33,256.631C6159.31,256.631 6151.98,263.957 6151.98,272.981C6151.98,282.004 6159.31,289.33 6168.33,289.33L6334.32,289.33C6343.34,289.33 6350.67,282.004 6350.67,272.981Z" style="fill:#565a75;"/>
                <path d="M6269.36,338.378C6269.36,329.355 6262.04,322.029 6253.01,322.029L6168.33,322.029C6159.31,322.029 6151.98,329.355 6151.98,338.378C6151.98,347.402 6159.31,354.728 6168.33,354.728L6253.01,354.728C6262.04,354.728 6269.36,347.402 6269.36,338.378Z" style="fill:#565a75;"/>
            </g>
            <g>
                <path d="M7461.85,33.298C7461.85,24.275 7469.18,16.949 7478.2,16.949L7695.42,16.949C7704.45,16.949 7711.77,24.275 7711.77,33.298C7711.77,42.322 7704.45,49.648 7695.42,49.648L7478.2,49.648C7469.18,49.648 7461.85,42.322 7461.85,33.298Z" style="fill:#565a75;"/>
                <path d="M7605.28,83.626L7668.12,83.626C7659.1,83.626 7651.77,75.727 7651.77,65.997C7651.77,56.268 7659.1,48.369 7668.12,48.369L7605.28,48.369C7614.31,48.369 7621.63,56.268 7621.63,65.997C7621.63,75.727 7614.31,83.626 7605.28,83.626Z" style="fill:#565a75;"/>
                <path d="M7570.46,98.696C7570.46,89.673 7577.79,82.347 7586.81,82.347L7752.8,82.347C7761.83,82.347 7769.15,89.673 7769.15,98.696C7769.15,107.72 7761.83,115.046 7752.8,115.046L7586.81,115.046C7577.79,115.046 7570.46,107.72 7570.46,98.696Z" style="fill:#565a75;"/>
            </g>
            <g>
                <path d="M8148.98,372.635L8211.82,372.635C8202.8,372.635 8195.47,364.736 8195.47,355.007C8195.47,345.277 8202.8,337.378 8211.82,337.378L8148.98,337.378C8158.01,337.378 8165.33,345.277 8165.33,355.007C8165.33,364.736 8158.01,372.635 8148.98,372.635Z" style="fill:#565a75;"/>
                <path d="M8091.71,322.029C8091.71,313.005 8099.04,305.68 8108.06,305.68L8244.07,305.68C8253.09,305.68 8260.42,313.005 8260.42,322.029C8260.42,331.052 8253.09,338.378 8244.07,338.378L8108.06,338.378C8099.04,338.378 8091.71,331.052 8091.71,322.029Z" style="fill:#565a75;"/>
                <path d="M8091.71,386.985C8091.71,377.961 8099.04,370.635 8108.06,370.635L8439.5,370.635C8448.52,370.635 8455.84,377.961 8455.84,386.985C8455.84,396.008 8448.52,403.334 8439.5,403.334L8108.06,403.334C8099.04,403.334 8091.71,396.008 8091.71,386.985Z" style="fill:#565a75;"/>
            </g>
        </g>
        <path id="foreground-shadow--parallax-front-" serif:id="foreground-shadow {parallax-front}" d="M8084.42,3170.02C8072.81,3083.6 4851.87,1934.54 4590.56,1848.31C4575.35,1843.29 4549.16,1876.85 4534.58,1872.05C4520.89,1867.54 4518.77,1824.65 4505.67,1820.4C4394.2,1784.24 4304.86,1758.6 4249.4,1763.47C4094.68,1777.07 3787.87,2146.69 3383.1,2214.71C3362.25,2218.22 3343.95,2246.66 3323.36,2250.06C3302.61,2253.5 3279.58,2231.9 3259.18,2235.21C3214.8,2242.41 3171.37,2249.29 3129.36,2255.74C2676.97,2325.1 1983.61,2331.66 1625.5,2285.58C1527.38,2272.95 1433.03,2241.54 1342.29,2199.32C1318.1,2188.05 1258.35,2227.3 1234.67,2214.65C1206.74,2199.74 1214.98,2132.69 1187.75,2116.3C1116.38,2073.34 1047.4,2026.17 980.728,1979.25C950.138,1957.73 796.143,1854.39 707.148,1793.46C673.817,1770.64 631.054,1807.03 615.371,1795.75C575.15,1766.81 604.284,1727.83 561.659,1694.8C237.156,1443.32 -165.881,1042.46 -283.505,540.629C-419.894,-41.262 -1342.15,155.441 -1345.45,194.804C-1348.55,231.839 -1720.11,3311.14 -1715.31,3468.69C-1709.95,3644.35 8096.04,3256.45 8084.42,3170.02Z" style="fill:#313343;stroke:#313343;stroke-width:5px;"/>
        <path id="foreground-shadow--parallax-front-1" serif:id="foreground-shadow {parallax-front}" d="M11109.4,3807.66C11105.7,3931.32 7115.75,3984.12 5281.24,3463.2C4509.7,3244.11 4726.22,2212.8 4803.58,2187.28C4818.79,2182.26 4844.98,2215.82 4859.56,2211.02C4873.25,2206.51 4875.37,2163.62 4888.47,2159.37C4999.94,2123.21 5089.28,2097.57 5144.74,2102.44C5299.46,2116.04 5449.06,1846.2 5853.83,1914.23C5874.67,1917.73 5892.97,1946.17 5913.56,1949.58C5934.31,1953.01 5957.35,1931.41 5977.75,1934.72C6022.13,1941.93 6065.56,1948.81 6107.57,1955.25C6559.96,2024.61 7253.32,2031.17 7611.42,1985.09C7709.55,1972.47 7803.9,1941.06 7894.63,1898.83C7918.83,1887.57 7978.57,1926.82 8002.26,1914.17C8030.19,1899.25 8021.95,1832.2 8049.18,1815.82C8120.55,1772.86 8189.52,1725.69 8256.2,1678.77C8286.79,1657.24 8861.96,1551.93 8950.95,1491C8984.28,1468.18 9027.05,1504.57 9042.73,1493.29C9082.95,1464.36 9053.82,1425.38 9096.44,1392.34C9420.94,1140.87 9560.02,1381.43 9677.64,879.598C9814.03,297.707 11532.4,189.264 11535.7,228.626C11538.8,265.662 11114.3,3650.11 11109.4,3807.66Z" style="fill:#313343;stroke:#313343;stroke-width:5px;"/>
        <circle id="_-door---to-level0---goal-" serif:id="{door} {to-level0} {goal}" cx="9046.97" cy="1743.63" r="30.661" style="fill:#f0e;"/>
        <circle id="_-timeCapsule-" serif:id="{timeCapsule}" cx="2323.44" cy="287.292" r="30.661" style="fill:#00f683;"/>
        <circle id="_-timeCapsule-1" serif:id="{timeCapsule}" cx="4823.54" cy="948.855" r="30.661" style="fill:#00f683;"/>
        <circle id="start" cx="951.792" cy="1484.02" r="30.661" style="fill:#f0e;"/>
        <g id="platform-group3" serif:id="platform group">
            <rect id="_-platform-3" serif:id="{platform}" x="3667.97" y="1856.11" width="270.959" height="61.322" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:1.2px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
            <path id="_-patrolRoute-3" serif:id="{patrolRoute}" d="M3803.45,1886.77L4298.89,1758.2" style="fill:none;stroke:#0f0f1b;stroke-width:2.5px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
        </g>
        <g id="platform-group4" serif:id="platform group">
            <rect id="_-platform-4" serif:id="{platform}" x="4298.89" y="1603.14" width="270.959" height="61.322" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:1.2px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
            <path id="_-patrolRoute-4" serif:id="{patrolRoute}" d="M4434.36,1633.8C4724.6,1798.69 5029.74,1799.98 5344.59,1694.58" style="fill:none;stroke:#0f0f1b;stroke-width:2.81px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
        </g>
        <g id="platform-group5" serif:id="platform group">
            <rect id="_-platform-5" serif:id="{platform}" x="5255.98" y="1835.55" width="270.959" height="61.322" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:1.2px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
            <path id="_-patrolRoute-5" serif:id="{patrolRoute}" d="M5391.46,1866.22C5673.54,1749.43 5976.61,1679.68 6301.68,1926.99" style="fill:none;stroke:#0f0f1b;stroke-width:2.81px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
        </g>
        <g id="platform-group6" serif:id="platform group">
            <rect id="_-platform-6" serif:id="{platform}" x="5964.19" y="1697.06" width="270.959" height="61.322" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:1.2px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
            <path id="_-patrolRoute-6" serif:id="{patrolRoute}" d="M6099.67,1727.72C6381.75,1610.94 6684.82,1541.19 7009.89,1788.5" style="fill:none;stroke:#0f0f1b;stroke-width:2.81px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
        </g>
        <g id="platform-group7" serif:id="platform group">
            <rect id="_-platform-7" serif:id="{platform}" x="4792.88" y="1560.23" width="270.959" height="61.322" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:1.2px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
            <path id="_-patrolRoute-7" serif:id="{patrolRoute}" d="M4928.36,1590.9C5028.2,1549.56 5219.21,1601.84 5235.8,1496.54C5258.59,1351.95 4903.56,1134.52 4888.03,1319.1" style="fill:none;stroke:#0f0f1b;stroke-width:2.81px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
        </g>
        <g id="platform-group8" serif:id="platform group">
            <rect id="_-platform-8" serif:id="{platform}" x="4743.91" y="1353.15" width="270.959" height="61.322" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:1.2px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
            <path id="_-patrolRoute-8" serif:id="{patrolRoute}" d="M4879.39,1383.81C4779.55,1342.48 4588.54,1394.76 4571.95,1289.46C4549.16,1144.87 4904.19,927.438 4919.72,1112.01" style="fill:none;stroke:#0f0f1b;stroke-width:2.81px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
        </g>
        <rect id="_-box-" serif:id="{box}" x="8147.13" y="1375.57" width="79.317" height="79.317" style="fill:none;stroke:#0f0f1b;stroke-width:5px;"/>
        <rect id="_-box-1" serif:id="{box}" x="8147.13" y="1290.03" width="79.317" height="79.317" style="fill:none;stroke:#0f0f1b;stroke-width:5px;"/>
        <rect id="_-box-2" serif:id="{box}" x="8147.13" y="1204.77" width="79.317" height="79.317" style="fill:none;stroke:#0f0f1b;stroke-width:5px;"/>
        <rect id="_-box-3" serif:id="{box}" x="8147.13" y="1119.52" width="79.317" height="79.317" style="fill:none;stroke:#0f0f1b;stroke-width:5px;"/>
        <rect id="_-box-4" serif:id="{box}" x="8147.13" y="1033.98" width="79.317" height="79.317" style="fill:none;stroke:#0f0f1b;stroke-width:5px;"/>
        <rect id="_-box-5" serif:id="{box}" x="8147.13" y="948.73" width="79.317" height="79.317" style="fill:none;stroke:#0f0f1b;stroke-width:5px;"/>
        <rect id="_-box-6" serif:id="{box}" x="8147.13" y="863.188" width="79.317" height="79.317" style="fill:none;stroke:#0f0f1b;stroke-width:5px;"/>
        <rect id="_-box-7" serif:id="{box}" x="8147.13" y="777.646" width="79.317" height="79.317" style="fill:none;stroke:#0f0f1b;stroke-width:5px;"/>
        <rect id="_-box-8" serif:id="{box}" x="8147.13" y="692.394" width="79.317" height="79.317" style="fill:none;stroke:#0f0f1b;stroke-width:5px;"/>
    </g>
</svg>

'''
'''--- public/assets/toki/levels/level3.svg ---
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="14934px" height="5410px" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:1;">
    <rect id="level3" x="0" y="0" width="14933.2" height="5409.21" style="fill:#565a75;"/>
    <clipPath id="_clip1">
        <rect id="level31" serif:id="level3" x="0" y="0" width="14933.2" height="5409.21"/>
    </clipPath>
    <g clip-path="url(#_clip1)">
        <g id="mountain--parallax-back-" serif:id="mountain {parallax-back}">
            <path d="M1167.94,1875.97C1182.43,1782.24 1339.91,1710.91 1427.37,1692.65C1514.83,1674.4 1603.86,1789.51 1692.72,1766.45C1784.42,1742.66 1863.08,1583.26 1977.61,1549.88C2112.93,1510.45 2330.51,1554.08 2504.64,1529.87C2687.72,1504.41 2900.67,1390.1 3076.09,1397.16C3246.6,1404.03 3392.1,1528.92 3557.15,1572.24C3744.78,1621.49 4047.72,1633.94 4201.83,1692.65C4315.07,1735.8 4360.71,1920.19 4481.81,1924.53C4624.5,1929.64 4923.51,1731.41 5058,1723.31C5150.06,1717.78 5197.25,1864.38 5288.74,1875.97C5397.01,1889.68 5581.01,1749.89 5707.63,1805.6C5896.4,1888.65 6076.04,2023.02 6109.94,2244.52C6135.96,2414.51 4958.62,2374.85 4380.9,2366.43C3747.84,2357.2 2818.33,2207.7 2311.59,2189.14C1987.34,2177.26 1531.04,2307.23 1340.43,2255.04C1206.54,2218.37 1153.45,1969.7 1167.94,1875.97Z" style="fill:#c6b7be;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M1430.74,1696.7C1454.72,1692.26 1562.76,1722.21 1513.28,1731.39C1449.05,1743.3 1427.02,1719.52 1392.39,1731.39C1357.76,1743.25 1358.41,1789.76 1325.26,1774.53C1292.11,1759.29 1274.2,1753.81 1257.01,1783.68C1239.83,1813.56 1203.08,1827.53 1213.28,1805.7C1215.87,1800.14 1245.3,1772.85 1293.62,1747.55C1336.88,1724.9 1393.3,1703.64 1430.74,1696.7Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M2045.66,1547.29C2099.72,1543.12 2243.93,1528.12 2147.37,1580.41C2089.93,1611.52 2061.11,1568.54 2026.49,1580.41C1991.86,1592.28 1992.51,1638.78 1959.36,1623.55C1926.2,1608.31 1916.23,1608.32 1899.05,1638.2C1881.86,1668.08 1827.07,1680.17 1842.22,1661.44C1913.88,1572.89 1981.05,1552.27 2045.66,1547.29Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M2982.18,1413.61C3049.6,1397.7 3211.96,1399.53 3156.94,1444.58C3106.4,1485.96 3070.68,1432.71 3036.05,1444.58C3001.43,1456.44 3002.07,1502.95 2968.92,1487.72C2935.77,1472.48 2925.79,1472.49 2908.61,1502.37C2891.43,1532.25 2847.07,1549.23 2851.79,1525.61C2856.05,1504.26 2902.36,1432.44 2982.18,1413.61Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M2749.82,1471.29C2783.85,1453.71 2909.31,1411 2870.3,1444.53C2825.36,1483.15 2833.62,1515.64 2806.12,1525.61C2776.41,1536.39 2736.04,1542.68 2727.64,1527.67C2719.24,1512.66 2734.4,1479.25 2749.82,1471.29Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M3233.74,1494.47C3241.34,1492.4 3246.02,1479.61 3250.27,1477.6C3260.91,1472.58 3275.11,1470.14 3277.54,1478.19C3279.96,1486.25 3270.13,1515.68 3266.02,1511.27C3254.3,1498.72 3222.96,1518.9 3225.03,1530.13C3227.55,1543.79 3098.4,1548.62 3132.27,1534.45C3151.74,1526.3 3163.85,1498.93 3186.13,1495.04C3203.83,1491.96 3223.06,1497.38 3233.74,1494.47Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M4226.45,1717.54C4244.31,1730.48 4384.88,1854.18 4281.74,1830.23C4218.11,1815.46 4228.08,1761.66 4194.96,1746.07C4161.84,1730.48 4129.93,1764.32 4116.74,1730.3C4103.55,1696.29 4096.38,1689.35 4063.24,1698.83C4030.11,1708.32 3986.44,1689.62 4006.27,1675.95C4024.19,1663.6 4160.04,1669.43 4226.45,1717.54Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M4935.2,1769.72C4929.19,1797.52 4991.06,1775.55 5031.52,1814.11C5061.19,1842.39 5076.49,1755.82 5103.45,1773.83C5131.43,1792.52 5171,1742.19 5044.2,1731.86C5016.24,1729.58 4937.03,1761.27 4935.2,1769.72Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M5527.61,1832.05C5521.59,1859.85 5668.9,1818.15 5695.85,1836.16C5723.83,1854.86 5763.4,1804.53 5636.6,1794.19C5608.64,1791.91 5529.43,1823.6 5527.61,1832.05Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
        </g>
        <g id="mountain--parallax-back-1" serif:id="mountain {parallax-back}">
            <path d="M4674.25,2417.13C4688.74,2323.4 4846.21,2252.06 4933.68,2233.81C5021.14,2215.56 5110.16,2330.67 5199.02,2307.61C5290.73,2283.82 5369.39,2124.41 5483.91,2091.04C5619.23,2051.61 5836.81,2095.23 6010.94,2071.03C6194.02,2045.57 6406.97,1931.26 6582.39,1938.32C6752.9,1945.18 6898.4,2070.08 7063.46,2113.4C7251.08,2162.65 7554.02,2175.1 7708.13,2233.81C7821.37,2276.95 7867.01,2461.35 7988.11,2465.68C8130.81,2470.79 8429.82,2272.56 8564.31,2264.47C8656.36,2258.93 8703.56,2405.54 8795.05,2417.13C8903.32,2430.84 9087.31,2291.05 9213.93,2346.76C9402.7,2429.81 9582.34,2564.17 9616.25,2785.68C9642.26,2955.67 8464.92,2916.01 7887.2,2907.59C7254.15,2898.36 6324.64,2748.86 5817.89,2730.3C5493.65,2718.42 5037.35,2848.39 4846.74,2796.19C4712.85,2759.53 4659.76,2510.86 4674.25,2417.13Z" style="fill:#c6b7be;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M4937.04,2237.86C4961.02,2233.41 5069.06,2263.37 5019.58,2272.55C4955.35,2284.46 4933.32,2260.68 4898.69,2272.55C4864.07,2284.41 4864.72,2330.92 4831.56,2315.68C4798.41,2300.45 4780.5,2294.96 4763.32,2324.84C4746.14,2354.72 4709.39,2368.68 4719.58,2346.85C4722.17,2341.3 4751.6,2314 4799.92,2288.71C4843.18,2266.06 4899.61,2244.8 4937.04,2237.86Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M5551.96,2088.45C5606.03,2084.28 5750.23,2069.28 5653.68,2121.57C5596.24,2152.67 5567.42,2109.7 5532.79,2121.57C5498.16,2133.43 5498.81,2179.94 5465.66,2164.71C5432.51,2149.47 5422.53,2149.48 5405.35,2179.36C5388.17,2209.23 5333.37,2221.32 5348.53,2202.6C5420.18,2114.04 5487.35,2093.43 5551.96,2088.45Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M6488.48,1954.77C6555.9,1938.86 6718.26,1940.68 6663.24,1985.74C6612.7,2027.12 6576.98,1973.87 6542.36,1985.74C6507.73,1997.6 6508.38,2044.11 6475.23,2028.88C6442.07,2013.64 6432.1,2013.65 6414.92,2043.53C6397.73,2073.4 6353.37,2090.39 6358.09,2066.76C6362.36,2045.42 6408.66,1973.59 6488.48,1954.77Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M6256.13,2012.44C6290.16,1994.87 6415.61,1952.15 6376.6,1985.69C6331.67,2024.31 6339.93,2056.8 6312.43,2066.77C6282.71,2077.54 6242.34,2083.84 6233.94,2068.83C6225.55,2053.82 6240.7,2020.41 6256.13,2012.44Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M6740.05,2035.63C6747.64,2033.56 6752.32,2020.76 6756.57,2018.76C6767.22,2013.74 6781.41,2011.29 6783.84,2019.35C6786.27,2027.41 6776.44,2056.84 6772.32,2052.43C6760.6,2039.88 6729.26,2060.06 6731.34,2071.29C6733.86,2084.95 6604.7,2089.78 6638.57,2075.61C6658.05,2067.46 6670.15,2040.09 6692.43,2036.2C6710.13,2033.12 6729.36,2038.53 6740.05,2035.63Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M7732.76,2258.7C7750.61,2271.63 7891.19,2395.34 7788.04,2371.39C7724.41,2356.62 7734.38,2302.82 7701.26,2287.23C7668.15,2271.64 7636.23,2305.48 7623.04,2271.46C7609.85,2237.44 7602.68,2230.5 7569.55,2239.99C7536.41,2249.47 7492.74,2230.78 7512.58,2217.11C7530.5,2204.76 7666.35,2210.58 7732.76,2258.7Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M8441.51,2310.88C8435.49,2338.68 8497.37,2316.71 8537.83,2355.27C8567.5,2383.55 8582.8,2296.97 8609.76,2314.99C8637.73,2333.68 8677.31,2283.35 8550.5,2273.01C8522.54,2270.74 8443.34,2302.43 8441.51,2310.88Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M9033.91,2373.21C9027.89,2401.01 9175.2,2359.31 9202.16,2377.32C9230.13,2396.01 9269.71,2345.68 9142.9,2335.35C9114.94,2333.07 9035.74,2364.76 9033.91,2373.21Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
        </g>
        <g id="mountain--parallax-back-2" serif:id="mountain {parallax-back}">
            <path d="M7334.06,1545.27C7348.55,1451.54 7506.03,1380.2 7593.49,1361.95C7680.95,1343.7 7769.97,1458.81 7858.84,1435.75C7950.54,1411.96 8029.2,1252.55 8143.72,1219.18C8279.04,1179.75 8496.62,1223.38 8670.75,1199.17C8853.83,1173.71 9066.78,1059.4 9242.2,1066.46C9412.71,1073.33 9558.22,1198.22 9723.27,1241.54C9910.89,1290.79 10213.8,1303.24 10367.9,1361.95C10481.2,1405.09 10526.8,1589.49 10647.9,1593.82C10790.6,1598.93 11089.6,1400.7 11224.1,1392.61C11316.2,1387.07 11363.4,1533.68 11454.9,1545.27C11563.1,1558.98 11747.1,1419.19 11873.7,1474.9C12062.5,1557.95 12242.2,1692.31 12276.1,1913.82C12302.1,2083.81 11124.7,2044.15 10547,2035.73C9913.96,2026.5 8984.45,1877 8477.7,1858.44C8153.46,1846.56 7697.16,1976.53 7506.55,1924.34C7372.66,1887.67 7319.57,1639 7334.06,1545.27Z" style="fill:#c6b7be;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M7596.85,1366C7620.84,1361.55 7728.88,1391.51 7679.39,1400.68C7615.17,1412.6 7593.13,1388.82 7558.51,1400.68C7523.88,1412.55 7524.53,1459.06 7491.38,1443.83C7458.22,1428.59 7440.31,1423.1 7423.13,1452.98C7405.95,1482.86 7369.2,1496.82 7379.39,1474.99C7381.99,1469.44 7411.41,1442.14 7459.73,1416.85C7503,1394.2 7559.42,1372.93 7596.85,1366Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M8211.77,1216.59C8265.84,1212.42 8410.04,1197.42 8313.49,1249.71C8256.05,1280.82 8227.23,1237.84 8192.6,1249.71C8157.98,1261.57 8158.62,1308.08 8125.47,1292.85C8092.32,1277.61 8082.34,1277.62 8065.16,1307.5C8047.98,1337.37 7993.18,1349.46 8008.34,1330.74C8079.99,1242.18 8147.16,1221.57 8211.77,1216.59Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M9148.29,1082.9C9215.71,1067 9378.08,1068.83 9323.06,1113.88C9272.51,1155.26 9236.8,1102.01 9202.17,1113.88C9167.54,1125.74 9168.19,1172.25 9135.04,1157.02C9101.89,1141.78 9091.91,1141.79 9074.73,1171.66C9057.55,1201.54 9013.18,1218.53 9017.9,1194.9C9022.17,1173.56 9068.48,1101.73 9148.29,1082.9Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M8915.94,1140.58C8949.97,1123.01 9075.42,1080.3 9036.41,1113.83C8991.48,1152.45 8999.74,1184.94 8972.24,1194.91C8942.53,1205.68 8902.15,1211.98 8893.76,1196.97C8885.36,1181.96 8900.51,1148.55 8915.94,1140.58Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M9399.86,1163.77C9407.45,1161.7 9412.13,1148.9 9416.38,1146.9C9427.03,1141.88 9441.23,1139.43 9443.65,1147.49C9446.08,1155.55 9436.25,1184.98 9432.14,1180.57C9420.42,1168.02 9389.08,1188.2 9391.15,1199.43C9393.67,1213.09 9264.52,1217.92 9298.39,1203.75C9317.86,1195.6 9329.96,1168.23 9352.25,1164.34C9369.94,1161.26 9389.17,1166.67 9399.86,1163.77Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M10392.6,1386.84C10410.4,1399.77 10551,1523.48 10447.9,1499.53C10384.2,1484.76 10394.2,1430.96 10361.1,1415.37C10328,1399.78 10296,1433.62 10282.9,1399.6C10269.7,1365.58 10262.5,1358.64 10229.4,1368.13C10196.2,1377.62 10152.6,1358.92 10172.4,1345.25C10190.3,1332.9 10326.2,1338.73 10392.6,1386.84Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M11101.3,1439.02C11095.3,1466.82 11157.2,1444.85 11197.6,1483.41C11227.3,1511.68 11242.6,1425.11 11269.6,1443.13C11297.5,1461.82 11337.1,1411.49 11210.3,1401.15C11182.4,1398.88 11103.1,1430.57 11101.3,1439.02Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M11693.7,1501.35C11687.7,1529.15 11835,1487.45 11862,1505.46C11889.9,1524.15 11929.5,1473.82 11802.7,1463.49C11774.8,1461.21 11695.6,1492.9 11693.7,1501.35Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
        </g>
        <circle id="_-spinningBar-" serif:id="{spinningBar}" cx="3267.08" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-1" serif:id="{spinningBar}" cx="3034.43" cy="1369.45" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-2" serif:id="{spinningBar}" cx="3469.32" cy="985.925" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-3" serif:id="{spinningBar}" cx="4358.53" cy="1419.54" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-4" serif:id="{spinningBar}" cx="4780.9" cy="1002.73" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-5" serif:id="{spinningBar}" cx="5101.45" cy="1745.13" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-6" serif:id="{spinningBar}" cx="5648.64" cy="1388.88" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-7" serif:id="{spinningBar}" cx="6462.98" cy="1731.74" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-8" serif:id="{spinningBar}" cx="6953.93" cy="1094.71" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-9" serif:id="{spinningBar}" cx="7015.26" cy="1621.69" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-10" serif:id="{spinningBar}" cx="7811.78" cy="1206.33" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-11" serif:id="{spinningBar}" cx="8455.36" cy="891.858" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-12" serif:id="{spinningBar}" cx="3497.71" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-13" serif:id="{spinningBar}" cx="3728.35" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-14" serif:id="{spinningBar}" cx="3958.99" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-15" serif:id="{spinningBar}" cx="4189.63" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-16" serif:id="{spinningBar}" cx="4420.27" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-17" serif:id="{spinningBar}" cx="4650.9" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-18" serif:id="{spinningBar}" cx="4881.54" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-19" serif:id="{spinningBar}" cx="5112.18" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-20" serif:id="{spinningBar}" cx="5342.82" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-21" serif:id="{spinningBar}" cx="5475.56" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-22" serif:id="{spinningBar}" cx="5706.2" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-23" serif:id="{spinningBar}" cx="5936.84" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-24" serif:id="{spinningBar}" cx="6167.48" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-25" serif:id="{spinningBar}" cx="6398.11" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-spinningBar-26" serif:id="{spinningBar}" cx="6628.75" cy="2164.41" r="30.661" style="fill:#ff1717;"/>
        <g id="_-parallax-back-" serif:id="{parallax-back}">
            <path d="M802.733,501.04C731.051,507.565 626.759,419.967 608.667,366.208C564.539,235.087 486.69,39.582 520.789,-110.959C557.16,-271.532 793.06,-358.457 921.764,-389.74C1452.93,-518.846 3090.64,-319.291 3822.87,-287.153C4320.73,-265.302 5066.81,-298.058 5315.16,-196.915C5474.65,-131.962 5470.7,250.576 5312.97,319.704C5223.07,359.109 5070.63,399.076 4888.01,434.872C4863.9,439.598 4825.59,397.406 4800.51,401.976C4787.95,404.262 4788.97,453.371 4776.2,455.614C4388.8,523.669 3905.9,571.213 3587.81,560.162C3557.02,559.092 3536.09,531.894 3505.67,528.246C3484.81,525.744 3454.38,547.425 3433.67,543.86C3085.95,483.983 2758.71,282.695 2410.63,227.537C2385.61,223.572 2369.29,195.922 2344.03,193.574C2320.23,191.361 2287.5,214.354 2263.47,213.762C2037.62,208.201 1723.29,286.617 1427.66,363.355C1405.89,369.007 1384.22,347.63 1362.69,353.229C1334.65,360.524 1306.85,394.764 1279.39,401.836C1095.94,449.082 927.638,489.67 802.733,501.04Z" style="fill:#51556e;stroke:#51556b;stroke-width:5px;"/>
            <g id="japanese-skies" serif:id="japanese skies">
                <g>
                    <path d="M5060.09,174.884C5060.09,165.86 5052.77,158.534 5043.74,158.534L4826.52,158.534C4817.5,158.534 4810.17,165.86 4810.17,174.884C4810.17,183.907 4817.5,191.233 4826.52,191.233L5043.74,191.233C5052.77,191.233 5060.09,183.907 5060.09,174.884Z" style="fill:#565a75;"/>
                    <path d="M4916.66,225.211L4853.82,225.211C4862.85,225.211 4870.18,217.312 4870.18,207.583C4870.18,197.853 4862.85,189.954 4853.82,189.954L4916.66,189.954C4907.64,189.954 4900.31,197.853 4900.31,207.583C4900.31,217.312 4907.64,225.211 4916.66,225.211Z" style="fill:#565a75;"/>
                    <path d="M5117.47,240.282C5117.47,231.258 5110.15,223.932 5101.12,223.932L4769.14,223.932C4760.12,223.932 4752.79,231.258 4752.79,240.282C4752.79,249.305 4760.12,256.631 4769.14,256.631L5101.12,256.631C5110.15,256.631 5117.47,249.305 5117.47,240.282Z" style="fill:#565a75;"/>
                </g>
                <g>
                    <path d="M2630.74,207.583C2630.74,198.559 2623.41,191.233 2614.39,191.233L2397.17,191.233C2388.14,191.233 2380.82,198.559 2380.82,207.583C2380.82,216.606 2388.14,223.932 2397.17,223.932L2614.39,223.932C2623.41,223.932 2630.74,216.606 2630.74,207.583Z" style="fill:#565a75;"/>
                    <path d="M2487.31,257.91L2424.47,257.91C2433.49,257.91 2440.82,250.011 2440.82,240.282C2440.82,230.552 2433.49,222.653 2424.47,222.653L2487.31,222.653C2478.28,222.653 2470.96,230.552 2470.96,240.282C2470.96,250.011 2478.28,257.91 2487.31,257.91Z" style="fill:#565a75;"/>
                    <path d="M2522.13,272.981C2522.13,263.957 2514.8,256.631 2505.78,256.631L2339.79,256.631C2330.76,256.631 2323.44,263.957 2323.44,272.981C2323.44,282.004 2330.76,289.33 2339.79,289.33L2505.78,289.33C2514.8,289.33 2522.13,282.004 2522.13,272.981Z" style="fill:#565a75;"/>
                    <path d="M2440.82,338.378C2440.82,329.355 2433.49,322.029 2424.47,322.029L2339.79,322.029C2330.76,322.029 2323.44,329.355 2323.44,338.378C2323.44,347.402 2330.76,354.728 2339.79,354.728L2424.47,354.728C2433.49,354.728 2440.82,347.402 2440.82,338.378Z" style="fill:#565a75;"/>
                </g>
                <g>
                    <path d="M3633.31,33.298C3633.31,24.275 3640.64,16.949 3649.66,16.949L3866.88,16.949C3875.9,16.949 3883.23,24.275 3883.23,33.298C3883.23,42.322 3875.9,49.648 3866.88,49.648L3649.66,49.648C3640.64,49.648 3633.31,42.322 3633.31,33.298Z" style="fill:#565a75;"/>
                    <path d="M3776.74,83.626L3839.58,83.626C3830.55,83.626 3823.23,75.727 3823.23,65.997C3823.23,56.268 3830.55,48.369 3839.58,48.369L3776.74,48.369C3785.76,48.369 3793.09,56.268 3793.09,65.997C3793.09,75.727 3785.76,83.626 3776.74,83.626Z" style="fill:#565a75;"/>
                    <path d="M3741.92,98.696C3741.92,89.673 3749.25,82.347 3758.27,82.347L3924.26,82.347C3933.28,82.347 3940.61,89.673 3940.61,98.696C3940.61,107.72 3933.28,115.046 3924.26,115.046L3758.27,115.046C3749.25,115.046 3741.92,107.72 3741.92,98.696Z" style="fill:#565a75;"/>
                </g>
                <g>
                    <path d="M4320.44,372.635L4383.28,372.635C4374.25,372.635 4366.93,364.736 4366.93,355.007C4366.93,345.277 4374.25,337.378 4383.28,337.378L4320.44,337.378C4329.46,337.378 4336.79,345.277 4336.79,355.007C4336.79,364.736 4329.46,372.635 4320.44,372.635Z" style="fill:#565a75;"/>
                    <path d="M4263.17,322.029C4263.17,313.005 4270.49,305.68 4279.52,305.68L4415.52,305.68C4424.55,305.68 4431.87,313.005 4431.87,322.029C4431.87,331.052 4424.55,338.378 4415.52,338.378L4279.52,338.378C4270.49,338.378 4263.17,331.052 4263.17,322.029Z" style="fill:#565a75;"/>
                    <path d="M4263.17,386.985C4263.17,377.961 4270.49,370.635 4279.52,370.635L4610.95,370.635C4619.98,370.635 4627.3,377.961 4627.3,386.985C4627.3,396.008 4619.98,403.334 4610.95,403.334L4279.52,403.334C4270.49,403.334 4263.17,396.008 4263.17,386.985Z" style="fill:#565a75;"/>
                </g>
            </g>
            <path d="M5285.59,762.207C5213.9,768.732 5109.61,681.134 5091.52,627.375C5070.4,564.612 5041.55,487.099 5020.95,406.826C4998.52,319.395 4985.87,228.691 5003.64,150.208C5040.01,-10.365 5275.91,-97.29 5404.62,-128.573C5935.78,-257.679 7573.49,-58.124 8305.72,-25.986C8803.58,-4.135 9549.67,-36.891 9798.02,64.252C9957.51,129.205 9953.55,511.743 9795.83,580.871C9705.92,620.276 9553.49,660.243 9370.87,696.039C9346.76,700.765 9308.45,658.573 9283.36,663.143C9270.81,665.429 9271.82,714.538 9259.06,716.781C8871.66,784.836 8388.75,832.38 8070.66,821.329C8039.87,820.259 8018.94,793.061 7988.53,789.413C7967.67,786.911 7937.23,808.592 7916.53,805.027C7568.81,745.15 7241.56,543.862 6893.49,488.704C6868.46,484.739 6852.14,457.089 6826.89,454.741C6803.08,452.528 6770.36,475.521 6746.32,474.929C6520.48,469.368 6206.14,547.784 5910.52,624.522C5888.74,630.174 5867.07,608.797 5845.55,614.396C5817.51,621.691 5789.7,655.931 5762.24,663.003C5578.79,710.249 5410.49,750.837 5285.59,762.207Z" style="fill:#51556e;stroke:#51556b;stroke-width:5px;"/>
        </g>
        <path id="ground--collision-" serif:id="ground {collision}" d="M2705.3,1754.06C3114.16,1798.41 3416.22,3029.69 3420.25,3231.18C3424.27,3432.67 -82.259,3074.6 -929.05,3111.34C-1775.84,3148.08 -1329.14,1608.94 -1446.73,890.132C-1564.33,171.325 693.624,302.26 760.086,338.378C826.548,374.497 503.553,702.884 474.669,746.198C445.784,789.512 462.461,970.616 648.299,963.005C767.69,958.115 685.508,1156.09 512.388,1313.44C291.028,1514.63 361.738,1747.99 512.388,1770.34C692.668,1797.09 891.485,1566.33 1594.07,1473.95C2296.65,1381.57 2126.82,1691.31 2705.3,1754.06Z" style="fill:#565a75;stroke:#000;stroke-width:15px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
        <path id="ground--collision-1" serif:id="ground {collision}" d="M7180.86,1754.06C6771.99,1798.41 6469.93,3029.69 6465.91,3231.18C6461.89,3432.67 9968.41,3074.6 10815.2,3111.34C11662,3148.08 11215.3,1608.94 11332.9,890.132C11450.5,171.325 8747.81,303.225 8724.59,441.205C8712.04,515.798 9192.87,743.822 9221.76,787.136C9250.64,830.449 9255.26,844.789 9237.86,963.005C9179.63,1358.39 8228.94,1890.18 7855.46,1474C7695.64,1295.9 7588.1,1709.88 7180.86,1754.06Z" style="fill:#565a75;stroke:#0f0f1b;stroke-width:15px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
        <g id="japanese-skies1" serif:id="japanese skies">
            <g>
                <path d="M8888.63,174.884C8888.63,165.86 8881.31,158.534 8872.28,158.534L8655.06,158.534C8646.04,158.534 8638.71,165.86 8638.71,174.884C8638.71,183.907 8646.04,191.233 8655.06,191.233L8872.28,191.233C8881.31,191.233 8888.63,183.907 8888.63,174.884Z" style="fill:#565a75;"/>
                <path d="M8745.2,225.211L8682.37,225.211C8691.39,225.211 8698.72,217.312 8698.72,207.583C8698.72,197.853 8691.39,189.954 8682.37,189.954L8745.2,189.954C8736.18,189.954 8728.85,197.853 8728.85,207.583C8728.85,217.312 8736.18,225.211 8745.2,225.211Z" style="fill:#565a75;"/>
                <path d="M8946.01,240.282C8946.01,231.258 8938.69,223.932 8929.66,223.932L8597.68,223.932C8588.66,223.932 8581.33,231.258 8581.33,240.282C8581.33,249.305 8588.66,256.631 8597.68,256.631L8929.66,256.631C8938.69,256.631 8946.01,249.305 8946.01,240.282Z" style="fill:#565a75;"/>
            </g>
            <g>
                <path d="M6459.28,207.583C6459.28,198.559 6451.95,191.233 6442.93,191.233L6225.71,191.233C6216.69,191.233 6209.36,198.559 6209.36,207.583C6209.36,216.606 6216.69,223.932 6225.71,223.932L6442.93,223.932C6451.95,223.932 6459.28,216.606 6459.28,207.583Z" style="fill:#565a75;"/>
                <path d="M6315.85,257.91L6253.01,257.91C6262.04,257.91 6269.36,250.011 6269.36,240.282C6269.36,230.552 6262.04,222.653 6253.01,222.653L6315.85,222.653C6306.83,222.653 6299.5,230.552 6299.5,240.282C6299.5,250.011 6306.83,257.91 6315.85,257.91Z" style="fill:#565a75;"/>
                <path d="M6350.67,272.981C6350.67,263.957 6343.34,256.631 6334.32,256.631L6168.33,256.631C6159.31,256.631 6151.98,263.957 6151.98,272.981C6151.98,282.004 6159.31,289.33 6168.33,289.33L6334.32,289.33C6343.34,289.33 6350.67,282.004 6350.67,272.981Z" style="fill:#565a75;"/>
                <path d="M6269.36,338.378C6269.36,329.355 6262.04,322.029 6253.01,322.029L6168.33,322.029C6159.31,322.029 6151.98,329.355 6151.98,338.378C6151.98,347.402 6159.31,354.728 6168.33,354.728L6253.01,354.728C6262.04,354.728 6269.36,347.402 6269.36,338.378Z" style="fill:#565a75;"/>
            </g>
            <g>
                <path d="M7461.85,33.298C7461.85,24.275 7469.18,16.949 7478.2,16.949L7695.42,16.949C7704.45,16.949 7711.77,24.275 7711.77,33.298C7711.77,42.322 7704.45,49.648 7695.42,49.648L7478.2,49.648C7469.18,49.648 7461.85,42.322 7461.85,33.298Z" style="fill:#565a75;"/>
                <path d="M7605.28,83.626L7668.12,83.626C7659.1,83.626 7651.77,75.727 7651.77,65.997C7651.77,56.268 7659.1,48.369 7668.12,48.369L7605.28,48.369C7614.31,48.369 7621.63,56.268 7621.63,65.997C7621.63,75.727 7614.31,83.626 7605.28,83.626Z" style="fill:#565a75;"/>
                <path d="M7570.46,98.696C7570.46,89.673 7577.79,82.347 7586.81,82.347L7752.8,82.347C7761.83,82.347 7769.15,89.673 7769.15,98.696C7769.15,107.72 7761.83,115.046 7752.8,115.046L7586.81,115.046C7577.79,115.046 7570.46,107.72 7570.46,98.696Z" style="fill:#565a75;"/>
            </g>
            <g>
                <path d="M8148.98,372.635L8211.82,372.635C8202.8,372.635 8195.47,364.736 8195.47,355.007C8195.47,345.277 8202.8,337.378 8211.82,337.378L8148.98,337.378C8158.01,337.378 8165.33,345.277 8165.33,355.007C8165.33,364.736 8158.01,372.635 8148.98,372.635Z" style="fill:#565a75;"/>
                <path d="M8091.71,322.029C8091.71,313.005 8099.04,305.68 8108.06,305.68L8244.07,305.68C8253.09,305.68 8260.42,313.005 8260.42,322.029C8260.42,331.052 8253.09,338.378 8244.07,338.378L8108.06,338.378C8099.04,338.378 8091.71,331.052 8091.71,322.029Z" style="fill:#565a75;"/>
                <path d="M8091.71,386.985C8091.71,377.961 8099.04,370.635 8108.06,370.635L8439.5,370.635C8448.52,370.635 8455.84,377.961 8455.84,386.985C8455.84,396.008 8448.52,403.334 8439.5,403.334L8108.06,403.334C8099.04,403.334 8091.71,396.008 8091.71,386.985Z" style="fill:#565a75;"/>
            </g>
        </g>
        <path id="foreground-shadow--parallax-front-" serif:id="foreground-shadow {parallax-front}" d="M7911.97,3190.82C7900.36,3104.39 4679.42,1955.33 4418.1,1869.1C4402.9,1864.09 4376.71,1897.65 4362.13,1892.85C4348.44,1888.34 4346.32,1845.45 4333.21,1841.2C4221.75,1805.03 4132.41,1779.39 4076.95,1784.27C3922.23,1797.87 3615.41,2167.48 3210.65,2235.51C3189.8,2239.01 3171.5,2267.45 3150.91,2270.86C3130.16,2274.29 3107.12,2252.69 3086.73,2256C3042.35,2263.21 2998.91,2270.09 2956.91,2276.53C2504.51,2345.89 1811.15,2352.45 1453.05,2306.37C1354.92,2293.74 1260.57,2262.34 1169.84,2220.11C1145.64,2208.85 1085.9,2248.09 1062.21,2235.45C1034.29,2220.53 1042.52,2153.48 1015.3,2137.1C943.927,2094.14 874.95,2046.97 808.275,2000.05C777.685,1978.52 623.69,1875.18 534.695,1814.26C501.364,1791.44 458.601,1827.83 442.918,1816.54C402.697,1787.61 431.831,1748.63 389.206,1715.6C64.703,1464.12 -338.333,1063.26 -455.958,561.425C-592.346,-20.466 -1514.6,176.237 -1517.9,215.6C-1521.01,252.635 -1892.57,3331.93 -1887.76,3489.49C-1882.41,3665.15 7923.59,3277.25 7911.97,3190.82Z" style="fill:#313343;stroke:#313343;stroke-width:5px;"/>
        <path id="foreground-shadow--parallax-front-1" serif:id="foreground-shadow {parallax-front}" d="M11109.4,3807.66C11105.7,3931.32 7115.75,3984.12 5281.24,3463.2C4509.7,3244.11 4726.22,2212.8 4803.58,2187.28C4818.79,2182.26 4844.98,2215.82 4859.56,2211.02C4873.25,2206.51 4875.37,2163.62 4888.47,2159.37C4999.94,2123.21 5089.28,2097.57 5144.74,2102.44C5299.46,2116.04 5449.06,1846.2 5853.83,1914.23C5874.67,1917.73 5892.97,1946.17 5913.56,1949.58C5934.31,1953.01 5957.35,1931.41 5977.75,1934.72C6022.13,1941.93 6065.56,1948.81 6107.57,1955.25C6559.96,2024.61 7253.32,2031.17 7611.42,1985.09C7709.55,1972.47 7803.9,1941.06 7894.63,1898.83C7918.83,1887.57 7978.57,1926.82 8002.26,1914.17C8030.19,1899.25 8021.95,1832.2 8049.18,1815.82C8120.55,1772.86 8189.52,1725.69 8256.2,1678.77C8286.79,1657.24 8861.96,1551.93 8950.95,1491C8984.28,1468.18 9027.05,1504.57 9042.73,1493.29C9082.95,1464.36 9053.82,1425.38 9096.44,1392.34C9420.94,1140.87 9560.02,1381.43 9677.64,879.598C9814.03,297.707 11532.4,189.264 11535.7,228.626C11538.8,265.662 11114.3,3650.11 11109.4,3807.66Z" style="fill:#313343;stroke:#313343;stroke-width:5px;"/>
        <g id="hook-group" serif:id="hook group">
            <circle id="_-hook-" serif:id="{hook}" cx="2428.61" cy="1397.66" r="30.661" style="fill:#ffd617;"/>
            <path id="_-patrolRoute-" serif:id="{patrolRoute}" d="M2428.61,1396.85C2428.61,1396.85 2774.47,1119.19 3022.73,1094.85C3270.99,1070.52 3416.85,1353.43 3554.11,1396.85C3691.38,1440.27 3940.59,1227.38 4146.6,1219.41C4410.96,1209.19 5049.28,1072.21 5140.29,1335.53C5231.3,1598.84 5777.32,1775.04 5979.87,1708.02C6182.42,1641.01 6512.87,1150.22 6728.03,1253.32C6943.19,1356.41 7258.28,1480.83 7351.78,1396.85C7445.28,1312.87 7643.11,927.241 7878.39,956.886C8113.66,986.531 8297.95,1163.15 8520.78,1123.77" style="fill:none;stroke:#0f0f1b;stroke-width:6px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
        </g>
        <g id="hook-group1" serif:id="hook group">
            <circle id="_-hook-1" serif:id="{hook}" cx="656.128" cy="829.874" r="30.661" style="fill:#ffd617;"/>
            <path id="_-patrolRoute-1" serif:id="{patrolRoute}" d="M656.128,829.874L1019.57,829.874" style="fill:none;stroke:#000;stroke-width:6px;stroke-linecap:butt;stroke-miterlimit:1.5;"/>
        </g>
        <circle id="_-door---to-level0---goal-" serif:id="{door} {to-level0} {goal}" cx="8205.22" cy="1525.28" r="30.661" style="fill:#f0e;"/>
        <circle id="_-timeCapsule-" serif:id="{timeCapsule}" cx="459.436" cy="1677.36" r="30.661" style="fill:#00f683;"/>
        <circle id="_-timeCapsule-1" serif:id="{timeCapsule}" cx="7301.09" cy="1586.6" r="30.661" style="fill:#00f683;"/>
        <circle id="start" cx="544.605" cy="866.183" r="30.661" style="fill:#f0e;"/>
        <rect id="_-box-" serif:id="{box}" x="724.269" y="1576.86" width="79.317" height="79.317" style="fill:none;stroke:#0f0f1b;stroke-width:5px;"/>
        <rect id="_-box-1" serif:id="{box}" x="724.269" y="1491.32" width="79.317" height="79.317" style="fill:none;stroke:#0f0f1b;stroke-width:5px;"/>
        <rect id="_-box-2" serif:id="{box}" x="724.269" y="1406.07" width="79.317" height="79.317" style="fill:none;stroke:#0f0f1b;stroke-width:5px;"/>
        <rect id="_-box-3" serif:id="{box}" x="1073.61" y="1208.83" width="79.317" height="79.317" style="fill:none;stroke:#0f0f1b;stroke-width:5px;"/>
        <rect id="_-box-4" serif:id="{box}" x="939.458" y="1208.83" width="79.317" height="79.317" style="fill:none;stroke:#0f0f1b;stroke-width:5px;"/>
        <circle id="_-timeCapsule-2" serif:id="{timeCapsule}" cx="4806.86" cy="1304.87" r="30.661" style="fill:#00f683;"/>
        <g id="Tutorial-1" serif:id="Tutorial 1">
            <path d="M2119.45,1469.46C2107.77,1473.13 2108.21,1509.08 2098.58,1502.13C2085.37,1492.61 2034.3,1471.45 2019.93,1470.4C2009.82,1469.67 2037.96,1448.07 2032.08,1439.57C2024.47,1428.57 1975.66,1428.59 1974.27,1404.37C1972.52,1373.96 1981.9,1272.47 2021.59,1257.09C2061.28,1241.71 2187.85,1274.96 2212.43,1312.11C2237,1349.25 2184.55,1453.73 2169.06,1479.96C2159.67,1495.85 2131.2,1465.77 2119.45,1469.46Z" style="fill:#565a75;"/>
            <clipPath id="_clip2">
                <path d="M2119.45,1469.46C2107.77,1473.13 2108.21,1509.08 2098.58,1502.13C2085.37,1492.61 2034.3,1471.45 2019.93,1470.4C2009.82,1469.67 2037.96,1448.07 2032.08,1439.57C2024.47,1428.57 1975.66,1428.59 1974.27,1404.37C1972.52,1373.96 1981.9,1272.47 2021.59,1257.09C2061.28,1241.71 2187.85,1274.96 2212.43,1312.11C2237,1349.25 2184.55,1453.73 2169.06,1479.96C2159.67,1495.85 2131.2,1465.77 2119.45,1469.46Z"/>
            </clipPath>
            <g clip-path="url(#_clip2)">
                <path d="M2023.2,1469.09C2019.7,1464.55 2033.26,1435.48 2037.61,1439.08C2062.82,1459.96 2082.69,1461.36 2116.24,1463.62C2124.28,1464.16 2107.83,1507.35 2088.58,1498.55C2063.33,1487.01 2031.21,1479.46 2023.2,1469.09Z" style="fill:#313343;"/>
            </g>
            <path d="M2119.45,1469.46C2107.77,1473.13 2108.21,1509.08 2098.58,1502.13C2085.37,1492.61 2034.3,1471.45 2019.93,1470.4C2009.82,1469.67 2037.96,1448.07 2032.08,1439.57C2024.47,1428.57 1975.66,1428.59 1974.27,1404.37C1972.52,1373.96 1981.9,1272.47 2021.59,1257.09C2061.28,1241.71 2187.85,1274.96 2212.43,1312.11C2237,1349.25 2184.55,1453.73 2169.06,1479.96C2159.67,1495.85 2131.2,1465.77 2119.45,1469.46Z" style="fill:none;stroke:#0f0f1b;stroke-width:10px;stroke-miterlimit:1.5;"/>
            <g id="space-text" serif:id="space text">
                <path d="M2161.87,1339.25C2164.01,1338.18 2169.77,1307.6 2168.09,1306.21C2161.55,1300.81 2132.75,1293.66 2124.41,1297.81C2121.44,1299.28 2115.67,1329.19 2118,1331.12C2124.54,1336.52 2153.52,1343.4 2161.87,1339.25Z" style="fill:#0f0f1b;stroke:#0f0f1b;stroke-width:5px;"/>
                <path d="M2159.74,1337.89C2161.65,1337.06 2166.35,1312.01 2164.82,1310.84C2158.84,1306.29 2132.76,1299.96 2125.3,1303.24C2122.66,1304.4 2117.93,1328.89 2120.06,1330.52C2126.04,1335.06 2152.28,1341.17 2159.74,1337.89Z" style="fill:#fafbf6;"/>
                <path d="M2136.82,1325.55C2136.64,1326.36 2136.92,1327.2 2137.55,1327.74C2138.19,1328.27 2139.07,1328.4 2139.83,1328.07C2142.75,1326.82 2146.61,1325.16 2149.12,1324.08C2149.74,1323.82 2150.21,1323.28 2150.38,1322.63C2150.56,1321.99 2150.42,1321.29 2150.02,1320.75C2148.33,1318.48 2145.68,1314.91 2143.65,1312.19C2143.14,1311.5 2142.28,1311.17 2141.44,1311.35C2140.6,1311.52 2139.94,1312.17 2139.75,1313C2138.88,1316.73 2137.67,1321.93 2136.82,1325.55Z" style="fill:#0f0f1b;stroke:#0f0f1b;stroke-width:5px;"/>
            </g>
            <g id="space-text1" serif:id="space text">
                <path d="M2077.77,1317.27C2079.9,1316.21 2085.66,1285.62 2083.98,1284.23C2077.44,1278.83 2048.65,1271.68 2040.3,1275.83C2037.33,1277.31 2031.56,1307.21 2033.89,1309.14C2040.43,1314.54 2069.42,1321.42 2077.77,1317.27Z" style="fill:#0f0f1b;stroke:#0f0f1b;stroke-width:5px;"/>
                <path d="M2075.63,1315.92C2077.54,1315.08 2082.25,1290.03 2080.71,1288.86C2074.73,1284.32 2048.66,1277.98 2041.2,1281.26C2038.55,1282.43 2033.82,1306.92 2035.95,1308.54C2041.93,1313.09 2068.17,1319.2 2075.63,1315.92Z" style="fill:#fafbf6;"/>
                <path d="M2063.91,1292.96C2064.05,1292.14 2063.71,1291.32 2063.05,1290.82C2062.38,1290.33 2061.49,1290.25 2060.75,1290.62C2057.92,1292.05 2054.16,1293.94 2051.71,1295.16C2051.11,1295.46 2050.68,1296.03 2050.55,1296.68C2050.41,1297.34 2050.59,1298.03 2051.02,1298.54C2052.84,1300.71 2055.71,1304.12 2057.89,1306.71C2058.44,1307.37 2059.32,1307.64 2060.15,1307.42C2060.98,1307.19 2061.6,1306.51 2061.74,1305.66C2062.38,1301.89 2063.28,1296.62 2063.91,1292.96Z" style="fill:#0f0f1b;stroke:#0f0f1b;stroke-width:5px;"/>
            </g>
            <g id="sign-jump1">
                <path id="foot-front" d="M2063.41,1431.07C2062.89,1430.25 2062.8,1429.43 2063.27,1428.66C2068.99,1419.36 2068.91,1399.05 2078.43,1397.72C2089.8,1396.14 2100,1403.18 2099.35,1412.97C2098.72,1422.49 2098.35,1431.46 2093.48,1438.71C2092.84,1439.66 2091.16,1440.08 2088.88,1440.1C2088.84,1441.67 2088.75,1443.92 2088.21,1445.7C2086.5,1451.41 2080.19,1447.07 2081.09,1444.05C2081.19,1443.75 2081.22,1441.67 2081.49,1439.24C2077.43,1438.4 2073.05,1437.02 2069.57,1435.41C2069.05,1436.9 2068.27,1439.06 2067.2,1440.62C2063.84,1445.54 2059.15,1439.49 2060.92,1436.89C2061.14,1436.58 2062.05,1433.82 2063.41,1431.07Z" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:3px;"/>
                <path id="arm-right" d="M2092.85,1416.64C2097.54,1415.89 2100.63,1414.51 2100.92,1415.08C2101.72,1416.65 2099.84,1419.6 2096.35,1421.92C2092.86,1424.24 2089.25,1424.93 2088.28,1423.48C2087.31,1422.02 2089.01,1417.25 2092.85,1416.64Z" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:3px;"/>
                <path id="arm-left" d="M2104.75,1415.92C2106.61,1417.25 2108.1,1417.72 2108.03,1418.09C2107.84,1419.08 2106.3,1419.75 2104.39,1419.56C2102.48,1419.37 2101.01,1418.4 2101.11,1417.39C2101.21,1416.39 2103.23,1414.83 2104.75,1415.92Z" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:3px;"/>
            </g>
            <path d="M2169.58,1421.12C2169.58,1421.12 2125.57,1430.83 2115.71,1424.25" style="fill:none;stroke:#fafbf6;stroke-width:5px;"/>
            <path d="M2056.8,1410.34C2056.8,1410.34 2014.27,1395.45 2009.35,1384.65" style="fill:none;stroke:#fafbf6;stroke-width:5px;"/>
        </g>
        <g transform="matrix(24,0,0,24,2104.59,1368.8)">
        </g>
        <text x="2039.23px" y="1368.81px" style="font-family:'ArialMT', 'Arial', sans-serif;font-size:24px;">Swing</text>
    </g>
</svg>

'''
'''--- public/assets/toki/levels/levelTutorial.svg ---
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="8269px" height="2311px" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:1;">
    <rect id="levelTutorial" x="0" y="0" width="8268.22" height="2310.37" style="fill:#565a75;"/>
    <clipPath id="_clip1">
        <rect id="levelTutorial1" serif:id="levelTutorial" x="0" y="0" width="8268.22" height="2310.37"/>
    </clipPath>
    <g clip-path="url(#_clip1)">
        <g id="mountain--parallax-back-" serif:id="mountain {parallax-back}">
            <path d="M1977.98,846.29C1992.47,752.559 2149.94,681.226 2237.4,662.973C2324.86,644.72 2413.89,759.831 2502.75,736.774C2594.45,712.979 2673.11,553.575 2787.64,520.203C2922.96,480.772 3140.54,524.397 3314.67,500.188C3497.75,474.735 3710.7,360.42 3886.12,367.483C4056.62,374.348 4202.13,499.24 4367.18,542.564C4554.81,591.813 4857.75,604.259 5011.86,662.973C5125.1,706.115 5170.74,890.509 5291.84,894.846C5434.53,899.956 5733.54,701.727 5868.03,693.634C5960.09,688.095 6007.28,834.701 6098.77,846.29C6207.04,860.004 6391.04,720.212 6517.66,775.92C6706.43,858.973 6886.07,993.335 6919.97,1214.84C6945.99,1384.83 5768.65,1345.17 5190.93,1336.75C4557.87,1327.52 3628.36,1178.03 3121.62,1159.46C2797.37,1147.58 2341.07,1277.55 2150.47,1225.36C2016.57,1188.69 1963.49,940.02 1977.98,846.29Z" style="fill:#c6b7be;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M2240.77,667.02C2264.75,662.576 2372.79,692.527 2323.31,701.708C2259.08,713.624 2237.05,689.841 2202.42,701.708C2167.79,713.574 2168.44,760.082 2135.29,744.847C2102.14,729.612 2084.23,724.127 2067.04,754.003C2049.86,783.88 2013.12,797.846 2023.31,776.017C2025.9,770.463 2055.33,743.167 2103.65,717.868C2146.91,695.219 2203.33,673.957 2240.77,667.02Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M2855.69,517.611C2909.76,513.445 3053.95,498.444 2957.41,550.73C2899.96,581.837 2871.14,538.863 2836.52,550.73C2801.89,562.597 2802.54,609.104 2769.39,593.869C2736.24,578.634 2726.26,578.643 2709.08,608.52C2691.89,638.396 2637.1,650.486 2652.25,631.758C2723.91,543.207 2791.08,522.589 2855.69,517.611Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M3792.21,383.928C3859.63,368.024 4021.99,369.848 3966.97,414.898C3916.43,456.283 3880.71,403.032 3846.08,414.898C3811.46,426.765 3812.11,473.273 3778.95,458.038C3745.8,442.803 3735.82,442.811 3718.64,472.688C3701.46,502.565 3657.1,519.551 3661.82,495.927C3666.08,474.583 3712.39,402.755 3792.21,383.928Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M3559.85,441.604C3593.88,424.028 3719.34,381.317 3680.33,414.85C3635.39,453.475 3643.66,485.964 3616.16,495.934C3586.44,506.707 3546.07,513.003 3537.67,497.993C3529.27,482.982 3544.43,449.571 3559.85,441.604Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M4043.78,464.789C4051.37,462.724 4056.05,449.927 4060.3,447.923C4070.94,442.902 4085.14,440.457 4087.57,448.513C4089.99,456.568 4080.16,485.999 4076.05,481.592C4064.33,469.038 4032.99,489.22 4035.06,500.454C4037.58,514.114 3908.43,518.94 3942.3,504.768C3961.77,496.619 3973.88,469.248 3996.16,465.364C4013.86,462.28 4033.09,467.696 4043.78,464.789Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M5036.48,687.861C5054.34,700.796 5194.91,824.503 5091.77,800.553C5028.14,785.778 5038.11,731.98 5004.99,716.391C4971.87,700.803 4939.96,734.64 4926.77,700.623C4913.57,666.606 4906.41,659.667 4873.27,669.152C4840.14,678.637 4796.47,659.945 4816.3,646.274C4834.23,633.922 4970.07,639.747 5036.48,687.861Z" style="fill:#fafbf6;stroke:#fafbf6;stroke-width:7px;"/>
            <path d="M5745.23,740.038C5739.22,767.837 5801.09,745.87 5841.55,784.43C5871.22,812.708 5886.53,726.137 5913.48,744.149C5941.46,762.842 5981.03,712.512 5854.23,702.178C5826.27,699.899 5747.06,731.589 5745.23,740.038Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
            <path d="M6337.64,802.371C6331.62,830.171 6478.93,788.47 6505.88,806.482C6533.86,825.175 6573.44,774.845 6446.63,764.511C6418.67,762.233 6339.47,793.922 6337.64,802.371Z" style="fill:#fafbf6;stroke:#c6b7be;stroke-width:7px;"/>
        </g>
        <g id="Tutorial-1" serif:id="Tutorial 1">
            <path d="M4299.09,804.444C4290.21,821.175 4298.21,865.777 4298.21,865.777L4222.17,908.151C4222.17,908.151 4227.97,828.921 4222.17,807.915C4219.58,798.519 4134.11,797.134 4134.11,797.134C4105.19,795.792 4106.3,611.66 4134.11,612.909C4190.22,584.565 4328.06,585.553 4379.41,614.117C4406.29,613.732 4407.9,797.914 4379.41,798.343C4379.41,798.343 4304.28,794.663 4299.09,804.444Z" style="fill:#565a75;"/>
            <clipPath id="_clip2">
                <path d="M4299.09,804.444C4290.21,821.175 4298.21,865.777 4298.21,865.777L4222.17,908.151C4222.17,908.151 4227.97,828.921 4222.17,807.915C4219.58,798.519 4134.11,797.134 4134.11,797.134C4105.19,795.792 4106.3,611.66 4134.11,612.909C4190.22,584.565 4328.06,585.553 4379.41,614.117C4406.29,613.732 4407.9,797.914 4379.41,798.343C4379.41,798.343 4304.28,794.663 4299.09,804.444Z"/>
            </clipPath>
            <g clip-path="url(#_clip2)">
                <path d="M4233.42,901.717C4228.75,901.575 4219.23,865.156 4223.83,864.331C4250.49,859.544 4267.81,838.945 4292.73,813.673C4295.86,810.505 4304.06,869.953 4287.94,877.129C4266.78,886.546 4244.11,902.04 4233.42,901.717Z" style="fill:#313343;"/>
            </g>
            <path d="M4299.09,804.444C4290.21,821.175 4298.21,865.777 4298.21,865.777L4222.17,908.151C4222.17,908.151 4227.97,828.921 4222.17,807.915C4219.58,798.519 4134.11,797.134 4134.11,797.134C4105.19,795.792 4106.3,611.66 4134.11,612.909C4190.22,584.565 4328.06,585.553 4379.41,614.117C4406.29,613.732 4407.9,797.914 4379.41,798.343C4379.41,798.343 4304.28,794.663 4299.09,804.444Z" style="fill:none;stroke:#0f0f1b;stroke-width:10px;stroke-miterlimit:1.5;"/>
            <g id="sign-jump1">
                <path id="foot-front" d="M4202.75,662.322C4202.02,661.671 4201.71,660.913 4201.95,660.043C4204.87,649.521 4199.15,630.025 4207.94,626.111C4218.43,621.441 4230.18,625.372 4232.27,634.965C4234.3,644.282 4236.43,653.01 4233.76,661.323C4233.41,662.409 4231.91,663.281 4229.73,663.931C4230.12,665.453 4230.66,667.641 4230.64,669.499C4230.58,675.455 4223.31,673.033 4223.34,669.89C4223.35,669.572 4222.8,667.57 4222.39,665.152C4218.25,665.474 4213.66,665.359 4209.88,664.784C4209.79,666.354 4209.64,668.651 4209.05,670.445C4207.18,676.101 4200.99,671.585 4201.98,668.601C4202.1,668.239 4202.2,665.334 4202.75,662.322Z" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:3px;"/>
                <path id="arm-right" d="M4227.42,653.204C4231.74,655.174 4235.09,655.727 4235.01,656.373C4234.81,658.115 4231.61,659.541 4227.42,659.541C4223.23,659.541 4219.83,658.121 4219.83,656.373C4219.83,654.624 4223.89,651.593 4227.42,653.204Z" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:3px;"/>
                <path id="arm-left" d="M4239.76,650.953C4241.91,651.715 4243.47,651.752 4243.51,652.125C4243.6,653.131 4242.31,654.205 4240.42,654.551C4238.53,654.897 4236.85,654.371 4236.67,653.378C4236.48,652.386 4238,650.33 4239.76,650.953Z" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:3px;"/>
            </g>
            <path d="M4252.58,648.647C4252.58,648.647 4332.43,623.091 4351.15,616.328" style="fill:none;stroke:#fafbf6;stroke-width:3.5px;stroke-miterlimit:1.5;"/>
            <g id="mouse">
                <path d="M4301.51,732.098C4295.69,726.134 4272.8,726.54 4267.06,732.446C4261.32,738.352 4263.67,759.172 4267.06,767.535C4270.28,775.487 4279,783.475 4284.82,783.591C4290.64,783.707 4298.66,776.364 4301.97,768.23C4305.38,759.876 4307.33,738.062 4301.51,732.098Z" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:3.04px;stroke-miterlimit:1.5;"/>
                <path d="M4284.26,727.821L4284.4,755.704" style="fill:none;stroke:#0f0f1b;stroke-width:3.04px;stroke-miterlimit:1.5;"/>
            </g>
            <path d="M4256.51,722.147L4259.3,731.517L4252.58,735.735" style="fill:none;stroke:#fafbf6;stroke-width:3.5px;stroke-miterlimit:1.5;"/>
            <g transform="matrix(24,0,0,24,4203.23,755.411)">
            </g>
            <text x="4151.23px" y="755.411px" style="font-family:'ArialMT', 'Arial', sans-serif;font-size:24px;">Click</text>
            <g transform="matrix(24,0,0,24,4314.34,690.328)">
            </g>
            <text x="4219.22px" y="690.328px" style="font-family:'ArialMT', 'Arial', sans-serif;font-size:24px;">T<tspan x="4232.99px 4238.32px " y="690.328px 690.328px ">im</tspan>elock</text>
            <path d="M4233.69,735.901C4243.01,725.329 4251.32,726.54 4259.3,731.517" style="fill:none;stroke:#fafbf6;stroke-width:3.5px;stroke-miterlimit:1.5;"/>
        </g>
        <circle id="start" cx="1662.69" cy="720.851" r="30.661" style="fill:#f0e;"/>
        <g id="Tutorial-11" serif:id="Tutorial 1">
            <path d="M2834.65,956.89C2825.77,973.622 2833.77,1018.22 2833.77,1018.22L2757.73,1060.6C2757.73,1060.6 2763.53,981.368 2757.73,960.361C2755.14,950.965 2690.95,950.49 2690.95,950.49C2662.03,949.148 2663.14,765.016 2690.95,766.264C2746.78,752.531 2840.65,751.841 2892.27,766.264C2919.15,765.88 2920.76,950.061 2892.27,950.49C2892.27,950.49 2839.85,947.11 2834.65,956.89Z" style="fill:#565a75;"/>
            <clipPath id="_clip3">
                <path d="M2834.65,956.89C2825.77,973.622 2833.77,1018.22 2833.77,1018.22L2757.73,1060.6C2757.73,1060.6 2763.53,981.368 2757.73,960.361C2755.14,950.965 2690.95,950.49 2690.95,950.49C2662.03,949.148 2663.14,765.016 2690.95,766.264C2746.78,752.531 2840.65,751.841 2892.27,766.264C2919.15,765.88 2920.76,950.061 2892.27,950.49C2892.27,950.49 2839.85,947.11 2834.65,956.89Z"/>
            </clipPath>
            <g clip-path="url(#_clip3)">
                <path d="M2768.98,1054.16C2764.31,1054.02 2754.79,1017.6 2759.39,1016.78C2786.05,1011.99 2803.37,991.392 2828.29,966.12C2831.42,962.951 2839.62,1022.4 2823.49,1029.58C2802.34,1038.99 2779.67,1054.49 2768.98,1054.16Z" style="fill:#313343;"/>
            </g>
            <path d="M2834.65,956.89C2825.77,973.622 2833.77,1018.22 2833.77,1018.22L2757.73,1060.6C2757.73,1060.6 2763.53,981.368 2757.73,960.361C2755.14,950.965 2690.95,950.49 2690.95,950.49C2662.03,949.148 2663.14,765.016 2690.95,766.264C2746.78,752.531 2840.65,751.841 2892.27,766.264C2919.15,765.88 2920.76,950.061 2892.27,950.49C2892.27,950.49 2839.85,947.11 2834.65,956.89Z" style="fill:none;stroke:#0f0f1b;stroke-width:10px;stroke-miterlimit:1.5;"/>
            <g id="jumplines">
                <path d="M2762.16,843.963C2762.16,843.963 2771.64,809.385 2808.62,796.676" style="fill:none;stroke:#fafbf6;stroke-width:2px;stroke-miterlimit:1.5;"/>
                <path d="M2763.3,870.393C2763.3,870.393 2772.78,835.815 2809.76,823.106" style="fill:none;stroke:#fafbf6;stroke-width:2px;stroke-miterlimit:1.5;"/>
                <path d="M2787.05,868.196C2787.05,868.196 2796.53,833.618 2833.51,820.909" style="fill:none;stroke:#fafbf6;stroke-width:2px;stroke-miterlimit:1.5;"/>
            </g>
            <g id="sign-jump11" serif:id="sign-jump1">
                <path id="foot-front1" serif:id="foot-front" d="M2710.88,869.964C2710.16,869.313 2709.85,868.555 2710.09,867.686C2713,857.163 2707.29,837.668 2716.08,833.754C2726.56,829.083 2738.31,833.015 2740.4,842.607C2742.43,851.924 2744.56,860.653 2741.9,868.965C2741.55,870.051 2740.05,870.923 2737.87,871.574C2738.25,873.095 2738.79,875.284 2738.77,877.141C2738.71,883.097 2731.44,880.676 2731.48,877.533C2731.48,877.214 2730.94,875.213 2730.53,872.795C2726.39,873.116 2721.8,873.001 2718.01,872.426C2717.92,873.997 2717.77,876.293 2717.18,878.088C2715.31,883.744 2709.12,879.228 2710.11,876.244C2710.23,875.881 2710.34,872.977 2710.88,869.964Z" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:3px;"/>
                <path id="arm-right1" serif:id="arm-right" d="M2735.56,860.847C2739.88,862.817 2743.22,863.369 2743.14,864.015C2742.95,865.757 2739.74,867.183 2735.56,867.183C2731.37,867.183 2727.97,865.763 2727.97,864.015C2727.97,862.266 2732.02,859.235 2735.56,860.847Z" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:3px;"/>
                <path id="arm-left1" serif:id="arm-left" d="M2747.89,858.595C2750.05,859.357 2751.61,859.395 2751.64,859.768C2751.73,860.774 2750.44,861.847 2748.55,862.193C2746.66,862.539 2744.98,862.014 2744.8,861.021C2744.62,860.028 2746.13,857.972 2747.89,858.595Z" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:3px;"/>
            </g>
            <g id="sign-jump2">
                <path id="foot-front2" serif:id="foot-front" d="M2826.46,805.556C2825.73,804.906 2825.42,804.147 2825.66,803.278C2828.58,792.755 2822.87,773.26 2831.65,769.346C2842.14,764.675 2853.89,768.607 2855.98,778.199C2858.01,787.516 2860.14,796.245 2857.47,804.557C2857.13,805.643 2855.62,806.516 2853.45,807.166C2853.83,808.688 2858.48,809.581 2858.47,811.438C2858.41,817.394 2851.14,814.973 2851.17,811.83C2851.17,811.511 2846.52,810.805 2846.11,808.387C2841.96,808.708 2837.38,808.593 2833.59,808.018C2833.5,809.589 2828.39,809.801 2827.8,811.596C2827.36,812.914 2826.69,813.679 2825.93,814.041C2823.43,815.232 2819.97,812.041 2820.73,809.752C2820.85,809.39 2825.91,808.569 2826.46,805.556Z" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:3px;"/>
                <path id="arm-right2" serif:id="arm-right" d="M2849.25,791.087C2853.57,793.057 2856.91,793.609 2856.84,794.255C2856.64,795.998 2853.44,797.423 2849.25,797.423C2845.06,797.423 2841.66,796.004 2841.66,794.255C2841.66,792.507 2845.72,789.476 2849.25,791.087Z" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:3px;"/>
                <path id="arm-left2" serif:id="arm-left" d="M2861.59,788.836C2863.74,789.597 2865.3,789.635 2865.34,790.008C2865.43,791.014 2864.14,792.088 2862.25,792.433C2860.36,792.779 2858.68,792.254 2858.5,791.261C2858.32,790.268 2859.83,788.212 2861.59,788.836Z" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:3px;"/>
            </g>
            <g id="space-text" serif:id="space text">
                <path d="M2700.38,894.788C2692.37,896.235 2692.88,927.358 2700.96,928.404C2732.4,932.475 2857.6,934.057 2888.93,928.404C2900.05,926.396 2900.14,895.937 2888.93,894.486C2857.49,890.414 2731.71,889.135 2700.38,894.788Z" style="fill:#0f0f1b;stroke:#0f0f1b;stroke-width:5px;"/>
                <path d="M2703.29,895.712C2695.45,896.896 2695.95,922.383 2703.85,923.24C2734.6,926.574 2857.05,927.869 2887.69,923.24C2898.57,921.596 2898.66,896.653 2887.69,895.464C2856.94,892.129 2733.93,891.082 2703.29,895.712Z" style="fill:#fafbf6;"/>
                <g transform="matrix(24,0,0,24,2830.37,915.458)">
                </g>
                <text x="2759.66px" y="915.458px" style="font-family:'Arial-BoldMT', 'Arial', sans-serif;font-weight:700;font-size:24px;">Space</text>
            </g>
        </g>
        <path d="M1956.95,452.646C1935.71,405.324 1894.8,421.466 1876.71,367.706C1832.58,236.585 1754.73,41.081 1788.83,-109.461C1825.2,-270.034 2061.1,-356.958 2189.81,-388.241C2720.97,-517.347 4358.68,-317.792 5090.91,-285.655C5588.77,-263.804 6334.85,-296.56 6583.2,-195.417C6742.69,-130.464 6738.74,252.074 6581.02,321.203C6491.11,360.608 6338.68,400.574 6156.06,436.37C6131.94,441.096 6093.63,398.905 6068.55,403.474C6056,405.76 6057.01,454.87 6044.24,457.113C5656.84,525.168 5173.94,572.711 4855.85,561.66C4825.06,560.591 4804.13,533.393 4773.71,529.744C4752.86,527.242 4722.42,548.924 4701.71,545.358C4353.99,485.481 4026.75,284.194 3678.67,229.036C3653.65,225.071 3637.33,197.421 3612.08,195.073C3588.27,192.86 3555.54,215.852 3531.51,215.26C3305.67,209.7 2991.33,288.116 2695.7,364.854C2673.93,370.506 2652.26,349.129 2630.74,354.728C2602.69,362.022 2574.89,396.262 2547.43,403.334C2363.98,450.58 2195.68,491.168 2070.78,502.538C1999.09,509.064 1979.8,503.548 1956.95,452.646Z" style="fill:#51556e;stroke:#51556b;stroke-width:5px;"/>
        <path id="ground--collision-" serif:id="ground {collision}" d="M9096.78,2666.67C9010.09,2686.11 124.489,2116.14 124.489,2116.14L143.335,-233.256L1916.38,-211.082C1916.38,-211.082 1978.57,312.499 1916.38,420.407C1854.23,528.262 1605.16,373.536 1543.28,436.367C1481.39,499.199 1496.46,733.524 1545.07,797.395C1627.23,905.367 1797.66,738.263 1916.38,774.102C2090.21,826.573 2178.2,1107.36 2588.02,1112.22C2775.11,1114.44 2953.85,866.45 3170,929.221C3395.32,994.651 3702.17,1030.02 3813.33,979.87C3923.82,930.021 4276.98,833.744 4583.85,843.919C4890.71,854.094 5530.54,1269.79 5841.79,1081.53C6153.03,893.276 6003.02,832.155 6361.37,841.512C6699.79,850.349 6659.8,152.829 6437.86,76.119C6383.99,57.498 6240.22,92.231 6190.24,74.325C6140.26,56.419 6141.98,-185.078 6241.86,-198.433C6341.75,-211.788 9075.21,-824.821 9064.3,-179.18C9053.39,466.46 9183.47,2647.24 9096.78,2666.67Z" style="fill:#565a75;stroke:#0f0f1b;stroke-width:15px;"/>
        <g id="Tutorial-goal" serif:id="Tutorial goal">
            <path d="M6566.99,515.836C6574.07,524.522 6611.88,516.543 6608.44,525.777C6603.72,538.435 6597.07,584.061 6598.83,595.846C6600.07,604.149 6569.35,584.089 6560.28,592.543C6551.21,600.998 6562.11,640.3 6544.42,646.574C6522.2,654.452 6445.39,668.5 6426.99,639.813C6408.6,611.126 6410.88,502.146 6434.05,474.454C6457.22,446.761 6543.86,466.761 6566.01,473.658C6579.44,477.838 6559.92,507.149 6566.99,515.836Z" style="fill:#565a75;"/>
            <clipPath id="_clip4">
                <path d="M6566.99,515.836C6574.07,524.522 6611.88,516.543 6608.44,525.777C6603.72,538.435 6597.07,584.061 6598.83,595.846C6600.07,604.149 6569.35,584.089 6560.28,592.543C6551.21,600.998 6562.11,640.3 6544.42,646.574C6522.2,654.452 6445.39,668.5 6426.99,639.813C6408.6,611.126 6410.88,502.146 6434.05,474.454C6457.22,446.761 6543.86,466.761 6566.01,473.658C6579.44,477.838 6559.92,507.149 6566.99,515.836Z"/>
            </clipPath>
            <g clip-path="url(#_clip4)">
                <path d="M6598.54,597.313C6595.8,601.1 6557.04,592.462 6558.94,588.195C6569.96,563.449 6567.48,547.158 6563.23,519.664C6562.21,513.078 6611.94,521.036 6608.82,538.404C6604.73,561.193 6604.81,588.658 6598.54,597.313Z" style="fill:#313343;"/>
            </g>
            <path d="M6566.99,515.836C6574.07,524.522 6611.88,516.543 6608.44,525.777C6603.72,538.435 6597.07,584.061 6598.83,595.846C6600.07,604.149 6569.35,584.089 6560.28,592.543C6551.21,600.998 6562.11,640.3 6544.42,646.574C6522.2,654.452 6445.39,668.5 6426.99,639.813C6408.6,611.126 6410.88,502.146 6434.05,474.454C6457.22,446.761 6543.86,466.761 6566.01,473.658C6579.44,477.838 6559.92,507.149 6566.99,515.836Z" style="fill:none;stroke:#0f0f1b;stroke-width:10px;stroke-miterlimit:1.5;"/>
            <g id="up-button" serif:id="up button">
                <path d="M6465.83,598.041C6463.93,599.487 6464.05,630.61 6465.97,631.656C6473.41,635.728 6503.03,637.309 6510.45,631.656C6513.08,629.648 6513.1,599.19 6510.45,597.738C6503.01,593.666 6473.24,592.387 6465.83,598.041Z" style="fill:#0f0f1b;stroke:#0f0f1b;stroke-width:5px;"/>
                <path d="M6468.18,598.964C6466.47,600.148 6466.57,625.635 6468.3,626.492C6475.03,629.826 6501.83,631.121 6508.54,626.492C6510.92,624.848 6510.94,599.905 6508.54,598.716C6501.81,595.382 6474.89,594.334 6468.18,598.964Z" style="fill:#fafbf6;"/>
                <path d="M6495.12,618.766C6495.95,618.75 6496.7,618.27 6497.06,617.523C6497.42,616.777 6497.33,615.891 6496.83,615.232C6494.9,612.712 6492.35,609.37 6490.69,607.199C6490.28,606.664 6489.65,606.347 6488.97,606.336C6488.3,606.326 6487.66,606.624 6487.24,607.146C6485.44,609.343 6482.64,612.791 6480.49,615.42C6479.95,616.084 6479.85,617.001 6480.22,617.771C6480.6,618.541 6481.38,619.023 6482.24,619.007C6486.07,618.936 6491.41,618.836 6495.12,618.766Z" style="fill:#0f0f1b;stroke:#0f0f1b;stroke-width:5px;"/>
            </g>
            <g>
                <path d="M6475.52,579.052C6474.23,573.911 6473.37,567.913 6477.43,558.622" style="fill:none;stroke:#fafbf6;stroke-width:2px;"/>
                <path d="M6491.3,581.365C6490.41,574.947 6490.64,567.478 6493.2,560.934" style="fill:none;stroke:#fafbf6;stroke-width:2px;"/>
                <path d="M6483.41,584.843C6482.52,578.426 6482.75,570.956 6485.31,564.413" style="fill:none;stroke:#fafbf6;stroke-width:2px;"/>
            </g>
            <g id="goal-hint" serif:id="goal=hint">
                <path d="M6459.24,545.668C6457.17,541.145 6456.01,536.124 6456.01,530.839C6456.01,510.975 6472.33,494.848 6492.43,494.848C6512.53,494.848 6528.84,510.975 6528.84,530.839C6528.84,536.124 6527.69,541.145 6525.61,545.668L6459.24,545.668Z" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:2px;"/>
                <path d="M6466.73,545.668C6464.33,541.467 6462.96,536.62 6462.96,531.459C6462.96,515.445 6476.16,502.444 6492.43,502.444C6508.69,502.444 6521.9,515.445 6521.9,531.459C6521.9,536.62 6520.53,541.467 6518.13,545.668L6466.73,545.668Z" style="fill:#0f0f1b;stroke:#0f0f1b;stroke-width:2px;"/>
            </g>
            <g id="goul-hont-player">
                <path id="foot-front3" serif:id="foot-front" d="M6479.75,543.429C6478.98,542.993 6478.45,542.485 6478.25,541.903C6475.92,534.857 6463.88,521.802 6468.35,519.181C6473.68,516.053 6483.46,518.686 6488.89,525.109C6494.16,531.348 6499.25,537.193 6500.85,542.76C6501.05,543.487 6500.37,544.071 6499.13,544.506C6500.03,545.526 6501.31,546.991 6502.07,548.235C6504.49,552.223 6498.45,550.602 6497.17,548.497C6497.04,548.284 6495.83,546.943 6494.55,545.324C6491.81,545.539 6488.58,545.462 6485.72,545.077C6486.3,546.129 6487.15,547.667 6487.49,548.869C6488.53,552.656 6482.37,549.632 6481.82,547.634C6481.75,547.391 6480.62,545.446 6479.75,543.429Z" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:3px;"/>
                <path id="arm-right3" serif:id="arm-right" d="M6495.98,535.594C6498.41,536.913 6500.06,537.283 6500.18,537.716C6500.5,538.883 6499.38,539.837 6497.48,539.837C6495.58,539.837 6493.7,538.887 6493.29,537.716C6492.87,536.545 6494,534.515 6495.98,535.594Z" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:3px;"/>
                <path id="arm-left3" serif:id="arm-left" d="M6500.71,535.816C6502.51,536.326 6503.61,536.351 6503.79,536.601C6504.27,537.274 6503.82,537.993 6502.65,538.225C6501.49,538.456 6500.11,538.105 6499.57,537.44C6499.03,536.775 6499.23,535.398 6500.71,535.816Z" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:3px;"/>
            </g>
        </g>
        <g id="japanese-skies" serif:id="japanese skies">
            <g>
                <path d="M5060.09,174.884C5060.09,165.86 5052.77,158.534 5043.74,158.534L4826.52,158.534C4817.5,158.534 4810.17,165.86 4810.17,174.884C4810.17,183.907 4817.5,191.233 4826.52,191.233L5043.74,191.233C5052.77,191.233 5060.09,183.907 5060.09,174.884Z" style="fill:#565a75;"/>
                <path d="M4916.66,225.211L4853.82,225.211C4862.85,225.211 4870.18,217.312 4870.18,207.583C4870.18,197.853 4862.85,189.954 4853.82,189.954L4916.66,189.954C4907.64,189.954 4900.31,197.853 4900.31,207.583C4900.31,217.312 4907.64,225.211 4916.66,225.211Z" style="fill:#565a75;"/>
                <path d="M5117.47,240.282C5117.47,231.258 5110.15,223.932 5101.12,223.932L4769.14,223.932C4760.12,223.932 4752.79,231.258 4752.79,240.282C4752.79,249.305 4760.12,256.631 4769.14,256.631L5101.12,256.631C5110.15,256.631 5117.47,249.305 5117.47,240.282Z" style="fill:#565a75;"/>
            </g>
            <g>
                <path d="M2630.74,207.583C2630.74,198.559 2623.41,191.233 2614.39,191.233L2397.17,191.233C2388.14,191.233 2380.82,198.559 2380.82,207.583C2380.82,216.606 2388.14,223.932 2397.17,223.932L2614.39,223.932C2623.41,223.932 2630.74,216.606 2630.74,207.583Z" style="fill:#565a75;"/>
                <path d="M2487.31,257.91L2424.47,257.91C2433.49,257.91 2440.82,250.011 2440.82,240.282C2440.82,230.552 2433.49,222.653 2424.47,222.653L2487.31,222.653C2478.28,222.653 2470.96,230.552 2470.96,240.282C2470.96,250.011 2478.28,257.91 2487.31,257.91Z" style="fill:#565a75;"/>
                <path d="M2522.13,272.981C2522.13,263.957 2514.8,256.631 2505.78,256.631L2339.79,256.631C2330.76,256.631 2323.44,263.957 2323.44,272.981C2323.44,282.004 2330.76,289.33 2339.79,289.33L2505.78,289.33C2514.8,289.33 2522.13,282.004 2522.13,272.981Z" style="fill:#565a75;"/>
                <path d="M2440.82,338.378C2440.82,329.355 2433.49,322.029 2424.47,322.029L2339.79,322.029C2330.76,322.029 2323.44,329.355 2323.44,338.378C2323.44,347.402 2330.76,354.728 2339.79,354.728L2424.47,354.728C2433.49,354.728 2440.82,347.402 2440.82,338.378Z" style="fill:#565a75;"/>
            </g>
            <g>
                <path d="M3633.31,33.298C3633.31,24.275 3640.64,16.949 3649.66,16.949L3866.88,16.949C3875.9,16.949 3883.23,24.275 3883.23,33.298C3883.23,42.322 3875.9,49.648 3866.88,49.648L3649.66,49.648C3640.64,49.648 3633.31,42.322 3633.31,33.298Z" style="fill:#565a75;"/>
                <path d="M3776.74,83.626L3839.58,83.626C3830.55,83.626 3823.23,75.727 3823.23,65.997C3823.23,56.268 3830.55,48.369 3839.58,48.369L3776.74,48.369C3785.76,48.369 3793.09,56.268 3793.09,65.997C3793.09,75.727 3785.76,83.626 3776.74,83.626Z" style="fill:#565a75;"/>
                <path d="M3741.92,98.696C3741.92,89.673 3749.25,82.347 3758.27,82.347L3924.26,82.347C3933.28,82.347 3940.61,89.673 3940.61,98.696C3940.61,107.72 3933.28,115.046 3924.26,115.046L3758.27,115.046C3749.25,115.046 3741.92,107.72 3741.92,98.696Z" style="fill:#565a75;"/>
            </g>
            <g>
                <path d="M4320.44,372.635L4383.28,372.635C4374.25,372.635 4366.93,364.736 4366.93,355.007C4366.93,345.277 4374.25,337.378 4383.28,337.378L4320.44,337.378C4329.46,337.378 4336.79,345.277 4336.79,355.007C4336.79,364.736 4329.46,372.635 4320.44,372.635Z" style="fill:#565a75;"/>
                <path d="M4263.17,322.029C4263.17,313.005 4270.49,305.68 4279.52,305.68L4415.52,305.68C4424.55,305.68 4431.87,313.005 4431.87,322.029C4431.87,331.052 4424.55,338.378 4415.52,338.378L4279.52,338.378C4270.49,338.378 4263.17,331.052 4263.17,322.029Z" style="fill:#565a75;"/>
                <path d="M4263.17,386.985C4263.17,377.961 4270.49,370.635 4279.52,370.635L4610.95,370.635C4619.98,370.635 4627.3,377.961 4627.3,386.985C4627.3,396.008 4619.98,403.334 4610.95,403.334L4279.52,403.334C4270.49,403.334 4263.17,396.008 4263.17,386.985Z" style="fill:#565a75;"/>
            </g>
        </g>
        <rect id="_-box-" serif:id="{box}" x="3060.54" y="825.072" width="79.317" height="79.317" style="fill:none;stroke:#0f0f1b;stroke-width:5px;"/>
        <rect id="_-box-1" serif:id="{box}" x="3060.54" y="739.53" width="79.317" height="79.317" style="fill:none;stroke:#0f0f1b;stroke-width:5px;"/>
        <rect id="_-box-2" serif:id="{box}" x="3060.54" y="654.279" width="79.317" height="79.317" style="fill:none;stroke:#0f0f1b;stroke-width:5px;"/>
        <path id="foreground-shadow--parallax-front-" serif:id="foreground-shadow {parallax-front}" d="M-55.992,-318.083C-54.584,-381.148 893.841,-417.92 917.386,-346.106C946.71,-256.666 932.195,-14.502 964.232,233.749C967.325,257.713 928.686,281.734 932.728,305.68C936.833,330 983.634,354.242 988.886,378.269C1019.81,519.705 1072.09,653.665 1163.11,751.963C1202.98,795.015 1243.63,837.503 1284.62,878.85C1289.75,884.02 1282.93,902.639 1288.07,907.772C1292.99,912.69 1309.86,904.123 1314.78,909.005C1558.44,1150.4 1810.45,1346.81 1979.94,1378.34C2302.69,1438.38 2653.16,1325.89 2914.48,1239.66C2929.68,1234.64 2955.88,1268.21 2970.45,1263.4C2984.15,1258.9 2986.27,1216.01 2999.37,1211.76C3110.84,1175.59 3200.17,1149.95 3255.63,1154.83C3410.35,1168.42 3855.28,1252.52 4260.05,1320.54C4280.89,1324.04 4299.19,1352.48 4319.78,1355.89C4340.53,1359.32 4363.57,1337.72 4383.97,1341.03C4428.35,1348.24 4471.78,1355.12 4513.78,1361.56C4966.18,1430.92 5659.54,1437.48 6017.64,1391.4C6115.77,1378.78 6210.12,1347.37 6300.85,1305.14C6325.05,1293.88 6384.8,1333.12 6408.48,1320.48C6436.41,1305.56 6428.17,1238.51 6455.4,1222.13C6526.77,1179.17 6595.74,1132 6662.42,1085.08C6693.01,1063.55 6847,960.216 6936,899.288C6969.33,876.468 7012.09,912.856 7027.77,901.574C7068,872.639 7038.86,833.659 7081.49,800.626C7405.99,549.149 7809.03,148.29 7926.65,-353.544C8063.04,-935.435 8985.29,-738.732 8988.59,-699.369C8991.7,-662.334 9363.26,2416.97 9358.45,2574.52C9353.1,2750.18 -248.297,2571.07 -236.682,2484.64C-225.066,2398.22 -61.394,-76.153 -55.992,-318.083Z" style="fill:#313343;stroke:#313343;stroke-width:5px;"/>
        <g id="lock-weapon">
            <path d="M4235.81,650.63L4235.81,646.784L4235.81,646.784C4235.94,644.081 4238.24,641.927 4241.06,641.927C4243.87,641.927 4246.17,644.081 4246.3,646.784L4246.31,646.784L4246.31,650.63L4247.52,650.63C4248.09,650.63 4248.56,651.097 4248.56,651.672L4248.56,658.446C4248.56,659.021 4248.09,659.488 4247.52,659.488L4234.6,659.488C4234.02,659.488 4233.56,659.021 4233.56,658.446L4233.56,651.672C4233.56,651.097 4234.02,650.63 4234.6,650.63L4235.81,650.63ZM4243.71,650.63C4243.69,648.771 4243.68,647.06 4243.68,647.031C4243.68,645.623 4242.51,644.479 4241.06,644.479C4239.61,644.479 4238.43,645.623 4238.43,647.031C4238.43,647.06 4238.42,648.771 4238.4,650.63L4243.71,650.63Z" style="fill:#fafbf6;"/>
            <path d="M4246.31,648.284L4247.81,646.784L4247.81,649.147C4249.07,649.292 4250.06,650.368 4250.06,651.672L4250.06,658.446C4250.06,659.849 4248.92,660.988 4247.52,660.988L4234.6,660.988C4233.2,660.988 4232.06,659.849 4232.06,658.446L4232.06,651.672C4232.06,650.368 4233.04,649.292 4234.31,649.147L4234.31,646.784C4234.31,647.613 4234.98,648.284 4235.81,648.284L4235.81,650.63L4234.6,650.63C4234.02,650.63 4233.56,651.097 4233.56,651.672L4233.56,658.446C4233.56,659.021 4234.02,659.488 4234.6,659.488L4247.52,659.488C4248.09,659.488 4248.56,659.021 4248.56,658.446L4248.56,651.672C4248.56,651.097 4248.09,650.63 4247.52,650.63L4246.31,650.63L4246.31,648.284ZM4235.81,648.284C4235.4,648.282 4235.01,648.114 4234.73,647.818C4234.44,647.521 4234.29,647.121 4234.31,646.71C4234.49,643.226 4237.43,640.427 4241.06,640.427C4244.68,640.427 4247.63,643.226 4247.8,646.71L4246.32,648.267C4246.31,648.278 4246.31,648.284 4246.31,648.284L4246.31,646.784L4246.3,646.784C4246.17,644.081 4243.87,641.927 4241.06,641.927C4238.24,641.927 4235.94,644.081 4235.81,646.784L4235.81,646.784L4235.81,648.284ZM4243.71,650.63L4238.4,650.63C4238.42,648.771 4238.43,647.06 4238.43,647.031C4238.43,645.623 4239.61,644.479 4241.06,644.479C4242.51,644.479 4243.68,645.623 4243.68,647.031C4243.68,647.06 4243.69,648.771 4243.71,650.63ZM4242.2,649.13C4242.19,647.941 4242.18,647.052 4242.18,647.031C4242.18,646.438 4241.67,645.979 4241.06,645.979C4240.45,645.979 4239.93,646.438 4239.93,647.031C4239.93,647.052 4239.93,647.941 4239.91,649.13L4242.2,649.13Z" style="fill:#0f0f1b;"/>
            <path d="M4241.06,651.74C4242.89,651.74 4244.38,653.23 4244.38,655.064C4244.38,656.899 4242.89,658.388 4241.06,658.388C4239.22,658.388 4237.73,656.899 4237.73,655.064C4237.73,653.23 4239.22,651.74 4241.06,651.74ZM4240.39,655.579L4240.39,657.288C4240.39,657.344 4240.41,657.399 4240.45,657.439C4240.49,657.479 4240.55,657.502 4240.61,657.502L4241.51,657.502C4241.56,657.502 4241.62,657.479 4241.66,657.439C4241.7,657.399 4241.72,657.344 4241.72,657.288L4241.72,655.579C4242.24,655.33 4242.61,654.796 4242.61,654.178C4242.61,653.322 4241.91,652.627 4241.06,652.627C4240.2,652.627 4239.51,653.322 4239.51,654.178C4239.51,654.796 4239.87,655.33 4240.39,655.579Z" style="fill:#0f0f1b;"/>
            <g>
                <circle cx="4241.06" cy="655.001" r="2.433" style="fill:#fafbf6;"/>
                <path d="M4241.06,651.568C4242.95,651.568 4244.49,653.106 4244.49,655.001C4244.49,656.895 4242.95,658.433 4241.06,658.433C4239.16,658.433 4237.62,656.895 4237.62,655.001C4237.62,653.106 4239.16,651.568 4241.06,651.568ZM4241.06,652.568C4239.71,652.568 4238.62,653.658 4238.62,655.001C4238.62,656.343 4239.71,657.433 4241.06,657.433C4242.4,657.433 4243.49,656.343 4243.49,655.001C4243.49,653.658 4242.4,652.568 4241.06,652.568Z" style="fill:#0f0f1b;"/>
                <path d="M4241.06,655.001L4242.41,655.706" style="fill:none;stroke:#0f0f1b;stroke-width:0.65px;"/>
                <path d="M4241.06,655.001L4241.06,653.137" style="fill:none;stroke:#0f0f1b;stroke-width:0.65px;"/>
            </g>
        </g>
        <g id="Tutorial-12" serif:id="Tutorial 1">
            <path d="M1695.61,465.896C1704.48,461.612 1698,434.661 1707.03,438.623C1719.4,444.054 1764.57,453.282 1776.44,452.191C1784.8,451.423 1765.58,471.326 1771.81,476.948C1779.88,484.224 1819.6,477.829 1824.86,495.847C1831.46,518.472 1841.13,595.96 1811.45,612.699C1781.77,629.438 1673.09,620.982 1646.76,596.28C1620.42,571.578 1645.3,486.216 1653.44,464.486C1658.38,451.317 1686.68,470.207 1695.61,465.896Z" style="fill:#565a75;"/>
            <clipPath id="_clip5">
                <path d="M1695.61,465.896C1704.48,461.612 1698,434.661 1707.03,438.623C1719.4,444.054 1764.57,453.282 1776.44,452.191C1784.8,451.423 1765.58,471.326 1771.81,476.948C1779.88,484.224 1819.6,477.829 1824.86,495.847C1831.46,518.472 1841.13,595.96 1811.45,612.699C1781.77,629.438 1673.09,620.982 1646.76,596.28C1620.42,571.578 1645.3,486.216 1653.44,464.486C1658.38,451.317 1686.68,470.207 1695.61,465.896Z"/>
            </clipPath>
            <g clip-path="url(#_clip5)">
                <path d="M1774,453.609C1777.63,456.561 1771.55,480.177 1767.39,478.038C1743.31,465.638 1726.91,467.185 1699.22,469.87C1692.59,470.513 1698.61,435.91 1715.77,440.007C1738.29,445.384 1765.72,446.86 1774,453.609Z" style="fill:#313343;"/>
            </g>
            <path d="M1695.61,465.896C1704.48,461.612 1698,434.661 1707.03,438.623C1719.4,444.054 1764.57,453.282 1776.44,452.191C1784.8,451.423 1765.58,471.326 1771.81,476.948C1779.88,484.224 1819.6,477.829 1824.86,495.847C1831.46,518.472 1841.13,595.96 1811.45,612.699C1781.77,629.438 1673.09,620.982 1646.76,596.28C1620.42,571.578 1645.3,486.216 1653.44,464.486C1658.38,451.317 1686.68,470.207 1695.61,465.896Z" style="fill:none;stroke:#0f0f1b;stroke-width:10px;stroke-miterlimit:1.5;"/>
            <g id="space-text1" serif:id="space text">
                <path d="M1673.08,555.078C1671.18,556.525 1671.3,587.648 1673.21,588.694C1680.65,592.765 1710.28,594.347 1717.7,588.694C1720.33,586.686 1720.35,556.227 1717.7,554.775C1710.26,550.704 1680.49,549.425 1673.08,555.078Z" style="fill:#0f0f1b;stroke:#0f0f1b;stroke-width:5px;"/>
                <path d="M1675.43,556.001C1673.71,557.186 1673.82,582.673 1675.55,583.529C1682.28,586.863 1709.08,588.159 1715.79,583.529C1718.17,581.885 1718.19,556.942 1715.79,555.753C1709.06,552.419 1682.13,551.372 1675.43,556.001Z" style="fill:#fafbf6;"/>
                <path d="M1700.26,563.794C1700.29,562.965 1699.86,562.189 1699.13,561.786C1698.41,561.384 1697.52,561.423 1696.83,561.888C1694.2,563.667 1690.72,566.026 1688.46,567.559C1687.9,567.936 1687.55,568.548 1687.5,569.219C1687.45,569.89 1687.71,570.547 1688.21,571.001C1690.3,572.915 1693.58,575.919 1696.08,578.209C1696.71,578.787 1697.62,578.946 1698.41,578.616C1699.2,578.286 1699.73,577.528 1699.76,576.672C1699.91,572.847 1700.12,567.509 1700.26,563.794Z" style="fill:#0f0f1b;stroke:#0f0f1b;stroke-width:5px;"/>
            </g>
            <g id="space-text2" serif:id="space text">
                <path d="M1743.07,555.214C1741.17,556.66 1741.29,587.783 1743.2,588.829C1750.64,592.901 1780.27,594.482 1787.69,588.829C1790.32,586.822 1790.34,556.363 1787.69,554.911C1780.25,550.839 1750.48,549.561 1743.07,555.214Z" style="fill:#0f0f1b;stroke:#0f0f1b;stroke-width:5px;"/>
                <path d="M1745.42,556.137C1743.7,557.321 1743.81,582.808 1745.54,583.665C1752.27,586.999 1779.07,588.294 1785.78,583.665C1788.16,582.021 1788.18,557.078 1785.78,555.889C1779.05,552.555 1752.12,551.507 1745.42,556.137Z" style="fill:#fafbf6;"/>
                <path d="M1761.27,576.468C1761.29,577.297 1761.77,578.046 1762.52,578.404C1763.27,578.763 1764.15,578.67 1764.81,578.165C1767.32,576.231 1770.66,573.667 1772.83,572.002C1773.36,571.592 1773.67,570.96 1773.68,570.287C1773.69,569.614 1773.39,568.975 1772.87,568.551C1770.67,566.766 1767.21,563.964 1764.58,561.829C1763.91,561.289 1763,561.185 1762.23,561.562C1761.46,561.938 1760.98,562.727 1761,563.583C1761.08,567.41 1761.19,572.751 1761.27,576.468Z" style="fill:#0f0f1b;stroke:#0f0f1b;stroke-width:5px;"/>
            </g>
            <g id="sign-jump12" serif:id="sign-jump1">
                <path id="foot-front4" serif:id="foot-front" d="M1743.75,533.471C1743.02,532.821 1742.71,532.062 1742.95,531.193C1745.87,520.671 1740.16,501.175 1748.94,497.261C1759.43,492.591 1771.18,496.522 1773.27,506.114C1775.3,515.431 1777.43,524.16 1774.77,532.472C1774.42,533.558 1772.91,534.431 1770.73,535.081C1771.12,536.603 1771.66,538.791 1771.64,540.649C1771.58,546.605 1764.31,544.183 1764.35,541.04C1764.35,540.722 1763.81,538.72 1763.4,536.302C1759.25,536.624 1754.67,536.509 1750.88,535.934C1750.79,537.504 1750.64,539.801 1750.05,541.595C1748.18,547.251 1741.99,542.735 1742.98,539.751C1743.1,539.389 1743.2,536.484 1743.75,533.471Z" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:3px;"/>
                <path id="arm-right4" serif:id="arm-right" d="M1768.42,524.354C1772.75,526.324 1776.09,526.877 1776.01,527.522C1775.81,529.265 1772.61,530.69 1768.42,530.69C1764.24,530.69 1760.84,529.271 1760.84,527.522C1760.84,525.774 1764.89,522.743 1768.42,524.354Z" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:3px;"/>
                <path id="arm-left4" serif:id="arm-left" d="M1780.76,522.103C1782.91,522.864 1784.48,522.902 1784.51,523.275C1784.6,524.281 1783.31,525.355 1781.42,525.701C1779.53,526.046 1777.85,525.521 1777.67,524.528C1777.49,523.535 1779,521.48 1780.76,522.103Z" style="fill:#fafbf6;stroke:#0f0f1b;stroke-width:3px;"/>
            </g>
            <path d="M1674.25,521.868C1674.25,521.868 1717.47,509.086 1727.77,514.966" style="fill:none;stroke:#fafbf6;stroke-width:5px;"/>
            <path d="M1679.31,540.437C1679.31,540.437 1722.53,527.655 1732.83,533.535" style="fill:none;stroke:#fafbf6;stroke-width:5px;"/>
        </g>
        <circle id="goal--door---to-level0---goal-" serif:id="goal {door} {to-level0} {goal}" cx="6300.75" cy="763.159" r="30.661" style="fill:#f0e;"/>
        <circle id="_-spinningBar-" serif:id="{spinningBar}" cx="4586.95" cy="658.698" r="30.661" style="fill:#ff1717;"/>
        <circle id="_-timeCapsule-" serif:id="{timeCapsule}" cx="5645.24" cy="995.487" r="30.661" style="fill:#00f683;"/>
    </g>
</svg>

'''
'''--- public/assets/toki/spine/Hook.json ---
{
"skeleton": {
	"hash": "QGlDp0FJoAY",
	"spine": "4.1.20",
	"x": -88,
	"y": -104,
	"width": 176,
	"height": 208,
	"images": "../../AffinityDesigner/gamedevjs2023-toki/",
	"audio": ""
},
"bones": [
	{ "name": "root" }
],
"slots": [
	{ "name": "Hook", "bone": "root", "attachment": "Hook" }
],
"skins": [
	{
		"name": "default",
		"attachments": {
			"Hook": {
				"Hook": {
					"type": "mesh",
					"uvs": [ 0.72012, 0.04878, 0.83029, 0.11078, 0.95328, 0.21499, 0.99874, 0.32701, 1, 0.36107, 1, 0.43641, 0.96354, 0.55316, 0.87022, 0.64917, 0.81261, 0.66526, 0.81262, 0.79849, 0.74984, 0.90463, 0.67525, 0.96716, 0.56862, 1, 0.48428, 1, 0.43443, 0.9994, 0.29829, 0.9606, 0.21662, 0.88115, 0.16702, 0.79796, 0.13505, 0.68737, 0.1412, 0.65415, 0.03006, 0.55865, 0, 0.44176, 0, 0.35815, 2.7E-4, 0.30861, 0.04669, 0.18705, 0.12014, 0.09939, 0.24543, 0.02138, 0.3662, 0, 0.50222, 0, 0.5567, 0.0031 ],
					"triangles": [ 4, 2, 3, 24, 21, 22, 1, 2, 4, 5, 6, 4, 23, 24, 22, 19, 20, 21, 1, 4, 8, 6, 7, 4, 25, 27, 24, 24, 28, 21, 28, 19, 21, 27, 25, 26, 28, 24, 27, 0, 28, 29, 28, 8, 19, 8, 0, 1, 7, 8, 4, 8, 28, 0, 17, 19, 8, 18, 19, 17, 16, 17, 8, 16, 8, 14, 14, 8, 13, 16, 14, 15, 8, 9, 13, 13, 9, 10, 10, 12, 13, 11, 12, 10 ],
					"vertices": [ 38.74, 93.85, 58.13, 80.96, 79.78, 59.28, 87.78, 35.98, 88, 28.9, 88, 13.23, 81.58, -11.06, 65.16, -31.03, 55.02, -34.37, 55.02, -62.08, 43.97, -84.16, 30.84, -97.17, 12.08, -104, -2.77, -104, -11.54, -103.88, -35.5, -95.8, -49.87, -79.28, -58.6, -61.98, -64.23, -38.97, -63.15, -32.06, -82.71, -12.2, -88, 12.11, -88, 29.51, -87.95, 39.81, -79.78, 65.09, -66.85, 83.33, -44.8, 99.55, -23.55, 104, 0.39, 104, 9.98, 103.35 ],
					"hull": 30,
					"edges": [ 0, 58, 0, 2, 2, 4, 4, 6, 6, 8, 8, 10, 10, 12, 12, 14, 14, 16, 16, 18, 18, 20, 20, 22, 22, 24, 24, 26, 26, 28, 28, 30, 30, 32, 32, 34, 34, 36, 36, 38, 38, 40, 40, 42, 42, 44, 44, 46, 46, 48, 48, 50, 50, 52, 52, 54, 54, 56, 56, 58 ],
					"width": 176,
					"height": 208
				}
			}
		}
	}
],
"animations": {
	"idle": {}
}
}
'''
'''--- public/assets/toki/spine/box.json ---
{
"skeleton": {
	"hash": "Y1mEY+B6JiU",
	"spine": "4.1.20",
	"x": -82,
	"y": -82,
	"width": 164,
	"height": 164,
	"images": "../../AffinityDesigner/gamedevjs2023-toki/",
	"audio": ""
},
"bones": [
	{ "name": "root" }
],
"slots": [
	{ "name": "Box", "bone": "root", "attachment": "Box" }
],
"skins": [
	{
		"name": "default",
		"attachments": {
			"Box": {
				"Box": {
					"type": "mesh",
					"uvs": [ 1, 1, 0, 1, 0, 0, 1, 0 ],
					"triangles": [ 1, 2, 3, 1, 3, 0 ],
					"vertices": [ 82, -82, -82, -82, -82, 82, 82, 82 ],
					"hull": 4,
					"edges": [ 0, 2, 2, 4, 4, 6, 0, 6 ],
					"width": 164,
					"height": 164
				}
			}
		}
	}
],
"animations": {
	"idle": {}
}
}
'''
'''--- public/assets/toki/spine/door.json ---
{
"skeleton": {
	"hash": "bMf6HTpI1hI",
	"spine": "4.1.20",
	"x": -115,
	"y": -88,
	"width": 231,
	"height": 172,
	"images": "../../AffinityDesigner/gamedevjs2023-toki/",
	"audio": ""
},
"bones": [
	{ "name": "root" },
	{ "name": "door", "parent": "root", "length": 48 },
	{ "name": "bars", "parent": "root", "length": 31, "y": -80 },
	{ "name": "lock", "parent": "root", "length": 45.9, "x": -2.48, "y": -22.46 },
	{ "name": "lock-open", "parent": "lock", "length": 20.54, "rotation": 1.68, "y": 2.42 },
	{ "name": "lock-locked", "parent": "lock", "length": 19.94, "x": 0.6, "y": 2.42 },
	{ "name": "bone", "parent": "bars", "x": -76.56, "y": -6.43 },
	{ "name": "bone2", "parent": "bars", "x": -37.28, "y": -7.43 },
	{ "name": "bone3", "parent": "bars", "x": 0.02, "y": -8.42 },
	{ "name": "bone4", "parent": "bars", "x": 35.83, "y": -6.93 },
	{ "name": "bone5", "parent": "bars", "x": 73.13, "y": -7.43 }
],
"slots": [
	{ "name": "door-open", "bone": "door", "attachment": "door-open" },
	{ "name": "bars", "bone": "bars", "attachment": "bars" },
	{ "name": "lock-open", "bone": "lock-open", "attachment": "lock-open" },
	{ "name": "lock-locked", "bone": "lock-locked", "attachment": "lock-locked" }
],
"skins": [
	{
		"name": "default",
		"attachments": {
			"bars": {
				"bars": {
					"type": "mesh",
					"uvs": [ 0.75381, 0.09248, 1, 0.26226, 1, 0.30322, 1, 1, 0.90605, 1, 0.79891, 1, 0.6574, 1, 0.55026, 1, 0.42897, 1, 0.31676, 1, 0.20486, 1, 0.08054, 1, 0, 1, 1.0E-5, 0.2858, 0, 0.25669, 0.26088, 0.07578, 0.46829, 0.05287, 0.48774, 0.05073, 0.2489, 0.11021, 0.75105, 0.10666, 0.95321, 0.25006, 0.07486, 0.23299, 0.20627, 0.14028, 0.33548, 0.08864, 0.43736, 0.06327, 0.56159, 0.06641, 0.67205, 0.08988, 0.79919, 0.14081, 0.90669, 0.21706 ],
					"triangles": [ 4, 2, 3, 28, 4, 5, 6, 27, 5, 7, 8, 25, 9, 23, 8, 10, 22, 9, 10, 11, 21, 12, 13, 11, 24, 16, 17, 0, 26, 25, 25, 17, 0, 16, 24, 15, 23, 15, 24, 19, 26, 0, 18, 15, 23, 18, 22, 15, 28, 27, 0, 19, 0, 27, 0, 1, 28, 15, 22, 14, 1, 20, 28, 22, 21, 14, 13, 14, 21, 20, 1, 2, 23, 22, 18, 9, 22, 23, 8, 23, 24, 25, 24, 17, 7, 25, 26, 26, 6, 7, 27, 26, 19, 27, 6, 26, 2, 28, 20, 25, 8, 24, 27, 28, 5, 2, 4, 28, 22, 10, 21, 13, 21, 11 ],
					"vertices": [ 1, 2, 40.61, 138.11, 1, 1, 2, 80, 110.78, 1, 1, 2, 80, 104.18, 1, 2, 2, 80, -8, 7.4E-4, 10, 6.87, -0.57, 0.99926, 3, 2, 64.97, -8, 0.0153, 9, 29.14, -1.07, 0.16598, 10, -8.16, -0.57, 0.81871, 1, 9, 12, -1.07, 1, 1, 9, -10.64, -1.07, 1, 1, 8, 8.02, 0.42, 1, 1, 8, -11.39, 0.42, 1, 1, 7, 7.96, -0.57, 1, 1, 7, -9.95, -0.57, 1, 2, 6, 9.45, -1.57, 0.81628, 7, -29.84, -0.57, 0.18372, 1, 6, -3.44, -1.57, 1, 4, 2, -80, 106.99, 0.9469, 6, -3.44, 113.42, 0.0264, 7, -42.72, 114.41, 0.02495, 10, -153.13, 114.41, 0.00174, 4, 2, -80, 111.67, 0.99492, 6, -3.44, 118.11, 0.00252, 7, -42.72, 119.1, 0.00239, 10, -153.13, 119.1, 1.8E-4, 1, 2, -38.26, 140.8, 1, 1, 2, -5.07, 144.49, 1, 1, 2, -1.96, 144.83, 1, 1, 2, -40.18, 135.26, 1, 1, 2, 40.17, 135.83, 1, 1, 2, 72.51, 112.74, 1, 1, 2, -68.02, 115.49, 1, 2, 2, -47, 130.41, 0.98286, 7, -9.72, 137.84, 0.01714, 2, 2, -26.32, 138.73, 0.99429, 7, 10.95, 146.16, 0.00571, 1, 2, -10.02, 142.81, 1, 1, 2, 9.86, 142.31, 1, 1, 2, 27.53, 138.53, 1, 1, 2, 47.87, 130.33, 1, 1, 2, 65.07, 118.05, 1 ],
					"hull": 18,
					"edges": [ 28, 30, 34, 0, 0, 2, 24, 26, 26, 28, 30, 32, 32, 34, 2, 4, 4, 6, 40, 4, 26, 42, 22, 24, 42, 22, 36, 44, 44, 42, 20, 22, 44, 20, 46, 36, 18, 20, 46, 18, 34, 48, 48, 46, 16, 18, 48, 16, 34, 50, 14, 16, 50, 14, 38, 52, 52, 50, 12, 14, 52, 12, 38, 54, 10, 12, 54, 10, 40, 56, 56, 54, 6, 8, 8, 10, 56, 8 ],
					"width": 160,
					"height": 161
				}
			},
			"door-open": {
				"door-open": { "x": 0.5, "width": 231, "height": 168 }
			},
			"lock-locked": {
				"lock-locked": { "x": 0.5, "width": 69, "height": 80 }
			},
			"lock-open": {
				"lock-open": {
					"type": "mesh",
					"uvs": [ 0.62663, 0.01211, 0.71354, 0.05152, 0.87066, 0.18628, 0.87049, 0.34337, 0.62138, 0.36645, 0.57921, 0.25944, 0.48994, 0.22726, 0.39204, 0.29353, 0.39288, 0.45642, 0.99984, 0.45619, 1, 0.50581, 1, 1, 0.06918, 1, 0, 0.96751, 0, 0.48644, 0.07829, 0.45414, 0.12953, 0.45629, 0.12976, 0.23526, 0.20949, 0.09957, 0.36058, 0.01194 ],
					"triangles": [ 6, 19, 0, 18, 19, 6, 7, 17, 18, 5, 6, 0, 5, 0, 1, 5, 1, 2, 6, 7, 18, 3, 5, 2, 4, 5, 3, 7, 16, 17, 16, 7, 8, 16, 13, 14, 16, 14, 15, 12, 13, 16, 12, 16, 8, 8, 9, 10, 11, 8, 10, 12, 8, 11 ],
					"vertices": [ 11.01, 39.71, 16.91, 36.35, 27.43, 25.12, 27.04, 12.4, 9.81, 11.03, 7.15, 19.78, 1.07, 22.57, -5.84, 17.4, -6.17, 4.21, 35.7, 3, 35.59, -1.02, 34.41, -41.03, -29.79, -39.14, -34.48, -36.37, -33.33, 2.58, -27.86, 5.04, -24.33, 4.76, -23.79, 22.65, -17.96, 33.48, -7.34, 40.27 ],
					"hull": 20,
					"edges": [ 0, 38, 0, 2, 2, 4, 4, 6, 6, 8, 8, 10, 10, 12, 12, 14, 14, 16, 16, 18, 18, 20, 20, 22, 22, 24, 24, 26, 26, 28, 28, 30, 30, 32, 32, 34, 34, 36, 36, 38 ],
					"width": 69,
					"height": 81
				}
			}
		}
	}
],
"animations": {
	"locked": {
		"slots": {
			"lock-open": {
				"attachment": [
					{}
				]
			}
		}
	},
	"open": {
		"slots": {
			"bars": {
				"attachment": [
					{}
				]
			},
			"lock-locked": {
				"attachment": [
					{}
				]
			},
			"lock-open": {
				"attachment": [
					{}
				]
			}
		}
	},
	"still-locked": {
		"slots": {
			"lock-open": {
				"attachment": [
					{}
				]
			}
		},
		"bones": {
			"lock-locked": {
				"rotate": [
					{},
					{ "time": 0.1333, "value": -24.04 },
					{ "time": 0.2667, "value": 32.97 },
					{ "time": 0.4 }
				]
			}
		}
	},
	"unlock": {
		"slots": {
			"lock-locked": {
				"attachment": [
					{}
				]
			}
		},
		"bones": {
			"lock-open": {
				"rotate": [
					{ "value": 2.81 },
					{ "time": 0.1667, "value": 40.7 },
					{ "time": 0.4667, "value": 88.05 }
				],
				"translate": [
					{},
					{ "time": 0.1667, "x": -2.42, "y": -12.08 },
					{ "time": 0.4667, "x": -1.81, "y": -73.07 }
				],
				"scale": [
					{},
					{ "time": 0.3, "x": 0.706, "y": 0.706 },
					{ "time": 0.4667, "x": 0.157, "y": 0.157 }
				]
			},
			"bone": {
				"translate": [
					{},
					{ "time": 0.4667, "y": 120.73 }
				]
			},
			"bone2": {
				"translate": [
					{},
					{ "time": 0.4667, "y": 148.86 }
				]
			},
			"bone3": {
				"translate": [
					{},
					{ "time": 0.4667, "y": 154.19 }
				]
			},
			"bone4": {
				"translate": [
					{},
					{ "time": 0.4667, "y": 149.34 }
				]
			},
			"bone5": {
				"translate": [
					{},
					{ "time": 0.4667, "y": 123.64 }
				]
			}
		}
	}
}
}
'''
'''--- public/assets/toki/spine/hero.json ---
{
"skeleton": {
	"hash": "yORQQbVX3QQ",
	"spine": "4.1.20",
	"x": -48.94,
	"y": -30.6,
	"width": 136.38,
	"height": 146.6,
	"images": "../../AffinityDesigner/gamedevjs2023-toki/",
	"audio": "/Users/johnedvard/Library/CloudStorage/OneDrive-Personal/Spine/gamedevjs2023-toki"
},
"bones": [
	{ "name": "root" },
	{ "name": "body", "parent": "root", "length": 106, "y": 2 },
	{ "name": "foot-back", "parent": "root", "length": 37.7, "rotation": -111.8, "x": -23.93, "y": 11 },
	{ "name": "foot-front", "parent": "root", "length": 39.62, "rotation": -79.82, "x": 20, "y": 12 },
	{
		"name": "aim-hip-ik",
		"parent": "body",
		"length": 31.18,
		"rotation": 15.26,
		"x": 0.35,
		"y": 27.79,
		"color": "ff3f00ff"
	},
	{ "name": "arm-right", "parent": "aim-hip-ik", "length": 21.92, "rotation": -5.96, "x": -6.49, "y": 9.83 },
	{ "name": "arm-left", "parent": "aim-hip-ik", "length": 23.55, "rotation": -11.48, "x": 35.75, "y": -4.94 },
	{
		"name": "weapon-aim",
		"parent": "body",
		"length": 24.62,
		"rotation": 11.01,
		"x": 134.56,
		"y": 89.84,
		"color": "ff3f00ff"
	},
	{
		"name": "weapon-ik",
		"parent": "aim-hip-ik",
		"length": 21.8,
		"rotation": 0.08,
		"x": 69.1,
		"y": -11.64,
		"color": "ff3f00ff"
	},
	{ "name": "face", "parent": "body", "length": 40.36, "rotation": 47.41, "x": -3.49, "y": 45.67 },
	{ "name": "hat", "parent": "body", "length": 43.62, "rotation": 1.3, "x": -19.7, "y": 97.55 }
],
"slots": [
	{ "name": "arm-left", "bone": "arm-left", "attachment": "arm-left" },
	{ "name": "foot-front", "bone": "foot-front", "attachment": "foot-front" },
	{ "name": "foot-back", "bone": "foot-back", "attachment": "foot-back" },
	{ "name": "body", "bone": "body", "attachment": "body" },
	{ "name": "arm-right", "bone": "arm-right", "attachment": "arm-right" },
	{ "name": "lock-weapon", "bone": "weapon-ik", "attachment": "lock-weapon" },
	{ "name": "skins/green/hat", "bone": "hat", "attachment": "hat" }
],
"ik": [
	{
		"name": "hip-constraint",
		"order": 1,
		"bones": [ "weapon-ik" ],
		"target": "aim-hip-ik"
	},
	{
		"name": "weapon-constraint",
		"bones": [ "aim-hip-ik" ],
		"target": "weapon-aim"
	}
],
"skins": [
	{
		"name": "default",
		"attachments": {
			"lock-weapon": {
				"lock-weapon": { "x": 5.94, "y": 8.43, "rotation": 171.33, "width": 41, "height": 46 }
			}
		}
	},
	{
		"name": "blue",
		"attachments": {
			"arm-left": {
				"arm-left": {
					"type": "mesh",
					"uvs": [ 1, 1, 0, 1, 0, 0, 1, 0 ],
					"triangles": [ 1, 2, 3, 1, 3, 0 ],
					"vertices": [ 24.64, -5.71, -5.36, -5.71, -5.36, 16.29, 24.64, 16.29 ],
					"hull": 4,
					"edges": [ 0, 2, 2, 4, 4, 6, 0, 6 ],
					"width": 30,
					"height": 22
				}
			},
			"arm-right": {
				"arm-right": {
					"type": "mesh",
					"uvs": [ 1, 1, 0, 1, 0, 0, 1, 0 ],
					"triangles": [ 1, 2, 3, 1, 3, 0 ],
					"vertices": [ 50.96, -21.65, -0.04, -21.65, -0.04, 7.35, 50.96, 7.35 ],
					"hull": 4,
					"edges": [ 0, 2, 2, 4, 4, 6, 0, 6 ],
					"width": 51,
					"height": 29
				}
			},
			"body": {
				"body": {
					"type": "mesh",
					"uvs": [ 0.45574, 0, 0.54209, 0, 0.66348, 0.02252, 0.79029, 0.07551, 0.88367, 0.16676, 0.93935, 0.27114, 1, 0.5714, 1, 0.69432, 1, 0.78842, 0.96818, 0.89191, 0.88827, 0.95576, 0.71654, 1, 0.30528, 1, 0.10228, 0.96545, 0.01053, 0.88939, 0.00757, 0.80766, 0.03075, 0.69131, 0.03078, 0.26814, 0.06566, 0.14205, 0.17955, 0.04734, 0.34578, 6.8E-4, 0.39407, 0, 0.29177, 0.1095, 0.18039, 0.18132, 0.14017, 0.40961, 0.15254, 0.64302, 0.11542, 0.83283, 0.21442, 0.89696, 0.53618, 0.92004, 0.80226, 0.88413, 0.89817, 0.79436, 0.55475, 0.80462, 0.32889, 0.71741, 0.22989, 0.51221, 0.23917, 0.25827, 0.42171, 0.09411, 0.36911, 0.3224, 0.38149, 0.51477, 0.48359, 0.65328, 0.69397, 0.69432, 0.91364, 0.69945, 0.84557, 0.38139, 0.75275, 0.18902, 0.629, 0.11976 ],
					"triangles": [ 40, 7, 8, 30, 39, 40, 30, 40, 8, 31, 39, 30, 29, 31, 30, 14, 15, 26, 9, 30, 8, 29, 30, 9, 28, 32, 31, 28, 31, 29, 27, 32, 28, 10, 29, 9, 13, 14, 26, 13, 26, 27, 12, 27, 28, 13, 27, 12, 11, 28, 29, 11, 29, 10, 12, 28, 11, 35, 21, 0, 22, 19, 20, 20, 21, 35, 22, 20, 35, 43, 1, 2, 43, 2, 3, 35, 0, 1, 43, 35, 1, 23, 19, 22, 18, 19, 23, 42, 43, 3, 42, 3, 4, 34, 23, 22, 17, 18, 23, 17, 23, 34, 36, 22, 35, 34, 22, 36, 5, 41, 42, 5, 42, 4, 24, 17, 34, 33, 24, 34, 36, 33, 34, 37, 36, 41, 43, 36, 35, 42, 36, 43, 41, 36, 42, 33, 36, 37, 41, 5, 6, 25, 24, 33, 38, 37, 41, 39, 38, 41, 16, 17, 24, 16, 24, 25, 41, 40, 39, 6, 40, 41, 7, 40, 6, 32, 33, 37, 32, 37, 38, 25, 33, 32, 31, 38, 39, 32, 38, 31, 26, 16, 25, 26, 25, 32, 15, 16, 26, 27, 26, 32 ],
					"vertices": [ 1, 9, 50.1, 46.46, 1, 1, 9, 55.77, 40.3, 1, 1, 9, 61.8, 29.84, 1, 1, 9, 65.56, 16.59, 1, 1, 9, 63.83, 2.7, 1, 2, 9, 58.49, -9.54, 0.99401, 1, 43.12, 82.28, 0.00599, 2, 9, 36.61, -37.65, 0.70922, 1, 49, 47.15, 0.29078, 2, 9, 26.02, -47.38, 0.46279, 1, 49, 32.76, 0.53721, 2, 9, 17.92, -54.83, 0.27184, 1, 49, 21.75, 0.72816, 2, 9, 6.91, -60.75, 0.11189, 1, 45.91, 9.65, 0.88811, 2, 9, -3.83, -60.1, 0.02615, 1, 38.16, 2.18, 0.97385, 1, 1, 21.5, -3, 1, 2, 9, -45.91, -21.97, 0.17406, 1, -18.39, -3, 0.82594, 2, 9, -56.26, -4.74, 0.36744, 1, -38.08, 1.04, 0.63256, 2, 9, -55.73, 7.84, 0.45049, 1, -46.98, 9.94, 0.54951, 2, 9, -48.89, 14.52, 0.52645, 1, -47.27, 19.5, 0.47355, 2, 9, -37.34, 22.08, 0.70898, 1, -45.02, 33.12, 0.29102, 2, 9, -0.89, 55.58, 0.99985, 1, -45.01, 82.63, 1.5E-4, 1, 9, 12.26, 63.07, 1, 1, 9, 27.9, 62.44, 1, 1, 9, 42.83, 54.26, 1, 1, 9, 46.06, 50.87, 1, 1, 9, 29.91, 49.5, 1, 1, 9, 16.41, 51.77, 1, 2, 9, -5.89, 36.57, 0.98871, 1, -34.4, 66.08, 0.01129, 2, 9, -25.19, 17.2, 0.80309, 1, -33.2, 38.77, 0.19691, 2, 9, -43.97, 4.83, 0.4827, 1, -36.8, 16.56, 0.5173, 2, 9, -43, -7.32, 0.3452, 1, -27.2, 9.06, 0.6548, 2, 9, -23.87, -32.13, 0.06001, 1, 4.01, 6.35, 0.93999, 2, 9, -3.31, -48.29, 0.08187, 1, 29.82, 10.56, 0.91813, 2, 9, 10.72, -48.03, 0.2507, 1, 39.12, 21.06, 0.7493, 2, 9, -12.71, -24.32, 0.34177, 1, 5.81, 19.86, 0.65823, 2, 9, -20.02, -1.28, 0.68473, 1, -16.1, 30.06, 0.31527, 2, 9, -8.84, 22.04, 0.96259, 1, -25.7, 54.07, 0.03741, 1, 9, 13.64, 41.48, 1, 1, 9, 39.76, 41.44, 1, 1, 9, 16.65, 27.12, 1, 2, 9, 0.89, 11.01, 0.99677, 1, -11, 53.77, 0.00323, 2, 9, -4.34, -7.25, 0.84873, 1, -1.09, 37.57, 0.15127, 2, 9, 5.93, -25.52, 0.57864, 1, 19.32, 32.76, 0.42136, 2, 9, 19.91, -41.62, 0.45996, 1, 40.62, 32.16, 0.54004, 2, 9, 42.84, -11.57, 0.96981, 1, 34.02, 69.38, 0.03019, 1, 9, 53.32, 10.29, 1, 1, 9, 51.16, 24.61, 1 ],
					"hull": 22,
					"edges": [ 2, 4, 4, 6, 6, 8, 8, 10, 10, 12, 16, 18, 18, 20, 20, 22, 22, 24, 24, 26, 26, 28, 28, 30, 30, 32, 32, 34, 34, 36, 36, 38, 38, 40, 40, 42, 44, 68, 68, 66, 66, 64, 64, 62, 62, 60, 60, 16, 44, 40, 2, 0, 0, 42, 0, 70, 70, 72, 72, 74, 74, 76, 76, 78, 78, 80, 80, 82, 82, 84, 84, 86, 86, 70, 12, 14, 14, 16, 80, 14 ],
					"width": 97,
					"height": 117
				}
			},
			"foot-back": {
				"foot-back": {
					"type": "mesh",
					"uvs": [ 1, 1, 0, 1, 0, 0, 1, 0 ],
					"triangles": [ 1, 2, 3, 1, 3, 0 ],
					"vertices": [ 35.37, 23.55, 44, -9.33, -6.3, -22.54, -14.93, 10.35 ],
					"hull": 4,
					"edges": [ 0, 2, 2, 4, 4, 6, 0, 6 ],
					"width": 34,
					"height": 52
				}
			},
			"foot-front": {
				"foot-front": {
					"type": "mesh",
					"uvs": [ 1, 1, 0, 1, 0, 0, 1, 0 ],
					"triangles": [ 1, 2, 3, 1, 3, 0 ],
					"vertices": [ 45.15, 10.37, 36.58, -22.53, -12.77, -9.68, -4.21, 23.22 ],
					"hull": 4,
					"edges": [ 0, 2, 2, 4, 4, 6, 0, 6 ],
					"width": 34,
					"height": 51
				}
			}
		}
	},
	{
		"name": "green",
		"attachments": {
			"arm-left": {
				"arm-left": {
					"name": "skins/green/arm-left",
					"type": "mesh",
					"uvs": [ 0.52295, 0, 1, 0.18744, 1, 0.57368, 0.87087, 0.99826, 0.53983, 1, 0.02963, 1, 0.03182, 0.20496, 0.32698, 0 ],
					"triangles": [ 0, 1, 2, 2, 4, 0, 3, 4, 2, 7, 0, 4, 6, 7, 4, 5, 6, 4 ],
					"vertices": [ 10.39, 16.87, 24.7, 12.75, 24.7, 4.25, 20.83, -5.09, 10.9, -5.13, -4.41, -5.13, -4.34, 12.36, 4.51, 16.87 ],
					"hull": 8,
					"edges": [ 0, 14, 0, 2, 2, 4, 4, 6, 6, 8, 8, 10, 10, 12, 12, 14 ],
					"width": 30,
					"height": 22
				}
			},
			"arm-right": {
				"arm-right": {
					"name": "skins/green/arm-right",
					"type": "mesh",
					"uvs": [ 0.48104, 0, 1, 0.32923, 1, 0.62379, 0.89598, 0.99968, 0.79771, 1, 0.0173, 1, 0.01958, 0.17292, 0.31017, 0 ],
					"triangles": [ 4, 0, 1, 1, 2, 4, 3, 4, 2, 5, 7, 0, 5, 6, 7, 0, 4, 5 ],
					"vertices": [ 25.58, 8.62, 52.05, -0.93, 52.05, -9.47, 46.74, -20.37, 41.73, -20.38, 1.93, -20.38, 2.05, 3.6, 16.87, 8.62 ],
					"hull": 8,
					"edges": [ 0, 14, 0, 2, 2, 4, 4, 6, 6, 8, 8, 10, 10, 12, 12, 14 ],
					"width": 51,
					"height": 29
				}
			},
			"body": {
				"body": { "name": "skins/green/body", "type": "linkedmesh", "skin": "blue", "parent": "body", "width": 97, "height": 117 }
			},
			"foot-back": {
				"foot-back": {
					"name": "skins/green/foot-back",
					"type": "mesh",
					"uvs": [ 1, 1, 0, 1, 0, 0, 1, 0 ],
					"triangles": [ 1, 2, 3, 1, 3, 0 ],
					"vertices": [ 35.37, 23.55, 44, -9.33, -6.3, -22.54, -14.93, 10.35 ],
					"hull": 4,
					"edges": [ 0, 2, 2, 4, 4, 6, 0, 6 ],
					"width": 34,
					"height": 52
				}
			},
			"foot-front": {
				"foot-front": {
					"name": "skins/green/foot-front",
					"type": "mesh",
					"uvs": [ 1, 1, 0, 1, 0, 0, 1, 0 ],
					"triangles": [ 1, 2, 3, 1, 3, 0 ],
					"vertices": [ 45.15, 10.37, 36.58, -22.53, -12.77, -9.68, -4.21, 23.22 ],
					"hull": 4,
					"edges": [ 0, 2, 2, 4, 4, 6, 0, 6 ],
					"width": 34,
					"height": 51
				}
			},
			"skins/green/hat": {
				"hat": {
					"name": "skins/green/hat",
					"type": "mesh",
					"uvs": [ 0.64429, 0, 0.98953, 0.04704, 1, 0.33697, 1, 0.65384, 0.40366, 1, 0.18203, 1, 0.01124, 0.96905, 0.00718, 0.40489, 0.33671, 0 ],
					"triangles": [ 2, 0, 1, 5, 6, 7, 7, 4, 5, 4, 8, 0, 4, 7, 8, 2, 4, 0, 3, 4, 2 ],
					"vertices": [ 13.27, 34, 45.04, 30.85, 46, 11.42, 46, -9.81, -8.86, -33, -29.25, -33, -44.97, -30.93, -45.34, 6.87, -15.02, 34 ],
					"hull": 9,
					"edges": [ 0, 16, 0, 2, 2, 4, 4, 6, 6, 8, 8, 10, 10, 12, 12, 14, 14, 16 ],
					"width": 92,
					"height": 67
				}
			}
		}
	},
	{
		"name": "red",
		"attachments": {
			"arm-left": {
				"arm-left": { "name": "skins/red/arm-left", "x": 9.64, "y": 5.29, "width": 29, "height": 22 }
			},
			"arm-right": {
				"arm-right": { "name": "skins/red/arm-right", "x": 25.46, "y": -7.15, "width": 50, "height": 29 }
			},
			"body": {
				"body": { "name": "skins/red/body", "type": "linkedmesh", "skin": "blue", "parent": "body", "width": 96, "height": 117 }
			},
			"foot-back": {
				"foot-back": { "name": "skins/red/foot-back", "x": 14.54, "y": 0.51, "rotation": 104.71, "width": 33, "height": 52 }
			},
			"foot-front": {
				"foot-front": { "name": "skins/red/foot-front", "x": 16.19, "y": 0.35, "rotation": 75.41, "width": 34, "height": 51 }
			},
			"skins/green/hat": {
				"hat": { "name": "skins/red/hat", "x": 10.9, "y": 0.5, "width": 105, "height": 77 }
			}
		}
	}
],
"animations": {
	"idle": {
		"bones": {
			"aim-hip-ik": {
				"rotate": [
					{ "value": 4.09 }
				],
				"translate": [
					{ "y": -2.28 },
					{ "time": 0.6667, "x": 0.57, "y": -8.54 },
					{ "time": 1.3333, "y": -2.28 }
				]
			},
			"face": {
				"rotate": [
					{},
					{ "time": 0.6667, "value": -6.99 },
					{ "time": 1.3333 }
				]
			},
			"foot-back": {
				"rotate": [
					{},
					{ "time": 0.6667, "value": 3.81 },
					{ "time": 1.3333 }
				],
				"shear": [
					{},
					{ "time": 0.6667, "x": -4.28 },
					{ "time": 1.3333 }
				]
			},
			"foot-front": {
				"rotate": [
					{},
					{ "time": 0.6667, "value": 4.69 },
					{ "time": 1.3333 }
				],
				"shear": [
					{},
					{ "time": 0.6667, "x": -4.28 },
					{ "time": 1.3333 }
				]
			},
			"body": {
				"translate": [
					{},
					{ "time": 0.8, "y": -8.19 },
					{ "time": 1.3333 }
				]
			}
		}
	},
	"killed": {
		"bones": {
			"body": {
				"rotate": [
					{},
					{ "time": 0.5, "value": -83.72 }
				]
			},
			"foot-back": {
				"rotate": [
					{},
					{ "time": 0.5, "value": -99.22 }
				]
			},
			"foot-front": {
				"rotate": [
					{},
					{ "time": 0.5, "value": -111.08 }
				]
			}
		}
	},
	"walk": {
		"bones": {
			"foot-back": {
				"rotate": [
					{},
					{ "time": 0.5333, "value": 42.27 },
					{ "time": 1.0667 }
				],
				"translate": [
					{},
					{ "time": 0.5333, "x": 35.85, "y": -0.92 },
					{ "time": 1.0667 }
				]
			},
			"foot-front": {
				"rotate": [
					{ "value": 2.45 },
					{ "time": 0.5333, "value": -27.42 },
					{ "time": 1.0667, "value": 2.45 }
				],
				"translate": [
					{ "x": 4.7 },
					{ "time": 0.5333, "x": -31.14, "y": 0.42 },
					{ "time": 1.0667, "x": 4.7 }
				]
			},
			"body": {
				"translate": [
					{
						"curve": [ 0.178, 0, 0.356, 0, 0.178, 0, 0.356, -4.98 ]
					},
					{
						"time": 0.5333,
						"y": -4.98,
						"curve": [ 0.711, 0, 0.889, 0, 0.711, -4.98, 0.889, 0 ]
					},
					{ "time": 1.0667 }
				]
			},
			"root": {
				"translate": [
					{},
					{ "time": 0.5333, "y": 9.97 },
					{ "time": 1.0667 }
				]
			},
			"face": {
				"rotate": [
					{
						"curve": [ 0.201, 1.48, 0.373, 18.21 ]
					},
					{
						"time": 0.6333,
						"value": 17.68,
						"curve": [ 0.832, 17.27, 0.937, 2.48 ]
					},
					{ "time": 1.0667 }
				]
			},
			"hat": {
				"rotate": [
					{},
					{ "time": 0.7667, "value": 7.19 },
					{ "time": 1.0667 }
				],
				"translate": [
					{},
					{ "time": 0.3333, "x": -4.87, "y": -4.6 },
					{ "time": 0.7667, "x": -5.71, "y": -0.71 },
					{ "time": 1.0667 }
				]
			}
		}
	}
}
}
'''
'''--- public/assets/toki/spine/overlord.json ---
{
"skeleton": {
	"hash": "0sZZzhFC2k4",
	"spine": "4.1.20",
	"x": -231.23,
	"y": -530.93,
	"width": 569.23,
	"height": 958.23,
	"images": "../../AffinityDesigner/gamedevjs2023-toki/",
	"audio": ""
},
"bones": [
	{ "name": "root" },
	{ "name": "right-leg", "parent": "root", "length": 158.09, "rotation": -87.47, "x": -86.99, "y": -138.78 },
	{ "name": "right-knee", "parent": "right-leg", "length": 165.16, "rotation": 0.7, "x": 176.55, "y": -3.14 },
	{ "name": "right-shoe", "parent": "right-knee", "length": 84.41, "rotation": -85.32, "x": 169.8, "y": -0.26 },
	{ "name": "left-leg", "parent": "root", "length": 155.8, "rotation": -79.7, "x": 22.17, "y": -159.68 },
	{ "name": "left-knee", "parent": "left-leg", "length": 171.3, "rotation": 2.22, "x": 155.8 },
	{ "name": "left-shoe", "parent": "left-knee", "length": 63.39, "rotation": 69.04, "x": 180.37, "y": -2.02 },
	{ "name": "tail", "parent": "root", "length": 244.48, "rotation": 10.26, "x": 20.3, "y": -147.41 },
	{ "name": "bone2", "parent": "tail", "length": 179.97, "rotation": 101.41, "x": 247.14, "y": 1.85 },
	{ "name": "bone3", "parent": "bone2", "length": 90.29, "rotation": -57.37, "x": 179.97 },
	{ "name": "bone4", "parent": "bone3", "length": 61.69, "rotation": -76.09, "x": 89.77, "y": -3.2 },
	{ "name": "body", "parent": "root", "length": 167.46, "rotation": 88.78, "x": -41.11, "y": -107.01 }
],
"slots": [
	{ "name": "Overlord", "bone": "body", "attachment": "Overlord" }
],
"skins": [
	{
		"name": "default",
		"attachments": {
			"Overlord": {
				"Overlord": {
					"type": "mesh",
					"uvs": [ 0.56051, 0.13435, 0.68325, 0.2034, 0.67021, 0.21201, 0.57946, 0.21233, 0.56997, 0.24683, 0.5654, 0.36721, 0.53994, 0.39259, 0.6265, 0.44938, 0.65613, 0.46158, 0.73389, 0.35983, 0.78204, 0.36082, 0.85, 0.36221, 0.89303, 0.41691, 0.88682, 0.43927, 0.82101, 0.41121, 0.80665, 0.42279, 0.79093, 0.43547, 0.8013, 0.44912, 0.81304, 0.46458, 0.8857, 0.56022, 0.84053, 0.64147, 0.75294, 0.68391, 0.63292, 0.69355, 0.60769, 0.6867, 0.61762, 0.76954, 0.61933, 0.7838, 0.62077, 0.79586, 0.62356, 0.81913, 0.63041, 0.8763, 0.64392, 0.87576, 0.69357, 0.86604, 0.71252, 0.95229, 0.59544, 0.95227, 0.57702, 0.95226, 0.54886, 0.95349, 0.53413, 0.82148, 0.53161, 0.79892, 0.53033, 0.78743, 0.52882, 0.77397, 0.52614, 0.74992, 0.51079, 0.7504, 0.45946, 0.74844, 0.4638, 0.77695, 0.46648, 0.79454, 0.46642, 0.80819, 0.46632, 0.82766, 0.46593, 0.9093, 0.47867, 0.96009, 0.26355, 0.96171, 0.26401, 0.90102, 0.33962, 0.85665, 0.3546, 0.869, 0.36592, 0.82552, 0.37049, 0.80799, 0.3744, 0.79298, 0.37797, 0.77925, 0.25794, 0.69725, 0.29227, 0.4988, 0.36456, 0.41745, 0.38514, 0.4125, 0.23113, 0.27205, 0.28927, 0.19778, 0.42647, 0.12919, 0.61782, 0.66794, 0.61205, 0.62822, 0.64209, 0.62045, 0.6548, 0.5911, 0.69525, 0.58592, 0.71605, 0.56174, 0.72876, 0.5367, 0.71952, 0.50044, 0.69525, 0.47971, 0.68947, 0.45554, 0.68074, 0.48198, 0.70288, 0.50444, 0.71127, 0.53673, 0.69734, 0.56329, 0.67489, 0.57881, 0.65141, 0.58017 ],
					"triangles": [ 41, 57, 64, 13, 14, 12, 15, 10, 14, 14, 11, 12, 14, 10, 11, 72, 8, 9, 16, 72, 9, 9, 10, 16, 16, 10, 15, 19, 68, 69, 69, 18, 19, 69, 75, 70, 69, 70, 18, 74, 71, 70, 70, 17, 18, 70, 71, 17, 71, 73, 72, 71, 16, 17, 71, 72, 16, 75, 74, 70, 68, 75, 69, 23, 41, 64, 57, 59, 64, 22, 65, 21, 21, 65, 67, 65, 66, 67, 23, 63, 22, 22, 63, 65, 23, 64, 63, 59, 78, 64, 20, 21, 67, 67, 76, 68, 20, 67, 68, 63, 64, 65, 20, 68, 19, 66, 65, 64, 7, 59, 6, 66, 77, 67, 66, 64, 78, 7, 78, 59, 66, 78, 77, 67, 77, 76, 78, 76, 77, 78, 7, 8, 78, 75, 76, 73, 78, 8, 73, 74, 78, 76, 75, 68, 75, 78, 74, 6, 59, 4, 61, 4, 59, 61, 59, 60, 5, 6, 4, 62, 4, 61, 62, 3, 4, 3, 62, 0, 3, 0, 2, 2, 0, 1, 73, 8, 72, 74, 73, 71, 47, 51, 46, 47, 48, 51, 51, 49, 50, 51, 48, 49, 46, 51, 45, 45, 51, 52, 52, 53, 45, 45, 53, 44, 53, 54, 44, 44, 54, 43, 54, 55, 43, 55, 42, 43, 55, 41, 42, 55, 56, 41, 56, 57, 41, 59, 57, 58, 33, 34, 28, 32, 29, 31, 29, 30, 31, 32, 33, 28, 32, 28, 29, 28, 35, 27, 35, 28, 34, 35, 26, 27, 35, 36, 26, 36, 25, 26, 36, 37, 25, 37, 24, 25, 37, 38, 24, 38, 39, 24, 39, 23, 24, 39, 40, 23, 23, 40, 41 ],
					"vertices": [ 4, 1, -553.47, 163.58, 0.25193, 7, 132.51, 554.03, 0.36261, 8, 563.95, 3.14, 0.36261, 11, 530.23, -81.88, 0.02286, 4, 1, -469.42, 265.53, 0.24802, 7, 222.23, 457.03, 0.35599, 8, 451.12, -65.62, 0.35599, 11, 453.02, -189.11, 0.04, 3, 1, -460.01, 253.89, 0.25833, 7, 209.43, 449.28, 0.37083, 8, 446.05, -51.54, 0.37083, 4, 1, -463.09, 175.91, 0.24365, 7, 132.57, 462.82, 0.3523, 8, 474.53, 21.12, 0.34977, 11, 440.85, -100.09, 0.05429, 4, 1, -423.77, 166.01, 0.23217, 7, 117.47, 425.19, 0.33945, 8, 440.63, 43.37, 0.33123, 11, 400.97, -92.78, 0.09714, 4, 1, -285.53, 155.97, 0.21393, 7, 88.93, 289.55, 0.33304, 8, 313.32, 98.18, 0.29875, 11, 262.36, -91.79, 0.15429, 4, 1, -257.3, 132.81, 0.22195, 7, 62.18, 264.7, 0.36668, 8, 294.25, 129.31, 0.31709, 11, 232.69, -70.52, 0.09429, 4, 1, -188.72, 204.3, 0.19772, 7, 123.79, 187.12, 0.64237, 9, -56.92, 67.37, 0.00562, 11, 168.92, -146.34, 0.15429, 3, 1, -173.57, 229.14, 0.15913, 7, 146.37, 168.77, 0.7199, 9, -53.45, 38.48, 0.12097, 1, 9, 80.67, 52.53, 1, 1, 9, 103.92, 18.24, 1, 2, 9, 136.72, -30.15, 0.31744, 10, 37.45, 39.1, 0.68256, 1, 10, 95.19, -5.6, 1, 2, 9, 83.18, -107.63, 2.0E-5, 10, 99.79, -31.49, 0.99998, 3, 8, 185.09, -87.42, 0.01274, 9, 76.39, -42.82, 0.00822, 10, 35.25, -22.51, 0.97904, 3, 8, 177.26, -71.02, 0.07822, 9, 58.35, -40.58, 0.27173, 10, 28.73, -39.48, 0.65005, 3, 8, 168.69, -53.07, 0.29742, 9, 38.61, -38.12, 0.46416, 10, 21.6, -58.05, 0.23842, 3, 8, 150.8, -55.56, 0.61825, 9, 31.06, -54.52, 0.26609, 10, 35.71, -69.32, 0.11566, 3, 8, 130.53, -58.37, 0.82692, 9, 22.51, -73.11, 0.1203, 10, 51.7, -82.09, 0.05278, 2, 7, 320.43, 21.9, 0.00827, 8, 5.16, -75.8, 0.99173, 3, 5, -94.37, 269.71, 0, 7, 265.54, -63.22, 0.94114, 8, -67.42, -5.17, 0.05886, 3, 4, 85.62, 183, 0.02644, 5, -63.03, 185.58, 0, 7, 182.73, -97.87, 0.97356, 4, 4, 78.07, 79.46, 0.28486, 5, -74.59, 82.41, 0, 7, 79.18, -90.41, 0.50085, 11, -111.94, -157.83, 0.21429, 3, 4, 66.43, 59.52, 0.55575, 7, 59.23, -78.79, 0.32425, 11, -104.52, -135.97, 0.12, 3, 4, 161.76, 50.86, 0.32629, 5, 7.93, 50.59, 0.41371, 11, -199.66, -146.54, 0.26, 2, 4, 178.18, 49.37, 0.19307, 5, 24.27, 48.47, 0.80693, 2, 4, 192.06, 48.11, 0.07617, 5, 38.1, 46.67, 0.92383, 2, 4, 218.84, 45.68, 0.00233, 5, 64.76, 43.2, 0.99767, 2, 5, 130.27, 34.68, 0.92453, 6, 16.35, 59.91, 0.07547, 2, 5, 132.19, 46.15, 0.77657, 6, 27.75, 62.22, 0.22343, 2, 5, 130.53, 90.26, 0.54312, 6, 68.35, 79.55, 0.45688, 1, 6, 99.02, -16.27, 1, 1, 6, -0.59, -30.99, 1, 2, 5, 205.66, -29.11, 0.06401, 6, -16.26, -33.31, 0.93599, 2, 5, 201.79, -53.06, 0.10711, 6, -40.01, -38.26, 0.89289, 1, 5, 50.72, -32.47, 1, 2, 4, 181.81, -27.96, 0.04148, 5, 24.9, -28.95, 0.95852, 3, 4, 168.6, -26.68, 0.17984, 5, 11.75, -27.16, 0.81876, 1, 196.35, 104.52, 0.0014, 3, 4, 153.12, -25.18, 0.53307, 5, -3.66, -25.06, 0.45907, 1, 180.81, 103.91, 0.00786, 4, 4, 125.47, -22.5, 0.52209, 5, -31.18, -21.3, 0.00621, 1, 153.05, 102.82, 0.04313, 11, -178.75, -67.4, 0.42857, 3, 4, 123.66, -35.58, 0.59124, 1, 153.03, 89.61, 0.14876, 11, -179.59, -54.22, 0.26, 4, 4, 113.54, -78.62, 0.13351, 1, 148.83, 45.61, 0.35214, 2, -27.12, 49.08, 0.04292, 11, -178.27, -10.03, 0.47143, 3, 4, 146.5, -80.81, 0.04599, 1, 181.78, 47.89, 0.31484, 2, 5.86, 50.96, 0.63917, 3, 4, 166.83, -82.17, 0.01367, 1, 202.11, 49.3, 0.11253, 2, 26.2, 52.13, 0.8738, 3, 4, 182.27, -85.03, 0.00361, 1, 217.8, 48.56, 0.03628, 2, 41.88, 51.19, 0.96011, 2, 1, 240.19, 47.49, 0.00174, 2, 64.25, 49.85, 0.99826, 2, 2, 158.05, 44.23, 0.71463, 3, -45.3, -8.08, 0.28537, 1, 3, -48.1, 51.33, 1, 1, 3, 135.39, 27.72, 1, 2, 2, 138.76, -128.62, 0.06135, 3, 125.4, -41.41, 0.93865, 2, 2, 91.44, -60.82, 0.58813, 3, 53.96, -83.05, 0.41187, 2, 2, 106.35, -48.76, 0.72073, 3, 43.16, -67.2, 0.27927, 2, 2, 56.94, -36.22, 0.99257, 3, 26.63, -115.42, 0.00743, 1, 2, 37, -31.17, 1, 2, 1, 196.82, -29.73, 0.02287, 2, 19.95, -26.84, 0.97713, 2, 1, 181.17, -25.96, 0.18276, 2, 4.34, -22.88, 0.81724, 1, 1, 82.33, -124.93, 1, 4, 1, -144.56, -85.37, 0.49514, 7, -169.18, 182.33, 0.19829, 8, 259.28, 372.39, 0.11228, 11, 105.94, 139.82, 0.19429, 4, 1, -235.36, -19.14, 0.27684, 7, -91.33, 263.4, 0.28789, 8, 323.34, 280.05, 0.20956, 11, 200.87, 79.67, 0.22571, 4, 1, -240.28, -1.2, 0.28791, 7, -72.9, 265.86, 0.341, 8, 322.11, 261.5, 0.26537, 11, 206.95, 62.09, 0.10571, 4, 1, -407.62, -126.39, 0.21726, 7, -174.44, 448.52, 0.31237, 8, 521.24, 324.9, 0.3018, 11, 365.76, 197.94, 0.16857, 4, 1, -490.82, -72.68, 0.22622, 7, -110.03, 523.73, 0.32604, 8, 582.23, 246.88, 0.31916, 11, 452.28, 149.78, 0.12857, 4, 1, -564.48, 48.68, 0.25364, 7, 20.13, 580.4, 0.36499, 8, 612.03, 108.08, 0.36423, 11, 533.72, 33.49, 0.01714, 3, 4, 46.75, 71.96, 0.34348, 7, 71.66, -59.09, 0.50795, 11, -82.74, -144.23, 0.14857, 4, 4, 0.88, 75.25, 0.05143, 5, -151.89, 81.2, 0, 7, 74.91, -13.22, 0.67143, 11, -37.14, -138.29, 0.27714, 3, 4, -3.3, 102.27, 0.01985, 5, -155.01, 108.37, 0, 7, 101.93, -9.02, 0.98015, 2, 1, -24.69, 221.42, 0.00379, 7, 118.7, 22.28, 0.99621, 3, 1, -29.12, 256.44, 0.00115, 7, 153.99, 21.96, 0.88733, 8, 38.14, 87.34, 0.11152, 3, 1, -56.13, 275.53, 0.00203, 7, 176.55, 46.15, 0.59291, 8, 57.4, 60.44, 0.40506, 3, 1, -84.44, 287.73, 0.00301, 7, 192.44, 72.57, 0.27677, 8, 80.15, 39.64, 0.72021, 3, 1, -126.49, 281.62, 0.00737, 7, 192.05, 115.06, 0.12753, 8, 121.87, 31.62, 0.8651, 4, 1, -151.24, 261.82, 0.01971, 7, 175.76, 142.24, 0.15612, 8, 151.74, 42.21, 0.80579, 9, -50.77, -1.02, 0.01838, 4, 1, -179.26, 258.09, 0.01879, 7, 175.82, 170.51, 0.10548, 8, 179.44, 36.55, 0.70589, 9, -31.07, 19.26, 0.16985, 3, 1, -158.34, 241.99, 0.12409, 7, 165.66, 142.53, 0.77755, 9, -62.25, 4.77, 0.09836, 3, 1, -132.86, 260.9, 0.08941, 7, 179.32, 113.89, 0.84382, 9, -70.35, -25.91, 0.06678, 3, 1, -95.58, 267.73, 0.03081, 7, 178.86, 75.99, 0.94809, 9, -95.21, -54.51, 0.0211, 3, 1, -64.54, 255.57, 0.00904, 7, 160.96, 47.86, 0.98674, 9, -127.05, -64.4, 0.00422, 3, 1, -46.13, 236.27, 0.00554, 7, 138.49, 33.51, 0.99297, 9, -153.47, -60.82, 0.00149, 5, 4, -54.37, 116.45, 0.00183, 5, -205.5, 124.51, 0, 1, -43.94, 216.15, 0.02418, 7, 118.32, 35.22, 0.9734, 9, -167.75, -46.47, 5.9E-4 ],
					"hull": 63,
					"edges": [ 0, 124, 0, 2, 2, 4, 4, 6, 6, 8, 8, 10, 10, 12, 12, 14, 14, 16, 16, 18, 22, 24, 24, 26, 26, 28, 38, 40, 40, 42, 42, 44, 44, 46, 56, 58, 58, 60, 60, 62, 66, 68, 78, 80, 80, 82, 92, 94, 94, 96, 96, 98, 98, 100, 100, 102, 110, 112, 112, 114, 114, 116, 116, 118, 118, 120, 120, 122, 122, 124, 76, 78, 46, 48, 76, 48, 72, 52, 68, 70, 70, 72, 52, 54, 54, 56, 70, 54, 82, 84, 84, 86, 110, 84, 86, 88, 88, 106, 106, 108, 108, 110, 86, 108, 88, 90, 90, 92, 102, 104, 104, 106, 90, 104, 72, 74, 74, 76, 48, 50, 50, 52, 74, 50, 56, 68, 62, 64, 64, 66, 58, 64, 134, 42, 136, 40, 138, 38, 22, 28, 18, 20, 20, 22, 28, 30, 30, 32, 20, 30, 18, 32, 144, 32, 32, 34, 142, 34, 34, 36, 36, 38, 140, 36 ],
					"width": 860,
					"height": 1151
				}
			}
		}
	}
],
"animations": {
	"idle": {
		"bones": {
			"tail": {
				"rotate": [
					{ "value": 1.91 },
					{ "time": 0.6667, "value": 5.5 },
					{ "time": 1.3333, "value": 1.91 }
				]
			},
			"bone4": {
				"rotate": [
					{},
					{ "time": 0.9, "value": 37.9 },
					{ "time": 1.3333 }
				]
			},
			"bone2": {
				"rotate": [
					{},
					{ "time": 0.6667, "value": -14.99 },
					{ "time": 1.3333 }
				]
			},
			"bone3": {
				"rotate": [
					{},
					{ "time": 0.6667, "value": -5.57 },
					{ "time": 1.3333 }
				]
			}
		}
	}
}
}
'''
'''--- public/assets/toki/spine/sageFloating.json ---
{
"skeleton": {
	"hash": "ZuKdPdFCI8w",
	"spine": "4.1.20",
	"x": -412,
	"y": -334,
	"width": 824,
	"height": 668,
	"images": "../../AffinityDesigner/gamedevjs2023-toki/",
	"audio": ""
},
"bones": [
	{ "name": "root" }
],
"slots": [
	{ "name": "sage-floating", "bone": "root", "attachment": "sage-floating" }
],
"skins": [
	{
		"name": "default",
		"attachments": {
			"sage-floating": {
				"sage-floating": {
					"type": "mesh",
					"uvs": [ 0.46839, 0, 0.48891, 0, 0.5612, 0.03374, 0.59342, 0.04253, 0.60392, 0.17545, 0.55313, 0.3092, 0.65972, 0.48687, 0.76103, 0.42016, 0.90085, 0.18957, 0.9341, 0.18196, 1, 0.14675, 1, 0.1853, 0.98842, 0.27937, 0.96825, 0.32587, 0.83133, 0.48376, 0.84469, 0.52221, 0.70071, 0.63314, 0.7022, 0.79652, 0.77815, 0.80089, 0.7927, 0.8546, 0.76797, 0.93565, 0.76469, 0.95129, 0.72316, 0.99143, 0.67471, 1, 0.60749, 1, 0.53424, 0.96792, 0.41317, 0.9702, 0.34806, 0.99766, 0.17481, 0.96113, 0.1596, 0.952, 0.08507, 0.90547, 0.08432, 0.83896, 0.03945, 0.75367, 0.0384, 0.71894, 0.16551, 0.68427, 0.00496, 0.59087, 0.00437, 0.55715, 0, 0.40735, 0, 0.36989, 0.03631, 0.30943, 0.11325, 0.23433, 0.09241, 0.23041, 0.14458, 0.22977, 0.15037, 0.23928, 0.15085, 0.46459, 0.33548, 0.12363, 0.36517, 0.09686, 0.4264, 0.03092 ],
					"triangles": [ 9, 10, 11, 40, 41, 42, 12, 9, 11, 0, 1, 47, 1, 2, 47, 4, 2, 3, 12, 8, 9, 37, 38, 39, 13, 14, 7, 13, 8, 12, 13, 7, 8, 44, 36, 37, 40, 42, 43, 39, 40, 43, 39, 43, 44, 44, 37, 39, 35, 36, 44, 16, 6, 7, 16, 7, 14, 16, 14, 15, 5, 34, 44, 35, 44, 34, 47, 2, 4, 4, 46, 47, 32, 33, 34, 31, 32, 34, 5, 46, 4, 29, 30, 31, 19, 20, 17, 19, 17, 18, 20, 22, 17, 34, 29, 31, 45, 46, 5, 5, 44, 45, 28, 34, 27, 6, 34, 5, 6, 25, 34, 6, 16, 25, 29, 34, 28, 16, 17, 25, 17, 24, 25, 25, 26, 34, 20, 21, 22, 26, 27, 34, 17, 23, 24, 22, 23, 17 ],
					"vertices": [ -26.05, 334, -9.13, 334, 50.43, 311.46, 76.98, 305.59, 85.63, 216.8, 43.78, 127.45, 131.61, 8.77, 215.09, 53.33, 330.3, 207.37, 357.7, 212.45, 412, 235.97, 412, 210.22, 402.46, 147.38, 385.83, 116.32, 273.02, 10.85, 284.02, -14.84, 165.38, -88.94, 166.61, -198.07, 229.2, -201, 241.19, -236.87, 220.81, -291.02, 218.11, -301.46, 183.89, -328.28, 143.96, -334, 88.57, -334, 28.22, -312.57, -71.55, -314.09, -125.2, -332.44, -267.96, -308.03, -280.49, -301.93, -341.9, -270.85, -342.52, -226.42, -379.49, -169.45, -380.36, -146.25, -275.62, -123.09, -407.92, -60.7, -408.4, -38.18, -412, 61.89, -412, 86.91, -382.08, 127.3, -318.68, 177.47, -335.86, 180.08, -292.86, 180.51, -288.09, 174.16, -287.7, 23.65, -135.56, 251.42, -111.1, 269.29, -60.64, 313.34 ],
					"hull": 48,
					"edges": [ 0, 94, 0, 2, 2, 4, 4, 6, 6, 8, 8, 10, 10, 12, 12, 14, 14, 16, 16, 18, 18, 20, 20, 22, 22, 24, 24, 26, 26, 28, 28, 30, 30, 32, 32, 34, 34, 36, 36, 38, 38, 40, 40, 42, 42, 44, 44, 46, 46, 48, 48, 50, 50, 52, 52, 54, 54, 56, 56, 58, 58, 60, 60, 62, 62, 64, 64, 66, 66, 68, 68, 70, 70, 72, 72, 74, 74, 76, 76, 78, 78, 80, 80, 82, 82, 84, 84, 86, 86, 88, 88, 90, 90, 92, 92, 94 ],
					"width": 824,
					"height": 668
				}
			}
		}
	}
],
"animations": {
	"idle": {
		"bones": {
			"root": {
				"rotate": [
					{
						"value": -2.73,
						"curve": [ 0.089, 3.18, 0.296, 0.14 ]
					},
					{
						"time": 0.5,
						"value": -2.85,
						"curve": [ 0.706, -5.79, 0.91, -8.68 ]
					},
					{ "time": 1, "value": -2.73 }
				],
				"translate": [
					{
						"curve": [ 0.078, 0, 0.156, -3.84, 0.119, -10.07, 0.156, -4.45 ]
					},
					{
						"time": 0.2333,
						"x": -5.84,
						"y": -4.45,
						"curve": [ 0.322, -8.12, 0.411, -12.86, 0.322, -4.45, 0.379, 12.27 ]
					},
					{
						"time": 0.5,
						"x": -12.86,
						"y": 6.61,
						"curve": [ 0.667, -12.86, 0.833, 0, 0.663, -1.02, 0.833, 0 ]
					},
					{ "time": 1 }
				]
			}
		}
	}
}
}
'''
'''--- public/assets/toki/spine/skinSlot.json ---
{
"skeleton": {
	"hash": "MqB9WMwgmPo",
	"spine": "4.1.20",
	"x": -221.15,
	"y": -224.76,
	"width": 438,
	"height": 454,
	"images": "../../AffinityDesigner/gamedevjs2023-toki/",
	"audio": ""
},
"bones": [
	{ "name": "root" },
	{ "name": "slot-selected", "parent": "root", "length": 40.69, "x": -2.15, "y": 2.24 },
	{ "name": "bottom-right", "parent": "slot-selected", "length": 52.55, "x": 157.66, "y": -176.31 },
	{ "name": "upper-right", "parent": "slot-selected", "length": 44.08, "x": 171.22, "y": 167.83 },
	{ "name": "upper-left", "parent": "slot-selected", "length": 69.53, "rotation": 1.4, "x": -162.75, "y": 167.83 },
	{ "name": "bottom-left", "parent": "slot-selected", "length": 74.61, "rotation": 1.3, "x": -169.53, "y": -183.09 }
],
"slots": [
	{ "name": "storeInterface/slot1", "bone": "root", "attachment": "storeInterface/slot1" },
	{ "name": "storeInterface/slot selected", "bone": "slot-selected", "attachment": "storeInterface/slot selected" }
],
"skins": [
	{
		"name": "default",
		"attachments": {
			"storeInterface/slot1": {
				"storeInterface/slot1": { "x": 0.5, "y": 0.5, "width": 369, "height": 369 }
			},
			"storeInterface/slot selected": {
				"storeInterface/slot selected": {
					"type": "mesh",
					"uvs": [ 1, 0.27222, 1, 0.72031, 1, 1, 0.7361, 1, 0.29486, 1, 0, 1, 0, 0.75766, 0, 0.29462, 0, 0, 0.31034, 0, 0.74384, 0, 1, 0, 0.74384, 0.26848, 0.75159, 0.72778, 0.31421, 0.76886, 0.29486, 0.29462 ],
					"triangles": [ 4, 14, 3, 14, 4, 6, 4, 5, 6, 14, 6, 15, 3, 13, 2, 13, 1, 2, 3, 14, 13, 1, 13, 0, 13, 14, 15, 6, 7, 15, 15, 9, 12, 9, 15, 8, 15, 7, 8, 15, 12, 13, 13, 12, 0, 0, 12, 11, 12, 10, 11, 12, 9, 10 ],
					"vertices": [ 3, 3, 47.78, -64.42, 0.98903, 4, 380.06, -73.71, 0.00714, 5, 394.94, 277.6, 0.00383, 1, 2, 61.34, 76.29, 1, 1, 2, 61.34, -50.69, 1, 1, 2, -54.25, -50.69, 1, 1, 5, 78.66, -45.71, 1, 1, 5, -50.46, -42.77, 1, 1, 5, -47.96, 67.22, 1, 1, 4, -58.05, -73.2, 1, 1, 4, -54.79, 60.52, 1, 1, 4, 81.1, 57.21, 1, 1, 3, -64.42, 59.17, 1, 1, 3, 47.78, 59.17, 1, 2, 3, -64.42, -62.73, 0.99714, 5, 282.81, 281.85, 0.00286, 1, 2, -47.47, 72.9, 1, 1, 5, 89.52, 59.01, 1, 1, 4, 71.06, -76.35, 1 ],
					"hull": 12,
					"edges": [ 20, 22, 0, 22, 0, 2, 2, 4, 4, 6, 6, 8, 8, 10, 10, 12, 12, 14, 14, 16, 16, 18, 18, 20 ],
					"width": 438,
					"height": 454
				}
			}
		}
	}
],
"animations": {
	"idle": {
		"slots": {
			"storeInterface/slot selected": {
				"attachment": [
					{}
				]
			}
		}
	},
	"selected": {
		"bones": {
			"bottom-left": {
				"translate": [
					{},
					{ "time": 0.6667, "x": 16.95, "y": 20.34 },
					{ "time": 1.3333 }
				]
			},
			"bottom-right": {
				"translate": [
					{},
					{ "time": 0.6667, "x": -10.3, "y": 13.24 },
					{ "time": 1.3333 }
				]
			},
			"upper-left": {
				"translate": [
					{},
					{ "time": 0.6667, "x": 16.18, "y": -14.71 },
					{ "time": 1.3333 }
				]
			},
			"upper-right": {
				"translate": [
					{},
					{ "time": 0.6667, "x": -14.71, "y": -17.65 },
					{ "time": 1.3333 }
				]
			}
		}
	}
}
}
'''
'''--- public/assets/toki/spine/spinningBar.json ---
{
"skeleton": {
	"hash": "og0ZXXNJRLQ",
	"spine": "4.1.20",
	"x": -43,
	"y": -147.07,
	"width": 86,
	"height": 295.07,
	"images": "../../AffinityDesigner/gamedevjs2023-toki/",
	"audio": ""
},
"bones": [
	{ "name": "root" },
	{ "name": "safe-bar", "parent": "root", "x": -0.02, "y": -0.07 },
	{ "name": "unsafe-bar", "parent": "root", "x": -0.02, "y": -0.07 }
],
"slots": [
	{ "name": "unsafe-bar", "bone": "unsafe-bar", "attachment": "unsafe-bar" },
	{ "name": "safe-bar", "bone": "safe-bar", "attachment": "safe-bar" }
],
"skins": [
	{
		"name": "default",
		"attachments": {
			"safe-bar": {
				"safe-bar": { "y": 0.5, "width": 56, "height": 295 }
			},
			"unsafe-bar": {
				"unsafe-bar": {
					"type": "mesh",
					"uvs": [ 0.11466, 0, 0.86521, 0, 0.89416, 0.00295, 0.88422, 0.0138, 0.88403, 0.02865, 0.82576, 0.08825, 0.82573, 0.10938, 0.9631, 0.13796, 1, 0.14918, 1, 0.15808, 0.97351, 0.16892, 0.8258, 0.19966, 0.82594, 0.24437, 0.98674, 0.27907, 1, 0.28754, 1, 0.29206, 0.98063, 0.30302, 0.82578, 0.33509, 0.82692, 0.38077, 0.98145, 0.413, 1, 0.4231, 1, 0.43052, 0.9594, 0.44311, 0.82604, 0.47076, 0.82612, 0.5162, 0.97137, 0.54656, 1, 0.55618, 1, 0.566, 0.95838, 0.57871, 0.8267, 0.60611, 0.82571, 0.6507, 0.98363, 0.68507, 1, 0.69472, 1, 0.70521, 0.82581, 0.74299, 0.82637, 0.78726, 0.99875, 0.82359, 1, 0.82831, 1, 0.84163, 0.82584, 0.87744, 0.82575, 0.9095, 0.86689, 0.9555, 0.8958, 0.9846, 0.88178, 1, 0.11522, 1, 0.10703, 0.98344, 0.13346, 0.95105, 0.17424, 0.91485, 0.1731, 0.8783, 0, 0.84104, 0, 0.82745, 0.02962, 0.81759, 0.17372, 0.78736, 0.1742, 0.74157, 0.04938, 0.71686, 0, 0.70193, 0, 0.68815, 0.17398, 0.65179, 0.17387, 0.60714, 0, 0.5703, 0, 0.5585, 0.01262, 0.55014, 0.17382, 0.51573, 0.17258, 0.47048, 0.02179, 0.43993, 0, 0.42793, 0, 0.41771, 0.17382, 0.37939, 0.17419, 0.33469, 0.02715, 0.30576, 0, 0.29301, 0, 0.2842, 0.03786, 0.27365, 0.17409, 0.24453, 0.17328, 0.19882, 0.01697, 0.16821, 0, 0.15617, 0, 0.14574, 0.17001, 0.11023, 0.17188, 0.08774, 0.11628, 0.03219, 0.29753, 0.91577, 0.29753, 0.08978, 0.3685, 0.05795, 0.47768, 0.04363, 0.62508, 0.05636, 0.69059, 0.08342, 0.70151, 0.91259, 0.63054, 0.9476, 0.49952, 0.96352, 0.36304, 0.94283, 0.49952, 0.50198, 0.49952, 0.43991, 0.36304, 0.4606, 0.31936, 0.50517, 0.37941, 0.54973, 0.50498, 0.55928, 0.636, 0.54336, 0.69605, 0.50357, 0.64146, 0.45742 ],
					"triangles": [ 3, 1, 2, 4, 1, 3, 0, 83, 80, 1, 84, 0, 85, 84, 1, 4, 85, 1, 84, 83, 0, 86, 85, 4, 79, 80, 83, 5, 86, 4, 82, 79, 83, 6, 86, 5, 78, 79, 82, 75, 76, 77, 7, 8, 9, 78, 75, 77, 10, 7, 9, 74, 78, 82, 75, 78, 74, 11, 6, 7, 11, 7, 10, 6, 73, 74, 83, 84, 85, 13, 14, 15, 70, 71, 72, 16, 12, 13, 16, 13, 15, 69, 70, 72, 73, 11, 68, 72, 73, 68, 69, 72, 68, 83, 85, 86, 82, 83, 86, 74, 82, 86, 74, 86, 6, 6, 11, 73, 12, 68, 11, 17, 12, 16, 12, 17, 68, 64, 65, 66, 22, 19, 20, 92, 68, 17, 92, 17, 18, 67, 68, 92, 67, 64, 66, 22, 18, 19, 21, 22, 20, 99, 92, 18, 18, 23, 99, 93, 67, 92, 63, 64, 67, 93, 63, 67, 22, 23, 18, 91, 93, 92, 91, 92, 99, 98, 99, 23, 91, 99, 98, 94, 63, 93, 94, 93, 91, 62, 63, 94, 98, 23, 24, 97, 91, 98, 95, 94, 91, 96, 95, 91, 97, 96, 91, 25, 26, 27, 59, 60, 61, 28, 24, 25, 28, 25, 27, 29, 24, 28, 95, 58, 62, 95, 62, 94, 61, 62, 58, 59, 61, 58, 97, 24, 29, 24, 97, 98, 29, 96, 97, 96, 57, 58, 96, 58, 95, 54, 55, 56, 31, 32, 33, 57, 54, 56, 30, 53, 57, 54, 57, 53, 34, 30, 31, 34, 31, 33, 30, 96, 29, 30, 57, 96, 49, 50, 51, 37, 35, 36, 35, 53, 34, 37, 39, 35, 38, 39, 37, 48, 51, 52, 49, 51, 48, 53, 30, 34, 53, 39, 52, 35, 39, 53, 48, 52, 81, 52, 39, 87, 40, 87, 39, 81, 47, 48, 52, 87, 81, 90, 81, 87, 88, 90, 87, 89, 90, 88, 90, 44, 45, 43, 41, 42, 87, 40, 41, 41, 88, 87, 43, 88, 41, 89, 88, 43, 46, 47, 81, 90, 46, 81, 90, 45, 46, 44, 90, 89, 44, 89, 43 ],
					"vertices": [ 1, 0, -33.14, 148, 1, 1, 0, 31.41, 148, 1, 1, 0, 33.9, 147.13, 1, 1, 0, 33.04, 143.93, 1, 1, 0, 33.03, 139.55, 1, 1, 0, 28.02, 121.97, 1, 1, 0, 28.01, 115.73, 1, 1, 0, 39.83, 107.3, 1, 1, 0, 43, 103.99, 1, 1, 0, 43, 101.37, 1, 1, 0, 40.72, 98.17, 1, 1, 0, 28.02, 89.1, 1, 1, 0, 28.03, 75.91, 1, 1, 0, 41.86, 65.67, 1, 1, 0, 43, 63.18, 1, 1, 0, 43, 61.84, 1, 1, 0, 41.33, 58.61, 1, 1, 0, 28.02, 49.15, 1, 1, 0, 28.12, 35.67, 1, 1, 0, 41.4, 26.17, 1, 1, 0, 43, 23.19, 1, 1, 0, 43, 21, 1, 1, 0, 39.51, 17.28, 1, 1, 0, 28.04, 9.13, 1, 1, 0, 28.05, -4.28, 1, 1, 0, 40.54, -13.24, 1, 1, 0, 43, -16.07, 1, 1, 0, 43, -18.97, 1, 1, 0, 39.42, -22.72, 1, 1, 0, 28.1, -30.8, 1, 1, 0, 28.01, -43.96, 1, 1, 0, 41.59, -54.09, 1, 1, 0, 43, -56.94, 1, 1, 0, 43, -60.04, 1, 1, 0, 28.02, -71.18, 1, 1, 0, 28.07, -84.24, 1, 1, 0, 42.89, -94.96, 1, 1, 0, 43, -96.35, 1, 1, 0, 43, -100.28, 1, 1, 0, 28.02, -110.84, 1, 1, 0, 28.01, -120.3, 1, 1, 0, 31.55, -133.87, 1, 1, 0, 34.04, -142.46, 1, 1, 0, 32.83, -147, 1, 1, 0, -33.09, -147, 1, 1, 0, -33.8, -142.11, 1, 1, 0, -31.52, -132.56, 1, 1, 0, -28.02, -121.88, 1, 1, 0, -28.11, -111.1, 1, 1, 0, -43, -100.11, 1, 1, 0, -43, -96.1, 1, 1, 0, -40.45, -93.19, 1, 1, 0, -28.06, -84.27, 1, 1, 0, -28.02, -70.76, 1, 1, 0, -38.75, -63.47, 1, 1, 0, -43, -59.07, 1, 1, 0, -43, -55, 1, 1, 0, -28.04, -44.28, 1, 1, 0, -28.05, -31.11, 1, 1, 0, -43, -20.24, 1, 1, 0, -43, -16.76, 1, 1, 0, -41.91, -14.29, 1, 1, 0, -28.05, -4.14, 1, 1, 0, -28.16, 9.21, 1, 1, 0, -41.13, 18.22, 1, 1, 0, -43, 21.76, 1, 1, 0, -43, 24.78, 1, 1, 0, -28.05, 36.08, 1, 1, 0, -28.02, 49.27, 1, 1, 0, -40.67, 57.8, 1, 1, 0, -43, 61.56, 1, 1, 0, -43, 64.16, 1, 1, 0, -39.74, 67.27, 1, 1, 0, -28.03, 75.86, 1, 1, 0, -28.1, 89.35, 1, 1, 0, -41.54, 98.38, 1, 1, 0, -43, 101.93, 1, 1, 0, -43, 105.01, 1, 1, 0, -28.38, 115.48, 1, 1, 0, -28.22, 122.12, 1, 1, 0, -33, 138.51, 1, 1, 0, -17.41, -122.15, 1, 1, 0, -17.41, 121.51, 1, 1, 0, -11.31, 130.9, 1, 1, 0, -1.92, 135.13, 1, 1, 0, 10.76, 131.37, 1, 1, 0, 16.39, 123.39, 1, 1, 0, 17.33, -121.21, 1, 1, 0, 11.23, -131.54, 1, 1, 0, -0.04, -136.24, 1, 1, 0, -11.78, -130.13, 1, 1, 0, -0.04, -0.08, 1, 1, 0, -0.04, 18.23, 1, 1, 0, -11.78, 12.12, 1, 1, 0, -15.53, -1.02, 1, 1, 0, -10.37, -14.17, 1, 1, 0, 0.43, -16.99, 1, 1, 0, 11.7, -12.29, 1, 1, 0, 16.86, -0.55, 1, 1, 0, 12.17, 13.06, 1 ],
					"hull": 81,
					"edges": [ 0, 160, 0, 2, 2, 4, 4, 6, 6, 8, 8, 10, 10, 12, 12, 14, 14, 16, 16, 18, 18, 20, 20, 22, 22, 24, 24, 26, 26, 28, 28, 30, 30, 32, 32, 34, 34, 36, 36, 38, 38, 40, 40, 42, 42, 44, 44, 46, 46, 48, 48, 50, 50, 52, 52, 54, 54, 56, 56, 58, 58, 60, 60, 62, 62, 64, 64, 66, 66, 68, 68, 70, 70, 72, 72, 74, 74, 76, 76, 78, 78, 80, 80, 82, 82, 84, 84, 86, 86, 88, 88, 90, 90, 92, 92, 94, 94, 96, 96, 98, 98, 100, 100, 102, 102, 104, 104, 106, 106, 108, 108, 110, 110, 112, 112, 114, 114, 116, 116, 118, 118, 120, 120, 122, 122, 124, 124, 126, 126, 128, 128, 130, 130, 132, 132, 134, 134, 136, 136, 138, 138, 140, 140, 142, 142, 144, 144, 146, 146, 148, 148, 150, 150, 152, 152, 154, 154, 156, 156, 158, 158, 160 ],
					"width": 86,
					"height": 295
				}
			}
		}
	}
],
"animations": {
	"idle": {
		"bones": {
			"root": {
				"translate": [
					{
						"curve": [ 0.222, 0, 0.444, 0, 0.222, 0, 0.444, 1.92 ]
					},
					{
						"time": 0.6667,
						"y": 1.92,
						"curve": [ 0.889, 0, 1.111, 0, 0.889, 1.92, 1.111, 0 ]
					},
					{ "time": 1.3333 }
				],
				"scale": [
					{
						"curve": [ 0.222, 1, 0.444, 1.019, 0.222, 1, 0.444, 1.01 ]
					},
					{
						"time": 0.6667,
						"x": 1.019,
						"y": 1.01,
						"curve": [ 0.889, 1.019, 1.111, 1, 0.889, 1.01, 1.111, 1 ]
					},
					{ "time": 1.3333 }
				]
			}
		}
	}
}
}
'''
'''--- public/assets/toki/spine/storeBooth.json ---
{
"skeleton": {
	"hash": "Rdvc3faBTK0",
	"spine": "4.1.20",
	"x": -121,
	"y": -142,
	"width": 242,
	"height": 285,
	"images": "../../AffinityDesigner/gamedevjs2023-toki/",
	"audio": ""
},
"bones": [
	{ "name": "root" }
],
"slots": [
	{ "name": "store-booth", "bone": "root", "attachment": "store-booth" }
],
"skins": [
	{
		"name": "default",
		"attachments": {
			"store-booth": {
				"store-booth": { "y": 0.5, "width": 242, "height": 285 }
			}
		}
	}
],
"animations": {
	"idle": {}
}
}
'''
'''--- public/assets/toki/spine/storeInterface.json ---
{
"skeleton": {
	"hash": "mLnzlijFcas",
	"spine": "4.1.20",
	"x": -862,
	"y": -456,
	"width": 1766.61,
	"height": 964.53,
	"images": "../../AffinityDesigner/gamedevjs2023-toki/",
	"audio": ""
},
"bones": [
	{ "name": "root" },
	{ "name": "close-button", "parent": "root", "length": 77.01, "x": 809.61, "y": 413.53 },
	{ "name": "button", "parent": "root", "length": 175.79, "y": -258.47 },
	{ "name": "button-inside", "parent": "button", "length": 72.33, "rotation": 1.33, "x": -0.23, "y": 18.48 },
	{ "name": "button-outside", "parent": "button", "length": 40.36, "x": 4.82, "y": 75.66 }
],
"slots": [
	{ "name": "storeInterface/frame", "bone": "root", "attachment": "storeInterface/frame" },
	{ "name": "storeInterface/close button", "bone": "close-button", "attachment": "storeInterface/close button" },
	{ "name": "storeInterface/button", "bone": "button", "attachment": "storeInterface/button" }
],
"skins": [
	{
		"name": "default",
		"attachments": {
			"storeInterface/button": {
				"storeInterface/button": {
					"type": "mesh",
					"uvs": [ 1, 1, 0, 1, 0, 0, 1, 0, 0.05837, 0.19366, 0.06098, 0.76106, 0.94876, 0.78169, 0.95137, 0.19366 ],
					"triangles": [ 7, 4, 3, 5, 4, 7, 6, 5, 7, 5, 2, 4, 6, 7, 3, 5, 6, 0, 0, 6, 3, 3, 4, 2, 5, 1, 2, 1, 5, 0 ],
					"vertices": [ 1, 4, 317.18, -156.66, 1, 1, 4, -326.82, -156.66, 1, 1, 4, -326.82, 6.34, 1, 1, 4, 317.18, 6.34, 1, 1, 3, -283.36, 38.55, 1, 1, 3, -283.83, -53.95, 1, 1, 3, 287.66, -70.61, 1, 1, 3, 291.57, 25.18, 1 ],
					"hull": 4,
					"edges": [ 0, 2, 2, 4, 4, 6, 0, 6 ],
					"width": 644,
					"height": 163
				}
			},
			"storeInterface/close button": {
				"storeInterface/close button": { "width": 190, "height": 190 }
			},
			"storeInterface/frame": {
				"storeInterface/frame": { "y": 0.5, "width": 1724, "height": 913 }
			}
		}
	}
],
"animations": {
	"button-hover": {
		"bones": {
			"button-inside": {
				"scale": [
					{},
					{ "time": 0.6667, "x": 1.034, "y": 1.201 },
					{ "time": 1.3333 }
				]
			}
		}
	},
	"close-button-hover": {
		"bones": {
			"close-button": {
				"rotate": [
					{},
					{ "time": 0.6667, "value": 180 },
					{ "time": 1.3333, "value": 360 }
				]
			}
		}
	},
	"idle": {}
}
}
'''
'''--- public/assets/toki/spine/storeSpeechBubble.json ---
{
"skeleton": {
	"hash": "EoPVgk4/pFc",
	"spine": "4.1.20",
	"x": -187,
	"y": -114,
	"width": 375,
	"height": 229,
	"images": "../../AffinityDesigner/gamedevjs2023-toki/",
	"audio": ""
},
"bones": [
	{ "name": "root" }
],
"slots": [
	{ "name": "Store speech bubble", "bone": "root", "attachment": "Store speech bubble" }
],
"skins": [
	{
		"name": "default",
		"attachments": {
			"Store speech bubble": {
				"Store speech bubble": {
					"type": "mesh",
					"uvs": [ 1, 1, 0, 1, 0, 0, 1, 0 ],
					"triangles": [ 1, 2, 3, 1, 3, 0 ],
					"vertices": [ 188, -114, -187, -114, -187, 115, 188, 115 ],
					"hull": 4,
					"edges": [ 0, 2, 2, 4, 4, 6, 0, 6 ],
					"width": 375,
					"height": 229
				}
			}
		}
	}
],
"animations": {
	"hidden": {
		"slots": {
			"Store speech bubble": {
				"attachment": [
					{}
				]
			}
		}
	},
	"idle": {
		"bones": {
			"root": {
				"translate": [
					{},
					{ "time": 1.3333, "y": 3.64 },
					{ "time": 2.6667 }
				],
				"scale": [
					{},
					{ "time": 1.3333, "x": 1.015, "y": 1.015 },
					{ "time": 2.6667 }
				]
			}
		}
	}
}
}
'''
'''--- public/assets/toki/spine/timeCapsule.json ---
{
"skeleton": {
	"hash": "prCkxMQZspg",
	"spine": "4.1.20",
	"x": -83,
	"y": -112,
	"width": 167,
	"height": 225,
	"images": "../../AffinityDesigner/gamedevjs2023-toki/",
	"audio": ""
},
"bones": [
	{ "name": "root" },
	{ "name": "hour-glass", "parent": "root", "length": 26.34, "x": 0.53, "y": 0.17 },
	{ "name": "sand-grain", "parent": "hour-glass", "x": -0.53, "y": 23.37 },
	{ "name": "sand-grain-mesh-bone", "parent": "sand-grain", "length": 11.82, "x": -0.09, "y": -0.1 }
],
"slots": [
	{ "name": "time-capsule", "bone": "hour-glass", "attachment": "time-capsule" },
	{ "name": "sand-grain", "bone": "sand-grain", "attachment": "sand-grain" }
],
"skins": [
	{
		"name": "default",
		"attachments": {
			"sand-grain": {
				"sand-grain": {
					"type": "mesh",
					"uvs": [ 0.81772, 0, 1, 0.29404, 1, 0.80554, 0.72526, 1, 0.27536, 1, 0, 0.70779, 0, 0.33276, 4.2E-4, 0.21558, 0.2418, 0 ],
					"triangles": [ 8, 5, 6, 1, 4, 8, 1, 3, 4, 2, 3, 1, 1, 8, 0, 4, 5, 8, 8, 6, 7 ],
					"vertices": [ 1, 3, 5.81, 9.1, 1, 1, 3, 9.09, 4.1, 1, 1, 3, 9.09, -4.59, 1, 1, 3, 4.14, -7.9, 1, 1, 3, -3.95, -7.9, 1, 1, 3, -8.91, -2.93, 1, 1, 3, -8.91, 3.44, 1, 1, 3, -8.9, 5.44, 1, 1, 3, -4.56, 9.1, 1 ],
					"hull": 9,
					"edges": [ 0, 16, 0, 2, 2, 4, 4, 6, 6, 8, 8, 10, 10, 12, 12, 14, 14, 16 ],
					"width": 18,
					"height": 17
				}
			},
			"time-capsule": {
				"time-capsule": { "x": -0.03, "y": 0.33, "width": 167, "height": 225 }
			}
		}
	}
],
"animations": {
	"collected": {
		"slots": {
			"sand-grain": {
				"attachment": [
					{ "time": 0.5667 }
				]
			},
			"time-capsule": {
				"attachment": [
					{ "time": 0.5667 }
				]
			}
		},
		"bones": {
			"root": {
				"rotate": [
					{},
					{ "time": 0.2667, "value": 360 },
					{ "time": 0.5333, "value": 720 }
				],
				"scale": [
					{},
					{ "time": 0.2667, "x": 0.616, "y": 0.562 },
					{ "time": 0.5333, "x": 0.171, "y": 0.131 }
				]
			}
		}
	},
	"idle": {
		"bones": {
			"sand-grain": {
				"translate": [
					{},
					{ "time": 0.8, "y": -87.32 },
					{ "time": 0.9, "y": -91.98 }
				],
				"scale": [
					{},
					{ "time": 0.3333, "x": 0.894, "y": 1.069 }
				]
			},
			"sand-grain-mesh-bone": {
				"scale": [
					{ "time": 0.7333 },
					{ "time": 0.8667, "x": 1.478, "y": 0.554 },
					{ "time": 1, "x": 1.646, "y": 0.431 }
				]
			},
			"hour-glass": {
				"rotate": [
					{
						"value": 6.45,
						"curve": [ 0.167, 6.45, 0.333, -6.45 ]
					},
					{
						"time": 0.5,
						"value": -6.45,
						"curve": [ 0.667, -6.45, 0.833, 6.45 ]
					},
					{ "time": 1, "value": 6.45 }
				]
			}
		}
	}
}
}
'''
'''--- public/logo.svg ---
<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 358.43 358.43"><defs><style>.cls-1{fill:#191919;}.cls-2{fill:#fff;fill-rule:evenodd;}</style></defs><rect class="cls-1" width="358.43" height="358.43"/><path class="cls-2" d="M108.52,99.68h97.21a44.17,44.17,0,0,1,15.72,85.46l28.46,73.61H231l-27.35-70.7H126.2v53h60L179.4,223.4H143.87V205.72h47.64l20.5,53H108.52V170.38h97.21a26.52,26.52,0,0,0,0-53H126.2V152.7H108.52v-53Z"/></svg>
'''
'''--- public/manifest.json ---
{
  "background_color": "black",
  "description": "Moons of Terra",
  "display": "fullscreen",
  "icons": [
    {
      "src": "logo.png",
      "sizes": "3586x3586",
      "type": "image/png"
    }
  ],
  "name": "Moons of Terra",
  "short_name": "Moons of Terra",
  "start_url": "index.html",
  "orientation": "landscape-primary"
}

'''
'''--- src/Game.ts ---
import { Game } from 'phaser';
import 'phaser/plugins/spine4.1/dist/SpinePlugin';

import { getCanvas } from '~/utils/gameUtils';
import { SceneKey } from '~/enums/SceneKey';
import { Boot } from '~/scenes/Boot';
import { Preload } from '~/scenes/Preload';
import { MainMenu } from '~/scenes/MainMenu';
import { NewGameIntro } from '~/scenes/NewGameIntro';
import { UserInterface } from '~/scenes/UserInterface';

import { Level } from './scenes/Level';
import { SceneInput } from './scenes/SceneInput';
import { StoreInterface } from './scenes/StoreInterface';
import { destroySceneHandler, initSceneHandler } from './sceneHandler';
import { initContract } from './near/nearConnection';
import { MatterGravityFixPlugin } from './plugins/MatterGravityFixPlugin';
import { DialogInterface } from './scenes/DialogInterface';
import { emit } from './utils/eventEmitterUtils';
import { GameEvent } from './enums/GameEvent';

const addScenes = (game: Game) => {
  game.scene.add(SceneKey.Preload, Preload);
  game.scene.add(SceneKey.MainMenu, MainMenu);
  game.scene.add(SceneKey.NewGameIntro, NewGameIntro);
  game.scene.add(SceneKey.UserInterface, UserInterface);
  game.scene.add(SceneKey.Level, Level);
  game.scene.add(SceneKey.SceneInput, SceneInput);
  game.scene.add(SceneKey.StoreInterface, StoreInterface);
  game.scene.add(SceneKey.DialogInterface, DialogInterface);
  game.scene.add(SceneKey.Boot, Boot, true);
};

export class Toki {
  game: Game;
  constructor() {
    initContract();
    this.game = new Game({
      type: Phaser.WEBGL,
      canvas: getCanvas(),
      width: 2560, // 16:9 ratio
      height: 1440,
      backgroundColor: '#565A75',
      // pixelArt: true,
      physics: {
        default: 'matter',
        matter: {
          // debug: true, // TODO (johnedvard) remove debug if production
          gravity: { y: 5 },
        },
      },
      input: {
        gamepad: true,
      },
      plugins: {
        scene: [
          {
            key: 'SpinePlugin',
            plugin: window['SpinePlugin'],
            mapping: 'spine',
            sceneKey: 'spine',
          },
          {
            key: 'MatterGravityFixPlugin',
            plugin: MatterGravityFixPlugin,
            mapping: 'matterGravityFix',
            start: true,
          },
        ],
      },
      scale: {
        mode: Phaser.Scale.FIT,
        autoCenter: Phaser.Scale.CENTER_BOTH,
      },
    });
    addScenes(this.game);
    initSceneHandler(this.game);
    this.game.scene.start(SceneKey.SceneInput);
  }
  destroyGame() {
    emit(GameEvent.destroyGame);
    destroySceneHandler();
    this.game.destroy(true);
    this.game = null;
  }
}

'''
'''--- src/enums/BodyTypeLabel.ts ---
/**
 * Used to filter objects when we check for objects collisions within proximity
 */
export enum BodyTypeLabel {
  player = 'player',
  box = 'box',
  spinningBar = 'spinningBar',
  store = 'store',
  collisionWall = 'collisionWalll',
  proximity = 'proximity',
  constraint = 'constraint',
  timeCapsule = 'timeCapsule',
  platform = 'platform',
}

'''
'''--- src/enums/ControllerEvent.ts ---
export enum ControllerEvent {
  action = 'controllerAction',
  shoot = 'controllerShoot',
  inventory = 'controllerInventory',
  move = 'controllerMove',
  jump = 'controllerJump',
  up = 'controllerUp',
}

'''
'''--- src/enums/DepthGroup.ts ---
// order is important, becaise first item in enum is 0
export enum DepthGroup {
  back,
  door,
  store,
  player,
  spinningBar,
  box,
  front,
}

'''
'''--- src/enums/GameEvent.ts ---
export enum GameEvent {
  openStore = 'openStore',
  closeStore = 'closeStore',
  changeSkin = 'changeSkin',
  timeLock = 'timeLock',
  goToLevel = 'goToLevel',
  kill = 'kill',
  startDialog = 'startDialog',
  endDialog = 'endDialog',
  collectTimeCapsule = 'collectTimeCapsule',
  restartLevel = 'restartLevel',
  onPlatform = 'onPlatform',
  offPlatform = 'offPlatform',
  grabObject = 'grabObject',
  throwObject = 'throwObject',
  releaseObject = 'releaseObject',
  destroyGame = 'destroyGame',
}

'''
'''--- src/enums/NearEvent.ts ---
export enum NearEvent {
  login = 'near-login',
  logout = 'near-logout',
  buyNft = 'near-buy-nft',
}

'''
'''--- src/enums/SceneKey.ts ---
export enum SceneKey {
  Preload = 'Preload',
  MainMenu = 'MainMenu',
  NewGameIntro = 'NewGameIntro',
  Level = 'Level',
  UserInterface = 'UserInterface',
  Boot = 'Boot',
  Settings = 'Settings',
  SceneInput = 'SceneInput',
  StoreInterface = 'StoreInterface',
  DialogInterface = 'DialogInterface',
}

'''
'''--- src/enums/ShaderType.ts ---
export enum ShaderType {
  wavy = 'wavy',
  dissolve = 'dissolve',
}

'''
'''--- src/gameState.ts ---
import { SaveGameState } from './types/SaveGameState';
import { SaveLevelState } from './types/SaveLevelState';
import { getItem, setItem } from './utils/storageUtils';

let gameState: SaveGameState = {}; // state while playing the game
let isGameLoaded = false;

export const getGameState = (): SaveGameState => {
  return gameState;
};

export const loadGame = (): SaveGameState => {
  if (isGameLoaded) return gameState; // return the current game state if game was already loaded
  const saveFileString = getItem('saveFile');
  isGameLoaded = true;
  if (saveFileString) {
    gameState = JSON.parse(saveFileString);
  }
  return gameState;
};

/**
 * Update the savedGameState with the current game state and store to localStorage
 */
const saveGame = (): void => {
  setItem('saveFile', JSON.stringify(gameState));
};

export const saveLevelComplete = ({ levelId, collectedCapsules }: SaveLevelState) => {
  let bestScore = collectedCapsules;
  if (gameState[levelId] > bestScore) bestScore = gameState[levelId];
  gameState[levelId] = bestScore;
  saveGame();
};

export const getSaveFile = () => {
  const saveFile = getItem('saveFile');
  if (!saveFile) return null;
  return JSON.parse(saveFile);
};

export const hasSaveFile = (): boolean => {
  if (!isGameLoaded) loadGame();
  return Object.keys(gameState).length > 0;
};

export const isLevelComplete = (levelId: string) => {
  return Boolean(gameState[levelId] >= 0);
};

'''
'''--- src/gameobjects/Box.ts ---
import { Scene } from 'phaser';
import { BodyTypeLabel } from '~/enums/BodyTypeLabel';
import { DepthGroup } from '~/enums/DepthGroup';
import { GameEvent } from '~/enums/GameEvent';
import { IGameObject } from '~/interfaces/IGameObject';
import { off, on } from '~/utils/eventEmitterUtils';
import { commonTimeLock, setBodyMapping, stopCompletely } from '~/utils/gameUtils';
import { destroyObject } from '~/utils/gameobjectUtils';

type TProps = {
  pos: Phaser.Math.Vector2;
  width: number;
  height: number;
};
export class Box implements IGameObject {
  body: MatterJS.BodyType;
  spineObject: SpineGameObject;
  width = 10;
  height = 10;

  constructor(private scene: Scene, { pos, width, height }: TProps) {
    this.height = height;
    this.width = width;
    this.createBody(pos);
    this.initSpineObject(pos);
    this.listenForEvents();
    setBodyMapping(this.body, this);
  }
  private createBody(pos: Phaser.Math.Vector2) {
    const startPosX = pos.x;
    const startPosY = pos.y;

    this.body = this.scene.matter.add.rectangle(startPosX, startPosY, this.width, this.height, {
      frictionAir: 0.05,
      friction: 0.5,
      label: BodyTypeLabel.box,
      mass: 5,
      restitution: 0,
    });
  }
  private initSpineObject(pos: Phaser.Math.Vector2) {
    this.spineObject = this.scene.add.spine(pos.x, pos.y, 'box', 'idle', true).setDepth(DepthGroup.box);
    const scale = this.width / this.spineObject.width;
    this.spineObject.setScale(scale - 0.07);
  }

  updateSpineObject() {
    if (!this.body) return;
    const { x, y } = this.body.position;
    this.spineObject.setPosition(x, y);
    this.spineObject.rotation = this.body.angle;
  }

  update(time: number, delta: number) {
    this.updateSpineObject();
  }

  isGrabbable() {
    // TODO (johnedvard) Maybe prevent grabbing in certain situations
    return !this.body.isStatic;
  }

  onTimeLock = ({ body }: { body: MatterJS.BodyType }) => {
    if (body && body === this.body) {
      stopCompletely(this.scene, this.body);
      commonTimeLock(this.scene, this.body);
    }
  };

  listenForEvents = () => {
    on(GameEvent.timeLock, this.onTimeLock);
  };

  stopListeningForEvents = () => {
    off(GameEvent.timeLock, this.onTimeLock);
  };

  destroy() {
    destroyObject(this.scene, this);
  }
}

'''
'''--- src/gameobjects/ChainImage.ts ---
import { Scene } from 'phaser';
import { ChainImageState } from '~/types/ChainImageState';

/**
 * Used in a pool for the @see StasisChain
 */
export class ChainImage extends Phaser.GameObjects.Image {
  lifeTime = 500;
  maxLifeTime = 500;
  unitLength = 60;
  preDelay = 10; // adding on average 1 chain per frame
  ellapsedDelayTime = 0;
  chainState: ChainImageState = 'inactive';
  isLockAnimation = true;
  originPos: Phaser.Math.Vector2;

  constructor(scene: Scene) {
    super(scene, 0, 0, 'chain');
    this.setTint(0x313343);
  }

  private playAnimation(startPos: Phaser.Math.Vector2, endPos: Phaser.Math.Vector2, index: number) {
    this.setActive(true);
    this.setVisible(false);
    const angle = Phaser.Math.Angle.Between(startPos.x, startPos.y, endPos.x, endPos.y);
    this.setRotation(angle);
    this.setScale(0.25);
    this.setPosition(
      startPos.x + this.unitLength * index * Math.cos(angle),
      startPos.y + this.unitLength * index * Math.sin(angle)
    );
    this.setActive(true);
    this.setVisible(false);
    this.setChainState('predelay');
  }

  lockAnimation(startPos: Phaser.Math.Vector2, endPos: Phaser.Math.Vector2, index: number, totalChainUnits: number) {
    if (!startPos || !endPos) return;
    this.isLockAnimation = true;
    this.preDelay = this.preDelay * (totalChainUnits - index);

    this.playAnimation(startPos, endPos, index);
  }

  unlockAnimation(startPos: Phaser.Math.Vector2, endPos: Phaser.Math.Vector2, index: number) {
    if (!startPos || !endPos) return;
    this.isLockAnimation = false;
    this.playAnimation(startPos, endPos, index);
  }

  setChainState(state: ChainImageState) {
    if (this.chainState === state) return;
    this.chainState = state;
    switch (state) {
      case 'started':
        this.setActive(true);
        this.setVisible(true);
        break;
      case 'ended':
        this.setActive(false);
        this.setVisible(false);
        break;
    }
  }

  // Used for the chain to know in which direction it should move
  setOriginPos(pos: Phaser.Math.Vector2) {
    this.originPos = pos;
  }

  update(time: number, delta: number) {
    if (this.chainState === 'inactive' || this.chainState === 'ended') return;
    if (this.chainState === 'predelay') {
      this.ellapsedDelayTime += delta;
      if (this.ellapsedDelayTime >= this.preDelay) this.setChainState('started');
      return;
    }

    this.lifeTime -= delta;
    if (this.lifeTime <= this.maxLifeTime - 250) {
      this.setAlpha(this.lifeTime / (this.maxLifeTime - 250));
    }
    if (this.lifeTime <= 0) {
      this.setChainState('ended');
    }
    if (!this.isLockAnimation) {
      this.updateUnlock(time, delta);
    }
  }

  updateUnlock(time: number, delta: number) {
    if (!this.originPos) return;
    const angle = Phaser.Math.Angle.Between(this.originPos.x, this.originPos.y, this.x, this.y);
    const speedX = (this.lifeTime / 90) * Math.cos(angle);
    const speedY = (this.lifeTime / 90) * Math.sin(angle);
    this.setPosition(this.x + speedX, this.y + speedY);
  }
}

'''
'''--- src/gameobjects/Door.ts ---
import { Scene } from 'phaser';
import { BodyTypeLabel } from '~/enums/BodyTypeLabel';
import { ControllerEvent } from '~/enums/ControllerEvent';
import { DepthGroup } from '~/enums/DepthGroup';
import { GameEvent } from '~/enums/GameEvent';
import { getGameState, isLevelComplete } from '~/gameState';
import { IGameObject } from '~/interfaces/IGameObject';
import { DoorState } from '~/types/DoorState';
import { emit, off, on } from '~/utils/eventEmitterUtils';
import { destroyObject } from '~/utils/gameobjectUtils';
import { playUnlockDoor } from '~/utils/soundUtils';

type TProps = {
  pos: Phaser.Math.Vector2;
  goToLevelId: string;
  isGoal?: boolean;
  canUnlock?: boolean;
  numCapsules: number;
};

export class Door implements IGameObject {
  body: MatterJS.BodyType;
  goToLevelId: string;
  spineObject: SpineGameObject;
  timeCapsuesBitmap: Phaser.GameObjects.BitmapText;
  spineTimeCapsule: SpineGameObject;
  isGoal: boolean;
  numTimeCapsules: number;
  isDoorUnlocked: boolean;
  canUnlock: boolean;
  state: DoorState;
  numCapsules: number;
  collectedCapsules: number;

  constructor(private scene: Scene, { pos, goToLevelId, isGoal, canUnlock, numCapsules }: TProps) {
    this.numCapsules = numCapsules;
    this.canUnlock = canUnlock;
    this.isGoal = isGoal;
    this.goToLevelId = goToLevelId;
    this.isDoorUnlocked = isGoal || isLevelComplete(goToLevelId);
    this.createBody(pos);
    this.createSpineObject(pos);
    this.listenForEvents();
    this.setCollectedCapsules();
    this.createTimeCapsuleText(pos);
    this.setState(this.isDoorUnlocked ? 'open' : 'locked');
  }
  private createBody(pos: Phaser.Math.Vector2) {
    this.body = this.scene.matter.add.circle(pos.x, pos.y, 100, {
      isSensor: true,
      isStatic: true,
      label: BodyTypeLabel.proximity,
    });
    this.body.onCollideCallback = ({ bodyA, bodyB }) => {
      if (bodyB?.label === BodyTypeLabel.player && this.state === 'locked' && this.canUnlock) {
        this.setState('open');
        this.spineObject?.play('unlock');
        playUnlockDoor();
      }
    };
  }
  createTimeCapsuleText(pos: Phaser.Math.Vector2) {
    if (this.isGoal) return;
    this.timeCapsuesBitmap = this.scene.add
      .bitmapText(pos.x - 20, pos.y - 120, 'atari', '', 32, 0)
      .setDepth(DepthGroup.door);
    this.timeCapsuesBitmap.setText(`${this.collectedCapsules || 0}/${this.numCapsules}`);
  }
  setState(state: DoorState) {
    if (this.state === state) return;
    this.state = state;
    switch (state) {
      case 'open':
        this.spineObject.play('open');
        break;
      case 'locked':
        this.spineObject.play('close');
        break;
      default:
    }
  }
  setCollectedCapsules() {
    if (this.isGoal) return;
    const collectedCapsules = getGameState()[this.goToLevelId];
    if (collectedCapsules) this.collectedCapsules = collectedCapsules;
  }
  createSpineObject(pos: Phaser.Math.Vector2) {
    this.spineObject = this.scene.add.spine(pos.x, pos.y, 'door', 'close', true).setDepth(DepthGroup.door);
    if (!this.isGoal) {
      this.spineTimeCapsule = this.scene.add
        .spine(pos.x - 50, pos.y - 100, 'timeCapsule')
        .setDepth(DepthGroup.door)
        .setScale(0.2);
    }
  }
  update(time: number, delta: number) {}
  openDoor = () => {
    if (!this.body) return;
    const allObjectsInProximity = this.scene.matter.intersectBody(this.body);
    for (let obj of allObjectsInProximity) {
      const other = <MatterJS.BodyType>obj;
      if (other.label === BodyTypeLabel.player) {
        // TODO (make proper game state debug tool)
        if (this.state !== 'open') {
          this.spineObject.play('still-locked');
          return;
        } else {
          emit(GameEvent.goToLevel, { levelId: this.goToLevelId });
        }
      }
    }
  };

  isGrabbable() {
    return false;
  }

  destroy() {
    if (this.spineTimeCapsule) {
      this.spineTimeCapsule.destroy();
      this.spineTimeCapsule = null;
    }
    if (this.timeCapsuesBitmap) {
      this.timeCapsuesBitmap.destroy();
    }
    destroyObject(this.scene, this);
  }

  stopListeningForEvents() {
    off(ControllerEvent.up, this.openDoor);
  }

  private listenForEvents() {
    on(ControllerEvent.up, this.openDoor);
  }
}

'''
'''--- src/gameobjects/Hook.ts ---
import { Scene } from 'phaser';
import { BodyTypeLabel } from '~/enums/BodyTypeLabel';
import { DepthGroup } from '~/enums/DepthGroup';
import { GameEvent } from '~/enums/GameEvent';
import { IGameObject } from '~/interfaces/IGameObject';
import { off, on } from '~/utils/eventEmitterUtils';
import { commonTimeLock, stopCompletely } from '~/utils/gameUtils';
import { destroyObject } from '~/utils/gameobjectUtils';

type TProps = {
  pos: Phaser.Math.Vector2;
  pathToFollow?: Phaser.Curves.Path;
};
export class Hook implements IGameObject {
  body: MatterJS.BodyType;
  bodyConstraint: MatterJS.BodyType;
  constraint: MatterJS.ConstraintType;
  spineObject: SpineGameObject;
  pathToFollow: Phaser.Curves.Path;
  playerConstraint: MatterJS.ConstraintType;
  patrolTime = 500;
  timeAlive = 0;
  radius = 60;

  constructor(private scene: Scene, { pos, pathToFollow }: TProps) {
    this.timeAlive = (Math.PI / -2) * pathToFollow.getLength(); // set in order to start path from 0, and not 0.5
    this.pathToFollow = pathToFollow;
    this.createBody(pos);
    this.initSpineObject(pos);
    this.listenForEvents();
  }
  private createBody(pos: Phaser.Math.Vector2) {
    const startPosX = pos.x;
    const startPosY = pos.y;

    this.bodyConstraint = this.scene.matter.add.circle(startPosX + this.radius / 2, startPosY + this.radius / 2, 10, {
      isSensor: true,
      isStatic: true,
      label: BodyTypeLabel.constraint,
    });

    this.body = this.scene.matter.add.circle(startPosX, startPosY, this.radius, {
      label: BodyTypeLabel.platform,
      friction: 1,
      mass: 10,
    });

    this.scene.matter.body.setInertia(this.body, Infinity); // prevent body from rotating

    this.body.onCollideCallback = ({ bodyA, bodyB }) => {
      if (bodyB.label === BodyTypeLabel.player && !this.body.isStatic && !this.playerConstraint) {
        this.playerConstraint = this.scene.matter.add.constraint(bodyB, this.bodyConstraint, 100, 0.05);
      }
    };

    this.constraint = this.scene.matter.add.constraint(this.body, this.bodyConstraint, 0, 1);
  }
  private initSpineObject(pos: Phaser.Math.Vector2) {
    this.spineObject = this.scene.add.spine(pos.x, pos.y, 'hook', 'idle', true).setDepth(DepthGroup.box).setScale(0.5);
  }

  followPath(time: number, delta: number) {
    if (this.body.isStatic || !this.playerConstraint) return;
    this.timeAlive += delta;
    // TODO (johnedvard) move to other file
    const s = 0.5 + 0.5 * Math.sin(this.timeAlive / this.pathToFollow.getLength());
    const p = this.pathToFollow.getPoint(s);
    this.bodyConstraint.position.x = p.x;
    this.bodyConstraint.position.y = p.y;
  }
  updateSpineObject() {
    const { x, y } = this.body.position;
    this.spineObject.setPosition(x, y);
  }

  update(time: number, delta: number) {
    if (this.body.isStatic && this.playerConstraint) {
      this.scene.matter.world.removeConstraint(this.playerConstraint);
      this.playerConstraint = null;
    }
    this.followPath(time, delta);
    this.updateSpineObject();
  }

  isGrabbable() {
    return false;
  }

  onTimeLock = ({ body }: { body: MatterJS.BodyType }) => {
    if (body && body === this.body) {
      stopCompletely(this.scene, this.body);
      commonTimeLock(this.scene, this.body);
    }
  };

  listenForEvents = () => {
    on(GameEvent.timeLock, this.onTimeLock);
  };

  stopListeningForEvents() {
    off(GameEvent.timeLock, this.onTimeLock);
  }

  destroy() {
    if (this.bodyConstraint) {
      this.scene.matter.world.remove(this.bodyConstraint);
      this.bodyConstraint = null;
    }
    if (this.constraint) {
      this.scene.matter.world.removeConstraint(this.constraint, true);
      this.constraint = null;
    }
    destroyObject(this.scene, this);
  }
}

'''
'''--- src/gameobjects/Platform.ts ---
import { GameObjects, Scene } from 'phaser';

import { BodyTypeLabel } from '~/enums/BodyTypeLabel';
import { DepthGroup } from '~/enums/DepthGroup';
import { GameEvent } from '~/enums/GameEvent';
import { IGameObject } from '~/interfaces/IGameObject';
import { emit, off, on } from '~/utils/eventEmitterUtils';
import { commonTimeLock, stopCompletely } from '~/utils/gameUtils';
import { destroyObject } from '~/utils/gameobjectUtils';

type CollideCallback = {
  bodyA: MatterJS.BodyType;
  bodyB: MatterJS.BodyType;
};

type TProps = {
  pos: Phaser.Math.Vector2;
  width: number;
  height: number;
  pathToFollow?: Phaser.Curves.Path;
};

export class Platform implements IGameObject {
  body: MatterJS.BodyType;
  bodyConstraint: MatterJS.BodyType;
  constraint: MatterJS.ConstraintType;
  spineObject: SpineGameObject;
  width = 10;
  height = 10;
  pathToFollow: Phaser.Curves.Path;
  timeAlive = 0;

  constructor(private scene: Scene, { pos, width, height, pathToFollow }: TProps) {
    this.pathToFollow = pathToFollow;
    this.height = height;
    this.width = width;
    this.createBody(pos);
    this.initSpineObject(pos);
    this.listenForEvents();
  }
  private createBody(pos: Phaser.Math.Vector2) {
    const startPosX = pos.x;
    const startPosY = pos.y;

    this.bodyConstraint = this.scene.matter.add.circle(startPosX + this.width / 2, startPosY + this.height / 2, 10, {
      isSensor: true,
      isStatic: true,
      label: BodyTypeLabel.constraint,
    });

    this.body = this.scene.matter.add.rectangle(startPosX, startPosY, this.width, this.height, {
      label: BodyTypeLabel.platform,
      friction: 1,
      frictionStatic: 1,
      restitution: 0,
      mass: 10,
    });

    this.body.onCollideActiveCallback = ({ bodyA, bodyB }: CollideCallback) => {
      if (bodyB?.label === BodyTypeLabel.player) {
        emit(GameEvent.onPlatform, { body: bodyA });
      }
    };
    this.body.onCollideEndCallback = ({ bodyA, bodyB }: CollideCallback) => {
      if (bodyB?.label === BodyTypeLabel.player) {
        emit(GameEvent.offPlatform, { body: null });
      }
    };
    this.body.onCollideCallback = ({ bodyA, bodyB }: CollideCallback) => {
      if (bodyB?.label === BodyTypeLabel.player) {
        if (Math.abs(bodyB.speed) >= 20) {
          // TODO (johnedvard) Maybe change scale of object based on speed within inpact and add a bouncy-ish juicy effect
        }
      }
    };

    this.scene.matter.body.setInertia(this.body, Infinity); // prevent body from rotating

    this.constraint = this.scene.matter.add.constraint(this.body, this.bodyConstraint, 0, 1);
  }
  private initSpineObject(pos: Phaser.Math.Vector2) {
    this.spineObject = this.scene.add
      .spine(pos.x, pos.y, 'spinningBar', 'idle', true)
      .setDepth(DepthGroup.box)
      .setAngle(90);

    const unsafeBarSlot = this.spineObject.findSlot('unsafe-bar');
    unsafeBarSlot.setAttachment(null);
  }

  followPath(time: number, delta: number) {
    if (this.body.isStatic) return;
    this.timeAlive += delta;
    // TODO (johnedvard) move to other file
    const s = 0.5 + 0.5 * Math.sin(this.timeAlive / (1.5 * this.pathToFollow.getLength()));
    const p = this.pathToFollow.getPoint(s);
    this.bodyConstraint.position.x = p.x;
    this.bodyConstraint.position.y = p.y;
  }
  updateSpineObject() {
    const { x, y } = this.body.position;
    this.spineObject.setPosition(x, y);
  }

  update(time: number, delta: number) {
    // this.scene.matter.setAngularVelocity(this.body, 0); // another way of preventing rotation
    this.followPath(time, delta);
    this.updateSpineObject();
  }

  isGrabbable() {
    return false;
  }

  onTimeLock = ({ body }: { body: MatterJS.BodyType }) => {
    if (body && body === this.body) {
      stopCompletely(this.scene, this.body);
      commonTimeLock(this.scene, this.body);
    }
  };

  listenForEvents = () => {
    on(GameEvent.timeLock, this.onTimeLock);
  };
  stopListeningForEvents() {
    off(GameEvent.timeLock, this.onTimeLock);
  }

  destroy() {
    if (this.bodyConstraint) {
      this.scene.matter.world.remove(this.bodyConstraint);
      this.bodyConstraint = null;
    }
    if (this.constraint) {
      this.scene.matter.world.removeConstraint(this.constraint, true);
      this.constraint = null;
    }
    destroyObject(this.scene, this);
  }
}

'''
'''--- src/gameobjects/Player.ts ---
import { Scene } from 'phaser';
import { BodyTypeLabel } from '~/enums/BodyTypeLabel';
import { ControllerEvent } from '~/enums/ControllerEvent';

import { DepthGroup } from '~/enums/DepthGroup';
import { GameEvent } from '~/enums/GameEvent';
import { getEquippedSkinName } from '~/near/nearConnection';
import { PlayerState } from '~/types/PlayerState';
import { emit, off, on } from '~/utils/eventEmitterUtils';
import {
  getClosestBody,
  getClosestEndPos,
  grabItemInProximity,
  startActionRoutine,
  startKilledRoutine,
  updateAim,
} from '~/utils/playerUtils';
import { SpeechBubble } from './SpeechBubble';
import { playDeadSound, playLaserBeam } from '~/utils/soundUtils';
import { SceneKey } from '~/enums/SceneKey';
import { IGameObject } from '~/interfaces/IGameObject';
import { destroyObject } from '~/utils/gameobjectUtils';
import { emitDustParticles } from './dustParticleEmitter';

type TProps = {
  pos: Phaser.Math.Vector2;
};
export class Player implements IGameObject {
  body: MatterJS.BodyType;
  proximityCircle: MatterJS.BodyType;
  aboveHeadBody: MatterJS.BodyType;
  grabbedObject: IGameObject;
  bodyRadius = 35;
  container: Phaser.GameObjects.Container; // used for camera to follow
  grabbedObjectConstraint: MatterJS.ConstraintType;
  spineObject: SpineGameObject;
  spineOffset = new Phaser.Math.Vector2(0, 13);
  dustParticleOffset = new Phaser.Math.Vector2(0, this.bodyRadius / 2);
  speed = 7;
  scale = 0.5;
  state: PlayerState;
  direction = 1;
  aimConstraintBone: spine.Bone;
  weaponBone: spine.Bone;
  aimBeamDistance = 500;
  startPos: Phaser.Math.Vector2;
  bubble: SpeechBubble;
  attachedToPlatform: MatterJS.BodyType;

  constructor(private scene: Scene, { pos }: TProps) {
    this.startPos = pos;
    this.initSpineObject(pos);
    this.createBody(pos);
    this.createAboveHeadBody(pos);
    this.listenForEvents();
    this.cameraFollow();
  }

  createAboveHeadBody(pos: Phaser.Math.Vector2) {
    this.aboveHeadBody = this.scene.matter.add.circle(pos.x, pos.y + this.bodyRadius, 2, { isSensor: true });
    const overHeadPoint = new Phaser.Math.Vector2(0, this.bodyRadius * -3);
    this.scene.matter.add.constraint(this.body, this.aboveHeadBody, 0, 1, {
      pointA: overHeadPoint,
    });
  }

  initSpineObject = (pos: Phaser.Math.Vector2) => {
    this.spineObject = this.scene.add
      .spine(pos.x, pos.y, 'hero', 'idle', true)
      .setDepth(DepthGroup.player)
      .setScale(this.scale)
      .setSkinByName('blue');

    this.spineObject.timeScale = 1.3;
    const skeleton = this.spineObject.skeleton;
    this.aimConstraintBone = skeleton.findBone('weapon-aim');
    this.weaponBone = skeleton.findBone('weapon-ik');
    this.spineObject.setSkinByName(getEquippedSkinName());
  };

  update(time: number, delta: number) {
    if (this.state === 'idle') {
      this.addVelocityToBody();
    }

    this.updateSpineObject();
    this.updateProximityCircle();
    this.updateContainer();
    this.updateGrabbedObject();
    this.bubble?.update(time, delta);

    updateAim(this.scene, this.aimConstraintBone);
  }

  updateGrabbedObject() {
    if (this.grabbedObject?.body) {
      this.scene.matter.setAngularVelocity(this.grabbedObject.body, 0); // another way of preventing rotation
    }
  }

  updateSpineObject() {
    const { x, y } = this.body.position;
    this.spineObject.setPosition(x + this.spineOffset.x, y + this.spineOffset.y);
  }

  setState(state: PlayerState) {
    if (!this.spineObject) return;
    if (this.state === state) return;
    this.state = state;
    switch (state) {
      case 'idle':
        this.spineObject.play('idle', true, true);
        break;
      case 'walk':
        this.spineObject.play('walk', true, true);
        break;
      case 'killed':
        this.playDead();
        break;
      default:
    }
  }

  isGrabbable() {
    return false;
  }

  destroy() {
    destroyObject(this.scene, this);
  }

  private cameraFollow() {
    this.scene.cameras.main.startFollow(this.container, false, 0.1, 0.1);
    this.scene.cameras.main.setZoom(1);
    this.scene.cameras.main.setDeadzone(400, 200);
  }

  private isOnGround() {
    if (!this.body) return false;
    const allObjectsInProximity = this.scene.matter.intersectBody(this.proximityCircle);
    for (let obj of allObjectsInProximity) {
      const other = <MatterJS.BodyType>obj;
      // TODO (johnedvard) Improve check to be less manual labor
      if (
        other.label === BodyTypeLabel.collisionWall ||
        other.label === BodyTypeLabel.box ||
        other.label === BodyTypeLabel.spinningBar ||
        other.label === BodyTypeLabel.platform
      )
        return true;
    }

    return false;
  }

  private createBody(pos: Phaser.Math.Vector2) {
    const startPosX = pos.x;
    const startPosY = pos.y;

    this.body = this.scene.matter.add.polygon(startPosX, startPosY, 2, 25, {
      frictionAir: 0.03,
      label: BodyTypeLabel.player,
      mass: 5,
      friction: 1,
      frictionStatic: 0.1,
      restitution: 0,
      angle: Math.PI / 2,
      chamfer: [0, 0],
    });

    this.scene.matter.body.setInertia(this.body, Infinity); // prevent body from rotating

    this.proximityCircle = this.scene.matter.add.circle(startPosX, startPosY, this.bodyRadius + 30, {
      isSensor: true,
      label: BodyTypeLabel.proximity,
    });

    this.container = this.scene.add.container(startPosX, startPosY, []);
  }

  private updateContainer() {
    const { x, y } = this.body.position;
    this.container.setX(x);
    this.container.setY(y);
  }
  private updateProximityCircle() {
    const { x, y } = this.body.position;
    this.scene.matter.body.setPosition(this.proximityCircle, new Phaser.Math.Vector2(x, y), false);
  }

  private setDirection(direction: number) {
    if (!this.spineObject) return;
    if (direction === this.direction) return;
    this.spineObject.setScale(this.scale * direction, this.spineObject.scaleY);
    this.direction = direction;
  }

  private onMove = ({ velocity }: { velocity: Phaser.Math.Vector2 }) => {
    if (this.state === 'killed') return;
    if (velocity.x !== 0) {
      this.setState('walk');
      if (this.isOnGround()) {
        emitDustParticles(this.scene, this.body.position.x, this.body.position.y + this.dustParticleOffset.y);
      }
      let velocityX = velocity.x * this.speed;

      // TODO (johnedvard) also check if actually on top of platform (not below or on the sides)
      if (this.attachedToPlatform) {
        const velocityMultiplier =
          Math.sign(this.attachedToPlatform.velocity.x) == Math.sign(this.body.velocity.x) ? 0.5 : 1.5;
        velocityX += this.attachedToPlatform.velocity.x * velocityMultiplier;
      }
      this.scene.matter.setVelocity(this.body, velocityX, this.body.velocity.y);
      this.setDirection(velocity.x > 0 ? 1 : -1);
    } else {
      this.setState('idle');
    }
  };

  private onJump = () => {
    if (!this.isOnGround() || this.state === 'killed') return;
    this.scene.matter.setVelocity(this.body, this.body.velocity.x, -30);
    if (this.grabbedObject) {
      this.scene.matter.setVelocity(this.grabbedObject.body, this.body.velocity.x, -30);
    }
    this.setState('jump');
  };

  private onAction = () => {
    if (this.grabbedObject) return this.throwGrabbedObject();
    const grabbedObject = grabItemInProximity(this.scene, this.proximityCircle);
    if (!grabbedObject?.body) return;
    this.grabbedObject = grabbedObject;
    this.scene.matter.body.setPosition(
      this.grabbedObject.body,
      new Phaser.Math.Vector2(this.aboveHeadBody.position.x, this.aboveHeadBody.position.y),
      false
    );
    this.scene.matter.body.setAngle(this.grabbedObject.body, 0, false);
    this.scene.matter.body.setInertia(this.body, Infinity); // prevent body from rotating
    this.grabbedObjectConstraint = this.scene.matter.add.constraint(this.aboveHeadBody, this.grabbedObject.body, 0, 50);
  };

  releaseGrabbedObject() {
    if (!this.grabbedObject) return;
    this.scene.matter.world.removeConstraint(this.grabbedObjectConstraint);
    emit(GameEvent.releaseObject, { object: this.grabbedObject });
    this.grabbedObjectConstraint = null;
    this.grabbedObject = null;
  }
  throwGrabbedObject() {
    if (!this.grabbedObject) return;
    this.scene.matter.world.removeConstraint(this.grabbedObjectConstraint);
    emit(GameEvent.throwObject, { object: this.grabbedObject });
    let angle = Math.PI + Math.PI / 4;
    if (this.direction > 0) angle = -Math.PI / 4;
    const force = new Phaser.Math.Vector2(Math.cos(angle), Math.sin(angle)).scale(0.5);
    this.scene.matter.applyForce(this.grabbedObject.body, force);
    this.grabbedObjectConstraint = null;
    this.grabbedObject = null;
  }

  private onShoot = ({ pos }: { pos: Phaser.Math.Vector2 }) => {
    if (!this.scene.game.scene.isActive(SceneKey.Level)) return; // don't do action if scene is paused
    const x = this.weaponBone.worldX + this.scene.cameras.main.scrollX;
    const y = -this.weaponBone.worldY + this.scene.cameras.main.height + this.scene.cameras.main.scrollY; // spine y coordinates are opposite of Phaser's

    // Make up for scrollX and scrollY since the InputScene doesn't support that
    const aimedPos = new Phaser.Math.Vector2(
      pos.x + this.scene.cameras.main.scrollX,
      pos.y + this.scene.cameras.main.scrollY
    );
    const startPos = new Phaser.Math.Vector2(x, y);
    const maxDist = this.aimBeamDistance;
    const direction = aimedPos.clone().subtract(startPos).normalize();
    let endPos = new Phaser.Math.Vector2(direction.x * maxDist, direction.y * maxDist).add(startPos);

    const closestBody = getClosestBody(this.scene, startPos, endPos);

    emit(GameEvent.timeLock, { body: closestBody });
    playLaserBeam();
    if (closestBody === this.grabbedObject?.body) this.releaseGrabbedObject();

    // TODO (johnedvard) Add some particle effects to the endPos if we found a body
    endPos = getClosestEndPos(closestBody, startPos, endPos, direction);

    startActionRoutine(this.scene, startPos, endPos);
  };

  private onSkinChanged = ({ skinName }: { skinName: string }) => {
    if (skinName) this.spineObject.setSkinByName(skinName);
  };

  async playDead() {
    this.spineObject.play('killed');
    this.body.isStatic = true;
    this.body.isSensor = true;
    playDeadSound();
    await startKilledRoutine(this.scene, { pos: new Phaser.Math.Vector2(this.body.position.x, this.body.position.y) });
    emit(GameEvent.restartLevel);
  }

  addVelocityToBody() {
    // TODO (johnedavrd) Only add velocity to body (player) if it's above the platform
    if (this.attachedToPlatform) {
      let platformSpeed = this.attachedToPlatform.velocity.x + this.attachedToPlatform.velocity.x / 25;
      this.scene.matter.setVelocityX(this.body, platformSpeed); // make player follow moving platform
    }
  }

  onKilled = async () => {
    this.setState('killed');
  };

  onAttachedTo = ({ body }) => {
    if (this.attachedToPlatform === body) return;
    this.attachedToPlatform = body;
  };

  private listenForEvents() {
    // TODO (johnedvard) handle player input events in a different file
    on(ControllerEvent.move, this.onMove);
    on(ControllerEvent.jump, this.onJump);
    on(ControllerEvent.shoot, this.onShoot);
    on(ControllerEvent.action, this.onAction);
    on(GameEvent.changeSkin, this.onSkinChanged);
    on(GameEvent.kill, this.onKilled);
    on(GameEvent.onPlatform, this.onAttachedTo);
    on(GameEvent.offPlatform, this.onAttachedTo);
  }
  stopListeningForEvents() {
    off(ControllerEvent.move, this.onMove);
    off(ControllerEvent.jump, this.onJump);
    off(ControllerEvent.shoot, this.onShoot);
    off(ControllerEvent.action, this.onAction);
    off(GameEvent.changeSkin, this.onSkinChanged);
    off(GameEvent.kill, this.onKilled);
    off(GameEvent.onPlatform, this.onAttachedTo);
    off(GameEvent.offPlatform, this.onAttachedTo);
  }
}

'''
'''--- src/gameobjects/SpeechBubble.ts ---
import { Scene, Curves } from 'phaser';
import { DepthGroup } from '~/enums/DepthGroup';

type TProps = {
  pos: Phaser.Math.Vector2;
  width: number;
  height: number;
};

export class SpeechBubble {
  graphics: Phaser.GameObjects.Graphics;
  pos: Phaser.Math.Vector2;
  width: number;
  height: number;
  path: Curves.Path;

  constructor(private scene: Scene, { pos, width, height }: TProps) {
    this.pos = pos;
    this.height = height;
    this.width = width;
    this.createSpeechBubble();
    this.graphics = this.scene.add.graphics().setDepth(DepthGroup.front);
  }

  createSpeechBubble() {
    const control1 = this.height / 10;
    const control2 = this.width / 5;
    this.path = new Curves.Path();
    let startPoint = new Phaser.Math.Vector2(this.pos.x, this.pos.y);
    let controlPoint1 = new Phaser.Math.Vector2(this.pos.x + control2, this.pos.y - control2 / 5);
    let endPoint = new Phaser.Math.Vector2(this.pos.x + this.width, this.pos.y);
    let curve = new Curves.QuadraticBezier(startPoint, controlPoint1, endPoint);
    this.path.add(curve);

    startPoint = endPoint;
    controlPoint1 = new Phaser.Math.Vector2(endPoint.x + control1, endPoint.y + control1);
    endPoint = new Phaser.Math.Vector2(this.pos.x + this.width, this.pos.y + this.height);
    curve = new Curves.QuadraticBezier(startPoint, controlPoint1, endPoint);
    this.path.add(curve);

    startPoint = endPoint;
    controlPoint1 = new Phaser.Math.Vector2(endPoint.x - control2, endPoint.y + control2 / 5);
    endPoint = new Phaser.Math.Vector2(this.pos.x, this.pos.y + this.height);
    curve = new Curves.QuadraticBezier(startPoint, controlPoint1, endPoint);
    this.path.add(curve);

    startPoint = endPoint;
    controlPoint1 = new Phaser.Math.Vector2(endPoint.x - control1, endPoint.y - control1);
    endPoint = new Phaser.Math.Vector2(this.pos.x, this.pos.y);
    curve = new Curves.QuadraticBezier(startPoint, controlPoint1, endPoint);
    this.path.add(curve);
  }
  update(time: number, delta: number) {
    this.graphics.clear();

    //  Draw the curve through the points

    this.graphics.fillStyle(0xfafbf6, 1);
    this.graphics.fillPoints(this.path.getPoints());
    this.graphics.lineStyle(13, 0x000000, 1);
    this.path.draw(this.graphics);
    this.graphics.fillStyle(0x000000, 1);
    this.path.curves.forEach((c) => {
      const p = c.getPointAt(0);
      this.graphics.fillCircle(p.x, p.y, 16);
    });
  }
}

'''
'''--- src/gameobjects/SpinningBar.ts ---
import { Scene } from 'phaser';
import { BodyTypeLabel } from '~/enums/BodyTypeLabel';
import { DepthGroup } from '~/enums/DepthGroup';
import { GameEvent } from '~/enums/GameEvent';
import { IGameObject } from '~/interfaces/IGameObject';
import { emit, off, on } from '~/utils/eventEmitterUtils';
import { commonTimeLock, stopCompletely } from '~/utils/gameUtils';
import { destroyObject } from '~/utils/gameobjectUtils';
import { playLockObject, playUnLockObject } from '~/utils/soundUtils';

type TProps = {
  pos: Phaser.Math.Vector2;
  width?: number;
  height?: number;
  isSafe?: boolean;
};

export class SpinningBar implements IGameObject {
  body: MatterJS.BodyType;
  bodyConstraint: MatterJS.BodyType;
  constraint: MatterJS.ConstraintType;
  spineObject: SpineGameObject;

  width = 90;
  height = 299;
  angle = 0;
  startPos;
  isSafe;

  lastAngleUpdateTime = 0;
  angleUpdateInterval = 10; // upd

  constructor(private scene: Scene, { pos, width, height, isSafe }: TProps) {
    if (height) this.height = height;
    if (width) this.width = width;
    this.isSafe = isSafe;
    this.startPos = pos;

    this.createBody(pos);
    this.initSpineObject(pos);
    this.listenForEvents();
  }
  private createBody(pos: Phaser.Math.Vector2) {
    const startPosX = pos.x;
    const startPosY = pos.y;
    this.bodyConstraint = this.scene.matter.add.circle(startPosX, startPosY, 10, {
      isSensor: true,
      isStatic: true,
      label: BodyTypeLabel.constraint,
    });
    // TODO, don't use body, but a regular rect, and check for collision within polygon, because bug with ignoreGravity
    this.body = this.scene.matter.add.rectangle(startPosX, startPosY, this.width - 30, this.height - 10, {
      label: BodyTypeLabel.spinningBar,
      isSensor: this.isSafe ? false : true,
      ignoreGravity: true, // doesn't work in phaser 3.60 https://github.com/photonstorm/phaser/issues/6473,
      restitution: 0,
      frictionStatic: 1,
      friction: 1,
    });
    this.constraint = this.scene.matter.add.constraint(this.body, this.bodyConstraint, 0, 0.1);

    if (!this.isSafe) {
      this.body.onCollideCallback = ({ bodyA, bodyB }) => {
        if (bodyB?.label === BodyTypeLabel.player) {
          emit(GameEvent.kill, { body: bodyB });
        }
      };
    }
  }

  private initSpineObject(pos: Phaser.Math.Vector2) {
    this.spineObject = this.scene.add
      .spine(pos.x, pos.y, 'spinningBar')
      .setDepth(DepthGroup.spinningBar)
      .setOffset(0, 0);
    const scale = 1;
    this.spineObject.setScale(scale);
    if (this.isSafe) {
      const unsafeBarSlot = this.spineObject.findSlot('unsafe-bar');
      unsafeBarSlot.setAttachment(null);
    }
  }

  isGrabbable() {
    return false;
  }

  update(time: number, delta: number) {
    if (this.body.isStatic) return;
    const { x, y } = this.body.position;

    this.angle = this.angle + delta / 800;
    this.spineObject.setPosition(x, y);
    const elapsedFrames = Math.floor((time - this.lastAngleUpdateTime) / this.angleUpdateInterval);
    if (elapsedFrames > 0) {
      this.scene.matter.setAngularVelocity(this.body, 0.1);
      this.lastAngleUpdateTime = time;
      this.spineObject.rotation = this.body.angle;
    }
  }

  onTimeLock = ({ body }: { body: MatterJS.BodyType }) => {
    if (body && body === this.body) {
      stopCompletely(this.scene, this.body);
      commonTimeLock(this.scene, this.body);
    }
  };
  listenForEvents() {
    on(GameEvent.timeLock, this.onTimeLock);
  }

  stopListeningForEvents() {
    off(GameEvent.timeLock, this.onTimeLock);
  }
  destroy() {
    if (this.bodyConstraint) {
      this.scene.matter.world.remove(this.bodyConstraint);
      this.bodyConstraint = null;
    }
    if (this.constraint) {
      this.scene.matter.world.removeConstraint(this.constraint, true);
      this.constraint = null;
    }
    destroyObject(this.scene, this);
  }
}

'''
'''--- src/gameobjects/StatisChain.ts ---
import { Scene } from 'phaser';
import { ChainImage } from './ChainImage';

type TProps = {
  pos: Phaser.Math.Vector2;
  numChainUnits: number;
};

export class StasisChain {
  group;
  pos: Phaser.Math.Vector2;
  numChainUnits = 10;

  constructor(private scene: Scene, { pos, numChainUnits }: TProps) {
    this.pos = pos;
    this.numChainUnits = numChainUnits || 10;
    this.createChain();
  }

  private createChain() {
    // Figure out how many chain parts to chain together based on length
    this.group = this.scene.add.group({
      classType: ChainImage,
      maxSize: this.numChainUnits,
      runChildUpdate: true,
    });
  }
  lockAnimation() {
    const max = this.group.getTotalFree();

    const randomRadians = Math.random() * Math.PI * 2;
    const endPos = this.pos.clone().add(this.pos.clone().setAngle(randomRadians));

    for (let i = 0; i < max; i++) {
      const chain: ChainImage = this.group.get();
      chain?.lockAnimation(this.pos, endPos, i, max);
    }
  }

  /**
   * Break a few chains, and scatter them outwards
   */
  unlockAnimation() {
    const radius = 50;
    const max = this.group.getTotalFree();
    const randomStartX = (1 - Math.random() * 2) * radius;
    const randomStartY = (1 - Math.random() * 2) * radius;
    const randomEndX = (1 - Math.random() * 2) * radius;
    const randomEndY = (1 - Math.random() * 2) * radius;
    const startPos = this.pos.clone().add(new Phaser.Math.Vector2(randomStartX, randomStartY));
    const endPos = this.pos.clone().add(new Phaser.Math.Vector2(randomEndX, randomEndY));

    for (let i = 0; i < max; i++) {
      const chain: ChainImage = this.group.get();
      chain.setOriginPos(this.pos);
      chain?.unlockAnimation(startPos, endPos, i);
    }
  }
  destroy() {
    // remove everything related to the chain and animation
  }
}

'''
'''--- src/gameobjects/StoreBooth.ts ---
import { Scene } from 'phaser';
import { BodyTypeLabel } from '~/enums/BodyTypeLabel';
import { ControllerEvent } from '~/enums/ControllerEvent';
import { DepthGroup } from '~/enums/DepthGroup';
import { GameEvent } from '~/enums/GameEvent';
import { IGameObject } from '~/interfaces/IGameObject';
import { emit, off, on } from '~/utils/eventEmitterUtils';
import { destroyObject } from '~/utils/gameobjectUtils';
import { playStoreSound } from '~/utils/soundUtils';

type TProps = {
  pos: Phaser.Math.Vector2;
};

export class StoreBooth implements IGameObject {
  body: MatterJS.BodyType;
  spineObject: SpineGameObject;
  overlordSpine: SpineGameObject;
  speechBubble: SpineGameObject;
  overlordOffset = new Phaser.Math.Vector2(90, 0);
  speechBubbleOffset = new Phaser.Math.Vector2(-60, -220);
  width = 246;
  height = 299;

  constructor(private scene: Scene, { pos }: TProps) {
    this.createBody(pos);
    this.initSpineObject(pos);
    this.listenForEvents();
  }
  private createBody(pos: Phaser.Math.Vector2) {
    const startPosX = pos.x;
    const startPosY = pos.y;

    this.body = this.scene.matter.add.rectangle(startPosX, startPosY, this.width - 1, this.height - 1, {
      isSensor: true,
      isStatic: true,
      label: BodyTypeLabel.store,
    });
    this.body.onCollideCallback = ({ bodyA, bodyB }) => {
      if (bodyB?.label === BodyTypeLabel.player) {
        this.speechBubble.play('idle', true, true);
      }
    };
    this.body.onCollideEndCallback = ({ bodyA, bodyB }) => {
      if (bodyB?.label === BodyTypeLabel.player) {
        this.speechBubble.play('hidden', true, true);
      }
    };
  }
  private initSpineObject(pos: Phaser.Math.Vector2) {
    this.spineObject = this.scene.add.spine(pos.x, pos.y, 'storeBooth', 'idle', true).setDepth(DepthGroup.store);
    this.overlordSpine = this.scene.add
      .spine(pos.x + this.overlordOffset.x, pos.y, 'overlord', 'idle', true)
      .setDepth(DepthGroup.store)
      .setScale(0.25);
    this.speechBubble = this.scene.add
      .spine(pos.x + this.speechBubbleOffset.x, pos.y + this.speechBubbleOffset.y, 'storeSpeechBubble', 'hidden', true)
      .setDepth(DepthGroup.store);
  }

  private onOpenStore = () => {
    if (!this.body) return;
    const allObjectsInProximity = this.scene.matter.intersectBody(this.body);

    for (let obj of allObjectsInProximity) {
      const other = <MatterJS.BodyType>obj;
      if (other.label === BodyTypeLabel.player) {
        playStoreSound();
        emit(GameEvent.openStore);
      }
    }
  };

  private listenForEvents() {
    on(ControllerEvent.up, this.onOpenStore);
  }

  updateSpineObject() {
    const { x, y } = this.body.position;
    this.spineObject.setPosition(x, y);
  }

  update(time: number, delta: number) {
    this.updateSpineObject();
  }

  isGrabbable() {
    return false;
  }

  stopListeningForEvents() {
    off(ControllerEvent.up, this.onOpenStore);
  }

  destroy() {
    destroyObject(this.scene, this);
    if (this.speechBubble) this.speechBubble.destroy();
    if (this.overlordSpine) this.overlordSpine.destroy();
    this.spineObject = null;
    this.overlordSpine = null;
    this.speechBubble = null;
  }
}

'''
'''--- src/gameobjects/TimeCapsule.ts ---
import { Scene } from 'phaser';
import { BodyTypeLabel } from '~/enums/BodyTypeLabel';
import { DepthGroup } from '~/enums/DepthGroup';
import { GameEvent } from '~/enums/GameEvent';
import { IGameObject } from '~/interfaces/IGameObject';
import { TimeCapsuleState } from '~/types/TimeCapsuleState';
import { emit } from '~/utils/eventEmitterUtils';
import { destroyObject } from '~/utils/gameobjectUtils';

type TProps = {
  pos: Phaser.Math.Vector2;
};

export class TimeCapsule implements IGameObject {
  body: MatterJS.BodyType;
  spineObject: SpineGameObject;
  state: TimeCapsuleState;
  constructor(private scene: Scene, { pos }: TProps) {
    this.createBody(pos);
    this.initSpineObject(pos);
  }
  private createBody(pos: Phaser.Math.Vector2) {
    const startPosX = pos.x;
    const startPosY = pos.y;

    this.body = this.scene.matter.add.circle(startPosX, startPosY, 40, {
      isSensor: true,
      isStatic: true,
      label: BodyTypeLabel.timeCapsule,
    });

    this.body.onCollideCallback = ({ bodyA, bodyB }) => {
      if (bodyB?.label === BodyTypeLabel.player) {
        this.setState('collected');
      }
    };
  }
  setState(state: TimeCapsuleState) {
    if (this.state === state) return;
    this.state = state;
    switch (state) {
      case 'collected':
        this.spineObject.play('collected');
        this.spineObject.on('animationcomplete', () => {
          if (this.state === 'collected') this.scene.matter.world.remove(this.body);
        });
        emit(GameEvent.collectTimeCapsule);
        break;
      default:
        break;
    }
  }
  private initSpineObject(pos: Phaser.Math.Vector2) {
    this.spineObject = this.scene.add
      .spine(pos.x, pos.y, 'timeCapsule', 'idle', true)
      .setDepth(DepthGroup.store)
      .setScale(0.25);
  }

  updateSpineObject() {
    const { x, y } = this.body.position;
    this.spineObject.setPosition(x, y);
  }

  update(time: number, delta: number) {
    this.updateSpineObject();
  }

  isGrabbable() {
    return false;
  }

  stopListeningForEvents() {}

  destroy() {
    destroyObject(this.scene, this);
  }
}

'''
'''--- src/gameobjects/dustParticleEmitter.ts ---
import { Scene } from 'phaser';

// TODO (johnedvard) Maybe make this file a class in order to have a unique emitter for other game objects too
let emitter: Phaser.GameObjects.Particles.ParticleEmitter;
export const emitDustParticles = (scene: Scene, x: number, y: number) => {
  if (emitter) return;
  const maxLiveTime = 50;
  let ellapsedTime = 0;

  emitter = scene.add.particles(0, 0, 'particle', {
    emitZone: { source: new Phaser.Geom.Circle(x, y, 10), type: 'random' },
    lifespan: { min: 400, max: 500 },
    scale: { start: 1, end: 0.3 },
    alpha: { start: 0, end: 1, steps: 5 },
    quantity: 1,
    frequency: 25,
  });
  emitter.start();

  const gameUpdateListener = (time: number, delta: number) => {
    ellapsedTime += delta;
    if (ellapsedTime >= maxLiveTime) {
      if (emitter.active) {
        emitter.stop();
        emitter = null;
      }
      scene.events.off(Phaser.Scenes.Events.UPDATE, gameUpdateListener);
    }
  };
  scene.events.on(Phaser.Scenes.Events.UPDATE, gameUpdateListener);
};

'''
'''--- src/interfaces/IGameObject.ts ---
export interface IGameObject {
  body: MatterJS.BodyType;
  spineObject: SpineGameObject;
  destroy: Function;
  stopListeningForEvents: Function;
  isGrabbable: Function;
}

'''
'''--- src/lib.ts ---
import '~/styles.scss';
import { Toki } from './Game';
let toki: Toki;
export const initGame = () => {
  toki = new Toki();
  postMessage({ payload: 'removeLoading' }, '*');
};

export const destroyGame = () => {
  if (toki) toki.destroyGame();
  toki = null;
};

'''
'''--- src/main.ts ---
import '~/styles.scss';
import { Toki } from './Game';

const init = () => {
  new Toki();
  postMessage({ payload: 'removeLoading' }, '*');
};

init();

'''
'''--- src/menu.ts ---
import { Scene, GameObjects, Math } from 'phaser';
import { hasSaveFile } from './gameState';
import { SceneKey } from './enums/SceneKey';

let continueTxt: GameObjects.BitmapText;
let newGameTxt: GameObjects.BitmapText;
let chevron: GameObjects.Triangle;
let chevronScaleDir: number = 1;
let scene: Scene;
const menuItems = [];
const margin = 40;
const chevronOffset = 13;

const onContinuePointerUp = () => {
  scene.scene.start(SceneKey.Level, { levelId: 'level0' });
};
const onNewGamePointerUp = () => {
  scene.scene.start(SceneKey.NewGameIntro);
};

export const displayMainMenuItems = (myScene: Scene): { txt: GameObjects.BitmapText; sceneName: string }[] => {
  menuItems.length = 0;
  scene = myScene;
  const center = new Math.Vector2(scene.cameras.main.centerX, scene.cameras.main.centerY);
  if (hasSaveFile()) {
    continueTxt = scene.add
      .bitmapText(center.x, center.y + margin * menuItems.length, 'atari', 'Continue', 28)
      .setAlpha(1)
      .setOrigin(0.5, 1)
      .setInteractive();
    continueTxt.on('pointerup', onContinuePointerUp);
    menuItems.push({ txt: continueTxt, sceneName: SceneKey.Level, args: { levelId: 'level0' } });
  }
  newGameTxt = scene.add
    .bitmapText(center.x, center.y + margin * menuItems.length, 'atari', hasSaveFile() ? 'Tutorial' : 'New Game', 28)
    .setAlpha(1)
    .setOrigin(0.5, 1)
    .setInteractive();
  newGameTxt.on('pointerup', onNewGamePointerUp);
  menuItems.push({ txt: newGameTxt, sceneName: SceneKey.NewGameIntro });
  return menuItems;
};

export const highlightSelectedMenu = (scene: Scene, delta: number, { index }: { index: number }) => {
  if (!chevron) chevron = scene.add.triangle(200, 400, 0, 0, 35, 10, 0, 20, 0xffffff).setOrigin(0.5);
  const center = new Math.Vector2(scene.cameras.main.centerX, scene.cameras.main.centerY);
  chevron.setPosition(center.x - 150, center.y - chevronOffset + margin * index);
  if (chevron.scaleY <= -1) {
    chevronScaleDir = 1;
    chevron.setScale(chevron.scaleX, -1);
  }
  if (chevron.scaleY >= 1) {
    chevronScaleDir = -1;
    chevron.setScale(chevron.scaleX, 1);
  }

  chevron.setScale(chevron.scaleX, chevron.scaleY + (delta * chevronScaleDir) / 750);
};

export const destroyMenu = () => {
  newGameTxt?.off('pointerup', onContinuePointerUp);
  continueTxt?.off('pointerup', onNewGamePointerUp);
  continueTxt?.destroy();
  newGameTxt?.destroy();
  chevron?.destroy();
  continueTxt = null;
  newGameTxt = null;
  chevron = null;
};

'''
'''--- src/near/nearConfig.ts ---
import { NearNet } from '~/types/NearNet';
import { GameMode } from '~/types/GameMode';

const mode: GameMode = import.meta.env.VITE_MODE || 'dev';
const nearNet: NearNet = import.meta.env.VITE_NEAR_NET || 'testnet';

const CONTARCT_NAME_MAINNET = 'x.paras.near';
const CONTARCT_NAME_TESTNET = 'paras-token-v2.testnet';
export const getConfig = () => {
  if (nearNet === 'mainnet' || mode === 'prod') {
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTARCT_NAME_MAINNET,
      appName: 'Paras Testnet',
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    };
  }
  return {
    networkId: 'testnet',
    nodeUrl: 'https://rpc.testnet.near.org',
    contractName: CONTARCT_NAME_TESTNET,
    walletUrl: 'https://wallet.testnet.near.org',
    helperUrl: 'https://helper.testnet.near.org',
    explorerUrl: 'https://explorer.testnet.near.org',
  };
};

'''
'''--- src/near/nearConnection.ts ---
const nearNet: NearNet = import.meta.env.VITE_NEAR_NET || 'testnet';

import { connect, keyStores, WalletConnection, Contract } from 'near-api-js';
import { getConfig } from './nearConfig';
import { NftSeriesId } from '~/types/NftSeriesId';
import { setItem } from '~/utils/storageUtils';
import { getItem } from '~/utils/storageUtils';
import { NearNet } from '~/types/NearNet';

export const APP_PREFIX = 'toki';

const NFT_SERIES_IDS: { mainnet: Record<NftSeriesId, string>; testnet: Record<NftSeriesId, string> } = {
  mainnet: {
    tokiGreen: '495650',
    tokiRed: '495651',
  },
  testnet: {
    tokiGreen: '2620',
    tokiRed: '2619',
  },
};

let walletConnection: WalletConnection;
let contract: Contract;
let nearConfig = getConfig();

const getAccountId = () => {
  // Getting the Account ID. If still unauthorized, it's just empty string
  return walletConnection.getAccountId();
};

export const getNftSeriesId = (id: NftSeriesId): string => {
  return NFT_SERIES_IDS[nearNet][id];
};
export const isSignedIn = () => {
  return walletConnection && walletConnection.isSignedIn();
};

// Initialize contract & set global variables
export const initContract = async () => {
  // Initialize connection to the NEAR testnet
  const keyStore = new keyStores.BrowserLocalStorageKeyStore();
  const near = await connect({ ...nearConfig, keyStore });

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  walletConnection = new WalletConnection(near, APP_PREFIX);

  // Initializing our contract APIs by contract name and configuration
  contract = await new Contract(walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['nft_tokens_for_owner', 'nft_tokens_by_series', 'nft_get_series_single'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['nft_buy', 'nft_mint'],
  });

  reloadPageIfSignedInForTheFirstTime();
  return walletConnection;
};

// Hack to make sure user can actually buy NFT after logging in for the first time. The contract hasn't registered the account_id for some reason
const reloadPageIfSignedInForTheFirstTime = () => {
  const walletAuthKeyStr = localStorage.getItem('toki_wallet_auth_key');
  if (walletAuthKeyStr) {
    const walletAuthKeyJson = JSON.parse(walletAuthKeyStr);
    if (walletAuthKeyJson.accountId && !walletConnection.account().accountId) {
      setTimeout(() => {
        window.location.reload();
      });
    }
  }
};

export const logout = () => {
  walletConnection.signOut();
  // reload page
};
export const login = () => {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  walletConnection.requestSignIn({ contractId: nearConfig.contractName });
};

export const equipSkin = (skin: string) => {
  setItem('equippedSkin', skin);
};
export const getEquippedSkinName = () => {
  return getItem('equippedSkin') || 'blue';
};

export const nftTokensForOwner = (account_id?: string) => {
  if (!account_id) account_id = getAccountId();
  return contract['nft_tokens_for_owner']({ account_id });
};

/**
 * Check if owns NFT in series
 */
export const nftTokensBySeries = (token_series_id: string) => {
  return contract['nft_tokens_by_series']({ token_series_id });
};
/**
 * Check info of NFT in series
 */
export const nftGetSeriesSingle = (token_series_id: string) => {
  return contract['nft_get_series_single']({ token_series_id });
};

export const nftMint = ({ token_series_id }) => {
  return contract['nft_mint'](
    {
      owner_id: getAccountId(),
      receiver_id: getAccountId(),
      token_series_id,
    },
    '300000000000000'
  );
};
export const nftBuy = ({ token_series_id, priceInYoctoNear }) => {
  return contract['nft_buy'](
    {
      owner_id: getAccountId(),
      receiver_id: getAccountId(),
      token_series_id,
    },
    '300000000000000',
    priceInYoctoNear
  );
};

'''
'''--- src/near/nearLogin.ts ---
import { NearEvent } from '~/enums/NearEvent';
import { emit } from '~/utils/eventEmitterUtils';

export const loginout = (loginoutEl, nearConnection) => {
  if (!nearConnection) return;
  if (nearConnection.walletConnection.isSignedIn()) {
    emit(NearEvent.logout, {});
    nearConnection.logout();
    loginoutEl.innerHTML = 'Login to NEAR';
  } else {
    emit(NearEvent.logout, {});
    nearConnection.login();
    loginoutEl.innerHTML = 'Logout from NEAR';
  }
};

export const initLoginLogout = (nearConnection) => {
  const loginoutEl = document.getElementById('near-login-loading-btn');
  if (nearConnection && nearConnection.isSignedIn()) {
    loginoutEl.innerHTML = 'Logout from NEAR';
    const nearLevelBtn = document.getElementById('near-level-btn');
    nearLevelBtn.classList.remove('disabled');
    nearLevelBtn.removeAttribute('disabled');
  } else {
    loginoutEl.innerHTML = 'Login to NEAR';
  }
  loginoutEl.addEventListener('click', () => {
    loginout(loginoutEl, nearConnection);
  });
};

'''
'''--- src/plugins/MatterGravityFixPlugin.js ---
/**
 * quickfix for issue in https://github.com/photonstorm/phaser/issues/6473
 */
export class MatterGravityFixPlugin extends Phaser.Plugins.ScenePlugin {
  constructor(scene, pluginManager) {
    super(scene, pluginManager);
  }
  boot() {
    const Matter = Phaser.Physics.Matter.Matter;
    this.applyGravityFix(Matter);
  }
  applyGravityFix(Matter) {
    Matter.Engine._bodiesApplyGravity = function (bodies, gravity) {
      var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001,
        bodiesLength = bodies.length;

      if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {
        return;
      }

      for (var i = 0; i < bodiesLength; i++) {
        var body = bodies[i];

        if (body.ignoreGravity || body.isStatic || body.isSleeping) {
          continue;
        }
        body.force.y += body.mass * gravity.y * gravityScale;
        body.force.x += body.mass * gravity.x * gravityScale;
      }
    };
  }
}

'''
'''--- src/sceneHandler.ts ---
import { Game } from 'phaser';
import { SceneKey } from './enums/SceneKey';
import { off, on } from './utils/eventEmitterUtils';
import { GameEvent } from './enums/GameEvent';

let game: Game;
let counter = 0;

const openStore = (evt) => {
  const isInterfaceActive = game.scene.isActive(SceneKey.StoreInterface);
  if (!isInterfaceActive) {
    game.scene.pause(SceneKey.Level);
    game.scene.start(SceneKey.StoreInterface, { test: ++counter });
  }
};

const closeStore = (evt) => {
  const isInterfaceActive = game.scene.isActive(SceneKey.StoreInterface);
  if (isInterfaceActive) {
    game.scene.stop(SceneKey.StoreInterface);
    game.scene.resume(SceneKey.Level);
  }
};

const startDialog = ({ dialog }: { dialog: string[] }) => {
  const isInterfaceActive = game.scene.isActive(SceneKey.DialogInterface);
  if (!isInterfaceActive) {
    game.scene.pause(SceneKey.Level);
    game.scene.start(SceneKey.DialogInterface, { dialog });
  }
};

const endDialog = (evt) => {
  const isInterfaceActive = game.scene.isActive(SceneKey.DialogInterface);
  if (isInterfaceActive) {
    game.scene.stop(SceneKey.DialogInterface);
    game.scene.resume(SceneKey.Level);
  }
};

/**
 * Call only once (when the game starts)
 * Listen for events and manage scenes, such as settings and inventory
 */
export const initSceneHandler = (g: Game) => {
  game = g;
  on(GameEvent.openStore, openStore);
  on(GameEvent.closeStore, closeStore);
  on(GameEvent.startDialog, startDialog);
  on(GameEvent.endDialog, endDialog);
};

export const destroySceneHandler = () => {
  off(GameEvent.openStore, openStore);
  off(GameEvent.closeStore, closeStore);
  off(GameEvent.startDialog, startDialog);
  off(GameEvent.endDialog, endDialog);
  game = null;
};

'''
'''--- src/scenes/Boot.ts ---
import { SceneKey } from '~/enums/SceneKey';
import { ShaderType } from '~/enums/ShaderType';
import { DissolvePipeline } from '~/shaders/DissolvePipeline';
import { WavyPipeline } from '~/shaders/WavyPipeline';
import { initMusicAndSfx, playMusic } from '~/utils/soundUtils';

export class Boot extends Phaser.Scene {
  renderer: Phaser.Renderer.WebGL.WebGLRenderer;

  preload(): void {
    this.load.setPath('assets/toki');
    // TODO (johnedvard) use an asset loader and constants for the names
    this.load.bitmapFont('atari', 'bitmap/atari-classic.png', 'bitmap/atari-classic.xml');

    this.preloadSpineAnimations();
    this.loadMusic();
    this.addProgressBar();
  }

  preloadSpineAnimations() {
    this.load.image('hero', 'spine/hero.png');
    this.load.spine('hero', 'spine/hero.json', ['spine/hero.atlas'], true);
    this.load.image('box', 'spine/box.png');
    this.load.spine('box', 'spine/box.json', ['spine/box.atlas'], true);
    this.load.image('spinningBar', 'spine/spinningBar.png');
    this.load.spine('spinningBar', 'spine/spinningBar.json', ['spine/spinningBar.atlas'], true);
    this.load.image('storeBooth', 'spine/storeBooth.png');
    this.load.spine('storeBooth', 'spine/storeBooth.json', ['spine/storeBooth.atlas'], true);
    this.load.image('storeInterface', 'spine/storeInterface.png');
    this.load.spine('storeInterface', 'spine/storeInterface.json', ['spine/storeInterface.atlas'], true);
    this.load.image('skinSlot', 'spine/skinSlot.png');
    this.load.spine('skinSlot', 'spine/skinSlot.json', ['spine/skinSlot.atlas'], true);
    this.load.image('overlord', 'spine/overlord.png');
    this.load.spine('overlord', 'spine/overlord.json', ['spine/overlord.atlas'], true);
    this.load.image('storeSpeechBubble', 'spine/storeSpeechBubble.png');
    this.load.spine('storeSpeechBubble', 'spine/storeSpeechBubble.json', ['spine/storeSpeechBubble.atlas'], true);
    this.load.image('sageFloating', 'spine/sageFloating.png');
    this.load.spine('sageFloating', 'spine/sageFloating.json', ['spine/sageFloating.atlas'], true);
    this.load.image('door', 'spine/door.png');
    this.load.spine('door', 'spine/door.json', ['spine/door.atlas'], true);
    this.load.image('timeCapsule', 'spine/timeCapsule.png');
    this.load.spine('timeCapsule', 'spine/timeCapsule.json', ['spine/timeCapsule.atlas'], true);
    this.load.image('hook', 'spine/Hook.png');
    this.load.spine('hook', 'spine/Hook.json', ['spine/Hook.atlas'], true);

    this.load.image('particle', 'spine/particle.png');
    this.load.image('sage', 'spine/sage.png');
    this.load.image('chain', 'spine/chain.png');
  }

  loadMusic() {
    this.load.audio('backgroundMusic', 'music/background music.mp3');
    this.load.audio('lockObject', 'music/lock object.mp3');
    this.load.audio('unlockObject', 'music/unlock object.mp3');
    this.load.audio('dead', 'music/dead.mp3');
    this.load.audio('hourGlass', 'music/hourglass.mp3');
    this.load.audio('laserBeam', 'music/laser beam.mp3');
    this.load.audio('store', 'music/store.mp3');
    this.load.audio('unlock', 'music/unlock.mp3');
  }
  create(): void {
    this.setPixelArtFilterOnAssets();
    // this.createShaders();

    // TODO (johnedvard) start desired scene based on env build variable?

    initMusicAndSfx(this);
    playMusic();

    // this.scene.start(SceneKey.Level);
    this.scene.start(SceneKey.MainMenu);
    // this.scene.start(SceneKey.Level, { levelId: 'level3' });
  }

  createShaders() {
    this.renderer.pipelines.add(ShaderType.wavy, new WavyPipeline(this.game));
    this.renderer.pipelines.add(ShaderType.dissolve, new DissolvePipeline(this.game));
  }

  addProgressBar() {
    const progressBar = this.add.graphics();
    const progressBox = this.add.graphics();
    progressBox.fillStyle(0xfafbf6, 0.8);
    progressBox.fillRect(this.cameras.main.width / 2 - 160, this.cameras.main.height / 2, 320, 50);
    this.load.on('progress', (value) => {
      progressBar.clear();
      progressBar.fillStyle(0xffffff, 1);
      progressBar.fillRect(this.cameras.main.width / 2 - 150, this.cameras.main.height / 2 + 10, 300 * value, 30);
    });
    this.load.on('complete', () => {
      progressBar.destroy();
      progressBox.destroy();
    });
  }

  setPixelArtFilterOnAssets() {
    // Remember to set FilterMode.NEAREST for pixel art (to prevent anti-alias when scaling up)
    // this.textures.get('animatino').setFilter(Phaser.Textures.FilterMode.NEAREST);
  }
}

'''
'''--- src/scenes/DialogInterface.ts ---
import { Scene } from 'phaser';
import { DepthGroup } from '~/enums/DepthGroup';
import { GameEvent } from '~/enums/GameEvent';
import { ShaderType } from '~/enums/ShaderType';
import { SpeechBubble } from '~/gameobjects/SpeechBubble';
import { DissolvePipeline } from '~/shaders/DissolvePipeline';
import { emit } from '~/utils/eventEmitterUtils';

export class DialogInterface extends Scene {
  bubble: SpeechBubble;
  sage: Phaser.GameObjects.Sprite;
  dialog: string[] = [];
  dialogIndex = 0;
  dialogBitmap;
  renderTexture;
  isInputDisabled: boolean;
  maxInputDelay = 1000;
  ellapsedInputDelay = 0;

  create({ dialog = [] }: { dialog: string[] }) {
    this.isInputDisabled = true;
    this.ellapsedInputDelay = 0;
    this.dialogIndex = 0;
    this.dialog = dialog;
    const pos = new Phaser.Math.Vector2(250, this.cameras.main.height - 500);
    const margin = 500;
    // Add UI elements
    this.bubble = new SpeechBubble(this, { pos, width: this.cameras.main.width - margin, height: 400 });
    this.sys.events.on('stop', function (data) {
      // perform any other necessary actions here
    });
    this.createSprite();
    this.createDialogBitmap();
    this.createDialogTexture();
    this.renderDialog(this.dialog[this.dialogIndex]);
    this.listenForInput();
  }
  createSprite() {
    // const dissolvePipeline: DissolvePipeline = (<any>this.game.renderer).pipelines.get(ShaderType.dissolve);
    this.add.sprite(350, this.cameras.main.height - 400, 'sage').setDepth(DepthGroup.front);
    // .setPipeline(dissolvePipeline);
  }
  update(time: number, delta: number) {
    this.bubble?.update(time, delta);
    this.ellapsedInputDelay += delta;
    if (this.ellapsedInputDelay <= this.maxInputDelay) {
      this.isInputDisabled = true;
    } else {
      this.isInputDisabled = false;
    }
  }
  listenForInput() {
    this.input.keyboard.on('keydown', (evt: KeyboardEvent) => {
      if (this.isInputDisabled) return;
      this.continueDialog();
    });
    this.input.on('pointerdown', (pointer: Phaser.Input.Pointer) => {
      if (this.isInputDisabled) return;
      if (pointer.primaryDown) {
        this.continueDialog();
      }
    });
  }

  /**
   * Need to convert the bitmap text to a texture in order to make the shader work properly
   */
  renderDialog(text: string) {
    this.dialogBitmap?.setText(text)?.setAlpha(1);
    this.renderTexture?.clear();
    this.renderTexture?.draw(this.dialogBitmap, 550, this.cameras.main.height - 400);
    this.dialogBitmap?.setAlpha(0); // trick to hide the text without having to destroy and recreate it.
  }
  createDialogTexture() {
    this.renderTexture = this.make
      .renderTexture({
        x: 0,
        y: 0,
        width: this.cameras.main.width,
        height: this.cameras.main.height,
      })
      .setDepth(DepthGroup.front)
      .setOrigin(0, 0);
  }

  createDialogBitmap() {
    this.dialogBitmap = this.add
      .bitmapText(0, 0, 'atari', '', 28, 0)
      .setAlpha(1)
      .setTint(0)
      .setOrigin(0, 0.5)
      .setInteractive()
      .setLineSpacing(50)
      .setDepth(DepthGroup.front);
  }

  continueDialog() {
    const nextDialog = this.dialog[++this.dialogIndex];
    if (nextDialog) {
      this.ellapsedInputDelay = 0;
      this.renderDialog(nextDialog);
    } else {
      emit(GameEvent.endDialog);
    }
  }
}

'''
'''--- src/scenes/Level.ts ---
const mode: GameMode = import.meta.env.VITE_MODE || 'dev';

import { GameObjects, Scene } from 'phaser';
import { DepthGroup } from '~/enums/DepthGroup';
import { GameEvent } from '~/enums/GameEvent';
import { getGameState, loadGame, saveLevelComplete } from '~/gameState';
import { Box } from '~/gameobjects/Box';
import { Door } from '~/gameobjects/Door';
import { Hook } from '~/gameobjects/Hook';
import { Platform } from '~/gameobjects/Platform';
import { Player } from '~/gameobjects/Player';
import { SpinningBar } from '~/gameobjects/SpinningBar';
import { StoreBooth } from '~/gameobjects/StoreBooth';
import { TimeCapsule } from '~/gameobjects/TimeCapsule';
import { GameMode } from '~/types/GameMode';

import { LevelState } from '~/types/LevelState';
import { SvgPath } from '~/types/SvgPath';
import { emit, off, on } from '~/utils/eventEmitterUtils';
import { playTimeCapsulePickup } from '~/utils/soundUtils';
import { capturedCapsuleDialog, gameWonDialog, tutorialStartDialog } from '~/utils/tutorialUtils';

import {
  createTextFromSvg,
  createCollisionBoxesFromPaths,
  createPathsFromSvg,
  getPosFromSvgCircle,
  createBoxesFromSvg,
  createSpinningBarsFromSvg,
  createStoreBoothFromSvg,
  createDoorsFromSvg,
  createTimeCapsulesFromSvg,
  createPlatformsFromSvg,
  createHooksFromSvg,
} from '~/utils/vectorUtils';

type TCreateLevel = { levelId: string; fromLevelId: string };

const parser = new DOMParser();
// TODO (johnedvard) read automatically from folder instead
const levelIds = ['levelTutorial', 'level0', 'level1', 'level2', 'level3'];
const levelSvgTexts: Record<string, string> = {};

export class Level extends Phaser.Scene {
  player: Player;
  graphics: GameObjects.Graphics;
  graphicsBack: GameObjects.Graphics;
  graphicsFront: GameObjects.Graphics;
  bitmapTexts: Phaser.GameObjects.BitmapText[];
  svgPaths: SvgPath[];
  boxes: Box[];
  spinningBars: SpinningBar[];
  storeBooth: StoreBooth;
  doors: Door[];
  timeCapsules: TimeCapsule[];
  platforms: Platform[];
  collisionBoxes: MatterJS.BodyType[];
  hooks: Hook[];
  levelId: string;
  maxCapsules: number;
  collectedCapsules = 0;
  numCapsules = 0;
  hasDisplayedGameClearDialog = false;
  hasDisplayedTutroialDialog = false;

  groupFront: GameObjects.Group;
  groupBack: GameObjects.Group;

  preload(): void {
    loadGame();
    this.load.setPath('assets/toki');
    // this.matter.add.mouseSpring(); // TODO (johnedvard) remove if production. Enable through option in debug menu
    this.loadLevels(levelIds);

    this.graphics = this.add.graphics().setDepth(DepthGroup.back);
    this.graphicsFront = this.add.graphics().setDepth(DepthGroup.back + 1);
    this.graphicsBack = this.add.graphics().setDepth(DepthGroup.back - 1);
  }

  create({ levelId = 'levelTutorial', fromLevelId }: TCreateLevel): void {
    this.stopListeningForEvents();
    this.collectedCapsules = 0;
    this.levelId = levelId;
    this.createLevel({ levelId, fromLevelId });
    setTimeout(() => {
      // using timeout to step once, make sure Level Scene is actually paused
      if (levelId === 'levelTutorial' && !this.hasDisplayedTutroialDialog) {
        emit(GameEvent.startDialog, { dialog: tutorialStartDialog });
        this.hasDisplayedTutroialDialog = true;
      }

      if (mode != 'dev') {
        this.checkIfGameCleared();
      }
    });
    this.listenForEvents();
  }

  createLandskape() {
    // group parallaxPaths
    this.groupFront = this.add.group();
    this.groupBack = this.add.group();
    // TODO (johnedvard) use array instead of copying
    this.graphicsBack.clear();
    this.graphics.clear();
    this.graphicsFront.clear();

    this.svgPaths.forEach(({ path, strokeWidth, color, fill, attributes }) => {
      if (color != null) {
        this.graphics.lineStyle(strokeWidth, color, 1);
        this.graphicsBack.lineStyle(strokeWidth, color, 1);
        this.graphicsFront.lineStyle(strokeWidth, color, 1);
      } else {
        this.graphics.lineStyle(0, 0, 0);
        this.graphicsBack.lineStyle(0, 0, 0);
        this.graphicsFront.lineStyle(0, 0, 0);
      }
      if (fill != null) {
        this.graphics.fillStyle(fill, 1);
        this.graphicsBack.fillStyle(fill, 1);
        this.graphicsFront.fillStyle(fill, 1);
      } else {
        this.graphics.fillStyle(0, 0);
        this.graphicsBack.fillStyle(0, 0);
        this.graphicsFront.fillStyle(0, 0);
      }
      // TODO (johnedvard) figure out why fillPath doesn't work
      if (attributes?.isParallaxBack) {
        this.graphicsBack.fillPoints(path.getPoints());
        path.draw(this.graphicsBack);
        this.groupBack.add(this.graphicsBack);
      } else if (attributes?.isParallaxFront) {
        this.graphicsFront.fillPoints(path.getPoints());
        path.draw(this.graphicsFront);
        this.groupFront.add(this.graphicsFront);
      } else {
        this.graphics.fillPoints(path.getPoints());
        path.draw(this.graphics);
        this.graphics.translateCanvas(0, 0);
      }
    });
  }

  update(time: number, delta: number): void {
    this.player?.update(time, delta);
    this.storeBooth?.update(time, delta);
    this.boxes?.forEach((b) => b.update(time, delta));
    this.doors?.forEach((d) => d.update(time, delta));
    this.spinningBars?.forEach((b) => b.update(time, delta));
    this.timeCapsules?.forEach((b) => b.update(time, delta));
    this.platforms?.forEach((b) => b.update(time, delta));
    this.hooks?.forEach((b) => b.update(time, delta));
    this.updateLandscape();
  }

  createAnimations() {}

  loadLevels(levelIds: string[]) {
    levelIds.forEach((levelId) => {
      this.load.text(levelId, `levels/${levelId}.svg`);
      this.load.on('filecomplete', (key: string, _type, svgText: string) => {
        if (key === levelId) {
          levelSvgTexts[levelId] = svgText;
        }
      });
    });
  }

  createLevel({ levelId, fromLevelId }: TCreateLevel) {
    this.player?.destroy();
    const svgText = levelSvgTexts[levelId];
    const levelState = this.createLevelFromSvg(this, svgText);
    let pos = levelState.start;
    this.createLandskape();
    // Spawn player on the position of the door the player entered
    // TODO (johnedvard) Improve the spawn point logic
    const cameFromDoor = this.doors.find((d) => levelId === 'level0' && d.goToLevelId === fromLevelId);
    if (cameFromDoor) pos = new Phaser.Math.Vector2(cameFromDoor.body.position.x, cameFromDoor.body.position.y);
    this.player = new Player(this, { pos });
  }

  createLevelFromSvg(scene: Scene, svgText: string): LevelState {
    const svgDoc: Document = parser.parseFromString(svgText, 'image/svg+xml');
    this.svgPaths = createPathsFromSvg(svgDoc);
    this.collisionBoxes = createCollisionBoxesFromPaths(scene, this.svgPaths);
    this.bitmapTexts = createTextFromSvg(scene, svgDoc);
    this.boxes = createBoxesFromSvg(scene, svgDoc);
    this.spinningBars = createSpinningBarsFromSvg(scene, svgDoc);
    this.storeBooth = createStoreBoothFromSvg(scene, svgDoc);
    this.doors = createDoorsFromSvg(scene, svgDoc);
    this.timeCapsules = createTimeCapsulesFromSvg(scene, svgDoc);
    this.platforms = createPlatformsFromSvg(scene, svgDoc);
    this.hooks = createHooksFromSvg(scene, svgDoc);
    this.setDoorState(this.doors);

    const start = getPosFromSvgCircle(svgDoc.querySelector(`#start`));

    return { start };
  }
  /** Update properties on the door, e.g. if it can be unlocked or not */
  setDoorState(doors: Door[]) {
    if (this.levelId === 'levelTutorial') return; // Exception for the tutorial level
    const gameState = getGameState();
    doors.forEach((d) => {
      if (d.goToLevelId === 'level0') return;
      const goToLevelNum = parseInt(d.goToLevelId.split('level')[1]); // name pattern is level{number}, e.g. level0 and level1
      if (gameState[`level${goToLevelNum - 1}`] >= 0) {
        d.canUnlock = true;
      }
    });
  }

  updateLandscape() {
    if (!this.svgPaths) return;

    const parallaxFactorFront = this.cameras.main.scrollX / 4;
    const parallaxFactorBack = (this.cameras.main.scrollX / 10) * -1;
    this.groupFront?.shiftPosition(parallaxFactorFront, 0);
    this.groupBack?.shiftPosition(parallaxFactorBack, 0);
  }
  destroyLevel() {
    this.player?.destroy();
    this.storeBooth?.destroy();
    this.collisionBoxes?.forEach((b) => this.matter.world.remove(b));
    this.bitmapTexts?.forEach((b) => b.destroy());
    this.collisionBoxes.length = 0;
    this.boxes?.forEach((b) => b?.destroy());
    this.boxes.length = 0;
    this.doors?.forEach((d) => d?.destroy());
    this.doors.length = 0;
    this.spinningBars?.forEach((b) => b?.destroy());
    this.spinningBars.length = 0;
    this.timeCapsules?.forEach((b) => b?.destroy());
    this.timeCapsules.length = 0;
    this.platforms?.forEach((b) => b?.destroy());
    this.platforms.length = 0;
    this.hooks?.forEach((b) => b?.destroy());
    this.hooks.length = 0;
  }
  restartLevel({ levelId }: { levelId: string }) {
    this.destroyLevel();

    this.create({ levelId, fromLevelId: this.levelId });
  }

  onGoToLevel = ({ levelId }: { levelId: string }) => {
    this.stopListeningForEvents();
    // Save the current level before we go to the next
    saveLevelComplete({ levelId: this.levelId, collectedCapsules: this.collectedCapsules });
    this.restartLevel({ levelId });
  };

  onTimeCapsuleCollected = () => {
    // Exception for the tutorial level
    if (this.levelId === 'levelTutorial') {
      emit(GameEvent.startDialog, { dialog: capturedCapsuleDialog });
    }
    playTimeCapsulePickup();
    this.collectedCapsules++;
  };

  onRestartLevel = () => {
    this.restartLevel({ levelId: this.levelId });
  };
  onDestroyGame = () => {
    this.destroyLevel();
  };

  listenForEvents() {
    on(GameEvent.goToLevel, this.onGoToLevel);
    on(GameEvent.collectTimeCapsule, this.onTimeCapsuleCollected);
    on(GameEvent.restartLevel, this.onRestartLevel);
    on(GameEvent.destroyGame, this.onDestroyGame);
  }

  stopListeningForEvents() {
    off(GameEvent.goToLevel, this.onGoToLevel);
    off(GameEvent.collectTimeCapsule, this.onTimeCapsuleCollected);
    off(GameEvent.restartLevel, this.onRestartLevel);
    off(GameEvent.destroyGame, this.onDestroyGame);
  }

  checkIfGameCleared() {
    if (this.hasDisplayedGameClearDialog) return;
    const levelsThatCanBeCleared = ['level1', 'level2', 'level3'];
    const gameState = getGameState();
    let hasWon = true;
    levelsThatCanBeCleared.forEach((l) => {
      if (gameState[l] === undefined) {
        hasWon = false;
      }
    });
    if (hasWon) {
      emit(GameEvent.startDialog, { dialog: gameWonDialog });
      this.hasDisplayedGameClearDialog = true;
    }
  }
}

'''
'''--- src/scenes/MainMenu.ts ---
import { Input, GameObjects } from 'phaser';
import { gamepadIndex } from '~/utils/gamepadUtils';
import { displayMainMenuItems, highlightSelectedMenu, destroyMenu } from '~/menu';
import { off, on } from '~/utils/eventEmitterUtils';
import { GameEvent } from '~/enums/GameEvent';

export class MainMenu extends Phaser.Scene {
  selectedMenuIndex = 0;
  menuItems: { txt: GameObjects.BitmapText; sceneName: string; args?: any }[];
  constructor() {
    super('MainMenu');
  }

  setPrevMenuIndex() {
    const nextIndex = this.selectedMenuIndex - 1;
    if (nextIndex < 0) this.selectedMenuIndex = this.menuItems.length - 1;
    else this.selectedMenuIndex = nextIndex;
  }

  setNextMenuIndex() {
    const nextIndex = this.selectedMenuIndex + 1;
    if (nextIndex >= this.menuItems.length) this.selectedMenuIndex = 0;
    else this.selectedMenuIndex = nextIndex;
  }

  selectMenu(index: number) {
    const menuItem = this.menuItems[index];
    const sceneName = menuItem.sceneName;
    this.scene.start(sceneName, { ...menuItem.args });
  }

  onGamepadDown = (_pad: Input.Gamepad.Gamepad, button: Input.Gamepad.Button) => {
    switch (button.index) {
      case gamepadIndex.dpadup:
        this.setPrevMenuIndex();
        break;
      case gamepadIndex.dpaddown:
        this.setNextMenuIndex();
        break;
    }
  };

  onKeyboardDown = (evt: KeyboardEvent) => {
    switch (evt?.code) {
      case 'ArrowUp':
      case 'KeyW':
        this.setPrevMenuIndex();
        break;
      case 'ArrowDown':
      case 'KeyS':
        this.setNextMenuIndex();
        break;
      case 'Enter':
      case 'Space':
        this.selectMenu(this.selectedMenuIndex);
        break;
    }
  };
  listenForInput() {
    this.input.gamepad.on('down', this.onGamepadDown);
    this.input.keyboard.on('keydown', this.onKeyboardDown);
    on(GameEvent.destroyGame, this.onDestroyGame);
  }

  create(): void {
    this.menuItems = displayMainMenuItems(this);
    this.listenForInput();
  }

  onDestroyGame = () => {
    destroyMenu();
    this.input.gamepad.off('down', this.onGamepadDown);
    this.input.keyboard.off('keydown', this.onKeyboardDown);
    off(GameEvent.destroyGame, this.onDestroyGame);
  };

  update(time: number, delta: number): void {
    highlightSelectedMenu(this, delta, { index: this.selectedMenuIndex });
  }
}

'''
'''--- src/scenes/NewGameIntro.ts ---
import { Input } from 'phaser';
import { DepthGroup } from '~/enums/DepthGroup';
import { SceneKey } from '~/enums/SceneKey';

const introScript = `While modern history was set into motion by the True Arcadians,
something must have set the stage for them 
— for the chaotic world they struggled against in those first,
desperate days. We say the the first True Arcadians had no memories
of what came before their awakening, and this is true;
their lives essentially began the moment they arrived.
But all True Arcadians know one thing: everything broke,
and Arcadia is all that's left.
Simply put, the Shattering created Arcadia... 
but exactly what shattered and why has been the subject
of obsessive research and furious debate over the centuries.
Every artifact, every structure buried in this world holds
a piece of that puzzle!`;

// TODO (johnedvard) Add a meaningful new game intro
export class NewGameIntro extends Phaser.Scene {
  spineObject: SpineGameObject;
  startNewGame() {
    this.scene.start(SceneKey.Level, { levelId: 'levelTutorial' });
  }
  listenForInput() {
    this.input.gamepad.on('down', (_pad: Input.Gamepad.Gamepad, button: Input.Gamepad.Button) => {
      this.startNewGame();
    });
    this.input.keyboard.on('keydown', (evt: KeyboardEvent) => {
      this.startNewGame();
    });
  }
  preload(): void {}

  create(): void {
    this.add.bitmapText(this.cameras.main.centerX, 200, 'atari', introScript, 33, 1).setAlpha(1).setOrigin(0.5, 0);
    this.listenForInput();
    this.initSpineObject();
  }

  initSpineObject() {
    const pos = new Phaser.Math.Vector2(this.cameras.main.width / 2, this.cameras.main.height - 500);
    this.spineObject = this.add.spine(pos.x, pos.y, 'sageFloating', 'idle', true).setDepth(DepthGroup.player);
  }
}

'''
'''--- src/scenes/Preload.ts ---
import { Input } from 'phaser';
import { SceneKey } from '~/enums/SceneKey';

export class Preload extends Phaser.Scene {
  isIntroComplete = false;
  isStartMainMenu = false;

  constructor() {
    super('Preload');
  }

  async startIntro(): Promise<void> {
    this.isIntroComplete = true;
  }

  async startMainMenu() {
    this.isStartMainMenu = true;
    setTimeout(() => {
      this.scene.start(SceneKey.MainMenu);
    }, 300);
  }

  listenForInput() {
    this.input.gamepad.on('down', (_pad: Input.Gamepad.Gamepad, button: Input.Gamepad.Button) => {
      if (this.isStartMainMenu) return;
      this.startMainMenu();
    });
    this.input.keyboard.on('keydown', (evt: KeyboardEvent) => {
      if (this.isStartMainMenu) return;
      this.startMainMenu();
    });
  }

  preload(): void {}

  create(): void {
    this.startIntro();
    this.listenForInput();
  }

  update(time: number, delta: number): void {
    if (this.isStartMainMenu) {
    } else if (this.isIntroComplete) {
    }
  }
}

'''
'''--- src/scenes/SceneInput.ts ---
import { Input, Scene } from 'phaser';
import { ControllerEvent } from '~/enums/ControllerEvent';
import { GameEvent } from '~/enums/GameEvent';
import { emit, off, on } from '~/utils/eventEmitterUtils';
import { gamepadIndex, leftstick } from '~/utils/gamepadUtils';

/**
 * Launch this scene once for every game, and all input will be handled by this this.
 * Send events for gameobjects to react to
 */
export class SceneInput extends Scene {
  keyboards: Record<string, Record<string, Phaser.Input.Keyboard.Key>> = {};
  gamepads: Record<string, Input.Gamepad.Gamepad> = {};

  create(data: any) {
    this.createKeyboardControl();
    this.createGamepadControl();
    this.createMouseControl();
    on(GameEvent.destroyGame, this.onDestroyGame);
  }

  update(time: number, delta: number): void {
    this.updateKeyboardControls();
    this.updateGamepadControls();
  }

  createMouseControl = () => {
    this.input.mouse.disableContextMenu();
    this.handleMouseControl();
  };

  onPointerDown = (pointer: Phaser.Input.Pointer) => {
    if (pointer.primaryDown) {
      const pos = new Phaser.Math.Vector2(pointer.worldX, pointer.worldY);
      emit(ControllerEvent.shoot, { pos });
    }
  };

  createKeyboardControl = () => {
    const keyboard: Record<string, Phaser.Input.Keyboard.Key> = this.input.keyboard.createCursorKeys();
    keyboard.KeyW = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W);
    keyboard.KeyA = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A);
    keyboard.KeyD = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D);
    keyboard.KeyS = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);
    this.keyboards[this.scene.key] = keyboard;
    this.handleKeyboardListener();
  };

  onKeyboardDown = (evt: KeyboardEvent) => {
    switch (evt?.code) {
      case 'KeyE':
        const pos = new Phaser.Math.Vector2(this.input.activePointer.worldX, this.input.activePointer.worldY);
        emit(ControllerEvent.action, { pos });
        break;
      case 'Space':
        emit(ControllerEvent.jump);
        break;
      case 'KeyI':
        emit(ControllerEvent.inventory);
        break;
      case 'KeyW':
      case 'ArrowUp':
        emit(ControllerEvent.up);
        break;
      case 'KeyR':
        emit(GameEvent.restartLevel);
        break;
    }
  };

  onGamepadDown = (_pad: Input.Gamepad.Gamepad, button: Input.Gamepad.Button) => {
    switch (button.index) {
      case gamepadIndex.west:
        emit(ControllerEvent.shoot);
        break;
      case gamepadIndex.south:
        emit(ControllerEvent.jump);
        break;
      case gamepadIndex.north:
        emit(ControllerEvent.inventory);
        break;
      case gamepadIndex.up:
        emit(ControllerEvent.up);
        break;
    }
  };

  // TODO (johnedvard) support more controls for each scene
  // TODO (johnedvard) try to connect control again if it was plugged in later
  createGamepadControl = () => {
    if (!this.gamepads[this.scene.key] && this.input.gamepad.getPad(0)) {
      this.gamepads[this.scene.key] = this.input.gamepad?.getPad(0);
      this.handleGamepaddListener();
    }
  };

  updateKeyboardControls = (): boolean => {
    const keyboard = this.keyboards[this.scene.key];
    if (!keyboard) return;
    const velocity = { x: 0, y: 0 };

    if (keyboard.left.isDown || keyboard.KeyA.isDown) velocity.x = -1;
    if (keyboard.right.isDown || keyboard.KeyD.isDown) velocity.x = 1;
    if (keyboard.up.isDown || keyboard.KeyW.isDown) velocity.y = -1;
    if (keyboard.down.isDown || keyboard.KeyS.isDown) velocity.y = 1;

    emit(ControllerEvent.move, { velocity });
  };

  updateGamepadControls = (): void => {
    const gamepad = this.gamepads[this.scene.key];
    if (!gamepad) {
      // maybe gamepad was connected while in-game. Try to create again
      this.createGamepadControl();
      return;
    }

    const deadZone = 0.1; // prevent gamepad from moving when thumbstick is close to 0
    const velocity = { x: gamepad.axes[leftstick.x].getValue(), y: gamepad.axes[leftstick.y].getValue() };

    if (gamepad.isButtonDown(gamepadIndex.dpadleft)) velocity.x = -1;
    if (gamepad.isButtonDown(gamepadIndex.dpadright)) velocity.x = 1;
    if (gamepad.isButtonDown(gamepadIndex.dpadup)) velocity.y = -1;
    if (gamepad.isButtonDown(gamepadIndex.dpaddown)) velocity.y = 1;

    const isDeadzone = Math.abs(velocity.x) <= deadZone || Math.abs(velocity.y) <= deadZone;
    if (!isDeadzone) {
      emit(ControllerEvent.move, { velocity });
    }
  };

  onDestroyGame = () => {
    this.removeListeners();
  };

  handleKeyboardListener = () => {
    this.input.keyboard.on('keydown', this.onKeyboardDown);
  };

  handleMouseControl = () => {
    this.input.on('pointerdown', this.onPointerDown);
  };

  handleGamepaddListener = () => {
    this.input.gamepad.on('down', this.onGamepadDown);
  };

  removeListeners = () => {
    this.input.keyboard.off('keydown', this.onKeyboardDown);
    this.input.off('pointerdown', this.onPointerDown);
    this.input.gamepad.off('down', this.onGamepadDown);
    off(GameEvent.destroyGame, this.onDestroyGame);
  };
}

'''
'''--- src/scenes/StoreInterface.ts ---
import { GameObjects, Scene } from 'phaser';

import { DepthGroup } from '~/enums/DepthGroup';
import { GameEvent } from '~/enums/GameEvent';
import {
  equipSkin,
  getEquippedSkinName,
  getNftSeriesId,
  isSignedIn,
  login,
  nftBuy,
  nftTokensForOwner,
} from '~/near/nearConnection';
import { emit } from '~/utils/eventEmitterUtils';

export class StoreInterface extends Scene {
  spineFrame: SpineGameObject;
  skinSlots: SpineGameObject[] = [];
  playerSkins: SpineGameObject[] = [];
  closeButtonPos = new Phaser.Math.Vector2(1994, 203);
  closeButtonRadius = 100;
  closeButton: Phaser.Geom.Circle;
  closeBtnGraphics: Phaser.GameObjects.Graphics;

  selectButtonPos = new Phaser.Math.Vector2(940, 966);
  selectButtonWidth = 628;
  selectButtonHeight = 148;
  selectButton: Phaser.Geom.Rectangle;
  selectBtnGraphics: Phaser.GameObjects.Graphics;

  selectButtonText: string;
  selectBitmap: GameObjects.BitmapText;

  skinNum = 3;
  skins: { name: string; isOwned: boolean; seriesId: string; price: string; nearPrice: string }[] = [
    { name: 'blue', isOwned: true, seriesId: undefined, price: undefined, nearPrice: undefined },
    {
      name: 'green',
      isOwned: false,
      seriesId: getNftSeriesId('tokiGreen'),
      price: '1050000000000000000000000',
      nearPrice: '1',
    },
    {
      name: 'red',
      isOwned: false,
      seriesId: getNftSeriesId('tokiRed'),
      price: '1050000000000000000000000',
      nearPrice: '1',
    },
  ];

  equippedSkinName = '';
  selectedSkinName = '';
  isInitialized = false;

  create(data: any) {
    this.equippedSkinName = getEquippedSkinName();
    this.selectedSkinName = getEquippedSkinName();
    this.initSpineObjects();
    this.getNftsAndUpdateOwnership();
    this.initSelectButtonTextLabel();
    this.initHitAreas();

    this.sys.events.on('stop', (data) => {
      // perform any other necessary actions here
    });
    this.isInitialized = true;
  }

  update(time: number, delta: number) {
    // TODO (johnedvard) only draw debug if game is in debug mode
    // this.drawDebug();
  }

  drawDebug() {
    if (!this.closeBtnGraphics) return;
    if (!this.selectBtnGraphics) return;
    this.closeBtnGraphics.clear();
    this.closeBtnGraphics.fillCircleShape(this.closeButton);

    this.selectBtnGraphics.clear();
    this.selectBtnGraphics.fillRectShape(this.selectButton);
  }

  private initSelectButtonTextLabel() {
    let originX = -0.25;
    let originY = 0.2;
    if (!isSignedIn()) {
      this.selectButtonText = 'Login';
      originX = -1.2;
    } else {
      this.selectButtonText = 'Select skin';
    }
    this.selectBitmap = this.add
      .bitmapText(this.selectButtonPos.x, this.selectButtonPos.y, 'atari', this.selectButtonText, 40)
      .setAlpha(1)
      .setOrigin(originX, originY)
      .setDepth(DepthGroup.front);
    this.selectBitmap.setTint(0x000000);
  }

  private initHitAreas() {
    this.initCloseButton();
    this.initSelectButton();
  }

  private initCloseButton() {
    this.closeBtnGraphics = this.add.graphics().setDepth(DepthGroup.front);
    this.closeButton = new Phaser.Geom.Circle(this.closeButtonPos.x, this.closeButtonPos.y, this.closeButtonRadius);
    Phaser.Geom.Circle.Offset(this.closeButton, this.closeButtonRadius, this.closeButtonRadius);

    this.closeBtnGraphics.setInteractive(this.closeButton, Phaser.Geom.Circle.Contains);
    this.closeBtnGraphics.on('pointerover', (pointer) => {
      this.spineFrame.play('close-button-hover', true, true);
    });
    this.closeBtnGraphics.on('pointerout', (pointer) => {
      this.spineFrame.play('idle', true, true);
    });
    this.closeBtnGraphics.on('pointerup', (pointer) => {
      emit(GameEvent.closeStore);
    });
  }
  private initSelectButton() {
    this.selectBtnGraphics = this.add.graphics().setDepth(DepthGroup.front);
    this.selectButton = new Phaser.Geom.Rectangle(
      this.selectButtonPos.x,
      this.selectButtonPos.y,
      this.selectButtonWidth,
      this.selectButtonHeight
    );
    Phaser.Geom.Rectangle.Offset(this.selectButton, 25, -60);

    this.selectBtnGraphics.setInteractive(this.selectButton, Phaser.Geom.Rectangle.Contains);
    this.selectBtnGraphics.on('pointerover', (pointer) => {
      this.spineFrame.play('button-hover', true, true);
    });
    this.selectBtnGraphics.on('pointerout', (pointer) => {
      this.spineFrame.play('idle', true, true);
    });
    this.selectBtnGraphics.on('pointerup', (pointer) => {
      if (isSignedIn()) {
        const selectedSkin = this.skins.find((s) => s.name === this.selectedSkinName);
        if (!selectedSkin.isOwned) {
          nftBuy({ token_series_id: selectedSkin.seriesId, priceInYoctoNear: selectedSkin.price });
          this.selectBitmap.setText('Buying NFT');
          this.selectBitmap.setOrigin(-0.35, this.selectBitmap.originY);
        } else {
          equipSkin(this.selectedSkinName);
          emit(GameEvent.changeSkin, { skinName: this.selectedSkinName });
          emit(GameEvent.closeStore);
        }
      } else {
        login();
      }
    });
  }

  private initSpineObjects() {
    this.skinSlots.length = 0;
    this.playerSkins.length = 0;
    this.spineFrame = this.add
      .spine(this.cameras.main.width / 2, this.cameras.main.height / 2, 'storeInterface', 'idle', true)
      .setScale(1)
      .setDepth(DepthGroup.front);

    const startX = 848;
    const startY = 608;
    const size = 400;
    const margin = 40;

    for (let i = 0; i < this.skinNum; i++) {
      const skinSlot = this.add
        .spine(startX + i * (size + margin), startY, 'skinSlot', 'idle', true)
        .setScale(1)
        .setDepth(DepthGroup.front)
        .setInteractive();
      const selectedSkinNameIndex = this.skins.findIndex((s) => s.name === this.selectedSkinName);
      if (selectedSkinNameIndex === i) {
        skinSlot.play('selected', true, true);
      }
      skinSlot.on('pointerup', (pointer) => {
        let index = 0;
        this.skinSlots.forEach((s, i) => {
          if (s === skinSlot) index = i;
          s.play('idle', true, true);
        });
        this.playerSkins.forEach((p) => p.play('idle', true, true));
        skinSlot.play('selected', true, true);
        const skin = this.skins[index];
        this.playerSkins[index].play('walk', true, true);
        this.selectedSkinName = skin.name;
        if (isSignedIn()) {
          if (!skin.isOwned) {
            this.selectBitmap.setText(`Buy for ${skin.nearPrice} NEAR`);
            this.selectBitmap.setOrigin(-0.1, this.selectBitmap.originY);
          } else {
            this.selectBitmap.setText(`Select skin`);
            this.selectBitmap.setOrigin(-0.25, this.selectBitmap.originY);
          }
        }
      });
      skinSlot.on('pointerover', (pointer) => {});
      this.skinSlots.push(skinSlot);

      const playerSkin = this.add
        .spine(startX + i * (size + margin), startY + 40, 'hero', 'idle', true)
        .setScale(1)
        .setDepth(DepthGroup.front)
        .setInteractive()
        .setSkinByName(this.skins[i].name);
      this.playerSkins.push(playerSkin);
    }
  }

  async getData() {
    const equippedSkinName = getEquippedSkinName();

    if (equippedSkinName) {
      this.equippedSkinName = equippedSkinName;

      const index = this.skins.findIndex((s) => s.name === this.equippedSkinName);

      if (index != -1) {
        if (this.playerSkins[index]) {
          this.playerSkins[index].play('walk', true, true);
        }
        if (this.skinSlots[index]) {
          this.skinSlots[index].play('selected', true, true);
        }
      }
    }
  }

  private updateNftOwnership(tokens: any[]) {
    console.log('NFTs:', tokens);
    tokens.forEach((token) => {
      if (token.token_id && token.token_id.split(':')[0]) {
        const tokenSeriesId = token.token_id.split(':')[0];
        this.skins.forEach((s) => {
          if (s.seriesId === tokenSeriesId) s.isOwned = true;
        });
      }
    });
  }

  async getNftsAndUpdateOwnership() {
    nftTokensForOwner()
      .then((tokens) => {
        this.updateNftOwnership(tokens);
      })
      .catch((err) => {
        console.error(err);
      });
  }
}

'''
'''--- src/scenes/UserInterface.ts ---
import { Scene } from 'phaser';

export class UserInterface extends Scene {
  create(data: any) {
    // Add UI elements
    this.add.text(10, 10, `Create User interface`, { font: '56px Arial' });

    this.sys.events.on('stop', function (data) {
      // perform any other necessary actions here
    });
  }
}

'''
'''--- src/shaders/DissolvePipeline.ts ---
const fragShader = `
  precision mediump float;

  uniform sampler2D uMainSampler;
  uniform float uTime;

  varying vec2 outTexCoord;

  float noise(vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);
  }

  void main() {
      vec2 st = outTexCoord;
      vec4 color = texture2D(uMainSampler, st);

      // Calculate dissolve effect based on time and texture coordinates
      float dissolve = 1.0 + (noise(st + uTime) * 0.5) - uTime;

      // Apply dissolve effect to the fragment color
      color.a *= smoothstep(0.0, 0.1, dissolve);
      color.rgb *= color.a;

      gl_FragColor = color;
  }
`;

export class DissolvePipeline extends Phaser.Renderer.WebGL.Pipelines.SinglePipeline {
  constructor(game: Phaser.Game) {
    super({
      game,
      fragShader,
    });
  }

  onBoot(): void {
    Phaser.Renderer.WebGL.Pipelines.SinglePipeline.prototype.onBoot.call(this);

    this.set1f('uTime', 0);
  }

  onPreRender() {
    this.setTime('time');
    this.set1f('uTime', this.game.loop.time / 5000);
  }
}

'''
'''--- src/shaders/WavyPipeline.ts ---
const vertShader = `
  precision mediump float;

  uniform mat4 uProjectionMatrix;

  attribute vec2 inPosition;
  attribute vec2 inTexCoord;
  attribute vec4 inColor;

  varying vec2 outTexCoord;
  varying vec4 outColor;

  void main(void) {
    gl_Position = uProjectionMatrix * vec4(inPosition, 0.0, 1.0);
    outTexCoord = inTexCoord;
    outColor = inColor;
  }
`;

const fragShader = `
  precision mediump float;

  uniform sampler2D uMainSampler;
  uniform float uTime;
  uniform float uSpeed;
  uniform float uAmplitude;
  uniform float uWaveLength;

  varying vec2 outTexCoord;
  varying vec4 outColor;

  void main(void) {
    float time = uTime * uSpeed;
    vec2 texCoord = outTexCoord;
    float position = texCoord.x * uWaveLength;

    float offset = sin(uTime * uSpeed + position) * uAmplitude;

    vec2 distortedCoord = vec2(texCoord.x, texCoord.y + offset);
    gl_FragColor = texture2D(uMainSampler, distortedCoord);
  }
`;

export class WavyPipeline extends Phaser.Renderer.WebGL.Pipelines.SinglePipeline {
  constructor(game: Phaser.Game) {
    super({
      game,
      fragShader,
      vertShader,
    });
  }

  onBoot(): void {
    Phaser.Renderer.WebGL.Pipelines.SinglePipeline.prototype.onBoot.call(this);

    this.set1f('uTime', 0);
    this.set1f('uSpeed', 5.0);
    this.set1f('uAmplitude', 0);
    this.set1f('uWaveLength', 99);
  }

  onPreRender() {
    this.setTime('time');
    this.set1f('uTime', this.game.loop.time / 1000);
  }
  setWaveLength(value: number) {
    this.set1f('uWaveLength', value);
  }
  setAmplitude(value: number) {
    this.set1f('uAmplitude', value);
  }
}

'''
'''--- src/types/ChainImageState.ts ---
export type ChainImageState = 'active' | 'inactive' | 'predelay' | 'started' | 'ended';

'''
'''--- src/types/DoorState.ts ---
export type DoorState = 'open' | 'locked';

'''
'''--- src/types/GameMode.ts ---
export type GameMode = 'dev' | 'prod';

'''
'''--- src/types/LevelState.ts ---
/**
 * state of level when it's created
 */
export type LevelState = {
  start: Phaser.Math.Vector2;
  totalCapsules?: number;
  levelId?: string;
};

'''
'''--- src/types/NearNet.ts ---
export type NearNet = 'testnet' | 'mainnet';

'''
'''--- src/types/NftSeriesId.ts ---
export type NftSeriesId = 'tokiGreen' | 'tokiRed';

'''
'''--- src/types/PlayerState.ts ---
export type PlayerState = 'idle' | 'walk' | 'jump' | 'killed';

'''
'''--- src/types/SaveGameState.ts ---
export type SaveGameState = {
  levelState?: { [levelId: string]: number }; // number of time capsules captured for the level
};

'''
'''--- src/types/SaveLevelState.ts ---
/**
 * State when completing a level
 */
export type SaveLevelState = {
  levelId: string;
  collectedCapsules: number;
};

'''
'''--- src/types/SvgPath.ts ---
import { SvgPathAttributes } from './SvgPathAttributes';

export type SvgPath = {
  svgPathEl: SVGElement;
  path: Phaser.Curves.Path;
  strokeWidth: number;
  color?: number;
  fill?: number;
  attributes?: SvgPathAttributes;
};

'''
'''--- src/types/SvgPathAttributes.ts ---
export type SvgPathAttributes = { isParallaxBack?: boolean; isParallaxFront?: boolean };

'''
'''--- src/types/TimeCapsuleState.ts ---
export type TimeCapsuleState = 'idle' | 'collected';

'''
'''--- src/utils/eventEmitterUtils.ts ---
const emitter = new Phaser.Events.EventEmitter();
export const emit = (evt: string, data?: any) => emitter.emit(evt, data);
export const on = (evt: string, callback: Function) => emitter.on(evt, callback);
export const off = (evt: string, callback: Function) => emitter.off(evt, callback);

'''
'''--- src/utils/gameUtils.ts ---
import { Scene } from 'phaser';
import { playLockObject, playUnLockObject } from './soundUtils';
import { IGameObject } from '~/interfaces/IGameObject';
import { StasisChain } from '~/gameobjects/StatisChain';

/**
 * Store the mapping between a game object, and it's parent
 */
const bodyTypeMap: { [key: number]: IGameObject } = {};

export const getCanvas = (): HTMLCanvasElement => {
  return document.querySelector('#moons-of-terra');
};

export const getCenter = (scene: Scene): Phaser.Math.Vector2 => {
  return new Phaser.Math.Vector2(scene.cameras.main.centerX, scene.cameras.main.centerY);
};

export const commonTimeLock = (scene: Scene, body: MatterJS.BodyType) => {
  body.isStatic = !body.isStatic;
  const pos = new Phaser.Math.Vector2(body.position.x, body.position.y);
  if (body.isStatic) {
    playLockObject();
    for (let i = 0; i < 5; i++) {
      new StasisChain(scene, { pos, numChainUnits: 10 }).lockAnimation();
    }
  } else {
    playUnLockObject();
    for (let i = 0; i < 5; i++) {
      const numChainUnits = 2 + Math.floor(Math.random() * 3);
      new StasisChain(scene, { pos, numChainUnits }).unlockAnimation();
    }
  }
};

export const setBodyMapping = (body: MatterJS.BodyType, object: IGameObject) => {
  bodyTypeMap[body.id] = object;
};

export const getBodyMapping = (body: MatterJS.BodyType): IGameObject => {
  return bodyTypeMap[body.id];
};

/**
 * Need to set these properties to prevent the player from sliding on the object after making the platfor stattic
 */
export const stopCompletely = (scene: Scene, body: MatterJS.BodyType) => {
  if (!body) return;
  scene.matter.setAngularVelocity(body, 0);
  scene.matter.setVelocity(body, 0, 0);
};

'''
'''--- src/utils/gameobjectUtils.ts ---
import { Scene } from 'phaser';
import { IGameObject } from '~/interfaces/IGameObject';

export const destroyObject = (scene: Scene, object: IGameObject) => {
  object.stopListeningForEvents();
  if (object.body) scene.matter.world.remove(object.body);
  object.body = null;
  if (object.spineObject) {
    object.spineObject.destroy();
    object.spineObject = null;
  }
};

'''
'''--- src/utils/gamepadUtils.ts ---
/**
 * Reference Phaser: https://phaser.io/examples/v3/view/input/gamepad/gamepad-debug
 * Reference Kontra: https://straker.github.io/kontra/api/gamepad
 */
export const gamepadIndex: { [key: string]: number } = {
  south: 0,
  east: 1,
  west: 2,
  north: 3,
  dpadup: 12,
  dpaddown: 13,
  dpadleft: 14,
  dpadright: 15,
};

export const gamepadName: { [key: number]: string } = {
  0: 'south',
  1: 'east',
  2: 'west',
  3: 'north',
  12: 'dpadup',
  13: 'dpaddown',
  14: 'dpadleft',
  15: 'dpadright',
};

export const leftstick = { x: 0, y: 1 };
export const rightstick = { x: 2, y: 3 };

'''
'''--- src/utils/playerUtils.ts ---
import { Scene } from 'phaser';
import { BodyTypeLabel } from '~/enums/BodyTypeLabel';
import { Player } from '~/gameobjects/Player';
import { IGameObject } from '~/interfaces/IGameObject';
import { getBodyMapping } from './gameUtils';
import { GameEvent } from '~/enums/GameEvent';
import { emit } from './eventEmitterUtils';

/**
 * Aim the weapon, but not farther out than the circle
 */
export const updateAim = (scene: Scene, aimBone: spine.Bone) => {
  if (!aimBone) return;
  let mouseX = scene.input.activePointer.worldX;
  let mouseY = -scene.input.activePointer.worldY + scene.cameras.main.height;

  let phaserMousePos = new Phaser.Math.Vector2(mouseX, mouseY);

  let localPos = aimBone.parent.worldToLocal(phaserMousePos);

  aimBone.x = localPos.x;
  aimBone.y = localPos.y;
};

export const startActionRoutine = (scene: Scene, startPos: Phaser.Math.Vector2, endPos: Phaser.Math.Vector2) => {
  const graphics = scene.add.graphics();
  const maxEllapsedTime = 300;
  let ellapsedTime = 0;
  const gameUpdateListener = (time: number, delta: number) => {
    ellapsedTime += delta;
    graphics.clear();
    graphics.lineStyle((maxEllapsedTime - ellapsedTime) / 60, 0xffff00, 1);
    graphics.moveTo(startPos.x, startPos.y);
    graphics.lineTo(endPos.x, endPos.y);
    graphics.stroke();
    if (ellapsedTime >= maxEllapsedTime) {
      graphics.clear();
      scene.events.off(Phaser.Scenes.Events.UPDATE, gameUpdateListener);
      return;
    }
  };
  scene.events.on(Phaser.Scenes.Events.UPDATE, gameUpdateListener);
  return gameUpdateListener;
};

/**
 *
 * @returns the closest object on the line that intersects with it. If no intersection is detected, return null
 */
export const getClosestBody = (
  scene: Scene,
  startPos: Phaser.Math.Vector2,
  endPos: Phaser.Math.Vector2
): MatterJS.BodyType | null => {
  const line = new Phaser.Geom.Line(startPos.x, startPos.y, endPos.x, endPos.y); // ray-cast
  var bodies = scene.matter.world
    .getAllBodies()
    .filter((b) => {
      return (
        b.label !== BodyTypeLabel.proximity && b.label !== BodyTypeLabel.player && b.label !== BodyTypeLabel.constraint
      );
    })
    .sort((a, b) => {
      const aPos = new Phaser.Math.Vector2(a.position.x, a.position.y);
      const bPos = new Phaser.Math.Vector2(b.position.x, b.position.y);
      const distanceAFromStart = aPos.subtract(startPos).length();
      const distanceBFromStart = bPos.subtract(startPos).length();
      return distanceAFromStart - distanceBFromStart;
    });

  for (var i = 0; i < bodies.length; i++) {
    var body = bodies[i];
    var vertices = body.vertices;

    // loop through all edges of the body and check if the line segment intersects with each edge
    for (var j = 0; j < vertices.length; j++) {
      var v1 = vertices[j];
      var v2 = vertices[(j + 1) % vertices.length];
      var intersection = Phaser.Geom.Intersects.LineToLine(line, new Phaser.Geom.Line(v1.x, v1.y, v2.x, v2.y));

      if (intersection) {
        return body;
      }
    }
  }
  return null;
};

/**
 * @returns the closest point on the line that intersects with an object. kIf no intersection is detected, return the original @see endPos
 */
export const getClosestEndPos = (
  body: MatterJS.BodyType,
  startPos: Phaser.Math.Vector2,
  endPos: Phaser.Math.Vector2,
  direction: Phaser.Math.Vector2
): Phaser.Math.Vector2 => {
  if (!body) return endPos;
  const distanceToBox = new Phaser.Math.Vector2(body.position.x - startPos.x, body.position.y - startPos.y).length();
  // return the point where the line intersects with an edge
  return new Phaser.Math.Vector2(direction.x * distanceToBox, direction.y * distanceToBox).add(startPos);
};

export const startKilledRoutine = (scene: Scene, { pos }: { pos: Phaser.Math.Vector2 }): Promise<boolean> => {
  const killEmitterTime = 300;
  const maxEllapsedTime = 1000;
  let ellapsedTime = 0;

  const emitter = scene.add.particles(0, 0, 'particle', {
    emitZone: { source: new Phaser.Geom.Circle(pos.x, pos.y, 10), type: 'random', quantity: 100 },
    lifespan: { min: 100, max: 500 },
    speedX: { min: -600, max: 600 },
    speedY: { min: -600, max: 600 },
    accelerationY: { random: [-100, 100] },
    accelerationX: { random: [-100, 100] },
    scale: { start: 1, end: 0.3 },
    alpha: { start: 0, end: 1, steps: 5 },
    frequency: 8,
  });
  emitter.start();

  return new Promise((resolve) => {
    const gameUpdateListener = (time: number, delta: number) => {
      ellapsedTime += delta;
      if (ellapsedTime >= killEmitterTime && emitter.active) {
        emitter.stop();
      }
      if (ellapsedTime >= maxEllapsedTime) {
        scene.events.off(Phaser.Scenes.Events.UPDATE, gameUpdateListener);
        resolve(true);
      }
    };
    scene.events.on(Phaser.Scenes.Events.UPDATE, gameUpdateListener);
  });
};

export const grabItemInProximity = (scene: Scene, proximityCircle: MatterJS.BodyType): IGameObject => {
  const allObjectsInProximity = scene.matter.intersectBody(proximityCircle);
  for (let i = 0; i < allObjectsInProximity.length; i++) {
    const body: MatterJS.BodyType = <MatterJS.BodyType>allObjectsInProximity[i];
    const object = getBodyMapping(body);
    if (!object?.isGrabbable()) continue;
    emit(GameEvent.grabObject, { object });
    return object;
  }
  return null;
};

'''
'''--- src/utils/soundUtils.ts ---
import { Scene } from 'phaser';

let isMusicOn = true;
let isSfxOn = true;

let backgroundMusic;
let lockObject;
let unlockObject;
let dead;
let hourGlass;
let laserBeam;
let store;
let unlock;

export const initMusicAndSfx = (scene: Scene) => {
  backgroundMusic = scene.sound.add('backgroundMusic', { loop: true });
  lockObject = scene.sound.add('lockObject');
  unlockObject = scene.sound.add('unlockObject');
  dead = scene.sound.add('dead');
  hourGlass = scene.sound.add('hourGlass');
  laserBeam = scene.sound.add('laserBeam');
  store = scene.sound.add('store');
  unlock = scene.sound.add('unlock');
};

export const toggleMusic = () => {
  isMusicOn = !isMusicOn;
  if (!isMusicOn) {
    backgroundMusic?.pause();
  } else {
    backgroundMusic?.resume();
  }
};

export const playLockObject = () => {
  if (!isSfxOn) return;
  lockObject?.play();
};

export const playUnLockObject = () => {
  if (!isSfxOn) return;
  unlockObject?.play();
};

export const toggleSfx = () => {
  isSfxOn = !isSfxOn;
};

export const playTimeCapsulePickup = () => {
  if (!isSfxOn) return;
  hourGlass?.play();
};

export const playDeadSound = () => {
  if (!isSfxOn) return;
  dead?.play();
};

export const playStoreSound = () => {
  if (!isSfxOn) return;
  store?.play();
};

export const playLaserBeam = () => {
  if (!isSfxOn) return;
  laserBeam?.play();
};

export const playUnlockDoor = () => {
  if (!isSfxOn) return;
  unlock?.play();
};

export const playMusic = () => {
  backgroundMusic?.play();
  if (!isMusicOn) backgroundMusic?.pause();
};

'''
'''--- src/utils/storageUtils.ts ---
const keyPrefix = 'toki-';
export const setItem = (key: string, value: string) => {
  try {
    localStorage.setItem(keyPrefix + key, value);
  } catch (err) {
    console.error(err);
  }
};

export const getItem = (key: string): string | null => {
  let res = null;
  try {
    res = localStorage.getItem(keyPrefix + key);
  } catch (err) {
    console.error(err);
  } finally {
    return res;
  }
};

'''
'''--- src/utils/tutorialUtils.ts ---
export const tutorialStartDialog: string[] = [
  'Where am I? And why am I trapped in this weird suit?',
  `Everything looks so smooth, so vector-like.\nNot what I'm used used to at all.`,
  `I don't like it!`,
  `It looks like I'm trapped in a different time.\nI better figure out how to return back to my normal self.`,
];

export const capturedCapsuleDialog = [
  'What ancient artifact is this?',
  `It looks like some kind of hour glass.\n`,
  `Maybe it's related to how I can go home?`,
];

export const gameWonDialog = [
  `I've completed all stages.\nBut it seems like I'm still stuck here with the Overlord.`,
  `I guess I have to wait for the game developer to\n expand the game. Maybe then,\n I can solve all puzzles and return home!`,
];

'''
'''--- src/utils/vectorUtils.ts ---
import { Scene, Curves } from 'phaser';

import svgToPhaserPath from 'svg-to-phaser-path';

import { BodyTypeLabel } from '~/enums/BodyTypeLabel';
import { Box } from '~/gameobjects/Box';
import { Door } from '~/gameobjects/Door';
import { Hook } from '~/gameobjects/Hook';
import { Platform } from '~/gameobjects/Platform';
import { SpinningBar } from '~/gameobjects/SpinningBar';
import { StoreBooth } from '~/gameobjects/StoreBooth';
import { TimeCapsule } from '~/gameobjects/TimeCapsule';
import { SvgPath } from '~/types/SvgPath';
import { SvgPathAttributes } from '~/types/SvgPathAttributes';

export const getPosFromSvgCircle = (circleElement: SVGElement): Phaser.Math.Vector2 => {
  if (!circleElement) return new Phaser.Math.Vector2(0, 0);
  const cx = circleElement.getAttribute('cx');
  const cy = circleElement.getAttribute('cy');
  if (!cx || !cy) return null;
  return new Phaser.Math.Vector2(~~cx, ~~cy);
};

export const getPosFromSvgRect = (svgEl: SVGElement): Phaser.Math.Vector2 => {
  let x = svgEl.getAttribute('x');
  let y = svgEl.getAttribute('y');
  if (x.match('px')) x = x.split('px')[0];
  if (y.match('px')) y = y.split('px')[0];
  if (!x || !y) return null;
  return new Phaser.Math.Vector2(~~x, ~~y);
};

const getPixelValueFromAttribute = (attribute: string): number => {
  if (attribute.match('px')) attribute = attribute.split('px')[0];
  if (!attribute) return 0;
  return ~~attribute;
};
export const getHeightFromSvgRect = (svgEl: SVGElement): number => {
  return getPixelValueFromAttribute(svgEl.getAttribute('height'));
};

export const getWidthFromSvgRect = (svgEl: SVGElement): number => {
  return getPixelValueFromAttribute(svgEl.getAttribute('width'));
};

export const createPathsFromSvg = (svgDoc: Document): SvgPath[] => {
  const svgPaths: SvgPath[] = [];
  const pathEls = svgDoc.querySelectorAll('path');

  pathEls.forEach((el) => {
    const jsonPath = svgToPhaserPath(el.getAttribute('d'));
    const path = new Curves.Path();
    path.fromJSON(jsonPath);
    const color: number = rgbTohex(el.style.stroke);
    const fill: number = rgbTohex(el.style.fill);
    const attributes: SvgPathAttributes = {};
    // TODO (johnedvard) move to seperater function

    if (
      el.getAttribute('serif:id')?.match('{parallax-') ||
      el.parentElement.getAttribute('serif:id')?.match('{parallax-')
    ) {
      const parallaxType =
        el.getAttribute('serif:id')?.split('{parallax-')[1]?.split('}')[0] ||
        el.parentElement.getAttribute('serif:id')?.split('{parallax-')[1]?.split('}')[0];
      if (parallaxType === 'back') {
        attributes.isParallaxBack = true;
      } else if (parallaxType === 'front') {
        attributes.isParallaxFront = true;
      }
    }
    svgPaths.push({ path, svgPathEl: el, strokeWidth: getStrokeWidth(el), color, fill, attributes });
  });
  return svgPaths;
};

export const createCollisionBoxesFromPaths = (scene: Scene, svgPaths: SvgPath[]) => {
  const boxes = [];
  svgPaths.forEach(({ path, svgPathEl }) => {
    if (!svgPathEl.getAttribute('serif:id')?.match('{collision}')) return;
    const allPoints = path.getPoints(20);
    const offset = 25;
    for (let i = 0; i < allPoints.length - 1; i++) {
      const p0 = allPoints[i];
      const p1 = allPoints[i + 1];
      const { l0, l1 } = getParallellLine(p0, p1, offset);
      if (!p0 || !p1 || !l0 || !l1) continue;
      const boxBodyType = scene.matter.add.fromVertices((p1.x + p0.x) / 2, (p1.y + p0.y) / 2, [p0, l0, l1, p1], {
        isStatic: true,
        label: BodyTypeLabel.collisionWall,
        ignoreGravity: true,
        friction: 0,
        frictionStatic: 0,
      });
      boxes.push(boxBodyType);
    }
  });
  scene?.matter?.bounds?.create(boxes);
  return boxes;
};

export const createTextFromSvg = (scene: Scene, svgDoc: Document): Phaser.GameObjects.BitmapText[] => {
  const textelements = svgDoc.querySelectorAll('text');
  const bitmapTexts = [];

  for (let el of textelements) {
    // TODO (johnedvard) deal with attributes not containing 'px'
    const x = ~~el.getAttribute('x').split('px')[0];
    const y = ~~el.getAttribute('y').split('px')[0];
    const fontSize = ~~el.style.fontSize.split('px')[0];
    let textValue = el.innerHTML;
    textValue = textValue.replace(/<[^>]+>/g, '');
    const bitmapText = scene.add.bitmapText(x, y, 'atari', textValue, fontSize).setAlpha(1).setOrigin(0.2, 0.6);
    bitmapText.setTint(0x000000);
    bitmapTexts.push(bitmapText);
  }
  return bitmapTexts;
};
export const createSpinningBarsFromSvg = (scene: Scene, svgDoc: Document): SpinningBar[] => {
  const spinningObjectEls = svgDoc.querySelectorAll('circle');
  const bars: SpinningBar[] = [];
  for (let el of spinningObjectEls) {
    if (el.getAttribute('serif:id')?.match('{spinningBar}')) {
      const pos = getPosFromSvgCircle(el);
      let isSafe = false;
      if (el.getAttribute('serif:id')?.match('{safe}')) isSafe = true;
      bars.push(new SpinningBar(scene, { pos, isSafe }));
    }
  }
  return bars;
};

export const createStoreBoothFromSvg = (scene: Scene, svgDoc: Document): StoreBooth => {
  const storeBoothEl: SVGElement = svgDoc.querySelector(`#storeBooth`);
  if (storeBoothEl) {
    const pos = getPosFromSvgCircle(storeBoothEl);
    return new StoreBooth(scene, { pos });
  }
};

export const createDoorsFromSvg = (scene: Scene, svgDoc: Document): Door[] => {
  const doorEls = svgDoc.querySelectorAll('circle');
  const doors: Door[] = [];
  for (let el of doorEls) {
    if (el.getAttribute('serif:id')?.match('{door}')) {
      let isGoal = false;
      let canUnlock = false;
      let numCapsules = 0;
      const pos = getPosFromSvgCircle(el);
      let goToLevelId = '';
      if (el.getAttribute('serif:id').match('{to-')) {
        goToLevelId = el.getAttribute('serif:id').split('{to-')[1].split('}')[0];
      }
      if (el.getAttribute('serif:id').match('{goal}')) {
        isGoal = true;
      }
      if (el.getAttribute('serif:id').match('{numCapsules-')) {
        const numCapsulesStr = el.getAttribute('serif:id').split('{numCapsules-')[1].split('}')[0];
        numCapsules = parseInt(numCapsulesStr);
      }
      if (goToLevelId === 'level1' || goToLevelId === 'leveltutorial') {
        canUnlock = true;
      }

      doors.push(new Door(scene, { pos, goToLevelId, isGoal, canUnlock, numCapsules }));
    }
  }
  return doors;
};

export const createTimeCapsulesFromSvg = (scene: Scene, svgDoc: Document): TimeCapsule[] => {
  const doorEls = svgDoc.querySelectorAll('circle');
  const capsules: TimeCapsule[] = [];
  for (let el of doorEls) {
    if (el.getAttribute('serif:id')?.match('{timeCapsule}')) {
      const pos = getPosFromSvgCircle(el);
      capsules.push(new TimeCapsule(scene, { pos }));
    }
  }
  return capsules;
};
export const createPlatformsFromSvg = (scene: Scene, svgDoc: Document): Platform[] => {
  const rectElements = svgDoc.querySelectorAll('rect');
  const platforms = [];
  for (let el of rectElements) {
    if (!el.getAttribute('serif:id')?.match('{platform}')) continue;
    const pathToFollowEl = el.parentElement.querySelector('[id*=patrolRoute]');
    const jsonPath = svgToPhaserPath(pathToFollowEl.getAttribute('d'));
    const pathToFollow = new Curves.Path();
    pathToFollow.fromJSON(jsonPath);
    const pos = getPosFromSvgRect(el);
    const height = getHeightFromSvgRect(el);
    const width = getWidthFromSvgRect(el);
    platforms.push(new Platform(scene, { pos, height, width, pathToFollow: pathToFollow }));
  }
  return platforms;
};

export const createHooksFromSvg = (scene: Scene, svgDoc: Document): Hook[] => {
  const circleElements = svgDoc.querySelectorAll('circle');
  const hooks = [];
  for (let el of circleElements) {
    if (!el.getAttribute('serif:id')?.match('{hook}')) continue;
    const pathToFollowEl = el.parentElement.querySelector('[id*=patrolRoute]');
    const jsonPath = svgToPhaserPath(pathToFollowEl.getAttribute('d'));
    const pathToFollow = new Curves.Path();
    pathToFollow.fromJSON(jsonPath);
    const pos = getPosFromSvgCircle(el);
    hooks.push(new Hook(scene, { pos, pathToFollow: pathToFollow }));
  }
  return hooks;
};
export const createBoxesFromSvg = (scene: Scene, svgDoc: Document): Box[] => {
  const rectElements = svgDoc.querySelectorAll('rect');
  const boxes = [];
  for (let el of rectElements) {
    if (!el.getAttribute('serif:id')?.match('{box}')) continue;
    const pos = getPosFromSvgRect(el);
    const height = getHeightFromSvgRect(el);
    boxes.push(new Box(scene, { pos, height, width: height }));
  }
  return boxes;
};
// See https://stackoverflow.com/a/3627747/1471485
export const rgbTohex = (rgb: string) => {
  if (!rgb || rgb === 'none') return null;
  return parseInt(
    `0x${rgb
      .match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/)
      .slice(1)
      .map((n) => parseInt(n, 10).toString(16).padStart(2, '0'))
      .join('')}`
  );
};

export const getStrokeWidth = (svgPathEl: SVGElement) => {
  let strokeWidht = 6;
  if (!svgPathEl) return 6;
  try {
    strokeWidht = parseFloat(svgPathEl.style.strokeWidth);
  } catch (err) {
  } finally {
    return strokeWidht;
  }
};

const getParallellLine = (
  p0: Phaser.Math.Vector2,
  p1: Phaser.Math.Vector2,
  offset: number
): { l0: Phaser.Math.Vector2; l1: Phaser.Math.Vector2 } => {
  const [dx, dy] = [p0.x - p1.x, p0.y - p1.y];
  const scale = offset / (dx * dx + dy * dy) ** 0.5;
  const [ox, oy] = [-dy * scale, dx * scale];

  // parallell lines. See https://stackoverflow.com/a/63538916/1471485
  const l0 = new Phaser.Math.Vector2(ox + p0.x, oy + p0.y);
  const l1 = new Phaser.Math.Vector2(ox + p1.x, oy + p1.y);
  return { l0, l1 };
};

'''
'''--- src/vite-env.d.ts ---
/// <reference types="vite/client" />

import { GameMode } from './types/GameMode';
import { NearNet } from './types/NearNet';

interface ImportMetaEnv {
  readonly VITE_MODE: GameMode;
  readonly VITE_NEAR_NET: NearNet;
  // more env variables...
}

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "ES2019",
    "module": "es2022",
    "esModuleInterop": true,
    "moduleResolution": "Node",
    "resolveJsonModule": true,
    "allowJs": true,
    "declaration": true,
    "skipLibCheck": true,
    "allowSyntheticDefaultImports": true,
    "baseUrl": ".",
    "paths": {
      "~/*": ["src/*"]
    },
    "outDir": "dist",
    "typeRoots": ["@types", "node_modules/@types", "node_module/phaser/types"]
  },
  "include": ["src", "vite.config.asd.ts"]
}

'''
'''--- vite.config.lib.ts ---
import fs from 'fs';
import { defineConfig } from 'vite';
import path from 'path';
// added below polyfills to make near-api-js work with vite
// npm install --dev @esbuild-plugins/node-globals-polyfill
import { NodeGlobalsPolyfillPlugin } from '@esbuild-plugins/node-globals-polyfill';
// npm install --dev @esbuild-plugins/node-modules-polyfill
import { NodeModulesPolyfillPlugin } from '@esbuild-plugins/node-modules-polyfill';

fs.rmSync('dist', { recursive: true, force: true }); // v14.14.0

export default defineConfig({
  base: './',
  plugins: [],
  resolve: {
    alias: {
      '~': path.resolve(__dirname, './src'),
    },
  },
  build: {
    lib: {
      entry: path.resolve(__dirname, './src/lib.ts'),
      name: 'Toki',
      // the proper extensions will be added
      fileName: 'toki',
    },
    commonjsOptions: {
      include: [],
    },
    rollupOptions: {
      // make sure to externalize deps that shouldn't be bundled
      // into your library
      external: ['phaser'],
      output: {
        // Provide global variables to use in the UMD build
        // for externalized deps
        globals: {
          phaser: 'Phaser',
        },
      },
    },
  },
  optimizeDeps: {
    disabled: false,
    esbuildOptions: {
      // Enable esbuild polyfill plugins
      plugins: [
        NodeGlobalsPolyfillPlugin({
          process: true,
          buffer: true,
        }),
        NodeModulesPolyfillPlugin(),
      ],
    },
  },
});

'''
'''--- vite.config.ts ---
import fs from 'fs';
import { defineConfig } from 'vite';
import path from 'path';
// added below polyfills to make near-api-js work with vite
// npm install --dev @esbuild-plugins/node-globals-polyfill
import { NodeGlobalsPolyfillPlugin } from '@esbuild-plugins/node-globals-polyfill';
// npm install --dev @esbuild-plugins/node-modules-polyfill
import { NodeModulesPolyfillPlugin } from '@esbuild-plugins/node-modules-polyfill';

fs.rmSync('dist', { recursive: true, force: true }); // v14.14.0

export default defineConfig({
  base: './',
  plugins: [],
  resolve: {
    alias: {
      '~': path.resolve(__dirname, './src'),
    },
  },
  build: {
    commonjsOptions: {
      include: [],
    },
  },
  optimizeDeps: {
    disabled: false,
    esbuildOptions: {
      // Enable esbuild polyfill plugins
      plugins: [
        NodeGlobalsPolyfillPlugin({
          process: true,
          buffer: true,
        }),
        NodeModulesPolyfillPlugin(),
      ],
    },
  },
});

'''