*GitHub Repository "iburakbakir/AutonomousRestaurant"*

'''--- AutonomousRestaurant/README.md ---
# AutonomousRestaurant
  Autonomous restaurants will become widespread in the future. There will be robot waiters inside, so we can quickly place our order and pay, and wait for the robots to bring our orders.This project aims to create a mobile application. With this application, you can quickly give your order, get the check and make your payment quickly.

## Loom Video

https://www.loom.com/share/e9948d1c62dc4272b5409c5730cc4acc

## How To Use

First of all, get source code here, you can clone it or download it, then follow the instructions mentioned below.

1)This command downloads all packages that the project will use:

```ts
yarn;
```

2)This command introduces the contract to the compiler and creates our wasm file:

```ts

yarn build:release
```

3)Deploy the project:

```ts

near dev-deploy ./build/release/simple.wasm
```

4)An account ID is created with the deployment of the project. This ID appears as "dev-...........".Copy and paste this ID into <Account ID>. With this step, you will not need to enter account id every time.(Please write without "<,>"these characters.)

```ts

export CONTRACT=<AccountId>
```

After all these steps, you can now switch to using the functions.

## Functions

1-Initialize
  <br/>
  First of all we need to initialize the contract.

```ts

near call $CONTRACT initialize --accountId $CONTRACT
```

2-Choose Tables
  <br/>
  Users choose tables with this function.

```ts

near call $CONTRACT chooseTables '{"tableId": 2}' --accountId $CONTRACT
```

3-Give Order
  <br/>
  This function can be called as many times as desired and serves to give an order.

```ts

near call $CONTRACT giveOrder '{"tableId": 2, "consumableId": 3}' --accountId $CONTRACT
```

4-Get Check
  <br/>
  This functions get the check, after you give order as much as you want.

```ts

near call $CONTRACT getCheck '{"tableId": 2}' --accountId $CONTRACT
```

5-Pay Check
  <br/>
  This function pay the check using your wallet after you input deposit. Be careful about input amount.

```ts

near call $CONTRACT payCheck '{"tableId": 2}' --accountId $CONTRACT --deposit 1.61
```

'''
'''--- AutonomousRestaurant/as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- AutonomousRestaurant/asconfig.json ---
{
  "workspaces": [
    "src/simple"
  ]
}

'''
'''--- AutonomousRestaurant/package.json ---
{
  "name": "starter--near-sdk-as",
  "version": "0.0.1",
  "description": "Start with a basic project",
  "scripts": {
    "dev": "watch -d -n 1 'clear && yarn test'",
    "test": "yarn asp -f unit.spec",
    "clean": "rm -rf ./build && rm -rf ./neardev",
    "build": "asb --target debug",
    "build:release": "asb",
    "asp": "asp --verbose --nologo"
  },
  "keywords": [],
  "author": "hello@near.org",
  "license": "ISC",
  "devDependencies": {
    "near-sdk-as": "^3.1.0"
  }
}

'''
'''--- AutonomousRestaurant/scripts/1.dev-deploy.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 1: Build the contract (may take a few seconds)"
echo ---------------------------------------------------------
echo

yarn build:release

echo
echo
echo ---------------------------------------------------------
echo "Step 2: Deploy the contract"
echo
echo "(edit scripts/1.dev-deploy.sh to deploy other contract)"
echo ---------------------------------------------------------
echo

# uncomment out the line below to deploy the other example contract
# near dev-deploy ./build/release/simple.wasm

# comment the line below to deploy the other example contract
near dev-deploy ./build/release/simple.wasm

echo
echo
echo ---------------------------------------------------------
echo "Step 3: Prepare your environment for next steps"
echo
echo "(a) find the contract (account) name in the message above"
echo "    it will look like this: [ Account id: dev-###-### ]"
echo
echo "(b) set an environment variable using this account name"
echo "    see example below (this may not work on Windows)"
echo
echo ---------------------------------------------------------
echo 'export CONTRACT=<dev-123-456>'
# uncomment this line for a useful hint when using the singleton style
# echo "near call \$CONTRACT init --accountId \$CONTRACT"
echo ---------------------------------------------------------
echo

exit 0

'''
'''--- AutonomousRestaurant/scripts/2.use-contract.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 0: Check for environment variable with contract name"
echo ---------------------------------------------------------
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"

echo
echo
echo ---------------------------------------------------------
echo "Step 1: Initializing the contract"
echo ---------------------------------------------------------
echo

near call $CONTRACT initialize --accountId $CONTRACT

echo
echo
echo ---------------------------------------------------------
echo "Step 2: Choosing table."
echo ---------------------------------------------------------
echo

near call $CONTRACT chooseTables '{"tableId": 2}' --accountId $CONTRACT

echo
echo
echo ---------------------------------------------------------
echo "Step 3: Giving Order."
echo ---------------------------------------------------------
echo

near call $CONTRACT giveOrder '{"tableId": 2, "consumableId": 3}' --accountId $CONTRACT
near call $CONTRACT giveOrder '{"tableId": 2, "consumableId": 12}' --accountId $CONTRACT

echo
echo
echo ---------------------------------------------------------
echo "Step 4: Requesting check."
echo ---------------------------------------------------------
echo

near call $CONTRACT getCheck '{"tableId": 2}' --accountId $CONTRACT
echo
echo
echo ---------------------------------------------------------
echo "Step 5: Paying check."
echo ---------------------------------------------------------
echo

near call $CONTRACT payCheck '{"tableId": 2}' --accountId $CONTRACT --deposit 1.61

echo
echo
exit 0
'''
'''--- AutonomousRestaurant/src/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- AutonomousRestaurant/src/simple/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- AutonomousRestaurant/src/simple/assembly/index.ts ---
import { storage, context, u128, ContractPromiseBatch, PersistentVector } from "near-sdk-core"
import { Consumable, consumables, Table, tables } from "./models"

export function initialize(): void {
  let consumable1 = new Consumable(1, "food", "taco", true, 4.5, 2)
  consumables.set(consumable1.id, consumable1);
  let consumable2 = new Consumable(2, "food", "crisps", true, 5, 0.5)
  consumables.set(consumable2.id, consumable2);
  let consumable3 = new Consumable(3, "food", "hamburger", true, 4.5, 1.5)
  consumables.set(consumable3.id, consumable3);
  let consumable11 = new Consumable(11, "drink", "water", true, 4.5, 0.05)
  consumables.set(consumable11.id, consumable11);
  let consumable12 = new Consumable(12, "drink", "coke", true, 4.5, 0.1)
  consumables.set(consumable12.id, consumable12)

  let table1 = new Table(1, "")
  tables.set(table1.id, table1)
  let table2 = new Table(2, "")
  tables.set(table2.id, table2)
  let table3 = new Table(3, "")
  tables.set(table3.id, table3)

}

export function chooseTables(tableId: u32): Table{
  let table = tables.getSome(tableId)
  assert_available(table.person)
  table.person = context.sender
  tables.set(tableId, table)
  return table;

}

function assert_available(person: string): void {
  assert(person == "", "This table has taken.")
}

export function giveOrder(tableId: u32, consumableId: u32): PersistentVector<Consumable>{
  let table = tables.getSome(tableId)
  let consumable = consumables.getSome(consumableId)
  table.orderList.push(consumable)
  tables.set(tableId, table)

  return table.orderList;
}

export function getCheck(tableId: u32): string  {
  let table = tables.getSome(tableId);
  let sum: number = 0;
  for (let index = 0; index < table.orderList.length; index++) {
    sum += table.orderList[index].price 
    
  }
  table.check = sum;
  tables.set(tableId, table)

  return ` The amount you pay ${sum}`

}

export function payCheck (tableId: u32): string {
  let table = tables.getSome(tableId);
  assert_deposit(table.check)
  
  let sender = context.sender
  ContractPromiseBatch.create(sender).transfer(u128.from(table.check))
  
  return ` You have paid your check successfully. Amount ${table.check}`

}

function assert_deposit(price: f64): void {
  assert(context.attachedDeposit >= u128.from(price), "Please send enough NEAR.")
}
'''
'''--- AutonomousRestaurant/src/simple/assembly/models.ts ---
import { context, PersistentMap, PersistentUnorderedMap, PersistentVector } from "near-sdk-as";
import { Timestamp } from "../../utils";

export const consumables = new PersistentUnorderedMap<u32, Consumable>("c");
export const tables = new PersistentUnorderedMap<u32, Table>("t");

@nearBindgen
export class Consumable {
     id: u32;
     type: string;
     name: string;
     availability: bool;
     rate: f32;
     price: f64;

     constructor(id: u32, type: string, name: string, availability: bool, rate: f32, price: f32){
        this.id = id;
        this.type = type;
        this.name = name;
        this.availability = availability;
        this.rate = rate;
        this.price = price;

     }
}     
@nearBindgen
export class Table{
    id: u32;
    person: string;
    orderList: PersistentVector<Consumable>;
    check: f64;
    
    constructor(id: u32, person: string ){
        this.orderList = new PersistentVector<Consumable>("v");
        this.id = id;
        this.person = person;
        //this.orderList = orderList;

    }
    
}

'''
'''--- AutonomousRestaurant/src/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- AutonomousRestaurant/src/utils.ts ---
import { u128, Context, ContractPromise } from "near-sdk-as";

/**
 * == TYPES ====================================================================
 */

/**
 * Account IDs in NEAR are just strings.
 */
export type AccountId = string;

/**
 * Gas is u64
 */
export type Gas = u64;

/**
 * Amounts, Balances, and Money in NEAR is are u128.
 */

export type Amount = u128;

export type Balance = Amount;

export type Money = Amount;

/**
 * Timestamp in NEAR is a number.
 */
export type Timestamp = u64;

/**
 * == CONSTANTS ================================================================
 *
 * ONE_NEAR = unit of NEAR token in yocto Ⓝ (1e24)
 * XCC_GAS = gas for cross-contract calls, ~5 Tgas (teragas = 1e12) per "hop"
 * MIN_ACCOUNT_BALANCE = 3 NEAR min to keep account alive via storage staking
 *
 * TODO: revist MIN_ACCOUNT_BALANCE after some real data is included b/c this
 *  could end up being much higher
 */

export const ONE_NEAR = u128.from("1000000000000000000000000");
export const XCC_GAS: Gas = 20_000_000_000_000;
export const MIN_ACCOUNT_BALANCE: u128 = u128.mul(ONE_NEAR, u128.from(3));

/**
 * == FUNCTIONS ================================================================
 */

/**
 * @function asNEAR
 * @param amount {u128} - Yocto Ⓝ token quantity as an unsigned 128-bit integer
 * @returns {string}    - Amount in NEAR, as a string
 *
 * @example
 *
 *    asNEAR(7000000000000000000000000)
 *    // => '7'
 */
export function asNEAR(amount: u128): string {
  return u128.div(amount, ONE_NEAR).toString();
}

/**
 * @function toYocto
 * @param amount {number} - Integer to convert
 * @returns {u128}        - Amount in yocto Ⓝ as an unsigned 128-bit integer
 *
 * @example
 *
 *    toYocto(7)
 *    // => 7000000000000000000000000
 */
export function toYocto(amount: number): u128 {
  return u128.mul(ONE_NEAR, u128.from(amount))
}

/**
 * Function to assert that the contract has called itself
 */
export function assert_self(): void {
  const caller = Context.predecessor
  const self = Context.contractName
  assert(caller == self, "Only this contract may call itself");
}

export function assert_single_promise_success(): void {
  const x = ContractPromise.getResults()
  assert(x.length == 1, "Expected exactly one promise result")
  assert(x[0].succeeded, "Expected PromiseStatus to be successful")
}

'''