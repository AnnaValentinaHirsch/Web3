*GitHub Repository "adrianosingolani/near-social-good"*

'''--- contract/.eslintrc.js ---
module.exports = {
    root: true,
    parser: "@typescript-eslint/parser",
    plugins: [
      "@typescript-eslint",
    ],
    extends: [
      "eslint:recommended",
      "plugin:@typescript-eslint/eslint-recommended",
      "plugin:@typescript-eslint/recommended",
    ],
    parserOptions: {
      ecmaVersion: 2020,
      sourceType: "module",
      ecmaFeatures: {}
    },
  
    // === General rules =========================================================
  
    rules: {
      // Omitted semicolons are hugely popular, yet within the compiler it makes
      // sense to be better safe than sorry.
      "semi": "error",
  
      // Our code bases uses 2 spaces for indentation, and we enforce it here so
      // files don't mix spaces, tabs or different indentation levels.
      "indent": ["error", 2, {
        "SwitchCase": 1,
        "VariableDeclarator": "first",
        "offsetTernaryExpressions": true,
        "ignoredNodes": [ // FIXME: something's odd here
          "ConditionalExpression > *",
          "ConditionalExpression > * > *",
          "ConditionalExpression > * > * > *"
        ]
      }],
  
      // This is mostly visual style, making comments look uniform.
      "spaced-comment": ["error", "always", {
        "markers": ["/"],   // triple-slash
        "exceptions": ["/"] // all slashes
      }],
  
      // This tends to be annoying as it encourages developers to make everything
      // that is never reassigned a 'const', sometimes semantically incorrect so,
      // typically leading to huge diffs in follow-up PRs modifying affected code.
      "prefer-const": "off",
  
      // It is perfectly fine to declare top-level variables with `var`, yet this
      // rule doesn't provide configuration options that would help.
      "no-var": "off",
  
      // Quite often, dealing with multiple related cases at once or otherwise
      // falling through is exactly the point of using a switch.
      "no-fallthrough": "off",
  
      // Typical false-positives here are `do { ... } while (true)` statements or
      // similar, but the only option provided here is not checking any loops.
      "no-constant-condition": ["error", { checkLoops: false }],
  
      // Functions are nested in blocks occasionally, and there haven't been any
      // problems with this so far, so turning the check off.
      "no-inner-declarations": "off",
  
      // Quite common in scenarios where an iteration starts at `current = this`.
      "@typescript-eslint/no-this-alias": "off",
  
      // Disabled here, but enabled again for JavaScript files.
      "no-unused-vars": "off",
  
      // Disabled here, but enabled again for TypeScript files.
      "@typescript-eslint/no-unused-vars": "off",
  
      // Allow emptry functions for some of our base classes
      "@typescript-eslint/no-empty-function": "off"
    },
    overrides: [
  
      // === TypeScript rules ====================================================
  
      {
        files: [
          "**/assembly/**/*.ts"
        ],
        rules: {
          // Enforcing to remove function parameters on stubs makes code less
          // maintainable, so we instead allow unused function parameters.
          "@typescript-eslint/no-unused-vars": [
            "warn", {
              "vars": "local",
              "varsIgnorePattern": "^_|^[A-Z](?:From|To)?$", // ignore type params
              "args": "none",
              "ignoreRestSiblings": false
            }
          ],
  
          // Namespaces are quite useful in AssemblyScript
          "@typescript-eslint/no-namespace": "off",
  
          // There is actually codegen difference here
          "@typescript-eslint/no-array-constructor": "off",
  
          // Sometimes it can't be avoided to add a @ts-ignore
          "@typescript-eslint/ban-ts-comment": "off",
  
          // Utilized to achieve portability in some cases
          "@typescript-eslint/no-non-null-assertion": "off",
        }
      },
  
      // === Compiler rules (extends AssemblyScript rules) =======================
  
      {
        files: [
          "**/assembly/**/*.ts"
        ],
        rules: {
          // There is an actual codegen difference here - TODO: revisit
          "no-cond-assign": "off",
  
          // Not all types can be omitted in AS yet - TODO: revisit
          "@typescript-eslint/no-inferrable-types": "off",
  
          // Used rarely to reference internals that are not user-visible
          "@typescript-eslint/triple-slash-reference": "off",
  
          // The compiler has its own `Function` class for example
          "no-shadow-restricted-names": "off",
          "@typescript-eslint/ban-types": "off"
        }
      },
  
      // === Standard Library rules (extends AssemblyScript rules) ===============
  
      {
        files: [
          "**/assembly/**/*.ts"
        ],
        rules: {
          // We are implementing with --noLib, so we shadow all the time
          "no-shadow-restricted-names": "off",
  
          // Similarly, sometimes we need the return type to be String, not string
          "@typescript-eslint/ban-types": "off"
        }
      },
  
      // === Standard Definition rules (extends TypeScript rules) ================
  
      {
        files: [
          "**/assembly/**/*.d.ts"
        ],
        rules: {
          // Often required to achieve compatibility with TypeScript
          "@typescript-eslint/no-explicit-any": "off",
  
          // Interfaces can be stubs here, i.e. not yet fully implemented
          "@typescript-eslint/no-empty-interface": "off",
  
          // Definitions make use of `object` to model rather unusual constraints
          "@typescript-eslint/ban-types": "off"
        }
      },
  
      
  
      // === Test rules (extends TypeScript rules) ===============================
  
      {
        files: [
          "**/assembly/__tests__/**/*.ts"
        ],
        rules: {
          // Tests typically include unusual code patterns on purpose. This is
          // very likely not an extensive list, but covers what's there so far.
          "no-empty": "off",
          "no-cond-assign": "off",
          "no-compare-neg-zero": "off",
          "no-inner-declarations": "off",
          "no-constant-condition": "off",
          "use-isnan": "off",
          "@typescript-eslint/no-namespace": "off",
          "@typescript-eslint/no-unused-vars": "off",
          "@typescript-eslint/no-empty-function": "off",
          "@typescript-eslint/no-non-null-assertion": "off",
          "@typescript-eslint/no-extra-semi": "off",
          "@typescript-eslint/no-inferrable-types": "off",
          "@typescript-eslint/ban-types": "off",
          "@typescript-eslint/triple-slash-reference": "off",
          "@typescript-eslint/ban-ts-comment": "off",
          "@typescript-eslint/no-extra-non-null-assertion": "off",
          "@typescript-eslint/no-empty-interface": "off"
        }
      },
    ]
  };

'''
'''--- contract/as-pect.config.js ---
module.exports = {
    /**
     * A set of globs passed to the glob package that qualify typescript files for testing.
     */
    include: ["assembly/__tests__/**/*.spec.ts"],
    /**
     * A set of globs passed to the glob package that quality files to be added to each test.
     */
    add: ["assembly/__tests__/**/*.include.ts"],
    /**
     * All the compiler flags needed for this test suite. Make sure that a binary file is output.
     */
    flags: {
      /** To output a wat file, uncomment the following line. */
      // "--textFile": ["output.wat"],
      /** A runtime must be provided here. */
      "--runtime": ["stub"], // Acceptable values are: "incremental", "minimal", and "stub"
    },
    /**
     * A set of regexp that will disclude source files from testing.
     */
    disclude: [/node_modules/],
    /**
     * Add your required AssemblyScript imports here.
     */
    imports(memory, createImports, instantiateSync, binary) {
      let instance; // Imports can reference this
      const myImports = {
        // put your web assembly imports here, and return the module
      };
      instance = instantiateSync(binary, createImports(myImports));
      return instance;
    },
    /**
     * Add a custom reporter here if you want one. The following example is in typescript.
     *
     * @example
     * import { TestReporter, TestGroup, TestResult, TestContext } from "as-pect";
     *
     * export class CustomReporter extends TestReporter {
     *   // implement each abstract method here
     *   public abstract onStart(suite: TestContext): void;
     *   public abstract onGroupStart(group: TestGroup): void;
     *   public abstract onGroupFinish(group: TestGroup): void;
     *   public abstract onTestStart(group: TestGroup, result: TestResult): void;
     *   public abstract onTestFinish(group: TestGroup, result: TestResult): void;
     *   public abstract onFinish(suite: TestContext): void;
     * }
     */
    // reporter: new CustomReporter(),
    /**
     * Specify if the binary wasm file should be written to the file system.
     */
    outputBinary: false,
  };  

'''
'''--- contract/index.js ---
const fs = require("fs");
const loader = require("@assemblyscript/loader");
const imports = { /* imports go here */ };
const wasmModule = loader.instantiateSync(fs.readFileSync(__dirname + "/build/optimized.wasm"), imports);
module.exports = wasmModule.exports;
'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="#000000" />
  <meta name="description" content="Web site created using create-react-app" />
  <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
  <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
  <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
  <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />
  <title>NEAR Social Good dApp</title>
</head>

<body>
  <noscript>You need to enable JavaScript to run this app.</noscript>
  <div id="root"></div>
  <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
</body>

</html>
'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.js ---
import React from "react";

import Header from './components/Header'
import Causes from './components/Causes'

function App() {
  return (
    <div className="App">
      <Header />
      <Causes />
    </div>
  );
}

export default App;

'''
'''--- src/components/Causes.js ---
import React, { useEffect, useState } from 'react';
import { utils } from "near-api-js";

import { getCauses, supportCause } from "../utils/methods"

import {
  Typography,
  Container,
  Grid,
  Card,
  CardMedia,
  CardContent,
  CardActions,
  Button,
  InputAdornment,
  OutlinedInput,
} from "@mui/material";

function Causes() {
  const [causes, setCauses] = useState([]);
  const account = window.walletConnection.account();

  useEffect(() => {
    getCauses()
      .then(res => {
        setCauses(res);
      })
      .catch(err => {
        console.log(err)
      })
  }, []);

  const support = async (causeIndex) => {
    // console.log(causes[causeIndex]);

    const amount = document.getElementById(`amount-input-${causeIndex}`).value;
    // console.log(amount);

    supportCause({ causeIndex: causeIndex, amount: utils.format.parseNearAmount(amount + "") })
      .then(res => {
        getCauses()
      })
      .catch(err => {
        console.log(err)
      })
  };

  return (
    <>
      <Container sx={{ py: 8 }} maxWidth="lg">
        {
          causes.length > 0 ? (
            <Grid container spacing={4}>
              {
                causes.map((cause, i) => (
                  <Grid key={i} item xs={12} sm={6} md={4}>
                    <Card
                      sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}
                    >
                      <CardMedia
                        component="img"
                        image={cause.image}
                        alt=""
                        sx={{ maxHeight: '140px' }}
                      />
                      <CardContent sx={{ flexGrow: 1, paddingBottom: 1 }}>
                        <Typography variant="h6">
                          {cause.title}
                        </Typography>
                        <Typography variant="body2" paragraph>
                          {cause.description}
                        </Typography>
                      </CardContent>
                      <CardActions sx={{ flexDirection: 'column' }}>
                        <Typography variant="subtitle2">
                          Total received: <b>{utils.format.formatNearAmount(cause.amount)} NEAR</b>
                        </Typography>
                        <OutlinedInput
                          fullWidth
                          inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }}
                          id={`amount-input-${i}`}
                          defaultValue="1"
                          size="small"
                          endAdornment={<InputAdornment position="end">NEAR</InputAdornment>}
                          sx={{ marginBottom: 1 }}
                          type="number"
                          onChange={(e) => {
                            // console.log(e.target.value);
                            if (e.target.value < 1) e.target.value = 1;
                          }}
                        />
                        <Button
                          size="small"
                          fullWidth
                          variant='contained'
                          onClick={() => { support(i) }}
                          disabled={account.accountId === cause.beneficiary || !account.accountId ? true : false}
                        >
                          Support cause
                        </Button>
                      </CardActions>
                    </Card>
                  </Grid>
                ))
              }
            </Grid>
          ) : (
            <Container sx={{ py: 8 }} maxWidth="md">
              <Typography>No causes added yet</Typography>
            </Container>
          )
        }
      </Container>
    </>
  )
}

export default Causes;
'''
'''--- src/components/Header.js ---
import * as React from 'react';

import { login, logout } from "../utils/near";

import {
  AppBar,
  Box,
  Toolbar,
  Typography,
  Button
} from '@mui/material/';

export default function ButtonAppBar() {
  const account = window.walletConnection.account();

  return (
    <Box sx={{ flexGrow: 1 }}>
      <AppBar position="static">
        <Toolbar>
          <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
            NEAR Social Good
          </Typography>
          {account.accountId ? (
            <>
              <Typography variant="caption">{account.accountId}</Typography>
              <Button sx={{marginLeft: 2}} variant="outlined" color="inherit" onClick={() => logout()}>Logout</Button>
            </>
          ) : (
            <Button color="inherit" onClick={() => login()}>Login</Button>
          )}
        </Toolbar>
      </AppBar>
    </Box>
  );
}
'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

import { initializeContract } from "./utils/near";

window.nearInitPromise = initializeContract()
  .then(() => {
    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(
      <React.StrictMode>
        <App />
      </React.StrictMode>
    );
  })
  .catch(console.error);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/utils/config.js ---
const CONTRACT_NAME = "social-good.adriano.testnet"

function environment(env) {
  switch (env) {
    case "mainnet": 
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        explorerUrl: "https://explorer.mainnet.near.org",
      };
    case "testnet": 
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
      };
    default:
      throw Error(`Unknown environment '${env}'.`);
  }
}

export default environment;
'''
'''--- src/utils/methods.js ---
const GAS = 100000000000000;

export function addCause(cause) {
  return window.contract.addCause(cause);
}

export function getCauses() {
  return window.contract.getCauses();
}

export async function supportCause({ causeIndex, amount }) {
  console.log('test');
  await window.contract.supportCause({ causeIndex: causeIndex }, GAS, amount);
}
'''
'''--- src/utils/near.js ---
import environment from './config';
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js';
import { formatNearAmount } from 'near-api-js/lib/utils/format';

const nearEnv = environment('testnet');

export async function initializeContract() {
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearEnv));
  window.walletConnection = new WalletConnection(near);
  window.accountId = window.walletConnection.getAccountId();
  window.contract = new Contract(
    window.walletConnection.account(),
    nearEnv.contractName,
    {
      viewMethods: ['getCauses'],
      changeMethods: ['addCause', 'supportCause'],
    }
  );
}

export async function accountBalance() {
  return formatNearAmount(
    (await window.walletConnection.account().getAccountBalance()).total,
    2
  );
}

export async function getAccountId() {
  return window.walletConnection.getAccountId();
}

export function login() {
  window.walletConnection.requestSignIn(nearEnv.contractName);
}

export function logout() {
  window.walletConnection.signOut();
  window.location.reload();
}
'''