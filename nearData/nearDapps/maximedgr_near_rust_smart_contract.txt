*GitHub Repository "maximedgr/near_rust_smart_contract"*

'''--- Cargo.toml ---
[package]
name = "key_value_storage"
version = "0.1.0"
authors = ["maximedgr"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "3.1.0"

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true
'''
'''--- README.md ---
### Key Value storage - Smart contract - NEAR
### tutorial by figment.io

Contract deloyed : [View](https://explorer.testnet.near.org/transactions/8ZpW6DD5zmhRbcmQJt4989ZjWgzc6NNaQ18xXh7Jpycx)

### Setup

You should have the following requirements installed:
   - Rust 
   - NEAR CLI
   - NEAR Testnet account 
   
```
rustup target add wasm32-unknown-unknown
```

### Uints Test 
```
cargo test -- --nocapture
```

### Tutorial :

[Tuto by Figment.io](https://learn.figment.io/tutorials/write-and-deploy-a-smart-contract-on-near)

'''
'''--- src/lib.rs ---
#[cfg(target_arch = "wasm32")]
#[global_allocator]
static ALLOC: near_sdk::wee_alloc::WeeAlloc<'_> = near_sdk::wee_alloc::WeeAlloc::INIT;

use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{env, near_bindgen};
use near_sdk::collections::UnorderedMap;

//near_sdk::setup_alloc!();

// 1. Main Struct
// Attributes
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]

//Struct
pub struct KeyValue {
    pairs: UnorderedMap<String, String>,
}

// 2. Default Implementation

impl Default for KeyValue {
    fn default() -> Self {
        Self {
            pairs: UnorderedMap::new(b"r".to_vec()) //we are returning Self with a new unordered map. While creating a new unordered map, we must pass the ID as Vec<u8> type so we are converting b"r" which is a byte string, to Vec<u8>, using the to_vec() function.
        }
    }
}

// 3. Core Logic

#[near_bindgen]
impl KeyValue {
    pub fn create_update(&mut self, k: String, v: String) {
        env::log(b"created or updated");
        self.pairs.insert(&k, &v);
    }

    pub fn read(&self, k: String) -> Option<String> {
        env::log(b"read");
        return self.pairs.get(&k);
    }

    pub fn delete(&mut self, k: String) {
        env::log(b"delete");
        self.pairs.remove(&k);
    }
}

// 4. uints Tests
#[cfg(not(target_arch = "wasm32"))]
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};

    fn get_context(input: Vec<u8>, is_view: bool) -> VMContext {
        VMContext {
            current_account_id: "alice_near".to_string(),
            signer_account_id: "bob_near".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id: "carol_near".to_string(),
            input,
            block_index: 0,
            block_timestamp: 0,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage: 0,
            attached_deposit: 0,
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view,
            output_data_receivers: vec![],
            epoch_height: 0,
        }
    }

    // Test 1
    #[test]
    fn create_read_pair() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = KeyValue::default();
        contract.create_update("first_key".to_string(), "hello".to_string());
        assert_eq!(
            "hello".to_string(),
            contract.read("first_key".to_string()).unwrap()
        ); //assert is used to verify that the value expected is the one stored
    }

    // Test 2
    #[test]
    fn read_nonexistent_pair() {
        let context = get_context(vec![], true);
        testing_env!(context);
        let contract = KeyValue::default();
        assert_eq!(None, contract.read("first_key".to_string()));
    }

}

'''