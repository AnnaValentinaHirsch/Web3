*GitHub Repository "jltzbrg/rust-smart-contract-template"*

'''--- Cargo.toml ---
[package]
name = "rust-near-smart-contract"
version = "0.1.0"
author = ["Julio Litzenberg <jltzbrg@gmail.com>"]
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
near-sdk = "4.0.0-pre.4"
hex = "0.4.3"

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true 
'''
'''--- README.md ---
# Rust Smart Contract Template 

'''
'''--- build.bat ---
cargo build --target wasm32-unknown-unknown --release

copy target\wasm32-unknown-unknown/release\*.wasm res
'''
'''--- build.sh ---
#!/bin/bash

set -e

RUSTFLAG='-C link-arg=s' cargo build -- target wasm32-unknown-unknown
--release

cp target/wasm32-unknown-unknown/release/*.wasm./res/
'''
'''--- src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::near_bindgen;

#[near_bindgen]
#[derive(Defaultm BorshDeserialize, BorshSerialize)]
pub struct Contract {
    // SETUP CONTRACT STATE
}

#[near_bindgen]
impl Contract {
    // ADD CONTRACT METHODS HERE
}

/*
 * the rest of this file sets up unit tests
 * to run these, the command will be:
 * cargo test --package rust-template -- --nocapture
 * Note: 'rust-template' comes from Cargo.toml's 'name' key
*/

// use the atribute below for unit tests
#[cfg(tests)]
mod tests {
    use super::*;
    use near_sdk::test_utils::{get_logs, VMContextBuilder};
    use near_sdk::{testing_env, AccountId};

    // part of writing unit tests is setting up a mock context
    // provide a `predecessor` here, it'll modify the default context
    fn get_context(predecessor: AccountId) -> VMContextBuilder {
        let mut builder = VMContextBuilder::new();
        builder.predecessor_account_id(predecessor);
        builder
    }

    // TEST HERE
}

'''
'''--- test.sh ---
#!/bin/bash

set -e

cargo test -- --nocapture
'''