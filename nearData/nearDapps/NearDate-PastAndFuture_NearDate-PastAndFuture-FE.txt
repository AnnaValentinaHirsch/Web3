*GitHub Repository "NearDate-PastAndFuture/NearDate-PastAndFuture-FE"*

'''--- .eslintrc.json ---
{
  "extends": "next/core-web-vitals"
}

'''
'''--- assets/readme.md ---
this contain:
- images
- svg
- audio
'''
'''--- next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

'''
'''--- next.config.js ---
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  images: {
    domains: ['dummyimage.com', 'bafybeiezfbfqmagz3d4hyj32nu2feltjiplf7ya4ql67ncntyrixr3ozim.ipfs.w3s.link'],
  },
}

module.exports = nextConfig

'''
'''--- package.json ---
{
  "homepage": "https://vinuch.github.io/this-or-that",
  "name": "thisorthat",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "@headlessui/react": "^1.5.0",
    "@heroicons/react": "^1.0.6",
    "@tailwindcss/forms": "^0.5.2",
    "@tailwindcss/line-clamp": "^0.4.2",
    "framer-motion": "^7.3.5",
    "gh-pages": "^3.2.3",
    "near-api-js": "^0.44.2",
    "next": "12.1.5",
    "react": "18.0.0",
    "react-dom": "18.0.0",
    "react-hook-form": "^7.30.0",
    "react-toastify": "^8.2.0",
    "sweetalert2": "^11.4.26",
    "tailwind-scrollbar": "^2.0.1",
    "uuid": "^8.3.2",
    "web3.storage": "^4.3.0"
  },
  "devDependencies": {
    "@types/node": "17.0.25",
    "@types/react": "18.0.6",
    "@types/react-dom": "18.0.2",
    "@types/uuid": "^8.3.4",
    "autoprefixer": "^10.4.4",
    "eslint": "8.14.0",
    "eslint-config-next": "12.1.5",
    "postcss": "^8.4.12",
    "tailwindcss": "^3.0.24",
    "typescript": "4.6.3"
  }
}

'''
'''--- pages/api/hello.ts ---
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from 'next'

type Data = {
  name: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>
) {
  res.status(200).json({ name: 'John Doe' })
}

'''
'''--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

'''
'''--- public/google619add6080a4a785.html ---
google-site-verification: google619add6080a4a785.html
'''
'''--- public/near-protocol.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 24.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 90.1 90" style="enable-background:new 0 0 90.1 90;" xml:space="preserve">
<path d="M72.2,4.6L53.4,32.5c-1.3,1.9,1.2,4.2,3,2.6L74.9,19c0.5-0.4,1.2-0.1,1.2,0.6v50.3c0,0.7-0.9,1-1.3,0.5l-56-67
	C17,1.2,14.4,0,11.5,0h-2C4.3,0,0,4.3,0,9.6v70.8C0,85.7,4.3,90,9.6,90c3.3,0,6.4-1.7,8.2-4.6l18.8-27.9c1.3-1.9-1.2-4.2-3-2.6
	l-18.5,16c-0.5,0.4-1.2,0.1-1.2-0.6V20.1c0-0.7,0.9-1,1.3-0.5l56,67c1.8,2.2,4.5,3.4,7.3,3.4h2c5.3,0,9.6-4.3,9.6-9.6V9.6
	c0-5.3-4.3-9.6-9.6-9.6C77.1,0,74,1.7,72.2,4.6z"/>
</svg>

'''
'''--- public/vercel.svg ---
<svg width="283" height="64" viewBox="0 0 283 64" fill="none" 
    xmlns="http://www.w3.org/2000/svg">
    <path d="M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z" fill="#000"/>
</svg>
'''
'''--- styles/Home.module.css ---

'''
'''--- styles/globals.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

html,
body {
  padding: 0;
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
}

@layer base {
  html {
    @apply text-primary;
  }

  input[type="number"]::-webkit-inner-spin-button,
  input[type="number"]::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

}

@layer utilities {
  .animation-delay-2000 {
    animation-delay: 2s;
  }
  .animation-delay-4000 {
    animation-delay: 4s;
  }
}

a {
  color: inherit;
  text-decoration: none;
}

* {
  box-sizing: border-box;
}

'''
'''--- tailwind.config.js ---
module.exports = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      height: {
        "85vh": "85vh"
      },
      colors: {
        'primary': "#B9D7F9",
        "secondary": "#E4B9F9",
        "background": "#170F23",
        "backgroundLight": "#231B2E",
        "imageLight": "#FF00E5"
      },
      animation: {
        blob: "blob 7s infinite"
      },
      keyframes: {
        blob: {
          "0%": {
            transform: "translate(0px, 0px) scale(1)",
          },
          "33%": {
            transform: "translate(30px, -50px) scale(1.1)",
          },
          "66%": {
            transform: "translate(-20px, 20px) scale(0.9)",
          },
          "100%": {
            transform: "tranlate(0px, 0px) scale(1)",
          },
        },
      }
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
    require('tailwind-scrollbar'),
    require('@tailwindcss/line-clamp'),
  ],
}

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es2015",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "commonjs",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "typeRoots": [
      "./types"
    ],
    "baseUrl": "."
  },
  "include": [
    "./pages/**/*.tsx"
  ],
  "exclude": [
    "node_modules"
  ],
}
'''
'''--- types/convert_from,.ts ---
import { NFTMetadataModel } from "./index";

'''
'''--- types/index.d.ts ---
import { WalletConnection } from "near-api-js";

declare global {
  interface Window {
    walletConnection?: WalletConnection;
    accountId?: any;
    contract?: any;
  }
}

export interface NFTMetadataModel {
  message: string;
  copies: null
  description: string;
  expires_at: null
  extra: null
  issued_at: null
  media: null
  media_hash: null
  reference: null
  reference_hash: null
  starts_at: null
  title: string;
  updated_at: Date;
}

export interface IPFSMessage {
  id: string;
  message: string;
  token_created_date: number;
  message_updated_date: number;
}

export interface NFTModel {
  approved_account_ids: any;
  message: string;
  metadata: NFTMetadataModel;
  owner_id: string;
  royalty: any
  token_id: string;
  ipfs_message: IPFSMessage | null;
}

export interface NFTMessageModel {
  id: string;
  message: string
  message_updated_date: number;
  token_created_date: number;
}

export interface NFTSaleModel {
  approval_id: number
  nft_contract_id: string
  owner_id: string
  sale_conditions: string
  token_id: string
}

export interface NFTBidModel {
  bid_account_id: string;
  bid_id: number;
  price: string;
  token_id: string;
}

export interface NFTSlotModel {
  renting_account_id: string;
  starts_at: number;
  expires_at: number;
  rent_message: string;
  message: string;
}

export interface NFTBidSlotModel {
  bid_account_id: string;
  bid_id: number;
  expires_at: number;
  message_url: string;
  price: string;
  starts_at: number;
  token_id: string;
  rent_message: string;
}

export interface NFTRentSlotModel {
  owner_id: string;
  token_id: string;
  message_url: string;
  rented_slots: Array<NFTSlotModel>;
}

'''
'''--- utils/config.ts ---
const CONTRACT_NFT = process.env.NEXT_PUBLIC_NFT_CONTRACT || "nft-contract-test.phamnhut.testnet";
const CONTRACT_MARKETPLACE = process.env.NEXT_PUBLIC_MARKETPLACE_CONTRACT || "nft-market-test.phamnhut.testnet";

function environment(env: string) {
  switch (env) {
    case "mainnet": // line 5
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractNFT: CONTRACT_NFT,
        contractMarketplace: CONTRACT_MARKETPLACE,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        explorerUrl: "https://explorer.mainnet.near.org",
      };
    case "testnet": // line 14
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractNFT: CONTRACT_NFT,
        contractMarketplace: CONTRACT_MARKETPLACE,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
      };
    default:
      throw Error(`Unknown environment '${env}'.`);
  }
}

export default environment;
'''
'''--- utils/file.ts ---
export function new_json_file(json_data: any, file_name: string) {
    const file = new File([JSON.stringify(json_data)], file_name, { type: 'text/json' });
    return file;
}
'''
'''--- utils/format.ts ---
export function format_number_2_digit(num: number) {
    return num.toLocaleString("en-US", {
        minimumIntegerDigits: 2,
        useGrouping: false,
    });
}

export function truncate(str: string, n: number) {
    return (str.length > n) ? str.slice(0, n - 1) + '...' : str;
}

export function parseIntT(str: any) : number {
    let strS = !str ? "0" : str;
    return parseInt(strS, 10);
}

'''
'''--- utils/ipfs.ts ---
import { Web3Storage } from 'web3.storage';

const token: string = process.env.NEXT_PUBLIC_STORAGE_WEB3 || "";
const client = new Web3Storage({ token: token, endpoint: new URL('https://api.web3.storage') });

export function get_ipfs_link(subDomain: string, filename: string) {
    return `https://${subDomain}.ipfs.w3s.link/${filename}`;
}

const subDomainNearDateStorage: string = process.env.NEXT_PUBLIC_STORAGE_WEB3_NEARDATE || "";

export function get_ipfs_link_image(neardate_id: string) {
    return `https://${subDomainNearDateStorage}.ipfs.w3s.link/img/${neardate_id}.png`;
}

export default client;

'''
'''--- utils/near.ts ---
import environment from "./config";
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import { formatNearAmount } from "near-api-js/lib/utils/format";

const nearEnv = environment("testnet");

declare const window: {
  walletConnection: WalletConnection;
  accountId: any;
  contractNFT: Contract;
  contractMarketplace: Contract;
  location: any;
};

export async function initializeContract() {
  const near = await connect(
    Object.assign(
      { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() }, headers: {} },
      nearEnv
    )
  );
  window.walletConnection = new WalletConnection(near, null);
  window.accountId = window.walletConnection.getAccountId();
  window.contractNFT = new Contract(
    window.walletConnection.account(),
    nearEnv.contractNFT,
    {
      viewMethods: ["nft_token", "nft_tokens_for_owner", "get_random_nfts", "nft_tokens_by_date", "get_mint", "get_first_mint_address"], // TODO
      changeMethods: ["nft_mint", "nft_transfer", "nft_approve", "nft_update"], // TODO
    }
  );
  window.contractMarketplace = new Contract(
    window.walletConnection.account(),
    nearEnv.contractMarketplace,
    {
      viewMethods: [
        "storage_balance_of", "get_sale", "get_sales_by_nft_contract_id",
        "get_bid_token_by_token_id", "get_bid_token_on_nft_by_account_id", "get_bid_token_by_account_id",
        "get_bid_rent_by_account_id", "get_rent_by_token_id", "get_bid_rent_on_nft_by_account_id", "get_rent_by_account_id", "get_bid_rent_by_token_id"], // TODO
      changeMethods: [
        "storage_deposit", "update_price", "offer", "remove_sale",
        "bid_token", "accept_bid_token", "bid_token_cancel_and_withdraw",
        "bid_rent", "bid_rent_cancel_and_widthdraw", "accept_bid_rent"
      ], // TODO
    }
  );
}

export async function accountBalance() {
  return formatNearAmount(
    (await window.walletConnection.account().getAccountBalance()).total,
    2
  );
}

export async function getAccountId() {
  return window.walletConnection.getAccountId();
}

export function login() {
  window.walletConnection.requestSignIn(nearEnv.contractMarketplace);
}

export function logout() {
  window.walletConnection.signOut();
  window.location.reload();
}

'''