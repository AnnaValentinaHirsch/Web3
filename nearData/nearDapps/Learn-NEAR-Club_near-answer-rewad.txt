*GitHub Repository "Learn-NEAR-Club/near-answer-rewad"*

'''--- README.md ---
near-blank-project
==================

This [React] app was initialized with [create-near-app]

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] ≥ 12
2. Install dependencies: `npm install`
3. Run the local development server: `npm run dev` (see `package.json` for a
   full list of `scripts` you can run with `npm`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/frontend` folder. `/frontend/index.html` is a great
   place to start exploring. Note that it loads in `/frontend/assets/js/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `npm
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `npm run dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `npm install`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `near-blank-project.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `near-blank-project.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    npm run deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [React]: https://reactjs.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- contract/Cargo.toml ---
[package]
name = "greeter"
version = "1.0.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "4.0.0"
uint = { version = "0.9.3", default-features = false }

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []

'''
'''--- contract/README.md ---
near-blank-project Smart Contract
==================

A [smart contract] written in [Rust] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contract/src/lib.rs ---
/*
 * Example smart contract written in RUST
 *
 * Learn more about writing NEAR smart contracts with Rust:
 * https://near-docs.io/develop/Contract
 *
 */

use near_sdk::collections::{LookupMap, UnorderedMap};
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{env, near_bindgen, Balance, AccountId, Promise, json_types::{ U128 },};

// 1 Ⓝ in yoctoNEAR
const PRIZE_AMOUNT: u128 = 2_000_000_000_000_000_000_000_000;

// 0.5 Ⓝ in yoctoNEAR
const FEE_ANSWER: u128 =     400_000_000_000_000_000_000_000;

// Define the contract structure
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Blog {
    id: usize,
    answers: LookupMap<usize,String>,
    questions: UnorderedMap<usize, Question>,
    owner: AccountId,
    pub credits: UnorderedMap<AccountId, Balance>,
}

// Define the default, which automatically initializes the contract
impl Default for Blog{
    fn default() -> Self{
        Self{id: 0,
            answers: LookupMap::new(b"answers".to_vec()),
            questions: UnorderedMap::new(b"questions".to_vec()),
            credits: UnorderedMap::new(b"credits".to_vec()),    
            owner: env::signer_account_id(),
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize, Deserialize, Serialize, Debug, Clone)]
#[serde(crate = "near_sdk::serde")]
pub struct Question {
    pub title: String,
    pub body: String,
    pub author: AccountId,
    pub reply: Vec<Reply>,
    pub open: bool,
    pub id: usize,
}

#[derive(BorshDeserialize, BorshSerialize, Deserialize, Serialize, Debug, Clone)]
#[serde(crate = "near_sdk::serde")]
pub struct Reply {
    pub body: String,
    pub author: AccountId,
    pub correct: bool,
}

// Implement the contract structure
#[near_bindgen]
impl Blog {

    pub fn create_question(&mut self, title: String, body: String, solution: String) -> usize {
        let author = env::signer_account_id();
        let mut credits = self.credits.get(&author).unwrap_or(0);
        assert!(credits > FEE_ANSWER, "not enough credits to answer");
        let question = Question {
            title,
            body,
            author: author.clone(),
            reply: Vec::new(),
            open: true,
            id: self.id,
        };
        credits = credits - FEE_ANSWER;
        self.credits.insert(&author, &credits);
        self.answers.insert(&self.id, &solution);
        self.questions.insert(&question.id, &question);
        self.id += 1;
        question.id
    }

    #[payable]
    pub fn deposit(&mut self) {
        let account_id = env::signer_account_id();
        let deposit = env::attached_deposit();
        assert!(deposit > FEE_ANSWER, "Please deposit at least 0.4 Near ");
        let mut credits = self.credits.get(&account_id).unwrap_or(0);
        credits = credits + deposit;
        self.credits.insert(&account_id, &credits);
    }

    pub fn get_credit(&self, account: AccountId) -> U128 {
        self.credits.get(&account).unwrap_or(0).into()
    }

    // pub fn minus_credit(&mut self, account: AccountId) -> U128 {
    //     let mut credits = self.credits.get(&account).unwrap_or(0);
    //     credits = credits - FEE_ANSWER;
    //     self.credits.insert(&account, &credits);
    //     credits.into()
    // }

    // delete post
    pub fn delete_question(&mut self, id: usize) {
        let user = env::predecessor_account_id();
        assert_eq!(self.owner, user, "only owner can delete post");
        self.questions.remove(&id);
        self.answers.remove(&id);
    }

    // get owner
    pub fn get_owner(&self) -> AccountId {
        self.owner.clone()
    }

    // get question
    pub fn get_question(&self, id: usize) -> Question {
        self.questions.get(&id).unwrap().clone()
    }

    // get questions
    pub fn get_questions(&self) -> Vec<Question> {
        self.questions.values().map(|post| post.clone()).collect()
    }

    // answer question
    pub fn answer(&mut self, post_id: usize, answer: String) -> Question {
        let answer_id = env::signer_account_id();
        let mut post = self.questions.get(&post_id).expect(&"this post is not exist".to_string());

        let mut credits = self.credits.get(&answer_id).unwrap_or(0);
        assert!(credits > FEE_ANSWER, "not enough credits to answer");

        assert_ne!(post.author, answer_id, "only customer can answer question");
        assert_eq!(post.open, true, "This question is closed");
        let solution = self.answers.get(&post_id);
        let correct = solution.unwrap().eq(&answer);
        let reply = Reply {
            body: answer,
            author: answer_id.clone(),
            correct: correct
        };

        // closed question
        post.open = !correct;
        if correct {
            self.pay_answer(answer_id.clone());
        }
        
        post.reply.push(reply);

        credits = credits - FEE_ANSWER;
        self.credits.insert(&answer_id, &credits);
        self.questions.insert(&post_id, &post);
        post.clone()
    }

    fn pay_answer(&self, to: AccountId) -> Promise {
        Promise::new(to).transfer(PRIZE_AMOUNT)
    }
}

/*
 * The rest of this file holds the inline tests for the code above
 * Learn more about Rust tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html
 */
#[cfg(test)]
mod tests {
    use near_sdk::test_utils::VMContextBuilder;
    use super::*;
    // use near_sdk::MockedBlockchain;
    // use std::convert::TryInto;
    use near_sdk::{testing_env, VMContext};

    // Mock the context for testing
    fn get_context(input: Vec<u8>, is_view: bool) -> VMContext {
        VMContextBuilder::new()
            .signer_account_id("bob_near".parse().unwrap())
            .predecessor_account_id("bob_near".parse().unwrap())
            .current_account_id("join_near".parse().unwrap())
            .account_balance(5_000_000_000_000_000_000_000_000)
            .attached_deposit(1_000_000_000_000_000_000_000_000)
            .is_view(is_view)
            .build()
    }

    #[test]
    fn test_answer() {
        let mut context = get_context(vec![],false);
        testing_env!(context);
        let mut contract = Blog::default();
        let post_id = contract.create_question("title".to_string(), "1+1=".to_string(), "2".to_string());
        contract.answer(post_id, "2".to_string());
        let post = contract.get_question(0);
        assert_eq!(post.reply.get(0).unwrap().body, "2".to_string());
        assert_eq!(post.reply.get(0).unwrap().correct, true);
    }

    #[test]
    fn test_deposit() {
        let mut context = get_context(vec![],false);
        testing_env!(context);
        let mut contract = Blog::default();
        let deposit = env::attached_deposit();
        contract.deposit();
        assert_eq!(deposit, 2 * FEE_ANSWER, "Wrong deposit ");
        let credit = contract.get_credit("bob_near".parse().unwrap());
        assert_eq!(credit, 2 * FEE_ANSWER, "Wrong credit ");
    }

    #[test]
    fn test_create_question() {
        let context = get_context(vec![],false);
        testing_env!(context);
        let mut contract = Blog::default();
        let post_id = contract.create_question("title".to_string(), "body".to_string(), "right-answer".to_string());
        assert_eq!(post_id, 0);

        // create another post
        let post_id = contract.create_question("another title".to_string(), "another body".to_string(), "right-answer".to_string());
        assert_eq!(post_id, 1);

        // 20 questions from 2 (we created 2)
        for i in 2..20 {
            let post_id = contract.create_question("title".to_string(), "body".to_string(), "right-answer".to_string());
            assert_eq!(post_id, i);
        }
    }

    #[test]
    fn test_delete_question() {
        let context = get_context(vec![],false);
        testing_env!(context);
        let mut contract = Blog::default();
        contract.create_question("title".to_string(), "body".to_string(), "right-answer".to_string());

        // create another post
        let post_id_2 = contract.create_question("another title".to_string(), "another body".to_string(), "right-answer".to_string());

        contract.delete_question(post_id_2);
        let questions = contract.get_questions();
        assert_eq!(questions.len(), 1);
    }

    #[test]
    fn test_pay() {
        let context = get_context(vec![],false);
        testing_env!(context);
        let mut contract = Blog::default();
        let receiver = "join_near".parse().unwrap();
        contract.pay_answer(receiver);
        // In test context, we set "bob_near" is signer_account_id, so when get greeting from him
        // We also set "howdy" as greeting. It will result howdy
        assert_eq!(
            env::account_balance(),
            4_000_000_000_000_000_000_000_000
        );
    }
   
    #[test]
    fn test_get_questions() {
        let context = get_context(vec![],false);
        testing_env!(context);
        let mut contract = Blog::default();
        let post_id = contract.create_question("title".to_string(), "body".to_string(), "right-answer".to_string());
        assert_eq!(post_id, 0);

        // create another post
        let post_id = contract.create_question("another title".to_string(), "another body".to_string(), "right-answer".to_string());
        assert_eq!(post_id, 1);

        let questions = contract.get_questions();
        assert_eq!(questions.len(), 2);
    }
}

'''
'''--- frontend/App.js ---
import 'regenerator-runtime/runtime'
import React from 'react'
import Signin from './app/login'
import {get_owner, logout} from './assets/js/near/utils'
import { Outlet } from "react-router-dom";

export default function App() {

  // if not signed in, return early with sign-in prompt
  if (!window.walletConnection.isSignedIn()) {
    return (
      <Signin />
    )
  }

  return (
      // use React Fragment, <>, to avoid wrapping elements in unnecessary divs
      <>
        Welcome <b>{window.accountId}</b> 
        <nav>
          <ul class="nav nav-pills pull-right">
            <li role="presentation" id="homeHyperlink"><a href="/">Home</a></li>
            <li role="presentation" id="addHyperLink"><a href="/question">Add</a></li>
            <li role="presentation"><button type="button" class="btn" onClick={logout}>
              Sign out
            </button></li>
          </ul>
        </nav>
        <div className="content">
          <Outlet />
        </div>
      </>
    )
}

'''
'''--- frontend/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- frontend/app/jumbotron-narrow.css ---
/* Space out content a bit */
body {
  padding-top: 20px;
  padding-bottom: 20px;
  height:max-content;
}

/* Everything but the jumbotron gets side spacing for mobile first views */
.header,
.marketing,
.footer {
  padding-right: 15px;
  padding-left: 15px;
}

/* Custom page header */
.header {
  padding-bottom: 20px;
  border-bottom: 1px solid #e5e5e5;
}
/* Make the masthead heading the same height as the navigation */
.header h3 {
  margin-top: 0;
  margin-bottom: 0;
  line-height: 40px;
}

/* Custom page footer */
.footer {
  padding-top: 19px;
  color: #777;
  border-top: 1px solid #e5e5e5;
}

/* Customize container */
@media (min-width: 768px) {
  .container {
    max-width: 730px;
  }
}
.container-narrow > hr {
  margin: 30px 0;
}

/* Main marketing message and sign up button */
.jumbotron {
  text-align: center;
  border-bottom: 1px solid #e5e5e5;
}
.jumbotron .btn {
  padding: 14px 24px;
  font-size: 21px;
}

/* Supporting marketing content */
.marketing {
  margin: 40px 0;
}
.marketing p + h4 {
  margin-top: 28px;
}

/* Responsive: Portrait tablets and up */
@media screen and (min-width: 768px) {
  /* Remove the padding we set earlier */
  .header,
  .marketing,
  .footer {
    padding-right: 0;
    padding-left: 0;
  }
  /* Space out the masthead */
  .header {
    margin-bottom: 30px;
  }
  /* Remove the bottom border on the jumbotron for visual effect */
  .jumbotron {
    border-bottom: 0;
  }
}

'''
'''--- frontend/assets/css/global.css ---
* {
    box-sizing: border-box;
  }
  html, body {
    height: 100%;
  }
  html {
    --bg: #efefef;
    --fg: #1e1e1e;
    --gray: #555;
    --light-gray: #ccc;
    --shadow: #e6e6e6;
    --success: rgb(90, 206, 132);
    --primary: #FF585D;
    --secondary: rgb(90, 206, 132);
  
    background-color: var(--bg);
    color: var(--fg);
    font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
    font-size: calc(0.9em + 0.5vw);
    line-height: 1.3;
  }
  
  body {
    margin: 0;
    padding: 1em;
  }
  
  main {
    margin: 0 auto;
    max-width: 26em;
    text-align: justify;
  }
  
  h1 {
    background-image: url(../img/logo-black.svg);
    background-position: center 1em;
    background-repeat: no-repeat;
    background-size: auto 1.5em;
    margin-top: 0;
    padding: 3.5em 0 0.5em;
    text-align: center;
  }
  
  a,
  .link {
    color: var(--primary);
    text-decoration: none;
  }
  a:hover,
  a:focus,
  .link:hover,
  .link:focus {
    text-decoration: underline;
  }
  a:active,
  .link:active {
    color: var(--secondary);
  }
  
  button, input {
    font: inherit;
    outline: none;
  }
  
  button {
    background-color: var(--secondary);
    border-radius: 5px;
    border: none;
    color: #efefef;
    cursor: pointer;
    padding: 0.3em 0.75em;
    transition: transform 30ms;
  }
  button:hover, button:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
  }
  button:active {
    box-shadow: 0 0 10em rgba(0, 0, 0, 0.1) inset;
  }
  button.link {
    background: none;
    border: none;
    box-shadow: none;
    display: inline;
  }
  [disabled] button, button[disabled] {
    box-shadow: none;
    background-color: var(--light-gray);
    color: gray;
    cursor: not-allowed;
    transform: none;
  }
  [disabled] button {
    text-indent: -900em;
    width: 2em;
    position: relative;
  }
  [disabled] button:after {
    content: " ";
    display: block;
    width: 0.8em;
    height: 0.8em;
    border-radius: 50%;
    border: 2px solid #fff;
    border-color: var(--fg) transparent var(--fg) transparent;
    animation: loader 1.2s linear infinite;
    position: absolute;
    top: 0.45em;
    right: 0.5em;
  }
  @keyframes loader {
    0% { transform: rotate(0deg) }
    100% { transform: rotate(360deg) }
  }
  
  fieldset {
    border: none;
    padding: 2em 0;
  }
  
  input {
    border: thin 1px;
    border-radius: 5px;
    caret-color: var(--primary);
    color: black;
    padding: 0.25em 1em;
  }
  input::selection {
    background-color: var(--secondary);
    color: #efefef;
  }
  input:focus {
    box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
  }
  
  code {
    color: var(--gray);
  }
  
  li {
    padding-bottom: 1em;
  }
  
  aside {
    animation: notify ease-in-out 10s;
    background-color: var(--shadow);
    border-radius: 5px;
    bottom: 0;
    font-size: 0.8em;
    margin: 1em;
    padding: 1em;
    position: fixed;
    transform: translateY(10em);
    right: 0;
  }
  h4 {
    color: black;
  }
  aside footer {
    display: flex;
    font-size: 0.9em;
    justify-content: space-between;
    margin-top: 0.5em;
  }
  aside footer *:first-child {
    color: var(--success);
  }
  aside footer *:last-child {
    color: var(--gray);
  }
  @keyframes notify {
    0% { transform: translateY(10em) }
    5% { transform: translateY(0) }
    95% { transform: translateY(0) }
    100% { transform: translateY(10em) }
  }
  
  @media (prefers-color-scheme: dark) {
    html {
      --bg: #1e1e1e;
      --fg: #efefef;
      --gray: #aaa;
      --shadow: #2a2a2a;
      --light-gray: #444;
    }
    h1 {
      background-image: url(../img/logo-white.svg);
    }
    input:focus {
      box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
    }
  }
'''
'''--- frontend/assets/img/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- frontend/assets/img/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- frontend/assets/js/near/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'nearcert.thanhnham.testnet'
function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      GAS: "200000000000000",
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- frontend/assets/js/near/utils.js ---
import { connect, Contract, keyStores, WalletConnection, utils } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// export const {
// 	utils: {
// 		format: {
// 			formatNearAmount, parseNearAmount
// 		}
// 	}
// } = nearAPI;

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['get_question', 'get_questions', 'get_owner', 'get_credit'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['create_question', 'delete_question', 'answer', 'deposit' ,'minus_credit'],
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

export async function get_questions(){
  let questions = await window.contract.get_questions()
  return questions
}

export async function deposit(amount){
  await window.contract.deposit({}, nearConfig.GAS, utils.format.parseNearAmount(amount))
}

export async function get_credit(account){
  let balance = await window.contract.get_credit({account : account})
  return utils.format.formatNearAmount(balance, 2)
}

export async function delete_question(id){
  await window.contract.delete_question({
    id: id
  })
  return true
}

export async function get_question(id){
  let question = await window.contract.get_question({
    id: id
  })
  return question
}

export async function get_owner(){
  return await window.contract.get_owner()
}

export async function create_question(question_req){
  console.log("create_question");
  let post = await window.contract.create_question({
    title: question_req.title,
    body: question_req.body,
    solution: question_req.solution
  })
  return post
}

export async function update_answer(answer_req){
  let post = await window.contract.answer({
    post_id: answer_req.id,
    answer: answer_req.answer,
  })
  return post
}
'''
'''--- frontend/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/img/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/img/favicon.ico" />
    <link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <link href="app/jumbotron-narrow.css" rel="stylesheet">
    <link href="assets/css/global.css" rel="stylesheet">
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="./index.js" type="module"></script>
  </body>
</html>

'''
'''--- frontend/index.js ---
import React from 'react'
import { createRoot } from 'react-dom/client'
import { BrowserRouter, Routes, Route } from "react-router-dom";
import App from './App'
import { initContract } from './assets/js/near/utils'
import AddQuestion from './app/question';
import ShowQuestions from './app/home';
import Answer from './app/answer';
const container = document.querySelector('#root')
const root = createRoot(container) // createRoot(container!) if you use TypeScript

window.nearInitPromise = initContract()
  .then(() => {
    <App />
    root.render(
      <BrowserRouter>
        <Routes>
        <Route path="/" element={<App />}>
          <Route path="/question" element={<AddQuestion />} />
          <Route path="/" element={<ShowQuestions />} />
          <Route path="/answer/:id" element={<Answer />} />
        </Route>
        </Routes>
      </BrowserRouter>
    )
  })
  .catch(console.error)

'''
'''--- integration-tests/package.json ---
{
  "name": "ava-testing",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "test": "ava --verbose"
  },
  "devDependencies": {
    "ava": "^4.2.0",
    "near-api-js": "^0.44.2",
    "typescript": "^4.7.2",
    "ts-node": "^10.8.0",
    "@types/bn.js": "^5.1.0"
  },
  "dependencies": {}
}

'''
'''--- integration-tests/src/config.ts ---

import { keyStores, KeyPair } from 'near-api-js'
const fs = require('fs')

const CONTRACT_NAME=fs.readFileSync('../neardev/dev-account', 'utf-8')
const NETWORK_ID='testnet'

// Create an InMemoryKeyStore
const keyStore = new keyStores.InMemoryKeyStore()

// Load credentials
const credPath = `${process.env.HOME}/.near-credentials/${NETWORK_ID}/${CONTRACT_NAME}.json`
let credentials = JSON.parse(fs.readFileSync(credPath))

// Save key in the key store
keyStore.setKey(
  NETWORK_ID,
  CONTRACT_NAME,
  KeyPair.fromString(credentials.private_key)
)

export const nearConfig = {
  networkId: NETWORK_ID,
  nodeUrl: 'https://rpc.testnet.near.org',
  contractName: CONTRACT_NAME,
  walletUrl: 'https://wallet.testnet.near.org',
  helperUrl: 'https://helper.testnet.near.org',
  explorerUrl: 'https://explorer.testnet.near.org',
  headers: {},
  deps: {keyStore}
}
'''
'''--- integration-tests/src/main.ava.ts ---
import anyTest, { TestFn } from 'ava'

import { Near, Account, Contract } from 'near-api-js'
import { nearConfig } from './config'

const test = anyTest as TestFn<{
  accounts: Record<string, any>;
}>

test.beforeEach(async (t) => {
  const near = await new Near(nearConfig)
  const user = await new Account(near.connection, nearConfig.contractName)
  const contract = await new Contract(
    user,
    nearConfig.contractName,
    { viewMethods: ['get_greeting'], changeMethods: ['set_greeting'] }
  )
  t.context.accounts = { contract }
})

test('returns the default greeting', async (t) => {
  const { contract } = t.context.accounts
  const message: string = await contract.get_greeting({})
  t.is(message, 'Hello')
})

test('changes the message', async (t) => {
  const { contract } = t.context.accounts
  await contract.set_greeting({args:{ message: 'Howdy' }})
  const message: string = await contract.get_greeting({})
  t.is(message, 'Howdy')
})
'''
'''--- package.json ---
{
  "name": "near-answer-reward",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "cd contract && rustup target add wasm32-unknown-unknown && cargo build --all --target wasm32-unknown-unknown --release && cp ./target/wasm32-unknown-unknown/release/greeter.wasm ../out/main.wasm",
    "build:web": "parcel build frontend/index.html --public-url ./",
    "deploy": "npm run build:contract && near dev-deploy -f",
    "start": "npm run deploy && echo The app is starting! It will automatically open in your browser when ready && env-cmd -f ./neardev/dev-account.env parcel frontend/index.html --open",
    "dev": "nodemon --watch contract -e ts --exec \"npm run start\"",
    "test": "npm run build:contract && npm run test:unit && npm run test:integration",
    "test:unit": "cd contract && cargo test",
    "test:integration": "npm run deploy && cd integration-tests && npm run test",
    "test:integration:ts": "echo not supported"
  },
  "devDependencies": {
    "@babel/core": "~7.18.2",
    "@babel/preset-env": "~7.18.2",
    "@babel/preset-react": "~7.17.12",
    "assert": "^2.0.0",
    "ava": "^4.2.0",
    "browserify-zlib": "^0.2.0",
    "crypto-browserify": "^3.12.0",
    "env-cmd": "~10.1.0",
    "near-cli": "~3.3.0",
    "nodemon": "~2.0.16",
    "parcel": "^2.6.0",
    "path-browserify": "^1.0.1",
    "process": "^0.11.10",
    "querystring-es3": "^0.2.1",
    "react-test-renderer": "~18.1.0",
    "stream-browserify": "^3.0.0",
    "stream-http": "^3.2.0",
    "ts-node": "^10.8.0",
    "typescript": "^4.7.2",
    "url": "^0.11.0"
  },
  "dependencies": {
    "js-sha256": "^0.9.0",
    "near-api-js": "~0.44.2",
    "react": "~18.1.0",
    "react-dom": "~18.1.0",
    "react-router-dom": "^6.3.0",
    "regenerator-runtime": "~0.13.9"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''