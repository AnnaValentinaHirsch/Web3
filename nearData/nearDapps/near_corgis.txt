*GitHub Repository "near/corgis"*

'''--- .github/ISSUE_TEMPLATE/BOUNTY.yml ---
name: "Simple Bounty"
description: "Use this template to create a HEROES Simple Bounty via Github bot"
title: "Bounty: "
labels: ["bounty"]
assignees: heroes-bot-test
body:
  - type: markdown
    attributes:
      value: |
        Hi! Let's set up your bounty! Please don't change the template - @heroes-bot-test won't be able to help you.

  - type: dropdown
    id: type
    attributes:
      label: What talent are you looking for?
      options:
        - Marketing
        - Development
        - Design
        - Other
        - Content
        - Research
        - Audit

  - type: textarea
    id: description
    attributes:
      label: What you need to be done?

  - type: dropdown
    id: tags
    attributes:
      label: Tags
      description: Add tags that match the topic of the work
      multiple: true
      options:
        - API
        - Blockchain
        - Community
        - CSS
        - DAO
        - dApp
        - DeFi
        - Design
        - Documentation
        - HTML
        - Javascript
        - NFT
        - React
        - Rust
        - Smart contract
        - Typescript
        - UI/UX
        - web3
        - Translation
        - Illustration
        - Branding
        - Copywriting
        - Blogging
        - Editing
        - Video Creation
        - Social Media
        - Graphic Design
        - Transcription
        - Product Design
        - Artificial Intelligence
        - Quality Assurance
        - Risk Assessment
        - Security Audit
        - Bug Bounty
        - Code Review
        - Blockchain Security
        - Smart Contract Testing
        - Penetration Testing
        - Vulnerability Assessment
        - BOS
        - News
        - Hackathon
        - NEARCON2023
        - NEARWEEK

  - type: input
    id: deadline
    attributes:
      label: Deadline
      description: "Set a deadline for your bounty. Please enter the date in format: DD.MM.YYYY"
      placeholder: "19.05.2027"

  - type: dropdown
    id: currencyType
    attributes:
      label: Currency
      description: What is the currency you want to pay?
      options:
        - USDC.e
        - USDT.e
        - DAI
        - wNEAR
        - USDt
        - XP
        - marmaj
        - NEKO
        - JUMP
        - USDC
        - NEARVIDIA
      default: 0
    validations:
      required: true

  - type: input
    id: currencyAmount
    attributes:
      label: Amount
      description: How much it will be cost?

  - type: markdown
    attributes:
      value: "## Advanced settings"

  - type: checkboxes
    id: kyc
    attributes:
      label: KYC
      description: "Use HEROES' KYC Verification, only applicants who passed HEROES' KYC can apply and work on this bounty!"
      options:
        - label: Use KYC Verification

  - type: markdown
    attributes:
      value: |
        ### This cannot be changed once the bounty is live!

'''
'''--- .github/workflows/corgis-nft.yml ---
name: Corgis NFT

on:
  # We want to trigger the build & test pipelines in every branch.
  push:
    # But do no run the pipeline when only `md` files are modified.
    paths-ignore:
      - '**.md'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  FORCE_COLOR: 1

jobs:

  build-contract:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          contract/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
    - run: rustup target add wasm32-unknown-unknown
    - run: yarn build:contract
    - run: cd contract && cargo metadata --no-deps --format-version 1 > target/wasm32-unknown-unknown/release/metadata.json

    - uses: actions/upload-artifact@v2
      with:
        name: corgis_nft
        path: |
          contract/target/wasm32-unknown-unknown/release/corgis_nft.wasm
          contract/target/wasm32-unknown-unknown/release/metadata.json

  test-contract:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          contract/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - run: yarn test:contract

  api-test-contract:
    needs: build-contract
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
    - uses: actions/download-artifact@v2
      with:
        name: corgis_nft
        path: contract/target/wasm32-unknown-unknown/release

    - name: Disable near-cli event tracking consent question (which blocks the CI pipeline)
      run: "mkdir ~/.near-config && echo '{\"trackingEnabled\": false, \"trackingAccountID\": false}' > ~/.near-config/settings.json"
    - run: yarn install --frozen-lockfile
    - run: yarn dev-deploy:contract
    - run: yarn api-test:contract

  deploy:
    needs: api-test-contract
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    env:
      MASTER_ACCOUNT: corgis-app.testnet
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
    - uses: actions/download-artifact@v2
      with:
        name: corgis_nft
        path: contract/target/wasm32-unknown-unknown/release

    - run: yarn install --frozen-lockfile
    - run: SEED_PHRASE="${{ secrets.SEED_PHRASE }}" node ci/deploy.mjs
    - run: CONTRACT_NAME=`cat version`.$MASTER_ACCOUNT yarn build:web
    - run: git remote set-url origin https://git:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git
    - run: yarn gh-pages-clean
    - run: yarn deploy:web --user "Github Workflow Bot <noemail@epam.github.io>"

'''
'''--- .gitpod.yml ---
tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- .vscode/settings.json ---
{
  "javascript.preferences.importModuleSpecifier": "non-relative"
}

'''
'''--- README.md ---
# Explore [Corgis](http://corgis.near.org) when you first see this!

## To run on main Testnet

### Requirements

#### IMPORTANT: Make sure you have the latest version of NEAR Shell and Node Version > 10.x

1. node and npm

2. near shell

Install with

```sh
npm i -g near-cli
```

3.(optional) install yarn to build

```sh
npm i -g yarn
```

4.Rust

You need to install Rustup in order to compile Rust contracts.
See the official guide on how to set up Rust in your local environment.

> <https://www.rust-lang.org/tools/install>

By installing `rustup`, you will add the Rust compiler and the `cargo` package manager to your system.

The NEAR platform leverage the use of WASM to execute smart contracts.
Thus, in order to build a suitable binary for the NEAR platform,
we must install the wasm32 target:

```sh
rustup target add wasm32-unknown-unknown
```

### Procedure (deploy the contract for your own project)

Step 1: Create account for the contract.

In the terminal

```sh
near login
```

click the link and create your own contract ID on NEAR Testnet

*After you see the context, "Logged in as [ YOUR_NAME ] with public key [ ed25519:XXXXXX... ] successfully", you are done.*

Step 2: Deploy the contract on the account

Set the following environment variable

```sh
export CONTRACT_NAME=<YOUR_NAME>
```

Alternatively, modify src/config.js line that sets the contractName. Set it with Id from step 1.

```js
const CONTRACT_NAME = process.env.CONTRACT_NAME || "new-corgis"; /* TODO: fill this in! */
```

Step 3:

(For Mac and Ubuntu):
Finally, run the command in your terminal.

```sh
npm install && npm run start
```

with yarn:

```sh
yarn install && yarn start
```

(For Windows):

```sh
yarn install
yarn start
```

The server that starts is for static assets and by default serves them to localhost:1234. Navigate there in your browser to see the app running!

## To Explore

- `contract/src/lib.rs` for the contract code
- `src/index.html` for the front-end HTML
- `src/main.js` for the JavaScript front-end code and how to integrate contracts
- `src/app.js` for the first react component

For information about the contract, see [contract/README.md](contract/).

### To run on Local Node (May in the old version and need update)

Step 1:
Get nearcore

Step 2:
Use command ```./scripts/start_localnet.py --local``` to start the local node

Step 3:
Install serve with:

```sh
npm i serve
```

Use command ```serve src -p 3000``` to start on localhost:3000

Step 4:
Start frontend with command:

```sh
NODE_ENV=local yarn start
```

Now, open localhost:3000. Navigate there in your browser to see the app running!

Step 5:
Use wallet/login/index.html to create account and start exploring.

'''
'''--- contract/Cargo.toml ---
[package]
name = "corgis-nft"
version = "0.0.6"
authors = ["Epam <hello@epam.com>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "3.0.0-pre.2"
near-vm-logic = "3.0.0"
serde = { version = "1.0", features = ["derive"] }
near-env = "0.1.6"

[build-dependencies]
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true
'''
'''--- contract/README.md ---
# Corgis contract

## Interacting with Corgis contract

The Corgis contract is located in the `contract` folder.
It is written in Rust.
Here is an overview on how to develop NEAR contracts using Rust:

<https://docs.near.org/docs/develop/contracts/rust/intro>

## Building

Run the following to build the Corgis contract:

```sh
cargo build --target wasm32-unknown-unknown --release
```

The contract is compiled down to a WASM binary.
You can find this binary in
`target/wasm32-unknown-unknown/release/corgis_nft.wasm`.

## Contract Configuration

The contract can be configured at build time.
The respective config file is [config.json](config.json).
These are the configuration fields:

- `page_limit`: How many corgis are returned at most by `get_global_corgis`?
- `mint_fee`: Amount the user needs to pay for creating a corgi.

In addition, the contract provides a [methods.json](methods.json) file.
This file contains the `viewMethods` and `changeMethods` provided by the contract.
It is useful by any client of the contract.

## Deploying our Corgis contract

To deploy our contract, we need `near-cli`.
The `near-cli` tool allows us to deploy and interact with contracts on the NEAR Blockchain.

We can deploy our contract with:

```sh
near deploy --wasmFile target/wasm32-unknown-unknown/release/corgis_nft.wasm
```

## Reference

Here is a quick reference on how to interact with our Corgis contract on the NEAR Blockchain.
In the following sections,
`$CONTRACT_NAME` refers to the developer account.
This is the account that creates and deploys the contracts below.
On the other hand, `$ACCOUNT_NAME` refers to the end user account that uses our
Corgi site.

### `create_corgi`

This contract method creates a corgi in the Blockchain.
In order to run the following command,
you must be logged in with the `$ACCOUNT_NAME`.

```sh
near --accountId $ACCOUNT_NAME call $CONTRACT_NAME create_corgi '{"name":"doggy dog","quote":"To err is human — to forgive, canine","color":"green","background_color":"blue"}' --amount 0.1
```

The `amount` is how much the user has to pay to mint the corgi.
Currenly fee is `0.1` NEAR, indicated by `mint_fee` configuration field.

This contract returns newly created `Corgi`.
The `id` field is random number encoded in *base58*.
The `created` and `modified` fields indicates when this corgi was created,
expressed in nanoseconds.
`sender` is updated when this corgi is being transferred.
`for_sale` is `null` when this corgi is not in auction (this is the default),
otherwise will contain information about bidders.

```js
{
  id: 'FAvBsovGS294hmD49pgCa9',
  name: 'doggy dog',
  quote: 'To err is human — to forgive, canine',
  color: 'green',
  background_color: 'blue',
  rate: 'COMMON',
  owner: '$ACCOUNT_NAME',
  created: 1616001893385302300,
  modified: 1616001893385302300,
  sender: '',
  for_sale: null
}
```

The `rate` field has the following type:

```typescript
type Rarity = 'COMMON'
            | 'UNCOMMON'
            | 'RARE'
            | 'VERY_RARE'
```

### `get_corgi_by_id`

Returns the `Corgi` given by `id`.

This is a view method.
Note the parameter is `&self` (without being mutable) in the method definition.
This means it doesn't modify state.
In the frontend (`/src/index.js`) this is added to the `"viewMethods"` array.

```sh
near view $CONTRACT_NAME get_corgi_by_id '{"id": "<corgi-id>"}'
```

The response returns the specified `Corgi`.
See `create_corgi` method for details.

### `get_corgis_by_owner`

```sh
near view $CONTRACT_NAME get_corgis_by_owner "{\"owner\":\"$ACCOUNT_NAME\"}"
```

Note that in this example we use double-quotes to be able to expand the shell variable `$ACCOUNT_NAME`.

The response returns an array of corgis, as returned by `create_corgi` method.

### `delete_corgi`

Deletes a `Corgi` by the given `id`.

```sh
near --accountId $ACCOUNT_NAME call $CONTRACT_NAME delete_corgi '{"id": "<corgi-id>"}'
```

### `transfer_corgi`

Transfer the Corgi with the given `id` to `receiver`.
Only the `owner` of the corgi can make such a transfer.

```sh
near --accountId $ACCOUNT_NAME call $CONTRACT_NAME transfer_corgi '{"receiver": "new-onwer.testnet", "id": "<corgi-id>"}'
```

### `get_global_corgis`

This command returns all corgis that have been created,
limited to `page_limit` corgis.

```sh
near view $CONTRACT_NAME get_global_corgis
```

The response returns an array of corgis, as returned by `create_corgi` method.

### `add_item_for_sale`

Puts the given `Corgi` for sale.
The `duration` indicates for how long the auction should last, in seconds.

```sh
near --accountId $ACCOUNT_NAME call $CONTRACT_NAME add_item_for_sale '{"token_id": "<corgi-id>", "duration": 3600}'
```

In the example above, the duration `3600` indicates the auction will last one hour.

### `get_items_for_sale`

Returns all `Corgi`s currently for sale.
That is, all `Corgi`s which are in auction.

```sh
near view $CONTRACT_NAME get_items_for_sale
```

The response returns an array of corgis, as returned by `create_corgi` method.
In addition, each corgi is augmented with the auction information.
This is indicated in the `for_sale` field.
It contains the list of bidders and the expiration timestamp,
expressed in nanoseconds.

```js
{
  // Rest of Corgi's fields
  for_sale: {
    bids: [
      {
        bidder: 'test-1616001731174.testnet',
        amount: '50000000000000000000000000',
        timestamp: '1616001924398792533'
      },
      {
        bidder: 'test-1616001726275.testnet',
        amount: '20000000000000000000000000',
        timestamp: '1616001919499740335'
      }
    ],
    expires: '1616001930836106961'
  }
}
```

### `bid_for_item`

Makes a bid for a `Corgi` already in auction.
This is a `payable` method, meaning the contract will escrow the `attached_deposit` until the auction ends.

```sh
near --accountId $ACCOUNT_NAME call $CONTRACT_NAME bid_for_item '{"token_id": "<corgi-id>"}' --amount 0.2
```

The amount indicate how much is the user willing to pay for the `Corgi`,
expressed in NEARs.

### `clearance_for_item`

Makes a clearance for the given `Corgi`.
Only the corgi `owner` or the highest bidder can end an auction after it expires.
All other bidders can get their money back when calling this method.

```sh
near --accountId $ACCOUNT_NAME call $CONTRACT_NAME clearance_for_item '{"token_id": "<corgi-id>"}'
```

## Contract Profiler

The following chart shows the storage cost for a sample workload.
Explore the script [../test/measure.mjs](../test/measure.mjs) to check out the workload used.

![Storage Cost](../test/storage-cost.png)

## Development & Tooling

For Rust development with Visual Studio Code,
you may want to check out the _rust.analyzer_ extension

> <https://rust-analyzer.github.io/>

'''
'''--- contract/build.rs ---
use std::{
    env,
    fs::{self, File},
    io::Write,
    path::Path,
};

use serde::Deserialize;
use serde_json::Result;

#[derive(Deserialize)]
struct Config {
    mint_fee: String,
    page_limit: u32,
}

fn get_file(file_name: &str) -> File {
    let out_dir = env::var("OUT_DIR").expect("Output dir not defined");
    let dest_path = Path::new(&out_dir).join(file_name);
    File::create(&dest_path).expect("Could not create file")
}

/// Reads the configuration for the contract located in `config.json`.
/// This allows us to share configuration with the client of the contract.
fn main() -> Result<()> {
    println!("cargo:rerun-if-changed=config.json");

    let data = fs::read_to_string("config.json").expect("Unable to read config file");
    let config: Config = serde_json::from_str(data.as_ref())?;

    writeln!(&mut get_file("mint_fee.val"), "{}", config.mint_fee).expect("Could not write");
    writeln!(&mut get_file("page_limit.val"), "{}", config.page_limit).expect("Could not write");

    Ok(())
}

'''
'''--- contract/config.json ---
{
    "page_limit": 12,
    "mint_fee": "0_100_000_000_000_000_000_000_000"
}
'''
'''--- contract/methods.json ---
{
    "viewMethods": [
        "get_corgi_by_id",
        "get_corgis_by_owner",
        "get_global_corgis",
        "get_items_for_sale"
    ],
    "changeMethods": [
        "create_corgi",
        "delete_corgi",
        "transfer_corgi",
        "add_item_for_sale",
        "bid_for_item",
        "clearance_for_item"
    ]
}
'''
'''--- contract/src/corgi.rs ---
use near_sdk::{
    borsh::{self, BorshDeserialize, BorshSerialize},
    bs58,
    json_types::{U128, U64},
    serde::Serialize,
    AccountId, Balance,
};
use std::{convert::TryInto, mem::size_of, usize};

use crate::dict::Dict;

/// This key is used internally to identify each `Corgi`.
/// A fix sized array prevents to heap-allocate memory when deserializing.
pub type CorgiKey = [u8; size_of::<u128>()];

/// The `Corgi` key visible representation.
/// It is the `CorgiKey` base58-encoded.
pub type CorgiId = String;

/// Represents a `Corgi` together with auction information.
/// In addition, we implement both `PartialEq` and `Debug` traits,
/// but only for testing purposes.
#[derive(Serialize)]
#[cfg_attr(test, derive(PartialEq, Debug))]
pub struct CorgiDTO {
    /// The `Corgi` of this DTO.
    /// The `flatten` attribute embeds all `corgi` fields into this struct.
    #[serde(flatten)]
    corgi: Corgi,
    /// Additional information about auction.
    pub(crate) for_sale: Option<ForSale>,
}

/// Represents a `Corgi`.
/// The `name` and `quote` are set by the user.
/// The `Corgi` struct is used as part of the public interface of the contract.
/// See, for example, [`get_corgis_by_owner`](Model::get_corgis_by_owner).
/// Every struct that is part of the public interface needs to be serializable
/// to JSON as well.
///
/// In addition, we implement both `PartialEq` and `Debug` traits,
/// but only for testing purposes.
#[derive(BorshDeserialize, BorshSerialize, Serialize)]
#[cfg_attr(test, derive(PartialEq, Debug))]
pub struct Corgi {
    /// The unique id of this `Corgi`. It is the `CorgiKey` base58-encoded.
    pub id: CorgiId,
    /// A `name` provided by the minter.
    pub name: String,
    /// A `quote` provided by the minter.
    pub quote: String,
    /// A `color` provided by the minter.
    pub color: String,
    /// A `background_color` provided by the minter.
    pub background_color: String,
    /// The `Rarity` of this `Corgi`. This is decided when the `Corgi` is being minted.
    pub(crate) rate: Rarity,
    /// Represents who is the owner of this `Corgi`.
    pub owner: AccountId,
    /// Represents when this `Corgi` was minted, in nanoseconds.
    pub created: u64,
    /// Represents when this `Corgi` was last modified, in nanoseconds. Either when created or transferred.
    pub modified: u64,
    /// If this `Corgi` was transferred, who was the previous owner.
    pub sender: AccountId,
}

/// Defines the types of Rarity available when minting `Corgi`.
#[derive(BorshDeserialize, BorshSerialize, Serialize)]
#[cfg_attr(test, derive(PartialEq, Debug))]
#[allow(non_camel_case_types)]
pub enum Rarity {
    COMMON,
    UNCOMMON,
    RARE,
    VERY_RARE,
}

/// Holds information related to `Corgi` auctions.
/// It is used as a DTO.
#[derive(Serialize)]
#[cfg_attr(test, derive(PartialEq, Debug))]
pub struct ForSale {
    /// All bids for this auction, from highest to lowest.
    pub bids: Vec<Bid>,
    /// Timestamp when this auction expires, in seconds.
    pub expires: U64,
}

/// Represents a bid for an auction.
#[derive(Serialize)]
#[cfg_attr(test, derive(PartialEq, Debug))]
pub struct Bid {
    /// Represents who made the bid.
    bidder: AccountId,
    /// And for how much, in yoctoNEAR.
    amount: U128,
    /// And when the `bidder` made the bid, in seconds.
    timestamp: U64,
}

/// Base58-encodes the given `key` into a `CorgiId` (String).
/// This is useful when sending back a `Corgi` identifier.
pub fn encode(key: CorgiKey) -> CorgiId {
    bs58::encode(key).into_string()
}

/// Base58-decodes the given `id` into a `CorgiKey`.
/// This is useful when receiving a `CorgiId` to further process within the contract.
pub fn decode(id: &CorgiId) -> CorgiKey {
    let mut key: CorgiKey = [0; size_of::<CorgiKey>()];
    match bs58::decode(id).into(&mut key) {
        Err(error) => panic!("Could not decode `{}`: {}", id, error),
        Ok(_size) => (),
    }
    key
}

/// Note that this is useful only for testing purposes.
/// When using through the NEAR platform,
/// it is not needed since the JSON serialization will flatten this struct.
#[cfg(test)]
impl std::ops::Deref for CorgiDTO {
    type Target = Corgi;
    fn deref(&self) -> &Self::Target {
        &self.corgi
    }
}

impl CorgiDTO {
    /// Creates a new `CorgiDTO` from an existing `Corgi`, with no sale information.
    pub fn new(corgi: Corgi) -> Self {
        Self {
            corgi,
            for_sale: None,
        }
    }

    /// Creates a new `CorgiDTO` from an existing `Corgi`, using the provided sale information.
    pub fn for_sale(corgi: Corgi, item: (Dict<AccountId, (Balance, u64)>, u64)) -> CorgiDTO {
        let bids = item
            .0
            .into_iter()
            .map(|(bidder, (amount, timestamp))| Bid::new(bidder, amount, timestamp))
            .collect::<Vec<Bid>>();
        Self {
            corgi,
            for_sale: Some(ForSale {
                bids,
                expires: U64(item.1),
            }),
        }
    }
}

impl Rarity {
    /// Transforms a random number into a Rarity.
    pub fn from_seed(seed: Vec<u8>) -> Rarity {
        let rate = u128::from_le_bytes(seed[..16].try_into().unwrap()) % 100;
        if rate > 10 {
            Rarity::COMMON
        } else if rate > 5 {
            Rarity::UNCOMMON
        } else if rate > 1 {
            Rarity::RARE
        } else {
            Rarity::VERY_RARE
        }
    }
}

impl Bid {
    /// Creates a new `Bid`.
    pub fn new(bidder: AccountId, amount: u128, timestamp: u64) -> Self {
        Self {
            bidder,
            amount: U128(amount),
            timestamp: U64(timestamp),
        }
    }
}

'''
'''--- contract/src/dict.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};

type HeapMap<K, V> = near_sdk::collections::LookupMap<K, V>;

/// Keeps a mapping from `K` keys to `V` values.
/// It combines `UnorderedMap` to store elements and implements a linked list
/// to allow the user to maintain the insertion order.
/// Any key-value pair is added to the beginning of the list.
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Dict<K, V> {
    heap: Heap<K, V>,
    first: K,
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct Heap<K, V>(HeapMap<K, Node<K, V>>);

#[derive(BorshDeserialize, BorshSerialize)]
struct Node<K, V> {
    next: K,
    prev: K,
    value: V,
}

pub struct DictIntoIterator<'a, K, V> {
    heap: &'a Heap<K, V>,
    curr: K,
}

impl<
        K: Default + Clone + PartialEq + BorshDeserialize + BorshSerialize,
        V: BorshDeserialize + BorshSerialize,
    > Dict<K, V>
{
    /// Creates a new `Dict` with zero elements.
    /// Use `id` as a unique identifier.
    pub fn new(id: Vec<u8>) -> Self {
        Self {
            heap: Heap(HeapMap::new(id)),
            first: K::default(),
        }
    }

    /// Returns the value corresponding to `key`,
    /// otherwise returns `None`.
    pub fn get(&self, key: &K) -> Option<V> {
        self.heap.0.get(key).map(|node| node.value)
    }

    /// Adds the key-value pair into this `Dict`.
    /// This pair is now the first in the collection, *i.e.*,
    /// the first element returned by the `into_iter` iterator.
    ///
    /// The `default` value for `K` cannot be used as valid key,
    /// as it is used to signal the end of the linked list.
    /// Moreover, the `Dict` does not accept duplicated keys.
    pub fn push_front(&mut self, key: &K, value: V) -> V {
        assert!(key != &K::default());

        if self.first != K::default() {
            let mut node = self.heap.get_node(&self.first);
            node.prev = key.clone();
            let res = self.heap.0.insert(&self.first, &node);
            assert!(res.is_some());
        }

        let node = Node {
            next: self.first.clone(),
            prev: K::default(),
            value,
        };

        self.first = key.clone();
        let was_updated = self.heap.0.insert(&key, &node);
        assert!(was_updated.is_none());

        node.value
    }

    /// Removes `key` from `Dict`.
    /// Returns the removed element, if the key was previously in the `Dict`.
    pub fn remove(&mut self, key: &K) -> Option<V> {
        match self.heap.0.remove(key) {
            None => None,
            Some(removed_node) => {
                if removed_node.prev == K::default() {
                    self.first = removed_node.next.clone();
                } else {
                    let mut node = self.heap.get_node(&removed_node.prev);
                    node.next = removed_node.next.clone();
                    self.heap.0.insert(&removed_node.prev, &node);
                }

                if removed_node.next != K::default() {
                    let mut node = self.heap.get_node(&removed_node.next);
                    node.prev = removed_node.prev;
                    self.heap.0.insert(&removed_node.next, &node);
                }

                Some(removed_node.value)
            }
        }
    }
}

impl<K: BorshDeserialize + BorshSerialize, V: BorshDeserialize + BorshSerialize> Heap<K, V> {
    fn get_node(&self, key: &K) -> Node<K, V> {
        let node = self.0.get(&key);
        assert!(node.is_some());
        node.unwrap()
    }
}

impl<
        'a,
        K: Default + Clone + PartialEq + BorshDeserialize + BorshSerialize,
        V: BorshDeserialize + BorshSerialize,
    > IntoIterator for &'a Dict<K, V>
{
    type Item = (K, V);

    type IntoIter = DictIntoIterator<'a, K, V>;

    fn into_iter(self) -> Self::IntoIter {
        Self::IntoIter {
            heap: &self.heap,
            curr: self.first.clone(),
        }
    }
}

impl<
        K: Default + Clone + PartialEq + BorshDeserialize + BorshSerialize,
        V: BorshDeserialize + BorshSerialize,
    > Iterator for DictIntoIterator<'_, K, V>
{
    type Item = (K, V);

    fn next(&mut self) -> Option<Self::Item> {
        if self.curr == K::default() {
            None
        } else {
            let node = self.heap.get_node(&self.curr);
            let result = Some((self.curr.clone(), node.value));
            self.curr = node.next;
            result
        }
    }
}

'''
'''--- contract/src/lib.rs ---
#![deny(warnings)]

pub mod corgi;
pub mod dict;

#[cfg(test)]
pub mod tests;

use crate::corgi::{decode, encode, Corgi, CorgiDTO, CorgiId, CorgiKey, Rarity};
use crate::dict::Dict;
use near_env::near_envlog;
use near_sdk::{
    borsh::{self, BorshDeserialize, BorshSerialize},
    collections::UnorderedMap,
    env,
    json_types::U64,
    near_bindgen,
    wee_alloc::WeeAlloc,
    AccountId, Balance, Promise,
};
use std::{convert::TryInto, mem::size_of, usize};

#[global_allocator]
static ALLOC: WeeAlloc = WeeAlloc::INIT;

/// Fee to pay (in yocto Ⓝ) to allow the user to store Corgis on-chain.
/// This value can be set by modifiying the `mint_fee` field in `config.json`.
const MINT_FEE: u128 = include!(concat!(env!("OUT_DIR"), "/mint_fee.val"));

/// Indicates how many Corgi are returned at most in the `get_global_corgis` method.
/// This value can be set by modifiying the `page_limit` field in `config.json`.
const PAGE_LIMIT: u32 = include!(concat!(env!("OUT_DIR"), "/page_limit.val"));

/// Keys used to identify our structures within the NEAR blockchain.
const CORGIS: &[u8] = b"a";
const CORGIS_BY_OWNER: &[u8] = b"b";
const CORGIS_BY_OWNER_PREFIX: &str = "B";
const AUCTIONS: &[u8] = b"d";
const AUCTIONS_PREFIX: &str = "D";

/// Holds our data model.
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Model {
    /// A mapping from `CorgiKey` to `Corgi` to have quick access to corgis.
    /// `Dict` is used to keep corgis sorted by creation timestamp.
    corgis: Dict<CorgiKey, Corgi>,
    /// Represents which account holds which `Corgi`.
    /// Each account can own several corgis.
    /// The inner `Dict` acts as a set, since it is mapped to `()`.
    corgis_by_owner: UnorderedMap<AccountId, Dict<CorgiKey, ()>>,
    /// Internal structure to store auctions for a given corgi.
    /// It is a mapping from `CorgiKey` to a tuple.
    /// The first component of the tuple is a `Dict`, which represents the bids for that corgi.
    /// Each entry in this `Dict` maps the bidder (`AccountId`) to the bid price and bidding timestamp.
    /// The seconds component of the tuple represents the expiration of the auction,
    /// as a timestamp in nanoseconds.
    auctions: UnorderedMap<CorgiKey, (Dict<AccountId, (Balance, u64)>, u64)>,
}

impl Default for Model {
    fn default() -> Self {
        env::log(format!("init v{}", env!("CARGO_PKG_VERSION")).as_bytes());
        Self {
            corgis: Dict::new(CORGIS.to_vec()),
            corgis_by_owner: UnorderedMap::new(CORGIS_BY_OWNER.to_vec()),
            auctions: UnorderedMap::new(AUCTIONS.to_vec()),
        }
    }
}

#[near_bindgen]
#[near_envlog(skip_args, only_pub)]
impl Model {
    /// Creates a `Corgi` under the `predecessor_account_id`.
    /// Returns the newly generated `Corgi`
    /// The corgi `id` is encoded using base58.
    /// This method is `payable` because the caller needs to cover the cost to mint the corgi.
    /// The corresponding `attached_deposit` must be `MINT_FEE`.
    #[payable]
    pub fn create_corgi(
        &mut self,
        name: String,
        quote: String,
        color: String,
        background_color: String,
    ) -> CorgiDTO {
        let owner = env::predecessor_account_id();
        let deposit = env::attached_deposit();

        if deposit != MINT_FEE {
            panic!("Deposit must be MINT_FEE but was {}", deposit)
        }

        macro_rules! check {
            ($value:ident, $max:expr, $message:expr) => {{
                if $value.len() > $max {
                    env::panic($message.as_bytes());
                }
            }};
        }

        check!(name, 32, "Name too large");
        check!(quote, 256, "Quote too large");
        check!(color, 64, "Color too large");
        check!(background_color, 64, "Backcolor too large");

        let now = env::block_timestamp();
        let key = env::random_seed()[..size_of::<CorgiKey>()]
            .try_into()
            .unwrap();
        let corgi = Corgi {
            id: encode(key),
            name,
            quote,
            color,
            background_color,
            rate: Rarity::from_seed(env::random_seed()),
            owner,
            created: now,
            modified: now,
            sender: "".to_string(),
        };

        CorgiDTO::new(self.push_corgi(key, corgi))
    }

    /// Gets `Corgi` by the given `id`.
    /// Panics if `id` is not found.
    pub fn get_corgi_by_id(&self, id: CorgiId) -> CorgiDTO {
        let (key, corgi) = self.get_corgi(&id);
        self.get_for_sale(key, corgi)
    }

    /// Gets all `Corgi`s owned by the `owner` account id.
    /// Empty `vec` if `owner` does not hold any `Corgi`.
    pub fn get_corgis_by_owner(&self, owner: AccountId) -> Vec<CorgiDTO> {
        match self.corgis_by_owner.get(&owner) {
            None => Vec::new(),
            Some(list) => list
                .into_iter()
                .map(|(key, _)| {
                    let maybe_corgi = self.corgis.get(&key);
                    assert!(maybe_corgi.is_some());

                    let corgi = maybe_corgi.unwrap();
                    assert!(corgi.id == encode(key));
                    assert!(corgi.owner == owner);

                    self.get_for_sale(key, corgi)
                })
                .collect(),
        }
    }

    /// Delete the `Corgi` by its `id`.
    /// Only the `owner` of the `Corgi` can delete it.
    pub fn delete_corgi(&mut self, id: CorgiId) {
        let owner = env::predecessor_account_id();
        self.delete_corgi_from(id, owner);
    }

    /// Internal method to delete the corgi with `id` owned by `owner`.
    /// Panics if `owner` does not own the corgi with `id`.
    fn delete_corgi_from(&mut self, id: CorgiId, owner: AccountId) {
        match self.corgis_by_owner.get(&owner) {
            None => env::panic("You do not have corgis to delete from".as_bytes()),
            Some(mut list) => {
                let key = decode(&id);

                self.panic_if_corgi_is_locked(key);

                if list.remove(&key).is_none() {
                    env::panic("Corgi id does not belong to account".as_bytes());
                }
                self.corgis_by_owner.insert(&owner, &list);

                let was_removed = self.corgis.remove(&key);
                assert!(was_removed.is_some());
            }
        }
    }

    /// Returns a list of all `Corgi`s that have been created.
    /// Number of `Corgi`s returned is limited by `PAGE_LIMIT`.
    pub fn get_global_corgis(&self) -> Vec<CorgiDTO> {
        let mut result = Vec::new();
        for (key, corgi) in &self.corgis {
            if result.len() >= PAGE_LIMIT as usize {
                break;
            }
            result.push(self.get_for_sale(key, corgi));
        }

        result
    }

    /// Transfer the Corgi with the given `id` to `receiver`.
    /// Only the `owner` of the corgi can make such a transfer.
    pub fn transfer_corgi(&mut self, receiver: AccountId, id: CorgiId) {
        if !env::is_valid_account_id(receiver.as_bytes()) {
            env::panic("Invalid receiver account id".as_bytes());
        }

        let sender = env::predecessor_account_id();
        if sender == receiver {
            env::panic("Self transfers are not allowed".as_bytes());
        }

        let (key, corgi) = self.get_corgi(&id);
        assert_eq!(corgi.id, id);

        if sender != corgi.owner {
            env::panic("Sender must own Corgi".as_bytes());
        }

        self.panic_if_corgi_is_locked(key);

        self.move_corgi(key, id, sender, receiver, corgi)
    }

    /// Returns all `Corgi`s currently for sale.
    /// That is, all `Corgi`s which are in auction.
    pub fn get_items_for_sale(&self) -> Vec<CorgiDTO> {
        let mut result = Vec::new();
        for (key, item) in self.auctions.iter() {
            let corgi = self.corgis.get(&key);
            assert!(corgi.is_some());
            let corgi = corgi.unwrap();

            result.push(CorgiDTO::for_sale(corgi, item));
        }
        result
    }

    /// Puts the given `Corgi` for sale.
    /// The `duration` indicates for how long the auction should last, in seconds.
    pub fn add_item_for_sale(&mut self, token_id: CorgiId, duration: u32) -> U64 {
        let (key, corgi) = self.get_corgi(&token_id);
        if corgi.owner != env::predecessor_account_id() {
            env::panic("Only token owner can add item for sale".as_bytes())
        }

        if let None = self.auctions.get(&key) {
            let bids = Dict::new(get_collection_key(AUCTIONS_PREFIX, token_id));
            let expires = env::block_timestamp() + duration as u64 * 1_000_000_000;
            self.auctions.insert(&key, &(bids, expires));

            U64(expires)
        } else {
            env::panic("Corgi already for sale".as_bytes());
        }
    }

    /// Makes a bid for a `Corgi` already in auction.
    /// This is a `payable` method, meaning the contract will escrow the `attached_deposit`
    /// until the auction ends.
    #[payable]
    pub fn bid_for_item(&mut self, token_id: CorgiId) {
        let (key, mut bids, auction_ends) = self.get_auction(&token_id);
        let bidder = env::predecessor_account_id();

        if bidder == self.corgis.get(&key).expect("Corgi not found").owner {
            env::panic("You cannot bid for your own Corgi".as_bytes())
        }

        if env::block_timestamp() > auction_ends {
            env::panic("Auction for corgi has expired".as_bytes())
        }

        let price = env::attached_deposit() + bids.get(&bidder).map(|(p, _)| p).unwrap_or_default();

        let top_price = bids.into_iter().next().map(|(_, (p, _))| p).unwrap_or(0);
        if price <= top_price {
            panic!("Bid {} does not cover top bid {}", price, top_price)
        }

        bids.remove(&bidder);
        bids.push_front(&bidder, (price, env::block_timestamp()));
        self.auctions.insert(&key, &(bids, auction_ends));
    }

    /// Makes a clearance for the given `Corgi`.
    /// Only the corgi `owner` or the highest bidder can end an auction after it expires.
    /// All other bidders can get their money back when calling this method.
    pub fn clearance_for_item(&mut self, token_id: CorgiId) {
        let (key, mut bids, auction_ends) = self.get_auction(&token_id);
        let corgi = {
            let corgi = self.corgis.get(&key);
            assert!(corgi.is_some());
            corgi.unwrap()
        };
        let owner = corgi.owner.clone();
        let end_auction = |it, bidder, price| {
            if env::block_timestamp() <= auction_ends {
                env::panic("Token still in auction".as_bytes())
            }

            self.auctions.remove(&key);

            self.move_corgi(key, token_id, owner.clone(), bidder, corgi);
            Promise::new(owner.clone()).transfer(price);
            for (bidder, (price, _timestamp)) in it {
                Promise::new(bidder).transfer(price);
            }
        };
        let mut it = bids.into_iter();
        let signer = env::predecessor_account_id();
        if signer == owner.clone() {
            if let Some((bidder, (price, _timestamp))) = it.next() {
                end_auction(it, bidder, price);
            } else {
                self.auctions.remove(&key);
            }
        } else {
            if let Some((bidder, (price, _timestamp))) = it.next() {
                if bidder == signer {
                    end_auction(it, bidder, price);
                    return;
                }
            }
            match bids.remove(&signer) {
                None => env::panic("Cannot clear an item if not bidding for it".as_bytes()),
                Some((price, _)) => Promise::new(signer).transfer(price),
            };
        }
    }

    /// Internal method to transfer a corgi.
    fn move_corgi(
        &mut self,
        key: CorgiKey,
        id: CorgiId,
        old_owner: AccountId,
        new_owner: AccountId,
        mut corgi: Corgi,
    ) {
        self.delete_corgi_from(id, old_owner.clone());

        corgi.owner = new_owner;
        corgi.sender = old_owner;
        corgi.modified = env::block_timestamp();
        self.push_corgi(key, corgi);
    }

    /// Gets the `Corgi` with `id`.
    fn get_corgi(&self, id: &CorgiId) -> (CorgiKey, Corgi) {
        let key = decode(id);
        match self.corgis.get(&key) {
            None => env::panic("Given corgi id was not found".as_bytes()),
            Some(corgi) => {
                assert!(corgi.id == *id);
                (key, corgi)
            }
        }
    }

    /// Gets auction information for the `Corgi` with `token_id` or panics.
    fn get_auction(&self, token_id: &CorgiId) -> (CorgiKey, Dict<AccountId, (u128, u64)>, u64) {
        let key = decode(&token_id);
        match self.auctions.get(&key) {
            None => env::panic("Corgi is not available for sale".as_bytes()),
            Some((bids, expires)) => (key, bids, expires),
        }
    }

    /// Gets sale information for a given `Corgi`.
    fn get_for_sale(&self, key: CorgiKey, corgi: Corgi) -> CorgiDTO {
        match self.auctions.get(&key) {
            None => CorgiDTO::new(corgi),
            Some(item) => CorgiDTO::for_sale(corgi, item),
        }
    }

    /// Inserts a `Corgi` into the top the dictionary.
    fn push_corgi(&mut self, key: CorgiKey, corgi: Corgi) -> Corgi {
        env::log("push_corgi".as_bytes());

        let corgi = self.corgis.push_front(&key, corgi);

        let mut ids = self.corgis_by_owner.get(&corgi.owner).unwrap_or_else(|| {
            Dict::new(get_collection_key(
                CORGIS_BY_OWNER_PREFIX,
                corgi.owner.clone(),
            ))
        });
        ids.push_front(&key, ());

        self.corgis_by_owner.insert(&corgi.owner, &ids);

        corgi
    }

    /// Ensures the given `Corgi` with `key` is not for sale.
    fn panic_if_corgi_is_locked(&self, key: CorgiKey) {
        if self.auctions.get(&key).is_some() {
            env::panic("Corgi is currently locked".as_bytes());
        }
    }
}

fn get_collection_key(prefix: &str, mut key: String) -> Vec<u8> {
    key.insert_str(0, prefix);
    key.as_bytes().to_vec()
}

'''
'''--- contract/src/tests.rs ---
use std::{
    cmp::min,
    collections::{HashMap, HashSet},
    ops::{Deref, DerefMut},
    panic::{catch_unwind, AssertUnwindSafe},
};

// mod context;
use std::convert::TryInto;

use near_sdk::{
    bs58, json_types::U64, testing_env, AccountId, MockedBlockchain, VMConfig, VMContext,
};
use near_vm_logic::VMLimitConfig;

use crate::{
    corgi::{Bid, CorgiDTO, CorgiId, ForSale},
    Model, MINT_FEE, PAGE_LIMIT,
};

pub struct MockedContext<T> {
    contract: T,
    pub context: VMContext,
}

impl<T> Deref for MockedContext<T> {
    type Target = T;

    fn deref(&self) -> &Self::Target {
        &self.contract
    }
}

impl<T> DerefMut for MockedContext<T> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        self.update_context();
        &mut self.contract
    }
}

impl<T> MockedContext<T> {
    pub fn new<F>(init: F) -> Self
    where
        F: FnOnce() -> T,
    {
        let context = Self::create_context("".to_string(), 0, &[0; 16], 1);
        Self {
            contract: init(),
            context,
        }
    }

    pub fn run_as<F>(&mut self, account_id: String, action: F) -> &mut Self
    where
        F: FnOnce(&mut MockedContext<T>) -> (),
    {
        self.context.predecessor_account_id = account_id;
        self.update_context();
        action(self);
        self
    }

    pub fn attach_deposit(&mut self, attached_deposit: u128) -> &mut Self {
        self.context.attached_deposit = attached_deposit;
        println!("{}", attached_deposit);
        self
    }

    fn update_context(&mut self) {
        let random_seed = (u128::from_le_bytes(self.context.random_seed[..16].try_into().unwrap())
            + 1)
        .to_ne_bytes()
        .to_vec();
        self.context = Self::create_context(
            self.context.predecessor_account_id.clone(),
            self.context.attached_deposit,
            &random_seed,
            self.context.block_timestamp + 1,
        );
    }

    fn create_context(
        account_id: String,
        attached_deposit: u128,
        random_seed: &[u8],
        now: u64,
    ) -> VMContext {
        let context = VMContext {
            current_account_id: "contract.mock".to_string(),
            signer_account_id: "signer.mock".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id: account_id,
            input: vec![],
            block_index: 0,
            block_timestamp: now,
            account_balance: 100_000,
            account_locked_balance: 100_000,
            // Important to increase storage usage is several items are going to be created.
            // https://github.com/near/near-sdk-rs/issues/159#issuecomment-631847439
            storage_usage: 100_000,
            attached_deposit,
            prepaid_gas: 10u64.pow(18),
            random_seed: random_seed.to_vec(),
            is_view: false,
            output_data_receivers: vec![],
            epoch_height: 19,
        };
        testing_env!(
            context.clone(),
            VMConfig {
                limit_config: VMLimitConfig {
                    max_number_logs: 1000,
                    ..Default::default()
                },
                ..Default::default()
            },
            Default::default()
        );
        context
    }
}

fn alice() -> AccountId {
    "alice.mock".to_string()
}

fn bob() -> AccountId {
    "bob.mock".to_string()
}

fn charlie() -> AccountId {
    "charlie.mock".to_string()
}

fn diana() -> AccountId {
    "diana.mock".to_string()
}

fn any_corgi_id() -> CorgiId {
    bs58::encode(vec![0, 1, 2]).into_string()
}

struct ContractChecker {
    contract: Model,
    ids: Vec<(String, String)>,
}

impl Deref for ContractChecker {
    type Target = Model;
    fn deref(&self) -> &Self::Target {
        &self.contract
    }
}

impl DerefMut for ContractChecker {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.contract
    }
}

fn init_test() -> MockedContext<ContractChecker> {
    MockedContext::new(|| ContractChecker {
        contract: Model::default(),
        ids: Vec::new(),
    })
}

impl MockedContext<ContractChecker> {
    fn predecessor_account_id(&self) -> String {
        self.context.predecessor_account_id.clone()
    }

    fn last_id(&self) -> String {
        self.ids[0].0.clone()
    }

    fn get_id(&self, i: usize) -> String {
        self.ids[i].0.clone()
    }

    fn create_test_corgi(&mut self, i: usize) -> CorgiDTO {
        let name = format!("doggy dog {}", i);
        let quote = "To err is human — to forgive, canine";
        let color = "green";
        let background_color = "blue";

        let corgis_by_owner_count = self
            .get_corgis_by_owner(self.predecessor_account_id())
            .len();

        let new_corgi = self.attach_deposit(MINT_FEE).create_corgi(
            name.clone(),
            quote.into(),
            color.into(),
            background_color.into(),
        );

        println!("Created corgi id: {}", new_corgi.id);

        assert_eq!(new_corgi.name, name);
        assert_eq!(new_corgi.quote, quote);
        assert_eq!(new_corgi.color, color);
        assert_eq!(new_corgi.background_color, background_color);
        assert_eq!(new_corgi.sender, "");
        assert_eq!(new_corgi.owner, self.predecessor_account_id());
        assert_eq!(new_corgi.created, self.context.block_timestamp);
        assert_eq!(new_corgi.modified, self.context.block_timestamp);

        let account = self.predecessor_account_id();
        self.ids.insert(0, (new_corgi.id.clone(), account));

        let corgi_by_id = self.get_corgi_by_id(new_corgi.id.clone());
        assert_eq!(corgi_by_id, new_corgi);

        let global_corgis = self.get_global_corgis();
        assert_eq!(
            global_corgis.len(),
            min(self.ids.len(), PAGE_LIMIT as usize)
        );
        assert_eq!(
            global_corgis.get(0).unwrap(),
            &new_corgi,
            "First retrieved Corgi in global list was not last created Corgi"
        );
        self.check_global_corgis(global_corgis);

        let corgis_by_owner = self.get_corgis_by_owner(self.predecessor_account_id());
        assert_eq!(corgis_by_owner.len(), corgis_by_owner_count + 1);
        assert_eq!(&new_corgi, corgis_by_owner.get(0).unwrap());
        self.check_corgis_by_owner();

        new_corgi
    }

    fn delete_corgi_by_index(&mut self, i: usize) {
        let (id, _) = self.ids[i].clone();
        println!("del {}", id);
        self.delete_corgi(id);
    }

    fn delete_corgi(&mut self, id: String) {
        let corgis_by_owner_count = self
            .get_corgis_by_owner(self.predecessor_account_id())
            .len();

        self.contract.delete_corgi(id.clone());

        let i = self.ids.iter().position(|x| x.0 == id).unwrap();
        self.ids.remove(i);

        let global_corgis = self.get_global_corgis();
        assert_eq!(
            global_corgis.len(),
            min(self.ids.len(), PAGE_LIMIT as usize)
        );
        self.check_global_corgis(global_corgis);
        self.check_corgis_by_owner();

        assert_eq!(
            self.get_corgis_by_owner(self.predecessor_account_id())
                .len(),
            corgis_by_owner_count - 1
        );
        assert!(catch_unwind(|| self.get_corgi_by_id(id.clone())).is_err());
        assert!(catch_unwind(AssertUnwindSafe(|| self.contract.delete_corgi(id.clone()))).is_err());
    }

    fn transfer_corgi(&mut self, receiver: String, id: String) {
        let pre_global_corgis_count = self.get_global_corgis().len();
        let mut pre_corgis_by_receiver = self.get_corgis_by_owner(receiver.clone());
        let pre_corgis_by_sender = self.get_corgis_by_owner(self.predecessor_account_id());

        self.contract.transfer_corgi(receiver.clone(), id.clone());

        let corgi = self.get_corgi_by_id(id.to_string());
        assert_eq!(corgi.owner, receiver);

        let global_corgis = self.get_global_corgis();
        assert_eq!(global_corgis.len(), pre_global_corgis_count);
        assert_eq!(global_corgis.get(0).unwrap(), &corgi);

        assert_eq!(self.get_corgis_by_owner(receiver.clone()), {
            pre_corgis_by_receiver.insert(0, corgi);
            pre_corgis_by_receiver
        });

        assert_eq!(self.get_corgis_by_owner(self.predecessor_account_id()), {
            pre_corgis_by_sender
                .into_iter()
                .filter(|corgi| corgi.id != id)
                .collect::<Vec<CorgiDTO>>()
        });
    }

    fn check_global_corgis(&self, global_corgis: Vec<CorgiDTO>) {
        assert_eq!(
            &global_corgis
                .into_iter()
                .map(|corgi| (corgi.id.clone(), corgi.owner.clone()))
                .collect::<Vec<(String, String)>>(),
            &{
                let mut ids = self.ids.clone();
                ids.truncate(PAGE_LIMIT as usize);
                ids
            }
        );
    }

    fn check_corgis_by_owner(&self) {
        let owners = self
            .ids
            .iter()
            .map(|(_, owner)| owner)
            .collect::<HashSet<&String>>();
        for owner in owners {
            let corgis_by_owner = self.get_corgis_by_owner(owner.clone());
            let ids_by_owner = corgis_by_owner
                .iter()
                .map(|corgi| &corgi.id)
                .collect::<Vec<&String>>();

            let ids = self
                .ids
                .iter()
                .filter(|(_, o)| o == owner)
                .map(|(id, _)| id)
                .collect::<Vec<&String>>();

            assert_eq!(ids_by_owner, ids);
        }
    }
}

#[test]
fn initial_state() {
    init_test().run_as(alice(), |contract| {
        assert_eq!(contract.get_global_corgis().len(), 0);
        assert_eq!(contract.get_corgis_by_owner(alice()).len(), 0);
    });
}

#[test]
#[should_panic(expected = "Could not decode `012`:")]
fn corgi_by_id_should_panic_when_id_is_not_base58() {
    init_test().run_as(alice(), |contract| {
        contract.get_corgi_by_id("012".to_string());
    });
}

#[test]
#[should_panic(expected = "Given corgi id was not found")]
fn should_panic_when_corgi_id_does_not_exist() {
    init_test().run_as(alice(), |contract| {
        contract.get_corgi_by_id(any_corgi_id());
    });
}

#[test]
#[should_panic(expected = "Deposit must be MINT_FEE but was 0")]
fn create_free_corgi_should_panic() {
    init_test().run_as(alice(), |contract| {
        contract
            .attach_deposit(0)
            .create_corgi("N".into(), "Q".into(), "C".into(), "B".into());
    });
}

#[test]
#[should_panic(expected = "Name too large")]
fn should_panic_when_name_is_too_large() {
    init_test().run_as(alice(), |contract| {
        contract.attach_deposit(MINT_FEE).create_corgi(
            ['?'; 32 + 1].iter().collect(),
            "Q".into(),
            "C".into(),
            "B".into(),
        );
    });
}

#[test]
#[should_panic(expected = "Quote too large")]
fn should_panic_when_quote_is_too_large() {
    init_test().run_as(alice(), |contract| {
        contract.attach_deposit(MINT_FEE).create_corgi(
            "N".into(),
            ['?'; 256 + 1].iter().collect(),
            "C".into(),
            "B".into(),
        );
    });
}

#[test]
#[should_panic(expected = "Color too large")]
fn should_panic_when_color_is_too_large() {
    init_test().run_as(alice(), |contract| {
        contract.attach_deposit(MINT_FEE).create_corgi(
            "N".into(),
            "Q".into(),
            ['?'; 64 + 1].iter().collect(),
            "B".into(),
        );
    });
}

#[test]
#[should_panic(expected = "Backcolor too large")]
fn should_panic_when_background_color_is_too_large() {
    init_test().run_as(alice(), |contract| {
        contract.attach_deposit(MINT_FEE).create_corgi(
            "N".into(),
            "Q".into(),
            "C".into(),
            ['?'; 64 + 1].iter().collect(),
        );
    });
}

#[test]
fn create_a_corgi() {
    init_test().run_as(alice(), |contract| {
        contract.create_test_corgi(42);
    });
}

#[test]
fn create_a_few_corgis() {
    init_test().run_as(alice(), |contract| {
        for i in 1..=20 {
            contract.create_test_corgi(i as usize);
        }
    });
}

#[test]
fn create_and_delete_corgi() {
    init_test().run_as(alice(), |contract| {
        for i in 1..=20 {
            contract.create_test_corgi(i as usize);
            contract.delete_corgi(contract.last_id());
        }
    });
}

#[test]
#[should_panic(expected = "You do not have corgis to delete from")]
fn delete_should_panic_when_there_are_no_corgis() {
    init_test().run_as(alice(), |contract| {
        contract.delete_corgi(any_corgi_id());
    });
}

#[test]
#[should_panic(expected = "Corgi id does not belong to account")]
fn delete_should_panic_when_corgi_does_not_exist() {
    init_test().run_as(alice(), |contract| {
        contract.create_test_corgi(42);
        contract.delete_corgi(any_corgi_id());
    });
}

#[test]
fn create_and_delete_a_few_corgis() {
    init_test().run_as(alice(), |contract| {
        for i in 1..=15 {
            contract.create_test_corgi(i);
        }

        contract.delete_corgi_by_index(0);
        contract.delete_corgi_by_index(0);
        contract.delete_corgi_by_index(2);
        contract.delete_corgi_by_index(9);
        contract.delete_corgi_by_index(3);
    });
}

#[test]
fn prevent_to_delete_someone_else_corgi() {
    init_test()
        .run_as(alice(), |contract| {
            contract.create_test_corgi(42);
        })
        .run_as(bob(), |contract| {
            assert!(catch_unwind(AssertUnwindSafe(|| contract.delete_corgi_by_index(0))).is_err());

            let corgis = contract.get_corgis_by_owner(alice());
            assert_eq!(corgis.len(), 1);
            assert_eq!(corgis[0].id, contract.ids[0].0);
        });
}

#[test]
fn transfer_a_corgi() {
    init_test().run_as(alice(), |contract| {
        contract.create_test_corgi(42);
        contract.transfer_corgi(charlie(), contract.last_id());
    });
}

#[test]
fn transfer_a_few_corgis() {
    init_test().run_as(alice(), |contract| {
        for i in 1..=20 {
            contract.create_test_corgi(i);
        }

        contract.transfer_corgi(charlie(), contract.get_id(2));
        contract.transfer_corgi(charlie(), contract.get_id(9));
        contract.transfer_corgi(charlie(), contract.get_id(0));
        contract.transfer_corgi(charlie(), contract.get_id(3));
        contract.transfer_corgi(charlie(), contract.get_id(7));
    });
}

#[test]
#[should_panic(expected = "Self transfers are not allowed")]
fn should_panic_when_self_transfer() {
    init_test().run_as(alice(), |contract| {
        contract.create_test_corgi(42);
        contract.transfer_corgi(alice(), contract.last_id());
    });
}

#[test]
#[should_panic(expected = "Given corgi id was not found")]
fn transfer_nonexistent_corgi_should_panic() {
    init_test().run_as(alice(), |contract| {
        contract.transfer_corgi(charlie(), any_corgi_id());
    });
}

#[test]
#[should_panic(expected = "Sender must own Corgi")]
fn should_panic_when_sender_is_not_owner() {
    init_test().run_as(alice(), |contract| {
        contract.create_test_corgi(42);
        contract.transfer_corgi(charlie(), contract.last_id());
        contract.transfer_corgi(charlie(), contract.last_id());
    });
}

#[test]
#[should_panic(expected = "Invalid receiver account id")]
fn should_panic_when_transfer_receiver_is_invalid() {
    init_test().run_as(alice(), |contract| {
        contract.create_test_corgi(42);
        contract.transfer_corgi("invalid.mock.".into(), contract.last_id());
    });
}

#[test]
fn market_starts_empty() {
    init_test().run_as(alice(), |contract| {
        assert_eq!(contract.get_items_for_sale(), vec!());
    });
}

const DURATION: u32 = 60 * 60 * 24;

#[test]
#[should_panic(expected = "Given corgi id was not found")]
fn add_non_existent_item_for_sale_should_panic() {
    init_test().run_as(alice(), |contract| {
        contract.add_item_for_sale(any_corgi_id(), DURATION);
    });
}

#[test]
#[should_panic(expected = "Only token owner can add item for sale")]
fn add_item_for_sale_from_non_owner_should_panic() {
    init_test()
        .run_as(alice(), |contract| {
            contract.create_test_corgi(42);
        })
        .run_as(bob(), |contract| {
            let id = contract.ids[0].0.clone();
            contract.add_item_for_sale(id, DURATION);
        });
}

#[test]
#[should_panic(expected = "Corgi already for sale")]
fn add_item_for_sale_twice_should_panic() {
    init_test().run_as(alice(), |contract| {
        let id = contract.create_test_corgi(42).id.clone();
        contract.add_item_for_sale(id.clone(), DURATION);
        contract.add_item_for_sale(id.clone(), DURATION);
    });
}

#[test]
#[should_panic(expected = "Corgi is not available for sale")]
fn bid_for_non_existent_item_should_panic() {
    init_test().run_as(alice(), |contract| {
        contract.bid_for_item(any_corgi_id());
    });
}

#[test]
#[should_panic(expected = "You cannot bid for your own Corgi")]
fn bid_for_my_own_corgi_should_panic() {
    init_test().run_as(alice(), |contract| {
        let id = contract.create_test_corgi(42).id.clone();
        contract.add_item_for_sale(id.clone(), DURATION);
        contract.bid_for_item(id.clone());
    });
}

#[test]
#[should_panic(expected = "Auction for corgi has expired")]
fn expired_bid_should_panic() {
    let mut id = String::new();
    init_test()
        .run_as(alice(), |contract| {
            id = contract.create_test_corgi(42).id.clone();
            contract.add_item_for_sale(id.clone(), DURATION);
        })
        .run_as(bob(), |contract| {
            contract.context.block_timestamp += 60 * 60 * 24 * 1_000_000_000 + 60;
            contract.bid_for_item(id.clone());
        });
}

#[test]
#[should_panic(expected = "Bid 0 does not cover top bid 0")]
fn zero_bid_should_panic() {
    let mut id = String::new();
    init_test()
        .run_as(alice(), |contract| {
            id = contract.create_test_corgi(42).id.clone();
            contract.add_item_for_sale(id.clone(), DURATION);
        })
        .run_as(bob(), |contract| {
            contract.context.attached_deposit = 0;
            contract.bid_for_item(id.clone());
        });
}

#[test]
#[should_panic(expected = "Bid 1000 does not cover top bid 1000")]
fn equal_bid_should_panic() {
    let mut id = String::new();
    init_test()
        .run_as(alice(), |contract| {
            id = contract.create_test_corgi(42).id.clone();
            contract.add_item_for_sale(id.clone(), DURATION);
        })
        .run_as(bob(), |contract| {
            contract.context.attached_deposit = 1000;
            contract.bid_for_item(id.clone());
        })
        .run_as(charlie(), |contract| {
            contract.context.attached_deposit = 1000;
            contract.bid_for_item(id.clone());
        });
}

#[test]
#[should_panic(expected = "Bid 900 does not cover top bid 1000")]
fn smaller_bid_should_panic() {
    let mut id = String::new();
    init_test()
        .run_as(alice(), |contract| {
            id = contract.create_test_corgi(42).id.clone();
            contract.add_item_for_sale(id.clone(), DURATION);
        })
        .run_as(bob(), |contract| {
            contract.context.attached_deposit = 1000;
            contract.bid_for_item(id.clone());
        })
        .run_as(charlie(), |contract| {
            contract.context.attached_deposit = 900;
            contract.bid_for_item(id.clone());
        });
}

#[test]
#[should_panic(expected = "Bid 900 does not cover top bid 1000")]
fn smaller_2nd_bid_should_panic() {
    let mut id = String::new();
    init_test()
        .run_as(alice(), |contract| {
            id = contract.create_test_corgi(42).id.clone();
            contract.add_item_for_sale(id.clone(), DURATION);
        })
        .run_as(bob(), |contract| {
            contract.context.attached_deposit = 500;
            contract.bid_for_item(id.clone());
        })
        .run_as(charlie(), |contract| {
            contract.context.attached_deposit = 1000;
            contract.bid_for_item(id.clone());
        })
        .run_as(bob(), |contract| {
            contract.context.attached_deposit = 400;
            contract.bid_for_item(id.clone());
        });
}

#[test]
#[should_panic(expected = "Corgi is not available for sale")]
fn clearance_for_non_existent_item_should_panic() {
    init_test().run_as(alice(), |contract| {
        contract.clearance_for_item(any_corgi_id());
    });
}

#[test]
#[should_panic(expected = "Cannot clear an item if not bidding for it")]
fn clearance_for_non_bidder_should_panic() {
    let mut token_id = String::new();
    init_test()
        .run_as(alice(), |contract| {
            token_id = contract.create_test_corgi(42).id.clone();
            contract.add_item_for_sale(token_id.clone(), DURATION);
        })
        .run_as(bob(), |contract| {
            contract.clearance_for_item(token_id.clone());
        });
}

#[test]
#[should_panic(expected = "Token still in auction")]
fn highest_bid_withdraw_should_panic_while_in_auction() {
    let mut token_id = String::new();
    init_test()
        .run_as(alice(), |contract| {
            token_id = contract.create_test_corgi(42).id.clone();
            contract.add_item_for_sale(token_id.clone(), DURATION);
        })
        .run_as(bob(), |contract| {
            contract.context.attached_deposit = 100;
            contract.bid_for_item(token_id.clone());
            contract.clearance_for_item(token_id.clone());
        });
}

#[test]
fn highest_bid_can_end_auction_after_expired() {
    let mut token_id = String::new();
    init_test()
        .run_as(alice(), |contract| {
            token_id = contract.create_test_corgi(42).id.clone();
            contract.add_item_for_sale(token_id.clone(), DURATION);
        })
        .run_as(bob(), |contract| {
            contract.context.attached_deposit = 100;
            contract.bid_for_item(token_id.clone());

            contract.context.block_timestamp += 60 * 60 * 24 * 1_000_000_000 + 60;
            contract.clearance_for_item(token_id.clone());
            assert_eq!(contract.get_items_for_sale(), vec!());
            assert_eq!(contract.get_corgi_by_id(token_id.clone()).owner, bob());
            assert_eq!(contract.get_corgi_by_id(token_id.clone()).for_sale, None);
        });
}

#[test]
#[should_panic(expected = "Token still in auction")]
fn clear_ongoing_auction_with_bids_should_panic() {
    let mut token_id = String::new();
    init_test()
        .run_as(alice(), |contract| {
            token_id = contract.create_test_corgi(42).id.clone();
            contract.add_item_for_sale(token_id.clone(), DURATION);
        })
        .run_as(bob(), |contract| {
            contract.context.attached_deposit = 100;
            contract.bid_for_item(token_id.clone());
        })
        .run_as(alice(), |contract| {
            contract.clearance_for_item(token_id.clone());
        });
}

#[test]
fn bigger_2nd_bid_tops_bidding() {
    let mut id = String::new();
    let mut auction_ends = U64(0);
    let mut timestamps = HashMap::new();

    init_test()
        .run_as(alice(), |contract| {
            id = contract.create_test_corgi(42).id.clone();
            auction_ends = contract.add_item_for_sale(id.clone(), DURATION);
        })
        .run_as(bob(), |contract| {
            contract.context.attached_deposit = 400;
            contract.bid_for_item(id.clone());
        })
        .run_as(charlie(), |contract| {
            contract.context.attached_deposit = 600;
            contract.bid_for_item(id.clone());
            timestamps.insert(charlie(), contract.context.block_timestamp);
        })
        .run_as(bob(), |contract| {
            contract.context.attached_deposit = 500;
            contract.bid_for_item(id.clone());
            timestamps.insert(bob(), contract.context.block_timestamp);

            check_items_for_sale(
                contract,
                vec![
                    Bid::new(bob(), 900, timestamps[(&bob())]),
                    Bid::new(charlie(), 600, timestamps[&charlie()]),
                ],
            );
        });
}

fn check_items_for_sale(contract: &Model, bids: Vec<Bid>) {
    assert_eq!(
        contract.get_items_for_sale()[0]
            .for_sale
            .as_ref()
            .unwrap()
            .bids,
        bids
    );
}

#[test]
fn market_auction_item() {
    let mut token_id = String::new();
    let mut timestamps = HashMap::new();
    let mut auction_ends = U64(0);

    init_test()
        .run_as(alice(), |contract| {
            token_id = contract.create_test_corgi(42).id.clone();
            auction_ends = contract.add_item_for_sale(token_id.clone(), DURATION);

            assert_eq!(contract.get_items_for_sale()[0].id, token_id);
            assert_eq!(
                contract.get_items_for_sale()[0].for_sale.as_ref().unwrap(),
                &ForSale {
                    bids: vec!(),
                    expires: auction_ends,
                }
            );
        })
        .run_as(bob(), |contract| {
            contract.context.attached_deposit = 400;
            contract.bid_for_item(token_id.clone());
            timestamps.insert(bob(), contract.context.block_timestamp);

            check_items_for_sale(contract, vec![Bid::new(bob(), 400, timestamps[&bob()])]);
        })
        .run_as(charlie(), |contract| {
            contract.context.attached_deposit = 600;
            contract.bid_for_item(token_id.clone());
            timestamps.insert(charlie(), contract.context.block_timestamp);

            check_items_for_sale(
                contract,
                vec![
                    Bid::new(charlie(), 600, timestamps[&charlie()]),
                    Bid::new(bob(), 400, timestamps[(&bob())]),
                ],
            );

            contract.context.attached_deposit = 200;
            contract.bid_for_item(token_id.clone());
            timestamps.insert(charlie(), contract.context.block_timestamp);

            check_items_for_sale(
                contract,
                vec![
                    Bid::new(charlie(), 800, timestamps[&charlie()]),
                    Bid::new(bob(), 400, timestamps[(&bob())]),
                ],
            );
        })
        .run_as(diana(), |contract| {
            contract.context.attached_deposit = 900;
            contract.bid_for_item(token_id.clone());
            timestamps.insert(diana(), contract.context.block_timestamp);

            check_items_for_sale(
                contract,
                vec![
                    Bid::new(diana(), 900, timestamps[&diana()]),
                    Bid::new(charlie(), 800, timestamps[&charlie()]),
                    Bid::new(bob(), 400, timestamps[&bob()]),
                ],
            );
        })
        .run_as(bob(), |contract| {
            contract.context.attached_deposit = 700;
            contract.bid_for_item(token_id.clone());
            timestamps.insert(bob(), contract.context.block_timestamp);

            check_items_for_sale(
                contract,
                vec![
                    Bid::new(bob(), 1100, timestamps[&bob()]),
                    Bid::new(diana(), 900, timestamps[&diana()]),
                    Bid::new(charlie(), 800, timestamps[&charlie()]),
                ],
            );
        })
        .run_as(diana(), |contract| {
            contract.clearance_for_item(token_id.clone());

            check_items_for_sale(
                contract,
                vec![
                    Bid::new(bob(), 1100, timestamps[&bob()]),
                    Bid::new(charlie(), 800, timestamps[&charlie()]),
                ],
            );
        })
        .run_as(alice(), |contract| {
            let token_id = contract.ids[0].0.clone();
            contract.context.block_timestamp += 60 * 60 * 24 * 1_000_000_000 + 60;
            contract.clearance_for_item(token_id.clone());

            assert_eq!(contract.get_items_for_sale(), vec!());
            assert_eq!(contract.get_corgi_by_id(token_id.clone()).owner, bob());
            assert_eq!(contract.get_corgi_by_id(token_id.clone()).for_sale, None);
        });
}

#[test]
#[should_panic(expected = "Corgi is currently locked")]
fn transfer_an_item_for_sale_should_panic() {
    init_test().run_as(alice(), |contract| {
        let token_id = contract.create_test_corgi(42).id.clone();
        contract.add_item_for_sale(token_id.clone(), DURATION);
        contract.transfer_corgi(bob(), token_id);
    });
}

#[test]
#[should_panic(expected = "Corgi is currently locked")]
fn delete_an_item_for_sale_should_panic() {
    init_test().run_as(alice(), |contract| {
        let token_id = contract.create_test_corgi(42).id.clone();
        contract.add_item_for_sale(token_id.clone(), DURATION);
        contract.delete_corgi(token_id);
    });
}

'''
'''--- package.json ---
{
    "name": "new-corgi",
    "version": "0.1.0",
    "private": true,
    "scripts": {
        "build:contract": "cd contract && cargo build --target wasm32-unknown-unknown --release",
        "test:contract": "cd contract && cargo test",
        "dev-deploy:contract": "rm -rf neardev/ && near dev-deploy --wasmFile contract/target/wasm32-unknown-unknown/release/corgis_nft.wasm",
        "api-test:contract": "CONTRACT_NAME=`cat neardev/dev-account` jest api.test.js --env=node --runInBand --testTimeout=500000",
        "deploy:contract": "near deploy --wasmFile contract/target/wasm32-unknown-unknown/release/corgis_nft.wasm",
        "build:web": "NODE_ENV=testnet parcel build src/index.html --public-url ./",
        "deploy:web": "gh-pages --dist dist",
        "build": "yarn build:contract && yarn build:web",
        "deploy": "yarn build && yarn deploy:contract && yarn deploy:web",
        "dev-start": "yarn build:contract && yarn dev-deploy:contract && CONTRACT_NAME=`cat neardev/dev-account` parcel src/index.html",
        "start": "yarn build:contract && yarn deploy:contract && parcel src/index.html",
        "test": "yarn test:contract && yarn build:contract && jest test --runInBand",
        "lint": "eslint --ext js,jsx src",
        "lint:file": "eslint",
        "lint:fix": "yarn lint -- --fix",
        "lint:fix:dry": "yarn lint -- --fix-dry-run"
    },
    "dependencies": {
        "@babel/runtime": "^7.10.4",
        "@fortawesome/fontawesome-svg-core": "^1.2.32",
        "@fortawesome/free-solid-svg-icons": "^5.15.2",
        "@fortawesome/react-fontawesome": "^0.1.14",
        "bad-words": "^3.0.4",
        "big.js": "^5.2.2",
        "bootstrap": "^5.0.0-beta2",
        "classnames": "^2.2.6",
        "gh-pages": "^3.1.0",
        "humanize-duration": "^3.25.1",
        "near-api-js": "0.37.0",
        "project-name-generator": "^2.1.7",
        "prop-types": "^15.7.2",
        "randomcolor": "^0.5.4",
        "react": ">=16.x",
        "react-color": "^2.19.3",
        "react-dom": "^17.0.1",
        "react-router-dom": "5.2.0",
        "react-scripts": "4.0.1",
        "regenerator-runtime": "^0.13.5",
        "save-svg-as-png": "^1.4.17",
        "sharethis-reactjs": "^1.6.0",
        "tinycolor2": "^1.4.1",
        "uuid": "^8.3.2"
    },
    "devDependencies": {
        "@babel/core": "^7.0.0-0",
        "@babel/plugin-proposal-class-properties": "^7.8.3",
        "@babel/plugin-transform-runtime": "^7.10.4",
        "@babel/preset-react": "^7.12.10",
        "autobahn": "^20.9.2",
        "babel-jest": "^26.0.0",
        "bn.js": "^5.2.0",
        "bs58": "^4.0.1",
        "chalk": "^4.1.0",
        "chart.js": "^2.9.4",
        "eslint": "^7.19.0",
        "eslint-config-airbnb": "^18.2.1",
        "eslint-config-prettier": "^7.2.0",
        "eslint-plugin-import": "^2.22.1",
        "eslint-plugin-jsx": "^0.1.0",
        "eslint-plugin-prettier": "^3.3.1",
        "eslint-plugin-react": "^7.22.0",
        "eslint-plugin-react-hooks": "^4.2.0",
        "jest": "^26.6.3",
        "jest-environment-node": "^26.6.2",
        "js-sha256": "^0.9.0",
        "near-cli": "^1.5.4",
        "near-seed-phrase": "^0.1.1",
        "node-sass": "^5.0.0",
        "parcel-bundler": "^1.12.4",
        "prettier": "^2.2.1",
        "react-test-renderer": "^17.0.1"
    },
    "babel": {
        "presets": [
            "@babel/preset-env",
            "@babel/preset-react"
        ],
        "plugins": [
            [
                "@babel/plugin-transform-runtime",
                {
                    "absoluteRuntime": false,
                    "corejs": false,
                    "helpers": true,
                    "regenerator": true,
                    "useESModules": false,
                    "version": "7.0.0-beta.0"
                }
            ]
        ]
    },
    "babelrc": {
        "presets": [
            [
                "env",
                {
                    "targets": {
                        "browsers": [
                            "last 2 Chrome versions"
                        ]
                    }
                }
            ]
        ]
    },
    "eslintConfig": {
        "extends": "react-app"
    },
    "jest": {
        "moduleNameMapper": {
            "\\.(jpg|ico|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/src/__mocks__/fileMock.js",
            "\\.(css|less)$": "<rootDir>/src/__mocks__/fileMock.js"
        },
        "setupFiles": [
            "<rootDir>/src/jest.init.js"
        ],
        "testEnvironment": "near-shell/test_environment",
        "testPathIgnorePatterns": [
            "<rootDir>/assembly/",
            "<rootDir>/node_modules/"
        ]
    },
    "browserslist": {
        "production": [
            ">0.2%",
            "not dead",
            "not op_mini all"
        ],
        "development": [
            "last 1 Chrome versions",
            "last 1 firefox version",
            "last 1 safari version"
        ]
    }
}

'''
'''--- src/.sassrc.js ---
const path = require('path');

module.exports = {
  includePaths: [path.resolve(process.cwd(), 'src', 'styles')],
};

'''
'''--- src/assets/images/arrow.svg ---
<svg width="15px" height="15px" viewBox="0 0 15 15" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink">
                    <g id="Page-1" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
                        <g id="create" transform="translate(-110.000000, -548.000000)" fill="#24272A">
                            <polygon id="Fill-1-Copy" points="128 548 110 566 128 566"></polygon>
                        </g>
                    </g>
                </svg>
'''
'''--- src/assets/images/egg.svg ---
                <svg width="147px" height="146px" viewBox="0 0 147 146" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink">
                    <g id="Page-1" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
                        <g id="gen1" transform="translate(-782.000000, -1123.000000)">
                            <g id="c-phase1-(1)" transform="translate(783.000000, 1124.000000)">
                                <ellipse id="Oval" fill="#FFFFFF" fillRule="nonzero" cx="72.2491349" cy="72" rx="72.2491349" ry="72"></ellipse>
                                <path d="M72.2491349,-3.04063978e-06 C44.9984819,-0.00657451501 20.0624063,15.2673463 7.76176471,39.499997 C12.5081315,57.27 23.9626298,74.095 51.367128,62.499997 C101.770934,41.155 139.576298,79.665 65.6463668,88.455 C7.08442907,95.42 50.0024221,139.68 111.925952,132.185 C138.620485,114.717056 150.640691,81.8562541 141.488774,51.3662523 C132.336856,20.8762505 104.184106,-0.00920366646 72.2491349,-3.04063978e-06 Z" id="Path" fill={color} fillRule="nonzero"></path>
                                <ellipse id="Oval" stroke="#24272A" strokeWidth="2" cx="72.2491349" cy="72" rx="72.2491349" ry="72"></ellipse>
                            </g>
                        </g>
                    </g>
                </svg>
'''
'''--- src/assets/images/good-bye.svg ---
<svg className="spinning" width="300" height="284" viewBox="0 0 338 284" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink">
    <g id="Page-1" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
        <g id="gen1" transform="translate(-1012.000000, -1220.000000)">
            <g id="c-phase4-(1)" transform="translate(1012.000000, 1220.000000)">
                <ellipse id="Oval" fill="#FFFFFF" fillRule="nonzero" cx="151.092298" cy="154.080891" rx="100.770186" ry="100.871287"></ellipse>
                <path d="M119.846542,58.1831188 C83.7006954,69.9758448 57.2616114,101.127791 51.4767702,138.74005 C65.4726294,160.350322 87.9709731,177.799653 119.272712,150.480347 C176.851677,100.226832 243.688903,135.153515 149.475776,178.864406 C74.8358592,213.489876 150.959337,253.866411 229.819006,217.076411 C257.640784,182.254868 259.322666,133.279756 233.955394,96.6279515 C208.588123,59.9761466 162.190736,44.3442325 119.846542,58.1831188 Z" id="Path" fill="#000000" fillRule="nonzero"></path>
                <ellipse id="Oval" stroke="#24272A" strokeWidth="2.8" cx="151.092298" cy="154.080891" rx="100.770186" ry="100.871287"></ellipse>
                <path d="M202.779006,227.282624 C202.779006,227.282624 271.554658,190.856881 278.13971,127.812327 C284.724762,64.7677723 278.839503,46.7580446 278.839503,46.7580446 C278.839503,46.7580446 342.422692,89.6003218 328.104928,169.421733 L336.397474,167.110099 C336.397474,167.110099 291.176853,239.303119 211.134534,236.459109 C211.190518,236.438094 193.324803,231.28245 202.779006,227.282624 L202.779006,227.282624 Z" id="Path" fill="#FFFFFF" fillRule="nonzero"></path>
                <path d="M290.484058,184.426337 L283.92,186.569851 C311.295901,165.120693 309.553416,124.611064 309.553416,124.611064 C308.138583,126.732534 306.319343,128.553599 304.2,129.969851 C308.307785,103.603218 287.90882,63.955198 279.35735,48.7824752 C280.616977,54.9818564 283.500124,76.4380198 278.13971,127.805322 C272.35942,183.144431 218.657308,217.987054 205.627164,225.66448 C261.498634,225.139109 290.484058,184.426337 290.484058,184.426337 L290.484058,184.426337 Z" id="Path" fill="#000000" fillRule="nonzero"></path>
                <path d="M202.779006,227.282624 C206.599876,225.118094 210.280787,222.722401 213.877723,220.228639 C217.474658,217.734876 221.008613,215.12203 224.437598,212.390099 C227.866584,209.658168 231.1906,206.786139 234.430642,203.865074 C237.670683,200.94401 240.777764,197.833812 243.772878,194.646559 C246.767992,191.459307 249.644141,188.159975 252.338344,184.720545 C255.032547,181.281114 257.600787,177.750619 260.036066,174.129059 C264.807949,166.82637 268.742296,159.008527 271.764596,150.823589 C274.734553,142.63207 276.58476,134.07629 277.264969,125.388614 C277.649855,121.017525 278.090725,116.660446 278.384638,112.282351 L278.895487,105.732723 L279.294369,99.1690842 C279.784224,90.4269059 280.092133,81.6567079 279.994161,72.9285396 C279.952174,70.742995 279.938178,68.5574505 279.826211,66.3789109 C279.714244,64.2003713 279.609275,62.0218317 279.462319,59.8432921 C279.315362,57.6647525 279.077433,55.5142327 278.797516,53.3637129 C278.650559,52.2989604 278.496605,51.2622277 278.30766,50.1694554 C278.202692,49.6510891 278.118716,49.1117079 277.999752,48.6073515 C277.880787,48.102995 277.761822,47.549604 277.635859,47.1363119 L277.635859,47.0802723 C277.475171,46.548275 277.669299,45.9728135 278.119283,45.6472353 C278.569267,45.3216572 279.176031,45.3176484 279.630269,45.6372525 C282.107536,47.3674752 284.353872,49.1957673 286.628199,51.1081188 C288.902526,53.0204703 291.015901,55.0028713 293.094286,57.0763366 C297.279814,61.1849317 301.195182,65.5605043 304.815818,70.1755941 C312.088195,79.4154011 318.057307,89.6119641 322.555569,100.47901 C324.7738,105.917947 326.602546,111.508007 328.02795,117.206832 L329.014658,121.500866 C329.336563,122.936881 329.546501,124.386906 329.812422,125.829926 L330.197308,128.00146 C330.309275,128.701955 330.379255,129.45849 330.470228,130.187005 L331.00207,134.558094 C332.007753,146.253565 331.461835,158.030848 329.378551,169.582847 L327.866998,168.181856 L336.159545,165.884233 C336.791302,165.709395 337.445319,166.079019 337.622112,166.710817 C337.711326,167.037972 337.655214,167.387749 337.468157,167.670495 C335.725673,170.353391 333.878219,172.854158 331.946791,175.333911 C330.015362,177.813663 328.020952,180.237376 325.956563,182.57703 C321.826508,187.318497 317.4564,191.844962 312.863437,196.138614 C308.284722,200.405559 303.481991,204.4251 298.475694,208.180124 C293.479714,211.956038 288.25639,215.420694 282.835321,218.554455 C272.021199,224.860365 260.384399,229.631972 248.258551,232.732475 C247.502774,232.921609 246.753996,233.138762 245.991222,233.313886 L243.702899,233.790223 C242.170352,234.098441 240.651801,234.455693 239.112257,234.721881 C236.02617,235.170198 232.961077,235.751609 229.846998,235.975767 C223.647941,236.586117 217.413241,236.752324 211.190518,236.473119 C217.408218,236.577876 223.625679,236.25019 229.798012,235.492426 C232.891097,235.212228 235.935197,234.567772 238.993292,234.091436 C240.511843,233.797228 242.016398,233.390941 243.534948,233.075718 L245.802277,232.557351 C246.551056,232.368218 247.292836,232.137054 248.041615,231.933911 L252.506294,230.645 L256.907992,229.152946 C258.384555,228.683614 259.812133,228.081188 261.260704,227.513787 C262.709275,226.946386 264.150849,226.41401 265.557433,225.74854 L269.75619,223.843193 L273.905963,221.741708 C275.305549,221.076238 276.642153,220.298688 277.999752,219.549158 C279.35735,218.799629 280.721946,218.071114 282.030559,217.24453 C287.370528,214.077701 292.507679,210.580092 297.412008,206.772129 C302.322824,202.999942 307.027553,198.966278 311.505839,194.688589 C315.979164,190.41286 320.232399,185.912206 324.249068,181.204059 C326.259807,178.869076 328.200566,176.464043 330.071346,173.98896 C331.925797,171.530223 333.766253,169.008441 335.410766,166.465644 L336.740373,168.251906 L328.454824,170.584554 C327.813491,170.764421 327.147462,170.391947 326.964265,169.750965 C326.926196,169.575552 326.926196,169.394002 326.964265,169.218589 C328.961709,157.872863 329.451143,146.312505 328.419834,134.838292 L327.880994,130.565272 C327.783023,129.864777 327.713043,129.164282 327.601077,128.428762 L327.21619,126.327277 C326.950269,124.926287 326.740331,123.525297 326.425424,122.124307 L325.438716,117.921337 C324.024096,112.354012 322.214024,106.89494 320.022319,101.585792 C315.548829,90.9844789 309.691922,81.0231659 302.604472,71.9618564 C299.068698,67.4237621 295.247051,63.1162941 291.162857,59.0657426 C289.133458,57.0343069 287.013085,55.0869307 284.86472,53.202599 C282.716356,51.3182673 280.442029,49.4969802 278.167702,47.8928465 L280.141118,46.4007921 C280.330062,47.0382426 280.449027,47.5566089 280.567992,48.1240099 C280.686957,48.6914109 280.784928,49.237797 280.889896,49.7911881 C281.085839,50.8979703 281.239793,51.9977475 281.386749,53.1045297 C281.666667,55.3180941 281.869607,57.5246535 282.037557,59.7312129 C282.205507,61.9377723 282.317474,64.1513366 282.380455,66.357896 C282.443437,68.5644554 282.492422,70.7710149 282.527412,72.9775743 C282.604389,81.7968069 282.254493,90.6020297 281.736646,99.3862376 C281.218799,108.170446 280.407039,116.940644 279.483313,125.689827 C278.674515,134.531416 276.678451,143.223474 273.549068,151.531089 C270.384578,159.80344 266.297585,167.691894 261.365673,175.046708 C256.408571,182.338741 250.798752,189.16403 244.605631,195.438119 C241.526542,198.590347 238.307495,201.602475 235.025466,204.544554 C231.743437,207.486634 228.314451,210.225569 224.822484,212.90146 C217.859238,218.261409 210.489075,223.069703 202.779006,227.282624 L202.779006,227.282624 Z" id="Path" fill="#231F20" fillRule="nonzero"></path>
                <path d="M147.341408,60.6488614 C144.640207,49.3708911 132.162899,38.7794059 132.162899,38.7794059 C128.47499,27.4173762 110.952174,-1.4710396 93.3873706,2.01742574 C75.8225673,5.50589109 89.4125466,37.9598267 91.0500621,47.9839109 C92.6875776,58.007995 88.4538302,59.4790347 88.4538302,59.4790347 C90.5556311,60.4980821 92.0490379,62.4557579 92.4776398,64.7537624 C85.5986749,70.1125495 77.446087,77.9020545 65.9484886,84.7809158 C61.3438509,84.2695545 49.2444306,83.5200248 41.6026915,78.812698 C31.7286128,72.7183911 8.71242236,64.4385396 2.883147,74.6097277 C-2.94612836,84.7809158 15.3534576,105.634653 15.3534576,105.634653 C15.3534576,105.634653 22.267412,112.240322 22.3093996,115.098342 C22.3093996,115.098342 26.3052174,115.532649 30.7069151,119.427401 C34.5207867,122.810792 41.9036025,137.878441 52.5754451,138.508886" id="Path" fill="#000000" fillRule="nonzero"></path>
                <path d="M147.341408,60.6488614 C146.721566,58.4897577 145.864938,56.4059456 144.787164,54.4354703 C143.673729,52.4888541 142.434805,50.6169045 141.078261,48.8315099 C139.714248,47.0551806 138.256611,45.3528975 136.711553,43.7319059 C135.177049,42.1115086 133.560748,40.5707414 131.868986,39.1156436 L131.778012,39.0385891 L131.729027,38.9125 C130.885692,36.574389 129.877796,34.2990794 128.712919,32.1036881 C127.565259,29.8901238 126.312629,27.732599 124.976025,25.6311139 C122.334053,21.416837 119.317363,17.4499418 115.962692,13.7787376 C112.589689,10.1781931 108.789814,6.89287129 104.437101,4.74935644 C102.301161,3.67451113 99.9813957,3.01377239 97.6001242,2.8019802 C95.28754,2.59877878 92.9624342,3.01206226 90.861118,3.99982673 C90.3676857,4.26516177 89.8992476,4.57464112 89.4615321,4.9244802 C89.2585921,5.11361386 89.0276605,5.26071782 88.8387164,5.47086634 L88.2928778,6.08730198 C87.5873104,6.96649497 87.0402791,7.96209526 86.6763561,9.02938119 C85.9371307,11.2877975 85.6030754,13.6593611 85.689648,16.0343317 C85.7456315,20.8887624 86.7253416,25.7852228 87.8869979,30.6116337 C89.0486542,35.4380446 90.5462112,40.2014109 91.7988406,45.1469059 C92.111237,46.4131121 92.3449492,47.6974793 92.4986335,48.9926238 C92.6770033,50.3109647 92.7495474,51.6414937 92.7155694,52.9714356 C92.6837004,54.3723718 92.4334237,55.7597285 91.9737888,57.0833416 C91.8458841,57.4298848 91.6986972,57.768988 91.5329193,58.0990594 C91.3485642,58.4386599 91.1428788,58.766215 90.9171014,59.0797525 C90.6780324,59.4121992 90.400893,59.7154775 90.0913458,59.9833911 C89.9313309,60.1291492 89.7605638,60.2626216 89.5804969,60.3826733 C89.3625469,60.535291 89.1277291,60.6622199 88.8807039,60.7609406 L88.9996687,58.2321535 C90.2621078,58.8043215 91.3562122,59.6920624 92.1767288,60.8099752 C92.9609754,61.8994313 93.5178955,63.1358907 93.8142443,64.4455446 L94.0241822,65.2931436 L93.3243892,65.8465347 C89.0206625,69.2369307 84.8428986,72.9285396 80.4551967,76.3539604 C76.0625352,79.8395783 71.4532979,83.042609 66.6552795,85.9437376 L66.2633954,86.174901 L65.7805383,86.1608911 C61.4895322,85.8020096 57.221395,85.2080334 52.9953209,84.3816337 C50.8617216,83.9320053 48.7582503,83.349461 46.6971843,82.637401 C44.5946004,81.9269791 42.5764059,80.9873422 40.6789648,79.8354208 C37.092955,77.6827787 33.3140034,75.8699701 29.3913043,74.4205941 C25.4979379,72.9242419 21.4486131,71.8715361 17.3198758,71.2823762 C15.2999597,71.004251 13.2547899,70.9595929 11.2246791,71.1492822 C9.2918992,71.2964097 7.43038195,71.9432842 5.82227743,73.0266089 C5.07393473,73.5755885 4.43735684,74.2627362 3.9468323,75.0510396 C3.46209751,75.8508506 3.13211367,76.7348589 2.97412008,77.6568812 C2.69176584,79.6264281 2.82527228,81.6333595 3.36600414,83.5480446 C4.54717376,87.5514963 6.29327844,91.3656447 8.55146998,94.8750495 C10.7713619,98.4657235 13.2481086,101.890762 15.9622774,105.123292 L15.9202899,105.081262 C17.3531512,106.493446 18.7103163,107.980577 19.986087,109.536411 C20.6318966,110.325884 21.2323543,111.151465 21.7845549,112.009158 C22.0650275,112.458948 22.315177,112.926986 22.5333333,113.410149 C22.7823535,113.941513 22.934049,114.513315 22.9812008,115.098342 L22.3933747,114.460891 C24.0841228,114.794755 25.7068728,115.410409 27.1939545,116.282178 C28.6666001,117.116896 30.0319611,118.128418 31.2597516,119.294307 C32.381271,120.532726 33.4148247,121.848201 34.3528364,123.231089 C35.3045549,124.57604 36.2562733,125.913985 37.2359834,127.223911 C39.1539533,129.87252 41.3575989,132.301546 43.8070393,134.46703 C45.045504,135.533561 46.4083417,136.446167 47.8658385,137.18495 C49.3371896,137.911882 50.9282211,138.365223 52.5614493,138.522896 C50.911708,138.428965 49.2924989,138.037402 47.7818634,137.367079 C46.284955,136.672113 44.8755507,135.802108 43.5831056,134.775248 C41.0291492,132.667392 38.7236048,130.274929 36.7111387,127.644208 C35.6824431,126.355297 34.6887371,125.038366 33.6950311,123.735446 C32.7518223,122.420783 31.7158141,121.17539 30.5949482,120.008812 C29.4038791,118.942837 28.0879799,118.025488 26.6761077,117.276881 C25.3001592,116.527807 23.810848,116.009574 22.267412,115.742797 L21.7495652,115.672748 L21.6935818,115.119356 C21.500488,114.271769 21.130875,113.474514 20.6089027,112.779703 C20.0700621,111.995149 19.4752381,111.231609 18.8524224,110.482079 C17.5833326,108.995786 16.2379147,107.576536 14.8216149,106.230074 C11.9646756,102.955055 9.34986116,99.4760635 6.99792961,95.8207178 C4.57824935,92.1891749 2.69283928,88.2282005 1.39958592,84.0594059 C1.09940747,82.9768 0.891062513,81.8707609 0.776770186,80.7530693 C0.641768054,79.6016061 0.667676135,78.4369304 0.853747412,77.2926238 C1.21374339,74.8829149 2.50246381,72.7102608 4.4436853,71.2403465 C5.39397239,70.5295316 6.44939829,69.9717455 7.57175983,69.5871782 C8.65819361,69.2189253 9.77881609,68.9607828 10.9167702,68.8166337 C13.1300969,68.5768978 15.3640001,68.6004114 17.5718012,68.8866832 C21.8944098,69.4568256 26.138777,70.5142822 30.224058,72.0389109 C34.3215783,73.4944638 38.2739884,75.3307661 42.0295652,77.5237871 C45.6110279,79.5624002 49.5096526,80.9832264 53.5621532,81.7267574 C57.7058413,82.5205997 61.8898799,83.0865144 66.0954451,83.4219554 L65.2346998,83.6110891 C69.9224162,80.7538225 74.4262806,77.6047392 78.7197101,74.1824257 C83.0584265,70.7920297 87.2081988,67.1774752 91.6308903,63.675 L91.1340373,65.0759901 C90.9262419,64.1304688 90.5338397,63.2353703 89.9793789,62.4421287 C89.438017,61.6994757 88.7151134,61.1085122 87.88,60.7259158 L87.9919669,58.1971287 C87.9009938,58.2321535 88.0479503,58.1971287 88.0969358,58.1270792 C88.1788817,58.072963 88.2561316,58.0120384 88.3278675,57.9449505 C88.4939794,57.802451 88.6420373,57.6401296 88.7687371,57.4616089 C88.9107143,57.2674537 89.0393077,57.0638383 89.1536232,56.8521782 C89.2686269,56.6243251 89.3714091,56.3904947 89.4615321,56.1516832 C89.8178929,55.0989747 90.0137018,53.9985109 90.0423602,52.8873762 C90.0734746,51.7169159 90.0126385,50.5458181 89.8604141,49.384901 C89.715152,48.1885213 89.4954567,47.0023802 89.2026087,45.8333911 C88.0269565,41.042005 86.5503934,36.1875743 85.4167288,31.2560891 C84.2830642,26.324604 83.3173499,21.2950495 83.3173499,16.0973762 C83.2446664,13.4407914 83.6597572,10.7934165 84.5419876,8.28685644 C85.0201353,6.98557105 85.7158476,5.77514371 86.5993789,4.70732673 L87.2991718,3.93678218 C87.5523279,3.68645152 87.8211237,3.45248147 88.1039337,3.23628713 C88.654527,2.80296367 89.2450066,2.42298878 89.867412,2.10148515 C90.1823188,1.94737624 90.5042236,1.83529703 90.8261284,1.70220297 C91.1381439,1.55975556 91.4610875,1.44262964 91.7918427,1.35195545 C92.4394683,1.15004695 93.101523,0.997832356 93.7722567,0.896633663 L94.7729607,0.763539604 C95.1018634,0.71450495 95.437764,0.763539604 95.7736646,0.71450495 C96.1095652,0.665470297 96.4734576,0.71450495 96.7743685,0.71450495 L97.7750725,0.798564356 C100.39956,1.06493668 102.948588,1.83302836 105.283851,3.06116337 C109.91648,5.44985149 113.77234,8.93831683 117.180331,12.6929703 C120.543182,16.4876078 123.539976,20.5921038 126.130683,24.9516337 C127.4253,27.1231683 128.635942,29.3437376 129.734617,31.6203465 C130.856423,33.8839587 131.815248,36.2249006 132.603768,38.625297 L132.46381,38.4221535 C134.142001,39.9443255 135.737485,41.5554399 137.243395,43.2485644 C138.753953,44.9320147 140.176436,46.6926132 141.505135,48.5232921 C142.808864,50.3604183 143.978232,52.2894707 145.004099,54.2953713 C146.017635,56.3192489 146.801621,58.4503524 147.341408,60.6488614 L147.341408,60.6488614 Z" id="Path" fill="#24272A" fillRule="nonzero"></path>
                <path d="M57.8378882,191.69047 C77.4320911,232.662426 96.0115942,238.000198 96.0115942,238.000198 L101.141077,254.71401 L100.567246,256.115 C95.934617,256.016931 88.8177226,256.955594 86.0605383,263.11995 C85.7770491,263.760308 85.8008407,264.495134 86.1251572,265.115773 C86.4494738,265.736412 87.0388923,266.175075 87.7260455,266.307203 L103.611346,269.445421 C102.882185,270.467097 102.287156,271.578303 101.84087,272.751757 C101.601558,273.384937 101.653383,274.091534 101.982511,274.682938 C102.311638,275.274342 102.884567,275.690353 103.548364,275.819926 L136.75354,282.383564 C137.747006,282.586005 138.755114,282.109952 139.230807,281.213738 C141.883023,276.009059 141.232215,267.904332 141.232215,267.904332 C147.068489,264.114653 151.295238,258.384604 154.353333,252.220248 C155.466004,257.859233 166.949607,241.250495 166.949607,241.250495 L57.8378882,191.69047 Z" id="Path" fill="#FFFFFF" fillRule="nonzero"></path>
                <path d="M116.053665,265.263465 C118.409147,261.731085 120.962825,258.335239 123.702402,255.092277 C122.719535,258.992282 120.991939,262.665024 118.614907,265.907921 C117.774049,265.644694 116.918922,265.429529 116.053665,265.263465 L116.053665,265.263465 Z" id="Path" fill="#FFFFFF" fillRule="nonzero"></path>
                <path d="M141.232215,267.897327 C141.565919,271.017216 141.450441,274.168903 140.889317,277.255941 C140.744441,278.03564 140.550444,278.805386 140.308489,279.560569 C140.175528,279.931832 140.070559,280.317104 139.902609,280.681361 C139.757675,281.08231 139.5675,281.465391 139.335776,281.823168 C138.757299,282.580992 137.827425,282.984077 136.879503,282.887921 C136.032754,282.761832 135.318965,282.628738 134.535197,282.495644 C128.40501,281.430891 122.281822,280.326444 116.165631,279.182302 L106.991346,277.459084 L104.696025,277.031782 L103.548364,276.814629 C103.310707,276.769173 103.076788,276.705951 102.848571,276.625495 C101.503386,276.111422 100.651417,274.778174 100.749193,273.340173 C100.761184,273.061027 100.813028,272.785035 100.903147,272.520594 C100.937001,272.406542 100.976709,272.294314 101.022112,272.184356 L101.141077,271.897153 C101.299696,271.514216 101.474645,271.135949 101.665921,270.762351 C102.418992,269.250532 103.451986,267.895595 104.710021,266.76953 C106.001961,265.636496 107.532982,264.810352 109.188696,264.352822 C110.814311,263.920459 112.503717,263.780522 114.178219,263.93953 C115.804242,264.093806 117.408988,264.422592 118.964803,264.920223 L117.845135,265.27047 C119.967582,262.378823 121.557693,259.131363 122.540745,255.680693 C122.77965,254.823459 122.957378,253.950309 123.072588,253.067847 C123.128571,252.63354 123.163561,252.192228 123.191553,251.750916 C123.200004,251.355965 123.1648,250.961289 123.086584,250.574084 C122.684461,248.808028 122.148741,247.075143 121.484058,245.390421 C118.810849,238.48354 115.745756,231.646708 112.897598,224.739827 C110.049441,217.832946 107.299255,210.856015 105.157888,203.682946 C104.054238,200.102187 103.147808,196.463478 102.442692,192.783243 C101.689821,189.109865 101.454271,185.349087 101.742899,181.610347 C101.647087,185.320635 102.037633,189.027486 102.904555,192.636139 C103.732884,196.264288 104.75844,199.844474 105.976646,203.360718 C108.404928,210.365668 111.253085,217.286559 114.248199,224.109381 L118.782857,234.343614 C120.301408,237.755025 121.819959,241.173441 123.191553,244.682921 C123.923025,246.461109 124.510413,248.295317 124.948033,250.167797 C125.055311,250.693178 125.104593,251.228768 125.09499,251.764926 C125.09499,252.262277 125.046004,252.752624 124.990021,253.24297 C124.876328,254.215643 124.698662,255.179749 124.458178,256.12901 C123.965905,258.001086 123.283552,259.817825 122.421781,261.550842 C121.568474,263.28755 120.566351,264.946932 119.426667,266.510347 C119.175879,266.85 118.739208,266.995703 118.33499,266.874604 C115.486832,266.00599 112.463727,265.606708 109.720538,266.335223 C108.362057,266.704187 107.103984,267.374555 106.039627,268.296609 C104.970858,269.24961 104.090212,270.394887 103.443395,271.672995 C103.284776,271.995223 103.130821,272.324455 102.981532,272.660693 L102.876563,272.912871 L102.799586,273.12302 C102.761853,273.226462 102.7406,273.335198 102.736605,273.445248 C102.708712,273.893903 102.905419,274.327094 103.261449,274.601064 C103.350772,274.663433 103.447062,274.715153 103.548364,274.755173 C103.679137,274.807334 103.815251,274.84492 103.954244,274.867252 L105.094907,275.098416 L107.38323,275.574752 L116.522526,277.473094 C122.587398,278.757335 128.673264,280.064926 134.780124,281.395866 L137.019462,281.893218 C137.645667,281.988307 138.276885,281.755659 138.691967,281.276782 C138.896029,280.984819 139.069557,280.672624 139.209814,280.345124 C139.375283,280.002951 139.522447,279.652208 139.650683,279.294381 C139.930202,278.581526 140.163942,277.851524 140.350476,277.108837 C140.719858,275.606177 140.970228,274.076687 141.099255,272.534604 C141.240841,270.993175 141.285249,269.444347 141.232215,267.897327 L141.232215,267.897327 Z" id="Path" fill="#231F20" fillRule="nonzero"></path>
                <path d="M57.8378882,191.69047 C77.4320911,232.662426 96.0115942,238.000198 96.0115942,238.000198 L101.141077,254.71401 L100.567246,256.115 C95.934617,256.016931 88.8177226,256.955594 86.0605383,263.11995 C85.7770491,263.760308 85.8008407,264.495134 86.1251572,265.115773 C86.4494738,265.736412 87.0388923,266.175075 87.7260455,266.307203 L103.611346,269.445421 C102.882185,270.467097 102.287156,271.578303 101.84087,272.751757 C101.601558,273.384937 101.653383,274.091534 101.982511,274.682938 C102.311638,275.274342 102.884567,275.690353 103.548364,275.819926 L136.75354,282.383564 C137.747006,282.586005 138.755114,282.109952 139.230807,281.213738 C141.883023,276.009059 141.232215,267.904332 141.232215,267.904332 C147.068489,264.114653 151.295238,258.384604 154.353333,252.220248" id="Path" stroke="#231F20" strokeWidth="2.1" strokeLinecap="round" strokeLinejoin="round"></path>
                <path d="M116.053665,265.263465 C118.409147,261.731085 120.962825,258.335239 123.702402,255.092277 C122.719535,258.992282 120.991939,262.665024 118.614907,265.907921 C117.774049,265.644694 116.918922,265.429529 116.053665,265.263465 L116.053665,265.263465 Z" id="Path" stroke="#231F20" strokeWidth="2.1" strokeLinecap="round" strokeLinejoin="round"></path>
                <g id="Group" transform="translate(88.173913, 259.883663)" fill="#231F20" fillRule="nonzero">
                    <path d="M16.3471636,16.8118812 C16.4249952,16.4250954 16.535013,16.0455046 16.6760663,15.6770792 C16.7942375,15.3276114 16.9344788,14.9860152 17.095942,14.6543564 C17.407372,13.989891 17.7923361,13.3625219 18.2436025,12.7840347 C18.6974659,12.2185763 19.2384196,11.7291014 19.8461284,11.3340099 C20.4377873,10.9812309 21.0907223,10.7435618 21.770559,10.6335149 C21.2082556,10.9522526 20.7118602,11.3754442 20.3079917,11.880396 C19.941727,12.3713678 19.6558987,12.9175875 19.4612422,13.4985396 C19.2823291,14.0704592 19.16503,14.6598915 19.1113458,15.2567822 C19.0938801,15.5530674 19.0938801,15.8501257 19.1113458,16.1464109 C19.104892,16.4210252 19.1259915,16.6955946 19.1743271,16.9659901 L16.3471636,16.8118812 Z" id="Path"></path>
                    <path d="M20.8118427,17.694505 C20.890772,17.3087432 20.9983728,16.9294209 21.1337474,16.559703 C21.2572976,16.2112571 21.3998018,15.8698392 21.5606211,15.5369802 C21.8692405,14.8710008 22.2543954,14.2433207 22.7082816,13.6666584 C23.1604582,13.0996096 23.7016876,12.6098852 24.3108075,12.2166337 C24.9000461,11.8640677 25.5506514,11.6263823 26.2282402,11.5161386 C25.6693226,11.8368495 25.1755696,12.259812 24.7726708,12.7630198 C24.4064061,13.2539916 24.1205778,13.8002113 23.9259213,14.3811634 C23.7404022,14.9513741 23.6229532,15.5415598 23.5760248,16.1394059 C23.5760248,16.4336139 23.5410352,16.7348267 23.5410352,17.0290347 C23.5400992,17.3037619 23.5635175,17.5780304 23.6110145,17.8486139 L20.8118427,17.694505 Z" id="Path"></path>
                    <path d="M0,6.51460396 C0.0756505029,6.12804878 0.18332406,5.74847016 0.321904762,5.37980198 C0.447867495,5.02955446 0.587826087,4.67930693 0.741780538,4.35707921 C1.05441021,3.69174044 1.44179766,3.06424818 1.89643892,2.48675743 C2.34882007,1.92186301 2.89007842,1.43447836 3.4989648,1.04373762 C4.08693263,0.688507235 4.73806627,0.450628801 5.41639752,0.343242574 C4.85457241,0.662770718 4.36020216,1.08864118 3.96082816,1.59712871 C3.5906682,2.08306795 3.30445666,2.62765225 3.11407867,3.20826733 C2.84757317,4.0651607 2.71768347,4.9587528 2.72919255,5.85613861 C2.72972971,6.13052197 2.7507823,6.40448027 2.79217391,6.67571782 L0,6.51460396 Z" id="Path"></path>
                    <path d="M4.43668737,7.39722772 C4.51779732,7.01125439 4.62774051,6.63192107 4.76559006,6.26242574 C4.88678974,5.91410015 5.02695827,5.57268117 5.18546584,5.23970297 C5.49809551,4.5743642 5.88548296,3.94687194 6.34012422,3.36938119 C6.78806776,2.80287454 7.32731711,2.31516921 7.93565217,1.92636139 C8.52612514,1.57108655 9.17955353,1.33323784 9.86008282,1.22586634 C9.29823837,1.53638468 8.80161603,1.95263398 8.39751553,2.45173267 C8.02790335,2.93911785 7.73958815,3.48320822 7.54376812,4.06287129 C7.36485496,4.6347909 7.24755585,5.22422321 7.19387164,5.82111386 L7.19387164,6.71074257 C7.19091505,6.98525252 7.21198941,7.259494 7.256853,7.53032178 L4.43668737,7.39722772 Z" id="Path"></path>
                </g>
            </g>
        </g>
    </g>
</svg>
'''
'''--- src/assets/images/icon-nav.svg ---
<svg
      width="40px"
      height="40px"
      viewBox="0 0 52 52"
      version="1.1"
      xmlns="http://www.w3.org/2000/svg"
      xlink="http://www.w3.org/1999/xlink"
    >
      <g
        id="Page-1"
        stroke="none"
        strokeWidth="1"
        fill="none"
        fillRule="evenodd"
      >
        <g
          id="create"
          transform="translate(-1047.000000, -1249.000000)"
          fillRule="nonzero"
        >
          <g id="icon-addcorgi" transform="translate(1047.000000, 1249.000000)">
            <path
              d="M51.6647219,26.1677 C51.6647219,40.4343875 40.0991906,51.9999188 25.8325031,51.9999188 C11.5654094,51.9999188 -0.000121875,40.4343875 -0.000121875,26.1677 C-0.000121875,11.9006063 11.5654094,0.33548125 25.8325031,0.33548125 C40.0991906,0.33548125 51.6647219,11.9006063 51.6647219,26.1677"
              id="Fill-1"
              fill="#FBB040"
            ></path>
            <path
              d="M48.8554625,37.8789125 C46.74865,30.7358187 44.576025,23.8771 42.301025,21.3916625 C43.350775,18.7754125 42.6658375,15.1626313 42.5439625,14.577225 C43.0554312,13.056225 43.51815,10.1885063 43.3454937,7.381725 C43.1972125,4.96006875 42.5163375,1.82869375 40.1149937,0.66235 C39.3260562,0.27885 38.5448375,0.2325375 37.7936812,0.52381875 C35.5158375,1.4090375 34.0257125,5.1660375 32.937775,7.90944375 C32.609525,8.73819375 32.3255562,9.45319375 32.0883062,9.9021 C31.00565,11.9524438 30.0830562,11.7379437 30.081025,11.7379437 C29.9749937,11.7034125 29.8592125,11.7371313 29.7877125,11.82285 C29.7174312,11.9085688 29.7048375,12.0288188 29.75765,12.1263188 C30.0152125,12.6008188 29.9489937,13.0834438 29.8194,13.4458188 C29.25715,13.4567875 28.6571187,13.4844125 28.0258062,13.5136625 C26.125775,13.6010063 23.9746812,13.699725 21.5119937,13.4381 C21.4384625,13.3686313 21.3555875,13.2922563 21.2654,13.2085687 L21.1878062,13.1366625 C20.2436812,12.2607875 18.2798687,10.4387563 17.5494312,8.55944375 C16.6516187,6.2482875 14.3274625,2.54775625 11.9740562,1.55569375 C11.2119312,1.23475625 10.4940875,1.213225 9.840025,1.49150625 C6.89186875,2.74600625 7.3870875,9.80906875 7.40943125,10.1092875 C7.4098375,10.1170063 7.41065,10.124725 7.412275,10.1324438 C7.56868125,11.1005375 7.67430625,12.6211313 7.41999375,12.9692875 C7.33955625,13.078975 7.353775,13.2325375 7.4520875,13.3263813 C7.45899375,13.3332875 8.15205625,14.0121313 8.42749375,15.3889125 C8.49086875,15.7037563 8.48274375,16.250975 8.4742125,16.8851313 C8.449025,18.6612563 8.41205625,21.3152875 9.89893125,22.7591 C9.46749375,23.6715375 9.235525,24.2658813 9.2249625,24.2922875 C9.20424375,24.3455063 9.20099375,24.4040063 9.2152125,24.4592563 C9.238775,24.5502563 9.77461875,26.702975 7.90180625,27.2579125 C7.77180625,27.2965063 7.69055625,27.4236625 7.71005625,27.557725 C7.72915,27.690975 7.8437125,27.7905062 7.97899375,27.7905062 C8.3945875,27.7913188 9.56580625,27.9079125 9.98018125,28.4331938 C10.1268375,28.6192563 10.1658375,28.8455375 10.0992125,29.1254437 C9.2794,32.569225 9.011275,35.0611625 9.30174375,36.5321938 C9.32286875,36.6386313 9.40574375,36.7223187 9.511775,36.7450688 C9.61861875,36.7678188 9.7279,36.7255688 9.79086875,36.6366 C9.9594625,36.3989438 10.4051187,35.9256625 10.69965,35.9845687 C10.8979,36.0235688 11.0823375,36.3469437 11.2046187,36.8718188 C11.31065,37.3243813 11.3423375,37.8110688 11.2996812,38.3180688 C11.1518062,40.0499125 11.0193687,44.7425063 13.2829937,48.7465062 C16.9993687,50.81635 21.276775,51.9997563 25.8324625,51.9997563 C35.8814625,51.9997563 44.58415,46.2578188 48.8554625,37.8789125"
              id="Fill-4"
              fill="#24272A"
            ></path>
            <polygon
              id="+"
              fill="#FFFFFF"
              points="35.198 29.244 28.97 29.244 28.97 35.58 23.03 35.58 23.03 29.244 16.802 29.244 16.802 23.592 23.03 23.592 23.03 17.22 28.97 17.22 28.97 23.592 35.198 23.592"
            ></polygon>
          </g>
        </g>
      </g>
    </svg>
'''
'''--- src/assets/images/icon-send.svg ---
        <svg width="45px" height="45px" viewBox="0 0 45 45" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink">
            <defs>
                <linearGradient x1="0%" y1="50.0039354%" x2="100%" y2="50.0039354%" id="linearGradient-1">
                    <stop stopColor="#231F20" offset="0%"></stop>
                    <stop stopColor="#c24445" offset="100%"></stop>
                </linearGradient>
                <linearGradient x1="0%" y1="50%" x2="100.023603%" y2="50%" id="linearGradient-2">
                    <stop stopColor="#231F20" offset="0%"></stop>
                    <stop stopColor="#c24445" offset="100%"></stop>
                </linearGradient>
                <linearGradient x1="21.5871069%" y1="85.701459%" x2="87.6046989%" y2="13.1537598%" id="linearGradient-3">
                    <stop stopColor="#231F20" offset="0%"></stop>
                    <stop stopColor="#c24445" offset="100%"></stop>
                </linearGradient>
                <linearGradient x1="31.8198269%" y1="64.2873176%" x2="56.5588545%" y2="35.7126824%" id="linearGradient-4">
                    <stop stopColor="#231F20" offset="0%"></stop>
                    <stop stopColor="#c24445" offset="100%"></stop>
                </linearGradient>
                <linearGradient x1="2.05564263%" y1="76.1278208%" x2="67.3611401%" y2="23.872154%" id="linearGradient-5">
                    <stop stopColor="#231F20" offset="0%"></stop>
                    <stop stopColor="#c24445" offset="100%"></stop>
                </linearGradient>
                <linearGradient x1="32.6666644%" y1="76.1390585%" x2="97.9722153%" y2="23.8609415%" id="linearGradient-6">
                    <stop stopColor="#231F20" offset="0%"></stop>
                    <stop stopColor="#c24445" offset="100%"></stop>
                </linearGradient>
                <linearGradient x1="34.3379522%" y1="57.3383119%" x2="64.49544%" y2="44.0499278%" id="linearGradient-7">
                    <stop stopColor="#231F20" offset="0%"></stop>
                    <stop stopColor="#c24445" offset="100%"></stop>
                </linearGradient>
                <linearGradient x1="65.6725365%" y1="57.3340525%" x2="35.5242604%" y2="44.0536113%" id="linearGradient-8">
                    <stop stopColor="#231F20" offset="0%"></stop>
                    <stop stopColor="#c24445" offset="100%"></stop>
                </linearGradient>
                <linearGradient x1="9.16666667%" y1="90.8888889%" x2="90.8888889%" y2="9.11111111%" id="linearGradient-9">
                    <stop stopColor="#231F20" offset="0%"></stop>
                    <stop stopColor="#c24445" offset="100%"></stop>
                </linearGradient>
            </defs>
            <g id="Page-1" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
                <g id="result" transform="translate(-583.000000, -1067.000000)" fillRule="nonzero">
                    <g id="gift" transform="translate(583.000000, 1067.000000)">
                        <circle id="Oval" fill="#FBB040" cx="35.769375" cy="35.769375" r="35.769375"></circle>
                        <path d="M67.64625,51.98625 C64.726875,42.091875 61.723125,32.625 58.573125,29.154375 C60.024375,25.531875 59.07375,20.53125 58.905,19.72125 C59.8505046,16.4901127 60.2310934,13.1199982 60.03,9.759375 C59.821875,6.384375 58.905,2.07 55.53,0.455625 C54.5365476,-0.0725995332 53.3629428,-0.144411015 52.3125,0.25875 C49.156875,1.485 47.098125,6.688125 45.5625,10.485 C45.106875,11.61 44.713125,12.6225 44.386875,13.246875 C42.885,16.0875 41.608125,15.789375 41.608125,15.789375 C41.462173,15.7418133 41.3019583,15.7875268 41.2030796,15.9049453 C41.1042008,16.0223638 41.0864192,16.1880209 41.158125,16.32375 C41.4490083,16.8923264 41.4797743,17.5589221 41.2425,18.151875 C40.46625,18.151875 39.63375,18.208125 38.761875,18.2475 C35.7637427,18.4489798 32.7543773,18.4132436 29.761875,18.140625 L29.424375,17.825625 L29.311875,17.724375 C28.029375,16.515 25.3125,13.989375 24.3,11.385 C23.0625,8.19 19.839375,3.065625 16.576875,1.6875 C15.6480266,1.24591633 14.5762959,1.21529545 13.62375,1.603125 C9.545625,3.335625 10.24875,13.1175 10.24875,13.53375 C10.2461183,13.5448461 10.2461183,13.5564039 10.24875,13.5675 C10.4625,14.90625 10.60875,17.01 10.24875,17.505 C10.1398939,17.6585917 10.1589816,17.868556 10.29375,18 C11.0041604,18.8068503 11.4738475,19.7968962 11.649375,20.8575 C11.725791,21.5447022 11.7464835,22.2369605 11.71125,22.9275 C11.6775,25.385625 11.626875,29.05875 13.685625,31.06125 C13.08375,32.32125 12.763125,33.148125 12.751875,33.181875 C12.7295244,33.2571255 12.7295244,33.3372495 12.751875,33.4125 C12.785625,33.541875 13.528125,36.523125 10.935,37.288125 C10.7577717,37.3429743 10.6468211,37.518647 10.6734502,37.7022477 C10.7000793,37.8858484 10.8563668,38.0227614 11.041875,38.025 C11.604375,38.025 13.24125,38.188125 13.815,38.91375 C14.0193453,39.190147 14.0799168,39.54731 13.978125,39.875625 C12.853125,44.64 12.470625,48.09375 12.853125,50.13 C12.8826884,50.2768342 12.9963972,50.3922252 13.1427814,50.4239418 C13.2891655,50.4556584 13.4404377,50.3976798 13.528125,50.27625 C13.764375,49.944375 14.3775,49.291875 14.788125,49.370625 C15.06375,49.426875 15.316875,49.87125 15.485625,50.6025 C15.6346973,51.2589117 15.6783683,51.9348632 15.615,52.605 C15.4125,55.00125 15.226875,61.498125 18.365625,67.044375 C26.8563781,71.7600806 36.8995444,72.8209172 46.1881477,69.9832044 C55.4767511,67.1454915 63.2123841,60.6531463 67.618125,51.9975 L67.64625,51.98625 Z" id="Path" fill="#231F20"></path>
                        <path d="M31.033125,71.2125 C34.3949266,71.6666123 37.8043583,71.6382004 41.158125,71.128125 L41.158125,0.405 C39.3744897,0.135792003 37.5732119,0 35.769375,0 C34.1853431,0.00407029507 32.6032533,0.111171389 31.033125,0.320625 L31.033125,71.2125 Z" id="Path" fill="#c24445"></path>
                        <path d="M0,35.769375 C0.00407582947,37.351538 0.111177436,38.9317564 0.320625,40.5 L71.195625,40.5 C71.6497373,37.1381984 71.6213254,33.7287667 71.11125,30.375 L0.405,30.375 C0.13601295,32.1605484 0,33.9636794 0,35.769375 L0,35.769375 Z" id="Path" fill="#c24445"></path>
                        <polygon id="Path" fill="#c24445" points="33.744375 31.635 15.85125 49.53375 23.00625 49.53375 23.00625 56.694375 38.655 35.983125"></polygon>
                        <polygon id="Path" fill="#c24445" points="37.254375 31.635 55.153125 49.53375 47.9925 49.53375 47.9925 56.694375 33.4575 36.5625"></polygon>
                        <path d="M20.570625,25.66125 L36.095625,33.42375 L20.570625,41.18625 C19.5558432,41.6916224 18.3516474,41.6350004 17.3887639,41.0366371 C16.4258804,40.4382738 15.8418695,39.383653 15.845607,38.25 L15.845607,28.580625 C15.8477198,27.4499736 16.4340779,26.4007234 17.3959452,25.8064268 C18.3578124,25.2121303 19.5585318,25.1572219 20.570625,25.66125 Z" id="Path" fill="#c24445"></path>
                        <path d="M51.620625,25.66125 L36.095625,33.42375 L51.620625,41.18625 C52.6324612,41.6936722 53.8350065,41.6403584 54.797969,41.0453851 C55.7609315,40.4504119 56.3466806,39.3988153 56.3456264,38.266875 L56.3456264,28.580625 C56.3466806,27.4486847 55.7609315,26.3970881 54.797969,25.8021149 C53.8350065,25.2071416 52.6324612,25.1538278 51.620625,25.66125 L51.620625,25.66125 Z" id="Path" fill="#c24445"></path>
                        <path d="M17.74125,25.61625 C17.454375,26.17875 18.2025,27.045 21.94875,28.36125 C30.110625,31.23 36.095625,33.42375 36.095625,33.42375 L20.570625,25.66125 C19.6846504,25.2117532 18.6410709,25.1951555 17.74125,25.61625 Z" id="Path" fill="#c24445"></path>
                        <path d="M54.455625,25.61625 C54.7425,26.17875 53.994375,27.045 50.248125,28.36125 C42.08625,31.23 36.095625,33.42375 36.095625,33.42375 L51.620625,25.66125 C52.508553,25.2116087 53.5538736,25.1950163 54.455625,25.61625 Z" id="Path" fill="#c24445"></path>
                        <rect id="Rectangle" fill="#c24445" x="31.033125" y="28.36125" width="10.125" height="10.125" rx="5.0625"></rect>
                    </g>
                </g>
            </g>
        </svg>
    
'''
'''--- src/assets/images/icon-share.svg ---
        <svg width="45px" height="45px" viewBox="0 0 45 45" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink">
            <g id="Page-1" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
                <g id="result" transform="translate(-965.000000, -1067.000000)" fillRule="nonzero">
                    <g id="share" transform="translate(965.000000, 1067.000000)">
                        <circle id="Oval" fill="#FBB040" cx="35.769375" cy="35.769375" r="35.769375"></circle>
                        <path d="M67.64625,51.98625 C64.726875,42.091875 61.723125,32.625 58.573125,29.154375 C60.024375,25.531875 59.07375,20.53125 58.905,19.72125 C59.8505046,16.4901127 60.2310934,13.1199982 60.03,9.759375 C59.821875,6.384375 58.905,2.07 55.53,0.455625 C54.5365476,-0.0725995332 53.3629428,-0.144411015 52.3125,0.25875 C49.156875,1.485 47.098125,6.688125 45.5625,10.485 C45.106875,11.61 44.713125,12.6225 44.386875,13.246875 C42.885,16.0875 41.608125,15.789375 41.608125,15.789375 C41.462173,15.7418133 41.3019583,15.7875268 41.2030796,15.9049453 C41.1042008,16.0223638 41.0864192,16.1880209 41.158125,16.32375 C41.4490083,16.8923264 41.4797743,17.5589221 41.2425,18.151875 C40.46625,18.151875 39.63375,18.208125 38.761875,18.2475 C35.7637427,18.4489798 32.7543773,18.4132436 29.761875,18.140625 L29.424375,17.825625 L29.311875,17.724375 C28.029375,16.515 25.3125,13.989375 24.3,11.385 C23.0625,8.19 19.839375,3.065625 16.576875,1.6875 C15.6480266,1.24591633 14.5762959,1.21529545 13.62375,1.603125 C9.545625,3.335625 10.24875,13.1175 10.24875,13.53375 C10.2461183,13.5448461 10.2461183,13.5564039 10.24875,13.5675 C10.4625,14.90625 10.60875,17.01 10.24875,17.505 C10.1398939,17.6585917 10.1589816,17.868556 10.29375,18 C11.0041604,18.8068503 11.4738475,19.7968962 11.649375,20.8575 C11.725791,21.5447022 11.7464835,22.2369605 11.71125,22.9275 C11.6775,25.385625 11.626875,29.05875 13.685625,31.06125 C13.08375,32.32125 12.763125,33.148125 12.751875,33.181875 C12.7295244,33.2571255 12.7295244,33.3372495 12.751875,33.4125 C12.785625,33.541875 13.528125,36.523125 10.935,37.288125 C10.7577717,37.3429743 10.6468211,37.518647 10.6734502,37.7022477 C10.7000793,37.8858484 10.8563668,38.0227614 11.041875,38.025 C11.604375,38.025 13.24125,38.188125 13.815,38.91375 C14.0193453,39.190147 14.0799168,39.54731 13.978125,39.875625 C12.853125,44.64 12.470625,48.09375 12.853125,50.13 C12.8826884,50.2768342 12.9963972,50.3922252 13.1427814,50.4239418 C13.2891655,50.4556584 13.4404377,50.3976798 13.528125,50.27625 C13.764375,49.944375 14.3775,49.291875 14.788125,49.370625 C15.06375,49.426875 15.316875,49.87125 15.485625,50.6025 C15.6346973,51.2589117 15.6783683,51.9348632 15.615,52.605 C15.4125,55.00125 15.226875,61.498125 18.365625,67.044375 C26.8563781,71.7600806 36.8995444,72.8209172 46.1881477,69.9832044 C55.4767511,67.1454915 63.2123841,60.6531463 67.618125,51.9975 L67.64625,51.98625 Z" id="Path" fill="#231F20"></path>
                        <path d="M60.811875,34.756875 L37.2375,18.88875 L37.2375,28.45125 C37.2375,28.45125 10.0575,30.52125 10.0575,50.625 C10.0575,50.625 13.494375,42.373125 26.645625,40.809375 C30.1670285,40.4330267 33.7075089,40.2639852 37.24875,40.303125 L37.24875,50.625 L60.811875,34.756875 Z" id="Path" fill="#FFFFFF"></path>
                    </g>
                </g>
            </g>
        </svg>
'''
'''--- src/assets/images/near-logo.svg ---
<svg fill="none" height="37" viewBox="0 0 139 37" width="139" xmlns="http://www.w3.org/2000/svg"><g fill="#000"><path d="m69.5853 8.0602v21.3241c-.0011.0804-.0335.1573-.0903.2142-.0569.0569-.1337.0893-.2141.0904h-2.216c-.5086.0004-1.0092-.1269-1.4559-.3703s-.8253-.5951-1.101-1.0229l-10.0571-15.5564.3449 7.7701v8.8749c-.001.0804-.0334.1573-.0903.2142-.0568.0569-.1337.0893-.2141.0904h-2.9303c-.0804-.0011-.1572-.0335-.214-.0904-.0569-.0569-.0893-.1338-.0903-.2142v-21.3241c.001-.08047.0334-.15734.0903-.21425.0568-.0569.1336-.08933.214-.09038h2.2039c.508.00027 1.0079.12746 1.4544.37003s.8255.59285 1.1025 1.01908l10.0571 15.53202-.3125-7.7416v-8.8749c0-.0808.0321-.15828.0892-.21541.057-.05713.1345-.08922.2152-.08922h2.9303c.0768.00608.1486.04072.2011.0971.0526.05638.0822.13041.083.20753z"/><path d="m99.5335 29.6889h-3.1008c-.0484-.0005-.0961-.0125-.1389-.0351-.0429-.0226-.0798-.0551-.1075-.0948-.0278-.0398-.0457-.0856-.0523-.1336-.0065-.0481-.0015-.097.0146-.1427l8.2144-21.23469c.035-.08891.097-.16475.177-.21711.08-.05237.174-.07868.27-.07533h3.884c.092.00079.181.02904.257.08114.076.05209.135.12566.169.2113l8.19 21.23469c.016.0457.021.0946.015.1427-.007.048-.025.0938-.053.1336-.027.0397-.064.0722-.107.0948s-.091.0346-.139.0351h-3.101c-.062.0003-.123-.0182-.174-.053s-.091-.0842-.114-.142l-6.62-17.4654c-.021-.0588-.06-.1096-.111-.1455s-.112-.0552-.175-.0552c-.062 0-.123.0193-.174.0552-.052.0359-.09.0867-.112.1455l-6.6193 17.4654c-.0231.0584-.0635.1084-.1157.1432s-.1138.0529-.1765.0518z"/><path d="m138.837 29.1974-6.161-7.8757c3.478-.658 5.511-3.0056 5.511-6.6084 0-4.1389-2.691-6.95773-7.451-6.95773h-8.592c-.121 0-.236.04792-.322.13324-.085.08531-.133.20102-.133.32167 0 .38404.076.76432.223 1.11913s.362.67719.633.94879c.271.2715.594.4869.948.6339.355.147.735.2226 1.118.2226h5.768c2.877 0 4.257 1.4744 4.257 3.6028 0 2.1283-1.347 3.6555-4.257 3.6555h-8.235c-.121.0011-.237.0499-.322.1359-.085.0859-.133.2021-.133.3231v10.5605c0 .0808.032.1583.089.2154s.135.0892.216.0892h2.93c.08-.001.157-.0335.214-.0904s.089-.1337.09-.2142v-7.9001h3.381l5.345 6.9821c.287.3737.655.6759 1.078.8831.422.2071.887.3136 1.357.3111h2.224c.056-.0031.11-.0213.155-.0527.046-.0314.083-.0748.106-.1254.023-.0507.031-.1066.025-.1619-.007-.0552-.028-.1076-.062-.1515z"/><path d="m90.2677 7.75557h-13.5962c-.1076 0-.2108.04279-.287.11896-.0761.07617-.1188.17948-.1188.28721 0 .78961.3134 1.54689.8713 2.10526.5579.5583 1.3146.872 2.1036.872h11.0271c.0402.0005.08-.007.1172-.0221.0371-.0151.0709-.0375.0993-.0659s.0508-.0622.0659-.0994.0226-.0771.022-.1172v-2.7742c0-.0808-.0321-.15828-.0891-.21541-.0571-.05713-.1345-.08922-.2153-.08922zm0 18.54993h-10.1464c-.0804-.0011-.1572-.0335-.2141-.0904-.0568-.0569-.0892-.1338-.0903-.2143v-5.4995c0-.0808.0321-.1583.0892-.2154.0571-.0572.1345-.0893.2152-.0893h9.3794c.0807 0 .1581-.0321.2152-.0892s.0892-.1346.0892-.2154v-2.7945c0-.0808-.0321-.1582-.0892-.2154-.0571-.0571-.1345-.0892-.2152-.0892h-12.7805c-.1209.0011-.2365.0499-.3216.1359-.0852.0859-.1329.2021-.1329.3231v11.9658c0 .1207.0479.2364.1331.3217.0853.0853.2009.1332.3214.1332h13.5475c.0808 0 .1582-.0321.2153-.0892.057-.0571.0891-.1346.0891-.2154v-2.7741c-.0031-.0783-.0367-.1523-.0936-.2062-.0569-.0538-.1325-.0834-.2108-.0822z"/><path d="m29.4176 2.30067-7.6383 11.34443c-.1237.1637-.181.3683-.1601.5725.0208.2043.1181.3931.2724.5284.1543.1354.354.2072.5591.2012.205-.0061.4002-.0897.5462-.2339l7.5165-6.49876c.0433-.03977.0974-.06594.1554-.07525.0581-.00932.1176-.00138.1712.02284s.0989.06365.1303.1134.0475.10763.0463.16646v20.42641c-.0006.062-.0201.1224-.0559.173s-.0862.0891-.1444.1103-.1216.0241-.1815.0083-.1136-.0495-.1539-.0966l-22.728-27.21359c-.36283-.43689-.81677-.78906-1.32997-1.031829-.51321-.242769-1.07326-.370257-1.6409-.373525h-.79142c-1.03227 0-2.02226.410385-2.75219 1.140874-.729919.73049-1.1399856 1.72125-1.1399856 2.75432v28.76515c0 1.0331.4100666 2.0238 1.1399856 2.7543.72993.7305 1.71992 1.1409 2.75219 1.1409.66512-.0001 1.31913-.1707 1.89961-.4957.58048-.3249 1.06807-.7934 1.41624-1.3605l7.63824-11.3444c.1238-.1638.181-.3683.1602-.5726-.0209-.2042-.1182-.393-.2725-.5284-.1542-.1353-.354-.2072-.559-.2011-.2051.0061-.4003.0896-.5463.2339l-7.51645 6.4987c-.04334.0398-.09739.066-.15545.0753-.05805.0093-.11757.0013-.17115-.0229-.05359-.0242-.0989-.0636-.1303-.1134-.03141-.0497-.04753-.1076-.04637-.1664v-20.40616c.00061-.06201.02013-.12237.05593-.17299s.08619-.0891.14443-.11029c.05824-.0212.12155-.0241.18148-.00831.05993.01578.11362.04949.15389.09663l22.72799 27.21352c.3656.433.8212.7809 1.3351 1.0194.5138.2385 1.0734.3619 1.6399.3616h.8117c.5111 0 1.0172-.1007 1.4894-.2965.4723-.1957.9013-.4826 1.2628-.8443.3614-.3617.6481-.7911.8437-1.2637s.2962-.9791.2962-1.4907v-28.76105c.0001-.51358-.1014-1.02209-.2985-1.49628-.1972-.47418-.486-.90467-.85-1.26669s-.796-.64843-1.271-.842743c-.4751-.194313-.9838-.292694-1.497-.289481-.6651.00008-1.3191.170739-1.8996.495692-.5805.324952-1.0681.793362-1.4162 1.360522z"/></g></svg>
'''
'''--- src/assets/images/shadow.svg ---
                <svg width="200px" height="25px" viewBox="0 0 200 25" version="1.1" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink">
                    <g id="Page-1" stroke="none" strokeWidth="1" fill="none" fillRule="evenodd" fillOpacity="0.2">
                        <g id="create" transform="translate(-801.000000, -709.000000)" fill="#000000">
                            <ellipse id="Oval" cx="901" cy="721.048193" rx="100" ry="12.0481928"></ellipse>
                        </g>
                    </g>
                </svg>
'''
'''--- src/assets/quotes/quotes.json ---
{
	"quotes": [

{
       "quote":"Life isn’t about getting and having, it’s about giving and being.","author":"Kevin Kruse"},
{
       "quote":"Whatever the mind of man can conceive and believe, it can achieve.","author":"Napoleon Hill"},
{
       "quote":"Strive not to be a success, but rather to be of value.","author":"Albert Einstein"},
{
       "quote":"Two roads diverged in a wood, and I—I took the one less traveled by, And that has made all the difference.","author":"Robert Frost"},
{
       "quote":"I attribute my success to this: I never gave or took any excuse.","author":"Florence Nightingale"},
{
       "quote":"You miss 100% of the shots you don’t take.","author":"Wayne Gretzky"},
{
       "quote":"I’ve missed more than 9000 shots in my career. I’ve lost almost 300 games. 26 times I’ve been trusted to take the game winning shot and missed. I’ve failed over and over and over again in my life. And that is why I succeed.","author":"Michael Jordan"},
{
       "quote":"The most difficult thing is the decision to act, the rest is merely tenacity.","author":"Amelia Earhart"},
{
       "quote":"Every strike brings me closer to the next home run.","author":"Babe Ruth"},
{
       "quote":"Definiteness of purpose is the starting point of all achievement.","author":"W. Clement Stone"},
{
       "quote":"We must balance conspicuous consumption with conscious capitalism.","author":"Kevin Kruse"},
{
       "quote":"Life is what happens to you while you’re busy making other plans.","author":"John Lennon"},
{
       "quote":"We become what we think about.","author":"Earl Nightingale"},
{
       "quote":"Twenty years from now you will be more disappointed by the things that you didn’t do than by the ones you did do, so throw off the bowlines, sail away from safe harbor, catch the trade winds in your sails.  Explore, Dream, Discover.","author":"Mark Twain"},
{
       "quote":"Life is 10% what happens to me and 90% of how I react to it.","author":"Charles Swindoll"},
{
       "quote":"The most common way people give up their power is by thinking they don’t have any.","author":"Alice Walker"},
{
       "quote":"The mind is everything. What you think you become.","author":"Buddha"},
{
       "quote":"The best time to plant a tree was 20 years ago. The second best time is now.","author":"Chinese Proverb"},
{
       "quote":"An unexamined life is not worth living.","author":"Socrates"},
{
       "quote":"Eighty percent of success is showing up.","author":"Woody Allen"},
{
       "quote":"Your time is limited, so don’t waste it living someone else’s life.","author":"Steve Jobs"},
{
       "quote":"Winning isn’t everything, but wanting to win is.","author":"Vince Lombardi"},
{
       "quote":"I am not a product of my circumstances. I am a product of my decisions.","author":"Stephen Covey"},
{
       "quote":"Every child is an artist.  The problem is how to remain an artist once he grows up.","author":"Pablo Picasso"},
{
       "quote":"You can never cross the ocean until you have the courage to lose sight of the shore.","author":"Christopher Columbus"},
{
       "quote":"I’ve learned that people will forget what you said, people will forget what you did, but people will never forget how you made them feel.","author":"Maya Angelou"},
{
       "quote":"Either you run the day, or the day runs you.","author":"Jim Rohn"},
{
       "quote":"Whether you think you can or you think you can’t, you’re right.","author":"Henry Ford"},
{
       "quote":"The two most important days in your life are the day you are born and the day you find out why.","author":"Mark Twain"},
{
       "quote":"Whatever you can do, or dream you can, begin it.  Boldness has genius, power and magic in it.","author":"Johann Wolfgang von Goethe"},
{
       "quote":"The best revenge is massive success.","author":"Frank Sinatra"},
{
       "quote":"People often say that motivation doesn’t last. Well, neither does bathing.  That’s why we recommend it daily.","author":"Zig Ziglar"},
{
       "quote":"Life shrinks or expands in proportion to one’s courage.","author":"Anais Nin"},
{
       "quote":"If you hear a voice within you say “you cannot paint,” then by all means paint and that voice will be silenced.","author":"Vincent Van Gogh"},
{
       "quote":"There is only one way to avoid criticism: do nothing, say nothing, and be nothing.","author":"Aristotle"},
{
       "quote":"Ask and it will be given to you; search, and you will find; knock and the door will be opened for you.","author":"Jesus"},
{
       "quote":"The only person you are destined to become is the person you decide to be.","author":"Ralph Waldo Emerson"},
{
       "quote":"Go confidently in the direction of your dreams.  Live the life you have imagined.","author":"Henry David Thoreau"},
{
       "quote":"When I stand before God at the end of my life, I would hope that I would not have a single bit of talent left and could say, I used everything you gave me.","author":"Erma Bombeck"},
{
       "quote":"Few things can help an individual more than to place responsibility on him, and to let him know that you trust him.","author":"Booker T. Washington"},
{
       "quote":"Certain things catch your eye, but pursue only those that capture the heart.","author":" Ancient Indian Proverb"},
{
       "quote":"Believe you can and you’re halfway there.","author":"Theodore Roosevelt"},
{
       "quote":"Everything you’ve ever wanted is on the other side of fear.","author":"George Addair"},
{
       "quote":"We can easily forgive a child who is afraid of the dark; the real tragedy of life is when men are afraid of the light.","author":"Plato"},
{
       "quote":"Teach thy tongue to say, “I do not know,” and thous shalt progress.","author":"Maimonides"},
{
       "quote":"Start where you are. Use what you have.  Do what you can.","author":"Arthur Ashe"},
{
       "quote":"When I was 5 years old, my mother always told me that happiness was the key to life.  When I went to school, they asked me what I wanted to be when I grew up.  I wrote down ‘happy’.  They told me I didn’t understand the assignment, and I told them they didn’t understand life.","author":"John Lennon"},
{
       "quote":"Fall seven times and stand up eight.","author":"Japanese Proverb"},
{
       "quote":"When one door of happiness closes, another opens, but often we look so long at the closed door that we do not see the one that has been opened for us.","author":"Helen Keller"},
{
       "quote":"Everything has beauty, but not everyone can see.","author":"Confucius"},
{
       "quote":"How wonderful it is that nobody need wait a single moment before starting to improve the world.","author":"Anne Frank"},
{
       "quote":"When I let go of what I am, I become what I might be.","author":"Lao Tzu"},
{
       "quote":"Life is not measured by the number of breaths we take, but by the moments that take our breath away.","author":"Maya Angelou"},
{
       "quote":"Happiness is not something readymade.  It comes from your own actions.","author":"Dalai Lama"},
{
       "quote":"If you’re offered a seat on a rocket ship, don’t ask what seat! Just get on.","author":"Sheryl Sandberg"},
{
       "quote":"First, have a definite, clear practical ideal; a goal, an objective. Second, have the necessary means to achieve your ends; wisdom, money, materials, and methods. Third, adjust all your means to that end.","author":"Aristotle"},
{
       "quote":"If the wind will not serve, take to the oars.","author":"Latin Proverb"},
{
       "quote":"You can’t fall if you don’t climb.  But there’s no joy in living your whole life on the ground.","author":"Unknown"},
{
       "quote":"We must believe that we are gifted for something, and that this thing, at whatever cost, must be attained.","author":"Marie Curie"},
{
       "quote":"Too many of us are not living our dreams because we are living our fears.","author":"Les Brown"},
{
       "quote":"Challenges are what make life interesting and overcoming them is what makes life meaningful.","author":"Joshua J. Marine"},
{
       "quote":"If you want to lift yourself up, lift up someone else.","author":"Booker T. Washington"},
{
       "quote":"I have been impressed with the urgency of doing. Knowing is not enough; we must apply. Being willing is not enough; we must do.","author":"Leonardo da Vinci"},
{
       "quote":"Limitations live only in our minds.  But if we use our imaginations, our possibilities become limitless.","author":"Jamie Paolinetti"},
{
       "quote":"You take your life in your own hands, and what happens? A terrible thing, no one to blame.","author":"Erica Jong"},
{
       "quote":"What’s money? A man is a success if he gets up in the morning and goes to bed at night and in between does what he wants to do.","author":"Bob Dylan"},
{
       "quote":"I didn’t fail the test. I just found 100 ways to do it wrong.","author":"Benjamin Franklin"},
{
       "quote":"In order to succeed, your desire for success should be greater than your fear of failure.","author":"Bill Cosby"},
{
       "quote":"A person who never made a mistake never tried anything new.","author":" Albert Einstein"},
{
       "quote":"The person who says it cannot be done should not interrupt the person who is doing it.","author":"Chinese Proverb"},
{
       "quote":"There are no traffic jams along the extra mile.","author":"Roger Staubach"},
{
       "quote":"It is never too late to be what you might have been.","author":"George Eliot"},
{
       "quote":"You become what you believe.","author":"Oprah Winfrey"},
{
       "quote":"I would rather die of passion than of boredom.","author":"Vincent van Gogh"},
{
       "quote":"A truly rich man is one whose children run into his arms when his hands are empty.","author":"Unknown"},
{
       "quote":"It is not what you do for your children, but what you have taught them to do for themselves, that will make them successful human beings.","author":"Ann Landers"},
{
       "quote":"If you want your children to turn out well, spend twice as much time with them, and half as much money.","author":"Abigail Van Buren"},
{
       "quote":"Build your own dreams, or someone else will hire you to build theirs.","author":"Farrah Gray"},
{
       "quote":"The battles that count aren’t the ones for gold medals. The struggles within yourself–the invisible battles inside all of us–that’s where it’s at.","author":"Jesse Owens"},
{
       "quote":"Education costs money.  But then so does ignorance.","author":"Sir Claus Moser"},
{
       "quote":"I have learned over the years that when one’s mind is made up, this diminishes fear.","author":"Rosa Parks"},
{
       "quote":"It does not matter how slowly you go as long as you do not stop.","author":"Confucius"},
{
       "quote":"If you look at what you have in life, you’ll always have more. If you look at what you don’t have in life, you’ll never have enough.","author":"Oprah Winfrey"},
{
       "quote":"Remember that not getting what you want is sometimes a wonderful stroke of luck.","author":"Dalai Lama"},
{
       "quote":"You can’t use up creativity.  The more you use, the more you have.","author":"Maya Angelou"},
{
       "quote":"Dream big and dare to fail.","author":"Norman Vaughan"},
{
       "quote":"Our lives begin to end the day we become silent about things that matter.","author":"Martin Luther King Jr."},
{
       "quote":"Do what you can, where you are, with what you have.","author":"Teddy Roosevelt"},
{
       "quote":"If you do what you’ve always done, you’ll get what you’ve always gotten.","author":"Tony Robbins"},
{
       "quote":"Dreaming, after all, is a form of planning.","author":"Gloria Steinem"},
{
       "quote":"It’s your place in the world; it’s your life. Go on and do all you can with it, and make it the life you want to live.","author":"Mae Jemison"},
{
       "quote":"You may be disappointed if you fail, but you are doomed if you don’t try.","author":"Beverly Sills"},
{
       "quote":"Remember no one can make you feel inferior without your consent.","author":"Eleanor Roosevelt"},
{
       "quote":"Life is what we make it, always has been, always will be.","author":"Grandma Moses"},
{
       "quote":"The question isn’t who is going to let me; it’s who is going to stop me.","author":"Ayn Rand"},
{
       "quote":"When everything seems to be going against you, remember that the airplane takes off against the wind, not with it.","author":"Henry Ford"},
{
       "quote":"It’s not the years in your life that count. It’s the life in your years.","author":"Abraham Lincoln"},
{
       "quote":"Change your thoughts and you change your world.","author":"Norman Vincent Peale"},
{
       "quote":"Either write something worth reading or do something worth writing.","author":"Benjamin Franklin"},
{
       "quote":"Nothing is impossible, the word itself says, “I’m possible!”","author":"–Audrey Hepburn"},
{
       "quote":"The only way to do great work is to love what you do.","author":"Steve Jobs"},
{
       "quote":"If you can dream it, you can achieve it.","author":"Zig Ziglar"}
]
}

'''
'''--- src/config.js ---
/* eslint-disable comma-dangle, prefer-destructuring */
const CONTRACT_NAME = process.env.CONTRACT_NAME;

function getConfig(env) {
  switch (env) {
    case 'production':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.mainnet.near.org',
        helperUrl: 'https://helper.mainnet.near.org',
      };
    case 'development':
    case 'testnet':
      return {
        networkId: 'default',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
      };
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org',
      };
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME,
      };
    default:
      throw Error(
        `Unconfigured environment '${env}'. Can be configured in src/config.js.`,
      );
  }
}

module.exports = getConfig;

'''
'''--- src/constants/Colors.js ---
const COLORS = {
  BLACK: '#231F20',
  GRAY: '#c7c7c7',
  WHITE: '#ffffff',
};

export default COLORS;

'''
'''--- src/constants/contractMethods/CorgiMethods.js ---
const CorgiMethods = {
  viewMethods: ['get_corgi_by_id', 'get_corgis_by_owner', 'get_global_corgis'],
  changeMethods: ['transfer_corgi', 'create_corgi', 'delete_corgi'],
};

export default CorgiMethods;

'''
'''--- src/constants/contractMethods/MarketplaceMethods.js ---
const MarketplaceMethods = {
  viewMethods: ['get_items_for_sale'],
  changeMethods: ['add_item_for_sale', 'bid_for_item', 'clearance_for_item'],
};

export default MarketplaceMethods;

'''
'''--- src/constants/contractMethods/index.js ---
import CorgiMethods from './CorgiMethods';
import MarketplaceMethods from './MarketplaceMethods';

export { CorgiMethods, MarketplaceMethods };

'''
'''--- src/constants/corgi/ActionMessages.js ---
const ACTION_MESSAGES = {
  GIFT: {
    POPUP_TITLE: 'Gift me to your friend!',
    BUTTON_DESCRIPTION: 'Gift',
  },
  TRADE: {
    POPUP_TITLE: 'Add Corgi for sale?',
    BUTTON_DESCRIPTION: 'Trade',
  },
  SHARE: {
    POPUP_TITLE: 'Share in socials!',
    BUTTON_DESCRIPTION: 'Share',
  },
  DELETE: {
    POPUP_TITLE: 'Are you sure?',
    POPUP_TITLE_ACTION_CONFIRMED: 'Deleting...',
    BUTTON_DESCRIPTION: 'Delete',
  },
  WITHDRAW: {
    POPUP_TITLE: 'Withdraw Corgi?',
    BUTTON_DESCRIPTION: 'Withdraw',
  },
};

export default ACTION_MESSAGES;

'''
'''--- src/constants/corgi/AuctionDuration.js ---
// 24h
const AUCTION_DURATION = 60 * 60 * 24;

export default AUCTION_DURATION;

'''
'''--- src/constants/corgi/BoatloadOfGas.js ---
import Big from 'big.js';

const BOATLOAD_OF_GAS = Big(1)
  .times(10 ** 14)
  .toFixed();

export default BOATLOAD_OF_GAS;

'''
'''--- src/constants/corgi/Rates.js ---
const RATES = {
  COMMON: 'COMMON',
  UNCOMMON: 'UNCOMMON',
  RARE: 'RARE',
  VERY_RARE: 'VERY_RARE',
};

export default RATES;

'''
'''--- src/constants/corgi/Sausage.js ---
const SAUSAGE = {
  COMMON: 25,
  UNCOMMON: 50,
  RARE: 100,
  VERY_RARE: 200,
};

export default SAUSAGE;

'''
'''--- src/constants/corgi/index.js ---
import ACTION_MESSAGES from './ActionMessages';
import AUCTION_DURATION from './AuctionDuration';
import BOATLOAD_OF_GAS from './BoatloadOfGas';
import RATES from './Rates';
import SAUSAGE from './Sausage';

export { ACTION_MESSAGES, AUCTION_DURATION, BOATLOAD_OF_GAS, RATES, SAUSAGE };

'''
'''--- src/constants/validation/account.js ---
export const USER_VALIDATION_MESSAGES = {
  OWN_ACCOUNT: 'Sorry, but you can only send Corgi to another account.',
  NOT_EXIST: 'Such user does not exist.',
};

'''
'''--- src/constants/validation/corgi.js ---
export const NAME_LIMIT = 32;

export const CORGI_VALIDATION_MESSAGES = {
  SUCCESS: 'Success!',
  LIMIT: `Name is too long, the maximum length is ${NAME_LIMIT} characters.`,
  PROFANE: 'Corgi doesn\'t like this name and kindly asks you to be polite.',
  NEARS: 'Not enough Ⓝ',
  BID: 'Your bid must be greater than the highest bid',
};

'''
'''--- src/contexts/character/index.js ---
import React, { useCallback, useEffect, useReducer } from 'react';

import { getRandomQuoteId } from '~helpers/quotes';

import { characterReducer, initialCharacterState } from './reducer';
import { SET_CHARACTER, SET_NAME, SET_COLOR, SET_BACKGROUND_COLOR, SET_QUOTE, CLEAR_STATE } from './types';

import { ReactChildrenTypeRequired } from '~types/ReactChildrenTypes';
import genRandomCharacter from '~helpers/generators/genRandomCharacter';

export const CharacterContext = React.createContext(initialCharacterState);

const CharacterContextProviderPropTypes = { children: ReactChildrenTypeRequired };

export const CharacterContextProvider = ({ children }) => {
  const [characterState, dispatchCharacter] = useReducer(characterReducer, initialCharacterState);

  const clearState = () => {
    dispatchCharacter({ type: CLEAR_STATE });
  };

  const setName = (name) => {
    dispatchCharacter({ type: SET_NAME, payload: { name } });
  };

  const setColor = (color) => {
    dispatchCharacter({ type: SET_COLOR, payload: { color } });
  };

  const setBackgroundColor = (backgroundColor) => {
    dispatchCharacter({ type: SET_BACKGROUND_COLOR, payload: { backgroundColor } });
  };

  const generateQuote = useCallback(() => {
    dispatchCharacter({ type: SET_QUOTE, payload: { quote: getRandomQuoteId() } });
  }, []);

  const generateRandomCharacter = () => {
    dispatchCharacter({ type: SET_CHARACTER, payload: { character: genRandomCharacter() } });
  };

  useEffect(() => {
    generateQuote();
  }, [generateQuote, characterState.name]);

  const value = {
    name: characterState.name,
    color: characterState.color,
    backgroundColor: characterState.backgroundColor,
    quote: characterState.quote,
    clearState,
    setName,
    setColor,
    setBackgroundColor,
    generateRandomCharacter,
  };

  return <CharacterContext.Provider value={value}>{children}</CharacterContext.Provider>;
};

CharacterContextProvider.propTypes = CharacterContextProviderPropTypes;

'''
'''--- src/contexts/character/reducer.js ---
import { genRandomCharacter } from '~helpers/generators';

import { SET_CHARACTER, SET_NAME, SET_COLOR, SET_BACKGROUND_COLOR, SET_QUOTE, CLEAR_STATE } from './types';

export const initialCharacterState = genRandomCharacter();

export const characterReducer = (currentState = initialCharacterState, action) => {
  switch (action.type) {
    case SET_NAME:
      return {
        ...currentState,
        name: action.payload.name,
      };

    case SET_QUOTE:
      return {
        ...currentState,
        quote: action.payload.quote,
      };

    case SET_COLOR:
      return {
        ...currentState,
        color: action.payload.color,
      };

    case SET_BACKGROUND_COLOR:
      return {
        ...currentState,
        backgroundColor: action.payload.backgroundColor,
      };

    case SET_CHARACTER:
      return { ...currentState, ...action.payload.character };

    case CLEAR_STATE:
      return initialCharacterState;

    default:
      throw new Error('Should not come here, something is wrong!');
  }
};

'''
'''--- src/contexts/character/types.js ---
export const SET_NAME = 'SET_NAME';
export const SET_QUOTE = 'SET_QUOTE';

export const SET_COLOR = 'SET_COLOR';
export const SET_BACKGROUND_COLOR = 'SET_BACKGROUND_COLOR';

export const SET_CHARACTER = 'SET_CHARACTER';

export const CLEAR_STATE = 'CLEAR_STATE';

'''
'''--- src/contexts/contract/index.js ---
import React, { useReducer, useCallback, useEffect, useContext } from 'react';
import PropTypes from 'prop-types';

import { contractReducer, initialContractState } from './reducer';
import {
  ACTION_START,
  ACTION_ERROR,
  GET_CORGI_SUCCESS,
  GET_CORGIS_SUCCESS,
  GET_GLOBAL_CORGIS_SUCCESS,
  CREATE_CORGI_START,
  CREATE_CORGI_SUCCESS,
  DELETE_CORGI_START,
  DELETE_CORGI_SUCCESS,
  TRANSFER_CORGI_START,
  TRANSFER_CORGI_SUCCESS,
  CLEAR_STATE,
} from './types';

import { NearContext } from '~contexts/';

import { parseNears } from '~helpers/nears';

import { BOATLOAD_OF_GAS } from '~constants/corgi';

import { ReactChildrenTypeRequired } from '~types/ReactChildrenTypes';

export const ContractContext = React.createContext(initialContractState);

const ContractContextProviderPropTypes = {
  Contract: PropTypes.shape({
    get_corgi_by_id: PropTypes.func.isRequired,
    get_corgis_by_owner: PropTypes.func.isRequired,
    get_global_corgis: PropTypes.func.isRequired,
    transfer_corgi: PropTypes.func.isRequired,
    create_corgi: PropTypes.func.isRequired,
    delete_corgi: PropTypes.func.isRequired,
  }).isRequired,
  mintFee: PropTypes.string.isRequired,
  children: ReactChildrenTypeRequired,
};

export const ContractContextProvider = ({ Contract, mintFee, children }) => {
  const [contractState, dispatchContract] = useReducer(contractReducer, initialContractState);

  const { user } = useContext(NearContext);

  const getCorgi = useCallback((id) => Contract.get_corgi_by_id({ id }).then((corgi) => corgi), [Contract]);

  const getActiveCorgi = useCallback(
    (id) => {
      dispatchContract({ type: ACTION_START });
      Contract.get_corgi_by_id({ id })
        .then((corgi) => dispatchContract({ type: GET_CORGI_SUCCESS, payload: { corgi } }))
        .catch((error) => dispatchContract({ type: ACTION_ERROR, payload: { error } }));
    },
    [Contract],
  );

  const getCorgis = useCallback((owner) => Contract.get_corgis_by_owner({ owner }).then((corgis) => corgis), [
    Contract,
  ]);

  const getCorgisByCurrentUser = useCallback(() => {
    if (user) {
      dispatchContract({ type: ACTION_START });
      Contract.get_corgis_by_owner({ owner: user.accountId })
        .then((corgis) => dispatchContract({ type: GET_CORGIS_SUCCESS, payload: { corgis } }))
        .catch((error) => dispatchContract({ type: ACTION_ERROR, payload: { error } }));
    }
  }, [user, Contract]);

  const getGlobalCorgis = useCallback(() => {
    dispatchContract({ type: ACTION_START });
    Contract.get_global_corgis()
      .then((corgis) => dispatchContract({ type: GET_GLOBAL_CORGIS_SUCCESS, payload: { corgis } }))
      .catch((error) => dispatchContract({ type: ACTION_ERROR, payload: { error } }));
  }, [Contract]);

  const createCorgi = useCallback(
    (corgi) => {
      dispatchContract({ type: CREATE_CORGI_START });
      Contract.create_corgi(corgi, BOATLOAD_OF_GAS, parseNears(`${mintFee}`))
        .then(() => {
          dispatchContract({ type: CREATE_CORGI_SUCCESS });
        })
        .catch((error) => dispatchContract({ type: ACTION_ERROR, payload: { error } }));
    },
    [Contract],
  );

  const deleteCorgi = useCallback(
    (id) => {
      dispatchContract({ type: DELETE_CORGI_START });
      Contract.delete_corgi({ id })
        .then(() => dispatchContract({ type: DELETE_CORGI_SUCCESS }))
        .catch((error) => dispatchContract({ type: ACTION_ERROR, payload: { error } }));
    },
    [Contract],
  );

  const transferCorgi = useCallback(
    (receiver, id) => {
      dispatchContract({ type: TRANSFER_CORGI_START });
      Contract.transfer_corgi({ receiver, id }, BOATLOAD_OF_GAS)
        .then(() => dispatchContract({ type: TRANSFER_CORGI_SUCCESS }))
        .catch((error) => dispatchContract({ type: ACTION_ERROR, payload: { error } }));
    },
    [Contract],
  );

  const clearState = () => dispatchContract({ type: CLEAR_STATE });

  useEffect(() => {
    let timeoutId;

    if (contractState.deleted || contractState.created || contractState.trasfered) {
      timeoutId = setTimeout(() => {
        clearState();
        clearTimeout(timeoutId);
      }, 100);
    }

    return () => {
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
    };
  }, [contractState.deleted, contractState.created, contractState.trasfered]);

  const value = {
    loading: contractState.loading,
    error: contractState.error,
    corgis: contractState.corgis,
    corgi: contractState.corgi,
    globalCorgis: contractState.globalCorgis,
    creating: contractState.creating,
    created: contractState.created,
    transfering: contractState.transfering,
    transfered: contractState.transfered,
    deleting: contractState.deleting,
    deleted: contractState.deleted,
    mintFee,
    getCorgi,
    getActiveCorgi,
    getCorgis,
    getCorgisByCurrentUser,
    getGlobalCorgis,
    createCorgi,
    deleteCorgi,
    transferCorgi,
    clearState,
  };

  return <ContractContext.Provider value={value}>{children}</ContractContext.Provider>;
};

ContractContextProvider.propTypes = ContractContextProviderPropTypes;

'''
'''--- src/contexts/contract/reducer.js ---
import {
  ACTION_START,
  ACTION_ERROR,
  GET_CORGI_SUCCESS,
  GET_CORGIS_SUCCESS,
  GET_GLOBAL_CORGIS_SUCCESS,
  CREATE_CORGI_START,
  CREATE_CORGI_SUCCESS,
  DELETE_CORGI_START,
  DELETE_CORGI_SUCCESS,
  TRANSFER_CORGI_START,
  TRANSFER_CORGI_SUCCESS,
  CLEAR_STATE,
} from './types';

export const initialContractState = {
  loading: false,
  error: null,
  corgis: null,
  creating: false,
  created: false,
  transfering: false,
  transfered: false,
  deleting: false,
  deleted: false,
  corgi: null,
  globalCorgis: [],
};

export const contractReducer = (currentState = initialContractState, action) => {
  switch (action.type) {
    case ACTION_START:
      return {
        ...currentState,
        loading: true,
      };

    case ACTION_ERROR:
      return {
        ...currentState,
        loading: false,
        creating: false,
        transfering: false,
        deleting: false,
        error: action.payload.error,
      };

    case GET_CORGI_SUCCESS:
      return {
        ...currentState,
        loading: false,
        corgi: action.payload.corgi,
        error: null,
      };

    case GET_CORGIS_SUCCESS:
      return {
        ...currentState,
        loading: false,
        corgis: action.payload.corgis,
        error: null,
      };

    case GET_GLOBAL_CORGIS_SUCCESS:
      return {
        ...currentState,
        loading: false,
        globalCorgis: action.payload.corgis,
        error: null,
      };

    case CREATE_CORGI_START:
      return {
        ...currentState,
        creating: true,
      };

    case CREATE_CORGI_SUCCESS:
      return {
        ...currentState,
        creating: false,
        created: true,
        error: null,
      };

    case TRANSFER_CORGI_START:
      return {
        ...currentState,
        transfering: true,
      };

    case TRANSFER_CORGI_SUCCESS:
      return {
        ...currentState,
        transfering: false,
        transfered: true,
        error: null,
      };

    case DELETE_CORGI_START:
      return {
        ...currentState,
        deleting: true,
      };

    case DELETE_CORGI_SUCCESS:
      return {
        ...currentState,
        corgi: null,
        deleting: false,
        deleted: true,
        error: null,
      };

    case CLEAR_STATE:
      return {
        ...currentState,
        corgi: null,
        error: null,
        deleting: false,
        deleted: false,
        creating: false,
        created: false,
        transfering: false,
        transfered: false,
      };

    default:
      return initialContractState;
  }
};

'''
'''--- src/contexts/contract/types.js ---
export const ACTION_START = 'ACTION_START';
export const ACTION_ERROR = 'ACTION_ERROR';

export const GET_CORGI_SUCCESS = 'GET_CORGI_SUCCESS';

export const GET_CORGIS_SUCCESS = 'GET_CORGIS_SUCCESS';

export const GET_GLOBAL_CORGIS_SUCCESS = 'GET_GLOBAL_CORGIS_SUCCESS';

export const CREATE_CORGI_START = 'CREATE_CORGI_START';
export const CREATE_CORGI_SUCCESS = 'CREATE_CORGI_SUCCESS';

export const DELETE_CORGI_START = 'DELETE_CORGI_START';
export const DELETE_CORGI_SUCCESS = 'DELETE_CORGI_SUCCESS';

export const TRANSFER_CORGI_START = 'TRANSFER_CORGI_START';
export const TRANSFER_CORGI_SUCCESS = 'TRANSFER_CORGI_SUCCESS';

export const CLEAR_STATE = 'CLEAR_STATE';

'''
'''--- src/contexts/corgiActions/index.js ---
import React, { useEffect, useState } from 'react';

import { CorgiTypeShape } from '~types/CorgiTypes';
import { ReactChildrenTypeRequired } from '~types/ReactChildrenTypes';

export const CorgiActionsContext = React.createContext();

const CorgiActionsContextProviderPropTypes = {
  corgi: CorgiTypeShape,
  children: ReactChildrenTypeRequired,
};

export const CorgiActionsContextProvider = ({ corgi = {}, children }) => {
  const [corgiContext, setCorgiContext] = useState(corgi);

  useEffect(() => {
    setCorgiContext(corgi);
  }, [corgi]);

  const value = { ...corgiContext };

  return <CorgiActionsContext.Provider value={value}>{children}</CorgiActionsContext.Provider>;
};

CorgiActionsContextProvider.propTypes = CorgiActionsContextProviderPropTypes;

'''
'''--- src/contexts/index.js ---
import { CharacterContext, CharacterContextProvider } from './character';
import { ContractContext, ContractContextProvider } from './contract';
import { CorgiActionsContext, CorgiActionsContextProvider } from './corgiActions';
import { MarketplaceContext, MarketplaceContextProvider } from './marketplace';
import { NearContext, NearContextProvider } from './near';

export {
  CharacterContext,
  CharacterContextProvider,
  ContractContext,
  ContractContextProvider,
  CorgiActionsContext,
  CorgiActionsContextProvider,
  MarketplaceContext,
  MarketplaceContextProvider,
  NearContext,
  NearContextProvider,
};

'''
'''--- src/contexts/marketplace/index.js ---
import React, { useReducer, useCallback, useEffect } from 'react';
import PropTypes from 'prop-types';

import { marketplaceReducer, initialMarketplaceState } from './reducer';
import {
  ACTION_ERROR,
  GET_CORGIS_FOR_SALE_START,
  GET_CORGIS_FOR_SALE_SUCCESS,
  ADD_CORGI_FOR_SALE_START,
  ADD_CORGI_FOR_SALE_SUCCESS,
  BID_FOR_CORGI_START,
  BID_FOR_CORGI_SUCCESS,
  CLEARANCE_FOR_CORGI_START,
  CLEARANCE_FOR_CORGI_SUCCESS,
  CLEAR_STATE,
} from './types';

import { parseNears } from '~helpers/nears';

import { AUCTION_DURATION, BOATLOAD_OF_GAS } from '~constants/corgi';

import { ReactChildrenTypeRequired } from '~types/ReactChildrenTypes';

export const MarketplaceContext = React.createContext(initialMarketplaceState);

const MarketplaceContextProviderPropTypes = {
  Contract: PropTypes.shape({
    get_items_for_sale: PropTypes.func.isRequired,
    add_item_for_sale: PropTypes.func.isRequired,
    bid_for_item: PropTypes.func.isRequired,
    clearance_for_item: PropTypes.func.isRequired,
  }).isRequired,
  children: ReactChildrenTypeRequired,
};

export const MarketplaceContextProvider = ({ Contract, children }) => {
  const [marketplaceState, dispatchMarketplace] = useReducer(marketplaceReducer, initialMarketplaceState);

  const getCorgisForSale = useCallback(() => {
    dispatchMarketplace({ type: GET_CORGIS_FOR_SALE_START });
    Contract.get_items_for_sale()
      .then((corgis) => dispatchMarketplace({ type: GET_CORGIS_FOR_SALE_SUCCESS, payload: { corgis } }))
      .catch((error) => dispatchMarketplace({ type: ACTION_ERROR, payload: { error } }));
  }, [Contract]);

  const addCorgiForSale = useCallback(
    (id) => {
      dispatchMarketplace({ type: ADD_CORGI_FOR_SALE_START });
      Contract.add_item_for_sale({ token_id: id, duration: AUCTION_DURATION }, BOATLOAD_OF_GAS)
        .then(() => dispatchMarketplace({ type: ADD_CORGI_FOR_SALE_SUCCESS }))
        .catch((error) => dispatchMarketplace({ type: ACTION_ERROR, payload: { error } }));
    },
    [Contract],
  );

  const bidForCorgi = useCallback(
    (id, amount) => {
      dispatchMarketplace({ type: BID_FOR_CORGI_START });
      Contract.bid_for_item({ token_id: id }, BOATLOAD_OF_GAS, parseNears(`${amount}`))
        .then(() => dispatchMarketplace({ type: BID_FOR_CORGI_SUCCESS }))
        .catch((error) => dispatchMarketplace({ type: ACTION_ERROR, payload: { error } }));
    },
    [Contract],
  );

  const clearanceForCorgi = useCallback(
    (id) => {
      dispatchMarketplace({ type: CLEARANCE_FOR_CORGI_START });
      Contract.clearance_for_item({ token_id: id }, BOATLOAD_OF_GAS)
        .then(() => dispatchMarketplace({ type: CLEARANCE_FOR_CORGI_SUCCESS }))
        .catch((error) => dispatchMarketplace({ type: ACTION_ERROR, payload: { error } }));
    },
    [Contract],
  );

  const clearState = () => dispatchMarketplace({ type: CLEAR_STATE });

  useEffect(() => {
    const timeoutId = setTimeout(() => {
      clearState();
      clearTimeout(timeoutId);
    }, 100);

    return () => {
      clearTimeout(timeoutId);
    };
  }, [marketplaceState.added, marketplaceState.bidded, marketplaceState.cleared]);

  const value = {
    corgisForSale: marketplaceState.corgisForSale,
    loading: marketplaceState.loading,
    error: marketplaceState.error,
    adding: marketplaceState.adding,
    added: marketplaceState.added,
    bidding: marketplaceState.bidding,
    bidded: marketplaceState.bidded,
    clearing: marketplaceState.clearing,
    cleared: marketplaceState.cleared,
    getCorgisForSale,
    addCorgiForSale,
    bidForCorgi,
    clearanceForCorgi,
  };

  return <MarketplaceContext.Provider value={value}>{children}</MarketplaceContext.Provider>;
};

MarketplaceContextProvider.propTypes = MarketplaceContextProviderPropTypes;

'''
'''--- src/contexts/marketplace/reducer.js ---
import {
  ACTION_ERROR,
  GET_CORGIS_FOR_SALE_START,
  GET_CORGIS_FOR_SALE_SUCCESS,
  ADD_CORGI_FOR_SALE_START,
  ADD_CORGI_FOR_SALE_SUCCESS,
  BID_FOR_CORGI_START,
  BID_FOR_CORGI_SUCCESS,
  CLEARANCE_FOR_CORGI_START,
  CLEARANCE_FOR_CORGI_SUCCESS,
  CLEAR_STATE,
} from './types';

export const initialMarketplaceState = {
  corgisForSale: [],
  loading: false,
  error: null,
  adding: false,
  added: false,
  bidding: false,
  bidded: false,
  clearing: false,
  cleared: false,
};

export const marketplaceReducer = (currentState = initialMarketplaceState, action) => {
  switch (action.type) {
    case ACTION_ERROR:
      return {
        ...currentState,
        loading: false,
        error: action.payload.error,
      };

    case GET_CORGIS_FOR_SALE_START:
      return {
        ...currentState,
        loading: true,
      };

    case GET_CORGIS_FOR_SALE_SUCCESS:
      return {
        ...currentState,
        loading: false,
        corgisForSale: action.payload.corgis,
        error: null,
      };

    case ADD_CORGI_FOR_SALE_START:
      return {
        ...currentState,
        adding: true,
        added: false,
      };

    case ADD_CORGI_FOR_SALE_SUCCESS:
      return {
        ...currentState,
        adding: false,
        added: true,
        error: null,
      };

    case BID_FOR_CORGI_START:
      return {
        ...currentState,
        bidding: true,
        bidded: false,
      };

    case BID_FOR_CORGI_SUCCESS:
      return {
        ...currentState,
        bidding: false,
        bidded: true,
        error: null,
      };

    case CLEARANCE_FOR_CORGI_START:
      return {
        ...currentState,
        clearing: true,
        cleared: false,
      };

    case CLEARANCE_FOR_CORGI_SUCCESS:
      return {
        ...currentState,
        clearing: false,
        cleared: true,
        error: null,
      };

    case CLEAR_STATE:
      return {
        ...currentState,
        loading: false,
        error: null,
        adding: false,
        added: false,
        bidding: false,
        bidded: false,
        clearing: false,
        cleared: false,
      };

    default:
      return initialMarketplaceState;
  }
};

'''
'''--- src/contexts/marketplace/types.js ---
export const ACTION_ERROR = 'ACTION_ERROR';

export const GET_CORGIS_FOR_SALE_START = 'ACTION_START';
export const GET_CORGIS_FOR_SALE_SUCCESS = 'GET_GLOBAL_CORGIS_SUCCESS';

export const ADD_CORGI_FOR_SALE_START = 'ADD_CORGI_FOR_SALE_START';
export const ADD_CORGI_FOR_SALE_SUCCESS = 'ADD_CORGI_FOR_SALE_SUCCESS';

export const BID_FOR_CORGI_START = 'BID_FOR_CORGI_START';
export const BID_FOR_CORGI_SUCCESS = 'BID_FOR_CORGI_SUCCESS';

export const CLEARANCE_FOR_CORGI_START = 'CLEARANCE_FOR_CORGI_START';
export const CLEARANCE_FOR_CORGI_SUCCESS = 'CLEARANCE_FOR_CORGI_SUCCESS';

export const CLEAR_STATE = 'CLEAR_STATE';

'''
'''--- src/contexts/near/index.js ---
/* global localStorage:true */
import React, { useReducer, useEffect } from 'react';

import { initialNearState, nearReducer } from './reducer';
import { CLEAR_STATE, LOADING_ERROR, LOADING_START, LOADING_SUCCESS, SET_USER } from './types';

import { ReactChildrenTypeRequired } from '~types/ReactChildrenTypes';
import { NearConfigTypeShape, NearTypeShape, UserTypeShape, WalletTypeShape } from '~types/NearTypes';

export const NearContext = React.createContext({
  ...initialNearState,
  nearContract: null,
  signIn: () => {},
  signOut: () => {},
  startLoading: () => {},
});

const NearContextProviderPropTypes = {
  nearConfig: NearConfigTypeShape.isRequired,
  near: NearTypeShape.isRequired,
  wallet: WalletTypeShape.isRequired,
  currentUser: UserTypeShape,
  children: ReactChildrenTypeRequired,
};

export const NearContextProvider = ({ currentUser, nearConfig, wallet, near, children }) => {
  const [nearState, dispatchNear] = useReducer(nearReducer, initialNearState);

  const setUser = (user) => {
    dispatchNear({ type: SET_USER, payload: { user } });
  };

  const loadingStart = () => {
    dispatchNear({ type: LOADING_START });
  };

  const loadingSuccess = () => {
    dispatchNear({ type: LOADING_SUCCESS });
  };

  const loadingError = (error) => {
    dispatchNear({ type: LOADING_ERROR, payload: { error } });
  };

  const clearState = () => {
    dispatchNear({ type: CLEAR_STATE });
  };

  const signIn = () => {
    wallet.requestSignIn(nearConfig.contractName, 'NEAR Corgi');
  };

  const signOut = () => {
    wallet.signOut();

    clearState();
  };

  useEffect(() => {
    if (currentUser && Object.keys(currentUser).length) {
      setUser(currentUser);
    }
  }, [currentUser]);

  useEffect(() => {
    if (!nearState.user && !nearState.isLoading && !nearState.error) {
      loadingStart();
    }
  }, [nearState]);

  useEffect(() => {
    if (nearState.user && nearState.isLoading) {
      loadingSuccess();
    }
  }, [nearState]);

  useEffect(() => {
    if (!nearState.user && !localStorage.getItem('undefined_wallet_auth_key') && !nearState.error) {
      localStorage.clear();
      loadingError('wallet not found');
    }
  }, [nearState]);

  return (
    <NearContext.Provider
      value={{
        user: nearState.user,
        isLoading: nearState.isLoading,
        nearContent: near,
        signIn,
        signOut,
      }}
    >
      {children}
    </NearContext.Provider>
  );
};

NearContextProvider.propTypes = NearContextProviderPropTypes;

'''
'''--- src/contexts/near/reducer.js ---
import { CLEAR_STATE, LOADING_ERROR, LOADING_START, LOADING_SUCCESS, SET_USER } from './types';

export const initialNearState = {
  user: null,
  isLoading: true,
  error: null,
};

export const nearReducer = (currentState = initialNearState, action) => {
  switch (action.type) {
    case SET_USER:
      return {
        ...currentState,
        user: action.payload.user,
      };

    case LOADING_START:
      return {
        ...currentState,
        isLoading: true,
        error: null,
      };

    case LOADING_SUCCESS:
      return {
        ...currentState,
        isLoading: false,
        error: null,
      };

    case LOADING_ERROR:
      return {
        ...currentState,
        isLoading: false,
        error: action.payload.error,
      };

    case CLEAR_STATE:
      return initialNearState;

    default:
      throw new Error('Unexpected action...');
  }
};

'''
'''--- src/contexts/near/types.js ---
export const SET_USER = 'SET_USER';

export const LOADING_START = 'LOADING_START';
export const LOADING_SUCCESS = 'LOADING_SUCCESS';
export const LOADING_ERROR = 'LOADING_ERROR';

export const CLEAR_STATE = 'CLEAR_STATE';

'''
'''--- src/helpers/checkAccountLegit.js ---
import * as nearAPI from 'near-api-js';

/**
 *
 * @param {string} id Account ID
 * @param {any} connection
 *
 * @returns {Promise<boolean>}
 */
export default async function checkAccountLegit(id, connection) {
  try {
    if (await new nearAPI.Account(connection, id).state()) {
      return true;
    }
    return false;
  } catch (error) {
    console.error(error);
  }

  return false;
}

'''
'''--- src/helpers/generators/genRandomCharacter.js ---
import { genRandomColor, genRandomName } from '~helpers/generators';
import { getRandomQuoteId } from '~helpers/quotes';

/**
 * Generates random character for CharacterContext.
 *
 * Each Corgi in CharacterContext has the next structure:
 * @typedef {Object} Character
 * @property {string} name // Corgi name
 * @property {string} quote // quote ID
 * @property {string} color // HEX string
 * @property {string} backgroundColor // HEX string
 *
 * Returns Character object.
 * @returns {Character}
 */
export default function genRandomCharacter() {
  return {
    name: genRandomName(),
    quote: getRandomQuoteId(),
    color: genRandomColor(),
    backgroundColor: genRandomColor(),
  };
}

'''
'''--- src/helpers/generators/genRandomColor.js ---
import tinycolor from 'tinycolor2';

export default function genRandomColor() {
  return tinycolor.random().toHexString();
}

'''
'''--- src/helpers/generators/genRandomInt.js ---
/* eslint-disable no-param-reassign */

/**
 * Returns a random integer between min (inclusive) and max (inclusive).
 * The value is no lower than min and no greater than max.
 *
 * @param {number} min
 * @param {number} max
 *
 * @returns {number}
 */
export default function genRandomInt(min = 0, max = 1) {
  min = Math.ceil(min);
  max = Math.floor(max);

  return Math.floor(Math.random() * (max - min + 1)) + min;
}

'''
'''--- src/helpers/generators/genRandomName.js ---
import generate from 'project-name-generator';

import toTitleCase from '~helpers/toTitleCase';

/**
 * Returns a random name that consists of 2 alliterative words
 * and space between them.
 * @returns {string}
 */
export default function genRandomName() {
  return toTitleCase(generate({ words: 2 }).spaced);
}

'''
'''--- src/helpers/generators/index.js ---
import genRandomCharacter from './genRandomCharacter';
import genRandomColor from './genRandomColor';
import genRandomInt from './genRandomInt';
import genRandomName from './genRandomName';

export { genRandomCharacter, genRandomColor, genRandomInt, genRandomName };

'''
'''--- src/helpers/nears/formatToNears.js ---
import * as nearAPI from 'near-api-js';

export default function formatToNears(amount) {
  return nearAPI.utils.format.formatNearAmount(amount);
}

'''
'''--- src/helpers/nears/index.js ---
import formatToNears from './formatToNears';
import parseNears from './parseNears';

export { formatToNears, parseNears };

'''
'''--- src/helpers/nears/parseNears.js ---
import * as nearAPI from 'near-api-js';

export default function parseNears(amount) {
  return nearAPI.utils.format.parseNearAmount(amount);
}

'''
'''--- src/helpers/quotes/getQuoteById.js ---
import { quotes } from '~assets/quotes/quotes';

import { getRandomQuoteId } from '~helpers/quotes';

/**
 * For simplicity, indexes are used instead of unique id.
 * @param {string} id
 *
 * Each quote in JSON has the next structure:
 * @typedef {Object} Quote
 * @property {string} quote
 * @property {string} author
 *
 * Returns Quote object
 * @returns {Quote}
 */
export default function getQuoteById(id) {
  return quotes[Number(id)] || quotes[getRandomQuoteId()];
}

'''
'''--- src/helpers/quotes/getRandomQuoteId.js ---
import { quotes } from '~assets/quotes/quotes';

/**
 * Returns a valid random number id
 * @returns {number}
 */
export default function getRandomQuoteId() {
  return Math.floor(Math.random() * quotes.length).toString();
}

'''
'''--- src/helpers/quotes/index.js ---
import getQuoteById from '~helpers/quotes/getQuoteById';
import getRandomQuoteId from '~helpers/quotes/getRandomQuoteId';

export { getQuoteById, getRandomQuoteId };

'''
'''--- src/helpers/time/formatToDisplay.js ---
export default function formatToDisplay(num) {
  return (`00${num}`).slice(-2);
}

'''
'''--- src/helpers/time/formatToMs.js ---
export default function formatToMs(timestamp) {
  return Number(
    (() => {
      let timestampStr = timestamp.toString();
      if (timestampStr.length > 13) {
        return timestampStr.slice(0, 13);
      }
      if (timestampStr.length < 13) {
        /* eslint-disable-next-line no-plusplus */
        for (let i = timestampStr.length; i < 13; i++) {
          timestampStr += '0';
        }
        return timestampStr;
      }
      return timestampStr;
    })(),
  );
}

'''
'''--- src/helpers/time/humanizeTime.js ---
import humanizeDuration from 'humanize-duration';

import { formatToMs } from '~helpers/time';

const shortHumanizer = humanizeDuration.humanizer({
  language: 'short',
  languages: {
    short: {
      y: () => 'y',
      mo: () => 'mo',
      w: () => 'w',
      d: () => 'd',
      h: () => 'h',
      m: () => 'm',
      s: () => 's',
      ms: () => 'ms',
    },
  },
});

/* eslint-disable max-len */
/**
 * @typedef {Set<'y' | 'mo' | 'w' | 'd' | 'h' | 'm' | 's' | 'ms'>} UnitsArray
 *
 * @typedef {Object} Options
 * @property {number} [largest] - Number of units to display. The default is 1.
 * @property {boolean} [round] - Use true to round the smallest unit displayed. The default is true.
 * @property {string} [spacer] - String between each unit. The default is ' '.
 * @property {string} [delimiter] - String to display between the previous unit and the next value. The default is ', '.
 * @property {number} [maxDecimalPoints] - Number that defines a maximal decimal points for float values. The default is 0.
 * @property {UnitsArray} [units] - Use true to round the smallest unit displayed. The default is true.
 * @property {boolean} [short] - Use abbreviation if true. The default is false.
 */
/* eslint-enable max-len */

/**
 * There are no nanoseconds in JavaScript, so the max timestamp length is 13.
 * The only way to correctly calculate the date is to cut redundunt or add missing nums.
 *
 * This function calculates how much time passed from the given timestamp.
 *
 * @param {(string | number)} timestamp - String or number which will be converted to ms.
 *
 * @param {Options} options - Object with options.
 *
 * @returns {string} - Returns the parsed and humanized time in string representation.
 */

const defaultOptions = {
  largest: 1,
  round: true,
  spacer: ' ',
  delimiter: ', ',
  units: ['h', 'm', 's'],
  maxDecimalPoints: 0,
  short: false,
};

export default function humanizeTime(timestamp, options = defaultOptions) {
  const milliseconds = formatToMs(timestamp);

  const humanizer = options.short ? shortHumanizer : humanizeDuration;

  return (
    humanizer(Date.now() - milliseconds, {
      ...defaultOptions,
      ...options,
    }) || '0 seconds'
  );
}

'''
'''--- src/helpers/time/index.js ---
import formatToDisplay from './formatToDisplay';
import formatToMs from './formatToMs';
import humanizeTime from './humanizeTime';

export { formatToDisplay, formatToMs, humanizeTime };

'''
'''--- src/helpers/toTitleCase.js ---
/**
 * Takes string and returns string in TitleCase.
 * Handles only spaced string.
 * @param {string} str
 * @returns {string}
 */
export default function toTitleCase(str) {
  return typeof str === 'string' && str.length
    ? str
      .split(' ')
      .map((word) => word[0].toUpperCase() + word.slice(1).toLowerCase())
      .join(' ')
    : str;
}

'''
'''--- src/hooks/index.js ---
import useDetectClickOutside from './useDetectClickOutside';
import useHighestBid from './useHighestBid';
import useInterval from './useInterval';
import useIsAuctionExpired from './useIsAuctionExpired';
import usePrevious from './usePrevious';

export { useDetectClickOutside, useHighestBid, useInterval, useIsAuctionExpired, usePrevious };

'''
'''--- src/hooks/useDetectClickOutside.js ---
/* global document:true */
import { useEffect, useCallback } from 'react';

export default function useDetectClickOutside(ref, action) {
  const handleClickOutside = useCallback(
    (event) => {
      if (ref && ref.current && !ref.current.contains(event.target)) {
        action();
      }
    },
    [ref, action],
  );

  useEffect(() => {
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [handleClickOutside]);
}

'''
'''--- src/hooks/useHighestBid.js ---
import { useEffect, useState } from 'react';

import { formatToNears } from '~helpers/nears';

export default function useHighestBid(forSale) {
  const [highestBid, setHighestBid] = useState();

  useEffect(() => {
    if (forSale && forSale.bids.length) {
      setHighestBid(
        forSale.bids.reduce(
          (curr, next) => (formatToNears(next.amount) > formatToNears(curr.amount) ? next : curr),
          forSale.bids[0],
        ),
      );
    }
  }, [forSale]);

  return highestBid;
}

'''
'''--- src/hooks/useInterval.js ---
import { useEffect, useRef } from 'react';

export default function useInterval(callback = () => {}, interval = 1000) {
  const callbackRef = useRef();

  useEffect(() => {
    callbackRef.current = callback;
  });

  useEffect(() => {
    function onTick() {
      callbackRef.current();
    }

    const id = setInterval(onTick, interval);

    return () => {
      clearInterval(id);
    };
  }, [interval]);
}

'''
'''--- src/hooks/useIsAuctionExpired.js ---
import { useEffect, useState } from 'react';

import { formatToMs } from '~helpers/time';

export default function useIsAuctionExpired(expires) {
  const [isExpired, setIsExpired] = useState(false);

  useEffect(() => {
    setIsExpired(expires && Date.now() > formatToMs(expires));
  }, [expires]);

  return isExpired;
}

'''
'''--- src/hooks/usePrevious.js ---
import { useRef, useEffect } from 'react';

export default function usePrevious(value) {
  const ref = useRef();

  useEffect(() => {
    ref.current = value;
  });

  return ref.current;
}

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <link rel="apple-touch-icon" href="./favicon.ico" />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;600;800&display=swap"
      rel="stylesheet"
    />
    <title>NEAR Corgi</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
/* global document:true */
import React from 'react';
import ReactDOM from 'react-dom';

import * as nearAPI from 'near-api-js';

import fs from 'fs';

import getConfig from './config';

import { ContractContextProvider, MarketplaceContextProvider, NearContextProvider } from '~contexts';

import { formatToNears } from '~helpers/nears';

import { CorgiMethods, MarketplaceMethods } from '~constants/contractMethods';

import App from './App';

const corgiConfig = JSON.parse(fs.readFileSync('contract/config.json'));
const MINT_FEE = formatToNears(corgiConfig.mint_fee.replace(/_/g, ''));

// Initializing contract
async function InitContract() {
  const nearConfig = getConfig(process.env.NODE_ENV || 'development');

  // Initializing connection to the NEAR
  const near = await nearAPI.connect({
    deps: { keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore() },
    ...nearConfig,
  });

  // Needed to access wallet
  const walletConnection = new nearAPI.WalletConnection(near);

  // Load in account data
  let currentUser;
  if (walletConnection.getAccountId()) {
    currentUser = {
      accountId: walletConnection.getAccountId(),
      balance: (await walletConnection.account().state()).amount,
    };
  }

  // Initializing our contract APIs by contract name and configuration.
  const contract = new nearAPI.Contract(walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: [...CorgiMethods.viewMethods, ...MarketplaceMethods.viewMethods],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: [...CorgiMethods.changeMethods, ...MarketplaceMethods.changeMethods],
    // Sender is the account ID to initialize transactions.
    sender: walletConnection.getAccountId(),
  });

  return {
    contract,
    currentUser,
    nearConfig,
    walletConnection,
    near,
  };
}

window.nearInitPromise = InitContract()
  .then(({ contract, currentUser, nearConfig, walletConnection, near }) => {
    const app = (
      <NearContextProvider currentUser={currentUser} nearConfig={nearConfig} wallet={walletConnection} near={near}>
        <ContractContextProvider Contract={contract} mintFee={MINT_FEE}>
          <MarketplaceContextProvider Contract={contract}>
            <App />
          </MarketplaceContextProvider>
        </ContractContextProvider>
      </NearContextProvider>
    );

    ReactDOM.render(app, document.getElementById('root'));
  })
  .catch(console.error);

'''
'''--- src/jest.init.js ---
import 'regenerator-runtime/runtime';

'''
'''--- src/jsconfig.json ---
{
  "compilerOptions": {
    "module": "commonjs",
    "target": "es6",
    "baseUrl": ".",
    "paths": {
      "~assets/*": ["./assets/*"],
      "~constants/*": ["./constants/*"],
      "~contexts/*": ["./contexts/*"],
      "~helpers/*": ["./helpers/*"],
      "~hooks/*": ["./hooks/*"],
      "~modules/*": ["./modules/*"],
      "~router/*": ["./router/*"],
      "~types/*": ["./types/*"],
      "~validators/*": ["./validators/*"]
    }
  },
  "exclude": ["dist", "node_modules", "**/node_modules/*"]
}

'''
'''--- src/modules/common/Colorpicker/index.js ---
import Colorpicker from './Colorpicker';

export default Colorpicker;

'''
'''--- src/modules/common/Confirmation/index.js ---
import Confirmation from './Confirmation';

export default Confirmation;

'''
'''--- src/modules/common/Dropdown/DropdownItem/index.js ---
import DropdownItem from './DropdownItem';

export default DropdownItem;

'''
'''--- src/modules/common/Dropdown/index.js ---
import Dropdown from './Dropdown';

export default Dropdown;

'''
'''--- src/modules/common/ExternalLink/index.js ---
import ExternalLink from './ExternalLink';

export default ExternalLink;

'''
'''--- src/modules/common/Input/index.js ---
import Input from './Input';

export default Input;

'''
'''--- src/modules/common/NearIcon/index.js ---
import NearIcon from './NearIcon';

export default NearIcon;

'''
'''--- src/modules/common/Owner/index.js ---
import Owner from './Owner';

export default Owner;

'''
'''--- src/modules/common/buttons/Button/index.js ---
import Button from './Button';

export default Button;

'''
'''--- src/modules/common/buttons/CheckMarkButton/index.js ---
import CheckMarkButton from './CheckMarkButton';

export default CheckMarkButton;

'''
'''--- src/modules/common/buttons/MintingLink/index.js ---
import MintingLink from './MintingLink';

export default MintingLink;

'''
'''--- src/modules/common/buttons/index.js ---
import Button from './Button';
import CheckMarkButton from './CheckMarkButton';
import MintingLink from './MintingLink';

export { Button, CheckMarkButton, MintingLink };

'''
'''--- src/modules/common/corgi/Activity/index.js ---
import Activity from './Activity';

export default Activity;

'''
'''--- src/modules/common/corgi/CorgiAnimations/index.js ---
import CorgiAnimOne from './CorgiAnimOne';
import CorgiAnimTwo from './CorgiAnimTwo';
import CorgiAnimThree from './CorgiAnimThree';
import CorgiAnimFour from './CorgiAnimFour';

import './CorgiAnim.scss';

export { CorgiAnimOne, CorgiAnimTwo, CorgiAnimThree, CorgiAnimFour };

'''
'''--- src/modules/common/corgi/CorgiCard/index.js ---
import CorgiCard from './CorgiCard';

export default CorgiCard;

'''
'''--- src/modules/common/corgi/CorgiLink/index.js ---
import CorgiLink from './CorgiLink';

export default CorgiLink;

'''
'''--- src/modules/common/corgi/CorgiPNG/index.js ---
import CorgiPNG from './CorgiPNG';

export default CorgiPNG;

'''
'''--- src/modules/common/corgi/CorgiPhotos/index.js ---
import CorgiCommon from './CorgiCommon';
import CorgiUncommon from './CorgiUncommon';
import CorgiRare from './CorgiRare';
import CorgiVeryRare from './CorgiVeryRare';
import SwitchCorgiPhoto from './SwitchCorgiPhoto';

export { CorgiCommon, CorgiUncommon, CorgiRare, CorgiVeryRare, SwitchCorgiPhoto };

'''
'''--- src/modules/common/corgi/CorgiRate/index.js ---
import CorgiRate from './CorgiRate';

export default CorgiRate;

'''
'''--- src/modules/common/corgi/CorgiSVG/index.js ---
import CorgiSVG from './CorgiSVG';

export default CorgiSVG;

'''
'''--- src/modules/common/corgi/CorgisShowCase/index.js ---
import CorgisShowCase from './CorgisShowCase';

export default CorgisShowCase;

'''
'''--- src/modules/common/corgi/Egg/index.js ---
import Egg from './Egg';

export default Egg;

'''
'''--- src/modules/common/corgi/Quote/index.js ---
import Quote from './Quote';

export default Quote;

'''
'''--- src/modules/common/corgi/RarityString/index.js ---
import RarityString from './RarityString';

export default RarityString;

'''
'''--- src/modules/common/corgi/actions/CorgiActions/index.js ---
import CorgiActions from './CorgiActions';

export default CorgiActions;

'''
'''--- src/modules/common/corgi/actions/Share/index.js ---
import Share from './Share';

export default Share;

'''
'''--- src/modules/common/corgi/actions/Transfer/index.js ---
import Transfer from './Transfer';

export default Transfer;

'''
'''--- src/modules/common/corgi/actions/index.js ---
import CorgiActions from './CorgiActions';
import Share from './Share';
import Transfer from './Transfer';

import { DeletePopup, GiftPopup, SharePopup, TradePopup, WithdrawPopup } from './popups';

export { CorgiActions, Share, Transfer, DeletePopup, GiftPopup, SharePopup, TradePopup, WithdrawPopup };

'''
'''--- src/modules/common/corgi/actions/popups/index.js ---
import DeletePopup from './DeletePopup';
import GiftPopup from './GiftPopup';
import SharePopup from './SharePopup';
import TradePopup from './TradePopup';
import WithdrawPopup from './WithdrawPopup';

export { DeletePopup, GiftPopup, SharePopup, TradePopup, WithdrawPopup };

'''
'''--- src/modules/common/corgi/auction/AuctionTimer/index.js ---
import AuctionTimer from './AuctionTimer';

export default AuctionTimer;

'''
'''--- src/modules/common/corgi/auction/BidAmount/index.js ---
import BidAmount from './BidAmount';

export default BidAmount;

'''
'''--- src/modules/common/corgi/auction/HighestBid/index.js ---
import HighestBid from './HighestBid';

export default HighestBid;

'''
'''--- src/modules/common/corgi/auction/index.js ---
import AuctionTimer from './AuctionTimer';
import BidAmount from './BidAmount';
import HighestBid from './HighestBid';

export { AuctionTimer, BidAmount, HighestBid };

'''
'''--- src/modules/common/corgi/index.js ---
import { CorgiAnimOne, CorgiAnimTwo, CorgiAnimThree, CorgiAnimFour } from './CorgiAnimations';

import { CorgiCommon, CorgiUncommon, CorgiRare, CorgiVeryRare, SwitchCorgiPhoto } from './CorgiPhotos';

import {
  CorgiActions,
  Share,
  Transfer,
  DeletePopup,
  GiftPopup,
  SharePopup,
  TradePopup,
  WithdrawPopup,
} from './actions';

import { AuctionTimer, BidAmount, HighestBid } from './auction';

import CorgiCard from './CorgiCard';
import CorgiLink from './CorgiLink';
import CorgiRate from './CorgiRate';
import CorgisShowCase from './CorgisShowCase';
import CorgiSVG from './CorgiSVG';
import CorgiPNG from './CorgiPNG';

import Egg from './Egg';

import Activity from './Activity';
import RarityString from './RarityString';
import Quote from './Quote';

export {
  CorgiCard,
  CorgiLink,
  CorgisShowCase,
  CorgiSVG,
  CorgiPNG,
  CorgiAnimOne,
  CorgiAnimTwo,
  CorgiAnimThree,
  CorgiAnimFour,
  CorgiCommon,
  CorgiUncommon,
  CorgiRare,
  CorgiVeryRare,
  CorgiRate,
  SwitchCorgiPhoto,
  Egg,
  Activity,
  RarityString,
  Quote,
  CorgiActions,
  Share,
  Transfer,
  DeletePopup,
  GiftPopup,
  SharePopup,
  TradePopup,
  WithdrawPopup,
  AuctionTimer,
  BidAmount,
  HighestBid,
};

'''
'''--- src/modules/common/index.js ---
import { Button, CheckMarkButton, MintingLink } from './buttons';
import { Popup, PopupWrapper } from './popups';
import { BasicSpinner, CorgiSpinner } from './spinners';

import Colorpicker from './Colorpicker';
import Confirmation from './Confirmation';
import Dropdown from './Dropdown';
import ExternalLink from './ExternalLink';
import Input from './Input';
import NearIcon from './NearIcon';
import Owner from './Owner';

import {
  CorgiCard,
  CorgiLink,
  CorgisShowCase,
  CorgiSVG,
  CorgiAnimOne,
  CorgiAnimTwo,
  CorgiAnimThree,
  CorgiAnimFour,
  CorgiCommon,
  CorgiUncommon,
  CorgiRare,
  CorgiVeryRare,
  CorgiRate,
  SwitchCorgiPhoto,
  Egg,
  RarityString,
  Quote,
  CorgiActions,
} from './corgi';

export {
  Button,
  CheckMarkButton,
  MintingLink,
  Colorpicker,
  Confirmation,
  Dropdown,
  Egg,
  RarityString,
  Quote,
  CorgiActions,
  ExternalLink,
  Input,
  NearIcon,
  Owner,
  Popup,
  PopupWrapper,
  BasicSpinner,
  CorgiSpinner,
  CorgiCard,
  CorgiLink,
  CorgisShowCase,
  CorgiSVG,
  CorgiAnimOne,
  CorgiAnimTwo,
  CorgiAnimThree,
  CorgiAnimFour,
  CorgiCommon,
  CorgiUncommon,
  CorgiRare,
  CorgiVeryRare,
  CorgiRate,
  SwitchCorgiPhoto,
};

'''
'''--- src/modules/common/popups/Popup/index.js ---
import Popup from './Popup';

export default Popup;

'''
'''--- src/modules/common/popups/PopupWrapper/index.js ---
import PopupWrapper from './PopupWrapper';

export default PopupWrapper;

'''
'''--- src/modules/common/popups/index.js ---
import Popup from './Popup';
import PopupWrapper from './PopupWrapper';

export { Popup, PopupWrapper };

'''
'''--- src/modules/common/spinners/BasicSpinner/index.js ---
import BasicSpinner from './BasicSpinner';

export default BasicSpinner;

'''
'''--- src/modules/common/spinners/CorgiSpinner/index.js ---
import CorgiSpinner from './CorgiSpinner';

export default CorgiSpinner;

'''
'''--- src/modules/common/spinners/index.js ---
import BasicSpinner from './BasicSpinner';
import CorgiSpinner from './CorgiSpinner';

export { BasicSpinner, CorgiSpinner };

'''
'''--- src/modules/corgi/components/AuctionCard/index.js ---
import AuctionCard from './AuctionCard';

export default AuctionCard;

'''
'''--- src/modules/corgi/components/BidDifference/index.js ---
import BidDifference from './BidDifference';

export default BidDifference;

'''
'''--- src/modules/corgi/components/BidHistory/index.js ---
import BidHistory from './BidHistory';

export default BidHistory;

'''
'''--- src/modules/corgi/components/BidInput/index.js ---
import BidInput from './BidInput';

export default BidInput;

'''
'''--- src/modules/corgi/components/BidTile/index.js ---
import BidTile from './BidTile';

export default BidTile;

'''
'''--- src/modules/corgi/components/ClearanceButton/index.js ---
import ClearanceButton from './ClearanceButton';

export default ClearanceButton;

'''
'''--- src/modules/corgi/components/TimeTile/index.js ---
import TimeTile from './TimeTile';

export default TimeTile;

'''
'''--- src/modules/corgi/components/index.js ---
import AuctionCard from './AuctionCard';
import BidDifference from './BidDifference';
import BidHistory from './BidHistory';
import BidInput from './BidInput';
import BidTile from './BidTile';
import ClearanceButton from './ClearanceButton';
import TimeTile from './TimeTile';

export { AuctionCard, BidDifference, BidHistory, BidInput, BidTile, ClearanceButton, TimeTile };

'''
'''--- src/modules/corgi/page/index.js ---
import CorgiPage from './CorgiPage';

export default CorgiPage;

'''
'''--- src/modules/footer/Footer/index.js ---
import Footer from './Footer';

export default Footer;

'''
'''--- src/modules/footer/NearCommunity/index.js ---
import NearCommunity from './NearCommunity';

export default NearCommunity;

'''
'''--- src/modules/footer/NearWatermark/index.js ---
import NearWatermark from './NearWatermark';

export default NearWatermark;

'''
'''--- src/modules/footer/index.js ---
import Footer from './Footer';
import NearCommunity from './NearCommunity';
import NearWatermark from './NearWatermark';

export { Footer, NearCommunity, NearWatermark };

'''
'''--- src/modules/header/CorgisLogo/index.js ---
import CorgisLogo from './CorgisLogo';

export default CorgisLogo;

'''
'''--- src/modules/header/Header/index.js ---
import Header from './Header';

export default Header;

'''
'''--- src/modules/header/Nav/index.js ---
import Nav from './Nav';

export default Nav;

'''
'''--- src/modules/header/index.js ---
import Header from './Header';
import Nav from './Nav';
import CorgisLogo from './CorgisLogo';

export { Header, Nav, CorgisLogo };

'''
'''--- src/modules/home/components/index.js ---
import Poster from './Poster/Poster';

export { Poster };

'''
'''--- src/modules/home/page/index.js ---
import HomePage from './HomePage';

export default HomePage;

'''
'''--- src/modules/marketplace/page/index.js ---
import MarketplacePage from './MarketplacePage';

export default MarketplacePage;

'''
'''--- src/modules/minting/components/MintingAnimation/index.js ---
import MintingAnimation from './MintingAnimation';

export default MintingAnimation;

'''
'''--- src/modules/minting/components/MintingDescription/index.js ---
import MintingDescription from './MintingDescription';

export default MintingDescription;

'''
'''--- src/modules/minting/components/MintingForm/index.js ---
import MintingForm from './MintingForm';

export default MintingForm;

'''
'''--- src/modules/minting/components/MintingScreen/index.js ---
import MintingScreen from './MintingScreen';

export default MintingScreen;

'''
'''--- src/modules/minting/components/index.js ---
import MintingAnimation from './MintingAnimation';
import MintingDescription from './MintingDescription';
import MintingForm from './MintingForm';
import MintingScreen from './MintingScreen';

export { MintingAnimation, MintingDescription, MintingForm, MintingScreen };

'''
'''--- src/modules/minting/page/index.js ---
import MintingPage from './MintingPage';

export default MintingPage;

'''
'''--- src/modules/pages/index.js ---
import CorgiPage from '~modules/corgi/page';
import HomePage from '~modules/home/page';
import MintingPage from '~modules/minting/page';
import UserPage from '~modules/user/page';
import MarketplacePage from '~modules/marketplace/page';

export { CorgiPage, HomePage, MintingPage, UserPage, MarketplacePage };

'''
'''--- src/modules/user/page/index.js ---
import UserPage from './UserPage';

export default UserPage;

'''
'''--- src/types/BidTypes.js ---
import PropTypes from 'prop-types';

export const BidType = {
  amount: PropTypes.string,
  bidder: PropTypes.string,
  timestamp: PropTypes.string,
};

export const BidTypeShape = PropTypes.shape(BidType);

export const BidsArrayType = PropTypes.arrayOf(BidTypeShape);

'''
'''--- src/types/CorgiTypes.js ---
import PropTypes from 'prop-types';

import { RATES } from '~constants/corgi';

export const CorgiType = {
  id: PropTypes.string,
  name: PropTypes.string,
  quote: PropTypes.string,
  color: PropTypes.string,
  background_color: PropTypes.string,
  rate: PropTypes.oneOf([RATES.COMMON, RATES.UNCOMMON, RATES.RARE, RATES.VERY_RARE]),
  owner: PropTypes.string,
  sender: PropTypes.string,
  created: PropTypes.number,
  modified: PropTypes.number,
  for_sale: PropTypes.any,
};

export const CorgiTypeShape = PropTypes.shape(CorgiType);

export const CorgisArrayType = PropTypes.arrayOf(CorgiTypeShape);

'''
'''--- src/types/NearTypes/NearConfigType.js ---
import PropTypes from 'prop-types';

export const NearConfigType = { contractName: PropTypes.string.isRequired };

export const NearConfigTypeShape = PropTypes.shape(NearConfigType);

'''
'''--- src/types/NearTypes/NearType.js ---
import PropTypes from 'prop-types';

export const NearType = { connection: PropTypes.object.isRequired };

export const NearTypeShape = PropTypes.shape(NearType);

'''
'''--- src/types/NearTypes/UserTypes.js ---
import PropTypes from 'prop-types';

export const UserType = { accountId: PropTypes.string.isRequired, balance: PropTypes.string.isRequired };

export const UserTypeShape = PropTypes.shape(UserType);

'''
'''--- src/types/NearTypes/WalletType.js ---
import PropTypes from 'prop-types';

export const WalletType = { requestSignIn: PropTypes.func.isRequired, signOut: PropTypes.func.isRequired };

export const WalletTypeShape = PropTypes.shape(WalletType);

'''
'''--- src/types/NearTypes/index.js ---
import { NearConfigType, NearConfigTypeShape } from './NearConfigType';
import { NearType, NearTypeShape } from './NearType';
import { UserType, UserTypeShape } from './UserTypes';
import { WalletType, WalletTypeShape } from './WalletType';

export {
  NearConfigType,
  NearConfigTypeShape,
  NearType,
  NearTypeShape,
  UserType,
  UserTypeShape,
  WalletType,
  WalletTypeShape,
};

'''
'''--- src/types/PopupTypes.js ---
import PropTypes from 'prop-types';
import { ReactChildrenTypeRequired } from '~types/ReactChildrenTypes';

export const PopupType = {
  title: PropTypes.string,
  position: PropTypes.oneOf(['top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right', 'right', 'left']),
  children: ReactChildrenTypeRequired,
};

export const PopupTypeShape = PropTypes.shape(PopupType);

'''
'''--- src/types/ReactChildrenTypes.js ---
import PropTypes from 'prop-types';

export const ReactChildrenType = PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]);

export const ReactChildrenTypeRequired = ReactChildrenType.isRequired;

'''
'''--- src/types/StylesType.js ---
import PropTypes from 'prop-types';

const StylesType = PropTypes.shape({
  alignContent: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  alignItems: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  alignSelf: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  all: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  animation: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  animationDelay: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  animationDirection: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  animationDuration: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  animationFillMode: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  animationIterationCount: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  animationName: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  animationPlayState: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  animationTimingFunction: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  backfaceVisibility: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  background: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  backgroundAttachment: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  backgroundBlendMode: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  backgroundClip: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  backgroundColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  backgroundImage: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  backgroundOrigin: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  backgroundPosition: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  backgroundRepeat: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  backgroundSize: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  blockSize: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  border: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderBlockEnd: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderBlockEndColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderBlockEndStyle: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderBlockEndWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderBlockStart: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderBlockStartColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderBlockStartStyle: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderBlockStartWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderBottom: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderBottomColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderBottomLeftRadius: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderBottomRightRadius: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderBottomStyle: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderBottomWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderCollapse: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderImage: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderImageOutset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderImageRepeat: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderImageSlice: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderImageSource: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderImageWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderInlineEnd: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderInlineEndColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderInlineEndStyle: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderInlineEndWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderInlineStart: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderInlineStartColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderInlineStartStyle: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderInlineStartWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderLeft: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderLeftColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderLeftStyle: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderLeftWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderRadius: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderRight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderRightColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderRightStyle: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderRightWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderSpacing: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderStyle: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderTop: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderTopColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderTopLeftRadius: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderTopRightRadius: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderTopStyle: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderTopWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  borderWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  bottom: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  boxDecorationBreak: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  boxShadow: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  boxSizing: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  breakAfter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  breakBefore: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  breakInside: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  captionSide: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  caretColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  ch: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  clear: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  clip: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  clipPath: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  cm: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  columnCount: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  columnFill: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  columnGap: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  columnRule: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  columnRuleColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  columnRuleStyle: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  columnRuleWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  columnSpan: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  columnWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  columns: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  content: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  counterIncrement: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  counterReset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  cursor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  deg: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  direction: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  display: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  dpcm: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  dpi: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  dppx: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  em: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  emptyCells: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  ex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  filter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  flex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  flexBasis: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  flexDirection: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  flexFlow: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  flexGrow: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  flexShrink: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  flexWrap: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  float: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  font: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  fontFamily: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  fontFeatureSettings: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  fontKerning: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  fontLanguageOverride: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  fontSize: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  fontSizeAdjust: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  fontStretch: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  fontStyle: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  fontSynthesis: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  fontVariant: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  fontVariantAlternates: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  fontVariantCaps: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  fontVariantEastAsian: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  fontVariantLigatures: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  fontVariantNumeric: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  fontVariantPosition: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  fontWeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  fr: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  grad: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  grid: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  gridArea: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  gridAutoColumns: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  gridAutoFlow: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  gridAutoRows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  gridColumn: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  gridColumnEnd: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  gridColumnGap: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  gridColumnStart: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  gridGap: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  gridRow: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  gridRowEnd: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  gridRowGap: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  gridRowStart: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  gridTemplate: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  gridTemplateAreas: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  gridTemplateColumns: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  gridTemplateRows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  hangingPunctuation: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  hyphens: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  hz: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  imageOrientation: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  imageRendering: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  imageResolution: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  in: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  inherit: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  initial: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  inlineSize: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  isolation: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  justifyContent: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  khz: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  left: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  letterSpacing: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  lineBreak: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  lineHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  listStyle: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  listStyleImage: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  listStylePosition: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  listStyleType: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  margin: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  marginBlockEnd: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  marginBlockStart: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  marginBottom: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  marginInlineEnd: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  marginInlineStart: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  marginLeft: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  marginRight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  marginTop: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  mask: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  maskClip: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  maskComposite: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  maskImage: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  maskMode: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  maskOrigin: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  maskPosition: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  maskRepeat: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  maskSize: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  maskType: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  maxHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  maxWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  minBlockSize: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  minHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  minInlineSize: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  minWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  mixBlendMode: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  mm: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  ms: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  objectFit: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  objectPosition: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  offsetBlockEnd: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  offsetBlockStart: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  offsetInlineEnd: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  offsetInlineStart: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  opacity: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  order: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  orphans: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  outline: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  outlineColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  outlineOffset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  outlineStyle: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  outlineWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  overflow: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  overflowWrap: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  overflowX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  overflowY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  padding: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  paddingBlockEnd: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  paddingBlockStart: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  paddingBottom: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  paddingInlineEnd: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  paddingInlineStart: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  paddingLeft: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  paddingRight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  paddingTop: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  pageBreakAfter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  pageBreakBefore: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  pageBreakInside: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  pc: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  perspective: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  perspectiveOrigin: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  pointerEvents: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  position: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  pt: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  px: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  q: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  quotes: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  rad: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  rem: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  resize: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  revert: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  right: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  rubyAlign: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  rubyMerge: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  rubyPosition: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  s: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  scrollBehavior: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  scrollSnapCoordinate: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  scrollSnapDestination: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  scrollSnapType: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  shapeImageThreshold: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  shapeMargin: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  shapeOutside: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  tabSize: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  tableLayout: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  textAlign: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  textAlignLast: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  textCombineUpright: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  textDecoration: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  textDecorationColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  textDecorationLine: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  textDecorationStyle: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  textEmphasis: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  textEmphasisColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  textEmphasisPosition: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  textEmphasisStyle: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  textIndent: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  textJustify: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  textOrientation: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  textOverflow: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  textRendering: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  textShadow: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  textTransform: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  textUnderlinePosition: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  top: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  touchAction: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  transform: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  transformBox: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  transformOrigin: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  transformStyle: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  transition: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  transitionDelay: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  transitionDuration: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  transitionProperty: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  transitionTimingFunction: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  turn: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  unicodeBidi: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  unset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  verticalAlign: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  vh: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  visibility: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  vmax: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  vmin: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  vw: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  whiteSpace: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  widows: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  willChange: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  wordBreak: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  wordSpacing: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  wordWrap: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  writingMode: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  zIndex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  overflowScrolling: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  userSelect: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
});

export default StylesType;

'''
'''--- src/validators/checkProfanity.js ---
import Filter from 'bad-words';

const badWordsFilter = new Filter();

const removeWords = [
  'blood',
  'bloody',
  'God',
  'god-dam',
  'god-damned',
  'goddamn',
  'goddamned',
  'hell',
  'hells',
  'hoar',
  'knob',
  'pawn',
  'sadist',
];

badWordsFilter.removeWords(...removeWords);

export default function checkProfanity(str) {
  return badWordsFilter.isProfane(str);
}

'''
'''--- src/validators/index.js ---
import checkProfanity from './checkProfanity';
import validateCorgiName from './validateCorgiName';

export { checkProfanity, validateCorgiName };

'''
'''--- src/validators/validateCorgiName.js ---
import { CORGI_VALIDATION_MESSAGES, NAME_LIMIT } from '~constants/validation/corgi';

import { checkProfanity } from '~validators/';

export default function validateCorgiName(name) {
  if (name.length > NAME_LIMIT) {
    return CORGI_VALIDATION_MESSAGES.LIMIT;
  }

  if (checkProfanity(name)) {
    return CORGI_VALIDATION_MESSAGES.PROFANE;
  }

  return CORGI_VALIDATION_MESSAGES.SUCCESS;
}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in shell, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id" />
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''
'''--- test/api.test.js ---
const { Near, KeyPair, Contract, keyStores: { InMemoryKeyStore }, utils } = require('near-api-js');
const { CustomConsole } = require('@jest/console');
const getConfig = require('../src/config');
const fs = require('fs');

global.console = new CustomConsole(process.stdout, process.stderr, (_type, message) => message);

const config = getConfig('development');

const corgiConfig = JSON.parse(fs.readFileSync('contract/config.json'));
const GAS = 300000000000000;
const MINT_FEE = corgiConfig.mint_fee.replace(/_/g, '');
const PAGE_LIMIT = corgiConfig.page_limit;
const METHODS = JSON.parse(fs.readFileSync('contract/methods.json'));

async function initContractWithNewTestAccount() {
  const keyStore = new InMemoryKeyStore();

  const near = new Near({
    deps: { keyStore: keyStore },
    ...config
  });

  const generateUniqueAccountId = function (prefix) {
    return `${prefix}-${Date.now()}-${Math.round(Math.random() * 1000000)}`;
  }

  const newKeyPair = KeyPair.fromRandom('ed25519');
  const account = await near.createAccount(generateUniqueAccountId('test'), newKeyPair.getPublicKey());

  keyStore.setKey(config.networkId, account.accountId, newKeyPair);

  const contract = new Contract(account, config.contractName, {
    ...METHODS,
    signer: account.accountId
  });

  console.log(contract);

  return {
    contract,
    accountId: account.accountId,
    account,
  };
}

describe('Corgis contract integration tests', () => {

  let alice, bob, ted;

  beforeAll(async () => {
    alice = await initContractWithNewTestAccount();
    bob = await initContractWithNewTestAccount();
    ted = await initContractWithNewTestAccount();
  });

  afterAll(async () => {
    const accid = 'corgis-nft.testnet';
    await alice.account.deleteAccount(accid);
    await bob.account.deleteAccount(accid);
    await ted.account.deleteAccount(accid);
  });

  test('check that test account are actually different', async () => {
    expect(alice.accountId).not.toBe(bob.accountId);
  });

  test('create a corgi', async () => {
    const initial = await initialState(alice);

    const newCorgi = await create_corgi(alice.contract, { name: 'dog', quote: 'best doggy ever', color: 'red', background_color: 'yellow' });
    console.debug('create corgi', newCorgi);

    const globalCorgisCount = await alice.contract.get_global_corgis();
    expect(globalCorgisCount.length).toBe(Math.min(initial.globalCorgis.length + 1, PAGE_LIMIT));

    const corgiById = await alice.contract.get_corgi_by_id({ id: newCorgi.id });
    expect(corgiById.owner).toBe(alice.accountId);

    const corgisByOwner = await alice.contract.get_corgis_by_owner({ owner: alice.accountId });
    expect(corgisByOwner.length).toBe(initial.corgisByOwner.length + 1);
    expect(corgisByOwner.map(corgi => corgi.id)).toContain(newCorgi.id);
  });

  test('create and delete a corgi', async () => {
    const initial = await initialState(alice);

    const newCorgi = await create_corgi(alice.contract, { name: 'dog', quote: 'best doggy ever', color: 'red', background_color: 'yellow' });
    console.debug('create corgi', newCorgi);

    {
      const corgisByOwner = await alice.contract.get_corgis_by_owner({ owner: alice.accountId });
      expect(corgisByOwner.length).toBe(initial.corgisByOwner.length + 1);
    }

    await alice.contract.delete_corgi({ id: newCorgi.id });

    {
      const corgisByOwner = await alice.contract.get_corgis_by_owner({ owner: alice.accountId });
      expect(corgisByOwner.length).toBe(initial.corgisByOwner.length);
    }
  });

  test('create a few corgis', async () => {
    const initial = await initialState(alice);

    const newCorgis = [];
    for (let i = 0; i < PAGE_LIMIT + 1; i++) {
      const newCorgi = await create_corgi(alice.contract, { name: 'dog', quote: 'best doggy ever', color: 'red', background_color: 'yellow' });
      newCorgis.push(newCorgi);
    }

    const globalCorgis = await alice.contract.get_global_corgis();
    expect(globalCorgis.length).toBe(PAGE_LIMIT);

    for (let i = 0; i < 5; i++) {
      const corgiByOwner = await alice.contract.get_corgi_by_id({ id: newCorgis[i].id });
      expect(corgiByOwner.owner).toBe(alice.accountId);
    }

    const corgisByOwner = await alice.contract.get_corgis_by_owner({ owner: alice.accountId });
    expect(corgisByOwner.length).toBe(initial.corgisByOwner.length + newCorgis.length);
  });

  test('create and delete a few corgis', async () => {
    const initial = await initialState(alice);

    const newCorgis = [];
    for (let i = 0; i < PAGE_LIMIT + 2; i++) {
      const newCorgi = await create_corgi(alice.contract, { name: 'dog', quote: 'best doggy ever', color: 'red', background_color: 'yellow' });
      console.debug('create corgi', newCorgi);
      newCorgis.push(newCorgi);
    }

    const checkCorgis = async function () {
      const globalCorgis = await alice.contract.get_global_corgis();
      expect(globalCorgis.length).toBe(PAGE_LIMIT);

      const corgisByOwner = await alice.contract.get_corgis_by_owner({ owner: alice.accountId });
      expect(corgisByOwner.length).toBe(initial.corgisByOwner.length + newCorgis.length);
    }

    const deleteCorgi = async function (i) {
      const [deletedCorgi] = newCorgis.splice(i, 1);
      await alice.contract.delete_corgi({ id: deletedCorgi.id });
      await checkCorgis();
    }

    await checkCorgis();

    await deleteCorgi(1);
    await deleteCorgi(3);
  });

  test('transfer corgi', async () => {
    const newCorgi = await create_corgi(alice.contract, { name: 'dog', quote: 'best doggy ever', color: 'red', background_color: 'yellow' });

    {
      const corgiById = await alice.contract.get_corgi_by_id({ id: newCorgi.id });
      expect(corgiById.owner).toBe(alice.accountId);
      const corgisByOwner = await alice.contract.get_corgis_by_owner({ owner: alice.accountId });
      expect(corgisByOwner.map(corgi => corgi.id)).toContain(newCorgi.id);
    }

    await alice.contract.transfer_corgi({ receiver: bob.accountId, id: newCorgi.id });

    {
      const corgiById = await bob.contract.get_corgi_by_id({ id: newCorgi.id });
      expect(corgiById.owner).toBe(bob.accountId);
      const corgisByOwner = await bob.contract.get_corgis_by_owner({ owner: bob.accountId });
      expect(corgisByOwner.map(corgi => corgi.id)).toContain(newCorgi.id);
    }

    {
      const corgiById = await alice.contract.get_corgi_by_id({ id: newCorgi.id });
      expect(corgiById.owner).toBe(bob.accountId);
      const corgisByOwner = await alice.contract.get_corgis_by_owner({ owner: alice.accountId });
      expect(corgisByOwner.map(corgi => corgi.id)).not.toContain(newCorgi.id);
    }
  });

  test('trade a corgi, cleared by owner', async () => {

    balance(alice.account, 'alice');

    const newCorgi = await create_corgi(alice.contract, { name: 'dog', quote: 'best doggy ever', color: 'red', background_color: 'yellow' });
    await alice.contract.add_item_for_sale({ token_id: newCorgi.id, duration: 30 });

    await bid_for_item(bob.contract, { token_id: newCorgi.id }, '20');
    await bid_for_item(ted.contract, { token_id: newCorgi.id }, '50');
    await bid_for_item(bob.contract, { token_id: newCorgi.id }, '40');

    await alice.contract.get_items_for_sale();

    await sleep(30);
    await alice.contract.clearance_for_item({ token_id: newCorgi.id }, GAS);

    await balance(alice.account, 'alice');
    await balance(bob.account, 'bob');
    await balance(ted.account, 'ted');

    const corgiById = await alice.contract.get_corgi_by_id({ id: newCorgi.id });
    expect(corgiById.owner).toBe(bob.accountId);
  });

  test('trade a corgi, cleared by highest bidder', async () => {

    balance(alice.account, 'alice');

    const newCorgi = await create_corgi(alice.contract, { name: 'dog', quote: 'best doggy ever', color: 'red', background_color: 'yellow' });
    await alice.contract.add_item_for_sale({ token_id: newCorgi.id, duration: 30 });

    await bid_for_item(bob.contract, { token_id: newCorgi.id }, '20');
    await bid_for_item(ted.contract, { token_id: newCorgi.id }, '50');
    await bid_for_item(bob.contract, { token_id: newCorgi.id }, '40');

    await alice.contract.get_items_for_sale();

    await sleep(30);
    await bob.contract.clearance_for_item({ token_id: newCorgi.id }, GAS);

    await balance(alice.account, 'alice');
    await balance(bob.account, 'bob');
    await balance(ted.account, 'ted');

    const corgiById = await alice.contract.get_corgi_by_id({ id: newCorgi.id });
    expect(corgiById.owner).toBe(bob.accountId);
  });

});

async function initialState(user) {
  const globalCorgis = await user.contract.get_global_corgis();
  const corgisByOwner = await user.contract.get_corgis_by_owner({ owner: user.accountId });
  return { globalCorgis, corgisByOwner };
}

async function create_corgi(contract, args) {
  const newCorgi = await contract.create_corgi(args, GAS, MINT_FEE);
  return newCorgi;
}

async function bid_for_item(contract, args, amount) {
  await contract.bid_for_item(args, GAS, utils.format.parseNearAmount(amount));
}

function sleep(seconds) {
  return new Promise((resolve) => {
    setTimeout(resolve, seconds * 1000);
  });
}

async function balance(account, user) {
  const state = await account.state();
  console.log(user);
  console.log(state);
}

'''
'''--- test/chart.html ---
<!DOCTYPE html>
<html lang="en" style="font-family: 'Source Code Pro', monospace">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="../node_modules/chart.js/dist/Chart.bundle.js"></script>
    <script src="data.js"></script>
    <title>Storage Cost - Rust</title>
</head>
<header style="text-align: center">
    <h2 style="margin-bottom: 0">Storage Cost</h2>
    <h3 style="margin-top: 0">...::[ RUST Contract ]::...</h3>
</header>

<body>
    <div style="width: 90%; float: left">
        <canvas id="cid" width="800" height="400"></canvas>
    </div>
    <script>
        const ctx = document.getElementById('cid');
        const keys = data.map(entry => entry.key);
        const values = data.map(entry => entry.value);
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: keys,
                datasets: [{
                    data: values
                }]
            },
            options: {
                legend: {
                    display: false,
                }
            }
        });
    </script>
</body>

</html>
'''