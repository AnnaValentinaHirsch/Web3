*GitHub Repository "kontext-app/roadmap"*

'''--- .eslintrc.json ---
{
  "extends": "next/core-web-vitals"
}

'''
'''--- .github/ISSUE_TEMPLATE/bug_report.md ---
---
name: Bug report
about: Create a report to help us improve
title: ''
labels: bug, open
assignees: ''

---

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.

'''
'''--- .github/ISSUE_TEMPLATE/bug_report.yml ---
name: Bug Report
description: File a bug report
title: "[Bug]: "
labels: ["bug", "open"]
body:
  - type: markdown
    attributes:
      value: |
        Thanks for taking the time to fill out this bug report!
  - type: input
    id: contact
    attributes:
      label: Contact Details
      description: How can we get in touch with you if we need more info?
      placeholder: ex. email@example.com
    validations:
      required: false
  - type: textarea
    id: what-happened
    attributes:
      label: What happened?
      description: Also tell us, what did you expect to happen?
      placeholder: Tell us what you see!
      value: "A bug happened!"
    validations:
      required: true
  - type: dropdown
    id: version
    attributes:
      label: Version
      description: What version of our software are you running?
      options:
        - 1.0.2 (Default)
        - 1.0.3 (Edge)
    validations:
      required: true
  - type: dropdown
    id: browsers
    attributes:
      label: What browsers are you seeing the problem on?
      multiple: true
      options:
        - Firefox
        - Chrome
        - Safari
        - Microsoft Edge
  - type: textarea
    id: logs
    attributes:
      label: Relevant log output
      description: Please copy and paste any relevant log output. This will be automatically formatted into code, so no need for backticks.
      render: shell
  - type: checkboxes
    id: terms
    attributes:
      label: Code of Conduct
      description: By submitting this issue, you agree to follow our [Code of Conduct](https://example.com)
      options:
        - label: I agree to follow this project's Code of Conduct
          required: true

'''
'''--- .github/ISSUE_TEMPLATE/config.yml ---
blank_issues_enabled: true
contact_links:
  - name: Join the Better Discord Community
    url: https://discord.com/invite/wwwwRFa6aj
    about: Ask us anything!

'''
'''--- .github/ISSUE_TEMPLATE/feature_request.md ---
---
name: Feature request
about: Suggest an idea for this project
title: ''
labels: feature, open
assignees: ''

---

## User story

As X I want to X, so I can X.

## Solution

## Tasks

- [ ]
- [ ]
- [ ]

## Notes

'''
'''--- README.md ---
# Better

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/kontext/clone?teamCreateStatus=hidden&repository-url=https%3A%2F%2Fgithub.com%2Fbetter-feedback%2Froadmap&demo-title=Better%20Board%20Demo&demo-description=Check%20our%20Roadmap%20board%20for%20inspiration&demo-url=https%3A%2F%2Froadmap.betterhq.org&demo-image=https%3A%2F%2Fi.imgur.com%2FTxkzN48.jpeg&env=NEXT_PUBLIC_REPO_OWNER,NEXT_PUBLIC_REPO_NAME,NEXT_PUBLIC_PROJECT,NEXT_PUBLIC_SHOW_DOWNVOTES,NEXT_PUBLIC_ALCHEMY_ID,NEXT_PUBLIC_USE_WHITELIST,NEXT_PUBLIC_NEAR_NETWORK_ID,NEXT_PUBLIC_NEAR_WALLET_URL,NEXT_PUBLNEAR_HELPER_URL,NEXT_PUBLIC_NEAR_EXPLORER_URL,NEXT_PUBLIC_NEAR_JSON_RPC_URL,NEXT_PUBLIC_NEAR_API_BASE_URL,NEXT_PUBLIC_NEAR_DAO_ID,NEXT_PUBLIC_GUILD_ID,NEXT_PUBLIC_ROLE_ID,NEXT_PUBLIC_NEAR_ROLE_ID,NEXT_PUBLIC_POLYGON_CONTRACT_ADDRESS,GITHUB_PAT,AUTH0_SECRET,AUTH0_BASE_URL,AUTH0_ISSUER_BASE_URL,AUTH0_CLIENT_ID,AUTH0_CLIENT_SECRET,AUTH0_API_IDENTIFIER)

‚òùÔ∏è Deploy your Better Board instantly üëÜ

## How to submit your idea

Visit [/roadmap/issues](https://github.com/better-feedback/roadmap/issues) and add a new issue.

To list an issue on your Better board, tag it as `open`, `inProgress` or `live`.

Your issue now appears on [roadmap.betterhq.org](https://roadmap.betterhq.org/) and you can

üëâ login with your NEAR or Polygon wallet

üëâ vote on your favorite issue, after getting whitelisted by the team

üëâ add funds to the issue to start a bounty

üëâ work on a bounty and claim the bounty pool.

---

## How to set up Better for your organization

Better mirrors your [Github issues](https://github.com/better-feedback/roadmap/issues) to a [hosted website](https://roadmap.betterhq.org/), which allows your community to vote on them, fund them as bounties and claim the pooled funds for implementing them. Issues can range from feature requests, to content marketing ideas and DAO grant proposals.

Setting up your own Better project takes a few steps:

- Fork the [Better repo](https://github.com/better-feedback/roadmap)
- Host the site by creating a project on [Vercel]([url](https://vercel.com/))
    - Set your ENV variables based on `./.env.example` (Got any questions? Hit us up on [Discord](https://discord.com/invite/wwwwRFa6aj)!)

After a successful deployment, point your Vercel deployment to your custom URL: eg. feedback.yourdapp.com, roadmap.yourdapp.com, bounties.yourdapp.com

- Copy your DNS info at `https://vercel.com/[yourproject]/[yourrepo]/settings/domains`
- Add the info to your domain manager
- Send us your domain name on [Discord](https://discord.com/invite/wwwwRFa6aj), so we can whitelist your domain for github authentication!

üéä Congratulations, you are hosting your own Better board üéâ

- When using a private repo, make sure to add our notification bot `betterhq-bot` as contributor.

![Better screenshot - light and dark - Sept 22](https://user-images.githubusercontent.com/25006584/188115652-54710ee1-3c52-47b3-991b-85d1e93ca4f6.png)

---

## How to customize your Better site

Set your project name and custom footer links in this config file: `\better-app\src\config.ts`

Better mirrors each Github issue based on its tags. The default tags are `open`, `inProgress`, `live`.
If you want to set your own, edit the following files:
- `\better-app\src\config.ts`
- `src/features/issues/components/issues-list-page.tsx`
- `src/features/issues/constants.ts`
- `src/features/issues/types.ts`

You want to customize your site's UI or got feature ideas for Better? Join our [Discord](https://discord.com/invite/wwwwRFa6aj) and let us know!

---

### Dev

Checkout the repo and set the required environmental variables by copying `./.env.example` into `./.env.local`.

Next, install the dependencies:

```bash
npm install
# or
yarn install
```

Run the development server:

```bash
npm run dev
# or
yarn dev
```

---

### FAQ

<details>
  <summary>Which chains are supported?</summary>

1. NEAR testnet
2. Polygon testnet

</details>

<details>
  <summary>How to set up Guild.xyz to allow voting with NEAR wallets</summary>

1. Head to [guild.xyz](https://guild.xyz/) and create your own guild
2. Add a new role
3. Add an allowlist with the addresses that should be able to vote
     * Convert NEAR addresses to HEX format (eg [here](https://www.online-toolz.com/tools/text-hex-convertor.php))
     * Add `0x` in front of the address, and enough `0`s to fill the total string to 42
     * Eg. `0x000000003761696d656e73638e746573746e6574`
4. After saving and signing the Metamask request, the whitelisted addresses should be able to vote

</details>

<details>
  <summary>How to set up Guild.xyz to allow voting with Ethereum / Metamask</summary>

1. Head to [guild.xyz](https://guild.xyz/) and create your own guild
2. Add a new role
3. Add an allowlist with the addresses that should be able to vote
4. After saving and signing the Metamask request, the whitelisted addresses should be able to vote

</details>

<details>
  <summary>How to disable the voting whitelist</summary>

Set `NEXT_PUBLIC_USE_WHITELIST = FALSE` in your environmental variables in your Vercel settings at `https://vercel.com/[yourproject]/[yourrepo]/settings/environment-variables`.

</details>

<details>
  <summary>Can I host a Better board from a private repo?</summary>

Yes! Hosting a private repo allows you to keep issues private by default, until tagged to appear on the hosted site.

When using a private one, make sure to add our Github bot `betterhq-bot` as contributor to your repo.

</details>

<details>
  <summary>How to edit the issue labels?</summary>

  Better mirrors each Github issue based on its tags. The default tags are `open`, `inProgress`, `live`.
  If you want to set your own, edit the following files:
  - `\better-app\src\config.ts`
  - `src/features/issues/components/issues-list-page.tsx`
  - `src/features/issues/constants.ts`
  - `src/features/issues/types.ts`

</details>

<details>
  <summary>How to set custom Header text and Footer links?</summary>

Set your project name and custom footer links in this config file: `\better-app\src\config.ts`

</details>

'''
'''--- jest.config.js ---
/** @type {import('ts-jest/dist/types').InitialOptionsTsJest} */
module.exports = {
  preset: "ts-jest",
  testEnvironment: "node",
};

'''
'''--- next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/types/global" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

'''
'''--- next.config.js ---
/** @type {import('next').NextConfig} */
const removeImports = require('next-remove-imports')();
module.exports = {
  reactStrictMode: true,
  typescript: {
    // !! WARN !!
    // Dangerously allow production builds to successfully complete even if
    // your project has type errors.
    // !! WARN !!
    ignoreBuildErrors: true,
  },
}

'''
'''--- package.json ---
{
  "name": "better-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@auth0/nextjs-auth0": "^1.9.1",
    "@guildxyz/sdk": "^0.1.2",
    "@headlessui/react": "^1.4.2",
    "@rainbow-me/rainbowkit": "^0.4.3",
    "@tailwindcss/forms": "^0.4.0",
    "@uiw/react-md-editor": "3.6.0",
    "axios": "^0.23.0",
    "ethers": "^5.6.9",
    "mongodb": "^4.1.3",
    "near-api-js": "^0.43.1",
    "next": "^12.0.1",
    "next-remove-imports": "^1.0.6",
    "octokit": "^1.7.0",
    "react": "17.0.2",
    "react-dom": "17.0.2",
    "react-icons": "^4.4.0",
    "react-markdown": "^7.1.1",
    "react-moralis": "^1.4.0",
    "react-query": "^3.28.0",
    "remark-gfm": "^3.0.1",
    "wagmi": "^0.5.11",
    "web3uikit": "^1.0.2"
  },
  "devDependencies": {
    "@tailwindcss/typography": "^0.5.0",
    "@types/jest": "^27.0.2",
    "@types/react": "17.0.27",
    "autoprefixer": "^10.4.0",
    "eslint": "8.0.0",
    "eslint-config-next": "^12.0.1",
    "jest": "^27.3.1",
    "near-sdk-as": "^3.2.3",
    "postcss": "^8.4.5",
    "prettier": "^2.4.1",
    "tailwindcss": "^3.0.7",
    "ts-jest": "^27.0.7",
    "typescript": "4.4.3"
  }
}

'''
'''--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

'''
'''--- public/vercel.svg ---
<svg width="283" height="64" viewBox="0 0 283 64" fill="none" 
    xmlns="http://www.w3.org/2000/svg">
    <path d="M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z" fill="#000"/>
</svg>
'''
'''--- src/config.ts ---
export const githubConfig = {
  repoOwner: process.env.NEXT_PUBLIC_REPO_OWNER || "",
  repoName: process.env.NEXT_PUBLIC_REPO_NAME || "",
  labels: {
    open: ["open"],
    inProgress: ["inProgress"],
    live: ["live"],
  },

  // secret
  pat: process.env.GITHUB_PAT || "",
};

export const nearChainConfig = {
  networkId: process.env.NEXT_PUBLIC_NEAR_NETWORK_ID || "",
  walletUrl: process.env.NEXT_PUBLIC_NEAR_WALLET_URL || "",
  helperUrl: process.env.NEXT_PUBLIC_NEAR_HELPER_URL || "",
  explorerUrl: process.env.NEXT_PUBLIC_NEAR_EXPLORER_URL || "",
  apiBaseUrl: process.env.NEXT_PUBLIC_NEAR_API_BASE_URL || "",
  jsonRpcUrl: process.env.NEXT_PUBLIC_NEAR_JSON_RPC_URL || "",
  daoId: process.env.NEXT_PUBLIC_NEAR_DAO_ID || "",
};

export const siteConfig = {
  enabledChains: ["near" , "polygon"],
  projectName: "Kontext",
  title: "Kontext Roadmap",
  metaDescription: "Kontext Roadmap",
  url: "https://roadmap.kontext.app",
  metaImg: "https://raw.githubusercontent.com/better-feedback/better-app/1926cf0a2327e629128f65e57edeee7440294e0b/public/metaTagImg.jpg?token=AF6ZD6A7XI4IS7I3MRLDQSDCTY6QK",
  externalLinks: {
    docs: "https://github.com/kontext-app/roadmap#readme",
    discord: "wwwwRFa6aj",
    twitter: "betterdao",
  },
};

export const config = {
  github: githubConfig,
  chains: {
    near: nearChainConfig,
  },
  site: siteConfig,
};

export default config;

'''
'''--- src/features/api-routes/api/github/__tests__/utils.test.ts ---
import * as githubUtils from "../utils";

describe("github", () => {
  describe("#getMetadataAndClean()", () => {
    const metadata = {
      bounties: [
        {
          chain: "near",
          bountyId: 1,
        },
      ],
    };

    it("should return parsed description metadata", () => {
      const description = `This is a description \n\n<!-- better-meta = ${JSON.stringify(
        metadata
      )} -->`;

      const { metadata: descriptionMetadata } =
        githubUtils.getMetadataAndCleanedComment(description);
      expect(descriptionMetadata).toMatchObject(metadata);
    });

    it("should return empty parsed description metadata", () => {
      const description = `This is a description`;

      const { metadata: descriptionMetadata } =
        githubUtils.getMetadataAndCleanedComment(description);
      expect(descriptionMetadata).toMatchObject({
        bounties: [],
      });
    });
  });
});

'''
'''--- src/features/api-routes/api/github/index.ts ---
import { Octokit } from "octokit";

import config from "../../../../config";
import { metadataCommentRegex } from "./utils";

import type { ReqParams } from "../../../common/types";

const octokit = new Octokit({ auth: config.github.pat });

export async function getIssues(
  reqParams: ReqParams & {
    labels?: string;
  }
) {
  const { perPage = 10, page = 1, labels } = reqParams;

  let labelsArray = labels?.split(",");

  const { data = [] } = await octokit.rest.issues.listForRepo({
    owner: config.github.repoOwner,
    repo: config.github.repoName,
    per_page: perPage,
    page,
  });

  let filtered = data.filter((issue) =>
    issue.labels.some((label) => labelsArray?.includes(label.name))
  );

  return filtered;
}

export async function getIssueByNumber(issueNumber: number) {
  const { data } = await octokit.rest.issues.get({
    owner: config.github.repoOwner,
    repo: config.github.repoName,
    issue_number: issueNumber,
  });

  return data;
}

export async function upsertMetadataComment(params: {
  metadataCommentBody: string;
  issueNumber: number;
  metadataCommentId?: number;
}) {
  if (!params.metadataCommentId) {
    await octokit.rest.issues.createComment({
      owner: config.github.repoOwner,
      repo: config.github.repoName,
      issue_number: params.issueNumber,
      body: params.metadataCommentBody,
    });
  } else {
    await octokit.rest.issues.updateComment({
      owner: config.github.repoOwner,
      repo: config.github.repoName,
      issue_number: params.issueNumber,
      comment_id: params.metadataCommentId as number,
      body: params.metadataCommentBody,
    });
  }
  return true;
}

export async function updateMetadataComment() {}

export async function getMetadataComment(issueNumber: number) {
  const { data = [] } = await octokit.rest.issues.listComments({
    owner: config.github.repoOwner,
    repo: config.github.repoName,
    issue_number: issueNumber,
  });

  const metadataComment = data.find((comment) => {
    const match = comment.body?.match(metadataCommentRegex);
    return Boolean(match);
  });

  return metadataComment;
}

export async function getMetadataCommentId(issueNumber: number) {
  const { data = [] } = await octokit.rest.issues.listComments({
    owner: config.github.repoOwner,
    repo: config.github.repoName,
    issue_number: issueNumber,
  });

  const metadataComment = data.find((comment) => {
    const match = comment.body?.match(metadataCommentRegex);
    return Boolean(match);
  });

  return { id: metadataComment?.id, body: metadataComment?.body };
}

'''
'''--- src/features/api-routes/api/github/types.ts ---
export type Metadata = {
  bounties: {
    chain: string;
    bountyId: number;
  }[];
};

export type CommentMatadata = {
  votes?: number;
  upVotes: number;
  downVotes: number;
  voters: string[];
};

'''
'''--- src/features/api-routes/api/github/utils.ts ---
import type { Metadata , CommentMatadata } from "./types";

export const metadataCommentRegex = /<!-- better-meta = (.*) -->/;

export function getMetadataAndCleanedComment(comment: string): {
  metadata: Metadata | CommentMatadata;
  cleanedComment: string;
} {
  const match = comment.match(metadataCommentRegex);

  const metadata = match ? JSON.parse(match[1]) : { bounties: [] };
  const cleanedComment = comment.replace(metadataCommentRegex, "");
  return { cleanedComment, metadata };
}

export function setMetadataComment(
  metadataInfoText: string,
  metadata: Metadata | CommentMatadata
) {
  return `${metadataInfoText}\n\n<!-- better-meta = ${JSON.stringify(
    metadata
  )} -->`;
}

export function buildMetadataInfoText(metadata: Metadata) {
  let infoComment = `This issue has ${metadata.bounties.length} bounties.\n`;
  for (const bounty of metadata.bounties) {
    infoComment += `Chain: ${bounty.chain}, Bounty ID: ${bounty.bountyId}\n`;
  }
  return infoComment;
}

'''
'''--- src/features/api-routes/api/helpers/authProfile.ts ---
import axios from "axios";

import { getAccessToken } from "@auth0/nextjs-auth0";
import { NextApiRequest, NextApiResponse } from "next";

export const getUserAccessKey = async (
  userId: string,
) => {
  try {
    const adminAccessKey = (await getAdminAccessKey()) as any;

    var options = {
      method: "GET",
      url: `${process.env.AUTH0_API_IDENTIFIER}users/${userId}?fields=identities,name`,
      headers: {
        "content-type": "application/json",
        authorization: `Bearer ${adminAccessKey.access_token}`,
      },
    };

    const response = await axios.request(options as any);

    return response.data;
  } catch (e) {
    console.log(e);
  }
};

const getAdminAccessKey = async () => {
  try {
    var options = {
      method: "POST",
      url: "https://dev-qixk1-qm.us.auth0.com/oauth/token",
      headers: { "content-type": "application/x-www-form-urlencoded" },
      data: new URLSearchParams({
        grant_type: "client_credentials",
        client_id: process.env.AUTH0_CLIENT_ID as string,
        client_secret: process.env.AUTH0_CLIENT_SECRET as string,
        audience: process.env.AUTH0_API_IDENTIFIER as string,
      }),
    };

    const response = await axios.request(options as any);
    return response.data;
  } catch (e) {
    console.log(e);
  }
};

'''
'''--- src/features/api-routes/handlers/bounties/index.ts ---
import * as githubApi from "../../api/github";
import {
  getMetadataAndCleanedComment,
  setMetadataComment,
  buildMetadataInfoText,
} from "../../api/github/utils";
import { ApiError } from "../utils";

import type { NextApiRequest, NextApiResponse } from "next";

/**
 * `POST /bounties`
 */
export async function postBountiesHandler(
  req: NextApiRequest,
  res: NextApiResponse<{
    message?: string;
    error?: any;
  }>
) {
  const requiredPostBodyKeys = ["issueNumber", "chain", "bountyId"];
  const postBody: {
    issueNumber: number;
    chain: string;
    bountyId: number;
  } = req.body;

  Object.keys(postBody).forEach((postBodyKey) => {
    if (!requiredPostBodyKeys.includes(postBodyKey)) {
      throw new ApiError(
        400,
        `Required POST body keys: ${requiredPostBodyKeys}`
      );
    }
  });

  const metadataComment = await githubApi.getMetadataComment(
    postBody.issueNumber
  );
  const { metadata } = getMetadataAndCleanedComment(
    metadataComment?.body || ""
  );

  const updatedMetadata = {
    ...metadata,
    bounties: [
      ...metadata.bounties,
      {
        chain: postBody.chain,
        bountyId: postBody.bountyId,
      },
    ],
  };

  const newMetadataCommentBody = setMetadataComment(
    buildMetadataInfoText(updatedMetadata),
    updatedMetadata
  );

  await githubApi.upsertMetadataComment({
    metadataCommentBody: newMetadataCommentBody,
    issueNumber: postBody.issueNumber,
    metadataCommentId: metadataComment?.id,
  });

  res.status(200).json({ message: "OK" });
}

'''
'''--- src/features/api-routes/handlers/issues/index.ts ---
import * as githubApi from "../../api/github";
import { getMetadataAndCleanedComment } from "../../api/github/utils";
import { ApiError, apiErrorHandler } from "../utils";

import type { NextApiRequest, NextApiResponse } from "next";
import { getVoteCount } from "features/common/hooks/useGuildQueries";

/**
 * `GET /issues`
 */
export async function getIssuesListHandler(
  req: NextApiRequest,
  res: NextApiResponse<{
    issues?: any[];
    error?: any;
  }>
) {
  try {
    if (req.method !== "GET") {
      throw new ApiError(400, `Method ${req.method} not allowed`);
    }

    const githubIssues = await githubApi.getIssues({
      page: Number(req.query.page) || 1,
      perPage: Number(req.query.perPage) || 10,
      labels: Array.isArray(req.query.labels)
        ? req.query.labels.join(",")
        : req.query.labels,
    });

    const githubIssuesWithMetadataComment = await Promise.all(
      githubIssues.map(async (issue) => {
        const metadataComment = await githubApi.getMetadataComment(
          issue.number
        );
        return {
          ...issue,
          metadataComment,
        };
      })
    );

    const githubIssuesWithParsedMetadata = githubIssuesWithMetadataComment.map(
      (issueWithMetadataComment) => {
        const { metadata } = getMetadataAndCleanedComment(
          issueWithMetadataComment.metadataComment?.body || ""
        );
        return {
          ...issueWithMetadataComment,
          metadata,
        };
      }
    );

    return res.status(200).json({ issues: githubIssuesWithParsedMetadata });
  } catch (error) {
    apiErrorHandler(res, error);
  }
}

/**
 * `GET /issues/:issueId`
 */
export async function getIssueDetailsHandler(
  req: NextApiRequest,
  res: NextApiResponse<{
    issue?: any;
    error?: any;
  }>
) {
  try {
    if (req.method !== "GET") {
      throw new ApiError(400, `Method ${req.method} not allowed`);
    }

    const githubIssue = await githubApi.getIssueByNumber(
      Number(req.query.issueNumber as string)
    );
    const metadataComment = await githubApi.getMetadataComment(
      githubIssue.number
    );
    const { metadata, cleanedComment } = getMetadataAndCleanedComment(
      metadataComment ? metadataComment?.body || "" : ""
    );

    return res.status(200).json({
      issue: {
        ...githubIssue,
        metadataComment,
        cleanedComment,
        metadata,
      },
    });
  } catch (error) {
    apiErrorHandler(res, error);
  }
}

'''
'''--- src/features/api-routes/handlers/utils.ts ---
import type { NextApiRequest, NextApiResponse } from "next";

export class ApiError extends Error {
  statusCode: number;

  constructor(statusCode: number, message: string) {
    super(message);
    this.statusCode = statusCode;
  }
}

export function apiErrorHandler(res: NextApiResponse, error: any) {
  const { statusCode = 0, message } = error;

  console.error(error);

  if (statusCode === 500 || statusCode === 0) {
    return res.status(500).json({ error: "Internal Server Error" });
  }
  return res.status(statusCode).json({ error: message });
}

'''
'''--- src/features/api-routes/types.ts ---
export type ReqParams = {
  perPage?: any;
  page?: any;
};

'''
'''--- src/features/bounties/api.ts ---
import axios from "axios";

export async function addBountyToMetadataComment(
  issueNumber: number,
  bountyMetadata: {
    chain: string;
    bountyId: number;
  }
) {
  return axios.post<any>(`/api/bounties`, {
    issueNumber,
    chain: bountyMetadata.chain,
    bountyId: bountyMetadata.bountyId,
  });
}

'''
'''--- src/features/bounties/hooks/useAddBountyMutation.ts ---
import { useMutation, useQueryClient } from "react-query";

import { chainsToApi } from "features/common/constants";
import { addBountyToMetadataComment } from "../api";

export default function useAddBountyMutation() {
  const queryClient = useQueryClient();

  const addBountyMutation = useMutation(
    async (params: {
      issueNumber: string;
      chain: string;
      issueDescription: string;
      token: string;
      amount: string;
      maxDeadline: number;
      startedAt: number;
      project: string;
    }) => {
      const { addBounty } = chainsToApi[params.chain];

      const bountyId = await addBounty(params);
      // await addBountyToMetadataComment(params.issueNumber, {
      //   chain: params.chain,
      //   bountyId,
      // });
    },
    {
      onSuccess: (data, variables) => {
        queryClient.invalidateQueries(["issues", variables.issueNumber]);
      },
    }
  );
  return addBountyMutation;
}

'''
'''--- src/features/bounties/hooks/useGetBountyQuery.ts ---
import { ethers } from "ethers";
import { useQuery } from "react-query";
import { useContractRead } from "wagmi";

import * as betterBounty from "../../../utils/solidity/BetterBounty.json";

const { data, isError, isLoading } = useContractRead({
  addressOrName: process.env.NEXT_PUBLIC_POLYGON_CONTRACT_ADDRESS as string,
  contractInterface: betterBounty.abi,
  functionName: "bountyCount",
});

'''
'''--- src/features/bounties/solidity/getBounty.ts ---
import * as betterBounty from "../../../utils/solidity/BetterBounty.json";
import { useContractRead } from "wagmi";

export default async function getBounty(bountyId: string) {
  const chain = localStorage.getItem("wallet-chain");
  if (chain === "near") return;

  const bounty = await useContractRead({
    addressOrName: process.env.NEXT_PUBLIC_POLYGON_CONTRACT_ADDRESS as string,
    contractInterface: betterBounty.abi,
    functionName: "getBountyById",
    args: bountyId,
  });

}

'''
'''--- src/features/bounties/types.ts ---
export type BountyParams = {
  issueNumber: number;
  issueDescription: string;
  token: string;
  amount: string;
  maxDeadline: number;
  startedAt: number;
  project: string;
};

export type Bounty = {
  issueId: string;
  pool: string;
  funders: string[];
  workers: string[];
  status: string;
  deadline: string;
};

'''
'''--- src/features/common/constants.ts ---
import * as nearApi from "features/near/api";

import type { ChainApi } from "./types";

export const chains = {
  NEAR: "near",
  POLYGON: "polygon",
};

export const chainsToApi: {
  [chain: string]: ChainApi;
} = {
  [chains.NEAR]: {
    // Wallet API
    signIn: nearApi.signIn,
    signOut: nearApi.signOut,
    isSignedIn: nearApi.isSignedIn,
    getAccountId: nearApi.getAccountId,
    // Contract API
    addBounty: nearApi.addBounty,
    claimBounty: nearApi.claimBounty,
    doneBounty: nearApi.doneBounty,
    giveUpBounty: nearApi.giveUpBounty,
    getBountyById: nearApi.getBountyById,
    // Tokens API
    getTokens: nearApi.getTokens,
  },
  [chains.POLYGON]: {
    getTokens: () => {
      return [
        {
          symbol: "MATIC",
          address: "0x",
          decimals: 18,
          name: "Polygon Token",
        },
      ];
    },
  },
};

'''
'''--- src/features/common/hooks/useGuildQueries.ts ---
import { guild } from "@guildxyz/sdk";
import axios from "axios";
import { Issue } from "features/issues/types";
import { useMutation, useQuery, useQueryClient } from "react-query";
import { nearAccountToHex } from "utils/helpers";
import { useAccount } from "wagmi";
import { chainsToApi } from "../constants";

/*
 * It checks if the user has access to vote or not
 * @returns A boolean value
 */
export function useVotingAccessQuery() {
  const walletChain = window.localStorage.getItem("wallet-chain");
  const { address } = useAccount();
  return useQuery("hasVotingAccess", async () => {
    if (!walletChain) {
      return null;
    }

    let canVote: boolean = false;

    if (walletChain === "near") {
      const { getAccountId } = chainsToApi[walletChain];

      return getAccountId().then(async (accountId) => {
        const account = nearAccountToHex([accountId]);

        //Getting guild roles data
        const guildData = await guild.getUserAccess(
          parseInt(process.env.NEXT_PUBLIC_GUILD_ID as string),
          account[0]
        );

        //Getting role id by chain
        const roleId: string = process.env.NEXT_PUBLIC_NEAR_ROLE_ID as string;

        //Checking if user has access to vote or not
        guildData.forEach((access) => {
          if (access.roleId === parseInt(roleId)) {
            canVote = access.access;
          }
        });
        return canVote;
      });
    } else {
      const guildData = await guild.getUserAccess(
        parseInt(process.env.NEXT_PUBLIC_GUILD_ID as string),
        address as string
      );

      //Getting role id by chain
      const roleId: string = process.env.NEXT_PUBLIC_ROLE_ID as string;

      //Checking if user has access to vote or not
      guildData.forEach((access) => {
        if (access.roleId === parseInt(roleId)) {
          canVote = access.access;
        }
      });

      return canVote;
    }
  });
}

export const getVoteCount = async (issueNumber: number) => {
  const result = await axios.get(
    `/api/comment/getVoteCount?issueNumber=${issueNumber}`
  );
  return result.data;
};

/*
 * It returns the number of votes for a given issue
 * @param {number} issueNumber - The issue number of the issue we want to get the vote count for.
 * @returns The result of the query.
 */
export function useIssueVoteCount(issueNumber: number) {
  return useQuery(["issueVoteCount", issueNumber], async () => {
    /* Making a request to the backend to get the vote count for a given issue. */
    return getVoteCount(issueNumber);
  });
}

export function useVote() {
  const queryClient = useQueryClient();

  const addVoteMutation = useMutation(
    async (params: {
      issueNumber: number;
      isUpVote: boolean;
      walletId: string;
    }) => {
      const result = await axios.post("/api/comment/addComment", {
        issueNumber: params.issueNumber,
        isUpVote: params.isUpVote,
        walletId: params.walletId,
      });
      return result.data;
    },
    {
      onSuccess: (data, variables) => {
        queryClient.invalidateQueries([
          "issueVoteCount",
          variables.issueNumber,
        ]);
      },
    }
  );

  return addVoteMutation;
}

'''
'''--- src/features/common/hooks/useWalletQueries.ts ---
import { useMutation, useQuery, useQueryClient } from "react-query";

import { chainsToApi } from "../constants";

import { useConnectModal } from "@rainbow-me/rainbowkit";

import { useAccount } from "wagmi";

export function useWalletChainQuery() {
  return useQuery(["wallet", "chain"], () => {
    const walletChain = window.localStorage.getItem("wallet-chain");
    return walletChain;
  });
}

export function useWalletIsSignedInQuery() {
  const { isConnected } = useAccount();

  return useQuery(["wallet", "isSignedIn"], () => {
    const walletChain = window.localStorage.getItem("wallet-chain");

    if (!walletChain) {
      return false;
    }

    const { isSignedIn } =
      walletChain === "near"
        ? chainsToApi[walletChain]
        : { isSignedIn: () => {} };
    return walletChain === "near" ? isSignedIn() : isConnected;
  });
}

export function useWalletSignedInAccountQuery() {
  return useQuery(["wallet", "signedInAccount"], () => {
    const walletChain = window.localStorage.getItem("wallet-chain");

    if (!walletChain) {
      return null;
    }

    const { getAccountId } = chainsToApi[walletChain];
    return getAccountId();
  });
}

export function useWalletSignInMutation() {
  const queryClient = useQueryClient();
  const { openConnectModal } = useConnectModal();

  const walletSignInMutation = useMutation(
    async (walletChain: string) => {
      if (walletChain === "near") {
        const { signIn } = chainsToApi[walletChain];

        await signIn();
      } else {
        if (openConnectModal) {
          openConnectModal();
        }
      }
      window.localStorage.setItem("wallet-chain", walletChain);
    },
    {
      onSuccess: () => {
        queryClient.invalidateQueries(["wallet", "chain"]);
      },
    }
  );

  return walletSignInMutation;
}

export function useWalletSignOutMutation() {
  const queryClient = useQueryClient();

  const walletSignOutMutation = useMutation(
    async () => {
      const walletChain = window.localStorage.getItem("wallet-chain");

      if (!walletChain) {
        return null;
      }

      const { signOut } = chainsToApi[walletChain];
      await signOut();
      window.localStorage.removeItem("wallet-chain");
    },
    {
      onSuccess: () => {
        queryClient.invalidateQueries(["wallet", "chain"]);
      },
    }
  );

  return walletSignOutMutation;
}

'''
'''--- src/features/common/types.ts ---
import type { BountyParams } from "features/bounties/types";
import type { Token } from "features/tokens/types";

export type ReqParams = {
  perPage?: any;
  page?: any;
};

export type ChainApi = {
  // Wallet API
  signIn: () => Promise<void>;
  signOut: () => Promise<void>;
  isSignedIn: () => Promise<boolean>;
  getAccountId: () => Promise<string>;
  // Contract API
  addBounty: (bounty: BountyParams) => Promise<string>;
  claimBounty: (bountyId: number) => Promise<void>;
  doneBounty: (bountyId: number) => Promise<void>;
  giveUpBounty: (bountyId: number) => Promise<void>;
  getBountyById: (bountyId: number) => Promise<any>;
  // Tokens API
  getTokens: () => Promise<Token[]>;
};

'''
'''--- src/features/issues/api.ts ---
import axios from "axios";
import { githubConfig } from "config";

import type { IssueType, Issue } from "./types";
import type { ReqParams } from "features/common/types";

export async function getIssues(issueType: IssueType, params: ReqParams) {
  const labelsOfType = githubConfig.labels[issueType];

  const { data } = await axios.get<{ issues: Issue[] }>(
    `/api/issues?labels=${labelsOfType}&page=${params.page || 1}&perPage=${
      params.perPage || 10
    }`
  );
  return data.issues;
}

export async function getIssueByNumber(issueNumber: number) {
  const { data } = await axios.get<{ issue: Issue }>(
    `/api/issues/${issueNumber}`
  );
  return data.issue;
}

'''
'''--- src/features/issues/constants.ts ---
import type { IssueType } from "./types";

export const issueTypes: Record<"OPEN" | "IN_PROGRESS" | "LIVE" | "EXPIRED", IssueType> =
  {
    OPEN: "open",
    IN_PROGRESS: "inProgress",
    LIVE: "live",
    EXPIRED : "expired"
  };

'''
'''--- src/features/issues/hooks/useIssuesQueries.ts ---
import { getVoteCount } from "features/common/hooks/useGuildQueries";
import { useQuery } from "react-query";

import { getIssues, getIssueByNumber } from "../api";

import type { IssueType } from "../types";

export function useIssuesQuery(issueType: IssueType, page: number) {
  return useQuery(["issues", issueType, page], async () => {
    const issues = await getIssues(issueType, {
      page,
      perPage: 50,
    });

    const issueVotes: any = {};

    for (const issue of issues) {
      const vote = await getVoteCount(issue.number);
      issueVotes[issue.number] = vote;
    }

    return issues.sort(
      (a, b) =>
        issueVotes[b.number].upVotes -
        issueVotes[b.number].downVotes -
        (issueVotes[a.number].upVotes - issueVotes[a.number].downVotes)
    );
  });
}

export function useIssueDetailsQuery(issueNumber: number) {
  return useQuery(
    ["issues", issueNumber],
    () => getIssueByNumber(issueNumber),
    { enabled: Boolean(issueNumber) }
  );
}

'''
'''--- src/features/issues/types.ts ---
export type IssueType = "open" | "inProgress" | "live";

export type Metadata = {
  bounties: {
    chain: string;
    bountyId: number;
  }[];
};

export interface Label {
  name: string;
  id: number;
  color: string;
}

export type Issue = {
  title: string;
  metadata: Metadata;
  created_at: string;
  number: number;
  body: string;
  url: string;
  labels: Label[];
  user: {
    login: string;
  };
  html_url: string;
};

'''
'''--- src/features/near/api.ts ---
import * as nearApi from "near-api-js";

import { nearChainConfig } from "config";

import type { Token } from "features/tokens/types";

export async function initNearWalletConnection() {
  const near = await nearApi.connect({
    networkId: nearChainConfig.networkId,
    keyStore: new nearApi.keyStores.BrowserLocalStorageKeyStore(),
    nodeUrl: nearChainConfig.jsonRpcUrl,
    walletUrl: nearChainConfig.walletUrl,
    helperUrl: nearChainConfig.helperUrl,
  });
  return new nearApi.WalletConnection(near, null);
}

export async function signIn() {
  const nearWalletConnection = await initNearWalletConnection();

  return nearWalletConnection.requestSignIn({
    contractId: nearChainConfig.daoId,
  });
}

export async function isSignedIn() {
  const nearWalletConnection = await initNearWalletConnection();
  let bool = await nearWalletConnection.isSignedIn();
  return bool;
}

export async function returnWallet() {
  const nearWalletConnection = await initNearWalletConnection();
  return nearWalletConnection;
}

export async function signOut() {
  const nearWalletConnection = await initNearWalletConnection();

  return nearWalletConnection.signOut();
}

export async function getAccountId(): Promise<string> {
  const nearWalletConnection = await initNearWalletConnection();

  return nearWalletConnection.getAccountId();
}

export async function initDaoContract() {
  const nearWalletConnection = await initNearWalletConnection();
  const account = nearWalletConnection.account();

  return new nearApi.Contract(account, nearChainConfig.daoId, {
    viewMethods: ["getMessages"],
    changeMethods: ["add_proposal"],
  });
}

//Function for view methods
export const viewFunction = async (functionName: string, args = {}) => {
  const nearWalletConnection = await initNearWalletConnection();
  const result = await nearWalletConnection
    .account()
    .viewFunction(nearChainConfig.daoId, functionName, args);

  return result;
};

//Function for call method
export const callFunction = async (
  functionName: string,
  args = {},
  deposit = "0"
) => {
  const nearWalletConnection = await initNearWalletConnection();
  const result = await nearWalletConnection.account().functionCall({
    contractId: nearChainConfig.daoId,
    methodName: functionName,
    args: args,
    attachedDeposit: nearApi.utils.format.parseNearAmount(deposit),
  });
  return result;
};

export async function addBounty(params: {
  issueNumber: number;
  amount: number;
  maxDeadline: number;
  startedAt: number;
  project: string;
}) {
  callFunction(
    "fundBounty",
    {
      issueId: params.issueNumber,
      deadline: params.maxDeadline.toString(),
      project: params.project,
      startedAt: params.startedAt.toString(),
    },
    params.amount.toString()
  )
    .then((response) => {})
    .catch((error) => {
      console.log("Fund Error", error);
    });
}

export async function claimBounty() {
  // TODO
}

export async function doneBounty() {
  // TODO
}

export async function giveUpBounty() {
  // TODO
}

export async function getBountyById(bountyId: number) {
  // TODO
}

export async function getTokens(): Promise<Token[]> {
  return [
    {
      symbol: "NEAR",
      address: "0x",
      decimals: 18,
      name: "Near Token",
    },
  ];
}

'''
'''--- src/features/near/types.ts ---
export type Proposal = {
  transactionHash: string;
  updateTransactionHash: string;
  createTimestamp: number;
  updateTimestamp: number;
  id: string;
  proposalId: number;
  daoId: string;
  proposer: string;
  description: string;
  status:
    | "InProgress"
    | "Approved"
    | "Rejected"
    | "Removed"
    | "Expired"
    | "Moved";
};

'''
'''--- src/features/tokens/hooks/useTokensQueries.ts ---
import { useQuery, UseQueryOptions } from "react-query";
import { chainsToApi } from "features/common/constants";
import type { Token } from "../types";

export function useTokensQuery(
  chainName: string,
  options?: Omit<
    UseQueryOptions<Token[], unknown, Token[], string[]>,
    "queryKey" | "queryFn"
  >
) {
  const { getTokens } = chainsToApi[chainName];

  return useQuery(["tokens", chainName], getTokens);
}

'''
'''--- src/features/tokens/types.ts ---
export type Token = {
  symbol: string;
  decimals: number;
  address: string;
  name: string;
};

'''
'''--- src/pages/api/auth/[...auth0].ts ---
// pages/api/auth/[...auth0].js
import { handleAuth } from '@auth0/nextjs-auth0';

export default handleAuth();
'''
'''--- src/pages/api/auth/accessToken.ts ---
import { ApiError, apiErrorHandler } from "features/api-routes/handlers/utils";

import type { NextApiRequest, NextApiResponse } from "next";

import axios from "axios";

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  try {
    var options = {
      method: "POST",
      url: "https://dev-qixk1-qm.us.auth0.com/oauth/token",
      headers: { "content-type": "application/x-www-form-urlencoded" },
      data: new URLSearchParams({
        grant_type: "client_credentials",
        client_id: process.env.AUTH0_CLIENT_ID,
        client_secret: process.env.AUTH0_CLIENT_SECRET,
        audience: process.env.AUTH0_API_IDENTIFIER,
      }),
    };

    const response = await axios.request(options);

    res.status(200).json(response.data);

  } catch (error) {
    apiErrorHandler(res, error);
  }
}

'''
'''--- src/pages/api/bounties/index.ts ---
import { postBountiesHandler } from "features/api-routes/handlers/bounties";
import { ApiError, apiErrorHandler } from "features/api-routes/handlers/utils";

import type { NextApiRequest, NextApiResponse } from "next";

type Data = {
  message?: any;
  error?: any;
};

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>
) {
  try {
    switch (req.method) {
      /**
       * `POST /bounties`
       */
      case "POST":
        return postBountiesHandler(req, res);
      default:
        throw new ApiError(400, `Method ${req.method} not allowed`);
    }
  } catch (error) {
    apiErrorHandler(res, error);
  }
}

'''
'''--- src/pages/api/comment/addComment.ts ---
import {
  ApiError,
  apiErrorHandler,
} from "../../../features/api-routes/handlers/utils";

import type { NextApiRequest, NextApiResponse } from "next";

import { Octokit } from "octokit";

import {
  setMetadataComment,
  getMetadataAndCleanedComment,
  metadataCommentRegex,
} from "features/api-routes/api/github/utils";

import { getMetadataCommentId } from "features/api-routes/api/github";

type Data = {
  issue?: any[];
  error?: any;
};

import type {
  CommentMatadata,
  Metadata,
} from "features/api-routes/api/github/types";

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  try {
    switch (req.method) {
      /**
       * `GET /issues/:issueNumber`
       */
      case "POST":
        const octoKit = new Octokit({ auth: process.env.GITHUB_PAT });
        if (
          !process.env.NEXT_PUBLIC_REPO_OWNER ||
          !process.env.NEXT_PUBLIC_REPO_NAME
        )
          return res.status(500).send("Missing environment variables");

        /* Destructuring the request body and then getting the metadata comment id. */
        const { issueNumber, isUpVote, walletId } = req.body;

        const { id, body } = await getMetadataCommentId(issueNumber);

        /* This is creating a new comment with the metadata if matadata doesnt exist already. */
        if (!id || !body || !body.includes("vote")) {
          const commentBody = setMetadataComment(
            `This issue has ${isUpVote ? "1" : "0"} upvotes and ${
              !isUpVote ? "1" : "0"
            } downvotes`,
            {
              // votes: isUpVote ? 1 : -1,
              upVotes: isUpVote ? 1 : 0,
              downVotes: !isUpVote ? 1 : 0,
              //Add wallet is with voting type
              voters: [`${walletId}_${isUpVote ? "up" : "down"}`],
            }
          );

          await octoKit.rest.issues.createComment({
            owner: process.env.NEXT_PUBLIC_REPO_OWNER,
            repo: process.env.NEXT_PUBLIC_REPO_NAME,
            issue_number: issueNumber,
            body: commentBody,
          });
        } /* This is updating the comment with the new vote count. */ else {
          const {
            metadata,
            cleanedComment,
          }: { metadata: CommentMatadata | any; cleanedComment: string } =
            getMetadataAndCleanedComment(body);

          let newVotes: number = metadata.votes;
          let newUpvotes: number = metadata.upVotes;
          let newDownvotes: number = metadata.downVotes;
          let newVoters: string[] = [...metadata.voters];

          //If wallet is upvoting and now downvotes, keep in voters and lower upvote by 1 and increase downVote by 1
          if (!isUpVote && metadata.voters.includes(walletId + "_up")) {
            newVoters = metadata.voters.filter(
              (voter: string) => !voter.includes(walletId)
            );
            newVoters.push(`${walletId}_down`);
            newUpvotes = metadata.upVotes - 1;
            newDownvotes = metadata.downVotes + 1;
          }

          //If wallet is downvoting and now upvotes, keep in voters and increase upvote by 1 and lower downVote by 1
          else if (isUpVote && metadata.voters.includes(walletId + "_down")) {
            newVoters = metadata.voters.filter(
              (voter: string) => !voter.includes(walletId)
            );
            newVoters.push(`${walletId}_up`);
            newUpvotes = metadata.upVotes + 1;
            newDownvotes = metadata.downVotes - 1;
          }

          //If the wallet is upvoting and presses upvote again remove from voters and decrease upvote by 1
          else if (isUpVote && metadata.voters.includes(walletId + "_up")) {
            newVoters = metadata.voters.filter(
              (voter: string) => !voter.includes(walletId)
            );
            newUpvotes = metadata.upVotes - 1;
          }

          //If the wallet is downvoting and presses downvote again remove from voters and decrease downvote by 1
          else if (!isUpVote && metadata.voters.includes(walletId + "_down")) {
            newVoters = metadata.voters.filter(
              (voter: string) => !voter.includes(walletId)
            );
            newDownvotes = metadata.downVotes - 1;
          }

          //If the wallet never voted before add to voters and increase or decrease vote by 1
          else {
            newVoters = [
              ...metadata.voters,
              `${walletId}_${isUpVote ? "up" : "down"}`,
            ];

            newUpvotes = isUpVote ? metadata.upVotes + 1 : metadata.upVotes;
            newDownvotes = !isUpVote
              ? metadata.downVotes + 1
              : metadata.downVotes;
          }

          const commentBody = setMetadataComment(
            `This issue has ${newUpvotes} upvotes and ${newDownvotes} downvotes`,
            {
              // votes: newVotes,
              upVotes: newUpvotes,
              downVotes: newDownvotes,
              voters: newVoters,
            }
          );

          await octoKit.rest.issues.updateComment({
            owner: process.env.NEXT_PUBLIC_REPO_OWNER,
            repo: process.env.NEXT_PUBLIC_REPO_NAME,
            issue_number: issueNumber,
            comment_id: id,
            body: commentBody,
          });
        }

        return res.status(200).send("Success");
      default:
        throw new ApiError(400, `Method ${req.method} not allowed`);
    }
  } catch (error) {
    apiErrorHandler(res, error);
  }
}

'''
'''--- src/pages/api/comment/getVoteCount.ts ---
import {
  ApiError,
  apiErrorHandler,
} from "../../../features/api-routes/handlers/utils";

import type { NextApiRequest, NextApiResponse } from "next";

import { Octokit } from "octokit";

import {CommentMatadata} from "../../../features/api-routes/api/github/types";

import {
  setMetadataComment,
  getMetadataAndCleanedComment,
} from "features/api-routes/api/github/utils";

import { getMetadataCommentId } from "features/api-routes/api/github";

type Data = {
  issue?: any[];
  error?: any;
};

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  try {
    switch (req.method) {
      case "GET":
        if (
          !process.env.NEXT_PUBLIC_REPO_OWNER ||
          !process.env.NEXT_PUBLIC_REPO_NAME
        )
          return res.status(500).send("Missing environment variables");

        /* Getting the issue number from the query string and then getting the metadata comment id from
       the issue number. */
        const { issueNumber } = req.query;

        if (!issueNumber) return res.status(400).send("Missing issue number");

        const { id, body } = await getMetadataCommentId(parseInt(issueNumber as string));

        if (!body || !body.includes("vote"))
          return res.status(200).json({ upVotes: 0, downVotes: 0 });

        /* Destructuring the metadata and cleanedComment from the getMetadataAndCleanedComment function. */
        const { metadata  , cleanedComment } = getMetadataAndCleanedComment(body);

        return res
          .status(200)
          .json(
            (metadata as CommentMatadata)?.upVotes || (metadata as CommentMatadata).downVotes
              ? metadata
              : { upVotes: 0, downVotes: 0, voters: [] }
          );
      default:
        throw new ApiError(400, `Method ${req.method} not allowed`);
    }
  } catch (error) {
    apiErrorHandler(res, error);
  }
}

'''
'''--- src/pages/api/comment/startWorkComment.ts ---
import {
  ApiError,
  apiErrorHandler,
} from "../../../features/api-routes/handlers/utils";

import type { NextApiRequest, NextApiResponse } from "next";

import { getUserAccessKey } from "../../../features/api-routes/api/helpers/authProfile";

import { Octokit } from "octokit";
import axios from "axios";

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  try {
    const { id, issueNumber, isGitAuthed, walletId } = req.body;

    const response = isGitAuthed ? ((await getUserAccessKey(id)) as any) : null;

    const accessToken = isGitAuthed
      ? response?.identities[0].access_token
      : process.env.GITHUB_PAT;

    const octoKit = new Octokit({
      auth: accessToken,
    });

    const bodyMesage = isGitAuthed
      ? `${response.name} has started working on this issue`
      : `@${walletId} has started working on this issue`;

    await octoKit.rest.issues.createComment({
      owner: process.env.NEXT_PUBLIC_REPO_OWNER as string,
      repo: process.env.NEXT_PUBLIC_REPO_NAME as string,
      issue_number: issueNumber,
      body: bodyMesage,
    });

    res.status(200).json({ message: "Comment added" });
  } catch (error) {
    apiErrorHandler(res, error);
  }
}

'''
'''--- src/pages/api/hello.ts ---
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from 'next'

type Data = {
  name: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>
) {
  res.status(200).json({ name: 'John Doe' })
}

'''
'''--- src/pages/api/issues/[issueNumber].ts ---
import { getIssueDetailsHandler } from "../../../features/api-routes/handlers/issues";
import {
  ApiError,
  apiErrorHandler,
} from "../../../features/api-routes/handlers/utils";

import type { NextApiRequest, NextApiResponse } from "next";

type Data = {
  issue?: any[];
  error?: any;
};

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>
) {
  try {
    switch (req.method) {
      /**
       * `GET /issues/:issueNumber`
       */
      case "GET":
        return getIssueDetailsHandler(req, res);
      default:
        throw new ApiError(400, `Method ${req.method} not allowed`);
    }
  } catch (error) {
    apiErrorHandler(res, error);
  }
}

'''
'''--- src/pages/api/issues/addIssue.ts ---
import {
  ApiError,
  apiErrorHandler,
} from "../../../features/api-routes/handlers/utils";

import type { NextApiRequest, NextApiResponse } from "next";

import { getUserAccessKey } from "../../../features/api-routes/api/helpers/authProfile";

import { Octokit } from "octokit";

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  try {
    const { userId, title, body, isGithubAuth } = req.body;

    const accessToken = (isGithubAuth
      ? await getUserAccessKey(userId)
      : process.env.GITHUB_PAT) as any;

    const octokit = new Octokit({
      auth: !isGithubAuth ? accessToken : accessToken?.identities[0].access_token ,
    });

    

    const newIssue = await octokit.rest.issues.create({
      owner: process.env.NEXT_PUBLIC_REPO_OWNER as string,
      repo: process.env.NEXT_PUBLIC_REPO_NAME as string,
      title,
      body : isGithubAuth ? body : `**Created By: ${userId}**\n ${body}`,
    });

    res.status(200).json({ message: newIssue.data });
  } catch (error) {
    apiErrorHandler(res, error);
  }
}

'''
'''--- src/pages/api/issues/index.ts ---
import { getIssuesListHandler } from "../../../features/api-routes/handlers/issues";
import {
  ApiError,
  apiErrorHandler,
} from "../../../features/api-routes/handlers/utils";

import type { NextApiRequest, NextApiResponse } from "next";

type Data = {
  issues?: any[];
  error?: any;
};

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>
) {
  try {
    switch (req.method) {
      /**
       * `GET /issues?page=1&perPage=10`
       */
      case "GET":
        return getIssuesListHandler(req, res);
      default:
        throw new ApiError(400, `Method ${req.method} not allowed`);
    }
  } catch (error) {
    apiErrorHandler(res, error);
  }
}

'''
'''--- src/styles/globals.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

'''
'''--- src/utils/helpers.js ---
export const parseDate = (date) => {
  let newDate = date + "000";
  const input = !isNaN(newDate) ? parseInt(newDate) : newDate;
  let tempDate = new Date(input);

  const splitDate = tempDate.toString().split(" ");
  return `${splitDate[2]} ${splitDate[1]}, ${splitDate[3]}`;
};

export const nearAccountToHex = (accountsArray) => {
  const resultArray = [];

  accountsArray.forEach((account) => {
    var result = "";
    for (var i = 0; i < account.length; i++) {
      result += account.charCodeAt(i).toString(16);
    }
    let length = result.length / 2;
    let padding = "00";

    if (length < 20) {
      let iterations = 20 - length;
      for (i = 0; i < iterations; i++) {
        result = padding + result;
      }
    } else {
      result = result.substring(0, 40);
    }
    resultArray.push("0x" + result);
  });

  return resultArray;
};

export const isExpired = (bounty, bountySolidity) => {
  const localStorageChain = localStorage.getItem("wallet-chain");

  if (!localStorageChain) {
    return false;
  }

  if (localStorageChain === "near") {
    return !bounty
      ? false
      : Math.floor(Date.now() / 1000) > parseInt(bounty?.deadline);
  } else {
    if (bountySolidity?.data?.id !== "") {
      return (
        Math.floor(Date.now() / 1000) > parseInt(bountySolidity?.data?.deadline)
      );
    } else {
      return false;
    }
  }
};

'''
'''--- src/utils/solidity/BetterBountyV2.json ---
{
  "_format": "hh-sol-artifact-1",
  "contractName": "BetterBountyV2",
  "sourceName": "contracts/BetterBountyV2.sol",
  "abi": [
    {
      "inputs": [],
      "name": "BetterBounty__AlreadyWorking",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BetterBounty__BountyExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BetterBounty__CannotPayoutZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BetterBounty__InvalidBountyId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BetterBounty__InvalidPercentage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BetterBounty__MaxWorkersReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BetterBounty__NoBountyWithId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BetterBounty__NoFundsOnBounty",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BetterBounty__NoFundsOnContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BetterBounty__NotAWorker",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BetterBounty__NotAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BetterBounty__NotAdminProject",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BetterBounty__NotFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BetterBounty__WorkerListEmpty",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adminWallet",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_project",
          "type": "string"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bountyCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startedAt",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_project",
          "type": "string"
        }
      ],
      "name": "fundBounty",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_id",
          "type": "string"
        }
      ],
      "name": "getBountyById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "id",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "pool",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "funders",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "workers",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startedAt",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "status",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "project",
              "type": "string"
            }
          ],
          "internalType": "struct BetterBountyV2.Bounty",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxWorkers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "project",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adminWallet",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_project",
          "type": "string"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_id",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "workerWallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "name": "payoutBounty",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adminWallet",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxWorkers",
          "type": "uint256"
        }
      ],
      "name": "setMaxWorkers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_id",
          "type": "string"
        }
      ],
      "name": "startWork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adminWallet",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_project",
          "type": "string"
        }
      ],
      "name": "updateAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "bytecode": "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff1660601b815250601e60fe5534801561004b57600080fd5b5060805160601c6145c661008660003960008181610e5f01528181610eee01528181611765015281816117f401526118a401526145c66000f3fe60806040526004361061012a5760003560e01c80635c975abb116100ab578063864da8eb1161006f578063864da8eb146103555780638da5cb5b14610392578063d16856ca146103bd578063f2fde38b146103e6578063f62d18881461040f578063fc60338e146104385761012a565b80635c975abb146102aa5780636f028f61146102d5578063715018a6146102fe57806373b51d38146103155780638456cb591461033e5761012a565b80633e362c96116100f25780633e362c96146102055780633f4ba83a146102305780634c11d26f146102475780634f1ef2861461026357806352d1902d1461027f5761012a565b80631785f53c1461012f5780631bea69e3146101585780631ed4b4e5146101955780633659cfe6146101b157806339c8a95a146101da575b600080fd5b34801561013b57600080fd5b5061015660048036038101906101519190613210565b610461565b005b34801561016457600080fd5b5061017f600480360381019061017a9190613383565b61056a565b60405161018c91906133fa565b60405180910390f35b6101af60048036038101906101aa919061344b565b6105d1565b005b3480156101bd57600080fd5b506101d860048036038101906101d39190613210565b610e5d565b005b3480156101e657600080fd5b506101ef610fe6565b6040516101fc91906134f9565b60405180910390f35b34801561021157600080fd5b5061021a610ff0565b60405161022791906134f9565b60405180910390f35b34801561023c57600080fd5b50610245610ff6565b005b610261600480360381019061025c9190613514565b611008565b005b61027d60048036038101906102789190613624565b611763565b005b34801561028b57600080fd5b506102946118a0565b6040516102a19190613699565b60405180910390f35b3480156102b657600080fd5b506102bf611959565b6040516102cc91906133fa565b60405180910390f35b3480156102e157600080fd5b506102fc60048036038101906102f79190613383565b611970565b005b34801561030a57600080fd5b50610313611a6b565b005b34801561032157600080fd5b5061033c600480360381019061033791906136b4565b611a7f565b005b34801561034a57600080fd5b50610353611fb4565b005b34801561036157600080fd5b5061037c600480360381019061037791906136b4565b611fc6565b604051610389919061391e565b60405180910390f35b34801561039e57600080fd5b506103a76122ef565b6040516103b4919061394f565b60405180910390f35b3480156103c957600080fd5b506103e460048036038101906103df9190613383565b612319565b005b3480156103f257600080fd5b5061040d60048036038101906104089190613210565b612414565b005b34801561041b57600080fd5b50610436600480360381019061043191906136b4565b612498565b005b34801561044457600080fd5b5061045f600480360381019061045a919061396a565b61263b565b005b604051806020016040528060008152508051906020012060fc60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040516104c49190613a97565b60405180910390201415610504576040517ffe8409fb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060200160405280600081525060fc60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020908051906020019061056692919061302c565b5050565b6000818051906020012060fc60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040516105c09190613a97565b604051809103902014905092915050565b600034141561060c576040517f9878742500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051806020016040528060008152508051906020012084805190602001201415610663576040517faf90804900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060fb856040516106759190613aea565b90815260200160405180910390206040518061010001604052908160008201805461069f906139c6565b80601f01602080910402602001604051908101604052809291908181526020018280546106cb906139c6565b80156107185780601f106106ed57610100808354040283529160200191610718565b820191906000526020600020905b8154815290600101906020018083116106fb57829003601f168201915b5050505050815260200160018201548152602001600282018054806020026020016040519081016040528092919081815260200182805480156107b057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610766575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561083e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107f4575b50505050508152602001600482015481526020016005820154815260200160068201805461086b906139c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610897906139c6565b80156108e45780601f106108b9576101008083540402835291602001916108e4565b820191906000526020600020905b8154815290600101906020018083116108c757829003601f168201915b505050505081526020016007820180546108fd906139c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610929906139c6565b80156109765780601f1061094b57610100808354040283529160200191610976565b820191906000526020600020905b81548152906001019060200180831161095957829003601f168201915b505050505081525050905060405180602001604052806000815250805190602001208160000151805190602001201415610c20576000604051806101000160405280878152602001348152602001600067ffffffffffffffff8111156109df576109de613258565b5b604051908082528060200260200182016040528015610a0d5781602001602082028036833780820191505090505b508152602001600067ffffffffffffffff811115610a2e57610a2d613258565b5b604051908082528060200260200182016040528015610a5c5781602001602082028036833780820191505090505b5081526020018681526020018581526020016040518060400160405280600481526020017f4f50454e0000000000000000000000000000000000000000000000000000000081525081526020018481525090508060fb87604051610ac09190613aea565b90815260200160405180910390206000820151816000019080519060200190610aea92919061302c565b50602082015181600101556040820151816002019080519060200190610b119291906130b2565b506060820151816003019080519060200190610b2e9291906130b2565b506080820151816004015560a0820151816005015560c0820151816006019080519060200190610b5f92919061302c565b5060e0820151816007019080519060200190610b7c92919061302c565b5090505060fb86604051610b909190613aea565b9081526020016040518091039020600201339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060fd6000815480929190610c1590613b30565b919050555050610e56565b8060800151421115610c5e576040517ffdf3842300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3481602001818151610c709190613b79565b9150818152505060006001905060005b826040015151811015610cf9573373ffffffffffffffffffffffffffffffffffffffff1683604001518281518110610cbb57610cba613bcf565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415610ce85760009150610cf9565b80610cf290613b30565b9050610c80565b508160fb87604051610d0b9190613aea565b90815260200160405180910390206000820151816000019080519060200190610d3592919061302c565b50602082015181600101556040820151816002019080519060200190610d5c9291906130b2565b506060820151816003019080519060200190610d799291906130b2565b506080820151816004015560a0820151816005015560c0820151816006019080519060200190610daa92919061302c565b5060e0820151816007019080519060200190610dc792919061302c565b509050508015610e545760fb86604051610de19190613aea565b9081526020016040518091039020600201339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610eec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee390613c81565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610f2b6126e8565b73ffffffffffffffffffffffffffffffffffffffff1614610f81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7890613d13565b60405180910390fd5b610f8a8161273f565b610fe381600067ffffffffffffffff811115610fa957610fa8613258565b5b6040519080825280601f01601f191660200182016040528015610fdb5781602001600182028036833780820191505090505b50600061274a565b50565b600060fe54905090565b60fd5481565b610ffe6128c7565b611006612945565b565b604051806020016040528060008152508051906020012060fc60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405161106b9190613a97565b604051809103902014156110ab576040517ffe8409fb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60004714156110e6576040517f3c63656c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561114d576040517ff47ca55900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6064811115611188576040517f07528dbc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060fb8460405161119a9190613aea565b9081526020016040518091039020604051806101000160405290816000820180546111c4906139c6565b80601f01602080910402602001604051908101604052809291908181526020018280546111f0906139c6565b801561123d5780601f106112125761010080835404028352916020019161123d565b820191906000526020600020905b81548152906001019060200180831161122057829003601f168201915b5050505050815260200160018201548152602001600282018054806020026020016040519081016040528092919081815260200182805480156112d557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161128b575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561136357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611319575b505050505081526020016004820154815260200160058201548152602001600682018054611390906139c6565b80601f01602080910402602001604051908101604052809291908181526020018280546113bc906139c6565b80156114095780601f106113de57610100808354040283529160200191611409565b820191906000526020600020905b8154815290600101906020018083116113ec57829003601f168201915b50505050508152602001600782018054611422906139c6565b80601f016020809104026020016040519081016040528092919081815260200182805461144e906139c6565b801561149b5780601f106114705761010080835404028352916020019161149b565b820191906000526020600020905b81548152906001019060200180831161147e57829003601f168201915b505050505081525050905060405180602001604052806000815250805190602001208160000151805190602001201415611501576040517ffbe9225100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060e001518051906020012060fc60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040516115599190613a97565b604051809103902014611598576040517f918278a400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000816020015114156115d7576040517fc89dd75500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160600151905060008151141561161c576040517fca20333000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805b8251811015611691578573ffffffffffffffffffffffffffffffffffffffff1683828151811061165357611652613bcf565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156116805760019150611691565b8061168a90613b30565b9050611620565b50806116c9576040517f4ad4885200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006116d98585602001516129a8565b90508060fb886040516116ec9190613aea565b9081526020016040518091039020600101600082825461170c9190613d33565b925050819055508573ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611759573d6000803e3d6000fd5b5050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614156117f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e990613c81565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166118316126e8565b73ffffffffffffffffffffffffffffffffffffffff1614611887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187e90613d13565b60405180910390fd5b6118908261273f565b61189c8282600161274a565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614611930576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192790613dd9565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b600060c960009054906101000a900460ff16905090565b604051806020016040528060008152508051906020012060fc60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040516119d39190613a97565b60405180910390201415611a13576040517ffe8409fb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060fc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190611a6692919061302c565b505050565b611a736128c7565b611a7d60006129e2565b565b600060fb82604051611a919190613aea565b908152602001604051809103902060405180610100016040529081600082018054611abb906139c6565b80601f0160208091040260200160405190810160405280929190818152602001828054611ae7906139c6565b8015611b345780601f10611b0957610100808354040283529160200191611b34565b820191906000526020600020905b815481529060010190602001808311611b1757829003601f168201915b505050505081526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020018280548015611bcc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611b82575b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015611c5a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611c10575b505050505081526020016004820154815260200160058201548152602001600682018054611c87906139c6565b80601f0160208091040260200160405190810160405280929190818152602001828054611cb3906139c6565b8015611d005780601f10611cd557610100808354040283529160200191611d00565b820191906000526020600020905b815481529060010190602001808311611ce357829003601f168201915b50505050508152602001600782018054611d19906139c6565b80601f0160208091040260200160405190810160405280929190818152602001828054611d45906139c6565b8015611d925780601f10611d6757610100808354040283529160200191611d92565b820191906000526020600020905b815481529060010190602001808311611d7557829003601f168201915b505050505081525050905060405180602001604052806000815250805190602001208160000151805190602001201415611df8576040517ffbe9225100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060800151421115611e36576040517ffdf3842300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60fe548160600151511415611e77576040517fab4b92dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008160600151905060008151905060008114611f2c5760005b81811015611f2a573373ffffffffffffffffffffffffffffffffffffffff16838281518110611ec357611ec2613bcf565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415611f19576040517f13a4e40800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80611f2390613b30565b9050611e91565b505b60fb84604051611f3c9190613aea565b9081526020016040518091039020600301339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b611fbc6128c7565b611fc4612aa8565b565b611fce61313c565b60fb82604051611fde9190613aea565b908152602001604051809103902060405180610100016040529081600082018054612008906139c6565b80601f0160208091040260200160405190810160405280929190818152602001828054612034906139c6565b80156120815780601f1061205657610100808354040283529160200191612081565b820191906000526020600020905b81548152906001019060200180831161206457829003601f168201915b50505050508152602001600182015481526020016002820180548060200260200160405190810160405280929190818152602001828054801561211957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116120cf575b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156121a757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161215d575b5050505050815260200160048201548152602001600582015481526020016006820180546121d4906139c6565b80601f0160208091040260200160405190810160405280929190818152602001828054612200906139c6565b801561224d5780601f106122225761010080835404028352916020019161224d565b820191906000526020600020905b81548152906001019060200180831161223057829003601f168201915b50505050508152602001600782018054612266906139c6565b80601f0160208091040260200160405190810160405280929190818152602001828054612292906139c6565b80156122df5780601f106122b4576101008083540402835291602001916122df565b820191906000526020600020905b8154815290600101906020018083116122c257829003601f168201915b5050505050815250509050919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b604051806020016040528060008152508051906020012060fc60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405161237c9190613a97565b604051809103902014156123bc576040517ffe8409fb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060fc60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020908051906020019061240f92919061302c565b505050565b61241c6128c7565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561248c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248390613e6b565b60405180910390fd5b612495816129e2565b50565b60008060019054906101000a900460ff161590508080156124c95750600160008054906101000a900460ff1660ff16105b806124f657506124d830612b0b565b1580156124f55750600160008054906101000a900460ff1660ff16145b5b612535576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252c90613efd565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015612572576001600060016101000a81548160ff0219169083151502179055505b8160fc60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090805190602001906125c592919061302c565b506125ce612b2e565b6125d6612b87565b6125de612be0565b80156126375760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161262e9190613f6f565b60405180910390a15b5050565b604051806020016040528060008152508051906020012060fc60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405161269e9190613a97565b604051809103902014156126de576040517ffe8409fb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060fe8190555050565b60006127167f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612c31565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6127476128c7565b50565b6127767f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b612c3b565b60000160009054906101000a900460ff161561279a5761279583612c45565b6128c2565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156127e057600080fd5b505afa92505050801561281157506040513d601f19601f8201168201806040525081019061280e9190613fb6565b60015b612850576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161284790614055565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b81146128b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128ac906140e7565b60405180910390fd5b506128c1838383612cfe565b5b505050565b6128cf612d2a565b73ffffffffffffffffffffffffffffffffffffffff166128ed6122ef565b73ffffffffffffffffffffffffffffffffffffffff1614612943576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293a90614153565b60405180910390fd5b565b61294d612d32565b600060c960006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612991612d2a565b60405161299e919061394f565b60405180910390a1565b6000806064846129b89190614173565b9050600061271082856129cb9190614173565b6129d591906141fc565b9050809250505092915050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612ab0612d7b565b600160c960006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612af4612d2a565b604051612b01919061394f565b60405180910390a1565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16612b7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b749061429f565b60405180910390fd5b612b85612dc5565b565b600060019054906101000a900460ff16612bd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bcd9061429f565b60405180910390fd5b612bde612e31565b565b600060019054906101000a900460ff16612c2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c269061429f565b60405180910390fd5b565b6000819050919050565b6000819050919050565b612c4e81612b0b565b612c8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c8490614331565b60405180910390fd5b80612cba7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612c31565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612d0783612e92565b600082511180612d145750805b15612d2557612d238383612ee1565b505b505050565b600033905090565b612d3a611959565b612d79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d709061439d565b60405180910390fd5b565b612d83611959565b15612dc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dba90614409565b60405180910390fd5b565b600060019054906101000a900460ff16612e14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e0b9061429f565b60405180910390fd5b600060c960006101000a81548160ff021916908315150217905550565b600060019054906101000a900460ff16612e80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e779061429f565b60405180910390fd5b612e90612e8b612d2a565b6129e2565b565b612e9b81612c45565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6060612eec83612b0b565b612f2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f229061449b565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1684604051612f5391906144f7565b600060405180830381855af49150503d8060008114612f8e576040519150601f19603f3d011682016040523d82523d6000602084013e612f93565b606091505b5091509150612fbb828260405180606001604052806027815260200161456a60279139612fc5565b9250505092915050565b60608315612fd557829050613025565b600083511115612fe85782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161301c9190614547565b60405180910390fd5b9392505050565b828054613038906139c6565b90600052602060002090601f01602090048101928261305a57600085556130a1565b82601f1061307357805160ff19168380011785556130a1565b828001600101855582156130a1579182015b828111156130a0578251825591602001919060010190613085565b5b5090506130ae9190613181565b5090565b82805482825590600052602060002090810192821561312b579160200282015b8281111561312a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906130d2565b5b5090506131389190613181565b5090565b60405180610100016040528060608152602001600081526020016060815260200160608152602001600081526020016000815260200160608152602001606081525090565b5b8082111561319a576000816000905550600101613182565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006131dd826131b2565b9050919050565b6131ed816131d2565b81146131f857600080fd5b50565b60008135905061320a816131e4565b92915050565b600060208284031215613226576132256131a8565b5b6000613234848285016131fb565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61329082613247565b810181811067ffffffffffffffff821117156132af576132ae613258565b5b80604052505050565b60006132c261319e565b90506132ce8282613287565b919050565b600067ffffffffffffffff8211156132ee576132ed613258565b5b6132f782613247565b9050602081019050919050565b82818337600083830152505050565b6000613326613321846132d3565b6132b8565b90508281526020810184848401111561334257613341613242565b5b61334d848285613304565b509392505050565b600082601f83011261336a5761336961323d565b5b813561337a848260208601613313565b91505092915050565b6000806040838503121561339a576133996131a8565b5b60006133a8858286016131fb565b925050602083013567ffffffffffffffff8111156133c9576133c86131ad565b5b6133d585828601613355565b9150509250929050565b60008115159050919050565b6133f4816133df565b82525050565b600060208201905061340f60008301846133eb565b92915050565b6000819050919050565b61342881613415565b811461343357600080fd5b50565b6000813590506134458161341f565b92915050565b60008060008060808587031215613465576134646131a8565b5b600085013567ffffffffffffffff811115613483576134826131ad565b5b61348f87828801613355565b94505060206134a087828801613436565b93505060406134b187828801613436565b925050606085013567ffffffffffffffff8111156134d2576134d16131ad565b5b6134de87828801613355565b91505092959194509250565b6134f381613415565b82525050565b600060208201905061350e60008301846134ea565b92915050565b60008060006060848603121561352d5761352c6131a8565b5b600084013567ffffffffffffffff81111561354b5761354a6131ad565b5b61355786828701613355565b9350506020613568868287016131fb565b925050604061357986828701613436565b9150509250925092565b600067ffffffffffffffff82111561359e5761359d613258565b5b6135a782613247565b9050602081019050919050565b60006135c76135c284613583565b6132b8565b9050828152602081018484840111156135e3576135e2613242565b5b6135ee848285613304565b509392505050565b600082601f83011261360b5761360a61323d565b5b813561361b8482602086016135b4565b91505092915050565b6000806040838503121561363b5761363a6131a8565b5b6000613649858286016131fb565b925050602083013567ffffffffffffffff81111561366a576136696131ad565b5b613676858286016135f6565b9150509250929050565b6000819050919050565b61369381613680565b82525050565b60006020820190506136ae600083018461368a565b92915050565b6000602082840312156136ca576136c96131a8565b5b600082013567ffffffffffffffff8111156136e8576136e76131ad565b5b6136f484828501613355565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561373757808201518184015260208101905061371c565b83811115613746576000848401525b50505050565b6000613757826136fd565b6137618185613708565b9350613771818560208601613719565b61377a81613247565b840191505092915050565b61378e81613415565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6137c9816131d2565b82525050565b60006137db83836137c0565b60208301905092915050565b6000602082019050919050565b60006137ff82613794565b613809818561379f565b9350613814836137b0565b8060005b8381101561384557815161382c88826137cf565b9750613837836137e7565b925050600181019050613818565b5085935050505092915050565b6000610100830160008301518482036000860152613870828261374c565b91505060208301516138856020860182613785565b506040830151848203604086015261389d82826137f4565b915050606083015184820360608601526138b782826137f4565b91505060808301516138cc6080860182613785565b5060a08301516138df60a0860182613785565b5060c083015184820360c08601526138f7828261374c565b91505060e083015184820360e0860152613911828261374c565b9150508091505092915050565b600060208201905081810360008301526139388184613852565b905092915050565b613949816131d2565b82525050565b60006020820190506139646000830184613940565b92915050565b6000602082840312156139805761397f6131a8565b5b600061398e84828501613436565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806139de57607f821691505b602082108114156139f2576139f1613997565b5b50919050565b600081905092915050565b60008190508160005260206000209050919050565b60008154613a25816139c6565b613a2f81866139f8565b94506001821660008114613a4a5760018114613a5b57613a8e565b60ff19831686528186019350613a8e565b613a6485613a03565b60005b83811015613a8657815481890152600182019150602081019050613a67565b838801955050505b50505092915050565b6000613aa38284613a18565b915081905092915050565b600081905092915050565b6000613ac4826136fd565b613ace8185613aae565b9350613ade818560208601613719565b80840191505092915050565b6000613af68284613ab9565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b3b82613415565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613b6e57613b6d613b01565b5b600182019050919050565b6000613b8482613415565b9150613b8f83613415565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613bc457613bc3613b01565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000613c6b602c83613bfe565b9150613c7682613c0f565b604082019050919050565b60006020820190508181036000830152613c9a81613c5e565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000613cfd602c83613bfe565b9150613d0882613ca1565b604082019050919050565b60006020820190508181036000830152613d2c81613cf0565b9050919050565b6000613d3e82613415565b9150613d4983613415565b925082821015613d5c57613d5b613b01565b5b828203905092915050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b6000613dc3603883613bfe565b9150613dce82613d67565b604082019050919050565b60006020820190508181036000830152613df281613db6565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613e55602683613bfe565b9150613e6082613df9565b604082019050919050565b60006020820190508181036000830152613e8481613e48565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613ee7602e83613bfe565b9150613ef282613e8b565b604082019050919050565b60006020820190508181036000830152613f1681613eda565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000613f59613f54613f4f84613f1d565b613f34565b613f27565b9050919050565b613f6981613f3e565b82525050565b6000602082019050613f846000830184613f60565b92915050565b613f9381613680565b8114613f9e57600080fd5b50565b600081519050613fb081613f8a565b92915050565b600060208284031215613fcc57613fcb6131a8565b5b6000613fda84828501613fa1565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b600061403f602e83613bfe565b915061404a82613fe3565b604082019050919050565b6000602082019050818103600083015261406e81614032565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b60006140d1602983613bfe565b91506140dc82614075565b604082019050919050565b60006020820190508181036000830152614100816140c4565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061413d602083613bfe565b915061414882614107565b602082019050919050565b6000602082019050818103600083015261416c81614130565b9050919050565b600061417e82613415565b915061418983613415565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156141c2576141c1613b01565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061420782613415565b915061421283613415565b925082614222576142216141cd565b5b828204905092915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000614289602b83613bfe565b91506142948261422d565b604082019050919050565b600060208201905081810360008301526142b88161427c565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b600061431b602d83613bfe565b9150614326826142bf565b604082019050919050565b6000602082019050818103600083015261434a8161430e565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000614387601483613bfe565b915061439282614351565b602082019050919050565b600060208201905081810360008301526143b68161437a565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006143f3601083613bfe565b91506143fe826143bd565b602082019050919050565b60006020820190508181036000830152614422816143e6565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000614485602683613bfe565b915061449082614429565b604082019050919050565b600060208201905081810360008301526144b481614478565b9050919050565b600081519050919050565b60006144d1826144bb565b6144db81856139f8565b93506144eb818560208601613719565b80840191505092915050565b600061450382846144c6565b915081905092915050565b6000614519826136fd565b6145238185613bfe565b9350614533818560208601613719565b61453c81613247565b840191505092915050565b60006020820190508181036000830152614561818461450e565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220c6871a02332a33be27c721cf0e9f6f798058c13b5fdf5d2825bc9be7872ae7fb64736f6c63430008080033",
  "deployedBytecode": "",
  "linkReferences": {},
  "deployedLinkReferences": {}
}

'''
'''--- src/utils/solidity/defaultConfig.ts ---
import * as BetterBountyV2 from "./BetterBountyV2.json"

export const contractConfig = {
    addressOrName: process.env.NEXT_PUBLIC_POLYGON_CONTRACT_ADDRESS as string,
    contractInterface: BetterBountyV2.abi,
}
'''
'''--- tailwind.config.js ---
module.exports = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx}",
    "./src/features/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [require("@tailwindcss/typography")],
};

'''
'''--- test/mocks/github.ts ---
// export const

export const ISSUE_ = {
  id: 1,
  node_id: "MDU6SXNzdWUx",
  url: "https://api.github.com/repos/octocat/Hello-World/issues/1347",
  repository_url: "https://api.github.com/repos/octocat/Hello-World",
  labels_url:
    "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
  comments_url:
    "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
  events_url:
    "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
  html_url: "https://github.com/octocat/Hello-World/issues/1347",
  number: 1347,
  state: "open",
  title: "Found a bug",
  body: "I'm having a problem with this.",
  user: {
    login: "octocat",
    id: 1,
    node_id: "MDQ6VXNlcjE=",
    avatar_url: "https://github.com/images/error/octocat_happy.gif",
    gravatar_id: "",
    url: "https://api.github.com/users/octocat",
    html_url: "https://github.com/octocat",
    followers_url: "https://api.github.com/users/octocat/followers",
    following_url:
      "https://api.github.com/users/octocat/following{/other_user}",
    gists_url: "https://api.github.com/users/octocat/gists{/gist_id}",
    starred_url: "https://api.github.com/users/octocat/starred{/owner}{/repo}",
    subscriptions_url: "https://api.github.com/users/octocat/subscriptions",
    organizations_url: "https://api.github.com/users/octocat/orgs",
    repos_url: "https://api.github.com/users/octocat/repos",
    events_url: "https://api.github.com/users/octocat/events{/privacy}",
    received_events_url: "https://api.github.com/users/octocat/received_events",
    type: "User",
    site_admin: false,
  },
  labels: [
    {
      id: 208045946,
      node_id: "MDU6TGFiZWwyMDgwNDU5NDY=",
      url: "https://api.github.com/repos/octocat/Hello-World/labels/bug",
      name: "bug",
      description: "Something isn't working",
      color: "f29513",
      default: true,
    },
  ],
  assignee: {
    login: "octocat",
    id: 1,
    node_id: "MDQ6VXNlcjE=",
    avatar_url: "https://github.com/images/error/octocat_happy.gif",
    gravatar_id: "",
    url: "https://api.github.com/users/octocat",
    html_url: "https://github.com/octocat",
    followers_url: "https://api.github.com/users/octocat/followers",
    following_url:
      "https://api.github.com/users/octocat/following{/other_user}",
    gists_url: "https://api.github.com/users/octocat/gists{/gist_id}",
    starred_url: "https://api.github.com/users/octocat/starred{/owner}{/repo}",
    subscriptions_url: "https://api.github.com/users/octocat/subscriptions",
    organizations_url: "https://api.github.com/users/octocat/orgs",
    repos_url: "https://api.github.com/users/octocat/repos",
    events_url: "https://api.github.com/users/octocat/events{/privacy}",
    received_events_url: "https://api.github.com/users/octocat/received_events",
    type: "User",
    site_admin: false,
  },
  assignees: [
    {
      login: "octocat",
      id: 1,
      node_id: "MDQ6VXNlcjE=",
      avatar_url: "https://github.com/images/error/octocat_happy.gif",
      gravatar_id: "",
      url: "https://api.github.com/users/octocat",
      html_url: "https://github.com/octocat",
      followers_url: "https://api.github.com/users/octocat/followers",
      following_url:
        "https://api.github.com/users/octocat/following{/other_user}",
      gists_url: "https://api.github.com/users/octocat/gists{/gist_id}",
      starred_url:
        "https://api.github.com/users/octocat/starred{/owner}{/repo}",
      subscriptions_url: "https://api.github.com/users/octocat/subscriptions",
      organizations_url: "https://api.github.com/users/octocat/orgs",
      repos_url: "https://api.github.com/users/octocat/repos",
      events_url: "https://api.github.com/users/octocat/events{/privacy}",
      received_events_url:
        "https://api.github.com/users/octocat/received_events",
      type: "User",
      site_admin: false,
    },
  ],
  milestone: {
    url: "https://api.github.com/repos/octocat/Hello-World/milestones/1",
    html_url: "https://github.com/octocat/Hello-World/milestones/v1.0",
    labels_url:
      "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
    id: 1002604,
    node_id: "MDk6TWlsZXN0b25lMTAwMjYwNA==",
    number: 1,
    state: "open",
    title: "v1.0",
    description: "Tracking milestone for version 1.0",
    creator: {
      login: "octocat",
      id: 1,
      node_id: "MDQ6VXNlcjE=",
      avatar_url: "https://github.com/images/error/octocat_happy.gif",
      gravatar_id: "",
      url: "https://api.github.com/users/octocat",
      html_url: "https://github.com/octocat",
      followers_url: "https://api.github.com/users/octocat/followers",
      following_url:
        "https://api.github.com/users/octocat/following{/other_user}",
      gists_url: "https://api.github.com/users/octocat/gists{/gist_id}",
      starred_url:
        "https://api.github.com/users/octocat/starred{/owner}{/repo}",
      subscriptions_url: "https://api.github.com/users/octocat/subscriptions",
      organizations_url: "https://api.github.com/users/octocat/orgs",
      repos_url: "https://api.github.com/users/octocat/repos",
      events_url: "https://api.github.com/users/octocat/events{/privacy}",
      received_events_url:
        "https://api.github.com/users/octocat/received_events",
      type: "User",
      site_admin: false,
    },
    open_issues: 4,
    closed_issues: 8,
    created_at: "2011-04-10T20:09:31Z",
    updated_at: "2014-03-03T18:58:10Z",
    closed_at: "2013-02-12T13:22:01Z",
    due_on: "2012-10-09T23:39:01Z",
  },
  locked: true,
  active_lock_reason: "too heated",
  comments: 0,
  pull_request: {
    url: "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
    html_url: "https://github.com/octocat/Hello-World/pull/1347",
    diff_url: "https://github.com/octocat/Hello-World/pull/1347.diff",
    patch_url: "https://github.com/octocat/Hello-World/pull/1347.patch",
  },
  closed_at: null,
  created_at: "2011-04-22T13:33:48Z",
  updated_at: "2011-04-22T13:33:48Z",
  closed_by: {
    login: "octocat",
    id: 1,
    node_id: "MDQ6VXNlcjE=",
    avatar_url: "https://github.com/images/error/octocat_happy.gif",
    gravatar_id: "",
    url: "https://api.github.com/users/octocat",
    html_url: "https://github.com/octocat",
    followers_url: "https://api.github.com/users/octocat/followers",
    following_url:
      "https://api.github.com/users/octocat/following{/other_user}",
    gists_url: "https://api.github.com/users/octocat/gists{/gist_id}",
    starred_url: "https://api.github.com/users/octocat/starred{/owner}{/repo}",
    subscriptions_url: "https://api.github.com/users/octocat/subscriptions",
    organizations_url: "https://api.github.com/users/octocat/orgs",
    repos_url: "https://api.github.com/users/octocat/repos",
    events_url: "https://api.github.com/users/octocat/events{/privacy}",
    received_events_url: "https://api.github.com/users/octocat/received_events",
    type: "User",
    site_admin: false,
  },
  author_association: "COLLABORATOR",
};

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "baseUrl": "./src",
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

'''