*GitHub Repository "oserk/Student-Reward"*

'''--- README.md ---
# ![](https://user-images.githubusercontent.com/63979453/165187423-a071dc28-8577-4eaa-907a-6e61d7284cdb.png)                                             Student-Reward

Introductory Video Link: https://www.loom.com/share/ffb96f63e353436ba3d327bf3ef08408

Rewarding Successful Student: Start voting for students who are successful in the "Near Developer" course. Support students as they vote and help them get the computer equipment they need.

## Usage Steps of Smart Contract

- First step
```
yarn
```
- Second step: Deploy to testnet account
```
yarn build:release

near dev-deploy ./build/release/simple.wasm

export CONTRACT=dev-YOUR-ID
```

## Access Smart Contract

```
near call $CONTRACT start '{}' --accountId $CONTRACT
```
- Create Student Profile
```
near call $CONTRACT createStudent '{ "name": "Your Name", "yearOfbirth": 1997, "country": "YourCountry", "computerEquipment": "Mouse", "pocketMoney": 1, "neededVote": 5 }' --accountId $CONTRACT
```
- Get All Student Profile
```
near view $CONTRACT ListOfStudent '{}'
```
- Vote and Sending Pocket Money
```
near call $CONTRACT timeToVote '{ "id": EnterStudentID }' --accountId $CONTRACT --deposit EnterPocketMoneyAmount
```
- Get Student with Specific ID
```
near view $CONTRACT getStudentById '{ "id": EnterStudentID }'
```
- Get Transfer History
```
near view $CONTRACT transferHistory '{}'
```
- Delete Student Profile with Specific ID
```
near call $CONTRACT deleteStudent '{ "id": EnterStudentID }' --accountId $CONTRACT
```

'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- asconfig.json ---
{
  "workspaces": [
    "src/simple",
    "src/singleton"
  ]
}

'''
'''--- package.json ---
{
  "name": "starter--near-sdk-as",
  "version": "0.0.1",
  "description": "Start with a basic project",
  "scripts": {
    "dev": "watch -d -n 1 'clear && yarn test'",
    "test": "yarn asp -f unit.spec",
    "clean": "rm -rf ./build && rm -rf ./neardev",
    "build": "asb --target debug",
    "build:release": "asb",
    "asp": "asp --verbose --nologo"
  },
  "keywords": [],
  "author": "hello@near.org",
  "license": "ISC",
  "devDependencies": {
    "near-sdk-as": "^3.1.0"
  }
}

'''
'''--- scripts/1.dev-deploy.sh ---
#!/usr/bin/env bash

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"

echo "deleting $CONTRACT"
echo
near delete $CONTRACT 

echo --------------------------------------------
echo
echo "cleaning up the /neardev folder"
echo
rm -rf ./neardev

# exit on first error after this point to avoid redeploying with successful build
set -e

echo --------------------------------------------
echo
echo "rebuilding the contract (release build)"
echo
yarn build:release

echo --------------------------------------------
echo
echo "redeploying the contract"
echo
near dev-deploy ./build/release/simple.wasm

echo --------------------------------------------
echo run the following commands
echo
echo 'export CONTRACT=<dev-123-456>'
echo
echo

exit 0
'''
'''--- scripts/2.use-contract.sh ---
#!/usr/bin/env bash
set -e

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1

echo
echo 
echo 'About to call start() on the contract'
echo near call \$CONTRACT start '{}' --account_id \$CONTRACT
echo
echo \$CONTRACT is $CONTRACT
echo 'Create student profile'
echo 'Parameters are filled in as an example. The user can change it according to his request.'
near call $CONTRACT createStudent '{ "name": "sampleName", "yearOfbirth": 1997, "country": "sampleCountry", "computerEquipment": "yourNeededEquipment", "pocketMoney": 2, "neededVote": 20 }' --accountId $CONTRACT
echo
echo 'Vote Student'
echo '"PocketMoney" can be sent to the student via "--deposit"'
echo 'The "id" parameter can be changed according to the student you want to vote for.'
near call $CONTRACT timeToVote '{ "id": 0 }' --accountId $CONTRACT --deposit 1
echo 'In addition, the following methods can be used.'
echo 'near view $CONTRACT ListOfStudent '{}''
echo 'near view $CONTRACT getStudentById '{ "id": EnterStudentID }''
echo 'near view $CONTRACT transferHistory '{}''
echo 'near call $CONTRACT deleteStudent '{ "id": EnterStudentID }' --accountId $CONTRACT'
'''
'''--- scripts/README.md ---
## Setting up your terminal

The scripts in this folder are designed to help you demonstrate the behavior of the contract(s) in this project.

It uses the following setup:

'''
'''--- src/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- src/simple/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- src/simple/__tests__/index.unit.spec.ts ---
import * as contract from "../assembly";

describe("Contract", () => {
  // VIEW method tests

  it("says hello", () => {
    expect(contract.helloWorld()).toStrictEqual("hello world")
  })

  it("reads data", () => {
    expect(contract.read("some key")).toStrictEqual("🚫 Key [ some key ] not found in storage. ( storage [ 0 bytes ] )")
  })

  // CHANGE method tests

  it("saves data to contract storage", () => {
    expect(contract.write("some-key", "some value")).toStrictEqual("✅ Data saved. ( storage [ 18 bytes ] )")
  })
})

'''
'''--- src/simple/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- src/simple/assembly/index.ts ---
import { ContractPromiseBatch, context, u128, storage } from "near-sdk-as";
import { Student, students, Donation, donations } from "./model";

function Fstart(): void {
  assert(!storage.hasKey("electorate"), "Voted before with this contract.");
}

export function start(): void {
  Fstart();
  storage.setString("electorate", context.sender);
  storage.set("ID", 0);
}

function electorate(): void {
  assert(
    context.predecessor == storage.getString("electorate"),
    "Only electorate owner use this function!"
  );
}

export function createStudent(
  name: string,
  yearOfbirth: u32,
  country: string,
  computerEquipment: string,
  pocketMoney: u32,
  neededVote: u32
): Student {
  electorate();
  let id = storage.getSome<u32>("ID");
  storage.set("ID", id + 1);
  const studentq = new Student(
    id,
    name,
    yearOfbirth,
    country,
    computerEquipment,
    pocketMoney,
    neededVote
  );
  students.set(id, studentq);
  return studentq;
}

export function deleteStudent(id: u32): void {
  electorate();
  students.delete(id);
}

function neededVoteCheck(studentq: Student): void {
  assert(studentq.neededVote > 0, "Vote is over.");
}

function sendPocketMoney(pocketMoney: number): void {
  assert(
    context.attachedDeposit >= u128.from(pocketMoney),
    "The amount must be greater than 0."
  );
}

export function timeToVote(id: u32): void {
  let studentq = getStudentById(id);
  let pocketMoney = studentq.pocketMoney;
  let sender = context.sender;

  neededVoteCheck(studentq);
  sendPocketMoney(pocketMoney);

  ContractPromiseBatch.create(sender).transfer(u128.from(pocketMoney));
  studentq.neededVoteCheck();
  report(sender, studentq);
}

export function getStudentById(id: u32): Student {
  return students.getSome(id);
}

export function ListOfStudent(): Student[] {
  let array = new Array<Student>();
  let length = storage.getSome<i32>("ID");
  for (let i = 0; i < length; i++) {
    if (students.contains(i)) {
      let studentq = students.getSome(i);
      array.push(studentq);
    }
  }
  return array;
}

export function transferHistory(): Donation[] {
  let array = new Array<Donation>();
  for (let i = 0; i < donations.length; i++) {
    array.push(donations[i]);
  }
  return array;
}

function report(sender: string, studentq: Student): void {
  const donation = new Donation(sender, studentq);
  donations.push(donation);
}

'''
'''--- src/simple/assembly/model.ts ---
import { PersistentUnorderedMap, PersistentVector, context } from "near-sdk-as";
import { Timestamp } from "../../utils";

export const students = new PersistentUnorderedMap<u32, Student>("s");
export const donations = new PersistentVector<Donation>("d");

@nearBindgen
export class Student {
  id: u32;
  name: string;
  yearOfBirth: u32;
  country: string;
  computerEquipment: string;
  pocketMoney: u32;
  neededVote: u32;

  constructor(
    id: u32,
    name: string,
    yearOfbirth: u32,
    country: string,
    computerEquipment: string,
    pocketMoney: u32,
    neededVote: u32
  ) {
    this.id = id;
    this.name = name;
    this.yearOfBirth = yearOfbirth;
    this.country = country;
    this.computerEquipment = computerEquipment;
    this.pocketMoney = pocketMoney;
    this.neededVote = neededVote;
  }

  neededVoteCheck(): void {
    this.neededVote -= 1;
    students.set(this.id, this);
  }
}

@nearBindgen
export class Donation {
  timestamp: Timestamp = context.blockTimestamp;
  studentq: Student;
  sender: string;

  constructor(sender: string, studentq: Student) {
    this.sender = sender;
    this.studentq = studentq;
  }
}

'''
'''--- src/singleton/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- src/singleton/__tests__/index.unit.spec.ts ---
import { Contract } from "../assembly";

let contract: Contract

beforeEach(() => {
  contract = new Contract()
})

describe("Contract", () => {
  // VIEW method tests

  it("says hello", () => {
    expect(contract.helloWorld()).toStrictEqual("hello world")
  })

  it("reads data", () => {
    expect(contract.read("some key")).toStrictEqual("🚫 Key [ some key ] not found in storage. ( storage [ 0 bytes ] )")
  })

  // CHANGE method tests

  it("saves data to contract storage", () => {
    expect(contract.write("some-key", "some value")).toStrictEqual("✅ Data saved. ( storage [ 18 bytes ] )")
  })
})

'''
'''--- src/singleton/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- src/singleton/assembly/index.ts ---
import { storage, Context } from "near-sdk-core"

@nearBindgen
export class Contract {
  private message: string = 'hello world'

  // return the string 'hello world'
  helloWorld(): string {
    return this.message
  }

  // read the given key from account (contract) storage
  read(key: string): string {
    if (isKeyInStorage(key)) {
      return `✅ Key [ ${key} ] has value [ ${storage.getString(key)!} ] and "this.message" is [ ${this.message} ]`
    } else {
      return `🚫 Key [ ${key} ] not found in storage. ( ${this.storageReport()} )`
    }
  }

  /**
  write the given value at the given key to account (contract) storage
  ---
  note: this is what account storage will look like AFTER the write() method is called the first time
  ╔════════════════════════════════╤══════════════════════════════════════════════════════════════════════════════════╗
  ║                            key │ value                                                                            ║
  ╟────────────────────────────────┼──────────────────────────────────────────────────────────────────────────────────╢
  ║                          STATE │ {                                                                                ║
  ║                                │   "message": "data was saved"                                                    ║
  ║                                │ }                                                                                ║
  ╟────────────────────────────────┼──────────────────────────────────────────────────────────────────────────────────╢
  ║                       some-key │ some value                                                                       ║
  ╚════════════════════════════════╧══════════════════════════════════════════════════════════════════════════════════╝
   */
  @mutateState()
  write(key: string, value: string): string {
    storage.set(key, value)
    this.message = 'data was saved' // this is why we need the deorator @mutateState() above the method name
    return `✅ Data saved. ( ${this.storageReport()} )`
  }

  // private helper method used by read() and write() above
  private storageReport(): string {
    return `storage [ ${Context.storageUsage} bytes ]`
  }
}

/**
 * This function exists only to avoid a compiler error
 *

ERROR TS2339: Property 'contains' does not exist on type 'src/singleton/assembly/index/Contract'.

     return this.contains(key);
                 ~~~~~~~~
 in ~lib/near-sdk-core/storage.ts(119,17)

/Users/sherif/Documents/code/near/_projects/edu.t3/starter--near-sdk-as/node_modules/asbuild/dist/main.js:6
        throw err;
        ^

 * @param key string key in account storage
 * @returns boolean indicating whether key exists
 */
function isKeyInStorage(key: string): bool {
  return storage.hasKey(key)
}

'''
'''--- src/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- src/utils.ts ---
import { u128, Context, ContractPromise } from "near-sdk-as";

/**
 * == TYPES ====================================================================
 */

/**
 * Account IDs in NEAR are just strings.
 */
export type AccountId = string;

/**
 * Gas is u64
 */
export type Gas = u64;

/**
 * Amounts, Balances, and Money in NEAR is are u128.
 */

export type Amount = u128;

export type Balance = Amount;

export type Money = Amount;

/**
 * Timestamp in NEAR is a number.
 */
export type Timestamp = u64;

/**
 * == CONSTANTS ================================================================
 *
 * ONE_NEAR = unit of NEAR token in yocto Ⓝ (1e24)
 * XCC_GAS = gas for cross-contract calls, ~5 Tgas (teragas = 1e12) per "hop"
 * MIN_ACCOUNT_BALANCE = 3 NEAR min to keep account alive via storage staking
 *
 * TODO: revist MIN_ACCOUNT_BALANCE after some real data is included b/c this
 *  could end up being much higher
 */

export const ONE_NEAR = u128.from("1000000000000000000000000");
export const XCC_GAS: Gas = 20_000_000_000_000;
export const MIN_ACCOUNT_BALANCE: u128 = u128.mul(ONE_NEAR, u128.from(3));

/**
 * == FUNCTIONS ================================================================
 */

/**
 * @function asNEAR
 * @param amount {u128} - Yocto Ⓝ token quantity as an unsigned 128-bit integer
 * @returns {string}    - Amount in NEAR, as a string
 *
 * @example
 *
 *    asNEAR(7000000000000000000000000)
 *    // => '7'
 */
export function asNEAR(amount: u128): string {
  return u128.div(amount, ONE_NEAR).toString();
}

/**
 * @function toYocto
 * @param amount {number} - Integer to convert
 * @returns {u128}        - Amount in yocto Ⓝ as an unsigned 128-bit integer
 *
 * @example
 *
 *    toYocto(7)
 *    // => 7000000000000000000000000
 */
export function toYocto(amount: number): u128 {
  return u128.mul(ONE_NEAR, u128.from(amount))
}

/**
 * Function to assert that the contract has called itself
 */
export function assert_self(): void {
  const caller = Context.predecessor
  const self = Context.contractName
  assert(caller == self, "Only this contract may call itself");
}

export function assert_single_promise_success(): void {
  const x = ContractPromise.getResults()
  assert(x.length == 1, "Expected exactly one promise result")
  assert(x[0].succeeded, "Expected PromiseStatus to be successful")
}

'''