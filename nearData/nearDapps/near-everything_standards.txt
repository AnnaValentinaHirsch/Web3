*GitHub Repository "near-everything/standards"*

'''--- README.md ---
# Standards

## Schema description

- **`bold`** means the key is required.
- _`italic`_ means the key is optional.
- `[account_id]` means the dynamic key is an account ID. For example, `alex.near` as a key. It usually used to create some edge towards that account.
- `""` means the empty key. It's used when the entity has both the string value and the object (e.g. a Widget)

## Root schema

**[Each account should follow the Root schema](./types/Root.md)**

## TBD:
- Status update/Post
- Images with IPFS and Arweave.

'''
'''--- types/Root.md ---
# Root

Top level schema for an account

## Schema

| Key          | Type                               | Description                                                 |
|--------------|------------------------------------|-------------------------------------------------------------|
| _`profile`_  | [Metadata](./common/Metadata.md)   | A profile information for the account                       |
| _`graph`_    | [Graph](./graph/Graph.md)          | The outgoing graph connections from the account             |
| _`badge`_    | [Badges](./badge/Badges.md)        | Badges issued by the account and recipients of these badges |
| _`widget`_   | [Widgets](./widget/Widgets.md)     | Widgets created by the account                              |
| _`post`_     | [Posts](./post/Posts.md)           | Posts created by the account                                |
| _`settings`_ | [Settings](./settings/Settings.md) | Settings stored by the account                              |

## Example

```json
{
  "profile": {
    "name": "NEARCON 22 Demo Acc",
    "image": {
      "url": "https://cloudflare-ipfs.com/ipfs/QmQqzMTavQgT4f4T5v6PWBp7XNKtoPmC9jvn12WPT3gkSE"
    }
  },
  "graph": {
    "like": {
      "root.near": "",
      "mike.near": ""
    },
    "follow": {
      "mob.near": "",
      "root.near": ""
    }
  },
  "badge": {
    "whale": {
      "info": {
        "name": "Whale",
        "description": "A really whalethy user",
        "image": {
          "url": "https://upload.wikimedia.org/wikipedia/commons/e/e2/Southern_right_whale.jpg"
        }
      },
      "holder": {
        "x.near": "",
        "root.near": ""
      }
    }
  },
  "widget": {
    "HelloWorld": "return \"Hello World!\";",
    "Test": "return \"Test!\";"
  },
  "post": {
    "meme": {
      "title": "NEAR Protocol",
      "description": "Looks the same to me",
      "image": {
        "ipfs_cid": "bafkreicrp3nosvz4advbmp26dlmbjkl37gb7etztqf4gforuwxg5ofqov4"
      }
    }
  }
}
```

'''
'''--- types/badge/Badge.md ---
# Badge

A Badge with the metadata and the list of the holders.

## Schema

| Key            | Type                                     | Description                                                    |
|----------------|------------------------------------------|----------------------------------------------------------------|
| **`metadata`** | [Metadata](../common/Metadata.md)        | The metadata information describing the badge                  |
| **`holder`**   | [Account List](../common/AccountList.md) | The list of the badge holders who were awarded with this badge |

## Example

```json
{
  "metadata": {
    "name": "Whale",
    "description": "A really whalethy user",
    "image": {
      "url": "https://upload.wikimedia.org/wikipedia/commons/e/e2/Southern_right_whale.jpg"
    }
  },
  "holder": {
    "x.near": "",
    "root.near": ""
  }
}
```

'''
'''--- types/badge/Badges.md ---
# Badges

Badges issued by the account and holders for each of these badges.

## Schema

| Key                 | Type                 | Description                                                           |
|---------------------|----------------------|-----------------------------------------------------------------------|
| **`[badge_name]`**  | [Badge](./Badge.md)  | The key is the name of a badge. For example, `whale` or `real_human`. |

## Example

```json
{
  "whale": {
    "info": {
      "name": "Whale",
      "description": "A really whalethy user",
      "image": {
        "url": "https://upload.wikimedia.org/wikipedia/commons/e/e2/Southern_right_whale.jpg"
      }
    },
    "holder": {
      "x.near": "",
      "root.near": ""
    }
  }
}
```

'''
'''--- types/common/AccountList.md ---
# Account List

A list of account IDs. For example, receivers of a badge or a list of accounts you follow.

## Schema

| Key | Type | Description |
| --- | --- | --- |
| **`[account_id]`** | Empty string | A dynamic key representing the account ID for every account in the list. For example, `alex.near` as a key means that the account `alex.near` belongs to the list. |

## Example

```json
{
  "alex.near": "",
  "root.near": "",
  "mike.near": ""
}
```

'''
'''--- types/common/Image.md ---
# Image

A common image.

## Schema

| Key | Type | Description |
| --- | --- | --- |
| _`url`_ | URL String | A direct URL to the image source. |
| _`ipfs_cid`_ | CID String | IPFS CID to the image. |
| _`nft`_ | [NFT](./NFT.md) | Pointer to an NFT. |

At least one the keys is required. Ideally, you should provide exactly one of the keys, but it's not strictly required.
The image should be displayed in the following priority order:
1. `nft`
1. `ipfs_cid`
1. `url`

## Example

```json
{
  "img": "https://cloudflare-ipfs.com/ipfs/QmQqzMTavQgT4f4T5v6PWBp7XNKtoPmC9jvn12WPT3gkSE"
}
```

```json
{
  "ipfs_cid": "bafkreigfsxev7mc6hkdc55ey6hx4zmbrhipsvy32vwn45vw6zbg2hgzugu"
}
```

```json
{
  "nft": {
    "contractId": "mrbrownproject.near",
    "tokenId": "3107"
  }
}
```

'''
'''--- types/common/KeyValue.md ---
# Key-Value Object

A key-value object. The key is a string and the value is a string or another key-value object.

## Schema

| Key | Type | Description |
| --- | --- | --- |
| **`[key]`** | String or KeyValue | The key is a any string and the value is a string or another key-value object |

## Example

```json
{
  "homepage": "mob.near/widget/Welcome",
  "view": {
    "theme": "dark",
    "language": "en"
  }
}
```

'''
'''--- types/common/LinkTree.md ---
# LinkTree

Account's linktree information.

### Known providers

Key is the `link_name`. The value contains the prefix and the icon.

```
const linktreeElements = {
  website: {
    prefix: "https://",
    icon: "bi-globe2",
  },
  github: {
    prefix: "https://github.com/",
    icon: "bi-github",
  },
  twitter: {
    prefix: "https://twitter.com/",
    icon: "bi-twitter",
  },
  telegram: {
    prefix: "https://t.me/",
    icon: "bi-telegram",
  },
};
```

NOTE, this is not the schema. It's just the common keys used by the existing components.

## Schema

| Key | Type | Description |
| --- | --- | --- |
| **`[link_name]`** | String | The link for the given `link_name`. The value doesn't have to be a full URL for known providers described in this doc. |

## Example

```json
{
  "twitter": "NearSocial_",
  "github": "NearSocial",
  "telegram": "NearSocial",
  "website": "near.social"
}
``` 

'''
'''--- types/common/Metadata.md ---
# Metadata

Generic metadata object describing an entity.

## Schema

| Key                 | Type                      | Description                            |
|---------------------|---------------------------|----------------------------------------|
| **`name`**          | String(64)                | The display name or title              |
| _`image`_           | [Image](./Image.md)       | The main image or an icon              |
| _`backgroundImage`_ | [Image](./Image.md)       | The background image                   |
| _`description`_     | Markdown(String)          | The description in the markdown format |
| _`linktree`_        | [LinkTree](./LinkTree.md) | Links                                  |
| _`tags`_            | [Tags](./Tags.md)         | Tags                                   |

## Example

```json
{
  "name": "Near Social",
  "image": {
    "ipfs_cid": "bafkreid55mbassw335wezjk3gc5rzizwrqpenfxk3dyyljumxvezplhjg4"
  },
  "linktree": {
    "twitter": "NearSocial_",
    "github": "NearSocial",
    "telegram": "NearSocial",
    "website": "near.social"
  },
  "description": "# Near Social\n\n**Near Social** is ...",
  "backgroundImage": {
    "ipfs_cid": "bafybeigwqqx2eccpyip66bn2bn6janvss2snv3xuuus3ltin6i46mfkyam"
  },
  "tags": {
    "platform": "",
    "project": "",
    "network": "",
    "protocol": "",
    "open-source": ""
  }
}
```

'''
'''--- types/common/NFT.md ---
# NFT

A pointer to an NFT. Contains a contract ID and a token ID.

## Schema

| Key | Type | Description |
| --- | --- | --- |
| _`contractId`_ | AccountID String(64) | An account ID of the NFT contract. |
| _`tokenId`_ | String | Token ID within the NFT contract. |

## Example

```json
{
  "contractId": "mrbrownproject.near",
  "tokenId": "3107"
}
```

'''
'''--- types/common/Tags.md ---
# Tags

A list of tags.

## Schema

| Key         | Type         | Description                                                                                                               |
|-------------|--------------|---------------------------------------------------------------------------------------------------------------------------|
| **`[tag]`** | Empty string | A dynamic key represents a tag in the list. For example, `founder` as a key means this tag `founder` belongs to the list. |

## Example

```json
{
  "human-guild": "",
  "founder": "",
  "artist": "",
  "nft": ""
}
```

'''
'''--- types/graph/Graph.md ---
# Graph

The outgoing graph connections from the account.

## Schema

| Key | Type | Description |
| --- | --- | --- |
| **`[edge_type]`** | [Account List](../common/AccountList.md) | The key is the type of outgoing edges. For example, `follow` or `friend` edge types. |

## Example

```json
{
  "like": {
    "root.near": "",
    "mike.near": ""
  },
  "follow": {
    "mob.near": "",
    "root.near": ""
  }
}
```

'''
'''--- types/index/Index.md ---
# Index

Index is a frequently overwritten object designed to be used by the API/indexer.
It should be used for actions associated with some key. For example: 
- for storing likes for a given post
- rating a certain item
- linking to a comment for a given post
- linking to a review for something

In order for the API server to index the data, it should be given in a specific format. Otherwise, the API server will ignore the data.

The format is `IndexData` is a serialized JSON. It's either a single object with two keys: `key` and `value`, or an array of such objects.
- The `key` value will be used to index the data across all accounts. The API server will JSON serialize the value to create a unique string key for this index.
- The `value` value contains the data to be stored.
 
### Likes example

For example, an application want to store likes for a given post.
The post is identified by the following key: `mob.near/post/meme@76735731`. Then to create a like one may write the following IndexData (non-serialized):
```json
{
  "key": "mob.near/post/meme@76735731",
  "value": 1
}
```
This object will be serialized and should be added under `index/like`:
```json
{
  "index": {
    "like": "{\"key\":\"mob.near/post/meme@76735731\",\"value\":1}"
  }
}
```

The reason why we store this data in a serialized format is to be able to overwrite the previous data (that is already indexed) to reuse the storage.
The limitation of this approach is that only one action can be added per index per block. But since blocks are once a second, it shouldn't create issues.

An API server should be able to serve the following data:
- All likes for a given post from all users (or some users) ordered by block height when they were created.
- All likes for a given user ordered by block height.

### Multi-notify example

An app wants to notify multiple users, e.g. Alice follows Bob and Charlie in one action. She can indicate this in the graph index in one call:

```json
[
  {
    "key": "follow",
    "value": {
      "type": "follow",
      "accountId": "bob.near"
    }
  },
  {
    "key": "follow",
    "value": {
      "type": "follow",
      "accountId": "charlie.near"
    }
  }
]
```
This will be serialized to JSON and should be added under `index/graph`:
```json
{
  "index": {
    "graph": "[{\"key\":\"follow\",\"value\":{\"type\":\"follow\",\"accountId\":\"bob.near\"}},{\"key\":\"follow\",\"value\":{\"type\":\"follow\",\"accountId\":\"charlie.near\"}}]"
  }
}
```

## Schema

| Key | Type | Description                                                                                                                                  |
| --- | --- |----|
| **`[index_type]`** | Serialized IndexData (String) | The key is the type of index. For example, `like` or `comment`. The value is a serialized JSON object containing two fields `"key"` and `"value"` |

## Example

```json
{
  "like": "{\"key\":\"mob.near/post/meme@76735731\",\"value\":1}",
  "comment": "{\"key\":\"mob.near/post/meme@76735731\",\"value\":{\"type\":\"post/meme\"}}",
  "graph": "[{\"key\":\"follow\",\"value\":{\"type\":\"follow\",\"accountId\":\"bob.near\"}},{\"key\":\"follow\",\"value\":{\"type\":\"follow\",\"accountId\":\"charlie.near\"}}]"
}
```

'''
'''--- types/post/Post.md ---
# Post [DRAFT]

This standard is in DRAFT mode. It may be heavily changed in the future.

## Schema

The SCHEMA is to be described.

## Example

The format used for storing Memes:

```json
{
  "title": "NEAR Protocol",
  "description": "Looks the same to me",
  "image": {
    "ipfs_cid": "bafkreicrp3nosvz4advbmp26dlmbjkl37gb7etztqf4gforuwxg5ofqov4"
  }
}
```

'''
'''--- types/post/Posts.md ---
# Posts [DRAFT]

Posts/updates creates by the account. The intention of the posts is to be displayed in a social media networks.
The posts should be overwritten when a new post of the same type is added.
Using blockchain history the whole post history can be recovered and displayed.

This standard is in DRAFT mode. It may be heavily changed in the future.

## Schema

| Key | Type | Description |
| --- | --- | --- |
| **`[post_type]`** | [Post](./Post.md) | The key is the type of a post. For example, `meme`, `status`, `update` types. |

## Example

```json
{
  "meme": {
    "title": "NEAR Protocol",
    "description": "Looks the same to me",
    "image": {
      "ipfs_cid": "bafkreicrp3nosvz4advbmp26dlmbjkl37gb7etztqf4gforuwxg5ofqov4"
    }
  },
  "status": {
    "message": "Hello world!"
  }
}
```

'''
'''--- types/settings/Settings.md ---
# Settings [DRAFT]

Settings stored by the account. 

This standard is in DRAFT mode. It may be heavily changed in the future.

## Schema

| Key | Type | Description |
| --- | --- | --- |
| **`[project_identifier]`** | [KeyValue](../common/KeyValue.md) | The key is a project identifier. For example, `near.social`, `wallet.near.org`, `SuperMessenger` all can be identifiers. |

## Example

```json
{
  "near.social": {
    "homepage": "mob.near/widget/Welcome"
  }
}
```

'''
'''--- types/thing/Thing.md ---
# Thing

A thing is the most basic interface for any real or digital asset.

## Schema

The schema is defined by its Type committed on chain.

## Example

A [Type](../type/Type.md) is created with properties that look like this:

```json
{
  "properties": [
    {
      "name": "title",
      "type": "String",
      "required": true
    },
    {
      "name": "description",
      "type": "md",
      "required": false
    }
  ]
}
```

We see that this Type has two properties; a title of type String and a description of type md (Markdown).

When a Type is created, it also autogenerates basic Widgets for creating and displaying this data, and so our Type looks like:

```json
"evrything.near": {
  "types": {
    "Idea": {
      "properties": [
        {
          "name": "title",
          "type": "String",
          "required": true
        },
        {
          "name": "description",
          "type": "md",
          "required": false
        }
      ],
      "widgets": {
        "summary": "Everything.Summary.Idea",
        "view": "Everything.View.Idea",
        "create": "Everything.Create.Idea"
      }
    }
  }
}
```

The autogenerated "create" widget is a basic template and form for creating data of type "evrything.near/type/Idea", which consists of a title and description (a text input and a textarea).

When data is created via the Everything.Create.Idea widget, it will save to the Social contract:

```json
{
  "thing": {
    "main": "[DATA]"
  },
  "index": {
    "[DOMAIN]": "{ key: \"main\", \"value\": { \"type\": \"evrything.near/type/Idea\" } })",
  },
}
```

Since the Create widget was autogenerated, we know that the DATA will be following the properties of the Type. 

However, we allow this to be free form because maybe the developer doesn't want the data to be permanent and forever on chain. If the developer wants the data to be stored on chain, then DATA would look like this:

```json
{
  "title": "I have a cool idea!",
  "description": "With Types, we could let the user choose where the data is stored, while still keeping it predictable for developers."
}
```

But maybe the developer wants the data to follow the Type schema, then be POSTed to a decentralized storage service where it can have some privacy. In this case, it creates the data and saves a reference to the thingId instead:

```json
{
  "thingId": "thing123456789"
}
```

It doesn't matter how or where this data is stored, because the developer can design the view and summary widget to use the thingId to fetch the offchain data.

The DATA just needs to represent a thing of TYPE, no matter where it is stored.

'''
'''--- types/type/Type.md ---
# Type

Contains the properties, references to widgets necessary to display and create data of this type, and the optional metadata.

## Schema

| Key          | Type                              | Description                                     |
|--------------|-----------------------------------|-------------------------------------------------|
| **`""`**     | String                            | Schema describing the properities of a thing and holding references to necessary widgets for displaying and creating data of this type.                  |
| _`metadata`_ | [Metadata](../common/Metadata.md) | The metadata information describing the type. |

## Example

```json
{
  "": "{ \"properties\": [{\"name\": \"title\",\"type\": \"String\",\"required\": true }, {\"name\": \"description\",\"type\": \"md\",\"required\": false },], \"widgets\": {\"summary\": \"evrything.near/widget/Everything.Summary.Idea\",\"view\": \"evrything.near/widget/Everything.View.Idea\",\"create\": \"evrything.near/widget/Everything.Create.Idea\"}};",
  "metadata": {
    "name": "Idea",
    "description": "Idea type for proposals to the everything DAO",
    "tags": {
      "example": "",
      "inline": ""
    }
  }
}
```

'''
'''--- types/type/Types.md ---
# Types

Types created by the account.

## Schema

| Key                  | Type                  | Description                                                  |
|----------------------|-----------------------|--------------------------------------------------------------|
| **`[type_name]`**  | [Type](./Type.md) | Contains the properties, references to widgets necessary to display and create data of this type, and the optional metadata. |

## Example

```json
{
  "Idea": {
    "": "{ \"properties\": [{\"name\": \"title\",\"type\": \"String\",\"required\": true }, {\"name\": \"description\",\"type\": \"md\",\"required\": false },], \"widgets\": {\"summary\": \"evrything.near/widget/Everything.Summary.Idea\",\"view\": \"evrything.near/widget/Everything.View.Idea\",\"create\": \"evrything.near/widget/Everything.Create.Idea\"}};",
    "metadata": {
      "name": "Idea",
      "description": "Idea type for proposals to the everything DAO",
      "tags": {
        "example": "",
        "inline": ""
      }
    }
  },
  "Event": {
    "": "{ \"properties\": [{\"name\": \"title\",\"type\": \"String\",\"required\": true }, {\"name\": \"description\",\"type\": \"md\",\"required\": false }, {\"name\": \"date\",\"type\": \"Date\",\"required\": true }], \"widgets\": {\"summary\": \"evrything.near/widget/Everything.Summary.Event\",\"view\": \"evrything.near/widget/Everything.View.Event\",\"create\": \"evrything.near/widget/Everything.Create.Event\"}};",
    "metadata": {
      "name": "Event",
      "description": "Event type for events approved by everything DAO",
      "tags": {
        "example": "",
        "inline": ""
      }
    }
  }
}
```

'''
'''--- types/widget/Widget.md ---
# Widget

Contains the source code and the optional metadata.

## Schema

| Key          | Type                              | Description                                     |
|--------------|-----------------------------------|-------------------------------------------------|
| **`""`**     | String                            | The source code of the widget.                  |
| _`metadata`_ | [Metadata](../common/Metadata.md) | The metadata information describing the widget. |

## Example

```json
{
  "": "return \"Hello World!\";",
  "metadata": {
    "name": "Hello World",
    "description": "Renders Hello World",
    "tags": {
      "example": "",
      "inline": ""
    }
  }
}
```

'''
'''--- types/widget/Widgets.md ---
# Widgets

Widgets created by the account.

## Schema

| Key                  | Type                  | Description                                                  |
|----------------------|-----------------------|--------------------------------------------------------------|
| **`[widget_name]`**  | [Widget](./Widget.md) | Contains the source code and the optional metadata |

## Example

```json
{
  "HelloWorld": {
    "": "return \"Hello World!\";",
    "metadata": {
      "name": "Hello World",
      "description": "Renders Hello World",
      "tags": {
        "example": "",
        "inline": ""
      }
    }
  },
  "Test": "return \"Test!\";"
}
```

'''