*GitHub Repository "mm-near/near-demo-betteryou"*

'''--- README.md ---
# near-demo-betteryou

This is a repository for a NEAR social hackathon project.

## wakeup

The wakeup folder contains the contract for the 'wakeup' challenge.

## language

The language folder contains the contract for the duolinguo language challenge.

## frontned

Frontend (react / javascript) file that will be later deployed on near.social.

## Development

### Testnet

near.social on testnet is under test.near.social

Our contracts should be deployed at: ``wakeup.betteryou.testnet`` and ``language.betteryou.testnet``

'''
'''--- dummy/Cargo.toml ---

[package]
name = "dummy"
version = "1.0.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0"
uint = { version = "0.9.3", default-features = false }
serde = { version = "1.0"}
funding = { path = "../funding"}

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []
'''
'''--- dummy/build.sh ---
#!/bin/sh

echo ">> Building contract"

rustup target add wasm32-unknown-unknown
cargo build --all --target wasm32-unknown-unknown --release
'''
'''--- dummy/deploy.sh ---
#!/bin/sh

./build.sh

echo ">> Deploying contract"

near deploy  --wasmFile ./target/wasm32-unknown-unknown/release/dummy.wasm --accountId dummy.betteryou.testnet
'''
'''--- dummy/src/lib.rs ---
use funding::FundingEngine;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::env::panic_str;
use near_sdk::serde::Serialize;
use near_sdk::{env, near_bindgen, AccountId, Promise};

use near_sdk::collections::UnorderedMap;

// Define the contract structure
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    challenges: UnorderedMap<AccountId, ChallengeState>,
}

#[derive(BorshDeserialize, BorshSerialize, Serialize)]
pub struct ChallengeState {
    total_days: u32,
    total_lives: u32,
    days_left: u32,
    lives_left: u32,
    funding: FundingEngine,
    day_status: Vec<bool>,
}

impl Default for Contract {
    fn default() -> Self {
        Self {
            challenges: UnorderedMap::new(b"challenges".to_vec()),
        }
    }
}

// Implement the contract structure
#[near_bindgen]
impl Contract {
    #[private]
    pub fn reset(&mut self) {
        self.challenges.clear();
    }

    pub fn get_challenge(&self, account_id: AccountId) -> Option<ChallengeState> {
        self.challenges.get(&account_id)
    }

    #[payable]
    pub fn create_challenge(&mut self) {
        if self
            .challenges
            .get(&env::predecessor_account_id())
            .is_some()
        {
            env::panic_str("Challenge already present");
        }
        self.challenges.insert(
            &env::predecessor_account_id(),
            &ChallengeState {
                total_days: 30,
                total_lives: 3,
                days_left: 30,
                lives_left: 3,
                funding: FundingEngine::new(
                    &env::predecessor_account_id(),
                    env::attached_deposit(),
                ),
                day_status: Vec::new(),
            },
        );
    }

    #[payable]
    pub fn add_prize(&mut self, account_id: AccountId) {
        let mut challenge = self.challenges.get(&account_id).unwrap();
        challenge
            .funding
            .fund(&env::predecessor_account_id(), env::attached_deposit());
        self.challenges.insert(&account_id, &challenge);
    }

    pub fn finish(&mut self) {
        let challenge = self.challenges.get(&env::predecessor_account_id()).unwrap();
        if challenge.days_left == 0 || challenge.lives_left == 0 {
            let prize = challenge.funding.resolve(challenge.days_left == 0);
            for (account_id, tokens) in prize.iter() {
                Promise::new(account_id.clone()).transfer(*tokens);
            }
            self.challenges.remove(&env::predecessor_account_id());
        } else {
            panic_str("Challenge is not finished yet");
        }
    }

    pub fn admin_move_day(&mut self) {
        let mut previous_val = self.challenges.get(&env::predecessor_account_id()).unwrap();
        previous_val.days_left = previous_val.days_left.checked_sub(1).unwrap();
        previous_val.day_status.push(true);
        self.challenges
            .insert(&env::predecessor_account_id(), &previous_val);
    }
    pub fn admin_fail_day(&mut self) {
        let mut previous_val = self.challenges.get(&env::predecessor_account_id()).unwrap();
        previous_val.days_left = previous_val.days_left.checked_sub(1).unwrap();
        previous_val.lives_left = previous_val.lives_left.checked_sub(1).unwrap();
        previous_val.day_status.push(false);
        self.challenges
            .insert(&env::predecessor_account_id(), &previous_val);
    }

    pub fn abandon_challenge(&mut self) {
        let caller = env::predecessor_account_id();
        let challenge = self.challenges.get(&caller).unwrap();
        let prize = challenge.funding.resolve(false);
        for (account_id, tokens) in prize.iter() {
            Promise::new(account_id.clone()).transfer(*tokens);
        }
        self.challenges.remove(&caller);
    }
}

'''
'''--- frontend/README.md ---
Files for the frontend - that will be later deployed as part of near.social 

Quick layout/files split:

* plaq_template: renders the "main content" of a running challenge (progress, current reward, etc). 
    * challengeState (that contains all the common fields), 
    * challengeLogo (with logo)
    * customBox (content of the top box that is challenge specific)
* dummy_challenge: box for the dummy_challenge
* language_challenge: box for the language challenge
* all_user_challenge: shows all the challenges for a given user (side by side)
* friendslist: shows all the challenges from all your friends.

* welcome_page - main page for the challenges.

'''
'''--- frontend/unused/plaque.html ---
<html>
<head>
<style>
</style>
</head>
<body>

<h3>This is what your friends will see.</h3>
<br>

<img src="https://user-images.githubusercontent.com/91919554/207791330-aa5bc143-b51d-49b0-a0be-eae26365f1f2.png">

<br>
<div style="width: 300px; border: 2px #dee2e6 solid; border-radius: 5px; ">
    <img src="https://user-images.githubusercontent.com/91919554/207791325-65269d93-4ef3-4844-b029-1223099fc816.png" style="width: 100%">
    <div style="padding:20px">
        <div style="padding-top: 20px; padding-bottom: 20px; color:#68717A">
            <h1 style="color:black"> Wake up </h1>
            <b>mm-near</b> is participating in this challenge.
            They have committed to waking up every day for <b>50 days</b> at <b>6:00 AM</b>.
            Do you want to support them?
        </div>
        <hr>
        <div style="padding-bottom: 20px">
            <h2>Progress</h2>
            Remaining days

            <div style="background-color:#e9ecef; border-radius: 5px">
                <div style="height: 20px; width:20%; background-color:#000000; border-radius: 5px"> </div>
            </div>
            <span style="float: right">21 days</span>
            <br>

            Available Skip Days
            <div style="background-color:#9e9e9e; border-radius: 5px">
                <div style="height: 20px; width:100%; background-color:#000000; border-radius: 5px"> </div>
            </div>
            <span style="float: right">0 days</span>
            
        </div>
        <hr>

        <div style="padding-bottom: 20px">        
            <h2>Current Rewards</h2>
            <span style="font-size: 26px; font-weight: bold"> 15 NEAR </span><br>
            From 3 people <br>
            <button>Send Reward</button>
        </div>
        
        <hr>
        <div style="padding-bottom: 20px">        

            <h2>Current bets</h2>

            <div style="font-size:20px">Success: <b> 200 NEAR </b></div>
            10 people <br>
            <button>Bet on success</button>

            <br><br>

            <div style="font-size:20px">Failure: <b> 40 NEAR </b></div>
            5 people <br>
            <button>Bet on failure</button>
        </div>
    </div>
</div>

<br>

<h3>What you see when you don't have any challenge</h3>
<br>
<div style="width: 400px; border: 2px black solid; border-radius: 25px; padding: 20px;">
    <b>Join wake-up challenge:</b><br>

    Wake up every day at a given time: and get your money back.<br>

    Select number of days: <input size=3 maxlength=3 value="30"> <br>
    Select number of lives: <input size=3 maxlength=3 value="3"> <br>
    Select wake up hour (in your local timezone): <input size="3" value="6 AM"> <br>
    Tokens to stake: <input size="3" value="10"> <br>

    <button>Start challenge</button>
</div>

<br>

<h3>In the middle of challenge</h3>
<br>
<div style="width: 400px; border: 2px black solid; border-radius: 25px; padding: 20px;">
    Your wake-up challenge. <br>
    Your progress progress: <b>27</b> days remaining, <b>3</b> lives left. <br>
    Current reward: <b>15 N</b> (from 3 people) <br>
    Current bets: Success: <b>200N</b> (10 people), Failure: <b>400N</b> (15 people). <br>

    <button disabled="true">I'm awake (button active in 4h)</button> 
    
</div>

<br>
<h3>At the end of the challenge</h3> 
<br>
<div style="width: 400px; border: 2px black solid; border-radius: 25px; padding: 20px;">
    Congrats - you won the challenge. <br>
    Please press the button below to collect your reward: <br>
    <button>Collect 24 N</button>
</div>

<br>

<div style="width: 400px; border: 2px black solid; border-radius: 25px; padding: 20px;">
    Sorry - but you failed the challenge. <br>
    Please press the button below reset your challenge and try again <br>
    <button>Reset challenge</button>
</div>

</body>

</html>
'''
'''--- frontend/unused/plaque_v2.html ---
<html>

<head>
    <link href='https://fonts.googleapis.com/css?family=Inter' rel='stylesheet'>

    <style>
        .challengeSummary {
            font-size: 24px;
            font-family: 'Roboto';
        }

        .mainBox {
            width: 628px;
            border-radius: 10px;
            background-color: #F6F6F6;
            padding: 20px;
            font-family: 'Inter';
            font-size: 14px;
        }

        .challengeBox {
            padding-top: 20px;
            padding-bottom: 20px;
            padding-left: 10px;
            padding-right: 10px;
        }

        .challengeBoxTitle {
            font-size: 16px;
            color: #000000;
            font-family: 'Inter';
            font-weight: 400;
            line-height: 19px;
        }

        .challengeBoxContents {
            border-radius: 5px;
            background-color: white;
            padding: 15px;
            text-align: center;
            margin-top: 20px;
            margin-bottom: 20px;
            color: #68717A;
        }

        .dot {
            height: 20px;
            width: 20px;
            border-radius: 50%;
            display: inline-block;
        }

        .green {
            background-color: green;
        }

        .red {
            background-color: red;
        }

        .grey {
            background-color: #bbb;
        }

        .activeButton {
            background-color: #2D949A;
            color: white;
            border-radius: 100px;
            border: 0px;
            padding-left: 24px;
            padding-right: 24px;
            padding-top: 10px;
            padding-bottom: 10px;
            margin-top: 10px;

        }

        .nearAmount {
            font-size: 16px;
            font-weight: 900;
            color: black;
        }

        .remainingBlock {
            margin: 20px;
            background-color: #f4feff;
            border-radius: 6px;
            color: #68717a;
        }

        .dotHolder {
            display: inline-block;
        }
    </style>
</head>

<body>

    <div class="mainBox">
        <div class="challengeSummary"> ICON Wake up earlier</div>
        <div class="challengeBox">
            <div class="challengeBoxTitle">Summary</div>
            <div class="challengeBoxContents">
                You commited to waking up every day for <b>30 days</b> between <b>6:00-7:00</b>.
                <br>
                <button class="activeButton">CHECK IN NOW</button>
            </div>
        </div>

        <div style="overflow: hidden;">
            <div style="float: left;">
                <div class="challengeBox">
                    <div class="challengeBoxTitle">Current Rewards</div>
                    <div class="challengeBoxContents">
                        <span class="nearAmount">15 NEAR</span> <br /> 3 people
                    </div>
                </div>

                <div class="challengeBox">
                    <div class="challengeBoxTitle">Current bets</div>
                    <div class="challengeBoxContents">
                        Success: <br /> <span class="nearAmount">20 NEAR</span> <br /> 3 people
                    </div>
                    <div class="challengeBoxContents">
                        Failure: <br /> <span class="nearAmount">15 NEAR</span> <br /> 8 people.
                    </div>
                </div>

            </div>

            <div style="overflow: hidden;" class="challengeBox" style="padding-left: 20px">
                <div class="challengeBoxTitle">Check-in progress</div>
                <div class="challengeBoxContents">

                    <div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            01
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            02
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            03
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            04
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            05
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            06
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            07
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            08
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            09
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            10
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            11
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            12
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            13
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            13
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            14
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            15
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            16
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            17
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            18
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            19
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            20
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            21
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            22
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            23
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            24
                        </div>
                        <div class="dotHolder">
                            <span class="green dot"></span><br />
                            25
                        </div>
                        <div class="dotHolder">
                            <span class="red dot"></span><br />
                            26
                        </div>
                        <div class="dotHolder">
                            <span class="grey dot"></span><br />
                            27
                        </div>
                    </div>
                    <div class="remainingBlock">
                        <b>Remaining:</b> 26 days (2 skip days available)
                    </div>
                </div>
            </div>
        </div>

    </div>

</body>

</html>
'''
'''--- frontend/unused/signup_page.html ---
<html>

<head>
    <link href='https://fonts.googleapis.com/css?family=Inter' rel='stylesheet'>

    <style>
        body {
            font-family: 'Inter';
        }

        .signUp {
            background: #F7F7F7;
            width: 800px;
            border-radius: 10px;
            text-align: center;
            padding: 20px;
            align-items: center;
        }

        .challengeTitle {
            padding: 20px;
            font-family: 'Roboto';
            font-style: normal;
            font-weight: 400;
            font-size: 44px;
            line-height: 32px;
        }

        .challengeSubTitle {
            font-family: 'Roboto';
            font-style: normal;
            font-weight: 400;
            font-size: 20px;
            line-height: 130%;
        }

        .howItWorks {
            width: 50%;
            margin-left: 25%;
            margin-top: 30px;
            background: #F4FEFF;
            border-radius: 6px;
            font-family: 'Roboto';
            font-weight: 400;
            font-size: 16px;
            line-height: 130%;
            color: #49454F;
            padding-left: 18px;
            padding-right: 18px;
            padding-top: 5px;
            padding-bottom: 5px;
        }

        .howItWorks>span {
            font-family: 'Inter';
            font-weight: 700;
        }

        .inputBox {
            padding: 10px;
            border: 1px solid black;
            width: 20%;
            margin-left: 40%;
            border-radius: 10px;
            margin-top: 10px;
            margin-bottom: 10px;
        }

        .inputBox>input {
            width: 80%;
            height: 30px;
        }

        .inputBox>select {
            width: 80%;
            height: 30px;
        }

        .inputBoxTitle {
            display: block;
            padding-bottom: 5px;
            font-size: 12px;
            text-align: left;
            padding-left: 10%;
        }

        .commitButton {
            background-color: #2D949A;
            color: white;
            border-radius: 100px;
            border: 0px;
            padding-left: 24px;
            padding-right: 24px;
            padding-top: 10px;
            padding-bottom: 10px;

        }
    </style>
</head>

<body>
    <div class="signUp">

        <div class="challengeTitle">Wake up earlier</div>
        <div class="challengeSubTitle">Commit to waking up every day at given time frame</div>

        <div class="howItWorks">
            <span>How it works:</span>
            Once you commit to the challenge, you need to check in every morning on your active challenges page. Get
            your
            money back if you succeed!
        </div>

        <div class="inputBox">
            <span class="inputBoxTitle">Wake up period</span>
            <select name="wakeupTime" id="wakeupTime">
                <option value="500">5:00AM - 6:00AM</option>
                <option value="600" selected>6:00AM - 7:00AM</option>
                <option value="700">7:00AM - 8:00AM</option>
            </select>
        </div>
        <div class="inputBox">
            <span class="inputBoxTitle">Duration</span>
            <select name="duration" id="duration">
                <option value="10">10 days</option>
                <option value="20">20 days</option>
                <option value="30" selected>30 days</option>
            </select>
        </div>
        <div class="inputBox">
            <span class="inputBoxTitle">Permitted Skip Days</span>
            <select name="skipDays" id="skipDays">
                <option value="0">0 days - hardcore option</option>
                <option value="3" selected>3 days</option>
                <option value="6">6 days</option>
            </select>
        </div>
        <div class="inputBox">
            <span class="inputBoxTitle">NEAR to stake</span>
            <input value="0.0" />
        </div>
        <button class="commitButton">COMMIT TO CHALLENGE</button>
    </div>

</body>

</html>
'''
'''--- frontend/unused/welcome_page.html ---
<html>

<head>
    <link href='https://fonts.googleapis.com/css?family=Inter' rel='stylesheet'>

    <style>
        .header {
            background: #33333D;
            height: 263px;
            color: white;
            font-family: 'Inter';
            font-weight: 400;
            font-size: 58px;
            text-align: center;
            line-height: 70px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .paragraph {
            margin-left: 70px;
            margin-right: 40px;
            margin-top: 47px;
        }

        .paragraph>.title {
            font-family: 'Inter';
            font-weight: 600;
            font-size: 28px;
            line-height: 34px;
        }

        .paragraph>.content {
            margin-top: 26px;
            font-family: 'Roboto';
            font-weight: 400;
            font-size: 20px;
            line-height: 130%;
            color: #49454F;
        }

        .messageBoxes {
            width: 1400px;
        }

        .messageBox {
            display: inline-block;
            height: 260px;
            width: 350px;
            background: #F6F6F6;
            border-radius: 10px;
            margin-left: 17px;
            margin-right: 17px;
            padding: 35px;

            line-height: 32px;
        }
    </style>

</head>

<body>
    <div>

        <div class="header"> Ready to get rewarded for achieving your goals?</div>

        <div class="paragraph">
            <div class="title">
                Achieve your goals

            </div>
            <div class="content">
                BetterYou helps you achieve your goals with support from your friends. You commit to a challenge and
                your
                friends will bet NEAR tokens on you. If you win, your friends will get a better version of you and
                reward
                you for it. If you lose, your friends will get a little richer and hold you accountable for your next
                challenge.
            </div>

        </div>
        <div class="paragraph">
            <div class="title">
                How it works
            </div>
            <div class="content messageBoxes">
                <div class="messageBox">
                    01<br /> <br />
                    <b>Commit to goals</b><br /><br />
                    Browse available challenges and pick the ones you want to commit to. Your friends can then bet NEAR
                    tokens on you
                </div>
                <div class="messageBox">
                    02<br /><br />
                    <b>Get going</b><br /><br />
                    Check in on a daily basis to track your progress and achieve your goal.
                </div>
                <div class="messageBox">
                    03<br /><br />
                    <b>Win rewards</b><br /><br />
                    Claim your reward if you achieve your goals.
                </div>
            </div>
        </div>
    </div>

</body>

</html>
'''
'''--- funding/Cargo.toml ---
[package]
name = "funding"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
near-sdk = "4.0.0"
serde = { version = "1.0"}

'''
'''--- funding/src/lib.rs ---
use std::collections::HashMap;

use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::env::panic_str;
use near_sdk::{serde::Serialize, AccountId, Balance};

#[derive(BorshDeserialize, BorshSerialize, Serialize, Debug)]

pub struct Stake {
    backer: AccountId,
    value: Balance,
}

#[derive(BorshDeserialize, BorshSerialize, Serialize)]
pub struct FundingEngine {
    founder: AccountId,
    initial_stake: Balance,
    backers: Vec<Stake>,
}

// Don't allow too many backers (are refunds would be hard to fit in gas limit).
const MAX_BACKERS: usize = 100;

impl FundingEngine {
    pub fn new(founder: &AccountId, initial_stake: Balance) -> Self {
        Self {
            founder: founder.clone(),
            initial_stake,
            backers: Vec::new(),
        }
    }

    /// Funds the commitment.
    pub fn fund(&mut self, backer: &AccountId, value: Balance) {
        if self.backers.len() >= MAX_BACKERS {
            panic_str("Maximum amount of backers reached.");
        }
        self.backers.push(Stake {
            backer: backer.clone(),
            value,
        });
    }

    /// Resolves the commitment and returns payouts to each backer.
    pub fn resolve(&self, success: bool) -> HashMap<AccountId, Balance> {
        let mut payouts = HashMap::<AccountId, Balance>::new();
        if success {
            // If challenge was successfull - all money goes to the founder.
            let total_stake =
                self.initial_stake + self.backers.iter().map(|b| b.value).sum::<Balance>();
            payouts.insert(self.founder.clone(), total_stake);
        } else {
            // Return money to backers (the initial_stake will stay with the contract).
            for backing in &self.backers {
                payouts.insert(backing.backer.clone(), backing.value);
            }
        }
        payouts
    }
}

#[derive(PartialEq, Eq, Debug)]
pub enum Outcome {
    Success,
    Failure,
}

#[derive(Debug)]
pub struct Bet {
    player: AccountId,
    value: Balance,
    outcome: Outcome,
}

pub struct BettingEngine {
    bets: Vec<Bet>,
}

impl BettingEngine {
    pub fn new(founder: &AccountId, initial_stake: Balance) -> Self {
        Self {
            bets: vec![Bet {
                player: founder.clone(),
                value: initial_stake,
                outcome: Outcome::Success,
            }],
        }
    }

    /// Adds a new bet for success.
    pub fn bet_for(&mut self, player: &AccountId, value: Balance) {
        self.bets.push(Bet {
            player: player.clone(),
            value,
            outcome: Outcome::Success,
        });
    }

    /// Adds a new bet for failure.
    pub fn bet_against(&mut self, player: &AccountId, value: Balance) {
        self.bets.push(Bet {
            player: player.clone(),
            value,
            outcome: Outcome::Failure,
        });
    }

    /// Resolves the bet and returns payouts to each player.
    pub fn resolve(&mut self, outcome: Outcome) -> HashMap<AccountId, Balance> {
        let total_bet: Balance = self.bets.iter().map(|b| b.value).sum();
        let outcome_side_bet: Balance = self
            .bets
            .iter()
            .filter_map(|b| {
                if b.outcome == outcome {
                    Some(b.value)
                } else {
                    None
                }
            })
            .sum();

        let mut payouts = HashMap::new();
        for bet in &self.bets {
            payouts.insert(
                bet.player.clone(),
                if bet.outcome == outcome {
                    bet.value * total_bet / outcome_side_bet
                } else {
                    0
                },
            );
        }
        payouts
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn no_backers() {
        let my_account: AccountId = "me".parse().unwrap();
        let engine = FundingEngine::new(&my_account, 42);
        assert_eq!(engine.resolve(true), [(my_account.clone(), 42)].into());
        assert_eq!(engine.resolve(false), [].into());
    }

    #[test]
    fn single_backer() {
        let my_account: AccountId = "me".parse().unwrap();
        let friend_account: AccountId = "friend".parse().unwrap();
        let mut engine = FundingEngine::new(&my_account, 10);
        engine.fund(&friend_account, 20);
        assert_eq!(engine.resolve(true), [(my_account.clone(), 30)].into());
        assert_eq!(engine.resolve(false), [(friend_account.clone(), 20)].into());
    }

    #[test]
    fn single_player_win() {
        let my_account: AccountId = "me".parse().unwrap();
        let mut engine = BettingEngine::new(&my_account, 42);
        assert_eq!(
            engine.resolve(Outcome::Success),
            [(my_account.clone(), 42)].into()
        );
        assert_eq!(
            engine.resolve(Outcome::Failure),
            [(my_account.clone(), 0)].into()
        );
    }

    #[test]
    fn two_players() {
        let my_account: AccountId = "me".parse().unwrap();
        let friend_account: AccountId = "friend".parse().unwrap();
        let mut engine = BettingEngine::new(&my_account, 10);
        engine.bet_against(&friend_account, 20);
        assert_eq!(
            engine.resolve(Outcome::Success),
            [(my_account.clone(), 30), (friend_account.clone(), 0)].into()
        );
    }
}

'''
'''--- language/Cargo.toml ---

[package]
name = "language"
version = "1.0.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0"
uint = { version = "0.9.3", default-features = false }
serde = { version = "1.0"}
funding = { path = "../funding"}

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []
'''
'''--- language/README.md ---
Contract for language learning.

'''
'''--- language/build.sh ---
#!/bin/sh

echo ">> Building contract"

rustup target add wasm32-unknown-unknown
cargo build --all --target wasm32-unknown-unknown --release
'''
'''--- language/deploy.sh ---
#!/bin/sh

./build.sh

echo ">> Deploying contract"

near deploy  --wasmFile ./target/wasm32-unknown-unknown/release/language.wasm --account_id language.betteryou.testnet
'''
'''--- language/src/lib.rs ---
use funding::FundingEngine;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::UnorderedMap;
use near_sdk::env::panic_str;
use near_sdk::serde::Serialize;
use near_sdk::{env, near_bindgen, AccountId, Promise};

// Full seconds since UNIX_EPOCH.
pub type Timestamp = u64;

// Seconds
pub type Duration = u64;

const DAY: Duration = 86400000000000;

// Define the contract structure
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    challenges: UnorderedMap<AccountId, ChallengeState>,
}

#[derive(BorshDeserialize, BorshSerialize, Serialize)]
pub struct ChallengeState {
    total_days: u32,
    total_lives: u32,
    days_left: u32,
    lives_left: u32,

    duolingo_username: String,
    language: String,
    quota_per_day: u32,
    total_xp: u32,
    day_start_xp: u32,
    current_daily_xp: u32,
    register_timestamp: Timestamp,
    days_passed: u64,
    funding: FundingEngine,
    day_status: Vec<bool>,
}

impl Default for Contract {
    fn default() -> Self {
        Self {
            challenges: UnorderedMap::new(b"m"),
        }
    }
}

// Implement the contract structure
#[near_bindgen]
impl Contract {
    #[private]
    pub fn reset(&mut self) {
        self.challenges.clear();
    }

    pub fn get_state_for_user(&self, account_id: AccountId) -> ChallengeState {
        self.challenges.get(&account_id).unwrap()
    }

    pub fn get_challenge(&self, account_id: AccountId) -> Option<ChallengeState> {
        self.challenges.get(&account_id)
    }

    pub fn get_all_state(&self) -> Vec<(AccountId, ChallengeState)> {
        self.challenges.to_vec()
    }

    #[payable]
    pub fn create_challenge(
        &mut self,
        language: String,
        duolingo_username: String,
        quota_per_day: u32,
        total_days: u32,
        total_lives: u32,
    ) {
        if let Some(_challenge) = self.challenges.get(&env::predecessor_account_id()) {
            env::panic_str("Challenge already present");
        }
        self.challenges.insert(
            &env::predecessor_account_id(),
            &ChallengeState {
                total_days,
                total_lives,
                days_left: total_days,
                lives_left: total_lives,
                quota_per_day,
                total_xp: 0,
                current_daily_xp: 0,
                day_start_xp: 0,
                duolingo_username,
                language,
                register_timestamp: env::block_timestamp(),
                days_passed: 0,
                funding: FundingEngine::new(
                    &env::predecessor_account_id(),
                    env::attached_deposit(),
                ),
                day_status: Vec::new(),
            },
        );
    }
    #[private]
    pub fn admin_update_challenge(&mut self, update: Vec<(AccountId, u32)>) {
        let now: Timestamp = env::block_timestamp();
        for i in 0..update.len() {
            // Check if it's a new day for all of the challenges based on their register timestamp
            let previous_val = self.challenges.get(&update[i].0).unwrap();
            let day_start = self
                .challenges
                .get(&update[i].0)
                .unwrap()
                .register_timestamp
                + self
                    .challenges
                    .get(&update[i].0)
                    .unwrap()
                    .days_passed
                    .checked_add(1)
                    .unwrap()
                    * DAY;
            if now > day_start {
                // Is the challenge under the quota for the day or not
                if self.challenges.get(&update[i].0).unwrap().quota_per_day
                    <= self.challenges.get(&update[i].0).unwrap().current_daily_xp
                {
                    self.admin_move_day(&update[i].0, previous_val.total_xp);
                } else {
                    self.admin_fail_day(&update[i].0, previous_val.total_xp);
                }
            }
            // Load the value again, in case it was just updated.
            let mut previous_val = self.challenges.get(&update[i].0).unwrap();
            let incoming_value = &update[i].1;
            previous_val.total_xp = *incoming_value;
            previous_val.current_daily_xp = *incoming_value - previous_val.day_start_xp;
            self.challenges.insert(&update[i].0, &previous_val);
        }
    }

    pub fn finish(&mut self) {
        let challenge = self.get_challenge(env::predecessor_account_id()).unwrap();
        if challenge.days_left == 0 || challenge.lives_left == 0 {
            let prize = challenge.funding.resolve(challenge.days_left == 0);
            for (account_id, tokens) in prize.iter() {
                Promise::new(account_id.clone()).transfer(*tokens);
            }
            self.challenges.remove(&env::predecessor_account_id());
        } else {
            panic_str("Challenge is not finished yet");
        }
    }

    fn admin_move_day(&mut self, account_id: &AccountId, day_start_xp: u32) {
        let mut previous_val = self.challenges.get(account_id).unwrap();
        previous_val.days_left = previous_val.days_left.checked_sub(1).unwrap();
        previous_val.days_passed = previous_val.days_passed.checked_add(1).unwrap();
        previous_val.current_daily_xp = 0;
        previous_val.day_start_xp = day_start_xp;
        previous_val.day_status.push(true);
        self.challenges.insert(account_id, &previous_val);
    }
    fn admin_fail_day(&mut self, account_id: &AccountId, day_start_xp: u32) {
        let mut previous_val = self.challenges.get(account_id).unwrap();
        previous_val.days_left = previous_val.days_left.checked_sub(1).unwrap();
        previous_val.days_passed = previous_val.days_passed.checked_add(1).unwrap();
        previous_val.lives_left = previous_val.lives_left.checked_sub(1).unwrap();
        previous_val.current_daily_xp = 0;
        previous_val.day_start_xp = day_start_xp;
        previous_val.day_status.push(false);
        self.challenges.insert(account_id, &previous_val);
    }

    #[payable]
    pub fn add_prize(&mut self, account_id: AccountId) {
        let mut challenge = self.challenges.get(&account_id).unwrap();
        challenge
            .funding
            .fund(&env::predecessor_account_id(), env::attached_deposit());
        self.challenges.insert(&account_id, &challenge);
    }

    pub fn abandon_challenge(&mut self) {
        let caller = env::predecessor_account_id();
        let challenge = self.challenges.get(&caller).unwrap();
        let prize = challenge.funding.resolve(false);
        for (account_id, tokens) in prize.iter() {
            Promise::new(account_id.clone()).transfer(*tokens);
        }
        self.challenges.remove(&caller);
    }
}

'''
'''--- oracle/duolingo.js ---
//import Duo from "duo-wrapper";
import fetch from "node-fetch";
var base = "https://api.allorigins.win/get?url=";
import cron from 'node-cron';
import * as nearAPI from "near-api-js";
import * as os from "os";
import * as path from "path";
const { connect } = nearAPI;
const { Contract } = nearAPI;

const { keyStores } = nearAPI;
const homedir = os.homedir();
const CREDENTIALS_DIR = ".near-credentials";
const credentialsPath = path.join(homedir, CREDENTIALS_DIR);
const myKeyStore = new keyStores.UnencryptedFileSystemKeyStore(credentialsPath);

const testnetConnectionConfig = {
    networkId: "testnet",
    keyStore: myKeyStore, // first create a key store 
    nodeUrl: "https://rpc.testnet.near.org",
    walletUrl: "https://wallet.testnet.near.org",
    helperUrl: "https://helper.testnet.near.org",
    explorerUrl: "https://explorer.testnet.near.org",
};

const testnetContractAccount = "dev-1671218049971-36407954871979"

const mainnetConnectionConfig = {
    networkId: "mainnet",
    keyStore: myKeyStore, // first create a key store 
    nodeUrl: "https://rpc.near.org",
    walletUrl: "https://wallet.near.org",
    helperUrl: "https://helper.near.org",
    explorerUrl: "https://explorer.near.org",
};

const mainnetContractAccount = "language.betteryou.near"

const connectionConfig = testnetConnectionConfig;
const contractAccount = testnetContractAccount;

const nearConnection = await connect(connectionConfig);
const account = await nearConnection.account(contractAccount);

const contract = new Contract(
    account, // the account object that is connecting
    contractAccount,
    {
        // name of contract you're connecting to
        viewMethods: ["get_all_state"], // view methods do not change state but usually return a value
        changeMethods: ["admin_update_challenge"], // change methods modify state
    }
);

async function run() {

    let updateArray = [];
    let state = await contract.get_all_state();
    for (const challenge of state) {
        try {
            const duo = new Duo(challenge[1].duolingo_username.toString());

            const courses = await duo.getCourses();
            const result = courses.find(({ title }) => title === challenge[1].language);
            if (result) {
                if (result.xp == challenge[1].total_xp) {
                    console.log("No update for " + challenge[0] + " still at " + result.xp);
                } else {
                    updateArray.push([challenge[0], result.xp]);
                }
            } else {
                console.error(`Cannot find language ${challenge[1].language} for user ${challenge[1].duolingo_username} (${challenge[0]})`)
            }
        } catch (error) {
            console.error(`Failed to fetch Duolingo for ${challenge[1].language} for user ${challenge[1].duolingo_username} (${challenge[0]})`)
        }

    }
    console.log(updateArray);
    // Call the contract only if there are some updates.
    if (updateArray.length > 0) {
        try { await contract.admin_update_challenge({ update: updateArray }) } catch (e) {
            console.log(e);
        };
    } else {
        console.log("Skipping");
    }
}

// DUO
function Duo(username) {
    if (!username) {
        throw new Error("Username is required");
    }

    var self = this;
    self.username = username;
    self.params = {
        referrerPolicy: "strict-origin-when-cross-origin",
        body: null,
        method: "GET",
        mode: "cors",
        credentials: "omit",
    };
}
/**
 * Send a request to the Duolingo API
 * @param {Duo} self
 * @param {string} url
 * @returns {Promise}
*/
function request(self, url) {
    return fetch(url, self.params).then(res => {
        return res.json();
    }).catch(err => {
        return Promise.reject(err);
    });
}

/**
 * Parses data from Duolingo API
 * @param {Duo} self
 * @returns {Promise}
*/
function getData(self) {
    var url = base + encodeURIComponent(`https://www.duolingo.com/2017-06-30/users?username=${self.username}&ts=${new Date().getTime()}`);
    return request(self, url).then(res => {
        var data = JSON.parse(res.contents).users[0];
        if (!data) throw new Error("Invalid username");
        return data;
    });
}

/**
 * Gets the user's courses
 * @returns {array}
*/
Duo.prototype.getCourses = function () {
    return getData(this).then(res => {
        return res.courses;
    });
}

console.log("starting first run.");
run();

let date_ob = new Date();
console.log(`Setting up cron ${date_ob.toUTCString()}`);

//cron job that runs the update on the contract every 10 minutes
cron.schedule('*/10 * * * *', () => {
    let date_ob = new Date();

    console.log(`Running the cron job ${date_ob.toUTCString()}`)
    run();
});

'''
'''--- oracle/package-lock.json ---
{
  "name": "oracle",
  "version": "1.0.0",
  "lockfileVersion": 2,
  "requires": true,
  "packages": {
    "": {
      "name": "oracle",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "duo-wrapper": "^1.3.0",
        "duolingo-api": "^1.0.2",
        "near-api-js": "^1.1.0",
        "node-cron": "^3.0.0",
        "node-fetch": "^3.3.0"
      }
    },
    "node_modules/axios": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/axios/-/axios-0.19.2.tgz",
      "integrity": "sha512-fjgm5MvRHLhx+osE2xoekY70AhARk3a6hkN+3Io1jc00jtquGvxYlKlsFUhmUET0V5te6CcZI7lcv2Ym61mjHA==",
      "deprecated": "Critical security vulnerability fixed in v0.21.1. For more information, see https://github.com/axios/axios/pull/3410",
      "dependencies": {
        "follow-redirects": "1.5.10"
      }
    },
    "node_modules/base-x": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/bn.js": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.1.tgz",
      "integrity": "sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ=="
    },
    "node_modules/borsh": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.7.0.tgz",
      "integrity": "sha512-CLCsZGIBCFnPtkNnieW/a8wmreDmfUtjU2m9yHrzPXIlNbqVs0AQrSatSG6vdNYUqdc83tkQi2eHfF98ubzQLA==",
      "dependencies": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "node_modules/bs58": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
      "integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
      "dependencies": {
        "base-x": "^3.0.2"
      }
    },
    "node_modules/capability": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/capability/-/capability-0.2.5.tgz",
      "integrity": "sha512-rsJZYVCgXd08sPqwmaIqjAd5SUTfonV0z/gDJ8D6cN8wQphky1kkAYEqQ+hmDxTw7UihvBfjUVUSY+DBEe44jg=="
    },
    "node_modules/data-uri-to-buffer": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/data-uri-to-buffer/-/data-uri-to-buffer-4.0.0.tgz",
      "integrity": "sha512-Vr3mLBA8qWmcuschSLAOogKgQ/Jwxulv3RNE4FXnYWRGujzrRWQI4m12fQqRkwX06C0KanhLr4hK+GydchZsaA==",
      "engines": {
        "node": ">= 12"
      }
    },
    "node_modules/debug": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.1.0.tgz",
      "integrity": "sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/duo-wrapper": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/duo-wrapper/-/duo-wrapper-1.3.0.tgz",
      "integrity": "sha512-LrRpP+G2xOIB7sUMFszkBMB2SwzudO0j/cdKyZu08UcFjkKXL2Frd6kSYRsmC+GSnQcbJ/m3n05Auj4QSDoVXw==",
      "dependencies": {
        "node-fetch": "^3.2.8"
      }
    },
    "node_modules/duolingo-api": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/duolingo-api/-/duolingo-api-1.0.2.tgz",
      "integrity": "sha512-o0uvAy59cS1sdT0SwJFRayr6IGOPbgqeMKBB1YRTVl2cDqlv2dLXb3u47NsAJcmCJZBbDfgKRMLMFGLJ8P56bA==",
      "dependencies": {
        "axios": "^0.19.2"
      }
    },
    "node_modules/error-polyfill": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/error-polyfill/-/error-polyfill-0.1.3.tgz",
      "integrity": "sha512-XHJk60ufE+TG/ydwp4lilOog549iiQF2OAPhkk9DdiYWMrltz5yhDz/xnKuenNwP7gy3dsibssO5QpVhkrSzzg==",
      "dependencies": {
        "capability": "^0.2.5",
        "o3": "^1.0.3",
        "u3": "^0.1.1"
      }
    },
    "node_modules/fetch-blob": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/fetch-blob/-/fetch-blob-3.2.0.tgz",
      "integrity": "sha512-7yAQpD2UMJzLi1Dqv7qFYnPbaPx7ZfFK6PiIxQ4PfkGPyNyl2Ugx+a/umUonmKqjhM4DnfbMvdX6otXq83soQQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/jimmywarting"
        },
        {
          "type": "paypal",
          "url": "https://paypal.me/jimmywarting"
        }
      ],
      "dependencies": {
        "node-domexception": "^1.0.0",
        "web-streams-polyfill": "^3.0.3"
      },
      "engines": {
        "node": "^12.20 || >= 14.13"
      }
    },
    "node_modules/follow-redirects": {
      "version": "1.5.10",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.5.10.tgz",
      "integrity": "sha512-0V5l4Cizzvqt5D44aTXbFZz+FtyXV1vrDN6qrelxtfYQKW0KO0W2T/hkE8xvGa/540LkZlkaUjO4ailYTFtHVQ==",
      "dependencies": {
        "debug": "=3.1.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/formdata-polyfill": {
      "version": "4.0.10",
      "resolved": "https://registry.npmjs.org/formdata-polyfill/-/formdata-polyfill-4.0.10.tgz",
      "integrity": "sha512-buewHzMvYL29jdeQTVILecSaZKnt/RJWjoZCF5OW60Z67/GmSLBkOFM7qh1PI3zFNtJbaZL5eQu1vLfazOwj4g==",
      "dependencies": {
        "fetch-blob": "^3.1.2"
      },
      "engines": {
        "node": ">=12.20.0"
      }
    },
    "node_modules/http-errors": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
      "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
      "dependencies": {
        "depd": "~1.1.2",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/http-errors/node_modules/depd": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
      "integrity": "sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "node_modules/js-sha256": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA=="
    },
    "node_modules/moment": {
      "version": "2.29.4",
      "resolved": "https://registry.npmjs.org/moment/-/moment-2.29.4.tgz",
      "integrity": "sha512-5LC9SOxjSc2HF6vO2CyuTDNivEdoz2IvyJJGj6X8DJ0eFyfszE0QiEd+iXmBvUP3WHxSjFH/vIsA0EN00cgr8w==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/moment-timezone": {
      "version": "0.5.40",
      "resolved": "https://registry.npmjs.org/moment-timezone/-/moment-timezone-0.5.40.tgz",
      "integrity": "sha512-tWfmNkRYmBkPJz5mr9GVDn9vRlVZOTe6yqY92rFxiOdWXbjaR0+9LwQnZGGuNR63X456NqmEkbskte8tWL5ePg==",
      "dependencies": {
        "moment": ">= 2.9.0"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "node_modules/mustache": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/mustache/-/mustache-4.2.0.tgz",
      "integrity": "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ==",
      "bin": {
        "mustache": "bin/mustache"
      }
    },
    "node_modules/near-api-js": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/near-api-js/-/near-api-js-1.1.0.tgz",
      "integrity": "sha512-qYKv1mYsaDZc2uYndhS+ttDhR9+60qFc+ZjD6lWsAxr3ZskMjRwPffDGQZYhC7BRDQMe1HEbk6d5mf+TVm0Lqg==",
      "dependencies": {
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "bs58": "^4.0.0",
        "depd": "^2.0.0",
        "error-polyfill": "^0.1.3",
        "http-errors": "^1.7.2",
        "js-sha256": "^0.9.0",
        "mustache": "^4.0.0",
        "node-fetch": "^2.6.1",
        "text-encoding-utf-8": "^1.0.2",
        "tweetnacl": "^1.0.1"
      }
    },
    "node_modules/near-api-js/node_modules/node-fetch": {
      "version": "2.6.7",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
      "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-cron": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/node-cron/-/node-cron-3.0.0.tgz",
      "integrity": "sha512-DDwIvvuCwrNiaU7HEivFDULcaQualDv7KoNlB/UU1wPW0n1tDEmBJKhEIE6DlF2FuoOHcNbLJ8ITL2Iv/3AWmA==",
      "dependencies": {
        "moment-timezone": "^0.5.31"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/node-domexception": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/node-domexception/-/node-domexception-1.0.0.tgz",
      "integrity": "sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/jimmywarting"
        },
        {
          "type": "github",
          "url": "https://paypal.me/jimmywarting"
        }
      ],
      "engines": {
        "node": ">=10.5.0"
      }
    },
    "node_modules/node-fetch": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-3.3.0.tgz",
      "integrity": "sha512-BKwRP/O0UvoMKp7GNdwPlObhYGB5DQqwhEDQlNKuoqwVYSxkSZCSbHjnFFmUEtwSKRPU4kNK8PbDYYitwaE3QA==",
      "dependencies": {
        "data-uri-to-buffer": "^4.0.0",
        "fetch-blob": "^3.1.4",
        "formdata-polyfill": "^4.0.10"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/node-fetch"
      }
    },
    "node_modules/o3": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/o3/-/o3-1.0.3.tgz",
      "integrity": "sha512-f+4n+vC6s4ysy7YO7O2gslWZBUu8Qj2i2OUJOvjRxQva7jVjYjB29jrr9NCjmxZQR0gzrOcv1RnqoYOeMs5VRQ==",
      "dependencies": {
        "capability": "^0.2.5"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "node_modules/statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/text-encoding-utf-8": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "node_modules/tweetnacl": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.3.tgz",
      "integrity": "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw=="
    },
    "node_modules/u3": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/u3/-/u3-0.1.1.tgz",
      "integrity": "sha512-+J5D5ir763y+Am/QY6hXNRlwljIeRMZMGs0cT6qqZVVzzT3X3nFPXVyPOFRMOR4kupB0T8JnCdpWdp6Q/iXn3w=="
    },
    "node_modules/web-streams-polyfill": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-3.2.1.tgz",
      "integrity": "sha512-e0MO3wdXWKrLbL0DgGnUV7WHVuw9OUvL4hjgnPkIeEvESk74gAITi5G606JtZPp39cd8HA9VQzCIvA49LpPN5Q==",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    }
  },
  "dependencies": {
    "axios": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/axios/-/axios-0.19.2.tgz",
      "integrity": "sha512-fjgm5MvRHLhx+osE2xoekY70AhARk3a6hkN+3Io1jc00jtquGvxYlKlsFUhmUET0V5te6CcZI7lcv2Ym61mjHA==",
      "requires": {
        "follow-redirects": "1.5.10"
      }
    },
    "base-x": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "bn.js": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.1.tgz",
      "integrity": "sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ=="
    },
    "borsh": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.7.0.tgz",
      "integrity": "sha512-CLCsZGIBCFnPtkNnieW/a8wmreDmfUtjU2m9yHrzPXIlNbqVs0AQrSatSG6vdNYUqdc83tkQi2eHfF98ubzQLA==",
      "requires": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "bs58": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
      "integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
      "requires": {
        "base-x": "^3.0.2"
      }
    },
    "capability": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/capability/-/capability-0.2.5.tgz",
      "integrity": "sha512-rsJZYVCgXd08sPqwmaIqjAd5SUTfonV0z/gDJ8D6cN8wQphky1kkAYEqQ+hmDxTw7UihvBfjUVUSY+DBEe44jg=="
    },
    "data-uri-to-buffer": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/data-uri-to-buffer/-/data-uri-to-buffer-4.0.0.tgz",
      "integrity": "sha512-Vr3mLBA8qWmcuschSLAOogKgQ/Jwxulv3RNE4FXnYWRGujzrRWQI4m12fQqRkwX06C0KanhLr4hK+GydchZsaA=="
    },
    "debug": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.1.0.tgz",
      "integrity": "sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==",
      "requires": {
        "ms": "2.0.0"
      }
    },
    "depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw=="
    },
    "duo-wrapper": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/duo-wrapper/-/duo-wrapper-1.3.0.tgz",
      "integrity": "sha512-LrRpP+G2xOIB7sUMFszkBMB2SwzudO0j/cdKyZu08UcFjkKXL2Frd6kSYRsmC+GSnQcbJ/m3n05Auj4QSDoVXw==",
      "requires": {
        "node-fetch": "^3.2.8"
      }
    },
    "duolingo-api": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/duolingo-api/-/duolingo-api-1.0.2.tgz",
      "integrity": "sha512-o0uvAy59cS1sdT0SwJFRayr6IGOPbgqeMKBB1YRTVl2cDqlv2dLXb3u47NsAJcmCJZBbDfgKRMLMFGLJ8P56bA==",
      "requires": {
        "axios": "^0.19.2"
      }
    },
    "error-polyfill": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/error-polyfill/-/error-polyfill-0.1.3.tgz",
      "integrity": "sha512-XHJk60ufE+TG/ydwp4lilOog549iiQF2OAPhkk9DdiYWMrltz5yhDz/xnKuenNwP7gy3dsibssO5QpVhkrSzzg==",
      "requires": {
        "capability": "^0.2.5",
        "o3": "^1.0.3",
        "u3": "^0.1.1"
      }
    },
    "fetch-blob": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/fetch-blob/-/fetch-blob-3.2.0.tgz",
      "integrity": "sha512-7yAQpD2UMJzLi1Dqv7qFYnPbaPx7ZfFK6PiIxQ4PfkGPyNyl2Ugx+a/umUonmKqjhM4DnfbMvdX6otXq83soQQ==",
      "requires": {
        "node-domexception": "^1.0.0",
        "web-streams-polyfill": "^3.0.3"
      }
    },
    "follow-redirects": {
      "version": "1.5.10",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.5.10.tgz",
      "integrity": "sha512-0V5l4Cizzvqt5D44aTXbFZz+FtyXV1vrDN6qrelxtfYQKW0KO0W2T/hkE8xvGa/540LkZlkaUjO4ailYTFtHVQ==",
      "requires": {
        "debug": "=3.1.0"
      }
    },
    "formdata-polyfill": {
      "version": "4.0.10",
      "resolved": "https://registry.npmjs.org/formdata-polyfill/-/formdata-polyfill-4.0.10.tgz",
      "integrity": "sha512-buewHzMvYL29jdeQTVILecSaZKnt/RJWjoZCF5OW60Z67/GmSLBkOFM7qh1PI3zFNtJbaZL5eQu1vLfazOwj4g==",
      "requires": {
        "fetch-blob": "^3.1.2"
      }
    },
    "http-errors": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
      "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
      "requires": {
        "depd": "~1.1.2",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.1"
      },
      "dependencies": {
        "depd": {
          "version": "1.1.2",
          "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
          "integrity": "sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ=="
        }
      }
    },
    "inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "js-sha256": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA=="
    },
    "moment": {
      "version": "2.29.4",
      "resolved": "https://registry.npmjs.org/moment/-/moment-2.29.4.tgz",
      "integrity": "sha512-5LC9SOxjSc2HF6vO2CyuTDNivEdoz2IvyJJGj6X8DJ0eFyfszE0QiEd+iXmBvUP3WHxSjFH/vIsA0EN00cgr8w=="
    },
    "moment-timezone": {
      "version": "0.5.40",
      "resolved": "https://registry.npmjs.org/moment-timezone/-/moment-timezone-0.5.40.tgz",
      "integrity": "sha512-tWfmNkRYmBkPJz5mr9GVDn9vRlVZOTe6yqY92rFxiOdWXbjaR0+9LwQnZGGuNR63X456NqmEkbskte8tWL5ePg==",
      "requires": {
        "moment": ">= 2.9.0"
      }
    },
    "ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "mustache": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/mustache/-/mustache-4.2.0.tgz",
      "integrity": "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ=="
    },
    "near-api-js": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/near-api-js/-/near-api-js-1.1.0.tgz",
      "integrity": "sha512-qYKv1mYsaDZc2uYndhS+ttDhR9+60qFc+ZjD6lWsAxr3ZskMjRwPffDGQZYhC7BRDQMe1HEbk6d5mf+TVm0Lqg==",
      "requires": {
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "bs58": "^4.0.0",
        "depd": "^2.0.0",
        "error-polyfill": "^0.1.3",
        "http-errors": "^1.7.2",
        "js-sha256": "^0.9.0",
        "mustache": "^4.0.0",
        "node-fetch": "^2.6.1",
        "text-encoding-utf-8": "^1.0.2",
        "tweetnacl": "^1.0.1"
      },
      "dependencies": {
        "node-fetch": {
          "version": "2.6.7",
          "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
          "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
          "requires": {
            "whatwg-url": "^5.0.0"
          }
        }
      }
    },
    "node-cron": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/node-cron/-/node-cron-3.0.0.tgz",
      "integrity": "sha512-DDwIvvuCwrNiaU7HEivFDULcaQualDv7KoNlB/UU1wPW0n1tDEmBJKhEIE6DlF2FuoOHcNbLJ8ITL2Iv/3AWmA==",
      "requires": {
        "moment-timezone": "^0.5.31"
      }
    },
    "node-domexception": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/node-domexception/-/node-domexception-1.0.0.tgz",
      "integrity": "sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ=="
    },
    "node-fetch": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-3.3.0.tgz",
      "integrity": "sha512-BKwRP/O0UvoMKp7GNdwPlObhYGB5DQqwhEDQlNKuoqwVYSxkSZCSbHjnFFmUEtwSKRPU4kNK8PbDYYitwaE3QA==",
      "requires": {
        "data-uri-to-buffer": "^4.0.0",
        "fetch-blob": "^3.1.4",
        "formdata-polyfill": "^4.0.10"
      }
    },
    "o3": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/o3/-/o3-1.0.3.tgz",
      "integrity": "sha512-f+4n+vC6s4ysy7YO7O2gslWZBUu8Qj2i2OUJOvjRxQva7jVjYjB29jrr9NCjmxZQR0gzrOcv1RnqoYOeMs5VRQ==",
      "requires": {
        "capability": "^0.2.5"
      }
    },
    "safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ=="
    },
    "setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA=="
    },
    "text-encoding-utf-8": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
    },
    "toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA=="
    },
    "tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "tweetnacl": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.3.tgz",
      "integrity": "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw=="
    },
    "u3": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/u3/-/u3-0.1.1.tgz",
      "integrity": "sha512-+J5D5ir763y+Am/QY6hXNRlwljIeRMZMGs0cT6qqZVVzzT3X3nFPXVyPOFRMOR4kupB0T8JnCdpWdp6Q/iXn3w=="
    },
    "web-streams-polyfill": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-3.2.1.tgz",
      "integrity": "sha512-e0MO3wdXWKrLbL0DgGnUV7WHVuw9OUvL4hjgnPkIeEvESk74gAITi5G606JtZPp39cd8HA9VQzCIvA49LpPN5Q=="
    },
    "webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "requires": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    }
  }
}

'''
'''--- oracle/package.json ---
{
  "name": "oracle",
  "version": "1.0.0",
  "description": "",
  "main": "duolingo.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "type": "module",
  "author": "",
  "license": "ISC",
  "dependencies": {
    "duo-wrapper": "^1.3.0",
    "duolingo-api": "^1.0.2",
    "near-api-js": "^1.1.0",
    "node-cron": "^3.0.0",
    "node-fetch": "^3.3.0"
  }
}

'''
'''--- oracle_python/oracle.py ---
import near_api
import json
import os
import time
import requests
import datetime

near_provider = near_api.providers.JsonProvider(
    "https://rpc.mainnet.near.org")
contract_id = "language.betteryou.near"

# Gets all the users that participate in the challenge.

def get_all_users():
    result = near_provider.view_call(
        contract_id, "get_all_state", json.dumps({}).encode('utf8'))
    all_users = json.loads(''.join([chr(x) for x in result['result']]))
    result = {}
    for user in all_users:
        user_info = user[1]
        # Look only on the active challenges
        if user_info['days_left'] > 0 and user_info['lives_left'] > 0:
            register_seconds = user_info['register_timestamp'] / 1000000000
            # If the day has passed, we should update (this is the case where user didn't update their duolingo)
            should_refresh = register_seconds + \
                (user_info['days_passed'] + 1) * 86400 < time.time()
            result[user[0]] = {'should_refresh': should_refresh, 'total_xp': user_info['total_xp'],
                               'duolingo_username': user_info['duolingo_username'], 'language': user_info['language']}
    return result

# Fetch the XP points from duolingo for a given user.

def fetch_duolingo(username, language, near_account):
    response = requests.get(
        f"https://www.duolingo.com/2017-06-30/users?username={username}")
    if not response.ok:
        print(
            f"Failed to fetch {near_account} {username} {language} : {response}")
        return None
    try:
        for course in response.json()['users'][0]['courses']:
            if course['title'] == language:
                return course['xp']
        print(
            f"Failed to find the language {language} for {username} NEAR: {near_account}")
    except Exception as e:
        print(
            f"Failed to fetch {username} {language} NEAR: {near_account}: {e}")
    return None

def find_users_to_refresh():
    all_users = get_all_users()
    to_refresh = []
    for k, v in all_users.items():
        xp = fetch_duolingo(v["duolingo_username"], v["language"], k)
        should_refresh = v["should_refresh"]
        if xp and xp != v["total_xp"]:
            should_refresh = True
        else:
            print(f"User {k} - no XP update")
        if should_refresh:
            to_refresh.append((k, xp or 0))
    return to_refresh

# Signer private key (in format ed25519:xxxxx)
# signer_key = os.environ["NEAR_SIGNER_KEY"]

def update_users_in_protocol(to_refresh):
    signer_id = "language.betteryou.near"
    signer_key = os.environ["NEAR_SIGNER_KEY"]
    args = {"update": to_refresh}

    key_pair = near_api.signer.KeyPair(signer_key)
    signer = near_api.signer.Signer(signer_id, key_pair)
    account = near_api.account.Account(near_provider, signer, signer_id)

    out = account.function_call(contract_id, "admin_update_challenge", args)

    print(out)

while True:
    to_refresh = find_users_to_refresh()

    print(f"{datetime.datetime.now()} - users to update: {to_refresh}")
    if to_refresh:
        try:
            update_users_in_protocol(to_refresh)
        except Exception as e:
            print(f"Failed to update blockchain: {e}")
    # Sleep 10 minutes
    time.sleep(60*10)

'''
'''--- oracle_python/requirements.txt ---
near-api-py==0.1.0
'''
'''--- wakeup/Cargo.toml ---

[package]
name = "wakeup"
version = "1.0.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0"
uint = { version = "0.9.3", default-features = false }
funding = { path = "../funding"}

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []
'''
'''--- wakeup/README.md ---
contract for regular wakeup challenge.
'''
'''--- wakeup/build.sh ---
#!/bin/sh

echo ">> Building contract"

rustup target add wasm32-unknown-unknown
cargo build --all --target wasm32-unknown-unknown --release
'''
'''--- wakeup/deploy.sh ---
#!/bin/sh

./build.sh

echo ">> Deploying contract"

near deploy  --wasmFile ./target/wasm32-unknown-unknown/release/wakeup.wasm --account_id wakeup.betteryou.testnet

'''
'''--- wakeup/src/lib.rs ---
use funding::FundingEngine;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::unordered_map::UnorderedMap;
use near_sdk::env::panic_str;
use near_sdk::serde;
use near_sdk::{env, log, near_bindgen, AccountId, Promise};
use std::time::Duration;

// Full seconds since UNIX_EPOCH.
pub type TimestampSeconds = u64;

// Seconds
pub type DurationSeconds = u64;

const DAY: DurationSeconds = 24 * 60 * 60;
const MAX_DAYS: u64 = 1000;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    challenges: UnorderedMap<AccountId, ChallengeState>,
    // TESTONLY: set custom day length.
    day_length: Option<DurationSeconds>,
}

#[derive(serde::Serialize, serde::Deserialize, BorshDeserialize, BorshSerialize)]
#[serde(crate = "near_sdk::serde")]
pub struct ChallengeConfig {
    lives: u64,
    days: u64,
    first_day: TimestampSeconds,
    timeout: DurationSeconds,
}

impl ChallengeConfig {
    fn validate(&self) {
        if self.days > MAX_DAYS {
            panic!("got {} days, want <= {MAX_DAYS}", self.days);
        }
        if self.lives > MAX_DAYS {
            panic!("got {} lives, want <= {MAX_DAYS}", self.lives);
        }
    }
}

#[derive(serde::Serialize, BorshDeserialize, BorshSerialize)]
#[serde(crate = "near_sdk::serde")]
pub struct ChallengeState {
    config: ChallengeConfig,
    // TEST ONLY
    day_length: Option<DurationSeconds>,
    days_passed: u64,
    lives_used: u64,
    funding: FundingEngine,
    day_status: Vec<bool>,
}

impl ChallengeState {
    fn update(&mut self, now: TimestampSeconds) {
        loop {
            log!(
                "update challenge loop iter now: {}, days passed: {} lives used: {}",
                now,
                self.days_passed,
                self.lives_used
            );
            // Has challenge finished?
            if self.lives_used > self.config.lives || self.days_passed >= self.config.days {
                log!("The challenge has finished.");
                break;
            }
            // Has a new day started?
            let day_start =
                self.config.first_day + self.days_passed * self.day_length.unwrap_or(DAY);
            if now < day_start {
                log!("Finished processing all days till 'now'");
                break;
            }

            // Progress the challenge state by 1 day.
            self.days_passed += 1;
            if day_start + self.config.timeout >= now {
                self.day_status.push(true);
                log!("Day {} completed!", self.days_passed);
            } else {
                log!("Day {} missing, lost a life!", self.days_passed);
                self.lives_used += 1;
                self.day_status.push(false);
            }
        }
    }
}

impl Default for Contract {
    fn default() -> Self {
        Self {
            challenges: UnorderedMap::new(b"v"),
            day_length: None,
        }
    }
}

#[near_bindgen]
impl Contract {
    #[private]
    pub fn reset(&mut self) {
        self.challenges.clear();
    }
    #[private]
    pub fn set_day_length(&mut self, day_length: DurationSeconds) {
        self.day_length = Some(day_length);
    }

    #[payable]
    pub fn create_challenge(&mut self, config: ChallengeConfig) {
        config.validate();
        let caller = env::predecessor_account_id();
        if self.challenges.get(&caller).is_some() {
            panic!("challenge already exists");
        }
        self.challenges.insert(
            &caller,
            &ChallengeState {
                config,
                day_length: self.day_length,
                days_passed: 0,
                lives_used: 0,
                funding: FundingEngine::new(
                    &env::predecessor_account_id(),
                    env::attached_deposit(),
                ),
                day_status: Vec::new(),
            },
        );
    }

    pub fn get_challenge(&self, account_id: AccountId) -> Option<ChallengeState> {
        self.challenges.get(&account_id)
    }

    // Must be called at the right hour of the day.
    pub fn update_challenge(&mut self) {
        let caller = env::predecessor_account_id();
        let mut ch = self.challenges.get(&caller).expect("challenge not found");
        let now = Duration::from_nanos(env::block_timestamp());
        ch.update(now.as_secs());
        self.challenges.insert(&caller, &ch);
    }

    #[payable]
    pub fn add_prize(&mut self, account_id: AccountId) {
        let mut challenge = self.challenges.get(&account_id).unwrap();
        challenge
            .funding
            .fund(&env::predecessor_account_id(), env::attached_deposit());
        self.challenges.insert(&account_id, &challenge);
    }

    pub fn abandon_challenge(&mut self) {
        let caller = env::predecessor_account_id();
        let challenge = self.challenges.get(&caller).unwrap();
        let prize = challenge.funding.resolve(false);
        for (account_id, tokens) in prize.iter() {
            Promise::new(account_id.clone()).transfer(*tokens);
        }
        self.challenges.remove(&caller);
    }

    pub fn finish(&mut self) {
        let challenge = self.get_challenge(env::predecessor_account_id()).unwrap();
        if challenge.lives_used > challenge.config.lives
            || challenge.days_passed >= challenge.config.days
        {
            let prize = challenge
                .funding
                .resolve(challenge.days_passed >= challenge.config.days);
            for (account_id, tokens) in prize.iter() {
                Promise::new(account_id.clone()).transfer(*tokens);
            }
            self.challenges.remove(&env::predecessor_account_id());
        } else {
            panic_str("Challenge is not finished yet");
        }
    }
}

'''