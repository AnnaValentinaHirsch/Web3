*GitHub Repository "NearPass/nearpass"*

'''--- .eslintrc.json ---
{
  "extends": "next/core-web-vitals"
}

'''
'''--- .github/ISSUE_TEMPLATE/issue.yml ---
name: Bug Report
description: File a bug report
title: "ðŸª³: "
body:
    - type: markdown
      attributes:
          value: |
              ## Thanks for taking the time to fill out this bug report!
    - type: textarea
      attributes:
          label: What happened?
          description: Also tell us, what did you expect to happen?
          placeholder: Tell us what you see!
    - type: textarea
      attributes:
          label: Steps to reproduce
          description: Please could you provide clearly ordered steps to reproduce the issue.
          placeholder: |
              1. Login to the System
              2. Click the Menu Item
              3. Submit
    - type: textarea
      attributes:
          label: Anything else?
          description: |
              Links? References? Anything that will give us more context about the issue you are encountering!
              Tip: You can attach images or log files by clicking this area to highlight it and then dragging files in.

'''
'''--- License.md ---
MIT License

Copyright (c) 2022 NearPass

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

'''
'''--- README.md ---
#### Nearpass FrontEnd

Nearpass Frontend app, built using Next.js and near-api-js.

Frontend hosted [here](https://nearpass.vercel.app/).

'''
'''--- helpers/config.ts ---
const CONTRACT_NAME = "TBD";

function getConfig(env: string) {
    switch (env) {
        case "mainnet":
            return {
                networkId: "mainnet",
                nodeUrl: "https://rpc.mainnet.near.org",
                contractName: CONTRACT_NAME,
                walletUrl: "https://wallet.near.org",
                helperUrl: "https://helper.mainnet.near.org",
            };
        // This is an example app so production is set to testnet.
        // You can move production to mainnet if that is applicable.
        case "production":
        case "development":
        case "testnet":
        default:
            return {
                networkId: "testnet",
                nodeUrl: "https://rpc.testnet.near.org",
                contractName: CONTRACT_NAME,
                walletUrl: "https://wallet.testnet.near.org",
                helperUrl: "https://helper.testnet.near.org",
            };
    }
}

export default getConfig;

'''
'''--- helpers/ipfs.js ---
import { NFTStorage } from "nft.storage";
import axios from "axios";

const nftstorage = new NFTStorage({
    token: process.env.NEXT_PUBLIC_NFT_STORAGE,
});

export default async function fileFromPath(title, filePath, properties, cb) {
    const reader = new window.FileReader();
    let blob = await fetch(filePath).then((r) => r.blob());
    reader.readAsDataURL(blob);
    reader.onloadend = async () => {
        let fileData = Buffer.from(reader.result);
        let filename = filePath.split("/").at(-1);
        let image = new File([fileData], filename, {
            type: blob.type,
        });

        let result = await nftstorage.store({
            image,
            name: title,
            description: properties.description,
            properties,
        });

        cb(result);
    };
}

'''
'''--- helpers/useEventContract.ts ---
import { Account, Contract, KeyPair, utils } from "near-api-js";
import { useEffect, useState } from "react";
import useWallet from "./useWallet";
import { timestampToDateTime } from "./utils";

const EVENTS_CONTRACT = process.env.NEXT_PUBLIC_EVENT_CONTRACT_ADDRESS;

function titleToEventId(title: string) {
    let titleSplit = title.split(" ");
    let titleLower = titleSplit.map((word) => {
        if (word[0]) {
            return `${word[0].toLowerCase()}${word.slice(1, word.length)}`;
        }
    });
    return titleLower.join("-");
}

function useEventContract() {
    const [near, walletConnection, keyStore] = useWallet();
    const [contract, setContract] = useState<Contract>();

    useEffect(() => {
        if (walletConnection) {
            (async () => {
                prepareEventContract();
            })();
        }
    }, [walletConnection]);

    async function getAccountAccessKeys() {
        if (walletConnection) {
            let keys = await walletConnection.account().getAccessKeys();
            console.log(keys);
            console.log(utils.format.parseNearAmount("1"));
            let keys2 = keys.filter((key) => {
                let permission = key.access_key.permission;
                if (typeof permission === "object") {
                    return (
                        key.access_key.permission["FunctionCall"]
                            .receiver_id === EVENTS_CONTRACT &&
                        key.access_key.permission["FunctionCall"].allowance ===
                            utils.format.parseNearAmount("10")
                    );
                }
            });
            return keys2;
        }
    }

    // async function checkIfKeyInKeyStore() {
    //     if (walletConnection && keyStore) {
    //         let accessKeys = await getAccountAccessKeys();

    //         if (accessKeys && accessKeys.length > 0) {
    //             for (let i = 0; i < accessKeys.length; i++) {
    //                 let key = await keyStore.getAccounts(
    //                     accessKeys[i].public_key.split(":")[1]
    //                 );
    //                 if (key.length > 0) {
    //                     return true;
    //                 }
    //             }
    //         }
    //     }
    //     return false;
    // }

    // async function addKeyToKeyStore() {
    //     if (keyStore && walletConnection) {
    //         const keyPair = KeyPair.fromRandom("ed25519");
    //         const publicKey = keyPair.getPublicKey().toString();
    //         console.log(publicKey);
    //         await keyStore.setKey("testnet", publicKey, keyPair);
    //         let account = await walletConnection.account();
    //         await account.addKey(
    //             publicKey, // public key for new account
    //             EVENTS_CONTRACT, // contract this key is allowed to call (optional)
    //             [
    //                 "createEvent",
    //                 "buyTicket",
    //                 "cancelEvent",
    //                 "withdraw",
    //                 "claimRefund",
    //                 "redeem",
    //             ], // methods this key is allowed to call (optional)
    //             utils.format.parseNearAmount("10") // allowance key can use to call methods (optional)
    //         );
    //     }
    // }

    async function prepareEventContract() {
        let account = await near?.account(
            walletConnection?.getAccountId() as string
        );
        const contract = new Contract(
            account as Account,
            EVENTS_CONTRACT as string,
            {
                changeMethods: ["createEvent", "buyTicket"],
                viewMethods: [],
            }
        );
        setContract(contract);
    }

    async function createEventOnChain({
        title,
        hostName,
        price,
        timestamp,
        eventMetadata,
    }) {
        if (contract) {
            const tx = await walletConnection?.account().functionCall({
                contractId: EVENTS_CONTRACT as string,
                methodName: "createEvent",
                args: {
                    eventId: titleToEventId(title),
                    title,
                    eventMetadata,
                    eventStart: timestamp * 1000000,
                    hostName,
                    price: utils.format.parseNearAmount(price.toString()),
                },
                walletCallbackUrl: `${window.location.origin}/profile/events`,
            });

            return tx;
        }
    }

    async function buyTicket({
        eventId,
        name,
        email,
        phone,
        answer1,
        answer2,
        price,
    }) {
        if (contract) {
            console.log({ eventId, name, email, price });
            let tx = await walletConnection?.account().functionCall({
                contractId: EVENTS_CONTRACT as string,
                methodName: "buyTicket",
                args: { eventId, name, email, phone, answer1, answer2 },
                gas: BigInt(300_000_000_000_000).toString(),
                attachedDeposit: price,
                walletCallbackUrl: `${window.location.origin}/profile/tickets`,
            });
            return tx;
        }
    }

    return { contract, createEventOnChain, buyTicket };
}

export default useEventContract;

'''
'''--- helpers/useWallet.ts ---
import * as nearAPI from "near-api-js";
import { Near, utils, WalletConnection } from "near-api-js";
import { BrowserLocalStorageKeyStore } from "near-api-js/lib/key_stores";
import { useEffect, useState } from "react";
import getConfig from "./config";

function useWallet(): [
    near: Near | null,
    walletConnection: WalletConnection | null,
    keyStore: BrowserLocalStorageKeyStore | null
] {
    const [walletConnection, setWalletConnection] =
        useState<WalletConnection | null>(null);
    const [near, setNear] = useState<Near | null>(null);
    const [keyStore, setKeyStore] =
        useState<BrowserLocalStorageKeyStore | null>(null);

    useEffect(() => {
        (async () => {
            const nearConfig = getConfig("testnet");
            const keyStore =
                new nearAPI.keyStores.BrowserLocalStorageKeyStore();
            setKeyStore(keyStore);
            let near = await nearAPI.connect({ keyStore, ...nearConfig });
            setNear(near);
            let wallet = new nearAPI.WalletConnection(near, "event");
            setWalletConnection(wallet);
        })();
    }, []);

    return [near, walletConnection, keyStore];
}

export default useWallet;

'''
'''--- helpers/utils.js ---
export function timestampToDateTime(timestamp) {
    return new Date(Number(timestamp / 1000000)).toString();
}

export function concat(args, accountId) {
    return args[0] + accountId + args[1];
}

'''
'''--- next.config.js ---
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
}

module.exports = nextConfig

'''
'''--- package.json ---
{
  "name": "nearpass",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@headlessui/react": "^1.7.3",
    "apollo-server-micro": "^3.10.3",
    "axios": "^1.1.3",
    "clsx": "^1.2.1",
    "formik": "^2.2.9",
    "graphql": "^16.6.0",
    "micro": "^9.4.1",
    "micro-cors": "^0.1.1",
    "mongoose": "^6.7.0",
    "near-api-js": "^1.1.0",
    "next": "12.3.1",
    "nft.storage": "^7.0.0",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-hot-toast": "^2.4.0",
    "react-icons": "^4.6.0"
  },
  "devDependencies": {
    "@types/node": "18.8.5",
    "@types/react": "18.0.21",
    "@types/react-dom": "18.0.6",
    "autoprefixer": "^10.4.12",
    "eslint": "8.25.0",
    "eslint-config-next": "12.3.1",
    "postcss": "^8.4.18",
    "tailwindcss": "^3.2.0",
    "typescript": "4.8.4"
  }
}

'''
'''--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

'''
'''--- public/vercel.svg ---
<svg width="283" height="64" viewBox="0 0 283 64" fill="none" 
    xmlns="http://www.w3.org/2000/svg">
    <path d="M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z" fill="#000"/>
</svg>
'''
'''--- styles/Home.module.css ---
.container {
  padding: 0 2rem;
}

.main {
  min-height: 100vh;
  padding: 4rem 0;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.footer {
  display: flex;
  flex: 1;
  padding: 2rem 0;
  border-top: 1px solid #eaeaea;
  justify-content: center;
  align-items: center;
}

.footer a {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-grow: 1;
}

.title a {
  color: #0070f3;
  text-decoration: none;
}

.title a:hover,
.title a:focus,
.title a:active {
  text-decoration: underline;
}

.title {
  margin: 0;
  line-height: 1.15;
  font-size: 4rem;
}

.title,
.description {
  text-align: center;
}

.description {
  margin: 4rem 0;
  line-height: 1.5;
  font-size: 1.5rem;
}

.code {
  background: #fafafa;
  border-radius: 5px;
  padding: 0.75rem;
  font-size: 1.1rem;
  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
    Bitstream Vera Sans Mono, Courier New, monospace;
}

.grid {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  max-width: 800px;
}

.card {
  margin: 1rem;
  padding: 1.5rem;
  text-align: left;
  color: inherit;
  text-decoration: none;
  border: 1px solid #eaeaea;
  border-radius: 10px;
  transition: color 0.15s ease, border-color 0.15s ease;
  max-width: 300px;
}

.card:hover,
.card:focus,
.card:active {
  color: #0070f3;
  border-color: #0070f3;
}

.card h2 {
  margin: 0 0 1rem 0;
  font-size: 1.5rem;
}

.card p {
  margin: 0;
  font-size: 1.25rem;
  line-height: 1.5;
}

.logo {
  height: 1em;
  margin-left: 0.5rem;
}

@media (max-width: 600px) {
  .grid {
    width: 100%;
    flex-direction: column;
  }
}

@media (prefers-color-scheme: dark) {
  .card,
  .footer {
    border-color: #222;
  }
  .code {
    background: #111;
  }
  .logo img {
    filter: invert(1);
  }
}

'''
'''--- styles/globals.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

html,
body {
    padding: 0;
    margin: 0;
    font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
        Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
}

a {
    color: inherit;
    text-decoration: none;
}

* {
    box-sizing: border-box;
}

input:-webkit-autofill,
input:-webkit-autofill:hover,
input:-webkit-autofill:focus,
textarea:-webkit-autofill,
textarea:-webkit-autofill:hover,
textarea:-webkit-autofill:focus,
select:-webkit-autofill,
select:-webkit-autofill:hover,
select:-webkit-autofill:focus {
    -webkit-text-fill-color: #9333ea;
    -webkit-box-shadow: 0 0 0px 1000px white inset;
    transition: background-color 5000s ease-in-out 0s;
}

input[type="datetime-local"]::-webkit-calendar-picker-indicator {
    filter: invert();
}

.z-\[1\] {
    z-index: 1;
}

.z-\[2\] {
    z-index: 2;
}

.z-\[3\] {
    z-index: 3;
}

.z-\[4\] {
    z-index: 4;
}

.z-\[5\] {
    z-index: 5;
}

.z-\[6\] {
    z-index: 6;
}

.z-\[7\] {
    z-index: 7;
}

.z-\[8\] {
    z-index: 8;
}

.z-\[9\] {
    z-index: 9;
}

.z-\[10\] {
    z-index: 10;
}

@media (prefers-color-scheme: dark) {
    html {
        color-scheme: dark;
    }
    body {
        color: white;
        background: black;
    }
}

'''
'''--- tailwind.config.js ---
/** @type {import('tailwindcss').Config} */
const colors = require("tailwindcss/colors");

module.exports = {
    content: [
        "./pages/**/*.{js,ts,jsx,tsx}",
        "./components/**/*.{js,ts,jsx,tsx}",
    ],
    theme: {
        colors: {
            ...colors,
            brand: colors.purple,
            error: {
                25: "#FFFBFA",
                50: "#FEF3F2",
                100: "#FEE4E2",
                200: "#FECDCA",
                300: "#FDA29B",
                400: "#F97066",
                500: "#F04438",
                600: "#D92D20",
                700: "#B42318",
                800: "#912018",
                900: "#912018",
            },
        },
    },
    plugins: [],
};

'''
'''--- tsconfig.json ---
{
    "compilerOptions": {
        "target": "es5",
        "lib": ["dom", "dom.iterable", "esnext"],
        "allowJs": true,
        "skipLibCheck": true,
        "strict": true,
        "forceConsistentCasingInFileNames": true,
        "noEmit": true,
        "esModuleInterop": true,
        "module": "esnext",
        "moduleResolution": "node",
        "resolveJsonModule": true,
        "isolatedModules": true,
        "jsx": "preserve",
        "incremental": true,
        "noImplicitAny": false
    },
    "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
    "exclude": ["node_modules"]
}

'''
'''--- types.ts ---
export interface Event {
    id: string;
    title: string;
    price: string;
    active: boolean;
    description: string;
    timestamp: string;
    eventType: string;
    venue?: string;
    hostname: string;
    thumbnail: string;
    telegram?: string;
    discord?: string;
    host: Host;
    faq: FAQ;
    question1: string;
    question2: string;
    tickets: Ticket[];
    attendees: string;
}

export interface FAQ {
    question1: string;
    answer1: string;
    question2: string;
    answer2: string;
}

export interface Host {
    name: string;
    address: string;
    email: string;
}

export interface Ticket {
    id: string;
    event: Event;
    used: Boolean;
    redeemable: Boolean;
    answer1: string;
    answer2: string;
    name: string;
    email: string;
    phone: string;
    accountId: string;
}

'''