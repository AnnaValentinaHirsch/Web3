*GitHub Repository "krz4991/dice-game"*

'''--- README.md ---
# dice-game
'''
'''--- package.json ---
{
  "name": "dice-app",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "buffer": "^6.0.3",
    "firebase": "^9.9.4",
    "moment": "^2.29.4",
    "near-api-js": "^0.45.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.3.0",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/logo.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT"
      crossorigin="anonymous"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Montserrat&display=swap"
      rel="stylesheet"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Dice Apps</title>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-u1OknCvxWvY5kfmNBILK2hRnQC3Pr17a+RTT6rIHI7NnikvbZlHgTPOOmMi466C8"
      crossorigin="anonymous"
    ></script>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.css ---
/*
    General Styles
*/

* {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  box-sizing: border-box;
}

body {
  height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  background: url(./assets/background.png);
  background-size: 100% 100%;
  background-repeat: no-repeat;
}

.recently-box{
  background-color: transparent;
  border: 2px solid white;
  color: white;
  padding: 1rem;
}

.container {
  display: grid;
  place-items: center;
  width: 450px;
  padding: 50px 1rem 40px 1rem;
  border-radius: 30px;
  background: #eeeeee;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
}

/*
  Dice Styles
*/

.dice {
  position: relative;
  margin-bottom: 60px;
  width: 100px;
  height: 100px;
  transform-style: preserve-3d;
  transition: 1s ease;
}

@keyframes rolling {
  50% {
    transform: rotateX(455deg) rotateY(455deg);
  }
}

.face {
  position: absolute;
  width: 100%;
  height: 100%;
  border-radius: 20px;
  border: 5px solid #f6f3f0;
  transform-style: preserve-3d;
  background: linear-gradient(145deg, #dddbd8, #fff);
}

.face::before {
  position: absolute;
  content: "";
  width: 100%;
  height: 100%;
  border-radius: 20px;
  background: #f6f3f0;
  transform: translateZ(-1px);
}

.face::after {
  position: absolute;
  content: "";
  top: 50%;
  left: 50%;
  width: 18px;
  height: 18px;
  border-radius: 50%;
  background: #131210;
}

.front {
  transform: translateZ(50px);
}

.back {
  transform: rotateX(180deg) translateZ(50px);
}

.top {
  transform: rotateX(90deg) translateZ(50px);
}

.bottom {
  transform: rotateX(-90deg) translateZ(50px);
}

.right {
  transform: rotateY(90deg) translateZ(50px);
}

.left {
  transform: rotateY(-90deg) translateZ(50px);
}

.card{
  width: 100%;
  align-items: center;
}

.front::after {
  width: 30px;
  height: 30px;
  background: #f63330;
  margin: -15px 0 0 -15px;
}

.back::after {
  margin: -35px 0 0 -30px;
  box-shadow: 40px 0, 0 25px, 40px 25px, 0 50px, 40px 50px;
}

.input-bet {
  padding: 0.5rem 1rem;
  border-radius: 1rem;
}

.top::after {
  margin: -30px 0 0 -30px;
  box-shadow: 40px 40px;
}

.bottom::after {
  margin: -36px 0 0 -36px;
  box-shadow: 26px 26px, 52px 52px, 52px 0, 0 52px;
}

.right::after {
  margin: -30px 0 0 -30px;
  box-shadow: 40px 0, 0 40px, 40px 40px;
}

.left::after {
  margin: -35px 0 0 -35px;
  box-shadow: 25px 25px, 50px 50px;
}

.text-white {
  color: white !important;
}

.last-play{
  position: absolute;
  bottom: 0;
  right: 0;
  margin: 1rem;
  text-align: end;
}

.card-box{
  display: flex;
  place-content: end;
  align-items: center;
}

.text-center{
  text-align: center !important;
}

.connect-wallet {
  position: absolute;
  left: 0;
  top: 0;
}

.col-6{
  padding: 0.5rem 1rem;
}

.col-4{
  padding: 0.5rem 1rem;
}

.connect-btn {
  margin: 1rem;
  cursor: pointer;
  color: white;
  background: transparent;
  padding: 6px 12px;
  border-radius: 5px;
  font: 700 16px "Montserrat";
  border: 2px solid white;
  transition: 0.4s;
}

.connect-btn:hover {
  color: rgb(0, 0, 0);
  background: #fff;
}

.roll {
  cursor: pointer;
  color: white;
  background: transparent;
  /* margin-top: 60px; */
  padding: 1rem;
  border-radius: 5px;
  font: 700 16px "Montserrat";
  border: 2px solid white;
  transition: 0.4s;
}

.btn-check:checked+.btn, .btn.active, .btn.show, .btn:first-child:active, :not(.btn-check)+.btn:active {
  color: var(--bs-btn-active-color);
  background-color: white;
  border-color: white;
}

.btn-group{
  width: 100%;
  height: 100%;
}

/* .roll:focus-visible {
  color: rgb(0, 0, 0);
  background: white;
} */

.roll2 {
  cursor: pointer;
  color: white;
  background: transparent;
  /* margin-top: 60px; */
  padding: 1rem;
  border-radius: 5px;
  font: 700 16px "Montserrat";
  border: 2px solid white;
  transition: 0.4s;
}

/* .roll2:focus-visible  {
  color: rgb(0, 0, 0);
  background: white;
} */

.lock-btn {
  cursor: pointer;
  color: white;
  background: transparent;
  /* margin-top: 60px; */
  padding: 6px 12px;
  border-radius: 5px;
  font: 700 16px "Montserrat";
  border: 2px solid white;
  transition: 0.4s;
}

.lock-btn:focus {
  color: rgb(0, 0, 0);
  background: white;
}

'''
'''--- src/App.js ---
import "./App.css";
import moment from "moment";
import { useEffect, useState } from "react";
import * as nearAPI from "near-api-js";
import { useNavigate } from "react-router-dom";
import { db } from "./components/firebaseConfig";
import {
  getDocs,
  collection,
  addDoc,
  query,
  orderBy,
  limit,
} from "firebase/firestore";

function App({ contract, currentUser, nearConfig, wallet }) {
  const [recentlyData, setRecentlyData] = useState([]);
  const [BetValue, setBetValue] = useState("");
  const [PredicitonNumber, setPredicitonNumber] = useState("0");
  const [LockBet, setLockBet] = useState(false);
  const [TryAgain, setTryAgain] = useState(false);
  const [BetResult, setBetResult] = useState(false);
  const navigate = useNavigate();
  const params = new URLSearchParams(window.location.search);
  const transactionHashes = params.get("transactionHashes") ?? undefined;

  const signIn = () => {
    wallet.requestSignIn(
      {
        contractId: nearConfig.contractName,
        methodNames: [contract.addMessage.name],
      }, //contract requesting access
      "NEAR Guest Book", //optional name
      null, //optional URL to redirect to if the sign in was successful
      null //optional URL to redirect to if the sign in was NOT successful
    );
  };

  const signOut = () => {
    wallet.signOut();
    window.location.replace(window.location.origin + window.location.pathname);
  };

  const randomDice = () => {
    const random = Math.floor(Math.random() * 10);

    if (random >= 1 && random <= 6) {
      rollDice(random);
    } else {
      randomDice();
    }
  };

  const rollDice = async (random) => {
    let valueResult = "";
    const dice = document.querySelector(".dice");
    const colRefget = collection(db, "diceRecentlyPlay");
    dice.style.animation = "rolling 4s";

    setTimeout(() => {
      switch (random) {
        case 1:
          dice.style.transform = "rotateX(0deg) rotateY(0deg)";
          valueResult = 1;
          break;

        case 6:
          dice.style.transform = "rotateX(180deg) rotateY(0deg)";
          valueResult = 6;
          break;

        case 2:
          dice.style.transform = "rotateX(-90deg) rotateY(0deg)";
          valueResult = 2;
          break;

        case 5:
          dice.style.transform = "rotateX(90deg) rotateY(0deg)";
          valueResult = 5;
          break;

        case 3:
          dice.style.transform = "rotateX(0deg) rotateY(90deg)";
          valueResult = 3;
          break;

        case 4:
          dice.style.transform = "rotateX(0deg) rotateY(-90deg)";
          valueResult = 4;
          break;

        default:
          break;
      }
      if (valueResult === parseInt(PredicitonNumber)) {
        setBetResult(false);
        window.walletConnectionDev.sendMoney(
          currentUser.accountId,
          nearAPI.utils.format.parseNearAmount(
            (Number(BetValue) * 5).toString()
          )
        );
        const addRecentlyWin = async (walletAddress, betValue, status) => {
          await addDoc(colRefget, {
            walletAddress: walletAddress,
            betValue: betValue,
            status: status,
            createdAt: new Date(),
          });
        };
        addRecentlyWin(
          currentUser.accountId,
          window.sessionStorage.getItem("bet"),
          "win"
        );
        getDataRecently();
      } else {
        setBetResult(true);
        const addRecentlyWin = async (walletAddress, betValue, status) => {
          await addDoc(colRefget, {
            walletAddress: walletAddress,
            betValue: betValue,
            status: status,
            createdAt: new Date(),
          });
        };
        addRecentlyWin(
          currentUser.accountId,
          window.sessionStorage.getItem("bet"),
          "lose"
        );
        getDataRecently();
      }
      setTryAgain(true);

      dice.style.animation = "none";
    }, 4050);
  };

  const sendNear = (e) => {
    if (currentUser) {
      window.walletConnection
        .account()
        .sendMoney(
          "zxccvn.testnet",
          nearAPI.utils.format.parseNearAmount(Number(BetValue).toString())
        );
    }
  };

  const getDataRecently = async (e) => {
    const colRefget = collection(db, "diceRecentlyPlay");
    const recordget = query(colRefget, orderBy("createdAt", "desc"), limit(10));
    getDocs(recordget).then((snap) => {
      console.log(snap.docs.map((d) => ({ id: d.id, ...d.data() })));
      setRecentlyData(snap.docs.map((d) => ({ id: d.id, ...d.data() })));
    });
  };

  function timeSince(date) {
    var seconds = Math.floor((new Date() - date) / 1000);
    // var seconds = Math.floor(((new Date().getTime()/1000) - date))

    var interval = seconds / 31536000;

    if (interval > 1) {
      return Math.floor(interval) + " years";
    }
    interval = seconds / 2592000;
    if (interval > 1) {
      return Math.floor(interval) + " months";
    }
    interval = seconds / 86400;
    if (interval > 1) {
      return Math.floor(interval) + " days";
    }
    interval = seconds / 3600;
    if (interval > 1) {
      return Math.floor(interval) + " hours";
    }
    interval = seconds / 60;
    if (interval > 1) {
      return Math.floor(interval) + " minutes";
    }
    return Math.floor(seconds) + " seconds";
  }

  useEffect(() => {
    // console.log(window.sessionStorage.getItem("bet"));
    if (window.sessionStorage.getItem("bet") !== "") {
      setBetValue(window.sessionStorage.getItem("bet"));
    }
  }, []);

  useEffect(() => {
    getDataRecently();
    window.sessionStorage.setItem("bet", BetValue);
    if (!transactionHashes) return;
    setLockBet(true);
  }, [transactionHashes, BetValue]);

  return (
    <div>
      <main>
        <div className="container" style={{ background: "#090745" }}>
          {currentUser ? (
            <div className="connect-wallet">
              <button
                className="connect-btn"
                onClick={() => {
                  signOut();
                }}
              >
                Disconnect
              </button>
              <span className="text-white">{currentUser.accountId}</span>
            </div>
          ) : (
            <div className="connect-wallet">
              <button
                className="connect-btn"
                onClick={() => {
                  signIn();
                }}
              >
                Connect Wallet
              </button>
            </div>
          )}
          <div className="dice">
            <div className="face front"></div>
            <div className="face back"></div>
            <div className="face top"></div>
            <div className="face bottom"></div>
            <div className="face right"></div>
            <div className="face left"></div>
          </div>
          {currentUser ? (
            <>
              {!TryAgain ? (
                <>
                  {LockBet ? (
                    <div className="text-center">
                      <h4 className="text-white">Your bet: {BetValue} Ⓝ</h4>
                      <br />
                      <button
                        className="roll"
                        onClick={() => {
                          randomDice();
                        }}
                      >
                        Roll Dice
                      </button>
                    </div>
                  ) : (
                    <>
                      <br />
                      <h6 className="text-white">I CHOOSE</h6>
                      <form style={{ textAlign: "-webkit-center" }}>
                        <div className="row" style={{ width: "100%" }}>
                          <div className="col-4">
                            <div className="btn-group">
                              <input
                                type="radio"
                                className="btn-check"
                                name="options"
                                id="option11"
                                autocomplete="off"
                                onInput={(e) => setPredicitonNumber("1")}
                              />
                              <label
                                className="btn card text-center roll"
                                for="option11"
                                style={{ justifyContent: "center" }}
                              >
                                1
                              </label>
                            </div>
                          </div>
                          <div className="col-4">
                            <div className="btn-group">
                              <input
                                type="radio"
                                className="btn-check"
                                name="options"
                                id="option12"
                                autocomplete="off"
                                onInput={(e) => setPredicitonNumber("2")}
                              />
                              <label
                                className="btn card text-center roll"
                                for="option12"
                                style={{ justifyContent: "center" }}
                              >
                                2
                              </label>
                            </div>
                          </div>
                          <div className="col-4">
                            <div className="btn-group">
                              <input
                                type="radio"
                                className="btn-check"
                                name="options"
                                id="option13"
                                autocomplete="off"
                                onInput={(e) => setPredicitonNumber("3")}
                              />
                              <label
                                className="btn card text-center roll"
                                for="option13"
                                style={{ justifyContent: "center" }}
                              >
                                3
                              </label>
                            </div>
                          </div>
                          <div className="col-4">
                            <div className="btn-group">
                              <input
                                type="radio"
                                className="btn-check"
                                name="options"
                                id="option14"
                                autocomplete="off"
                                onInput={(e) => setPredicitonNumber("4")}
                              />
                              <label
                                className="btn card text-center roll"
                                for="option14"
                                style={{ justifyContent: "center" }}
                              >
                                4
                              </label>
                            </div>
                          </div>
                          <div className="col-4">
                            <div className="btn-group">
                              <input
                                type="radio"
                                className="btn-check"
                                name="options"
                                id="option15"
                                autocomplete="off"
                                onInput={(e) => setPredicitonNumber("5")}
                              />
                              <label
                                className="btn card text-center roll"
                                for="option15"
                                style={{ justifyContent: "center" }}
                              >
                                5
                              </label>
                            </div>
                          </div>
                          <div className="col-4">
                            <div className="btn-group">
                              <input
                                type="radio"
                                className="btn-check"
                                name="options"
                                id="option16"
                                autocomplete="off"
                                onInput={(e) => setPredicitonNumber("6")}
                              />
                              <label
                                className="btn card text-center roll"
                                for="option16"
                                style={{ justifyContent: "center" }}
                              >
                                6
                              </label>
                            </div>
                          </div>
                        </div>
                      </form>
                      <br />
                      <form style={{ textAlign: "-webkit-center" }}>
                        <h6 className="text-white">FOR</h6>
                        <div className="row" style={{ width: "100%" }}>
                          <div className="col-4">
                            <div className="btn-group">
                              <input
                                type="radio"
                                className="btn-check"
                                name="options"
                                id="option1"
                                autocomplete="off"
                                onInput={(e) => setBetValue("1")}
                              />
                              <label
                                className="btn card text-center roll2"
                                for="option1"
                                style={{ justifyContent: "center" }}
                              >
                                1 Ⓝ
                              </label>
                            </div>
                          </div>
                          <div className="col-4">
                            <div className="btn-group">
                              <input
                                type="radio"
                                className="btn-check"
                                name="options"
                                id="option2"
                                autocomplete="off"
                                onInput={(e) => setBetValue("3")}
                              />
                              <label
                                className="btn card text-center roll2"
                                for="option2"
                                style={{ justifyContent: "center" }}
                              >
                                3 Ⓝ
                              </label>
                            </div>
                          </div>
                          <div className="col-4">
                            <div className="btn-group">
                              <input
                                type="radio"
                                className="btn-check"
                                name="options"
                                id="option3"
                                autocomplete="off"
                                onInput={(e) => setBetValue("5")}
                              />
                              <label
                                className="btn card text-center roll2"
                                for="option3"
                                style={{ justifyContent: "center" }}
                              >
                                5 Ⓝ
                              </label>
                            </div>
                          </div>
                          <div className="col-6">
                            <div className="btn-group">
                              <input
                                type="radio"
                                className="btn-check"
                                name="options"
                                id="option4"
                                autocomplete="off"
                                onInput={(e) => setBetValue("7")}
                              />
                              <label
                                className="btn card text-center roll2"
                                for="option4"
                                style={{ justifyContent: "center" }}
                              >
                                7 Ⓝ
                              </label>
                            </div>
                          </div>
                          <div className="col-6">
                            <div className="btn-group">
                              <input
                                type="radio"
                                className="btn-check"
                                name="options"
                                id="option5"
                                autocomplete="off"
                                onInput={(e) => setBetValue("10")}
                              />
                              <label
                                className="btn card text-center roll2"
                                for="option5"
                                style={{ justifyContent: "center" }}
                              >
                                10 Ⓝ
                              </label>
                            </div>
                          </div>
                        </div>
                      </form>
                      <br />
                      <span className="text-white">
                        I CHOOSE <b>{PredicitonNumber}</b> FOR{" "}
                        <b>{BetValue || "0"} Ⓝ</b>
                      </span>
                      <br />
                      <button
                        className="lock-btn"
                        onClick={() => {
                          if (BetValue !== "" && PredicitonNumber !== "") {
                            sendNear();
                          } else {
                            alert("Please insert your bet & predicition first");
                          }
                        }}
                      >
                        Lock Bet
                      </button>
                    </>
                  )}
                </>
              ) : (
                ""
              )}
              {TryAgain ? (
                <>
                  {!BetResult ? (
                    <h2 className="text-white">Congratulation!</h2>
                  ) : (
                    <h2 className="text-white">You Lose!</h2>
                  )}
                  <br />
                  <button
                    className="roll"
                    onClick={() => {
                      setBetValue("");
                      setLockBet(false);
                      setTryAgain(false);
                      navigate("/");
                    }}
                  >
                    Try Again
                  </button>
                </>
              ) : (
                ""
              )}
            </>
          ) : (
            <div className="text-white">Connect your wallet first</div>
          )}
        </div>
        <div className="last-play">
          <h5 className="text-white">RECENT PLAYS</h5>
          {/* <img style={{ width: "45vh" }} src="latest.png" /> */}
          <div className="recently-box">
            {recentlyData.map((data, index) => {
              return (
                <div key={index} className="card-box">
                  <h6 className="mx-1 mb-2">
                    <b>{data.walletAddress}</b>
                  </h6>
                  <h6 className="mx-1 mb-2">bet for</h6>
                  <h6 className="mx-1 mb-2">
                    {data.status === "lose"
                      ? data.betValue + " Ⓝ and got rugged"
                      : data.betValue + " Ⓝ" + " and doubled 5 times"}
                  </h6>
                  <code className="ms-4 mb-2">
                    {moment(data.createdAt.toDate()).fromNow()}
                  </code>
                </div>
              );
            })}
          </div>
        </div>
      </main>
    </div>
  );
}

export default App;

'''
'''--- src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- src/components/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'guest-book.testnet';

function getConfig(env) {
  switch(env) {
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org'
      };
    // This is an example app so production is set to testnet.
    // You can move production to mainnet if that is applicable.
    case 'production':
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org'
      };
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org'
      };
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME
      };
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);
  }
}

module.exports = getConfig;

'''
'''--- src/components/firebaseConfig.js ---
import { initializeApp } from "firebase/app";
import { getFirestore } from "@firebase/firestore";

const firebaseConfig = {
  apiKey: process.env.REACT_APP_KEY_FIREBASE,
  authDomain: "dice-game-87899.firebaseapp.com",
  projectId: "dice-game-87899",
  storageBucket: "dice-game-87899.appspot.com",
  messagingSenderId: "924510562122",
  appId: "1:924510562122:web:e5fea174cdda178bb343b3",
  measurementId: "G-80CD5V6XFV"
};

const app = initializeApp(firebaseConfig);

export const db = getFirestore(app);

'''
'''--- src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- src/index.js ---
import React from "react";
import ReactDOM from "react-dom/client";
import "./index.css";
import App from "./App";
import * as nearAPI from "near-api-js";
import getConfig from "./components/config.js";
import reportWebVitals from "./reportWebVitals";
import { Buffer } from "buffer";
import { BrowserRouter, Routes, Route } from "react-router-dom";

// @ts-ignore
window.Buffer = Buffer;
// Initializing contract
async function initContract() {
  const { connect, keyStores, KeyPair, WalletConnection } = nearAPI;
  const myKeyStore = new keyStores.InMemoryKeyStore();
  const PRIVATE_KEY = process.env.REACT_APP_PV_KEY;
  // creates a public / private key pair using the provided private key
  const keyPair2 = KeyPair.fromString(PRIVATE_KEY);
  // adds the keyPair you created to keyStore
  await myKeyStore.setKey("testnet", process.env.REACT_APP_PV_NAME, keyPair2);
  const connectionConfig2 = {
    networkId: "testnet",
    keyStore: myKeyStore, // first create a key store
    nodeUrl: "https://rpc.testnet.near.org",
    walletUrl: "https://wallet.testnet.near.org",
    helperUrl: "https://helper.testnet.near.org",
    explorerUrl: "https://explorer.testnet.near.org",
  };
  const nearConnectionDev = await connect(connectionConfig2);

  // returns all access keys associated with an account
  const account = await nearConnectionDev.account("testdice.testnet");
  await account.getAccessKeys();

  window.walletConnectionDev = account;
  // ============================================

  // get network configuration values from config.js
  // based on the network ID we pass to getConfig()
  const nearConfig = getConfig(process.env.NEAR_ENV || "testnet");

  // create a keyStore for signing transactions using the user's key
  // which is located in the browser local storage after user logs in
  const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();

  // Initializing connection to the NEAR testnet
  const near = await nearAPI.connect({ keyStore, ...nearConfig });
  // Initialize wallet connection
  const walletConnection = new nearAPI.WalletConnection(near);

  window.walletConnection = walletConnection;
  // Load in user's account data
  let currentUser;
  if (walletConnection.getAccountId()) {
    currentUser = {
      // Gets the accountId as a string
      accountId: walletConnection.getAccountId(),
      // Gets the user's token balance
      balance: (await walletConnection.account().state()).amount,
    };
  }

  // Initializing our contract APIs by contract name and configuration
  const contract = await new nearAPI.Contract(
    // User's accountId as a string
    walletConnection.account(),
    // accountId of the contract we will be loading
    // NOTE: All contracts on NEAR are deployed to an account and
    // accounts can only have one contract deployed to them.
    nearConfig.contractName,
    {
      // View methods are read-only – they don't modify the state, but usually return some value
      viewMethods: ["getMessages"],
      // Change methods can modify the state, but you don't receive the returned value when called
      changeMethods: ["addMessage"],
      // Sender is the account ID to initialize transactions.
      // getAccountId() will return empty string if user is still unauthorized
      sender: walletConnection.getAccountId(),
    }
  );

  return { contract, currentUser, nearConfig, walletConnection };
}

window.nearInitPromise = initContract().then(
  ({ contract, currentUser, nearConfig, walletConnection }) => {
    const root = ReactDOM.createRoot(document.getElementById("root"));
    root.render(
      <React.StrictMode>
        <BrowserRouter>
          <Routes>
            <Route
              path="/"
              element={
                <App
                  contract={contract}
                  currentUser={currentUser}
                  nearConfig={nearConfig}
                  wallet={walletConnection}
                />
              }
            >
              ,
            </Route>
          </Routes>
        </BrowserRouter>
      </React.StrictMode>
    );
  }
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

'''
'''--- src/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''