*GitHub Repository "jumbo-exchange/interface"*

'''--- .eslintrc.js ---
module.exports = {
  env: {
    browser: true,
    es2021: true,
  },
  extends: [
    'plugin:react/recommended',
    'airbnb',
    // 'eslint:recommended',
    // 'plugin:@typescript-eslint/eslint-recommended',
    // 'plugin:@typescript-eslint/recommended',
  ],
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaFeatures: {
      jsx: true,
    },
    ecmaVersion: 12,
    sourceType: 'module',
  },
  plugins: ['react', 'react-hooks', '@typescript-eslint'],
  rules: {
    'react-hooks/rules-of-hooks': 'error',
    'react-hooks/exhaustive-deps': 'warn',
    'no-use-before-define': 'off',
    '@typescript-eslint/no-use-before-define': ['error'],
    'import/extensions': [
      'error',
      'ignorePackages',
      {
        ts: 'never',
        tsx: 'never',
      },
    ],
    'react/jsx-filename-extension': ['warn', { extensions: ['.tsx'] }],
    'no-shadow': 'off',
    '@typescript-eslint/no-shadow': ['error'],
    'no-unused-vars': 'off',
    '@typescript-eslint/no-unused-vars': ['warn'],
    'no-undef': 'off',
    'react/jsx-one-expression-per-line': 'off',
    'react/require-default-props': 'off',
    'react/prop-types': 'off',
    'react/jsx-uses-react': 'off',
    'react/react-in-jsx-scope': 'off',
  },
  settings: {
    'import/resolver': {
      typescript: {},
    },
  },
};

'''
'''--- .gitlab-ci.yml ---
stages:
  - build
  - deploy

docker-build-prod:
  environment:
    name: production
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -f Dockerfile.prod --pull -t "$CI_REGISTRY_IMAGE:prod" .
    - docker push "$CI_REGISTRY_IMAGE:prod"
  only:
      - main

deploy-prod:
  environment:
    name: production
  image: alpine:3
  stage: deploy
  script:
    - wget --post-data '' "$DEPLOY_TRIGGER_URL_STAGE"
  when: manual
  only:
    - main

docker-build-stage:
  environment:
    name: staging
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -f Dockerfile.stage --pull -t "$CI_REGISTRY_IMAGE:stage" .
    - docker push "$CI_REGISTRY_IMAGE:stage"
  only:
      - stage

deploy-stage:
  environment:
    name: staging
  image: alpine:3
  stage: deploy
  script:
    - wget --post-data '' "$DEPLOY_TRIGGER_URL_STAGE"
  only:
    - stage

'''
'''--- README.md ---
# Jumbo

```
    export NEAR_ENV=testnet
    export TOKEN_1=ref.fakes.testnet
    export TOKEN_2=token.solniechniy.testnet
    export CONTRACT_ID=ref-contract.solniechniy.testnet
    export OWNER_ID=solniechniy.testnet
```

## Creating LP 

Creating simple pool
```
    near call $CONTRACT_ID add_simple_pool '{"tokens": ["'$TOKEN_1'","'$TOKEN_2'"], "fee": 25}' --accountId=$OWNER_ID --depositYocto=3480000000000000000000
    export POOL=(number from command above)
```

Creating stable pool
```
  near call $CONTRACT_ID add_simple_pool '{"tokens": ["'$TOKEN_1'","'$TOKEN_2'"], "decimals": [18, 18], "fee": 25, "amp_factor": 1}' --accountId=$OWNER_ID --depositYocto=4000000000000000000000
    export POOL=(number from command above)
```

Tokens storage deposit

```
    near call $TOKEN_1 storage_deposit '{"account_id": "'$CONTRACT_ID'","registration_only": true}' --accountId=$CONTRACT_ID --deposit 0.00125 
    near call $TOKEN_2 storage_deposit '{"account_id": "'$CONTRACT_ID'","registration_only": true}' --accountId=$CONTRACT_ID --deposit 0.00125 
```

Token registration 

```
  near call $CONTRACT_ID register_tokens '{"token_ids": ["'$TOKEN_2'","'$TOKEN_1'"]}' --accountId=$OWNER_ID --depositYocto=1
```

Transfer tokens 

```
near call $TOKEN_1 ft_transfer_call '{"receiver_id": "'$CONTRACT_ID'", "amount": "10000000000000000000", "msg": ""}' --accountId=$OWNER_ID --depositYocto=1 --gas=200000000000000
near call $TOKEN_2 ft_transfer_call '{"receiver_id": "'$CONTRACT_ID'", "amount": "10000000000000000000", "msg": ""}' --accountId=$OWNER_ID --depositYocto=1 --gas=200000000000000
```

Add liquidity 

```
near call $CONTRACT_ID add_liquidity '{"pool_id": '$POOL', "amounts":["10000000000000000000","10000000000000000000"]}' --accountId $OWNER_ID --depositYocto=840000000000000000000
```

Add stable liquidity
```
near call $CONTRACT_ID add_stable_liquidity '{"pool_id": '$POOL', "amounts":["10000000000000000000","10000000000000000000"], "min_shares": "0"}' --accountId $OWNER_ID --depositYocto=840000000000000000000  --gas=200000000000000
```

Internal SWAP~SWAP
```
near call $CONTRACT_ID swap '{"actions": [{"pool_id": '$POOL',"token_in": "'$TOKEN_1'","amount_in": "1","token_out": "'$TOKEN_2'","min_amount_out": "0"}]}' --accountId $OWNER_ID
```

Remove liquidity
```
near call $CONTRACT_ID remove_liquidity '{"pool_id": $POOL, "shares": "1000000000000000000000000", "min_amounts": ["1", "1"]}' --accountId $OWNER_ID --depositYocto=840000000000000000000
```

Withdraw Funds
```
near call $CONTRACT_ID withdraw "{\"token_id\": \"$TOKEN1\", \"amount\": \"900000000000\"}" --accountId $OWNER_ID --depositYocto=840000000000000000000
```

### FARMING 
```
near call $FARMING_CONTRACT create_simple_farm '{"terms": {"seed_id": "'$EX'@0", "reward_token": "'$TOKEN_1'", "start_at": 0, "reward_per_session": "100", "session_interval": 120}}' --accountId $OWNER_ID --deposit 0.01
```
```
near call $TOKEN_1 storage_deposit '{"account_id": "'$FARM'"}' --accountId $OWNER --deposit 0.00125
```

```
near call $REWARD_1 ft_transfer_call '{"receiver_id": "'$FARM'", "amount": "100000000", "msg": "jumbo-testnet-v3.solniechniy.testnet@0#0"}' --accountId $OWNER --depositYocto 1 --gas 100000000000000
```

## Errors
E10: account not registered
```
near call $CONTRACT_ID storage_deposit '{"account_id": "'$OWNER_ID'", "registration_only":true}' --accountId=$OWNER_ID --deposit=0.0125
```

E11: insufficient $NEAR storage deposit
```
near call $CONTRACT_ID storage_deposit '{"account_id": "'$OWNER_ID'", "registration_only":false}' --accountId=$OWNER_ID --deposit=0.125
```

## All commands for checking

1. [Deposit balances](https://web.nearapi.org/?q=woPCqGNvbnRyYWN0w5kgcmVmLcSCxITEhsSILnNvbG5pZWNoxJh5LnRlc3RuZXTCpm3EpWhvZMKsZ8SlX2RlcG9zaXRzwqZwYcSGbXPCgcKqxIfEgnXEhF9pZMKwcHJvdmVya2HEn8ShxKPEpQ)
2. [Get pool's information](https://web.nearapi.org/?q=woPCqGNvbnRyYWN0w5kgcmVmLcSCxITEhsSILnNvbG5pZWNoxJh5LnRlc3RuZXTCpm3EpWhvZMKoZ8SlX3BvxJbCpnBhxIZtc8KBwqfEscSWX2lkAA)
3. [Get number of liquidity shares in the pool](https://web.nearapi.org/?q=woPCqGNvbnRyYWN0w5kgcmVmLcSCxITEhsSILnNvbG5pZWNoxJh5LnRlc3RuZXTCpm3EpWhvZMKvZ8SlX3BvxJZfc2hhxIxzwqZwxLdhbXPCgsKnxLHEs2lkAMKqxIfEgnXEhF_FhMKwcHJvdmVya2HEn8ShxKPEpQ)

'''
'''--- docker-compose.stage.yml ---
version: '3.8'

services:
  site:
    image: 'registry.gitlab.com/hapi_p/jumbo:stage'
    restart: always
    ports:
      - '3087:80'
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.hostname == staging]

'''
'''--- package.json ---
{
  "name": "jumbo",
  "version": "0.1.0",
  "private": false,
  "dependencies": {
    "@sentry/react": "^6.19.2",
    "@sentry/tracing": "^6.19.2",
    "big.js": "^6.1.1",
    "bn.js": "^5.2.0",
    "borsh": "^0.6.0",
    "i18n-js": "^3.8.0",
    "i18next": "^21.6.14",
    "moment": "^2.29.1",
    "moment-timezone": "^0.5.34",
    "near-api-js": "^0.44.2",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-i18next": "^11.15.6",
    "react-router-dom": "^6.0.2",
    "react-scripts": "4.0.3",
    "react-toastify": "^8.1.1",
    "styled-components": "^5.3.1",
    "typescript": "^4.1.2",
    "web-vitals": "^1.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "docker:build:prod": "docker build -f Dockerfile.prod -t $REGISTRY .",
    "docker:push:prod": "docker push $REGISTRY",
    "docker:build:stage": "docker build -f Dockerfile.stage -t $REGISTRY .",
    "docker:push:stage": "docker push $REGISTRY"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@types/big.js": "^6.1.2",
    "@types/bn.js": "^5.1.0",
    "@types/i18n-js": "^3.8.0",
    "@types/jest": "^26.0.15",
    "@types/node": "^12.0.0",
    "@types/react": "^17.0.0",
    "@types/react-dom": "^17.0.0",
    "@types/react-router-dom": "^5.3.2",
    "@types/styled-components": "^5.1.15",
    "@typescript-eslint/eslint-plugin": "4.33.0",
    "@typescript-eslint/parser": "4.33.0",
    "eslint": "7.32.0",
    "eslint-config-airbnb": "18.2.1",
    "eslint-config-prettier": "8.3.0",
    "eslint-import-resolver-typescript": "^2.5.0",
    "eslint-plugin-import": "2.24.2",
    "eslint-plugin-jsx-a11y": "6.4.1",
    "eslint-plugin-prettier": "4.0.0",
    "eslint-plugin-react": "7.26.1",
    "eslint-plugin-react-hooks": "^4.3.0",
    "husky": "^7.0.4",
    "lint-staged": "^11.2.6",
    "prettier": "^2.4.1"
  },
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "lint-staged": {
    "*.{js,ts,tsx}": [
      "eslint --quiet --fix"
    ],
    "*.{json,md,html}": [
      "prettier --write"
    ]
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/logo.svg" />
    <meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no">
    <meta name="theme-color" content="#151922" />
    <meta name="Jumbo" content="Jumbo" />
    <meta name="description" content="The most UI/UX Friendly AMM built on Near" />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo.svg" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Rubik:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <title>Jumbo</title>
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-GEECZCS9QD"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'G-GEECZCS9QD');
    </script>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

'''
'''--- public/logo.svg ---
<svg width="400" height="400" viewBox="0 0 400 400" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_153:940)">
<rect width="400" height="400" rx="200" fill="#FE2C55"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M230.099 113.11C249 132.098 249 162.595 249 223.589V296.778C249 305.737 241.737 313 232.778 313C223.818 313 216.556 305.737 216.556 296.778V264.982C216.556 256.023 209.293 248.76 200.333 248.76C191.374 248.76 184.111 256.023 184.111 264.982V296.778C184.111 305.737 176.767 313 167.807 313C158.938 313 151.667 305.81 151.667 296.94C151.667 288.07 144.476 280.88 135.607 280.88H135.282C126.413 280.88 119.222 288.07 119.222 296.94C119.222 305.81 112.032 313 103.162 313H102.838C93.9681 313 86.7778 305.81 86.7778 296.94C86.7778 288.07 79.5875 280.88 70.7178 280.88L70.3933 280.88C61.5236 280.88 54.3333 288.07 54.3333 296.94C54.3333 305.81 47.143 313 38.2733 313H37.9489C29.0792 313 21.8889 305.81 21.8889 296.94C21.8889 288.07 14.6986 280.88 5.82888 280.88H5.50443C-3.36526 280.88 -10.5556 288.07 -10.5556 296.94C-10.5556 305.81 -17.8266 313 -26.6963 313C-35.6555 313 -43 305.737 -43 296.778V223.589C-43 162.595 -43 132.098 -24.0993 113.111C-24.0295 113.04 -23.9596 112.971 -23.8895 112.901C-4.90214 94 25.5949 94 86.5889 94H119.411C180.405 94 210.902 94 229.889 112.901C229.96 112.971 230.029 113.04 230.099 113.11ZM200.333 216.964C209.293 216.964 216.555 209.701 216.555 200.742C216.555 191.783 209.293 184.52 200.333 184.52C191.374 184.52 184.111 191.783 184.111 200.742C184.111 209.701 191.374 216.964 200.333 216.964Z" fill="white"/>
</g>
<defs>
<clipPath id="clip0_153:940">
<rect width="400" height="400" rx="200" fill="white"/>
</clipPath>
</defs>
</svg>

'''
'''--- public/manifest.json ---
{
  "short_name": "Jumbo",
  "name": "Jumbo",
  "icons": [
    {
      "src": "logo.svg",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
User-agent: *
Disallow:

'''
'''--- src/assets/images-app/claim-arrow.svg ---
<svg width="10" height="14" viewBox="0 0 10 14" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M5.75 11.1893L8.46967 8.46967C8.76256 8.17678 9.23744 8.17678 9.53033 8.46967C9.82322 8.76256 9.82322 9.23744 9.53033 9.53033L5.53033 13.5303C5.23744 13.8232 4.76256 13.8232 4.46967 13.5303L0.46967 9.53033C0.176777 9.23744 0.176777 8.76256 0.46967 8.46967C0.762563 8.17678 1.23744 8.17678 1.53033 8.46967L4.25 11.1893L4.25 1.5C4.25 1.08579 4.58579 0.75 5 0.75C5.41421 0.75 5.75 1.08579 5.75 1.5L5.75 11.1893Z" fill="white"/>
</svg>

'''
'''--- src/assets/images-app/clear-search.svg ---
<svg width="24" height="24" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M5.46943 5.46972C5.76232 5.17683 6.23719 5.17683 6.53009 5.46972L8.99976 7.9394L11.4694 5.46973C11.7623 5.17684 12.2372 5.17684 12.5301 5.46973C12.823 5.76262 12.823 6.2375 12.5301 6.53039L10.0604 9.00006L12.5301 11.4697C12.823 11.7626 12.823 12.2375 12.5301 12.5304C12.2372 12.8233 11.7623 12.8233 11.4694 12.5304L8.99976 10.0607L6.53009 12.5304C6.2372 12.8233 5.76233 12.8233 5.46943 12.5304C5.17654 12.2375 5.17654 11.7626 5.46943 11.4697L7.9391 9.00006L5.46943 6.53038C5.17653 6.23749 5.17653 5.76262 5.46943 5.46972Z" fill="#8991A3"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M4.31649 0.768819C7.40404 0.42374 10.5954 0.42374 13.683 0.768819C15.5094 0.972944 16.9843 2.41159 17.1991 4.24855C17.5683 7.40547 17.5683 10.5947 17.1991 13.7516C16.9843 15.5885 15.5094 17.0272 13.683 17.2313C10.5954 17.5764 7.40404 17.5764 4.31649 17.2313C2.49011 17.0272 1.01521 15.5885 0.80036 13.7516C0.43113 10.5947 0.43113 7.40547 0.80036 4.24855C1.01521 2.41159 2.49011 0.972944 4.31649 0.768819ZM13.5164 2.25954C10.5396 1.92683 7.45992 1.92683 4.4831 2.25954C3.33867 2.38744 2.42262 3.29069 2.29021 4.4228C1.93451 7.46395 1.93451 10.5362 2.29021 13.5773C2.42262 14.7094 3.33867 15.6127 4.4831 15.7406C7.45993 16.0733 10.5396 16.0733 13.5164 15.7406C14.6608 15.6127 15.5769 14.7094 15.7093 13.5773C16.065 10.5362 16.065 7.46395 15.7093 4.4228C15.5769 3.29069 14.6608 2.38744 13.5164 2.25954Z" fill="#8991A3"/>
</svg>

'''
'''--- src/assets/images-app/close.svg ---
<svg width="16" height="17" viewBox="0 0 16 17" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M1.5188 15.1482L14.4824 2.18457" stroke="#8991A3" stroke-width="2.75" stroke-linecap="round"/>
<path d="M1.5188 2.18481L14.4824 15.1484" stroke="#8991A3" stroke-width="2.75" stroke-linecap="round"/>
</svg>

'''
'''--- src/assets/images-app/defaultToken.svg ---
<svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0 24C0 12.6863 0 7.02944 3.51472 3.51472C7.02944 0 12.6863 0 24 0C35.3137 0 40.9706 0 44.4853 3.51472C48 7.02944 48 12.6863 48 24C48 35.3137 48 40.9706 44.4853 44.4853C40.9706 48 35.3137 48 24 48C12.6863 48 7.02944 48 3.51472 44.4853C0 40.9706 0 35.3137 0 24Z" fill="#8991A3"/>
<path d="M27 19.5C27 18.2574 28.0074 17.25 29.25 17.25C30.4926 17.25 31.5 18.2574 31.5 19.5C31.5 20.7426 30.4926 21.75 29.25 21.75C28.0074 21.75 27 20.7426 27 19.5Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M16.9013 12.9878C21.6249 12.5772 26.3752 12.5772 31.0987 12.9878L33.3641 13.1848C35.5317 13.3732 37.2877 15.0226 37.6112 17.1742C38.2917 21.6993 38.2917 26.3007 37.6112 30.8258C37.2877 32.9773 35.5317 34.6268 33.3641 34.8152L31.0987 35.0122C26.3752 35.4228 21.6249 35.4228 16.9013 35.0122L14.636 34.8152C12.4683 34.6268 10.7123 32.9773 10.3888 30.8258C9.70833 26.3007 9.70833 21.6993 10.3888 17.1742C10.7123 15.0226 12.4683 13.3732 14.636 13.1848L16.9013 12.9878ZM30.9039 15.2294C26.31 14.83 21.6901 14.83 17.0962 15.2294L14.8308 15.4263C13.6993 15.5247 12.7827 16.3857 12.6138 17.5088C12.2275 20.0777 12.0718 22.6725 12.1467 25.2623L17.9545 19.4545C18.1736 19.2354 18.4733 19.1164 18.783 19.1255C19.0927 19.1346 19.385 19.271 19.5908 19.5026L25.098 25.6982L28.8942 24.4327C29.3188 24.2912 29.7868 24.4148 30.0862 24.7474L35.3649 30.6126C35.373 30.5725 35.3801 30.532 35.3863 30.4912C36.0334 26.1879 36.0334 21.8121 35.3863 17.5088C35.2174 16.3857 34.3007 15.5247 33.1692 15.4263L30.9039 15.2294ZM33.9303 32.382L28.9067 26.8003L25.1058 28.0673C24.6788 28.2096 24.2081 28.0838 23.9092 27.7474L18.7018 21.8892L12.3363 28.2547C12.4095 29.0019 12.502 29.7476 12.6138 30.4912C12.7827 31.6143 13.6993 32.4753 14.8308 32.5737L17.0962 32.7706C21.6901 33.17 26.31 33.17 30.9039 32.7706L33.1692 32.5737C33.4373 32.5504 33.6934 32.4843 33.9303 32.382Z" fill="white"/>
</svg>

'''
'''--- src/assets/images-app/exchange.svg ---
<svg width="19" height="16" viewBox="0 0 19 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M5.5 13.4393L8.21967 10.7197C8.51256 10.4268 8.98744 10.4268 9.28033 10.7197C9.57322 11.0126 9.57322 11.4874 9.28033 11.7803L5.28033 15.7803C4.98744 16.0732 4.51256 16.0732 4.21967 15.7803L0.21967 11.7803C-0.0732233 11.4874 -0.0732233 11.0126 0.21967 10.7197C0.512563 10.4268 0.987437 10.4268 1.28033 10.7197L4 13.4393L4 3.75C4 3.33579 4.33578 3 4.75 3C5.16421 3 5.5 3.33579 5.5 3.75L5.5 13.4393Z" fill="#8991A3"/>
<path d="M13.498 2.56066L10.7784 5.28033C10.4855 5.57323 10.0106 5.57323 9.71772 5.28033C9.42483 4.98744 9.42483 4.51257 9.71772 4.21967L13.7177 0.219674C14.0106 -0.0732197 14.4855 -0.0732197 14.7784 0.219674L18.7784 4.21967C19.0713 4.51257 19.0713 4.98744 18.7784 5.28033C18.4855 5.57323 18.0106 5.57323 17.7177 5.28033L14.998 2.56066L14.998 12.25C14.998 12.6642 14.6623 13 14.248 13C13.8338 13 13.498 12.6642 13.498 12.25L13.498 2.56066Z" fill="#8991A3"/>
</svg>

'''
'''--- src/assets/images-app/icon-add.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M10.125 1.5C10.125 0.87868 9.62132 0.375 9 0.375C8.37868 0.375 7.875 0.87868 7.875 1.5V7.875H1.5C0.87868 7.875 0.375 8.37868 0.375 9C0.375 9.62132 0.87868 10.125 1.5 10.125H7.875V16.5C7.875 17.1213 8.37868 17.625 9 17.625C9.62132 17.625 10.125 17.1213 10.125 16.5V10.125H16.5C17.1213 10.125 17.625 9.62132 17.625 9C17.625 8.37868 17.1213 7.875 16.5 7.875H10.125V1.5Z" fill="white"/>
</svg>

'''
'''--- src/assets/images-app/icon-arrow-down.svg ---
<svg width="16" height="9" viewBox="0 0 16 9" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M14.7955 0.454505C15.2348 0.893845 15.2348 1.60616 14.7955 2.0455L8.7955 8.0455C8.35616 8.48484 7.64385 8.48484 7.20451 8.0455L1.2045 2.0455C0.765165 1.60616 0.765165 0.893845 1.2045 0.454506C1.64384 0.0151655 2.35616 0.0151655 2.7955 0.454505L8 5.65901L13.2045 0.454505C13.6438 0.015165 14.3562 0.015165 14.7955 0.454505Z" fill="white"/>
</svg>

'''
'''--- src/assets/images-app/icon-back.svg ---
<svg width="19.5" height="14.5" viewBox="0 0 21 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.5455 2.7955C8.98484 2.35616 8.98484 1.64384 8.5455 1.2045C8.10616 0.765165 7.39385 0.765165 6.95451 1.2045L0.954505 7.20451C0.734835 7.42418 0.625 7.71209 0.625 8C0.625 8.15254 0.655359 8.29799 0.710364 8.43063C0.765263 8.56332 0.846644 8.68764 0.954505 8.7955L6.95451 14.7955C7.39385 15.2348 8.10616 15.2348 8.5455 14.7955C8.98484 14.3562 8.98484 13.6438 8.5455 13.2045L4.46599 9.125H19C19.6213 9.125 20.125 8.62132 20.125 8C20.125 7.37868 19.6213 6.875 19 6.875H4.46599L8.5455 2.7955Z" fill="white"/>
</svg>

'''
'''--- src/assets/images-app/info-circle.svg ---
<svg width="12" height="13" viewBox="0 0 12 13" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M5.99935 5.66699C6.27549 5.66699 6.49935 5.89085 6.49935 6.16699V9.50033C6.49935 9.77647 6.27549 10.0003 5.99935 10.0003C5.72321 10.0003 5.49935 9.77647 5.49935 9.50033V6.16699C5.49935 5.89085 5.72321 5.66699 5.99935 5.66699Z" fill="white"/>
<path d="M5.99935 4.50033C6.36754 4.50033 6.66602 4.20185 6.66602 3.83366C6.66602 3.46547 6.36754 3.16699 5.99935 3.16699C5.63116 3.16699 5.33268 3.46547 5.33268 3.83366C5.33268 4.20185 5.63116 4.50033 5.99935 4.50033Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M0.166016 6.50033C0.166016 3.27866 2.77769 0.666992 5.99935 0.666992C9.22101 0.666992 11.8327 3.27866 11.8327 6.50033C11.8327 9.72199 9.22101 12.3337 5.99935 12.3337C2.77769 12.3337 0.166016 9.72199 0.166016 6.50033ZM5.99935 1.66699C3.32997 1.66699 1.16602 3.83095 1.16602 6.50033C1.16602 9.1697 3.32997 11.3337 5.99935 11.3337C8.66873 11.3337 10.8327 9.1697 10.8327 6.50033C10.8327 3.83095 8.66873 1.66699 5.99935 1.66699Z" fill="white"/>
</svg>

'''
'''--- src/assets/images-app/info.svg ---
<svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M5.99951 5.16655C6.27565 5.16655 6.49951 5.39041 6.49951 5.66655V8.99988C6.49951 9.27602 6.27565 9.49988 5.99951 9.49988C5.72337 9.49988 5.49951 9.27602 5.49951 8.99988L5.49951 5.66655C5.49951 5.39041 5.72337 5.16655 5.99951 5.16655Z" fill="#8991A3"/>
<path d="M5.99951 3.99988C6.3677 3.99988 6.66618 3.70141 6.66618 3.33322C6.66618 2.96503 6.3677 2.66655 5.99951 2.66655C5.63132 2.66655 5.33285 2.96503 5.33285 3.33322C5.33285 3.70141 5.63132 3.99988 5.99951 3.99988Z" fill="#8991A3"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M2.87733 0.512384C4.9357 0.282331 7.0633 0.282331 9.12167 0.512384C10.3393 0.648467 11.3225 1.60756 11.4658 2.8322C11.7119 4.93682 11.7119 7.06295 11.4658 9.16756C11.3225 10.3922 10.3393 11.3513 9.12167 11.4874C7.0633 11.7174 4.9357 11.7174 2.87733 11.4874C1.65975 11.3513 0.676481 10.3922 0.533248 9.16756C0.287094 7.06295 0.287094 4.93682 0.533248 2.8322C0.676481 1.60756 1.65975 0.648467 2.87733 0.512384ZM9.0106 1.5062C7.02604 1.28439 4.97296 1.28439 2.98841 1.5062C2.22545 1.59147 1.61475 2.19363 1.52648 2.94837C1.28935 4.9758 1.28935 7.02396 1.52648 9.05139C1.61475 9.80613 2.22545 10.4083 2.98841 10.4936C4.97296 10.7154 7.02604 10.7154 9.0106 10.4936C9.77355 10.4083 10.3843 9.80613 10.4725 9.05139C10.7097 7.02396 10.7097 4.9758 10.4725 2.94837C10.3843 2.19363 9.77355 1.59147 9.0106 1.5062Z" fill="#8991A3"/>
</svg>

'''
'''--- src/assets/images-app/logo-soon.svg ---
<svg width="41" height="18" viewBox="0 0 41 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path opacity="0.4" d="M7.852 13.12C7.108 13.12 6.484 13.012 5.98 12.796C5.484 12.572 5.104 12.284 4.84 11.932C4.584 11.572 4.448 11.196 4.432 10.804C4.432 10.732 4.456 10.672 4.504 10.624C4.552 10.576 4.612 10.552 4.684 10.552H5.752C5.856 10.552 5.932 10.576 5.98 10.624C6.036 10.664 6.084 10.716 6.124 10.78C6.172 10.932 6.264 11.084 6.4 11.236C6.536 11.38 6.72 11.5 6.952 11.596C7.192 11.692 7.492 11.74 7.852 11.74C8.428 11.74 8.856 11.644 9.136 11.452C9.424 11.26 9.568 11 9.568 10.672C9.568 10.44 9.492 10.256 9.34 10.12C9.188 9.976 8.952 9.848 8.632 9.736C8.32 9.616 7.904 9.492 7.384 9.364C6.784 9.22 6.28 9.048 5.872 8.848C5.472 8.64 5.168 8.38 4.96 8.068C4.76 7.756 4.66 7.36 4.66 6.88C4.66 6.416 4.784 6.004 5.032 5.644C5.288 5.284 5.648 5 6.112 4.792C6.584 4.584 7.144 4.48 7.792 4.48C8.312 4.48 8.772 4.552 9.172 4.696C9.572 4.832 9.904 5.016 10.168 5.248C10.432 5.472 10.632 5.716 10.768 5.98C10.912 6.236 10.988 6.488 10.996 6.736C10.996 6.8 10.972 6.86 10.924 6.916C10.884 6.964 10.824 6.988 10.744 6.988H9.628C9.564 6.988 9.5 6.972 9.436 6.94C9.372 6.908 9.32 6.848 9.28 6.76C9.232 6.512 9.076 6.3 8.812 6.124C8.548 5.948 8.208 5.86 7.792 5.86C7.36 5.86 7.012 5.94 6.748 6.1C6.484 6.26 6.352 6.508 6.352 6.844C6.352 7.068 6.416 7.256 6.544 7.408C6.68 7.552 6.892 7.68 7.18 7.792C7.476 7.904 7.864 8.024 8.344 8.152C9.024 8.304 9.58 8.48 10.012 8.68C10.444 8.88 10.76 9.136 10.96 9.448C11.16 9.752 11.26 10.14 11.26 10.612C11.26 11.14 11.116 11.592 10.828 11.968C10.548 12.336 10.152 12.62 9.64 12.82C9.128 13.02 8.532 13.12 7.852 13.12ZM15.8632 13.12C15.1512 13.12 14.5392 13.004 14.0272 12.772C13.5152 12.532 13.1152 12.168 12.8272 11.68C12.5392 11.184 12.3832 10.568 12.3592 9.832C12.3512 9.488 12.3472 9.148 12.3472 8.812C12.3472 8.476 12.3512 8.132 12.3592 7.78C12.3832 7.052 12.5432 6.444 12.8392 5.956C13.1352 5.468 13.5392 5.1 14.0512 4.852C14.5712 4.604 15.1752 4.48 15.8632 4.48C16.5512 4.48 17.1552 4.604 17.6752 4.852C18.1952 5.1 18.6032 5.468 18.8992 5.956C19.1952 6.444 19.3552 7.052 19.3792 7.78C19.3952 8.132 19.4032 8.476 19.4032 8.812C19.4032 9.148 19.3952 9.488 19.3792 9.832C19.3552 10.568 19.1992 11.184 18.9112 11.68C18.6232 12.168 18.2192 12.532 17.6992 12.772C17.1872 13.004 16.5752 13.12 15.8632 13.12ZM15.8632 11.74C16.3832 11.74 16.8072 11.588 17.1352 11.284C17.4632 10.972 17.6392 10.468 17.6632 9.772C17.6792 9.42 17.6872 9.096 17.6872 8.8C17.6872 8.496 17.6792 8.172 17.6632 7.828C17.6472 7.364 17.5592 6.988 17.3992 6.7C17.2472 6.404 17.0392 6.192 16.7752 6.064C16.5112 5.928 16.2072 5.86 15.8632 5.86C15.5272 5.86 15.2272 5.928 14.9632 6.064C14.6992 6.192 14.4872 6.404 14.3272 6.7C14.1752 6.988 14.0912 7.364 14.0752 7.828C14.0672 8.172 14.0632 8.496 14.0632 8.8C14.0632 9.096 14.0672 9.42 14.0752 9.772C14.0992 10.468 14.2752 10.972 14.6032 11.284C14.9312 11.588 15.3512 11.74 15.8632 11.74ZM24.207 13.12C23.495 13.12 22.883 13.004 22.371 12.772C21.859 12.532 21.459 12.168 21.171 11.68C20.883 11.184 20.727 10.568 20.703 9.832C20.695 9.488 20.691 9.148 20.691 8.812C20.691 8.476 20.695 8.132 20.703 7.78C20.727 7.052 20.887 6.444 21.183 5.956C21.479 5.468 21.883 5.1 22.395 4.852C22.915 4.604 23.519 4.48 24.207 4.48C24.895 4.48 25.499 4.604 26.019 4.852C26.539 5.1 26.947 5.468 27.243 5.956C27.539 6.444 27.699 7.052 27.723 7.78C27.739 8.132 27.747 8.476 27.747 8.812C27.747 9.148 27.739 9.488 27.723 9.832C27.699 10.568 27.543 11.184 27.255 11.68C26.967 12.168 26.563 12.532 26.043 12.772C25.531 13.004 24.919 13.12 24.207 13.12ZM24.207 11.74C24.727 11.74 25.151 11.588 25.479 11.284C25.807 10.972 25.983 10.468 26.007 9.772C26.023 9.42 26.031 9.096 26.031 8.8C26.031 8.496 26.023 8.172 26.007 7.828C25.991 7.364 25.903 6.988 25.743 6.7C25.591 6.404 25.383 6.192 25.119 6.064C24.855 5.928 24.551 5.86 24.207 5.86C23.871 5.86 23.571 5.928 23.307 6.064C23.043 6.192 22.831 6.404 22.671 6.7C22.519 6.988 22.435 7.364 22.419 7.828C22.411 8.172 22.407 8.496 22.407 8.8C22.407 9.096 22.411 9.42 22.419 9.772C22.443 10.468 22.619 10.972 22.947 11.284C23.275 11.588 23.695 11.74 24.207 11.74ZM29.6107 13C29.5307 13 29.4627 12.972 29.4067 12.916C29.3507 12.86 29.3227 12.792 29.3227 12.712V4.9C29.3227 4.812 29.3507 4.74 29.4067 4.684C29.4627 4.628 29.5307 4.6 29.6107 4.6H30.5347C30.6467 4.6 30.7267 4.628 30.7747 4.684C30.8307 4.732 30.8667 4.768 30.8827 4.792L34.3387 10.168V4.9C34.3387 4.812 34.3627 4.74 34.4107 4.684C34.4667 4.628 34.5387 4.6 34.6267 4.6H35.6347C35.7227 4.6 35.7947 4.628 35.8507 4.684C35.9067 4.74 35.9347 4.812 35.9347 4.9V12.7C35.9347 12.788 35.9067 12.86 35.8507 12.916C35.7947 12.972 35.7267 13 35.6467 13H34.7107C34.5987 13 34.5187 12.972 34.4707 12.916C34.4227 12.86 34.3867 12.824 34.3627 12.808L30.9187 7.552V12.712C30.9187 12.792 30.8907 12.86 30.8347 12.916C30.7787 12.972 30.7067 13 30.6187 13H29.6107Z" fill="#FFE248"/>
<rect x="0.5" y="0.5" width="40" height="17" rx="3.5" stroke="#FFE248" stroke-opacity="0.4"/>
</svg>

'''
'''--- src/assets/images-app/menu.svg ---
<svg width="4" height="16" viewBox="0 0 4 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M2 1.25C2.41421 1.25 2.75 1.58579 2.75 2C2.75 2.41421 2.41421 2.75 2 2.75C1.58579 2.75 1.25 2.41421 1.25 2C1.25 1.58579 1.58579 1.25 2 1.25ZM2 7.25C2.41421 7.25 2.75 7.58579 2.75 8C2.75 8.41421 2.41421 8.75 2 8.75C1.58579 8.75 1.25 8.41421 1.25 8C1.25 7.58579 1.58579 7.25 2 7.25ZM2 13.25C2.41421 13.25 2.75 13.5858 2.75 14C2.75 14.4142 2.41421 14.75 2 14.75C1.58579 14.75 1.25 14.4142 1.25 14C1.25 13.5858 1.58579 13.25 2 13.25Z" fill="#8991A3" stroke="#8991A3" stroke-width="1.5"/>
</svg>

'''
'''--- src/assets/images-app/minus.svg ---
<svg width="17.25" height="17.25" viewBox="0 0 12 2" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M1 0.25C0.585787 0.25 0.25 0.585786 0.25 1C0.25 1.41421 0.585787 1.75 1 1.75C7.44601 1.75 5.02511 1.75 11 1.75C11.4142 1.75 11.75 1.41421 11.75 1C11.75 0.585787 11.4142 0.25 11 0.25C5.02511 0.25 7.44601 0.25 1 0.25Z" fill="#8991A3"/>
</svg>

'''
'''--- src/assets/images-app/near.svg ---
<svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M18 36C27.9411 36 36 27.9411 36 18C36 8.05888 27.9411 0 18 0C8.05888 0 0 8.05888 0 18C0 27.9411 8.05888 36 18 36Z" fill="white"/>
<path d="M23.2886 10.6834L19.6372 16.1048C19.5852 16.1829 19.5632 16.2771 19.5753 16.3701C19.5875 16.4632 19.6329 16.5487 19.7031 16.6108C19.7734 16.6729 19.8638 16.7075 19.9576 16.7082C20.0514 16.7088 20.1423 16.6755 20.2134 16.6143L23.8079 13.4966C23.8289 13.4778 23.855 13.4655 23.883 13.4612C23.9109 13.4569 23.9395 13.4609 23.9652 13.4726C23.9909 13.4843 24.0127 13.5032 24.0278 13.5271C24.043 13.551 24.0508 13.5787 24.0505 13.607V23.3676C24.0505 23.3975 24.0413 23.4267 24.0241 23.4511C24.007 23.4756 23.9827 23.4942 23.9546 23.5044C23.9265 23.5146 23.896 23.5159 23.8671 23.5082C23.8383 23.5004 23.8125 23.484 23.7933 23.461L12.9287 10.4553C12.754 10.249 12.5364 10.0832 12.2911 9.96942C12.0457 9.85566 11.7786 9.7967 11.5082 9.79663H11.1285C10.6349 9.79663 10.1616 9.99269 9.81262 10.3417C9.46364 10.6907 9.26758 11.164 9.26758 11.6575V25.4044C9.26758 25.898 9.46364 26.3713 9.81262 26.7203C10.1616 27.0693 10.6349 27.2653 11.1285 27.2653C11.4467 27.2654 11.7596 27.184 12.0374 27.0287C12.3152 26.8735 12.5485 26.6496 12.7152 26.3786L16.3667 20.9572C16.4187 20.8791 16.4406 20.7849 16.4285 20.6918C16.4164 20.5988 16.371 20.5133 16.3007 20.4512C16.2304 20.389 16.14 20.3544 16.0462 20.3538C15.9524 20.3532 15.8616 20.3865 15.7904 20.4477L12.196 23.5654C12.1749 23.5842 12.1489 23.5965 12.1209 23.6008C12.093 23.6051 12.0644 23.6011 12.0387 23.5894C12.0129 23.5777 11.9912 23.5587 11.976 23.5349C11.9609 23.511 11.953 23.4832 11.9534 23.455V13.6919C11.9534 13.662 11.9626 13.6329 11.9798 13.6084C11.9969 13.5839 12.0212 13.5653 12.0493 13.5551C12.0774 13.5449 12.1079 13.5436 12.1368 13.5514C12.1656 13.5591 12.1914 13.5756 12.2106 13.5985L23.0739 26.6066C23.2487 26.813 23.4663 26.9788 23.7116 27.0926C23.9569 27.2063 24.2241 27.2653 24.4945 27.2653H24.8742C25.1187 27.2655 25.3608 27.2175 25.5867 27.124C25.8126 27.0306 26.0179 26.8935 26.1908 26.7207C26.3637 26.5479 26.5009 26.3427 26.5945 26.1169C26.6881 25.891 26.7363 25.6489 26.7363 25.4044V11.6575C26.7363 11.164 26.5402 10.6907 26.1912 10.3417C25.8423 9.99269 25.3689 9.79663 24.8754 9.79663C24.5572 9.79655 24.2442 9.87801 23.9665 10.0333C23.6887 10.1885 23.4553 10.4123 23.2886 10.6834Z" fill="#151922"/>
</svg>

'''
'''--- src/assets/images-app/placeholder-token.svg ---
<svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="36" height="36" rx="9" fill="#8991A3"/>
</svg>

'''
'''--- src/assets/images-app/plus.svg ---
<svg width="17.25" height="17.25" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M6.75 1C6.75 0.585786 6.41421 0.25 6 0.25C5.58579 0.25 5.25 0.585786 5.25 1V5.25H1C0.585787 5.25 0.25 5.58579 0.25 6C0.25 6.41421 0.585787 6.75 1 6.75H5.25V11C5.25 11.4142 5.58579 11.75 6 11.75C6.41421 11.75 6.75 11.4142 6.75 11V6.75H11C11.4142 6.75 11.75 6.41421 11.75 6C11.75 5.58579 11.4142 5.25 11 5.25H6.75V1Z" fill="#8991A3"/>
</svg>

'''
'''--- src/assets/images-app/right-arrow.svg ---
<svg width="9" height="15" viewBox="0 0 9 15" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M0.954505 0.704505C1.39384 0.265165 2.10616 0.265165 2.5455 0.704505L8.5455 6.7045C8.98483 7.14384 8.98483 7.85616 8.5455 8.2955L2.5455 14.2955C2.10616 14.7348 1.39384 14.7348 0.954505 14.2955C0.515165 13.8562 0.515165 13.1438 0.954505 12.7045L6.15901 7.5L0.954505 2.2955C0.515165 1.85616 0.515165 1.14384 0.954505 0.704505Z" fill="white"/>
</svg>

'''
'''--- src/assets/images-app/route-arrow.svg ---
<svg width="14" height="10" viewBox="0 0 14 10" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8.46967 1.53033C8.17678 1.23744 8.17678 0.762563 8.46967 0.46967C8.76256 0.176777 9.23744 0.176777 9.53033 0.46967L13.5303 4.46967C13.8232 4.76256 13.8232 5.23744 13.5303 5.53033L9.53033 9.53033C9.23744 9.82322 8.76256 9.82322 8.46967 9.53033C8.17678 9.23744 8.17678 8.76256 8.46967 8.46967L11.1893 5.75H1.5C1.08579 5.75 0.75 5.41421 0.75 5C0.75 4.58579 1.08579 4.25 1.5 4.25H11.1893L8.46967 1.53033Z" fill="white"/>
</svg>

'''
'''--- src/assets/images-app/search-icon.svg ---
<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M11.3854 12.4456C8.73512 14.5682 4.85569 14.4011 2.3989 11.9444C-0.237135 9.30832 -0.237135 5.03445 2.3989 2.39842C5.03494 -0.237623 9.30881 -0.237623 11.9448 2.39842C14.4016 4.8552 14.5687 8.73462 12.446 11.3849L17.6017 16.5405C17.8946 16.8334 17.8946 17.3083 17.6017 17.6012C17.3088 17.8941 16.8339 17.8941 16.541 17.6012L11.3854 12.4456ZM3.45956 10.8837C1.40931 8.83344 1.40931 5.50933 3.45956 3.45908C5.50982 1.40882 8.83393 1.40882 10.8842 3.45908C12.9329 5.50782 12.9344 8.82856 10.8887 10.8792C10.8872 10.8807 10.8857 10.8822 10.8842 10.8837C10.8827 10.8852 10.8812 10.8867 10.8797 10.8882C8.82906 12.9339 5.50831 12.9324 3.45956 10.8837Z" fill="#8991A3"/>
</svg>

'''
'''--- src/assets/images-app/swap-icon.svg ---
<svg width="25" height="22" viewBox="0 0 25 22" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M23.5016 1.87451C24.1229 1.87451 24.6266 2.37819 24.6266 2.99951V9.00014C24.6266 9.62147 24.1229 10.1251 23.5016 10.1251H17.501C16.8797 10.1251 16.376 9.62147 16.376 9.00014C16.376 8.37882 16.8797 7.87514 17.501 7.87514H22.3766V2.99951C22.3766 2.37819 22.8803 1.87451 23.5016 1.87451Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M0.374023 13C0.374023 12.3787 0.877703 11.875 1.49902 11.875H7.49966C8.12098 11.875 8.62466 12.3787 8.62466 13C8.62466 13.6213 8.12098 14.125 7.49966 14.125H2.62402V19.0006C2.62402 19.622 2.12034 20.1256 1.49902 20.1256C0.877703 20.1256 0.374023 19.622 0.374023 19.0006V13Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M18.0653 5.43487C16.1536 3.52219 13.3943 2.72405 10.7567 3.32084C8.11912 3.91762 5.97215 5.82587 5.07002 8.37522C4.86275 8.96095 4.2199 9.26775 3.63417 9.06048C3.04844 8.85321 2.74164 8.21036 2.94891 7.62463C4.10876 4.34698 6.86908 1.89359 10.2602 1.12631C13.6454 0.360366 17.1865 1.38162 19.6439 3.83146L24.2719 8.18018C24.7247 8.60565 24.7468 9.31762 24.3214 9.77041C23.8959 10.2232 23.1839 10.2453 22.7311 9.81988L18.0907 5.45942C18.0821 5.45137 18.0736 5.44318 18.0653 5.43487ZM0.67918 12.2296C1.10465 11.7768 1.81661 11.7546 2.2694 12.1801L6.90989 16.5405C6.91846 16.5486 6.9269 16.5568 6.93521 16.5651C8.84693 18.4778 11.6063 19.2759 14.2438 18.6791C16.8814 18.0823 19.0284 16.1741 19.9305 13.6247C20.1378 13.039 20.7807 12.7322 21.3664 12.9395C21.9521 13.1468 22.2589 13.7896 22.0516 14.3753C20.8918 17.653 18.1315 20.1064 14.7404 20.8737C11.3552 21.6396 7.81404 20.6184 5.35668 18.1685L0.728653 13.8198C0.275864 13.3943 0.253714 12.6823 0.67918 12.2296Z" fill="white"/>
</svg>

'''
'''--- src/assets/images-app/wNEAR.svg ---
<svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M0.499908 24C0.499908 18.329 0.50097 14.1261 0.93479 10.8994C1.36668 7.68704 2.21921 5.51725 3.86818 3.86827C5.51716 2.2193 7.68695 1.36677 10.8993 0.934881C14.126 0.501062 18.3289 0.5 23.9999 0.5C29.6709 0.5 33.8738 0.501062 37.1005 0.934881C40.3129 1.36677 42.4827 2.2193 44.1316 3.86827C45.7806 5.51725 46.6331 7.68704 47.065 10.8994C47.4988 14.1261 47.4999 18.329 47.4999 24C47.4999 29.671 47.4988 33.8739 47.065 37.1006C46.6331 40.313 45.7806 42.4828 44.1316 44.1317C42.4827 45.7807 40.3129 46.6332 37.1005 47.0651C33.8738 47.4989 29.6709 47.5 23.9999 47.5C18.3289 47.5 14.126 47.4989 10.8993 47.0651C7.68695 46.6332 5.51716 45.7807 3.86818 44.1317C2.21921 42.4828 1.36668 40.313 0.93479 37.1006C0.50097 33.8739 0.499908 29.671 0.499908 24Z" fill="#202632" stroke="white"/>
<path d="M31.2632 13.2183L26.2466 20.6667C26.1751 20.7739 26.1449 20.9034 26.1616 21.0312C26.1782 21.1591 26.2406 21.2765 26.3372 21.3619C26.4337 21.4473 26.5579 21.4948 26.6868 21.4957C26.8157 21.4965 26.9405 21.4507 27.0382 21.3667L31.9766 17.0833C32.0055 17.0574 32.0414 17.0405 32.0798 17.0347C32.1181 17.0288 32.1574 17.0343 32.1928 17.0503C32.2281 17.0664 32.258 17.0925 32.2788 17.1252C32.2996 17.158 32.3104 17.1962 32.3099 17.235V30.645C32.3099 30.6861 32.2972 30.7261 32.2737 30.7597C32.2501 30.7933 32.2168 30.8189 32.1782 30.8329C32.1396 30.8469 32.0976 30.8487 32.058 30.8381C32.0183 30.8274 31.9829 30.8048 31.9566 30.7733L17.0299 12.905C16.7898 12.6215 16.4909 12.3937 16.1538 12.2374C15.8168 12.0811 15.4498 12.0001 15.0782 12H14.5566C13.8785 12 13.2282 12.2694 12.7487 12.7488C12.2693 13.2283 11.9999 13.8786 11.9999 14.5567V33.4433C11.9999 34.1214 12.2693 34.7717 12.7487 35.2512C13.2282 35.7306 13.8785 36 14.5566 36C14.9938 36.0001 15.4237 35.8882 15.8053 35.6749C16.187 35.4616 16.5076 35.1541 16.7366 34.7817L21.7532 27.3333C21.8247 27.2261 21.8549 27.0966 21.8382 26.9688C21.8216 26.8409 21.7592 26.7235 21.6626 26.6381C21.5661 26.5527 21.4419 26.5052 21.313 26.5043C21.1841 26.5035 21.0593 26.5493 20.9616 26.6333L16.0232 30.9167C15.9943 30.9426 15.9584 30.9595 15.9201 30.9653C15.8817 30.9712 15.8424 30.9657 15.8071 30.9497C15.7717 30.9336 15.7418 30.9075 15.721 30.8748C15.7002 30.842 15.6894 30.8038 15.6899 30.765V17.3517C15.6899 17.3106 15.7026 17.2706 15.7261 17.2369C15.7497 17.2033 15.783 17.1778 15.8216 17.1638C15.8602 17.1497 15.9022 17.1479 15.9418 17.1586C15.9815 17.1693 16.0169 17.1919 16.0432 17.2233L30.9682 35.095C31.2083 35.3785 31.5073 35.6063 31.8443 35.7626C32.1814 35.9189 32.5484 35.9999 32.9199 36H33.4416C33.7775 36.0002 34.1101 35.9343 34.4205 35.8059C34.7309 35.6775 35.0129 35.4892 35.2505 35.2518C35.4881 35.0143 35.6765 34.7324 35.8051 34.4221C35.9337 34.1118 35.9999 33.7792 35.9999 33.4433V14.5567C35.9999 13.8786 35.7305 13.2283 35.2511 12.7488C34.7716 12.2694 34.1213 12 33.4432 12C33.0061 11.9999 32.5761 12.1118 32.1945 12.3251C31.8128 12.5384 31.4922 12.8459 31.2632 13.2183Z" fill="white"/>
</svg>

'''
'''--- src/assets/images-app/wallet.svg ---
<svg width="21" height="18" viewBox="0 0 21 18" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M13.4995 9.00012C13.4995 8.17169 14.171 7.50012 14.9995 7.50012C15.8279 7.50012 16.4995 8.17169 16.4995 9.00012C16.4995 9.82855 15.8279 10.5001 14.9995 10.5001C14.171 10.5001 13.4995 9.82855 13.4995 9.00012Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M18.4408 3.67414C17.783 2.12848 16.3296 1.01735 14.6001 0.835354L13.9483 0.766758C10.6559 0.420305 7.3352 0.443152 4.04796 0.834872L3.61602 0.886343C1.94722 1.0852 0.62497 2.38901 0.402693 4.05485C-0.0352727 7.33716 -0.0352728 10.6631 0.402693 13.9454C0.62497 15.6113 1.94722 16.9151 3.61602 17.1139L4.04796 17.1654C7.3352 17.5571 10.6559 17.58 13.9483 17.2335L14.6001 17.1649C16.3296 16.9829 17.783 15.8718 18.4408 14.3261C19.4801 14.0167 20.2732 13.1157 20.4034 12.0025C20.6367 10.0077 20.6367 7.99255 20.4034 5.99776C20.2732 4.88454 19.4801 3.98356 18.4408 3.67414ZM13.7913 2.25852C10.6102 1.92377 7.40163 1.94585 4.22545 2.32433L3.79351 2.37581C2.80469 2.49364 2.02122 3.26618 1.88952 4.25324C1.46912 7.40388 1.46912 10.5964 1.88952 13.747C2.02122 14.7341 2.8047 15.5066 3.79351 15.6245L4.22545 15.6759C7.40164 16.0544 10.6102 16.0765 13.7913 15.7417L14.4431 15.6732C15.2937 15.5836 16.0463 15.1644 16.5678 14.5421C15.0596 14.63 13.5314 14.5907 12.0412 14.4242C10.7718 14.2823 9.74525 13.2828 9.59551 12.0025C9.36221 10.0077 9.36221 7.99255 9.59551 5.99776C9.74525 4.7175 10.7718 3.71796 12.0412 3.57609C13.5314 3.40954 15.0596 3.37024 16.5678 3.45819C16.0463 2.83587 15.2937 2.41662 14.4431 2.32712L13.7913 2.25852ZM17.2768 5.01483C17.2774 5.01867 17.278 5.02251 17.2786 5.02635L17.2847 5.06524L17.4833 5.03439C17.5861 5.04456 17.6887 5.05537 17.7911 5.06681C18.3785 5.13246 18.8463 5.59661 18.9136 6.17201C19.1334 8.05102 19.1334 9.94924 18.9136 11.8283C18.8463 12.4037 18.3785 12.8678 17.7911 12.9335C17.6887 12.9449 17.5861 12.9557 17.4833 12.9659L17.2847 12.935L17.2786 12.9739C17.278 12.9778 17.2774 12.9816 17.2768 12.9854C15.5982 13.1373 13.8766 13.12 12.2078 12.9335C11.6204 12.8678 11.1527 12.4037 11.0854 11.8283C10.8656 9.94925 10.8656 8.05102 11.0854 6.17201C11.1527 5.59661 11.6204 5.13246 12.2078 5.06681C13.8766 4.8803 15.5982 4.86297 17.2768 5.01483Z" fill="white"/>
</svg>

'''
'''--- src/assets/images-app/warning.svg ---
<svg width="14" height="13" viewBox="0 0 14 13" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M7.66687 4.49938C7.66687 4.86757 7.36839 5.16605 7.0002 5.16605C6.63201 5.16605 6.33354 4.86757 6.33354 4.49938C6.33354 4.13119 6.63201 3.83272 7.0002 3.83272C7.36839 3.83272 7.66687 4.13119 7.66687 4.49938Z" fill="white"/>
<path d="M7.0002 6.33272C7.27635 6.33272 7.5002 6.55657 7.5002 6.83272V10.166C7.5002 10.4422 7.27635 10.666 7.0002 10.666C6.72406 10.666 6.5002 10.4422 6.5002 10.166V6.83272C6.5002 6.55657 6.72406 6.33272 7.0002 6.33272Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M8.51377 1.16114C7.78579 0.0960291 6.21459 0.0960248 5.48661 1.16114L5.19866 1.58243C3.39464 4.22191 1.84466 7.02633 0.569508 9.95811L0.509365 10.0964C0.0599949 11.1296 0.738904 12.3027 1.8586 12.4278C5.27569 12.8098 8.72469 12.8098 12.1418 12.4278C13.2615 12.3027 13.9404 11.1296 13.491 10.0964L13.4309 9.95811C12.1557 7.02632 10.6057 4.22191 8.80172 1.58244L8.51377 1.16114ZM6.3122 1.72541C6.6431 1.24127 7.35728 1.24127 7.68818 1.72541L7.97613 2.14671C9.74453 4.73406 11.2639 7.48308 12.5139 10.357L12.574 10.4952C12.7549 10.9113 12.4816 11.3836 12.0307 11.434C8.68744 11.8077 5.31294 11.8077 1.96967 11.434C1.51881 11.3836 1.24544 10.9113 1.42638 10.4952L1.48653 10.357C2.73649 7.48308 4.25586 4.73405 6.02425 2.14671L6.3122 1.72541Z" fill="white"/>
</svg>

'''
'''--- src/assets/images/Medium.svg ---
<svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M10.3328 9.66699C6.60855 9.66699 3.66602 12.5448 3.66602 16.0004C3.66602 19.456 6.60874 22.3337 10.3328 22.3337C14.0569 22.3337 16.9993 19.4568 16.9993 16.0004C16.9993 12.5441 14.0571 9.66699 10.3328 9.66699ZM1.66602 16.0004C1.66602 11.3575 5.58854 7.66699 10.3328 7.66699C13.7749 7.66699 16.7843 9.60923 18.177 12.4489C18.3611 11.8519 18.5918 11.2989 18.8636 10.8047C19.6029 9.46026 20.7866 8.33366 22.3324 8.33366C23.8781 8.33366 25.0619 9.45982 25.8014 10.8042C25.8849 10.9561 25.9645 11.1134 26.0401 11.2759C26.0518 11.2131 26.0637 11.1512 26.0759 11.0903C26.2031 10.4543 26.366 9.87478 26.5762 9.43017C26.6801 9.21041 26.8203 8.96975 27.0153 8.7702C27.212 8.569 27.5434 8.33366 27.9992 8.33366C28.455 8.33366 28.7864 8.56895 28.9831 8.77013C29.1781 8.96966 29.3183 9.2103 29.4222 9.43006C29.6325 9.87465 29.7954 10.4541 29.9226 11.0901C30.1804 12.3785 30.3327 14.114 30.3327 16.0003C30.3327 17.8861 30.1804 19.6215 29.9227 20.9101C29.7955 21.5461 29.6326 22.1257 29.4224 22.5704C29.3184 22.7902 29.1782 23.0309 28.9832 23.2304C28.7865 23.4317 28.455 23.667 27.9992 23.667C27.5435 23.667 27.212 23.4318 27.0153 23.2305C26.8203 23.031 26.6801 22.7903 26.5761 22.5705C26.3659 22.1259 26.203 21.5464 26.0758 20.9104C26.0637 20.8495 26.0517 20.7877 26.0401 20.725C25.9646 20.8872 25.885 21.0444 25.8016 21.196C25.0623 22.5404 23.8785 23.667 22.3327 23.667C20.7868 23.667 19.6031 22.5404 18.8637 21.196C18.5919 20.7018 18.3612 20.1488 18.177 19.5518C16.7843 22.3915 13.7747 24.3337 10.3328 24.3337C5.58887 24.3337 1.66602 20.6434 1.66602 16.0004ZM20.6161 11.7684C20.0483 12.8009 19.666 14.2953 19.666 16.0003C19.666 17.7053 20.0483 19.1997 20.6162 20.2322C21.2039 21.3008 21.8535 21.667 22.3327 21.667C22.8119 21.667 23.4615 21.3008 24.0492 20.2322C24.617 19.1997 24.9994 17.7053 24.9994 16.0003H24.9991C24.9991 14.2949 24.6168 12.8005 24.049 11.7681C23.4613 10.6997 22.8118 10.3337 22.3324 10.3337C21.8532 10.3337 21.2037 10.6998 20.6161 11.7684ZM27.666 16.0003C27.666 14.3075 27.796 12.7903 27.9993 11.68C28.2027 12.7903 28.3327 14.3074 28.3327 16.0003C28.3327 17.6931 28.2027 19.2105 27.9993 20.321C27.7959 19.2106 27.666 17.6933 27.666 16.0003Z" fill="white"/>
</svg>

'''
'''--- src/assets/images/Telegram.svg ---
<svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M7.71671 18.6925C7.77508 18.7121 7.83399 18.7261 7.89284 18.7347C7.95702 18.8855 8.03995 19.0806 8.13669 19.3088C8.37279 19.8656 8.69091 20.6187 9.01928 21.4044C9.68894 23.0066 10.3644 24.6583 10.5136 25.131C10.6983 25.7155 10.8935 26.1128 11.1066 26.384C11.2168 26.5243 11.3442 26.6468 11.4934 26.7395C11.5684 26.7862 11.6477 26.8245 11.7305 26.853C11.7342 26.8543 11.7378 26.8555 11.7414 26.8568C12.1681 27.0178 12.5571 26.9507 12.8007 26.8687C12.931 26.8248 13.0365 26.7718 13.1112 26.7288C13.1493 26.7069 13.1815 26.6865 13.2072 26.6692L13.2132 26.6651L16.9815 24.3151L21.3342 27.6522C21.3985 27.7015 21.4685 27.7428 21.5427 27.7751C22.0656 28.0033 22.572 28.0829 23.0483 28.0178C23.5238 27.9529 23.9014 27.7531 24.1824 27.5283C24.4576 27.3081 24.6442 27.0615 24.7604 26.8782C24.8197 26.7846 24.8643 26.7019 24.8957 26.6385C24.9115 26.6066 24.9242 26.5792 24.934 26.5571L24.9466 26.528L24.9513 26.5166L24.9533 26.5118L24.9542 26.5095L24.955 26.5074C24.9779 26.4502 24.9954 26.3911 25.0074 26.3307L28.9811 6.29666C28.9938 6.23259 29.0002 6.16743 29.0002 6.10211C29.0002 5.51542 28.7791 4.95755 28.2593 4.61903C27.8151 4.3297 27.3202 4.31724 27.0074 4.34098C26.67 4.36659 26.3584 4.44988 26.1493 4.51644C26.0405 4.55107 25.9493 4.58449 25.8835 4.60999C25.8504 4.6228 25.8233 4.63379 25.8031 4.64218L25.788 4.64856L3.503 13.3906L3.50012 13.3917C3.48591 13.3968 3.46768 13.4036 3.44601 13.4121C3.40286 13.4289 3.34505 13.4525 3.27751 13.4831C3.1458 13.5428 2.96102 13.6361 2.77141 13.766C2.46849 13.9734 1.77184 14.5416 1.88915 15.4793C1.98273 16.2274 2.49524 16.6868 2.80749 16.9078C2.97895 17.0291 3.14184 17.1158 3.26046 17.1723C3.3155 17.1985 3.42976 17.2449 3.47934 17.2651L3.49185 17.2702L7.71671 18.6925ZM26.5679 6.49016L26.5648 6.49151C26.5537 6.49634 26.5425 6.50096 26.5312 6.50538L4.2192 15.258C4.20755 15.2626 4.19582 15.267 4.184 15.2711L4.17158 15.2758C4.15731 15.2814 4.13328 15.2911 4.10311 15.3048C4.08601 15.3125 4.06816 15.321 4.04996 15.3301C4.07497 15.3442 4.0989 15.3564 4.12016 15.3665C4.14057 15.3762 4.15614 15.3829 4.16467 15.3864L8.35484 16.797C8.43153 16.8228 8.50303 16.8571 8.56866 16.8983L22.4043 8.79898L22.4173 8.79132C22.4274 8.78537 22.4406 8.77772 22.4565 8.76875C22.488 8.75094 22.5312 8.72724 22.5827 8.70105C22.6787 8.65218 22.8324 8.57963 23.0054 8.52614C23.1259 8.4889 23.4812 8.38398 23.8654 8.50719C24.1024 8.58323 24.3479 8.74671 24.5075 9.02365C24.5869 9.16124 24.6291 9.29945 24.6496 9.42597C24.704 9.62528 24.6953 9.82208 24.6528 9.992C24.5611 10.358 24.304 10.6435 24.07 10.8619C23.8695 11.0491 21.2757 13.5502 18.7168 16.0193C17.4407 17.2505 16.1777 18.4696 15.2336 19.3809L14.6136 19.9795L22.4428 25.982C22.6224 26.0463 22.7285 26.043 22.7776 26.0363C22.8361 26.0283 22.884 26.0057 22.9329 25.9666C22.9876 25.9228 23.0355 25.8637 23.0713 25.8073L23.0727 25.805L26.9267 6.37436C26.8695 6.38811 26.8117 6.40448 26.7559 6.42223C26.6928 6.44232 26.6407 6.46146 26.6062 6.47484C26.5891 6.48146 26.5768 6.48648 26.5701 6.48926L26.5679 6.49016ZM15.2862 23.0154L13.7242 21.8178L13.3457 24.2255L15.2862 23.0154ZM12.2913 19.4415L13.8446 17.942C14.7887 17.0306 16.0519 15.8114 17.3281 14.58L18.6247 13.329L9.93137 18.4181L9.97802 18.528C10.215 19.0869 10.5345 19.8433 10.8646 20.6331C11.1114 21.2237 11.3696 21.8456 11.6047 22.4213L11.982 20.0208C12.0184 19.7893 12.1315 19.589 12.2913 19.4415Z" fill="white"/>
</svg>

'''
'''--- src/assets/images/Twitter.svg ---
<svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M20.029 4.45754C20.7069 4.34143 21.466 4.30266 22.1803 4.42352C23.4561 4.63936 24.6346 5.23234 25.5661 6.12135C26.1751 6.13512 26.7735 6.01516 27.303 5.84414C27.7511 5.69941 28.1297 5.52464 28.395 5.38646C28.5269 5.31775 28.6287 5.25914 28.695 5.21946C28.7281 5.19965 28.7521 5.18466 28.7664 5.17561L28.7791 5.16752C29.1748 4.90389 29.7018 4.9552 30.0389 5.29054C30.3762 5.62596 30.4305 6.15252 30.1688 6.54972C29.8919 6.97012 29.5074 7.71954 29.0767 8.55922C29.0089 8.69125 28.9401 8.8255 28.8703 8.96107C28.6232 9.44102 28.3699 9.9261 28.1338 10.3423C27.9855 10.6036 27.827 10.8689 27.6671 11.0981V11.4632C27.6773 12.804 27.5235 14.1379 27.2114 15.4355C27.015 16.252 26.7559 17.0541 26.4356 17.8346C25.6057 19.8568 24.3812 21.6934 22.8336 23.2371C21.2859 24.7807 19.4462 26.0005 17.4219 26.8252C15.3993 27.6492 13.233 28.0623 11.0492 28.0404C7.88345 28.0431 4.78429 27.131 2.12467 25.4138C1.73293 25.1609 1.568 24.6708 1.72711 24.2325C1.88623 23.7942 2.32715 23.524 2.78992 23.5813C3.1904 23.6308 3.59361 23.655 3.99715 23.6537C5.44708 23.6497 6.8694 23.3293 8.16788 22.7258C7.75515 22.5379 7.3611 22.3062 6.9929 22.0332C5.91061 21.2306 5.1054 20.1107 4.68931 18.8292C4.58118 18.4962 4.6551 18.1309 4.88418 17.8661C4.88828 17.8613 4.89243 17.8567 4.89661 17.852C4.65191 17.6338 4.42293 17.3962 4.21214 17.1407C3.26372 15.9911 2.74148 14.5492 2.73377 13.0589L2.73375 13.0537L2.73376 12.987C2.73376 12.6326 2.92143 12.3046 3.22703 12.1249C3.3045 12.0794 3.38661 12.0451 3.47108 12.0221C3.01997 11.122 2.78538 10.1281 2.78709 9.11976C2.78656 7.9774 3.08495 6.85478 3.65264 5.86344C3.81652 5.57726 4.11096 5.39028 4.43966 5.36364C4.76837 5.33701 5.08907 5.47415 5.29689 5.73021C6.58029 7.31156 8.18201 8.60523 9.99799 9.52719C10.9315 10.0011 11.9109 10.3714 12.9186 10.6333C13.4836 10.7801 14.0575 10.8929 14.6372 10.9708C14.6117 10.0065 14.8021 9.04266 15.2017 8.15208C15.788 6.84565 16.7913 5.77075 18.0542 5.09596C18.5891 4.81019 19.2991 4.58257 20.029 4.45754ZM4.99146 14.5209C5.16432 15.0074 5.42148 15.4638 5.75489 15.8679C6.40998 16.662 7.31925 17.2054 8.32887 17.4063C8.77858 17.4957 9.10983 17.8796 9.13253 18.3375C9.15523 18.7955 8.86356 19.2102 8.4249 19.3437C8.06157 19.4543 7.68934 19.5313 7.31287 19.5741C7.56164 19.8948 7.85428 20.1821 8.18416 20.4267C8.9324 20.9815 9.835 21.2893 10.7663 21.3072C11.1889 21.3154 11.5607 21.5883 11.6952 21.989C11.8296 22.3896 11.6976 22.8316 11.3655 23.0929C9.96658 24.1936 8.34898 24.9612 6.63491 25.353C8.05556 25.808 9.54548 26.0422 11.0525 26.0404L11.0641 26.0404C12.9842 26.0603 14.889 25.6975 16.6673 24.9731C18.4456 24.2486 20.0617 23.1771 21.4212 21.821C22.7807 20.465 23.8564 18.8517 24.5854 17.0753C24.8668 16.3896 25.0943 15.685 25.2668 14.9678C25.5413 13.8268 25.6763 12.6539 25.6671 11.4749L25.6671 11.467V10.7604C25.6671 10.5179 25.7552 10.2837 25.915 10.1013C26.0073 9.99594 26.1689 9.75253 26.3943 9.35533C26.6085 8.97783 26.8455 8.52462 27.092 8.04571C27.107 8.01675 27.1219 7.98763 27.137 7.95838C26.4975 8.09725 25.7727 8.17003 25.013 8.08792C24.7724 8.06192 24.5493 7.94953 24.3853 7.77161C23.7148 7.0445 22.8219 6.56049 21.8467 6.3955C21.414 6.32229 20.8908 6.33905 20.3667 6.42883C19.7972 6.52638 19.3016 6.69707 18.9967 6.85996C18.1244 7.32606 17.4314 8.06852 17.0264 8.9709C16.6215 9.87328 16.5275 10.8845 16.7593 11.8461C16.8331 12.1526 16.7581 12.4761 16.5568 12.7188C16.3555 12.9615 16.0515 13.095 15.7366 13.0791C14.612 13.0222 13.4994 12.8507 12.4155 12.569C11.269 12.271 10.1547 11.8497 9.09261 11.3105C7.5289 10.5166 6.10483 9.48052 4.87171 8.2436C4.81546 8.53108 4.7869 8.82445 4.78709 9.11971L4.78709 9.12227C4.7857 9.85656 4.9659 10.5798 5.31164 11.2276C5.65739 11.8754 6.15795 12.4277 6.76877 12.8352C7.13947 13.0825 7.30177 13.5453 7.16677 13.97C7.03176 14.3947 6.63203 14.6788 6.18656 14.6667C5.7831 14.6557 5.38302 14.6066 4.99146 14.5209Z" fill="white"/>
</svg>

'''
'''--- src/assets/images/arrow-central.svg ---
<svg width="340" height="162" viewBox="0 0 340 162" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M168.939 161.061C169.525 161.646 170.475 161.646 171.061 161.061L180.607 151.515C181.192 150.929 181.192 149.979 180.607 149.393C180.021 148.808 179.071 148.808 178.485 149.393L170 157.879L161.515 149.393C160.929 148.808 159.979 148.808 159.393 149.393C158.808 149.979 158.808 150.929 159.393 151.515L168.939 161.061ZM168.5 11L168.5 160L171.5 160L171.5 11L168.5 11Z" fill="white"/>
<circle cx="170" cy="6" r="4.5" stroke="white" stroke-width="3"/>
<path d="M149.999 24L148.499 24L148.499 24L149.999 24ZM0.938377 78.9393C0.352577 79.5251 0.352577 80.4749 0.938377 81.0607L10.4843 90.6066C11.0701 91.1924 12.0198 91.1924 12.6056 90.6066C13.1914 90.0208 13.1914 89.0711 12.6056 88.4853L4.12035 80L12.6056 71.5147C13.1914 70.9289 13.1914 69.9792 12.6056 69.3934C12.0198 68.8076 11.0701 68.8076 10.4843 69.3934L0.938377 78.9393ZM148.499 24C148.499 44.939 145.236 58.3986 137.056 66.697C128.881 74.9902 115.427 78.5 93.999 78.5L93.999 81.5C115.571 81.5 130.117 78.0098 139.192 68.803C148.262 59.6014 151.499 45.061 151.499 24L148.499 24ZM93.999 78.5L1.99903 78.5L1.99903 81.5L93.999 81.5L93.999 78.5ZM151.499 24L151.499 10.5L148.499 10.5L148.499 24L151.499 24Z" fill="white"/>
<circle cx="150" cy="6" r="4.5" stroke="white" stroke-width="3"/>
<path d="M190.001 24L191.501 24V24L190.001 24ZM339.062 78.9393C339.647 79.5251 339.647 80.4749 339.062 81.0607L329.516 90.6066C328.93 91.1924 327.98 91.1924 327.394 90.6066C326.809 90.0208 326.809 89.0711 327.394 88.4853L335.88 80L327.394 71.5147C326.809 70.9289 326.809 69.9792 327.394 69.3934C327.98 68.8076 328.93 68.8076 329.516 69.3934L339.062 78.9393ZM191.501 24C191.501 44.939 194.764 58.3986 202.944 66.697C211.119 74.9902 224.573 78.5 246.001 78.5L246.001 81.5C224.429 81.5 209.883 78.0098 200.808 68.803C191.738 59.6014 188.501 45.061 188.501 24L191.501 24ZM246.001 78.5L338.001 78.5L338.001 81.5L246.001 81.5L246.001 78.5ZM188.501 24L188.501 9.50001L191.501 9.49999L191.501 24L188.501 24Z" fill="white"/>
<circle r="4.5" transform="matrix(-1 0 0 1 190 6)" stroke="white" stroke-width="3"/>
</svg>

'''
'''--- src/assets/images/arrow-lower-left.svg ---
<svg width="95" height="124" viewBox="0 0 95 124" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M6 56L7.5 56L6 56ZM94.0607 110.939C94.6464 111.525 94.6464 112.475 94.0607 113.061L84.5147 122.607C83.9289 123.192 82.9792 123.192 82.3934 122.607C81.8076 122.021 81.8076 121.071 82.3934 120.485L90.8787 112L82.3934 103.515C81.8076 102.929 81.8076 101.979 82.3934 101.393C82.9792 100.808 83.9289 100.808 84.5147 101.393L94.0607 110.939ZM7.5 56C7.5 76.939 10.7634 90.3986 18.9433 98.697C27.118 106.99 40.572 110.5 62 110.5L62 113.5C40.428 113.5 25.882 110.01 16.8067 100.803C7.7366 91.6014 4.5 77.061 4.5 56L7.5 56ZM62 110.5L93 110.5L93 113.5L62 113.5L62 110.5ZM4.5 56L4.5 10.5L7.5 10.5L7.5 56L4.5 56Z" fill="white"/>
<circle cx="6" cy="6" r="4.5" stroke="white" stroke-width="3"/>
</svg>

'''
'''--- src/assets/images/arrow-lower-right.svg ---
<svg width="95" height="124" viewBox="0 0 95 124" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M89 56L87.5 56L89 56ZM0.939341 110.939C0.353557 111.525 0.353557 112.475 0.939342 113.061L10.4853 122.607C11.0711 123.192 12.0208 123.192 12.6066 122.607C13.1924 122.021 13.1924 121.071 12.6066 120.485L4.12133 112L12.6066 103.515C13.1924 102.929 13.1924 101.979 12.6066 101.393C12.0208 100.808 11.0711 100.808 10.4853 101.393L0.939341 110.939ZM87.5 56C87.5 76.939 84.2366 90.3986 76.0567 98.697C67.882 106.99 54.428 110.5 33 110.5L33 113.5C54.572 113.5 69.118 110.01 78.1933 100.803C87.2634 91.6014 90.5 77.061 90.5 56L87.5 56ZM33 110.5L2 110.5L2 113.5L33 113.5L33 110.5ZM90.5 56L90.5 10.5L87.5 10.5L87.5 56L90.5 56Z" fill="white"/>
<circle r="4.5" transform="matrix(-1 0 0 1 89 6)" stroke="white" stroke-width="3"/>
</svg>

'''
'''--- src/assets/images/docs-icon.svg ---
<svg width="17" height="19" viewBox="0 0 17 19" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M4.75 5C4.75 4.58579 5.08579 4.25 5.5 4.25H12.5C12.9142 4.25 13.25 4.58579 13.25 5C13.25 5.41421 12.9142 5.75 12.5 5.75H5.5C5.08579 5.75 4.75 5.41421 4.75 5Z" fill="white"/>
<path d="M5.5 7.25C5.08579 7.25 4.75 7.58579 4.75 8C4.75 8.41421 5.08579 8.75 5.5 8.75H10.5C10.9142 8.75 11.25 8.41421 11.25 8C11.25 7.58579 10.9142 7.25 10.5 7.25H5.5Z" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M5 0.25C2.37665 0.25 0.25 2.37665 0.25 5V15C0.25 17.0711 1.92893 18.75 4 18.75H15C15.9665 18.75 16.75 17.9665 16.75 17V2C16.75 1.0335 15.9665 0.25 15 0.25H5ZM15.25 11.25V2C15.25 1.86193 15.1381 1.75 15 1.75H5C3.20507 1.75 1.75 3.20507 1.75 5V11.9997C2.37675 11.529 3.1558 11.25 4 11.25H15.25ZM15.25 12.75H4C2.75736 12.75 1.75 13.7574 1.75 15C1.75 16.2426 2.75736 17.25 4 17.25H15C15.1381 17.25 15.25 17.1381 15.25 17V12.75Z" fill="white"/>
</svg>

'''
'''--- src/assets/images/farming-icon.svg ---
<svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M24.0001 44.0001C35.0458 44.0001 44.0001 35.0458 44.0001 24.0001C44.0001 12.9543 35.0458 4 24.0001 4C12.9543 4 4 12.9543 4 24.0001C4 35.0458 12.9543 44.0001 24.0001 44.0001Z" stroke="white" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M24.002 24H28.002C30.2111 24 32.002 25.7909 32.002 28V28C32.002 30.2092 30.2111 32 28.002 32H23.2511L18.002 31.9989" stroke="white" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M30.001 15.999H20.001C17.7918 15.999 16.0009 17.7899 16.0009 19.999V19.999C16.0009 22.2082 17.7918 23.999 20.0009 23.999H24.001" stroke="white" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M23.999 14V12" stroke="white" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M23.999 35.999L24.001 31.9989" stroke="white" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- src/assets/images/hapi-logo.svg ---
<svg width="29" height="32" viewBox="0 0 29 32" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M11.598 6.84863C11.3342 6.87061 11.0777 6.91458 10.814 6.98052C9.01882 7.42015 7.86113 8.30673 7.12109 9.25193C8.91624 8.90755 10.7773 9.34718 12.0522 9.79413C12.0889 9.80879 12.1255 9.82344 12.1695 9.83809C11.9716 9.53036 11.7885 9.17865 11.6419 8.78299C11.4148 8.18949 11.4441 7.49342 11.598 6.84863Z" fill="#131313"/>
<path d="M7.01878 12.336C6.30073 12.2554 5.61931 12.1822 5.21631 12.1822C5.16502 12.1822 5.11373 12.1821 5.06977 12.1895C2.27814 12.38 0.145953 14.9225 0.00673764 18.227C-0.0958419 20.5863 0.995898 22.1177 1.71395 22.8724C1.60405 21.9565 1.70663 21.0406 2.02902 20.1394C2.88629 17.7508 4.54222 17.0547 6.46925 16.2487C7.26058 15.919 8.11785 15.5526 8.98245 15.0324L12.6533 12.1309C11.9133 12.2921 10.8655 12.4606 9.51 12.5192C8.9165 12.5485 7.94933 12.4386 7.01878 12.336Z" fill="#131313"/>
<path d="M15.6571 10.7831C15.6205 10.8637 15.723 10.937 15.789 10.871C16.1773 10.4754 16.9833 9.82324 18.0457 9.83057C19.1888 9.8379 20.6469 10.5779 21.0132 11.4499C21.3063 12.1679 20.5296 12.6588 20.5296 12.6588C20.3465 12.461 19.9435 12.1972 19.1961 12.1752C18.097 12.1386 17.3423 13.0618 17.4303 13.1204C17.9798 13.4648 18.6979 13.3915 19.1228 13.3769C19.5478 13.3622 20.2292 13.1937 20.4271 13.1204C20.7714 12.9886 21.2843 12.5489 21.5188 11.9408C21.702 11.4645 22.1343 9.8379 19.6724 9.42025C18.119 9.15648 16.2359 9.54481 15.6571 10.7831Z" fill="#131313"/>
<path d="M26.941 14.3444C26.9043 14.3004 26.8604 14.2491 26.8164 14.1978L26.7944 14.1758C26.5087 13.8534 26.2376 13.5677 26.1057 13.4358C26.1936 13.1281 26.3988 12.2488 26.179 11.5234C26.0104 10.9592 25.6807 10.3877 25.5049 10.102L25.4463 10.014C25.4169 9.97008 25.3876 9.92612 25.3657 9.88948C25.3437 9.86017 25.329 9.83819 25.3217 9.81621L25.307 9.76492C25.1239 9.25202 24.6769 8.13098 24.1054 7.706L28.4577 0.987042C28.6262 0.730594 28.3038 0.437509 28.062 0.620687L21.7021 5.49322C21.0646 4.59198 20.1561 3.89591 20.1048 3.85194C20.0462 3.80798 19.9582 3.80065 19.8923 3.83729C19.8264 3.87392 19.7897 3.95452 19.797 4.02779C19.797 4.03512 19.841 4.46009 19.5846 5.31737C20.1341 5.5152 20.603 5.75699 20.9987 6.02809L20.669 6.28454C20.0242 5.8669 19.2036 5.5152 18.1558 5.36133C16.8589 5.17082 15.8184 5.4346 15.0711 6.14533C15.5034 6.42376 16.0309 6.78279 16.3167 7.05389C16.3753 7.10518 16.4266 7.1638 16.4779 7.22241C16.2507 7.28836 16.0236 7.36163 15.7964 7.4349C15.7745 7.42025 15.7598 7.39827 15.7378 7.38361C15.5986 7.25905 15.4154 7.13449 15.2249 6.99527C14.8293 6.71684 14.3677 6.38712 14.0672 5.96948C13.906 5.74234 13.7888 5.49322 13.7522 5.20746C13.7302 5.03161 13.6789 4.91437 13.591 4.84843C13.547 4.81179 13.3858 4.70189 13.166 4.87041C13.0195 4.98765 12.8436 5.25875 12.6897 5.6251C12.3087 6.52634 12.0523 7.97711 12.5579 9.0029C12.6458 9.17143 12.7337 9.33262 12.829 9.48649C12.7997 9.55976 12.7777 9.64036 12.763 9.71363C12.7191 9.96275 12.6971 10.2851 12.6751 10.6442C11.2243 10.036 8.9749 9.36193 6.92331 9.86017C5.17213 10.2851 4.03643 11.1424 3.28906 12.0583C3.83127 11.8312 4.40278 11.692 5.01093 11.648C5.42125 11.6187 6.21258 11.7066 7.0552 11.8019C7.9198 11.8971 8.90896 12.007 9.46582 11.9777C10.8726 11.9191 11.9351 11.7359 12.6531 11.5674C12.6531 11.9631 12.6604 12.3807 12.6824 12.8057C12.7337 14.0366 12.8656 15.3189 13.0488 16.2128C13.3126 17.5243 14.2577 20.2573 15.3495 20.9461C15.7525 21.2025 16.3386 21.5469 17.0274 21.9279C16.8442 22.3969 16.6537 23.0343 16.6537 23.6498C16.6537 24.7635 17.0347 25.5988 17.4597 26.3608C17.7967 26.9617 18.1631 27.5112 18.3976 28.1193C18.5807 28.5956 18.1997 30.1489 17.9872 30.9696C17.8993 31.2993 17.848 31.5045 17.8627 31.4825C18.1338 31.1088 18.4122 30.6912 18.6907 30.2515C19.8117 28.4784 20.1121 26.8078 20.1194 26.7345L20.1341 26.6319L20.0535 26.5587C20.0388 26.544 18.7932 25.4083 18.7126 24.1187C18.6833 23.6132 18.7859 23.2761 19.0277 23.1076C19.0643 23.0856 19.101 23.0636 19.1449 23.0416C19.6945 23.3127 20.244 23.5765 20.7716 23.811C20.9767 24.0674 21.431 24.4997 21.6362 24.6902C21.8853 24.9247 22.1417 25.2618 22.5301 25.2618C22.9184 25.2618 23.6951 25.2618 24.0907 25.2618C24.4864 25.2618 25.0506 25.2618 25.3583 25.1079C25.6661 24.954 26.157 24.6976 26.1643 24.1847C26.1643 24.0748 26.1936 23.8989 26.2302 23.6864C26.5014 23.3274 26.5307 22.9098 26.582 22.2796C26.6186 21.862 26.7065 21.1439 26.8018 20.3819C26.9483 19.2315 27.1022 18.0372 27.0875 17.6049C27.0729 17.0041 27.0069 16.5572 26.9849 16.4179C27.1022 16.1249 27.4099 14.8792 26.941 14.3444ZM15.5766 20.609C14.6021 19.9936 13.7009 17.3412 13.4518 16.1249C13.1001 14.3737 12.9462 11.1058 13.166 9.76492C13.3638 8.54129 16.7563 7.23707 19.1523 7.15647C19.2915 7.14914 19.4307 7.14914 19.5626 7.14914C19.6358 7.14914 19.7091 7.14914 19.7824 7.14914C19.7751 7.50817 19.8776 8.29217 20.7935 9.01756C21.812 9.82354 23.021 9.38391 23.021 9.38391L23.9076 8.01374C24.2373 8.27019 24.5963 8.94429 24.8601 9.63303C24.7941 9.60373 24.7209 9.58174 24.6329 9.56709C24.0394 9.47184 22.3176 9.50115 22.8744 11.8605C22.9477 12.1536 23.2554 12.5492 24.1347 13.4944C24.3399 13.7142 24.5084 13.8828 24.6476 14.022C25.0579 14.4323 25.1898 14.5642 25.1971 14.8866C25.1971 14.9086 25.1825 15.0038 25.1678 15.1064C25.1092 15.0624 25.0286 15.0258 24.9187 15.0331C24.6549 15.0185 22.4495 15.4434 21.812 16.1395C21.6874 16.2787 21.4823 16.33 21.3211 16.2421C21.3138 16.2348 21.3064 16.2348 21.2991 16.2274C21.1965 16.1688 21.1306 16.0882 21.0939 15.971C20.9987 15.5973 21.3064 15.0038 21.431 14.7986C21.475 14.7254 21.453 14.6301 21.387 14.5862C21.3138 14.5422 21.2185 14.5642 21.1745 14.6301C21.1672 14.6448 21.1086 14.74 21.0353 14.8866C20.7935 15.3702 20.4345 15.7805 19.9876 16.0809C19.2695 16.5645 18.229 17.1946 17.3864 17.4144C16.0675 17.7588 15.562 16.8136 15.54 16.7696C15.5034 16.6964 15.4081 16.6671 15.3348 16.7037C15.2616 16.7403 15.2249 16.8356 15.2689 16.9089C15.2762 16.9162 15.7305 17.7954 16.8442 17.7954C16.8882 17.7954 16.9468 17.7881 17.0054 17.7808C17.3205 17.7441 17.6355 17.8174 17.9066 17.9786C18.1631 18.1325 18.4928 18.323 18.8225 18.4915C19.7458 18.9531 19.8996 18.9458 20.2513 18.8872C20.3319 18.8725 23.9002 18.7113 26.1203 18.2864L26.3841 18.301C26.56 18.3083 26.6992 18.4695 26.6772 18.6454V18.6527C26.6625 18.7553 26.6039 18.8432 26.516 18.8945C26.3182 19.0044 26.0397 19.151 25.7906 19.2535C25.6734 19.2975 25.5488 19.3415 25.4169 19.3708C25.0139 19.466 24.6036 19.488 24.6036 19.488C24.6036 19.488 24.208 19.5759 23.6145 19.6419C23.3654 19.6712 23.0869 19.6932 22.7865 19.7078C21.7607 19.7591 21.834 19.825 20.9694 19.7811C20.7569 19.7738 20.5517 19.7591 20.3612 19.7371C20.1781 19.7151 20.1268 19.9862 20.3099 20.0302C20.7569 20.1401 21.2844 20.2207 21.8706 20.2134C21.9439 20.2134 22.0098 20.2134 22.0831 20.2134C23.021 20.2061 23.8709 20.7629 24.2373 21.6275C24.3911 21.9939 24.5377 22.5068 24.6329 22.983C24.7648 23.5985 24.2446 24.1627 23.6218 24.1041C22.7059 24.0088 21.6728 23.7524 21.0866 23.4959C19.0424 22.624 16.6317 21.2831 15.5766 20.609ZM25.1532 10.2485L25.2411 10.3877C25.4169 10.6808 25.6734 11.1571 25.8199 11.626C26.0471 12.388 25.7174 13.4138 25.7174 13.4212L25.6807 13.5311L25.7613 13.6117C25.7613 13.619 26.1277 13.9927 26.516 14.425L26.5233 14.4396C26.5673 14.4909 26.6113 14.5349 26.6552 14.5862C26.9263 14.9012 26.7944 15.8318 26.6479 16.3373L26.6332 16.3813L26.6406 16.4253C26.6406 16.4253 26.6625 16.5352 26.6845 16.711C26.4867 16.733 26.3402 16.9089 26.3621 17.114L26.4208 17.6635L25.7906 17.6709L24.8015 16.5498C24.7282 16.4619 24.7282 16.33 24.8161 16.2567C25.3363 15.7878 25.4096 15.5607 25.4243 15.4727C25.4902 15.0771 25.5122 14.9305 25.5122 14.8792C25.5122 14.4323 25.2997 14.2198 24.8747 13.7948C24.7355 13.6556 24.567 13.4871 24.3692 13.2746C24.3252 13.2306 24.2886 13.1867 24.2446 13.1427C24.3985 13.1867 24.6036 13.2306 24.8674 13.2526C25.4829 13.3039 25.6661 13.15 25.6661 13.15C25.6661 13.15 25.776 12.9522 25.5855 12.6665C25.395 12.3807 25.1312 12.1755 24.6183 12.1609C24.2519 12.1462 23.9222 12.432 23.761 12.6005C23.6951 12.5272 23.5485 12.2561 23.4826 11.8019C23.3727 11.0911 23.6365 10.7614 23.827 10.6002C24.164 10.3145 24.6256 10.036 24.8821 10.0507C24.948 10.058 25.0213 10.0653 25.0799 10.08C25.0872 10.1386 25.1165 10.1899 25.1532 10.2485ZM26.2302 22.243C26.179 22.8438 26.1497 23.1809 25.9518 23.452C25.7833 23.6791 25.4169 23.5106 25.4682 23.2322C25.4975 23.0783 25.5195 22.9171 25.5268 22.7632C25.5488 21.9792 25.1678 21.2318 25.0359 20.7336V20.7263C24.97 20.4479 25.1239 20.1621 25.3876 20.0449C25.5049 19.9936 25.6368 19.9276 25.776 19.8544C26.113 19.6858 26.5014 19.9496 26.4501 20.3233V20.3306C26.3621 21.0926 26.2669 21.818 26.2302 22.243ZM20.4931 16.1249C20.625 16.0296 20.8155 16.0662 20.9034 16.2128C20.9621 16.3154 21.0427 16.4253 21.1526 16.5132C21.4823 16.7843 21.8706 16.7696 22.1197 16.7696C22.3615 16.7696 22.5154 16.7257 22.5594 16.711C22.7352 16.6744 22.8744 16.8576 22.7865 17.0188C22.596 17.3705 22.3396 17.8321 22.3102 17.8541C22.259 17.8907 20.6397 18.2277 20.4345 18.2497C20.2293 18.2717 19.5846 18.3376 19.101 18.0299C18.8958 17.9053 18.698 17.7588 18.5368 17.6416C18.4122 17.5536 18.4342 17.3631 18.5661 17.2972C19.2988 16.9308 20.0242 16.4546 20.4931 16.1249ZM24.2812 17.18L24.8894 17.8467C24.9993 17.9713 24.926 18.1691 24.7648 18.1911C24.3985 18.2351 24.0321 18.279 23.6731 18.3157C23.5046 18.3303 23.3873 18.1471 23.4753 18.0006C23.6145 17.7808 23.7903 17.4877 23.9515 17.2093C24.0175 17.092 24.186 17.0774 24.2812 17.18ZM21.3211 6.43109L27.4392 1.36805L21.8047 7.0026C21.6215 7.17845 21.3211 7.11983 21.2112 6.89269C21.1379 6.7315 21.1819 6.53367 21.3211 6.43109Z" fill="#131313"/>
<path d="M6.68226 16.7627C4.80652 17.5467 3.32644 18.1695 2.54977 20.331C1.44338 23.4083 3.23852 26.8154 7.12922 29.1308C5.8543 24.1484 7.38566 22.3093 8.74851 20.6827C9.21744 20.1185 9.6644 19.5836 9.98679 18.9461C10.932 17.0557 10.888 15.2459 10.8001 14.4033C9.40062 15.6196 7.96451 16.2278 6.68226 16.7627Z" fill="#131313"/>
</svg>

'''
'''--- src/assets/images/jets-icon.svg ---
<svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M17.9325 8.19439C17.0132 6.81541 14.9868 6.81541 14.0675 8.19439C11.9391 11.387 10.7189 15.0907 10.5268 18.9097L6.20943 20.3489C5.18858 20.6892 4.5 21.6445 4.5 22.7206V26.9998C4.5 28.3805 5.61929 29.4998 7 29.4998H10.5V29.9998C10.5 31.3964 11.318 32.602 12.501 33.1635C12.5304 35.3552 13.1927 37.493 14.4097 39.3186C15.1663 40.4534 16.8338 40.4534 17.5903 39.3186C18.8073 37.493 19.4696 35.3552 19.499 33.1635C20.682 32.602 21.5 31.3964 21.5 29.9998V28.9269L23.7764 27.7887C23.9172 27.7183 24.0828 27.7183 24.2236 27.7887L26.5 28.9269V29.9998C26.5 31.3964 27.318 32.602 28.501 33.1635C28.5304 35.3552 29.1927 37.493 30.4097 39.3186C31.1662 40.4534 32.8337 40.4534 33.5903 39.3186C34.8073 37.493 35.4696 35.3552 35.499 33.1635C36.682 32.602 37.5 31.3964 37.5 29.9998V29.4998H41C42.3807 29.4998 43.5 28.3805 43.5 26.9998V22.7206C43.5 21.6445 42.8114 20.6892 41.7906 20.3489L37.4732 18.9097C37.2811 15.0907 36.0609 11.387 33.9325 8.19439C33.0132 6.81541 30.9868 6.81541 30.0675 8.19439C28.3904 10.7101 27.2772 13.5431 26.7865 16.4998H21.2135C20.7228 13.5431 19.6096 10.7101 17.9325 8.19439ZM16.4857 33.4998H15.5143C15.5616 34.3088 15.7259 35.1039 16 35.8609C16.2741 35.1039 16.4384 34.3088 16.4857 33.4998ZM18 30.4998C18.2761 30.4998 18.5 30.276 18.5 29.9998V27.9998V19.9771C18.5 16.7309 17.6339 13.5501 16 10.7598C14.3661 13.5501 13.5 16.7309 13.5 19.9771V19.9998V27.9998V29.4998V29.9998C13.5 30.276 13.7239 30.4998 14 30.4998H18ZM34.5 29.9998C34.5 30.276 34.2761 30.4998 34 30.4998H30C29.7239 30.4998 29.5 30.276 29.5 29.9998V27.9998V19.9771C29.5 16.7309 30.3661 13.5501 32 10.7598C33.6339 13.5501 34.5 16.7309 34.5 19.9771V19.9998V27.9998V29.4998V29.9998ZM32 35.8609C31.7259 35.1039 31.5616 34.3088 31.5143 33.4998H32.4857C32.4384 34.3088 32.2741 35.1039 32 35.8609ZM26.5 25.5728V19.9771V19.4998H21.5V19.9771V25.5728L22.4348 25.1054C23.4201 24.6127 24.5799 24.6127 25.5652 25.1054L26.5 25.5728ZM10.5 26.4998V22.081L7.5 23.081V26.4998H10.5ZM37.5 26.4998V22.081L40.5 23.081V26.4998H37.5Z" fill="white"/>
</svg>

'''
'''--- src/assets/images/jumbo-logo.svg ---
<svg width="37" height="28" viewBox="0 0 37 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M34.0714 2.62833C36.4295 4.99716 36.4295 8.80193 36.4295 16.4115V25.5424C36.4295 26.6601 35.5234 27.5662 34.4056 27.5662C33.2879 27.5662 32.3818 26.6601 32.3818 25.5424V21.5756C32.3818 20.4579 31.4756 19.5518 30.3579 19.5518C29.2401 19.5518 28.334 20.4579 28.334 21.5756V25.5424C28.334 26.6601 27.4177 27.5662 26.3 27.5662C25.1934 27.5662 24.2863 26.6692 24.2863 25.5626C24.2863 24.456 23.3893 23.559 22.2827 23.559H22.2422C21.1356 23.559 20.2386 24.456 20.2386 25.5626C20.2386 26.6692 19.3415 27.5662 18.235 27.5662H18.1945C17.0879 27.5662 16.1909 26.6692 16.1909 25.5626C16.1909 24.456 15.2938 23.559 14.1873 23.559L14.1468 23.559C13.0402 23.559 12.1432 24.456 12.1432 25.5626C12.1432 26.6692 11.2461 27.5662 10.1395 27.5662H10.0991C8.99249 27.5662 8.09544 26.6692 8.09544 25.5626C8.09544 24.456 7.19839 23.559 6.09182 23.559H6.05134C4.94477 23.559 4.04772 24.456 4.04772 25.5626C4.04772 26.6692 3.1406 27.5662 2.03403 27.5662C0.916282 27.5662 0 26.6601 0 25.5424V16.4115C0 8.80193 0 4.99717 2.35803 2.62834C2.36673 2.6196 2.37545 2.61087 2.3842 2.60217C4.75303 0.244141 8.55779 0.244141 16.1673 0.244141H20.2622C27.8717 0.244141 31.6764 0.244141 34.0453 2.60217C34.054 2.61087 34.0627 2.61959 34.0714 2.62833ZM30.3579 15.585C31.4756 15.585 32.3817 14.6789 32.3817 13.5611C32.3817 12.4434 31.4756 11.5373 30.3579 11.5373C29.2401 11.5373 28.334 12.4434 28.334 13.5611C28.334 14.6789 29.2401 15.585 30.3579 15.585Z" fill="white"/>
</svg>

'''
'''--- src/assets/images/mobile-arrow-central.svg ---
<svg width="24" height="178" viewBox="0 0 24 178" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M10.9393 177.061C11.5251 177.646 12.4749 177.646 13.0607 177.061L22.6066 167.515C23.1924 166.929 23.1924 165.979 22.6066 165.393C22.0208 164.808 21.0711 164.808 20.4853 165.393L12 173.879L3.51473 165.393C2.92894 164.808 1.97919 164.808 1.39341 165.393C0.807618 165.979 0.807618 166.929 1.39341 167.515L10.9393 177.061ZM10.5 11L10.5 176L13.5 176L13.5 11L10.5 11Z" fill="white"/>
<circle cx="12" cy="6" r="4.5" stroke="white" stroke-width="3"/>
</svg>

'''
'''--- src/assets/images/mobile-arrow-lower-left.svg ---
<svg width="42" height="124" viewBox="0 0 42 124" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M6 78.8966L4.5 78.8966L6 78.8966ZM41.0607 110.939C41.6464 111.525 41.6464 112.475 41.0607 113.061L31.5147 122.607C30.9289 123.192 29.9792 123.192 29.3934 122.607C28.8076 122.021 28.8076 121.071 29.3934 120.485L37.8787 112L29.3934 103.515C28.8076 102.929 28.8076 101.979 29.3934 101.393C29.9792 100.808 30.9289 100.808 31.5147 101.393L41.0607 110.939ZM7.5 78.8966C7.5 91.2471 9.45132 98.98 14.1468 103.701C18.8413 108.421 26.6486 110.5 39.4035 110.5L39.4035 113.5C26.5093 113.5 17.6149 111.442 12.0198 105.816C6.42587 100.192 4.5 91.3736 4.5 78.8966L7.5 78.8966ZM39.4035 110.5L40 110.5L40 113.5L39.4035 113.5L39.4035 110.5ZM4.5 78.8966L4.5 11L7.5 11L7.5 78.8966L4.5 78.8966Z" fill="white"/>
<circle cx="6" cy="6" r="4.5" stroke="white" stroke-width="3"/>
</svg>

'''
'''--- src/assets/images/mobile-arrow-lower-right.svg ---
<svg width="42" height="124" viewBox="0 0 42 124" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M36 78.8966L37.5 78.8966L36 78.8966ZM0.939341 110.939C0.353557 111.525 0.353557 112.475 0.939342 113.061L10.4853 122.607C11.0711 123.192 12.0208 123.192 12.6066 122.607C13.1924 122.021 13.1924 121.071 12.6066 120.485L4.12132 112L12.6066 103.515C13.1924 102.929 13.1924 101.979 12.6066 101.393C12.0208 100.808 11.0711 100.808 10.4853 101.393L0.939341 110.939ZM34.5 78.8966C34.5 91.2471 32.5487 98.98 27.8532 103.701C23.1587 108.421 15.3514 110.5 2.59649 110.5L2.59649 113.5C15.4907 113.5 24.3851 111.442 29.9802 105.816C35.5741 100.192 37.5 91.3736 37.5 78.8966L34.5 78.8966ZM2.59649 110.5L2 110.5L2 113.5L2.59649 113.5L2.59649 110.5ZM37.5 78.8966L37.5 11L34.5 11L34.5 78.8966L37.5 78.8966Z" fill="white"/>
<circle r="4.5" transform="matrix(-1 0 0 1 36 6)" stroke="white" stroke-width="3"/>
</svg>

'''
'''--- src/assets/images/mobile-arrow-upper-left.svg ---
<svg width="52" height="92" viewBox="0 0 52 92" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M40.2353 6L40.2353 4.5L40.2353 4.5L40.2353 6ZM13.0607 91.0607C12.4749 91.6464 11.5251 91.6464 10.9393 91.0607L1.3934 81.5147C0.807611 80.9289 0.807611 79.9792 1.3934 79.3934C1.97919 78.8076 2.92893 78.8076 3.51472 79.3934L12 87.8787L20.4853 79.3934C21.0711 78.8076 22.0208 78.8076 22.6066 79.3934C23.1924 79.9792 23.1924 80.9289 22.6066 81.5147L13.0607 91.0607ZM40.2353 7.5C29.7138 7.5 23.2018 9.18826 19.2416 13.1823C15.2764 17.1815 13.5 23.8642 13.5 34.8895L10.5 34.8895C10.5 23.7319 12.2531 15.9698 17.1113 11.07C21.9747 6.16499 29.5803 4.5 40.2353 4.5L40.2353 7.5ZM13.5 34.8895L13.5 90L10.5 90L10.5 34.8895L13.5 34.8895ZM40.2353 4.5L41 4.5L41 7.5L40.2353 7.5L40.2353 4.5Z" fill="white"/>
<circle cx="46" cy="6" r="4.5" transform="rotate(90 46 6)" stroke="white" stroke-width="3"/>
</svg>

'''
'''--- src/assets/images/mobile-arrow-upper-right.svg ---
<svg width="52" height="92" viewBox="0 0 52 92" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M11.7647 6L11.7647 4.5L11.7647 4.5L11.7647 6ZM38.9393 91.0607C39.5251 91.6464 40.4749 91.6464 41.0607 91.0607L50.6066 81.5147C51.1924 80.9289 51.1924 79.9792 50.6066 79.3934C50.0208 78.8076 49.0711 78.8076 48.4853 79.3934L40 87.8787L31.5147 79.3934C30.9289 78.8076 29.9792 78.8076 29.3934 79.3934C28.8076 79.9792 28.8076 80.9289 29.3934 81.5147L38.9393 91.0607ZM11.7647 7.5C22.2862 7.5 28.7982 9.18826 32.7584 13.1823C36.7236 17.1815 38.5 23.8642 38.5 34.8895L41.5 34.8895C41.5 23.7319 39.7469 15.9698 34.8887 11.07C30.0253 6.16499 22.4197 4.5 11.7647 4.5L11.7647 7.5ZM38.5 34.8895L38.5 90L41.5 90L41.5 34.8895L38.5 34.8895ZM11.7647 4.5L11 4.5L11 7.5L11.7647 7.5L11.7647 4.5Z" fill="white"/>
<circle r="4.5" transform="matrix(-4.37114e-08 1 1 4.37114e-08 6 6)" stroke="white" stroke-width="3"/>
</svg>

'''
'''--- src/assets/images/near-logo.svg ---
<svg width="84" height="22" viewBox="0 0 84 22" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M41.8511 4.59497V17.427C41.8514 17.4528 41.8466 17.4784 41.8369 17.5022C41.8272 17.5261 41.8128 17.5478 41.7945 17.566C41.7763 17.5842 41.7546 17.5986 41.7307 17.6083C41.7069 17.618 41.6813 17.6229 41.6555 17.6226H40.311C40.006 17.6201 39.7062 17.5431 39.4378 17.3983C39.1694 17.2534 38.9404 17.0451 38.771 16.7915L32.7086 7.43024L32.9041 12.0987V17.4515C32.9045 17.4772 32.8996 17.5028 32.8899 17.5267C32.8802 17.5505 32.8658 17.5722 32.8476 17.5905C32.8294 17.6087 32.8077 17.6231 32.7838 17.6328C32.7599 17.6425 32.7343 17.6473 32.7086 17.647H30.9485C30.9227 17.6473 30.8972 17.6425 30.8733 17.6328C30.8494 17.6231 30.8277 17.6087 30.8095 17.5905C30.7913 17.5722 30.7769 17.5505 30.7672 17.5267C30.7574 17.5028 30.7526 17.4772 30.7529 17.4515V4.59497C30.7526 4.5692 30.7574 4.54362 30.7672 4.51975C30.7769 4.49588 30.7913 4.47419 30.8095 4.45597C30.8277 4.43775 30.8494 4.42336 30.8733 4.41364C30.8972 4.40393 30.9227 4.3991 30.9485 4.39943H32.2685C32.5736 4.40186 32.8734 4.47886 33.1418 4.62371C33.4102 4.76856 33.6391 4.97686 33.8086 5.23046L39.871 14.5673L39.6755 9.89888V4.59497C39.6751 4.5692 39.68 4.54362 39.6897 4.51975C39.6994 4.49588 39.7138 4.47419 39.732 4.45597C39.7502 4.43775 39.7719 4.42336 39.7958 4.41364C39.8197 4.40393 39.8452 4.3991 39.871 4.39943H41.6311C41.7777 4.39943 41.8511 4.47276 41.8511 4.59497Z" fill="white"/>
<path d="M59.8901 17.5984H58.0323C58.0029 17.5986 57.9739 17.5918 57.9477 17.5783C57.9216 17.5649 57.8992 17.5453 57.8823 17.5212C57.8655 17.4971 57.8547 17.4693 57.851 17.4402C57.8474 17.411 57.8508 17.3814 57.8611 17.3539L62.7991 4.57076C62.8208 4.52299 62.8549 4.48191 62.8979 4.45182C62.9409 4.42172 62.9912 4.40372 63.0435 4.39967H65.3903C65.4442 4.3972 65.4974 4.41265 65.5416 4.4436C65.5859 4.47455 65.6186 4.51926 65.6347 4.57076L70.5971 17.3539C70.6074 17.3814 70.6109 17.411 70.6072 17.4402C70.6035 17.4693 70.5928 17.4971 70.5759 17.5212C70.5591 17.5453 70.5366 17.5649 70.5105 17.5783C70.4844 17.5918 70.4554 17.5986 70.426 17.5984H68.5682C68.5305 17.598 68.4939 17.5861 68.4633 17.5642C68.4327 17.5424 68.4096 17.5116 68.397 17.4761L64.4125 6.96608C64.3975 6.93332 64.3733 6.90556 64.343 6.88609C64.3127 6.86663 64.2774 6.85628 64.2413 6.85628C64.2053 6.85628 64.17 6.86663 64.1397 6.88609C64.1094 6.90556 64.0853 6.93332 64.0702 6.96608L60.0857 17.4761C60.0656 17.511 60.0373 17.5404 60.0032 17.5618C59.9691 17.5831 59.9302 17.5956 59.8901 17.5984Z" fill="white"/>
<path d="M83.5513 17.3048L79.8356 12.563C81.9379 12.172 83.1602 10.7543 83.1602 8.579C83.1602 6.08591 81.5468 4.39941 78.6622 4.39941H73.4799C73.4087 4.40005 73.3407 4.42858 73.2904 4.47887C73.2401 4.52915 73.2116 4.59717 73.211 4.66828C73.21 4.89965 73.2548 5.12893 73.343 5.34288C73.4311 5.55683 73.5607 5.75121 73.7243 5.91482C73.8879 6.07843 74.0823 6.20802 74.2963 6.29612C74.5103 6.38421 74.7396 6.42907 74.971 6.4281H78.4667C80.2023 6.4281 81.0334 7.30801 81.0334 8.60344C81.0334 9.89886 80.2267 10.7788 78.4667 10.7788H73.5287C73.4576 10.7794 73.3896 10.8079 73.3393 10.8582C73.289 10.9085 73.2605 10.9765 73.2598 11.0476V17.4026C73.2595 17.4283 73.2643 17.4539 73.2741 17.4778C73.2838 17.5016 73.2982 17.5233 73.3164 17.5416C73.3346 17.5598 73.3563 17.5742 73.3802 17.5839C73.4041 17.5936 73.4296 17.5984 73.4554 17.5981H75.2155C75.2412 17.5984 75.2668 17.5936 75.2907 17.5839C75.3146 17.5742 75.3363 17.5598 75.3545 17.5416C75.3727 17.5233 75.3871 17.5016 75.3968 17.4778C75.4065 17.4539 75.4114 17.4283 75.411 17.4026V12.6853H77.44L80.6667 16.8893C80.8374 17.1153 81.0594 17.2975 81.3145 17.4208C81.5695 17.5441 81.8503 17.6048 82.1335 17.5981H83.478C83.5757 17.5981 83.6491 17.427 83.5513 17.3048Z" fill="white"/>
<path d="M54.3189 4.39894H46.1297C46.0971 4.39678 46.0643 4.40162 46.0337 4.41314C46.003 4.42466 45.9752 4.44259 45.9521 4.46573C45.9289 4.48887 45.911 4.51669 45.8995 4.54733C45.888 4.57796 45.8831 4.6107 45.8853 4.64336C45.8878 5.11578 46.0767 5.56813 46.4108 5.90219C46.7449 6.23625 47.1973 6.42506 47.6698 6.42763H54.3189C54.3446 6.42795 54.3702 6.42312 54.3941 6.41341C54.418 6.4037 54.4397 6.38931 54.4579 6.37109C54.4761 6.35286 54.4905 6.33118 54.5002 6.3073C54.5099 6.28343 54.5148 6.25786 54.5144 6.23209V4.57003C54.5061 4.52353 54.4823 4.48125 54.4467 4.45015C54.4112 4.41905 54.3661 4.40098 54.3189 4.39894ZM54.3189 15.5689H48.2076C48.1818 15.5693 48.1562 15.5644 48.1323 15.5547C48.1085 15.545 48.0868 15.5306 48.0685 15.5124C48.0503 15.4942 48.0359 15.4725 48.0262 15.4486C48.0165 15.4247 48.0117 15.3992 48.012 15.3734V12.0737C48.0117 12.048 48.0165 12.0224 48.0262 11.9985C48.0359 11.9746 48.0503 11.953 48.0685 11.9347C48.0868 11.9165 48.1085 11.9021 48.1323 11.8924C48.1562 11.8827 48.1818 11.8779 48.2076 11.8782H53.8544C53.8802 11.8785 53.9058 11.8737 53.9296 11.864C53.9535 11.8543 53.9752 11.8399 53.9934 11.8217C54.0117 11.8034 54.026 11.7817 54.0358 11.7579C54.0455 11.734 54.0503 11.7084 54.05 11.6827V10.0206C54.0503 9.99483 54.0455 9.96926 54.0358 9.94539C54.026 9.92151 54.0117 9.89983 53.9934 9.8816C53.9752 9.86338 53.9535 9.84899 53.9296 9.83928C53.9058 9.82957 53.8802 9.82473 53.8544 9.82506H46.1542C46.083 9.8257 46.015 9.85423 45.9647 9.90452C45.9144 9.9548 45.8859 10.0228 45.8853 10.0939V17.3043C45.8859 17.3754 45.9144 17.4434 45.9647 17.4937C46.015 17.544 46.083 17.5725 46.1542 17.5732H54.3189C54.3446 17.5735 54.3702 17.5687 54.3941 17.559C54.418 17.5493 54.4397 17.5349 54.4579 17.5166C54.4761 17.4984 54.4905 17.4767 54.5002 17.4529C54.5099 17.429 54.5148 17.4034 54.5144 17.3776V15.7156C54.5009 15.674 54.4748 15.6376 54.4398 15.6114C54.4048 15.5851 54.3626 15.5703 54.3189 15.5689Z" fill="white"/>
<path d="M17.6495 1.12457L13.0538 7.94389C12.9873 8.04292 12.9593 8.16284 12.975 8.28107C12.9908 8.3993 13.0493 8.50768 13.1395 8.5858C13.2296 8.66392 13.3452 8.70639 13.4645 8.70521C13.5838 8.70403 13.6985 8.65927 13.7871 8.57938L18.3095 4.64422C18.3358 4.62045 18.3686 4.60516 18.4037 4.60036C18.4388 4.59556 18.4746 4.60147 18.5063 4.61732C18.538 4.63316 18.5641 4.65821 18.5814 4.68917C18.5986 4.72014 18.6061 4.75559 18.6028 4.79087V17.0852C18.6023 17.1218 18.5909 17.1575 18.5699 17.1876C18.549 17.2176 18.5195 17.2407 18.4853 17.2539C18.4511 17.267 18.4137 17.2696 18.378 17.2614C18.3423 17.2531 18.3099 17.2343 18.285 17.2074L4.59571 0.831266C4.38015 0.567209 4.10767 0.3553 3.79865 0.211392C3.48963 0.067483 3.15207 -0.0047009 2.81121 0.000237328H2.3223C1.70375 0.00540078 1.11237 0.255047 0.677266 0.694669C0.242165 1.13429 -0.00130766 1.72818 5.28261e-06 2.34667V19.6516C-0.000422099 20.1636 0.166669 20.6618 0.475791 21.07C0.784913 21.4782 1.2191 21.7741 1.71211 21.9126C2.20513 22.051 2.72991 22.0245 3.20641 21.8369C3.68291 21.6493 4.08497 21.3111 4.35126 20.8737L8.94696 14.0544C9.01346 13.9554 9.04145 13.8354 9.02567 13.7172C9.00989 13.599 8.95141 13.4906 8.86126 13.4125C8.77111 13.3344 8.65551 13.2919 8.53622 13.2931C8.41693 13.2943 8.30219 13.339 8.2136 13.4189L3.69123 17.3296C3.66495 17.3534 3.63211 17.3687 3.597 17.3735C3.56188 17.3783 3.52614 17.3724 3.49444 17.3565C3.46275 17.3407 3.43657 17.3156 3.41934 17.2847C3.40212 17.2537 3.39464 17.2183 3.39789 17.183V4.91308C3.39837 4.87644 3.40983 4.84078 3.43077 4.81071C3.45172 4.78064 3.48119 4.75754 3.5154 4.74439C3.54961 4.73123 3.58697 4.72863 3.62267 4.73692C3.65837 4.7452 3.69077 4.76399 3.71568 4.79087L17.405 21.167C17.6223 21.4291 17.8951 21.6396 18.2037 21.7833C18.5124 21.927 18.8491 22.0004 19.1895 21.998H19.6784C20.3008 21.998 20.8977 21.7508 21.3378 21.3108C21.7779 20.8707 22.0252 20.2739 22.0252 19.6516V2.34667C22.0156 1.72312 21.7619 1.12817 21.3186 0.689493C20.8753 0.250814 20.2777 0.00336172 19.654 0.000237328C19.2516 0.000969759 18.8562 0.104681 18.5053 0.301492C18.1544 0.498303 17.8598 0.781657 17.6495 1.12457Z" fill="white"/>
</svg>

'''
'''--- src/assets/images/slippage-icon.svg ---
<svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M43.0009 13.8662L26.5914 29.911L17.9548 21.4664L5 34.1333" stroke="white" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M32.8672 13.8662H43.0008V23.9998" stroke="white" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- src/assets/images/tablet-arrow-central.svg ---
<svg width="180" height="162" viewBox="0 0 180 162" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M88.9384 161.061C89.5242 161.646 90.4739 161.646 91.0597 161.061L100.606 151.515C101.191 150.929 101.191 149.979 100.606 149.393C100.02 148.808 99.0701 148.808 98.4843 149.393L89.999 157.879L81.5137 149.393C80.928 148.808 79.9782 148.808 79.3924 149.393C78.8066 149.979 78.8066 150.929 79.3924 151.515L88.9384 161.061ZM88.499 11L88.499 160L91.499 160L91.499 11L88.499 11Z" fill="white"/>
<circle cx="89.999" cy="6" r="4.5" stroke="white" stroke-width="3"/>
<path d="M69.998 24L68.498 24V24L69.998 24ZM0.937394 78.9393C0.351607 79.5251 0.351608 80.4749 0.937394 81.0607L10.4833 90.6066C11.0691 91.1924 12.0189 91.1924 12.6047 90.6066C13.1904 90.0208 13.1904 89.0711 12.6047 88.4853L4.11937 80L12.6047 71.5147C13.1904 70.9289 13.1904 69.9792 12.6047 69.3934C12.0189 68.8076 11.0691 68.8076 10.4833 69.3934L0.937394 78.9393ZM68.498 24C68.498 44.939 65.2346 58.3986 57.0548 66.697C48.88 74.9902 35.426 78.5 13.9981 78.5L13.9981 81.5C35.5701 81.5 50.1161 78.0098 59.1913 68.803C68.2614 59.6014 71.498 45.061 71.498 24L68.498 24ZM13.9981 78.5L1.99805 78.5L1.99805 81.5L13.9981 81.5L13.9981 78.5ZM71.498 24L71.4981 10.5L68.4981 10.5L68.498 24L71.498 24Z" fill="white"/>
<circle cx="69.999" cy="6" r="4.5" stroke="white" stroke-width="3"/>
<path d="M110 24L111.5 24V24L110 24ZM179.061 78.9393C179.646 79.5251 179.646 80.4749 179.061 81.0607L169.515 90.6066C168.929 91.1924 167.979 91.1924 167.393 90.6066C166.808 90.0208 166.808 89.0711 167.393 88.4853L175.879 80L167.393 71.5147C166.808 70.9289 166.808 69.9792 167.393 69.3934C167.979 68.8076 168.929 68.8076 169.515 69.3934L179.061 78.9393ZM111.5 24C111.5 44.939 114.763 58.3986 122.943 66.697C131.118 74.9902 144.572 78.5 166 78.5L166 81.5C144.428 81.5 129.882 78.0098 120.807 68.803C111.737 59.6014 108.5 45.061 108.5 24L111.5 24ZM166 78.5L178 78.5L178 81.5L166 81.5L166 78.5ZM108.5 24L108.5 9.50001L111.5 9.49999L111.5 24L108.5 24Z" fill="white"/>
<circle r="4.5" transform="matrix(-1 0 0 1 109.999 6)" stroke="white" stroke-width="3"/>
</svg>

'''
'''--- src/components/FarmStatus/index.ts ---
import moment from 'moment';
import { IFarm } from 'store';
import i18n from 'i18n';
import Big from 'big.js';
import { secondsToMilliseconds } from 'utils/calculations';

export enum farmStatus {
  created = 'Created',
  running = 'Running',
  ended = 'Ended',
}

export enum FarmStatusEnum {
  'Active',
  'Pending',
  'Ended'
}

export const getFarmStatus = (
  status: string,
  dateStart: number,
): FarmStatusEnum => {
  const currentDate = moment().valueOf();
  const startDate = moment(secondsToMilliseconds(dateStart)).valueOf();

  if (status === farmStatus.ended) return FarmStatusEnum.Ended;

  if (startDate > currentDate) return FarmStatusEnum.Pending;
  if (currentDate > startDate && status === farmStatus.running) return FarmStatusEnum.Active;
  return FarmStatusEnum.Ended;
};

export const FarmStatusLocales = {
  [FarmStatusEnum.Active]: i18n.t('farm.status.active'),
  [FarmStatusEnum.Pending]: i18n.t('farm.status.pending'),
  [FarmStatusEnum.Ended]: i18n.t('farm.status.ended'),
};
export const FarmStatusLocalesInPool = {
  [FarmStatusEnum.Active]: i18n.t('farm.status.available'),
  [FarmStatusEnum.Pending]: i18n.t('farm.status.pending'),
  [FarmStatusEnum.Ended]: '',
};
export const FarmStatusLocalesInYourPool = {
  [FarmStatusEnum.Active]: i18n.t('farm.status.started'),
  [FarmStatusEnum.Pending]: i18n.t('farm.status.soon'),
  [FarmStatusEnum.Ended]: '',
};

interface IGetAvailableTimestamp {
  farmStart: number,
  farmEnd: number,
  timeToStart: number,
  status: FarmStatusEnum,
}

// TODO: Refactor
export const getAvailableTimestamp = (farms: IFarm[]): IGetAvailableTimestamp => {
  const farmStarts: number[] = [];
  const farmEnds: number[] = [];
  const timeToStarts: number[] = [];
  let status: FarmStatusEnum = FarmStatusEnum.Ended;
  const currentDate = moment().valueOf();

  if (farms.length !== 0) {
    farms.forEach((farm) => {
      if (farm.startAt !== 0) {
        farmStarts.push(farm.startAt);
        farmEnds.push(
          Big(farm.rewardPerSession).gt(0)
            ? moment(farm.startAt).valueOf()
          + (farm.sessionInterval * Number(farm.totalReward))
          / Number(farm.rewardPerSession)
            : 0,
        );

        if (
          secondsToMilliseconds(farm.startAt) > currentDate
        && farm.status === FarmStatusEnum.Pending
        ) {
          timeToStarts.push(farm.startAt);
        }
      }
    });
  }

  farmEnds.sort((a, b) => b - a);
  farmStarts.sort((a, b) => b - a);
  timeToStarts.sort((a, b) => b - a);

  const farmStart = secondsToMilliseconds(farmStarts[0]);
  const farmEnd = secondsToMilliseconds(farmEnds[0]);
  const timeToStart = secondsToMilliseconds(timeToStarts[0]);

  if (farmStart > currentDate) status = FarmStatusEnum.Pending;
  if (currentDate > farmStart && currentDate < farmEnd) status = FarmStatusEnum.Active;
  return {
    farmStart,
    farmEnd,
    timeToStart,
    status,
  };
};

'''
'''--- src/components/Footer/styles.ts ---
import styled from 'styled-components';
import { isMobile, isTablet } from 'utils/userAgent';

export const Container = styled.footer`
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  white-space: nowrap;
  color: ${({ theme }) => theme.globalWhite};
  padding: 1.5rem 4.5rem 2.563rem 4.5rem;
  ${({ theme }) => theme.mediaWidth.upToMedium`
    padding: 0 2rem 1rem 2rem;
  `}
  ${({ theme }) => theme.mediaWidth.upToSmall`
    padding: 0 1.25rem 1rem 1.25rem;
  `}
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    padding: 0 1rem 0.875rem 1rem;
  `}
  transition: all 1s ease;
`;

export const ContainerMobile = styled.footer`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  white-space: nowrap;
  color: ${({ theme }) => theme.globalWhite};
  padding: 1.5rem 2.063rem 2rem 2.063rem;
`;

export const ChildContainer = styled.div`
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  align-self: normal;
  white-space: nowrap;
  margin: ${isMobile ? '1.5rem 0' : '0'};
`;

export const SocialNetworkContainer = styled.div`
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  flex: 0 1 0;
  border-radius: 32px;
`;

export const ChildSocialNetwork = styled.a`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  margin: 0.938rem 1.188rem;
  text-decoration: none;
  & > svg {
    path{
      fill: ${({ theme }) => theme.globalGrey}
    }
  }
  & > div {
    margin-top: 0.5rem;
    font-style: normal;
    font-weight: 300;
    font-size: 0.75rem;
    line-height: 1.063rem;
    text-align: center;
    color: ${({ theme }) => theme.globalGrey};
  }
  :hover {
    & > svg {
      path{
        fill: ${({ theme }) => theme.globalWhite}
      }
    }
    & > div {
      color: ${({ theme }) => theme.globalWhite};
    }
  }
`;

export const TextContainer = styled.div`
  display: flex;
  flex: ${isMobile ? '0' : '1 1 0'};
  justify-content: flex-end;
  font-style: normal;
  font-weight: 300;
  font-size: 0.75rem;
  line-height: 1.031rem;
  color: ${({ theme }) => theme.globalGrey};
`;

export const LeftContainer = styled.div`
  flex: 1 1 0;
`;

export const HapiButton = styled.a`
  min-height: 2.25rem;
  max-width: 115px;
  cursor: pointer;
  display: flex;
  align-items: center;
  border: 1px solid ${({ theme }) => theme.yellowHapi};
  border-radius: 8px;
  color: ${({ theme }) => theme.yellowHapi};
  text-decoration:none;
  margin-top: ${isTablet ? '10px' : '0'};
  p, span {
    font-family: Arial;
    font-style: normal;
    font-weight: bold;
    font-size: .625rem;
    line-height: 0.688rem;
  }
  :hover {
    & span {
      text-decoration: underline;
    }
  }
  
  :visited, :hover {
    color: ${({ theme }) => theme.yellowHapi};
  }
`;

export const HapiLogoContainer = styled.div`
  background-color: ${({ theme }) => theme.yellowHapi};
  border-radius: 6px 0 0 6px;
`;

export const HapiTitle = styled.p`
  color: ${({ theme }) => theme.yellowHapi};
  margin-block-start: 0;
  margin-block-end: 0;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
  padding: 0.375rem 0.313rem;
  white-space: nowrap;
`;

'''
'''--- src/components/Menu/styles.ts ---
import styled from 'styled-components';

export const StyledMenu = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  margin-left: 1rem;
`;

export const StyledMenuButton = styled.button`
  display: flex;
  align-items: center;
  width: 100%;
  height: 100%;
  border: none;
  background-color: transparent;
  padding: .281rem .656rem;
  border-radius: 6px;
  :hover,
  :focus {
    cursor: pointer;
    outline: none;
    background-color: ${({ theme }) => theme.menuBg};
  }
`;

export const MenuFlyout = styled.span`
  min-width: 196px;
  max-height: 350px;
  overflow: auto;
  background: ${({ theme }) => theme.menuBg};
  box-shadow: 0px 16px 36px -12px rgba(10, 12, 18, 0.2);
  border-radius: 12px;

  padding: .375rem;
  display: flex;
  flex-direction: column;
  font-size: 1rem;
  position: absolute;
  z-index: 100;
  top: 2.5rem;
  right: 0;
`;

export const MenuItem = styled.div`
  display: flex;
  flex: 1;
  align-items: center;
  padding: .438rem .813rem;
  width: 100%;
  border-radius: 6px;
  & > svg {
    margin-right: 1rem;
  }
  & > p {
    user-select: none;
    font-style: normal;
    font-weight: 700;
    font-size: .875rem;
    line-height: 1rem;
    color: ${({ theme }) => theme.globalWhite};
    margin: 0;
  }
  :hover {
    background-color: ${({ theme }) => theme.globalGreyOp04};
    cursor: pointer;
    text-decoration: none;
  }
`;

'''
'''--- src/components/Modals/AddLiquidityModal/styles.ts ---
import styled from 'styled-components';
import { ReactComponent as AddIcon } from 'assets/images-app/icon-add.svg';
import { Modal } from '../styles';

export const LiquidityModalContainer = styled(Modal)`
  max-width: 500px;
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    max-width: 350px;
    min-width: 330px;
  `}
`;

export const ModalBody = styled.div`
  margin: 0 1.5rem 1.5rem;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
`;

export const LogoContainerAdd = styled(AddIcon)`
  display: flex;
  justify-content: center;
  margin: 1rem 0;
  align-self: center;
`;

export const RefreshBlock = styled.div`
  display: flex;
  justify-content: flex-start;
  margin: 2.063rem .75rem;
  & > div {
    font-size: 1rem;
  }
`;

export const YourSharesBlock = styled.div`
  flex: 1;
  display: flex;
  justify-content: flex-start;
  align-items: center;
  font-style: normal;
  font-weight: normal;
  font-size: 1rem;
  line-height: 1.188rem;
  color: ${({ theme }) => theme.globalGrey};
  margin: 1.5rem .75rem 0;
  & > span {
    color: ${({ theme }) => theme.globalWhite};
  }
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    font-size: .75rem;
    line-height: .875rem;
  `}
`;

'''
'''--- src/components/Modals/CreatePoolModal/styles.ts ---
import styled from 'styled-components';
import { Modal } from '../styles';

export const LiquidityModalContainer = styled(Modal)`
  max-width: 500px;
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    min-width: 330px;
  `}
`;

export const ModalBody = styled.div`
  margin: 0 1.5rem 1.5rem;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
`;

'''
'''--- src/components/Modals/RemoveLiquidityModal/styles.ts ---
import styled from 'styled-components';
import { Modal } from '../styles';

export const LiquidityModalContainer = styled(Modal)`
  max-width: 500px;
  min-width: 328px;
`;

export const ModalBody = styled.div`
  margin: 0 1.5rem 1.5rem;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    margin: 0 1rem 1rem;
  `}
`;

export const TitleAction = styled.div`
  margin: 1rem .875rem;
  display: flex;
  align-items: center;
  font-style: normal;
  font-weight: normal;
  font-size: 1rem;
  line-height: 1.188rem;
  color: ${({ theme }) => theme.globalGrey};
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    margin: 1rem .5rem;
    font-size: .75rem;
    line-height: .875rem;
  `}
`;

export const WithdrawTokenBlock = styled.div`
  display: flex;
  flex-direction: row;
  margin: 0 .875rem 2rem;
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    flex-direction: column;
    margin: 0 .5rem 2rem;
    & > div:last-child {
      justify-content: flex-start;
      margin-top: .75rem;
    }
  `}
`;

export const LogoContainer = styled.div`
  margin-right: .5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: ${({ theme }) => theme.bgToken};
  border-radius: 12px;
  transition: all 1s ease-out;
  height: 2.375rem;
  min-width: 2.375rem;
  & > img {
    border-radius: 12px;
    height: 2.25rem;
    width: 2.25rem;
    transition: all 1s ease-out;
  }
`;

export const TokenBlock = styled.div`
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: flex-start;
`;

export const TokenValueBlock = styled.div`
  display: flex;
  align-items: center;
  font-style: normal;
  font-weight: normal;
  font-size: 1rem;
  line-height: 1.188rem;
  & > p {
    margin: 0;
  }
`;

'''
'''--- src/components/Modals/SearchModal/constants.ts ---
import Big from 'big.js';
import FungibleTokenContract from 'services/contracts/FungibleToken';
import { ITokenPrice } from 'store';
import { formatTokenAmount, removeTrailingZeros } from 'utils/calculations';

export const getCurrentBalance = (
  balances: {[key: string]: string;},
  token: FungibleTokenContract,
) => {
  const currentBalance = formatTokenAmount(balances[token.contractId], token.metadata.decimals);
  if (currentBalance !== '0') {
    return new Big(currentBalance).toFixed(3);
  }
  return 0;
};

export const getCurrentPrice = (
  prices: {[key: string]: ITokenPrice;},
  balances: {[key: string]: string;},
  token: FungibleTokenContract,
) => {
  const currentBalance = balances[token.contractId];
  const priceForToken = prices[token.contractId] ?? null;
  const currentBalanceBig = new Big(currentBalance);
  if (priceForToken && currentBalanceBig.gt(0)) {
    const currentBalances = currentBalanceBig.mul(priceForToken.price).toFixed();
    return removeTrailingZeros(formatTokenAmount(currentBalances, token.metadata.decimals, 5));
  }
  return '-';
};

'''
'''--- src/components/Modals/StakeModal/styles.ts ---
import styled from 'styled-components';
import { ButtonSecondary } from 'components/Button';
import { Modal } from '../styles';

export const StakeModalContainer = styled(Modal)`
  max-width: 500px;
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    max-width: 350px;
    min-width: 330px;
  `}
`;

export const ModalBody = styled.div`
  margin: 0 1.5rem 1.5rem;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
`;

export const GetShareBtn = styled(ButtonSecondary)`
  margin-top: 1rem;
`;

export const TokensBlock = styled.div`
  display: flex;
  margin: .7rem 0 3rem;
`;

export const Warning = styled.div`
text-align: left;
margin-bottom: 1rem;
font-style: normal;
font-weight: 300;
font-size: .75rem;
line-height: .875rem;
color: ${({ theme }) => theme.error};
`;

'''
'''--- src/components/Modals/UnStakeModal/styles.ts ---
import styled from 'styled-components';
import { Modal } from '../styles';

export const UnStakeModalContainer = styled(Modal)`
  max-width: 500px;
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    max-width: 350px;
    min-width: 330px;
  `}
`;

export const ModalBody = styled.div`
  margin: 0 1.5rem 1.5rem;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
`;

export const TokensBlock = styled.div`
  display: flex;
  margin: .7rem 0 3rem;
`;

'''
'''--- src/components/Modals/WithdrawDepositModal/styles.ts ---
import styled from 'styled-components';
import { ReactComponent as ClaimArrow } from 'assets/images-app/claim-arrow.svg';
import { ModalBlock, Modal } from '../styles';

export const Container = styled.div`
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    position: fixed;
    bottom: 0;
    width: 100%;
  `}
`;

export const ClaimModal = styled(Modal)`
  display: flex;
  flex-direction: column;
  min-width: 360px;
  max-height: 560px;
  min-height: 400px;
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    min-width: 320px;
    width: 100%;
    border-radius: 24px 24px 0 0;
    ::before {
      border-radius: 24px 24px 0 0;
    }
  `}
`;

export const ClaimModalBlock = styled(ModalBlock)<{canClaim: boolean}>`
  flex-direction: column;
  justify-content: ${({ canClaim }) => (canClaim ? 'flex-start' : 'center')};
  overflow-x: hidden;
  flex: 1;
  margin: 0 1rem 0 1rem;
  & > div{
    width: 100%;
  }

  ::-webkit-scrollbar {
    width: 3px;
  }

  ::-webkit-scrollbar-thumb {
    background: ${({ theme }) => theme.globalGreyOp04};
    border-radius: 10px;
  }
`;

export const TokenRowContainer = styled.div`
  min-height: 60px;
  width: 100%;
  display: flex;
  align-items: center;
  height: 100%;
  width: 100%;
  margin-bottom: .75rem;
`;

export const TokenDescriptionBlock = styled.div`
  display: flex; 
  flex-direction: column;
  flex-grow: 2;
  margin-left: 1rem;
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    margin-left: 1rem;
  `}
  transition: all 1s ease;
`;

export const TokenTitle = styled.div`
  display: flex;
  justify-content: space-between;
  font-style: normal;
  font-weight: 500;
  font-size: 1rem;
  line-height: 1.188rem;
  margin-bottom: .5rem;
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    font-size: 1rem;
    line-height: 1.188rem;
    margin-bottom: .25rem;
  `}
  transition: all 1s ease;
`;

export const TokenSubtitle = styled.div`
  display: flex;
  justify-content: space-between;
  font-style: normal;
  font-weight: 300;
  font-size: .75rem;
  line-height: .875rem;
  margin-block-start: 0;
  margin-block-end: 0;
  color: ${({ theme }) => theme.globalGrey};
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    font-size: .75rem;
    line-height: .875rem;
  `}
  transition: all 1s ease;
`;

export const LogoContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: ${({ theme }) => theme.bgToken};
  border-radius: 16px;
  transition: all 1s ease-out;
  height: 3.125rem;
  min-width: 3.125rem;
  & > img {
    border-radius: 16px;
    width: 3rem;
    height: 3rem;
    transition: all 1s ease;
  }

  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    border-radius: 16px;
    height: 3.125rem;
    min-width: 3.125rem;
    & > img {
      border-radius: 16px;
      height: 3rem;
      width: 3rem;
      transition: all 1s ease-out;
    }
  `}
`;

export const ModalFooter = styled.div`
  margin: 1.5rem;
  & > button {
    width: 100%;
    padding: 1.156rem;
  }
`;

export const IconClaim = styled(ClaimArrow)`
  margin-right: 1rem;
`;

export const NoClaimBlock = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  & > img {
    width: 84px;
    height: 65px;
  }
`;

'''
'''--- src/components/Modals/styles.ts ---
import styled from 'styled-components';

export const Layout = styled.div`
  width: 100%;
  height: 100vh;
  position: fixed;
  z-index: 11;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: ${({ theme }) => theme.layoutBlack};
  overflow: hidden;
`;

export const Modal = styled.div`
  min-width: 400px;
  min-height: 150px;
  
  position: relative;
  background-color: ${({ theme }) => theme.backgroundCard};

  display: flex;
  flex-direction: column;

  color: ${({ theme }) => theme.white};
  box-shadow: 0px 32px 72px -12px ${({ theme }) => theme.boxShadowCard};
  border-radius: 24px;
  ::before {
    content: '';
    position: absolute;
    top: -1px;
    bottom: 0;
    left: -1px;
    right: -1px;
    background: ${({ theme }) => theme.specialBorderCard};
    border-radius: 24px;
    z-index: -1;
  }
`;

export const ModalBlock = styled.div`
  margin: 24px;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  flex: 1;
  flex-grow: 0;
  flex-shrink: 0;
  position: relative;
`;

export const ModalTitle = styled.h2`
  text-align: left;
  font-style: normal;
  font-weight: 500;
  font-size: 1rem;
  line-height: 1.188rem;
  margin-block-start: 0;
  margin-block-end: 0;
  color: ${({ theme }) => theme.globalWhite};
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    font-size: 1rem;
    line-height: 1.188rem;
  `}
  transition: all 1s ease;
`;

export const ModalIcon = styled.div`
  position: absolute;
  right: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 30px;
  height: 30px;
  border-radius: 8px;
  & > svg {
    justify-self: center;
    transition: all 1s ease;
  }
  :hover {
  cursor: pointer;
  background-color: ${({ theme }) => theme.globalGreyOp02};
    svg {
      path {
        fill: ${({ theme }) => theme.globalWhite};
      }
    }
  }
`;

'''
'''--- src/components/SlippageBlock/styles.ts ---
import styled from 'styled-components';

export const TitleAction = styled.div`
  margin: 1rem .875rem;
  display: flex;
  align-items: center;
  font-style: normal;
  font-weight: normal;
  font-size: 1rem;
  line-height: 1.188rem;
  color: ${({ theme }) => theme.globalGrey};
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    margin: 1rem .5rem;
    font-size: .75rem;
    line-height: .875rem;
  `}
`;

export const SlippageWrapper = styled.div`
  display: flex;
  flex-direction: column;
`;

export const Warning = styled.div`
  text-align: left;
  margin: 1rem .875rem 0;
  font-style: normal;
  font-weight: 300;
  font-size: .75rem;
  line-height: .875rem;
  color: ${({ theme }) => theme.error};
`;

'''
'''--- src/components/SpecialContainer/index.ts ---
import styled from 'styled-components';

// eslint-disable-next-line import/prefer-default-export
export const SpecialContainer = styled.div`
  position: relative;
  background-color: ${({ theme }) => theme.backgroundCard};

  max-width: 100%;
  min-width: 310px;
  height: fit-content;
  min-height: 100px;

  display: flex;
  flex-direction: column;

  color: ${({ theme }) => theme.white};
  box-shadow: 0px 32px 72px -12px ${({ theme }) => theme.boxShadowCard};
  border-radius: 36px;
  padding: 24px;
  ::before {
    content: '';
    position: absolute;
    top: -1px;
    bottom: 0;
    left: -1px;
    right: -1px;
    background: ${({ theme }) => theme.specialBorderCard};
    border-radius: 36px;
    z-index: -1;
  }
  width: 100%;
  ${({ theme }) => theme.mediaWidth.upToSmall`
    margin: 0 1rem 0 1rem;
  `}
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    margin: 0 1rem;
    padding: 25px 16px 16px 16px;
  `}
  transition: all .2s ease-out;
`;

'''
'''--- src/hooks/useDebounce.ts ---
import { useEffect, useState } from 'react';

function useDebounce<T>(value: T, delay?: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const timer = setTimeout(() => setDebouncedValue(value), delay || 500);

    return () => {
      clearTimeout(timer);
    };
  }, [value, delay]);

  return debouncedValue;
}

export default useDebounce;

'''
'''--- src/hooks/useFullHeightHook.ts ---
import React from 'react';

export default function useFullHeightHook() {
  const onResize = () => {
    const vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
  };

  React.useEffect(() => {
    onResize();
    if (window) window.addEventListener('resize', onResize);
    return () => {
      if (window) window.removeEventListener('resize', onResize);
    };
  }, []);
}

'''
'''--- src/hooks/useNavigateSwapParams.ts ---
import { generatePath, useNavigate } from 'react-router-dom';
import { TO_SWAP_URL } from 'utils/routes';

const useNavigateSwapParams = () => {
  const navigate = useNavigate();

  return (inputToken: string, outputToken: string) => {
    const path = generatePath(TO_SWAP_URL, {
      inputToken,
      outputToken,
    });
    navigate(path);
  };
};

export default useNavigateSwapParams;

'''
'''--- src/i18n/en/translation.json ---
{
  "common" : {
    "loading": "Loading",
    "half": "HALF",
    "max": "MAX",
    "refresh": "Refresh" 
  },

  "general" : {
    "jumbo": "jumbo",
    "swap": "Swap",
    "pool": "Pool",
    "staking": "Staking"  
  },

  "action": {
    "connectWallet": "Connect Wallet",
    "createPool": "Create Pool",
    "swap": "Swap",
    "addLiquidity": "Add Liquidity",
    "removeLiquidity": "Withdraw",
    "stake": "Stake",
    "unStakeAndClaim": "Unstake & Claim",
    "claim": "Claim",
    "claimAll": "Claim All",
    "ok": "Ok"
  },

  "swap": {
    "changeDirection": "Change Direction",
    "settings": "Settings",
    "route": "Route",
    "minimumReceived": "Minimum Received",
    "priceImpact": "Price Impact",
    "liquidityProviderFee": "Liquidity Provider Fee",
    "slippageTolerance": "Slippage Tolerance",
    "goToPair": "Go to Pair"
  },

  "pool": {
    "totalValueLocked": "Total Value Locked",
    "totalDayLocked": "Total 24h Volume",
    "jumboPrice": "JUMBO Price",
    "weeklyEmissions": "Weekly Emissions",

    "totalLiquidity": "Total Liquidity",
    "dayVolume": "24h Volume",
    "APY": "APY",
    "yourLiquidity": "Your Liquidity",

    "search": "Search",
    "sortBy": "Sort by",
    "APYBasis": "APY Basis",
    "endedOnly": "Ended Only",
    "hideLowTL": "Hide low TVL"
  },

  "farm": {
    "totalStaked": "Total Staked",
    "yourStaked": "Your Staked",
    "APY": "APY",

    "rewardTokens": "Reward Tokens",
    "farming": "Farming",

    "status": {
      "active": "Active",
      "pending": "Pending",
      "ended": "Ended",
      "started": "started",
      "soon": "soon",

      "available": "Available"
    }
  },

  "accountModal": {
    "yourWallet": "Your Wallet",
    "connectWallet": "Connect Wallet",
    "disconnect": "Disconnect"
  },

  "addLiquidityModal": {
    "addLiquidity": "Add Liquidity",
    "yourShares": "You will get shares"
  },

  "removeLiquidityModal": {
    "withdraw": "Withdraw",
    "slippageTolerance": "Slippage Tolerance",
    "withdrawalAmount": "Withdrawal Amount",
    "shares": "Shares"
  },

  "createPoolModal" : {
    "createPool": "Create Pool",
    "totalFee": "Total Fee",
    "lpFee": "LP Fee",
    "protocolFee": "Protocol Fee",
    "referralFee": "Referral Fee"
  },

  "searchModal" : {
    "selectToken": "Select Token",
    "placeholder": "Search name or paste address",
    "popular": "Popular",
    "priceUnavailable": "Price Unavailable"
  },

  "noResult": {
    "yourLiquidity": "Your active liquidity positions will appear here.",
    "noResultFound": "No results found",
    "nothingToClaim": "Nothing to Claim"
  },

  "warningMessage": {
    "zeroBalance": "Zero balance",
    "zeroBalanceDesc": "Insufficient balance of wNEAR. Swap NEAR to wNEAR in order to proceed by clicking “Go to Pair”",
  
    "doesNotExist": "The given pair doesn't exist",
  
    "noSuchPairExists": "No such pair exists",
    "noSuchPairExistsDesc": "In order to trade wNEAR is needed. Click “Go to Pair” to Swap NEAR to wNEAR",
  
    "zeroPoolLiquidity": "Zero liquidity pool",
    "zeroPoolLiquidityDesc": "Zero liquidity pool, you can add liquidity to the pool",
  
    "transactionMayFail": "Your transaction may be frontrun",
    "zeroFee": "Total Fee cannot be zero",
    "badPriceImpact": "Price impact is TOO HIGH.",
    "badPriceImpactDesc": "DON'T SWAP unless you know what you are doing",
    "stakeMinDeposit": "Your deposit must be greater than 0.00001"
  },

  "tooltipTitle": {
    "slippageTolerance": "Permitted margin of disparity between the current price of an asset and the final one after swap",
    "routes": "Path from one asset to another consisting of zero or more segments between pairs",
    "minimumReceived": "The lowest amount received after swap initiation",
    "priceImpact": "The effect on the price the given swap action incurs",
    "liquidityProviderFee": "A small sum paid to liquidity providers",
  
    "APYBasis": "Annual Percentage Yield accrued. Includes your interest rate and the frequency of compounding interest",
    "totalLiquidity": "Amount of liquidity currently available in the given pool",
    "dayVolume": "Daily volume of trading activity",
    "APY": "Annual Percentage Yield",
    "yourLiquidity": "Shows how much dollar liquidity you have in this pool",

    "totalFee": "A sum paid for creating a pool",
    "lPFee": "A sum paid for providing liquidity",
    "protocolFee": "A sum deducted from pool creation that accrues on platform",
    "referralFee": "A sum you get from referred user as reward",
    
    "totalStaked": "Amount of staked in the current pool",
    "yourStaked": "Amount of YOUR staked in the current pool"
  },
  
  "footer": {
    "protectBy": "Protected by",
    "hapiProtocol": "HAPI Protocol",
    "copyright": "Copyright 2022"
  },

  "landing": {

    "read": "Read",
    "docs": "Docs",
    "openApp": "Open App",
    "poweredBy": "Powered by",
    "mainTitle": "The Most Intuitive  DeFi Experience You Will Ever Have",

    "benefitsList": {
      "first": "Instantaneous Swaps",
      "second": "Highest Yields and Seamless Pool Transition",
      "third": "Permissionless Liquidity Pools"
    },

    "benefitsCards": {
      "jets": "Jets",
      "subtitleJets": "Interface-embedded system that helps to find the most promising pools",
      "lowSlippage": "Low Slippage",
      "subtitleLowSlippage": "The lowest slippage possible thanks to NEAR and proprietary algorithms",
      "yieldFinder": "Yield Finder",
      "subtitleYieldFinder": "Find the best Yields and Transition between pools in ONE Click"
    },

    "ecosystem": {
      "title": "Ecosystem",
      "label": "Jumbo provides Ecosystem-Wide Liquidity for users and projects"
    },

    "middleBlock": {
      "smartPools": "Smart Pools",
      "jets": "Jets",
      "onTheFly": "On-the-fly Pool Transition",
      "lowerSlippage": "Lower Slippage Volume & Liquidity Homogenization Liquid Market",
      "lowerBlock": {
        "f": "Lower Slippage",
        "s": "Volume & Liquidity Homogenization",
        "t": "Liquid Market",
        "mob": "Lower Slippage Volume & Liquidity Homogenization Liquid Market"
      }
    }
  },

  "error" : {
    "notFound": "404 Error",
    "notFoundLabel": "The page you`re looking for is now beyond our reach",
    "backHome": "Back Home"
  },

  "toast" : {
    "swap": "Swap",
    "addLiquidity": "Add Liquidity",
    "createPool": "Create Pool",
    "removeLiquidity": "Remove Liquidity",
    "transactionFailed": "Transaction failed",
    "nearDeposit": "Near Deposit",
    "nearWithdraw": "Near Withdraw",

    "stake": "Stake",
    "unstake": "Unstake"
  },

  "stakeModal" : {
    "stake": "Stake",
    "shares": "Shares"
  },

  "unStakeModal" : {
    "unStake": "Unstake and Claim",
    "shares": "Shares"
  }
}
'''
'''--- src/i18n/index.ts ---
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import en from './en/translation.json';

const resources = {
  en: {
    translation: en,
  },
};

i18n.use(initReactI18next).init({
  lng: 'en',
  interpolation: {
    escapeValue: false, // not needed for react as it escapes by default
  },
  resources,
});

export default i18n;

'''
'''--- src/index.css ---
* {
  font-family: 'Rubik', monospace;
  box-sizing: border-box;
}

html, body {
  height: 100vh;
  height: calc(var(--vh, 1vh) * 100);
  overflow: hidden;
}

body {
  margin: 0;
  background-color: #151922;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-position: top left;
  background-repeat: repeat;
  overflow: scroll;
}

#root{
  position: relative;
  height: inherit;
}

'''
'''--- src/pages/App/styles.ts ---
import { PropsWithChildren } from 'react';
import styled from 'styled-components';

interface ICurrentTab {
  isActive?: boolean
}

export const Container = styled.div`
  display: flex;
  flex-direction: column;
  min-height: 100%;
`;

export const Header = styled.div`
  transition: all 1s ease;

  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  white-space: nowrap;
  color: ${({ theme }) => theme.globalWhite};
  padding: 1.5rem 4.5rem 2.563rem 4.5rem;
  & > a{
    text-decoration: none;
  }
  ${({ theme }) => theme.mediaWidth.upToMedium`
    padding: 1.5rem 2rem 2.563rem 2rem;
  `}
  ${({ theme }) => theme.mediaWidth.upToSmall`
    padding: 1.5rem 1.25rem 2.563rem 1.25rem;
  `}
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    padding: 1.5rem 1rem 0.875rem 1rem;
    margin-bottom: 1.125rem;
  `}
`;

export const LogoContainer = styled.div`
  flex: 1;
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  align-items: center;
  & > svg {
    margin-right: 0.438rem;
  }
`;

export const LogoTitle = styled.h1`
  font-style: normal;
  font-weight: bold;
  font-size: 2rem;
  line-height: 2.438rem;
  color: ${({ theme }) => theme.white};
`;

export const NavBar = styled.div`
  flex: 1;
  display: flex;
  justify-content: center;
  color: white;
  & > a {
    text-decoration: none;
  }
`;

export const NavButton = styled.button<PropsWithChildren<ICurrentTab>>`
  background-color: transparent;
  border: none;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  font-family: Arial;
  font-style: normal;
  font-weight: bold;
  font-size: 1.25rem;
  line-height: 1.438rem;
  color: ${({ theme, isActive }) => (isActive ? theme.pink : theme.globalGrey)};
  margin: 0 12px;
  padding: 0;
  position: relative;
  transition: all .3s ease;
  :after {
    content: '';
    transition: all .3s ease;
    position: absolute;
    height: 3px;
    top: 30px;
    border-radius: 1.47856px;
    width: ${({ isActive }) => (isActive ? '36px' : '0')};
    background: ${({ theme, isActive }) => (isActive ? theme.pink : theme.globalGrey)};
    ${({ theme, isActive }) => theme.mediaWidth.upToExtraSmall`
      top: 25px;
      height: 2px;
      width: ${(isActive ? '24px' : '0')};
  `}
  }
  :hover {
    cursor: pointer;
    color: ${({ theme }) => theme.pink}
  }
  :disabled {
    color: ${({ theme }) => theme.globalGreyOp02};
    cursor: default;
  }
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    font-size: 1rem;
    line-height: 1.188rem;
    margin: 0 8px;
  `}
`;

export const BlockButton = styled.div`
  flex: 1;
  display: flex;
  justify-content: flex-end;
`;

export const Body = styled.div`
  flex: 1;
  text-align: center;
  color: white;
  display: flex;
  justify-content: center;
`;

export const LinkContainer = styled.div`
  flex: 1;
  & > a {
    text-decoration:none;
  }
`;

export const LoadingBlock = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
`;

'''
'''--- src/pages/Landing/constants.ts ---
import { ReactComponent as JetLogo } from 'assets/images/jets-icon.svg';
import { ReactComponent as SlippageLogo } from 'assets/images/slippage-icon.svg';
import { ReactComponent as FarmingLogo } from 'assets/images/farming-icon.svg';
import i18n from 'i18n';

export const benefitsList = [
  i18n.t('landing.benefitsList.first'),
  i18n.t('landing.benefitsList.second'),
  i18n.t('landing.benefitsList.third'),
];

export const benefitsCards = [
  {
    Image: JetLogo,
    title: i18n.t('landing.benefitsCards.jets'),
    subtitle: i18n.t('landing.benefitsCards.subtitleJets'),
  },
  {
    Image: SlippageLogo,
    title: i18n.t('landing.benefitsCards.lowSlippage'),
    subtitle: i18n.t('landing.benefitsCards.subtitleLowSlippage'),
  },
  {
    Image: FarmingLogo,
    title: i18n.t('landing.benefitsCards.yieldFinder'),
    subtitle: i18n.t('landing.benefitsCards.subtitleYieldFinder'),
  },
];

'''
'''--- src/pages/Landing/styles.ts ---
import { ReactComponent as CentralArrow } from 'assets/images/arrow-central.svg';
import { ReactComponent as LowerLeftArrow } from 'assets/images/arrow-lower-left.svg';
import { ReactComponent as LowerRightArrow } from 'assets/images/arrow-lower-right.svg';
import { ReactComponent as TabletCentralArrow } from 'assets/images/tablet-arrow-central.svg';

import { ReactComponent as MobileCentralArrow } from 'assets/images/mobile-arrow-central.svg';
import { ReactComponent as MobileUpperLeftArrow } from 'assets/images/mobile-arrow-upper-left.svg';
import { ReactComponent as MobileUpperRightArrow } from 'assets/images/mobile-arrow-upper-right.svg';
import { ReactComponent as MobileLowerLeftArrow } from 'assets/images/mobile-arrow-lower-left.svg';
import { ReactComponent as MobileLowerRightArrow } from 'assets/images/mobile-arrow-lower-right.svg';

import styled from 'styled-components';
import { isTablet } from 'utils/userAgent';

export const UpperContainer = styled.div`
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  width: 70%;
  margin: 4.375rem auto;
  
  ${({ theme }) => theme.mediaWidth.upToLarge`
    margin: 4.375rem 4.5rem;
    width: unset;
    align-items: flex-start;
    ${isTablet && 'flex-direction:column'};
  `}
  ${({ theme }) => theme.mediaWidth.upToMedium`
    flex-direction: column;
  `}
  ${({ theme }) => theme.mediaWidth.upToSmall`
    width: unset;
    margin: 2rem 2rem 4.375rem 2rem;
  `}
`;

export const MainInformation = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  justify-content: center;
`;

export const Gif = styled.img`
  ${({ theme }) => theme.mediaWidth.upToLarge`
    margin-top: 2rem;
  `}

  ${({ theme }) => theme.mediaWidth.upToSmall`
    width: 100%;
  `}
`;

export const NearContainer = styled.div`
  display: flex;
  justify-content: center;
  flex-direction: row;
  font-style: normal;
  font-weight: 300;
  font-size: 1rem;
  line-height: 1.188rem;
  color: ${({ theme }) => theme.greyText};
  & > svg {
    margin-left: 1rem;
  }
`;

export const MainTitle = styled.h1`
  max-width: 420px;
  font-style: normal;
  font-weight: 500;
  font-size: 3rem;
  line-height: 3.563rem;
  color: ${({ theme }) => theme.white};
  ${({ theme }) => theme.mediaWidth.upToLarge`
    ${isTablet && 'max-width: 80%;'};
  `}
  ${({ theme }) => theme.mediaWidth.upToSmall`
    max-width: 400px;
    font-size: 2rem;
    line-height: 2.375rem;
  `}
`;

export const ListElement = styled.li`
  font-style: normal;
  font-weight: 300;
  font-size: 1.25rem;
  line-height: 140%;
  color: ${({ theme }) => theme.white};
  padding-left: 1.28em;
  text-indent: -1.28em;
  ${({ theme }) => theme.mediaWidth.upToSmall`
    font-size: 1rem;
  `}
`;
export const GreyCardContainer = styled.section`
  background-color: ${({ theme }) => theme.greyCard};
  border-radius: 240px 240px 0 0;
  box-shadow: 0px 0px 72px -12px ${({ theme }) => theme.greyCardShadow};
  ${({ theme }) => theme.mediaWidth.upToMedium`
    border-radius: 7.5rem 7.5rem 0 0;
  `}
  ${({ theme }) => theme.mediaWidth.upToSmall`
    border-radius: 3rem 3rem 0 0;
  `}
`;

export const CardWrapper = styled.div`
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  justify-content: center;
  padding: 0 10%;
  ${({ theme }) => theme.mediaWidth.upToMedium`
    padding: 0%;
  `}

  ${({ theme }) => theme.mediaWidth.upToSmall`
    flex-direction: column;
    padding: 0%;
  `}
`;

export const GreyCard = styled.div`
  color: ${({ theme }) => theme.white};
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  margin-top: 3.75rem;
  padding: 0 5%;

  & > h2 {
    font-style: normal;
    font-weight: 500;
    font-size: 1.5rem;
    line-height: 1.75rem;
    text-align: center;
  }

  & > h5 {
    font-style: normal;
    font-weight: 300;
    font-size: 1rem;
    line-height: 1.185rem;
    text-align: center;
    margin-block-start: 0;
  }

  ${({ theme }) => theme.mediaWidth.upToSmall`
      padding:  0 10%;
    `}
`;

export const BlackCardContainer = styled.div`
  display: flex;
  flex-direction: column;
  background: linear-gradient(
    180deg,
    ${({ theme }) => theme.blackCardBg} 0%,
    ${({ theme }) => theme.globalBlack} 100%
  );
  border-radius: 15rem 15rem 0 0;
  box-shadow: 0 0 4.5rem ${({ theme }) => theme.blackCardShadow};
  margin-top: 34px;
  ${({ theme }) => theme.mediaWidth.upToMedium`
    border-radius: 7.5rem 7.5rem 0 0;
    margin-top: 3.5rem;
  `}
  ${({ theme }) => theme.mediaWidth.upToSmall`
    border-radius: 48px 48px 0 0;
  `}
`;

export const Title = styled.div`
  font-style: normal;
  font-weight: 500;
  font-size: 2rem;
  line-height: 2.375rem;
  text-align: center;
  color: ${({ theme }) => theme.white};
  padding-top: 4.5rem;
  margin-bottom: 1.5rem;
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    padding-top: 3rem;
  `}
`;

export const Label = styled.div`
  max-width: 400px;
  align-self: center;
  font-weight: 300;
  font-size: 1.5rem;
  line-height: 2.125rem;
  text-align: center;
  color: ${({ theme }) => theme.blackCardText};
  margin-top: 1.5rem;
  margin-bottom: 4.5rem;
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    max-width: 300px;
    font-style: normal;
    font-size: 1rem;
    line-height: 1.375rem;
    margin-top: 1rem;
    margin-bottom: 3rem;
  `}
`;

export const BlockInformation = styled.div`
  display: grid;
  justify-content: center;
  grid-template-columns: 
  ${isTablet ? '0fr' : '1fr'} 
    1fr 
    0.2fr 
    0.5fr 
    0.2fr 
    2fr 
    0.2fr 
    0.5fr 
    0.2fr 
    1fr
    ${isTablet ? '0fr' : '1fr'};
  grid-template-rows: 
    0.6fr 
    0.1fr 
    0.3fr 
    1fr 
    0fr 
    0.1fr 
    1.4fr;
  grid-column-gap: 0px;
  grid-row-gap: 0px;
  color: ${({ theme }) => theme.globalWhite};
  max-width: 1000px;
  padding-bottom: 6.25rem;
  align-self: center;
  user-select: none;
  margin: ${isTablet ? '0 20px' : '0'};
`;

export const Block = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  font-weight: 500;
  font-size: 1.5rem;
  line-height: 2.125rem;
  box-sizing: border-box;
  border-radius: 32px;
  padding: 0.625rem;
`;

export const UpperBlock = styled(Block)`
  grid-area: 1 / 4 / 2 / 9;
  border: 2px dashed ${({ theme }) => theme.redBorder};
`;

export const MiddleLeftBlock = styled(Block)`
  grid-area: 4 / 1 / 5 / 5;
  border: 2px dashed ${({ theme }) => theme.greyBorder};
  line-height: 34px;
  max-height: 96px;
  min-width: ${isTablet ? '260px' : '300px'};
`;

export const MiddleRightBlock = styled(Block)`
  grid-area: 4 / 8 / 5 / 12;
  border: 2px dashed ${({ theme }) => theme.greyBorder};
  line-height: 34px;
  max-height: 96px;
  min-width: ${isTablet ? '240px' : '300px'};
  & > p {
    max-width: 175px;
    margin: 0;
  }
`;

export const LowerBlock = styled(Block)`
  width: 100%;
  grid-area: 7 / 4 / 8 / 9;
  font-style: normal;
  line-height: 2rem;
  color: ${({ theme }) => theme.greenText};
  background: ${({ theme }) => theme.darkGreenBg};
  border-radius: 32px;
`;

export const LowerLeftArrowContainer = styled(LowerLeftArrow)`
  justify-self: flex-end;
  grid-area: 6 / 2 / 8 / 3;
`;
export const LowerRightArrowContainer = styled(LowerRightArrow)`
  justify-self: flex-start;
  grid-area: 6 / 10 / 8 / 11;
`;

export const TabletCentralArrowContainer = styled(TabletCentralArrow)`
  justify-self: center;
  grid-area: 3 / 6 / 5 / 7;
`;

export const MobileBlockInformation = styled.div`
  display: grid;
  grid-template-columns: 1fr 0.2fr 1fr 0.5fr 1fr 0.2fr 1fr;
  grid-template-rows: 0.5fr 0.5fr 0.2fr 0.2fr 0.7fr 0.2fr 0.5fr 0.2fr 1fr;
  grid-column-gap: 0px;
  grid-row-gap: 0px;
  justify-content: center;
  color: ${({ theme }) => theme.globalWhite};
  margin-bottom: 4.5rem;
  align-self: center;
  user-select: none;
  max-height: 432px;
`;

export const MobileBlock = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  align-self: center;
  font-style: normal;
  font-weight: 500;
  font-size: 1rem;
  line-height: 1.375rem;
  box-sizing: border-box;
  border-radius: 32px;
  padding: 0.625rem;
  height: 96px;
`;

export const MobileUpperBlock = styled(MobileBlock)`
  grid-area: 1 / 3 / 3 / 6;
  border: 2px dashed ${({ theme }) => theme.redBorder};
`;

export const MobileMiddleLeftBlock = styled(MobileBlock)`
  grid-area: 5 / 1 / 6 / 4;
  border: 2px dashed ${({ theme }) => theme.greyBorder};
`;

export const MobileMiddleRightBlock = styled(MobileBlock)`
  grid-area: 5 / 5 / 6 / 8;
  border: 2px dashed ${({ theme }) => theme.greyBorder};
  & > p {
    max-width: 115px;
    margin: 0;
  }
`;

export const MobileLowerBlock = styled(MobileBlock)`
  grid-area: 7 / 3 / 10 / 6;
  color: ${({ theme }) => theme.greenText};
  background: ${({ theme }) => theme.darkGreenBg};
  border-radius: 32px;
  height: 144px;
  & > p {
    max-width: 150px;
    margin: 0;
  }
`;

export const MobileCentralArrowContainer = styled(MobileCentralArrow)`
  height: 160px;
  grid-area: 3 / 4 / 6 / 5;
  justify-self: center;
`;
export const MobileUpperLeftArrowContainer = styled(MobileUpperLeftArrow)`
  grid-area: 2 / 1 / 4 / 2;
  align-self: center;
  justify-self: flex-end;
`;
export const MobileUpperRightArrowContainer = styled(MobileUpperRightArrow)`
  grid-area: 2 / 7 / 4 / 8;
  align-self: center;
  justify-self: flex-start;
`;
export const MobileLowerLeftArrowContainer = styled(MobileLowerLeftArrow)`
  grid-area: 7 / 1 / 10 / 2;
  align-self: start;
  justify-self: flex-end;
`;
export const MobileLowerRightArrowContainer = styled(MobileLowerRightArrow)`
  grid-area: 7 / 7 / 10 / 8;
  align-self: start;
  justify-self: flex-start;
`;

export const CentralArrowContainer = styled(CentralArrow)`
  justify-self: center;
  grid-area: 3 / 6 / 5 / 7;
`;

export const Container = styled.div`
  background-color: ${({ theme }) => theme.landingBackground};
`;

export default {
  Container,
  UpperContainer,
  MainInformation,
  Gif,
  NearContainer,
  MainTitle,
  ListElement,
  GreyCardContainer,
  CardWrapper,
  GreyCard,
  BlackCardContainer,
  Title,
  Label,
  BlockInformation,
  UpperBlock,
  MiddleLeftBlock,
  MiddleRightBlock,
  LowerBlock,
  CentralArrowContainer,
  LowerLeftArrowContainer,
  LowerRightArrowContainer,
  TabletCentralArrowContainer,
  MobileBlockInformation,
  MobileBlock,
  MobileUpperBlock,
  MobileMiddleLeftBlock,
  MobileMiddleRightBlock,
  MobileLowerBlock,
  MobileCentralArrowContainer,
  MobileUpperLeftArrowContainer,
  MobileUpperRightArrowContainer,
  MobileLowerLeftArrowContainer,
  MobileLowerRightArrowContainer,
};

'''
'''--- src/pages/Pool/Card/styles.ts ---
import styled from 'styled-components';
import { SpecialContainer } from 'components/SpecialContainer';
import { FarmStatusEnum } from 'components/FarmStatus';

export const Wrapper = styled(SpecialContainer)<{isFarming?: boolean}>`
  background-color: ${({ theme, isFarming }) => (isFarming ? theme.farmingBg : theme.backgroundCard)};

  max-width: 736px;
  width: 100%;
  border-radius: 24px;
  justify-content: space-between;
  margin: 0 0 1rem 0;
  padding-top: 1.125rem;
  min-height: 160px;
  & > div:first-child {
    min-height: 40px;
  }

  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
      & > div:first-child {
      margin-bottom: 1.563rem;
    }
  `}
  ::before{
    border-radius: 24px;
  }
`;

export const UpperRow = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    flex-direction: column-reverse;
    align-items: flex-start;
    
  `}
`;

export const LowerRow = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    flex-direction: column;
    align-items: flex-start;
  `}
`;

export const LabelPool = styled.div`
  display: flex;
  align-items: center;
  min-height: 40px;
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    width: 100%;
    justify-content: flex-end;
  `}
`;

export const FarmBlock = styled.div<{type: FarmStatusEnum}>`
  background-color: ${({ theme }) => theme.statusFarmInPoolBg};
  display: flex;
  align-items: center;
  font-style: normal;
  font-weight: 300;
  font-size: .75rem;
  line-height: .875rem;
  padding: .5rem;
  border-radius: 12px;
  user-select: none;
  color: ${({ theme, type }) => {
    if (type === FarmStatusEnum.Active) return theme.statusActive;
    if (type === FarmStatusEnum.Pending) return theme.statusPending;
    return theme.statusEnded;
  }};
  :hover {
    cursor: pointer;
  }
`;

export const LogoArrowContainer = styled.div<{type: FarmStatusEnum}>`
  display: flex;
  background-color: ${({ theme, type }) => {
    if (type === FarmStatusEnum.Active) return theme.statusActiveOp01;
    if (type === FarmStatusEnum.Pending) return theme.statusPendingOp01;
    return theme.statusEnded;
  }};
  border-radius: 8px;
  padding: .438rem .313rem;
  margin-left: .5rem;
  svg {
    path {
      fill: ${({ theme, type }) => {
    if (type === FarmStatusEnum.Active) return theme.statusActive;
    if (type === FarmStatusEnum.Pending) return theme.statusPending;
    return theme.statusEnded;
  }};
    }
  }
`;

export const BlockVolume = styled.div`
  display: flex;
  width: 100%;
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    flex-direction: column;
  `}
`;

export const Column = styled.div`
  display: flex;
  flex-direction: column;
  margin-right: 2.125rem;
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    margin: 0 0 1.125rem;
    flex-direction: row;
    justify-content: space-between;
  `}
`;

export const TitleVolume = styled.div`
  display: flex;
  font-style: normal;
  font-weight: 300;
  font-size: .75rem;
  line-height: .875rem;
  color: ${({ theme }) => theme.globalGrey};
  margin-bottom: .75rem;
  & > span {
    white-space: nowrap;
  }
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    margin: 0;
  `}
`;

export const LabelVolume = styled.div<{isColor?: boolean}>`
  display: flex;
  font-style: normal;
  font-weight: 300;
  font-size: .75rem;
  line-height: .875rem;
  color: ${({ theme, isColor }) => (isColor ? theme.globalGreen : theme.globalWhite)};
  white-space: nowrap;
`;

export const BlockButton = styled.div`
  display: flex;
  justify-content: flex-end;
  width: 100%;
  & > button {
    padding: .563rem .938rem;
  }
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    flex-direction: column-reverse;
  `}
`;

export const TitlePool = styled.div`
  display: flex;
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    margin-top: .5rem;
  `}
`;

export const FarmsStatus = styled.div<{type: FarmStatusEnum}>`
  display: flex;
  align-items: center;
  margin-left: 1rem;
  border: 1px solid ${({ theme, type }) => {
    if (type === FarmStatusEnum.Active) return theme.statusActive;
    if (type === FarmStatusEnum.Pending) return theme.statusPending;
    return theme.statusEnded;
  }};
  
  box-sizing: border-box;
  border-radius: 4px;
  color: ${({ theme, type }) => {
    if (type === FarmStatusEnum.Active) return theme.statusActive;
    if (type === FarmStatusEnum.Pending) return theme.statusPending;
    return theme.statusEnded;
  }};

  user-select: none;
  font-style: normal;
  font-weight: 400;
  font-size: .75rem;
  line-height: .875rem;
  max-height: 22px;
  padding: 4px;

  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    align-self: center;
  `}
`;

export const FarmWrapper = styled(SpecialContainer)<{isShowingTime?: boolean}>`
  background-color: ${({ theme }) => theme.farmingTimeBg};
  max-width: 736px;
  width: 100%;
  border-radius: 24px;
  margin: 0 0 1rem 0;
  padding: 0;
  min-height: ${({ isShowingTime }) => (isShowingTime ? '160px' : '190px')};
  ::before{
    border-radius: 24px;
  }
`;

export const FarmContainer = styled.div`
  background-color: ${({ theme }) => theme.farmingBg};
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  min-height: 160px;
  padding: 1.125rem 1.5rem 1.5rem;
  border-radius: 24px;

  & > div:first-child {
      min-height: 40px;
    }

  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
      & > div:first-child {
      margin-bottom: 1.563rem;
    }
  `}
`;

export const FarmTime = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 30px;
  background-color: ${({ theme }) => theme.farmingTimeBg};
  border-radius: 0 0 24px 24px;
  & > p {
    margin: 0;
    font-style: normal;
    font-weight: 300;
    font-size: .75rem;
    line-height: .875rem;
  }
`;

'''
'''--- src/pages/Pool/styles.ts ---
import styled from 'styled-components';
import { SpecialContainer } from 'components/SpecialContainer';
import { ReactComponent as Soon } from 'assets/images-app/logo-soon.svg';

export const Container = styled.div`
  display: flex;
  align-items: flex-start;
  flex-direction: column;
  align-items: center;
  width: 100%;
  max-width: 736px;
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    max-width: 328px;
  `}
`;

export const FilterBlock = styled.div`
  display: flex;
  margin-bottom: 2.375rem;
  align-content: center;
  white-space: nowrap;
  & > button {
    margin: 0 .625rem;
  }
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    & > button {
      margin: 0 .25rem;
    }
  `}
`;

export const InformationBlock = styled(SpecialContainer)`
  max-width: 736px;
  width: 100%;
  flex-direction: row;
  border-radius: 24px;
  justify-content: space-between;
  margin: 0;
  min-height: 90px;
  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    flex-direction: column;
    & > button {
      margin: 1.25rem 0 0;
    }
  `}
  ::before{
    border-radius: 24px;
  }
`;

export const WrapperInfoBlock = styled.div`
  display: flex;
  justify-content: space-between;
  width: 100%;
`;

export const InfoBLock = styled.div`
  display: flex;
  flex-direction: column;
  padding: 0 1.5rem;
`;

export const TitleInfo = styled.div`
  font-style: normal;
  font-weight: 300;
  font-size: .75rem;
  line-height: .875rem;
  color: ${({ theme }) => theme.globalGrey};
  margin-bottom: .5rem;
`;

export const LabelInfo = styled.div`
  font-style: normal;
  font-weight: 500;
  font-size: 1rem;
  line-height: 1.188rem;
`;

export const LogoSoon = styled(Soon)`
  margin-left: .25rem;
`;

'''
'''--- src/pages/Swap/styles.ts ---
import styled from 'styled-components';
import { SpecialContainer } from 'components/SpecialContainer';

import { ReactComponent as IconArrowDown } from 'assets/images-app/icon-arrow-down.svg';
import { ReactComponent as Exchange } from 'assets/images-app/exchange.svg';
import { ReactComponent as RouteArrow } from 'assets/images-app/route-arrow.svg';

export const Container = styled(SpecialContainer)`
  max-width: 500px;
`;

export const ActionContainer = styled.div`
  display: flex;
  flex-direction: column;
`;

export const ArrowDown = styled(IconArrowDown)`
  margin-left: 0.875rem;
`;

export const ChangeTokenContainer = styled.div`
  display: flex;
  align-self: center;
  color: ${({ theme }) => theme.globalGrey};
  margin: 1.125rem 0;
  & > span {
    font-style: normal;
    font-weight: 500;
    font-size: .75rem;
    line-height: .875rem;
  }
  :hover {
    & > svg {
      path {
        fill: ${({ theme }) => theme.globalWhite};
      }
    }
    cursor: pointer;
    color: ${({ theme }) => theme.globalWhite};
  }
`;

export const ChangeTokenLogo = styled(Exchange)`
  margin-right: .5rem;
`;

export const ExchangeBlock = styled.div`
  display: flex;
  justify-content: space-between;
  margin: 1.125rem .75rem 1.375rem .75rem;
  font-style: normal;
  font-weight: normal;
  font-size: .75rem;
  line-height: .875rem;
  color: ${({ theme }) => theme.globalGrey};
`;

export const ExchangeLabel = styled.div`
  display: flex;
  white-space: nowrap;
  overflow: hidden;
`;

export const SettingsBlock = styled.div`
  display: flex;
  flex-direction: column;
`;

export const SettingsHeader = styled.div`
  display: flex;
  align-items: center;
  margin-right: .453rem;
  z-index: 10;
  ::before {
      content: '';
      background: ${({ theme }) => theme.globalGreyOp02};
      height: 1px;
      width: 100%;
    }
`;

export const SettingsLabel = styled.div<{ isActive?: boolean }>`
  display: flex;
  align-items: center;
  & > span {
    font-size: .75rem;
    line-height: .875rem;
    color: ${({ theme, isActive }) => (isActive ? theme.globalWhite : theme.globalGrey)};
    margin-left: 1rem;
  }
  & > svg {
    width: .594rem;
    height: .344rem;
    margin-left: .453rem;
    transform: ${({ isActive }) => (isActive && 'rotate(0.5turn)')};
    transition: all 0.3s ease-out;
    path {
      fill: ${({ theme, isActive }) => (isActive ? theme.globalWhite : theme.globalGrey)};
    }
  }
  :hover {
    cursor: pointer;
    & > span {
    color: ${({ theme }) => theme.globalWhite};
  }
    & > svg {
      path {
        fill: ${({ theme }) => theme.globalWhite};
      }
    }
  }
`;

export const SwapInformation = styled.div`
  display: flex;
  flex-direction: column;
  margin-bottom: 1rem;
  background-color: ${({ theme }) => theme.backgroundCard};
  z-index: 10;
`;

export const RouteBlock = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  margin-bottom: 2rem;
  & > div {
    margin-top: 1rem;
    display: flex;
    align-items: center;
  }
`;

export const RowInfo = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
`;

export const TitleInfo = styled.div`
  display: flex;
  align-items: center;
  font-style: normal;
  font-weight: 300;
  font-size: .75rem;
  line-height: .875rem;
  color: ${({ theme }) => theme.globalGrey};
  margin: 0;
`;

export const LabelInfo = styled.p<{active?: boolean}>`
  font-style: normal;
  font-weight: 300;
  font-size: .75rem;
  line-height: .875rem;
  color: ${({ theme, active = false }) => (active ? theme.globalGreen : theme.globalWhite)};
  margin: 0;
`;

export const LabelError = styled(LabelInfo)`
  color: ${({ theme }) => theme.error};
`;

export const LogoContainer = styled.div`
  margin-right: .5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: ${({ theme }) => theme.bgToken};
  border-radius: 8px;
  transition: all 1s ease-out;
  height: 1.625rem;
  min-width: 1.625rem;
  & > img {
    border-radius: 8px;
    height: 1.5rem;
    width: 1.5rem;
    transition: all 1s ease-out;
  }

  ${({ theme }) => theme.mediaWidth.upToExtraSmall`
    border-radius: 6px;
    height: 1.125rem;
    min-width: 1.125rem;
    & > img {
      border-radius: 6px;
      height: 1rem;
      width: 1rem;
      transition: all 1s ease-out;
    }
  `}
`;

export const RouteArrowLogo = styled(RouteArrow)`
  margin: 0 1rem;
`;

export const BlockButton = styled.div`
  z-index: 4;
  background-color: ${({ theme }) => theme.backgroundCard};
  padding-top: 1.625rem;
  & > button {
    width: 100%;
  }
`;

'''
'''--- src/react-app-env.d.ts ---
/// <reference types="react-scripts" />

'''
'''--- src/reportWebVitals.ts ---
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({
      getCLS, getFID, getFCP, getLCP, getTTFB,
    }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/services/config.ts ---
export default function getConfig(
  env: string | undefined = process.env.REACT_APP_NEAR_ENV,
) {
  switch (env) {
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        explorerUrl: 'https://explorer.testnet.near.org',
        indexerUrl: 'https://jumbo-ps.hapi.farm',
        contractId: 'jumbo-exchange-v1.rkonoval.testnet',

        farmContractId: 'jumbo-farming-v2.rkonoval.testnet',

        nearAddress: 'wrap.testnet',
        jumboAddress: 'jumbo_exchange_v2.solniechniy.testnet',
        jumboPoolId: 1,
        stablePoolId: 3,
      };
    default:
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org',
        explorerUrl: 'https://explorer.mainnet.near.org',
        indexerUrl: 'https://price-service.jumbo.exchange',
        contractId: 'v1.jumbo_exchange.near',

        farmContractId: 'farming-v1.jumbo_exchange.near',

        nearAddress: 'wrap.near',
        jumboAddress: 'token.jumbo_exchange.near',
        jumboPoolId: 4,
        stablePoolId: 0,
      };
  }
}

'''
'''--- src/services/contracts/FarmContract.ts ---
import Big from 'big.js';
import {
  ACCOUNT_MIN_STORAGE_AMOUNT,
  FT_GAS, ONE_YOCTO_NEAR,
  STORAGE_TO_REGISTER_MFT,
  MIN_DEPOSIT_PER_TOKEN_FARM,
} from 'utils/constants';
import { parseTokenAmount } from 'utils/calculations';
import { IPool } from 'store';
import sendTransactions, { wallet } from 'services/near';
import { createContract } from 'services/wallet';
import getConfig from 'services/config';
import { FarmContractMethod, Transaction } from 'services/interfaces';
import FungibleTokenContract from './FungibleToken';

const basicViewMethods = [
  'get_number_of_farms',
  'get_number_of_outdated_farms',

  'list_farms', // (from_index: u64, limit: u64)
  'list_outdated_farms', // (from_index: u64, limit: u64)
  'list_farms_by_seed', // (seed_id: SeedId)

  'list_rewards',
  'list_seeds',
  'list_user_seeds',
  'get_unclaimed_reward',
  'storage_balance_of',

  'get_reward',
];

const basicChangeMethods = [
  'storage_deposit',
  'withdraw_reward',
];

const config = getConfig();

const EXCHANGE_CONTRACT_ID = config.contractId;
const FARM_CONTRACT_ID = config.farmContractId;

export default class FarmContract {
  contract = createContract(
    wallet,
    FARM_CONTRACT_ID,
    basicViewMethods,
    basicChangeMethods,
  )

  nonce = 0;

  walletInstance = wallet;

  contractId = FARM_CONTRACT_ID;

  async getNumberOfFarms() {
    // @ts-expect-error: Property 'getNumberOfFarms' does not exist on type 'Contract'.
    return this.contract.get_number_of_farms();
  }

  async getListFarms(fromIndex: number, limit: number) {
    // @ts-expect-error: Property 'getListFarms' does not exist on type 'Contract'.
    return this.contract.list_farms({ from_index: fromIndex, limit });
  }

  async getRewardByTokenId(tokenId: string, accountId = wallet.getAccountId()) {
    // @ts-expect-error: Property 'getRewardByTokenId' does not exist on type 'Contract'.
    return this.contract.get_reward({ account_id: accountId, token_id: tokenId });
  }

  async getRewards(accountId = wallet.getAccountId()) {
    // @ts-expect-error: Property 'getRewards' does not exist on type 'Contract'.
    return this.contract.list_rewards({ account_id: accountId });
  }

  async getStakedListByAccountId(accountId = wallet.getAccountId()) {
    // @ts-expect-error: Property 'getStakedListByAccountId' does not exist on type 'Contract'.
    return this.contract.list_user_seeds({ account_id: accountId });
  }

  async getSeeds(fromIndex: number, limit: number) {
    // @ts-expect-error: Property 'getSeeds' does not exist on type 'Contract'.
    return this.contract.list_seeds({ from_index: fromIndex, limit });
  }

  async getUnclaimedReward(farmId: string | number, accountId = wallet.getAccountId()) {
    // @ts-expect-error: Property 'getUnclaimedReward' does not exist on type 'Contract'.
    return this.contract.get_unclaimed_reward({ account_id: accountId, farm_id: farmId });
  }

  async currentStorageBalance(accountId = wallet.getAccountId()) {
    // @ts-expect-error: Property 'currentStorageBalance' does not exist on type 'Contract'.
    return this.contract.storage_balance_of({ account_id: accountId });
  }

  async checkFarmStorageBalance(accountId: string = wallet.getAccountId()) {
    const transactions: Transaction[] = [];

    let storageAmount = new Big(0);
    const balance = await this.currentStorageBalance(accountId);

    if (!balance) {
      storageAmount = new Big(ACCOUNT_MIN_STORAGE_AMOUNT);
    }

    if (new Big(balance?.available || '0').lt(MIN_DEPOSIT_PER_TOKEN_FARM)) {
      storageAmount = storageAmount.plus(STORAGE_TO_REGISTER_MFT);
    }

    if (storageAmount.gt(0)) {
      transactions.push({
        receiverId: this.contractId,
        functionCalls: [{
          methodName: FarmContractMethod.storageDeposit,
          args: {
            registration_only: false,
            account_id: accountId,
          },
          amount: storageAmount.toFixed(),
        }],
      });
    }
    return transactions;
  }

  async stake(
    tokenId: string,
    amount: string,
    pool: IPool,
    message: string = '',
  ) {
    const transactions: Transaction[] = [];
    const checkStorage = await this.checkFarmStorageBalance();
    transactions.push(...checkStorage);
    transactions.push({
      receiverId: EXCHANGE_CONTRACT_ID,
      functionCalls: [{
        methodName: FarmContractMethod.mftTransferCall,
        args: {
          receiver_id: this.contractId,
          token_id: tokenId,
          amount: parseTokenAmount(amount, pool.lpTokenDecimals),
          msg: message,
        },
        amount: ONE_YOCTO_NEAR,
        gas: FT_GAS,
      }],
    });
    sendTransactions(transactions, this.walletInstance);
  }

  async unstake(
    seedId: string,
    amount: string,
    pool: IPool,
    message: string = '',
  ) {
    const transactions: Transaction[] = [];
    const checkStorage = await this.checkFarmStorageBalance();
    transactions.push(...checkStorage);
    transactions.push({
      receiverId: this.contractId,
      functionCalls: [{
        methodName: FarmContractMethod.withdrawSeed,
        args: {
          seed_id: seedId,
          amount: parseTokenAmount(amount, pool.lpTokenDecimals),
          msg: message,
        },
        amount: ONE_YOCTO_NEAR,
        gas: FT_GAS,
      }],
    });
    sendTransactions(transactions, this.walletInstance);
  }

  async claimRewardBySeed(seedIds: string[]) {
    seedIds.forEach((seedId) => {
      wallet
        .account()
        .functionCall({
          contractId: this.contractId,
          methodName: FarmContractMethod.claimRewardBySeed,
          args: { seed_id: seedId },
        });
    });
  }

  async withdrawAllReward(
    rewardList: {
      token: FungibleTokenContract;
      value: string;
  }[],
  ) {
    let transactions: Transaction[] = [];

    const storageDeposits = await Promise.all(
      rewardList.map((reward) => reward.token.checkSwapStorageBalance({
        accountId: wallet.getAccountId(),
      })),
    );
    if (storageDeposits.length) transactions = transactions.concat(...storageDeposits);

    rewardList.forEach((farmReward) => {
      transactions.push({
        receiverId: this.contractId,
        functionCalls: [{
          methodName: FarmContractMethod.withdrawReward,
          args: {
            token_id: farmReward.token.contractId,
            amount: farmReward.value,
          },
          gas: '40000000000000',
          amount: ONE_YOCTO_NEAR,
        }],
      });
    });

    sendTransactions(transactions, this.walletInstance);
  }
}

'''
'''--- src/services/contracts/FungibleToken.ts ---
import * as nearApiJs from 'near-api-js';
import nearIcon from 'assets/images-app/near.svg';
import wrapNearIcon from 'assets/images-app/wNEAR.svg';
import defaultToken from 'assets/images-app/defaultToken.svg';
import { ITokenMetadata } from 'store';
import {
  NEAR_TOKEN_ID,
  FT_TRANSFER_GAS,
  ONE_YOCTO_NEAR,
  FT_GAS,
} from 'utils/constants';

import Big from 'big.js';
import { wallet } from 'services/near';
import SpecialWallet, { createContract } from 'services/wallet';
import getConfig from 'services/config';
import { FTTokenContractMethod, Transaction } from 'services/interfaces';

const {
  utils: {
    format: {
      formatNearAmount,
    },
  },
} = nearApiJs;

const basicViewMethods: string[] = ['ft_metadata', 'ft_balance_of', 'storage_balance_of'];
const basicChangeMethods: string[] = ['near_deposit', 'near_withdraw'];
const config = getConfig();
const DECIMALS_DEFAULT_VALUE = 0;
const ICON_DEFAULT_VALUE = '';
const CONTRACT_ID = config.contractId;
export const ACCOUNT_MIN_STORAGE_AMOUNT = '0.005';
export const MIN_DEPOSIT_PER_TOKEN = new Big('5000000000000000000000');
export const STORAGE_PER_TOKEN = '0.005';
export const STORAGE_TO_REGISTER_FT = '0.1';
export const STORAGE_TO_REGISTER_WNEAR = '0.00125';
export const ONE_MORE_DEPOSIT_AMOUNT = '0.01';

const NEAR_TOKEN = {
  decimals: 24,
  icon: nearIcon,
  name: 'Near token',
  version: '0',
  symbol: 'NEAR',
  reference: '',
};

interface FungibleTokenContractInterface {
  wallet: SpecialWallet;
  contractId: string;
}
const defaultMetadata = {
  decimals: DECIMALS_DEFAULT_VALUE,
  icon: ICON_DEFAULT_VALUE,
  name: 'Token',
  version: '0',
  symbol: 'TKN',
  reference: '',
};

export enum StorageType {'Swap' = 'Swap', 'Liquidity' = 'Liquidity'}

export default class FungibleTokenContract {
  constructor(props: FungibleTokenContractInterface) {
    this.contract = createContract(
      props.wallet,
      props.contractId,
      basicViewMethods,
      basicChangeMethods,
    );
    this.contractId = props.contractId;
  }

  contract: any = createContract(
    wallet,
    CONTRACT_ID,
    basicViewMethods,
    basicChangeMethods,
  )

  contractId = CONTRACT_ID;

  metadata: ITokenMetadata = defaultMetadata;

  async getStorageBalance({ accountId } : { accountId: string }) {
    return this.contract.storage_balance_of({ account_id: accountId });
  }

  async getMetadata() {
    try {
      if (this.contractId === NEAR_TOKEN_ID) {
        this.metadata = { ...defaultMetadata, ...NEAR_TOKEN };
        return NEAR_TOKEN;
      }

      if (
        this.metadata.decimals !== DECIMALS_DEFAULT_VALUE
      && this.metadata.icon !== ICON_DEFAULT_VALUE
      ) return this.metadata;

      const metadata = await this.contract.ft_metadata();

      if (this.contractId === config.nearAddress) metadata.icon = wrapNearIcon;
      if (!metadata.icon) metadata.icon = defaultToken;

      this.metadata = { ...defaultMetadata, ...metadata };
      return metadata;
    } catch (e) {
      console.warn(`Error while loading ${this.contractId}`);
    }
    return null;
  }

  async getBalanceOf({ accountId }: { accountId: string }) {
    if (this.contractId === NEAR_TOKEN_ID) {
      return wallet.account().getAccountBalance()
        .then((balances) => balances.available);
    }
    return this.contract.ft_balance_of({ account_id: accountId });
  }

  async checkSwapStorageBalance({ accountId }: { accountId: string }) {
    const transactions: Transaction[] = [];
    try {
      if (this.contractId === NEAR_TOKEN_ID) return [];
      const storageAvailable = await this.getStorageBalance({ accountId });

      if (storageAvailable === null || storageAvailable.total === '0') {
        transactions.push(
          {
            receiverId: this.contractId,
            functionCalls: [{
              methodName: FTTokenContractMethod.storageDeposit,
              args: {
                registration_only: true,
                account_id: accountId,
              },
              amount: this.contractId === config.nearAddress
                ? STORAGE_TO_REGISTER_WNEAR
                : STORAGE_TO_REGISTER_FT,
            }],
          },
        );
      }
      return transactions;
    } catch (e) {
      return [];
    }
  }

  async transfer({
    accountId,
    inputToken,
    amount,
    message = '',
  }:
  {
    accountId: string,
    inputToken: string,
    amount: string,
    message?: string,
  }): Promise<Transaction[]> {
    const transactions: Transaction[] = [];
    const checkStorage = await this.checkSwapStorageBalance({ accountId });
    transactions.push(...checkStorage);
    transactions.push({
      receiverId: inputToken,
      functionCalls: [{
        methodName: FTTokenContractMethod.ftTransferCall,
        args: {
          receiver_id: CONTRACT_ID,
          amount,
          msg: message,
        },
        amount: ONE_YOCTO_NEAR,
        gas: FT_GAS,
      }],
    });
    return transactions;
  }

  wrap({ amount }:{ amount: string, }) {
    if (this.contractId === NEAR_TOKEN_ID) throw Error('Can\'t wrap from NEAR token');
    const transactions: Transaction[] = [];

    transactions.push({
      receiverId: this.contractId,
      functionCalls: [{
        methodName: FTTokenContractMethod.nearDeposit,
        amount: formatNearAmount(amount) as string,
        args: {},
        gas: FT_TRANSFER_GAS as string,
      }],
    });
    return transactions;
  }

  unwrap({ amount }:{ amount: string}) {
    if (this.contractId === NEAR_TOKEN_ID) throw Error('Can\'t wrap from NEAR token');
    const transactions: Transaction[] = [];

    transactions.push({
      receiverId: this.contractId,
      functionCalls: [{
        methodName: FTTokenContractMethod.nearWithdraw,
        args: { amount },
        gas: FT_TRANSFER_GAS as string,
        amount: ONE_YOCTO_NEAR,
      }],
    });

    return transactions;
  }
}

'''
'''--- src/services/contracts/PoolContract.ts ---
import Big from 'big.js';

import {
  ACCOUNT_MIN_STORAGE_AMOUNT,
  MIN_DEPOSIT_PER_TOKEN,
  ONE_MORE_DEPOSIT_AMOUNT,
  LP_STORAGE_AMOUNT,
  STORAGE_PER_TOKEN,
  ONE_YOCTO_NEAR,
  NEAR_TOKEN_ID,
  STABLE_LP_TOKEN_DECIMALS,
} from 'utils/constants';
import {
  calculateAddLiquidity, percentLess, toComparableAmount, toNonDivisibleNumber,
} from 'utils/calculations';
import { IPool, PoolType } from 'store';
import sendTransactions, { wallet } from 'services/near';
import { createContract } from 'services/wallet';
import getConfig from 'services/config';
import {
  ILiquidityToken, IPoolVolumes, PoolContractMethod, Transaction,
} from 'services/interfaces';
import FungibleTokenContract from './FungibleToken';

export const registerTokensAction = (contractId: string, tokenIds: string[]) => ({
  receiverId: contractId,
  functionCalls: [{
    methodName: PoolContractMethod.registerTokens,
    args: { token_ids: tokenIds },
    amount: ONE_YOCTO_NEAR,
    gas: '30000000000000',
  }],
});

const basicViewMethods = [
  'get_return',
  'get_user_storage_state',
  'storage_balance_of',
  'get_pool_shares',
  'get_pool_volumes',
  'get_deposits',
  'get_whitelisted_tokens',
  'get_user_whitelisted_tokens',
  'get_pools', // from_index: u64, limit: u64
  'get_number_of_pools',
  'get_pool', // pool_id: u64
];

const basicChangeMethods = [
  'swap',
  'storage_deposit',
  'add_liquidity',
  'add_stable_liquidity',
  'remove_liquidity',
  'withdraw',
];

const config = getConfig();
const CREATE_POOL_NEAR_AMOUNT = '0.05';
const CONTRACT_ID = config.contractId;

export default class PoolContract {
  contract = createContract(
    wallet,
    CONTRACT_ID,
    basicViewMethods,
    basicChangeMethods,
  )

  nonce = 0;

  walletInstance = wallet;

  contractId = CONTRACT_ID;

  async createPool({ tokens, fee }: { tokens: FungibleTokenContract[], fee: string }) {
    const transactions: Transaction[] = [];
    const tokensStorages = await Promise.all(tokens.map(
      (token) => token.checkSwapStorageBalance({ accountId: this.contractId }),
    ));
    const tokensStoragesAmounts = tokensStorages.flat();
    if (tokensStoragesAmounts.length) {
      transactions.push(...tokensStoragesAmounts);
    }

    const formattedFee = new Big(fee).mul(100).toFixed(0, 0);
    transactions.push({
      receiverId: this.contractId,
      functionCalls: [{
        methodName: PoolContractMethod.addSimplePool,
        args: {
          tokens: tokens.map((token) => token.contractId),
          fee: Number(formattedFee),
        },
        amount: CREATE_POOL_NEAR_AMOUNT,
      }],
    });

    sendTransactions(transactions, this.walletInstance);
  }

  async addLiquidity(
    {
      tokenAmounts,
      pool,
      slippage = '0',
    }:
    {
      tokenAmounts: ILiquidityToken[],
      pool: IPool,
      slippage: string
    },
  ) {
    const transactions: Transaction[] = [];
    const storageAmount = await this.checkStorageBalance();
    const [inputToken, outputToken] = tokenAmounts;
    const [firstTokenName, secondTokenName] = pool.tokenAccountIds;
    const firstToken = tokenAmounts.find((el) => el.token.contractId === firstTokenName);
    const secondToken = tokenAmounts.find((el) => el.token.contractId === secondTokenName);
    if (!firstToken || !secondToken) return;

    const tokenInAmount = toNonDivisibleNumber(
      firstToken.token.metadata.decimals,
      firstToken.amount,
    );

    const tokenOutAmount = toNonDivisibleNumber(
      secondToken.token.metadata.decimals,
      secondToken.amount,
    );
    if (storageAmount.length) transactions.push(...storageAmount);
    const whitelistedTokens = await this.getWhitelistedTokens();

    pool.tokenAccountIds.forEach((tokenId: string) => {
      if (!whitelistedTokens.includes(tokenId)) {
        transactions.push(registerTokensAction(
          this.contractId, [tokenId],
        ));
      }
    });

    const isInputTokenStorage = await inputToken.token.transfer(
      {
        accountId: this.contractId,
        inputToken: inputToken.token.contractId,
        amount: tokenInAmount,
      },
    );
    if (isInputTokenStorage.length) transactions.push(...isInputTokenStorage);

    const isOutputTokenStorage = await outputToken.token.transfer(
      {
        accountId: this.contractId,
        inputToken: outputToken.token.contractId,
        amount: tokenOutAmount,
      },
    );
    if (isOutputTokenStorage.length) transactions.push(...isOutputTokenStorage);

    if (pool.type === PoolType.SIMPLE_POOL) {
      transactions.push({
        receiverId: this.contractId,
        functionCalls: [{
          methodName: PoolContractMethod.addLiquidity,
          args: { pool_id: pool.id, amounts: [tokenInAmount, tokenOutAmount] },
          amount: LP_STORAGE_AMOUNT,
        }],
      });
    } else {
      const depositAmounts = [firstToken.amount, secondToken.amount].map(
        (amount) => Number(toNonDivisibleNumber(STABLE_LP_TOKEN_DECIMALS, amount)),
      );
      const comparableAmounts = toComparableAmount(
        pool.supplies,
        [firstToken.token, secondToken.token],
      );

      if (!comparableAmounts) return;

      const [shares] = calculateAddLiquidity(
        Number(pool.amp),
        depositAmounts,
        comparableAmounts,
        Number(pool.sharesTotalSupply),
        pool.totalFee,
      );

      const minShares = percentLess(slippage, Big(shares).toFixed(0), 0);

      transactions.push({
        receiverId: this.contractId,
        functionCalls: [{
          methodName: PoolContractMethod.addStableLiquidity,
          args: {
            pool_id: pool.id,
            amounts: [tokenInAmount, tokenOutAmount],
            min_shares: minShares,
          },
          amount: LP_STORAGE_AMOUNT,
        }],
      });
    }

    sendTransactions(transactions, this.walletInstance);
  }

  async checkStorageState(accountId = wallet.getAccountId()) {
    const storage = await this.getStorageState(accountId);
    return storage ? new Big(storage?.deposit).lte(new Big(storage?.usage)) : true;
  }

  async getStorageState(accountId = wallet.getAccountId()) {
    // @ts-expect-error: Property 'get_user_storage_state' does not exist on type 'Contract'.
    return this.contract.get_user_storage_state({ account_id: accountId });
  }

  async currentStorageBalance(accountId = wallet.getAccountId()) {
    // @ts-expect-error: Property 'get_user_storage_state' does not exist on type 'Contract'.
    return this.contract.storage_balance_of({ account_id: accountId });
  }

  async getNumberOfPools() {
    // @ts-expect-error: Property 'get_user_storage_state' does not exist on type 'Contract'.
    return this.contract.get_number_of_pools();
  }

  async getPool(poolId: number) {
    // @ts-expect-error: Property 'get_user_storage_state' does not exist on type 'Contract'.
    return this.contract.get_pool({ pool_id: poolId });
  }

  async getPools(from: number, limit: number) {
    // @ts-expect-error: Property 'get_user_storage_state' does not exist on type 'Contract'.
    return this.contract.get_pools({ from_index: from, limit });
  }

  async checkStorageBalance(accountId: string = wallet.getAccountId()) {
    const transactions: Transaction[] = [];

    let storageAmount = new Big(0);

    const storageAvailable = await this.getStorageState(accountId);

    if (!storageAvailable) {
      storageAmount = new Big(ONE_MORE_DEPOSIT_AMOUNT);
    } else {
      const balance = await this.currentStorageBalance(accountId);

      if (!balance) {
        storageAmount = new Big(ACCOUNT_MIN_STORAGE_AMOUNT);
      }

      if (new Big(balance?.available || '0').lt(MIN_DEPOSIT_PER_TOKEN)) {
        storageAmount = storageAmount.plus(Number(STORAGE_PER_TOKEN));
      }
    }

    if (storageAmount.gt(0) && this.contractId !== NEAR_TOKEN_ID) {
      transactions.push({
        receiverId: this.contractId,
        functionCalls: [{
          methodName: PoolContractMethod.storageDeposit,
          args: {
            registration_only: false,
            account_id: accountId,
          },
          amount: storageAmount.toFixed(),
        }],
      });
    }
    return transactions;
  }

  async removeLiquidity(
    {
      pool,
      shares,
      minAmounts,
    }:
    {
      pool: IPool,
      shares: string;
      minAmounts: { [tokenId: string]: string; };
      slippageTolerance?: string
    },
  ) {
    const transactions: Transaction[] = [];
    const storageAmount = await this.checkStorageBalance();

    if (storageAmount.length) transactions.push(...storageAmount);

    transactions.push({
      receiverId: this.contractId,
      functionCalls: [{
        methodName: PoolContractMethod.removeLiquidity,
        args: { pool_id: pool.id, shares, min_amounts: Object.values(minAmounts) },
        amount: ONE_YOCTO_NEAR,
      }],
    });

    pool.tokenAccountIds.map((tokenId) => transactions.push({
      receiverId: this.contractId,
      functionCalls: [
        {
          methodName: PoolContractMethod.withdraw,
          args: {
            token_id: tokenId,
            amount: minAmounts[tokenId],
          },
          amount: ONE_YOCTO_NEAR,
        },
      ],
    }));

    sendTransactions(transactions, this.walletInstance);
  }

  async getPoolVolumes(pool: IPool) {
    // @ts-expect-error: Property 'get_pool_volumes' does not exist on type 'Contract'.
    const volumes = await this.contract.get_pool_volumes(
      { pool_id: pool.id },
    );

    const sumValues = pool.tokenAccountIds.reduce((acc: IPoolVolumes, tokenId, i) => {
      acc[tokenId] = volumes[i];
      return acc;
    }, {});
    return sumValues;
  }

  async withdraw({ claimList }:{claimList: [string, string][]}) {
    const transactions: Transaction[] = [];
    const storageAmount = await this.checkStorageBalance();

    if (storageAmount.length) transactions.push(...storageAmount);

    claimList.map(([tokenId, value]) => transactions.push({
      receiverId: this.contractId,
      functionCalls: [
        {
          methodName: PoolContractMethod.withdraw,
          args: {
            token_id: tokenId,
            amount: value,
          },
          amount: ONE_YOCTO_NEAR,
        },
      ],
    }));

    sendTransactions(transactions, this.walletInstance);
  }

  async getWhitelistedTokens() {
    let userWhitelist = [];
    // @ts-expect-error: Property 'get_whitelisted_tokens' does not exist on type 'Contract'.
    const globalWhitelist = await this.contract.get_whitelisted_tokens();
    if (wallet.isSignedIn()) {
      // @ts-expect-error: Property 'get_user_whitelisted_tokens' does not exist on type 'Contract'.
      userWhitelist = await this.contract.get_user_whitelisted_tokens(
        { account_id: wallet.getAccountId() },
      );
    }
    const tokenList = [...globalWhitelist, ...userWhitelist];
    const uniqueTokens = new Set(tokenList);

    return Array.from(uniqueTokens);
  }

  async getSharesInPool(poolId: any, accountId = wallet.getAccountId()) {
    // @ts-expect-error: Property 'get_pool_shares' does not exist on type 'Contract'.
    return this.contract.get_pool_shares(
      { pool_id: poolId, account_id: accountId },
    );
  }

  async getDeposits(accountId = wallet.getAccountId()) {
    // @ts-expect-error: Property 'get_deposits' does not exist on type 'Contract'.
    return this.contract.get_deposits(
      { account_id: accountId },
    );
  }
}

'''
'''--- src/services/contracts/SwapContract.ts ---
import { IPool } from 'store/interfaces';
import { SWAP_FAILED, SWAP_TOKENS_NOT_IN_SWAP_POOL } from 'utils/errors';
import { ONE_YOCTO_NEAR, NEAR_TOKEN_ID, FT_GAS } from 'utils/constants';
import { percentLess } from 'utils/calculations';
import Big from 'big.js';
import sendTransactions, { wallet } from 'services/near';
import { createContract } from 'services/wallet';
import getConfig from 'services/config';
import { SwapContractMethod, SWAP_ENUM, Transaction } from 'services/interfaces';
import FungibleTokenContract from './FungibleToken';

const basicViewMethods = ['get_return'];
const basicChangeMethods = ['swap'];
const config = getConfig();
const FEE_DIVISOR = 10000;

const CONTRACT_ID = config.contractId;

export default class SwapContract {
  contract = createContract(
    wallet,
    CONTRACT_ID,
    basicViewMethods,
    basicChangeMethods,
  )

  walletInstance = wallet;

  contractId = CONTRACT_ID;

  async getReturn(poolId: number, tokenIn: string, amount: string, tokenOut: string) {
    // @ts-expect-error: Property 'get_return' does not exist on type 'Contract'.
    return this.contract.get_return(
      {
        pool_id: poolId,
        token_in: tokenIn,
        amount_in: amount,
        token_out: tokenOut,
      },
    );
  }

  static getLocalReturn(
    tokenIn: FungibleTokenContract,
    tokenOut: FungibleTokenContract,
    pool: IPool,
    tokenInAmount: string,
  ) {
    const allocation = tokenInAmount;

    const amountWithFee = Number(allocation) * (FEE_DIVISOR - pool.totalFee);
    const inBalance = pool.supplies[tokenIn.contractId];

    const outBalance = pool.supplies[tokenOut.contractId];

    return new Big(
      (
        (amountWithFee * Number(outBalance))
        / (FEE_DIVISOR * Number(inBalance) + amountWithFee)
      ).toString(),
    ).toFixed();
  }

  static getReturnForPools(
    pools: IPool[],
    amount: string,
    tokenIn: FungibleTokenContract,
    tokenOut: FungibleTokenContract,
    tokens: {[key: string]: FungibleTokenContract},
  ) {
    if (tokenIn.contractId === config.nearAddress && tokenOut.contractId === config.nearAddress) {
      return [amount, amount];
    }

    if (pools.length === SWAP_ENUM.DIRECT_SWAP) {
      const [currentPool] = pools;
      const tokensIds = currentPool.tokenAccountIds;
      if (!tokensIds.includes(tokenIn.contractId) || !tokensIds.includes(tokenOut.contractId)) {
        throw Error(`1 ${SWAP_TOKENS_NOT_IN_SWAP_POOL} ${tokenIn.contractId} ${tokenOut.contractId}`);
      }
      const minOutput = SwapContract.getLocalReturn(
        tokenIn,
        tokenOut,
        currentPool,
        amount,
      );
      return [minOutput];
    } if (pools.length === SWAP_ENUM.INDIRECT_SWAP) {
      let [firstPool, secondPool] = pools;

      if (
        firstPool.tokenAccountIds.includes(tokenOut.contractId)
        && secondPool.tokenAccountIds.includes(tokenIn.contractId)
      ) {
        // Swap tokens in case calculations should be done for output token direction
        [secondPool, firstPool] = pools;
      }

      const firstPoolTokens = firstPool.tokenAccountIds;
      const secondPoolTokens = secondPool.tokenAccountIds;

      if (
        !firstPoolTokens.includes(tokenIn.contractId)
        && !secondPoolTokens.includes(tokenOut.contractId)
      ) {
        throw Error(`2 ${SWAP_TOKENS_NOT_IN_SWAP_POOL} ${tokenIn.contractId} ${tokenOut.contractId}`);
      }
      const swapToken = firstPoolTokens.find((tokenName) => tokenName !== tokenIn.contractId);
      if (!swapToken || !tokens[swapToken]) throw Error(SWAP_FAILED);

      const minAmountOutFirst = SwapContract.getLocalReturn(
        tokenIn,
        tokens[swapToken],
        firstPool,
        amount,
      );

      const minAmountOutSecond = SwapContract.getLocalReturn(
        tokens[swapToken],
        tokenOut,
        secondPool,
        minAmountOutFirst,
      );

      return [
        minAmountOutFirst,
        minAmountOutSecond,
      ];
    }
    return ['0', '0'];
  }

  // TODO: REFACTOR
  static generateTransferMessage(
    pools: IPool[],
    amount: string,
    inputToken: FungibleTokenContract,
    outputToken:FungibleTokenContract,
    tokens: {[key: string]: FungibleTokenContract},
    slippage: string = '0',
  ) {
    const [firstMinOutput, secondMinOutput] = SwapContract.getReturnForPools(
      pools, amount, inputToken, outputToken, tokens,
    );

    if (pools.length === SWAP_ENUM.DIRECT_SWAP) {
      const [currentPool] = pools;

      return [{
        pool_id: currentPool.id,
        token_in: inputToken.contractId,
        token_out: outputToken.contractId,
        min_amount_out: percentLess(slippage, firstMinOutput, 0),
      }];
    }
    if (pools.length === SWAP_ENUM.INDIRECT_SWAP) {
      const [firstPool, secondPool] = pools;
      const firstPoolTokens = firstPool.tokenAccountIds;
      const secondPoolTokens = secondPool.tokenAccountIds;
      if (
        !firstPoolTokens.includes(inputToken.contractId)
        && !secondPoolTokens.includes(outputToken.contractId)
      ) {
        throw Error(`3 ${SWAP_TOKENS_NOT_IN_SWAP_POOL} ${inputToken.contractId} ${outputToken.contractId}`);
      }
      const swapToken = firstPoolTokens.find((tokenName) => tokenName !== inputToken.contractId);
      if (!swapToken) throw Error(SWAP_FAILED);

      return [
        {
          pool_id: firstPool.id,
          token_in: inputToken.contractId,
          token_out: swapToken,
          min_amount_out: '0',
        }, {
          pool_id: secondPool.id,
          token_in: swapToken,
          token_out: outputToken.contractId,
          min_amount_out: percentLess(slippage, secondMinOutput, 0),
        },
      ];
    }
    throw Error(SWAP_FAILED);
  }

  async swap({
    inputToken,
    outputToken,
    amount,
    pools,
    tokens,
    slippageAmount,
  }: {
    inputToken: FungibleTokenContract,
    outputToken: FungibleTokenContract,
    amount: string,
    pools: IPool[],
    tokens: {[key: string]: FungibleTokenContract},
    slippageAmount: string
  }) {
    const tokensIds = [inputToken.contractId, outputToken.contractId];

    const transactions: Transaction[] = [];
    const accountId = this.walletInstance.getAccountId();
    const outputTokenStorage = await outputToken.checkSwapStorageBalance({ accountId });
    transactions.push(...outputTokenStorage);

    if (tokensIds.includes(NEAR_TOKEN_ID) && tokensIds.includes(config.nearAddress)) {
      if (inputToken.contractId === NEAR_TOKEN_ID) {
        transactions.push(...outputToken.wrap({ amount }));
      } else {
        transactions.push(...inputToken.unwrap({ amount }));
      }
    } else {
      const swapAction = SwapContract.generateTransferMessage(
        pools, amount, inputToken, outputToken, tokens, slippageAmount,
      );
      transactions.push({
        receiverId: inputToken.contractId,
        functionCalls: [{
          methodName: SwapContractMethod.ftTransferCall,
          args: {
            receiver_id: CONTRACT_ID,
            msg: JSON.stringify({
              force: 0,
              actions: [...swapAction],
            }),
            amount,
          },
          amount: ONE_YOCTO_NEAR,
          gas: FT_GAS,
        }],
      });
    }

    sendTransactions(transactions, this.walletInstance);
  }
}

'''
'''--- src/services/helpers/apiService.ts ---
import { IDayVolume, ITokenPrice, pricesInitialState } from 'store';
import getConfig from '../config';
import { wallet } from '../near';

enum RequestTypes {
 GET = 'GET'
}

const HEADERS = { 'Content-type': 'application/json; charset=UTF-8' };

export class ApiService {
  config = getConfig();

  async getUserWalletTokens() {
    const account = wallet.getAccountId();
    const url = `${this.config.helperUrl}/account/${account}/likelyTokens`;
    try {
      if (!account) return [];
      return await fetch(
        url,
        {
          method: RequestTypes.GET,
          headers: HEADERS,
        },
      )
        .then((res) => res.json())
        .then((tokens) => tokens);
    } catch (e) {
      console.warn(`Error ${e} while loading likely tokens from ${url}`);
      return [];
    }
  }

  async getPriceData(): Promise<{[key: string]: ITokenPrice}> {
    const url = `${this.config.indexerUrl}/token-prices`;
    try {
      const pricesData = await fetch(url, {
        method: RequestTypes.GET,
        headers: HEADERS,
      })
        .then((res) => res.json())
        .then((list) => list);
      return pricesData.reduce(
        (acc: {[key: string]: ITokenPrice}, item: ITokenPrice) => ({
          ...acc, [item.id]: item,
        }), {},
      );
    } catch (e) {
      console.warn(`Error ${e} while loading prices from ${url}`);
      return pricesInitialState;
    }
  }

  async getNearPrice(): Promise<string | null> {
    const url = `${this.config.helperUrl}/fiat`;
    try {
      const pricesData = await fetch(url, {
        method: RequestTypes.GET,
        headers: HEADERS,
      })
        .then((res) => res.json())
        .then((list) => list.near.usd || 0);
      return pricesData;
    } catch (e) {
      console.warn(`Error ${e} while loading near price from ${url}`);
      return null;
    }
  }

  async getDayVolumeData(): Promise<{[key: string]: IDayVolume}> {
    const url = `${this.config.indexerUrl}/pool-volumes`;
    try {
      const dayVolumesData = await fetch(url, {
        method: RequestTypes.GET,
        headers: HEADERS,
      })
        .then((res) => res.json())
        .then((list) => list);
      return dayVolumesData.reduce(
        (acc: {[key: string]: IDayVolume}, item: IDayVolume) => ({
          ...acc, [item.id]: item,
        }), {},
      );
    } catch (e) {
      console.warn(`Error ${e} while loading prices from ${url}`);
      return {};
    }
  }
}

export default new ApiService();

'''
'''--- src/services/helpers/updatePoolService.ts ---
import { useEffect } from 'react';

const DEFAULT_UPDATE_TIMEOUT = 5000;
export const useUpdateService = (
  callback: () => {},
  updateTimeout?: number,
) => useEffect(() => {
  const interval = setInterval(async () => {
    await callback();
  }, updateTimeout || DEFAULT_UPDATE_TIMEOUT);

  return () => clearInterval(interval);
});

export default useUpdateService;

'''
'''--- src/services/interfaces.ts ---
import FungibleTokenContract from 'services/contracts/FungibleToken';

export interface Transaction {
  receiverId: string;
  functionCalls: { gas?:
    string; amount?: string;
    methodName: string;
    args?: object;
  }[];
}

export enum FTTokenContractMethod {
  ftTransferCall = 'ft_transfer_call',
  nearDeposit = 'near_deposit',
  nearWithdraw = 'near_withdraw',
  storageDeposit = 'storage_deposit',
}

export enum SwapContractMethod {
  ftTransferCall = 'ft_transfer_call',
}

export enum PoolContractMethod {
  ftTransferCall = 'ft_transfer_call',
  storageDeposit = 'storage_deposit',
  registerTokens = 'register_tokens',
  addSimplePool = 'add_simple_pool',
  addLiquidity = 'add_liquidity',
  addStableLiquidity = 'add_stable_liquidity',
  removeLiquidity = 'remove_liquidity',
  withdraw = 'withdraw',
}

export enum FarmContractMethod {
  storageDeposit = 'storage_deposit',
  mftTransferCall = 'mft_transfer_call',
  withdrawSeed = 'withdraw_seed',
  withdrawReward = 'withdraw_reward',
  claimRewardBySeed = 'claim_reward_by_seed',
}

export enum SWAP_ENUM { DIRECT_SWAP = 1, INDIRECT_SWAP = 2 }

export interface IPoolVolumes {
  [tokenId: string]: { input: string; output: string };
}

export interface ILiquidityToken {
  token: FungibleTokenContract;
  amount: string
}

'''
'''--- src/services/near.ts ---
import { Near, keyStores, utils } from 'near-api-js';
import SpecialWallet from 'services/wallet';
import BN from 'bn.js';
import { functionCall } from 'near-api-js/lib/transaction';
import getConfig from './config';
import { Transaction } from './interfaces';

const config = getConfig();
const CONTRACT_ID = config.contractId;

export const getGas = (gas?: string) => (gas ? new BN(gas) : new BN('100000000000000'));
export const getAmount = (amount?: string) => (amount ? new BN(utils.format.parseNearAmount(amount) ?? 0) : new BN('0'));

export const near = new Near({
  keyStore: new keyStores.BrowserLocalStorageKeyStore(),
  ...config,
  headers: {},
});

export const wallet = new SpecialWallet(near, CONTRACT_ID);

export const sendTransactions = async (
  transactions: Transaction[],
  walletInstance: SpecialWallet,
) => {
  if (!transactions.length) return;
  const nearTransactions = await Promise.all(
    transactions.map((t, i) => walletInstance.createTransaction({
      receiverId: t.receiverId,
      nonceOffset: i + 1,
      actions: t.functionCalls.map((fc: any) => functionCall(
        fc.methodName,
        fc.args,
        getGas(fc.gas),
        getAmount(fc.amount),
      )),
    })),
  );

  walletInstance.requestSignTransactions({ transactions: nearTransactions });
};

export default sendTransactions;

'''
'''--- src/services/swap.ts ---
import Big from 'big.js';
import { IPool, PoolType } from 'store';
import { formatTokenAmount, percent, scientificNotationToString } from 'utils/calculations';
import FungibleTokenContract from './contracts/FungibleToken';
import { SWAP_ENUM } from './interfaces';

export const calculateMarketPrice = (
  pool: IPool,
  tokenIn: FungibleTokenContract,
  tokenOut: FungibleTokenContract,
) => {
  // TODO: Check for stable swap
  if (pool.type === PoolType.STABLE_SWAP) {
    return '1';
  }
  if (!pool.supplies[tokenIn.contractId] || !pool.supplies[tokenOut.contractId]) return 0;
  const tokenInBalance = formatTokenAmount(
    pool.supplies[tokenIn.contractId],
    tokenIn.metadata.decimals,
  );

  const tokenOutBalance = formatTokenAmount(
    pool.supplies[tokenOut.contractId],
    tokenOut.metadata.decimals,
  );
  return Big(tokenInBalance).div(tokenOutBalance).toFixed();
};

export const calculateAmountReceived = (
  pool: IPool,
  amountIn: string,
  tokenIn: FungibleTokenContract,
  tokenOut: FungibleTokenContract,
) => {
  const partialAmountIn = amountIn;

  if (!pool.supplies[tokenIn.contractId] || !pool.supplies[tokenOut.contractId]) return Big(0);

  const inBalance = formatTokenAmount(
    pool.supplies[tokenIn.contractId],
    tokenIn.metadata.decimals,
  );
  const outBalance = formatTokenAmount(
    pool.supplies[tokenOut.contractId],
    tokenOut.metadata.decimals,
  );
  const bigInBalance = Big(inBalance);
  const bigOutBalance = Big(outBalance);

  const constantProduct = bigInBalance.mul(bigOutBalance);

  const newInBalance = bigInBalance.plus(partialAmountIn);

  const newOutBalance = constantProduct.div(newInBalance);

  const tokenOutReceived = bigOutBalance.minus(newOutBalance);

  return tokenOutReceived;
};

export const calculatePriceImpact = (
  pools: IPool[],
  tokenIn: FungibleTokenContract | null,
  tokenOut: FungibleTokenContract | null,
  tokenInAmount: string,
  tokens: {[key: string]: FungibleTokenContract},
) => {
  if (!tokenIn || !tokenOut || !tokenInAmount || !pools.length) return '0';
  const amounts = pools.map((pool) => pool.amounts).flat();
  if (!amounts.every((amount) => Big(amount).gt('0'))) return '0';

  if (Big(tokenInAmount).lte(0)) return '0';
  let generalMarketPrice = new Big(0);

  let tokenOutReceived = new Big(0);
  if (pools.length === SWAP_ENUM.DIRECT_SWAP) {
    const [currentPool] = pools;
    if (!currentPool.supplies[tokenIn.contractId]
      || !currentPool.supplies[tokenOut.contractId]) return '0';

    const marketPrice = calculateMarketPrice(currentPool, tokenIn, tokenOut);

    generalMarketPrice = generalMarketPrice.add(marketPrice);
    tokenOutReceived = calculateAmountReceived(
      currentPool,
      tokenInAmount,
      tokenIn,
      tokenOut,
    );
  } else {
    const [firstPool, secondPool] = pools;
    const tokenMidId = firstPool.tokenAccountIds.find((token) => token !== tokenIn.contractId);
    const tokenMid = tokens[tokenMidId as string];
    if (!firstPool.supplies[tokenIn.contractId] || !firstPool.supplies[tokenMid.contractId]) return '0';
    if (!secondPool.supplies[tokenMid.contractId] || !secondPool.supplies[tokenOut.contractId]) return '0';

    const firstPoolMarketPrice = calculateMarketPrice(firstPool, tokenIn, tokenMid);
    const secondPoolMarketPrice = calculateMarketPrice(secondPool, tokenMid, tokenOut);
    generalMarketPrice = Big(firstPoolMarketPrice).mul(secondPoolMarketPrice);

    const tokenMidReceived = calculateAmountReceived(
      firstPool,
      tokenInAmount,
      tokenIn,
      tokenMid,
    );

    tokenOutReceived = calculateAmountReceived(
      secondPool,
      tokenMidReceived.toFixed(),
      tokenMid,
      tokenOut,
    );
  }

  const newMarketPrice = new Big(tokenInAmount).div(tokenOutReceived).toFixed();

  const PriceImpact = percent(
    new Big(newMarketPrice).minus(generalMarketPrice).toFixed(),
    newMarketPrice,
  ).toString();
  return scientificNotationToString(PriceImpact);
};

'''
'''--- src/services/wallet.ts ---
/* eslint-disable no-underscore-dangle */
/* eslint-disable max-classes-per-file */
import { baseDecode } from 'borsh';
import { ConnectedWalletAccount, Near, WalletConnection } from 'near-api-js';
import { Action, createTransaction } from 'near-api-js/lib/transaction';
import { PublicKey } from 'near-api-js/lib/utils';
import * as nearAPI from 'near-api-js';

class SpecialWalletAccount extends ConnectedWalletAccount {
  async sendTransactionWithActions(receiverId: string, actions: Action[]) {
    return this.signAndSendTransaction(receiverId, actions);
  }

  async createTransaction({
    receiverId,
    actions,
    nonceOffset = 1,
  }: {
    receiverId: string;
    actions: Action[];
    nonceOffset?: number;
  }) {
    const localKey = await this.connection.signer.getPublicKey(
      this.accountId,
      this.connection.networkId,
    );
    const accessKey = await this.accessKeyForTransaction(
      receiverId,
      actions,
      localKey,
    );
    if (!accessKey) {
      throw new Error(
        `Cannot find matching key for transaction sent to ${receiverId}`,
      );
    }

    const block = await this.connection.provider.block({ finality: 'final' });
    const blockHash = baseDecode(block.header.hash);

    const publicKey = PublicKey.from(accessKey.public_key);
    const nonce = accessKey.access_key.nonce + nonceOffset;

    return createTransaction(
      this.accountId,
      publicKey,
      receiverId,
      nonce,
      actions,
      blockHash,
    );
  }
}

export default class SpecialWallet extends WalletConnection {
  constructor(near: Near, appKeyPrefix: string | null) {
    super(near, appKeyPrefix);
    this._connectedAccount = new SpecialWalletAccount(
      this,
      this._near.connection,
      this._authData.accountId,
    );
  }

  _connectedAccount: SpecialWalletAccount;

  account() {
    if (!this._connectedAccount) {
      this._connectedAccount = new SpecialWalletAccount(
        this,
        this._near.connection,
        this._authData.accountId,
      );
    }

    return this._connectedAccount;
  }

  createTransaction({
    receiverId,
    actions,
    nonceOffset = 1,
  }: {
    receiverId: string;
    actions: Action[];
    nonceOffset?: number;
  }) {
    return this._connectedAccount.createTransaction({
      receiverId,
      actions,
      nonceOffset,
    });
  }
}

export function createContract(
  wallet: SpecialWallet,
  contractId: string,
  viewMethods : string[] = [],
  changeMethods: string[] = [],
) {
  return new nearAPI.Contract(
    wallet.account(),
    contractId,
    {
      viewMethods,
      changeMethods,
    },
  );
}

'''
'''--- src/store/helpers.ts ---
import getConfig from 'services/config';
import FungibleTokenContract from 'services/contracts/FungibleToken';
import PoolContract from 'services/contracts/PoolContract';
import FarmContract from 'services/contracts/FarmContract';
import { wallet as nearWallet } from 'services/near';
import { calculatePriceForToken, isNotNullOrUndefined, toArray } from 'utils';
import { formatTokenAmount } from 'utils/calculations';
import { NEAR_TOKEN_ID } from 'utils/constants';
import ApiService from 'services/helpers/apiService';
import { IPool, ITokenPrice } from './interfaces';

const config = getConfig();
const url = new URL(window.location.href);

export const DEFAULT_PAGE_LIMIT = 100;
export const JUMBO_INITIAL_DATA = {
  id: config.nearAddress,
  decimal: 18,
  symbol: 'JUMBO',
  price: '0',
};
export const NEAR_INITIAL_DATA = {
  id: config.nearAddress,
  decimal: 24,
  symbol: 'near',
  price: '0',
};

function assertFulfilled<T>(item: PromiseSettledResult<T>): item is PromiseFulfilledResult<T> {
  return item.status === 'fulfilled';
}

export async function retrievePoolResult(pages: number, contract: PoolContract) {
  return (await Promise.allSettled(
    [...Array(pages)]
      .map((_, i) => contract.getPools(i * DEFAULT_PAGE_LIMIT, DEFAULT_PAGE_LIMIT)),
  )).filter(assertFulfilled)
    .map(({ value }) => value)
    .flat();
}

export async function retrieveFarmsResult(farmsPages: number, farmContract: FarmContract) {
  return (await Promise.allSettled(
    [...Array(farmsPages)]
      .map((_, i) => farmContract.getListFarms(
        i * DEFAULT_PAGE_LIMIT, DEFAULT_PAGE_LIMIT,
      )),
  )).filter(assertFulfilled)
    .map(({ value }) => value)
    .flat();
}

export function retrieveTokenAddresses(poolsResult: any, userTokens: any): string[] {
  return Array.from(
    new Set(
      [...poolsResult
        .flatMap((pool: any) => pool.token_account_ids),
      NEAR_TOKEN_ID,
      config.nearAddress,
      ...userTokens,
      ],
    ),
  );
}

export async function getPrices(): Promise<{[key: string]: ITokenPrice}> {
  const allPrices = await ApiService.getPriceData();
  const nearPrice = await ApiService.getNearPrice();

  if (nearPrice) {
    return {
      ...allPrices,
      [config.nearAddress]: { ...allPrices[config.nearAddress], price: nearPrice },
    };
  }
  return allPrices;
}

export async function retrieveFilteredTokenMetadata(tokenAddresses: string[]):
Promise<FungibleTokenContract[]> {
  const tokensMetadata: (FungibleTokenContract | null)[] = await Promise.all(
    tokenAddresses.map(async (address: string) => {
      const ftTokenContract: FungibleTokenContract = new FungibleTokenContract(
        { wallet: nearWallet, contractId: address },
      );
      const metadata = await ftTokenContract.getMetadata();
      if (!metadata) return null;
      return ftTokenContract;
    }),
  );
  const tokensMetadataFiltered = tokensMetadata.filter(isNotNullOrUndefined);
  return tokensMetadataFiltered;
}

export async function retrieveBalancesMap(
  tokensMetadataFiltered: FungibleTokenContract[],
  accountId: string,
): Promise<{ [key: string]: string; }> {
  const balancesArray: {contractId: string, balance: string}[] = await Promise.all(
    tokensMetadataFiltered.map(async (tokenContract: FungibleTokenContract) => {
      const balance: string = await tokenContract.getBalanceOf({ accountId }) || 0;
      return { contractId: tokenContract.contractId, balance };
    }),
  );

  return balancesArray.reduce((acc, curr) => (
    { ...acc, [curr.contractId]: curr.balance }
  ), {});
}

export async function retrieveNewPoolArray(
  poolArray: IPool[],
  poolContract: PoolContract,
): Promise<IPool[]> {
  return Promise.all(poolArray.map(async (pool: IPool) => {
    const [volumes, shares] = await Promise.all([
      poolContract.getPoolVolumes(pool),
      poolContract.getSharesInPool(pool.id),
    ]);

    return {
      ...pool,
      volumes,
      shares,
    };
  }));
}

export function retrievePricesData(
  pricesData: {[key: string]: ITokenPrice},
  newPoolMap: {[key: string]: IPool},
  metadataMap: {[key: string]: FungibleTokenContract},
): {[key: string]: ITokenPrice} {
  const jumboPool = newPoolMap[config.jumboPoolId];
  const [firstToken, secondToken] = jumboPool.tokenAccountIds;
  const [wrapNear, jumboToken] = firstToken === config.nearAddress
    ? [firstToken, secondToken] : [secondToken, firstToken];
  const nearPrice = pricesData[config.nearAddress].price || '0';
  const firstDecimals = metadataMap[wrapNear]?.metadata.decimals;
  const secondDecimals = metadataMap[jumboToken]?.metadata.decimals;

  const firstAmount = formatTokenAmount(
    jumboPool.supplies[wrapNear], firstDecimals,
  );
  const secondAmount = formatTokenAmount(
    jumboPool.supplies[jumboToken], secondDecimals,
  );
  const newJumboPrice = calculatePriceForToken(firstAmount, secondAmount, nearPrice);
  return {
    ...pricesData,
    [config.jumboAddress]: {
      ...JUMBO_INITIAL_DATA, price: newJumboPrice,
    },
  };
}

export const findTokenBySymbol = (
  symbol: string,
  tokens: {[key: string]: FungibleTokenContract},
) => toArray(tokens)
  .find((el) => el.metadata.symbol.toLowerCase() === symbol.toLowerCase());

export const tryTokenByKey = (
  tokensMap: { [key: string]: FungibleTokenContract},
  tokenId: string,
  localStorageKey: string,
  urlKey: string,
) => {
  const urlToken = url.searchParams.get(urlKey) || '';
  const tokenFromMap = findTokenBySymbol(urlToken, tokensMap);
  if (
    url.searchParams.has(urlKey) && tokenFromMap
  ) return tokensMap[tokenFromMap.contractId];

  const key = localStorage.getItem(localStorageKey) || '';
  if (key && tokensMap[key]) return tokensMap[key];
  return tokensMap[tokenId];
};

export const getToken = (
  tokenId: string,
  tokens: {[key: string]: FungibleTokenContract},
): FungibleTokenContract | null => (tokenId ? tokens[tokenId] ?? null : null);

'''
'''--- src/store/index.ts ---
export * from './interfaces';
export * from './store';
export * from './modals';

'''
'''--- src/store/interfaces.ts ---
import { FarmStatusEnum } from 'components/FarmStatus';
import { Dispatch, SetStateAction } from 'react';
import FungibleTokenContract from 'services/contracts/FungibleToken';
import { IPoolVolumes } from 'services/interfaces';
import SpecialWallet from 'services/wallet';

export enum StatusLink { Swap = 'swap', Pool ='pool', Farm = 'farm' }
export enum TokenType { 'Input', 'Output'}
export enum PoolType {'SIMPLE_POOL' = 'SIMPLE_POOL', 'STABLE_SWAP' = 'STABLE_SWAP'}
export enum CurrentButton {
  'Swap',
  'AddLiquidity',
  'CreatePool',
  'Withdraw',
  'Stake',
  'UnStake'
}

export interface IPool {
  id: number;
  lpTokenId: string;
  lpTokenDecimals: number;
  type: PoolType;
  tokenAccountIds: string[];
  amounts: string[];
  totalFee: number;
  sharesTotalSupply: string;
  supplies: { [key: string]: string };
  amp: string;

  shares?: string;
  volumes?: IPoolVolumes ;
  farms: string[] | null,

  totalLiquidity: string;
  dayVolume: string;
  apy: string;
}

export interface ITokenMetadata {
  version: string;
  name: string;
  symbol: string;
  reference: string;
  decimals: number;
  icon: string;
}

export interface ITokenPrice {
    id: string,
    decimal: number,
    price: string,
    symbol: string
}

export interface IFarm {
  id: number;
  type: string;
  status: FarmStatusEnum;
  seedId: string;
  rewardTokenId: string;
  startAt: number;
  rewardPerSession: string;
  sessionInterval: number;
  totalReward: string;
  curRound: number;
  lastRound: number;
  claimedReward: string;
  unclaimedReward: string;

  poolId: number;
  totalSeedAmount: string;

  userStaked?: string;
  userUnclaimedReward?: string;
  totalStaked?: string;
  yourStaked?: string;
  apy: string;
}

export interface IDayVolume {
  id: string,
  volume24hFirst: string,
  volume24hSecond: string,
  tokenFirst: string,
  tokenSecond: string,
  updatedAt: string,
}

export type StoreContextType = {
  loading: boolean;
  setLoading: Dispatch<SetStateAction<boolean>>
  priceLoading: boolean;
  setPriceLoading: Dispatch<SetStateAction<boolean>>

  wallet: SpecialWallet | null;
  setWallet: Dispatch<SetStateAction<SpecialWallet | null>>;
  balances: {[key: string]: string};
  setBalances: Dispatch<SetStateAction<{[key: string]: string}>>;
  getTokenBalance: (tokenId: string | undefined) => string;
  updateTokensBalances: (newBalances: { [key: string]: string; }) => void;

  pools: {[key:string]: IPool};
  setPools: Dispatch<SetStateAction<{[key:string]: IPool}>>;
  currentPools: IPool[];
  setCurrentPools: (pools: IPool[]) => void;
  tokens: {[key: string]: FungibleTokenContract};
  setTokens: Dispatch<SetStateAction<{[key: string]: FungibleTokenContract}>>;

  setCurrentToken: (activeToken: FungibleTokenContract, tokenType: TokenType) => void;
  prices: {[key: string]: ITokenPrice},
  setPrices: Dispatch<SetStateAction<{[key: string]: ITokenPrice}>>;

  inputToken: FungibleTokenContract | null;
  setInputToken: Dispatch<SetStateAction<FungibleTokenContract | null>>;
  outputToken: FungibleTokenContract | null;
  setOutputToken: Dispatch<SetStateAction<FungibleTokenContract | null>>;
  updatePools: (newPools: IPool[]) => void;
  farms: {[key: string]: IFarm};
  setFarms: Dispatch<SetStateAction<{[key:string]: IFarm}>>;

  userRewards: {[key:string]: string};
  setUserRewards: Dispatch<SetStateAction<{[key:string]: string}>>;
}

'''
'''--- src/theme/index.ts ---
import { css, DefaultTheme } from 'styled-components/macro';

export const MEDIA_WIDTHS = {
  upToExtraSmall: 500,
  upToSmall: 720,
  upToMedium: 960,
  upToLarge: 1280,
};

const mediaWidthTemplates: {
  [width in keyof typeof MEDIA_WIDTHS]: typeof css;
} = Object.keys(MEDIA_WIDTHS).reduce((accumulator, size) => {
  (accumulator as any)[size] = (a: any, b: any, c: any) => css`
    @media (max-width: ${(MEDIA_WIDTHS as any)[size]}px) {
      ${css(a, b, c)}
    }
  `;
  return accumulator;
}, {}) as any;

export interface ThemeColors {
  layoutBlack: string;
  landingBackground: string;

  globalBlack: string;
  globalWhite: string;
  globalGrey: string;
  globalGreen: string;

  globalGreyOp04: string;
  globalGreyOp02: string;
  globalGreyOp01: string;

  globalGreen0p02: string;

  black: string;
  white: string;

  yellowHapi: string;
  greyText: string;
  greyCard: string;
  greyCardShadow: string;
  greyFooterLogo: string;
  greySocialNetworkBg: string;
  blackCardBg: string
  blackCardText: string;
  blackCardShadow: string
  redBorder: string;
  darkGreenBg: string;
  greenText: string;
  greyBorder: string;

  pink: string;
  pinkHover: string;
  pinkActive: string;
  darkPink: string;

  greyButton: string;
  claimButton: string;
  claimListBg: string;

  backgroundCard: string;
  boxShadowCard: string;
  specialBorderCard: string;
  error: string;
  tooltip: string;

  warningBg: string;

  bgToken: string;

  farmingBg: string;
  rewardTokensBg: string;
  farmingTimeBg: string;

  statusActive: string;
  statusActiveOp01: string;
  statusPending: string;
  statusPendingOp01: string;
  statusEnded: string;
  statusFarmInPoolBg: string;
  menuBg: string;
}

export const colors: ThemeColors = {
  layoutBlack: 'rgba(0, 0, 0, 0.6)',
  landingBackground: '#1B1B1C',

  globalBlack: '#131313',
  globalWhite: '#FFFFFF',
  globalGrey: '#8991A3',
  globalGreen: '#84DA18',

  globalGreyOp04: '#4A515F',
  globalGreyOp02: '#353B49',
  globalGreyOp01: '#2A313D',

  globalGreen0p02: '#2B3F20',

  black: '#000000',
  white: '#ffffff',

  yellowHapi: '#FDEE2D',
  greyText: '#91949D',
  greyCard: '#5A5E6D',
  greyCardShadow: 'rgba(19, 19, 19, 0.6)',
  greyFooterLogo: '#6A6D76',
  greySocialNetworkBg: '#2B2B2B',
  greyBorder: '#727272',
  blackCardBg: 'rgba(19, 19, 19, 0.9)',
  blackCardText: '#A1A4AC',
  blackCardShadow: '#41444d',
  redBorder: '#FE2C55',
  darkGreenBg: '#212C1E;',
  greenText: '#8EF46A',

  pink: '#FE2C55',
  pinkHover: '#E12243',
  pinkActive: '#C71A35',
  darkPink: '#722136',

  greyButton: '#454D5C',
  claimButton: '#151922',
  claimListBg: '#2A303C',

  backgroundCard: '#202632',
  boxShadowCard: 'rgba(10, 12, 18, 0.2)',
  specialBorderCard: 'linear-gradient(180deg, rgb(53, 60, 73), rgba(137, 145, 163, 0) 100%)',
  error: '#FF6F6F',
  tooltip: '#454D5C',

  warningBg: '#4C2739',
  bgToken: '#dfe2e8',

  farmingBg: '#2E253E',
  rewardTokensBg: '#201B2C',
  farmingTimeBg: '#373048',

  statusActive: '#84DA18',
  statusActiveOp01: '#26332A',
  statusPending: '#F0B237',
  statusPendingOp01: '#31302D',
  statusEnded: '#8991A3',
  statusFarmInPoolBg: '#1C212C',
  menuBg: '#2A303C',
};

function theme(): DefaultTheme {
  return {
    ...colors,

    grids: {
      sm: 8,
      md: 12,
      lg: 24,
    },

    // media queries
    mediaWidth: mediaWidthTemplates,

    // css snippets
    flexColumnNoWrap: css`
      display: flex;
      flex-flow: column nowrap;
    `,
    flexRowNoWrap: css`
      display: flex;
      flex-flow: row nowrap;
    `,
  };
}

export default theme;

'''
'''--- src/utils/calculations.ts ---
import Big, { BigSource } from 'big.js';
import FungibleTokenContract from 'services/contracts/FungibleToken';
import { IPool, ITokenPrice } from 'store';
import { toArray } from 'utils';
import { STABLE_LP_TOKEN_DECIMALS } from './constants';

const BASE = 10;
Big.RM = Big.roundDown;
Big.DP = 30;
const FEE_DIVISOR = 10000;

export const round = (decimals: number, minAmountOut: string) => (
  Number.isInteger(Number(minAmountOut))
    ? minAmountOut
    : Math.ceil(
      Math.round(Number(minAmountOut) * (BASE ** decimals))
          / (BASE ** decimals),
    ).toString());

export const toNonDivisibleNumber = (
  decimals: number,
  number: string,
): string => {
  if (decimals === null || decimals === undefined) return number;
  const [wholePart, fracPart = ''] = number.split('.');

  return `${wholePart}${fracPart.padEnd(decimals, '0').slice(0, decimals)}`
    .replace(/^0+/, '')
    .padStart(1, '0');
};

export const formatTokenAmount = (value: string, decimals = 18, precision?: number) => value
  && Big(value).div(Big(BASE).pow(decimals)).toFixed(precision && precision);

export const parseTokenAmount = (value:string, decimals = 18) => value
  && Big(value).times(Big(BASE).pow(decimals)).toFixed(0);

export const removeTrailingZeros = (amount: string) => {
  if (amount.includes('.') || amount.includes(',')) {
    return amount.replace(/\.?0*$/, '');
  }
  return amount;
};

export const percentLess = (
  percent: number | string,
  num: number | string,
  precision: number = 6,
): string => {
  const FULL_AMOUNT_PERCENT = 100;
  const percentDiff = Big(FULL_AMOUNT_PERCENT).minus(percent);
  return Big(num).div(FULL_AMOUNT_PERCENT).mul(percentDiff).toFixed(precision);
};

export const percent = (numerator: string, denominator: string) => Big(numerator)
  .div(denominator).mul(100);

export function scientificNotationToString(strParam: string) {
  const flag = /e/.test(strParam);
  if (!flag) return strParam;

  let symbol = true;
  if (/e-/.test(strParam)) {
    symbol = false;
  }

  const negative = Number(strParam) < 0 ? '-' : '';

  const index = Number((strParam).match(/\d+$/)?.[0] ?? '0');

  // eslint-disable-next-line no-useless-escape
  const basis = strParam.match(/[\d\.]+/)?.[0] ?? '0';

  const ifFraction = basis.includes('.');

  let wholeStr;
  let fractionStr;

  if (ifFraction) {
    [wholeStr, fractionStr] = basis.split('.');
  } else {
    wholeStr = basis;
    fractionStr = '';
  }

  if (symbol) {
    if (!ifFraction) {
      return negative + wholeStr.padEnd(index + wholeStr.length, '0');
    }
    if (fractionStr.length <= index) {
      return negative + wholeStr + fractionStr.padEnd(index, '0');
    }
    return (
      `${negative
            + wholeStr
            + fractionStr.substring(0, index)
      }.${
        fractionStr.substring(index)}`
    );
  }
  if (!ifFraction) {
    return (
      negative
          + wholeStr.padStart(index + wholeStr.length, '0').replace(/^0/, '0.')
    );
  }

  return (
    negative
          + wholeStr.padStart(index + wholeStr.length, '0').replace(/^0/, '0.')
          + fractionStr
  );
}

export const calculateFairShare = (
  totalSupply: string,
  shares: BigSource,
  sharesTotalSupply: BigSource,
) => {
  const mul = new Big(totalSupply).mul(shares);
  const div = new Big(mul).div(sharesTotalSupply);
  return div.toFixed();
};

export const formatBalance = (value: string): string => {
  const formattedValue = new Big(value);
  if (!value || formattedValue.eq(0)) return value;

  if (formattedValue.lte('0.00001')) return '>0.00001';
  if (formattedValue.lt('1000')) return formattedValue.toFixed(5);
  if (formattedValue.gt('100000')) return formattedValue.toPrecision(5);
  return formattedValue.toFixed(0);
};

export const checkInvalidAmount = (
  balances: {[key:string]: string},
  token: FungibleTokenContract | null,
  amount: string,
) => {
  if (amount === '') return true;
  if (!token || !toArray(balances).length) return false;
  const balance = token ? balances[token.contractId] : '0';
  return Big(amount).gt(formatTokenAmount(balance, token.metadata.decimals));
};

export const calcD = (amp: number, comparableAmounts: number[]) => {
  const tokenNumber = comparableAmounts.length;
  const sumAmounts = comparableAmounts.reduce((acc, item) => acc + item, 0);
  let dPrev = 0;
  let d = sumAmounts;
  for (let i = 0; i < 256; i += 1) {
    let dProd = d;
    for (let k = 0; k < comparableAmounts.length; k += 1) {
      dProd = (dProd * d) / (comparableAmounts[k] * tokenNumber);
    }
    dPrev = d;
    const ann = amp * tokenNumber ** tokenNumber;
    const numerator = dPrev * (dProd * tokenNumber + ann * sumAmounts);
    const denominator = dPrev * (ann - 1) + dProd * (tokenNumber + 1);
    d = numerator / denominator;
    if (Math.abs(d - dPrev) <= 1) break;
  }
  return d;
};

export const calcY = (
  amp: number,
  xcamount: number,
  currentComparableAmounts: number[],
  indexX: number,
  indexY: number,
) => {
  const tokenNumber = currentComparableAmounts.length;
  const ann = amp * tokenNumber ** tokenNumber;
  const d = calcD(amp, currentComparableAmounts);
  let s = xcamount;
  let c = (d * d) / xcamount;
  for (let i = 0; i < tokenNumber; i += 1) {
    if (i !== indexX && i !== indexY) {
      s += currentComparableAmounts[i];
      c = (c * d) / currentComparableAmounts[i];
    }
  }
  c = (c * d) / (ann * tokenNumber ** tokenNumber);
  const b = d / ann + s;
  let yPrev = 0;
  let y = d;
  for (let i = 0; i < 256; i += 1) {
    yPrev = y;
    const yNumerator = y ** 2 + c;
    const yDenominator = 2 * y + b - d;
    y = yNumerator / yDenominator;
    if (Math.abs(y - yPrev) <= 1) break;
  }

  return y;
};

const normalizedTradeFee = (
  tokenNumber: number,
  amount: number,
  tradeFee: number,
) => {
  const adjustedTradeFee = Number(
    Math.floor((tradeFee * tokenNumber) / (4 * (tokenNumber - 1))),
  );
  return (amount * adjustedTradeFee) / FEE_DIVISOR;
};

export const calculateAddLiquidity = (
  amp: number,
  depositAmounts: number[],
  oldAmounts: number[],
  poolTokenSupply: number,
  tradeFee: number,
) => {
  const tokenNum = oldAmounts.length;
  const d0 = calcD(amp, oldAmounts);
  const comparableAmounts = [];
  for (let i = 0; i < oldAmounts.length; i += 1) {
    comparableAmounts[i] = oldAmounts[i] + depositAmounts[i];
  }
  const d1 = calcD(amp, comparableAmounts);

  if (Number(d1) <= Number(d0)) { throw new Error('D1 need less then or equal to D0.'); }

  for (let i = 0; i < tokenNum; i += 1) {
    const idealBalance = (oldAmounts[i] * d1) / d0;
    const difference = Math.abs(idealBalance - comparableAmounts[i]);
    const fee = normalizedTradeFee(tokenNum, difference, tradeFee);
    comparableAmounts[i] -= fee;
  }
  const d2 = calcD(amp, comparableAmounts);

  if (Number(d1) < Number(d2)) throw new Error('D2 need less then D1.');

  if (Number(d2) <= Number(d0)) { throw new Error('D1 need less then or equal to D0.'); }
  const mintShares = (poolTokenSupply * (d2 - d0)) / d0;
  const diffShares = (poolTokenSupply * (d1 - d0)) / d0;

  return [mintShares, diffShares - mintShares];
};

export const toComparableAmount = (
  supplies: { [key: string]: string }, tokens: FungibleTokenContract[],
): number[] | null => {
  try {
    const suppliesArray = Object.entries(supplies);
    return suppliesArray.map(([tokenId, supply]) => {
      const token = tokens.find((el) => el.contractId === tokenId);
      if (!token) return 0;
      return Big(supply).mul(Big(BASE).pow(
        STABLE_LP_TOKEN_DECIMALS - token.metadata.decimals,
      )).toNumber();
    });
  } catch (e) {
    return null;
  }
};

export const calcYourLiquidity = (
  tokensData: {[key:string]: FungibleTokenContract},
  pricesData: {[key: string]: ITokenPrice},
  pool: IPool,
) => {
  const [tokenInputName, tokenOutputName] = pool.tokenAccountIds;
  const tokenInput = tokensData[tokenInputName] ?? null;
  const tokenOutput = tokensData[tokenOutputName] ?? null;
  const priceInputToken = pricesData[tokenInputName]?.price ?? 0;
  const priceOutputToken = pricesData[tokenOutputName]?.price ?? 0;

  if (!tokenInput || !tokenOutput) return null;

  const checkTotalSupply = pool?.sharesTotalSupply === '0' ? '1' : pool?.sharesTotalSupply;

  const minAmounts = Object.entries(pool.supplies).reduce<{
    [tokenId: string]: string;
  }>((acc, [tokenId, totalSupply]) => {
    acc[tokenId] = calculateFairShare(
      totalSupply,
      pool.shares || '0',
      checkTotalSupply,
    );
    return acc;
  }, {});
  const [inputToken, outputToken] = Object.values(minAmounts).map((el) => el);

  const inputAmount = formatTokenAmount(
    Big(inputToken).mul(priceInputToken).toFixed(),
    tokenInput.metadata.decimals,
  );
  const outputAmount = formatTokenAmount(
    Big(outputToken).mul(priceOutputToken).toFixed(),
    tokenOutput.metadata.decimals,
  );

  const yourLiquidityAmount = Big(inputAmount).plus(outputAmount).toFixed();
  return yourLiquidityAmount;
};

export const displayPriceWithComma = (str: string) => str.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
export const displayPriceWithSpace = (str: string) => str.replace(/\B(?=(\d{3})+(?!\d))/g, ' ');

export const secondsToMilliseconds = (date: number): number => date * 1000;

export const displayAmount = (amount: string) => {
  const amountBig = new Big(amount);
  if (amountBig.eq('0')) return '-';
  if (amountBig.lte('0.01')) return '>0.01';
  if (amountBig.lte('5')) return `${removeTrailingZeros(amountBig.toFixed(2))}`;
  return `${displayPriceWithSpace(amountBig.toFixed(0))}`;
};

'''
'''--- src/utils/constants.ts ---
import Big from 'big.js';
import { parseNearAmount } from 'near-api-js/lib/utils/format';

export const docsLink = 'https://jumbo-exchange.gitbook.io/product-docs/';
export const telegramLink = 'https://t.me/jumbo_ann';
export const twitterLink = 'https://twitter.com/jumbo_exchange';
export const mediumLink = 'https://medium.com/jumbo-dex';
export const hapiLink = 'https://hapi.one/';

export const SLIPPAGE_TOLERANCE_DEFAULT = '1';
export const SLIPPAGE_TOLERANCE_DEFAULT_ADD_STABLE_LIQ = '0.1';
export const TOTAL_FEE_DEFAULT = '0.3';

export const MAX_TOGGLE_AMOUNT = 100;
export const MIN_TOGGLE_AMOUNT = 0;

export const MAX_SLIPPAGE_TOLERANCE = 100;
export const MIN_SLIPPAGE_TOLERANCE = 0;

export const MAX_TOTAL_FEE = 20;
export const MIN_TOTAL_FEE = 0;

export const COEFFICIENT_SLIPPAGE = 0.33;
export const COEFFICIENT_TOTAL_FEE = 0.33;

export const MIN_FEE_CREATE_POOL = '0.01';
export const MAX_FEE_CREATE_POOL = '20';

export const poolFeeOptions = [
  { label: '0.2%', value: '0.2' },
  { label: '0.3%', value: '0.3' },
  { label: '0.6%', value: '0.6' },
];

export const slippageToleranceOptions: {label: string, value: string}[] = [
  { label: '0.1%', value: '0.1' },
  { label: '1%', value: '1' },
  { label: '5%', value: '5' },
];

export const slippageToleranceOptionsAddStableLiq: {label: string, value: string}[] = [
  { label: '0.05%', value: '0.05' },
  { label: '0.1%', value: '0.1' },
  { label: '0.2%', value: '0.2' },
];

export const FT_GAS = '180000000000000';

export const ONE_YOCTO_NEAR = '0.000000000000000000000001';
export const FT_STORAGE_DEPOSIT_GAS = parseNearAmount('0.00000000003');
export const FT_TRANSFER_GAS = parseNearAmount('0.00000000003');
export const ONE_MORE_DEPOSIT_AMOUNT = '0.01';
export const ACCOUNT_MIN_STORAGE_AMOUNT = '0.005';
export const MIN_DEPOSIT_PER_TOKEN = new Big('5000000000000000000000');
export const STORAGE_PER_TOKEN = '0.005';
export const LP_STORAGE_AMOUNT = '0.01';
export const YOCTO_IN_NEAR_DECIMALS = 24;
export const FEE_DIVISOR = 100;
export const STORAGE_TO_REGISTER_MFT = '0.045';
export const MIN_DEPOSIT_PER_TOKEN_FARM = new Big('45000000000000000000000');

export const LP_TOKEN_DECIMALS = 24;
export const STABLE_LP_TOKEN_DECIMALS = 18;

export const BAD_PRICE_IMPACT = 2;
export const SHOW_WARNING_PRICE_IMPACT = 10;

export const NEAR_TOKEN_ID = 'NEAR';

export const SWAP_INPUT_KEY = 'JUMBO_SWAP_INPUT_TOKEN';
export const SWAP_OUTPUT_KEY = 'JUMBO_SWAP_OUTPUT_TOKEN';

export const URL_INPUT_TOKEN = 'inputToken';
export const URL_OUTPUT_TOKEN = 'outputToken';

export const INITIAL_INPUT_PLACEHOLDER = '';
export const ZERO_AMOUNT = '0';
export const SMALL_SHARE = '0.001';

export const UPDATE_CLAIM_REWARD_DATE = 10 * 60 * 1000;
export const CLAIM_REWARD_DATE_KEY = 'CLAIM_REWARD_DATE';

export const MIN_DEPOSIT_SHARES = '10000000000000000000';

export const SECONDS_IN_A_DAY = 86400;
export const DAYS_A_YEAR = 365;
export const ONE_HUNDRED = 100;
export const SHOW_MIN_TOTAL_LIQUIDITY = '1000';

'''
'''--- src/utils/errors.ts ---
export const SWAP_TOKENS_NOT_IN_SWAP_POOL = 'swap tokens not in swap pool';
export const SWAP_FAILED = 'swap failed';

'''
'''--- src/utils/index.ts ---
import Big from 'big.js';
import { farmStatus, getFarmStatus } from 'components/FarmStatus';
import getConfig from 'services/config';
import FungibleTokenContract from 'services/contracts/FungibleToken';
import {
  IFarm, IPool, ITokenPrice, PoolType, IDayVolume,
} from 'store';
import { formatTokenAmount, removeTrailingZeros } from './calculations';
import {
  DAYS_A_YEAR,
  LP_TOKEN_DECIMALS,
  SECONDS_IN_A_DAY,
  STABLE_LP_TOKEN_DECIMALS,
  SWAP_INPUT_KEY,
  SWAP_OUTPUT_KEY,
  ONE_HUNDRED,
} from './constants';

const ACCOUNT_TRIM_LENGTH = 10;
const FEE_DIVISOR = 10000;
const FULL_PERCENTAGE = 100;
Big.RM = Big.roundDown;
Big.DP = 30;

export const trimAccountId = (accountId: string) => {
  if (accountId.length > 20) {
    return `${accountId.slice(0, ACCOUNT_TRIM_LENGTH)}...`;
  }
  return accountId;
};

export const getUpperCase = (value:string) => value.toUpperCase();

export const inputRegex = RegExp('^\\d*(?:\\\\[.])?\\d*$'); // match escaped "." characters via in a non-capturing group

export function escapeRegExp(string: string): string {
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
}

export function formatPool(pool: any): IPool {
  const CURRENT_LP_TOKEN_DECIMALS = pool.pool_kind === PoolType.SIMPLE_POOL
    ? LP_TOKEN_DECIMALS
    : STABLE_LP_TOKEN_DECIMALS;

  return {
    id: pool.id,
    lpTokenId: `:${pool.id}`,
    lpTokenDecimals: CURRENT_LP_TOKEN_DECIMALS,
    type: pool.pool_kind === PoolType.STABLE_SWAP ? PoolType.STABLE_SWAP : PoolType.SIMPLE_POOL,
    tokenAccountIds: pool.token_account_ids,
    amounts: pool.amounts,
    supplies: pool.amounts.reduce(
      (acc: { [tokenId: string]: string }, amount: string, i: number) => {
        acc[pool.token_account_ids[i]] = amount;
        return acc;
      },
      {},
    ),
    totalFee: pool.total_fee,
    sharesTotalSupply: pool.shares_total_supply,
    amp: pool.amp,
    totalLiquidity: '0',
    farms: null,
    dayVolume: '0',
    apy: '0',
  };
}

export const sortPoolsByLiquidity = (
  pools: IPool[], tokens: {[key:string]: FungibleTokenContract},
) => {
  try {
    return pools.sort((first, second) => {
      const firstPoolLiquidity = Object.entries(first.supplies)
        .reduce((acc, [key, value]) => acc.add(
          formatTokenAmount(value, tokens[key as string].metadata.decimals),
        ), Big(0));
      const secondPoolLiquidity = Object.entries(second.supplies)
        .reduce((acc, [key, value]) => acc.add(
          formatTokenAmount(value, tokens[key as string].metadata.decimals),
        ), Big(0));
      return secondPoolLiquidity.minus(firstPoolLiquidity).toNumber();
    });
  } catch (e) {
    return [];
  }
};

export function getPoolsPath(
  tokenAddressInput: string,
  tokenAddressOutput: string,
  pools: IPool[],
  tokensMap: {[key:string]: FungibleTokenContract},
) :IPool[] {
  const tokens = pools.map((pool) => pool.tokenAccountIds).flat();
  if (!tokenAddressInput || !tokenAddressOutput) return [];
  if (!tokens.includes(tokenAddressInput) || !tokens.includes(tokenAddressOutput)) return [];
  if (tokenAddressInput === tokenAddressOutput) return [];
  const sortedPools = sortPoolsByLiquidity(pools, tokensMap);
  const directSwap = sortedPools.find(
    (pool) => pool.tokenAccountIds.includes(tokenAddressInput)
    && pool.tokenAccountIds.includes(tokenAddressOutput),
  );
  if (directSwap) return [directSwap];

  const inputTokenPools = sortedPools
    .filter((pool) => pool.tokenAccountIds.includes(tokenAddressInput));
  const outputTokenPools = sortedPools
    .filter((pool) => pool.tokenAccountIds.includes(tokenAddressOutput));
  const outputTokens = outputTokenPools.map((el) => el.tokenAccountIds).flat();
  const intersectionPairToken = inputTokenPools
    .map((el) => el.tokenAccountIds)
    .flat()
    .find((el) => outputTokens.includes(el));
  if (intersectionPairToken) {
    const firstSwap = inputTokenPools.find(
      (el) => el.tokenAccountIds.includes(intersectionPairToken),
    );
    const secondSwap = outputTokenPools.find(
      (el) => el.tokenAccountIds.includes(intersectionPairToken),
    );
    if (!firstSwap || !secondSwap) return [];
    return [firstSwap, secondSwap];
  }
  return [];
}

export const toArray = (map: {[key: string]: any}) => Object.values(map);
export const toMap = (array: any[]) => array.reduce(
  (acc, item) => ({ ...acc, [item.id]: item }), {},
);

export const calculatePriceForToken = (
  firstAmount: string,
  secondAmount: string,
  price: string,
) => {
  if (!price) return '0';
  if (Big(firstAmount).lte(0)) return '0';
  return new Big(firstAmount)
    .mul(price).div(secondAmount).toFixed(2);
};

export const calcPoolApy = (pool: IPool, dayVolume: string, totalLiquidity: string): string => {
  const firstMultiplier = Big(1).div(totalLiquidity);
  const secondMultiplier = Big(pool.totalFee).mul(dayVolume).div(FEE_DIVISOR).mul(FULL_PERCENTAGE);
  const mulFirstAndSecond = firstMultiplier.mul(secondMultiplier);
  const poolAPY = mulFirstAndSecond.mul(365);
  return poolAPY.toFixed();
};

export const calculateTotalAmountAndDayVolume = (
  pricesData: {[key: string]: ITokenPrice},
  metadataMap: {[key: string]: FungibleTokenContract},
  newPoolMap: {[key: string]: IPool},
  dayVolumesData: {[key: string]: IDayVolume},
):{[key:string]: IPool} => {
  const calculatedPools = toArray(newPoolMap).map((pool: IPool) => {
    const config = getConfig();

    const [firstToken, secondToken] = pool.tokenAccountIds;
    let firstPrice = pricesData[firstToken]?.price ?? 0;
    let secondPrice = pricesData[secondToken]?.price ?? 0;
    let firstDecimals = metadataMap[firstToken]?.metadata.decimals;
    let secondDecimals = metadataMap[secondToken]?.metadata.decimals;

    const firstAmount = formatTokenAmount(
      pool.supplies[firstToken], firstDecimals,
    );
    const secondAmount = formatTokenAmount(
      pool.supplies[secondToken], secondDecimals,
    );

    if (firstToken === config.nearAddress || secondToken === config.nearAddress) {
      if (firstToken === config.nearAddress) {
        secondPrice = Big(secondAmount).gt(0) ? (new Big(firstAmount)
          .mul(firstPrice).div(secondAmount).toFixed(2)) : '0';
        secondDecimals = metadataMap[secondToken]?.metadata.decimals ?? 0;
      } else {
        firstPrice = Big(firstAmount).gt(0) ? (new Big(secondAmount)
          .mul(secondPrice).div(firstAmount).toFixed(2)) : '0';
        firstDecimals = metadataMap[secondToken]?.metadata.decimals ?? 0;
      }
    }

    if (firstPrice && secondPrice) {
      const firstLiquidity = new Big(firstAmount).mul(firstPrice);
      const secondLiquidity = new Big(secondAmount).mul(secondPrice);
      const totalLiquidityAmount = new Big(firstLiquidity).add(secondLiquidity);
      const totalLiquidityValue = removeTrailingZeros(totalLiquidityAmount.toFixed());

      const dayVolumeData = dayVolumesData[pool.id] || null;
      if (!dayVolumeData) return { ...pool, totalLiquidity: totalLiquidityValue };

      const tokenFirst = pricesData[dayVolumeData.tokenFirst]?.price ?? 0;
      const tokenSecond = pricesData[dayVolumeData.tokenSecond]?.price ?? 0;
      const tokenFirstDecimals = metadataMap[dayVolumeData.tokenFirst]?.metadata.decimals;
      const tokenSecondDecimals = metadataMap[dayVolumeData.tokenSecond]?.metadata.decimals;
      const tokenFirstAmount = formatTokenAmount(
        dayVolumeData.volume24hFirst, tokenFirstDecimals,
      );
      const tokenSecondAmount = formatTokenAmount(
        dayVolumeData.volume24hSecond, tokenSecondDecimals,
      );

      const firstDayVolume = new Big(tokenFirst).mul(tokenFirstAmount);
      const secondDayVolume = new Big(tokenSecond).mul(tokenSecondAmount);
      const totalDayVolumeAmount = firstDayVolume.add(secondDayVolume);
      const totalDayVolumeValue = removeTrailingZeros(totalDayVolumeAmount.toFixed());
      return {
        ...pool,
        totalLiquidity: totalLiquidityValue,
        dayVolume: totalDayVolumeValue,
        apy: calcPoolApy(pool, totalDayVolumeValue, totalLiquidityValue),
      };
    }
    return {
      ...pool,
    };
  });

  return toMap(calculatedPools);
};

export function formatFarm(
  farm: any,
  pools: IPool[],
  seeds: any,
): IFarm | null {
  const lpTokenId = farm.farm_id.slice(farm.farm_id.indexOf('@') + 1, farm.farm_id.lastIndexOf('#'));
  const pool = pools.find(
    (poolItem: IPool) => poolItem.id === Number(lpTokenId),
  );
  if (!pool) return null;

  const totalSeedAmount = seeds[farm.seed_id] ?? '0';

  if (farm.farm_status === farmStatus.created) return null;
  const statusFarm = getFarmStatus(farm.farm_status, farm.start_at);

  return {
    id: farm.farm_id,
    type: farm.farm_kind,
    status: statusFarm,
    seedId: farm.seed_id,
    rewardTokenId: farm.reward_token,
    startAt: farm.start_at,
    rewardPerSession: farm.reward_per_session,
    sessionInterval: farm.session_interval,
    totalReward: farm.total_reward,
    curRound: farm.cur_round,
    lastRound: farm.last_round,
    claimedReward: farm.claimed_reward,
    unclaimedReward: farm.unclaimed_reward,

    poolId: pool.id,
    totalSeedAmount,
    apy: '0',
  };
}

export function isNotNullOrUndefined<T extends Object>(input: null | undefined | T): input is T {
  return input != null;
}

export function onlyUniqueValues(values: string[]) {
  return Array.from(new Set(values));
}

export const saveSwapTokens = (
  inputToken: string | null | undefined, outputToken: string | null| undefined,
) => {
  if (!inputToken || !outputToken) return;
  localStorage.setItem(SWAP_INPUT_KEY, inputToken);
  localStorage.setItem(SWAP_OUTPUT_KEY, outputToken);
};

export const calcStakedAmount = (shares: string, pool: IPool) => {
  const { sharesTotalSupply, totalLiquidity } = pool;
  if (Big(sharesTotalSupply).lte('0') || Big(shares).lte('0')) return null;
  const formatTotalShares = formatTokenAmount(sharesTotalSupply, pool.lpTokenDecimals);
  const formatShares = formatTokenAmount(shares, pool.lpTokenDecimals);

  const numerator = Big(formatShares).times(totalLiquidity);
  const sharesInUsdt = Big(numerator).div(formatTotalShares).toFixed(2);
  return removeTrailingZeros(sharesInUsdt);
};

export const getTotalApy = (farms: IFarm[]) => {
  let apy = new Big('0');
  if (farms.length > 1) {
    farms.forEach((item) => {
      apy = Big(item.apy).add(apy);
    });
  } else {
    apy = Big(farms[0].apy);
  }
  return apy.toFixed();
};

export const calcAprAndStakedAmount = (
  pricesData: {[key: string]: ITokenPrice},
  metadataMap: {[key: string]: FungibleTokenContract},
  resultedPoolsArray: {[key:string]: IPool},
  newFarmMap: {[key:string]: IFarm},
) => {
  const calculatedFarms = toArray(newFarmMap).map((farm: IFarm) => {
    const pool: IPool = toArray(resultedPoolsArray)
      .find((item: IPool) => item.id === farm.poolId);

    const rewardToken = metadataMap[farm.rewardTokenId] || null;
    const rewardTokenPrice = pricesData[farm.rewardTokenId]?.price || '0';
    const totalStaked = calcStakedAmount(farm.totalSeedAmount, pool);
    const yourStaked = calcStakedAmount(farm.userStaked || '0', pool);
    if (totalStaked && Big(totalStaked).gt(0)) {
      const rewardNumberPerDay = Big(farm.rewardPerSession)
        .div(farm.sessionInterval)
        .mul(SECONDS_IN_A_DAY).toFixed();

      const rewardsPerDay = formatTokenAmount(rewardNumberPerDay, rewardToken.metadata.decimals);
      const firstMultiplier = Big(1).div(totalStaked);
      const secondMultiplier = Big(rewardsPerDay).mul(rewardTokenPrice);
      const mulFirstAndSecond = firstMultiplier.mul(secondMultiplier);
      const farmAPY = mulFirstAndSecond.mul(DAYS_A_YEAR).mul(ONE_HUNDRED).toFixed();
      return {
        ...farm,
        totalStaked,
        yourStaked,
        apy: farmAPY,
      };
    }
    return {
      ...farm,
      totalStaked,
      yourStaked,
      apy: '0',
    };
  });

  return toMap(calculatedFarms);
};

export const formatDate = (number: number) => (number > 9 ? number.toString() : `0${number}`);

'''
'''--- src/utils/routes.ts ---
import { URL_INPUT_TOKEN, URL_OUTPUT_TOKEN } from './constants';

export const LANDING = '/';
export const SWAP = 'swap';
export const POOL = 'pool';
export const ALL_MATCH = '/*';
export const toAddLiquidityPage = (id : string|number = ':id') => `/pool/add-liquidity/${id}`;
export const toRemoveLiquidityPage = (id : string|number = ':id') => `/pool/remove-liquidity/${id}`;

export const TO_SWAP_URL = `?${URL_INPUT_TOKEN}=:inputToken&${URL_OUTPUT_TOKEN}=:outputToken`;

export const toStakePage = (id : string|number = ':id') => `/pool/stake/${id}`;
export const toUnStakeAndClaimPage = (id : string|number = ':id') => `/pool/unstake-and-claim/${id}`;

'''
'''--- src/utils/userAgent.ts ---
const userAgent = navigator.userAgent || navigator.vendor;

const isMobileCheck = () => {
  const windows = /windows phone/i.test(userAgent);
  const android = /android/i.test(userAgent);
  const iOs = /iPhone/.test(userAgent);

  return windows || android || iOs;
};

const isTabletCheck = () => {
  const tablet = /Tablet|iPad/i.test(userAgent);
  return tablet;
};

export const isMobile = isMobileCheck();
export const isTablet = isTabletCheck();

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "baseUrl": "src"
  },
  "include": ["src"]
}

'''