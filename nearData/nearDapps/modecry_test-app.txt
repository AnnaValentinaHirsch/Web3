*GitHub Repository "modecry/test-app"*

'''--- README.md ---
# Тестовое задание 

## Скрипты

`yarn start` - dev mode на http://localhost:3000

`yarn build`- выгружает сборку в build

`yarn lint`- запуск линтера

## Переменные
`REACT_APP_APP_URL`- Переменная для редиректа в приложение

## Структура проекта

`src/assets` - ассеты и статика

`src/components` - core компоненты и shared компоненты

`src/core` - сервисы, утилиты, константы и мапперы

`src/helpers` - вспомогательные функции

`src/infra` - типизация

`src/pages` - страницы

'''
'''--- craco.config.js ---
const path = require('path')
module.exports = {
    webpack: {
        alias: {
            '@': path.resolve(__dirname, 'src'),
        },
    },
}

'''
'''--- global.d.ts ---
declare global {
  namespace NodeJS {
    interface ProcessEnv {
      REACT_APP_APP_URL: string
    }
  }
}

export {}

'''
'''--- package.json ---
{
  "name": "spin-test-task",
  "version": "0.1.0",
  "private": false,
  "homepage": "http://modecry.github.io/test-app",
  "dependencies": {
    "@emotion/react": "^11.10.6",
    "@emotion/styled": "^11.10.6",
    "@fontsource/roboto": "^4.5.8",
    "@mui/icons-material": "^5.11.11",
    "@mui/material": "^5.11.11",
    "@mui/styled-engine-sc": "^5.11.11",
    "@testing-library/jest-dom": "^5.14.1",
    "@testing-library/react": "^13.0.0",
    "@testing-library/user-event": "^13.2.1",
    "@types/jest": "^27.0.1",
    "@types/node": "^16.7.13",
    "@types/react": "^18.0.0",
    "@types/react-color": "^3.0.6",
    "@types/react-dom": "^18.0.0",
    "buffer": "^6.0.3",
    "gh-pages": "^5.0.0",
    "near-api-js": "^1.1.0",
    "notistack": "^2.0.8",
    "react": "^18.2.0",
    "react-color": "^2.19.3",
    "react-dom": "^18.2.0",
    "react-query": "^3.39.3",
    "react-router-dom": "^6.8.2",
    "react-scripts": "5.0.1",
    "styled-components": "^5.3.8",
    "typescript": "^4.4.2",
    "web-vitals": "^2.1.0"
  },
  "scripts": {
    "start": "craco start",
    "build": "craco build",
    "predeploy" : "npm run build",
    "deploy" : "gh-pages -d build",
    "lint": "eslint --ext .js,.ts,.tsx ./src --color"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@craco/craco": "^7.0.0",
    "eslint": "8.22.0",
    "eslint-config-react-app": "^7.0.1",
    "prettier": "^2.8.4"
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <meta http-equiv="Permissions-Policy" content="interest-cohort=()">
    <title>Spin Test Task app</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/assets/icons/index.ts ---
export { NearIconSvg } from "./Near.icon.svg"

'''
'''--- src/components/common/index.ts ---
export { GlobalLoader } from "./GlobalLoader/GlobalLoader"
export { Loader } from "./Loader/Loader"

'''
'''--- src/components/layouts/index.ts ---
export { MainLayout } from "./Main.layout"
export { CenterdLayout } from "./CenterdLayout"

'''
'''--- src/core/constants/connection.config.ts ---
import { IConnection } from "@/infra/near/Connection.interface"

export const CONNECTION_CONFIG: IConnection = {
  networkId: "testnet",
  nodeUrl: "https://rpc.testnet.near.org",
  walletUrl: "https://wallet.testnet.near.org",
  helperUrl: "https://helper.testnet.near.org",
  explorerUrl: "https://explorer.testnet.near.org",
}

'''
'''--- src/core/constants/index.ts ---
export { CONNECTION_CONFIG } from "./connection.config"

'''
'''--- src/core/mappers/rgbColorMapper.ts ---
import { RGBType } from "@/infra/common/RGB.type"
import { IContractRGBValue } from "@/infra/near/methods/ContractRGB.interface"

/**
 * Мапит rgb массив в rgb ключи
 * @param rbcolor
 */
export const rgbColorMapper = (rbcolor: RGBType): IContractRGBValue => {
  return { r: rbcolor[0], g: rbcolor[1], b: rbcolor[2] }
}

'''
'''--- src/core/services/Near.service.ts ---
import { KeyStore } from "near-api-js/lib/key_stores"
import { keyStores, connect, WalletConnection, Account } from "near-api-js"
import { getConnectionConfig } from "@/core/services/utils/getConnectionConfig"
import { Near } from "near-api-js/lib/near"

export class NearService {
  public static store: KeyStore
  public static walletConnection: WalletConnection
  public static account: Account
  private static connection: Near

  /**
   * Иницилизация кей стора
   */
  public static init = async () => {
    try {
      NearService.store = new keyStores.BrowserLocalStorageKeyStore()

      await NearService.connect()
      await NearService.connectWallet()
      if (NearService.walletConnection?.isSignedIn()) {
        await NearService.initAccount()
      }
    } catch (e) {
      throw e
    }
  }

  /**
   * Коннект wallet
   * @private
   */
  private static connectWallet = () => {
    try {
      NearService.walletConnection = new WalletConnection(NearService.connection, null)
    } catch (e) {
      throw e
    }
  }

  /**
   * Коннект to near
   * @private
   * @return Promise<void>
   */
  private static connect = async () => {
    try {
      const connectionConfig = getConnectionConfig(NearService.store)
      NearService.connection = await connect(connectionConfig)
    } catch (e) {
      throw e
    }
  }

  /**
   * Логин в near wallet
   */
  public static logIn = async () => {
    try {
      const successUrl = process.env.REACT_APP_APP_URL
      await NearService.walletConnection.requestSignIn({
        successUrl,
      })
    } catch (e) {
      throw e
    }
  }

  /**
   * Логаут из near
   */
  public static logOut = async () => {
    try {
      await NearService.walletConnection.signOut()
    } catch (e) {
      throw e
    }
  }

  /**
   * Инцилизация аккаунта
   */
  private static initAccount = async () => {
    try {
      const accountId = NearService.walletConnection.getAccountId()
      NearService.account = await NearService.connection.account(accountId)
    } catch (e) {
      throw e
    }
  }
}

'''
'''--- src/core/services/utils/getConnectionConfig.ts ---
import { CONNECTION_CONFIG } from "@/core/constants"
import { KeyStore } from "near-api-js/lib/key_stores"
import { IConnection } from "@/infra/near/Connection.interface"

export const getConnectionConfig = (keyStore: KeyStore): IConnection => ({ ...CONNECTION_CONFIG, keyStore })

'''
'''--- src/helpers/hocs/index.ts ---
export { WithAuth } from "./withAuth"

'''
'''--- src/helpers/hooks/useGetContract.ts ---
import { Contract } from "near-api-js"
import { NearService } from "@/core/services/Near.service"
import { TContract } from "@/infra/near/methods/Contract.type"
import { useMemo } from "react"

export const useGetContract = <TMethods = unknown>(contractId: string) => {
  const contract = useMemo(() => {
    return new Contract(NearService.walletConnection.account(), contractId, {
      viewMethods: ["get"],
      changeMethods: ["set"],
    }) as TContract<TMethods>
  }, [contractId])

  return contract
}

'''
'''--- src/helpers/providers/index.ts ---
import ThemeProvider from "./ThemeProvider"
import NearProvider from "./NearProvider"

export { ThemeProvider, NearProvider }

'''
'''--- src/infra/common/Nullable.type.ts ---
export type TNullable<T> = T | null

'''
'''--- src/infra/common/Provider.interface.ts ---
export interface IProvider{
    children: React.ReactNode;
}
'''
'''--- src/infra/common/RGB.type.ts ---
export type RGBType = [number, number, number]

'''
'''--- src/infra/near/Connection.interface.ts ---
import { ConnectConfig } from "near-api-js/lib/connect"
// # https://docs.near.org/tools/near-api-js/quick-reference
// in documentation has "explorerUrl"
export interface IConnection extends ConnectConfig {
  explorerUrl: string
}

'''
'''--- src/infra/near/methods/Contract.methods.ts ---
import { RGBType } from "@/infra/common/RGB.type"
import { IContractRGBValue } from "@/infra/near/methods/ContractRGB.interface"

export type ContractRGB_GET = () => Promise<RGBType>
export type COntractRGB_SET = (value: IContractRGBValue) => Promise<unknown>

'''
'''--- src/infra/near/methods/Contract.type.ts ---
import { Contract } from "near-api-js/lib/contract"

export type TContract<T = unknown> = Contract & T

'''
'''--- src/infra/near/methods/ContractRGB.interface.ts ---
import { ContractRGB_GET, COntractRGB_SET } from "@/infra/near/methods/Contract.methods"

export interface IContractRGBValue {
  r: number
  g: number
  b: number
}

export interface IContractRGBMethods {
  get: ContractRGB_GET
  set: COntractRGB_SET
}

'''
'''--- src/pages/Home/components/Contracts/hooks/useViewModel.ts ---
import { useGetContract } from "@/helpers/hooks/useGetContract"
import { IContractRGBMethods, IContractRGBValue } from "@/infra/near/methods/ContractRGB.interface"
import { useQuery } from "react-query"
import { IContractItemProps } from "@/pages/Home/components/Contracts/components/ContractItem/Contract.item"
import { useCallback, useMemo } from "react"
import { useSnackbar } from "notistack"

const contractName = "frontend-test-2.badconfig.testnet"

export const useViewModel = () => {
  const contract = useGetContract<IContractRGBMethods>("frontend-test-2.badconfig.testnet")
  const snackbar = useSnackbar()
  const { data: RGBData, isLoading, isError } = useQuery(contractName, async () => await contract.get())

  const handleChangeColor = useCallback(
    async (rgbColor: IContractRGBValue) => {
      try {
        await contract.set({ r: rgbColor.r, g: rgbColor.g, b: rgbColor.b })
      } catch (e) {
        snackbar.enqueueSnackbar("Error saved color", { variant: "error" })
        throw e
      }
    },
    [contract, snackbar]
  )

  const contracts: IContractItemProps[] = useMemo(() => {
    if (RGBData && !isLoading) {
      return [{ name: contractName, rgbColor: RGBData, handleChangeRgb: handleChangeColor }]
    }
    return []
  }, [RGBData, handleChangeColor, isLoading])

  return { contracts, isLoading, isError }
}

'''
'''--- src/pages/Home/components/index.ts ---
export { Balance } from "./Balance/Balance"
export { Contracts } from "./Contracts/Contracts"

'''
'''--- src/react-app-env.d.ts ---
/// <reference types="react-scripts" />

'''
'''--- src/reportWebVitals.ts ---
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/reset.css ---
/* http://meyerweb.com/eric/tools/css/reset/
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
    margin: 0;
    padding: 0;
    border: 0;
    font-size: 100%;
    font: inherit;
    vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
    display: block;
}
body {
    line-height: 1;
}
ol, ul {
    list-style: none;
}
blockquote, q {
    quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
    content: '';
    content: none;
}
table {
    border-collapse: collapse;
    border-spacing: 0;
}
'''
'''--- src/setupTests.ts ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "paths": {
      "@/*": ["src/*"]
    }
  },
  "include": [
    "src",
    "global.d.ts"
  ]
}

'''