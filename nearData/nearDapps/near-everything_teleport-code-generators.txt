*GitHub Repository "near-everything/teleport-code-generators"*

'''--- .github/workflows/publish.yml ---
name: Publish

on:
  push:
    branches:
      - 'development'
      - 'feat/better-fetch'

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          node-version: "16.x"

      - run: yarn
      - run: yarn run lint
      - run: yarn run build
      - run: yarn run test:coverage
      - run: yarn run upload:coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Authenticate with Registry
        run: |
          yarn logout
          echo "@teleporthq:registry=https://registry.npmjs.org/" > .npmrc
          echo "registry=https://registry.npmjs.org/" >> .npmrc
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc
          npm whoami
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to npm
        run: yarn run publish --yes
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

'''
'''--- .github/workflows/test.yml ---
name: CI for PR

on: 
  push:
    branches: 
      - '**'
      - '!development'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: "16.x"
    - run: yarn
    - run: yarn run lint
    - run: yarn run build
    - run: yarn run test:coverage
    - run: yarn run upload:coverage
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

'''
'''--- .prettierrc.json ---
{
  "arrowParens": "always",
  "parser": "typescript",
  "printWidth": 100,
  "semi": false,
  "singleQuote": true,
  "trailingComma": "es5"
}
'''
'''--- .vscodeSnippets/launch.json ---
{
  // Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    // debug in VSCode with ts-node
    {
      "name": "Current TS File",
      "type": "node",
      "request": "launch",
      "args": ["${relativeFile}"],
      "runtimeArgs": ["--nolazy", "-r", "ts-node/register"],
      "sourceMaps": true,
      "cwd": "${workspaceRoot}",
      "protocol": "inspector",
    }
  ]
}
'''
'''--- CHANGELOG.md ---
## v0.21.12 (2022-07-09)

#### :bug: Bug Fix
* `teleport-project-generator-html`
  * [#695](https://github.com/teleporthq/teleport-code-generators/pull/695) (fix): Image resolution with additational attrs in css ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.21.10 (2022-06-09)

#### :package: Project Packer
* `teleport-code-generator`, `teleport-project-generator-angular`, `teleport-project-generator-nuxt`, `teleport-project-generator-preact`, `teleport-project-generator-react`, `teleport-project-generator-stencil`, `teleport-project-generator-vue`, `teleport-project-plugin-tailwind`, `teleport-test`
  * [#689](https://github.com/teleporthq/teleport-code-generators/pull/689) (feat) - Adds support for tailwind in angular, vue and craco based react frameworks ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.21.9 (2022-06-06)

#### :fire: Refactoring
* `teleport-code-generator`, `teleport-project-plugin-css-modules`, `teleport-project-plugin-gatsby-styled-components`, `teleport-project-plugin-next-css-modules`, `teleport-project-plugin-next-react-jss`, `teleport-project-plugin-next-styled-components`, `teleport-project-plugin-next-tailwind`, `teleport-project-plugin-react-jss`, `teleport-project-plugin-react-styled-components`, `teleport-project-plugin-styled-components`, `teleport-project-plugin-tailwind`, `teleport-test`
  * [#688](https://github.com/teleporthq/teleport-code-generators/pull/688) Tailwind project plugin to configure all frameworks ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.21.6 (2022-05-13)

#### :package: Project Packer
* `teleport-project-plugin-custom-files`
  * [#682](https://github.com/teleporthq/teleport-code-generators/pull/682) test(custom-files): adding tests for project plugin custom files ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.21.5 (2022-05-11)

#### :package: Project Packer
* `teleport-project-generator-html`, `teleport-project-generator-nuxt`, `teleport-project-generator-preact`, `teleport-project-generator-stencil`, `teleport-project-generator`, `teleport-project-plugin-custom-files`, `teleport-project-plugin-gatsby-styled-components`, `teleport-project-plugin-next-css-modules`, `teleport-project-plugin-next-react-jss`, `teleport-project-plugin-next-styled-components`, `teleport-project-plugin-next-tailwind`, `teleport-project-plugin-react-styled-components`
  * [#680](https://github.com/teleporthq/teleport-code-generators/pull/680) feat(proj-custom-files): a plugin to inject files into projects ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.21.4 (2022-05-10)

#### :rocket: New Features
* `teleport-project-generator-react`
  * [#679](https://github.com/teleporthq/teleport-code-generators/pull/679) fix(proj-react): resolving static url assets using craco for cra template ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.21.3 (2022-05-04)

#### :package: Project Packer
* `teleport-project-plugin-next-tailwind`
  * [#675](https://github.com/teleporthq/teleport-code-generators/pull/675) feat(nextjs-tailwind): a project plugin for using tailwind with nextjs projects ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :bug: Bug Fix
* `teleport-uidl-resolver`
  * [#677](https://github.com/teleporthq/teleport-code-generators/pull/677) (fix): Passing styles to children in nextjs ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.21.2 (2022-04-14)

#### :bug: Bug Fix
* `teleport-plugin-html-base-component`
  * [#674](https://github.com/teleporthq/teleport-code-generators/pull/674) (feat): Replace link to index.html for main routes ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.21.0 (2022-04-06)

#### :nail_care: Style Flavours
* `teleport-code-generator`, `teleport-component-generator-angular`, `teleport-component-generator-html`, `teleport-component-generator-react`, `teleport-component-generator-vue`, `teleport-plugin-common`, `teleport-plugin-css-modules`, `teleport-plugin-css`, `teleport-plugin-html-base-component`, `teleport-plugin-react-jss`, `teleport-plugin-react-styled-components`, `teleport-plugin-react-styled-jsx`, `teleport-project-generator-gridsome`, `teleport-project-generator-html`, `teleport-project-generator-next`, `teleport-project-generator-preact`, `teleport-project-generator-react`, `teleport-project-generator`, `teleport-test`, `teleport-types`, `teleport-uidl-validator`
  * [#672](https://github.com/teleporthq/teleport-code-generators/pull/672) Adding support for comp-styles and comp-overrides ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.20.6 (2022-03-28)

#### :bug: Bug Fix
* `teleport-code-generator`, `teleport-component-generator-angular`, `teleport-component-generator-react`, `teleport-component-generator-vue`, `teleport-plugin-common`, `teleport-plugin-css-modules`, `teleport-plugin-css`, `teleport-plugin-react-jss`, `teleport-plugin-react-styled-components`, `teleport-plugin-react-styled-jsx`, `teleport-project-generator-gridsome`, `teleport-project-generator-next`, `teleport-project-packer`, `teleport-project-plugin-next-css-modules`
  * [#669](https://github.com/teleporthq/teleport-code-generators/pull/669) (fix): Enable scoping for styled-jsx for components and disable scoping for global styles in next ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 2
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
- Utwo ([@Utwo](https://github.com/Utwo))

## v0.20.5 (2022-03-23)

#### :package: Project Packer
* `teleport-publisher-vercel`
  * [#667](https://github.com/teleporthq/teleport-code-generators/pull/667) Fix encoder length ([@Utwo](https://github.com/Utwo))

#### Committers: 1
- Utwo ([@Utwo](https://github.com/Utwo))

## v0.20.3 (2022-03-17)

#### :package: Project Packer
* `teleport-publisher-vercel`, `teleport-types`
  * [#665](https://github.com/teleporthq/teleport-code-generators/pull/665) Fix socket hang ([@Utwo](https://github.com/Utwo))

#### Committers: 1
- Utwo ([@Utwo](https://github.com/Utwo))

## v0.20.1 (2022-03-12)

#### :bug: Bug Fix
* `teleport-code-generator`, `teleport-plugin-html-base-component`, `teleport-project-generator-html`, `teleport-test`
  * [#664](https://github.com/teleporthq/teleport-code-generators/pull/664) fix(proj-html): fixes html generator and route mapping for html routes ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
* `teleport-plugin-css-modules`, `teleport-project-plugin-react-styled-components`
  * [#663](https://github.com/teleporthq/teleport-code-generators/pull/663) (fix): Trailing space for teleport-project-plugin-styled-components folder ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.20.0 (2022-03-10)

#### :bug: Bug Fix
* `teleport-code-generator`, `teleport-plugin-angular-base-component`, `teleport-project-generator-gatsby`, `teleport-project-generator`, `teleport-test`, `teleport-uidl-resolver`
  * [#662](https://github.com/teleporthq/teleport-code-generators/pull/662) fix(core): fixing memory leaks and missing Output imports for angular generators ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.19.23 (2022-03-09)

#### :fire: Refactoring
* `teleport-github-gateway`
  * [#660](https://github.com/teleporthq/teleport-code-generators/pull/660) refactor(github-gateway): use octokit to create file blobs before committing the files ([@ionutpasca](https://github.com/ionutpasca))

#### Committers: 2
- Cernusca Tudor ([@TCern](https://github.com/TCern))
- Pașca Ionuț ([@ionutpasca](https://github.com/ionutpasca))

## v0.19.21 (2022-03-08)

#### :earth_asia: Core
* `teleport-plugin-common`, `teleport-project-generator-react`, `teleport-project-generator`, `teleport-types`, `teleport-uidl-validator`
  * [#657](https://github.com/teleporthq/teleport-code-generators/pull/657) feat(uidl): add ability to pass additional attrs to html tags ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 2
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
- Utwo ([@Utwo](https://github.com/Utwo))

## v0.19.17 (2022-02-23)

#### :rocket: New Features
* `teleport-project-generator-next`, `teleport-test`, `teleport-uidl-builders`
  * [#650](https://github.com/teleporthq/teleport-code-generators/pull/650) chore(proj-next): upgrading to latest version of nextjs for deployments ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :nail_care: Style Flavours
* `teleport-plugin-common`, `teleport-plugin-css-modules`, `teleport-plugin-css`, `teleport-plugin-react-styled-jsx`, `teleport-project-generator-html`, `teleport-project-generator-react`, `teleport-shared`, `teleport-types`, `teleport-uidl-resolver`, `teleport-uidl-validator`
  * [#644](https://github.com/teleporthq/teleport-code-generators/pull/644) fix(plugin-css): force scope comp-style references on component instances for vanilla css flavour ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :earth_asia: Core
* `teleport-plugin-jsx-proptypes`, `teleport-plugin-stencil-base-component`, `teleport-plugin-vue-base-component`
  * [#649](https://github.com/teleporthq/teleport-code-generators/pull/649) (default-func): Add void func as default handler for `propDefinitions` of type `func` ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.19.14 (2022-02-17)

#### :bug: Bug Fix
* `teleport-publisher-vercel`
  * [#645](https://github.com/teleporthq/teleport-code-generators/pull/645) Small fix for Vercel deploy ([@Utwo](https://github.com/Utwo))

#### Committers: 1
- Utwo ([@Utwo](https://github.com/Utwo))

## v0.19.7 (2021-12-03)

#### :nail_care: Style Flavours
* `teleport-plugin-css-modules`, `teleport-plugin-react-jss`, `teleport-plugin-react-styled-components`
  * [#630](https://github.com/teleporthq/teleport-code-generators/pull/630) fix(comp-scope-styles): bug fix for comp-scoped styles in all style-flavours ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :bug: Bug Fix
* `teleport-plugin-css-modules`, `teleport-plugin-react-jss`, `teleport-plugin-react-styled-components`
  * [#630](https://github.com/teleporthq/teleport-code-generators/pull/630) fix(comp-scope-styles): bug fix for comp-scoped styles in all style-flavours ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.19.5 (2021-10-27)

#### :bug: Bug Fix
* `teleport-plugin-html-base-component`
  * [#625](https://github.com/teleporthq/teleport-code-generators/pull/625) Ignore dynamic token values in html generator ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 2
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
- Mihai Sampaleanu ([@mihaisampaleanu](https://github.com/mihaisampaleanu))

## v0.19.4 (2021-10-21)

#### :bug: Bug Fix
* `teleport-plugin-css`, `teleport-plugin-html-base-component`, `teleport-project-generator-html`, `teleport-publisher-github`, `teleport-test`, `teleport-uidl-validator`
  * [#622](https://github.com/teleporthq/teleport-code-generators/pull/622) feat(image-res): project plugin to resolve local assets to map to public folder of template ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.19.2 (2021-10-18)

#### :nail_care: Style Flavours
* `teleport-component-generator-react`
  * [#619](https://github.com/teleporthq/teleport-code-generators/pull/619) Revert force scoping for styled-jsx ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 2
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
- Utwo ([@Utwo](https://github.com/Utwo))

## v0.19.1 (2021-10-12)

#### :package: Project Packer
* `teleport-publisher-vercel`, `teleport-types`
  * [#617](https://github.com/teleporthq/teleport-code-generators/pull/617) Improve error reporting for vercel requests ([@Utwo](https://github.com/Utwo))

#### Committers: 1
- Utwo ([@Utwo](https://github.com/Utwo))

## v0.18.1 (2021-10-11)

#### :bug: Bug Fix
* `teleport-component-generator-html`, `teleport-plugin-html-base-component`, `teleport-types`
  * [#613](https://github.com/teleporthq/teleport-code-generators/pull/613) Fix for fallback for component name ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.18.0 (2021-10-05)

#### :earth_asia: Core
* `teleport-code-generator`, `teleport-component-generator-html`, `teleport-component-generator`, `teleport-plugin-css`, `teleport-plugin-html-base-component`, `teleport-plugin-import-statements-html`, `teleport-project-generator-angular`, `teleport-project-generator-gatsby`, `teleport-project-generator-gridsome`, `teleport-project-generator-html`, `teleport-project-generator-next`, `teleport-project-generator-nuxt`, `teleport-project-generator-preact`, `teleport-project-generator-react`, `teleport-project-generator-stencil`, `teleport-project-generator-vue`, `teleport-project-generator`, `teleport-test`, `teleport-types`
  * [#539](https://github.com/teleporthq/teleport-code-generators/pull/539) feat(comp-html): HTML Component and Project Generator ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 2
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
- murakami ([@MurakamiKennzo](https://github.com/MurakamiKennzo))

## v0.17.6 (2021-08-10)

#### :earth_asia: Core
* `teleport-component-generator-react`, `teleport-plugin-css-modules`, `teleport-plugin-css`, `teleport-plugin-react-jss`, `teleport-plugin-react-styled-components`, `teleport-project-generator-gridsome`, `teleport-project-generator-next`, `teleport-project-generator`
  * [#596](https://github.com/teleporthq/teleport-code-generators/pull/596) fix(proj-generators): fix for resolving style-sheet from local path ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.17.5 (2021-07-30)

#### :package: Project Packer
* `teleport-publisher-vercel`
  * [#593](https://github.com/teleporthq/teleport-code-generators/pull/593) Exposing framework attr from vercel publisher ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.17.2 (2021-07-01)

#### :bug: Bug Fix
* `teleport-component-generator-angular`, `teleport-component-generator-react`, `teleport-component-generator-stencil`, `teleport-component-generator-vue`, `teleport-component-generator`
  * [#588](https://github.com/teleporthq/teleport-code-generators/pull/588) fix(esm-build): don't export anything imported from external packages ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.17.1 (2021-06-22)

#### :bug: Bug Fix
* `teleport-test`, `teleport-uidl-resolver`
  * [#584](https://github.com/teleporthq/teleport-code-generators/pull/584) fix(resolver): Resolve attrs on buttons and elements with links ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.17.0 (2021-06-18)

#### :rocket: New Features
* `teleport-plugin-jsx-next-image`, `teleport-project-generator-next`, `teleport-types`
  * [#575](https://github.com/teleporthq/teleport-code-generators/pull/575) feat(next-image): a JSX plugin to use next/image for loading images efficiently ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :nail_care: Style Flavours
* `teleport-code-generator`, `teleport-component-generator-angular`, `teleport-component-generator-react`, `teleport-component-generator-stencil`, `teleport-component-generator-vue`, `teleport-plugin-common`, `teleport-plugin-css-modules`, `teleport-plugin-css`, `teleport-plugin-jsx-inline-styles`, `teleport-plugin-react-jss`, `teleport-plugin-react-styled-components`, `teleport-plugin-react-styled-jsx`, `teleport-project-generator-angular`, `teleport-project-generator-gatsby`, `teleport-project-generator-nuxt`, `teleport-project-generator-react`, `teleport-project-generator`, `teleport-project-plugin-gatsby-styled-components`, `teleport-project-plugin-next-css-modules`, `teleport-shared`, `teleport-test`, `teleport-types`, `teleport-uidl-builders`, `teleport-uidl-resolver`, `teleport-uidl-validator`
  * [#579](https://github.com/teleporthq/teleport-code-generators/pull/579) Component scoped style-sets.  ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :earth_asia: Core
* `teleport-code-generator`, `teleport-component-generator-angular`, `teleport-component-generator-react`, `teleport-component-generator-stencil`, `teleport-component-generator-vue`, `teleport-plugin-common`, `teleport-plugin-css-modules`, `teleport-plugin-css`, `teleport-plugin-jsx-inline-styles`, `teleport-plugin-react-jss`, `teleport-plugin-react-styled-components`, `teleport-plugin-react-styled-jsx`, `teleport-project-generator-angular`, `teleport-project-generator-gatsby`, `teleport-project-generator-nuxt`, `teleport-project-generator-react`, `teleport-project-generator`, `teleport-project-plugin-gatsby-styled-components`, `teleport-project-plugin-next-css-modules`, `teleport-shared`, `teleport-test`, `teleport-types`, `teleport-uidl-builders`, `teleport-uidl-resolver`, `teleport-uidl-validator`
  * [#579](https://github.com/teleporthq/teleport-code-generators/pull/579) Component scoped style-sets.  ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :crystal_ball: UIDL
* `teleport-code-generator`, `teleport-component-generator-angular`, `teleport-component-generator-react`, `teleport-component-generator-stencil`, `teleport-component-generator-vue`, `teleport-plugin-common`, `teleport-plugin-css-modules`, `teleport-plugin-css`, `teleport-plugin-jsx-inline-styles`, `teleport-plugin-react-jss`, `teleport-plugin-react-styled-components`, `teleport-plugin-react-styled-jsx`, `teleport-project-generator-angular`, `teleport-project-generator-gatsby`, `teleport-project-generator-nuxt`, `teleport-project-generator-react`, `teleport-project-generator`, `teleport-project-plugin-gatsby-styled-components`, `teleport-project-plugin-next-css-modules`, `teleport-shared`, `teleport-test`, `teleport-types`, `teleport-uidl-builders`, `teleport-uidl-resolver`, `teleport-uidl-validator`
  * [#579](https://github.com/teleporthq/teleport-code-generators/pull/579) Component scoped style-sets.  ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 2
- Chavda Bhavik ([@chavda-bhavik](https://github.com/chavda-bhavik))
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.16.3 (2021-05-10)

#### :crystal_ball: UIDL
* `teleport-plugin-common`, `teleport-project-generator`, `teleport-types`, `teleport-uidl-validator`
  * [#564](https://github.com/teleporthq/teleport-code-generators/pull/564) Improve UIDL validation for global assets ([@chavda-bhavik](https://github.com/chavda-bhavik))

#### :fire: Refactoring
* `teleport-plugin-common`, `teleport-project-generator`, `teleport-types`, `teleport-uidl-validator`
  * [#564](https://github.com/teleporthq/teleport-code-generators/pull/564) Improve UIDL validation for global assets ([@chavda-bhavik](https://github.com/chavda-bhavik))

#### Committers: 2
- Chavda Bhavik ([@chavda-bhavik](https://github.com/chavda-bhavik))
- Eliza Nitoi ([@elizamaria](https://github.com/elizamaria))

## v0.16.2 (2021-04-28)

#### :earth_asia: Core
* `teleport-component-generator`
  * [#563](https://github.com/teleporthq/teleport-code-generators/pull/563) fix(generator): enable jsec encoding to support special characters in AST to code transformation ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :crystal_ball: UIDL
* `teleport-component-generator-angular`, `teleport-component-generator-vue`, `teleport-plugin-angular-base-component`, `teleport-plugin-common`, `teleport-plugin-vue-base-component`, `teleport-types`, `teleport-uidl-validator`
  * [#560](https://github.com/teleporthq/teleport-code-generators/pull/560) (refactor): Extending validations for events in UIDL ([@chavda-bhavik](https://github.com/chavda-bhavik))

#### :fire: Refactoring
* `teleport-component-generator`
  * [#563](https://github.com/teleporthq/teleport-code-generators/pull/563) fix(generator): enable jsec encoding to support special characters in AST to code transformation ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 3
- Chavda Bhavik ([@chavda-bhavik](https://github.com/chavda-bhavik))
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
- Oana Muntean ([@oanamun](https://github.com/oanamun))

## v0.16.1 (2021-04-21)

#### :package: Project Packer
* `teleport-publisher-github`
  * [#555](https://github.com/teleporthq/teleport-code-generators/pull/555) fix(github-publisher): changing default branch to main instead of master ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :bug: Bug Fix
* `teleport-plugin-css`
  * [#558](https://github.com/teleporthq/teleport-code-generators/pull/558) fix(plugin-css): add contents by default for shadow DOM and custom elments based frameworks ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
* `teleport-publisher-github`
  * [#555](https://github.com/teleporthq/teleport-code-generators/pull/555) fix(github-publisher): changing default branch to main instead of master ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.16.0 (2021-02-04)

#### :rocket: New Features
* `teleport-code-generator`, `teleport-component-generator-angular`, `teleport-component-generator-preact`, `teleport-component-generator-react`, `teleport-component-generator-reactnative`, `teleport-component-generator-stencil`, `teleport-component-generator-vue`, `teleport-component-generator`, `teleport-plugin-react-styled-components`, `teleport-project-generator-angular`, `teleport-project-generator-gatsby`, `teleport-project-generator-gridsome`, `teleport-project-generator-next`, `teleport-project-generator-nuxt`, `teleport-project-generator-preact`, `teleport-project-generator-react`, `teleport-project-generator-reactnative`, `teleport-project-generator-stencil`, `teleport-project-generator-vue`, `teleport-project-generator`, `teleport-project-plugin-gatsby-styled-components`, `teleport-project-plugin-next-css-modules`, `teleport-project-plugin-next-react-jss`, `teleport-project-plugin-next-styled-components`, `teleport-test`, `teleport-types`, `teleport-uidl-resolver`
  * [#514](https://github.com/teleporthq/teleport-code-generators/pull/514) (feat): Plugins for project-generators  ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :nail_care: Style Flavours
* `teleport-component-generator-react`, `teleport-component-generator`, `teleport-plugin-css-modules`, `teleport-plugin-css`, `teleport-plugin-react-jss`, `teleport-plugin-react-styled-components`, `teleport-project-generator-angular`, `teleport-project-generator-gatsby`, `teleport-project-generator-next`, `teleport-project-generator-preact`, `teleport-project-generator-react`, `teleport-project-generator-vue`, `teleport-project-generator`, `teleport-test`, `teleport-types`
  * [#530](https://github.com/teleporthq/teleport-code-generators/pull/530) fix(styles): Fix for importing and handling project-stylesheet if only tokens are used.  ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
* `teleport-component-generator-react`, `teleport-plugin-react-jss`
  * [#526](https://github.com/teleporthq/teleport-code-generators/pull/526) refactor(react-jss): React JSS will use hooks add styles to nodes. ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :bug: Bug Fix
* `teleport-component-generator-react`, `teleport-component-generator-vue`, `teleport-plugin-css-modules`, `teleport-plugin-css`, `teleport-uidl-validator`
  * [#537](https://github.com/teleporthq/teleport-code-generators/pull/537) fix(css): importing global style sheet by default in the root of the project ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
* `teleport-uidl-validator`
  * [#528](https://github.com/teleporthq/teleport-code-generators/pull/528) fix(validator): Throwing error if the UIDL has 'null' or 'undefined' ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
* `teleport-plugin-css`
  * [#525](https://github.com/teleporthq/teleport-code-generators/pull/525) fix(plugin-css): Add styles when only token is used to style a element ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :house: Dev Experience
* `teleport-project-generator-angular`, `teleport-project-generator-gatsby`, `teleport-project-generator-gridsome`, `teleport-project-generator-next`, `teleport-project-generator-nuxt`, `teleport-project-generator-preact`, `teleport-project-generator-react`, `teleport-project-generator-reactnative`, `teleport-project-generator-stencil`, `teleport-project-generator-vue`, `teleport-project-plugin-gatsby-styled-components`, `teleport-project-plugin-next-css-modules`, `teleport-project-plugin-next-react-jss`, `teleport-project-plugin-next-styled-components`, `teleport-test`, `teleport-types`
  * [#534](https://github.com/teleporthq/teleport-code-generators/pull/534) feat(proj-plugins): cross-check for project-plugins and project-generators ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.15.0 (2020-12-11)

#### :nail_care: Style Flavours
* [#503](https://github.com/teleporthq/teleport-code-generators/pull/503) (feat): Define and use design tokens in root. And use them for styles, media queries and project style sheets. 
  
  Design tokens are here, you can deifne basic tokens which in returns converts into `css-variablees` in the projects generated. All, we need to do is, define a simple `designLanguage` [field]("https://github.com/teleporthq/teleport-code-generators/blob/development/examples/uidl-samples/project.json#L46") in the `root` of the `ProjectUIDL`.
  
  And then start using the tokens in the UIDL using
  
```json
{
    ...
   "style":{
      "flex":"1",
      "color":{
         "type":"dynamic",
         "content":{
            "referenceType":"token",
            "id":"blue-500"
         }
      }
   }
}
  ```
  
  You can use these tokens in
  
  - Project Styles
  - Media Queries inside project styles
  - Inline Styles
 
Supports all style-flavours that we currently support. 

 - css-variables in css / css-modules based templates (css, css-modules, styled-jsx),
 - Tokens / contants in CSS-In-JS based libraries (styled-components, jss)

#### :earth_asia: Core
* [#507](https://github.com/teleporthq/teleport-code-generators/pull/507) feat(vuild): exposing vuidl for better Dx for integrations 
  We are exporting UIDL types from @teleporthq/teleport-types like, ComponentUIDL, ProjectUIDL etc. But these are mostly used for internal implementations. The syntax for UIDL is much more simpler than this.
 
 For example, if we define a simple `UIDLNode` with styles. 
 
 ```json
{
   "type":"element",
   "content":{
      "elementType":"text",
      "style":{
         "width":"200px"
      },
      "children":[
         {
            "type":"static",
            "content":"Hello World!"
         }
      ]
   }
}
 ```
 
 The generators pass this through `resolving` step and generates nodes. But when you use `UIDLElement` it throws error. Since `UIDLElement` expects the style to be `UIDLStyleDefinitions` which in return says that the style should be
 
 ```json
 {
   "width":{
      "type":"static",
      "content":"200px"
   }
}
 ```
 
 But, we don't actually need to define static nodes this way, samee thing applies to static children in UIDL. So, start using `VComponentUIDL` from **@teleporthq/teleport-types**
 https://repl.teleporthq.io/?uidlLink=lrvw58rmbqcxpr4dsrfrv
 
 These `VUIDL` helps in writing more compact and human redeable UIDL's. For more types that are exported, please check --> https://github.com/teleporthq/teleport-code-generators/blob/development/packages/teleport-types/src/vuidl.ts
([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
* [#505](https://github.com/teleporthq/teleport-code-generators/pull/505) refactor(validator): improved validation checks for used tokens and project style references ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
* [#503](https://github.com/teleporthq/teleport-code-generators/pull/503) (feat): Define and use design tokens in root. And use them for styles, media queries and project style sheets

#### :bug: Bug Fix
* `teleport-project-generator`
  * [#513](https://github.com/teleporthq/teleport-code-generators/pull/513) fix(proj-generator): fixed path mapping if the style sheet is from the same folder.

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.14.0 (2020-10-23)

#### :electric_plug: Angular Generators
  * [#496](https://github.com/teleporthq/teleport-code-generators/pull/496)  fix(angular-base): ignore imports for frameworks like angular. External imports added directly in modules for Angular. ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :bug: Bug Fix
* `teleport-plugin-common`
  * [#493](https://github.com/teleporthq/teleport-code-generators/pull/493) fix: addAttributeToJSXTag  when attr's value is boolean. Fixed attribute value generation, if the attribute's vlaue is boolean. ([@good-father](https://github.com/good-father))
* `teleport-uidl-resolver`
  * [#491](https://github.com/teleporthq/teleport-code-generators/pull/491) refactor(html-mappings): add linebreak to html mappings ([@ionutpasca](https://github.com/ionutpasca))

#### :house: Docs
* `teleport-plugin-common`, `teleport-project-generator`
  * [#485](https://github.com/teleporthq/teleport-code-generators/pull/485) Fix typo's in HAST-Builders ([@teeteejo](https://github.com/teeteejo))

#### :fire: Refactoring
  * [#490](https://github.com/teleporthq/teleport-code-generators/pull/490) refactor(publisher-vercel): rename from now-publisher to vercel ([@creativenull](https://github.com/creativenull))

#### Committers: 6
- Arnold Chand ([@creativenull](https://github.com/creativenull))
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
- Marek ([@mrewers](https://github.com/mrewers))
- Pașca Ionuț ([@ionutpasca](https://github.com/ionutpasca))
- [@teeteejo](https://github.com/teeteejo)
- 好爸爸 ([@good-father](https://github.com/good-father))

## v0.13.3 (2020-09-16)

#### :bug: Bug Fix
* `teleport-types`
  * [#484](https://github.com/teleporthq/teleport-code-generators/pull/484) fix(types): type check correction for default types in Style Variations ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.13.1 (2020-09-15)

#### :bug: Bug Fix
* `teleport-plugin-react-styled-components`, `teleport-plugin-react-styled-jsx`, `teleport-test`
  * [#481](https://github.com/teleporthq/teleport-code-generators/pull/481) fix(styles): fixed issue for refering to project styles when no styles are present on the node. We can now refer to a style in project-stylesheet even if the node doesn't have any styles on it.  ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.13.0 (2020-09-09)

#### :rocket: New Features
  * [#478](https://github.com/teleporthq/teleport-code-generators/pull/478) feat(core): importing modules or packages and using them as reference for nodes ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :electric_plug: Preact Generators
  * [#480](https://github.com/teleporthq/teleport-code-generators/pull/480) refactor(preact-template): upgrading preact to use preact x ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :earth_asia: Core
  * [#478](https://github.com/teleporthq/teleport-code-generators/pull/478) feat(core): importing modules or packages and using them as reference for nodes ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.12.4 (2020-08-11)

#### :bug: Bug Fix
* `teleport-plugin-css-modules`
  * [#475](https://github.com/teleporthq/teleport-code-generators/pull/475) fix(css-modules): importing project styles at first than local styles ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :fire: Refactoring
* `teleport-component-generator`, `teleport-plugin-jsx-head-config`, `teleport-plugin-reactnative-app-routing`, `teleport-plugin-vue-app-routing`, `teleport-types`, `teleport-uidl-validator`
  * [#471](https://github.com/teleporthq/teleport-code-generators/pull/471) refactor(teleport-types): refactored checkes and validators for UIDLDependency ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.12.3 (2020-07-21)

#### :rocket: New Features
* `teleport-code-generator`, `teleport-plugin-css-modules`, `teleport-plugin-css`, `teleport-plugin-react-jss`, `teleport-plugin-react-styled-components`, `teleport-plugin-react-styled-jsx`
  * [#460](https://github.com/teleporthq/teleport-code-generators/pull/460) refactor(code-generator): allowing code-generator to pass options to component-generators ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.12.2 (2020-07-20)

#### :rocket: New Features
  * [#459](https://github.com/teleporthq/teleport-code-generators/pull/459) feat(proj-styles): adding support for conditions on project-styles ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.12.1 (2020-06-25)

#### :earth_asia: Core
  * [#444](https://github.com/teleporthq/teleport-code-generators/pull/444) feat(reusable-styles): Project level styles that can be used across components and pages. ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :bug: Bug Fix
* `teleport-uidl-resolver`
  * [#458](https://github.com/teleporthq/teleport-code-generators/pull/458) fix(resolver): alignment fix when 'a' tags are used as direct child ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 2
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
- Utwo ([@Utwo](https://github.com/Utwo))

## v0.11.0 (2020-05-27)

#### :earth_asia: Core
* `teleport-types`, `teleport-uidl-resolver`, `teleport-uidl-validator`
  * [#445](https://github.com/teleporthq/teleport-code-generators/pull/445) feat: add semantic type ([@alexnm](https://github.com/alexnm))

#### Committers: 1
- Alex Moldovan ([@alexnm](https://github.com/alexnm))

## v0.10.11 (2020-04-28)

#### :bug: Bug Fix
* `teleport-uidl-resolver`
  * [#442](https://github.com/teleporthq/teleport-code-generators/pull/442) fix: styling problems when using link on inline elements ([@alexnm](https://github.com/alexnm))
* `teleport-code-generator`, `teleport-github-gateway`, `teleport-project-packer`, `teleport-publisher-codesandbox`, `teleport-test`, `teleport-types`
  * [#443](https://github.com/teleporthq/teleport-code-generators/pull/443) fix: assets handling ([@alexnm](https://github.com/alexnm))

#### Committers: 1
- Alex Moldovan ([@alexnm](https://github.com/alexnm))

## v0.10.8 (2020-04-01)

#### :electric_plug: Angular Generators
* `teleport-project-generator-angular`
  * [#440](https://github.com/teleporthq/teleport-code-generators/pull/440) chore: Upgrading angular template to 9 ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :earth_asia: Core
* `teleport-component-generator-reactnative`, `teleport-project-generator-next`, `teleport-shared`, `teleport-test`, `teleport-types`, `teleport-uidl-resolver`, `teleport-uidl-validator`
  * [#439](https://github.com/teleporthq/teleport-code-generators/pull/439) feat(link) adding basic support for links on any nodes and resolver functionality ([@alexnm](https://github.com/alexnm))

#### Committers: 3
- Alex Moldovan ([@alexnm](https://github.com/alexnm))
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
- Utwo ([@Utwo](https://github.com/Utwo))

## v0.10.6 (2020-03-09)

#### :rocket: New Features
* `teleport-project-generator-gatsby`, `teleport-project-generator-next`, `teleport-project-generator`, `teleport-types`, `teleport-uidl-validator`
  * [#436](https://github.com/teleporthq/teleport-code-generators/pull/436) feat: custom code inject in entry files ([@alexnm](https://github.com/alexnm))

#### :bug: Bug Fix
* `teleport-plugin-react-styled-jsx`
  * [#429](https://github.com/teleporthq/teleport-code-generators/pull/429) fix: styled-jsx handling self-closing root ([@alexnm](https://github.com/alexnm))

#### Committers: 2
- Alex Moldovan ([@alexnm](https://github.com/alexnm))
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.10.4 (2020-02-06)

#### :electric_plug: React Generators
* `teleport-project-generator-gatsby`, `teleport-project-generator`, `teleport-test`, `teleport-types`
  * [#399](https://github.com/teleporthq/teleport-code-generators/pull/399) feat(gatsby-proj): project generators can configure a file to change ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :earth_asia: Core
* `teleport-component-generator-angular`, `teleport-plugin-angular-base-component`, `teleport-plugin-common`, `teleport-plugin-preact-base-component`, `teleport-plugin-react-base-component`, `teleport-plugin-stencil-base-component`, `teleport-plugin-vue-base-component`, `teleport-shared`, `teleport-types`, `teleport-uidl-builders`, `teleport-uidl-validator`
  * [#425](https://github.com/teleporthq/teleport-code-generators/pull/425) feat(uidl-schema): adding a new raw node for escaping encoding ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :crystal_ball: UIDL
* `teleport-component-generator-angular`, `teleport-plugin-angular-base-component`, `teleport-plugin-common`, `teleport-plugin-preact-base-component`, `teleport-plugin-react-base-component`, `teleport-plugin-stencil-base-component`, `teleport-plugin-vue-base-component`, `teleport-shared`, `teleport-types`, `teleport-uidl-builders`, `teleport-uidl-validator`
  * [#425](https://github.com/teleporthq/teleport-code-generators/pull/425) feat(uidl-schema): adding a new raw node for escaping encoding ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 2
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
- Utwo ([@Utwo](https://github.com/Utwo))

## v0.10.2 (2019-12-03)

#### :electric_plug: React Generators
* `teleport-project-generator-react`
  * [#418](https://github.com/teleporthq/teleport-code-generators/pull/418) chore(project-temp-react): upgrading react version in react template ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 1
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.10.1 (2019-11-27)

#### :rocket: New Features
  * [#417](https://github.com/teleporthq/teleport-code-generators/pull/417) feat: publishers throw relevant errors ([@alexnm](https://github.com/alexnm))
  * [#413](https://github.com/teleporthq/teleport-code-generators/pull/413) new function for html encoding ([@alexnm](https://github.com/alexnm))

#### :electric_plug: Angular Generators
  * [#414](https://github.com/teleporthq/teleport-code-generators/pull/414) fix: name cleanup and dependency import in module fix ([@alexnm](https://github.com/alexnm))

#### :electric_plug: Preact Generators
* `teleport-project-generator-preact`
  * [#416](https://github.com/teleporthq/teleport-code-generators/pull/416) chore(project-template): upgrading preact to preactX ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :nail_care: Style Flavours
* `teleport-plugin-react-styled-components`
  * [#415](https://github.com/teleporthq/teleport-code-generators/pull/415) fix(styled-comp): appending prefix when name clashes  ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 3
- Alex Moldovan ([@alexnm](https://github.com/alexnm))
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
- Utwo ([@Utwo](https://github.com/Utwo))

## v0.10.0-alpha.6 (2019-11-05)

#### :electric_plug: React Generators
* `teleport-project-generator-gatsby`
  * [#398](https://github.com/teleporthq/teleport-code-generators/pull/398) feat(gatsby-proj): support for custom manifest in gatsby ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :electric_plug: Angular Generators
* `teleport-project-generator-angular`
  * [#402](https://github.com/teleporthq/teleport-code-generators/pull/402) refactor(project-template): updating angular project-template ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
* `teleport-plugin-angular-module`
  * [#401](https://github.com/teleporthq/teleport-code-generators/pull/401) refactor(module-angular): switching to modern syntax for lazy loading ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :earth_asia: Core
  * [#400](https://github.com/teleporthq/teleport-code-generators/pull/400) fix: mapping sync with playground ([@alexnm](https://github.com/alexnm))

#### Committers: 2
- Alex Moldovan ([@alexnm](https://github.com/alexnm))
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.10.0-alpha.5 (2019-10-24)

#### :electric_plug: React Generators
  * [#384](https://github.com/teleporthq/teleport-code-generators/pull/384) feat(proj-gen-gatsby): support for project generators using gatsby ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :electric_plug: Vue Generators
* `teleport-project-generator-gridsome`
  * [#391](https://github.com/teleporthq/teleport-code-generators/pull/391) fix(gridsome-mapping): adding mappings for gridsome ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
* `teleport-code-generator`, `teleport-project-generator-gridsome`, `teleport-test`, `teleport-types`
  * [#388](https://github.com/teleporthq/teleport-code-generators/pull/388) feat(gridsome): generating projects based on gridsome ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :electric_plug: Preact Generators
* `teleport-code-generator`
  * [#387](https://github.com/teleporthq/teleport-code-generators/pull/387) fix(code-generator): fixed bug for picking preact template by default ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :earth_asia: Core
  * [#354](https://github.com/teleporthq/teleport-code-generators/pull/354) WIP: feat(reactnative): project generator initial structure ([@alexnm](https://github.com/alexnm))

#### :bug: Bug Fix
* `teleport-project-generator-next`, `teleport-uidl-resolver`
  * [#389](https://github.com/teleporthq/teleport-code-generators/pull/389) fix: custom mapping logic for navlinks and <a> tags ([@alexnm](https://github.com/alexnm))

#### Committers: 2
- Alex Moldovan ([@alexnm](https://github.com/alexnm))
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.10.0-alpha.4 (2019-10-15)

#### :rocket: New Features
* `teleport-component-generator-preact`, `teleport-component-generator-react`, `teleport-component-generator-vue`, `teleport-plugin-css`
  * [#385](https://github.com/teleporthq/teleport-code-generators/pull/385) fix: forced scoping added for css plugin and set on vue, react, preact ([@alexnm](https://github.com/alexnm))

#### :electric_plug: Preact Generators
* `teleport-code-generator`, `teleport-project-generator-preact`, `teleport-test`
  * [#382](https://github.com/teleporthq/teleport-code-generators/pull/382) feat(teleport-component-generator): added template for preact codesan… ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 3
- Alex Moldovan ([@alexnm](https://github.com/alexnm))
- Balaj Marius ([@balajmarius](https://github.com/balajmarius))
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.10.0-alpha.3 (2019-10-09)

#### :bug: Bug Fix
* `teleport-component-generator-react`, `teleport-component-generator-stencil`, `teleport-shared`, `teleport-types`, `teleport-uidl-resolver`, `teleport-uidl-validator`
  * [#379](https://github.com/teleporthq/teleport-code-generators/pull/379) feat: string blacklists on mappings and regex validation for some strings in the UIDL ([@alexnm](https://github.com/alexnm))

#### Committers: 1
- Alex Moldovan ([@alexnm](https://github.com/alexnm))

## v0.10.0-alpha.2 (2019-09-30)

#### :electric_plug: Stencil Generators
* `teleport-plugin-stencil-base-component`
  * [#371](https://github.com/teleporthq/teleport-code-generators/pull/371) feat(stencil-base): changing title tag for stencil dynamically ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 2
- Alex Moldovan ([@alexnm](https://github.com/alexnm))
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.10.0-alpha.1 (2019-09-23)

#### :electric_plug: Angular Generators
* `teleport-plugin-angular-base-component`, `teleport-plugin-vue-head-config`, `teleport-postprocessor-prettier-js`, `teleport-types`
  * [#365](https://github.com/teleporthq/teleport-code-generators/pull/365) feat(angular-base): changing title for tab dynamically ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
* `teleport-plugin-angular-base-component`, `teleport-plugin-angular-module`, `teleport-project-generator-angular`
  * [#361](https://github.com/teleporthq/teleport-code-generators/pull/361) tests(angular-module): adding test cases for Angular module generator ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
  * [#357](https://github.com/teleporthq/teleport-code-generators/pull/357) feat(angular-module-gen): Project Generator for Angular using default angular-cli template ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :fire: Refactoring
  * [#366](https://github.com/teleporthq/teleport-code-generators/pull/366) Refactor/shared imports ([@alexnm](https://github.com/alexnm))
  * [#362](https://github.com/teleporthq/teleport-code-generators/pull/362) refactor: rename some fields and simplify logic for routing and paths ([@alexnm](https://github.com/alexnm))

#### Committers: 3
- Alex Moldovan ([@alexnm](https://github.com/alexnm))
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
- Utwo ([@Utwo](https://github.com/Utwo))

## v0.10.0-alpha.0 (2019-09-05)

#### :rocket: New Features
  * [#356](https://github.com/teleporthq/teleport-code-generators/pull/356) feat/355 playground packer integration ([@alexnm](https://github.com/alexnm))

#### :electric_plug: Angular Generators
* `teleport-component-generator-angular`, `teleport-component-generator-vue`, `teleport-plugin-angular-base-component`, `teleport-plugin-vue-base-component`, `teleport-shared`
  * [#351](https://github.com/teleporthq/teleport-code-generators/pull/351) fix(angular-base): Handling multiple statements in event handlers ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :electric_plug: Preact Generators
* `teleport-project-generator-preact`, `teleport-project-generator-stencil`, `teleport-project-generator`, `teleport-types`
  * [#348](https://github.com/teleporthq/teleport-code-generators/pull/348) fix(preact-generator): Picking a inbuilt index template and injecting custom tags ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :package: Project Packer
* `teleport-code-generator`, `teleport-publisher-codesandbox`, `teleport-test`
  * [#358](https://github.com/teleporthq/teleport-code-generators/pull/358) feat(publisher): codesandbox integration added ([@alexnm](https://github.com/alexnm))

#### :earth_asia: Core
  * [#353](https://github.com/teleporthq/teleport-code-generators/pull/353) refactor(seo): handling default title and canonical link ([@alexnm](https://github.com/alexnm))
  * [#346](https://github.com/teleporthq/teleport-code-generators/pull/346) feat(meta): added two plugins to handle jsx and vue-meta values per page ([@alexnm](https://github.com/alexnm))
  * [#344](https://github.com/teleporthq/teleport-code-generators/pull/344) Feat/root node restricted to type element ([@alexnm](https://github.com/alexnm))

#### :bug: Bug Fix
* `teleport-component-generator-angular`, `teleport-component-generator-vue`, `teleport-plugin-angular-base-component`, `teleport-plugin-vue-base-component`, `teleport-shared`
  * [#351](https://github.com/teleporthq/teleport-code-generators/pull/351) fix(angular-base): Handling multiple statements in event handlers ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
* `teleport-plugin-stencil-app-routing`
  * [#347](https://github.com/teleporthq/teleport-code-generators/pull/347) refactor(stencil-app-routing): casting dependencies to UIDLDependency… ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
* `teleport-component-generator-preact`, `teleport-plugin-angular-base-component`, `teleport-plugin-vue-base-component`, `teleport-shared`, `teleport-types`, `teleport-uidl-validator`
  * [#343](https://github.com/teleporthq/teleport-code-generators/pull/343) refactor: small fixes ([@alexnm](https://github.com/alexnm))

#### Committers: 2
- Alex Moldovan ([@alexnm](https://github.com/alexnm))
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

## v0.9.0 (2019-08-13)

#### :electric_plug: Angular Generators
  * [#335](https://github.com/teleporthq/teleport-code-generators/pull/335) feat(angular-base): Adding Angular generator ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :electric_plug: Stencil Generators
  * [#319](https://github.com/teleporthq/teleport-code-generators/pull/319) feat(stencil): stencil component generator ([@alexnm](https://github.com/alexnm))

#### :electric_plug: Preact Generators
  * [#320](https://github.com/teleporthq/teleport-code-generators/pull/320) feat(preact-project-gen): A Preact project generator ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :nail_care: Style Flavours
  * [#338](https://github.com/teleporthq/teleport-code-generators/pull/338) refactor(css): teleport-plugin-css now works for both html templates and jsx code chunks ([@alexnm](https://github.com/alexnm))
  * [#309](https://github.com/teleporthq/teleport-code-generators/pull/309) fix(plugin-styles): Fix generation of empty styles ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :earth_asia: Core
  * [#334](https://github.com/teleporthq/teleport-code-generators/pull/334) refactor components generated in own folder ([@alexnm](https://github.com/alexnm))
  * [#331](https://github.com/teleporthq/teleport-code-generators/pull/331) refactor(core): template generation syntax is now configurable from base plugins ([@alexnm](https://github.com/alexnm))
  * [#327](https://github.com/teleporthq/teleport-code-generators/pull/327) fix(slots): restrictions for slot node fallback and separate handling for native / prop based slot ([@alexnm](https://github.com/alexnm))
  * [#328](https://github.com/teleporthq/teleport-code-generators/pull/328) feat(postprocessors): factory functions defined with options for configurability ([@alexnm](https://github.com/alexnm))
  * [#314](https://github.com/teleporthq/teleport-code-generators/pull/314) refactor(react-base-plugin): jsx generation extracted to shared package ([@alexnm](https://github.com/alexnm))

#### :bug: Bug Fix
* `teleport-component-generator-react`, `teleport-plugin-react-styled-components`, `teleport-shared`
  * [#318](https://github.com/teleporthq/teleport-code-generators/pull/318) fix(styled-comp): Converting to camel case when passing as props ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
* `teleport-component-generator-vue`, `teleport-plugin-vue-base-component`
  * [#276](https://github.com/teleporthq/teleport-code-generators/pull/276) fix(vue-base-com): Handling non-element root nodes for vue ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :house: Dev Experience
  * [#329](https://github.com/teleporthq/teleport-code-generators/pull/329) feat(Builders): Added project-builders and tests ([@andreiTnu](https://github.com/andreiTnu))
  * [#312](https://github.com/teleporthq/teleport-code-generators/pull/312) feat(build): experimental tasks for react generator ([@alexnm](https://github.com/alexnm))
  * [#313](https://github.com/teleporthq/teleport-code-generators/pull/313) refactor(repl-component): Watcher first builds all packages before wa… ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
  * [#307](https://github.com/teleporthq/teleport-code-generators/pull/307) chore(watcher.js): A Watcher to that triggers for changes in file and rebuild the package ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :fire: Refactoring
  * [#336](https://github.com/teleporthq/teleport-code-generators/pull/336) refactor(css-modules): classname generation optimization and tests for multiple cases ([@alexnm](https://github.com/alexnm))
  * [#333](https://github.com/teleporthq/teleport-code-generators/pull/333) refactor: updated template names and new react template based on cra ([@alexnm](https://github.com/alexnm))
  * [#330](https://github.com/teleporthq/teleport-code-generators/pull/330) refactor(vue): extract html generation syntax into shared package ([@alexnm](https://github.com/alexnm))
  * [#325](https://github.com/teleporthq/teleport-code-generators/pull/325) refactor: standard file and chunk types ([@alexnm](https://github.com/alexnm))
  * [#305](https://github.com/teleporthq/teleport-code-generators/pull/305) refactor(shared): renames, reusability, tests, cleanup, etc. ([@alexnm](https://github.com/alexnm))

#### Committers: 3
- Alex Moldovan ([@alexnm](https://github.com/alexnm))
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
- [@andreiTnu](https://github.com/andreiTnu)

## v0.8.0 (2019-06-28)

#### :rocket: New Features
* [#281](https://github.com/teleporthq/teleport-code-generators/pull/281) feat(proj-gen): implement local dependency resolver for components an… ([@alexnm](https://github.com/alexnm))
* [#278](https://github.com/teleporthq/teleport-code-generators/pull/278) feat(Attribute-mapping): Adding mapping for attributes ([@anamariaoros](https://github.com/anamariaoros))

#### :electric_plug: Vue Generator
* [#279](https://github.com/teleporthq/teleport-code-generators/pull/279) Fix/vue default values ([@ionutpasca](https://github.com/ionutpasca))

#### :package: Project Packer
* `teleport-github-gateway`
  * [#282](https://github.com/teleporthq/teleport-code-generators/pull/282) feat: Decode github files using a whitelist ([@ionutpasca](https://github.com/ionutpasca))
* `teleport-publisher-now`
  * [#257](https://github.com/teleporthq/teleport-code-generators/pull/257) refactor(now/src): Changes the name to accessToken from deployToken ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
* `teleport-publisher-github`
  * [#252](https://github.com/teleporthq/teleport-code-generators/pull/252) fix(github-packer): Added master branch and check for commit branch ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :earth_asia: Core
* [#270](https://github.com/teleporthq/teleport-code-generators/pull/270) Feat/246 generic proj gen ([@alexnm](https://github.com/alexnm))

#### :bug: Bug Fix
* `teleport-project-generator`
  * [#291](https://github.com/teleporthq/teleport-code-generators/pull/291) fix(proj-gen): check for file override instead of duplication ([@alexnm](https://github.com/alexnm))
* `teleport-component-generator`, `teleport-uidl-validator`
  * [#290](https://github.com/teleporthq/teleport-code-generators/pull/290) fix(uidl): filename derived from sanitized component name ([@alexnm](https://github.com/alexnm))
* `teleport-uidl-validator`
  * [#261](https://github.com/teleporthq/teleport-code-generators/pull/261) fix(uidl/comp): Validating content if the parent type is static ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
* `teleport-plugin-react-styled-jsx`, `teleport-shared`
  * [#266](https://github.com/teleporthq/teleport-code-generators/pull/266) fix(styled-jsx/index): Injecting style in first child if root is non element ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
* `teleport-publisher-github`
  * [#252](https://github.com/teleporthq/teleport-code-generators/pull/252) fix(github-packer): Added master branch and check for commit branch ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :house: Dev Experience
* `teleport-project-packer-test`
  * [#260](https://github.com/teleporthq/teleport-code-generators/pull/260) chore(packer-test): Used a config file to display the github token ([@andreiTnu](https://github.com/andreiTnu))

#### :fire: Refactoring
* [#273](https://github.com/teleporthq/teleport-code-generators/pull/273) refactor(Extract AST/HAST/JSS util functions into builders) ([@anamariaoros](https://github.com/anamariaoros))
* [#272](https://github.com/teleporthq/teleport-code-generators/pull/272) Refactor/184 deprecate state identifier ([@ionutpasca](https://github.com/ionutpasca))
* [#271](https://github.com/teleporthq/teleport-code-generators/pull/271) Refactor/247 change set generator ([@andreiTnu](https://github.com/andreiTnu))
* [#250](https://github.com/teleporthq/teleport-code-generators/pull/250) refactor: Set default template to the generic packer ([@ionutpasca](https://github.com/ionutpasca))

#### Committers: 5
- Alex Moldovan ([@alexnm](https://github.com/alexnm))
- Anamaria Oros ([@anamariaoros](https://github.com/anamariaoros))
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
- Pașca Ionuț ([@ionutpasca](https://github.com/ionutpasca))
- [@andreiTnu](https://github.com/andreiTnu)

## v0.7.0 (2019-06-05)

#### :rocket: New Feature
  * [#227](https://github.com/teleporthq/teleport-code-generators/pull/227) feat(navlinks): transitionTo can now refer to the state key, not the url ([@alexnm](https://github.com/alexnm))
  * [#194](https://github.com/teleporthq/teleport-code-generators/pull/194) (feat): Mongorepo structure by the adopting Lerna ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :electric_plug: React Generators
* `teleport-component-generator-react`, `teleport-generator-shared`, `teleport-plugin-react-base-component`
  * [#212](https://github.com/teleporthq/teleport-code-generators/pull/212) Handling no-element tags as root nodes for generating components ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
* Other
  * [#195](https://github.com/teleporthq/teleport-code-generators/pull/195) (feat): Plugin support for Styled Components ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
  * [#201](https://github.com/teleporthq/teleport-code-generators/pull/201) fix(style-flavours): Fixed style flavours w.r.t to their behaviour ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :electric_plug: Vue Generator
* `teleport-plugin-vue-base-component`
  * [#231](https://github.com/teleporthq/teleport-code-generators/pull/231) fix(vue-base-component): Support for nested conditionals in Vue ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :nail_care: Style Flavours
* `teleport-component-generator-react`, `teleport-generator-shared`, `teleport-plugin-react-styled-components`
  * [#216](https://github.com/teleporthq/teleport-code-generators/pull/216) fix(react-styled-components): Fixed of adding styled by default ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
* Other
  * [#195](https://github.com/teleporthq/teleport-code-generators/pull/195) (feat): Plugin support for Styled Components ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
  * [#201](https://github.com/teleporthq/teleport-code-generators/pull/201) fix(style-flavours): Fixed style flavours w.r.t to their behaviour ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :package: Project Packer
  * [#249](https://github.com/teleporthq/teleport-code-generators/pull/249) Feature/234 GitHub gateway ([@ionutpasca](https://github.com/ionutpasca))
  * [#232](https://github.com/teleporthq/teleport-code-generators/pull/232) (feat-#197) Project Packers and publishers, supporting publish for netlify, now, local dist and zip. ([@ionutpasca](https://github.com/ionutpasca))

#### :earth_asia: Core
  * [#225](https://github.com/teleporthq/teleport-code-generators/pull/225) feat(proj-gen): reusing linker functionality + formatting from generic component generators ([@alexnm](https://github.com/alexnm))
  * [#218](https://github.com/teleporthq/teleport-code-generators/pull/218) feat(component-gen): A Generic component generatorby splitting post processing. ([@alexnm](https://github.com/alexnm))

#### :bug: Bug Fix
  * [#231](https://github.com/teleporthq/teleport-code-generators/pull/231) fix(vue-base-component): Support for nested conditionals in Vue ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
  * [#224](https://github.com/teleporthq/teleport-code-generators/pull/224) Feature/validator extension + bug fix  ([@anamariaoros](https://github.com/anamariaoros))
  * [#221](https://github.com/teleporthq/teleport-code-generators/pull/221) feat(plugin-react-proptypes): Added isRequired attribute for proptypes ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
  * [#223](https://github.com/teleporthq/teleport-code-generators/pull/223) Fix/#175 Components name are same as generated from Router ([@alexnm](https://github.com/alexnm))
  * [#212](https://github.com/teleporthq/teleport-code-generators/pull/212) Handling no-element tags as root nodes for generating components ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
  * [#216](https://github.com/teleporthq/teleport-code-generators/pull/216) fix(react-styled-components): Fixed of adding styled by default ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
  * [#201](https://github.com/teleporthq/teleport-code-generators/pull/201) fix(style-flavours): Fixed style flavours w.r.t to their behaviour ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :crystal_ball: UIDL
  * [#224](https://github.com/teleporthq/teleport-code-generators/pull/224) Feature/validator extension + bug fix  ([@anamariaoros](https://github.com/anamariaoros))
  * [#221](https://github.com/teleporthq/teleport-code-generators/pull/221) feat(plugin-react-proptypes): Added isRequired attribute for proptypes ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
  * [#219](https://github.com/teleporthq/teleport-code-generators/pull/219) refactor(generator-core): Schema to support array as  a default value ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
  * [#173](https://github.com/teleporthq/teleport-code-generators/pull/173) refactor(uidl-samples/component-schema): Update component schema to a… ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :house: Dev Experience
  * [#241](https://github.com/teleporthq/teleport-code-generators/pull/241) Feat/240 prep for release ([@alexnm](https://github.com/alexnm))
  * [#228](https://github.com/teleporthq/teleport-code-generators/pull/228) chore: add tests for plugins and generic component generator ([@alexnm](https://github.com/alexnm))
  * [#220](https://github.com/teleporthq/teleport-code-generators/pull/220) Tests ([@anamariaoros](https://github.com/anamariaoros))

#### Committers: 5
- Alex Moldovan ([@alexnm](https://github.com/alexnm))
- Anamaria Oros ([@anamariaoros](https://github.com/anamariaoros))
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
- Luca Guzzon ([@lguzzon](https://github.com/lguzzon))
- Pașca Ionuț ([@ionutpasca](https://github.com/ionutpasca))

## v0.6.0 (2019-04-09)

#### :crystal_ball: UIDL
* [#143](https://github.com/teleporthq/teleport-code-generators/pull/143) feat(uidl-schema): uidl-schema-update ([@anamariaoros](https://github.com/anamariaoros))

#### Committers: 4
- Alex Moldovan ([@alexnm](https://github.com/alexnm))
- Anamaria Oros ([@anamariaoros](https://github.com/anamariaoros))
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
- Vlad Nicula ([@vladnicula](https://github.com/vladnicula))

## v0.5.1 (2019-04-04)

#### :electric_plug: React Generators
* [#144](https://github.com/teleporthq/teleport-code-generators/pull/144) feat(conditional render): support props as conditional identifier ([@alexnm](https://github.com/alexnm))

#### :electric_plug: Vue Generator
* [#144](https://github.com/teleporthq/teleport-code-generators/pull/144) feat(conditional render): support props as conditional identifier ([@alexnm](https://github.com/alexnm))

#### Committers: 4
- Alex Moldovan ([@alexnm](https://github.com/alexnm))
- Pașca Ionuț ([@ovidiuionut94](https://github.com/ovidiuionut94))
- Vlad Nicula ([@vladnicula](https://github.com/vladnicula))
- [@alexpausan](https://github.com/alexpausan)

## v0.5.0 (2019-04-03)

#### :rocket: New Feature
* Component generators should validate input UIDL ([@alexnm](https://github.com/alexnm))

#### :electric_plug: React Generators
* [#89](https://github.com/teleporthq/teleport-code-generators/pull/89) Ternary Expression for boolean states ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### :electric_plug: Vue Generator
* [#116](https://github.com/teleporthq/teleport-code-generators/pull/116) refactor(html-to-util-string): Switching the HAST to Html builder for… ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
* [#103](https://github.com/teleporthq/teleport-code-generators/pull/103) Ternary Expressions for Vue ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
* [#83](https://github.com/teleporthq/teleport-code-generators/pull/83) vue generators on par with react ([@alexnm](https://github.com/alexnm))

#### :earth_asia: Core
* [#135](https://github.com/teleporthq/teleport-code-generators/pull/135) fix(try-catch-removal): removing try catch from assembly line-plugins ([@anamariaoros](https://github.com/anamariaoros))

#### :crystal_ball: UIDL
* [#82](https://github.com/teleporthq/teleport-code-generators/pull/82) refactor(schemas): Updated schemas with enum values ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))

#### Committers: 6
- Alex Moldovan ([@alexnm](https://github.com/alexnm))
- Anamaria Oros ([@anamariaoros](https://github.com/anamariaoros))
- Jaya Krishna Namburu ([@JayaKrishnaNamburu](https://github.com/JayaKrishnaNamburu))
- Paul BRIE ([@paulbrie](https://github.com/paulbrie))
- Pașca Ionuț ([@ovidiuionut94](https://github.com/ovidiuionut94))
- Vlad Nicula ([@vladnicula](https://github.com/vladnicula))

## v0.4.0 (2019-03-07)

#### :electric_plug: Vue Generator
* [#65](https://github.com/teleporthq/teleport-code-generators/pull/65) fix(vue formatting): html parser update for prettier ([@alexnm](https://github.com/alexnm))

#### :earth_asia: Core
* [#71](https://github.com/teleporthq/teleport-code-generators/pull/71) Cleanup builder and chunk ([@alexnm](https://github.com/alexnm))

#### Committers: 3
- Alex Moldovan ([@alexnm](https://github.com/alexnm))
- Mihai Serban ([@mihaiserban](https://github.com/mihaiserban))
- Paul BRIE ([@paulbrie](https://github.com/paulbrie))
'''
'''--- CODE_OF_CONDUCT.md ---
# Contributor Covenant Code of Conduct

## Our Pledge

In the interest of fostering an open and welcoming environment, we as
contributors and maintainers pledge to making participation in our project and
our community a harassment-free experience for everyone, regardless of age, body
size, disability, ethnicity, sex characteristics, gender identity and expression,
level of experience, education, socio-economic status, nationality, personal
appearance, race, religion, or sexual identity and orientation.

## Our Standards

Examples of behavior that contributes to creating a positive environment
include:

* Using welcoming and inclusive language
* Being respectful of differing viewpoints and experiences
* Gracefully accepting constructive criticism
* Focusing on what is best for the community
* Showing empathy towards other community members

Examples of unacceptable behavior by participants include:

* The use of sexualized language or imagery and unwelcome sexual attention or
  advances
* Trolling, insulting/derogatory comments, and personal or political attacks
* Public or private harassment
* Publishing others' private information, such as a physical or electronic
  address, without explicit permission
* Other conduct which could reasonably be considered inappropriate in a
  professional setting

## Our Responsibilities

Project maintainers are responsible for clarifying the standards of acceptable
behavior and are expected to take appropriate and fair corrective action in
response to any instances of unacceptable behavior.

Project maintainers have the right and responsibility to remove, edit, or
reject comments, commits, code, wiki edits, issues, and other contributions
that are not aligned to this Code of Conduct, or to ban temporarily or
permanently any contributor for other behaviors that they deem inappropriate,
threatening, offensive, or harmful.

## Scope

This Code of Conduct applies both within project spaces and in public spaces
when an individual is representing the project or its community. Examples of
representing a project or community include using an official project e-mail
address, posting via an official social media account, or acting as an appointed
representative at an online or offline event. Representation of a project may be
further defined and clarified by project maintainers.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported by contacting the project team at hello@teleporthq.io. All
complaints will be reviewed and investigated and will result in a response that
is deemed necessary and appropriate to the circumstances. The project team is
obligated to maintain confidentiality with regard to the reporter of an incident.
Further details of specific enforcement policies may be posted separately.

Project maintainers who do not follow or enforce the Code of Conduct in good
faith may face temporary or permanent repercussions as determined by other
members of the project's leadership.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,
available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html

[homepage]: https://www.contributor-covenant.org

For answers to common questions about this code of conduct, see
https://www.contributor-covenant.org/faq

'''
'''--- README.md ---
<p align="center">
  <img src="https://github.com/teleporthq/teleport-code-generators/blob/development/Default.png" width="250"/>
</p>

<h2 align="center">Code Generators v0.21.12 - Beta!</h2>

<h3 align="center">
  <a href="#what">What</a>
  <span> · </span>
  <a href="#quick-setup">Quick Setup</a>
  <span> · </span>
  <a href="#ecosystem">Ecosystem</a>
  <span> · </span>
  <a href="https://docs.teleporthq.io" target="_blank">Documentation</a>
  <span> · </span>
  <a href="#development">Development</a>
  <span> · </span>
  <a href="#planning">Planning</a>
  <span> · </span>
  <a href="#contributions">Contributions</a>
</h3>

<p align="center">
  <a target="_blank" href="https://www.npmjs.com/package/@teleporthq/teleport-component-generator"><img src="https://img.shields.io/npm/v/@teleporthq/teleport-component-generator.svg" /></a>
  <a target="_blank" href="https://discord.gg/5pfSVWJzzX"><img src="https://img.shields.io/badge/chat-on%20discord-7289DA.svg" alt="Discord Chat" /></a>
  <a target="_blank" href="https://github.com/teleporthq/teleport-code-generators/actions/workflows/publish.yml"><img src="https://github.com/teleporthq/teleport-code-generators/actions/workflows/publish.yml/badge.svg" /></a>
  <a target="_blank" href="https://codecov.io/gh/teleporthq/teleport-code-generators"><img src="https://codecov.io/gh/teleporthq/teleport-code-generators/branch/development/graph/badge.svg" /></a>
  <a target="_blank" href="https://github.com/prettier/prettier"><img src="https://img.shields.io/badge/code_style-prettier-ff69b4.svg" /></a>
  <img src="https://img.shields.io/npm/l/@teleporthq/teleport-code-generators.svg" />
  <a target="_blank" href="https://twitter.com/teleporthqio"><img src="https://img.shields.io/twitter/follow/teleporthqio.svg" /></a>
</p>

We are not far from the **first official version** of the code generators, but meanwhile, keep in mind that some of the parts of the ecosystem are experimental.

<h2 id="what">🤔 What is this?</h2>

[teleportHQ](https://teleporthq.io/?ref=github) is a low-code platform that enables teams to build applications via a familiar design tool interface, in real-time.

This repository holds the code generators that power the [visual editor](https://play.teleporthq.io/?ref=github) of the platform.

https://user-images.githubusercontent.com/3997538/123211638-63efaa00-d4cc-11eb-90b1-49bd61a95732.mp4

The glue between the platform and the code generators is the [**UIDL Standard**](https://docs.teleporthq.io/uidl/?ref=github). The **UIDL** defines the **user interfaces** in an **abstract** way, independent of any framework or even the web platform itself. Starting from the UIDL, you can convert that abstraction into different flavors of coding (e.g. React, Vue, WebComponents etc.).

These code generators are part of a larger ecosystem, which we're actively building in an effort to streamline the creation of web applications. You can read more about our inception in [this article](https://teleporthq.io/blog-we-believe-in-ai-powered-code-generation).

The philosophy behind the code generators is:
* User interfaces are decomposed into **components**, hence the focus on component generation
* What can be built with `React`, can also be built with `Vue` or on top of the `Web Components` standard - we support multiple targets
* A project built with the visual editor should have a **high standard of quality** (performance, security, accessibility included)
* Generated **code quality** should be as high as possible, so that any developer could pick up the work from there on and enhance the project
* The code generation architecture is open and extendable, we invite everyone to contribute!

Read more about the [UIDL Standard](https://docs.teleporthq.io/uidl/).

<h2 id="quick-setup">🚀 Quick Setup</h2>

The easiest way to jump into the **teleport ecosystem** is to try out one of the pre-configured **component generators**:
```bash
npm install @teleporthq/teleport-component-generator-react
npm install @teleporthq/teleport-component-generator-vue
npm install @teleporthq/teleport-component-generator-angular
```
or using yarn:
```bash
yarn add @teleporthq/teleport-component-generator-react
yarn add @teleporthq/teleport-component-generator-vue
yarn add @teleporthq/teleport-component-generator-angular
```

For generating a simple component, you have to start from a **component UIDL**:

```json
{
  "name": "My First Component",
  "node": {
    "type": "element",
    "content": {
      "elementType": "text",
      "children": [
        {
          "type": "static",
          "content": "Hello World!"
        }
      ]
    }
  }
}
```

Using the pre-configured component generators is as easy as calling an *async* function:

```javascript
import ReactGenerator from '@teleporthq/teleport-component-generator-react'

const uidl = { ... } // your sample here

const { files } = await ReactGenerator.generateComponent(uidl)
console.log(files[0].content)
```
The console output will be something like:
```javascript
import React from 'react'

const MyFirstComponent = (props) => {
  return <span>Hello World!</span>
}

export default MyFirstComponent
```

For other frameworks, just switch the package:
```javascript
import VueGenerator from '@teleporthq/teleport-component-generator-vue'

const uidl = { ... } // your sample here

const { files } = await VueGenerator.generateComponent(uidl)
console.log(files[0].content)
```
The console output will be something like:
```vue
<template>
  <span>Hello World!</span>
</template>

<script>
export default {
  name: 'MyFirstComponent',
}
</script>
```

You can play with the UIDL structure and also observe the generated code in [the online REPL](https://repl.teleporthq.io/). While there, can also check different examples of components written in the UIDL format.

<h2 id="ecosystem">🌍 Ecosystem</h2>

The teleport ecosystem consists of **three** main categories of packages: *component generators*, *project generators* and *project packers*.

### Component Generators
We have **official** component generators for [a couple of popular web frontend frameworks](https://docs.teleporthq.io/component-generators/flavors.html). Check out the [official docs](https://docs.teleporthq.io/component-generators/) for an in depth understanding of the architecture behind the component generators.

All the component generators are exposing an instance of the `teleport-component-generator` package. You can also install this package and build your own generator with [plugins](https://docs.teleporthq.io/component-generators/plugins.html), [mappings](https://docs.teleporthq.io/component-generators/mappings.html) and [postprocessors](https://docs.teleporthq.io/component-generators/post-processors.html).

In the docs, you'll find a complete guide on how to [build your custom component generator](https://docs.teleporthq.io/guides/custom-component-generator.html).

#### Flavors
* `teleport-component-generator-react` - with styling: `css-modules`, `styled-components`, `styled-jsx`, etc.
* `teleport-component-generator-vue` - generating standard `.vue` files
* `teleport-component-generator-angular` - generates `.ts`, `.html` and `.css` files
* `teleport-component-generator-html` - (experimental)
* `teleport-component-generator-svelte` - (coming soon)

#### Capabilities
Here's a list of functionalities that the UIDL and the component generators are supporting at the moment, besides the obvious presentational layer:
*  Dynamic values (props, state) inside html nodes or at attribute level
*  Type definitions for component props (PropTypes in React, props in Vue)
*  External dependencies definition
*  Simple component state (using hooks in React, component instance in Vue)
*  Event Handlers (related to state changes)
*  Repeat structures (.map in React, v-for in Vue)
*  Support for slots

### Project Generators
Project generators rely on a `ProjectUIDL` input and on a **project strategy**. The `ProjectUIDL` will contain all the information about routing, pages, components and global settings. The strategy will tell the generators where to put each file and which component generator to use.

The generators will output an abstract structure with folders and files, without writing anything to disk. The project packer is tasked with taking the output of a project generator and publishing it somewhere.

Check the official guides on [how to use an existing project generator](https://docs.teleporthq.io/guides/generate-your-first-project.html) or [how to create your custom configuration](https://docs.teleporthq.io/guides/customize-your-project-generator.html)

#### Flavors
* `teleport-project-generator-react` - `react` + `react-router` and `css-modules` on top of `create-react-app`
* `teleport-project-generator-next` - based on [Next.js](https://nextjs.org/)
* `teleport-project-generator-vue` - with a structure starting from the `vue-cli`
* `teleport-project-generator-nuxt` - based on [Nuxt.js](https://nuxtjs.org/)
* `teleport-project-generator-angular` - based on the `angular-cli`
* `teleport-project-generator-html` (experimental)

#### Capabilities
Besides the regular files and folders generated at the end of the process, project generators are also taking care of:
* Support for global settings, meta tags, style, scripts, etc.
* Extracting all external dependencies and adding them to the `package.json`.
* Creating the entry point for each application (it can be an `index.html` or something that is framework specific).
* Creating a routing file for the client routes of the project.
* Generating a web manifest for PWA support.

### Project Packers
Once a generator created the code for the components and pages, the **project packer** will take that output, put it on top of an existing **project template**, add any local **assets** required and then will pass the entire result to a **publisher**. The publishers are specialized in deploying the entire folder structure to a 3rd party like `vercel` or `github`, or in creating an in-memory `zip` file or simply writing the folder to `disk`.

#### Publishers
* `teleport-publisher-vercel`
* `teleport-publisher-github`
* `teleport-publisher-codesandbox`
* `teleport-publisher-zip`
* `teleport-publisher-disk`
* `teleport-publisher-netlify` (coming soon)

### Further Reading
A few useful links to get you up to speed with the entire **teleport** ecosystem:
* [Full Documentation](https://docs.teleporthq.io/)
* [Component](https://docs.teleporthq.io/uidl-schema/v1/component.json) and [Project](https://docs.teleporthq.io/uidl-schema/v1/project.json) JSON Schemas
* [Online REPL](https://repl.teleporthq.io/)

<h2 id="development">💻 Development</h2>

This project uses:
* [TypeScript](https://www.typescriptlang.org/) for type safety and easy refactoring
* [lerna](https://github.com/lerna/lerna) for managing the monorepo with multiple npm packages
* [jest](https://jestjs.io/) for all types of tests and for calculating the code coverage

In order to give it a spin locally, we recommend using `yarn`, as it integrates better with `lerna` and all the contributors are using it:

```
yarn
```
This installs the dependencies in the root folder, but also creates the symlinks between the independent modules inside the `packages` folder.

To complete the lerna setup, you need to run:

```
yarn build
```
This will run the `build` task inside each individual package, creating the output `lib` folder. We have two outputs for each package: `cjs` - common js style modules and `esm` - modern es modules. If you want to speed up your build time, you can run just `build:cjs` to avoid the `esm` build.

Running the test suite:
```
yarn test
yarn test:coverage
```

Furthermore, there's a `private` package inside the lerna folder called `teleport-test`. That packages can be used to **test** the code/file generation process with any flavor of project/component generator. In order to give it a spin you will have to:

```
cd packages/teleport-test
npm run standalone
```

The standalone version uses the `teleport-code-generator` package and the statically declared templates. To test with the github templates and the custom packer instance, you have to:

```
cp config.example.json config.json
```

You will have to replace the placeholder with [your own github token](https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line).
Then you can run it with:

```
npm run packer
```

This version of the packer uses the UIDLs from the `examples/uidl-sample`. If the process runs successfully, you will see the responoses from the project packer in the format: `{ success: true, payload: 'dist' }`. The task uses the `teleport-publisher-disk` package and generates four different project files in the `dist` folder.

Please [open an issue](https://github.com/teleporthq/teleport-code-generators/issues) for any irregularity, potential bug that you find while running this, or if you simply have any questions or curiosities about this project.

<h2 id="planning">🤖 Planning</h2>

It's not just our code that's open source, we're also planning the development of the code generators on GitHub. We have [a number of issues](https://github.com/teleporthq/teleport-code-generators/issues) opened and we expect further contributions on this.

We're especially interested in opening discussions around the issues tagged with the [`discussion`](https://github.com/teleporthq/teleport-code-generators/issues?q=is%3Aissue+is%3Aopen+label%3Adiscussion) label.

### Official Release
The official release will be a switch to version `1.0`. ETA for this is around the end of 2019.

<h2 id="contributions">💕 Contributions</h2>

We'd be super happy to have **community** involvement around this project. We strongly believe in the power of **open source**, so we're planning on building the best possible code generators, together with the entire development community.

We envision different types of involvement from this point on:
* Trying out the generators and reporting back any bugs and potential points of improvement
* Contributing to the existing issues, either on the core modules or on the existing generators and plugins
* Exploring and building new plugins for the existing generators
* Exploring and building new generators based on the existing architecture

Thanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):

<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tbody>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://medium.com/@alexnm"><img src="https://avatars0.githubusercontent.com/u/9945366?v=4?s=100" width="100px;" alt="Alex Moldovan"/><br /><sub><b>Alex Moldovan</b></sub></a><br /><a href="https://github.com/teleporthq/teleport-code-generators/commits?author=alexnm" title="Code">💻</a> <a href="https://github.com/teleporthq/teleport-code-generators/commits?author=alexnm" title="Documentation">📖</a> <a href="#ideas-alexnm" title="Ideas, Planning, & Feedback">🤔</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/vladnicula"><img src="https://avatars3.githubusercontent.com/u/126038?v=4?s=100" width="100px;" alt="Vlad Nicula"/><br /><sub><b>Vlad Nicula</b></sub></a><br /><a href="https://github.com/teleporthq/teleport-code-generators/commits?author=vladnicula" title="Code">💻</a> <a href="#ideas-vladnicula" title="Ideas, Planning, & Feedback">🤔</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/paulbrie"><img src="https://avatars2.githubusercontent.com/u/3997538?v=4?s=100" width="100px;" alt="Paul BRIE"/><br /><sub><b>Paul BRIE</b></sub></a><br /><a href="https://github.com/teleporthq/teleport-code-generators/issues?q=author%3Apaulbrie" title="Bug reports">🐛</a> <a href="https://github.com/teleporthq/teleport-code-generators/commits?author=paulbrie" title="Documentation">📖</a> <a href="#ideas-paulbrie" title="Ideas, Planning, & Feedback">🤔</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/mihaitaba"><img src="https://avatars3.githubusercontent.com/u/45386599?v=4?s=100" width="100px;" alt="mihaitaba"/><br /><sub><b>mihaitaba</b></sub></a><br /><a href="#design-mihaitaba" title="Design">🎨</a> <a href="https://github.com/teleporthq/teleport-code-generators/commits?author=mihaitaba" title="Documentation">📖</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/mihaiserban"><img src="https://avatars2.githubusercontent.com/u/3420526?v=4?s=100" width="100px;" alt="Mihai Serban"/><br /><sub><b>Mihai Serban</b></sub></a><br /><a href="https://github.com/teleporthq/teleport-code-generators/commits?author=mihaiserban" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://twitter.com/askjkrishna"><img src="https://avatars0.githubusercontent.com/u/11075561?v=4?s=100" width="100px;" alt="Jaya Krishna Namburu"/><br /><sub><b>Jaya Krishna Namburu</b></sub></a><br /><a href="https://github.com/teleporthq/teleport-code-generators/commits?author=JayaKrishnaNamburu" title="Code">💻</a> <a href="https://github.com/teleporthq/teleport-code-generators/issues?q=author%3AJayaKrishnaNamburu" title="Bug reports">🐛</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/anamariaoros"><img src="https://avatars0.githubusercontent.com/u/17590608?v=4?s=100" width="100px;" alt="Anamaria Oros"/><br /><sub><b>Anamaria Oros</b></sub></a><br /><a href="https://github.com/teleporthq/teleport-code-generators/commits?author=anamariaoros" title="Code">💻</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/ovidiuionut94"><img src="https://avatars3.githubusercontent.com/u/11486739?v=4?s=100" width="100px;" alt="ovidiuionut94"/><br /><sub><b>ovidiuionut94</b></sub></a><br /><a href="https://github.com/teleporthq/teleport-code-generators/commits?author=ovidiuionut94" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/alexpausan"><img src="https://avatars0.githubusercontent.com/u/3284064?v=4?s=100" width="100px;" alt="alexpausan"/><br /><sub><b>alexpausan</b></sub></a><br /><a href="https://github.com/teleporthq/teleport-code-generators/commits?author=alexpausan" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/mihaisampaleanu"><img src="https://avatars1.githubusercontent.com/u/6763756?v=4?s=100" width="100px;" alt="Mihai Sampaleanu"/><br /><sub><b>Mihai Sampaleanu</b></sub></a><br /><a href="https://github.com/teleporthq/teleport-code-generators/commits?author=mihaisampaleanu" title="Code">💻</a> <a href="https://github.com/teleporthq/teleport-code-generators/issues?q=author%3Amihaisampaleanu" title="Bug reports">🐛</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://utwo.ro"><img src="https://avatars1.githubusercontent.com/u/282668?v=4?s=100" width="100px;" alt="Utwo"/><br /><sub><b>Utwo</b></sub></a><br /><a href="https://github.com/teleporthq/teleport-code-generators/commits?author=Utwo" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/andreiTnu"><img src="https://avatars1.githubusercontent.com/u/51601382?v=4?s=100" width="100px;" alt="andreiTnu"/><br /><sub><b>andreiTnu</b></sub></a><br /><a href="https://github.com/teleporthq/teleport-code-generators/commits?author=andreiTnu" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://codepen.io/xavxyz"><img src="https://avatars0.githubusercontent.com/u/13962779?v=4?s=100" width="100px;" alt="Xavier Cazalot"/><br /><sub><b>Xavier Cazalot</b></sub></a><br /><a href="https://github.com/teleporthq/teleport-code-generators/commits?author=xavxyz" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/chavda-bhavik"><img src="https://avatars.githubusercontent.com/u/50201755?v=4?s=100" width="100px;" alt="Chavda Bhavik"/><br /><sub><b>Chavda Bhavik</b></sub></a><br /><a href="https://github.com/teleporthq/teleport-code-generators/commits?author=chavda-bhavik" title="Code">💻</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/elizamaria"><img src="https://avatars.githubusercontent.com/u/15130574?v=4?s=100" width="100px;" alt="Eliza Nitoi"/><br /><sub><b>Eliza Nitoi</b></sub></a><br /><a href="https://github.com/teleporthq/teleport-code-generators/commits?author=elizamaria" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/TudorCe"><img src="https://avatars.githubusercontent.com/u/101194278?v=4?s=100" width="100px;" alt="TudorCe"/><br /><sub><b>TudorCe</b></sub></a><br /><a href="https://github.com/teleporthq/teleport-code-generators/issues?q=author%3ATudorCe" title="Bug reports">🐛</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/retyidoro"><img src="https://avatars.githubusercontent.com/u/22962260?v=4?s=100" width="100px;" alt="Dorottya Ferencz"/><br /><sub><b>Dorottya Ferencz</b></sub></a><br /><a href="https://github.com/teleporthq/teleport-code-generators/issues?q=author%3Aretyidoro" title="Bug reports">🐛</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/vylly"><img src="https://avatars.githubusercontent.com/u/26410594?v=4?s=100" width="100px;" alt="William Gounot"/><br /><sub><b>William Gounot</b></sub></a><br /><a href="https://github.com/teleporthq/teleport-code-generators/commits?author=vylly" title="Code">💻</a></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->

This project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!

<h2 id="contact">✍️ Contact</h2>

Reach out to us on any of these channels:
* 📧 [Write an Email](mailto:hello@teleporthq.io)
* 💻 [Discord](https://discord.gg/5pfSVWJzzX)
* 🐦 [Drop a message on twitter](https://twitter.com/teleporthqio)
* ℹ️ [Website](https://teleporthq.io/)

'''
'''--- examples/test-samples/comp-style-overrides.json ---
{
    "name": "Travel Agency",
    "globals": {
      "settings": {
        "title": "Travel Agency",
        "language": "en"
      },
      "assets": [
        {
          "type": "style",
          "content": "html {  line-height: 1.15;}body {  margin: 0;}* {  box-sizing: border-box;  border-width: 0;  border-style: solid;}p,li,ul,pre,div,h1,h2,h3,h4,h5,h6 {  margin: 0;  padding: 0;}button,input,optgroup,select,textarea {  font-family: inherit;  font-size: 100%;  line-height: 1.15;  margin: 0;}button,select {  text-transform: none;}button,[type=\"button\"],[type=\"reset\"],[type=\"submit\"] {  -webkit-appearance: button;}button::-moz-focus-inner,[type=\"button\"]::-moz-focus-inner,[type=\"reset\"]::-moz-focus-inner,[type=\"submit\"]::-moz-focus-inner {  border-style: none;  padding: 0;}button:-moz-focus,[type=\"button\"]:-moz-focus,[type=\"reset\"]:-moz-focus,[type=\"submit\"]:-moz-focus {  outline: 1px dotted ButtonText;}a {  color: inherit;  text-decoration: inherit;}input {  padding: 2px 4px;}img {  display: block;}"
        },
        {
          "type": "style",
          "content": "\n  html {\n    font-family: Poppins;\n    font-size: 16px;\n  }\n\n  body {\n    font-weight: 400;\n    font-style:normal;\n    text-decoration: none;\n    text-transform: none;\n    letter-spacing: normal;\n    line-height: 1.55;\n    color: var(--dl-color-gray-black);\n    background-color: var(--dl-color-gray-white);\n    \n  }\n\n  \n"
        },
        {
          "type": "font",
          "path": "https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap",
          "name": "Poppins"
        }
      ],
      "meta": [
        {
          "name": "viewport",
          "content": "width=device-width, initial-scale=1.0"
        },
        {
          "charSet": "utf-8"
        },
        {
          "property": "twitter:card",
          "content": "summary_large_image"
        }
      ],
      "customCode": {
        "body": "<script src='https://unpkg.com/@teleporthq/teleport-custom-scripts'></script>"
      }
    },
    "root": {
      "name": "App",
      "designLanguage": {
        "tokens": {
          "--dl-size-size-doubleunit": {
            "type": "static",
            "content": "2rem"
          },
          "--dl-color-primary-500": {
            "type": "static",
            "content": "#643843ff"
          },
          "--dl-space-space-halfunit": {
            "type": "static",
            "content": "0.5em"
          },
          "--dl-radius-radius-radius4": {
            "type": "static",
            "content": "4px"
          },
          "--dl-size-size-unit": {
            "type": "static",
            "content": "1rem"
          },
          "--dl-color-gray-500": {
            "type": "static",
            "content": "#595959"
          },
          "--dl-size-size-tripleunit": {
            "type": "static",
            "content": "3rem"
          },
          "--dl-color-primary-700": {
            "type": "static",
            "content": "#775860ff"
          },
          "--dl-space-space-quadruple": {
            "type": "static",
            "content": "4em"
          },
          "--dl-color-gray-black": {
            "type": "static",
            "content": "#000000"
          },
          "--dl-color-gray-900": {
            "type": "static",
            "content": "#D9D9D9"
          },
          "--dl-space-space-doubleunit": {
            "type": "static",
            "content": "2em"
          },
          "--dl-space-space-unit": {
            "type": "static",
            "content": "1em"
          },
          "--dl-radius-radius-radius2": {
            "type": "static",
            "content": "2px"
          },
          "--dl-size-size-halfunit": {
            "type": "static",
            "content": "0.5rem"
          },
          "--dl-color-gray-white": {
            "type": "static",
            "content": "#FFFFFF"
          },
          "--dl-color-primary-100": {
            "type": "static",
            "content": "#370511ff"
          },
          "--dl-radius-radius-round": {
            "type": "static",
            "content": "50%"
          },
          "--dl-space-space-tripleunit": {
            "type": "static",
            "content": "3em"
          },
          "--dl-color-gray-700": {
            "type": "static",
            "content": "#999999"
          },
          "--dl-radius-radius-radius8": {
            "type": "static",
            "content": "8px"
          }
        }
      },
      "styleSetDefinitions": {
        "teleport-show": {
          "type": "reusable-project-style-map",
          "content": {
            "display": {
              "type": "static",
              "content": "flex !important"
            }
          },
          "conditions": []
        },
        "button": {
          "type": "reusable-project-style-map",
          "content": {
            "fontSize": {
              "type": "static",
              "content": "14px"
            },
            "fontFamily": {
              "type": "static",
              "content": "Poppins"
            },
            "fontWeight": {
              "type": "static",
              "content": "600"
            },
            "textTransform": {
              "type": "static",
              "content": "none"
            },
            "textDecoration": {
              "type": "static",
              "content": "none"
            }
          }
        },
        "list-item": {
          "type": "reusable-project-style-map",
          "content": {
            "display": {
              "type": "static",
              "content": "list-item"
            }
          },
          "conditions": []
        },
        "list": {
          "type": "reusable-project-style-map",
          "content": {
            "width": {
              "type": "static",
              "content": "100%"
            },
            "margin": {
              "type": "static",
              "content": "1em 0px 1em 0px"
            },
            "display": {
              "type": "static",
              "content": "block"
            },
            "padding": {
              "type": "static",
              "content": "0px 0px 0px 1.5rem"
            },
            "listStyleType": {
              "type": "static",
              "content": "none"
            },
            "listStylePosition": {
              "type": "static",
              "content": "outside"
            }
          },
          "conditions": []
        },
        "textarea": {
          "type": "reusable-project-style-map",
          "content": {
            "color": {
              "type": "dynamic",
              "content": {
                "referenceType": "token",
                "id": "--dl-color-gray-black"
              }
            },
            "cursor": {
              "type": "static",
              "content": "auto"
            },
            "padding": {
              "type": "static",
              "content": "0.5rem"
            },
            "fontFamily": {
              "type": "static",
              "content": "Poppins"
            },
            "borderColor": {
              "type": "dynamic",
              "content": {
                "referenceType": "token",
                "id": "--dl-color-gray-black"
              }
            },
            "borderWidth": {
              "type": "static",
              "content": "1px"
            },
            "borderRadius": {
              "type": "static",
              "content": "4px"
            },
            "backgroundColor": {
              "type": "dynamic",
              "content": {
                "referenceType": "token",
                "id": "--dl-color-gray-white"
              }
            }
          },
          "conditions": []
        },
        "input": {
          "type": "reusable-project-style-map",
          "content": {
            "color": {
              "type": "dynamic",
              "content": {
                "referenceType": "token",
                "id": "--dl-color-gray-black"
              }
            },
            "cursor": {
              "type": "static",
              "content": "auto"
            },
            "padding": {
              "type": "static",
              "content": "0.5rem 1rem"
            },
            "fontFamily": {
              "type": "static",
              "content": "Poppins"
            },
            "borderColor": {
              "type": "dynamic",
              "content": {
                "referenceType": "token",
                "id": "--dl-color-gray-black"
              }
            },
            "borderWidth": {
              "type": "static",
              "content": "1px"
            },
            "borderRadius": {
              "type": "static",
              "content": "4px"
            },
            "backgroundColor": {
              "type": "dynamic",
              "content": {
                "referenceType": "token",
                "id": "--dl-color-gray-white"
              }
            }
          },
          "conditions": []
        },
        "subheading": {
          "type": "reusable-project-style-map",
          "content": {
            "fontSize": {
              "type": "static",
              "content": "1.6rem"
            },
            "fontFamily": {
              "type": "static",
              "content": "Poppins"
            },
            "fontWeight": {
              "type": "static",
              "content": "400"
            },
            "textTransform": {
              "type": "static",
              "content": "none"
            },
            "textDecoration": {
              "type": "static",
              "content": "none"
            }
          }
        },
        "heading": {
          "type": "reusable-project-style-map",
          "content": {
            "fontSize": {
              "type": "static",
              "content": "3rem"
            },
            "fontFamily": {
              "type": "static",
              "content": "Poppins"
            },
            "fontWeight": {
              "type": "static",
              "content": "700"
            },
            "lineHeight": {
              "type": "static",
              "content": "1.55"
            },
            "textTransform": {
              "type": "static",
              "content": "none"
            },
            "textDecoration": {
              "type": "static",
              "content": "none"
            }
          }
        },
        "content": {
          "type": "reusable-project-style-map",
          "content": {
            "fontSize": {
              "type": "static",
              "content": "16px"
            },
            "fontFamily": {
              "type": "static",
              "content": "Poppins"
            },
            "fontWeight": {
              "type": "static",
              "content": "400"
            },
            "lineHeight": {
              "type": "static",
              "content": "1.55"
            },
            "textTransform": {
              "type": "static",
              "content": "none"
            },
            "textDecoration": {
              "type": "static",
              "content": "none"
            }
          }
        }
      },
      "stateDefinitions": {
        "route": {
          "type": "string",
          "defaultValue": "Landing Page",
          "values": [
            {
              "value": "Landing Page",
              "seo": {
                "title": "Travel Agency",
                "metaTags": [
                  {
                    "property": "og:title",
                    "content": "Travel Agency"
                  }
                ]
              }
            }
          ]
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "Router",
          "children": [
            {
              "type": "conditional",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "container",
                    "referencedStyles": {},
                    "abilities": {},
                    "style": {
                      "width": {
                        "type": "static",
                        "content": "100%"
                      },
                      "height": {
                        "type": "static",
                        "content": "auto"
                      },
                      "display": {
                        "type": "static",
                        "content": "flex"
                      },
                      "minHeight": {
                        "type": "static",
                        "content": "100vh"
                      },
                      "alignItems": {
                        "type": "static",
                        "content": "center"
                      },
                      "flexDirection": {
                        "type": "static",
                        "content": "column"
                      }
                    },
                    "children": [
                      {
                        "type": "element",
                        "content": {
                          "elementType": "container",
                          "name": "Top-container",
                          "referencedStyles": {},
                          "abilities": {},
                          "style": {
                            "width": {
                              "type": "static",
                              "content": "100%"
                            },
                            "height": {
                              "type": "static",
                              "content": "600px"
                            },
                            "display": {
                              "type": "static",
                              "content": "flex"
                            },
                            "alignItems": {
                              "type": "static",
                              "content": "center"
                            },
                            "flexDirection": {
                              "type": "static",
                              "content": "column"
                            },
                            "backgroundSize": {
                              "type": "static",
                              "content": "cover"
                            },
                            "backgroundImage": {
                              "type": "static",
                              "content": "url(\"https://images.unsplash.com/photo-1484627147104-f5197bcd6651?ixlib=rb-1.2.1&q=85&fm=jpg&crop=entropy&cs=srgb&w=1000\")"
                            },
                            "backgroundPosition": {
                              "type": "static",
                              "content": "0% 40%"
                            }
                          },
                          "children": [
                            {
                              "type": "element",
                              "content": {
                                "elementType": "container",
                                "name": "Navbar",
                                "referencedStyles": {},
                                "abilities": {},
                                "attrs": {
                                  "data-role": {
                                    "type": "static",
                                    "content": "Header"
                                  }
                                },
                                "style": {
                                  "width": {
                                    "type": "static",
                                    "content": "100%"
                                  },
                                  "display": {
                                    "type": "static",
                                    "content": "flex"
                                  },
                                  "padding": {
                                    "type": "dynamic",
                                    "content": {
                                      "referenceType": "token",
                                      "id": "--dl-space-space-doubleunit"
                                    }
                                  },
                                  "maxWidth": {
                                    "type": "static",
                                    "content": "1000px"
                                  },
                                  "alignItems": {
                                    "type": "static",
                                    "content": "center"
                                  },
                                  "flexDirection": {
                                    "type": "static",
                                    "content": "row"
                                  },
                                  "justifyContent": {
                                    "type": "static",
                                    "content": "space-between"
                                  }
                                },
                                "children": [
                                  {
                                    "type": "element",
                                    "content": {
                                      "elementType": "text",
                                      "name": "Logo",
                                      "referencedStyles": {},
                                      "abilities": {},
                                      "children": [
                                        {
                                          "type": "static",
                                          "content": "Travel"
                                        }
                                      ],
                                      "semanticType": "h1"
                                    }
                                  },
                                  {
                                    "type": "element",
                                    "content": {
                                      "elementType": "container",
                                      "name": "Right-side",
                                      "referencedStyles": {
                                        "b0aed995-f3f0-445e-82eb-03dee183261e": {
                                          "type": "style-map",
                                          "content": {
                                            "conditions": [
                                              {
                                                "maxWidth": 767,
                                                "conditionType": "screen-size"
                                              }
                                            ],
                                            "mapType": "inlined",
                                            "styles": {
                                              "display": {
                                                "type": "static",
                                                "content": "none"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "abilities": {},
                                      "style": {
                                        "display": {
                                          "type": "static",
                                          "content": "flex"
                                        },
                                        "alignItems": {
                                          "type": "static",
                                          "content": "center"
                                        },
                                        "flexDirection": {
                                          "type": "static",
                                          "content": "row"
                                        },
                                        "justifyContent": {
                                          "type": "static",
                                          "content": "space-between"
                                        }
                                      },
                                      "children": [
                                        {
                                          "type": "element",
                                          "content": {
                                            "elementType": "container",
                                            "name": "Links-container",
                                            "referencedStyles": {},
                                            "abilities": {},
                                            "style": {
                                              "display": {
                                                "type": "static",
                                                "content": "flex"
                                              },
                                              "alignItems": {
                                                "type": "static",
                                                "content": "center"
                                              },
                                              "flexDirection": {
                                                "type": "static",
                                                "content": "row"
                                              },
                                              "justifyContent": {
                                                "type": "static",
                                                "content": "space-between"
                                              }
                                            },
                                            "children": [
                                              {
                                                "type": "element",
                                                "content": {
                                                  "elementType": "text",
                                                  "referencedStyles": {},
                                                  "abilities": {},
                                                  "style": {
                                                    "marginRight": {
                                                      "type": "dynamic",
                                                      "content": {
                                                        "referenceType": "token",
                                                        "id": "--dl-space-space-doubleunit"
                                                      }
                                                    }
                                                  },
                                                  "children": [
                                                    {
                                                      "type": "static",
                                                      "content": "Home"
                                                    }
                                                  ],
                                                  "semanticType": "span"
                                                }
                                              },
                                              {
                                                "type": "element",
                                                "content": {
                                                  "elementType": "text",
                                                  "referencedStyles": {},
                                                  "abilities": {},
                                                  "style": {
                                                    "marginRight": {
                                                      "type": "dynamic",
                                                      "content": {
                                                        "referenceType": "token",
                                                        "id": "--dl-space-space-doubleunit"
                                                      }
                                                    }
                                                  },
                                                  "children": [
                                                    {
                                                      "type": "static",
                                                      "content": "About"
                                                    }
                                                  ],
                                                  "semanticType": "span"
                                                }
                                              },
                                              {
                                                "type": "element",
                                                "content": {
                                                  "elementType": "text",
                                                  "referencedStyles": {},
                                                  "abilities": {},
                                                  "style": {
                                                    "marginRight": {
                                                      "type": "dynamic",
                                                      "content": {
                                                        "referenceType": "token",
                                                        "id": "--dl-space-space-doubleunit"
                                                      }
                                                    }
                                                  },
                                                  "children": [
                                                    {
                                                      "type": "static",
                                                      "content": "Tour Packages"
                                                    }
                                                  ],
                                                  "semanticType": "span"
                                                }
                                              },
                                              {
                                                "type": "element",
                                                "content": {
                                                  "elementType": "text",
                                                  "referencedStyles": {},
                                                  "abilities": {},
                                                  "style": {
                                                    "marginRight": {
                                                      "type": "dynamic",
                                                      "content": {
                                                        "referenceType": "token",
                                                        "id": "--dl-space-space-doubleunit"
                                                      }
                                                    }
                                                  },
                                                  "children": [
                                                    {
                                                      "type": "static",
                                                      "content": "Contact"
                                                    }
                                                  ],
                                                  "semanticType": "span"
                                                }
                                              }
                                            ],
                                            "semanticType": "div"
                                          }
                                        },
                                        {
                                          "type": "element",
                                          "content": {
                                            "elementType": "component",
                                            "dependency": {
                                              "type": "local"
                                            },
                                            "referencedStyles": {},
                                            "abilities": {
                                              "link": {
                                                "type": "section",
                                                "content": {
                                                  "section": "main-section"
                                                }
                                              }
                                            },
                                            "attrs": {
                                              "button": {
                                                "type": "static",
                                                "content": "Explore places"
                                              }
                                            },
                                            "children": [],
                                            "semanticType": "SolidButton"
                                          }
                                        }
                                      ],
                                      "semanticType": "div"
                                    }
                                  },
                                  {
                                    "type": "element",
                                    "content": {
                                      "elementType": "container",
                                      "name": "BurgerMenu",
                                      "referencedStyles": {
                                        "03b4f11e-c851-4af7-b3f0-650e34eef7e7": {
                                          "type": "style-map",
                                          "content": {
                                            "conditions": [
                                              {
                                                "maxWidth": 767,
                                                "conditionType": "screen-size"
                                              }
                                            ],
                                            "mapType": "inlined",
                                            "styles": {
                                              "display": {
                                                "type": "static",
                                                "content": "flex"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "abilities": {},
                                      "attrs": {
                                        "data-type": {
                                          "type": "static",
                                          "content": "BurgerMenu"
                                        }
                                      },
                                      "style": {
                                        "display": {
                                          "type": "static",
                                          "content": "none"
                                        },
                                        "alignItems": {
                                          "type": "static",
                                          "content": "center"
                                        },
                                        "flexDirection": {
                                          "type": "static",
                                          "content": "row"
                                        },
                                        "justifyContent": {
                                          "type": "static",
                                          "content": "space-between"
                                        }
                                      },
                                      "children": [
                                        {
                                          "type": "element",
                                          "content": {
                                            "elementType": "icon",
                                            "name": "Burger-menu",
                                            "referencedStyles": {},
                                            "abilities": {},
                                            "attrs": {
                                              "viewBox": {
                                                "type": "static",
                                                "content": "0 0 1024 1024"
                                              }
                                            },
                                            "style": {
                                              "width": {
                                                "type": "static",
                                                "content": "24px"
                                              },
                                              "height": {
                                                "type": "static",
                                                "content": "24px"
                                              }
                                            },
                                            "children": [
                                              {
                                                "type": "element",
                                                "content": {
                                                  "elementType": "icon",
                                                  "referencedStyles": {},
                                                  "abilities": {},
                                                  "attrs": {
                                                    "d": {
                                                      "type": "static",
                                                      "content": "M810.667 725.333h-597.333c-47.061 0-85.333 38.272-85.333 85.333s38.272 85.333 85.333 85.333h597.333c47.061 0 85.333-38.272 85.333-85.333s-38.272-85.333-85.333-85.333z"
                                                    }
                                                  },
                                                  "children": [],
                                                  "semanticType": "path"
                                                }
                                              },
                                              {
                                                "type": "element",
                                                "content": {
                                                  "elementType": "icon",
                                                  "referencedStyles": {},
                                                  "abilities": {},
                                                  "attrs": {
                                                    "d": {
                                                      "type": "static",
                                                      "content": "M810.667 426.667h-597.333c-47.061 0-85.333 38.272-85.333 85.333s38.272 85.333 85.333 85.333h597.333c47.061 0 85.333-38.272 85.333-85.333s-38.272-85.333-85.333-85.333z"
                                                    }
                                                  },
                                                  "children": [],
                                                  "semanticType": "path"
                                                }
                                              },
                                              {
                                                "type": "element",
                                                "content": {
                                                  "elementType": "icon",
                                                  "referencedStyles": {},
                                                  "abilities": {},
                                                  "attrs": {
                                                    "d": {
                                                      "type": "static",
                                                      "content": "M810.667 128h-597.333c-47.061 0-85.333 38.272-85.333 85.333s38.272 85.333 85.333 85.333h597.333c47.061 0 85.333-38.272 85.333-85.333s-38.272-85.333-85.333-85.333z"
                                                    }
                                                  },
                                                  "children": [],
                                                  "semanticType": "path"
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ],
                                      "semanticType": "div"
                                    }
                                  },
                                  {
                                    "type": "element",
                                    "content": {
                                      "elementType": "container",
                                      "name": "MobileMenu",
                                      "referencedStyles": {},
                                      "abilities": {},
                                      "attrs": {
                                        "data-type": {
                                          "type": "static",
                                          "content": "MobileMenu"
                                        }
                                      },
                                      "style": {
                                        "top": {
                                          "type": "static",
                                          "content": "0px"
                                        },
                                        "flex": {
                                          "type": "static",
                                          "content": "0 0 auto"
                                        },
                                        "left": {
                                          "type": "static",
                                          "content": "0px"
                                        },
                                        "width": {
                                          "type": "static",
                                          "content": "100%"
                                        },
                                        "height": {
                                          "type": "static",
                                          "content": "100%"
                                        },
                                        "zIndex": {
                                          "type": "static",
                                          "content": "100"
                                        },
                                        "display": {
                                          "type": "static",
                                          "content": "none"
                                        },
                                        "padding": {
                                          "type": "dynamic",
                                          "content": {
                                            "referenceType": "token",
                                            "id": "--dl-space-space-doubleunit"
                                          }
                                        },
                                        "position": {
                                          "type": "static",
                                          "content": "absolute"
                                        },
                                        "flexDirection": {
                                          "type": "static",
                                          "content": "column"
                                        },
                                        "justifyContent": {
                                          "type": "static",
                                          "content": "space-between"
                                        },
                                        "backgroundColor": {
                                          "type": "static",
                                          "content": "#fff"
                                        }
                                      },
                                      "children": [
                                        {
                                          "type": "element",
                                          "content": {
                                            "elementType": "container",
                                            "name": "Nav",
                                            "referencedStyles": {},
                                            "abilities": {},
                                            "style": {
                                              "flex": {
                                                "type": "static",
                                                "content": "0 0 auto"
                                              },
                                              "display": {
                                                "type": "static",
                                                "content": "flex"
                                              },
                                              "alignItems": {
                                                "type": "static",
                                                "content": "flex-start"
                                              },
                                              "flexDirection": {
                                                "type": "static",
                                                "content": "column"
                                              }
                                            },
                                            "children": [
                                              {
                                                "type": "element",
                                                "content": {
                                                  "elementType": "container",
                                                  "name": "Top",
                                                  "referencedStyles": {},
                                                  "abilities": {},
                                                  "style": {
                                                    "flex": {
                                                      "type": "static",
                                                      "content": "0 0 auto"
                                                    },
                                                    "width": {
                                                      "type": "static",
                                                      "content": "100%"
                                                    },
                                                    "display": {
                                                      "type": "static",
                                                      "content": "flex"
                                                    },
                                                    "alignItems": {
                                                      "type": "static",
                                                      "content": "center"
                                                    },
                                                    "marginBottom": {
                                                      "type": "dynamic",
                                                      "content": {
                                                        "referenceType": "token",
                                                        "id": "--dl-space-space-doubleunit"
                                                      }
                                                    },
                                                    "flexDirection": {
                                                      "type": "static",
                                                      "content": "row"
                                                    },
                                                    "justifyContent": {
                                                      "type": "static",
                                                      "content": "space-between"
                                                    }
                                                  },
                                                  "children": [
                                                    {
                                                      "type": "element",
                                                      "content": {
                                                        "elementType": "text",
                                                        "name": "Logo",
                                                        "referencedStyles": {},
                                                        "abilities": {},
                                                        "children": [
                                                          {
                                                            "type": "static",
                                                            "content": "Travel"
                                                          }
                                                        ],
                                                        "semanticType": "h1"
                                                      }
                                                    },
                                                    {
                                                      "type": "element",
                                                      "content": {
                                                        "elementType": "container",
                                                        "name": "CloseMenu",
                                                        "referencedStyles": {},
                                                        "abilities": {},
                                                        "attrs": {
                                                          "data-type": {
                                                            "type": "static",
                                                            "content": "CloseMobileMenu"
                                                          }
                                                        },
                                                        "style": {
                                                          "flex": {
                                                            "type": "static",
                                                            "content": "0 0 auto"
                                                          },
                                                          "display": {
                                                            "type": "static",
                                                            "content": "flex"
                                                          },
                                                          "alignItems": {
                                                            "type": "static",
                                                            "content": "flex-start"
                                                          },
                                                          "flexDirection": {
                                                            "type": "static",
                                                            "content": "column"
                                                          }
                                                        },
                                                        "children": [
                                                          {
                                                            "type": "element",
                                                            "content": {
                                                              "elementType": "icon",
                                                              "referencedStyles": {},
                                                              "abilities": {},
                                                              "attrs": {
                                                                "viewBox": {
                                                                  "type": "static",
                                                                  "content": "0 0 1024 1024"
                                                                }
                                                              },
                                                              "style": {
                                                                "width": {
                                                                  "type": "static",
                                                                  "content": "24px"
                                                                },
                                                                "height": {
                                                                  "type": "static",
                                                                  "content": "24px"
                                                                }
                                                              },
                                                              "children": [
                                                                {
                                                                  "type": "element",
                                                                  "content": {
                                                                    "elementType": "icon",
                                                                    "referencedStyles": {},
                                                                    "abilities": {},
                                                                    "attrs": {
                                                                      "d": {
                                                                        "type": "static",
                                                                        "content": "M810 274l-238 238 238 238-60 60-238-238-238 238-60-60 238-238-238-238 60-60 238 238 238-238z"
                                                                      }
                                                                    },
                                                                    "children": [],
                                                                    "semanticType": "path"
                                                                  }
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ],
                                                        "semanticType": "div"
                                                      }
                                                    }
                                                  ],
                                                  "semanticType": "div"
                                                }
                                              },
                                              {
                                                "type": "element",
                                                "content": {
                                                  "elementType": "container",
                                                  "name": "Right-side",
                                                  "referencedStyles": {},
                                                  "abilities": {},
                                                  "style": {
                                                    "width": {
                                                      "type": "static",
                                                      "content": "100%"
                                                    },
                                                    "display": {
                                                      "type": "static",
                                                      "content": "flex"
                                                    },
                                                    "alignItems": {
                                                      "type": "static",
                                                      "content": "flex-start"
                                                    },
                                                    "flexDirection": {
                                                      "type": "static",
                                                      "content": "column"
                                                    },
                                                    "justifyContent": {
                                                      "type": "static",
                                                      "content": "space-between"
                                                    }
                                                  },
                                                  "children": [
                                                    {
                                                      "type": "element",
                                                      "content": {
                                                        "elementType": "container",
                                                        "name": "Links-container",
                                                        "referencedStyles": {},
                                                        "abilities": {},
                                                        "style": {
                                                          "display": {
                                                            "type": "static",
                                                            "content": "flex"
                                                          },
                                                          "alignItems": {
                                                            "type": "static",
                                                            "content": "flex-start"
                                                          },
                                                          "marginBottom": {
                                                            "type": "static",
                                                            "content": "16px"
                                                          },
                                                          "flexDirection": {
                                                            "type": "static",
                                                            "content": "column"
                                                          },
                                                          "justifyContent": {
                                                            "type": "static",
                                                            "content": "space-between"
                                                          }
                                                        },
                                                        "children": [
                                                          {
                                                            "type": "element",
                                                            "content": {
                                                              "elementType": "text",
                                                              "referencedStyles": {},
                                                              "abilities": {},
                                                              "style": {
                                                                "marginBottom": {
                                                                  "type": "static",
                                                                  "content": "8px"
                                                                }
                                                              },
                                                              "children": [
                                                                {
                                                                  "type": "static",
                                                                  "content": "Home"
                                                                }
                                                              ],
                                                              "semanticType": "span"
                                                            }
                                                          },
                                                          {
                                                            "type": "element",
                                                            "content": {
                                                              "elementType": "text",
                                                              "referencedStyles": {},
                                                              "abilities": {},
                                                              "style": {
                                                                "marginBottom": {
                                                                  "type": "static",
                                                                  "content": "8px"
                                                                }
                                                              },
                                                              "children": [
                                                                {
                                                                  "type": "static",
                                                                  "content": "About"
                                                                }
                                                              ],
                                                              "semanticType": "span"
                                                            }
                                                          },
                                                          {
                                                            "type": "element",
                                                            "content": {
                                                              "elementType": "text",
                                                              "referencedStyles": {},
                                                              "abilities": {},
                                                              "style": {
                                                                "marginBottom": {
                                                                  "type": "static",
                                                                  "content": "8px"
                                                                }
                                                              },
                                                              "children": [
                                                                {
                                                                  "type": "static",
                                                                  "content": "Tour Packages"
                                                                }
                                                              ],
                                                              "semanticType": "span"
                                                            }
                                                          },
                                                          {
                                                            "type": "element",
                                                            "content": {
                                                              "elementType": "text",
                                                              "referencedStyles": {},
                                                              "abilities": {},
                                                              "children": [
                                                                {
                                                                  "type": "static",
                                                                  "content": "Contact"
                                                                }
                                                              ],
                                                              "semanticType": "span"
                                                            }
                                                          }
                                                        ],
                                                        "semanticType": "div"
                                                      }
                                                    },
                                                    {
                                                      "type": "element",
                                                      "content": {
                                                        "elementType": "component",
                                                        "dependency": {
                                                          "type": "local"
                                                        },
                                                        "referencedStyles": {},
                                                        "abilities": {
                                                          "link": {
                                                            "type": "section",
                                                            "content": {
                                                              "section": "main-section"
                                                            }
                                                          }
                                                        },
                                                        "attrs": {
                                                          "button": {
                                                            "type": "static",
                                                            "content": "Explore places"
                                                          }
                                                        },
                                                        "children": [],
                                                        "semanticType": "SolidButton"
                                                      }
                                                    }
                                                  ],
                                                  "semanticType": "div"
                                                }
                                              }
                                            ],
                                            "semanticType": "div"
                                          }
                                        },
                                        {
                                          "type": "element",
                                          "content": {
                                            "elementType": "container",
                                            "name": "Follow-container",
                                            "referencedStyles": {},
                                            "abilities": {},
                                            "style": {
                                              "display": {
                                                "type": "static",
                                                "content": "flex"
                                              },
                                              "alignItems": {
                                                "type": "static",
                                                "content": "flex-start"
                                              },
                                              "flexDirection": {
                                                "type": "static",
                                                "content": "column"
                                              },
                                              "justifyContent": {
                                                "type": "static",
                                                "content": "space-between"
                                              }
                                            },
                                            "children": [
                                              {
                                                "type": "element",
                                                "content": {
                                                  "elementType": "text",
                                                  "referencedStyles": {},
                                                  "abilities": {},
                                                  "style": {
                                                    "paddingBottom": {
                                                      "type": "dynamic",
                                                      "content": {
                                                        "referenceType": "token",
                                                        "id": "--dl-space-space-halfunit"
                                                      }
                                                    }
                                                  },
                                                  "children": [
                                                    {
                                                      "type": "static",
                                                      "content": "Follow us on "
                                                    },
                                                    {
                                                      "type": "raw",
                                                      "content": " "
                                                    }
                                                  ],
                                                  "semanticType": "span"
                                                }
                                              },
                                              {
                                                "type": "element",
                                                "content": {
                                                  "elementType": "container",
                                                  "name": "Icons-container",
                                                  "referencedStyles": {},
                                                  "abilities": {},
                                                  "style": {
                                                    "width": {
                                                      "type": "static",
                                                      "content": "100px"
                                                    },
                                                    "display": {
                                                      "type": "static",
                                                      "content": "flex"
                                                    },
                                                    "alignItems": {
                                                      "type": "static",
                                                      "content": "flex-start"
                                                    },
                                                    "flexDirection": {
                                                      "type": "static",
                                                      "content": "row"
                                                    },
                                                    "justifyContent": {
                                                      "type": "static",
                                                      "content": "space-between"
                                                    }
                                                  },
                                                  "children": [
                                                    {
                                                      "type": "element",
                                                      "content": {
                                                        "elementType": "icon",
                                                        "referencedStyles": {},
                                                        "abilities": {
                                                          "link": {
                                                            "type": "url",
                                                            "content": {
                                                              "url": {
                                                                "type": "static",
                                                                "content": "https://instagram.com"
                                                              },
                                                              "newTab": true
                                                            }
                                                          }
                                                        },
                                                        "attrs": {
                                                          "viewBox": {
                                                            "type": "static",
                                                            "content": "0 0 877.7142857142857 1024"
                                                          }
                                                        },
                                                        "style": {
                                                          "width": {
                                                            "type": "static",
                                                            "content": "24px"
                                                          },
                                                          "height": {
                                                            "type": "static",
                                                            "content": "24px"
                                                          }
                                                        },
                                                        "children": [
                                                          {
                                                            "type": "element",
                                                            "content": {
                                                              "elementType": "icon",
                                                              "referencedStyles": {},
                                                              "abilities": {},
                                                              "attrs": {
                                                                "d": {
                                                                  "type": "static",
                                                                  "content": "M585.143 512c0-80.571-65.714-146.286-146.286-146.286s-146.286 65.714-146.286 146.286 65.714 146.286 146.286 146.286 146.286-65.714 146.286-146.286zM664 512c0 124.571-100.571 225.143-225.143 225.143s-225.143-100.571-225.143-225.143 100.571-225.143 225.143-225.143 225.143 100.571 225.143 225.143zM725.714 277.714c0 29.143-23.429 52.571-52.571 52.571s-52.571-23.429-52.571-52.571 23.429-52.571 52.571-52.571 52.571 23.429 52.571 52.571zM438.857 152c-64 0-201.143-5.143-258.857 17.714-20 8-34.857 17.714-50.286 33.143s-25.143 30.286-33.143 50.286c-22.857 57.714-17.714 194.857-17.714 258.857s-5.143 201.143 17.714 258.857c8 20 17.714 34.857 33.143 50.286s30.286 25.143 50.286 33.143c57.714 22.857 194.857 17.714 258.857 17.714s201.143 5.143 258.857-17.714c20-8 34.857-17.714 50.286-33.143s25.143-30.286 33.143-50.286c22.857-57.714 17.714-194.857 17.714-258.857s5.143-201.143-17.714-258.857c-8-20-17.714-34.857-33.143-50.286s-30.286-25.143-50.286-33.143c-57.714-22.857-194.857-17.714-258.857-17.714zM877.714 512c0 60.571 0.571 120.571-2.857 181.143-3.429 70.286-19.429 132.571-70.857 184s-113.714 67.429-184 70.857c-60.571 3.429-120.571 2.857-181.143 2.857s-120.571 0.571-181.143-2.857c-70.286-3.429-132.571-19.429-184-70.857s-67.429-113.714-70.857-184c-3.429-60.571-2.857-120.571-2.857-181.143s-0.571-120.571 2.857-181.143c3.429-70.286 19.429-132.571 70.857-184s113.714-67.429 184-70.857c60.571-3.429 120.571-2.857 181.143-2.857s120.571-0.571 181.143 2.857c70.286 3.429 132.571 19.429 184 70.857s67.429 113.714 70.857 184c3.429 60.571 2.857 120.571 2.857 181.143z"
                                                                }
                                                              },
                                                              "children": [],
                                                              "semanticType": "path"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      "type": "element",
                                                      "content": {
                                                        "elementType": "icon",
                                                        "referencedStyles": {},
                                                        "abilities": {
                                                          "link": {
                                                            "type": "url",
                                                            "content": {
                                                              "url": {
                                                                "type": "static",
                                                                "content": "https://facebook.com"
                                                              },
                                                              "newTab": true
                                                            }
                                                          }
                                                        },
                                                        "attrs": {
                                                          "viewBox": {
                                                            "type": "static",
                                                            "content": "0 0 602.2582857142856 1024"
                                                          }
                                                        },
                                                        "style": {
                                                          "width": {
                                                            "type": "static",
                                                            "content": "24px"
                                                          },
                                                          "height": {
                                                            "type": "static",
                                                            "content": "24px"
                                                          }
                                                        },
                                                        "children": [
                                                          {
                                                            "type": "element",
                                                            "content": {
                                                              "elementType": "icon",
                                                              "referencedStyles": {},
                                                              "abilities": {},
                                                              "attrs": {
                                                                "d": {
                                                                  "type": "static",
                                                                  "content": "M548 6.857v150.857h-89.714c-70.286 0-83.429 33.714-83.429 82.286v108h167.429l-22.286 169.143h-145.143v433.714h-174.857v-433.714h-145.714v-169.143h145.714v-124.571c0-144.571 88.571-223.429 217.714-223.429 61.714 0 114.857 4.571 130.286 6.857z"
                                                                }
                                                              },
                                                              "children": [],
                                                              "semanticType": "path"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      "type": "element",
                                                      "content": {
                                                        "elementType": "icon",
                                                        "referencedStyles": {},
                                                        "abilities": {
                                                          "link": {
                                                            "type": "url",
                                                            "content": {
                                                              "url": {
                                                                "type": "static",
                                                                "content": "https://twitter.com"
                                                              },
                                                              "newTab": true
                                                            }
                                                          }
                                                        },
                                                        "attrs": {
                                                          "viewBox": {
                                                            "type": "static",
                                                            "content": "0 0 950.8571428571428 1024"
                                                          }
                                                        },
                                                        "style": {
                                                          "width": {
                                                            "type": "static",
                                                            "content": "24px"
                                                          },
                                                          "height": {
                                                            "type": "static",
                                                            "content": "24px"
                                                          }
                                                        },
                                                        "children": [
                                                          {
                                                            "type": "element",
                                                            "content": {
                                                              "elementType": "icon",
                                                              "referencedStyles": {},
                                                              "abilities": {},
                                                              "attrs": {
                                                                "d": {
                                                                  "type": "static",
                                                                  "content": "M925.714 233.143c-25.143 36.571-56.571 69.143-92.571 95.429 0.571 8 0.571 16 0.571 24 0 244-185.714 525.143-525.143 525.143-104.571 0-201.714-30.286-283.429-82.857 14.857 1.714 29.143 2.286 44.571 2.286 86.286 0 165.714-29.143 229.143-78.857-81.143-1.714-149.143-54.857-172.571-128 11.429 1.714 22.857 2.857 34.857 2.857 16.571 0 33.143-2.286 48.571-6.286-84.571-17.143-148-91.429-148-181.143v-2.286c24.571 13.714 53.143 22.286 83.429 23.429-49.714-33.143-82.286-89.714-82.286-153.714 0-34.286 9.143-65.714 25.143-93.143 90.857 112 227.429 185.143 380.571 193.143-2.857-13.714-4.571-28-4.571-42.286 0-101.714 82.286-184.571 184.571-184.571 53.143 0 101.143 22.286 134.857 58.286 41.714-8 81.714-23.429 117.143-44.571-13.714 42.857-42.857 78.857-81.143 101.714 37.143-4 73.143-14.286 106.286-28.571z"
                                                                }
                                                              },
                                                              "children": [],
                                                              "semanticType": "path"
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ],
                                                  "semanticType": "div"
                                                }
                                              }
                                            ],
                                            "semanticType": "div"
                                          }
                                        }
                                      ],
                                      "semanticType": "div"
                                    }
                                  }
                                ],
                                "semanticType": "nav"
                              }
                            },
                            {
                              "type": "element",
                              "content": {
                                "elementType": "container",
                                "name": "Hero",
                                "referencedStyles": {
                                  "9fafe1fc-8b6b-4080-8b8f-2871abaeb9ca": {
                                    "type": "style-map",
                                    "content": {
                                      "conditions": [
                                        {
                                          "maxWidth": 991,
                                          "conditionType": "screen-size"
                                        }
                                      ],
                                      "mapType": "inlined",
                                      "styles": {
                                        "paddingLeft": {
                                          "type": "dynamic",
                                          "content": {
                                            "referenceType": "token",
                                            "id": "--dl-space-space-tripleunit"
                                          }
                                        },
                                        "paddingRight": {
                                          "type": "dynamic",
                                          "content": {
                                            "referenceType": "token",
                                            "id": "--dl-space-space-tripleunit"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "b38aa2e4-4090-4cfe-8e59-8c50756aff7f": {
                                    "type": "style-map",
                                    "content": {
                                      "conditions": [
                                        {
                                          "maxWidth": 767,
                                          "conditionType": "screen-size"
                                        }
                                      ],
                                      "mapType": "inlined",
                                      "styles": {
                                        "justifyContent": {
                                          "type": "static",
                                          "content": "center"
                                        }
                                      }
                                    }
                                  }
                                },
                                "abilities": {},
                                "style": {
                                  "flex": {
                                    "type": "static",
                                    "content": "1"
                                  },
                                  "width": {
                                    "type": "static",
                                    "content": "100%"
                                  },
                                  "display": {
                                    "type": "static",
                                    "content": "flex"
                                  },
                                  "maxWidth": {
                                    "type": "static",
                                    "content": "1000px"
                                  },
                                  "alignItems": {
                                    "type": "static",
                                    "content": "center"
                                  },
                                  "paddingTop": {
                                    "type": "dynamic",
                                    "content": {
                                      "referenceType": "token",
                                      "id": "--dl-space-space-tripleunit"
                                    }
                                  },
                                  "paddingLeft": {
                                    "type": "dynamic",
                                    "content": {
                                      "referenceType": "token",
                                      "id": "--dl-space-space-doubleunit"
                                    }
                                  },
                                  "paddingRight": {
                                    "type": "dynamic",
                                    "content": {
                                      "referenceType": "token",
                                      "id": "--dl-space-space-doubleunit"
                                    }
                                  },
                                  "flexDirection": {
                                    "type": "static",
                                    "content": "row"
                                  },
                                  "paddingBottom": {
                                    "type": "dynamic",
                                    "content": {
                                      "referenceType": "token",
                                      "id": "--dl-space-space-tripleunit"
                                    }
                                  },
                                  "justifyContent": {
                                    "type": "static",
                                    "content": "space-between"
                                  }
                                },
                                "children": [
                                  {
                                    "type": "element",
                                    "content": {
                                      "elementType": "container",
                                      "name": "Content-container",
                                      "referencedStyles": {
                                        "ee2281c6-f58d-49d2-8567-7cc396ae8061": {
                                          "type": "style-map",
                                          "content": {
                                            "conditions": [
                                              {
                                                "maxWidth": 767,
                                                "conditionType": "screen-size"
                                              }
                                            ],
                                            "mapType": "inlined",
                                            "styles": {
                                              "alignItems": {
                                                "type": "static",
                                                "content": "center"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "abilities": {},
                                      "style": {
                                        "display": {
                                          "type": "static",
                                          "content": "flex"
                                        },
                                        "alignItems": {
                                          "type": "static",
                                          "content": "flex-start"
                                        },
                                        "flexDirection": {
                                          "type": "static",
                                          "content": "column"
                                        }
                                      },
                                      "children": [
                                        {
                                          "type": "element",
                                          "content": {
                                            "elementType": "text",
                                            "referencedStyles": {
                                              "5ee632c2-a057-46ee-8b34-09709e16d9d4": {
                                                "type": "style-map",
                                                "content": {
                                                  "mapType": "project-referenced",
                                                  "referenceId": "heading"
                                                }
                                              },
                                              "a0a1b3f6-6d56-4e26-89a2-f1e3d7f128a7": {
                                                "type": "style-map",
                                                "content": {
                                                  "conditions": [
                                                    {
                                                      "maxWidth": 479,
                                                      "conditionType": "screen-size"
                                                    }
                                                  ],
                                                  "mapType": "inlined",
                                                  "styles": {
                                                    "fontSize": {
                                                      "type": "static",
                                                      "content": "2rem"
                                                    },
                                                    "textAlign": {
                                                      "type": "static",
                                                      "content": "center"
                                                    }
                                                  }
                                                }
                                              },
                                              "d1c7593f-d496-414c-863e-d867eca52a40": {
                                                "type": "style-map",
                                                "content": {
                                                  "conditions": [
                                                    {
                                                      "maxWidth": 767,
                                                      "conditionType": "screen-size"
                                                    }
                                                  ],
                                                  "mapType": "inlined",
                                                  "styles": {
                                                    "fontSize": {
                                                      "type": "static",
                                                      "content": "2.5rem"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "abilities": {},
                                            "children": [
                                              {
                                                "type": "static",
                                                "content": "Book an exclusive"
                                              }
                                            ],
                                            "semanticType": "h1"
                                          }
                                        },
                                        {
                                          "type": "element",
                                          "content": {
                                            "elementType": "text",
                                            "name": "Subheading",
                                            "referencedStyles": {
                                              "a2bde0cb-57c8-45a1-9c63-d542cdb2e363": {
                                                "type": "style-map",
                                                "content": {
                                                  "conditions": [
                                                    {
                                                      "maxWidth": 479,
                                                      "conditionType": "screen-size"
                                                    }
                                                  ],
                                                  "mapType": "inlined",
                                                  "styles": {
                                                    "fontSize": {
                                                      "type": "static",
                                                      "content": "1.3rem"
                                                    },
                                                    "textAlign": {
                                                      "type": "static",
                                                      "content": "center"
                                                    }
                                                  }
                                                }
                                              },
                                              "c02572cb-c56b-4f46-b1b6-c0637d9ee72f": {
                                                "type": "style-map",
                                                "content": {
                                                  "mapType": "project-referenced",
                                                  "referenceId": "subheading"
                                                }
                                              }
                                            },
                                            "abilities": {},
                                            "children": [
                                              {
                                                "type": "static",
                                                "content": "home for your personal travel"
                                              }
                                            ],
                                            "semanticType": "h2"
                                          }
                                        },
                                        {
                                          "type": "element",
                                          "content": {
                                            "elementType": "text",
                                            "referencedStyles": {
                                              "bdc55471-93a7-4509-bd0d-6d16827f57f9": {
                                                "type": "style-map",
                                                "content": {
                                                  "conditions": [
                                                    {
                                                      "maxWidth": 767,
                                                      "conditionType": "screen-size"
                                                    }
                                                  ],
                                                  "mapType": "inlined",
                                                  "styles": {
                                                    "textAlign": {
                                                      "type": "static",
                                                      "content": "center"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "abilities": {},
                                            "style": {
                                              "paddingTop": {
                                                "type": "dynamic",
                                                "content": {
                                                  "referenceType": "token",
                                                  "id": "--dl-space-space-doubleunit"
                                                }
                                              },
                                              "paddingBottom": {
                                                "type": "dynamic",
                                                "content": {
                                                  "referenceType": "token",
                                                  "id": "--dl-space-space-doubleunit"
                                                }
                                              }
                                            },
                                            "children": [
                                              {
                                                "type": "element",
                                                "content": {
                                                  "elementType": "text",
                                                  "referencedStyles": {},
                                                  "abilities": {},
                                                  "children": [
                                                    {
                                                      "type": "static",
                                                      "content": "Each property is hand-picked, "
                                                    },
                                                    {
                                                      "type": "raw",
                                                      "content": " "
                                                    }
                                                  ],
                                                  "semanticType": "span"
                                                }
                                              },
                                              {
                                                "type": "element",
                                                "content": {
                                                  "elementType": "text",
                                                  "referencedStyles": {},
                                                  "abilities": {},
                                                  "children": [],
                                                  "semanticType": "br"
                                                }
                                              },
                                              {
                                                "type": "element",
                                                "content": {
                                                  "elementType": "text",
                                                  "referencedStyles": {},
                                                  "abilities": {},
                                                  "children": [
                                                    {
                                                      "type": "static",
                                                      "content": "personally visited and cannot be found elsewhere."
                                                    }
                                                  ],
                                                  "semanticType": "span"
                                                }
                                              }
                                            ],
                                            "semanticType": "span"
                                          }
                                        },
                                        {
                                          "type": "element",
                                          "content": {
                                            "elementType": "component",
                                            "dependency": {
                                              "type": "local"
                                            },
                                            "referencedStyles": {},
                                            "abilities": {},
                                            "attrs": {
                                              "button": {
                                                "type": "static",
                                                "content": "Explore homes"
                                              }
                                            },
                                            "children": [],
                                            "semanticType": "SolidButton"
                                          }
                                        }
                                      ],
                                      "semanticType": "div"
                                    }
                                  }
                                ],
                                "semanticType": "div"
                              }
                            }
                          ],
                          "semanticType": "div"
                        }
                      },
                      {
                        "type": "element",
                        "content": {
                          "elementType": "container",
                          "name": "Main",
                          "referencedStyles": {
                            "f06cf5b0-669d-4d21-a61f-73f997996696": {
                              "type": "style-map",
                              "content": {
                                "conditions": [
                                  {
                                    "maxWidth": 767,
                                    "conditionType": "screen-size"
                                  }
                                ],
                                "mapType": "inlined",
                                "styles": {
                                  "paddingLeft": {
                                    "type": "dynamic",
                                    "content": {
                                      "referenceType": "token",
                                      "id": "--dl-space-space-unit"
                                    }
                                  },
                                  "paddingRight": {
                                    "type": "dynamic",
                                    "content": {
                                      "referenceType": "token",
                                      "id": "--dl-space-space-unit"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "abilities": {},
                          "attrs": {
                            "id": {
                              "type": "static",
                              "content": "main-section"
                            }
                          },
                          "style": {
                            "width": {
                              "type": "static",
                              "content": "100%"
                            },
                            "display": {
                              "type": "static",
                              "content": "flex"
                            },
                            "alignItems": {
                              "type": "static",
                              "content": "center"
                            },
                            "paddingTop": {
                              "type": "dynamic",
                              "content": {
                                "referenceType": "token",
                                "id": "--dl-space-space-quadruple"
                              }
                            },
                            "paddingLeft": {
                              "type": "dynamic",
                              "content": {
                                "referenceType": "token",
                                "id": "--dl-space-space-doubleunit"
                              }
                            },
                            "paddingRight": {
                              "type": "dynamic",
                              "content": {
                                "referenceType": "token",
                                "id": "--dl-space-space-doubleunit"
                              }
                            },
                            "flexDirection": {
                              "type": "static",
                              "content": "column"
                            },
                            "paddingBottom": {
                              "type": "dynamic",
                              "content": {
                                "referenceType": "token",
                                "id": "--dl-space-space-quadruple"
                              }
                            },
                            "justifyContent": {
                              "type": "static",
                              "content": "flex-start"
                            }
                          },
                          "children": [
                            {
                              "type": "element",
                              "content": {
                                "elementType": "text",
                                "referencedStyles": {},
                                "abilities": {},
                                "children": [
                                  {
                                    "type": "static",
                                    "content": "Most famous places"
                                  }
                                ],
                                "semanticType": "h1"
                              }
                            },
                            {
                              "type": "element",
                              "content": {
                                "elementType": "text",
                                "referencedStyles": {},
                                "abilities": {},
                                "style": {
                                  "color": {
                                    "type": "dynamic",
                                    "content": {
                                      "referenceType": "token",
                                      "id": "--dl-color-gray-500"
                                    }
                                  }
                                },
                                "children": [
                                  {
                                    "type": "static",
                                    "content": "Recommended"
                                  }
                                ],
                                "semanticType": "span"
                              }
                            },
                            {
                              "type": "element",
                              "content": {
                                "elementType": "container",
                                "name": "Cards-container",
                                "referencedStyles": {
                                  "14796d42-2776-406c-aa87-4b32c0fe1b02": {
                                    "type": "style-map",
                                    "content": {
                                      "conditions": [
                                        {
                                          "maxWidth": 991,
                                          "conditionType": "screen-size"
                                        }
                                      ],
                                      "mapType": "inlined",
                                      "styles": {
                                        "justifyContent": {
                                          "type": "static",
                                          "content": "center"
                                        }
                                      }
                                    }
                                  }
                                },
                                "abilities": {},
                                "style": {
                                  "width": {
                                    "type": "static",
                                    "content": "100%"
                                  },
                                  "display": {
                                    "type": "static",
                                    "content": "flex"
                                  },
                                  "gridGap": {
                                    "type": "dynamic",
                                    "content": {
                                      "referenceType": "token",
                                      "id": "--dl-space-space-doubleunit"
                                    }
                                  },
                                  "flexWrap": {
                                    "type": "static",
                                    "content": "wrap"
                                  },
                                  "maxWidth": {
                                    "type": "static",
                                    "content": "1000px"
                                  },
                                  "marginTop": {
                                    "type": "dynamic",
                                    "content": {
                                      "referenceType": "token",
                                      "id": "--dl-space-space-doubleunit"
                                    }
                                  },
                                  "alignItems": {
                                    "type": "static",
                                    "content": "flex-start"
                                  },
                                  "marginBottom": {
                                    "type": "dynamic",
                                    "content": {
                                      "referenceType": "token",
                                      "id": "--dl-space-space-doubleunit"
                                    }
                                  },
                                  "flexDirection": {
                                    "type": "static",
                                    "content": "row"
                                  },
                                  "justifyContent": {
                                    "type": "static",
                                    "content": "space-between"
                                  }
                                },
                                "children": [
                                  {
                                    "type": "element",
                                    "content": {
                                      "elementType": "component",
                                      "dependency": {
                                        "type": "local"
                                      },
                                      "referencedStyles": {},
                                      "abilities": {},
                                      "attrs": {
                                        "city": {
                                          "type": "static",
                                          "content": "London"
                                        },
                                        "image": {
                                          "type": "static",
                                          "content": "https://images.unsplash.com/photo-1529655683826-aba9b3e77383?ixlib=rb-1.2.1&q=85&fm=jpg&crop=entropy&cs=srgb&h=1000"
                                        },
                                        "rootClassName": {
                                          "type": "comp-style",
                                          "content": "rootClassName"
                                        }
                                      },
                                      "children": [],
                                      "semanticType": "PlaceCard"
                                    }
                                  },
                                  {
                                    "type": "element",
                                    "content": {
                                      "elementType": "component",
                                      "dependency": {
                                        "type": "local"
                                      },
                                      "referencedStyles": {},
                                      "abilities": {},
                                      "attrs": {
                                        "city": {
                                          "type": "static",
                                          "content": "Rome"
                                        },
                                        "image": {
                                          "type": "static",
                                          "content": "https://images.unsplash.com/photo-1552832230-c0197dd311b5?ixlib=rb-1.2.1&q=85&fm=jpg&crop=entropy&cs=srgb&h=1000"
                                        },
                                        "rootClassName": {
                                          "type": "comp-style",
                                          "content": "rootClassName1"
                                        }
                                      },
                                      "children": [],
                                      "semanticType": "PlaceCard"
                                    }
                                  },
                                  {
                                    "type": "element",
                                    "content": {
                                      "elementType": "component",
                                      "dependency": {
                                        "type": "local"
                                      },
                                      "referencedStyles": {},
                                      "abilities": {},
                                      "attrs": {
                                        "city": {
                                          "type": "static",
                                          "content": "Cluj-Napoca"
                                        },
                                        "image": {
                                          "type": "static",
                                          "content": "https://images.unsplash.com/photo-1513342791620-b106dc487c94?ixlib=rb-1.2.1&q=85&fm=jpg&crop=entropy&cs=srgb&h=1000"
                                        }
                                      },
                                      "children": [],
                                      "semanticType": "PlaceCard"
                                    }
                                  },
                                  {
                                    "type": "element",
                                    "content": {
                                      "elementType": "component",
                                      "dependency": {
                                        "type": "local"
                                      },
                                      "referencedStyles": {},
                                      "abilities": {},
                                      "attrs": {
                                        "city": {
                                          "type": "static",
                                          "content": "Paris"
                                        },
                                        "image": {
                                          "type": "static",
                                          "content": "https://images.unsplash.com/photo-1551634979-2b11f8c946fe?ixlib=rb-1.2.1&q=85&fm=jpg&crop=entropy&cs=srgb&h=1000"
                                        }
                                      },
                                      "children": [],
                                      "semanticType": "PlaceCard"
                                    }
                                  },
                                  {
                                    "type": "element",
                                    "content": {
                                      "elementType": "component",
                                      "dependency": {
                                        "type": "local"
                                      },
                                      "referencedStyles": {},
                                      "abilities": {},
                                      "attrs": {
                                        "city": {
                                          "type": "static",
                                          "content": "Amsterdam"
                                        },
                                        "image": {
                                          "type": "static",
                                          "content": "https://images.unsplash.com/photo-1585211969224-3e992986159d?ixlib=rb-1.2.1&q=85&fm=jpg&crop=entropy&cs=srgb&h=1000"
                                        }
                                      },
                                      "children": [],
                                      "semanticType": "PlaceCard"
                                    }
                                  },
                                  {
                                    "type": "element",
                                    "content": {
                                      "elementType": "component",
                                      "dependency": {
                                        "type": "local"
                                      },
                                      "referencedStyles": {},
                                      "abilities": {},
                                      "attrs": {
                                        "city": {
                                          "type": "static",
                                          "content": "Barcelona"
                                        },
                                        "image": {
                                          "type": "static",
                                          "content": "https://images.unsplash.com/photo-1564221710304-0b37c8b9d729?ixlib=rb-1.2.1&q=85&fm=jpg&crop=entropy&cs=srgb&h=1000"
                                        }
                                      },
                                      "children": [],
                                      "semanticType": "PlaceCard"
                                    }
                                  }
                                ],
                                "semanticType": "div"
                              }
                            }
                          ],
                          "semanticType": "div"
                        }
                      },
                      {
                        "type": "element",
                        "content": {
                          "elementType": "component",
                          "dependency": {
                            "type": "local"
                          },
                          "referencedStyles": {},
                          "abilities": {},
                          "attrs": {
                            "rootClassName": {
                              "type": "comp-style",
                              "content": "rootClassName"
                            }
                          },
                          "children": [],
                          "semanticType": "Footer"
                        }
                      }
                    ],
                    "semanticType": "div"
                  }
                },
                "value": "Landing Page",
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "route"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "components": {
      "SolidButton": {
        "propDefinitions": {
          "button": {
            "id": "705b51b0-98ca-441b-af6b-cf0902dbec83",
            "defaultValue": "Button",
            "type": "string"
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "container",
            "referencedStyles": {},
            "abilities": {},
            "style": {
              "display": {
                "type": "static",
                "content": "flex"
              },
              "position": {
                "type": "static",
                "content": "relative"
              }
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "button",
                  "referencedStyles": {
                    "13e16e88-6165-485a-97fd-5e4ee1210ca6": {
                      "id": "13e16e88-6165-485a-97fd-5e4ee1210ca6",
                      "type": "style-map",
                      "content": {
                        "mapType": "project-referenced",
                        "referenceId": "button"
                      }
                    },
                    "2318f5ab-fcd5-41ff-9a00-2f541be12bbd": {
                      "type": "style-map",
                      "content": {
                        "mapType": "project-referenced",
                        "referenceId": "button"
                      }
                    }
                  },
                  "abilities": {},
                  "style": {
                    "color": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "token",
                        "id": "--dl-color-gray-white"
                      }
                    },
                    "border": {
                      "type": "static",
                      "content": "none"
                    },
                    "paddingTop": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "token",
                        "id": "--dl-space-space-halfunit"
                      }
                    },
                    "paddingLeft": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "token",
                        "id": "--dl-space-space-doubleunit"
                      }
                    },
                    "borderRadius": {
                      "type": "static",
                      "content": "50px"
                    },
                    "paddingRight": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "token",
                        "id": "--dl-space-space-doubleunit"
                      }
                    },
                    "paddingBottom": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "token",
                        "id": "--dl-space-space-halfunit"
                      }
                    },
                    "backgroundColor": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "token",
                        "id": "--dl-color-primary-100"
                      }
                    }
                  },
                  "children": [
                    {
                      "type": "dynamic",
                      "content": {
                        "id": "button",
                        "referenceType": "prop"
                      }
                    }
                  ]
                }
              }
            ],
            "semanticType": "div"
          }
        },
        "name": "SolidButton",
        "styleSetDefinitions": {}
      },
      "OutlineButton": {
        "propDefinitions": {
          "button1": {
            "id": "705b51b0-98ca-441b-af6b-cf0902dbec83",
            "defaultValue": "Button",
            "type": "string"
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "container",
            "referencedStyles": {},
            "abilities": {},
            "style": {
              "display": {
                "type": "static",
                "content": "flex"
              },
              "position": {
                "type": "static",
                "content": "relative"
              }
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "button",
                  "referencedStyles": {
                    "13e16e88-6165-485a-97fd-5e4ee1210ca6": {
                      "id": "13e16e88-6165-485a-97fd-5e4ee1210ca6",
                      "type": "style-map",
                      "content": {
                        "mapType": "project-referenced",
                        "referenceId": "button"
                      }
                    },
                    "b3f2796d-b268-4736-a04f-de8b6dd42d60": {
                      "type": "style-map",
                      "content": {
                        "mapType": "project-referenced",
                        "referenceId": "button"
                      }
                    }
                  },
                  "abilities": {},
                  "style": {
                    "color": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "token",
                        "id": "--dl-color-gray-black"
                      }
                    },
                    "paddingTop": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "token",
                        "id": "--dl-space-space-unit"
                      }
                    },
                    "borderColor": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "token",
                        "id": "--dl-color-primary-100"
                      }
                    },
                    "borderWidth": {
                      "type": "static",
                      "content": "1px"
                    },
                    "paddingLeft": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "token",
                        "id": "--dl-space-space-doubleunit"
                      }
                    },
                    "borderRadius": {
                      "type": "static",
                      "content": "50px"
                    },
                    "paddingRight": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "token",
                        "id": "--dl-space-space-doubleunit"
                      }
                    },
                    "paddingBottom": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "token",
                        "id": "--dl-space-space-unit"
                      }
                    },
                    "backgroundColor": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "token",
                        "id": "--dl-color-gray-white"
                      }
                    }
                  },
                  "children": [
                    {
                      "type": "dynamic",
                      "content": {
                        "id": "button1",
                        "referenceType": "prop"
                      }
                    }
                  ]
                }
              }
            ],
            "semanticType": "div"
          }
        },
        "name": "OutlineButton",
        "styleSetDefinitions": {}
      },
      "PlaceCard": {
        "propDefinitions": {
          "image": {
            "id": "0a4c236c-950a-4e02-aa3e-3a3de90a88d2",
            "defaultValue": "https://images.unsplash.com/photo-1514924013411-cbf25faa35bb?ixlib=rb-1.2.1&q=85&fm=jpg&crop=entropy&cs=srgb&w=1000",
            "type": "string"
          },
          "image_alt": {
            "id": "3bbfc089-c103-48c9-8111-837ad65a8b23",
            "defaultValue": "image",
            "type": "string"
          },
          "city": {
            "id": "3e6d20fc-a2e2-4ad4-be1d-728f70fdbc81",
            "defaultValue": "City Name",
            "type": "string"
          },
          "description": {
            "id": "7f96ada3-8798-458a-ab59-3b4f229278f3",
            "defaultValue": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna.",
            "type": "string"
          },
          "rootClassName": {
            "id": "7770853c-8dc2-408d-ab1b-a5cdbdf4cd9b",
            "defaultValue": "",
            "type": "string"
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "container",
            "referencedStyles": {
              "a8908330-41f6-43f2-b76b-8357b49e6657": {
                "type": "style-map",
                "content": {
                  "conditions": [
                    {
                      "maxWidth": 479,
                      "conditionType": "screen-size"
                    }
                  ],
                  "mapType": "inlined",
                  "styles": {
                    "width": {
                      "type": "static",
                      "content": "300px"
                    }
                  }
                }
              },
              "a8c63670-d114-4574-9ef3-cafa20a9d99e": {
                "type": "style-map",
                "content": {
                  "conditions": [
                    {
                      "maxWidth": 767,
                      "conditionType": "screen-size"
                    }
                  ],
                  "mapType": "inlined",
                  "styles": {
                    "width": {
                      "type": "static",
                      "content": "200px"
                    }
                  }
                }
              },
              "f61c994c-75cc-428f-bfcb-da118ff751c8": {
                "type": "style-map",
                "content": {
                  "mapType": "component-referenced",
                  "content": {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "prop",
                      "id": "rootClassName"
                    }
                  }
                }
              }
            },
            "abilities": {},
            "style": {
              "width": {
                "type": "static",
                "content": "300px"
              },
              "display": {
                "type": "static",
                "content": "flex"
              },
              "alignItems": {
                "type": "static",
                "content": "center"
              },
              "flexDirection": {
                "type": "static",
                "content": "column"
              }
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "image",
                  "referencedStyles": {},
                  "abilities": {},
                  "attrs": {
                    "alt": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "prop",
                        "id": "image_alt"
                      }
                    },
                    "src": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "prop",
                        "id": "image"
                      }
                    }
                  },
                  "style": {
                    "width": {
                      "type": "static",
                      "content": "100%"
                    },
                    "height": {
                      "type": "static",
                      "content": "250px"
                    },
                    "objectFit": {
                      "type": "static",
                      "content": "cover"
                    },
                    "borderRadius": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "token",
                        "id": "--dl-radius-radius-radius4"
                      }
                    },
                    "borderTopLeftRadius": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "token",
                        "id": "--dl-radius-radius-radius8"
                      }
                    },
                    "borderTopRightRadius": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "token",
                        "id": "--dl-radius-radius-radius8"
                      }
                    }
                  },
                  "children": []
                }
              },
              {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "referencedStyles": {},
                  "abilities": {},
                  "style": {
                    "width": {
                      "type": "static",
                      "content": "100%"
                    },
                    "display": {
                      "type": "static",
                      "content": "flex"
                    },
                    "padding": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "token",
                        "id": "--dl-space-space-unit"
                      }
                    },
                    "alignItems": {
                      "type": "static",
                      "content": "center"
                    },
                    "flexDirection": {
                      "type": "static",
                      "content": "column"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "text",
                        "referencedStyles": {},
                        "abilities": {},
                        "style": {
                          "fontSize": {
                            "type": "static",
                            "content": "20px"
                          },
                          "fontStyle": {
                            "type": "static",
                            "content": "normal"
                          },
                          "fontWeight": {
                            "type": "static",
                            "content": "700"
                          },
                          "paddingBottom": {
                            "type": "dynamic",
                            "content": {
                              "referenceType": "token",
                              "id": "--dl-space-space-halfunit"
                            }
                          }
                        },
                        "children": [
                          {
                            "type": "dynamic",
                            "content": {
                              "id": "city",
                              "referenceType": "prop"
                            }
                          }
                        ],
                        "semanticType": "span"
                      }
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "text",
                        "referencedStyles": {},
                        "abilities": {},
                        "style": {
                          "fontSize": {
                            "type": "static",
                            "content": "12px"
                          },
                          "maxWidth": {
                            "type": "static",
                            "content": "250px"
                          },
                          "marginBottom": {
                            "type": "dynamic",
                            "content": {
                              "referenceType": "token",
                              "id": "--dl-space-space-doubleunit"
                            }
                          }
                        },
                        "children": [
                          {
                            "type": "dynamic",
                            "content": {
                              "id": "description",
                              "referenceType": "prop"
                            }
                          }
                        ],
                        "semanticType": "span"
                      }
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "dependency": {
                          "type": "local"
                        },
                        "referencedStyles": {},
                        "abilities": {},
                        "attrs": {
                          "button1": {
                            "type": "static",
                            "content": "Discover place"
                          }
                        },
                        "children": [],
                        "semanticType": "OutlineButton"
                      }
                    }
                  ],
                  "semanticType": "div"
                }
              }
            ],
            "semanticType": "div"
          }
        },
        "name": "PlaceCard",
        "styleSetDefinitions": {
          "rootClassName": {
            "content": {
              "margin": {
                "type": "dynamic",
                "content": {
                  "referenceType": "token",
                  "id": "--dl-space-space-doubleunit"
                }
              }
            },
            "conditions": [],
            "type": "reusable-component-style-map"
          },
          "rootClassName1": {
            "content": {
              "margin": {
                "type": "dynamic",
                "content": {
                  "referenceType": "token",
                  "id": "--dl-space-space-doubleunit"
                }
              }
            },
            "conditions": [],
            "type": "reusable-component-style-map"
          }
        }
      },
      "Footer": {
        "propDefinitions": {
          "Logo": {
            "id": "f83fd7b2-c628-49b8-8590-43b318017656",
            "defaultValue": "Travel",
            "type": "string"
          },
          "text": {
            "id": "9a5adf47-0f62-42ae-85d7-5c10856992d1",
            "defaultValue": "Follow us on ",
            "type": "string"
          },
          "text1": {
            "id": "d67fc66b-24f8-453f-82b2-b3e0f5951113",
            "defaultValue": "Tour packages",
            "type": "string"
          },
          "link_text": {
            "id": "dc3fd425-68a3-4473-928a-a9b880afa9a4",
            "defaultValue": "https://example.com",
            "type": "string"
          },
          "text2": {
            "id": "22955f32-94e3-42c2-9f08-59997ec44440",
            "defaultValue": "Personalized offers",
            "type": "string"
          },
          "link_text1": {
            "id": "36b2d25f-e294-44f3-bbd1-f34d7ad0dae0",
            "defaultValue": "https://example.com",
            "type": "string"
          },
          "text3": {
            "id": "2ff0c0db-f918-47a5-b6d4-4ef23d07d17b",
            "defaultValue": "Special deals",
            "type": "string"
          },
          "link_text2": {
            "id": "9173a493-30ee-4be9-936d-496bbb56c582",
            "defaultValue": "https://example.com",
            "type": "string"
          },
          "Link": {
            "id": "257c7185-535e-489b-99a3-daf0bd6d4f50",
            "defaultValue": "Summer holiday ",
            "type": "string"
          },
          "link_Link": {
            "id": "877d70ab-fba2-49a6-812d-919c3c9c9d6a",
            "defaultValue": "https://example.com",
            "type": "string"
          },
          "text4": {
            "id": "093cecde-53f7-481b-8351-16a0523b0903",
            "defaultValue": "About us",
            "type": "string"
          },
          "link_text3": {
            "id": "b5da7b64-b7f1-49fa-8929-64c6070258d6",
            "defaultValue": "https://example.com",
            "type": "string"
          },
          "text5": {
            "id": "8cfc323d-74cb-46be-bb86-e02ecbff6814",
            "defaultValue": "FAQ",
            "type": "string"
          },
          "link_text4": {
            "id": "4cf46bdb-8d0e-42d5-bad1-145cbc5b5fc3",
            "defaultValue": "https://example.com",
            "type": "string"
          },
          "text6": {
            "id": "4218e132-caf7-41dc-a2fd-912112ebb0a3",
            "defaultValue": "Terms and conditions",
            "type": "string"
          },
          "link_text5": {
            "id": "6e10dca0-126d-461f-894f-58c510487c42",
            "defaultValue": "https://example.com",
            "type": "string"
          },
          "text7": {
            "id": "c7f81a8f-dab7-4fb6-b046-7c6216008f07",
            "defaultValue": "Contact",
            "type": "string"
          },
          "link_text6": {
            "id": "ea5c615e-115c-4f5b-a917-5ae4aa59ba48",
            "defaultValue": "https://example.com",
            "type": "string"
          },
          "rootClassName": {
            "id": "ee51db1f-05b4-47e0-95cc-11e19f2737a8",
            "defaultValue": "",
            "type": "string"
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "container",
            "name": "Footer",
            "referencedStyles": {
              "babe4813-a369-44d1-9fe9-b9c874956059": {
                "type": "style-map",
                "content": {
                  "mapType": "component-referenced",
                  "content": {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "prop",
                      "id": "rootClassName"
                    }
                  }
                }
              }
            },
            "abilities": {},
            "style": {
              "color": {
                "type": "dynamic",
                "content": {
                  "referenceType": "token",
                  "id": "--dl-color-gray-white"
                }
              },
              "width": {
                "type": "static",
                "content": "100%"
              },
              "display": {
                "type": "static",
                "content": "flex"
              },
              "padding": {
                "type": "dynamic",
                "content": {
                  "referenceType": "token",
                  "id": "--dl-space-space-tripleunit"
                }
              },
              "alignItems": {
                "type": "static",
                "content": "center"
              },
              "flexDirection": {
                "type": "static",
                "content": "row"
              },
              "justifyContent": {
                "type": "static",
                "content": "center"
              },
              "backgroundColor": {
                "type": "dynamic",
                "content": {
                  "referenceType": "token",
                  "id": "--dl-color-gray-black"
                }
              }
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "name": "Menu",
                  "referencedStyles": {
                    "ffb7e275-3104-4945-a960-934473da98c7": {
                      "type": "style-map",
                      "content": {
                        "conditions": [
                          {
                            "maxWidth": 767,
                            "conditionType": "screen-size"
                          }
                        ],
                        "mapType": "inlined",
                        "styles": {
                          "flexDirection": {
                            "type": "static",
                            "content": "column"
                          }
                        }
                      }
                    }
                  },
                  "abilities": {},
                  "style": {
                    "width": {
                      "type": "static",
                      "content": "100%"
                    },
                    "display": {
                      "type": "static",
                      "content": "flex"
                    },
                    "maxWidth": {
                      "type": "static",
                      "content": "1000px"
                    },
                    "alignItems": {
                      "type": "static",
                      "content": "center"
                    },
                    "flexDirection": {
                      "type": "static",
                      "content": "row"
                    },
                    "justifyContent": {
                      "type": "static",
                      "content": "space-between"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "text",
                        "name": "Logo",
                        "referencedStyles": {},
                        "abilities": {},
                        "children": [
                          {
                            "type": "dynamic",
                            "content": {
                              "referenceType": "prop",
                              "id": "Logo"
                            }
                          }
                        ],
                        "semanticType": "h1"
                      }
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "container",
                        "name": "Links-container",
                        "referencedStyles": {
                          "0c0c8b77-cace-4ee4-9f9f-1cdb2fcc811b": {
                            "type": "style-map",
                            "content": {
                              "conditions": [
                                {
                                  "maxWidth": 767,
                                  "conditionType": "screen-size"
                                }
                              ],
                              "mapType": "inlined",
                              "styles": {
                                "marginTop": {
                                  "type": "dynamic",
                                  "content": {
                                    "referenceType": "token",
                                    "id": "--dl-space-space-tripleunit"
                                  }
                                },
                                "marginBottom": {
                                  "type": "dynamic",
                                  "content": {
                                    "referenceType": "token",
                                    "id": "--dl-space-space-tripleunit"
                                  }
                                },
                                "justifyContent": {
                                  "type": "static",
                                  "content": "space-between"
                                }
                              }
                            }
                          },
                          "9ddfca18-c657-4047-836a-4cbd368be926": {
                            "type": "style-map",
                            "content": {
                              "conditions": [
                                {
                                  "maxWidth": 479,
                                  "conditionType": "screen-size"
                                }
                              ],
                              "mapType": "inlined",
                              "styles": {
                                "marginTop": {
                                  "type": "dynamic",
                                  "content": {
                                    "referenceType": "token",
                                    "id": "--dl-space-space-doubleunit"
                                  }
                                },
                                "alignItems": {
                                  "type": "static",
                                  "content": "flex-start"
                                },
                                "justifyContent": {
                                  "type": "static",
                                  "content": "flex-start"
                                }
                              }
                            }
                          }
                        },
                        "abilities": {},
                        "style": {
                          "display": {
                            "type": "static",
                            "content": "flex"
                          },
                          "alignItems": {
                            "type": "static",
                            "content": "center"
                          },
                          "flexDirection": {
                            "type": "static",
                            "content": "row"
                          },
                          "justifyContent": {
                            "type": "static",
                            "content": "space-between"
                          }
                        },
                        "children": [
                          {
                            "type": "element",
                            "content": {
                              "elementType": "container",
                              "referencedStyles": {
                                "4152f201-1be5-4384-958a-f7bebccf329e": {
                                  "type": "style-map",
                                  "content": {
                                    "conditions": [
                                      {
                                        "maxWidth": 767,
                                        "conditionType": "screen-size"
                                      }
                                    ],
                                    "mapType": "inlined",
                                    "styles": {
                                      "marginLeft": {
                                        "type": "static",
                                        "content": "0px"
                                      }
                                    }
                                  }
                                }
                              },
                              "abilities": {},
                              "style": {
                                "display": {
                                  "type": "static",
                                  "content": "flex"
                                },
                                "alignItems": {
                                  "type": "static",
                                  "content": "flex-start"
                                },
                                "marginLeft": {
                                  "type": "static",
                                  "content": "100px"
                                },
                                "flexDirection": {
                                  "type": "static",
                                  "content": "column"
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "text",
                                    "referencedStyles": {
                                      "ea1dfc68-0fd1-49cb-8a05-34a869add61e": {
                                        "type": "style-map",
                                        "content": {
                                          "conditions": [
                                            {
                                              "maxWidth": 479,
                                              "conditionType": "screen-size"
                                            }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                            "marginBottom": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "token",
                                                "id": "--dl-space-space-halfunit"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "abilities": {
                                      "link": {
                                        "type": "url",
                                        "content": {
                                          "url": {
                                            "id": "b23995b0-6464-4768-afde-3b34965f99bd",
                                            "type": "dynamic",
                                            "content": {
                                              "referenceType": "prop",
                                              "id": "link_text"
                                            }
                                          },
                                          "newTab": true
                                        }
                                      }
                                    },
                                    "style": {
                                      "marginBottom": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-unit"
                                        }
                                      },
                                      "textDecoration": {
                                        "type": "static",
                                        "content": "none"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "prop",
                                          "id": "text1"
                                        }
                                      }
                                    ],
                                    "semanticType": "span"
                                  }
                                },
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "text",
                                    "referencedStyles": {
                                      "a0b6be7f-8683-4c85-81b2-4d55318219fc": {
                                        "type": "style-map",
                                        "content": {
                                          "conditions": [
                                            {
                                              "maxWidth": 479,
                                              "conditionType": "screen-size"
                                            }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                            "marginBottom": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "token",
                                                "id": "--dl-space-space-halfunit"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "abilities": {
                                      "link": {
                                        "type": "url",
                                        "content": {
                                          "url": {
                                            "id": "05a0e696-cc85-4d30-bb78-a4945c18d52f",
                                            "type": "dynamic",
                                            "content": {
                                              "referenceType": "prop",
                                              "id": "link_text1"
                                            }
                                          },
                                          "newTab": true
                                        }
                                      }
                                    },
                                    "style": {
                                      "marginBottom": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-unit"
                                        }
                                      },
                                      "textDecoration": {
                                        "type": "static",
                                        "content": "none"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "prop",
                                          "id": "text2"
                                        }
                                      }
                                    ],
                                    "semanticType": "span"
                                  }
                                },
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "text",
                                    "referencedStyles": {
                                      "3f0537f0-0846-48da-afa4-f37d7e5336b5": {
                                        "type": "style-map",
                                        "content": {
                                          "conditions": [
                                            {
                                              "maxWidth": 479,
                                              "conditionType": "screen-size"
                                            }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                            "marginBottom": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "token",
                                                "id": "--dl-space-space-halfunit"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "abilities": {
                                      "link": {
                                        "type": "url",
                                        "content": {
                                          "url": {
                                            "id": "6a62b95c-bb22-4593-a949-f7f6835cb34b",
                                            "type": "dynamic",
                                            "content": {
                                              "referenceType": "prop",
                                              "id": "link_text2"
                                            }
                                          },
                                          "newTab": true
                                        }
                                      }
                                    },
                                    "style": {
                                      "marginBottom": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-unit"
                                        }
                                      },
                                      "textDecoration": {
                                        "type": "static",
                                        "content": "none"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "prop",
                                          "id": "text3"
                                        }
                                      }
                                    ],
                                    "semanticType": "span"
                                  }
                                },
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "text",
                                    "name": "Link",
                                    "referencedStyles": {
                                      "b4863836-3dbb-4730-b74a-b99cb0bf3f65": {
                                        "type": "style-map",
                                        "content": {
                                          "conditions": [
                                            {
                                              "maxWidth": 479,
                                              "conditionType": "screen-size"
                                            }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                            "marginBottom": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "token",
                                                "id": "--dl-space-space-halfunit"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "abilities": {
                                      "link": {
                                        "type": "url",
                                        "content": {
                                          "url": {
                                            "id": "2c5f0810-1d80-41c4-8189-2df0af3e5435",
                                            "type": "dynamic",
                                            "content": {
                                              "referenceType": "prop",
                                              "id": "link_Link"
                                            }
                                          },
                                          "newTab": true
                                        }
                                      }
                                    },
                                    "style": {
                                      "textDecoration": {
                                        "type": "static",
                                        "content": "none"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "prop",
                                          "id": "Link"
                                        }
                                      }
                                    ],
                                    "semanticType": "span"
                                  }
                                }
                              ],
                              "semanticType": "div"
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "container",
                              "referencedStyles": {
                                "ffeb4a8b-5415-41bb-8385-1078cdc1c92a": {
                                  "type": "style-map",
                                  "content": {
                                    "conditions": [
                                      {
                                        "maxWidth": 479,
                                        "conditionType": "screen-size"
                                      }
                                    ],
                                    "mapType": "inlined",
                                    "styles": {
                                      "height": {
                                        "type": "static",
                                        "content": "100%"
                                      },
                                      "alignItems": {
                                        "type": "static",
                                        "content": "flex-start"
                                      },
                                      "marginLeft": {
                                        "type": "static",
                                        "content": "50px"
                                      }
                                    }
                                  }
                                }
                              },
                              "abilities": {},
                              "style": {
                                "display": {
                                  "type": "static",
                                  "content": "flex"
                                },
                                "alignItems": {
                                  "type": "static",
                                  "content": "flex-start"
                                },
                                "marginLeft": {
                                  "type": "static",
                                  "content": "100px"
                                },
                                "flexDirection": {
                                  "type": "static",
                                  "content": "column"
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "text",
                                    "referencedStyles": {
                                      "c02e2e91-922a-4a76-8600-4a744ade8343": {
                                        "type": "style-map",
                                        "content": {
                                          "conditions": [
                                            {
                                              "maxWidth": 479,
                                              "conditionType": "screen-size"
                                            }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                            "marginBottom": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "token",
                                                "id": "--dl-space-space-halfunit"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "abilities": {
                                      "link": {
                                        "type": "url",
                                        "content": {
                                          "url": {
                                            "id": "bebc3a73-c150-404c-9ce3-0aa203847933",
                                            "type": "dynamic",
                                            "content": {
                                              "referenceType": "prop",
                                              "id": "link_text3"
                                            }
                                          },
                                          "newTab": true
                                        }
                                      }
                                    },
                                    "style": {
                                      "marginBottom": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-unit"
                                        }
                                      },
                                      "textDecoration": {
                                        "type": "static",
                                        "content": "none"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "prop",
                                          "id": "text4"
                                        }
                                      }
                                    ],
                                    "semanticType": "span"
                                  }
                                },
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "text",
                                    "referencedStyles": {
                                      "ccca9fac-af8e-42db-89d4-0b4eea06416b": {
                                        "type": "style-map",
                                        "content": {
                                          "conditions": [
                                            {
                                              "maxWidth": 479,
                                              "conditionType": "screen-size"
                                            }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                            "marginBottom": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "token",
                                                "id": "--dl-space-space-halfunit"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "abilities": {
                                      "link": {
                                        "type": "url",
                                        "content": {
                                          "url": {
                                            "id": "dccc65eb-1a24-4f61-b3c8-383dfec80ca3",
                                            "type": "dynamic",
                                            "content": {
                                              "referenceType": "prop",
                                              "id": "link_text4"
                                            }
                                          },
                                          "newTab": true
                                        }
                                      }
                                    },
                                    "style": {
                                      "marginBottom": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-unit"
                                        }
                                      },
                                      "textDecoration": {
                                        "type": "static",
                                        "content": "none"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "prop",
                                          "id": "text5"
                                        }
                                      }
                                    ],
                                    "semanticType": "span"
                                  }
                                },
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "text",
                                    "referencedStyles": {
                                      "22504323-53da-46ea-845e-aec10acfb322": {
                                        "type": "style-map",
                                        "content": {
                                          "conditions": [
                                            {
                                              "maxWidth": 479,
                                              "conditionType": "screen-size"
                                            }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                            "marginBottom": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "token",
                                                "id": "--dl-space-space-halfunit"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "abilities": {
                                      "link": {
                                        "type": "url",
                                        "content": {
                                          "url": {
                                            "id": "c06b1ca9-b002-4979-83f8-ca625013bdb9",
                                            "type": "dynamic",
                                            "content": {
                                              "referenceType": "prop",
                                              "id": "link_text5"
                                            }
                                          },
                                          "newTab": true
                                        }
                                      }
                                    },
                                    "style": {
                                      "marginBottom": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-unit"
                                        }
                                      },
                                      "textDecoration": {
                                        "type": "static",
                                        "content": "none"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "prop",
                                          "id": "text6"
                                        }
                                      }
                                    ],
                                    "semanticType": "span"
                                  }
                                },
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "text",
                                    "referencedStyles": {
                                      "cb98a5a0-fce4-493e-b18c-643b27e291e6": {
                                        "type": "style-map",
                                        "content": {
                                          "conditions": [
                                            {
                                              "maxWidth": 479,
                                              "conditionType": "screen-size"
                                            }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                            "marginBottom": {
                                              "type": "dynamic",
                                              "content": {
                                                "referenceType": "token",
                                                "id": "--dl-space-space-halfunit"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "abilities": {
                                      "link": {
                                        "type": "url",
                                        "content": {
                                          "url": {
                                            "id": "63b1ad13-cded-4914-bd68-76c8c8c2ad0e",
                                            "type": "dynamic",
                                            "content": {
                                              "referenceType": "prop",
                                              "id": "link_text6"
                                            }
                                          },
                                          "newTab": true
                                        }
                                      }
                                    },
                                    "style": {
                                      "textDecoration": {
                                        "type": "static",
                                        "content": "none"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "prop",
                                          "id": "text7"
                                        }
                                      }
                                    ],
                                    "semanticType": "span"
                                  }
                                }
                              ],
                              "semanticType": "div"
                            }
                          }
                        ],
                        "semanticType": "div"
                      }
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "container",
                        "name": "Follow-container",
                        "referencedStyles": {
                          "97b38dec-7526-453d-826b-d0aa8b3e6f9c": {
                            "type": "style-map",
                            "content": {
                              "conditions": [
                                {
                                  "maxWidth": 479,
                                  "conditionType": "screen-size"
                                }
                              ],
                              "mapType": "inlined",
                              "styles": {
                                "marginLeft": {
                                  "type": "static",
                                  "content": "0px"
                                }
                              }
                            }
                          }
                        },
                        "abilities": {},
                        "style": {
                          "display": {
                            "type": "static",
                            "content": "flex"
                          },
                          "alignItems": {
                            "type": "static",
                            "content": "center"
                          },
                          "marginLeft": {
                            "type": "static",
                            "content": "50px"
                          },
                          "flexDirection": {
                            "type": "static",
                            "content": "column"
                          },
                          "justifyContent": {
                            "type": "static",
                            "content": "space-between"
                          }
                        },
                        "children": [
                          {
                            "type": "element",
                            "content": {
                              "elementType": "text",
                              "referencedStyles": {},
                              "abilities": {},
                              "style": {
                                "paddingBottom": {
                                  "type": "dynamic",
                                  "content": {
                                    "referenceType": "token",
                                    "id": "--dl-space-space-halfunit"
                                  }
                                }
                              },
                              "children": [
                                {
                                  "type": "dynamic",
                                  "content": {
                                    "referenceType": "prop",
                                    "id": "text"
                                  }
                                }
                              ],
                              "semanticType": "span"
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "container",
                              "name": "Icons-container",
                              "referencedStyles": {},
                              "abilities": {},
                              "style": {
                                "width": {
                                  "type": "static",
                                  "content": "100px"
                                },
                                "display": {
                                  "type": "static",
                                  "content": "flex"
                                },
                                "alignItems": {
                                  "type": "static",
                                  "content": "flex-start"
                                },
                                "flexDirection": {
                                  "type": "static",
                                  "content": "row"
                                },
                                "justifyContent": {
                                  "type": "static",
                                  "content": "space-between"
                                }
                              },
                              "children": [
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "icon",
                                    "referencedStyles": {},
                                    "abilities": {
                                      "link": {
                                        "type": "url",
                                        "content": {
                                          "url": {
                                            "type": "static",
                                            "content": "https://instagram.com"
                                          },
                                          "newTab": true
                                        }
                                      }
                                    },
                                    "attrs": {
                                      "viewBox": {
                                        "type": "static",
                                        "content": "0 0 877.7142857142857 1024"
                                      }
                                    },
                                    "style": {
                                      "fill": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "token",
                                          "id": "--dl-color-gray-white"
                                        }
                                      },
                                      "width": {
                                        "type": "static",
                                        "content": "24px"
                                      },
                                      "height": {
                                        "type": "static",
                                        "content": "24px"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "icon",
                                          "referencedStyles": {},
                                          "abilities": {},
                                          "attrs": {
                                            "d": {
                                              "type": "static",
                                              "content": "M585.143 512c0-80.571-65.714-146.286-146.286-146.286s-146.286 65.714-146.286 146.286 65.714 146.286 146.286 146.286 146.286-65.714 146.286-146.286zM664 512c0 124.571-100.571 225.143-225.143 225.143s-225.143-100.571-225.143-225.143 100.571-225.143 225.143-225.143 225.143 100.571 225.143 225.143zM725.714 277.714c0 29.143-23.429 52.571-52.571 52.571s-52.571-23.429-52.571-52.571 23.429-52.571 52.571-52.571 52.571 23.429 52.571 52.571zM438.857 152c-64 0-201.143-5.143-258.857 17.714-20 8-34.857 17.714-50.286 33.143s-25.143 30.286-33.143 50.286c-22.857 57.714-17.714 194.857-17.714 258.857s-5.143 201.143 17.714 258.857c8 20 17.714 34.857 33.143 50.286s30.286 25.143 50.286 33.143c57.714 22.857 194.857 17.714 258.857 17.714s201.143 5.143 258.857-17.714c20-8 34.857-17.714 50.286-33.143s25.143-30.286 33.143-50.286c22.857-57.714 17.714-194.857 17.714-258.857s5.143-201.143-17.714-258.857c-8-20-17.714-34.857-33.143-50.286s-30.286-25.143-50.286-33.143c-57.714-22.857-194.857-17.714-258.857-17.714zM877.714 512c0 60.571 0.571 120.571-2.857 181.143-3.429 70.286-19.429 132.571-70.857 184s-113.714 67.429-184 70.857c-60.571 3.429-120.571 2.857-181.143 2.857s-120.571 0.571-181.143-2.857c-70.286-3.429-132.571-19.429-184-70.857s-67.429-113.714-70.857-184c-3.429-60.571-2.857-120.571-2.857-181.143s-0.571-120.571 2.857-181.143c3.429-70.286 19.429-132.571 70.857-184s113.714-67.429 184-70.857c60.571-3.429 120.571-2.857 181.143-2.857s120.571-0.571 181.143 2.857c70.286 3.429 132.571 19.429 184 70.857s67.429 113.714 70.857 184c3.429 60.571 2.857 120.571 2.857 181.143z"
                                            }
                                          },
                                          "children": [],
                                          "semanticType": "path"
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "icon",
                                    "referencedStyles": {},
                                    "abilities": {
                                      "link": {
                                        "type": "url",
                                        "content": {
                                          "url": {
                                            "type": "static",
                                            "content": "https://facebook.com"
                                          },
                                          "newTab": true
                                        }
                                      }
                                    },
                                    "attrs": {
                                      "viewBox": {
                                        "type": "static",
                                        "content": "0 0 602.2582857142856 1024"
                                      }
                                    },
                                    "style": {
                                      "fill": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "token",
                                          "id": "--dl-color-gray-white"
                                        }
                                      },
                                      "width": {
                                        "type": "static",
                                        "content": "24px"
                                      },
                                      "height": {
                                        "type": "static",
                                        "content": "24px"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "icon",
                                          "referencedStyles": {},
                                          "abilities": {},
                                          "attrs": {
                                            "d": {
                                              "type": "static",
                                              "content": "M548 6.857v150.857h-89.714c-70.286 0-83.429 33.714-83.429 82.286v108h167.429l-22.286 169.143h-145.143v433.714h-174.857v-433.714h-145.714v-169.143h145.714v-124.571c0-144.571 88.571-223.429 217.714-223.429 61.714 0 114.857 4.571 130.286 6.857z"
                                            }
                                          },
                                          "children": [],
                                          "semanticType": "path"
                                        }
                                      }
                                    ]
                                  }
                                },
                                {
                                  "type": "element",
                                  "content": {
                                    "elementType": "icon",
                                    "referencedStyles": {},
                                    "abilities": {
                                      "link": {
                                        "type": "url",
                                        "content": {
                                          "url": {
                                            "type": "static",
                                            "content": "https://twitter.com"
                                          },
                                          "newTab": true
                                        }
                                      }
                                    },
                                    "attrs": {
                                      "viewBox": {
                                        "type": "static",
                                        "content": "0 0 950.8571428571428 1024"
                                      }
                                    },
                                    "style": {
                                      "fill": {
                                        "type": "dynamic",
                                        "content": {
                                          "referenceType": "token",
                                          "id": "--dl-color-gray-white"
                                        }
                                      },
                                      "width": {
                                        "type": "static",
                                        "content": "24px"
                                      },
                                      "height": {
                                        "type": "static",
                                        "content": "24px"
                                      }
                                    },
                                    "children": [
                                      {
                                        "type": "element",
                                        "content": {
                                          "elementType": "icon",
                                          "referencedStyles": {},
                                          "abilities": {},
                                          "attrs": {
                                            "d": {
                                              "type": "static",
                                              "content": "M925.714 233.143c-25.143 36.571-56.571 69.143-92.571 95.429 0.571 8 0.571 16 0.571 24 0 244-185.714 525.143-525.143 525.143-104.571 0-201.714-30.286-283.429-82.857 14.857 1.714 29.143 2.286 44.571 2.286 86.286 0 165.714-29.143 229.143-78.857-81.143-1.714-149.143-54.857-172.571-128 11.429 1.714 22.857 2.857 34.857 2.857 16.571 0 33.143-2.286 48.571-6.286-84.571-17.143-148-91.429-148-181.143v-2.286c24.571 13.714 53.143 22.286 83.429 23.429-49.714-33.143-82.286-89.714-82.286-153.714 0-34.286 9.143-65.714 25.143-93.143 90.857 112 227.429 185.143 380.571 193.143-2.857-13.714-4.571-28-4.571-42.286 0-101.714 82.286-184.571 184.571-184.571 53.143 0 101.143 22.286 134.857 58.286 41.714-8 81.714-23.429 117.143-44.571-13.714 42.857-42.857 78.857-81.143 101.714 37.143-4 73.143-14.286 106.286-28.571z"
                                            }
                                          },
                                          "children": [],
                                          "semanticType": "path"
                                        }
                                      }
                                    ]
                                  }
                                }
                              ],
                              "semanticType": "div"
                            }
                          }
                        ],
                        "semanticType": "div"
                      }
                    }
                  ],
                  "semanticType": "div"
                }
              }
            ],
            "semanticType": "div"
          }
        },
        "name": "Footer",
        "styleSetDefinitions": {
          "rootClassName": {
            "content": {
              "marginTop": {
                "type": "dynamic",
                "content": {
                  "referenceType": "token",
                  "id": "--dl-space-space-doubleunit"
                }
              }
            },
            "conditions": [],
            "type": "reusable-component-style-map"
          }
        }
      }
    }
  }
'''
'''--- examples/test-samples/component-html.json ---
{
  "name": "Navbar",
  "node": {
    "type": "element",
    "content": {
      "elementType": "nav",
      "style": {
        "border-bottom": {
          "type": "static",
          "content": "1px solid rgba(0,0,0,0.25)"
        }
      },
      "children": [
        {
            "type": "element",
            "content": {
              "elementType": "component",
              "semanticType": "sample",
              "dependency": {
                "type": "local"
              }
            }
        },
        {
          "type": "element",
          "content": {
            "elementType": "ul",
            "name": "list-container",
            "style": {
              "list-style": "none",
              "margin": "0px",
              "padding": "0px",
              "display": "flex",
              "font-size": "18px"
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "li",
                  "name": "home-link",
                  "referencedStyles": {
                    "5ee9a8c4855aa926ce281bce": {
                      "id": "5ee9a8c4855aa926ce281bce",
                      "type": "style-map",
                      "content": {
                        "mapType": "inlined",
                        "styles": {
                          "color": {
                            "type": "static",
                            "content": "red"
                          },
                          "border-bottom": "3px solid red",
                          "padding-bottom": "7px"
                        },
                        "conditions": [
                          {
                            "conditionType": "element-state",
                            "content": "hover"
                          }
                        ]
                      }
                    }
                  },
                  "style": {
                    "padding": "10px 20px",
                    "transition": "all .15s ease-in-out",
                    "cursor": "pointer"
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "navlink",
                        "attrs": {
                          "transitionTo": "home"
                        },
                        "children": [
                          "Home"
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "element",
                "content": {
                  "name": "team-link",
                  "elementType": "li",
                  "referencedStyles": {
                    "5ee9a805ad9046338c1115f1": {
                      "id": "5ee9a805ad9046338c1115f1",
                      "type": "style-map",
                      "content": {
                        "mapType": "inlined",
                        "styles": {
                          "color": {
                            "type": "static",
                            "content": "red"
                          },
                          "border-bottom": "3px solid red",
                          "padding-bottom": "7px"
                        },
                        "conditions": [
                          {
                            "conditionType": "element-state",
                            "content": "hover"
                          }
                        ]
                      }
                    }
                  },
                  "style": {
                    "padding": "10px 20px",
                    "transition": "all .15s ease-in-out",
                    "cursor": "pointer"
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "navlink",
                        "attrs": {
                          "transitionTo": "team"
                        },
                        "children": [
                          "Team"
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "element",
                "content": {
                  "elementType": "li",
                  "name": "contact-link",
                  "referencedStyles": {
                    "5ee9a89058cb16c5ae3c69c4": {
                      "id": "5ee9a89058cb16c5ae3c69c4",
                      "type": "style-map",
                      "content": {
                        "mapType": "inlined",
                        "styles": {
                          "color": {
                            "type": "static",
                            "content": "red"
                          },
                          "border-bottom": "3px solid red",
                          "padding-bottom": "7px"
                        },
                        "conditions": [
                          {
                            "conditionType": "element-state",
                            "content": "hover"
                          }
                        ]
                      }
                    }
                  },
                  "style": {
                    "padding": "10px 20px",
                    "transition": "all .15s ease-in-out",
                    "cursor": "pointer"
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "navlink",
                        "attrs": {
                          "transitionTo": "contact-us"
                        },
                        "children": [
                          "Contact Us"
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "element",
          "content": {
            "elementType": "component",
            "semanticType": "sample",
            "attrs": {
              "heading": "Studio"
            },
            "dependency": {
              "type": "local"
            }
          }
        }
      ]
    }
  }
}
'''
'''--- examples/test-samples/component-invalid-sample.json ---
{
  "name": "New UIDL",
  "propDefinitions": {
    "header": {
      "type": "string",
      "defaultValue": "Hello"
    },
    "items": {
      "type": "array",
      "defaultValue": []
    }
  },
  "stateDefinitions": {
    "isVisible": {
      "type": "boolean",
      "defaultValue": true,
      "test":"test"
    }
  },
  "node": {
    "type": "element",
    "content": {
      "elementType": "container",
      "attrs": {
        "data-static-attr": {
          "type": "static",
          "content": "test"
        },
        "data-dynamic-attr": {
          "type": "dynamic",
          "content": {
            "referenceType": "prop",
            "id": "header"
          }
        }
      },
      "children": [
        {
          "type": "element",
          "content": {
            "elementType": "text",
            "children": [
              {
                "type": "static",
                "content": "Hello World!"
              },
              {
                "type": "dynamic",
                "content": {
                  "referenceType": "prop",
                  "id": "header"
                }
              }
            ]
          }
        },
        {
          "type": "repeat",
          "content": {
            "node": {
              "type": "element",
              "content": {
                "elementType": "text",
                "children": [
                  {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "local",
                      "id": "item"
                    }
                  },
                  {
                    "type": "element",
                    "content": {
                      "elementType": "list",
                      "attrs": {
                        "items": {
                          "type": "static",
                          "content": ["angular", "react", "vue"]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "dataSource": {
              "type": "dynamic",
              "content": {
                "referenceType": "prop",
                "id": "items"
              }
            },
            "meta": {
              "useIndex": true,
              "iteratorName": "item"
            }
          }
        },
        {
          "type": "conditional",
          "content": {
            "reference": {
              "type": "dynamic",
              "content": {
                "referenceType": "state",
                "id": "isVisible"
              }
            },
            "value": true,
            "node": {
              "type": "element",
              "content": {
                "elementType": "text",
                "children": [{
                  "type": "static",
                  "content": "Now you see me!"
                }]
              }
            }
          }
        }
      ]
    }
  }
}
'''
'''--- examples/test-samples/component-sample.json ---
{
  "name": "New UIDL",
  "propDefinitions": {
    "header": {
      "type": "string",
      "defaultValue": "Hello"
    },
    "items": {
      "type": "array",
      "defaultValue": []
    }
  },
  "stateDefinitions": {
    "isVisible": {
      "type": "boolean",
      "defaultValue": true
    }
  },
  "node": {
    "type": "element",
    "content": {
      "elementType": "container",
      "attrs": {
        "data-static-attr": {
          "type": "static",
          "content": "test"
        },
        "data-dynamic-attr": {
          "type": "dynamic",
          "content": {
            "referenceType": "prop",
            "id": "header"
          }
        }
      },
      "children": [
        {
          "type": "element",
          "content": {
            "elementType": "text",
            "children": [
              {
                "type": "static",
                "content": "Hello World!"
              },
              {
                "type": "dynamic",
                "content": {
                  "referenceType": "prop",
                  "id": "header"
                }
              },
              {
                "type": "element",
                "content": {
                  "elementType": "button",
                  "events": {
                    "click": [{
                      "type": "stateChange",
                      "modifies": "isVisible",
                      "newState": true
                    }]
                  },
                  "children": [{
                    "type": "static",
                    "content": "Update me!"
                  }]
                }
              }
            ]
          }
        },
        {
          "type": "repeat",
          "content": {
            "node": {
              "type": "element",
              "content": {
                "elementType": "text",
                "children": [
                  {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "local",
                      "id": "item"
                    }
                  },
                  {
                    "type": "element",
                    "content": {
                      "elementType": "list",
                      "attrs": {
                        "items": {
                          "type": "static",
                          "content": ["angular", "react", "vue"]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "dataSource": {
              "type": "dynamic",
              "content": {
                "referenceType": "prop",
                "id": "items"
              }
            },
            "meta": {
              "useIndex": true,
              "iteratorName": "item"
            }
          }
        },
        {
          "type": "conditional",
          "content": {
            "reference": {
              "type": "dynamic",
              "content": {
                "referenceType": "state",
                "id": "isVisible"
              }
            },
            "value": true,
            "node": {
              "type": "element",
              "content": {
                "elementType": "text",
                "children": [{
                  "type": "static",
                  "content": "Now you see me!"
                }]
              }
            }
          }
        }
      ]
    }
  }
}
'''
'''--- examples/test-samples/html-image-use-cases.json ---
{
  "name": "New Project3",
  "globals": {
    "settings": {
      "title": "New Project3",
      "language": "en"
    },
    "assets": [
      {
        "type": "style",
        "content": "html {  line-height: 1.15;}body {  margin: 0;}* {  box-sizing: border-box;  border-width: 0;  border-style: solid;}p,li,ul,pre,div,h1,h2,h3,h4,h5,h6 {  margin: 0;  padding: 0;}button,input,optgroup,select,textarea {  font-family: inherit;  font-size: 100%;  line-height: 1.15;  margin: 0;}button,select {  text-transform: none;}button,[type=\"button\"],[type=\"reset\"],[type=\"submit\"] {  -webkit-appearance: button;}button::-moz-focus-inner,[type=\"button\"]::-moz-focus-inner,[type=\"reset\"]::-moz-focus-inner,[type=\"submit\"]::-moz-focus-inner {  border-style: none;  padding: 0;}button:-moz-focus,[type=\"button\"]:-moz-focus,[type=\"reset\"]:-moz-focus,[type=\"submit\"]:-moz-focus {  outline: 1px dotted ButtonText;}a {  color: inherit;  text-decoration: inherit;}input {  padding: 2px 4px;}img {  display: block;}"
      },
      {
        "type": "style",
        "content": "\n  html {\n    font-family: Inter;\n    font-size: 16px;\n  }\n\n  body {\n    font-weight: 400;\n    font-style:normal;\n    text-decoration: none;\n    text-transform: none;\n    letter-spacing: normal;\n    line-height: 1.15;\n    color: var(--dl-color-gray-black);\n    background-color: var(--dl-color-gray-white);\n    \n  }\n\n  \n"
      },
      {
        "type": "font",
        "path": "",
        "name": "Arial"
      },
      {
        "type": "font",
        "path": "https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap",
        "name": "Inter"
      },
      {
        "type": "script",
        "content": "https://unpkg.com/@teleporthq/teleport-custom-scripts"
      },
      {
        "type": "icon",
        "path": "/playground_assets/kitten.png",
        "options": {
          "iconType": "icon/png",
          "iconSizes": "32x32"
        }
      }
    ],
    "meta": [
      {
        "name": "viewport",
        "content": "width=device-width, initial-scale=1.0"
      },
      {
        "charSet": "utf-8"
      },
      {
        "property": "twitter:card",
        "content": "summary_large_image"
      }
    ],
    "customCode": {
      "head": "<!--This is the head section-->\n<!-- <script type=\"text/javascript\"> ... </script> -->\n<script src='https://unpkg.com/@teleporthq/teleport-custom-scripts'></script>"
    }
  },
  "root": {
    "name": "App",
    "designLanguage": {
      "tokens": {
        "--dl-space-space-fourunits": {
          "type": "static",
          "content": "64px"
        },
        "--dl-space-space-threeunits": {
          "type": "static",
          "content": "48px"
        },
        "--dl-space-space-twounits": {
          "type": "static",
          "content": "32px"
        },
        "--dl-color-success-500": {
          "type": "static",
          "content": "#32A94C"
        },
        "--dl-color-danger-700": {
          "type": "static",
          "content": "#E14747"
        },
        "--dl-color-danger-500": {
          "type": "static",
          "content": "#BF2626"
        },
        "--dl-color-primary-100": {
          "type": "static",
          "content": "#003EB3"
        },
        "--dl-radius-radius-round": {
          "type": "static",
          "content": "50%"
        },
        "--dl-color-success-300": {
          "type": "static",
          "content": "#199033"
        },
        "--dl-size-size-small": {
          "type": "static",
          "content": "48px"
        },
        "--dl-color-danger-300": {
          "type": "static",
          "content": "#A22020"
        },
        "--dl-size-size-medium": {
          "type": "static",
          "content": "96px"
        },
        "--dl-size-size-xsmall": {
          "type": "static",
          "content": "16px"
        },
        "--dl-radius-radius-radius8": {
          "type": "static",
          "content": "8px"
        },
        "--dl-color-gray-white": {
          "type": "static",
          "content": "#FFFFFF"
        },
        "--dl-color-gray-700": {
          "type": "static",
          "content": "#999999"
        },
        "--dl-size-size-maxwidth": {
          "type": "static",
          "content": "1400px"
        },
        "--dl-radius-radius-radius4": {
          "type": "static",
          "content": "4px"
        },
        "--dl-color-primary-300": {
          "type": "static",
          "content": "#0074F0"
        },
        "--dl-color-primary-500": {
          "type": "static",
          "content": "#14A9FF"
        },
        "--dl-size-size-xlarge": {
          "type": "static",
          "content": "192px"
        },
        "--dl-color-success-700": {
          "type": "static",
          "content": "#4CC366"
        },
        "--dl-space-space-unit": {
          "type": "static",
          "content": "16px"
        },
        "--dl-color-primary-700": {
          "type": "static",
          "content": "#85DCFF"
        },
        "--dl-space-space-oneandhalfunits": {
          "type": "static",
          "content": "24px"
        },
        "--dl-color-gray-900": {
          "type": "static",
          "content": "#D9D9D9"
        },
        "--dl-space-space-sixunits": {
          "type": "static",
          "content": "96px"
        },
        "--dl-radius-radius-radius2": {
          "type": "static",
          "content": "2px"
        },
        "--dl-color-gray-500": {
          "type": "static",
          "content": "#595959"
        },
        "--dl-color-gray-black": {
          "type": "static",
          "content": "#000000"
        },
        "--dl-size-size-large": {
          "type": "static",
          "content": "144px"
        },
        "--dl-space-space-halfunit": {
          "type": "static",
          "content": "8px"
        },
        "--dl-space-space-fiveunits": {
          "type": "static",
          "content": "80px"
        },
        "--dl-size-size-xxlarge": {
          "type": "static",
          "content": "288px"
        }
      }
    },
    "styleSetDefinitions": {
      "button": {
        "type": "reusable-project-style-map",
        "content": {
          "fontSize": {
            "type": "static",
            "content": "14px"
          },
          "fontFamily": {
            "type": "static",
            "content": "Arial"
          },
          "fontWeight": {
            "type": "static",
            "content": "500"
          },
          "textTransform": {
            "type": "static",
            "content": "none"
          },
          "textDecoration": {
            "type": "static",
            "content": "none"
          }
        }
      },
      "input": {
        "type": "reusable-project-style-map",
        "content": {
          "color": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-black"
            }
          },
          "cursor": {
            "type": "static",
            "content": "auto"
          },
          "padding": {
            "type": "static",
            "content": "0.5rem 1rem"
          },
          "borderColor": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-black"
            }
          },
          "borderWidth": {
            "type": "static",
            "content": "1px"
          },
          "borderRadius": {
            "type": "static",
            "content": "4px"
          },
          "backgroundColor": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-white"
            }
          }
        },
        "conditions": []
      },
      "textarea": {
        "type": "reusable-project-style-map",
        "content": {
          "color": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-black"
            }
          },
          "cursor": {
            "type": "static",
            "content": "auto"
          },
          "padding": {
            "type": "static",
            "content": "0.5rem"
          },
          "borderColor": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-black"
            }
          },
          "borderWidth": {
            "type": "static",
            "content": "1px"
          },
          "borderRadius": {
            "type": "static",
            "content": "4px"
          },
          "backgroundColor": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-white"
            }
          }
        },
        "conditions": []
      },
      "list": {
        "type": "reusable-project-style-map",
        "content": {
          "width": {
            "type": "static",
            "content": "100%"
          },
          "margin": {
            "type": "static",
            "content": "1em 0px 1em 0px"
          },
          "display": {
            "type": "static",
            "content": "block"
          },
          "padding": {
            "type": "static",
            "content": "0px 0px 0px 1.5rem"
          },
          "listStyleType": {
            "type": "static",
            "content": "none"
          },
          "listStylePosition": {
            "type": "static",
            "content": "outside"
          }
        },
        "conditions": []
      },
      "list-item": {
        "type": "reusable-project-style-map",
        "content": {
          "display": {
            "type": "static",
            "content": "list-item"
          }
        },
        "conditions": []
      },
      "teleport-show": {
        "type": "reusable-project-style-map",
        "content": {
          "display": {
            "type": "static",
            "content": "flex !important"
          }
        },
        "conditions": []
      },
      "primary-button": {
        "type": "reusable-project-style-map",
        "content": {
          "backgroundColor": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-black"
            }
          },
          "color": {
            "type": "static",
            "content": "white"
          }
        },
        "conditions": []
      },
      "secondary-button": {
        "type": "reusable-project-style-map",
        "content": {
          "color": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-black"
            }
          },
          "border": {
            "type": "static",
            "content": "1px solid"
          }
        },
        "conditions": []
      },
      "content": {
        "type": "reusable-project-style-map",
        "content": {
          "fontSize": {
            "type": "static",
            "content": "16px"
          },
          "fontFamily": {
            "type": "static",
            "content": "Inter"
          },
          "fontWeight": {
            "type": "static",
            "content": "400"
          },
          "lineHeight": {
            "type": "static",
            "content": "1.15"
          },
          "textTransform": {
            "type": "static",
            "content": "none"
          },
          "textDecoration": {
            "type": "static",
            "content": "none"
          }
        }
      },
      "heading": {
        "type": "reusable-project-style-map",
        "content": {
          "fontSize": {
            "type": "static",
            "content": "32px"
          },
          "fontFamily": {
            "type": "static",
            "content": "Inter"
          },
          "fontWeight": {
            "type": "static",
            "content": "700"
          },
          "lineHeight": {
            "type": "static",
            "content": "1.15"
          },
          "textTransform": {
            "type": "static",
            "content": "none"
          },
          "textDecoration": {
            "type": "static",
            "content": "none"
          }
        }
      }
    },
    "stateDefinitions": {
      "route": {
        "type": "string",
        "defaultValue": "Home",
        "values": [
          {
            "value": "Home",
            "seo": {
              "title": "New Project3",
              "metaTags": [
                {
                  "property": "og:title",
                  "content": "New Project3"
                }
              ]
            }
          },
          {
            "value": "Fallback",
            "seo": {
              "title": "Fallback Page"
            },
            "pageOptions": {
              "fallback": true
            }
          }
        ]
      }
    },
    "node": {
      "type": "element",
      "content": {
        "elementType": "Router",
        "children": [
          {
            "type": "conditional",
            "content": {
              "node": {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "referencedStyles": {},
                  "abilities": {},
                  "style": {
                    "width": {
                      "type": "static",
                      "content": "100%"
                    },
                    "display": {
                      "type": "static",
                      "content": "flex"
                    },
                    "overflow": {
                      "type": "static",
                      "content": "auto"
                    },
                    "minHeight": {
                      "type": "static",
                      "content": "100vh"
                    },
                    "alignItems": {
                      "type": "static",
                      "content": "flex-start"
                    },
                    "flexDirection": {
                      "type": "static",
                      "content": "column"
                    },
                    "justifyContent": {
                      "type": "static",
                      "content": "flex-start"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "container",
                        "semanticType": "div",
                        "children": [
                          {
                            "type": "element",
                            "content": {
                              "elementType": "image",
                              "style": {
                                "width": "100%",
                                "height": "200px;"
                              },
                              "attrs": {
                                "src": {
                                  "type": "static",
                                  "content": "/playground_assets/kitten.png"
                                }
                              }
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "key": "div",
                              "elementType": "div",
                              "name": "div",
                              "children": [],
                              "attrs": {},
                              "style": {
                                "width": "100%",
                                "height": "200px",
                                "backgroundImage": {
                                  "type": "static",
                                  "content": "url(\"/playground_assets/kitten.png\")"
                                }
                              }
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "semanticType": "CompWithImageProp",
                              "elementType": "component",
                              "dependency": {
                                "type": "local"
                              },
                              "style": {
                                "width": "100%",
                                "height": "200px"
                              },
                              "attrs": {
                                "image": {
                                  "type": "static",
                                  "content": "/playground_assets/kitten.png"
                                }
                              }
                            }
                          }
                        ],
                        "attrs": {}
                      }
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "image",
                        "referencedStyles": {},
                        "abilities": {},
                        "attrs": {
                          "src": {
                            "type": "static",
                            "content": "/playground_assets/kitten.png"
                          },
                          "alt": {
                            "type": "static",
                            "content": "image"
                          }
                        },
                        "style": {
                          "width": {
                            "type": "static",
                            "content": "100px"
                          },
                          "objectFit": {
                            "type": "static",
                            "content": "cover"
                          }
                        },
                        "children": []
                      }
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "container",
                        "referencedStyles": {},
                        "abilities": {},
                        "style": {
                          "display": {
                            "type": "static",
                            "content": "flex"
                          },
                          "width": {
                            "type": "static",
                            "content": "100px"
                          },
                          "height": {
                            "type": "static",
                            "content": "50px"
                          },
                          "border": {
                            "type": "static",
                            "content": "2px dashed rgba(120, 120, 120, 0.4)"
                          },
                          "alignItems": {
                            "type": "static",
                            "content": "flex-start"
                          },
                          "flex": {
                            "type": "static",
                            "content": "0 0 auto"
                          },
                          "backgroundImage": {
                            "type": "static",
                            "content": "url(\"/playground_assets/kitten.png\")"
                          },
                          "backgroundSize": {
                            "type": "static",
                            "content": "cover"
                          }
                        },
                        "children": [
                          {
                            "type": "static",
                            "content": "Bg Image"
                          }
                        ],
                        "semanticType": "div"
                      }
                    }
                  ],
                  "semanticType": "div"
                }
              },
              "value": "Home",
              "reference": {
                "type": "dynamic",
                "content": {
                  "referenceType": "state",
                  "id": "route"
                }
              }
            }
          },
          {
            "type": "conditional",
            "content": {
              "node": {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "referencedStyles": {},
                  "abilities": {},
                  "style": {
                    "width": {
                      "type": "static",
                      "content": "100%"
                    },
                    "display": {
                      "type": "static",
                      "content": "flex"
                    },
                    "overflow": {
                      "type": "static",
                      "content": "auto"
                    },
                    "minHeight": {
                      "type": "static",
                      "content": "100vh"
                    },
                    "alignItems": {
                      "type": "static",
                      "content": "flex-start"
                    },
                    "flexDirection": {
                      "type": "static",
                      "content": "column"
                    },
                    "justifyContent": {
                      "type": "static",
                      "content": "flex-start"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "container",
                        "children": [
                          { "type": "static", "content": "This is a fallback page"}
                        ]
                      }
                    }
                  ],
                  "semanticType": "div"
                }
              },
              "value": "Fallback",
              "reference": {
                "type": "dynamic",
                "content": {
                  "referenceType": "state",
                  "id": "route"
                }
              }
            }
          }
        ]
      }
    }
  },
  "components": {
    "Component": {
      "propDefinitions": {},
      "node": {
        "type": "element",
        "content": {
          "elementType": "container",
          "referencedStyles": {},
          "abilities": {},
          "style": {
            "width": {
              "type": "static",
              "content": "100%"
            },
            "height": {
              "type": "static",
              "content": "400px"
            },
            "display": {
              "type": "static",
              "content": "flex"
            },
            "position": {
              "type": "static",
              "content": "relative"
            },
            "alignItems": {
              "type": "static",
              "content": "flex-start"
            },
            "flexDirection": {
              "type": "static",
              "content": "column"
            }
          },
          "children": [],
          "semanticType": "div"
        }
      },
      "name": "Component",
      "styleSetDefinitions": {}
    },
    "CompWithImageProp": {
      "name": "CompWithImageProp",
      "styleSetDefinitions": {
        "bgImageC": {
          "type": "reusable-project-style-map",
          "content": {
            "backgroundImage": {
              "type": "static",
              "content": "url(\"/playground_assets/kitten.png\")"
            }
          }
        }
      },
      "propDefinitions": {
        "image": {
          "type": "string",
          "defaultValue": "/playground_assets/kitten.png"
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "container",
          "semanticType": "div",
          "children": [
            {
              "type": "element",
              "content": {
                "elementType": "image",
                "style": {
                  "width": "100%",
                  "height": "200px"
                },
                "attrs": {
                  "src": {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "prop",
                      "id": "image"
                    }
                  }
                }
              }
            },
            {
              "type": "element",
              "content": {
                "key": "div",
                "elementType": "component",
                "name": "comp-with-image-bg-in-css",
                "children": [],
                "attrs": {},
                "semanticType": "div",
                "style": {
                  "width": "100%",
                  "height": "200px",
                  "backgroundImage": {
                    "type": "static",
                    "content": "url(\"/playground_assets/kitten.png\")"
                  }
                }
              }
            },
            {
              "type": "element",
              "content": {
                "key": "div",
                "elementType": "component",
                "name": "div",
                "children": [],
                "attrs": {},
                "semanticType": "div",
                "style": {},
                "referencedStyles": {
                  "primaryButton": {
                    "type": "style-map",
                    "content": {
                      "mapType": "inlined",
                      "conditions": [
                        {
                          "maxWidth": 991,
                          "conditionType": "screen-size"
                        }
                      ],
                      "styles": {
                        "width": "100%",
                        "height": "200px",
                        "backgroundImage": {
                          "type": "static",
                          "content": "url(\"/playground_assets/kitten.png\")"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      }
    }
  }
}
'''
'''--- examples/test-samples/project-invalid-sample.json ---
{
  "globals": {
    "settings": {
      "language": 1,
      "title": "teleportHQ",
      "key": "test"
    },
    "meta" : [
      { "name": "description", "content": "Free Web tutorials" },
      { "name": "keywords", "content": "prea bun, prea ca la tara" },
      { "name": "viewport", "content": "width=device-width, initial-scale=1.0" },
      { "property": "og:title", "content": "Free Web tutorials" },
      { "property": "og:url", "content": "/playground_assets/asdasd.png" }
    ],
    "manifest": {
      "icons": [
        {
          "src": "/playground_assets/icons-192.png",
          "type": "image/png",
          "sizes": "192x192"
        },
        {
          "src": "/playground_assets/icons-512.png",
          "type": "image/png",
          "sizes": "512x512"
        }
      ],
      "theme_color": "#822CEC",
      "background_color": "#822CEC"
    },
    "assets": [
      {
        "type": "style",
        "path": "https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css",
        "options": {
          "target": "body"
        }
      }, 
      {
        "type": "scripts",
        "path": "https://www.googletagmanager.com/gtm.js",
        "options": {
          "defer": true
        }
      },
      {
        "type": "script",
        "content": "console.log(\"inline script\")",
        "options": {
          "target": "body"
        }
      },
      {
        "type": "font",
        "path": "https://fonts.googleapis.com/css?family=Roboto"
      },
      {
        "type": "style",
        "content": "body{font-family: 'Roboto', sans-serif;}"
      },
      {
        "type": "icon",
        "path": "/playground_assets/favicon-32x32.png",
        "options": {
          "iconType": "image/png",
          "iconSizes": "32x32"
        }
      }
    ],
    "variables": {
      "primaryColor": "#822CEC",
      "secondaryColor": "#414141",
      "spacing": "10px"
    }
  },
  "root": {
    "name": "App",
    "stateDefinitions": {
      "route": {
        "type": "string",
        "defaultValue": "index",
        "values": [
          {
            "value": "index",
            "pageOptions": {
              "navLink": "/",
              "componentName": "Home"
            }
          },
          {
            "value": "about",
            "pageOptions": {
              "navLink": "/about",
              "componentName": "About"
            }
          },
          {
            "value": "contact-us",
            "pageOptions": {
              "navLink": "/here-we-are",
              "componentName": "Us"
            }
          }
        ]
      }
    },
    "node": {
      "type": "element",
      "content": {
        "elementType": "Router",
        "children": [
          {
            "type": "conditional",
            "content": {
              "node": {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "children": [
                    {
                      "type": "static",
                      "content": "Page 1"
                    }
                  ]
                }
              },
              "value": "index",
              "reference": {
                "type": "dynamic",
                "content": {
                  "referenceType": "state",
                  "id": "route"
                }
              }
            }
          },
          {
            "type": "conditional",
            "content": {
              "node": {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "children": [
                    {
                      "type": "static",
                      "content": "Page 2"
                    }
                  ]
                }
              },
              "value": "about",
              "reference": {
                "type": "dynamic",
                "content": {
                  "referenceType": "state",
                  "id": "route"
                }
              }
            }
          },{
            "type": "conditional",
            "content": {
              "node": {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "children": [
                    {
                      "type": "static",
                      "content": "Page 3"
                    }
                  ]
                }
              },
              "value": "contact-us",
              "reference": {
                "type": "dynamic",
                "content": {
                  "referenceType": "state",
                  "id": "route"
                }
              }
            }
          }
        ]
      }
    }
  },
  "components": {
    "OneComponent": {
      "name": "OneComponent",
      "propDefinitions": {
        "header": {
          "type": "string",
          "defaultValue": "Hello"
        },
        "items": {
          "type": "array",
          "defaultValue": []
        }
      },
      "stateDefinitions": {
        "isVisible": {
          "type": "boolean",
          "defaultValue": true
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "container",
          "attrs": {
            "data-static-attr": {
              "type": "static",
              "content": "test"
            },
            "data-dynamic-attr": {
              "type": "dynamic",
              "content": {
                "referenceType": "prop",
                "id": "header"
              }
            }
          },
          "children": [
            {
              "type": "element",
              "content": {
                "elementType": "text",
                "children": [
                  {
                    "type": "static",
                    "content": "Hello World!"
                  },
                  {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "prop",
                      "id": "header"
                    }
                  }
                ]
              }
            },
            {
              "type": "repeat",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "text",
                    "children": [
                      {
                        "type": "dynamic",
                        "content": {
                          "referenceType": "local",
                          "id": "item"
                        }
                      },
                      {
                        "type": "element",
                        "content": {
                          "elementType": "list",
                          "attrs": {
                            "items": {
                              "type": "static",
                              "content": ["angular", "react", "vue"]
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "dataSource": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "prop",
                    "id": "items"
                  }
                },
                "meta": {
                  "useIndex": true,
                  "iteratorName": "item"
                }
              }
            },
            {
              "type": "conditional",
              "content": {
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "isVisible"
                  }
                },
                "value": true,
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "text",
                    "children": [{
                      "type": "static",
                      "content": "Now you see me!"
                    }]
                  }
                }
              }
            }
          ]
        }
      }
    }
  }
}
'''
'''--- examples/test-samples/project-sample-with-dependency.json ---
{
    "name": "myVueProject",
    "globals": {
      "settings": {
        "language": "en",
        "title": "teleportHQ"
      },
      "meta" : [
        { "name": "description", "content": "Free Web tutorials" },
        { "name": "keywords", "content": "prea bun, prea ca la tara" },
        { "name": "viewport", "content": "width=device-width, initial-scale=1.0" },
        { "property": "og:title", "content": "Free Web tutorials" },
        { "property": "og:url", "content": "/playground_assets/asdasd.png" }
      ],
      "manifest": {
        "icons": [
          {
            "src": "/playground_assets/icons-192.png",
            "type": "image/png",
            "sizes": "192x192"
          },
          {
            "src": "/playground_assets/icons-512.png",
            "type": "image/png",
            "sizes": "512x512"
          }
        ],
        "theme_color": "#822CEC",
        "background_color": "#822CEC"
      },
      "assets": [
        {
          "type": "style",
          "path": "https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css",
          "options": {
            "target": "body"
          }
        },
        {
          "type": "script",
          "path": "https://www.googletagmanager.com/gtm.js",
          "options": {
            "defer": true
          }
        },
        {
          "type": "script",
          "content": "console.log(\"inline script\")",
          "options": {
            "target": "body"
          }
        },
        {
          "type": "font",
          "path": "https://fonts.googleapis.com/css?family=Roboto"
        },
        {
          "type": "style",
          "content": "body{font-family: 'Roboto', sans-serif;}"
        },
        {
          "type": "icon",
          "path": "/playground_assets/favicon-32x32.png",
          "options": {
            "iconType": "image/png",
            "iconSizes": "32x32"
          }
        }
      ],
      "variables": {
        "primaryColor": "#822CEC",
        "secondaryColor": "#414141",
        "spacing": "10px"
      }
    },
    "root": {
      "name": "App",
      "importDefinitions": {
        "antdCSS": {
          "type": "package",
          "path": "antd/dist/antd.css",
          "version": "^4.5.1",
          "meta": {
            "importJustPath": true
          }
        }
      },
      "stateDefinitions": {
        "route": {
          "type": "string",
          "defaultValue": "index",
          "values": [
            {
              "value": "index",
              "pageOptions": {
                "navLink": "/",
                "fileName": "index",
                "componentName": "Home"
              }
            },
            {
              "value": "about",
              "pageOptions": {
                "navLink": "/about",
                "fileName": "about",
                "componentName": "About"
              }
            },
            {
              "value": "contact-us",
              "pageOptions": {
                "navLink": "/here-we-are",
                "fileName": "contact-us",
                "componentName": "Us"
              }
            }
          ]
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "Router",
          "children": [
            {
              "type": "conditional",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "container",
                    "children": [
                      {
                        "type": "static",
                        "content": "Page 1"
                      },
                      {
                        "type": "element",
                        "content": {
                          "elementType": "container",
                          "semanticType": "Modal",
                          "dependency": {
                            "type": "local"
                          }
                        }
                      },
                      {
                        "type": "element",
                        "content": {
                          "elementType": "html-node",
                          "style": {
                            "width": "10px"
                          },
                          "attrs": {
                            "html": {
                              "type": "raw",
                              "content": "<blockquote class='twitter-tweet'><p lang='en' dir='ltr'>Feels like the last 20 mins of Don’t Look Up right about now…</p>&mdash; Netflix (@netflix) <a href='https://twitter.com/netflix/status/1593420772948598784?ref_src=twsrc%5Etfw'>November 18, 2022</a></blockquote> <script async src='https://platform.twitter.com/widgets.js'></script>"
                            }
                          }
                        }
                      },
                      {
                        "type": "element",
                        "content": {
                          "elementType": "lottie-node",
                          "style": {
                            "width": "200px",
                            "height": "200px"
                          },
                          "attrs": {
                            "src": {
                              "type": "static",
                              "content": "https://assets9.lottiefiles.com/datafiles/gUENLc1262ccKIO/data.json"
                            },
                            "autoplay": {
                              "type": "static",
                              "content": "true"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "value": "index",
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "route"
                  }
                }
              }
            },
            {
              "type": "conditional",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "container",
                    "children": [
                      {
                        "type": "static",
                        "content": "Page 2"
                      }
                    ]
                  }
                },
                "value": "about",
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "route"
                  }
                }
              }
            },{
              "type": "conditional",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "container",
                    "children": [
                      {
                        "type": "static",
                        "content": "Page 3"
                      }
                    ]
                  }
                },
                "value": "contact-us",
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "route"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "components": {
      "OneComponent": {
        "name": "OneComponent",
        "propDefinitions": {
          "titleValue": {
            "type": "string",
            "defaultValue": "Hello"
          },
          "items": {
            "type": "array",
            "defaultValue": []
          }
        },
        "stateDefinitions": {
          "isVisible": {
            "type": "boolean",
            "defaultValue": true
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "container",
            "attrs": {
              "data-static-attr": {
                "type": "static",
                "content": "test"
              },
              "data-dynamic-attr": {
                "type": "dynamic",
                "content": {
                  "referenceType": "prop",
                  "id": "titleValue"
                }
              }
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "text",
                  "children": [
                    {
                      "type": "static",
                      "content": "Hello World!"
                    },
                    {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "prop",
                        "id": "titleValue"
                      }
                    }
                  ]
                }
              },
              {
                "type": "repeat",
                "content": {
                  "node": {
                    "type": "element",
                    "content": {
                      "elementType": "text",
                      "children": [
                        {
                          "type": "dynamic",
                          "content": {
                            "referenceType": "local",
                            "id": "item"
                          }
                        },
                        {
                          "type": "element",
                          "content": {
                            "elementType": "list",
                            "attrs": {
                              "items": {
                                "type": "static",
                                "content": ["angular", "react", "vue"]
                              }
                            }
                          }
                        }
                      ]
                    }
                  },
                  "dataSource": {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "prop",
                      "id": "items"
                    }
                  },
                  "meta": {
                    "useIndex": true,
                    "iteratorName": "item"
                  }
                }
              },
              {
                "type": "conditional",
                "content": {
                  "reference": {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "state",
                      "id": "isVisible"
                    }
                  },
                  "value": true,
                  "node": {
                    "type": "element",
                    "content": {
                      "elementType": "text",
                      "children": [{
                        "type": "static",
                        "content": "Now you see me!"
                      }]
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "ExpandableArea": {
        "name": "ExpandableArea",
        "propDefinitions": {
          "titleValue": {
            "type": "string",
            "defaultValue": "Hello"
          },
          "text": {
            "type": "string",
            "defaultValue": "Is it me you're looking for?"
          }
        },
        "stateDefinitions": {
          "isExpanded": {
            "type": "boolean",
            "defaultValue": false
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "container",
            "style": {
              "margin": "10px"
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "text",
                  "children": [{
                    "type": "dynamic",
                    "content": {
                      "referenceType": "prop",
                      "id": "titleValue"
                    }
                  }]
                }
              },
              {
                "type": "element",
                "content": {
                  "elementType": "button",
                  "children": [{
                    "type": "conditional",
                    "content": {
                      "node": {
                        "type": "static",
                        "content": "Hide me"
                      },
                      "value": true,
                      "reference": {
                        "type": "dynamic",
                        "content": {
                          "referenceType": "state",
                          "id": "isExpanded"
                        }
                      }
                    }
                  },{
                    "type": "conditional",
                    "content": {
                      "node": {
                        "type": "static",
                        "content": "Show me"
                      },
                      "value": false,
                      "reference": {
                        "type": "dynamic",
                        "content": {
                          "referenceType": "state",
                          "id": "isExpanded"
                        }
                      }
                    }
                  }],
                  "events": {
                    "click": [
                      {
                        "type": "stateChange",
                        "modifies": "isExpanded",
                        "newState": "$toggle"
                      }
                    ]
                  }
                }
              },
              {
                "type": "conditional",
                "content": {
                  "node": {
                    "type": "element",
                    "content": {
                      "elementType": "text",
                      "children": [{
                        "type": "dynamic",
                        "content": {
                          "referenceType": "prop",
                          "id": "text"
                        }
                      }]
                    }
                  },
                  "value": true,
                  "reference": {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "state",
                      "id": "isExpanded"
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "Modal": {
        "name": "Modal",
        "stateDefinitions": {
          "isOpen": {
            "type": "boolean",
            "defaultValue": false
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "group",
            "children": [
              {
                "type": "element",
                "content": {
                  "semanticType": "Button",
                  "elementType": "component",
                  "attrs": {
                    "type": "primary"
                  },
                  "name": "openmodal",
                  "events": {
                    "click": [{
                      "type": "stateChange",
                      "modifies": "isOpen",
                      "newState": true
                    }]
                  },
                  "children": [{
                    "type": "static",
                    "content": "Show Popup"
                  }],
                  "dependency": {
                    "type": "package",
                    "path": "antd",
                    "version": "4.5.4",
                    "meta": {
                      "namedImport": true
                    }
                  }
                }
              },
              {
                "type": "conditional",
                "content": {
                  "node": {
                    "type": "element",
                    "content": {
                      "elementType": "component",
                      "semanticType": "ModalWindow",
                      "name": "window",
                      "dependency": {
                        "type": "local"
                      },
                      "events": {
                        "onClose": [{
                          "type": "stateChange",
                          "modifies": "isOpen",
                          "newState": false
                        }]
                      }
                    }
                  },
                  "value": true,
                  "reference": {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "state",
                      "id": "isOpen"
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "ModalWindow": {
        "name": "ModalWindow",
        "propDefinitions": {
          "message": {
            "type": "string",
            "defaultValue": "Hello"
          },
          "onClose": {
            "type": "func",
            "defaultValue": "() => {}"
          }
        },
        "stateDefinitions": {
          "fakeState": {
            "type": "boolean",
            "defaultValue": false
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "container",
            "children": [{
              "type": "dynamic",
              "content": {
                "referenceType": "prop",
                "id": "message"
              }
            },{
              "type": "element",
              "content": {
                "elementType": "button",
                "name": "close",
                "children": [{
                  "type": "static",
                  "content": "Close me"
                }],
                "events": {
                  "click": [{
                    "type": "propCall",
                    "calls": "onClose"
                  },{
                    "type": "stateChange",
                    "modifies": "fakeState",
                    "newState": false
                  }]
                }
              }
            }]
          }
        }
      }
    }
  }
'''
'''--- examples/test-samples/project-sample.json ---
{
  "name": "myVueProject",
  "globals": {
    "settings": {
      "language": "en",
      "title": "teleportHQ"
    },
    "meta" : [
      { "name": "description", "content": "Free Web tutorials" },
      { "name": "keywords", "content": "prea bun, prea ca la tara" },
      { "name": "viewport", "content": "width=device-width, initial-scale=1.0" },
      { "property": "og:title", "content": "Free Web tutorials" },
      { "property": "og:url", "content": "/playground_assets/asdasd.png" }
    ],
    "manifest": {
      "icons": [
        {
          "src": "/playground_assets/icons-192.png",
          "type": "image/png",
          "sizes": "192x192"
        },
        {
          "src": "/playground_assets/icons-512.png",
          "type": "image/png",
          "sizes": "512x512"
        }
      ],
      "theme_color": "#822CEC",
      "background_color": "#822CEC"
    },
    "assets": [
      {
        "type": "style",
        "path": "https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css",
        "options": {
          "target": "body"
        }
      }, 
      {
        "type": "script",
        "path": "https://www.googletagmanager.com/gtm.js",
        "options": {
          "defer": true
        }
      },
      {
        "type": "script",
        "content": "console.log(\"inline script\")",
        "options": {
          "target": "body"
        }
      },
      {
        "type": "font",
        "attrs": {
          "data-type": "default-font"
        },
        "path": "https://fonts.googleapis.com/css?family=Roboto"
      },
      {
        "type": "style",
        "attrs": {
          "data-type": "default-styles"
        },
        "content": "body{font-family: 'Roboto', sans-serif;}"
      },
      {
        "type": "icon",
        "path": "/playground_assets/favicon-32x32.png",
        "options": {
          "iconType": "image/png",
          "iconSizes": "32x32"
        }
      }
    ],
    "variables": {
      "primaryColor": "#822CEC",
      "secondaryColor": "#414141",
      "spacing": "10px"
    }
  },
  "root": {
    "name": "App",
    "stateDefinitions": {
      "route": {
        "type": "string",
        "defaultValue": "index",
        "values": [
          {
            "value": "index",
            "pageOptions": {
              "navLink": "/",
              "fileName": "index",
              "componentName": "Home"
            }
          },
          {
            "value": "about",
            "pageOptions": {
              "navLink": "/about",
              "fileName": "about",
              "componentName": "About"
            }
          },
          {
            "value": "contact-us",
            "pageOptions": {
              "navLink": "/here-we-are",
              "fileName": "contact-us",
              "componentName": "Us"
            }
          }
        ]
      }
    },
    "node": {
      "type": "element",
      "content": {
        "elementType": "Router",
        "children": [
          {
            "type": "conditional",
            "content": {
              "node": {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "children": [
                    {
                      "type": "static",
                      "content": "Page 1"
                    }
                  ]
                }
              },
              "value": "index",
              "reference": {
                "type": "dynamic",
                "content": {
                  "referenceType": "state",
                  "id": "route"
                }
              }
            }
          },
          {
            "type": "conditional",
            "content": {
              "node": {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "children": [
                    {
                      "type": "static",
                      "content": "Page 2"
                    }
                  ]
                }
              },
              "value": "about",
              "reference": {
                "type": "dynamic",
                "content": {
                  "referenceType": "state",
                  "id": "route"
                }
              }
            }
          },{
            "type": "conditional",
            "content": {
              "node": {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "children": [
                    {
                      "type": "static",
                      "content": "Page 3"
                    }
                  ]
                }
              },
              "value": "contact-us",
              "reference": {
                "type": "dynamic",
                "content": {
                  "referenceType": "state",
                  "id": "route"
                }
              }
            }
          }
        ]
      }
    }
  },
  "components": {
    "OneComponent": {
      "name": "OneComponent",
      "propDefinitions": {
        "titleValue": {
          "type": "string",
          "defaultValue": "Hello"
        },
        "items": {
          "type": "array",
          "defaultValue": []
        }
      },
      "stateDefinitions": {
        "isVisible": {
          "type": "boolean",
          "defaultValue": true
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "container",
          "attrs": {
            "data-static-attr": {
              "type": "static",
              "content": "test"
            },
            "data-dynamic-attr": {
              "type": "dynamic",
              "content": {
                "referenceType": "prop",
                "id": "titleValue"
              }
            }
          },
          "children": [
            {
              "type": "element",
              "content": {
                "elementType": "text",
                "children": [
                  {
                    "type": "static",
                    "content": "Hello World!"
                  },
                  {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "prop",
                      "id": "titleValue"
                    }
                  }
                ]
              }
            },
            {
              "type": "repeat",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "text",
                    "children": [
                      {
                        "type": "dynamic",
                        "content": {
                          "referenceType": "local",
                          "id": "item"
                        }
                      },
                      {
                        "type": "element",
                        "content": {
                          "elementType": "list",
                          "attrs": {
                            "items": {
                              "type": "static",
                              "content": ["angular", "react", "vue"]
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "dataSource": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "prop",
                    "id": "items"
                  }
                },
                "meta": {
                  "useIndex": true,
                  "iteratorName": "item"
                }
              }
            },
            {
              "type": "conditional",
              "content": {
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "isVisible"
                  }
                },
                "value": true,
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "text",
                    "children": [{
                      "type": "static",
                      "content": "Now you see me!"
                    }]
                  }
                }
              }
            }
          ]
        }
      }
    },
    "ExpandableArea": {
      "name": "ExpandableArea",
      "propDefinitions": {
        "titleValue": {
          "type": "string",
          "defaultValue": "Hello"
        },
        "text": {
          "type": "string",
          "defaultValue": "Is it me you're looking for?"
        }
      },
      "stateDefinitions": {
        "isExpanded": {
          "type": "boolean",
          "defaultValue": false
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "container",
          "style": {
            "margin": "10px"
          },
          "children": [
            {
              "type": "element",
              "content": {
                "elementType": "text",
                "children": [{
                  "type": "dynamic",
                  "content": {
                    "referenceType": "prop",
                    "id": "titleValue"
                  }
                }]
              }
            },
            {
              "type": "element",
              "content": {
                "elementType": "button",
                "children": [{
                  "type": "conditional",
                  "content": {
                    "node": {
                      "type": "static",
                      "content": "Hide me"
                    },
                    "value": true,
                    "reference": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "state",
                        "id": "isExpanded"
                      }
                    }
                  }
                },{
                  "type": "conditional",
                  "content": {
                    "node": {
                      "type": "static",
                      "content": "Show me"
                    },
                    "value": false,
                    "reference": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "state",
                        "id": "isExpanded"
                      }
                    }
                  }
                }],
                "events": {
                  "click": [
                    {
                      "type": "stateChange",
                      "modifies": "isExpanded",
                      "newState": "$toggle"
                    }
                  ]
                }
              }
            },
            {
              "type": "conditional",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "text",
                    "children": [{
                      "type": "dynamic",
                      "content": {
                        "referenceType": "prop",
                        "id": "text"
                      }
                    }]
                  }
                },
                "value": true,
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "isExpanded"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "Modal": {
      "name": "Modal",
      "stateDefinitions": {
        "isOpen": {
          "type": "boolean",
          "defaultValue": false
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "group",
          "children": [
            {
              "type": "element",
              "content": {
                "elementType": "button",
                "name": "openmodal",
                "children": [{
                  "type": "static",
                  "content": "Show Popup"
                }],
                "events": {
                  "click": [{
                    "type": "stateChange",
                    "modifies": "isOpen",
                    "newState": true
                  }]
                }
              }
            },
            {
              "type": "conditional",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "component",
                    "semanticType": "ModalWindow",
                    "name": "window",
                    "dependency": {
                      "type": "local"
                    },
                    "events": {
                      "onClose": [{
                        "type": "stateChange",
                        "modifies": "isOpen",
                        "newState": false
                      }]
                    }
                  }
                },
                "value": true,
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "isOpen"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "ModalWindow": {
      "name": "ModalWindow",
      "propDefinitions": {
        "message": {
          "type": "string",
          "defaultValue": "Hello"
        },
        "onClose": {
          "type": "func",
          "defaultValue": "() => {}"
        }
      },
      "stateDefinitions": {
        "fakeState": {
          "type": "boolean",
          "defaultValue": false
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "container",
          "children": [{
            "type": "dynamic",
            "content": {
              "referenceType": "prop",
              "id": "message"
            }
          },{
            "type": "element",
            "content": {
              "elementType": "button",
              "name": "close",
              "children": [{
                "type": "static",
                "content": "Close me"
              }],
              "events": {
                "click": [{
                  "type": "propCall",
                  "calls": "onClose"
                },{
                  "type": "stateChange",
                  "modifies": "fakeState",
                  "newState": false
                }]
              }
            }
          }]
        }
      }
    }
  }
}
'''
'''--- examples/test-samples/project-with-import-global-styles.json ---
{
    "name": "myVueProject",
    "globals": {
      "settings": {
        "language": "en",
        "title": "teleportHQ"
      },
      "meta" : [
        { "name": "description", "content": "Free Web tutorials" },
        { "name": "keywords", "content": "prea bun, prea ca la tara" },
        { "name": "viewport", "content": "width=device-width, initial-scale=1.0" },
        { "property": "og:title", "content": "Free Web tutorials" },
        { "property": "og:url", "content": "/playground_assets/asdasd.png" }
      ],
      "manifest": {
        "icons": [
          {
            "src": "/playground_assets/icons-192.png",
            "type": "image/png",
            "sizes": "192x192"
          },
          {
            "src": "/playground_assets/icons-512.png",
            "type": "image/png",
            "sizes": "512x512"
          }
        ],
        "theme_color": "#822CEC",
        "background_color": "#822CEC"
      },
      "assets": [
        {
          "type": "style",
          "path": "https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css",
          "options": {
            "target": "body"
          }
        }, 
        {
          "type": "script",
          "path": "https://www.googletagmanager.com/gtm.js",
          "options": {
            "defer": true
          }
        },
        {
          "type": "script",
          "content": "console.log(\"inline script\")",
          "options": {
            "target": "body"
          }
        },
        {
          "type": "font",
          "path": "https://fonts.googleapis.com/css?family=Roboto"
        },
        {
          "type": "style",
          "content": "body{font-family: 'Roboto', sans-serif;}"
        },
        {
          "type": "icon",
          "path": "/playground_assets/favicon-32x32.png",
          "options": {
            "iconType": "image/png",
            "iconSizes": "32x32"
          }
        }
      ],
      "variables": {
        "primaryColor": "#822CEC",
        "secondaryColor": "#414141",
        "spacing": "10px"
      }
    },
    "root": {
      "name": "App",
      "styleSetDefinitions": {
        "primaryButton": {
          "type": "reusable-project-style-map",
          "content": {
            "background": "blue",
            "width": "auto",
            "color": "#fff",
            "border": "1px solid #fff"
          }
        },
        "secondaryButton": {
          "type": "reusable-project-style-map",
          "content": {
            "background": "red",
            "width": "auto",
            "color": "#fff",
            "border": "1px solid #fff"
          }
        }
      },
      "stateDefinitions": {
        "route": {
          "type": "string",
          "defaultValue": "index",
          "values": [
            {
              "value": "index",
              "pageOptions": {
                "navLink": "/",
                "fileName": "index",
                "componentName": "Home"
              }
            },
            {
              "value": "about",
              "pageOptions": {
                "navLink": "/about",
                "fileName": "about",
                "componentName": "About"
              }
            },
            {
              "value": "contact-us",
              "pageOptions": {
                "navLink": "/here-we-are",
                "fileName": "contact-us",
                "componentName": "Us"
              }
            }
          ]
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "Router",
          "children": [
            {
              "type": "conditional",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "container",
                    "children": [
                      {
                        "type": "static",
                        "content": "Page 1",
                        "referencedStyles": {
                          "5ed0d3daf36df4da926078ee": {
                            "id": "5ed0d3daf36df4da926078ee",
                            "type": "style-map",
                            "content": {
                              "mapType": "project-referenced",
                              "referenceId": "primaryButton"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "value": "index",
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "route"
                  }
                }
              }
            },
            {
              "type": "conditional",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "container",
                    "children": [
                      {
                        "type": "static",
                        "content": "Page 2"
                      }
                    ]
                  }
                },
                "value": "about",
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "route"
                  }
                }
              }
            },{
              "type": "conditional",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "container",
                    "children": [
                      {
                        "type": "static",
                        "content": "Page 3"
                      }
                    ]
                  }
                },
                "value": "contact-us",
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "route"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "components": {
      "OneComponent": {
        "name": "OneComponent",
        "propDefinitions": {
          "titleValue": {
            "type": "string",
            "defaultValue": "Hello"
          },
          "items": {
            "type": "array",
            "defaultValue": []
          }
        },
        "stateDefinitions": {
          "isVisible": {
            "type": "boolean",
            "defaultValue": true
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "container",
            "attrs": {
              "data-static-attr": {
                "type": "static",
                "content": "test"
              },
              "data-dynamic-attr": {
                "type": "dynamic",
                "content": {
                  "referenceType": "prop",
                  "id": "titleValue"
                }
              }
            },
            "children": [
                {
                    "type": "element",
                    "content": {
                      "semanticType": "Button",
                      "elementType": "component",
                      "attrs": {
                        "type": "danger"
                      },
                      "dependency": {
                        "type": "package",
                        "version": "^4.5.1",
                        "path": "antd",
                        "meta": {
                          "namedImport": true
                        }
                      },
                      "children": ["Button from Antd"]
                    }
                  },
              {
                "type": "element",
                "content": {
                  "elementType": "text",
                  "children": [
                    {
                      "type": "static",
                      "content": "Hello World!"
                    },
                    {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "prop",
                        "id": "titleValue"
                      }
                    }
                  ]
                }
              },
              {
                "type": "repeat",
                "content": {
                  "node": {
                    "type": "element",
                    "content": {
                      "elementType": "text",
                      "children": [
                        {
                          "type": "dynamic",
                          "content": {
                            "referenceType": "local",
                            "id": "item"
                          }
                        },
                        {
                          "type": "element",
                          "content": {
                            "elementType": "list",
                            "attrs": {
                              "items": {
                                "type": "static",
                                "content": ["angular", "react", "vue"]
                              }
                            }
                          }
                        }
                      ]
                    }
                  },
                  "dataSource": {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "prop",
                      "id": "items"
                    }
                  },
                  "meta": {
                    "useIndex": true,
                    "iteratorName": "item"
                  }
                }
              },
              {
                "type": "conditional",
                "content": {
                  "reference": {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "state",
                      "id": "isVisible"
                    }
                  },
                  "value": true,
                  "node": {
                    "type": "element",
                    "content": {
                      "elementType": "text",
                      "children": [{
                        "type": "static",
                        "content": "Now you see me!"
                      }]
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "ExpandableArea": {
        "name": "ExpandableArea",
        "propDefinitions": {
          "titleValue": {
            "type": "string",
            "defaultValue": "Hello"
          },
          "text": {
            "type": "string",
            "defaultValue": "Is it me you're looking for?"
          }
        },
        "stateDefinitions": {
          "isExpanded": {
            "type": "boolean",
            "defaultValue": false
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "container",
            "style": {
              "margin": "10px"
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "text",
                  "children": [{
                    "type": "dynamic",
                    "content": {
                      "referenceType": "prop",
                      "id": "titleValue"
                    }
                  }]
                }
              },
              {
                "type": "element",
                "content": {
                  "elementType": "button",
                  "children": [{
                    "type": "conditional",
                    "content": {
                      "node": {
                        "type": "static",
                        "content": "Hide me"
                      },
                      "value": true,
                      "reference": {
                        "type": "dynamic",
                        "content": {
                          "referenceType": "state",
                          "id": "isExpanded"
                        }
                      }
                    }
                  },{
                    "type": "conditional",
                    "content": {
                      "node": {
                        "type": "static",
                        "content": "Show me"
                      },
                      "value": false,
                      "reference": {
                        "type": "dynamic",
                        "content": {
                          "referenceType": "state",
                          "id": "isExpanded"
                        }
                      }
                    }
                  }],
                  "events": {
                    "click": [
                      {
                        "type": "stateChange",
                        "modifies": "isExpanded",
                        "newState": "$toggle"
                      }
                    ]
                  }
                }
              },
              {
                "type": "conditional",
                "content": {
                  "node": {
                    "type": "element",
                    "content": {
                      "elementType": "text",
                      "children": [{
                        "type": "dynamic",
                        "content": {
                          "referenceType": "prop",
                          "id": "text"
                        }
                      }]
                    }
                  },
                  "value": true,
                  "reference": {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "state",
                      "id": "isExpanded"
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "Modal": {
        "name": "Modal",
        "stateDefinitions": {
          "isOpen": {
            "type": "boolean",
            "defaultValue": false
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "group",
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "button",
                  "name": "openmodal",
                  "children": [{
                    "type": "static",
                    "content": "Show Popup"
                  }],
                  "events": {
                    "click": [{
                      "type": "stateChange",
                      "modifies": "isOpen",
                      "newState": true
                    }]
                  }
                }
              },
              {
                "type": "conditional",
                "content": {
                  "node": {
                    "type": "element",
                    "content": {
                      "elementType": "component",
                      "semanticType": "ModalWindow",
                      "name": "window",
                      "dependency": {
                        "type": "local"
                      },
                      "events": {
                        "onClose": [{
                          "type": "stateChange",
                          "modifies": "isOpen",
                          "newState": false
                        }]
                      }
                    }
                  },
                  "value": true,
                  "reference": {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "state",
                      "id": "isOpen"
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "ModalWindow": {
        "name": "ModalWindow",
        "propDefinitions": {
          "message": {
            "type": "string",
            "defaultValue": "Hello"
          },
          "onClose": {
            "type": "func",
            "defaultValue": "() => {}"
          }
        },
        "stateDefinitions": {
          "fakeState": {
            "type": "boolean",
            "defaultValue": false
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "container",
            "children": [{
              "type": "dynamic",
              "content": {
                "referenceType": "prop",
                "id": "message"
              }
            },{
              "type": "element",
              "content": {
                "elementType": "button",
                "name": "close",
                "children": [{
                  "type": "static",
                  "content": "Close me"
                }],
                "events": {
                  "click": [{
                    "type": "propCall",
                    "calls": "onClose"
                  },{
                    "type": "stateChange",
                    "modifies": "fakeState",
                    "newState": false
                  }]
                }
              }
            }]
          }
        }
      }
    }
  }
'''
'''--- examples/test-samples/project-with-only-tokens.json ---
{
    "name": "dsffdsf",
    "globals": {
      "settings": {
        "title": "dsffdsf",
        "language": "en"
      },
      "assets": [
        {
          "type": "style",
          "content": "html {  line-height: 1.15;}body {  margin: 0;}* {  box-sizing: border-box;  border-width: 0;  border-style: solid;}p,li,ul,pre,div,h1,h2,h3,h4,h5,h6 {  margin: 0;  padding: 0;}button,input,optgroup,select,textarea {  font-family: inherit;  font-size: 100%;  line-height: 1.15;  margin: 0;}button,select {  text-transform: none;}button,[type=\"button\"],[type=\"reset\"],[type=\"submit\"] {  -webkit-appearance: button;}button::-moz-focus-inner,[type=\"button\"]::-moz-focus-inner,[type=\"reset\"]::-moz-focus-inner,[type=\"submit\"]::-moz-focus-inner {  border-style: none;  padding: 0;}button:-moz-focus,[type=\"button\"]:-moz-focus,[type=\"reset\"]:-moz-focus,[type=\"submit\"]:-moz-focus {  outline: 1px dotted ButtonText;}a {  color: inherit;  text-decoration: inherit;}input {  padding: 2px 4px;}img {  display: block;}"
        }
      ],
      "meta": [
        {
          "name": "viewport",
          "content": "width=device-width, initial-scale=1.0"
        },
        {
          "charSet": "utf-8"
        },
        {
          "property": "twitter:card",
          "content": "summary_large_image"
        }
      ],
      "customCode": {}
    },
    "root": {
      "name": "App",
      "designLanguage": {
        "tokens": {
          "Primary-900": {
            "type": "static",
            "content": "#E6FAFF"
          },
          "Space-Unit": {
            "type": "static",
            "content": "1rem"
          },
          "Space-TripleUnit": {
            "type": "static",
            "content": "3rem"
          },
          "Greys-White": {
            "type": "static",
            "content": "#FFFFFF"
          },
          "Radius-Round": {
            "type": "static",
            "content": "50%"
          },
          "Greys-700": {
            "type": "static",
            "content": "#999999"
          },
          "Danger-300": {
            "type": "static",
            "content": "#A22020"
          },
          "Primary-500": {
            "type": "static",
            "content": "#14A9FF"
          },
          "Success-300": {
            "type": "static",
            "content": "#199033"
          },
          "Success-700": {
            "type": "static",
            "content": "#4CC366"
          },
          "Size-HalfUnit": {
            "type": "static",
            "content": "0.5rem"
          },
          "Primary-700": {
            "type": "static",
            "content": "#85DCFF"
          },
          "Greys-Black": {
            "type": "static",
            "content": "#000000"
          },
          "Success-500": {
            "type": "static",
            "content": "#32A94C"
          },
          "Primary-300": {
            "type": "static",
            "content": "#0074F0"
          },
          "Space-DoubleUnit": {
            "type": "static",
            "content": "2rem"
          },
          "Radius-Square": {
            "type": "static",
            "content": "0"
          },
          "Danger-500": {
            "type": "static",
            "content": "#BF2626"
          },
          "Size-Unit": {
            "type": "static",
            "content": "1rem"
          },
          "Space-HalfUnit": {
            "type": "static",
            "content": "0.5rem"
          },
          "Size-DoubleUnit": {
            "type": "static",
            "content": "2rem"
          },
          "Greys-500": {
            "type": "static",
            "content": "#595959"
          },
          "Size-TripleUnit": {
            "type": "static",
            "content": "3rem"
          },
          "Danger-700": {
            "type": "static",
            "content": "#E14747"
          },
          "Primary-100": {
            "type": "static",
            "content": "#003EB3"
          }
        }
      },
      "stateDefinitions": {
        "route": {
          "type": "string",
          "defaultValue": "Home",
          "values": [
            {
              "value": "Abolut",
              "seo": {
                "title": "Abolut - dsffdsf",
                "metaTags": [
                  {
                    "property": "og:title",
                    "content": "Abolut - dsffdsf"
                  }
                ]
              }
            },
            {
              "value": "Home",
              "seo": {
                "title": "dsffdsf",
                "metaTags": [
                  {
                    "property": "og:title",
                    "content": "dsffdsf"
                  }
                ]
              }
            },
            {
              "value": "Contact",
              "seo": {
                "title": "Contact - dsffdsf",
                "metaTags": [
                  {
                    "property": "og:title",
                    "content": "Contact - dsffdsf"
                  }
                ]
              }
            }
          ]
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "Router",
          "children": [
            {
              "type": "conditional",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "container",
                    "semanticType": "div",
                    "referencedStyles": {},
                    "attrs": {},
                    "abilities": {},
                    "style": {
                      "height": {
                        "type": "static",
                        "content": "auto"
                      },
                      "display": {
                        "type": "static",
                        "content": "flex"
                      },
                      "minHeight": {
                        "type": "static",
                        "content": "100vh"
                      },
                      "alignItems": {
                        "type": "static",
                        "content": "flex-start"
                      },
                      "flexDirection": {
                        "type": "static",
                        "content": "column"
                      }
                    },
                    "children": []
                  }
                },
                "value": "Abolut",
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "route"
                  }
                }
              }
            },
            {
              "type": "conditional",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "container",
                    "semanticType": "div",
                    "referencedStyles": {},
                    "attrs": {},
                    "abilities": {},
                    "style": {
                      "height": {
                        "type": "static",
                        "content": "auto"
                      },
                      "display": {
                        "type": "static",
                        "content": "flex"
                      },
                      "minHeight": {
                        "type": "static",
                        "content": "100vh"
                      },
                      "alignItems": {
                        "type": "static",
                        "content": "flex-start"
                      },
                      "flexDirection": {
                        "type": "static",
                        "content": "column"
                      },
                      "justifyContent": {
                        "type": "static",
                        "content": "flex-start"
                      }
                    },
                    "children": [
                      {
                        "type": "element",
                        "content": {
                          "elementType": "container",
                          "semanticType": "div",
                          "referencedStyles": {},
                          "attrs": {},
                          "abilities": {},
                          "style": {
                            "width": {
                              "type": "static",
                              "content": "100%"
                            },
                            "height": {
                              "type": "static",
                              "content": "100px"
                            },
                            "display": {
                              "type": "static",
                              "content": "flex"
                            },
                            "flexWrap": {
                              "type": "static",
                              "content": "wrap"
                            },
                            "alignItems": {
                              "type": "static",
                              "content": "center"
                            },
                            "flexDirection": {
                              "type": "static",
                              "content": "row"
                            },
                            "justifyContent": {
                              "type": "static",
                              "content": "flex-start"
                            },
                            "backgroundColor": {
                              "type": "dynamic",
                              "content": {
                                "referenceType": "token",
                                "id": "Primary-100"
                              }
                            }
                          },
                          "children": [
                            {
                              "type": "element",
                              "content": {
                                "elementType": "text",
                                "semanticType": "h1",
                                "attrs": {},
                                "abilities": {},
                                "style": {
                                  "backgroundColor": {
                                    "type": "dynamic",
                                    "content": {
                                      "referenceType": "token",
                                      "id": "Primary-900"
                                    }
                                  }
                                },
                                "children": [
                                  {
                                    "type": "static",
                                    "content": "Heading"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                "value": "Home",
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "route"
                  }
                }
              }
            },
            {
              "type": "conditional",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "container",
                    "semanticType": "div",
                    "referencedStyles": {},
                    "attrs": {},
                    "abilities": {},
                    "style": {
                      "height": {
                        "type": "static",
                        "content": "auto"
                      },
                      "display": {
                        "type": "static",
                        "content": "flex"
                      },
                      "minHeight": {
                        "type": "static",
                        "content": "100vh"
                      },
                      "alignItems": {
                        "type": "static",
                        "content": "flex-start"
                      },
                      "flexDirection": {
                        "type": "static",
                        "content": "column"
                      }
                    },
                    "children": [
                      {
                        "type": "element",
                        "content": {
                          "elementType": "container",
                          "semanticType": "div",
                          "referencedStyles": {},
                          "attrs": {},
                          "abilities": {},
                          "style": {
                            "width": {
                              "type": "static",
                              "content": "100%"
                            },
                            "height": {
                              "type": "static",
                              "content": "100px"
                            },
                            "display": {
                              "type": "static",
                              "content": "flex"
                            },
                            "flexWrap": {
                              "type": "static",
                              "content": "wrap"
                            },
                            "alignItems": {
                              "type": "static",
                              "content": "center"
                            },
                            "flexDirection": {
                              "type": "static",
                              "content": "row"
                            },
                            "justifyContent": {
                              "type": "static",
                              "content": "flex-start"
                            },
                            "backgroundColor": {
                              "type": "static",
                              "content": "rgba(120, 120, 120, 0.4)"
                            }
                          },
                          "children": []
                        }
                      },
                      {
                        "type": "element",
                        "content": {
                          "elementType": "container",
                          "semanticType": "div",
                          "referencedStyles": {},
                          "attrs": {},
                          "abilities": {},
                          "style": {
                            "width": {
                              "type": "static",
                              "content": "100%"
                            },
                            "height": {
                              "type": "static",
                              "content": "100px"
                            },
                            "display": {
                              "type": "static",
                              "content": "flex"
                            },
                            "flexWrap": {
                              "type": "static",
                              "content": "wrap"
                            },
                            "alignItems": {
                              "type": "static",
                              "content": "center"
                            },
                            "flexDirection": {
                              "type": "static",
                              "content": "row"
                            },
                            "justifyContent": {
                              "type": "static",
                              "content": "flex-start"
                            },
                            "backgroundColor": {
                              "type": "static",
                              "content": "rgba(120, 120, 120, 0.4)"
                            }
                          },
                          "children": []
                        }
                      },
                      {
                        "type": "element",
                        "content": {
                          "elementType": "container",
                          "semanticType": "div",
                          "referencedStyles": {},
                          "attrs": {},
                          "abilities": {},
                          "style": {
                            "width": {
                              "type": "static",
                              "content": "100%"
                            },
                            "height": {
                              "type": "static",
                              "content": "100px"
                            },
                            "display": {
                              "type": "static",
                              "content": "flex"
                            },
                            "flexWrap": {
                              "type": "static",
                              "content": "wrap"
                            },
                            "alignItems": {
                              "type": "static",
                              "content": "center"
                            },
                            "flexDirection": {
                              "type": "static",
                              "content": "row"
                            },
                            "justifyContent": {
                              "type": "static",
                              "content": "flex-start"
                            },
                            "backgroundColor": {
                              "type": "static",
                              "content": "rgba(120, 120, 120, 0.4)"
                            }
                          },
                          "children": []
                        }
                      },
                      {
                        "type": "element",
                        "content": {
                          "elementType": "container",
                          "semanticType": "div",
                          "referencedStyles": {},
                          "attrs": {},
                          "abilities": {},
                          "style": {
                            "width": {
                              "type": "static",
                              "content": "100%"
                            },
                            "height": {
                              "type": "static",
                              "content": "100px"
                            },
                            "display": {
                              "type": "static",
                              "content": "flex"
                            },
                            "flexWrap": {
                              "type": "static",
                              "content": "wrap"
                            },
                            "alignItems": {
                              "type": "static",
                              "content": "center"
                            },
                            "flexDirection": {
                              "type": "static",
                              "content": "row"
                            },
                            "justifyContent": {
                              "type": "static",
                              "content": "flex-start"
                            },
                            "backgroundColor": {
                              "type": "static",
                              "content": "rgba(120, 120, 120, 0.4)"
                            }
                          },
                          "children": []
                        }
                      },
                      {
                        "type": "element",
                        "content": {
                          "elementType": "container",
                          "semanticType": "div",
                          "referencedStyles": {},
                          "attrs": {},
                          "abilities": {},
                          "style": {
                            "width": {
                              "type": "static",
                              "content": "100%"
                            },
                            "height": {
                              "type": "static",
                              "content": "100px"
                            },
                            "display": {
                              "type": "static",
                              "content": "flex"
                            },
                            "flexWrap": {
                              "type": "static",
                              "content": "wrap"
                            },
                            "alignItems": {
                              "type": "static",
                              "content": "center"
                            },
                            "flexDirection": {
                              "type": "static",
                              "content": "row"
                            },
                            "justifyContent": {
                              "type": "static",
                              "content": "flex-start"
                            },
                            "backgroundColor": {
                              "type": "static",
                              "content": "rgba(120, 120, 120, 0.4)"
                            }
                          },
                          "children": []
                        }
                      },
                      {
                        "type": "element",
                        "content": {
                          "elementType": "container",
                          "semanticType": "div",
                          "referencedStyles": {},
                          "attrs": {},
                          "abilities": {},
                          "style": {
                            "width": {
                              "type": "static",
                              "content": "100%"
                            },
                            "height": {
                              "type": "static",
                              "content": "100px"
                            },
                            "display": {
                              "type": "static",
                              "content": "flex"
                            },
                            "flexWrap": {
                              "type": "static",
                              "content": "wrap"
                            },
                            "alignItems": {
                              "type": "static",
                              "content": "center"
                            },
                            "flexDirection": {
                              "type": "static",
                              "content": "row"
                            },
                            "justifyContent": {
                              "type": "static",
                              "content": "flex-start"
                            },
                            "backgroundColor": {
                              "type": "static",
                              "content": "rgba(120, 120, 120, 0.4)"
                            }
                          },
                          "children": []
                        }
                      },
                      {
                        "type": "element",
                        "content": {
                          "elementType": "container",
                          "semanticType": "div",
                          "referencedStyles": {},
                          "attrs": {},
                          "abilities": {},
                          "style": {
                            "width": {
                              "type": "static",
                              "content": "100%"
                            },
                            "height": {
                              "type": "static",
                              "content": "100px"
                            },
                            "display": {
                              "type": "static",
                              "content": "flex"
                            },
                            "flexWrap": {
                              "type": "static",
                              "content": "wrap"
                            },
                            "alignItems": {
                              "type": "static",
                              "content": "center"
                            },
                            "flexDirection": {
                              "type": "static",
                              "content": "row"
                            },
                            "justifyContent": {
                              "type": "static",
                              "content": "flex-start"
                            },
                            "backgroundColor": {
                              "type": "static",
                              "content": "rgba(120, 120, 120, 0.4)"
                            }
                          },
                          "children": []
                        }
                      },
                      {
                        "type": "element",
                        "content": {
                          "elementType": "container",
                          "semanticType": "div",
                          "referencedStyles": {},
                          "attrs": {},
                          "abilities": {},
                          "style": {
                            "width": {
                              "type": "static",
                              "content": "100%"
                            },
                            "height": {
                              "type": "static",
                              "content": "100px"
                            },
                            "display": {
                              "type": "static",
                              "content": "flex"
                            },
                            "flexWrap": {
                              "type": "static",
                              "content": "wrap"
                            },
                            "alignItems": {
                              "type": "static",
                              "content": "center"
                            },
                            "flexDirection": {
                              "type": "static",
                              "content": "row"
                            },
                            "justifyContent": {
                              "type": "static",
                              "content": "flex-start"
                            },
                            "backgroundColor": {
                              "type": "static",
                              "content": "rgba(120, 120, 120, 0.4)"
                            }
                          },
                          "children": []
                        }
                      }
                    ]
                  }
                },
                "value": "Contact",
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "route"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "components": {}
  }
'''
'''--- examples/test-samples/project-with-slot.json ---
{
  "name": "Lucky Accomplished Deer",
  "globals": {
    "settings": {
      "title": "Lucky Accomplished Deer",
      "language": "en"
    },
    "assets": [
      {
        "type": "style",
        "attrs": {
          "data-tag": {
            "type": "static",
            "content": "reset-style-sheet"
          }
        },
        "content": "html {  line-height: 1.15;}body {  margin: 0;}* {  box-sizing: border-box;  border-width: 0;  border-style: solid;}p,li,ul,pre,div,h1,h2,h3,h4,h5,h6 {  margin: 0;  padding: 0;}button,input,optgroup,select,textarea {  font-family: inherit;  font-size: 100%;  line-height: 1.15;  margin: 0;}button,select {  text-transform: none;}button,[type=\"button\"],[type=\"reset\"],[type=\"submit\"] {  -webkit-appearance: button;}button::-moz-focus-inner,[type=\"button\"]::-moz-focus-inner,[type=\"reset\"]::-moz-focus-inner,[type=\"submit\"]::-moz-focus-inner {  border-style: none;  padding: 0;}button:-moz-focus,[type=\"button\"]:-moz-focus,[type=\"reset\"]:-moz-focus,[type=\"submit\"]:-moz-focus {  outline: 1px dotted ButtonText;}a {  color: inherit;  text-decoration: inherit;}input {  padding: 2px 4px;}img {  display: block;}html { scroll-behavior: smooth  }"
      },
      {
        "type": "style",
        "attrs": {
          "data-tag": {
            "type": "static",
            "content": "default-style-sheet"
          }
        },
        "content": "\n  html {\n    font-family: Inter;\n    font-size: 16px;\n  }\n\n  body {\n    font-weight: 400;\n    font-style:normal;\n    text-decoration: none;\n    text-transform: none;\n    letter-spacing: normal;\n    line-height: 1.15;\n    color: var(--dl-color-gray-black);\n    background-color: var(--dl-color-gray-white);\n    \n  }\n\n  \n\n  "
      },
      {
        "type": "font",
        "path": "https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap",
        "attrs": {
          "data-tag": {
            "type": "static",
            "content": "font"
          }
        }
      }
    ],
    "meta": [
      {
        "name": "viewport",
        "content": "width=device-width, initial-scale=1.0"
      },
      {
        "charSet": "utf-8"
      },
      {
        "property": "twitter:card",
        "content": "summary_large_image"
      }
    ],
    "customCode": {
      "head": "<!--This is the head section-->\n<!-- <style> ... </style> --> \n    <style data-section-id='dropdown'>[data-thq=\"thq-dropdown\"]:hover > [data-thq=\"thq-dropdown-list\"] {\n    display: flex; \n  }\n\n  [data-thq=\"thq-dropdown\"]:hover > div [data-thq=\"thq-dropdown-arrow\"] {\n    transform: rotate(90deg); \n  }</style>",
      "body": "<!-- Your body code here -->\n<!-- <script type=\"text/javascript\"> ... </script> -->"
    }
  },
  "root": {
    "name": "App",
    "designLanguage": {
      "tokens": {
        "--dl-color-danger-500": {
          "type": "static",
          "content": "#BF2626"
        },
        "--dl-size-size-xxlarge": {
          "type": "static",
          "content": "288px"
        },
        "--dl-space-space-halfunit": {
          "type": "static",
          "content": "8px"
        },
        "--dl-color-primary-100": {
          "type": "static",
          "content": "#003EB3"
        },
        "--dl-color-success-700": {
          "type": "static",
          "content": "#4CC366"
        },
        "--dl-size-size-small": {
          "type": "static",
          "content": "48px"
        },
        "--dl-color-success-500": {
          "type": "static",
          "content": "#32A94C"
        },
        "--dl-size-size-large": {
          "type": "static",
          "content": "144px"
        },
        "--dl-space-space-oneandhalfunits": {
          "type": "static",
          "content": "24px"
        },
        "--dl-color-gray-black": {
          "type": "static",
          "content": "#000000"
        },
        "--dl-radius-radius-radius4": {
          "type": "static",
          "content": "4px"
        },
        "--dl-radius-radius-round": {
          "type": "static",
          "content": "50%"
        },
        "--dl-size-size-maxwidth": {
          "type": "static",
          "content": "1400px"
        },
        "--dl-color-primary-500": {
          "type": "static",
          "content": "#14A9FF"
        },
        "--dl-color-danger-700": {
          "type": "static",
          "content": "#E14747"
        },
        "--dl-color-gray-500": {
          "type": "static",
          "content": "#595959"
        },
        "--dl-radius-radius-radius8": {
          "type": "static",
          "content": "8px"
        },
        "--dl-space-space-sixunits": {
          "type": "static",
          "content": "96px"
        },
        "--dl-color-primary-300": {
          "type": "static",
          "content": "#0074F0"
        },
        "--dl-color-gray-white": {
          "type": "static",
          "content": "#FFFFFF"
        },
        "--dl-size-size-medium": {
          "type": "static",
          "content": "96px"
        },
        "--dl-color-gray-900": {
          "type": "static",
          "content": "#D9D9D9"
        },
        "--dl-size-size-xlarge": {
          "type": "static",
          "content": "192px"
        },
        "--dl-space-space-fiveunits": {
          "type": "static",
          "content": "80px"
        },
        "--dl-color-primary-700": {
          "type": "static",
          "content": "#85DCFF"
        },
        "--dl-color-danger-300": {
          "type": "static",
          "content": "#A22020"
        },
        "--dl-space-space-unit": {
          "type": "static",
          "content": "16px"
        },
        "--dl-size-size-xsmall": {
          "type": "static",
          "content": "16px"
        },
        "--dl-space-space-threeunits": {
          "type": "static",
          "content": "48px"
        },
        "--dl-space-space-twounits": {
          "type": "static",
          "content": "32px"
        },
        "--dl-space-space-fourunits": {
          "type": "static",
          "content": "64px"
        },
        "--dl-radius-radius-radius2": {
          "type": "static",
          "content": "2px"
        },
        "--dl-color-gray-700": {
          "type": "static",
          "content": "#999999"
        },
        "--dl-color-success-300": {
          "type": "static",
          "content": "#199033"
        }
      }
    },
    "styleSetDefinitions": {
      "button": {
        "type": "reusable-project-style-map",
        "content": {
          "color": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-black"
            }
          },
          "display": {
            "type": "static",
            "content": "inline-block"
          },
          "padding": {
            "type": "static",
            "content": "0.5rem 1rem"
          },
          "borderColor": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-black"
            }
          },
          "borderWidth": {
            "type": "static",
            "content": "1px"
          },
          "borderRadius": {
            "type": "static",
            "content": "4px"
          },
          "backgroundColor": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-white"
            }
          }
        },
        "conditions": []
      },
      "input": {
        "type": "reusable-project-style-map",
        "content": {
          "color": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-black"
            }
          },
          "cursor": {
            "type": "static",
            "content": "auto"
          },
          "padding": {
            "type": "static",
            "content": "0.5rem 1rem"
          },
          "borderColor": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-black"
            }
          },
          "borderWidth": {
            "type": "static",
            "content": "1px"
          },
          "borderRadius": {
            "type": "static",
            "content": "4px"
          },
          "backgroundColor": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-white"
            }
          }
        },
        "conditions": []
      },
      "textarea": {
        "type": "reusable-project-style-map",
        "content": {
          "color": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-black"
            }
          },
          "cursor": {
            "type": "static",
            "content": "auto"
          },
          "padding": {
            "type": "static",
            "content": "0.5rem"
          },
          "borderColor": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-black"
            }
          },
          "borderWidth": {
            "type": "static",
            "content": "1px"
          },
          "borderRadius": {
            "type": "static",
            "content": "4px"
          },
          "backgroundColor": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-white"
            }
          }
        },
        "conditions": []
      },
      "list": {
        "type": "reusable-project-style-map",
        "content": {
          "width": {
            "type": "static",
            "content": "100%"
          },
          "margin": {
            "type": "static",
            "content": "1em 0px 1em 0px"
          },
          "display": {
            "type": "static",
            "content": "block"
          },
          "padding": {
            "type": "static",
            "content": "0px 0px 0px 1.5rem"
          },
          "listStyleType": {
            "type": "static",
            "content": "none"
          },
          "listStylePosition": {
            "type": "static",
            "content": "outside"
          }
        },
        "conditions": []
      },
      "list-item": {
        "type": "reusable-project-style-map",
        "content": {
          "display": {
            "type": "static",
            "content": "list-item"
          }
        },
        "conditions": []
      },
      "teleport-show": {
        "type": "reusable-project-style-map",
        "content": {
          "display": {
            "type": "static",
            "content": "flex !important"
          }
        },
        "conditions": []
      },
      "content": {
        "type": "reusable-project-style-map",
        "content": {
          "fontSize": {
            "type": "static",
            "content": "16px"
          },
          "fontFamily": {
            "type": "static",
            "content": "Inter"
          },
          "fontWeight": {
            "type": "static",
            "content": "400"
          },
          "lineHeight": {
            "type": "static",
            "content": "1.15"
          },
          "textTransform": {
            "type": "static",
            "content": "none"
          },
          "textDecoration": {
            "type": "static",
            "content": "none"
          }
        }
      },
      "heading": {
        "type": "reusable-project-style-map",
        "content": {
          "fontSize": {
            "type": "static",
            "content": "32px"
          },
          "fontFamily": {
            "type": "static",
            "content": "Inter"
          },
          "fontWeight": {
            "type": "static",
            "content": "700"
          },
          "lineHeight": {
            "type": "static",
            "content": "1.15"
          },
          "textTransform": {
            "type": "static",
            "content": "none"
          },
          "textDecoration": {
            "type": "static",
            "content": "none"
          }
        }
      }
    },
    "stateDefinitions": {
      "route": {
        "type": "string",
        "defaultValue": "Home",
        "values": [
          {
            "value": "Home",
            "seo": {
              "title": "Lucky Accomplished Deer",
              "metaTags": [
                {
                  "property": "og:title",
                  "content": "Lucky Accomplished Deer"
                }
              ]
            },
            "pageOptions": {}
          }
        ]
      }
    },
    "node": {
      "type": "element",
      "content": {
        "elementType": "Router",
        "children": [
          {
            "type": "conditional",
            "content": {
              "node": {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "referencedStyles": {},
                  "abilities": {},
                  "style": {
                    "width": {
                      "type": "static",
                      "content": "100%"
                    },
                    "display": {
                      "type": "static",
                      "content": "flex"
                    },
                    "overflow": {
                      "type": "static",
                      "content": "auto"
                    },
                    "minHeight": {
                      "type": "static",
                      "content": "100vh"
                    },
                    "alignItems": {
                      "type": "static",
                      "content": "center"
                    },
                    "flexDirection": {
                      "type": "static",
                      "content": "column"
                    },
                    "justifyContent": {
                      "type": "static",
                      "content": "center"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "text",
                        "referencedStyles": {},
                        "abilities": {},
                        "children": [
                          {
                            "type": "static",
                            "content": "Heading"
                          }
                        ],
                        "semanticType": "h1"
                      }
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "image",
                        "referencedStyles": {},
                        "abilities": {},
                        "attrs": {
                          "src": {
                            "type": "static",
                            "content": "https://play.teleporthq.io/static/svg/default-img.svg"
                          },
                          "alt": {
                            "type": "static",
                            "content": "image"
                          }
                        },
                        "style": {
                          "width": {
                            "type": "static",
                            "content": "100px"
                          },
                          "objectFit": {
                            "type": "static",
                            "content": "cover"
                          }
                        },
                        "children": []
                      }
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "dependency": {
                          "type": "local"
                        },
                        "referencedStyles": {},
                        "abilities": {},
                        "attrs": {
                          "rootClassName": {
                            "type": "comp-style",
                            "content": "rootClassName"
                          }
                        },
                        "children": [
                          {
                            "type": "element",
                            "content": {
                              "elementType": "text",
                              "referencedStyles": {},
                              "abilities": {},
                              "style": {
                                "color": {
                                  "type": "static",
                                  "content": "blue"
                                }
                              },
                              "children": [
                                {
                                  "type": "static",
                                  "content": "Heading"
                                }
                              ],
                              "semanticType": "h1"
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "image",
                              "referencedStyles": {},
                              "abilities": {},
                              "attrs": {
                                "src": {
                                  "type": "static",
                                  "content": "https://play.teleporthq.io/static/svg/default-img.svg"
                                },
                                "alt": {
                                  "type": "static",
                                  "content": "image"
                                }
                              },
                              "style": {
                                "width": {
                                  "type": "static",
                                  "content": "100px"
                                },
                                "objectFit": {
                                  "type": "static",
                                  "content": "cover"
                                }
                              },
                              "children": []
                            }
                          }
                        ],
                        "semanticType": "Component"
                      }
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "dependency": {
                          "type": "local"
                        },
                        "referencedStyles": {},
                        "abilities": {},
                        "attrs": {
                          "rootClassName": {
                            "type": "comp-style",
                            "content": "rootClassName1"
                          }
                        },
                        "children": [
                          {
                            "type": "element",
                            "content": {
                              "elementType": "text",
                              "referencedStyles": {},
                              "abilities": {},
                              "style": {
                                "color": {
                                  "type": "static",
                                  "content": "blue"
                                }
                              },
                              "children": [
                                {
                                  "type": "static",
                                  "content": "Heading"
                                }
                              ],
                              "semanticType": "h1"
                            }
                          },
                          {
                            "type": "element",
                            "content": {
                              "elementType": "image",
                              "referencedStyles": {},
                              "abilities": {},
                              "attrs": {
                                "src": {
                                  "type": "static",
                                  "content": "https://play.teleporthq.io/static/svg/default-img.svg"
                                },
                                "alt": {
                                  "type": "static",
                                  "content": "image"
                                }
                              },
                              "style": {
                                "width": {
                                  "type": "static",
                                  "content": "100px"
                                },
                                "objectFit": {
                                  "type": "static",
                                  "content": "cover"
                                }
                              },
                              "children": []
                            }
                          }
                        ],
                        "semanticType": "Component"
                      }
                    }
                  ],
                  "semanticType": "div"
                }
              },
              "value": "Home",
              "reference": {
                "type": "dynamic",
                "content": {
                  "referenceType": "state",
                  "id": "route"
                }
              }
            }
          }
        ]
      }
    }
  },
  "components": {
    "Component": {
      "propDefinitions": {
        "rootClassName": {
          "id": "503bc1f0-00a1-4eb8-ad48-3d9bc115726e",
          "defaultValue": "",
          "type": "string"
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "container",
          "referencedStyles": {
            "3d535c6c-5729-417d-963a-865fd29a33f5": {
              "type": "style-map",
              "content": {
                "mapType": "component-referenced",
                "content": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "prop",
                    "id": "rootClassName"
                  }
                }
              }
            }
          },
          "abilities": {},
          "style": {
            "display": {
              "type": "static",
              "content": "flex"
            },
            "position": {
              "type": "static",
              "content": "relative"
            },
            "height": {
              "type": "static",
              "content": "400px"
            },
            "width": {
              "type": "static",
              "content": "100%"
            },
            "alignItems": {
              "type": "static",
              "content": "center"
            },
            "flexDirection": {
              "type": "static",
              "content": "column"
            },
            "justifyContent": {
              "type": "static",
              "content": "center"
            }
          },
          "children": [
            {
              "type": "slot",
              "content": {}
            }
          ],
          "semanticType": "div"
        }
      },
      "name": "Component",
      "styleSetDefinitions": {
        "rootClassName": {
          "content": {},
          "conditions": [],
          "type": "reusable-component-style-override"
        },
        "rootClassName1": {
          "content": {},
          "conditions": [],
          "type": "reusable-component-style-override"
        }
      }
    }
  }
}
'''
'''--- examples/uidl-samples/component.json ---
{
  "name": "PersonSpotlight",
  "propDefinitions": {
    "name": {
      "type": "string",
      "defaultValue": "John Doe"
    },
    "config": {
      "type": "object",
      "defaultValue": {
        "height": 30,
        "width": 30
      }
    },
    "url": {
      "type": "string",
      "defaultValue": "http://lorempixel.com/150/150/"
    },
    "flag": {
      "type": "string",
      "defaultValue": "🇷🇴"
    },
    "link": {
      "type": "string",
      "defaultValue": "https://twitter.com/teleportHQio"
    },
    "displayLink": {
      "type": "string",
      "defaultValue": "@teleportHQ"
    },
    "bio": {
      "type": "string",
      "defaultValue": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
    }
  },
  "node": {
    "type": "element",
    "content": {
      "elementType": "container",
      "style": {
        "width": "300px",
        "border": "1px solid #ccc",
        "padding": "10px",
        "margin": "5px"
      },
      "children": [
        {
            "type": "element",
            "content": {
                "elementType": "html-node",
                "attrs": {
                    "html": {
                        "type": "raw",
                        "content": "<blockquote class='twitter-tweet'><p lang='en' dir='ltr'>Feels like the last 20 mins of Don't Look Up right about now…</p>&mdash; Netflix (@netflix) <a href='https://twitter.com/netflix/status/1593420772948598784?ref_src=twsrc%5Etfw'>November 18, 2022</a></blockquote> <script src='https://platform.twitter.com/widgets.js'></script>"
                    }
                }
            }
        },
        {
          "type": "element",
          "content": {
            "elementType": "component",
            "semanticType": "Sample",
            "dependency": {
              "type": "local"
            }
          }
        },
        {
          "type": "element",
          "content": {
            "elementType": "component",
            "semanticType": "Sample",
            "dependency": {
              "type": "local"
            }
          }
        },
        {
          "type": "element",
          "content": {
            "elementType": "image",
            "attrs": {
              "url": "$props.url"
            },
            "style": {
              "display": "block",
              "margin": "auto",
              "border-radius": "100%"
            }
          }
        },
        {
          "type": "element",
          "content": {
            "elementType": "container",
            "style": {
              "height": {
                "type": "dynamic",
                "content": {
                  "referenceType": "prop",
                  "id": "config.height"
                }
              },
              "width": {
                "type": "dynamic",
                "content": {
                  "referenceType": "prop",
                  "id": "config.width"
                }
              }
            },
            "children": [
              {
                "type" : "static",
                "content": "Simple static node"
              }
            ]
          }
        },
        {
          "type": "element",
          "content": {
            "elementType": "textblock",
            "style": {
              "font-size": "22px",
              "font-weight": "900",
              "margin": "0",
              "text-align": "center"
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "text",
                  "style": {
                    "margin-right": "7px",
                    "font-size": "28px",
                    "vertical-align": "middle"
                  },
                  "children": [
                    {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "prop",
                        "id": "flag"
                      }
                    }
                  ]
                }
              },
              {
                "type": "dynamic",
                "content": {
                  "referenceType": "prop",
                  "id": "name"
                }
              }
            ]
          }
        },
        {
          "type": "element",
          "content": {
            "elementType": "textblock",
            "style": {
              "fontSize": "16px",
              "margin": "0",
              "text-align": "center"
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "link",
                  "style": {
                    "text-decoration": "none",
                    "color": "#822cec"
                  },
                  "attrs": {
                    "url": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "prop",
                        "id": "link"
                      }
                    }
                  },
                  "children": [
                    "$props.displayLink"
                  ]
                }
              }
            ]
          }
        },
        {
          "type": "element",
          "content": {
            "elementType": "textblock",
            "children": [
              {
                "type": "dynamic",
                "content": {
                  "referenceType": "prop",
                  "id": "bio"
                }
              }
            ]
          }
        }
      ]
    }
  }
}

'''
'''--- examples/uidl-samples/project-tailwind.json ---
{
  "name": "Nocturnal Tender Magpie",
  "globals": {
    "settings": {
      "title": "Nocturnal Tender Magpie",
      "language": "en"
    },
    "assets": [
      {
        "type": "style",
        "attrs": {
          "data-tag": {
            "type": "static",
            "content": "reset-style-sheet"
          }
        },
        "content": "html {  line-height: 1.15;}body {  margin: 0;}* {  box-sizing: border-box;  border-width: 0;  border-style: solid;}p,li,ul,pre,div,h1,h2,h3,h4,h5,h6 {  margin: 0;  padding: 0;}button,input,optgroup,select,textarea {  font-family: inherit;  font-size: 100%;  line-height: 1.15;  margin: 0;}button,select {  text-transform: none;}button,[type=\"button\"],[type=\"reset\"],[type=\"submit\"] {  -webkit-appearance: button;}button::-moz-focus-inner,[type=\"button\"]::-moz-focus-inner,[type=\"reset\"]::-moz-focus-inner,[type=\"submit\"]::-moz-focus-inner {  border-style: none;  padding: 0;}button:-moz-focus,[type=\"button\"]:-moz-focus,[type=\"reset\"]:-moz-focus,[type=\"submit\"]:-moz-focus {  outline: 1px dotted ButtonText;}a {  color: inherit;  text-decoration: inherit;}input {  padding: 2px 4px;}img {  display: block;}html { scroll-behavior: smooth  }"
      },
      {
        "type": "style",
        "attrs": {
          "data-tag": {
            "type": "static",
            "content": "default-style-sheet"
          }
        },
        "content": "\n  html {\n    font-family: Inter;\n    font-size: 16px;\n  }\n\n  body {\n    font-weight: 400;\n    font-style:normal;\n    text-decoration: none;\n    text-transform: none;\n    letter-spacing: normal;\n    line-height: 1.15;\n    color: var(--dl-color-gray-black);\n    background-color: var(--dl-color-gray-white);\n    \n  }\n\n  \n"
      },
      {
        "type": "font",
        "path": "https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap",
        "attrs": {
          "data-tag": {
            "type": "static",
            "content": "font"
          }
        }
      }
    ],
    "meta": [
      {
        "name": "viewport",
        "content": "width=device-width, initial-scale=1.0"
      },
      {
        "charSet": "utf-8"
      },
      {
        "property": "twitter:card",
        "content": "summary_large_image"
      }
    ],
    "customCode": {}
  },
  "root": {
    "name": "App",
    "designLanguage": {
      "tokens": {
        "--dl-color-primary-300": {
          "type": "static",
          "content": "#0074F0"
        },
        "--dl-radius-radius-radius8": {
          "type": "static",
          "content": "8px"
        },
        "--dl-space-space-unit": {
          "type": "static",
          "content": "16px"
        },
        "--dl-size-size-maxwidth": {
          "type": "static",
          "content": "1400px"
        },
        "--dl-space-space-oneandhalfunits": {
          "type": "static",
          "content": "24px"
        },
        "--dl-color-danger-700": {
          "type": "static",
          "content": "#E14747"
        },
        "--dl-size-size-xxlarge": {
          "type": "static",
          "content": "288px"
        },
        "--dl-size-size-xsmall": {
          "type": "static",
          "content": "16px"
        },
        "--dl-space-space-fiveunits": {
          "type": "static",
          "content": "80px"
        },
        "--dl-color-danger-500": {
          "type": "static",
          "content": "#BF2626"
        },
        "--dl-radius-radius-round": {
          "type": "static",
          "content": "50%"
        },
        "--dl-space-space-sixunits": {
          "type": "static",
          "content": "96px"
        },
        "--dl-radius-radius-radius4": {
          "type": "static",
          "content": "4px"
        },
        "--dl-color-success-700": {
          "type": "static",
          "content": "#4CC366"
        },
        "--dl-radius-radius-radius2": {
          "type": "static",
          "content": "2px"
        },
        "--dl-space-space-halfunit": {
          "type": "static",
          "content": "8px"
        },
        "--dl-color-gray-500": {
          "type": "static",
          "content": "#595959"
        },
        "--dl-color-gray-black": {
          "type": "static",
          "content": "#000000"
        },
        "--dl-color-primary-500": {
          "type": "static",
          "content": "#14A9FF"
        },
        "--dl-color-primary-100": {
          "type": "static",
          "content": "#003EB3"
        },
        "--dl-color-success-500": {
          "type": "static",
          "content": "#32A94C"
        },
        "--dl-color-gray-700": {
          "type": "static",
          "content": "#999999"
        },
        "--dl-color-primary-700": {
          "type": "static",
          "content": "#85DCFF"
        },
        "--dl-size-size-small": {
          "type": "static",
          "content": "48px"
        },
        "--dl-space-space-fourunits": {
          "type": "static",
          "content": "64px"
        },
        "--dl-color-gray-900": {
          "type": "static",
          "content": "#D9D9D9"
        },
        "--dl-color-danger-300": {
          "type": "static",
          "content": "#A22020"
        },
        "--dl-space-space-threeunits": {
          "type": "static",
          "content": "48px"
        },
        "--dl-size-size-xlarge": {
          "type": "static",
          "content": "192px"
        },
        "--dl-size-size-medium": {
          "type": "static",
          "content": "96px"
        },
        "--dl-color-success-300": {
          "type": "static",
          "content": "#199033"
        },
        "--dl-space-space-twounits": {
          "type": "static",
          "content": "32px"
        },
        "--dl-color-gray-white": {
          "type": "static",
          "content": "#FFFFFF"
        },
        "--dl-size-size-large": {
          "type": "static",
          "content": "144px"
        }
      }
    },
    "styleSetDefinitions": {
      "button": {
        "type": "reusable-project-style-map",
        "content": {
          "color": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-black"
            }
          },
          "display": {
            "type": "static",
            "content": "inline-block"
          },
          "padding": {
            "type": "static",
            "content": "0.5rem 1rem"
          },
          "borderColor": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-black"
            }
          },
          "borderWidth": {
            "type": "static",
            "content": "1px"
          },
          "borderRadius": {
            "type": "static",
            "content": "4px"
          },
          "backgroundColor": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-white"
            }
          }
        },
        "conditions": []
      },
      "input": {
        "type": "reusable-project-style-map",
        "content": {
          "color": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-black"
            }
          },
          "cursor": {
            "type": "static",
            "content": "auto"
          },
          "padding": {
            "type": "static",
            "content": "0.5rem 1rem"
          },
          "borderColor": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-black"
            }
          },
          "borderWidth": {
            "type": "static",
            "content": "1px"
          },
          "borderRadius": {
            "type": "static",
            "content": "4px"
          },
          "backgroundColor": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-white"
            }
          }
        },
        "conditions": []
      },
      "textarea": {
        "type": "reusable-project-style-map",
        "content": {
          "color": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-black"
            }
          },
          "cursor": {
            "type": "static",
            "content": "auto"
          },
          "padding": {
            "type": "static",
            "content": "0.5rem"
          },
          "borderColor": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-black"
            }
          },
          "borderWidth": {
            "type": "static",
            "content": "1px"
          },
          "borderRadius": {
            "type": "static",
            "content": "4px"
          },
          "backgroundColor": {
            "type": "dynamic",
            "content": {
              "referenceType": "token",
              "id": "--dl-color-gray-white"
            }
          }
        },
        "conditions": []
      },
      "list": {
        "type": "reusable-project-style-map",
        "content": {
          "width": {
            "type": "static",
            "content": "100%"
          },
          "margin": {
            "type": "static",
            "content": "1em 0px 1em 0px"
          },
          "display": {
            "type": "static",
            "content": "block"
          },
          "padding": {
            "type": "static",
            "content": "0px 0px 0px 1.5rem"
          },
          "listStyleType": {
            "type": "static",
            "content": "none"
          },
          "listStylePosition": {
            "type": "static",
            "content": "outside"
          }
        },
        "conditions": []
      },
      "list-item": {
        "type": "reusable-project-style-map",
        "content": {
          "display": {
            "type": "static",
            "content": "list-item"
          }
        },
        "conditions": []
      },
      "teleport-show": {
        "type": "reusable-project-style-map",
        "content": {
          "display": {
            "type": "static",
            "content": "flex !important"
          }
        },
        "conditions": []
      },
      "content": {
        "type": "reusable-project-style-map",
        "content": {
          "fontSize": {
            "type": "static",
            "content": "16px"
          },
          "fontFamily": {
            "type": "static",
            "content": "Inter"
          },
          "fontWeight": {
            "type": "static",
            "content": "400"
          },
          "lineHeight": {
            "type": "static",
            "content": "1.15"
          },
          "textTransform": {
            "type": "static",
            "content": "none"
          },
          "textDecoration": {
            "type": "static",
            "content": "none"
          }
        }
      },
      "heading": {
        "type": "reusable-project-style-map",
        "content": {
          "fontSize": {
            "type": "static",
            "content": "32px"
          },
          "fontFamily": {
            "type": "static",
            "content": "Inter"
          },
          "fontWeight": {
            "type": "static",
            "content": "700"
          },
          "lineHeight": {
            "type": "static",
            "content": "1.15"
          },
          "textTransform": {
            "type": "static",
            "content": "none"
          },
          "textDecoration": {
            "type": "static",
            "content": "none"
          }
        }
      }
    },
    "stateDefinitions": {
      "route": {
        "type": "string",
        "defaultValue": "Home",
        "values": [
          {
            "value": "Home",
            "seo": {
              "title": "Nocturnal Tender Magpie",
              "metaTags": [
                {
                  "property": "og:title",
                  "content": "Nocturnal Tender Magpie"
                }
              ]
            }
          },
          {
            "value": "Fallback",
            "seo": {
              "title": "Fallback Page"
            },
            "pageOptions": {
              "fallback": true
            }
          }
        ]
      }
    },
    "node": {
      "type": "element",
      "content": {
        "elementType": "Router",
        "children": [
          {
            "type": "conditional",
            "content": {
              "node": {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "referencedStyles": {},
                  "abilities": {},
                  "style": {
                    "width": {
                      "type": "static",
                      "content": "100%"
                    },
                    "display": {
                      "type": "static",
                      "content": "flex"
                    },
                    "overflow": {
                      "type": "static",
                      "content": "auto"
                    },
                    "minHeight": {
                      "type": "static",
                      "content": "100vh"
                    },
                    "alignItems": {
                      "type": "static",
                      "content": "center"
                    },
                    "flexDirection": {
                      "type": "static",
                      "content": "row"
                    },
                    "justifyContent": {
                      "type": "static",
                      "content": "center"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "text",
                        "referencedStyles": {
                          "e19e6d07-860e-4fe7-9d0d-a23a02c58157": {
                            "type": "style-map",
                            "content": {
                              "conditions": [
                                {
                                  "content": "hover",
                                  "conditionType": "element-state"
                                }
                              ],
                              "mapType": "inlined",
                              "styles": {
                                "color": {
                                  "type": "dynamic",
                                  "content": {
                                    "referenceType": "token",
                                    "id": "--dl-color-primary-100"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "abilities": {},
                        "style": {
                          "color": {
                            "type": "dynamic",
                            "content": {
                              "referenceType": "token",
                              "id": "--dl-color-primary-500"
                            }
                          },
                          "transition": {
                            "type": "static",
                            "content": "0.3s"
                          }
                        },
                        "children": [
                          {
                            "type": "static",
                            "content": "Heading"
                          }
                        ],
                        "semanticType": "h1"
                      }
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "text",
                        "referencedStyles": {
                          "85acbda4-547b-464e-9027-9c78f8822687": {
                            "type": "style-map",
                            "content": {
                              "mapType": "component-referenced",
                              "content": {
                                "type": "static",
                                "content": "hover:text-purple-100 text-purple-500"
                              }
                            }
                          }
                        },
                        "abilities": {},
                        "children": [
                          {
                            "type": "static",
                            "content": "Heading"
                          }
                        ],
                        "semanticType": "h1"
                      }
                    }
                  ],
                  "semanticType": "div"
                }
              },
              "value": "Home",
              "reference": {
                "type": "dynamic",
                "content": {
                  "referenceType": "state",
                  "id": "route"
                }
              }
            }
          },
          {
            "type": "conditional",
            "content": {
              "node": {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "referencedStyles": {},
                  "abilities": {},
                  "style": {
                    "width": {
                      "type": "static",
                      "content": "100%"
                    },
                    "display": {
                      "type": "static",
                      "content": "flex"
                    },
                    "overflow": {
                      "type": "static",
                      "content": "auto"
                    },
                    "minHeight": {
                      "type": "static",
                      "content": "100vh"
                    },
                    "alignItems": {
                      "type": "static",
                      "content": "flex-start"
                    },
                    "flexDirection": {
                      "type": "static",
                      "content": "column"
                    },
                    "justifyContent": {
                      "type": "static",
                      "content": "flex-start"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "container",
                        "children": [
                          { "type": "static", "content": "This is a fallback page"}
                        ]
                      }
                    }
                  ],
                  "semanticType": "div"
                }
              },
              "value": "Fallback",
              "reference": {
                "type": "dynamic",
                "content": {
                  "referenceType": "state",
                  "id": "route"
                }
              }
            }
          }
        ]
      }
    }
  },
  "components": {}
}
'''
'''--- examples/uidl-samples/project.json ---
{
  "name": "New Project3",
  "globals": {
      "settings": {
          "title": "New Project3",
          "language": "en"
      },
      "assets": [
          {
              "type": "style",
              "content": "html {  line-height: 1.15;}body {  margin: 0;}* {  box-sizing: border-box;  border-width: 0;  border-style: solid;}p,li,ul,pre,div,h1,h2,h3,h4,h5,h6 {  margin: 0;  padding: 0;}button,input,optgroup,select,textarea {  font-family: inherit;  font-size: 100%;  line-height: 1.15;  margin: 0;}button,select {  text-transform: none;}button,[type=\"button\"],[type=\"reset\"],[type=\"submit\"] {  -webkit-appearance: button;}button::-moz-focus-inner,[type=\"button\"]::-moz-focus-inner,[type=\"reset\"]::-moz-focus-inner,[type=\"submit\"]::-moz-focus-inner {  border-style: none;  padding: 0;}button:-moz-focus,[type=\"button\"]:-moz-focus,[type=\"reset\"]:-moz-focus,[type=\"submit\"]:-moz-focus {  outline: 1px dotted ButtonText;}a {  color: inherit;  text-decoration: inherit;}input {  padding: 2px 4px;}img {  display: block;}"
          },
          {
              "type": "style",
              "content": "\n  html {\n    font-family: Inter;\n    font-size: 16px;\n  }\n\n  body {\n    font-weight: 400;\n    font-style:normal;\n    text-decoration: none;\n    text-transform: none;\n    letter-spacing: normal;\n    line-height: 1.15;\n    color: var(--dl-color-gray-black);\n    background-color: var(--dl-color-gray-white);\n    \n  }\n\n  \n"
          },
          {
              "type": "font",
              "path": "",
              "name": "Arial"
          },
          {
              "type": "font",
              "path": "https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap",
              "name": "Inter"
          },
          {
              "type": "script",
              "content": "https://unpkg.com/@teleporthq/teleport-custom-scripts"
          }
      ],
      "meta": [
          {
              "name": "viewport",
              "content": "width=device-width, initial-scale=1.0"
          },
          {
              "charSet": "utf-8"
          },
          {
              "property": "twitter:card",
              "content": "summary_large_image"
          }
      ],
      "customCode": {
          "head": "<!--This is the head section-->\n<!-- <script type=\"text/javascript\"> ... </script> -->\n<script src='https://unpkg.com/@teleporthq/teleport-custom-scripts'></script>"
      }
  },
  "root": {
      "name": "App",
      "designLanguage": {
          "tokens": {
              "--dl-space-space-fourunits": {
                  "type": "static",
                  "content": "64px"
              },
              "--dl-space-space-threeunits": {
                  "type": "static",
                  "content": "48px"
              },
              "--dl-space-space-twounits": {
                  "type": "static",
                  "content": "32px"
              },
              "--dl-color-success-500": {
                  "type": "static",
                  "content": "#32A94C"
              },
              "--dl-color-danger-700": {
                  "type": "static",
                  "content": "#E14747"
              },
              "--dl-color-danger-500": {
                  "type": "static",
                  "content": "#BF2626"
              },
              "--dl-color-primary-100": {
                  "type": "static",
                  "content": "#003EB3"
              },
              "--dl-radius-radius-round": {
                  "type": "static",
                  "content": "50%"
              },
              "--dl-color-success-300": {
                  "type": "static",
                  "content": "#199033"
              },
              "--dl-size-size-small": {
                  "type": "static",
                  "content": "48px"
              },
              "--dl-color-danger-300": {
                  "type": "static",
                  "content": "#A22020"
              },
              "--dl-size-size-medium": {
                  "type": "static",
                  "content": "96px"
              },
              "--dl-size-size-xsmall": {
                  "type": "static",
                  "content": "16px"
              },
              "--dl-radius-radius-radius8": {
                  "type": "static",
                  "content": "8px"
              },
              "--dl-color-gray-white": {
                  "type": "static",
                  "content": "#FFFFFF"
              },
              "--dl-color-gray-700": {
                  "type": "static",
                  "content": "#999999"
              },
              "--dl-size-size-maxwidth": {
                  "type": "static",
                  "content": "1400px"
              },
              "--dl-radius-radius-radius4": {
                  "type": "static",
                  "content": "4px"
              },
              "--dl-color-primary-300": {
                  "type": "static",
                  "content": "#0074F0"
              },
              "--dl-color-primary-500": {
                  "type": "static",
                  "content": "#14A9FF"
              },
              "--dl-size-size-xlarge": {
                  "type": "static",
                  "content": "192px"
              },
              "--dl-color-success-700": {
                  "type": "static",
                  "content": "#4CC366"
              },
              "--dl-space-space-unit": {
                  "type": "static",
                  "content": "16px"
              },
              "--dl-color-primary-700": {
                  "type": "static",
                  "content": "#85DCFF"
              },
              "--dl-space-space-oneandhalfunits": {
                  "type": "static",
                  "content": "24px"
              },
              "--dl-color-gray-900": {
                  "type": "static",
                  "content": "#D9D9D9"
              },
              "--dl-space-space-sixunits": {
                  "type": "static",
                  "content": "96px"
              },
              "--dl-radius-radius-radius2": {
                  "type": "static",
                  "content": "2px"
              },
              "--dl-color-gray-500": {
                  "type": "static",
                  "content": "#595959"
              },
              "--dl-color-gray-black": {
                  "type": "static",
                  "content": "#000000"
              },
              "--dl-size-size-large": {
                  "type": "static",
                  "content": "144px"
              },
              "--dl-space-space-halfunit": {
                  "type": "static",
                  "content": "8px"
              },
              "--dl-space-space-fiveunits": {
                  "type": "static",
                  "content": "80px"
              },
              "--dl-size-size-xxlarge": {
                  "type": "static",
                  "content": "288px"
              }
          }
      },
      "styleSetDefinitions": {
          "button": {
              "type": "reusable-project-style-map",
              "content": {
                  "fontSize": {
                      "type": "static",
                      "content": "14px"
                  },
                  "fontFamily": {
                      "type": "static",
                      "content": "Arial"
                  },
                  "fontWeight": {
                      "type": "static",
                      "content": "500"
                  },
                  "textTransform": {
                      "type": "static",
                      "content": "none"
                  },
                  "textDecoration": {
                      "type": "static",
                      "content": "none"
                  }
              }
          },
          "input": {
              "type": "reusable-project-style-map",
              "content": {
                  "color": {
                      "type": "dynamic",
                      "content": {
                          "referenceType": "token",
                          "id": "--dl-color-gray-black"
                      }
                  },
                  "cursor": {
                      "type": "static",
                      "content": "auto"
                  },
                  "padding": {
                      "type": "static",
                      "content": "0.5rem 1rem"
                  },
                  "borderColor": {
                      "type": "dynamic",
                      "content": {
                          "referenceType": "token",
                          "id": "--dl-color-gray-black"
                      }
                  },
                  "borderWidth": {
                      "type": "static",
                      "content": "1px"
                  },
                  "borderRadius": {
                      "type": "static",
                      "content": "4px"
                  },
                  "backgroundColor": {
                      "type": "dynamic",
                      "content": {
                          "referenceType": "token",
                          "id": "--dl-color-gray-white"
                      }
                  }
              },
              "conditions": []
          },
          "textarea": {
              "type": "reusable-project-style-map",
              "content": {
                  "color": {
                      "type": "dynamic",
                      "content": {
                          "referenceType": "token",
                          "id": "--dl-color-gray-black"
                      }
                  },
                  "cursor": {
                      "type": "static",
                      "content": "auto"
                  },
                  "padding": {
                      "type": "static",
                      "content": "0.5rem"
                  },
                  "borderColor": {
                      "type": "dynamic",
                      "content": {
                          "referenceType": "token",
                          "id": "--dl-color-gray-black"
                      }
                  },
                  "borderWidth": {
                      "type": "static",
                      "content": "1px"
                  },
                  "borderRadius": {
                      "type": "static",
                      "content": "4px"
                  },
                  "backgroundColor": {
                      "type": "dynamic",
                      "content": {
                          "referenceType": "token",
                          "id": "--dl-color-gray-white"
                      }
                  }
              },
              "conditions": []
          },
          "list": {
              "type": "reusable-project-style-map",
              "content": {
                  "width": {
                      "type": "static",
                      "content": "100%"
                  },
                  "margin": {
                      "type": "static",
                      "content": "1em 0px 1em 0px"
                  },
                  "display": {
                      "type": "static",
                      "content": "block"
                  },
                  "padding": {
                      "type": "static",
                      "content": "0px 0px 0px 1.5rem"
                  },
                  "listStyleType": {
                      "type": "static",
                      "content": "none"
                  },
                  "listStylePosition": {
                      "type": "static",
                      "content": "outside"
                  }
              },
              "conditions": []
          },
          "list-item": {
              "type": "reusable-project-style-map",
              "content": {
                  "display": {
                      "type": "static",
                      "content": "list-item"
                  }
              },
              "conditions": []
          },
          "teleport-show": {
              "type": "reusable-project-style-map",
              "content": {
                  "display": {
                      "type": "static",
                      "content": "flex !important"
                  }
              },
              "conditions": []
          },
          "primary-button": {
              "type": "reusable-project-style-map",
              "content": {
                  "backgroundColor": {
                      "type": "dynamic",
                      "content": {
                          "referenceType": "token",
                          "id": "--dl-color-gray-black"
                      }
                  },
                  "color": {
                      "type": "static",
                      "content": "white"
                  }
              },
              "conditions": []
          },
          "secondary-button": {
              "type": "reusable-project-style-map",
              "content": {
                  "color": {
                      "type": "dynamic",
                      "content": {
                          "referenceType": "token",
                          "id": "--dl-color-gray-black"
                      }
                  },
                  "border": {
                      "type": "static",
                      "content": "1px solid"
                  }
              },
              "conditions": []
          },
          "content": {
              "type": "reusable-project-style-map",
              "content": {
                  "fontSize": {
                      "type": "static",
                      "content": "16px"
                  },
                  "fontFamily": {
                      "type": "static",
                      "content": "Inter"
                  },
                  "fontWeight": {
                      "type": "static",
                      "content": "400"
                  },
                  "lineHeight": {
                      "type": "static",
                      "content": "1.15"
                  },
                  "textTransform": {
                      "type": "static",
                      "content": "none"
                  },
                  "textDecoration": {
                      "type": "static",
                      "content": "none"
                  }
              }
          },
          "heading": {
              "type": "reusable-project-style-map",
              "content": {
                  "fontSize": {
                      "type": "static",
                      "content": "32px"
                  },
                  "fontFamily": {
                      "type": "static",
                      "content": "Inter"
                  },
                  "fontWeight": {
                      "type": "static",
                      "content": "700"
                  },
                  "lineHeight": {
                      "type": "static",
                      "content": "1.15"
                  },
                  "textTransform": {
                      "type": "static",
                      "content": "none"
                  },
                  "textDecoration": {
                      "type": "static",
                      "content": "none"
                  }
              }
          }
      },
      "stateDefinitions": {
          "route": {
              "type": "string",
              "defaultValue": "Home",
              "values": [
                  {
                      "value": "Home",
                      "seo": {
                          "title": "New Project3",
                          "metaTags": [
                              {
                                  "property": "og:title",
                                  "content": "New Project3"
                              }
                          ]
                      }
                  },
                  {
                      "value": "About",
                      "seo": {
                          "title": "About - New Project3",
                          "metaTags": [
                              {
                                  "property": "og:title",
                                  "content": "About - New Project3"
                              }
                          ]
                      }
                  },
                  {
                      "value": "Fallback",
                      "seo": {
                          "title": "Fallback Page"
                      },
                      "pageOptions": {
                          "fallback": true
                      }
                  }
              ]
          }
      },
      "node": {
          "type": "element",
          "content": {
              "elementType": "Router",
              "children": [
                  {
                      "type": "conditional",
                      "content": {
                          "node": {
                              "type": "element",
                              "content": {
                                  "elementType": "container",
                                  "referencedStyles": {
                                      "9f75e760-4477-44cd-8532-36c760cbc8aa": {
                                          "type": "style-map",
                                          "content": {
                                              "conditions": [
                                                  {
                                                      "maxWidth": 479,
                                                      "conditionType": "screen-size"
                                                  }
                                              ],
                                              "mapType": "inlined",
                                              "styles": {
                                                  "color": {
                                                      "type": "static",
                                                      "content": "blue"
                                                  }
                                              }
                                          }
                                      }
                                  },
                                  "abilities": {},
                                  "style": {
                                      "width": {
                                          "type": "static",
                                          "content": "100%"
                                      },
                                      "display": {
                                          "type": "static",
                                          "content": "flex"
                                      },
                                      "overflow": {
                                          "type": "static",
                                          "content": "auto"
                                      },
                                      "minHeight": {
                                          "type": "static",
                                          "content": "100vh"
                                      },
                                      "alignItems": {
                                          "type": "static",
                                          "content": "center"
                                      },
                                      "flexDirection": {
                                          "type": "static",
                                          "content": "column"
                                      },
                                      "justifyContent": {
                                          "type": "static",
                                          "content": "flex-start"
                                      }
                                  },
                                  "children": [
                                      {
                                          "type": "element",
                                          "content": {
                                              "elementType": "lottie-node",
                                              "style": {
                                                  "width": "200px",
                                                  "height": "200px"
                                              },
                                              "attrs": {
                                                  "src": {
                                                      "type": "static",
                                                      "content": "https://assets9.lottiefiles.com/datafiles/gUENLc1262ccKIO/data.json"
                                                  },
                                                  "autoplay": {
                                                      "type": "static",
                                                      "content": "true"
                                                  }
                                              }
                                          }
                                      },
                                      {
                                          "type": "element",
                                          "content": {
                                              "elementType": "component",
                                              "dependency": {
                                                  "type": "local"
                                              },
                                              "referencedStyles": {},
                                              "abilities": {},
                                              "children": [],
                                              "semanticType": "Header"
                                          }
                                      },
                                      {
                                          "type": "element",
                                          "content": {
                                              "elementType": "component",
                                              "dependency": {
                                                  "type": "local"
                                              },
                                              "referencedStyles": {},
                                              "abilities": {},
                                              "children": [],
                                              "semanticType": "Hero"
                                          }
                                      },
                                      {
                                          "type": "element",
                                          "content": {
                                              "elementType": "component",
                                              "dependency": {
                                                  "type": "local"
                                              },
                                              "referencedStyles": {},
                                              "abilities": {},
                                              "children": [],
                                              "semanticType": "Features"
                                          }
                                      },
                                      {
                                          "type": "element",
                                          "content": {
                                              "elementType": "component",
                                              "dependency": {
                                                  "type": "local"
                                              },
                                              "referencedStyles": {},
                                              "abilities": {},
                                              "children": [],
                                              "semanticType": "Footer"
                                          }
                                      }
                                  ],
                                  "semanticType": "div"
                              }
                          },
                          "value": "Home",
                          "reference": {
                              "type": "dynamic",
                              "content": {
                                  "referenceType": "state",
                                  "id": "route"
                              }
                          }
                      }
                  },
                  {
                      "type": "conditional",
                      "content": {
                          "node": {
                              "type": "element",
                              "content": {
                                  "elementType": "container",
                                  "referencedStyles": {},
                                  "abilities": {},
                                  "style": {
                                      "width": {
                                          "type": "static",
                                          "content": "100%"
                                      },
                                      "display": {
                                          "type": "static",
                                          "content": "flex"
                                      },
                                      "overflow": {
                                          "type": "static",
                                          "content": "auto"
                                      },
                                      "minHeight": {
                                          "type": "static",
                                          "content": "100vh"
                                      },
                                      "alignItems": {
                                          "type": "static",
                                          "content": "flex-start"
                                      },
                                      "flexDirection": {
                                          "type": "static",
                                          "content": "column"
                                      },
                                      "justifyContent": {
                                          "type": "static",
                                          "content": "flex-start"
                                      }
                                  },
                                  "children": [
                                      {
                                          "type": "element",
                                          "content": {
                                              "elementType": "component",
                                              "dependency": {
                                                  "type": "local"
                                              },
                                              "referencedStyles": {},
                                              "abilities": {},
                                              "attrs": {
                                                  "rootClassName": {
                                                      "type": "comp-style",
                                                      "content": "rootClassName"
                                                  }
                                              },
                                              "children": [],
                                              "semanticType": "Header"
                                          }
                                      },
                                      {
                                          "type": "element",
                                          "content": {
                                              "elementType": "container",
                                              "name": "Gallery",
                                              "referencedStyles": {
                                                  "785deea7-5086-40af-9e41-9a53bbb0fa28": {
                                                      "type": "style-map",
                                                      "content": {
                                                          "conditions": [
                                                              {
                                                                  "conditionType": "screen-size",
                                                                  "maxWidth": 479
                                                              }
                                                          ],
                                                          "mapType": "inlined",
                                                          "styles": {
                                                              "padding": {
                                                                  "type": "dynamic",
                                                                  "content": {
                                                                      "referenceType": "token",
                                                                      "id": "--dl-space-space-unit"
                                                                  }
                                                              }
                                                          }
                                                      }
                                                  },
                                                  "ff5caa9e-fea4-44a8-900e-a4fc4f90d3e4": {
                                                      "type": "style-map",
                                                      "content": {
                                                          "conditions": [
                                                              {
                                                                  "conditionType": "screen-size",
                                                                  "maxWidth": 767
                                                              }
                                                          ],
                                                          "mapType": "inlined",
                                                          "styles": {
                                                              "paddingLeft": {
                                                                  "type": "dynamic",
                                                                  "content": {
                                                                      "referenceType": "token",
                                                                      "id": "--dl-space-space-twounits"
                                                                  }
                                                              },
                                                              "paddingRight": {
                                                                  "type": "dynamic",
                                                                  "content": {
                                                                      "referenceType": "token",
                                                                      "id": "--dl-space-space-twounits"
                                                                  }
                                                              }
                                                          }
                                                      }
                                                  }
                                              },
                                              "abilities": {},
                                              "style": {
                                                  "width": {
                                                      "type": "static",
                                                      "content": "100%"
                                                  },
                                                  "display": {
                                                      "type": "static",
                                                      "content": "flex"
                                                  },
                                                  "maxWidth": {
                                                      "type": "dynamic",
                                                      "content": {
                                                          "referenceType": "token",
                                                          "id": "--dl-size-size-maxwidth"
                                                      }
                                                  },
                                                  "alignItems": {
                                                      "type": "static",
                                                      "content": "center"
                                                  },
                                                  "paddingTop": {
                                                      "type": "dynamic",
                                                      "content": {
                                                          "referenceType": "token",
                                                          "id": "--dl-space-space-twounits"
                                                      }
                                                  },
                                                  "paddingLeft": {
                                                      "type": "dynamic",
                                                      "content": {
                                                          "referenceType": "token",
                                                          "id": "--dl-space-space-threeunits"
                                                      }
                                                  },
                                                  "paddingRight": {
                                                      "type": "dynamic",
                                                      "content": {
                                                          "referenceType": "token",
                                                          "id": "--dl-space-space-threeunits"
                                                      }
                                                  },
                                                  "flexDirection": {
                                                      "type": "static",
                                                      "content": "column"
                                                  },
                                                  "paddingBottom": {
                                                      "type": "dynamic",
                                                      "content": {
                                                          "referenceType": "token",
                                                          "id": "--dl-space-space-twounits"
                                                      }
                                                  }
                                              },
                                              "children": [
                                                  {
                                                      "type": "element",
                                                      "content": {
                                                          "elementType": "text",
                                                          "referencedStyles": {},
                                                          "abilities": {},
                                                          "style": {
                                                              "fontSize": {
                                                                  "type": "static",
                                                                  "content": "3rem"
                                                              },
                                                              "textAlign": {
                                                                  "type": "static",
                                                                  "content": "center"
                                                              }
                                                          },
                                                          "children": [
                                                              {
                                                                  "type": "static",
                                                                  "content": "Our portfolio"
                                                              }
                                                          ],
                                                          "semanticType": "h1"
                                                      }
                                                  },
                                                  {
                                                      "type": "element",
                                                      "content": {
                                                          "elementType": "text",
                                                          "referencedStyles": {
                                                              "f4a07a8b-08f2-46d4-a47b-33b57e57e16e": {
                                                                  "type": "style-map",
                                                                  "content": {
                                                                      "conditions": [
                                                                          {
                                                                              "conditionType": "screen-size",
                                                                              "maxWidth": 767
                                                                          }
                                                                      ],
                                                                      "mapType": "inlined",
                                                                      "styles": {
                                                                          "paddingLeft": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-space-space-unit"
                                                                              }
                                                                          },
                                                                          "paddingRight": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-space-space-unit"
                                                                              }
                                                                          }
                                                                      }
                                                                  }
                                                              },
                                                              "088b3180-ba7f-4d85-9124-4007789b5d1d": {
                                                                  "type": "style-map",
                                                                  "content": {
                                                                      "conditions": [
                                                                          {
                                                                              "conditionType": "screen-size",
                                                                              "maxWidth": 991
                                                                          }
                                                                      ],
                                                                      "mapType": "inlined",
                                                                      "styles": {
                                                                          "textAlign": {
                                                                              "type": "static",
                                                                              "content": "center"
                                                                          }
                                                                      }
                                                                  }
                                                              }
                                                          },
                                                          "abilities": {},
                                                          "style": {
                                                              "color": {
                                                                  "type": "dynamic",
                                                                  "content": {
                                                                      "referenceType": "token",
                                                                      "id": "--dl-color-gray-700"
                                                                  }
                                                              },
                                                              "marginTop": {
                                                                  "type": "dynamic",
                                                                  "content": {
                                                                      "referenceType": "token",
                                                                      "id": "--dl-space-space-twounits"
                                                                  }
                                                              },
                                                              "textAlign": {
                                                                  "type": "static",
                                                                  "content": "center"
                                                              },
                                                              "paddingLeft": {
                                                                  "type": "dynamic",
                                                                  "content": {
                                                                      "referenceType": "token",
                                                                      "id": "--dl-space-space-threeunits"
                                                                  }
                                                              },
                                                              "marginBottom": {
                                                                  "type": "dynamic",
                                                                  "content": {
                                                                      "referenceType": "token",
                                                                      "id": "--dl-space-space-twounits"
                                                                  }
                                                              },
                                                              "paddingRight": {
                                                                  "type": "dynamic",
                                                                  "content": {
                                                                      "referenceType": "token",
                                                                      "id": "--dl-space-space-threeunits"
                                                                  }
                                                              }
                                                          },
                                                          "children": [
                                                              {
                                                                  "type": "element",
                                                                  "content": {
                                                                      "elementType": "text",
                                                                      "referencedStyles": {},
                                                                      "abilities": {},
                                                                      "children": [
                                                                          {
                                                                              "type": "element",
                                                                              "content": {
                                                                                  "elementType": "text",
                                                                                  "referencedStyles": {},
                                                                                  "abilities": {},
                                                                                  "children": [
                                                                                      {
                                                                                          "type": "static",
                                                                                          "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non volutpat turpis. "
                                                                                      },
                                                                                      {
                                                                                          "type": "raw",
                                                                                          "content": " "
                                                                                      }
                                                                                  ]
                                                                              }
                                                                          },
                                                                          {
                                                                              "type": "element",
                                                                              "content": {
                                                                                  "elementType": "text",
                                                                                  "referencedStyles": {},
                                                                                  "abilities": {},
                                                                                  "children": [
                                                                                      {
                                                                                          "type": "static",
                                                                                          "content": " "
                                                                                      },
                                                                                      {
                                                                                          "type": "raw",
                                                                                          "content": " "
                                                                                      }
                                                                                  ]
                                                                              }
                                                                          }
                                                                      ],
                                                                      "semanticType": "span"
                                                                  }
                                                              },
                                                              {
                                                                  "type": "element",
                                                                  "content": {
                                                                      "elementType": "br",
                                                                      "referencedStyles": {},
                                                                      "abilities": {},
                                                                      "children": [],
                                                                      "semanticType": "br"
                                                                  }
                                                              },
                                                              {
                                                                  "type": "element",
                                                                  "content": {
                                                                      "elementType": "text",
                                                                      "referencedStyles": {},
                                                                      "abilities": {},
                                                                      "children": [
                                                                          {
                                                                              "type": "element",
                                                                              "content": {
                                                                                  "elementType": "text",
                                                                                  "referencedStyles": {},
                                                                                  "abilities": {},
                                                                                  "children": [
                                                                                      {
                                                                                          "type": "static",
                                                                                          "content": "Mauris luctus rutrum mi ut rhoncus. Integer in dignissim tortor. "
                                                                                      },
                                                                                      {
                                                                                          "type": "raw",
                                                                                          "content": " "
                                                                                      }
                                                                                  ]
                                                                              }
                                                                          },
                                                                          {
                                                                              "type": "element",
                                                                              "content": {
                                                                                  "elementType": "text",
                                                                                  "referencedStyles": {},
                                                                                  "abilities": {},
                                                                                  "children": [
                                                                                      {
                                                                                          "type": "static",
                                                                                          "content": " "
                                                                                      },
                                                                                      {
                                                                                          "type": "raw",
                                                                                          "content": " "
                                                                                      }
                                                                                  ]
                                                                              }
                                                                          }
                                                                      ],
                                                                      "semanticType": "span"
                                                                  }
                                                              }
                                                          ],
                                                          "semanticType": "span"
                                                      }
                                                  },
                                                  {
                                                      "type": "element",
                                                      "content": {
                                                          "elementType": "container",
                                                          "referencedStyles": {
                                                              "111ff2d1-7b22-440d-b9f6-30946dca9598": {
                                                                  "type": "style-map",
                                                                  "content": {
                                                                      "conditions": [
                                                                          {
                                                                              "conditionType": "screen-size",
                                                                              "maxWidth": 479
                                                                          }
                                                                      ],
                                                                      "mapType": "inlined",
                                                                      "styles": {
                                                                          "gridTemplateColumns": {
                                                                              "type": "static",
                                                                              "content": "1fr"
                                                                          }
                                                                      }
                                                                  }
                                                              },
                                                              "4a8a977c-5afe-45e9-bf32-3667e2789650": {
                                                                  "type": "style-map",
                                                                  "content": {
                                                                      "conditions": [
                                                                          {
                                                                              "conditionType": "screen-size",
                                                                              "maxWidth": 991
                                                                          }
                                                                      ],
                                                                      "mapType": "inlined",
                                                                      "styles": {
                                                                          "gridTemplateColumns": {
                                                                              "type": "static",
                                                                              "content": "1fr 1fr 1fr"
                                                                          }
                                                                      }
                                                                  }
                                                              },
                                                              "a819dc66-7304-4c70-864c-f4288dc360c0": {
                                                                  "type": "style-map",
                                                                  "content": {
                                                                      "conditions": [
                                                                          {
                                                                              "conditionType": "screen-size",
                                                                              "maxWidth": 767
                                                                          }
                                                                      ],
                                                                      "mapType": "inlined",
                                                                      "styles": {
                                                                          "gridTemplateColumns": {
                                                                              "type": "static",
                                                                              "content": "1fr 1fr"
                                                                          }
                                                                      }
                                                                  }
                                                              }
                                                          },
                                                          "abilities": {},
                                                          "style": {
                                                              "width": {
                                                                  "type": "static",
                                                                  "content": "100%"
                                                              },
                                                              "display": {
                                                                  "type": "static",
                                                                  "content": "grid"
                                                              },
                                                              "gridGap": {
                                                                  "type": "dynamic",
                                                                  "content": {
                                                                      "referenceType": "token",
                                                                      "id": "--dl-space-space-unit"
                                                                  }
                                                              },
                                                              "gridTemplateColumns": {
                                                                  "type": "static",
                                                                  "content": "1fr 1fr 1fr 1fr"
                                                              }
                                                          },
                                                          "children": [
                                                              {
                                                                  "type": "element",
                                                                  "content": {
                                                                      "elementType": "component",
                                                                      "dependency": {
                                                                          "type": "local"
                                                                      },
                                                                      "referencedStyles": {},
                                                                      "abilities": {},
                                                                      "attrs": {
                                                                          "rootClassName": {
                                                                              "type": "comp-style",
                                                                              "content": "rootClassName"
                                                                          }
                                                                      },
                                                                      "children": [],
                                                                      "semanticType": "GalleryCard3"
                                                                  }
                                                              },
                                                              {
                                                                  "type": "element",
                                                                  "content": {
                                                                      "elementType": "component",
                                                                      "dependency": {
                                                                          "type": "local"
                                                                      },
                                                                      "referencedStyles": {},
                                                                      "abilities": {},
                                                                      "attrs": {
                                                                          "image_src": {
                                                                              "type": "static",
                                                                              "content": "https://images.unsplash.com/photo-1501127122-f385ca6ddd9d?ixid=Mnw5MTMyMXwwfDF8c2VhcmNofDExfHxtaW5pbWFsaXNtJTIwaG9tZXxlbnwwfHx8fDE2MjY0NDg1Mjc&ixlib=rb-1.2.1&h=1000"
                                                                          },
                                                                          "rootClassName": {
                                                                              "type": "comp-style",
                                                                              "content": "rootClassName1"
                                                                          }
                                                                      },
                                                                      "children": [],
                                                                      "semanticType": "GalleryCard3"
                                                                  }
                                                              },
                                                              {
                                                                  "type": "element",
                                                                  "content": {
                                                                      "elementType": "component",
                                                                      "dependency": {
                                                                          "type": "local"
                                                                      },
                                                                      "referencedStyles": {},
                                                                      "abilities": {},
                                                                      "attrs": {
                                                                          "image_src": {
                                                                              "type": "static",
                                                                              "content": "https://images.unsplash.com/photo-1467043153537-a4fba2cd39ef?ixid=Mnw5MTMyMXwwfDF8c2VhcmNofDR8fG1pbmltYWxpc20lMjBob21lfGVufDB8fHx8MTYyNjQ0ODUyNw&ixlib=rb-1.2.1&h=1000"
                                                                          },
                                                                          "rootClassName": {
                                                                              "type": "comp-style",
                                                                              "content": "rootClassName3"
                                                                          }
                                                                      },
                                                                      "children": [],
                                                                      "semanticType": "GalleryCard3"
                                                                  }
                                                              },
                                                              {
                                                                  "type": "element",
                                                                  "content": {
                                                                      "elementType": "component",
                                                                      "dependency": {
                                                                          "type": "local"
                                                                      },
                                                                      "referencedStyles": {},
                                                                      "abilities": {},
                                                                      "attrs": {
                                                                          "image_src": {
                                                                              "type": "static",
                                                                              "content": "https://images.unsplash.com/photo-1531829039722-d3fb3e705a4b?ixid=Mnw5MTMyMXwwfDF8c2VhcmNofDE4fHxtaW5pbWFsaXNtJTIwaG9tZXxlbnwwfHx8fDE2MjY0NDg1Mjc&ixlib=rb-1.2.1&h=1000"
                                                                          },
                                                                          "rootClassName": {
                                                                              "type": "comp-style",
                                                                              "content": "rootClassName2"
                                                                          }
                                                                      },
                                                                      "children": [],
                                                                      "semanticType": "GalleryCard3"
                                                                  }
                                                              },
                                                              {
                                                                  "type": "element",
                                                                  "content": {
                                                                      "elementType": "component",
                                                                      "dependency": {
                                                                          "type": "local"
                                                                      },
                                                                      "referencedStyles": {},
                                                                      "abilities": {},
                                                                      "attrs": {
                                                                          "image_src": {
                                                                              "type": "static",
                                                                              "content": "https://images.unsplash.com/photo-1519710164239-da123dc03ef4?ixid=Mnw5MTMyMXwwfDF8c2VhcmNofDExfHxtaW5pbWFsaXNtfGVufDB8fHx8MTYyNjQ0NTY1Nw&ixlib=rb-1.2.1&h=1000"
                                                                          },
                                                                          "rootClassName": {
                                                                              "type": "comp-style",
                                                                              "content": "rootClassName4"
                                                                          }
                                                                      },
                                                                      "children": [],
                                                                      "semanticType": "GalleryCard3"
                                                                  }
                                                              },
                                                              {
                                                                  "type": "element",
                                                                  "content": {
                                                                      "elementType": "component",
                                                                      "dependency": {
                                                                          "type": "local"
                                                                      },
                                                                      "referencedStyles": {},
                                                                      "abilities": {},
                                                                      "attrs": {
                                                                          "image_src": {
                                                                              "type": "static",
                                                                              "content": "https://images.unsplash.com/photo-1494438639946-1ebd1d20bf85?ixid=Mnw5MTMyMXwwfDF8c2VhcmNofDJ8fG1pbmltYWxpc218ZW58MHx8fHwxNjI2NDQ1NjU3&ixlib=rb-1.2.1&h=1000"
                                                                          },
                                                                          "rootClassName": {
                                                                              "type": "comp-style",
                                                                              "content": "rootClassName5"
                                                                          }
                                                                      },
                                                                      "children": [],
                                                                      "semanticType": "GalleryCard3"
                                                                  }
                                                              },
                                                              {
                                                                  "type": "element",
                                                                  "content": {
                                                                      "elementType": "component",
                                                                      "dependency": {
                                                                          "type": "local"
                                                                      },
                                                                      "referencedStyles": {},
                                                                      "abilities": {},
                                                                      "attrs": {
                                                                          "image_src": {
                                                                              "type": "static",
                                                                              "content": "https://images.unsplash.com/photo-1504198458649-3128b932f49e?ixid=Mnw5MTMyMXwwfDF8c2VhcmNofDN8fG1pbmltYWxpc20lMjBob21lfGVufDB8fHx8MTYyNjQ0ODUyNw&ixlib=rb-1.2.1&h=1000"
                                                                          },
                                                                          "rootClassName": {
                                                                              "type": "comp-style",
                                                                              "content": "rootClassName6"
                                                                          }
                                                                      },
                                                                      "children": [],
                                                                      "semanticType": "GalleryCard3"
                                                                  }
                                                              },
                                                              {
                                                                  "type": "element",
                                                                  "content": {
                                                                      "elementType": "component",
                                                                      "dependency": {
                                                                          "type": "local"
                                                                      },
                                                                      "referencedStyles": {},
                                                                      "abilities": {},
                                                                      "attrs": {
                                                                          "image_src": {
                                                                              "type": "static",
                                                                              "content": "https://images.unsplash.com/photo-1453904300235-0f2f60b15b5d?ixid=Mnw5MTMyMXwwfDF8c2VhcmNofDE3fHxtaW5pbWFsaXNtJTIwaG9tZXxlbnwwfHx8fDE2MjY0NDg1Mjc&ixlib=rb-1.2.1&h=1000"
                                                                          },
                                                                          "rootClassName": {
                                                                              "type": "comp-style",
                                                                              "content": "rootClassName7"
                                                                          }
                                                                      },
                                                                      "children": [],
                                                                      "semanticType": "GalleryCard3"
                                                                  }
                                                              },
                                                              {
                                                                  "type": "element",
                                                                  "content": {
                                                                      "elementType": "component",
                                                                      "dependency": {
                                                                          "type": "local"
                                                                      },
                                                                      "referencedStyles": {},
                                                                      "abilities": {},
                                                                      "attrs": {
                                                                          "image_src": {
                                                                              "type": "static",
                                                                              "content": "https://images.unsplash.com/photo-1493552152660-f915ab47ae9d?ixid=Mnw5MTMyMXwwfDF8c2VhcmNofDd8fG1pbmltYWxpc20lMjBob21lfGVufDB8fHx8MTYyNjQ0ODUyNw&ixlib=rb-1.2.1&h=1000"
                                                                          },
                                                                          "rootClassName": {
                                                                              "type": "comp-style",
                                                                              "content": "rootClassName8"
                                                                          }
                                                                      },
                                                                      "children": [],
                                                                      "semanticType": "GalleryCard3"
                                                                  }
                                                              },
                                                              {
                                                                  "type": "element",
                                                                  "content": {
                                                                      "elementType": "component",
                                                                      "dependency": {
                                                                          "type": "local"
                                                                      },
                                                                      "referencedStyles": {},
                                                                      "abilities": {},
                                                                      "attrs": {
                                                                          "image_src": {
                                                                              "type": "static",
                                                                              "content": "https://images.unsplash.com/photo-1510172951991-856a654063f9?ixid=Mnw5MTMyMXwwfDF8c2VhcmNofDIwfHxtaW5pbWFsaXNtJTIwaG9tZXxlbnwwfHx8fDE2MjY0NDg1Mjc&ixlib=rb-1.2.1&h=1000"
                                                                          },
                                                                          "rootClassName": {
                                                                              "type": "comp-style",
                                                                              "content": "rootClassName9"
                                                                          }
                                                                      },
                                                                      "children": [],
                                                                      "semanticType": "GalleryCard3"
                                                                  }
                                                              },
                                                              {
                                                                  "type": "element",
                                                                  "content": {
                                                                      "elementType": "component",
                                                                      "dependency": {
                                                                          "type": "local"
                                                                      },
                                                                      "referencedStyles": {},
                                                                      "abilities": {},
                                                                      "attrs": {
                                                                          "image_src": {
                                                                              "type": "static",
                                                                              "content": "https://images.unsplash.com/photo-1449247709967-d4461a6a6103?ixid=Mnw5MTMyMXwwfDF8c2VhcmNofDN8fG1pbmltYWxpc218ZW58MHx8fHwxNjI2NDQ1NjU3&ixlib=rb-1.2.1&h=1000"
                                                                          },
                                                                          "rootClassName": {
                                                                              "type": "comp-style",
                                                                              "content": "rootClassName10"
                                                                          }
                                                                      },
                                                                      "children": [],
                                                                      "semanticType": "GalleryCard3"
                                                                  }
                                                              },
                                                              {
                                                                  "type": "element",
                                                                  "content": {
                                                                      "elementType": "component",
                                                                      "dependency": {
                                                                          "type": "local"
                                                                      },
                                                                      "referencedStyles": {},
                                                                      "abilities": {},
                                                                      "attrs": {
                                                                          "image_src": {
                                                                              "type": "static",
                                                                              "content": "https://images.unsplash.com/photo-1472157510410-64a053cbc39f?ixid=Mnw5MTMyMXwwfDF8c2VhcmNofDh8fG1pbmltYWxpc20lMjBob21lfGVufDB8fHx8MTYyNjQ0ODUyNw&ixlib=rb-1.2.1&h=1000"
                                                                          },
                                                                          "rootClassName": {
                                                                              "type": "comp-style",
                                                                              "content": "rootClassName11"
                                                                          }
                                                                      },
                                                                      "children": [],
                                                                      "semanticType": "GalleryCard3"
                                                                  }
                                                              }
                                                          ],
                                                          "semanticType": "div"
                                                      }
                                                  }
                                              ],
                                              "semanticType": "div"
                                          }
                                      },
                                      {
                                          "type": "element",
                                          "content": {
                                              "elementType": "container",
                                              "name": "Pricing",
                                              "referencedStyles": {},
                                              "abilities": {},
                                              "style": {
                                                  "width": {
                                                      "type": "static",
                                                      "content": "100%"
                                                  },
                                                  "display": {
                                                      "type": "static",
                                                      "content": "flex"
                                                  },
                                                  "backgroundSize": {
                                                      "type": "static",
                                                      "content": "cover"
                                                  },
                                                  "justifyContent": {
                                                      "type": "static",
                                                      "content": "center"
                                                  },
                                                  "backgroundImage": {
                                                      "type": "static",
                                                      "content": "url('https://images.unsplash.com/photo-1503149779833-1de50ebe5f8a?ixid=Mnw5MTMyMXwwfDF8c2VhcmNofDE2fHxzd2lzcyUyMGNoZWVzZSUyMHBsYW50fGVufDB8fHx8MTYyNTg0MTU0Mg&ixlib=rb-1.2.1&h=1200')"
                                                  },
                                                  "backgroundPosition": {
                                                      "type": "static",
                                                      "content": "center"
                                                  }
                                              },
                                              "children": [
                                                  {
                                                      "type": "element",
                                                      "content": {
                                                          "elementType": "container",
                                                          "referencedStyles": {
                                                              "a2125a63-cbeb-43b0-9529-e7ac2c8f9b2a": {
                                                                  "type": "style-map",
                                                                  "content": {
                                                                      "conditions": [
                                                                          {
                                                                              "conditionType": "screen-size",
                                                                              "maxWidth": 767
                                                                          }
                                                                      ],
                                                                      "mapType": "inlined",
                                                                      "styles": {
                                                                          "flexFlow": {
                                                                              "type": "static",
                                                                              "content": "column"
                                                                          },
                                                                          "paddingLeft": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-space-space-twounits"
                                                                              }
                                                                          },
                                                                          "paddingRight": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-space-space-twounits"
                                                                              }
                                                                          }
                                                                      }
                                                                  }
                                                              },
                                                              "6c080f4f-f43d-4d98-9e8c-06577ec49b16": {
                                                                  "type": "style-map",
                                                                  "content": {
                                                                      "conditions": [
                                                                          {
                                                                              "conditionType": "screen-size",
                                                                              "maxWidth": 479
                                                                          }
                                                                      ],
                                                                      "mapType": "inlined",
                                                                      "styles": {
                                                                          "paddingTop": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-space-space-twounits"
                                                                              }
                                                                          },
                                                                          "paddingLeft": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-space-space-unit"
                                                                              }
                                                                          },
                                                                          "paddingRight": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-space-space-unit"
                                                                              }
                                                                          },
                                                                          "paddingBottom": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-space-space-twounits"
                                                                              }
                                                                          }
                                                                      }
                                                                  }
                                                              }
                                                          },
                                                          "abilities": {},
                                                          "style": {
                                                              "width": {
                                                                  "type": "static",
                                                                  "content": "100%"
                                                              },
                                                              "display": {
                                                                  "type": "static",
                                                                  "content": "flex"
                                                              },
                                                              "padding": {
                                                                  "type": "dynamic",
                                                                  "content": {
                                                                      "referenceType": "token",
                                                                      "id": "--dl-space-space-threeunits"
                                                                  }
                                                              },
                                                              "maxWidth": {
                                                                  "type": "dynamic",
                                                                  "content": {
                                                                      "referenceType": "token",
                                                                      "id": "--dl-size-size-maxwidth"
                                                                  }
                                                              },
                                                              "alignItems": {
                                                                  "type": "static",
                                                                  "content": "center"
                                                              },
                                                              "backgroundSize": {
                                                                  "type": "static",
                                                                  "content": "cover"
                                                              },
                                                              "justifyContent": {
                                                                  "type": "static",
                                                                  "content": "center"
                                                              }
                                                          },
                                                          "children": [
                                                              {
                                                                  "type": "element",
                                                                  "content": {
                                                                      "elementType": "container",
                                                                      "name": "PricingCard",
                                                                      "referencedStyles": {
                                                                          "4c7bef1b-4917-4ebc-bd58-ffff46cca3c7": {
                                                                              "type": "style-map",
                                                                              "content": {
                                                                                  "conditions": [
                                                                                      {
                                                                                          "conditionType": "element-state",
                                                                                          "content": "hover"
                                                                                      }
                                                                                  ],
                                                                                  "mapType": "inlined",
                                                                                  "styles": {
                                                                                      "transform": {
                                                                                          "type": "static",
                                                                                          "content": "scale(1.02)"
                                                                                      }
                                                                                  }
                                                                              }
                                                                          },
                                                                          "fbb0f3c6-a5e5-4b66-8864-2aecd48d6e83": {
                                                                              "type": "style-map",
                                                                              "content": {
                                                                                  "conditions": [
                                                                                      {
                                                                                          "conditionType": "screen-size",
                                                                                          "maxWidth": 767
                                                                                      }
                                                                                  ],
                                                                                  "mapType": "inlined",
                                                                                  "styles": {
                                                                                      "width": {
                                                                                          "type": "static",
                                                                                          "content": "100%"
                                                                                      },
                                                                                      "maxWidth": {
                                                                                          "type": "static",
                                                                                          "content": "450px"
                                                                                      },
                                                                                      "alignItems": {
                                                                                          "type": "static",
                                                                                          "content": "center"
                                                                                      },
                                                                                      "marginRight": {
                                                                                          "type": "static",
                                                                                          "content": "0px"
                                                                                      },
                                                                                      "marginBottom": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-twounits"
                                                                                          }
                                                                                      }
                                                                                  }
                                                                              }
                                                                          },
                                                                          "24eecf33-f1c7-4451-9bd3-1c5b5b1d5c32": {
                                                                              "type": "style-map",
                                                                              "content": {
                                                                                  "conditions": [
                                                                                      {
                                                                                          "conditionType": "screen-size",
                                                                                          "maxWidth": 991
                                                                                      }
                                                                                  ],
                                                                                  "mapType": "inlined",
                                                                                  "styles": {
                                                                                      "width": {
                                                                                          "type": "static",
                                                                                          "content": "100%"
                                                                                      },
                                                                                      "padding": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-twounits"
                                                                                          }
                                                                                      },
                                                                                      "maxWidth": {
                                                                                          "type": "static",
                                                                                          "content": "100%"
                                                                                      },
                                                                                      "alignItems": {
                                                                                          "type": "static",
                                                                                          "content": "center"
                                                                                      }
                                                                                  }
                                                                              }
                                                                          }
                                                                      },
                                                                      "abilities": {},
                                                                      "style": {
                                                                          "width": {
                                                                              "type": "static",
                                                                              "content": "100%"
                                                                          },
                                                                          "display": {
                                                                              "type": "static",
                                                                              "content": "flex"
                                                                          },
                                                                          "padding": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-space-space-threeunits"
                                                                              }
                                                                          },
                                                                          "maxWidth": {
                                                                              "type": "static",
                                                                              "content": "450px"
                                                                          },
                                                                          "minHeight": {
                                                                              "type": "static",
                                                                              "content": "450px"
                                                                          },
                                                                          "alignItems": {
                                                                              "type": "static",
                                                                              "content": "flex-start"
                                                                          },
                                                                          "paddingTop": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-space-space-twounits"
                                                                              }
                                                                          },
                                                                          "transition": {
                                                                              "type": "static",
                                                                              "content": "0.3s"
                                                                          },
                                                                          "marginRight": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-space-space-twounits"
                                                                              }
                                                                          },
                                                                          "paddingLeft": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-space-space-twounits"
                                                                              }
                                                                          },
                                                                          "paddingRight": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-space-space-twounits"
                                                                              }
                                                                          },
                                                                          "flexDirection": {
                                                                              "type": "static",
                                                                              "content": "column"
                                                                          },
                                                                          "paddingBottom": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-space-space-twounits"
                                                                              }
                                                                          },
                                                                          "justifyContent": {
                                                                              "type": "static",
                                                                              "content": "space-between"
                                                                          },
                                                                          "backgroundColor": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-color-gray-white"
                                                                              }
                                                                          }
                                                                      },
                                                                      "children": [
                                                                          {
                                                                              "type": "element",
                                                                              "content": {
                                                                                  "elementType": "text",
                                                                                  "referencedStyles": {},
                                                                                  "abilities": {},
                                                                                  "style": {
                                                                                      "fontSize": {
                                                                                          "type": "static",
                                                                                          "content": "1.5rem"
                                                                                      },
                                                                                      "fontWeight": {
                                                                                          "type": "static",
                                                                                          "content": "600"
                                                                                      },
                                                                                      "marginBottom": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-twounits"
                                                                                          }
                                                                                      },
                                                                                      "textTransform": {
                                                                                          "type": "static",
                                                                                          "content": "uppercase"
                                                                                      }
                                                                                  },
                                                                                  "children": [
                                                                                      {
                                                                                          "type": "static",
                                                                                          "content": "Free"
                                                                                      }
                                                                                  ],
                                                                                  "semanticType": "span"
                                                                              }
                                                                          },
                                                                          {
                                                                              "type": "element",
                                                                              "content": {
                                                                                  "elementType": "container",
                                                                                  "referencedStyles": {},
                                                                                  "abilities": {},
                                                                                  "style": {
                                                                                      "display": {
                                                                                          "type": "static",
                                                                                          "content": "flex"
                                                                                      },
                                                                                      "alignItems": {
                                                                                          "type": "static",
                                                                                          "content": "center"
                                                                                      },
                                                                                      "marginBottom": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-twounits"
                                                                                          }
                                                                                      },
                                                                                      "flexDirection": {
                                                                                          "type": "static",
                                                                                          "content": "row"
                                                                                      }
                                                                                  },
                                                                                  "children": [
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "fontSize": {
                                                                                                      "type": "static",
                                                                                                      "content": "1.15rem"
                                                                                                  },
                                                                                                  "marginTop": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-twounits"
                                                                                                      }
                                                                                                  },
                                                                                                  "fontWeight": {
                                                                                                      "type": "static",
                                                                                                      "content": "300"
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "$"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  },
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      },
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "fontSize": {
                                                                                                      "type": "static",
                                                                                                      "content": "4rem"
                                                                                                  },
                                                                                                  "fontWeight": {
                                                                                                      "type": "static",
                                                                                                      "content": "700"
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "static",
                                                                                                      "content": "0"
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      }
                                                                                  ],
                                                                                  "semanticType": "div"
                                                                              }
                                                                          },
                                                                          {
                                                                              "type": "element",
                                                                              "content": {
                                                                                  "elementType": "container",
                                                                                  "referencedStyles": {},
                                                                                  "abilities": {},
                                                                                  "style": {
                                                                                      "display": {
                                                                                          "type": "static",
                                                                                          "content": "flex"
                                                                                      },
                                                                                      "alignItems": {
                                                                                          "type": "static",
                                                                                          "content": "flex-start"
                                                                                      },
                                                                                      "marginBottom": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-threeunits"
                                                                                          }
                                                                                      },
                                                                                      "flexDirection": {
                                                                                          "type": "static",
                                                                                          "content": "column"
                                                                                      }
                                                                                  },
                                                                                  "children": [
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "marginBottom": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-unit"
                                                                                                      }
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "✔ Full access to design tool"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      },
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "marginBottom": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-unit"
                                                                                                      }
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "✔ Publish with Teleport"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      },
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "marginBottom": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-unit"
                                                                                                      }
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "✔ Subdomain publish"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      },
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "marginBottom": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-unit"
                                                                                                      }
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "✔ Download code"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      }
                                                                                  ],
                                                                                  "semanticType": "div"
                                                                              }
                                                                          },
                                                                          {
                                                                              "type": "element",
                                                                              "content": {
                                                                                  "elementType": "button",
                                                                                  "referencedStyles": {
                                                                                      "6bd2b679-67f7-4227-83a3-ea89ec6419e9": {
                                                                                          "type": "style-map",
                                                                                          "content": {
                                                                                              "mapType": "project-referenced",
                                                                                              "referenceId": "button"
                                                                                          }
                                                                                      }
                                                                                  },
                                                                                  "abilities": {},
                                                                                  "style": {
                                                                                      "color": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-color-gray-white"
                                                                                          }
                                                                                      },
                                                                                      "marginTop": {
                                                                                          "type": "static",
                                                                                          "content": "auto"
                                                                                      },
                                                                                      "paddingTop": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-unit"
                                                                                          }
                                                                                      },
                                                                                      "paddingLeft": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-twounits"
                                                                                          }
                                                                                      },
                                                                                      "paddingRight": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-twounits"
                                                                                          }
                                                                                      },
                                                                                      "paddingBottom": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-unit"
                                                                                          }
                                                                                      },
                                                                                      "backgroundColor": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-color-gray-black"
                                                                                          }
                                                                                      }
                                                                                  },
                                                                                  "children": [
                                                                                      {
                                                                                          "type": "static",
                                                                                          "content": "Learn More"
                                                                                      }
                                                                                  ]
                                                                              }
                                                                          }
                                                                      ],
                                                                      "semanticType": "div"
                                                                  }
                                                              },
                                                              {
                                                                  "type": "element",
                                                                  "content": {
                                                                      "elementType": "container",
                                                                      "name": "PricingCard",
                                                                      "referencedStyles": {
                                                                          "2eb61348-d9b8-486c-a6da-2d4772461273": {
                                                                              "type": "style-map",
                                                                              "content": {
                                                                                  "conditions": [
                                                                                      {
                                                                                          "conditionType": "element-state",
                                                                                          "content": "hover"
                                                                                      }
                                                                                  ],
                                                                                  "mapType": "inlined",
                                                                                  "styles": {
                                                                                      "transform": {
                                                                                          "type": "static",
                                                                                          "content": "scale(1.02)"
                                                                                      }
                                                                                  }
                                                                              }
                                                                          },
                                                                          "d83eb5db-d509-4d8e-b3ea-ab00555d9bc1": {
                                                                              "type": "style-map",
                                                                              "content": {
                                                                                  "conditions": [
                                                                                      {
                                                                                          "conditionType": "screen-size",
                                                                                          "maxWidth": 991
                                                                                      }
                                                                                  ],
                                                                                  "mapType": "inlined",
                                                                                  "styles": {
                                                                                      "width": {
                                                                                          "type": "static",
                                                                                          "content": "100%"
                                                                                      },
                                                                                      "maxWidth": {
                                                                                          "type": "static",
                                                                                          "content": "100%"
                                                                                      },
                                                                                      "alignItems": {
                                                                                          "type": "static",
                                                                                          "content": "center"
                                                                                      }
                                                                                  }
                                                                              }
                                                                          },
                                                                          "1284ff41-ddec-4fff-be50-00d190082788": {
                                                                              "type": "style-map",
                                                                              "content": {
                                                                                  "conditions": [
                                                                                      {
                                                                                          "conditionType": "screen-size",
                                                                                          "maxWidth": 767
                                                                                      }
                                                                                  ],
                                                                                  "mapType": "inlined",
                                                                                  "styles": {
                                                                                      "width": {
                                                                                          "type": "static",
                                                                                          "content": "100%"
                                                                                      },
                                                                                      "maxWidth": {
                                                                                          "type": "static",
                                                                                          "content": "450px"
                                                                                      },
                                                                                      "alignItems": {
                                                                                          "type": "static",
                                                                                          "content": "center"
                                                                                      },
                                                                                      "marginRight": {
                                                                                          "type": "static",
                                                                                          "content": "0px"
                                                                                      },
                                                                                      "marginBottom": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-twounits"
                                                                                          }
                                                                                      }
                                                                                  }
                                                                              }
                                                                          }
                                                                      },
                                                                      "abilities": {},
                                                                      "style": {
                                                                          "width": {
                                                                              "type": "static",
                                                                              "content": "100%"
                                                                          },
                                                                          "display": {
                                                                              "type": "static",
                                                                              "content": "flex"
                                                                          },
                                                                          "padding": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-space-space-twounits"
                                                                              }
                                                                          },
                                                                          "maxWidth": {
                                                                              "type": "static",
                                                                              "content": "450px"
                                                                          },
                                                                          "minHeight": {
                                                                              "type": "static",
                                                                              "content": "450px"
                                                                          },
                                                                          "alignItems": {
                                                                              "type": "static",
                                                                              "content": "flex-start"
                                                                          },
                                                                          "transition": {
                                                                              "type": "static",
                                                                              "content": "0.3s"
                                                                          },
                                                                          "marginRight": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-space-space-twounits"
                                                                              }
                                                                          },
                                                                          "flexDirection": {
                                                                              "type": "static",
                                                                              "content": "column"
                                                                          },
                                                                          "backgroundColor": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-color-gray-white"
                                                                              }
                                                                          }
                                                                      },
                                                                      "children": [
                                                                          {
                                                                              "type": "element",
                                                                              "content": {
                                                                                  "elementType": "text",
                                                                                  "referencedStyles": {},
                                                                                  "abilities": {},
                                                                                  "style": {
                                                                                      "fontSize": {
                                                                                          "type": "static",
                                                                                          "content": "1.5rem"
                                                                                      },
                                                                                      "fontWeight": {
                                                                                          "type": "static",
                                                                                          "content": "600"
                                                                                      },
                                                                                      "marginBottom": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-twounits"
                                                                                          }
                                                                                      },
                                                                                      "textTransform": {
                                                                                          "type": "static",
                                                                                          "content": "uppercase"
                                                                                      }
                                                                                  },
                                                                                  "children": [
                                                                                      {
                                                                                          "type": "static",
                                                                                          "content": "basic"
                                                                                      }
                                                                                  ],
                                                                                  "semanticType": "span"
                                                                              }
                                                                          },
                                                                          {
                                                                              "type": "element",
                                                                              "content": {
                                                                                  "elementType": "container",
                                                                                  "referencedStyles": {},
                                                                                  "abilities": {},
                                                                                  "style": {
                                                                                      "display": {
                                                                                          "type": "static",
                                                                                          "content": "flex"
                                                                                      },
                                                                                      "alignItems": {
                                                                                          "type": "static",
                                                                                          "content": "center"
                                                                                      },
                                                                                      "marginBottom": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-twounits"
                                                                                          }
                                                                                      },
                                                                                      "flexDirection": {
                                                                                          "type": "static",
                                                                                          "content": "row"
                                                                                      }
                                                                                  },
                                                                                  "children": [
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "fontSize": {
                                                                                                      "type": "static",
                                                                                                      "content": "1.15rem"
                                                                                                  },
                                                                                                  "marginTop": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-twounits"
                                                                                                      }
                                                                                                  },
                                                                                                  "fontWeight": {
                                                                                                      "type": "static",
                                                                                                      "content": "300"
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "$"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  },
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      },
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "fontSize": {
                                                                                                      "type": "static",
                                                                                                      "content": "4rem"
                                                                                                  },
                                                                                                  "fontWeight": {
                                                                                                      "type": "static",
                                                                                                      "content": "700"
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "static",
                                                                                                      "content": "9"
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      },
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "fontSize": {
                                                                                                      "type": "static",
                                                                                                      "content": "1.15rem"
                                                                                                  },
                                                                                                  "fontStyle": {
                                                                                                      "type": "static",
                                                                                                      "content": "normal"
                                                                                                  },
                                                                                                  "marginTop": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-twounits"
                                                                                                      }
                                                                                                  },
                                                                                                  "fontWeight": {
                                                                                                      "type": "static",
                                                                                                      "content": "300"
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "/ monthly"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      }
                                                                                  ],
                                                                                  "semanticType": "div"
                                                                              }
                                                                          },
                                                                          {
                                                                              "type": "element",
                                                                              "content": {
                                                                                  "elementType": "text",
                                                                                  "referencedStyles": {},
                                                                                  "abilities": {},
                                                                                  "style": {
                                                                                      "color": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-color-gray-500"
                                                                                          }
                                                                                      },
                                                                                      "fontSize": {
                                                                                          "type": "static",
                                                                                          "content": "0.75rem"
                                                                                      },
                                                                                      "marginBottom": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-twounits"
                                                                                          }
                                                                                      }
                                                                                  },
                                                                                  "children": [
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "static",
                                                                                                      "content": "Billed annualy or $12 month-to-month."
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      },
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "children": [],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      }
                                                                                  ],
                                                                                  "semanticType": "span"
                                                                              }
                                                                          },
                                                                          {
                                                                              "type": "element",
                                                                              "content": {
                                                                                  "elementType": "container",
                                                                                  "referencedStyles": {},
                                                                                  "abilities": {},
                                                                                  "style": {
                                                                                      "display": {
                                                                                          "type": "static",
                                                                                          "content": "flex"
                                                                                      },
                                                                                      "alignItems": {
                                                                                          "type": "static",
                                                                                          "content": "flex-start"
                                                                                      },
                                                                                      "marginBottom": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-threeunits"
                                                                                          }
                                                                                      },
                                                                                      "flexDirection": {
                                                                                          "type": "static",
                                                                                          "content": "column"
                                                                                      }
                                                                                  },
                                                                                  "children": [
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "marginBottom": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-unit"
                                                                                                      }
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "✔ All features of FREE plan"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      },
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "marginBottom": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-unit"
                                                                                                      }
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "✔ Connect to custom domains"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      },
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "marginBottom": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-unit"
                                                                                                      }
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "✔ Private projects"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      },
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "marginBottom": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-unit"
                                                                                                      }
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "✔ No project limitations"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      },
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "marginBottom": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-unit"
                                                                                                      }
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "✔ Unlimited collabotators"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      }
                                                                                  ],
                                                                                  "semanticType": "div"
                                                                              }
                                                                          },
                                                                          {
                                                                              "type": "element",
                                                                              "content": {
                                                                                  "elementType": "button",
                                                                                  "referencedStyles": {
                                                                                      "b04dd5a2-d42d-4b26-8502-a39fb959acd0": {
                                                                                          "type": "style-map",
                                                                                          "content": {
                                                                                              "mapType": "project-referenced",
                                                                                              "referenceId": "button"
                                                                                          }
                                                                                      }
                                                                                  },
                                                                                  "abilities": {},
                                                                                  "style": {
                                                                                      "color": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-color-gray-white"
                                                                                          }
                                                                                      },
                                                                                      "marginTop": {
                                                                                          "type": "static",
                                                                                          "content": "auto"
                                                                                      },
                                                                                      "paddingTop": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-unit"
                                                                                          }
                                                                                      },
                                                                                      "paddingLeft": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-twounits"
                                                                                          }
                                                                                      },
                                                                                      "paddingRight": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-twounits"
                                                                                          }
                                                                                      },
                                                                                      "paddingBottom": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-unit"
                                                                                          }
                                                                                      },
                                                                                      "backgroundColor": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-color-gray-black"
                                                                                          }
                                                                                      }
                                                                                  },
                                                                                  "children": [
                                                                                      {
                                                                                          "type": "static",
                                                                                          "content": "Learn More"
                                                                                      }
                                                                                  ]
                                                                              }
                                                                          }
                                                                      ],
                                                                      "semanticType": "div"
                                                                  }
                                                              },
                                                              {
                                                                  "type": "element",
                                                                  "content": {
                                                                      "elementType": "container",
                                                                      "name": "PricingCard",
                                                                      "referencedStyles": {
                                                                          "620ab363-8615-4d67-8466-b1ac334928f4": {
                                                                              "type": "style-map",
                                                                              "content": {
                                                                                  "conditions": [
                                                                                      {
                                                                                          "conditionType": "element-state",
                                                                                          "content": "hover"
                                                                                      }
                                                                                  ],
                                                                                  "mapType": "inlined",
                                                                                  "styles": {
                                                                                      "transform": {
                                                                                          "type": "static",
                                                                                          "content": "scale(1.02)"
                                                                                      }
                                                                                  }
                                                                              }
                                                                          },
                                                                          "daa149de-f2b1-4985-9448-d20e00c20ecd": {
                                                                              "type": "style-map",
                                                                              "content": {
                                                                                  "conditions": [
                                                                                      {
                                                                                          "conditionType": "screen-size",
                                                                                          "maxWidth": 991
                                                                                      }
                                                                                  ],
                                                                                  "mapType": "inlined",
                                                                                  "styles": {
                                                                                      "width": {
                                                                                          "type": "static",
                                                                                          "content": "100%"
                                                                                      },
                                                                                      "maxWidth": {
                                                                                          "type": "static",
                                                                                          "content": "100%"
                                                                                      },
                                                                                      "alignItems": {
                                                                                          "type": "static",
                                                                                          "content": "center"
                                                                                      }
                                                                                  }
                                                                              }
                                                                          },
                                                                          "4e543b68-d747-4cfb-98cd-aeefcd8d5e47": {
                                                                              "type": "style-map",
                                                                              "content": {
                                                                                  "conditions": [
                                                                                      {
                                                                                          "conditionType": "screen-size",
                                                                                          "maxWidth": 767
                                                                                      }
                                                                                  ],
                                                                                  "mapType": "inlined",
                                                                                  "styles": {
                                                                                      "width": {
                                                                                          "type": "static",
                                                                                          "content": "100%"
                                                                                      },
                                                                                      "maxWidth": {
                                                                                          "type": "static",
                                                                                          "content": "450px"
                                                                                      },
                                                                                      "alignItems": {
                                                                                          "type": "static",
                                                                                          "content": "center"
                                                                                      },
                                                                                      "marginRight": {
                                                                                          "type": "static",
                                                                                          "content": "0px"
                                                                                      },
                                                                                      "marginBottom": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-twounits"
                                                                                          }
                                                                                      }
                                                                                  }
                                                                              }
                                                                          },
                                                                          "9b56b8f5-6ad1-45a9-95b9-d20f51ea92ac": {
                                                                              "type": "style-map",
                                                                              "content": {
                                                                                  "conditions": [
                                                                                      {
                                                                                          "conditionType": "screen-size",
                                                                                          "maxWidth": 479
                                                                                      }
                                                                                  ],
                                                                                  "mapType": "inlined",
                                                                                  "styles": {
                                                                                      "marginBottom": {
                                                                                          "type": "static",
                                                                                          "content": "0px"
                                                                                      }
                                                                                  }
                                                                              }
                                                                          }
                                                                      },
                                                                      "abilities": {},
                                                                      "style": {
                                                                          "width": {
                                                                              "type": "static",
                                                                              "content": "100%"
                                                                          },
                                                                          "display": {
                                                                              "type": "static",
                                                                              "content": "flex"
                                                                          },
                                                                          "padding": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-space-space-threeunits"
                                                                              }
                                                                          },
                                                                          "maxWidth": {
                                                                              "type": "static",
                                                                              "content": "450px"
                                                                          },
                                                                          "minHeight": {
                                                                              "type": "static",
                                                                              "content": "450px"
                                                                          },
                                                                          "alignItems": {
                                                                              "type": "static",
                                                                              "content": "flex-start"
                                                                          },
                                                                          "paddingTop": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-space-space-twounits"
                                                                              }
                                                                          },
                                                                          "transition": {
                                                                              "type": "static",
                                                                              "content": "0.3s"
                                                                          },
                                                                          "paddingLeft": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-space-space-twounits"
                                                                              }
                                                                          },
                                                                          "paddingRight": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-space-space-twounits"
                                                                              }
                                                                          },
                                                                          "flexDirection": {
                                                                              "type": "static",
                                                                              "content": "column"
                                                                          },
                                                                          "paddingBottom": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-space-space-twounits"
                                                                              }
                                                                          },
                                                                          "backgroundColor": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-color-gray-white"
                                                                              }
                                                                          }
                                                                      },
                                                                      "children": [
                                                                          {
                                                                              "type": "element",
                                                                              "content": {
                                                                                  "elementType": "text",
                                                                                  "referencedStyles": {},
                                                                                  "abilities": {},
                                                                                  "style": {
                                                                                      "fontSize": {
                                                                                          "type": "static",
                                                                                          "content": "1.5rem"
                                                                                      },
                                                                                      "fontWeight": {
                                                                                          "type": "static",
                                                                                          "content": "600"
                                                                                      },
                                                                                      "marginBottom": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-twounits"
                                                                                          }
                                                                                      },
                                                                                      "textTransform": {
                                                                                          "type": "static",
                                                                                          "content": "uppercase"
                                                                                      }
                                                                                  },
                                                                                  "children": [
                                                                                      {
                                                                                          "type": "static",
                                                                                          "content": "Pro"
                                                                                      }
                                                                                  ],
                                                                                  "semanticType": "span"
                                                                              }
                                                                          },
                                                                          {
                                                                              "type": "element",
                                                                              "content": {
                                                                                  "elementType": "container",
                                                                                  "referencedStyles": {},
                                                                                  "abilities": {},
                                                                                  "style": {
                                                                                      "display": {
                                                                                          "type": "static",
                                                                                          "content": "flex"
                                                                                      },
                                                                                      "alignItems": {
                                                                                          "type": "static",
                                                                                          "content": "center"
                                                                                      },
                                                                                      "marginBottom": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-twounits"
                                                                                          }
                                                                                      },
                                                                                      "flexDirection": {
                                                                                          "type": "static",
                                                                                          "content": "row"
                                                                                      }
                                                                                  },
                                                                                  "children": [
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "fontSize": {
                                                                                                      "type": "static",
                                                                                                      "content": "1.15rem"
                                                                                                  },
                                                                                                  "marginTop": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-twounits"
                                                                                                      }
                                                                                                  },
                                                                                                  "fontWeight": {
                                                                                                      "type": "static",
                                                                                                      "content": "300"
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "$"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  },
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      },
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "fontSize": {
                                                                                                      "type": "static",
                                                                                                      "content": "4rem"
                                                                                                  },
                                                                                                  "fontWeight": {
                                                                                                      "type": "static",
                                                                                                      "content": "700"
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "static",
                                                                                                      "content": "29"
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      },
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "fontSize": {
                                                                                                      "type": "static",
                                                                                                      "content": "1.15rem"
                                                                                                  },
                                                                                                  "fontStyle": {
                                                                                                      "type": "static",
                                                                                                      "content": "normal"
                                                                                                  },
                                                                                                  "marginTop": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-twounits"
                                                                                                      }
                                                                                                  },
                                                                                                  "fontWeight": {
                                                                                                      "type": "static",
                                                                                                      "content": "300"
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "/ monthly"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      }
                                                                                  ],
                                                                                  "semanticType": "div"
                                                                              }
                                                                          },
                                                                          {
                                                                              "type": "element",
                                                                              "content": {
                                                                                  "elementType": "text",
                                                                                  "referencedStyles": {},
                                                                                  "abilities": {},
                                                                                  "style": {
                                                                                      "color": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-color-gray-500"
                                                                                          }
                                                                                      },
                                                                                      "fontSize": {
                                                                                          "type": "static",
                                                                                          "content": "0.75rem"
                                                                                      },
                                                                                      "marginBottom": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-twounits"
                                                                                          }
                                                                                      }
                                                                                  },
                                                                                  "children": [
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "static",
                                                                                                      "content": "Billed annualy or $32 month-to-month."
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      },
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "children": [],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      }
                                                                                  ],
                                                                                  "semanticType": "span"
                                                                              }
                                                                          },
                                                                          {
                                                                              "type": "element",
                                                                              "content": {
                                                                                  "elementType": "container",
                                                                                  "referencedStyles": {},
                                                                                  "abilities": {},
                                                                                  "style": {
                                                                                      "display": {
                                                                                          "type": "static",
                                                                                          "content": "flex"
                                                                                      },
                                                                                      "alignItems": {
                                                                                          "type": "static",
                                                                                          "content": "flex-start"
                                                                                      },
                                                                                      "marginBottom": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-unit"
                                                                                          }
                                                                                      },
                                                                                      "flexDirection": {
                                                                                          "type": "static",
                                                                                          "content": "column"
                                                                                      }
                                                                                  },
                                                                                  "children": [
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "marginBottom": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-unit"
                                                                                                      }
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "✔ All features of BASIC plan"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      },
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "marginBottom": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-unit"
                                                                                                      }
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "✔ Priority support"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      },
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "marginBottom": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-unit"
                                                                                                      }
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "✔ Premium analytics"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      },
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "marginBottom": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-unit"
                                                                                                      }
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "✔ Version history"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      }
                                                                                  ],
                                                                                  "semanticType": "div"
                                                                              }
                                                                          },
                                                                          {
                                                                              "type": "element",
                                                                              "content": {
                                                                                  "elementType": "button",
                                                                                  "referencedStyles": {
                                                                                      "6aca2dba-b64d-4717-bfe3-f878117af483": {
                                                                                          "type": "style-map",
                                                                                          "content": {
                                                                                              "mapType": "project-referenced",
                                                                                              "referenceId": "button"
                                                                                          }
                                                                                      }
                                                                                  },
                                                                                  "abilities": {},
                                                                                  "style": {
                                                                                      "color": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-color-gray-white"
                                                                                          }
                                                                                      },
                                                                                      "marginTop": {
                                                                                          "type": "static",
                                                                                          "content": "auto"
                                                                                      },
                                                                                      "paddingTop": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-unit"
                                                                                          }
                                                                                      },
                                                                                      "paddingLeft": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-twounits"
                                                                                          }
                                                                                      },
                                                                                      "paddingRight": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-twounits"
                                                                                          }
                                                                                      },
                                                                                      "paddingBottom": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-unit"
                                                                                          }
                                                                                      },
                                                                                      "backgroundColor": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-color-gray-black"
                                                                                          }
                                                                                      }
                                                                                  },
                                                                                  "children": [
                                                                                      {
                                                                                          "type": "static",
                                                                                          "content": "Learn More"
                                                                                      }
                                                                                  ]
                                                                              }
                                                                          }
                                                                      ],
                                                                      "semanticType": "div"
                                                                  }
                                                              }
                                                          ],
                                                          "semanticType": "div"
                                                      }
                                                  }
                                              ],
                                              "semanticType": "div"
                                          }
                                      },
                                      {
                                          "type": "element",
                                          "content": {
                                              "elementType": "container",
                                              "name": "Footer",
                                              "referencedStyles": {
                                                  "ac03a616-c920-4c7a-aa56-b28289887daa": {
                                                      "type": "style-map",
                                                      "content": {
                                                          "conditions": [
                                                              {
                                                                  "conditionType": "screen-size",
                                                                  "maxWidth": 767
                                                              }
                                                          ],
                                                          "mapType": "inlined",
                                                          "styles": {
                                                              "paddingLeft": {
                                                                  "type": "dynamic",
                                                                  "content": {
                                                                      "referenceType": "token",
                                                                      "id": "--dl-space-space-twounits"
                                                                  }
                                                              },
                                                              "paddingRight": {
                                                                  "type": "dynamic",
                                                                  "content": {
                                                                      "referenceType": "token",
                                                                      "id": "--dl-space-space-twounits"
                                                                  }
                                                              }
                                                          }
                                                      }
                                                  },
                                                  "4869893b-b47d-45e1-b57b-fb13aa372fac": {
                                                      "type": "style-map",
                                                      "content": {
                                                          "conditions": [
                                                              {
                                                                  "conditionType": "screen-size",
                                                                  "maxWidth": 479
                                                              }
                                                          ],
                                                          "mapType": "inlined",
                                                          "styles": {
                                                              "padding": {
                                                                  "type": "dynamic",
                                                                  "content": {
                                                                      "referenceType": "token",
                                                                      "id": "--dl-space-space-unit"
                                                                  }
                                                              }
                                                          }
                                                      }
                                                  },
                                                  "fd48bb4d-c79b-4f00-aae6-bc08cd53ad18": {
                                                      "type": "style-map",
                                                      "content": {
                                                          "conditions": [
                                                              {
                                                                  "conditionType": "screen-size",
                                                                  "maxWidth": 991
                                                              }
                                                          ],
                                                          "mapType": "inlined",
                                                          "styles": {
                                                              "flexDirection": {
                                                                  "type": "static",
                                                                  "content": "column"
                                                              }
                                                          }
                                                      }
                                                  }
                                              },
                                              "abilities": {},
                                              "style": {
                                                  "width": {
                                                      "type": "static",
                                                      "content": "100%"
                                                  },
                                                  "display": {
                                                      "type": "static",
                                                      "content": "flex"
                                                  },
                                                  "maxWidth": {
                                                      "type": "dynamic",
                                                      "content": {
                                                          "referenceType": "token",
                                                          "id": "--dl-size-size-maxwidth"
                                                      }
                                                  },
                                                  "alignItems": {
                                                      "type": "static",
                                                      "content": "center"
                                                  },
                                                  "paddingTop": {
                                                      "type": "dynamic",
                                                      "content": {
                                                          "referenceType": "token",
                                                          "id": "--dl-space-space-twounits"
                                                      }
                                                  },
                                                  "paddingLeft": {
                                                      "type": "dynamic",
                                                      "content": {
                                                          "referenceType": "token",
                                                          "id": "--dl-space-space-threeunits"
                                                      }
                                                  },
                                                  "paddingRight": {
                                                      "type": "dynamic",
                                                      "content": {
                                                          "referenceType": "token",
                                                          "id": "--dl-space-space-threeunits"
                                                      }
                                                  },
                                                  "flexDirection": {
                                                      "type": "static",
                                                      "content": "column"
                                                  },
                                                  "paddingBottom": {
                                                      "type": "dynamic",
                                                      "content": {
                                                          "referenceType": "token",
                                                          "id": "--dl-space-space-twounits"
                                                      }
                                                  },
                                                  "justifyContent": {
                                                      "type": "static",
                                                      "content": "space-between"
                                                  }
                                              },
                                              "children": [
                                                  {
                                                      "type": "element",
                                                      "content": {
                                                          "elementType": "container",
                                                          "referencedStyles": {
                                                              "c7971a8b-e181-4297-8ddb-877b1aab505a": {
                                                                  "type": "style-map",
                                                                  "content": {
                                                                      "conditions": [
                                                                          {
                                                                              "conditionType": "screen-size",
                                                                              "maxWidth": 479
                                                                          }
                                                                      ],
                                                                      "mapType": "inlined",
                                                                      "styles": {
                                                                          "alignItems": {
                                                                              "type": "static",
                                                                              "content": "center"
                                                                          },
                                                                          "flexDirection": {
                                                                              "type": "static",
                                                                              "content": "column"
                                                                          }
                                                                      }
                                                                  }
                                                              },
                                                              "137f4fca-36bf-4e77-89c7-6c24bc723820": {
                                                                  "type": "style-map",
                                                                  "content": {
                                                                      "conditions": [
                                                                          {
                                                                              "conditionType": "screen-size",
                                                                              "maxWidth": 767
                                                                          }
                                                                      ],
                                                                      "mapType": "inlined",
                                                                      "styles": {
                                                                          "alignItems": {
                                                                              "type": "static",
                                                                              "content": "center"
                                                                          },
                                                                          "flexDirection": {
                                                                              "type": "static",
                                                                              "content": "column"
                                                                          },
                                                                          "justifyContent": {
                                                                              "type": "static",
                                                                              "content": "space-between"
                                                                          }
                                                                      }
                                                                  }
                                                              }
                                                          },
                                                          "abilities": {},
                                                          "style": {
                                                              "width": {
                                                                  "type": "static",
                                                                  "content": "100%"
                                                              },
                                                              "display": {
                                                                  "type": "static",
                                                                  "content": "flex"
                                                              },
                                                              "alignItems": {
                                                                  "type": "static",
                                                                  "content": "flex-start"
                                                              },
                                                              "flexDirection": {
                                                                  "type": "static",
                                                                  "content": "row"
                                                              },
                                                              "justifyContent": {
                                                                  "type": "static",
                                                                  "content": "space-between"
                                                              }
                                                          },
                                                          "children": [
                                                              {
                                                                  "type": "element",
                                                                  "content": {
                                                                      "elementType": "container",
                                                                      "name": "Logo",
                                                                      "referencedStyles": {
                                                                          "8f4de6e2-9707-4df7-8a04-f45a03d07430": {
                                                                              "type": "style-map",
                                                                              "content": {
                                                                                  "conditions": [
                                                                                      {
                                                                                          "conditionType": "screen-size",
                                                                                          "maxWidth": 767
                                                                                      }
                                                                                  ],
                                                                                  "mapType": "inlined",
                                                                                  "styles": {
                                                                                      "alignItems": {
                                                                                          "type": "static",
                                                                                          "content": "center"
                                                                                      }
                                                                                  }
                                                                              }
                                                                          }
                                                                      },
                                                                      "abilities": {},
                                                                      "style": {
                                                                          "display": {
                                                                              "type": "static",
                                                                              "content": "flex"
                                                                          },
                                                                          "maxWidth": {
                                                                              "type": "dynamic",
                                                                              "content": {
                                                                                  "referenceType": "token",
                                                                                  "id": "--dl-size-size-maxwidth"
                                                                              }
                                                                          },
                                                                          "alignItems": {
                                                                              "type": "static",
                                                                              "content": "flex-start"
                                                                          },
                                                                          "flexDirection": {
                                                                              "type": "static",
                                                                              "content": "column"
                                                                          }
                                                                      },
                                                                      "children": [
                                                                          {
                                                                              "type": "element",
                                                                              "content": {
                                                                                  "elementType": "image",
                                                                                  "referencedStyles": {
                                                                                      "47a078fc-35c7-4d8f-be4c-4edcc8006e14": {
                                                                                          "type": "style-map",
                                                                                          "content": {
                                                                                              "conditions": [
                                                                                                  {
                                                                                                      "conditionType": "screen-size",
                                                                                                      "maxWidth": 767
                                                                                                  }
                                                                                              ],
                                                                                              "mapType": "inlined",
                                                                                              "styles": {
                                                                                                  "marginBottom": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-oneandhalfunits"
                                                                                                      }
                                                                                                  }
                                                                                              }
                                                                                          }
                                                                                      },
                                                                                      "b97a5c46-575e-4c9d-a973-0c206c237762": {
                                                                                          "type": "style-map",
                                                                                          "content": {
                                                                                              "conditions": [
                                                                                                  {
                                                                                                      "conditionType": "screen-size",
                                                                                                      "maxWidth": 479
                                                                                                  }
                                                                                              ],
                                                                                              "mapType": "inlined",
                                                                                              "styles": {
                                                                                                  "marginBottom": {
                                                                                                      "type": "static",
                                                                                                      "content": "0px"
                                                                                                  }
                                                                                              }
                                                                                          }
                                                                                      }
                                                                                  },
                                                                                  "abilities": {},
                                                                                  "attrs": {
                                                                                      "alt": {
                                                                                          "type": "static",
                                                                                          "content": "logo"
                                                                                      },
                                                                                      "src": {
                                                                                          "type": "static",
                                                                                          "content": "https://presentation-website-assets.teleporthq.io/logos/logo.png"
                                                                                      }
                                                                                  },
                                                                                  "style": {
                                                                                      "height": {
                                                                                          "type": "static",
                                                                                          "content": "2rem"
                                                                                      }
                                                                                  },
                                                                                  "children": []
                                                                              }
                                                                          },
                                                                          {
                                                                              "type": "element",
                                                                              "content": {
                                                                                  "elementType": "text",
                                                                                  "referencedStyles": {
                                                                                      "29d15ccf-cae9-4d9a-b4b5-350f476359d4": {
                                                                                          "type": "style-map",
                                                                                          "content": {
                                                                                              "conditions": [
                                                                                                  {
                                                                                                      "conditionType": "screen-size",
                                                                                                      "maxWidth": 479
                                                                                                  }
                                                                                              ],
                                                                                              "mapType": "inlined",
                                                                                              "styles": {
                                                                                                  "marginTop": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-twounits"
                                                                                                      }
                                                                                                  },
                                                                                                  "marginBottom": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-twounits"
                                                                                                      }
                                                                                                  }
                                                                                              }
                                                                                          }
                                                                                      },
                                                                                      "e6eced16-ecd0-4396-b8a0-1cf603eb6ceb": {
                                                                                          "type": "style-map",
                                                                                          "content": {
                                                                                              "conditions": [
                                                                                                  {
                                                                                                      "conditionType": "screen-size",
                                                                                                      "maxWidth": 767
                                                                                                  }
                                                                                              ],
                                                                                              "mapType": "inlined",
                                                                                              "styles": {
                                                                                                  "marginTop": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-twounits"
                                                                                                      }
                                                                                                  },
                                                                                                  "textAlign": {
                                                                                                      "type": "static",
                                                                                                      "content": "center"
                                                                                                  },
                                                                                                  "marginBottom": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-twounits"
                                                                                                      }
                                                                                                  }
                                                                                              }
                                                                                          }
                                                                                      }
                                                                                  },
                                                                                  "abilities": {},
                                                                                  "style": {
                                                                                      "marginTop": {
                                                                                          "type": "dynamic",
                                                                                          "content": {
                                                                                              "referenceType": "token",
                                                                                              "id": "--dl-space-space-oneandhalfunits"
                                                                                          }
                                                                                      }
                                                                                  },
                                                                                  "children": [
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "Professional website builder "
                                                                                                              },
                                                                                                              {
                                                                                                                  "type": "raw",
                                                                                                                  "content": " "
                                                                                                              }
                                                                                                          ]
                                                                                                      }
                                                                                                  },
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": " "
                                                                                                              },
                                                                                                              {
                                                                                                                  "type": "raw",
                                                                                                                  "content": " "
                                                                                                              }
                                                                                                          ]
                                                                                                      }
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      },
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "children": [],
                                                                                              "semanticType": "br"
                                                                                          }
                                                                                      },
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "text",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "static",
                                                                                                      "content": "for developers."
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "span"
                                                                                          }
                                                                                      }
                                                                                  ],
                                                                                  "semanticType": "span"
                                                                              }
                                                                          }
                                                                      ],
                                                                      "semanticType": "div"
                                                                  }
                                                              },
                                                              {
                                                                  "type": "element",
                                                                  "content": {
                                                                      "elementType": "container",
                                                                      "name": "LinksContainer",
                                                                      "referencedStyles": {
                                                                          "2d142f86-2ea7-4bec-aa82-418bfe09a54f": {
                                                                              "type": "style-map",
                                                                              "content": {
                                                                                  "conditions": [
                                                                                      {
                                                                                          "conditionType": "screen-size",
                                                                                          "maxWidth": 479
                                                                                      }
                                                                                  ],
                                                                                  "mapType": "inlined",
                                                                                  "styles": {
                                                                                      "alignItems": {
                                                                                          "type": "static",
                                                                                          "content": "center"
                                                                                      },
                                                                                      "flexDirection": {
                                                                                          "type": "static",
                                                                                          "content": "column"
                                                                                      }
                                                                                  }
                                                                              }
                                                                          },
                                                                          "962cef9c-1756-4da5-bf80-309cc72b6864": {
                                                                              "type": "style-map",
                                                                              "content": {
                                                                                  "conditions": [
                                                                                      {
                                                                                          "conditionType": "screen-size",
                                                                                          "maxWidth": 767
                                                                                      }
                                                                                  ],
                                                                                  "mapType": "inlined",
                                                                                  "styles": {
                                                                                      "width": {
                                                                                          "type": "static",
                                                                                          "content": "100%"
                                                                                      },
                                                                                      "alignItems": {
                                                                                          "type": "static",
                                                                                          "content": "flex-start"
                                                                                      },
                                                                                      "flexDirection": {
                                                                                          "type": "static",
                                                                                          "content": "row"
                                                                                      },
                                                                                      "justifyContent": {
                                                                                          "type": "static",
                                                                                          "content": "center"
                                                                                      }
                                                                                  }
                                                                              }
                                                                          }
                                                                      },
                                                                      "abilities": {},
                                                                      "style": {
                                                                          "display": {
                                                                              "type": "static",
                                                                              "content": "flex"
                                                                          },
                                                                          "alignItems": {
                                                                              "type": "static",
                                                                              "content": "flex-start"
                                                                          },
                                                                          "flexDirection": {
                                                                              "type": "static",
                                                                              "content": "row"
                                                                          },
                                                                          "justifyContent": {
                                                                              "type": "static",
                                                                              "content": "space-between"
                                                                          }
                                                                      },
                                                                      "children": [
                                                                          {
                                                                              "type": "element",
                                                                              "content": {
                                                                                  "elementType": "container",
                                                                                  "name": "Container",
                                                                                  "referencedStyles": {
                                                                                      "c53b00de-c77c-4f19-8bf4-89aa3fe9216a": {
                                                                                          "type": "style-map",
                                                                                          "content": {
                                                                                              "conditions": [
                                                                                                  {
                                                                                                      "conditionType": "screen-size",
                                                                                                      "maxWidth": 991
                                                                                                  }
                                                                                              ],
                                                                                              "mapType": "inlined",
                                                                                              "styles": {
                                                                                                  "marginRight": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-fourunits"
                                                                                                      }
                                                                                                  }
                                                                                              }
                                                                                          }
                                                                                      },
                                                                                      "6723537b-7ded-40a3-9f16-75cd103aa0e3": {
                                                                                          "type": "style-map",
                                                                                          "content": {
                                                                                              "conditions": [
                                                                                                  {
                                                                                                      "conditionType": "screen-size",
                                                                                                      "maxWidth": 767
                                                                                                  }
                                                                                              ],
                                                                                              "mapType": "inlined",
                                                                                              "styles": {
                                                                                                  "marginRight": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-fourunits"
                                                                                                      }
                                                                                                  }
                                                                                              }
                                                                                          }
                                                                                      },
                                                                                      "8060ddd8-d94f-4c71-bf1c-408f4e96b802": {
                                                                                          "type": "style-map",
                                                                                          "content": {
                                                                                              "conditions": [
                                                                                                  {
                                                                                                      "conditionType": "screen-size",
                                                                                                      "maxWidth": 479
                                                                                                  }
                                                                                              ],
                                                                                              "mapType": "inlined",
                                                                                              "styles": {
                                                                                                  "marginRight": {
                                                                                                      "type": "static",
                                                                                                      "content": "0px"
                                                                                                  }
                                                                                              }
                                                                                          }
                                                                                      }
                                                                                  },
                                                                                  "abilities": {},
                                                                                  "style": {
                                                                                      "display": {
                                                                                          "type": "static",
                                                                                          "content": "flex"
                                                                                      },
                                                                                      "alignItems": {
                                                                                          "type": "static",
                                                                                          "content": "flex-start"
                                                                                      },
                                                                                      "marginRight": {
                                                                                          "type": "static",
                                                                                          "content": "10rem"
                                                                                      },
                                                                                      "flexDirection": {
                                                                                          "type": "static",
                                                                                          "content": "row"
                                                                                      },
                                                                                      "justifyContent": {
                                                                                          "type": "static",
                                                                                          "content": "space-between"
                                                                                      }
                                                                                  },
                                                                                  "children": [
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "container",
                                                                                              "name": "ProductContainer",
                                                                                              "referencedStyles": {
                                                                                                  "37ae652f-131d-4e50-964a-261df0b833eb": {
                                                                                                      "type": "style-map",
                                                                                                      "content": {
                                                                                                          "conditions": [
                                                                                                              {
                                                                                                                  "conditionType": "screen-size",
                                                                                                                  "maxWidth": 991
                                                                                                              }
                                                                                                          ],
                                                                                                          "mapType": "inlined",
                                                                                                          "styles": {
                                                                                                              "marginRight": {
                                                                                                                  "type": "dynamic",
                                                                                                                  "content": {
                                                                                                                      "referenceType": "token",
                                                                                                                      "id": "--dl-space-space-fourunits"
                                                                                                                  }
                                                                                                              }
                                                                                                          }
                                                                                                      }
                                                                                                  },
                                                                                                  "8298ad80-e1ce-4251-8650-35811caab8d1": {
                                                                                                      "type": "style-map",
                                                                                                      "content": {
                                                                                                          "conditions": [
                                                                                                              {
                                                                                                                  "conditionType": "screen-size",
                                                                                                                  "maxWidth": 767
                                                                                                              }
                                                                                                          ],
                                                                                                          "mapType": "inlined",
                                                                                                          "styles": {
                                                                                                              "marginRight": {
                                                                                                                  "type": "dynamic",
                                                                                                                  "content": {
                                                                                                                      "referenceType": "token",
                                                                                                                      "id": "--dl-space-space-fourunits"
                                                                                                                  }
                                                                                                              }
                                                                                                          }
                                                                                                      }
                                                                                                  }
                                                                                              },
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "flex": {
                                                                                                      "type": "static",
                                                                                                      "content": "0 0 auto"
                                                                                                  },
                                                                                                  "display": {
                                                                                                      "type": "static",
                                                                                                      "content": "flex"
                                                                                                  },
                                                                                                  "alignItems": {
                                                                                                      "type": "static",
                                                                                                      "content": "flex-start"
                                                                                                  },
                                                                                                  "marginRight": {
                                                                                                      "type": "static",
                                                                                                      "content": "10rem"
                                                                                                  },
                                                                                                  "flexDirection": {
                                                                                                      "type": "static",
                                                                                                      "content": "column"
                                                                                                  },
                                                                                                  "justifyContent": {
                                                                                                      "type": "static",
                                                                                                      "content": "flex-start"
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "style": {
                                                                                                              "fontWeight": {
                                                                                                                  "type": "static",
                                                                                                                  "content": "700"
                                                                                                              },
                                                                                                              "marginBottom": {
                                                                                                                  "type": "dynamic",
                                                                                                                  "content": {
                                                                                                                      "referenceType": "token",
                                                                                                                      "id": "--dl-space-space-oneandhalfunits"
                                                                                                                  }
                                                                                                              }
                                                                                                          },
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "Product"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  },
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "style": {
                                                                                                              "marginBottom": {
                                                                                                                  "type": "dynamic",
                                                                                                                  "content": {
                                                                                                                      "referenceType": "token",
                                                                                                                      "id": "--dl-space-space-unit"
                                                                                                                  }
                                                                                                              }
                                                                                                          },
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "Features"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  },
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "style": {
                                                                                                              "marginBottom": {
                                                                                                                  "type": "dynamic",
                                                                                                                  "content": {
                                                                                                                      "referenceType": "token",
                                                                                                                      "id": "--dl-space-space-unit"
                                                                                                                  }
                                                                                                              }
                                                                                                          },
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "Pricing"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  },
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "style": {
                                                                                                              "marginBottom": {
                                                                                                                  "type": "dynamic",
                                                                                                                  "content": {
                                                                                                                      "referenceType": "token",
                                                                                                                      "id": "--dl-space-space-unit"
                                                                                                                  }
                                                                                                              }
                                                                                                          },
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "Tutorials"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  },
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "Releases"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "div"
                                                                                          }
                                                                                      },
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "container",
                                                                                              "name": "CompanyContainer",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "flex": {
                                                                                                      "type": "static",
                                                                                                      "content": "0 0 auto"
                                                                                                  },
                                                                                                  "display": {
                                                                                                      "type": "static",
                                                                                                      "content": "flex"
                                                                                                  },
                                                                                                  "alignItems": {
                                                                                                      "type": "static",
                                                                                                      "content": "flex-start"
                                                                                                  },
                                                                                                  "flexDirection": {
                                                                                                      "type": "static",
                                                                                                      "content": "column"
                                                                                                  },
                                                                                                  "justifyContent": {
                                                                                                      "type": "static",
                                                                                                      "content": "flex-start"
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "style": {
                                                                                                              "fontWeight": {
                                                                                                                  "type": "static",
                                                                                                                  "content": "700"
                                                                                                              },
                                                                                                              "marginBottom": {
                                                                                                                  "type": "dynamic",
                                                                                                                  "content": {
                                                                                                                      "referenceType": "token",
                                                                                                                      "id": "--dl-space-space-oneandhalfunits"
                                                                                                                  }
                                                                                                              }
                                                                                                          },
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "Company"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  },
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "style": {
                                                                                                              "marginBottom": {
                                                                                                                  "type": "dynamic",
                                                                                                                  "content": {
                                                                                                                      "referenceType": "token",
                                                                                                                      "id": "--dl-space-space-unit"
                                                                                                                  }
                                                                                                              }
                                                                                                          },
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "About"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  },
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "style": {
                                                                                                              "marginBottom": {
                                                                                                                  "type": "dynamic",
                                                                                                                  "content": {
                                                                                                                      "referenceType": "token",
                                                                                                                      "id": "--dl-space-space-unit"
                                                                                                                  }
                                                                                                              }
                                                                                                          },
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "Careers"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  },
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "style": {
                                                                                                              "marginBottom": {
                                                                                                                  "type": "dynamic",
                                                                                                                  "content": {
                                                                                                                      "referenceType": "token",
                                                                                                                      "id": "--dl-space-space-unit"
                                                                                                                  }
                                                                                                              }
                                                                                                          },
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "Contact"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  },
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "Blog"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "div"
                                                                                          }
                                                                                      }
                                                                                  ],
                                                                                  "semanticType": "div"
                                                                              }
                                                                          },
                                                                          {
                                                                              "type": "element",
                                                                              "content": {
                                                                                  "elementType": "container",
                                                                                  "referencedStyles": {
                                                                                      "c859d78c-4ef7-4149-8467-fbb930cf7444": {
                                                                                          "type": "style-map",
                                                                                          "content": {
                                                                                              "conditions": [
                                                                                                  {
                                                                                                      "conditionType": "screen-size",
                                                                                                      "maxWidth": 479
                                                                                                  }
                                                                                              ],
                                                                                              "mapType": "inlined",
                                                                                              "styles": {
                                                                                                  "marginTop": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-oneandhalfunits"
                                                                                                      }
                                                                                                  },
                                                                                                  "alignItems": {
                                                                                                      "type": "static",
                                                                                                      "content": "flex-start"
                                                                                                  },
                                                                                                  "marginBottom": {
                                                                                                      "type": "static",
                                                                                                      "content": "0px"
                                                                                                  }
                                                                                              }
                                                                                          }
                                                                                      }
                                                                                  },
                                                                                  "abilities": {},
                                                                                  "style": {
                                                                                      "display": {
                                                                                          "type": "static",
                                                                                          "content": "flex"
                                                                                      },
                                                                                      "alignItems": {
                                                                                          "type": "static",
                                                                                          "content": "flex-start"
                                                                                      },
                                                                                      "flexDirection": {
                                                                                          "type": "static",
                                                                                          "content": "column"
                                                                                      },
                                                                                      "justifyContent": {
                                                                                          "type": "static",
                                                                                          "content": "flex-start"
                                                                                      }
                                                                                  },
                                                                                  "children": [
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "container",
                                                                                              "name": "Contact",
                                                                                              "referencedStyles": {
                                                                                                  "ffd9b25a-4d04-487a-bf86-e7711e63e02d": {
                                                                                                      "type": "style-map",
                                                                                                      "content": {
                                                                                                          "conditions": [
                                                                                                              {
                                                                                                                  "conditionType": "screen-size",
                                                                                                                  "maxWidth": 479
                                                                                                              }
                                                                                                          ],
                                                                                                          "mapType": "inlined",
                                                                                                          "styles": {
                                                                                                              "alignItems": {
                                                                                                                  "type": "static",
                                                                                                                  "content": "flex-start"
                                                                                                              },
                                                                                                              "marginBottom": {
                                                                                                                  "type": "dynamic",
                                                                                                                  "content": {
                                                                                                                      "referenceType": "token",
                                                                                                                      "id": "--dl-space-space-unit"
                                                                                                                  }
                                                                                                              }
                                                                                                          }
                                                                                                      }
                                                                                                  }
                                                                                              },
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "display": {
                                                                                                      "type": "static",
                                                                                                      "content": "flex"
                                                                                                  },
                                                                                                  "alignItems": {
                                                                                                      "type": "static",
                                                                                                      "content": "flex-start"
                                                                                                  },
                                                                                                  "marginBottom": {
                                                                                                      "type": "dynamic",
                                                                                                      "content": {
                                                                                                          "referenceType": "token",
                                                                                                          "id": "--dl-space-space-oneandhalfunits"
                                                                                                      }
                                                                                                  },
                                                                                                  "flexDirection": {
                                                                                                      "type": "static",
                                                                                                      "content": "column"
                                                                                                  },
                                                                                                  "justifyContent": {
                                                                                                      "type": "static",
                                                                                                      "content": "flex-start"
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "style": {
                                                                                                              "fontWeight": {
                                                                                                                  "type": "static",
                                                                                                                  "content": "700"
                                                                                                              },
                                                                                                              "marginBottom": {
                                                                                                                  "type": "dynamic",
                                                                                                                  "content": {
                                                                                                                      "referenceType": "token",
                                                                                                                      "id": "--dl-space-space-oneandhalfunits"
                                                                                                                  }
                                                                                                              }
                                                                                                          },
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "Contact Us"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  },
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "style": {
                                                                                                              "marginBottom": {
                                                                                                                  "type": "dynamic",
                                                                                                                  "content": {
                                                                                                                      "referenceType": "token",
                                                                                                                      "id": "--dl-space-space-unit"
                                                                                                                  }
                                                                                                              }
                                                                                                          },
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "hello@teleporthq.io"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  },
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "+123 (4567) 890"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "div"
                                                                                          }
                                                                                      },
                                                                                      {
                                                                                          "type": "element",
                                                                                          "content": {
                                                                                              "elementType": "container",
                                                                                              "name": "Socials",
                                                                                              "referencedStyles": {},
                                                                                              "abilities": {},
                                                                                              "style": {
                                                                                                  "display": {
                                                                                                      "type": "static",
                                                                                                      "content": "flex"
                                                                                                  },
                                                                                                  "alignItems": {
                                                                                                      "type": "static",
                                                                                                      "content": "flex-start"
                                                                                                  },
                                                                                                  "flexDirection": {
                                                                                                      "type": "static",
                                                                                                      "content": "column"
                                                                                                  },
                                                                                                  "justifyContent": {
                                                                                                      "type": "static",
                                                                                                      "content": "flex-start"
                                                                                                  }
                                                                                              },
                                                                                              "children": [
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "text",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "style": {
                                                                                                              "fontWeight": {
                                                                                                                  "type": "static",
                                                                                                                  "content": "700"
                                                                                                              },
                                                                                                              "marginBottom": {
                                                                                                                  "type": "dynamic",
                                                                                                                  "content": {
                                                                                                                      "referenceType": "token",
                                                                                                                      "id": "--dl-space-space-oneandhalfunits"
                                                                                                                  }
                                                                                                              }
                                                                                                          },
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "static",
                                                                                                                  "content": "Follow Us"
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "span"
                                                                                                      }
                                                                                                  },
                                                                                                  {
                                                                                                      "type": "element",
                                                                                                      "content": {
                                                                                                          "elementType": "container",
                                                                                                          "name": "IconGroup",
                                                                                                          "referencedStyles": {},
                                                                                                          "abilities": {},
                                                                                                          "style": {
                                                                                                              "display": {
                                                                                                                  "type": "static",
                                                                                                                  "content": "flex"
                                                                                                              },
                                                                                                              "alignItems": {
                                                                                                                  "type": "static",
                                                                                                                  "content": "center"
                                                                                                              },
                                                                                                              "flexDirection": {
                                                                                                                  "type": "static",
                                                                                                                  "content": "row"
                                                                                                              },
                                                                                                              "justifyContent": {
                                                                                                                  "type": "static",
                                                                                                                  "content": "space-between"
                                                                                                              }
                                                                                                          },
                                                                                                          "children": [
                                                                                                              {
                                                                                                                  "type": "element",
                                                                                                                  "content": {
                                                                                                                      "elementType": "icon",
                                                                                                                      "referencedStyles": {},
                                                                                                                      "abilities": {},
                                                                                                                      "attrs": {
                                                                                                                          "viewBox": {
                                                                                                                              "type": "static",
                                                                                                                              "content": "0 0 950.8571428571428 1024"
                                                                                                                          }
                                                                                                                      },
                                                                                                                      "style": {
                                                                                                                          "width": {
                                                                                                                              "type": "dynamic",
                                                                                                                              "content": {
                                                                                                                                  "referenceType": "token",
                                                                                                                                  "id": "--dl-size-size-xsmall"
                                                                                                                              }
                                                                                                                          },
                                                                                                                          "height": {
                                                                                                                              "type": "dynamic",
                                                                                                                              "content": {
                                                                                                                                  "referenceType": "token",
                                                                                                                                  "id": "--dl-size-size-xsmall"
                                                                                                                              }
                                                                                                                          },
                                                                                                                          "marginRight": {
                                                                                                                              "type": "dynamic",
                                                                                                                              "content": {
                                                                                                                                  "referenceType": "token",
                                                                                                                                  "id": "--dl-space-space-unit"
                                                                                                                              }
                                                                                                                          }
                                                                                                                      },
                                                                                                                      "children": [
                                                                                                                          {
                                                                                                                              "type": "element",
                                                                                                                              "content": {
                                                                                                                                  "elementType": "icon",
                                                                                                                                  "referencedStyles": {},
                                                                                                                                  "abilities": {},
                                                                                                                                  "attrs": {
                                                                                                                                      "d": {
                                                                                                                                          "type": "static",
                                                                                                                                          "content": "M925.714 233.143c-25.143 36.571-56.571 69.143-92.571 95.429 0.571 8 0.571 16 0.571 24 0 244-185.714 525.143-525.143 525.143-104.571 0-201.714-30.286-283.429-82.857 14.857 1.714 29.143 2.286 44.571 2.286 86.286 0 165.714-29.143 229.143-78.857-81.143-1.714-149.143-54.857-172.571-128 11.429 1.714 22.857 2.857 34.857 2.857 16.571 0 33.143-2.286 48.571-6.286-84.571-17.143-148-91.429-148-181.143v-2.286c24.571 13.714 53.143 22.286 83.429 23.429-49.714-33.143-82.286-89.714-82.286-153.714 0-34.286 9.143-65.714 25.143-93.143 90.857 112 227.429 185.143 380.571 193.143-2.857-13.714-4.571-28-4.571-42.286 0-101.714 82.286-184.571 184.571-184.571 53.143 0 101.143 22.286 134.857 58.286 41.714-8 81.714-23.429 117.143-44.571-13.714 42.857-42.857 78.857-81.143 101.714 37.143-4 73.143-14.286 106.286-28.571z"
                                                                                                                                      }
                                                                                                                                  },
                                                                                                                                  "children": [],
                                                                                                                                  "semanticType": "path"
                                                                                                                              }
                                                                                                                          }
                                                                                                                      ]
                                                                                                                  }
                                                                                                              },
                                                                                                              {
                                                                                                                  "type": "element",
                                                                                                                  "content": {
                                                                                                                      "elementType": "icon",
                                                                                                                      "referencedStyles": {},
                                                                                                                      "abilities": {},
                                                                                                                      "attrs": {
                                                                                                                          "viewBox": {
                                                                                                                              "type": "static",
                                                                                                                              "content": "0 0 877.7142857142857 1024"
                                                                                                                          }
                                                                                                                      },
                                                                                                                      "style": {
                                                                                                                          "width": {
                                                                                                                              "type": "dynamic",
                                                                                                                              "content": {
                                                                                                                                  "referenceType": "token",
                                                                                                                                  "id": "--dl-size-size-xsmall"
                                                                                                                              }
                                                                                                                          },
                                                                                                                          "height": {
                                                                                                                              "type": "dynamic",
                                                                                                                              "content": {
                                                                                                                                  "referenceType": "token",
                                                                                                                                  "id": "--dl-size-size-xsmall"
                                                                                                                              }
                                                                                                                          },
                                                                                                                          "marginRight": {
                                                                                                                              "type": "dynamic",
                                                                                                                              "content": {
                                                                                                                                  "referenceType": "token",
                                                                                                                                  "id": "--dl-space-space-unit"
                                                                                                                              }
                                                                                                                          }
                                                                                                                      },
                                                                                                                      "children": [
                                                                                                                          {
                                                                                                                              "type": "element",
                                                                                                                              "content": {
                                                                                                                                  "elementType": "icon",
                                                                                                                                  "referencedStyles": {},
                                                                                                                                  "abilities": {},
                                                                                                                                  "attrs": {
                                                                                                                                      "d": {
                                                                                                                                          "type": "static",
                                                                                                                                          "content": "M585.143 512c0-80.571-65.714-146.286-146.286-146.286s-146.286 65.714-146.286 146.286 65.714 146.286 146.286 146.286 146.286-65.714 146.286-146.286zM664 512c0 124.571-100.571 225.143-225.143 225.143s-225.143-100.571-225.143-225.143 100.571-225.143 225.143-225.143 225.143 100.571 225.143 225.143zM725.714 277.714c0 29.143-23.429 52.571-52.571 52.571s-52.571-23.429-52.571-52.571 23.429-52.571 52.571-52.571 52.571 23.429 52.571 52.571zM438.857 152c-64 0-201.143-5.143-258.857 17.714-20 8-34.857 17.714-50.286 33.143s-25.143 30.286-33.143 50.286c-22.857 57.714-17.714 194.857-17.714 258.857s-5.143 201.143 17.714 258.857c8 20 17.714 34.857 33.143 50.286s30.286 25.143 50.286 33.143c57.714 22.857 194.857 17.714 258.857 17.714s201.143 5.143 258.857-17.714c20-8 34.857-17.714 50.286-33.143s25.143-30.286 33.143-50.286c22.857-57.714 17.714-194.857 17.714-258.857s5.143-201.143-17.714-258.857c-8-20-17.714-34.857-33.143-50.286s-30.286-25.143-50.286-33.143c-57.714-22.857-194.857-17.714-258.857-17.714zM877.714 512c0 60.571 0.571 120.571-2.857 181.143-3.429 70.286-19.429 132.571-70.857 184s-113.714 67.429-184 70.857c-60.571 3.429-120.571 2.857-181.143 2.857s-120.571 0.571-181.143-2.857c-70.286-3.429-132.571-19.429-184-70.857s-67.429-113.714-70.857-184c-3.429-60.571-2.857-120.571-2.857-181.143s-0.571-120.571 2.857-181.143c3.429-70.286 19.429-132.571 70.857-184s113.714-67.429 184-70.857c60.571-3.429 120.571-2.857 181.143-2.857s120.571-0.571 181.143 2.857c70.286 3.429 132.571 19.429 184 70.857s67.429 113.714 70.857 184c3.429 60.571 2.857 120.571 2.857 181.143z"
                                                                                                                                      }
                                                                                                                                  },
                                                                                                                                  "children": [],
                                                                                                                                  "semanticType": "path"
                                                                                                                              }
                                                                                                                          }
                                                                                                                      ]
                                                                                                                  }
                                                                                                              },
                                                                                                              {
                                                                                                                  "type": "element",
                                                                                                                  "content": {
                                                                                                                      "elementType": "icon",
                                                                                                                      "referencedStyles": {},
                                                                                                                      "abilities": {},
                                                                                                                      "attrs": {
                                                                                                                          "viewBox": {
                                                                                                                              "type": "static",
                                                                                                                              "content": "0 0 602.2582857142856 1024"
                                                                                                                          }
                                                                                                                      },
                                                                                                                      "style": {
                                                                                                                          "width": {
                                                                                                                              "type": "dynamic",
                                                                                                                              "content": {
                                                                                                                                  "referenceType": "token",
                                                                                                                                  "id": "--dl-size-size-xsmall"
                                                                                                                              }
                                                                                                                          },
                                                                                                                          "height": {
                                                                                                                              "type": "dynamic",
                                                                                                                              "content": {
                                                                                                                                  "referenceType": "token",
                                                                                                                                  "id": "--dl-size-size-xsmall"
                                                                                                                              }
                                                                                                                          }
                                                                                                                      },
                                                                                                                      "children": [
                                                                                                                          {
                                                                                                                              "type": "element",
                                                                                                                              "content": {
                                                                                                                                  "elementType": "icon",
                                                                                                                                  "referencedStyles": {},
                                                                                                                                  "abilities": {},
                                                                                                                                  "attrs": {
                                                                                                                                      "d": {
                                                                                                                                          "type": "static",
                                                                                                                                          "content": "M548 6.857v150.857h-89.714c-70.286 0-83.429 33.714-83.429 82.286v108h167.429l-22.286 169.143h-145.143v433.714h-174.857v-433.714h-145.714v-169.143h145.714v-124.571c0-144.571 88.571-223.429 217.714-223.429 61.714 0 114.857 4.571 130.286 6.857z"
                                                                                                                                      }
                                                                                                                                  },
                                                                                                                                  "children": [],
                                                                                                                                  "semanticType": "path"
                                                                                                                              }
                                                                                                                          }
                                                                                                                      ]
                                                                                                                  }
                                                                                                              }
                                                                                                          ],
                                                                                                          "semanticType": "div"
                                                                                                      }
                                                                                                  }
                                                                                              ],
                                                                                              "semanticType": "div"
                                                                                          }
                                                                                      }
                                                                                  ],
                                                                                  "semanticType": "div"
                                                                              }
                                                                          }
                                                                      ],
                                                                      "semanticType": "div"
                                                                  }
                                                              }
                                                          ],
                                                          "semanticType": "div"
                                                      }
                                                  },
                                                  {
                                                      "type": "element",
                                                      "content": {
                                                          "elementType": "container",
                                                          "name": "Separator",
                                                          "referencedStyles": {},
                                                          "abilities": {},
                                                          "style": {
                                                              "width": {
                                                                  "type": "static",
                                                                  "content": "100%"
                                                              },
                                                              "height": {
                                                                  "type": "static",
                                                                  "content": "1px"
                                                              },
                                                              "marginTop": {
                                                                  "type": "dynamic",
                                                                  "content": {
                                                                      "referenceType": "token",
                                                                      "id": "--dl-space-space-twounits"
                                                                  }
                                                              },
                                                              "marginBottom": {
                                                                  "type": "dynamic",
                                                                  "content": {
                                                                      "referenceType": "token",
                                                                      "id": "--dl-space-space-twounits"
                                                                  }
                                                              },
                                                              "backgroundColor": {
                                                                  "type": "dynamic",
                                                                  "content": {
                                                                      "referenceType": "token",
                                                                      "id": "--dl-color-gray-900"
                                                                  }
                                                              }
                                                          },
                                                          "children": [],
                                                          "semanticType": "div"
                                                      }
                                                  },
                                                  {
                                                      "type": "element",
                                                      "content": {
                                                          "elementType": "text",
                                                          "referencedStyles": {
                                                              "f9c6c553-e5ec-40ef-b8be-e53ea85a5a5d": {
                                                                  "type": "style-map",
                                                                  "content": {
                                                                      "conditions": [
                                                                          {
                                                                              "conditionType": "screen-size",
                                                                              "maxWidth": 479
                                                                          }
                                                                      ],
                                                                      "mapType": "inlined",
                                                                      "styles": {
                                                                          "textAlign": {
                                                                              "type": "static",
                                                                              "content": "center"
                                                                          }
                                                                      }
                                                                  }
                                                              }
                                                          },
                                                          "abilities": {},
                                                          "style": {
                                                              "alignSelf": {
                                                                  "type": "static",
                                                                  "content": "center"
                                                              }
                                                          },
                                                          "children": [
                                                              {
                                                                  "type": "element",
                                                                  "content": {
                                                                      "elementType": "text",
                                                                      "referencedStyles": {},
                                                                      "abilities": {},
                                                                      "children": [
                                                                          {
                                                                              "type": "static",
                                                                              "content": "© 2021 teleportHQ, All Rights Reserved."
                                                                          }
                                                                      ],
                                                                      "semanticType": "span"
                                                                  }
                                                              },
                                                              {
                                                                  "type": "element",
                                                                  "content": {
                                                                      "elementType": "text",
                                                                      "referencedStyles": {},
                                                                      "abilities": {},
                                                                      "style": {
                                                                          "textAlign": {
                                                                              "type": "static",
                                                                              "content": "left"
                                                                          }
                                                                      },
                                                                      "children": [],
                                                                      "semanticType": "span"
                                                                  }
                                                              },
                                                              {
                                                                  "type": "element",
                                                                  "content": {
                                                                      "elementType": "text",
                                                                      "referencedStyles": {},
                                                                      "abilities": {},
                                                                      "children": [],
                                                                      "semanticType": "span"
                                                                  }
                                                              }
                                                          ],
                                                          "semanticType": "span"
                                                      }
                                                  }
                                              ],
                                              "semanticType": "footer"
                                          }
                                      },
                                      {
                                          "type": "element",
                                          "content": {
                                              "elementType": "image",
                                              "referencedStyles": {},
                                              "abilities": {},
                                              "attrs": {
                                                  "src": {
                                                      "type": "static",
                                                      "content": "/kitten.png"
                                                  },
                                                  "alt": {
                                                      "type": "static",
                                                      "content": "image"
                                                  }
                                              },
                                              "style": {
                                                  "width": {
                                                      "type": "static",
                                                      "content": "100px"
                                                  },
                                                  "objectFit": {
                                                      "type": "static",
                                                      "content": "cover"
                                                  }
                                              },
                                              "children": []
                                          }
                                      },
                                      {
                                          "type": "element",
                                          "content": {
                                              "elementType": "container",
                                              "referencedStyles": {},
                                              "abilities": {},
                                              "style": {
                                                  "display": {
                                                      "type": "static",
                                                      "content": "flex"
                                                  },
                                                  "width": {
                                                      "type": "static",
                                                      "content": "100px"
                                                  },
                                                  "height": {
                                                      "type": "static",
                                                      "content": "50px"
                                                  },
                                                  "border": {
                                                      "type": "static",
                                                      "content": "2px dashed rgba(120, 120, 120, 0.4)"
                                                  },
                                                  "alignItems": {
                                                      "type": "static",
                                                      "content": "flex-start"
                                                  },
                                                  "flex": {
                                                      "type": "static",
                                                      "content": "0 0 auto"
                                                  },
                                                  "backgroundImage": {
                                                      "type": "static",
                                                      "content": "url(\"/kitten.png\")"
                                                  },
                                                  "backgroundSize": {
                                                      "type": "static",
                                                      "content": "cover"
                                                  }
                                              },
                                              "children": [
                                                  {
                                                      "type": "static",
                                                      "content": "Bg Image"
                                                  }
                                              ],
                                              "semanticType": "div"
                                          }
                                      },
                                      {
                                          "type": "element",
                                          "content": {
                                              "elementType": "container",
                                              "referencedStyles": {},
                                              "abilities": {},
                                              "style": {
                                                  "display": {
                                                      "type": "static",
                                                      "content": "flex"
                                                  },
                                                  "width": {
                                                      "type": "static",
                                                      "content": "100px"
                                                  },
                                                  "height": {
                                                      "type": "static",
                                                      "content": "50px"
                                                  },
                                                  "border": {
                                                      "type": "static",
                                                      "content": "2px dashed rgba(120, 120, 120, 0.4)"
                                                  },
                                                  "alignItems": {
                                                      "type": "static",
                                                      "content": "flex-start"
                                                  },
                                                  "flex": {
                                                      "type": "static",
                                                      "content": "0 0 auto"
                                                  },
                                                  "backgroundImage": {
                                                      "type": "static",
                                                      "content": "url(\"/playground_assets/kitten.png\")"
                                                  },
                                                  "backgroundSize": {
                                                      "type": "static",
                                                      "content": "cover"
                                                  }
                                              },
                                              "children": [
                                                  {
                                                      "type": "static",
                                                      "content": "Bg Image"
                                                  }
                                              ],
                                              "semanticType": "div"
                                          }
                                      }
                                  ],
                                  "semanticType": "div"
                              }
                          },
                          "value": "About",
                          "reference": {
                              "type": "dynamic",
                              "content": {
                                  "referenceType": "state",
                                  "id": "route"
                              }
                          }
                      }
                  },
                  {
                      "type": "conditional",
                      "content": {
                          "node": {
                              "type": "element",
                              "content": {
                                  "elementType": "container",
                                  "referencedStyles": {},
                                  "abilities": {},
                                  "style": {
                                      "width": {
                                          "type": "static",
                                          "content": "100%"
                                      },
                                      "display": {
                                          "type": "static",
                                          "content": "flex"
                                      },
                                      "overflow": {
                                          "type": "static",
                                          "content": "auto"
                                      },
                                      "minHeight": {
                                          "type": "static",
                                          "content": "100vh"
                                      },
                                      "alignItems": {
                                          "type": "static",
                                          "content": "flex-start"
                                      },
                                      "flexDirection": {
                                          "type": "static",
                                          "content": "column"
                                      },
                                      "justifyContent": {
                                          "type": "static",
                                          "content": "flex-start"
                                      }
                                  },
                                  "children": [
                                      {
                                          "type": "element",
                                          "content": {
                                              "elementType": "container",
                                              "children": [
                                                  {
                                                      "type": "static",
                                                      "content": "This is a fallback page"
                                                  }
                                              ]
                                          }
                                      }
                                  ],
                                  "semanticType": "div"
                              }
                          },
                          "value": "Fallback",
                          "reference": {
                              "type": "dynamic",
                              "content": {
                                  "referenceType": "state",
                                  "id": "route"
                              }
                          }
                      }
                  }
              ]
          }
      }
  },
  "components": {
      "Component": {
          "propDefinitions": {},
          "node": {
              "type": "element",
              "content": {
                  "elementType": "container",
                  "referencedStyles": {},
                  "abilities": {},
                  "style": {
                      "width": {
                          "type": "static",
                          "content": "100%"
                      },
                      "height": {
                          "type": "static",
                          "content": "400px"
                      },
                      "display": {
                          "type": "static",
                          "content": "flex"
                      },
                      "position": {
                          "type": "static",
                          "content": "relative"
                      },
                      "alignItems": {
                          "type": "static",
                          "content": "flex-start"
                      },
                      "flexDirection": {
                          "type": "static",
                          "content": "column"
                      }
                  },
                  "children": [
                    {
                        "type": "element",
                        "content": {
                            "elementType": "html-node",
                            "attrs": {
                                "html": {
                                    "type": "raw",
                                    "content": "<blockquote class='twitter-tweet'><p lang='en' dir='ltr'>Feels like the last 20 mins of Don't Look Up right about now…</p>&mdash; Netflix (@netflix) <a href='https://twitter.com/netflix/status/1593420772948598784?ref_src=twsrc%5Etfw'>November 18, 2022</a></blockquote> <script src='https://platform.twitter.com/widgets.js'></script>"
                                }
                            }
                        }
                    },
                    {
                      "type": "element",
                      "content": {
                          "elementType": "html-node",
                          "attrs": {
                              "html": {
                                  "type": "raw",
                                  "content": "<p>Test<script>console.log('test')</script></p>"
                              }
                          },
                          "styles": {
                              "width": {
                                  "type": "static",
                                  "content": "400px"
                              }
                          }
                      }
                  }
                  ],
                  "semanticType": "div"
              }
          },
          "name": "Component",
          "styleSetDefinitions": {}
      },
      "NavigationLinks": {
          "propDefinitions": {
              "text": {
                  "id": "aabae333-9120-42d3-9e36-525fb14689aa",
                  "defaultValue": "About",
                  "type": "string"
              },
              "text3": {
                  "id": "5361ad50-a4f4-4c08-99b9-165314e12824",
                  "defaultValue": "Team",
                  "type": "string"
              },
              "text4": {
                  "id": "0b56039c-7529-41ba-a510-a84252dff14c",
                  "defaultValue": "Blog",
                  "type": "string"
              },
              "text1": {
                  "id": "717f2fc1-a3fe-4899-b7c2-1fb7d6c102f6",
                  "defaultValue": "Features",
                  "type": "string"
              },
              "rootClassName": {
                  "id": "5f6c32bd-c13a-420a-944d-19e76359ea81",
                  "defaultValue": "",
                  "type": "string"
              },
              "text2": {
                  "id": "cdbb8227-1e43-4506-abf0-538fcfc28eb3",
                  "defaultValue": "Pricing",
                  "type": "string"
              }
          },
          "node": {
              "type": "element",
              "content": {
                  "elementType": "container",
                  "name": "Nav",
                  "referencedStyles": {
                      "2f4a08a2-f790-49da-8dd3-658cf6d92000": {
                          "type": "style-map",
                          "content": {
                              "mapType": "component-referenced",
                              "content": {
                                  "type": "dynamic",
                                  "content": {
                                      "referenceType": "prop",
                                      "id": "rootClassName"
                                  }
                              }
                          }
                      },
                      "b347ca72-94de-4cfb-80f1-961cdac81b93": {
                          "type": "style-map",
                          "content": {
                              "conditions": [
                                  {
                                      "conditionType": "screen-size",
                                      "maxWidth": 767
                                  }
                              ],
                              "mapType": "inlined",
                              "styles": {
                                  "alignItems": {
                                      "type": "static",
                                      "content": "flex-start"
                                  },
                                  "flexDirection": {
                                      "type": "static",
                                      "content": "column"
                                  }
                              }
                          }
                      }
                  },
                  "abilities": {},
                  "style": {
                      "flex": {
                          "type": "static",
                          "content": "0 0 auto"
                      },
                      "display": {
                          "type": "static",
                          "content": "flex"
                      },
                      "alignItems": {
                          "type": "static",
                          "content": "center"
                      },
                      "flexDirection": {
                          "type": "static",
                          "content": "row"
                      }
                  },
                  "children": [
                      {
                          "type": "element",
                          "content": {
                              "elementType": "text",
                              "referencedStyles": {
                                  "db1acee6-818e-4ae8-b7e0-dd1637733a28": {
                                      "type": "style-map",
                                      "content": {
                                          "conditions": [
                                              {
                                                  "conditionType": "screen-size",
                                                  "maxWidth": 767
                                              }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                              "marginBottom": {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "token",
                                                      "id": "--dl-space-space-unit"
                                                  }
                                              }
                                          }
                                      }
                                  }
                              },
                              "abilities": {
                                  "link": {
                                      "type": "navlink",
                                      "content": {
                                          "routeName": "About"
                                      }
                                  }
                              },
                              "style": {
                                  "textDecoration": {
                                      "type": "static",
                                      "content": "none"
                                  }
                              },
                              "children": [
                                  {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "prop",
                                          "id": "text"
                                      }
                                  }
                              ],
                              "semanticType": "span"
                          }
                      },
                      {
                          "type": "element",
                          "content": {
                              "elementType": "text",
                              "referencedStyles": {
                                  "f0040a92-5fc6-4367-99b6-ed0d915450a6": {
                                      "type": "style-map",
                                      "content": {
                                          "conditions": [
                                              {
                                                  "conditionType": "screen-size",
                                                  "maxWidth": 767
                                              }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                              "marginLeft": {
                                                  "type": "static",
                                                  "content": "0"
                                              },
                                              "marginBottom": {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "token",
                                                      "id": "--dl-space-space-unit"
                                                  }
                                              }
                                          }
                                      }
                                  }
                              },
                              "abilities": {},
                              "style": {
                                  "marginLeft": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-twounits"
                                      }
                                  }
                              },
                              "children": [
                                  {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "prop",
                                          "id": "text1"
                                      }
                                  }
                              ],
                              "semanticType": "span"
                          }
                      },
                      {
                          "type": "element",
                          "content": {
                              "elementType": "text",
                              "referencedStyles": {
                                  "7a317b89-1ff8-4904-8e39-cd3596864c32": {
                                      "type": "style-map",
                                      "content": {
                                          "conditions": [
                                              {
                                                  "conditionType": "screen-size",
                                                  "maxWidth": 767
                                              }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                              "marginLeft": {
                                                  "type": "static",
                                                  "content": "0"
                                              },
                                              "marginBottom": {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "token",
                                                      "id": "--dl-space-space-unit"
                                                  }
                                              }
                                          }
                                      }
                                  }
                              },
                              "abilities": {},
                              "style": {
                                  "marginLeft": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-twounits"
                                      }
                                  }
                              },
                              "children": [
                                  {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "prop",
                                          "id": "text2"
                                      }
                                  }
                              ],
                              "semanticType": "span"
                          }
                      },
                      {
                          "type": "element",
                          "content": {
                              "elementType": "text",
                              "referencedStyles": {
                                  "a4ccfeca-7315-43b8-9c59-2a32cbaac84f": {
                                      "type": "style-map",
                                      "content": {
                                          "conditions": [
                                              {
                                                  "conditionType": "screen-size",
                                                  "maxWidth": 767
                                              }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                              "marginLeft": {
                                                  "type": "static",
                                                  "content": "0"
                                              },
                                              "marginBottom": {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "token",
                                                      "id": "--dl-space-space-unit"
                                                  }
                                              }
                                          }
                                      }
                                  }
                              },
                              "abilities": {},
                              "style": {
                                  "marginLeft": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-twounits"
                                      }
                                  }
                              },
                              "children": [
                                  {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "prop",
                                          "id": "text3"
                                      }
                                  }
                              ],
                              "semanticType": "span"
                          }
                      },
                      {
                          "type": "element",
                          "content": {
                              "elementType": "text",
                              "referencedStyles": {
                                  "0c8b2e95-0504-40e8-accf-bb8834a13069": {
                                      "type": "style-map",
                                      "content": {
                                          "conditions": [
                                              {
                                                  "conditionType": "screen-size",
                                                  "maxWidth": 767
                                              }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                              "marginLeft": {
                                                  "type": "static",
                                                  "content": "0"
                                              },
                                              "marginBottom": {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "token",
                                                      "id": "--dl-space-space-unit"
                                                  }
                                              }
                                          }
                                      }
                                  }
                              },
                              "abilities": {},
                              "style": {
                                  "marginLeft": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-twounits"
                                      }
                                  }
                              },
                              "children": [
                                  {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "prop",
                                          "id": "text4"
                                      }
                                  }
                              ],
                              "semanticType": "span"
                          }
                      }
                  ],
                  "semanticType": "nav"
              }
          },
          "name": "NavigationLinks",
          "styleSetDefinitions": {
              "rootClassName": {
                  "content": {},
                  "conditions": [],
                  "type": "reusable-component-style-override"
              },
              "rootClassName1": {
                  "content": {},
                  "conditions": [],
                  "type": "reusable-component-style-override"
              },
              "rootClassName2": {
                  "content": {},
                  "conditions": [],
                  "type": "reusable-component-style-override"
              },
              "rootClassName3": {
                  "content": {},
                  "conditions": [],
                  "type": "reusable-component-style-override"
              },
              "rootClassName4": {
                  "content": {},
                  "conditions": [],
                  "type": "reusable-component-style-override"
              },
              "rootClassName5": {
                  "content": {},
                  "conditions": [],
                  "type": "reusable-component-style-override"
              },
              "rootClassName6": {
                  "content": {},
                  "conditions": [],
                  "type": "reusable-component-style-override"
              },
              "rootClassName7": {
                  "content": {},
                  "conditions": [],
                  "type": "reusable-component-style-override"
              }
          }
      },
      "Header": {
          "propDefinitions": {
              "image_src": {
                  "id": "601323c3-d5dc-4b10-80ad-c525b657b1f5",
                  "defaultValue": "https://presentation-website-assets.teleporthq.io/logos/logo.png",
                  "type": "string"
              },
              "image_alt": {
                  "id": "cc962a83-18b6-4726-a48e-76e052f2c185",
                  "defaultValue": "logo",
                  "type": "string"
              },
              "Login": {
                  "id": "86ba5e4e-f72c-4a5e-8ea9-062cee745891",
                  "defaultValue": "Login",
                  "type": "string"
              },
              "Register": {
                  "id": "2236a64f-65fb-4c6e-bad4-0b49edbab440",
                  "defaultValue": "Register",
                  "type": "string"
              },
              "image_src1": {
                  "id": "96165675-8961-4677-a985-1009731609c3",
                  "defaultValue": "https://presentation-website-assets.teleporthq.io/logos/logo.png",
                  "type": "string"
              },
              "image_alt1": {
                  "id": "0fc7986b-0f08-497d-b6c5-089ed630cb86",
                  "defaultValue": "image",
                  "type": "string"
              },
              "rootClassName": {
                  "id": "6e03e757-c9ee-4826-ac1c-3bab4a847b2c",
                  "defaultValue": "",
                  "type": "string"
              }
          },
          "node": {
              "type": "element",
              "content": {
                  "elementType": "container",
                  "name": "Header",
                  "referencedStyles": {
                      "f7a70914-a93d-42b6-8e08-d7308f987005": {
                          "type": "style-map",
                          "content": {
                              "conditions": [
                                  {
                                      "conditionType": "screen-size",
                                      "maxWidth": 479
                                  }
                              ],
                              "mapType": "inlined",
                              "styles": {
                                  "padding": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-unit"
                                      }
                                  }
                              }
                          }
                      },
                      "7ce7d4c6-65a0-42ef-92b1-533545d32ecb": {
                          "type": "style-map",
                          "content": {
                              "conditions": [
                                  {
                                      "conditionType": "screen-size",
                                      "maxWidth": 767
                                  }
                              ],
                              "mapType": "inlined",
                              "styles": {
                                  "paddingLeft": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-twounits"
                                      }
                                  },
                                  "paddingRight": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-twounits"
                                      }
                                  }
                              }
                          }
                      },
                      "c1964328-5a00-4e1e-a118-f395998202c1": {
                          "type": "style-map",
                          "content": {
                              "mapType": "component-referenced",
                              "content": {
                                  "type": "dynamic",
                                  "content": {
                                      "referenceType": "prop",
                                      "id": "rootClassName"
                                  }
                              }
                          }
                      }
                  },
                  "abilities": {},
                  "attrs": {
                      "data-role": {
                          "type": "static",
                          "content": "Header"
                      }
                  },
                  "style": {
                      "width": {
                          "type": "static",
                          "content": "100%"
                      },
                      "display": {
                          "type": "static",
                          "content": "flex"
                      },
                      "maxWidth": {
                          "type": "dynamic",
                          "content": {
                              "referenceType": "token",
                              "id": "--dl-size-size-maxwidth"
                          }
                      },
                      "alignItems": {
                          "type": "static",
                          "content": "center"
                      },
                      "paddingTop": {
                          "type": "dynamic",
                          "content": {
                              "referenceType": "token",
                              "id": "--dl-space-space-twounits"
                          }
                      },
                      "paddingLeft": {
                          "type": "dynamic",
                          "content": {
                              "referenceType": "token",
                              "id": "--dl-space-space-threeunits"
                          }
                      },
                      "paddingRight": {
                          "type": "dynamic",
                          "content": {
                              "referenceType": "token",
                              "id": "--dl-space-space-threeunits"
                          }
                      },
                      "paddingBottom": {
                          "type": "dynamic",
                          "content": {
                              "referenceType": "token",
                              "id": "--dl-space-space-twounits"
                          }
                      },
                      "justifyContent": {
                          "type": "static",
                          "content": "space-between"
                      }
                  },
                  "children": [
                      {
                          "type": "element",
                          "content": {
                              "elementType": "image",
                              "referencedStyles": {},
                              "abilities": {
                                  "link": {
                                      "type": "navlink",
                                      "content": {
                                          "routeName": "Home"
                                      }
                                  }
                              },
                              "attrs": {
                                  "alt": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "prop",
                                          "id": "image_alt"
                                      }
                                  },
                                  "src": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "prop",
                                          "id": "image_src"
                                      }
                                  }
                              },
                              "style": {
                                  "height": {
                                      "type": "static",
                                      "content": "2rem"
                                  },
                                  "textDecoration": {
                                      "type": "static",
                                      "content": "none"
                                  }
                              },
                              "children": []
                          }
                      },
                      {
                          "type": "element",
                          "content": {
                              "elementType": "container",
                              "name": "Nav",
                              "referencedStyles": {
                                  "2a26b67b-d08e-48f6-ac60-32f02dc0f471": {
                                      "type": "style-map",
                                      "content": {
                                          "conditions": [
                                              {
                                                  "conditionType": "screen-size",
                                                  "maxWidth": 767
                                              }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                              "display": {
                                                  "type": "static",
                                                  "content": "none"
                                              }
                                          }
                                      }
                                  }
                              },
                              "abilities": {},
                              "style": {
                                  "display": {
                                      "type": "static",
                                      "content": "flex"
                                  }
                              },
                              "children": [
                                  {
                                      "type": "element",
                                      "content": {
                                          "elementType": "component",
                                          "dependency": {
                                              "type": "local"
                                          },
                                          "name": "NavigationLinks",
                                          "referencedStyles": {},
                                          "abilities": {},
                                          "attrs": {
                                              "rootClassName": {
                                                  "type": "comp-style",
                                                  "content": "rootClassName10"
                                              }
                                          },
                                          "children": [],
                                          "semanticType": "NavigationLinks"
                                      }
                                  }
                              ],
                              "semanticType": "div"
                          }
                      },
                      {
                          "type": "element",
                          "content": {
                              "elementType": "container",
                              "name": "BtnGroup",
                              "referencedStyles": {
                                  "10826acb-433c-4b96-a5a0-d597b3b7d44a": {
                                      "type": "style-map",
                                      "content": {
                                          "conditions": [
                                              {
                                                  "conditionType": "screen-size",
                                                  "maxWidth": 767
                                              }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                              "display": {
                                                  "type": "static",
                                                  "content": "none"
                                              }
                                          }
                                      }
                                  }
                              },
                              "abilities": {},
                              "style": {
                                  "display": {
                                      "type": "static",
                                      "content": "flex"
                                  },
                                  "alignItems": {
                                      "type": "static",
                                      "content": "center"
                                  },
                                  "flexDirection": {
                                      "type": "static",
                                      "content": "row"
                                  },
                                  "justifyContent": {
                                      "type": "static",
                                      "content": "space-between"
                                  }
                              },
                              "children": [
                                  {
                                      "type": "element",
                                      "content": {
                                          "elementType": "button",
                                          "name": "Login",
                                          "referencedStyles": {
                                              "1c601ebb-ac3d-4b4a-b28e-eeadc638127a": {
                                                  "type": "style-map",
                                                  "content": {
                                                      "mapType": "project-referenced",
                                                      "referenceId": "button"
                                                  }
                                              }
                                          },
                                          "abilities": {},
                                          "style": {
                                              "borderWidth": {
                                                  "type": "static",
                                                  "content": "0px"
                                              },
                                              "marginRight": {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "token",
                                                      "id": "--dl-space-space-twounits"
                                                  }
                                              }
                                          },
                                          "children": [
                                              {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "prop",
                                                      "id": "Login"
                                                  }
                                              }
                                          ]
                                      }
                                  },
                                  {
                                      "type": "element",
                                      "content": {
                                          "elementType": "button",
                                          "name": "Register",
                                          "referencedStyles": {
                                              "cea81a34-4ba7-4d42-a34d-ee567ffc9432": {
                                                  "type": "style-map",
                                                  "content": {
                                                      "mapType": "project-referenced",
                                                      "referenceId": "button"
                                                  }
                                              }
                                          },
                                          "abilities": {},
                                          "children": [
                                              {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "prop",
                                                      "id": "Register"
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              ],
                              "semanticType": "div"
                          }
                      },
                      {
                          "type": "element",
                          "content": {
                              "elementType": "container",
                              "name": "BurgerMenu",
                              "referencedStyles": {
                                  "e77c96cc-f59e-47c8-8c4d-c96a425741b9": {
                                      "type": "style-map",
                                      "content": {
                                          "conditions": [
                                              {
                                                  "conditionType": "screen-size",
                                                  "maxWidth": 767
                                              }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                              "display": {
                                                  "type": "static",
                                                  "content": "flex"
                                              },
                                              "alignItems": {
                                                  "type": "static",
                                                  "content": "center"
                                              },
                                              "justifyContent": {
                                                  "type": "static",
                                                  "content": "center"
                                              }
                                          }
                                      }
                                  }
                              },
                              "abilities": {},
                              "attrs": {
                                  "data-type": {
                                      "type": "static",
                                      "content": "BurgerMenu"
                                  }
                              },
                              "style": {
                                  "display": {
                                      "type": "static",
                                      "content": "none"
                                  }
                              },
                              "children": [
                                  {
                                      "type": "element",
                                      "content": {
                                          "elementType": "icon",
                                          "referencedStyles": {},
                                          "abilities": {},
                                          "attrs": {
                                              "viewBox": {
                                                  "type": "static",
                                                  "content": "0 0 1024 1024"
                                              }
                                          },
                                          "style": {
                                              "width": {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "token",
                                                      "id": "--dl-size-size-xsmall"
                                                  }
                                              },
                                              "height": {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "token",
                                                      "id": "--dl-size-size-xsmall"
                                                  }
                                              }
                                          },
                                          "children": [
                                              {
                                                  "type": "element",
                                                  "content": {
                                                      "elementType": "icon",
                                                      "referencedStyles": {},
                                                      "abilities": {},
                                                      "attrs": {
                                                          "d": {
                                                              "type": "static",
                                                              "content": "M128 554.667h768c23.552 0 42.667-19.115 42.667-42.667s-19.115-42.667-42.667-42.667h-768c-23.552 0-42.667 19.115-42.667 42.667s19.115 42.667 42.667 42.667zM128 298.667h768c23.552 0 42.667-19.115 42.667-42.667s-19.115-42.667-42.667-42.667h-768c-23.552 0-42.667 19.115-42.667 42.667s19.115 42.667 42.667 42.667zM128 810.667h768c23.552 0 42.667-19.115 42.667-42.667s-19.115-42.667-42.667-42.667h-768c-23.552 0-42.667 19.115-42.667 42.667s19.115 42.667 42.667 42.667z"
                                                          }
                                                      },
                                                      "children": [],
                                                      "semanticType": "path"
                                                  }
                                              }
                                          ]
                                      }
                                  }
                              ],
                              "semanticType": "div"
                          }
                      },
                      {
                          "type": "element",
                          "content": {
                              "elementType": "container",
                              "name": "MobileMenu",
                              "referencedStyles": {
                                  "1d4e9d28-28c5-4ccc-982e-ecfc69bb5152": {
                                      "type": "style-map",
                                      "content": {
                                          "conditions": [
                                              {
                                                  "conditionType": "screen-size",
                                                  "maxWidth": 479
                                              }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                              "padding": {
                                                  "type": "static",
                                                  "content": "16px"
                                              }
                                          }
                                      }
                                  }
                              },
                              "abilities": {},
                              "attrs": {
                                  "data-type": {
                                      "type": "static",
                                      "content": "MobileMenu"
                                  }
                              },
                              "style": {
                                  "top": {
                                      "type": "static",
                                      "content": "0px"
                                  },
                                  "left": {
                                      "type": "static",
                                      "content": "0px"
                                  },
                                  "width": {
                                      "type": "static",
                                      "content": "100%"
                                  },
                                  "height": {
                                      "type": "static",
                                      "content": "100vh"
                                  },
                                  "zIndex": {
                                      "type": "static",
                                      "content": "100"
                                  },
                                  "display": {
                                      "type": "static",
                                      "content": "none"
                                  },
                                  "padding": {
                                      "type": "static",
                                      "content": "32px"
                                  },
                                  "position": {
                                      "type": "static",
                                      "content": "absolute"
                                  },
                                  "flexDirection": {
                                      "type": "static",
                                      "content": "column"
                                  },
                                  "justifyContent": {
                                      "type": "static",
                                      "content": "space-between"
                                  },
                                  "backgroundColor": {
                                      "type": "static",
                                      "content": "#fff"
                                  }
                              },
                              "children": [
                                  {
                                      "type": "element",
                                      "content": {
                                          "elementType": "container",
                                          "name": "Nav",
                                          "referencedStyles": {},
                                          "abilities": {},
                                          "style": {
                                              "display": {
                                                  "type": "static",
                                                  "content": "flex"
                                              },
                                              "alignItems": {
                                                  "type": "static",
                                                  "content": "flex-start"
                                              },
                                              "flexDirection": {
                                                  "type": "static",
                                                  "content": "column"
                                              }
                                          },
                                          "children": [
                                              {
                                                  "type": "element",
                                                  "content": {
                                                      "elementType": "container",
                                                      "name": "Container",
                                                      "referencedStyles": {},
                                                      "abilities": {},
                                                      "style": {
                                                          "width": {
                                                              "type": "static",
                                                              "content": "100%"
                                                          },
                                                          "display": {
                                                              "type": "static",
                                                              "content": "flex"
                                                          },
                                                          "alignItems": {
                                                              "type": "static",
                                                              "content": "center"
                                                          },
                                                          "marginBottom": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-space-space-threeunits"
                                                              }
                                                          },
                                                          "justifyContent": {
                                                              "type": "static",
                                                              "content": "space-between"
                                                          }
                                                      },
                                                      "children": [
                                                          {
                                                              "type": "element",
                                                              "content": {
                                                                  "elementType": "image",
                                                                  "referencedStyles": {},
                                                                  "abilities": {},
                                                                  "attrs": {
                                                                      "alt": {
                                                                          "type": "dynamic",
                                                                          "content": {
                                                                              "referenceType": "prop",
                                                                              "id": "image_alt1"
                                                                          }
                                                                      },
                                                                      "src": {
                                                                          "type": "dynamic",
                                                                          "content": {
                                                                              "referenceType": "prop",
                                                                              "id": "image_src1"
                                                                          }
                                                                      }
                                                                  },
                                                                  "style": {
                                                                      "height": {
                                                                          "type": "static",
                                                                          "content": "2rem"
                                                                      }
                                                                  },
                                                                  "children": []
                                                              }
                                                          },
                                                          {
                                                              "type": "element",
                                                              "content": {
                                                                  "elementType": "container",
                                                                  "name": "MenuClose",
                                                                  "referencedStyles": {},
                                                                  "abilities": {},
                                                                  "attrs": {
                                                                      "data-type": {
                                                                          "type": "static",
                                                                          "content": "CloseMobileMenu"
                                                                      }
                                                                  },
                                                                  "style": {
                                                                      "display": {
                                                                          "type": "static",
                                                                          "content": "flex"
                                                                      },
                                                                      "alignItems": {
                                                                          "type": "static",
                                                                          "content": "center"
                                                                      },
                                                                      "justifyContent": {
                                                                          "type": "static",
                                                                          "content": "center"
                                                                      }
                                                                  },
                                                                  "children": [
                                                                      {
                                                                          "type": "element",
                                                                          "content": {
                                                                              "elementType": "icon",
                                                                              "referencedStyles": {},
                                                                              "abilities": {},
                                                                              "attrs": {
                                                                                  "viewBox": {
                                                                                      "type": "static",
                                                                                      "content": "0 0 1024 1024"
                                                                                  }
                                                                              },
                                                                              "style": {
                                                                                  "width": {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "token",
                                                                                          "id": "--dl-size-size-xsmall"
                                                                                      }
                                                                                  },
                                                                                  "height": {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "token",
                                                                                          "id": "--dl-size-size-xsmall"
                                                                                      }
                                                                                  }
                                                                              },
                                                                              "children": [
                                                                                  {
                                                                                      "type": "element",
                                                                                      "content": {
                                                                                          "elementType": "icon",
                                                                                          "referencedStyles": {},
                                                                                          "abilities": {},
                                                                                          "attrs": {
                                                                                              "d": {
                                                                                                  "type": "static",
                                                                                                  "content": "M810 274l-238 238 238 238-60 60-238-238-238 238-60-60 238-238-238-238 60-60 238 238 238-238z"
                                                                                              }
                                                                                          },
                                                                                          "children": [],
                                                                                          "semanticType": "path"
                                                                                      }
                                                                                  }
                                                                              ]
                                                                          }
                                                                      }
                                                                  ],
                                                                  "semanticType": "div"
                                                              }
                                                          }
                                                      ],
                                                      "semanticType": "div"
                                                  }
                                              },
                                              {
                                                  "type": "element",
                                                  "content": {
                                                      "elementType": "component",
                                                      "dependency": {
                                                          "type": "local"
                                                      },
                                                      "name": "NavigationLinks",
                                                      "referencedStyles": {},
                                                      "abilities": {},
                                                      "attrs": {
                                                          "rootClassName": {
                                                              "type": "comp-style",
                                                              "content": "rootClassName11"
                                                          }
                                                      },
                                                      "children": [],
                                                      "semanticType": "NavigationLinks"
                                                  }
                                              }
                                          ],
                                          "semanticType": "div"
                                      }
                                  },
                                  {
                                      "type": "element",
                                      "content": {
                                          "elementType": "container",
                                          "name": "IconGroup",
                                          "referencedStyles": {},
                                          "abilities": {},
                                          "children": [
                                              {
                                                  "type": "element",
                                                  "content": {
                                                      "elementType": "icon",
                                                      "referencedStyles": {},
                                                      "abilities": {},
                                                      "attrs": {
                                                          "viewBox": {
                                                              "type": "static",
                                                              "content": "0 0 950.8571428571428 1024"
                                                          }
                                                      },
                                                      "style": {
                                                          "width": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-size-size-xsmall"
                                                              }
                                                          },
                                                          "height": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-size-size-xsmall"
                                                              }
                                                          },
                                                          "marginRight": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-space-space-twounits"
                                                              }
                                                          }
                                                      },
                                                      "children": [
                                                          {
                                                              "type": "element",
                                                              "content": {
                                                                  "elementType": "icon",
                                                                  "referencedStyles": {},
                                                                  "abilities": {},
                                                                  "attrs": {
                                                                      "d": {
                                                                          "type": "static",
                                                                          "content": "M925.714 233.143c-25.143 36.571-56.571 69.143-92.571 95.429 0.571 8 0.571 16 0.571 24 0 244-185.714 525.143-525.143 525.143-104.571 0-201.714-30.286-283.429-82.857 14.857 1.714 29.143 2.286 44.571 2.286 86.286 0 165.714-29.143 229.143-78.857-81.143-1.714-149.143-54.857-172.571-128 11.429 1.714 22.857 2.857 34.857 2.857 16.571 0 33.143-2.286 48.571-6.286-84.571-17.143-148-91.429-148-181.143v-2.286c24.571 13.714 53.143 22.286 83.429 23.429-49.714-33.143-82.286-89.714-82.286-153.714 0-34.286 9.143-65.714 25.143-93.143 90.857 112 227.429 185.143 380.571 193.143-2.857-13.714-4.571-28-4.571-42.286 0-101.714 82.286-184.571 184.571-184.571 53.143 0 101.143 22.286 134.857 58.286 41.714-8 81.714-23.429 117.143-44.571-13.714 42.857-42.857 78.857-81.143 101.714 37.143-4 73.143-14.286 106.286-28.571z"
                                                                      }
                                                                  },
                                                                  "children": [],
                                                                  "semanticType": "path"
                                                              }
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  "type": "element",
                                                  "content": {
                                                      "elementType": "icon",
                                                      "referencedStyles": {},
                                                      "abilities": {},
                                                      "attrs": {
                                                          "viewBox": {
                                                              "type": "static",
                                                              "content": "0 0 877.7142857142857 1024"
                                                          }
                                                      },
                                                      "style": {
                                                          "width": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-size-size-xsmall"
                                                              }
                                                          },
                                                          "height": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-size-size-xsmall"
                                                              }
                                                          },
                                                          "marginRight": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-space-space-twounits"
                                                              }
                                                          }
                                                      },
                                                      "children": [
                                                          {
                                                              "type": "element",
                                                              "content": {
                                                                  "elementType": "icon",
                                                                  "referencedStyles": {},
                                                                  "abilities": {},
                                                                  "attrs": {
                                                                      "d": {
                                                                          "type": "static",
                                                                          "content": "M585.143 512c0-80.571-65.714-146.286-146.286-146.286s-146.286 65.714-146.286 146.286 65.714 146.286 146.286 146.286 146.286-65.714 146.286-146.286zM664 512c0 124.571-100.571 225.143-225.143 225.143s-225.143-100.571-225.143-225.143 100.571-225.143 225.143-225.143 225.143 100.571 225.143 225.143zM725.714 277.714c0 29.143-23.429 52.571-52.571 52.571s-52.571-23.429-52.571-52.571 23.429-52.571 52.571-52.571 52.571 23.429 52.571 52.571zM438.857 152c-64 0-201.143-5.143-258.857 17.714-20 8-34.857 17.714-50.286 33.143s-25.143 30.286-33.143 50.286c-22.857 57.714-17.714 194.857-17.714 258.857s-5.143 201.143 17.714 258.857c8 20 17.714 34.857 33.143 50.286s30.286 25.143 50.286 33.143c57.714 22.857 194.857 17.714 258.857 17.714s201.143 5.143 258.857-17.714c20-8 34.857-17.714 50.286-33.143s25.143-30.286 33.143-50.286c22.857-57.714 17.714-194.857 17.714-258.857s5.143-201.143-17.714-258.857c-8-20-17.714-34.857-33.143-50.286s-30.286-25.143-50.286-33.143c-57.714-22.857-194.857-17.714-258.857-17.714zM877.714 512c0 60.571 0.571 120.571-2.857 181.143-3.429 70.286-19.429 132.571-70.857 184s-113.714 67.429-184 70.857c-60.571 3.429-120.571 2.857-181.143 2.857s-120.571 0.571-181.143-2.857c-70.286-3.429-132.571-19.429-184-70.857s-67.429-113.714-70.857-184c-3.429-60.571-2.857-120.571-2.857-181.143s-0.571-120.571 2.857-181.143c3.429-70.286 19.429-132.571 70.857-184s113.714-67.429 184-70.857c60.571-3.429 120.571-2.857 181.143-2.857s120.571-0.571 181.143 2.857c70.286 3.429 132.571 19.429 184 70.857s67.429 113.714 70.857 184c3.429 60.571 2.857 120.571 2.857 181.143z"
                                                                      }
                                                                  },
                                                                  "children": [],
                                                                  "semanticType": "path"
                                                              }
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  "type": "element",
                                                  "content": {
                                                      "elementType": "icon",
                                                      "referencedStyles": {},
                                                      "abilities": {},
                                                      "attrs": {
                                                          "viewBox": {
                                                              "type": "static",
                                                              "content": "0 0 602.2582857142856 1024"
                                                          }
                                                      },
                                                      "style": {
                                                          "width": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-size-size-xsmall"
                                                              }
                                                          },
                                                          "height": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-size-size-xsmall"
                                                              }
                                                          }
                                                      },
                                                      "children": [
                                                          {
                                                              "type": "element",
                                                              "content": {
                                                                  "elementType": "icon",
                                                                  "referencedStyles": {},
                                                                  "abilities": {},
                                                                  "attrs": {
                                                                      "d": {
                                                                          "type": "static",
                                                                          "content": "M548 6.857v150.857h-89.714c-70.286 0-83.429 33.714-83.429 82.286v108h167.429l-22.286 169.143h-145.143v433.714h-174.857v-433.714h-145.714v-169.143h145.714v-124.571c0-144.571 88.571-223.429 217.714-223.429 61.714 0 114.857 4.571 130.286 6.857z"
                                                                      }
                                                                  },
                                                                  "children": [],
                                                                  "semanticType": "path"
                                                              }
                                                          }
                                                      ]
                                                  }
                                              }
                                          ],
                                          "semanticType": "div"
                                      }
                                  }
                              ],
                              "semanticType": "div"
                          }
                      }
                  ],
                  "semanticType": "header"
              }
          },
          "name": "Header",
          "styleSetDefinitions": {
              "rootClassName": {
                  "content": {},
                  "conditions": [],
                  "type": "reusable-component-style-override"
              }
          }
      },
      "Hero": {
          "propDefinitions": {
              "image_src": {
                  "id": "09427368-90c9-497c-907e-754b8ba0b139",
                  "defaultValue": "https://images.unsplash.com/photo-1525498128493-380d1990a112?ixid=Mnw5MTMyMXwwfDF8c2VhcmNofDI0fHxtaW5pbWFsaXNtJTIwZ3JlZW58ZW58MHx8fHwxNjI1ODQxMDcw&ixlib=rb-1.2.1&h=1200",
                  "type": "string"
              },
              "image_alt": {
                  "id": "2bad8f83-542b-448b-90de-314212b2b334",
                  "defaultValue": "image",
                  "type": "string"
              },
              "heading": {
                  "id": "9e1857ce-9f52-4dcd-9000-ddaab6af0a53",
                  "defaultValue": "Magnificent things are very simple",
                  "type": "string"
              },
              "button": {
                  "id": "f4abacea-00b2-4c0b-8ccf-c23d0f0c7700",
                  "defaultValue": "Get Started",
                  "type": "string"
              },
              "button1": {
                  "id": "1b3866f9-5667-4b4f-97c4-5ca79f8254a4",
                  "defaultValue": "Learn More",
                  "type": "string"
              }
          },
          "node": {
              "type": "element",
              "content": {
                  "elementType": "container",
                  "name": "Hero",
                  "referencedStyles": {
                      "3ffdd7c0-6c8f-4139-9d57-9cd88f43cf27": {
                          "type": "style-map",
                          "content": {
                              "conditions": [
                                  {
                                      "conditionType": "screen-size",
                                      "maxWidth": 767
                                  }
                              ],
                              "mapType": "inlined",
                              "styles": {
                                  "paddingLeft": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-twounits"
                                      }
                                  },
                                  "paddingRight": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-twounits"
                                      }
                                  }
                              }
                          }
                      },
                      "5936298f-80ab-4221-83f8-90ce5984b023": {
                          "type": "style-map",
                          "content": {
                              "conditions": [
                                  {
                                      "conditionType": "screen-size",
                                      "maxWidth": 991
                                  }
                              ],
                              "mapType": "inlined",
                              "styles": {
                                  "flexDirection": {
                                      "type": "static",
                                      "content": "column"
                                  }
                              }
                          }
                      },
                      "86ca7cf7-0b5b-4453-9e30-c15e16c6165b": {
                          "type": "style-map",
                          "content": {
                              "conditions": [
                                  {
                                      "conditionType": "screen-size",
                                      "maxWidth": 479
                                  }
                              ],
                              "mapType": "inlined",
                              "styles": {
                                  "paddingTop": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-twounits"
                                      }
                                  },
                                  "paddingLeft": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-unit"
                                      }
                                  },
                                  "paddingRight": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-unit"
                                      }
                                  },
                                  "paddingBottom": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-twounits"
                                      }
                                  }
                              }
                          }
                      }
                  },
                  "abilities": {},
                  "style": {
                      "width": {
                          "type": "static",
                          "content": "100%"
                      },
                      "display": {
                          "type": "static",
                          "content": "flex"
                      },
                      "padding": {
                          "type": "dynamic",
                          "content": {
                              "referenceType": "token",
                              "id": "--dl-space-space-threeunits"
                          }
                      },
                      "maxWidth": {
                          "type": "dynamic",
                          "content": {
                              "referenceType": "token",
                              "id": "--dl-size-size-maxwidth"
                          }
                      },
                      "minHeight": {
                          "type": "static",
                          "content": "80vh"
                      },
                      "alignItems": {
                          "type": "static",
                          "content": "center"
                      },
                      "flexDirection": {
                          "type": "static",
                          "content": "row"
                      },
                      "justifyContent": {
                          "type": "static",
                          "content": "space-between"
                      }
                  },
                  "children": [
                      {
                          "type": "element",
                          "content": {
                              "elementType": "container",
                              "referencedStyles": {
                                  "344948ea-fea3-42a4-8fc0-d3a4e382744b": {
                                      "type": "style-map",
                                      "content": {
                                          "conditions": [
                                              {
                                                  "conditionType": "screen-size",
                                                  "maxWidth": 991
                                              }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                              "alignItems": {
                                                  "type": "static",
                                                  "content": "center"
                                              },
                                              "marginRight": {
                                                  "type": "static",
                                                  "content": "0px"
                                              },
                                              "marginBottom": {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "token",
                                                      "id": "--dl-space-space-twounits"
                                                  }
                                              },
                                              "paddingRight": {
                                                  "type": "static",
                                                  "content": "0px"
                                              }
                                          }
                                      }
                                  },
                                  "6776dbcd-58b2-4513-bcb8-25761c12a4c7": {
                                      "type": "style-map",
                                      "content": {
                                          "conditions": [
                                              {
                                                  "conditionType": "screen-size",
                                                  "maxWidth": 479
                                              }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                              "marginBottom": {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "token",
                                                      "id": "--dl-space-space-unit"
                                                  }
                                              }
                                          }
                                      }
                                  }
                              },
                              "abilities": {},
                              "style": {
                                  "display": {
                                      "type": "static",
                                      "content": "flex"
                                  },
                                  "marginRight": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-threeunits"
                                      }
                                  },
                                  "paddingRight": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-threeunits"
                                      }
                                  },
                                  "flexDirection": {
                                      "type": "static",
                                      "content": "column"
                                  }
                              },
                              "children": [
                                  {
                                      "type": "element",
                                      "content": {
                                          "elementType": "text",
                                          "referencedStyles": {
                                              "78d44ec5-87ca-4329-b211-c840c24bd2ce": {
                                                  "type": "style-map",
                                                  "content": {
                                                      "conditions": [
                                                          {
                                                              "conditionType": "screen-size",
                                                              "maxWidth": 991
                                                          }
                                                      ],
                                                      "mapType": "inlined",
                                                      "styles": {
                                                          "textAlign": {
                                                              "type": "static",
                                                              "content": "center"
                                                          }
                                                      }
                                                  }
                                              }
                                          },
                                          "abilities": {},
                                          "style": {
                                              "fontSize": {
                                                  "type": "static",
                                                  "content": "3rem"
                                              },
                                              "maxWidth": {
                                                  "type": "static",
                                                  "content": "450px"
                                              }
                                          },
                                          "children": [
                                              {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "prop",
                                                      "id": "heading"
                                                  }
                                              }
                                          ],
                                          "semanticType": "h1"
                                      }
                                  },
                                  {
                                      "type": "element",
                                      "content": {
                                          "elementType": "text",
                                          "referencedStyles": {
                                              "3eb02776-c341-43c5-abc4-73114f485316": {
                                                  "type": "style-map",
                                                  "content": {
                                                      "conditions": [
                                                          {
                                                              "conditionType": "screen-size",
                                                              "maxWidth": 767
                                                          }
                                                      ],
                                                      "mapType": "inlined",
                                                      "styles": {
                                                          "paddingLeft": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-space-space-unit"
                                                              }
                                                          },
                                                          "paddingRight": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-space-space-unit"
                                                              }
                                                          }
                                                      }
                                                  }
                                              },
                                              "0d41a2f4-38bc-40bd-b7ac-bcebe032d0f3": {
                                                  "type": "style-map",
                                                  "content": {
                                                      "conditions": [
                                                          {
                                                              "conditionType": "screen-size",
                                                              "maxWidth": 991
                                                          }
                                                      ],
                                                      "mapType": "inlined",
                                                      "styles": {
                                                          "textAlign": {
                                                              "type": "static",
                                                              "content": "center"
                                                          },
                                                          "paddingLeft": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-space-space-threeunits"
                                                              }
                                                          },
                                                          "paddingRight": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-space-space-threeunits"
                                                              }
                                                          }
                                                      }
                                                  }
                                              }
                                          },
                                          "abilities": {},
                                          "style": {
                                              "marginTop": {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "token",
                                                      "id": "--dl-space-space-twounits"
                                                  }
                                              },
                                              "marginBottom": {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "token",
                                                      "id": "--dl-space-space-twounits"
                                                  }
                                              }
                                          },
                                          "children": [
                                              {
                                                  "type": "element",
                                                  "content": {
                                                      "elementType": "text",
                                                      "referencedStyles": {},
                                                      "abilities": {},
                                                      "children": [
                                                          {
                                                              "type": "element",
                                                              "content": {
                                                                  "elementType": "text",
                                                                  "referencedStyles": {},
                                                                  "abilities": {},
                                                                  "children": [
                                                                      {
                                                                          "type": "static",
                                                                          "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non volutpat turpis. "
                                                                      },
                                                                      {
                                                                          "type": "raw",
                                                                          "content": " "
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              "type": "element",
                                                              "content": {
                                                                  "elementType": "text",
                                                                  "referencedStyles": {},
                                                                  "abilities": {},
                                                                  "children": [
                                                                      {
                                                                          "type": "static",
                                                                          "content": " "
                                                                      },
                                                                      {
                                                                          "type": "raw",
                                                                          "content": " "
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ],
                                                      "semanticType": "span"
                                                  }
                                              },
                                              {
                                                  "type": "element",
                                                  "content": {
                                                      "elementType": "text",
                                                      "referencedStyles": {},
                                                      "abilities": {},
                                                      "children": [
                                                          {
                                                              "type": "element",
                                                              "content": {
                                                                  "elementType": "text",
                                                                  "referencedStyles": {},
                                                                  "abilities": {},
                                                                  "children": [
                                                                      {
                                                                          "type": "static",
                                                                          "content": "Mauris luctus rutrum mi ut rhoncus. Integer in dignissim tortor. "
                                                                      },
                                                                      {
                                                                          "type": "raw",
                                                                          "content": " "
                                                                      }
                                                                  ]
                                                              }
                                                          },
                                                          {
                                                              "type": "element",
                                                              "content": {
                                                                  "elementType": "text",
                                                                  "referencedStyles": {},
                                                                  "abilities": {},
                                                                  "children": [
                                                                      {
                                                                          "type": "static",
                                                                          "content": " "
                                                                      },
                                                                      {
                                                                          "type": "raw",
                                                                          "content": " "
                                                                      }
                                                                  ]
                                                              }
                                                          }
                                                      ],
                                                      "semanticType": "span"
                                                  }
                                              }
                                          ],
                                          "semanticType": "span"
                                      }
                                  },
                                  {
                                      "type": "element",
                                      "content": {
                                          "elementType": "container",
                                          "name": "BtnGroup",
                                          "referencedStyles": {
                                              "a8f29e6c-4bf5-460a-9d21-2680a2c1c1a4": {
                                                  "type": "style-map",
                                                  "content": {
                                                      "conditions": [
                                                          {
                                                              "conditionType": "screen-size",
                                                              "maxWidth": 479
                                                          }
                                                      ],
                                                      "mapType": "inlined",
                                                      "styles": {
                                                          "flexDirection": {
                                                              "type": "static",
                                                              "content": "column"
                                                          }
                                                      }
                                                  }
                                              }
                                          },
                                          "abilities": {},
                                          "style": {
                                              "display": {
                                                  "type": "static",
                                                  "content": "flex"
                                              },
                                              "alignItems": {
                                                  "type": "static",
                                                  "content": "center"
                                              },
                                              "flexDirection": {
                                                  "type": "static",
                                                  "content": "row"
                                              }
                                          },
                                          "children": [
                                              {
                                                  "type": "element",
                                                  "content": {
                                                      "elementType": "button",
                                                      "referencedStyles": {
                                                          "587387e6-9e19-499b-a10b-25e16c26f942": {
                                                              "type": "style-map",
                                                              "content": {
                                                                  "conditions": [
                                                                      {
                                                                          "conditionType": "element-state",
                                                                          "content": "hover"
                                                                      }
                                                                  ],
                                                                  "mapType": "inlined",
                                                                  "styles": {
                                                                      "color": {
                                                                          "type": "dynamic",
                                                                          "content": {
                                                                              "referenceType": "token",
                                                                              "id": "--dl-color-gray-black"
                                                                          }
                                                                      },
                                                                      "backgroundColor": {
                                                                          "type": "dynamic",
                                                                          "content": {
                                                                              "referenceType": "token",
                                                                              "id": "--dl-color-gray-white"
                                                                          }
                                                                      }
                                                                  }
                                                              }
                                                          },
                                                          "059c93d1-c3d3-4662-9c6c-d2a861154c5d": {
                                                              "type": "style-map",
                                                              "content": {
                                                                  "mapType": "project-referenced",
                                                                  "referenceId": "button"
                                                              }
                                                          },
                                                          "0552c021-5ab1-4d40-99b8-04d3fa063d10": {
                                                              "id": "0552c021-5ab1-4d40-99b8-04d3fa063d10",
                                                              "type": "style-map",
                                                              "content": {
                                                                  "mapType": "project-referenced",
                                                                  "referenceId": "primary-button"
                                                              }
                                                          }
                                                      },
                                                      "abilities": {},
                                                      "style": {
                                                          "paddingTop": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-space-space-unit"
                                                              }
                                                          },
                                                          "transition": {
                                                              "type": "static",
                                                              "content": "0.3s"
                                                          },
                                                          "paddingLeft": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-space-space-twounits"
                                                              }
                                                          },
                                                          "paddingRight": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-space-space-twounits"
                                                              }
                                                          },
                                                          "paddingBottom": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-space-space-unit"
                                                              }
                                                          }
                                                      },
                                                      "children": [
                                                          {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "prop",
                                                                  "id": "button"
                                                              }
                                                          }
                                                      ]
                                                  }
                                              },
                                              {
                                                  "type": "element",
                                                  "content": {
                                                      "elementType": "button",
                                                      "referencedStyles": {
                                                          "20c40652-8f4b-4675-989c-8485b2f3f1b7": {
                                                              "type": "style-map",
                                                              "content": {
                                                                  "conditions": [
                                                                      {
                                                                          "conditionType": "element-state",
                                                                          "content": "hover"
                                                                      }
                                                                  ],
                                                                  "mapType": "inlined",
                                                                  "styles": {
                                                                      "borderColor": {
                                                                          "type": "dynamic",
                                                                          "content": {
                                                                              "referenceType": "token",
                                                                              "id": "--dl-color-gray-black"
                                                                          }
                                                                      },
                                                                      "color": {
                                                                          "type": "dynamic",
                                                                          "content": {
                                                                              "referenceType": "token",
                                                                              "id": "--dl-color-gray-white"
                                                                          }
                                                                      },
                                                                      "backgroundColor": {
                                                                          "type": "dynamic",
                                                                          "content": {
                                                                              "referenceType": "token",
                                                                              "id": "--dl-color-gray-black"
                                                                          }
                                                                      }
                                                                  }
                                                              }
                                                          },
                                                          "06670c8b-a0c0-491d-83f1-56c73d7ae213": {
                                                              "type": "style-map",
                                                              "content": {
                                                                  "mapType": "project-referenced",
                                                                  "referenceId": "button"
                                                              }
                                                          },
                                                          "49c3aaf7-2ca0-4cf4-a9cd-c6582c629dc7": {
                                                              "type": "style-map",
                                                              "content": {
                                                                  "conditions": [
                                                                      {
                                                                          "conditionType": "screen-size",
                                                                          "maxWidth": 479
                                                                      }
                                                                  ],
                                                                  "mapType": "inlined",
                                                                  "styles": {
                                                                      "marginTop": {
                                                                          "type": "dynamic",
                                                                          "content": {
                                                                              "referenceType": "token",
                                                                              "id": "--dl-space-space-unit"
                                                                          }
                                                                      },
                                                                      "marginLeft": {
                                                                          "type": "static",
                                                                          "content": "0px"
                                                                      }
                                                                  }
                                                              }
                                                          },
                                                          "9e7b7ffa-1ad3-42f3-9535-76a6d74b5691": {
                                                              "id": "9e7b7ffa-1ad3-42f3-9535-76a6d74b5691",
                                                              "type": "style-map",
                                                              "content": {
                                                                  "mapType": "project-referenced",
                                                                  "referenceId": "secondary-button"
                                                              }
                                                          }
                                                      },
                                                      "abilities": {},
                                                      "style": {
                                                          "marginLeft": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-space-space-unit"
                                                              }
                                                          },
                                                          "paddingTop": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-space-space-unit"
                                                              }
                                                          },
                                                          "transition": {
                                                              "type": "static",
                                                              "content": "0.3s"
                                                          },
                                                          "paddingLeft": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-space-space-twounits"
                                                              }
                                                          },
                                                          "paddingRight": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-space-space-twounits"
                                                              }
                                                          },
                                                          "paddingBottom": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-space-space-unit"
                                                              }
                                                          }
                                                      },
                                                      "children": [
                                                          {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "prop",
                                                                  "id": "button1"
                                                              }
                                                          }
                                                      ]
                                                  }
                                              }
                                          ],
                                          "semanticType": "div"
                                      }
                                  }
                              ],
                              "semanticType": "div"
                          }
                      },
                      {
                          "type": "element",
                          "content": {
                              "elementType": "image",
                              "referencedStyles": {
                                  "885d62f9-2b10-4b14-8373-daa3ee90391b": {
                                      "type": "style-map",
                                      "content": {
                                          "conditions": [
                                              {
                                                  "conditionType": "screen-size",
                                                  "maxWidth": 767
                                              }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                              "width": {
                                                  "type": "static",
                                                  "content": "80%"
                                              }
                                          }
                                      }
                                  }
                              },
                              "abilities": {},
                              "attrs": {
                                  "alt": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "prop",
                                          "id": "image_alt"
                                      }
                                  },
                                  "src": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "prop",
                                          "id": "image_src"
                                      }
                                  }
                              },
                              "style": {
                                  "width": {
                                      "type": "static",
                                      "content": "400px"
                                  },
                                  "objectFit": {
                                      "type": "static",
                                      "content": "cover"
                                  }
                              },
                              "children": []
                          }
                      }
                  ],
                  "semanticType": "div"
              }
          },
          "name": "Hero",
          "styleSetDefinitions": {}
      },
      "FeatureCard4": {
          "propDefinitions": {
              "rootClassName": {
                  "id": "636d6f8e-21c7-45e6-9cf9-32fc692a69a8",
                  "defaultValue": "rootClassName",
                  "type": "string"
              },
              "content": {
                  "id": "d94491db-94d1-4835-9934-0c3ff6b67840",
                  "defaultValue": "Lorem ipsum",
                  "type": "string"
              },
              "description": {
                  "id": "6dc72a07-1492-4860-89f3-0e8b6d2e4a73",
                  "defaultValue": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. In lorem lorem, malesuada in metus vitae, scelerisque accumsan ipsum.",
                  "type": "string"
              }
          },
          "node": {
              "type": "element",
              "content": {
                  "elementType": "container",
                  "name": "FeatureCard",
                  "referencedStyles": {
                      "0a40e87e-9c79-4469-a141-6abb2801ebe9": {
                          "type": "style-map",
                          "content": {
                              "mapType": "component-referenced",
                              "content": {
                                  "type": "dynamic",
                                  "content": {
                                      "referenceType": "prop",
                                      "id": "rootClassName"
                                  }
                              }
                          }
                      }
                  },
                  "abilities": {},
                  "style": {
                      "width": {
                          "type": "static",
                          "content": "100%"
                      },
                      "display": {
                          "type": "static",
                          "content": "flex"
                      },
                      "padding": {
                          "type": "dynamic",
                          "content": {
                              "referenceType": "token",
                              "id": "--dl-space-space-unit"
                          }
                      },
                      "maxWidth": {
                          "type": "dynamic",
                          "content": {
                              "referenceType": "token",
                              "id": "--dl-size-size-maxwidth"
                          }
                      },
                      "alignItems": {
                          "type": "static",
                          "content": "flex-start"
                      },
                      "flexDirection": {
                          "type": "static",
                          "content": "column"
                      },
                      "justifyContent": {
                          "type": "static",
                          "content": "flex-start"
                      },
                      "backgroundColor": {
                          "type": "static",
                          "content": "#fff"
                      }
                  },
                  "children": [
                      {
                          "type": "element",
                          "content": {
                              "elementType": "icon",
                              "referencedStyles": {},
                              "abilities": {},
                              "attrs": {
                                  "viewBox": {
                                      "type": "static",
                                      "content": "0 0 1024 1024"
                                  }
                              },
                              "style": {
                                  "fill": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-color-gray-500"
                                      }
                                  },
                                  "width": {
                                      "type": "static",
                                      "content": "2rem"
                                  },
                                  "height": {
                                      "type": "static",
                                      "content": "2rem"
                                  },
                                  "marginBottom": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-unit"
                                      }
                                  }
                              },
                              "children": [
                                  {
                                      "type": "element",
                                      "content": {
                                          "elementType": "icon",
                                          "referencedStyles": {},
                                          "abilities": {},
                                          "attrs": {
                                              "d": {
                                                  "type": "static",
                                                  "content": "M809.003 291.328l-297.003 171.819-297.003-171.819 275.456-157.397c4.779-2.731 9.899-4.48 15.147-5.333 9.301-1.451 18.987 0.128 27.904 5.291zM491.776 979.669c6.016 3.243 12.928 5.077 20.224 5.077 7.381 0 14.336-1.877 20.395-5.163 15.189-2.475 29.909-7.68 43.392-15.36l298.709-170.709c26.368-15.232 45.269-38.315 55.424-64.597 5.675-14.592 8.619-30.165 8.747-46.251v-341.333c0-20.395-4.821-39.723-13.397-56.917-0.939-3.029-2.219-5.973-3.883-8.832-1.963-3.371-4.267-6.357-6.912-8.96-1.323-1.835-2.731-3.669-4.139-5.419-9.813-12.203-21.845-22.528-35.456-30.507l-299.051-170.88c-26.027-15.019-55.467-19.84-83.328-15.531-15.531 2.432-30.507 7.637-44.288 15.488l-298.709 170.709c-16.341 9.429-29.824 21.888-40.149 36.267-2.56 2.56-4.864 5.547-6.784 8.832-1.664 2.901-2.987 5.888-3.925 8.96-1.707 3.456-3.243 6.955-4.608 10.496-5.632 14.635-8.576 30.208-8.704 45.995v341.632c0.043 30.293 10.581 58.197 28.331 80.128 9.813 12.203 21.845 22.528 35.456 30.507l299.051 170.88c13.824 7.979 28.587 13.099 43.605 15.445zM469.333 537.045v340.949l-277.12-158.336c-4.736-2.773-8.832-6.315-12.16-10.411-5.931-7.381-9.387-16.512-9.387-26.581v-318.379zM554.667 877.995v-340.949l298.667-172.757v318.379c-0.043 5.163-1.067 10.496-2.987 15.445-3.413 8.789-9.6 16.384-18.176 21.333z"
                                              }
                                          },
                                          "children": [],
                                          "semanticType": "path"
                                      }
                                  }
                              ]
                          }
                      },
                      {
                          "type": "element",
                          "content": {
                              "elementType": "text",
                              "referencedStyles": {
                                  "4861a50b-badf-4395-969d-f0d2d597a7f8": {
                                      "type": "style-map",
                                      "content": {
                                          "conditions": [
                                              {
                                                  "conditionType": "screen-size",
                                                  "maxWidth": 479
                                              }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                              "fontStyle": {
                                                  "type": "static",
                                                  "content": "normal"
                                              },
                                              "fontWeight": {
                                                  "type": "static",
                                                  "content": "600"
                                              }
                                          }
                                      }
                                  },
                                  "4861a50b-badf-4395-969d-f0d2d597a7f9": {
                                      "type": "style-map",
                                      "content": {
                                          "mapType": "component-referenced",
                                          "content": {
                                              "type": "dynamic",
                                              "content": {
                                                  "referenceType": "comp",
                                                  "id": "root-class-name-4"
                                              }
                                          }
                                      }
                                  }
                              },
                              "abilities": {},
                              "style": {
                                  "fontWeight": {
                                      "type": "static",
                                      "content": "600"
                                  },
                                  "marginBottom": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-unit"
                                      }
                                  }
                              },
                              "children": [
                                  {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "prop",
                                          "id": "content"
                                      }
                                  }
                              ],
                              "semanticType": "h2"
                          }
                      },
                      {
                          "type": "element",
                          "content": {
                              "elementType": "text",
                              "referencedStyles": {},
                              "abilities": {},
                              "style": {
                                  "color": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-color-gray-700"
                                      }
                                  }
                              },
                              "children": [
                                  {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "prop",
                                          "id": "description"
                                      }
                                  }
                              ],
                              "semanticType": "span"
                          }
                      }
                  ],
                  "semanticType": "div"
              }
          },
          "name": "FeatureCard4",
          "styleSetDefinitions": {
              "rootClassName": {
                  "content": {
                      "width": {
                          "type": "static",
                          "content": "100%"
                      }
                  },
                  "conditions": [],
                  "type": "reusable-component-style-override"
              },
              "rootClassName1": {
                  "content": {
                      "backgroundColor": {
                          "type": "static",
                          "content": "#D9D9D9"
                      }
                  },
                  "conditions": [],
                  "type": "reusable-component-style-override"
              },
              "rootClassName2": {
                  "content": {},
                  "conditions": [],
                  "type": "reusable-component-style-override"
              },
              "rootClassName3": {
                  "content": {
                      "backgroundColor": {
                          "type": "dynamic",
                          "content": {
                              "referenceType": "token",
                              "id": "--dl-color-gray-500"
                          }
                      }
                  },
                  "conditions": [],
                  "type": "reusable-component-style-override"
              },
              "root-class-name-4": {
                  "content": {
                      "backgroundColor": {
                          "type": "static",
                          "content": "#1e622e"
                      }
                  },
                  "conditions": [],
                  "type": "reusable-component-style-override"
              }
          }
      },
      "Footer": {
          "propDefinitions": {
              "image_src": {
                  "id": "6d430ad8-cb40-4250-b292-0f9347922fd4",
                  "defaultValue": "https://presentation-website-assets.teleporthq.io/logos/logo.png",
                  "type": "string"
              },
              "image_alt": {
                  "id": "35f73ad8-b02b-499a-a50f-a2a4ae261041",
                  "defaultValue": "logo",
                  "type": "string"
              },
              "text": {
                  "id": "f439a1c6-dc7e-4c0b-953e-164f500ea79a",
                  "defaultValue": "Product",
                  "type": "string"
              },
              "text1": {
                  "id": "769f76f8-465b-44e5-93a0-7ebfade13735",
                  "defaultValue": "Features",
                  "type": "string"
              },
              "text2": {
                  "id": "32e8d12d-84ec-409c-82d5-ef77113c72f3",
                  "defaultValue": "Pricing",
                  "type": "string"
              },
              "text3": {
                  "id": "5d23b5af-a1a2-4333-9918-46c68e6f5eba",
                  "defaultValue": "Tutorials",
                  "type": "string"
              },
              "text4": {
                  "id": "afba6e7d-307b-45b6-ab0a-d014282b9268",
                  "defaultValue": "Releases",
                  "type": "string"
              },
              "text5": {
                  "id": "215a600d-7431-480e-96d5-0205369937d9",
                  "defaultValue": "Company",
                  "type": "string"
              },
              "text6": {
                  "id": "2ee23e1a-5866-4e9f-ac6c-a72377bca4dc",
                  "defaultValue": "About",
                  "type": "string"
              },
              "text7": {
                  "id": "2338ebbd-abc8-455e-b1d6-ab408da34684",
                  "defaultValue": "Careers",
                  "type": "string"
              },
              "text8": {
                  "id": "b731f788-58ce-4d92-b927-67c5874962d4",
                  "defaultValue": "Contact",
                  "type": "string"
              },
              "text9": {
                  "id": "d9ea966f-047a-400f-8931-3a2e16d71546",
                  "defaultValue": "Blog",
                  "type": "string"
              },
              "text10": {
                  "id": "62ac6502-a643-4d9a-b713-3bff2478ce29",
                  "defaultValue": "Contact Us",
                  "type": "string"
              },
              "text11": {
                  "id": "21306fb7-5805-4139-8336-adf6cd681ddc",
                  "defaultValue": "hello@teleporthq.io",
                  "type": "string"
              },
              "text12": {
                  "id": "0d56149b-47f9-4c63-9076-012f45e04c3c",
                  "defaultValue": "+123 (4567) 890",
                  "type": "string"
              },
              "text13": {
                  "id": "54425500-d989-421d-b417-6bc76bb82da1",
                  "defaultValue": "Follow Us",
                  "type": "string"
              }
          },
          "node": {
              "type": "element",
              "content": {
                  "elementType": "container",
                  "name": "Footer",
                  "referencedStyles": {
                      "c231f77e-4ec0-4a78-b2f4-ee069175f2e2": {
                          "type": "style-map",
                          "content": {
                              "conditions": [
                                  {
                                      "conditionType": "screen-size",
                                      "maxWidth": 767
                                  }
                              ],
                              "mapType": "inlined",
                              "styles": {
                                  "paddingLeft": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-twounits"
                                      }
                                  },
                                  "paddingRight": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-twounits"
                                      }
                                  }
                              }
                          }
                      },
                      "d591d1fb-aa7f-4b65-8d81-3d292f60ea8f": {
                          "type": "style-map",
                          "content": {
                              "conditions": [
                                  {
                                      "conditionType": "screen-size",
                                      "maxWidth": 479
                                  }
                              ],
                              "mapType": "inlined",
                              "styles": {
                                  "padding": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-unit"
                                      }
                                  }
                              }
                          }
                      },
                      "d818d218-816a-4881-bc89-00aa79c1d182": {
                          "type": "style-map",
                          "content": {
                              "conditions": [
                                  {
                                      "conditionType": "screen-size",
                                      "maxWidth": 991
                                  }
                              ],
                              "mapType": "inlined",
                              "styles": {
                                  "flexDirection": {
                                      "type": "static",
                                      "content": "column"
                                  }
                              }
                          }
                      }
                  },
                  "abilities": {},
                  "style": {
                      "width": {
                          "type": "static",
                          "content": "100%"
                      },
                      "display": {
                          "type": "static",
                          "content": "flex"
                      },
                      "maxWidth": {
                          "type": "dynamic",
                          "content": {
                              "referenceType": "token",
                              "id": "--dl-size-size-maxwidth"
                          }
                      },
                      "alignItems": {
                          "type": "static",
                          "content": "center"
                      },
                      "paddingTop": {
                          "type": "dynamic",
                          "content": {
                              "referenceType": "token",
                              "id": "--dl-space-space-twounits"
                          }
                      },
                      "paddingLeft": {
                          "type": "dynamic",
                          "content": {
                              "referenceType": "token",
                              "id": "--dl-space-space-threeunits"
                          }
                      },
                      "paddingRight": {
                          "type": "dynamic",
                          "content": {
                              "referenceType": "token",
                              "id": "--dl-space-space-threeunits"
                          }
                      },
                      "flexDirection": {
                          "type": "static",
                          "content": "column"
                      },
                      "paddingBottom": {
                          "type": "dynamic",
                          "content": {
                              "referenceType": "token",
                              "id": "--dl-space-space-twounits"
                          }
                      },
                      "justifyContent": {
                          "type": "static",
                          "content": "space-between"
                      }
                  },
                  "children": [
                      {
                          "type": "element",
                          "content": {
                              "elementType": "container",
                              "referencedStyles": {
                                  "d7de3cf9-1305-4fd9-8b37-4efa8edc8ec5": {
                                      "type": "style-map",
                                      "content": {
                                          "conditions": [
                                              {
                                                  "conditionType": "screen-size",
                                                  "maxWidth": 479
                                              }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                              "alignItems": {
                                                  "type": "static",
                                                  "content": "center"
                                              },
                                              "flexDirection": {
                                                  "type": "static",
                                                  "content": "column"
                                              }
                                          }
                                      }
                                  },
                                  "c80f767b-f98d-4532-aa21-6f1ea7e46836": {
                                      "type": "style-map",
                                      "content": {
                                          "conditions": [
                                              {
                                                  "conditionType": "screen-size",
                                                  "maxWidth": 767
                                              }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                              "alignItems": {
                                                  "type": "static",
                                                  "content": "center"
                                              },
                                              "flexDirection": {
                                                  "type": "static",
                                                  "content": "column"
                                              },
                                              "justifyContent": {
                                                  "type": "static",
                                                  "content": "space-between"
                                              }
                                          }
                                      }
                                  }
                              },
                              "abilities": {},
                              "style": {
                                  "width": {
                                      "type": "static",
                                      "content": "100%"
                                  },
                                  "display": {
                                      "type": "static",
                                      "content": "flex"
                                  },
                                  "alignItems": {
                                      "type": "static",
                                      "content": "flex-start"
                                  },
                                  "flexDirection": {
                                      "type": "static",
                                      "content": "row"
                                  },
                                  "justifyContent": {
                                      "type": "static",
                                      "content": "space-between"
                                  }
                              },
                              "children": [
                                  {
                                      "type": "element",
                                      "content": {
                                          "elementType": "container",
                                          "name": "Logo",
                                          "referencedStyles": {
                                              "9882a10b-2511-41ca-abc1-2a37a3c6c373": {
                                                  "type": "style-map",
                                                  "content": {
                                                      "conditions": [
                                                          {
                                                              "conditionType": "screen-size",
                                                              "maxWidth": 767
                                                          }
                                                      ],
                                                      "mapType": "inlined",
                                                      "styles": {
                                                          "alignItems": {
                                                              "type": "static",
                                                              "content": "center"
                                                          }
                                                      }
                                                  }
                                              }
                                          },
                                          "abilities": {},
                                          "style": {
                                              "display": {
                                                  "type": "static",
                                                  "content": "flex"
                                              },
                                              "maxWidth": {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "token",
                                                      "id": "--dl-size-size-maxwidth"
                                                  }
                                              },
                                              "alignItems": {
                                                  "type": "static",
                                                  "content": "flex-start"
                                              },
                                              "flexDirection": {
                                                  "type": "static",
                                                  "content": "column"
                                              }
                                          },
                                          "children": [
                                              {
                                                  "type": "element",
                                                  "content": {
                                                      "elementType": "image",
                                                      "referencedStyles": {
                                                          "d240470c-85db-475e-98e8-1c1d24ec6671": {
                                                              "type": "style-map",
                                                              "content": {
                                                                  "conditions": [
                                                                      {
                                                                          "conditionType": "screen-size",
                                                                          "maxWidth": 767
                                                                      }
                                                                  ],
                                                                  "mapType": "inlined",
                                                                  "styles": {
                                                                      "marginBottom": {
                                                                          "type": "dynamic",
                                                                          "content": {
                                                                              "referenceType": "token",
                                                                              "id": "--dl-space-space-oneandhalfunits"
                                                                          }
                                                                      }
                                                                  }
                                                              }
                                                          },
                                                          "e7e77db5-9bd9-4ce2-b392-8221ea397711": {
                                                              "type": "style-map",
                                                              "content": {
                                                                  "conditions": [
                                                                      {
                                                                          "conditionType": "screen-size",
                                                                          "maxWidth": 479
                                                                      }
                                                                  ],
                                                                  "mapType": "inlined",
                                                                  "styles": {
                                                                      "marginBottom": {
                                                                          "type": "static",
                                                                          "content": "0px"
                                                                      }
                                                                  }
                                                              }
                                                          }
                                                      },
                                                      "abilities": {},
                                                      "attrs": {
                                                          "alt": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "prop",
                                                                  "id": "image_alt"
                                                              }
                                                          },
                                                          "src": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "prop",
                                                                  "id": "image_src"
                                                              }
                                                          }
                                                      },
                                                      "style": {
                                                          "height": {
                                                              "type": "static",
                                                              "content": "2rem"
                                                          }
                                                      },
                                                      "children": []
                                                  }
                                              },
                                              {
                                                  "type": "element",
                                                  "content": {
                                                      "elementType": "text",
                                                      "referencedStyles": {
                                                          "626b0960-401a-4da9-b49a-448e5238a70b": {
                                                              "type": "style-map",
                                                              "content": {
                                                                  "conditions": [
                                                                      {
                                                                          "conditionType": "screen-size",
                                                                          "maxWidth": 479
                                                                      }
                                                                  ],
                                                                  "mapType": "inlined",
                                                                  "styles": {
                                                                      "marginTop": {
                                                                          "type": "dynamic",
                                                                          "content": {
                                                                              "referenceType": "token",
                                                                              "id": "--dl-space-space-twounits"
                                                                          }
                                                                      },
                                                                      "marginBottom": {
                                                                          "type": "dynamic",
                                                                          "content": {
                                                                              "referenceType": "token",
                                                                              "id": "--dl-space-space-twounits"
                                                                          }
                                                                      }
                                                                  }
                                                              }
                                                          },
                                                          "c5a0e725-e23a-46a5-8126-957e5af046ff": {
                                                              "type": "style-map",
                                                              "content": {
                                                                  "conditions": [
                                                                      {
                                                                          "conditionType": "screen-size",
                                                                          "maxWidth": 767
                                                                      }
                                                                  ],
                                                                  "mapType": "inlined",
                                                                  "styles": {
                                                                      "marginTop": {
                                                                          "type": "dynamic",
                                                                          "content": {
                                                                              "referenceType": "token",
                                                                              "id": "--dl-space-space-twounits"
                                                                          }
                                                                      },
                                                                      "textAlign": {
                                                                          "type": "static",
                                                                          "content": "center"
                                                                      },
                                                                      "marginBottom": {
                                                                          "type": "dynamic",
                                                                          "content": {
                                                                              "referenceType": "token",
                                                                              "id": "--dl-space-space-twounits"
                                                                          }
                                                                      }
                                                                  }
                                                              }
                                                          }
                                                      },
                                                      "abilities": {},
                                                      "style": {
                                                          "marginTop": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-space-space-oneandhalfunits"
                                                              }
                                                          }
                                                      },
                                                      "children": [
                                                          {
                                                              "type": "element",
                                                              "content": {
                                                                  "elementType": "text",
                                                                  "referencedStyles": {},
                                                                  "abilities": {},
                                                                  "children": [
                                                                      {
                                                                          "type": "element",
                                                                          "content": {
                                                                              "elementType": "text",
                                                                              "referencedStyles": {},
                                                                              "abilities": {},
                                                                              "children": [
                                                                                  {
                                                                                      "type": "static",
                                                                                      "content": "Professional website builder "
                                                                                  },
                                                                                  {
                                                                                      "type": "raw",
                                                                                      "content": " "
                                                                                  }
                                                                              ]
                                                                          }
                                                                      },
                                                                      {
                                                                          "type": "element",
                                                                          "content": {
                                                                              "elementType": "text",
                                                                              "referencedStyles": {},
                                                                              "abilities": {},
                                                                              "children": [
                                                                                  {
                                                                                      "type": "static",
                                                                                      "content": " "
                                                                                  },
                                                                                  {
                                                                                      "type": "raw",
                                                                                      "content": " "
                                                                                  }
                                                                              ]
                                                                          }
                                                                      }
                                                                  ],
                                                                  "semanticType": "span"
                                                              }
                                                          },
                                                          {
                                                              "type": "element",
                                                              "content": {
                                                                  "elementType": "text",
                                                                  "referencedStyles": {},
                                                                  "abilities": {},
                                                                  "children": [],
                                                                  "semanticType": "br"
                                                              }
                                                          },
                                                          {
                                                              "type": "element",
                                                              "content": {
                                                                  "elementType": "text",
                                                                  "referencedStyles": {},
                                                                  "abilities": {},
                                                                  "children": [
                                                                      {
                                                                          "type": "static",
                                                                          "content": "for developers."
                                                                      }
                                                                  ],
                                                                  "semanticType": "span"
                                                              }
                                                          }
                                                      ],
                                                      "semanticType": "span"
                                                  }
                                              }
                                          ],
                                          "semanticType": "div"
                                      }
                                  },
                                  {
                                      "type": "element",
                                      "content": {
                                          "elementType": "container",
                                          "name": "LinksContainer",
                                          "referencedStyles": {
                                              "cfe534c9-3e1f-4491-a3c9-a481dabba616": {
                                                  "type": "style-map",
                                                  "content": {
                                                      "conditions": [
                                                          {
                                                              "conditionType": "screen-size",
                                                              "maxWidth": 479
                                                          }
                                                      ],
                                                      "mapType": "inlined",
                                                      "styles": {
                                                          "alignItems": {
                                                              "type": "static",
                                                              "content": "center"
                                                          },
                                                          "flexDirection": {
                                                              "type": "static",
                                                              "content": "column"
                                                          }
                                                      }
                                                  }
                                              },
                                              "b2c5c473-2dec-4e76-911c-e71b0f248ea8": {
                                                  "type": "style-map",
                                                  "content": {
                                                      "conditions": [
                                                          {
                                                              "conditionType": "screen-size",
                                                              "maxWidth": 767
                                                          }
                                                      ],
                                                      "mapType": "inlined",
                                                      "styles": {
                                                          "width": {
                                                              "type": "static",
                                                              "content": "100%"
                                                          },
                                                          "alignItems": {
                                                              "type": "static",
                                                              "content": "flex-start"
                                                          },
                                                          "flexDirection": {
                                                              "type": "static",
                                                              "content": "row"
                                                          },
                                                          "justifyContent": {
                                                              "type": "static",
                                                              "content": "center"
                                                          }
                                                      }
                                                  }
                                              }
                                          },
                                          "abilities": {},
                                          "style": {
                                              "display": {
                                                  "type": "static",
                                                  "content": "flex"
                                              },
                                              "alignItems": {
                                                  "type": "static",
                                                  "content": "flex-start"
                                              },
                                              "flexDirection": {
                                                  "type": "static",
                                                  "content": "row"
                                              },
                                              "justifyContent": {
                                                  "type": "static",
                                                  "content": "space-between"
                                              }
                                          },
                                          "children": [
                                              {
                                                  "type": "element",
                                                  "content": {
                                                      "elementType": "container",
                                                      "name": "Container",
                                                      "referencedStyles": {
                                                          "92317702-2334-442c-a33c-f590e61cb8e6": {
                                                              "type": "style-map",
                                                              "content": {
                                                                  "conditions": [
                                                                      {
                                                                          "conditionType": "screen-size",
                                                                          "maxWidth": 991
                                                                      }
                                                                  ],
                                                                  "mapType": "inlined",
                                                                  "styles": {
                                                                      "marginRight": {
                                                                          "type": "dynamic",
                                                                          "content": {
                                                                              "referenceType": "token",
                                                                              "id": "--dl-space-space-fourunits"
                                                                          }
                                                                      }
                                                                  }
                                                              }
                                                          },
                                                          "2296ba24-e475-4425-9efe-b60fe3ee138b": {
                                                              "type": "style-map",
                                                              "content": {
                                                                  "conditions": [
                                                                      {
                                                                          "conditionType": "screen-size",
                                                                          "maxWidth": 767
                                                                      }
                                                                  ],
                                                                  "mapType": "inlined",
                                                                  "styles": {
                                                                      "marginRight": {
                                                                          "type": "dynamic",
                                                                          "content": {
                                                                              "referenceType": "token",
                                                                              "id": "--dl-space-space-fourunits"
                                                                          }
                                                                      }
                                                                  }
                                                              }
                                                          },
                                                          "dce7778b-c389-45ed-85ce-635f74022422": {
                                                              "type": "style-map",
                                                              "content": {
                                                                  "conditions": [
                                                                      {
                                                                          "conditionType": "screen-size",
                                                                          "maxWidth": 479
                                                                      }
                                                                  ],
                                                                  "mapType": "inlined",
                                                                  "styles": {
                                                                      "marginRight": {
                                                                          "type": "static",
                                                                          "content": "0px"
                                                                      }
                                                                  }
                                                              }
                                                          }
                                                      },
                                                      "abilities": {},
                                                      "style": {
                                                          "display": {
                                                              "type": "static",
                                                              "content": "flex"
                                                          },
                                                          "alignItems": {
                                                              "type": "static",
                                                              "content": "flex-start"
                                                          },
                                                          "marginRight": {
                                                              "type": "static",
                                                              "content": "10rem"
                                                          },
                                                          "flexDirection": {
                                                              "type": "static",
                                                              "content": "row"
                                                          },
                                                          "justifyContent": {
                                                              "type": "static",
                                                              "content": "space-between"
                                                          }
                                                      },
                                                      "children": [
                                                          {
                                                              "type": "element",
                                                              "content": {
                                                                  "elementType": "container",
                                                                  "name": "ProductContainer",
                                                                  "referencedStyles": {
                                                                      "d2eb228c-3fe0-4b71-abe1-a8f930a3e9be": {
                                                                          "type": "style-map",
                                                                          "content": {
                                                                              "conditions": [
                                                                                  {
                                                                                      "conditionType": "screen-size",
                                                                                      "maxWidth": 991
                                                                                  }
                                                                              ],
                                                                              "mapType": "inlined",
                                                                              "styles": {
                                                                                  "marginRight": {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "token",
                                                                                          "id": "--dl-space-space-fourunits"
                                                                                      }
                                                                                  }
                                                                              }
                                                                          }
                                                                      },
                                                                      "75c35b91-d1e2-453a-bbe4-515319b5057d": {
                                                                          "type": "style-map",
                                                                          "content": {
                                                                              "conditions": [
                                                                                  {
                                                                                      "conditionType": "screen-size",
                                                                                      "maxWidth": 767
                                                                                  }
                                                                              ],
                                                                              "mapType": "inlined",
                                                                              "styles": {
                                                                                  "marginRight": {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "token",
                                                                                          "id": "--dl-space-space-fourunits"
                                                                                      }
                                                                                  }
                                                                              }
                                                                          }
                                                                      }
                                                                  },
                                                                  "abilities": {},
                                                                  "style": {
                                                                      "flex": {
                                                                          "type": "static",
                                                                          "content": "0 0 auto"
                                                                      },
                                                                      "display": {
                                                                          "type": "static",
                                                                          "content": "flex"
                                                                      },
                                                                      "alignItems": {
                                                                          "type": "static",
                                                                          "content": "flex-start"
                                                                      },
                                                                      "marginRight": {
                                                                          "type": "static",
                                                                          "content": "10rem"
                                                                      },
                                                                      "flexDirection": {
                                                                          "type": "static",
                                                                          "content": "column"
                                                                      },
                                                                      "justifyContent": {
                                                                          "type": "static",
                                                                          "content": "flex-start"
                                                                      }
                                                                  },
                                                                  "children": [
                                                                      {
                                                                          "type": "element",
                                                                          "content": {
                                                                              "elementType": "text",
                                                                              "referencedStyles": {},
                                                                              "abilities": {},
                                                                              "style": {
                                                                                  "fontWeight": {
                                                                                      "type": "static",
                                                                                      "content": "700"
                                                                                  },
                                                                                  "marginBottom": {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "token",
                                                                                          "id": "--dl-space-space-oneandhalfunits"
                                                                                      }
                                                                                  }
                                                                              },
                                                                              "children": [
                                                                                  {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "prop",
                                                                                          "id": "text"
                                                                                      }
                                                                                  }
                                                                              ],
                                                                              "semanticType": "span"
                                                                          }
                                                                      },
                                                                      {
                                                                          "type": "element",
                                                                          "content": {
                                                                              "elementType": "text",
                                                                              "referencedStyles": {},
                                                                              "abilities": {},
                                                                              "style": {
                                                                                  "marginBottom": {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "token",
                                                                                          "id": "--dl-space-space-unit"
                                                                                      }
                                                                                  }
                                                                              },
                                                                              "children": [
                                                                                  {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "prop",
                                                                                          "id": "text1"
                                                                                      }
                                                                                  }
                                                                              ],
                                                                              "semanticType": "span"
                                                                          }
                                                                      },
                                                                      {
                                                                          "type": "element",
                                                                          "content": {
                                                                              "elementType": "text",
                                                                              "referencedStyles": {},
                                                                              "abilities": {},
                                                                              "style": {
                                                                                  "marginBottom": {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "token",
                                                                                          "id": "--dl-space-space-unit"
                                                                                      }
                                                                                  }
                                                                              },
                                                                              "children": [
                                                                                  {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "prop",
                                                                                          "id": "text2"
                                                                                      }
                                                                                  }
                                                                              ],
                                                                              "semanticType": "span"
                                                                          }
                                                                      },
                                                                      {
                                                                          "type": "element",
                                                                          "content": {
                                                                              "elementType": "text",
                                                                              "referencedStyles": {},
                                                                              "abilities": {},
                                                                              "style": {
                                                                                  "marginBottom": {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "token",
                                                                                          "id": "--dl-space-space-unit"
                                                                                      }
                                                                                  }
                                                                              },
                                                                              "children": [
                                                                                  {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "prop",
                                                                                          "id": "text3"
                                                                                      }
                                                                                  }
                                                                              ],
                                                                              "semanticType": "span"
                                                                          }
                                                                      },
                                                                      {
                                                                          "type": "element",
                                                                          "content": {
                                                                              "elementType": "text",
                                                                              "referencedStyles": {},
                                                                              "abilities": {},
                                                                              "children": [
                                                                                  {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "prop",
                                                                                          "id": "text4"
                                                                                      }
                                                                                  }
                                                                              ],
                                                                              "semanticType": "span"
                                                                          }
                                                                      }
                                                                  ],
                                                                  "semanticType": "div"
                                                              }
                                                          },
                                                          {
                                                              "type": "element",
                                                              "content": {
                                                                  "elementType": "container",
                                                                  "name": "CompanyContainer",
                                                                  "referencedStyles": {},
                                                                  "abilities": {},
                                                                  "style": {
                                                                      "flex": {
                                                                          "type": "static",
                                                                          "content": "0 0 auto"
                                                                      },
                                                                      "display": {
                                                                          "type": "static",
                                                                          "content": "flex"
                                                                      },
                                                                      "alignItems": {
                                                                          "type": "static",
                                                                          "content": "flex-start"
                                                                      },
                                                                      "flexDirection": {
                                                                          "type": "static",
                                                                          "content": "column"
                                                                      },
                                                                      "justifyContent": {
                                                                          "type": "static",
                                                                          "content": "flex-start"
                                                                      }
                                                                  },
                                                                  "children": [
                                                                      {
                                                                          "type": "element",
                                                                          "content": {
                                                                              "elementType": "text",
                                                                              "referencedStyles": {},
                                                                              "abilities": {},
                                                                              "style": {
                                                                                  "fontWeight": {
                                                                                      "type": "static",
                                                                                      "content": "700"
                                                                                  },
                                                                                  "marginBottom": {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "token",
                                                                                          "id": "--dl-space-space-oneandhalfunits"
                                                                                      }
                                                                                  }
                                                                              },
                                                                              "children": [
                                                                                  {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "prop",
                                                                                          "id": "text5"
                                                                                      }
                                                                                  }
                                                                              ],
                                                                              "semanticType": "span"
                                                                          }
                                                                      },
                                                                      {
                                                                          "type": "element",
                                                                          "content": {
                                                                              "elementType": "text",
                                                                              "referencedStyles": {},
                                                                              "abilities": {},
                                                                              "style": {
                                                                                  "marginBottom": {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "token",
                                                                                          "id": "--dl-space-space-unit"
                                                                                      }
                                                                                  }
                                                                              },
                                                                              "children": [
                                                                                  {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "prop",
                                                                                          "id": "text6"
                                                                                      }
                                                                                  }
                                                                              ],
                                                                              "semanticType": "span"
                                                                          }
                                                                      },
                                                                      {
                                                                          "type": "element",
                                                                          "content": {
                                                                              "elementType": "text",
                                                                              "referencedStyles": {},
                                                                              "abilities": {},
                                                                              "style": {
                                                                                  "marginBottom": {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "token",
                                                                                          "id": "--dl-space-space-unit"
                                                                                      }
                                                                                  }
                                                                              },
                                                                              "children": [
                                                                                  {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "prop",
                                                                                          "id": "text7"
                                                                                      }
                                                                                  }
                                                                              ],
                                                                              "semanticType": "span"
                                                                          }
                                                                      },
                                                                      {
                                                                          "type": "element",
                                                                          "content": {
                                                                              "elementType": "text",
                                                                              "referencedStyles": {},
                                                                              "abilities": {},
                                                                              "style": {
                                                                                  "marginBottom": {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "token",
                                                                                          "id": "--dl-space-space-unit"
                                                                                      }
                                                                                  }
                                                                              },
                                                                              "children": [
                                                                                  {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "prop",
                                                                                          "id": "text8"
                                                                                      }
                                                                                  }
                                                                              ],
                                                                              "semanticType": "span"
                                                                          }
                                                                      },
                                                                      {
                                                                          "type": "element",
                                                                          "content": {
                                                                              "elementType": "text",
                                                                              "referencedStyles": {},
                                                                              "abilities": {},
                                                                              "children": [
                                                                                  {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "prop",
                                                                                          "id": "text9"
                                                                                      }
                                                                                  }
                                                                              ],
                                                                              "semanticType": "span"
                                                                          }
                                                                      }
                                                                  ],
                                                                  "semanticType": "div"
                                                              }
                                                          }
                                                      ],
                                                      "semanticType": "div"
                                                  }
                                              },
                                              {
                                                  "type": "element",
                                                  "content": {
                                                      "elementType": "container",
                                                      "referencedStyles": {
                                                          "efc6020d-7bec-4b57-94be-cac257605d54": {
                                                              "type": "style-map",
                                                              "content": {
                                                                  "conditions": [
                                                                      {
                                                                          "conditionType": "screen-size",
                                                                          "maxWidth": 479
                                                                      }
                                                                  ],
                                                                  "mapType": "inlined",
                                                                  "styles": {
                                                                      "marginTop": {
                                                                          "type": "dynamic",
                                                                          "content": {
                                                                              "referenceType": "token",
                                                                              "id": "--dl-space-space-oneandhalfunits"
                                                                          }
                                                                      },
                                                                      "alignItems": {
                                                                          "type": "static",
                                                                          "content": "flex-start"
                                                                      },
                                                                      "marginBottom": {
                                                                          "type": "static",
                                                                          "content": "0px"
                                                                      }
                                                                  }
                                                              }
                                                          }
                                                      },
                                                      "abilities": {},
                                                      "style": {
                                                          "display": {
                                                              "type": "static",
                                                              "content": "flex"
                                                          },
                                                          "alignItems": {
                                                              "type": "static",
                                                              "content": "flex-start"
                                                          },
                                                          "flexDirection": {
                                                              "type": "static",
                                                              "content": "column"
                                                          },
                                                          "justifyContent": {
                                                              "type": "static",
                                                              "content": "flex-start"
                                                          }
                                                      },
                                                      "children": [
                                                          {
                                                              "type": "element",
                                                              "content": {
                                                                  "elementType": "container",
                                                                  "name": "Contact",
                                                                  "referencedStyles": {
                                                                      "1abbd246-985f-4fd9-bf80-5af756e5bb72": {
                                                                          "type": "style-map",
                                                                          "content": {
                                                                              "conditions": [
                                                                                  {
                                                                                      "conditionType": "screen-size",
                                                                                      "maxWidth": 479
                                                                                  }
                                                                              ],
                                                                              "mapType": "inlined",
                                                                              "styles": {
                                                                                  "alignItems": {
                                                                                      "type": "static",
                                                                                      "content": "flex-start"
                                                                                  },
                                                                                  "marginBottom": {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "token",
                                                                                          "id": "--dl-space-space-unit"
                                                                                      }
                                                                                  }
                                                                              }
                                                                          }
                                                                      }
                                                                  },
                                                                  "abilities": {},
                                                                  "style": {
                                                                      "display": {
                                                                          "type": "static",
                                                                          "content": "flex"
                                                                      },
                                                                      "alignItems": {
                                                                          "type": "static",
                                                                          "content": "flex-start"
                                                                      },
                                                                      "marginBottom": {
                                                                          "type": "dynamic",
                                                                          "content": {
                                                                              "referenceType": "token",
                                                                              "id": "--dl-space-space-oneandhalfunits"
                                                                          }
                                                                      },
                                                                      "flexDirection": {
                                                                          "type": "static",
                                                                          "content": "column"
                                                                      },
                                                                      "justifyContent": {
                                                                          "type": "static",
                                                                          "content": "flex-start"
                                                                      }
                                                                  },
                                                                  "children": [
                                                                      {
                                                                          "type": "element",
                                                                          "content": {
                                                                              "elementType": "text",
                                                                              "referencedStyles": {},
                                                                              "abilities": {},
                                                                              "style": {
                                                                                  "fontWeight": {
                                                                                      "type": "static",
                                                                                      "content": "700"
                                                                                  },
                                                                                  "marginBottom": {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "token",
                                                                                          "id": "--dl-space-space-oneandhalfunits"
                                                                                      }
                                                                                  }
                                                                              },
                                                                              "children": [
                                                                                  {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "prop",
                                                                                          "id": "text10"
                                                                                      }
                                                                                  }
                                                                              ],
                                                                              "semanticType": "span"
                                                                          }
                                                                      },
                                                                      {
                                                                          "type": "element",
                                                                          "content": {
                                                                              "elementType": "text",
                                                                              "referencedStyles": {},
                                                                              "abilities": {},
                                                                              "style": {
                                                                                  "marginBottom": {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "token",
                                                                                          "id": "--dl-space-space-unit"
                                                                                      }
                                                                                  }
                                                                              },
                                                                              "children": [
                                                                                  {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "prop",
                                                                                          "id": "text11"
                                                                                      }
                                                                                  }
                                                                              ],
                                                                              "semanticType": "span"
                                                                          }
                                                                      },
                                                                      {
                                                                          "type": "element",
                                                                          "content": {
                                                                              "elementType": "text",
                                                                              "referencedStyles": {},
                                                                              "abilities": {},
                                                                              "children": [
                                                                                  {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "prop",
                                                                                          "id": "text12"
                                                                                      }
                                                                                  }
                                                                              ],
                                                                              "semanticType": "span"
                                                                          }
                                                                      }
                                                                  ],
                                                                  "semanticType": "div"
                                                              }
                                                          },
                                                          {
                                                              "type": "element",
                                                              "content": {
                                                                  "elementType": "container",
                                                                  "name": "Socials",
                                                                  "referencedStyles": {},
                                                                  "abilities": {},
                                                                  "style": {
                                                                      "display": {
                                                                          "type": "static",
                                                                          "content": "flex"
                                                                      },
                                                                      "alignItems": {
                                                                          "type": "static",
                                                                          "content": "flex-start"
                                                                      },
                                                                      "flexDirection": {
                                                                          "type": "static",
                                                                          "content": "column"
                                                                      },
                                                                      "justifyContent": {
                                                                          "type": "static",
                                                                          "content": "flex-start"
                                                                      }
                                                                  },
                                                                  "children": [
                                                                      {
                                                                          "type": "element",
                                                                          "content": {
                                                                              "elementType": "text",
                                                                              "referencedStyles": {},
                                                                              "abilities": {},
                                                                              "style": {
                                                                                  "fontWeight": {
                                                                                      "type": "static",
                                                                                      "content": "700"
                                                                                  },
                                                                                  "marginBottom": {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "token",
                                                                                          "id": "--dl-space-space-oneandhalfunits"
                                                                                      }
                                                                                  }
                                                                              },
                                                                              "children": [
                                                                                  {
                                                                                      "type": "dynamic",
                                                                                      "content": {
                                                                                          "referenceType": "prop",
                                                                                          "id": "text13"
                                                                                      }
                                                                                  }
                                                                              ],
                                                                              "semanticType": "span"
                                                                          }
                                                                      },
                                                                      {
                                                                          "type": "element",
                                                                          "content": {
                                                                              "elementType": "container",
                                                                              "name": "IconGroup",
                                                                              "referencedStyles": {},
                                                                              "abilities": {},
                                                                              "style": {
                                                                                  "display": {
                                                                                      "type": "static",
                                                                                      "content": "flex"
                                                                                  },
                                                                                  "alignItems": {
                                                                                      "type": "static",
                                                                                      "content": "center"
                                                                                  },
                                                                                  "flexDirection": {
                                                                                      "type": "static",
                                                                                      "content": "row"
                                                                                  },
                                                                                  "justifyContent": {
                                                                                      "type": "static",
                                                                                      "content": "space-between"
                                                                                  }
                                                                              },
                                                                              "children": [
                                                                                  {
                                                                                      "type": "element",
                                                                                      "content": {
                                                                                          "elementType": "icon",
                                                                                          "referencedStyles": {},
                                                                                          "abilities": {},
                                                                                          "attrs": {
                                                                                              "viewBox": {
                                                                                                  "type": "static",
                                                                                                  "content": "0 0 950.8571428571428 1024"
                                                                                              }
                                                                                          },
                                                                                          "style": {
                                                                                              "width": {
                                                                                                  "type": "dynamic",
                                                                                                  "content": {
                                                                                                      "referenceType": "token",
                                                                                                      "id": "--dl-size-size-xsmall"
                                                                                                  }
                                                                                              },
                                                                                              "height": {
                                                                                                  "type": "dynamic",
                                                                                                  "content": {
                                                                                                      "referenceType": "token",
                                                                                                      "id": "--dl-size-size-xsmall"
                                                                                                  }
                                                                                              },
                                                                                              "marginRight": {
                                                                                                  "type": "dynamic",
                                                                                                  "content": {
                                                                                                      "referenceType": "token",
                                                                                                      "id": "--dl-space-space-unit"
                                                                                                  }
                                                                                              }
                                                                                          },
                                                                                          "children": [
                                                                                              {
                                                                                                  "type": "element",
                                                                                                  "content": {
                                                                                                      "elementType": "icon",
                                                                                                      "referencedStyles": {},
                                                                                                      "abilities": {},
                                                                                                      "attrs": {
                                                                                                          "d": {
                                                                                                              "type": "static",
                                                                                                              "content": "M925.714 233.143c-25.143 36.571-56.571 69.143-92.571 95.429 0.571 8 0.571 16 0.571 24 0 244-185.714 525.143-525.143 525.143-104.571 0-201.714-30.286-283.429-82.857 14.857 1.714 29.143 2.286 44.571 2.286 86.286 0 165.714-29.143 229.143-78.857-81.143-1.714-149.143-54.857-172.571-128 11.429 1.714 22.857 2.857 34.857 2.857 16.571 0 33.143-2.286 48.571-6.286-84.571-17.143-148-91.429-148-181.143v-2.286c24.571 13.714 53.143 22.286 83.429 23.429-49.714-33.143-82.286-89.714-82.286-153.714 0-34.286 9.143-65.714 25.143-93.143 90.857 112 227.429 185.143 380.571 193.143-2.857-13.714-4.571-28-4.571-42.286 0-101.714 82.286-184.571 184.571-184.571 53.143 0 101.143 22.286 134.857 58.286 41.714-8 81.714-23.429 117.143-44.571-13.714 42.857-42.857 78.857-81.143 101.714 37.143-4 73.143-14.286 106.286-28.571z"
                                                                                                          }
                                                                                                      },
                                                                                                      "children": [],
                                                                                                      "semanticType": "path"
                                                                                                  }
                                                                                              }
                                                                                          ]
                                                                                      }
                                                                                  },
                                                                                  {
                                                                                      "type": "element",
                                                                                      "content": {
                                                                                          "elementType": "icon",
                                                                                          "referencedStyles": {},
                                                                                          "abilities": {},
                                                                                          "attrs": {
                                                                                              "viewBox": {
                                                                                                  "type": "static",
                                                                                                  "content": "0 0 877.7142857142857 1024"
                                                                                              }
                                                                                          },
                                                                                          "style": {
                                                                                              "width": {
                                                                                                  "type": "dynamic",
                                                                                                  "content": {
                                                                                                      "referenceType": "token",
                                                                                                      "id": "--dl-size-size-xsmall"
                                                                                                  }
                                                                                              },
                                                                                              "height": {
                                                                                                  "type": "dynamic",
                                                                                                  "content": {
                                                                                                      "referenceType": "token",
                                                                                                      "id": "--dl-size-size-xsmall"
                                                                                                  }
                                                                                              },
                                                                                              "marginRight": {
                                                                                                  "type": "dynamic",
                                                                                                  "content": {
                                                                                                      "referenceType": "token",
                                                                                                      "id": "--dl-space-space-unit"
                                                                                                  }
                                                                                              }
                                                                                          },
                                                                                          "children": [
                                                                                              {
                                                                                                  "type": "element",
                                                                                                  "content": {
                                                                                                      "elementType": "icon",
                                                                                                      "referencedStyles": {},
                                                                                                      "abilities": {},
                                                                                                      "attrs": {
                                                                                                          "d": {
                                                                                                              "type": "static",
                                                                                                              "content": "M585.143 512c0-80.571-65.714-146.286-146.286-146.286s-146.286 65.714-146.286 146.286 65.714 146.286 146.286 146.286 146.286-65.714 146.286-146.286zM664 512c0 124.571-100.571 225.143-225.143 225.143s-225.143-100.571-225.143-225.143 100.571-225.143 225.143-225.143 225.143 100.571 225.143 225.143zM725.714 277.714c0 29.143-23.429 52.571-52.571 52.571s-52.571-23.429-52.571-52.571 23.429-52.571 52.571-52.571 52.571 23.429 52.571 52.571zM438.857 152c-64 0-201.143-5.143-258.857 17.714-20 8-34.857 17.714-50.286 33.143s-25.143 30.286-33.143 50.286c-22.857 57.714-17.714 194.857-17.714 258.857s-5.143 201.143 17.714 258.857c8 20 17.714 34.857 33.143 50.286s30.286 25.143 50.286 33.143c57.714 22.857 194.857 17.714 258.857 17.714s201.143 5.143 258.857-17.714c20-8 34.857-17.714 50.286-33.143s25.143-30.286 33.143-50.286c22.857-57.714 17.714-194.857 17.714-258.857s5.143-201.143-17.714-258.857c-8-20-17.714-34.857-33.143-50.286s-30.286-25.143-50.286-33.143c-57.714-22.857-194.857-17.714-258.857-17.714zM877.714 512c0 60.571 0.571 120.571-2.857 181.143-3.429 70.286-19.429 132.571-70.857 184s-113.714 67.429-184 70.857c-60.571 3.429-120.571 2.857-181.143 2.857s-120.571 0.571-181.143-2.857c-70.286-3.429-132.571-19.429-184-70.857s-67.429-113.714-70.857-184c-3.429-60.571-2.857-120.571-2.857-181.143s-0.571-120.571 2.857-181.143c3.429-70.286 19.429-132.571 70.857-184s113.714-67.429 184-70.857c60.571-3.429 120.571-2.857 181.143-2.857s120.571-0.571 181.143 2.857c70.286 3.429 132.571 19.429 184 70.857s67.429 113.714 70.857 184c3.429 60.571 2.857 120.571 2.857 181.143z"
                                                                                                          }
                                                                                                      },
                                                                                                      "children": [],
                                                                                                      "semanticType": "path"
                                                                                                  }
                                                                                              }
                                                                                          ]
                                                                                      }
                                                                                  },
                                                                                  {
                                                                                      "type": "element",
                                                                                      "content": {
                                                                                          "elementType": "icon",
                                                                                          "referencedStyles": {},
                                                                                          "abilities": {},
                                                                                          "attrs": {
                                                                                              "viewBox": {
                                                                                                  "type": "static",
                                                                                                  "content": "0 0 602.2582857142856 1024"
                                                                                              }
                                                                                          },
                                                                                          "style": {
                                                                                              "width": {
                                                                                                  "type": "dynamic",
                                                                                                  "content": {
                                                                                                      "referenceType": "token",
                                                                                                      "id": "--dl-size-size-xsmall"
                                                                                                  }
                                                                                              },
                                                                                              "height": {
                                                                                                  "type": "dynamic",
                                                                                                  "content": {
                                                                                                      "referenceType": "token",
                                                                                                      "id": "--dl-size-size-xsmall"
                                                                                                  }
                                                                                              }
                                                                                          },
                                                                                          "children": [
                                                                                              {
                                                                                                  "type": "element",
                                                                                                  "content": {
                                                                                                      "elementType": "icon",
                                                                                                      "referencedStyles": {},
                                                                                                      "abilities": {},
                                                                                                      "attrs": {
                                                                                                          "d": {
                                                                                                              "type": "static",
                                                                                                              "content": "M548 6.857v150.857h-89.714c-70.286 0-83.429 33.714-83.429 82.286v108h167.429l-22.286 169.143h-145.143v433.714h-174.857v-433.714h-145.714v-169.143h145.714v-124.571c0-144.571 88.571-223.429 217.714-223.429 61.714 0 114.857 4.571 130.286 6.857z"
                                                                                                          }
                                                                                                      },
                                                                                                      "children": [],
                                                                                                      "semanticType": "path"
                                                                                                  }
                                                                                              }
                                                                                          ]
                                                                                      }
                                                                                  }
                                                                              ],
                                                                              "semanticType": "div"
                                                                          }
                                                                      }
                                                                  ],
                                                                  "semanticType": "div"
                                                              }
                                                          }
                                                      ],
                                                      "semanticType": "div"
                                                  }
                                              }
                                          ],
                                          "semanticType": "div"
                                      }
                                  }
                              ],
                              "semanticType": "div"
                          }
                      },
                      {
                          "type": "element",
                          "content": {
                              "elementType": "container",
                              "name": "Separator",
                              "referencedStyles": {},
                              "abilities": {},
                              "style": {
                                  "width": {
                                      "type": "static",
                                      "content": "100%"
                                  },
                                  "height": {
                                      "type": "static",
                                      "content": "1px"
                                  },
                                  "marginTop": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-twounits"
                                      }
                                  },
                                  "marginBottom": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-twounits"
                                      }
                                  },
                                  "backgroundColor": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-color-gray-900"
                                      }
                                  }
                              },
                              "children": [],
                              "semanticType": "div"
                          }
                      },
                      {
                          "type": "element",
                          "content": {
                              "elementType": "text",
                              "referencedStyles": {
                                  "02e79181-ec5c-485d-8f0b-eb886d79949d": {
                                      "type": "style-map",
                                      "content": {
                                          "conditions": [
                                              {
                                                  "conditionType": "screen-size",
                                                  "maxWidth": 479
                                              }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                              "textAlign": {
                                                  "type": "static",
                                                  "content": "center"
                                              }
                                          }
                                      }
                                  }
                              },
                              "abilities": {},
                              "style": {
                                  "alignSelf": {
                                      "type": "static",
                                      "content": "center"
                                  }
                              },
                              "children": [
                                  {
                                      "type": "element",
                                      "content": {
                                          "elementType": "text",
                                          "referencedStyles": {},
                                          "abilities": {},
                                          "children": [
                                              {
                                                  "type": "static",
                                                  "content": "© 2021 teleportHQ, All Rights Reserved."
                                              }
                                          ],
                                          "semanticType": "span"
                                      }
                                  },
                                  {
                                      "type": "element",
                                      "content": {
                                          "elementType": "text",
                                          "referencedStyles": {},
                                          "abilities": {},
                                          "style": {
                                              "textAlign": {
                                                  "type": "static",
                                                  "content": "left"
                                              }
                                          },
                                          "children": [],
                                          "semanticType": "span"
                                      }
                                  },
                                  {
                                      "type": "element",
                                      "content": {
                                          "elementType": "text",
                                          "referencedStyles": {},
                                          "abilities": {},
                                          "children": [],
                                          "semanticType": "span"
                                      }
                                  }
                              ],
                              "semanticType": "span"
                          }
                      }
                  ],
                  "semanticType": "footer"
              }
          },
          "name": "Footer",
          "styleSetDefinitions": {}
      },
      "Features": {
          "propDefinitions": {
              "image_src": {
                  "id": "7e747fc8-782e-4142-8bab-b2b81aeda5a7",
                  "defaultValue": "https://images.unsplash.com/photo-1471086569966-db3eebc25a59?ixid=Mnw5MTMyMXwwfDF8c2VhcmNofDIzfHxtaW5pbWFsaXNtfGVufDB8fHx8MTYyNjQ0NTY1Nw&ixlib=rb-1.2.1&h=1000",
                  "type": "string"
              },
              "image_alt": {
                  "id": "f7b922dc-255c-4f10-9d92-371482332b1b",
                  "defaultValue": "image",
                  "type": "string"
              }
          },
          "node": {
              "type": "element",
              "content": {
                  "elementType": "container",
                  "name": "Features",
                  "referencedStyles": {
                      "ad9612bd-ec75-480c-8417-19671e52fff1": {
                          "type": "style-map",
                          "content": {
                              "conditions": [
                                  {
                                      "conditionType": "screen-size",
                                      "maxWidth": 991
                                  }
                              ],
                              "mapType": "inlined",
                              "styles": {
                                  "alignItems": {
                                      "type": "static",
                                      "content": "center"
                                  }
                              }
                          }
                      },
                      "ba704fca-79aa-4493-a423-6ac23ede10e2": {
                          "type": "style-map",
                          "content": {
                              "conditions": [
                                  {
                                      "conditionType": "screen-size",
                                      "maxWidth": 479
                                  }
                              ],
                              "mapType": "inlined",
                              "styles": {
                                  "paddingTop": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-twounits"
                                      }
                                  },
                                  "paddingLeft": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-unit"
                                      }
                                  },
                                  "paddingRight": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-unit"
                                      }
                                  },
                                  "paddingBottom": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-twounits"
                                      }
                                  }
                              }
                          }
                      },
                      "5083ce47-bf77-4008-b0da-d836a78852ef": {
                          "type": "style-map",
                          "content": {
                              "conditions": [
                                  {
                                      "conditionType": "screen-size",
                                      "maxWidth": 767
                                  }
                              ],
                              "mapType": "inlined",
                              "styles": {
                                  "paddingLeft": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-twounits"
                                      }
                                  },
                                  "paddingRight": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-twounits"
                                      }
                                  }
                              }
                          }
                      }
                  },
                  "abilities": {},
                  "style": {
                      "width": {
                          "type": "static",
                          "content": "100%"
                      },
                      "display": {
                          "type": "static",
                          "content": "flex"
                      },
                      "padding": {
                          "type": "dynamic",
                          "content": {
                              "referenceType": "token",
                              "id": "--dl-space-space-threeunits"
                          }
                      },
                      "maxWidth": {
                          "type": "dynamic",
                          "content": {
                              "referenceType": "token",
                              "id": "--dl-size-size-maxwidth"
                          }
                      },
                      "flexDirection": {
                          "type": "static",
                          "content": "column"
                      }
                  },
                  "children": [
                      {
                          "type": "element",
                          "content": {
                              "elementType": "text",
                              "referencedStyles": {
                                  "603e1818-4003-4784-b288-fee57e7d0f5e": {
                                      "type": "style-map",
                                      "content": {
                                          "conditions": [
                                              {
                                                  "conditionType": "screen-size",
                                                  "maxWidth": 767
                                              }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                              "textAlign": {
                                                  "type": "static",
                                                  "content": "center"
                                              }
                                          }
                                      }
                                  }
                              },
                              "abilities": {},
                              "style": {
                                  "fontSize": {
                                      "type": "static",
                                      "content": "3rem"
                                  },
                                  "marginBottom": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-twounits"
                                      }
                                  }
                              },
                              "children": [
                                  {
                                      "type": "element",
                                      "content": {
                                          "elementType": "text",
                                          "referencedStyles": {},
                                          "abilities": {},
                                          "children": [
                                              {
                                                  "type": "static",
                                                  "content": "Discover our"
                                              }
                                          ],
                                          "semanticType": "span"
                                      }
                                  },
                                  {
                                      "type": "element",
                                      "content": {
                                          "elementType": "text",
                                          "referencedStyles": {},
                                          "abilities": {},
                                          "children": [],
                                          "semanticType": "br"
                                      }
                                  },
                                  {
                                      "type": "element",
                                      "content": {
                                          "elementType": "text",
                                          "referencedStyles": {},
                                          "abilities": {},
                                          "children": [
                                              {
                                                  "type": "static",
                                                  "content": "unique features"
                                              }
                                          ],
                                          "semanticType": "span"
                                      }
                                  }
                              ],
                              "semanticType": "h1"
                          }
                      },
                      {
                          "type": "element",
                          "content": {
                              "elementType": "container",
                              "name": "Separator",
                              "referencedStyles": {},
                              "abilities": {},
                              "style": {
                                  "width": {
                                      "type": "static",
                                      "content": "100px"
                                  },
                                  "height": {
                                      "type": "static",
                                      "content": "2px"
                                  },
                                  "backgroundColor": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-color-gray-500"
                                      }
                                  }
                              },
                              "children": [],
                              "semanticType": "div"
                          }
                      },
                      {
                          "type": "element",
                          "content": {
                              "elementType": "container",
                              "referencedStyles": {
                                  "cd040f33-67a8-4194-a378-740a0f93b777": {
                                      "type": "style-map",
                                      "content": {
                                          "conditions": [
                                              {
                                                  "conditionType": "screen-size",
                                                  "maxWidth": 767
                                              }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                              "flexDirection": {
                                                  "type": "static",
                                                  "content": "column"
                                              }
                                          }
                                      }
                                  },
                                  "5a18df2a-e0ec-4d76-b136-d24f02d33bb1": {
                                      "type": "style-map",
                                      "content": {
                                          "conditions": [
                                              {
                                                  "conditionType": "screen-size",
                                                  "maxWidth": 991
                                              }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                              "flexDirection": {
                                                  "type": "static",
                                                  "content": "column"
                                              }
                                          }
                                      }
                                  }
                              },
                              "abilities": {},
                              "style": {
                                  "flex": {
                                      "type": "static",
                                      "content": "0 0 auto"
                                  },
                                  "width": {
                                      "type": "static",
                                      "content": "100%"
                                  },
                                  "display": {
                                      "type": "static",
                                      "content": "flex"
                                  },
                                  "marginTop": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-twounits"
                                      }
                                  },
                                  "alignItems": {
                                      "type": "static",
                                      "content": "center"
                                  },
                                  "flexDirection": {
                                      "type": "static",
                                      "content": "row-reverse"
                                  },
                                  "justifyContent": {
                                      "type": "static",
                                      "content": "space-between"
                                  }
                              },
                              "children": [
                                  {
                                      "type": "element",
                                      "content": {
                                          "elementType": "container",
                                          "referencedStyles": {
                                              "c3acd586-d5a6-4e65-bfe1-203641c5e037": {
                                                  "type": "style-map",
                                                  "content": {
                                                      "conditions": [
                                                          {
                                                              "conditionType": "screen-size",
                                                              "maxWidth": 479
                                                          }
                                                      ],
                                                      "mapType": "inlined",
                                                      "styles": {
                                                          "gridTemplateColumns": {
                                                              "type": "static",
                                                              "content": "1fr"
                                                          }
                                                      }
                                                  }
                                              }
                                          },
                                          "abilities": {},
                                          "style": {
                                              "display": {
                                                  "type": "static",
                                                  "content": "grid"
                                              },
                                              "gridTemplateColumns": {
                                                  "type": "static",
                                                  "content": "1fr 1fr"
                                              }
                                          },
                                          "children": [
                                              {
                                                  "type": "element",
                                                  "content": {
                                                      "elementType": "component",
                                                      "dependency": {
                                                          "type": "local"
                                                      },
                                                      "referencedStyles": {},
                                                      "abilities": {},
                                                      "attrs": {
                                                          "rootClassName": {
                                                              "type": "comp-style",
                                                              "content": "rootClassName1"
                                                          }
                                                      },
                                                      "children": [],
                                                      "semanticType": "FeatureCard4"
                                                  }
                                              },
                                              {
                                                  "type": "element",
                                                  "content": {
                                                      "elementType": "component",
                                                      "dependency": {
                                                          "type": "local"
                                                      },
                                                      "referencedStyles": {},
                                                      "abilities": {},
                                                      "attrs": {
                                                          "rootClassName": {
                                                              "type": "comp-style",
                                                              "content": "root-class-name-4"
                                                          }
                                                      },
                                                      "children": [],
                                                      "semanticType": "FeatureCard4"
                                                  }
                                              },
                                              {
                                                  "type": "element",
                                                  "content": {
                                                      "elementType": "component",
                                                      "dependency": {
                                                          "type": "local"
                                                      },
                                                      "referencedStyles": {},
                                                      "abilities": {},
                                                      "attrs": {
                                                          "rootClassName": {
                                                              "type": "comp-style",
                                                              "content": "rootClassName3"
                                                          }
                                                      },
                                                      "children": [],
                                                      "semanticType": "FeatureCard4"
                                                  }
                                              },
                                              {
                                                  "type": "element",
                                                  "content": {
                                                      "elementType": "component",
                                                      "dependency": {
                                                          "type": "local"
                                                      },
                                                      "referencedStyles": {},
                                                      "abilities": {},
                                                      "attrs": {
                                                          "rootClassName": {
                                                              "type": "comp-style",
                                                              "content": "rootClassName2"
                                                          }
                                                      },
                                                      "children": [],
                                                      "semanticType": "FeatureCard4"
                                                  }
                                              }
                                          ],
                                          "semanticType": "div"
                                      }
                                  },
                                  {
                                      "type": "element",
                                      "content": {
                                          "elementType": "image",
                                          "referencedStyles": {
                                              "87b49545-ec8d-49c9-a881-9c5a6267e092": {
                                                  "type": "style-map",
                                                  "content": {
                                                      "conditions": [
                                                          {
                                                              "conditionType": "screen-size",
                                                              "maxWidth": 991
                                                          }
                                                      ],
                                                      "mapType": "inlined",
                                                      "styles": {
                                                          "width": {
                                                              "type": "static",
                                                              "content": "300px"
                                                          },
                                                          "height": {
                                                              "type": "static",
                                                              "content": "300px"
                                                          },
                                                          "marginTop": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-space-space-twounits"
                                                              }
                                                          },
                                                          "marginLeft": {
                                                              "type": "static",
                                                              "content": "0px"
                                                          }
                                                      }
                                                  }
                                              },
                                              "18452aa5-5c13-452c-bbe8-07c2cf98f395": {
                                                  "type": "style-map",
                                                  "content": {
                                                      "conditions": [
                                                          {
                                                              "conditionType": "screen-size",
                                                              "maxWidth": 479
                                                          }
                                                      ],
                                                      "mapType": "inlined",
                                                      "styles": {
                                                          "width": {
                                                              "type": "static",
                                                              "content": "250px"
                                                          },
                                                          "height": {
                                                              "type": "static",
                                                              "content": "250px"
                                                          }
                                                      }
                                                  }
                                              }
                                          },
                                          "abilities": {},
                                          "attrs": {
                                              "alt": {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "prop",
                                                      "id": "image_alt"
                                                  }
                                              },
                                              "src": {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "prop",
                                                      "id": "image_src"
                                                  }
                                              }
                                          },
                                          "style": {
                                              "width": {
                                                  "type": "static",
                                                  "content": "450px"
                                              },
                                              "height": {
                                                  "type": "static",
                                                  "content": "450px"
                                              },
                                              "objectFit": {
                                                  "type": "static",
                                                  "content": "cover"
                                              },
                                              "flexShrink": {
                                                  "type": "static",
                                                  "content": "0"
                                              },
                                              "marginLeft": {
                                                  "type": "static",
                                                  "content": "0px"
                                              },
                                              "borderRadius": {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "token",
                                                      "id": "--dl-radius-radius-round"
                                                  }
                                              },
                                              "objectPosition": {
                                                  "type": "static",
                                                  "content": "left"
                                              },
                                              "marginRight": {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "token",
                                                      "id": "--dl-space-space-fourunits"
                                                  }
                                              }
                                          },
                                          "children": []
                                      }
                                  }
                              ],
                              "semanticType": "div"
                          }
                      }
                  ],
                  "semanticType": "div"
              }
          },
          "name": "Features",
          "styleSetDefinitions": {}
      },
      "GalleryCard3": {
          "propDefinitions": {
              "subtitle": {
                  "id": "dfaa53cc-2d2f-4672-9835-167a686aa7db",
                  "defaultValue": "Lorem ipsum dolor sit amet, consectetur adipiscing elit",
                  "type": "string"
              },
              "image_alt": {
                  "id": "23e30595-cd74-4996-a201-d8453ffe7de9",
                  "defaultValue": "image",
                  "type": "string"
              },
              "rootClassName": {
                  "id": "4140c6dc-ca25-4fba-925a-80baeef3e6f8",
                  "defaultValue": "",
                  "type": "string"
              },
              "projectTitle": {
                  "id": "b3987a75-4d70-46ba-ae96-e78d62b7491f",
                  "defaultValue": "Project Title",
                  "type": "string"
              },
              "image_src": {
                  "id": "a312f0f9-333b-4aad-86bd-c8e025a81973",
                  "defaultValue": "https://images.unsplash.com/photo-1523755231516-e43fd2e8dca5?ixid=Mnw5MTMyMXwwfDF8c2VhcmNofDF8fG1pbmltYWxpc20lMjBjb3VjaHxlbnwwfHx8fDE2MjY0NDg1NTk&ixlib=rb-1.2.1&h=1000",
                  "type": "string"
              }
          },
          "node": {
              "type": "element",
              "content": {
                  "elementType": "container",
                  "name": "GalleryCard",
                  "referencedStyles": {
                      "e974b09c-9a78-4e9d-b7cb-2e9fa6ecc430": {
                          "type": "style-map",
                          "content": {
                              "mapType": "component-referenced",
                              "content": {
                                  "type": "dynamic",
                                  "content": {
                                      "referenceType": "prop",
                                      "id": "rootClassName"
                                  }
                              }
                          }
                      }
                  },
                  "abilities": {},
                  "style": {
                      "width": {
                          "type": "static",
                          "content": "100%"
                      },
                      "height": {
                          "type": "static",
                          "content": "100%"
                      },
                      "display": {
                          "type": "static",
                          "content": "flex"
                      },
                      "position": {
                          "type": "static",
                          "content": "relative"
                      },
                      "alignItems": {
                          "type": "static",
                          "content": "flex-start"
                      },
                      "flexDirection": {
                          "type": "static",
                          "content": "column"
                      },
                      "justifyContent": {
                          "type": "static",
                          "content": "center"
                      }
                  },
                  "children": [
                      {
                          "type": "element",
                          "content": {
                              "elementType": "image",
                              "referencedStyles": {},
                              "abilities": {},
                              "attrs": {
                                  "alt": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "prop",
                                          "id": "image_alt"
                                      }
                                  },
                                  "src": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "prop",
                                          "id": "image_src"
                                      }
                                  }
                              },
                              "style": {
                                  "top": {
                                      "type": "static",
                                      "content": "0px"
                                  },
                                  "left": {
                                      "type": "static",
                                      "content": "0px"
                                  },
                                  "right": {
                                      "type": "static",
                                      "content": "auto"
                                  },
                                  "width": {
                                      "type": "static",
                                      "content": "100%"
                                  },
                                  "bottom": {
                                      "type": "static",
                                      "content": "auto"
                                  },
                                  "height": {
                                      "type": "static",
                                      "content": "100%"
                                  },
                                  "position": {
                                      "type": "static",
                                      "content": "absolute"
                                  },
                                  "objectFit": {
                                      "type": "static",
                                      "content": "cover"
                                  }
                              },
                              "children": []
                          }
                      },
                      {
                          "type": "element",
                          "content": {
                              "elementType": "container",
                              "referencedStyles": {
                                  "c4899df3-f64e-4e84-8b51-15b5c84547f4": {
                                      "type": "style-map",
                                      "content": {
                                          "conditions": [
                                              {
                                                  "conditionType": "element-state",
                                                  "content": "hover"
                                              }
                                          ],
                                          "mapType": "inlined",
                                          "styles": {
                                              "opacity": {
                                                  "type": "static",
                                                  "content": "1"
                                              }
                                          }
                                      }
                                  }
                              },
                              "abilities": {},
                              "style": {
                                  "width": {
                                      "type": "static",
                                      "content": "100%"
                                  },
                                  "height": {
                                      "type": "static",
                                      "content": "300px"
                                  },
                                  "zIndex": {
                                      "type": "static",
                                      "content": "1"
                                  },
                                  "display": {
                                      "type": "static",
                                      "content": "flex"
                                  },
                                  "opacity": {
                                      "type": "static",
                                      "content": "0"
                                  },
                                  "padding": {
                                      "type": "dynamic",
                                      "content": {
                                          "referenceType": "token",
                                          "id": "--dl-space-space-twounits"
                                      }
                                  },
                                  "alignItems": {
                                      "type": "static",
                                      "content": "center"
                                  },
                                  "transition": {
                                      "type": "static",
                                      "content": "0.3s"
                                  },
                                  "flexDirection": {
                                      "type": "static",
                                      "content": "column"
                                  },
                                  "justifyContent": {
                                      "type": "static",
                                      "content": "center"
                                  },
                                  "backgroundImage": {
                                      "type": "static",
                                      "content": "linear-gradient(180deg, rgba(0, 0, 0, 0.2) 0%, rgba(0, 0, 0, 0.9));"
                                  }
                              },
                              "children": [
                                  {
                                      "type": "element",
                                      "content": {
                                          "elementType": "text",
                                          "referencedStyles": {
                                              "55294827-55af-4fb6-a2af-916354a2c3a7": {
                                                  "type": "style-map",
                                                  "content": {
                                                      "conditions": [
                                                          {
                                                              "conditionType": "screen-size",
                                                              "maxWidth": 479
                                                          }
                                                      ],
                                                      "mapType": "inlined",
                                                      "styles": {
                                                          "alignSelf": {
                                                              "type": "static",
                                                              "content": "center"
                                                          },
                                                          "marginBottom": {
                                                              "type": "dynamic",
                                                              "content": {
                                                                  "referenceType": "token",
                                                                  "id": "--dl-space-space-unit"
                                                              }
                                                          }
                                                      }
                                                  }
                                              }
                                          },
                                          "abilities": {},
                                          "style": {
                                              "color": {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "token",
                                                      "id": "--dl-color-gray-white"
                                                  }
                                              },
                                              "fontSize": {
                                                  "type": "static",
                                                  "content": "1.5rem"
                                              },
                                              "textAlign": {
                                                  "type": "static",
                                                  "content": "center"
                                              },
                                              "fontWeight": {
                                                  "type": "static",
                                                  "content": "500"
                                              },
                                              "marginBottom": {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "token",
                                                      "id": "--dl-space-space-oneandhalfunits"
                                                  }
                                              }
                                          },
                                          "children": [
                                              {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "prop",
                                                      "id": "projectTitle"
                                                  }
                                              }
                                          ],
                                          "semanticType": "h1"
                                      }
                                  },
                                  {
                                      "type": "element",
                                      "content": {
                                          "elementType": "text",
                                          "referencedStyles": {},
                                          "abilities": {},
                                          "style": {
                                              "color": {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "token",
                                                      "id": "--dl-color-gray-white"
                                                  }
                                              },
                                              "textAlign": {
                                                  "type": "static",
                                                  "content": "center"
                                              }
                                          },
                                          "children": [
                                              {
                                                  "type": "dynamic",
                                                  "content": {
                                                      "referenceType": "prop",
                                                      "id": "subtitle"
                                                  }
                                              }
                                          ],
                                          "semanticType": "span"
                                      }
                                  }
                              ],
                              "semanticType": "div"
                          }
                      }
                  ],
                  "semanticType": "div"
              }
          },
          "name": "GalleryCard3",
          "styleSetDefinitions": {
              "rootClassName": {
                  "content": {},
                  "conditions": [],
                  "type": "reusable-component-style-override"
              },
              "rootClassName1": {
                  "content": {},
                  "conditions": [],
                  "type": "reusable-component-style-override"
              },
              "rootClassName2": {
                  "content": {},
                  "conditions": [],
                  "type": "reusable-component-style-override"
              },
              "rootClassName3": {
                  "content": {},
                  "conditions": [],
                  "type": "reusable-component-style-override"
              },
              "rootClassName4": {
                  "content": {},
                  "conditions": [],
                  "type": "reusable-component-style-override"
              },
              "rootClassName5": {
                  "content": {},
                  "conditions": [],
                  "type": "reusable-component-style-override"
              },
              "rootClassName6": {
                  "content": {},
                  "conditions": [],
                  "type": "reusable-component-style-override"
              },
              "rootClassName7": {
                  "content": {},
                  "conditions": [],
                  "type": "reusable-component-style-override"
              },
              "rootClassName8": {
                  "content": {},
                  "conditions": [],
                  "type": "reusable-component-style-override"
              },
              "rootClassName9": {
                  "content": {},
                  "conditions": [],
                  "type": "reusable-component-style-override"
              },
              "rootClassName10": {
                  "content": {},
                  "conditions": [],
                  "type": "reusable-component-style-override"
              },
              "rootClassName11": {
                  "content": {},
                  "conditions": [],
                  "type": "reusable-component-style-override"
              }
          }
      }
  }
}

'''
'''--- examples/uidl-samples/react-project.json ---
{
    "name": "teleportProject",
    "globals": {
        "settings": {
            "language": "en",
            "title": "Show-off for a few capabilities"
        },
        "assets": [
            {
                "type": "font",
                "path": "https://fonts.googleapis.com/css?family=Roboto"
            },
            {
                "type": "style",
                "attrs": {
                    "data-type": "default-styles"
                },
                "content": "body{font-family: 'Roboto', sans-serif; color: #2c3e50; -webkit-font-smoothing: antialiased; font-size: 16px;} a{color:inherit; text-decoration: none}"
            },
            {
                "type": "icon",
                "path": "/playground_assets/favicon-32x32.png",
                "options": {
                    "iconType": "image/png",
                    "iconSizes": "32x32"
                }
            }
        ],
        "meta": [],
        "manifest": {
            "icons": [
                {
                    "src": "/playground_assets/icons-192.png",
                    "type": "image/png",
                    "sizes": "192x192"
                },
                {
                    "src": "/playground_assets/icons-512.png",
                    "type": "image/png",
                    "sizes": "512x512"
                }
            ],
            "theme_color": "#822CEC",
            "background_color": "#822CEC"
        }
    },
    "root": {
        "name": "App",
        "designLanguage": {
            "tokens": {
                "blue-500": {
                    "type": "static",
                    "content": "#9999ff"
                },
                "blue-600": {
                    "type": "static",
                    "content": "#6b7db3"
                },
                "red-500": {
                    "type": "static",
                    "content": "#ff9999"
                },
                "red-300": "#b36b6b",
                "font-size": 45
            }
        },
        "styleSetDefinitions": {
            "primary-button": {
                "type": "reusable-project-style-map",
                "conditions": [
                    {
                        "type": "screen-size",
                        "meta": {
                            "maxWidth": 991
                        },
                        "content": {
                            "background": {
                                "type": "dynamic",
                                "content": {
                                    "referenceType": "token",
                                    "id": "blue-600"
                                }
                            }
                        }
                    }
                ],
                "content": {
                    "background": {
                        "type": "dynamic",
                        "content": {
                            "referenceType": "token",
                            "id": "blue-500"
                        }
                    },
                    "width": "auto",
                    "color": "#fff",
                    "border": "1px solid #fff"
                }
            },
            "secondary-button": {
                "type": "reusable-project-style-map",
                "content": {
                    "background": "red",
                    "width": "auto",
                    "color": "#fff",
                    "border": "1px solid #fff"
                }
            }
        },
        "stateDefinitions": {
            "route": {
                "type": "string",
                "defaultValue": "home",
                "values": [
                    {
                        "value": "home",
                        "pageOptions": {
                            "navLink": "/",
                            "componentName": "Home"
                        },
                        "seo": {
                            "title": "Home Screen"
                        }
                    },
                    {
                        "value": "team",
                        "seo": {
                            "title": "About Screen",
                            "metaTags": [
                                {
                                    "name": "description",
                                    "content": "What is this about?"
                                },
                                {
                                    "name": "keywords",
                                    "content": "prea bun, prea ca la tara"
                                },
                                {
                                    "name": "viewport",
                                    "content": "width=device-width, initial-scale=1.0"
                                },
                                {
                                    "property": "og:title",
                                    "content": "What is this about?"
                                },
                                {
                                    "property": "og:url",
                                    "content": "/playground_assets/asdasd.png"
                                }
                            ],
                            "assets": [
                                {
                                    "type": "canonical",
                                    "path": "https://teleporthq.io"
                                }
                            ]
                        }
                    },
                    {
                        "value": "contact-us",
                        "pageOptions": {
                            "navLink": "/about-us-custom-link",
                            "componentName": "ContactPage"
                        },
                        "seo": {
                            "assets": [
                                {
                                    "type": "canonical",
                                    "path": "https://teleporthq.io"
                                }
                            ]
                        }
                    },
                    {
                        "value": "Fallback",
                        "seo": {
                            "title": "Fallback Page"
                        },
                        "pageOptions": {
                            "fallback": true
                        }
                    }
                ]
            }
        },
        "peerDefinitions": {
            "@emotion/core": {
                "type": "package",
                "path": "@emotion/core",
                "version": "^10.0.34"
            },
            "@emotion/styled": {
                "type": "package",
                "path": "@emotion/styled",
                "version": "^10.0.27"
            },
            "emotion-theming": {
                "type": "package",
                "path": "emotion-theming",
                "version": "^10.0.27"
            }
        },
        "importDefinitions": {
            "antdCSS": {
                "type": "package",
                "path": "antd/dist/antd.css",
                "version": "^4.5.1",
                "meta": {
                    "importJustPath": true
                }
            }
        },
        "node": {
            "type": "element",
            "content": {
                "elementType": "Router",
                "children": [
                    {
                        "type": "conditional",
                        "content": {
                            "node": {
                                "type": "element",
                                "content": {
                                    "elementType": "container",
                                    "children": [
                                        {
                                            "type": "element",
                                            "content": {
                                                "elementType": "container",
                                                "semanticType": "Navbar",
                                                "dependency": {
                                                    "type": "local"
                                                }
                                            }
                                        },
                                        {
                                            "type": "element",
                                            "content": {
                                                "elementType": "main",
                                                "style": {
                                                    "width": "960px",
                                                    "text-align": "center"
                                                },
                                                "children": [
                                                    {
                                                        "type": "element",
                                                        "content": {
                                                            "elementType": "image",
                                                            "attrs": {
                                                                "url": "http://lorempixel.com/960/200/",
                                                                "alt": "Main banner on the home page"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "type": "element",
                                                        "content": {
                                                            "style": {
                                                                "margin": "30px auto"
                                                            },
                                                            "elementType": "heading1",
                                                            "children": [
                                                                "Welcome to the teleportHQ sample website!"
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "element",
                                                        "content": {
                                                            "elementType": "textblock",
                                                            "style": {
                                                                "color": "#6a8bad",
                                                                "fontSize": "26px",
                                                                "maxWidth": "560px",
                                                                "margin": "30px auto",
                                                                "text-align": "center"
                                                            },
                                                            "children": [
                                                                "Building the infrastructure for the next generation of web and mobile interfaces"
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "element",
                                                        "content": {
                                                            "elementType": "textblock",
                                                            "children": [
                                                                {
                                                                    "type": "element",
                                                                    "content": {
                                                                        "elementType": "text",
                                                                        "style": {
                                                                            "color": "white",
                                                                            "backgroundColor": "#822cec",
                                                                            "padding": "12px 24px",
                                                                            "borderRadius": "4px",
                                                                            "margin": "auto",
                                                                            "text-decoration": "none"
                                                                        },
                                                                        "abilities": {
                                                                            "link": {
                                                                                "type": "section",
                                                                                "content": {
                                                                                    "id": "test"
                                                                                }
                                                                            }
                                                                        },
                                                                        "children": [
                                                                            "Get Started →"
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "element",
                                                        "content": {
                                                            "elementType": "container",
                                                            "name": "columns",
                                                            "referencedStyles": {
                                                                "5ed0cb9ff4fd989551c4edc0": {
                                                                    "type": "style-map",
                                                                    "content": {
                                                                        "mapType": "inlined",
                                                                        "conditions": [
                                                                            {
                                                                                "conditionType": "screen-size",
                                                                                "maxWidth": 991
                                                                            }
                                                                        ],
                                                                        "styles": {
                                                                            "flex-wrap": "wrap"
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            "style": {
                                                                "display": "flex",
                                                                "justify-content": "space-between",
                                                                "margin-top": "50px",
                                                                "border-top": "1px solid #ccc"
                                                            },
                                                            "children": [
                                                                {
                                                                    "type": "element",
                                                                    "content": {
                                                                        "elementType": "container",
                                                                        "referencedStyles": {
                                                                            "5ed0cc78c15bf36607fceff5": {
                                                                                "type": "style-map",
                                                                                "content": {
                                                                                    "mapType": "inlined",
                                                                                    "conditions": [
                                                                                        {
                                                                                            "conditionType": "screen-size",
                                                                                            "maxWidth": 991
                                                                                        }
                                                                                    ],
                                                                                    "styles": {
                                                                                        "flex": "inherit"
                                                                                    }
                                                                                }
                                                                            }
                                                                        },
                                                                        "style": {
                                                                            "flex": "1"
                                                                        },
                                                                        "children": [
                                                                            {
                                                                                "type": "element",
                                                                                "content": {
                                                                                    "elementType": "heading2",
                                                                                    "children": [
                                                                                        "Platform Independent"
                                                                                    ]
                                                                                }
                                                                            },
                                                                            {
                                                                                "type": "element",
                                                                                "content": {
                                                                                    "elementType": "textblock",
                                                                                    "children": [
                                                                                        "Using the same UI representation, you can build modern Web & Mobile applications."
                                                                                    ]
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "element",
                                                                    "content": {
                                                                        "elementType": "container",
                                                                        "referencedStyles": {
                                                                            "5ed0cd2ef0ece67901cc8f20": {
                                                                                "type": "style-map",
                                                                                "content": {
                                                                                    "mapType": "inlined",
                                                                                    "conditions": [
                                                                                        {
                                                                                            "conditionType": "screen-size",
                                                                                            "maxWidth": 991
                                                                                        }
                                                                                    ],
                                                                                    "styles": {
                                                                                        "flex": "inherit",
                                                                                        "background": "#000",
                                                                                        "color": {
                                                                                            "type": "dynamic",
                                                                                            "content": {
                                                                                                "referenceType": "token",
                                                                                                "id": "blue-500"
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        },
                                                                        "style": {
                                                                            "flex": "1",
                                                                            "color": {
                                                                                "type": "dynamic",
                                                                                "content": {
                                                                                    "referenceType": "token",
                                                                                    "id": "blue-500"
                                                                                }
                                                                            }
                                                                        },
                                                                        "children": [
                                                                            {
                                                                                "type": "element",
                                                                                "content": {
                                                                                    "elementType": "heading2",
                                                                                    "children": [
                                                                                        "Plugable Architecture"
                                                                                    ]
                                                                                }
                                                                            },
                                                                            {
                                                                                "type": "element",
                                                                                "content": {
                                                                                    "elementType": "textblock",
                                                                                    "children": [
                                                                                        "Our plugin system allows you to customize your exported code to the last detail."
                                                                                    ]
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                {
                                                                    "type": "element",
                                                                    "content": {
                                                                        "elementType": "container",
                                                                        "referencedStyles": {
                                                                            "5ed0cd26bd7301de692957bf": {
                                                                                "type": "style-map",
                                                                                "content": {
                                                                                    "mapType": "inlined",
                                                                                    "conditions": [
                                                                                        {
                                                                                            "conditionType": "screen-size",
                                                                                            "maxWidth": 991
                                                                                        }
                                                                                    ],
                                                                                    "styles": {
                                                                                        "flex": "inherit"
                                                                                    }
                                                                                }
                                                                            }
                                                                        },
                                                                        "style": {
                                                                            "flex": "1"
                                                                        },
                                                                        "children": [
                                                                            {
                                                                                "type": "element",
                                                                                "content": {
                                                                                    "elementType": "heading2",
                                                                                    "children": [
                                                                                        "An Open Community"
                                                                                    ]
                                                                                }
                                                                            },
                                                                            {
                                                                                "type": "element",
                                                                                "content": {
                                                                                    "elementType": "textblock",
                                                                                    "children": [
                                                                                        "We open-sourced our entire ecosystem and we invite everyone to contribute to it!"
                                                                                    ]
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "element",
                                                        "content": {
                                                            "elementType": "container",
                                                            "style": {
                                                                "width": "100%",
                                                                "marginTop": 15,
                                                                "marginBottom": 15,
                                                                "line-height": 1.5
                                                            },
                                                            "children": [
                                                                "We introcuded some new features to make your use your style sets defined once and use across the pages.",
                                                                "Here are some of them, shown below as examples"
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "element",
                                                        "content": {
                                                            "elementType": "button",
                                                            "abilities": {
                                                                "link": {
                                                                    "type": "url",
                                                                    "content": {
                                                                        "url": {
                                                                            "type": "static",
                                                                            "content": "https://www.google.com"
                                                                        },
                                                                        "newTab": true
                                                                    }
                                                                }
                                                            },
                                                            "attrs": {
                                                                "type": {
                                                                    "type": "static",
                                                                    "content": "button"
                                                                }
                                                            },
                                                            "style": {
                                                                "textDecoration": {
                                                                    "type": "static",
                                                                    "content": "none"
                                                                }
                                                            },
                                                            "children": [
                                                                {
                                                                    "type": "static",
                                                                    "content": "Button with links and type attr"
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "element",
                                                        "content": {
                                                            "elementType": "button",
                                                            "style": {
                                                                "font-size": "16px",
                                                                "padding": "12px 24px",
                                                                "border-radius": "6px"
                                                            },
                                                            "referencedStyles": {
                                                                "5ed0d3daf36df4da926078ee": {
                                                                    "type": "style-map",
                                                                    "content": {
                                                                        "mapType": "project-referenced",
                                                                        "referenceId": "primary-button"
                                                                    }
                                                                }
                                                            },
                                                            "children": [
                                                                "Primary Button"
                                                            ]
                                                        }
                                                    },
                                                    {
                                                        "type": "element",
                                                        "content": {
                                                            "elementType": "button",
                                                            "style": {
                                                                "font-size": "16px",
                                                                "padding": "12px 24px",
                                                                "border-radius": "6px"
                                                            },
                                                            "referencedStyles": {
                                                                "5ed0d3daf36df4da926078ee": {
                                                                    "type": "style-map",
                                                                    "content": {
                                                                        "mapType": "project-referenced",
                                                                        "referenceId": "secondary-button"
                                                                    }
                                                                }
                                                            },
                                                            "children": [
                                                                "Secondary Button"
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "type": "element",
                                            "content": {
                                                "elementType": "container",
                                                "children": [
                                                    {
                                                        "type": "element",
                                                        "content": {
                                                            "elementType": "component",
                                                            "semanticType": "ExternalComponents",
                                                            "dependency": {
                                                                "type": "local"
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            },
                            "value": "home",
                            "reference": {
                                "type": "dynamic",
                                "content": {
                                    "referenceType": "state",
                                    "id": "route"
                                }
                            }
                        }
                    },
                    {
                        "type": "conditional",
                        "content": {
                            "node": {
                                "type": "element",
                                "content": {
                                    "elementType": "container",
                                    "children": [
                                        {
                                            "type": "element",
                                            "content": {
                                                "elementType": "component",
                                                "semanticType": "Navbar",
                                                "attrs": {},
                                                "dependency": {
                                                    "type": "local"
                                                }
                                            }
                                        },
                                        {
                                            "type": "element",
                                            "content": {
                                                "elementType": "component",
                                                "semanticType": "PersonList",
                                                "dependency": {
                                                    "type": "local"
                                                }
                                            }
                                        }
                                    ]
                                }
                            },
                            "value": "team",
                            "reference": {
                                "type": "dynamic",
                                "content": {
                                    "referenceType": "state",
                                    "id": "route"
                                }
                            }
                        }
                    },
                    {
                        "type": "conditional",
                        "content": {
                            "node": {
                                "type": "element",
                                "content": {
                                    "elementType": "container",
                                    "children": [
                                        {
                                            "type": "element",
                                            "content": {
                                                "elementType": "component",
                                                "semanticType": "Navbar",
                                                "dependency": {
                                                    "type": "local"
                                                }
                                            }
                                        },
                                        {
                                            "type": "element",
                                            "content": {
                                                "elementType": "component",
                                                "semanticType": "ContactForm",
                                                "dependency": {
                                                    "type": "local"
                                                }
                                            }
                                        }
                                    ]
                                }
                            },
                            "value": "contact-us",
                            "reference": {
                                "type": "dynamic",
                                "content": {
                                    "referenceType": "state",
                                    "id": "route"
                                }
                            }
                        }
                    },
                    {
                        "type": "conditional",
                        "content": {
                            "node": {
                                "type": "element",
                                "content": {
                                    "elementType": "container",
                                    "referencedStyles": {},
                                    "abilities": {},
                                    "style": {
                                        "width": {
                                            "type": "static",
                                            "content": "100%"
                                        },
                                        "display": {
                                            "type": "static",
                                            "content": "flex"
                                        },
                                        "overflow": {
                                            "type": "static",
                                            "content": "auto"
                                        },
                                        "minHeight": {
                                            "type": "static",
                                            "content": "100vh"
                                        },
                                        "alignItems": {
                                            "type": "static",
                                            "content": "flex-start"
                                        },
                                        "flexDirection": {
                                            "type": "static",
                                            "content": "column"
                                        },
                                        "justifyContent": {
                                            "type": "static",
                                            "content": "flex-start"
                                        }
                                    },
                                    "children": [
                                        {
                                            "type": "element",
                                            "content": {
                                                "elementType": "container",
                                                "children": [
                                                    {
                                                        "type": "static",
                                                        "content": "This is a fallback page"
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "semanticType": "div"
                                }
                            },
                            "value": "Fallback",
                            "reference": {
                                "type": "dynamic",
                                "content": {
                                    "referenceType": "state",
                                    "id": "route"
                                }
                            }
                        }
                    }
                ]
            }
        }
    },
    "components": {
        "ExternalComponents": {
            "name": "ExternalComponents",
            "peerDefinitions": {
                "@emotion/core": {
                    "type": "package",
                    "path": "@emotion/core",
                    "version": "^10.0.34"
                },
                "@emotion/styled": {
                    "type": "package",
                    "path": "@emotion/styled",
                    "version": "^10.0.27"
                },
                "emotion-theming": {
                    "type": "package",
                    "path": "emotion-theming",
                    "version": "^10.0.27"
                }
            },
            "importDefinitions": {
                "theme": {
                    "type": "package",
                    "path": "@chakra-ui/core",
                    "version": "0.8.0",
                    "meta": {
                        "namedImport": true,
                        "useAsReference": true
                    }
                },
                "reactTheme": {
                    "type": "package",
                    "path": "react-ui",
                    "version": "1.0.0-beta.26",
                    "meta": {
                        "namedImport": true,
                        "useAsReference": true,
                        "originalName": "theme"
                    }
                },
                "tokens": {
                    "type": "package",
                    "path": "react-ui",
                    "version": "1.0.0-beta.26",
                    "meta": {
                        "namedImport": true,
                        "useAsReference": true
                    }
                },
                "components": {
                    "path": "react-ui",
                    "type": "package",
                    "version": "1.0.0-beta.26",
                    "meta": {
                        "namedImport": true,
                        "useAsReference": true
                    }
                }
            },
            "node": {
                "type": "element",
                "content": {
                    "semanticType": "ThemeProvider",
                    "elementType": "component",
                    "attrs": {
                        "theme": {
                            "type": "import",
                            "content": {
                                "id": "theme"
                            }
                        },
                        "tokens": {
                            "type": "import",
                            "content": {
                                "id": "tokens"
                            }
                        },
                        "components": {
                            "type": "import",
                            "content": {
                                "id": "components"
                            }
                        }
                    },
                    "dependency": {
                        "type": "package",
                        "path": "react-ui",
                        "version": "1.0.0-beta.26",
                        "meta": {
                            "namedImport": true
                        }
                    },
                    "children": [
                        {
                            "type": "element",
                            "content": {
                                "semanticType": "Button",
                                "elementType": "component",
                                "attrs": {
                                    "variant": "secondary"
                                },
                                "children": [
                                    "Button from React UI"
                                ],
                                "dependency": {
                                    "type": "package",
                                    "path": "react-ui",
                                    "version": "1.0.0-beta.26",
                                    "meta": {
                                        "namedImport": true
                                    }
                                }
                            }
                        },
                        {
                            "type": "element",
                            "content": {
                                "semanticType": "Avatar",
                                "elementType": "component",
                                "attrs": {
                                    "size": "xlarge",
                                    "src": "https://github.com/sameen-shi.png"
                                },
                                "dependency": {
                                    "type": "package",
                                    "path": "react-ui",
                                    "version": "1.0.0-beta.26",
                                    "meta": {
                                        "namedImport": true
                                    }
                                },
                                "children": []
                            }
                        },
                        {
                            "type": "element",
                            "content": {
                                "semanticType": "Button",
                                "elementType": "component",
                                "attrs": {
                                    "type": "primary"
                                },
                                "children": [
                                    "Button from ANTD"
                                ],
                                "dependency": {
                                    "type": "package",
                                    "path": "antd",
                                    "version": "4.5.4",
                                    "meta": {
                                        "namedImport": true
                                    }
                                }
                            }
                        },
                        {
                            "type": "element",
                            "content": {
                                "elementType": "component",
                                "semanticType": "ThemeProvider",
                                "attrs": {
                                    "theme": {
                                        "type": "import",
                                        "content": {
                                            "id": "reactTheme"
                                        }
                                    }
                                },
                                "dependency": {
                                    "type": "package",
                                    "version": "0.8.0",
                                    "path": "@chakra-ui/core",
                                    "meta": {
                                        "namedImport": true
                                    }
                                },
                                "children": [
                                    {
                                        "type": "element",
                                        "content": {
                                            "elementType": "component",
                                            "semanticType": "Button",
                                            "attrs": {
                                                "variantColor": "teal"
                                            },
                                            "dependency": {
                                                "type": "package",
                                                "path": "@chakra-ui/core",
                                                "version": "0.8.0",
                                                "meta": {
                                                    "namedImport": true
                                                }
                                            },
                                            "children": [
                                                "Button from Chakra UI"
                                            ]
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        "Navbar": {
            "name": "Navbar",
            "propDefinitions": {
                "variant": {
                    "type": "string",
                    "defaultValue": "secondaryButton"
                }
            },
            "styleSetDefinitions": {
                "primaryButton": {
                    "type": "reusable-component-style-override",
                    "conditions": [
                        {
                            "type": "screen-size",
                            "meta": {
                                "maxWidth": 991
                            },
                            "content": {
                                "background": {
                                    "type": "dynamic",
                                    "content": {
                                        "referenceType": "token",
                                        "id": "blue-600"
                                    }
                                }
                            }
                        }
                    ],
                    "content": {
                        "background": {
                            "type": "dynamic",
                            "content": {
                                "referenceType": "token",
                                "id": "blue-500"
                            }
                        },
                        "width": "auto",
                        "color": "#fff",
                        "border": "1px solid #fff"
                    }
                },
                "secondaryButton": {
                    "type": "reusable-component-style-override",
                    "content": {
                        "background": "red",
                        "width": "auto",
                        "color": "#fff",
                        "border": "1px solid #fff"
                    },
                    "conditions": [
                        {
                            "type": "screen-size",
                            "meta": {
                                "maxWidth": 991
                            },
                            "content": {
                                "background": {
                                    "type": "dynamic",
                                    "content": {
                                        "referenceType": "token",
                                        "id": "blue-600"
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            "node": {
                "type": "element",
                "content": {
                    "elementType": "nav",
                    "style": {
                        "border-bottom": {
                            "type": "static",
                            "content": "1px solid rgba(0,0,0,0.25)"
                        }
                    },
                    "children": [
                        {
                            "type": "element",
                            "content": {
                                "elementType": "ul",
                                "name": "list-container",
                                "style": {
                                    "list-style": "none",
                                    "margin": "0px",
                                    "padding": "0px",
                                    "display": "flex",
                                    "font-size": "18px"
                                },
                                "children": [
                                    {
                                        "type": "element",
                                        "content": {
                                            "elementType": "li",
                                            "name": "home-link",
                                            "referencedStyles": {
                                                "1415161718": {
                                                    "type": "style-map",
                                                    "content": {
                                                        "mapType": "component-referenced",
                                                        "content": {
                                                            "type": "dynamic",
                                                            "content": {
                                                                "referenceType": "prop",
                                                                "id": "variant"
                                                            }
                                                        }
                                                    }
                                                },
                                                "5ecfa07284d8848f05ef9c2d": {
                                                    "type": "style-map",
                                                    "content": {
                                                        "mapType": "inlined",
                                                        "conditions": [
                                                            {
                                                                "conditionType": "screen-size",
                                                                "maxWidth": 991
                                                            }
                                                        ],
                                                        "styles": {
                                                            "color": {
                                                                "type": "static",
                                                                "content": "red"
                                                            },
                                                            "border-bottom": "3px solid red",
                                                            "padding-bottom": "7px"
                                                        }
                                                    }
                                                }
                                            },
                                            "style": {
                                                "padding": "10px 20px",
                                                "transition": "all .15s ease-in-out",
                                                "cursor": "pointer"
                                            },
                                            "children": [
                                                {
                                                    "type": "element",
                                                    "content": {
                                                        "elementType": "text",
                                                        "abilities": {
                                                            "link": {
                                                                "type": "navlink",
                                                                "content": {
                                                                    "routeName": "home"
                                                                }
                                                            }
                                                        },
                                                        "children": [
                                                            "Home"
                                                        ]
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "type": "element",
                                        "content": {
                                            "name": "team-link",
                                            "elementType": "li",
                                            "referencedStyles": {
                                                "5ecfa07284d8848f05ef9c2d": {
                                                    "type": "style-map",
                                                    "content": {
                                                        "mapType": "inlined",
                                                        "conditions": [
                                                            {
                                                                "conditionType": "element-state",
                                                                "content": "hover"
                                                            }
                                                        ],
                                                        "styles": {
                                                            "color": {
                                                                "type": "static",
                                                                "content": "red"
                                                            },
                                                            "border-bottom": "3px solid red",
                                                            "padding-bottom": "7px"
                                                        }
                                                    }
                                                },
                                                "12345678": {
                                                    "type": "style-map",
                                                    "content": {
                                                        "mapType": "component-referenced",
                                                        "content": {
                                                            "type": "static",
                                                            "content": "md-8"
                                                        }
                                                    }
                                                }
                                            },
                                            "style": {
                                                "padding": "10px 20px",
                                                "transition": "all .15s ease-in-out",
                                                "cursor": "pointer"
                                            },
                                            "children": [
                                                {
                                                    "type": "element",
                                                    "content": {
                                                        "elementType": "text",
                                                        "abilities": {
                                                            "link": {
                                                                "type": "navlink",
                                                                "content": {
                                                                    "routeName": "team"
                                                                }
                                                            }
                                                        },
                                                        "children": [
                                                            "Team"
                                                        ]
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "type": "element",
                                        "content": {
                                            "elementType": "li",
                                            "name": "contact-link",
                                            "referencedStyles": {
                                                "5ed0d3daf36df4da926078e": {
                                                    "type": "style-map",
                                                    "content": {
                                                        "mapType": "project-referenced",
                                                        "referenceId": "secondary-button"
                                                    }
                                                },
                                                "5ecfa0d2f9f29ada8482ff03": {
                                                    "type": "style-map",
                                                    "content": {
                                                        "mapType": "inlined",
                                                        "conditions": [
                                                            {
                                                                "conditionType": "element-state",
                                                                "content": "hover"
                                                            }
                                                        ],
                                                        "styles": {
                                                            "color": {
                                                                "type": "static",
                                                                "content": "red"
                                                            },
                                                            "border-bottom": "3px solid red",
                                                            "padding-bottom": "7px"
                                                        }
                                                    }
                                                }
                                            },
                                            "style": {
                                                "padding": "10px 20px",
                                                "transition": "all .15s ease-in-out",
                                                "cursor": "pointer"
                                            },
                                            "children": [
                                                {
                                                    "type": "element",
                                                    "content": {
                                                        "elementType": "text",
                                                        "abilities": {
                                                            "link": {
                                                                "type": "navlink",
                                                                "content": {
                                                                    "routeName": "contact-us"
                                                                }
                                                            }
                                                        },
                                                        "children": [
                                                            "Contact Us"
                                                        ]
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        "PersonSpotlight": {
            "name": "PersonSpotlight",
            "propDefinitions": {
                "name": {
                    "type": "string",
                    "defaultValue": "John Doe"
                },
                "flag": {
                    "type": "string",
                    "defaultValue": "🇷🇴"
                },
                "link": {
                    "type": "string",
                    "defaultValue": "https://twitter.com/teleportHQio"
                },
                "displayLink": {
                    "type": "string",
                    "defaultValue": "@teleportHQ"
                },
                "bio": {
                    "type": "string",
                    "defaultValue": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
                }
            },
            "node": {
                "type": "element",
                "content": {
                    "elementType": "container",
                    "style": {
                        "width": "300px",
                        "border": "1px solid #ccc",
                        "padding": "10px",
                        "margin": "5px",
                        "color": "inherit"
                    },
                    "children": [
                        {
                            "type": "element",
                            "content": {
                                "elementType": "image",
                                "abilities": {
                                    "link": {
                                        "type": "url",
                                        "content": {
                                            "url": "$props.link",
                                            "newTab": true
                                        }
                                    }
                                },
                                "style": {
                                    "display": "block",
                                    "margin": "auto",
                                    "border-radius": "100%"
                                }
                            }
                        },
                        {
                            "type": "element",
                            "content": {
                                "elementType": "textblock",
                                "style": {
                                    "font-size": "22px",
                                    "font-weight": "900",
                                    "margin": "0",
                                    "text-align": "center"
                                },
                                "children": [
                                    {
                                        "type": "element",
                                        "content": {
                                            "elementType": "text",
                                            "style": {
                                                "margin-right": "7px",
                                                "font-size": "28px",
                                                "vertical-align": "middle"
                                            },
                                            "children": [
                                                {
                                                    "type": "dynamic",
                                                    "content": {
                                                        "referenceType": "prop",
                                                        "id": "flag"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "type": "dynamic",
                                        "content": {
                                            "referenceType": "prop",
                                            "id": "name"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "type": "element",
                            "content": {
                                "elementType": "textblock",
                                "style": {
                                    "fontSize": "16px",
                                    "margin": "0",
                                    "text-align": "center"
                                },
                                "children": [
                                    {
                                        "type": "element",
                                        "content": {
                                            "elementType": "text",
                                            "style": {
                                                "text-decoration": "none",
                                                "color": "#822cec"
                                            },
                                            "abilities": {
                                                "link": {
                                                    "type": "mail",
                                                    "content": {
                                                        "mail": "mail@teleporthq.io",
                                                        "body": "Hello! is it me you're looking for?"
                                                    }
                                                }
                                            },
                                            "children": [
                                                "$props.displayLink"
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "type": "element",
                            "content": {
                                "elementType": "textblock",
                                "children": [
                                    {
                                        "type": "dynamic",
                                        "content": {
                                            "referenceType": "prop",
                                            "id": "bio"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        "PersonList": {
            "name": "PersonList",
            "node": {
                "type": "element",
                "content": {
                    "elementType": "container",
                    "name": "wrapper",
                    "style": {
                        "display": "flex",
                        "flex-wrap": "wrap",
                        "padding": "5px"
                    },
                    "children": [
                        {
                            "type": "repeat",
                            "content": {
                                "node": {
                                    "type": "element",
                                    "content": {
                                        "elementType": "component",
                                        "semanticType": "PersonSpotlight",
                                        "dependency": {
                                            "type": "local",
                                            "path": "./person-spotlight"
                                        },
                                        "attrs": {
                                            "name": "$local.person.name",
                                            "flag": "$local.person.flag",
                                            "displayLink": "$local.person.displayLink",
                                            "url": "$local.person.url"
                                        }
                                    }
                                },
                                "dataSource": {
                                    "type": "static",
                                    "content": [
                                        {
                                            "name": "Alice",
                                            "flag": "🇩🇪",
                                            "displayLink": "@alicecodes",
                                            "url": "https://picsum.photos/150?v=alice"
                                        },
                                        {
                                            "name": "Bob",
                                            "displayLink": "@bobthebest",
                                            "url": "https://picsum.photos/150?v=bob"
                                        },
                                        {
                                            "name": "Carol",
                                            "flag": "🇨🇱",
                                            "displayLink": "@oh.carol",
                                            "url": "https://picsum.photos/150?v=carol"
                                        }
                                    ]
                                },
                                "meta": {
                                    "iteratorName": "person",
                                    "useIndex": true
                                }
                            }
                        }
                    ]
                }
            }
        },
        "ContactForm": {
            "name": "ContactForm",
            "propDefinitions": {
                "isClicked": {
                    "type": "func",
                    "defaultValue": "() => {}"
                }
            },
            "node": {
                "type": "element",
                "content": {
                    "elementType": "form",
                    "attrs": {
                        "type": "get",
                        "url": "/"
                    },
                    "events": {
                        "click": [
                            {
                                "type": "propCall",
                                "calls": "isClicked"
                            }
                        ]
                    },
                    "style": {
                        "margin": "20px",
                        "font-size": "18px"
                    },
                    "children": [
                        {
                            "type": "element",
                            "content": {
                                "elementType": "image",
                                "name": "form-banner",
                                "attrs": {
                                    "url": "/playground_assets/some-banner.png"
                                }
                            }
                        },
                        {
                            "type": "element",
                            "content": {
                                "elementType": "container",
                                "name": "name-group",
                                "style": {
                                    "margin-bottom": "10px"
                                },
                                "children": [
                                    {
                                        "type": "element",
                                        "content": {
                                            "elementType": "label",
                                            "attrs": {
                                                "for": "name"
                                            },
                                            "style": {
                                                "vertical-align": "middle",
                                                "display": "inline-block",
                                                "width": "100px"
                                            },
                                            "children": [
                                                "Name:"
                                            ]
                                        }
                                    },
                                    {
                                        "type": "element",
                                        "content": {
                                            "elementType": "textinput",
                                            "style": {
                                                "padding": "5px",
                                                "fontSize": "16px"
                                            },
                                            "attrs": {
                                                "id": "name",
                                                "name": "name"
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "type": "element",
                            "content": {
                                "elementType": "container",
                                "name": "email-group",
                                "style": {
                                    "margin-bottom": "10px"
                                },
                                "children": [
                                    {
                                        "type": "element",
                                        "content": {
                                            "elementType": "label",
                                            "attrs": {
                                                "for": "email"
                                            },
                                            "style": {
                                                "vertical-align": "middle",
                                                "display": "inline-block",
                                                "width": "100px"
                                            },
                                            "children": [
                                                "Email:"
                                            ]
                                        }
                                    },
                                    {
                                        "type": "element",
                                        "content": {
                                            "elementType": "textinput",
                                            "style": {
                                                "padding": "5px",
                                                "fontSize": "16px"
                                            },
                                            "attrs": {
                                                "type": "email",
                                                "id": "email",
                                                "name": "email"
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "type": "element",
                            "content": {
                                "elementType": "container",
                                "name": "message-group",
                                "style": {
                                    "margin-bottom": "10px"
                                },
                                "children": [
                                    {
                                        "type": "element",
                                        "content": {
                                            "name": "message-label",
                                            "elementType": "label",
                                            "attrs": {
                                                "for": "message"
                                            },
                                            "style": {
                                                "vertical-align": "top",
                                                "display": "inline-block",
                                                "width": "100px",
                                                "marginTop": "5px"
                                            },
                                            "children": [
                                                "Message:"
                                            ]
                                        }
                                    },
                                    {
                                        "type": "element",
                                        "content": {
                                            "elementType": "textarea",
                                            "style": {
                                                "padding": "5px",
                                                "fontSize": "16px",
                                                "border-color": "#ccc"
                                            },
                                            "attrs": {
                                                "rows": 8,
                                                "cols": 30,
                                                "id": "message",
                                                "name": "message"
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "type": "element",
                            "content": {
                                "elementType": "button",
                                "referencedStyles": {
                                    "5ecfa1233b8e50f60ea2b64d": {
                                        "type": "style-map",
                                        "content": {
                                            "mapType": "inlined",
                                            "conditions": [
                                                {
                                                    "conditionType": "element-state",
                                                    "content": "hover"
                                                }
                                            ],
                                            "styles": {
                                                "background-color": "green",
                                                "color": "white"
                                            }
                                        }
                                    }
                                },
                                "style": {
                                    "font-size": "18px",
                                    "padding": "5px 10px",
                                    "background-color": "white",
                                    "color": "green",
                                    "marginLeft": "100px",
                                    "border": "1px solid grey",
                                    "transition": "all .35s ease-out",
                                    "border-radius": "3px",
                                    "cursor": "pointer"
                                },
                                "children": [
                                    "Send"
                                ]
                            }
                        }
                    ]
                }
            }
        },
        "ExpandableArea": {
            "name": "ExpandableArea",
            "propDefinitions": {
                "header": {
                    "type": "string",
                    "defaultValue": "This whole area is clickable!"
                },
                "expandableHeight": {
                    "type": "string",
                    "defaultValue": "100px"
                }
            },
            "stateDefinitions": {
                "isExpanded": {
                    "type": "boolean",
                    "defaultValue": false
                }
            },
            "node": {
                "type": "element",
                "content": {
                    "elementType": "container",
                    "style": {
                        "border-bottom": "1px solid #ccc"
                    },
                    "children": [
                        {
                            "type": "element",
                            "content": {
                                "elementType": "container",
                                "name": "clickable-area",
                                "style": {
                                    "cursor": "pointer",
                                    "padding": "10px 0"
                                },
                                "events": {
                                    "click": [
                                        {
                                            "type": "stateChange",
                                            "modifies": "isExpanded",
                                            "newState": "$toggle"
                                        }
                                    ]
                                },
                                "children": [
                                    {
                                        "type": "element",
                                        "content": {
                                            "elementType": "text",
                                            "style": {
                                                "font-size": "20px",
                                                "font-weight": "600",
                                                "line-height": "1.5"
                                            },
                                            "children": [
                                                {
                                                    "type": "dynamic",
                                                    "content": {
                                                        "referenceType": "prop",
                                                        "id": "header"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "type": "element",
                                        "content": {
                                            "elementType": "text",
                                            "style": {
                                                "float": "right",
                                                "margin-top": "4px",
                                                "line-height": "1.5"
                                            },
                                            "name": "button",
                                            "children": [
                                                {
                                                    "type": "element",
                                                    "content": {
                                                        "elementType": "svg",
                                                        "attrs": {
                                                            "width": "15",
                                                            "height": "15",
                                                            "viewBox": "0 0 15 15",
                                                            "fill": "none"
                                                        },
                                                        "children": [
                                                            {
                                                                "type": "element",
                                                                "content": {
                                                                    "elementType": "line",
                                                                    "attrs": {
                                                                        "x1": "15",
                                                                        "y1": "7.5",
                                                                        "x2": "0",
                                                                        "y2": "7.5",
                                                                        "stroke": "#000"
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "type": "conditional",
                                                                "content": {
                                                                    "node": {
                                                                        "type": "element",
                                                                        "content": {
                                                                            "elementType": "line",
                                                                            "attrs": {
                                                                                "x1": "7.5",
                                                                                "y1": "0",
                                                                                "x2": "7.5",
                                                                                "y2": "15",
                                                                                "stroke": "#000"
                                                                            }
                                                                        }
                                                                    },
                                                                    "reference": {
                                                                        "type": "dynamic",
                                                                        "content": {
                                                                            "referenceType": "state",
                                                                            "id": "isExpanded"
                                                                        }
                                                                    },
                                                                    "value": false
                                                                }
                                                            }
                                                        ]
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "type": "element",
                            "content": {
                                "elementType": "container",
                                "name": "collapsible-area",
                                "attrs": {
                                    "data-is-expanded": "$state.isExpanded"
                                },
                                "style": {
                                    "height": "0",
                                    "overflow": "hidden",
                                    "transition": "height .2s ease-out"
                                },
                                "children": [
                                    {
                                        "type": "slot",
                                        "content": {}
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        }
    }
}

'''
'''--- jest.config.js ---
module.exports = {
  "transform": {
    "^.+\\.ts?$": "ts-jest"
  },
  'globals': {
    'ts-jest': {
      'diagnostics': {
        'warnOnly': true
      }
    }
  },
  "testRegex": "(/__tests__/.*|(\\.|/)(test|spec))\\.(jsx?|tsx?)$",
  "moduleFileExtensions": [
    "ts",
    "tsx",
    "js",
    "jsx",
    "node"
  ],
  "testPathIgnorePatterns": ['mocks.ts'],
  "moduleNameMapper": {
    '^html-whitespace-sensitive-tag-names$':
    '<rootDir>/test-mocks/html-whitespace-sensitive-tag-names.json'
  },
  "collectCoverage": false,
  "testEnvironment": "node",
  "collectCoverageFrom": [
    "packages/**/src/**/*",
    "!packages/teleport-test/**/*",
    "!packages/teleport-types/**/*"
  ]
}

'''
'''--- lerna.json ---
{
  "packages": [
    "packages/*"
  ],
  "version": "0.29.2",
  "useWorkspaces": true,
  "npmClient": "yarn",
  "command": {
    "version": {
      "allowBranch": [
        "development",
        "hotfix/*"
      ],
      "message": "chore(release): 'publish %s'"
    }
  },
  "changelog": {
    "repo": "teleporthq/teleport-code-generators",
    "cacheDir": ".changelog",
    "ignoreCommitters": [
      "allcontributors",
      "dependabot"
    ],
    "labels": {
      "enhancement": ":rocket: New Features",
      "react generators": ":electric_plug: React Generators",
      "vue generators": ":electric_plug: Vue Generators",
      "angular generators": ":electric_plug: Angular Generators",
      "stencil generators": ":electric_plug: Stencil Generators",
      "preact generators": ":electric_plug: Preact Generators",
      "style flavours": ":nail_care: Style Flavours",
      "packer": ":package: Project Packer",
      "core": ":earth_asia: Core",
      "bug": ":bug: Bug Fix",
      "uidl": ":crystal_ball: UIDL",
      "dev experience": ":house: Dev Experience",
      "refactoring": ":fire: Refactoring"
    }
  }
}

'''
'''--- package.json ---
{
    "name": "root",
    "workspaces": [
        "packages/*"
    ],
    "private": true,
    "description": "Code generators and UIDL definition library",
    "scripts": {
        "lint": "tslint -p . -c tslint.json",
        "clean": "lerna run clean --parallel",
        "link": "lerna link",
        "build": "yarn run clean && yarn run link && lerna run build ",
        "dev": "yarn run link && lerna run build && node scripts/watcher.mjs",
        "test": "jest",
        "test:perf": "jest __tests__/performance",
        "test:watch": "jest --watch --silent=false",
        "test:clearcache": "jest --clearCache",
        "test:coverage": "yarn run test -- --coverage --no-cache",
        "upload:coverage": "codecov",
        "commitizen": "git-cz",
        "add-contributor": "all-contributors add",
        "changelog": "lerna-changelog",
        "version": "lerna version",
        "publish": "lerna publish from-package --no-verify-access",
        "local:adduser": "npm adduser --registry http://localhost:4873",
        "local:publish": "lerna exec --bail=false  -- npm publish -f --registry http://localhost:4873",
        "local:unpublish": "lerna exec --bail=false -- npm unpublish -f --registry http://localhost:4873"
    },
    "husky": {
        "hooks": {
            "pre-commit": "pretty-quick --staged && npm run lint"
        }
    },
    "engines": {
        "node": "16.x"
    },
    "repository": {
        "type": "git",
        "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
    },
    "author": "teleportHQ",
    "license": "MIT",
    "homepage": "https://teleporthq.io/",
    "devDependencies": {
        "@types/babel-types": "^7.0.7",
        "@types/jest": "^25.1.1",
        "@types/node": "^16.11.7",
        "@types/prettier": "^2.1.6",
        "@types/rimraf": "^2.0.3",
        "all-contributors-cli": "^6.13.0",
        "chalk": "^2.4.2",
        "chokidar": "^3.0.2",
        "codecov": "^3.8.3",
        "commitizen": "^4.2.5",
        "cz-conventional-changelog": "^3.3.0",
        "husky": "^3.0.4",
        "jest": "^26.6.3",
        "lerna": "^5.3.0",
        "lerna-changelog": "^2.2.0",
        "pretty-quick": "^3.1.0",
        "rimraf": "^3.0.0",
        "ts-jest": "^26.5.6",
        "tslint": "^6.0.0",
        "tslint-config-prettier": "^1.18.0",
        "typescript": "^5.0.2"
    },
    "resolutions": {
        "parse5": "^7.1.2"
    },
    "config": {
        "commitizen": {
            "path": "./node_modules/cz-conventional-changelog"
        }
    }
}

'''
'''--- packages/teleport-code-generator/README.md ---
# teleport-code-generator

A standalone version of the teleport ecosystem with all the project and component generators installed.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-code-generator
```
or
```bash
yarn add @teleporthq/teleport-code-generator
```

'''
'''--- packages/teleport-code-generator/__tests__/end2end/index.ts ---
import {
  createNextProjectGenerator,
  NextTemplate,
} from '@teleporthq/teleport-project-generator-next'
import { ProjectPluginCSSModules } from '../../../teleport-project-plugin-css-modules'
import { ProjectPluginStyledComponents } from '../../../teleport-project-plugin-styled-components'
import projectUIDL from '../../../../examples/test-samples/project-with-import-global-styles.json'
import { FileType, ProjectType } from '@teleporthq/teleport-types'
import uidlSample from '../../../../examples/test-samples/project-sample.json'
import uidlSampleWithExternalDependencies from '../../../../examples/test-samples/project-sample-with-dependency.json'
import uidlSampleWithJustTokens from '../../../../examples/test-samples/project-with-only-tokens.json'
import invalidUidlSample from '../../../../examples/test-samples/project-invalid-sample.json'

describe('Generates NEXT-JS project with plugins', () => {
  it('NEXT + css-modules plugin', async () => {
    const generator = createNextProjectGenerator()
    generator.addPlugin(new ProjectPluginCSSModules({ framework: ProjectType.NEXT }))
    const result = await generator.generateProject(projectUIDL, NextTemplate)

    const nextConfig = result.files.find(
      (file) => file.name === 'next.config' && file.fileType === FileType.JS
    )
    const packageJSON = result.files.find((file) => file.name === 'package')
    const pages = result.subFolders.find((folder) => folder.name === 'pages')
    const styleModule = pages.files.find((file) => file.fileType === FileType.CSS)
    const appRoot = pages.files.find((file) => file.name === '_app')

    expect(result.files.length).toBe(2)
    expect(packageJSON).toBeDefined()
    expect(nextConfig).toBeDefined()
    expect(pages.files.length).toBe(6)
    expect(styleModule).toBeDefined()
    expect(styleModule.name).toBe('style.module')
    expect(appRoot).toBeDefined()
    expect(appRoot.content).toContain(`import './style.module.css'`)
  })

  it('NEXT + StyledComponents', async () => {
    const generator = createNextProjectGenerator()
    generator.addPlugin(new ProjectPluginStyledComponents({ framework: ProjectType.NEXT }))
    const result = await generator.generateProject(projectUIDL, NextTemplate)

    const babelRC = result.files.find((file) => file.name === `.babelrc`)
    const packgeJSON = result.files.find((file) => file.name === 'package')
    const pages = result.subFolders.find((folder) => folder.name === 'pages')
    const styleModule = pages.files.find(
      (file) => file.name === 'style' && file.fileType === FileType.JS
    )
    const document = pages.files.find(
      (file) => file.name === '_document' && file.fileType === FileType.JS
    )
    const appFile = pages.files.find(
      (file) => file.name === '_app' && file.fileType === FileType.JS
    )

    expect(babelRC).toBeDefined()
    expect(babelRC.content).toContain(`styled-components`)
    expect(packgeJSON).toBeDefined()
    expect(packgeJSON.content).toContain(`"styled-components": "^5.3.0"`)
    expect(packgeJSON.content).toContain(`"styled-system": "^5.1.5"`)
    expect(pages.files.length).toBe(6)
    expect(styleModule).toBeDefined()
    expect(styleModule.content).toContain(`import { variant } from 'styled-system'`)
    expect(document).toBeDefined()
    expect(document.content).toContain(`import { ServerStyleSheet } from 'styled-components'`)
    expect(document.content).toContain(`const sheet = new ServerStyleSheet()`)
    expect(document.content).toContain(`{this.props.styleTags}`)
    expect(appFile.content).not.toContain(`import "./style.css"`)
  })
})

'''
'''--- packages/teleport-code-generator/__tests__/index.ts ---
import { readFileSync, existsSync, readdirSync, unlinkSync, statSync, rmdirSync } from 'fs'
import { join } from 'path'
import { performance } from 'perf_hooks'
import projectJson from '../../../examples/test-samples/project-sample.json'
import htmlProjectJson from '../../../examples/uidl-samples/project.json'
import {
  ProjectUIDL,
  GenerateOptions,
  ComponentType,
  PackerOptions,
  PublisherType,
  ProjectType,
  ReactStyleVariation,
  ComponentUIDL,
} from '@teleporthq/teleport-types'
import { packProject, generateComponent } from '../src/index'

const reactProjectPath = join(__dirname, 'react')
const nextProjectPath = join(__dirname, 'next')
const vueProjectPath = join(__dirname, 'vue')
const nuxtProjectPath = join(__dirname, 'nuxt')
const htmlProjectPath = join(__dirname, 'html')
const angularProjectPath = join(__dirname, 'angular')

const assetFile = readFileSync(join(__dirname, 'asset.png'))
const base64File = new Buffer(assetFile).toString('base64')

const assets = [
  {
    content: base64File,
    name: 'asset',
    fileType: 'png',
  },
]

const projectUIDL = projectJson as unknown as ProjectUIDL
const componentUIDL = (projectUIDL.components as Record<string, ComponentUIDL>).ExpandableArea

afterAll(() => {
  // Comment these lines if you want to see the generated projects
  removeDirectory(reactProjectPath)
  removeDirectory(nextProjectPath)
  removeDirectory(vueProjectPath)
  removeDirectory(nuxtProjectPath)
  removeDirectory(htmlProjectPath)
  removeDirectory(angularProjectPath)
})

describe('Performance tests for the code-generator', () => {
  const runs = 20
  let totalTime = 0

  it('Runs React project generaotr multiple times and tests for memory leaks', async () => {
    totalTime = 0
    for (let i = 0; i <= runs; i++) {
      const t1 = performance.now()
      await packProject(projectUIDL as unknown as ProjectUIDL, {
        projectType: ProjectType.REACT,
      })
      const t2 = performance.now()
      const timeTaken = Number((t2 - t1).toFixed(2))
      totalTime = totalTime + timeTaken
    }

    expect(totalTime / runs).toBeLessThan(500)
  })
})

describe('code generator', () => {
  it('creates a react project', async () => {
    const options: PackerOptions = {
      projectType: ProjectType.REACT,
      assets,
      publisher: PublisherType.DISK,
      publishOptions: { outputPath: reactProjectPath },
    }

    const { success } = await packProject(projectUIDL, options)
    expect(success).toBeTruthy()
  })

  it('creates a next project', async () => {
    const options: PackerOptions = {
      projectType: ProjectType.NEXT,
      assets,
      publisher: PublisherType.DISK,
      publishOptions: { outputPath: nextProjectPath },
    }

    const { success } = await packProject(projectUIDL, options)
    expect(success).toBeTruthy()
  })

  it('creates a vue project', async () => {
    const options: PackerOptions = {
      projectType: ProjectType.VUE,
      assets,
      publisher: PublisherType.DISK,
      publishOptions: { outputPath: vueProjectPath },
    }

    const { success } = await packProject(projectUIDL, options)
    expect(success).toBeTruthy()
  })

  it('creates a nuxt project', async () => {
    const options: PackerOptions = {
      projectType: ProjectType.NUXT,
      assets,
      publisher: PublisherType.DISK,
      publishOptions: { outputPath: nuxtProjectPath },
    }

    const { success } = await packProject(projectUIDL, options)
    expect(success).toBeTruthy()
  })

  it('creates a html project', async () => {
    const options: PackerOptions = {
      projectType: ProjectType.HTML,
      assets,
      publisher: PublisherType.DISK,
      publishOptions: { outputPath: htmlProjectPath },
    }

    const { success } = await packProject(htmlProjectJson as unknown as ProjectUIDL, options)
    expect(success).toBeTruthy()
  })

  it('creates a angular project', async () => {
    const options: PackerOptions = {
      projectType: ProjectType.ANGULAR,
      assets,
      publisher: PublisherType.DISK,
      publishOptions: { outputPath: angularProjectPath },
    }

    const { success } = await packProject(htmlProjectJson as unknown as ProjectUIDL, options)
    expect(success).toBeTruthy()
  })

  it('creates a react component', async () => {
    const options: GenerateOptions = {
      componentType: ComponentType.REACT,
      styleVariation: ReactStyleVariation.CSSModules,
    }

    const { files } = await generateComponent(componentUIDL, options)
    expect(files.length).toBe(2)
  })

  it('creates a vue component', async () => {
    const options: GenerateOptions = {
      componentType: ComponentType.VUE,
    }

    const { files } = await generateComponent(componentUIDL, options)
    expect(files.length).toBe(1)
  })

  it('creates an angular component', async () => {
    const options: GenerateOptions = {
      componentType: ComponentType.ANGULAR,
    }

    const { files } = await generateComponent(componentUIDL, options)
    expect(files.length).toBe(3)
  })

  it('throws an error when given an invalid ProjectType', async () => {
    // @ts-ignore
    const result = packProject(projectUIDL, { projectType: 'random' })
    await expect(result).rejects.toThrow(Error)
  })

  it('throws an error when given an invalid Publisher', async () => {
    // @ts-ignore
    const result = packProject(projectUIDL, { publisher: 'random' })
    await expect(result).rejects.toThrow(Error)
  })
})

const removeDirectory = (dirPath: string): void => {
  if (!existsSync(dirPath)) {
    return
  }

  const files = readdirSync(dirPath)

  for (const file of files) {
    const filePath = join(dirPath, file)
    statSync(filePath).isFile() ? unlinkSync(filePath) : removeDirectory(filePath)
  }

  rmdirSync(dirPath)
}

'''
'''--- packages/teleport-code-generator/package.json ---
{
  "name": "@teleporthq/teleport-code-generator",
  "version": "0.29.2",
  "description": "A standalone version of the teleport ecosystem with all the project and component generators installed",
  "author": "teleportHQ",
  "license": "MIT",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-component-generator-angular": "^0.29.2",
    "@teleporthq/teleport-component-generator-html": "^0.29.2",
    "@teleporthq/teleport-component-generator-react": "^0.29.2",
    "@teleporthq/teleport-component-generator-vue": "^0.29.2",
    "@teleporthq/teleport-project-generator-angular": "^0.29.2",
    "@teleporthq/teleport-project-generator-html": "^0.29.2",
    "@teleporthq/teleport-project-generator-next": "^0.29.2",
    "@teleporthq/teleport-project-generator-nuxt": "^0.29.2",
    "@teleporthq/teleport-project-generator-react": "^0.29.2",
    "@teleporthq/teleport-project-generator-vue": "^0.29.2",
    "@teleporthq/teleport-project-packer": "^0.29.0",
    "@teleporthq/teleport-publisher-codesandbox": "^0.29.0",
    "@teleporthq/teleport-publisher-disk": "^0.29.0",
    "@teleporthq/teleport-publisher-github": "^0.29.0",
    "@teleporthq/teleport-publisher-netlify": "^0.29.0",
    "@teleporthq/teleport-publisher-vercel": "^0.29.0",
    "@teleporthq/teleport-publisher-zip": "^0.29.0",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-code-generator/src/index.ts ---
import {
  PackProjectFunction,
  GenerateComponentFunction,
  ComponentUIDL,
  PublisherType,
  ProjectType,
  ComponentType,
  StyleVariation,
  ReactStyleVariation,
  InvalidProjectTypeError,
  InvalidPublisherTypeError,
  GeneratorOptions,
  Mapping,
  ComponentGenerator,
  ComponentGeneratorInstance,
  ProjectPlugin,
  HTMLComponentGenerator,
  ComponentPlugin,
} from '@teleporthq/teleport-types'
import { Constants } from '@teleporthq/teleport-shared'

import { createProjectPacker } from '@teleporthq/teleport-project-packer'
import {
  ReactTemplate,
  createReactProjectGenerator,
  ReactProjectMapping,
} from '@teleporthq/teleport-project-generator-react'
import {
  createNextProjectGenerator,
  NextTemplate,
} from '@teleporthq/teleport-project-generator-next'
import {
  VueTemplate,
  createVueProjectGenerator,
  VueProjectMapping,
} from '@teleporthq/teleport-project-generator-vue'
import {
  NuxtTemplate,
  createNuxtProjectGenerator,
  nuxtErrorPageMapper,
} from '@teleporthq/teleport-project-generator-nuxt'

import {
  createAngularProjectGenerator,
  AngularTemplate,
  AngularProjectMapping,
} from '@teleporthq/teleport-project-generator-angular'

import {
  createHTMLProjectGenerator,
  HTMLTemplate,
  pluginCloneGlobals,
  pluginHomeReplace,
  htmlErrorPageMapping,
} from '@teleporthq/teleport-project-generator-html'

import { createZipPublisher } from '@teleporthq/teleport-publisher-zip'
import { createVercelPublisher } from '@teleporthq/teleport-publisher-vercel'
import { createNetlifyPublisher } from '@teleporthq/teleport-publisher-netlify'
import { createGithubPublisher } from '@teleporthq/teleport-publisher-github'
import { createCodesandboxPublisher } from '@teleporthq/teleport-publisher-codesandbox'

import { createReactComponentGenerator } from '@teleporthq/teleport-component-generator-react'
import { createVueComponentGenerator } from '@teleporthq/teleport-component-generator-vue'
import { createAngularComponentGenerator } from '@teleporthq/teleport-component-generator-angular'
import {
  createHTMLComponentGenerator,
  PlainHTMLMapping,
} from '@teleporthq/teleport-component-generator-html'
import { isNodeProcess } from './utils'

const componentGeneratorFactories: Record<ComponentType, ComponentGeneratorInstance> = {
  [ComponentType.REACT]: createReactComponentGenerator,
  [ComponentType.ANGULAR]: createAngularComponentGenerator,
  [ComponentType.VUE]: createVueComponentGenerator,
  [ComponentType.HTML]: createHTMLComponentGenerator,
}

const componentGeneratorProjectMappings = {
  [ComponentType.REACT]: ReactProjectMapping,
  [ComponentType.ANGULAR]: AngularProjectMapping,
  [ComponentType.VUE]: VueProjectMapping,
  [ComponentType.HTML]: PlainHTMLMapping,
}

const projectGeneratorFactories = {
  [ProjectType.REACT]: createReactProjectGenerator,
  [ProjectType.NEXT]: createNextProjectGenerator,
  [ProjectType.VUE]: createVueProjectGenerator,
  [ProjectType.NUXT]: createNuxtProjectGenerator,
  [ProjectType.ANGULAR]: createAngularProjectGenerator,
  [ProjectType.HTML]: createHTMLProjectGenerator,
}

const templates = {
  [ProjectType.REACT]: ReactTemplate,
  [ProjectType.NEXT]: NextTemplate,
  [ProjectType.VUE]: VueTemplate,
  [ProjectType.NUXT]: NuxtTemplate,
  [ProjectType.ANGULAR]: AngularTemplate,
  [ProjectType.HTML]: HTMLTemplate,
}

/* tslint:disable ban-types */
const projectPublisherFactories: Omit<Record<PublisherType, Function>, PublisherType.DISK> = {
  [PublisherType.ZIP]: createZipPublisher,
  [PublisherType.VERCEL]: createVercelPublisher,
  [PublisherType.NETLIFY]: createNetlifyPublisher,
  [PublisherType.GITHUB]: createGithubPublisher,
  [PublisherType.CODESANDBOX]: createCodesandboxPublisher,
}

export const packProject: PackProjectFunction = async (
  projectUIDL,
  {
    projectType,
    publisher: publisherType,
    publishOptions = {},
    assets = [],
    plugins = [],
    assetsFolder = [Constants.ASSETS_IDENTIFIER],
  }
) => {
  const packer = createProjectPacker()
  let publisher
  if (publisherType === PublisherType.DISK) {
    if (isNodeProcess()) {
      const createDiskPublisher = await import('@teleporthq/teleport-publisher-disk').then(
        (mod) => mod.createDiskPublisher
      )
      publisher = createDiskPublisher
    } else {
      throw Error(`${PublisherType.DISK} can only be used inside node environments`)
    }
  } else {
    publisher = projectPublisherFactories[publisherType]
  }

  const projectGeneratorFactory = projectGeneratorFactories[projectType]()
  projectGeneratorFactory.cleanPlugins()

  if (projectType === ProjectType.HTML) {
    projectGeneratorFactory.addPlugin(pluginHomeReplace)
    projectGeneratorFactory.addPlugin(pluginCloneGlobals)
    projectGeneratorFactory.addPlugin(htmlErrorPageMapping)
  }

  if (projectType === ProjectType.NUXT) {
    projectGeneratorFactory.addPlugin(nuxtErrorPageMapper)
  }

  if (plugins?.length > 0) {
    plugins.forEach((plugin: ProjectPlugin) => {
      projectGeneratorFactory.addPlugin(plugin)
    })
  }

  const projectTemplate = templates[projectType]

  if (!projectGeneratorFactory) {
    throw new InvalidProjectTypeError(projectType)
  }

  if (publisherType && !publisher) {
    throw new InvalidPublisherTypeError(publisherType)
  }

  packer.setAssets({
    assets,
    path: assetsFolder,
  })

  packer.setGenerator(projectGeneratorFactory)
  packer.setTemplate(projectTemplate)

  // If no publisher is provided, the packer will return the generated project
  if (publisherType) {
    const publisherFactory = publisher
    const projectPublisher = publisherFactory(publishOptions)
    // @ts-ignore
    packer.setPublisher(projectPublisher)
  }

  return packer.pack(projectUIDL)
}

export const generateComponent: GenerateComponentFunction = async (
  componentUIDL: ComponentUIDL,
  {
    componentType = ComponentType.REACT,
    styleVariation = ReactStyleVariation.CSSModules,
    componentGeneratorOptions = {},
    plugins = [],
  }: {
    componentType?: ComponentType
    styleVariation?: ReactStyleVariation
    componentGeneratorOptions?: GeneratorOptions
    plugins?: ComponentPlugin[]
  } = {}
) => {
  const generator = createComponentGenerator(componentType, styleVariation, plugins)
  const projectMapping = componentGeneratorProjectMappings[componentType]
  generator.addMapping(projectMapping as Mapping)

  if (componentType === ComponentType.HTML) {
    const { moduleComponents } = componentGeneratorOptions
    ;(generator as HTMLComponentGenerator).addExternalComponents({ externals: moduleComponents })
  }

  return generator.generateComponent(componentUIDL, componentGeneratorOptions)
}

const createComponentGenerator = (
  componentType: ComponentType,
  styleVariation: StyleVariation,
  plugins: ComponentPlugin[]
): ComponentGenerator => {
  const generatorFactory = componentGeneratorFactories[componentType]

  if (!generatorFactory) {
    throw new Error(`Invalid ComponentType: ${componentType}`)
  }

  if (componentType === ComponentType.REACT) {
    return generatorFactory({ variation: styleVariation, plugins })
  }

  return generatorFactory({ plugins })
}

'''
'''--- packages/teleport-code-generator/src/utils.ts ---
export const isNodeProcess = (): boolean => {
  return (
    typeof process === 'object' &&
    typeof process.versions === 'object' &&
    typeof process.versions.node !== 'undefined'
  )
}

'''
'''--- packages/teleport-code-generator/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-component-generator-angular/README.md ---
# teleport-component-generator-angular

Component generator customization, capable of creating Angular components with styles.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-component-generator-angular
```
or
```bash
yarn add @teleporthq/teleport-component-generator-angular
```

## Usage
```javascript
import { createAngularComponentGenerator } from '@teleporthq/teleport-component-generator-angular'

const angularGenerator = createAngularComponentGenerator()

const result = await angularGenerator.generateComponent(uidl)
```

'''
'''--- packages/teleport-component-generator-angular/__tests__/end2end/component-referenced-styles.ts ---
import { createAngularComponentGenerator } from '../../src'
import { component, elementNode, staticNode } from '@teleporthq/teleport-uidl-builders'
import {
  UIDLReferencedStyles,
  GeneratedFile,
  FileType,
  GeneratorOptions,
} from '@teleporthq/teleport-types'

const findFileByType = (files: GeneratedFile[], type: string = FileType.JS) =>
  files.find((file) => file.fileType === type)

describe('Generates media, pseudo and normal styles', () => {
  const referencedStyles: UIDLReferencedStyles = {
    '1234567890': {
      type: 'style-map',
      content: {
        mapType: 'inlined',
        conditions: [{ conditionType: 'screen-size', maxWidth: 991 }],
        styles: {
          display: staticNode('none'),
        },
      },
    },
  }

  const style = {
    width: staticNode('100px'),
  }
  const uidl = component(
    'MyComponent',
    elementNode('container', null, [staticNode('Hello !!')], null, style, null, referencedStyles)
  )

  it('Generates styles using CSS', async () => {
    const generator = createAngularComponentGenerator()
    const { files } = await generator.generateComponent(uidl)
    const tsFile = findFileByType(files, FileType.TS)
    const cssFile = findFileByType(files, FileType.CSS)
    const htmlFile = findFileByType(files, FileType.HTML)

    expect(files.length).toBe(3)
    expect(cssFile.content).toContain(`width: 100px`)
    expect(cssFile.content).toContain(`@media(max-width: 991px)`)
    expect(cssFile.content).toContain(`display: none`)
    expect(htmlFile.content).toContain(`class="my-component-container"`)
    expect(tsFile.content).toContain(`my-component.css`)
  })
})

describe('Add referenced styles even when direct styles are not present on node', () => {
  const referencedStyles: UIDLReferencedStyles = {
    '1234567890': {
      type: 'style-map',
      content: {
        mapType: 'inlined',
        conditions: [{ conditionType: 'screen-size', maxWidth: 991 }],
        styles: {
          display: staticNode('none'),
        },
      },
    },
  }

  const uidl = component(
    'MyComponent',
    elementNode('container', null, [staticNode('Hello !!')], null, null, null, referencedStyles)
  )

  it('Generates styles using CSS', async () => {
    const generator = createAngularComponentGenerator()
    const { files } = await generator.generateComponent(uidl)
    const tsFile = findFileByType(files, FileType.TS)
    const cssFile = findFileByType(files, FileType.CSS)
    const htmlFile = findFileByType(files, FileType.HTML)

    expect(files.length).toBe(3)
    expect(cssFile.content).not.toContain(`width: 100px`)
    expect(cssFile.content).toContain(`@media(max-width: 991px)`)
    expect(cssFile.content).toContain(`display: none`)
    expect(htmlFile.content).toContain(`class="my-component-container"`)
    expect(tsFile.content).toContain(`my-component.css`)
  })
})

describe('Throws Error when a node is using project-styles but not present in UIDL', () => {
  const styles: UIDLReferencedStyles = {
    '123456789': {
      type: 'style-map',
      content: {
        mapType: 'project-referenced',
        referenceId: 'primaryButton',
      },
    },
  }
  const uidl = component(
    'MyComponent',
    elementNode('container', null, [], null, null, null, styles)
  )

  it('CSS', async () => {
    const generator = createAngularComponentGenerator()
    await expect(generator.generateComponent(uidl)).rejects.toThrow(Error)
  })
})

describe('Referes from project style and adds it to the node, without any styles on the node', () => {
  const styles: UIDLReferencedStyles = {
    '123456789': {
      type: 'style-map',
      content: {
        mapType: 'project-referenced',
        referenceId: 'primaryButton',
      },
    },
  }
  const uidl = component(
    'MyComponent',
    elementNode('container', null, [staticNode('Hello')], null, null, null, styles)
  )
  const options: GeneratorOptions = {
    projectStyleSet: {
      styleSetDefinitions: {
        primaryButton: {
          type: 'reusable-project-style-map',
          content: {
            background: staticNode('blue'),
          },
        },
      },
      fileName: 'style',
      path: '..',
    },
  }

  it('CSS', async () => {
    const generator = createAngularComponentGenerator()
    const { files } = await generator.generateComponent(uidl, options)
    const tsFile = findFileByType(files, FileType.TS)
    const cssFile = findFileByType(files, FileType.CSS)
    const htmlFile = findFileByType(files, FileType.HTML)

    expect(files.length).toBe(2)
    expect(cssFile).not.toBeDefined()
    expect(htmlFile.content).toContain(`class="primaryButton"`)
    expect(tsFile.content).not.toContain(`my-component.css`)
    expect(tsFile.content).not.toContain(`import '../style.css`)
  })
})

'''
'''--- packages/teleport-component-generator-angular/__tests__/end2end/index.ts ---
// @ts-ignore
import uidlSampleJSON from '../../../../examples/test-samples/component-sample.json'
// @ts-ignore
import invalidUidlSampleJSON from '../../../../examples/test-samples/component-invalid-sample.json'

import { createAngularComponentGenerator } from '../../src'
import {
  ComponentUIDL,
  GeneratedFile,
  UIDLEventDefinitions,
  UIDLPropDefinition,
  UIDLStateDefinition,
} from '@teleporthq/teleport-types'
import {
  component,
  elementNode,
  dynamicNode,
  staticNode,
  rawNode,
} from '@teleporthq/teleport-uidl-builders'

const uidlSample = uidlSampleJSON as ComponentUIDL
const invalidUidlSample = invalidUidlSampleJSON as ComponentUIDL
const TS_FILE = 'ts'
const HTML_FILE = 'html'
const findFileByType = (files: GeneratedFile[], type: string = TS_FILE) =>
  files.find((file) => file.fileType === type)

describe('Angular Component Generator', () => {
  describe('with standard plugins', () => {
    const generator = createAngularComponentGenerator()

    it('should return the files containing the code as string', async () => {
      const result = await generator.generateComponent(uidlSample)
      const tsFile = findFileByType(result.files, TS_FILE)

      expect(tsFile).toBeDefined()
      expect(result.files).toBeDefined()
      expect(Array.isArray(result.files)).toBeTruthy()
      expect(result.files.length).toBe(2)
      expect(tsFile.content).toContain(`import { Component, Input } from '@angular/core`)
      expect(result.dependencies).toBeDefined()
    })
  })
})

describe('Angular Component Validator', () => {
  const generator = createAngularComponentGenerator()

  it('works with valid UIDL sample', async () => {
    const result = await generator.generateComponent(uidlSample)
    const tsFile = findFileByType(result.files, TS_FILE)

    expect(tsFile).toBeDefined()
    expect(result.files.length).toBe(2)
    expect(tsFile.content).toContain(`import { Component, Input } from '@angular/core`)
    expect(result.dependencies).toBeDefined()
  })

  it('Decoders remove additational fields and uses the uidl', async () => {
    const result = await generator.generateComponent(invalidUidlSample)
    const tsFile = findFileByType(result.files, TS_FILE)

    expect(tsFile).toBeDefined()
    expect(result.files.length).toBe(2)
    expect(tsFile.content).toContain(`import { Component, Input } from '@angular/core`)
    expect(result.dependencies).toBeDefined()
  })

  it('works when validation step is skiped', async () => {
    const options = { skipValidation: true }
    const result = await generator.generateComponent(invalidUidlSample, options)
    const tsFile = findFileByType(result.files, TS_FILE)

    expect(tsFile).toBeDefined()
    expect(result.files.length).toBe(2)
    expect(tsFile.content).toContain(`import { Component, Input } from '@angular/core`)
    expect(result.dependencies).toBeDefined()
  })
})

describe('Should add EventEmitter and Emit events when a fun is sent via prop', () => {
  const generator = createAngularComponentGenerator()
  const propDefinitions: Record<string, UIDLPropDefinition> = {
    message: {
      type: 'string',
      defaultValue: 'Hello',
    },
    onClose: {
      type: 'func',
      defaultValue: '() => {}',
    },
  }
  const stateDefinitions: Record<string, UIDLStateDefinition> = {
    fakeState: {
      type: 'boolean',
      defaultValue: true,
    },
  }
  const events: UIDLEventDefinitions = {
    click: [
      {
        type: 'propCall',
        calls: 'onClose',
      },
      {
        type: 'stateChange',
        modifies: 'fakeState',
        newState: '$toggle',
      },
    ],
  }
  const uidl: ComponentUIDL = component(
    'PropEventComponent',
    elementNode('container', {}, [
      dynamicNode('prop', 'message'),
      elementNode('button', {}, [staticNode('close')], null, null, events),
    ]),
    propDefinitions,
    stateDefinitions
  )

  it('Adds EmitEmitter to the import', async () => {
    const result = await generator.generateComponent(uidl)
    const tsFile = findFileByType(result.files, TS_FILE)
    const htmlFile = findFileByType(result.files, HTML_FILE)

    expect(result.files.length).toBe(2)
    expect(tsFile.content).toContain(`Output, EventEmitter`)
    expect(tsFile.content).toContain(`@Output`)
    expect(tsFile.content).toContain(`onClose: EventEmitter<any> = new EventEmitter()`)
    expect(tsFile.content).toContain(`this.fakeState = !this.fakeState`)
    expect(tsFile.content).toContain(`this.onClose.emit()`)
    expect(htmlFile.content).toContain(`(click)="handleButtonClick()"`)
  })
})

describe('Parses raw node and adds then', () => {
  const generator = createAngularComponentGenerator()

  it('Adds DOM injection node to the html', async () => {
    const uidl: ComponentUIDL = component(
      'RawNode',
      elementNode('container', {}, [rawNode('<h1>Heading</h1>')])
    )
    const result = await generator.generateComponent(uidl)
    const tsFile = findFileByType(result.files, TS_FILE)
    const htmlFile = findFileByType(result.files, HTML_FILE)

    expect(result.files.length).toBe(2)
    expect(tsFile.content).toContain('<h1>Heading</h1>')
    expect(htmlFile.content).toContain('[innerHTML]')
  })
})

'''
'''--- packages/teleport-component-generator-angular/__tests__/integration/component-conditional.ts ---
import { createAngularComponentGenerator } from '../../src'
import { GeneratedFile } from '@teleporthq/teleport-types'
import {
  component,
  definition,
  staticNode,
  dynamicNode,
  elementNode,
  conditionalNode,
} from '@teleporthq/teleport-uidl-builders'

const generator = createAngularComponentGenerator()

const TS_FILE = 'ts'
const HTML_FILE = 'html'
const findFileByType = (files: GeneratedFile[], type: string = TS_FILE) =>
  files.find((file) => file.fileType === type)

const uidl = component(
  'Conditional Component',
  elementNode('container', {}, [
    conditionalNode(
      dynamicNode('state', 'isVisible'),
      elementNode('text', {}, [staticNode('Now you see me!')]),
      true
    ),
    conditionalNode(
      dynamicNode('state', 'isShareable'),
      elementNode('text', {}, [staticNode('I am not shareable!')]),
      false
    ),
  ]),
  {},
  { isVisible: definition('boolean', true), isShareable: definition('boolean', false) }
)

describe('Component with conditional node type', () => {
  it('renders code with condition if value on state is true', async () => {
    const result = await generator.generateComponent(uidl)
    const tsFile = findFileByType(result.files, TS_FILE)
    const htmlFile = findFileByType(result.files, HTML_FILE)

    expect(result.files.length).toBe(2)
    expect(tsFile).toBeDefined()
    expect(htmlFile).toBeDefined()
    expect(tsFile.content).toContain('isVisible: boolean = true')
    expect(htmlFile.content).toContain('*ngIf="isVisible"')
  })

  it('renders code with !condition if value on state is false', async () => {
    const result = await generator.generateComponent(uidl)
    const jsFile = findFileByType(result.files, TS_FILE)
    const htmlFile = findFileByType(result.files, HTML_FILE)

    expect(result.files.length).toBe(2)
    expect(jsFile).toBeDefined()
    expect(htmlFile).toBeDefined()
    expect(jsFile.content).toContain('isShareable: boolean = false')
    expect(htmlFile.content).toContain('*ngIf="!isShareable"')
  })
})

'''
'''--- packages/teleport-component-generator-angular/__tests__/integration/component-dependency.ts ---
import { createAngularComponentGenerator } from '../../src'
import { GeneratedFile } from '@teleporthq/teleport-types'
import componentJSON from './component-with-smilar-element-name-depependencies.json'

const generator = createAngularComponentGenerator()

const TS_FILE = 'ts'
const HTML_FILE = 'html'
const findFileByType = (files: GeneratedFile[], type: string = TS_FILE) =>
  files.find((file) => file.fileType === type)

describe('Component Dependencies', () => {
  it('Imports and re-maps component dependencies if there are any duplicates', async () => {
    const result = await generator.generateComponent(componentJSON)
    const tsFile = findFileByType(result.files, TS_FILE)
    const htmlFile = findFileByType(result.files, HTML_FILE)

    expect(tsFile).toBeDefined()
    expect(htmlFile).toBeDefined()
    expect(htmlFile.content).toContain(`[tokens]="tokens" [components]="components"`)
    expect(tsFile.content).toContain(`import { tokens, components } from 'react-ui'`)
    expect(tsFile.content).toContain(`tokens = tokens`)
    expect(tsFile.content).toContain(`components = components`)
    expect(tsFile.content).not.toContain(`antdCSS = antdCSS`)
  })
})

'''
'''--- packages/teleport-component-generator-angular/__tests__/integration/component-repeat.ts ---
import { createAngularComponentGenerator } from '../../src'
import { GeneratedFile } from '@teleporthq/teleport-types'

import {
  component,
  definition,
  repeatNode,
  dynamicNode,
  elementNode,
} from '@teleporthq/teleport-uidl-builders'

const TS_FILE = 'ts'
const HTML_FILE = 'html'
const findFileByType = (files: GeneratedFile[], type: string = TS_FILE) =>
  files.find((file) => file.fileType === type)

const generator = createAngularComponentGenerator()

const uidl = component(
  'Repeat Component',
  elementNode('container', {}, [
    repeatNode(
      elementNode('div', {}, [dynamicNode('local', 'item')]),
      dynamicNode('prop', 'items'),
      {
        useIndex: true,
      }
    ),
  ]),
  { items: definition('array', ['hello', 'world']) },
  {}
)

const uidlWithoutIndex = component(
  'Repeat Component',
  elementNode('container', {}, [
    repeatNode(
      elementNode('div', {}, [dynamicNode('local', 'item')]),
      dynamicNode('prop', 'items'),
      {}
    ),
  ]),
  { items: definition('array', ['hello', 'world']) },
  {}
)

describe('Component with repeat node type', () => {
  it('renders code that contains *ngFor and adds index', async () => {
    const result = await generator.generateComponent(uidl)
    const tsFile = findFileByType(result.files, TS_FILE)
    const htmlFile = findFileByType(result.files, HTML_FILE)

    expect(result.files.length).toBe(2)
    expect(tsFile).toBeDefined()
    expect(htmlFile).toBeDefined()
    expect(tsFile.content).toContain(`@Input()`)
    expect(tsFile.content).toContain(`items: unknown = ['hello', 'world']`)
    expect(htmlFile.content).toContain(`*ngFor="let item of items; index as index"`)
  })

  it('renders code that contains *ngFor without index', async () => {
    const result = await generator.generateComponent(uidlWithoutIndex)
    const tsFile = findFileByType(result.files, TS_FILE)
    const htmlFile = findFileByType(result.files, HTML_FILE)

    expect(result.files.length).toBe(2)
    expect(tsFile).toBeDefined()
    expect(htmlFile).toBeDefined()
    expect(tsFile.content).toContain(`@Input()`)
    expect(tsFile.content).toContain(`items: unknown = ['hello', 'world']`)
    expect(htmlFile.content).toContain(`*ngFor="let item of items"`)
  })
})

'''
'''--- packages/teleport-component-generator-angular/__tests__/integration/component-style.ts ---
import ComponentWithNestedStyle from './component-with-nested-styles.json'

import { createAngularComponentGenerator } from '../../src/index'
import { ComponentUIDL, GeneratedFile } from '@teleporthq/teleport-types'
import { component, elementNode, dynamicNode, staticNode } from '@teleporthq/teleport-uidl-builders'

const ComponentWithValidStyle: ComponentUIDL = component(
  'ComponentWithAttrProp',
  elementNode('container', {}, [], null, {
    flexDirection: dynamicNode('prop', 'direction'),
    height: dynamicNode('prop', 'config.height'),
    alignSelf: staticNode('center'),
  }),
  {
    direction: {
      type: 'string',
      defaultValue: 'row',
    },
    config: {
      type: 'object',
      defaultValue: {
        height: 32,
      },
    },
  },
  {}
)

const TS_FILE = 'ts'
const CSS_FILE = 'css'
const HTML_FILE = 'html'
const findFileByType = (files: GeneratedFile[], type: string = TS_FILE) =>
  files.find((file) => file.fileType === type)

describe('Styles in Angular Component Generator', () => {
  const generator = createAngularComponentGenerator()

  it('Adds dynamic styles to the tempalte', async () => {
    const result = await generator.generateComponent(ComponentWithValidStyle)
    const tsFile = findFileByType(result.files, TS_FILE)
    const htmlFile = findFileByType(result.files, HTML_FILE)
    const cssFile = findFileByType(result.files, CSS_FILE)

    expect(result.files.length).toBe(3)
    expect(tsFile).toBeDefined()
    expect(cssFile).toBeDefined()
    expect(htmlFile).toBeDefined()
    expect(tsFile.content).toContain(`@Input()`)
    expect(tsFile.content).toContain(`direction: string = 'row'`)
    expect(tsFile.content).toContain(`config: unknown =`)
    expect(htmlFile.content).toContain(
      `[ngStyle]="{flexDirection: direction, height: config.height}"`
    )
    expect(htmlFile.content).toContain(`class="component-with-attr-prop-container"`)
    expect(cssFile.content).toContain(`.component-with-attr-prop-container {`)
    expect(cssFile.content).toContain(`align-self: center;`)
  })

  it('Generates nested styles in css', async () => {
    const result = generator.generateComponent(ComponentWithNestedStyle as ComponentUIDL)

    await expect(result).rejects.toThrow()
  })
})

'''
'''--- packages/teleport-component-generator-angular/__tests__/integration/component-with-nested-styles.json ---
{
  "name": "ComponentWithAttrProp",
  "propDefinitions": {
    "direction": {
      "type": "string",
      "defaultValue": "row"
    }
  },
  "node": {
    "type": "element",
    "content": {
      "elementType": "container",
      "style": {
        "flexDirection": {
          "type": "dynamic",
          "content": {
            "referenceType": "prop",
            "id": "direction"
          }
        },
        "@media (max-width: 835px)": {
          "type": "nested-style",
          "content": {
            "alignSelf": {
              "type": "static",
              "content": "inherit"
            }
          }
        },
        "alignSelf": {
          "type": "static",
          "content": "center"
        },
        "@media (max-width: 640px)": {
          "type": "nested-style",
            "content": {
              "alignSelf": {
                "type": "static",
                "content": "left"
              }
          }
        },
        "@media (max-width: 634px)": {
          "type": "nested-style",
          "content": {
            "alignSelf": {
              "type": "static",
              "content": "right"
            }
          }
        }
      },
      "children": []
    }
  }
}
'''
'''--- packages/teleport-component-generator-angular/__tests__/integration/component-with-smilar-element-name-depependencies.json ---
{
    "name": "App",
    "importDefinitions": {
      "tokens": {
        "type": "package",
        "path": "react-ui",
        "version": "1.0.0-beta.26",
        "meta": {
          "namedImport": true
        }
      },
      "components": {
        "path": "react-ui",
        "type": "package",
        "version": "1.0.0-beta.26",
        "meta": {
          "namedImport": true
        }
      },
      "antdCSS": {
        "path": "antd/dist/antd.css",
        "type": "package",
        "version": "4.5.1",
        "meta": {
          "importJustPath": true
        }
      }
    },
    "node": {
      "type": "element",
      "content": {
        "semanticType": "ThemeProvider",
        "elementType": "component",
        "attrs": {
          "tokens": {
            "type": "import",
            "content": {
              "id": "tokens"
            }
          },
          "components": {
            "type": "import",
            "content": {
              "id": "components"
            }
          }
        },
        "dependency": {
          "type": "package",
          "path": "react-ui",
          "version": "1.0.0-beta.26",
          "meta": {
            "namedImport": true
          }
        },
        "children": [
          {
            "type": "element",
            "content": {
              "semanticType": "Button",
              "elementType": "component",
              "attrs": {
                "variant": "primary"
              },
              "children": ["Button from Chakra"],
              "dependency": {
                "type": "package",
                "path": "react-ui",
                "version": "1.0.0-beta.26",
                "meta": {
                  "namedImport": true
                }
              }
            }
          },
          {
            "type": "element",
            "content": {
              "semanticType": "Avatar",
              "elementType": "component",
              "attrs": {
                "size": "xlarge",
                "src": "https://github.com/sameen-shi.png"
              },
              "dependency": {
                "type": "package",
                "path": "react-ui",
                "version": "1.0.0-beta.26",
                "meta": {
                  "namedImport": true
                }
              }
            }
          },
          {
            "type": "element",
            "content": {
              "semanticType": "Button",
              "elementType": "component",
              "attrs": {
                "type": "primary"
              },
              "children": ["Button from ANTD"],
              "dependency": {
                "type": "package",
                "path": "antd",
                "version": "0.8.0",
                "meta": {
                  "namedImport": true
                }
              }
            }
          }
        ]
      }
    }
  }
'''
'''--- packages/teleport-component-generator-angular/package.json ---
{
  "name": "@teleporthq/teleport-component-generator-angular",
  "version": "0.29.2",
  "description": "Component generator customization, capable of creating Angular components",
  "author": "teleportHQ",
  "homepage": "https://teleporthq.io/",
  "license": "MIT",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "publishConfig": {
    "access": "public"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-component-generator": "^0.29.2",
    "@teleporthq/teleport-plugin-angular-base-component": "^0.29.0",
    "@teleporthq/teleport-plugin-css": "^0.29.0",
    "@teleporthq/teleport-plugin-import-statements": "^0.29.0",
    "@teleporthq/teleport-postprocessor-prettier-html": "^0.29.0",
    "@teleporthq/teleport-postprocessor-prettier-ts": "^0.29.0",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-component-generator-angular/src/angular-mapping.ts ---
export const AngularMapping = {
  elements: {},
  events: {},
  attributes: {},
}

'''
'''--- packages/teleport-component-generator-angular/src/index.ts ---
import { createComponentGenerator } from '@teleporthq/teleport-component-generator'

import angularComponentPlugin from '@teleporthq/teleport-plugin-angular-base-component'
import { createCSSPlugin } from '@teleporthq/teleport-plugin-css'
import { createImportPlugin } from '@teleporthq/teleport-plugin-import-statements'
import prettierTS from '@teleporthq/teleport-postprocessor-prettier-ts'
import prettierHTML from '@teleporthq/teleport-postprocessor-prettier-html'

import { AngularMapping } from './angular-mapping'
import {
  ComponentGenerator,
  FileType,
  ComponentGeneratorInstance,
  GeneratorFactoryParams,
} from '@teleporthq/teleport-types'

const importStatementsPlugin = createImportPlugin({ fileType: FileType.TS })
const stylePlugin = createCSSPlugin({
  forceScoping: true,
  inlineStyleAttributeKey: '[ngStyle]',
  declareDependency: 'decorator',
  dynamicVariantPrefix: '[ngClass]',
})

const createAngularComponentGenerator: ComponentGeneratorInstance = ({
  mappings = [],
  plugins = [],
  postprocessors = [],
}: GeneratorFactoryParams = {}): ComponentGenerator => {
  const generator = createComponentGenerator()

  generator.addMapping(AngularMapping)
  mappings.forEach((mapping) => generator.addMapping(mapping))

  generator.addPlugin(angularComponentPlugin)
  generator.addPlugin(stylePlugin)
  plugins.forEach((plugin) => generator.addPlugin(plugin))
  generator.addPlugin(importStatementsPlugin)

  generator.addPostProcessor(prettierTS)
  generator.addPostProcessor(prettierHTML)
  postprocessors.forEach((postprocessor) => generator.addPostProcessor(postprocessor))

  return generator
}

export { createAngularComponentGenerator, AngularMapping }

'''
'''--- packages/teleport-component-generator-angular/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-component-generator-html/README.md ---
# teleport-component-generator-html

Component generator customization, capable of creating Stencil components

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-component-generator-html
```
or
```bash
yarn add @teleporthq/teleport-component-generator-html
```

## Usage
```javascript
import { createHTMLComponentGenerator } from '@teleporthq/teleport-component-generator-html'

const htmlGenerator = createHTMLComponentGenerator(')

const result = await htmlGenerator.generateComponent(uidl)
```

'''
'''--- packages/teleport-component-generator-html/__tests__/end2end/index.ts ---
// @ts-ignore
import uidlSampleJSON from '../../../../examples/test-samples/component-html.json'
import { component, elementNode, dynamicNode, staticNode } from '@teleporthq/teleport-uidl-builders'
import { FileType, GeneratedFile } from '@teleporthq/teleport-types'
import { createHTMLComponentGenerator } from '../../src'

const findFileByType = (files: GeneratedFile[], type: string = 'js') =>
  files.find((file) => file.fileType === type)

describe('HTML Component Generator', () => {
  const generator = createHTMLComponentGenerator()

  it('should throw error when externals are not passed and the comp uses dependencies', async () => {
    const result = generator.generateComponent(uidlSampleJSON)
    await expect(result).rejects.toThrow(Error)
  })

  it('should return the files containing the code as string', async () => {
    generator.addExternalComponents({
      externals: {
        sample: component(
          'Sample',
          elementNode(
            'container',
            {},
            [staticNode('Hello'), dynamicNode('prop', 'heading')],
            null,
            {
              width: staticNode('100px'),
            }
          ),
          { heading: { type: 'string', defaultValue: 'TeleportHQ' } }
        ),
      },
    })

    const { files } = await generator.generateComponent(uidlSampleJSON)
    const jsFile = findFileByType(files, FileType.HTML)
    const cssFile = findFileByType(files, FileType.CSS)

    expect(jsFile).toBeDefined()
    expect(files.length).toBe(2)
    expect(jsFile.content).toContain('./navbar.css')
    expect(jsFile.content).toContain('<div class="sample-container">')
    expect(cssFile.content).toContain(`.sample-container {`)
  })
})

'''
'''--- packages/teleport-component-generator-html/package.json ---
{
  "name": "@teleporthq/teleport-component-generator-html",
  "version": "0.29.2",
  "description": "Component generator customization, capable of creating plain html",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "types": "dist/cjs/index.d.ts",
  "module": "dist/esm/index.js",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-component-generator": "^0.29.2",
    "@teleporthq/teleport-plugin-css": "^0.29.0",
    "@teleporthq/teleport-plugin-html-base-component": "^0.29.2",
    "@teleporthq/teleport-plugin-import-statements-html": "^0.29.0",
    "@teleporthq/teleport-postprocessor-prettier-html": "^0.29.0",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  }
}

'''
'''--- packages/teleport-component-generator-html/src/index.ts ---
import { createCSSPlugin } from '@teleporthq/teleport-plugin-css'
import { createHTMLBasePlugin } from '@teleporthq/teleport-plugin-html-base-component'
import importStatementsPlugin from '@teleporthq/teleport-plugin-import-statements-html'
import prettierHTML from '@teleporthq/teleport-postprocessor-prettier-html'
import {
  HTMLComponentGeneratorInstance,
  HTMLComponentGenerator,
  ComponentUIDL,
  GeneratorFactoryParams,
  GeneratorOptions,
} from '@teleporthq/teleport-types'
import { createComponentGenerator } from '@teleporthq/teleport-component-generator'
import { StringUtils } from '@teleporthq/teleport-shared'
import { Parser } from '@teleporthq/teleport-uidl-validator'
import { Resolver } from '@teleporthq/teleport-uidl-resolver'
import { PlainHTMLMapping } from './plain-html-mapping'

const createHTMLComponentGenerator: HTMLComponentGeneratorInstance = ({
  mappings = [],
  plugins = [],
  postprocessors = [],
}: GeneratorFactoryParams = {}): HTMLComponentGenerator => {
  const generator = createComponentGenerator()
  const { htmlComponentPlugin, addExternals } = createHTMLBasePlugin()
  const resolver = new Resolver()
  resolver.addMapping(PlainHTMLMapping)
  mappings.forEach((mapping) => resolver.addMapping(mapping))

  Object.defineProperty(generator, 'addExternalComponents', {
    value: (params: {
      externals: Record<string, ComponentUIDL>
      skipValidation?: boolean
      assets?: GeneratorOptions['assets']
    }) => {
      const { externals = {}, skipValidation = false, assets = {} } = params
      addExternals(
        Object.keys(externals).reduce((acc: Record<string, ComponentUIDL>, ext) => {
          const componentUIDL = skipValidation
            ? externals[ext]
            : Parser.parseComponentJSON(externals[ext] as unknown as Record<string, unknown>)
          const resolvedUIDL = resolver.resolveUIDL(componentUIDL, {
            assets,
          })
          acc[StringUtils.dashCaseToUpperCamelCase(ext)] = resolvedUIDL
          return acc
        }, {}),
        plugins
      )
    },
  })

  generator.addPlugin(htmlComponentPlugin)
  generator.addPlugin(
    createCSSPlugin({
      templateChunkName: 'html-chunk',
      declareDependency: 'import',
      forceScoping: true,
      templateStyle: 'html',
      staticPropReferences: true,
    })
  )

  plugins.forEach((plugin) => generator.addPlugin(plugin))
  mappings.forEach((mapping) => generator.addMapping(mapping))
  generator.addMapping(PlainHTMLMapping)

  generator.addPlugin(importStatementsPlugin)

  postprocessors.forEach((postProcessor) => generator.addPostProcessor(postProcessor))
  generator.addPostProcessor(prettierHTML)

  return generator as HTMLComponentGenerator
}

export { createHTMLComponentGenerator, PlainHTMLMapping }

'''
'''--- packages/teleport-component-generator-html/src/plain-html-mapping.ts ---
import { HTMLMapping } from '@teleporthq/teleport-uidl-resolver'
import { Mapping } from '@teleporthq/teleport-types'

export const PlainHTMLMapping: Mapping = {
  ...HTMLMapping,
  elements: {
    ...HTMLMapping.elements,
    navlink: {
      elementType: 'a',
      attrs: {
        href: { type: 'dynamic', content: { referenceType: 'attr', id: 'transitionTo' } },
      },
    },
    'html-node': {
      elementType: 'dangerous-html',
      dependency: {
        type: 'package',
        path: 'dangerous-html',
        version: '0.1.13',
        meta: {
          importJustPath: true,
          importAlias: 'https://unpkg.com/dangerous-html/dist/default/lib.umd.js',
        },
      },
    },
    'lottie-node': {
      elementType: 'lottie-player',
      dependency: {
        type: 'package',
        path: '@lottiefiles/lottie-player',
        version: '1.5.7',
        meta: {
          importJustPath: true,
          importAlias: 'https://unpkg.com/@lottiefiles/lottie-player@1.6.0/dist/lottie-player.js',
        },
      },
    },
  },
  illegalClassNames: [],
}

'''
'''--- packages/teleport-component-generator-html/tsconfig.json ---
{
    "extends": "../../tsconfig.json",
    "compilerOptions": {
      "outDir": "dist/esm"
    },
    "include": [
      "./src"
    ]
}
'''
'''--- packages/teleport-component-generator-react/README.md ---
# teleport-component-generator-react

Component generator customization, capable of creating React components with a number of different style flavors.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-component-generator-react
```
or
```bash
yarn add @teleporthq/teleport-component-generator-react
```

## Usage
```javascript
import { createReactComponentGenerator, ReactStyleVariation } from '@teleporthq/teleport-component-generator-react'

// other style options: "CSS", "InlineStyles", "StyledComponents", "StyledJSX", "ReactJSS"
const reactGenerator = createReactComponentGenerator(ReactStyleVariation.CSSModules)

const result = await reactGenerator.generateComponent(uidl)
```

'''
'''--- packages/teleport-component-generator-react/__tests__/end2end/index.ts ---
// @ts-ignore
import uidlSampleJSON from '../../../../examples/test-samples/component-sample.json'
// @ts-ignore
import invalidUidlSampleJSON from '../../../../examples/test-samples/component-invalid-sample.json'

import { createReactComponentGenerator } from '../../src'
import { ComponentUIDL, GeneratedFile, ReactStyleVariation } from '@teleporthq/teleport-types'

const uidlSample = uidlSampleJSON as ComponentUIDL
const invalidUidlSample = invalidUidlSampleJSON as ComponentUIDL
const JS_FILE = 'js'
const findFileByType = (files: GeneratedFile[], type: string = JS_FILE) =>
  files.find((file) => file.fileType === type)

describe('React Component Generator', () => {
  describe('with CSS Modules', () => {
    const generator = createReactComponentGenerator({
      variation: ReactStyleVariation.CSSModules,
    })

    it('should return the files containing the code as string', async () => {
      const result = await generator.generateComponent(uidlSample)
      const jsFile = findFileByType(result.files, JS_FILE)

      expect(jsFile).toBeDefined()
      expect(result.files).toBeDefined()
      expect(Array.isArray(result.files)).toBeTruthy()
      expect(result.files.length).toBeTruthy()
      expect(jsFile.content).toContain('import React')
      expect(result.dependencies).toBeDefined()
    })
  })

  describe('with JSS', () => {
    const generator = createReactComponentGenerator({
      variation: ReactStyleVariation.ReactJSS,
    })

    it('should return the files containing the code as string', async () => {
      const result = await generator.generateComponent(uidlSample)
      const jsFile = findFileByType(result.files, JS_FILE)

      expect(jsFile).toBeDefined()
      expect(result.files.length).toBe(1)
      expect(jsFile.content).toContain('import React')
      expect(result.dependencies).toBeDefined()
    })
  })

  describe('with StyledComponents', () => {
    const generator = createReactComponentGenerator({
      variation: ReactStyleVariation.StyledComponents,
    })

    it('should return the files containing the code as string', async () => {
      const result = await generator.generateComponent(uidlSample)
      const jsFile = findFileByType(result.files, JS_FILE)

      expect(jsFile).toBeDefined()
      expect(result.files.length).toBe(1)
      expect(jsFile.content).toContain('import React')
      expect(result.dependencies).toBeDefined()
    })
  })

  describe('with InlineStyles', () => {
    const generator = createReactComponentGenerator()

    it('should return the files containing the code as string', async () => {
      const result = await generator.generateComponent(uidlSample)
      const jsFile = findFileByType(result.files, JS_FILE)

      expect(jsFile).toBeDefined()
      expect(result.files.length).toBe(1)
      expect(jsFile.content).toContain('import React')
      expect(result.dependencies).toBeDefined()
    })
  })

  describe('with Custom Mapping', () => {
    const mapping = { elements: { container: { elementType: 'fakediv' } } }
    const generator = createReactComponentGenerator({
      variation: ReactStyleVariation.InlineStyles,
      mappings: [mapping],
    })

    it('should render <fakediv> tags', async () => {
      const result = await generator.generateComponent(uidlSample)
      const jsFile = findFileByType(result.files, JS_FILE)

      expect(jsFile).toBeDefined()
      expect(result.files.length).toBe(1)
      expect(jsFile.content).toContain('<fakediv')
      expect(result.dependencies).toBeDefined()
    })
  })
})

describe('React Component Validator', () => {
  const generator = createReactComponentGenerator({
    variation: ReactStyleVariation.CSSModules,
  })

  it('works with valid UIDL sample', async () => {
    const result = await generator.generateComponent(uidlSample)
    const jsFile = findFileByType(result.files, JS_FILE)

    expect(jsFile).toBeDefined()
    expect(result.files.length).toBe(1)
    expect(jsFile.content).toContain('import React')
    expect(result.dependencies).toBeDefined()
  })

  it('Additational fields are removed by decoders and uidl is used to generate', async () => {
    const result = await generator.generateComponent(invalidUidlSample)
    const jsFile = findFileByType(result.files, JS_FILE)

    expect(jsFile).toBeDefined()
    expect(result.files.length).toBe(1)
    expect(jsFile.content).toContain('import React')
    expect(result.dependencies).toBeDefined()
  })

  it('works when validation step is skiped', async () => {
    const options = { skipValidation: true }
    const result = await generator.generateComponent(invalidUidlSample, options)
    const jsFile = findFileByType(result.files, JS_FILE)

    expect(jsFile).toBeDefined()
    expect(result.files.length).toBe(1)
    expect(jsFile.content).toContain('import React')
    expect(result.dependencies).toBeDefined()
  })
})

'''
'''--- packages/teleport-component-generator-react/__tests__/integration/component-attrs.ts ---
// @ts-ignore-next-line
import ComponentWithOldFormatAttributesJSON from './component-with-old-format-attributes.json'

import { createReactComponentGenerator } from '../../src'
import { GeneratedFile } from '@teleporthq/teleport-types'

import {
  component,
  definition,
  repeatNode,
  dynamicNode,
  elementNode,
  staticNode,
} from '@teleporthq/teleport-uidl-builders'

const uidl = component(
  'ComponentWithAttrProp',
  elementNode('container', {}, [
    repeatNode(
      elementNode('div', {}, [
        elementNode(
          'div',
          {
            test: dynamicNode('local', 'index'),
            for: staticNode('mappedTest'),
            'data-test': dynamicNode('prop', 'test'),
            'data-inner-value': dynamicNode('prop', 'content.heading'),
          },
          [dynamicNode('local', 'item')]
        ),
      ]),
      dynamicNode('prop', 'items'),
      {
        useIndex: true,
      }
    ),
  ]),
  {
    items: definition('object', { test: '123' }),
    test: definition('string', '123'),
    content: definition('object', { heading: 'Hello World' }),
  },
  {}
)

const JS_FILE = 'js'
const findFileByType = (files: GeneratedFile[], type: string = JS_FILE) =>
  files.find((file) => file.fileType === type)
const generator = createReactComponentGenerator()

describe('React Attribute Mapping', () => {
  it('should return code with attributes mapped to React attributes', async () => {
    const result = await generator.generateComponent(uidl)
    const jsFile = findFileByType(result.files, JS_FILE)

    expect(jsFile).toBeDefined()
    expect(jsFile.content).toContain('htmlFor')

    expect(jsFile.content).not.toContain('for')
  })
})

describe('React Props in Component', () => {
  describe('supports props json declaration in attributes', () => {
    it('should add attributes on component', async () => {
      const result = await generator.generateComponent(uidl)
      const jsFile = findFileByType(result.files, JS_FILE)

      expect(jsFile).toBeDefined()
      expect(jsFile.content).toContain('props.test')
      expect(jsFile.content).toContain('props.content.heading')
    })

    it('should add attributes on component', async () => {
      const result = await generator.generateComponent(ComponentWithOldFormatAttributesJSON)
      const jsFile = findFileByType(result.files, JS_FILE)

      expect(jsFile).toBeDefined()
      expect(jsFile.content).toContain('props.test')
      expect(jsFile.content).toContain('props.content.heading')
    })

    it('should run repeat attributes and data source', async () => {
      const result = await generator.generateComponent(uidl)
      const jsFile = findFileByType(result.files, JS_FILE)

      expect(jsFile).toBeDefined()
      expect(jsFile.content).toContain('key={index}>')
      expect(jsFile.content).toContain('test={index}')
    })
  })
})

'''
'''--- packages/teleport-component-generator-react/__tests__/integration/component-conditional.ts ---
import { createReactComponentGenerator } from '../../src'
import { GeneratedFile } from '@teleporthq/teleport-types'
import {
  component,
  definition,
  staticNode,
  dynamicNode,
  elementNode,
  conditionalNode,
} from '@teleporthq/teleport-uidl-builders'

const generator = createReactComponentGenerator()

const JS_FILE = 'js'
const findFileByType = (files: GeneratedFile[], type: string = JS_FILE) =>
  files.find((file) => file.fileType === type)

const uidl = component(
  'Conditional Component',
  elementNode('container', {}, [
    conditionalNode(
      dynamicNode('state', 'isVisible'),
      elementNode('text', {}, [staticNode('Now you see me!')]),
      true
    ),
    conditionalNode(
      dynamicNode('state', 'isShareable'),
      elementNode('text', {}, [staticNode('I am not shareable!')]),
      false
    ),
  ]),
  {},
  { isVisible: definition('boolean', true), isShareable: definition('boolean', false) }
)

describe('Component with conditional node type', () => {
  it('renders code with condition if value on state is true', async () => {
    const result = await generator.generateComponent(uidl)
    const jsFile = findFileByType(result.files, JS_FILE)

    expect(jsFile).toBeDefined()
    expect(jsFile.content).toContain('{isVisible && <span>Now you see me!</span>}')
  })
  it('renders code with !condition if value on state is false', async () => {
    const result = await generator.generateComponent(uidl)
    const jsFile = findFileByType(result.files, JS_FILE)

    expect(jsFile).toBeDefined()
    expect(jsFile.content).toContain('{!isShareable && <span>I am not shareable!</span>}')
  })
})

'''
'''--- packages/teleport-component-generator-react/__tests__/integration/component-dependency.ts ---
import { createReactComponentGenerator } from '../../src'
import { GeneratedFile } from '@teleporthq/teleport-types'
import componentJSON from './component-with-smilar-element-name-depependencies.json'

import {
  component,
  definition,
  elementNode,
  componentDependency,
} from '@teleporthq/teleport-uidl-builders'

const generator = createReactComponentGenerator()

const JS_FILE = 'js'
const findFileByType = (files: GeneratedFile[], type: string = JS_FILE) =>
  files.find((file) => file.fileType === type)

const dependencySample = (
  name: string,
  type: string,
  path: string,
  version: string,
  option: object
) => {
  return { name, type, path, version, option }
}

const uidl = (dependency) => {
  return component(
    'Component with dependencies',
    elementNode(
      dependency.name,
      {},
      [],
      componentDependency(dependency.type, dependency.path, dependency.version, dependency.option)
    ),
    {},
    { title: definition('boolean', true) }
  )
}

describe('Component with dependency ', () => {
  describe('from package.json', () => {
    it('renders code with imported package', async () => {
      const result = await generator.generateComponent(
        uidl(
          dependencySample('ReactDatepicker', 'package', 'react-datepicker', '', {
            namedImport: false,
          })
        )
      )
      const jsFile = findFileByType(result.files, JS_FILE)

      expect(jsFile).toBeDefined()
      expect(jsFile.content).toContain("import ReactDatepicker from 'react-datepicker'")
    })

    it('Remaps elementName when to elements have same name but different dependencies', async () => {
      const result = await generator.generateComponent(componentJSON)
      const jsFile = findFileByType(result.files, JS_FILE)

      expect(jsFile).toBeDefined()
      expect(jsFile.content).toContain(
        `import { ThemeProvider, Button, Avatar, tokens, components } from 'react-ui`
      )
      expect(jsFile.content).toContain(`import { Button as AntdButton } from 'antd'`)
      expect(jsFile.content).toContain(`import 'antd/dist/antd.css'`)
    })

    it('renders code with named import ', async () => {
      const result = await generator.generateComponent(
        uidl(
          dependencySample('ReactDatepicker', 'package', 'react-datepicker', '', {
            namedImport: true,
          })
        )
      )
      const jsFile = findFileByType(result.files, JS_FILE)
      expect(jsFile).toBeDefined()
      expect(jsFile.content).toContain("import { ReactDatepicker } from 'react-datepicker'")
    })

    it('Throws error if dependency option is not known during validation', async () => {
      const result = await generator.generateComponent(
        uidl(
          dependencySample('ReactDatepicker', 'package', 'react-datepicker', '', {
            test: true,
          })
        )
      )
      const jsFile = findFileByType(result.files, JS_FILE)
      expect(jsFile).toBeDefined()
      expect(jsFile.content).not.toContain("import { ReactDatepicker } from 'react-datepicker'")
    })

    it('fails to render code if dependency path is not valid', async () => {
      const result = await generator.generateComponent(
        uidl(
          dependencySample('ReactDatepicker', 'test', 'react-datepicker', '', {
            namedImport: true,
          })
        ),
        {
          skipValidation: true,
        }
      )
      const jsFile = findFileByType(result.files, JS_FILE)
      expect(jsFile).toBeDefined()
      expect(jsFile.content).not.toContain("import { ReactDatepicker } from 'react-datepicker'")
    })

    it('renders code with original name', async () => {
      const result = await generator.generateComponent(
        uidl(
          dependencySample('Router', 'package', 'react-router', '', {
            namedImport: true,
            originalName: 'BrowserRouter',
          })
        )
      )
      const jsFile = findFileByType(result.files, JS_FILE)

      expect(jsFile).toBeDefined()
      expect(jsFile.content).toContain("import { BrowserRouter as Router } from 'react-router'")
    })
  })

  describe('from local', () => {
    it('renders code with imported package', async () => {
      const result = await generator.generateComponent(
        uidl(
          dependencySample('ReactDatepicker', 'local', '../react-datepicker', '', {
            namedImport: false,
          })
        )
      )
      const jsFile = findFileByType(result.files, JS_FILE)

      expect(jsFile).toBeDefined()
      expect(jsFile.content).toContain("import ReactDatepicker from '../react-datepicker'")
    })

    it('renders code with named import ', async () => {
      const result = await generator.generateComponent(
        uidl(
          dependencySample('ReactDatepicker', 'local', '../react-datepicker', '', {
            namedImport: true,
          })
        )
      )
      const jsFile = findFileByType(result.files, JS_FILE)
      expect(jsFile).toBeDefined()
      expect(jsFile.content).toContain("import { ReactDatepicker } from '../react-datepicker'")
    })

    it('renders code with original name', async () => {
      const result = await generator.generateComponent(
        uidl(
          dependencySample('Router', 'local', 'react-router', '', {
            namedImport: true,
            originalName: 'BrowserRouter',
          })
        )
      )
      const jsFile = findFileByType(result.files, JS_FILE)

      expect(jsFile).toBeDefined()
      expect(jsFile.content).toContain("import { BrowserRouter as Router } from 'react-router'")
    })
  })

  describe('from library', () => {
    it('renders code with named import ', async () => {
      const result = await generator.generateComponent(
        uidl(
          dependencySample('Card', 'library', 'react-material', '', {
            namedImport: true,
          })
        )
      )
      const jsFile = findFileByType(result.files, JS_FILE)
      expect(jsFile).toBeDefined()
      expect(jsFile.content).toContain("import { Card } from 'react-material'")
    })
  })
})

'''
'''--- packages/teleport-component-generator-react/__tests__/integration/component-import-definitions.ts ---
import { createReactComponentGenerator } from '../../src'
import { GeneratedFile, FileType } from '@teleporthq/teleport-types'
import componentJSON from './component-with-import-definitions.json'

const findFileByType = (files: GeneratedFile[], type: string = FileType.JS) =>
  files.find((file) => file.fileType === type)

describe('Generates component and uses importDefinitions', () => {
  it('Generates component and uses importDefinitions', async () => {
    const generator = createReactComponentGenerator()
    const { files } = await generator.generateComponent(componentJSON)
    const jsFile = findFileByType(files, FileType.JS)

    expect(jsFile.content).toContain(
      `import { ThemeProvider, Button, theme as defaultTheme } from '@chakra-ui/core'`
    )
    expect(jsFile.content).toContain(`<ThemeProvider theme={defaultTheme}>`)
  })
})

'''
'''--- packages/teleport-component-generator-react/__tests__/integration/component-referenced-styles.ts ---
import { createReactComponentGenerator } from '../../src'
import { component, elementNode, staticNode } from '@teleporthq/teleport-uidl-builders'
import {
  UIDLReferencedStyles,
  GeneratedFile,
  FileType,
  ReactStyleVariation,
  GeneratorOptions,
} from '@teleporthq/teleport-types'

const findFileByType = (files: GeneratedFile[], type: string = FileType.JS) =>
  files.find((file) => file.fileType === type)

describe('Generates media, pseudo and normal styles', () => {
  const referencedStyles: UIDLReferencedStyles = {
    '1234567890': {
      type: 'style-map',
      content: {
        mapType: 'inlined',
        conditions: [{ conditionType: 'screen-size', maxWidth: 991 }],
        styles: {
          display: staticNode('none'),
        },
      },
    },
  }

  const style = {
    width: staticNode('100px'),
  }
  const uidl = component(
    'MyComponent',
    elementNode('container', null, [staticNode('Hello !!')], null, style, null, referencedStyles)
  )

  it('Generates styles using CSS Modules', async () => {
    const generator = createReactComponentGenerator()
    const { files } = await generator.generateComponent(uidl)
    const cssFile = findFileByType(files, FileType.CSS)
    const jsFile = findFileByType(files, FileType.JS)

    expect(cssFile).toBeDefined()
    expect(cssFile.content).toContain('@media(max-width: 991px)')
    expect(cssFile.content).toContain('width: 100px')

    expect(jsFile).toBeDefined()
    expect(jsFile.content).toContain(`className={styles['container']}`)
    expect(jsFile.content).toContain(`import styles from './my-component.module.css`)
  })

  it('Generates styles using CSS', async () => {
    const generator = createReactComponentGenerator({
      variation: ReactStyleVariation.CSS,
    })
    const { files } = await generator.generateComponent(uidl)
    const cssFile = findFileByType(files, FileType.CSS)
    const jsFile = findFileByType(files, FileType.JS)

    expect(cssFile).toBeDefined()
    expect(cssFile.content).toContain('@media(max-width: 991px)')
    expect(cssFile.content).toContain('width: 100px')

    expect(jsFile).toBeDefined()
    expect(jsFile.content).toContain(`className="my-component-container"`)
    expect(jsFile.content).toContain(`import './my-component.css`)
  })

  it('Generates styles using Styled-Components', async () => {
    const generator = createReactComponentGenerator({
      variation: ReactStyleVariation.StyledComponents,
    })

    const { files } = await generator.generateComponent(uidl)
    const cssFile = findFileByType(files, FileType.CSS)
    const jsFile = findFileByType(files, FileType.JS)

    expect(cssFile).not.toBeDefined()
    expect(jsFile).toBeDefined()
    expect(jsFile.content).toContain(`<Container>Hello !!</Container>`)
    expect(jsFile.content).toContain(`const Container = styled('div')`)
    expect(jsFile.content).toContain(`width: '100px'`)
    expect(jsFile.content).toContain(`display: 'none'`)
  })

  it('Generates styles using ReactJSS', async () => {
    const generator = createReactComponentGenerator({
      variation: ReactStyleVariation.ReactJSS,
    })
    const { files } = await generator.generateComponent(uidl)
    const cssFile = findFileByType(files, FileType.CSS)
    const jsFile = findFileByType(files, FileType.JS)

    expect(cssFile).not.toBeDefined()
    expect(jsFile).toBeDefined()

    expect(jsFile.content).toContain(`const classes = useStyles()`)
    expect(jsFile.content).toContain(`className={classes['container']}`)
    expect(jsFile.content).toContain(`container: {`)
    expect(jsFile.content).toContain(`width: '100px'`)
    expect(jsFile.content).toContain(`display: 'none'`)
  })

  it('Generates styles using StyledJSX', async () => {
    const generator = createReactComponentGenerator({
      variation: ReactStyleVariation.StyledJSX,
    })
    const { files } = await generator.generateComponent(uidl)
    const cssFile = findFileByType(files, FileType.CSS)
    const jsFile = findFileByType(files, FileType.JS)

    expect(cssFile).not.toBeDefined()
    expect(jsFile).toBeDefined()
    expect(jsFile.content).toContain(`className`)
    expect(jsFile.content).toContain(`container {`)
    expect(jsFile.content).toContain(`width: 100px`)
    expect(jsFile.content).toContain(`display: none`)
  })
})

describe('Add referenced styles even when direct styles are not present on node', () => {
  const referencedStyles: UIDLReferencedStyles = {
    '1234567890': {
      type: 'style-map',
      content: {
        mapType: 'inlined',
        conditions: [{ conditionType: 'screen-size', maxWidth: 991 }],
        styles: {
          display: staticNode('none'),
        },
      },
    },
  }

  const uidl = component(
    'MyComponent',
    elementNode('container', null, [staticNode('Hello !!')], null, null, null, referencedStyles)
  )

  it('Generates styles using CSS Modules', async () => {
    const generator = createReactComponentGenerator()
    const { files } = await generator.generateComponent(uidl)
    const cssFile = findFileByType(files, FileType.CSS)
    const jsFile = findFileByType(files, FileType.JS)

    expect(cssFile).toBeDefined()
    expect(cssFile.content).toContain('@media(max-width: 991px)')
    expect(cssFile.content).not.toContain('width: 100px')

    expect(jsFile).toBeDefined()
    expect(jsFile.content).toContain(`className={styles['container']}`)
    expect(jsFile.content).toContain(`import styles from './my-component.module.css`)
  })

  it('Generates styles using CSS', async () => {
    const generator = createReactComponentGenerator({
      variation: ReactStyleVariation.CSS,
    })
    const { files } = await generator.generateComponent(uidl)
    const cssFile = findFileByType(files, FileType.CSS)
    const jsFile = findFileByType(files, FileType.JS)

    expect(cssFile).toBeDefined()
    expect(cssFile.content).toContain('@media(max-width: 991px)')
    expect(cssFile.content).not.toContain('width: 100px')

    expect(jsFile).toBeDefined()
    expect(jsFile.content).toContain(`className="my-component-container"`)
    expect(jsFile.content).toContain(`import './my-component.css`)
  })

  it('Generates styles using Styled-Components', async () => {
    const generator = createReactComponentGenerator({
      variation: ReactStyleVariation.StyledComponents,
    })
    const { files } = await generator.generateComponent(uidl)
    const cssFile = findFileByType(files, FileType.CSS)
    const jsFile = findFileByType(files, FileType.JS)

    expect(cssFile).not.toBeDefined()
    expect(jsFile).toBeDefined()
    expect(jsFile.content).toContain(`<Container>Hello !!</Container>`)
    expect(jsFile.content).toContain(`const Container = styled('div')`)
    expect(jsFile.content).not.toContain(`width: '100px'`)
    expect(jsFile.content).toContain(`display: 'none'`)
  })

  it('Generates styles using ReactJSS', async () => {
    const generator = createReactComponentGenerator({
      variation: ReactStyleVariation.ReactJSS,
    })

    const { files } = await generator.generateComponent(uidl)
    const cssFile = findFileByType(files, FileType.CSS)
    const jsFile = findFileByType(files, FileType.JS)

    expect(cssFile).not.toBeDefined()
    expect(jsFile).toBeDefined()
    expect(jsFile.content).toContain(`className={classes['container']}`)
    expect(jsFile.content).toContain(`container: {`)
    expect(jsFile.content).not.toContain(`width: '100px'`)
    expect(jsFile.content).toContain(`display: 'none'`)
  })

  it('Generates styles using StyledJSX', async () => {
    const generator = createReactComponentGenerator({
      variation: ReactStyleVariation.StyledJSX,
    })
    const { files } = await generator.generateComponent(uidl)
    const cssFile = findFileByType(files, FileType.CSS)
    const jsFile = findFileByType(files, FileType.JS)

    expect(cssFile).not.toBeDefined()
    expect(jsFile).toBeDefined()
    expect(jsFile.content).toContain(`className`)
    expect(jsFile.content).toContain(`container {`)
    expect(jsFile.content).not.toContain(`width: '100px'`)
    expect(jsFile.content).toContain(`display: none`)
  })
})

describe('Throws Error when a node is using project-styles but not present in UIDL', () => {
  const styles: UIDLReferencedStyles = {
    '123456789': {
      type: 'style-map',
      content: {
        mapType: 'project-referenced',
        referenceId: '987654321',
      },
    },
  }
  const uidl = component(
    'MyComponent',
    elementNode('container', null, [], null, null, null, styles)
  )

  it('CSS Modules', async () => {
    const generator = createReactComponentGenerator()
    await expect(generator.generateComponent(uidl)).rejects.toThrow(Error)
  })

  it('CSS', async () => {
    const generator = createReactComponentGenerator({
      variation: ReactStyleVariation.CSS,
    })
    await expect(generator.generateComponent(uidl)).rejects.toThrow(Error)
  })

  it('Styled Components', async () => {
    const generator = createReactComponentGenerator({
      variation: ReactStyleVariation.StyledComponents,
    })

    await expect(generator.generateComponent(uidl)).rejects.toThrow(Error)
  })

  it('Styled JSX', async () => {
    const generator = createReactComponentGenerator({
      variation: ReactStyleVariation.StyledJSX,
    })
    await expect(generator.generateComponent(uidl)).rejects.toThrow(Error)
  })

  it('React JSS', async () => {
    const generator = createReactComponentGenerator({
      variation: ReactStyleVariation.ReactJSS,
    })
    await expect(generator.generateComponent(uidl)).rejects.toThrow(Error)
  })
})

describe('Referes from project style and adds it to the node, without any styles on the node', () => {
  const styles: UIDLReferencedStyles = {
    '123456789': {
      type: 'style-map',
      content: {
        mapType: 'project-referenced',
        referenceId: 'primaryButton',
      },
    },
  }
  const uidl = component(
    'MyComponent',
    elementNode('container', null, [staticNode('Hello')], null, null, null, styles)
  )
  const options: GeneratorOptions = {
    projectStyleSet: {
      styleSetDefinitions: {
        primaryButton: {
          type: 'reusable-project-style-map',
          content: {
            background: staticNode('blue'),
          },
        },
      },
      fileName: 'style',
      path: '../',
    },
  }

  it('CSS-Modules', async () => {
    const generator = createReactComponentGenerator({
      variation: ReactStyleVariation.CSSModules,
    })
    const cssOptions: GeneratorOptions = {
      projectStyleSet: {
        ...options.projectStyleSet,
        importFile: true,
      },
    }

    const { files } = await generator.generateComponent(uidl, cssOptions)
    const jsFile = findFileByType(files, FileType.JS)
    expect(jsFile.content).toContain(`className={projectStyles['primary-button']}`)
    expect(jsFile.content).toContain(`import projectStyles from '../style.module.css'`)
    expect(jsFile.content).not.toContain(`import styles from './my-component.module.css'`)
  })

  it('CSS', async () => {
    const generator = createReactComponentGenerator({
      variation: ReactStyleVariation.CSS,
    })
    const cssOptions: GeneratorOptions = {
      projectStyleSet: {
        ...options.projectStyleSet,
        importFile: true,
      },
    }

    const { files } = await generator.generateComponent(uidl, cssOptions)
    const jsFile = findFileByType(files, FileType.JS)

    expect(jsFile.content).toContain('className="primaryButton"')
    expect(jsFile.content).not.toContain(`import '../style.css'`)
    expect(jsFile.content).not.toContain(`import './my-component.css'`)
  })

  it('StyledComponents', async () => {
    const generator = createReactComponentGenerator({
      variation: ReactStyleVariation.StyledComponents,
    })

    const { files } = await generator.generateComponent(uidl, options)
    const jsFile = findFileByType(files, FileType.JS)

    expect(jsFile.content).toContain(`<Container projVariant="primaryButton">Hello</Container>`)
    expect(jsFile.content).toContain(`import { projectStyleVariants } from '../style'`)
    expect(jsFile.content).toContain(`const Container = styled('div')(projectStyleVariants)`)
  })

  it('Styled JSX', async () => {
    const generator = createReactComponentGenerator({
      variation: ReactStyleVariation.StyledJSX,
    })

    const { files } = await generator.generateComponent(uidl, options)
    const jsFile = findFileByType(files, FileType.JS)
    // Styled JSX is used only with NextJS, for NextJS we don't need to import anything
    expect(jsFile.content).toContain('<div className="primaryButton">')
  })

  it('React JSS', async () => {
    const generator = createReactComponentGenerator({
      variation: ReactStyleVariation.ReactJSS,
    })

    const { files } = await generator.generateComponent(uidl, options)
    const jsFile = findFileByType(files, FileType.JS)

    expect(jsFile.content).toContain(`div className={projectStyles['primaryButton']}>`)
    expect(jsFile.content).toContain(`const projectStyles = useProjectStyles()`)
    expect(jsFile.content).toContain(`import { useProjectStyles } from '../style'`)
  })
})

'''
'''--- packages/teleport-component-generator-react/__tests__/integration/component-repeat.ts ---
import { createReactComponentGenerator } from '../../src'
import { GeneratedFile } from '@teleporthq/teleport-types'

import {
  component,
  definition,
  repeatNode,
  dynamicNode,
  elementNode,
} from '@teleporthq/teleport-uidl-builders'

const JS_FILE = 'js'
const findFileByType = (files: GeneratedFile[], type: string = JS_FILE) =>
  files.find((file) => file.fileType === type)

const generator = createReactComponentGenerator()

const uidl = component(
  'Repeat Component',
  elementNode('container', {}, [
    repeatNode(
      elementNode('div', {}, [dynamicNode('local', 'item')]),
      dynamicNode('prop', 'items'),
      {
        useIndex: true,
      }
    ),
  ]),
  { items: definition('array', ['hello', 'world']) },
  {}
)

describe('Component with repeat node type', () => {
  it('renders code that contains map method', async () => {
    const result = await generator.generateComponent(uidl)
    const jsFile = findFileByType(result.files, JS_FILE)

    expect(jsFile).toBeDefined()
    expect(jsFile.content).toContain('props.items.map((item, index)')
  })
  it('renders code with map method that iterates using index', async () => {
    const result = await generator.generateComponent(uidl)
    const jsFile = findFileByType(result.files, JS_FILE)

    expect(jsFile).toBeDefined()
    expect(jsFile.content).toContain('key={index}')
  })
})

'''
'''--- packages/teleport-component-generator-react/__tests__/integration/component-slot.ts ---
import { component, staticNode, slotNode, elementNode } from '@teleporthq/teleport-uidl-builders'

import { createReactComponentGenerator } from '../../src'

const reactGenerator = createReactComponentGenerator()

describe('Component Slot Node', () => {
  describe('Simple Slot', () => {
    const uidl = component('Simple Slot', elementNode('container', {}, [slotNode()]))

    it('renders props.children in React', async () => {
      const result = await reactGenerator.generateComponent(uidl)
      const code = result.files[0].content

      expect(code).toContain('{props.children}')
    })
  })

  describe('Slot with fallback', () => {
    const uidl = component(
      'Slot Component',
      elementNode('container', {}, [slotNode(elementNode('text', {}, [staticNode('Placeholder')]))])
    )

    it('renders props.children and placeholder in React', async () => {
      const result = await reactGenerator.generateComponent(uidl)
      const code = result.files[0].content

      expect(code).toContain('{props.children || <span>Placeholder</span>}')
    })
  })

  describe('Slot with name', () => {
    const uidl = component(
      'Slot Component',
      elementNode('container', {}, [slotNode(undefined, 'slot-1')])
    )

    it('renders props.children in React', async () => {
      const result = await reactGenerator.generateComponent(uidl)
      const code = result.files[0].content

      expect(code).toContain('{props.children}')
    })
  })
})

'''
'''--- packages/teleport-component-generator-react/__tests__/integration/component-style.ts ---
// @ts-ignore-next-line
import ComponentWithInvalidStateStyles from './component-with-invalid-state-styles.json'
// @ts-ignore-next-line
import ComponentWithValidSingleStlye from './component-with-valid-single-prop-style.json'
// @ts-ignore-next-line
import ComponentWithStateReference from './component-with-valid-state-reference.json'

import { createReactComponentGenerator } from '../../src'
import {
  ComponentUIDL,
  GeneratedFile,
  FileType,
  ReactStyleVariation,
} from '@teleporthq/teleport-types'
import { staticNode, dynamicNode, component, elementNode } from '@teleporthq/teleport-uidl-builders'

const ComponentWithValidStyle: ComponentUIDL = component(
  'ComponentWithAttrProp',
  elementNode('container', {}, [], undefined, {
    flexDirection: dynamicNode('prop', 'direction'),
    height: dynamicNode('prop', 'config.height'),
    alignSelf: staticNode('center'),
  }),
  {
    direction: {
      type: 'string',
      defaultValue: 'row',
    },
    config: {
      type: 'object',
      defaultValue: {
        height: 32,
      },
    },
  },
  {}
)

const findFileByType = (files: GeneratedFile[], type: string = FileType.JS) =>
  files.find((file) => file.fileType === type)

describe('React Styles in Component', () => {
  describe('supports usage of state in styles', () => {
    it('Inline Styles should refer state in styles when state is mapped', async () => {
      const generator = createReactComponentGenerator({
        variation: ReactStyleVariation.InlineStyles,
      })
      const result = await generator.generateComponent(ComponentWithStateReference)
      const jsFile = findFileByType(result.files, FileType.JS)

      expect(jsFile).toBeDefined()
      expect(jsFile.content).toContain('display: active')
      expect(jsFile.content).toContain('height: props.config.height')
    })

    it('CSSModules should refer state in styles when state is mapped', async () => {
      const generator = createReactComponentGenerator({
        variation: ReactStyleVariation.CSSModules,
      })
      const result = await generator.generateComponent(ComponentWithStateReference)
      const jsFile = findFileByType(result.files, FileType.JS)
      const cssFile = findFileByType(result.files, FileType.CSS)

      expect(jsFile).toBeDefined()
      expect(cssFile).toBeDefined()
      expect(jsFile.content).toContain('display: active')
      expect(jsFile.content).toContain('height: props.config.height')
      expect(cssFile.content).toContain('align-self: center;')
    })

    it('Basic CSS should refer state in styles when state is mapped', async () => {
      const generator = createReactComponentGenerator({
        variation: ReactStyleVariation.CSS,
      })
      const result = await generator.generateComponent(ComponentWithStateReference)
      const jsFile = findFileByType(result.files, FileType.JS)
      const cssFile = findFileByType(result.files, FileType.CSS)

      expect(jsFile).toBeDefined()
      expect(cssFile).toBeDefined()
      expect(jsFile.content).toContain('display: active')
      expect(jsFile.content).toContain('height: props.config.height')
      expect(cssFile.content).toContain('align-self: center;')
    })

    it('JSS should through error when state is refered', async () => {
      const generator = createReactComponentGenerator({
        variation: ReactStyleVariation.ReactJSS,
      })
      try {
        await generator.generateComponent(ComponentWithStateReference)
      } catch (e) {
        expect(e.message).toContain('reactJSSComponentStyleChunksPlugin')
        expect(e.message).toContain('styleValue.content.referenceType value state')
      }
    })
  })

  describe('supports props json declaration in styles', () => {
    const generator = createReactComponentGenerator({
      variation: ReactStyleVariation.InlineStyles,
    })

    it('should add attributes on component', async () => {
      const result = await generator.generateComponent(ComponentWithValidStyle)
      const jsFile = findFileByType(result.files, FileType.JS)

      expect(jsFile).toBeDefined()
      expect(jsFile.content).toContain('props.direction')
      expect(jsFile.content).toContain(`alignSelf: 'center'`)
    })

    it('should support object props in styledjsx', async () => {
      const styledJSXGenerator = createReactComponentGenerator({
        variation: ReactStyleVariation.StyledJSX,
      })
      const result = await styledJSXGenerator.generateComponent(ComponentWithValidStyle)
      const jsFile = findFileByType(result.files, FileType.JS)

      expect(jsFile).toBeDefined()
      expect(jsFile.content).toContain(`align-self: center`)
    })

    it('should throw error when a state is being refered in generated StyledJSX ', async () => {
      const styledJSXGenerator = createReactComponentGenerator({
        variation: ReactStyleVariation.StyledJSX,
      })
      try {
        await styledJSXGenerator.generateComponent(ComponentWithInvalidStateStyles)
        expect(true).toBe(false)
      } catch (e) {
        expect(e.message).toContain(
          'Error running transformDynamicStyles in reactStyledJSXChunkPlugin'
        )
      }
    })

    it('should explicitly send prop if style is using one prop variable', async () => {
      const styledComponentsGenerator = createReactComponentGenerator({
        variation: ReactStyleVariation.StyledComponents,
      })
      const result = await styledComponentsGenerator.generateComponent(
        ComponentWithValidSingleStlye
      )
      const jsFile = findFileByType(result.files, FileType.JS)

      expect(jsFile).toBeDefined()
      expect(jsFile.content).toContain('<Container {...props}')
      expect(jsFile.content).toContain('height: props.config.height')
    })

    it('should inject props only once for styled components', async () => {
      const styledJSXGenerator = createReactComponentGenerator({
        variation: ReactStyleVariation.StyledComponents,
      })
      const result = await styledJSXGenerator.generateComponent(ComponentWithValidStyle)

      const jsFile = findFileByType(result.files, FileType.JS)
      expect(jsFile.content).toContain('<Container {...props}')
    })

    it('should throw error when a state is being refered in generated StyledComponents ', async () => {
      const styledComponentsGenerator = createReactComponentGenerator({
        variation: ReactStyleVariation.StyledComponents,
      })
      try {
        await styledComponentsGenerator.generateComponent(ComponentWithInvalidStateStyles)
        expect(true).toBe(false)
      } catch (e) {
        expect(e.message).toContain(
          'Error running transformDynamicStyles in reactStyledComponentsPlugin'
        )
      }
    })
  })

  describe('React CSS file using CSS Modules', () => {
    const generator = createReactComponentGenerator({ variation: ReactStyleVariation.CSSModules })

    it('should return code in an array of files', async () => {
      const result = await generator.generateComponent(ComponentWithValidStyle)
      const jsFile = findFileByType(result.files, FileType.JS)
      const cssFile = findFileByType(result.files, FileType.CSS)

      expect(jsFile).toBeDefined()
      expect(cssFile).toBeDefined()
      expect(jsFile.content).toContain('import React')
      expect(jsFile.content).toContain('flexDirection: props.direction')
      expect(cssFile.content).toContain(`align-self: center`)
    })
  })
})

'''
'''--- packages/teleport-component-generator-react/__tests__/integration/component-with-import-definitions.json ---
{
    "name": "App",
    "importDefinitions": {
      "defaultTheme": {
        "type": "package",
        "path": "@chakra-ui/core",
        "version": "0.8.0",
        "meta": {
          "namedImport": true,
          "originalName": "theme"
        }
      }
    },
    "node": {
      "type": "element",
      "content": {
        "elementType": "ThemeProvider",
        "semanticType": "ThemeProvider",
        "attrs": {
          "theme": {
            "type": "import",
            "content": {
              "id": "defaultTheme"
            }
          }
        },
        "dependency": {
          "type": "package",
          "path": "@chakra-ui/core",
          "version": "0.8.0",
          "meta": {
            "namedImport": true
          }
        },
        "children": [
          {
            "type": "element",
            "content": {
              "elementType": "component",
              "semanticType": "Button",
              "attrs": {
                "variantColor": "teal"
              },
              "dependency": {
                "type": "package",
                "path": "@chakra-ui/core",
                "version": "0.8.0",
                "meta": {
                  "namedImport": true
                }
              },
              "children": ["Some button"]
            }
          }
        ]
      }
    }
  }
'''
'''--- packages/teleport-component-generator-react/__tests__/integration/component-with-invalid-state-styles.json ---
{
    "name": "ComponentWithAttrProp",
    "stateDefinitions": {
      "active": {
        "type": "boolean",
        "defaultValue": true
      }
    },
    "propDefinitions": {
      "direction": {
        "type": "string",
        "defaultValue": "row"
      },
      "config": {
        "type": "object",
        "defaultValue": {
          "height": 32
        }
      }
    },
    "node": {
      "type": "element",
      "content": {
        "elementType": "container",
        "style": {
          "flexDirection": {
            "type": "dynamic",
            "content": {
              "referenceType": "prop",
              "id": "direction"
            }
          },
          "backgroundColor": {
            "type": "dynamic",
            "content": {
                "referenceType": "state",
                "id": "active"
            }
          },
          "height": {
            "type": "dynamic",
            "content": {
              "referenceType": "prop",
              "id": "config.height"
            }
          },
          "alignSelf": {
            "type": "static",
            "content": "center"
          }
        }
      }
    }
  }
'''
'''--- packages/teleport-component-generator-react/__tests__/integration/component-with-nested-multiple-prop-ref-styles.json ---
{
    "name": "ComponentWithAttrProp",
    "propDefinitions": {
      "direction": {
        "type": "string",
        "defaultValue": "row"
      },
      "config": {
        "type": "object",
        "defaultValue": {
          "height": 32
        }
      }
    },
    "node": {
      "type": "element",
      "content": {
        "elementType": "container",
        "style": {
          "flexDirection": {
            "type": "dynamic",
            "content": {
              "referenceType": "prop",
              "id": "direction"
            }
          },
          "height": {
            "type": "dynamic",
            "content": {
              "referenceType": "prop",
              "id": "config.height"
            }
          },
          "@media (max-width: 835px)": {
            "type": "nested-style",
            "content": {
              "alignSelf": {
                "type": "static",
                "content": "inherit"
              }
            }
          },
          "alignSelf": {
            "type": "static",
            "content": "center"
          },
          "@media (max-width: 640px)": {
            "type": "nested-style",
              "content": {
                "alignSelf": {
                  "type": "static",
                  "content": "left"
                }
            }
          },
          "@media (max-width: 634px)": {
            "type": "nested-style",
            "content": {
              "alignSelf": {
                "type": "static",
                "content": "right"
              }
            }
          }
        },
        "children": []
      }
    }
  }
'''
'''--- packages/teleport-component-generator-react/__tests__/integration/component-with-nested-single-prop-ref-styles.json ---
{
    "name": "ComponentWithNestedSinglePropRef",
    "propDefinitions": {
      "direction": {
        "type": "string",
        "defaultValue": "left"
      },
      "config": {
        "type": "object",
        "defaultValue": {
          "height": 32
        }
      }
    },
    "node": {
      "type": "element",
      "content": {
        "elementType": "container",
        "style": {
          "@media (max-width: 835px)": {
            "type": "nested-style",
            "content": {
              "alignSelf": {
                "type": "dynamic",
                "content": {
                  "referenceType": "prop",
                  "id": "direction"
                }
              }
            }
          },
          "alignSelf": {
            "type": "static",
            "content": "center"
          },
          "@media (max-width: 640px)": {
            "type": "nested-style",
              "content": {
                "alignSelf": {
                  "type": "static",
                  "content": "left"
                }
            }
          },
          "@media (max-width: 634px)": {
            "type": "nested-style",
            "content": {
              "alignSelf": {
                "type": "static",
                "content": "right"
              }
            }
          }
        },
        "children": []
      }
    }
  }
'''
'''--- packages/teleport-component-generator-react/__tests__/integration/component-with-nested-styles.json ---
{
  "name": "ComponentWithAttrProp",
  "propDefinitions": {
    "direction": {
      "type": "string",
      "defaultValue": "row"
    }
  },
  "node": {
    "type": "element",
    "content": {
      "elementType": "container",
      "style": {
        "flexDirection": {
          "type": "dynamic",
          "content": {
            "referenceType": "prop",
            "id": "direction"
          }
        },
        "@media (max-width: 835px)": {
          "type": "nested-style",
          "content": {
            "alignSelf": {
              "type": "static",
              "content": "inherit"
            }
          }
        },
        "alignSelf": {
          "type": "static",
          "content": "center"
        },
        "@media (max-width: 640px)": {
          "type": "nested-style",
            "content": {
              "alignSelf": {
                "type": "static",
                "content": "left"
              }
          }
        },
        "@media (max-width: 634px)": {
          "type": "nested-style",
          "content": {
            "alignSelf": {
              "type": "static",
              "content": "right"
            }
          }
        }
      },
      "children": []
    }
  }
}
'''
'''--- packages/teleport-component-generator-react/__tests__/integration/component-with-old-format-attributes.json ---
{
  "name": "ComponentWithAttrProp",
  "propDefinitions": {
    "test": {
      "type": "string",
      "defaultValue": "123"
    },
    "content": {
      "type": "object",
      "defaultValue": {
        "heading": "Hello World"
      }
    }
  },
  "node": {
    "type": "element",
    "content": {
      "children": ["hello!"],
      "elementType": "container",
      "attrs": {
        "data-test": "$props.test",
        "data-static": "I am just a static string",
        "data-inner-value": "$props.content.heading"
      }
    }
  }
}
'''
'''--- packages/teleport-component-generator-react/__tests__/integration/component-with-smilar-element-name-depependencies.json ---
{
    "name": "App",
    "importDefinitions": {
      "tokens": {
        "type": "package",
        "path": "react-ui",
        "version": "1.0.0-beta.26",
        "meta": {
          "namedImport": true
        }
      },
      "components": {
        "path": "react-ui",
        "type": "package",
        "version": "1.0.0-beta.26",
        "meta": {
          "namedImport": true
        }
      },
      "antdCSS": {
        "path": "antd/dist/antd.css",
        "type": "package",
        "version": "4.5.1",
        "meta": {
          "importJustPath": true
        }
      }
    },
    "node": {
      "type": "element",
      "content": {
        "semanticType": "ThemeProvider",
        "elementType": "component",
        "attrs": {
          "tokens": {
            "type": "import",
            "content": {
              "id": "tokens"
            }
          },
          "components": {
            "type": "import",
            "content": {
              "id": "components"
            }
          }
        },
        "dependency": {
          "type": "package",
          "path": "react-ui",
          "version": "1.0.0-beta.26",
          "meta": {
            "namedImport": true
          }
        },
        "children": [
          {
            "type": "element",
            "content": {
              "semanticType": "Button",
              "elementType": "component",
              "attrs": {
                "variant": "primary"
              },
              "children": ["Button from Chakra"],
              "dependency": {
                "type": "package",
                "path": "react-ui",
                "version": "1.0.0-beta.26",
                "meta": {
                  "namedImport": true
                }
              }
            }
          },
          {
            "type": "element",
            "content": {
              "semanticType": "Avatar",
              "elementType": "component",
              "attrs": {
                "size": "xlarge",
                "src": "https://github.com/sameen-shi.png"
              },
              "dependency": {
                "type": "package",
                "path": "react-ui",
                "version": "1.0.0-beta.26",
                "meta": {
                  "namedImport": true
                }
              }
            }
          },
          {
            "type": "element",
            "content": {
              "semanticType": "Button",
              "elementType": "component",
              "attrs": {
                "type": "primary"
              },
              "children": ["Button from ANTD"],
              "dependency": {
                "type": "package",
                "path": "antd",
                "version": "0.8.0",
                "meta": {
                  "namedImport": true
                }
              }
            }
          }
        ]
      }
    }
  }
'''
'''--- packages/teleport-component-generator-react/__tests__/integration/component-with-valid-single-prop-style.json ---
{
    "name": "ComponentWithSingleProp",
    "propDefinitions": {
      "direction": {
        "type": "string",
        "defaultValue": "row"
      },
      "config": {
        "type": "object",
        "defaultValue": {
          "height": 32
        }
      }
    },
    "node": {
      "type": "element",
      "content": {
        "elementType": "container",
        "style": {
          "height": {
            "type": "dynamic",
            "content": {
              "referenceType": "prop",
              "id": "config.height"
            }
          },
          "alignSelf": {
            "type": "static",
            "content": "center"
          }
        }
      }
    }
  }
'''
'''--- packages/teleport-component-generator-react/__tests__/integration/component-with-valid-state-reference.json ---
{
  "name": "StyledComponent",
  "stateDefinitions": {
    "active": {
      "type": "string",
      "defaultValue": "block"
    }
  },
  "propDefinitions": {
    "direction": {
      "type": "string",
      "defaultValue": "row"
    },
    "config": {
      "type": "object",
      "defaultValue": {
        "height": 32
      }
    }
  },
  "node": {
    "type": "element",
    "content": {
      "children": ["Hello There !",
        {
          "type": "element",
          "content": {
            "elementType": "button",
            "name": "click",
            "children": ["click me !"],
            "events": {
              "click": [
                {
                  "type": "stateChange",
                  "modifies": "active",
                  "newState": "none"
                }
              ]
            }
          }
        }
      ],
      "elementType": "container",
      "style": {
        "flexDirection": {
          "type": "dynamic",
          "content": {
            "referenceType": "prop",
            "id": "direction"
          }
        },
        "display": {
          "type": "dynamic",
          "content": {
            "referenceType": "state",
            "id": "active"
          }
        },
        "height": {
          "type": "dynamic",
          "content": {
            "referenceType": "prop",
            "id": "config.height"
          }
        },
        "alignSelf": {
          "type": "static",
          "content": "center"
        }
      }
    }
  }
}
'''
'''--- packages/teleport-component-generator-react/__tests__/performance/big-sample.json ---
{
  "name": "BigSample",
  "node": {
    "type": "element",
    "content": {
      "elementType": "container",
      "children": []
    }
  }
}
'''
'''--- packages/teleport-component-generator-react/__tests__/performance/index.ts ---
import componentUIDLJSON from '../../../../examples/test-samples/component-sample.json'
import bigUIDL from './big-sample.json'

import { createReactComponentGenerator } from '../../src'

import { performance } from 'perf_hooks'
import { ComponentUIDL, UIDLElement, ReactStyleVariation } from '@teleporthq/teleport-types'

const componentUIDL = componentUIDLJSON as ComponentUIDL

const generator = createReactComponentGenerator(ReactStyleVariation.StyledJSX)

describe('React Generator Performance Run', () => {
  describe('with realistic component sample', () => {
    it('takes under 150ms', async () => {
      const t0 = performance.now()
      await generator.generateComponent(componentUIDL, { assetsPrefix: '/assets' })
      const t1 = performance.now()
      console.info(`Generation time took: ${(t1 - t0).toFixed(2)}`)
      expect(t1 - t0).toBeLessThan(1500)
    })
  })

  describe('with generated component sample', () => {
    it('takes under 2500ms', async () => {
      const uidl = createUIDL({ firstLvl: 100, secondLvl: 5, thirdLvl: 2 })
      const t0 = performance.now()
      await generator.generateComponent(uidl, { assetsPrefix: '/assets' })
      const t1 = performance.now()
      console.info(`Generation time took: ${(t1 - t0).toFixed(2)}`)
      expect(t1 - t0).toBeLessThan(25000)
    })
  })
})

const createUIDL = (params: { firstLvl?: number; secondLvl?: number; thirdLvl?: number } = {}) => {
  const { firstLvl = 100, secondLvl = 10, thirdLvl = 2 } = params
  const fakeUIDL = JSON.parse(JSON.stringify(bigUIDL)) as ComponentUIDL
  for (let index = 0; index < firstLvl; index++) {
    const firstlvlchildren = []
    for (let index2 = 0; index2 < secondLvl; index2++) {
      const secondlvlchildren = []
      for (let index3 = 0; index3 < thirdLvl; index3++) {
        secondlvlchildren.push(
          {
            type: 'element',
            content: {
              elementType: 'image',
              attrs: {
                url: {
                  type: 'static',
                  content: '/playground_assets',
                },
              },
            },
          },
          {
            type: 'element',
            content: {
              elementType: 'Card',
              dependency: {
                type: 'local',
              },
              children: [{ type: 'static', content: 'Test' }],
            },
          },
          {
            type: 'element',
            content: {
              elementType: 'link',
              attrs: {
                url: {
                  type: 'static',
                  content: 'https://random',
                },
              },
              style: {
                color: { type: 'static', content: 'red' },
              },
              children: [{ type: 'static', content: 'click me' }],
            },
          }
        )
      }

      firstlvlchildren.push({
        type: 'element',
        content: {
          elementType: 'container',
          attrs: {
            'data-attr': {
              type: 'static',
              content: 'test',
            },
          },
          children: secondlvlchildren,
          style: {
            fontSize: { type: 'static', content: '15px' },
            margin: { type: 'static', content: '10px' },
          },
        },
      })
    }

    ;(fakeUIDL.node.content as UIDLElement).children.push({
      type: 'element',
      content: {
        elementType: 'text',
        events: {
          onClick: [],
        },
        children: firstlvlchildren,
      },
    })
  }

  return fakeUIDL
}

'''
'''--- packages/teleport-component-generator-react/package.json ---
{
  "name": "@teleporthq/teleport-component-generator-react",
  "version": "0.29.2",
  "description": "Component generator customization, capable of creating React components with a number of different style flavors",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-component-generator": "^0.29.2",
    "@teleporthq/teleport-plugin-css": "^0.29.0",
    "@teleporthq/teleport-plugin-css-modules": "^0.29.0",
    "@teleporthq/teleport-plugin-import-statements": "^0.29.0",
    "@teleporthq/teleport-plugin-jsx-inline-styles": "^0.29.0",
    "@teleporthq/teleport-plugin-jsx-proptypes": "^0.29.0",
    "@teleporthq/teleport-plugin-react-base-component": "^0.29.0",
    "@teleporthq/teleport-plugin-react-jss": "^0.29.0",
    "@teleporthq/teleport-plugin-react-styled-components": "^0.29.0",
    "@teleporthq/teleport-plugin-react-styled-jsx": "^0.29.0",
    "@teleporthq/teleport-postprocessor-prettier-jsx": "^0.29.0",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-component-generator-react/src/index.ts ---
import reactComponentPlugin from '@teleporthq/teleport-plugin-react-base-component'
import inlineStylesPlugin from '@teleporthq/teleport-plugin-jsx-inline-styles'
import reactJSSPlugin from '@teleporthq/teleport-plugin-react-jss'
import { createCSSModulesPlugin } from '@teleporthq/teleport-plugin-css-modules'
import { createCSSPlugin } from '@teleporthq/teleport-plugin-css'
import reactStyledComponentsPlugin from '@teleporthq/teleport-plugin-react-styled-components'
import { createReactStyledJSXPlugin } from '@teleporthq/teleport-plugin-react-styled-jsx'
import propTypesPlugin from '@teleporthq/teleport-plugin-jsx-proptypes'
import importStatementsPlugin from '@teleporthq/teleport-plugin-import-statements'
import prettierJSX from '@teleporthq/teleport-postprocessor-prettier-jsx'
import {
  ComponentGenerator,
  ReactStyleVariation,
  ComponentGeneratorInstance,
  GeneratorFactoryParams,
} from '@teleporthq/teleport-types'
import { createComponentGenerator } from '@teleporthq/teleport-component-generator'

import { ReactMapping } from './react-mapping'

const createReactComponentGenerator: ComponentGeneratorInstance = ({
  mappings = [],
  plugins = [],
  postprocessors = [],
  variation = ReactStyleVariation.CSSModules,
}: GeneratorFactoryParams = {}): ComponentGenerator => {
  const cssPlugin = createCSSPlugin({
    templateChunkName: 'jsx-component',
    templateStyle: 'jsx',
    declareDependency: 'import',
    classAttributeName: 'className',
    forceScoping: true,
  })
  const cssModulesPlugin = createCSSModulesPlugin({ moduleExtension: true })
  const reactStyledJSXPlugin = createReactStyledJSXPlugin({ forceScoping: true })

  const stylePlugins = {
    [ReactStyleVariation.InlineStyles]: inlineStylesPlugin,
    [ReactStyleVariation.StyledComponents]: reactStyledComponentsPlugin,
    [ReactStyleVariation.StyledJSX]: reactStyledJSXPlugin,
    [ReactStyleVariation.CSSModules]: cssModulesPlugin,
    [ReactStyleVariation.CSS]: cssPlugin,
    [ReactStyleVariation.ReactJSS]: reactJSSPlugin,
  }

  const stylePlugin = stylePlugins[variation]

  if (!stylePlugin) {
    throw new Error(`Invalid style variation '${variation}'`)
  }

  const generator = createComponentGenerator()

  generator.addMapping(ReactMapping)
  mappings.forEach((mapping) => generator.addMapping(mapping))

  generator.addPlugin(reactComponentPlugin)
  generator.addPlugin(stylePlugin)
  generator.addPlugin(propTypesPlugin)
  plugins.forEach((plugin) => generator.addPlugin(plugin))

  // Import plugin needs to be last to handle all dependencies
  // TODO: use a different function to set/interact with the import plugin
  generator.addPlugin(importStatementsPlugin)

  generator.addPostProcessor(prettierJSX)
  postprocessors.forEach((postprocessor) => generator.addPostProcessor(postprocessor))

  return generator
}

export { createReactComponentGenerator, ReactMapping, ReactStyleVariation }

'''
'''--- packages/teleport-component-generator-react/src/react-mapping.ts ---
import { Mapping } from '@teleporthq/teleport-types'

export const ReactMapping: Mapping = {
  elements: {
    group: {
      elementType: 'Fragment',
      dependency: {
        type: 'library',
        path: 'react',
        version: '^17.0.2',
        meta: {
          namedImport: true,
        },
      },
    },
    'html-node': {
      elementType: 'Script',
      dependency: {
        type: 'package',
        path: 'dangerous-html',
        version: '0.1.13',
        meta: {
          importAlias: 'dangerous-html/react',
        },
      },
    },
    'lottie-node': {
      elementType: 'Player',
      dependency: {
        type: 'package',
        path: '@lottiefiles/react-lottie-player',
        version: '3.4.7',
        meta: {
          namedImport: true,
        },
      },
    },
  },
  events: {
    click: 'onClick',
    focus: 'onFocus',
    blur: 'onBlur',
    change: 'onChange',
    submit: 'onSubmit',
    keydown: 'onKeyDown',
    keyup: 'onKeyUp',
    keypress: 'onKeyPress',
    mouseenter: 'onMouseEnter',
    mouseleave: 'onMouseLeave',
    mouseover: 'onMouseOver',
    select: 'onSelect',
    touchstart: 'onTouchStart',
    touchend: 'onTouchEnd',
    scroll: 'onScroll',
    load: 'onLoad',
  },
  attributes: {
    for: 'htmlFor',
    readonly: 'readOnly',
    class: 'className',
    contenteditable: 'contentEditable',
  },
  illegalClassNames: ['React', 'Fragment', 'ReactDOM', 'PropTypes'],
}

'''
'''--- packages/teleport-component-generator-react/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-component-generator-vue/README.md ---
# teleport-component-generator-vue

Component generator customization, capable of creating Vue components.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-component-generator-vue
```
or
```bash
yarn add @teleporthq/teleport-component-generator-vue
```

## Usage
```javascript
import { createVueComponentGenerator } from '@teleporthq/teleport-component-generator-vue'

const vueGenerator = createVueComponentGenerator()

const result = await vueGenerator.generateComponent(uidl)
```

'''
'''--- packages/teleport-component-generator-vue/__tests__/end2end/index.ts ---
// @ts-ignore
import uidlSampleJSON from '../../../../examples/test-samples/component-sample.json'
// @ts-ignore
import invalidUidlSampleJSON from '../../../../examples/test-samples/component-invalid-sample.json'

import { createVueComponentGenerator } from '../../src'
import {
  ComponentUIDL,
  GeneratedFile,
  UIDLPropDefinition,
  UIDLEventDefinitions,
  UIDLStateDefinition,
} from '@teleporthq/teleport-types'
import { component, elementNode, dynamicNode, staticNode } from '@teleporthq/teleport-uidl-builders'

const uidlSample = uidlSampleJSON as ComponentUIDL
const invalidUidlSample = invalidUidlSampleJSON as ComponentUIDL
const JS_FILE = 'js'
const VUE_FILE = 'vue'
const findFileByType = (files: GeneratedFile[], type: string = JS_FILE) =>
  files.find((file) => file.fileType === type)

describe('Vue Component Generator', () => {
  describe('with standard plugins', () => {
    const generator = createVueComponentGenerator()

    it('should return the files containing the code as string', async () => {
      const result = await generator.generateComponent(uidlSample)
      const vueFile = findFileByType(result.files, VUE_FILE)

      expect(vueFile).toBeDefined()
      expect(vueFile.content).toContain('<template>')
      expect(result.dependencies).toBeDefined()
    })
  })

  describe('with Custom Mapping', () => {
    const generator = createVueComponentGenerator()
    generator.addMapping({ elements: { container: { elementType: 'fakediv' } } })

    it('should render <fakediv> tags', async () => {
      const result = await generator.generateComponent(uidlSample)
      const vueFile = findFileByType(result.files, VUE_FILE)

      expect(vueFile).toBeDefined()
      expect(vueFile.content).toContain('<fakediv')
      expect(result.dependencies).toBeDefined()
    })
  })
})

describe('Vue Component Validator', () => {
  const generator = createVueComponentGenerator()

  it('works with valid UIDL sample', async () => {
    const result = await generator.generateComponent(uidlSample)
    const vueFile = findFileByType(result.files, VUE_FILE)

    expect(vueFile).toBeDefined()
    expect(vueFile.content).toContain('<template>')
    expect(result.dependencies).toBeDefined()
  })

  it('Decoders remove the additational fields and use the uidl', async () => {
    const result = await generator.generateComponent(invalidUidlSample)
    const vueFile = findFileByType(result.files, VUE_FILE)

    expect(vueFile).toBeDefined()
    expect(vueFile.content).toContain('<template>')
    expect(result.dependencies).toBeDefined()
  })

  it('works when validation step is skiped', async () => {
    const options = { skipValidation: true }
    const result = await generator.generateComponent(invalidUidlSample, options)
    const vueFile = findFileByType(result.files, VUE_FILE)

    expect(vueFile).toBeDefined()
    expect(vueFile.content).toContain('<template>')
    expect(result.dependencies).toBeDefined()
  })
})

describe('Should add EventEmitter and Emit events when a fun is sent via prop', () => {
  const generator = createVueComponentGenerator()
  const propDefinitions: Record<string, UIDLPropDefinition> = {
    message: {
      type: 'string',
      defaultValue: 'Hello',
    },
    onClose: {
      type: 'func',
      defaultValue: '() => {}',
    },
  }
  const stateDefinitions: Record<string, UIDLStateDefinition> = {
    fakeState: {
      type: 'boolean',
      defaultValue: true,
    },
  }
  const events: UIDLEventDefinitions = {
    click: [
      {
        type: 'propCall',
        calls: 'onClose',
      },
      {
        type: 'stateChange',
        modifies: 'fakeState',
        newState: false,
      },
    ],
  }
  const uidl: ComponentUIDL = component(
    'PropEventComponent',
    elementNode('container', {}, [
      dynamicNode('prop', 'message'),
      elementNode('button', {}, [staticNode('close')], null, null, events),
    ]),
    propDefinitions,
    stateDefinitions
  )

  it('Adds EmitEmitter to the import', async () => {
    const result = await generator.generateComponent(uidl)
    const vueFile = findFileByType(result.files, VUE_FILE)

    expect(vueFile.content).toContain(`@click="handleButtonClick"`)
    expect(vueFile.content).toContain(`this.$emit('onClose')`)
  })
})

'''
'''--- packages/teleport-component-generator-vue/__tests__/integration/component-attrs.ts ---
// @ts-ignore-next-line
import ComponentWithOldFormatAttributesJSON from './component-with-old-format-attributes.json'

import { createVueComponentGenerator } from '../../src'
import { GeneratedFile } from '@teleporthq/teleport-types'
import {
  component,
  definition,
  repeatNode,
  dynamicNode,
  elementNode,
  staticNode,
} from '@teleporthq/teleport-uidl-builders'

const VUE_FILE = 'vue'
const findFileByType = (files: GeneratedFile[], type: string = VUE_FILE) =>
  files.find((file) => file.fileType === type)

const uidl = component(
  'ComponentWithAttrProp',
  elementNode('container', {}, [
    repeatNode(
      elementNode('div', {}, [
        elementNode(
          'div',
          {
            test: dynamicNode('local', 'index'),
            for: staticNode('mappedTest'),
            'data-test': dynamicNode('prop', 'test'),
            'data-static': staticNode('test'),
            'data-inner-value': dynamicNode('prop', 'content.heading'),
          },
          [dynamicNode('local', 'item')]
        ),
      ]),
      dynamicNode('prop', 'items'),
      {
        useIndex: true,
      }
    ),
  ]),
  {
    items: definition('object', { test: '123' }),
    test: definition('string', '123'),
    content: definition('object', { heading: 'Hello World' }),
  },
  {}
)

describe('Vue Attribute Mapping', () => {
  const generator = createVueComponentGenerator()

  it('should return code with attributes mapped', async () => {
    const result = await generator.generateComponent(uidl)
    const vueFile = findFileByType(result.files, VUE_FILE)

    expect(vueFile).toBeDefined()
    expect(vueFile.content).not.toContain('htmlFor')
    expect(vueFile.content).toContain('for')
  })
})

describe('Vue Props in Component Generator', () => {
  describe('supports props json declaration in attributes', () => {
    const generator = createVueComponentGenerator()

    it('should add attributes on component', async () => {
      const result = await generator.generateComponent(uidl)
      const vueFile = findFileByType(result.files, VUE_FILE)

      expect(vueFile.content).toContain(':data-test')
      expect(vueFile.content).not.toContain(':data-static')
      expect(vueFile.content).toContain('data-static')
      expect(vueFile.content).toContain('content.heading')
      expect(vueFile.content).toContain('content: {')
      expect(vueFile.content).toContain('heading: ')
    })

    it('should work with old style attributes', async () => {
      const result = await generator.generateComponent(ComponentWithOldFormatAttributesJSON)
      const vueFile = findFileByType(result.files, VUE_FILE)

      expect(vueFile.content).toContain(':data-test')
      expect(vueFile.content).not.toContain(':data-static')
      expect(vueFile.content).toContain('data-static')
      expect(vueFile.content).toContain('content.heading')
      expect(vueFile.content).toContain('content: {')
      expect(vueFile.content).toContain('heading: ')
    })

    it('should run repeat attributes and data source', async () => {
      const result = await generator.generateComponent(uidl)
      const vueFile = findFileByType(result.files, VUE_FILE)

      expect(vueFile.content).toContain(':key="index"')
      expect(vueFile.content).toContain(':test="index"')
    })
  })
})

'''
'''--- packages/teleport-component-generator-vue/__tests__/integration/component-conditional.ts ---
import {
  component,
  definition,
  staticNode,
  dynamicNode,
  elementNode,
  conditionalNode,
} from '@teleporthq/teleport-uidl-builders'

import { createVueComponentGenerator } from '../../src'

const vueGenerator = createVueComponentGenerator()

const uidl = component(
  'Conditional Component',
  elementNode('container', {}, [
    conditionalNode(
      dynamicNode('state', 'isVisible'),
      elementNode('text', {}, [staticNode('Now you see me!')]),
      true
    ),
    conditionalNode(
      dynamicNode('state', 'isShareable'),
      elementNode('text', {}, [staticNode('I am not shareable!')]),
      false
    ),
  ]),
  {},
  { isVisible: definition('boolean', true), isShareable: definition('boolean', false) }
)

describe('Component with conditional node type', () => {
  it('renders code with condition if value on state is true', async () => {
    const result = await vueGenerator.generateComponent(uidl)
    const code = result.files[0].content

    expect(code).toContain('<span v-if="isVisible">Now you see me!</span>')
  })
  it('renders code with !condition if value on state is false', async () => {
    const result = await vueGenerator.generateComponent(uidl)
    const code = result.files[0].content

    expect(code).toContain('<span v-if="!isShareable">I am not shareable!</span>')
  })
})

'''
'''--- packages/teleport-component-generator-vue/__tests__/integration/component-dependency.ts ---
import {
  component,
  definition,
  elementNode,
  componentDependency,
} from '@teleporthq/teleport-uidl-builders'
import componentJSON from './component-with-smilar-element-name-depependencies.json'

import { createVueComponentGenerator } from '../../src'

const vueGenerator = createVueComponentGenerator()

const dependencySample = (
  name: string,
  type: string,
  path: string,
  version: string,
  option: object
) => {
  return { name, type, path, version, option }
}

const uidl = (dependency) => {
  return component(
    'Component With Dependencies',
    elementNode(
      dependency.name,
      {},
      [],
      componentDependency(dependency.type, dependency.path, dependency.version, dependency.option)
    ),
    {},
    { title: definition('boolean', true) }
  )
}

describe('Component with dependency ', () => {
  describe('from package.json', () => {
    it('Remaps elementName when to elements have same name but different dependencies', async () => {
      const result = await vueGenerator.generateComponent(componentJSON)
      const vueFile = result.files[0]

      expect(vueFile).toBeDefined()
      expect(vueFile.content).toContain(
        `import { CThemeProvider, CButton, CAvatar } from '@chakra-ui/vue'`
      )
      expect(vueFile.content).toContain(`import { CButton as AntdCButton } from 'antd'`)
      expect(vueFile.content).toContain(`import 'antd/dist/antd.css'`)
      expect(vueFile.content).toContain(`randomName: randomName`)
      expect(vueFile.content).not.toContain(`antdCSS: antdCSS`)
    })

    it('renders code with imported package', async () => {
      const result = await vueGenerator.generateComponent(
        uidl(
          dependencySample('VueDatepicker', 'package', 'vue-datepicker', '', {
            namedImport: false,
          })
        )
      )
      const code = result.files[0].content

      expect(code).toContain("import VueDatepicker from 'vue-datepicker'")
    })

    it('renders code with named import ', async () => {
      const result = await vueGenerator.generateComponent(
        uidl(
          dependencySample('VueDatepicker', 'package', 'vue-datepicker', '', {
            namedImport: true,
          })
        )
      )
      const code = result.files[0].content
      expect(code).toContain("import { VueDatepicker } from 'vue-datepicker'")
    })

    it('renders code with original name', async () => {
      const result = await vueGenerator.generateComponent(
        uidl(
          dependencySample('VuePicker', 'package', 'vue-datepicker', '', {
            namedImport: true,
            originalName: 'VueDatePicker',
          })
        )
      )
      const code = result.files[0].content
      expect(code).toContain("import { VueDatePicker as VuePicker } from 'vue-datepicker'")
    })
  })

  describe('from local', () => {
    it('renders code with imported package', async () => {
      const result = await vueGenerator.generateComponent(
        uidl(
          dependencySample('VueDatepicker', 'local', '../vue-datepicker', '', {
            namedImport: false,
          })
        )
      )
      const code = result.files[0].content

      expect(code).toContain("import VueDatepicker from '../vue-datepicker'")
    })

    it('renders code with named import ', async () => {
      const result = await vueGenerator.generateComponent(
        uidl(
          dependencySample('VueDatepicker', 'local', '../vue-datepicker', '', {
            namedImport: true,
          })
        )
      )
      const code = result.files[0].content
      expect(code).toContain("import { VueDatepicker } from '../vue-datepicker'")
    })

    it('renders code with original name', async () => {
      const result = await vueGenerator.generateComponent(
        uidl(
          dependencySample('VuePicker', 'local', 'vue-datepicker', '', {
            namedImport: true,
            originalName: 'VueDatepicker',
          })
        )
      )
      const code = result.files[0].content
      expect(code).toContain("import { VueDatepicker as VuePicker } from 'vue-datepicker'")
    })
  })

  describe('from library', () => {
    it('renders code with named import ', async () => {
      const result = await vueGenerator.generateComponent(
        uidl(
          dependencySample('Card', 'library', 'material', '', {
            namedImport: true,
          })
        )
      )
      const code = result.files[0].content
      expect(code).toContain("import { Card } from 'material'")
    })
  })
})

'''
'''--- packages/teleport-component-generator-vue/__tests__/integration/component-referenced-styles.ts ---
import { createVueComponentGenerator } from '../../src'
import { component, elementNode, staticNode } from '@teleporthq/teleport-uidl-builders'
import {
  UIDLReferencedStyles,
  GeneratedFile,
  FileType,
  GeneratorOptions,
} from '@teleporthq/teleport-types'

const findFileByType = (files: GeneratedFile[], type: string = FileType.JS) =>
  files.find((file) => file.fileType === type)

describe('Generates media, pseudo and normal styles', () => {
  const referencedStyles: UIDLReferencedStyles = {
    '1234567890': {
      type: 'style-map',
      content: {
        mapType: 'inlined',
        conditions: [{ conditionType: 'screen-size', maxWidth: 991 }],
        styles: {
          display: staticNode('none'),
        },
      },
    },
  }

  const style = {
    width: staticNode('100px'),
  }
  const uidl = component(
    'MyComponent',
    elementNode('container', null, [staticNode('Hello !!')], null, style, null, referencedStyles)
  )

  it('Generates styles using CSS', async () => {
    const generator = createVueComponentGenerator()
    const { files } = await generator.generateComponent(uidl)
    const vueFile = findFileByType(files, FileType.VUE)

    expect(vueFile).toBeDefined()
    expect(vueFile.content).toContain(`class="my-component-container"`)
    expect(vueFile.content).toContain('width: 100px')
    expect(vueFile.content).toContain('@media(max-width: 991px)')
    expect(vueFile.content).toContain(`display: none`)
  })
})

describe('Add referenced styles even when direct styles are not present on node', () => {
  const referencedStyles: UIDLReferencedStyles = {
    '1234567890': {
      type: 'style-map',
      content: {
        mapType: 'inlined',
        conditions: [{ conditionType: 'screen-size', maxWidth: 991 }],
        styles: {
          display: staticNode('none'),
        },
      },
    },
  }

  const uidl = component(
    'MyComponent',
    elementNode('container', null, [staticNode('Hello !!')], null, null, null, referencedStyles)
  )

  it('Generates styles using CSS', async () => {
    const generator = createVueComponentGenerator()
    const { files } = await generator.generateComponent(uidl)
    const vueFile = findFileByType(files, FileType.VUE)

    expect(vueFile).toBeDefined()
    expect(vueFile.content).toContain(`class="my-component-container"`)
    expect(vueFile.content).toContain('@media(max-width: 991px)')
    expect(vueFile.content).not.toContain('width: 100px')
  })
})

describe('Throws Error when a node is using project-styles but not present in UIDL', () => {
  const styles: UIDLReferencedStyles = {
    '123456789': {
      type: 'style-map',
      content: {
        mapType: 'project-referenced',
        referenceId: 'primaryButton',
      },
    },
  }
  const uidl = component(
    'MyComponent',
    elementNode('container', null, [], null, null, null, styles)
  )

  it('CSS', async () => {
    const generator = createVueComponentGenerator()
    await expect(generator.generateComponent(uidl)).rejects.toThrow(Error)
  })
})

describe('Referes from project style and adds it to the node, without any styles on the node', () => {
  const styles: UIDLReferencedStyles = {
    '123456789': {
      type: 'style-map',
      content: {
        mapType: 'project-referenced',
        referenceId: 'primaryButton',
      },
    },
  }
  const uidl = component(
    'MyComponent',
    elementNode('container', null, [staticNode('Hello')], null, null, null, styles)
  )
  const options: GeneratorOptions = {
    projectStyleSet: {
      styleSetDefinitions: {
        primaryButton: {
          type: 'reusable-project-style-map',
          content: {
            background: staticNode('blue'),
          },
        },
      },
      fileName: 'style',
      path: '..',
    },
  }

  it('CSS', async () => {
    const generator = createVueComponentGenerator()
    const cssOptions: GeneratorOptions = {
      projectStyleSet: {
        ...options.projectStyleSet,
        importFile: true,
      },
    }
    const { files } = await generator.generateComponent(uidl, cssOptions)
    const vueFile = findFileByType(files, FileType.VUE)

    expect(vueFile).toBeDefined()
    expect(vueFile.content).toContain(`class="primaryButton\"`)
    expect(vueFile.content).not.toContain(`import '../style.css'`)
  })
})

'''
'''--- packages/teleport-component-generator-vue/__tests__/integration/component-repeat.ts ---
import {
  component,
  definition,
  repeatNode,
  dynamicNode,
  elementNode,
} from '@teleporthq/teleport-uidl-builders'

import { createVueComponentGenerator } from '../../src'

const vueGenerator = createVueComponentGenerator()

const uidl = component(
  'Repeat Component',
  elementNode('container', {}, [
    repeatNode(
      elementNode('div', {}, [dynamicNode('local', 'item')]),
      dynamicNode('prop', 'items'),
      {
        useIndex: true,
      }
    ),
  ]),
  { items: definition('array', ['hello', 'world']) },
  {}
)

describe('Component Repeat Node', () => {
  it('renders code that contains map method', async () => {
    const result = await vueGenerator.generateComponent(uidl)
    const code = result.files[0].content

    expect(code).toContain('v-for="(item, index) in items"')
  })

  it('renders code with map method that iterates using index', async () => {
    const result = await vueGenerator.generateComponent(uidl)
    const code = result.files[0].content

    expect(code).toContain(':key="index"')
  })
})

'''
'''--- packages/teleport-component-generator-vue/__tests__/integration/component-slot.ts ---
import { component, staticNode, slotNode, elementNode } from '@teleporthq/teleport-uidl-builders'

import { createVueComponentGenerator } from '../../src'

const vueGenerator = createVueComponentGenerator()

describe('Component Slot Node', () => {
  describe('Simple Slot', () => {
    const uidl = component('Simple Slot', elementNode('container', {}, [slotNode()]))

    it('renders a <slot> tag in Vue', async () => {
      const result = await vueGenerator.generateComponent(uidl)
      const code = result.files[0].content

      expect(code).toContain('<slot></slot>')
    })
  })

  describe('Slot with fallback', () => {
    const uidl = component(
      'Slot Component',
      elementNode('container', {}, [slotNode(elementNode('text', {}, [staticNode('Placeholder')]))])
    )

    it('renders a <slot> tag and placeholder in Vue', async () => {
      const result = await vueGenerator.generateComponent(uidl)
      const code = result.files[0].content

      expect(code).toContain('<slot><span>Placeholder</span></slot>')
    })
  })

  describe('Slot with name', () => {
    const uidl = component(
      'Slot Component',
      elementNode('container', {}, [slotNode(undefined, 'slot-1')])
    )

    it('renders a <slot name="name"> tag in Vue', async () => {
      const result = await vueGenerator.generateComponent(uidl)
      const code = result.files[0].content

      expect(code).toContain('<slot name="slot-1"></slot>')
    })
  })
})

'''
'''--- packages/teleport-component-generator-vue/__tests__/integration/component-style.ts ---
// @ts-ignore-next-line
import ComponentWithValidJSON from './component-with-valid-style.json'
// @ts-ignore-next-line
import ComponentWithNestedStyles from './component-with-nested-styles.json'

import { createVueComponentGenerator } from '../../src'
import { ComponentUIDL, GeneratedFile } from '@teleporthq/teleport-types'

const ComponentWithValidStyle = ComponentWithValidJSON as ComponentUIDL

const VUE_FILE = 'vue'
const findFileByType = (files: GeneratedFile[], type: string = VUE_FILE) =>
  files.find((file) => file.fileType === type)

describe('Vue styles in Component Generator', () => {
  describe('supports props json declaration in styles', () => {
    const generator = createVueComponentGenerator()

    it('should add styles on component', async () => {
      const result = await generator.generateComponent(ComponentWithValidStyle)
      const vueFile = findFileByType(result.files, VUE_FILE)

      expect(vueFile).toBeDefined()
      expect(vueFile.content).toContain('align-self: center')
      expect(vueFile.content).toContain('config.height')
    })

    it('should not support nested styles', async () => {
      // @ts-ignore
      const result = generator.generateComponent(ComponentWithNestedStyles)
      await expect(result).rejects.toThrow(Error)
    })
  })
})

'''
'''--- packages/teleport-component-generator-vue/__tests__/integration/component-with-nested-styles.json ---
{
  "name": "ComponentWithAttrProp",
  "propDefinitions": {
    "direction": {
      "type": "string",
      "defaultValue": "row"
    }
  },
  "node": {
    "type": "element",
    "content": {
      "elementType": "container",
      "style": {
        "flexDirection": {
          "type": "dynamic",
          "content": {
            "referenceType": "prop",
            "id": "direction"
          }
        },
        "@media (max-width: 835px)": {
          "type": "nested-style",
          "content": {
            "alignSelf": {
              "type": "static",
              "content": "inherit"
            }
          }
        },
        "alignSelf": {
          "type": "static",
          "content": "center"
        },
        "@media (max-width: 640px)": {
          "type": "nested-style",
            "content": {
              "alignSelf": {
                "type": "static",
                "content": "left"
              }
          }
        },
        "@media (max-width: 634px)": {
          "type": "nested-style",
          "content": {
            "alignSelf": {
              "type": "static",
              "content": "right"
            }
          }
        }
      },
      "children": []
    }
  }
}
'''
'''--- packages/teleport-component-generator-vue/__tests__/integration/component-with-old-format-attributes.json ---
{
  "name": "ComponentWithAttrProp",
  "propDefinitions": {
    "test": {
      "type": "string",
      "defaultValue": "123"
    },
    "content": {
      "type": "object",
      "defaultValue": {
        "heading": "Hello World"
      }
    }
  },
  "node": {
    "type": "element",
    "content": {
      "elementType": "container",
      "attrs": {
        "data-test": "$props.test",
        "data-static": "I am just a static string",
        "data-inner-value": "$props.content.heading"
      }
    }
  }
}
'''
'''--- packages/teleport-component-generator-vue/__tests__/integration/component-with-smilar-element-name-depependencies.json ---
{
  "name": "App",
  "importDefinitions": {
    "randomName": {
      "type": "package",
      "path": "some-random-name-exporting-package",
      "version": "0.0.1",
      "meta": {
        "namedImport": true
      }
    },
    "antdCSS": {
      "type": "package",
      "path": "antd/dist/antd.css",
      "version": "0.8.0",
      "meta": {
        "importJustPath": true
      }
    }
  },
  "node": {
    "type": "element",
    "content": {
      "semanticType": "CThemeProvider",
      "elementType": "component",
      "dependency": {
        "type": "package",
        "path": "@chakra-ui/vue",
        "version": "0.6.1",
        "meta": {
          "namedImport": true
        }
      },
      "children": [
        {
          "type": "element",
          "content": {
            "semanticType": "CButton",
            "elementType": "component",
            "attrs": {
              "variant": "primary"
            },
            "children": ["Button from Chakra"],
            "dependency": {
              "type": "package",
              "path": "@chakra-ui/vue",
              "version": "0.6.1",
              "meta": {
                "namedImport": true
              }
            }
          }
        },
        {
          "type": "element",
          "content": {
            "semanticType": "CAvatar",
            "elementType": "component",
            "attrs": {
              "name": {
                "type": "import",
                "content": {
                  "id": "randomName"
                }
              },
              "src": "https://github.com/sameen-shi.png"
            },
            "dependency": {
              "type": "package",
              "path": "@chakra-ui/vue",
              "version": "0.6.1",
              "meta": {
                "namedImport": true
              }
            }
          }
        },
        {
          "type": "element",
          "content": {
            "semanticType": "CButton",
            "elementType": "component",
            "attrs": {
              "type": "primary"
            },
            "children": ["Button from ANTD"],
            "dependency": {
              "type": "package",
              "path": "antd",
              "version": "0.8.0",
              "meta": {
                "namedImport": true
              }
            }
          }
        }
      ]
    }
  }
}
'''
'''--- packages/teleport-component-generator-vue/__tests__/integration/component-with-valid-style.json ---
{
  "name": "ComponentWithAttrProp",
  "propDefinitions": {
    "direction": {
      "type": "string",
      "defaultValue": "row"
    },
    "config": {
      "type": "object",
      "defaultValue": {
        "height": 32
      }
    }
  },
  "node": {
    "type": "element",
    "content": {
      "elementType": "container",
      "style": {
        "flexDirection": {
          "type": "dynamic",
          "content": {
            "referenceType": "prop",
            "id": "direction"
          }
        },
        "height": {
          "type": "dynamic",
          "content": {
            "referenceType": "prop",
            "id": "config.height"
          }
        },
        "alignSelf": {
          "type": "static",
          "content": "center"
        }
      }
    }
  }
}
'''
'''--- packages/teleport-component-generator-vue/__tests__/performance/big-sample.json ---
{
  "name": "BigSample",
  "node": {
    "type": "element",
    "content": {
      "elementType": "container",
      "children": []
    }
  }
}
'''
'''--- packages/teleport-component-generator-vue/__tests__/performance/index.ts ---
// @ts-ignore
import componentUIDLJSON from '../../../../examples/test-samples/component-sample.json'
// @ts-ignore
import bigUIDL from './big-sample.json'

import { createVueComponentGenerator } from '../../src'
import { performance } from 'perf_hooks'
import { ComponentUIDL, UIDLElement } from '@teleporthq/teleport-types'

const componentUIDL = componentUIDLJSON as ComponentUIDL
const generator = createVueComponentGenerator()

describe('Vue Generator Performance Run', () => {
  describe('with realistic component sample', () => {
    it('takes under 150ms', async () => {
      const t0 = performance.now()
      await generator.generateComponent(componentUIDL, { assetsPrefix: '/assets' })
      const t1 = performance.now()
      console.info(`Generation time took: ${(t1 - t0).toFixed(2)}`)
      expect(t1 - t0).toBeLessThan(1500)
    })
  })

  describe('with generated component sample', () => {
    it('takes under 6500ms', async () => {
      const uidl = createUIDL({ firstLvl: 100, secondLvl: 5, thirdLvl: 2 })
      const t0 = performance.now()
      await generator.generateComponent(uidl, { assetsPrefix: '/assets' })
      const t1 = performance.now()
      console.info(`Generation time took: ${(t1 - t0).toFixed(2)}`)
      expect(t1 - t0).toBeLessThan(65000)
    })
  })
})

const createUIDL = (params: { firstLvl?: number; secondLvl?: number; thirdLvl?: number } = {}) => {
  const { firstLvl = 100, secondLvl = 10, thirdLvl = 2 } = params
  const fakeUIDL = JSON.parse(JSON.stringify(bigUIDL)) as ComponentUIDL
  for (let index = 0; index < firstLvl; index++) {
    const firstlvlchildren = []
    for (let index2 = 0; index2 < secondLvl; index2++) {
      const secondlvlchildren = []
      for (let index3 = 0; index3 < thirdLvl; index3++) {
        secondlvlchildren.push(
          {
            type: 'element',
            content: {
              elementType: 'image',
              attrs: {
                url: {
                  type: 'static',
                  content: '/playground_assets',
                },
              },
            },
          },
          {
            type: 'element',
            content: {
              elementType: 'Card',
              dependency: {
                type: 'local',
              },
              children: [{ type: 'static', content: 'Test' }],
            },
          },
          {
            type: 'element',
            content: {
              elementType: 'link',
              attrs: {
                url: {
                  type: 'static',
                  content: 'https://random',
                },
              },
              style: {
                color: { type: 'static', content: 'red' },
              },
              children: [{ type: 'static', content: 'click me' }],
            },
          }
        )
      }

      firstlvlchildren.push({
        type: 'element',
        content: {
          elementType: 'container',
          attrs: {
            'data-attr': {
              type: 'static',
              content: 'test',
            },
          },
          children: secondlvlchildren,
          style: {
            fontSize: { type: 'static', content: '15px' },
            margin: { type: 'static', content: '10px' },
          },
        },
      })
    }

    ;(fakeUIDL.node.content as UIDLElement).children.push({
      type: 'element',
      content: {
        elementType: 'text',
        events: {
          onClick: [],
        },
        children: firstlvlchildren,
      },
    })
  }

  return fakeUIDL
}

'''
'''--- packages/teleport-component-generator-vue/package.json ---
{
  "name": "@teleporthq/teleport-component-generator-vue",
  "version": "0.29.2",
  "description": "Component generator customization, capable of creating Vue components",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-component-generator": "^0.29.2",
    "@teleporthq/teleport-plugin-css": "^0.29.0",
    "@teleporthq/teleport-plugin-import-statements": "^0.29.0",
    "@teleporthq/teleport-plugin-vue-app-routing": "^0.29.2",
    "@teleporthq/teleport-plugin-vue-base-component": "^0.29.0",
    "@teleporthq/teleport-postprocessor-prettier-html": "^0.29.0",
    "@teleporthq/teleport-postprocessor-prettier-js": "^0.29.0",
    "@teleporthq/teleport-postprocessor-vue-file": "^0.29.0",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-component-generator-vue/src/index.ts ---
import { createComponentGenerator } from '@teleporthq/teleport-component-generator'
import vueComponentPlugin from '@teleporthq/teleport-plugin-vue-base-component'
import { createCSSPlugin } from '@teleporthq/teleport-plugin-css'
import importStatementsPlugin from '@teleporthq/teleport-plugin-import-statements'
import prettierJS from '@teleporthq/teleport-postprocessor-prettier-js'
import prettierHTML from '@teleporthq/teleport-postprocessor-prettier-html'
import vueFileProcessor from '@teleporthq/teleport-postprocessor-vue-file'
import {
  ComponentGenerator,
  ComponentGeneratorInstance,
  GeneratorFactoryParams,
} from '@teleporthq/teleport-types'

import { VueMapping } from './vue-mapping'

const createVueComponentGenerator: ComponentGeneratorInstance = ({
  mappings = [],
  plugins = [],
  postprocessors = [],
}: GeneratorFactoryParams = {}): ComponentGenerator => {
  const generator = createComponentGenerator()
  const vueStylePlugin = createCSSPlugin({
    inlineStyleAttributeKey: ':style',
    forceScoping: true,
    dynamicVariantPrefix: 'v-bind:class',
  })

  generator.addMapping(VueMapping)
  mappings.forEach((mapping) => generator.addMapping(mapping))

  generator.addPlugin(vueComponentPlugin)
  generator.addPlugin(vueStylePlugin)
  plugins.forEach((plugin) => generator.addPlugin(plugin))
  generator.addPlugin(importStatementsPlugin)

  generator.addPostProcessor(prettierJS)
  generator.addPostProcessor(prettierHTML)
  generator.addPostProcessor(vueFileProcessor)
  postprocessors.forEach((postprocessor) => generator.addPostProcessor(postprocessor))

  return generator
}

export { createVueComponentGenerator, VueMapping }

'''
'''--- packages/teleport-component-generator-vue/src/vue-mapping.ts ---
import { Mapping } from '@teleporthq/teleport-types'

export const VueMapping: Mapping = {
  elements: {
    'html-node': {
      elementType: 'DangerousHTML',
      dependency: {
        type: 'package',
        path: 'dangerous-html',
        version: '0.1.13',
        meta: {
          importAlias: 'dangerous-html/vue',
        },
      },
    },
    'lottie-node': {
      elementType: 'lottie-vue-player',
    },
  },
  events: {},
  attributes: {},
}

'''
'''--- packages/teleport-component-generator-vue/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-component-generator/README.md ---
# teleport-component-generator

Bare-bone component generator on top of which you can add plugins, mappings and post processing functions.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-component-generator
```
or
```bash
yarn add @teleporthq/teleport-component-generator
```

## Usage
```javascript
import generator from '@teleporthq/teleport-component-generator'

generator.addMapping({ /*...*/ }) // Add a mapping object for UIDL element types

generator.addPlugin(plugin1) // Add the plugins in the order in which they will be called
generator.addPlugin(plugin2)
/* ... */

generator.addPostProcessor(prettierJS) // Add any number of post-processor functions
generator.addPostProcessor(/* ... */)

const result = await generator.generateComponent(uidl)
```

'''
'''--- packages/teleport-component-generator/__tests__/index.ts ---
import { createComponentGenerator } from '../src/index'
import { elementNode, element, component } from '@teleporthq/teleport-uidl-builders'
import { ChunkDefinition, ChunkType, FileType, ComponentPlugin } from '@teleporthq/teleport-types'

describe('component generator', () => {
  it('creates a new instance of the generator', () => {
    const generator = createComponentGenerator()
    expect(generator.generateComponent).toBeDefined()
    expect(generator.addMapping).toBeDefined()
    expect(generator.addPlugin).toBeDefined()
    expect(generator.addPostProcessor).toBeDefined()
    expect(generator.resolveElement).toBeDefined()
  })

  describe('resolveNode', () => {
    it('resolves a node', () => {
      const generator = createComponentGenerator()

      generator.addMapping({
        elements: {
          container: {
            elementType: 'div',
            attrs: { 'data-test': { type: 'static', content: '123' } },
          },
        },
      })

      const result = generator.resolveElement(element('container', {}, []))
      expect(result.elementType).toBe('div')
      expect(result.attrs['data-test'].content).toBe('123')
    })
  })

  describe('generateComponent', () => {
    it('does not crash when no plugin is set', async () => {
      const generator = createComponentGenerator()

      const uidl = component('test', elementNode('container'))

      const result = generator.generateComponent(uidl)
      await expect(result).rejects.toThrowError('No plugins found.')
    })

    it('calls all the plugins', async () => {
      const generator = createComponentGenerator()
      const uidl = component('test', elementNode('container'))

      let pluginCalls = 0
      // dummy plugins
      const plugin1: ComponentPlugin = (structure) => {
        pluginCalls++
        return Promise.resolve(structure)
      }

      const plugin2: ComponentPlugin = (structure) => {
        pluginCalls++
        return Promise.resolve(structure)
      }

      generator.addPlugin(plugin1)
      generator.addPlugin(plugin2)

      await generator.generateComponent(uidl)

      expect(pluginCalls).toBe(2)
    })
  })

  describe('linkCodeChunks', () => {
    it('works with no postprocessor', () => {
      const generator = createComponentGenerator()
      const codeChunks: Record<string, ChunkDefinition[]> = {
        js: [
          {
            type: ChunkType.STRING,
            fileType: FileType.JS,
            name: 'chunk',
            content: 'import lib from "lib"',
            linkAfter: [],
          },
        ],
      }

      generator.addPostProcessor((_) => _)

      const result = generator.linkCodeChunks(codeChunks, 'output')
      expect(result[0].fileType).toBe('js')
      expect(result[0].content).toContain('import lib from "lib"')
      expect(result[0].name).toBe('output')
    })
  })
})

'''
'''--- packages/teleport-component-generator/package.json ---
{
  "name": "@teleporthq/teleport-component-generator",
  "version": "0.29.2",
  "description": "Bare-bone component generator on top of which you can add plugins, mappings and post processing functions",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@babel/generator": "^7.5.5",
    "@babel/types": "^7.5.5",
    "@starptech/prettyhtml-hast-to-html": "^0.10.0",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0",
    "@teleporthq/teleport-uidl-resolver": "^0.29.2",
    "@teleporthq/teleport-uidl-validator": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-component-generator/src/assembly-line/index.ts ---
import { groupChunksByFileType } from './utils'
import {
  ComponentStructure,
  ComponentPlugin,
  ComponentUIDL,
  GeneratorOptions,
} from '@teleporthq/teleport-types'
import { UIDLUtils } from '@teleporthq/teleport-shared'

export default class AssemblyLine {
  private plugins: ComponentPlugin[]

  constructor(plugins: ComponentPlugin[] = []) {
    this.plugins = plugins
  }

  public async run(
    uidl: ComponentUIDL,
    options: GeneratorOptions,
    initialStructure: ComponentStructure = {
      uidl,
      options,
      chunks: [],
      dependencies: {},
    }
  ) {
    const structure = initialStructure

    const finalStructure: ComponentStructure = await this.plugins.reduce(
      async (previousPluginOperation: Promise<ComponentStructure>, plugin) => {
        const modifiedStructure = await previousPluginOperation
        return plugin(modifiedStructure)
      },
      Promise.resolve(structure)
    )

    const externalDependencies = {
      ...UIDLUtils.extractExternalDependencies(finalStructure?.dependencies || {}),
      ...UIDLUtils.extractExternalDependencies(finalStructure.uidl?.peerDefinitions || {}),
    }
    const chunks = groupChunksByFileType(finalStructure.chunks)

    return {
      chunks,
      externalDependencies,
    }
  }

  public getPlugins() {
    return this.plugins
  }

  public addPlugin(plugin: ComponentPlugin) {
    this.plugins.push(plugin)
  }
}

'''
'''--- packages/teleport-component-generator/src/assembly-line/utils.ts ---
import { ChunkDefinition } from '@teleporthq/teleport-types'

export const groupChunksByFileType = (
  chunks: ChunkDefinition[]
): Record<string, ChunkDefinition[]> => {
  return chunks.reduce((chunksByFileType: Record<string, ChunkDefinition[]>, chunk) => {
    const fileType = chunk.fileType
    if (!chunksByFileType[fileType]) {
      chunksByFileType[fileType] = []
    }
    chunksByFileType[fileType].push(chunk)
    return chunksByFileType
  }, {})
}

'''
'''--- packages/teleport-component-generator/src/builder/generators/html-to-string.ts ---
// @ts-ignore
import toHTML from '@starptech/prettyhtml-hast-to-html'
import { CodeGeneratorFunction, HastNode } from '@teleporthq/teleport-types'

export const generator: CodeGeneratorFunction<HastNode> = (htmlObject) => {
  return toHTML(htmlObject)
}

'''
'''--- packages/teleport-component-generator/src/builder/generators/js-ast-to-code.ts ---
import { CodeGenerator } from '@babel/generator'
import * as types from '@babel/types'
import { CodeGeneratorFunction } from '@teleporthq/teleport-types'

export const generator: CodeGeneratorFunction<types.Node> = (ast) => {
  const babelGenerator = new CodeGenerator(ast, { jsescOption: { minimal: true } })
  const { code } = babelGenerator.generate()
  return code
}

'''
'''--- packages/teleport-component-generator/src/builder/index.ts ---
import { generator as babelCodeGenerator } from './generators/js-ast-to-code'
import { generator as htmlGenerator } from './generators/html-to-string'
import {
  ChunkDefinition,
  CodeGeneratorFunction,
  ChunkContent,
  ChunkType,
} from '@teleporthq/teleport-types'

export default class Builder {
  private chunkDefinitions: ChunkDefinition[] = []

  private generators: { [key: string]: CodeGeneratorFunction<ChunkContent> } = {
    [ChunkType.AST]: babelCodeGenerator,
    [ChunkType.HAST]: htmlGenerator,
    [ChunkType.STRING]: (str: string) => str, // no-op for string chunks
  }

  constructor(chunkDefinitions: ChunkDefinition[] = []) {
    this.chunkDefinitions = chunkDefinitions
  }

  /**
   * Links all chunks together based on their requirements. Returns an array
   * of ordered chunk names which need to be compiled and glued together.
   */
  public link(chunkDefinitions: ChunkDefinition[] = []): string {
    const chunks = chunkDefinitions || this.chunkDefinitions
    if (chunks.length <= 0) {
      return ''
    }

    const unprocessedChunks = chunks.map((chunk) => {
      return {
        name: chunk.name,
        type: chunk.type,
        content: chunk.content,
        linkAfter: this.cleanupInvalidChunks(chunk.linkAfter, chunks),
      }
    })

    const resultingString: string[] = []

    while (unprocessedChunks.length > 0) {
      let indexToRemove = 0
      for (let index = 0; index < unprocessedChunks.length; index++) {
        if (unprocessedChunks[index].linkAfter.length <= 0) {
          indexToRemove = index
          break
        }
      }

      if (unprocessedChunks[indexToRemove].linkAfter.length > 0) {
        console.info('Operation aborted. Reason: cyclic dependency between chunks.')
        return ''
      }

      const { type, content, name } = unprocessedChunks[indexToRemove]
      const compiledContent = this.generateByType(type, content)
      if (compiledContent) {
        resultingString.push(compiledContent + '\n')
      }

      unprocessedChunks.splice(indexToRemove, 1)
      unprocessedChunks.forEach(
        // remove the processed chunk from all the linkAfter arrays from the remaining chunks
        (ch) => (ch.linkAfter = ch.linkAfter.filter((after) => after !== name))
      )
    }

    return resultingString.join('\n')
  }

  public generateByType(type: string, content: unknown): string {
    if (!content) {
      return ''
    }
    if (Array.isArray(content)) {
      return content.map((contentItem) => this.generateByType(type, contentItem)).join('\n')
    }

    if (!this.generators[type]) {
      throw new Error(
        `Attempted to generate unknown type ${type}. Please register a generator for this type in builder/index.ts`
      )
    }

    return this.generators[type](content)
  }

  // remove invalid chunks (which did not end up being created) from the linkAfter fields
  // one use-case is when you want to remove the import plugin
  private cleanupInvalidChunks(linkAfter: string[], chunks: ChunkDefinition[]) {
    return linkAfter.filter((chunkName) => chunks.some((chunk) => chunk.name === chunkName))
  }
}

'''
'''--- packages/teleport-component-generator/src/index.ts ---
import { Validator, Parser } from '@teleporthq/teleport-uidl-validator'
import { Resolver, HTMLMapping } from '@teleporthq/teleport-uidl-resolver'
import { UIDLUtils } from '@teleporthq/teleport-shared'
import {
  ChunkDefinition,
  ComponentGenerator,
  CompiledComponent,
  PostProcessor,
  FileType,
  GeneratorOptions,
  GeneratorFactoryParams,
} from '@teleporthq/teleport-types'
import AssemblyLine from './assembly-line'
import Builder from './builder'

const createComponentGenerator = ({
  mappings = [],
  plugins = [],
  postprocessors = [],
}: Omit<GeneratorFactoryParams, 'variation'> = {}): ComponentGenerator => {
  const validator = new Validator()
  const resolver = new Resolver([HTMLMapping, ...mappings])
  const assemblyLine = new AssemblyLine(plugins)
  const chunksLinker = new Builder()
  const processors: PostProcessor[] = postprocessors

  const generateComponent = async (
    input: Record<string, unknown>,
    options: GeneratorOptions = {}
  ): Promise<CompiledComponent> => {
    let cleanedUIDL = input
    if (!options.skipValidation) {
      const schemaValidator = options?.isRootComponent
        ? validator.validateRootComponentSchema
        : validator.validateComponentSchema

      const schemaValidationResult = schemaValidator(input)
      const { componentUIDL, valid } = schemaValidationResult
      if (valid && componentUIDL) {
        cleanedUIDL = componentUIDL as unknown as Record<string, unknown>
      } else {
        throw new Error(schemaValidationResult.errorMsg)
      }
    }

    const uidl = Parser.parseComponentJSON(cleanedUIDL)
    const contentValidationResult = validator.validateComponentContent(uidl)
    if (!contentValidationResult.valid) {
      throw new Error(contentValidationResult.errorMsg)
    }

    const resolvedUIDL = resolver.resolveUIDL(uidl, options)

    if (assemblyLine.getPlugins().length <= 0) {
      throw new Error('No plugins found. Component generation cannot work without any plugins!')
    }

    const { chunks, externalDependencies } = await assemblyLine.run(resolvedUIDL, options)

    let codeChunks: Record<string, string> = {}

    Object.keys(chunks).forEach((fileType) => {
      codeChunks[fileType] = chunksLinker.link(chunks[fileType])
    })

    processors.forEach((processor) => {
      codeChunks = processor(codeChunks)
    })

    const fileName = UIDLUtils.getComponentFileName(resolvedUIDL)
    const styleFileName = UIDLUtils.getStyleFileName(resolvedUIDL)
    const templateFileName = UIDLUtils.getTemplateFileName(resolvedUIDL)
    const files = fileBundler(codeChunks, fileName, styleFileName, templateFileName)

    return {
      files,
      dependencies: externalDependencies,
    }
  }

  /**
   * Builds each individual chunk and applies the post processors
   * @param chunks All the raw chunks (ASTs, HASTs or JSS/strings)
   * @param fileName The name of the output file
   */
  const linkCodeChunks = (chunks: Record<string, ChunkDefinition[]>, fileName: string) => {
    let codeChunks: Record<string, string> = {}

    Object.keys(chunks).forEach((fileType) => {
      codeChunks[fileType] = chunksLinker.link(chunks[fileType])
    })

    processors.forEach((processor) => {
      codeChunks = processor(codeChunks)
    })

    return fileBundler(codeChunks, fileName)
  }

  const addPostProcessor = (fn: PostProcessor) => {
    processors.push(fn)
  }

  return {
    generateComponent,
    linkCodeChunks,
    resolveElement: resolver.resolveElement.bind(resolver),
    addMapping: resolver.addMapping.bind(resolver),
    addPlugin: assemblyLine.addPlugin.bind(assemblyLine),
    addPostProcessor,
  }
}

export { createComponentGenerator }

const fileBundler = (
  codeChunks: Record<string, string>,
  fileName: string,
  styleFileName?: string,
  templateFileName?: string
) => {
  return Object.keys(codeChunks).map((fileType) => {
    return {
      name: getFileName(fileType, fileName, styleFileName, templateFileName),
      fileType,
      content: codeChunks[fileType],
    }
  })
}

// Based on the file type we selected the file name associated.
// This is mostly used by project generators when a component is exported in its own folder
const getFileName = (
  fileType: string,
  fileName: string,
  styleFileName: string,
  templateFileName: string
) => {
  if (fileType === FileType.CSS) {
    return styleFileName || fileName
  }

  if (fileType === FileType.HTML) {
    return templateFileName || fileName
  }

  return fileName
}

'''
'''--- packages/teleport-component-generator/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-github-gateway/__tests__/index.ts ---
import { createGithubGateway } from '../src'
import GithubInstance from '../src/github-instance'

describe('teleport github gateway', () => {
  it('creates a new instance of gateway', () => {
    const gateway = createGithubGateway()
    expect(gateway.getRepository).toBeDefined()
    expect(gateway.getUserRepositories).toBeDefined()
    expect(gateway.createRepository).toBeDefined()
    expect(gateway.commitFilesToRepo).toBeDefined()
  })

  it('creates a new github instance', () => {
    const githubInstance = new GithubInstance()
    expect(githubInstance.authorize).toBeDefined()
    expect(githubInstance.commitFilesToRepo).toBeDefined()
    expect(githubInstance.createRepository).toBeDefined()
    expect(githubInstance.getUserRepositories).toBeDefined()
    expect(githubInstance.getRepoContent).toBeDefined()
  })
})

'''
'''--- packages/teleport-github-gateway/package.json ---
{
  "name": "@teleporthq/teleport-github-gateway",
  "version": "0.29.0",
  "description": "Teleport github gateway - use this package if you require a github integration",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-types": "^0.29.0",
    "cross-fetch": "^3.0.4",
    "octokit": "^1.7.1"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-github-gateway/src/constants.ts ---
export const DEFAULT_REF = 'main'

export const DEFAULT_COMMIT_BRANCH = 'main'

export const DEFAULT_COMMIT_MESSAGE = 'Commit made using teleportHQ'

export const DEFAULT_PATH = ''

export const GITHUB_REPOSITORY_BASE_URL = 'https://github.com'

export const FILE_EXTENTIONS_TO_DECODE = [
  'json',
  'js',
  'vue',
  'ts',
  'css',
  'html',
  'babelrc',
  'gitignore',
  'browserslist',
  'editorconfig',
]

'''
'''--- packages/teleport-github-gateway/src/github-instance.ts ---
import fetch from 'cross-fetch'
import { Octokit } from 'octokit'

import { ServiceAuth } from '@teleporthq/teleport-types'

import {
  DEFAULT_REF,
  DEFAULT_PATH,
  DEFAULT_COMMIT_MESSAGE,
  GITHUB_REPOSITORY_BASE_URL,
} from './constants'

import {
  GithubFileMeta,
  GithubRepositoryData,
  NewRepository,
  GithubCommitMeta,
  RepositoryIdentity,
  GithubFile,
  RepositoryCommitsListMeta,
  RepositoryCommitMeta,
  CreateBranchMeta,
  RepositoryMergeMeta,
  RemoveBranchMeta,
  CompareBranchesMeta,
} from './types'

export default class GithubInstance {
  private octokit: Octokit | null = null

  constructor(auth: ServiceAuth = {}) {
    this.authorize(auth)
  }

  public authorize(auth: ServiceAuth = {}) {
    if (auth.basic) {
      this.octokit = new Octokit({ auth: auth.basic })

      return
    }

    if (auth.token) {
      this.octokit = new Octokit({ auth: auth.token })
      return
    }

    this.octokit = new Octokit()
  }

  public async getRepoContent(
    repoIdentity: RepositoryIdentity
  ): Promise<GithubFile | GithubFile[]> {
    const { owner: username, repo, ref = DEFAULT_REF, path = DEFAULT_PATH } = repoIdentity

    const content = await this.octokit.rest.repos.getContent({ owner: username, repo, ref, path })
    return content.data as GithubFile | GithubFile[]
  }

  public async getUserRepositories(): Promise<GithubRepositoryData[]> {
    let page = 1
    const allRepos = []
    let currentPageRepos = await this.octokit.rest.repos.listForAuthenticatedUser({
      page,
      per_page: 50,
    })

    while (currentPageRepos.data.length) {
      page++
      allRepos.push(...currentPageRepos.data)
      currentPageRepos = await this.octokit.rest.repos.listForAuthenticatedUser({
        page,
        per_page: 50,
      })
    }

    return allRepos as GithubRepositoryData[]
  }

  public async createBranch(meta: CreateBranchMeta) {
    const { repo, owner, sourceBranch, newBranch } = meta
    const ref = await this.octokit.rest.git.getRef({ owner, repo, ref: `heads/${sourceBranch}` })

    const { data } = await this.octokit.rest.git.createRef({
      owner,
      repo,
      ref: `refs/heads/${newBranch}`,
      sha: ref.data.object.sha,
    })

    return data
  }

  public async createRepository(repository: NewRepository): Promise<GithubRepositoryData> {
    const { meta } = repository

    // Auto initialize repository by creating an initial commit with empty README
    if (typeof meta.auto_init === 'undefined' || meta.auto_init === null) {
      meta.auto_init = true
    }

    const result = await this.octokit.rest.repos.createForAuthenticatedUser(meta)
    return result.data as GithubRepositoryData
  }

  public async getRepositoryCommits(meta: RepositoryCommitsListMeta) {
    const { owner, repo } = meta
    const repository = await this.octokit.rest.repos.get({ owner, repo })
    if (!repository) {
      throw new Error('Repository does not exist')
    }

    if (meta.page || meta.perPage) {
      const params = {
        ...meta,
        per_page: meta.perPage ?? undefined,
      }

      const commits = await this.octokit.rest.repos.listCommits(params)
      return commits.data
    }

    const allCommits = []
    let page = 1
    let currentPageCommits = await this.octokit.rest.repos.listCommits({
      ...meta,
      page,
      per_page: 50,
    })

    while (currentPageCommits.data.length) {
      page++
      allCommits.push(...currentPageCommits.data)
      currentPageCommits = await this.octokit.rest.repos.listCommits({
        ...meta,
        page,
        per_page: 50,
      })
    }

    return allCommits
  }

  public async mergeRepositoryBranches(meta: RepositoryMergeMeta) {
    const { owner, repo } = meta
    const repository = await this.octokit.rest.repos.get({ owner, repo })

    if (!repository) {
      throw new Error('Repository does not exist')
    }

    const { base, head } = meta
    const mergeResult = await this.octokit.rest.repos.merge({ owner, repo, base, head })
    return mergeResult.data
  }

  public async deleteBranch(meta: RemoveBranchMeta) {
    const { owner, repo } = meta
    const repository = await this.octokit.rest.repos.get({ owner, repo })

    if (!repository) {
      throw new Error('Repository does not exist')
    }

    const removeResult = await this.octokit.rest.git.deleteRef({
      owner,
      repo,
      ref: `heads/${meta.branch}`,
    })
    return removeResult.status
  }

  public async compareBranches(meta: CompareBranchesMeta) {
    const { owner, repo, base, head } = meta
    const compare = await this.octokit.rest.repos.compareCommits({ owner, repo, base, head })

    const fileContentPromises = compare.data.files?.map(async (file) => {
      try {
        const { data } = await this.octokit.rest.repos.getContent({
          repo,
          owner,
          ref: head,
          path: file.filename,
        })

        const response = await fetch((data as { download_url: string }).download_url)
        return response.text()
      } catch (error) {
        return Promise.resolve(null)
      }
    })

    const fileContents = await Promise.all(fileContentPromises)
    compare.data.files.forEach((file, index: number) => {
      Object.assign(file, { content: fileContents[index] })
    })

    return compare.data
  }

  public async getCommitData(meta: RepositoryCommitMeta) {
    const { owner, repo, ref } = meta
    const repository = await this.octokit.rest.repos.get({ owner, repo })
    if (!repository) {
      throw new Error('Repository does not exist')
    }

    const commitDetails = await this.octokit.rest.repos.getCommit({ ref, repo, owner })
    const fileContentPromises = commitDetails.data.files?.map(async (file) => {
      const { data } = await this.octokit.rest.repos.getContent({
        repo,
        owner,
        ref,
        path: file.filename,
      })

      const response = await fetch((data as { download_url: string }).download_url)
      return response.text()
    })

    const fileContents = await Promise.all(fileContentPromises)
    commitDetails.data.files.forEach((file, index: number) => {
      Object.assign(file, { content: fileContents[index] })
    })

    return commitDetails.data
  }

  public async getRepositoryBranches(owner: string, repo: string) {
    let page = 1

    const allBranches = []
    let currentPageBranches = await this.octokit.rest.repos.listBranches({
      owner,
      repo,
      page,
      per_page: 50,
    })

    while (currentPageBranches.data.length) {
      page++
      allBranches.push(...currentPageBranches.data)
      currentPageBranches = await this.octokit.rest.repos.listBranches({
        owner,
        repo,
        page,
        per_page: 50,
      })
    }

    return allBranches
  }

  public async commitFilesToRepo(commitMeta: GithubCommitMeta): Promise<string> {
    const {
      branchName,
      isPrivate,
      files,
      extraBranchParents = [],
      repositoryIdentity,
      commitMessage = DEFAULT_COMMIT_MESSAGE,
    } = commitMeta
    const { repo, ref = DEFAULT_REF } = repositoryIdentity

    // Step -1: Make a separate request for the username if it is not provided
    let owner = repositoryIdentity.owner
    if (!owner) {
      const user = await this.octokit.rest.users.getAuthenticated()
      owner = user.data.login
    }

    // Step 0: Create repository if it does not exist
    const repository = await this.ensureRepoExists(owner, repo, isPrivate)

    // Step 1: Create branch if it does not exist
    await this.ensureBranchExists(owner, repo, ref, branchName)

    // Step 2: Get branch commit SHA
    const commitSHA = await this.getBranchHeadCommitSHA(owner, repo, branchName)
    const extraParentsShaPromises = extraBranchParents.map((branch) =>
      this.getBranchHeadCommitSHA(owner, repo, branch)
    )
    const extraSHAs = await Promise.all(extraParentsShaPromises)
    const parents = [commitSHA, ...extraSHAs]

    // Step 3: Get current tree SHA
    const treeSHA = await this.getCommitTreeSHA(owner, repo, commitSHA)

    // Step 4: Prepare files for github
    const filesForGithub = await this.createFiles(owner, repo, files)

    // Step 5: Create new github tree
    const newTreeSHA = await this.createTree(owner, repo, filesForGithub, treeSHA)

    // Step 6: Create commit
    const newCommit = await this.octokit.rest.git.createCommit({
      owner,
      repo,
      parents,
      message: commitMessage,
      tree: newTreeSHA,
    })
    const newCommitSHA = newCommit.data.sha

    // Step 7: Update head
    await this.octokit.rest.git.updateRef({
      owner,
      repo,
      ref: `heads/${branchName}`,
      sha: newCommitSHA,
    })

    return `${GITHUB_REPOSITORY_BASE_URL}/${repository.full_name}`
  }

  private async ensureRepoExists(
    username: string,
    repo: string,
    isPrivate: boolean
  ): Promise<GithubRepositoryData> {
    const repositories = await this.getUserRepositories()
    const existingRepo = repositories.find(
      (repoMeta: GithubRepositoryData) => repoMeta.name === repo
    )
    if (existingRepo) {
      return existingRepo
    }

    return this.createRepository({ username, meta: { name: repo, private: isPrivate } })
  }

  private async ensureBranchExists(owner: string, repo: string, ref: string, branch: string) {
    const existingBranches = await this.getRepositoryBranches(owner, repo)
    const branchExists = existingBranches.some((branchMeta) => branchMeta.name === branch)

    if (!branchExists) {
      this.octokit.rest.git.createRef({
        owner,
        repo,
        ref: `refs/heads/${branch}`,
        sha: ref,
      })
    }
  }

  private async getBranchHeadCommitSHA(
    owner: string,
    repo: string,
    branch: string
  ): Promise<string> {
    const { data } = await this.octokit.rest.git.getRef({ owner, repo, ref: `heads/${branch}` })
    return data.object.sha
  }

  private async getCommitTreeSHA(owner: string, repo: string, commitSHA: string): Promise<string> {
    const { data } = await this.octokit.rest.git.getCommit({
      owner,
      repo,
      commit_sha: commitSHA,
    })

    return data.tree.sha
  }

  private async createFiles(
    owner: string,
    repo: string,
    files: GithubFile[]
  ): Promise<GithubFileMeta[]> {
    const promises = files.map((file) => {
      return this.createFile(owner, repo, file)
    })

    return Promise.all(promises)
  }

  private async createFile(owner: string, repo: string, file: GithubFile): Promise<GithubFileMeta> {
    const { data } = await this.octokit.rest.git.createBlob({
      owner,
      repo,
      content: file.content,
      encoding: file.encoding,
    })

    return {
      sha: file.status === 'deleted' ? null : data.sha,
      path: file.name,
      mode: '100644',
      type: 'blob',
    }
  }

  private async createTree(
    owner: string,
    repo: string,
    files: GithubFileMeta[],
    treeSHA?: string
  ): Promise<string> {
    const tree = await this.octokit.rest.git.createTree({
      owner,
      repo,
      base_tree: treeSHA,
      // @ts-ignore
      tree: files,
    })
    return tree.data.sha
  }
}

'''
'''--- packages/teleport-github-gateway/src/index.ts ---
import { ServiceAuth } from '@teleporthq/teleport-types'

import GithubInstance from './github-instance'
import { createEmptyFolder, fetchFilesContent } from './utils'

import {
  GithubGatewayFactory,
  RepositoryIdentity,
  GithubFile,
  NewRepository,
  GithubCommitMeta,
  RepositoryCommitsListMeta,
  RepositoryCommitMeta,
  CreateBranchMeta,
  RepositoryMergeMeta,
  RemoveBranchMeta,
  CompareBranchesMeta,
} from './types'

export const createGithubGateway: GithubGatewayFactory = (auth: ServiceAuth = {}) => {
  const githubInstance = new GithubInstance(auth)

  const getRepository = async (repoIdentity: RepositoryIdentity, authData?: ServiceAuth) => {
    authorizeGithubInstance(authData)

    const data = await githubInstance.getRepoContent(repoIdentity)

    const { repo } = repoIdentity
    const emptyFolder = createEmptyFolder(repo)

    const filesFetcherMeta = { githubInstance, userRepositoryIdentity: repoIdentity }
    return fetchFilesContent(data as GithubFile[], emptyFolder, filesFetcherMeta)
  }

  const getUserRepositories = async (authData?: ServiceAuth) => {
    authorizeGithubInstance(authData)
    return githubInstance.getUserRepositories()
  }

  const createRepository = async (repository: NewRepository, authData?: ServiceAuth) => {
    authorizeGithubInstance(authData)
    return githubInstance.createRepository(repository)
  }

  const commitFilesToRepo = async (commitMeta: GithubCommitMeta, authData: ServiceAuth) => {
    authorizeGithubInstance(authData)
    return githubInstance.commitFilesToRepo(commitMeta)
  }

  const getRepositoryCommits = async (meta: RepositoryCommitsListMeta, authData: ServiceAuth) => {
    authorizeGithubInstance(authData)
    return githubInstance.getRepositoryCommits(meta)
  }

  const createBranch = async (meta: CreateBranchMeta, authData: ServiceAuth) => {
    authorizeGithubInstance(authData)
    return githubInstance.createBranch(meta)
  }

  const mergeRepositoryBranches = async (meta: RepositoryMergeMeta, authData: ServiceAuth) => {
    authorizeGithubInstance(authData)
    return githubInstance.mergeRepositoryBranches(meta)
  }

  const getRepositoryBranches = async (owner: string, repo: string, authData: ServiceAuth) => {
    authorizeGithubInstance(authData)
    return githubInstance.getRepositoryBranches(owner, repo)
  }

  const deleteRepositoryBranch = async (meta: RemoveBranchMeta, authData: ServiceAuth) => {
    authorizeGithubInstance(authData)
    return githubInstance.deleteBranch(meta)
  }

  const getCommitData = async (meta: RepositoryCommitMeta, authData: ServiceAuth) => {
    authorizeGithubInstance(authData)
    return githubInstance.getCommitData(meta)
  }

  const compare = async (meta: CompareBranchesMeta, authData: ServiceAuth) => {
    authorizeGithubInstance(authData)
    return githubInstance.compareBranches(meta)
  }

  const authorizeGithubInstance = (authData?: ServiceAuth): void => {
    if (!authData) {
      return
    }
    githubInstance.authorize(authData)
  }

  return {
    getRepository,
    getUserRepositories,
    createRepository,
    getRepositoryCommits,
    createBranch,
    getRepositoryBranches,
    mergeRepositoryBranches,
    deleteRepositoryBranch,
    commitFilesToRepo,
    getCommitData,
    compare,
    authorizeGithubInstance,
  }
}

export { GithubFile, RepositoryIdentity, GithubCommitMeta, CreateBranchMeta, RepositoryCommitMeta }

'''
'''--- packages/teleport-github-gateway/src/types.ts ---
/* tslint:disable no-any */
import { ServiceAuth, GeneratedFolder, FileEncoding } from '@teleporthq/teleport-types'
import GithubInstance from './github-instance'

export type GithubGatewayFactory = (auth?: ServiceAuth) => GithubGateway

export interface GithubGateway {
  getRepository: (repo: RepositoryIdentity, auth?: ServiceAuth) => Promise<GeneratedFolder>
  getUserRepositories: (auth?: ServiceAuth) => Promise<GithubRepositoryData[]>
  commitFilesToRepo: (commitMeta: GithubCommitMeta, auth?: ServiceAuth) => Promise<string>
  createRepository: (repository: NewRepository, auth?: ServiceAuth) => Promise<GithubRepositoryData>
  getRepositoryCommits: (meta: RepositoryCommitsListMeta, authData: ServiceAuth) => Promise<any>
  createBranch: (meta: CreateBranchMeta, authData: ServiceAuth) => Promise<any>
  mergeRepositoryBranches: (meta: RepositoryMergeMeta, authData: ServiceAuth) => Promise<any>
  deleteRepositoryBranch: (meta: RemoveBranchMeta, authData: ServiceAuth) => Promise<any>
  getRepositoryBranches: (owner: string, repo: string, authData: ServiceAuth) => Promise<any>
  getCommitData: (meta: RepositoryCommitMeta, authData: ServiceAuth) => Promise<any>
  compare: (meta: CompareBranchesMeta, authData: ServiceAuth) => Promise<any>
  authorizeGithubInstance: (authData?: ServiceAuth) => void
}

export interface RepositoryIdentity {
  owner: string
  repo: string
  ref?: string
  path?: string
}

export interface GithubCommitMeta {
  files: GithubFile[]
  repositoryIdentity: RepositoryIdentity
  branchName: string
  extraBranchParents?: string[]
  commitMessage?: string
  isPrivate?: boolean
}

export interface CreateBranchMeta {
  repo: string
  owner: string
  sourceBranch: string
  newBranch: string
}

export interface RepositoryCommitMeta {
  repo: string
  owner: string
  ref: string
}

export interface RepositoryCommitsListMeta {
  repo: string
  owner: string
  perPage?: number
  page?: number
  sha?: string
  path?: string
}

export interface RepositoryMergeMeta {
  repo: string
  owner: string
  base: string
  head: string
}

export interface RemoveBranchMeta {
  repo: string
  owner: string
  branch: string
}

export interface CompareBranchesMeta {
  repo: string
  owner: string
  base: string
  head: string
}

export interface GithubFile {
  content: string
  name: string
  path?: string
  encoding?: FileEncoding
  type?: string
  url?: string
  git_url?: string
  sha?: string
  size?: number
  status?: string
}

export interface GithubFileMeta {
  sha: string
  path: string
  mode: string
  type: string
}

export interface NewRepository {
  username: string
  meta: {
    name: string
    description?: string
    private?: boolean
    auto_init?: boolean
  }
}

export interface GithubRepositoryData {
  id: number
  language: string
  license: Record<string, string>
  default_branch: string
  clone_url: string
  created_at: string
  description: string
  full_name: string
  name: string
}

export interface FilesFetcherMeta {
  userRepositoryIdentity: RepositoryIdentity
  githubInstance: GithubInstance
}

export interface GithubCreateResponse {
  data: {
    sha: string
  }
}

'''
'''--- packages/teleport-github-gateway/src/utils.ts ---
import { GeneratedFolder, GeneratedFile, FileEncoding } from '@teleporthq/teleport-types'
import { GithubFile, FilesFetcherMeta } from './types'

import { DEFAULT_REF, FILE_EXTENTIONS_TO_DECODE } from './constants'

export const createEmptyFolder = (name: string): GeneratedFolder => {
  return { files: [], subFolders: [], name }
}

export const fetchFilesContent = async (
  githubFiles: GithubFile[],
  folder: GeneratedFolder,
  meta: FilesFetcherMeta
): Promise<GeneratedFolder> => {
  const { githubInstance, userRepositoryIdentity } = meta
  const { files, directories } = groupGithubFilesByType(githubFiles)

  const filesContents = await getFilesContent(files, meta)
  folder.files = folder.files.concat(filesContents)

  if (!directories || !directories.length) {
    return folder
  }

  for (const directory of directories) {
    const { name, path } = directory

    const directoryFilesParams = { ...userRepositoryIdentity, path }
    const data = await githubInstance.getRepoContent(directoryFilesParams)

    const newFolder = createEmptyFolder(name)
    const folderWithFiles = await fetchFilesContent(data as GithubFile[], newFolder, meta)

    folder.subFolders.push(folderWithFiles)
  }

  return folder
}

const groupGithubFilesByType = (files: GithubFile[]): Record<string, GithubFile[]> => {
  return files.reduce(
    (acc: { files: GithubFile[]; directories: GithubFile[] }, file) => {
      if (file.type === 'file') {
        acc.files.push(file)
      }
      if (file.type === 'dir') {
        acc.directories.push(file)
      }
      return acc
    },
    { files: [], directories: [] }
  )
}

const getFilesContent = async (
  files: GithubFile[],
  meta: FilesFetcherMeta
): Promise<GeneratedFile[]> => {
  const promises = files.map((file) => {
    return getFileContent(file, meta)
  })

  return Promise.all(promises)
}

const getFileContent = async (
  githubFile: GithubFile,
  meta: FilesFetcherMeta
): Promise<GeneratedFile> => {
  const { path, name } = githubFile

  const { githubInstance, userRepositoryIdentity } = meta
  const { ref = DEFAULT_REF } = userRepositoryIdentity

  const githubFileMetadata = { ...userRepositoryIdentity, ref, path }
  const data = await githubInstance.getRepoContent(githubFileMetadata)

  let { content, encoding } = data as GithubFile

  const splittedName = name.split('.')
  const fileType = splittedName.pop()
  const fileName = splittedName.join('.')

  if (fileMustBeDecoded(fileType, encoding)) {
    content = decodeBase64Content(content)
    encoding = 'utf8'
  }

  return {
    content,
    fileType,
    name: fileName,
    contentEncoding: encoding,
  }
}

const fileMustBeDecoded = (fileType: string, encoding: FileEncoding): boolean => {
  return encoding === 'base64' && FILE_EXTENTIONS_TO_DECODE.indexOf(fileType) !== -1
}

const decodeBase64Content = (base64Content: string): string => {
  return new Buffer(base64Content, 'base64').toString()
}

'''
'''--- packages/teleport-github-gateway/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-plugin-angular-base-component/README.md ---
# teleport-plugin-angular-base-component

A plugin for handling the skeleton/baseline of a Angular component.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-plugin-angular-base-component
```
or
```bash
yarn add @teleporthq/teleport-plugin-angular-base-component
```

'''
'''--- packages/teleport-plugin-angular-base-component/__tests__/index.ts ---
import { createAngularComponentPlugin } from '../src/index'
import { component, elementNode } from '@teleporthq/teleport-uidl-builders'
import { ComponentStructure, ChunkType } from '@teleporthq/teleport-types'

describe('plugin-angular-base-component', () => {
  const plugin = createAngularComponentPlugin({
    angularTemplateChunkName: 'template-chunk',
    exportClassChunk: 'angular-ts-chunk',
    componentDecoratorChunkName: 'component-decorator',
    tsChunkAfter: ['import-lib', 'import-pack', 'import-local'],
  })

  it('outputs two AST chunks with the corresponding chunk names', async () => {
    const structure: ComponentStructure = {
      chunks: [],
      options: {},
      uidl: component('Test', elementNode('container')),
      dependencies: {},
    }
    const result = await plugin(structure)

    // no change to the input UIDL
    expect(JSON.stringify(result.uidl)).toBe(JSON.stringify(structure.uidl))

    // AST chunks created
    expect(result.chunks.length).toBe(3)
    expect(result.chunks[0].type).toBe(ChunkType.HAST)
    expect(result.chunks[0].content).toBeDefined()
    expect(result.chunks[0].name).toBe('template-chunk')
    expect(result.chunks[1].type).toBe(ChunkType.AST)
    expect(result.chunks[1].content).toBeDefined()
    expect(result.chunks[1].name).toBe('component-decorator')
    expect(result.chunks[2].type).toBe(ChunkType.AST)
    expect(result.chunks[2].content).toBeDefined()
    expect(result.chunks[2].name).toBe('angular-ts-chunk')
  })

  it('works with state definitions', async () => {
    const structure: ComponentStructure = {
      chunks: [],
      options: {},
      uidl: component(
        'Test',
        elementNode('container'),
        {},
        {
          isVisible: {
            type: 'boolean',
            defaultValue: false,
          },
        }
      ),
      dependencies: {},
    }
    const result = await plugin(structure)

    // AST chunks created
    expect(result.chunks.length).toBe(3)
    expect(result.chunks[0].type).toBe(ChunkType.HAST)
    expect(result.chunks[0].content).toBeDefined()
    expect(result.chunks[0].name).toBe('template-chunk')
    expect(result.chunks[1].type).toBe(ChunkType.AST)
    expect(result.chunks[1].content).toBeDefined()
    expect(result.chunks[1].name).toBe('component-decorator')
    expect(result.chunks[2].type).toBe(ChunkType.AST)
    expect(result.chunks[2].content).toBeDefined()
    expect(result.chunks[2].name).toBe('angular-ts-chunk')
  })
})

'''
'''--- packages/teleport-plugin-angular-base-component/package.json ---
{
  "name": "@teleporthq/teleport-plugin-angular-base-component",
  "version": "0.29.0",
  "description": "A plugin for handling the skeleton/baseline of a Angular Component",
  "author": "teleportHQ",
  "homepage": "https://teleporthq.io/",
  "license": "MIT",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "publishConfig": {
    "access": "public"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@babel/types": "^7.5.5",
    "@teleporthq/teleport-plugin-common": "^0.29.0",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-plugin-angular-base-component/src/constants.ts ---
import { UIDLDependency } from '@teleporthq/teleport-types'

export const DEFAULT_ANGULAR_TEMPLATE_CHUNK_NAME = 'template-chunk'

export const DEFAULT_ANGULAR_TS_CHUNK_NAME = 'angular-ts-chunk'

export const DEFAULT_ANGULAR_DECORATOR_CHUNK_NAME = 'component-decorator'

export const DEFAULT_TS_CHUNK_AFTER = ['import-lib', 'import-pack', 'import-local']

export const ANGULAR_CORE_DEPENDENCY: UIDLDependency = {
  type: 'library',
  path: '@angular/core',
  version: '8.1.0',
  meta: {
    namedImport: true,
  },
}

export const ANGULAR_PLATFORM_BROWSER: UIDLDependency = {
  type: 'library',
  path: '@angular/platform-browser',
  version: '8.1.0',
  meta: {
    namedImport: true,
  },
}

'''
'''--- packages/teleport-plugin-angular-base-component/src/index.ts ---
import {
  ComponentPluginFactory,
  ComponentPlugin,
  UIDLElementNode,
  UIDLEventHandlerStatement,
  ChunkType,
  FileType,
} from '@teleporthq/teleport-types'
import { UIDLUtils } from '@teleporthq/teleport-shared'
import { ASTBuilders, createHTMLTemplateSyntax } from '@teleporthq/teleport-plugin-common'

import { generateExportAST } from './utils'

import {
  DEFAULT_TS_CHUNK_AFTER,
  ANGULAR_CORE_DEPENDENCY,
  ANGULAR_PLATFORM_BROWSER,
  DEFAULT_ANGULAR_TS_CHUNK_NAME,
  DEFAULT_ANGULAR_TEMPLATE_CHUNK_NAME,
  DEFAULT_ANGULAR_DECORATOR_CHUNK_NAME,
} from './constants'

interface AngularPluginConfig {
  angularTemplateChunkName: string
  exportClassChunk: string
  componentDecoratorChunkName: string
  tsChunkAfter: string[]
}

export const createAngularComponentPlugin: ComponentPluginFactory<AngularPluginConfig> = (
  config
) => {
  const {
    angularTemplateChunkName = DEFAULT_ANGULAR_TEMPLATE_CHUNK_NAME,
    exportClassChunk = DEFAULT_ANGULAR_TS_CHUNK_NAME,
    componentDecoratorChunkName = DEFAULT_ANGULAR_DECORATOR_CHUNK_NAME,
    tsChunkAfter = DEFAULT_TS_CHUNK_AFTER,
  } = config || {}

  const angularComponentPlugin: ComponentPlugin = async (structure) => {
    const { uidl, chunks, dependencies } = structure
    const { seo = {}, stateDefinitions = {}, propDefinitions = {} } = uidl

    dependencies.Component = ANGULAR_CORE_DEPENDENCY

    if (seo.title) {
      dependencies.Title = ANGULAR_PLATFORM_BROWSER
    }

    if (seo.metaTags && seo.metaTags.length > 0) {
      dependencies.Meta = ANGULAR_PLATFORM_BROWSER
    }

    const props = Object.values(propDefinitions)
    if (props.length > 0) {
      const functionalProps = props.filter((prop) => prop.type === 'func')
      if (functionalProps.length > 0) {
        dependencies.Output = ANGULAR_CORE_DEPENDENCY
        dependencies.EventEmitter = ANGULAR_CORE_DEPENDENCY
      }
      if (props.length - functionalProps.length > 0) {
        dependencies.Input = ANGULAR_CORE_DEPENDENCY
      }
    }

    const templateLookup: { [key: string]: unknown } = {}
    const dataObject: Record<string, unknown> = {}
    const methodsObject: Record<string, UIDLEventHandlerStatement[]> = {}

    const templateContent = createHTMLTemplateSyntax(
      uidl.node,
      {
        templateLookup,
        dependencies,
        dataObject,
        methodsObject,
      },
      {
        interpolation: (value) => `{{ ${value} }}`,
        eventBinding: (value) => `(${value})`,
        eventHandlersBindingMode: (value) => `${value}()`,
        valueBinding: (value, node?: UIDLElementNode) =>
          node && node.content.dependency ? `[${value}]` : `[attr.${value}]`,
        eventEmmitter: (value) => `this.$emit('${value}')`,
        conditionalAttr: '*ngIf',
        repeatAttr: '*ngFor',
        repeatIterator: (iteratorName, iteratedCollection, useIndex) => {
          const index = useIndex ? `; index as index` : ''
          return `let ${iteratorName} of ${iteratedCollection}${index}`
        },
        customElementTagName: (value) => UIDLUtils.createWebComponentFriendlyName(value),
        dependencyHandling: 'ignore',
        domHTMLInjection: `[innerHTML]`,
      }
    )

    chunks.push({
      type: ChunkType.HAST,
      name: angularTemplateChunkName,
      fileType: FileType.HTML,
      meta: {
        nodesLookup: templateLookup,
      },
      content: templateContent,
      linkAfter: [],
    })

    const componentName = UIDLUtils.getComponentClassName(uidl)
    const params = {
      selector: UIDLUtils.createWebComponentFriendlyName(componentName),
      templateUrl: `${UIDLUtils.getComponentFileName(uidl)}.${FileType.HTML}`,
    }
    const componentDecoratorAST = ASTBuilders.createComponentDecorator(params)

    chunks.push({
      type: ChunkType.AST,
      name: componentDecoratorChunkName,
      fileType: FileType.TS,
      linkAfter: tsChunkAfter,
      content: componentDecoratorAST,
    })

    /* We need to import EventEmitter and Output in Angular to temit events to the parent
    So, to make sure if we need to import them we need to loop through all the methods and
    check if any of them are referring to the function that is passed as prop*/
    if (Object.keys(methodsObject).length > 0) {
      const shouldImportEventEmitter = Object.keys(methodsObject).some((method) => {
        const statements = methodsObject[method]
        if (statements.length > 0) {
          return statements.some((event) => event.type === 'propCall')
        }
        return false
      })
      if (shouldImportEventEmitter) {
        dependencies.Output = ANGULAR_CORE_DEPENDENCY
        dependencies.EventEmitter = ANGULAR_CORE_DEPENDENCY
      }
    }

    const exportAST = generateExportAST(
      uidl,
      propDefinitions,
      stateDefinitions,
      dataObject,
      methodsObject
    )

    chunks.push({
      type: ChunkType.AST,
      name: exportClassChunk,
      fileType: FileType.TS,
      linkAfter: tsChunkAfter,
      content: exportAST,
    })

    return structure
  }

  return angularComponentPlugin
}

export default createAngularComponentPlugin()

'''
'''--- packages/teleport-plugin-angular-base-component/src/utils.ts ---
import * as types from '@babel/types'
import { UIDLUtils } from '@teleporthq/teleport-shared'
import { ASTUtils, ASTBuilders } from '@teleporthq/teleport-plugin-common'
import {
  UIDLMetaTag,
  ComponentUIDL,
  UIDLComponentSEO,
  UIDLPropDefinition,
  UIDLStateDefinition,
  UIDLEventHandlerStatement,
  UIDLPropCallEvent,
} from '@teleporthq/teleport-types'

export const generateExportAST = (
  uidl: ComponentUIDL,
  propDefinitions: Record<string, UIDLPropDefinition>,
  stateDefinitions: Record<string, UIDLStateDefinition>,
  dataObject: Record<string, unknown>,
  methodsObject: Record<string, UIDLEventHandlerStatement[]>,
  t = types
) => {
  const componentName = UIDLUtils.getComponentClassName(uidl)
  let angularMethodsAST: types.ClassMethod[] = []
  if (Object.keys(methodsObject).length > 0) {
    angularMethodsAST = createMethodsObject(methodsObject, propDefinitions)
  }

  const { importDefinitions = {} } = uidl

  const propDeclaration = Object.keys(propDefinitions).map((propKey) => {
    const definition = propDefinitions[propKey]
    // By default any prop with type function is used to emitting events to the callee
    if (definition.type === 'func') {
      return t.classProperty(
        t.identifier(propKey),
        t.newExpression(t.identifier('EventEmitter'), []),
        t.typeAnnotation(
          t.genericTypeAnnotation(
            t.identifier('EventEmitter'),
            t.typeParameterInstantiation([t.anyTypeAnnotation()])
          )
        ),
        [t.decorator(t.callExpression(t.identifier('Output'), []))]
      )
    }

    return t.classProperty(
      t.identifier(propKey),
      ASTUtils.convertValueToLiteral(propDefinitions[propKey].defaultValue),
      t.tsTypeAnnotation(ASTUtils.getTSAnnotationForType(propDefinitions[propKey].type)),
      [t.decorator(t.callExpression(t.identifier('Input'), []))]
    )
  })

  const propertyDecleration = Object.keys(stateDefinitions).map((stateKey) =>
    t.classProperty(
      t.identifier(stateKey),
      ASTUtils.convertValueToLiteral(stateDefinitions[stateKey].defaultValue),
      t.tsTypeAnnotation(ASTUtils.getTSAnnotationForType(stateDefinitions[stateKey].type))
    )
  )

  const dataDeclaration = Object.keys(dataObject).map((dataKey) => {
    return t.classProperty(
      t.identifier(dataKey),
      ASTUtils.convertValueToLiteral(dataObject[dataKey]),
      t.tsTypeAnnotation(ASTUtils.getTSAnnotationForType(typeof dataObject[dataKey]))
    )
  })

  const referencedImportDeclarations = Object.keys(importDefinitions).reduce((acc, importRef) => {
    if (!importDefinitions[importRef]?.meta?.importJustPath) {
      acc.push(t.classProperty(t.identifier(importRef), t.identifier(importRef)))
    }
    return acc
  }, [])

  const classBodyAST = (componentUIDL: ComponentUIDL) => {
    return t.classBody([
      ...propDeclaration,
      ...propertyDecleration,
      ...dataDeclaration,
      ...referencedImportDeclarations,
      constructorAST(componentUIDL.seo),
      ...angularMethodsAST,
    ])
  }

  return t.exportNamedDeclaration(
    t.classDeclaration(t.identifier(componentName), null, classBodyAST(uidl), null),
    [],
    null
  )
}

const constructorAST = (seo: UIDLComponentSEO, t = types) => {
  const params = []
  const blockStatements = []
  if (seo) {
    const { title, metaTags } = seo

    if (title) {
      params.push(t.identifier(`private title: Title`))
      blockStatements.push(
        t.expressionStatement(
          t.callExpression(
            t.memberExpression(
              t.memberExpression(t.thisExpression(), t.identifier('title')),
              t.identifier('setTitle')
            ),
            [t.stringLiteral(title)]
          )
        )
      )
    }

    if (metaTags && metaTags.length > 0) {
      params.push(t.identifier(`private meta: Meta`))

      blockStatements.push(
        t.expressionStatement(
          t.callExpression(
            t.memberExpression(
              t.memberExpression(t.thisExpression(), t.identifier('meta')),
              t.identifier('addTags')
            ),
            [t.arrayExpression(constructMetaTagAST(metaTags))]
          )
        )
      )
    }
  }

  return t.classMethod(
    'constructor',
    t.identifier('constructor'),
    params,
    t.blockStatement(blockStatements)
  )
}

const constructMetaTagAST = (metaTags: UIDLMetaTag[]) => {
  const metaTagsAST: types.ObjectExpression[] = []
  metaTags.forEach((tag: UIDLMetaTag) => {
    metaTagsAST.push(ASTUtils.objectToObjectExpression(tag))
  })
  return metaTagsAST
}

const createMethodsObject = (
  methods: Record<string, UIDLEventHandlerStatement[]>,
  propDefinitions: Record<string, UIDLPropDefinition>,
  t = types
) => {
  return Object.keys(methods).map((eventKey) => {
    const astStatements: types.ExpressionStatement[] = []
    methods[eventKey].map((statement) => {
      const astStatement =
        statement.type === 'propCall'
          ? createPropCallStatement(statement, propDefinitions)
          : ASTBuilders.createStateChangeStatement(statement)

      if (astStatement) {
        astStatements.push(astStatement)
      }
    })
    return t.classMethod('method', t.identifier(eventKey), [], t.blockStatement(astStatements))
  })
}

export const createPropCallStatement = (
  eventHandlerStatement: UIDLPropCallEvent,
  propDefinitions: Record<string, UIDLPropDefinition>,
  t = types
) => {
  const { calls: propFunctionKey } = eventHandlerStatement

  if (!propFunctionKey) {
    console.warn(`No prop definition referenced under the "calls" field`)
    return null
  }

  const propDefinition = propDefinitions[propFunctionKey]

  if (!propDefinition) {
    console.warn(`No prop definition was found for function "${propFunctionKey}"`)
    return null
  }

  return t.expressionStatement(
    t.callExpression(
      t.memberExpression(
        t.memberExpression(t.thisExpression(), t.identifier(propFunctionKey)),
        t.identifier('emit')
      ),
      []
    )
  )
}

'''
'''--- packages/teleport-plugin-angular-base-component/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-plugin-angular-module/README.md ---
# `teleport-plugin-angular-module-generator`

A plugin for generating modules in Angular. Generates individual page, component and root level module with routing and dependencies.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-plugin-angular-module-generator
```
or
```bash
yarn add @teleporthq/teleport-plugin-angular-module-generator
```

'''
'''--- packages/teleport-plugin-angular-module/__tests__/index.ts ---
import { ComponentStructure, ComponentUIDL, ChunkType, FileType } from '@teleporthq/teleport-types'
import { createAngularModulePlugin } from '../src/index'
import projectUIDL from '../../../examples/test-samples/project-sample.json'

describe('Testing the functionality for Angular Modules', () => {
  it('Should add Angular dependencies for root module', async () => {
    const rootModule = createAngularModulePlugin({ moduleType: 'root' })
    const rootUIDL = projectUIDL.root as ComponentUIDL
    const structure: ComponentStructure = {
      uidl: rootUIDL,
      options: {},
      chunks: [],
      dependencies: {},
    }

    const { dependencies, chunks } = await rootModule(structure)

    expect(chunks.length).toBe(2)
    expect(Object.keys(dependencies).length).toBe(6)
    expect(chunks[0].type).toBe(ChunkType.AST)
    expect(chunks[0].fileType).toBe(FileType.TS)
    expect(chunks[0].content).toBeDefined()
    expect(chunks[1].type).toBe(ChunkType.AST)
    expect(chunks[1].fileType).toBe(FileType.TS)
    expect(chunks[1].content).toBeDefined()
  })

  it('Should add Angular dependencies for component module', async () => {
    const componentUIDL = projectUIDL.components.OneComponent as ComponentUIDL
    const componentPlugin = createAngularModulePlugin({ moduleType: 'component' })
    const structure: ComponentStructure = {
      uidl: componentUIDL,
      options: { moduleComponents: { OneComponent: componentUIDL } },
      chunks: [],
      dependencies: {},
    }

    const { dependencies, chunks } = await componentPlugin(structure)

    expect(Object.keys(dependencies).length).toBe(5)
    expect(chunks.length).toBe(1)
    expect(chunks[0].type).toBe(ChunkType.AST)
    expect(chunks[0].fileType).toBe(FileType.TS)
    expect(chunks[0].content).toBeDefined()
  })

  it('Should add Angular dependencies for page module', async () => {
    const componentUIDL = projectUIDL.components.OneComponent as ComponentUIDL
    componentUIDL.outputOptions = componentUIDL.outputOptions || {}
    componentUIDL.name = 'OneComponent'
    componentUIDL.outputOptions.fileName = 'OneComponent'
    componentUIDL.outputOptions.moduleName = 'OneComponentModule'

    const componentPlugin = createAngularModulePlugin({ moduleType: 'page' })
    const structure: ComponentStructure = {
      uidl: componentUIDL,
      options: {},
      chunks: [],
      dependencies: {},
    }

    const { dependencies, chunks } = await componentPlugin(structure)
    const pageComponent = dependencies.OneComponent

    expect(Object.keys(dependencies).length).toBe(6)
    expect(chunks.length).toBe(2)
    expect(chunks[0].type).toBe(ChunkType.AST)
    expect(chunks[0].fileType).toBe(FileType.TS)
    expect(chunks[0].content).toBeDefined()
    expect(chunks[1].type).toBe(ChunkType.AST)
    expect(chunks[1].fileType).toBe(FileType.TS)
    expect(chunks[1].content).toBeDefined()
    expect(pageComponent.type).toBe('local')
  })
})

'''
'''--- packages/teleport-plugin-angular-module/package.json ---
{
  "name": "@teleporthq/teleport-plugin-angular-module",
  "version": "0.29.2",
  "description": "A Plugin for generating modules for angular",
  "author": "teleportHQ",
  "homepage": "https://teleporthq.io/",
  "license": "MIT",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "publishConfig": {
    "access": "public"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "dependencies": {
    "@babel/types": "^7.5.5",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-plugin-angular-module/src/constants.ts ---
import { UIDLDependency } from '@teleporthq/teleport-types'

export const DEFAULT_MODULE_CHUNK_NAME = 'ts-module'

export const DEFAULT_MODULE_DECORATOR_CHUNK_NAME = 'module-decorator'

export const DEFAULT_IMPORT_CHUNK_NAME = 'import-local'

export const ANGULAR_CORE_DEPENDENCY: UIDLDependency = {
  type: 'library',
  path: '@angular/core',
  version: '8.1.0',
  meta: {
    namedImport: true,
  },
}

export const ANGULAR_PLATFORM_BROWSER: UIDLDependency = {
  type: 'library',
  path: '@angular/platform-browser',
  version: '8.1.0',
  meta: {
    namedImport: true,
  },
}

export const ANGULAR_ROUTER: UIDLDependency = {
  type: 'library',
  path: '@angular/router',
  version: '8.1.0',
  meta: {
    namedImport: true,
  },
}

export const ANGULAR_COMMON_MODULE: UIDLDependency = {
  type: 'library',
  path: '@angular/common',
  version: '8.1.0',
  meta: {
    namedImport: true,
  },
}

export const APP_COMPONENT: UIDLDependency = {
  type: 'local',
  path: `./app.component`,
  meta: {
    namedImport: true,
  },
}

'''
'''--- packages/teleport-plugin-angular-module/src/index.ts ---
import * as types from '@babel/types'
import { UIDLUtils } from '@teleporthq/teleport-shared'
import {
  ComponentPluginFactory,
  ComponentPlugin,
  ChunkType,
  FileType,
  UIDLDependency,
  UIDLRootComponent,
} from '@teleporthq/teleport-types'
import { relative, join } from 'path'

import {
  createRoutesAST,
  createPageRouteAST,
  createExportModuleAST,
  constructLocalDependency,
  createRootModuleDecorator,
  constructComponentDependency,
  createComponentModuleDecorator,
  createPageModuleModuleDecorator,
  constructRouteForComponentsModule,
  extractExtrenalImportsFromComponents,
  extractExternalDependenciesFromPage,
} from './utils'
import {
  APP_COMPONENT,
  ANGULAR_ROUTER,
  ANGULAR_COMMON_MODULE,
  ANGULAR_CORE_DEPENDENCY,
  ANGULAR_PLATFORM_BROWSER,
  DEFAULT_MODULE_CHUNK_NAME,
  DEFAULT_IMPORT_CHUNK_NAME,
  DEFAULT_MODULE_DECORATOR_CHUNK_NAME,
} from './constants'

interface AngularRoutingConfig {
  moduleChunkName: string
  decoratorChunkName: string
  importChunkName: string
  moduleType: 'root' | 'component' | 'page'
}

export const createAngularModulePlugin: ComponentPluginFactory<AngularRoutingConfig> = (config) => {
  const {
    moduleChunkName = DEFAULT_MODULE_CHUNK_NAME,
    decoratorChunkName = DEFAULT_MODULE_DECORATOR_CHUNK_NAME,
    importChunkName = DEFAULT_IMPORT_CHUNK_NAME,
    moduleType = 'root',
  } = config || {}

  const angularModuleGenerator: ComponentPlugin = async (structure) => {
    const { uidl, chunks, options, dependencies } = structure
    const { outputOptions } = uidl
    const { moduleComponents = {} } = options

    let routesAST: types.VariableDeclaration
    let ngModuleAST: types.Decorator
    let moduleDecoratorAST: types.ExportNamedDeclaration
    let externalDependencies: Record<string, UIDLDependency> = {}

    dependencies.NgModule = ANGULAR_CORE_DEPENDENCY
    dependencies.RouterModule = ANGULAR_ROUTER

    switch (moduleType) {
      case 'root':
        {
          const { stateDefinitions } = uidl as UIDLRootComponent
          dependencies.BrowserModule = ANGULAR_PLATFORM_BROWSER
          dependencies.ComponentsModule = constructRouteForComponentsModule('.')
          dependencies.AppComponent = APP_COMPONENT
          dependencies.CUSTOM_ELEMENTS_SCHEMA = ANGULAR_CORE_DEPENDENCY

          const routes = UIDLUtils.extractRoutes(uidl as UIDLRootComponent)
          routesAST = createRoutesAST(routes, stateDefinitions)
          ngModuleAST = createRootModuleDecorator()
          moduleDecoratorAST = createExportModuleAST('AppModule')
        }
        break
      case 'page':
        {
          dependencies.ComponentsModule = constructRouteForComponentsModule(
            relative(join(...outputOptions.folderPath), '../')
          )
          dependencies.CommonModule = ANGULAR_COMMON_MODULE
          dependencies.CUSTOM_ELEMENTS_SCHEMA = ANGULAR_CORE_DEPENDENCY
          const componentName = UIDLUtils.getComponentClassName(uidl)
          const fileName = UIDLUtils.getComponentFileName(uidl)
          dependencies[componentName] = constructLocalDependency(fileName)

          routesAST = createPageRouteAST(componentName)

          externalDependencies = extractExternalDependenciesFromPage(uidl)

          ngModuleAST = createPageModuleModuleDecorator(
            componentName,
            Object.keys(getExternalDeps(externalDependencies))
          )
          moduleDecoratorAST = createExportModuleAST(uidl.outputOptions.moduleName)

          uidl.outputOptions.fileName = fileName.replace('.component', '.module')
        }
        break
      case 'component':
        {
          dependencies.CommonModule = ANGULAR_COMMON_MODULE
          dependencies.CUSTOM_ELEMENTS_SCHEMA = ANGULAR_CORE_DEPENDENCY

          // Looping through all components and importing them into component module
          Object.keys(moduleComponents).forEach((componentKey) => {
            const component = moduleComponents[componentKey]
            const componentClassName = UIDLUtils.getComponentClassName(component)
            const componentFileName = UIDLUtils.getComponentFileName(component)
            const componentFolderPath = UIDLUtils.getComponentFolderPath(component)
            dependencies[componentClassName] = constructComponentDependency(
              componentFolderPath,
              componentFileName
            )
          })

          const componentClassNames = Object.keys(moduleComponents).map((componentKey) =>
            UIDLUtils.getComponentClassName(moduleComponents[componentKey])
          )

          externalDependencies = extractExtrenalImportsFromComponents(moduleComponents)

          ngModuleAST = createComponentModuleDecorator(
            componentClassNames,
            Object.keys(getExternalDeps(externalDependencies))
          )
          moduleDecoratorAST = createExportModuleAST('ComponentsModule')
        }
        break
      default:
        throw new Error(`Invalid module type '${moduleType}'`)
    }

    if (Object.keys(externalDependencies).length > 0) {
      Object.keys(externalDependencies).forEach((importRef) => {
        dependencies[importRef] = externalDependencies[importRef]
      })
    }

    // Routes will be present for only pages and root
    if (routesAST) {
      chunks.push({
        name: moduleChunkName,
        type: ChunkType.AST,
        fileType: FileType.TS,
        content: routesAST,
        linkAfter: [importChunkName],
      })
    }

    chunks.push({
      name: decoratorChunkName,
      type: ChunkType.AST,
      fileType: FileType.TS,
      content: [ngModuleAST, moduleDecoratorAST],
      linkAfter: [importChunkName],
    })

    return structure
  }

  return angularModuleGenerator
}

const getExternalDeps = (externalDependencies: Record<string, UIDLDependency>) => {
  return Object.keys(externalDependencies).reduce(
    (acc: Record<string, UIDLDependency>, depName: string) => {
      if (!externalDependencies[depName]?.meta?.importJustPath) {
        acc[depName] = externalDependencies[depName]
      }
      return acc
    },
    {}
  )
}

export default createAngularModulePlugin()

'''
'''--- packages/teleport-plugin-angular-module/src/utils.ts ---
import * as types from '@babel/types'
import {
  UIDLDependency,
  UIDLConditionalNode,
  UIDLStateDefinition,
  ComponentUIDL,
  UIDLRouteDefinitions,
} from '@teleporthq/teleport-types'
import { StringUtils, UIDLUtils } from '@teleporthq/teleport-shared'
import { join } from 'path'

export const createPageModuleModuleDecorator = (
  componentName: string,
  externalComponents: string[] = [],
  t = types
) => {
  const imports: types.ObjectProperty = t.objectProperty(
    t.identifier('imports'),
    t.arrayExpression([
      t.identifier('CommonModule'),
      t.identifier('ComponentsModule'),
      ...externalComponents.map((component) => t.identifier(component)),
      t.callExpression(t.memberExpression(t.identifier('RouterModule'), t.identifier('forChild')), [
        t.identifier('routes'),
      ]),
    ])
  )

  const schemasProperty: types.ObjectProperty = t.objectProperty(
    t.identifier('schemas'),
    t.arrayExpression([t.identifier('CUSTOM_ELEMENTS_SCHEMA')])
  )

  const decleration: types.ObjectProperty = t.objectProperty(
    t.identifier('declarations'),
    t.arrayExpression([t.identifier(componentName)])
  )

  const exportsProperty: types.ObjectProperty = t.objectProperty(
    t.identifier('exports'),
    t.arrayExpression([t.identifier(componentName)])
  )

  return t.decorator(
    t.callExpression(t.identifier('NgModule'), [
      t.objectExpression([decleration, imports, exportsProperty, schemasProperty]),
    ])
  )
}

export const createComponentModuleDecorator = (
  componentNames?: string[],
  externalComponents: string[] = [],
  t = types
) => {
  const componentsList =
    componentNames && componentNames.length > 0
      ? componentNames.map((componentName) => t.identifier(componentName))
      : []

  const declerations: types.ObjectProperty = t.objectProperty(
    t.identifier('declarations'),
    t.arrayExpression(componentsList)
  )

  const imports: types.ObjectProperty = t.objectProperty(
    t.identifier('imports'),
    t.arrayExpression([
      ...externalComponents.map((componentName) => t.identifier(componentName)),
      t.identifier('CommonModule'),
      t.identifier('RouterModule'),
    ])
  )
  const schemasProperty: types.ObjectProperty = t.objectProperty(
    t.identifier('schemas'),
    t.arrayExpression([t.identifier('CUSTOM_ELEMENTS_SCHEMA')])
  )

  const exportsProperty: types.ObjectProperty = t.objectProperty(
    t.identifier('exports'),
    t.arrayExpression(componentsList)
  )

  return t.decorator(
    t.callExpression(t.identifier('NgModule'), [
      t.objectExpression([declerations, imports, exportsProperty, schemasProperty]),
    ])
  )
}

export const createRootModuleDecorator = (externalComponents: string[] = [], t = types) => {
  const declerations: types.ObjectProperty = t.objectProperty(
    t.identifier('declarations'),
    t.arrayExpression([t.identifier('AppComponent')])
  )

  const imports: types.ObjectProperty = t.objectProperty(
    t.identifier('imports'),
    t.arrayExpression([
      t.identifier('BrowserModule'),
      t.callExpression(t.memberExpression(t.identifier('RouterModule'), t.identifier('forRoot')), [
        t.identifier('routes'),
      ]),
      t.identifier('ComponentsModule'),
      ...externalComponents.map((component) => t.identifier(component)),
    ])
  )

  const schemasProperty: types.ObjectProperty = t.objectProperty(
    t.identifier('schemas'),
    t.arrayExpression([t.identifier('CUSTOM_ELEMENTS_SCHEMA')])
  )

  const providers = t.objectProperty(t.identifier('providers'), t.arrayExpression([]))

  const bootstrap = t.objectProperty(
    t.identifier('bootstrap'),
    t.arrayExpression([t.identifier('AppComponent')])
  )

  return t.decorator(
    t.callExpression(t.identifier('NgModule'), [
      t.objectExpression([declerations, imports, providers, bootstrap, schemasProperty]),
    ])
  )
}

export const createExportModuleAST = (moduleName: string, t = types) => {
  return t.exportNamedDeclaration(
    t.classDeclaration(t.identifier(moduleName), null, t.classBody([]), null),
    [],
    null
  )
}

export const createRoutesAST = (
  routes: UIDLConditionalNode[],
  stateDefinitions: { route: UIDLRouteDefinitions } & Record<string, UIDLStateDefinition>,
  t = types
) => {
  const routesObject = routes.map((conditionalNode) => {
    const { value: routeKey } = conditionalNode.content
    const pageDefinition = stateDefinitions.route.values.find((route) => route.value === routeKey)
    const { navLink, fileName } = pageDefinition.pageOptions

    return t.objectExpression([
      t.objectProperty(t.identifier('path'), t.stringLiteral(navLink.replace('/', ''))),
      t.objectProperty(
        t.identifier('loadChildren'),
        t.arrowFunctionExpression(
          [],
          t.callExpression(
            t.memberExpression(
              t.callExpression(t.identifier('import'), [
                /*
                  Now, navLink is being used to create a folder strucutre.
                  So, it is important to append the same when generating the path
                */
                t.stringLiteral(
                  `./pages/${join(
                    ...navLink.split('/')?.slice(0, -1),
                    fileName,
                    fileName + '.module'
                  )}`
                ),
              ]),
              t.identifier('then')
            ),
            [
              t.arrowFunctionExpression(
                [t.identifier('m')],
                t.memberExpression(
                  t.identifier('m'),
                  t.identifier(`${StringUtils.dashCaseToUpperCamelCase(fileName)}Module`)
                )
              ),
            ]
          )
        )
      ),
    ])
  })

  return t.variableDeclaration('const', [
    t.variableDeclarator(t.identifier('routes'), t.arrayExpression(routesObject)),
  ])
}

export const createPageRouteAST = (componentName: string, t = types) => {
  return t.variableDeclaration('const', [
    t.variableDeclarator(
      t.identifier('routes'),
      t.arrayExpression([
        t.objectExpression([
          t.objectProperty(t.identifier('path'), t.stringLiteral('')),
          t.objectProperty(t.identifier('component'), t.identifier(componentName)),
        ]),
      ])
    ),
  ])
}

export const constructLocalDependency = (fileName: string) => {
  const dependency: UIDLDependency = {
    type: 'local',
    path: `./${fileName}`,
    meta: {
      namedImport: true,
    },
  }
  return dependency
}

export const constructComponentDependency = (folderPath: string[], fileName: string) => {
  const dependency: UIDLDependency = {
    type: 'local',
    path: `./${folderPath.join('/')}/${fileName}`,
    meta: {
      namedImport: true,
    },
  }
  return dependency
}

export const constructRouteForComponentsModule = (path: string) => {
  const dependency: UIDLDependency = {
    type: 'local',
    path: `${path}/components/components.module`,
    meta: {
      namedImport: true,
    },
  }
  return dependency
}

export const extractExternalDependenciesFromPage = (uidl: ComponentUIDL) => {
  const extractedDependencies: Record<string, UIDLDependency> = {}
  return traverseUIDLElements(uidl, extractedDependencies)
}

// In Angular imports are not added to components, instead they are added to modules
export const extractExtrenalImportsFromComponents = (
  components: Record<string, ComponentUIDL>
): Record<string, UIDLDependency> => {
  const externalDependencies: Record<string, UIDLDependency> = {}
  if (Object.keys(components).length > 0) {
    Object.values(components).forEach((component) => {
      traverseUIDLElements(component, externalDependencies)
    })
  }
  return externalDependencies
}

const traverseUIDLElements = (
  component: ComponentUIDL,
  dependenciesMap: Record<string, UIDLDependency>
): Record<string, UIDLDependency> => {
  UIDLUtils.traverseElements(component.node, (element) => {
    const { dependency, semanticType, elementType } = element
    const elementTag = semanticType || elementType

    if (dependency?.type === 'package') {
      const existingDependency = dependenciesMap[elementTag]

      if (existingDependency) {
        const safeImport = `${StringUtils.dashCaseToUpperCamelCase(
          StringUtils.removeIllegalCharacters(dependency.path)
        )}${elementTag}`
        dependenciesMap[safeImport] = {
          ...dependency,
          meta: {
            ...dependency.meta,
            originalName: safeImport,
          },
        }
      } else {
        dependenciesMap[elementTag] = dependency
      }
    }
  })
  return dependenciesMap
}

'''
'''--- packages/teleport-plugin-angular-module/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-plugin-common/README.md ---
# teleport-plugin-common

Common building and modelating functions for ASTs and HASTs.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-plugin-common
```
or
```bash
yarn add @teleporthq/teleport-plugin-common
```

'''
'''--- packages/teleport-plugin-common/__tests__/builders/ast-builders.ts ---
import {
  createDefaultExport,
  createConstAssignment,
  createGenericImportStatement,
  createJSXTag,
  createSelfClosingJSXTag,
  createFunctionCall,
  createFunctionalComponent,
} from '../../src/builders/ast-builders'
import * as types from '@babel/types'

describe('createConstAssignment', () => {
  it('should creat assignment for a const', () => {
    const result = createConstAssignment('testConst')
    expect(result.type).toBe('VariableDeclaration')
    expect(result.kind).toBe('const')
    expect(result.declarations[0].type).toBe('VariableDeclarator')
    expect((result.declarations[0].id as types.Identifier).name).toBe('testConst')
  })
})
describe('createDefaultExport', () => {
  it('should creat default export', () => {
    const result = createDefaultExport('testConst')
    expect(result.type).toBe('ExportDefaultDeclaration')
    expect(result.declaration).toHaveProperty('name')
    expect((result.declaration as types.Identifier).name).toBe('testConst')
  })
})

describe('createGenericImportStatement', () => {
  it('should creat generic import statements', () => {
    const imports = [
      { identifierName: 'Card', namedImport: false, originalName: 'Card' },
      { identifierName: 'React', namedImport: false, originalName: 'React' },
      { identifierName: 'useState', namedImport: true, originalName: 'useState' },
    ]
    const result = createGenericImportStatement('../testConst', imports)
    expect(result.type).toBe('ImportDeclaration')
    expect(result.specifiers.length).toEqual(imports.length)
    expect(result.source).toHaveProperty('value')
    expect(result.source.value).toBe('../testConst')
  })
  it('should use the identifierName as originalName if no originalName is provided', () => {
    const imports = [{ identifierName: 'Card', namedImport: true }]
    const result = createGenericImportStatement('some-package', imports)
    expect(result.type).toBe('ImportDeclaration')
    expect(result.specifiers.length).toEqual(imports.length)
    expect(result.source).toHaveProperty('value')
    expect(result.source.value).toBe('some-package')
    const specifier = result.specifiers[0] as types.ImportSpecifier
    expect(specifier.local.name).toBe('Card')
    expect(specifier.imported.name).toBe('Card')
  })
  it('should creat generic import statements if no import array is provided', () => {
    const result = createGenericImportStatement('../testConst', [])
    expect(result.type).toBe('ImportDeclaration')
    expect(result.source).toHaveProperty('value')
    expect(result.source.value).toBe('../testConst')
  })
})

describe('createJSXTag', () => {
  it('returns a valid JSX tag', () => {
    const result = createJSXTag('randomString')

    expect(result.type).toBe('JSXElement')
    expect(result.openingElement.type).toBe('JSXOpeningElement')
    expect(result.openingElement.name).toHaveProperty('name', 'randomString')
    expect(result.closingElement.type).toBe('JSXClosingElement')
    expect(result.closingElement.name).toHaveProperty('name', 'randomString')
  })
})

describe('createSelfClosingJSXTag', () => {
  it('returns a valid JSX tag', () => {
    const result = createSelfClosingJSXTag('randomString')

    expect(result.type).toBe('JSXElement')
    expect(result.openingElement.type).toBe('JSXOpeningElement')
    expect(result.openingElement.name).toHaveProperty('name', 'randomString')
    expect(result.selfClosing).toBe(true)
  })
})

describe('createFunctionCall', () => {
  it('works with no arguments', () => {
    const result = createFunctionCall('console.log', [])

    expect(result.type).toBe('CallExpression')
    expect(result.arguments.length).toBe(0)
    expect((result.callee as types.Identifier).name).toBe('console.log')
  })

  it('works with arguments of different types', () => {
    const result = createFunctionCall('console.log', [0, '1'])

    expect(result.type).toBe('CallExpression')
    expect(result.arguments.length).toBe(2)
    expect(result.arguments[0].type).toBe('NumericLiteral')
    expect(result.arguments[1].type).toBe('StringLiteral')
    expect((result.callee as types.Identifier).name).toBe('console.log')
  })

  it('works with AST as arguments', () => {
    const result = createFunctionCall('console.log', [0, createJSXTag('App')])

    expect(result.type).toBe('CallExpression')
    expect(result.arguments.length).toBe(2)
    expect(result.arguments[0].type).toBe('NumericLiteral')
    expect(result.arguments[1].type).toBe('JSXElement')
    expect((result.callee as types.Identifier).name).toBe('console.log')
  })
})

describe('createFunctionalComponent', () => {
  it('returns a valid AST node', () => {
    const result = createFunctionalComponent('MyComponent', createSelfClosingJSXTag('App'))
    expect(result.type).toBe('VariableDeclaration')
    expect((result.declarations[0].id as types.Identifier).name).toBe('MyComponent')
  })
})

'''
'''--- packages/teleport-plugin-common/__tests__/builders/html-builders.ts ---
import { createHTMLNode, createTextNode } from '../../src/builders/hast-builders'

describe('HTML Builders', () => {
  describe('createHTMLNode', () => {
    it('should create html node', () => {
      const htmlNode = createHTMLNode('span', ['span'])

      expect(htmlNode).toHaveProperty('type')
      expect(htmlNode).toHaveProperty('tagName')
      expect(htmlNode).toHaveProperty('properties')
      expect(htmlNode).toHaveProperty('children')
      expect(htmlNode.type).toBe('element')
      expect(htmlNode.tagName).toBe('span')
      expect(htmlNode.properties).toEqual({})
      expect(htmlNode.children).toEqual(['span'])
    })
  })
  describe('createTextNode', () => {
    it('should create  text node', () => {
      const textNode = createTextNode('test')

      expect(textNode).toHaveProperty('type')
      expect(textNode).toHaveProperty('value')
      expect(textNode.type).toEqual('text')
      expect(textNode.value).toEqual('test')
    })
  })
})

'''
'''--- packages/teleport-plugin-common/__tests__/builders/style-builders.ts ---
import { createCSSClass } from '../../src/builders/style-builders'

describe('CSS Class Generation', () => {
  it('with empty styles', () => {
    expect(createCSSClass('name', {})).toEqual('')
  })

  it('with static styles', () => {
    const result = createCSSClass('name', {
      someKey: 'value',
      otherKey: 'otherValue',
    })
    expect(result).toEqual(`.name {
  some-key: value;
  other-key: otherValue;
}`)
  })
})

'''
'''--- packages/teleport-plugin-common/__tests__/node-handlers/node-to-html/index.ts ---
import { HTMLTemplateGenerationParams } from '../../../src/node-handlers/node-to-html/types'
import generateHTMLTemplateSyntax from '../../../src/node-handlers/node-to-html'
import { HastNode, HastText, ComponentUIDL } from '@teleporthq/teleport-types'
import { DEFAULT_TEMPLATE_SYNTAX } from '../../../src/node-handlers/node-to-html/constants'
import componentUIDLSample from '../../../../../examples/test-samples/component-sample.json'

const uidl = componentUIDLSample as ComponentUIDL

describe('generateHTMLTemplateSyntax', () => {
  const params: HTMLTemplateGenerationParams = {
    dependencies: {},
    dataObject: {},
    methodsObject: {},
    templateLookup: {},
  }

  describe('uidl node', () => {
    it('returns a HAST Syntax', () => {
      const result = generateHTMLTemplateSyntax(uidl.node, params, DEFAULT_TEMPLATE_SYNTAX)

      const hastElement = result as HastNode
      expect(hastElement.tagName).toBe('container')
      expect(hastElement.children.length).toBe(3)
      expect(hastElement.children[0].type).toBe('element')

      const firstChild = hastElement.children[0] as HastNode
      expect((firstChild.children[1] as HastText).value).toBe('{{ header }}')

      const secondChild = hastElement.children[1] as HastNode
      expect(secondChild.properties['v-for']).toBe('(item, index) in items')

      const thirdChild = hastElement.children[2] as HastNode
      expect(thirdChild.properties['v-if']).toBe('isVisible')
    })

    it('returns a HAST Syntax with custom syntax', () => {
      const result = generateHTMLTemplateSyntax(uidl.node, params, {
        ...DEFAULT_TEMPLATE_SYNTAX,
        conditionalAttr: 'test-condition',
        repeatAttr: 'test-repeat',
        interpolation: (value) => `[${value}]`,
      })

      const hastElement = result as HastNode
      expect(hastElement.tagName).toBe('container')
      expect(hastElement.children.length).toBe(3)
      expect(hastElement.children[0].type).toBe('element')

      const firstChild = hastElement.children[0] as HastNode
      expect((firstChild.children[1] as HastText).value).toBe('[header]')

      const secondChild = hastElement.children[1] as HastNode
      expect(secondChild.properties['test-repeat']).toBe('(item, index) in items')

      const thirdChild = hastElement.children[2] as HastNode
      expect(thirdChild.properties['test-condition']).toBe('isVisible')
    })
  })
})

'''
'''--- packages/teleport-plugin-common/__tests__/node-handlers/node-to-html/utils.ts ---
import { UIDLAttributeValue, UIDLElementNode } from '@teleporthq/teleport-types'
import { handleAttribute } from '../../../src/node-handlers/node-to-html/utils'
import { createHTMLNode } from '../../../src/builders/hast-builders'
import {
  HTMLTemplateGenerationParams,
  HTMLTemplateSyntax,
} from '../../../src/node-handlers/node-to-html/types'
import { DEFAULT_TEMPLATE_SYNTAX } from '../../../src/node-handlers/node-to-html/constants'

describe('handleAttribute', () => {
  it('handle an attribute with boolean value', () => {
    const htmlNode = createHTMLNode('div')
    const elementName = 'MyComponent'
    const attrKey = 'isVisible'
    const attrValue: UIDLAttributeValue = {
      type: 'static',
      content: false,
    }
    const params: HTMLTemplateGenerationParams = {
      dependencies: {},
      dataObject: {},
      methodsObject: {},
      templateLookup: {},
    }
    const templateSyntax: HTMLTemplateSyntax = DEFAULT_TEMPLATE_SYNTAX
    const node: UIDLElementNode = {
      type: 'element',
      content: {
        elementType: 'text',
        children: [
          {
            type: 'static',
            content: 'are you ok?',
          },
        ],
      },
    }
    handleAttribute(htmlNode, elementName, attrKey, attrValue, params, templateSyntax, node)
    expect(htmlNode.properties).toHaveProperty(`:${attrKey}`, attrValue.content)

    const attrKey1 = 'isOpen'
    const attrValue1: UIDLAttributeValue = {
      type: 'static',
      content: true,
    }

    handleAttribute(htmlNode, elementName, attrKey1, attrValue1, params, templateSyntax, node)
    expect(htmlNode.properties).toHaveProperty(attrKey1, '')
  })
})

'''
'''--- packages/teleport-plugin-common/__tests__/node-handlers/node-to-jsx/index.ts ---
import * as types from '@babel/types'
import componentUIDLSample from '../../../../../examples/test-samples/component-sample.json'
import generateJSXSyntax from '../../../src/node-handlers/node-to-jsx'

import { slotNode, elementNode, staticNode } from '@teleporthq/teleport-uidl-builders'
import {
  JSXGenerationParams,
  JSXGenerationOptions,
} from '../../../src/node-handlers/node-to-jsx/types'
import { ComponentUIDL } from '@teleporthq/teleport-types'

const uidl = componentUIDLSample as ComponentUIDL

describe('generateJSXSyntax', () => {
  const params: JSXGenerationParams = {
    dependencies: {},
    propDefinitions: uidl.propDefinitions,
    stateDefinitions: uidl.stateDefinitions,
    nodesLookup: {},
  }

  const options: JSXGenerationOptions = {
    dynamicReferencePrefixMap: {
      prop: 'props',
      state: '',
      local: '',
    },
  }

  describe('uidl node', () => {
    it('returns a JSX AST Syntax', () => {
      const result = generateJSXSyntax(uidl.node, params, { ...options, slotHandling: 'props' })

      const element = result as types.JSXElement

      expect(element.children.length).toBe(6)
      expect((element.openingElement.name as types.JSXIdentifier).name).toBe('container')
    })
  })

  describe('slot node', () => {
    it('returns a props.children expression', () => {
      const node = elementNode('container', {}, [slotNode()])
      const result = generateJSXSyntax(node, params, { ...options, slotHandling: 'props' })

      const expression = result.children[0] as types.JSXExpressionContainer
      expect(expression.expression.type).toBe('MemberExpression')

      const memberExpression = expression.expression as types.MemberExpression
      expect((memberExpression.object as types.Identifier).name).toBe('props')
      expect(memberExpression.property.name).toBe('children')
    })

    it('returns a props.children with fallback', () => {
      const node = elementNode('container', {}, [
        slotNode(elementNode('span', {}, [staticNode('fallback')])),
      ])
      const result = generateJSXSyntax(node, params, { ...options, slotHandling: 'props' })

      const expression = result.children[0] as types.JSXExpressionContainer
      expect(expression.expression.type).toBe('LogicalExpression')

      const logicalExpression = expression.expression as types.LogicalExpression
      const memberExpression = logicalExpression.left as types.MemberExpression
      const fallbackJSXNode = logicalExpression.right as types.JSXElement

      expect((memberExpression.object as types.Identifier).name).toBe('props')
      expect(memberExpression.property.name).toBe('children')

      expect((fallbackJSXNode.openingElement.name as types.JSXIdentifier).name).toBe('span')
    })

    it('returns a <slot> tag', () => {
      const node = elementNode('container', {}, [slotNode()])
      const result = generateJSXSyntax(node, params, { ...options, slotHandling: 'native' })

      const slotJSXTag = result.children[0] as types.JSXElement
      expect((slotJSXTag.openingElement.name as types.JSXIdentifier).name).toBe('slot')
    })

    it('returns a <slot> tag with fallback', () => {
      const node = elementNode('container', {}, [
        slotNode(elementNode('span', {}, [staticNode('fallback')])),
      ])
      const result = generateJSXSyntax(node, params, { ...options, slotHandling: 'native' })

      const slotJSXTag = result.children[0] as types.JSXElement
      expect((slotJSXTag.openingElement.name as types.JSXIdentifier).name).toBe('slot')

      const slotFallbackJSXTag = slotJSXTag.children[0] as types.JSXElement
      expect((slotFallbackJSXTag.openingElement.name as types.JSXIdentifier).name).toBe('span')
    })

    it('returns a named <slot> tag', () => {
      const node = elementNode('container', {}, [slotNode(null, 'hole')])
      const result = generateJSXSyntax(node, params, { ...options, slotHandling: 'native' })

      const slotJSXTag = result.children[0] as types.JSXElement
      expect((slotJSXTag.openingElement.name as types.JSXIdentifier).name).toBe('slot')

      const nameAttr = slotJSXTag.openingElement.attributes[0] as types.JSXAttribute
      expect(nameAttr.name.name).toBe('name')
      expect((nameAttr.value as types.StringLiteral).value).toBe('hole')
    })
  })
})

'''
'''--- packages/teleport-plugin-common/__tests__/node-handlers/node-to-jsx/utils.ts ---
import {
  createBinaryExpression,
  createConditionIdentifier,
} from '../../../src/node-handlers/node-to-jsx/utils'
import { dynamicNode } from '@teleporthq/teleport-uidl-builders'
import {
  JSXGenerationParams,
  JSXGenerationOptions,
} from '../../../src/node-handlers/node-to-jsx/types'

describe('createBinaryExpression', () => {
  it('varName === true -> varName', () => {
    const condition = { operation: '===', operand: true }
    const conditionIdentifier = {
      key: 'isVisible',
      type: 'boolean',
    }

    expect(createBinaryExpression(condition, conditionIdentifier)).toEqual({
      type: 'Identifier',
      name: 'isVisible',
    })
  })

  it('varName === false -> !varName', () => {
    const condition = { operation: '===', operand: false }
    const conditionIdentifier = {
      key: 'isVisible',
      type: 'boolean',
    }

    expect(createBinaryExpression(condition, conditionIdentifier)).toEqual({
      type: 'UnaryExpression',
      operator: '!',
      argument: { type: 'Identifier', name: 'isVisible' },
      prefix: true,
    })
  })

  it('varName === text -> varName === text', () => {
    const condition = { operation: '===', operand: 'text' }
    const conditionIdentifier = {
      key: 'isVisible',
      type: 'string',
    }

    const result = createBinaryExpression(condition, conditionIdentifier)

    expect(result).toEqual({
      type: 'BinaryExpression',
      operator: '===',
      left: { type: 'Identifier', name: 'isVisible' },
      right: { type: 'StringLiteral', value: 'text' },
    })
  })

  it('varName === undefined -> !varName', () => {
    const condition = { operation: '===' }
    const conditionIdentifier = {
      key: 'isVisible',
      type: 'string',
    }

    const result = createBinaryExpression(condition, conditionIdentifier)

    expect(result).toEqual({
      type: 'UnaryExpression',
      operator: '!',
      argument: { type: 'Identifier', name: 'isVisible' },
      prefix: true,
    })
  })

  it('varName == text -> varName === text', () => {
    const condition = { operation: '==,', operand: 'text' }
    const conditionIdentifier = {
      key: 'isVisible',
      type: 'string',
    }

    const result = createBinaryExpression(condition, conditionIdentifier)

    expect(result).toEqual({
      type: 'BinaryExpression',
      operator: '===',
      left: { type: 'Identifier', name: 'isVisible' },
      right: { type: 'StringLiteral', value: 'text' },
    })
  })

  it('varName === undefined -> !varName', () => {
    const condition = { operation: '!' }
    const conditionIdentifier = {
      key: 'isVisible',
      type: 'string',
    }

    const result = createBinaryExpression(condition, conditionIdentifier)

    expect(result).toEqual({
      type: 'UnaryExpression',
      operator: '!',
      argument: { type: 'Identifier', name: 'isVisible' },
      prefix: true,
    })
  })
})

describe('createConditionIdentifier', () => {
  const params: JSXGenerationParams = {
    propDefinitions: {
      title: {
        type: 'string',
      },
      fields: {
        type: 'object',
      },
    },
    stateDefinitions: {
      isActive: {
        type: 'boolean',
        defaultValue: false,
      },
    },
    dependencies: {},
    nodesLookup: {},
  }

  const options: JSXGenerationOptions = {
    dynamicReferencePrefixMap: {
      prop: 'this.props',
      state: 'this',
      local: '',
    },
  }

  it('works with a prop reference', () => {
    const node = dynamicNode('prop', 'title')
    const result = createConditionIdentifier(node, params, options)

    expect(result.key).toBe('title')
    expect(result.prefix).toBe('this.props')
    expect(result.type).toBe('string')
  })

  it('works on member expressions', () => {
    const node = dynamicNode('prop', 'fields.title')
    const result = createConditionIdentifier(node, params, options)

    expect(result.key).toBe('fields.title')
    expect(result.prefix).toBe('this.props')
    expect(result.type).toBe('object')
  })

  it('works with a state reference', () => {
    const node = dynamicNode('state', 'isActive')
    const result = createConditionIdentifier(node, params, options)

    expect(result.key).toBe('isActive')
    expect(result.prefix).toBe('this')
    expect(result.type).toBe('boolean')
  })

  it('throws an error for unknown reference type', () => {
    const node = dynamicNode('local', 'title')
    expect(() => createConditionIdentifier(node, params, options)).toThrowError()
  })
})

'''
'''--- packages/teleport-plugin-common/__tests__/utils/ast-utils.ts ---
import {
  stringAsTemplateLiteral,
  addSpreadAttributeToJSXTag,
  renameJSXTag,
  addClassStringOnJSXTag,
  addAttributeToJSXTag,
  addDynamicAttributeToJSXTag,
  convertValueToLiteral,
  objectToObjectExpression,
  addRawAttributeToJSXTag,
} from '../../src/utils/ast-utils'
import ParsedASTNode from '../../src/utils/parsed-ast'
import { createJSXTag } from '../../src/builders/ast-builders'
import * as types from '@babel/types'

describe('stringAsTemplateLiteral', () => {
  it('returns TemplateLiteral', () => {
    const result = stringAsTemplateLiteral('randomString')

    expect(result.type).toBe('TemplateLiteral')
    expect(result.quasis[0].type).toBe('TemplateElement')
  })
})

describe('addSpreadAttributeToJSXTag', () => {
  it('runs with success', () => {
    const tag = createJSXTag('random')
    addSpreadAttributeToJSXTag(tag, 'randomString')

    const attr = tag.openingElement.attributes[0]
    expect(attr.type).toBe('JSXSpreadAttribute')
    expect((attr as types.JSXSpreadAttribute).argument).toHaveProperty('name', 'randomString')
  })
})

describe('renameJSXTag', () => {
  it('runs with success', () => {
    const tag = createJSXTag('random')
    renameJSXTag(tag, 'NewName')

    const openTag = tag.openingElement.name as types.JSXIdentifier
    const closeTag = tag.closingElement.name as types.JSXIdentifier
    expect(openTag.name).toBe('NewName')
    expect(closeTag.name).toBe('NewName')
  })
})

describe('addClassStringOnJSXTag', () => {
  it('adds a class on an element with no classes', () => {
    const tag = createJSXTag('button')

    addClassStringOnJSXTag(tag, 'primary')
    expect(tag.openingElement.attributes[0].type).toBe('JSXAttribute')

    const classAttr = tag.openingElement.attributes[0] as types.JSXAttribute
    expect(classAttr.name.name).toBe('className')
    expect((classAttr.value as types.StringLiteral).value).toBe('primary')
  })

  it('adds a class on an element with existing classes', () => {
    const tag = createJSXTag('button')
    addAttributeToJSXTag(tag, 'className', 'button')

    addClassStringOnJSXTag(tag, 'primary')
    expect(tag.openingElement.attributes[0].type).toBe('JSXAttribute')

    const classAttr = tag.openingElement.attributes[0] as types.JSXAttribute
    expect(classAttr.name.name).toBe('className')
    expect((classAttr.value as types.StringLiteral).value).toBe('button primary')
  })
})

describe('addAttributeToJSXTag', () => {
  it('adds an attribute with no value', () => {
    const tag = createJSXTag('button')

    addAttributeToJSXTag(tag, 'disabled')
    expect(tag.openingElement.attributes[0].type).toBe('JSXAttribute')

    const classAttr = tag.openingElement.attributes[0] as types.JSXAttribute
    expect(classAttr.name.name).toBe('disabled')
    expect(classAttr.value).toBe(null)
  })

  it('adds an attribute with false', () => {
    const tag = createJSXTag('button')

    addAttributeToJSXTag(tag, 'disabled', false)
    expect(tag.openingElement.attributes[0].type).toBe('JSXAttribute')

    const classAttr = tag.openingElement.attributes[0] as types.JSXAttribute
    expect(classAttr.name.name).toBe('disabled')
    expect(
      ((classAttr.value as types.JSXExpressionContainer).expression as types.BooleanLiteral).value
    ).toBe(false)
  })

  it('adds an attribute with the selected value', () => {
    const tag = createJSXTag('button')

    addAttributeToJSXTag(tag, 'data-attr', 'random-value')
    expect(tag.openingElement.attributes[0].type).toBe('JSXAttribute')

    const classAttr = tag.openingElement.attributes[0] as types.JSXAttribute
    expect(classAttr.name.name).toBe('data-attr')
    expect((classAttr.value as types.StringLiteral).value).toBe('random-value')
  })

  it('adds an attribute as a JSX expression when non-string', () => {
    const tag = createJSXTag('button')

    addAttributeToJSXTag(tag, 'data-attr', 1)
    expect(tag.openingElement.attributes[0].type).toBe('JSXAttribute')

    const classAttr = tag.openingElement.attributes[0] as types.JSXAttribute
    expect(classAttr.name.name).toBe('data-attr')
    expect(
      (
        (classAttr.value as types.JSXExpressionContainer)
          .expression as unknown as types.NumericLiteral
      ).value
    ).toBe(1)
  })
})

describe('addRawAttributeToJSXTag', () => {
  it('adds an attribute with string without encoding', () => {
    const tag = createJSXTag('iframe')

    addRawAttributeToJSXTag(tag, 'srcdoc', { type: 'raw', content: '<h1>Hello</h1>' })
    expect(tag.openingElement.attributes[0].type).toBe('JSXAttribute')

    const classAttr = tag.openingElement.attributes[0] as types.JSXAttribute

    expect(classAttr.name.name).toBe('srcdoc')
    const expression = (classAttr.value as types.JSXExpressionContainer).expression
    expect(expression.type).toBe('TemplateLiteral')
    expect((expression as types.TemplateLiteral).quasis[0].type).toBe('TemplateElement')

    expect((expression as types.TemplateLiteral).quasis[0].value.raw).toBe('<h1>Hello</h1>')
  })
})

describe('addDynamicAttributeToJSXTag', () => {
  it('adds the dynamic JSX expression on the opening tag', () => {
    const tag = createJSXTag('button')

    addDynamicAttributeToJSXTag(tag, 'dynamicValue', 'title')
    expect(tag.openingElement.attributes[0].type).toBe('JSXAttribute')

    const dynamicAttr = tag.openingElement.attributes[0] as types.JSXAttribute
    expect(dynamicAttr.value.type).toBe('JSXExpressionContainer')
    expect(
      ((dynamicAttr.value as types.JSXExpressionContainer).expression as types.Identifier).name
    ).toBe('title')
  })

  it('adds the dynamic JSX expression on the opening tag with prefix', () => {
    const tag = createJSXTag('button')

    addDynamicAttributeToJSXTag(tag, 'dynamicValue', 'title', 'props')
    expect(tag.openingElement.attributes[0].type).toBe('JSXAttribute')

    const dynamicAttr = tag.openingElement.attributes[0] as types.JSXAttribute
    expect(dynamicAttr.value.type).toBe('JSXExpressionContainer')
    expect((dynamicAttr.value as types.JSXExpressionContainer).expression.type).toBe(
      'MemberExpression'
    )
  })
})

describe('ParsedASTNode', () => {
  it('should create ASTNode', () => {
    const result = new ParsedASTNode('test')

    expect(typeof result).toBe('object')
    expect(result).toHaveProperty('ast')
    expect(result.ast).toBe('test')
  })
})
describe('convertValueToLiteral', () => {
  it('should convert value to literal', () => {
    const result = convertValueToLiteral('test') as types.StringLiteral

    expect(typeof result).toBe('object')
    expect(result).toHaveProperty('type')
    expect(result).toHaveProperty('value')
    expect(result.type).toEqual('StringLiteral')
    expect(result.value).toEqual('test')
  })
  it('should convert number value to numerical literal', () => {
    const result = convertValueToLiteral(2, 'number') as types.NumericLiteral

    expect(typeof result).toBe('object')
    expect(result).toHaveProperty('type')
    expect(result).toHaveProperty('value')
    expect(result.type).toEqual('NumericLiteral')
    expect(result.value).toEqual(2)
  })
  it('should convert boolean value to boolean literal', () => {
    const result = convertValueToLiteral(true, 'boolean') as types.BooleanLiteral

    expect(typeof result).toBe('object')
    expect(result).toHaveProperty('type')
    expect(result).toHaveProperty('value')
    expect(result.type).toEqual('BooleanLiteral')
    expect(result.value).toEqual(true)
  })
  it('should convert object value to boolean literal', () => {
    const result = convertValueToLiteral({ test: true }, 'object') as types.ObjectExpression

    expect(typeof result).toBe('object')
    expect(result).toHaveProperty('type')
    expect(result).toHaveProperty('properties')
    expect(result.type).toEqual('ObjectExpression')
    expect(result.properties.length).toEqual(1)
    const property = result.properties[0] as types.ObjectProperty
    expect(property).toHaveProperty('key')
    expect(property.key.type).toBe('StringLiteral')
    // @ts-ignore
    expect(property.key.value).toBe('test')
    expect(property).toHaveProperty('value')
    expect(property.value.type).toBe('BooleanLiteral')
    expect((property.value as types.BooleanLiteral).value).toBe(true)
  })
  it('should convert array value to literals', () => {
    const testArray = ['test', 'testAgain', 'andAgain']
    const result = convertValueToLiteral(testArray) as types.ArrayExpression

    expect(typeof result).toBe('object')
    expect(result).toHaveProperty('type')
    expect(result.type).toBe('ArrayExpression')
    expect(result).toHaveProperty('elements')
    expect(result.elements.length).toEqual(testArray.length)
  })
  it('should convert identifier value to literal', () => {
    const result = convertValueToLiteral(String)

    expect(typeof result).toBe('object')
    expect(result).toHaveProperty('type')
    expect(result.type).toBe('Identifier')
  })
  it('returns a null literal for null or undefined', () => {
    expect(convertValueToLiteral(null).type).toBe('NullLiteral')
    expect(convertValueToLiteral(undefined).type).toBe('NullLiteral')
  })
})

describe('objectToObjectExpression', () => {
  it('should transform object to object expression', () => {
    const objTest = {
      stringKey: 'test',
      booleanKey: true,
      numberKey: 2,
      arrayKey: ['test', 'testAgain'],
      objectKey: {
        identifierKey: String,
      },
    }
    const result = objectToObjectExpression(objTest)

    expect(typeof result).toBe('object')
    expect(result).toHaveProperty('type')
    expect(result).toHaveProperty('properties')
    expect(result.properties.length).toEqual(Object.keys(objTest).length)
    expect(result.properties.length).toEqual(Object.keys(objTest).length)
  })
  // tslint:disable-next-line:no-any
  const objectTest: Record<string, any> = {
    arrayKey: { key: Array },
    numberKey: { key: Number },
    stringKey: { key: String },
    booleanKey: { key: Boolean },
    objectKey: { key: Object },
    astKey: { key: new ParsedASTNode('') },
  }
  Object.keys(objectTest).map((key) => {
    it(`should transform ${key} object to object expression`, () => {
      const result = objectToObjectExpression(objectTest[key])
      expect(typeof result).toBe('object')
      expect(result).toHaveProperty('type')
      expect(result).toHaveProperty('properties')
      expect(result.type).toEqual('ObjectExpression')
    })
  })
})

'''
'''--- packages/teleport-plugin-common/__tests__/utils/style-utils.ts ---
import { getContentOfStyleObject } from '../../src/utils/style-utils'
import { UIDLStyleDefinitions } from '@teleporthq/teleport-types'

describe('JSS Utils ', () => {
  describe('getContentOfStyleObject', () => {
    it('with static', () => {
      const styleValue: UIDLStyleDefinitions = {
        color: {
          type: 'static',
          content: 'red',
        },
      }
      const result = getContentOfStyleObject(styleValue)
      expect(result).toEqual({ color: 'red' })
    })

    it('with nested-style', () => {
      const styleValue: UIDLStyleDefinitions = {
        test: {
          type: 'nested-style',
          content: {
            testAgain: {
              type: 'nested-style',
              content: {
                someKey: {
                  type: 'static',
                  content: 'value',
                },
              },
            },
          },
        },
      }

      expect(() => getContentOfStyleObject(styleValue)).toThrow(Error)
    })
  })

  it('fails with other type than static or nested-style', () => {
    const styleValue: UIDLStyleDefinitions = {
      content: {
        type: 'dynamic',
        content: {
          referenceType: 'prop',
          id: 'test',
        },
      },
    }
    try {
      getContentOfStyleObject(styleValue)
    } catch (e) {
      expect(e.message).toBe(
        `getContentOfStyleKey received unsupported ${JSON.stringify(
          styleValue.content,
          null,
          2
        )} UIDLNodeStyleValue value`
      )
    }
  })
})

'''
'''--- packages/teleport-plugin-common/package.json ---
{
  "name": "@teleporthq/teleport-plugin-common",
  "version": "0.29.0",
  "description": "Common building and modelating functions for ASTs and HASTs",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@babel/types": "^7.14.5",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0",
    "jss": "^10.0.0",
    "jss-preset-default": "^10.0.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-plugin-common/src/builders/ast-builders.ts ---
import * as types from '@babel/types'
import {
  convertValueToLiteral,
  objectToObjectExpression,
  addAttributeToJSXTag,
  addChildJSXTag,
} from '../utils/ast-utils'
import {
  ImportIdentifier,
  EntryFileOptions,
  UIDLGlobalAsset,
  UIDLStateModifierEvent,
  UIDLStaticValue,
} from '@teleporthq/teleport-types'
import { UIDLUtils } from '@teleporthq/teleport-shared'

// tslint:disable-next-line no-any
export const createConstAssignment = (constName: string, asignment: any = null, t = types) => {
  const declarator = t.variableDeclarator(t.identifier(constName), asignment)
  const constAssignment = t.variableDeclaration('const', [declarator])
  return constAssignment
}

export const createDefaultExport = (exportReference: string, t = types) => {
  return t.exportDefaultDeclaration(t.identifier(exportReference))
}

export const createReactJSSDefaultExport = (
  componentName: string,
  stylesName: string,
  t = types
) => {
  return t.exportDefaultDeclaration(
    t.callExpression(t.callExpression(t.identifier('injectSheet'), [t.identifier(stylesName)]), [
      t.identifier(componentName),
    ])
  )
}

/**
 * You can pass the path of the package which is added at the top of the file and
 * an array of imports that we extract from that package.
 */
export const createGenericImportStatement = (
  path: string,
  imports: ImportIdentifier[],
  t = types
) => {
  // Only one of the imports can be the default one so this is a fail safe for invalid UIDL data
  const defaultImport = imports.find((imp) => !imp.namedImport) // only one import can be default
  const importJustPath = imports.some((imp) => imp.importJustPath)
  // tslint:disable-next-line no-any
  let importASTs: any[] = []
  if (importJustPath) {
    // Just the import path will be present, eg: import './styles.css'
    importASTs = []
  } else if (defaultImport) {
    const namedImports = imports.filter(
      (imp) => imp.identifierName !== defaultImport.identifierName
    )
    // Default import needs to be the first in the array
    importASTs = [
      t.importDefaultSpecifier(t.identifier(defaultImport.identifierName)),
      ...namedImports.map((imp) =>
        t.importSpecifier(
          t.identifier(imp.identifierName),
          t.identifier(imp.originalName || imp.identifierName)
        )
      ),
    ]
  } else {
    // No default import, so array order doesn't matter
    importASTs = imports.map((imp) =>
      t.importSpecifier(
        t.identifier(imp.identifierName),
        t.identifier(imp.originalName || imp.identifierName)
      )
    )
  }
  return t.importDeclaration(importASTs, t.stringLiteral(path))
}

type JSXChild =
  | types.JSXText
  | types.JSXExpressionContainer
  | types.JSXSpreadChild
  | types.JSXElement
  | types.JSXFragment

export const createJSXTag = (
  tagName: string,
  children: JSXChild[] = [],
  selfClosing = false,
  t = types
) => {
  const jsxIdentifier = t.jsxIdentifier(tagName)
  const openingTag = t.jsxOpeningElement(jsxIdentifier, [], selfClosing)
  const closingTag = t.jsxClosingElement(jsxIdentifier)

  const tag = t.jsxElement(openingTag, closingTag, children, selfClosing)

  return tag
}

export const createSelfClosingJSXTag = (tagName: string) => {
  return createJSXTag(tagName, [], true)
}

export const createJSXExpresionContainer = (expression: types.Expression, t = types) => {
  return t.jsxExpressionContainer(expression)
}

// tslint:disable-next-line no-any
export const createFunctionCall = (functionName: string, args: any[] = [], t = types) => {
  const convertedArgs = args.map((value) => {
    // skip objects which are already in AST format
    if (objectIsASTType(value)) {
      return value
    }

    return convertValueToLiteral(value)
  })
  return t.callExpression(t.identifier(functionName), convertedArgs)
}

// tslint:disable-next-line no-any
const objectIsASTType = (obj: any) => {
  if (typeof obj !== 'object') {
    return false
  }

  // TODO: extensive list
  return obj.type === 'JSXElement' || obj.type === 'CallExpression' || obj.type === 'Identifier'
}

// equivalent to (props) => props.title
export const createArrowFunctionWithMemberExpression = (
  argument: string,
  returnIdentifier: string,
  t = types
) => {
  return t.arrowFunctionExpression(
    [t.identifier(argument)],
    t.memberExpression(t.identifier(argument), t.identifier(returnIdentifier))
  )
}

export const createFunctionalComponent = (
  componentName: string,
  jsxRoot: types.JSXElement,
  t = types
) => {
  const returnStatement = t.returnStatement(jsxRoot)
  const arrowFunction = t.arrowFunctionExpression([], t.blockStatement([returnStatement] || []))

  const declarator = t.variableDeclarator(t.identifier(componentName), arrowFunction)
  const component = t.variableDeclaration('const', [declarator])

  return component
}

export const createComponentDecorator = (params: Record<string, unknown>, t = types) => {
  return t.decorator(
    t.callExpression(t.identifier('Component'), [objectToObjectExpression(params)])
  )
}

export const createStateChangeStatement = (statement: UIDLStateModifierEvent, t = types) => {
  const { modifies, newState } = statement

  const rightOperand =
    newState === '$toggle'
      ? t.unaryExpression('!', t.memberExpression(t.identifier('this'), t.identifier(modifies)))
      : convertValueToLiteral(newState)

  return t.expressionStatement(
    t.assignmentExpression(
      '=',
      t.memberExpression(t.identifier('this'), t.identifier(modifies)),
      rightOperand
    )
  )
}

export const appendAssetsAST = (
  assets: UIDLGlobalAsset[],
  options: EntryFileOptions,
  headNode: types.JSXElement,
  bodyNode: types.JSXElement
) => {
  assets.forEach((asset) => {
    let assetPath
    if ('path' in asset) {
      assetPath = UIDLUtils.prefixAssetsPath(asset.path, options?.assets)
    }

    // link canonical for SEO
    if (asset.type === 'canonical' && assetPath) {
      const linkTag = createJSXTag('link')
      addAttributeToJSXTag(linkTag, 'rel', 'canonical')
      addAttributeToJSXTag(linkTag, 'href', assetPath)
      addChildJSXTag(headNode, linkTag)
    }

    // link stylesheet (external css, font)
    if ((asset.type === 'style' || asset.type === 'font') && assetPath) {
      const linkTag = createJSXTag('link')
      addAttributeToJSXTag(linkTag, 'rel', 'stylesheet')
      addAttributeToJSXTag(linkTag, 'href', assetPath)

      if ('attrs' in asset) {
        Object.keys((asset.attrs || {}) as Record<string, UIDLStaticValue>).forEach(
          (assetId: string) => {
            const value = (asset.attrs as unknown as Record<string, UIDLStaticValue>)[assetId]
              .content
            addAttributeToJSXTag(linkTag, assetId, value)
          }
        )
      }

      addChildJSXTag(headNode, linkTag)
    }

    // inline style
    if (asset.type === 'style' && 'content' in asset) {
      const styleTag = createJSXTag('style')
      addAttributeToJSXTag(styleTag, 'dangerouslySetInnerHTML', { __html: asset.content })

      if ('attrs' in asset) {
        Object.keys((asset.attrs || {}) as Record<string, UIDLStaticValue>).forEach(
          (assetId: string) => {
            const value = (asset.attrs as unknown as Record<string, UIDLStaticValue>)[assetId]
              .content
            addAttributeToJSXTag(styleTag, assetId, value)
          }
        )
      }

      addChildJSXTag(headNode, styleTag)
    }

    // script (external or inline)
    if (asset.type === 'script') {
      const scriptTag = createJSXTag('script')
      addAttributeToJSXTag(scriptTag, 'type', 'text/javascript')

      if (assetPath) {
        addAttributeToJSXTag(scriptTag, 'src', assetPath)
        if (asset.options && asset.options.defer) {
          addAttributeToJSXTag(scriptTag, 'defer', true)
        }
        if (asset.options && asset.options.async) {
          addAttributeToJSXTag(scriptTag, 'async', true)
        }
      } else if ('content' in asset) {
        addAttributeToJSXTag(scriptTag, 'dangerouslySetInnerHTML', {
          __html: asset.content,
        })
      }

      if (asset.options && asset.options.target === 'body') {
        addChildJSXTag(bodyNode, scriptTag)
      } else {
        addChildJSXTag(headNode, scriptTag)
      }
    }

    // icon
    if (asset.type === 'icon' && assetPath) {
      const iconTag = createJSXTag('link')
      addAttributeToJSXTag(iconTag, 'rel', 'shortcut icon')
      addAttributeToJSXTag(iconTag, 'href', assetPath)

      if (asset.options && asset.options.iconType) {
        addAttributeToJSXTag(iconTag, 'type', asset.options.iconType)
      }
      if (asset.options && asset.options.iconSizes) {
        addAttributeToJSXTag(iconTag, 'sizes', asset.options.iconSizes)
      }

      addChildJSXTag(headNode, iconTag)
    }
  })
}

'''
'''--- packages/teleport-plugin-common/src/builders/hast-builders.ts ---
import { HastNode, HastText } from '@teleporthq/teleport-types'

export const createHTMLNode = (
  tagName: string,
  children: Array<HastNode | HastText> = []
): HastNode => {
  return {
    type: 'element',
    tagName,
    properties: {},
    children,
  }
}

export const createTextNode = (content: string): HastText => {
  return {
    type: 'text',
    value: content,
  }
}

'''
'''--- packages/teleport-plugin-common/src/builders/style-builders.ts ---
import jss from 'jss'
import preset from 'jss-preset-default'
import * as types from '@babel/types'
import {
  HastNode,
  UIDLAttributeValue,
  UIDLDynamicReference,
  UIDLStyleSetDefinition,
} from '@teleporthq/teleport-types'
import ParsedASTNode from '../utils/parsed-ast'
import { StringUtils, UIDLUtils } from '@teleporthq/teleport-shared'
import {
  getContentOfStyleObject,
  getCSSVariablesContentFromTokenStyles,
} from '../utils/style-utils'
jss.setup(preset())

export const createCSSClass = (key: string, styleObject: Record<string, string | number>) => {
  return jss
    .createStyleSheet(
      {
        [key]: styleObject,
      },
      {
        generateId: () => key,
      }
    )
    .toString()
}

export const createCSSClassWithSelector = (
  key: string,
  selector: string,
  styleObject: Record<string, string | number>
) => {
  return jss
    .createStyleSheet(
      {
        [key]: {
          [selector]: styleObject,
        },
      },
      {
        generateId: () => key,
      }
    )
    .toString()
}

export const createCSSClassWithMediaQuery = (
  mediaOffset: string,
  styleObject: Record<string, string | number>
) => {
  return jss
    .createRule(`@media(${mediaOffset})`, styleObject, {
      generateId: (data) => data.key,
    })
    .toString()
}

export const createDynamicStyleExpression = (
  styleValue: UIDLDynamicReference,
  propsPrefix: string = '',
  t = types
) => {
  switch (styleValue.content.referenceType) {
    case 'state':
    case 'local':
      return new ParsedASTNode(t.identifier(styleValue.content.id))
    case 'prop':
      return new ParsedASTNode(
        t.memberExpression(t.identifier(propsPrefix), t.identifier(styleValue.content.id))
      )
    case 'token':
      return `var(${StringUtils.generateCSSVariableName(styleValue.content.id)})`
    default:
      throw new Error(
        `createDynamicStyleExpression received unsupported ${JSON.stringify(
          styleValue,
          null,
          2
        )} UIDLDynamicReference value`
      )
  }
}

export const generateMediaStyle = (
  styleMap: Record<string, Array<{ [x: string]: Record<string, string | number> }>>
) => {
  const styles: string[] = []
  Object.keys(styleMap)
    .map((id) => Number(id))
    .sort((a, b) => b - a)
    .forEach((mediaOffset) => {
      styles.push(
        createCSSClassWithMediaQuery(
          `max-width: ${mediaOffset}px`,
          (styleMap[String(mediaOffset)] || []).reduce(
            (acc: Record<string, string | number>, style) => {
              Object.assign(acc, style)
              return acc
            },
            {}
          )
        )
      )
    })
  return styles
}

export const generateStylesFromStyleSetDefinitions = (
  styleSetDefinitions: Record<string, UIDLStyleSetDefinition>,
  cssMap: string[],
  mediaStylesMap: Record<string, Array<{ [x: string]: Record<string, string | number> }>>,
  className: (val: string) => string
) => {
  Object.keys(styleSetDefinitions).forEach((styleId) => {
    const style = styleSetDefinitions[styleId]
    const { content, conditions = [], type } = style
    const name = className(styleId)

    const { staticStyles, tokenStyles } = UIDLUtils.splitDynamicAndStaticStyles(content)
    const collectedStyles = {
      ...getContentOfStyleObject(staticStyles),
      ...getCSSVariablesContentFromTokenStyles(tokenStyles),
    } as Record<string, string | number>

    if (type === 'reusable-component-style-map') {
      cssMap.unshift(createCSSClass(name, collectedStyles))
    } else {
      cssMap.push(createCSSClass(name, collectedStyles))
    }

    if (conditions.length === 0) {
      return
    }
    conditions.forEach((styleRef) => {
      const { staticStyles: staticValues, tokenStyles: tokenValues } =
        UIDLUtils.splitDynamicAndStaticStyles(styleRef.content)

      const collecedMediaStyles = {
        ...getContentOfStyleObject(staticValues),
        ...getCSSVariablesContentFromTokenStyles(tokenValues),
      } as Record<string, string | number>

      if (styleRef.type === 'element-state') {
        if (type === 'reusable-component-style-map') {
          cssMap.unshift(
            createCSSClassWithSelector(name, `&:${styleRef.meta.state}`, collecedMediaStyles)
          )
        } else {
          cssMap.push(
            createCSSClassWithSelector(name, `&:${styleRef.meta.state}`, collecedMediaStyles)
          )
        }
      }

      if (styleRef.type === 'screen-size') {
        const { maxWidth } = styleRef.meta
        if (!mediaStylesMap[String(maxWidth)]) {
          mediaStylesMap[String(maxWidth)] = []
        }

        if (type === 'reusable-component-style-map') {
          mediaStylesMap[String(maxWidth)].unshift({ [name]: collecedMediaStyles })
        } else {
          mediaStylesMap[String(maxWidth)].push({ [name]: collecedMediaStyles })
        }
      }
    })
  })
}

export const setPropValueForCompStyle = (params: {
  attrs: Record<string, UIDLAttributeValue>
  key: string
  jsxNodesLookup: Record<string, types.JSXElement | HastNode>
  templateStyle?: 'jsx' | 'html'
  getClassName: (str: string) => string
}) => {
  const { attrs, jsxNodesLookup, key, templateStyle = 'jsx', getClassName } = params
  Object.keys(attrs).forEach((attr) => {
    if (attrs[attr].type !== 'comp-style') {
      return
    }

    if (templateStyle === 'jsx') {
      const compInstanceNode = jsxNodesLookup[key] as types.JSXElement
      compInstanceNode.openingElement?.attributes.forEach((attribute: types.JSXAttribute) => {
        if (attribute.name?.name === attr && (attribute.value as types.StringLiteral)?.value) {
          ;(attribute.value as types.StringLiteral).value = getClassName(
            (attribute.value as types.StringLiteral).value
          )
        }
      })
    }

    if (templateStyle === 'html') {
      const compInstanceNode = jsxNodesLookup[key] as HastNode
      if (!compInstanceNode?.properties[attr]) {
        return
      }
      compInstanceNode.properties[attr] = getClassName(String(compInstanceNode.properties[attr]))
    }
  })
}

'''
'''--- packages/teleport-plugin-common/src/index.ts ---
import * as ASTBuilders from './builders/ast-builders'
import * as StyleBuilders from './builders/style-builders'
import * as HASTBuilders from './builders/hast-builders'

import * as ASTUtils from './utils/ast-utils'
import * as StyleUtils from './utils/style-utils'
import * as HASTUtils from './utils/hast-utils'
import ParsedASTNode from './utils/parsed-ast'

export { ASTBuilders, StyleBuilders, HASTBuilders, ASTUtils, StyleUtils, HASTUtils, ParsedASTNode }

export { default as createHTMLTemplateSyntax } from './node-handlers/node-to-html'
export { default as createJSXSyntax } from './node-handlers/node-to-jsx'

export * from './node-handlers/node-to-html/types'
export * from './node-handlers/node-to-jsx/types'

'''
'''--- packages/teleport-plugin-common/src/node-handlers/node-to-html/constants.ts ---
import { HTMLTemplateSyntax } from './types'

// Vue.js template values
export const DEFAULT_TEMPLATE_SYNTAX: HTMLTemplateSyntax = {
  interpolation: (value) => `{{ ${value} }}`,
  eventBinding: (value) => `@${value}`,
  valueBinding: (value) => `:${value}`,
  eventEmmitter: (value) => `this.$emit('${value}')`,
  eventHandlersBindingMode: (value) => value,
  conditionalAttr: 'v-if',
  repeatAttr: 'v-for',
  repeatIterator: (iteratorName, iteratedCollection, useIndex) => {
    const iterator = useIndex ? `(${iteratorName}, index)` : iteratorName
    return `${iterator} in ${iteratedCollection}`
  },
  customElementTagName: (value) => value,
  dependencyHandling: 'import',
  domHTMLInjection: 'innerHTML',
}

'''
'''--- packages/teleport-plugin-common/src/node-handlers/node-to-html/index.ts ---
import * as hastUtils from '../../utils/hast-utils'
import { createHTMLNode } from '../../builders/hast-builders'
import { UIDLUtils, StringUtils } from '@teleporthq/teleport-shared'
import {
  UIDLRepeatNode,
  UIDLConditionalNode,
  UIDLSlotNode,
  UIDLNode,
  UIDLElementNode,
  HastNode,
} from '@teleporthq/teleport-types'
import { createConditionalStatement, handleAttribute, handleEvent } from './utils'
import { NodeToHTML } from './types'
import { DEFAULT_TEMPLATE_SYNTAX } from './constants'

const generateElementNode: NodeToHTML<UIDLElementNode, HastNode> = (node, params, syntax) => {
  const templateSyntax = { ...DEFAULT_TEMPLATE_SYNTAX, ...syntax }
  const { dependencies, templateLookup } = params
  const { elementType, name, key, children, attrs, dependency, events, selfClosing } = node.content

  const originalElementName = elementType || 'component'
  const tagName = originalElementName
  let safeTagName =
    dependency && dependency.type === 'local'
      ? templateSyntax.customElementTagName(tagName)
      : tagName

  if (dependency) {
    const existingDependency = dependencies[tagName]
    if (templateSyntax.dependencyHandling === 'import' && dependency.type !== 'local') {
      safeTagName =
        existingDependency && existingDependency?.path !== dependency?.path
          ? `${StringUtils.dashCaseToUpperCamelCase(
              StringUtils.removeIllegalCharacters(dependency.path)
            )}${tagName}`
          : tagName

      dependencies[safeTagName] = { ...dependency }

      if (existingDependency && existingDependency?.path !== dependency?.path) {
        dependencies[safeTagName] = {
          ...dependency,
          meta: {
            ...dependency.meta,
            originalName: originalElementName,
          },
        }
      }
    } else if (dependency.type === 'local' && templateSyntax.dependencyHandling === 'import') {
      // local dependencies can be renamed based on their safety (eg: Header/header, Form/form)
      const safeImportName = StringUtils.dashCaseToUpperCamelCase(safeTagName)
      dependencies[safeImportName] = { ...dependency }
    }
  }

  const htmlNode = createHTMLNode(safeTagName)

  if (attrs) {
    Object.keys(attrs).forEach((attrKey) => {
      const attrValue = attrs[attrKey]
      handleAttribute(htmlNode, name, attrKey, attrValue, params, templateSyntax, node)
    })
  }

  if (events) {
    Object.keys(events).forEach((eventKey) =>
      handleEvent(htmlNode, name, eventKey, events[eventKey], params, templateSyntax)
    )
  }

  if (!selfClosing && children) {
    children.forEach((child) => {
      const childTag = generateNode(child, params, templateSyntax)

      if (typeof childTag === 'string') {
        hastUtils.addTextNode(htmlNode, childTag)
      } else {
        hastUtils.addChildNode(htmlNode, childTag)
      }
    })
  }

  templateLookup[key] = htmlNode
  return htmlNode
}

export default generateElementNode

const generateNode: NodeToHTML<UIDLNode, HastNode | string> = (node, params, templateSyntax) => {
  switch (node.type) {
    case 'inject':
      if (node?.dependency) {
        /* tslint:disable:no-string-literal */
        params.dependencies['Script'] = node.dependency
      }
      return node.content.toString()

    case 'raw':
      return generateRawHTMLNode(node, params, templateSyntax)

    case 'static':
      return StringUtils.encode(node.content.toString())

    case 'dynamic':
      return templateSyntax.interpolation(node.content.id)

    case 'element':
      return generateElementNode(node, params, templateSyntax)

    case 'repeat':
      return generateRepeatNode(node, params, templateSyntax)

    case 'conditional':
      return generateConditionalNode(node, params, templateSyntax)

    case 'slot':
      return generateSlotNode(node, params, templateSyntax)

    default:
      throw new Error(
        `generateHTMLSyntax encountered a node of unsupported type: ${JSON.stringify(
          node,
          null,
          2
        )}`
      )
  }
}

const generateRawHTMLNode: NodeToHTML<UIDLNode, HastNode> = (node, params, templateSyntax) => {
  const attrKey = templateSyntax.domHTMLInjection ? templateSyntax.domHTMLInjection : 'innerHTML'
  const htmlNode = createHTMLNode('span')
  const dataObjName = `${node.type}${StringUtils.generateRandomString()}`
  hastUtils.addAttributeToNode(htmlNode, attrKey, dataObjName)
  params.dataObject[dataObjName] = node.content.toString()
  return htmlNode
}

const generateRepeatNode: NodeToHTML<UIDLRepeatNode, HastNode> = (node, params, templateSyntax) => {
  const { dataSource, node: repeatContent, meta = {} } = node.content
  const repeatContentTag = generateElementNode(repeatContent, params, templateSyntax)

  let dataObjectIdentifier = meta.dataSourceIdentifier || `items`
  if (dataSource.type === 'dynamic') {
    dataObjectIdentifier = dataSource.content.id
  } else {
    params.dataObject[dataObjectIdentifier] = dataSource.content
  }

  const { iteratorName, iteratorKey } = UIDLUtils.getRepeatIteratorNameAndKey(meta)
  const repeatIterator = templateSyntax.repeatIterator(
    iteratorName,
    dataObjectIdentifier,
    meta.useIndex
  )

  hastUtils.addAttributeToNode(repeatContentTag, templateSyntax.repeatAttr, repeatIterator)
  hastUtils.addAttributeToNode(repeatContentTag, templateSyntax.valueBinding('key'), iteratorKey)
  return repeatContentTag
}

const generateConditionalNode: NodeToHTML<UIDLConditionalNode, HastNode> = (
  node,
  params,
  templateSyntax
) => {
  let conditionalTag = generateNode(node.content.node, params, templateSyntax)
  // conditional attribute needs to be added on a tag, so in case of a text node we wrap it with
  // a 'span' which is the less intrusive of all
  if (typeof conditionalTag === 'string') {
    const wrappingSpan = createHTMLNode('span')
    hastUtils.addTextNode(wrappingSpan, conditionalTag)
    conditionalTag = wrappingSpan
  }

  const conditionalStatement = createConditionalStatement(node)
  hastUtils.addAttributeToNode(conditionalTag, templateSyntax.conditionalAttr, conditionalStatement)
  return conditionalTag
}

const generateSlotNode: NodeToHTML<UIDLSlotNode, HastNode> = (node, params, templateSyntax) => {
  const slotNode = createHTMLNode('slot')

  if (node.content.name) {
    hastUtils.addAttributeToNode(slotNode, 'name', node.content.name)
  }

  if (node.content.fallback) {
    const { fallback } = node.content
    const fallbackContent = generateNode(fallback, params, templateSyntax)

    if (typeof fallbackContent === 'string') {
      hastUtils.addTextNode(slotNode, fallbackContent)
    } else {
      hastUtils.addChildNode(slotNode, fallbackContent)
    }
  }

  return slotNode
}

'''
'''--- packages/teleport-plugin-common/src/node-handlers/node-to-html/types.ts ---
import {
  UIDLDependency,
  UIDLEventHandlerStatement,
  UIDLElementNode,
} from '@teleporthq/teleport-types'

export interface HTMLTemplateGenerationParams {
  // tslint:disable-next-line no-any
  templateLookup: Record<string, any>
  dependencies: Record<string, UIDLDependency>
  // tslint:disable-next-line no-any
  dataObject: Record<string, any>
  methodsObject: Record<string, UIDLEventHandlerStatement[]>
}

export interface HTMLTemplateSyntax {
  interpolation?: (value: string) => string
  valueBinding?: (value: string, node?: UIDLElementNode) => string
  eventBinding?: (value: string) => string
  eventHandlersBindingMode?: (value: string) => string
  eventEmmitter?: (value: string) => string
  conditionalAttr?: string
  repeatAttr?: string
  repeatIterator?: (iteratorName: string, iteratedCollection: string, useIndex: boolean) => string
  customElementTagName?: (value: string) => string
  dependencyHandling?: 'import' | 'ignore'
  domHTMLInjection?: string
}

export type NodeToHTML<NodeType, ReturnType> = (
  node: NodeType,
  params: HTMLTemplateGenerationParams,
  templateSyntax: HTMLTemplateSyntax
) => ReturnType

'''
'''--- packages/teleport-plugin-common/src/node-handlers/node-to-html/utils.ts ---
import * as hastUtils from '../../utils/hast-utils'
import { StringUtils } from '@teleporthq/teleport-shared'
import {
  UIDLConditionalExpression,
  UIDLConditionalNode,
  HastNode,
  UIDLAttributeValue,
  UIDLEventHandlerStatement,
  UIDLElementNode,
} from '@teleporthq/teleport-types'
import { HTMLTemplateGenerationParams, HTMLTemplateSyntax } from './types'

export const handleAttribute = (
  htmlNode: HastNode,
  elementName: string,
  attrKey: string,
  attrValue: UIDLAttributeValue,
  params: HTMLTemplateGenerationParams,
  templateSyntax: HTMLTemplateSyntax,
  node: UIDLElementNode
) => {
  const { dataObject } = params
  const dynamicAttrKey = templateSyntax.valueBinding(attrKey, node)

  switch (attrValue.type) {
    case 'dynamic':
    case 'import':
      hastUtils.addAttributeToNode(htmlNode, dynamicAttrKey, attrValue.content.id)
      break
    case 'comp-style':
      hastUtils.addAttributeToNode(
        htmlNode,
        attrKey,
        StringUtils.encode(attrValue.content.toString())
      )
      break
    case 'raw':
      hastUtils.addAttributeToNode(htmlNode, attrKey, attrValue.content.toString())
      break
    case 'static':
      if (Array.isArray(attrValue.content)) {
        // This handles the cases when arrays are sent as props or passed as attributes
        // The array will be placed on the dataObject and the data reference is placed on the node
        const dataObjectIdentifier = `${elementName}${StringUtils.capitalize(attrKey)}`
        dataObject[dataObjectIdentifier] = attrValue.content
        hastUtils.addAttributeToNode(htmlNode, dynamicAttrKey, dataObjectIdentifier)
      } else if (typeof attrValue.content === 'boolean') {
        attrValue.content === true
          ? hastUtils.addBooleanAttributeToNode(htmlNode, attrKey)
          : hastUtils.addBooleanAttributeToNode(htmlNode, dynamicAttrKey, false)
      } else if (typeof attrValue.content === 'string') {
        hastUtils.addAttributeToNode(
          htmlNode,
          attrKey,
          StringUtils.encode(attrValue.content.toString())
        )
      } else {
        // For numbers and values that are passed to components and maintain their type
        hastUtils.addAttributeToNode(htmlNode, dynamicAttrKey, attrValue.content.toString())
      }
      break
    default:
      throw new Error(
        `generateElementNode could not generate code for attribute of type ${JSON.stringify(
          attrValue
        )}`
      )
  }
}

export const handleEvent = (
  htmlNode: HastNode,
  elementName: string,
  eventKey: string,
  eventHandlerStatements: UIDLEventHandlerStatement[],
  params: HTMLTemplateGenerationParams,
  templateSyntax: HTMLTemplateSyntax
) => {
  const { methodsObject } = params
  const eventHandlerKey = templateSyntax.eventBinding(eventKey)

  if (eventHandlerStatements.length === 1) {
    const statement = eventHandlerStatements[0]

    if (statement.type === 'propCall' && statement.calls) {
      const eventEmitter = templateSyntax.eventEmmitter(statement.calls)
      hastUtils.addAttributeToNode(htmlNode, eventHandlerKey, eventEmitter)
    }

    if (statement.type === 'stateChange') {
      hastUtils.addAttributeToNode(
        htmlNode,
        eventHandlerKey,
        statement.newState === '$toggle'
          ? `${statement.modifies} = !${statement.modifies}`
          : `${statement.modifies} = ${statement.newState}`
      )
    }
  } else {
    const methodName = `handle${StringUtils.dashCaseToUpperCamelCase(
      elementName
    )}${StringUtils.dashCaseToUpperCamelCase(eventKey)}`
    const eventNameBiding = templateSyntax.eventHandlersBindingMode
      ? templateSyntax.eventHandlersBindingMode(methodName)
      : methodName

    methodsObject[methodName] = eventHandlerStatements
    hastUtils.addAttributeToNode(htmlNode, eventHandlerKey, eventNameBiding)
  }
}

export const createConditionalStatement = (node: UIDLConditionalNode): string => {
  const { node: childNode, reference, value, condition } = node.content

  const expression = standardizeUIDLConditionalExpression(value, condition)
  const statement = createConditional(reference.content.id, expression)

  if (childNode.type === 'conditional') {
    return `${statement} && ${createConditionalStatement(childNode)}`
  }

  return statement
}

const standardizeUIDLConditionalExpression = (
  value: string | number | boolean,
  condition: UIDLConditionalExpression
) => {
  const conditionalExpression: UIDLConditionalExpression =
    value !== null && value !== undefined
      ? { conditions: [{ operand: value, operation: '===' }] }
      : condition
  return conditionalExpression
}

const createConditional = (
  conditionalKey: string,
  conditionalExpression: UIDLConditionalExpression
) => {
  const { matchingCriteria, conditions } = conditionalExpression
  if (conditions.length === 1) {
    // Separate handling for single condition to avoid unnecessary () around
    const { operation, operand } = conditions[0]
    return stringifyConditionalExpression(conditionalKey, operation, operand)
  }

  const stringConditions = conditions.map(({ operation, operand }) => {
    return `(${stringifyConditionalExpression(conditionalKey, operation, operand)})`
  })

  const joinOperator = matchingCriteria === 'all' ? '&&' : '||'
  return stringConditions.join(` ${joinOperator} `)
}

const stringifyConditionalExpression = (
  identifier: string,
  operation: string,
  value: string | number | boolean
) => {
  if (typeof value === 'boolean') {
    return `${value ? '' : '!'}${identifier}`
  }

  if (typeof value === 'string') {
    return `${identifier} ${operation} '${value}'`
  }

  return `${identifier} ${operation} ${value}`
}

'''
'''--- packages/teleport-plugin-common/src/node-handlers/node-to-jsx/constants.ts ---
import { JSXGenerationOptions } from './types'

export const DEFAULT_JSX_OPTIONS: JSXGenerationOptions = {
  dynamicReferencePrefixMap: {
    prop: '',
    state: '',
    local: '',
  },
  dependencyHandling: 'import',
  stateHandling: 'mutation',
  slotHandling: 'native',
}

'''
'''--- packages/teleport-plugin-common/src/node-handlers/node-to-jsx/index.ts ---
import * as types from '@babel/types'
import {
  UIDLElementNode,
  UIDLRepeatNode,
  UIDLConditionalNode,
  UIDLConditionalExpression,
  UIDLDynamicReference,
  UIDLSlotNode,
  UIDLNode,
} from '@teleporthq/teleport-types'
import { UIDLUtils, StringUtils } from '@teleporthq/teleport-shared'
import { JSXASTReturnType, NodeToJSX } from './types'

import {
  addEventHandlerToTag,
  createConditionIdentifier,
  createDynamicValueExpression,
  createConditionalJSXExpression,
  getRepeatSourceIdentifier,
} from './utils'
import {
  addChildJSXText,
  addChildJSXTag,
  addAttributeToJSXTag,
  addDynamicAttributeToJSXTag,
  addRawAttributeToJSXTag,
  generateDynamicWindowImport,
} from '../../utils/ast-utils'
import { createJSXTag, createSelfClosingJSXTag } from '../../builders/ast-builders'
import { DEFAULT_JSX_OPTIONS } from './constants'

const generateElementNode: NodeToJSX<UIDLElementNode, types.JSXElement> = (
  node,
  params,
  jsxOptions
) => {
  const options = { ...DEFAULT_JSX_OPTIONS, ...jsxOptions }
  const { dependencies, nodesLookup } = params
  const { elementType, selfClosing, children, key, attrs, dependency, events } = node.content

  const originalElementName = elementType || 'component'
  let tagName = originalElementName

  if (dependency) {
    if (
      options.dependencyHandling === 'import' ||
      (options.dependencyHandling === 'ignore' && dependency?.type === 'package')
    ) {
      const existingDependency = dependencies[tagName]
      if (existingDependency && existingDependency?.path !== dependency?.path) {
        tagName = `${StringUtils.dashCaseToUpperCamelCase(
          StringUtils.removeIllegalCharacters(dependency.path)
        )}${tagName}`
        dependencies[tagName] = {
          ...dependency,
          meta: {
            ...dependency.meta,
            originalName: originalElementName,
          },
        }
      } else {
        // Make a copy to avoid reference leaking
        dependencies[tagName] = { ...dependency }
      }
    }

    if (dependency?.meta && `needsWindowObject` in dependency.meta) {
      const dynamicWindowImport = generateDynamicWindowImport('useEffect', dependency.path)
      params.windowImports[dependency.path] = dynamicWindowImport
    }
  }

  const elementName =
    dependency && dependency.type === 'local' && options.customElementTag
      ? options.customElementTag(tagName)
      : tagName
  const elementTag = selfClosing ? createSelfClosingJSXTag(elementName) : createJSXTag(elementName)

  if (attrs) {
    Object.keys(attrs).forEach((attrKey) => {
      const attributeValue = attrs[attrKey]

      switch (attributeValue.type) {
        case 'dynamic':
          const {
            content: { id, referenceType },
          } = attributeValue
          const prefix =
            options.dynamicReferencePrefixMap[referenceType as 'prop' | 'state' | 'local']
          addDynamicAttributeToJSXTag(elementTag, attrKey, id, prefix)
          break
        case 'import':
          addDynamicAttributeToJSXTag(elementTag, attrKey, attributeValue.content.id)
          break
        case 'raw':
          addRawAttributeToJSXTag(elementTag, attrKey, attributeValue)
          break
        case 'comp-style':
        case 'static':
          const { content } = attributeValue
          addAttributeToJSXTag(elementTag, attrKey, content)
          break
        default:
          throw new Error(
            `generateElementNode could not generate code for attribute of type ${JSON.stringify(
              attributeValue
            )}`
          )
      }
    })
  }

  if (events) {
    Object.keys(events).forEach((eventKey) => {
      addEventHandlerToTag(elementTag, eventKey, events[eventKey], params, options)
    })
  }

  if (!selfClosing && children) {
    children.forEach((child) => {
      const childTag = generateNode(child, params, options)

      if (typeof childTag === 'string') {
        addChildJSXText(elementTag, childTag)
      } else if (childTag.type === 'JSXExpressionContainer' || childTag.type === 'JSXElement') {
        addChildJSXTag(elementTag, childTag)
      } else {
        addChildJSXTag(elementTag, types.jsxExpressionContainer(childTag))
      }
    })
  }

  nodesLookup[key] = elementTag
  return elementTag
}

export default generateElementNode

const generateNode: NodeToJSX<UIDLNode, JSXASTReturnType> = (node, params, options) => {
  switch (node.type) {
    case 'inject':
      if (node?.dependency) {
        /* tslint:disable:no-string-literal */
        params.dependencies['Script'] = node.dependency
      }
      return node.content.toString()

    case 'raw':
      return options.domHTMLInjection
        ? options.domHTMLInjection(node.content.toString())
        : node.content.toString()

    case 'static':
      return StringUtils.encode(node.content.toString())

    case 'dynamic':
      return createDynamicValueExpression(node, options)

    case 'element':
      return generateElementNode(node, params, options)

    case 'repeat':
      return generateRepeatNode(node, params, options)

    case 'conditional':
      return generateConditionalNode(node, params, options)

    case 'slot':
      if (options.slotHandling === 'native') {
        return generateNativeSlotNode(node, params, options)
      } else {
        return generatePropsSlotNode(node, params, options)
      }

    default:
      throw new Error(
        `generateNodeSyntax encountered a node of unsupported type: ${JSON.stringify(
          node,
          null,
          2
        )}`
      )
  }
}

const generateRepeatNode: NodeToJSX<UIDLRepeatNode, types.JSXExpressionContainer> = (
  node,
  params,
  options
) => {
  const { node: repeatContent, dataSource, meta } = node.content

  const contentAST = generateElementNode(repeatContent, params, options)

  const { iteratorName, iteratorKey } = UIDLUtils.getRepeatIteratorNameAndKey(meta)

  const localIteratorPrefix = options.dynamicReferencePrefixMap.local
  addDynamicAttributeToJSXTag(contentAST, 'key', iteratorKey, localIteratorPrefix)

  const source = getRepeatSourceIdentifier(dataSource, options)

  const arrowFunctionArguments = [types.identifier(iteratorName)]
  if (meta.useIndex) {
    arrowFunctionArguments.push(types.identifier('index'))
  }

  return types.jsxExpressionContainer(
    types.callExpression(types.memberExpression(source, types.identifier('map')), [
      types.arrowFunctionExpression(arrowFunctionArguments, contentAST),
    ])
  )
}

const generateConditionalNode: NodeToJSX<UIDLConditionalNode, types.LogicalExpression> = (
  node,
  params,
  options
) => {
  const { reference, value } = node.content
  const conditionIdentifier = createConditionIdentifier(reference, params, options)

  const subTree = generateNode(node.content.node, params, options)

  const condition: UIDLConditionalExpression =
    value !== undefined && value !== null
      ? { conditions: [{ operand: value, operation: '===' }] }
      : node.content.condition

  return createConditionalJSXExpression(subTree, condition, conditionIdentifier)
}

const generatePropsSlotNode: NodeToJSX<UIDLSlotNode, types.JSXExpressionContainer> = (
  node: UIDLSlotNode,
  params,
  options
) => {
  // React/Preact do not have native slot nodes and implement this differently through the props.children syntax.
  // Unfortunately, names slots are ignored because React/Preact treat all the inner content of the component as props.children
  const childrenProp: UIDLDynamicReference = {
    type: 'dynamic',
    content: {
      referenceType: 'prop',
      id: 'children',
    },
  }

  const childrenExpression = createDynamicValueExpression(childrenProp, options)

  if (node.content.fallback) {
    const fallbackContent = generateNode(node.content.fallback, params, options)
    // only static dynamic or element are allowed here
    const fallbackNode =
      typeof fallbackContent === 'string'
        ? types.stringLiteral(fallbackContent)
        : (fallbackContent as types.JSXElement | types.MemberExpression)

    // props.children with fallback
    return types.jsxExpressionContainer(
      types.logicalExpression('||', childrenExpression, fallbackNode)
    )
  }

  return types.jsxExpressionContainer(childrenExpression)
}

const generateNativeSlotNode: NodeToJSX<UIDLSlotNode, types.JSXElement> = (
  node,
  params,
  options
) => {
  const slotNode = createSelfClosingJSXTag('slot')

  if (node.content.name) {
    addAttributeToJSXTag(slotNode, 'name', node.content.name)
  }

  if (node.content.fallback) {
    const fallbackContent = generateNode(node.content.fallback, params, options)
    if (typeof fallbackContent === 'string') {
      addChildJSXText(slotNode, fallbackContent)
    } else if (fallbackContent.type === 'MemberExpression') {
      addChildJSXTag(slotNode, types.jsxExpressionContainer(fallbackContent))
    } else {
      addChildJSXTag(slotNode, fallbackContent as types.JSXElement)
    }
  }

  return slotNode
}

'''
'''--- packages/teleport-plugin-common/src/node-handlers/node-to-jsx/types.ts ---
import * as types from '@babel/types'

import { UIDLPropDefinition, UIDLDependency, UIDLStateDefinition } from '@teleporthq/teleport-types'

export interface JSXGenerationParams {
  propDefinitions: Record<string, UIDLPropDefinition>
  stateDefinitions: Record<string, UIDLStateDefinition>
  nodesLookup: Record<string, types.JSXElement>
  dependencies: Record<string, UIDLDependency>
  windowImports: Record<string, types.ExpressionStatement>
}

export interface JSXGenerationOptions {
  /*
    Depending on the framework implementation, dynamic values can be prefixed in different ways.
    A few examples:
    - this.props.<propKey> - 'this.props' would be the prefix
    - this.<stateKey> - 'this' would be the prefix
    There are also cases where the prefix is empty, like when using hooks with React, the state key exists in the local scope
    Finally, frameworks might have a mix of both, depending on the use of stateful/stateless components (eg: Preact)
  */
  dynamicReferencePrefixMap?: {
    prop: string
    state: string
    local: string
  }

  /*
    Dependencies handling can differ based on the target framework. Web components do not need implicit imports
    because all the components are registered at the DOM level, so they will be used as regular HTML tags.
    - 'import' will create an import statement in the current component for any other local dependency
    - 'ignore' will not perform any action for the dependency, assuming it's been solved by another means
  */
  dependencyHandling?: 'import' | 'ignore'

  /*
    State changes handled inside event listeners differ from framework to framework
    - 'hooks' will assume state hooks (useState) are defined outside the JSX node and will call the set<stateKey> hook
    - 'function' will assume a classic react-like syntax, calling this.setState() for the state change
    - 'mutation' will create a standard assignment this.<stateKey> = newValue
  */
  stateHandling?: 'hooks' | 'function' | 'mutation'

  /*
    Slot nodes are handled differently in React/Preact than in web components driven frameworks (eg: Stencil)
    - 'native' will render a <slot> tag and has full support for named slots
    - 'props' will render a `props.children` node and needs some workarounds for multiple slots per component
  */
  slotHandling?: 'native' | 'props'
  customElementTag?: (name: string) => string
  domHTMLInjection?: (content: string) => types.JSXElement
}

export type NodeToJSX<NodeType, ReturnType> = (
  node: NodeType,
  params: JSXGenerationParams,
  options?: JSXGenerationOptions
) => ReturnType

export type JSXASTReturnType =
  | string
  | types.JSXExpressionContainer
  | types.JSXElement
  | types.LogicalExpression
  | types.Identifier
  | types.MemberExpression

export type BinaryOperator =
  | '==='
  | '+'
  | '-'
  | '/'
  | '%'
  | '*'
  | '**'
  | '&'
  | '|'
  | '>>'
  | '>>>'
  | '<<'
  | '^'
  | '=='
  | '!='
  | '!=='
  | 'in'
  | 'instanceof'
  | '>'
  | '<'
  | '>='
  | '<='

export type UnaryOperation = '+' | '-' | 'void' | 'throw' | 'delete' | '!' | '~' | 'typeof'

export interface ConditionalIdentifier {
  key: string
  type: string
  prefix?: string
}

'''
'''--- packages/teleport-plugin-common/src/node-handlers/node-to-jsx/utils.ts ---
import * as types from '@babel/types'

import { convertValueToLiteral } from '../../utils/ast-utils'
import { StringUtils } from '@teleporthq/teleport-shared'
import {
  UIDLPropDefinition,
  UIDLAttributeValue,
  UIDLDynamicReference,
  UIDLStateDefinition,
  UIDLEventHandlerStatement,
  UIDLConditionalExpression,
  UIDLPropCallEvent,
  UIDLStateModifierEvent,
} from '@teleporthq/teleport-types'

import {
  BinaryOperator,
  UnaryOperation,
  JSXASTReturnType,
  ConditionalIdentifier,
  JSXGenerationParams,
  JSXGenerationOptions,
} from './types'

// Adds all the event handlers and all the instructions for each event handler
// in case there is more than one specified in the UIDL
export const addEventHandlerToTag = (
  tag: types.JSXElement,
  eventKey: string,
  eventHandlerStatements: UIDLEventHandlerStatement[],
  params: JSXGenerationParams,
  options: JSXGenerationOptions,
  t = types
) => {
  const eventHandlerASTStatements: types.ExpressionStatement[] = []
  const { propDefinitions, stateDefinitions } = params

  eventHandlerStatements.forEach((eventHandlerAction) => {
    if (eventHandlerAction.type === 'stateChange') {
      const handler = createStateChangeStatement(eventHandlerAction, stateDefinitions, options)
      if (handler) {
        eventHandlerASTStatements.push(handler)
      }
    }

    if (eventHandlerAction.type === 'propCall') {
      const handler = createPropCallStatement(eventHandlerAction, propDefinitions, options)
      if (handler) {
        eventHandlerASTStatements.push(handler)
      }
    }
  })

  let expressionContent: types.ArrowFunctionExpression | types.Expression
  if (eventHandlerASTStatements.length === 1) {
    const expression = eventHandlerASTStatements[0].expression

    expressionContent =
      expression.type === 'CallExpression' && expression.arguments.length === 0
        ? (expression.callee as types.ArrowFunctionExpression | types.Expression)
        : t.arrowFunctionExpression([], expression)
  } else {
    expressionContent = t.arrowFunctionExpression([], t.blockStatement(eventHandlerASTStatements))
  }

  tag.openingElement.attributes.push(
    t.jsxAttribute(t.jsxIdentifier(eventKey), t.jsxExpressionContainer(expressionContent))
  )
}

const createPropCallStatement = (
  eventHandlerStatement: UIDLPropCallEvent,
  propDefinitions: Record<string, UIDLPropDefinition>,
  options: JSXGenerationOptions,
  t = types
) => {
  const { calls: propFunctionKey, args = [] } = eventHandlerStatement

  if (!propFunctionKey) {
    console.warn(`No prop definition referenced under the "calls" field`)
    return null
  }

  const propDefinition = propDefinitions[propFunctionKey]

  if (!propDefinition || propDefinition.type !== 'func') {
    console.warn(`No prop definition was found for "${propFunctionKey}"`)
    return null
  }

  const prefix = options.dynamicReferencePrefixMap.prop
    ? options.dynamicReferencePrefixMap.prop + '.'
    : ''
  return t.expressionStatement(
    t.callExpression(t.identifier(prefix + propFunctionKey), [
      ...args.map((arg) => convertValueToLiteral(arg)),
    ])
  )
}

const createStateChangeStatement = (
  eventHandlerStatement: UIDLStateModifierEvent,
  stateDefinitions: Record<string, UIDLStateDefinition>,
  options: JSXGenerationOptions,
  t = types
) => {
  if (!eventHandlerStatement.modifies) {
    console.warn(`No state identifier referenced under the "modifies" field`)
    return null
  }

  const stateKey = eventHandlerStatement.modifies
  const stateDefinition = stateDefinitions[stateKey]

  const statePrefix = options.dynamicReferencePrefixMap.state
    ? options.dynamicReferencePrefixMap.state + '.'
    : ''

  const newStateValue =
    eventHandlerStatement.newState === '$toggle'
      ? t.unaryExpression('!', t.identifier(statePrefix + stateKey))
      : convertValueToLiteral(eventHandlerStatement.newState, stateDefinition.type)

  switch (options.stateHandling) {
    case 'hooks':
      return t.expressionStatement(
        t.callExpression(t.identifier(`set${StringUtils.capitalize(stateKey)}`), [newStateValue])
      )
    case 'function':
      return t.expressionStatement(
        t.callExpression(t.identifier('this.setState'), [
          t.objectExpression([t.objectProperty(t.identifier(stateKey), newStateValue)]),
        ])
      )
    case 'mutation':
    default:
      return t.expressionStatement(
        t.assignmentExpression('=', t.identifier(statePrefix + stateKey), newStateValue)
      )
  }
}

export const createDynamicValueExpression = (
  identifier: UIDLDynamicReference,
  options: JSXGenerationOptions,
  t = types
) => {
  const refType = identifier.content.referenceType as 'prop' | 'state' | 'local'
  const prefix = options.dynamicReferencePrefixMap[refType] || ''
  return prefix === ''
    ? t.identifier(identifier.content.id)
    : t.memberExpression(t.identifier(prefix), t.identifier(identifier.content.id))
}

// Prepares an identifier (from props or state) to be used as a conditional rendering identifier
// Assumes the type from the corresponding props/state definitions
export const createConditionIdentifier = (
  dynamicReference: UIDLDynamicReference,
  params: JSXGenerationParams,
  options: JSXGenerationOptions
): ConditionalIdentifier => {
  const { id, referenceType } = dynamicReference.content

  // in case the id is a member expression: eg: fields.name
  const referenceRoot = id.split('.')[0]

  switch (referenceType) {
    case 'prop':
      return {
        key: id,
        type: params.propDefinitions[referenceRoot].type,
        prefix: options.dynamicReferencePrefixMap.prop,
      }
    case 'state':
      return {
        key: id,
        type: params.stateDefinitions[referenceRoot].type,
        prefix: options.dynamicReferencePrefixMap.state,
      }
    default:
      throw new Error(
        `createConditionIdentifier encountered an invalid reference type: ${JSON.stringify(
          dynamicReference,
          null,
          2
        )}`
      )
  }
}

export const createConditionalJSXExpression = (
  content: JSXASTReturnType,
  conditionalExpression: UIDLConditionalExpression,
  conditionalIdentifier: ConditionalIdentifier,
  t = types
) => {
  let contentNode: types.Expression

  if (typeof content === 'string') {
    contentNode = t.stringLiteral(content)
  } else if (content.type === 'JSXExpressionContainer') {
    contentNode = content.expression as types.Expression
  } else {
    contentNode = content
  }

  let binaryExpression:
    | types.LogicalExpression
    | types.BinaryExpression
    | types.UnaryExpression
    | types.Identifier
    | types.MemberExpression

  // When the stateValue is an object we will compute a logical/binary expression on the left side
  const { conditions, matchingCriteria } = conditionalExpression
  const binaryExpressions = conditions.map((condition) =>
    createBinaryExpression(condition, conditionalIdentifier)
  )

  if (binaryExpressions.length === 1) {
    binaryExpression = binaryExpressions[0]
  } else {
    // the first two binary expressions are put together as a logical expression
    const [firstExp, secondExp] = binaryExpressions
    const operation = matchingCriteria === 'all' ? '&&' : '||'
    let expression: types.LogicalExpression = t.logicalExpression(operation, firstExp, secondExp)

    // accumulate the rest of the expressions to the logical expression
    for (let index = 2; index < binaryExpressions.length; index++) {
      expression = t.logicalExpression(operation, expression, binaryExpressions[index])
    }

    binaryExpression = expression
  }

  return t.logicalExpression('&&', binaryExpression, contentNode)
}

export const createBinaryExpression = (
  condition: {
    operation: string
    operand?: string | number | boolean
  },
  conditionalIdentifier: ConditionalIdentifier,
  t = types
) => {
  const { operand, operation } = condition
  const identifier = conditionalIdentifier.prefix
    ? t.memberExpression(
        t.identifier(conditionalIdentifier.prefix),
        t.identifier(conditionalIdentifier.key)
      )
    : t.identifier(conditionalIdentifier.key)

  if (operation === '===') {
    if (operand === true) {
      return identifier
    }

    if (operand === false) {
      return t.unaryExpression('!', identifier)
    }
  }

  if (operand !== undefined) {
    const stateValueIdentifier = convertValueToLiteral(operand, conditionalIdentifier.type)

    return t.binaryExpression(convertToBinaryOperator(operation), identifier, stateValueIdentifier)
  } else {
    return operation ? t.unaryExpression(convertToUnaryOperator(operation), identifier) : identifier
  }
}

/**
 * Because of the restrictions of the AST Types we need to have a clear subset of binary operators we can use
 * @param operation - the operation defined in the UIDL for the current state branch
 */
const convertToBinaryOperator = (operation: string): BinaryOperator => {
  const allowedOperations = ['===', '!==', '>=', '<=', '>', '<']
  if (allowedOperations.includes(operation)) {
    return operation as BinaryOperator
  } else {
    return '==='
  }
}

const convertToUnaryOperator = (operation: string): UnaryOperation => {
  const allowedOperations = ['!']
  if (allowedOperations.includes(operation)) {
    return operation as UnaryOperation
  } else {
    return '!'
  }
}

export const getRepeatSourceIdentifier = (
  dataSource: UIDLAttributeValue,
  options: JSXGenerationOptions
) => {
  switch (dataSource.type) {
    case 'static':
      return convertValueToLiteral(dataSource.content)
    case 'dynamic': {
      return createDynamicValueExpression(dataSource, options)
    }
    default:
      throw new Error(`Invalid type for dataSource: ${dataSource}`)
  }
}

'''
'''--- packages/teleport-plugin-common/src/types.d.ts ---
declare module 'jss-preset-default'

'''
'''--- packages/teleport-plugin-common/src/utils/ast-utils.ts ---
import * as types from '@babel/types'
import ParsedASTNode from './parsed-ast'
import { StringUtils } from '@teleporthq/teleport-shared'
import { UIDLStateDefinition, UIDLPropDefinition, UIDLRawValue } from '@teleporthq/teleport-types'
/**
 * Adds a class definition string to an existing string of classes
 */
export const addClassStringOnJSXTag = (
  jsxNode: types.JSXElement,
  classString: string,
  classAttributeName?: string,
  dynamicValues: Array<types.MemberExpression | types.Identifier> = []
) => {
  const classAttribute = getClassAttribute(jsxNode, { createIfNotFound: true, classAttributeName })

  if (dynamicValues.length === 0) {
    if (classAttribute.value && classAttribute.value.type === 'StringLiteral') {
      const classArray = classAttribute.value.value.split(' ')
      classArray.push(classString)
      classAttribute.value.value = classArray.join(' ').trim()
    } else {
      throw new Error(
        'Attempted to set a class string literral on a jsx tag which had an invalid className attribute'
      )
    }
  }

  if (dynamicValues.length) {
    if (classAttribute.value && classAttribute.value.type === 'StringLiteral') {
      const classArray = classAttribute.value.value.split(' ')
      const quasis: types.TemplateElement[] = []
      const expression: Array<types.MemberExpression | types.Identifier> = []

      quasis.push(
        types.templateElement({
          raw: classString + classArray.join(' ') + ' ',
          cooked: classString + classArray.join(' ') + ' ',
        })
      )

      dynamicValues.forEach((dynamicVal) => {
        expression.push(dynamicVal)
        quasis.push(types.templateElement({ raw: ' ', cooked: ' ' }))
      })

      classAttribute.value = types.jsxExpressionContainer(types.templateLiteral(quasis, expression))
    } else {
      throw new Error(
        `Attempted to set a dynamic class literral on a jsx tag which had an invalid className attribute`
      )
    }
  }
}

/**
 * Gets the existing className declaration attribute or generates and returns
 * a newly created and assigned one to the given JSXNode
 */
const getClassAttribute = (
  jsxNode: types.JSXElement,
  { createIfNotFound = false, classAttributeName = 'className' },
  t = types
): types.JSXAttribute => {
  const classNameAttribute = jsxNode.openingElement.attributes.find((attribute) => {
    return attribute.type === 'JSXAttribute' && attribute.name.name === classAttributeName
  })

  if (!classNameAttribute && createIfNotFound) {
    const createdClassAttribute = t.jsxAttribute(
      t.jsxIdentifier(classAttributeName),
      t.stringLiteral('')
    )

    jsxNode.openingElement.attributes.push(createdClassAttribute)
    return createdClassAttribute
  }

  return classNameAttribute as types.JSXAttribute
}

/**
 * Makes `${name}={${prefix}.${value}}` happen in AST
 */
export const addDynamicAttributeToJSXTag = (
  jsxASTNode: types.JSXElement,
  name: string,
  value: string,
  prefix: string = '',
  t = types
) => {
  const content =
    prefix === ''
      ? t.identifier(value)
      : t.memberExpression(t.identifier(prefix), t.identifier(value))

  jsxASTNode.openingElement.attributes.push(
    t.jsxAttribute(t.jsxIdentifier(name), t.jsxExpressionContainer(content))
  )
}

/*
  Use, when we need to add a mix of dynamic and static values to
  the same attribute at the same time.
*/

export const addMultipleDynamicAttributesToJSXTag = (
  jsxASTNode: types.JSXElement,
  name: string,
  attrValues: Array<types.MemberExpression | types.Identifier> = [],
  t = types
) => {
  const memberExpressions: Array<types.Identifier | types.MemberExpression> = []
  const templateElements: types.TemplateElement[] = []

  if (attrValues.length === 0) {
    return
  }

  let content: types.TemplateLiteral | types.MemberExpression | types.Identifier
  if (attrValues.length === 1) {
    content = attrValues[0]
  } else {
    attrValues.forEach((attr) => {
      memberExpressions.push(attr)
      templateElements.push(t.templateElement({ raw: ' ', cooked: ' ' }))
    })
    templateElements.push(t.templateElement({ raw: ' ', cooked: ' ' }))
    content = t.templateLiteral(templateElements, memberExpressions)
  }

  jsxASTNode.openingElement.attributes.push(
    t.jsxAttribute(t.jsxIdentifier(name), t.jsxExpressionContainer(content))
  )
}

export const stringAsTemplateLiteral = (str: string, t = types) => {
  const formmattedString = `
${str}
  `
  return t.templateLiteral(
    [
      t.templateElement(
        {
          raw: formmattedString,
          cooked: formmattedString,
        },
        true
      ),
    ],
    []
  )
}

export const addAttributeToJSXTag = (
  jsxNode: types.JSXElement,
  attrName: string,
  attrValue?: boolean | unknown,
  t = types
) => {
  const nameOfAttribute = t.jsxIdentifier(attrName)
  let attributeDefinition
  if (typeof attrValue === 'boolean') {
    attributeDefinition = t.jsxAttribute(
      nameOfAttribute,
      attrValue === true ? undefined : t.jsxExpressionContainer(t.booleanLiteral(attrValue))
    )
  } else {
    attributeDefinition = t.jsxAttribute(
      nameOfAttribute,
      getProperAttributeValueAssignment(attrValue)
    )
  }

  jsxNode.openingElement.attributes.push(attributeDefinition)
}

export const addRawAttributeToJSXTag = (
  jsxNode: types.JSXElement,
  attrName: string,
  attrValue: UIDLRawValue,
  t = types
) => {
  const attributeDefinition = t.jsxAttribute(
    t.jsxIdentifier(attrName),
    t.jsxExpressionContainer(
      types.templateLiteral([types.templateElement({ raw: attrValue.content })], [])
    )
  )
  jsxNode.openingElement.attributes.push(attributeDefinition)
}

/**
 * node must be a AST node element of type JSXElement (babel-types) or
 * equivalent
 */
const getProperAttributeValueAssignment = (value: string | unknown, t = types) => {
  if (!value) {
    return null
  }

  if (typeof value === 'string') {
    return t.stringLiteral(StringUtils.encode(value))
  }

  return t.jsxExpressionContainer(convertValueToLiteral(value))
}

export const addChildJSXTag = (
  tag: types.JSXElement,
  childNode: types.JSXElement | types.JSXExpressionContainer,
  t = types
) => {
  tag.children.push(childNode, t.jsxText('\n'))
}

export const addChildJSXText = (tag: types.JSXElement, text: string, t = types) => {
  tag.children.push(t.jsxText(text), t.jsxText('\n'))
}

export const addSpreadAttributeToJSXTag = (
  jsxTag: types.JSXElement,
  attrName: string,
  t = types
) => {
  jsxTag.openingElement.attributes.push(t.jsxSpreadAttribute(t.identifier(attrName)))
}

export const renameJSXTag = (jsxTag: types.JSXElement, newName: string, t = types) => {
  jsxTag.openingElement.name = t.jsxIdentifier(newName)
  if (jsxTag.closingElement) {
    jsxTag.closingElement.name = t.jsxIdentifier(newName)
  }
}

export const objectToObjectExpression = (
  objectMap: { [key: string]: ParsedASTNode | unknown },
  t = types
) => {
  const props = Object.keys(objectMap).reduce((acc: unknown[], key) => {
    const keyIdentifier = t.stringLiteral(key)
    const value = objectMap[key]
    let computedLiteralValue = null

    if (value instanceof ParsedASTNode || value.constructor.name === 'ParsedASTNode') {
      computedLiteralValue = (value as ParsedASTNode).ast
    } else if (typeof value === 'boolean') {
      computedLiteralValue = t.booleanLiteral(value)
    } else if (typeof value === 'string') {
      computedLiteralValue = t.stringLiteral(value)
    } else if (typeof value === 'number') {
      computedLiteralValue = t.numericLiteral(value)
    } else if (Array.isArray(value)) {
      computedLiteralValue = t.arrayExpression(
        value.map((element) => convertValueToLiteral(element))
      )
    } else if (value === Object) {
      computedLiteralValue = t.identifier('Object')
    } else if (typeof value === 'object') {
      computedLiteralValue = objectToObjectExpression(value as Record<string, unknown>, t)
    } else if (value === String) {
      computedLiteralValue = t.identifier('String')
    } else if (value === Number) {
      computedLiteralValue = t.identifier('Number')
    } else if (value === Array) {
      computedLiteralValue = t.identifier('Array')
    }

    if (computedLiteralValue) {
      // @ts-ignore
      acc.push(t.objectProperty(keyIdentifier, computedLiteralValue))
    }

    return acc
  }, [])

  const objectExpression = t.objectExpression(
    props as Array<types.ObjectMethod | types.ObjectProperty | types.SpreadElement>
  )
  return objectExpression
}

type ExpressionLiteral =
  | types.StringLiteral
  | types.BooleanLiteral
  | types.NumericLiteral
  | types.Identifier
  | types.ArrayExpression
  | types.ObjectExpression
  | types.NullLiteral

export const convertValueToLiteral = (
  // tslint:disable-next-line no-any
  value: any,
  explicitType: string = '',
  t = types
): ExpressionLiteral => {
  if (value === undefined || value === null) {
    return t.nullLiteral()
  }

  if (Array.isArray(value)) {
    return t.arrayExpression(value.map((val) => convertValueToLiteral(val)))
  }

  const typeToCompare = explicitType ? explicitType : typeof value
  switch (typeToCompare) {
    case 'string':
      return t.stringLiteral(value)
    case 'boolean':
      return t.booleanLiteral(value)
    case 'number':
      return t.numericLiteral(value)
    case 'object':
      return objectToObjectExpression(value)
    default:
      return t.identifier(value.toString())
  }
}

export const addPropertyToASTObject = (
  obj: types.ObjectExpression,
  key: string,
  // tslint:disable-next-line no-any
  value: any,
  t = types
) => {
  obj.properties.push(t.objectProperty(t.identifier(key), convertValueToLiteral(value)))
}

// tslint:disable-next-line no-any
export const getTSAnnotationForType = (type: any, t = types) => {
  switch (type) {
    case 'string':
      return t.tsStringKeyword()
    case 'number':
      return t.tsNumberKeyword()
    case 'boolean':
      return t.tsBooleanKeyword()
    default:
      return t.tsUnknownKeyword()
  }
}

export const findAttributeByName = (jsxTag: types.JSXElement, attrName: string) => {
  return jsxTag.openingElement.attributes.find(
    (attr) => attr.type === 'JSXAttribute' && attr.name.name === attrName
  ) as types.JSXAttribute
}

export const removeAttributeByName = (jsxTag: types.JSXElement, attrName: string) => {
  jsxTag.openingElement.attributes = jsxTag.openingElement.attributes.filter(
    (attr) =>
      attr.type === 'JSXSpreadAttribute' ||
      (attr.type === 'JSXAttribute' && attr.name.name !== attrName)
  )
}

export const createClassComponent = (
  name: string,
  propDefinitions: Record<string, UIDLPropDefinition>,
  stateDefinitions: Record<string, UIDLStateDefinition>,
  jsxTagTree: types.JSXElement,
  t = types
) => {
  // TODO: Add event handlers as separate functions later
  const classMethodsAndProperties = []
  const renderMethodArguments = []

  if (Object.keys(propDefinitions).length > 0 || Object.keys(stateDefinitions).length > 0) {
    renderMethodArguments.push(t.identifier('props'))
  }

  if (Object.keys(stateDefinitions).length > 0) {
    const stateDeclarationsAST = Object.keys(stateDefinitions).map((stateKey) => {
      const stateDefinition = stateDefinitions[stateKey]
      return t.objectProperty(
        t.identifier(stateKey),
        convertValueToLiteral(stateDefinition.defaultValue)
      )
    })

    classMethodsAndProperties.push(
      t.classProperty(t.identifier('state'), t.objectExpression(stateDeclarationsAST))
    )
    renderMethodArguments.push(t.identifier('state'))
  }

  const classBody = t.classBody([
    ...classMethodsAndProperties,
    t.classMethod(
      'method',
      t.identifier('render'),
      renderMethodArguments,
      t.blockStatement([t.returnStatement(jsxTagTree)])
    ),
  ])

  const classDeclaration = t.classDeclaration(
    t.identifier(name),
    t.identifier('Component'),
    classBody,
    null
  )

  return classDeclaration
}

export const createPureComponent = (
  name: string,
  stateDefinitions: Record<string, UIDLStateDefinition>,
  jsxTagTree: types.JSXElement,
  windowImports: Record<string, types.ExpressionStatement> = {},
  t = types
): types.VariableDeclaration => {
  const arrowFunctionBody = createReturnExpressionSyntax(
    stateDefinitions,
    jsxTagTree,
    windowImports
  )
  const arrowFunction = t.arrowFunctionExpression([t.identifier('props')], arrowFunctionBody)

  const declarator = t.variableDeclarator(t.identifier(name), arrowFunction)
  const component = t.variableDeclaration('const', [declarator])

  return component
}

export const createReturnExpressionSyntax = (
  stateDefinitions: Record<string, UIDLStateDefinition>,
  jsxTagTree: types.JSXElement,
  windowImports: Record<string, types.ExpressionStatement> = {},
  t = types
) => {
  const returnStatement = t.returnStatement(jsxTagTree)

  const stateHooks = Object.keys(stateDefinitions).map((stateKey) =>
    createStateHookAST(stateKey, stateDefinitions[stateKey])
  )

  return t.blockStatement([...stateHooks, ...Object.values(windowImports), returnStatement] || [])
}

/**
 * Creates an AST line for defining a single state hook
 */
export const createStateHookAST = (
  stateKey: string,
  stateDefinition: UIDLStateDefinition,
  t = types
) => {
  const defaultValueArgument = convertValueToLiteral(
    stateDefinition.defaultValue,
    stateDefinition.type
  )

  return t.variableDeclaration('const', [
    t.variableDeclarator(
      t.arrayPattern([
        t.identifier(stateKey),
        t.identifier(`set${StringUtils.capitalize(stateKey)}`),
      ]),
      t.callExpression(t.identifier('useState'), [defaultValueArgument])
    ),
  ])
}

export const generateDynamicWindowImport = (
  hookName = 'useEffect',
  dependency: string
): types.ExpressionStatement => {
  return types.expressionStatement(
    types.callExpression(types.identifier(hookName), [
      types.arrowFunctionExpression(
        [],
        types.callExpression(types.identifier('import'), [types.stringLiteral(dependency)])
      ),
      types.arrayExpression([]),
    ])
  )
}

export const wrapObjectPropertiesWithExpression = (properties: types.ObjectProperty[]) =>
  types.objectExpression(properties)

'''
'''--- packages/teleport-plugin-common/src/utils/hast-utils.ts ---
import { HastNode } from '@teleporthq/teleport-types'
import { createTextNode } from '../builders/hast-builders'

export const addBooleanAttributeToNode = (node: HastNode, key: string, value: boolean = true) => {
  node.properties[key] = value === true ? '' : false
  /* adding empty string as @starptech/prettyhtml-hast-to-html which we are currently
  using for generating HTML supports boolean way of adding attributes only for HTML
  attributes but not for Vue*/
}

export const addAttributeToNode = (node: HastNode, key: string, value: string) => {
  node.properties[key] = value
}

export const addClassToNode = (node: HastNode, className: string) => {
  node.properties.class = className
}

export const addChildNode = (node: HastNode, child: HastNode) => {
  node.children.push(child)
}

export const addTextNode = (node: HastNode, text: string) => {
  node.children.push(createTextNode(text))
}

'''
'''--- packages/teleport-plugin-common/src/utils/parsed-ast.ts ---
/**
 * A tricky way to pass down custom configuration into
 * the objectToObjectExpression values, to allow for member expressions like
 * Proptypes.String.isRequired to be handled by the function.
 */
export default class ParsedASTNode {
  public ast: unknown

  constructor(ast: unknown) {
    this.ast = ast
  }
}

'''
'''--- packages/teleport-plugin-common/src/utils/style-utils.ts ---
import { StringUtils } from '@teleporthq/teleport-shared'
import { UIDLStaticValue, UIDLStyleDefinitions, UIDLStyleValue } from '@teleporthq/teleport-types'

const getContentOfStyleKey = (styleValue: UIDLStyleValue) => {
  if (styleValue.type === 'static') {
    return styleValue.content
  }
  throw new Error(
    `getContentOfStyleKey received unsupported ${JSON.stringify(
      styleValue,
      null,
      2
    )} UIDLNodeStyleValue value`
  )
}

export const getContentOfStyleObject = (styleObject: UIDLStyleDefinitions) => {
  return Object.keys(styleObject).reduce((acc: Record<string, unknown>, key) => {
    acc[key] = getContentOfStyleKey(styleObject[key])
    return acc
  }, {})
}

export const getTokensContentFromTokensObject = (tokens: Record<string, UIDLStaticValue>) => {
  return Object.keys(tokens || {}).reduce((acc: Record<string, string | number>, key) => {
    acc[StringUtils.generateCSSVariableName(key)] = tokens[key].content as string
    return acc
  }, {})
}

export const getCSSVariablesContentFromTokenStyles = (styleObject: UIDLStyleDefinitions) => {
  return Object.keys(styleObject || {}).reduce((acc: Record<string, string>, key) => {
    const style = styleObject[key]
    if (style.type === 'dynamic' && style.content.referenceType === 'token') {
      acc[key] = `var(${StringUtils.generateCSSVariableName(style.content.id)})`
    }
    return acc
  }, {})
}

'''
'''--- packages/teleport-plugin-common/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-plugin-css-modules/README.md ---
# teleport-plugin-css-modules

A plugin for handling the styles as a separate css-module file for React components.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-plugin-css-modules
```
or
```bash
yarn add @teleporthq/teleport-plugin-css-modules
```

'''
'''--- packages/teleport-plugin-css-modules/__tests__/component-scoped.ts ---
import { createCSSModulesPlugin } from '../src'
import { staticNode, elementNode, component } from '@teleporthq/teleport-uidl-builders'
import { ComponentStructure } from '@teleporthq/teleport-types'
import { createComponentChunk } from './mocks'

describe('Component Scoped Styles', () => {
  const uidl = component('MYComponent', elementNode('container', {}, [], null, {}), {}, {})
  uidl.styleSetDefinitions = {
    'primary-navbar': {
      type: 'reusable-component-style-map',
      content: {
        width: staticNode('100px'),
        height: staticNode('200px'),
      },
    },
    secondaryNavbar: {
      type: 'reusable-component-style-map',
      content: {
        height: staticNode('50px'),
        width: staticNode('50px'),
      },
    },
  }

  it('Generates component-scoped style sheet', async () => {
    const plugin = createCSSModulesPlugin()
    const structure: ComponentStructure = {
      uidl,
      chunks: [createComponentChunk()],
      dependencies: {},
      options: {},
    }
    const { chunks } = await plugin(structure)
    const styleChunk = chunks.find((chunk) => chunk.name === 'css-modules')

    expect(chunks.length).toBe(2)
    expect(styleChunk).toBeDefined()
    expect(styleChunk.content).toContain(`primary-navbar`)
    expect(styleChunk.content).toContain('secondary-navbar')
  })

  it('Generates style sheet and adds them to the node with JSX template', async () => {
    const plugin = createCSSModulesPlugin()
    uidl.node.content.referencedStyles = {
      '12345678': {
        type: 'style-map',
        content: {
          mapType: 'component-referenced',
          content: staticNode('md-8'),
        },
      },
      '910111213': {
        type: 'style-map',
        content: {
          mapType: 'component-referenced',
          content: {
            type: 'dynamic',
            content: {
              referenceType: 'comp',
              id: 'primary-navbar',
            },
          },
        },
      },
      '1415161718': {
        type: 'style-map',
        content: {
          mapType: 'component-referenced',
          content: {
            type: 'dynamic',
            content: {
              referenceType: 'prop',
              id: 'variant',
            },
          },
        },
      },
    }
    const structure: ComponentStructure = {
      uidl,
      chunks: [createComponentChunk()],
      dependencies: {},
      options: {},
    }

    const { chunks } = await plugin(structure)
    const jsxComponent = chunks.find((chunk) => chunk.name === 'jsx-component')
    const jsxExpressions =
      jsxComponent.meta.nodesLookup.container.openingElement.attributes[0].value.expression

    expect(jsxExpressions.quasis.length).toBe(4)
    expect(jsxExpressions.expressions[0]?.property.name).toBe("'md-8'")
    expect(jsxExpressions.expressions[1].property.name).toBe("'primary-navbar'")
    expect(jsxExpressions.expressions[2].property.object.name).toBe('props.')
    expect(jsxExpressions.expressions[2].property.property.name).toBe('variant')
  })
})

'''
'''--- packages/teleport-plugin-css-modules/__tests__/index.ts ---
import * as types from '@babel/types'
import { component, elementNode, dynamicNode, staticNode } from '@teleporthq/teleport-uidl-builders'
import { ComponentStructure, FileType } from '@teleporthq/teleport-types'
import { createCSSModulesPlugin } from '../src/index'
import { createComponentChunk, setupPluginStructure } from './mocks'

describe('plugin-css-modules', () => {
  it('generates no chunk if no styles exist', async () => {
    const plugin = createCSSModulesPlugin()
    const uidlSample = component('CSSModules', elementNode('container'))
    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {},
      chunks: [createComponentChunk()],
      dependencies: {},
    }

    const { chunks } = await plugin(structure)

    expect(chunks.length).toBe(1)
  })

  it('generates a string chunk out of the styles and adds the className', async () => {
    const plugin = createCSSModulesPlugin()
    const structure = setupPluginStructure()
    const { chunks } = await plugin(structure)

    expect(chunks.length).toBe(2)
    expect(chunks[1].type).toBe('string')
    expect(chunks[1].fileType).toBe(FileType.CSS)
    expect(chunks[1].content).toContain('height: 100px;')

    const nodeReference = chunks[0].meta.nodesLookup.container
    expect(nodeReference.openingElement.attributes.length).toBe(1)

    const classNameAttr = nodeReference.openingElement.attributes[0]
    expect(classNameAttr.name.name).toBe('className')
    expect(classNameAttr.value.expression.object.name).toBe('styles')
    expect(classNameAttr.value.expression.property.name).toBe(`'container'`)
  })

  it('generates a string chunk out of the styles and adds the className between brackets', async () => {
    const plugin = createCSSModulesPlugin()
    const structure = setupPluginStructure('list-container')
    const { chunks } = await plugin(structure)

    expect(chunks.length).toBe(2)
    expect(chunks[1].type).toBe('string')
    expect(chunks[1].fileType).toBe(FileType.CSS)
    expect(chunks[1].content).toContain('height: 100px;')

    const nodeReference = chunks[0].meta.nodesLookup['list-container']
    expect(nodeReference.openingElement.attributes.length).toBe(1)

    const classNameAttr = nodeReference.openingElement.attributes[0]
    expect(classNameAttr.name.name).toBe('className')
    expect(classNameAttr.value.expression.object.name).toBe('styles')
    expect(classNameAttr.value.expression.property.name).toBe(`'list-container'`)
  })

  it('generates a string chunk out of the styles and adds the class attribute', async () => {
    const plugin = createCSSModulesPlugin({ classAttributeName: 'class' })
    const structure = setupPluginStructure('list-container')
    const { chunks } = await plugin(structure)

    expect(chunks.length).toBe(2)
    expect(chunks[1].type).toBe('string')
    expect(chunks[1].fileType).toBe(FileType.CSS)
    expect(chunks[1].content).toContain('height: 100px;')

    const nodeReference = chunks[0].meta.nodesLookup['list-container']
    expect(nodeReference.openingElement.attributes.length).toBe(1)

    const classNameAttr = nodeReference.openingElement.attributes[0]
    expect(classNameAttr.name.name).toBe('class')

    expect(classNameAttr.value.expression.object.name).toBe('styles')
    expect(classNameAttr.value.expression.property.name).toBe("'list-container'")
  })

  it('generates a string chunk of type CSS', async () => {
    const plugin = createCSSModulesPlugin({ moduleExtension: true })
    const structure = setupPluginStructure('list-container')
    const { chunks, dependencies } = await plugin(structure)

    expect(chunks.length).toBe(2)
    expect(chunks[1].type).toBe('string')
    expect(chunks[1].fileType).toBe(FileType.CSS)
    expect(chunks[1].content).toContain('height: 100px;')
    expect(structure.uidl.outputOptions.styleFileName).toContain('.module')
    expect(dependencies.styles.path).toContain('.module.css')
  })

  it('inlines dynamic style and does not generate a new chunk if no static styles are present', async () => {
    const plugin = createCSSModulesPlugin()
    const structure = setupPluginStructure('container', {
      height: dynamicNode('prop', 'height'),
    })

    const { chunks } = await plugin(structure)
    expect(chunks.length).toBe(1)

    const nodeReference = chunks[0].meta.nodesLookup.container
    expect(nodeReference.openingElement.attributes.length).toBe(1)

    const styleAttr = nodeReference.openingElement.attributes[0]
    expect(styleAttr.name.name).toBe('style')

    const dynamicStyleObject = styleAttr.value.expression as types.ObjectExpression
    const heightProperty = dynamicStyleObject.properties[0] as types.ObjectProperty
    expect(heightProperty.key.value).toBe('height')
    expect((heightProperty.value as types.MemberExpression).object.name).toBe('props.')
    expect((heightProperty.value as types.MemberExpression).property.name).toBe('height')
  })

  it('inlines dynamic style and generates a new chunk with the static styles', async () => {
    const plugin = createCSSModulesPlugin()
    const structure = setupPluginStructure('container', {
      height: dynamicNode('prop', 'height'),
      width: staticNode('auto'),
    })

    const { chunks } = await plugin(structure)
    expect(chunks.length).toBe(2)

    expect(chunks[1].type).toBe('string')
    expect(chunks[1].fileType).toBe(FileType.CSS)
    expect(chunks[1].content).toContain('width: auto;')

    const nodeReference = chunks[0].meta.nodesLookup.container
    expect(nodeReference.openingElement.attributes.length).toBe(2)

    const classNameAttr = nodeReference.openingElement.attributes[1]
    expect(classNameAttr.name.name).toBe('className')

    expect(classNameAttr.value.expression.object.name).toBe('styles')
    expect(classNameAttr.value.expression.property.name).toBe(`'container'`)

    const styleAttr = nodeReference.openingElement.attributes[0]
    expect(styleAttr.name.name).toBe('style')

    const dynamicStyleObject = styleAttr.value.expression as types.ObjectExpression
    const heightProperty = dynamicStyleObject.properties[0] as types.ObjectProperty
    expect(heightProperty.key.value).toBe('height')
    expect((heightProperty.value as types.MemberExpression).object.name).toBe('props.')
    expect((heightProperty.value as types.MemberExpression).property.name).toBe('height')
  })

  it('will not generate any media styles if the referencedStyles are empty', async () => {
    const plugin = createCSSModulesPlugin()
    const structure = setupPluginStructure()

    // structure.uidl.node.content.referencedStyles
    const { chunks } = await plugin(structure)
    const cssFile = chunks.find((chunk) => chunk.fileType === 'css')

    expect(cssFile.content).not.toContain('@media')
    expect(cssFile.content).not.toContain('hover')
  })

  it('will generate hover styles with the new referencedStyles syntax', async () => {
    const plugin = createCSSModulesPlugin()
    const structure = setupPluginStructure()

    structure.uidl.node.content.referencedStyles = {
      '5ecfb3b6f2be3a6e09ff4ad3': {
        type: 'style-map',
        content: {
          mapType: 'inlined',
          conditions: [{ conditionType: 'element-state', content: 'hover' }],
          styles: {
            height: staticNode('200px'),
          },
        },
      },
      '5ecfb3b6f2be3a6e09ff4ad4': {
        type: 'style-map',
        content: {
          mapType: 'inlined',
          conditions: [{ conditionType: 'screen-size', maxWidth: 991 }],
          styles: {
            height: staticNode('200px'),
          },
        },
      },
    }

    const result = await plugin(structure)
    const cssFile = result.chunks.find((chunks) => chunks.fileType === 'css')

    expect(cssFile).toBeDefined()
    expect(cssFile.content).toContain('.container:hover')
    expect(cssFile.content).toContain('@media(max-width: 991px)')
  })

  it('adds projectStyles when a node refers from the project style sheet', async () => {
    const plugin = createCSSModulesPlugin()
    const structure = setupPluginStructure()

    structure.options.projectStyleSet = {
      styleSetDefinitions: {
        primaryButton: {
          type: 'reusable-project-style-map',
          content: {
            background: {
              type: 'static',
              content: 'blue',
            },
          },
        },
      },
      fileName: 'style',
      path: '..',
    }

    structure.uidl.node.content.referencedStyles = {
      '5ecfb3b6f2be3a6e09ff4ad3': {
        type: 'style-map',
        content: {
          mapType: 'project-referenced',
          referenceId: 'primaryButton',
        },
      },
    }

    const result = await plugin(structure)
    const jsxChunk = result.chunks.find((chunk) => chunk.fileType === 'js')
    const cssFile = result.chunks.find((file) => file.fileType === 'css')

    const nodeReference = jsxChunk.meta.nodesLookup.container
    const styleAttr = nodeReference.openingElement.attributes[0]

    expect(cssFile).toBeDefined()
    expect(jsxChunk).toBeDefined()
    expect(nodeReference.openingElement.attributes.length).toBe(1)
    expect(styleAttr.value.expression.quasis.length).toBe(3)
    expect(styleAttr.value.expression.expressions.length).toBe(2)
  })
})

'''
'''--- packages/teleport-plugin-css-modules/__tests__/mocks.ts ---
import {
  ChunkDefinition,
  ComponentStructure,
  UIDLStyleDefinitions,
  ChunkType,
  FileType,
} from '@teleporthq/teleport-types'
import { component, elementNode, staticNode } from '@teleporthq/teleport-uidl-builders'

export const createComponentChunk = (elementKey: string = 'container') => {
  const componentChunk: ChunkDefinition = {
    name: 'jsx-component',
    meta: {
      nodesLookup: {
        [elementKey]: {
          openingElement: {
            name: {
              name: '',
            },
            attributes: [],
          },
        },
      },
      dynamicRefPrefix: {
        prop: 'props.',
      },
    },
    type: ChunkType.AST,
    fileType: FileType.JS,
    linkAfter: ['import-local'],
    content: {},
  }

  return componentChunk
}

export const setupPluginStructure = (
  elementKey: string = 'container',
  styleDefinition: UIDLStyleDefinitions = null
) => {
  const style = styleDefinition || {
    height: staticNode('100px'),
  }
  const element = elementNode('container', {}, [], null, style)
  element.content.key = elementKey
  const uidlSample = component('CSSModules', element)

  const structure: ComponentStructure = {
    uidl: uidlSample,
    options: {},
    chunks: [createComponentChunk(elementKey)],
    dependencies: {},
  }

  return structure
}

'''
'''--- packages/teleport-plugin-css-modules/__tests__/style-sheet.ts ---
import { UIDLStyleSetDefinition, UIDLStyleSetTokenReference } from '@teleporthq/teleport-types'
import { UIDLDesignTokens } from '@teleporthq/teleport-types/src'
import { dynamicNode, staticNode } from '@teleporthq/teleport-uidl-builders'
import { createStyleSheetPlugin } from '../src/style-sheet'
import { generateStylesFromStyleSetDefinitions } from '../src/utils'
import { setupPluginStructure } from './mocks'

describe('plugin-css-modules-style-sheet', () => {
  const styleSetDefinitions: Record<string, UIDLStyleSetDefinition> = {
    'primary-button': {
      type: 'reusable-project-style-map',
      content: {
        background: staticNode('blue'),
        color: staticNode('red'),
      },
    },
    secondaryButton: {
      type: 'reusable-project-style-map',
      content: {
        background: staticNode('red'),
        color: staticNode('blue'),
      },
    },
    conditionalButton: {
      type: 'reusable-project-style-map',
      conditions: [
        {
          type: 'screen-size',
          meta: { maxWidth: 991 },
          content: {
            background: staticNode('purple'),
            color: dynamicNode('token', 'red-500') as UIDLStyleSetTokenReference,
          },
        },
        {
          type: 'element-state',
          meta: { state: 'hover' },
          content: {
            background: dynamicNode('token', 'blue-500') as UIDLStyleSetTokenReference,
          },
        },
      ],
      content: {
        background: staticNode('red'),
        color: staticNode('blue'),
      },
    },
  }
  it('should generate css modules when the styleSetDefinitions are presnet', async () => {
    const plugin = createStyleSheetPlugin()
    const structure = setupPluginStructure()
    const tokens: UIDLDesignTokens = {
      'blue-500': {
        type: 'static',
        content: '#9999ff',
      },
      'blue-600': {
        type: 'static',
        content: '#6b7db3',
      },
      'red-500': {
        type: 'static',
        content: '#ff9999',
      },
    }
    structure.uidl = {
      ...structure.uidl,
      styleSetDefinitions,
      designLanguage: {
        tokens,
      },
    }

    const { chunks } = await plugin(structure)
    const cssFile = chunks.find((chunk) => chunk.fileType === 'css')
    const { content } = cssFile

    expect(cssFile).toBeDefined()
    expect(content).toContain(`:root {
  --red-500: #ff9999;
  --blue-500: #9999ff;
  --blue-600: #6b7db3;
}
`)
    expect(content).toContain(`.conditional-button:hover {
  background: var(--blue-500);
}
`)
    expect(content).toContain(`color: var(--red-500)`)
    expect(content).toContain('.primary-button')
    expect(content).toContain('.secondary-button')
    expect(content).toContain('.conditional-button:hover')
    expect(content).toContain('@media(max-width: 991px)')
  })

  it('should not generate file when the styleSetDefinition is empty', async () => {
    const plugin = createStyleSheetPlugin()
    const structure = setupPluginStructure()

    const result = await plugin(structure)

    expect(result).toBe(undefined)
  })

  it('Generates styles from UIDLStyleSetDefinitions', () => {
    const cssMap: string[] = []
    const mediaStylesMap: Record<string, Record<string, unknown>> = {}
    generateStylesFromStyleSetDefinitions({ styleSetDefinitions, cssMap, mediaStylesMap })

    expect(cssMap.length).toBe(4)
    expect(Object.keys(mediaStylesMap).length).toBe(1)
  })
})

'''
'''--- packages/teleport-plugin-css-modules/package.json ---
{
  "name": "@teleporthq/teleport-plugin-css-modules",
  "version": "0.29.0",
  "description": "A plugin for handling the styles as a separate css-module file for JSX based components",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@babel/types": "^7.5.5",
    "@teleporthq/teleport-plugin-common": "^0.29.0",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-plugin-css-modules/src/index.ts ---
/*
  teleport-plugin-css-modules

  Plugin is responsible for generating styles from
  - Styles defined on individual nodes.
  - Styles defined in the project's global stylesheet.
  - Styles present in the component style sheeet.

  All static values and Dynamic values such as design-tokens are resolved
  to css-variables.

  Limitations

  Any dynamic values specified in Media Queries, Component Stylesheet
  ProjectStyle sheet are lost. Since, css-modules can have dynamic values only in inline.
*/

import { StringUtils, UIDLUtils } from '@teleporthq/teleport-shared'
import { StyleBuilders, ASTUtils } from '@teleporthq/teleport-plugin-common'
import * as types from '@babel/types'
import {
  ComponentPluginFactory,
  ComponentPlugin,
  FileType,
  ChunkType,
  UIDLElementNodeReferenceStyles,
  UIDLStyleMediaQueryScreenSizeCondition,
  PluginCssModules,
  HastNode,
} from '@teleporthq/teleport-types'
import { createStyleSheetPlugin } from './style-sheet'
import { generateStyledFromStyleContent } from './utils'

interface CSSModulesConfig {
  componentChunkName?: string
  styleObjectImportName?: string
  styleChunkName?: string
  moduleExtension?: boolean
  classAttributeName?: string
}

const defaultConfigProps = {
  componentChunkName: 'jsx-component',
  styleChunkName: 'css-modules',
  styleObjectImportName: 'styles',
  moduleExtension: false,
  classAttributeName: 'className',
  globalStyleSheetPrefix: 'projectStyles',
}

export const createCSSModulesPlugin: ComponentPluginFactory<CSSModulesConfig> = (config = {}) => {
  const {
    componentChunkName,
    styleObjectImportName,
    styleChunkName,
    moduleExtension,
    classAttributeName,
    globalStyleSheetPrefix,
  } = {
    ...defaultConfigProps,
    ...config,
  }

  const cssModulesPlugin: ComponentPlugin = async (structure) => {
    const { uidl, chunks, dependencies, options } = structure
    const { node, styleSetDefinitions: componentStyleSheet = {}, propDefinitions = {} } = uidl
    const { projectStyleSet, designLanguage: { tokens = {} } = {}, isRootComponent } = options || {}
    const {
      styleSetDefinitions: globalStyleSheet = {},
      fileName: projectStyleSheetName,
      path: projectStyleSheetPath,
      importFile = false,
    } = projectStyleSet || {}

    if (isRootComponent) {
      if (Object.keys(tokens).length > 0 || Object.keys(globalStyleSheet).length > 0) {
        const fileName = moduleExtension ? `${projectStyleSheetName}.module` : projectStyleSheetName
        dependencies[globalStyleSheetPrefix] = {
          type: 'local',
          path: `${projectStyleSheetPath}${fileName}.${FileType.CSS}`,
          meta: {
            importJustPath: true,
          },
        }
      }

      return structure
    }

    const componentChunk = chunks.filter((chunk) => chunk.name === componentChunkName)[0]
    if (!componentChunk) {
      throw new PluginCssModules(
        `JSX based component chunk with name ${componentChunkName} was required and not found.`
      )
    }

    const cssClasses: string[] = []
    let isProjectStyleReferred: boolean = false
    const mediaStylesMap: Record<
      string,
      Array<{ [x: string]: Record<string, string | number> }>
    > = {}
    const astNodesLookup: Record<string, HastNode | types.JSXElement> =
      (componentChunk.meta.nodesLookup as Record<string, HastNode | types.JSXElement>) || {}
    const propsPrefix = componentChunk.meta.dynamicRefPrefix.prop as string

    UIDLUtils.traverseElements(node, (element) => {
      const { style, key, referencedStyles, dependency, attrs = {} } = element
      const jsxTag = astNodesLookup[key] as types.JSXElement
      const classNamesToAppend: Set<types.MemberExpression | types.Identifier> = new Set()

      if (dependency?.type === 'local') {
        StyleBuilders.setPropValueForCompStyle({
          attrs,
          key,
          jsxNodesLookup: astNodesLookup,
          getClassName: (styleName: string) => StringUtils.camelCaseToDashCase(styleName),
        })
      }

      if (!jsxTag) {
        return
      }

      if (!style && !referencedStyles) {
        return
      }

      const className = StringUtils.camelCaseToDashCase(key)
      const classReferenceIdentifier = types.memberExpression(
        types.identifier(styleObjectImportName),
        types.identifier(`'${className}'`),
        true
      )

      /* Generating styles from UIDLElementNode to component style sheet */
      if (Object.keys(style || {}).length > 0) {
        const { staticStyles, dynamicStyles, tokenStyles } =
          UIDLUtils.splitDynamicAndStaticStyles(style)

        if (Object.keys(staticStyles).length > 0 || Object.keys(tokenStyles).length > 0) {
          cssClasses.push(
            StyleBuilders.createCSSClass(className, generateStyledFromStyleContent(style))
          )
          classNamesToAppend.add(classReferenceIdentifier)
        }

        if (Object.keys(dynamicStyles).length) {
          const inlineStyles = UIDLUtils.transformDynamicStyles(dynamicStyles, (styleValue) =>
            StyleBuilders.createDynamicStyleExpression(styleValue, propsPrefix)
          )

          /* If dynamic styles are on nested-styles they are unfortunately lost, 
            since inline style does not support that */
          if (Object.keys(inlineStyles).length > 0) {
            ASTUtils.addAttributeToJSXTag(jsxTag, 'style', inlineStyles)
          }
        }
      }

      /* Any media-styles, component-scoped styles, global style sheet styles are handled here */
      if (Object.keys(referencedStyles || {}).length > 0) {
        Object.values(referencedStyles).forEach((styleRef: UIDLElementNodeReferenceStyles) => {
          switch (styleRef.content.mapType) {
            case 'inlined': {
              /* Dynamic values for media-queries are not supported */
              const collectedStyles = generateStyledFromStyleContent(styleRef.content.styles)

              const condition = styleRef.content.conditions[0]
              const { conditionType } = condition

              if (conditionType === 'screen-size') {
                const { maxWidth } = condition as UIDLStyleMediaQueryScreenSizeCondition
                if (!mediaStylesMap[String(maxWidth)]) {
                  mediaStylesMap[String(maxWidth)] = []
                }
                mediaStylesMap[String(maxWidth)].push({ [className]: collectedStyles })
              }

              if (condition.conditionType === 'element-state') {
                cssClasses.push(
                  StyleBuilders.createCSSClassWithSelector(
                    className,
                    `&:${condition.content}`,
                    collectedStyles
                  )
                )
              }

              classNamesToAppend.add(classReferenceIdentifier)
              return
            }

            case 'component-referenced': {
              const classContent = styleRef.content.content
              if (classContent.type === 'static') {
                classNamesToAppend.add(
                  types.memberExpression(
                    types.identifier(styleObjectImportName),
                    types.identifier(`'${getClassName(String(classContent.content))}'`),
                    true
                  )
                )
                return
              }

              if (
                classContent.type === 'dynamic' &&
                classContent.content.referenceType === 'prop'
              ) {
                classNamesToAppend.add(
                  types.memberExpression(
                    types.identifier(styleObjectImportName),
                    types.memberExpression(
                      types.identifier(propsPrefix),
                      types.identifier(classContent.content.id)
                    ),
                    true
                  )
                )

                const defaultPropValue = propDefinitions[classContent.content.id]?.defaultValue
                if (!defaultPropValue) {
                  return
                }
                /* 
                  Changing the default value of the prop. 
                   When forceScoping is enabled the classnames change. So, we need to change the default prop too. */
                propDefinitions[classContent.content.id].defaultValue = getClassName(
                  String(defaultPropValue)
                )

                return
              }

              if (
                classContent.type === 'dynamic' &&
                classContent.content.referenceType === 'comp'
              ) {
                classNamesToAppend.add(
                  types.memberExpression(
                    types.identifier(styleObjectImportName),
                    types.identifier(`'${getClassName(classContent.content.id)}'`),
                    true
                  )
                )
              }
              return
            }

            case 'project-referenced': {
              const { content } = styleRef
              isProjectStyleReferred = true
              const referedStyle = globalStyleSheet[content.referenceId]
              if (!referedStyle) {
                throw new PluginCssModules(
                  `Style used from global stylesheet is missing - ${content.referenceId}`
                )
              }
              classNamesToAppend.add(
                types.memberExpression(
                  types.identifier(globalStyleSheetPrefix),
                  types.identifier(`'${getClassName(content.referenceId)}'`),
                  true
                )
              )
              return
            }

            default: {
              throw new PluginCssModules(`Un-supported style reference ${styleRef.content}`)
            }
          }
        })
      }

      ASTUtils.addMultipleDynamicAttributesToJSXTag(
        jsxTag,
        classAttributeName,
        Array.from(classNamesToAppend)
      )
    })

    /* Generating component scoped styles */
    if (Object.keys(componentStyleSheet).length > 0) {
      StyleBuilders.generateStylesFromStyleSetDefinitions(
        componentStyleSheet,
        cssClasses,
        mediaStylesMap,
        (styleId: string) => StringUtils.camelCaseToDashCase(styleId)
      )
    }

    if (Object.keys(mediaStylesMap).length > 0) {
      cssClasses.push(...StyleBuilders.generateMediaStyle(mediaStylesMap))
    }

    /**
     * If no classes were added, we don't need to import anything or to alter any code
     */
    if (!cssClasses.length && !isProjectStyleReferred) {
      return structure
    }

    /**
     * Setup an import statement for the styles
     * The name of the file is either in the meta of the component generator
     * or we fallback to the name of the component
     */
    let cssFileName = UIDLUtils.getStyleFileName(uidl)

    /**
     * In case the moduleExtension flag is passed, the file name should be in the form [fileName].module.css
     */
    if (moduleExtension) {
      cssFileName = `${cssFileName}.module`
      uidl.outputOptions = uidl.outputOptions || {}
      uidl.outputOptions.styleFileName = cssFileName
    }

    /* Order of imports play a important role on initial load sequence
    So, project styles should always be loaded before component styles */
    if (isProjectStyleReferred && importFile) {
      const fileName = moduleExtension ? `${projectStyleSheetName}.module` : projectStyleSheetName
      dependencies[globalStyleSheetPrefix] = {
        type: 'local',
        path: `${projectStyleSheetPath}${fileName}.${FileType.CSS}`,
      }
    }

    if (cssClasses.length > 0) {
      dependencies[styleObjectImportName] = {
        type: 'local',
        path: `./${cssFileName}.${FileType.CSS}`,
      }
    }

    structure.chunks.push({
      name: styleChunkName,
      type: ChunkType.STRING,
      fileType: FileType.CSS,
      content: cssClasses.join('\n'),
      linkAfter: [],
    })

    return structure
  }

  return cssModulesPlugin
}

export { createStyleSheetPlugin }

export default createCSSModulesPlugin()

const getClassName = (str: string) =>
  StringUtils.removeIllegalCharacters(StringUtils.camelCaseToDashCase(str))

'''
'''--- packages/teleport-plugin-css-modules/src/style-sheet.ts ---
import { StyleUtils, StyleBuilders } from '@teleporthq/teleport-plugin-common'
import {
  ComponentPlugin,
  ComponentPluginFactory,
  ChunkType,
  FileType,
} from '@teleporthq/teleport-types'
import { StringUtils } from '@teleporthq/teleport-shared'
interface StyleSheetPlugin {
  fileName?: string
  moduleExtension?: boolean
}

const defaultConfig = {
  fileName: 'style',
  moduleExtension: false,
}

export const createStyleSheetPlugin: ComponentPluginFactory<StyleSheetPlugin> = (config) => {
  const { fileName, moduleExtension } = {
    ...defaultConfig,
    ...config,
  }

  const styleSheetPlugin: ComponentPlugin = async (structure) => {
    const { uidl, chunks } = structure
    const { styleSetDefinitions = {}, designLanguage: { tokens = {} } = {} } = uidl

    if (
      (!styleSetDefinitions && !tokens) ||
      (Object.keys(styleSetDefinitions).length === 0 && Object.keys(tokens).length === 0)
    ) {
      return
    }

    const cssMap: string[] = []
    const mediaStylesMap: Record<
      string,
      Array<{ [x: string]: Record<string, string | number> }>
    > = {}

    if (Object.keys(tokens).length > 0) {
      cssMap.push(
        StyleBuilders.createCSSClassWithSelector(
          '@global',
          ':root',
          StyleUtils.getTokensContentFromTokensObject(tokens)
        )
      )
    }

    if (Object.keys(styleSetDefinitions).length > 0) {
      StyleBuilders.generateStylesFromStyleSetDefinitions(
        styleSetDefinitions,
        cssMap,
        mediaStylesMap,
        (styleId: string) =>
          StringUtils.removeIllegalCharacters(StringUtils.camelCaseToDashCase(styleId))
      )
    }

    cssMap.push(...StyleBuilders.generateMediaStyle(mediaStylesMap))

    if (cssMap.length === 0) {
      return structure
    }

    uidl.outputOptions = uidl.outputOptions || {}
    uidl.outputOptions.styleFileName = moduleExtension ? `${fileName}.module` : fileName

    chunks.push({
      name: fileName,
      type: ChunkType.STRING,
      fileType: FileType.CSS,
      content: cssMap.join('\n'),
      linkAfter: [],
    })

    return structure
  }
  return styleSheetPlugin
}

'''
'''--- packages/teleport-plugin-css-modules/src/utils.ts ---
import { StyleBuilders, StyleUtils } from '@teleporthq/teleport-plugin-common'
import { UIDLUtils } from '@teleporthq/teleport-shared'
import {
  UIDLStyleSetDefinition,
  UIDLStyleSheetContent,
  UIDLStyleValue,
} from '@teleporthq/teleport-types'

export const generateStyledFromStyleContent = (
  styles: Record<string, UIDLStyleSheetContent> | Record<string, UIDLStyleValue> = {}
): Record<string, string | number> => {
  const { staticStyles, tokenStyles } = UIDLUtils.splitDynamicAndStaticStyles(styles)

  const collectedStyles = {
    ...StyleUtils.getContentOfStyleObject(staticStyles),
    ...StyleUtils.getCSSVariablesContentFromTokenStyles(tokenStyles),
  } as Record<string, string | number>

  return collectedStyles
}

export const generateStylesFromStyleSetDefinitions = (params: {
  styleSetDefinitions: Record<string, UIDLStyleSetDefinition>
  cssMap: string[]
  mediaStylesMap: Record<string, Record<string, unknown>>
}) => {
  const { styleSetDefinitions, cssMap = [], mediaStylesMap } = params
  Object.keys(styleSetDefinitions).forEach((styleId) => {
    const style = styleSetDefinitions[styleId]
    const { content, conditions = [] } = style
    const className = styleId
    cssMap.push(StyleBuilders.createCSSClass(className, generateStyledFromStyleContent(content)))

    if (conditions.length === 0) {
      return
    }
    conditions.forEach((styleRef) => {
      const collectedMediaStyles = generateStyledFromStyleContent(styleRef.content)

      if (styleRef.type === 'element-state') {
        cssMap.push(
          StyleBuilders.createCSSClassWithSelector(
            className,
            `&:${styleRef.meta.state}`,
            collectedMediaStyles
          )
        )
      }

      if (styleRef.type === 'screen-size') {
        mediaStylesMap[styleRef.meta.maxWidth] = {
          ...mediaStylesMap[styleRef.meta.maxWidth],
          [className]: collectedMediaStyles,
        }
      }
    })
  })
}

'''
'''--- packages/teleport-plugin-css-modules/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-plugin-css/README.md ---
# teleport-plugin-css

A plugin for creating the styles into external css files.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-plugin-css
```
or
```bash
yarn add @teleporthq/teleport-plugin-css
```

'''
'''--- packages/teleport-plugin-css/__tests__/component-scoped.ts ---
/* tslint:disable no-string-literal */
import { createCSSPlugin } from '../src'
import { staticNode, elementNode, component } from '@teleporthq/teleport-uidl-builders'
import { ComponentStructure } from '@teleporthq/teleport-types'
import { setUpHASTChunk, setUpJSXComponentChunk } from './mocks'

describe('Component Scoped Styles', () => {
  const uidl = component('MYComponent', elementNode('container', {}, [], null, {}), {}, {})
  uidl.styleSetDefinitions = {
    'primary-navbar': {
      type: 'reusable-component-style-map',
      content: {
        width: staticNode('100px'),
        height: staticNode('200px'),
      },
    },
    secondaryNavbar: {
      type: 'reusable-component-style-map',
      content: {
        height: staticNode('50px'),
        width: staticNode('50px'),
      },
    },
  }

  it('Generates component-scoped style sheet', async () => {
    const plugin = createCSSPlugin({ templateChunkName: 'jsx-component' })
    const structure: ComponentStructure = {
      uidl,
      chunks: [setUpJSXComponentChunk()],
      dependencies: {},
      options: {},
    }
    const { chunks } = await plugin(structure)
    const styleChunk = chunks.find((chunk) => chunk.name === 'style-chunk')

    expect(chunks.length).toBe(2)
    expect(styleChunk).toBeDefined()
    expect(styleChunk.content).toContain(`primary-navbar`)
    expect(styleChunk.content).toContain('secondary-navbar')
  })

  it('Generates style sheet and adds them to the node with JSX template', async () => {
    const plugin = createCSSPlugin({ templateChunkName: 'jsx-component', templateStyle: 'jsx' })
    uidl.node.content.referencedStyles = {
      '12345678': {
        type: 'style-map',
        content: {
          mapType: 'component-referenced',
          content: staticNode('md-8'),
        },
      },
      '910111213': {
        type: 'style-map',
        content: {
          mapType: 'component-referenced',
          content: {
            type: 'dynamic',
            content: {
              referenceType: 'comp',
              id: 'primary-navbar',
            },
          },
        },
      },
      '1415161718': {
        type: 'style-map',
        content: {
          mapType: 'component-referenced',
          content: {
            type: 'dynamic',
            content: {
              referenceType: 'prop',
              id: 'variant',
            },
          },
        },
      },
    }
    const structure: ComponentStructure = {
      uidl,
      chunks: [setUpJSXComponentChunk()],
      dependencies: {},
      options: {},
    }

    const { chunks } = await plugin(structure)
    const jsxComponent = chunks.find((chunk) => chunk.name === 'jsx-component')

    expect(
      jsxComponent.meta.nodesLookup.container.openingElement.attributes[0].value.expression
        .quasis[0].value.raw
    ).toBe('md-8 primary-navbar ')
    expect(
      jsxComponent.meta.nodesLookup.container.openingElement.attributes[0].value.expression
        .expressions[0].property.name
    ).toBe('variant')
  })

  it('Generates style sheet and adds them to the node with HTML template', async () => {
    const plugin = createCSSPlugin({
      templateChunkName: 'template',
      templateStyle: 'html',
      dynamicVariantPrefix: 'v-bind:class',
    })
    uidl.node.content.referencedStyles = {
      '12345678': {
        type: 'style-map',
        content: {
          mapType: 'component-referenced',
          content: staticNode('md-8'),
        },
      },
      '910111213': {
        type: 'style-map',
        content: {
          mapType: 'component-referenced',
          content: {
            type: 'dynamic',
            content: {
              referenceType: 'comp',
              id: 'primary-navbar',
            },
          },
        },
      },
      '1415161718': {
        type: 'style-map',
        content: {
          mapType: 'component-referenced',
          content: {
            type: 'dynamic',
            content: {
              referenceType: 'prop',
              id: 'variant',
            },
          },
        },
      },
    }
    const structure: ComponentStructure = {
      uidl,
      chunks: [setUpHASTChunk()],
      dependencies: {},
      options: {},
    }

    const { chunks } = await plugin(structure)
    const hastComponent = chunks.find((chunk) => chunk.name === 'template')

    expect(hastComponent.meta.nodesLookup.container.properties['class']).toBe('md-8 primary-navbar')
    expect(hastComponent.meta.nodesLookup.container.properties['v-bind:class']).toBe('variant')
  })
})

'''
'''--- packages/teleport-plugin-css/__tests__/index.ts ---
import { component, elementNode, staticNode } from '@teleporthq/teleport-uidl-builders'
import {
  ComponentStructure,
  ChunkDefinition,
  ChunkType,
  FileType,
} from '@teleporthq/teleport-types'
import { createCSSPlugin } from '../src'
import { setUpHASTChunk, setUpJSXComponentChunk } from './mocks'

describe('plugin-css', () => {
  describe('on html template based components', () => {
    const plugin = createCSSPlugin({ templateChunkName: 'template' })
    const componentChunk: ChunkDefinition = setUpHASTChunk()

    it('generates no chunk if no styles exist', async () => {
      const uidlSample = component('CSSPlugin', elementNode('container'))
      uidlSample.node.content.key = 'element-key'
      componentChunk.meta.nodesLookup = {
        ...componentChunk.meta.nodesLookup,
        'element-key': {
          type: 'element',
          tagName: 'div',
          properties: {},
        },
      }

      const structure: ComponentStructure = {
        uidl: uidlSample,
        options: {},
        chunks: [componentChunk],
        dependencies: {},
      }

      const { chunks } = await plugin(structure)
      expect(chunks.length).toBe(1)
    })

    it('generates a string chunk out of the styles and adds the className', async () => {
      const style = {
        height: staticNode('100px'),
      }
      const element = elementNode('container', {}, [], null, style)
      element.content.key = 'container'
      const uidlSample = component('CSSPlugin', element)

      const structure: ComponentStructure = {
        uidl: uidlSample,
        options: {},
        chunks: [componentChunk],
        dependencies: {},
      }

      const { chunks } = await plugin(structure)

      expect(chunks.length).toBe(2)
      expect(chunks[1].type).toBe('string')
      expect(chunks[1].content).toContain('height: 100px;')

      const nodeReference = componentChunk.meta.nodesLookup.container
      expect(nodeReference.properties.class).toBe('container')
    })
  })

  describe('on jsx-based components', () => {
    const plugin = createCSSPlugin({
      templateStyle: 'jsx',
      declareDependency: 'decorator',
      templateChunkName: 'jsx-component',
      componentDecoratorChunkName: 'component-decorator',
    })
    const componentChunk: ChunkDefinition = setUpJSXComponentChunk()

    const decoratorChunk: ChunkDefinition = {
      name: 'component-decorator',
      type: ChunkType.AST,
      fileType: FileType.TSX,
      linkAfter: ['import-local'],
      content: {
        expression: {
          arguments: [
            {
              properties: [],
            },
          ],
        },
      },
    }

    it('generates a string chunk out of the styles, adds the className and the decorator reference', async () => {
      const style = {
        height: staticNode('100px'),
      }
      const element = elementNode('container', {}, [], null, style)
      element.content.key = 'container'
      const uidlSample = component('test', element)

      const structure: ComponentStructure = {
        uidl: uidlSample,
        options: {},
        chunks: [componentChunk, decoratorChunk],
        dependencies: {},
      }

      const { chunks } = await plugin(structure)

      expect(chunks.length).toBe(3)
      const decoratorAST = chunks[1].content

      // AST be crazy...
      const styleReferenceInDecoratorAST =
        decoratorAST.expression.arguments[0].properties[0].value.elements[0].value

      expect(styleReferenceInDecoratorAST).toBe('test.css')
      expect(chunks[2].type).toBe('string')
      expect(chunks[2].content).toContain('height: 100px;')
    })
  })
})

'''
'''--- packages/teleport-plugin-css/__tests__/mocks.ts ---
import { component, elementNode, staticNode } from '@teleporthq/teleport-uidl-builders'
import {
  ChunkDefinition,
  ComponentStructure,
  ChunkType,
  FileType,
  UIDLStyleSetDefinition,
} from '@teleporthq/teleport-types'

export const styleSetDefinitions: Record<string, UIDLStyleSetDefinition> = {
  primaryButton: {
    type: 'reusable-project-style-map',
    content: {
      background: staticNode('blue'),
      color: staticNode('red'),
    },
  },
  secondaryButton: {
    type: 'reusable-project-style-map',
    content: {
      background: staticNode('red'),
      color: staticNode('blue'),
    },
  },
}

export const setUpJSXComponentChunk = (): ChunkDefinition => ({
  name: 'jsx-component',
  meta: {
    nodesLookup: {
      container: {
        openingElement: {
          name: {
            name: '',
          },
          attributes: [],
        },
      },
    },
    dynamicRefPrefix: {
      prop: 'props.',
    },
  },
  type: ChunkType.AST,
  fileType: FileType.TSX,
  linkAfter: ['import-local'],
  content: {},
})

export const setUpHASTChunk = (): ChunkDefinition => ({
  name: 'template',
  meta: {
    nodesLookup: {
      container: {
        type: 'element',
        tagName: 'div',
        properties: {},
      },
    },
  },
  fileType: FileType.HTML,
  type: ChunkType.HAST,
  linkAfter: [],
  content: {},
})

export const setUpStructureWithHASTChunk = () => {
  const style = {
    display: staticNode('display'),
  }
  const uidlSample = component('CSSPlugin', elementNode('container', null, [], null, style))

  const structure: ComponentStructure = {
    uidl: uidlSample,
    options: {},
    chunks: [setUpHASTChunk()],
    dependencies: {},
  }
  return structure
}

'''
'''--- packages/teleport-plugin-css/__tests__/referenced-styles.ts ---
import { staticNode, component, elementNode } from '@teleporthq/teleport-uidl-builders'
import {
  ChunkDefinition,
  FileType,
  ComponentStructure,
  UIDLReferencedStyles,
} from '@teleporthq/teleport-types'
import { setUpHASTChunk, setUpJSXComponentChunk, styleSetDefinitions } from './mocks'
import { createCSSPlugin } from '../src'

describe('Referenced Styles for inlined and project-referenced with Templates (HAST) Nodes', () => {
  const plugin = createCSSPlugin({ templateChunkName: 'template' })
  const componentChunk: ChunkDefinition = setUpHASTChunk()

  it('Generates media query from referenced styles even styles are not defined on node', async () => {
    const referencedStyles = {
      '5ed659b1732f9b804f7b6381': {
        type: 'style-map' as const,
        content: {
          mapType: 'inlined' as const,
          conditions: [{ conditionType: 'screen-size', maxWidth: 991 }],
          styles: {
            display: staticNode('none'),
          },
        },
      },
    }

    const element = elementNode('container', {}, [], null, null, null, referencedStyles)
    element.content.key = 'container'
    const uidlSample = component('test', element)

    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {},
      chunks: [componentChunk],
      dependencies: {},
    }

    const result = await plugin(structure)
    const { chunks } = result
    const htmlFile = chunks.find((chunk) => chunk.fileType === FileType.HTML)
    const cssFile = chunks.find((chunk) => chunk.fileType === FileType.CSS)
    const nodeReference = componentChunk.meta.nodesLookup.container

    expect(htmlFile).toBeDefined()
    expect(cssFile).toBeDefined()
    expect(cssFile.content).toContain('@media(max-width: 991px)')
    expect(nodeReference.properties.class).toBe('container')
  })

  it('Referes a style from proejct style sheet and add the inlined style too', async () => {
    const referencedStyles: UIDLReferencedStyles = {
      '5ed659b1732f9b804f7b6381': {
        type: 'style-map',
        content: {
          mapType: 'inlined',
          conditions: [{ conditionType: 'screen-size', maxWidth: 991 }],
          styles: {
            display: staticNode('none'),
          },
        },
      },
      '5ed669aae53af30300760743': {
        type: 'style-map',
        content: {
          mapType: 'project-referenced',
          referenceId: 'primaryButton',
        },
      },
    }
    const style = {
      width: staticNode('100px'),
    }

    const element = elementNode('container', {}, [], null, style, null, referencedStyles)
    element.content.key = 'container'
    const uidlSample = component('test', element)

    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {
        projectStyleSet: {
          styleSetDefinitions,
          fileName: 'style',
          path: '..',
        },
      },
      chunks: [componentChunk],
      dependencies: {},
    }

    const result = await plugin(structure)
    const { chunks } = result
    const htmlFile = chunks.find((chunk) => chunk.fileType === FileType.HTML)
    const cssFile = chunks.find((chunk) => chunk.fileType === FileType.CSS)
    const nodeReference = componentChunk.meta.nodesLookup.container

    expect(htmlFile).toBeDefined()
    expect(cssFile).toBeDefined()
    expect(cssFile.content).toContain('width')
    expect(cssFile.content).toContain('@media(max-width: 991px)')
    expect(nodeReference.properties.class).toBe('container primaryButton')
  })
})

// JSX based component syntax

describe('Referenced Styles for inlined and project-referenced with JSX bases Nodes', () => {
  const plugin = createCSSPlugin({
    templateStyle: 'jsx',
    declareDependency: 'decorator',
    templateChunkName: 'jsx-component',
    componentDecoratorChunkName: 'component-decorator',
  })
  const componentChunk: ChunkDefinition = setUpJSXComponentChunk()

  it('Generates media query from referenced styles even styles are not defined on node', async () => {
    const referencedStyles: UIDLReferencedStyles = {
      '5ed659b1732f9b804f7b6381': {
        type: 'style-map' as const,
        content: {
          mapType: 'inlined',
          conditions: [{ conditionType: 'screen-size', maxWidth: 991 }],
          styles: {
            display: staticNode('none'),
          },
        },
      },
    }

    const element = elementNode('container', {}, [], null, null, null, referencedStyles)
    element.content.key = 'container'
    const uidlSample = component('test', element)

    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {},
      chunks: [componentChunk],
      dependencies: {},
    }

    const result = await plugin(structure)
    const { chunks } = result

    const cssFile = chunks.find((chunk) => chunk.fileType === FileType.CSS)

    expect(cssFile).toBeDefined()
    expect(cssFile.content).toContain('@media(max-width: 991px)')
  })

  it('Referes a style from proejct style sheet and add the inlined style too', async () => {
    const referencedStyles: UIDLReferencedStyles = {
      '5ed659b1732f9b804f7b6381': {
        type: 'style-map' as const,
        content: {
          mapType: 'inlined',
          conditions: [{ conditionType: 'screen-size', maxWidth: 991 }],
          styles: {
            display: staticNode('none'),
          },
        },
      },
      '5ed669aae53af30300760743': {
        type: 'style-map' as const,
        content: {
          mapType: 'project-referenced',
          referenceId: 'primaryButton',
        },
      },
    }
    const style = {
      width: staticNode('100px'),
    }

    const element = elementNode('container', {}, [], null, style, null, referencedStyles)
    element.content.key = 'container'
    const uidlSample = component('test', element)

    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {
        projectStyleSet: {
          styleSetDefinitions,
          fileName: 'style',
          path: '..',
        },
      },
      chunks: [componentChunk],
      dependencies: {},
    }

    const result = await plugin(structure)
    const { chunks } = result
    const cssFile = chunks.find((chunk) => chunk.fileType === FileType.CSS)

    expect(cssFile).toBeDefined()
    expect(cssFile.content).toContain('width')
    expect(cssFile.content).toContain('@media(max-width: 991px)')
  })
})

'''
'''--- packages/teleport-plugin-css/__tests__/style-sheet.ts ---
import {
  UIDLDesignTokens,
  UIDLStyleSetDefinition,
  UIDLStyleSetTokenReference,
} from '@teleporthq/teleport-types'
import { staticNode, dynamicNode } from '@teleporthq/teleport-uidl-builders'
import { createStyleSheetPlugin } from '../src/style-sheet'
import { setUpStructureWithHASTChunk } from './mocks'

describe('plugin-css-style-sheet', () => {
  it('should generate css when the styleSetDefinitions are presnet', async () => {
    const plugin = createStyleSheetPlugin()
    const structure = setUpStructureWithHASTChunk()
    const tokens: UIDLDesignTokens = {
      'blue-500': {
        type: 'static',
        content: '#9999ff',
      },
      'blue-600': {
        type: 'static',
        content: '#6b7db3',
      },
      'red-500': {
        type: 'static',
        content: '#ff9999',
      },
    }
    const styleSetDefinitions: Record<string, UIDLStyleSetDefinition> = {
      primaryButton: {
        type: 'reusable-project-style-map',
        content: {
          background: staticNode('blue'),
          color: staticNode('red'),
        },
      },
      secondaryButton: {
        type: 'reusable-project-style-map',
        content: {
          background: staticNode('red'),
          color: staticNode('blue'),
        },
      },
      conditionalButton: {
        type: 'reusable-project-style-map',
        conditions: [
          {
            type: 'screen-size',
            meta: { maxWidth: 991 },
            content: {
              background: staticNode('purple'),
              color: dynamicNode('token', 'red-500') as UIDLStyleSetTokenReference,
            },
          },
          {
            type: 'element-state',
            meta: { state: 'hover' },
            content: {
              background: dynamicNode('token', 'blue-500') as UIDLStyleSetTokenReference,
            },
          },
        ],
        content: {
          background: staticNode('red'),
          color: staticNode('blue'),
        },
      },
    }
    structure.uidl = {
      ...structure.uidl,
      styleSetDefinitions,
      designLanguage: {
        tokens,
      },
    }

    const { chunks } = await plugin(structure)
    const cssFile = chunks.find((chunk) => chunk.fileType === 'css')
    const { content } = cssFile

    expect(cssFile).toBeDefined()
    expect(content).toContain(`:root {
  --red-500: #ff9999;
  --blue-500: #9999ff;
  --blue-600: #6b7db3;
}
`)
    expect(content).toContain(`.conditionalButton:hover {
  background: var(--blue-500);
}
`)
    expect(content).toContain(`color: var(--red-500)`)
    expect(content).toContain('.primaryButton')
    expect(content).toContain('secondaryButton')
    expect(content).toContain('.conditionalButton:hover')
    expect(content).toContain('@media(max-width: 991px)')
    expect(content).not.toContain('5ecfa1233b8e50f60ea2b64b')
  })

  it('should not generate file when the styleSetDefinition is empty', async () => {
    const plugin = createStyleSheetPlugin()
    const structure = setUpStructureWithHASTChunk()

    const result = await plugin(structure)

    expect(result).toBe(undefined)
  })
})

'''
'''--- packages/teleport-plugin-css/package.json ---
{
  "name": "@teleporthq/teleport-plugin-css",
  "version": "0.29.0",
  "description": "A plugin for creating the styles into external css files",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@babel/types": "^7.5.5",
    "@teleporthq/teleport-plugin-common": "^0.29.0",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-plugin-css/src/index.ts ---
import { StringUtils, UIDLUtils } from '@teleporthq/teleport-shared'
import { StyleUtils, StyleBuilders, HASTUtils, ASTUtils } from '@teleporthq/teleport-plugin-common'
import * as types from '@babel/types'
import {
  ComponentPluginFactory,
  ComponentPlugin,
  UIDLDynamicReference,
  UIDLStyleDefinitions,
  ChunkType,
  FileType,
  HastNode,
  UIDLElementNodeReferenceStyles,
  UIDLStyleMediaQueryScreenSizeCondition,
  PluginCSS,
} from '@teleporthq/teleport-types'
import { createStyleSheetPlugin } from './style-sheet'

interface CSSPluginConfig {
  chunkName: string
  templateChunkName: string
  componentDecoratorChunkName: string
  inlineStyleAttributeKey: string // style vs :style vs ...
  classAttributeName: string // class vs className
  forceScoping: boolean // class names get the component name prefix
  templateStyle: 'html' | 'jsx'
  declareDependency: 'import' | 'decorator' | 'none'
  dynamicVariantPrefix?: string
  staticPropReferences?: boolean
}

const createCSSPlugin: ComponentPluginFactory<CSSPluginConfig> = (config) => {
  const {
    chunkName = 'style-chunk',
    templateChunkName = 'template-chunk',
    componentDecoratorChunkName = 'component-decorator',
    inlineStyleAttributeKey = 'style',
    classAttributeName = 'class',
    templateStyle = 'html',
    declareDependency = 'none',
    forceScoping = false,
    dynamicVariantPrefix,
    staticPropReferences = false,
  } = config || {}

  const cssPlugin: ComponentPlugin = async (structure) => {
    const { uidl, chunks, dependencies, options } = structure
    const { node, styleSetDefinitions: componentStyleSet = {}, propDefinitions = {} } = uidl
    const { projectStyleSet, designLanguage: { tokens = {} } = {}, isRootComponent } = options || {}
    const {
      styleSetDefinitions = {},
      fileName: projectStyleSheetName,
      path: projectStyleSheetPath,
    } = projectStyleSet || {}

    if (isRootComponent) {
      if (Object.keys(tokens).length > 0 || Object.keys(styleSetDefinitions).length > 0) {
        dependencies[projectStyleSheetName] = {
          type: 'local',
          path: `${projectStyleSheetPath}${projectStyleSheetName}.${FileType.CSS}`,
          meta: {
            importJustPath: true,
          },
        }
      }

      return structure
    }

    const templateChunk = chunks.find((chunk) => chunk.name === templateChunkName)
    const componentDecoratorChunk = chunks.find(
      (chunk) => chunk.name === componentDecoratorChunkName
    )

    const templateLookup = templateChunk.meta.nodesLookup as Record<
      string,
      HastNode | types.JSXElement
    >

    const propsPrefix: string = templateChunk.meta.dynamicRefPrefix
      ? ((templateChunk.meta.dynamicRefPrefix as Record<string, unknown>).prop as string)
      : ('' as string)

    const cssMap: string[] = []
    const mediaStylesMap: Record<
      string,
      Array<{ [x: string]: Record<string, string | number> }>
    > = {}

    UIDLUtils.traverseElements(node, (element) => {
      const classNamesToAppend: Set<string> = new Set()
      const dynamicVariantsToAppend: Set<string> = new Set()
      const {
        style = {},
        key,
        referencedStyles = {},
        dependency,
        attrs = {},
        elementType,
      } = element
      const elementClassName = StringUtils.camelCaseToDashCase(key)

      if (forceScoping && dependency?.type === 'local') {
        StyleBuilders.setPropValueForCompStyle({
          attrs,
          key,
          jsxNodesLookup: templateLookup,
          templateStyle,
          getClassName: (styleName: string) =>
            getClassName(forceScoping, StringUtils.camelCaseToDashCase(elementType), styleName),
        })
      }

      if (
        Object.keys(style).length === 0 &&
        Object.keys(referencedStyles).length === 0 &&
        Object.keys(componentStyleSet).length === 0
      ) {
        return
      }

      const root = templateLookup[key]
      if (!root) {
        throw new PluginCSS(`Node - ${key} is missing from the template chunk`)
      }

      const className = getClassName(forceScoping, uidl.name, elementClassName)

      const { staticStyles, dynamicStyles, tokenStyles } =
        UIDLUtils.splitDynamicAndStaticStyles(style)

      if (Object.keys(staticStyles).length > 0 || Object.keys(tokenStyles).length > 0) {
        const collectedStyles = {
          ...StyleUtils.getContentOfStyleObject(staticStyles),
          ...StyleUtils.getCSSVariablesContentFromTokenStyles(tokenStyles),
        } as Record<string, string | number>

        cssMap.push(StyleBuilders.createCSSClass(className, collectedStyles))
        classNamesToAppend.add(className)
      }

      if (Object.keys(dynamicStyles).length > 0) {
        /* If dynamic styles are on nested-styles they are unfortunately lost,
          since inline style does not support that */
        if (templateStyle === 'html') {
          const inlineStyles = createDynamicInlineStyle(dynamicStyles)
          HASTUtils.addAttributeToNode(
            root as HastNode,
            inlineStyleAttributeKey,
            `{${inlineStyles}}`
          )
        } else {
          const inlineStyles = UIDLUtils.transformDynamicStyles(dynamicStyles, (styleValue) =>
            StyleBuilders.createDynamicStyleExpression(styleValue, propsPrefix)
          )
          ASTUtils.addAttributeToJSXTag(
            root as types.JSXElement,
            inlineStyleAttributeKey,
            inlineStyles
          )
        }
      }

      Object.values(referencedStyles).forEach((styleRef: UIDLElementNodeReferenceStyles) => {
        switch (styleRef.content.mapType) {
          case 'inlined': {
            const filtredStyles = UIDLUtils.splitDynamicAndStaticStyles(styleRef.content.styles)
            const collectedStyles = {
              ...StyleUtils.getContentOfStyleObject(filtredStyles.staticStyles),
              ...StyleUtils.getCSSVariablesContentFromTokenStyles(filtredStyles.tokenStyles),
            } as Record<string, string | number>

            const condition = styleRef.content.conditions[0]
            const { conditionType } = condition
            if (conditionType === 'screen-size') {
              const { maxWidth } = condition as UIDLStyleMediaQueryScreenSizeCondition
              if (!mediaStylesMap[String(maxWidth)]) {
                mediaStylesMap[String(maxWidth)] = []
              }
              mediaStylesMap[String(maxWidth)].push({ [className]: collectedStyles })
            }

            if (condition.conditionType === 'element-state') {
              cssMap.push(
                StyleBuilders.createCSSClassWithSelector(
                  className,
                  `&:${condition.content}`,
                  collectedStyles
                )
              )
            }

            classNamesToAppend.add(className)
            return
          }

          case 'component-referenced': {
            if (styleRef.content.content.type === 'static') {
              classNamesToAppend.add(String(styleRef.content.content.content))
            }

            if (
              styleRef.content.content.type === 'dynamic' &&
              styleRef.content.content.content.referenceType === 'prop'
            ) {
              const defaultPropValue =
                propDefinitions[styleRef.content.content.content.id]?.defaultValue

              if (defaultPropValue) {
                /* Changing the default value of the prop.
                  When forceScoping is enabled the classnames change. So, we need to change the default prop too. */
                propDefinitions[styleRef.content.content.content.id].defaultValue = getClassName(
                  forceScoping,
                  uidl.name,
                  String(defaultPropValue)
                )
              }

              if (staticPropReferences) {
                if (!defaultPropValue) {
                  return
                }
                if (staticPropReferences) {
                  classNamesToAppend.add(
                    getClassName(forceScoping, uidl.name, String(defaultPropValue))
                  )
                }
              } else {
                dynamicVariantsToAppend.add(styleRef.content.content.content.id)
              }
            }

            if (
              styleRef.content.content.type === 'dynamic' &&
              styleRef.content.content.content.referenceType === 'comp'
            ) {
              if (!componentStyleSet[styleRef.content.content.content.id]) {
                throw new PluginCSS(
                  `Node ${elementType} is referring to a comp style instance ${styleRef.content.content.content.id} which is missing.`
                )
              }
              classNamesToAppend.add(
                getClassName(forceScoping, uidl.name, String(styleRef.content.content.content.id))
              )
            }

            return
          }

          case 'project-referenced': {
            const { content } = styleRef
            const referedStyle = styleSetDefinitions[content.referenceId]
            if (!referedStyle) {
              throw new PluginCSS(
                `Style used from global stylesheet is missing - ${content.referenceId}`
              )
            }

            classNamesToAppend.add(content.referenceId)
            return
          }

          default: {
            throw new PluginCSS(
              `Un-supported style reference ${JSON.stringify(styleRef.content, null, 2)}`
            )
          }
        }
      })

      if (templateStyle === 'html') {
        if (classNamesToAppend.size > 0) {
          HASTUtils.addClassToNode(root as HastNode, Array.from(classNamesToAppend).join(' '))
        }

        if (dynamicVariantsToAppend.size > 1) {
          throw new PluginCSS(`Node ${
            node.content?.name || node.content?.key
          } is using multiple dynamic variants using propDefinitions.
          We can have only one dynamic variant at once`)
        }

        if (dynamicVariantPrefix && dynamicVariantsToAppend.size > 0) {
          HASTUtils.addAttributeToNode(
            root as HastNode,
            dynamicVariantPrefix,
            Array.from(dynamicVariantsToAppend).join(' ')
          )
        }
      } else {
        ASTUtils.addClassStringOnJSXTag(
          root as types.JSXElement,
          Array.from(classNamesToAppend).join(' '),
          classAttributeName,
          Array.from(dynamicVariantsToAppend).map((variant) => {
            const dynamicAttrValueIdentifier: types.Identifier = dynamicVariantPrefix
              ? types.identifier(dynamicVariantPrefix)
              : types.identifier(propsPrefix)

            return types.memberExpression(dynamicAttrValueIdentifier, types.identifier(variant))
          })
        )
      }
    })

    if (Object.keys(componentStyleSet).length > 0) {
      StyleBuilders.generateStylesFromStyleSetDefinitions(
        componentStyleSet,
        cssMap,
        mediaStylesMap,
        (styleName: string) => getClassName(forceScoping, uidl.name, styleName)
      )
    }

    if (Object.keys(mediaStylesMap).length > 0) {
      cssMap.push(...StyleBuilders.generateMediaStyle(mediaStylesMap))
    }

    if (cssMap.length > 0) {
      /**
       * Setup an import statement for the styles
       * The name of the file is either in the meta of the component generator
       * or we fallback to the name of the component
       */
      const cssFileName = UIDLUtils.getStyleFileName(uidl)

      if (declareDependency === 'decorator' && componentDecoratorChunk) {
        const decoratorAST = componentDecoratorChunk.content
        // @ts-ignore
        const decoratorParam = decoratorAST.expression.arguments[0]
        ASTUtils.addPropertyToASTObject(decoratorParam, 'styleUrls', [
          `${cssFileName}.${FileType.CSS}`,
        ])
        cssMap.unshift(`:host { \n  display: contents; \n}`)
      }

      if (declareDependency === 'import') {
        dependencies.styles = {
          // styles will not be used in this case as we have importJustPath flag set
          type: 'local',
          path: `./${cssFileName}.${FileType.CSS}`,
          meta: {
            importJustPath: true,
          },
        }
      }

      chunks.push({
        type: ChunkType.STRING,
        name: chunkName,
        fileType: FileType.CSS,
        content: cssMap.join('\n'),
        linkAfter: [],
      })
    }

    return structure
  }

  return cssPlugin
}

export { createStyleSheetPlugin, createCSSPlugin }

export default createCSSPlugin()

const createDynamicInlineStyle = (styles: UIDLStyleDefinitions) => {
  return Object.keys(styles)
    .map((styleKey) => {
      return `${styleKey}: ${(styles[styleKey] as UIDLDynamicReference).content.id}`
    })
    .join(', ')
}

const getClassName = (scoping: boolean, uidlName: string, nodeStyleName: string) => {
  return scoping
    ? StringUtils.camelCaseToDashCase(`${uidlName}-${nodeStyleName}`)
    : StringUtils.camelCaseToDashCase(nodeStyleName)
}

'''
'''--- packages/teleport-plugin-css/src/style-sheet.ts ---
import { StyleUtils, StyleBuilders } from '@teleporthq/teleport-plugin-common'
import {
  ComponentPlugin,
  ComponentPluginFactory,
  ChunkType,
  FileType,
} from '@teleporthq/teleport-types'

interface StyleSheetPlugin {
  fileName?: string
}

export const createStyleSheetPlugin: ComponentPluginFactory<StyleSheetPlugin> = (config) => {
  const { fileName } = config || { fileName: 'style' }
  const styleSheetPlugin: ComponentPlugin = async (structure) => {
    const { uidl, chunks } = structure
    const { styleSetDefinitions = {}, designLanguage: { tokens = {} } = {} } = uidl

    if (
      (!styleSetDefinitions && !tokens) ||
      (Object.keys(styleSetDefinitions).length === 0 && Object.keys(tokens).length === 0)
    ) {
      return
    }

    const cssMap: string[] = []
    const mediaStylesMap: Record<
      string,
      Array<{ [x: string]: Record<string, string | number> }>
    > = {}

    if (Object.keys(tokens).length > 0) {
      cssMap.push(
        StyleBuilders.createCSSClassWithSelector(
          '@global',
          ':root',
          StyleUtils.getTokensContentFromTokensObject(tokens)
        )
      )
    }

    if (Object.keys(styleSetDefinitions).length > 0) {
      StyleBuilders.generateStylesFromStyleSetDefinitions(
        styleSetDefinitions,
        cssMap,
        mediaStylesMap,
        (styleName: string) => styleName
      )
    }

    cssMap.push(...StyleBuilders.generateMediaStyle(mediaStylesMap))

    if (cssMap.length === 0) {
      return structure
    }

    uidl.outputOptions = uidl.outputOptions || {}
    uidl.outputOptions.styleFileName = fileName

    chunks.push({
      name: fileName,
      type: ChunkType.STRING,
      fileType: FileType.CSS,
      content: cssMap.join('\n'),
      linkAfter: [],
    })

    return structure
  }
  return styleSheetPlugin
}

'''
'''--- packages/teleport-plugin-css/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-plugin-html-base-component/README.md ---
# teleport-plugin-html-base-component

A plugin for handling the skeleton/baseline of a base html component

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-plugin-html-base-component
```
or
```bash
yarn add @teleporthq/teleport-plugin-html-base-component
```

'''
'''--- packages/teleport-plugin-html-base-component/__tests__/index.ts ---
import {
  ComponentStructure,
  FileType,
  HastNode,
  HastText,
  UIDLElementNode,
} from '@teleporthq/teleport-types'
import { component, dynamicNode, elementNode, staticNode } from '@teleporthq/teleport-uidl-builders'
import { createHTMLBasePlugin } from '../src'

const getMockComponentStructure: ComponentStructure = () => ({
  chunks: [],
  options: {},
  uidl: component('Test', elementNode('container')),
  dependencies: {},
})

describe('plugin-html-base-component', () => {
  it('generated HAST nodes with the UIDL that is passed', async () => {
    const { htmlComponentPlugin } = createHTMLBasePlugin()
    const { chunks } = await htmlComponentPlugin(getMockComponentStructure())
    const htmlChunk = chunks.find((chunk) => chunk.fileType === FileType.HTML)

    expect(chunks.length).toBe(1)
    expect(htmlChunk).toBeDefined()
    expect(htmlChunk.name).toBe('html-chunk')
  })

  it('adds attributes to the HAST node', async () => {
    const { htmlComponentPlugin } = createHTMLBasePlugin()
    const { chunks } = await htmlComponentPlugin({
      ...getMockComponentStructure(),
      uidl: component(
        'Test',
        elementNode('a', { href: staticNode('/about'), target: staticNode('_blank') }, [
          staticNode('About'),
        ])
      ),
    })

    expect(chunks.length).toEqual(1)
    expect(((chunks[0].content as HastNode).children[0] as HastNode).properties.href).toBe(
      'about.html'
    )
  })

  it('wraps static content inside div tags', async () => {
    const { htmlComponentPlugin } = createHTMLBasePlugin()
    const { chunks } = await htmlComponentPlugin({
      ...getMockComponentStructure(),
      uidl: component('Test', staticNode('Hello') as unknown as UIDLElementNode),
    })

    expect(chunks.length).toEqual(1)
    expect((chunks[0].content as HastNode).children.length).toEqual(1)
  })

  it('Throws error when a external comp is missing', async () => {
    const { htmlComponentPlugin } = createHTMLBasePlugin()
    const plugin = htmlComponentPlugin({
      ...getMockComponentStructure(),
      uidl: component('Test', elementNode('Sample', {}, [], { type: 'local' })),
    })

    await expect(plugin).rejects.toThrow(Error)
  })

  it('Takes default value from props and state, when nodes are using dynamic ref', async () => {
    const { htmlComponentPlugin } = createHTMLBasePlugin()
    const { chunks } = await htmlComponentPlugin({
      ...getMockComponentStructure(),
      uidl: component('Test', elementNode('container', {}, [dynamicNode('prop', 'content')]), {
        content: { type: 'string', defaultValue: 'Hello World' },
      }),
    })

    const hastText = (
      ((chunks[0].content as HastNode).children[0] as HastNode).children[0] as HastNode
    ).children[0] as HastText

    expect(chunks.length).toEqual(1)
    expect(hastText).toBeDefined()
    expect(hastText.type).toBe('text')
    expect(hastText.value).toBe('Hello World')
  })
})

'''
'''--- packages/teleport-plugin-html-base-component/package.json ---
{
  "name": "@teleporthq/teleport-plugin-html-base-component",
  "version": "0.29.2",
  "description": "A plugin for handling the skeleton/baseline of a base html component",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "types": "dist/cjs/index.d.ts",
  "module": "dist/esm/index.js",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-plugin-common": "^0.29.0",
    "@teleporthq/teleport-plugin-css": "^0.29.0",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0",
    "@teleporthq/teleport-uidl-builders": "^0.29.0"
  }
}

'''
'''--- packages/teleport-plugin-html-base-component/src/constants.ts ---
export const DEFAULT_COMPONENT_CHUNK_NAME = 'html-chunk'

'''
'''--- packages/teleport-plugin-html-base-component/src/index.ts ---
import {
  ComponentPlugin,
  FileType,
  ChunkType,
  HastNode,
  ComponentDefaultPluginParams,
  ComponentUIDL,
} from '@teleporthq/teleport-types'
import { HASTBuilders, HASTUtils } from '@teleporthq/teleport-plugin-common'
import { DEFAULT_COMPONENT_CHUNK_NAME } from './constants'
import { generateHtmlSynatx } from './node-handlers'
import { StringUtils, UIDLUtils } from '@teleporthq/teleport-shared'

interface HtmlPluginConfig {
  componentChunkName: string
  wrapComponent?: boolean
}

interface HtmlPlugin {
  htmlComponentPlugin: ComponentPlugin
  addExternals: (list: Record<string, ComponentUIDL>, plugins: ComponentPlugin[]) => void
}

type HtmlPluginFactory<T> = (config?: Partial<T & ComponentDefaultPluginParams>) => HtmlPlugin

export const createHTMLBasePlugin: HtmlPluginFactory<HtmlPluginConfig> = (config) => {
  const { componentChunkName = DEFAULT_COMPONENT_CHUNK_NAME, wrapComponent = false } = config || {}
  let externals: Record<string, ComponentUIDL> = {}
  let plugins: ComponentPlugin[] = []

  const addExternals = (
    list?: Record<string, ComponentUIDL>,
    subComponentPlugins: ComponentPlugin[] = []
  ) => {
    externals = {
      ...externals,
      ...(list || {}),
    }
    plugins = subComponentPlugins
  }

  const htmlComponentPlugin: ComponentPlugin = async (structure) => {
    const { uidl, chunks = [], dependencies, options } = structure
    const { propDefinitions = {}, stateDefinitions = {}, outputOptions } = uidl

    const templatesLookUp: Record<string, unknown> = {}
    const compBase = wrapComponent
      ? HASTBuilders.createHTMLNode('body')
      : HASTBuilders.createHTMLNode('div')

    const bodyContent = await generateHtmlSynatx(
      uidl.node,
      templatesLookUp,
      propDefinitions,
      stateDefinitions,
      {
        externals: Object.values(externals).reduce(
          (acc: Record<string, ComponentUIDL>, comp: ComponentUIDL) => {
            UIDLUtils.setFriendlyOutputOptions(comp)
            comp.name = StringUtils.removeIllegalCharacters(comp.name) || 'AppComponent'
            comp.name = UIDLUtils.getComponentClassName(comp)
            acc[comp.name] = comp
            return acc
          },
          {}
        ),
        plugins,
      },
      { chunks, dependencies, options, outputOptions }
    )
    HASTUtils.addChildNode(compBase, bodyContent as HastNode)

    chunks.push({
      type: ChunkType.HAST,
      fileType: FileType.HTML,
      name: componentChunkName,
      content: compBase,
      linkAfter: [],
      meta: {
        nodesLookup: templatesLookUp,
      },
    })

    return structure
  }

  return {
    htmlComponentPlugin,
    addExternals,
  }
}

export default createHTMLBasePlugin()

'''
'''--- packages/teleport-plugin-html-base-component/src/node-handlers.ts ---
import {
  UIDLNode,
  UIDLElementNode,
  HastNode,
  HTMLComponentGeneratorError,
  UIDLAttributeValue,
  UIDLPropDefinition,
  UIDLStateDefinition,
  UIDLDynamicReference,
  UIDLStyleDefinitions,
  HastText,
  ComponentUIDL,
  ChunkType,
  FileType,
  ChunkDefinition,
  UIDLDependency,
  UIDLStyleValue,
  GeneratorOptions,
  UIDLRouteDefinitions,
  ComponentPlugin,
  ComponentStructure,
  UIDLComponentOutputOptions,
  UIDLElement,
} from '@teleporthq/teleport-types'
import { join, relative } from 'path'
import { HASTBuilders, HASTUtils } from '@teleporthq/teleport-plugin-common'
import { StringUtils, UIDLUtils } from '@teleporthq/teleport-shared'
import { staticNode } from '@teleporthq/teleport-uidl-builders'
import { createCSSPlugin } from '@teleporthq/teleport-plugin-css'
import { DEFAULT_COMPONENT_CHUNK_NAME } from './constants'

type NodeToHTML<NodeType, ReturnType> = (
  node: NodeType,
  templatesLookUp: Record<string, unknown>,
  propDefinitions: Record<string, UIDLPropDefinition>,
  stateDefinitions: Record<string, UIDLStateDefinition>,
  subComponentOptions: {
    externals: Record<string, ComponentUIDL>
    plugins: ComponentPlugin[]
  },
  structure: {
    chunks: ChunkDefinition[]
    dependencies: Record<string, UIDLDependency>
    options: GeneratorOptions
    outputOptions: UIDLComponentOutputOptions
  }
) => ReturnType

export const generateHtmlSynatx: NodeToHTML<UIDLNode, Promise<HastNode | HastText>> = async (
  node,
  templatesLookUp,
  propDefinitions,
  stateDefinitions,
  subComponentOptions,
  structure
) => {
  switch (node.type) {
    case 'inject':
    case 'raw':
      return HASTBuilders.createTextNode(node.content.toString())

    case 'static':
      return HASTBuilders.createTextNode(StringUtils.encode(node.content.toString()))

    case 'slot':
      return HASTBuilders.createHTMLNode(node.type)

    case 'element':
      return generatElementNode(
        node,
        templatesLookUp,
        propDefinitions,
        stateDefinitions,
        subComponentOptions,
        structure
      )

    case 'dynamic':
      return generateDynamicNode(
        node,
        templatesLookUp,
        propDefinitions,
        stateDefinitions,
        subComponentOptions,
        structure
      )

    default:
      throw new HTMLComponentGeneratorError(
        `generateHtmlSyntax encountered a node of unsupported type: ${JSON.stringify(
          node,
          null,
          2
        )} `
      )
  }
}

const generatElementNode: NodeToHTML<UIDLElementNode, Promise<HastNode | HastText>> = async (
  node,
  templatesLookUp,
  propDefinitions,
  stateDefinitions,
  subComponentOptions,
  structure
) => {
  const {
    elementType,
    children,
    attrs = {},
    style = {},
    referencedStyles = {},
    dependency,
    key,
  } = node.content
  const elementNode = HASTBuilders.createHTMLNode(elementType)
  templatesLookUp[key] = elementNode

  const { dependencies } = structure
  if (dependency && (dependency as UIDLDependency)?.type !== 'local') {
    dependencies[dependency.path] = dependency
  }

  if (dependency && (dependency as UIDLDependency)?.type === 'local') {
    const compTag = await generateComponentContent(
      node,
      propDefinitions,
      stateDefinitions,
      subComponentOptions,
      structure
    )
    return compTag
  }

  if (children) {
    for (const child of children) {
      const childTag = await generateHtmlSynatx(
        child,
        templatesLookUp,
        propDefinitions,
        stateDefinitions,
        subComponentOptions,
        structure
      )

      if (!childTag) {
        return
      }

      if (typeof childTag === 'string') {
        HASTUtils.addTextNode(elementNode, childTag)
      } else {
        HASTUtils.addChildNode(elementNode, childTag as HastNode)
      }
    }
  }

  if (Object.keys(referencedStyles).length > 0) {
    Object.keys(referencedStyles).forEach((styleRef) => {
      const refStyle = referencedStyles[styleRef]
      if (refStyle.content.mapType === 'inlined') {
        handleStyles(node, refStyle.content.styles, propDefinitions, stateDefinitions)
        return
      }
    })
  }

  if (Object.keys(style).length > 0) {
    handleStyles(node, style, propDefinitions, stateDefinitions)
  }

  if (Object.keys(attrs).length > 0) {
    handleAttributes(
      elementType,
      elementNode,
      attrs,
      propDefinitions,
      stateDefinitions,
      structure.options.projectRouteDefinition,
      structure.outputOptions
    )
  }

  return elementNode
}

const generateComponentContent = async (
  node: UIDLElementNode,
  propDefinitions: Record<string, UIDLPropDefinition>,
  stateDefinitions: Record<string, UIDLStateDefinition>,
  subComponentOptions: {
    externals: Record<string, ComponentUIDL>
    plugins: ComponentPlugin[]
  },
  structure: {
    chunks: ChunkDefinition[]
    dependencies: Record<string, UIDLDependency>
    options: GeneratorOptions
    outputOptions: UIDLComponentOutputOptions
  }
) => {
  const { externals, plugins } = subComponentOptions
  const { elementType, attrs = {}, key, children = [] } = node.content
  const { dependencies, chunks = [], options } = structure
  const comp = UIDLUtils.cloneObject(externals[elementType] || {}) as ComponentUIDL
  const lookUpTemplates: Record<string, unknown> = {}
  let compHasSlots: boolean = false

  if (!comp || !comp?.node) {
    throw new HTMLComponentGeneratorError(`${elementType} is not found from the externals. \n
        Received ${JSON.stringify(Object.keys(externals), null, 2)}`)
  }

  if (children.length) {
    compHasSlots = true
    UIDLUtils.traverseNodes(comp.node, (childNode, parentNode) => {
      if (childNode.type === 'slot' && parentNode.type === 'element') {
        const nonSlotNodes = parentNode.content?.children?.filter((n) => n.type !== 'slot')
        parentNode.content.children = [
          ...nonSlotNodes,
          {
            type: 'element',
            content: {
              key: 'custom-slot',
              elementType: 'slot',
              style: {
                display: {
                  type: 'static',
                  content: 'contents',
                },
              },
              children,
            },
          },
        ]
      }
    })
    /*
      Since we don't generate direct component children in HTML. We need to reset this,
      or else the plugins like css and others try to parse and process them.
    */
    node.content.children = []
  }

  const combinedProps = { ...propDefinitions, ...(comp?.propDefinitions || {}) }
  const propsForInstance = Object.keys(combinedProps).reduce(
    (acc: Record<string, UIDLPropDefinition>, propKey) => {
      if (attrs[propKey]) {
        acc[propKey] = {
          ...combinedProps[propKey],
          defaultValue: attrs[propKey]?.content || combinedProps[propKey]?.defaultValue,
        }
      } else {
        acc[propKey] = combinedProps[propKey]
      }

      return acc
    },
    {}
  )

  const combinedStates = { ...stateDefinitions, ...(comp?.stateDefinitions || {}) }
  const statesForInstance = Object.keys(combinedStates).reduce(
    (acc: Record<string, UIDLStateDefinition>, propKey) => {
      if (attrs[propKey]) {
        acc[propKey] = {
          ...combinedStates[propKey],
          defaultValue: attrs[propKey]?.content || combinedStates[propKey]?.defaultValue,
        }
      } else {
        acc[propKey] = combinedStates[propKey]
      }

      return acc
    },
    {}
  )
  const elementNode = HASTBuilders.createHTMLNode(StringUtils.camelCaseToDashCase(elementType))
  lookUpTemplates[key] = elementNode

  const compTag = (await generateHtmlSynatx(
    {
      ...comp.node,
      content: {
        ...comp.node.content,
        style: {
          ...(comp.node.content?.style || {}),
          display: {
            type: 'static',
            content: 'contents',
          },
        },
      },
    },
    lookUpTemplates,
    propsForInstance,
    statesForInstance,
    subComponentOptions,
    structure
  )) as unknown as HastNode

  const cssPlugin = createCSSPlugin({
    templateStyle: 'html',
    templateChunkName: DEFAULT_COMPONENT_CHUNK_NAME,
    declareDependency: 'import',
    forceScoping: true,
    chunkName: comp.name,
    staticPropReferences: true,
  })

  const initialStructure: ComponentStructure = {
    uidl: {
      ...comp,
      propDefinitions: propsForInstance,
      stateDefinitions: statesForInstance,
    },
    chunks: [
      {
        type: ChunkType.HAST,
        fileType: FileType.HTML,
        name: DEFAULT_COMPONENT_CHUNK_NAME,
        linkAfter: [],
        content: compTag,
        meta: {
          nodesLookup: lookUpTemplates,
        },
      },
    ],
    dependencies,
    options,
  }

  const result = await [cssPlugin, ...plugins].reduce(
    async (previousPluginOperation: Promise<ComponentStructure>, plugin) => {
      const modifiedStructure = await previousPluginOperation
      return plugin(modifiedStructure)
    },
    Promise.resolve(initialStructure)
  )

  if (compHasSlots) {
    result.chunks.forEach((chunk) => {
      if (chunk.fileType === FileType.CSS) {
        chunks.push(chunk)
      }
    })
  } else {
    const chunk = chunks.find((item) => item.name === comp.name)
    if (!chunk) {
      const styleChunk = result.chunks.find(
        (item: ChunkDefinition) => item.fileType === FileType.CSS
      )
      if (!styleChunk) {
        return
      }
      chunks.push(styleChunk)
    }
  }

  return compTag
}

const generateDynamicNode: NodeToHTML<UIDLDynamicReference, HastNode> = (
  node,
  _,
  propDefinitions,
  stateDefinitions
) => {
  const spanTag = HASTBuilders.createHTMLNode('span')
  const usedReferenceValue =
    node.content.referenceType === 'prop'
      ? getValueFromReference(node.content.id, propDefinitions)
      : getValueFromReference(node.content.id, stateDefinitions)

  HASTUtils.addTextNode(spanTag, String(usedReferenceValue))
  return spanTag
}

const handleStyles = (
  node: UIDLElementNode,
  styles: UIDLStyleDefinitions,
  propDefinitions: Record<string, UIDLPropDefinition>,
  stateDefinitions: Record<string, UIDLStateDefinition>
) => {
  Object.keys(styles).forEach((styleKey) => {
    let style: string | UIDLStyleValue = styles[styleKey]
    if (style.type === 'dynamic' && style.content?.referenceType !== 'token') {
      if (style.content.referenceType === 'prop') {
        style = getValueFromReference(style.content.id, propDefinitions)
      } else if (style.content.referenceType === 'state') {
        style = getValueFromReference(style.content.id, stateDefinitions)
      }
      node.content.style[styleKey] = typeof style === 'string' ? staticNode(style) : style
    }
  })
}

const handleAttributes = (
  elementType: UIDLElement['elementType'],
  htmlNode: HastNode,
  attrs: Record<string, UIDLAttributeValue>,
  propDefinitions: Record<string, UIDLPropDefinition>,
  stateDefinitions: Record<string, UIDLStateDefinition>,
  routeDefinitions: UIDLRouteDefinitions,
  outputOptions: UIDLComponentOutputOptions
) => {
  Object.keys(attrs).forEach((attrKey) => {
    const attrValue = attrs[attrKey]

    if (
      attrKey === 'href' &&
      attrValue.type === 'static' &&
      typeof attrValue.content === 'string' &&
      attrValue.content.startsWith('/')
    ) {
      let targetLink

      const targetRoute = (routeDefinitions?.values || []).find(
        (route) => route.pageOptions.navLink === attrValue.content
      )

      if (targetRoute) {
        targetLink = targetRoute.pageOptions.navLink
      }

      if (!targetRoute && attrValue.content === '/home') {
        targetLink = '/'
      }

      if (!targetLink && !targetRoute) {
        targetLink = attrValue.content
      }

      const currentPageRoute = join(...(outputOptions?.folderPath || []), './')
      const localPrefix = relative(
        `/${currentPageRoute}`,
        `/${targetLink === '/' ? 'index' : targetLink}`
      )

      HASTUtils.addAttributeToNode(htmlNode, attrKey, `${localPrefix}.html`)
      return
    }

    if (attrValue.type === 'dynamic') {
      const value =
        attrValue.content.referenceType === 'prop'
          ? getValueFromReference(attrValue.content.id, propDefinitions)
          : getValueFromReference(attrValue.content.id, stateDefinitions)
      HASTUtils.addAttributeToNode(htmlNode, attrKey, String(value))
      return
    }

    if (attrValue.type === 'raw') {
      HASTUtils.addAttributeToNode(htmlNode, attrKey, attrValue.content)
      return
    }

    if (typeof attrValue.content === 'boolean') {
      HASTUtils.addBooleanAttributeToNode(htmlNode, attrKey)
      return
    } else if (typeof attrValue.content === 'string' || typeof attrValue.content === 'number') {
      let value = StringUtils.encode(String(attrValue.content))

      /*
        elementType of image is always mapped to img.
        For reference, check `html-mapping` file.
      */
      if (elementType === 'img' && attrKey === 'src') {
        /*
          By default we just prefix all the asset paths with just the
          assetPrefix that is configured in the project. But for `html` generators
          we need to prefix that with the current file location.

          Because, all the other frameworks have a build setup. which serves all the
          assets from the `public` folder. But in the case of `html` here is how it works

          We load a file from `index.html` the request for the image goes from
          '...url.../public/...image...'
          If it's a nested url, then the request goes from
          '...url/nested/public/...image..'

          But the nested folder is available only on the root. With this
          The url changes prefixes to

          ../public/playground_assets/..image.. etc depending on the dept the file is in.
        */
        value = join(relative(join(...outputOptions.folderPath), './'), value)
      }

      HASTUtils.addAttributeToNode(htmlNode, attrKey, value)
      return
    }
  })
}

const getValueFromReference = (
  key: string,
  definitions: Record<string, UIDLPropDefinition>
): string => {
  const usedReferenceValue = definitions[key.includes('.') ? key.split('.')[0] : key]

  if (!usedReferenceValue) {
    throw new HTMLComponentGeneratorError(
      `Definition for ${key} is missing from ${JSON.stringify(definitions, null, 2)}`
    )
  }

  if (!usedReferenceValue.hasOwnProperty('defaultValue')) {
    throw new HTMLComponentGeneratorError(
      `Default value is missing from dynamic reference - ${JSON.stringify(
        usedReferenceValue,
        null,
        2
      )}`
    )
  }

  if (!['string', 'number', 'object'].includes(usedReferenceValue?.type)) {
    throw new HTMLComponentGeneratorError(
      `Attribute is using dynamic value, but received of type ${JSON.stringify(
        usedReferenceValue,
        null,
        2
      )}`
    )
  }

  return String(usedReferenceValue.defaultValue)
}

'''
'''--- packages/teleport-plugin-html-base-component/tsconfig.json ---
{
    "extends": "../../tsconfig.json",
    "compilerOptions": {
      "outDir": "dist/esm"
    },
    "include": [
      "./src"
    ]
}
'''
'''--- packages/teleport-plugin-import-statements-html/README.md ---
# teleport-plugin-import-statements-html

A plugin for handling import statements in HTML

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-plugin-import-statements-html
```
or
```bash
yarn add @teleporthq/teleport-plugin-import-statements-html
```

'''
'''--- packages/teleport-plugin-import-statements-html/__tests__/index.ts ---
import { component, elementNode } from '@teleporthq/teleport-uidl-builders'
import { ChunkType, ComponentStructure, FileType, HastNode } from '@teleporthq/teleport-types'
import { createHTMLImportStatementsPlugin } from '../src'

describe('Plugin html import statements', () => {
  const structure: ComponentStructure = {
    chunks: [
      {
        type: ChunkType.HAST,
        fileType: FileType.HTML,
        name: 'html-chunk',
        content: {
          type: 'element',
          tagName: 'div',
          properties: {},
          children: [
            {
              type: 'element',
              tagName: 'container',
              properties: {},
              children: [],
            },
          ],
        },
        linkAfter: [],
        meta: {
          nodesLookup: {
            container: {
              type: 'element',
              tagName: 'container',
              properties: {},
              children: [],
            },
          },
        },
      },
    ],
    options: {},
    uidl: component('Test', elementNode('container')),
    dependencies: {
      './sampl.css': { type: 'local', path: './sample.css', meta: { importJustPath: true } },
    },
  }
  const plugin = createHTMLImportStatementsPlugin()
  it('generate import chunks for from dependencies', async () => {
    const result = await plugin(structure)
    const htmlChunk = result.chunks.find((chunk) => chunk.fileType === FileType.HTML)

    expect((htmlChunk.content as HastNode).children.length).toBe(2)
  })
})

'''
'''--- packages/teleport-plugin-import-statements-html/package.json ---
{
  "name": "@teleporthq/teleport-plugin-import-statements-html",
  "version": "0.29.0",
  "description": "A plugin for handling import statements in HTML",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "types": "dist/cjs/index.d.ts",
  "module": "dist/esm/index.js",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-plugin-common": "^0.29.0",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  }
}

'''
'''--- packages/teleport-plugin-import-statements-html/src/index.ts ---
import {
  ComponentPlugin,
  FileType,
  ChunkType,
  HTMLComponentGeneratorError,
  HastNode,
} from '@teleporthq/teleport-types'
import { HASTBuilders, HASTUtils } from '@teleporthq/teleport-plugin-common'
import { StringUtils } from '@teleporthq/teleport-shared'

export const createHTMLImportStatementsPlugin = () => {
  const htmlImportsPlugin: ComponentPlugin = async (structure) => {
    const { dependencies = {}, chunks, uidl } = structure
    let chunkIndex = 0
    const htmlChunk = chunks.find((chunk, index) => {
      if (
        chunk.name === 'html-chunk' &&
        chunk.type === ChunkType.HAST &&
        chunk.fileType === FileType.HTML
      ) {
        chunkIndex = index
        return chunk
      }
    })
    if (!htmlChunk) {
      throw new HTMLComponentGeneratorError(
        `HTML Chunk is missing from the generated chunks from htmlImportsPlugin`
      )
    }
    const htmlTag = htmlChunk.content as HastNode
    const tags: HastNode[] = []

    if (Object.keys(dependencies).length === 0) {
      return structure
    }

    Object.keys(dependencies).forEach((item) => {
      const dependency = dependencies[item]
      const {
        meta: { importJustPath, importAlias },
        path,
      } = dependency
      if (importJustPath) {
        if (importAlias?.endsWith('css') || path.endsWith('css')) {
          const linkTag = HASTBuilders.createHTMLNode('link')
          HASTUtils.addAttributeToNode(linkTag, 'href', importAlias ?? path)
          HASTUtils.addAttributeToNode(linkTag, 'rel', 'stylesheet')
          tags.push(linkTag)
        } else {
          const scriptTag = HASTBuilders.createHTMLNode('script')
          HASTUtils.addAttributeToNode(scriptTag, 'type', 'text/javascript')
          HASTUtils.addAttributeToNode(scriptTag, 'src', importAlias ?? path)
          tags.push(scriptTag)
        }
      }
    })

    if (uidl?.seo) {
      const { metaTags = [], assets, title } = uidl.seo
      if (title) {
        const titleTag = HASTBuilders.createHTMLNode('title')
        HASTUtils.addTextNode(titleTag, StringUtils.encode(title))
        tags.push(titleTag)
      }

      if (metaTags.length > 0) {
        metaTags.forEach((meta) => {
          const metaTag = HASTBuilders.createHTMLNode('meta')
          Object.keys(meta).forEach((key) => {
            HASTUtils.addAttributeToNode(metaTag, key, meta[key])
          })
          tags.push(metaTag)
        })
      }

      if (assets && assets.length > 0) {
        assets.forEach((asset) => {
          if (asset.type === 'canonical' && asset.path) {
            const linkTag = HASTBuilders.createHTMLNode('link')
            HASTUtils.addAttributeToNode(linkTag, 'rel', 'canonical')
            HASTUtils.addAttributeToNode(linkTag, 'href', asset.path)
            HASTUtils.addChildNode(htmlTag, linkTag)
          }
        })
      }
    }

    htmlTag.children = [...tags, ...htmlTag.children]

    chunks.splice(chunkIndex, 1)
    chunks.push({
      ...htmlChunk,
      content: htmlTag,
    })

    return structure
  }

  return htmlImportsPlugin
}

export default createHTMLImportStatementsPlugin()

'''
'''--- packages/teleport-plugin-import-statements-html/tsconfig.json ---
{
    "extends": "../../tsconfig.json",
    "compilerOptions": {
      "outDir": "dist/esm"
    },
    "include": [
      "./src"
    ]
}
'''
'''--- packages/teleport-plugin-import-statements/README.md ---
# teleport-plugin-import-statements

A plugin for handling import statements in JavaScript code.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-plugin-import-statements
```
or
```bash
yarn add @teleporthq/teleport-plugin-import-statements
```

'''
'''--- packages/teleport-plugin-import-statements/__tests__/index.ts ---
import { createImportPlugin } from '../src/'
import { componentDependency } from '@teleporthq/teleport-uidl-builders'
import { ComponentStructure } from '@teleporthq/teleport-types'

describe('plugin-import-statements', () => {
  const plugin = createImportPlugin({
    importLibsChunkName: 'test-lib',
    importLocalsChunkName: 'test-local',
    importPackagesChunkName: 'test-pack',
  })

  it('creates 3 AST chunks from the different types of dependencies', async () => {
    const structure: ComponentStructure = {
      chunks: [],
      uidl: null,
      options: {},
      dependencies: {
        package: componentDependency('package', 'npm-package', '1.0.0'),
        library: componentDependency('library', 'project-lib', '2.0.0'),
        local: componentDependency('local', '../../components/local'),
      },
    }

    const { chunks } = await plugin(structure)
    expect(chunks.length).toBe(3)
    expect(chunks[0].name).toBe('test-lib')
    expect(chunks[1].name).toBe('test-pack')
    expect(chunks[2].name).toBe('test-local')
  })

  // We need this functionality for the linkAfter field to work
  it('pushes chunks for imports even when no statement is needed', async () => {
    const structure: ComponentStructure = {
      chunks: [],
      options: {},
      uidl: null,
      dependencies: {
        local: componentDependency('local', '../../components/local'),
      },
    }

    const { chunks } = await plugin(structure)
    expect(chunks.length).toBe(3)
  })
})

'''
'''--- packages/teleport-plugin-import-statements/package.json ---
{
  "name": "@teleporthq/teleport-plugin-import-statements",
  "version": "0.29.0",
  "description": "A plugin for handling import statements in JavaScript code",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-plugin-common": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-plugin-import-statements/src/index.ts ---
import { ASTBuilders } from '@teleporthq/teleport-plugin-common'
import {
  ComponentPluginFactory,
  ComponentPlugin,
  ChunkDefinition,
  UIDLDependency,
  ImportIdentifier,
  ChunkType,
  FileType,
  ComponentStructure,
} from '@teleporthq/teleport-types'

interface ImportPluginConfig {
  importLibsChunkName?: string
  importPackagesChunkName?: string
  importLocalsChunkName?: string
  fileType?: FileType
}

export const createImportPlugin: ComponentPluginFactory<ImportPluginConfig> = (
  config: ImportPluginConfig
) => {
  const {
    importLibsChunkName = 'import-lib',
    importPackagesChunkName = 'import-pack',
    importLocalsChunkName = 'import-local',
    fileType = FileType.JS,
  } = config || {}

  const importPlugin: ComponentPlugin = async (structure: ComponentStructure) => {
    const { uidl, dependencies } = structure
    let collectedDependencies = dependencies

    if (uidl?.importDefinitions) {
      const { importDefinitions = {} } = uidl

      collectedDependencies = {
        ...collectedDependencies,
        ...importDefinitions,
      }
      if (Object.keys(importDefinitions).length > 0) {
        Object.keys(importDefinitions).forEach((dependencyRef) => {
          const dependency = importDefinitions[dependencyRef]
          if (
            dependency.meta?.useAsReference ||
            dependency.meta?.importJustPath ||
            dependency?.meta.needsWindowObject ||
            dependency?.type === 'library'
          ) {
            return
          }

          dependencies[dependencyRef] = {
            type: 'package',
            path: dependency.meta?.importJustPath ? dependency.path : dependencyRef,
            version: dependency.version,
            meta: {
              importJustPath: dependency?.meta?.importJustPath,
              originalName: dependency?.meta?.originalName,
              namedImport: dependency?.meta?.namedImport,
            },
          }
        })
      }
    }

    const libraryDependencies = groupDependenciesByPackage(collectedDependencies, 'library')
    const packageDependencies = groupDependenciesByPackage(collectedDependencies, 'package')
    const localDependencies = groupDependenciesByPackage(collectedDependencies, 'local')
    addImportChunk(structure.chunks, libraryDependencies, importLibsChunkName, fileType)
    addImportChunk(structure.chunks, packageDependencies, importPackagesChunkName, fileType)
    addImportChunk(structure.chunks, localDependencies, importLocalsChunkName, fileType)
    return structure
  }

  return importPlugin
}

const groupDependenciesByPackage = (
  dependencies: Record<string, UIDLDependency>,
  packageType?: string
) => {
  const result: Record<string, ImportIdentifier[]> = {}

  Object.keys(dependencies)
    .filter((key) => (packageType && dependencies[key].type === packageType) || !packageType)
    .forEach((key) => {
      const dep = dependencies[key]

      // Should not be the case at this point
      if (!dep.path) {
        return
      }

      if (dep?.meta && 'needsWindowObject' in dep.meta) {
        return
      }

      if (dep?.meta?.importAlias) {
        result[dep.meta.importAlias] = []
      }

      if (!dep?.meta?.importAlias && !result[dep.path]) {
        result[dep.path] = [] // Initialize the dependencies from this path
      }

      const importJustPath = (dep.meta && dep.meta.importJustPath) || false
      const namedImport = !!(dep.meta && dep.meta.namedImport)
      const originalName = dep.meta && dep.meta.originalName ? dep.meta.originalName : key

      result[dep?.meta?.importAlias ?? dep.path].push({
        identifierName: key,
        namedImport,
        originalName,
        importJustPath,
      })
    })

  return result
}

const addImportChunk = (
  chunks: ChunkDefinition[],
  dependencies: Record<string, ImportIdentifier[]>,
  newChunkName: string,
  fileType: FileType
) => {
  const importASTs = Object.keys(dependencies).map((key) =>
    ASTBuilders.createGenericImportStatement(key, dependencies[key])
  )

  chunks.push({
    type: ChunkType.AST,
    name: newChunkName,
    fileType,
    content: importASTs,
    linkAfter: [],
  })
}

export default createImportPlugin()

'''
'''--- packages/teleport-plugin-import-statements/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-plugin-jsx-head-config/README.md ---
# teleport-plugin-jsx-head-config

A plugin for generating `<head>` tags inside regular JSX-based components

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-plugin-jsx-head-config
```
or
```bash
yarn add @teleporthq/teleport-plugin-jsx-head-config
```

'''
'''--- packages/teleport-plugin-jsx-head-config/__tests__/index.ts ---
import * as types from '@babel/types'
import { createJSXHeadConfigPlugin } from '../src'
import { component, elementNode } from '@teleporthq/teleport-uidl-builders'
import {
  ComponentStructure,
  ChunkType,
  FileType,
  ChunkDefinition,
} from '@teleporthq/teleport-types'

describe('plugin-jsx-head-config', () => {
  const plugin = createJSXHeadConfigPlugin()
  const jsxChunk: ChunkDefinition = {
    type: ChunkType.AST,
    fileType: FileType.JS,
    name: 'jsx-component',
    content: {},
    linkAfter: [],
    meta: {
      nodesLookup: {
        container: {
          type: 'JSXElement',
          openingElement: {
            type: 'JSXOpeningElement',
            name: { type: 'JSXIdentifier', name: 'div' },
            attributes: [],
            selfClosing: false,
          },
          closingElement: {
            type: 'JSXClosingElement',
            name: { type: 'JSXIdentifier', name: 'div' },
          },
          children: [],
        },
      },
    },
  }

  it('Should throw error when the chunk is supplied', async () => {
    const uidlSample = component('SimpleComponent', elementNode('container'))
    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {},
      chunks: [],
      dependencies: {},
    }
    try {
      await plugin(structure)
    } catch (e) {
      expect(e.message).toContain('JSX component chunk with name')
    }
  })

  it('Should set the title in the <Helmet> component', async () => {
    const uidlSample = component('SimpleComponent', elementNode('container'))
    uidlSample.node.content.key = 'container'
    uidlSample.seo = {
      title: 'Test Title',
    }

    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {},
      chunks: [jsxChunk],
      dependencies: {},
    }

    await plugin(structure)

    const astNode = structure.chunks[0].meta.nodesLookup.container as types.JSXElement
    expect(astNode.children.length).toBe(1)

    const helmetNode = astNode.children[0] as types.JSXElement
    expect((helmetNode.openingElement.name as types.JSXIdentifier).name).toBe('Helmet')

    const titleNode = helmetNode.children[0] as types.JSXElement
    const titleText = titleNode.children[0] as types.JSXText
    expect((titleNode.openingElement.name as types.JSXIdentifier).name).toBe('title')
    expect(titleText.value).toBe('Test Title')
  })

  it('Should set the meta tags in the <Helmet> component', async () => {
    const uidlSample = component('SimpleComponent', elementNode('container'))
    uidlSample.node.content.key = 'container'
    uidlSample.seo = {
      metaTags: [
        {
          name: 'description',
          value: 'test',
        },
        {
          randomKey: 'randomValue',
        },
      ],
    }

    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {},
      chunks: [jsxChunk],
      dependencies: {},
    }

    await plugin(structure)

    const astNode = structure.chunks[0].meta.nodesLookup.container as types.JSXElement
    expect(astNode.children.length).toBe(2)

    const helmetNode = astNode.children[0] as types.JSXElement
    expect((helmetNode.openingElement.name as types.JSXIdentifier).name).toBe('Helmet')

    const firstMetaNode = helmetNode.children[0] as types.JSXElement
    const secondMetaNode = helmetNode.children[1] as types.JSXElement

    const nameAttribute = firstMetaNode.openingElement.attributes[0] as types.JSXAttribute
    const valueAttribute = firstMetaNode.openingElement.attributes[1] as types.JSXAttribute
    expect((nameAttribute.name as types.JSXIdentifier).name).toBe('name')
    expect((nameAttribute.value as types.StringLiteral).value).toBe('description')
    expect((valueAttribute.name as types.JSXIdentifier).name).toBe('value')
    expect((valueAttribute.value as types.StringLiteral).value).toBe('test')

    const randomKeyAttribute = secondMetaNode.openingElement.attributes[0] as types.JSXAttribute
    expect((randomKeyAttribute.name as types.JSXIdentifier).name).toBe('randomKey')
    expect((randomKeyAttribute.value as types.StringLiteral).value).toBe('randomValue')
  })

  it('Should set the link tag in the <Helmet> for canonical', async () => {
    const uidlSample = component('SimpleComponent', elementNode('container'))
    uidlSample.node.content.key = 'container'
    uidlSample.seo = {
      assets: [
        {
          type: 'canonical',
          path: 'https://teleporthq.io',
        },
      ],
    }

    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {},
      chunks: [jsxChunk],
      dependencies: {},
    }

    await plugin(structure)

    const astNode = structure.chunks[0].meta.nodesLookup.container as types.JSXElement
    const helmetNode = astNode.children[0] as types.JSXElement
    expect((helmetNode.openingElement.name as types.JSXIdentifier).name).toBe('Helmet')

    const linkNode = helmetNode.children[0] as types.JSXElement

    const relAttribute = linkNode.openingElement.attributes[0] as types.JSXAttribute
    const hrefAttribute = linkNode.openingElement.attributes[1] as types.JSXAttribute
    expect((relAttribute.name as types.JSXIdentifier).name).toBe('rel')
    expect((relAttribute.value as types.StringLiteral).value).toBe('canonical')
    expect((hrefAttribute.name as types.JSXIdentifier).name).toBe('href')
    expect((hrefAttribute.value as types.StringLiteral).value).toBe('https://teleporthq.io')
  })
})

'''
'''--- packages/teleport-plugin-jsx-head-config/package.json ---
{
  "name": "@teleporthq/teleport-plugin-jsx-head-config",
  "version": "0.29.0",
  "description": "A plugin for generating `<head>` tags inside regular JSX-based components",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@babel/types": "^7.5.5",
    "@teleporthq/teleport-plugin-common": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-plugin-jsx-head-config/src/index.ts ---
import { ComponentPluginFactory, ComponentPlugin } from '@teleporthq/teleport-types'
import { ASTBuilders, ASTUtils } from '@teleporthq/teleport-plugin-common'
import * as types from '@babel/types'

interface JSXHeadPluginConfig {
  componentChunkName?: string
  configTagIdentifier?: string
  configTagDependencyPath?: string
  configTagDependencyVersion?: string
  isExternalPackage?: boolean
  isDefaultImport?: boolean
}

export const createJSXHeadConfigPlugin: ComponentPluginFactory<JSXHeadPluginConfig> = (config) => {
  const {
    componentChunkName = 'jsx-component',
    configTagIdentifier = 'Helmet',
    configTagDependencyPath = 'react-helmet',
    configTagDependencyVersion = '^6.1.0',
    isExternalPackage = true,
    isDefaultImport = false,
  } = config || {}

  const jsxHeadConfigPlugin: ComponentPlugin = async (structure) => {
    const { uidl, chunks, dependencies } = structure

    const componentChunk = chunks.find((chunk) => chunk.name === componentChunkName)
    if (!componentChunk) {
      throw new Error(
        `JSX component chunk with name ${componentChunkName} was required and not found.`
      )
    }

    if (!uidl.seo) {
      return structure
    }

    const headASTTags = []

    if (uidl.seo.title) {
      const titleAST = ASTBuilders.createJSXTag('title')
      ASTUtils.addChildJSXText(titleAST, uidl.seo.title)
      headASTTags.push(titleAST)
    }

    if (uidl.seo.metaTags) {
      uidl.seo.metaTags.forEach((tag) => {
        const metaAST = ASTBuilders.createSelfClosingJSXTag('meta')
        Object.keys(tag).forEach((key) => {
          ASTUtils.addAttributeToJSXTag(metaAST, key, tag[key])
        })
        headASTTags.push(metaAST)
      })
    }

    if (uidl.seo.assets) {
      uidl.seo.assets.forEach((asset) => {
        // TODO: Handle other asset types when needed
        if (asset.type === 'canonical') {
          const canonicalLink = ASTBuilders.createSelfClosingJSXTag('link')
          ASTUtils.addAttributeToJSXTag(canonicalLink, 'rel', 'canonical')
          ASTUtils.addAttributeToJSXTag(canonicalLink, 'href', asset.path)
          headASTTags.push(canonicalLink)
        }
      })
    }

    if (headASTTags.length > 0) {
      const headConfigTag = ASTBuilders.createJSXTag(configTagIdentifier, headASTTags)

      const rootKey = uidl.node.content.key
      // @ts-ignore
      const rootElement = componentChunk.meta.nodesLookup[rootKey] as types.JSXElement

      // Head config added as the first child of the root element
      rootElement.children.unshift(headConfigTag)

      dependencies[configTagIdentifier] = {
        type: isExternalPackage ? 'package' : 'library',
        path: configTagDependencyPath,
        version: configTagDependencyVersion,
        ...(!isDefaultImport && {
          meta: {
            namedImport: true,
          },
        }),
      }
    }

    return structure
  }

  return jsxHeadConfigPlugin
}

export default createJSXHeadConfigPlugin()

'''
'''--- packages/teleport-plugin-jsx-head-config/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-plugin-jsx-inline-styles/README.md ---
# teleport-plugin-jsx-inline-style

A plugin for injecting the styles as inline styles inside JSX-based components.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-plugin-jsx-inline-style
```
or
```bash
yarn add @teleporthq/teleport-plugin-jsx-inline-style
```

'''
'''--- packages/teleport-plugin-jsx-inline-styles/__tests__/index.ts ---
import { component, elementNode, staticNode } from '@teleporthq/teleport-uidl-builders'
import {
  ComponentStructure,
  ChunkDefinition,
  ChunkType,
  FileType,
} from '@teleporthq/teleport-types'
import { createInlineStylesPlugin } from '../src/index'

describe('plugin-jsx-inline-styles', () => {
  const plugin = createInlineStylesPlugin()
  const componentChunk: ChunkDefinition = {
    name: 'jsx-component',
    meta: {
      nodesLookup: {
        container: {
          openingElement: {
            name: {
              name: '',
            },
            attributes: [],
          },
        },
      },
      dynamicRefPrefix: {
        prop: 'props.',
      },
    },
    type: ChunkType.AST,
    fileType: FileType.JS,
    linkAfter: ['import-local'],
    content: {},
  }

  it('adds nothing to the AST if not style is defined', async () => {
    const uidlSample = component('InlineStyles', elementNode('container'))
    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {},
      chunks: [componentChunk],
      dependencies: {},
    }

    const oldStructure = JSON.stringify(structure)
    await plugin(structure)
    const newStructure = JSON.stringify(structure)

    expect(oldStructure).toBe(newStructure)
  })

  it('adds inline styles to the jsx element', async () => {
    const style = {
      height: staticNode('100px'),
    }
    const element = elementNode('container', {}, [], null, style)
    element.content.key = 'container'
    const uidlSample = component('InlineStyles', element)

    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {},
      chunks: [componentChunk],
      dependencies: {},
    }

    const { chunks } = await plugin(structure)

    expect(chunks.length).toBe(1)
    const nodeReference = componentChunk.meta.nodesLookup.container
    expect(nodeReference.openingElement.attributes.length).toBe(1)

    const styleAttr = nodeReference.openingElement.attributes[0]
    expect(styleAttr.name.name).toBe('style')
    expect(styleAttr.value.expression.properties[0].key.value).toBe('height')
  })
})

'''
'''--- packages/teleport-plugin-jsx-inline-styles/package.json ---
{
  "name": "@teleporthq/teleport-plugin-jsx-inline-styles",
  "version": "0.29.0",
  "description": "A plugin for injecting the styles as inline styles inside JSX-based components",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@babel/types": "^7.5.5",
    "@teleporthq/teleport-plugin-common": "^0.29.0",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-plugin-jsx-inline-styles/src/index.ts ---
import * as types from '@babel/types'
import { UIDLUtils } from '@teleporthq/teleport-shared'
import { ASTUtils, StyleBuilders } from '@teleporthq/teleport-plugin-common'
import { ComponentPluginFactory, ComponentPlugin } from '@teleporthq/teleport-types'

interface InlineStyleConfig {
  componentChunkName: string
}
export const createInlineStylesPlugin: ComponentPluginFactory<InlineStyleConfig> = (config) => {
  const { componentChunkName = 'jsx-component' } = config || {}

  const inlineStylesPlugin: ComponentPlugin = async (structure) => {
    const { uidl, chunks } = structure
    const componentChunk = chunks.find((chunk) => chunk.name === componentChunkName)

    if (!componentChunk) {
      return structure
    }

    UIDLUtils.traverseElements(uidl.node, (element) => {
      const { style, key } = element

      if (style && Object.keys(style).length > 0) {
        const jsxASTTag = componentChunk.meta.nodesLookup[key] as types.JSXElement
        const propsPrefix = componentChunk.meta.dynamicRefPrefix.prop as string
        if (!jsxASTTag) {
          return
        }

        // Nested styles are ignored
        const inlineStyles = UIDLUtils.transformDynamicStyles(style, (styleValue) =>
          StyleBuilders.createDynamicStyleExpression(styleValue, propsPrefix)
        )

        ASTUtils.addAttributeToJSXTag(jsxASTTag, 'style', inlineStyles)
      }
    })

    return structure
  }
  return inlineStylesPlugin
}

export default createInlineStylesPlugin()

'''
'''--- packages/teleport-plugin-jsx-inline-styles/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-plugin-jsx-next-image/Readme.md ---

'''
'''--- packages/teleport-plugin-jsx-next-image/__tests__/index.ts ---
import { component, elementNode, staticNode } from '@teleporthq/teleport-uidl-builders'
import { createNextImagePlugin } from '../src'
import {
  ChunkDefinition,
  ChunkType,
  FileType,
  ComponentStructure,
} from '@teleporthq/teleport-types'
import * as types from '@babel/types'

describe('plugin-jsx-next-image', () => {
  const plugin = createNextImagePlugin()
  const element = elementNode(
    'img',
    {
      src: staticNode('/playground_assets/image.png'),
      alt: staticNode('Demo Picture'),
    },
    [],
    undefined,
    {
      width: staticNode('100px'),
      height: staticNode('100px'),
    },
    {}
  )
  element.content.key = 'container'

  it(`When a local asset is having only width and height, 
    the jsx-next-image converts it to use Image Component`, async () => {
    const componentChunk: ChunkDefinition = {
      name: 'jsx-component',
      meta: {
        nodesLookup: {
          container: {
            openingElement: {
              name: {
                name: 'img',
              },
              attributes: [],
            },
            closingElement: {
              name: {
                name: 'img',
              },
            },
          },
        },
      },
      type: ChunkType.AST,
      fileType: FileType.JS,
      linkAfter: ['import-local'],
      content: {},
    }
    const structureMock: ComponentStructure = {
      uidl: component('App', element),
      options: {},
      chunks: [componentChunk],
      dependencies: {},
    }

    const { chunks, dependencies } = await plugin(structureMock)
    const nodeChunk = (chunks[0].meta.nodesLookup as Record<string, types.JSXElement>)?.container

    expect(nodeChunk).toBeDefined()
    expect((nodeChunk.openingElement.name as types.JSXIdentifier).name).toBe('Image')
    expect(Object.keys(dependencies).length).toBe(1)
    expect(Object.keys(dependencies).includes('Image')).toBe(true)
  })

  it('Does not convert images with remote souce to use Next Image component', async () => {
    const componentChunk: ChunkDefinition = {
      name: 'jsx-component',
      meta: {
        nodesLookup: {
          container: {
            openingElement: {
              name: {
                name: 'img',
              },
              attributes: [],
            },
            closingElement: {
              name: {
                name: 'img',
              },
            },
          },
        },
      },
      type: ChunkType.AST,
      fileType: FileType.JS,
      linkAfter: ['import-local'],
      content: {},
    }
    element.content.attrs.src.content = `https://via.placeholder.com/150`
    const uidl = component('App', element)
    const structure = {
      uidl,
      options: {},
      chunks: [componentChunk],
      dependencies: {},
    }

    const { chunks, dependencies } = await plugin(structure)
    const nodeChunk = (chunks[0].meta.nodesLookup as Record<string, types.JSXElement>)?.container

    expect(nodeChunk).toBeDefined()
    expect((nodeChunk.openingElement.name as types.JSXIdentifier).name).toBe('img')
    expect(Object.keys(dependencies).length).toBe(0)
    expect(Object.keys(dependencies).includes('Image')).toBe(false)
  })

  it('Does not convert images with different css unit identifiers', async () => {
    const componentChunk: ChunkDefinition = {
      name: 'jsx-component',
      meta: {
        nodesLookup: {
          container: {
            openingElement: {
              name: {
                name: 'img',
              },
              attributes: [],
            },
            closingElement: {
              name: {
                name: 'img',
              },
            },
          },
        },
      },
      type: ChunkType.AST,
      fileType: FileType.JS,
      linkAfter: ['import-local'],
      content: {},
    }
    element.content.attrs.src.content = '/playground_assets/image.png'
    element.content.style.width.content = '100%'
    const uidl = component('App', element)
    const structure = {
      uidl,
      options: {},
      chunks: [componentChunk],
      dependencies: {},
    }

    const { chunks, dependencies } = await plugin(structure)
    const nodeChunk = (chunks[0].meta.nodesLookup as Record<string, types.JSXElement>)?.container

    expect(nodeChunk).toBeDefined()
    expect((nodeChunk.openingElement.name as types.JSXIdentifier).name).toBe('img')
    expect(Object.keys(dependencies).length).toBe(0)
    expect(Object.keys(dependencies).includes('Image')).toBe(false)
  })

  it('Does not convert images with un-matched css units', async () => {
    const componentChunk: ChunkDefinition = {
      name: 'jsx-component',
      meta: {
        nodesLookup: {
          container: {
            openingElement: {
              name: {
                name: 'img',
              },
              attributes: [],
            },
            closingElement: {
              name: {
                name: 'img',
              },
            },
          },
        },
      },
      type: ChunkType.AST,
      fileType: FileType.JS,
      linkAfter: ['import-local'],
      content: {},
    }
    element.content.attrs.src.content = '/playground_assets/image.png'
    element.content.style.width.content = 'auto'
    const uidl = component('App', element)
    const structure = {
      uidl,
      options: {},
      chunks: [componentChunk],
      dependencies: {},
    }

    const { chunks, dependencies } = await plugin(structure)
    const nodeChunk = (chunks[0].meta.nodesLookup as Record<string, types.JSXElement>)?.container

    expect(nodeChunk).toBeDefined()
    expect((nodeChunk.openingElement.name as types.JSXIdentifier).name).toBe('img')
    expect(Object.keys(dependencies).length).toBe(0)
    expect(Object.keys(dependencies).includes('Image')).toBe(false)
  })
})

'''
'''--- packages/teleport-plugin-jsx-next-image/package.json ---
{
  "name": "@teleporthq/teleport-plugin-jsx-next-image",
  "version": "0.29.0",
  "description": "A Next-JS plugin for using next/image for images with local assets and dimensions.",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@babel/types": "^7.5.5",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  }
}

'''
'''--- packages/teleport-plugin-jsx-next-image/src/index.ts ---
import { ComponentPluginFactory, ComponentPlugin, UIDLDependency } from '@teleporthq/teleport-types'
import { UIDLUtils } from '@teleporthq/teleport-shared'
import * as types from '@babel/types'

interface NextImagePluginConfig {
  componentChunkName: string
  localAssetFolder: string
}

/*
  At the moment, the plugin is very restricted wo work only in the following cases.
  - When both the units specified for the img match. 
    Eg - both height and width to have same 'px' identifier

-   When the `img` tag has only width and height specified.
    https://github.com/vercel/next.js/discussions/18312
*/

const CSS_REGEX = /^([+-]?(?:\d+|\d*\.\d+))([a-z]*|%)$/
const NEXT_HEAD_DEPENDENCY: UIDLDependency = {
  type: 'library',
  path: 'next/image',
  version: '10.2.0',
}

export const createNextImagePlugin: ComponentPluginFactory<NextImagePluginConfig> = (config) => {
  const { componentChunkName = 'jsx-component', localAssetFolder = 'playground_assets' } =
    config || {}
  const nextImagePlugin: ComponentPlugin = async (structure) => {
    const { chunks, uidl, dependencies } = structure
    const componentChunk = chunks.find((chunk) => chunk.name === componentChunkName)
    if (!componentChunk) {
      return
    }

    UIDLUtils.traverseElements(uidl.node, (element) => {
      const { elementType, attrs = {}, style = {}, key } = element

      if (key && elementType === 'img' && Object.keys(style).length === 2) {
        const imageSource = attrs?.src?.content.toString()
        if (!imageSource?.startsWith(`/${localAssetFolder}`)) {
          return
        }

        if (!(style.hasOwnProperty('width') && style.hasOwnProperty('height'))) {
          return
        }

        const { height, width } = style
        const heightUnit = String(height.content).match(CSS_REGEX)?.[2]
        const widthUnit = String(width.content).match(CSS_REGEX)?.[2]

        if (heightUnit?.length === 0 || heightUnit !== widthUnit) {
          return
        }

        const jsxTag = (
          componentChunk.meta.nodesLookup as unknown as Record<string, types.JSXElement>
        )[key]

        if (!jsxTag) {
          return
        }

        ;(jsxTag.openingElement.name as types.JSXIdentifier).name = 'Image'
        ;(jsxTag.closingElement.name as types.JSXIdentifier).name = 'Image'
        jsxTag.openingElement.attributes = [
          ...jsxTag.openingElement.attributes,
          types.jsxAttribute(
            types.jsxIdentifier('width'),
            types.jsxExpressionContainer(types.numericLiteral(parseInt(String(width.content), 10)))
          ),
          types.jsxAttribute(
            types.jsxIdentifier('height'),
            types.jsxExpressionContainer(types.numericLiteral(parseInt(String(height.content), 10)))
          ),
        ]

        if (!dependencies.Image) {
          dependencies.Image = NEXT_HEAD_DEPENDENCY
        }
      }
    })

    return structure
  }

  return nextImagePlugin
}

export default createNextImagePlugin()

'''
'''--- packages/teleport-plugin-jsx-next-image/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-plugin-jsx-proptypes/README.md ---
# teleport-plugin-jsx-proptypes

A plugin for generating prop-types according to the component specification.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-plugin-jsx-proptypes
```
or
```bash
yarn add @teleporthq/teleport-plugin-jsx-proptypes
```

'''
'''--- packages/teleport-plugin-jsx-proptypes/__tests__/index.ts ---
import { createPropTypesPlugin } from '../src'
import { component, elementNode } from '@teleporthq/teleport-uidl-builders'
import {
  ComponentStructure,
  ChunkType,
  FileType,
  ChunkDefinition,
} from '@teleporthq/teleport-types'
import type {
  AssignmentExpression,
  ExpressionStatement,
  ObjectExpression,
  ObjectProperty,
} from '@babel/types'

describe('plugin-jsx-proptypes', () => {
  const plugin = createPropTypesPlugin()
  const reactChunk: ChunkDefinition = {
    type: ChunkType.AST,
    fileType: FileType.JS,
    name: 'jsx-component',
    content: {},
    linkAfter: [],
  }
  const exportChunk = {
    type: ChunkType.AST,
    fileType: FileType.JS,
    name: 'export',
    content: {},
    linkAfter: ['jsx-component'],
  }

  it('Should throw error when the chunk is supplied', async () => {
    const uidlSample = component('SimpleComponent', elementNode('container'))
    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {},
      chunks: [],
      dependencies: {},
    }
    try {
      await plugin(structure)
    } catch (e) {
      expect(e.message).toContain('JSX component chunk with name')
    }
  })

  it('Should generate chunks, defaultProps and propTypes', async () => {
    const props = {
      test: {
        type: 'boolean',
        defualtValue: 'true',
      },
      name: {
        type: 'string',
        defaultValue: 'Teleport',
      },
    }

    const uidlSample = component('SimpleComponent', elementNode('container'), props)
    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {},
      chunks: [reactChunk, exportChunk],
      dependencies: {},
    }
    const result = await plugin(structure)

    const defaultProps = result.chunks.filter((chunk) => chunk.name === 'component-default-props')
    const propTypes = result.chunks.filter((chunk) => chunk.name === 'component-types-of-props')

    expect(defaultProps.length).toEqual(1)
    expect(defaultProps[0].type).toBe(ChunkType.AST)
    expect(propTypes.length).toEqual(1)
    expect(propTypes[0].type).toBe(ChunkType.AST)
  })

  it('Should not generate defaultProps', async () => {
    const props = {
      test: {
        type: 'boolean',
      },
      name: {
        type: 'string',
      },
    }

    const uidlSample = component('SimpleComponent', elementNode('container'), props)
    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {},
      chunks: [reactChunk, exportChunk],
      dependencies: {},
    }
    const result = await plugin(structure)

    const defaultProps = result.chunks.filter((chunk) => chunk.name === 'component-default-props')
    const propTypes = result.chunks.filter((chunk) => chunk.name === 'component-types-of-props')

    expect(defaultProps.length).toEqual(0)
    expect(propTypes.length).toEqual(1)
    expect(propTypes[0].type).toBe(ChunkType.AST)
  })

  it('Should generate chunks after specifying required to props', async () => {
    const props = {
      test: {
        type: 'boolean',
        isRequired: true,
      },
      name: {
        type: 'string',
        isRequired: true,
      },
    }

    const uidlSample = component('SimpleComponent', elementNode('container'), props)
    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {},
      chunks: [reactChunk, exportChunk],
      dependencies: {},
    }
    const result = await plugin(structure)

    const defaultProps = result.chunks.filter((chunk) => chunk.name === 'component-default-props')
    const propTypes = result.chunks.filter((chunk) => chunk.name === 'component-types-of-props')

    expect(defaultProps.length).toEqual(0)
    expect(propTypes.length).toEqual(1)
    expect(propTypes[0].type).toBe(ChunkType.AST)
  })

  it('creates default void function for props with type as func', async () => {
    const structure: ComponentStructure = {
      chunks: [reactChunk, exportChunk],
      options: {},
      uidl: component(
        'Test',
        elementNode(
          'container',
          null,
          [],
          null,
          {},
          { click: [{ type: 'propCall', calls: 'onChange' }] }
        ),
        {
          onChange: {
            type: 'func',
            defaultValue: '() => {}',
          },
        }
      ),
      dependencies: {},
    }
    const { chunks } = await plugin(structure)
    const defaultPropsChunk = chunks.find((chunk) => chunk.name === 'component-default-props')
    const statement = defaultPropsChunk.content as ExpressionStatement
    const rightProperties = (statement.expression as AssignmentExpression).right as ObjectExpression

    expect(statement).toBeDefined()
    expect((rightProperties.properties[0] as ObjectProperty).value.type).toBe(
      'ArrowFunctionExpression'
    )
  })
})

'''
'''--- packages/teleport-plugin-jsx-proptypes/package.json ---
{
  "name": "@teleporthq/teleport-plugin-jsx-proptypes",
  "version": "0.29.0",
  "description": "A plugin for generating prop-types according to the component specification",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@babel/types": "^7.5.5",
    "@teleporthq/teleport-plugin-common": "^0.29.0",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-plugin-jsx-proptypes/src/index.ts ---
import { buildDefaultPropsAst, buildTypesOfPropsAst } from './utils'
import {
  ComponentPluginFactory,
  ComponentPlugin,
  ChunkType,
  FileType,
} from '@teleporthq/teleport-types'
import { UIDLUtils } from '@teleporthq/teleport-shared'

interface PropTypesConfig {
  componentChunkName?: string
  defaultPropsChunkName?: string
  typesOfPropsChunkName?: string
  exportComponentName?: string
}

export const createPropTypesPlugin: ComponentPluginFactory<PropTypesConfig> = (config) => {
  const {
    componentChunkName = 'jsx-component',
    defaultPropsChunkName = 'component-default-props',
    typesOfPropsChunkName = 'component-types-of-props',
    exportComponentName = 'export',
  } = config || {}

  const propTypesPlugin: ComponentPlugin = async (structure) => {
    const { uidl, chunks, dependencies } = structure

    const componentClassName = UIDLUtils.getComponentClassName(uidl)
    const componentChunk = chunks.find((chunk) => chunk.name === componentChunkName)
    const exportChunk = chunks.find((chunk) => chunk.name === exportComponentName)

    if (!componentChunk) {
      throw new Error(
        `JSX component chunk with name ${componentChunkName} was required and not found.`
      )
    }

    if (!uidl.propDefinitions) {
      return structure
    }

    // TODO used the name from the mappings of the component, not from the UIDL
    const hasDefaultProps = Object.keys(uidl.propDefinitions).some(
      (prop) => typeof uidl.propDefinitions[prop].defaultValue !== 'undefined'
    )

    const typesOfPropsAst = buildTypesOfPropsAst(
      componentClassName,
      'PropTypes',
      uidl.propDefinitions
    )

    if (!hasDefaultProps && !typesOfPropsAst) {
      return structure
    }

    dependencies.PropTypes = {
      type: 'package',
      path: 'prop-types',
      version: '15.7.2',
    }

    if (hasDefaultProps) {
      const defaultPropsAst = buildDefaultPropsAst(componentClassName, uidl.propDefinitions)
      chunks.push({
        type: ChunkType.AST,
        fileType: FileType.JS,
        name: defaultPropsChunkName,
        linkAfter: [componentChunkName],
        content: defaultPropsAst,
      })
      exportChunk.linkAfter.push(defaultPropsChunkName)
    }

    chunks.push({
      type: ChunkType.AST,
      fileType: FileType.JS,
      name: typesOfPropsChunkName,
      linkAfter: [componentChunkName],
      content: typesOfPropsAst,
    })

    // push export of component after declarations of types
    exportChunk.linkAfter.push(typesOfPropsChunkName)

    return structure
  }

  return propTypesPlugin
}

export default createPropTypesPlugin()

'''
'''--- packages/teleport-plugin-jsx-proptypes/src/utils.ts ---
import * as types from '@babel/types'
import { ASTUtils, ParsedASTNode } from '@teleporthq/teleport-plugin-common'
import { UIDLPropDefinition } from '@teleporthq/teleport-types'

export const buildDefaultPropsAst = (
  componentName: string,
  propDefinitions: Record<string, UIDLPropDefinition>,
  t = types
) => {
  if (!propDefinitions) {
    return null
  }

  const defaultValuesSearch = Object.keys(propDefinitions).reduce(
    // tslint:disable-next-line no-any
    (acc: any, key) => {
      const { defaultValue, type } = propDefinitions[key]

      if (type === 'func') {
        acc.values[key] = new ParsedASTNode(
          types.arrowFunctionExpression([], types.blockStatement([]))
        )
        acc.count++
        return acc
      }

      if (typeof defaultValue !== 'undefined') {
        acc.values[key] = defaultValue
        acc.count++
      }
      return acc
    },
    { values: {}, count: 0 }
  )

  if (defaultValuesSearch.count === 0) {
    return null
  }

  const memberExpression = t.memberExpression(
    t.identifier(componentName),
    t.identifier('defaultProps')
  )

  const memberExpressionValue = ASTUtils.objectToObjectExpression(defaultValuesSearch.values)

  const assignmentExpression = t.assignmentExpression('=', memberExpression, memberExpressionValue)

  return t.expressionStatement(assignmentExpression)
}

export const buildTypesOfPropsAst = (
  componentName: string,
  propTypesNames: string,
  propDefinitions: Record<string, UIDLPropDefinition>,
  t = types
) => {
  if (!propDefinitions) {
    return null
  }

  const defaultValuesSearch = Object.keys(propDefinitions).reduce(
    // tslint:disable-next-line no-any
    (acc: any, key) => {
      const { type, isRequired } = propDefinitions[key]
      const astProp = t.memberExpression(t.identifier(propTypesNames), t.identifier(type))
      const astValue = isRequired
        ? t.memberExpression(astProp, t.identifier('isRequired'))
        : astProp
      acc.values[key] = new ParsedASTNode(astValue)
      acc.count++
      return acc
    },
    { values: {}, count: 0 }
  )

  if (defaultValuesSearch.count === 0) {
    return null
  }

  const memberExpression = t.memberExpression(
    t.identifier(componentName),
    t.identifier('propTypes')
  )

  const memberExpressionValue = ASTUtils.objectToObjectExpression(defaultValuesSearch.values)

  const assignmentExpression = t.assignmentExpression('=', memberExpression, memberExpressionValue)

  return t.expressionStatement(assignmentExpression)
}

'''
'''--- packages/teleport-plugin-jsx-proptypes/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-plugin-react-app-routing/README.md ---
# teleport-plugin-react-app-routing

A plugin for handling the routing file of a React project.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-plugin-react-app-routing
```
or
```bash
yarn add @teleporthq/teleport-plugin-react-app-routing
```

'''
'''--- packages/teleport-plugin-react-app-routing/__tests__/index.ts ---
import { createReactAppRoutingPlugin } from '../src/index'
import {
  component,
  elementNode,
  conditionalNode,
  dynamicNode,
  definition,
} from '@teleporthq/teleport-uidl-builders'
import { ChunkType, ComponentStructure, UIDLStateDefinition } from '@teleporthq/teleport-types'

describe('plugin-react-app-routing', () => {
  const plugin = createReactAppRoutingPlugin({
    componentChunkName: 'app-routing-chunk',
    domRenderChunkName: 'dom-render-chunk',
  })

  it('outputs two AST chunks with the corresponding chunk names', async () => {
    const routeDefinition: UIDLStateDefinition = definition('string', 'home')
    routeDefinition.values = [
      { value: 'home', pageOptions: { fileName: 'home', componentName: 'Home', navLink: '/' } },
      {
        value: 'about',
        pageOptions: { fileName: 'about', componentName: 'About', navLink: '/about' },
      },
      {
        value: 'contact',
        pageOptions: { fileName: 'contact', componentName: 'Contact', navLink: '/contact' },
      },
    ]

    const structure: ComponentStructure = {
      chunks: [],
      options: {},
      uidl: component(
        'Test',
        elementNode('Router', {}, [
          conditionalNode(dynamicNode('state', 'route'), elementNode('container'), 'home'),
          conditionalNode(dynamicNode('state', 'route'), elementNode('container'), 'about'),
          conditionalNode(dynamicNode('state', 'route'), elementNode('container'), 'contact'),
        ]),
        {},
        {
          route: routeDefinition,
        }
      ),
      dependencies: {},
    }
    const result = await plugin(structure)

    // no change to the input UIDL
    expect(JSON.stringify(result.uidl)).toBe(JSON.stringify(structure.uidl))

    // AST chunks created
    expect(result.chunks.length).toBe(2)
    expect(result.chunks[0].type).toBe(ChunkType.AST)
    expect(result.chunks[0].content).toBeDefined()
    expect(result.chunks[0].name).toBe('app-routing-chunk')
    expect(result.chunks[1].type).toBe(ChunkType.AST)
    expect(result.chunks[1].content).toBeDefined()
    expect(result.chunks[1].name).toBe('dom-render-chunk')

    // Dependencies
    expect(result.dependencies.React).toBeDefined()
    expect(result.dependencies.ReactDOM).toBeDefined()
    expect(result.dependencies.Router).toBeDefined()
    expect(result.dependencies.Route).toBeDefined()
  })
})

'''
'''--- packages/teleport-plugin-react-app-routing/package.json ---
{
  "name": "@teleporthq/teleport-plugin-react-app-routing",
  "version": "0.29.2",
  "description": "A plugin for handling the routing file of a React project",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@babel/types": "^7.5.5",
    "@teleporthq/teleport-plugin-common": "^0.29.0",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-plugin-react-app-routing/src/index.ts ---
import { UIDLUtils } from '@teleporthq/teleport-shared'
import { ASTBuilders } from '@teleporthq/teleport-plugin-common'
import { registerReactRouterDeps, constructRouteJSX, createRouteRouterTag } from './utils'
import {
  ComponentPluginFactory,
  ComponentPlugin,
  ChunkType,
  FileType,
  UIDLPageOptions,
  UIDLRootComponent,
  UIDLRouteDefinitions,
} from '@teleporthq/teleport-types'
import { join } from 'path'

interface AppRoutingComponentConfig {
  componentChunkName: string
  domRenderChunkName: string
  importChunkName: string
}

export const createReactAppRoutingPlugin: ComponentPluginFactory<AppRoutingComponentConfig> = (
  config
) => {
  const {
    importChunkName = 'import-local',
    componentChunkName = 'app-router-component',
    domRenderChunkName = 'app-router-export',
  } = config || {}

  const reactAppRoutingPlugin: ComponentPlugin = async (structure) => {
    const { uidl, dependencies, options } = structure

    if (!uidl?.stateDefinitions?.route) {
      return structure
    }

    registerReactRouterDeps(dependencies)

    const { stateDefinitions = {} } = uidl

    const routes = UIDLUtils.extractRoutes(uidl as UIDLRootComponent)
    const strategy = options.strategy
    const pageDependencyPrefix = options.localDependenciesPrefix || './'

    const routeJSXDefinitions = routes.map((conditionalNode) => {
      const { value: routeKey } = conditionalNode.content
      const routeValues = (stateDefinitions.route as UIDLRouteDefinitions).values || []
      const routeDefinition = routeValues.find((route) => route.value === routeKey)
      const defaultOptions: UIDLPageOptions = {}
      const { fileName, componentName, navLink, fallback } =
        routeDefinition.pageOptions || defaultOptions

      /* If pages are exported in their own folder and in custom file names.
         Import statements must then be:

         import Home from '../pages/home/component'

         so the `/component` suffix is computed below.
      */
      const pageStrategyOptions = (strategy && strategy.pages.options) || {}
      const pageComponentSuffix = pageStrategyOptions.createFolderForEachComponent ? '/index' : ''

      /*
        Now, navLink is being used to create a folder strucutre.
        So, it is important to append the same when generating the path
      */

      dependencies[componentName] = {
        type: 'local',
        path: `${pageDependencyPrefix}${join(
          ...navLink.split('/')?.slice(0, -1),
          fileName,
          pageComponentSuffix
        )}`,
      }

      return constructRouteJSX(componentName, navLink, fallback)
    })

    const rootRouterTag = createRouteRouterTag(routeJSXDefinitions)

    const pureComponent = ASTBuilders.createFunctionalComponent(uidl.name, rootRouterTag)

    structure.chunks.push({
      type: ChunkType.AST,
      fileType: FileType.JS,
      name: componentChunkName,
      content: pureComponent,
      linkAfter: [importChunkName],
    })

    // @ts-ignore
    const reactDomBind = ASTBuilders.createFunctionCall('ReactDOM.render', [
      ASTBuilders.createSelfClosingJSXTag(uidl.name),
      // @ts-ignore
      ASTBuilders.createFunctionCall('document.getElementById', ['app']),
    ])

    structure.chunks.push({
      type: ChunkType.AST,
      fileType: FileType.JS,
      name: domRenderChunkName,
      content: reactDomBind,
      linkAfter: [componentChunkName],
    })

    return structure
  }

  return reactAppRoutingPlugin
}

export default createReactAppRoutingPlugin()

'''
'''--- packages/teleport-plugin-react-app-routing/src/utils.ts ---
import * as types from '@babel/types'
import { UIDLDependency } from '@teleporthq/teleport-types'
import { ASTBuilders, ASTUtils } from '@teleporthq/teleport-plugin-common'

export const createRouteRouterTag = (routeJSXDefinitions: types.JSXElement[]) => {
  const routerTag = ASTBuilders.createJSXTag('Router')

  const divContainer = ASTBuilders.createJSXTag('div')
  ASTUtils.addChildJSXTag(routerTag, divContainer)
  routeJSXDefinitions.forEach((route) => ASTUtils.addChildJSXTag(divContainer, route))

  return routerTag
}

export const constructRouteJSX = (componentName: string, path: string, fallback?: boolean) => {
  let JSXRoutePrefix: string
  let route: types.JSXElement

  JSXRoutePrefix = 'Route'
  route = ASTBuilders.createSelfClosingJSXTag(JSXRoutePrefix)
  ASTUtils.addDynamicAttributeToJSXTag(route, 'component', componentName)
  if (!fallback) {
    ASTUtils.addAttributeToJSXTag(route, 'exact')
  }
  ASTUtils.addAttributeToJSXTag(route, 'path', path)

  return route
}

export const registerReactRouterDeps = (dependencies: Record<string, UIDLDependency>): void => {
  dependencies.React = {
    type: 'library',
    path: 'react',
    version: '16.8.3',
  }

  dependencies.ReactDOM = {
    type: 'library',
    path: 'react-dom',
    version: '16.8.3',
  }

  dependencies.Router = {
    type: 'library',
    path: 'react-router-dom',
    version: '^5.2.0',
    meta: {
      namedImport: true,
      originalName: 'BrowserRouter',
    },
  }

  dependencies.Route = {
    type: 'library',
    path: 'react-router-dom',
    version: '^5.2.0',
    meta: {
      namedImport: true,
    },
  }
}

'''
'''--- packages/teleport-plugin-react-app-routing/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-plugin-react-base-component/README.md ---
# teleport-plugin-react-base-component

A plugin for handling the skeleton/baseline of a React component.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-plugin-react-base-component
```
or
```bash
yarn add @teleporthq/teleport-plugin-react-base-component
```

'''
'''--- packages/teleport-plugin-react-base-component/__tests__/index.ts ---
import { createReactComponentPlugin } from '../src/index'
import { component, elementNode } from '@teleporthq/teleport-uidl-builders'
import { ComponentStructure, ChunkType, FileType } from '@teleporthq/teleport-types'

describe('plugin-react-base-component', () => {
  const plugin = createReactComponentPlugin({
    componentChunkName: 'component-chunk',
    exportChunkName: 'export-chunk',
  })

  it('outputs two AST chunks with the corresponding chunk names', async () => {
    const structure: ComponentStructure = {
      chunks: [],
      options: {},
      uidl: component('Test', elementNode('container')),
      dependencies: {},
    }
    const result = await plugin(structure)

    // no change to the input UIDL
    expect(JSON.stringify(result.uidl)).toBe(JSON.stringify(structure.uidl))

    // AST chunks created
    expect(result.chunks.length).toBe(2)
    expect(result.chunks[0].type).toBe(ChunkType.AST)
    expect(result.chunks[0].content).toBeDefined()
    expect(result.chunks[0].name).toBe('component-chunk')
    expect(result.chunks[1].type).toBe(ChunkType.AST)
    expect(result.chunks[1].content).toBeDefined()
    expect(result.chunks[1].name).toBe('export-chunk')

    // Dependencies
    expect(result.dependencies.React).toBeDefined()
    expect(result.dependencies.useState).toBeUndefined()
  })

  it('adds state hooks when state definitions exist', async () => {
    const structure: ComponentStructure = {
      chunks: [],
      options: {},
      uidl: component(
        'Test',
        elementNode('container'),
        {},
        {
          isVisible: {
            type: 'boolean',
            defaultValue: false,
          },
        }
      ),
      dependencies: {},
    }
    const result = await plugin(structure)

    // AST chunks created
    expect(result.chunks.length).toBe(2)
    expect(result.chunks[0].type).toBe(ChunkType.AST)
    expect(result.chunks[0].content).toBeDefined()
    expect(result.chunks[0].name).toBe('component-chunk')
    expect(result.chunks[1].type).toBe(ChunkType.AST)
    expect(result.chunks[1].content).toBeDefined()
    expect(result.chunks[1].name).toBe('export-chunk')

    // Dependencies
    expect(result.dependencies.React).toBeDefined()
    expect(result.dependencies.useState).toBeDefined()
  })

  it('add DOM injection node to the jsx', async () => {
    const structure: ComponentStructure = {
      chunks: [],
      options: {},
      uidl: component('<h1>Heading</h2>', elementNode('raw')),
      dependencies: {},
    }
    const result = await plugin(structure)

    expect(result.chunks.length).toBe(2)
    expect(result.chunks[1].type).toBe(ChunkType.AST)
    expect(result.chunks[0].fileType).toBe(FileType.JS)
    expect(result.chunks[0].name).toBe('component-chunk')
    expect(result.chunks[0].content).toBeDefined()
  })
})

'''
'''--- packages/teleport-plugin-react-base-component/package.json ---
{
  "name": "@teleporthq/teleport-plugin-react-base-component",
  "version": "0.29.0",
  "description": "A plugin for handling the skeleton/baseline of a React component",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@babel/types": "^7.5.5",
    "@teleporthq/teleport-plugin-common": "^0.29.0",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-plugin-react-base-component/src/constants.ts ---
import { UIDLDependency } from '@teleporthq/teleport-types'

export const REACT_LIBRARY_DEPENDENCY: UIDLDependency = {
  type: 'library',
  path: 'react',
  version: '16.8.3',
}

export const USE_STATE_DEPENDENCY: UIDLDependency = {
  type: 'library',
  path: 'react',
  version: '16.8.3',
  meta: {
    namedImport: true,
  },
}

export const DEFAULT_COMPONENT_CHUNK_NAME = 'jsx-component'

export const DEFAULT_EXPORT_CHUNK_NAME = 'export'

export const DEFAULT_IMPORT_CHUNK_NAME = 'import-local'

'''
'''--- packages/teleport-plugin-react-base-component/src/index.ts ---
import { createDOMInjectionNode } from './utils'
import { UIDLUtils } from '@teleporthq/teleport-shared'
import {
  createJSXSyntax,
  JSXGenerationOptions,
  ASTBuilders,
  ASTUtils,
} from '@teleporthq/teleport-plugin-common'

import {
  ComponentPluginFactory,
  ComponentPlugin,
  ChunkType,
  FileType,
} from '@teleporthq/teleport-types'
import * as types from '@babel/types'

import {
  DEFAULT_COMPONENT_CHUNK_NAME,
  DEFAULT_EXPORT_CHUNK_NAME,
  DEFAULT_IMPORT_CHUNK_NAME,
  REACT_LIBRARY_DEPENDENCY,
  USE_STATE_DEPENDENCY,
} from './constants'

interface ReactPluginConfig {
  componentChunkName: string
  exportChunkName: string
  importChunkName: string
}

export const createReactComponentPlugin: ComponentPluginFactory<ReactPluginConfig> = (config) => {
  const {
    componentChunkName = DEFAULT_COMPONENT_CHUNK_NAME,
    exportChunkName = DEFAULT_EXPORT_CHUNK_NAME,
    importChunkName = DEFAULT_IMPORT_CHUNK_NAME,
  } = config || {}

  const reactComponentPlugin: ComponentPlugin = async (structure) => {
    const { uidl, dependencies } = structure
    const { stateDefinitions = {}, propDefinitions = {} } = uidl

    dependencies.React = REACT_LIBRARY_DEPENDENCY

    if (Object.keys(stateDefinitions).length > 0) {
      dependencies.useState = USE_STATE_DEPENDENCY
    }

    // We will keep a flat mapping object from each component identifier (from the UIDL) to its correspoding JSX AST Tag
    // This will help us inject style or classes at a later stage in the pipeline, upon traversing the UIDL
    // The structure will be populated as the AST is being created
    const nodesLookup = {}
    const windowImports: Record<string, types.ExpressionStatement> = {}
    const jsxParams = {
      propDefinitions,
      stateDefinitions,
      nodesLookup,
      dependencies,
      windowImports,
    }

    const jsxOptions: JSXGenerationOptions = {
      dynamicReferencePrefixMap: {
        prop: 'props',
        state: '',
        local: '',
      },
      dependencyHandling: 'import',
      stateHandling: 'hooks',
      slotHandling: 'props',
      domHTMLInjection: (content: string) => createDOMInjectionNode(content),
    }

    const jsxTagStructure = createJSXSyntax(uidl.node, jsxParams, jsxOptions)

    const componentName = UIDLUtils.getComponentClassName(uidl)
    const pureComponent = ASTUtils.createPureComponent(
      componentName,
      stateDefinitions,
      jsxTagStructure,
      windowImports
    )

    if (Object.keys(windowImports).length) {
      dependencies.useEffect = USE_STATE_DEPENDENCY
    }

    structure.chunks.push({
      type: ChunkType.AST,
      fileType: FileType.JS,
      name: componentChunkName,
      meta: {
        nodesLookup,
        dynamicRefPrefix: jsxOptions.dynamicReferencePrefixMap,
      },
      content: pureComponent,
      linkAfter: [importChunkName],
    })

    structure.chunks.push({
      type: ChunkType.AST,
      fileType: FileType.JS,
      name: exportChunkName,
      content: ASTBuilders.createDefaultExport(componentName),
      linkAfter: [componentChunkName],
    })

    return structure
  }

  return reactComponentPlugin
}

export default createReactComponentPlugin()

'''
'''--- packages/teleport-plugin-react-base-component/src/utils.ts ---
import * as types from '@babel/types'

export const createDOMInjectionNode = (content: string) => {
  return types.jsxElement(
    types.jsxOpeningElement(
      types.jsxIdentifier('span'),
      [
        types.jsxAttribute(
          types.jsxIdentifier('dangerouslySetInnerHTML'),
          types.jsxExpressionContainer(
            types.objectExpression([
              types.objectProperty(types.identifier('__html'), types.stringLiteral(content)),
            ])
          )
        ),
      ],
      true
    ),
    null,
    [],
    true
  )
}

'''
'''--- packages/teleport-plugin-react-base-component/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-plugin-react-jss/README.md ---
# teleport-plugin-react-jss

A plugin for injecting the styles with JSS inside React components.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-plugin-react-jss
```
or
```bash
yarn add @teleporthq/teleport-plugin-react-jss
```

'''
'''--- packages/teleport-plugin-react-jss/__tests__/component-referenced.ts ---
import { createReactJSSPlugin } from '../src'
import { staticNode, elementNode, component } from '@teleporthq/teleport-uidl-builders'
import { ComponentStructure } from '@teleporthq/teleport-types'
import { createComponentChunk } from './mocks'

describe('Component Scoped Styles', () => {
  const uidl = component('MYComponent', elementNode('container', {}, [], null, {}), {}, {})
  uidl.styleSetDefinitions = {
    'primary-navbar': {
      type: 'reusable-component-style-map',
      content: {
        width: staticNode('100px'),
        height: staticNode('200px'),
      },
    },
    secondaryNavbar: {
      type: 'reusable-component-style-map',
      content: {
        height: staticNode('50px'),
        width: staticNode('50px'),
      },
    },
  }

  it('Generates component-scoped style sheet', async () => {
    const plugin = createReactJSSPlugin()
    const structure: ComponentStructure = {
      uidl,
      chunks: [createComponentChunk()],
      dependencies: {},
      options: {},
    }
    const { chunks } = await plugin(structure)
    const styleChunk = chunks.find((chunk) => chunk.name === 'jss-style-definition')
    const expression = styleChunk.content.declarations[0].init
    const properties = expression.arguments[0].properties

    expect(styleChunk).toBeDefined()
    expect(expression.callee.name).toBe('createUseStyles')
    expect(properties.length).toBe(2)
    expect(properties[0].key.value).toBe('primaryNavbar')
    expect(properties[1].key.value).toBe('secondaryNavbar')
  })

  it(`Generates Component-scoped style sheet and adds to the node`, async () => {
    const plugin = createReactJSSPlugin()
    uidl.node.content.referencedStyles = {
      '12345678': {
        type: 'style-map',
        content: {
          mapType: 'component-referenced',
          content: staticNode('md-8'),
        },
      },
      '1415161718': {
        type: 'style-map',
        content: {
          mapType: 'component-referenced',
          content: {
            type: 'dynamic',
            content: {
              referenceType: 'prop',
              id: 'variant',
            },
          },
        },
      },
    }
    const structure: ComponentStructure = {
      uidl,
      chunks: [createComponentChunk()],
      dependencies: {},
      options: {},
    }

    const { chunks } = await plugin(structure)
    const jsxComp = chunks.find((chunk) => chunk.name === 'jsx-component')
    const attrs = jsxComp.meta.nodesLookup.container.openingElement.attributes[0]
    const attrExpressions = attrs.value.expression.expressions

    expect(attrs.value.expression.quasis.length).toBe(3)
    expect(attrExpressions.length).toBe(2)
    expect(attrExpressions[0].property.name).toBe("'md-8'")
    expect(attrExpressions[1].object.name).toBe('classes')
    expect(attrExpressions[1].property.object.name).toBe('props')
    expect(attrExpressions[1].property.property.name).toBe('variant')
  })
})

'''
'''--- packages/teleport-plugin-react-jss/__tests__/index.ts ---
import { component, elementNode, staticNode } from '@teleporthq/teleport-uidl-builders'
import { ComponentStructure, ChunkType } from '@teleporthq/teleport-types'
import { createReactJSSPlugin } from '../src/index'
import { createComponentChunk } from './mocks'

describe('plugin-react-jss', () => {
  const plugin = createReactJSSPlugin({
    styleChunkName: 'jss-chunk',
  })
  const componentChunk = createComponentChunk()

  it('generates no chunk if no styles exist', async () => {
    const uidlSample = component('JSS', elementNode('container'))
    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {},
      chunks: [componentChunk],
      dependencies: {},
    }

    const { chunks } = await plugin(structure)

    expect(chunks.length).toBe(1)
  })

  it('Should add react-jss as dependency', async () => {
    const style = {
      height: staticNode('100px'),
    }
    const element = elementNode(
      'container',
      {},
      [],
      { type: 'package' as const, version: '10.4.0', path: 'react-jss' },
      style
    )
    element.content.key = 'container'
    const uidlSample = component('JSS', element)
    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {},
      chunks: [componentChunk],
      dependencies: {},
    }

    const { dependencies, chunks } = await plugin(structure)
    const { createUseStyles } = dependencies

    expect(Object.keys(dependencies).length).toBeGreaterThan(0)
    expect(createUseStyles.type).toBe('package')
    expect(createUseStyles.path).toBe('react-jss')

    expect(chunks.length).toBe(2)
    expect(chunks[1].type).toBe(ChunkType.AST)
    expect(chunks[1].name).toBe('jss-chunk')
  })
})

'''
'''--- packages/teleport-plugin-react-jss/__tests__/mocks.ts ---
import { ChunkDefinition, FileType, ChunkType } from '@teleporthq/teleport-types'

export const createComponentChunk = (): ChunkDefinition => ({
  name: 'jsx-component',
  meta: {
    nodesLookup: {
      container: {
        openingElement: {
          name: {
            name: '',
          },
          attributes: [],
        },
      },
    },
    dynamicRefPrefix: {
      prop: 'props',
    },
  },
  type: ChunkType.AST,
  fileType: FileType.JS,
  linkAfter: ['import-local'],
  content: {
    declarations: [
      {
        init: {
          params: [],
          body: {
            body: [],
          },
        },
      },
    ],
  },
})

'''
'''--- packages/teleport-plugin-react-jss/__tests__/referenced-styles.ts ---
import { ComponentStructure, UIDLStyleSetDefinition } from '@teleporthq/teleport-types'
import { createReactJSSPlugin } from '../src'
import { component, elementNode, staticNode } from '@teleporthq/teleport-uidl-builders'
import { createComponentChunk } from './mocks'

describe('Referenced Styles on Node', () => {
  const componentChunk = createComponentChunk()
  const uidl = component('MyComponent', elementNode('container', null, [], null, null, null, null))

  it('Media and pseudo styles are generated from referencedStyles', async () => {
    const plugin = createReactJSSPlugin()
    uidl.node.content.referencedStyles = {
      '5ed659b1732f9b804f7b6381': {
        type: 'style-map',
        content: {
          mapType: 'inlined',
          conditions: [{ conditionType: 'screen-size', maxWidth: 991 }],
          styles: {
            display: staticNode('none'),
          },
        },
      },
      '5ed659b1732f9b804f7b6382': {
        type: 'style-map',
        content: {
          mapType: 'inlined',
          conditions: [{ conditionType: 'element-state', content: 'hover' }],
          styles: {
            display: staticNode('block'),
          },
        },
      },
    }
    uidl.node.content.key = 'container'

    const structure: ComponentStructure = {
      uidl,
      chunks: [componentChunk],
      dependencies: {},
      options: {},
    }
    const result = await plugin(structure)
    const { chunks, dependencies } = result

    expect(chunks.length).toBe(2)
    expect(Object.keys(dependencies).length).toBe(1)
    expect(dependencies.createUseStyles.path).toBe('react-jss')
  })

  it('References a style from project and adds, Media and pseudo from referencedStyles', async () => {
    const plugin = createReactJSSPlugin()
    uidl.node.content.referencedStyles = {
      '5ed659b1732f9b804f7b6381': {
        type: 'style-map',
        content: {
          mapType: 'inlined',
          conditions: [{ conditionType: 'screen-size', maxWidth: 991 }],
          styles: {
            display: staticNode('none'),
          },
        },
      },
      '5ed659b1732f9b804f7b6382': {
        type: 'style-map',
        content: {
          mapType: 'inlined',
          conditions: [{ conditionType: 'element-state', content: 'hover' }],
          styles: {
            display: staticNode('block'),
          },
        },
      },
      '5ed659b1732f9b804f7b6384': {
        type: 'style-map',
        content: {
          mapType: 'project-referenced',
          referenceId: 'primaryButton',
        },
      },
    }
    uidl.node.content.key = 'container'

    const structure: ComponentStructure = {
      uidl,
      chunks: [componentChunk],
      dependencies: {},
      options: {},
    }

    const styleSetDefinitions: Record<string, UIDLStyleSetDefinition> = {
      primaryButton: {
        type: 'reusable-project-style-map' as const,
        content: {
          background: staticNode('blue'),
          color: staticNode('red'),
        },
      },
    }

    structure.options.projectStyleSet = {
      styleSetDefinitions,
      fileName: 'style',
      path: '../',
    }

    const result = await plugin(structure)
    const { chunks, dependencies } = result

    expect(chunks.length).toBe(2)
    expect(Object.keys(dependencies).length).toBe(2)
    expect(dependencies.createUseStyles.path).toBe('react-jss')
    expect(dependencies.useProjectStyles.path).toBe('../style')
    expect(dependencies.useProjectStyles.meta.namedImport).toBe(true)
  })
})

'''
'''--- packages/teleport-plugin-react-jss/__tests__/style-sheet.ts ---
import {
  ComponentStructure,
  UIDLStyleSetDefinition,
  UIDLDesignTokens,
} from '@teleporthq/teleport-types'
import { createStyleSheetPlugin } from '../src'
import { component, elementNode, staticNode } from '@teleporthq/teleport-uidl-builders'
import { createComponentChunk } from './mocks'

describe('Style Sheet from react-jss', () => {
  const componentChunk = createComponentChunk()

  it('Generates a style sheet from the give JSON of styleSet', async () => {
    const plugin = createStyleSheetPlugin()
    const uidl = component('MyComponent', elementNode('container'))
    const tokens: UIDLDesignTokens = {
      'blue-500': {
        type: 'static',
        content: '#9999ff',
      },
      'blue-600': {
        type: 'static',
        content: '#6b7db3',
      },
      'red-500': {
        type: 'static',
        content: '#ff9999',
      },
    }
    const structure: ComponentStructure = {
      uidl,
      chunks: [componentChunk],
      options: {},
      dependencies: {},
    }
    const styleSetDefinitions: Record<string, UIDLStyleSetDefinition> = {
      primaryButton: {
        type: 'reusable-project-style-map',
        content: {
          background: staticNode('blue'),
          color: staticNode('red'),
        },
      },
      secondaryButton: {
        type: 'reusable-project-style-map',
        content: {
          background: staticNode('red'),
          color: staticNode('blue'),
        },
      },
      conditionalButton: {
        type: 'reusable-project-style-map',
        conditions: [
          {
            type: 'screen-size',
            meta: { maxWidth: 991 },
            content: {
              backgrouns: staticNode('purple'),
            },
          },
          {
            type: 'element-state',
            meta: { state: 'hover' },
            content: {
              background: staticNode('yellow'),
            },
          },
        ],
        content: {
          background: staticNode('red'),
          color: staticNode('blue'),
        },
      },
    }

    structure.uidl = {
      ...structure.uidl,
      styleSetDefinitions,
      designLanguage: {
        tokens,
      },
    }

    const result = await plugin(structure)
    const { chunks, dependencies } = result

    expect(chunks.length).toBe(3)
    expect(dependencies.createUseStyles.path).toBe('react-jss')
  })

  it('Changes the name of output file, with the name is passed', async () => {
    const plugin = createStyleSheetPlugin({ fileName: 'index' })
    const uidl = component('MyComponent', elementNode('container'))
    const structure: ComponentStructure = {
      uidl,
      chunks: [componentChunk],
      options: {},
      dependencies: {},
    }
    structure.uidl.styleSetDefinitions = {
      primaryButton: {
        type: 'reusable-project-style-map',
        content: {
          background: staticNode('blue'),
          color: staticNode('red'),
        },
      },
      secondaryButton: {
        type: 'reusable-project-style-map',
        content: {
          background: staticNode('red'),
          color: staticNode('blue'),
        },
      },
    }

    const result = await plugin(structure)
    const { chunks } = result
    const styleChunk = chunks.find((chunk) => chunk.name === 'index')
    expect(styleChunk).toBeDefined()
  })
})

'''
'''--- packages/teleport-plugin-react-jss/package.json ---
{
  "name": "@teleporthq/teleport-plugin-react-jss",
  "version": "0.29.0",
  "description": "A plugin for injecting the styles with JSS inside React components",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@babel/types": "^7.5.5",
    "@teleporthq/teleport-plugin-common": "^0.29.0",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-plugin-react-jss/src/index.ts ---
/*
  teleport-plugin-react-jss

  Plugin is responsible for generating styles from
  - Styles defined on individual nodes.
  - Styles defined in the project's global stylesheet.
  - Styles present in the component style sheeet.
*/

import * as types from '@babel/types'
import { StringUtils, UIDLUtils } from '@teleporthq/teleport-shared'
import {
  ASTUtils,
  ASTBuilders,
  ParsedASTNode,
  StyleBuilders,
} from '@teleporthq/teleport-plugin-common'
import {
  ComponentPluginFactory,
  ComponentPlugin,
  ChunkType,
  FileType,
  PluginReactJSS,
  UIDLElementNodeInlineReferencedStyle,
} from '@teleporthq/teleport-types'
import {
  generateStylesFromStyleObj,
  createStylesHookDecleration,
  generateProjectStyleSheet,
  convertMediaAndStylesToObject,
} from './utils'
import { createStyleSheetPlugin } from './style-sheet'

interface JSSConfig {
  styleChunkName?: string
  importChunkName?: string
  componentChunkName: string
  jssDeclarationName?: string
  classAttributeName?: string
  styleObjectImportName?: string
}
const EXPORT_IDENTIFIER = 'createUseStyles'

export const createReactJSSPlugin: ComponentPluginFactory<JSSConfig> = (config) => {
  const {
    componentChunkName = 'jsx-component',
    importChunkName = 'import-local',
    styleChunkName = 'jss-style-definition',
    jssDeclarationName = 'useStyles',
    classAttributeName = 'className',
    styleObjectImportName = 'classes',
  } = config || {}

  const reactJSSPlugin: ComponentPlugin = async (structure) => {
    const { uidl, chunks, dependencies, options } = structure
    const { projectStyleSet } = options
    const { node, styleSetDefinitions: componentStyleSheet = {}, propDefinitions = {} } = uidl

    const componentChunk = chunks.find((chunkItem) => chunkItem.name === componentChunkName)
    if (!componentChunk) {
      return structure
    }

    const jssStyleMap: Array<Record<string, unknown>> = []
    const mediaStyles: Record<string, Array<{ [x: string]: Record<string, string | number> }>> = {}
    const tokensUsed: string[] = []

    const propsPrefix = componentChunk.meta.dynamicRefPrefix.prop as string
    const jsxNodesLookup: Record<string, types.JSXElement> =
      (componentChunk.meta.nodesLookup as Record<string, types.JSXElement>) || {}
    let isProjectReferenced: boolean = false
    const propsUsed: string[] = []

    UIDLUtils.traverseElements(node, (element) => {
      const { style, key, referencedStyles, dependency, attrs = {} } = element
      if (dependency?.type === 'local') {
        StyleBuilders.setPropValueForCompStyle({
          attrs,
          key,
          jsxNodesLookup,
          getClassName,
        })
      }

      if (
        Object.keys(style || {}).length === 0 &&
        Object.keys(referencedStyles || {}).length === 0
      ) {
        return
      }

      const jsxTag = jsxNodesLookup[key] as types.JSXElement
      if (!jsxTag) {
        return
      }

      const className = getClassName(key)
      const classNamesToAppend: Set<types.MemberExpression | types.Identifier> = new Set()
      const nodeStyleIdentifier = types.memberExpression(
        types.identifier(styleObjectImportName),
        types.identifier(`'${className}'`),
        true
      )

      if (Object.keys(style || {}).length > 0) {
        jssStyleMap.push({ [className]: generateStylesFromStyleObj(style, tokensUsed, propsUsed) })
        classNamesToAppend.add(nodeStyleIdentifier)
      }

      if (referencedStyles && Object.keys(referencedStyles || {}).length > 0) {
        Object.values(referencedStyles).forEach((styleRef) => {
          switch (styleRef.content.mapType) {
            case 'inlined': {
              const { conditions } = styleRef.content
              const [condition] = conditions

              if (Object.keys(styleRef.content.styles || {}).length === 0) {
                return
              }

              if (condition.conditionType === 'screen-size') {
                if (!mediaStyles[String(condition.maxWidth)]) {
                  mediaStyles[String(condition.maxWidth)] = []
                }

                mediaStyles[String(condition.maxWidth)].push({
                  [className]: generateStylesFromStyleObj(
                    styleRef.content.styles,
                    tokensUsed,
                    propsUsed
                  ),
                })
              }

              if (condition.conditionType === 'element-state') {
                const { content } = condition
                jssStyleMap.find((item) => {
                  if (item.hasOwnProperty(className)) {
                    Object.assign(item[className], {
                      [`&:${content}`]: generateStylesFromStyleObj(
                        (styleRef as UIDLElementNodeInlineReferencedStyle).content.styles,
                        tokensUsed,
                        propsUsed
                      ),
                    })
                  }
                })
              }

              classNamesToAppend.add(nodeStyleIdentifier)
              return
            }

            case 'component-referenced': {
              const classContent = styleRef.content.content
              if (classContent.type === 'static') {
                classNamesToAppend.add(
                  types.memberExpression(
                    types.identifier(styleObjectImportName),
                    types.identifier(`'${classContent.content}'`),
                    true
                  )
                )
                return
              }

              if (
                classContent.type === 'dynamic' &&
                classContent.content.referenceType === 'prop'
              ) {
                classNamesToAppend.add(
                  types.memberExpression(
                    types.identifier(styleObjectImportName),
                    types.memberExpression(
                      types.identifier(propsPrefix),
                      types.identifier(classContent.content.id)
                    ),
                    true
                  )
                )

                const defaultPropValue = propDefinitions[classContent.content.id]?.defaultValue
                if (!defaultPropValue) {
                  return
                }
                /*
                  Changing the default value of the prop. 
                  When forceScoping is enabled the classnames change. So, we need to change the default prop too.
                */
                propDefinitions[classContent.content.id].defaultValue = getClassName(
                  String(defaultPropValue)
                )
              }

              if (
                classContent.type === 'dynamic' &&
                classContent.content.referenceType === 'comp'
              ) {
                classNamesToAppend.add(
                  types.memberExpression(
                    types.identifier(styleObjectImportName),
                    types.identifier(`'${getClassName(classContent.content.id)}'`),
                    true
                  )
                )
              }

              return
            }

            case 'project-referenced': {
              if (!projectStyleSet) {
                throw new PluginReactJSS(
                  `Project Style Sheet is missing, but the node is referring to it ${JSON.stringify(
                    element,
                    null,
                    2
                  )}`
                )
              }

              const { content } = styleRef
              const referedStyle = projectStyleSet.styleSetDefinitions[content.referenceId]
              if (!referedStyle) {
                throw new PluginReactJSS(
                  `Style used from global stylesheet is missing - ${content.referenceId}`
                )
              }

              classNamesToAppend.add(
                types.memberExpression(
                  types.identifier('projectStyles'),
                  types.identifier(`'${getClassName(content.referenceId)}'`),
                  true
                )
              )
              isProjectReferenced = true
              return
            }
            default: {
              throw new PluginReactJSS(`
                Un-supported stlyle reference received ${JSON.stringify(styleRef.content, null, 2)}
              `)
            }
          }
        })
      }

      ASTUtils.addMultipleDynamicAttributesToJSXTag(
        jsxTag,
        classAttributeName,
        Array.from(classNamesToAppend)
      )
    })

    generateProjectStyleSheet({
      styleSetDefinitions: componentStyleSheet,
      jssStyleMap,
      mediaStyles,
      tokensUsed,
    })

    const { content: astContent } = componentChunk
    const parser = new ParsedASTNode(astContent)

    const astNode = (parser.ast as types.VariableDeclaration)
      .declarations[0] as types.VariableDeclarator
    if (astNode.type === 'VariableDeclarator') {
      const isPropsInjected = (astNode.init as types.ArrowFunctionExpression).params?.some(
        (prop: types.Identifier) => prop.name === propsPrefix
      )
      if (!isPropsInjected && propsUsed.length > 0) {
        ;(astNode.init as types.ArrowFunctionExpression).params.push(types.identifier(propsPrefix))
      }
    }

    if (tokensUsed.length > 0) {
      dependencies.TOKENS = {
        type: 'local',
        path: `${projectStyleSet.path}${projectStyleSet.fileName}`,
        meta: {
          namedImport: true,
        },
      }
    }

    if (isProjectReferenced) {
      dependencies.useProjectStyles = {
        type: 'local',
        path: `${projectStyleSet.path}${projectStyleSet.fileName}`,
        meta: {
          namedImport: true,
        },
      }
      ;((astNode.init as types.ArrowFunctionExpression).body as types.BlockStatement).body.unshift(
        createStylesHookDecleration('projectStyles', 'useProjectStyles')
      )
    }

    if (jssStyleMap.length === 0 && Object.keys(mediaStyles).length === 0) {
      return structure
    }

    ;((astNode.init as types.ArrowFunctionExpression).body as types.BlockStatement).body.unshift(
      propsUsed.length > 0
        ? createStylesHookDecleration(styleObjectImportName, 'useStyles', propsPrefix)
        : createStylesHookDecleration(styleObjectImportName, 'useStyles')
    )

    dependencies[EXPORT_IDENTIFIER] = {
      type: 'package',
      path: 'react-jss',
      version: '10.4.0',
      meta: {
        namedImport: true,
      },
    }

    chunks.push({
      type: ChunkType.AST,
      fileType: FileType.JS,
      name: styleChunkName,
      linkAfter: [importChunkName],
      content: ASTBuilders.createConstAssignment(
        jssDeclarationName,
        types.callExpression(types.identifier(EXPORT_IDENTIFIER), [
          convertMediaAndStylesToObject(jssStyleMap, mediaStyles),
        ])
      ),
    })

    return structure
  }

  return reactJSSPlugin
}

export { createStyleSheetPlugin }

export default createReactJSSPlugin()

const getClassName = (str: string) => StringUtils.dashCaseToCamelCase(str)

'''
'''--- packages/teleport-plugin-react-jss/src/style-sheet.ts ---
import * as types from '@babel/types'
import { ASTUtils } from '@teleporthq/teleport-plugin-common'
import {
  ComponentPlugin,
  ComponentPluginFactory,
  ChunkType,
  FileType,
} from '@teleporthq/teleport-types'
import { StringUtils } from '@teleporthq/teleport-shared'
import { convertMediaAndStylesToObject, generateProjectStyleSheet } from './utils'

interface StyleSheetPlugin {
  fileName?: string
}

export const createStyleSheetPlugin: ComponentPluginFactory<StyleSheetPlugin> = (config) => {
  const { fileName } = config || { fileName: 'style' }
  const styleSheetPlugin: ComponentPlugin = async (structure) => {
    const { uidl, chunks, dependencies } = structure
    const { styleSetDefinitions = {}, designLanguage: { tokens = {} } = {} } = uidl

    if (Object.keys(styleSetDefinitions).length === 0 && Object.keys(tokens).length === 0) {
      return structure
    }

    const tokensMap: Record<string, string | number> = Object.keys(tokens || {}).reduce(
      (acc: Record<string, string | number>, key: string) => {
        const style = tokens[key]
        const name: string = StringUtils.capitalize(StringUtils.dashCaseToCamelCase(key))
        acc[name] = style.content as string
        return acc
      },
      {}
    )

    const jssStyleMap: Array<Record<string, unknown>> = []
    const mediaStyles: Record<string, Array<{ [x: string]: Record<string, string | number> }>> = {}
    if (Object.keys(styleSetDefinitions).length > 0) {
      generateProjectStyleSheet({
        styleSetDefinitions,
        jssStyleMap,
        mediaStyles,
      })
    }

    uidl.outputOptions = uidl.outputOptions || {}
    uidl.outputOptions.fileName = fileName

    dependencies.createUseStyles = {
      type: 'package',
      path: 'react-jss',
      version: '10.4.0',
      meta: {
        namedImport: true,
      },
    }

    if (Object.keys(tokens).length > 0) {
      chunks.push({
        name: 'tokens-chunk',
        type: ChunkType.AST,
        fileType: FileType.JS,
        content: types.exportNamedDeclaration(
          types.variableDeclaration('const', [
            types.variableDeclarator(
              types.identifier('TOKENS'),
              ASTUtils.objectToObjectExpression(tokensMap)
            ),
          ])
        ),
        linkAfter: ['import-local'],
      })
    }

    if (jssStyleMap.length > 0) {
      chunks.push({
        name: fileName,
        type: ChunkType.AST,
        fileType: FileType.JS,
        content: types.exportNamedDeclaration(
          types.variableDeclaration('const', [
            types.variableDeclarator(
              types.identifier('useProjectStyles'),
              types.callExpression(types.identifier('createUseStyles'), [
                convertMediaAndStylesToObject(jssStyleMap, mediaStyles),
              ])
            ),
          ])
        ),
        linkAfter: ['tokens-chunk'],
      })
    }

    return structure
  }
  return styleSheetPlugin
}

'''
'''--- packages/teleport-plugin-react-jss/src/utils.ts ---
import * as types from '@babel/types'
import { StringUtils, UIDLUtils } from '@teleporthq/teleport-shared'
import { ParsedASTNode, ASTBuilders, ASTUtils } from '@teleporthq/teleport-plugin-common'
import { UIDLStyleSetDefinition, UIDLStyleValue } from '@teleporthq/teleport-types'

export const generateProjectStyleSheet = (params: {
  styleSetDefinitions: Record<string, UIDLStyleSetDefinition>
  jssStyleMap: Array<Record<string, unknown>>
  mediaStyles: Record<string, Array<{ [x: string]: Record<string, string | number> }>>
  tokensUsed?: string[]
}) => {
  const { styleSetDefinitions = {}, jssStyleMap, tokensUsed, mediaStyles = {} } = params
  Object.keys(styleSetDefinitions).forEach((styleId) => {
    const style = styleSetDefinitions[styleId]
    const className = StringUtils.dashCaseToCamelCase(styleId)
    const { conditions = [], content } = style
    jssStyleMap.push({ [className]: generateStylesFromStyleObj(content, tokensUsed) })

    if (conditions.length > 0) {
      conditions.forEach(({ content: styleContent, meta, type }) => {
        if (Object.keys(styleContent).length === 0) {
          return
        }

        if (type === 'screen-size') {
          if (!mediaStyles[String(meta.maxWidth)]) {
            mediaStyles[String(meta.maxWidth)] = []
          }

          if (style.type === 'reusable-component-style-map') {
            mediaStyles[String(meta.maxWidth)].unshift({
              [className]: generateStylesFromStyleObj(styleContent, tokensUsed),
            })
          } else {
            mediaStyles[String(meta.maxWidth)].push({
              [className]: generateStylesFromStyleObj(styleContent, tokensUsed),
            })
          }
        }

        if (type === 'element-state') {
          jssStyleMap.find((item) => {
            if (style.hasOwnProperty(className)) {
              Object.assign(item[className], {
                [`&:${meta.state}`]: generateStylesFromStyleObj(styleContent, tokensUsed),
              })
            }
          })
        }
      })
    }
  })
}

export const generateStylesFromStyleObj = (
  style: Record<string, UIDLStyleValue>,
  tokensUsed?: string[],
  propsUsed?: string[]
) => {
  return UIDLUtils.transformDynamicStyles(style, (styleValue) => {
    switch (styleValue.content.referenceType) {
      case 'prop':
        propsUsed?.push(styleValue.content.id)
        return new ParsedASTNode(
          ASTBuilders.createArrowFunctionWithMemberExpression('props', styleValue.content.id)
        )
      case 'token':
        const token = StringUtils.capitalize(StringUtils.dashCaseToCamelCase(styleValue.content.id))
        tokensUsed?.push(token)
        return new ParsedASTNode(
          types.memberExpression(types.identifier('TOKENS'), types.identifier(token))
        )
      default:
        throw new Error(
          `Error running transformDynamicStyles in reactJSSComponentStyleChunksPlugin. Unsupported styleValue.content.referenceType value ${styleValue.content.referenceType}`
        )
    }
  })
}

export const createStylesHookDecleration = (
  assignee: string,
  hookName: string,
  dynamicValueIdentifier?: string
) =>
  types.variableDeclaration('const', [
    types.variableDeclarator(
      types.identifier(assignee),
      types.callExpression(
        types.identifier(hookName),
        dynamicValueIdentifier ? [types.identifier(dynamicValueIdentifier)] : []
      )
    ),
  ])

export const convertMediaAndStylesToObject = (
  jssStyleMap: Array<Record<string, unknown>>,
  mediaStyles: Record<string, Array<{ [x: string]: Record<string, string | number> }>>
): types.ObjectExpression => {
  const styles = ASTUtils.objectToObjectExpression(convertArraytoObject(jssStyleMap))

  Object.keys(mediaStyles)
    .map((id) => Number(id))
    .sort((a, b) => b - a)
    .forEach((mediaOffset) => {
      styles.properties.push(
        types.objectProperty(
          types.identifier(`'@media(max-width: ${mediaOffset}px)'`),
          ASTUtils.objectToObjectExpression(
            convertArraytoObject(mediaStyles[String(mediaOffset)] || [])
          )
        )
      )
    }, [])

  return styles
}

const convertArraytoObject = (list: Array<Record<string, unknown>>): Record<string, unknown> =>
  list.reduce((acc, item) => {
    Object.assign(acc, item)
    return acc
  }, {})

'''
'''--- packages/teleport-plugin-react-jss/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-plugin-react-styled-components/README.md ---
# teleport-plugin-react-styled-components

A plugin for injecting the styles through styled-components inside React components.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-plugin-react-styled-components
```
or
```bash
yarn add @teleporthq/teleport-plugin-react-styled-components
```

'''
'''--- packages/teleport-plugin-react-styled-components/__tests__/component-scoped.ts ---
import { createReactStyledComponentsPlugin } from '../src'
import { staticNode, elementNode, component } from '@teleporthq/teleport-uidl-builders'
import { ComponentStructure } from '@teleporthq/teleport-types'
import { createComponentChunk } from './mocks'

describe('Component Scoped Styles', () => {
  const uidl = component('MYComponent', elementNode('container', {}, [], null, {}), {}, {})
  uidl.styleSetDefinitions = {
    'primary-navbar': {
      type: 'reusable-component-style-map',
      content: {
        width: staticNode('100px'),
        height: staticNode('200px'),
      },
    },
    secondaryNavbar: {
      type: 'reusable-component-style-map',
      content: {
        height: staticNode('50px'),
        width: staticNode('50px'),
      },
    },
  }

  it('Generates component-scoped style sheet', async () => {
    const plugin = createReactStyledComponentsPlugin()
    const structure: ComponentStructure = {
      uidl,
      chunks: [createComponentChunk()],
      dependencies: {},
      options: {},
    }
    const { chunks, dependencies } = await plugin(structure)
    const variantChunk = chunks.find((chunk) => chunk.name === 'variant')
    const declaration = variantChunk.content.declarations[0].init

    expect(chunks.length).toBe(2)
    expect(declaration.callee.name).toBe('variant')
    expect(declaration.arguments[0].properties.length).toBe(2)
    expect(declaration.arguments[0].properties[0].value.value).toBe('compVariant')
    expect(declaration.arguments[0].properties[1].value.properties.length).toBe(2)
    expect(dependencies.variant).toBeDefined()
  })

  it(`Generates Component-scoped style sheet and adds to the node`, async () => {
    const plugin = createReactStyledComponentsPlugin()
    uidl.node.content.referencedStyles = {
      '1415161718': {
        type: 'style-map',
        content: {
          mapType: 'component-referenced',
          content: {
            type: 'dynamic',
            content: {
              referenceType: 'prop',
              id: 'variant',
            },
          },
        },
      },
    }
    const structure: ComponentStructure = {
      uidl,
      chunks: [createComponentChunk()],
      dependencies: {},
      options: {},
    }

    const { chunks, dependencies } = await plugin(structure)
    const jsxComp = chunks.find((chunk) => chunk.name === 'jsx-component')
    const attrs = jsxComp.meta.nodesLookup.container.openingElement.attributes[0]

    expect(chunks.length).toBe(3)
    expect(attrs.name.name).toBe('compVariant')
    expect(attrs.value.expression.name).toBe('props.variant')
    expect(dependencies.variant).toBeDefined()
  })

  it(`Throws error when a node is referring to both static component-scoped,
   and dynamic component-scoped`, async () => {
    const plugin = createReactStyledComponentsPlugin()
    uidl.node.content.referencedStyles = {
      ...uidl.node.content.referencedStyles,
      '910111213': {
        type: 'style-map',
        content: {
          mapType: 'component-referenced',
          content: {
            type: 'dynamic',
            content: {
              referenceType: 'comp',
              id: 'primary-navbar',
            },
          },
        },
      },
    }
    const structure: ComponentStructure = {
      uidl,
      chunks: [createComponentChunk()],
      dependencies: {},
      options: {},
    }

    await expect(plugin(structure)).rejects.toThrow(Error)
  })
})

'''
'''--- packages/teleport-plugin-react-styled-components/__tests__/index.ts ---
import { component, elementNode } from '@teleporthq/teleport-uidl-builders'
import { ComponentStructure } from '@teleporthq/teleport-types'
import { createReactStyledComponentsPlugin } from '../src/index'
import { createComponentChunk, createElementWithStyle } from './mocks'

describe('Testing the functionality for StyledComponents', () => {
  const plugin = createReactStyledComponentsPlugin()
  const componentChunk = createComponentChunk()

  it('Should not add styled as dependency', async () => {
    const uidlSample = component('StyledComponents', elementNode('container'))
    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {},
      chunks: [componentChunk],
      dependencies: {},
    }

    const { dependencies } = await plugin(structure)

    expect(Object.keys(dependencies).length).toBe(0)
  })

  it('Should add styled as dependency', async () => {
    const elementWithStyle = createElementWithStyle()
    const uidlSample = component('StyledComponents', elementWithStyle)
    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {},
      chunks: [componentChunk],
      dependencies: {},
    }

    const { dependencies } = await plugin(structure)
    const { styled } = dependencies

    expect(Object.keys(dependencies).length).toBeGreaterThan(0)
    expect(styled.type).toBe('package')
    expect(styled.path).toBe('styled-components')
  })

  it('Generator should not break when chunks are missing', async () => {
    const element = elementNode('container', {}, [])
    const elementWithKey = {
      ...element,
      content: {
        ...element.content,
        key: 'container',
      },
    }
    const uidlSample = component('StyledComponents', elementWithKey)

    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {},
      chunks: [],
      dependencies: {},
    }

    const { dependencies } = await plugin(structure)

    expect(Object.keys(dependencies).length).toBe(0)
  })
})

'''
'''--- packages/teleport-plugin-react-styled-components/__tests__/mocks.ts ---
import { staticNode, elementNode } from '@teleporthq/teleport-uidl-builders'
import { ChunkDefinition, ChunkType, FileType } from '@teleporthq/teleport-types'

export const createElementWithStyle = () => {
  const style = {
    height: staticNode('100px'),
  }
  const element = elementNode('container', {}, [], null, style)
  const elementWithKey = {
    ...element,
    content: {
      ...element.content,
      key: 'container',
    },
  }

  return elementWithKey
}

export const createComponentChunk = () => {
  const componentChunk: ChunkDefinition = {
    name: 'jsx-component',
    meta: {
      nodesLookup: {
        container: {
          openingElement: {
            attributes: [],
            name: {
              name: '',
            },
          },
        },
      },
      dynamicRefPrefix: {
        prop: 'props',
      },
    },
    type: ChunkType.AST,
    fileType: FileType.JS,
    linkAfter: ['import-local'],
    content: {},
  }
  return componentChunk
}

'''
'''--- packages/teleport-plugin-react-styled-components/__tests__/referenced-styles.ts ---
import { ComponentStructure, UIDLStyleSetDefinition } from '@teleporthq/teleport-types'
import { createReactStyledComponentsPlugin } from '../src'
import { component, elementNode, staticNode } from '@teleporthq/teleport-uidl-builders'
import { createComponentChunk } from './mocks'

describe('Referenced Styles on Node', () => {
  const componentChunk = createComponentChunk()
  const uidl = component('MyComponent', elementNode('container', null, [], null, null, null, null))

  it('Media and pseudo styles are generated from referencedStyles', async () => {
    const plugin = createReactStyledComponentsPlugin()
    uidl.node.content.referencedStyles = {
      '5ed659b1732f9b804f7b6381': {
        type: 'style-map',
        content: {
          mapType: 'inlined',
          conditions: [{ conditionType: 'screen-size', maxWidth: 991 }],
          styles: {
            display: staticNode('none'),
          },
        },
      },
      '5ed659b1732f9b804f7b6382': {
        type: 'style-map',
        content: {
          mapType: 'inlined',
          conditions: [{ conditionType: 'element-state', content: 'hover' }],
          styles: {
            display: staticNode('block'),
          },
        },
      },
    }
    uidl.node.content.key = 'container'

    const structure: ComponentStructure = {
      uidl,
      chunks: [componentChunk],
      dependencies: {},
      options: {},
    }

    const { chunks, dependencies } = await plugin(structure)
    const containerChunk = chunks.find((chunk) => chunk.name === 'Container')

    expect(containerChunk).toBeDefined()
    expect(containerChunk.content.type).toBe('VariableDeclaration')

    const declerationArguments = containerChunk.content.declarations[0].init.arguments
    expect(declerationArguments.length).toBe(1)
    expect(declerationArguments[0].name).not.toBe('projectStyleVariants')
    expect(declerationArguments[0].properties.length).toBe(2)
    expect(declerationArguments[0].properties[0].key.value).toBe('@media(max-width: 991px)')
    expect(declerationArguments[0].properties[1].key.value).toBe('&:hover')

    expect(Object.keys(dependencies).length).toBe(1)
  })

  it('References a style from project and adds, Media and pseudo from referencedStyles', async () => {
    const plugin = createReactStyledComponentsPlugin()
    uidl.node.content.referencedStyles = {
      '5ed659b1732f9b804f7b6381': {
        type: 'style-map',
        content: {
          mapType: 'inlined',
          conditions: [{ conditionType: 'screen-size', maxWidth: 991 }],
          styles: {
            display: staticNode('none'),
          },
        },
      },
      '5ed659b1732f9b804f7b6382': {
        type: 'style-map',
        content: {
          mapType: 'inlined',
          conditions: [{ conditionType: 'element-state', content: 'hover' }],
          styles: {
            display: staticNode('block'),
          },
        },
      },
      '5ed659b1732f9b804f7b6384': {
        type: 'style-map',
        content: {
          mapType: 'project-referenced',
          referenceId: 'primaryButton',
        },
      },
    }
    uidl.node.content.key = 'container'

    const structure: ComponentStructure = {
      uidl,
      chunks: [componentChunk],
      dependencies: {},
      options: {},
    }

    const styleSetDefinitions: Record<string, UIDLStyleSetDefinition> = {
      primaryButton: {
        type: 'reusable-project-style-map',
        content: {
          background: staticNode('blue'),
          color: staticNode('red'),
        },
      },
    }

    structure.options.projectStyleSet = {
      styleSetDefinitions,
      fileName: 'style',
      path: '..',
    }

    const { chunks, dependencies } = await plugin(structure)
    const containerChunk = chunks.find((chunk) => chunk.name === 'Container')

    expect(containerChunk).toBeDefined()
    expect(containerChunk.content.type).toBe('VariableDeclaration')

    const declerationArguments = containerChunk.content.declarations[0].init.arguments

    expect(declerationArguments.length).toBe(2)
    expect(declerationArguments[0].name).toBe('projectStyleVariants')
    expect(declerationArguments[1].properties.length).toBe(2)
    expect(declerationArguments[1].properties[0].key.value).toBe('@media(max-width: 991px)')
    expect(declerationArguments[1].properties[1].key.value).toBe('&:hover')

    expect(Object.keys(dependencies).length).toBe(2)
  })
})

'''
'''--- packages/teleport-plugin-react-styled-components/__tests__/style-sheet.ts ---
import {
  ComponentStructure,
  UIDLDesignTokens,
  UIDLStyleSetDefinition,
} from '@teleporthq/teleport-types'
import { createStyleSheetPlugin } from '../src'
import { component, elementNode, staticNode } from '@teleporthq/teleport-uidl-builders'
import { createComponentChunk } from './mocks'

describe('Style Sheet from styled components', () => {
  const componentChunk = createComponentChunk()

  it('Generates a style sheet from the give JSON of styleSet', async () => {
    const plugin = createStyleSheetPlugin()
    const uidl = component('MyComponent', elementNode('container'))
    const structure: ComponentStructure = {
      uidl,
      chunks: [componentChunk],
      options: {},
      dependencies: {},
    }
    const tokens: UIDLDesignTokens = {
      'blue-500': {
        type: 'static',
        content: '#9999ff',
      },
      'blue-600': {
        type: 'static',
        content: '#6b7db3',
      },
      'red-500': {
        type: 'static',
        content: '#ff9999',
      },
    }

    const styleSetDefinitions: Record<string, UIDLStyleSetDefinition> = {
      primaryButton: {
        type: 'reusable-project-style-map',
        content: {
          background: staticNode('blue'),
          color: staticNode('red'),
        },
      },
      secondaryButton: {
        type: 'reusable-project-style-map',
        content: {
          background: staticNode('red'),
          color: staticNode('blue'),
        },
      },
      conditionalButton: {
        type: 'reusable-project-style-map',
        conditions: [
          {
            type: 'screen-size',
            meta: { maxWidth: 991 },
            content: {
              backgrouns: staticNode('purple'),
            },
          },
          {
            type: 'element-state',
            meta: { state: 'hover' },
            content: {
              background: staticNode('yellow'),
            },
          },
        ],
        content: {
          background: staticNode('red'),
          color: staticNode('blue'),
        },
      },
    }

    structure.uidl = {
      ...structure.uidl,
      styleSetDefinitions,
      designLanguage: {
        tokens,
      },
    }

    const result = await plugin(structure)
    const { chunks, dependencies } = result
    const styleChunks = chunks.filter((chunk) => chunk.name === 'style')

    expect(styleChunks.length).toBe(1)
    expect(dependencies.variant.path).toBe('styled-system')
  })

  it('Changes the name of output file, with the name that is passed', async () => {
    const plugin = createStyleSheetPlugin({ fileName: 'index' })
    const uidl = component('MyComponent', elementNode('container'))
    const structure: ComponentStructure = {
      uidl,
      chunks: [componentChunk],
      options: {},
      dependencies: {},
    }
    structure.uidl.styleSetDefinitions = {
      primaryButton: {
        type: 'reusable-project-style-map',
        content: {
          background: staticNode('blue'),
          color: staticNode('red'),
        },
      },
      secondaryButton: {
        type: 'reusable-project-style-map',
        content: {
          background: staticNode('red'),
          color: staticNode('blue'),
        },
      },
    }

    const result = await plugin(structure)
    const { chunks, dependencies } = result
    const styleChunk = chunks.find((chunk) => chunk.name === 'index')
    const declaration = styleChunk.content.declaration.declarations[0]

    expect(styleChunk).toBeDefined()
    expect(dependencies.variant.path).toBe('styled-system')
    expect(result.uidl.outputOptions.fileName).toBe('index')
    expect(declaration.id.name).toBe('projectStyleVariants')
    expect(declaration.init.arguments[0].properties[0].value.value).toBe('projVariant')
    expect(declaration.init.arguments[0].properties[1].value.properties.length).toBe(2)
  })
})

'''
'''--- packages/teleport-plugin-react-styled-components/package.json ---
{
  "name": "@teleporthq/teleport-plugin-react-styled-components",
  "version": "0.29.0",
  "description": "A plugin for injecting the styles through styled-components inside React components",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@babel/types": "^7.5.5",
    "@teleporthq/teleport-plugin-common": "^0.29.0",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-plugin-react-styled-components/src/constants.ts ---
import { UIDLExternalDependency } from '@teleporthq/teleport-types'

export const VARIANT_DEPENDENCY: UIDLExternalDependency = {
  type: 'package',
  path: 'styled-system',
  version: '^5.1.5',
  meta: {
    namedImport: true,
  },
}

export const componentVariantPropPrefix = 'componentStyleVariants'
export const componentVariantPropKey = 'compVariant'

export const projectVariantPropPrefix = 'projectStyleVariants'
export const projectVariantPropKey = 'projVariant'

'''
'''--- packages/teleport-plugin-react-styled-components/src/index.ts ---
import * as types from '@babel/types'
import {
  ComponentPluginFactory,
  ComponentPlugin,
  ChunkType,
  FileType,
  PluginStyledComponent,
} from '@teleporthq/teleport-types'
import { UIDLUtils, StringUtils } from '@teleporthq/teleport-shared'
import { ASTUtils, StyleBuilders } from '@teleporthq/teleport-plugin-common'
import {
  generateStyledComponent,
  generateVariantsfromStyleSet,
  generateStyledComponentStyles,
} from './utils'
import { createStyleSheetPlugin } from './style-sheet'
import {
  componentVariantPropKey,
  componentVariantPropPrefix,
  projectVariantPropKey,
  projectVariantPropPrefix,
  VARIANT_DEPENDENCY,
} from './constants'

interface StyledComponentsConfig {
  componentChunkName: string
  importChunkName?: string
  illegalComponentNames?: string[]
  classAttributeName?: string
}

export const createReactStyledComponentsPlugin: ComponentPluginFactory<StyledComponentsConfig> = (
  config
) => {
  const {
    componentChunkName = 'jsx-component',
    importChunkName = 'import-local',
    illegalComponentNames = [],
  } = config || {}

  const reactStyledComponentsPlugin: ComponentPlugin = async (structure) => {
    const { uidl, chunks, dependencies, options } = structure
    const { node, name, styleSetDefinitions: componentStyleSheet = {}, propDefinitions = {} } = uidl
    const { projectStyleSet } = options
    const componentChunk = chunks.find((chunk) => chunk.name === componentChunkName)
    if (!componentChunk) {
      return structure
    }

    const jsxNodesLookup = componentChunk.meta.nodesLookup as Record<string, types.JSXElement>
    const propsPrefix = componentChunk.meta.dynamicRefPrefix.prop as string
    const cssMap: Record<string, types.ObjectExpression> = {}
    const tokensReferred: Set<string> = new Set()

    if (Object.keys(componentStyleSheet).length > 0) {
      const variants = generateVariantsfromStyleSet(
        componentStyleSheet,
        componentVariantPropPrefix,
        componentVariantPropKey,
        tokensReferred
      )
      chunks.push({
        name: 'variant',
        type: ChunkType.AST,
        content: variants,
        fileType: FileType.JS,
        linkAfter: ['jsx-component'],
      })
      dependencies.variant = VARIANT_DEPENDENCY
    }

    UIDLUtils.traverseElements(node, (element) => {
      const { key, elementType, referencedStyles, dependency, style, attrs = {} } = element
      const propsReferred: Set<string> = new Set()
      const componentStyleReferences: Set<string> = new Set()
      const projectStyleReferences: Set<string> = new Set()

      if (dependency?.type === 'local') {
        StyleBuilders.setPropValueForCompStyle({
          attrs,
          key,
          jsxNodesLookup,
          getClassName,
        })
      }

      if (
        Object.keys(style || {}).length === 0 &&
        Object.keys(referencedStyles || {}).length === 0
      ) {
        return
      }

      const root = jsxNodesLookup[key]
      let className = StringUtils.dashCaseToUpperCamelCase(key)

      if (style && Object.keys(style).length > 0) {
        /* Styled components might create an element that
          clashes with native element (Text, View, Image, etc.) */
        if (
          illegalComponentNames.includes(className) ||
          StringUtils.dashCaseToUpperCamelCase(key) === name ||
          Object.keys(dependencies).includes(className)
        ) {
          className = `Styled${className}`
        }

        cssMap[className] = generateStyledComponentStyles({
          styles: style,
          propsReferred,
          tokensReferred,
          propsPrefix,
          tokensPrefix: 'TOKENS',
        })
      }

      if (referencedStyles && Object.keys(referencedStyles)?.length > 0) {
        Object.values(referencedStyles).forEach((styleRef) => {
          switch (styleRef.content?.mapType) {
            case 'inlined': {
              const { conditions } = styleRef.content
              const [condition] = conditions

              if (condition.conditionType === 'screen-size') {
                const nodeStyle = cssMap[className]
                const mediaStyles = types.objectProperty(
                  types.stringLiteral(`@media(max-width: ${condition.maxWidth}px)`),
                  generateStyledComponentStyles({
                    styles: styleRef.content.styles,
                    propsReferred,
                    tokensReferred,
                    propsPrefix,
                    tokensPrefix: 'TOKENS',
                  })
                )
                if (nodeStyle?.type === 'ObjectExpression') {
                  nodeStyle.properties.push(mediaStyles)
                } else {
                  cssMap[className] = ASTUtils.wrapObjectPropertiesWithExpression([mediaStyles])
                }
              }

              if (condition.conditionType === 'element-state') {
                const nodeStyle = cssMap[className]
                const mediaStyles = types.objectProperty(
                  types.stringLiteral(`&:${condition.content}`),
                  generateStyledComponentStyles({
                    styles: styleRef.content.styles,
                    propsReferred,
                    tokensReferred,
                    propsPrefix,
                    tokensPrefix: 'TOKENS',
                  })
                )
                if (nodeStyle?.type === 'ObjectExpression') {
                  nodeStyle.properties.push(mediaStyles)
                } else {
                  cssMap[className] = ASTUtils.wrapObjectPropertiesWithExpression([mediaStyles])
                }
              }

              return
            }

            case 'component-referenced': {
              if (componentStyleReferences.size > 0) {
                throw new PluginStyledComponent(
                  `Styled Components can have only one component-reference. Recevied more than one \n
                  ${JSON.stringify(referencedStyles, null, 2)}`
                )
              }

              if (styleRef.content.content.type === 'static') {
                componentStyleReferences.add(componentVariantPropPrefix)
                ASTUtils.addAttributeToJSXTag(
                  root,
                  componentVariantPropKey,
                  styleRef.content.content.content
                )
              }

              if (
                styleRef.content.content.type === 'dynamic' &&
                styleRef.content.content.content.referenceType === 'comp'
              ) {
                const usedCompStyle = componentStyleSheet[styleRef.content.content.content.id]
                if (!usedCompStyle) {
                  throw new Error(`${styleRef.content.content.content.id} is missing from props`)
                }
                componentStyleReferences.add(usedCompStyle.type)

                ASTUtils.addAttributeToJSXTag(
                  root,
                  componentVariantPropKey,
                  getClassName(styleRef.content.content.content.id)
                )
              }

              if (
                styleRef.content.content.type === 'dynamic' &&
                styleRef.content.content.content.referenceType === 'prop'
              ) {
                const prop = propDefinitions[styleRef.content.content.content.id]
                if (prop?.defaultValue) {
                  const usedCompStyle = componentStyleSheet[String(prop.defaultValue)]
                  componentStyleReferences.add(usedCompStyle.type)
                  /*
                  Changing the default value of the prop. 
                  When forceScoping is enabled the classnames change. So, we need to change the default prop too.
                */
                  propDefinitions[styleRef.content.content.content.id].defaultValue = getClassName(
                    String(prop.defaultValue)
                  )
                } else {
                  componentStyleReferences.add(componentVariantPropPrefix)
                }

                ASTUtils.addDynamicAttributeToJSXTag(
                  root,
                  componentVariantPropKey,
                  `${propsPrefix}.${styleRef.content.content.content.id}`
                )
              }

              return
            }

            case 'project-referenced': {
              if (!projectStyleSet) {
                throw new Error(
                  `Project Style Sheet is missing, but the node is referring to it ${element}`
                )
              }
              const { content } = styleRef
              const referedStyle = projectStyleSet.styleSetDefinitions[content.referenceId]
              if (!referedStyle) {
                throw new Error(
                  `Style that is being used for reference is missing - ${content.referenceId}`
                )
              }
              dependencies[projectVariantPropPrefix] = {
                type: 'local',
                path: `${projectStyleSet.path}${projectStyleSet.fileName}`,
                meta: {
                  namedImport: true,
                },
              }
              projectStyleReferences.add(projectVariantPropPrefix)

              ASTUtils.addAttributeToJSXTag(
                root,
                projectVariantPropKey,
                getClassName(content.referenceId)
              )
              return
            }
            default: {
              throw new Error(`
                  We support only inlined and project-referenced styles as of now, received ${JSON.stringify(
                    styleRef.content,
                    null,
                    2
                  )}
                `)
            }
          }
        })
      }

      if (propsReferred.size > 0) {
        ASTUtils.addSpreadAttributeToJSXTag(root, propsPrefix)
      }

      ASTUtils.renameJSXTag(root, className)

      const code = {
        type: ChunkType.AST,
        fileType: FileType.JS,
        name: className,
        linkAfter: [importChunkName],
        content: generateStyledComponent({
          name: className,
          styles: cssMap[className],
          elementType,
          propsReferred,
          componentStyleReferences,
          projectStyleReferences,
        }),
      }
      chunks.push(code)
    })

    if (Object.keys(cssMap).length === 0) {
      return structure
    }

    if (tokensReferred.size > 0) {
      dependencies.TOKENS = {
        type: 'local',
        path: `${projectStyleSet.path}${projectStyleSet.fileName}`,
        meta: {
          namedImport: true,
        },
      }
    }

    dependencies.styled = {
      type: 'package',
      path: 'styled-components',
      version: '^5.3.0',
    }

    return structure
  }

  return reactStyledComponentsPlugin
}

export { createStyleSheetPlugin }

export default createReactStyledComponentsPlugin()

const getClassName = (str: string) => StringUtils.dashCaseToCamelCase(str)

'''
'''--- packages/teleport-plugin-react-styled-components/src/style-sheet.ts ---
import * as types from '@babel/types'
import {
  ComponentPlugin,
  ComponentPluginFactory,
  ChunkType,
  FileType,
} from '@teleporthq/teleport-types'
import { generateVariantsfromStyleSet } from './utils'
import { StringUtils } from '@teleporthq/teleport-shared'
import { projectVariantPropKey, projectVariantPropPrefix, VARIANT_DEPENDENCY } from './constants'

interface StyleSheetPlugin {
  fileName?: string
}

export const createStyleSheetPlugin: ComponentPluginFactory<StyleSheetPlugin> = (config) => {
  const { fileName = 'style' } = config || {}

  const styleSheetPlugin: ComponentPlugin = async (structure) => {
    const { uidl, chunks, dependencies } = structure
    const { styleSetDefinitions = {}, designLanguage: { tokens = {} } = {} } = uidl
    if (Object.keys(styleSetDefinitions).length === 0 && Object.keys(tokens).length === 0) {
      return structure
    }

    const tokensMap: Record<string, string | number> = Object.keys(tokens || {}).reduce(
      (acc: Record<string, string | number>, key: string) => {
        const style = tokens[key]
        const name: string = StringUtils.capitalize(StringUtils.dashCaseToCamelCase(key))
        acc[name] = style.content as string
        return acc
      },
      {}
    )

    if (Object.keys(styleSetDefinitions).length > 0) {
      const variants = generateVariantsfromStyleSet(
        styleSetDefinitions,
        projectVariantPropPrefix,
        projectVariantPropKey
      )
      chunks.push({
        name: fileName,
        type: ChunkType.AST,
        content: types.exportNamedDeclaration(variants),
        fileType: FileType.JS,
        linkAfter: ['tokens-chunk'],
      })
      dependencies.variant = VARIANT_DEPENDENCY
    }

    if (Object.keys(tokensMap).length > 0) {
      chunks.push({
        name: 'tokens-chunk',
        type: ChunkType.AST,
        fileType: FileType.JS,
        content: types.exportNamedDeclaration(
          types.variableDeclaration('const', [
            types.variableDeclarator(
              types.identifier('TOKENS'),
              types.objectExpression(
                Object.keys(tokensMap).reduce((acc: types.ObjectProperty[], token) => {
                  const value =
                    typeof tokensMap[token] === 'number'
                      ? types.numericLiteral(Number(tokensMap[token]))
                      : types.stringLiteral(String(tokensMap[token]))
                  acc.push(types.objectProperty(types.identifier(token), value))
                  return acc
                }, [])
              )
            ),
          ])
        ),
        linkAfter: ['import-local'],
      })
    }

    uidl.outputOptions = uidl.outputOptions || {}
    uidl.outputOptions.fileName = fileName

    return structure
  }
  return styleSheetPlugin
}

'''
'''--- packages/teleport-plugin-react-styled-components/src/utils.ts ---
import * as types from '@babel/types'
import { StringUtils } from '@teleporthq/teleport-shared'
import {
  UIDLStyleValue,
  UIDLStyleSetDefinition,
  PluginStyledComponent,
} from '@teleporthq/teleport-types'
import { componentVariantPropPrefix } from './constants'

export const generateStyledComponent = (params: {
  name: string
  elementType: string
  styles: types.ObjectExpression
  propsReferred: Set<string>
  componentStyleReferences: Set<string>
  projectStyleReferences: Set<string>
}) => {
  const {
    name,
    elementType,
    styles,
    propsReferred,
    componentStyleReferences,
    projectStyleReferences,
  } = params
  let styleExpressions: types.ObjectExpression | types.ArrowFunctionExpression = styles
  const expressionArguments: Array<
    types.ObjectExpression | types.ArrowFunctionExpression | types.Identifier
  > = []

  if (propsReferred.size > 0) {
    styleExpressions = types.arrowFunctionExpression([types.identifier('props')], styles)
  }

  if (styles && styles.properties.length > 0) {
    expressionArguments.push(styleExpressions)
  }

  if (componentStyleReferences.size > 0) {
    const isOverride = Array.from(componentStyleReferences).some(
      (ref) => ref === 'reusable-component-style-override'
    )
    if (isOverride) {
      expressionArguments.push(types.identifier(componentVariantPropPrefix))
    } else {
      expressionArguments.unshift(types.identifier(componentVariantPropPrefix))
    }
  }

  if (projectStyleReferences.size > 0) {
    expressionArguments.unshift(
      ...Array.from(projectStyleReferences).map((ref) => types.identifier(ref))
    )
  }

  return types.variableDeclaration('const', [
    types.variableDeclarator(
      types.identifier(name),
      types.callExpression(
        types.callExpression(types.identifier('styled'), [types.stringLiteral(elementType)]),
        expressionArguments
      )
    ),
  ])
}

export const generateStyledComponentStyles = (params: {
  styles: Record<string, UIDLStyleValue>
  propsReferred?: Set<string>
  tokensReferred?: Set<string>
  propsPrefix?: string
  tokensPrefix?: string
}): types.ObjectExpression => {
  const {
    styles,
    tokensReferred,
    propsReferred,
    propsPrefix = 'props',
    tokensPrefix = 'TOKENS',
  } = params
  const properties: types.ObjectProperty[] = Object.keys(styles).reduce(
    (acc: types.ObjectProperty[], styleId) => {
      const style = styles[styleId]
      const styleKey = types.stringLiteral(StringUtils.camelCaseToDashCase(styleId))

      if (style.type === 'static') {
        const styleContent =
          typeof style.content === 'string'
            ? types.stringLiteral(style.content)
            : types.numericLiteral(Number(style.content))
        acc.push(types.objectProperty(styleKey, styleContent))
      }

      if (style.type === 'dynamic' && style.content.referenceType === 'state') {
        throw new PluginStyledComponent(`Error running transformDynamicStyles in reactStyledComponentsPlugin. 
        Unsupported styleValue.content.referenceType value ${style.content.referenceType}`)
      }

      if (style.type === 'dynamic' && style.content.referenceType === 'prop') {
        const isNestedProp = style.content.id.includes('.')
        acc.push(
          types.objectProperty(
            styleKey,
            types.memberExpression(
              types.identifier(propsPrefix),
              isNestedProp
                ? types.identifier(style.content.id)
                : types.identifier(`'${style.content.id}'`),
              !isNestedProp
            )
          )
        )
        propsReferred?.add(style.content.id)
      }

      if (style.type === 'dynamic' && style.content.referenceType === 'token') {
        const usedToken = StringUtils.capitalize(StringUtils.dashCaseToCamelCase(style.content.id))
        acc.push(
          types.objectProperty(
            styleKey,
            types.memberExpression(types.identifier(tokensPrefix), types.identifier(usedToken))
          )
        )
        tokensReferred?.add(usedToken)
      }

      return acc
    },
    []
  )

  return types.objectExpression(properties)
}

export const generateVariantsfromStyleSet = (
  styleSets: Record<string, UIDLStyleSetDefinition>,
  variantPropPrefix: string,
  variantPropKey: string,
  tokensReferred?: Set<string>
) => {
  const variantExpressions = types.objectExpression(
    Object.keys(styleSets).reduce((acc: types.ObjectProperty[], styleId) => {
      const style = styleSets[styleId]
      const { content = {}, conditions = [] } = style

      const property = types.objectProperty(
        types.stringLiteral(StringUtils.dashCaseToCamelCase(styleId)),
        generateStyledComponentStyles({
          styles: content,
          ...(tokensReferred && { tokensReferred }),
        })
      )

      conditions.forEach((cond) => {
        const mediaProperty = types.objectProperty(
          cond.type === 'screen-size'
            ? types.stringLiteral(`@media(max-width: ${cond.meta.maxWidth}px)`)
            : types.stringLiteral(`&:${cond.meta.state}`),
          generateStyledComponentStyles({
            styles: cond.content,
            ...(tokensReferred && { tokensReferred }),
          })
        )

        if (property.value.type === 'ObjectExpression') {
          property.value.properties.push(mediaProperty)
        }
      })

      acc.push(property)
      return acc
    }, [])
  )

  return types.variableDeclaration('const', [
    types.variableDeclarator(
      types.identifier(variantPropPrefix),
      types.callExpression(types.identifier('variant'), [
        types.objectExpression([
          types.objectProperty(types.identifier('prop'), types.stringLiteral(variantPropKey)),
          types.objectProperty(types.identifier('variants'), variantExpressions),
        ]),
      ])
    ),
  ])
}

'''
'''--- packages/teleport-plugin-react-styled-components/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-plugin-react-styled-jsx/README.md ---
# teleport-plugin-react-styled-jsx

A plugin for injecting the styles as a styled-jsx tag inside React components.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-plugin-react-styled-jsx
```
or
```bash
yarn add @teleporthq/teleport-plugin-react-styled-jsx
```

'''
'''--- packages/teleport-plugin-react-styled-jsx/__tests__/component-scoped.ts ---
/* tslint:disable no-string-literal */
import { createReactStyledJSXPlugin } from '../src'
import { staticNode, elementNode, component } from '@teleporthq/teleport-uidl-builders'
import { ComponentStructure } from '@teleporthq/teleport-types'
import { createComponentChunk } from './mocks'

describe('Component Scoped Styles', () => {
  const uidl = component('MYComponent', elementNode('container', {}, [], null, {}), {}, {})
  uidl.styleSetDefinitions = {
    'primary-navbar': {
      type: 'reusable-component-style-map',
      content: {
        width: staticNode('100px'),
        height: staticNode('200px'),
      },
    },
    secondaryNavbar: {
      type: 'reusable-component-style-map',
      content: {
        height: staticNode('50px'),
        width: staticNode('50px'),
      },
    },
  }

  it('Generates component-scoped style sheet', async () => {
    const plugin = createReactStyledJSXPlugin()
    const structure: ComponentStructure = {
      uidl,
      chunks: [createComponentChunk()],
      dependencies: {},
      options: {},
    }
    const { chunks } = await plugin(structure)
    const styles =
      chunks[0].content.declarations[0].init.body.body[0].argument.children[1].children[0]
        .expression.quasis[0].value.raw

    expect(chunks.length).toBe(1)
    expect(styles).toContain('primary-navbar')
    expect(styles).toContain('.secondary-navbar')
  })

  it('Generates style sheet and adds them to the node with JSX template', async () => {
    const plugin = createReactStyledJSXPlugin()
    uidl.node.content.referencedStyles = {
      '12345678': {
        type: 'style-map',
        content: {
          mapType: 'component-referenced',
          content: staticNode('md-8'),
        },
      },
      '910111213': {
        type: 'style-map',
        content: {
          mapType: 'component-referenced',
          content: {
            type: 'dynamic',
            content: {
              referenceType: 'comp',
              id: 'primary-navbar',
            },
          },
        },
      },
      '1415161718': {
        type: 'style-map',
        content: {
          mapType: 'component-referenced',
          content: {
            type: 'dynamic',
            content: {
              referenceType: 'prop',
              id: 'variant',
            },
          },
        },
      },
    }
    const structure: ComponentStructure = {
      uidl,
      chunks: [createComponentChunk()],
      dependencies: {},
      options: {},
    }

    const { chunks } = await plugin(structure)
    const jsxComponent = chunks.find((chunk) => chunk.name === 'jsx-component')
    const jsxExpression = jsxComponent.meta.nodesLookup.container.openingElement
    const dynamicExpression = jsxExpression.attributes[0].value.expression.expressions[0]

    expect(jsxExpression.attributes[0].value.expression.quasis[0].value.raw).toContain(
      'md-8 primary-navbar '
    )
    expect(dynamicExpression.object.name).toBe('props')
    expect(dynamicExpression.property.name).toBe('variant')
  })
})

'''
'''--- packages/teleport-plugin-react-styled-jsx/__tests__/index.ts ---
import { component, elementNode } from '@teleporthq/teleport-uidl-builders'
import { ComponentStructure } from '@teleporthq/teleport-types'
import { createReactStyledJSXPlugin } from '../src/index'
import { createComponentChunk } from './mocks'

describe('plugin-react-styled-jsx', () => {
  const plugin = createReactStyledJSXPlugin()

  it('adds nothing on the AST if not styles are defined', async () => {
    const uidlSample = component('StyledJSX', elementNode('container'))
    uidlSample.node.content.key = 'container'
    const componentChunk = createComponentChunk()
    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {},
      chunks: [componentChunk],
      dependencies: {},
    }

    const oldStructure = JSON.stringify(structure)
    await plugin(structure)
    const newStructure = JSON.stringify(structure)

    expect(oldStructure).toBe(newStructure)
  })
})

'''
'''--- packages/teleport-plugin-react-styled-jsx/__tests__/mocks.ts ---
import { ChunkDefinition, ChunkType, FileType } from '@teleporthq/teleport-types'

export const createComponentChunk = (): ChunkDefinition => {
  return {
    name: 'jsx-component',
    meta: {
      nodesLookup: {
        container: {
          openingElement: {
            name: {
              name: 'div',
            },
            attributes: [],
          },
          children: [],
        },
        group: {
          openingElement: {
            name: {
              name: 'Fragment',
            },
            attributes: [],
          },
          children: [],
        },
      },
      dynamicRefPrefix: {
        prop: 'props',
      },
    },
    type: ChunkType.AST,
    fileType: FileType.JS,
    linkAfter: ['import-local'],
    content: {
      declarations: [
        {
          init: {
            body: {
              body: [
                {
                  type: 'ReturnStatement',
                  argument: {
                    children: [],
                  },
                },
              ],
            },
          },
        },
      ],
    },
  }
}

'''
'''--- packages/teleport-plugin-react-styled-jsx/__tests__/referenced-styles.ts ---
import { ComponentStructure } from '@teleporthq/teleport-types'
import { createReactStyledJSXPlugin } from '../src'
import { component, elementNode, staticNode } from '@teleporthq/teleport-uidl-builders'
import { createComponentChunk } from './mocks'

describe('Referenced Styles on Node', () => {
  const componentChunk = createComponentChunk()
  const uidl = component('MyComponent', elementNode('container', null, [], null, null, null, null))

  it('Media and pseudo styles are generated from referencedStyles', async () => {
    const plugin = createReactStyledJSXPlugin()
    uidl.node.content.referencedStyles = {
      '5ed659b1732f9b804f7b6381': {
        type: 'style-map',
        content: {
          mapType: 'inlined',
          conditions: [{ conditionType: 'screen-size', maxWidth: 991 }],
          styles: {
            display: staticNode('none'),
          },
        },
      },
      '5ed659b1732f9b804f7b6382': {
        type: 'style-map',
        content: {
          mapType: 'inlined',
          conditions: [{ conditionType: 'element-state', content: 'hover' }],
          styles: {
            display: staticNode('none'),
          },
        },
      },
    }
    uidl.node.content.key = 'container'

    const structure: ComponentStructure = {
      uidl,
      chunks: [componentChunk],
      dependencies: {},
      options: {},
    }

    const result = await plugin(structure)
    const { chunks } = result
    const jsxComponent = chunks.find((chunk) => chunk.name === 'jsx-component')
    const styleSheet =
      jsxComponent.content.declarations[0].init.body.body[0].argument.children[1].children[0]
        .expression.quasis[0].value
    expect(styleSheet.raw).toContain(`@media(max-width: 991px)`)
  })
})

'''
'''--- packages/teleport-plugin-react-styled-jsx/__tests__/utils.ts ---
import { generateStyledJSXTag } from '../src/utils'

describe('generateStyledJSXTag', () => {
  it('returns JSXTag', () => {
    const result = generateStyledJSXTag('randomString')

    expect(result.type).toBe('JSXElement')
    expect(result.openingElement.type).toBe('JSXOpeningElement')
    expect(result.openingElement.name).toHaveProperty('name', 'style')
    expect(result.closingElement.type).toBe('JSXClosingElement')
    expect(result.closingElement.name).toHaveProperty('name', 'style')
  })
})

'''
'''--- packages/teleport-plugin-react-styled-jsx/package.json ---
{
  "name": "@teleporthq/teleport-plugin-react-styled-jsx",
  "version": "0.29.0",
  "description": "A plugin for injecting the styles as a styled-jsx tag inside React components",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@babel/types": "^7.5.5",
    "@teleporthq/teleport-plugin-common": "^0.29.0",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-plugin-react-styled-jsx/src/index.ts ---
import { StringUtils, UIDLUtils } from '@teleporthq/teleport-shared'
import { ASTUtils, StyleBuilders, ASTBuilders } from '@teleporthq/teleport-plugin-common'
import {
  ComponentPluginFactory,
  ComponentPlugin,
  UIDLStyleValue,
  PluginStyledJSX,
} from '@teleporthq/teleport-types'
import { generateStyledJSXTag } from './utils'
import * as types from '@babel/types'

interface StyledJSXConfig {
  componentChunkName: string
  forceScoping: boolean
}

export const createReactStyledJSXPlugin: ComponentPluginFactory<StyledJSXConfig> = (config) => {
  const { componentChunkName = 'jsx-component', forceScoping = false } = config || {}

  const reactStyledJSXPlugin: ComponentPlugin = async (structure) => {
    const { uidl, chunks, options } = structure
    const { projectStyleSet } = options
    const { node, styleSetDefinitions: componentStyleSheet = {}, propDefinitions = {} } = uidl

    const componentChunk = chunks.find((chunk) => chunk.name === componentChunkName)
    if (!componentChunk) {
      return structure
    }

    const jsxNodesLookup = componentChunk.meta.nodesLookup as Record<string, types.JSXElement>
    const propsPrefix = componentChunk.meta.dynamicRefPrefix.prop as string
    const mediaStylesMap: Record<
      string,
      Array<{ [x: string]: Record<string, string | number> }>
    > = {}
    const classMap: string[] = []

    const transformStyle = (style: Record<string, UIDLStyleValue>) =>
      UIDLUtils.transformDynamicStyles(style, (styleValue) => {
        switch (styleValue.content.referenceType) {
          case 'token':
            return `var(${StringUtils.generateCSSVariableName(styleValue.content.id)})`
          case 'prop':
            return `\$\{${propsPrefix}.${styleValue.content.id}\}`
          default:
            throw new PluginStyledJSX(
              `Error running transformDynamicStyles in reactStyledJSXChunkPlugin.\n
              Unsupported styleValue.content.referenceType value ${styleValue.content.referenceType}`
            )
        }
      })

    UIDLUtils.traverseElements(node, (element) => {
      const classNamesToAppend: Set<string> = new Set()
      const dynamicVariantsToAppend: Set<types.Identifier | types.MemberExpression> = new Set()
      const {
        style = {},
        key,
        referencedStyles = {},
        attrs = {},
        dependency,
        elementType,
      } = element
      const elementClassName = StringUtils.camelCaseToDashCase(key)
      const className = getClassName(forceScoping, uidl.name, elementClassName)

      if (forceScoping && dependency?.type === 'local') {
        StyleBuilders.setPropValueForCompStyle({
          key,
          jsxNodesLookup,
          attrs,
          getClassName: (str: string) =>
            getClassName(forceScoping, StringUtils.camelCaseToDashCase(elementType), str),
        })
      }

      if (Object.keys(style).length === 0 && Object.keys(referencedStyles).length === 0) {
        return
      }

      const root = jsxNodesLookup[key]

      // Generating the string templates for the dynamic styles
      if (Object.keys(style).length > 0) {
        const styleRules = transformStyle(style)
        classMap.push(StyleBuilders.createCSSClass(className, styleRules))
        classNamesToAppend.add(className)
      }

      Object.values(referencedStyles).forEach((styleRef) => {
        switch (styleRef.content.mapType) {
          case 'inlined': {
            const condition = styleRef.content.conditions[0]
            if (condition.conditionType === 'screen-size') {
              const { maxWidth } = condition
              if (!mediaStylesMap[String(maxWidth)]) {
                mediaStylesMap[String(maxWidth)] = []
              }

              mediaStylesMap[String(maxWidth)].push({
                [className]: transformStyle(styleRef.content.styles),
              })
            }

            if (condition.conditionType === 'element-state') {
              classMap.push(
                StyleBuilders.createCSSClassWithSelector(
                  className,
                  `&:${condition.content}`,
                  transformStyle(styleRef.content.styles)
                )
              )
            }

            classNamesToAppend.add(className)
            return
          }

          case 'component-referenced': {
            if (styleRef.content.content.type === 'static') {
              classNamesToAppend.add(String(styleRef.content.content.content))
            }

            if (
              styleRef.content.content.type === 'dynamic' &&
              styleRef.content.content.content.referenceType === 'prop'
            ) {
              dynamicVariantsToAppend.add(
                types.memberExpression(
                  types.identifier(propsPrefix),
                  types.identifier(styleRef.content.content.content.id)
                )
              )
              const defaultPropValue =
                propDefinitions[styleRef.content.content.content.id]?.defaultValue
              if (!defaultPropValue) {
                return
              }

              propDefinitions[styleRef.content.content.content.id].defaultValue = getClassName(
                forceScoping,
                uidl.name,
                String(defaultPropValue)
              )
            }

            if (
              styleRef.content.content.type === 'dynamic' &&
              styleRef.content.content.content.referenceType === 'comp'
            ) {
              classNamesToAppend.add(
                getClassName(forceScoping, uidl.name, styleRef.content.content.content.id)
              )
            }

            return
          }

          case 'project-referenced': {
            const { content } = styleRef
            const referedStyle = projectStyleSet.styleSetDefinitions[content.referenceId]
            if (!referedStyle) {
              throw new PluginStyledJSX(`Project style - ${content.referenceId} is missing`)
            }

            classNamesToAppend.add(content.referenceId)
            return
          }

          default: {
            throw new PluginStyledJSX(
              `Un-supported style reference ${JSON.stringify(styleRef.content, null, 2)}`
            )
          }
        }
      })

      ASTUtils.addClassStringOnJSXTag(
        root as types.JSXElement,
        Array.from(classNamesToAppend).join(' '),
        'className',
        Array.from(dynamicVariantsToAppend)
      )
    })

    /* Generating component scoped styles */
    if (Object.keys(componentStyleSheet).length > 0) {
      StyleBuilders.generateStylesFromStyleSetDefinitions(
        componentStyleSheet,
        classMap,
        mediaStylesMap,
        (styleName: string) => getClassName(forceScoping, uidl.name, styleName)
      )
    }

    if (Object.keys(mediaStylesMap).length > 0) {
      classMap.push(...StyleBuilders.generateMediaStyle(mediaStylesMap))
    }

    if (classMap.length === 0) {
      return structure
    }

    const styleJSXAST = generateStyledJSXTag(classMap.join('\n'))
    // We have the ability to insert the tag into the existig JSX structure, or do something else with it.
    // Here we take the JSX <style> tag and we insert it as the last child of the JSX structure
    // inside the React Component
    let rootJSXNode = jsxNodesLookup[uidl.node.content.key]

    const originalRootNode = rootJSXNode
    rootJSXNode = ASTBuilders.createJSXTag('')
    rootJSXNode.children.push(originalRootNode)

    // fetching the AST parent of the root JSXNode
    // We need to replace the root node with a fragment <>
    // The fragment will be the parent of both the old root JSXNode and the style tag
    const componentAST = componentChunk.content as types.VariableDeclaration
    const arrowFnExpr = componentAST.declarations[0].init as types.ArrowFunctionExpression
    const bodyStatement = arrowFnExpr.body as types.BlockStatement
    const returnStatement = bodyStatement.body.find(
      (statement) => statement.type === 'ReturnStatement'
    )

    if (!returnStatement) {
      throw new PluginStyledJSX(`Return Statement is missing from the component AST`)
    }
    ;(returnStatement as types.ReturnStatement).argument = rootJSXNode

    rootJSXNode.children.push(styleJSXAST)
    return structure
  }

  return reactStyledJSXPlugin
}

export default createReactStyledJSXPlugin()

const getClassName = (scoping: boolean, uidlName: string, nodeStyleName: string) => {
  return scoping
    ? StringUtils.camelCaseToDashCase(`${uidlName}-${nodeStyleName}`)
    : StringUtils.camelCaseToDashCase(nodeStyleName)
}

'''
'''--- packages/teleport-plugin-react-styled-jsx/src/utils.ts ---
import * as types from '@babel/types'
import { ASTUtils, ASTBuilders } from '@teleporthq/teleport-plugin-common'

export const generateStyledJSXTag = (content: string): types.JSXElement => {
  const templateLiteral = ASTUtils.stringAsTemplateLiteral(content)
  const styleContent = ASTBuilders.createJSXExpresionContainer(templateLiteral)
  const styleTag = ASTBuilders.createJSXTag('style', [styleContent])
  ASTUtils.addChildJSXText(styleTag, '\n') // for better formatting
  ASTUtils.addAttributeToJSXTag(styleTag, 'jsx')
  return styleTag
}

'''
'''--- packages/teleport-plugin-react-styled-jsx/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-plugin-vue-app-routing/README.md ---
# `@teleporthq/teleport-plugin-vue-app-routing`

A plugin for generating the routing file for a Vue project.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-plugin-vue-app-routing
```
or
```bash
yarn add @teleporthq/teleport-plugin-vue-app-routing
```

'''
'''--- packages/teleport-plugin-vue-app-routing/__tests__/index.ts ---
import { createVueAppRoutingPlugin } from '../src/index'
import {
  component,
  elementNode,
  conditionalNode,
  dynamicNode,
  definition,
} from '@teleporthq/teleport-uidl-builders'
import { ComponentStructure, ChunkType, UIDLStateDefinition } from '@teleporthq/teleport-types'

describe('plugin-vue-app-routing', () => {
  const plugin = createVueAppRoutingPlugin({
    codeChunkName: 'code-chunk',
  })

  it('outputs three AST chunks with the corresponding chunk names', async () => {
    const routeDefinition: UIDLStateDefinition = definition('string', 'home')
    routeDefinition.values = [
      { value: 'home', pageOptions: { fileName: 'home', componentName: 'Home', navLink: '/' } },
      {
        value: 'about',
        pageOptions: { fileName: 'about', componentName: 'About', navLink: '/about' },
      },
      {
        value: 'contact',
        pageOptions: { fileName: 'contact', componentName: 'Contact', navLink: '/contact' },
      },
    ]
    const structure: ComponentStructure = {
      chunks: [],
      options: {},
      uidl: component(
        'Test',
        elementNode('Router', {}, [
          conditionalNode(dynamicNode('state', 'route'), elementNode('container'), 'home'),
          conditionalNode(dynamicNode('state', 'route'), elementNode('container'), 'about'),
          conditionalNode(dynamicNode('state', 'route'), elementNode('container'), 'contact'),
        ]),
        {},
        {
          route: routeDefinition,
        }
      ),
      dependencies: {},
    }
    const result = await plugin(structure)

    // no change to the input UIDL
    expect(JSON.stringify(result.uidl)).toBe(JSON.stringify(structure.uidl))

    // AST chunks created
    expect(result.chunks.length).toBe(1)
    expect(result.chunks[0].type).toBe(ChunkType.AST)
    expect(result.chunks[0].content).toBeDefined()
    expect(result.chunks[0].content.length).toBe(3)
    expect(result.chunks[0].name).toBe('code-chunk')

    // Dependencies
    expect(result.dependencies.Vue).toBeDefined()
    expect(result.dependencies.Router).toBeDefined()
  })
})

'''
'''--- packages/teleport-plugin-vue-app-routing/package.json ---
{
  "name": "@teleporthq/teleport-plugin-vue-app-routing",
  "version": "0.29.2",
  "description": "A plugin for generating the routing file for a Vue project",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@babel/types": "^7.5.5",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-plugin-vue-app-routing/src/index.ts ---
import * as types from '@babel/types'
import { UIDLUtils } from '@teleporthq/teleport-shared'
import {
  ComponentPluginFactory,
  ComponentPlugin,
  ChunkType,
  FileType,
  UIDLPageOptions,
  UIDLRootComponent,
  UIDLRouteDefinitions,
} from '@teleporthq/teleport-types'
import { join } from 'path'

interface VueRouterConfig {
  codeChunkName: string
  importChunkName: string
}

export const createVueAppRoutingPlugin: ComponentPluginFactory<VueRouterConfig> = (config) => {
  const { codeChunkName = 'vue-router', importChunkName = 'import-local' } = config || {}

  const vueAppRoutingPlugin: ComponentPlugin = async (structure) => {
    const { chunks, uidl, dependencies, options } = structure

    if (!uidl?.stateDefinitions?.route) {
      return structure
    }

    dependencies.Vue = {
      type: 'library',
      path: 'vue',
      version: '^2.6.7',
    }
    dependencies.Router = {
      type: 'library',
      path: 'vue-router',
      version: '^3.0.2',
    }
    dependencies.Meta = {
      type: 'library',
      path: 'vue-meta',
      version: '^2.2.1',
    }

    const routerDeclaration = types.expressionStatement(
      types.callExpression(types.identifier('Vue.use'), [types.identifier('Router')])
    )

    const metaDeclaration = types.expressionStatement(
      types.callExpression(types.identifier('Vue.use'), [types.identifier('Meta')])
    )

    const routes = UIDLUtils.extractRoutes(uidl as UIDLRootComponent)
    const routeValues = (uidl.stateDefinitions.route as UIDLRouteDefinitions).values || []
    const pageDependencyPrefix = options.localDependenciesPrefix || './'

    /* If pages are exported in their own folder and in custom file names.
         Import statements must then be:

         import Home from '../pages/home/component'

         so the `/component` suffix is computed below.
      */
    const pageStrategyOptions = (options.strategy && options.strategy.pages.options) || {}
    const pageComponentSuffix = pageStrategyOptions.createFolderForEachComponent ? '/index' : ''

    const routesAST = routes.map((routeNode) => {
      const pageKey = routeNode.content.value.toString()

      const pageDefinition = routeValues.find((route) => route.value === pageKey)
      const defaultOptions: UIDLPageOptions = {}
      const { componentName, navLink, fileName } = pageDefinition.pageOptions || defaultOptions

      /*
        Now, navLink is being used to create a folder strucutre.
        So, it is important to append the same when generating the path
      */

      dependencies[componentName] = {
        type: 'local',
        path: `${pageDependencyPrefix}${join(
          ...navLink.split('/')?.slice(0, -1),
          fileName,
          pageComponentSuffix
        )}`,
      }

      return types.objectExpression([
        types.objectProperty(types.identifier('name'), types.stringLiteral(pageKey)),
        types.objectProperty(types.identifier('path'), types.stringLiteral(navLink)),
        types.objectProperty(types.identifier('component'), types.identifier(componentName)),
      ])
    })

    const exportStatement = types.exportDefaultDeclaration(
      types.newExpression(types.identifier('Router'), [
        types.objectExpression([
          types.objectProperty(types.identifier('mode'), types.stringLiteral('history')),
          types.objectProperty(types.identifier('routes'), types.arrayExpression(routesAST)),
        ]),
      ])
    )

    chunks.push({
      name: codeChunkName,
      linkAfter: [importChunkName],
      type: ChunkType.AST,
      fileType: FileType.JS,
      content: [routerDeclaration, metaDeclaration, exportStatement],
    })

    return structure
  }

  return vueAppRoutingPlugin
}

export default createVueAppRoutingPlugin()

'''
'''--- packages/teleport-plugin-vue-app-routing/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-plugin-vue-base-component/README.md ---
# teleport-plugin-vue-base-component

A plugin for handling the skeleton/baseline for a Vue component.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-plugin-vue-base-component
```
or
```bash
yarn add @teleporthq/teleport-plugin-vue-base-component
```

'''
'''--- packages/teleport-plugin-vue-base-component/__tests__/index.ts ---
import { createVueComponentPlugin } from '../src/index'
import { structure } from './mocks'
import { ChunkType, ComponentStructure } from '@teleporthq/teleport-types'
import { component, elementNode } from '@teleporthq/teleport-uidl-builders'
import type { ExportDefaultDeclaration, ObjectExpression, ObjectProperty } from '@babel/types'

describe('vue-base-component-plugin', () => {
  const plugin = createVueComponentPlugin({
    vueJSChunkName: 'component-js',
    vueTemplateChunkName: 'component-html',
  })

  it('outputs two AST chunks with the corresponding chunk names', async () => {
    const result = await plugin(structure)

    // no change to the input UIDL
    expect(JSON.stringify(result.uidl)).toBe(JSON.stringify(structure.uidl))

    // AST chunks created
    expect(result.chunks.length).toBe(2)
    expect(result.chunks[0].type).toBe(ChunkType.HAST)
    expect(result.chunks[0].content).toBeDefined()
    expect(result.chunks[0].name).toBe('component-html')
    expect(result.chunks[1].type).toBe(ChunkType.AST)
    expect(result.chunks[1].content).toBeDefined()
    expect(result.chunks[1].name).toBe('component-js')

    // Dependencies
    expect(Object.keys(result.dependencies).length).toBe(0)
  })

  it('creates default void function for props with type as func', async () => {
    const defaultFuncStructure: ComponentStructure = {
      chunks: [],
      options: {},
      uidl: component(
        'Test',
        elementNode(
          'container',
          null,
          [],
          null,
          {},
          { click: [{ type: 'propCall', calls: 'onChange' }] }
        ),
        {
          onChange: {
            type: 'func',
            defaultValue: '() => {}',
          },
        }
      ),
      dependencies: {},
    }
    const { chunks } = await plugin(defaultFuncStructure)
    const jsChunk = chunks.find((chunk) => chunk.name === 'component-js')
    const properties = (
      (jsChunk.content as ExportDefaultDeclaration).declaration as ObjectExpression
    ).properties
    const defaultFunc = ((properties[1] as ObjectProperty).value as ObjectExpression).properties
    const funcProperty = ((defaultFunc[0] as ObjectProperty).value as ObjectExpression)
      .properties[0] as ObjectProperty

    expect(jsChunk).toBeDefined()
    expect(funcProperty.value.type).toBe('ArrowFunctionExpression')
  })
})

'''
'''--- packages/teleport-plugin-vue-base-component/__tests__/mocks.ts ---
import componentUIDLSample from '../../../examples/test-samples/component-sample.json'
import { ComponentUIDL } from '@teleporthq/teleport-types'

export const structure = {
  chunks: [],
  options: {},
  uidl: componentUIDLSample as ComponentUIDL,
  dependencies: {},
}

'''
'''--- packages/teleport-plugin-vue-base-component/package.json ---
{
  "name": "@teleporthq/teleport-plugin-vue-base-component",
  "version": "0.29.0",
  "description": "A plugin for handling the skeleton/baseline for a Vue component",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@babel/types": "^7.5.5",
    "@teleporthq/teleport-plugin-common": "^0.29.0",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-plugin-vue-base-component/src/constants.ts ---
export const DEFAULT_VUE_TEMPLATE_CHUNK_NAME = 'template-chunk'

export const DEFAULT_VUE_JS_CHUNK_NAME = 'vue-js-chunk'

export const DEFAULT_JS_CHUNK_AFTER = ['import-lib', 'import-pack', 'import-local']

'''
'''--- packages/teleport-plugin-vue-base-component/src/index.ts ---
import { generateVueComponentJS, extractStateObject } from './utils'
import {
  ComponentPluginFactory,
  ComponentPlugin,
  FileType,
  ChunkType,
  UIDLEventHandlerStatement,
} from '@teleporthq/teleport-types'
import { createHTMLTemplateSyntax } from '@teleporthq/teleport-plugin-common'
import { UIDLUtils } from '@teleporthq/teleport-shared'

import {
  DEFAULT_VUE_TEMPLATE_CHUNK_NAME,
  DEFAULT_VUE_JS_CHUNK_NAME,
  DEFAULT_JS_CHUNK_AFTER,
} from './constants'

interface VueComponentConfig {
  vueTemplateChunkName: string
  vueJSChunkName: string
  jsChunkAfter: string[]
}

export const createVueComponentPlugin: ComponentPluginFactory<VueComponentConfig> = (config) => {
  const {
    vueTemplateChunkName = DEFAULT_VUE_TEMPLATE_CHUNK_NAME,
    vueJSChunkName = DEFAULT_VUE_JS_CHUNK_NAME,
    jsChunkAfter = DEFAULT_JS_CHUNK_AFTER,
  } = config || {}

  const vueComponentPlugin: ComponentPlugin = async (structure) => {
    const { uidl, chunks, dependencies } = structure
    const templateLookup: { [key: string]: unknown } = {}
    const dataObject: Record<string, unknown> = {}
    const methodsObject: Record<string, UIDLEventHandlerStatement[]> = {}

    const templateContent = createHTMLTemplateSyntax(
      uidl.node,
      {
        templateLookup,
        dependencies,
        dataObject,
        methodsObject,
      },
      {
        interpolation: (value) => `{{ ${value} }}`,
        eventBinding: (value) => `@${value}`,
        valueBinding: (value) => `:${value}`,
        eventEmmitter: (value) => `this.$emit('${value}')`,
        conditionalAttr: 'v-if',
        repeatAttr: 'v-for',
        repeatIterator: (iteratorName, iteratedCollection, useIndex) => {
          const iterator = useIndex ? `(${iteratorName}, index)` : iteratorName
          return `${iterator} in ${iteratedCollection}`
        },
        customElementTagName: (value) => UIDLUtils.createWebComponentFriendlyName(value),
        dependencyHandling: 'import',
        domHTMLInjection: `v-html`,
      }
    )

    chunks.push({
      type: ChunkType.HAST,
      name: vueTemplateChunkName,
      fileType: FileType.HTML,
      meta: {
        nodesLookup: templateLookup,
      },
      content: templateContent,
      linkAfter: [],
    })

    const stateObject = uidl.stateDefinitions ? extractStateObject(uidl.stateDefinitions) : {}

    const jsContent = generateVueComponentJS(
      uidl,
      Object.keys(dependencies).filter((dep) => !dependencies[dep]?.meta?.importJustPath),
      {
        ...stateObject,
        ...dataObject,
      },
      methodsObject
    )

    chunks.push({
      type: ChunkType.AST,
      name: vueJSChunkName,
      fileType: FileType.JS,
      linkAfter: jsChunkAfter,
      content: jsContent,
    })

    return structure
  }

  return vueComponentPlugin
}

export default createVueComponentPlugin()

'''
'''--- packages/teleport-plugin-vue-base-component/src/utils.ts ---
import * as types from '@babel/types'

import { UIDLUtils } from '@teleporthq/teleport-shared'
import { ASTUtils, ASTBuilders, ParsedASTNode } from '@teleporthq/teleport-plugin-common'
import {
  UIDLPropDefinition,
  UIDLStateDefinition,
  UIDLEventHandlerStatement,
  ComponentUIDL,
  UIDLPropCallEvent,
} from '@teleporthq/teleport-types'

export const extractStateObject = (stateDefinitions: Record<string, UIDLStateDefinition>) => {
  return Object.keys(stateDefinitions).reduce((result: Record<string, unknown>, key) => {
    result[key] = stateDefinitions[key].defaultValue
    return result
  }, {})
}

export const generateVueComponentJS = (
  uidl: ComponentUIDL,
  componentDependencies: string[],
  dataObject: Record<string, unknown>,
  methodsObject: Record<string, UIDLEventHandlerStatement[]>,
  t = types
) => {
  const vueObjectProperties = []

  const { importDefinitions = {} } = uidl

  if (uidl.propDefinitions) {
    const props = createVuePropsDefinition(uidl.propDefinitions)
    const propsAST = ASTUtils.objectToObjectExpression(props)
    vueObjectProperties.push(t.objectProperty(t.identifier('props'), propsAST))
  }

  if (componentDependencies.length) {
    const componentsAST = t.objectExpression([
      ...componentDependencies.map((declarationName) => {
        return t.objectProperty(
          t.identifier(declarationName),
          t.identifier(declarationName),
          false,
          true
        )
      }),
    ])
    vueObjectProperties.push(t.objectProperty(t.identifier('components'), componentsAST))
  }

  if (Object.keys(dataObject).length > 0 || Object.keys(importDefinitions).length > 0) {
    const dataAST = ASTUtils.objectToObjectExpression(dataObject)

    Object.keys(importDefinitions).forEach((importRef) => {
      if (!importDefinitions[importRef].meta?.importJustPath) {
        dataAST.properties.push(t.objectProperty(t.identifier(importRef), t.identifier(importRef)))
      }
    })

    vueObjectProperties.push(
      t.objectMethod(
        'method',
        t.identifier('data'),
        [],
        t.blockStatement([t.returnStatement(dataAST)])
      )
    )
  }

  if (Object.keys(methodsObject).length > 0) {
    const methodsAST = createMethodsObject(methodsObject, uidl.propDefinitions)
    vueObjectProperties.push(
      t.objectProperty(t.identifier('methods'), t.objectExpression(methodsAST))
    )
  }

  const componentName = UIDLUtils.getComponentClassName(uidl)

  return t.exportDefaultDeclaration(
    t.objectExpression([
      t.objectProperty(t.identifier('name'), t.stringLiteral(componentName)),
      ...vueObjectProperties,
    ])
  )
}

const createVuePropsDefinition = (
  uidlPropDefinitions: Record<string, UIDLPropDefinition>,
  t = types
) => {
  // tslint:disable-next-line no-any
  return Object.keys(uidlPropDefinitions).reduce((acc: { [key: string]: any }, name) => {
    let mappedType
    const { type, defaultValue, isRequired } = uidlPropDefinitions[name]
    switch (type) {
      case 'string':
      case 'raw':
        mappedType = String
        break
      case 'number':
        mappedType = Number
        break
      case 'boolean':
        mappedType = Boolean
        break
      case 'array':
        mappedType = Array
        break
      case 'object':
        mappedType = Object
        break
      case 'func':
        mappedType = Function
        break
      default:
        // don't handle anything else
        throw new Error(
          `createVuePropsDefinition encountered a unknown PropDefinition, ${JSON.stringify(
            uidlPropDefinitions[name]
          )}`
        )
    }

    let defaultPropValue = null

    if (type === 'func') {
      defaultPropValue = new ParsedASTNode(
        types.arrowFunctionExpression([], types.blockStatement([]))
      )
    } else if (defaultValue !== undefined) {
      defaultPropValue =
        type === 'array' || type === 'object'
          ? new ParsedASTNode(
              t.arrowFunctionExpression([], ASTUtils.convertValueToLiteral(defaultValue))
            )
          : defaultValue
    }

    acc[name] = defaultPropValue ? { type: mappedType, default: defaultPropValue } : mappedType
    acc[name] = isRequired ? { required: isRequired, ...acc[name] } : acc[name]

    return acc
  }, {})
}

const createMethodsObject = (
  methods: Record<string, UIDLEventHandlerStatement[]>,
  propDefinitions: Record<string, UIDLPropDefinition>,
  t = types
) => {
  return Object.keys(methods).map((eventKey) => {
    const astStatements: types.ExpressionStatement[] = []
    methods[eventKey].map((statement) => {
      const astStatement =
        statement.type === 'propCall'
          ? createPropCallStatement(statement, propDefinitions)
          : ASTBuilders.createStateChangeStatement(statement)

      if (astStatement) {
        astStatements.push(astStatement)
      }
    })
    return t.objectMethod('method', t.identifier(eventKey), [], t.blockStatement(astStatements))
  })
}

export const createPropCallStatement = (
  eventHandlerStatement: UIDLPropCallEvent,
  propDefinitions: Record<string, UIDLPropDefinition>,
  t = types
) => {
  const { calls: propFunctionKey, args = [] } = eventHandlerStatement

  if (!propFunctionKey) {
    console.warn(`No prop definition referenced under the "calls" field`)
    return null
  }

  const propDefinition = propDefinitions[propFunctionKey]

  if (!propDefinition) {
    console.warn(`No prop definition was found for function "${propFunctionKey}"`)
    return null
  }

  // In vue it's favorable to use $emit for a specific event than sending the function as a prop
  return t.expressionStatement(
    t.callExpression(t.identifier('this.$emit'), [
      t.stringLiteral(propFunctionKey),
      ...args.map((arg) => ASTUtils.convertValueToLiteral(arg)),
    ])
  )
}

'''
'''--- packages/teleport-plugin-vue-base-component/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-plugin-vue-head-config/README.md ---
# teleport-plugin-vue-head-config

A plugin for generating `<head>` tags inside regular vue components

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-plugin-vue-head-config
```
or
```bash
yarn add @teleporthq/teleport-plugin-vue-head-config
```

'''
'''--- packages/teleport-plugin-vue-head-config/__tests__/index.ts ---
import * as types from '@babel/types'
import { createVueHeadConfigPlugin } from '../src'
import { component, elementNode } from '@teleporthq/teleport-uidl-builders'
import {
  ComponentStructure,
  ChunkType,
  FileType,
  ChunkDefinition,
} from '@teleporthq/teleport-types'

describe('plugin-vue-head-config', () => {
  const plugin = createVueHeadConfigPlugin()

  it('Should throw error when the chunk is supplied', async () => {
    const uidlSample = component('SimpleComponent', elementNode('container'))
    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {},
      chunks: [],
      dependencies: {},
    }
    try {
      await plugin(structure)
    } catch (e) {
      expect(e.message).toContain('JS component chunk with name')
    }
  })

  it('Should set the title in head object of the component', async () => {
    const uidlSample = component('SimpleComponent', elementNode('container'))
    uidlSample.node.content.key = 'container'
    uidlSample.seo = {
      title: 'Test Title',
    }

    const jsChunk: ChunkDefinition = {
      type: ChunkType.AST,
      fileType: FileType.JS,
      name: 'vue-js-chunk',
      content: {
        declaration: {
          properties: [],
        },
      },
      linkAfter: [],
    }

    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {},
      chunks: [jsChunk],
      dependencies: {},
    }

    await plugin(structure)

    const headProperty = jsChunk.content.declaration.properties[0] as types.ObjectProperty
    expect((headProperty.key as types.Identifier).name).toBe('head')

    const headObject = headProperty.value as types.ObjectExpression
    const titleProperty = headObject.properties[0] as types.ObjectProperty

    expect(titleProperty.key.value).toBe('title')
    expect((titleProperty.value as types.StringLiteral).value).toBe('Test Title')
  })

  it('Sets the meta tags in the component object', async () => {
    const uidlSample = component('SimpleComponent', elementNode('container'))
    uidlSample.node.content.key = 'container'
    uidlSample.seo = {
      metaTags: [
        {
          name: 'description',
          value: 'test',
        },
        {
          randomKey: 'randomValue',
        },
      ],
    }

    const jsChunk: ChunkDefinition = {
      type: ChunkType.AST,
      fileType: FileType.JS,
      name: 'vue-js-chunk',
      content: {
        declaration: {
          properties: [],
        },
      },
      linkAfter: [],
    }

    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {},
      chunks: [jsChunk],
      dependencies: {},
    }

    await plugin(structure)

    const headProperty = jsChunk.content.declaration.properties[0] as types.ObjectProperty
    expect((headProperty.key as types.Identifier).name).toBe('head')

    const headObject = headProperty.value as types.ObjectExpression
    const metaProperty = headObject.properties[0] as types.ObjectProperty

    expect(metaProperty.key.value).toBe('meta')
  })

  it('Sets the link tag for the canonical in the component object', async () => {
    const uidlSample = component('SimpleComponent', elementNode('container'))
    uidlSample.node.content.key = 'container'
    uidlSample.seo = {
      assets: [
        {
          type: 'canonical',
          path: 'https://teleporthq.io',
        },
      ],
    }

    const jsChunk: ChunkDefinition = {
      type: ChunkType.AST,
      fileType: FileType.JS,
      name: 'vue-js-chunk',
      content: {
        declaration: {
          properties: [],
        },
      },
      linkAfter: [],
    }

    const structure: ComponentStructure = {
      uidl: uidlSample,
      options: {},
      chunks: [jsChunk],
      dependencies: {},
    }

    await plugin(structure)

    const headProperty = jsChunk.content.declaration.properties[0] as types.ObjectProperty
    expect((headProperty.key as types.Identifier).name).toBe('head')

    const headObject = headProperty.value as types.ObjectExpression
    const linkProperty = headObject.properties[0] as types.ObjectProperty

    expect(linkProperty.key.value).toBe('link')
  })
})

'''
'''--- packages/teleport-plugin-vue-head-config/package.json ---
{
  "name": "@teleporthq/teleport-plugin-vue-head-config",
  "version": "0.29.0",
  "description": "A plugin for generating `<head>` tags inside regular vue components",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@babel/types": "^7.5.5",
    "@teleporthq/teleport-plugin-common": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-plugin-vue-head-config/src/index.ts ---
import { ComponentPluginFactory, ComponentPlugin, UIDLMetaTag } from '@teleporthq/teleport-types'
import * as types from '@babel/types'
import { ASTUtils } from '@teleporthq/teleport-plugin-common'

interface VueMetaPluginConfig {
  vueJSChunkName?: string
  metaObjectKey?: string
}

export const createVueHeadConfigPlugin: ComponentPluginFactory<VueMetaPluginConfig> = (config) => {
  const { vueJSChunkName = 'vue-js-chunk', metaObjectKey = 'head' } = config || {}

  const vueHeadConfigPlugin: ComponentPlugin = async (structure) => {
    const { uidl, chunks } = structure

    const componentChunk = chunks.find((chunk) => chunk.name === vueJSChunkName)
    if (!componentChunk) {
      throw new Error(`JS component chunk with name ${vueJSChunkName} was required and not found.`)
    }

    const headObject: {
      title?: string
      meta?: UIDLMetaTag[]
      link?: Array<Record<string, string>>
    } = {}

    if (uidl.seo && uidl.seo.title) {
      headObject.title = uidl.seo.title
    }

    if (uidl.seo && uidl.seo.metaTags) {
      headObject.meta = uidl.seo.metaTags
    }

    if (uidl.seo.assets) {
      uidl.seo.assets.forEach((asset) => {
        // TODO: Handle other asset types when needed
        if (asset.type === 'canonical') {
          headObject.link = [{ rel: 'canonical', href: asset.path }]
        }
      })
    }

    if (Object.keys(headObject).length > 0) {
      // @ts-ignore
      const exportObjectAST = componentChunk.content.declaration as types.ObjectExpression
      exportObjectAST.properties.push(
        types.objectProperty(
          types.identifier(metaObjectKey),
          ASTUtils.objectToObjectExpression(headObject)
        )
      )
    }

    return structure
  }

  return vueHeadConfigPlugin
}

export default createVueHeadConfigPlugin()

'''
'''--- packages/teleport-plugin-vue-head-config/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-postprocessor-prettier-html/README.md ---
# teleport-postprocessor-prettier-html

A post-processing function that formats html code chunks using prettier and the prettier-html plugin.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-postprocessor-prettier-html
```
or
```bash
yarn add @teleporthq/teleport-postprocessor-prettier-html
```

'''
'''--- packages/teleport-postprocessor-prettier-html/__tests__/index.ts ---
import processor from '../src'

describe('prettier html', () => {
  it('formats only the html chunk', () => {
    const inputChunks = {
      html: `<div><span >Format me!</span> 
  </div>`,
      js: `import React from "react"; import {Link} from "react-router"`,
    }

    const result = processor(inputChunks)

    expect(result.html).toBe('<div><span>Format me!</span></div>\n')
    expect(result.js).toBe(inputChunks.js)
  })

  it('skips formatting if no html chunk is found', () => {
    const inputChunks = {
      css: '.test { margin: 10px; }',
      js: `import React from "react"; import {Link} from "react-router"`,
    }

    const result = processor(inputChunks)

    expect(result.css).toBe(inputChunks.css)
    expect(result.js).toBe(inputChunks.js)
  })
})

'''
'''--- packages/teleport-postprocessor-prettier-html/package.json ---
{
  "name": "@teleporthq/teleport-postprocessor-prettier-html",
  "version": "0.29.0",
  "description": "A post-processing function that formats html code chunks using prettier and the prettier-html plugin",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0",
    "prettier": "^2.3.1"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-postprocessor-prettier-html/src/index.ts ---
import standalone from 'prettier/standalone.js'
const { format } = standalone
import parserHTML from 'prettier/parser-html.js'

import { Constants } from '@teleporthq/teleport-shared'
import { PostProcessor, PrettierFormatOptions, FileType } from '@teleporthq/teleport-types'

interface PostProcessorFactoryOptions {
  fileType?: string
  formatOptions?: PrettierFormatOptions
}

export const createPrettierHTMLPostProcessor = (options: PostProcessorFactoryOptions = {}) => {
  const fileType = options.fileType || FileType.HTML
  const formatOptions = { ...Constants.PRETTIER_CONFIG, ...options.formatOptions }

  const processor: PostProcessor = (codeChunks) => {
    if (codeChunks[fileType]) {
      codeChunks[fileType] = format(codeChunks[fileType], {
        ...formatOptions,
        htmlWhitespaceSensitivity: 'ignore',
        plugins: [parserHTML],
        parser: 'html',
      })
    } else {
      console.warn('No code chunk of type HTML found, prettier-html did not perform any operation')
    }

    return codeChunks
  }

  return processor
}

export default createPrettierHTMLPostProcessor()

'''
'''--- packages/teleport-postprocessor-prettier-html/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-postprocessor-prettier-js/README.md ---
# teleport-postprocessor-prettier-js

A post-processing function that formats js code chunks using prettier and the babylon parser.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-postprocessor-prettier-js
```
or
```bash
yarn add @teleporthq/teleport-postprocessor-prettier-js
```

'''
'''--- packages/teleport-postprocessor-prettier-js/__tests__/index.ts ---
import processor from '../src'

describe('prettier js', () => {
  it('formats only the js chunk', () => {
    const inputChunks = {
      html: `<div><span >Format me!</span>  </div>`,
      js: `import React from "react"; import {Link} from "react-router"`,
    }

    const result = processor(inputChunks)

    expect(result.html).toBe(inputChunks.html)
    expect(result.js).toBe(`import React from 'react'
import { Link } from 'react-router'
`)
  })

  it('skips formatting if no js chunk is found', () => {
    const inputChunks = {
      css: '.test { margin: 10px; }',
      html: `<div><span >Format me!</span>  </div>`,
    }

    const result = processor(inputChunks)

    expect(result.css).toBe(inputChunks.css)
    expect(result.html).toBe(inputChunks.html)
  })
})

'''
'''--- packages/teleport-postprocessor-prettier-js/package.json ---
{
  "name": "@teleporthq/teleport-postprocessor-prettier-js",
  "version": "0.29.0",
  "description": "A post-processing function that formats js code chunks using prettier and the babylon parser",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0",
    "prettier": "^2.3.1"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-postprocessor-prettier-js/src/index.ts ---
import standalone from 'prettier/standalone.js'
const { format } = standalone
import parserBabel from 'prettier/parser-babel.js'
import { Constants } from '@teleporthq/teleport-shared'
import { PostProcessor, PrettierFormatOptions, FileType } from '@teleporthq/teleport-types'

interface PostProcessorFactoryOptions {
  fileType?: string
  formatOptions?: PrettierFormatOptions
}

export const createPrettierJSPostProcessor = (options: PostProcessorFactoryOptions = {}) => {
  const fileType = options.fileType || FileType.JS
  const formatOptions = { ...Constants.PRETTIER_CONFIG, ...options.formatOptions }

  const plugins = [parserBabel]

  const processor: PostProcessor = (codeChunks) => {
    if (codeChunks[fileType]) {
      codeChunks[fileType] = format(codeChunks[fileType], {
        ...formatOptions,
        plugins,
        parser: 'babel',
      })
    } else {
      console.warn('No code chunk of type JS found, prettier-js did not perform any operation')
    }

    return codeChunks
  }

  return processor
}

export default createPrettierJSPostProcessor()

'''
'''--- packages/teleport-postprocessor-prettier-js/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-postprocessor-prettier-jsx/README.md ---
# teleport-postprocessor-prettier-jsx

A post-processing function that formats jsx code chunks using prettier and the babylon and postcss parsers.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-postprocessor-prettier-jsx
```
or
```bash
yarn add @teleporthq/teleport-postprocessor-prettier-jsx
```

'''
'''--- packages/teleport-postprocessor-prettier-jsx/__tests__/index.ts ---
import processor from '../src'

describe('prettier jsx', () => {
  it('formats only the js chunk', () => {
    const inputChunks = {
      html: `<div><span >Format me!</span>  </div>`,
      js: `import React from "react"; import {Link} from "react-router"`,
    }

    const result = processor(inputChunks)

    expect(result.html).toBe(inputChunks.html)
    expect(result.js).toBe(`import React from 'react'
import { Link } from 'react-router'
`)
  })

  it('skips formatting if no js chunk is found', () => {
    const inputChunks = {
      css: '.test { margin: 10px; }',
      html: `<div><span >Format me!</span>  </div>`,
    }

    const result = processor(inputChunks)

    expect(result.css).toBe(inputChunks.css)
    expect(result.html).toBe(inputChunks.html)
  })
})

'''
'''--- packages/teleport-postprocessor-prettier-jsx/package.json ---
{
  "name": "@teleporthq/teleport-postprocessor-prettier-jsx",
  "version": "0.29.0",
  "description": "A post-processing function that formats jsx code chunks using prettier and the babylon and postcss parsers",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0",
    "prettier": "^2.3.1"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-postprocessor-prettier-jsx/src/index.ts ---
import standalone from 'prettier/standalone.js'
const { format } = standalone
import parserBabel from 'prettier/parser-babel.js'
import parserPostCSS from 'prettier/parser-postcss.js'

import { Constants } from '@teleporthq/teleport-shared'
import { PostProcessor, PrettierFormatOptions, FileType } from '@teleporthq/teleport-types'

interface PostProcessorFactoryOptions {
  fileType?: string
  formatOptions?: PrettierFormatOptions
}

export const createPrettierJSXPostProcessor = (options: PostProcessorFactoryOptions = {}) => {
  const fileType = options.fileType || FileType.JS
  const formatOptions = { ...Constants.PRETTIER_CONFIG, ...options.formatOptions }
  const plugins = [parserBabel, parserPostCSS]

  const processor: PostProcessor = (codeChunks) => {
    if (codeChunks[fileType]) {
      codeChunks[fileType] = format(codeChunks[fileType], {
        ...formatOptions,
        plugins,
        parser: 'babel',
      })
    } else {
      console.warn('No code chunk of type JS found, prettier-jsx did not perform any operation')
    }

    return codeChunks
  }

  return processor
}

export default createPrettierJSXPostProcessor()

'''
'''--- packages/teleport-postprocessor-prettier-jsx/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-postprocessor-prettier-ts/README.md ---
# teleport-postprocessor-prettier-ts

A post-processing function that formats ts code chunks using prettier and the ts parser.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-postprocessor-prettier-ts
```
or
```bash
yarn add @teleporthq/teleport-postprocessor-prettier-ts
```

'''
'''--- packages/teleport-postprocessor-prettier-ts/__tests__/index.ts ---
import processor from '../src'

describe('prettier ts', () => {
  it('formats only the ts chunk', () => {
    const inputChunks = {
      html: `<div><span >Format me!</span>  </div>`,
      ts: `import React from "react"; import {Link} from "react-router"`,
    }

    const result = processor(inputChunks)

    expect(result.html).toBe(inputChunks.html)
    expect(result.ts).toBe(`import React from 'react'
import { Link } from 'react-router'
`)
  })

  it('skips formatting if no ts chunk is found', () => {
    const inputChunks = {
      css: '.test { margin: 10px; }',
      html: `<div><span >Format me!</span>  </div>`,
    }

    const result = processor(inputChunks)

    expect(result.css).toBe(inputChunks.css)
    expect(result.html).toBe(inputChunks.html)
  })
})

'''
'''--- packages/teleport-postprocessor-prettier-ts/package.json ---
{
  "name": "@teleporthq/teleport-postprocessor-prettier-ts",
  "version": "0.29.0",
  "description": "A post-processing function that formats ts code chunks using prettier and the ts parser",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0",
    "prettier": "^2.3.1"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-postprocessor-prettier-ts/src/index.ts ---
import standalone from 'prettier/standalone.js'
const { format } = standalone
import parserTypescript from 'prettier/parser-typescript.js'

import { Constants } from '@teleporthq/teleport-shared'
import { PostProcessor, PrettierFormatOptions, FileType } from '@teleporthq/teleport-types'

interface PostProcessorFactoryOptions {
  fileType?: string
  formatOptions?: PrettierFormatOptions
}

export const createPrettierTSPostProcessor = (options: PostProcessorFactoryOptions = {}) => {
  const formatOptions = { ...Constants.PRETTIER_CONFIG, ...options.formatOptions }
  const fileType = options.fileType || FileType.TS

  const processor: PostProcessor = (codeChunks) => {
    if (codeChunks[fileType]) {
      codeChunks[fileType] = format(codeChunks[fileType], {
        ...formatOptions,
        plugins: [parserTypescript],
        parser: 'typescript',
      })
    } else {
      console.warn('No code chunk of type JS found, prettier-ts did not perform any operation')
    }

    return codeChunks
  }

  return processor
}

export default createPrettierTSPostProcessor()

'''
'''--- packages/teleport-postprocessor-prettier-ts/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-postprocessor-vue-file/README.md ---
# teleport-postprocessor-vue-file

A post-processing function that concatenates html/js/css code chunks into a single code chunk of type vue.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-postprocessor-vue-file
```
or
```bash
yarn add @teleporthq/teleport-postprocessor-vue-file
```

'''
'''--- packages/teleport-postprocessor-vue-file/__tests__/index.ts ---
import processor from '../src'

describe('vue file concat', () => {
  it('returns a single vue code chunk', () => {
    const inputChunks = {
      html: `<div><span>Format me!</span></div>
`,
      js: `export default {}
`,
      css: `.button { margin: 10px; }
`,
    }

    const result = processor(inputChunks)

    expect(result.html).toBeUndefined()
    expect(result.js).toBeUndefined()
    expect(result.css).toBeUndefined()
    expect(result.vue).toBe(`<template>
  <div><span>Format me!</span></div>
</template>

<script>
export default {}
</script>

<style scoped>
.button { margin: 10px; }
</style>
`)
  })

  it('skips the style section if it doesn`t exist', () => {
    const inputChunks = {
      html: `<div><span>Format me!</span></div>
`,
      js: `export default {}
`,
    }

    const result = processor(inputChunks)

    expect(result.html).toBeUndefined()
    expect(result.js).toBeUndefined()
    expect(result.css).toBeUndefined()
    expect(result.vue).toBe(`<template>
  <div><span>Format me!</span></div>
</template>

<script>
export default {}
</script>
`)
  })

  it('throws an error if no HTML chunk is provided', () => {
    const inputChunks = {
      js: `export default {}
`,
    }

    expect(() => processor(inputChunks)).toThrowError('HTML')
  })

  it('throws an error if no HTML chunk is provided', () => {
    const inputChunks = {
      html: `<div><span>Format me!</span></div>
`,
    }

    expect(() => processor(inputChunks)).toThrowError('JS')
  })
})

'''
'''--- packages/teleport-postprocessor-vue-file/package.json ---
{
  "name": "@teleporthq/teleport-postprocessor-vue-file",
  "version": "0.29.0",
  "description": "A post-processing function that concatenates html/js/css code chunks into a single code chunk of type vue",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-postprocessor-vue-file/src/index.ts ---
import { PostProcessor, FileType } from '@teleporthq/teleport-types'
import { StringUtils } from '@teleporthq/teleport-shared'

export const createVueFilePostProcessor = () => {
  const processor: PostProcessor = (codeChunks) => {
    let jsCode
    let cssCode
    let htmlCode

    if (codeChunks[FileType.HTML]) {
      htmlCode = StringUtils.removeLastEmptyLine(codeChunks[FileType.HTML])
    } else {
      throw new Error('No code chunk of type HTML found, vue file concatenation aborded')
    }

    if (codeChunks[FileType.JS]) {
      jsCode = StringUtils.removeLastEmptyLine(codeChunks[FileType.JS])
    } else {
      throw new Error('No code chunk of type JS found, vue file concatenation aborded')
    }

    // if no CSS, skip the <style></style>
    if (codeChunks[FileType.CSS]) {
      cssCode = StringUtils.removeLastEmptyLine(codeChunks[FileType.CSS])
    }

    const formattedHTMLCode = StringUtils.addSpacesToEachLine(' '.repeat(2), htmlCode)
    const vueCode = buildVueFile(formattedHTMLCode, jsCode, cssCode)

    return {
      [FileType.VUE]: vueCode,
    }
  }

  return processor
}

export default createVueFilePostProcessor()

export const buildVueFile = (htmlCode: string, jsCode: string, cssCode: string) => {
  let code = `<template>
${htmlCode}
</template>

<script>
${jsCode}
</script>
`

  if (cssCode) {
    code += `
<style scoped>
${cssCode}
</style>
`
  }

  return code
}

'''
'''--- packages/teleport-postprocessor-vue-file/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm",
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-project-generator-angular/README.md ---
# `teleport-project-generator-angular`

Project generator using Angular, on top of a boilerplate generated using angular-cli

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-project-generator-angular
```
or
```bash
yarn add @teleporthq/teleport-project-generator-angular
```

'''
'''--- packages/teleport-project-generator-angular/__tests__/end2end/index.ts ---
import { FileType } from '@teleporthq/teleport-types'
import fallbackPageSample from '../../../../examples/uidl-samples/project.json'
import uidlSample from '../../../../examples/test-samples/project-sample-with-dependency.json'
import invalidUidlSample from '../../../../examples/test-samples/project-invalid-sample.json'
import uidlSampleWithJustTokens from '../../../../examples/test-samples/project-with-only-tokens.json'
import { createAngularProjectGenerator } from '../../src'
import template from './template-definition.json'

describe('Angular Project Generator', () => {
  const generator = createAngularProjectGenerator()

  it('runs without crashing', async () => {
    const outputFolder = await generator.generateProject(uidlSample, template)
    const assetsPath = generator.getAssetsPath()

    const packageJSON = outputFolder.files[0]
    const srcFolder = outputFolder.subFolders[0]
    const appFolder = srcFolder.subFolders[0]
    const pagesFolder = appFolder.subFolders[0]
    const componentsFolder = appFolder.subFolders[1]
    const modalComponent = componentsFolder.subFolders[2]
    const componentsModule = componentsFolder.files[0]

    expect(assetsPath).toBeDefined()
    expect(outputFolder.name).toBe(template.name)
    expect(outputFolder.files[0].name).toBe('package')
    expect(srcFolder.files[0].fileType).toBe(FileType.HTML)
    expect(srcFolder.files[0].content).toBeDefined()
    expect(appFolder.files[0].name).toBe('app.module')
    expect(appFolder.files[0].fileType).toBe(FileType.TS)
    expect(appFolder.files[0].content).toBeDefined()
    expect(componentsFolder.name).toBe('components')
    expect(componentsModule.name).toBe('components.module')
    expect(componentsFolder.files[0].content).toBeDefined()
    expect(componentsFolder.subFolders.length).toBeGreaterThan(0)
    expect(pagesFolder.name).toBe('pages')
    expect(pagesFolder.subFolders.length).toBeGreaterThan(0)

    /*
     * For angular by default we are adding all the external dependencies only in components module
     * Since we can import once in module and use in all places for angular unlike
     * other frameworks. External dependnecies don't have first class support in Angular yet in
     * code-generators
     *
     * Any local dependency is also imported only once in the components module and direclty
     * used in any other component
     *
     * Refer --> https://github.com/teleporthq/teleport-code-generators/pull/478
     */

    expect(componentsModule.content).toContain(`import { Button } from 'antd'`)
    expect(componentsModule.content)
      .toContain(`import { OneComponent } from './one-component/one-component.component'
import { ExpandableArea } from './expandable-area/expandable-area.component'
import { Modal } from './modal/modal.component'
import { ModalWindow } from './modal-window/modal-window.component'`)
    expect(modalComponent.files[0].content).toContain(
      `<modal-window (onClose)="isOpen = false" *ngIf="isOpen"></modal-window>`
    )
    expect(pagesFolder.subFolders[0].files[0].content).toContain(`<app-modal></app-modal>`)
    expect(pagesFolder.subFolders[0].files[0].content).toContain(
      `<dangerous-html
      html=\"<blockquote class='twitter-tweet'><p lang='en' dir='ltr'>Feels like the last 20 mins of Don’t Look Up right about now…</p>&mdash; Netflix (@netflix) <a href='https://twitter.com/netflix/status/1593420772948598784?ref_src=twsrc%5Etfw'>November 18, 2022</a></blockquote> <script async src='https://platform.twitter.com/widgets.js'></script>\"
    ></dangerous-html>`
    )
    /*
     * Modal is used in home page but don't need to import since all components are packed
     * together as components module and imported at once in root module
     */
    expect(pagesFolder.subFolders[0].files[1].content).not.toContain(`import Modal`)
    expect(modalComponent.files[1].content).not.toContain(`import Modal`)
    expect(packageJSON.content).toContain(`"antd": "4.5.4"`)
    expect(packageJSON.content).toContain(`"dangerous-html": "0.1.13"`)
  })

  it('creates style sheet and adds to the webpack file', async () => {
    const result = await generator.generateProject(uidlSampleWithJustTokens, template)
    const styleSheet = result.subFolders[0].files.find(
      (file) => file.name === 'styles' && file.fileType === FileType.CSS
    )

    expect(styleSheet).toBeDefined()
    expect(styleSheet.content).toContain(`--greys-500: #595959`)
  })

  it('creates a default route if a page is marked as fallback', async () => {
    const { subFolders } = await generator.generateProject(fallbackPageSample, template)
    const appFolder = subFolders[0].subFolders.find((folder) => folder.name === 'app')
    const appModule = appFolder?.files.find(
      (file) => file.name === 'app.module' && file.fileType === FileType.TS
    )
    expect(appModule?.content).toContain(`path: '**'`)
  })

  it('throws error when invalid UIDL sample is used', async () => {
    const result = generator.generateProject(invalidUidlSample, template)

    await expect(result).rejects.toThrow(Error)
  })
})

'''
'''--- packages/teleport-project-generator-angular/__tests__/end2end/template-definition.json ---
{
	"name": "angular",
	"files": [],
	"subFolders": [
		{
			"name": "src",
			"files": [],
			"subFolders": [
				{
					"name": "app",
					"files": [],
					"subFolders": []
				},
				{
					"name": "assets",
					"files": [],
					"subFolders": []
				},
				{
					"name": "environments",
					"files": [],
					"subFolders": []
				}
			]
		}
	]
}
'''
'''--- packages/teleport-project-generator-angular/package.json ---
{
  "name": "@teleporthq/teleport-project-generator-angular",
  "version": "0.29.2",
  "description": "Project generator for a standard Angular project",
  "author": "teleportHQ",
  "homepage": "https://teleporthq.io/",
  "license": "MIT",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "publishConfig": {
    "access": "public"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "dependencies": {
    "@teleporthq/teleport-component-generator": "^0.29.2",
    "@teleporthq/teleport-component-generator-angular": "^0.29.2",
    "@teleporthq/teleport-plugin-angular-module": "^0.29.2",
    "@teleporthq/teleport-plugin-css": "^0.29.0",
    "@teleporthq/teleport-plugin-import-statements": "^0.29.0",
    "@teleporthq/teleport-postprocessor-prettier-html": "^0.29.0",
    "@teleporthq/teleport-postprocessor-prettier-ts": "^0.29.0",
    "@teleporthq/teleport-project-generator": "^0.29.2",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-project-generator-angular/src/angular-project-mapping.ts ---
import { Mapping } from '@teleporthq/teleport-types'

export const AngularProjectMapping: Mapping = {
  elements: {
    navlink: {
      elementType: 'a',
      attrs: {
        routerLink: { type: 'dynamic', content: { referenceType: 'attr', id: 'transitionTo' } },
      },
    },
  },
}

'''
'''--- packages/teleport-project-generator-angular/src/constants.ts ---
export const CUSTOM_BODY_CONTENT = '<app-root></app-root>'

'''
'''--- packages/teleport-project-generator-angular/src/index.ts ---
import { createAngularModulePlugin } from '@teleporthq/teleport-plugin-angular-module'
import { createImportPlugin } from '@teleporthq/teleport-plugin-import-statements'
import { createAngularComponentGenerator } from '@teleporthq/teleport-component-generator-angular'
import { createPrettierTSPostProcessor } from '@teleporthq/teleport-postprocessor-prettier-ts'
import prettierHTML from '@teleporthq/teleport-postprocessor-prettier-html'
import { createComponentGenerator } from '@teleporthq/teleport-component-generator'
import { createProjectGenerator } from '@teleporthq/teleport-project-generator'
import { Mapping, FileType } from '@teleporthq/teleport-types'
import { createStyleSheetPlugin } from '@teleporthq/teleport-plugin-css'

import { CUSTOM_BODY_CONTENT } from './constants'
import { AngularProjectMapping } from './angular-project-mapping'
import { template as AngularTemplate } from './project-template'

const createAngularProjectGenerator = () => {
  const prettierTS = createPrettierTSPostProcessor({ fileType: FileType.TS })
  const importStatementsPlugin = createImportPlugin({ fileType: FileType.TS })

  const rootModuleGeneratorAngularPlugin = createAngularModulePlugin({ moduleType: 'root' })
  const componentModuleGeneratorAngularPlugin = createAngularModulePlugin({
    moduleType: 'component',
  })
  const pagesModuleGeneratorAngularPlugin = createAngularModulePlugin({ moduleType: 'page' })

  const generator = createProjectGenerator({
    id: 'teleport-project-angular',
    components: {
      generator: createAngularComponentGenerator,
      mappings: [AngularProjectMapping as Mapping],
      path: ['src', 'app', 'components'],
      module: {
        generator: createComponentGenerator,
        plugins: [componentModuleGeneratorAngularPlugin, importStatementsPlugin],
        postprocessors: [prettierTS],
      },
      options: {
        createFolderForEachComponent: true,
        customComponentFileName: (name: string) => `${name}.component`,
        customStyleFileName: (name: string) => `${name}.component`,
        customTemplateFileName: (name: string) => `${name}.component`,
      },
    },
    pages: {
      generator: createAngularComponentGenerator,
      mappings: [AngularProjectMapping as Mapping],
      path: ['src', 'app', 'pages'],
      module: {
        generator: createComponentGenerator,
        plugins: [pagesModuleGeneratorAngularPlugin, importStatementsPlugin],
        postprocessors: [prettierTS],
      },
      options: {
        createFolderForEachComponent: true,
        customComponentFileName: (name: string) => `${name}.component`,
        customStyleFileName: (name: string) => `${name}.component`,
        customTemplateFileName: (name: string) => `${name}.component`,
      },
    },
    projectStyleSheet: {
      generator: createComponentGenerator,
      plugins: [createStyleSheetPlugin({ fileName: 'styles' })],
      fileName: 'styles',
      path: ['src'],
    },
    router: {
      generator: createComponentGenerator,
      plugins: [rootModuleGeneratorAngularPlugin, importStatementsPlugin],
      postprocessors: [prettierTS],
      path: ['src', 'app'],
      fileName: 'app.module',
    },
    entry: {
      postprocessors: [prettierHTML],
      path: ['src'],
      fileName: 'index',
      options: {
        appRootOverride: CUSTOM_BODY_CONTENT,
        customTags: [
          {
            tagName: 'base',
            targetTag: 'head',
            attributes: [{ attributeKey: 'href', attributeValue: '/' }],
          },
        ],
      },
    },
    static: {
      prefix: '/assets',
      path: ['src', 'assets'],
    },
  })

  return generator
}

export { createAngularProjectGenerator, AngularProjectMapping, AngularTemplate }

'''
'''--- packages/teleport-project-generator-angular/src/project-template.ts ---
import { GeneratedFolder } from '@teleporthq/teleport-types'

export const template: GeneratedFolder = {
  name: 'teleport-project-angular',
  files: [
    {
      name: 'package',
      content: `
{
  "name": "teleport-project-angular",
  "author": "teleportHQ",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "watch": "ng build --watch --configuration development"
  },
  "private": true,
  "dependencies": {
    "@angular/common": "^14.0.0",
    "@angular/compiler": "^14.0.0",
    "@angular/core": "^14.0.0",
    "@angular/forms": "^14.0.0",
    "@angular/platform-browser": "^14.0.0",
    "@angular/platform-browser-dynamic": "^14.0.0",
    "@angular/router": "^14.0.0",
    "core-js": "~3.0.1",
    "rxjs": "~6.6.0",
    "tslib": "^2.1.0",
    "zone.js": "~0.11.4"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^14.0.0",
    "@angular/cli": "^14.0.0",
    "@angular/compiler-cli": "^14.0.0",
    "@types/node": "^12.11.1",
    "typescript": "^4.7.3"
  }
}`,
      fileType: 'json',
    },
    {
      name: 'angular',
      content: `
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "teleport-project-template-angular": {
      "projectType": "application",
      "schematics": {},
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:browser",
          "options": {
            "outputPath": "dist/teleport-project-template-angular",
            "index": "src/index.html",
            "main": "src/main.ts",
            "polyfills": "src/polyfills.ts",
            "tsConfig": "tsconfig.app.json",
            "aot": true,
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "src/styles.css"
            ],
            "scripts": []
          },
          "configurations": {
            "production": {
              "fileReplacements": [
                {
                  "replace": "src/environments/environment.ts",
                  "with": "src/environments/environment.prod.ts"
                }
              ],
              "optimization": true,
              "outputHashing": "all",
              "sourceMap": false,
              "extractCss": true,
              "namedChunks": false,
              "aot": true,
              "extractLicenses": true,
              "vendorChunk": false,
              "buildOptimizer": true,
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "2mb",
                  "maximumError": "5mb"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "6kb",
                  "maximumError": "10kb"
                }
              ]
            }
          }
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "options": {
            "browserTarget": "teleport-project-template-angular:build"
          },
          "configurations": {
            "production": {
              "browserTarget": "teleport-project-template-angular:build:production"
            }
          }
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n",
          "options": {
            "browserTarget": "teleport-project-template-angular:build"
          }
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "main": "src/test.ts",
            "polyfills": "src/polyfills.ts",
            "tsConfig": "tsconfig.spec.json",
            "karmaConfig": "karma.conf.js",
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "src/styles.css"
            ],
            "scripts": []
          }
        },
        "lint": {
          "builder": "@angular-devkit/build-angular:tslint",
          "options": {
            "tsConfig": [
              "tsconfig.app.json",
              "tsconfig.spec.json",
              "e2e/tsconfig.json"
            ],
            "exclude": [
              "**/node_modules/**"
            ]
          }
        },
        "e2e": {
          "builder": "@angular-devkit/build-angular:protractor",
          "options": {
            "protractorConfig": "e2e/protractor.conf.js",
            "devServerTarget": "teleport-project-template-angular:serve"
          },
          "configurations": {
            "production": {
              "devServerTarget": "teleport-project-template-angular:serve:production"
            }
          }
        }
      }
    }},
  "defaultProject": "teleport-project-template-angular"
}`,
      fileType: 'json',
    },
    {
      name: 'tsconfig',
      content: `
{
  "compileOnSave": false,
  "compilerOptions": {
    "baseUrl": "./",
    "outDir": "./dist/out-tsc",
    "sourceMap": true,
    "declaration": false,
    "downlevelIteration": true,
    "experimentalDecorators": true,
    "module": "esnext",
    "moduleResolution": "node",
    "importHelpers": true,
    "target": "es2015",
    "typeRoots": [
      "node_modules/@types"
    ],
    "lib": [
      "es2018",
      "dom"
    ]
  },
  "angularCompilerOptions": {
    "fullTemplateTypeCheck": true,
    "strictInjectionParameters": true
  }
}`,
      fileType: 'json',
    },
    {
      name: 'tslint',
      content: `
{
  "extends": "tslint:recommended",
  "rules": {
    "array-type": false,
    "arrow-parens": false,
    "deprecation": {
      "severity": "warning"
    },
    "component-class-suffix": true,
    "contextual-lifecycle": true,
    "directive-class-suffix": true,
    "directive-selector": [
      true,
      "attribute",
      "app",
      "camelCase"
    ],
    "component-selector": [
      true,
      "element",
      "app",
      "kebab-case"
    ],
    "import-blacklist": [
      true,
      "rxjs/Rx"
    ],
    "interface-name": false,
    "max-classes-per-file": false,
    "max-line-length": [
      true,
      140
    ],
    "member-access": false,
    "member-ordering": [
      true,
      {
        "order": [
          "static-field",
          "instance-field",
          "static-method",
          "instance-method"
        ]
      }
    ],
    "no-consecutive-blank-lines": false,
    "no-console": [
      true,
      "debug",
      "info",
      "time",
      "timeEnd",
      "trace"
    ],
    "no-empty": false,
    "no-inferrable-types": [
      true,
      "ignore-params"
    ],
    "no-non-null-assertion": true,
    "no-redundant-jsdoc": true,
    "no-switch-case-fall-through": true,
    "no-use-before-declare": true,
    "no-var-requires": false,
    "object-literal-key-quotes": [
      true,
      "as-needed"
    ],
    "object-literal-sort-keys": false,
    "ordered-imports": false,
    "quotemark": [
      true,
      "single"
    ],
    "trailing-comma": false,
    "no-conflicting-lifecycle": true,
    "no-host-metadata-property": true,
    "no-input-rename": true,
    "no-inputs-metadata-property": true,
    "no-output-native": true,
    "no-output-on-prefix": true,
    "no-output-rename": true,
    "no-outputs-metadata-property": true,
    "template-banana-in-box": true,
    "template-no-negated-async": true,
    "use-lifecycle-interface": true,
    "use-pipe-transform-interface": true
  },
  "rulesDirectory": [
    "codelyzer"
  ]
}`,
      fileType: 'json',
    },
    {
      name: 'tsconfig.app',
      content: `
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "outDir": "./out-tsc/app",
    "types": []
  },
  "files": [
    "src/main.ts",
    "src/polyfills.ts"
  ],
  "include": [
    "src/**/*.ts"
  ],
  "exclude": [
    "src/test.ts",
    "src/**/*.spec.ts"
  ]
}`,
      fileType: 'json',
    },
    {
      name: 'browserslist',
      content: `
# This file is used by the build system to adjust CSS and JS output to support the specified browsers below.
# For additional information regarding the format and rule options, please see:
# https://github.com/browserslist/browserslist#queries

# You can see what browsers were selected by your queries by running:
#   npx browserslist

> 0.5%
last 2 versions
Firefox ESR
not dead
not IE 9-11 # For IE 9-11 support, remove 'not'.
`,
    },
    {
      name: '.gitignore',
      content: `
# See http://help.github.com/ignore-files/ for more about ignoring files.

# compiled output
/dist
/tmp
/out-tsc
# Only exists if Bazel was run
/bazel-out

# dependencies
/node_modules

# profiling files
chrome-profiler-events*.json
speed-measure-plugin*.json

# IDEs and editors
/.idea
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# IDE - VSCode
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
.history/*

# misc
/.sass-cache
/connect.lock
/coverage
/libpeerconnection.log
npm-debug.log
yarn-error.log
testem.log
/typings

# System Files
.DS_Store
Thumbs.db`,
    },
  ],
  subFolders: [
    {
      name: 'src',
      files: [
        {
          name: 'main',
          content: `
import './polyfills';
import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

if (environment.production) {
  enableProdMode();
}

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));
          `,
          fileType: 'ts',
        },
        {
          name: 'polyfills',
          fileType: 'ts',
          content: `
/**
 * This file includes polyfills needed by Angular and is loaded before the app.
 * You can add your own extra polyfills to this file.
 *
 * This file is divided into 2 sections:
 *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.
 *   2. Application imports. Files imported after ZoneJS that should be loaded before your main
 *      file.
 *
 * The current setup is for so-called "evergreen" browsers; the last versions of browsers that
 * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),
 * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.
 *
 * Learn more in https://angular.io/guide/browser-support
 */

/***************************************************************************************************
 * BROWSER POLYFILLS
 */

/** IE10 and IE11 requires the following for NgClass support on SVG elements */
// import 'classlist.js';  // Run npm install --save classlist.js.

/**
 * Web Animations @angular/platform-browser/animations
 * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.
 * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).
 */
// import 'web-animations-js';  // Run npm install --save web-animations-js.

/**
 * By default, zone.js will patch all possible macroTask and DomEvents
 * user can disable parts of macroTask/DomEvents patch by setting following flags
 * because those flags need to be set before zone.js being loaded, and webpack
 * will put import in the top of bundle, so user need to create a separate file
 * in this directory (for example: zone-flags.ts), and put the following flags
 * into that file, and then add the following code before importing zone.js.
 * import './zone-flags.ts';
 *
 * The flags allowed in zone-flags.ts are listed here.
 *
 * The following flags will work for all browsers.
 *
 * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame
 * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick
 * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames
 *
 *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js
 *  with the following flag, it will bypass zone.js patch for IE/Edge
 *
 *  (window as any).__Zone_enable_cross_context_check = true;
 *
 */

/***************************************************************************************************
 * Zone JS is required by default for Angular itself.
 */
import 'core-js/features/reflect';
import 'zone.js/dist/zone';  // Included with Angular CLI.

/***************************************************************************************************
 * APPLICATION IMPORTS
 */`,
        },
        {
          name: 'styles',
          content: `
  /* You can add global styles to this file, and also import other style files */`,
          fileType: 'css',
        },
      ],
      subFolders: [
        {
          name: 'app',
          files: [
            {
              name: 'app.component',
              content: `
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'teleport-project-template-angular';
}`,
              fileType: 'ts',
            },
            {
              name: 'app.component',
              content: `<router-outlet></router-outlet>`,
              fileType: 'html',
            },
            {
              name: 'app.component',
              content: ``,
              fileType: 'css',
            },
          ],
          subFolders: [],
        },
        {
          name: 'environments',
          subFolders: [],
          files: [
            {
              name: 'environment.prod',
              fileType: 'ts',
              content: `
export const environment = {
  production: true
};`,
            },
            {
              name: 'environment',
              fileType: 'ts',
              content: `
// This file can be replaced during build by using the fileReplacements array.
// ng build --prod replaces environment.ts with environment.prod.ts.
// The list of file replacements can be found in angular.json.

export const environment = {
  production: false
};

/*
  * For easier debugging in development mode, you can import the following file
  * to ignore zone related error stack frames such as zone.run, zoneDelegate.invokeTask.
  *
  * This import should be commented out in production mode because it will have a negative impact
  * on performance if an error is thrown.
  */
// import 'zone.js/dist/zone-error';  // Included with Angular CLI.`,
            },
          ],
        },
      ],
    },
  ],
}

'''
'''--- packages/teleport-project-generator-angular/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-project-generator-html/Readme.md ---
# teleport-project-generator-html

Project generator for a standard Next.js project.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-project-generator-html
```
or
```bash
yarn add @teleporthq/teleport-project-generator-html
```

'''
'''--- packages/teleport-project-generator-html/__tests__/end2end/index.ts ---
import uidlSample from '../../../../examples/uidl-samples/project.json'
import invalidUidlSample from '../../../../examples/test-samples/project-invalid-sample.json'
import projectWithSlot from '../../../../examples/test-samples/project-with-slot.json'
import { createHTMLProjectGenerator } from '../../src'
import HTMLTemplate from '../../src/project-template'
import { FileType } from '@teleporthq/teleport-types'

describe('Html Project Generator', () => {
  it('runs without crasing', async () => {
    const generator = createHTMLProjectGenerator()
    generator.setAssets({
      mappings: {
        'kitten.png': '',
      },
      identifier: 'playground_assets',
      prefix: 'public',
    })
    const { name, files, subFolders } = await generator.generateProject(uidlSample, HTMLTemplate)
    const aboutPage = files.find((page) => page.name === 'about' && page.fileType === FileType.HTML)
    const aboutCSS = files.find((page) => page.name === 'about' && page.fileType === FileType.CSS)

    expect(name).toBe('teleport-project-html')
    expect(files.length).toBe(8)
    expect(subFolders.length).toBe(1)
    expect(aboutPage).toBeDefined()
    expect(aboutPage?.content).toContain('head')
    expect(aboutPage?.content).toContain('html')
    expect(aboutPage?.content).toContain('public/playground_assets/kitten.png')
    expect(aboutCSS?.content).toContain('public/playground_assets/kitten.png')
  })

  it('run withut crashing and appends entry things into single index.html', async () => {
    const singularGenerator = createHTMLProjectGenerator({ individualEntyFile: false })
    singularGenerator.setAssets({
      mappings: {
        'kitten.png': '',
      },
      identifier: 'playground_assets',
      prefix: 'public',
    })
    const { name, files, subFolders } = await singularGenerator.generateProject(
      uidlSample,
      HTMLTemplate
    )
    const aboutPage = files.find((page) => page.name === 'about' && page.fileType === FileType.HTML)
    const aboutCSS = files.find((page) => page.name === 'about' && page.fileType === FileType.CSS)

    expect(name).toBe('teleport-project-html')
    expect(files.length).toBe(9)
    expect(subFolders.length).toBe(1)
    expect(aboutPage?.content).not.toContain('<head>')
    expect(aboutPage?.content).not.toContain('<html>')
    expect(aboutPage?.content).toContain('public/playground_assets/kitten.png')
    expect(aboutCSS?.content).toContain('public/playground_assets/kitten.png')
  })

  it('throws error when invalid UIDL sample is used', async () => {
    const generator = createHTMLProjectGenerator()
    const result = generator.generateProject(invalidUidlSample, HTMLTemplate)
    await expect(result).rejects.toThrow(Error)
  })
})

describe('Unwinds the slot inside the component when used in page', () => {
  it('runs without crashing', async () => {
    const generator = createHTMLProjectGenerator()
    generator.setAssets({
      mappings: {},
      identifier: 'playground_assets',
    })
    const result = await generator.generateProject(projectWithSlot, HTMLTemplate)
    const indexFile = result.files.find(
      (file) => file.name === 'index' && file.fileType === FileType.HTML
    )
    const cssFile = result.files.find(
      (file) => file.name === 'index' && file.fileType === FileType.CSS
    )

    expect(indexFile).toBeDefined()
    expect(indexFile?.content).toContain(`app-component-image1`)
    expect(indexFile?.content).toContain(`app-component-image2`)
    expect(cssFile).toBeDefined()
    expect(cssFile?.content).toContain(`.app-component-image2`)
    expect(cssFile?.content).toContain(`.app-component-image1`)
  })
})

'''
'''--- packages/teleport-project-generator-html/__tests__/index.ts ---
import { FileType } from '@teleporthq/teleport-types'
import ProjectTemplate from '../src/project-template'
import { htmlErrorPageMapping } from '../src/error-page-mapping'
import { createHTMLProjectGenerator } from '../src'
import fallbackUidlSample from '../../../examples/uidl-samples/project.json'
import uidlWithCompStyleOverrides from '../../../examples/test-samples/comp-style-overrides.json'
import uidlWithImages from '../../../examples/test-samples/html-image-use-cases.json'

describe('Passes the rootClass which using the component', () => {
  it('run without crashing while using with HTML', async () => {
    const generator = createHTMLProjectGenerator()
    generator.setAssets({
      mappings: {},
      identifier: 'playground_assets',
      prefix: '/public',
    })
    const result = await generator.generateProject(uidlWithCompStyleOverrides)

    const mainFile = result.files.find(
      (file) => file.name === 'index' && file.fileType === FileType.HTML
    )
    const styleFile = result.files.find(
      (file) => file.name === 'index' && file.fileType === FileType.CSS
    )

    expect(mainFile).toBeDefined()
    expect(mainFile?.content).toContain(`place-card-root-class-name`)
    expect(styleFile?.content).toContain(`place-card-root-class-name`)
  })
})

describe('Image Resolution', () => {
  it('resolves all local assets to be refered from public folder', async () => {
    const generator = createHTMLProjectGenerator()
    generator.setAssets({
      mappings: {
        'kitten.png': '',
      },
      identifier: 'playground_assets',
      prefix: 'public',
    })
    const { files } = await generator.generateProject(uidlWithImages)

    const mainCSS = files.find((file) => file.name === 'index' && file.fileType === FileType.CSS)
    const indexFile = files.find((file) => file.name === 'index' && file.fileType === FileType.HTML)

    expect(indexFile).toBeDefined()
    expect(mainCSS).toBeDefined()
    expect(indexFile?.content).toContain(`href="public/playground_assets/kitten.png"`)
    expect(indexFile?.content).toContain(`src="public/playground_assets/kitten.png"`)
    expect(mainCSS?.content).toContain(`.comp-with-image-prop-comp-with-image-bg-in-css {
  width: 100%;
  height: 200px;
  background-image: url("public/playground_assets/kitten.png");
}`)
    expect(mainCSS?.content).toContain(`@media(max-width: 991px) {
  .comp-with-image-prop-div {
    width: 100%;
    height: 200px;
    background-image: url("public/playground_assets/kitten.png");
  }
}`)
    expect(mainCSS?.content).toContain(`.comp-with-image-prop-bg-image-c {
  background-image: url("public/playground_assets/kitten.png");
}`)
    expect(mainCSS?.content).toContain(`.home-div {
  width: 100%;
  height: 200px;
  background-image: url("public/playground_assets/kitten.png");
}`)
  })

  it('creates a default route if a page is marked as fallback', async () => {
    const generator = createHTMLProjectGenerator()

    generator.setAssets({
      mappings: {},
      identifier: 'playground_assets',
      prefix: '/public',
    })
    generator.addPlugin(htmlErrorPageMapping)

    const { files } = await generator.generateProject(fallbackUidlSample, ProjectTemplate)
    const fallbackPage = files.find((file) => file.name === '404')

    expect(fallbackPage).toBeDefined()
  })
})

describe('Meta tags from globals', () => {
  it('are added to each page`s head', async () => {
    const generator = createHTMLProjectGenerator()
    const { files } = await generator.generateProject(fallbackUidlSample)
    const pages = files.filter((file) => file.fileType === 'html')

    pages.forEach((page) => {
      expect(page.content).toContain('<meta charset="utf-8"')
      expect(page.content).toContain('<meta name="viewport"')
      expect(page.content).toContain('<meta property="twitter:card"')
    })
  })
})

'''
'''--- packages/teleport-project-generator-html/package.json ---
{
  "name": "@teleporthq/teleport-project-generator-html",
  "version": "0.29.2",
  "description": "Project generator for generate plain html files",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-component-generator": "^0.29.2",
    "@teleporthq/teleport-component-generator-html": "^0.29.2",
    "@teleporthq/teleport-plugin-css": "^0.29.0",
    "@teleporthq/teleport-postprocessor-prettier-html": "^0.29.0",
    "@teleporthq/teleport-project-generator": "^0.29.2",
    "cheerio": "^1.0.0-rc.12",
    "path-browserify": "^1.0.1"
  }
}

'''
'''--- packages/teleport-project-generator-html/src/error-page-mapping.ts ---
import { FileType, ProjectPlugin, ProjectPluginStructure } from '@teleporthq/teleport-types'

class HTMLErrorPageMapping implements ProjectPlugin {
  async runBefore(structure: ProjectPluginStructure) {
    return structure
  }

  async runAfter(structure: ProjectPluginStructure) {
    const { uidl, files } = structure
    const routes = uidl.root.stateDefinitions.route
    const fallback = routes.values.find((route) => route.pageOptions?.fallback)
    if (!fallback) {
      return structure
    }

    const folder =
      files.get(fallback.pageOptions?.componentName) || files.get(fallback.pageOptions?.fileName)
    if (!folder) {
      return structure
    }

    folder.files.forEach((file) => {
      if (file.name === fallback.pageOptions.fileName && file.fileType === FileType.HTML) {
        file.name = '404'
      }
    })

    return structure
  }
}

export const htmlErrorPageMapping = new HTMLErrorPageMapping()

'''
'''--- packages/teleport-project-generator-html/src/index.ts ---
import { createProjectGenerator } from '@teleporthq/teleport-project-generator'
import { createHTMLComponentGenerator } from '@teleporthq/teleport-component-generator-html'
import { createComponentGenerator } from '@teleporthq/teleport-component-generator'
import { createStyleSheetPlugin } from '@teleporthq/teleport-plugin-css'
import prettierHTML from '@teleporthq/teleport-postprocessor-prettier-html'
import HTMLTemplate from './project-template'
import { pluginCloneGlobals } from './plugin-clone-globals'
import { pluginHomeReplace } from './plugin-home-replace'
import { htmlErrorPageMapping } from './error-page-mapping'

const createHTMLProjectGenerator = (config?: { individualEntyFile: boolean }) => {
  const { individualEntyFile } = config || { individualEntyFile: true }

  const generator = createProjectGenerator({
    id: 'teleport-project-html',
    components: {
      generator: createHTMLComponentGenerator,
      path: ['components'],
    },
    pages: {
      generator: createHTMLComponentGenerator,
      path: [''],
      options: {
        useFileNameForNavigation: true,
      },
    },
    static: {
      prefix: 'public',
      path: ['public'],
    },
    projectStyleSheet: {
      generator: createComponentGenerator,
      plugins: [createStyleSheetPlugin()],
      fileName: 'style',
      path: [''],
      importFile: true,
    },
    entry: {
      postprocessors: [prettierHTML],
      fileName: 'index',
      path: [''],
    },
  })

  generator.addPlugin(pluginHomeReplace)
  if (individualEntyFile) {
    generator.addPlugin(pluginCloneGlobals)
  }

  return generator
}

export {
  createHTMLProjectGenerator,
  HTMLTemplate,
  pluginCloneGlobals,
  pluginHomeReplace,
  htmlErrorPageMapping,
}

'''
'''--- packages/teleport-project-generator-html/src/path-browserisify.d.ts ---
declare module 'path-browserify' {
  import path from 'path'
  export default path
}

'''
'''--- packages/teleport-project-generator-html/src/plugin-clone-globals.ts ---
import {
  FileType,
  GeneratedFile,
  ProjectPlugin,
  ProjectPluginStructure,
} from '@teleporthq/teleport-types'
import prettierHTML from '@teleporthq/teleport-postprocessor-prettier-html'
import { load } from 'cheerio'

class ProjectPluginCloneGlobals implements ProjectPlugin {
  async runBefore(structure: ProjectPluginStructure) {
    return structure
  }

  async runAfter(structure: ProjectPluginStructure) {
    const { files, uidl } = structure
    const entryFile = files.get('entry')?.files[0]
    if (!entryFile) {
      return structure
    }

    const parsedEntry = (await import('cheerio').then((mod) => mod.load))(entryFile.content)
    /* Script tags that are attached to the body, example teleport-custom-scripts from studio */
    const scriptTagsFromRootHead = parsedEntry('head').find('script').toString()
    const scriptTagsFromRootBody = parsedEntry('body').find('script').toString()
    const metaTagsFromRoot = parsedEntry('head').find('meta').toString()
    const titleTagsFromRoot = parsedEntry('head').find('title').toString()

    parsedEntry('head').find('script').remove()
    parsedEntry('body').find('script').remove()
    parsedEntry('head').find('meta').remove()
    parsedEntry('head').find('title').remove()

    if (Object.values(uidl.root?.styleSetDefinitions || {}).length > 0) {
      parsedEntry('head').append(`<link rel="stylesheet" href="./style.css"></link>`)
    }

    parsedEntry('head').append(scriptTagsFromRootHead.toString())

    const memoryFiles = Object.fromEntries(files)

    for (const id in memoryFiles) {
      if (memoryFiles.hasOwnProperty(id)) {
        const fileId = memoryFiles[id]

        const newFiles: GeneratedFile[] = fileId.files.map((file) => {
          if (file.fileType === FileType.HTML) {
            parsedEntry('body').empty()
            parsedEntry('head').find('title').remove()
            parsedEntry('head').find('meta').remove()

            const parsedIndividualFile = load(file.content)

            const metaTags = parsedIndividualFile.root().find('meta')
            parsedEntry('head').prepend(metaTags.toString().concat(metaTagsFromRoot))
            metaTags.remove()

            const titleTags = parsedIndividualFile.root().find('title')
            parsedEntry('head').prepend(titleTags.length ? titleTags.toString() : titleTagsFromRoot)
            titleTags.remove()

            parsedEntry('body').append(parsedIndividualFile.html())
            parsedEntry('body').append(scriptTagsFromRootBody.toString())

            const prettyFile = prettierHTML({
              [FileType.HTML]: parsedEntry.html(),
            })

            return {
              name: file.name,
              content: prettyFile[FileType.HTML],
              fileType: FileType.HTML,
            }
          }
          return file
        })
        files.set(id, { path: fileId.path, files: newFiles })
      }
    }

    files.delete('entry')
    return structure
  }
}

export const pluginCloneGlobals = Object.freeze(new ProjectPluginCloneGlobals())

'''
'''--- packages/teleport-project-generator-html/src/plugin-home-replace.ts ---
import { StringUtils, UIDLUtils } from '@teleporthq/teleport-shared'
import {
  FileType,
  GeneratedFile,
  ProjectPlugin,
  ProjectPluginStructure,
} from '@teleporthq/teleport-types'

class ProjectPluginHomeReplace implements ProjectPlugin {
  async runBefore(structure: ProjectPluginStructure) {
    return structure
  }

  async runAfter(structure: ProjectPluginStructure) {
    const { uidl, files } = structure
    const { stateDefinitions } = uidl.root

    if (stateDefinitions?.route) {
      const { defaultValue } = stateDefinitions.route
      const routes = UIDLUtils.extractRoutes(uidl.root)
      const defaultRoute = routes.find((route) => route.content?.value === defaultValue)
      if (!defaultRoute) {
        return structure
      }
      const sanitizedName = StringUtils.removeIllegalCharacters(
        defaultRoute.content.value as string
      )
      const pageName = StringUtils.camelCaseToDashCase(sanitizedName)

      if (pageName === 'index') {
        return structure
      }

      const component = StringUtils.dashCaseToUpperCamelCase(sanitizedName)
      const homeFile = files.get(component)
      if (!homeFile) {
        return structure
      }

      const htmlFile = homeFile.files.find(
        ({ name, fileType }: GeneratedFile) => name === pageName && fileType === FileType.HTML
      )
      if (!htmlFile) {
        return structure
      }

      files.set('index', {
        path: homeFile.path,
        files: [
          ...homeFile.files.filter(
            ({ name, fileType }) => name === pageName && fileType !== FileType.HTML
          ),
          {
            ...htmlFile,
            name: 'index',
          },
        ],
      })
      files.delete(component)
    }

    return structure
  }
}

export const pluginHomeReplace = new ProjectPluginHomeReplace()

'''
'''--- packages/teleport-project-generator-html/src/project-template.ts ---
export default {
  name: 'teleport-project-html',
  files: [
    {
      name: 'package',
      content: `
  {
    "name": "teleport-project-html",
    "version": "1.0.0",
    "private": true,
    "dependencies": {
        "parcel-bundler": "^1.6.1"
    },
    "scripts": {}
  }`,
      fileType: 'json',
    },
  ],
  subFolders: [],
}

'''
'''--- packages/teleport-project-generator-html/tsconfig.json ---
{
    "extends": "../../tsconfig.json",
    "compilerOptions": {
      "outDir": "dist/esm"
    },
    "include": [
      "./src"
    ]
  }
'''
'''--- packages/teleport-project-generator-next/README.md ---
# teleport-project-generator-next

Project generator for a standard Next.js project.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-project-generator-next
```
or
```bash
yarn add @teleporthq/teleport-project-generator-next
```

'''
'''--- packages/teleport-project-generator-next/__tests__/end2end/index.ts ---
import { FileType } from '@teleporthq/teleport-types'
import fallbackUidlSample from '../../../../examples/uidl-samples/project.json'
import uidlSample from '../../../../examples/test-samples/project-sample.json'
import invalidUidlSample from '../../../../examples/test-samples/project-invalid-sample.json'
import uidlSampleWithDependencies from '../../../../examples/test-samples/project-sample-with-dependency.json'
import uidlSampleWithoutProjectStyleesButImports from './project-with-import-without-global-styles.json'
import uidlSampleWithProjectStyleSheet from '../../../../examples/test-samples/project-with-import-global-styles.json'
import uidlSampleWithJustTokens from '../../../../examples/test-samples/project-with-only-tokens.json'
import template from './template-definition.json'
import { createNextProjectGenerator } from '../../src'

describe('React Next Project Generator', () => {
  const generator = createNextProjectGenerator()

  it('runs without crashing and adding external imports to _app.js', async () => {
    const outputFolder = await generator.generateProject(
      uidlSampleWithoutProjectStyleesButImports,
      template
    )
    const assetsPath = generator.getAssetsPath()

    const publicFolder = outputFolder.subFolders.find((folder) => folder.name === 'pages')
    const appFile = publicFolder.files.find((file) => file.name === '_app')

    expect(assetsPath).toBeDefined()
    expect(outputFolder.name).toBe(template.name)
    expect(outputFolder.files[0].name).toBe('package')
    expect(appFile).toBeDefined()
    expect(appFile.content).toContain(`import "antd/dist/antd.css`)

    expect(appFile.content).not.toContain(`import './style.css'`)
  })

  it('runs without crashing and adding style sheet to _app.js file', async () => {
    const outputFolder = await generator.generateProject(uidlSampleWithProjectStyleSheet, template)
    const assetsPath = generator.getAssetsPath()

    const publicFolder = outputFolder.subFolders.find((folder) => folder.name === 'pages')
    const appFile = publicFolder.files.find((file) => file.name === '_app')

    expect(assetsPath).toBeDefined()
    expect(outputFolder.name).toBe(template.name)
    expect(outputFolder.files[0].name).toBe('package')
    expect(appFile).toBeDefined()
    expect(appFile.content).not.toContain(`import "antd/dist/antd.css`)
    expect(appFile.content).toContain(`import "./style.css"`)
  })

  it('runs without crashing and adding external dependencies', async () => {
    const outputFolder = await generator.generateProject(uidlSampleWithDependencies, template)

    const pages = outputFolder.subFolders[1]

    expect(pages.files[0].content).toContain(`import Script from 'dangerous-html/react'`)
    expect(pages.files[0].content).toContain(`Page 1<Modal></Modal>`)
  })

  it('runs without crashing', async () => {
    const outputFolder = await generator.generateProject(uidlSample, template)
    const assetsPath = generator.getAssetsPath()

    expect(assetsPath).toBeDefined()
    expect(outputFolder.name).toBe(template.name)
    expect(outputFolder.files[0].name).toBe('package')

    const components = outputFolder.subFolders[0]
    const pages = outputFolder.subFolders[1]

    expect(components.files[0].name).toBe('one-component')
    expect(pages.files[0].name).toBe('index')
    expect(pages.files[1].name).toBe('about')
  })

  it('runs without crashing and adds import of style sheet in _app.js', async () => {
    const result = await generator.generateProject(uidlSampleWithJustTokens, template)

    const pagesFolder = result.subFolders.find((folder) => folder.name === 'pages')
    const styleSheet = pagesFolder.files.find(
      (file) => file.name === 'style' && file.fileType === FileType.CSS
    )
    const appFile = pagesFolder.files.find(
      (file) => file.name === '_app' && file.fileType === FileType.JS
    )

    expect(styleSheet).toBeDefined()
    expect(styleSheet.content).toContain(`--greys-500: #595959`)
    expect(appFile).toBeDefined()
    expect(appFile.content).toContain(`import "./style.css"`)
  })

  it('creates a default route if a page is marked as fallback', async () => {
    const { subFolders } = await generator.generateProject(fallbackUidlSample, template)
    const pages = subFolders.find((folder) => folder.name === 'pages')
    const fallbackPage = pages?.files.find((file) => file.name === '404')

    expect(fallbackPage).toBeDefined()
  })

  it('throws error when invalid UIDL sample is used', async () => {
    const result = generator.generateProject(invalidUidlSample, template)

    await expect(result).rejects.toThrow(Error)
  })
})

'''
'''--- packages/teleport-project-generator-next/__tests__/end2end/project-with-import-without-global-styles.json ---
{
    "name": "myVueProject",
    "globals": {
      "settings": {
        "language": "en",
        "title": "teleportHQ"
      },
      "meta" : [
        { "name": "description", "content": "Free Web tutorials" },
        { "name": "keywords", "content": "prea bun, prea ca la tara" },
        { "name": "viewport", "content": "width=device-width, initial-scale=1.0" },
        { "property": "og:title", "content": "Free Web tutorials" },
        { "property": "og:url", "content": "/playground_assets/asdasd.png" }
      ],
      "manifest": {
        "icons": [
          {
            "src": "/playground_assets/icons-192.png",
            "type": "image/png",
            "sizes": "192x192"
          },
          {
            "src": "/playground_assets/icons-512.png",
            "type": "image/png",
            "sizes": "512x512"
          }
        ],
        "theme_color": "#822CEC",
        "background_color": "#822CEC"
      },
      "assets": [
        {
          "type": "style",
          "path": "https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css",
          "options": {
            "target": "body"
          }
        }, 
        {
          "type": "script",
          "path": "https://www.googletagmanager.com/gtm.js",
          "options": {
            "defer": true
          }
        },
        {
          "type": "script",
          "content": "console.log(\"inline script\")",
          "options": {
            "target": "body"
          }
        },
        {
          "type": "font",
          "path": "https://fonts.googleapis.com/css?family=Roboto"
        },
        {
          "type": "style",
          "content": "body{font-family: 'Roboto', sans-serif;}"
        },
        {
          "type": "icon",
          "path": "/playground_assets/favicon-32x32.png",
          "options": {
            "iconType": "image/png",
            "iconSizes": "32x32"
          }
        }
      ],
      "variables": {
        "primaryColor": "#822CEC",
        "secondaryColor": "#414141",
        "spacing": "10px"
      }
    },
    "root": {
      "name": "App",
      "importDefinitions": {
        "antdCSS": {
            "type": "package",
            "path": "antd/dist/antd.css",
            "version": "^4.5.1",
            "meta": {
              "importJustPath": true
            }
          }
      },
      "stateDefinitions": {
        "route": {
          "type": "string",
          "defaultValue": "index",
          "values": [
            {
              "value": "index",
              "pageOptions": {
                "navLink": "/",
                "fileName": "index",
                "componentName": "Home"
              }
            },
            {
              "value": "about",
              "pageOptions": {
                "navLink": "/about",
                "fileName": "about",
                "componentName": "About"
              }
            },
            {
              "value": "contact-us",
              "pageOptions": {
                "navLink": "/here-we-are",
                "fileName": "contact-us",
                "componentName": "Us"
              }
            }
          ]
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "Router",
          "children": [
            {
              "type": "conditional",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "container",
                    "children": [
                      {
                        "type": "static",
                        "content": "Page 1"
                      }
                    ]
                  }
                },
                "value": "index",
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "route"
                  }
                }
              }
            },
            {
              "type": "conditional",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "container",
                    "children": [
                      {
                        "type": "static",
                        "content": "Page 2"
                      }
                    ]
                  }
                },
                "value": "about",
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "route"
                  }
                }
              }
            },{
              "type": "conditional",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "container",
                    "children": [
                      {
                        "type": "static",
                        "content": "Page 3"
                      }
                    ]
                  }
                },
                "value": "contact-us",
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "route"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "components": {
      "OneComponent": {
        "name": "OneComponent",
        "propDefinitions": {
          "titleValue": {
            "type": "string",
            "defaultValue": "Hello"
          },
          "items": {
            "type": "array",
            "defaultValue": []
          }
        },
        "stateDefinitions": {
          "isVisible": {
            "type": "boolean",
            "defaultValue": true
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "container",
            "attrs": {
              "data-static-attr": {
                "type": "static",
                "content": "test"
              },
              "data-dynamic-attr": {
                "type": "dynamic",
                "content": {
                  "referenceType": "prop",
                  "id": "titleValue"
                }
              }
            },
            "children": [
                {
                    "type": "element",
                    "content": {
                      "semanticType": "Button",
                      "elementType": "component",
                      "attrs": {
                        "type": "danger"
                      },
                      "dependency": {
                        "type": "package",
                        "version": "^4.5.1",
                        "path": "antd",
                        "meta": {
                          "namedImport": true
                        }
                      },
                      "children": ["Button from Antd"]
                    }
                  },
              {
                "type": "element",
                "content": {
                  "elementType": "text",
                  "children": [
                    {
                      "type": "static",
                      "content": "Hello World!"
                    },
                    {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "prop",
                        "id": "titleValue"
                      }
                    }
                  ]
                }
              },
              {
                "type": "repeat",
                "content": {
                  "node": {
                    "type": "element",
                    "content": {
                      "elementType": "text",
                      "children": [
                        {
                          "type": "dynamic",
                          "content": {
                            "referenceType": "local",
                            "id": "item"
                          }
                        },
                        {
                          "type": "element",
                          "content": {
                            "elementType": "list",
                            "attrs": {
                              "items": {
                                "type": "static",
                                "content": ["angular", "react", "vue"]
                              }
                            }
                          }
                        }
                      ]
                    }
                  },
                  "dataSource": {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "prop",
                      "id": "items"
                    }
                  },
                  "meta": {
                    "useIndex": true,
                    "iteratorName": "item"
                  }
                }
              },
              {
                "type": "conditional",
                "content": {
                  "reference": {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "state",
                      "id": "isVisible"
                    }
                  },
                  "value": true,
                  "node": {
                    "type": "element",
                    "content": {
                      "elementType": "text",
                      "children": [{
                        "type": "static",
                        "content": "Now you see me!"
                      }]
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "ExpandableArea": {
        "name": "ExpandableArea",
        "propDefinitions": {
          "titleValue": {
            "type": "string",
            "defaultValue": "Hello"
          },
          "text": {
            "type": "string",
            "defaultValue": "Is it me you're looking for?"
          }
        },
        "stateDefinitions": {
          "isExpanded": {
            "type": "boolean",
            "defaultValue": false
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "container",
            "style": {
              "margin": "10px"
            },
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "text",
                  "children": [{
                    "type": "dynamic",
                    "content": {
                      "referenceType": "prop",
                      "id": "titleValue"
                    }
                  }]
                }
              },
              {
                "type": "element",
                "content": {
                  "elementType": "button",
                  "children": [{
                    "type": "conditional",
                    "content": {
                      "node": {
                        "type": "static",
                        "content": "Hide me"
                      },
                      "value": true,
                      "reference": {
                        "type": "dynamic",
                        "content": {
                          "referenceType": "state",
                          "id": "isExpanded"
                        }
                      }
                    }
                  },{
                    "type": "conditional",
                    "content": {
                      "node": {
                        "type": "static",
                        "content": "Show me"
                      },
                      "value": false,
                      "reference": {
                        "type": "dynamic",
                        "content": {
                          "referenceType": "state",
                          "id": "isExpanded"
                        }
                      }
                    }
                  }],
                  "events": {
                    "click": [
                      {
                        "type": "stateChange",
                        "modifies": "isExpanded",
                        "newState": "$toggle"
                      }
                    ]
                  }
                }
              },
              {
                "type": "conditional",
                "content": {
                  "node": {
                    "type": "element",
                    "content": {
                      "elementType": "text",
                      "children": [{
                        "type": "dynamic",
                        "content": {
                          "referenceType": "prop",
                          "id": "text"
                        }
                      }]
                    }
                  },
                  "value": true,
                  "reference": {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "state",
                      "id": "isExpanded"
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "Modal": {
        "name": "Modal",
        "stateDefinitions": {
          "isOpen": {
            "type": "boolean",
            "defaultValue": false
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "group",
            "children": [
              {
                "type": "element",
                "content": {
                  "elementType": "button",
                  "name": "openmodal",
                  "children": [{
                    "type": "static",
                    "content": "Show Popup"
                  }],
                  "events": {
                    "click": [{
                      "type": "stateChange",
                      "modifies": "isOpen",
                      "newState": true
                    }]
                  }
                }
              },
              {
                "type": "conditional",
                "content": {
                  "node": {
                    "type": "element",
                    "content": {
                      "elementType": "component",
                      "semanticType": "ModalWindow",
                      "name": "window",
                      "dependency": {
                        "type": "local"
                      },
                      "events": {
                        "onClose": [{
                          "type": "stateChange",
                          "modifies": "isOpen",
                          "newState": false
                        }]
                      }
                    }
                  },
                  "value": true,
                  "reference": {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "state",
                      "id": "isOpen"
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "ModalWindow": {
        "name": "ModalWindow",
        "propDefinitions": {
          "message": {
            "type": "string",
            "defaultValue": "Hello"
          },
          "onClose": {
            "type": "func",
            "defaultValue": "() => {}"
          }
        },
        "stateDefinitions": {
          "fakeState": {
            "type": "boolean",
            "defaultValue": false
          }
        },
        "node": {
          "type": "element",
          "content": {
            "elementType": "container",
            "children": [{
              "type": "dynamic",
              "content": {
                "referenceType": "prop",
                "id": "message"
              }
            },{
              "type": "element",
              "content": {
                "elementType": "button",
                "name": "close",
                "children": [{
                  "type": "static",
                  "content": "Close me"
                }],
                "events": {
                  "click": [{
                    "type": "propCall",
                    "calls": "onClose"
                  },{
                    "type": "stateChange",
                    "modifies": "fakeState",
                    "newState": false
                  }]
                }
              }
            }]
          }
        }
      }
    }
  }
'''
'''--- packages/teleport-project-generator-next/__tests__/end2end/template-definition.json ---
{
  "name": "next",
  "files": [],
  "subFolders": [
    {
      "name": "components",
      "files": [],
      "subFolders": []              
    },
    {
      "name": "pages",
      "files": [],
      "subFolders": []              
    },
    {
      "name": "static",
      "files": [],
      "subFolders": []              
    }
  ]
}
'''
'''--- packages/teleport-project-generator-next/package.json ---
{
  "name": "@teleporthq/teleport-project-generator-next",
  "version": "0.29.2",
  "description": "Project generator for a standard Next.js project",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@babel/types": "^7.5.5",
    "@teleporthq/teleport-component-generator": "^0.29.2",
    "@teleporthq/teleport-component-generator-react": "^0.29.2",
    "@teleporthq/teleport-plugin-common": "^0.29.0",
    "@teleporthq/teleport-plugin-css": "^0.29.0",
    "@teleporthq/teleport-plugin-import-statements": "^0.29.0",
    "@teleporthq/teleport-plugin-jsx-head-config": "^0.29.0",
    "@teleporthq/teleport-plugin-jsx-next-image": "^0.29.0",
    "@teleporthq/teleport-postprocessor-prettier-js": "^0.29.0",
    "@teleporthq/teleport-project-generator": "^0.29.2",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-project-generator-next/src/index.ts ---
import { createProjectGenerator } from '@teleporthq/teleport-project-generator'
import { createComponentGenerator } from '@teleporthq/teleport-component-generator'
import { createReactComponentGenerator } from '@teleporthq/teleport-component-generator-react'
import { createJSXHeadConfigPlugin } from '@teleporthq/teleport-plugin-jsx-head-config'
import prettierJS from '@teleporthq/teleport-postprocessor-prettier-js'
import { ReactStyleVariation, FileType } from '@teleporthq/teleport-types'
import { createStyleSheetPlugin } from '@teleporthq/teleport-plugin-css'
import importStatementsPlugin from '@teleporthq/teleport-plugin-import-statements'
import nextImagePlugin from '@teleporthq/teleport-plugin-jsx-next-image'

import { createDocumentFileChunks, configContentGenerator } from './utils'
import { NextProjectMapping } from './next-project-mapping'
import NextTemplate from './project-template'

const createNextProjectGenerator = () => {
  const headConfigPlugin = createJSXHeadConfigPlugin({
    configTagIdentifier: 'Head',
    configTagDependencyPath: 'next/head',
    isExternalPackage: false,
    isDefaultImport: true,
  })
  const styleSheetPlugin = createStyleSheetPlugin({
    fileName: 'style',
  })

  const generator = createProjectGenerator({
    id: 'teleport-project-next',
    style: ReactStyleVariation.StyledJSX,
    components: {
      generator: createReactComponentGenerator,
      plugins: [nextImagePlugin],
      mappings: [NextProjectMapping],
      path: ['components'],
    },
    pages: {
      generator: createReactComponentGenerator,
      path: ['pages'],
      plugins: [nextImagePlugin, headConfigPlugin],
      mappings: [NextProjectMapping],
      options: {
        useFileNameForNavigation: true,
      },
    },
    projectStyleSheet: {
      generator: createComponentGenerator,
      plugins: [styleSheetPlugin],
      fileName: 'style',
      path: ['pages'],
    },
    entry: {
      postprocessors: [prettierJS],
      path: ['pages'],
      fileName: '_document',
      chunkGenerationFunction: createDocumentFileChunks,
    },
    framework: {
      config: {
        fileName: `_app`,
        fileType: FileType.JS,
        path: ['pages'],
        generator: createComponentGenerator,
        plugins: [importStatementsPlugin],
        postprocessors: [prettierJS],
        configContentGenerator,
        isGlobalStylesDependent: true,
      },
      externalStyles: {
        fileName: '_app',
        fileType: FileType.JS,
      },
    },
    static: {
      prefix: '',
      path: ['public'],
    },
  })

  return generator
}

export { createNextProjectGenerator, NextProjectMapping, NextTemplate }

'''
'''--- packages/teleport-project-generator-next/src/next-project-mapping.ts ---
import { Mapping } from '@teleporthq/teleport-types'

export const NextProjectMapping: Mapping = {
  elements: {
    navlink: {
      elementType: 'Link',
      dependency: {
        type: 'library',
        path: 'next/link',
        version: '^12.1.0',
      },
      attrs: {
        href: { type: 'dynamic', content: { referenceType: 'attr', id: 'transitionTo' } },
      },
      children: [
        {
          type: 'element',
          content: {
            elementType: 'a',
            name: 'link',
            children: [{ type: 'dynamic', content: { referenceType: 'children', id: 'children' } }],
          },
        },
      ],
    },
    'html-node': {
      elementType: 'Script',
      dependency: {
        type: 'package',
        path: 'dangerous-html',
        version: '0.1.13',
        meta: {
          importAlias: 'dangerous-html/react',
        },
      },
    },
    'lottie-node': {
      elementType: 'lottie-player',
      dependency: {
        type: 'package',
        version: '1.6.0',
        path: '@lottiefiles/lottie-player',
        meta: {
          importJustPath: true,
          needsWindowObject: true,
        },
      },
    },
  },
}

'''
'''--- packages/teleport-project-generator-next/src/project-template.ts ---
export default {
  name: 'teleport-project-next',
  files: [
    {
      name: 'package',
      content: `
{
  "name": "teleport-project-next",
  "version": "1.0.0",
  "description": "A next project generated based on a UIDL document",
  "main": "index.js",
  "scripts": {
    "dev": "next",
    "build": "next build",
    "start": "next start",
    "export": "next export"
  },
  "author": "TeleportHQ",
  "license": "MIT",
  "dependencies": {
    "next": "^12.1.0",
    "react": "^17.0.2",
    "react-dom": "^17.0.2"
  }
}`,
      fileType: 'json',
    },
  ],
  subFolders: [],
}

'''
'''--- packages/teleport-project-generator-next/src/utils.ts ---
import { UIDLUtils } from '@teleporthq/teleport-shared'
import { ASTUtils, ASTBuilders } from '@teleporthq/teleport-plugin-common'
import * as types from '@babel/types'
import {
  ProjectUIDL,
  ChunkDefinition,
  EntryFileOptions,
  FileType,
  ChunkType,
  FrameWorkConfigOptions,
} from '@teleporthq/teleport-types'

export const createDocumentFileChunks = (uidl: ProjectUIDL, options: EntryFileOptions) => {
  const { settings, meta, assets, manifest, customCode } = uidl.globals

  const htmlNode = ASTBuilders.createJSXTag('Html')
  const headNode = ASTBuilders.createJSXTag('Head')
  const bodyNode = ASTBuilders.createJSXTag('body')

  const mainNode = ASTBuilders.createJSXTag('Main')
  const nextScriptNode = ASTBuilders.createJSXTag('NextScript')
  ASTUtils.addChildJSXTag(bodyNode, mainNode)
  ASTUtils.addChildJSXTag(bodyNode, nextScriptNode)

  ASTUtils.addChildJSXTag(htmlNode, headNode)
  ASTUtils.addChildJSXTag(htmlNode, bodyNode)

  if (settings.language) {
    ASTUtils.addAttributeToJSXTag(htmlNode, 'lang', settings.language)
  }

  // NOTE: Title is added in per page, not in the layout file

  if (manifest) {
    const linkTag = ASTBuilders.createJSXTag('link')
    ASTUtils.addAttributeToJSXTag(linkTag, 'rel', 'manifest')
    ASTUtils.addAttributeToJSXTag(
      linkTag,
      'href',
      UIDLUtils.prefixAssetsPath(`/manifest.json`, options.assets)
    )
    ASTUtils.addChildJSXTag(headNode, linkTag)
  }

  meta.forEach((metaItem) => {
    const metaTag = ASTBuilders.createJSXTag('meta')
    Object.keys(metaItem).forEach((key) => {
      const metaValue = UIDLUtils.prefixAssetsPath(metaItem[key], options.assets)
      ASTUtils.addAttributeToJSXTag(metaTag, key, metaValue)
    })
    ASTUtils.addChildJSXTag(headNode, metaTag)
  })

  ASTBuilders.appendAssetsAST(assets, options, headNode, bodyNode)

  if (customCode?.head) {
    // This is a workaround for inserting <style> <script> <link> etc. directly in <head>
    // It inserts <noscript></noscript> content <noscript></noscript>
    // The first tag (closing) is closing the root <noscript>
    // The second tag (opening) is for the root closing </noscript>
    const innerHTML = `</noscript>${customCode.head}<noscript>`
    const noScript = ASTBuilders.createJSXTag('noscript')
    ASTUtils.addAttributeToJSXTag(noScript, 'dangerouslySetInnerHTML', { __html: innerHTML })
    ASTUtils.addChildJSXTag(headNode, noScript)
  }

  if (customCode?.body) {
    const divNode = ASTBuilders.createJSXTag('div')
    ASTUtils.addAttributeToJSXTag(divNode, 'dangerouslySetInnerHTML', { __html: customCode.body })
    ASTUtils.addChildJSXTag(bodyNode, divNode)
  }

  // Create AST representation of the class CustomDocument extends Document
  // https://github.com/vercel/next.js#custom-document
  const fileAST = createDocumentWrapperAST(htmlNode)

  const chunks: Record<string, ChunkDefinition[]> = {
    [FileType.JS]: [
      {
        name: 'document',
        type: ChunkType.AST,
        fileType: FileType.JS,
        content: fileAST,
        linkAfter: [],
      },
    ],
  }

  return chunks
}

const createDocumentWrapperAST = (htmlNode: types.JSXElement, t = types) => {
  return t.program([
    t.importDeclaration(
      [
        t.importDefaultSpecifier(t.identifier('Document')),
        t.importSpecifier(t.identifier('Html'), t.identifier('Html')),
        t.importSpecifier(t.identifier('Head'), t.identifier('Head')),
        t.importSpecifier(t.identifier('Main'), t.identifier('Main')),
        t.importSpecifier(t.identifier('NextScript'), t.identifier('NextScript')),
      ],
      t.stringLiteral('next/document')
    ),
    t.classDeclaration(
      t.identifier('CustomDocument'),
      t.identifier('Document'),
      t.classBody([
        t.classMethod(
          'method',
          t.identifier('render'),
          [],
          t.blockStatement([t.returnStatement(htmlNode)])
        ),
      ]),
      null
    ),
    t.exportDefaultDeclaration(t.identifier('CustomDocument')),
  ])
}

export const configContentGenerator = (options: FrameWorkConfigOptions, t = types) => {
  const chunks: ChunkDefinition[] = []
  const result = {
    chunks: {},
    dependencies: options.dependencies,
  }

  const contentChunkContent = [
    t.importDeclaration(
      [t.importDefaultSpecifier(t.identifier('React'))],
      t.stringLiteral('react')
    ),
    t.exportDefaultDeclaration(
      t.functionDeclaration(
        t.identifier('MyApp'),
        [
          t.objectPattern([
            t.objectProperty(t.identifier('Component'), t.identifier('Component')),
            t.objectProperty(t.identifier('pageProps'), t.identifier('pageProps')),
          ]),
        ],
        t.blockStatement([
          t.returnStatement(
            t.jsxElement(
              t.jsxOpeningElement(
                t.jsxIdentifier('Component'),
                [t.jsxSpreadAttribute(t.identifier('pageProps'))],
                true
              ),
              null,
              [],
              true
            )
          ),
        ])
      )
    ),
  ]

  chunks.push({
    type: ChunkType.AST,
    name: 'app-js-chunk',
    fileType: FileType.JS,
    content: contentChunkContent,
    linkAfter: ['import-js-chunk'],
  })

  // Adding global styles import only when needed. By default we will generate _app.js
  if (options.globalStyles?.isGlobalStylesDependent) {
    chunks.push({
      type: ChunkType.AST,
      name: 'import-js-chunk',
      fileType: FileType.JS,
      content: t.importDeclaration(
        [],
        t.stringLiteral(`${options.globalStyles.path}${options.globalStyles.sheetName}.css`)
      ),
      linkAfter: [],
    })
  }

  result.chunks = {
    [FileType.JS]: chunks,
  }

  return result
}

'''
'''--- packages/teleport-project-generator-next/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-project-generator-nuxt/README.md ---
# teleport-project-generator-nuxt

Project generator for a standard Nuxt.js project.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-project-generator-nuxt
```
or
```bash
yarn add @teleporthq/teleport-project-generator-nuxt
```

'''
'''--- packages/teleport-project-generator-nuxt/__tests__/end2end/index.ts ---
import uidlSample from '../../../../examples/test-samples/project-sample.json'
import fallbackUidlSample from '../../../../examples/uidl-samples/project.json'
import uidlSampleWithDependencies from '../../../../examples/test-samples/project-sample-with-dependency.json'
import invalidUidlSample from '../../../../examples/test-samples/project-invalid-sample.json'
import template from './template-definition.json'
import { nuxtErrorPageMapper } from '../../src/error-page-mapping'
import { createNuxtProjectGenerator } from '../../src'

const generator = createNuxtProjectGenerator()

afterAll(() => {
  generator.cleanPlugins()
})

describe('Vue Nuxt Project Generator', () => {
  it('runs without crashing', async () => {
    const outputFolder = await generator.generateProject(uidlSample, template)
    const assetsPath = generator.getAssetsPath()

    const packageJSON = outputFolder.files[1]

    expect(assetsPath).toBeDefined()
    expect(outputFolder.name).toBe(template.name)
    expect(packageJSON).toBeDefined()
  })

  it('runs without crashing with external dependencies with supported syntaxes', async () => {
    const outputFolder = await generator.generateProject(uidlSampleWithDependencies, template)
    const assetsPath = generator.getAssetsPath()

    const packageJSON = outputFolder.files[2]
    const pages = outputFolder.subFolders[1]
    const components = outputFolder.subFolders[0]

    expect(assetsPath).toBeDefined()
    expect(outputFolder.name).toBe(template.name)
    expect(packageJSON).toBeDefined()
    expect(pages.files.length).toBe(3)
    expect(components.files.length).toBe(4)

    /*
     * Support for external dependencies for Nuxt is same as Vue
     * For further details, refer --> https://github.com/teleporthq/teleport-code-generators/pull/478
     */

    expect(components.files[2].content).toContain(`import { Button } from 'antd'`)
    expect(pages.files[0].name).toBe('index')
    expect(pages.files[0].content).toContain(
      `import DangerousHTML from 'dangerous-html/dist/vue/lib.js'`
    )

    expect(packageJSON.content).toContain(`"antd": "4.5.4"`)
    expect(packageJSON.content).toContain(`"dangerous-html": "0.1.13"`)

    /* For Nuxt based projects, just imports are injected in index file of the routes */
    expect(pages.files[0].content).toContain(`import 'antd/dist/antd.css'`)
  })

  it('creates a default route if a page is marked as fallback', async () => {
    generator.addPlugin(nuxtErrorPageMapper)
    const { subFolders } = await generator.generateProject(fallbackUidlSample, template)

    const pages = subFolders.find((folder) => folder.name === 'layouts')
    const fallbackPage = pages?.files.find((file) => file.name === 'error')

    expect(fallbackPage).toBeDefined()
  })

  it('throws error when invalid UIDL sample is used', async () => {
    const result = generator.generateProject(invalidUidlSample, template)

    await expect(result).rejects.toThrow(Error)
  })
})

'''
'''--- packages/teleport-project-generator-nuxt/__tests__/end2end/template-definition.json ---
{
  "name": "nuxt",
  "files": [],
  "subFolders": [
    {
      "name": "components",
      "files": [],
      "subFolders": []              
    },
    {
      "name": "pages",
      "files": [],
      "subFolders": []              
    },
    {
      "name": "static",
      "files": [],
      "subFolders": []              
    }
  ]
}
'''
'''--- packages/teleport-project-generator-nuxt/package.json ---
{
  "name": "@teleporthq/teleport-project-generator-nuxt",
  "version": "0.29.2",
  "description": "Project generator for a standard Nuxt.js project",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-component-generator": "^0.29.2",
    "@teleporthq/teleport-component-generator-vue": "^0.29.2",
    "@teleporthq/teleport-plugin-css": "^0.29.0",
    "@teleporthq/teleport-plugin-vue-head-config": "^0.29.0",
    "@teleporthq/teleport-postprocessor-prettier-html": "^0.29.0",
    "@teleporthq/teleport-postprocessor-prettier-js": "^0.29.0",
    "@teleporthq/teleport-project-generator": "^0.29.2",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-project-generator-nuxt/src/error-page-mapping.ts ---
import { ProjectPlugin, ProjectPluginStructure } from '@teleporthq/teleport-types'

class NuxtErrorMappingPlugin implements ProjectPlugin {
  async runBefore(structure: ProjectPluginStructure) {
    return structure
  }

  async runAfter(structure: ProjectPluginStructure) {
    const { uidl, files } = structure
    const routes = uidl.root.stateDefinitions.route
    const fallback = routes.values.find((route) => route.pageOptions?.fallback)
    if (!fallback) {
      return structure
    }

    const file =
      files.get(fallback.pageOptions?.componentName) || files.get(fallback.pageOptions?.fileName)
    if (!file) {
      return structure
    }

    file.files[0].name = 'error'
    file.path = ['layouts']
    return structure
  }
}

export const nuxtErrorPageMapper = new NuxtErrorMappingPlugin()

'''
'''--- packages/teleport-project-generator-nuxt/src/index.ts ---
import { createProjectGenerator } from '@teleporthq/teleport-project-generator'
import { createVueComponentGenerator } from '@teleporthq/teleport-component-generator-vue'
import { createComponentGenerator } from '@teleporthq/teleport-component-generator'
import vueHeadConfigPlugin from '@teleporthq/teleport-plugin-vue-head-config'
import prettierHTML from '@teleporthq/teleport-postprocessor-prettier-html'
import prettierJS from '@teleporthq/teleport-postprocessor-prettier-js'
import { createStyleSheetPlugin } from '@teleporthq/teleport-plugin-css'
import { FileType } from '@teleporthq/teleport-types'
import { configContentGenerator } from './utils'

import { NuxtProjectMapping } from './nuxt-project-mapping'
import NuxtTemplate from './project-template'
import { nuxtErrorPageMapper } from './error-page-mapping'

const createNuxtProjectGenerator = () => {
  const styleSheetPlugin = createStyleSheetPlugin({
    fileName: 'style',
  })

  const generator = createProjectGenerator({
    id: 'teleport-project-nuxt',
    components: {
      generator: createVueComponentGenerator,
      mappings: [NuxtProjectMapping],
      path: ['components'],
    },
    pages: {
      generator: createVueComponentGenerator,
      plugins: [vueHeadConfigPlugin],
      mappings: [NuxtProjectMapping],
      path: ['pages'],
      options: {
        useFileNameForNavigation: true,
      },
    },
    entry: {
      postprocessors: [prettierHTML],
      fileName: 'app',
      path: [],
      options: {
        appRootOverride: '{{APP}}',
      },
    },
    projectStyleSheet: {
      generator: createComponentGenerator,
      plugins: [styleSheetPlugin],
      fileName: 'style',
      path: [''],
    },
    framework: {
      config: {
        fileName: 'nuxt.config',
        fileType: FileType.JS,
        path: [''],
        generator: createComponentGenerator,
        postprocessors: [prettierJS],
        configContentGenerator,
        isGlobalStylesDependent: true,
      },
    },
    static: {
      prefix: '',
      path: ['static'],
    },
  })

  return generator
}

export { createNuxtProjectGenerator, NuxtProjectMapping, NuxtTemplate, nuxtErrorPageMapper }

'''
'''--- packages/teleport-project-generator-nuxt/src/nuxt-project-mapping.ts ---
import { Mapping } from '@teleporthq/teleport-types'

export const NuxtProjectMapping: Mapping = {
  elements: {
    navlink: {
      elementType: 'nuxt-link',
      attrs: {
        to: { type: 'dynamic', content: { referenceType: 'attr', id: 'transitionTo' } },
      },
    },
    'html-node': {
      elementType: 'DangerousHTML',
      dependency: {
        type: 'package',
        path: 'dangerous-html',
        version: '0.1.13',
        meta: {
          importAlias: 'dangerous-html/dist/vue/lib.js',
        },
      },
    },
  },
}

'''
'''--- packages/teleport-project-generator-nuxt/src/project-template.ts ---
export default {
  name: 'teleport-project-nuxt',
  files: [
    {
      content: `
{
  "name": "teleport-project-nuxt",
  "version": "1.0.0",
  "description": "A nuxt project generated based on a UIDL document",
  "author": "teleporthq.io",
  "private": true,
  "scripts": {
    "dev": "nuxt",
    "build": "nuxt build",
    "start": "nuxt start",
    "generate": "nuxt generate"
  },
  "devDependencies": {
    "nuxt": "^2.15.8"
  },
  "dependencies": {
    "vue": "2.7.14",
    "@lottiefiles/vue-lottie-player": "1.0.4"
  }
}`,
      fileType: 'json',
      name: 'package',
    },
  ],
  subFolders: [
    {
      name: 'layouts',
      files: [
        {
          name: 'default',
          content: `
<template>
  <div><nuxt /></div>
</template>`,
          fileType: 'vue',
        },
      ],
      subFolders: [],
    },
    {
      name: 'plugins',
      files: [
        {
          name: 'lottie-vue-player.client.js',
          content: `
import Vue from 'vue';

import LottieVuePlayer from "@lottiefiles/vue-lottie-player";

Vue.use(LottieVuePlayer);
          `,
        },
      ],
      subFolders: [],
    },
  ],
}

'''
'''--- packages/teleport-project-generator-nuxt/src/utils.ts ---
import {
  FrameWorkConfigOptions,
  ChunkDefinition,
  ChunkType,
  FileType,
} from '@teleporthq/teleport-types'
import * as types from '@babel/types'

export const configContentGenerator = (options: FrameWorkConfigOptions, t = types) => {
  const result = {
    chunks: {},
    dependencies: options.dependencies,
  }

  if (options.globalStyles.isGlobalStylesDependent) {
    const content = types.exportDefaultDeclaration(
      t.objectExpression([
        t.objectProperty(
          t.identifier(FileType.CSS),
          t.arrayExpression([
            t.templateLiteral(
              [
                t.templateElement({
                  raw: `~/${options.globalStyles.sheetName}.${FileType.CSS}`,
                  cooked: `~/${options.globalStyles.sheetName}.${FileType.CSS}`,
                }),
              ],
              []
            ),
          ])
        ),
        t.objectProperty(
          t.identifier('plugins'),
          t.arrayExpression([
            t.templateLiteral(
              [
                t.templateElement({
                  raw: `~/plugins/lottie-vue-player.client.js`,
                  cooked: `~/plugins/lottie-vue-player.client.js`,
                }),
              ],
              []
            ),
          ])
        ),
      ])
    )

    const chunk: ChunkDefinition = {
      type: ChunkType.AST,
      name: 'config-chunk',
      fileType: FileType.JS,
      content,
      linkAfter: [],
    }

    result.chunks = {
      [FileType.JS]: [chunk],
    }
  }

  return result
}

'''
'''--- packages/teleport-project-generator-nuxt/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-project-generator-react/README.md ---
# teleport-project-generator-react

Project generator using React and React-Router, on top of a standard create-react-app structure.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-project-generator-react
```
or
```bash
yarn add @teleporthq/teleport-project-generator-react
```

'''
'''--- packages/teleport-project-generator-react/__tests__/end2end/index.ts ---
import { FileType, ProjectStrategy, ReactStyleVariation } from '@teleporthq/teleport-types'
import fallbackUidlSample from '../../../../examples/uidl-samples/project.json'
import uidlSampleWithExternalDependencies from '../../../../examples/test-samples/project-sample-with-dependency.json'
import uidlSample from '../../../../examples/test-samples/project-sample.json'
import uidlSampleWithJustTokens from '../../../../examples/test-samples/project-with-only-tokens.json'
import invalidUidlSample from '../../../../examples/test-samples/project-invalid-sample.json'
import uidlWithCompStyleOverrides from '../../../../examples/test-samples/comp-style-overrides.json'
import template from './template-definition.json'
import { createReactProjectGenerator } from '../../src'

describe('Passes the rootClass which using the component', () => {
  it('run without crashing while using with React + CSS', async () => {
    const strategy: Partial<ProjectStrategy> = {
      style: ReactStyleVariation.CSS,
    }
    const generator = createReactProjectGenerator()
    generator.updateStrategy(strategy)

    const result = await generator.generateProject(uidlWithCompStyleOverrides)
    const srcFolder = result.subFolders.find((folder) => folder.name === 'src')
    const views = srcFolder.subFolders.find((folder) => folder.name === 'views')
    const components = srcFolder.subFolders.find((folder) => folder.name === 'components')
    const mainFile = views.files.find(
      (file) => file.name === 'landing-page' && file.fileType === FileType.JS
    )
    const styleFile = components.files.find(
      (file) => file.name === 'place-card' && file.fileType === FileType.CSS
    )

    expect(mainFile.content).toContain(`rootClassName=\"place-card-root-class-name\"`)
    expect(mainFile.content).toContain(`rootClassName=\"place-card-root-class-name1\"`)
    expect(styleFile.content).toContain(`.place-card-root-class-name {`)
    expect(styleFile.content).toContain(`.place-card-root-class-name1 {`)
  })
})

describe('React Project Generator', () => {
  const generator = createReactProjectGenerator()

  it('runs without crashing', async () => {
    const outputFolder = await generator.generateProject(
      uidlSample as unknown as Record<string, unknown>,
      template
    )
    const assetsPath = generator.getAssetsPath()
    const srcFolder = outputFolder.subFolders[0]
    const publicFolder = outputFolder.subFolders[1]
    const packageJSON = outputFolder.files[0]
    const componentsFoler = srcFolder.subFolders[0]
    const indexContent = publicFolder.files[1].content

    expect(assetsPath).toBeDefined()
    expect(outputFolder.name).toBe(template.name)
    expect(packageJSON.name).toBe('package')
    expect(srcFolder.files[0].name).toBe('index')
    expect(indexContent).toContain(`<style data-type="default-styles">`)
    expect(indexContent).toContain(`data-type="default-font"`)
    expect(srcFolder.files[0].fileType).toBe('js')
    expect(publicFolder.files[0].name).toBe('manifest')
    expect(publicFolder.files[0].fileType).toBe('json')
    expect(publicFolder.files[1].name).toBe('index')
    expect(publicFolder.files[1].fileType).toBe('html')
    expect(componentsFoler.name).toBe('components')
    expect(srcFolder.subFolders[1].name).toBe('pages')
  })

  it('runs without crashing with external dependencies', async () => {
    const outputFolder = await generator.generateProject(
      uidlSampleWithExternalDependencies as unknown as Record<string, unknown>,
      template
    )
    const assetsPath = generator.getAssetsPath()
    const srcFolder = outputFolder.subFolders[0]
    const publicFolder = outputFolder.subFolders[1]
    const viewsFolder = srcFolder.subFolders[3]
    const packageJSON = outputFolder.files[0]
    const componentsFoler = srcFolder.subFolders[0]
    const modalComponent = componentsFoler.files[3]

    expect(assetsPath).toBeDefined()
    expect(outputFolder.name).toBe(template.name)
    expect(packageJSON.name).toBe('package')
    expect(srcFolder.files[0].name).toBe('index')
    expect(srcFolder.files[0].fileType).toBe('js')
    expect(srcFolder.files[0].content).not.toContain(`import './style.css'`)
    expect(publicFolder.files[0].name).toBe('manifest')
    expect(publicFolder.files[0].fileType).toBe('json')
    expect(publicFolder.files[1].name).toBe('index')
    expect(publicFolder.files[1].fileType).toBe('html')
    expect(componentsFoler.name).toBe('components')
    expect(srcFolder.subFolders[1].name).toBe('pages')

    /*
     * For react based projects we just import the componetns wherever they are being used
     * and external dependencies are added to package.json
     *
     * External dependencies have first class support for react. For other frameworks and variants,
     * please refer --> https://github.com/teleporthq/teleport-code-generators/pull/478
     */

    expect(packageJSON.content).toContain(`{
  "name": "myvueproject",
  "version": "1.0.0",
  "description": "Project generated based on a UIDL document",
  "dependencies": {
    "dangerous-html": "0.1.13",
    "@lottiefiles/react-lottie-player": "3.4.7",
    "react-helmet": "^6.1.0",
    "prop-types": "15.7.2",
    "antd": "4.5.4"
  }
}`)
    expect(modalComponent).toBeDefined()
    expect(modalComponent.content).toContain(`import { Button } from 'antd'`)
    expect(modalComponent.content).toContain(
      `<Button type="primary" onClick={() => setIsOpen(true)}>
        Show Popup
      </Button>`
    )
    expect(viewsFolder.files[0].content).toContain(`import Modal from '../components/modal'`)
    expect(viewsFolder.files[0].content).toContain(`import Script from 'dangerous-html/react'`)
    expect(viewsFolder.files[0].content).toContain(`Page 1<Modal></Modal>`)
    expect(viewsFolder.files[0].content).toContain(
      `<div className="home-div">
        <Script
          html={\`<blockquote class='twitter-tweet'><p lang='en' dir='ltr'>Feels like the last 20 mins of Don’t Look Up right about now…</p>&mdash; Netflix (@netflix) <a href='https://twitter.com/netflix/status/1593420772948598784?ref_src=twsrc%5Etfw'>November 18, 2022</a></blockquote> <script async src='https://platform.twitter.com/widgets.js'></script>\`}
        ></Script>
      </div>`
    )
    /* Imports that are just need to be inserted are added to router file by default */
    expect(srcFolder.files[0].content).toContain(`import 'antd/dist/antd.css'`)
  })

  it('runs without crashing and using only tokens', async () => {
    const result = await generator.generateProject(uidlSampleWithJustTokens, template)
    const srcFolder = result.subFolders.find((folder) => folder.name === 'src')
    const styleSheet = srcFolder.files.find(
      (file) => file.name === 'style' && file.fileType === FileType.CSS
    )
    const index = srcFolder.files.find(
      (file) => file.name === 'index' && file.fileType === FileType.JS
    )

    expect(styleSheet).toBeDefined()
    expect(styleSheet.content).toContain(`--greys-500: #595959`)
    expect(index).toBeDefined()
    expect(index.content).toContain(`import './style.css'`)
  })

  it('creates a default route if a page is marked as fallback', async () => {
    const { subFolders } = await generator.generateProject(fallbackUidlSample, template)
    const pages = subFolders.find((folder) => folder.name === 'src')
    const routesPage = pages?.files.find((file) => file.name === 'index')

    expect(routesPage).toBeDefined()
    expect(routesPage?.content).toContain(`<Route component={Fallback} path=\"**\" />`)
  })

  it('throws error when invalid UIDL sample is used', async () => {
    const result = generator.generateProject(invalidUidlSample, template)

    await expect(result).rejects.toThrow(Error)
  })
})

'''
'''--- packages/teleport-project-generator-react/__tests__/end2end/template-definition.json ---
{
  "name": "react",
  "files": [],
  "subFolders": [
    {
      "name": "src",
      "files": [],
      "subFolders": [
        {
          "name": "components",
          "files": [],
          "subFolders": []              
        },
        {
          "name": "pages",
          "files": [],
          "subFolders": []              
        },
        {
          "name": "static",
          "files": [],
          "subFolders": []              
        }
      ]
    }
  ]
}
'''
'''--- packages/teleport-project-generator-react/package.json ---
{
  "name": "@teleporthq/teleport-project-generator-react",
  "version": "0.29.2",
  "description": "Project generator using React and React-Router, on top of a standard create-react-app structure",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-component-generator": "^0.29.2",
    "@teleporthq/teleport-component-generator-react": "^0.29.2",
    "@teleporthq/teleport-plugin-css": "^0.29.0",
    "@teleporthq/teleport-plugin-import-statements": "^0.29.0",
    "@teleporthq/teleport-plugin-jsx-head-config": "^0.29.0",
    "@teleporthq/teleport-plugin-react-app-routing": "^0.29.2",
    "@teleporthq/teleport-postprocessor-prettier-html": "^0.29.0",
    "@teleporthq/teleport-postprocessor-prettier-js": "^0.29.0",
    "@teleporthq/teleport-project-generator": "^0.29.2",
    "@teleporthq/teleport-types": "^0.29.0",
    "@teleporthq/teleport-uidl-validator": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-project-generator-react/src/index.ts ---
import { createProjectGenerator } from '@teleporthq/teleport-project-generator'
import { createReactComponentGenerator } from '@teleporthq/teleport-component-generator-react'
import { createComponentGenerator } from '@teleporthq/teleport-component-generator'
import reactAppRoutingPlugin from '@teleporthq/teleport-plugin-react-app-routing'
import importStatementsPlugin from '@teleporthq/teleport-plugin-import-statements'
import headConfigPlugin from '@teleporthq/teleport-plugin-jsx-head-config'
import prettierJS from '@teleporthq/teleport-postprocessor-prettier-js'
import prettierHTML from '@teleporthq/teleport-postprocessor-prettier-html'
import { ReactStyleVariation } from '@teleporthq/teleport-types'
import { createStyleSheetPlugin, createCSSPlugin } from '@teleporthq/teleport-plugin-css'

import { ReactProjectMapping } from './react-project-mapping'
import ReactTemplate from './project-template'

const createReactProjectGenerator = () => {
  const generator = createProjectGenerator({
    id: 'teleport-project-react',
    style: ReactStyleVariation.CSS,
    components: {
      generator: createReactComponentGenerator,
      mappings: [ReactProjectMapping],
      path: ['src', 'components'],
    },
    pages: {
      generator: createReactComponentGenerator,
      mappings: [ReactProjectMapping],
      plugins: [headConfigPlugin],
      path: ['src', 'views'],
    },
    projectStyleSheet: {
      generator: createComponentGenerator,
      plugins: [createStyleSheetPlugin()],
      fileName: 'style',
      path: ['src'],
      importFile: true,
    },
    router: {
      generator: createComponentGenerator,
      plugins: [
        createCSSPlugin({
          templateChunkName: 'jsx-component',
          templateStyle: 'jsx',
          declareDependency: 'import',
          classAttributeName: 'className',
          forceScoping: true,
        }),
        reactAppRoutingPlugin,
        importStatementsPlugin,
      ],
      postprocessors: [prettierJS],
      fileName: 'index',
      path: ['src'],
    },
    entry: {
      postprocessors: [prettierHTML],
      fileName: 'index',
      path: ['public'],
    },
    static: {
      prefix: '',
      path: ['public'],
    },
  })

  return generator
}

export { createReactProjectGenerator, ReactProjectMapping, ReactTemplate }

'''
'''--- packages/teleport-project-generator-react/src/project-template.ts ---
export default {
  name: 'teleport-project-react',
  files: [
    {
      name: 'package',
      content: `
{
  "name": "teleport-project-react",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "@craco/craco": "^7.0.0-alpha.0",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-router-dom": "^5.2.0"
  },
  "scripts": {
    "start": "craco start",
    "build": "craco build",
    "test": "craco test --env=jsdom",
    "eject": "craco eject"
  },
  "engines": {
    "node": "16.x"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "react-scripts": "^5.0.1"
  }
}`,
      fileType: 'json',
    },
    {
      name: 'craco.config',
      fileType: 'js',
      content: `module.exports = {
  reactScriptsVersion: "react-scripts",
  style: {
    css: {
      loaderOptions: () => {
        return {
          url: false,
        };
      },
    },
  },
};`,
    },
  ],
  subFolders: [],
}

'''
'''--- packages/teleport-project-generator-react/src/react-project-mapping.ts ---
import { Mapping } from '@teleporthq/teleport-types'

export const ReactProjectMapping: Mapping = {
  elements: {
    navlink: {
      elementType: 'Link',
      dependency: {
        type: 'library',
        path: 'react-router-dom',
        version: '^5.2.0',
        meta: {
          namedImport: true,
        },
      },
      attrs: {
        to: { type: 'dynamic', content: { referenceType: 'attr', id: 'transitionTo' } },
      },
    },
  },
}

'''
'''--- packages/teleport-project-generator-react/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-project-generator-vue/README.md ---
# teleport-project-generator-vue

Project generator using Vue and Vue-Router.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-project-generator-vue
```
or
```bash
yarn add @teleporthq/teleport-project-generator-vue
```

'''
'''--- packages/teleport-project-generator-vue/__tests__/end2end/index.ts ---
import fallbackUidlSample from '../../../../examples/uidl-samples/project.json'
import uidlSampleWithDependencies from '../../../../examples/test-samples/project-sample-with-dependency.json'
import uidlSample from '../../../../examples/test-samples/project-sample.json'
import invalidUidlSample from '../../../../examples/test-samples/project-invalid-sample.json'
import template from './template-definition.json'
import { createVueProjectGenerator } from '../../src'

describe('Vue Project Generator', () => {
  const generator = createVueProjectGenerator()

  it('runs without crashing', async () => {
    const outputFolder = await generator.generateProject(uidlSample, template)
    const assetsPath = generator.getAssetsPath()
    const srcFolder = outputFolder.subFolders[0]
    const viewsFolder = srcFolder.subFolders[1]
    const packageJSON = outputFolder.files[0]
    const componentsFolder = srcFolder.subFolders[0]
    const modalComponent = componentsFolder.files[2]

    expect(assetsPath).toBeDefined()
    expect(outputFolder.name).toBe(template.name)
    expect(viewsFolder.files.length).toBe(3)
    expect(packageJSON).toBeDefined()
    expect(packageJSON.name).toBe('package')
    expect(modalComponent.name).toBe('modal')
    expect(componentsFolder.files.length).toBe(4)
  })

  it('runs without crashing with supported syntax for external dependencies', async () => {
    const outputFolder = await generator.generateProject(uidlSampleWithDependencies, template)
    const assetsPath = generator.getAssetsPath()
    const srcFolder = outputFolder.subFolders[0]
    const viewsFolder = srcFolder.subFolders[1]
    const packageJSON = outputFolder.files[0]
    const componentsFolder = srcFolder.subFolders[0]
    const modalComponent = componentsFolder.files[2]

    expect(assetsPath).toBeDefined()
    expect(outputFolder.name).toBe(template.name)
    expect(viewsFolder.files.length).toBe(3)
    expect(packageJSON).toBeDefined()
    expect(packageJSON.name).toBe('package')

    /*
     * All external dependencies are imported whenver they are used,
     * but we don't have a first class support for vue external dependencies
     * Since we need to make some config changes whenever a external component
     * is used from vue and the generators are not there yet.
     *
     * For further details refer --> https://github.com/teleporthq/teleport-code-generators/pull/478
     */

    expect(packageJSON.content).toContain(`{
  "name": "myvueproject",
  "version": "1.0.0",
  "description": "Project generated based on a UIDL document",
  "dependencies": {
    "dangerous-html": "0.1.13",
    "antd": "4.5.4"
  }
}`)
    expect(modalComponent.name).toBe('modal')
    expect(componentsFolder.files.length).toBe(4)
    expect(modalComponent.content).toContain(`import { Button } from 'antd'`)
    expect(viewsFolder.files[0].content).toContain(`<app-modal></app-modal>`)
    expect(viewsFolder.files[0].content).toContain(`import AppModal from '../components/modal'`)
    expect(viewsFolder.files[0].content).toContain(`import DangerousHTML from 'dangerous-html/vue'`)
    /** Imports that are just inserted like css are added to router file by default  */
    expect(srcFolder.files[0].content).toContain(`import 'antd/dist/antd.css'`)
  })

  it('creates a default route if a page is marked as fallback', async () => {
    const { subFolders } = await generator.generateProject(fallbackUidlSample, template)
    const pages = subFolders.find((folder) => folder.name === 'src')
    const routesPage = pages?.files.find((file) => file.name === 'router')

    expect(routesPage).toBeDefined()
    expect(routesPage?.content).toContain(`path: '**'`)
  })

  it('throws error when invalid UIDL sample is used', async () => {
    const result = generator.generateProject(invalidUidlSample, template)

    await expect(result).rejects.toThrow(Error)
  })
})

'''
'''--- packages/teleport-project-generator-vue/__tests__/end2end/template-definition.json ---
{
  "name": "vue",
  "files": [],
  "subFolders": [
    {
      "name": "src",
      "files": [],
      "subFolders": [
        {
          "name": "components",
          "files": [],
          "subFolders": []              
        },
        {
          "name": "views",
          "files": [],
          "subFolders": []              
        },
        {
          "name": "public",
          "files": [],
          "subFolders": []              
        }
      ]
    }
  ]
}
'''
'''--- packages/teleport-project-generator-vue/package.json ---
{
  "name": "@teleporthq/teleport-project-generator-vue",
  "version": "0.29.2",
  "description": "Project generator using Vue and Vue-Router",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-component-generator": "^0.29.2",
    "@teleporthq/teleport-component-generator-vue": "^0.29.2",
    "@teleporthq/teleport-plugin-css": "^0.29.0",
    "@teleporthq/teleport-plugin-import-statements": "^0.29.0",
    "@teleporthq/teleport-plugin-vue-app-routing": "^0.29.2",
    "@teleporthq/teleport-plugin-vue-head-config": "^0.29.0",
    "@teleporthq/teleport-postprocessor-prettier-html": "^0.29.0",
    "@teleporthq/teleport-postprocessor-prettier-js": "^0.29.0",
    "@teleporthq/teleport-project-generator": "^0.29.2",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-project-generator-vue/src/index.ts ---
import { createProjectGenerator } from '@teleporthq/teleport-project-generator'
import { createVueComponentGenerator } from '@teleporthq/teleport-component-generator-vue'
import { createComponentGenerator } from '@teleporthq/teleport-component-generator'
import vueRoutingPlugin from '@teleporthq/teleport-plugin-vue-app-routing'
import { createVueHeadConfigPlugin } from '@teleporthq/teleport-plugin-vue-head-config'
import importStatementsPlugin from '@teleporthq/teleport-plugin-import-statements'
import prettierHTML from '@teleporthq/teleport-postprocessor-prettier-html'
import prettierJS from '@teleporthq/teleport-postprocessor-prettier-js'
import pluginCSS, { createStyleSheetPlugin } from '@teleporthq/teleport-plugin-css'

import VueTemplate from './project-template'
import { VueProjectMapping } from './vue-project-mapping'

const createVueProjectGenerator = () => {
  const vueHeadConfigPlugin = createVueHeadConfigPlugin({ metaObjectKey: 'metaInfo' })

  const generator = createProjectGenerator({
    id: 'teleport-project-vue',
    components: {
      generator: createVueComponentGenerator,
      mappings: [VueProjectMapping],
      path: ['src', 'components'],
    },
    pages: {
      generator: createVueComponentGenerator,
      plugins: [vueHeadConfigPlugin],
      mappings: [VueProjectMapping],
      path: ['src', 'views'],
    },
    projectStyleSheet: {
      generator: createComponentGenerator,
      plugins: [createStyleSheetPlugin()],
      fileName: 'style',
      path: ['src'],
      importFile: true,
    },
    router: {
      generator: createComponentGenerator,
      plugins: [vueRoutingPlugin, pluginCSS, importStatementsPlugin],
      postprocessors: [prettierJS],
      path: ['src'],
      fileName: 'router',
    },
    entry: {
      postprocessors: [prettierHTML],
      path: ['public'],
    },
    static: {
      prefix: '',
      path: ['public'],
    },
  })

  return generator
}

export { createVueProjectGenerator, VueProjectMapping, VueTemplate }

'''
'''--- packages/teleport-project-generator-vue/src/project-template.ts ---
export default {
  name: 'teleport-project-vue',
  files: [
    {
      name: 'package',
      content: `
{
  "name": "teleport-project-vue",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "serve": "vue-cli-service serve",
    "build": "vue-cli-service build"
  },
  "dependencies": {
    "vue": "^2.6.7",
    "vue-router": "^3.0.2",
    "vue-meta": "^2.2.1",
    "@lottiefiles/vue-lottie-player": "1.0.4"
  },
  "devDependencies": {
    "@vue/babel-preset-app": "^5.0.8",
    "@vue/cli-plugin-babel": "^5.0.4",
    "@vue/cli-service": "^5.0.8",
    "vue-template-compiler": "^2.6.7"
  },
  "postcss": {
    "plugins": {
      "autoprefixer": {}
    }
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not ie <= 8"
  ]
}`,
      fileType: 'json',
    },
    {
      name: 'vue.config',
      fileType: 'js',
      content: String.raw`const path = require('path')

module.exports = {
  devServer: {
    allowedHosts: "all",
  },
  css: {
    loaderOptions: {
      css: {
        url: false,
      },
    },
  },
  chainWebpack: config => {
    config.plugin('copy').tap(args => {
      const UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()*?[\]{|}]|^!|[!+@](?=\())/g;
      const publicDir = path.resolve(process.VUE_CLI_SERVICE.context, 'public').replace(/\\/g, '/');
      const escapePublicDir= publicDir.replace(UNESCAPED_GLOB_SYMBOLS_RE, '\\$2');
      args[0].patterns[0].globOptions.ignore = args[0].patterns[0].globOptions.ignore.map(i => i.replace(publicDir, escapePublicDir));
      return args;
  });
  }
};`,
    },
    {
      name: 'babel.config',
      content: `
module.exports = {
  presets: [
    '@vue/app'
  ]
}`,
      fileType: 'js',
    },
  ],
  subFolders: [
    {
      name: 'src',
      files: [
        {
          name: 'App',
          content: `
<template>
  <router-view/>
</template>`,
          fileType: 'vue',
        },
        {
          name: 'main',
          content: `
import Vue from 'vue'
import App from './App.vue'
import router from './router'
import LottieVuePlayer from '@lottiefiles/vue-lottie-player'

Vue.use(LottieVuePlayer)
Vue.config.productionTip = false

new Vue({
  render: h => h(App),
  router
}).$mount('#app')`,
          fileType: 'js',
        },
      ],
      subFolders: [],
    },
  ],
}

'''
'''--- packages/teleport-project-generator-vue/src/vue-project-mapping.ts ---
import { Mapping } from '@teleporthq/teleport-types'

export const VueProjectMapping: Mapping = {
  elements: {
    navlink: {
      elementType: 'router-link',
      attrs: {
        to: { type: 'dynamic', content: { referenceType: 'attr', id: 'transitionTo' } },
      },
    },
  },
}

'''
'''--- packages/teleport-project-generator-vue/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-project-generator/README.md ---
# teleport-project-generator

Generic project generator that requires a specific strategy to run on custom configurations.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-project-generator
```
or
```bash
yarn add @teleporthq/teleport-project-generator
```

'''
'''--- packages/teleport-project-generator/__tests__/assembly-line.ts ---
import { ReactStyleVariation } from '@teleporthq/teleport-types'
import AssemblyLine from '../src/assembly-line'
import { mockAssemblyLineStructure, simplePluginMock, simplePluginMockToInjectFiles } from './mocks'

describe('Tests Project Aseembly line', () => {
  const assembly = new AssemblyLine([simplePluginMock])

  it('Plugin returns structure with style modified in runBefore life-cycle', async () => {
    const result = await assembly.runBefore(mockAssemblyLineStructure())

    expect(result).toBeDefined()
    expect(result.strategy.style).toBe(ReactStyleVariation.CSS)
    expect(Object.keys(result.dependencies).length).not.toBe(1)
    expect(Object.keys(result.devDependencies).length).not.toBe(1)
  })

  it('Plugin returns structure with dependencies modified in run-after life-cycle', async () => {
    const result = await assembly.runAfter(mockAssemblyLineStructure())

    expect(result).toBeDefined()
    expect(Object.keys(result.dependencies).length).toBe(1)
    expect(Object.keys(result.devDependencies).length).toBe(1)
  })

  it('Adds multiple plugins to assembly-line', async () => {
    assembly.addPlugin(simplePluginMockToInjectFiles)
    const result = await assembly.runAfter(mockAssemblyLineStructure())
    const { dependencies, devDependencies, files } = result
    const configFile = files.get('config')

    expect(result).toBeDefined()
    expect(Object.keys(dependencies).length).toBe(1)
    expect(Object.keys(devDependencies).length).toBe(1)
    /* tslint:disable:no-string-literal */
    expect(dependencies['react']).toBe(`^16.0.8`)
    expect(configFile).toBeDefined()
    expect(configFile.files[0].content).toContain(`cssModules: true`)
  })
})

'''
'''--- packages/teleport-project-generator/__tests__/file-handlers.ts ---
import { handlePackageJSON, createEntryFile, createManifestJSONFile } from '../src/file-handlers'
import { PackageJSON } from '../src/types'
import {
  GeneratedFolder,
  ProjectUIDL,
  FileType,
  UIDLRootComponent,
} from '@teleporthq/teleport-types'
import { component, elementNode } from '@teleporthq/teleport-uidl-builders'
import { createStrategyWithCommonGenerator } from './mocks'

import uidlSample from '../../../examples/test-samples/project-sample.json'

describe('createHtmlIndexFile', () => {
  it('returns index file with prefixed assets and app file', async () => {
    const options = {
      assets: {
        prefix: '',
        mappings: {},
        identifier: 'playground_assets',
      },
      appRootOverride: '{{root-placeholder}}',
    }
    const [entryFile] = await createEntryFile(
      uidlSample as unknown as ProjectUIDL,
      createStrategyWithCommonGenerator(),
      options
    )

    expect(entryFile.content).toContain('<html')
    expect(entryFile.content).toContain('{{root-placeholder}}')
  })
})

describe('createManifestJSONFile', () => {
  it('returns manifest file with prefixed assets', () => {
    const result = createManifestJSONFile(uidlSample as unknown as ProjectUIDL, {
      prefix: 'playground',
      identifier: 'playground_assets',
      mappings: { 'icons-192.png': '' },
    })

    expect(result.name).toBe('manifest')
    expect(result.fileType).toBe('json')
    expect(result.content).toContain('"src": "playground/playground_assets/')
  })

  it('returns manifest file with no prefixed assets', () => {
    const result = createManifestJSONFile(uidlSample as unknown as ProjectUIDL, {
      identifier: 'playground_assets',
    })

    expect(result.name).toBe('manifest')
    expect(result.fileType).toBe('json')
    expect(result.content).toContain('"src": "/playground_assets/')
  })
})

describe('handlePackageJSON', () => {
  const uidl: ProjectUIDL = {
    name: 'test-project',
    globals: { settings: { title: 'Random', language: 'en' }, meta: [], assets: [] },
    root: component('random', elementNode('container')) as UIDLRootComponent,
  }

  const dependencies = {
    'test-package': '^0.5.0',
    'another-test': '1.0.0',
  }

  it('creates one from scratch if template does not provide it', () => {
    const template: GeneratedFolder = {
      name: 'template',
      files: [],
      subFolders: [],
    }

    handlePackageJSON(template, uidl, dependencies)

    expect(template.files[0].fileType === FileType.JSON)
    expect(template.files[0].name === 'package')

    const jsonContent = JSON.parse(template.files[0].content) as PackageJSON
    expect(Object.keys(jsonContent.dependencies).length).toBe(2)
    expect(jsonContent.name).toBe('test-project')
  })

  it('appends data to the original one', () => {
    const templatePackageJSON: PackageJSON = {
      name: 'template-name',
      version: '1.2.3',
      description: 'package description',
      dependencies: {
        'template-dependency': '2.0.0',
      },
    }

    const template: GeneratedFolder = {
      name: 'template',
      files: [
        {
          name: 'package',
          fileType: FileType.JSON,
          content: JSON.stringify(templatePackageJSON),
        },
      ],
      subFolders: [],
    }

    handlePackageJSON(template, uidl, dependencies)

    expect(template.files[0].fileType === FileType.JSON)
    expect(template.files[0].name === 'package')

    const jsonContent = JSON.parse(template.files[0].content) as PackageJSON
    expect(Object.keys(jsonContent.dependencies).length).toBe(3)
    expect(jsonContent.name).toBe('test-project')
    expect(jsonContent.version).toBe('1.2.3')
  })
})

'''
'''--- packages/teleport-project-generator/__tests__/index.ts ---
import { ProjectUIDL } from '@teleporthq/teleport-types'
import { createProjectGenerator } from '../src'
import { resolveLocalDependencies } from '../src/utils'
import {
  mockMapping,
  createStrategyWithCommonGenerator,
  createStrategyWithSeparateGenerators,
} from './mocks'

import projectUIDL from '../../../examples/test-samples/project-sample.json'

describe('Generic Project Generator', () => {
  describe('with the same component generator for pages and components', () => {
    const strategy = createStrategyWithCommonGenerator()
    const generator = createProjectGenerator(strategy)

    it('creates an instance of a project generator', () => {
      expect(generator.generateProject).toBeDefined()
      expect(generator.getAssetsPath).toBeDefined()
      expect(generator.addMapping).toBeDefined()
    })

    it('sets the default assets prefix', () => {
      expect(generator.getAssetsPath()[0]).toBe('test')
      expect(generator.getAssetsPath()[1]).toBe('static')
    })

    it('sends the mapping to the component generators', () => {
      generator.addMapping(mockMapping)

      expect(strategy.components.mappings.length).toBe(1)
      expect(strategy.components.mappings[0]).toBe(mockMapping)
      expect(strategy.pages.mappings.length).toBe(1)
      expect(strategy.pages.mappings[0]).toBe(mockMapping)
    })

    it('calls the generators according to the strategy', async () => {
      const result = await generator.generateProject(projectUIDL)
      const uidl = projectUIDL as unknown as ProjectUIDL

      // This adds the local dependencies on the UIDL, so we can proper assert below
      resolveLocalDependencies([], uidl.components, strategy)
      expect(generator.componentGenerator).toBeDefined()
      expect(generator.pageGenerator).toBeDefined()
      expect(generator.pageGenerator.generateComponent).toBeCalledTimes(3)
      expect(generator.componentGenerator.generateComponent).toBeCalledTimes(4)
      expect(generator.componentGenerator.generateComponent).toBeCalledWith(
        expect.objectContaining({ name: 'ExpandableArea' }),
        expect.objectContaining({
          assets: {
            identifier: null,
            mappings: {},
            prefix: '/test/static',
          },
          designLanguage: undefined,
          mapping: {},
          skipValidation: true,
        })
      )
      expect(generator.routerGenerator.generateComponent).toBeCalledTimes(1)

      const routerUIDL = {
        ...uidl.root,
        outputOptions: {
          fileName: 'index',
        },
      }

      expect(generator.routerGenerator.generateComponent).toBeCalledWith(
        routerUIDL,
        expect.objectContaining({
          localDependenciesPrefix: './pages/',
        })
      )

      const componentFile = result.subFolders[0].subFolders[1].files[0]
      expect(componentFile.name).toBe('mock')
    })
  })

  describe('with the different component generators', () => {
    const strategy = createStrategyWithSeparateGenerators()
    const generator = createProjectGenerator(strategy)

    it('creates an instance of a project generator', () => {
      expect(generator.generateProject).toBeDefined()
      expect(generator.getAssetsPath).toBeDefined()
      expect(generator.addMapping).toBeDefined()
    })

    it('sets the default assets prefix', () => {
      expect(generator.getAssetsPath()[0]).toBe('test')
      expect(generator.getAssetsPath()[1]).toBe('static')
    })

    it('sends the mapping to the component generators', () => {
      generator.addMapping(mockMapping)
      expect(strategy.components.mappings.length).toBe(1)
      expect(strategy.components.mappings[0]).toBe(mockMapping)
    })

    it('calls the generators according to the strategy', async () => {
      await generator.generateProject(projectUIDL)
      const uidl = projectUIDL as unknown as ProjectUIDL

      // This adds the local dependencies on the UIDL, so we can proper assert below
      resolveLocalDependencies([], uidl.components, strategy)

      expect(generator.componentGenerator.generateComponent).toBeCalledTimes(4)
      expect(generator.componentGenerator.generateComponent).toBeCalledWith(
        expect.objectContaining({ name: 'ExpandableArea' }),
        {
          assets: {
            identifier: null,
            mappings: {},
            prefix: '/static',
          },
          designLanguage: undefined,
          projectRouteDefinition: uidl.root.stateDefinitions.route,
          mapping: {},
          skipValidation: true,
        }
      )
      expect(generator.pageGenerator.generateComponent).toBeCalledTimes(3)
      expect(generator.pageGenerator.generateComponent).toBeCalledWith(
        expect.objectContaining({
          name: 'Home',
        }),
        {
          assets: {
            identifier: null,
            mappings: {},
            prefix: '/static',
          },
          designLanguage: undefined,
          projectRouteDefinition: uidl.root.stateDefinitions.route,
          mapping: {},
          skipValidation: true,
        }
      )

      const routerUIDL = {
        ...uidl.root,
        outputOptions: {
          fileName: strategy.router.fileName,
        },
      }

      expect(generator.routerGenerator.generateComponent).toBeCalledTimes(1)
      expect(generator.routerGenerator.generateComponent).toBeCalledWith(
        routerUIDL,
        expect.objectContaining({
          localDependenciesPrefix: './pages/',
        })
      )
    })
  })

  describe('with custom generation options', () => {
    const strategy = createStrategyWithCommonGenerator()
    strategy.components.options = {
      createFolderForEachComponent: true,
      customComponentFileName: (_) => 'component',
      customStyleFileName: (_) => 'style',
    }
    const generator = createProjectGenerator(strategy)

    it('calls the generators according to the strategy', async () => {
      const result = await generator.generateProject(projectUIDL)

      const uidl = projectUIDL as unknown as ProjectUIDL

      // This adds the local dependencies on the UIDL, so we can proper assert below
      resolveLocalDependencies([], uidl.components, strategy)
      expect(generator.componentGenerator).toBeDefined()
      expect(generator.pageGenerator).toBeDefined()
      expect(generator.componentGenerator.generateComponent).toBeCalledTimes(4)
      expect(generator.pageGenerator.generateComponent).toBeCalledTimes(3)
      expect(generator.componentGenerator.generateComponent).toBeCalledWith(
        expect.objectContaining({ name: 'ExpandableArea' }),
        {
          assets: {
            identifier: null,
            mappings: {},
            prefix: '/test/static',
          },
          designLanguage: undefined,
          projectRouteDefinition: uidl.root.stateDefinitions.route,
          mapping: {},
          skipValidation: true,
        }
      )
      expect(generator.routerGenerator.generateComponent).toBeCalledTimes(1)

      const routerUIDL = {
        ...uidl.root,
        outputOptions: {
          fileName: 'index',
        },
      }

      expect(generator.routerGenerator.generateComponent).toBeCalledWith(
        routerUIDL,
        expect.objectContaining({
          localDependenciesPrefix: './pages/',
        })
      )

      const componentFolder = result.subFolders[0].subFolders[1].subFolders[0]
      expect(componentFolder.name).toBe('one-component')
    })
  })

  describe('updateComponentsStrategy', () => {
    it('changes the internal strategy object when no options are passed', () => {
      const generator = createProjectGenerator(createStrategyWithCommonGenerator())
      generator.updateComponentsStrategy({
        options: {
          createFolderForEachComponent: true,
        },
      })

      const strategy = generator.getStrategy()

      expect(strategy.components.options.createFolderForEachComponent).toBe(true)
    })

    it('overrides existing options', () => {
      const initialStrategy = createStrategyWithCommonGenerator()
      initialStrategy.components.options = {
        createFolderForEachComponent: false,
      }
      const generator = createProjectGenerator(initialStrategy)

      generator.updateComponentsStrategy({
        options: {
          createFolderForEachComponent: true,
        },
      })

      const strategy = generator.getStrategy()

      expect(strategy.components.options.createFolderForEachComponent).toBe(true)
    })
  })

  describe('updatePagesStrategy', () => {
    it('changes the internal strategy object when no options are passed', () => {
      const generator = createProjectGenerator(createStrategyWithCommonGenerator())
      generator.updatePagesStrategy({
        options: {
          createFolderForEachComponent: true,
        },
      })

      const strategy = generator.getStrategy()

      expect(strategy.pages.options.createFolderForEachComponent).toBe(true)
    })

    it('overrides existing options', () => {
      const initialStrategy = createStrategyWithCommonGenerator()
      initialStrategy.pages.options = {
        useFileNameForNavigation: true,
      }
      const generator = createProjectGenerator(initialStrategy)

      generator.updatePagesStrategy({
        options: {
          createFolderForEachComponent: true,
          useFileNameForNavigation: false,
        },
      })

      const strategy = generator.getStrategy()

      expect(strategy.pages.options.createFolderForEachComponent).toBe(true)
      expect(strategy.pages.options.useFileNameForNavigation).toBe(false)
    })
  })
})

'''
'''--- packages/teleport-project-generator/__tests__/mocks.ts ---
import {
  Mapping,
  CompiledComponent,
  GeneratedFolder,
  ProjectStrategy,
  ProjectPluginStructure,
  InMemoryFileRecord,
  ProjectUIDL,
  ReactStyleVariation,
  ProjectPlugin,
  FileType,
} from '@teleporthq/teleport-types'
import { UIDLUtils } from '@teleporthq/teleport-shared'
import projectUIDL from '../../../examples/test-samples/project-sample.json'
import { DEFAULT_TEMPLATE } from '../src/constants'

export const mockMapping: Mapping = {
  elements: {
    container: {
      elementType: 'mapped-container',
    },
  },
}

const mockedCompiledComponent: CompiledComponent = {
  files: [
    {
      name: 'mock',
      fileType: 'js',
      content: 'const mock = 0;',
    },
  ],
  dependencies: {},
}

export const mockComponentGenerator = () => ({
  addMapping: jest.fn(),
  addPlugin: jest.fn(),
  addPostProcessor: jest.fn(),
  generateComponent: jest.fn().mockImplementation(() => mockedCompiledComponent),
  linkCodeChunks: jest.fn(),
  resolveElement: jest.fn(),
})

const mockRouterGenerator = () => ({
  addMapping: jest.fn(),
  addPlugin: jest.fn(),
  addPostProcessor: jest.fn(),
  generateComponent: jest.fn().mockImplementation(() => mockedCompiledComponent),
  linkCodeChunks: jest.fn(),
  resolveElement: jest.fn(),
})

const mockEntryFileGenerator = () => ({
  addMapping: jest.fn(),
  addPlugin: jest.fn(),
  addPostProcessor: jest.fn(),
  generateComponent: jest.fn(),
  linkCodeChunks: jest.fn().mockImplementation(() => [
    {
      name: 'mock',
      fileType: 'html',
      content: '<html><body>{{root-placeholder}}</body></html>',
    },
  ]),
  resolveElement: jest.fn(),
})

export const createStrategyWithCommonGenerator = () => {
  const strategy: ProjectStrategy = {
    components: {
      generator: mockComponentGenerator,
      path: ['test', 'components'],
      plugins: [],
      postprocessors: [],
      mappings: [],
    },
    pages: {
      generator: mockComponentGenerator,
      path: ['test', 'pages'],
      plugins: [],
      postprocessors: [],
      mappings: [],
    },
    entry: {
      generator: mockEntryFileGenerator,
      path: ['test'],
      plugins: [],
      postprocessors: [],
      mappings: [],
    },
    router: {
      generator: mockRouterGenerator,
      path: ['test'],
      plugins: [],
      postprocessors: [],
      mappings: [],
    },
    static: {
      path: ['test', 'static'],
    },
  }
  return strategy
}

export const createStrategyWithSeparateGenerators = () => {
  const strategy: ProjectStrategy = {
    style: ReactStyleVariation.CSSModules,
    components: {
      generator: mockComponentGenerator,
      path: ['test', 'components'],
      plugins: [],
      postprocessors: [],
      mappings: [],
    },
    pages: {
      generator: mockComponentGenerator,
      path: ['test', 'pages'],
      plugins: [],
      postprocessors: [],
      mappings: [],
    },
    entry: {
      generator: mockEntryFileGenerator,
      path: ['test'],
      fileName: 'mock-filename',
      plugins: [],
      postprocessors: [],
      mappings: [],
    },
    router: {
      generator: mockRouterGenerator,
      path: ['test'],
      fileName: 'mock-filename',
      plugins: [],
      postprocessors: [],
      mappings: [],
    },
    static: {
      prefix: '/static',
      path: ['test', 'static'],
    },
  }
  return strategy
}

export const emptyFolder = (name: string = 'test'): GeneratedFolder => {
  return {
    name,
    files: [],
    subFolders: [],
  }
}

export const folderWithFiles = (name: string = 'test'): GeneratedFolder => {
  return {
    name,
    files: [
      {
        name: 'index',
        fileType: 'js',
        content: 'var x = 0;',
      },
      {
        name: 'index',
        fileType: 'css',
        content: 'h1 { margin: 10px; }',
      },
    ],
    subFolders: [],
  }
}

export const mockAssemblyLineStructure = (): ProjectPluginStructure => {
  const rootFolder = UIDLUtils.cloneObject(DEFAULT_TEMPLATE)

  return {
    uidl: (projectUIDL as unknown) as ProjectUIDL,
    template: DEFAULT_TEMPLATE,
    files: new Map<string, InMemoryFileRecord>(),
    dependencies: {},
    devDependencies: {},
    strategy: createStrategyWithCommonGenerator(),
    rootFolder,
  }
}

class SimpleProjectPluginMock implements ProjectPlugin {
  async runBefore(structure: ProjectPluginStructure) {
    const { strategy } = structure
    strategy.style = ReactStyleVariation.CSS
    return structure
  }

  async runAfter(structure: ProjectPluginStructure) {
    const { dependencies, devDependencies } = structure
    /* tslint:disable:no-string-literal */
    dependencies['react'] = '^16.0.8'
    /* tslint:disable:no-string-literal */
    devDependencies['prop-types'] = '15.7.2'
    return structure
  }
}
export const simplePluginMock = new SimpleProjectPluginMock()

class SimpleProjectPluginMockToInjectFiles implements ProjectPlugin {
  async runBefore(structure: ProjectPluginStructure) {
    const { strategy } = structure
    strategy.style = ReactStyleVariation.CSS
    return structure
  }

  async runAfter(structure: ProjectPluginStructure) {
    const { files } = structure

    files.set('config', {
      path: [],
      files: [
        {
          name: 'next.config',
          fileType: FileType.JSON,
          content: `const withCSS = require('@zeit/next-css')
        module.exports = withCSS({
          cssModules: true
        })`,
        },
      ],
    })

    return structure
  }
}
export const simplePluginMockToInjectFiles = new SimpleProjectPluginMockToInjectFiles()

'''
'''--- packages/teleport-project-generator/__tests__/utils.ts ---
import {
  generateLocalDependenciesPrefix,
  injectFilesToPath,
  extractPageOptions,
  prepareComponentOutputOptions,
} from '../src/utils'
import { UIDLStateDefinition } from '@teleporthq/teleport-types'
import { emptyFolder, folderWithFiles, createStrategyWithCommonGenerator } from './mocks'
import { component, elementNode } from '@teleporthq/teleport-uidl-builders'

describe('generateLocalDependenciesPrefix', () => {
  it('works when there is a common parent', () => {
    const from = ['src', 'from']
    const to = ['src', 'to']

    expect(generateLocalDependenciesPrefix(from, to)).toBe('../to/')
  })

  it('works when there is no common parent', () => {
    const from = ['dist', 'from']
    const to = ['src', 'to']

    expect(generateLocalDependenciesPrefix(from, to)).toBe('../../src/to/')
  })

  it('works when to is a parent of from', () => {
    const from = ['src', 'from']
    const to = ['src']

    expect(generateLocalDependenciesPrefix(from, to)).toBe('../')
  })

  it('works when to is a child of from', () => {
    const from = ['src']
    const to = ['src', 'to']

    expect(generateLocalDependenciesPrefix(from, to)).toBe('./to/')
  })

  it('works when they are identical', () => {
    const from = ['src', 'from']
    const to = ['src', 'from']

    expect(generateLocalDependenciesPrefix(from, to)).toBe('./')
  })
})

describe('injectFilesToPath', () => {
  it('adds a file in an empty folder', () => {
    const folder = emptyFolder()
    const newFile = {
      name: 'test',
      fileType: 'js',
      content: 'random',
    }

    injectFilesToPath(folder, [], [newFile])

    expect(folder.files.length).toBe(1)
    expect(folder.files[0].name).toBe('test')
    expect(folder.files[0].fileType).toBe('js')
    expect(folder.files[0].content).toBe('random')
  })

  it('adds a file in a folder with existing files', () => {
    const folder = folderWithFiles()
    const newFile = {
      name: 'test',
      fileType: 'js',
      content: 'random',
    }

    injectFilesToPath(folder, [], [newFile])

    expect(folder.files.length).toBe(3)
    expect(folder.files[2].name).toBe('test')
    expect(folder.files[2].fileType).toBe('js')
    expect(folder.files[2].content).toBe('random')
  })

  it('overrides existing files', () => {
    const folder = folderWithFiles()
    const newFiles = [
      {
        name: 'index',
        fileType: 'js',
        content: 'new-content',
      },
      {
        name: 'index',
        fileType: 'html',
        content: '<html>',
      },
    ]

    injectFilesToPath(folder, [], newFiles)

    expect(folder.files.length).toBe(3)
    expect(folder.files[0].name).toBe('index')
    expect(folder.files[0].fileType).toBe('js')
    expect(folder.files[0].content).toBe('new-content')
    expect(folder.files[1].name).toBe('index')
    expect(folder.files[1].fileType).toBe('css')
    expect(folder.files[1].content).toBe('h1 { margin: 10px; }')
    expect(folder.files[2].name).toBe('index')
    expect(folder.files[2].fileType).toBe('html')
    expect(folder.files[2].content).toBe('<html>')
  })

  it('adds the files in a newly created subfolder', () => {
    const folder = folderWithFiles()
    const newFiles = [
      {
        name: 'index',
        fileType: 'js',
        content: 'new-content',
      },
      {
        name: 'index',
        fileType: 'html',
        content: '<html>',
      },
    ]

    injectFilesToPath(folder, ['subfolder'], newFiles)

    expect(folder.files.length).toBe(2)
    expect(folder.files[0].name).toBe('index')
    expect(folder.files[0].fileType).toBe('js')
    expect(folder.files[0].content).toBe('var x = 0;')
    expect(folder.files[1].name).toBe('index')
    expect(folder.files[1].fileType).toBe('css')
    expect(folder.files[1].content).toBe('h1 { margin: 10px; }')

    expect(folder.subFolders[0].name).toBe('subfolder')
    expect(folder.subFolders[0].files.length).toBe(2)
    expect(folder.subFolders[0].files[0].name).toBe('index')
    expect(folder.subFolders[0].files[0].fileType).toBe('js')
    expect(folder.subFolders[0].files[0].content).toBe('new-content')
    expect(folder.subFolders[0].files[1].name).toBe('index')
    expect(folder.subFolders[0].files[1].fileType).toBe('html')
    expect(folder.subFolders[0].files[1].content).toBe('<html>')
  })
})

describe('extractPageOptions', () => {
  const routeDefinitions: UIDLStateDefinition = {
    type: 'string',
    defaultValue: 'home',
    values: [
      {
        value: 'home',
        pageOptions: {
          navLink: '/',
        },
      },
      {
        value: 'about',
        pageOptions: {
          navLink: '/about-us',
          componentName: 'AboutUs',
        },
      },
      {
        value: 'contact-us',
        pageOptions: {
          navLink: '/team',
        },
      },
      {
        value: 'no-meta',
      },
    ],
  }

  it('uses the state for a non-declared page', () => {
    const { pageOptions } = extractPageOptions(routeDefinitions, 'non-declared')
    expect(pageOptions.navLink).toBe('/non-declared')
    expect(pageOptions.fileName).toBe('non-declared')
    expect(pageOptions.componentName).toBe('NonDeclared')
  })

  it('uses the state for a page without meta', () => {
    const { pageOptions } = extractPageOptions(routeDefinitions, 'no-meta')
    expect(pageOptions.navLink).toBe('/no-meta')
    expect(pageOptions.fileName).toBe('no-meta')
    expect(pageOptions.componentName).toBe('NoMeta')
  })

  it('returns values from the meta with defaults from the state', () => {
    const { pageOptions } = extractPageOptions(routeDefinitions, 'about')
    expect(pageOptions.navLink).toBe('/about-us') // meta value
    expect(pageOptions.fileName).toBe('about') // state value
    expect(pageOptions.componentName).toBe('AboutUs') // meta value
  })

  it('converts the fileName to index', () => {
    const { pageOptions } = extractPageOptions(routeDefinitions, 'home', true)
    expect(pageOptions.navLink).toBe('/')
    expect(pageOptions.fileName).toBe('index')
    expect(pageOptions.componentName).toBe('Home')
  })

  it('uses the path as the fileName', () => {
    const { pageOptions } = extractPageOptions(routeDefinitions, 'about', true)
    expect(pageOptions.navLink).toBe('/about-us')
    expect(pageOptions.fileName).toBe('about-us')
    expect(pageOptions.componentName).toBe('AboutUs')
  })
})

describe('prepareComponentOutputOptions', () => {
  it('creates all output options based on the UIDL and the default conventions', () => {
    const mockStrategy = createStrategyWithCommonGenerator()
    const components = {
      NavBar: component('NavBar', elementNode('container')),
      'Primary Button': component('Primary Button', elementNode('container')),
      'my-card': component('my-card', elementNode('container')),
    }

    prepareComponentOutputOptions(components, mockStrategy)

    expect(components.NavBar.outputOptions.fileName).toBe('nav-bar')
    expect(components.NavBar.outputOptions.componentClassName).toBe('NavBar')
    expect(components['Primary Button'].outputOptions.fileName).toBe('primary-button')
    expect(components['Primary Button'].outputOptions.componentClassName).toBe('PrimaryButton')
    expect(components['my-card'].outputOptions.fileName).toBe('my-card')
    expect(components['my-card'].outputOptions.componentClassName).toBe('MyCard')
  })

  it('works with components created in separate folders', () => {
    const mockStrategy = createStrategyWithCommonGenerator()
    mockStrategy.components.options = {
      createFolderForEachComponent: true,
      customStyleFileName: () => 'styling',
    }
    const components = {
      NavBar: component('NavBar', elementNode('container')),
      'Primary Button': component('Primary Button', elementNode('container')),
      'my-card': component('my-card', elementNode('container')),
    }

    prepareComponentOutputOptions(components, mockStrategy)

    expect(components.NavBar.outputOptions.folderPath[0]).toBe('nav-bar')
    expect(components.NavBar.outputOptions.fileName).toBe('index')
    expect(components.NavBar.outputOptions.componentClassName).toBe('NavBar')
    expect(components.NavBar.outputOptions.styleFileName).toBe('styling')
    expect(components['Primary Button'].outputOptions.folderPath[0]).toBe('primary-button')
    expect(components['Primary Button'].outputOptions.fileName).toBe('index')
    expect(components['Primary Button'].outputOptions.componentClassName).toBe('PrimaryButton')
    expect(components['Primary Button'].outputOptions.styleFileName).toBe('styling')
    expect(components['my-card'].outputOptions.folderPath[0]).toBe('my-card')
    expect(components['my-card'].outputOptions.fileName).toBe('index')
    expect(components['my-card'].outputOptions.componentClassName).toBe('MyCard')
    expect(components['my-card'].outputOptions.styleFileName).toBe('styling')
  })

  it('uses the UIDL values', () => {
    const mockStrategy = createStrategyWithCommonGenerator()
    mockStrategy.components.options = {
      createFolderForEachComponent: true,
      customStyleFileName: () => 'styling',
    }
    const testComponent = component('NavBar', elementNode('container'))
    testComponent.outputOptions = {
      fileName: 'custom-filename',
      folderPath: ['custom-folder'],
    }
    const components = {
      testComponent,
    }

    prepareComponentOutputOptions(components, mockStrategy)

    expect(testComponent.outputOptions.fileName).toBe('index')
    expect(testComponent.outputOptions.folderPath[0]).toBe('custom-folder')
    expect(testComponent.outputOptions.folderPath[1]).toBe('custom-filename')
  })

  it('deduplicates matching names', () => {
    const mockStrategy = createStrategyWithCommonGenerator()
    const components = {
      'te sT': component('te sT', elementNode('container')),
      'Tes t': component('Tes t', elementNode('container')),
      test: component('test', elementNode('container')),
    }

    prepareComponentOutputOptions(components, mockStrategy)

    expect(components['te sT'].outputOptions.fileName).toBe('tes-t')
    expect(components['Tes t'].outputOptions.fileName).toBe('test')
    expect(components.test.outputOptions.fileName).toBe('test1')

    expect(components['te sT'].outputOptions.componentClassName).toBe('TesT')
    expect(components['Tes t'].outputOptions.componentClassName).toBe('Test')
    expect(components.test.outputOptions.componentClassName).toBe('Test1')
  })
})

'''
'''--- packages/teleport-project-generator/package.json ---
{
  "name": "@teleporthq/teleport-project-generator",
  "version": "0.29.2",
  "description": "Generic project generator that requires a specific strategy to run on custom configurations",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-component-generator": "^0.29.2",
    "@teleporthq/teleport-plugin-common": "^0.29.0",
    "@teleporthq/teleport-plugin-import-statements": "^0.29.0",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0",
    "@teleporthq/teleport-uidl-builders": "^0.29.0",
    "@teleporthq/teleport-uidl-validator": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-project-generator/src/assembly-line/index.ts ---
import {
  ProjectPlugin,
  ProjectPluginStructure,
  InMemoryFileRecord,
  ProjectStrategy,
} from '@teleporthq/teleport-types'

interface ProjectAssemblyLineResult {
  files: Map<string, InMemoryFileRecord>
  strategy: ProjectStrategy
  dependencies: Record<string, string>
  devDependencies: Record<string, string>
}

class ProjectAssemblyLine {
  private plugins: ProjectPlugin[]

  constructor(plugins: ProjectPlugin[] = []) {
    this.plugins = plugins
  }

  public async runBefore(structure: ProjectPluginStructure): Promise<ProjectAssemblyLineResult> {
    const finalStructure = await this.plugins.reduce(
      async (previousPluginOperation: Promise<ProjectPluginStructure>, plugin) => {
        const modifiedStructure = await previousPluginOperation
        return plugin.runBefore(modifiedStructure)
      },
      Promise.resolve(structure)
    )

    return {
      files: finalStructure.files,
      dependencies: finalStructure.dependencies,
      devDependencies: finalStructure.devDependencies,
      strategy: finalStructure.strategy,
    }
  }

  public async runAfter(
    structure: ProjectPluginStructure
  ): Promise<Omit<ProjectAssemblyLineResult, 'strategy'>> {
    const finalStructure = await this.plugins.reduce(
      async (previousPluginOperation: Promise<ProjectPluginStructure>, plugin) => {
        const modifiedStructure = await previousPluginOperation
        return plugin.runAfter(modifiedStructure)
      },
      Promise.resolve(structure)
    )

    return {
      files: finalStructure.files,
      dependencies: finalStructure.dependencies,
      devDependencies: finalStructure.devDependencies,
    }
  }

  public getPlugins() {
    return this.plugins
  }

  public cleanPlugins() {
    this.plugins = []
  }

  public addPlugin(plugin: ProjectPlugin) {
    this.plugins.push(plugin)
  }
}

export default ProjectAssemblyLine

'''
'''--- packages/teleport-project-generator/src/constants.ts ---
import { GeneratedFolder } from '@teleporthq/teleport-types'

export const DEFAULT_TEMPLATE: GeneratedFolder = {
  name: 'teleport-project',
  files: [],
  subFolders: [],
}

export const DEFAULT_PACKAGE_JSON = {
  name: 'teleportHQ Project',
  version: '1.0.0',
  description: 'Project generated based on a UIDL document',
}

export const DEFAULT_ROUTER_FILE_NAME = 'index'

'''
'''--- packages/teleport-project-generator/src/file-handlers.ts ---
import { UIDLUtils, StringUtils } from '@teleporthq/teleport-shared'
import { HASTUtils, HASTBuilders } from '@teleporthq/teleport-plugin-common'
import {
  GeneratedFile,
  GeneratedFolder,
  ProjectUIDL,
  WebManifest,
  ChunkDefinition,
  ComponentUIDL,
  GeneratorOptions,
  ProjectStrategy,
  EntryFileOptions,
  CustomTag,
  Attribute,
  FileType,
  ChunkType,
  ComponentGenerator,
} from '@teleporthq/teleport-types'
import { DEFAULT_PACKAGE_JSON, DEFAULT_ROUTER_FILE_NAME } from './constants'
import { PackageJSON } from './types'
import { bootstrapGenerator, generateLocalDependenciesPrefix } from './utils'
import { createComponentGenerator } from '@teleporthq/teleport-component-generator'

export const createPage = async (
  pageUIDL: ComponentUIDL,
  generator: ComponentGenerator,
  options: GeneratorOptions
) => {
  return generator.generateComponent(pageUIDL, options)
}

export const createComponent = async (
  componentUIDL: ComponentUIDL,
  generator: ComponentGenerator,
  options: GeneratorOptions
) => {
  return generator.generateComponent(componentUIDL, options)
}

export const createComponentModule = async (
  uidl: ProjectUIDL,
  strategy: ProjectStrategy,
  generator: ComponentGenerator
) => {
  const { root } = uidl
  const { path } = strategy.components
  const componentLocalDependenciesPrefix = generateLocalDependenciesPrefix(
    path,
    strategy.components.path
  )

  const options = {
    localDependenciesPrefix: componentLocalDependenciesPrefix,
    strategy,
    moduleComponents: uidl.components,
  }

  root.outputOptions = root.outputOptions || {}
  root.outputOptions.fileName = 'components.module'

  return generator.generateComponent(root, options)
}

export const createPageModule = async (
  pageUIDL: ComponentUIDL,
  generator: ComponentGenerator,
  options: GeneratorOptions
) => {
  const { folderPath = [] } = pageUIDL.outputOptions
  pageUIDL.outputOptions = pageUIDL.outputOptions || {}

  pageUIDL.outputOptions.moduleName = `${StringUtils.dashCaseToUpperCamelCase(
    folderPath[folderPath.length - 1]
  )}Module`

  return generator.generateComponent(pageUIDL, options)
}

export const createRouterFile = async (
  root: ComponentUIDL,
  strategy: ProjectStrategy,
  routerGenerator: ComponentGenerator
) => {
  const { projectStyleSheet, router } = strategy
  const { path: routerFilePath, fileName } = router
  const routerLocalDependenciesPrefix = generateLocalDependenciesPrefix(
    routerFilePath,
    strategy.pages.path
  )

  let options: GeneratorOptions = {
    localDependenciesPrefix: routerLocalDependenciesPrefix,
    strategy,
    isRootComponent: true,
    designLanguage: root?.designLanguage,
  }

  if (projectStyleSheet) {
    options = {
      ...options,
      projectStyleSet: {
        styleSetDefinitions: root?.styleSetDefinitions,
        fileName: projectStyleSheet.fileName,
        path: generateLocalDependenciesPrefix(routerFilePath, strategy.projectStyleSheet.path),
        importFile: projectStyleSheet?.importFile || false,
      },
    }
  }
  root.outputOptions = root.outputOptions || {}
  root.outputOptions.fileName = fileName || DEFAULT_ROUTER_FILE_NAME

  const { files, dependencies } = await routerGenerator.generateComponent(root, options)
  return { routerFile: files[0], dependencies }
}

export const createEntryFile = async (
  uidl: ProjectUIDL,
  strategy: ProjectStrategy,
  entryFileOptions: GeneratorOptions
) => {
  const generator = bootstrapGenerator({
    generator: createComponentGenerator,
    postprocessors: strategy.entry?.postprocessors,
    mappings: strategy.entry?.mappings,
  })
  // If no function is provided in the strategy, the createHTMLEntryFileChunks is used by default
  const chunkGenerationFunction =
    strategy.entry?.chunkGenerationFunction || createHTMLEntryFileChunks
  const { assets } = entryFileOptions
  const options = { ...strategy.entry?.options, ...entryFileOptions }

  const appRootOverride = (options && options.appRootOverride) || null

  const entryFileName = strategy.entry.fileName || 'index'
  const customHeadContent = (options && options.customHeadContent) || null
  const customTags = (options && options.customTags) || []
  const chunks = chunkGenerationFunction(uidl, {
    assets,
    appRootOverride,
    customHeadContent,
    customTags,
  })

  const result = generator.linkCodeChunks(chunks, entryFileName)
  return result
}

// Default function used to generate the html file based on the global settings in the ProjectUIDL
const createHTMLEntryFileChunks = (
  uidl: ProjectUIDL,
  options: EntryFileOptions
): Record<string, ChunkDefinition[]> => {
  const { appRootOverride, customHeadContent, customTags } = options
  const { settings, meta, assets, manifest, customCode } = uidl.globals

  const htmlNode = HASTBuilders.createHTMLNode('html')
  const headNode = HASTBuilders.createHTMLNode('head')
  const bodyNode = HASTBuilders.createHTMLNode('body')

  HASTUtils.addChildNode(htmlNode, headNode)
  HASTUtils.addChildNode(htmlNode, bodyNode)

  // Vue and React use a standard <div id="app"/> in the body tag.
  // Nuxt has an internal templating so requires an override
  if (appRootOverride) {
    HASTUtils.addTextNode(bodyNode, appRootOverride)
  } else {
    const appRootNode = HASTBuilders.createHTMLNode('div')
    HASTUtils.addAttributeToNode(appRootNode, 'id', 'app')
    HASTUtils.addChildNode(bodyNode, appRootNode)
  }

  if (settings.language) {
    HASTUtils.addAttributeToNode(htmlNode, 'lang', settings.language)
  }

  if (settings.title) {
    const titleTag = HASTBuilders.createHTMLNode('title')
    HASTUtils.addTextNode(titleTag, settings.title)
    HASTUtils.addChildNode(headNode, titleTag)
  }

  /* For frameworks that need to inject and point out the generated build files
  or adding some script tags in head or body */
  if (customTags.length > 0) {
    customTags.forEach((tag: CustomTag) => {
      const { targetTag, tagName, attributes, content } = tag
      const targetNode = targetTag === 'head' ? headNode : bodyNode
      const createdNode = HASTBuilders.createHTMLNode(tagName)

      if (content) {
        HASTUtils.addTextNode(createdNode, content)
      }

      if (attributes && attributes.length > 0) {
        attributes.forEach((attribute: Attribute) => {
          const { attributeKey, attributeValue } = attribute
          if (attributeValue) {
            HASTUtils.addAttributeToNode(createdNode, attributeKey, attributeValue)
          } else {
            HASTUtils.addBooleanAttributeToNode(createdNode, attributeKey)
          }
        })
      }

      HASTUtils.addChildNode(targetNode, createdNode)
    })
  }

  if (manifest) {
    const linkTag = HASTBuilders.createHTMLNode('link')
    HASTUtils.addAttributeToNode(linkTag, 'rel', 'manifest')
    HASTUtils.addAttributeToNode(
      linkTag,
      'href',
      UIDLUtils.prefixAssetsPath('/manifest.json', options.assets)
    )
    HASTUtils.addChildNode(headNode, linkTag)
  }

  meta.forEach((metaItem) => {
    const metaTag = HASTBuilders.createHTMLNode('meta')
    Object.keys(metaItem).forEach((key) => {
      const prefixedURL = UIDLUtils.prefixAssetsPath(metaItem[key], options.assets)
      HASTUtils.addAttributeToNode(metaTag, key, prefixedURL)
    })
    HASTUtils.addChildNode(headNode, metaTag)
  })

  assets.forEach((asset) => {
    let assetPath
    if ('path' in asset) {
      assetPath = UIDLUtils.prefixAssetsPath(asset.path, options.assets)
    }

    // link canonical for SEO
    if (asset.type === 'canonical' && assetPath) {
      const linkTag = HASTBuilders.createHTMLNode('link')
      HASTUtils.addAttributeToNode(linkTag, 'rel', 'canonical')
      HASTUtils.addAttributeToNode(linkTag, 'href', assetPath)
      HASTUtils.addChildNode(headNode, linkTag)
    }

    // link stylesheet (external css, font)
    if ((asset.type === 'style' || asset.type === 'font') && assetPath) {
      const linkTag = HASTBuilders.createHTMLNode('link')
      HASTUtils.addAttributeToNode(linkTag, 'rel', 'stylesheet')
      HASTUtils.addAttributeToNode(linkTag, 'href', assetPath)

      if ('attrs' in asset) {
        Object.keys(asset.attrs || {}).forEach((attrId) => {
          const value = asset.attrs[attrId].content
          if (typeof value === 'boolean') {
            HASTUtils.addBooleanAttributeToNode(linkTag, attrId, value)
            return
          }
          HASTUtils.addAttributeToNode(linkTag, attrId, String(value))
        })
      }

      HASTUtils.addChildNode(headNode, linkTag)
    }

    // inline style
    if (asset.type === 'style' && 'content' in asset) {
      const styleTag = HASTBuilders.createHTMLNode('style')
      HASTUtils.addTextNode(styleTag, asset.content)
      HASTUtils.addChildNode(headNode, styleTag)
      if ('attrs' in asset) {
        Object.keys(asset.attrs || {}).forEach((attrId) => {
          const value = asset.attrs[attrId].content
          if (typeof value === 'boolean') {
            HASTUtils.addBooleanAttributeToNode(styleTag, attrId, value)
            return
          }
          HASTUtils.addAttributeToNode(styleTag, attrId, String(value))
        })
      }
    }

    // script (external or inline)
    if (asset.type === 'script') {
      const scriptInBody = (asset.options && asset.options.target === 'body') || false
      const scriptTag = HASTBuilders.createHTMLNode('script')
      HASTUtils.addAttributeToNode(scriptTag, 'type', 'text/javascript')

      if (assetPath) {
        HASTUtils.addAttributeToNode(scriptTag, 'src', assetPath)
        if (asset.options && asset.options.defer) {
          HASTUtils.addBooleanAttributeToNode(scriptTag, 'defer')
        }
        if (asset.options && asset.options.async) {
          HASTUtils.addBooleanAttributeToNode(scriptTag, 'async')
        }
      } else if ('content' in asset) {
        HASTUtils.addTextNode(scriptTag, asset.content)
      }

      if (scriptInBody) {
        HASTUtils.addChildNode(bodyNode, scriptTag)
      } else {
        HASTUtils.addChildNode(headNode, scriptTag)
      }
    }

    // icon
    if (asset.type === 'icon' && assetPath) {
      const iconTag = HASTBuilders.createHTMLNode('link')
      HASTUtils.addAttributeToNode(iconTag, 'rel', 'shortcut icon')
      HASTUtils.addAttributeToNode(iconTag, 'href', assetPath)

      if (asset.options && asset.options.iconType) {
        HASTUtils.addAttributeToNode(iconTag, 'type', asset.options.iconType)
      }
      if (asset.options && asset.options.iconSizes) {
        HASTUtils.addAttributeToNode(iconTag, 'sizes', asset.options.iconSizes)
      }
      HASTUtils.addChildNode(headNode, iconTag)
    }
  })

  if (customHeadContent) {
    HASTUtils.addTextNode(headNode, customHeadContent)
  }

  if (customCode?.head) {
    HASTUtils.addTextNode(headNode, customCode.head)
  }

  if (customCode?.body) {
    HASTUtils.addTextNode(bodyNode, customCode.body)
  }

  const chunks: Record<string, ChunkDefinition[]> = {
    [FileType.HTML]: [
      {
        name: 'doctype',
        type: ChunkType.STRING,
        fileType: FileType.HTML,
        content: '<!DOCTYPE html>',
        linkAfter: [],
      },
      {
        name: 'html-node',
        type: ChunkType.HAST,
        fileType: FileType.HTML,
        content: htmlNode,
        linkAfter: ['doctype'],
      },
    ],
  }

  return chunks
}

// Creates a manifest json file with the UIDL having priority over the default values
export const createManifestJSONFile = (
  uidl: ProjectUIDL,
  assets: GeneratorOptions['assets']
): GeneratedFile => {
  const manifest = uidl.globals.manifest
  const projectName = uidl.name
  const defaultManifest: WebManifest = {
    short_name: projectName,
    name: projectName,
    display: 'standalone',
    start_url: '/',
  }

  const icons = manifest.icons.map((icon) => {
    const src = UIDLUtils.prefixAssetsPath(icon.src, assets)
    return { ...icon, src }
  })

  const content = {
    ...defaultManifest,
    ...manifest,
    ...{ icons },
  }

  return {
    name: 'manifest',
    fileType: FileType.JSON,
    content: JSON.stringify(content, null, 2),
  }
}

export const handlePackageJSON = (
  template: GeneratedFolder,
  uidl: ProjectUIDL,
  dependencies: Record<string, string>,
  devDependencies?: Record<string, string>
) => {
  const inputPackageJSONFile = template.files.find(
    (file) => file.name === 'package' && file.fileType === FileType.JSON
  )

  if (inputPackageJSONFile) {
    const packageJSONContent = JSON.parse(inputPackageJSONFile.content) as PackageJSON

    packageJSONContent.name = StringUtils.slugify(uidl.name)
    packageJSONContent.dependencies = {
      ...packageJSONContent.dependencies,
      ...dependencies,
    }

    packageJSONContent.devDependencies = {
      ...packageJSONContent.devDependencies,
      ...(Object.keys(devDependencies || {}).length > 0 && devDependencies),
    }

    inputPackageJSONFile.content = JSON.stringify(packageJSONContent, null, 2)
  } else {
    const content: PackageJSON = {
      ...DEFAULT_PACKAGE_JSON,
      name: StringUtils.slugify(uidl.name),
      dependencies,
      ...(Object.keys(devDependencies || {}).length > 0 && { devDependencies }),
    }

    template.files.push({
      name: 'package',
      fileType: FileType.JSON,
      content: JSON.stringify(content, null, 2),
    })
  }
}

'''
'''--- packages/teleport-project-generator/src/index.ts ---
import { UIDLUtils } from '@teleporthq/teleport-shared'
import { Validator, Parser } from '@teleporthq/teleport-uidl-validator'
import {
  GeneratorOptions,
  GeneratedFolder,
  Mapping,
  ProjectStrategy,
  ProjectStrategyComponentOptions,
  ComponentGenerator,
  ProjectStrategyPageOptions,
  ConfigGeneratorResult,
  ProjectPlugin,
  InMemoryFileRecord,
  TeleportError,
  GeneratorFactoryParams,
  HTMLComponentGenerator,
  ProjectGenerator as ProjectGeneratorType,
} from '@teleporthq/teleport-types'
import {
  injectFilesToPath,
  resolveLocalDependencies,
  createPageUIDLs,
  prepareComponentOutputOptions,
  generateExternalCSSImports,
  fileFileAndReplaceContent,
  bootstrapGenerator,
  generateLocalDependenciesPrefix,
} from './utils'
import {
  createManifestJSONFile,
  handlePackageJSON,
  createComponent,
  createPage,
  createRouterFile,
  createEntryFile,
  createComponentModule,
  createPageModule,
} from './file-handlers'
import { DEFAULT_TEMPLATE } from './constants'
import ProjectAssemblyLine from './assembly-line'
import { join } from 'path'

type UpdateGeneratorCallback = (generator: ComponentGenerator) => void

export class ProjectGenerator implements ProjectGeneratorType {
  public componentGenerator: ComponentGenerator | HTMLComponentGenerator
  public pageGenerator: ComponentGenerator | HTMLComponentGenerator
  public routerGenerator: ComponentGenerator
  public styleSheetGenerator: ComponentGenerator
  private strategy: ProjectStrategy
  private validator: Validator
  private assemblyLine: ProjectAssemblyLine

  private assetPrefix: string | null = null
  private assetsAndPathMapping: Record<string, string> = {}
  private assetIdentifier: string | null = null

  constructor(strategy: ProjectStrategy) {
    this.validator = new Validator()
    this.strategy = strategy
    this.assemblyLine = new ProjectAssemblyLine()
  }

  public getStrategy() {
    return this.strategy
  }

  public updateStrategy(strategy: Partial<ProjectStrategy>) {
    this.strategy = { ...this.strategy, ...strategy }
  }

  public updateGenerator(callback: UpdateGeneratorCallback) {
    this.updateComponentsGenerator(callback)
    this.updatePagesGenerator(callback)
  }

  public updateComponentsGenerator(callback: UpdateGeneratorCallback) {
    if (typeof callback === 'function') {
      callback(this.strategy.components.generator())
    }
  }

  public updatePagesGenerator(callback: UpdateGeneratorCallback) {
    if (typeof callback === 'function') {
      callback(this.strategy.pages.generator())
    }
  }

  public updateComponentsStrategy({
    generator,
    path,
    options,
  }: {
    generator?: ComponentGenerator
    path?: string[]
    options?: ProjectStrategyComponentOptions
  }) {
    if (generator) {
      this.strategy.components.generator = () => generator
    }

    if (path) {
      this.strategy.components.path = path
    }

    if (options && Object.keys(options).length > 0) {
      this.strategy.components.options = { ...this.strategy.components.options, ...options }
    }
  }

  public updatePagesStrategy({
    generator,
    path,
    options,
  }: {
    generator?: ComponentGenerator
    path?: string[]
    options?: ProjectStrategyPageOptions
  }) {
    if (generator) {
      this.strategy.pages.generator = () => generator
    }

    if (path) {
      this.strategy.pages.path = path
    }

    if (options && Object.keys(options).length > 0) {
      this.strategy.pages.options = { ...this.strategy.pages.options, ...options }
    }
  }

  public setAssets(params: GeneratorOptions['assets']) {
    const { mappings, prefix, identifier } = params
    if (mappings) {
      this.assetsAndPathMapping = mappings
    }

    if (prefix) {
      this.assetPrefix = prefix
    }

    if (identifier) {
      this.assetIdentifier = identifier
    }
  }

  public async generateProject(
    input: Record<string, unknown>,
    template: GeneratedFolder = DEFAULT_TEMPLATE,
    mapping: Mapping = {}
  ): Promise<GeneratedFolder> {
    let cleanedUIDL = input
    let collectedDependencies: Record<string, string> = {}
    let collectedDevDependencies: Record<string, string> = {}
    let inMemoryFilesMap = new Map<string, InMemoryFileRecord>()

    // Initialize output folder and other reusable structures
    const rootFolder = UIDLUtils.cloneObject(template || DEFAULT_TEMPLATE)

    const schemaValidationResult = this.validator.validateProjectSchema(input)
    const { valid, projectUIDL } = schemaValidationResult
    if (valid && projectUIDL) {
      cleanedUIDL = projectUIDL as unknown as Record<string, unknown>
    } else {
      throw new Error(schemaValidationResult.errorMsg)
    }

    const uidl = Parser.parseProjectJSON(cleanedUIDL)
    const contentValidationResult = this.validator.validateProjectContent(uidl)
    if (!contentValidationResult.valid) {
      throw new Error(contentValidationResult.errorMsg)
    }

    try {
      const runBeforeResult = await this.assemblyLine.runBefore({
        uidl,
        template,
        files: inMemoryFilesMap,
        strategy: this.strategy,
        dependencies: collectedDependencies,
        devDependencies: collectedDevDependencies,
        rootFolder,
      })

      collectedDependencies = { ...collectedDependencies, ...runBeforeResult.dependencies }
      collectedDevDependencies = { ...collectedDevDependencies, ...runBeforeResult.devDependencies }

      this.strategy = runBeforeResult.strategy
      inMemoryFilesMap = runBeforeResult.files

      if (this.strategy.components?.generator) {
        this.componentGenerator = bootstrapGenerator(this.strategy.components, this.strategy.style)
      }

      if (this.strategy.pages?.generator) {
        this.pageGenerator = bootstrapGenerator(this.strategy.pages, this.strategy.style)
      }

      if (this.strategy.projectStyleSheet?.generator) {
        this.styleSheetGenerator = bootstrapGenerator(
          this.strategy.projectStyleSheet,
          this.strategy.style
        )
      }

      if (this.strategy.router?.generator) {
        this.routerGenerator = bootstrapGenerator(this.strategy.router, this.strategy.style)
      }
    } catch (e) {
      throw new TeleportError(`Error in Generating Project after runBefore - ${e}`)
    }

    const { components = {} } = uidl
    const { styleSetDefinitions = {}, designLanguage: { tokens = {} } = {} } = uidl.root

    // Based on the routing roles, separate pages into distict UIDLs with their own file names and paths
    const pageUIDLs = createPageUIDLs(uidl, this.strategy)

    if (Object.keys(components).length > 0) {
      // Set the filename and folder path for each component based on the strategy
      prepareComponentOutputOptions(components, this.strategy)
      // Set the local dependency paths based on the relative paths between files
      resolveLocalDependencies(pageUIDLs, components, this.strategy)
    }

    // If static prefix is not specified, compute it from the path, but if the string is empty it should work
    const assetsPrefix = (
      this.assetPrefix ? this.assetPrefix : typeof this.strategy.static.prefix === 'string'
    )
      ? this.strategy.static.prefix
      : '/' + this.getAssetsPath().join('/')

    const options: GeneratorOptions = {
      assets: {
        prefix: assetsPrefix,
        mappings: this.assetsAndPathMapping,
        identifier: this.assetIdentifier,
      },
      projectRouteDefinition: uidl.root.stateDefinitions.route,
      mapping,
      skipValidation: true,
      designLanguage: uidl.root?.designLanguage,
    }

    // Handling project style sheet
    if (
      this.strategy.projectStyleSheet?.generator &&
      (Object.keys(styleSetDefinitions).length > 0 || Object.keys(tokens).length > 0)
    ) {
      const { files, dependencies } = await this.styleSheetGenerator.generateComponent(uidl.root, {
        isRootComponent: true,
        assets: options.assets,
      })
      inMemoryFilesMap.set('projectStyleSheet', {
        path: this.strategy.projectStyleSheet.path,
        files,
      })
      collectedDependencies = { ...collectedDependencies, ...dependencies }
    }

    // Handling pages
    for (const pageUIDL of pageUIDLs) {
      if (!this.strategy?.pages?.generator) {
        throw new TeleportError(
          `Pages Generator is missing from the strategy - ${JSON.stringify(this.strategy.pages)}`
        )
      }

      let pageOptions = options
      if (this.strategy.projectStyleSheet) {
        const globalStyleSheetPath = generateLocalDependenciesPrefix(
          this.strategy.pages.path,
          this.strategy.projectStyleSheet.path
        )
        pageOptions = {
          ...options,
          projectStyleSet: {
            styleSetDefinitions,
            fileName: this.strategy.projectStyleSheet.fileName,
            path: this.strategy.pages.options?.createFolderForEachComponent
              ? join('..', globalStyleSheetPath)
              : globalStyleSheetPath,
            importFile: this.strategy.projectStyleSheet?.importFile || false,
          },
          designLanguage: uidl.root?.designLanguage,
        }
      }

      if ('addExternalComponents' in this.pageGenerator) {
        ;(this.pageGenerator as unknown as HTMLComponentGenerator).addExternalComponents({
          externals: components,
          skipValidation: true,
          assets: options.assets,
        })
      }

      const { files, dependencies } = await createPage(pageUIDL, this.pageGenerator, pageOptions)
      // Pages might be generated inside subfolders in the main pages folder
      const relativePath = UIDLUtils.getComponentFolderPath(pageUIDL)
      const path = this.strategy.pages.path.concat(relativePath)

      inMemoryFilesMap.set(pageUIDL.name, {
        path,
        files,
      })

      collectedDependencies = { ...collectedDependencies, ...dependencies }
      if (this.strategy.pages?.module) {
        const pageModuleGenerator = bootstrapGenerator(
          this.strategy.pages.module,
          this.strategy.style
        )
        const pageModule = await createPageModule(pageUIDL, pageModuleGenerator, options)

        inMemoryFilesMap.set(`${pageUIDL.name}Module`, {
          path,
          files: pageModule.files,
        })

        collectedDependencies = { ...collectedDependencies, ...pageModule.dependencies }
      }
    }

    // Handling module generation for components
    if (this.strategy?.components?.module) {
      const componentModuleGenerator = bootstrapGenerator(
        this.strategy.components.module,
        this.strategy.style
      )
      const componentsModule = await createComponentModule(
        uidl,
        this.strategy,
        componentModuleGenerator
      )

      inMemoryFilesMap.set(componentsModule.files[0].name, {
        path: this.strategy.components.path,
        files: componentsModule.files,
      })

      collectedDependencies = { ...collectedDependencies, ...componentsModule.dependencies }
    }

    // Handling components
    for (const componentName of Object.keys(components)) {
      if (!this.strategy?.components?.generator) {
        throw new TeleportError(
          `Component Generator is missing from the strategy - ${JSON.stringify(
            this.strategy.components
          )}`
        )
      }

      let componentOptions = options
      if (this.strategy.projectStyleSheet) {
        const globalStyleSheetPath = generateLocalDependenciesPrefix(
          this.strategy.components.path,
          this.strategy.projectStyleSheet.path
        )
        componentOptions = {
          ...options,
          projectStyleSet: {
            styleSetDefinitions,
            fileName: this.strategy.projectStyleSheet.fileName,
            path: this.strategy.components?.options?.createFolderForEachComponent
              ? join('..', globalStyleSheetPath)
              : globalStyleSheetPath,
            importFile: this.strategy.projectStyleSheet?.importFile || false,
          },
          designLanguage: uidl.root?.designLanguage,
        }
      }

      if ('addExternalComponents' in this.componentGenerator) {
        ;(this.componentGenerator as unknown as HTMLComponentGenerator).addExternalComponents({
          externals: components,
          skipValidation: true,
          assets: options.assets,
        })
      }

      const componentUIDL = components[componentName]
      const { files, dependencies } = await createComponent(
        componentUIDL,
        this.componentGenerator,
        componentOptions
      )

      // Components might be generated inside subfolders in the main components folder
      const relativePath = UIDLUtils.getComponentFolderPath(componentUIDL)
      const path = this.strategy.components.path.concat(relativePath)

      inMemoryFilesMap.set(componentName, {
        path,
        files,
      })

      collectedDependencies = { ...collectedDependencies, ...dependencies }
    }

    // Handling framework specific changes to the project
    const { framework } = this.strategy

    // Can be used for replacing a couple of strings
    if (framework?.replace) {
      const shouldAddChanges = Boolean(
        framework.replace?.isGlobalStylesDependent &&
          (Object.keys(styleSetDefinitions).length > 0 ||
            Object.keys(uidl?.root?.designLanguage?.tokens || {}).length > 0)
      )

      if (shouldAddChanges) {
        const { fileName, fileType } = framework.replace
        const result = framework.replace.replaceFile(
          template,
          collectedDependencies,
          fileName,
          fileType
        )
        collectedDependencies = result.dependencies

        inMemoryFilesMap.set(fileName, {
          path: this.strategy.framework.replace.path,
          files: [result.file],
        })
      }
    }

    // If we want to generate a completly new file
    if (framework?.config) {
      const {
        fileName,
        fileType,
        configContentGenerator,
        generator,
        plugins: frameworkConfigPlugins,
      } = framework.config

      if (configContentGenerator && generator) {
        const result: ConfigGeneratorResult = configContentGenerator({
          fileName,
          fileType,
          globalStyles: {
            path: generateLocalDependenciesPrefix(
              framework.config.path,
              this.strategy.projectStyleSheet.path
            ),
            sheetName: this.strategy.projectStyleSheet
              ? this.strategy.projectStyleSheet.fileName
              : '',
            isGlobalStylesDependent:
              framework.config?.isGlobalStylesDependent ??
              Boolean(
                Object.keys(styleSetDefinitions).length > 0 ||
                  Object.keys(uidl.root?.designLanguage?.tokens || {}).length > 0
              ),
          },
          dependencies: collectedDependencies,
        })

        collectedDependencies = result.dependencies

        if (Object.keys(result?.chunks).length > 0) {
          const configGenerator: (params: GeneratorFactoryParams) => ComponentGenerator =
            framework.config.generator
          const files = configGenerator({ plugins: frameworkConfigPlugins }).linkCodeChunks(
            result.chunks,
            framework.config.fileName
          )

          inMemoryFilesMap.set(fileName, {
            path: this.strategy.framework.config.path,
            files,
          })
        }
      }
    }

    // Global settings are transformed into the root html file and the manifest file for PWA support
    if (uidl.globals.manifest) {
      const manifestFile = createManifestJSONFile(uidl, options.assets)

      inMemoryFilesMap.set(manifestFile.name, {
        path: this.strategy.static.path,
        files: [manifestFile],
      })
    }

    // TODO: Projects which don't need a router file will miss collecting
    // dependencies which are specified on them

    // Create the routing component in case the project generator has a strategy for that
    if (this.strategy.router) {
      const { routerFile, dependencies } = await createRouterFile(
        uidl.root,
        this.strategy,
        this.routerGenerator
      )

      inMemoryFilesMap.set('router', {
        path: this.strategy.router.path,
        files: [routerFile],
      })

      collectedDependencies = { ...collectedDependencies, ...dependencies }
    }

    // Create the entry file of the project (ex: index.html, _document.js)
    if (this.strategy.entry) {
      const entryFile = await createEntryFile(uidl, this.strategy, options)
      inMemoryFilesMap.set('entry', {
        path: this.strategy.entry.path,
        files: entryFile,
      })
    }

    // If the framework needs all the external css dependencies to be placed in some other file
    if (framework?.externalStyles && this.strategy.pages.options?.useFileNameForNavigation) {
      const { fileName } = framework.externalStyles
      const folder = inMemoryFilesMap.get(fileName)

      if (!folder) {
        throw new Error(`Canno't find file - ${fileName} from the list of files generated`)
      }

      const [resultFile] = await generateExternalCSSImports(uidl.root)
      const files = fileFileAndReplaceContent(folder.files, fileName, resultFile.content)

      inMemoryFilesMap.set(fileName, {
        path: folder.path,
        files,
      })
    }

    try {
      const runAfterResult = await this.assemblyLine.runAfter({
        uidl,
        template,
        files: inMemoryFilesMap,
        strategy: this.strategy,
        dependencies: collectedDependencies,
        devDependencies: collectedDevDependencies,
        rootFolder,
      })

      collectedDependencies = { ...collectedDependencies, ...runAfterResult.dependencies }
      collectedDevDependencies = { ...collectedDevDependencies, ...runAfterResult.devDependencies }
      inMemoryFilesMap = runAfterResult.files
    } catch (e) {
      throw new TeleportError(`Error in generating project after runAfter - ${e}`)
    }

    inMemoryFilesMap.forEach((stage) => {
      injectFilesToPath(rootFolder, stage.path, stage.files)
    })

    // Inject all the collected dependencies in the package.json file
    handlePackageJSON(rootFolder, uidl, collectedDependencies, collectedDevDependencies)

    return rootFolder
  }

  public addMapping(mapping: Mapping) {
    this.strategy.components.mappings = [...this.strategy.components?.mappings, mapping]
    this.strategy.pages.mappings = [...this.strategy.pages?.mappings, mapping]

    if (this.strategy.router) {
      /* TODO: Add mapping later if we decide to reference a generator object
      instead of a generator function for routing */
    }
  }

  public addPlugin(plugin: ProjectPlugin) {
    this.assemblyLine.addPlugin(plugin)
  }

  public cleanPlugins() {
    this.assemblyLine.cleanPlugins()
  }

  public getAssetsPath() {
    return this.strategy.static.path
  }
}

export const createProjectGenerator = (strategy: ProjectStrategy): ProjectGenerator => {
  return new ProjectGenerator(strategy)
}

export default createProjectGenerator

'''
'''--- packages/teleport-project-generator/src/types.ts ---
export interface PackageJSON {
  name: string
  description: string
  version: string
  main?: string
  author?: string
  license?: string
  scripts?: Record<string, string>
  dependencies?: Record<string, string>
  devDependencies?: Record<string, string>
  [key: string]: unknown
}

'''
'''--- packages/teleport-project-generator/src/utils.ts ---
import { UIDLUtils, StringUtils } from '@teleporthq/teleport-shared'
import {
  GeneratedFile,
  GeneratedFolder,
  UIDLElement,
  ComponentUIDL,
  ProjectUIDL,
  UIDLConditionalNode,
  ProjectStrategy,
  UIDLPageOptions,
  UIDLComponentOutputOptions,
  UIDLExternalDependency,
  ComponentGenerator,
  ComponentPlugin,
  PostProcessor,
  Mapping,
  StyleVariation,
  GeneratorFactoryParams,
  UIDLRouteDefinitions,
} from '@teleporthq/teleport-types'
import { elementNode } from '@teleporthq/teleport-uidl-builders'
import importStatementsPlugin from '@teleporthq/teleport-plugin-import-statements'
import { createComponentGenerator } from '@teleporthq/teleport-component-generator'
import { basename } from 'path'

export const createPageUIDLs = (uidl: ProjectUIDL, strategy: ProjectStrategy): ComponentUIDL[] => {
  const routeNodes = UIDLUtils.extractRoutes(uidl.root)
  return routeNodes.map((routeNode) => createPageUIDL(routeNode, uidl, strategy))
}

const createPageUIDL = (
  routeNode: UIDLConditionalNode,
  uidl: ProjectUIDL,
  strategy: ProjectStrategy
): ComponentUIDL => {
  const { value, node } = routeNode.content
  const pageName = value.toString()

  const routeDefinition = uidl.root.stateDefinitions.route
  const pagesStrategyOptions = strategy.pages.options || {}

  const { pageOptions, isHomePage } = extractPageOptions(
    routeDefinition,
    pageName,
    pagesStrategyOptions.useFileNameForNavigation
  )

  // Update pageOptions based on the values computed at the previous step
  const pageDefinition = routeDefinition.values.find((route) => route.value === pageName)
  pageDefinition.pageOptions = pageOptions

  const { fileName, componentName, navLink } = pageOptions

  // If the file name will not be used as the path (eg: next, nuxt)
  // And if the option to create each page in its folder is passed (eg: preact)
  const createFolderForEachComponent =
    !pagesStrategyOptions.useFileNameForNavigation &&
    pagesStrategyOptions.createFolderForEachComponent

  const { customComponentFileName, customStyleFileName, customTemplateFileName } =
    pagesStrategyOptions

  // a page can be: 'about-us.js' or `about-us/index.js`
  const outputOptions = createFolderForEachComponent
    ? {
        componentName,
        fileName: (customComponentFileName && customComponentFileName(fileName)) || 'index',
        styleFileName: (customStyleFileName && customStyleFileName(fileName)) || 'style',
        templateFileName:
          (customTemplateFileName && customTemplateFileName(fileName)) || 'template',
        folderPath: [...navLink.split('/').slice(1, -1), fileName],
      }
    : {
        componentName,
        fileName: (customComponentFileName && customComponentFileName(fileName)) || fileName,
        styleFileName: (customStyleFileName && customStyleFileName(fileName)) || fileName,
        templateFileName: (customTemplateFileName && customTemplateFileName(fileName)) || fileName,
        folderPath: [...navLink.split('/').slice(1, -1)],
      }

  // Looking into the state definition, we take the seo information for the corresponding page
  // If no title is provided for the page, the global settings title is passed as a default
  const title = (pageDefinition.seo && pageDefinition.seo.title) || uidl.globals.settings.title
  const seo = {
    ...pageDefinition.seo,
    title,
  }

  // Because conditional nodes accept any type of UIDLNode as a child
  // we need to ensure that the page is always of type 'element'
  // The solution is to wrap a non-element node with a 'group' element
  const pageContent = node.type === 'element' ? node : elementNode('group', {}, [node])

  const pageUIDL: ComponentUIDL = {
    name: componentName,
    node: pageContent,
    outputOptions,
    seo,
  }

  /* Adding all kinds of peer dependencies and importing css only files
   are good to be added in router. So, for projects which don't follow that
   We will use since we don't generate any router */

  /* Fow now frameworks which follow file name for navigation
   have such constaraints like placing all css imports in some other files */
  if (isHomePage && strategy.pages?.options?.useFileNameForNavigation) {
    const { importDefinitions = {} } = uidl.root

    pageUIDL.importDefinitions = Object.keys(importDefinitions).reduce(
      (acc: Record<string, UIDLExternalDependency>, importRef) => {
        if (
          strategy.framework?.externalStyles &&
          importDefinitions[importRef].path.endsWith('.css')
        ) {
          return acc
        }
        acc[importRef] = importDefinitions[importRef]
        return acc
      },
      {}
    )
  }

  if (isHomePage && !strategy.pages?.options?.useFileNameForNavigation) {
    const { importDefinitions = {} } = uidl.root
    pageUIDL.importDefinitions = Object.keys(importDefinitions).reduce(
      (acc: Record<string, UIDLExternalDependency>, importRef) => {
        if (!importDefinitions[importRef].meta?.importJustPath) {
          acc[importRef] = importDefinitions[importRef]
        }
        return acc
      },
      {}
    )
  }

  return pageUIDL
}

/**
 * A couple of different cases which need to be handled
 * In case of next/nuxt generators, the file names represent the urls of the pages
 * Also the root path needs to be represented by the index file
 */
export const extractPageOptions = (
  routeDefinitions: UIDLRouteDefinitions,
  routeName: string,
  useFileNameForNavigation = false
): { pageOptions: UIDLPageOptions; isHomePage: boolean } => {
  const isHomePage = routeDefinitions.defaultValue === routeName
  const pageDefinitions = routeDefinitions.values || []
  const pageDefinition = pageDefinitions.find((stateDef) => stateDef.value === routeName)

  // If no meta object is defined, the stateName is used
  const defaultPageName = 'AppPage'
  const friendlyStateName = StringUtils.removeIllegalCharacters(routeName) || defaultPageName // remove space, leading numbers, etc.
  const friendlyComponentName = StringUtils.dashCaseToUpperCamelCase(friendlyStateName) // component name in UpperCamelCase
  const friendlyFileName = StringUtils.camelCaseToDashCase(friendlyStateName) // file name in dash-case

  let pageOptions: UIDLPageOptions = {
    // default values extracted from state name
    fileName: basename(friendlyFileName),
    componentName: friendlyComponentName,
    navLink: pageDefinition?.pageOptions?.fallback
      ? '**'
      : '/' + (isHomePage ? '' : basename(friendlyFileName)),
  }

  if (pageDefinition && pageDefinition.pageOptions) {
    // The pageDefinition values have precedence, defaults are fallbacks
    pageOptions = {
      ...pageOptions,
      ...pageDefinition.pageOptions,
    }
  }

  // In case of next/nuxt, the path dictates the file name, so this is adjusted accordingly
  // Also, the defaultPage has to be index, overriding any other value set
  if (useFileNameForNavigation) {
    const fileName = pageOptions.navLink.replace('/', '')
    pageOptions.fileName = pageOptions?.fallback ? '404' : isHomePage ? 'index' : basename(fileName)
  }

  const otherPages = pageDefinitions.filter((page) => page.value !== routeName && page.pageOptions)
  deduplicatePageOptionValues(
    pageOptions,
    otherPages.map((page) => page.pageOptions)
  )

  return { pageOptions, isHomePage }
}

export const prepareComponentOutputOptions = (
  components: Record<string, ComponentUIDL>,
  strategy: ProjectStrategy
) => {
  const componentStrategyOptions = strategy.components.options || {}

  Object.keys(components).forEach((componentKey) => {
    const component = components[componentKey]

    // values coming from the input UIDL
    const { fileName, componentClassName } = component.outputOptions || {
      fileName: '',
      componentClassName: '',
    }

    const defaultComponentName = 'AppComponent'
    const friendlyName = StringUtils.removeIllegalCharacters(component.name) || defaultComponentName
    const friendlyFileName = fileName || StringUtils.camelCaseToDashCase(friendlyName) // ex: primary-button
    const friendlyComponentName =
      componentClassName || StringUtils.dashCaseToUpperCamelCase(friendlyName) // ex: PrimaryButton
    const folderPath = UIDLUtils.getComponentFolderPath(component)

    const { customComponentFileName, customStyleFileName, customTemplateFileName } =
      componentStrategyOptions

    // If the component has its own folder, name is 'index' or an override from the strategy.
    // In this case, the file name (dash converted) is used as the folder name
    if (componentStrategyOptions.createFolderForEachComponent) {
      component.outputOptions = {
        componentClassName: friendlyComponentName,
        fileName: (customComponentFileName && customComponentFileName(friendlyFileName)) || 'index',
        styleFileName: (customStyleFileName && customStyleFileName(friendlyFileName)) || 'style',
        templateFileName:
          (customTemplateFileName && customTemplateFileName(friendlyFileName)) || 'template',
        folderPath: [...folderPath, friendlyFileName],
      }
    } else {
      component.outputOptions = {
        componentClassName: friendlyComponentName,
        fileName:
          (customComponentFileName && customComponentFileName(friendlyFileName)) ||
          friendlyFileName,
        styleFileName:
          (customStyleFileName && customStyleFileName(friendlyFileName)) || friendlyFileName,
        templateFileName:
          (customTemplateFileName && customTemplateFileName(friendlyFileName)) || friendlyFileName,
        folderPath,
      }
    }

    const otherComponents = Object.keys(components).filter(
      (key) => key !== componentKey && components[key].outputOptions
    )
    deduplicateComponentOutputOptions(
      component.outputOptions,
      otherComponents.map((key) => components[key].outputOptions)
    )
  })
}

const deduplicatePageOptionValues = (options: UIDLPageOptions, otherOptions: UIDLPageOptions[]) => {
  let navlinkSuffix = 0
  while (otherOptions.some((opt) => opt.navLink === appendSuffix(options.navLink, navlinkSuffix))) {
    navlinkSuffix++
  }

  if (navlinkSuffix > 0) {
    options.navLink = appendSuffix(options.navLink, navlinkSuffix)
    console.warn(
      `Potential duplication solved by appending '${navlinkSuffix}' to the navlink: ${options.navLink}`
    )
  }

  let componentNameSuffix = 0
  while (
    otherOptions.some(
      (opt) => opt.componentName === appendSuffix(options.componentName, componentNameSuffix)
    )
  ) {
    componentNameSuffix++
  }

  if (componentNameSuffix > 0) {
    options.componentName = appendSuffix(options.componentName, componentNameSuffix)
    console.warn(
      `Potential duplication solved by appending '${componentNameSuffix}' to the componentName: ${options.componentName}`
    )
  }

  let fileNameSuffix = 0
  while (
    otherOptions.some((opt) => opt.fileName === appendSuffix(options.fileName, fileNameSuffix))
  ) {
    fileNameSuffix++
  }

  if (fileNameSuffix > 0) {
    options.fileName = appendSuffix(options.fileName, fileNameSuffix)
    console.warn(
      `Potential duplication solved by appending '${fileNameSuffix}' to the fileName: ${options.fileName}`
    )
  }
}

const deduplicateComponentOutputOptions = (
  options: UIDLComponentOutputOptions,
  otherOptions: UIDLComponentOutputOptions[]
) => {
  let componentNameSuffix = 0
  while (
    otherOptions.some(
      (opt) =>
        opt.componentClassName === appendSuffix(options.componentClassName, componentNameSuffix) &&
        equalPaths(opt.folderPath, options.folderPath)
    )
  ) {
    componentNameSuffix++
  }

  if (componentNameSuffix > 0) {
    options.componentClassName = appendSuffix(options.componentClassName, componentNameSuffix)
    console.warn(
      `Potential duplication solved by appending a '${componentNameSuffix}' to the component class name: ${options.componentClassName}`
    )
  }

  let fileNameSuffix = 0
  while (
    otherOptions.some(
      (opt) =>
        opt.fileName === appendSuffix(options.fileName, fileNameSuffix) &&
        equalPaths(opt.folderPath, options.folderPath)
    )
  ) {
    fileNameSuffix++
  }

  if (fileNameSuffix > 0) {
    options.fileName = appendSuffix(options.fileName, fileNameSuffix)
    console.warn(
      `Potential duplication solved by appending a '${fileNameSuffix}' to the file name: ${options.fileName}`
    )
  }
}

const appendSuffix = (str: string, suffix: number) => {
  const stringSuffix = suffix === 0 ? '' : suffix.toString()
  return str + stringSuffix
}

const equalPaths = (path1: string[], path2: string[]) => {
  return JSON.stringify(path1) === JSON.stringify(path2)
}

export const resolveLocalDependencies = (
  pageUIDLs: ComponentUIDL[],
  components: Record<string, ComponentUIDL>,
  strategy: ProjectStrategy
) => {
  pageUIDLs.forEach((pageUIDL) => {
    const pagePath = UIDLUtils.getComponentFolderPath(pageUIDL)
    const fromPath = strategy.pages.path.concat(pagePath)
    UIDLUtils.traverseElements(pageUIDL.node, (element) => {
      if (isLocalDependency(element)) {
        setLocalDependencyPath(element, components, fromPath, strategy.components.path)
      }
    })
  })

  Object.keys(components).forEach((componentKey) => {
    const component = components[componentKey]
    const componentPath = UIDLUtils.getComponentFolderPath(component)
    const fromPath = strategy.components.path.concat(componentPath)

    UIDLUtils.traverseElements(component.node, (element) => {
      if (isLocalDependency(element)) {
        setLocalDependencyPath(element, components, fromPath, strategy.components.path)
      }
    })
  })
}

const isLocalDependency = (element: UIDLElement) =>
  element.dependency && element.dependency.type === 'local'

const setLocalDependencyPath = (
  element: UIDLElement,
  components: Record<string, ComponentUIDL>,
  fromPath: string[],
  toBasePath: string[]
) => {
  const componentKey = element.semanticType || element.elementType
  const component = components[componentKey]
  const componentPath = UIDLUtils.getComponentFolderPath(component)
  const componentClassName = UIDLUtils.getComponentClassName(component)

  const toPath = toBasePath.concat(componentPath)

  const importFileName = UIDLUtils.getComponentFileName(component)
  const importPath = generateLocalDependenciesPrefix(fromPath, toPath)
  element.dependency.path = `${importPath}${importFileName}`
  element.elementType = 'component'
  element.semanticType = componentClassName
}

export const generateLocalDependenciesPrefix = (fromPath: string[], toPath: string[]): string => {
  /*
    Remove common path elements from the beginning of the
    components and pages full path (if any)

    For example, having:
    - fromPath = ['src', 'components']
    - toPath = ['src', 'pages']

    If we want to have an import statement that goes from the pages folder to the
    components folder, we only need to go back one step, so we are removing
    the first element from both the paths ('src') and build the dependencyPrefix accordingly
  */
  const [firstPath, secondPath] = removeCommonStartingPointsFromPaths([fromPath, toPath])

  // We have to go back as many folders as there are defined in the pages path
  let dependencyPrefix = '../'.repeat(firstPath.length)

  // if 'fromPath' is parent for 'toPath', the path starts from './'
  if (firstPath.length === 0) {
    secondPath.unshift('.')
  }

  dependencyPrefix += secondPath
    .map((folder) => {
      return `${folder}/`
    })
    .join('')

  return dependencyPrefix
}

export const fileFileAndReplaceContent = (
  files: GeneratedFile[],
  fileName: string,
  content: string
): GeneratedFile[] => {
  Object.values(files).forEach((file: GeneratedFile) => {
    if (file.name === fileName) {
      file.content = content.concat(file.content)
    }
  })
  return files
}

export const generateExternalCSSImports = async (uidl: ComponentUIDL) => {
  const { importDefinitions = {} } = uidl

  const styleImports = Object.keys(importDefinitions || {}).reduce(
    (acc: Record<string, UIDLExternalDependency>, importRef) => {
      const importedPackage = importDefinitions[importRef]
      if (importedPackage.path.endsWith('.css')) {
        acc[importRef] = importDefinitions[importRef]
        return acc
      }
      return acc
    },
    {}
  )

  const generator = createComponentGenerator()
  const { chunks } = await importStatementsPlugin({
    uidl: null,
    dependencies: styleImports,
    options: {},
    chunks: [],
  })

  return generator.linkCodeChunks({ imports: chunks }, 'imports')
}

const removeCommonStartingPointsFromPaths = (paths: string[][]): string[][] => {
  const pathsClone: string[][] = JSON.parse(JSON.stringify(paths))

  const shortestPathLength = Math.min(
    ...pathsClone.map((path) => {
      return path.length
    })
  )

  let elementIndex = 0
  let elementsFromIndexAreEqual = true

  while (elementIndex < shortestPathLength && elementsFromIndexAreEqual) {
    const firstPathElementsFromIndex = pathsClone.map((path: string[]) => {
      return path[0]
    })

    if (elementsFromArrayAreEqual(firstPathElementsFromIndex)) {
      // If the first elements from every path are equal, remove it
      pathsClone.forEach((path) => {
        path.shift()
      })
    } else {
      elementsFromIndexAreEqual = false
    }
    elementIndex += 1
  }

  return pathsClone
}

const elementsFromArrayAreEqual = (arrayOfElements: string[]): boolean => {
  return arrayOfElements.every((element: string) => {
    return element === arrayOfElements[0]
  })
}

export const injectFilesToPath = (
  rootFolder: GeneratedFolder,
  path: string[],
  files: GeneratedFile[]
): void => {
  if (path.length === 1 && path[0] === '') {
    rootFolder.files.push(...files)
    return
  }

  let folder = findFolderByPath(rootFolder, path)

  if (!folder) {
    folder = createFolderInPath(rootFolder, path)
  }

  files.forEach((fileToInject) => {
    const existingFile = findFileInFolder(fileToInject, folder)
    if (existingFile) {
      existingFile.content = fileToInject.content
      existingFile.contentEncoding = fileToInject.contentEncoding
    } else {
      folder.files.push(fileToInject)
    }
  })
}

const createFolderInPath = (rootFolder: GeneratedFolder, folderPath: string[]): GeneratedFolder => {
  let currentFolder = rootFolder
  let createdFolder: GeneratedFolder

  folderPath.forEach((path, index) => {
    let intermediateFolder = findSubFolderByName(currentFolder, path)

    if (!intermediateFolder) {
      intermediateFolder = { name: path, files: [], subFolders: [] }
      currentFolder.subFolders.push(intermediateFolder)
    }
    currentFolder = intermediateFolder

    if (index === folderPath.length - 1) {
      createdFolder = currentFolder
    }
  })

  return createdFolder
}

const findFolderByPath = (rootFolder: GeneratedFolder, folderPath: string[]): GeneratedFolder => {
  if (!folderPath || !folderPath.length) {
    return rootFolder
  }

  const folderPathClone = JSON.parse(JSON.stringify(folderPath))
  const path = folderPathClone.shift()

  const subFolder = findSubFolderByName(rootFolder, path)
  return subFolder ? findFolderByPath(subFolder, folderPathClone) : null
}

const findSubFolderByName = (rootFolder: GeneratedFolder, folderName: string): GeneratedFolder => {
  return rootFolder.subFolders.find((folder) => {
    return folder.name === folderName
  })
}

const findFileInFolder = (file: GeneratedFile, folder: GeneratedFolder) => {
  return folder.files.find((f) => f.name === file.name && f.fileType === file.fileType)
}

export const bootstrapGenerator = (
  {
    generator,
    plugins = [],
    postprocessors = [],
    mappings = [],
  }: {
    generator: (params: GeneratorFactoryParams) => ComponentGenerator
    plugins?: ComponentPlugin[]
    postprocessors?: PostProcessor[]
    mappings?: Mapping[]
  },
  style?: StyleVariation
): ComponentGenerator => {
  return generator({ plugins, postprocessors, mappings, ...(style && { variation: style }) })
}

'''
'''--- packages/teleport-project-generator/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-project-packer/README.md ---
# teleport-project-packer

Bare-bone project packer that accepts any project generator and publisher.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-project-packer
```
or
```bash
yarn add @teleporthq/teleport-project-packer
```

'''
'''--- packages/teleport-project-packer/__tests__/index.ts ---
import { readFileSync } from 'fs'
import { join } from 'path'

// @ts-ignore
import projectJson from '../../../examples/test-samples/project-sample.json'
// @ts-ignore
import templateDefinition from './template-definition.json'

import {
  ProjectUIDL,
  AssetsDefinition,
  Publisher,
  GeneratedFolder,
  GeneratedFile,
} from '@teleporthq/teleport-types'

import { createProjectPacker, PackerFactoryParams } from '../src'
import { DEFAULT_TEMPLATE } from '../src/constants'

const assetFile = readFileSync(join(__dirname, 'asset.png'))
const base64File = new Buffer(assetFile).toString('base64')

const assetsData = {
  assets: [
    {
      content: base64File,
      name: 'asset',
      fileType: 'png',
    },
  ],
}

describe('teleport generic project packer', () => {
  it('creates a new instance of generic packer', () => {
    const packer = createProjectPacker()
    expect(packer.loadRemoteTemplate).toBeDefined()
    expect(packer.pack).toBeDefined()
    expect(packer.setAssets).toBeDefined()
    expect(packer.setGenerator).toBeDefined()
    expect(packer.setPublisher).toBeDefined()
    expect(packer.setTemplate).toBeDefined()
  })

  it('can set properties from generic packer', () => {
    const packer = createProjectPacker()

    const assets: AssetsDefinition = { assets: [] }
    const template: GeneratedFolder = DEFAULT_TEMPLATE
    const publisher = createDummyPublisher()

    expect(() => packer.setAssets(assets)).not.toThrow()
    expect(() => packer.setTemplate(template)).not.toThrow()
    expect(() => packer.setPublisher(publisher)).not.toThrow()
  })

  it('should fail to pack if no generator function is provided', async () => {
    const packer = createProjectPacker()
    const uidl = projectJson as unknown as ProjectUIDL
    const options: PackerFactoryParams = {
      template: templateDefinition,
      remoteTemplateDefinition: { provider: 'github', username: 'test', repo: 'test' },
    }

    await expect(packer.pack(uidl, options)).rejects.toThrow(Error)
  })

  it('should return the project folder if no publisher is specified', async () => {
    const packer = createProjectPacker({
      generator: dummyGenerator,
      template: templateDefinition,
    })

    const { success, payload } = await packer.pack(projectJson as unknown as ProjectUIDL)
    expect(success).toBeTruthy()

    expect(payload)
  })

  it('should pack if all required data is provided', async () => {
    const publisher = createDummyPublisher()
    const packer = createProjectPacker({
      publisher,
      generator: dummyGenerator,
      template: templateDefinition,
      assets: assetsData,
    })

    const { success, payload } = await packer.pack(projectJson as unknown as ProjectUIDL)
    expect(success).toBeTruthy()

    const { project } = payload

    const assetsFolder = project.subFolders.find((subFolder) => {
      return subFolder.name === 'static'
    })

    expect(assetsFolder.files[0]).toBeDefined()

    expect(project.files[0].name).toBe('uidl')
    expect(project.files[0].content).toBeDefined()

    expect(project.files[1].name).toBe('template')
    expect(project.files[1].content).toBeDefined()
  })

  it('takes the templateFolder with priority over the remote template definitions', async () => {
    const publisher = createDummyPublisher()
    const packer = createProjectPacker({
      publisher,
      generator: dummyGenerator,
      assets: assetsData,
    })

    const { success, payload } = await packer.pack(projectJson as unknown as ProjectUIDL, {
      template: templateDefinition,
    })
    expect(success).toBeTruthy()

    const { project } = payload
    const assetsFolder = project.subFolders.find((subFolder) => {
      return subFolder.name === 'static'
    })

    expect(assetsFolder.files[0]).toBeDefined()

    expect(project.files[0].name).toBe('uidl')
    expect(project.files[0].content).toBeDefined()

    expect(project.files[1].name).toBe('template')
    expect(project.files[1].content).toBeDefined()
  })
})

const createDummyPublisher = (): Publisher<ProjectUIDL, string> => {
  let project = null
  const publish = async (projectUIDL: ProjectUIDL) => {
    project = projectUIDL
    return { success: true, payload: { ...project } }
  }

  const getProject = () => {
    return project
  }
  const setProject = (projectToSet: GeneratedFolder) => {
    project = projectToSet
  }

  return { publish, getProject, setProject }
}

const dummyGeneratorFunction = async (
  uidl: Record<string, unknown>,
  template: GeneratedFolder
): Promise<GeneratedFolder> => {
  const uidlFile: GeneratedFile = {
    name: 'uidl',
    fileType: 'txt',
    content: JSON.stringify(uidl),
  }

  const templateFile: GeneratedFile = {
    name: 'template',
    fileType: 'txt',
    content: JSON.stringify(template),
  }

  template.files.push(uidlFile)
  template.files.push(templateFile)

  return template
}

const dummyGenerator = {
  setAssets: jest.fn(),
  addMapping: jest.fn(),
  getAssetsPath: jest.fn(() => ['static']),
  generateProject: dummyGeneratorFunction,
}

'''
'''--- packages/teleport-project-packer/__tests__/template-definition.json ---
{
  "name": "next",
  "files": [],
  "subFolders": [
    {
      "name": "components",
      "files": [],
      "subFolders": []              
    },
    {
      "name": "pages",
      "files": [],
      "subFolders": []              
    },
    {
      "name": "static",
      "files": [],
      "subFolders": []              
    }
  ]
}
'''
'''--- packages/teleport-project-packer/package.json ---
{
  "name": "@teleporthq/teleport-project-packer",
  "version": "0.29.0",
  "description": "Bare-bone project packer that accepts any project generator and publisher",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-github-gateway": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0",
    "cross-fetch": "^3.0.4"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-project-packer/src/constants.ts ---
import { GeneratedFolder } from '@teleporthq/teleport-types'

export const DEFAULT_TEMPLATE: GeneratedFolder = {
  name: 'teleport-project',
  files: [],
  subFolders: [],
}

'''
'''--- packages/teleport-project-packer/src/index.ts ---
import {
  AssetsDefinition,
  Publisher,
  ProjectGenerator,
  PublisherResponse,
  ProjectUIDL,
  GeneratedFolder,
  RemoteTemplateDefinition,
  MissingProjectGeneratorError,
} from '@teleporthq/teleport-types'
import { injectAssetsToProject, fetchTemplate } from './utils'
import { DEFAULT_TEMPLATE } from './constants'

export interface PackerFactoryParams {
  publisher?: Publisher<unknown, unknown>
  generator?: ProjectGenerator
  template?: GeneratedFolder
  remoteTemplateDefinition?: RemoteTemplateDefinition
  assets?: AssetsDefinition
}

export type PackerFactory = (params?: PackerFactoryParams) => {
  pack: (
    projectUIDL?: ProjectUIDL,
    params?: PackerFactoryParams
  ) => Promise<PublisherResponse<unknown>>
  loadRemoteTemplate: (remoteTemplateDefinition: RemoteTemplateDefinition) => Promise<void>
  setPublisher: <T, U>(publisher: Publisher<T, U>) => void
  setGenerator: (generator: ProjectGenerator) => void
  setAssets: (assets: AssetsDefinition) => void
  setTemplate: (templateFolder: GeneratedFolder) => void
}

export const createProjectPacker: PackerFactory = (params: PackerFactoryParams = {}) => {
  let { assets, generator, publisher, template } = params

  template = template || DEFAULT_TEMPLATE

  const setPublisher = <T, U>(publisherToSet: Publisher<T, U>): void => {
    publisher = publisherToSet
  }

  const setGenerator = (generatorToSet: ProjectGenerator): void => {
    generator = generatorToSet
  }

  const setAssets = (assetsToSet: AssetsDefinition): void => {
    assets = assetsToSet
  }

  const setTemplate = (templateFolder: GeneratedFolder): void => {
    template = templateFolder
  }

  const loadRemoteTemplate = async (remoteDefinition: RemoteTemplateDefinition): Promise<void> => {
    template = await fetchTemplate(remoteDefinition)
  }

  const pack = async (uidl: ProjectUIDL, packParams: PackerFactoryParams = {}) => {
    const definedProjectUIDL = uidl

    const packGenerator = packParams.generator || generator
    if (!packGenerator) {
      throw new MissingProjectGeneratorError()
    }

    const packPublisher = packParams.publisher || publisher

    const packAssets = packParams.assets || assets
    let templateFolder = packParams.template || template

    // If a remote template is supplied at pack time, it will be fetched,
    // but not saved inside the packer for a secondary use
    if (!packParams.template && packParams.remoteTemplateDefinition) {
      templateFolder = await fetchTemplate(packParams.remoteTemplateDefinition)
    }

    const assetsAndPathsMap = packAssets?.assets.reduce((acc: Record<string, string>, asset) => {
      acc[asset.name] = (asset?.path || []).join('/')
      return acc
    }, {})

    packGenerator.setAssets({
      mappings: assetsAndPathsMap,
      identifier: packAssets?.path ? packAssets.path.join('/') : null,
    })
    const assetsPath = packGenerator.getAssetsPath()

    const outputFolder = await packGenerator.generateProject(definedProjectUIDL, templateFolder)

    const project = await injectAssetsToProject(outputFolder, packAssets, assetsPath)

    if (packPublisher) {
      return packPublisher.publish({ project })
    }

    // If no publisher is provided, return the generated project
    return {
      success: true,
      payload: project,
    }
  }

  return {
    setPublisher,
    setGenerator,
    setAssets,
    setTemplate,
    loadRemoteTemplate,
    pack,
  }
}

'''
'''--- packages/teleport-project-packer/src/utils.ts ---
import { createGithubGateway } from '@teleporthq/teleport-github-gateway'

import {
  AssetsDefinition,
  GeneratedFolder,
  GeneratedFile,
  RemoteTemplateDefinition,
} from '@teleporthq/teleport-types'

export const fetchTemplate = async (template: RemoteTemplateDefinition) => {
  const authData = template.auth || {}
  const githubGateway = createGithubGateway(authData)
  return githubGateway.getRepository(template)
}

export const injectAssetsToProject = async (
  project: GeneratedFolder,
  assetsData: AssetsDefinition,
  assetsRootPath: string[]
): Promise<GeneratedFolder> => {
  if (!assetsData) {
    return project
  }

  const { assets, path = [] } = assetsData

  assets.forEach((asset: GeneratedFile) => {
    const filePath = [...assetsRootPath, ...path, ...(asset?.path || [])]
    project = injectFileInGeneratedFolder(project, asset, filePath)
  })

  return project
}

const injectFileInGeneratedFolder = (
  generatedFolder: GeneratedFolder,
  file: GeneratedFile,
  path: string[]
): GeneratedFolder => {
  if (fileMustBeOnFirstLevel(path)) {
    generatedFolder.files.push(file)
    return generatedFolder
  }

  let currentFolder = generatedFolder

  path.forEach((folderName, index) => {
    let subFolder = currentFolder.subFolders.find((folder) => folder.name === folderName)

    if (!subFolder) {
      subFolder = {
        name: folderName,
        files: [],
        subFolders: [],
      }
      currentFolder.subFolders.push(subFolder)
    }

    currentFolder = subFolder
    if (index === path.length - 1) {
      currentFolder.files.push(file)
    }
  })

  return generatedFolder
}

const fileMustBeOnFirstLevel = (path: string[]): boolean => {
  return !path.length || (path.length === 1 && path[0] === '')
}

'''
'''--- packages/teleport-project-packer/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-project-plugin-css-modules/Readme.md ---
# teleport-project-plugin-css-modules

A plugin for configuring projects generated with [code-generators](https://github.com/teleporthq/teleport-code-generators) to use css-modules.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-project-plugin-css-modules
```
or
```bash
yarn add @teleporthq/teleport-project-plugin-css-modules
```

'''
'''--- packages/teleport-project-plugin-css-modules/package.json ---
{
  "name": "@teleporthq/teleport-project-plugin-css-modules",
  "version": "0.29.0",
  "description": "A plugin for configuring teleportHQ projects using css-modules",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-plugin-css-modules": "^0.29.0",
    "@teleporthq/teleport-postprocessor-prettier-js": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  }
}

'''
'''--- packages/teleport-project-plugin-css-modules/src/index.ts ---
import { ProjectPlugin, ProjectPluginStructure, ProjectType } from '@teleporthq/teleport-types'
import { nextAfterModifier, nextBeforeModifier } from './next'

type SUPPORTED_FRAMEWORKS = ProjectType.NEXT

const frameworkBeforeMap: Record<
  SUPPORTED_FRAMEWORKS,
  (strucutre: ProjectPluginStructure) => Promise<void>
> = {
  [ProjectType.NEXT]: nextBeforeModifier,
}

const frameworkAfterMap: Record<
  SUPPORTED_FRAMEWORKS,
  (strucutre: ProjectPluginStructure) => Promise<void>
> = {
  [ProjectType.NEXT]: nextAfterModifier,
}

export class ProjectPluginCSSModules implements ProjectPlugin {
  framework: SUPPORTED_FRAMEWORKS

  constructor(params: { framework: SUPPORTED_FRAMEWORKS }) {
    this.framework = params.framework
  }

  async runBefore(structure: ProjectPluginStructure) {
    const beforeModifier = frameworkBeforeMap[this.framework]
    if (!beforeModifier) {
      return structure
    }
    await beforeModifier(structure)
    return structure
  }

  async runAfter(structure: ProjectPluginStructure) {
    const afterModifier = frameworkAfterMap[this.framework]
    if (!afterModifier) {
      return structure
    }
    await afterModifier(structure)
    return structure
  }
}

'''
'''--- packages/teleport-project-plugin-css-modules/src/next.ts ---
import { FileType, ProjectPluginStructure, ReactStyleVariation } from '@teleporthq/teleport-types'
import prettierJS from '@teleporthq/teleport-postprocessor-prettier-js'
import { createStyleSheetPlugin } from '@teleporthq/teleport-plugin-css-modules'

export const nextBeforeModifier = async (structure: ProjectPluginStructure) => {
  const { strategy } = structure

  if (strategy.id !== 'teleport-project-next') {
    throw new Error('Plugin can be used only with teleport-project-next')
  }

  strategy.style = ReactStyleVariation.CSSModules
  if (strategy?.projectStyleSheet?.generator) {
    strategy.projectStyleSheet = {
      ...strategy.projectStyleSheet,
      plugins: [createStyleSheetPlugin({ moduleExtension: true })],
      importFile: true,
    }
    strategy.framework.config.isGlobalStylesDependent = false
  }
}

export const nextAfterModifier = async (structure: ProjectPluginStructure) => {
  const { files } = structure
  const appFileContent = files.get('_app').files[0].content
  const content = `import "./style.module.css" \n
    ${appFileContent}
    `

  const formattedCode = prettierJS({ [FileType.JS]: content })

  files.set('_app', {
    path: files.get('_app').path,
    files: [
      {
        name: '_app',
        fileType: FileType.JS,
        content: formattedCode[FileType.JS],
      },
    ],
  })

  const nextContent = prettierJS({
    [FileType.JS]: `const regexEqual = (x, y) => {
  return (
    x instanceof RegExp &&
    y instanceof RegExp &&
    x.source === y.source &&
    x.global === y.global &&
    x.ignoreCase === y.ignoreCase &&
    x.multiline === y.multiline
  );
};

module.exports = {
  webpack: (config) => {
    const oneOf = config.module.rules.find(
      (rule) => typeof rule.oneOf === 'object'
    );

    if (oneOf) {
      const moduleCssRule = oneOf.oneOf.find(
        (rule) => regexEqual(rule.test, /\\.module\\.css$/)
      );

      if (moduleCssRule) {
        const cssLoader = moduleCssRule.use.find(({ loader }) =>
          loader.includes('css-loader')
        );
        if (cssLoader) {
          cssLoader.options.modules.mode = 'local';
        }
      }
    }

    return config;
  },
};`,
  })

  files.set('next.config', {
    path: [],
    files: [
      {
        name: 'next.config',
        fileType: FileType.JS,
        content: nextContent[FileType.JS],
      },
    ],
  })
}

'''
'''--- packages/teleport-project-plugin-css-modules/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-project-plugin-custom-files/Readme.md ---
# teleport-project-plugin-custom-files

A plugin for injecting custom files and dependencies into a generated project

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-project-plugin-custom-files
```
or
```bash
yarn add @teleporthq/teleport-project-plugin-custom-files
```

'''
'''--- packages/teleport-project-plugin-custom-files/__tests__/index.ts ---
import {
  ProjectPluginStructure,
  InMemoryFileRecord,
  ProjectStrategy,
} from '@teleporthq/teleport-types'
import { component, elementNode, project } from '@teleporthq/teleport-uidl-builders'
import { ProjectPluginCustomFiles } from '../src'
import {
  createNextProjectGenerator,
  NextProjectMapping,
  NextTemplate,
} from '@teleporthq/teleport-project-generator-next'
import projectUIDL from '../../../examples/uidl-samples/project.json'

describe('Plugin to add custom files at the end of project generation', () => {
  const customFiles = [
    {
      name: 'config',
      fileType: 'json',
      content: `{ name: 'teleportHQ' }`,
      path: [''],
    },
    {
      name: 'package',
      fileType: 'json',
      content: `{ name: 'teleportHQ' }`,
      path: [''],
    },
    {
      name: 'component',
      fileType: 'js',
      path: ['pages', 'custom-folder'],
      content: `const Welcome = () => {
    return <div>Welcome component</div>
}

export default Welcome`,
    },
  ]

  it('adds files without crashing', async () => {
    const structure: ProjectPluginStructure = {
      files: new Map<string, InMemoryFileRecord>(),
      uidl: project(
        'teleport-project-template',
        component(
          'Root',
          elementNode('Router', {}, []),
          { route: { type: 'string', defaultValue: 'Home' } },
          {}
        ),
        [component('Sample', elementNode('container'), {}, {})]
      ),
      dependencies: {},
      devDependencies: {},
      template: {
        name: 'teleport-project-template',
        files: [],
        subFolders: [],
      },
      strategy: {} as ProjectStrategy,
      rootFolder: { name: 'root', files: [], subFolders: [] },
    }

    const plugin = new ProjectPluginCustomFiles(customFiles)
    const { files } = await plugin.runAfter(structure)

    expect(files).toBeDefined()
    expect(files.get('').files.length).toBe(2)
    expect(files.get('pages-custom-folder').files.length).toBe(1)
  })

  it('adds files and merges them with the generated project', async () => {
    const generator = createNextProjectGenerator()
    generator.addMapping(NextProjectMapping)
    generator.addPlugin(new ProjectPluginCustomFiles(customFiles))

    const { files, subFolders } = await generator.generateProject(projectUIDL, NextTemplate)

    const pagesFolder = subFolders.find((file) => file.name === 'pages')
    const customFolder = pagesFolder.subFolders.find((file) => file.name === 'custom-folder')

    expect(files.length).toBe(3)
    expect(pagesFolder).toBeDefined()
    expect(customFolder).toBeDefined()
    expect(customFolder.files.length).toBe(1)
    expect(customFolder.files[0]?.name).toBe('component')
  })
})

'''
'''--- packages/teleport-project-plugin-custom-files/package.json ---
{
  "name": "@teleporthq/teleport-project-plugin-custom-files",
  "version": "0.29.0",
  "description": "A plugin for injecting custom files and dependencies into a generated project",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-types": "^0.29.0"
  }
}

'''
'''--- packages/teleport-project-plugin-custom-files/src/index.ts ---
import { ProjectPlugin, ProjectPluginStructure } from '@teleporthq/teleport-types'
export interface ProjectCustomFile {
  name: string
  fileType: string
  content: string
  path: string[]
}

export class ProjectPluginCustomFiles implements ProjectPlugin {
  files: ProjectCustomFile[] = []
  dependencies: Record<string, string> = {}
  devDependencies: Record<string, string> = {}

  constructor(
    files: ProjectCustomFile[],
    options?: { dependencies: Record<string, string>; devDependencies: Record<string, string> }
  ) {
    this.files.push(...files)
    if (options?.dependencies) {
      this.dependencies = options.dependencies
    }

    if (options?.devDependencies) {
      this.devDependencies = options.devDependencies
    }
  }

  async runBefore(structure: ProjectPluginStructure): Promise<ProjectPluginStructure> {
    return structure
  }

  async runAfter(structure: ProjectPluginStructure): Promise<ProjectPluginStructure> {
    const { files } = structure

    const filesMap = this.files.reduce(
      (acc: Record<string, ProjectCustomFile[]>, file: ProjectCustomFile) => {
        const id = file.path.join('-')
        if (!acc[id]) {
          acc[id] = []
        }

        acc[id].push(file)
        return acc
      },
      {}
    )

    Object.keys(filesMap).forEach((pathId) => {
      const path = filesMap[pathId]?.[0]?.path

      if (!path) {
        return
      }

      const mappedFiles = filesMap[pathId].map((file) => {
        return {
          name: file.name,
          content: file.content,
          fileType: file.fileType,
        }
      })

      if (files.get(pathId)) {
        files.get(pathId).files.push(...mappedFiles)
      } else {
        files.set(pathId, {
          files: mappedFiles,
          path,
        })
      }
    })

    structure.dependencies = { ...structure.dependencies, ...this.dependencies }
    structure.devDependencies = { ...structure.devDependencies, ...this.devDependencies }

    return structure
  }
}

'''
'''--- packages/teleport-project-plugin-custom-files/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-project-plugin-external-embed/package.json ---
{
    "name": "@teleporthq/teleport-project-plugin-external-embed",
    "version": "0.29.0",
    "description": "A plugin for extracting the html embeds into seperate files",
    "author": "teleportHQ",
    "license": "MIT",
    "homepage": "https://teleporthq.io/",
    "main": "dist/cjs/index.js",
    "module": "dist/esm/index.js",
    "types": "dist/cjs/index.d.ts",
    "sideEffects": false,
    "repository": {
        "type": "git",
        "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
    },
    "bugs": {
        "url": "https://github.com/teleporthq/teleport-code-generators/issues"
    },
    "publishConfig": {
        "access": "public"
    },
    "scripts": {
        "clean": "rimraf dist",
        "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
    },
    "dependencies": {
        "@teleporthq/teleport-shared": "^0.29.0",
        "@teleporthq/teleport-types": "^0.29.0"
    }
}

'''
'''--- packages/teleport-project-plugin-external-embed/src/index.ts ---
import { UIDLUtils } from '@teleporthq/teleport-shared'
import {
  ProjectPluginStructure,
  ProjectPlugin,
  FileType,
  UIDLElement,
} from '@teleporthq/teleport-types'
import path from 'path'

export class ProjectPluginExternalEmbed implements ProjectPlugin {
  remapEmbed(element: UIDLElement, structure: ProjectPluginStructure) {
    if (element.elementType === 'html-node' && 'html' in element?.attrs) {
      const content = element?.attrs?.html?.content as string
      const fileName = (Math.random() + 1).toString(36).substring(7)
      structure.files.set(fileName, {
        path: structure.strategy.static.path,
        files: [{ name: fileName, content, fileType: FileType.HTML }],
      })
      element.attrs = {}
      element.attrs.file = {
        type: 'static',
        content: `./${path.join(structure.strategy.static.prefix, `${fileName}.${FileType.HTML}`)}`,
      }
    }
  }

  async runBefore(structure: ProjectPluginStructure) {
    UIDLUtils.traverseElements(structure.uidl.root.node, (element) =>
      this.remapEmbed(element, structure)
    )

    Object.values(structure.uidl?.components || {}).forEach((componentUIDL) => {
      UIDLUtils.traverseElements(componentUIDL.node, (element) =>
        this.remapEmbed(element, structure)
      )
    })

    return structure
  }

  async runAfter(structure: ProjectPluginStructure) {
    return structure
  }
}

export const pluginExternalEmbed = new ProjectPluginExternalEmbed()

'''
'''--- packages/teleport-project-plugin-external-embed/tsconfig.json ---
{
    "extends": "../../tsconfig.json",
    "compilerOptions": {
      "outDir": "dist/esm"
    },
    "include": [
      "./src"
    ]
  }
'''
'''--- packages/teleport-project-plugin-parse-embed/package.json ---
{
    "name": "@teleporthq/teleport-project-plugin-parse-embed",
    "version": "0.29.0",
    "description": "A plugin for extracting the html embeds into seperate files",
    "author": "teleportHQ",
    "license": "MIT",
    "homepage": "https://teleporthq.io/",
    "main": "dist/cjs/index.js",
    "module": "dist/esm/index.js",
    "types": "dist/cjs/index.d.ts",
    "sideEffects": false,
    "repository": {
        "type": "git",
        "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
    },
    "bugs": {
        "url": "https://github.com/teleporthq/teleport-code-generators/issues"
    },
    "publishConfig": {
        "access": "public"
    },
    "scripts": {
        "clean": "rimraf dist",
        "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --moduleResolution node16 --outDir dist/cjs "
    },
    "dependencies": {
        "@teleporthq/teleport-shared": "^0.29.0",
        "@teleporthq/teleport-types": "^0.29.0",
        "hast-util-from-html": "^1.0.1",
        "hast-util-to-html": "^8.0.4",
        "hast-util-to-jsx-inline-script": "^1.1.0"
    }
}

'''
'''--- packages/teleport-project-plugin-parse-embed/src/component-plugin.ts ---
import { ComponentPlugin, ComponentPluginFactory, HastNode } from '@teleporthq/teleport-types'
import { UIDLUtils } from '@teleporthq/teleport-shared'
import { SUPPORTED_PROJECT_TYPES } from './utils'
import type { JSXElement, JSXIdentifier, JSXText } from '@babel/types'

interface ParseEmbedPluginConfig {
  projectType: SUPPORTED_PROJECT_TYPES
}

const NODE_MAPPER: Record<
  SUPPORTED_PROJECT_TYPES,
  Promise<(content: unknown, options: unknown) => string>
> = {
  html: import('hast-util-to-html').then((mod) => mod.toHtml),
  jsx: import('hast-util-to-jsx-inline-script').then((mod) => mod.default),
  'teleport-project-html': import('hast-util-to-html').then((mod) => mod.toHtml),
  'teleport-project-react': import('hast-util-to-jsx-inline-script').then((mod) => mod.default),
  'teleport-project-next': import('hast-util-to-jsx-inline-script').then((mod) => mod.default),
}

const COMPONENT_CHUNK_NAMES: Record<SUPPORTED_PROJECT_TYPES, string> = {
  html: 'html-chunk',
  jsx: 'jsx-component',
  'teleport-project-html': 'html-chunk',
  'teleport-project-next': 'jsx-component',
  'teleport-project-react': 'jsx-component',
}

export const createParseEmbedPlugin: ComponentPluginFactory<ParseEmbedPluginConfig> = (config) => {
  const { projectType } = config

  if (!NODE_MAPPER[projectType]) {
    throw new Error(`Received a invalid ${projectType}`)
  }

  const componentPlugin: ComponentPlugin = async (structure) => {
    const { uidl, chunks, dependencies } = structure
    const compontnChunk = chunks.find((chunk) => chunk?.name === COMPONENT_CHUNK_NAMES[projectType])

    if (!compontnChunk) {
      throw new Error(`MIssing component chunk to parse for embeds`)
    }

    const fromHtml = (await import('hast-util-from-html')).fromHtml
    const hastToJsxOrHtml = await NODE_MAPPER[projectType]

    UIDLUtils.traverseElements(uidl.node, (element) => {
      const { key, elementType, attrs } = element

      if (
        (elementType === 'dangerous-html' || element.dependency?.path === 'dangerous-html') &&
        attrs?.html
      ) {
        const hastNodes = fromHtml(element.attrs.html.content as string, {
          fragment: true,
        })
        const content = hastToJsxOrHtml(hastNodes, { wrapper: 'fragment' })

        if (projectType === 'teleport-project-html' || projectType === 'html') {
          const node = compontnChunk.meta.nodesLookup[key] as HastNode
          if (!node) {
            return
          }
          /*
            Convert the HastNode to HastText
          */

          Object.assign(node, {
            type: 'text',
            value: content,
          })

          delete node.children
          delete node.properties
          delete dependencies['dangerous-html']
        } else {
          const node = compontnChunk.meta.nodesLookup[key] as JSXElement
          if (!node) {
            return
          }
          ;(node.openingElement.name as JSXIdentifier).name = 'React.Fragment'
          ;(node.closingElement.name as JSXIdentifier).name = 'React.Fragment'
          node.openingElement.attributes = []
          node.children.push({
            type: 'JSXText' as const,
            value: content,
          } as JSXText)
        }
      }
    })

    return structure
  }

  return componentPlugin
}

'''
'''--- packages/teleport-project-plugin-parse-embed/src/hast-util-to-jsx-inline-script.d.ts ---
declare module 'hast-util-to-jsx-inline-script' {
  const toJSX: (content: unknown) => string
  export default toJSX
}

'''
'''--- packages/teleport-project-plugin-parse-embed/src/index.ts ---
import { ProjectPluginStructure, ProjectPlugin } from '@teleporthq/teleport-types'
import { createParseEmbedPlugin } from './component-plugin'
import { SUPPORTED_PROJECT_TYPES } from './utils'

class ProjectPluginParseEmbed implements ProjectPlugin {
  async runBefore(structure: ProjectPluginStructure) {
    const parseEmbedPlugin = createParseEmbedPlugin({
      projectType: structure.strategy.id as SUPPORTED_PROJECT_TYPES,
    })

    if (structure.strategy.pages?.plugins?.length > 0) {
      structure.strategy.pages.plugins.push(parseEmbedPlugin)
    } else {
      structure.strategy.pages.plugins = [parseEmbedPlugin]
    }

    if (structure.strategy.components?.plugins?.length > 0) {
      structure.strategy.components.plugins.push(parseEmbedPlugin)
    } else {
      structure.strategy.components.plugins = [parseEmbedPlugin]
    }

    return structure
  }

  async runAfter(structure: ProjectPluginStructure) {
    return structure
  }
}

export { createParseEmbedPlugin, ProjectPluginParseEmbed }

'''
'''--- packages/teleport-project-plugin-parse-embed/src/utils.ts ---
import { UIDLExternalDependency } from '@teleporthq/teleport-types'

export type SUPPORTED_PROJECT_TYPES =
  | 'teleport-project-html'
  | 'teleport-project-react'
  | 'teleport-project-next'
  | 'html'
  | 'jsx'

export const JS_EXECUTION_DEPENDENCIES: Record<string, UIDLExternalDependency> = {
  'teleport-project-react': {
    type: 'library',
    path: 'dangerous-html',
    version: '0.1.13',
    meta: {
      importAlias: 'dangerous-html/react',
    },
  },
  'teleport-project-next': {
    type: 'library',
    path: 'next',
    version: '^12.1.0',
    meta: {
      importAlias: 'next/script',
    },
  },
}

'''
'''--- packages/teleport-project-plugin-parse-embed/tsconfig.json ---
{
    "extends": "../../tsconfig.json",
    "compilerOptions": {
        "outDir": "dist/esm",
        "allowJs": true
    },
    "include": [
        "./src"
    ]
}

'''
'''--- packages/teleport-project-plugin-react-jss/Readme.md ---
# teleport-project-plugin-next-react-jss

A plugin for generating a next project using react-jss

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-project-plugin-next-react-jss
```
or
```bash
yarn add @teleporthq/teleport-project-plugin-next-react-jss
```

'''
'''--- packages/teleport-project-plugin-react-jss/package.json ---
{
  "name": "@teleporthq/teleport-project-plugin-react-jss",
  "version": "0.29.0",
  "description": "A plugin for configuring projects to use react-jss",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-plugin-import-statements": "^0.29.0",
    "@teleporthq/teleport-plugin-react-jss": "^0.29.0",
    "@teleporthq/teleport-postprocessor-prettier-js": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0",
    "magic-string": "^0.25.4"
  }
}

'''
'''--- packages/teleport-project-plugin-react-jss/src/index.ts ---
import { ProjectPlugin, ProjectPluginStructure, ProjectType } from '@teleporthq/teleport-types'
import { nextAfterModifier, nextBeforeModifier } from './next'

type SUPPORTED_FRAMEWORKS = ProjectType.NEXT

const frameworkBeforeMap: Record<
  SUPPORTED_FRAMEWORKS,
  (structure: ProjectPluginStructure) => Promise<void>
> = {
  [ProjectType.NEXT]: nextBeforeModifier,
}

const frameworkAfterMap: Record<
  SUPPORTED_FRAMEWORKS,
  (structure: ProjectPluginStructure) => Promise<void>
> = {
  [ProjectType.NEXT]: nextAfterModifier,
}

export class ProjectPluginReactJSS implements ProjectPlugin {
  framework: SUPPORTED_FRAMEWORKS

  constructor(params: { framework: SUPPORTED_FRAMEWORKS }) {
    this.framework = params.framework
  }

  async runBefore(structure: ProjectPluginStructure) {
    const beforeModifier = frameworkBeforeMap[this.framework]
    if (!beforeModifier) {
      return structure
    }
    await beforeModifier(structure)
    return structure
  }

  async runAfter(structure: ProjectPluginStructure) {
    const afterModifier = frameworkAfterMap[this.framework]
    if (!afterModifier) {
      return structure
    }
    await afterModifier(structure)
    return structure
  }
}

'''
'''--- packages/teleport-project-plugin-react-jss/src/next.ts ---
import { FileType, ProjectPluginStructure, ReactStyleVariation } from '@teleporthq/teleport-types'
import importStatementsPlugin from '@teleporthq/teleport-plugin-import-statements'
import { createStyleSheetPlugin } from '@teleporthq/teleport-plugin-react-jss'
import prettierJS from '@teleporthq/teleport-postprocessor-prettier-js'
import MagicString from 'magic-string'

export const nextBeforeModifier = async (structure: ProjectPluginStructure) => {
  const { strategy } = structure

  if (strategy.id !== 'teleport-project-next') {
    throw new Error('Plugin can be used only with teleport-project-next')
  }

  strategy.style = ReactStyleVariation.ReactJSS
  if (strategy?.projectStyleSheet?.generator) {
    strategy.projectStyleSheet.plugins = [createStyleSheetPlugin(), importStatementsPlugin]
    strategy.projectStyleSheet.postprocessors = [prettierJS]
    strategy.framework.config.isGlobalStylesDependent = false
  }
}

export const nextAfterModifier = async (structure: ProjectPluginStructure) => {
  const { files } = structure

  if (!files.get('entry')) {
    throw new Error('Entry file is missing from the generated files')
  }

  const fileContent = files.get('entry').files[0].content
  const magicString = new MagicString(fileContent.replace('/n', '//n'))

  magicString.appendRight(
    70,
    `\nimport { SheetsRegistry, JssProvider, createGenerateId } from "react-jss"; \n`
  )
  magicString.appendRight(
    114,
    `\nstatic async getInitialProps(ctx) {
        const registry = new SheetsRegistry();
        const generateId = createGenerateId();
        const originalRenderPage = ctx.renderPage;
        ctx.renderPage = () =>
          originalRenderPage({
            enhanceApp: (App) => (props) => (
              <JssProvider registry={registry} generateId={generateId}>
                <App {...props} />
              </JssProvider>
            ),
          });
        const initialProps = await Document.getInitialProps(ctx);
        return {
          ...initialProps,
          styles: (
            <>
              {initialProps.styles}
              <style id="server-side-styles">{registry.toString()}</style>
            </>
          ),
        };
      }\n \n`
  )

  const formattedCode = prettierJS({
    [FileType.JS]: magicString.toString(),
  })

  files.set('entry', {
    path: ['pages'],
    files: [
      {
        name: '_document',
        fileType: FileType.JS,
        content: formattedCode[FileType.JS],
      },
    ],
  })
}

'''
'''--- packages/teleport-project-plugin-react-jss/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-project-plugin-styled-components/Readme.md ---
# teleport-project-plugin-styled-components

A plugin for configuring projects generated with [code-generators](https://github.com/teleporthq/teleport-code-generators) to use styled-components.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-project-plugin-styled-components
```
or
```bash
yarn add @teleporthq/teleport-project-plugin-styled-components
```

'''
'''--- packages/teleport-project-plugin-styled-components/package.json ---
{
  "name": "@teleporthq/teleport-project-plugin-styled-components",
  "version": "0.29.2",
  "description": "A plugin for configuring teleportHQ projects to use styled-components",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-plugin-import-statements": "^0.29.0",
    "@teleporthq/teleport-plugin-react-app-routing": "^0.29.2",
    "@teleporthq/teleport-plugin-react-styled-components": "^0.29.0",
    "@teleporthq/teleport-postprocessor-prettier-js": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0",
    "magic-string": "^0.25.4"
  }
}

'''
'''--- packages/teleport-project-plugin-styled-components/src/constant.ts ---
export const STYLED_DEPENDENCIES: Record<string, string> = {
  'styled-components': '^5.3.0',
}

'''
'''--- packages/teleport-project-plugin-styled-components/src/index.ts ---
import { ProjectPlugin, ProjectPluginStructure, ProjectType } from '@teleporthq/teleport-types'
import { nextAfterModifier, nextBeforeModifier } from './next'
import { reactAfterModifier, reactBeforeModifier } from './react'

type SUPPORTED_FRAMEWORKS = ProjectType.NEXT | ProjectType.REACT

const frameworkBeforeMap: Record<
  SUPPORTED_FRAMEWORKS,
  (structure: ProjectPluginStructure) => Promise<void>
> = {
  [ProjectType.NEXT]: nextBeforeModifier,
  [ProjectType.REACT]: reactBeforeModifier,
}

const frameworkAfterModifier: Record<
  SUPPORTED_FRAMEWORKS,
  (structure: ProjectPluginStructure) => Promise<void>
> = {
  [ProjectType.NEXT]: nextAfterModifier,
  [ProjectType.REACT]: reactAfterModifier,
}

export class ProjectPluginStyledComponents implements ProjectPlugin {
  framework: SUPPORTED_FRAMEWORKS

  constructor(params: { framework: SUPPORTED_FRAMEWORKS }) {
    this.framework = params.framework
  }

  async runBefore(structure: ProjectPluginStructure) {
    const beforeModifier = frameworkBeforeMap[this.framework]
    if (!beforeModifier) {
      return structure
    }

    await beforeModifier(structure)
    return structure
  }

  async runAfter(structure: ProjectPluginStructure) {
    const afterModifier = frameworkAfterModifier[this.framework]
    if (!afterModifier) {
      return structure
    }

    await afterModifier(structure)
    return structure
  }
}

'''
'''--- packages/teleport-project-plugin-styled-components/src/next.ts ---
import {
  FileType,
  ProjectPluginStructure,
  ReactNativeStyleVariation,
} from '@teleporthq/teleport-types'
import { createStyleSheetPlugin } from '@teleporthq/teleport-plugin-react-styled-components'
import importStatementsPlugin from '@teleporthq/teleport-plugin-import-statements'
import prettierJS from '@teleporthq/teleport-postprocessor-prettier-js'
import MagicString from 'magic-string'
import { STYLED_DEPENDENCIES } from './constant'

export const nextBeforeModifier = async (structure: ProjectPluginStructure) => {
  const { strategy } = structure

  if (strategy.id !== 'teleport-project-next') {
    throw new Error('Plugin can be used only with teleport-project-next')
  }

  strategy.style = ReactNativeStyleVariation.StyledComponents
  if (strategy?.projectStyleSheet?.generator) {
    strategy.projectStyleSheet.plugins = [createStyleSheetPlugin(), importStatementsPlugin]
    strategy.projectStyleSheet.postprocessors = [prettierJS]
    strategy.framework.config.isGlobalStylesDependent = false
  }
}

export const nextAfterModifier = async (structure: ProjectPluginStructure) => {
  const { files, dependencies } = structure

  if (!files.get('entry')) {
    throw new Error(`Entry File is missing from the generated project, _document file not found`)
  }

  const fileContent = files.get('entry').files[0].content
  const magicString = new MagicString(fileContent.replace('/n', '//n'))

  magicString.appendRight(70, `\nimport { ServerStyleSheet } from 'styled-components' \n`)
  magicString.appendRight(
    114,
    `\nstatic getInitialProps({ renderPage }) {
  const sheet = new ServerStyleSheet();
  const page = renderPage((App) => (props) =>
    sheet.collectStyles(<App {...props} />),
  );
  const styleTags = sheet.getStyleElement();
  
  return { ...page, styleTags };
  }\n\n`
  )
  magicString.appendRight(175, `\n{this.props.styleTags}`)

  const formattedCode = prettierJS({
    [FileType.JS]: magicString.toString(),
  })

  const babelRc = `{
    "presets": [
      "next/babel"
    ],
    "plugins": [
      [
        "styled-components",
        {
          "ssr": true,
          "displayName": true,
          "preprocess": false
        }
      ]
    ]
  }`

  files.set('entry', {
    path: ['pages'],
    files: [
      {
        name: '_document',
        fileType: FileType.JS,
        content: formattedCode[FileType.JS],
      },
    ],
  })

  files.set('.babelrc', {
    path: [],
    files: [
      {
        name: '.babelrc',
        content: babelRc,
      },
    ],
  })

  Object.keys(STYLED_DEPENDENCIES).forEach((dep: string) => {
    dependencies[dep] = STYLED_DEPENDENCIES[dep]
  })
}

'''
'''--- packages/teleport-project-plugin-styled-components/src/react.ts ---
import { ProjectPluginStructure, ReactStyleVariation } from '@teleporthq/teleport-types'
import {
  createStyleSheetPlugin,
  createReactStyledComponentsPlugin,
} from '@teleporthq/teleport-plugin-react-styled-components'
import importStatementsPlugin from '@teleporthq/teleport-plugin-import-statements'
import reactAppRoutingPlugin from '@teleporthq/teleport-plugin-react-app-routing'
import { STYLED_DEPENDENCIES } from './constant'

export const reactBeforeModifier = async (structure: ProjectPluginStructure) => {
  const { strategy } = structure

  strategy.style = ReactStyleVariation.StyledComponents
  if (strategy?.projectStyleSheet?.generator) {
    strategy.projectStyleSheet.plugins = [createStyleSheetPlugin(), importStatementsPlugin]
    strategy.router = {
      ...strategy.router,
      plugins: [createReactStyledComponentsPlugin(), reactAppRoutingPlugin, importStatementsPlugin],
    }
    if (strategy.framework?.config) {
      strategy.framework.config.isGlobalStylesDependent = false
    }
  }
}

export const reactAfterModifier = async (structure: ProjectPluginStructure) => {
  const { dependencies } = structure
  Object.keys(STYLED_DEPENDENCIES).forEach((dep: string) => {
    dependencies[dep] = STYLED_DEPENDENCIES[dep]
  })
}

'''
'''--- packages/teleport-project-plugin-styled-components/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-project-plugin-tailwind/Readme.md ---
# teleport-project-plugin-tailwind

A plugin for configuring projects generated with [code-generators](https://github.com/teleporthq/teleport-code-generators) to use tailwind.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-project-plugin-tailwind
```
or
```bash
yarn add @teleporthq/teleport-project-plugin-tailwind
```

'''
'''--- packages/teleport-project-plugin-tailwind/__tests__/index.ts ---
import {
  FileType,
  InMemoryFileRecord,
  ProjectPluginStructure,
  ProjectStrategy,
  ProjectType,
  ProjectUIDL,
} from '@teleporthq/teleport-types'
import { ProjectPluginTailwind } from '../src'
import projectUIDL from '../../../examples/test-samples/project-sample.json'
import { NextTemplate } from '@teleporthq/teleport-project-generator-next'

describe('Plugins adds tailwind as devDependnecy when used with Next', () => {
  const structure: ProjectPluginStructure = {
    files: new Map<string, InMemoryFileRecord>(),
    uidl: projectUIDL as unknown as ProjectUIDL,
    dependencies: {},
    devDependencies: {},
    template: NextTemplate,
    strategy: {} as ProjectStrategy,
    rootFolder: { name: 'root', files: [], subFolders: [] },
  }

  it('Adds deps and changes config, when project has missing project-style sheet', async () => {
    structure.files.set('_app', {
      files: [
        {
          name: '_app',
          fileType: FileType.JS,
          content: ``,
        },
      ],
      path: [''],
    })
    const plugin = new ProjectPluginTailwind({
      framework: ProjectType.NEXT,
    })
    const { files } = await plugin.runAfter(structure)
    const appFile = files.get('_app').files[0]

    expect(appFile).toBeDefined()
    expect(appFile.content).toContain(`import "./global.css"`)
    expect(files.size).toBe(3)
    expect(files.get('tailwindGlobal')).toBeDefined()
    expect(files.get('tailwindConfig')).toBeDefined()
  })

  it('Adds deps and changes config, when the project styles are present', async () => {
    structure.files.delete('_app')
    structure.files.set('projectStyleSheet', {
      files: [
        {
          name: 'style',
          fileType: FileType.CSS,
          content: ``,
        },
      ],
      path: [''],
    })

    const plugin = new ProjectPluginTailwind({
      framework: ProjectType.NEXT,
    })
    const { files } = await plugin.runAfter(structure)

    const styleFile = files.get('projectStyleSheet')
    expect(styleFile).toBeDefined()
    expect(files.size).toBe(3)
  })
})

'''
'''--- packages/teleport-project-plugin-tailwind/package.json ---
{
  "name": "@teleporthq/teleport-project-plugin-tailwind",
  "version": "0.29.2",
  "description": "A plugin for configuring teleportHQ projects to use tailwind",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-plugin-css": "^0.29.0",
    "@teleporthq/teleport-plugin-import-statements": "^0.29.0",
    "@teleporthq/teleport-plugin-react-app-routing": "^0.29.2",
    "@teleporthq/teleport-types": "^0.29.0"
  }
}

'''
'''--- packages/teleport-project-plugin-tailwind/src/angular.ts ---
import { FileType } from '@teleporthq/teleport-types'
import { TailwindPluginParams } from '.'
import { AUTO_PREFIXER, POSTCSS, TAILWIND } from './constants'

export const angularTailwindModifier = async (params: TailwindPluginParams): Promise<void> => {
  const { structure, css, config, path } = params
  const { devDependencies, files } = structure
  config.content = ['./src/**/*.{html,ts}']

  const projectSheet = files
    .get('projectStyleSheet')
    ?.files.find((file) => file.name === 'styles' && file.fileType === FileType.CSS)
  let globalStyleSheet = css

  if (projectSheet) {
    files.delete('projectStyleSheet')
    globalStyleSheet = `${globalStyleSheet} \n \n ${projectSheet.content}`
  }

  files.set('projectStyleSheet', {
    path: path || ['src'],
    files: [
      {
        ...projectSheet,
        content: globalStyleSheet,
      },
    ],
  })

  files.set('tailwindConfig', {
    files: [
      {
        name: 'tailwind.config',
        fileType: FileType.JS,
        content: `module.exports = ${JSON.stringify(config, null, 2)}`,
      },
      {
        name: 'postcss.config',
        fileType: FileType.JS,
        content: `module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};`,
      },
    ],
    path: [''],
  })

  devDependencies.autoprefixer = AUTO_PREFIXER
  devDependencies.postcss = POSTCSS
  devDependencies.tailwindcss = TAILWIND
}

'''
'''--- packages/teleport-project-plugin-tailwind/src/constants.ts ---
export const AUTO_PREFIXER = '^10.4.7'
export const TAILWIND = '^3.0.24'
export const POSTCSS = '^8.4.14'

'''
'''--- packages/teleport-project-plugin-tailwind/src/default.ts ---
import { FileType } from '@teleporthq/teleport-types'
import { TailwindPluginParams } from '.'
import { AUTO_PREFIXER, POSTCSS, TAILWIND } from './constants'

export const defaultTailwindModifier = async (params: TailwindPluginParams): Promise<void> => {
  const { structure, config, css, path } = params
  const { files, devDependencies, rootFolder } = structure
  config.content = ['./src/**/*.{html,js,ts,jsx,tsx}', './*.html']

  const projectSheet = files
    .get('projectStyleSheet')
    ?.files.find((file) => file.name === 'style' && file.fileType === FileType.CSS)
  let globalStyleSheet = css

  if (projectSheet) {
    files.delete('projectStyleSheet')
    globalStyleSheet = `${globalStyleSheet} \n \n ${projectSheet.content}`
  }

  rootFolder.files.forEach((file) => {
    const { name, fileType } = file

    if (name === 'package' && fileType === 'json') {
      const jsonContent = JSON.parse(file.content)
      jsonContent.scripts = {
        ...jsonContent?.scripts,
        tailwind: 'tailwindcss -o style.css -c ./tailwind.config.js',
      }
      file.content = JSON.stringify(jsonContent, null, 2)
    }
  })

  files.set('projectStyleSheet', {
    path: path || ['src', 'teleporthq'],
    files: [
      {
        ...projectSheet,
        content: globalStyleSheet,
      },
    ],
  })

  files.set('tailwindConfig', {
    files: [
      {
        name: 'tailwind.config',
        fileType: FileType.JS,
        content: `module.exports = ${JSON.stringify(config, null, 2)}`,
      },
      {
        name: 'postcss.config',
        fileType: FileType.JS,
        content: `module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};`,
      },
    ],
    path: [''],
  })

  devDependencies.tailwindcss = TAILWIND
  devDependencies.autoprefixer = AUTO_PREFIXER
  devDependencies.postcss = POSTCSS
}

'''
'''--- packages/teleport-project-plugin-tailwind/src/index.ts ---
import { ProjectPlugin, ProjectPluginStructure, ProjectType } from '@teleporthq/teleport-types'
import { nextJSTailwindModifier } from './next'
import { defaultTailwindModifier } from './default'
import { reactTailwindModifier } from './react'
import { vueTailwindModifier } from './vue'
import { angularTailwindModifier } from './angular'
import { nuxtTailwindModifier } from './nuxt'

export type SUPPORTED_TAILWIND_FRAMEWORKS =
  | ProjectType.HTML
  | ProjectType.NEXT
  | ProjectType.REACT
  | ProjectType.VUE
  | ProjectType.NUXT
  | ProjectType.ANGULAR

export interface TailwindPluginParams {
  structure: ProjectPluginStructure
  config: Record<string, unknown>
  css: string
  path?: string[]
}

const frameworkMap: Record<
  SUPPORTED_TAILWIND_FRAMEWORKS,
  (params: TailwindPluginParams) => Promise<void>
> = {
  [ProjectType.NEXT]: nextJSTailwindModifier,
  [ProjectType.HTML]: defaultTailwindModifier,
  [ProjectType.REACT]: reactTailwindModifier,
  [ProjectType.VUE]: vueTailwindModifier,
  [ProjectType.ANGULAR]: angularTailwindModifier,
  [ProjectType.NUXT]: nuxtTailwindModifier,
}

export class ProjectPluginTailwind implements ProjectPlugin {
  config: Record<string, unknown>
  css: string
  path: string[] | null
  framework: SUPPORTED_TAILWIND_FRAMEWORKS

  constructor(params: {
    config?: Record<string, unknown>
    css?: string
    framework?: SUPPORTED_TAILWIND_FRAMEWORKS
    path?: string[]
  }) {
    this.css = params.css
    this.css = params?.css || `@tailwind utilities;`
    this.config = params?.config || {}
    this.framework = params?.framework || ProjectType.HTML
    this.path = params?.path ?? undefined
  }

  async runBefore(structure: ProjectPluginStructure) {
    return structure
  }

  async runAfter(structure: ProjectPluginStructure) {
    const projectModifier = frameworkMap[this.framework]
    if (!projectModifier) {
      throw new Error(`Requested ${this.framework} doesn't have a predefined modifier`)
    }
    await projectModifier({ structure, config: this.config, css: this.css, path: this.path })
    return structure
  }
}

'''
'''--- packages/teleport-project-plugin-tailwind/src/next.ts ---
import { FileType } from '@teleporthq/teleport-types'
import { TailwindPluginParams } from '.'
import { AUTO_PREFIXER, POSTCSS, TAILWIND } from './constants'

export const nextJSTailwindModifier = async (params: TailwindPluginParams): Promise<void> => {
  const { structure, config, css, path } = params
  const { files, devDependencies } = structure
  config.content = ['./pages/**/*.{js,ts,jsx,tsx}', './components/**/*.{js,ts,jsx,tsx}']

  const projectSheet = files
    .get('projectStyleSheet')
    ?.files.find((file) => file.name === 'style' && file.fileType === FileType.CSS)

  if (projectSheet) {
    files.delete('projectStyleSheet')
    files.set('projectStyleSheet', {
      path: path || ['pages'],
      files: [
        {
          ...projectSheet,
          content: `${css}\n${projectSheet.content}`,
        },
      ],
    })
  } else {
    const rootFolder = files.get('_app')
    const rootFile = rootFolder?.files.find(
      (file) => file.name === '_app' && file.fileType === FileType.JS
    )

    if (!rootFile) {
      throw new Error(`Entry _app.js is missing from the project. Please check the project`)
    }

    files.delete('_app')
    files.set('_app', {
      files: [
        ...(rootFolder?.files || []).filter(
          (file) => file.name !== '_app' && file.fileType === FileType.JS
        ),
        {
          ...rootFile,
          content: `import "./global.css" \n \n ${rootFile.content}`,
        },
      ],
      path: ['pages'],
    })
    files.set('tailwindGlobal', {
      files: [
        {
          name: 'global',
          fileType: FileType.CSS,
          content: css,
        },
      ],
      path: ['pages'],
    })
  }

  files.set('tailwindConfig', {
    files: [
      {
        name: 'tailwind.config',
        fileType: FileType.JS,
        content: `module.exports = ${JSON.stringify(config, null, 2)}`,
      },
      {
        name: 'postcss.config',
        fileType: FileType.JS,
        content: `module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};`,
      },
    ],
    path: [''],
  })

  devDependencies.tailwindcss = TAILWIND
  devDependencies.autoprefixer = AUTO_PREFIXER
  devDependencies.postcss = POSTCSS
}

'''
'''--- packages/teleport-project-plugin-tailwind/src/nuxt.ts ---
import { FileType } from '@teleporthq/teleport-types'
import { TailwindPluginParams } from '.'
import { AUTO_PREFIXER, POSTCSS, TAILWIND } from './constants'

export const nuxtTailwindModifier = async (params: TailwindPluginParams): Promise<void> => {
  const { structure, config, css, path } = params
  const { devDependencies, files } = structure
  config.content = [
    './components/**/*.{js,vue,ts}',
    './layouts/**/*.vue',
    './pages/**/*.vue',
    './plugins/**/*.{js,ts}',
    './nuxt.config.{js,ts}',
  ]

  const projectSheet = files
    .get('projectStyleSheet')
    ?.files.find((file) => file.name === 'style' && file.fileType === FileType.CSS)
  let globalStyleSheet = css

  if (projectSheet) {
    files.delete('projectStyleSheet')
    globalStyleSheet = `${globalStyleSheet} \n \n ${projectSheet.content}`
  }

  files.set('projectStyleSheet', {
    path: path || [''],
    files: [
      {
        ...projectSheet,
        content: globalStyleSheet,
      },
    ],
  })

  files.set('tailwindConfig', {
    files: [
      {
        name: 'tailwind.config',
        fileType: FileType.JS,
        content: `module.exports = ${JSON.stringify(config, null, 2)}`,
      },
    ],
    path: [''],
  })

  if (files.get('nuxt.config')) {
    files.delete('nuxt.config')
  }

  files.set('nuxt.config', {
    path: [''],
    files: [
      {
        name: 'nuxt.config',
        fileType: FileType.JS,
        content: `export default {
  css: ["~/style.css"],
  buildModules: ["@nuxt/postcss8"],
  build: {
    postcss: {
      plugins: {
        tailwindcss: {},
        autoprefixer: {},
      },
    },
  },
};`,
      },
    ],
  })

  devDependencies.autoprefixer = AUTO_PREFIXER
  devDependencies.postcss = POSTCSS
  devDependencies.tailwindcss = TAILWIND
  devDependencies['@nuxt/postcss8'] = '^1.1.3'
}

'''
'''--- packages/teleport-project-plugin-tailwind/src/react.ts ---
import { FileType } from '@teleporthq/teleport-types'
import { TailwindPluginParams } from '.'
import { AUTO_PREFIXER, POSTCSS, TAILWIND } from './constants'

export const reactTailwindModifier = async (params: TailwindPluginParams): Promise<void> => {
  const { structure, config, css, path } = params
  const { files, devDependencies } = structure
  config.content = ['./src/**/*.{js,ts,jsx,tsx}']

  const projectSheet = files
    .get('projectStyleSheet')
    ?.files.find((file) => file.name === 'style' && file.fileType === FileType.CSS)
  let globalStyleSheet = css

  if (projectSheet) {
    files.delete('projectStyleSheet')
    globalStyleSheet = `${globalStyleSheet} \n \n ${projectSheet.content}`
  }

  files.set('projectStyleSheet', {
    path: path || ['src'],
    files: [
      {
        ...projectSheet,
        content: globalStyleSheet,
      },
    ],
  })

  files.set('tailwindConfig', {
    files: [
      {
        name: 'tailwind.config',
        fileType: FileType.JS,
        content: `module.exports = ${JSON.stringify(config, null, 2)}`,
      },
      {
        name: 'postcss.config',
        fileType: FileType.JS,
        content: `module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};`,
      },
    ],
    path: [''],
  })

  devDependencies.tailwindcss = TAILWIND
  devDependencies.autoprefixer = AUTO_PREFIXER
  devDependencies.postcss = POSTCSS
}

'''
'''--- packages/teleport-project-plugin-tailwind/src/vue.ts ---
import { FileType } from '@teleporthq/teleport-types'
import { TailwindPluginParams } from '.'
import { AUTO_PREFIXER, POSTCSS, TAILWIND } from './constants'

export const vueTailwindModifier = async (params: TailwindPluginParams): Promise<void> => {
  const { structure, config, css, path } = params
  const { devDependencies, files, rootFolder } = structure
  config.content = ['./src/**/*.{vue,js,ts,jsx,tsx}']

  const projectSheet = files
    .get('projectStyleSheet')
    ?.files.find((file) => file.name === 'style' && file.fileType === FileType.CSS)
  let globalStyleSheet = css

  if (projectSheet) {
    files.delete('projectStyleSheet')
    globalStyleSheet = `${globalStyleSheet} \n \n ${projectSheet.content}`
  }

  files.set('projectStyleSheet', {
    path: path || ['src'],
    files: [
      {
        ...projectSheet,
        content: globalStyleSheet,
      },
    ],
  })

  files.set('tailwindConfig', {
    files: [
      {
        name: 'tailwind.config',
        fileType: FileType.JS,
        content: `module.exports = ${JSON.stringify(config, null, 2)}`,
      },
    ],
    path: [''],
  })

  rootFolder.files.forEach((file) => {
    const { name, fileType } = file

    if (name === 'package' && fileType === 'json') {
      const jsonContent = JSON.parse(file.content)
      if (jsonContent?.postcss) {
        jsonContent.postcss.plugins = {
          ...(jsonContent.postcss?.plugins || {}),
          tailwindcss: {},
        }
      } else {
        jsonContent.postcss = {
          plugins: {
            autoprefixer: {},
            tailwindcss: {},
          },
        }
      }
      file.content = JSON.stringify(jsonContent, null, 2)
    }
  })

  devDependencies.autoprefixer = AUTO_PREFIXER
  devDependencies.postcss = POSTCSS
  devDependencies.tailwindcss = TAILWIND
  devDependencies['postcss-loader'] = '^7.0.0'
}

'''
'''--- packages/teleport-project-plugin-tailwind/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-publisher-codesandbox/README.md ---
# teleport-publisher-codesandbox

Send your generated project to codesandbox.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-publisher-codesandbox
```
or
```bash
yarn add @teleporthq/teleport-publisher-codesandbox
```

'''
'''--- packages/teleport-publisher-codesandbox/__tests__/index.ts ---
import { createCodesandboxPublisher } from '../src'
import { createProjectFolder } from './mocks'

describe('codesandbox publisher', () => {
  it('creates a new instance of the publisher', () => {
    const publisher = createCodesandboxPublisher()
    expect(publisher.getProject).toBeDefined()
    expect(publisher.setProject).toBeDefined()
    expect(publisher.publish).toBeDefined()
  })

  it('should set project', () => {
    const publisher = createCodesandboxPublisher()
    const project = createProjectFolder()
    publisher.setProject(project)

    const publisherProject = JSON.stringify(publisher.getProject())
    expect(publisherProject).toBe(JSON.stringify(project))
  })
})

'''
'''--- packages/teleport-publisher-codesandbox/__tests__/mocks.ts ---
import { GeneratedFolder } from '@teleporthq/teleport-types'

export const createProjectFolder = (): GeneratedFolder => {
  return {
    name: 'root',
    files: [
      {
        content: '<asdasd>',
        name: 'root-file',
      },
    ],
    subFolders: [
      {
        name: 'src',
        files: [
          {
            name: 'file-1',
            content: 'asdasd-1',
          },
          {
            name: 'file-2',
            content: 'asdasd-2',
          },
        ],
        subFolders: [],
      },
    ],
  }
}

'''
'''--- packages/teleport-publisher-codesandbox/__tests__/utils.ts ---
import { convertToCodesandboxStructure } from '../src/utils'
import { createProjectFolder } from './mocks'

describe('convertToCodesandboxStructure', () => {
  it('creates a flat structure based on the given folder', () => {
    const folder = createProjectFolder()
    const result = convertToCodesandboxStructure(folder)
    expect(result['root-file'].content).toBe('<asdasd>')
    expect(result['src/file-1'].content).toBe('asdasd-1')
    expect(result['src/file-2'].content).toBe('asdasd-2')
  })
})

'''
'''--- packages/teleport-publisher-codesandbox/package.json ---
{
  "name": "@teleporthq/teleport-publisher-codesandbox",
  "version": "0.29.0",
  "description": "Send your generated project to codesandbox",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-publisher-zip": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0",
    "cross-fetch": "^3.0.4"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-publisher-codesandbox/src/constants.ts ---
export const BASE_URL = 'https://codesandbox.io/api/v1/sandboxes/define'

export const BASE_SANDBOX_URL = 'https://codesandbox.io/p/sandbox/'

'''
'''--- packages/teleport-publisher-codesandbox/src/index.ts ---
import fetch from 'cross-fetch'
import {
  GeneratedFolder,
  PublisherFactoryParams,
  PublisherFactory,
  Publisher,
  MissingProjectUIDLError,
  CodeSandboxProjectTooBigError,
  CodeSandboxServerError,
  CodeSandboxUnexpectedError,
} from '@teleporthq/teleport-types'
import { BASE_URL, BASE_SANDBOX_URL } from './constants'
import { convertToCodesandboxStructure } from './utils'

export const createCodesandboxPublisher: PublisherFactory<
  PublisherFactoryParams,
  Publisher<PublisherFactoryParams, string>
> = (params = {}) => {
  let { project } = params

  const getProject = (): GeneratedFolder => project
  const setProject = (projectToSet: GeneratedFolder): void => {
    project = projectToSet
  }

  const publish = async (options: PublisherFactoryParams = {}) => {
    const folder = options.project || project

    if (!folder) {
      throw new MissingProjectUIDLError()
    }

    const flatProject = convertToCodesandboxStructure(folder)

    const response = await fetch(`${BASE_URL}?json=1`, {
      headers: {
        Accept: 'application/json',
        'Content-Type': 'application/json',
      },
      method: 'POST',
      body: JSON.stringify({ files: flatProject, environment: 'server' }),
    })

    if (response.status >= 500) {
      throw new CodeSandboxServerError()
    }

    const result = await response.json()

    if (response.status === 200 && result.sandbox_id) {
      return { success: true, payload: `${BASE_SANDBOX_URL}${result.sandbox_id}` }
    }

    if (
      response.status === 422 &&
      Array.isArray(result.errors.detail) &&
      result.errors.detail.includes('request entity too large')
    ) {
      throw new CodeSandboxProjectTooBigError()
    }

    throw new CodeSandboxUnexpectedError(result.errors)
  }

  return {
    getProject,
    setProject,
    publish,
  }
}

'''
'''--- packages/teleport-publisher-codesandbox/src/utils.ts ---
import { GeneratedFolder, GeneratedFile } from '@teleporthq/teleport-types'

export const convertToCodesandboxStructure = (
  folder: GeneratedFolder,
  prefix: string = ''
): Record<string, CodesandboxFile> => {
  const folderFiles = folder.files.reduce((acc: Record<string, CodesandboxFile>, file) => {
    const fileKey = prefix + file.name + (file.fileType ? `.${file.fileType}` : '')
    const fileValue = getCodeSandboxFile(file)
    acc[fileKey] = fileValue
    return acc
  }, {})

  return folder.subFolders.reduce((acc, subFolder) => {
    const subFiles = convertToCodesandboxStructure(subFolder, `${prefix}${subFolder.name}/`)
    return { ...acc, ...subFiles }
  }, folderFiles)
}

interface CodesandboxFile {
  content: string
  isBinary: boolean
}

const getCodeSandboxFile = (file: GeneratedFile): CodesandboxFile => {
  return {
    content: file.content,
    isBinary: file.location === 'remote',
  }
}

'''
'''--- packages/teleport-publisher-codesandbox/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-publisher-disk/README.md ---
# teleport-publisher-disk

Writes a project folder to disk.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-publisher-disk
```
or
```bash
yarn add @teleporthq/teleport-publisher-disk
```

'''
'''--- packages/teleport-publisher-disk/__tests__/index.ts ---
import { join } from 'path'
import {
  existsSync,
  readdirSync,
  unlinkSync,
  rmdirSync,
  statSync,
  readFile,
  chmodSync,
  mkdir,
  constants,
} from 'fs'

import { createDiskPublisher } from '../src'

import project from './project-files.json'

const projectPath = join(__dirname, 'disk-project')
const noPermissionsPath = join(__dirname, 'no-permissions-folder')

afterAll(() => {
  removeDirectory(projectPath)
  removeDirectory(noPermissionsPath)
})

describe('teleport publisher disk', () => {
  it('creates a new instance of disk publisher', () => {
    const publisher = createDiskPublisher()
    expect(publisher.getOutputPath).toBeDefined()
    expect(publisher.setOutputPath).toBeDefined()
    expect(publisher.getProject).toBeDefined()
    expect(publisher.setProject).toBeDefined()
    expect(publisher.publish).toBeDefined()
  })

  it('should set project', () => {
    const publisher = createDiskPublisher()
    publisher.setProject(project)

    const publisherProject = JSON.stringify(publisher.getProject())
    expect(publisherProject).toBe(JSON.stringify(project))
  })

  it('should set output path', () => {
    const publisher = createDiskPublisher()
    publisher.setOutputPath(projectPath)

    const publisherPath = publisher.getOutputPath()
    expect(publisherPath).toBe(projectPath)
  })

  it('should fail if no project is provided', async () => {
    const publisher = createDiskPublisher()
    publisher.setOutputPath(projectPath)

    await expect(publisher.publish()).rejects.toThrow(Error)
  })

  // it('should fail if there are no writing permissions to the output folder', async () => {
  //   const publisher = createDiskPublisher({ project, outputPath: noPermissionsPath })
  //   await createFolderWithNoWritePermissions(noPermissionsPath)

  //   const { success, payload } = await publisher.publish()
  //   expect(success).toBeFalsy()

  //   const indexOfAccessError = JSON.stringify(payload).indexOf('EACCES')
  //   expect(indexOfAccessError).toBeGreaterThan(-1)
  // })

  it('should publish project', async () => {
    const publisher = createDiskPublisher()

    const { success } = await publisher.publish({ project, outputPath: projectPath })
    expect(success).toBeTruthy()

    const projectFolderExists = existsSync(projectPath)
    expect(projectFolderExists).toBe(true)

    const firstPage = project.subFolders[0].files[0]
    const pagePath = join(
      projectPath,
      project.name,
      project.subFolders[0].name,
      `${firstPage.name}.${firstPage.fileType}`
    )

    const firstComponent = project.subFolders[1].files[0]
    const componentPath = join(
      projectPath,
      project.name,
      project.subFolders[1].name,
      `${firstComponent.name}.${firstComponent.fileType}`
    )

    const packageJson = project.files[0]
    const packageJsonPath = join(
      projectPath,
      project.name,
      `${packageJson.name}.${packageJson.fileType}`
    )

    const pageContent = await getFileContent(pagePath)
    expect(pageContent).toBe(firstPage.content)

    const componentContent = await getFileContent(componentPath)
    expect(componentContent).toBe(firstComponent.content)

    const packageJsonContent = await getFileContent(packageJsonPath)
    expect(packageJsonContent).toBe(packageJson.content)
  })
})

const removeDirectory = (dirPath: string): void => {
  if (!existsSync(dirPath)) {
    return
  }

  const files = readdirSync(dirPath)

  for (const file of files) {
    const filePath = join(dirPath, file)
    statSync(filePath).isFile() ? unlinkSync(filePath) : removeDirectory(filePath)
  }

  rmdirSync(dirPath)
}

// const createFolderWithNoWritePermissions = (path: string): Promise<void> => {
//   return new Promise((resolve, reject) => {
//     mkdir(path, { recursive: true }, (error) => {
//       if (error) {
//         return reject(error)
//       }
//       const readByUserOnly = constants.S_IRUSR
//       chmodSync(path, readByUserOnly)
//       resolve()
//     })
//   })
// }

const getFileContent = (path: string): Promise<string> => {
  return new Promise((resolve, reject) => {
    readFile(path, 'utf8', (error, content) => {
      error ? reject(error) : resolve(content)
    })
  })
}

'''
'''--- packages/teleport-publisher-disk/__tests__/project-files.json ---
{
  "name": "project-name",
  "files": [
    {
      "name": "package",
      "fileType": "json",
      "content": "package.json content"
    }
  ],
  "subFolders": [
    {
      "name": "pages",
      "files": [
        {
          "name": "index",
          "fileType": "js",
          "content": "index file content"
        }
      ],
      "subFolders": []
    },
    {
      "name": "components",
      "files": [
        {
          "name": "Navbar",
          "fileType": "js",
          "content": "navbar content"
        }
      ],
      "subFolders": []
    },
    {
      "name": "static",
      "files": [],
      "subFolders": []
    }
  ]
}
'''
'''--- packages/teleport-publisher-disk/package.json ---
{
  "name": "@teleporthq/teleport-publisher-disk",
  "version": "0.29.0",
  "description": "Project disk publisher",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-types": "^0.29.0",
    "cross-fetch": "^3.0.4",
    "path-browserify": "^1.0.1"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-publisher-disk/src/index.ts ---
import {
  GeneratedFolder,
  Publisher,
  PublisherFactoryParams,
  PublisherFactory,
  MissingProjectUIDLError,
  DiskUnexpectedError,
} from '@teleporthq/teleport-types'

import { writeFolder } from './utils'

export interface DiskFactoryParams extends PublisherFactoryParams {
  outputPath?: string
  projectSlug?: string
  createProjectFolder?: boolean
}

export interface DiskPublisher extends Publisher<DiskFactoryParams, string> {
  getOutputPath: () => string
  setOutputPath: (path: string) => void
}

export const createDiskPublisher: PublisherFactory<DiskFactoryParams, DiskPublisher> = (
  params: DiskFactoryParams = {}
): DiskPublisher => {
  let { project, outputPath = './' } = params

  const getProject = (): GeneratedFolder => {
    return project
  }
  const setProject = (projectToSet: GeneratedFolder): void => {
    project = projectToSet
  }

  const getOutputPath = (): string => {
    return outputPath
  }
  const setOutputPath = (path: string): void => {
    outputPath = path
  }

  const publish = async (options: DiskFactoryParams = {}) => {
    const projectToPublish = options.project || project
    if (!projectToPublish) {
      throw new MissingProjectUIDLError()
    }

    const projectOutputPath = options.outputPath || outputPath
    const overrideProjectSlug = options.projectSlug || params.projectSlug
    const createProjectFolder = options.createProjectFolder || params.createProjectFolder

    if (overrideProjectSlug) {
      projectToPublish.name = overrideProjectSlug
    }

    try {
      await writeFolder(projectToPublish, projectOutputPath, createProjectFolder)
      return { success: true, payload: projectOutputPath }
    } catch (error) {
      throw new DiskUnexpectedError(error)
    }
  }

  return {
    publish,
    getProject,
    setProject,
    getOutputPath,
    setOutputPath,
  }
}

'''
'''--- packages/teleport-publisher-disk/src/path-browserisify.d.ts ---
declare module 'path-browserify' {
  import path from 'path'
  export default path
}

'''
'''--- packages/teleport-publisher-disk/src/utils.ts ---
import { existsSync, mkdir, writeFile, WriteFileOptions } from 'fs'
import PathResolver from 'path-browserify'
import fetch from 'cross-fetch'
const { join } = PathResolver
import { GeneratedFolder, GeneratedFile } from '@teleporthq/teleport-types'

export const writeFolder = async (
  folder: GeneratedFolder,
  currentPath: string,
  createProjectFolder = true
): Promise<void> => {
  const { name, files, subFolders } = folder

  const folderPath = createProjectFolder ? join(currentPath, name) : currentPath

  if (!existsSync(folderPath)) {
    await createDirectory(folderPath)
  }

  const promises = [
    writeFilesToFolder(folderPath, files),
    writeSubFoldersToFolder(folderPath, subFolders),
  ]

  await Promise.all(promises)
}

const writeFilesToFolder = async (folderPath: string, files: GeneratedFile[]): Promise<void> => {
  const promises = []
  for (const file of files) {
    const fileName = file.fileType ? `${file.name}.${file.fileType}` : file.name
    const filePath = join(folderPath, fileName)

    if (file.location === 'remote' && !file?.contentEncoding && !file.fileType) {
      const response = await fetch(file.content)
      const arrayBuffer = await response.arrayBuffer()
      promises.push(writeContentToFile(filePath, Buffer.from(arrayBuffer)))
      continue
    }

    promises.push(writeContentToFile(filePath, file.content, file.contentEncoding))
  }
  await Promise.all(promises)
}

const writeSubFoldersToFolder = async (
  folderPath: string,
  subFolders: GeneratedFolder[]
): Promise<void> => {
  const promises = subFolders.map((subFolder) => {
    return writeFolder(subFolder, folderPath)
  })

  await Promise.all(promises)
}

const createDirectory = (pathToDir: string): Promise<void> => {
  return new Promise((resolve, reject) => {
    mkdir(pathToDir, { recursive: true }, (err) => {
      err ? reject(err) : resolve()
    })
  })
}

const writeContentToFile = (
  filePath: string,
  fileContent: string | Buffer,
  encoding: WriteFileOptions = 'utf8'
): Promise<void> => {
  return new Promise((resolve, reject) => {
    writeFile(filePath, fileContent, encoding, (err) => {
      err ? reject(err) : resolve()
    })
  })
}

'''
'''--- packages/teleport-publisher-disk/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-publisher-github/__tests__/github-files-content.json ---
[
  {
    "name": "package.json",
    "content": "package.json content"
  },
  {
    "name": "pages/index.js",
    "content": "index file content",
    "encoding": "base64"
  },
  {
    "name": "components/Navbar.js",
    "content": "navbar content"
  }
]
'''
'''--- packages/teleport-publisher-github/__tests__/index.ts ---
import { createGithubPublisher } from '../src'

import projectJSON from './project-files.json'
import githubFiles from './github-files-content.json'
import { generateProjectFiles } from '../src/utils'
import { GeneratedFolder } from '@teleporthq/teleport-types'

const project = projectJSON as GeneratedFolder
describe('teleport publisher github', () => {
  it('creates a new instance of github publisher', () => {
    const publisher = createGithubPublisher()
    expect(publisher.getCommitMessage).toBeDefined()
    expect(publisher.getMainBranchName).toBeDefined()
    expect(publisher.getCommitBranchName).toBeDefined()
    expect(publisher.getProject).toBeDefined()
    expect(publisher.getRepository).toBeDefined()
    expect(publisher.getRepositoryOwner).toBeDefined()

    expect(publisher.setCommitMessage).toBeDefined()
    expect(publisher.setMainBranchName).toBeDefined()
    expect(publisher.setCommitBranchName).toBeDefined()
    expect(publisher.setProject).toBeDefined()
    expect(publisher.setRepository).toBeDefined()
    expect(publisher.setRepositoryOwner).toBeDefined()

    expect(publisher.publish).toBeDefined()
  })

  it('should set project', () => {
    const publisher = createGithubPublisher()
    publisher.setProject(project)

    const publisherProject = JSON.stringify(publisher.getProject())
    expect(publisherProject).toBe(JSON.stringify(project))
  })

  it('should set commit message', () => {
    const MESSAGE = 'test message'
    const publisher = createGithubPublisher()
    publisher.setCommitMessage(MESSAGE)

    const publisherCommitMessage = JSON.stringify(publisher.getCommitMessage())
    expect(publisherCommitMessage).toBe(JSON.stringify(MESSAGE))
  })

  it('should set master branch name', () => {
    const BRANCH = 'master'
    const publisher = createGithubPublisher()
    publisher.setMainBranchName(BRANCH)

    const publisherMasterBranch = JSON.stringify(publisher.getMainBranchName())
    expect(publisherMasterBranch).toBe(JSON.stringify(BRANCH))
  })

  it('should set commit branch name', () => {
    const BRANCH = 'commit-branch'
    const publisher = createGithubPublisher()
    publisher.setCommitBranchName(BRANCH)

    const publisherCommitBranch = JSON.stringify(publisher.getCommitBranchName())
    expect(publisherCommitBranch).toBe(JSON.stringify(BRANCH))
  })

  it('should set repository name', () => {
    const REPOSITORY = 'test-repo'
    const publisher = createGithubPublisher()
    publisher.setRepository(REPOSITORY)

    const publisherRepository = JSON.stringify(publisher.getRepository())
    expect(publisherRepository).toBe(JSON.stringify(REPOSITORY))
  })

  it('should set repository owner', () => {
    const OWNER = 'test-owner'
    const publisher = createGithubPublisher()
    publisher.setRepositoryOwner(OWNER)

    const publisherOwner = JSON.stringify(publisher.getRepositoryOwner())
    expect(publisherOwner).toBe(JSON.stringify(OWNER))
  })

  it('should fail if no project is provided', async () => {
    const publisher = createGithubPublisher()

    await expect(publisher.publish()).rejects.toThrow(Error)
  })

  it('should fail if no auth data is provided', async () => {
    const publisher = createGithubPublisher()
    publisher.setProject(project)

    await expect(publisher.publish()).rejects.toThrow(Error)
  })

  it('should fail if no repository is provided', async () => {
    const publisher = createGithubPublisher({
      authMeta: { basic: { username: 'test', password: 'test' } },
    })
    publisher.setProject(project)

    await expect(publisher.publish()).rejects.toThrow(Error)
  })

  it('should generate github project files from generated folder', () => {
    const files = generateProjectFiles({ folder: { ...project }, ignoreFolder: true })
    expect(JSON.stringify(files)).toBe(JSON.stringify(githubFiles))
  })
})

'''
'''--- packages/teleport-publisher-github/__tests__/project-files.json ---
{
  "name": "project-name",
  "files": [
    {
      "name": "package",
      "fileType": "json",
      "content": "package.json content"
    }
  ],
  "subFolders": [
    {
      "name": "pages",
      "files": [
        {
          "name": "index",
          "fileType": "js",
          "content": "index file content",
          "contentEncoding": "base64"
        }
      ],
      "subFolders": []
    },
    {
      "name": "components",
      "files": [
        {
          "name": "Navbar",
          "fileType": "js",
          "content": "navbar content"
        }
      ],
      "subFolders": []
    },
    {
      "name": "static",
      "files": [],
      "subFolders": []
    }
  ]
}
'''
'''--- packages/teleport-publisher-github/package.json ---
{
  "name": "@teleporthq/teleport-publisher-github",
  "version": "0.29.0",
  "description": "Project github publisher",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-github-gateway": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-publisher-github/src/index.ts ---
import {
  GeneratedFolder,
  PublisherFactory,
  ServiceAuth,
  MissingProjectUIDLError,
  GithubMissingAuthError,
  GithubMissingRepoError,
  GithubInvalidTokenError,
  GithubUnexpectedError,
  GithubServerError,
} from '@teleporthq/teleport-types'

import { publishToGithub, generateProjectFiles } from './utils'
import { GithubFactoryParams, GithubPublisher, GithubPublishMeta } from './types'

const createGithubPublisher: PublisherFactory<GithubFactoryParams, GithubPublisher> = (
  params: GithubFactoryParams = {}
): GithubPublisher => {
  const { authMeta } = params
  let { project, repository, repositoryOwner, mainBranch, commitBranch, commitMessage } = params

  const getProject = () => project
  const setProject = (projectToSet: GeneratedFolder) => {
    project = projectToSet
  }

  const getRepository = () => repository
  const setRepository = (repo: string) => {
    repository = repo
  }

  const getMainBranchName = () => mainBranch
  const setMainBranchName = (branch: string) => {
    mainBranch = branch
  }

  const getCommitBranchName = () => commitBranch
  const setCommitBranchName = (branch: string) => {
    commitBranch = branch
  }

  const getCommitMessage = () => commitMessage
  const setCommitMessage = (message: string) => {
    commitMessage = message
  }

  const getRepositoryOwner = () => repositoryOwner
  const setRepositoryOwner = (owner: string) => {
    repositoryOwner = owner
  }

  const publish = async (options: GithubFactoryParams = {}) => {
    const projectToPublish = options.project || project
    if (!projectToPublish) {
      throw new MissingProjectUIDLError()
    }

    const auth = options.authMeta || authMeta
    if (!auth) {
      throw new GithubMissingAuthError()
    }

    const repo = options.repository || repository
    if (!repo) {
      throw new GithubMissingRepoError()
    }

    const repoOwner = findRepositoryOwner(auth, options)

    const mainBranchName = options.mainBranch || mainBranch
    const main = mainBranchName ? mainBranch : 'main'
    const commitBranchName = options.commitBranch || commitBranch
    const commitMsg = options.commitMessage || commitMessage
    const isPrivate = options.isPrivate || false

    const githubPublishMeta: GithubPublishMeta = {
      isPrivate,
      authMeta: auth,
      mainBranch: main,
      commitBranch: commitBranchName ? commitBranchName : main,
      commitMessage: commitMsg,
      repository: repo,
      repositoryOwner: repoOwner,
      extraBranchParents: options.extraBranchParents || [],
    }

    const projectFiles = generateProjectFiles({ folder: projectToPublish, ignoreFolder: true })

    try {
      const result = await publishToGithub(projectFiles, githubPublishMeta)
      return { success: true, payload: result }
    } catch (err) {
      // A bit hacky here, the github library we are using is failing with a TypeError when the service is down
      if (err instanceof TypeError) {
        throw new GithubServerError()
      }

      if (err.response.status === 401 && err.response.statusText === 'Unauthorized') {
        throw new GithubInvalidTokenError()
      }

      throw new GithubUnexpectedError(err)
    }
  }

  const findRepositoryOwner = (auth: ServiceAuth, options: GithubFactoryParams): string => {
    if (auth && auth.basic && auth.basic.username) {
      return auth.basic.username
    }
    return options.repositoryOwner || repositoryOwner
  }

  return {
    getProject,
    setProject,
    getRepository,
    setRepository,
    getMainBranchName,
    setMainBranchName,
    getCommitBranchName,
    setCommitBranchName,
    getCommitMessage,
    setCommitMessage,
    getRepositoryOwner,
    setRepositoryOwner,
    publish,
  }
}

export { createGithubPublisher, GithubFactoryParams, GithubPublishMeta, GithubPublisher }

'''
'''--- packages/teleport-publisher-github/src/types.ts ---
import {
  ServiceAuth,
  PublisherFactoryParams,
  Publisher,
  GeneratedFolder,
} from '@teleporthq/teleport-types'
import { GithubFile } from '@teleporthq/teleport-github-gateway'

export interface GithubFactoryParams extends PublisherFactoryParams {
  authMeta?: ServiceAuth
  repositoryOwner?: string
  repository?: string
  mainBranch?: string
  commitBranch?: string
  commitMessage?: string
  isPrivate?: boolean
  extraBranchParents?: string[]
}

export interface GithubPublisher extends Publisher<GithubFactoryParams, string> {
  getRepository: () => string
  setRepository: (repo: string) => void
  getMainBranchName: () => string
  setMainBranchName: (branch: string) => void
  getCommitBranchName: () => string
  setCommitBranchName: (branch: string) => void
  getCommitMessage: () => string
  setCommitMessage: (message: string) => void
  getRepositoryOwner: () => string
  setRepositoryOwner: (owner: string) => void
}

export interface GithubPublishMeta {
  isPrivate: boolean
  authMeta: ServiceAuth
  repository: string
  repositoryOwner: string
  mainBranch?: string
  commitBranch?: string
  commitMessage?: string
  extraBranchParents?: string[]
}

export interface ProjectFolderInfo {
  folder: GeneratedFolder
  prefix?: string
  files?: GithubFile[]
  ignoreFolder?: boolean
}

'''
'''--- packages/teleport-publisher-github/src/utils.ts ---
import { GeneratedFolder, GeneratedFile } from '@teleporthq/teleport-types'
import {
  createGithubGateway,
  GithubFile,
  RepositoryIdentity,
  GithubCommitMeta,
} from '@teleporthq/teleport-github-gateway'

import { GithubPublishMeta, ProjectFolderInfo } from './types'

export const generateProjectFiles = (folderInfo: ProjectFolderInfo): GithubFile[] => {
  const { folder, prefix = '', files = [], ignoreFolder = false } = folderInfo
  const folderToPutFileTo = ignoreFolder ? '' : `${prefix}${folder.name}/`

  folder.files.forEach((file: GeneratedFile) => {
    const fileName = file.fileType
      ? `${folderToPutFileTo}${file.name}.${file.fileType}`
      : `${folderToPutFileTo}${file.name}`

    const githubFile: GithubFile = {
      name: fileName,
      content: file.content,
      status: file.status,
    }

    if (file.contentEncoding) {
      githubFile.encoding = file.contentEncoding
    }

    files.push(githubFile)
  })

  folder.subFolders.forEach((subfolder: GeneratedFolder) => {
    const subfolderInfo = {
      files,
      folder: subfolder,
      prefix: folderToPutFileTo,
    }
    generateProjectFiles(subfolderInfo)
  })

  return files
}

export const publishToGithub = async (files: GithubFile[], meta: GithubPublishMeta) => {
  const {
    authMeta,
    mainBranch,
    commitBranch,
    commitMessage,
    repository,
    repositoryOwner,
    extraBranchParents,
    isPrivate,
  } = meta

  const repositoryIdentity: RepositoryIdentity = {
    owner: repositoryOwner,
    repo: repository,
    ref: mainBranch,
  }

  const gitCommitMeta: GithubCommitMeta = {
    repositoryIdentity,
    files,
    branchName: commitBranch,
    commitMessage,
    isPrivate,
    extraBranchParents,
  }

  const githubGateway = createGithubGateway(authMeta)
  return githubGateway.commitFilesToRepo(gitCommitMeta)
}

'''
'''--- packages/teleport-publisher-github/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-publisher-netlify/README.md ---
# teleport-publisher-netlify

Publishes a static site to netlify.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-publisher-netlify
```
or
```bash
yarn add @teleporthq/teleport-publisher-netlify
```

'''
'''--- packages/teleport-publisher-netlify/__tests__/index.ts ---
import { createNetlifyPublisher } from '../src'

import project from './project-files.json'
import { NO_PROJECT_UIDL, NO_ACCESS_TOKEN } from '../src/errors'

const token = 'access-token'

describe('teleport publisher netlify', () => {
  it('creates a new instance of netlify publisher', () => {
    const publisher = createNetlifyPublisher()
    expect(publisher.getAccessToken).toBeDefined()
    expect(publisher.setAccessToken).toBeDefined()
    expect(publisher.getProject).toBeDefined()
    expect(publisher.setProject).toBeDefined()
    expect(publisher.publish).toBeDefined()
  })

  it('should set project', () => {
    const publisher = createNetlifyPublisher()
    publisher.setProject(project)

    const publisherProject = JSON.stringify(publisher.getProject())
    expect(publisherProject).toBe(JSON.stringify(project))
  })

  it('should set access token', () => {
    const publisher = createNetlifyPublisher()
    publisher.setAccessToken(token)

    const publisherAccessToken = publisher.getAccessToken()
    expect(publisherAccessToken).toBe(token)
  })

  it('should fail if no project is provided', async () => {
    const publisher = createNetlifyPublisher()
    publisher.setAccessToken(token)

    const { success, payload } = await publisher.publish()
    expect(success).toBeFalsy()
    expect(payload).toBe(NO_PROJECT_UIDL)
  })

  it('should fail if not access token is provided', async () => {
    const publisher = createNetlifyPublisher()
    publisher.setProject(project)

    const { success, payload } = await publisher.publish()
    expect(success).toBeFalsy()
    expect(payload).toBe(NO_ACCESS_TOKEN)
  })

  it('should fail if invalid access token is provided', async () => {
    const publisher = createNetlifyPublisher()
    const { success, payload } = await publisher.publish({ project, accessToken: token })
    expect(success).toBeFalsy()
    expect(payload).toBe('Unauthorized')
  })
})

'''
'''--- packages/teleport-publisher-netlify/__tests__/project-files.json ---
{
  "name": "project-name",
  "files": [
    {
      "name": "package",
      "fileType": "json",
      "content": "package.json content"
    }
  ],
  "subFolders": [
    {
      "name": "pages",
      "files": [
        {
          "name": "index",
          "fileType": "js",
          "content": "index file content"
        }
      ],
      "subFolders": []
    },
    {
      "name": "components",
      "files": [
        {
          "name": "Navbar",
          "fileType": "js",
          "content": "navbar content"
        }
      ],
      "subFolders": []
    },
    {
      "name": "static",
      "files": [],
      "subFolders": []
    }
  ]
}
'''
'''--- packages/teleport-publisher-netlify/package.json ---
{
  "name": "@teleporthq/teleport-publisher-netlify",
  "version": "0.29.0",
  "description": "Publishes a static site to netlify",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-publisher-zip": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0",
    "cross-fetch": "^3.0.4"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-publisher-netlify/src/constants.ts ---
export const BUILD_COMMAND = 'export'

export const PUBLISH_DIRECTORY = 'out'

export const NETLIFY_BASE_URL = 'https://api.netlify.com/api/v1'

'''
'''--- packages/teleport-publisher-netlify/src/errors.ts ---
export const NO_PROJECT_UIDL = 'No project UIDL provided.'

export const NO_ACCESS_TOKEN = 'No access token provided'

export const CANNOT_ZIP_PROJECT = 'An error occured while trying to zip the project content'

'''
'''--- packages/teleport-publisher-netlify/src/index.ts ---
import {
  GeneratedFolder,
  Publisher,
  PublisherFactoryParams,
  PublisherFactory,
} from '@teleporthq/teleport-types'
import { BUILD_COMMAND, PUBLISH_DIRECTORY } from './constants'
import { NO_PROJECT_UIDL, NO_ACCESS_TOKEN } from './errors'
import { deployToNetlify } from './netlifyClient'

export interface NetlifyFactoryParams extends PublisherFactoryParams {
  accessToken: string
  buildCommand?: string
  publishDirectory?: string
}

export interface NetlifyPublisher extends Publisher<NetlifyFactoryParams, string> {
  getAccessToken: () => string
  setAccessToken: (token: string) => void
}

const defaultPublisherParams: NetlifyFactoryParams = {
  accessToken: null,
  buildCommand: BUILD_COMMAND,
  publishDirectory: PUBLISH_DIRECTORY,
}

export const createNetlifyPublisher: PublisherFactory<NetlifyFactoryParams, NetlifyPublisher> = (
  params = defaultPublisherParams
): NetlifyPublisher => {
  let { project, accessToken } = params

  const getAccessToken = (): string => accessToken
  const setAccessToken = (token: string): void => {
    accessToken = token
  }

  const getProject = (): GeneratedFolder => project
  const setProject = (projectToSet: GeneratedFolder): void => {
    project = projectToSet
  }

  const publish = async (options: NetlifyFactoryParams = defaultPublisherParams) => {
    const projectToPublish = options.project || project
    if (!projectToPublish) {
      return { success: false, payload: NO_PROJECT_UIDL }
    }

    const netlifyAccessToken = options.accessToken || accessToken
    if (!netlifyAccessToken) {
      return { success: false, payload: NO_ACCESS_TOKEN }
    }

    try {
      const result = await deployToNetlify(projectToPublish, netlifyAccessToken)
      return { success: true, payload: result }
    } catch (error) {
      return { success: false, payload: error.message }
    }
  }

  return {
    getProject,
    setProject,
    getAccessToken,
    setAccessToken,
    publish,
  }
}

'''
'''--- packages/teleport-publisher-netlify/src/netlifyClient.ts ---
import fetch from 'cross-fetch'
import { createZipPublisher } from '@teleporthq/teleport-publisher-zip'
import { GeneratedFolder } from '@teleporthq/teleport-types'
import { CANNOT_ZIP_PROJECT } from './errors'
import { NETLIFY_BASE_URL } from './constants'

export const deployToNetlify = async (
  project: GeneratedFolder,
  accessToken: string
): Promise<string> => {
  const zipContent = await createZipPublisher({ project }).publish()
  if (!zipContent.success) {
    throw new Error(CANNOT_ZIP_PROJECT)
  }

  const createdSiteId = await createSite(accessToken, project.name)
  return createSiteDeploy(zipContent.payload, accessToken, createdSiteId)
}

const createSite = async (accessToken: string, siteName: string): Promise<string> => {
  const params = new URLSearchParams()
  params.append('name', siteName)

  const response = await fetch(`${NETLIFY_BASE_URL}/sites`, {
    method: 'POST',
    headers: { Authorization: `Bearer ${accessToken}` },
    body: params,
  })

  if (response.status !== 200) {
    throw new Error(response.statusText)
  }

  const siteData = await response.json()
  return siteData.id
}

const createSiteDeploy = async (
  zipFile: string | Blob | Buffer,
  accessToken: string,
  siteId: string
): Promise<string> => {
  const url = `${NETLIFY_BASE_URL}/sites/${siteId}/deploys`

  const response = await fetch(url, {
    method: 'POST',
    body: zipFile,
    headers: {
      Authorization: `Bearer ${accessToken}`,
      'Content-Type': 'application.zip',
    },
  })

  const result = await response.json()
  return result.url
}

'''
'''--- packages/teleport-publisher-netlify/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-publisher-vercel/README.md ---
# teleport-publisher-vercel

Publishes a generated folder structure to Vercel.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-publisher-vercel
```
or
```bash
yarn add @teleporthq/teleport-publisher-vercel
```

'''
'''--- packages/teleport-publisher-vercel/__tests__/index.ts ---
import { createVercelPublisher } from '../src'
import { projectFiles } from './mocks'
const token = 'deploy-token'

describe('teleport publisher vercel', () => {
  it('creates a new instance of vercel publisher', () => {
    const publisher = createVercelPublisher()
    expect(publisher.getAccessToken).toBeDefined()
    expect(publisher.setAccessToken).toBeDefined()
    expect(publisher.getProject).toBeDefined()
    expect(publisher.setProject).toBeDefined()
    expect(publisher.publish).toBeDefined()
  })

  it('should set project', () => {
    const publisher = createVercelPublisher()
    publisher.setProject(projectFiles)

    const publisherProject = JSON.stringify(publisher.getProject())
    expect(publisherProject).toBe(JSON.stringify(projectFiles))
  })

  it.skip('should deploy project', async () => {
    jest.setTimeout(80000)
    const publisher = createVercelPublisher()
    const publishedProject = await publisher.publish({
      projectSlug: 'aaa',
      project: projectFiles,
      framework: 'nextjs',
      individualUpload: true,
      accessToken: token,
    })
    expect(publishedProject.success).toBeTruthy()
  })

  it('should set deploy token', () => {
    const publisher = createVercelPublisher()
    publisher.setAccessToken(token)

    const publisherDeployToken = publisher.getAccessToken()
    expect(publisherDeployToken).toBe(token)
  })

  it('should fail if no project is provided', async () => {
    const publisher = createVercelPublisher()
    publisher.setAccessToken(token)

    await expect(publisher.publish()).rejects.toThrow(Error)
  })
})

'''
'''--- packages/teleport-publisher-vercel/__tests__/mocks.ts ---
import { GeneratedFolder } from '@teleporthq/teleport-types'

export const projectFiles: GeneratedFolder = {
  name: 'project-name',
  files: [
    {
      name: 'package',
      fileType: 'json',
      content: `{
        "name": "my-app",
        "version": "0.1.0",
        "private": true,
        "scripts": {
          "dev": "next dev",
          "build": "next build",
          "start": "next start"
        },
        "dependencies": {
          "next": "12.0.10",
          "react": "17.0.2",
          "react-dom": "17.0.2"
        }
      }
      `,
    },
  ],
  subFolders: [
    {
      name: 'pages',
      files: [
        {
          name: 'index',
          fileType: 'js',
          content: `export default function Home() {
            return (
              <h1>
                Welcome to <a href="https://nextjs.org">Next.js!</a>
              </h1>
            );
          }
          `,
        },
      ],
      subFolders: [],
    },
    {
      name: 'static',
      files: [
        {
          location: 'remote',
          content: 'https://presentation-website-assets.vercel.app/logos/logo.png',
          name: 'poza.png',
        },
      ],
      subFolders: [],
    },
  ],
}

'''
'''--- packages/teleport-publisher-vercel/package.json ---
{
  "name": "@teleporthq/teleport-publisher-vercel",
  "version": "0.29.0",
  "description": "Publishes a generated folder structure to vercel",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-types": "^0.29.0",
    "async-retry": "^1.3.3",
    "async-sema": "^3.1.1",
    "node-fetch": "^2.6.1"
  },
  "devDependencies": {
    "@types/async-retry": "1.3.0",
    "@types/node-fetch": "^2.6.1"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-publisher-vercel/src/hash.ts ---
import fetch, { RequestInit } from 'node-fetch'
import { webcrypto } from 'crypto'

export const getSHA = async (buf: Buffer | Uint8Array) => {
  const hashBuffer = await webcrypto.subtle.digest('SHA-1', buf) // hash the message
  const hashArray = Array.from(new Uint8Array(hashBuffer)) // convert buffer to byte array
  return hashArray.map((b) => b.toString(16).padStart(2, '0')).join('') // convert bytes to hex string
}

export const getImageBufferFromRemoteUrl = async (content: string, options: RequestInit) => {
  const response = await fetch(content, options)
  const buffer = await response.arrayBuffer()
  return Buffer.from(buffer)
}

'''
'''--- packages/teleport-publisher-vercel/src/index.ts ---
import {
  GeneratedFolder,
  PublisherFactory,
  Publisher,
  PublisherFactoryParams,
  VercelDeployResponse,
  MissingProjectUIDLError,
  VercelMissingTokenError,
  VercelDeleteProject,
} from '@teleporthq/teleport-types'
import {
  generateProjectFiles,
  createDeployment,
  checkDeploymentStatus,
  removeProject,
} from './utils'
import { VercelPayload } from './types'

const defaultPublisherParams: VercelPublisherParams = {
  accessToken: null,
  projectSlug: 'teleport',
  version: 2,
  public: true,
  target: 'production',
  alias: [],
  individualUpload: false,
  framework: 'nextjs',
}

export interface VercelPublisherParams extends PublisherFactoryParams {
  accessToken: string
  projectSlug: string
  domainAlias?: string
  teamId?: string
  version?: number
  public?: boolean
  target?: string
  alias?: string[]
  individualUpload?: boolean
  framework?: string
}

export interface VercelPublisher extends Publisher<VercelPublisherParams, VercelDeployResponse> {
  getAccessToken: () => string
  setAccessToken: (token: string) => void
  deleteProject: (options?: VercelDeleteProject) => Promise<boolean>
  checkDeploymentStatus: (deploymentURL: string, teamId?: string) => Promise<void>
}

export const createVercelPublisher: PublisherFactory<VercelPublisherParams, VercelPublisher> = (
  params: VercelPublisherParams
): VercelPublisher => {
  let { project, accessToken } = { ...defaultPublisherParams, ...(params && params) }
  const { framework } = { ...defaultPublisherParams, ...(params && params) }

  const getProject = (): GeneratedFolder => project
  const setProject = (projectToSet: GeneratedFolder): void => {
    project = projectToSet
  }

  const getAccessToken = (): string => accessToken
  const setAccessToken = (token: string) => {
    accessToken = token
  }

  const deleteProject = async (options?: VercelDeleteProject): Promise<boolean> => {
    const publishOptions = {
      ...defaultPublisherParams,
      ...params,
      ...options,
    }
    return removeProject(
      publishOptions.accessToken,
      publishOptions.projectSlug,
      publishOptions.teamId
    )
  }

  const publish = async (options?: VercelPublisherParams) => {
    const publishOptions = {
      ...defaultPublisherParams,
      ...params,
      ...options,
    }

    const projectToPublish = options?.project || project
    if (!projectToPublish) {
      throw new MissingProjectUIDLError()
    }

    const {
      projectSlug,
      domainAlias,
      teamId,
      accessToken: vercelAccessToken,
      public: publicDeploy,
      version,
      target,
      alias,
      individualUpload,
    } = publishOptions

    if (!vercelAccessToken) {
      throw new VercelMissingTokenError()
    }
    const files = await generateProjectFiles(
      projectToPublish,
      vercelAccessToken,
      individualUpload,
      teamId
    )

    const vercelPayload: VercelPayload = {
      files,
      name: projectSlug.toLowerCase(), // to avoid any vercel error
      version,
      public: publicDeploy,
      target,
      projectSettings: {
        framework: publishOptions?.framework || framework,
      },
    }

    vercelPayload.alias =
      alias.length === 0 && domainAlias ? [`${projectSlug}.${domainAlias}`] : alias

    const deploymentResult = await createDeployment(vercelPayload, vercelAccessToken, teamId)

    return { success: true, payload: deploymentResult }
  }

  return {
    publish,
    deleteProject,
    getProject,
    setProject,
    getAccessToken,
    setAccessToken,
    checkDeploymentStatus,
  }
}

'''
'''--- packages/teleport-publisher-vercel/src/types.ts ---
import { GeneratedFile, GeneratedFolder, VercelDeployResponse } from '@teleporthq/teleport-types'

export interface ProjectFolderInfo {
  folder: GeneratedFolder
  prefix?: string
  files?: GeneratedFile[]
  ignoreFolder?: boolean
}

export interface VercelFile {
  file: string
  data?: Blob | string
  sha?: string
  size?: number
  encoding?: string
}

export interface VercelPayload {
  files: VercelFile[]
  projectSettings: {
    framework: string
  }
  name: string
  version: number
  public?: boolean
  target?: string
  alias?: string[]
}

export type VercelResponse = VercelDeployResponse | VercelError

export interface VercelError {
  error: {
    code: string
    message: string
    errors?: string[]
  }
}

'''
'''--- packages/teleport-publisher-vercel/src/utils.ts ---
import fetch from 'node-fetch'
import retry from 'async-retry'
import { Agent } from 'https'
import { Sema } from 'async-sema'
import {
  GeneratedFolder,
  VercelDeployResponse,
  VercelDeploymentError,
  VercelDeploymentTimeoutError,
  GeneratedFile,
} from '@teleporthq/teleport-types'
import { ProjectFolderInfo, VercelError, VercelFile, VercelPayload, VercelResponse } from './types'
import { getImageBufferFromRemoteUrl, getSHA } from './hash'

const CREATE_DEPLOY_URL = 'https://api.vercel.com/v13/deployments'
const DELETE_PROJECT_URL = 'https://api.vercel.com/v8/projects'
const UPLOAD_FILES_URL = 'https://api.vercel.com/v2/files'
const CHECK_DEPLOY_BASE_URL = 'https://api.vercel.com/v13/deployments/get?url='

type FileSha = Omit<GeneratedFile, 'content'> & {
  sha: string
  size: number
  isBuffer: boolean
  content: Buffer | string
}

export const generateProjectFiles = async (
  project: GeneratedFolder,
  token: string,
  individualUpload: boolean,
  teamId?: string
): Promise<VercelFile[]> => {
  const projectFilesArray = destructureProjectFiles(
    {
      folder: project,
      ignoreFolder: true,
    },
    token,
    individualUpload,
    teamId
  )

  if (!individualUpload) {
    return projectFilesArray.map((file) => ({
      file: file.name,
      data: file.content,
      encoding: file.contentEncoding,
    }))
  }

  const promises = projectFilesArray.map((key) => generateSha(key))
  const shaProjectFiles: FileSha[] = await Promise.all(promises)

  const vercelUploadFilesURL = teamId ? `${UPLOAD_FILES_URL}?teamId=${teamId}` : UPLOAD_FILES_URL

  const semaphore = new Sema(50, { capacity: 50 })
  const agent = new Agent({ keepAlive: true })

  const shaPromises = shaProjectFiles.map((shaFile) =>
    retry(
      async (bail): Promise<void> => {
        let err

        try {
          await semaphore.acquire()
          const res = await fetch(vercelUploadFilesURL, {
            agent,
            method: 'POST',
            headers: {
              'Content-Type': 'application/octet-stream',
              authorization: `Bearer ${token}`,
              accept: 'application/json',
              'Content-Length': shaFile.size.toString(),
              'x-now-digest': shaFile.sha,
              'x-now-size': shaFile.size.toString(),
            },
            body: shaFile.content,
          })

          if (res.status > 200 && res.status < 500) {
            const { error } = (await res.json()) as VercelError

            err = new Error(error.message)
          } else if (res.status !== 200) {
            // If something is wrong with the server, we retry
            const { error } = (await res.json()) as VercelError
            throw new Error(error.message)
          }
        } catch (e) {
          err = new Error(e)
        } finally {
          semaphore.release()
        }

        if (err) {
          if (isClientNetworkError(err)) {
            // If it's a network error, we retry
            throw err
          } else {
            // Otherwise we bail
            return bail(err)
          }
        }
      },
      {
        retries: 5,
        factor: 6,
        minTimeout: 10,
      }
    )
  )

  await Promise.all(shaPromises)

  return shaProjectFiles.map((file) => ({
    file: file.name,
    sha: file.sha,
    size: file.size,
  }))
}

const destructureProjectFiles = (
  folderInfo: ProjectFolderInfo,
  token: string,
  individualUpload: boolean,
  teamId?: string
): GeneratedFile[] => {
  const { folder, prefix = '', files = [], ignoreFolder = false } = folderInfo
  const folderToPutFileTo = ignoreFolder ? '' : `${prefix}${folder.name}/`

  for (const file of folder.files) {
    const fileName = file.fileType
      ? `${folderToPutFileTo}${file.name}.${file.fileType}`
      : `${folderToPutFileTo}${file.name}`

    file.name = fileName
    files.push(file)
  }

  for (const subFolder of folder.subFolders) {
    destructureProjectFiles(
      {
        files,
        folder: subFolder,
        prefix: folderToPutFileTo,
      },
      token,
      individualUpload,
      teamId
    )
  }

  return files
}

const generateSha = async (file: GeneratedFile): Promise<FileSha> => {
  if (file.contentEncoding === 'base64') {
    const image = Buffer.from(file.content, 'base64')
    const hash = await getSHA(image)

    return {
      ...file,
      sha: hash,
      size: image.length,
      isBuffer: true,
      content: image,
    }
  } else if (file.location === 'remote' && !file.fileType && !file.contentEncoding) {
    const image = await getImageBufferFromRemoteUrl(file.content, {
      headers: {
        accept: 'image/avif,image/webp,image/apng,image/*,*/*;q=0.8',
      },
    })
    const hash = await getSHA(image)

    return {
      ...file,
      sha: hash,
      size: image.byteLength,
      isBuffer: true,
      content: image,
    }
  } else {
    const enc = new TextEncoder().encode(file.content)
    const hash = await getSHA(enc)

    return {
      ...file,
      sha: hash,
      size: enc.length,
      isBuffer: false,
    }
  }
}

export const createDeployment = async (
  payload: VercelPayload,
  token: string,
  teamId?: string
): Promise<VercelDeployResponse> => {
  const vercelDeployURL = teamId ? `${CREATE_DEPLOY_URL}?teamId=${teamId}` : CREATE_DEPLOY_URL

  const response = await fetch(vercelDeployURL, {
    method: 'POST',
    headers: {
      'content-type': 'application/json',
      Authorization: `Bearer ${token}`,
    },
    body: JSON.stringify(payload),
  })

  const result = (await response.json()) as VercelResponse
  if ('error' in result) {
    throwErrorFromVercelResponse(result)
  }

  const { id, url, alias } = result as VercelDeployResponse

  return {
    id,
    url,
    alias,
  }
}

export const removeProject = async (
  token: string,
  projectSlug: string,
  teamId?: string
): Promise<boolean> => {
  const vercelDeployURL = teamId
    ? `${DELETE_PROJECT_URL}/${projectSlug}?teamId=${teamId}`
    : `${DELETE_PROJECT_URL}/${projectSlug}`

  const response = await fetch(vercelDeployURL, {
    method: 'DELETE',
    headers: {
      Authorization: `Bearer ${token}`,
    },
  })

  if (response.status === 204) {
    return true
  }

  const result = (await response.json()) as VercelResponse
  if ('error' in result) {
    throwErrorFromVercelResponse(result)
  }

  return false
}

export const checkDeploymentStatus = async (deploymentURL: string, teamId?: string) => {
  await new Promise<void>((resolve, reject) => {
    let retries = 60

    const clearHook = setInterval(async () => {
      retries = retries - 1

      const vercelUrl = teamId
        ? `${CHECK_DEPLOY_BASE_URL}${deploymentURL}&teamId=${teamId}`
        : `${CHECK_DEPLOY_BASE_URL}${deploymentURL}`
      const response = await fetch(vercelUrl)
      const result = (await response.json()) as VercelResponse

      if ('error' in result) {
        throwErrorFromVercelResponse(result)
      }
      // @ts-ignore
      if ('readyState' in result && result.readyState === 'READY') {
        clearInterval(clearHook)
        return resolve()
      }
      // @ts-ignore
      if ('readyState' in result && result.readyState === 'ERROR') {
        clearInterval(clearHook)
        reject(new VercelDeploymentError())
      }

      if (retries <= 0) {
        clearInterval(clearHook)
        reject(new VercelDeploymentTimeoutError())
      }
    }, 5000)
  })
}

function throwErrorFromVercelResponse(result: VercelError) {
  // https://vercel.com/docs/rest-api#api-basics/errors
  // message fields are designed to be neutral,
  // not contain sensitive information,
  // and can be safely passed down to user interfaces
  const message = result.error.message
    ? result.error.message + JSON.stringify(result.error?.errors)
    : result.error.code
  throw new Error(message)
}

const isClientNetworkError = (err: Error) => {
  if (err.message) {
    // These are common network errors that may happen occasionally and we should retry if we encounter these
    return (
      err.message.includes('ETIMEDOUT') ||
      err.message.includes('ECONNREFUSED') ||
      err.message.includes('ENOTFOUND') ||
      err.message.includes('ECONNRESET') ||
      err.message.includes('EAI_FAIL') ||
      err.message.includes('socket hang up') ||
      err.message.includes('network socket disconnected')
    )
  }

  return false
}

'''
'''--- packages/teleport-publisher-vercel/tsconfig.json ---
{
    "extends": "../../tsconfig.json",
    "compilerOptions": {
        "esModuleInterop": true,
        "allowSyntheticDefaultImports": true,
        "outDir": "dist/esm"
    },
    "include": [
        "./src"
    ]
}

'''
'''--- packages/teleport-publisher-zip/README.md ---
# teleport-publisher-zip

Creates an in-memory zip file from the generated project.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-publisher-zip
```
or
```bash
yarn add @teleporthq/teleport-publisher-zip
```

'''
'''--- packages/teleport-publisher-zip/__tests__/index.ts ---
import { join } from 'path'
import { existsSync, readdirSync, unlinkSync, rmdirSync, statSync } from 'fs'

import { createZipPublisher } from '../src'
import project from './project-files.json'

const projectPath = join(__dirname, 'disk-project')

afterAll(() => {
  removeDirectory(projectPath)
})

describe('teleport publisher zip', () => {
  it('creates a new instance of zip publisher', () => {
    const publisher = createZipPublisher()
    expect(publisher.getOutputPath).toBeDefined()
    expect(publisher.setOutputPath).toBeDefined()
    expect(publisher.getProject).toBeDefined()
    expect(publisher.setProject).toBeDefined()
    expect(publisher.publish).toBeDefined()
  })

  it('should set project', () => {
    const publisher = createZipPublisher()
    publisher.setProject(project)

    const publisherProject = JSON.stringify(publisher.getProject())
    expect(publisherProject).toBe(JSON.stringify(project))
  })

  it('should set output path', () => {
    const publisher = createZipPublisher()
    const path = 'test-path'
    publisher.setOutputPath(path)

    const publisherPath = publisher.getOutputPath()
    expect(publisherPath).toBe(path)
  })

  // it('should fail if no project is provided', async () => {
  //   const publisher = createZipPublisher()

  //   await expect(publisher.publish()).rejects.toThrow(Error)
  // })

  // it('should generate project', async () => {
  //   const publisher = createZipPublisher({ outputPath: projectPath })

  //   const { success } = await publisher.publish({ project })
  //   expect(success).toBeTruthy()
  // })

  // it('should generate project and write the zip to disk if output is provided', async () => {
  //   const publisher = createZipPublisher({ project, outputPath: projectPath })
  //   const zipName = 'zip-name'

  //   const { success, payload } = await publisher.publish({ projectSlug: zipName })
  //   expect(success).toBeTruthy()

  //   const zipPath = join(projectPath, `${zipName}.zip`)
  //   const zipFileExists = existsSync(zipPath)
  //   expect(zipFileExists).toBeTruthy()

  //   const zipInstance = new JSZip()
  //   const zipContent = await zipInstance.loadAsync(payload, {
  //     createFolders: true,
  //   })

  //   const packageJsonFile = zipContent.files['package.json']
  //   expect(packageJsonFile.name).toBe('package.json')
  //   expect(packageJsonFile.dir).toBeFalsy()

  //   const pagesFolder = zipContent.files['pages/']
  //   expect(pagesFolder.dir).toBeTruthy()

  //   const indexFile = zipContent.files['pages/index.js']
  //   expect(indexFile.name).toBe('pages/index.js')
  //   expect(indexFile.dir).toBeFalsy()

  //   const componentsFolder = zipContent.files['components/']
  //   expect(componentsFolder.dir).toBeTruthy()
  // })
})

// it('should generate project and write the zip to disk having the project name as follback for zip name', async () => {
//   const publisher = createZipPublisher({ project, outputPath: projectPath })

//   const { success } = await publisher.publish()
//   expect(success).toBeTruthy()

//   const zipPath = join(projectPath, `${project.name}.zip`)
//   const zipFileExists = existsSync(zipPath)
//   expect(zipFileExists).toBeTruthy()
// })

const removeDirectory = (dirPath: string): void => {
  if (!existsSync(dirPath)) {
    return
  }

  const files = readdirSync(dirPath)

  for (const file of files) {
    const filePath = join(dirPath, file)
    statSync(filePath).isFile() ? unlinkSync(filePath) : removeDirectory(filePath)
  }

  rmdirSync(dirPath)
}

'''
'''--- packages/teleport-publisher-zip/__tests__/project-files.json ---
{
  "name": "project-name",
  "files": [
    {
      "name": "package",
      "fileType": "json",
      "content": "package.json content"
    }
  ],
  "subFolders": [
    {
      "name": "pages",
      "files": [
        {
          "name": "index",
          "fileType": "js",
          "content": "index file content"
        }
      ],
      "subFolders": []
    },
    {
      "name": "components",
      "files": [
        {
          "name": "Navbar",
          "fileType": "js",
          "content": "navbar content"
        }
      ],
      "subFolders": []
    },
    {
      "name": "static",
      "files": [],
      "subFolders": []
    }
  ]
}
'''
'''--- packages/teleport-publisher-zip/package.json ---
{
  "name": "@teleporthq/teleport-publisher-zip",
  "version": "0.29.0",
  "description": "Creates an in-memory zip file from the generated project",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-types": "^0.29.0",
    "jszip": "^3.2.2"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-publisher-zip/src/index.ts ---
import {
  GeneratedFolder,
  PublisherFactoryParams,
  PublisherFactory,
  Publisher,
  MissingProjectUIDLError,
  ZipUnexpectedError,
} from '@teleporthq/teleport-types'
import { isNodeProcess, writeZipToDisk, generateProjectZip } from './utils'

declare type ZipPublisherResponse = string | Buffer | Blob

export interface ZipFactoryParams extends PublisherFactoryParams {
  outputPath?: string
  projectSlug?: string
}

export interface ZipPublisher extends Publisher<ZipFactoryParams, ZipPublisherResponse> {
  getOutputPath: () => string
  setOutputPath: (path: string) => void
}

export const createZipPublisher: PublisherFactory<ZipFactoryParams, ZipPublisher> = (
  params: ZipFactoryParams = {}
): ZipPublisher => {
  let { project, outputPath } = params

  const getProject = () => project
  const setProject = (projectToSet: GeneratedFolder) => {
    project = projectToSet
  }

  const getOutputPath = () => outputPath
  const setOutputPath = (path: string) => {
    outputPath = path
  }

  const publish = async (options: ZipFactoryParams = {}) => {
    const projectToPublish = options.project || project
    if (!projectToPublish) {
      throw new MissingProjectUIDLError()
    }

    const zipName = options.projectSlug || params.projectSlug || projectToPublish.name

    try {
      const zipContent = await generateProjectZip(projectToPublish)

      // If not output path is provided, zip is not written to disk
      const projectOutputPath = options.outputPath || outputPath
      if (projectOutputPath && isNodeProcess()) {
        await writeZipToDisk(projectOutputPath, zipContent, zipName)
      }
      return { success: true, payload: zipContent }
    } catch (error) {
      throw new ZipUnexpectedError(error)
    }
  }

  return {
    publish,
    getProject,
    setProject,
    getOutputPath,
    setOutputPath,
  }
}

'''
'''--- packages/teleport-publisher-zip/src/utils.ts ---
import JSZip from 'jszip'
import { GeneratedFolder, GeneratedFile } from '@teleporthq/teleport-types'

export const isNodeProcess = (): boolean => {
  return (
    typeof process === 'object' &&
    typeof process.versions === 'object' &&
    typeof process.versions.node !== 'undefined'
  )
}

export const writeZipToDisk = (
  zipFolderPath: string,
  content: Buffer | Blob,
  zipName: string
): void => {
  const fs = require('fs')
  const path = require('path')

  if (!fs.existsSync(zipFolderPath)) {
    fs.mkdirSync(zipFolderPath, { recursive: true })
  }

  const zipPath = path.join(zipFolderPath, `${zipName}.zip`)

  const writeStream = fs.createWriteStream(zipPath)
  writeStream.write(content)
  writeStream.end()
}

export const generateProjectZip = async (project: GeneratedFolder): Promise<Buffer | Blob> => {
  let zip = new JSZip()
  zip = writeFolderToZip(project, zip, true)
  const zipType = isNodeProcess() ? 'nodebuffer' : 'blob'
  return zip.generateAsync({ type: zipType })
}

const writeFolderToZip = (
  folder: GeneratedFolder,
  parentFolder: JSZip,
  ignoreFolder: boolean = false
) => {
  const zipFolder = ignoreFolder ? parentFolder : parentFolder.folder(folder.name)

  folder.files.forEach((file: GeneratedFile) => {
    const options = file.contentEncoding === 'base64' ? { base64: true } : {}
    const fileName = file.fileType ? `${file.name}.${file.fileType}` : file.name
    zipFolder.file(fileName, file.content, options)
  })

  folder.subFolders.forEach((subFolder: GeneratedFolder) => {
    writeFolderToZip(subFolder, zipFolder)
  })

  return parentFolder
}

'''
'''--- packages/teleport-publisher-zip/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-shared/README.md ---
# teleport-shared

A utility belt for the entire teleportHQ ecosystem.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-shared
```
or
```bash
yarn add @teleporthq/teleport-shared
```

'''
'''--- packages/teleport-shared/__tests__/utils/string-utils.ts ---
import {
  slugify,
  addSpacesToEachLine,
  removeLastEmptyLine,
  camelCaseToDashCase,
  dashCaseToUpperCamelCase,
  dashCaseToCamelCase,
  removeIllegalCharacters,
  encode,
} from '../../src/utils/string-utils'

describe('slugify tests', () => {
  it('check null input', async () => {
    expect(slugify(null)).toBe(null)
  })
  it('check empty input', async () => {
    expect(slugify('')).toBe('')
  })
  it('check uppercase', async () => {
    expect(slugify('TEST')).toBe('test')
  })
  it('check multiple words', async () => {
    expect(slugify('test multiple-words')).toBe('test-multiple-words')
  })
  it('check multiple ---', async () => {
    expect(slugify('---')).toBe('')
  })
  it('check multiple -- in string', async () => {
    expect(slugify('test--name')).toBe('test-name')
  })

  it('check trim', async () => {
    expect(slugify('   test   ')).toBe('test')
  })
  it('should return correct slug', async () => {
    expect(slugify('Project Name')).toBe('project-name')
  })
})

describe('addSpacesToEachLine', () => {
  it('works on a single line', () => {
    expect(addSpacesToEachLine('  ', 'test')).toBe('  test')
  })

  it('works on multiple lines', () => {
    const multilineText = `This
is a multiline
text`

    const expectedResult = `  This
  is a multiline
  text`

    expect(addSpacesToEachLine('  ', multilineText)).toBe(expectedResult)
  })

  it('adds to existing spaces', () => {
    const multilineText = `This
is a multiline
text
  with some indentation
here
    and there`

    const expectedResult = `  This
  is a multiline
  text
    with some indentation
  here
      and there`

    expect(addSpacesToEachLine('  ', multilineText)).toBe(expectedResult)
  })
})

describe('removeLastEmptyLine', () => {
  it('does not change the string is there is no empty line', () => {
    expect(removeLastEmptyLine('test\ntest')).toBe('test\ntest')
  })

  it('removes empty line at the end', () => {
    expect(removeLastEmptyLine('test\n')).toBe('test')
  })

  it('removes only empty line at the end', () => {
    expect(removeLastEmptyLine('test\ntest\n')).toBe('test\ntest')
  })
})

describe('removeIllegalCharacters', () => {
  it('removes leading numbers', () => {
    expect(removeIllegalCharacters('123test')).toBe('test')
  })

  it('removes spaces and other characters', () => {
    expect(removeIllegalCharacters("test 1  \\'.te^st=2")).toBe('test1test2')
  })

  it('returns the same string for dash case', () => {
    expect(removeIllegalCharacters('about-page')).toBe('about-page')
  })

  it('returns the same string for camel case', () => {
    expect(removeIllegalCharacters('AboutPage')).toBe('AboutPage')
  })
})

describe('camelCaseToDashCase', () => {
  it('works with upper case', () => {
    expect(camelCaseToDashCase('PrimaryButton')).toBe('primary-button')
  })

  it('works with lower case', () => {
    expect(camelCaseToDashCase('primaryButton')).toBe('primary-button')
  })

  it('does not affect a dash case string', () => {
    expect(camelCaseToDashCase('primary-button')).toBe('primary-button')
  })

  it('ignores numbers', () => {
    expect(camelCaseToDashCase('1prim12arybutton')).toBe('1prim12arybutton')
  })

  it('ignores spaces', () => {
    expect(camelCaseToDashCase('Primary Button')).toBe('primary button')
  })

  it('should revert a dash to camel case transition', () => {
    expect(camelCaseToDashCase(dashCaseToCamelCase('primary-button'))).toBe('primary-button')
  })
  it('works with multiple upper case characters to be in a sequence', () => {
    expect(camelCaseToDashCase('PRImaryButton')).toBe('pr-imary-button')
  })
})

describe('dashCaseToUpperCamelCase', () => {
  it('works', () => {
    expect(dashCaseToUpperCamelCase('primary-button')).toBe('PrimaryButton')
  })

  it('works with a dash at the end', () => {
    expect(dashCaseToUpperCamelCase('primary-button-')).toBe('PrimaryButton')
  })

  it('works with a dash at the beginning', () => {
    expect(dashCaseToUpperCamelCase('-primary-button')).toBe('PrimaryButton')
  })

  it('does not change a camel case string', () => {
    expect(dashCaseToUpperCamelCase('PrimaryButton')).toBe('PrimaryButton')
  })

  it('does change a lower camel case to upper camel case string', () => {
    expect(dashCaseToUpperCamelCase('primaryButton')).toBe('PrimaryButton')
  })
})

describe('dashCaseToCamelCase', () => {
  it('works', () => {
    expect(dashCaseToCamelCase('primary-button')).toBe('primaryButton')
  })

  it('works with a dash at the end', () => {
    expect(dashCaseToCamelCase('primary-button-')).toBe('primaryButton')
  })

  it('works with a dash at the beginning', () => {
    expect(dashCaseToCamelCase('-primary-button')).toBe('PrimaryButton')
  })

  it('does not change a camel case string', () => {
    expect(dashCaseToCamelCase('primaryButton')).toBe('primaryButton')
  })

  it('doesn`t change a upper camel case to lower camel case', () => {
    expect(dashCaseToCamelCase('PrimaryButton')).toBe('PrimaryButton')
  })
})

describe('encode', () => {
  it('works', () => {
    expect(encode('<p>test</p>')).toBe('&lt;p&gt;test&lt;/p&gt;')
  })
})

'''
'''--- packages/teleport-shared/__tests__/utils/uidl-utils-style.json ---
{
  "margin": { "type": "static", "content": "20px"},
  "padding": {
    "type": "dynamic",
    "content": {
      "referenceType": "props",
      "id": "padding"
    }
  }
}
'''
'''--- packages/teleport-shared/__tests__/utils/uidl-utils.ts ---
import {
  cleanupDynamicStyles,
  transformStringAssignmentToJson,
  transformStylesAssignmentsToJson,
  transformAttributesAssignmentsToJson,
  findFirstElementNode,
  createWebComponentFriendlyName,
  extractRoutes,
  getComponentFolderPath,
  getComponentFileName,
  getStyleFileName,
  getTemplateFileName,
  getRepeatIteratorNameAndKey,
  prefixAssetsPath,
  traverseNodes,
  traverseElements,
  traverseRepeats,
  extractExternalDependencies,
  splitDynamicAndStaticStyles,
} from '../../src/utils/uidl-utils'
import {
  component,
  staticNode,
  elementNode,
  dynamicNode,
  repeatNode,
  conditionalNode,
  slotNode,
} from '@teleporthq/teleport-uidl-builders'
import {
  UIDLStyleDefinitions,
  UIDLElementNode,
  UIDLConditionalNode,
  UIDLRepeatNode,
  UIDLDynamicReference,
  UIDLSlotNode,
  UIDLAttributeValue,
  ComponentUIDL,
  UIDLDependency,
} from '@teleporthq/teleport-types'

import uidlStyleJSON from './uidl-utils-style.json'
import projectUIDL from '../../../../examples/test-samples/project-sample.json'

describe('Assembly Line', () => {
  it('extract external dependencies', () => {
    const dependencies: Record<string, UIDLDependency> = {
      react: {
        type: 'library',
        path: 'react',
        version: '16.8.0',
      },
      antd: {
        type: 'package',
        path: 'antd',
        version: '4.5.1',
        meta: {
          namedImport: true,
        },
      },
    }
    const result = extractExternalDependencies(dependencies)

    expect(Object.keys(result).length).toBe(1)
  })
})

describe('cleanupDynamicStyles', () => {
  const styleObject = uidlStyleJSON as UIDLStyleDefinitions

  it('removes dynamic styles from nested style objects', () => {
    cleanupDynamicStyles(styleObject)
    const cleanedStyle = cleanupDynamicStyles(styleObject) as unknown as UIDLStyleDefinitions
    expect(cleanedStyle.padding).toBeUndefined()
    expect(cleanedStyle.margin.content).toBe('20px')
  })
})

describe('transformStringAssignmentToJson', () => {
  const inputOutputMap: Record<string, UIDLAttributeValue> = {
    '$props.direction': {
      type: 'dynamic',
      content: {
        referenceType: 'prop',
        id: 'direction',
      },
    },

    '$state.direction': {
      type: 'dynamic',
      content: {
        referenceType: 'state',
        id: 'direction',
      },
    },

    '$local.direction': {
      type: 'dynamic',
      content: {
        referenceType: 'local',
        id: 'direction',
      },
    },

    'static content 1': {
      type: 'static',
      content: `static content 1`,
    },
  }

  it('transforms props string to json', () => {
    Object.keys(inputOutputMap).forEach((key) => {
      expect(transformStringAssignmentToJson(key)).toEqual(inputOutputMap[key])
    })
  })
})

describe('transformStylesAssignmentsToJson', () => {
  it('transforms static styles to new json', () => {
    const inputStyle = {
      float: 'left',
    }

    const expectedStyle = {
      float: { type: 'static', content: 'left' },
    }

    expect(transformStylesAssignmentsToJson(inputStyle)).toEqual(expectedStyle)
  })

  it('leaves static styles json alone', () => {
    const inputStyle = {
      float: { type: 'static', content: 'left' },
      width: 32,
    }

    const expectedStyle = {
      float: { type: 'static', content: 'left' },
      width: { type: 'static', content: 32 },
    }

    expect(transformStylesAssignmentsToJson(inputStyle)).toEqual(expectedStyle)
  })

  it('leaves dynamic styles json alone', () => {
    const inputStyle = {
      width: { type: 'dynamic', content: { referenceType: 'prop', id: 'size' } },
    }

    const expectedStyle = {
      width: { type: 'dynamic', content: { referenceType: 'prop', id: 'size' } },
    }

    expect(transformStylesAssignmentsToJson(inputStyle)).toEqual(expectedStyle)
  })

  it('transforms dynamic styles to new json', () => {
    const inputStyle = {
      width: '$props.size',
    }

    const expectedStyle = {
      width: { type: 'dynamic', content: { referenceType: 'prop', id: 'size' } },
    }

    expect(transformStylesAssignmentsToJson(inputStyle)).toEqual(expectedStyle)
  })

  it('Nested styles are not supported', () => {
    const nestedStyle = {
      '@media(max-widht:300px)': {
        flex: '1 1 row',
        width: '$props.size',
        parsedValue: {
          type: 'static',
          content: 'parsed',
        },
      },

      // already parsed, should be left untouched
      '@media(min-widht:300px)': {
        type: 'nested-style',
        content: {
          flex: { type: 'static', content: '1 1 row' },
          width: { type: 'dynamic', content: { referenceType: 'prop', id: 'size' } },
          heght: '$props.size',
        },
      },
    }

    expect(transformStylesAssignmentsToJson(nestedStyle)).toEqual({})
  })
})

describe('transformAttributesAssignmentsToJson', () => {
  it('transforms attrs styles to new json', () => {
    const inputStyle = {
      float: { type: 'static', content: 'left' },
      width: 32,
      height: '$state.expandedSize',
      flexDirection: { type: 'dynamic', content: { referenceType: 'prop', id: 'direction' } },
    }

    const expectedStyle = {
      float: { type: 'static', content: 'left' },
      width: { type: 'static', content: 32 },
      height: { type: 'dynamic', content: { referenceType: 'state', id: 'expandedSize' } },
      flexDirection: { type: 'dynamic', content: { referenceType: 'prop', id: 'direction' } },
    }

    expect(transformAttributesAssignmentsToJson(inputStyle)).toEqual(expectedStyle)
  })
})

describe('traverses the UIDL and returns the first element node that is found', () => {
  const inputElementNode: UIDLElementNode = {
    type: 'element',
    content: {
      elementType: 'container',
    },
  }

  it('returns the same node, when the passed node is element node', () => {
    const firstElmNode = findFirstElementNode(inputElementNode)
    expect(firstElmNode).toBe(inputElementNode)
  })

  it('returns the inputElementNode when the root is a conditional element', () => {
    const node: UIDLConditionalNode = {
      type: 'conditional',
      content: {
        node: inputElementNode,
        reference: {
          type: 'dynamic',
          content: {
            referenceType: 'prop',
            id: 'isVisible',
          },
        },
      },
    }
    const firstElmNode = findFirstElementNode(node)
    expect(firstElmNode).toBe(inputElementNode)
  })

  it('returns the inputElementNode when the root is a repeat element', () => {
    const node: UIDLRepeatNode = {
      type: 'repeat',
      content: {
        node: inputElementNode,
        dataSource: {
          type: 'dynamic',
          content: {
            referenceType: 'prop',
            id: 'items',
          },
        },
      },
    }

    const firstElmNode = findFirstElementNode(node)
    expect(firstElmNode).toBe(inputElementNode)
  })

  it('returns the inputElementNode when the UIDL has multiple element nodes', () => {
    const nestedNode: UIDLElementNode = {
      ...inputElementNode,
      content: {
        ...inputElementNode.content,
        children: [inputElementNode, inputElementNode],
      },
    }
    const nestedinputConditonalNode: UIDLConditionalNode = {
      type: 'conditional',
      content: {
        node: nestedNode,
        reference: {
          type: 'dynamic',
          content: {
            referenceType: 'state',
            id: 'isOpen',
          },
        },
      },
    }

    const firstElmNode = findFirstElementNode(nestedinputConditonalNode)
    expect(firstElmNode).toBe(nestedNode)
  })

  it('throws error if a static is passed', () => {
    const node = staticNode('This is a static value')

    try {
      findFirstElementNode(node)
    } catch (e) {
      expect(e.message).toContain('UIDL does not have any element node')
    }
  })

  it('throws error if a dynamic is passed', () => {
    const node: UIDLDynamicReference = {
      type: 'dynamic',
      content: {
        referenceType: 'prop',
        id: 'isOpen',
      },
    }

    try {
      findFirstElementNode(node)
    } catch (e) {
      expect(e.message).toContain('UIDL does not have any element node')
    }
  })

  it('throws error if a static is passed', () => {
    const node: UIDLSlotNode = {
      type: 'slot',
      content: {
        name: 'slotNode',
      },
    }

    try {
      findFirstElementNode(node)
    } catch (e) {
      expect(e.message).toContain('UIDL does not have any element node')
    }
  })
})

describe('extractRoutes', () => {
  const root = projectUIDL.root as ComponentUIDL
  const result = extractRoutes(root)
  expect(result.length).toBe(3)
  expect(result[0].content.value).toBe('index')
  expect(result[1].content.value).toBe('about')
  expect(result[2].content.value).toBe('contact-us')
})

describe('getComponentFileName', () => {
  const testComponent = component('MyComponent', elementNode('random'))

  it('returns the dashcase filename', () => {
    expect(getComponentFileName(testComponent)).toBe('my-component')
  })

  it('meta fileName overrides', () => {
    testComponent.outputOptions = {
      fileName: 'my-custom-name',
    }
    expect(getComponentFileName(testComponent)).toBe('my-custom-name')
  })
})

describe('getStyleFileName', () => {
  const testComponent = component('MyComponent', elementNode('random'))

  it('returns the dashcase filename', () => {
    expect(getStyleFileName(testComponent)).toBe('my-component')
  })

  it('returns the specific style filename', () => {
    testComponent.outputOptions = {
      styleFileName: 'my-custom-name',
    }
    expect(getStyleFileName(testComponent)).toBe('my-custom-name')
  })
})

describe('getTemplateFileName', () => {
  const testComponent = component('MyComponent', elementNode('random'))

  it('returns the dashcase filename', () => {
    expect(getTemplateFileName(testComponent)).toBe('my-component')
  })

  it('meta fileName overrides', () => {
    testComponent.outputOptions = {
      templateFileName: 'my-custom-name',
    }
    expect(getTemplateFileName(testComponent)).toBe('my-custom-name')
  })
})

describe('getComponentFolderPath', () => {
  const testComponent = component('MyComponent', elementNode('random'))

  it('returns an empty array if no meta path is provided', () => {
    expect(getComponentFolderPath(testComponent)).toHaveLength(0)
  })

  it('returns the input meta path', () => {
    testComponent.outputOptions = {
      folderPath: ['one', 'two'],
    }

    const path = getComponentFolderPath(testComponent)
    expect(path).toContain('one')
    expect(path).toContain('two')
    expect(path.length).toBe(2)
  })
})

describe('getRepeatIteratorNameAndKey', () => {
  it('returns the fallback as name and key', () => {
    const { iteratorName, iteratorKey } = getRepeatIteratorNameAndKey()
    expect(iteratorName).toBe('item')
    expect(iteratorKey).toBe('item')
  })

  it('returns the fallback as name and index as key', () => {
    const { iteratorName, iteratorKey } = getRepeatIteratorNameAndKey({
      useIndex: true,
    })
    expect(iteratorName).toBe('item')
    expect(iteratorKey).toBe('index')
  })

  it('returns the iteratorName as name and as key', () => {
    const { iteratorName, iteratorKey } = getRepeatIteratorNameAndKey({
      iteratorName: 'listItem',
    })
    expect(iteratorName).toBe('listItem')
    expect(iteratorKey).toBe('listItem')
  })

  it('returns the iteratorName as name and index as key', () => {
    const { iteratorName, iteratorKey } = getRepeatIteratorNameAndKey({
      iteratorName: 'listItem',
      useIndex: true,
    })
    expect(iteratorName).toBe('listItem')
    expect(iteratorKey).toBe('index')
  })

  it('returns the iteratorName as name and iteratorKey as key', () => {
    const { iteratorName, iteratorKey } = getRepeatIteratorNameAndKey({
      iteratorName: 'listItem',
      iteratorKey: 'listItem.id',
      useIndex: true,
    })
    expect(iteratorName).toBe('listItem')
    expect(iteratorKey).toBe('listItem.id')
  })

  it('returns the fallback iterator name as name and iteratorKey as key', () => {
    const { iteratorName, iteratorKey } = getRepeatIteratorNameAndKey({
      iteratorKey: 'item.id',
    })
    expect(iteratorName).toBe('item')
    expect(iteratorKey).toBe('item.id')
  })
})

describe('prefixAssetsPath', () => {
  it('returns the concatenated path and adds a slash', () => {
    expect(
      prefixAssetsPath('/kitten.png', {
        prefix: '/static',
        identifier: 'playground_assets',
        mappings: { 'kitten.png': '' },
      })
    ).toBe('/static/playground_assets/kitten.png')
  })

  it('returns the original string appended with custom path for the asset', () => {
    expect(
      prefixAssetsPath('/kitten.png', {
        prefix: '/no',
        identifier: 'identifier',
        mappings: { 'kitten.png': 'custom' },
      })
    ).toBe('/no/identifier/custom/kitten.png')
  })

  it('returns the original string appended with custom path for the asset without identifier', () => {
    expect(
      prefixAssetsPath('/kitten.png', {
        prefix: '/noidentifier',
        mappings: { 'kitten.png': 'custom' },
      })
    ).toBe('/noidentifier/custom/kitten.png')
  })

  it('returns the original string appended with prefix without identifier', () => {
    expect(
      prefixAssetsPath('/kitten.png', {
        prefix: '/noidentifier',
        mappings: { 'kitten.png': '' },
      })
    ).toBe('/noidentifier/kitten.png')
  })
})

const nodeToTraverse = elementNode(
  'container',
  {},
  [
    staticNode('static'),
    dynamicNode('prop', 'title'),
    elementNode(
      'container',
      {
        attr: staticNode('dummy-attr'),
      },
      [
        repeatNode(elementNode('container', {}, []), dynamicNode('prop', 'items')),
        conditionalNode(dynamicNode('state', 'visible'), elementNode('text', {}, []), true),
        slotNode(staticNode('fallback'), 'slot-1'),
      ]
    ),
  ],
  null,
  {
    margin: staticNode('10px'),
    height: dynamicNode('prop', 'height'),
  }
)

describe('traverseNodes', () => {
  it('counts the total number of nodes', () => {
    let counter = 0
    traverseNodes(nodeToTraverse, () => counter++)
    expect(counter).toBe(13)
  })
})

describe('traverseElements', () => {
  it('counts the number of element nodes', () => {
    let counter = 0
    traverseElements(nodeToTraverse, () => counter++)
    expect(counter).toBe(4)
  })
})

describe('traverseRepeats', () => {
  it('counts the number of repeat nodes', () => {
    let counter = 0
    traverseRepeats(nodeToTraverse, () => counter++)
    expect(counter).toBe(1)
  })
})

describe('createWebComponentFriendlyName', () => {
  it('creates a dash based component', () => {
    expect(createWebComponentFriendlyName('primaryButton')).toBe('primary-button')
  })

  it('prefixes with app-', () => {
    expect(createWebComponentFriendlyName('Component')).toBe('app-component')
  })
})

describe('splitDynamicAndStaticStyles', () => {
  it('Splits dynamic, static and token styles from a style object', () => {
    const style = {
      width: staticNode('100px'),
      height: staticNode('50px'),
      display: dynamicNode('prop', 'display'),
      color: dynamicNode('token', 'blue'),
    }

    const { staticStyles, dynamicStyles, tokenStyles } = splitDynamicAndStaticStyles(style)
    expect(Object.keys(staticStyles).length).toBe(2)
    expect(Object.keys(dynamicStyles).length).toBe(1)
    expect(Object.keys(tokenStyles).length).toBe(1)
  })
})

'''
'''--- packages/teleport-shared/package.json ---
{
  "name": "@teleporthq/teleport-shared",
  "version": "0.29.0",
  "description": "A utility belt for the entire teleportHQ ecosystem",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@babel/types": "^7.5.5",
    "@teleporthq/teleport-types": "^0.29.0",
    "jss": "^10.0.0",
    "jss-preset-default": "^10.0.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-shared/src/constants/index.ts ---
import { PrettierFormatOptions } from '@teleporthq/teleport-types'

export const ASSETS_IDENTIFIER = 'playground_assets'
export const PRETTIER_CONFIG: PrettierFormatOptions = {
  arrowParens: 'always',
  printWidth: 80,
  tabWidth: 2,
  useTabs: false,
  semi: false,
  singleQuote: true,
  trailingComma: 'es5',
  bracketSpacing: true,
}

'''
'''--- packages/teleport-shared/src/index.ts ---
import * as Constants from './constants'
import * as StringUtils from './utils/string-utils'
import * as UIDLUtils from './utils/uidl-utils'

export { Constants, StringUtils, UIDLUtils }

'''
'''--- packages/teleport-shared/src/utils/string-utils.ts ---
export const camelCaseToDashCase = (str: string): string =>
  str.replace(/([a-z])(?=[A-Z])|([A-Z0-9][A-Z])(?=[A-Z][a-z])/g, '$1$2-').toLowerCase()
export const dashCaseToCamelCase = (str: string): string =>
  str.replace(/[-_]+(.)?/g, (_, chr) => (chr ? chr.toUpperCase() : ''))

export const capitalize = (str: string): string => str[0].toUpperCase() + str.slice(1)

export const dashCaseToUpperCamelCase = (str: string) => capitalize(dashCaseToCamelCase(str))

export const removeIllegalCharacters = (str: string) => {
  if (typeof str !== 'string') {
    return null
  }

  return str
    .replace(/[^a-zA-Z0-9-_]/g, '') // Remove all non-alphanumeric characters except _ and -
    .replace(/^[0-9-_]*/, '') // Remove leading numbers
    .replace(/\-\-+/g, '-') // Replace multiple - with single -
    .replace(/^-+/, '') // Trim - from start of text
    .replace(/-+$/, '') // Trim - from end of text
}

export const slugify = (str: string): string => {
  if (str == null) {
    return null // Check for undefined or null
  }

  return str
    .toLowerCase()
    .replace(/\s+/g, '-') // Replace spaces with -
    .replace(/[^\w\-]+/g, '') // Remove all non-word chars
    .replace(/\-\-+/g, '-') // Replace multiple - with single -
    .replace(/^-+/, '') // Trim - from start of text
    .replace(/-+$/, '') // Trim - from end of text
    .replace(/&/g, '-and-') // Replace & with 'and'
}

export const addSpacesToEachLine = (spaces: string, str: string) => {
  // indent the first line
  const respaced = spaces + str
  // add indent to all the other lines
  return respaced.replace(/\n/g, `\n${spaces}`)
}

export const removeLastEmptyLine = (str: string) => {
  return str.replace(/\n$/g, '')
}

const encodingMap: Record<string, string> = {
  '&': '&amp;',
  '>': '&gt;',
  '<': '&lt;',
  '"': '&quot;',
  '{': '&#123;',
  '}': '&#125;',
  "'": '&apos;',
}

export const encode = (str: string) => {
  return str
    .split('')
    .map((char) => {
      const encodedChar = encodingMap[char]
      return encodedChar ? encodedChar : char
    })
    .join('')
}

export const generateRandomString = () => Math.random().toString(36).substring(2, 6)

export const generateCSSVariableName = (name: string): string => {
  return name.startsWith('--') ? camelCaseToDashCase(name) : camelCaseToDashCase(`--${name}`)
}

'''
'''--- packages/teleport-shared/src/utils/uidl-utils.ts ---
import {
  camelCaseToDashCase,
  removeIllegalCharacters,
  dashCaseToUpperCamelCase,
} from './string-utils'
import {
  ComponentUIDL,
  UIDLStyleDefinitions,
  UIDLConditionalNode,
  UIDLElement,
  UIDLNode,
  UIDLStaticValue,
  UIDLAttributeValue,
  UIDLDynamicReference,
  UIDLRepeatContent,
  UIDLRepeatMeta,
  UIDLElementNode,
  UIDLDependency,
  UIDLStyleValue,
  UIDLStyleSheetContent,
  UIDLComponentStyleReference,
  UIDLRootComponent,
  GeneratorOptions,
} from '@teleporthq/teleport-types'
import { basename } from 'path'

export const extractRoutes = (rootComponent: UIDLRootComponent) => {
  // Assuming root element starts with a UIDLElementNode
  const rootElement = rootComponent.node.content as UIDLElement

  // Look for conditional nodes in the first level children of the root element
  return rootElement.children.filter(
    (child) => child.type === 'conditional' && child.content.reference.content.id === 'route'
  ) as UIDLConditionalNode[]
}

export const createWebComponentFriendlyName = (componentName: string) => {
  const dashCaseName = camelCaseToDashCase(componentName)
  if (dashCaseName.includes('-')) {
    return dashCaseName
  }

  return `app-${dashCaseName}`
}

export const setFriendlyOutputOptions = (uidl: ComponentUIDL) => {
  uidl.outputOptions = uidl.outputOptions || {}
  const defaultComponentName = 'AppComponent'
  const friendlyName = removeIllegalCharacters(uidl.name) || defaultComponentName
  if (!uidl.outputOptions.fileName) {
    uidl.outputOptions.fileName = camelCaseToDashCase(friendlyName)
  }
  if (!uidl.outputOptions.componentClassName) {
    uidl.outputOptions.componentClassName = dashCaseToUpperCamelCase(friendlyName)
  }

  // failsafe for invalid UIDL samples with illegal characters as element names
  // when used in projects, resolveLocalDependencies should handle this
  traverseElements(uidl.node, (element) => {
    if (element.dependency) {
      element.semanticType = dashCaseToUpperCamelCase(
        removeIllegalCharacters(element.semanticType) || defaultComponentName
      )
    } else {
      element.semanticType = removeIllegalCharacters(element.semanticType)
    }
  })
}

export const getComponentFileName = (component: ComponentUIDL) => {
  return component.outputOptions && component.outputOptions.fileName
    ? component.outputOptions.fileName
    : camelCaseToDashCase(getComponentClassName(component))
}

export const getStyleFileName = (component: ComponentUIDL) => {
  const componentFileName = getComponentFileName(component)

  // If component meta style file name is not set, we default to the component file name
  return component.outputOptions && component.outputOptions.styleFileName
    ? component.outputOptions.styleFileName
    : componentFileName
}

export const getTemplateFileName = (component: ComponentUIDL) => {
  const componentFileName = getComponentFileName(component)

  // If component meta style file name is not set, we default to the component file name
  return component.outputOptions && component.outputOptions.templateFileName
    ? component.outputOptions.templateFileName
    : componentFileName
}

export const getComponentFolderPath = (component: ComponentUIDL) =>
  component.outputOptions && component.outputOptions.folderPath
    ? component.outputOptions.folderPath
    : []

export const getComponentClassName = (component: ComponentUIDL) => {
  const componentName =
    component.outputOptions && component.outputOptions.componentClassName
      ? component.outputOptions.componentClassName
      : component.name

  // Failsafe for angular modules and other places where component names are computed without passing through mapping
  // "Component" will not exist when generating a component because the resolver checks for illegal class names
  if (componentName === 'Component') {
    return 'AppComponent'
  }

  return componentName
}

export const getRepeatIteratorNameAndKey = (meta: UIDLRepeatMeta = {}) => {
  const iteratorName = meta.iteratorName || 'item'
  const iteratorKey = meta.iteratorKey || (meta.useIndex ? 'index' : iteratorName)
  return {
    iteratorKey,
    iteratorName,
  }
}

export const prefixAssetsPath = (
  originalString: string | undefined,
  assets: GeneratorOptions['assets'] = {}
) => {
  if (!originalString) {
    return originalString
  }

  if (!originalString.startsWith('/')) {
    return originalString
  }

  const { prefix, mappings = {}, identifier } = assets
  const assetName = basename(originalString)
  const decodedAssetName = decodeURIComponent(assetName)

  /*
    If the value is missing from the mapping, it means
     - asset is missing in the project packer
     - It's not a asset and so we don't need to provide any mapping for it

    Note: We need to check for decoded asset name as well as for some special characters such as katakana / kanjis / hiraganas
    the src / url leading to the asset can be encoded and we need to check the decoded version against the asset mapping
  */

  if (
    !(typeof mappings[assetName] === 'string') &&
    !(typeof mappings[decodedAssetName] === 'string')
  ) {
    return originalString
  }

  /*
    need to use either the original or decoded assetName to retrieve its mapping if there is one
  */

  const assetNameUsedForMapping =
    typeof mappings[assetName] === 'string' ? assetName : decodedAssetName

  /*
    If the value from the mapping is an empty string
    we need to not join it in the return path as it would append
    a wrong /
  */

  if (!mappings[assetNameUsedForMapping]) {
    if (!identifier) {
      return [prefix, assetName].join('/')
    }
    return [prefix, identifier, assetName].join('/')
  }

  if (!identifier) {
    return [prefix, mappings[assetNameUsedForMapping], assetName].join('/')
  }
  return [prefix, identifier, mappings[assetNameUsedForMapping], assetName].join('/')
}

// Clones existing objects while keeping the type cast
export const cloneObject = <T>(node: T): T => JSON.parse(JSON.stringify(node))

// This function parses all the UIDLNodes in a tree structure
// enabling a function to be applied to each individual node
export const traverseNodes = (
  node: UIDLNode | UIDLComponentStyleReference,
  fn: (node: UIDLNode | UIDLComponentStyleReference, parentNode: UIDLNode) => void,
  parent: UIDLNode | null = null
) => {
  fn(node, parent)

  switch (node.type) {
    case 'element':
      const { attrs, children, style, abilities, referencedStyles } = node.content
      if (attrs) {
        Object.keys(attrs).forEach((attrKey) => {
          traverseNodes(attrs[attrKey], fn, node)
        })
      }

      if (referencedStyles && Object.keys(referencedStyles).length > 0) {
        Object.values(referencedStyles).forEach((styleRef) => {
          if (styleRef.content.mapType === 'inlined') {
            traverseStyleObject(styleRef.content.styles)
          }
        })
      }

      if (style) {
        traverseStyleObject(style)
      }

      if (abilities?.link?.type === 'url') {
        traverseNodes(abilities?.link?.content?.url, fn, node)
      }

      if (children) {
        children.forEach((child) => {
          traverseNodes(child, fn, node)
        })
      }
      break

    case 'repeat':
      traverseNodes(node.content.node, fn, node)
      traverseNodes(node.content.dataSource, fn, node)
      break

    case 'conditional':
      traverseNodes(node.content.node, fn, node)
      traverseNodes(node.content.reference, fn, node)
      break

    case 'slot':
      if (node.content.fallback) {
        traverseNodes(node.content.fallback, fn, node)
      }
      break

    case 'static':
    case 'comp-style':
    case 'dynamic':
    case 'import':
    case 'raw':
    case 'inject':
      break

    default:
      throw new Error(
        `traverseNodes was given an unsupported node type ${JSON.stringify(node, null, 2)}`
      )
  }
}

const traverseStyleObject = (style: UIDLStyleDefinitions) => {
  Object.keys(style).forEach((styleKey) => {
    const styleValue = style[styleKey]
    // TODO: cross-check the support for the strings as content for styles
    if (styleValue.type !== 'static' && styleValue.type !== 'dynamic') {
      throw new Error(`We support only 'static' and 'dynamic' content for styles`)
    }
  })
}

// Parses a node structure recursively and applies a function to each UIDLElement instance
export const traverseElements = (node: UIDLNode, fn: (element: UIDLElement) => void) => {
  switch (node.type) {
    case 'element':
      fn(node.content)

      if (node.content.children) {
        node.content.children.forEach((child) => {
          traverseElements(child, fn)
        })
      }
      break

    case 'repeat':
      traverseElements(node.content.node, fn)
      break

    case 'conditional':
      traverseElements(node.content.node, fn)
      break

    case 'slot':
      if (node.content.fallback) {
        traverseElements(node.content.fallback, fn)
      }
      break

    case 'static':
    case 'dynamic':
    case 'inject':
    case 'raw':
      break

    default:
      throw new Error(
        `traverseElements was given an unsupported node type ${JSON.stringify(node, null, 2)}`
      )
  }
}

export const traverseRepeats = (node: UIDLNode, fn: (element: UIDLRepeatContent) => void) => {
  switch (node.type) {
    case 'element':
      if (node.content.children) {
        node.content.children.forEach((child) => {
          traverseRepeats(child, fn)
        })
      }

      break

    case 'repeat':
      fn(node.content)

      traverseRepeats(node.content.node, fn)
      break

    case 'conditional':
      traverseRepeats(node.content.node, fn)
      break

    case 'slot':
      if (node.content.fallback) {
        traverseRepeats(node.content.fallback, fn)
      }
      break

    case 'static':
    case 'dynamic':
    case 'raw':
    case 'inject':
      break

    default:
      throw new Error(
        `traverseRepeats was given an unsupported node type ${JSON.stringify(node, null, 2)}`
      )
  }
}

interface SplitResponse {
  staticStyles: UIDLStyleDefinitions
  dynamicStyles: UIDLStyleDefinitions
  tokenStyles: UIDLStyleDefinitions
}
export const splitDynamicAndStaticStyles = (
  style: UIDLStyleDefinitions | Record<string, UIDLStyleSheetContent>
): SplitResponse => {
  const responsePayload: SplitResponse = { staticStyles: {}, dynamicStyles: {}, tokenStyles: {} }

  Object.keys(style).reduce((acc: SplitResponse, styleKey) => {
    const styleValue = style[styleKey]
    const { staticStyles, dynamicStyles, tokenStyles } = acc

    switch (styleValue.type) {
      case 'dynamic':
        if (styleValue.content.referenceType === 'token') {
          tokenStyles[styleKey] = styleValue
          return acc
        }
        dynamicStyles[styleKey] = styleValue
        return acc

      case 'static':
        staticStyles[styleKey] = styleValue
        return acc

      default:
        throw new Error(
          `splitDynamicAndStaticStyles encountered an unknown style definition ${JSON.stringify(
            styleValue,
            null,
            2
          )}`
        )
    }
  }, responsePayload)

  return responsePayload
}

// removes all the dynamic styles from the style object, including the nested structures
export const cleanupDynamicStyles = (style: UIDLStyleDefinitions): UIDLStyleDefinitions => {
  return Object.keys(style).reduce((resultedStyles: UIDLStyleDefinitions, styleKey: string) => {
    const styleValue = style[styleKey]

    switch (styleValue.type) {
      case 'dynamic':
        return resultedStyles
      case 'static':
        resultedStyles[styleKey] = styleValue
        return resultedStyles
      default:
        throw new Error(
          `cleanupDynamicStyles encountered an unknown style definition ${JSON.stringify(
            styleValue,
            null,
            2
          )}`
        )
    }
  }, {})
}

// Traverses the style object and applies the convert funtion to all the dynamic styles
export const transformDynamicStyles = (
  style: UIDLStyleDefinitions,
  // tslint:disable-next-line no-any
  transform: (value: UIDLDynamicReference, key?: string) => any
  // tslint:disable-next-line no-any
): Record<string, any> => {
  return Object.keys(style).reduce((resultedStyles: Record<string, unknown>, styleKey) => {
    const styleValue = style[styleKey]

    switch (styleValue.type) {
      case 'dynamic':
        resultedStyles[styleKey] = transform(styleValue, styleKey)
        return resultedStyles
      case 'static':
        resultedStyles[styleKey] = styleValue.content
        return resultedStyles
      default:
        throw new Error(
          `transformDynamicStyles encountered an unknown style definition ${JSON.stringify(
            styleValue,
            null,
            2
          )}`
        )
    }
  }, {})
}

/**
 * Transform properties like
 * $props.something
 * $local.something
 * $state.something
 *
 * Into their json alternative which is used in beta release/0.6 and
 * later.
 */
export const transformStringAssignmentToJson = (
  declaration: string | number
): UIDLStaticValue | UIDLStyleValue => {
  if (typeof declaration === 'number') {
    return {
      type: 'static',
      content: declaration,
    }
  }

  const parts = declaration.split('.')
  const prefix = parts[0]
  const path = parts.slice(1).join('.')

  if (['$props', '$state', '$local'].indexOf(prefix) !== -1) {
    let referenceType: 'prop' | 'state' | 'local' = 'prop'
    if (prefix !== '$props') {
      referenceType = prefix.replace('$', '') as 'state' | 'local'
    }
    return {
      type: 'dynamic',
      content: {
        referenceType,
        id: path,
      },
    }
  }

  return {
    type: 'static',
    content: declaration,
  }
}

export const transformStylesAssignmentsToJson = (
  styleObject: Record<string, unknown>
): UIDLStyleDefinitions => {
  const newStyleObject: UIDLStyleDefinitions = {}

  Object.keys(styleObject).reduce((acc, key) => {
    const styleContentAtKey = styleObject[key]
    const entityType = typeof styleContentAtKey

    if (['string', 'number'].indexOf(entityType) !== -1) {
      acc[key] = transformStringAssignmentToJson(styleContentAtKey as string | number)
      return acc
    }

    if (!Array.isArray(styleContentAtKey) && entityType === 'object') {
      // if this value is already properly declared, make sure it is not
      const { type } = styleContentAtKey as Record<string, unknown>

      if (['dynamic', 'static'].indexOf(type as string) !== -1) {
        acc[key] = styleContentAtKey as UIDLStyleValue
        return acc
      }

      return acc
    }

    throw new Error(
      `transformStylesAssignmentsToJson encountered a style value that is not supported ${JSON.stringify(
        styleContentAtKey,
        null,
        2
      )}`
    )
  }, newStyleObject)

  return newStyleObject
}

export const transformAttributesAssignmentsToJson = (
  attributesObject: Record<string, unknown>
): Record<string, UIDLAttributeValue> => {
  const newStyleObject: Record<string, UIDLAttributeValue> = {}

  Object.keys(attributesObject).reduce((acc, key) => {
    const attributeContent = attributesObject[key]
    const entityType = typeof attributeContent

    if (['string', 'number'].indexOf(entityType) !== -1) {
      acc[key] = transformStringAssignmentToJson(
        attributeContent as string | number
      ) as UIDLAttributeValue
      return acc
    }

    if (!Array.isArray(attributeContent) && entityType === 'object') {
      // if this value is already properly declared, make sure it is not
      const { type } = attributeContent as Record<string, unknown>
      if (['dynamic', 'static', 'import', 'comp-style', 'raw'].indexOf(type as string) !== -1) {
        acc[key] = attributeContent as UIDLAttributeValue
        return acc
      }

      throw new Error(
        `transformAttributesAssignmentsToJson encountered a style value that is not supported ${JSON.stringify(
          attributeContent,
          null,
          2
        )}`
      )
    }

    throw new Error(
      `transformAttributesAssignmentsToJson encountered a style value that is not supported ${JSON.stringify(
        attributeContent,
        null,
        2
      )}`
    )
  }, newStyleObject)

  return newStyleObject
}

export const findFirstElementNode = (node: UIDLNode): UIDLElementNode => {
  switch (node.type) {
    case 'element':
      return node
    case 'static':
    case 'dynamic':
    case 'slot':
      throw new Error('UIDL does not have any element node')
    case 'conditional':
    case 'repeat':
      const childNode = node.content.node
      return findFirstElementNode(childNode)
    default:
      throw new Error(`Invalid node type '${node}'`)
  }
}

export const removeChildNodes = (
  node: UIDLNode,
  criteria: (element: UIDLNode) => boolean
): void => {
  switch (node.type) {
    case 'element':
      if (node.content.children) {
        // filter this level children
        node.content.children = node.content.children.filter((child) => !criteria(child))

        // call function recursively for remaining children
        node.content.children.forEach((child) => removeChildNodes(child, criteria))
      }

      break

    case 'repeat':
      removeChildNodes(node.content.node, criteria)
      break

    case 'conditional':
      removeChildNodes(node.content.node, criteria)
      break

    case 'slot':
      if (node.content.fallback) {
        removeChildNodes(node.content.fallback, criteria)
      }
      break

    case 'static':
    case 'dynamic':
    case 'raw':
    case 'inject':
      break

    default:
      throw new Error(
        `removeChildNodes was given an unsupported node type ${JSON.stringify(node, null, 2)}`
      )
  }
}

export const extractExternalDependencies = (dependencies: Record<string, UIDLDependency>) => {
  return Object.keys(dependencies)
    .filter((key) => {
      return dependencies[key].type === 'package'
    })
    .reduce((acc: Record<string, string>, key) => {
      const depInfo = dependencies[key]
      if (depInfo.path && depInfo.type === 'package') {
        acc[depInfo.path] = depInfo.version
      }

      return acc
    }, {})
}

'''
'''--- packages/teleport-shared/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-test/config.example.json ---
{
    "token": "<your-token-here>"
}
'''
'''--- packages/teleport-test/package.json ---
{
  "name": "teleport-test",
  "private": true,
  "version": "0.29.2",
  "description": "A private repo used for testing the entire ecosystem locally",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "lib/index.js",
  "types": "lib/index.d.ts",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "packer": "cross-env TS_NODE_FILES=true ts-node --project tsconfig.json ./src/packer.ts",
    "standalone": "cross-env TS_NODE_FILES=true ts-node --project tsconfig.json ./src/standalone.ts",
    "comp": "cross-env TS_NODE_FILES=true ts-node --project tsconfig.json ./src/component.ts",
    "bundle": "webpack --config webpack.config.js"
  },
  "dependencies": {
    "@teleporthq/teleport-code-generator": "^0.29.2",
    "@teleporthq/teleport-component-generator-html": "^0.29.2",
    "@teleporthq/teleport-project-generator-angular": "^0.29.2",
    "@teleporthq/teleport-project-generator-next": "^0.29.2",
    "@teleporthq/teleport-project-generator-nuxt": "^0.29.2",
    "@teleporthq/teleport-project-generator-react": "^0.29.2",
    "@teleporthq/teleport-project-generator-vue": "^0.29.2",
    "@teleporthq/teleport-project-packer": "^0.29.0",
    "@teleporthq/teleport-project-plugin-css-modules": "^0.29.0",
    "@teleporthq/teleport-project-plugin-react-jss": "^0.29.0",
    "@teleporthq/teleport-project-plugin-styled-components": "^0.29.2",
    "@teleporthq/teleport-project-plugin-tailwind": "^0.29.2",
    "@teleporthq/teleport-publisher-codesandbox": "^0.29.0",
    "@teleporthq/teleport-publisher-disk": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "devDependencies": {
    "cross-env": "^7.0.2",
    "html-webpack-plugin": "^5.3.2",
    "node-polyfill-webpack-plugin": "^1.1.4",
    "ts-node": "^8.6.2",
    "webpack": "^5.42.0",
    "webpack-bundle-analyzer": "^3.5.1",
    "webpack-cli": "^4.7.2",
    "webpack-dev-server": "^3.11.2"
  }
}

'''
'''--- packages/teleport-test/src/client.js ---
import { resolveUIDLElement } from '@teleporthq/teleport-uidl-resolver'
import { ProjectType, PublisherType } from '@teleporthq/teleport-types'
import uidl from '../../../examples/uidl-samples/component.json'
import projectUIDL from '../../../examples/uidl-samples/project.json'
import config from '../config.json'

const resolvedElement = resolveUIDLElement({ elementType: 'container' })
console.log(resolvedElement)

const run = async () => {
  import('./codegen').then((service) => {
    generate(service.default)
  })
}

const generate = async (service) => {
  console.log('service', service)
  const result = await service.generateComponent(uidl)
  console.log(result)
}

run()

window.deployToVercel = async () => {
  const packProject = await import('@teleporthq/teleport-code-generator').then((mod) => {
    return mod.packProject
  })
  if (!packProject) {
    throw new Error(`packProject is missing`)
  }
  console.log(packProject)
  const packerOptions = {
    publisher: PublisherType.VERCEL,
    projectType: ProjectType.REACT,
    publishOptions: {
      outputPath: 'dist',
      individualUpload: true,
      accessToken: config.token,
    },
    assets: [
      {
        content:
          'https://placekitten.com/500/300',
        name: 'kitten',
        location: 'remote',
      }
    ],
  }
  const result = await packProject(projectUIDL, packerOptions)
  console.log(result)
}
'''
'''--- packages/teleport-test/src/codegen.js ---
import { packProject, generateComponent } from '@teleporthq/teleport-code-generator'

const service = {
  packProject,
  generateComponent,
}

export default service

'''
'''--- packages/teleport-test/src/component.ts ---
import { createHTMLComponentGenerator } from '@teleporthq/teleport-component-generator-html'
import { createReactComponentGenerator } from '@teleporthq/teleport-component-generator-react'
import { createParseEmbedPlugin } from '@teleporthq/teleport-project-plugin-parse-embed'
// import { createVueComponentGenerator } from '@teleporthq/teleport-component-generator-vue'
import componentJSON from '../../../examples/uidl-samples/component.json'
import { component, dynamicNode, elementNode, staticNode } from '@teleporthq/teleport-uidl-builders'
import { GeneratedFile, ReactStyleVariation } from '@teleporthq/teleport-types'
import { writeFile } from 'fs'
import { join } from 'path'

const run = async () => {
  const generator = createHTMLComponentGenerator({
    plugins: [createParseEmbedPlugin({ projectType: 'html' })],
  })
  generator.addExternalComponents({
    externals: {
      sample: component(
        'Sample',
        elementNode(
          'container',
          {},
          [
            elementNode('html-node', {
              html: {
                type: 'raw',
                content:
                  "<blockquote class='twitter-tweet'><p lang='en' dir='ltr'>Feels like the last 20 mins of Don't Look Up right about now…</p>&mdash; Netflix (@netflix) <a href='https://twitter.com/netflix/status/1593420772948598784?ref_src=twsrc%5Etfw'>November 18, 2022</a></blockquote> <script src='https://platform.twitter.com/widgets.js'></script>",
              },
            }),
            elementNode('html-node', {
              html: {
                type: 'raw',
                content: "<p>Test<script>console.log('test')</script></p>",
              },
            }),
            staticNode('Hello'),
            dynamicNode('prop', 'heading'),
          ],
          null,
          {
            width: staticNode('100px'),
          }
        ),
        { heading: { type: 'string', defaultValue: 'TeleportHQ' } }
      ),
    },
  })

  const { files } = await generator.generateComponent(componentJSON)
  addfilesToDisk(files)

  const reactGenerator = createReactComponentGenerator({ variation: ReactStyleVariation.StyledJSX })
  const { files: embedFiles } = await reactGenerator.generateComponent(
    // component(
    //   'Test Code Embed Component',
    //   elementNode(
    //     'html-node',
    //     {
    //       html: {
    //         type: 'raw',
    //         content: `<script src'https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js'></script> <lottie-player src='https://assets6.lottiefiles.com/packages/lf20_gSMVZV7ZdZ.json'  background='transparent'  speed='1'  style='width: 300px; height: 300px;'  loop controls autoplay></lottie-player>`,
    //       },
    //       autoplay: {
    //         type: 'static',
    //         content: 'true',
    //       },
    //     },
    //     [],
    //     null,
    //     {
    //       width: staticNode('100px'),
    //       height: staticNode('100px'),
    //     }
    //   )
    // )
    componentJSON
  )
  addfilesToDisk(embedFiles)

  const { files: lottieFiles } = await reactGenerator.generateComponent(
    component(
      'Test Lottie React Component',
      elementNode(
        'lottie-node',
        {
          src: {
            type: 'static',
            content: 'https://assets9.lottiefiles.com/datafiles/gUENLc1262ccKIO/data.json',
          },
          autoplay: {
            type: 'static',
            content: 'true',
          },
          id: {
            type: 'static',
            content: 'node_id',
          },
        },
        [],
        null,
        {
          width: staticNode('100px'),
          height: staticNode('100px'),
        }
      )
    )
  )
  addfilesToDisk(lottieFiles)
}

const addfilesToDisk = (files: GeneratedFile[]) => {
  files.forEach((file) => {
    const filePath = join(__dirname, '../dist', `${file.name}.${file.fileType}`)

    writeFile(filePath, file.content, 'utf-8', (err) => {
      if (err) {
        throw err
      }
    })
  })
}

run()

'''
'''--- packages/teleport-test/src/constants.ts ---
export const GITHUB_TEMPLATE_OWNER = 'teleporthq'

export const REACT_GITHUB_PROJECT = 'teleport-project-template-react'

export const NEXT_GITHUB_PROJECT = 'teleport-project-template-next'

export const VUE_GITHUB_PROJECT = 'teleport-project-template-vue'

export const NUXT_GITHUB_PROJECT = 'teleport-project-template-nuxt'

export const ANGULAR_GITHUB_PROJECT = 'teleport-project-template-angular'

'''
'''--- packages/teleport-test/src/packer.ts ---
import { createProjectPacker } from '@teleporthq/teleport-project-packer'

import { createReactProjectGenerator } from '@teleporthq/teleport-project-generator-react'
import { createNextProjectGenerator } from '@teleporthq/teleport-project-generator-next'
import { createVueProjectGenerator } from '@teleporthq/teleport-project-generator-vue'
import { createNuxtProjectGenerator } from '@teleporthq/teleport-project-generator-nuxt'
import { createAngularProjectGenerator } from '@teleporthq/teleport-project-generator-angular'
import { createDiskPublisher } from '@teleporthq/teleport-publisher-disk'
import {
  RemoteTemplateDefinition,
  ProjectUIDL,
  ProjectGenerator,
  ReactStyleVariation,
} from '@teleporthq/teleport-types'

import config from '../config.json'

import {
  GITHUB_TEMPLATE_OWNER,
  REACT_GITHUB_PROJECT,
  NEXT_GITHUB_PROJECT,
  VUE_GITHUB_PROJECT,
  NUXT_GITHUB_PROJECT,
  ANGULAR_GITHUB_PROJECT,
} from './constants'

import projectUIDL from '../../../examples/uidl-samples/project.json'

const generators: Record<string, ProjectGenerator> = {
  react: createReactProjectGenerator(),
  next: createNextProjectGenerator(),
  vue: createVueProjectGenerator(),
  nuxt: createNuxtProjectGenerator(),
  angular: createAngularProjectGenerator(),
}

const getGithubRemoteDefinition = (username: string, repo: string): RemoteTemplateDefinition => {
  return { username, repo, provider: 'github' }
}

const templates: Record<string, RemoteTemplateDefinition> = {
  react: getGithubRemoteDefinition(GITHUB_TEMPLATE_OWNER, REACT_GITHUB_PROJECT),
  next: getGithubRemoteDefinition(GITHUB_TEMPLATE_OWNER, NEXT_GITHUB_PROJECT),
  vue: getGithubRemoteDefinition(GITHUB_TEMPLATE_OWNER, VUE_GITHUB_PROJECT),
  nuxt: getGithubRemoteDefinition(GITHUB_TEMPLATE_OWNER, NUXT_GITHUB_PROJECT),
  angular: getGithubRemoteDefinition(GITHUB_TEMPLATE_OWNER, ANGULAR_GITHUB_PROJECT),
}

const publisher = createDiskPublisher({
  outputPath: 'dist',
})

const packProject = async (projectType: string) => {
  const remoteTemplate = templates[projectType] as RemoteTemplateDefinition

  remoteTemplate.auth = {
    token: config.token,
  }

  const packer = createProjectPacker()
  packer.setPublisher(publisher)
  packer.setGenerator(generators[projectType])
  await packer.loadRemoteTemplate(remoteTemplate)

  const result = await packer.pack(projectUIDL as unknown as ProjectUIDL)

  console.info(projectType, ' - ', result)
}

const run = async () => {
  try {
    await packProject('react')
    await packProject('next')
    await packProject('vue')
    await packProject('nuxt')
    await packProject('angular')
  } catch (e) {
    console.info(e)
  }
}

run()

'''
'''--- packages/teleport-test/src/standalone.ts ---
import { readFileSync, mkdirSync, rmdirSync } from 'fs'
import { join } from 'path'
import chalk from 'chalk'
import { packProject } from '@teleporthq/teleport-code-generator'
import {
  ProjectUIDL,
  PackerOptions,
  ProjectType,
  PublisherType,
  ReactStyleVariation,
} from '@teleporthq/teleport-types'
import { performance } from 'perf_hooks'
import { ProjectPluginCSSModules } from '@teleporthq/teleport-project-plugin-css-modules'
import { ProjectPluginReactJSS } from '@teleporthq/teleport-project-plugin-react-jss'
import { ProjectPluginTailwind } from '@teleporthq/teleport-project-plugin-tailwind'
import { ProjectPluginStyledComponents } from '@teleporthq/teleport-project-plugin-styled-components'
import reactProjectJSON from '../../../examples/uidl-samples/react-project.json'
import projectJSON from '../../../examples/uidl-samples/project.json'
import tailwindProjectJSON from '../../../examples/uidl-samples/project-tailwind.json'
import { ProjectPluginParseEmbed } from '@teleporthq/teleport-project-plugin-parse-embed'
import { ProjectPluginExternalEmbed } from '@teleporthq/teleport-project-plugin-external-embed'

const projectUIDL = projectJSON as unknown as ProjectUIDL
const reactProjectUIDL = reactProjectJSON as unknown as ProjectUIDL
const tailwindProjectUIDL = tailwindProjectJSON as unknown as ProjectUIDL
const assetFile = readFileSync(join(__dirname, 'asset.png'))
const base64File = Buffer.from(assetFile).toString('base64')
const packerOptions: PackerOptions = {
  publisher: PublisherType.DISK,
  projectType: ProjectType.REACT,
  publishOptions: {
    outputPath: 'dist',
  },
  assets: [
    {
      fileType: 'png',
      name: 'icons-192',
      content: base64File,
      path: ['custom'],
    },
    {
      fileType: 'png',
      name: 'icons-512',
      content: base64File,
      contentEncoding: 'base64',
    },
    {
      content: 'https://placekitten.com/800/400',
      name: 'kitten.png',
      location: 'remote',
      path: ['one', 'two'],
    },
  ],
}

const log = async (cb: () => Promise<string>) => {
  const t1 = performance.now()
  const framework = await cb()
  const t2 = performance.now()

  const time = t2 - t1
  console.info(chalk.greenBright(`${framework} -  ${time.toFixed(2)}`))
}

const run = async () => {
  try {
    if (packerOptions.publisher === PublisherType.DISK) {
      rmdirSync('dist', { recursive: true })
      mkdirSync('dist')
    }

    let result

    /* Plain Html Generator */
    await log(async () => {
      result = await packProject(projectUIDL as unknown as ProjectUIDL, {
        ...packerOptions,
        projectType: ProjectType.HTML,
      })
      console.info(ProjectType.HTML, '-', result.payload)
      return ProjectType.HTML
    })

    /* Plain Html Generator with embed parser */
    await log(async () => {
      result = await packProject(projectUIDL as unknown as ProjectUIDL, {
        ...packerOptions,
        projectType: ProjectType.HTML,
        plugins: [new ProjectPluginParseEmbed()],
        publishOptions: {
          ...packerOptions.publishOptions,
          projectSlug: `teleport-project-html-embeds`,
        },
      })
      console.info(ProjectType.HTML, '-', result.payload)
      return `${ProjectType.HTML} - Parse Embeds`
    })

    /* Styled JSX */
    await log(async () => {
      result = await packProject(projectUIDL, {
        ...packerOptions,
        projectType: ProjectType.NEXT,
        plugins: [new ProjectPluginParseEmbed()],
        publishOptions: {
          ...packerOptions.publishOptions,
          projectSlug: `teleport-project-next-embeds`,
        },
      })
      console.info(ProjectType.NEXT, '-', result.payload)
      return `${ProjectType.NEXT} - Parse Embeds`
    })

    // /* Frameworks using Css-Modules */

    await log(async () => {
      result = await packProject(projectUIDL, {
        ...packerOptions,
        projectType: ProjectType.NEXT,
        plugins: [new ProjectPluginCSSModules({ framework: ProjectType.NEXT })],
        publishOptions: {
          ...packerOptions.publishOptions,
          projectSlug: 'teleport-project-next-css-modules',
        },
      })
      console.info(ProjectType.NEXT + '-' + ReactStyleVariation.CSSModules, '-', result.payload)
      return `Next - CSSModules`
    })

    /* Frameworks use CSS */

    await log(async () => {
      result = await packProject(projectUIDL, {
        ...packerOptions,
        projectType: ProjectType.REACT,
        plugins: [new ProjectPluginParseEmbed()],
      })
      console.info(ProjectType.REACT, '-', result.payload)
      return ProjectType.REACT
    })

    await log(async () => {
      result = await packProject(projectUIDL, {
        ...packerOptions,
        projectType: ProjectType.NUXT,
        plugins: [new ProjectPluginExternalEmbed()],
      })
      console.info(ProjectType.NUXT, '-', result.payload)
      return ProjectType.NUXT
    })

    await log(async () => {
      result = await packProject(projectUIDL, {
        ...packerOptions,
        projectType: ProjectType.VUE,
        plugins: [new ProjectPluginExternalEmbed()],
      })
      console.info(ProjectType.VUE, '-', result.payload)
      return ProjectType.VUE
    })

    await log(async () => {
      result = await packProject(projectUIDL, {
        ...packerOptions,
        projectType: ProjectType.ANGULAR,
        plugins: [new ProjectPluginExternalEmbed()],
      })
      console.info(ProjectType.ANGULAR, '-', result.payload)
      return ProjectType.ANGULAR
    })

    /* React JSS */
    await log(async () => {
      result = await packProject(projectUIDL, {
        ...packerOptions,
        projectType: ProjectType.NEXT,
        plugins: [new ProjectPluginReactJSS({ framework: ProjectType.NEXT })],
        publishOptions: {
          ...packerOptions.publishOptions,
          projectSlug: 'teleport-project-next-react-jss',
        },
      })
      console.info(ProjectType.NEXT + '-' + ReactStyleVariation.ReactJSS, '-', result.payload)
      return `NEXT - React-JSS`
    })

    /* Styled Components */
    await log(async () => {
      result = await packProject(reactProjectUIDL, {
        ...packerOptions,
        projectType: ProjectType.REACT,
        plugins: [new ProjectPluginStyledComponents({ framework: ProjectType.REACT })],
        publishOptions: {
          ...packerOptions.publishOptions,
          projectSlug: `teleport-project-react-styled-components`,
        },
      })
      return `React - StyledComponents`
    })

    await log(async () => {
      result = await packProject(projectUIDL, {
        ...packerOptions,
        projectType: ProjectType.NEXT,
        plugins: [new ProjectPluginStyledComponents({ framework: ProjectType.NEXT })],
        publishOptions: {
          ...packerOptions.publishOptions,
          projectSlug: 'teleport-project-next-styled-components',
        },
      })
      console.info(
        ProjectType.NEXT + '-' + ReactStyleVariation.StyledComponents,
        '-',
        result.payload
      )
      return `Next - StyledComponents`
    })

    /* Frameworks using default + tailwind ccss */

    await log(async () => {
      result = await packProject(tailwindProjectUIDL, {
        ...packerOptions,
        projectType: ProjectType.NEXT,
        plugins: [
          new ProjectPluginTailwind({
            framework: ProjectType.NEXT,
          }),
        ],
        publishOptions: {
          ...packerOptions.publishOptions,
          projectSlug: 'teleport-project-next-tailwind',
        },
      })

      console.info(ProjectType.NEXT, '+' + 'tailwind', '-', result.payload)
      return `Next - Tailwind`
    })

    await log(async () => {
      result = await packProject(tailwindProjectUIDL, {
        ...packerOptions,
        projectType: ProjectType.REACT,
        plugins: [
          new ProjectPluginTailwind({
            framework: ProjectType.REACT,
          }),
        ],
        publishOptions: {
          ...packerOptions.publishOptions,
          projectSlug: 'teleport-project-react-tailwind',
        },
      })

      console.info(ProjectType.REACT, '+' + 'tailwind', '-', result.payload)
      return `React - Tailwind`
    })

    await log(async () => {
      result = await packProject(tailwindProjectUIDL, {
        ...packerOptions,
        projectType: ProjectType.VUE,
        plugins: [
          new ProjectPluginExternalEmbed(),
          new ProjectPluginTailwind({
            framework: ProjectType.VUE,
          }),
        ],
        publishOptions: {
          ...packerOptions.publishOptions,
          projectSlug: 'teleport-project-vue-tailwind',
        },
      })

      console.info(ProjectType.VUE, '+' + 'tailwind', '-', result.payload)
      return `VUE - Tailwind`
    })

    await log(async () => {
      result = await packProject(tailwindProjectUIDL, {
        ...packerOptions,
        projectType: ProjectType.ANGULAR,
        plugins: [
          new ProjectPluginExternalEmbed(),
          new ProjectPluginTailwind({
            framework: ProjectType.ANGULAR,
          }),
        ],
        publishOptions: {
          ...packerOptions.publishOptions,
          projectSlug: 'teleport-project-angular-tailwind',
        },
      })

      console.info(ProjectType.ANGULAR, '+' + 'tailwind', '-', result.payload)
      return `Angular - Tailwind`
    })

    await log(async () => {
      result = await packProject(tailwindProjectUIDL, {
        ...packerOptions,
        projectType: ProjectType.NUXT,
        plugins: [
          new ProjectPluginExternalEmbed(),
          new ProjectPluginTailwind({
            framework: ProjectType.NUXT,
          }),
        ],
        publishOptions: {
          ...packerOptions.publishOptions,
          projectSlug: 'teleport-project-nuxt-tailwind',
        },
      })

      console.info(ProjectType.NUXT, '+' + 'tailwind', '-', result.payload)
      return `Nuxt - Tailwind`
    })

    await log(async () => {
      result = await packProject(tailwindProjectUIDL, {
        ...packerOptions,
        projectType: ProjectType.HTML,
        plugins: [
          new ProjectPluginParseEmbed(),
          new ProjectPluginTailwind({
            framework: ProjectType.HTML,
            path: [''],
          }),
        ],
        publishOptions: {
          ...packerOptions.publishOptions,
          projectSlug: 'teleport-project-html-tailwind',
        },
      })

      console.info(ProjectType.HTML, '+' + 'tailwind', '-', result.payload)
      return `Html - Tailwind`
    })
  } catch (e) {
    console.info(e)
  }
}

run()

'''
'''--- packages/teleport-test/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "module": "commonjs",
    "outDir": "lib"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-test/webpack.config.js ---
const path = require('path');
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;
const HTMLWebpackPlugin = require('html-webpack-plugin')
const NodePolyfillsPlugin = require('node-polyfill-webpack-plugin')

module.exports =  {
  devServer: {
    contentBase: path.resolve(__dirname, 'dist/webpack'),
  },
  entry: './src/client',
  output: {
    filename: 'bundled.js',
    path: path.resolve(__dirname, 'dist/webpack'),
  },
  resolve: {
    fallback: {
      fs: false,
    },
  },
  mode: 'production',
  plugins: [new NodePolyfillsPlugin(), new BundleAnalyzerPlugin(), new HTMLWebpackPlugin()],
  target: 'web',
  devtool: 'inline-source-map',
}

'''
'''--- packages/teleport-types/README.md ---
# teleport-types

The collection of reusable types across the entire teleport ecosystem.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-types
```
or
```bash
yarn add @teleporthq/teleport-types
```

'''
'''--- packages/teleport-types/package.json ---
{
  "name": "@teleporthq/teleport-types",
  "version": "0.29.0",
  "description": "The collection of reusable types across the entire teleport ecosystem",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-types/src/errors.ts ---
export class TeleportError extends Error {
  constructor(message: string) {
    super(message)
    this.name = this.constructor.name
  }
}

export class ComponentValidationError extends TeleportError {
  constructor(errorString: string) {
    super(errorString)
  }
}

export class ProjectValidationError extends TeleportError {
  constructor(errorString: string) {
    super(errorString)
  }
}

export class MissingProjectUIDLError extends TeleportError {
  constructor() {
    super('No project UIDL provided')
  }
}

export class MissingProjectGeneratorError extends TeleportError {
  constructor() {
    super('No generator provided')
  }
}

export class MissingComponentUIDLError extends TeleportError {
  constructor() {
    super('No component UIDL provided')
  }
}

export class InvalidProjectTypeError extends TeleportError {
  constructor(projectType: string) {
    super(`Invalid ProjectType: ${projectType}`)
  }
}

export class InvalidPublisherTypeError extends TeleportError {
  constructor(publisherType: string) {
    super(`Invalid PublisherType: ${publisherType}`)
  }
}

// CodeSandbox Integration

export class CodeSandboxProjectTooBigError extends TeleportError {
  constructor() {
    super('Unfortunately your project is too big for the current CodeSandbox integration')
  }
}

export class CodeSandboxUnexpectedError extends TeleportError {
  constructor(errorObj: Record<string, unknown>) {
    super(`Unexpected error when publishing to CodeSandbox\nReceived: ${JSON.stringify(errorObj)}`)
  }
}

export class CodeSandboxServerError extends TeleportError {
  constructor() {
    super('The request to CodeSandbox returned 500')
  }
}

// Vercel Integration

export class VercelMissingTokenError extends TeleportError {
  constructor() {
    super('No access token provided')
  }
}

export class VercelDeploymentError extends TeleportError {
  constructor() {
    super('The vercel deployment returned an ERROR status')
  }
}

export class VercelDeploymentTimeoutError extends TeleportError {
  constructor() {
    super('Vercel deployment timed out')
  }
}

export class VercelServerError extends TeleportError {
  constructor() {
    super('Vercel service is currently unavailable. Please try again later')
  }
}

// GitHub Integration

export class GithubMissingAuthError extends TeleportError {
  constructor() {
    super('No auth method provided')
  }
}

export class GithubMissingRepoError extends TeleportError {
  constructor() {
    super('No repository provided')
  }
}

export class GithubInvalidTokenError extends TeleportError {
  constructor() {
    super('The GitHub token you have provided is invalid')
  }
}

export class GithubUnexpectedError extends TeleportError {
  constructor(errorObj: Record<string, unknown>) {
    super(`Unexpected error when publishing to GitHub\nReceived: ${JSON.stringify(errorObj)}`)
  }
}

export class GithubServerError extends TeleportError {
  constructor() {
    super('GitHub service is currently unavailable. Please try again later')
  }
}

// Other publisher errors

export class ZipUnexpectedError extends TeleportError {
  constructor(errorObj: Record<string, unknown>) {
    super(`Unexpected error when creating the zip file\nReceived: ${JSON.stringify(errorObj)}`)
  }
}

export class DiskUnexpectedError extends TeleportError {
  constructor(errorObj: Record<string, unknown>) {
    super(
      `Unexpected error when writing the project to disk\nReceived: ${JSON.stringify(errorObj)}`
    )
  }
}

export class ParserError extends TeleportError {
  constructor(error: string) {
    super(error)
  }
}

// Plugin Errors
export class PluginStyledJSX extends TeleportError {
  constructor(error: string) {
    super(error)
  }
}

export class PluginCssModules extends TeleportError {
  constructor(error: string) {
    super(error)
  }
}

export class PluginCSS extends TeleportError {
  constructor(error: string) {
    super(error)
  }
}

export class PluginStyledComponent extends TeleportError {
  constructor(error: string) {
    super(error)
  }
}

export class PluginReactJSS extends TeleportError {
  constructor(error: string) {
    super(error)
  }
}

export class HTMLComponentGeneratorError extends TeleportError {
  constructor(error: string) {
    super(error)
  }
}

'''
'''--- packages/teleport-types/src/generators.ts ---
import {
  ComponentUIDL,
  ProjectUIDL,
  UIDLDependency,
  Mapping,
  UIDLElement,
  UIDLStyleSetDefinition,
  UIDLDesignTokens,
  UIDLRootComponent,
  UIDLRouteDefinitions,
} from './uidl'

export enum FileType {
  CSS = 'css',
  HTML = 'html',
  JS = 'js',
  JSON = 'json',
  VUE = 'vue',
  TS = 'ts',
  TSX = 'tsx',
}

export enum ChunkType {
  AST = 'ast',
  HAST = 'hast',
  STRING = 'string',
}

export type ChunkContent = string | unknown

/**
 * React could have one or more JS chunks, nothing else.
 * Vue has a template chunk, of type XML/HTML, a javascript
 * chunk and a style chunk
 */
export interface ChunkDefinition {
  type: ChunkType
  name: string
  fileType: FileType
  meta?: {
    nodesLookup?: {
      container?: Record<string, unknown>
    } & Record<string, unknown>
    dynamicRefPrefix?: Record<string, unknown>
  } & Record<string, unknown>
  content: ChunkContent
  linkAfter: string[]
}

/**
 * The structure of a component contains multiple chunks, and information
 * about how these chunks work together
 */
export interface ComponentStructure {
  chunks: ChunkDefinition[]
  uidl: ComponentUIDL | UIDLRootComponent
  options: GeneratorOptions
  dependencies: Record<string, UIDLDependency>
}

export type ComponentPlugin = (structure: ComponentStructure) => Promise<ComponentStructure>

export type InMemoryFileRecord = {
  path: string[]
  files: GeneratedFile[]
}

export interface ProjectPluginStructure {
  uidl: ProjectUIDL
  template: GeneratedFolder
  files: Map<string, InMemoryFileRecord>
  dependencies: Record<string, string>
  devDependencies: Record<string, string>
  strategy: ProjectStrategy
  rootFolder: GeneratedFolder
}

export interface ProjectPlugin {
  runBefore: (structure: ProjectPluginStructure) => Promise<ProjectPluginStructure>
  runAfter: (structure: ProjectPluginStructure) => Promise<ProjectPluginStructure>
}

export interface ComponentDefaultPluginParams {
  fileType: FileType
}

export type ComponentPluginFactory<T> = (
  configuration?: Partial<T & ComponentDefaultPluginParams>
) => ComponentPlugin

export interface CompiledComponent {
  files: GeneratedFile[]
  dependencies: Record<string, string>
}

export type PostProcessor = (codeChunks: Record<string, string>) => Record<string, string>

export interface ComponentGenerator {
  generateComponent: (
    input: ComponentUIDL | Record<string, unknown>,
    options?: GeneratorOptions
  ) => Promise<CompiledComponent>
  linkCodeChunks: (chunks: Record<string, ChunkDefinition[]>, fileName: string) => GeneratedFile[]
  resolveElement: (node: UIDLElement, options?: GeneratorOptions) => UIDLElement
  addPlugin: (plugin: ComponentPlugin) => void
  addMapping: (mapping: Mapping) => void
  addPostProcessor: (fn: PostProcessor) => void
}

export interface GeneratorOptions {
  localDependenciesPrefix?: string
  assets?: {
    prefix?: string
    identifier?: string | null
    mappings?: Record<string, string>
  }
  mapping?: Mapping
  skipValidation?: boolean
  isRootComponent?: boolean
  skipNavlinkResolver?: boolean
  projectRouteDefinition?: UIDLRouteDefinitions
  strategy?: ProjectStrategy
  moduleComponents?: Record<string, ComponentUIDL>
  projectStyleSet?: {
    styleSetDefinitions: Record<string, UIDLStyleSetDefinition>
    fileName: string
    path: string
    importFile?: boolean
  }
  designLanguage?: {
    tokens?: UIDLDesignTokens
  }
}

export type CodeGeneratorFunction<T> = (content: T) => string

export interface HastNode {
  type: string
  tagName: string
  properties: Record<string, string | boolean>
  children: Array<HastNode | HastText>
}

export interface HastText {
  type: string
  value: string
}

export interface ImportIdentifier {
  identifierName: string
  namedImport?: boolean
  originalName?: string
  importJustPath?: boolean
}

/* Project Types */

export interface ProjectGenerator {
  setAssets: (params: {
    mappings: Record<string, string>
    identifier?: string
    prefix?: string
  }) => void
  generateProject: (
    input: ProjectUIDL | Record<string, unknown>,
    template?: GeneratedFolder,
    mapping?: Mapping
  ) => Promise<GeneratedFolder>
  addMapping: (mapping: Mapping) => void
  getAssetsPath: () => string[]
  cleanPlugins: () => void
  addPlugin: (plugin: ProjectPlugin) => void
  getStrategy: () => ProjectStrategy
  updateStrategy: (strategy: ProjectStrategy) => void
}

export interface GeneratorFactoryParams {
  mappings?: Mapping[]
  plugins?: ComponentPlugin[]
  postprocessors?: PostProcessor[]
  variation?: StyleVariation
}

export type ComponentGeneratorInstance = (params?: GeneratorFactoryParams) => ComponentGenerator

export interface HTMLComponentGenerator extends ComponentGenerator {
  addExternalComponents: (params: {
    externals: Record<string, ComponentUIDL>
    skipValidation?: boolean
    assets?: GeneratorOptions['assets']
  }) => void
}
export type HTMLComponentGeneratorInstance = (
  params?: GeneratorFactoryParams
) => HTMLComponentGenerator

export interface ProjectStrategy {
  id: string
  style?: StyleVariation
  components: {
    generator: ComponentGeneratorInstance
    plugins?: ComponentPlugin[]
    postprocessors?: PostProcessor[]
    mappings?: Mapping[]
    module?: {
      generator: ComponentGeneratorInstance
      plugins?: ComponentPlugin[]
      postprocessors?: PostProcessor[]
      mappings?: Mapping[]
    }
    path: string[]
    options?: ProjectStrategyComponentOptions
  }
  pages: {
    generator: ComponentGeneratorInstance
    plugins?: ComponentPlugin[]
    postprocessors?: PostProcessor[]
    mappings?: Mapping[]
    module?: {
      generator: ComponentGeneratorInstance
      plugins?: ComponentPlugin[]
      postprocessors?: PostProcessor[]
      mappings?: Mapping[]
    }
    path: string[]
    options?: ProjectStrategyPageOptions
  }
  projectStyleSheet?: {
    generator: ComponentGeneratorInstance
    plugins?: ComponentPlugin[]
    postprocessors?: PostProcessor[]
    mappings?: Mapping[]
    path: string[]
    fileName: string
    importFile?: boolean
  }
  router?: {
    generator: ComponentGeneratorInstance
    plugins?: ComponentPlugin[]
    postprocessors?: PostProcessor[]
    mappings?: Mapping[]
    path: string[]
    fileName?: string
  }
  entry?: {
    postprocessors?: PostProcessor[]
    mappings?: Mapping[]
    path: string[]
    fileName?: string
    chunkGenerationFunction?: (
      uidl: ProjectUIDL,
      options: EntryFileOptions
    ) => Record<string, ChunkDefinition[]>
    options?: {
      appRootOverride?: string
      customTags?: CustomTag[]
      customHeadContent?: string
    }
  }
  static: {
    prefix?: string
    path: string[]
  }
  framework?: {
    config?: {
      fileName: string
      fileType: string
      path: string[]
      generator?: ComponentGeneratorInstance
      plugins?: ComponentPlugin[]
      postprocessors?: PostProcessor[]
      configContentGenerator?: (options: FrameWorkConfigOptions) => ConfigGeneratorResult
      isGlobalStylesDependent?: boolean
    }
    externalStyles?: {
      // All the css imports from importDefinitions are moved to the file in this destination
      fileName: string
      fileType: string
    }
    replace?: {
      fileName: string
      fileType: string
      path: string[]
      isGlobalStylesDependent?: boolean
      replaceFile: (
        files: GeneratedFolder,
        dependencies: Record<string, string>,
        fileName: string,
        fileType: string
      ) => { file: GeneratedFile; dependencies: Record<string, string> }
    }
  }
}

export interface ConfigGeneratorResult {
  chunks: Record<string, ChunkDefinition[]>
  dependencies: Record<string, string>
}

export interface FrameWorkConfigOptions {
  fileName: string
  fileType: string
  dependencies: Record<string, string>
  globalStyles?: {
    path: string
    sheetName: string
    isGlobalStylesDependent?: boolean
  }
}

export interface CustomTag {
  tagName: string
  targetTag: string
  content?: string
  attributes?: Attribute[]
}

export interface Attribute {
  attributeKey: string
  attributeValue?: string
}

export interface ProjectStrategyComponentOptions {
  createFolderForEachComponent?: boolean
  customComponentFileName?: (name?: string) => string // only used when createFolderForEachComponent is true
  customStyleFileName?: (name?: string) => string
  customTemplateFileName?: (name?: string) => string
}

export type ProjectStrategyPageOptions = ProjectStrategyComponentOptions & {
  useFileNameForNavigation?: boolean
}

export interface EntryFileOptions {
  assets?: GeneratorOptions['assets']
  appRootOverride?: string
  customTags?: CustomTag[]
  customHeadContent: string
}

export interface GeneratedFolder {
  name: string
  files: GeneratedFile[]
  subFolders: GeneratedFolder[]
}

export type FileLocation = 'remote' | 'project'
export type FileEncoding = 'base64' | 'utf8' | 'binary'

export interface GeneratedFile {
  name: string
  content: string
  contentEncoding?: FileEncoding
  fileType?: string
  location?: FileLocation
  status?: string
  path?: string[]
}

/**
 * Interfaces used in the publishers
 */
export type PublisherFactory<T, U> = (configuration?: Partial<T>) => U

export interface Publisher<T, U> {
  publish: (options?: T) => Promise<PublisherResponse<U>>
  getProject: () => GeneratedFolder | void
  setProject: (project: GeneratedFolder) => void
}

export interface PublisherFactoryParams {
  project?: GeneratedFolder
}
export interface PublisherResponse<T> {
  success: boolean
  payload?: T
}

export interface VercelDeployResponse {
  id: string
  url: string
  alias: string[]
  readyState?: string
}

export interface VercelDeleteProject {
  projectSlug: string
  accessToken: string
  teamId?: string
}

/**
 * Interfaces used in the packers
 */

export interface AssetsDefinition {
  assets: GeneratedFile[]
  path?: string[]
}

export interface RemoteTemplateDefinition {
  provider: 'github'
  owner: string
  repo: string
  auth?: ServiceAuth
}

export interface ServiceAuth {
  basic?: {
    username: string
    password: string
  }
  token?: string
}

export interface PrettierFormatOptions {
  printWidth?: number
  tabWidth?: number
  useTabs?: boolean
  semi?: boolean
  singleQuote?: boolean
  jsxSingleQuote?: boolean
  trailingComma?: 'none' | 'es5' | 'all'
  bracketSpacing?: boolean
  jsxBracketSameLine?: boolean
  arrowParens?: 'avoid' | 'always'
  rangeStart?: number
  rangeEnd?: number
}

// Generation and packing interfaces (previously in teleport-code-generator)

interface PublisherOptions {
  accessToken?: string
  outputPath?: string
  projectSlug?: string
  domainAlias?: string // used by the vercel publisher
  createProjectFolder?: boolean // used only by the disk publisher
}

interface GithubOptions {
  authMeta?: ServiceAuth
  repositoryOwner?: string
  repository?: string
  masterBranch?: string
  commitBranch?: string
  commitMessage?: string
}

interface VercelOptions {
  accessToken?: string
  projectSlug?: string
  domainAlias?: string // used by the Vercel publisher
  individualUpload?: boolean
  framework?: string
}

export interface PackerOptions {
  projectType: ProjectType
  publisher?: PublisherType
  publishOptions?: GithubOptions | VercelOptions | PublisherOptions
  assets?: GeneratedFile[]
  plugins?: ProjectPlugin[]
  assetsFolder?: string[]
}

export interface GenerateOptions {
  componentType?: ComponentType
  styleVariation?: StyleVariation
  plugins?: ComponentPlugin[]
}

export enum ReactStyleVariation {
  InlineStyles = 'Inline Styles',
  CSSModules = 'CSS Modules',
  CSS = 'CSS',
  StyledComponents = 'Styled Components',
  StyledJSX = 'Styled JSX',
  ReactJSS = 'React JSS',
}

export enum ReactNativeStyleVariation {
  InlineStyles = 'Inline Styles',
  StyledComponents = 'Styled Components',
}

export enum PublisherType {
  DISK = 'Disk',
  ZIP = 'Zip',
  VERCEL = 'Vercel',
  NETLIFY = 'Netlify',
  GITHUB = 'Github',
  CODESANDBOX = 'CodeSandbox',
}

export enum ProjectType {
  REACT = 'React',
  NEXT = 'Next',
  VUE = 'Vue',
  NUXT = 'Nuxt',
  ANGULAR = 'Angular',
  HTML = 'HTML',
}

export enum ComponentType {
  REACT = 'React',
  VUE = 'Vue',
  ANGULAR = 'Angular',
  HTML = 'HTML',
}

export const DefaultStyleVariation: Record<ComponentType, StyleVariation | null> = {
  [ComponentType.REACT]: ReactStyleVariation.CSSModules,
  [ComponentType.VUE]: null,
  [ComponentType.ANGULAR]: null,
  [ComponentType.HTML]: null,
}

export type StyleVariation = ReactStyleVariation | ReactNativeStyleVariation

// The last two types are used by the teleport-code-generator package

export type PackProjectFunction = (
  projectUIDL: ProjectUIDL,
  options: PackerOptions
) => Promise<PublisherResponse<unknown>>

export type GenerateComponentFunction = (
  componentUIDL: ComponentUIDL,
  options: GenerateOptions
) => Promise<CompiledComponent>

'''
'''--- packages/teleport-types/src/helper.ts ---
export type Modify<T, R> = Omit<T, keyof R> & R

'''
'''--- packages/teleport-types/src/index.ts ---
import * as UIDLTypes from './uidl'
import * as GeneratorTypes from './generators'
import * as Errors from './errors'
import * as VUIDLTypes from './vuidl'

export { UIDLTypes, GeneratorTypes, Errors, VUIDLTypes }

export * from './uidl'
export * from './generators'
export * from './errors'
export * from './vuidl'

'''
'''--- packages/teleport-types/src/uidl.ts ---
import { Modify } from './helper'

export type UIDLRootComponent = Modify<
  ComponentUIDL,
  {
    stateDefinitions: {
      route: UIDLRouteDefinitions
      [x: string]: UIDLStateDefinition
    }
  }
>

export interface UIDLRouteDefinitions {
  type: string
  defaultValue: string
  values: UIDLStateValueDetails[]
}
export interface ProjectUIDL {
  name: string
  globals: UIDLGlobalProjectValues
  root: UIDLRootComponent
  components?: Record<string, ComponentUIDL>
}

export interface UIDLGlobalProjectValues {
  settings: {
    title: string
    language: string
  }
  customCode?: {
    head?: string
    body?: string
  }
  meta: Array<Record<string, string>>
  assets: UIDLGlobalAsset[]
  manifest?: WebManifest
  variables?: Record<string, string>
}

export interface UIDLAssetBase {
  options?: {
    async?: boolean
    defer?: boolean
    target?: string
  }
}

export interface UIDLScriptInlineAsset extends UIDLAssetBase {
  type: 'script'
  content: string
}
export interface UIDLScriptExternalAsset extends UIDLAssetBase {
  type: 'script'
  path: string
}

export type UIDLScriptAsset = UIDLScriptExternalAsset | UIDLScriptInlineAsset

export interface UIDLStyleInlineAsset {
  type: 'style'
  content: string
  attrs?: Record<string, UIDLStaticValue>
}
export interface UIDLStyleExternalAsset {
  type: 'style'
  path: string
}

export type UIDLStyleAsset = UIDLStyleExternalAsset | UIDLStyleInlineAsset

export interface UIDLFontAsset {
  type: 'font'
  path: string
  attrs?: Record<string, UIDLStaticValue>
}
export interface UIDLCanonicalAsset {
  type: 'canonical'
  path: string
}
export interface UIDLIconAsset {
  type: 'icon'
  path: string
  options?: {
    iconType?: string
    iconSizes?: string
  }
}

export type UIDLGlobalAsset =
  | UIDLScriptAsset
  | UIDLStyleInlineAsset
  | UIDLStyleExternalAsset
  | UIDLFontAsset
  | UIDLCanonicalAsset
  | UIDLIconAsset

export interface ComponentUIDL {
  name: string
  node: UIDLElementNode
  styleSetDefinitions?: Record<string, UIDLStyleSetDefinition>
  propDefinitions?: Record<string, UIDLPropDefinition>
  importDefinitions?: Record<string, UIDLExternalDependency>
  peerDefinitions?: Record<string, UIDLPeerDependency>
  stateDefinitions?: Record<string, UIDLStateDefinition>
  outputOptions?: UIDLComponentOutputOptions
  designLanguage?: {
    tokens?: UIDLDesignTokens
  }
  seo?: UIDLComponentSEO
}

export type UIDLDesignTokens = Record<string, UIDLStaticValue>
export interface UIDLComponentOutputOptions {
  componentClassName?: string // needs to be a valid class name
  fileName?: string // needs to be a valid file name
  styleFileName?: string
  templateFileName?: string
  moduleName?: string
  folderPath?: string[]
}

export interface UIDLComponentSEO {
  title?: string
  metaTags?: UIDLMetaTag[]
  assets?: UIDLGlobalAsset[]
}

export type UIDLMetaTag = Record<string, string>

export interface UIDLPropDefinition {
  type: string
  defaultValue?: string | number | boolean | unknown[] | object | (() => void)
  isRequired?: boolean
  meta?: {
    target: 'style'
  }
}

export interface UIDLStateDefinition {
  type: string
  defaultValue: string | number | boolean | unknown[] | object | (() => void)
}

export interface UIDLStateValueDetails {
  value: string | number | boolean
  pageOptions?: UIDLPageOptions // Used when the StateDefinition is used as the router
  seo?: UIDLComponentSEO
}

export interface UIDLPageOptions {
  componentName?: string
  navLink?: string
  fileName?: string
  fallback?: boolean
}

export type ReferenceType = 'prop' | 'state' | 'local' | 'attr' | 'children' | 'token'

export interface UIDLDynamicReference {
  type: 'dynamic'
  content: {
    referenceType: ReferenceType
    id: string
  }
}

export interface UIDLStaticValue {
  type: 'static'
  content: string | number | boolean | unknown[] // unknown[] for data sources
}

export interface UIDLRawValue {
  type: 'raw'
  content: string
}

export interface UIDLInjectValue {
  type: 'inject'
  content: string
  dependency?: UIDLExternalDependency
}

export interface UIDLSlotNode {
  type: 'slot'
  content: {
    name?: string
    fallback?: UIDLElementNode | UIDLStaticValue | UIDLDynamicReference
  }
}

export interface UIDLNestedStyleDeclaration {
  type: 'nested-style'
  content: UIDLStyleDefinitions
}

export interface UIDLRepeatNode {
  type: 'repeat'
  content: UIDLRepeatContent
}

export interface UIDLRepeatContent {
  node: UIDLElementNode
  dataSource: UIDLAttributeValue
  meta?: UIDLRepeatMeta
}

export interface UIDLRepeatMeta {
  useIndex?: boolean
  iteratorName?: string
  dataSourceIdentifier?: string
  iteratorKey?: string
}

export interface UIDLConditionalNode {
  type: 'conditional'
  content: {
    node: UIDLNode
    reference: UIDLDynamicReference
    value?: string | number | boolean
    condition?: UIDLConditionalExpression
  }
}

export interface UIDLConditionalExpression {
  conditions: Array<{
    operation: string
    operand?: string | boolean | number
  }>
  matchingCriteria?: string
}

export interface UIDLElementNode {
  type: 'element'
  content: UIDLElement
}

export interface UIDLElement {
  elementType: string
  semanticType?: string
  name?: string
  key?: string // internal usage
  dependency?: UIDLDependency
  style?: UIDLStyleDefinitions
  attrs?: Record<string, UIDLAttributeValue>
  events?: UIDLEventDefinitions
  abilities?: {
    link?: UIDLLinkNode
    // In the future more element abilities can be added here
  }
  referencedStyles?: UIDLReferencedStyles
  children?: UIDLNode[]
  selfClosing?: boolean
  ignore?: boolean
}

export type UIDLNode =
  | UIDLDynamicReference
  | UIDLStaticValue
  | UIDLRawValue
  | UIDLInjectValue
  | UIDLRepeatNode
  | UIDLElementNode
  | UIDLConditionalNode
  | UIDLSlotNode
  | UIDLImportReference

export interface UIDLComponentStyleReference {
  type: 'comp-style'
  content: string
}

export type UIDLAttributeValue =
  | UIDLDynamicReference
  | UIDLStaticValue
  | UIDLImportReference
  | UIDLComponentStyleReference
  | UIDLRawValue

export type UIDLStyleValue = UIDLDynamicReference | UIDLStaticValue

export type UIDLStyleDefinitions = Record<string, UIDLStyleValue>

export type UIDLEventDefinitions = Record<string, UIDLEventHandlerStatement[]>

export interface UIDLImportReference {
  type: 'import'
  content: {
    id: string
  }
}

export interface UIDLURLLinkNode {
  type: 'url'
  content: {
    url: UIDLAttributeValue
    newTab: boolean
  }
}

export interface UIDLSectionLinkNode {
  type: 'section'
  content: { section: string }
}

export interface UIDLNavLinkNode {
  type: 'navlink'
  content: { routeName: string }
}
export interface UIDLMailLinkNode {
  type: 'mail'
  content: {
    mail: string
    subject?: string
    body?: string
  }
}
export interface UIDLPhoneLinkNode {
  type: 'phone'
  content: { phone: string }
}

export type UIDLLinkNode =
  | UIDLURLLinkNode
  | UIDLSectionLinkNode
  | UIDLNavLinkNode
  | UIDLMailLinkNode
  | UIDLPhoneLinkNode

export interface UIDLPropCallEvent {
  type: 'propCall'
  calls: string
  args?: Array<string | number | boolean>
}

export interface UIDLStateModifierEvent {
  type: 'stateChange'
  modifies: string
  newState: string | number | boolean
}

export type UIDLEventHandlerStatement = UIDLPropCallEvent | UIDLStateModifierEvent

export type UIDLDependency = UIDLLocalDependency | UIDLExternalDependency

export interface UIDLPeerDependency {
  type: 'package'
  path: string
  version: string
}

export interface UIDLLocalDependency {
  type: 'local'
  path?: string
  meta?: {
    namedImport?: boolean
    originalName?: string
    importJustPath?: boolean
    importAlias?: string
  }
}

export interface UIDLExternalDependency {
  type: 'library' | 'package'
  path: string
  version: string
  meta?: {
    namedImport?: boolean
    originalName?: string
    importJustPath?: boolean
    useAsReference?: boolean
    importAlias?: string
    needsWindowObject?: boolean
  }
}

export interface WebManifest {
  short_name?: string
  name?: string
  icons?: Array<{ src: string; type: string; sizes: string }>
  start_url?: string
  background_color?: string
  display?: string
  orientation?: string
  scope?: string
  theme_color?: string
}

export interface Mapping {
  elements?: Record<string, UIDLElement>
  events?: Record<string, string>
  attributes?: Record<string, string>
  illegalClassNames?: string[]
  illegalPropNames?: string[]
}

export type UIDLReferencedStyles = Record<string, UIDLElementNodeReferenceStyles>

export type UIDLElementNodeReferenceStyles =
  | UIDLElementNodeProjectReferencedStyle
  | UIDLElementNodeInlineReferencedStyle
  | UIDLElementNodeCompReferencedStyle

export type UIDLProjectReferencedStyleID = string

export interface UIDLElementNodeCompReferencedStyle {
  type: 'style-map'
  content: {
    mapType: 'component-referenced'
    content: UIDLStaticValue | UIDLCompDynamicReference
  }
}
export interface UIDLElementNodeProjectReferencedStyle {
  type: 'style-map'
  content: {
    mapType: 'project-referenced'
    referenceId: UIDLProjectReferencedStyleID
  }
}
export interface UIDLElementNodeInlineReferencedStyle {
  type: 'style-map'
  content: {
    mapType: 'inlined'
    conditions: UIDLStyleConditions[]
    styles: Record<string, UIDLStyleValue>
  }
}

export type UIDLCompDynamicReference = {
  type: 'dynamic'
  content: {
    referenceType: 'prop' | 'comp'
    id: string
  }
}

export type UIDLStyleConditions = UIDLStyleMediaQueryScreenSizeCondition | UIDLStyleStateCondition

export interface UIDLStyleMediaQueryScreenSizeCondition {
  conditionType: 'screen-size'
  minHeight?: number
  maxHeight?: number
  minWidth?: number
  maxWidth?: number
}

export interface UIDLStyleStateCondition {
  conditionType: 'element-state'
  content: UIDLElementStyleStates
}

export type UIDLElementStyleStates =
  | 'hover'
  | 'active'
  | 'focus'
  | 'focus-within'
  | 'focus-visible'
  | 'disabled'
  | 'visited'
  | 'checked'
  | 'link'

export interface UIDLStyleSetDefinition {
  type:
    | 'reusable-project-style-map'
    | 'reusable-component-style-map'
    | 'reusable-component-style-override'
  conditions?: UIDLStyleSetConditions[]
  content: Record<string, UIDLStyleSheetContent>
}

export type UIDLStyleSheetContent = UIDLStaticValue | UIDLStyleSetTokenReference

export interface UIDLStyleSetTokenReference {
  type: 'dynamic'
  content: {
    referenceType: 'token'
    id: string
  }
}

export type UIDLStyleSetConditions = UIDLStyleSetMediaCondition | UIDLStyleSetStateCondition

export interface UIDLStyleSetMediaCondition {
  type: 'screen-size'
  content: Record<string, UIDLStaticValue | UIDLStyleSetTokenReference>
  meta: {
    maxWidth: number
    minWidth?: number
    maxHeight?: number
    minHeight?: number
  }
}

export interface UIDLStyleSetStateCondition {
  type: 'element-state'
  meta: {
    state: UIDLElementStyleStates
  }
  content: Record<string, UIDLStaticValue | UIDLStyleSetTokenReference>
}

'''
'''--- packages/teleport-types/src/vuidl.ts ---
import {
  UIDLElement,
  UIDLElementNode,
  UIDLAttributeValue,
  ComponentUIDL,
  UIDLStaticValue,
  UIDLStyleSetDefinition,
  ProjectUIDL,
  UIDLSlotNode,
  UIDLDynamicReference,
  UIDLRawValue,
  UIDLRepeatNode,
  UIDLConditionalNode,
  UIDLRepeatMeta,
  UIDLConditionalExpression,
  UIDLElementNodeInlineReferencedStyle,
  UIDLStyleConditions,
  UIDLElementNodeProjectReferencedStyle,
  UIDLSectionLinkNode,
  UIDLURLLinkNode,
  UIDLNavLinkNode,
  UIDLMailLinkNode,
  UIDLPhoneLinkNode,
  UIDLStyleSetMediaCondition,
  UIDLStyleSetStateCondition,
  UIDLStyleSetTokenReference,
  UIDLElementNodeCompReferencedStyle,
  UIDLCompDynamicReference,
  UIDLStyleInlineAsset,
  UIDLFontAsset,
  UIDLComponentSEO,
  UIDLGlobalProjectValues,
  UIDLScriptAsset,
  UIDLStyleExternalAsset,
  UIDLCanonicalAsset,
  UIDLIconAsset,
  UIDLRootComponent,
  UIDLInjectValue,
  UIDLStateValueDetails,
  UIDLRouteDefinitions,
  UIDLStateDefinition,
} from './uidl'
import { Modify } from './helper'

export interface VUIDLElementNode extends Modify<UIDLElementNode, { content: VUIDLElement }> {}

export type VUIDLConditionalNode = Modify<
  UIDLConditionalNode,
  {
    content: {
      node: VUIDLNode
      reference: UIDLDynamicReference
      value?: string | number | boolean
      condition?: UIDLConditionalExpression
    }
  }
>

export type VUIDLRepeatNode = Modify<
  UIDLRepeatNode,
  {
    content: {
      node: VUIDLElementNode
      dataSource?: UIDLAttributeValue
      meta?: UIDLRepeatMeta
    }
  }
>

export type VUIDLNode =
  | UIDLDynamicReference
  | UIDLStaticValue
  | UIDLRawValue
  | VUIDLElementNode
  | VUIDLRepeatNode
  | VUIDLConditionalNode
  | VUIDLSlotNode
  | UIDLInjectValue
  | string

export type VUIDLElement = Modify<
  UIDLElement,
  {
    abilities?: {
      link?: VUIDLLinkNode
    }
    children?: VUIDLNode[]
    style?: Record<string, UIDLAttributeValue | string | number>
    attrs?: Record<string, UIDLAttributeValue | string | number>
    referencedStyles: Record<
      string,
      | UIDLElementNodeProjectReferencedStyle
      | VUIDLElementNodeInlineReferencedStyle
      | VUIDLElementNodeClassReferencedStyle
    >
  }
>

export type VUIDLElementNodeInlineReferencedStyle = Modify<
  UIDLElementNodeInlineReferencedStyle,
  {
    content: {
      mapType: 'inlined'
      conditions: UIDLStyleConditions[]
      styles: Record<string, UIDLAttributeValue | string | number>
    }
  }
>

export type VUIDLElementNodeClassReferencedStyle = Modify<
  UIDLElementNodeCompReferencedStyle,
  {
    content: {
      mapType: 'component-referenced'
      content: string | UIDLStaticValue | UIDLCompDynamicReference
    }
  }
>

export type VUIDLStyleSetDefnition = Modify<
  UIDLStyleSetDefinition,
  {
    conditions?: VUIDLStyleSetConditions[]
    content: Record<string, UIDLStaticValue | string | number | UIDLStyleSetTokenReference>
  }
>

export type VUIDLDesignTokens = Record<string, UIDLStaticValue | string | number>

export type VRootComponentUIDL = Modify<
  UIDLRootComponent,
  {
    seo?: VUIDLComponentSEO
    styleSetDefinitions: Record<string, VUIDLStyleSetDefnition>
    node: VUIDLElementNode
    stateDefinitions: {
      route: Modify<
        UIDLRouteDefinitions,
        {
          values: VUIDLStateValueDetails[]
        }
      >
      [x: string]: UIDLStateDefinition
    }
    designLanguage: {
      tokens: VUIDLDesignTokens
    }
  }
>

export type VComponentUIDL = Modify<
  Omit<ComponentUIDL, 'designLanguage'>,
  {
    seo?: VUIDLComponentSEO
    node: VUIDLElementNode
    styleSetDefinitions: Record<string, VUIDLStyleSetDefnition>
  }
>

export type VProjectUIDL = Modify<
  ProjectUIDL,
  {
    globals: VUIDLGlobalProjectValues
    root: VRootComponentUIDL
    components?: Record<string, VComponentUIDL>
  }
>

export type VUIDLSlotNode = Modify<
  UIDLSlotNode,
  {
    content:
      | {
          name?: string
          fallback?: VUIDLElementNode | UIDLStaticValue | UIDLDynamicReference
        }
      | {}
  }
>

export type VUIDLSectionLinkNode = Modify<
  UIDLSectionLinkNode,
  {
    content: Record<string, string>
  }
>

export type VUIDLURLLinkNode = Modify<
  UIDLURLLinkNode,
  {
    content: {
      url: UIDLAttributeValue | string
      newTab: boolean
    }
  }
>

export type VUIDLStyleSetMediaCondition = Modify<
  UIDLStyleSetMediaCondition,
  {
    content: Record<string, UIDLStaticValue | string | number | UIDLStyleSetTokenReference>
  }
>

export type VUIDLStyleSetStateCondition = Modify<
  UIDLStyleSetStateCondition,
  {
    content: Record<string, UIDLStaticValue | string | number | UIDLStyleSetTokenReference>
  }
>

export type VUIDLStyleSetConditions = VUIDLStyleSetMediaCondition | VUIDLStyleSetStateCondition

export type VUIDLLinkNode =
  | VUIDLURLLinkNode
  | VUIDLSectionLinkNode
  | UIDLNavLinkNode
  | UIDLMailLinkNode
  | UIDLPhoneLinkNode

export type VUIDLGlobalAsset =
  | UIDLScriptAsset
  | UIDLStyleExternalAsset
  | UIDLCanonicalAsset
  | UIDLIconAsset
  | VUIDLStyleInlineAsset
  | VUIDLFontAsset

export type VUIDLStyleInlineAsset = Modify<
  UIDLStyleInlineAsset,
  {
    attrs?: Record<string, UIDLStaticValue | string | boolean | number>
  }
>

export type VUIDLFontAsset = Modify<
  UIDLFontAsset,
  {
    attrs?: Record<string, UIDLStaticValue | string | boolean | number>
  }
>

export type VUIDLComponentSEO = Modify<
  UIDLComponentSEO,
  {
    assets?: VUIDLGlobalAsset[]
  }
>

export type VUIDLGlobalProjectValues = Modify<
  UIDLGlobalProjectValues,
  {
    assets: VUIDLGlobalAsset[]
  }
>

export type VUIDLStateValueDetails = Modify<
  UIDLStateValueDetails,
  {
    seo?: VUIDLComponentSEO
  }
>

'''
'''--- packages/teleport-types/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-uidl-builders/README.md ---
# teleport-uidl-builders

A set of functions used for constructing UIDL structures.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-uidl-builders
```
or
```bash
yarn add @teleporthq/teleport-uidl-builders
```

'''
'''--- packages/teleport-uidl-builders/__tests__/component-builders.ts ---
import {
  component,
  definition,
  elementNode,
  staticNode,
  dynamicNode,
  repeatNode,
  conditionalNode,
} from '../src/component-builders'
import { UIDLStaticValue, UIDLElement, UIDLDynamicReference } from '@teleporthq/teleport-types'

describe('UIDL Builders', () => {
  describe('component', () => {
    const dummyNode: UIDLStaticValue = { type: 'static', content: 'test' }

    it('returns a new ComponentUIDL object', () => {
      const testComponent = component('uidl-test', dummyNode)

      expect(testComponent.name).toBe('uidl-test')
      expect(testComponent.node.content).toBe('test')
    })

    it('adds prop and state definitions', () => {
      const testComponent = component(
        'uidl-test',
        dummyNode,
        {
          'test-prop': definition('string', 'empty-string'),
        },
        {
          'test-state': definition('boolean', false),
        }
      )

      expect(testComponent.name).toBe('uidl-test')
      expect(testComponent.node.content).toBe('test')
      expect(testComponent.propDefinitions['test-prop'].defaultValue).toBe('empty-string')
      expect(testComponent.stateDefinitions['test-state'].defaultValue).toBe(false)
    })
  })

  describe('elementNode', () => {
    it('returns a new UIDLElement node', () => {
      const element = elementNode('div', {
        test: staticNode('test-value'),
      })

      expect(element.type).toBe('element')
      expect(element.content.attrs.test.content).toBe('test-value')
    })

    it('adds children inside the root node', () => {
      const element = elementNode('div', {}, [elementNode('span', {})])

      expect(element.type).toBe('element')
      expect(element.content.children[0].type).toBe('element')
    })

    it('adds dependencies', () => {
      const dependency = {
        type: 'package',
        path: 'npm-dependency',
      }

      const element = elementNode('div', {}, [elementNode('span', {})], dependency)

      expect(element.content.dependency.type).toBe('package')
      expect(element.content.dependency.path).toBe('npm-dependency')
    })

    it('adds style', () => {
      const element = elementNode('div', {}, [elementNode('span', {})], null, {
        height: staticNode('100px'),
      })

      expect(element.content.style.height.content).toBe('100px')
    })
  })

  describe('dynamic node', () => {
    it('returns a dynamic node', () => {
      const node = dynamicNode('prop', 'title')

      expect(node.content.id).toBe('title')
      expect(node.content.referenceType).toBe('prop')
    })
  })

  describe('conditional node', () => {
    it('returns a conditional node', () => {
      const node = conditionalNode(dynamicNode('state', 'isVisible'), elementNode('div'), true)

      expect(node.content.value).toBe(true)
      expect((node.content.node.content as UIDLElement).elementType).toBe('div')
      expect(node.content.reference.content.id).toBe('isVisible')
    })
  })

  describe('repeat node', () => {
    it('returns a repeat node', () => {
      const node = repeatNode(elementNode('div'), dynamicNode('prop', 'items'), {
        useIndex: true,
      })

      expect((node.content.dataSource as UIDLDynamicReference).content.id).toBe('items')
      expect((node.content.node.content as UIDLElement).elementType).toBe('div')
      expect(node.content.meta.useIndex).toBe(true)
    })
  })
})

'''
'''--- packages/teleport-uidl-builders/__tests__/project-builders.ts ---
import { component } from '../src/component-builders'
import { ProjectUIDL, ComponentUIDL, UIDLStaticValue } from '@teleporthq/teleport-types'
import { project, simpleProjectGlobals } from '../src/project-builders'

describe('Project Builders', () => {
  const dummyNode: UIDLStaticValue = { type: 'static', content: 'test' }
  const dummyRootComponent: ComponentUIDL = component('component-root-test', dummyNode)
  const dummyComponent: ComponentUIDL = component('component-test', dummyNode)

  it('returns a new simpleProjectGlobals object', () => {
    const testProjectGlobals = simpleProjectGlobals('test-globals')

    expect(testProjectGlobals.settings.title).toBe('test-globals')
    expect(testProjectGlobals.settings.language).toBe('en')
  })

  it('returns a new ProjectUIDL object', () => {
    const testProjectUIDL: ProjectUIDL = project(
      'project-uidl-test',
      dummyRootComponent,
      [dummyComponent],
      simpleProjectGlobals('test-globals')
    )

    expect(testProjectUIDL.name).toBe('project-uidl-test')
    expect(testProjectUIDL.root.name).toBe('component-root-test')
  })
})

'''
'''--- packages/teleport-uidl-builders/package.json ---
{
  "name": "@teleporthq/teleport-uidl-builders",
  "version": "0.29.0",
  "description": "A set of functions used for constructing UIDL structures",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-uidl-builders/src/component-builders.ts ---
import {
  ComponentUIDL,
  ReferenceType,
  UIDLDependency,
  UIDLNode,
  UIDLSlotNode,
  UIDLStyleValue,
  UIDLRepeatNode,
  UIDLElementNode,
  UIDLStaticValue,
  UIDLAttributeValue,
  UIDLPropDefinition,
  UIDLStateDefinition,
  UIDLConditionalNode,
  UIDLDynamicReference,
  UIDLEventDefinitions,
  UIDLRawValue,
  UIDLReferencedStyles,
  UIDLElement,
} from '@teleporthq/teleport-types'

export const component = (
  name: string,
  node: UIDLElementNode,
  propDefinitions?: Record<string, UIDLPropDefinition>,
  stateDefinitions?: Record<string, UIDLStateDefinition>
): ComponentUIDL => {
  return {
    name,
    node,
    stateDefinitions,
    propDefinitions,
  }
}

export const definition = (
  type: string,
  defaultValue: string | number | boolean | unknown[] | object
) => {
  return {
    type,
    defaultValue,
  }
}

export const elementNode = (
  elementType: string,
  attrs?: Record<string, UIDLAttributeValue>,
  children?: UIDLNode[],
  dependency?: UIDLDependency,
  style?: Record<string, UIDLStyleValue>,
  events?: UIDLEventDefinitions,
  referencedStyles?: UIDLReferencedStyles
): UIDLElementNode => {
  return {
    type: 'element',
    content: element(elementType, attrs, children, dependency, events, style, referencedStyles),
  }
}

export const element = (
  elementType: string,
  attrs?: Record<string, UIDLAttributeValue>,
  children?: UIDLNode[],
  dependency?: UIDLDependency,
  events?: UIDLEventDefinitions,
  style?: Record<string, UIDLStyleValue>,
  referencedStyles?: UIDLReferencedStyles
) => {
  const elementObj: UIDLElement = {
    key: elementType,
    elementType,
    name: elementType,
    children,
  }

  if (attrs) {
    elementObj.attrs = attrs
  }

  if (events) {
    elementObj.events = events
  }

  if (dependency) {
    elementObj.elementType = 'component'
    elementObj.semanticType = elementType
    elementObj.dependency = dependency
  }

  if (style) {
    elementObj.style = style
  }

  if (referencedStyles) {
    elementObj.referencedStyles = referencedStyles
  }

  return elementObj
}

export const componentDependency = (
  type: 'library' | 'package' | 'local',
  path?: string,
  version?: string,
  meta?: Record<string, string | boolean>
): UIDLDependency => {
  return {
    type,
    path,
    version,
    meta,
  }
}

export const staticNode = (content: string | boolean | number): UIDLStaticValue => {
  return {
    type: 'static',
    content,
  }
}

export const dynamicNode = (referenceType: ReferenceType, id: string): UIDLDynamicReference => {
  return {
    type: 'dynamic',
    content: {
      referenceType,
      id,
    },
  }
}

export const slotNode = (
  fallback?: UIDLElementNode | UIDLStaticValue | UIDLDynamicReference,
  name?: string
): UIDLSlotNode => {
  return {
    type: 'slot',
    content: {
      fallback,
      name,
    },
  }
}

export const conditionalNode = (
  reference: UIDLDynamicReference,
  node: UIDLNode,
  value: string | number | boolean
): UIDLConditionalNode => {
  return {
    type: 'conditional',
    content: {
      reference,
      node,
      value,
    },
  }
}

export const repeatNode = (
  node: UIDLElementNode,
  dataSource: UIDLAttributeValue,
  meta?: Record<string, unknown>
): UIDLRepeatNode => {
  return {
    type: 'repeat',
    content: {
      node,
      dataSource,
      meta,
    },
  }
}

export const rawNode = (content: string): UIDLRawValue => {
  return {
    type: 'raw',
    content,
  }
}

'''
'''--- packages/teleport-uidl-builders/src/index.ts ---
export * from './project-builders'
export * from './component-builders'

'''
'''--- packages/teleport-uidl-builders/src/project-builders.ts ---
import {
  ComponentUIDL,
  ProjectUIDL,
  UIDLGlobalAsset,
  WebManifest,
  UIDLGlobalProjectValues,
  UIDLRootComponent,
} from '@teleporthq/teleport-types'

export const project = (
  name: string,
  root: UIDLRootComponent,
  components: ComponentUIDL[],
  globals?: {
    settings: {
      title: string
      language: string
    }
    meta: Array<Record<string, string>>
    assets: UIDLGlobalAsset[]
    manifest?: WebManifest
    variables?: Record<string, string>
  }
): ProjectUIDL => {
  return {
    name,
    root,
    components: UIDLArrayToRecord(components),
    globals: globals || simpleProjectGlobals(),
  }
}

export const UIDLArrayToRecord = (array: ComponentUIDL[]): Record<string, ComponentUIDL> => {
  const record: Record<string, ComponentUIDL> = {}
  array.forEach((element) => {
    record[element.name] = element
  })

  return record
}

export const simpleProjectGlobals = (
  title: string = 'My teleport project'
): UIDLGlobalProjectValues => {
  return {
    settings: {
      title,
      language: 'en',
    },
    assets: [],
    meta: [],
  }
}

export const explicitProjectGlobals = (
  title: string,
  language: string,
  meta: Array<Record<string, string>>,
  assets: UIDLGlobalAsset[],
  manifest?: WebManifest
) => {
  return {
    settings: {
      title,
      language,
    },
    assets,
    meta,
    manifest,
  }
}

export const socialMediaMeta = (property: string, content: string) => {
  return {
    property,
    content,
  }
}

export const metaTag = (name: string, content: string) => {
  return {
    name,
    content,
  }
}

export const projectMeta = (meta: Array<Record<string, string>>) => {
  return meta
}

export const manifestIcon = (src: string, type: string, sizes: string) => {
  return {
    src,
    type,
    sizes,
  }
}

export const projectAssetPath = (type: string, path?: string, meta?: Record<string, string>) => {
  return {
    type,
    path,
    meta,
  }
}

export const projectAssetContent = (
  type: string,
  content?: string,
  meta?: Record<string, string>
) => {
  return {
    type,
    content,
    meta,
  }
}

export const projectAssets = (assets: UIDLGlobalAsset[]) => {
  return assets
}

'''
'''--- packages/teleport-uidl-builders/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-uidl-resolver/README.md ---
# teleport-uidl-resolver

A small package that handles the transition from UIDL to HTML elements and has support for custom mappings.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-uidl-resolver
```
or
```bash
yarn add @teleporthq/teleport-uidl-resolver
```

'''
'''--- packages/teleport-uidl-resolver/__tests__/abilities/mocks.ts ---
import {
  UIDLNavLinkNode,
  UIDLURLLinkNode,
  UIDLMailLinkNode,
  UIDLPhoneLinkNode,
  UIDLSectionLinkNode,
} from '@teleporthq/teleport-types'
import { staticNode } from '@teleporthq/teleport-uidl-builders'

export const urlMockedDefinition = (openInNewTab: boolean = false): UIDLURLLinkNode => ({
  type: 'url',
  content: {
    url: staticNode('https://teleporthq.io'),
    newTab: openInNewTab,
  },
})

export const navlinkMockedDefinition = (): UIDLNavLinkNode => ({
  type: 'navlink',
  content: {
    routeName: 'home',
  },
})

export const phoneMockedDefinition = (): UIDLPhoneLinkNode => ({
  type: 'phone',
  content: {
    phone: '091837864834',
  },
})

export const sectionMockedDefinition = (): UIDLSectionLinkNode => ({
  type: 'section',
  content: {
    section: 'contact',
  },
})

export const mailMockedDefinition = (): UIDLMailLinkNode => ({
  type: 'mail',
  content: {
    mail: 'test@teleporthq.io',
    subject: 'Hello',
    body: "Is it me you're looking for?",
  },
})

'''
'''--- packages/teleport-uidl-resolver/__tests__/abilities/utils.ts ---
import { insertLinks, createLinkNode } from '../../src/resolvers/abilities/utils'
import { elementNode } from '@teleporthq/teleport-uidl-builders'
import {
  urlMockedDefinition,
  navlinkMockedDefinition,
  phoneMockedDefinition,
  mailMockedDefinition,
  sectionMockedDefinition,
} from './mocks'
import { UIDLElementNode, UIDLURLLinkNode } from '@teleporthq/teleport-types'

describe('insertLink', () => {
  it('wraps a simple element', () => {
    const node = elementNode('container')
    const link = urlMockedDefinition() as UIDLURLLinkNode
    node.content.abilities = { link }

    const result = insertLinks(node, {}, false)
    expect(result.content.elementType).toBe('link')
    expect(result.content.attrs.url.content).toBe(link.content.url.content)
  })

  it('replaces a child', () => {
    const node = elementNode('container', {}, [
      elementNode('container'),
      elementNode('container'),
      elementNode('container'),
    ])

    const secondChild = node.content.children[1] as UIDLElementNode

    const link = urlMockedDefinition() as UIDLURLLinkNode
    secondChild.content.abilities = { link }

    const result = insertLinks(node, {}, false)
    const secondChildAfterInsertLinks = result.content.children[1] as UIDLElementNode

    expect(secondChildAfterInsertLinks.content.elementType).toBe('link')
    expect(secondChildAfterInsertLinks.content.attrs.url.content).toBe(link.content.url.content)
  })

  it('works with a navlink without page settings', () => {
    const node = elementNode('container', {}, [
      elementNode('container'),
      elementNode('container'),
      elementNode('container'),
    ])

    const secondChild = node.content.children[1] as UIDLElementNode

    const navlink = navlinkMockedDefinition()
    secondChild.content.abilities = { link: navlink }

    const result = insertLinks(node, {}, false)
    const secondChildAfterInsertLinks = result.content.children[1] as UIDLElementNode

    expect(secondChildAfterInsertLinks.content.elementType).toBe('navlink')
    expect(secondChildAfterInsertLinks.content.attrs.transitionTo.content).toBe(
      `/${navlink.content.routeName}`
    )
  })

  it('works with a navlink with page settings', () => {
    const node = elementNode('container', {}, [
      elementNode('container'),
      elementNode('container'),
      elementNode('container'),
    ])

    const secondChild = node.content.children[1] as UIDLElementNode

    const navlink = navlinkMockedDefinition()
    secondChild.content.abilities = { link: navlink }

    const result = insertLinks(
      node,
      {
        projectRouteDefinition: {
          type: 'route',
          defaultValue: 'home',
          values: [
            {
              value: 'home',
              pageOptions: {
                navLink: '/main-page',
              },
            },
          ],
        },
      },
      false
    )
    const secondChildAfterInsertLinks = result.content.children[1] as UIDLElementNode

    expect(secondChildAfterInsertLinks.content.elementType).toBe('navlink')
    expect(secondChildAfterInsertLinks.content.attrs.transitionTo.content).toBe(`/main-page`)
  })
})

describe('createLink', () => {
  it('creates a phone link', () => {
    const link = phoneMockedDefinition()
    const result = createLinkNode(link, {})

    expect(result.content.elementType).toBe('link')
    expect(result.content.attrs.url.content).toBe(`tel:${link.content.phone}`)
  })

  it('creates a mail link', () => {
    const link = mailMockedDefinition()
    const result = createLinkNode(link, {})

    expect(result.content.elementType).toBe('link')
    expect(result.content.attrs.url.content).toBe(
      `mailto:${link.content.mail}?subject=${link.content.subject}&body=${link.content.body}`
    )
  })

  it('creates a section link', () => {
    const link = sectionMockedDefinition()
    const result = createLinkNode(link, {})

    expect(result.content.elementType).toBe('link')
    expect(result.content.attrs.url.content).toBe(`#${link.content.section}`)
  })
})

'''
'''--- packages/teleport-uidl-resolver/__tests__/embed-lottie-node/index.ts ---
import { wrapHtmlNode, createEmbedDivWrapperNode } from '../../src/resolvers/embed-node/utils'
import { elementNode, staticNode } from '@teleporthq/teleport-uidl-builders'
import { UIDLElementNode, UIDLStyleDefinitions } from '@teleporthq/teleport-types'

describe('wrap html-node element', () => {
  it('wraps a simple element', () => {
    const node = elementNode(
      'html-node',
      {
        html: {
          type: 'raw',
          content: `<blockquote class='twitter-tweet'><p lang='en' dir='ltr'>Feels like the last 20 mins of Don’t Look Up right about now…</p>&mdash; Netflix (@netflix) <a href='https://twitter.com/netflix/status/1593420772948598784?ref_src=twsrc%5Etfw'>November 18, 2022</a></blockquote> <script async src='https://platform.twitter.com/widgets.js'></script>`,
        },
      },
      [],
      undefined,
      {
        width: staticNode('100px'),
      }
    )

    const result = wrapHtmlNode(node, {})
    expect(result.content.elementType).toBe('div')
    expect(result.content.children?.length).toBe(1)
    const childNode = result.content.children?.[0] as UIDLElementNode
    expect(childNode.content.elementType).toBe('html-node')
    expect(childNode.content.attrs?.html.content).toBe(
      `<blockquote class='twitter-tweet'><p lang='en' dir='ltr'>Feels like the last 20 mins of Don’t Look Up right about now…</p>&mdash; Netflix (@netflix) <a href='https://twitter.com/netflix/status/1593420772948598784?ref_src=twsrc%5Etfw'>November 18, 2022</a></blockquote> <script async src='https://platform.twitter.com/widgets.js'></script>`
    )
  })
})

describe('create div', () => {
  it('creates wrapping div', () => {
    const node = elementNode(
      'html-node',
      {
        html: {
          type: 'raw',
          content: `<blockquote class='twitter-tweet'><p lang='en' dir='ltr'>Feels like the last 20 mins of Don’t Look Up right about now…</p>&mdash; Netflix (@netflix) <a href='https://twitter.com/netflix/status/1593420772948598784?ref_src=twsrc%5Etfw'>November 18, 2022</a></blockquote> <script async src='https://platform.twitter.com/widgets.js'></script>`,
        },
      },
      [],
      undefined,
      {
        width: staticNode('100px'),
      }
    )

    const result = createEmbedDivWrapperNode(node)

    expect(result.content.elementType).toBe('div')
    expect(result.content.children?.length).toBe(0)
    expect(result.content.attrs?.html).toBeUndefined()
    expect(result.content.style).toBeDefined()
    expect(Object.keys(result.content.style as UIDLStyleDefinitions).length).toBe(1)
  })
})

'''
'''--- packages/teleport-uidl-resolver/__tests__/index.ts ---
import { resolveUIDLElement } from '../src'
import { element } from '@teleporthq/teleport-uidl-builders'

describe('resolveUIDLElement', () => {
  it('resolves an element with the react mapping', async () => {
    const elementNode = element('container')
    const result = resolveUIDLElement(elementNode)
    expect(result.elementType).toBe('div')
  })
})

'''
'''--- packages/teleport-uidl-resolver/__tests__/mapping.json ---
{
  "elements": {
    "text": {
      "elementType": "span"
    },
    "image": {
      "elementType": "img",
      "selfClosing": true
    }
  },
  "illegalClassNames": ["", "Component"],
  "illegalPropNames": ["", "this", "prop", "props", "state", "window", "document"]
}
'''
'''--- packages/teleport-uidl-resolver/__tests__/referenced-styles/index.ts ---
import {
  UIDLElementNodeInlineReferencedStyle,
  UIDLElementNodeReferenceStyles,
  UIDLStyleMediaQueryScreenSizeCondition,
} from '@teleporthq/teleport-types'
import { component, elementNode, staticNode } from '@teleporthq/teleport-uidl-builders'
import { resolveReferencedStyle } from '../../src/resolvers/referenced-styles'

describe('Resolves referenced styles and sorts media styles in order', () => {
  const referencedStyles: Record<string, UIDLElementNodeReferenceStyles> = {
    '5ed66ec0b98ab344e6299c7d': {
      type: 'style-map' as const,
      content: {
        mapType: 'inlined' as const,
        conditions: [{ conditionType: 'screen-size' as const, maxWidth: 767 }],
        styles: {
          display: staticNode('block'),
        },
      },
    },
    '5ed66ec0b98ab344e6299c7c': {
      type: 'style-map' as const,
      content: {
        mapType: 'inlined' as const,
        conditions: [{ conditionType: 'screen-size' as const, maxWidth: 991 }],
        styles: {
          display: staticNode('block'),
        },
      },
    },
  }

  it('sorts media queries in order', () => {
    const style = {
      width: staticNode('100px'),
    }
    const element = elementNode('container', null, [], null, style, null, referencedStyles)
    const uidl = component('MyComponent', element)
    resolveReferencedStyle(uidl)
    const styles = Object.values(uidl.node.content.referencedStyles)

    expect(
      (styles[0].content.conditions[0] as UIDLStyleMediaQueryScreenSizeCondition).maxWidth
    ).toBe(991)
    expect(
      (styles[1].content.conditions[0] as UIDLStyleMediaQueryScreenSizeCondition).maxWidth
    ).toBe(767)
  })

  it('Sorts media queries along with component and project referenced styles', () => {
    const elm = elementNode('container', null, [], null, {}, null, {
      ...referencedStyles,
      ...{
        '5ed66ec0b98ab344e6299c7e': {
          type: 'style-map',
          content: {
            mapType: 'component-referenced',
            content: {
              type: 'static',
              content: 'md-8',
            },
          },
        },
        '5ed66ec0b98ab344e6299c7f': {
          type: 'style-map',
          content: {
            mapType: 'project-referenced',
            referenceId: '123456789',
          },
        },
      },
    })
    const uidl = component('MyComponent', elm)
    resolveReferencedStyle(uidl)
    const styles = Object.values(uidl.node.content.referencedStyles)

    expect(
      (
        (styles[2] as UIDLElementNodeInlineReferencedStyle).content
          .conditions[0] as UIDLStyleMediaQueryScreenSizeCondition
      ).maxWidth
    ).toBe(991)

    expect(
      (
        (styles[3] as UIDLElementNodeInlineReferencedStyle).content
          .conditions[0] as UIDLStyleMediaQueryScreenSizeCondition
      ).maxWidth
    ).toBe(767)
  })
})

'''
'''--- packages/teleport-uidl-resolver/__tests__/resolver.ts ---
import Resolver from '../src/resolver'
import mappingJSON from './mapping.json'
import { Mapping } from '@teleporthq/teleport-types'

import {
  element,
  component,
  definition,
  staticNode,
  dynamicNode,
  elementNode,
  conditionalNode,
} from '@teleporthq/teleport-uidl-builders'

const mapping = mappingJSON as Mapping

describe('resolveElement', () => {
  const uidlElement = element('text', {
    dummy: staticNode('remains here'),
  })

  it('returns a mapped content node', () => {
    const resolver = new Resolver()
    resolver.addMapping(mapping)
    const resolvedElement = resolver.resolveElement(uidlElement)
    expect(resolvedElement.elementType).toBe('span')
    expect(resolvedElement.attrs.dummy.content).toBe('remains here')
  })

  it('returns a mapped content node with a custom mapping', () => {
    const resolver = new Resolver()
    const resolvedElement = resolver.resolveElement(uidlElement, { mapping })
    expect(resolvedElement.elementType).toBe('span')
    expect(resolvedElement.attrs.dummy.content).toBe('remains here')
  })

  it('maps a seflClosing tag', () => {
    const resolver = new Resolver()
    const imageElement = element('image', {
      dummy: staticNode('remains here'),
    })
    const resolvedElement = resolver.resolveElement(imageElement, { mapping })
    expect(resolvedElement.elementType).toBe('img')
    expect(resolvedElement.selfClosing).toBe(true)
    expect(resolvedElement.attrs.dummy.content).toBe('remains here')
  })
})

describe('resolveUIDL', () => {
  it('should return resolved UIDL', () => {
    const uidl = component(
      'Conditional Component',
      elementNode('container', {}, [
        conditionalNode(
          dynamicNode('state', 'isVisible'),
          elementNode('div', {}, [staticNode('Now you see me!')]),
          true
        ),
      ]),
      {},
      { isVisible: definition('boolean', true), isShareable: definition('boolean', false) }
    )

    const extraMapping = {
      elements: {
        container: {
          elementType: 'div',
        },
      },
    }

    const resolver = new Resolver()
    resolver.addMapping(mapping)
    const resolvedUIDL = resolver.resolveUIDL(uidl, { mapping: extraMapping })
    expect(resolvedUIDL.name).toBe('Conditional Component')
    expect(resolvedUIDL.outputOptions.fileName).toBe('conditional-component')
    expect(resolvedUIDL.outputOptions.componentClassName).toBe('ConditionalComponent')
    expect(resolvedUIDL.node.type).toBe('element')
    expect(resolvedUIDL.stateDefinitions.isVisible.type).toBe('boolean')
  })
})

'''
'''--- packages/teleport-uidl-resolver/__tests__/style-set-definitions/index.ts ---
import { resolveStyleSetDefinitions } from '../../src/resolvers/style-set-definitions'
import { staticNode } from '@teleporthq/teleport-uidl-builders'
import { UIDLStyleSetDefinition, UIDLStyleSetMediaCondition } from '@teleporthq/teleport-types'

describe('Resolves style-sheet', () => {
  const styleSheet: Record<string, UIDLStyleSetDefinition> = {
    primaryButton: {
      type: 'reusable-project-style-map' as const,
      conditions: [
        {
          type: 'screen-size' as const,
          content: {
            display: staticNode('block'),
          },
          meta: {
            maxWidth: 767,
          },
        },
        {
          type: 'screen-size' as const,
          content: {
            display: staticNode('none'),
          },
          meta: {
            maxWidth: 991,
          },
        },
      ],
      content: {
        display: staticNode('block'),
      },
    },
    secondaryButton: {
      type: 'reusable-project-style-map' as const,
      conditions: [
        {
          type: 'screen-size' as const,
          content: {
            display: staticNode('block'),
          },
          meta: {
            maxWidth: 767,
          },
        },
        {
          type: 'screen-size' as const,
          content: {
            display: staticNode('none'),
          },
          meta: {
            maxWidth: 991,
          },
        },
      ],
      content: {
        display: staticNode('block'),
      },
    },
  }

  it('Sorts the style-sheet in order', () => {
    const result = resolveStyleSetDefinitions(styleSheet)

    expect((result.primaryButton.conditions[0] as UIDLStyleSetMediaCondition).meta.maxWidth).toBe(
      991
    )
    expect((result.primaryButton.conditions[1] as UIDLStyleSetMediaCondition).meta.maxWidth).toBe(
      767
    )
    expect((result.secondaryButton.conditions[0] as UIDLStyleSetMediaCondition).meta.maxWidth).toBe(
      991
    )
    expect((result.secondaryButton.conditions[1] as UIDLStyleSetMediaCondition).meta.maxWidth).toBe(
      767
    )
  })

  it(`Resolver doesn't throw any error even if conditions are not passed`, () => {
    const styleSet = {
      primaryButton: {
        type: 'reusable-project-style-map' as const,
        conditions: [],
        content: {
          display: staticNode('block'),
        },
      },
    }
    const result = resolveStyleSetDefinitions(styleSet)

    expect(result).toEqual(styleSet)
  })
})

'''
'''--- packages/teleport-uidl-resolver/__tests__/utils.ts ---
import {
  staticNode,
  repeatNode,
  elementNode,
  dynamicNode,
  component,
  definition,
  element,
} from '@teleporthq/teleport-uidl-builders'
import {
  generateUniqueKeys,
  createNodesLookup,
  resolveChildren,
  ensureDataSourceUniqueness,
  mergeMappings,
  checkForIllegalNames,
  checkForDefaultPropsContainingAssets,
  checkForDefaultStateValueContainingAssets,
  resolveElement,
  parseStaticStyles,
  prefixAssetURLs,
} from '../src/utils'
import {
  UIDLElement,
  UIDLNode,
  UIDLRepeatNode,
  Mapping,
  UIDLStyleDefinitions,
} from '@teleporthq/teleport-types'
import mapping from './mapping.json'

describe('generateUniqueKeys', () => {
  it('adds name and key to node', async () => {
    const simpleNode = elementNode('container')

    const lookup = {
      container: {
        count: 1,
        nextKey: '0',
      },
    }

    generateUniqueKeys(simpleNode, lookup)

    expect(simpleNode.content.name).toBe('container')
    expect(simpleNode.content.key).toBe('container')
  })

  it('adds name and generate unique key', async () => {
    const node = elementNode('container', {}, [elementNode('container')])

    const lookup = {
      container: {
        count: 2,
        nextKey: '0',
      },
    }

    generateUniqueKeys(node, lookup)

    expect(node.content.name).toBe('container')
    expect(node.content.key).toBe('container')

    const childNode = node.content.children[0].content as UIDLElement
    expect(childNode.name).toBe('container')
    expect(childNode.key).toBe('container1')
  })
})

describe('createNodesLookup', () => {
  it('counts duplicate nodes inside the UIDL', async () => {
    const node = elementNode('container', {}, [
      elementNode('container', {}, [elementNode('text'), elementNode('text'), elementNode('text')]),
    ])

    const lookup: Record<string, { count: number; nextKey: string }> = {}
    createNodesLookup(node, lookup)

    expect(lookup.container.count).toBe(2)
    expect(lookup.container.nextKey).toBe('0')
    expect(lookup.text.count).toBe(3)
    expect(lookup.container.nextKey).toBe('0')
  })

  it('adds zero padding when counting keys', async () => {
    const node = elementNode('container')

    const lookup: Record<string, { count: number; nextKey: string }> = {
      container: {
        count: 9,
        nextKey: '0',
      },
    }
    createNodesLookup(node, lookup)

    expect(lookup.container.count).toBe(10)
    expect(lookup.container.nextKey).toBe('00')
  })
})

describe('ensureDataSourceUniqueness', () => {
  it('set dataSourceIdentifier as "items" if only one repeat is in the node', () => {
    const repeatNodeSample = repeatNode(
      elementNode('div', {}, [dynamicNode('local', 'item')]),
      { type: 'static', content: [] },
      {
        useIndex: true,
      }
    )

    ensureDataSourceUniqueness(repeatNodeSample)

    expect(repeatNodeSample.content.meta.dataSourceIdentifier).toBe('items')
  })

  it('set incremental dataSourceIdenfiers if multiple repeat structures are in the node', () => {
    const repeatNodeSample = repeatNode(
      elementNode('div', {}, [dynamicNode('local', 'item')]),
      { type: 'static', content: [] },
      {
        useIndex: true,
      }
    )

    const repeatNodeSample1 = JSON.parse(JSON.stringify(repeatNodeSample))
    const elementSample = elementNode('container', {}, [repeatNodeSample, repeatNodeSample1])

    ensureDataSourceUniqueness(elementSample)
    const firstRepeat = elementSample.content.children[0] as UIDLRepeatNode
    const secondRepeat = elementSample.content.children[1] as UIDLRepeatNode

    expect(firstRepeat.content.meta.dataSourceIdentifier).toBe('items')
    expect(secondRepeat.content.meta.dataSourceIdentifier).toBe('items1')
  })
})

describe('resolveNode', () => {
  it('elementNode', () => {
    const elementNodeSample = elementNode('container')
    expect(elementNodeSample.content.name).toBe('container')
  })
  it('repeatNode', () => {
    const repeatNodeSample = repeatNode(
      elementNode('div', {}, [dynamicNode('local', 'item')]),
      dynamicNode('prop', 'items'),
      {
        useIndex: true,
      }
    )
    expect(repeatNodeSample.content.node.type).toBe('element')
    expect(repeatNodeSample.content.node.content).toHaveProperty('name', 'div')
    expect(repeatNodeSample.content.node.content).toHaveProperty('children')
  })
})

describe('resolveChildren', () => {
  it('merges the children when no placeholder is found', () => {
    const mappedChildren = [staticNode('from-mapping')]
    const originalChildren = [staticNode('original-text')]

    const result = resolveChildren(mappedChildren, originalChildren)
    expect(result.length).toBe(2)
    expect(result[0].content).toBe('original-text')
    expect(result[1].content).toBe('from-mapping')
  })

  it('adds the mapped children if no original children are found', () => {
    const mappedChildren = [staticNode('from-mapping')]

    const result = resolveChildren(mappedChildren)
    expect(result.length).toBe(1)
    expect(result[0].content).toBe('from-mapping')
  })

  it('inserts the original children instead of the placeholder', () => {
    const mappedChildren = [dynamicNode('children', 'children')]
    const originalChildren = [staticNode('original-text')]

    const result = resolveChildren(mappedChildren, originalChildren)
    expect(result.length).toBe(1)
    expect(result[0].content).toBe('original-text')
  })

  it('inserts the original children in the nested structure, instead of the placeholder', () => {
    const mappedChildren = [elementNode('container', {}, [dynamicNode('children', 'children')])]
    const originalChildren = [staticNode('original-text')]

    const result = resolveChildren(mappedChildren, originalChildren)
    expect(result.length).toBe(1)
    const innerChildren = (result[0].content as unknown as UIDLElement).children
    expect(innerChildren.length).toBe(1)
    expect(innerChildren[0].content).toBe('original-text')
  })

  it('inserts multiple nodes instead of the placeholder', () => {
    const mappedChildren = [
      elementNode('container', {}, [
        dynamicNode('children', 'children'),
        staticNode('remains here'),
      ]),
    ]

    const originalChildren: UIDLNode[] = [
      staticNode('original-text'),
      staticNode('other-original-text'),
    ]

    const result = resolveChildren(mappedChildren, originalChildren)
    expect(result.length).toBe(1)
    const innerChildren = (result[0].content as unknown as UIDLElement).children
    expect(innerChildren.length).toBe(3)
    expect(innerChildren[0].content).toBe('original-text')
    expect(innerChildren[1].content).toBe('other-original-text')
    expect(innerChildren[2].content).toBe('remains here')
  })

  it('inserts multiple nodes instead of multiple placeholders', () => {
    const mappedChildren = [
      elementNode('container', {}, [
        dynamicNode('children', 'children'),
        staticNode('remains here'),
        dynamicNode('children', 'children'),
      ]),
    ]

    const originalChildren: UIDLNode[] = [
      staticNode('original-text'),
      staticNode('other-original-text'),
    ]

    const result = resolveChildren(mappedChildren, originalChildren)
    expect(result.length).toBe(1)
    const innerChildren = (result[0].content as unknown as UIDLElement).children
    expect(innerChildren.length).toBe(5)
    expect(innerChildren[0].content).toBe('original-text')
    expect(innerChildren[1].content).toBe('other-original-text')
    expect(innerChildren[2].content).toBe('remains here')
    expect(innerChildren[3].content).toBe('original-text')
    expect(innerChildren[4].content).toBe('other-original-text')
  })
})

describe('mergeMappings', () => {
  const oldMapping: Mapping = {
    elements: {
      text: {
        elementType: 'span',
      },
      picture: {
        elementType: 'picture',
        children: [{ type: 'dynamic', content: { referenceType: 'children', id: 'children' } }],
      },
    },
    events: {},
    attributes: {},
    illegalClassNames: [],
    illegalPropNames: ['title'],
  }

  const newMapping = {
    elements: {
      text: {
        elementType: 'span',
      },
      picture: {
        elementType: 'picture',
        children: [
          { type: 'static', content: 'This browser does not support the image formats given' },
        ],
      },
    },
    events: {},
    attributes: {},
  }

  it('returns the old mapping if there is no new mapping present', () => {
    const expectedMapping = mergeMappings(oldMapping as Mapping)

    expect(expectedMapping).toEqual(oldMapping)
  })

  it('merges the mappings using deepmerge if deepMerge parameter is present', () => {
    const mergedMapping = mergeMappings(oldMapping as Mapping, newMapping as Mapping, true)

    const expectedMapping: Mapping = {
      elements: {
        text: {
          elementType: 'span',
        },
        picture: {
          elementType: 'picture',
          children: [
            { type: 'dynamic', content: { referenceType: 'children', id: 'children' } },
            { type: 'static', content: 'This browser does not support the image formats given' },
          ],
        },
      },
      events: {},
      attributes: {},
      illegalClassNames: [],
      illegalPropNames: ['title'],
    }

    expect(mergedMapping).toEqual(expectedMapping)
  })

  it('merges the mapping using the spread operator ', () => {
    const mergedMapping = mergeMappings(oldMapping as Mapping, newMapping as Mapping)

    const expectedMapping: Mapping = {
      elements: {
        text: {
          elementType: 'span',
        },
        picture: {
          elementType: 'picture',
          children: [
            { type: 'static', content: 'This browser does not support the image formats given' },
          ],
        },
      },
      events: {},
      attributes: {},
      illegalClassNames: [],
      illegalPropNames: ['title'],
    }

    expect(mergedMapping).toEqual(expectedMapping)
  })
})

describe('checkForIllegalNames', () => {
  const comp = component(
    'Component',
    elementNode('container'),
    {
      'my-title': definition('string', 'test'),
    },
    {
      isVisible: definition('boolean', false),
    }
  )

  comp.outputOptions = {
    componentClassName: 'Component',
    fileName: 'component',
  }

  it('checks component name', () => {
    checkForIllegalNames(comp, mapping)
    expect(comp.outputOptions.componentClassName).toBe('AppComponent')
  })

  it('handles empty string', () => {
    comp.outputOptions = {
      componentClassName: '',
      fileName: 'component',
    }

    checkForIllegalNames(comp, mapping)

    expect(comp.outputOptions.componentClassName).toBe('App')
  })

  it('throws error for invalid prop', () => {
    comp.propDefinitions.this = definition('string', '')

    expect(() => checkForIllegalNames(comp, mapping)).toThrowError()
  })
})

describe('checkForDefaultPropsContainingAssets', () => {
  const comp = component('Component', elementNode('image'), {
    myImage: {
      type: 'string',
      defaultValue: '/kittens.png',
    },
  })

  const assets = {
    prefix: 'public',
    identifier: 'assets',
    mappings: { 'kittens.png': 'sub1/sub2' },
  }

  it('find and fix defaultProp containing an asset', () => {
    checkForDefaultPropsContainingAssets(comp, assets)
    expect(comp.propDefinitions).toBeDefined()
    if (comp.propDefinitions) {
      expect(comp.propDefinitions.myImage).toBeDefined()
      expect(comp.propDefinitions.myImage.defaultValue).toContain(
        'public/assets/sub1/sub2/kittens.png'
      )
    }
  })
})

describe('checkForDefaultStateValueContainingAssets', () => {
  const comp = component(
    'Component',
    elementNode('image'),
    {
      myImage: {
        type: 'string',
        defaultValue: '/kittens.png',
      },
    },
    {
      imageState: {
        type: 'string',
        defaultValue: '/dogs.png',
      },
    }
  )

  const assets = {
    prefix: 'public',
    identifier: 'assets',
    mappings: {
      'kittens.png': 'sub1/sub2',
      'dogs.png': 'dog/pictures',
    },
  }

  it('find and fix defaultProp containing an asset', () => {
    checkForDefaultStateValueContainingAssets(comp, assets)
    expect(comp.stateDefinitions).toBeDefined()
    if (comp.stateDefinitions) {
      expect(comp.stateDefinitions.imageState).toBeDefined()
      expect(comp.stateDefinitions.imageState.defaultValue).toContain(
        'public/assets/dog/pictures/dogs.png'
      )
    }
  })
})

describe('resolveLinkElement', () => {
  const assets = {
    prefix: 'public',
    identifier: 'assets',
    mappings: {
      'kittens.png': 'sub1/sub2',
      'dogs.png': 'dog/pictures',
    },
  }
  const genereicMapping: Mapping = {
    elements: {
      text: {
        elementType: 'span',
      },
      picture: {
        elementType: 'picture',
        children: [{ type: 'dynamic', content: { referenceType: 'children', id: 'children' } }],
      },
    },
    events: {},
    attributes: {},
    illegalClassNames: [],
    illegalPropNames: ['title'],
  }
  const linkElement = element('Link', {
    url: staticNode('/test'),
  })

  const linkHTMLElement = element('a', {
    url: staticNode('/test'),
  })

  const assetElement = element('image', {
    src: staticNode('/kittens.png'),
  })

  it('resolve link element', () => {
    resolveElement(linkElement, { assets, mapping: genereicMapping })
    expect(linkElement.attrs?.url.content).toBe('/test')
  })
  it('resolve link html element', () => {
    resolveElement(linkHTMLElement, { assets, mapping: genereicMapping })
    expect(linkHTMLElement.attrs?.url.content).toBe('/test')
  })
  it('resolve image element', () => {
    resolveElement(assetElement, { assets, mapping: genereicMapping })
    expect(assetElement.attrs?.src.content).toBe('public/assets/sub1/sub2/kittens.png')
  })
})

describe('parseBackgroundWithMultipleStyles', () => {
  const styleToParse: UIDLStyleDefinitions = {
    backgroundImage: {
      type: 'static',
      content:
        'linear-gradient(90deg, rgb(189, 195, 199) 0.00%,rgba(44, 62, 80, 0.5) 100.00%),url("/kittens.png")',
    },
  }

  const assets = {
    prefix: 'public',
    identifier: 'assets',
    mappings: {
      'kittens.png': 'sub1/sub2',
      'dogs.png': 'dog/pictures',
    },
  }
  it('correctly splits the style content into two separate styles', () => {
    const parsedStyle = parseStaticStyles(styleToParse.backgroundImage.content as string)
    expect(parsedStyle).toBeDefined()
    expect(parsedStyle.length).toBe(2)
    expect(parsedStyle[0]).toBe(
      'linear-gradient(90deg, rgb(189, 195, 199) 0.00%,rgba(44, 62, 80, 0.5) 100.00%)'
    )
    expect(parsedStyle[1]).toBe('url("/kittens.png")')
  })

  it('correctly generates background image style with correct url', () => {
    const parsedStyle = prefixAssetURLs(styleToParse, assets)
    expect(parsedStyle.backgroundImage).toBeDefined()
    expect(parsedStyle.backgroundImage.content).toBeDefined()
    if (parsedStyle.backgroundImage.content) {
      expect(parsedStyle.backgroundImage.content).toContain(
        'linear-gradient(90deg, rgb(189, 195, 199) 0.00%,rgba(44, 62, 80, 0.5) 100.00%),url("public/assets/sub1/sub2/kittens.png")'
      )
    }
  })
})

'''
'''--- packages/teleport-uidl-resolver/package.json ---
{
  "name": "@teleporthq/teleport-uidl-resolver",
  "version": "0.29.2",
  "description": "A small package that handles the transition from UIDL to HTML elements and has support for custom mappings.",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0",
    "@teleporthq/teleport-uidl-builders": "^0.29.0",
    "deepmerge": "^4.0.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-uidl-resolver/src/html-mapping.ts ---
import { Mapping } from '@teleporthq/teleport-types'

export const HTMLMapping: Mapping = {
  elements: {
    container: {
      elementType: 'div',
    },
    group: {
      elementType: 'div',
    },
    text: {
      elementType: 'span',
    },
    linebreak: {
      elementType: 'br',
      selfClosing: true,
    },
    image: {
      elementType: 'img',
      attrs: {
        src: { type: 'dynamic', content: { referenceType: 'attr', id: 'url' } },
      },
      selfClosing: true,
    },
    'html-node': {
      elementType: 'dangerous-html',
      dependency: {
        type: 'package',
        path: 'dangerous-html',
        version: '0.1.13',
        meta: {
          importJustPath: true,
        },
      },
    },
    'lottie-node': {
      elementType: 'lottie-player',
      dependency: {
        type: 'package',
        path: '@lottiefiles/lottie-player',
        version: '1.6.0',
        meta: {
          importJustPath: true,
        },
      },
    },
    textinput: {
      elementType: 'input',
      attrs: {
        type: { type: 'static', content: 'text' },
      },
      selfClosing: true,
    },
    passwordinput: {
      elementType: 'input',
      attrs: {
        type: { type: 'static', content: 'password' },
      },
      selfClosing: true,
    },
    numberinput: {
      elementType: 'input',
      attrs: {
        type: { type: 'static', content: 'number' },
      },
      selfClosing: true,
    },
    checkbox: {
      elementType: 'input',
      attrs: {
        type: { type: 'static', content: 'checkbox' },
      },
      selfClosing: true,
    },
    radiobutton: {
      elementType: 'input',
      attrs: {
        type: { type: 'static', content: 'radio' },
      },
      selfClosing: true,
    },
    textarea: {
      elementType: 'textarea',
    },
    link: {
      elementType: 'a',
      attrs: {
        href: {
          type: 'dynamic',
          content: { referenceType: 'attr', id: 'url' },
        },
      },
    },
    navlink: {
      elementType: 'a',
    },
    button: {
      elementType: 'button',
    },
    form: {
      elementType: 'form',
      attrs: {
        method: { type: 'dynamic', content: { referenceType: 'attr', id: 'type' } },
        action: { type: 'dynamic', content: { referenceType: 'attr', id: 'url' } },
      },
    },
    list: {
      elementType: 'ul',
      children: [
        {
          type: 'repeat',
          content: {
            node: {
              type: 'element',
              content: {
                elementType: 'li',
                name: 'item',
                children: [
                  {
                    type: 'dynamic',
                    content: {
                      referenceType: 'local',
                      id: 'item',
                    },
                  },
                ],
              },
            },
            dataSource: { type: 'dynamic', content: { referenceType: 'attr', id: 'items' } },
            meta: {
              useIndex: true,
            },
          },
        },
      ],
    },
    dropdown: {
      elementType: 'select',
      children: [
        {
          type: 'repeat',
          content: {
            node: {
              type: 'element',
              content: {
                elementType: 'option',
                name: 'option',
                children: [
                  {
                    type: 'dynamic',
                    content: {
                      referenceType: 'local',
                      id: 'item',
                    },
                  },
                ],
              },
            },
            dataSource: { type: 'dynamic', content: { referenceType: 'attr', id: 'options' } },
            meta: {
              useIndex: true,
            },
          },
        },
      ],
    },
    video: {
      elementType: 'video',
    },
    audio: {
      elementType: 'audio',
    },
    picture: {
      elementType: 'picture',
      children: [
        { type: 'dynamic', content: { referenceType: 'children', id: 'children' } },
        { type: 'static', content: 'This browser does not support the image formats given' },
      ],
    },
    source: {
      elementType: 'source',
      attrs: {
        src: { type: 'dynamic', content: { referenceType: 'attr', id: 'url' } },
      },
      selfClosing: true,
    },
    icon: {
      elementType: 'svg',
    },
    separator: {
      elementType: 'hr',
    },
  },
  events: {},
  attributes: {},
  illegalClassNames: ['', 'Component'],
  illegalPropNames: ['', 'this', 'prop', 'props', 'state', 'window', 'document'],
}

'''
'''--- packages/teleport-uidl-resolver/src/index.ts ---
import Resolver from './resolver'
import { HTMLMapping } from './html-mapping'
import { UIDLElement, GeneratorOptions } from '@teleporthq/teleport-types'
import { resolveStyleSetDefinitions } from './resolvers/style-set-definitions'

const htmlResolver = new Resolver(HTMLMapping)

const resolveUIDLElement = (node: UIDLElement, options?: GeneratorOptions) => {
  return htmlResolver.resolveElement(node, options)
}

export { resolveUIDLElement, Resolver, HTMLMapping, resolveStyleSetDefinitions }

'''
'''--- packages/teleport-uidl-resolver/src/resolver.ts ---
import * as utils from './utils'
import { UIDLUtils } from '@teleporthq/teleport-shared'
import { ComponentUIDL, UIDLElement, Mapping, GeneratorOptions } from '@teleporthq/teleport-types'
import { resolveAbilities } from './resolvers/abilities'
import { resolveStyleSetDefinitions } from './resolvers/style-set-definitions'
import { resolveReferencedStyle } from './resolvers/referenced-styles'
import { resolveHtmlNode } from './resolvers/embed-node'

/**
 * The resolver takes the input UIDL and converts all the abstract node types into
 * concrete node types, based on the mappings you provide
 */
export default class Resolver {
  private mapping: Mapping = {
    elements: {},
    events: {},
    attributes: {},
    illegalClassNames: [],
    illegalPropNames: [],
  }

  constructor(mapping?: Mapping | Mapping[]) {
    if (Array.isArray(mapping)) {
      mapping.forEach((mp) => this.addMapping(mp))
    } else if (mapping) {
      this.addMapping(mapping)
    }
  }

  public addMapping(mapping: Mapping) {
    this.mapping = utils.mergeMappings(this.mapping, mapping)
  }

  public resolveUIDL(input: ComponentUIDL, options: GeneratorOptions = {}) {
    const mapping = utils.mergeMappings(this.mapping, options.mapping)
    const newOptions = {
      ...options,
      mapping,
    }

    const uidl = UIDLUtils.cloneObject(input)
    uidl.styleSetDefinitions = resolveStyleSetDefinitions(input.styleSetDefinitions, newOptions)

    UIDLUtils.setFriendlyOutputOptions(uidl)

    utils.checkForIllegalNames(uidl, mapping)

    utils.checkForDefaultPropsContainingAssets(uidl, options.assets)

    utils.checkForDefaultStateValueContainingAssets(uidl, options.assets)

    resolveAbilities(uidl, newOptions)

    resolveReferencedStyle(uidl, newOptions)

    resolveHtmlNode(uidl, newOptions)
    // TODO: Rename into apply mappings
    utils.resolveNode(uidl.node, newOptions)

    utils.removeIgnoredNodes(uidl.node)

    const nodesLookup = {}
    utils.createNodesLookup(uidl.node, nodesLookup)
    utils.generateUniqueKeys(uidl.node, nodesLookup)

    utils.ensureDataSourceUniqueness(uidl.node)

    // There might be urls that need to be prefixed in the metaTags of the component
    utils.resolveMetaTags(uidl, newOptions)

    return uidl
  }

  public resolveElement(element: UIDLElement, options: GeneratorOptions = {}) {
    const mapping = utils.mergeMappings(this.mapping, options.mapping)

    const newOptions = {
      ...options,
      mapping,
    }
    const returnElement = UIDLUtils.cloneObject(element)
    utils.resolveElement(returnElement, newOptions)
    return returnElement
  }
}

'''
'''--- packages/teleport-uidl-resolver/src/resolvers/abilities/index.ts ---
import { ComponentUIDL, GeneratorOptions } from '@teleporthq/teleport-types'
import { insertLinks } from './utils'

export const resolveAbilities = (uidl: ComponentUIDL, options: GeneratorOptions) => {
  uidl.node = insertLinks(uidl.node, options)
}

'''
'''--- packages/teleport-uidl-resolver/src/resolvers/abilities/utils.ts ---
import { StringUtils } from '@teleporthq/teleport-shared'
import {
  GeneratorOptions,
  UIDLLinkNode,
  UIDLElementNode,
  UIDLAttributeValue,
} from '@teleporthq/teleport-types'
import { join } from 'path'

export const insertLinks = (
  node: UIDLElementNode,
  options: GeneratorOptions,
  linkInParent: boolean = false,
  parentNode?: UIDLElementNode
): UIDLElementNode => {
  // TODO_NOW
  const { abilities, children, elementType, semanticType } = node.content
  const linkInNode = linkInParent || !!abilities?.link

  // TODO: think of a way to reuse the traversal that modifies the tree
  node.content.children = children?.map((child) => {
    if (child.type === 'element') {
      return insertLinks(child, options, linkInNode, node)
    }

    if (child.type === 'repeat') {
      child.content.node = insertLinks(child.content.node, options, linkInNode, node)
    }

    if (child.type === 'conditional' && child.content.node.type === 'element') {
      child.content.node = insertLinks(child.content.node, options, linkInNode, node)
    }

    if (child.type === 'slot' && child.content.fallback?.type === 'element') {
      child.content.fallback = insertLinks(child.content.fallback, options, linkInNode, node)
    }

    return child
  })

  if (abilities?.link) {
    if (linkInParent) {
      console.warn('parent node has a link capability, nesting links is illegal')
      return node
    }

    /* type attribute is not valid for `anchor` tags */
    if (node.content?.attrs?.type) {
      delete node.content.attrs.type
    }

    /* We repalce buttons with link to use <a> tag's, to make the generated
    code to be semantically correct. */
    if (elementType === 'button') {
      node.content.elementType = getLinkElementType(abilities.link)
      node.content.semanticType = ''
      node.content.attrs = {
        ...node.content.attrs,
        ...createLinkAttributes(abilities.link, options),
      }
      return node
    }

    /* a text node (span) on which we added a link gets transformed into an <a>
     the rest of the text elements get wrapped with an <a> tag */
    if (elementType === 'text' && semanticType === 'span') {
      node.content.elementType = getLinkElementType(abilities.link)
      node.content.semanticType = ''
      node.content.attrs = {
        ...node.content.attrs,
        ...createLinkAttributes(abilities.link, options),
      }

      return node
    }

    const linkNode = createLinkNode(abilities.link, options)
    linkNode.content.children.push(node)

    if (parentNode?.content.style?.display?.content === 'flex') {
      linkNode.content.style = {
        ...linkNode.content.style,
        display: { type: 'static', content: 'contents' },
      }
    }

    return linkNode
  }

  return node
}

export const createLinkNode = (link: UIDLLinkNode, options: GeneratorOptions): UIDLElementNode => {
  return {
    type: 'element',
    content: {
      elementType: getLinkElementType(link),
      attrs: createLinkAttributes(link, options),
      children: [],
    },
  }
}

const getLinkElementType = (link: UIDLLinkNode): string => {
  return link.type === 'navlink' ? 'navlink' : 'link'
}

const createLinkAttributes = (
  link: UIDLLinkNode,
  options: GeneratorOptions
): Record<string, UIDLAttributeValue> => {
  switch (link.type) {
    case 'url': {
      return {
        url: link.content.url,
        ...(link.content.newTab
          ? {
              target: {
                type: 'static',
                content: '_blank',
              },
              rel: {
                type: 'static',
                content: 'noreferrer noopener',
              },
            }
          : {}),
      }
    }

    case 'section': {
      return {
        url: {
          type: 'static',
          content: `#${link.content.section}`,
        },
      }
    }

    case 'navlink': {
      return {
        transitionTo: {
          type: 'static',
          content: resolveNavlink(link.content.routeName, options),
        },
      }
    }

    case 'mail': {
      let mailUrl = `mailto:${link.content.mail}?subject=${link.content.subject ?? ''}`
      if (link.content.body) {
        mailUrl = mailUrl + `&body=${link.content.body}`
      }

      return {
        url: { type: 'static', content: mailUrl },
      }
    }

    case 'phone': {
      return {
        url: { type: 'static', content: `tel:${link.content.phone}` },
      }
    }

    default:
      throw new Error(
        `createLinkNode called with invalid link type '${(link as UIDLLinkNode).type}'`
      )
  }
}

const resolveNavlink = (routeName: string, options: GeneratorOptions) => {
  if (options.skipNavlinkResolver) {
    return routeName
  }

  if (routeName.startsWith('/')) {
    // attribute was explicitly set as a custom navlink
    return routeName
  }

  const friendlyURL = StringUtils.camelCaseToDashCase(
    StringUtils.removeIllegalCharacters(routeName)
  )

  const transitionRoute = options.projectRouteDefinition
    ? options.projectRouteDefinition.values.find((route) => route.value === routeName)
    : null

  if (!transitionRoute) {
    return `/${friendlyURL}`
  }

  if (transitionRoute?.pageOptions?.navLink === '/') {
    return transitionRoute.pageOptions.navLink
  }

  /*
    We are using `navLink` + fileName for the target location calculation.
    See `teleport-project-generator` -> createPageUIDL for more info.
  */

  return transitionRoute?.pageOptions?.navLink && transitionRoute?.pageOptions?.fileName
    ? join(transitionRoute.pageOptions.navLink, `../${transitionRoute.pageOptions.fileName}`)
    : transitionRoute.pageOptions.navLink ?? `/${friendlyURL}`
}

'''
'''--- packages/teleport-uidl-resolver/src/resolvers/embed-node/index.ts ---
import { ComponentUIDL, GeneratorOptions } from '@teleporthq/teleport-types'
import { wrapHtmlNode } from './utils'

export const resolveHtmlNode = (uidl: ComponentUIDL, options: GeneratorOptions) => {
  uidl.node = wrapHtmlNode(uidl.node, options)
}

'''
'''--- packages/teleport-uidl-resolver/src/resolvers/embed-node/utils.ts ---
import { GeneratorOptions, UIDLAttributeValue, UIDLElementNode } from '@teleporthq/teleport-types'

export const wrapHtmlNode = (node: UIDLElementNode, options: GeneratorOptions): UIDLElementNode => {
  const { children, attrs } = node.content

  node.content.children = children?.map((child) => {
    if (child.type === 'element') {
      return wrapHtmlNode(child, options)
    }

    if (child.type === 'repeat') {
      child.content.node = wrapHtmlNode(child.content.node, options)
    }

    if (child.type === 'conditional' && child.content.node.type === 'element') {
      child.content.node = wrapHtmlNode(child.content.node, options)
    }

    if (child.type === 'slot' && child.content.fallback?.type === 'element') {
      child.content.fallback = wrapHtmlNode(child.content.fallback, options)
    }

    return child
  })

  let newNode
  if (attrs?.html) {
    newNode = createEmbedDivWrapperNode(node)
  }

  if (newNode) {
    newNode.content.children.push(node)

    node.content.style = {}
    node.content.referencedStyles = {}
    node.content.events = {}

    return newNode
  }

  return node
}

export const createEmbedDivWrapperNode = (node: UIDLElementNode): UIDLElementNode => {
  const attrs = Object.keys(node.content.attrs).reduce(
    (acc: Record<string, UIDLAttributeValue>, attrKey: string) => {
      if (attrKey !== 'html') {
        acc[attrKey] = node.content.attrs[attrKey]
      }

      return acc
    },
    {}
  )

  return {
    type: 'element',
    content: {
      ...node.content,
      attrs,
      style: {
        display: {
          type: 'static',
          content: 'contents',
        },
      },
      elementType: 'div',
      semanticType: 'div',
      children: [],
    },
  }
}

'''
'''--- packages/teleport-uidl-resolver/src/resolvers/referenced-styles/index.ts ---
/*
  Referenced styles contains both media queries and pseudo styles,
  we need to sort out the media queries. So, we generate them as desktop irst approach
  In this resolver, we parse through these styles on all the nodes and sort them.
  All the media-queries that are inlined are sorted in descending order.
*/

import {
  UIDLElementNode,
  ComponentUIDL,
  UIDLElementNodeProjectReferencedStyle,
  UIDLElementNodeInlineReferencedStyle,
  UIDLReferencedStyles,
  UIDLStyleMediaQueryScreenSizeCondition,
  UIDLElementNodeCompReferencedStyle,
  GeneratorOptions,
} from '@teleporthq/teleport-types'
import { prefixAssetURLs } from '../../utils'

export const resolveReferencedStyle = (input: ComponentUIDL, options: GeneratorOptions) => {
  input.node = sortReferencedStylesOnElement(input.node, options)
}

const sortReferencedStylesOnElement = (node: UIDLElementNode, options: GeneratorOptions) => {
  const { referencedStyles = {} } = node.content

  if (Object.keys(referencedStyles).length > 0) {
    node.content.referencedStyles = sortByStateAndCondition(referencedStyles, options)
  }

  node.content?.children?.map((child) => {
    if (child.type === 'element') {
      sortReferencedStylesOnElement(child, options)
    }

    if (child.type === 'repeat') {
      sortReferencedStylesOnElement(child.content.node, options)
    }

    if (child.type === 'conditional' && child.content.node.type === 'element') {
      sortReferencedStylesOnElement(child.content.node, options)
    }

    return child
  })
  return node
}

const sortByStateAndCondition = (
  styles: UIDLReferencedStyles,
  options: GeneratorOptions
): UIDLReferencedStyles => {
  if (Object.keys(styles).length === 0) {
    return {}
  }

  const allMediaRelatedStyles: Record<string, UIDLElementNodeInlineReferencedStyle> = {}
  const allElementStateRelatedStyles: Record<string, UIDLElementNodeInlineReferencedStyle> = {}
  const globalReferencedStyles: Record<string, UIDLElementNodeProjectReferencedStyle> = {}
  const allClassReferencedStyles: Record<string, UIDLElementNodeCompReferencedStyle> = {}

  Object.keys(styles).map((styleId: string) => {
    const styleRef = styles[styleId]

    switch (styleRef.content.mapType) {
      case 'inlined':
        {
          if (styleRef.content.conditions[0].conditionType === 'screen-size') {
            allMediaRelatedStyles[styleId] = {
              ...styleRef,
              content: {
                ...styleRef.content,
                styles: prefixAssetURLs(styleRef.content.styles, options?.assets),
              },
            }
          }

          if (styleRef.content.conditions[0].conditionType === 'element-state') {
            allElementStateRelatedStyles[styleId] = {
              ...styleRef,
              content: {
                ...styleRef.content,
                styles: prefixAssetURLs(styleRef.content.styles, options?.assets),
              },
            }
          }
        }
        break
      case 'component-referenced': {
        allClassReferencedStyles[styleId] = styleRef as UIDLElementNodeCompReferencedStyle
        break
      }
      case 'project-referenced': {
        globalReferencedStyles[styleId] = styleRef as UIDLElementNodeProjectReferencedStyle
        break
      }
      default: {
        throw new Error(
          `Invalid referenceStyle passed - ${JSON.stringify(styleRef.content, null, 2)}`
        )
      }
    }
  })

  const sortedMediaQueries: Record<string, UIDLElementNodeInlineReferencedStyle> = Object.keys(
    allMediaRelatedStyles
  )
    .sort((a, b) => {
      const styleA = allMediaRelatedStyles[a]
      const styleB = allMediaRelatedStyles[b]

      return (
        (styleB.content.conditions[0] as UIDLStyleMediaQueryScreenSizeCondition).maxWidth -
        (styleA.content.conditions[0] as UIDLStyleMediaQueryScreenSizeCondition).maxWidth
      )
    })
    .reduce((acc: Record<string, UIDLElementNodeInlineReferencedStyle>, styleId: string) => {
      acc[styleId] = allMediaRelatedStyles[styleId]
      return acc
    }, {})

  return {
    ...globalReferencedStyles,
    ...allClassReferencedStyles,
    ...sortedMediaQueries,
    ...allElementStateRelatedStyles,
  }
}

'''
'''--- packages/teleport-uidl-resolver/src/resolvers/style-set-definitions/index.ts ---
/*
    Styleset-Definitions have conditions which helps in applying media styles
    and pseudo styles on them. These need to be sorted as we do for referenced-Styles
*/

import {
  GeneratorOptions,
  UIDLStyleSetDefinition,
  UIDLStyleSetMediaCondition,
  UIDLStyleSetStateCondition,
} from '@teleporthq/teleport-types'
import { prefixAssetURLs } from '../../utils'

export const resolveStyleSetDefinitions = (
  styleSets: Record<string, UIDLStyleSetDefinition> = {},
  options: GeneratorOptions
): Record<string, UIDLStyleSetDefinition> => {
  return Object.keys(styleSets).reduce((acc: Record<string, UIDLStyleSetDefinition>, styleId) => {
    const styleRef = styleSets[styleId]
    const { conditions = [] } = styleRef

    if (conditions.length === 0) {
      acc[styleId] = {
        ...styleRef,
        content: prefixAssetURLs(styleRef.content, options?.assets),
      }
      return acc
    }

    const [mediaStyles, elementStates] = conditions.reduce(
      ([media, state]: [UIDLStyleSetMediaCondition[], UIDLStyleSetStateCondition[]], item) => {
        if (item.type === 'screen-size') {
          media.push({
            ...item,
            content: prefixAssetURLs(item.content, options?.assets),
          })
        }
        if (item.type === 'element-state') {
          state.push({
            ...item,
            content: prefixAssetURLs(item.content, options?.assets),
          })
        }
        return [media, state]
      },
      [[], []]
    )

    acc[styleId] = {
      ...styleRef,
      conditions: [
        ...elementStates,
        ...mediaStyles.sort((a, b) => b.meta.maxWidth - a.meta.maxWidth),
      ],
    }

    return acc
  }, {})
}

'''
'''--- packages/teleport-uidl-resolver/src/utils.ts ---
import { UIDLUtils, StringUtils } from '@teleporthq/teleport-shared'
import {
  UIDLEventDefinitions,
  UIDLElement,
  UIDLNode,
  UIDLDependency,
  UIDLRepeatContent,
  UIDLAttributeValue,
  Mapping,
  GeneratorOptions,
  ComponentUIDL,
  UIDLElementNode,
  UIDLStyleSetTokenReference,
  UIDLStaticValue,
  UIDLDynamicReference,
} from '@teleporthq/teleport-types'
import deepmerge from 'deepmerge'

const STYLE_PROPERTIES_WITH_URL = ['background', 'backgroundImage']

type ElementsLookup = Record<string, { count: number; nextKey: string }>

export const mergeMappings = (
  oldMapping: Mapping,
  newMapping?: Mapping,
  deepMerge = false
): Mapping => {
  if (!newMapping) {
    return oldMapping
  }

  if (deepMerge === true) {
    return deepmerge(oldMapping, newMapping)
  }

  return {
    elements: { ...oldMapping.elements, ...newMapping.elements },
    events: { ...oldMapping.events, ...newMapping.events },
    attributes: { ...oldMapping.attributes, ...newMapping.attributes },
    illegalClassNames: [
      ...(oldMapping.illegalClassNames || []),
      ...(newMapping.illegalClassNames || []),
    ],
    illegalPropNames: [
      ...(oldMapping.illegalPropNames || []),
      ...(newMapping.illegalPropNames || []),
    ],
  }
}

export const resolveMetaTags = (uidl: ComponentUIDL, options: GeneratorOptions) => {
  if (!uidl.seo || !uidl.seo.metaTags || !options.assets) {
    return
  }

  uidl.seo.metaTags.forEach((tag) => {
    Object.keys(tag).forEach((key) => {
      tag[key] = UIDLUtils.prefixAssetsPath(tag[key], options.assets)
    })
  })
}

export const removeIgnoredNodes = (uidlNode: UIDLNode) => {
  // For now this is only used by react-native that adds some ignore flags in the mapping for certain elements.
  UIDLUtils.removeChildNodes(uidlNode, (node) => {
    if (node.type === 'element' && node.content.ignore) {
      return true // elements mapped with ignore will be removed
    }

    return false
  })
}

export const resolveNode = (uidlNode: UIDLNode, options: GeneratorOptions) => {
  UIDLUtils.traverseNodes(uidlNode, (node, parentNode) => {
    if (node.type === 'element') {
      resolveElement(node.content, options)
    }

    if (node.type === 'repeat') {
      resolveRepeat(node.content, parentNode)
    }
  })
}

export const resolveElement = (element: UIDLElement, options: GeneratorOptions) => {
  const { mapping, localDependenciesPrefix } = options
  const {
    events: eventsMapping,
    elements: elementsMapping,
    attributes: attributesMapping,
  } = mapping
  const originalElement = element
  const originalElementType = originalElement.elementType
  const mappedElement = elementsMapping[originalElement.elementType] || {
    elementType: originalElement.semanticType ?? originalElement.elementType, // identity mapping
  }

  // Setting up the name of the node based on the type, if it is not supplied
  originalElement.name = originalElement.name || originalElement.elementType

  // Mapping the type from the semantic type of the mapping
  // Semantic type has precedence as it is dictated by the user
  originalElement.elementType = originalElement.semanticType || mappedElement.elementType

  if (mappedElement.ignore) {
    originalElement.ignore = mappedElement.ignore
  }

  if (mappedElement.selfClosing) {
    originalElement.selfClosing = mappedElement.selfClosing
  }

  // Resolve dependency with the UIDL having priority
  if (originalElement.dependency || mappedElement.dependency) {
    originalElement.dependency = resolveDependency(
      mappedElement,
      originalElement.dependency,
      localDependenciesPrefix
    )
  }

  // Resolve assets prefix inside style (ex: background-image)
  if (originalElement.style && options?.assets) {
    originalElement.style = prefixAssetURLs(originalElement.style, options.assets)
  }

  // Map events separately
  if (originalElement.events && eventsMapping) {
    originalElement.events = resolveEvents(originalElement.events, eventsMapping)
  }

  // Prefix the attributes which may point to local assets
  if (originalElement.attrs && options?.assets) {
    Object.keys(originalElement.attrs).forEach((attrKey) => {
      const attrValue = originalElement.attrs[attrKey]
      if (attrValue.type === 'static' && typeof attrValue.content === 'string') {
        originalElement.attrs[attrKey].content = UIDLUtils.prefixAssetsPath(
          attrValue.content,
          options.assets
        )
      }
    })
  }

  // Merge UIDL attributes to the attributes coming from the mapping object
  if (mappedElement.attrs) {
    originalElement.attrs = resolveAttributes(mappedElement.attrs, originalElement.attrs)
  }

  if (originalElement.attrs && attributesMapping) {
    const attrsKeys = Object.keys(originalElement.attrs)

    attrsKeys
      .filter((key) => attributesMapping[key])
      .forEach((key) => {
        originalElement.attrs[attributesMapping[key]] = originalElement.attrs[key]
        delete originalElement.attrs[key]
      })
  }

  if (mappedElement.children) {
    originalElement.children = resolveChildren(mappedElement.children, originalElement.children)

    // Solves an edge case for next.js by passing the styles from the <Link> tag to the <a> tag
    const anchorChild = originalElement.children.find(
      (child) => child.type === 'element' && child.content.elementType === 'a'
    ) as UIDLElementNode

    // only do it if there's a child <a> tag and the original element is a navlink
    const shouldPassStylesToAnchor =
      (originalElement?.style || originalElement?.referencedStyles) &&
      originalElementType === 'navlink' &&
      anchorChild
    if (shouldPassStylesToAnchor) {
      anchorChild.content.style = UIDLUtils.cloneObject(originalElement?.style || {})
      anchorChild.content.referencedStyles = UIDLUtils.cloneObject(
        originalElement?.referencedStyles || {}
      )
      originalElement.style = {}
      originalElement.referencedStyles = {}
    }
  }
}

export const resolveChildren = (mappedChildren: UIDLNode[], originalChildren: UIDLNode[] = []) => {
  let newChildren = UIDLUtils.cloneObject(mappedChildren)

  let placeholderFound = false
  newChildren.forEach((childNode) => {
    UIDLUtils.traverseNodes(childNode, (node, parentNode) => {
      if (node.type !== 'comp-style' && !isPlaceholderNode(node)) {
        return // we're only interested in placeholder nodes
      }

      if (parentNode !== null) {
        if (parentNode.type === 'element') {
          // children nodes can only be added to type 'element'
          // filter out the placeholder node and add the original children instead
          parentNode.content.children = replacePlaceholderNode(
            parentNode.content.children,
            originalChildren
          )
          placeholderFound = true
        }
      } else {
        // when parent is null, we work on the root children array for the given element
        newChildren = replacePlaceholderNode(newChildren, originalChildren)
        placeholderFound = true
      }
    })
  })

  // If a placeholder was found, it was removed and replaced with the original children somewhere inside the newChildren array
  if (placeholderFound) {
    return newChildren
  }

  // If no placeholder was found, newChildren are appended to the original children
  return [...originalChildren, ...newChildren]
}

const isPlaceholderNode = (node: UIDLNode) =>
  node.type === 'dynamic' && node.content.referenceType === 'children'

// Replaces a single occurrence of the placeholder node (referenceType = 'children') with the original children of the element
const replacePlaceholderNode = (nodes: UIDLNode[], insertedNodes: UIDLNode[]) => {
  for (let index = 0; index < nodes.length; index++) {
    if (isPlaceholderNode(nodes[index])) {
      const retValue = [
        ...nodes.slice(0, index),
        ...insertedNodes,
        ...nodes.slice(index + 1, nodes.length),
      ]

      return retValue
    }
  }

  return nodes
}

const resolveRepeat = (repeatContent: UIDLRepeatContent, parentNode: UIDLNode) => {
  const { dataSource } = repeatContent
  if (dataSource.type === 'dynamic' && dataSource.content.referenceType === 'attr') {
    const nodeDataSourceAttr = dataSource.content.id
    const parentElement = parentNode.type === 'element' ? parentNode.content : null

    if (parentElement && parentElement.attrs) {
      repeatContent.dataSource = parentElement.attrs[nodeDataSourceAttr]
      // remove original attribute so it is not added as a static/dynamic value on the node
      delete parentElement.attrs[nodeDataSourceAttr]
    }
  }
}

// Generates an unique key for each node in the UIDL.
// By default it uses the component `name` and in case there are multiple nodes with the same name
// it uses an incremental key which is padded with 0, so it can generate things like:
// container, container1, container2, etc. OR
// container, container01, container02, ... container10, container11,... in case the number is higher
export const generateUniqueKeys = (node: UIDLNode, lookup: ElementsLookup) => {
  UIDLUtils.traverseElements(node, (element) => {
    // If a certain node name (ex: "container") is present multiple times in the component, it will be counted here
    // NextKey will be appended to the node name to ensure uniqueness inside the component
    // Element name is stored as a lower case string in the lookup
    const nodeOcurrence = lookup[element.name.toLowerCase()]

    if (nodeOcurrence.count === 1) {
      // If the name ocurrence is unique we use it as it is
      element.key = element.name
    } else {
      const currentKey = nodeOcurrence.nextKey
      element.key = generateKey(element.name, currentKey)
      nodeOcurrence.nextKey = generateNextIncrementalKey(currentKey)
    }
  })
}

const generateKey = (name: string, key: string): string => {
  const firstOcurrence = parseInt(key, 10) === 0
  return firstOcurrence ? name : name + key
}

const generateNextIncrementalKey = (currentKey: string): string => {
  const nextNumericValue = parseInt(currentKey, 10) + 1
  let returnValue = nextNumericValue.toString()
  while (returnValue.length < currentKey.length) {
    // pad with 0
    returnValue = '0' + returnValue
  }
  return returnValue
}

export const createNodesLookup = (node: UIDLNode, lookup: ElementsLookup) => {
  UIDLUtils.traverseElements(node, (element) => {
    // Element name is stored as a lower case string in the lookup
    const elementName = element.name.toLowerCase()
    if (!lookup[elementName]) {
      lookup[elementName] = {
        count: 0,
        nextKey: '0',
      }
    }

    lookup[elementName].count++
    const newCount = lookup[elementName].count
    if (newCount > 9 && isPowerOfTen(newCount)) {
      // Add a '0' each time we pass a power of ten: 10, 100, 1000, etc.
      // nextKey will start either from: '0', '00', '000', etc.
      lookup[elementName].nextKey = '0' + lookup[elementName].nextKey
    }
  })
}

const isPowerOfTen = (value: number) => {
  while (value > 9 && value % 10 === 0) {
    value /= 10
  }

  return value === 1
}

export const ensureDataSourceUniqueness = (node: UIDLNode) => {
  let index = 0

  UIDLUtils.traverseRepeats(node, (repeat) => {
    if (repeat.dataSource.type === 'static' && !customDataSourceIdentifierExists(repeat)) {
      repeat.meta = repeat.meta || {}
      repeat.meta.dataSourceIdentifier = index === 0 ? 'items' : `items${index}`
      index += 1
    }
  })
}

const customDataSourceIdentifierExists = (repeat: UIDLRepeatContent) => {
  return !!(repeat.meta && repeat.meta.dataSourceIdentifier)
}

export function parseStaticStyles(styles: string) {
  const stylesList: string[] = []
  const tokens = /[,\(\)]/
  let parens = 0
  let buffer = ''

  if (styles == null) {
    return stylesList
  }

  while (styles.length) {
    const match = tokens.exec(styles)
    if (!match) {
      break
    }
    const char = match[0]
    let ignoreChar = false
    let foundAssetId = false

    switch (char) {
      case ',':
        if (!parens) {
          if (buffer) {
            stylesList.push(buffer.trim())
            buffer = ''
          } else {
            foundAssetId = true
          }

          ignoreChar = true
        }
        break
      case '(':
        parens++
        break
      case ')':
        parens--
        break
      default:
        break
    }

    const index = match.index + 1
    buffer += styles.slice(0, ignoreChar ? index - 1 : index)
    styles = styles.slice(index)

    if (foundAssetId) {
      stylesList.push(buffer.trim())
      buffer = ''
      ignoreChar = true
    }
  }

  if (buffer.length || styles.length) {
    stylesList.push((buffer + styles).trim())
  }

  return stylesList
}

/**
 * Prefixes all urls inside the style object with the assetsPrefix
 * @param style the style object on the current node
 * @param assets comes from project generator options which contains the prefix, mappings and identifier
 */

export const prefixAssetURLs = <
  T extends UIDLStaticValue | UIDLDynamicReference | UIDLStyleSetTokenReference
>(
  style: Record<string, T>,
  assets: GeneratorOptions['assets']
): Record<string, T> => {
  // iterate through all the style keys
  return Object.keys(style).reduce((acc: Record<string, T>, styleKey: string) => {
    const styleValue = style[styleKey]

    switch (styleValue.type) {
      case 'dynamic':
        acc[styleKey] = styleValue
        return acc
      case 'static':
        const staticContent = styleValue.content
        if (typeof staticContent === 'number') {
          acc[styleKey] = styleValue
          return acc
        }

        if (typeof staticContent === 'string' && STYLE_PROPERTIES_WITH_URL.includes(styleKey)) {
          // need to split the styles in case of multiple background being added (eg: gradient + bgImage)
          let styleList = parseStaticStyles(staticContent)
          styleList = styleList.map((subStyle) => {
            const asset =
              staticContent.indexOf('url(') === -1
                ? subStyle
                : subStyle.match(/\((.*?)\)/)[1].replace(/('|")/g, '')

            /*
              background image such as gradient shouldn't be urls
              we prevent that by checking if the value is actually an asset or not (same check as in the prefixAssetsPath function
              but we don't compute and generate a url)
            */
            if (!asset.startsWith('/')) {
              return subStyle
            }

            const url = UIDLUtils.prefixAssetsPath(asset, assets)
            const newStyleValue = `url("${url}")`
            return newStyleValue
          })

          acc[styleKey] = {
            type: 'static',
            content: styleList.join(','),
          } as T
        } else {
          acc[styleKey] = styleValue
        }
        return acc
      default:
        throw new Error(`Invalid styleValue type '${styleValue}'`)
    }
  }, {})
}

const resolveAttributes = (
  mappedAttrs: Record<string, UIDLAttributeValue>,
  uidlAttrs: Record<string, UIDLAttributeValue>
) => {
  // We gather the results here uniting the mapped attributes and the uidl attributes.
  const resolvedAttrs: Record<string, UIDLAttributeValue> = {}

  // This will gather all the attributes from the UIDL which are mapped using the elements-mapping
  // These attributes will not be added on the tag as they are, but using the elements-mapping
  // Such an example is the url attribute on the Link tag, which needs to be mapped in the case of html to href
  const mappedAttributes: string[] = []
  // First we iterate through the mapping attributes and we add them to the result
  Object.keys(mappedAttrs).forEach((key) => {
    const attrValue = mappedAttrs[key]
    if (!attrValue) {
      return
    }

    if (attrValue.type === 'dynamic' && attrValue.content.referenceType === 'attr') {
      // we lookup for the attributes in the UIDL and use the element-mapping key to set them on the tag
      // ex: Link has an 'url' attribute in the UIDL, but it needs to be mapped to 'href' in the case of HTML
      const uidlAttributeKey = attrValue.content.id
      if (uidlAttrs && uidlAttrs[uidlAttributeKey]) {
        resolvedAttrs[key] = uidlAttrs[uidlAttributeKey]
        mappedAttributes.push(uidlAttributeKey)
      }

      return
    }

    resolvedAttrs[key] = mappedAttrs[key]
  })

  // The UIDL attributes can override the mapped attributes, so they come last
  if (uidlAttrs) {
    Object.keys(uidlAttrs).forEach((key) => {
      // Skip the attributes that were mapped as referenceType = 'attr'
      if (!mappedAttributes.includes(key)) {
        resolvedAttrs[key] = uidlAttrs[key]
      }
    })
  }

  return resolvedAttrs
}

const resolveDependency = (
  mappedElement: UIDLElement,
  uidlDependency?: UIDLDependency,
  localDependenciesPrefix = './'
) => {
  // If dependency is specified at UIDL level it will have priority over the mapping one
  const nodeDependency = uidlDependency || mappedElement.dependency
  if (nodeDependency && nodeDependency.type === 'local') {
    // When a dependency is specified without a path, we infer it is a local import.

    // ex: PrimaryButton component should be written in a file called primary-button
    // This is just a fallback for when the dependency path is not set by a project generator
    const componentName = mappedElement.elementType
    const componentFileName = StringUtils.camelCaseToDashCase(componentName)

    // concatenate a trailing slash in case it's missing
    if (localDependenciesPrefix[localDependenciesPrefix.length - 1] !== '/') {
      localDependenciesPrefix = localDependenciesPrefix + '/'
    }

    nodeDependency.path = nodeDependency.path || localDependenciesPrefix + componentFileName
  }

  return nodeDependency
}

const resolveEvents = (events: UIDLEventDefinitions, eventsMapping: Record<string, string>) => {
  const resultedEvents: UIDLEventDefinitions = {}
  Object.keys(events).forEach((eventKey) => {
    const resolvedKey = eventsMapping[eventKey] || eventKey
    resultedEvents[resolvedKey] = events[eventKey]
  })

  return resultedEvents
}

export const checkForIllegalNames = (uidl: ComponentUIDL, mapping: Mapping) => {
  const { illegalClassNames, illegalPropNames } = mapping
  if (illegalClassNames.includes(uidl.outputOptions.componentClassName)) {
    console.warn(
      `Illegal component name '${uidl.outputOptions.componentClassName}'. Appending 'App' in front of it`
    )
    uidl.outputOptions.componentClassName = `App${uidl.outputOptions.componentClassName}`
  }

  if (uidl.propDefinitions) {
    Object.keys(uidl.propDefinitions).forEach((prop) => {
      if (illegalPropNames.includes(prop)) {
        throw new Error(`Illegal prop key '${prop}'`)
      }
    })
  }

  if (uidl.stateDefinitions) {
    Object.keys(uidl.stateDefinitions).forEach((state) => {
      if (illegalPropNames.includes(state)) {
        throw new Error(`Illegal state key '${state}'`)
      }
    })
  }
}

export const checkForDefaultPropsContainingAssets = (
  uidl: ComponentUIDL,
  assets: GeneratorOptions['assets']
) => {
  if (uidl.propDefinitions) {
    Object.keys(uidl.propDefinitions).forEach((prop) => {
      const propDefaultValue = uidl.propDefinitions[prop].defaultValue
      if (typeof propDefaultValue === 'string' && assets) {
        uidl.propDefinitions[prop].defaultValue = UIDLUtils.prefixAssetsPath(
          propDefaultValue,
          assets
        )
      }
    })
  }
}

export const checkForDefaultStateValueContainingAssets = (
  uidl: ComponentUIDL,
  assets: GeneratorOptions['assets']
) => {
  if (uidl.stateDefinitions) {
    Object.keys(uidl.stateDefinitions).forEach((state) => {
      const stateDefaultValue = uidl.stateDefinitions[state].defaultValue
      if (typeof stateDefaultValue === 'string' && assets) {
        uidl.stateDefinitions[state].defaultValue = UIDLUtils.prefixAssetsPath(
          stateDefaultValue,
          assets
        )
      }
    })
  }
}

'''
'''--- packages/teleport-uidl-resolver/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- packages/teleport-uidl-validator/README.md ---
# teleport-uidl-validator

A module that offers validation and parsing for non-standard UIDL structures.

> This package is part of the [teleport ecosystem](https://github.com/teleporthq/teleport-code-generators). For a complete guide, check out the [official documentation](https://docs.teleporthq.io/).

## Install
```bash
npm install @teleporthq/teleport-uidl-validator
```
or
```bash
yarn add @teleporthq/teleport-uidl-validator
```

'''
'''--- packages/teleport-uidl-validator/__tests__/parser/componennt-with-referenced-styles.json ---
{
    "name": "ComponentWithPrimitiveProps",
    "propDefinitions": {
      "test": {
        "type": "string",
        "defaultValue": "123"
      },
      "content": {
        "type": "object",
        "defaultValue": {
          "heading": "Hello World"
        }
      }
    },
    "node": {
      "type": "element",
      "content": {
        "elementType": "container",
        "referencedStyles": {
            "5ed0cb9ff4fd989551c4edc0": {
                "id": "5ed0cb9ff4fd989551c4edc0",
                "type": "style-map",
                "content": {
                    "mapType": "inlined",
                    "conditions": [
                        { "conditionType": "screen-size", "maxWidth": 991 }
                    ],
                    "styles": {
                        "flex-wrap": "wrap"
                    } 
                }
            }
        },
        "style": {
          "flexDirection": {
            "type": "dynamic",
            "content": {
              "referenceType":"prop",
              "id": "test"
            }
          },
          "alignSelf": {"type":"static", "content": "center"}
        },
  
        "attrs": {
          "data-test": {
            "type": "dynamic",
            "content": {
              "referenceType":"prop",
              "id": "test"
            }
          },
          "data-static": { "type":"static", "content":"I am just a static string"},
          "data-inner-value": {
                  "type": "dynamic",
                  "content": {
                    "referenceType":"prop",
                    "id": "content.heading"
                  }
                }
        },
        
        "children": [
          {"type":"static", "content": "hello I am a test"},
          {"type": "dynamic", "content": {"referenceType": "prop", "id": "content.heading"}},
          {"type": "dynamic", "content": {"referenceType":"prop", "id": "children"}},
          {
            "type": "element",
            "content": {
              "elementType": "container",
              
              "style": {
                "flexDirection": {
                  "type": "dynamic",
                  "content": {
                    "referenceType":"prop",
                    "id": "test"
                  }
                },
                "alignSelf": {"type":"static", "content": "center"}
              },
        
              "attrs": {
                "data-test": {
                  "type": "dynamic",
                  "content": {
                    "referenceType":"prop",
                    "id": "test"
                  }
                },
                "data-static": { "type":"static", "content":"I am just a static string"},
                "data-inner-value": {
                  "type": "dynamic",
                  "content": {
                    "referenceType":"prop",
                    "id": "content.heading"
                  }
                }
              },
  
              "children": [
                {"type":"static", "content": "hello I am a test"},
                {"type": "dynamic", "content": {"referenceType": "prop", "id": "content.heading"}},
                {"type": "dynamic", "content": {"referenceType": "prop", "id": "children"}}
              ]
            }
          }
        ]
      }
    }
  }
'''
'''--- packages/teleport-uidl-validator/__tests__/parser/component-parsing.ts ---
// @ts-ignore
import componentInputJSON from './component-with-primitive-values.json'
// @ts-ignore
import componentResultJSON from './component-with-proper-values.json'
// @ts-ignore
import componentStyleSetsInputJSON from './component-with-reusalble-styles.json'
// @ts-ignore
import componentWithReferencedStylesJSON from './componennt-with-referenced-styles.json'

import { parseComponentJSON, parseProjectJSON } from '../../src/parser'
import { ComponentUIDL } from '@teleporthq/teleport-types'

describe('parseComponentJSON', () => {
  it('transforms primitive component values', () => {
    const componentResult = parseComponentJSON(componentInputJSON)
    expect(componentResult).toEqual(componentResultJSON)
  })
})

describe('parseProjectJSON', () => {
  it('transforms primitive project values', () => {
    const componentResult = parseProjectJSON({
      root: componentInputJSON,
      components: {
        test: componentInputJSON,
      },
    })
    expect(componentResult).toEqual({
      root: componentResultJSON,
      components: {
        test: componentResultJSON,
      },
    })
  })
})

describe('styleSetDefinitions in root of Project UIDL', () => {
  it('Parses and convertes string styles to static nodes in styleSetDefinitions', () => {
    const result = parseProjectJSON({
      root: componentStyleSetsInputJSON,
      components: {},
    })

    expect(result.root.styleSetDefinitions).toStrictEqual({
      primaryButton: {
        type: 'reusable-project-style-map',
        content: {
          background: {
            type: 'static',
            content: 'blue',
          },
          width: {
            type: 'static',
            content: 'auto',
          },
          color: {
            type: 'static',
            content: '#fff',
          },
          border: {
            type: 'static',
            content: '1px solid #fff',
          },
        },
      },
      secondaryButton: {
        type: 'reusable-project-style-map',
        content: {
          background: {
            type: 'static',
            content: 'red',
          },
          width: {
            type: 'static',
            content: 'auto',
          },
          color: {
            type: 'static',
            content: '#fff',
          },
          border: {
            type: 'static',
            content: '1px solid #fff',
          },
        },
      },
    })
  })
})

describe('RefernecedStyles for ComponentUIDL', () => {
  it('Parser referencedStyles and generate static nodes for string based styles', () => {
    const result = parseComponentJSON(componentWithReferencedStylesJSON)

    expect(
      result.node.content.referencedStyles['5ed0cb9ff4fd989551c4edc0'].content.styles
    ).toStrictEqual({ 'flex-wrap': { type: 'static', content: 'wrap' } })
  })

  it('Parses referencedStyles with project-referenced nodes', () => {
    const uidl = componentStyleSetsInputJSON as unknown as ComponentUIDL
    uidl.node.content.referencedStyles = {
      ...uidl.node.content.referencedStyles,
      '5ed6146d471fde6d6a47ba16': {
        type: 'style-map',
        content: {
          mapType: 'project-referenced',
          referenceId: 'secondaryButton',
        },
      },
    }

    const result = parseComponentJSON(uidl as unknown as Record<string, unknown>)
    expect(result).toEqual(result)
  })
})

'''
'''--- packages/teleport-uidl-validator/__tests__/parser/component-referenced.ts ---
import { component, elementNode } from '@teleporthq/teleport-uidl-builders'
import { parseComponentJSON } from '../../src/parser'

describe('Parses referenced Styles and parsers static or number', () => {
  it('Converts the static values to Static Nodes', () => {
    const componentUIDL = component(
      'MyComponent',
      elementNode('container', {}, [], null, {}, null, {})
    )
    componentUIDL.node.content.referencedStyles = {
      '12345678': {
        type: 'style-map',
        content: {
          mapType: 'component-referenced',
          content: {
            type: 'static',
            content: 'md-8',
          },
        },
      },
    }
    const result = parseComponentJSON(componentUIDL as unknown as Record<string, unknown>)
    // @ts-ignore
    expect(Object.values(result.node.content.referencedStyles)[0].content.content.type).toBe(
      'static'
    )
  })

  it('Throws error if the mapType is invalid', () => {
    const componentUIDL = component(
      'MyComponent',
      elementNode('container', {}, [], null, {}, null, {})
    )
    componentUIDL.node.content.referencedStyles = {
      '12345678': {
        type: 'style-map',
        content: {
          // @ts-ignore
          mapType: 'invalid-type',
          // @ts-ignore
          content: 'md-8',
        },
      },
    }

    expect(() => parseComponentJSON(componentUIDL as unknown as Record<string, unknown>)).toThrow(
      'Un-expected mapType passed in referencedStyles - invalid-type'
    )
  })
})

'''
'''--- packages/teleport-uidl-validator/__tests__/parser/component-with-primitive-values.json ---
{
  "name": "ComponentWithPrimitiveProps",
  "propDefinitions": {
    "test": {
      "type": "string",
      "defaultValue": "123"
    },
    "content": {
      "type": "object",
      "defaultValue": {
        "heading": "Hello World"
      }
    }
  },
  "node": {
    "type": "element",
    "content": {
      "elementType": "container",

      "style": {
        "flexDirection": "$props.test",
        "alignSelf": "center"
      },

      "attrs": {
        "data-test": "$props.test",
        "data-static": "I am just a static string",
        "data-inner-value": "$props.content.heading"
      },
      
      "children": [
        "hello I am a test",
        "$props.content.heading",
        "$props.children",
        {
          "type": "element",
          "content": {
            "elementType": "container",
            
            "style": {
              "flexDirection": "$props.test",
              "alignSelf": "center"
            },
      
            "attrs": {
              "data-test": "$props.test",
              "data-static": "I am just a static string",
              "data-inner-value": "$props.content.heading"
            },

            "children": [
              "hello I am a test",
              "$props.content.heading",
              "$props.children"
            ]
          }
        }
      ]
    }
  }
}
'''
'''--- packages/teleport-uidl-validator/__tests__/parser/component-with-proper-values.json ---
{
  "name": "ComponentWithPrimitiveProps",
  "propDefinitions": {
    "test": {
      "type": "string",
      "defaultValue": "123"
    },
    "content": {
      "type": "object",
      "defaultValue": {
        "heading": "Hello World"
      }
    }
  },
  "node": {
    "type": "element",
    "content": {
      "elementType": "container",

      "style": {
        "flexDirection": {
          "type": "dynamic",
          "content": {
            "referenceType":"prop",
            "id": "test"
          }
        },
        "alignSelf": {"type":"static", "content": "center"}
      },

      "attrs": {
        "data-test": {
          "type": "dynamic",
          "content": {
            "referenceType":"prop",
            "id": "test"
          }
        },
        "data-static": { "type":"static", "content":"I am just a static string"},
        "data-inner-value": {
                "type": "dynamic",
                "content": {
                  "referenceType":"prop",
                  "id": "content.heading"
                }
              }
      },
      
      "children": [
        {"type":"static", "content": "hello I am a test"},
        {"type": "dynamic", "content": {"referenceType": "prop", "id": "content.heading"}},
        {"type": "dynamic", "content": {"referenceType":"prop", "id": "children"}},
        {
          "type": "element",
          "content": {
            "elementType": "container",
            
            "style": {
              "flexDirection": {
                "type": "dynamic",
                "content": {
                  "referenceType":"prop",
                  "id": "test"
                }
              },
              "alignSelf": {"type":"static", "content": "center"}
            },
      
            "attrs": {
              "data-test": {
                "type": "dynamic",
                "content": {
                  "referenceType":"prop",
                  "id": "test"
                }
              },
              "data-static": { "type":"static", "content":"I am just a static string"},
              "data-inner-value": {
                "type": "dynamic",
                "content": {
                  "referenceType":"prop",
                  "id": "content.heading"
                }
              }
            },

            "children": [
              {"type":"static", "content": "hello I am a test"},
              {"type": "dynamic", "content": {"referenceType": "prop", "id": "content.heading"}},
              {"type": "dynamic", "content": {"referenceType": "prop", "id": "children"}}
            ]
          }
        }
      ]
    }
  }
}
'''
'''--- packages/teleport-uidl-validator/__tests__/parser/component-with-reusalble-styles.json ---
{
    "name": "ComponentWithPrimitiveProps",
    "styleSetDefinitions": {
        "primaryButton": {
            "type": "reusable-project-style-map",
            "content": {
              "background": "blue",
              "width": "auto",
              "color": "#fff",
              "border": "1px solid #fff"
            }
        },
        "secondaryButton": {
            "type": "reusable-project-style-map",
            "content": {
                "background": "red",
                "width": "auto",
                "color": "#fff",
                "border": "1px solid #fff"
            }
        }
    },
    "propDefinitions": {
      "test": {
        "type": "string",
        "defaultValue": "123"
      },
      "content": {
        "type": "object",
        "defaultValue": {
          "heading": "Hello World"
        }
      }
    },
    "node": {
      "type": "element",
      "content": {
        "elementType": "container",
        "referencedStyles": {},
        "style": {
          "flexDirection": {
            "type": "dynamic",
            "content": {
              "referenceType":"prop",
              "id": "test"
            }
          },
          "alignSelf": {"type":"static", "content": "center"}
        },
  
        "attrs": {
          "data-test": {
            "type": "dynamic",
            "content": {
              "referenceType":"prop",
              "id": "test"
            }
          },
          "data-static": { "type":"static", "content":"I am just a static string"},
          "data-inner-value": {
                  "type": "dynamic",
                  "content": {
                    "referenceType":"prop",
                    "id": "content.heading"
                  }
                }
        },
        
        "children": [
          {"type":"static", "content": "hello I am a test"},
          {"type": "dynamic", "content": {"referenceType": "prop", "id": "content.heading"}},
          {"type": "dynamic", "content": {"referenceType":"prop", "id": "children"}},
          {
            "type": "element",
            "content": {
              "elementType": "container",
              
              "style": {
                "flexDirection": {
                  "type": "dynamic",
                  "content": {
                    "referenceType":"prop",
                    "id": "test"
                  }
                },
                "alignSelf": {"type":"static", "content": "center"}
              },
        
              "attrs": {
                "data-test": {
                  "type": "dynamic",
                  "content": {
                    "referenceType":"prop",
                    "id": "test"
                  }
                },
                "data-static": { "type":"static", "content":"I am just a static string"},
                "data-inner-value": {
                  "type": "dynamic",
                  "content": {
                    "referenceType":"prop",
                    "id": "content.heading"
                  }
                }
              },
  
              "children": [
                {"type":"static", "content": "hello I am a test"},
                {"type": "dynamic", "content": {"referenceType": "prop", "id": "content.heading"}},
                {"type": "dynamic", "content": {"referenceType": "prop", "id": "children"}}
              ]
            }
          }
        ]
      }
    }
  }
'''
'''--- packages/teleport-uidl-validator/__tests__/validator/component-element-with-empty-name.json ---
{
  "name": "Simple Component",
  "propDefinitions": {
    "heading": {
      "type": "string",
      "defaultValue": "Hello"
    }
  },
  "node": {
    "type": "element",
    "content": {
      "elementType": "container",
      "name": "",
      "referencedStyles": {},
      "abilities": {},
      "children": [
        {
          "type": "element",
          "content": {
            "elementType": "text",
            "referencedStyles": {},
            "abilities": {},
            "children": [
              {
                "type": "static",
                "content": "Hello"
              }
            ],
            "semanticType": "span"
          }
        }
      ],
      "semanticType": "div"
    }
  }
}
'''
'''--- packages/teleport-uidl-validator/__tests__/validator/component-invalid-sample.json ---
{
  "name": "New UIDL",
  "propDefinitions": {
    "title": {
      "type": "string",
      "defaultValue": "Hello"
    },
    "items": {
      "type": "array",
      "defaultValue": []
    },
    "test": {
      "type": "string",
      "defaultValues": "test"
    }
  },
  "stateDefinitions": {
    "isVisible": {
      "type": "boolean",
      "defaultValue": true,
      "test":"test"
    },
    "test": {
      "type": "string",
      "defaultValues": "test"
    }
  },
  "node": {
    "type": "element",
    "content": {
      "elementType": "container",
      "attrs": {
        "data-static-attr": {
          "type": "static",
          "content": "test"
        },
        "data-dynamic-attr": {
          "type": "dynamic",
          "content": {
            "referenceType": "prop",
            "id": "title"
          }
        }
      },
      "children": [
        {
          "type": "element",
          "content": {
            "elementType": "text",
            "children": [
              {
                "type": "static",
                "content": "Hello World!"
              },
              {
                "type": "dynamic",
                "content": {
                  "referenceType": "prop",
                  "id": "titles"
                }
              }
            ]
          }
        },
        {
          "type": "repeat",
          "content": {
            "node": {
              "type": "element",
              "content": {
                "elementType": "text",
                "children": [
                  {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "local",
                      "id": "item"
                    }
                  },
                  {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "local",
                      "id": "index"
                    }
                  },
                  {
                    "type": "element",
                    "content": {
                      "elementType": "list",
                      "attrs": {
                        "items": {
                          "type": "static",
                          "content": ["angular", "react", "vue"]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "dataSource": {
              "type": "dynamic",
              "content": {
                "referenceType": "prop",
                "id": "items"
              }
            },
            "meta": {
              "useIndex": false,
              "iteratorName": "item"
            }
          }
        },
        {
          "type": "repeat",
          "content": {
            "node": {
              "type": "element",
              "content": {
                "elementType": "text",
                "children": [
                  {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "local",
                      "id": "item"
                    }
                  },
                  {
                    "type": "element",
                    "content": {
                      "elementType": "list",
                      "attrs": {
                        "items": {
                          "type": "static",
                          "content": ["angular", "react", "vue"]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "dataSource": {
              "type": "dynamic",
              "content": {
                "referenceType": "prop",
                "id": "items"
              }
            },
            "meta": {
              "useIndex": true,
              "iteratorName": "item-test"
            }
          }
        },
        {
          "type": "conditional",
          "content": {
            "reference": {
              "type": "dynamic",
              "content": {
                "referenceType": "state",
                "id": "isVisibles"
              }
            },
            "value": true,
            "node": {
              "type": "element",
              "content": {
                "elementType": "text",
                "children": [{
                  "type": "static",
                  "content": "Now you see me!"
                }]
              }
            }
          }
        }
      ]
    }
  }
}
'''
'''--- packages/teleport-uidl-validator/__tests__/validator/component-uidl-with-event-modifier-undefined.json ---
{
  "name": "Simple Component",
  "node": {
    "type": "element",
    "content": {
      "elementType": "container",
      "children": [
        {
          "type": "element",
          "content": {
            "elementType": "button",
            "name": "openmodal",
            "children": [
              {
                "type": "static",
                "content": "Show Popup"
              }
            ],
            "events": {
              "click": [
                {
                  "type": "stateChange",
                  "modifies": "isOpen",
                  "newState": true
                }
              ]
            },
            "attrs": {
              "data-static-attr": {
                "type": "static",
                "content": "test"
              }
            },
            "attributes": {
              "htmlFor": {
                "type": "static",
                "content": "test"
              }
            }
          }
        }
      ]
    }
  }
}
'''
'''--- packages/teleport-uidl-validator/__tests__/validator/component-uidl-with-null-undefined.json ---
{
    "name": "Sample Component",
    "node": {
      "type": "element",
      "content": {
        "elementType": "div",
        "name": "div",
        "children": [
          {
            "type": "static",
            "content": "Hello World"
          }
        ],
        "attrs": {},
        "style": {
          "width": {
            "type": "static",
            "content": "100px"
          },
          "height": null
        }
      }
    }
  }
'''
'''--- packages/teleport-uidl-validator/__tests__/validator/index.ts ---
import { Validator } from '../../src'

// @ts-ignore
import ComponentUidlElementWithEmptyName from './component-element-with-empty-name.json'
// @ts-ignore
import componentUidlWithEventModifierUndefined from './component-uidl-with-event-modifier-undefined.json'
// @ts-ignore
import invalidComponentUidlSample from './component-invalid-sample.json'
// @ts-ignore
import projectUidlSample from './project-sample.json'
// @ts-ignore
import oldInvalidProjectUidlSample from './old-project-invalid-sample.json'
// @ts-ignore
import invalidProjectUidlSample from './project-invalid-sample.json'
// @ts-ignore
import noRouteProjectUidlSample from './project-invalid-sample-no-route.json'
import uidlWithNull from './component-uidl-with-null-undefined.json'

import {
  component,
  definition,
  repeatNode,
  dynamicNode,
  elementNode,
} from '@teleporthq/teleport-uidl-builders'
import { ComponentUIDL, UIDLStyleInlineAsset } from '@teleporthq/teleport-types'
import { parseProjectJSON } from '../../src/parser'

const uidl = component(
  'Repeat Component',
  elementNode('container', {}, [
    repeatNode(
      elementNode('div', {}, [dynamicNode('local', 'item')]),
      dynamicNode('prop', 'items'),
      {
        useIndex: true,
      }
    ),
  ]),
  { items: definition('array', ['hello', 'world']) },
  { items: definition('array', ['hello', 'world']) }
)

describe('Validate UIDL', () => {
  it('Component UIDL with null /  undefined in the JSON', () => {
    const validator = new Validator()
    expect(() =>
      validator.validateComponentSchema(uidlWithNull as unknown as Record<string, unknown>)
    ).toThrow(Error)
  })

  describe('Component UIDL Format', () => {
    it('returns object with valid=true and errorMsg="" if uidl is valid', () => {
      const validator = new Validator()
      const validationResult = validator.validateComponentSchema(
        uidl as unknown as Record<string, unknown>
      )

      expect(typeof validationResult).toBe('object')
      expect(validationResult.valid).toEqual(true)
      expect(validationResult.errorMsg).toEqual('')
      expect(typeof validationResult.componentUIDL).toBe('object')
    })

    it('returns customized errors', () => {
      const validator = new Validator()
      expect(() => validator.validateComponentSchema(invalidComponentUidlSample)).toThrow(Error)
    })
  })

  describe('Component UIDL Content', () => {
    it('returns object with valid=true and errorMSG="" if everything is ok', () => {
      const validator = new Validator()
      const validationResult = validator.validateComponentContent(uidl)

      expect(typeof validationResult).toBe('object')
      expect(validationResult.valid).toEqual(true)
      expect(validationResult.errorMsg).toEqual('')
    })

    it('throws error if prop and state is used but not defined in propDefinitions', () => {
      const validator = new Validator()
      // @ts-ignore
      expect(() => validator.validateComponentContent(invalidComponentUidlSample)).toThrow(Error)

      //       expect(validationResult.errorMsg).toBe(
      //         `\nUIDL Component Content Validation Error. Please check the following:
      // "titles" is used but not defined. Please add it in propDefinitions,
      // "isVisibles" is used but not defined. Please add it in stateDefinitions,
      // Index variable is used but the "useIndex" meta information is false.,
      // "item" is used in the "repeat" structure but the iterator name has this value: "item-test"`
      //       )
    })

    it('throws error if prop and state is used but not defined in propDefinitions', () => {
      const validator = new Validator()
      // @ts-ignore
      expect(() => validator.validateComponentContent(invalidComponentUidlSample)).toThrow(Error)

      //       expect(validationResult.errorMsg).toBe(
      //         `\nUIDL Component Content Validation Error. Please check the following:
      // "titles" is used but not defined. Please add it in propDefinitions,
      // "isVisibles" is used but not defined. Please add it in stateDefinitions,
      // Index variable is used but the "useIndex" meta information is false.,
      // "item" is used in the "repeat" structure but the iterator name has this value: "item-test"`
      //       )
    })

    it('does not throw error if props and states have same keys', () => {
      const validator = new Validator()
      const warn = jest.spyOn(global.console, 'warn')

      const validationResult = validator.validateComponentContent(uidl)

      expect(typeof validationResult).toBe('object')
      expect(validationResult.valid).toEqual(true)
      expect(validationResult.errorMsg).toEqual('')
      expect(warn).toHaveBeenCalled()
    })

    it('throws an error if event is modifying the state, which is not defined in stateDefinitions', () => {
      const validator = new Validator()
      // @ts-ignore
      expect(() =>
        validator.validateComponentContent(componentUidlWithEventModifierUndefined as ComponentUIDL)
      ).toThrow(Error)

      // expect(validationResult.errorMsg).toBe(
      //   `\nUIDL Component Content Validation Error. Please check the following:
      //    "isOpen" is used in events, but not defined. Please add it in stateDefinitions
      // )
    })

    it('throws an error if event name is empty string', () => {
      const validator = new Validator()
      // @ts-ignore
      expect(() => validator.validateComponentSchema(ComponentUidlElementWithEmptyName)).toThrow(
        Error
      )

      // expect(validationResult.errorMsg).toBe(
      //  UIDL Format Validation Error. Please check the following:
      //  - Path undefined: Error: Name attribute cannot be empty.
      //  is a undefined
      // )
    })
  })

  describe('Project UIDL Format', () => {
    it('returns object with valid=true and errorMsg="" if uidl is valid', () => {
      const validator = new Validator()
      const validationResult = validator.validateProjectSchema(projectUidlSample)

      expect(typeof validationResult).toBe('object')
      expect(validationResult.valid).toEqual(true)
      expect(validationResult.errorMsg).toEqual('')
      expect(typeof validationResult.projectUIDL).toBe('object')
    })

    it('returns customized error', () => {
      const validator = new Validator()
      expect(() => validator.validateProjectSchema(invalidProjectUidlSample)).toThrow(Error)

      //   expect(validationResult.errorMsg).toBe(
      //     `\nUIDL Format Validation Error. Please check the following:
      //  - Path input: the key 'name' is required but was not present.
      //    is a DecoderError`
      //   )
    })

    it('supports older UIDL version and returns customized error', () => {
      const validator = new Validator()
      expect(() => validator.validateProjectSchema(oldInvalidProjectUidlSample)).toThrow(Error)

      // expect(validationResult.errorMsg).toBe(
      //   `\nUIDL Format Validation Error. Please check the following:
      //         - Path input: the key 'name' is required but was not present.
      //         is a DecoderError`
      // )
    })
  })

  describe('Project UIDL Content', () => {
    it('returns object with valid=true and errorMsg="" if uidl content is valid', () => {
      const validator = new Validator()
      // @ts-ignore
      const validationResult = validator.validateProjectContent(projectUidlSample)

      expect(typeof validationResult).toBe('object')
      expect(validationResult.valid).toEqual(true)
      expect(validationResult.errorMsg).toEqual('')
    })

    it('returns customized error if content is not properly defined', () => {
      const validator = new Validator()
      // @ts-ignore
      expect(() => validator.validateProjectContent(invalidProjectUidlSample)).toThrow(Error)

      //       expect(validationResult.errorMsg).toEqual(
      //         `\nUIDL Project Content Validation Error. Please check the following:
      // The component "Navbars" is not defined in the UIDL's component section.,
      // The following components have different name than their key: Navbar,OneComponent,
      // Root Node contains elements of type "static". It should contain only elements of type "conditional",
      // Root Node contains a route that don't have a specified state: abouts.`
      //       )
    })

    it('returns error if route is missing from state definitions', () => {
      const validator = new Validator()
      // @ts-ignore
      expect(() => validator.validateProjectContent(noRouteProjectUidlSample)).toThrow(Error)

      // expect(validationResult.errorMsg).toEqual(
      //   `\nUIDL Project Content Validation Error. Please check the following: Route is not defined in stateDefinitions`
      // )
    })
  })
})

describe('Parses UIDL and then converts the key-values to key-static-nodes', () => {
  it('Parsers key-values in attrs and converts to UIDL nodes', () => {
    const parsedUIDL = parseProjectJSON(projectUidlSample)
    expect((parsedUIDL.globals.assets[0] as UIDLStyleInlineAsset)?.attrs).toBeDefined()
  })
})

'''
'''--- packages/teleport-uidl-validator/__tests__/validator/old-project-invalid-sample.json ---
{
  "globals": {
    "settings": {
      "language": 1,
      "title": "teleportHQ",
      "key": "test"
    },
    "meta" : [
      { "name": "description", "content": "Free Web tutorials" },
      { "name": "keywords", "content": "prea bun, prea ca la tara" },
      { "name": "viewport", "content": "width=device-width, initial-scale=1.0" },
      { "property": "og:title", "content": "Free Web tutorials" },
      { "property": "og:url", "content": "/playground_assets/asdasd.png" }
    ],
    "manifest": {
      "icons": [
        {
          "src": "/playground_assets/icons-192.png",
          "type": "image/png",
          "sizes": "192x192"
        },
        {
          "src": "/playground_assets/icons-512.png",
          "type": "image/png",
          "sizes": "512x512"
        }
      ],
      "theme_color": "#822CEC",
      "background_color": "#822CEC"
    },
    "assets": [
      {
        "type": "style",
        "path": "https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css",
        "options": {
          "target": "body"
        }
      }, 
      {
        "type": "scripts",
        "path": "https://www.googletagmanager.com/gtm.js",
        "options": {
          "defer": true
        }
      },
      {
        "type": "script",
        "content": "console.log(\"inline script\")",
        "options": {
          "target": "body"
        }
      },
      {
        "type": "font",
        "path": "https://fonts.googleapis.com/css?family=Roboto"
      },
      {
        "type": "style",
        "content": "body{font-family: 'Roboto', sans-serif;}"
      },
      {
        "type": "icon",
        "path": "/playground_assets/favicon-32x32.png",
        "options": {
          "type": "image/png",
          "iconSizes": "32x32"
        }
      }
    ],
    "variables": {
      "primaryColor": "#822CEC",
      "secondaryColor": "#414141",
      "spacing": "10px"
    }
  },
  "root": {
    "name": "App",
    "stateDefinitions": {
      "route": {
        "type": "string",
        "defaultValue": "index",
        "values": [
          {
            "value": "index",
            "pageOptions": {
              "navLink": "/",
              "componentName": "Home"
            }
          },
          {
            "value": "about",
            "pageOptions": {
              "navLink": "/about",
              "componentName": "About"
            }
          },
          {
            "value": "contact-us",
            "pageOptions": {
              "navLink": "/here-we-are",
              "componentName": "Us"
            }
          }
        ]
      }
    },
    "node": {
      "type": "element",
      "content": {
        "elementType": "Router",
        "children": [
          {
            "type": "conditional",
            "content": {
              "node": {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "children": [
                    {
                      "type": "static",
                      "content": "Page 1"
                    }
                  ]
                }
              },
              "value": "index",
              "reference": {
                "type": "dynamic",
                "content": {
                  "referenceType": "state",
                  "id": "route"
                }
              }
            }
          },
          {
            "type": "conditional",
            "content": {
              "node": {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "children": [
                    {
                      "type": "static",
                      "content": "Page 2"
                    }
                  ]
                }
              },
              "value": "about",
              "reference": {
                "type": "dynamic",
                "content": {
                  "referenceType": "state",
                  "id": "route"
                }
              }
            }
          },{
            "type": "conditional",
            "content": {
              "node": {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "children": [
                    {
                      "type": "static",
                      "content": "Page 3"
                    }
                  ]
                }
              },
              "value": "contact-us",
              "reference": {
                "type": "dynamic",
                "content": {
                  "referenceType": "state",
                  "id": "route"
                }
              }
            }
          }
        ]
      }
    }
  },
  "components": {
    "OneComponent": {
      "name": "OneComponent",
      "propDefinitions": {
        "title": {
          "type": "string",
          "defaultValue": "Hello"
        },
        "items": {
          "type": "array",
          "defaultValue": []
        }
      },
      "stateDefinitions": {
        "isVisible": {
          "type": "boolean",
          "defaultValue": true
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "container",
          "attrs": {
            "data-static-attr": {
              "type": "static",
              "content": "test"
            },
            "data-dynamic-attr": {
              "type": "dynamic",
              "content": {
                "referenceType": "prop",
                "id": "title"
              }
            }
          },
          "children": [
            {
              "type": "element",
              "content": {
                "elementType": "text",
                "children": [
                  {
                    "type": "static",
                    "content": "Hello World!"
                  },
                  {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "prop",
                      "id": "title"
                    }
                  }
                ]
              }
            },
            {
              "type": "repeat",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "text",
                    "children": [
                      {
                        "type": "dynamic",
                        "content": {
                          "referenceType": "local",
                          "id": "item"
                        }
                      },
                      {
                        "type": "element",
                        "content": {
                          "elementType": "list",
                          "attrs": {
                            "items": {
                              "type": "static",
                              "content": ["angular", "react", "vue"]
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "dataSource": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "prop",
                    "id": "items"
                  }
                },
                "meta": {
                  "useIndex": true,
                  "iteratorName": "item"
                }
              }
            },
            {
              "type": "conditional",
              "content": {
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "isVisible"
                  }
                },
                "value": true,
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "text",
                    "children": [{
                      "type": "static",
                      "content": "Now you see me!"
                    }]
                  }
                }
              }
            }
          ]
        }
      }
    }
  }
}
'''
'''--- packages/teleport-uidl-validator/__tests__/validator/project-invalid-sample-no-route.json ---
{
  "name": "myVueProject",
  "globals": {
    "settings": {
      "language": "en",
      "title": "UIDL v0.6 Project"
    },
    "assets": [],
    "meta": []
  },
  "root": {
    "name": "App",
    "stateDefinitions": {
      "routes": {
        "type": "string",
        "defaultValue": "index",
        "values": [
          {
            "value": "index",
            "pageOptions": {
              "navLink": "/",
              "componentName": "Home"
            }
          },
          {
            "value": "abouts",
            "pageOptions": {
              "navLink": "/about",
              "componentName": "About"
            }
          },
          {
            "value": "contact-us",
            "pageOptions": {
              "navLink": "/here-we-are",
              "componentName": "Us"
            }
          }
        ]
      }
    },
    "node": {
      "type": "element",
      "content": {
        "elementType": "Router",
        "children": [
          {
            "type": "conditional",
            "content": {
              "node": {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "style": {
                    "border": "1px solid green",
                    "padding": {
                      "type": "static",
                      "content": "10px"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "semanticType": "Navbar",
                        "dependency": {
                          "type": "local"
                        }
                      }
                    },
                    {
                      "type": "static",
                      "content": "Page 1"
                    }
                  ]
                }
              },
              "value": "index",
              "reference": {
                "type": "dynamic",
                "content": {
                  "referenceType": "state",
                  "id": "route"
                }
              }
            }
          },
          {
            "type": "conditional",
            "content": {
              "node": {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "style": {
                    "border": {
                      "type": "static",
                      "content": "1px solid black"
                    },
                    "padding": {
                      "type": "static",
                      "content": "1px solid black"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "semanticType": "Navbar",
                        "dependency": {
                          "type": "local"
                        }
                      }
                    },
                    {
                      "type": "static",
                      "content": "Page 2"
                    }
                  ]
                }
              },
              "value": "about",
              "reference": {
                "type": "dynamic",
                "content": {
                  "referenceType": "state",
                  "id": "route"
                }
              }
            }
          },{
            "type": "conditional",
            "content": {
              "node": {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "style": {
                    "border": {
                      "type": "static",
                      "content": "1px solid black"
                    },
                    "padding": {
                      "type": "static",
                      "content": "1px solid black"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "semanticType": "Navbar",
                        "dependency": {
                          "type": "local"
                        }
                      }
                    },
                    {
                      "type": "static",
                      "content": "Page 3"
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "semanticType": "OneComponent",
                        "dependency": {
                          "type": "local"
                        }
                      }
                    }
                  ]
                }
              },
              "value": "contact-us",
              "reference": {
                "type": "dynamic",
                "content": {
                  "referenceType": "state",
                  "id": "route"
                }
              }
            }
          }
        ]
      }
    }
  },
  "components": {
    "Navbar": {
      "name": "Navbar",
      "node": {
        "type": "element",
        "content": {
          "elementType": "group",
          "children": [
            {
              "type": "element",
              "content": {
                "elementType": "navlink",
                "attrs": {
                  "transitionTo": "/"
                },
                "children": [
                  {
                    "type": "static",
                    "content": "Home"
                  }
                ]
              }
            },
            {
              "type": "element",
              "content": {
                "elementType": "navlink",
                "attrs": {
                  "transitionTo": "/about"
                },
                "children": [
                  {
                    "type": "static",
                    "content": "About"
                  }
                ]
              }
            },
            {
              "type": "element",
              "content": {
                "elementType": "navlink",
                "attrs": {
                  "transitionTo": "/here-we-are"
                },
                "children": [
                  {
                    "type": "static",
                    "content": "Contact"
                  }
                ]
              }
            }
          ]
        }
      }
    },
    "OneComponent": {
      "name": "New UIDL",
      "propDefinitions": {
        "title": {
          "type": "string",
          "defaultValue": "Hello"
        },
        "items": {
          "type": "array",
          "defaultValue": []
        }
      },
      "stateDefinitions": {
        "isVisible": {
          "type": "boolean",
          "defaultValue": true
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "container",
          "attrs": {
            "data-static-attr": {
              "type": "static",
              "content": "test"
            },
            "data-dynamic-attr": {
              "type": "dynamic",
              "content": {
                "referenceType": "prop",
                "id": "title"
              }
            }
          },
          "children": [
            {
              "type": "element",
              "content": {
                "elementType": "text",
                "children": [
                  {
                    "type": "static",
                    "content": "Hello World!"
                  },
                  {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "prop",
                      "id": "title"
                    }
                  }
                ]
              }
            },
            {
              "type": "repeat",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "text",
                    "children": [
                      {
                        "type": "dynamic",
                        "content": {
                          "referenceType": "local",
                          "id": "item"
                        }
                      },
                      {
                        "type": "element",
                        "content": {
                          "elementType": "list",
                          "attrs": {
                            "items": {
                              "type": "static",
                              "content": ["angular", "react", "vue"]
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "dataSource": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "prop",
                    "id": "items"
                  }
                },
                "meta": {
                  "useIndex": true,
                  "iteratorName": "item"
                }
              }
            },
            {
              "type": "conditional",
              "content": {
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "prop",
                    "id": "title"
                  }
                },
                "value": "matching",
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "text",
                    "children": [{
                      "type": "static",
                      "content": "Now you see me!"
                    }]
                  }
                }
              }
            },
            {
              "type": "element",
              "content": {
                "elementType": "video",
                "attrs": {
                  "autoPlay": {
                    "type": "static",
                    "content": true
                  }
                },
                "children": [{
                  "type": "element",
                  "content": {
                    "elementType": "source",
                    "attrs": {
                      "type": {
                        "type": "static",
                        "content": "video/mp4"
                      },
                      "url": {
                        "type": "static",
                        "content": "https://www.quirksmode.org/html5/videos/big_buck_bunny.mp4"
                      }
                    }
                  }
                }]
              }
            },
            {
              "type": "slot",
              "content": {}
            },
            {
              "type": "element",
              "content": {
                "elementType": "navlink",
                "attrs": {
                  "transitionTo": {
                    "type": "static",
                    "content": "about"
                  }
                },
                "children": [
                  {
                    "type": "static",
                    "content": "About Page"
                  }
                ]
              }
            }
          ]
        }
      }
    },
    "ExpandableArea": {
      "name": "ExpandableArea",
      "propDefinitions": {
        "title": {
          "type": "string",
          "defaultValue": "Hello"
        },
        "text": {
          "type": "string",
          "defaultValue": "Is it me you're looking for?"
        }
      },
      "stateDefinitions": {
        "isExpanded": {
          "type": "boolean",
          "defaultValue": false
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "container",
          "style": {
            "border": {
              "type": "static",
              "content": "1px solid green"
            },
            "margin": {
              "type": "static",
              "content": "10px"
            }
          },
          "children": [
            {
              "type": "element",
              "content": {
                "elementType": "text",
                "children": [{
                  "type": "dynamic",
                  "content": {
                    "referenceType": "prop",
                    "id": "title"
                  }
                }]
              }
            },
            {
              "type": "element",
              "content": {
                "elementType": "button",
                "children": [{
                  "type": "conditional",
                  "content": {
                    "node": {
                      "type": "static",
                      "content": "Hide me"
                    },
                    "value": true,
                    "reference": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "state",
                        "id": "isExpanded"
                      }
                    }
                  }
                },{
                  "type": "conditional",
                  "content": {
                    "node": {
                      "type": "static",
                      "content": "Show me"
                    },
                    "value": false,
                    "reference": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "state",
                        "id": "isExpanded"
                      }
                    }
                  }
                }],
                "events": {
                  "click": [
                    {
                      "type": "stateChange",
                      "modifies": "isExpanded",
                      "newState": "$toggle"
                    }
                  ]
                }
              }
            },
            {
              "type": "conditional",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "text",
                    "children": [{
                      "type": "dynamic",
                      "content": {
                        "referenceType": "prop",
                        "id": "text"
                      }
                    }]
                  }
                },
                "value": true,
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "isExpanded"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "Modal": {
      "name": "Modal",
      "stateDefinitions": {
        "isOpen": {
          "type": "boolean",
          "defaultValue": false
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "group",
          "children": [
            {
              "type": "element",
              "content": {
                "elementType": "button",
                "name": "openmodal",
                "children": [{
                  "type": "static",
                  "content": "Show Popup"
                }],
                "events": {
                  "click": [{
                    "type": "stateChange",
                    "modifies": "isOpen",
                    "newState": true
                  }]
                }
              }
            },
            {
              "type": "conditional",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "component",
                    "semanticType": "ModalWindow",
                    "name": "window",
                    "dependency": {
                      "type": "local"
                    },
                    "events": {
                      "onClose": [{
                        "type": "stateChange",
                        "modifies": "isOpen",
                        "newState": false
                      }]
                    }
                  }
                },
                "value": true,
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "isOpen"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "ModalWindow": {
      "name": "ModalWindow",
      "propDefinitions": {
        "message": {
          "type": "string",
          "defaultValue": "Hello"
        },
        "onClose": {
          "type": "func",
          "defaultValue": "() => {}"
        }
      },
      "stateDefinitions": {
        "fakeState": {
          "type": "boolean",
          "defaultValue": false
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "container",
          "children": [{
            "type": "dynamic",
            "content": {
              "referenceType": "prop",
              "id": "message"
            }
          },{
            "type": "element",
            "content": {
              "elementType": "button",
              "name": "close",
              "children": [{
                "type": "static",
                "content": "Close me"
              }],
              "events": {
                "click": [{
                  "type": "propCall",
                  "calls": "onClose"
                },{
                  "type": "stateChange",
                  "modifies": "fakeState",
                  "newState": false
                }]
              }
            }
          }]
        }
      }
    }
  }
}
'''
'''--- packages/teleport-uidl-validator/__tests__/validator/project-invalid-sample.json ---
{
  "globals": {
    "settings": {
      "language": 2,
      "key": "test",
      "title": "UIDL v0.6 Project"
    },
    "assets": [],
    "meta": []
  },
  "root": {
    "name": "App",
    "stateDefinitions": {
      "route": {
        "type": "string",
        "defaultValue": "index",
        "values": [
          {
            "value": "index",
            "pageOptions": {
              "navLink": "/",
              "componentName": "Home"
            }
          },
          {
            "value": "abouts",
            "pageOptions": {
              "navLink": "/about",
              "componentName": "About"
            }
          },
          {
            "value": "contact-us",
            "pageOptions": {
              "navLink": "/here-we-are",
              "componentName": "Us"
            }
          }
        ]
      }
    },
    "node": {
      "type": "element",
      "content": {
        "elementType": "Router",
        "children": [
          {
            "type": "static",
            "content": "Hello World!"
          },
          {
            "type": "conditional",
            "content": {
              "node": {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "style": {
                    "border": "1px solid green",
                    "padding": {
                      "type": "static",
                      "content": "10px"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "semanticType": "Navbar",
                        "dependency": {
                          "type": "local"
                        }
                      }
                    },
                    {
                      "type": "static",
                      "content": "Page 1"
                    }
                  ]
                }
              },
              "value": "index",
              "reference": {
                "type": "dynamic",
                "content": {
                  "referenceType": "state",
                  "id": "route"
                }
              }
            }
          },
          {
            "type": "conditional",
            "content": {
              "node": {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "style": {
                    "border": {
                      "type": "static",
                      "content": "1px solid black"
                    },
                    "padding": {
                      "type": "static",
                      "content": "1px solid black"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "semanticType": "Navbars",
                        "dependency": {
                          "type": "local"
                        }
                      }
                    },
                    {
                      "type": "static",
                      "content": "Page 2"
                    }
                  ]
                }
              },
              "value": "about",
              "reference": {
                "type": "dynamic",
                "content": {
                  "referenceType": "state",
                  "id": "route"
                }
              }
            }
          },{
            "type": "conditional",
            "content": {
              "node": {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "style": {
                    "border": {
                      "type": "static",
                      "content": "1px solid black"
                    },
                    "padding": {
                      "type": "static",
                      "content": "1px solid black"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "semanticType": "Navbar",
                        "dependency": {
                          "type": "local"
                        }
                      }
                    },
                    {
                      "type": "static",
                      "content": "Page 3"
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "semanticType": "OneComponent",
                        "dependency": {
                          "type": "local"
                        }
                      }
                    }
                  ]
                }
              },
              "value": "contact-us",
              "reference": {
                "type": "dynamic",
                "content": {
                  "referenceType": "state",
                  "id": "route"
                }
              }
            }
          }
        ]
      }
    }
  },
  "components": {
    "Navbar": {
      "name": "Navbars",
      "node": {
        "type": "element",
        "content": {
          "elementType": "group",
          "children": [
            {
              "type": "element",
              "content": {
                "elementType": "navlink",
                "attrs": {
                  "transitionTo": "/"
                },
                "children": [
                  {
                    "type": "static",
                    "content": "Home"
                  }
                ]
              }
            },
            {
              "type": "element",
              "content": {
                "elementType": "navlink",
                "attrs": {
                  "transitionTo": "/about"
                },
                "children": [
                  {
                    "type": "static",
                    "content": "About"
                  }
                ]
              }
            },
            {
              "type": "element",
              "content": {
                "elementType": "navlink",
                "attrs": {
                  "transitionTo": "/here-we-are"
                },
                "children": [
                  {
                    "type": "static",
                    "content": "Contact"
                  }
                ]
              }
            }
          ]
        }
      }
    },
    "OneComponent": {
      "name": "New UIDL",
      "propDefinitions": {
        "title": {
          "type": "string",
          "defaultValue": "Hello"
        },
        "items": {
          "type": "array",
          "defaultValue": []
        }
      },
      "stateDefinitions": {
        "isVisible": {
          "type": "boolean",
          "defaultValue": true
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "container",
          "attrs": {
            "data-static-attr": {
              "type": "static",
              "content": "test"
            },
            "data-dynamic-attr": {
              "type": "dynamic",
              "content": {
                "referenceType": "prop",
                "id": "title"
              }
            }
          },
          "children": [
            {
              "type": "element",
              "content": {
                "elementType": "text",
                "children": [
                  {
                    "type": "static",
                    "content": "Hello World!"
                  },
                  {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "prop",
                      "id": "title"
                    }
                  }
                ]
              }
            },
            {
              "type": "repeat",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "text",
                    "children": [
                      {
                        "type": "dynamic",
                        "content": {
                          "referenceType": "local",
                          "id": "item"
                        }
                      },
                      {
                        "type": "element",
                        "content": {
                          "elementType": "list",
                          "attrs": {
                            "items": {
                              "type": "static",
                              "content": ["angular", "react", "vue"]
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "dataSource": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "prop",
                    "id": "items"
                  }
                },
                "meta": {
                  "useIndex": true,
                  "iteratorName": "item"
                }
              }
            },
            {
              "type": "conditional",
              "content": {
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "prop",
                    "id": "title"
                  }
                },
                "value": "matching",
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "text",
                    "children": [{
                      "type": "static",
                      "content": "Now you see me!"
                    }]
                  }
                }
              }
            },
            {
              "type": "element",
              "content": {
                "elementType": "video",
                "attrs": {
                  "autoPlay": {
                    "type": "static",
                    "content": true
                  }
                },
                "children": [{
                  "type": "element",
                  "content": {
                    "elementType": "source",
                    "attrs": {
                      "type": {
                        "type": "static",
                        "content": "video/mp4"
                      },
                      "url": {
                        "type": "static",
                        "content": "https://www.quirksmode.org/html5/videos/big_buck_bunny.mp4"
                      }
                    }
                  }
                }]
              }
            },
            {
              "type": "slot",
              "content": {}
            },
            {
              "type": "element",
              "content": {
                "elementType": "navlink",
                "attrs": {
                  "transitionTo": {
                    "type": "static",
                    "content": "about"
                  }
                },
                "children": [
                  {
                    "type": "static",
                    "content": "About Page"
                  }
                ]
              }
            }
          ]
        }
      }
    },
    "ExpandableArea": {
      "name": "ExpandableArea",
      "propDefinitions": {
        "title": {
          "type": "string",
          "defaultValue": "Hello"
        },
        "text": {
          "type": "string",
          "defaultValue": "Is it me you're looking for?"
        }
      },
      "stateDefinitions": {
        "isExpanded": {
          "type": "boolean",
          "defaultValue": false
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "container",
          "style": {
            "border": {
              "type": "static",
              "content": "1px solid green"
            },
            "margin": {
              "type": "static",
              "content": "10px"
            }
          },
          "children": [
            {
              "type": "element",
              "content": {
                "elementType": "text",
                "children": [{
                  "type": "dynamic",
                  "content": {
                    "referenceType": "prop",
                    "id": "title"
                  }
                }]
              }
            },
            {
              "type": "element",
              "content": {
                "elementType": "button",
                "children": [{
                  "type": "conditional",
                  "content": {
                    "node": {
                      "type": "static",
                      "content": "Hide me"
                    },
                    "value": true,
                    "reference": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "state",
                        "id": "isExpanded"
                      }
                    }
                  }
                },{
                  "type": "conditional",
                  "content": {
                    "node": {
                      "type": "static",
                      "content": "Show me"
                    },
                    "value": false,
                    "reference": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "state",
                        "id": "isExpanded"
                      }
                    }
                  }
                }],
                "events": {
                  "click": [
                    {
                      "type": "stateChange",
                      "modifies": "isExpanded",
                      "newState": "$toggle"
                    }
                  ]
                }
              }
            },
            {
              "type": "conditional",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "text",
                    "children": [{
                      "type": "dynamic",
                      "content": {
                        "referenceType": "prop",
                        "id": "text"
                      }
                    }]
                  }
                },
                "value": true,
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "isExpanded"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "Modal": {
      "name": "Modal",
      "stateDefinitions": {
        "isOpen": {
          "type": "boolean",
          "defaultValue": false
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "group",
          "children": [
            {
              "type": "element",
              "content": {
                "elementType": "button",
                "name": "openmodal",
                "children": [{
                  "type": "static",
                  "content": "Show Popup"
                }],
                "events": {
                  "click": [{
                    "type": "stateChange",
                    "modifies": "isOpen",
                    "newState": true
                  }]
                }
              }
            },
            {
              "type": "conditional",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "component",
                    "semanticType": "ModalWindow",
                    "name": "window",
                    "dependency": {
                      "type": "local"
                    },
                    "events": {
                      "onClose": [{
                        "type": "stateChange",
                        "modifies": "isOpen",
                        "newState": false
                      }]
                    }
                  }
                },
                "value": true,
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "isOpen"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "ModalWindow": {
      "name": "ModalWindow",
      "propDefinitions": {
        "message": {
          "type": "string",
          "defaultValue": "Hello"
        },
        "onClose": {
          "type": "func",
          "defaultValue": "() => {}"
        }
      },
      "stateDefinitions": {
        "fakeState": {
          "type": "boolean",
          "defaultValue": false
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "container",
          "children": [{
            "type": "dynamic",
            "content": {
              "referenceType": "prop",
              "id": "message"
            }
          },{
            "type": "element",
            "content": {
              "elementType": "button",
              "name": "close",
              "children": [{
                "type": "static",
                "content": "Close me"
              }],
              "events": {
                "click": [{
                  "type": "propCall",
                  "calls": "onClose"
                },{
                  "type": "stateChange",
                  "modifies": "fakeState",
                  "newState": false
                }]
              }
            }
          }]
        }
      }
    }
  }
}
'''
'''--- packages/teleport-uidl-validator/__tests__/validator/project-sample.json ---
{
  "name": "myVueProject",
  "globals": {
    "settings": {
      "language": "en",
      "title": "UIDL v0.6 Project"
    },
    "assets": [
      {
        "type": "style",
        "attrs": {
          "data-type": "default-styles"
        },
        "content": "body{font-family: 'Roboto', sans-serif; color: #2c3e50; -webkit-font-smoothing: antialiased; font-size: 16px;} a{color:inherit; text-decoration: none}"
      }
    ],
    "meta": []
  },
  "root": {
    "name": "App",
    "stateDefinitions": {
      "route": {
        "type": "string",
        "defaultValue": "index",
        "values": [
          {
            "value": "index",
            "pageOptions": {
              "navLink": "/",
              "componentName": "Home"
            }
          },
          {
            "value": "about",
            "pageOptions": {
              "navLink": "/about",
              "componentName": "About"
            }
          },
          {
            "value": "contact-us",
            "pageOptions": {
              "navLink": "/here-we-are",
              "componentName": "Us"
            }
          }
        ]
      }
    },
    "node": {
      "type": "element",
      "content": {
        "elementType": "Router",
        "children": [
          {
            "type": "conditional",
            "content": {
              "node": {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "style": {
                    "border": "1px solid green",
                    "padding": {
                      "type": "static",
                      "content": "10px"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "semanticType": "Navbar",
                        "dependency": {
                          "type": "local"
                        }
                      }
                    },
                    {
                      "type": "static",
                      "content": "Page 1"
                    }
                  ]
                }
              },
              "value": "index",
              "reference": {
                "type": "dynamic",
                "content": {
                  "referenceType": "state",
                  "id": "route"
                }
              }
            }
          },
          {
            "type": "conditional",
            "content": {
              "node": {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "style": {
                    "border": {
                      "type": "static",
                      "content": "1px solid black"
                    },
                    "padding": {
                      "type": "static",
                      "content": "1px solid black"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "semanticType": "Navbar",
                        "dependency": {
                          "type": "local"
                        }
                      }
                    },
                    {
                      "type": "static",
                      "content": "Page 2"
                    }
                  ]
                }
              },
              "value": "about",
              "reference": {
                "type": "dynamic",
                "content": {
                  "referenceType": "state",
                  "id": "route"
                }
              }
            }
          },{
            "type": "conditional",
            "content": {
              "node": {
                "type": "element",
                "content": {
                  "elementType": "container",
                  "style": {
                    "border": {
                      "type": "static",
                      "content": "1px solid black"
                    },
                    "padding": {
                      "type": "static",
                      "content": "1px solid black"
                    }
                  },
                  "children": [
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "semanticType": "Navbar",
                        "dependency": {
                          "type": "local"
                        }
                      }
                    },
                    {
                      "type": "static",
                      "content": "Page 3"
                    },
                    {
                      "type": "element",
                      "content": {
                        "elementType": "component",
                        "semanticType": "OneComponent",
                        "dependency": {
                          "type": "local"
                        }
                      }
                    }
                  ]
                }
              },
              "value": "contact-us",
              "reference": {
                "type": "dynamic",
                "content": {
                  "referenceType": "state",
                  "id": "route"
                }
              }
            }
          }
        ]
      }
    }
  },
  "components": {
    "Navbar": {
      "name": "Navbar",
      "node": {
        "type": "element",
        "content": {
          "elementType": "group",
          "children": [
            {
              "type": "element",
              "content": {
                "elementType": "navlink",
                "attrs": {
                  "transitionTo": "/"
                },
                "children": [
                  {
                    "type": "static",
                    "content": "Home"
                  }
                ]
              }
            },
            {
              "type": "element",
              "content": {
                "elementType": "navlink",
                "attrs": {
                  "transitionTo": "/about"
                },
                "children": [
                  {
                    "type": "static",
                    "content": "About"
                  }
                ]
              }
            },
            {
              "type": "element",
              "content": {
                "elementType": "navlink",
                "attrs": {
                  "transitionTo": "/here-we-are"
                },
                "children": [
                  {
                    "type": "static",
                    "content": "Contact"
                  }
                ]
              }
            }
          ]
        }
      }
    },
    "OneComponent": {
      "name": "OneComponent",
      "propDefinitions": {
        "title": {
          "type": "string",
          "defaultValue": "Hello"
        },
        "items": {
          "type": "array",
          "defaultValue": []
        }
      },
      "stateDefinitions": {
        "isVisible": {
          "type": "boolean",
          "defaultValue": true
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "container",
          "attrs": {
            "data-static-attr": {
              "type": "static",
              "content": "test"
            },
            "data-dynamic-attr": {
              "type": "dynamic",
              "content": {
                "referenceType": "prop",
                "id": "title"
              }
            }
          },
          "children": [
            {
              "type": "element",
              "content": {
                "elementType": "text",
                "children": [
                  {
                    "type": "static",
                    "content": "Hello World!"
                  },
                  {
                    "type": "dynamic",
                    "content": {
                      "referenceType": "prop",
                      "id": "title"
                    }
                  }
                ]
              }
            },
            {
              "type": "repeat",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "text",
                    "children": [
                      {
                        "type": "dynamic",
                        "content": {
                          "referenceType": "local",
                          "id": "item"
                        }
                      },
                      {
                        "type": "element",
                        "content": {
                          "elementType": "list",
                          "attrs": {
                            "items": {
                              "type": "static",
                              "content": ["angular", "react", "vue"]
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "dataSource": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "prop",
                    "id": "items"
                  }
                },
                "meta": {
                  "useIndex": true,
                  "iteratorName": "item"
                }
              }
            },
            {
              "type": "conditional",
              "content": {
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "prop",
                    "id": "title"
                  }
                },
                "value": "matching",
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "text",
                    "children": [{
                      "type": "static",
                      "content": "Now you see me!"
                    }]
                  }
                }
              }
            },
            {
              "type": "element",
              "content": {
                "elementType": "video",
                "attrs": {
                  "autoPlay": {
                    "type": "static",
                    "content": true
                  }
                },
                "children": [{
                  "type": "element",
                  "content": {
                    "elementType": "source",
                    "attrs": {
                      "type": {
                        "type": "static",
                        "content": "video/mp4"
                      },
                      "url": {
                        "type": "static",
                        "content": "https://www.quirksmode.org/html5/videos/big_buck_bunny.mp4"
                      }
                    }
                  }
                }]
              }
            },
            {
              "type": "slot",
              "content": {}
            },
            {
              "type": "element",
              "content": {
                "elementType": "navlink",
                "attrs": {
                  "transitionTo": {
                    "type": "static",
                    "content": "about"
                  }
                },
                "children": [
                  {
                    "type": "static",
                    "content": "About Page"
                  }
                ]
              }
            }
          ]
        }
      }
    },
    "ExpandableArea": {
      "name": "ExpandableArea",
      "propDefinitions": {
        "title": {
          "type": "string",
          "defaultValue": "Hello"
        },
        "text": {
          "type": "string",
          "defaultValue": "Is it me you're looking for?"
        }
      },
      "stateDefinitions": {
        "isExpanded": {
          "type": "boolean",
          "defaultValue": false
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "container",
          "style": {
            "border": {
              "type": "static",
              "content": "1px solid green"
            },
            "margin": {
              "type": "static",
              "content": "10px"
            }
          },
          "children": [
            {
              "type": "element",
              "content": {
                "elementType": "text",
                "children": [{
                  "type": "dynamic",
                  "content": {
                    "referenceType": "prop",
                    "id": "title"
                  }
                }]
              }
            },
            {
              "type": "element",
              "content": {
                "elementType": "button",
                "children": [{
                  "type": "conditional",
                  "content": {
                    "node": {
                      "type": "static",
                      "content": "Hide me"
                    },
                    "value": true,
                    "reference": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "state",
                        "id": "isExpanded"
                      }
                    }
                  }
                },{
                  "type": "conditional",
                  "content": {
                    "node": {
                      "type": "static",
                      "content": "Show me"
                    },
                    "value": false,
                    "reference": {
                      "type": "dynamic",
                      "content": {
                        "referenceType": "state",
                        "id": "isExpanded"
                      }
                    }
                  }
                }],
                "events": {
                  "click": [
                    {
                      "type": "stateChange",
                      "modifies": "isExpanded",
                      "newState": "$toggle"
                    }
                  ]
                }
              }
            },
            {
              "type": "conditional",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "text",
                    "children": [{
                      "type": "dynamic",
                      "content": {
                        "referenceType": "prop",
                        "id": "text"
                      }
                    }]
                  }
                },
                "value": true,
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "isExpanded"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "Modal": {
      "name": "Modal",
      "stateDefinitions": {
        "isOpen": {
          "type": "boolean",
          "defaultValue": false
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "group",
          "children": [
            {
              "type": "element",
              "content": {
                "elementType": "button",
                "name": "openmodal",
                "children": [{
                  "type": "static",
                  "content": "Show Popup"
                }],
                "events": {
                  "click": [{
                    "type": "stateChange",
                    "modifies": "isOpen",
                    "newState": true
                  }]
                }
              }
            },
            {
              "type": "conditional",
              "content": {
                "node": {
                  "type": "element",
                  "content": {
                    "elementType": "component",
                    "semanticType": "ModalWindow",
                    "name": "window",
                    "dependency": {
                      "type": "local"
                    },
                    "events": {
                      "onClose": [{
                        "type": "stateChange",
                        "modifies": "isOpen",
                        "newState": false
                      }]
                    }
                  }
                },
                "value": true,
                "reference": {
                  "type": "dynamic",
                  "content": {
                    "referenceType": "state",
                    "id": "isOpen"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "ModalWindow": {
      "name": "ModalWindow",
      "propDefinitions": {
        "message": {
          "type": "string",
          "defaultValue": "Hello"
        },
        "onClose": {
          "type": "func",
          "defaultValue": "() => {}"
        }
      },
      "stateDefinitions": {
        "fakeState": {
          "type": "boolean",
          "defaultValue": false
        }
      },
      "node": {
        "type": "element",
        "content": {
          "elementType": "container",
          "children": [{
            "type": "dynamic",
            "content": {
              "referenceType": "prop",
              "id": "message"
            }
          },{
            "type": "element",
            "content": {
              "elementType": "button",
              "name": "close",
              "children": [{
                "type": "static",
                "content": "Close me"
              }],
              "events": {
                "click": [{
                  "type": "propCall",
                  "calls": "onClose"
                },{
                  "type": "stateChange",
                  "modifies": "fakeState",
                  "newState": false
                }]
              }
            }
          }]
        }
      }
    }
  }
}
'''
'''--- packages/teleport-uidl-validator/package.json ---
{
  "name": "@teleporthq/teleport-uidl-validator",
  "version": "0.29.0",
  "description": "A module that offers validation and parsing for non-standard UIDL structures",
  "author": "teleportHQ",
  "license": "MIT",
  "homepage": "https://teleporthq.io/",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "types": "dist/cjs/index.d.ts",
  "sideEffects": false,
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/teleporthq/teleport-code-generators.git"
  },
  "bugs": {
    "url": "https://github.com/teleporthq/teleport-code-generators/issues"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "clean": "rimraf dist",
    "build": "tsc -p tsconfig.json && tsc -p tsconfig.json --module commonjs --outDir dist/cjs"
  },
  "dependencies": {
    "@mojotech/json-type-validation": "^3.1.0",
    "@teleporthq/teleport-shared": "^0.29.0",
    "@teleporthq/teleport-types": "^0.29.0"
  },
  "gitHead": "b185c3fdb7dc94ff8c7eed63f7edba055fffa8d0"
}

'''
'''--- packages/teleport-uidl-validator/src/decoders/component-decoder.ts ---
import {
  object,
  string,
  dict,
  withDefault,
  Decoder,
  optional,
  array,
  intersection,
} from '@mojotech/json-type-validation'
import { VComponentUIDL, VRootComponentUIDL } from '@teleporthq/teleport-types'
import {
  styleSetDefinitionDecoder,
  propDefinitionsDecoder,
  stateDefinitionsDecoder,
  outputOptionsDecoder,
  elementNodeDecoder,
  componentSeoDecoder,
  externaldependencyDecoder,
  peerDependencyDecoder,
  designTokensDecoder,
  stateValueDetailsDecoder,
} from './utils'

export const componentUIDLDecoder: Decoder<VComponentUIDL> = object({
  name: withDefault('MyComponent', string()),
  node: elementNodeDecoder,
  stateDefinitions: optional(dict(stateDefinitionsDecoder)),
  propDefinitions: optional(dict(propDefinitionsDecoder)),
  styleSetDefinitions: optional(dict(styleSetDefinitionDecoder)),
  importDefinitions: optional(dict(externaldependencyDecoder)),
  outputOptions: optional(outputOptionsDecoder),
  seo: optional(componentSeoDecoder),
})

export const rootComponentUIDLDecoder: Decoder<VRootComponentUIDL> = object({
  name: withDefault('App', string()),
  node: elementNodeDecoder,
  stateDefinitions: intersection(
    dict(stateDefinitionsDecoder),
    object({
      route: object({
        type: string(),
        defaultValue: string(),
        values: array(stateValueDetailsDecoder),
      }),
    })
  ),
  propDefinitions: optional(dict(propDefinitionsDecoder)),
  importDefinitions: optional(dict(externaldependencyDecoder)),
  peerDefinitions: optional(dict(peerDependencyDecoder)),
  styleSetDefinitions: optional(dict(styleSetDefinitionDecoder)),
  outputOptions: optional(outputOptionsDecoder),
  seo: optional(componentSeoDecoder),
  designLanguage: optional(
    object({
      tokens: optional(designTokensDecoder),
    })
  ),
})

'''
'''--- packages/teleport-uidl-validator/src/decoders/custom-combinators.ts ---
/* tslint:disable member-ordering */
import { Result, DecoderError } from '@mojotech/json-type-validation'

/* These are some custom combinators that comes in handy for us,
instead of parsing and cross-checking regex again. The combinators,
can used inside a existing Decoder, since we did not implement any run()
runWithException() etc */

type DecodeResult<A> = Result.Result<A, Partial<DecoderError>>
export class CustomCombinators<A> {
  // @ts-ignore
  private constructor(private decode: (json: string) => DecodeResult<A>) {}

  static isValidComponentName(): CustomCombinators<string> {
    return new CustomCombinators<string>((json: string) => {
      const componentNameRegex = new RegExp('^[A-Z]+[a-zA-Z0-9]*$')
      if (json && typeof json === 'string' && componentNameRegex.test(json)) {
        return Result.ok(json)
      } else if (json.length === 0) {
        throw new Error(`Component Name cannot be empty`)
      }
      throw new Error(`Invalid Component name, got ${json}`)
    })
  }

  static isValidNavLink(): CustomCombinators<string> {
    return new CustomCombinators<string>((link: string) => {
      if (!link || typeof link !== 'string') {
        throw new Error(`Invalid navLink attribute, received ${link}`)
      }

      if (link === '**') {
        return Result.ok(link)
      }

      const navLinkRegex = new RegExp('/[a-zA-Z0-9-_]*$')
      if (navLinkRegex.test(link)) {
        return Result.ok(link)
      }

      throw new Error(`Invalid navLink attribute, received ${link}`)
    })
  }

  static isValidFileName(): CustomCombinators<string> {
    return new CustomCombinators<string>((json: string) => {
      const fileNameRegex = new RegExp('^[a-zA-Z0-9-_.]*$')
      if (json && typeof json === 'string' && fileNameRegex.test(json)) {
        return Result.ok(json)
      } else if (json.length === 0) {
        throw new Error(`File Name cannot be empty`)
      }
      throw new Error(`Invalid File name, received ${json}`)
    })
  }

  static isValidElementName(): CustomCombinators<string> {
    return new CustomCombinators<string>((json: string) => {
      const fileNameRegex = new RegExp('^[a-zA-Z]+[a-zA-Z0-9-_]*$')
      if (json && typeof json === 'string' && fileNameRegex.test(json)) {
        return Result.ok(json)
      } else if (json.length === 0) {
        throw new Error(`Name attribute cannot be empty`)
      }
      throw new Error(`Invalid name attribute, received ${json}`)
    })
  }
}

'''
'''--- packages/teleport-uidl-validator/src/decoders/index.ts ---
export { componentUIDLDecoder, rootComponentUIDLDecoder } from './component-decoder'
export { projectUIDLDecoder } from './project-decoder'

'''
'''--- packages/teleport-uidl-validator/src/decoders/project-decoder.ts ---
import { Decoder, object, optional, string, dict, array } from '@mojotech/json-type-validation'
import { VUIDLGlobalProjectValues, WebManifest, VProjectUIDL } from '@teleporthq/teleport-types'
import { globalAssetsDecoder } from './utils'
import { componentUIDLDecoder, rootComponentUIDLDecoder } from './component-decoder'

export const webManifestDecoder: Decoder<WebManifest> = object({
  short_name: optional(string()),
  name: optional(string()),
  icons: optional(array(object({ src: string(), type: string(), sizes: string() }))),
  start_url: optional(string()),
  background_color: optional(string()),
  display: optional(string()),
  orientation: optional(string()),
  scope: optional(string()),
  theme_color: optional(string()),
})

export const globalProjectValuesDecoder: Decoder<VUIDLGlobalProjectValues> = object({
  settings: object({
    title: string(),
    language: string(),
  }),
  customCode: optional(
    object({
      head: optional(string()),
      body: optional(string()),
    })
  ),
  meta: array(dict(string())),
  assets: array(globalAssetsDecoder),
  manifest: optional(webManifestDecoder),
  variables: optional(dict(string())),
})

export const projectUIDLDecoder: Decoder<VProjectUIDL> = object({
  name: string(),
  globals: globalProjectValuesDecoder,
  root: rootComponentUIDLDecoder,
  components: optional(dict(componentUIDLDecoder)),
})

'''
'''--- packages/teleport-uidl-validator/src/decoders/utils.ts ---
import {
  object,
  string,
  dict,
  constant,
  number,
  Decoder,
  optional,
  union,
  boolean,
  array,
  lazy,
  oneOf,
  intersection,
  withDefault,
} from '@mojotech/json-type-validation'
import {
  UIDLStaticValue,
  ReferenceType,
  UIDLDynamicReference,
  UIDLPropDefinition,
  UIDLStateDefinition,
  UIDLPageOptions,
  UIDLComponentOutputOptions,
  UIDLDependency,
  UIDLStyleDefinitions,
  UIDLStyleValue,
  UIDLAttributeValue,
  UIDLEventHandlerStatement,
  UIDLNavLinkNode,
  UIDLMailLinkNode,
  UIDLPhoneLinkNode,
  UIDLRawValue,
  UIDLElementStyleStates,
  UIDLStyleStateCondition,
  UIDLStyleMediaQueryScreenSizeCondition,
  UIDLStyleConditions,
  UIDLElementNodeProjectReferencedStyle,
  VUIDLComponentSEO,
  VUIDLGlobalAsset,
  UIDLExternalDependency,
  UIDLLocalDependency,
  UIDLPeerDependency,
  UIDLImportReference,
  UIDLStyleSetTokenReference,
  VUIDLStyleSetDefnition,
  VUIDLElement,
  VUIDLSlotNode,
  VUIDLConditionalNode,
  VUIDLRepeatNode,
  VUIDLElementNode,
  VUIDLNode,
  VUIDLElementNodeInlineReferencedStyle,
  VUIDLSectionLinkNode,
  VUIDLLinkNode,
  VUIDLURLLinkNode,
  VUIDLStyleSetConditions,
  VUIDLStyleSetMediaCondition,
  VUIDLStyleSetStateCondition,
  VUIDLDesignTokens,
  UIDLPropCallEvent,
  UIDLStateModifierEvent,
  UIDLScriptExternalAsset,
  UIDLScriptInlineAsset,
  VUIDLStyleInlineAsset,
  UIDLStyleExternalAsset,
  VUIDLFontAsset,
  UIDLCanonicalAsset,
  UIDLIconAsset,
  UIDLAssetBase,
  VUIDLElementNodeClassReferencedStyle,
  UIDLCompDynamicReference,
  UIDLComponentStyleReference,
  UIDLInjectValue,
  VUIDLStateValueDetails,
} from '@teleporthq/teleport-types'
import { CustomCombinators } from './custom-combinators'

const { isValidComponentName, isValidFileName, isValidElementName, isValidNavLink } =
  CustomCombinators

export const referenceTypeDecoder: Decoder<ReferenceType> = union(
  constant('prop'),
  constant('state'),
  constant('local'),
  constant('attr'),
  constant('children'),
  constant('token')
)

export const dynamicValueDecoder: Decoder<UIDLDynamicReference> = object({
  type: constant('dynamic'),
  content: object({
    referenceType: referenceTypeDecoder,
    id: string(),
  }),
})

export const staticValueDecoder: Decoder<UIDLStaticValue> = object({
  type: constant('static'),
  content: union(string(), number(), boolean(), array()),
})

export const rawValueDecoder: Decoder<UIDLRawValue> = object({
  type: constant('raw'),
  content: string(),
})

export const injectValueDecoder: Decoder<UIDLInjectValue> = object({
  type: constant('inject'),
  content: string(),
  dependency: optional(lazy(() => externaldependencyDecoder)),
})

export const styleSetMediaConditionDecoder: Decoder<VUIDLStyleSetMediaCondition> = object({
  type: constant('screen-size'),
  meta: object({
    maxWidth: number(),
    maxHeight: optional(number()),
    minHeight: optional(number()),
    minWidth: optional(number()),
  }),
  content: dict(
    union(
      staticValueDecoder,
      string(),
      number(),
      lazy(() => tokenReferenceDecoder)
    )
  ),
})

export const styleSetStateConditionDecoder: Decoder<VUIDLStyleSetStateCondition> = object({
  type: constant('element-state'),
  meta: object({
    state: lazy(() => elementStateDecoder),
  }),
  content: dict(
    union(
      staticValueDecoder,
      string(),
      number(),
      lazy(() => tokenReferenceDecoder)
    )
  ),
})

export const projectStyleConditionsDecoder: Decoder<VUIDLStyleSetConditions> = union(
  styleSetMediaConditionDecoder,
  styleSetStateConditionDecoder
)

export const tokenReferenceDecoder: Decoder<UIDLStyleSetTokenReference> = object({
  type: constant('dynamic'),
  content: object({
    referenceType: constant('token'),
    id: string(),
  }),
})

export const styleSetDefinitionDecoder: Decoder<VUIDLStyleSetDefnition> = object({
  type: union(
    constant('reusable-project-style-map'),
    constant('reusable-component-style-map'),
    constant('reusable-component-style-override')
  ),
  conditions: optional(array(projectStyleConditionsDecoder)),
  content: dict(union(staticValueDecoder, string(), number(), tokenReferenceDecoder)),
})

// TODO: Implement decoder for () => void
export const stateOrPropDefinitionDecoder = union(
  string(),
  number(),
  boolean(),
  array(union(string(), number(), object())),
  object()
)

export const pageOptionsDecoder: Decoder<UIDLPageOptions> = object({
  componentName: optional(isValidComponentName() as unknown as Decoder<string>),
  navLink: optional(isValidNavLink() as unknown as Decoder<string>),
  fileName: optional(isValidFileName() as unknown as Decoder<string>),
  fallback: optional(boolean()),
})

export const globalAssetsDecoder: Decoder<VUIDLGlobalAsset> = union(
  lazy(() => inlineScriptAssetDecoder),
  lazy(() => externalScriptAssetDecoder),
  lazy(() => inlineStyletAssetDecoder),
  lazy(() => externalStyleAssetDecoder),
  lazy(() => fontAssetDecoder),
  lazy(() => canonicalAssetDecoder),
  lazy(() => iconAssetDecoder)
)

export const baseAssetDecoder: Decoder<UIDLAssetBase> = object({
  options: optional(
    object({
      async: optional(boolean()),
      defer: optional(boolean()),
      target: optional(string()),
    })
  ),
})

export const inlineScriptAssetDecoder: Decoder<UIDLScriptInlineAsset> = intersection(
  object({
    type: constant('script' as const),
    content: string(),
  }),
  optional(baseAssetDecoder)
)

export const externalScriptAssetDecoder: Decoder<UIDLScriptExternalAsset> = intersection(
  object({
    type: constant('script' as const),
    path: string(),
  }),
  optional(baseAssetDecoder)
)

export const inlineStyletAssetDecoder: Decoder<VUIDLStyleInlineAsset> = object({
  type: constant('style' as const),
  attrs: optional(dict(union(staticValueDecoder, string(), boolean(), number()))),
  content: string(),
})

export const externalStyleAssetDecoder: Decoder<UIDLStyleExternalAsset> = object({
  type: constant('style' as const),
  path: string(),
})

export const fontAssetDecoder: Decoder<VUIDLFontAsset> = object({
  type: constant('font' as const),
  attrs: optional(dict(union(staticValueDecoder, string(), boolean(), number()))),
  path: string(),
})

export const canonicalAssetDecoder: Decoder<UIDLCanonicalAsset> = object({
  type: constant('canonical' as const),
  path: string(),
})

export const iconAssetDecoder: Decoder<UIDLIconAsset> = object({
  type: constant('icon'),
  path: string(),
  options: optional(
    object({
      iconType: optional(string()),
      iconSizes: optional(string()),
    })
  ),
})

export const componentSeoDecoder: Decoder<VUIDLComponentSEO> = object({
  title: optional(string()),
  metaTags: optional(array(dict(string()))),
  assets: optional(array(globalAssetsDecoder)),
})

export const stateValueDetailsDecoder: Decoder<VUIDLStateValueDetails> = object({
  value: union(string(), number(), boolean()),
  pageOptions: optional(pageOptionsDecoder),
  seo: optional(componentSeoDecoder),
})

export const propDefinitionsDecoder: Decoder<UIDLPropDefinition> = object({
  type: union(
    constant('string'),
    constant('boolean'),
    constant('number'),
    constant('array'),
    constant('func'),
    constant('object'),
    constant('children')
  ),
  defaultValue: optional(stateOrPropDefinitionDecoder),
  isRequired: optional(boolean()),
})

export const stateDefinitionsDecoder: Decoder<UIDLStateDefinition> = object({
  type: union(
    constant('string'),
    constant('boolean'),
    constant('number'),
    constant('array'),
    constant('func'),
    constant('object'),
    constant('children')
  ),
  defaultValue: stateOrPropDefinitionDecoder,
})

export const outputOptionsDecoder: Decoder<UIDLComponentOutputOptions> = object({
  componentClassName: optional(isValidComponentName() as unknown as Decoder<string>),
  fileName: optional(isValidFileName() as unknown as Decoder<string>),
  styleFileName: optional(isValidFileName() as unknown as Decoder<string>),
  templateFileName: optional(isValidFileName() as unknown as Decoder<string>),
  moduleName: optional(isValidFileName() as unknown as Decoder<string>),
  folderPath: optional(array(isValidFileName() as unknown as Decoder<string>)),
})

export const peerDependencyDecoder: Decoder<UIDLPeerDependency> = object({
  type: constant('package'),
  version: string(),
  path: string(),
})

export const externaldependencyDecoder: Decoder<UIDLExternalDependency> = object({
  type: union(constant('library'), constant('package')),
  path: string(),
  version: string(),
  meta: optional(
    object({
      namedImport: optional(boolean()),
      originalName: optional(string()),
      importJustPath: optional(boolean()),
      useAsReference: optional(boolean()),
      importAlias: optional(string()),
      needsWindowObject: optional(boolean()),
    })
  ),
})

export const localDependencyDecoder: Decoder<UIDLLocalDependency> = object({
  type: constant('local'),
  path: optional(string()),
  meta: optional(
    object({
      namedImport: optional(boolean()),
      originalName: optional(string()),
      importJustPath: optional(boolean()),
    })
  ),
})

export const dependencyDecoder: Decoder<UIDLDependency> = union(
  localDependencyDecoder,
  externaldependencyDecoder
)

export const importReferenceDecoder: Decoder<UIDLImportReference> = object({
  type: constant('import'),
  content: object({
    id: string(),
  }),
})

export const attributeValueDecoder: Decoder<UIDLAttributeValue> = union(
  dynamicValueDecoder,
  staticValueDecoder,
  importReferenceDecoder,
  rawValueDecoder,
  lazy(() => uidlComponentStyleReference)
)

export const uidlComponentStyleReference: Decoder<UIDLComponentStyleReference> = object({
  type: constant('comp-style'),
  content: string(),
})

export const styleValueDecoder: Decoder<UIDLStyleValue> = union(
  staticValueDecoder,
  dynamicValueDecoder
)

export const styleDefinitionsDecoder: Decoder<UIDLStyleDefinitions> = dict(styleValueDecoder)

export const eventHandlerStatementDecoder: Decoder<UIDLEventHandlerStatement> = union(
  lazy(() => propCallEventDecoder),
  lazy(() => stateChangeEventDecoder)
)

export const propCallEventDecoder: Decoder<UIDLPropCallEvent> = object({
  type: constant('propCall'),
  calls: string(),
  args: optional(array(union(string(), number(), boolean()))),
})

export const stateChangeEventDecoder: Decoder<UIDLStateModifierEvent> = object({
  type: constant('stateChange'),
  modifies: string(),
  newState: union(string(), number(), boolean()),
})

export const urlLinkNodeDecoder: Decoder<VUIDLURLLinkNode> = object({
  type: constant('url'),
  content: object({
    url: union(attributeValueDecoder, string()),
    newTab: withDefault(false, boolean()),
  }),
})

export const sectionLinkNodeDecoder: Decoder<VUIDLSectionLinkNode> = object({
  type: constant('section'),
  content: dict(string()),
})

export const navLinkNodeDecoder: Decoder<UIDLNavLinkNode> = object({
  type: constant('navlink'),
  content: object({
    routeName: string(),
  }),
})

export const uidlMailLinkNodeDecoder: Decoder<UIDLMailLinkNode> = object({
  type: constant('mail'),
  content: object({
    mail: optional(string()),
    subject: optional(string()),
    body: optional(string()),
  }),
})

export const phoneLinkNodeDecoder: Decoder<UIDLPhoneLinkNode> = object({
  type: constant('phone'),
  content: object({
    phone: string(),
  }),
})

export const uidlLinkNodeDecoder: Decoder<VUIDLLinkNode> = union(
  urlLinkNodeDecoder,
  sectionLinkNodeDecoder,
  navLinkNodeDecoder,
  uidlMailLinkNodeDecoder,
  phoneLinkNodeDecoder
)

export const elementStateDecoder: Decoder<UIDLElementStyleStates> = oneOf(
  constant('hover'),
  constant('active'),
  constant('focus'),
  constant('focus-within'),
  constant('focus-visible'),
  constant('disabled'),
  constant('visited'),
  constant('checked'),
  constant('link')
)

export const elementStyleWithStateConditionDecoder: Decoder<UIDLStyleStateCondition> = object({
  conditionType: constant('element-state'),
  content: elementStateDecoder,
})

export const elementStyleWithMediaConditionDecoder: Decoder<UIDLStyleMediaQueryScreenSizeCondition> =
  object({
    conditionType: constant('screen-size'),
    minHeight: optional(number()),
    maxHeight: optional(number()),
    minWidth: optional(number()),
    maxWidth: number(),
  })

export const styleConditionsDecoder: Decoder<UIDLStyleConditions> = union(
  elementStyleWithMediaConditionDecoder,
  elementStyleWithStateConditionDecoder
)

export const elementProjectReferencedStyle: Decoder<UIDLElementNodeProjectReferencedStyle> = object(
  {
    type: constant('style-map'),
    content: object({
      mapType: constant('project-referenced'),
      conditions: optional(array(styleConditionsDecoder)),
      referenceId: string(),
    }),
  }
)

export const elementInlineReferencedStyle: Decoder<VUIDLElementNodeInlineReferencedStyle> = object({
  type: constant('style-map'),
  content: object({
    mapType: constant('inlined'),
    conditions: array(styleConditionsDecoder),
    styles: optional(dict(union(attributeValueDecoder, string(), number()))),
  }),
})

export const classDynamicReferenceDecoder: Decoder<UIDLCompDynamicReference> = object({
  type: constant('dynamic'),
  content: object({
    referenceType: union(constant('prop'), constant('comp')),
    id: string(),
  }),
})

export const elementComponentReferencedStyle: Decoder<VUIDLElementNodeClassReferencedStyle> =
  object({
    type: constant('style-map'),
    content: object({
      mapType: constant('component-referenced'),
      content: union(string(), staticValueDecoder, classDynamicReferenceDecoder),
    }),
  })

export const designTokensDecoder: Decoder<VUIDLDesignTokens> = dict(
  union(staticValueDecoder, string(), number())
)

export const elementDecoder: Decoder<VUIDLElement> = object({
  elementType: string(),
  semanticType: optional(string()),
  name: optional(isValidElementName() as unknown as Decoder<string>),
  key: optional(string()),
  dependency: optional(dependencyDecoder),
  style: optional(dict(union(attributeValueDecoder, string(), number()))),
  attrs: optional(dict(union(attributeValueDecoder, string(), number()))),
  events: optional(dict(array(eventHandlerStatementDecoder))),
  abilities: optional(
    object({
      link: optional(uidlLinkNodeDecoder),
    })
  ),
  children: optional(array(lazy(() => uidlNodeDecoder))),
  referencedStyles: optional(
    dict(
      union(
        elementInlineReferencedStyle,
        elementProjectReferencedStyle,
        elementComponentReferencedStyle
      )
    )
  ),
  selfClosing: optional(boolean()),
  ignore: optional(boolean()),
})

export const slotNodeDecoder: Decoder<VUIDLSlotNode> = object({
  type: constant('slot'),
  content: union(
    object({
      name: optional(string()),
      fallback: optional(
        union(
          staticValueDecoder,
          dynamicValueDecoder,
          lazy(() => elementNodeDecoder)
        )
      ),
    }),
    object({})
  ),
})

export const repeatNodeDecoder: Decoder<VUIDLRepeatNode> = object({
  type: constant('repeat'),
  content: object({
    node: lazy(() => elementNodeDecoder),
    dataSource: optional(attributeValueDecoder),
    meta: optional(
      object({
        useIndex: optional(boolean()),
        iteratorName: optional(string()),
        dataSourceIdentifier: optional(string()),
        iteratorKey: optional(string()),
      })
    ),
  }),
})

export const conditionalNodeDecoder: Decoder<VUIDLConditionalNode> = object({
  type: constant('conditional'),
  content: object({
    node: lazy(() => uidlNodeDecoder),
    reference: dynamicValueDecoder,
    value: union(string(), number(), boolean()),
    condition: optional(
      object({
        conditions: array(
          object({ operation: string(), operand: optional(union(string(), number(), boolean())) })
        ),
        matchingCriteria: optional(string()),
      })
    ),
  }),
})

export const elementNodeDecoder: Decoder<VUIDLElementNode> = object({
  type: constant('element'),
  content: elementDecoder,
})

export const uidlNodeDecoder: Decoder<VUIDLNode> = union(
  union(dynamicValueDecoder, staticValueDecoder),
  union(rawValueDecoder, elementNodeDecoder),
  union(repeatNodeDecoder, conditionalNodeDecoder),
  union(slotNodeDecoder, injectValueDecoder),
  string()
)

'''
'''--- packages/teleport-uidl-validator/src/index.ts ---
import * as Parser from './parser'
import * as Decoders from './decoders/utils'

export { default as Validator } from './validator'
export { Parser, Decoders }

export * from './decoders/component-decoder'
export * from './decoders/project-decoder'
export * from './decoders/utils'

'''
'''--- packages/teleport-uidl-validator/src/parser/index.ts ---
import { UIDLUtils } from '@teleporthq/teleport-shared'

import {
  UIDLDynamicReference,
  ComponentUIDL,
  ProjectUIDL,
  UIDLNode,
  UIDLConditionalNode,
  UIDLRepeatNode,
  UIDLSlotNode,
  UIDLElementNode,
  UIDLStaticValue,
  UIDLStyleSetConditions,
  UIDLDesignTokens,
  ParserError,
  UIDLComponentSEO,
  VUIDLGlobalAsset,
  UIDLGlobalAsset,
  UIDLRootComponent,
} from '@teleporthq/teleport-types'

interface ParseComponentJSONParams {
  noClone?: boolean
}

export const parseComponentJSON = (
  input: Record<string, unknown>,
  params: ParseComponentJSONParams = {}
): ComponentUIDL => {
  const safeInput = params.noClone ? input : UIDLUtils.cloneObject(input)

  if (safeInput?.styleSetDefinitions) {
    const { styleSetDefinitions } = safeInput

    Object.values(styleSetDefinitions).forEach((styleRef) => {
      const { conditions = [] } = styleRef
      styleRef.content = UIDLUtils.transformStylesAssignmentsToJson(styleRef.content)
      if (conditions.length > 0) {
        conditions.forEach((style: UIDLStyleSetConditions) => {
          style.content = UIDLUtils.transformStylesAssignmentsToJson(style.content) as Record<
            string,
            UIDLStaticValue
          >
        })
      }
    })
  }

  if (safeInput?.seo) {
    const { seo } = safeInput
    const { assets = [] } = (seo as UIDLComponentSEO) || { assets: [] }

    assets.forEach(parseAssets)
  }

  const node = safeInput.node as Record<string, unknown>
  const result: ComponentUIDL = {
    ...(safeInput as unknown as ComponentUIDL),
  }

  // other parsers for other sections of the component here
  result.node = parseComponentNode(node) as UIDLElementNode

  return result
}

interface ParseProjectJSONParams {
  noClone?: boolean
}

export const parseProjectJSON = (
  input: Record<string, unknown>,
  params: ParseProjectJSONParams = {}
): ProjectUIDL => {
  const safeInput = params.noClone ? input : UIDLUtils.cloneObject(input)
  const root = safeInput.root as Record<string, unknown>
  const result = {
    ...(safeInput as unknown as ProjectUIDL),
  }
  result.root = parseComponentJSON(root, { noClone: true }) as UIDLRootComponent

  result.globals?.assets?.forEach(parseAssets)

  if (result.root?.designLanguage) {
    const { tokens = {} } = result.root.designLanguage

    result.root.designLanguage.tokens = Object.keys(tokens).reduce(
      (acc: UIDLDesignTokens, tokenId: string) => {
        const token = tokens[tokenId]
        if (typeof token === 'string' || typeof token === 'number') {
          acc[tokenId] = {
            type: 'static',
            content: token,
          }
        } else {
          acc[tokenId] = token
        }
        return acc
      },
      {}
    )
  }

  if (result.components) {
    result.components = Object.keys(result.components).reduce(
      (parsedComponnets: Record<string, ComponentUIDL>, key) => {
        parsedComponnets[key] = parseComponentJSON(
          result.components[key] as unknown as Record<string, unknown>
        )
        return parsedComponnets
      },
      {}
    )
  }

  return result
}

const parseComponentNode = (node: Record<string, unknown>): UIDLNode => {
  switch ((node as unknown as UIDLNode).type) {
    case 'element':
      const elementContent = node.content as Record<string, unknown>

      if (elementContent?.referencedStyles) {
        Object.values(elementContent.referencedStyles).forEach((styleRef) => {
          const { content } = styleRef

          switch (content.mapType) {
            case 'inlined': {
              content.styles = UIDLUtils.transformStylesAssignmentsToJson(
                content.styles as Record<string, string>
              )
              break
            }

            case 'project-referenced':
              break

            case 'component-referenced': {
              if (['string', 'number'].includes(typeof styleRef.content.content)) {
                styleRef.content.content = {
                  type: 'static',
                  content: styleRef.content.content,
                }
              }
              break
            }

            default: {
              throw new ParserError(
                `Un-expected mapType passed in referencedStyles - ${content.mapType}`
              )
            }
          }
        })
      }

      if (elementContent.style) {
        elementContent.style = UIDLUtils.transformStylesAssignmentsToJson(
          elementContent.style as Record<string, unknown>
        )
      }

      if (elementContent.attrs) {
        elementContent.attrs = UIDLUtils.transformAttributesAssignmentsToJson(
          elementContent.attrs as Record<string, unknown>
        )
      }

      // @ts-ignore
      if (elementContent.abilities?.link) {
        // @ts-ignore
        const { content, type } = elementContent.abilities?.link
        if (type === 'url' && typeof content.url === 'string') {
          content.url = UIDLUtils.transformStringAssignmentToJson(content.url)
        }
      }

      if (Array.isArray(elementContent.children)) {
        elementContent.children = elementContent.children.map((child) => {
          if (typeof child === 'string') {
            return UIDLUtils.transformStringAssignmentToJson(child)
          } else {
            return parseComponentNode(child)
          }
        }, [])
      }

      return node as unknown as UIDLNode

    case 'conditional':
      const conditionalNode = node as unknown as UIDLConditionalNode
      const { reference } = conditionalNode.content

      conditionalNode.content.node = parseComponentNode(
        conditionalNode.content.node as unknown as Record<string, unknown>
      )

      if (typeof reference === 'string') {
        conditionalNode.content.reference = UIDLUtils.transformStringAssignmentToJson(
          reference
        ) as UIDLDynamicReference
      }

      return conditionalNode

    case 'repeat':
      const repeatNode = node as unknown as UIDLRepeatNode
      const { dataSource } = repeatNode.content

      repeatNode.content.node = parseComponentNode(
        repeatNode.content.node as unknown as Record<string, unknown>
      ) as UIDLElementNode

      if (typeof dataSource === 'string') {
        repeatNode.content.dataSource = UIDLUtils.transformStringAssignmentToJson(dataSource)
      }

      return repeatNode

    case 'slot':
      const slotNode = node as unknown as UIDLSlotNode

      if (slotNode.content.fallback) {
        slotNode.content.fallback = parseComponentNode(
          slotNode.content.fallback as unknown as Record<string, unknown>
        ) as UIDLElementNode | UIDLStaticValue | UIDLDynamicReference
      }

      return slotNode

    case 'dynamic':
    case 'static':
    case 'raw':
    case 'inject':
      return node as unknown as UIDLNode

    default:
      throw new ParserError(`parseComponentNode attempted to parsed invalid node type ${node.type}`)
  }
}

export const parseAssets = (asset: VUIDLGlobalAsset): UIDLGlobalAsset => {
  if ('attrs' in asset) {
    asset.attrs = UIDLUtils.transformAttributesAssignmentsToJson(asset.attrs) as Record<
      string,
      UIDLStaticValue
    >
  }

  return asset as UIDLGlobalAsset
}

'''
'''--- packages/teleport-uidl-validator/src/validator/index.ts ---
import {
  ProjectUIDL,
  ComponentUIDL,
  ProjectValidationError,
  ComponentValidationError,
  VComponentUIDL,
  VProjectUIDL,
} from '@teleporthq/teleport-types'
import { componentUIDLDecoder, rootComponentUIDLDecoder, projectUIDLDecoder } from '../decoders'
import * as utils from './utils'

interface ValidationResult {
  valid: boolean
  errorMsg: string
  componentUIDL?: VComponentUIDL
  projectUIDL?: VProjectUIDL
}

export default class Validator {
  public validateComponentSchema(
    input: Record<string, unknown> | VComponentUIDL
  ): ValidationResult {
    try {
      const cleanedUIDL = utils.validateNulls(input)
      const uidl = componentUIDLDecoder.runWithException(cleanedUIDL)

      return { valid: true, errorMsg: '', componentUIDL: uidl }
    } catch (e) {
      const errorMsg = utils.formatErrors([{ kind: e.kind, message: e.message, at: e.at }])
      throw new ComponentValidationError(`Component - ${input?.name} \n
      ${errorMsg}`)
    }
  }

  public validateRootComponentSchema(
    input: Record<string, unknown> | VComponentUIDL
  ): ValidationResult {
    try {
      const cleanedUIDL = utils.validateNulls(input)
      const uidl = rootComponentUIDLDecoder.runWithException(cleanedUIDL)
      return { valid: true, errorMsg: '', componentUIDL: uidl }
    } catch (e) {
      const errorMsg = utils.formatErrors([{ kind: e.kind, message: e.message, at: e.at }])
      throw new ComponentValidationError(`Component - ${input?.name}\n
      ${errorMsg}`)
    }
  }

  public validateProjectSchema(input: Record<string, unknown> | VProjectUIDL): ValidationResult {
    try {
      const cleanedUIDL = utils.validateNulls(input)
      const uidl = projectUIDLDecoder.runWithException(cleanedUIDL)

      return { valid: true, errorMsg: '', projectUIDL: uidl }
    } catch (e) {
      const errorMsg = utils.formatErrors([{ kind: e.kind, message: e.message, at: e.at }])
      throw new ProjectValidationError(`${input.name}\n
      ${errorMsg}`)
    }
  }

  public validateComponentContent(input: ComponentUIDL): ValidationResult {
    const errorsInDefinitions = utils.checkDynamicDefinitions(
      input as unknown as Record<string, unknown>
    )
    const errorsWithLocalVariables = utils.checkForLocalVariables(input)

    utils.checkForDuplicateDefinitions(input)
    const errors = [...errorsInDefinitions, ...errorsWithLocalVariables]

    if (errors.length > 0) {
      throw new ComponentValidationError(
        `UIDL Component Content Validation Error. Please check the following: \n${errors}`
      )
    }

    return { valid: true, errorMsg: '' }
  }

  public validateProjectContent(input: ProjectUIDL): ValidationResult {
    const errorsOnRouteNode = utils.checkRouteDefinition(input) || []
    let allErrors = errorsOnRouteNode

    if (errorsOnRouteNode.length === 0) {
      const errorsInStyleSet = utils.checkProjectStyleSet(input)
      const errorsInRootComponent = utils.checkRootComponent(input)

      const errorsWithComponentNaming = utils.checkComponentNaming(input)
      const errorsWtihComponentExistence = utils.checkComponentExistenceAndReferences(input)

      allErrors = [
        ...errorsOnRouteNode,
        ...errorsWtihComponentExistence,
        ...errorsWithComponentNaming,
        ...errorsInRootComponent,
        ...errorsInStyleSet,
      ]
    }

    if (allErrors.length > 0) {
      throw new ProjectValidationError(
        `UIDL Project Content Validation Error. Please check the following: ${allErrors}`
      )
    }

    return { valid: true, errorMsg: '' }
  }
}

'''
'''--- packages/teleport-uidl-validator/src/validator/utils.ts ---
import { UIDLUtils } from '@teleporthq/teleport-shared'

import {
  ProjectUIDL,
  UIDLElement,
  ComponentUIDL,
  UIDLNode,
  UIDLStyleSetDefinition,
  UIDLStaticValue,
  UIDLExternalDependency,
  UIDLElementNodeProjectReferencedStyle,
  UIDLStyleValue,
  UIDLElementNodeInlineReferencedStyle,
  UIDLReferencedStyles,
  UIDLStyleSetTokenReference,
  ComponentValidationError,
} from '@teleporthq/teleport-types'

// Prop definitions and state definitions should have different keys
export const checkForDuplicateDefinitions = (input: ComponentUIDL) => {
  const props = Object.keys(input.propDefinitions || {})
  const states = Object.keys(input.stateDefinitions || {})
  const imports = Object.keys(input.importDefinitions || {})

  props
    .filter((x) => states.includes(x) || imports.includes(x))
    .forEach((duplicate) =>
      console.warn(
        `\n"${duplicate}" is defined both as a prop and as a state. If you are using VUE Code Generators this can cause bad behavior.`
      )
    )
}

// In "repeat" node:
// If index is used, "useIndex" must be declared in "meta"
// If custom local variable is used, it's name must be specified inside "meta" as "iteratorName"
export const checkForLocalVariables = (input: ComponentUIDL) => {
  const errors: string[] = []

  UIDLUtils.traverseRepeats(input.node, (repeatContent) => {
    UIDLUtils.traverseNodes(repeatContent.node, (childNode) => {
      if (childNode.type === 'dynamic' && childNode.content.referenceType === 'local') {
        if (childNode.content.id === 'index') {
          if (!repeatContent.meta.useIndex) {
            const errorMsg = `\nIndex variable is used but the "useIndex" meta information is false.`
            errors.push(errorMsg)
          }

          // we are dealing with local index here
          return
        }

        if (!validLocalVariableUsage(childNode.content.id, repeatContent.meta.iteratorName)) {
          const errorMsg = `\n"${childNode.content.id}" is used in the "repeat" structure but the iterator name has this value: "${repeatContent.meta.iteratorName}"`
          errors.push(errorMsg)
        }
      }
    })
  })
  return errors
}

const validLocalVariableUsage = (dynamicId: string, repeatIteratorName: string) => {
  const iteratorName = repeatIteratorName || 'item'

  if (!dynamicId.includes('.')) {
    return dynamicId === iteratorName
  }

  const dynamicIdRoot = dynamicId.split('.')[0]
  return dynamicIdRoot === iteratorName
}

/* All referenced props, states and importRefs should be previously defined in the
 "propDefinitions" and "stateDefinitions" and "importDefinitions" sections
 If props or states are defined and not used, a warning witll be displayed */
export const checkDynamicDefinitions = (input: Record<string, unknown>) => {
  const propKeys = Object.keys(input.propDefinitions || {})
  const stateKeys = Object.keys(input.stateDefinitions || {})
  let importKeys = Object.keys(input.importDefinitions || {})
  const componentStyleSetKyes = Object.keys(input.styleSetDefinitions || {})

  const importDefinitions: { [key: string]: UIDLExternalDependency } = (input?.importDefinitions ??
    {}) as unknown as { [key: string]: UIDLExternalDependency }

  if (Object.keys(importKeys).length > 0) {
    importKeys = importKeys.reduce((acc, importRef) => {
      if (importDefinitions[importRef]?.meta?.importJustPath) {
        return acc
      }

      acc.push(importRef)
      return acc
    }, [])
  }

  const usedPropKeys: string[] = []
  const usedStateKeys: string[] = []
  const usedImportKeys: string[] = []
  const errors: string[] = []

  UIDLUtils.traverseNodes(input.node as UIDLNode, (node) => {
    if (node.type === 'element') {
      const { content } = node
      const compStyleReference = Object.values(content?.attrs || {}).find(
        (attr) => attr.type === 'comp-style'
      )

      if (
        compStyleReference &&
        content.elementType !== 'component' &&
        content?.dependency?.type === 'local'
      ) {
        const errorMsg = `${JSON.stringify(
          compStyleReference,
          null,
          2
        )} can only be assigned on a local component instances. Tried to assign on ${content}`

        errors.push(errorMsg)
      }
    }

    if (node.type === 'element') {
      Object.keys(node.content?.events || {}).forEach((eventKey) => {
        node.content.events[eventKey].forEach((event) => {
          if (event.type === 'stateChange' && !stateKeys.includes(event.modifies)) {
            const errorMsg = `"${event.modifies}" is used in events, but not defined. Please add it in stateDefinitions of ${input.name}`
            errors.push(errorMsg)
            return
          }

          if (event.type === 'propCall' && !propKeys.includes(event.calls)) {
            errors.push(
              `"${event.calls}" is used in events, but missing from propDefinitons. Please add it in propDefinitions ${input.name} `
            )
            return
          }
        })
      })

      const dynamicVariants: string[] = []
      Object.values(node.content?.referencedStyles || {}).forEach((styleRef) => {
        if (
          styleRef.content.mapType === 'component-referenced' &&
          styleRef.content.content.type === 'dynamic'
        ) {
          if (styleRef.content.content.content.referenceType === 'prop') {
            const referencedProp = styleRef.content.content.content.id
            if (!dynamicPathExistsInDefinitions(referencedProp, propKeys)) {
              const errorMsg = `"${referencedProp}" is used but not defined. Please add it in propDefinitions ${input.name}`
              errors.push(errorMsg)
              return
            }
            dynamicVariants.push(referencedProp)
            usedPropKeys.push(referencedProp)
          }

          if (styleRef.content.content.content.referenceType === 'comp') {
            const compStyleRefId = styleRef.content.content.content.id

            if (!componentStyleSetKyes.includes(compStyleRefId)) {
              errors.push(
                `${compStyleRefId} is used, but not defined in Component Style Sheet in ${input.name}. Please add it in StyleSetDefinitions of the component`
              )
            }
          }
        }
      })

      if (dynamicVariants.length > 1) {
        errors.push(`Node ${
          node.content?.name || node.content?.key
        } is using multiple dynamic variants using propDefinitions.
        We can have only one dynamic variant at once`)
      }
    }

    if (node.type === 'dynamic' && node.content.referenceType === 'prop') {
      if (!dynamicPathExistsInDefinitions(node.content.id, propKeys)) {
        const errorMsg = `"${node.content.id}" is used but not defined. Please add it in propDefinitions ${input.name}`
        errors.push(errorMsg)
      }

      // for member expression we check the root
      // if value has no `.` it will be checked as it is
      const dynamicIdRoot = node.content.id.split('.')[0]
      usedPropKeys.push(dynamicIdRoot)
    }

    if (node.type === 'dynamic' && node.content.referenceType === 'state') {
      if (!dynamicPathExistsInDefinitions(node.content.id, stateKeys)) {
        const errorMsg = `\n"${node.content.id}" is used but not defined. Please add it in stateDefinitions`
        errors.push(errorMsg)
      }

      // for member expression we check the root
      // if value has no `.` it will be checked as it is
      const dynamicIdRoot = node.content.id.split('.')[0]
      usedStateKeys.push(dynamicIdRoot)
    }

    if (node.type === 'import') {
      if (!dynamicPathExistsInDefinitions(node.content.id, importKeys)) {
        const errorMsg = `\n"${node.content.id}" is used but not defined. Please add it in importDefinitions`
        errors.push(errorMsg)
      }

      // for member expression we check the root
      // if value has no `.` it will be checked as it is
      const dynamicIdRoot = node.content.id.split('.')[0]
      usedImportKeys.push(dynamicIdRoot)
    }
  })

  propKeys
    .filter((x) => !usedPropKeys.includes(x))
    .forEach((diff) =>
      console.warn(`"${diff}" is defined in propDefinitions but it is not used in the UIDL.`)
    )

  stateKeys
    .filter((x) => !usedStateKeys.includes(x))
    .forEach((diff) =>
      console.warn(`"${diff}" is defined in stateDefinitions but it is not used in the UIDL.`)
    )

  importKeys
    .filter((x) => !usedImportKeys.includes(x))
    .forEach((diff) =>
      console.warn(`"${diff}" is defined in importDefinitions but it is not used in the UIDL.`)
    )

  return errors
}

const dynamicPathExistsInDefinitions = (path: string, defKeys: string[]) => {
  if (!path.includes('.')) {
    // prop/state is a scalar value, not a dot notation
    return defKeys.includes(path)
  }

  // TODO: Expand validation logic to check if the path exists on the prop/state definition
  // ex: if prop reference is `user.name`, we should check that prop type is object and has a valid field name
  const rootIdentifier = path.split('.')[0]
  return defKeys.includes(rootIdentifier)
}

// A projectUIDL must contain "route" key
export const checkRouteDefinition = (input: ProjectUIDL) => {
  const errors = []

  const keys = Object.keys(input.root.stateDefinitions || {})
  if (!keys.includes('route')) {
    const errorMsg = 'Route is not defined in stateDefinitions'
    errors.push(errorMsg)
  }
  return errors
}

// All referenced components inside of the projectUIDL should be defined
// in the components section and all the project-referenced styles and tokens
export const checkComponentExistenceAndReferences = (input: ProjectUIDL) => {
  const errors: string[] = []
  const components = Object.keys(input.components || {})
  const styleSetDefinitions = Object.keys(input.root?.styleSetDefinitions || {})
  const tokens: string[] = Object.keys(input.root?.designLanguage?.tokens || {})
  const nodesToParse = [
    input.root.node,
    ...Object.values(input.components || {}).map((component) => component.node),
  ]
  let usedReferencedStyles: string[] = []

  if (input.root?.styleSetDefinitions) {
    Object.values(input.root.styleSetDefinitions || {}).forEach((style) => {
      const { content, conditions = [] } = style
      errors.push(...checkForTokensInstyles(content, tokens))
      conditions.forEach((condition) => {
        if (condition?.content) {
          errors.push(...checkForTokensInstyles(condition.content, tokens))
        }
      })
    })
  }

  nodesToParse.forEach((node) => {
    UIDLUtils.traverseElements(node, (element) => {
      /* Checking for project-referenced styles */
      if (element?.referencedStyles) {
        const { errorsInRferences, usedStyleRefrences } = checkForReferencedStylesUsed(
          element.referencedStyles,
          styleSetDefinitions,
          tokens
        )
        errors.push(...errorsInRferences)
        usedReferencedStyles = [...usedReferencedStyles, ...usedStyleRefrences]
      }

      /* Checking for token references used in styles */
      if (element?.style) {
        errors.push(...checkForTokensInstyles(element.style, tokens))
      }

      if (
        element.dependency &&
        element.dependency.type === 'local' &&
        !components.includes(element.semanticType)
      ) {
        const errorMsg = `\nThe component "${element.semanticType}" is not defined in the UIDL's component section.`
        errors.push(errorMsg)
      }
    })
  })

  styleSetDefinitions.forEach((key) => {
    if (!usedReferencedStyles.includes(key)) {
      console.warn(`${key} styleSet is defined but not used in the project.`)
    }
  })

  return errors
}

const checkForReferencedStylesUsed = (
  referencedStyles: UIDLReferencedStyles,
  styleSetDefinitions: string[],
  tokens: string[]
) => {
  const errorsInRferences: string[] = []
  const usedStyleRefrences: string[] = []
  Object.values(referencedStyles || {}).forEach((styleRef) => {
    const { mapType } = styleRef.content

    if (mapType === 'inlined') {
      errorsInRferences.push(
        ...checkForTokensInstyles(
          (styleRef as UIDLElementNodeInlineReferencedStyle).content.styles,
          tokens
        )
      )
    }

    if (mapType === 'project-referenced') {
      const { referenceId } = (styleRef as UIDLElementNodeProjectReferencedStyle).content
      usedStyleRefrences.push(referenceId)
      if (!styleSetDefinitions.includes(referenceId)) {
        errorsInRferences.push(
          `\n ${referenceId} is missing from the styleSetDefinitions, please check the reference id.`
        )
      }
    }
  })
  return {
    errorsInRferences,
    usedStyleRefrences,
  }
}

const checkForTokensInstyles = (styles: Record<string, UIDLStyleValue>, tokens: string[]) => {
  const errors: string[] = []
  Object.values(styles || {}).forEach((style: UIDLStyleValue) => {
    if (
      style.type === 'dynamic' &&
      style.content.referenceType === 'token' &&
      !tokens.includes(style.content.id)
    ) {
      errors.push(`\nToken ${style.content.id} is missing from the project UIDL.`)
    }
  })
  return errors
}

// All components should have the same key as the value of their name key
// Example:
//  "components": {
//     "OneComponent": {
//       "name": "OneComponent",
//    ..
//      }
//    }
export const checkComponentNaming = (input: ProjectUIDL) => {
  const errors: string[] = []
  const namesUsed = Object.keys(input.components || {})

  const diffs = namesUsed.filter((name) => input.components[name].name !== name)

  if (diffs.length > 0) {
    const errorMsg = `\nThe following components have different name than their key: ${diffs}`
    errors.push(errorMsg)
  }

  return errors
}

export const checkProjectStyleSet = (input: ProjectUIDL) => {
  const errors: string[] = []
  const styleSet = input.root.styleSetDefinitions
  if (styleSet) {
    Object.values(styleSet).forEach((styleSetObj: UIDLStyleSetDefinition) => {
      const { content, conditions = [] } = styleSetObj

      Object.values(conditions).forEach((style) => {
        errors.push(...checStylekContentForErrors(style.content))
      })

      errors.push(...checStylekContentForErrors(content))
    })
  }
  return errors
}

export const checStylekContentForErrors = (
  content: Record<string, UIDLStaticValue | UIDLStyleSetTokenReference>
) => {
  const errors: string[] = []
  Object.values(content).forEach((styleContent) => {
    if (styleContent.type === 'dynamic' && styleContent.content.referenceType !== 'token') {
      errors.push(`Dynamic nodes in styleSetDefinitions supports only tokens`)
    }

    if (
      styleContent.type === 'static' &&
      typeof styleContent.content !== 'string' &&
      typeof styleContent.content !== 'number'
    ) {
      errors.push(
        `Project Style sheet / styleSetDefinitions only support styles with static
        content and dynamic tokens, received ${styleContent}`
      )
    }
  })
  return errors
}

// The "root" node should contain only elements of type "conditional"
export const checkRootComponent = (input: ProjectUIDL) => {
  const errors = []
  const routeNaming: string[] = []
  const rootNode = input.root.node.content as UIDLElement
  rootNode.children.forEach((child) => {
    if (child.type !== 'conditional') {
      const errorMsg = `\nRoot Node contains elements of type "${child.type}". It should contain only elements of type "conditional"`
      errors.push(errorMsg)
    } else {
      routeNaming.push(child.content.value.toString())
    }
  })

  const routeValues = input.root.stateDefinitions.route.values
  if (!routeValues || routeValues.length <= 0) {
    errors.push(
      '\nThe `route` state definition from the root node does not contain the possible route values'
    )
  } else {
    input.root.stateDefinitions.route.values
      .filter((route) => !routeNaming.includes(route.value.toString()))
      .forEach((route) => {
        const errorMsg = `\nRoot Node contains a route that don't have a specified state: ${route.value}.`
        errors.push(errorMsg)
      })
  }

  return errors
}

// The errors should be displayed in a human-readeable way
export const formatErrors = (errors: Array<{ kind: string; at: string; message: string }>) => {
  const listOfErrors: string[] = []
  errors.forEach((error) => {
    const message = `\n - Path ${error.at}: ${error.message}. \n is a ${error.kind} \n`
    listOfErrors.push(message)
  })

  return `UIDL Format Validation Error. Please check the following: ${listOfErrors}`
}

export const validateNulls = (uidl: Record<string, unknown>) => {
  return JSON.parse(JSON.stringify(uidl), (key, value) => {
    if (value === undefined || value == null) {
      throw new ComponentValidationError(`Validation error, Received ${value} at ${key}`)
    }
    return value
  })
}

'''
'''--- packages/teleport-uidl-validator/tsconfig.json ---
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist/esm"
  },
  "include": [
    "./src"
  ]
}
'''
'''--- test-mocks/html-whitespace-sensitive-tag-names.json ---
[
  "script",
  "style",
  "pre",
  "textarea"
]
'''
'''--- tsconfig.json ---
{
    "compilerOptions": {
        "incremental": true,
        "module": "esnext",
        "target": "ES5",
        "declaration": true,
        "declarationMap": true,
        "lib": [
            "es2015",
            "dom"
        ],
        "sourceMap": true,
        "types": [
            "node",
            "jest"
        ],
        "emitDecoratorMetadata": true,
        "experimentalDecorators": true,
        "allowSyntheticDefaultImports": true,
        "forceConsistentCasingInFileNames": true,
        "resolveJsonModule": true,
        "esModuleInterop": true,
        "noUnusedLocals": true,
        "noUnusedParameters": true,
        "moduleResolution": "node",
        "noImplicitAny": true,
        "baseUrl": "src",
        "typeRoots": [
            "node_modules/@types"
        ]
    },
    "exclude": [
        "examples",
        "node_modules",
        "**/dist/**",
        "./__tests__/**/*"
    ]
}

'''
'''--- tslint.json ---
{
  "defaultSeverity": "error",
  "extends": [
    "tslint:latest",
    "tslint-config-prettier"
  ],
  "rules": {
    "array-type": [true, "array-simple"],
    "curly": true,
    "interface-name": [true, "never-prefix"],
    "max-classes-per-file": false,
    "member-ordering": [true, {"order": "statics-first"}],
    "no-any": [true, {"ignore-rest-args": true}],
    "no-arg": true,
    "no-bitwise": true,
    "no-console": [
      true,
      "log",
      "error",
      "debug",
      "time",
      "timeEnd",
      "trace"
    ],
    "prefer-for-of": false,
    "no-debugger": true,
    "no-implicit-dependencies": false,
    "no-object-literal-type-assertion": false,
    "no-shadowed-variable": true,
    "no-submodule-imports": false,
    "no-switch-case-fall-through": true,
    "no-this-assignment": [true, {"allow-destructuring": true}],
    "no-null-undefined-union": true,
    "object-literal-sort-keys": false,
    "ordered-imports": false,
    "switch-default": true,
    "variable-name": [
      true,
      "ban-keywords",
      "check-format",
      "allow-pascal-case"
    ]
  }
}
'''