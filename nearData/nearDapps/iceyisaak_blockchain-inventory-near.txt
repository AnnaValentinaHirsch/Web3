*GitHub Repository "iceyisaak/blockchain-inventory-near"*

'''--- README.md ---
# Blockchain Inventory (NEAR)
###### by: Iceyisaak 
###### Date: 20211229
<br>

## Description

This app is a very simple blockchain app that lets users keep track of inventory on NEAR blockchain.
 
It allows users to:

1. Deploy on NEAR blockchain
2. `addProduct()` to the blockchain
3. `getAllProducts()` from the blockchain
4. `getProduct()` by ID
<br>
<br>

## Prerequisites
- [Enable Yarn in NodeJS](https://yarnpkg.com/getting-started/install)
- [Get NEAR Wallet](https://wallet.testnet.near.org/)
- Run `near login`
<br>
<br>

## Getting Started
1. Run `yarn` to install dependencies
2. Run `./scripts/1.dev-deploy.sh` to set up a NEAR test account + deploy the smartcontract to it.
   1. Look in the terminal log for your experimental contract that looks similar to `dev-###-###`, then run `export CONTRACT=<dev-123-456>`
   2. Set your account as contract owner: `export OWNER=<your-near-account>`
   3. Initialise Contract Owner: `near call \$CONTRACT init '{\"owner\":\"'\$OWNER'\"}' --accountId`
3. Run `./scripts/2.use-contract.sh` to test run Contract
<br>
<br>

## Functionalities

### `addProduct(title: string, description: string, price: f64)`

- Let users add product to the NEAR blockchain
  
  ```ts
  near call $CONTRACT addProduct \
  '{"title":"Product A","description":"This is the awesome Product A","price":9.99}' \
  --accountId $OWNER
  ```

### `getAllProducts(): Array<ProductDetail>`

- Let users get all products from the NEAR blockchain
  
  ```ts
  near call $CONTRACT getAllProducts --accountId $OWNER
  ```

### `getProduct(id: i32): ProductDetail`

- Let users get a single product by ID from the NEAR blockchain

  ```ts
  near call $CONTRACT getProduct \
  '{"id": ###}' \
  --accountId $OWNER
  ```
<br>
<br>

## Cleaning Up
1. Set Beneficiary Contract: `export BENEFICIARY=<your-near-account>`
2. Run `./scripts/3.cleanup.sh/`
<br>
<br>

## About This Project
The project is developed as part of the NEAR Certified Developer Level 1
- Inspired by 
  - [Meme Museum L1](https://github.com/Learn-NEAR/NCD.L1.sample--meme-museum)
  - [Sample Library L1](https://github.com/Learn-NEAR/NCD.L1.sample--library)
- Built on top of [near-sdk-as Starterkit](https://github.com/Learn-NEAR/starter--near-sdk-as) 
<br>
<br>

## The file system

```sh
â”œâ”€â”€ README.md                          # this file
â”œâ”€â”€ as-pect.config.js                  # configuration for as-pect (AssemblyScript unit testing)
â”œâ”€â”€ asconfig.json                      # configuration for AssemblyScript compiler (supports multiple contracts)
â”œâ”€â”€ package.json                       # NodeJS project manifest
â”œâ”€â”€ scripts
â”‚Â Â  â”œâ”€â”€ 1.dev-deploy.sh                # helper: build and deploy contracts
â”‚Â Â  â”œâ”€â”€ 2.use-contract.sh              # helper: call methods on ContractPromise
â”‚Â Â  â”œâ”€â”€ 3.cleanup.sh                   # helper: delete build and deploy artifacts
â”‚Â Â  â””â”€â”€ README.md                      # documentation for helper scripts
â”œâ”€â”€ src
â”‚Â Â  â”œâ”€â”€ as_types.d.ts                  # AssemblyScript headers for type hints
â”‚Â Â  â”œâ”€â”€ inventory                         # Contract: "inventory"
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ __tests__
â”‚Â Â  â”‚Â Â  â”‚Â Â  â”œâ”€â”€ as-pect.d.ts           # as-pect unit testing headers for type hints
â”‚Â Â  â”‚Â Â  â”‚Â Â  â””â”€â”€ index.unit.spec.ts     # unit tests for the contract
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ asconfig.json              # configuration for AssemblyScript compiler (one per contract)
â”‚Â Â  â”‚Â Â  â””â”€â”€ assembly
â”‚Â Â  â”‚Â Â      â””â”€â”€ index.ts               # contract code for the contract
â”‚Â Â  â”œâ”€â”€ tsconfig.json                  # Typescript configuration
â”‚Â Â  â””â”€â”€ utils.ts                       # common contract utility functions
â””â”€â”€ yarn.lock                          # project manifest version lock
```

You may clone this repo to get started OR create everything from scratch.

Please note that, in order to create the AssemblyScript and tests folder structure, you may use the command `asp --init` which will create the following folders and files:

```
./assembly/
./assembly/tests/
./assembly/tests/example.spec.ts
./assembly/tests/as-pect.d.ts
```

'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- asconfig.json ---
{
  "workspaces": [
    "src/inventory"
  ]
}
'''
'''--- package.json ---
{
  "name": "blockchain-inventory",
  "version": "0.0.1",
  "description": "Simple inventory system based on NEAR blockchain",
  "scripts": {
    "dev": "watch -d -n 1 'clear && yarn test'",
    "test": "yarn asp -f unit.spec",
    "clean": "rm -rf ./build && rm -rf ./neardev",
    "build": "asb --target contracts",
    "build:release": "asb",
    "asp": "asp --verbose --nologo"
  },
  "keywords": [],
  "author": "hello@near.org",
  "license": "MIT",
  "devDependencies": {
    "near-sdk-as": "^3.1.0"
  }
}
'''
'''--- scripts/1.dev-deploy.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 1: Building the contract (One moment please.)"
echo ---------------------------------------------------------
echo

yarn build

echo
echo
echo ---------------------------------------------------------
echo "Step 2: Deploying the contract"
echo
echo "(edit scripts/1.dev-deploy.sh to deploy other contract)"
echo ---------------------------------------------------------
echo

# deploy the contract
near dev-deploy ./build/contracts/inventory.wasm

echo
echo
echo ---------------------------------------------------------
echo "Step 3: Prepare your environment for next steps"
echo
echo "(a) find the contract (account) name in the message above"
echo "    it will look like this: [ Account id: dev-###-### ]"
echo
echo "(b) set an environment variable using this account name"
echo "    see example below (this may not work on Windows)"
echo
echo ---------------------------------------------------------
echo 'export CONTRACT=<dev-123-456>'
echo 'export OWNER=<your-near-account>'
echo "near call \$CONTRACT init '{\"owner\":\"'\$OWNER'\"}' --accountId \$CONTRACT"
echo ---------------------------------------------------------
echo

exit 0
'''
'''--- scripts/2.use-contract.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 0: Check for environment variable with contract name"
echo ---------------------------------------------------------
echo

[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable" && exit 1
[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"

echo
echo
echo ---------------------------------------------------------
echo "Step 1: Call 'view' functions on the contract"
echo
echo "(run this script again to see changes made by this file)"
echo ---------------------------------------------------------
echo

# near view $CONTRACT start
# echo "Hi $OWNER :D Welcome to the Blockchain Restaurant System :D !!!" 
near view $CONTRACT greeting
echo
echo
echo
near call $CONTRACT contractInfo --accountId $OWNER

# near view $CONTRACT read '{"key":"some-key"}'

echo
echo
echo ---------------------------------------------------------
echo "Step 2: Call 'change' functions on the contract"
echo ---------------------------------------------------------
echo

# the following line fails with an error because we can't write to storage without signing the message
# --> FunctionCallError(HostError(ProhibitedInView { method_name: "storage_write" }))
# near view $CONTRACT write '{"key": "some-key", "value":"some value"}'
# near call $CONTRACT write '{"key": "some-key", "value":"some value"}' --accountId $CONTRACT

echo
echo
exit 0

'''
'''--- scripts/3.cleanup.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 0: Check for required environment variables"
echo ---------------------------------------------------------
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$BENEFICIARY" ] && echo "Missing \$BENEFICIARY environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"
[ -z "$BENEFICIARY" ] || echo "Found it! \$BENEFICIARY is set to [ $BENEFICIARY ]"

echo
echo
echo ---------------------------------------------------------
echo "Step 1: Delete $CONTRACT, setting $BENEFICIARY as beneficiary"
echo ---------------------------------------------------------
echo
near delete $CONTRACT $BENEFICIARY

echo
echo ---------------------------------------------------------
echo "Step 2: Clean up project folders"
echo ---------------------------------------------------------
echo
yarn clean

exit 0

'''
'''--- src/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- src/inventory/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- src/inventory/__tests__/index.unit.spec.ts ---
import { Contract } from "../assembly";

let contract: Contract

beforeEach(() => {
  contract = new Contract()
})

describe("Contract", () => {
  // VIEW method tests

  it("says hello", () => {
    expect(contract.helloWorld()).toStrictEqual("hello world")
  })

  it("reads data", () => {
    expect(contract.read("some key")).toStrictEqual("ðŸš« Key [ some key ] not found in storage. ( storage [ 0 bytes ] )")
  })

  // CHANGE method tests

  it("saves data to contract storage", () => {
    expect(contract.write("some-key", "some value")).toStrictEqual("âœ… Data saved. ( storage [ 18 bytes ] )")
  })
})

'''
'''--- src/inventory/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- src/inventory/assembly/index.ts ---
import { Context, logging } from "near-sdk-core"
import { AccountId } from "../../utils"
import { ProductDetail, Products } from "./model"

@nearBindgen
export class Contract {
  private owner: AccountId
  constructor(owner: AccountId) {
    this.owner = owner
  }

  greeting(): string {
    return `Hi ${this.owner} :D Welcome to the Blockchain Inventory System :D !!!`
  }

  contractInfo(): string {
    this.assert_owner()
    logging.log('-------------------------------------')
    logging.log(`$CONTRACT: ${Context.contractName}`)
    logging.log(`$OWNER: ${this.owner}`)
    logging.log('-------------------------------------')
    return `contractInfo()`
  }

  @mutateState()
  addProduct(title: string, description: string, price: f64): bool {
    this.assert_owner()
    assert(title.length > 0, "Title is required.")
    assert(price >= 0, "Price is required.")
    Products.push(new ProductDetail(Products.length, title, description, price, Context.blockTimestamp))
    return true
  }

  getAllProducts(): Array<ProductDetail> {
    const result = new Array<ProductDetail>(Products.length)
    for (let i = 0; i < Products.length; i++) {
      result[i] = Products[i]
    }
    return result
  }

  getProduct(id: i32): ProductDetail {
    assert(Products.length > 0, "Inventory is empty.")
    assert(id <= (Products.length - 1), "Product not found.")
    return Products[id]
  }

  private assert_owner(): void {
    const caller = Context.predecessor
    assert(this.owner == caller, "You have no right to call such method ;)")
  }

}

'''
'''--- src/inventory/assembly/model.ts ---
import { PersistentMap, PersistentVector } from 'near-sdk-core'
import { AccountId } from '../../utils'

export enum ProductRating {
  none,
  bad,
  ok,
  good,
  excellent,
  perfect
}

export class Rating {
  rating: ProductRating
  constructor(_rating: ProductRating) {
    this.rating = _rating
  }
}

@nearBindgen
export class ProductDetail {
  id: u64;
  title: string
  description: string
  price: f64
  rating: PersistentVector<Rating>
  comment: PersistentMap<AccountId, string>
  timestamp: u64
  constructor(
    id: u64,
    title: string,
    description: string,
    price: f64,
    timestamp: u64
  ) {
    this.id = id
    this.title = title
    this.description = description
    this.price = price
    this.rating = new PersistentVector<Rating>('rating')
    this.comment = new PersistentMap<AccountId, string>('comment')
    this.timestamp = timestamp
  }
}

export const Products = new PersistentVector<ProductDetail>("Products")
export const rate = new PersistentMap<AccountId, u64>("rate")
'''
'''--- src/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- src/utils.ts ---
import { u128, Context, ContractPromise } from "near-sdk-as";

/**
 * == TYPES ====================================================================
 */

/**
 * Account IDs in NEAR are just strings.
 */
export type AccountId = string;

/**
 * Gas is u64
 */
export type Gas = u64;

/**
 * Amounts, Balances, and Money in NEAR is are u128.
 */

export type Amount = u128;

export type Balance = Amount;

export type Money = Amount;

/**
 * Timestamp in NEAR is a number.
 */
export type Timestamp = u64;

/**
 * == CONSTANTS ================================================================
 *
 * ONE_NEAR = unit of NEAR token in yocto â“ƒ (1e24)
 * XCC_GAS = gas for cross-contract calls, ~5 Tgas (teragas = 1e12) per "hop"
 * MIN_ACCOUNT_BALANCE = 3 NEAR min to keep account alive via storage staking
 *
 * TODO: revist MIN_ACCOUNT_BALANCE after some real data is included b/c this
 *  could end up being much higher
 */

export const ONE_NEAR = u128.from("1000000000000000000000000");
export const XCC_GAS: Gas = 20_000_000_000_000;
export const MIN_ACCOUNT_BALANCE: u128 = u128.mul(ONE_NEAR, u128.from(3));

/**
 * == FUNCTIONS ================================================================
 */

/**
 * @function asNEAR
 * @param amount {u128} - Yocto â“ƒ token quantity as an unsigned 128-bit integer
 * @returns {string}    - Amount in NEAR, as a string
 *
 * @example
 *
 *    asNEAR(7000000000000000000000000)
 *    // => '7'
 */
export function asNEAR(amount: u128): string {
  return u128.div(amount, ONE_NEAR).toString();
}

/**
 * @function toYocto
 * @param amount {number} - Integer to convert
 * @returns {u128}        - Amount in yocto â“ƒ as an unsigned 128-bit integer
 *
 * @example
 *
 *    toYocto(7)
 *    // => 7000000000000000000000000
 */
export function toYocto(amount: number): u128 {
  return u128.mul(ONE_NEAR, u128.from(amount))
}

/**
 * Function to assert that the contract has called itself
 */
export function assert_self(): void {
  const caller = Context.predecessor
  const self = Context.contractName
  assert(caller == self, "Only this contract may call itself");
}

export function assert_single_promise_success(): void {
  const x = ContractPromise.getResults()
  assert(x.length == 1, "Expected exactly one promise result")
  assert(x[0].succeeded, "Expected PromiseStatus to be successful")
}

'''