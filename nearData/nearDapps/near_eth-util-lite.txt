*GitHub Repository "near/eth-util-lite"*

'''--- .github/ISSUE_TEMPLATE/BOUNTY.yml ---
name: "Simple Bounty"
description: "Use this template to create a HEROES Simple Bounty via Github bot"
title: "Bounty: "
labels: ["bounty"]
assignees: heroes-bot-test
body:
  - type: markdown
    attributes:
      value: |
        Hi! Let's set up your bounty! Please don't change the template - @heroes-bot-test won't be able to help you.

  - type: dropdown
    id: type
    attributes:
      label: What talent are you looking for?
      options:
        - Marketing
        - Development
        - Design
        - Other
        - Content
        - Research
        - Audit

  - type: textarea
    id: description
    attributes:
      label: What you need to be done?

  - type: dropdown
    id: tags
    attributes:
      label: Tags
      description: Add tags that match the topic of the work
      multiple: true
      options:
        - API
        - Blockchain
        - Community
        - CSS
        - DAO
        - dApp
        - DeFi
        - Design
        - Documentation
        - HTML
        - Javascript
        - NFT
        - React
        - Rust
        - Smart contract
        - Typescript
        - UI/UX
        - web3
        - Translation
        - Illustration
        - Branding
        - Copywriting
        - Blogging
        - Editing
        - Video Creation
        - Social Media
        - Graphic Design
        - Transcription
        - Product Design
        - Artificial Intelligence
        - Quality Assurance
        - Risk Assessment
        - Security Audit
        - Bug Bounty
        - Code Review
        - Blockchain Security
        - Smart Contract Testing
        - Penetration Testing
        - Vulnerability Assessment
        - BOS
        - News
        - Hackathon
        - NEARCON2023
        - NEARWEEK

  - type: input
    id: deadline
    attributes:
      label: Deadline
      description: "Set a deadline for your bounty. Please enter the date in format: DD.MM.YYYY"
      placeholder: "19.05.2027"

  - type: dropdown
    id: currencyType
    attributes:
      label: Currency
      description: What is the currency you want to pay?
      options:
        - USDC.e
        - USDT.e
        - DAI
        - wNEAR
        - USDt
        - XP
        - marmaj
        - NEKO
        - JUMP
        - USDC
        - NEARVIDIA
      default: 0
    validations:
      required: true

  - type: input
    id: currencyAmount
    attributes:
      label: Amount
      description: How much it will be cost?

  - type: markdown
    attributes:
      value: "## Advanced settings"

  - type: checkboxes
    id: kyc
    attributes:
      label: KYC
      description: "Use HEROES' KYC Verification, only applicants who passed HEROES' KYC can apply and work on this bounty!"
      options:
        - label: Use KYC Verification

  - type: markdown
    attributes:
      value: |
        ### This cannot be changed once the bounty is live!

'''
'''--- README.md ---
# eth-util-lite

This is a low-dependency utility for Ethereum. It replaces a small subset of the [ethereumjs-util](https://github.com/ethereumjs/ethereumjs-util) and [ethjs-util](https://github.com/ethjs/ethjs-util) APIs.
'''
'''--- index.js ---
const keccak256 = require('js-sha3').keccak256;
const BN = require('bn.js');
const rlp = require('rlp');
const Buffer = require('safe-buffer').Buffer;

const KECCAK256_RLP_ARRAY = Buffer.from(
  '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
  'hex'
);

const KECCAK256_RLP_NULL = Buffer.from(
  '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
  'hex'
);

const KECCAK256_NULL = Buffer.from(
  'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470',
  'hex'
);

const encode = input => (input === '0x0')
  ? rlp.encode(Buffer.alloc(0))
  : rlp.encode(input);

const decode = rlp.decode;

const toBuffer = input => (input === '0x0')
  ? Buffer.alloc(0)
  : _toBuffer(input);

const keccak = input => toBuffer(_keccak(input));

const toHex = input => (input instanceof Array)
  ? toHex(encode(input))
  : bufferToHex(input);

const toWord = input => setLengthLeft(toBuffer(input), 32);

const mappingAt = (...keys) => { // first key is mapping's position
  keys[0] = toWord(keys[0]);
  const keysReducer = (positionAccumulator, key) => {
    const buf = Buffer.concat([toWord(key), positionAccumulator]);
    return keccak(buf);
  };
  return toHex(keys.reduce(keysReducer));
};

module.exports = {
  keccak,
  encode,
  decode,
  toBuffer,
  toHex,
  toWord,
  mappingAt,
  KECCAK256_RLP_ARRAY,
  KECCAK256_RLP_NULL,
  KECCAK256_NULL
};

// following 5 functions adapted or copied from ethereumjs-util

function _keccak(a) {
  a = _toBuffer(a);
  return keccak256.create().update(a).digest();
}

function _toBuffer(v) {
  if (!Buffer.isBuffer(v)) {
      if (Array.isArray(v)) {
          v = Buffer.from(v);
      }
      else if (typeof v === 'string') {
          if (isHexString(v)) {
              v = Buffer.from(padToEven(stripHexPrefix(v)), 'hex');
          }
          else {
              v = Buffer.from(v);
          }
      }
      else if (typeof v === 'number') {
          v = intToBuffer(v);
      }
      else if (v === null || v === undefined) {
          v = Buffer.allocUnsafe(0);
      }
      else if (BN.isBN(v)) {
          v = v.toArrayLike(Buffer);
      }
      else if (v.toArray) {
          // converts a BN to a Buffer
          v = Buffer.from(v.toArray());
      }
      else {
          throw new Error('invalid type');
      }
  }
  return v;
}

function bufferToHex(buf) {
  buf = _toBuffer(buf);
  return '0x' + buf.toString('hex');
}

function setLengthLeft(msg, length, right) {
  if (right === void 0) { right = false; }
  var buf = zeros(length);
  msg = _toBuffer(msg);
  if (right) {
      if (msg.length < length) {
          msg.copy(buf);
          return buf;
      }
      return msg.slice(0, length);
  }
  else {
      if (msg.length < length) {
          msg.copy(buf, length - msg.length);
          return buf;
      }
      return msg.slice(-length);
  }
}

function zeros(bytes) {
  return Buffer.allocUnsafe(bytes).fill(0);
}

// remaining functions copied from ethjs-util

function isHexString(value, length) {
  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }

  if (length && value.length !== 2 + 2 * length) {
    return false;
  }

  return true;
}

function padToEven(value) {
  var a = value;

  if (typeof a !== 'string') {
    throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof a + ', while padToEven.');
  }

  if (a.length % 2) {
    a = '0' + a;
  }

  return a;
}

function stripHexPrefix(str) {
  if (typeof str !== 'string') {
    return str;
  }

  return isHexPrefixed(str) ? str.slice(2) : str;
}

function isHexPrefixed(str) {
  if (typeof str !== 'string') {
    throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + (typeof str) + ", while checking isHexPrefixed.");
  }

  return str.slice(0, 2) === '0x';
}

function intToBuffer(i) {
  var hex = intToHex(i);

  return new Buffer(padToEven(hex.slice(2)), 'hex');
}

function intToHex(i) {
  var hex = i.toString(16);

  return '0x' + hex;
}
'''
'''--- package-lock.json ---
{
  "name": "eth-util-lite",
  "version": "1.0.1",
  "lockfileVersion": 1,
  "requires": true,
  "dependencies": {
    "bn.js": {
      "version": "4.11.8",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-4.11.8.tgz",
      "integrity": "sha512-ItfYfPLkWHUjckQCk8xC+LwxgK8NYcXywGigJgSwOP8Y2iyWT4f2vsZnoOXTTbo+o5yXmIUJ4gn5538SO5S3gA=="
    },
    "js-sha3": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/js-sha3/-/js-sha3-0.8.0.tgz",
      "integrity": "sha512-gF1cRrHhIzNfToc802P800N8PpXS+evLLXfsVpowqmAFR9uwbi89WvXg2QspOmXL8QL86J4T1EpFu+yUkwJY3Q=="
    },
    "rlp": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/rlp/-/rlp-2.2.3.tgz",
      "integrity": "sha512-l6YVrI7+d2vpW6D6rS05x2Xrmq8oW7v3pieZOJKBEdjuTF4Kz/iwk55Zyh1Zaz+KOB2kC8+2jZlp2u9L4tTzCQ==",
      "requires": {
        "bn.js": "^4.11.1",
        "safe-buffer": "^5.1.1"
      }
    },
    "safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
    }
  }
}

'''
'''--- package.json ---
{
  "name": "eth-util-lite",
  "version": "1.0.1",
  "description": "Ethereum utility with very low dependencies",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/near/eth-util-lite.git"
  },
  "keywords": [
    "Ethereum",
    "keccak",
    "keccak256",
    "rlp",
    "buffer"
  ],
  "author": "Michael Allen Warner",
  "contributors": [
    "Zac Mitton"
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/near/eth-util-lite/issues"
  },
  "homepage": "https://github.com/near/eth-util-lite#readme",
  "dependencies": {
    "bn.js": "^4.11.8",
    "js-sha3": "^0.8.0",
    "rlp": "^2.2.3",
    "safe-buffer": "^5.1.2"
  }
}

'''