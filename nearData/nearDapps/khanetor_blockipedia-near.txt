*GitHub Repository "khanetor/blockipedia-near"*

'''--- .cargo/config.toml ---
[target.wasm32-unknown-unknown]
rustflags = ["-C", "link-arg=-s"]
'''
'''--- .github/workflows/frontend-check.yml ---
name: Frontend Check

on:
  pull_request:
    branches:
      - main

jobs:
  deploy-page:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [16]
        frontend-dir: ["./frontend"]

    steps:
      - name: Checkout üõé
        uses: actions/checkout@master

      - name: Setup node env üèó
        uses: actions/setup-node@v3.1.1
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      - name: Get yarn cache directory path üõ†
        working-directory: ${{ matrix.frontend-dir }}
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node_modules üì¶
        uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        working-directory: ${{ matrix.frontend-dir }}
        run: yarn

      - name: Typecheck
        working-directory: ${{ matrix.frontend-dir }}
        run: yarn typecheck

      - name: Generate static Pages
        working-directory: ${{ matrix.frontend-dir }}
        run: yarn build

'''
'''--- .github/workflows/github-pages.yml ---
name: GitHub Pages

on:
  push:
    branches:
      - main

jobs:
  deploy-page:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [16]
        frontend-dir: ["./frontend"]

    steps:
      - name: Checkout üõé
        uses: actions/checkout@master

      - name: Setup node env üèó
        uses: actions/setup-node@v3.1.1
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
      
      - name: Get yarn cache directory path üõ†
        working-directory: ${{ matrix.frontend-dir }}
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      
      - name: Cache node_modules üì¶
        uses: actions/cache@v3        
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        working-directory: ${{ matrix.frontend-dir }}
        run: yarn
      
      - name: Typecheck
        working-directory: ${{ matrix.frontend-dir }}
        run: yarn typecheck
      
      - name: Generate static Pages
        working-directory: ${{ matrix.frontend-dir }}
        run: yarn build
      
      - name: Deploy To GitHub Pages
        working-directory: ${{ matrix.frontend-dir }}
        run: |
          git remote set-url origin https://git:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          yarn deploy -u "github-actions-bot <support+actions@github.com>"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

'''
'''--- .github/workflows/rust-lint.yml ---
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# rust-clippy is a tool that runs a bunch of lints to catch common
# mistakes in your Rust code and help improve your Rust code.
# More details at https://github.com/rust-lang/rust-clippy 
# and https://rust-lang.github.io/rust-clippy/

name: Rust Lint

on:
  push:
    branches: [ main ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ main ]

jobs:
  rust-clippy-analyze:
    name: Run rust-clippy analyzing
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: wasm32-unknown-unknown
          components: clippy, rustfmt
          override: true

      - name: Install required cargo
        run: cargo install clippy-sarif sarif-fmt

      - name: Run rust-clippy
        run:
          cargo clippy
          --all-features
          --message-format=json | clippy-sarif | tee rust-clippy-results.sarif | sarif-fmt
        continue-on-error: true

      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: rust-clippy-results.sarif
          wait-for-processing: true
      
      - name: Run rustfmt
        run:
          cargo fmt
          --all
          --check

'''
'''--- .gitpod.yml ---
tasks:
  - init: |
      echo 'TODO: build project'
    command: |
      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      rustup target add wasm32-unknown-unknown
      rustup component add clippy rustfmt
      npm install -g near-cli

'''
'''--- .vscode/settings.json ---
{
    "makefile.extensionOutputFolder": "./.vscode"
}
'''
'''--- Cargo.toml ---
[package]
name = "blockipedia-near"
version = "0.1.0"
authors = ["Kha Nguyen <nlhkha@gmail.com>", "Khang Dinh <gate@dklab.co>"]
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "4.0.0"

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

'''
'''--- README.md ---
# Blockipedia-NEAR
A wikipedia on NEAR Protocol

[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/nlhkh/blockipedia-near)

## Visit the Blockipedia page
https://nlhkh.github.io/blockipedia-near/

# How to develop locally

## Backend (smart contract on NEAR rust sdk)

Prerequisites:
- [near-cli](https://www.npmjs.com/package/near-cli)
- [rustc](https://www.rust-lang.org/tools/install)

```
make build
make dev-deploy
```

## Frontend (Gatsby React app)

Prerequisites:
- [Node.js](https://nodejs.dev/learn/how-to-install-nodejs)
- [yarn](https://classic.yarnpkg.com/lang/en/docs/install/#mac-stable)

All frontend resources are under `./frontend` directory
For local development, Gatsby expects env vars from the `.env.development` file
Feel free to copy from `.env.development.sample` and make any change you need

```bash
make dev-frontend
```

# How to run tests

## Run tests against the entire suite

```bash
make test
```

## Run test for a single unit test

```bash
make test TEST_TARGET=test_name
# where `test_name` is the name of the specific test function
# e.g. "create_article_with_insufficient_fund"
```

## Run tests while allowing console log messages (e.g. from `println!` or `dbg!`) to show up

```bash
# run all tests
make test-verbose
# run a specific test
make test-verbose TEST_TARGET=test_name
```

'''
'''--- frontend/README.md ---
<p align="center">
  <a href="https://www.gatsbyjs.com/?utm_source=starter&utm_medium=readme&utm_campaign=minimal-starter-ts">
    <img alt="Gatsby" src="https://www.gatsbyjs.com/Gatsby-Monogram.svg" width="60" />
  </a>
</p>
<h1 align="center">
  Gatsby minimal TypeScript starter
</h1>

## üöÄ Quick start

1.  **Create a Gatsby site.**

    Use the Gatsby CLI to create a new site, specifying the minimal TypeScript starter.

    ```shell
    # create a new Gatsby site using the minimal TypeScript starter
    npm init gatsby
    ```

2.  **Start developing.**

    Navigate into your new site‚Äôs directory and start it up.

    ```shell
    cd my-gatsby-site/
    npm run develop
    ```

3.  **Open the code and start customizing!**

    Your site is now running at http://localhost:8000!

    Edit `src/pages/index.tsx` to see your site update in real-time!

4.  **Learn more**

    - [Documentation](https://www.gatsbyjs.com/docs/?utm_source=starter&utm_medium=readme&utm_campaign=minimal-starter-ts)

    - [Tutorials](https://www.gatsbyjs.com/tutorial/?utm_source=starter&utm_medium=readme&utm_campaign=minimal-starter-ts)

    - [Guides](https://www.gatsbyjs.com/tutorial/?utm_source=starter&utm_medium=readme&utm_campaign=minimal-starter-ts)

    - [API Reference](https://www.gatsbyjs.com/docs/api-reference/?utm_source=starter&utm_medium=readme&utm_campaign=minimal-starter-ts)

    - [Plugin Library](https://www.gatsbyjs.com/plugins?utm_source=starter&utm_medium=readme&utm_campaign=minimal-starter-ts)

    - [Cheat Sheet](https://www.gatsbyjs.com/docs/cheat-sheet/?utm_source=starter&utm_medium=readme&utm_campaign=minimal-starter-ts)

## üöÄ Quick start (Gatsby Cloud)

Deploy this starter with one click on [Gatsby Cloud](https://www.gatsbyjs.com/cloud/):

[<img src="https://www.gatsbyjs.com/deploynow.svg" alt="Deploy to Gatsby Cloud">](https://www.gatsbyjs.com/dashboard/deploynow?url=https://github.com/gatsbyjs/gatsby-starter-minimal-ts)

'''
'''--- frontend/gatsby-browser.js ---
import "./src/css/index.css"

import { Buffer } from "buffer"
window.Buffer = Buffer
'''
'''--- frontend/gatsby-config.ts ---
if (process.env.DOTENV_PATH) {
  require("dotenv").config({
    path: process.env.DOTENV_PATH,
  })
} else {
  require("dotenv").config({
    path: `.env.${process.env.NODE_ENV || 'development'}`,
  })
}

import type { GatsbyConfig } from "gatsby";

const config: GatsbyConfig = {
  siteMetadata: {
    title: process.env.GATSBY_APP_NAME,
    siteUrl: `${process.env.GATSBY_HOSTNAME!}${process.env.GATSBY_PATH_PREFIX || ""}`
  },
  pathPrefix: process.env.GATSBY_PATH_PREFIX, // e.g. `/blockipedia-near` when served by GitHub Pages
  plugins: [
    "gatsby-plugin-postcss",
    "gatsby-plugin-react-helmet",
    "gatsby-plugin-image",
    "gatsby-plugin-sharp",
    "gatsby-transformer-sharp",
    "gatsby-plugin-layout",
    "gatsby-plugin-sitemap",
    {
      resolve: 'gatsby-source-filesystem',
      options: {
        "name": "images",
        "path": "./src/images/"
      },
      __key: "images"
    },
    {
      resolve: `gatsby-plugin-manifest`,
      options: {
        name: `Blockipedia`,
        short_name: `B`,
        start_url: `/`,
        background_color: `#f7f0eb`,
        theme_color: `#a2466c`,
        display: `standalone`,
        icon: `src/images/favicon.png`
      },
    },
    {
      resolve: "gatsby-plugin-react-svg",
      options: {
        rule: {
          include: /assets\/svg/ // See below to configure properly
        }
      }
    }]
};

export default config;

'''
'''--- frontend/package.json ---
{
  "name": "blockipedia",
  "version": "1.0.0",
  "private": true,
  "description": "blockipedia",
  "author": "Kha",
  "contributors": [
    "Khang Dinh <gate@dklab.co>"
  ],
  "keywords": [
    "gatsby"
  ],
  "scripts": {
    "develop": "gatsby develop",
    "start": "gatsby develop",
    "build": "gatsby build --prefix-paths",
    "serve": "gatsby serve",
    "clean": "gatsby clean",
    "typecheck": "tsc --noEmit",
    "generate:css": "tcm -w -p 'src/**/*.module.css' .",
    "deploy": "gh-pages -d public"
  },
  "dependencies": {
    "buffer": "^6.0.3",
    "clsx": "^1.1.1",
    "gatsby": "^4.25.7",
    "near-api-js": "^0.45.1",
    "react": "^18.1.0",
    "react-dom": "^18.1.0",
    "react-helmet": "^6.1.0",
    "react-markdown": "^8.0.3",
    "remark-gfm": "^3.0.1",
    "tailwindcss": "^3.1.2"
  },
  "devDependencies": {
    "@types/node": "^17.0.42",
    "@types/react": "^18.0.5",
    "@types/react-dom": "^18.0.5",
    "@types/react-helmet": "^6.1.5",
    "autoprefixer": "^10.4.7",
    "gatsby-plugin-image": "^2.16.1",
    "gatsby-plugin-layout": "^3.16.0",
    "gatsby-plugin-manifest": "^4.16.0",
    "gatsby-plugin-postcss": "^5.16.0",
    "gatsby-plugin-react-helmet": "^5.16.0",
    "gatsby-plugin-react-svg": "^3.1.0",
    "gatsby-plugin-sharp": "^4.25.1",
    "gatsby-plugin-sitemap": "^5.16.0",
    "gatsby-source-filesystem": "^4.16.0",
    "gatsby-transformer-sharp": "^4.16.0",
    "gh-pages": "^5.0.0",
    "postcss": "^8.4.31",
    "typed-css-modules": "^0.7.2",
    "typescript": "^4.7.3"
  }
}

'''
'''--- frontend/postcss.config.js ---
module.exports = function () {
    return {
        plugins: [require("tailwindcss")]
    }
}

'''
'''--- frontend/src/assets/svg.type.ts ---
declare module "*.svg" {
    const content: any;
    export default content;
}
'''
'''--- frontend/src/assets/svg/arrow-down.svg ---
<svg width="30px" height="30px" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect width="48" height="48" fill="white" fill-opacity="0.01" />
    <path d="M37 18L25 30L13 18" stroke="black" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" />
</svg>
'''
'''--- frontend/src/assets/svg/arrow-up.svg ---
<svg width="30px" height="30px" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
    <rect width="48" height="48" fill="white" fill-opacity="0.01" />
    <path d="M13 30L25 18L37 30" stroke="black" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" />
</svg>
'''
'''--- frontend/src/components/landing/style.module.css ---
.landing {
  @apply bg-slate-400 px-32 py-10 flex justify-center items-center;
}

.tagline {
  @apply font-mono font-semibold text-6xl;
}

'''
'''--- frontend/src/components/landing/style.module.css.d.ts ---
declare const styles: {
  readonly "landing": string;
  readonly "tagline": string;
};
export = styles;

'''
'''--- frontend/src/components/markdown/index.module.css ---
.markdownStyle {
  @apply font-open-sans;
}

.markdownStyle h1 {
  @apply text-6xl font-bold;
}

.markdownStyle h2 {
  @apply text-5xl font-bold;
}

.markdownStyle h3 {
  @apply text-4xl font-bold;
}

.markdownStyle h4 {
  @apply text-3xl font-bold;
}

.markdownStyle h5 {
  @apply text-2xl font-bold;
}

.markdownStyle h6 {
  @apply text-xl font-bold;
}

.markdownStyle ul {
  @apply list-disc ml-4;
}

.markdownStyle ol {
  @apply list-decimal ml-4;
}

.markdownStyle blockquote {
  @apply my-3 py-2 pl-6 border-l-4 bg-slate-200 bg-opacity-50;
}

.markdownStyle a {
  @apply underline;
}

.markdownStyle a:link {
  @apply text-blue-500;
}

.markdownStyle a:visited {
  @apply text-rose-700;
}

'''
'''--- frontend/src/components/markdown/index.module.css.d.ts ---
declare const styles: {
  readonly "markdownStyle": string;
};
export = styles;

'''
'''--- frontend/src/components/nearAuth/extendedContract.ts ---
import { Contract } from "near-api-js";

type CreateArticleArgs = {
    callbackUrl: string,
    meta: string,
    args: { title: string, content: string },
    gas: string,
    amount: string
}

type DonateArgs = {
    callbackUrl: string,
    meta: string,
    args: { article_id: number },
    gas: string,
    amount: string
}

type VoteArgs = {
    article_id: number
}

type GetArticleArg = {
    article_id: number
}

export type Article = {
    id: number,
    title: string,
    content: string,
    author: string,
    published_date: number,
    upvote: number,
    downvote: number
}

export type ArticleMeta = [number, { author: string, title: string, published_date: number }]

export interface ExtendedContract extends Contract {
    get_articles: () => Promise<ArticleMeta[]>
    get_article: (arg: GetArticleArg) => Promise<Article>
    create_article: (arg: CreateArticleArgs) => Promise<void>
    donate: (arg: DonateArgs) => Promise<void>
    upvote: (arg: VoteArgs) => Promise<void>
    downvote: (arg: VoteArgs) => Promise<void>
}

'''
'''--- frontend/src/css/index.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

@import url('https://fonts.googleapis.com/css2?family=Francois+One&family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&display=swap');
'''
'''--- frontend/src/layouts/index.module.css ---
.header {
  @apply bg-slate-400 flex flex-row justify-between items-center px-32 py-5 border-black border-b sticky top-0;
}

.branding {
  @apply font-francois-one text-4xl;
}

.links {
  @apply flex flex-row gap-6 items-center;
}

.link {
  @apply text-sm hover:cursor-pointer;
}

.linkAction {
  @apply link bg-black text-white rounded-full p-3 capitalize;
}

'''
'''--- frontend/src/layouts/index.module.css.d.ts ---
declare const styles: {
  readonly "header": string;
  readonly "branding": string;
  readonly "links": string;
  readonly "link": string;
  readonly "linkAction": string;
};
export = styles;

'''
'''--- frontend/src/near-wallet/contract.ts ---
import { Dispatch, SetStateAction } from "react"
import { Contract, utils, WalletConnection } from "near-api-js"
import { signIn, signOut } from "."
import { ArticleMeta, Article, ExtendedContract } from "../components/nearAuth/extendedContract"

export type ISmartContract = {
    accountId: string
    authenticated: boolean
    login: () => Promise<void>
    logout: () => void,
    getArticles: () => Promise<ArticleMeta[]>
    getArticle: (id: number) => Promise<Article>
    createArticle: (title: string, content: string) => Promise<void>
    donate: (articleId: number, amount: number) => Promise<void>
    upvote: (articleId: number) => Promise<void>
    downvote: (articleId: number) => Promise<void>
}

export function buildContractInterface(wallet: WalletConnection, setAuthenticated: Dispatch<SetStateAction<boolean>>): ISmartContract {
    const contract = new Contract(wallet.account(), process.env.GATSBY_CONTRACT_ADDRESS!, {
        viewMethods: ["get_article", "get_articles"],
        changeMethods: ["create_article", "update_article", "upvote", "downvote", "donate"]
    }) as ExtendedContract

    // ensure we don't have double slashes as we concatenate the callbackUrl value for some of the
    // contract methods
    let pathPrefix = process.env.GATSBY_PATH_PREFIX || ""
    if (pathPrefix.endsWith("/")) pathPrefix = pathPrefix.substring(0, pathPrefix.length - 1)

    // this is akin to gatsby's siteUrl
    const appRoot = `${process.env.GATSBY_HOSTNAME!}${pathPrefix}`

    const authenticated = wallet.isSignedIn()

    const accountId: string = wallet.getAccountId()

    async function login() {
        await signIn(wallet)
    }

    function logout() {
        signOut(wallet)
        setAuthenticated(false)
    }

    async function getArticles(): Promise<ArticleMeta[]> {
        return await contract.get_articles()
    }

    async function getArticle(id: number): Promise<Article> {
        return await contract.get_article({
            article_id: id
        })
    }

    async function createArticle(title: string, content: string): Promise<void> {
        await contract.create_article({
            callbackUrl: `${appRoot}/write/callback`,
            meta: "articleCreated",
            args: {
                title, content
            },
            gas: "300000000000000",
            amount: utils.format.parseNearAmount("2")!
        })
    }

    async function donate(articleId: number, amount: number): Promise<void> {
        await contract.donate({
            callbackUrl: `${appRoot}/read/${articleId}`,
            meta: "donated",
            args: {
                article_id: articleId
            },
            gas: "300000000000000",
            amount: utils.format.parseNearAmount(amount.toString())!
        })
    }

    async function upvote(articleId: number): Promise<void> {
        await contract.upvote({ article_id: articleId })
    }

    async function downvote(articleId: number): Promise<void> {
        await contract.downvote({ article_id: articleId })
    }

    return {
        accountId, authenticated, login, logout, getArticles, getArticle, createArticle, donate, upvote, downvote
    }
}

'''
'''--- frontend/src/near-wallet/index.ts ---
import { connect, keyStores, WalletConnection, ConnectConfig } from "near-api-js"

async function getNearWallet() {
    const config: ConnectConfig = {
        networkId: process.env.NEAR_NETWORK_ID!,
        nodeUrl: process.env.NEAR_NODE_URL!,
        walletUrl: process.env.NEAR_WALLET_URL,
        helperUrl: process.env.NEAR_HELPER_URL,
        keyStore: new keyStores.BrowserLocalStorageKeyStore(),
        headers: {},
    }

    const near = await connect(config)
    const wallet = new WalletConnection(near, "blockipedia")

    return wallet
}

async function signIn(wallet: WalletConnection) {
    await wallet.requestSignIn(
        process.env.GATSBY_CONTRACT_ADDRESS,
        process.env.GATSBY_APP_NAME
    )
}

function signOut(wallet: WalletConnection) {
    wallet.signOut()
}

export { getNearWallet, signIn, signOut }

'''
'''--- frontend/src/pages/index.module.css ---
.content {
  @apply mx-32 my-10 grid grid-cols-3 gap-12;
}
'''
'''--- frontend/src/pages/index.module.css.d.ts ---
declare const styles: {
  readonly "content": string;
};
export = styles;

'''
'''--- frontend/src/pages/read/[id].module.css ---
.readingView {
  @apply mx-44 my-10;
}

.headerSection {
  @apply font-light text-sm flex flex-row justify-between;
}

.headerInfo {
  @apply flex flex-row items-center gap-4;
}

.headerRating {
  @apply flex flex-row items-center ml-3;
}

.headerRating button:disabled {
  @apply animate-bounce;
}

.headerAction button {
  @apply text-white bg-green-700 text-lg font-semibold p-3 rounded-2xl;
}

.titleSection {
  @apply font-light text-4xl font-francois-one my-5;
}

'''
'''--- frontend/src/pages/read/[id].module.css.d.ts ---
declare const styles: {
  readonly "readingView": string;
  readonly "headerSection": string;
  readonly "headerInfo": string;
  readonly "headerRating": string;
  readonly "headerAction": string;
  readonly "titleSection": string;
};
export = styles;

'''
'''--- frontend/src/pages/write/index.module.css ---
.composer {
  @apply mx-32 mt-4;
}

.heading {
  @apply flex flex-row h-14 gap-2;
}

.heading input {
  @apply px-3 my-1 flex-1;
}

.heading div {
  @apply flex flex-row gap-2;
}

.heading div button {
  @apply rounded-xl capitalize p-3 text-white my-1;
}

.heading div button:first-child {
  @apply bg-yellow-500;
}

.heading div button:nth-child(2) {
  @apply bg-green-600;
}

.bodyComposer {
  @apply flex flex-row;
}

.editor {
  @apply flex-1;
}

.editor textarea {
  @apply w-full h-96 border-0 border-r-2 resize-none text-black p-3;
}

.preview {
  @apply flex-1 p-3;
}

'''
'''--- frontend/src/pages/write/index.module.css.d.ts ---
declare const styles: {
  readonly "composer": string;
  readonly "heading": string;
  readonly "bodyComposer": string;
  readonly "editor": string;
  readonly "preview": string;
};
export = styles;

'''
'''--- frontend/tailwind.config.js ---
module.exports = {
  content: ["./src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {
      fontFamily: {
        'francois-one': ["Francois\\ One", "sans-serif"],
        'open-sans': ["Open\\ Sans", "sans-serif"]
      }
    },
  },
  plugins: [],
}

'''
'''--- frontend/tsconfig.json ---
{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Enable incremental compilation */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./",                          /* Specify the folder for .tsbuildinfo incremental compilation files. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "esnext",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "lib": ["dom", "esnext"],                            /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    "jsx": "react",                                      /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h' */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */
    // "reactNamespace": "",                             /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */

    /* Modules */
    "module": "esnext",                                  /* Specify what module code is generated. */
    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
    "moduleResolution": "node",                          /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like `./node_modules/@types`. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "resolveJsonModule": true,                        /* Enable importing .json files */
    // "noResolve": true,                                /* Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output. */
    // "outDir": "./",                                   /* Specify an output folder for all emitted files. */
    // "removeComments": true,                           /* Disable emitting comments. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have `@internal` in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like `__extends` in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing `const enum` declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied `any` type.. */
    // "strictNullChecks": true,                         /* When type checking, take into account `null` and `undefined`. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when `this` is given the type `any`. */
    // "useUnknownInCatchVariables": true,               /* Type catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when a local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Include 'undefined' in index signature results */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  },
  "include": ["./src/**/*"]
}

'''
'''--- src/constants.rs ---
pub const ERR_ARTICLE_NOT_FOUND: &str = "Article not found";

'''
'''--- src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::UnorderedMap;
use near_sdk::{env, near_bindgen, AccountId, Promise};

mod models;
use models::{Article, ArticleMeta, Rating, RatingAction, ONE_NEAR};

mod utils;
use utils::f32_to_ynear;

mod constants;
use constants::ERR_ARTICLE_NOT_FOUND;

// the upvote/downvote ratio, below which the article is hidden away (#12)
const ARTICLE_VISIBILITY_VOTING_RATIO: f64 = 3.0 / 7.0;

// sane constraints for donation amount
const MIN_DONATION_AMOUNT: u128 = f32_to_ynear(1.0); // 1 $NEAR in yoctoNEAR
const MAX_DONATION_AMOUNT: u128 = f32_to_ynear(100.0); // 100 $NEAR in yoctoNEAR

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Wiki {
    meta: UnorderedMap<u64, ArticleMeta>,
    corpus: UnorderedMap<u64, String>,
    ratings: UnorderedMap<u64, Rating>,
}

impl Default for Wiki {
    fn default() -> Self {
        Self {
            meta: UnorderedMap::new(b"meta".to_vec()),
            corpus: UnorderedMap::new(b"corpus".to_vec()),
            ratings: UnorderedMap::new(b"ratings".to_vec()),
        }
    }
}

#[near_bindgen]
impl Wiki {
    #[private]
    pub fn reset(&mut self) {
        self.meta.clear();
        self.corpus.clear();
        self.ratings.clear();
    }

    // Get an article
    pub fn get_article(&self, article_id: u64) -> Article {
        let meta = self.meta.get(&article_id).unwrap_or(ArticleMeta {
            title: String::from("Not found"),
            author: String::from("Not found"),
            editors: vec![],
            published_date: 0,
        });

        let content = self
            .corpus
            .get(&article_id)
            .unwrap_or_else(|| String::from("Content not available"));

        let rating = self.ratings.get(&article_id).unwrap_or_default();

        Article {
            id: article_id,
            title: meta.title,
            content,
            author: meta.author,
            published_date: meta.published_date,
            upvote: rating.upvote,
            downvote: rating.downvote,
        }
    }

    fn panic_on_nonexistent_article(&self, article_id: u64) {
        let meta = self.meta.get(&article_id);
        if meta.is_none() {
            env::panic_str(ERR_ARTICLE_NOT_FOUND);
        }
    }

    // Get a list of articles
    pub fn get_articles(&self) -> Vec<(u64, ArticleMeta)> {
        #[cfg(test)]
        println!("\ninvoking `get_articles`...");

        let mut articles = self.meta.to_vec();
        articles.retain(|rec| {
            let (id, _) = rec;
            let ratings = self.ratings.get(id).unwrap_or(Rating {
                upvote: 0,
                downvote: 0,
            });
            let mut ups = ratings.upvote;
            let mut downs = ratings.downvote;

            // prevent the "division by 0" case
            if downs == 0 {
                ups += 1;
                downs += 1;
            }

            let ratio: f64 = ups as f64 / downs as f64;

            #[cfg(test)]
            println!(
                "record {:?}: up {:?}, down {:?}, ratio {:.2}, threshold {:.2}",
                id, ups, downs, ratio, ARTICLE_VISIBILITY_VOTING_RATIO
            );

            ratio.gt(&ARTICLE_VISIBILITY_VOTING_RATIO)
        });

        #[cfg(test)]
        println!("done invoking `get_articles`\n");

        articles
    }

    // Create a new article for 2 NEARs
    #[payable]
    pub fn create_article(&mut self, title: String, content: String) -> u64 {
        if env::attached_deposit() < 2 * ONE_NEAR {
            env::panic_str("Not enough fund to create article");
        }

        let author = env::signer_account_id();
        let editor = author.clone();
        let published_date = env::block_timestamp();

        env::log_str(format!("Article created at {}", published_date).as_str());

        let article_id = self.corpus.len();

        let meta = ArticleMeta {
            title,
            author: author.to_string(),
            editors: vec![editor],
            published_date,
        };

        self.meta.insert(&article_id, &meta);
        self.corpus.insert(&article_id, &content);

        article_id
    }

    // Edit an existing article for 0.5 NEARs
    #[payable]
    pub fn update_article(&mut self, article_id: u64, content: String) {
        if env::attached_deposit() < ONE_NEAR / 2 {
            env::panic_str("Not enough fund to update article");
        }

        let editor = env::signer_account_id();

        match self.corpus.get(&article_id) {
            Some(_) => {
                let mut meta = self.meta.get(&article_id).unwrap();
                meta.editors.push(editor);
                self.corpus.insert(&article_id, &content);
                self.meta.insert(&article_id, &meta);
            }
            None => env::panic_str(ERR_ARTICLE_NOT_FOUND),
        }
    }

    // Upvote or download an article
    fn rate(&mut self, article_id: u64, action: RatingAction) {
        self.panic_on_nonexistent_article(article_id);

        let mut rating = self.ratings.get(&article_id).unwrap_or(Rating {
            upvote: 0,
            downvote: 0,
        });
        match action {
            RatingAction::Upvote => rating.upvote += 1,
            RatingAction::Downvote => rating.downvote += 1,
        }

        self.ratings.insert(&article_id, &rating);
    }

    pub fn upvote(&mut self, article_id: u64) {
        self.rate(article_id, RatingAction::Upvote)
    }

    pub fn downvote(&mut self, article_id: u64) {
        self.rate(article_id, RatingAction::Downvote)
    }

    /*
     * Donate to an article
     * @TODO determine the better practice between explicitly setting `donation_amt`
     * as a contract method argument, and implicitly deriving it from `env::attached_deposit()`
     */
    #[payable]
    pub fn donate(&mut self, article_id: u64) -> Promise {
        self.panic_on_nonexistent_article(article_id);

        let donation_amt: u128 = env::attached_deposit();

        if donation_amt.lt(&MIN_DONATION_AMOUNT) {
            env::panic_str(
                format!(
                    "Donation amount cannot be less than {:?}",
                    MIN_DONATION_AMOUNT
                )
                .as_str(),
            );
        }
        if donation_amt.gt(&MAX_DONATION_AMOUNT) {
            env::panic_str(
                format!(
                    "Donation amount cannot be greater than {:?}",
                    MAX_DONATION_AMOUNT
                )
                .as_str(),
            );
        }

        let meta = self.meta.get(&article_id).unwrap();
        let author_id = meta.author;

        // @TODO define the business logic where donation amount is split among the author and
        // contributors; see discussion https://github.com/nlhkh/blockipedia-near/discussions/39
        let account_id: AccountId = author_id.parse().unwrap();
        Promise::new(account_id).transfer(donation_amt)
    }
}

#[cfg(not(target_arch = "wasm32"))]
#[cfg(test)]
mod tests {

    use super::*;
    use near_sdk::test_utils::{get_created_receipts, VMContextBuilder};
    use near_sdk::{testing_env, Gas, VMContext};

    fn get_context(is_view: bool, deposit: u128) -> VMContext {
        // see more at
        // - https://www.near-sdk.io/testing/unit-tests
        // - https://docs.rs/near-sdk/latest/near_sdk/struct.VMContext.html
        // - https://docs.rs/near-sdk/latest/near_sdk/test_utils/struct.VMContextBuilder.html
        VMContextBuilder::new()
            .current_account_id("blockipedia.localnet".parse().unwrap())
            .signer_account_id("user.localnet".parse().unwrap())
            .signer_account_pk(vec![0u8; 33].try_into().unwrap())
            .predecessor_account_id("user.localnet".parse().unwrap())
            .block_index(0)
            .block_timestamp(0)
            .account_balance(ONE_NEAR * 10)
            .account_locked_balance(ONE_NEAR * 10)
            .storage_usage(0)
            .attached_deposit(deposit)
            .prepaid_gas(Gas::from(10u64.pow(18)))
            .random_seed([0u8; 32])
            .is_view(is_view)
            .epoch_height(0)
            .build()
    }

    #[test]
    fn create_an_article() {
        let context = get_context(false, 2 * ONE_NEAR);
        testing_env!(context);

        let mut contract = Wiki::default();

        let article1_id = contract.create_article(
            String::from("Test article"),
            String::from("This is a content of a test article."),
        );
        let article2_id = contract.create_article(
            String::from("Test article 2"),
            String::from("This is a content of another test article."),
        );

        let article1 = contract.get_article(article1_id);

        // Article ids should be correct
        assert_eq!(article1_id, 0, "First article should have id 0.");
        assert_eq!(article2_id, 1, "Second article should have id 1.");

        // Article created with correct data
        assert_eq!(
            article1.title,
            String::from("Test article"),
            "Incorrect title"
        );
        assert_eq!(
            article1.content,
            String::from("This is a content of a test article."),
            "Incorrect content"
        );
        assert_eq!(article1.id, article1_id, "Incorrect article id");
        assert_eq!(
            article1.published_date,
            env::block_timestamp(),
            "Incorrect published date"
        );
        assert_eq!(article1.author, "user.localnet", "Incorrect author");
    }

    #[test]
    fn get_articles() {
        let context = get_context(false, 10 * ONE_NEAR);
        testing_env!(context);

        //----------------------------------------------------------
        // should return all articles if non of them has any rating

        let mut contract = Wiki::default();
        let mut articles = contract.get_articles();
        assert_eq!(articles.len(), 0, "Initial number of articles must be zero");

        contract.create_article(
            String::from("Test article 1"),
            String::from("This is a content of the test article 1."),
        );
        articles = contract.get_articles();
        assert_eq!(
            articles.len(),
            1,
            "Number of articles must be 1 after creating one article"
        );

        contract.create_article(
            String::from("Test article 2"),
            String::from("This is a content of the test article 2."),
        );
        contract.create_article(
            String::from("Test article 3"),
            String::from("This is a content of the test article 3."),
        );
        articles = contract.get_articles();
        assert_eq!(
            articles.len(),
            3,
            "Number of articles must be 3 after creating three articles"
        );

        dbg!(articles.len(), articles);

        //-------------------------------------------------------------------
        // should return only articles with the desired upvote/downvote ratio

        // 3 upvotes
        for _ in 0..3 {
            contract.upvote(1);
        }

        // 7 downvotes
        for _ in 0..7 {
            contract.downvote(1);
        }

        articles = contract.get_articles();
        assert_eq!(
            articles.len(),
            2,
            "Number of articles must be 2 after 1 article is downvoted too much"
        );

        contract.upvote(1);
        articles = contract.get_articles();
        assert_eq!(articles.len(), 3, "Number of articles must be 3 again after the hidden article achieves the desirable voting ratio");
    }

    #[test]
    #[should_panic(expected = "Not enough fund to create article")]
    fn create_article_with_insufficient_fund() {
        let context = get_context(false, ONE_NEAR);
        testing_env!(context);

        let mut contract = Wiki::default();

        contract.create_article(
            String::from("Test article"),
            String::from("This is a content of a test article."),
        );
    }

    #[test]
    fn update_article() {
        let context = get_context(false, ONE_NEAR * 3);
        testing_env!(context);

        let mut contract = Wiki::default();

        let id = contract.create_article(String::from("Title"), String::from("Some content"));

        contract.update_article(id, String::from("This is the updated content."));

        let article = contract.get_article(id);

        assert_eq!(
            article.content,
            String::from("This is the updated content.")
        );
    }

    #[test]
    #[should_panic(expected = "Not enough fund to update article")]
    fn update_article_with_insufficient_fund() {
        let context = get_context(false, ONE_NEAR / 2 - 1);
        testing_env!(context);

        let mut contract = Wiki::default();

        contract.update_article(0, String::from("This is the updated content."));
    }

    #[test]
    #[should_panic(expected = "Article not found")]
    fn panic_on_nonexistent_article() {
        let context = get_context(true, 0);
        testing_env!(context);
        let contract = Wiki::default();
        contract.panic_on_nonexistent_article(0);
    }

    #[test]
    #[should_panic(expected = "Article not found")]
    fn update_nonexistent_article() {
        let context = get_context(false, ONE_NEAR * 3);
        testing_env!(context);

        let mut contract = Wiki::default();

        contract.update_article(0, String::from("This is the updated content."));
    }

    #[test]
    #[should_panic(expected = "Article not found")]
    fn do_upvote_on_nonexistent_article() {
        let context = get_context(true, 0);
        testing_env!(context);
        let mut contract = Wiki::default();
        contract.upvote(0);
    }

    #[test]
    #[should_panic(expected = "Article not found")]
    fn do_downvote_on_nonexistent_article() {
        let context = get_context(true, 0);
        testing_env!(context);
        let mut contract = Wiki::default();
        contract.downvote(0);
    }

    #[test]
    fn do_upvote_on_existing_article() {
        let context = get_context(false, ONE_NEAR * 2);
        testing_env!(context);
        let mut contract = Wiki::default();
        let id = contract.create_article(String::from("Title"), String::from("Content"));
        contract.upvote(id);
        let ratings = contract.ratings.get(&id).unwrap();
        assert_eq!(ratings.upvote, 1);
    }

    #[test]
    fn do_downvote_on_existent_article() {
        let context = get_context(false, ONE_NEAR * 2);
        testing_env!(context);
        let mut contract = Wiki::default();
        let id = contract.create_article(String::from("Title"), String::from("Content"));
        contract.downvote(id);
        let ratings = contract.ratings.get(&id).unwrap();
        assert_eq!(ratings.downvote, 1);
    }

    #[test]
    #[should_panic(expected = "Article not found")]
    fn donate_to_nonexistent_article() {
        let context = get_context(false, ONE_NEAR * 2);
        testing_env!(context);
        let mut contract = Wiki::default();
        contract.donate(0);
    }

    #[test]
    #[should_panic(expected = "Donation amount cannot be less than")]
    fn donate_too_little_to_article() {
        let context = get_context(false, ONE_NEAR * 2);
        testing_env!(context);
        let mut contract = Wiki::default();
        let id = contract.create_article(String::from("Title"), String::from("Content"));

        let context = get_context(false, 999_000_000_000_000_000_000_000); // 0.999 $NEAR
        testing_env!(context);
        contract.donate(id);
    }

    #[test]
    #[should_panic(expected = "Donation amount cannot be greater than")]
    fn donate_too_much_to_article() {
        let context = get_context(false, ONE_NEAR * 2);
        testing_env!(context);
        let mut contract = Wiki::default();
        let id = contract.create_article(String::from("Title"), String::from("Content"));

        let context = get_context(false, 100_010_000_000_000_000_000_000_000); // 100.01 $NEAR
        testing_env!(context);
        contract.donate(id);
    }

    #[test]
    fn donate_successfully_to_article() {
        let context = get_context(false, ONE_NEAR * 2);
        testing_env!(context);
        let mut contract = Wiki::default();
        let id = contract.create_article(String::from("Title"), String::from("Content"));

        let context = get_context(false, ONE_NEAR * 3 / 2);
        testing_env!(context);
        contract.donate(id);

        let mut receipts = get_created_receipts();
        receipts.retain(|r| {
            dbg!(r);
            r.receiver_id == "user.localnet".parse().unwrap()
                && r.actions.eq(&[near_sdk::mock::VmAction::Transfer {
                    deposit: ONE_NEAR * 3 / 2,
                }])
        });
        assert_eq!(receipts.len(), 1);
    }
}

'''
'''--- src/models.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::serde::Serialize;
use near_sdk::AccountId;

pub static ONE_NEAR: u128 = 10u128.pow(24);

// see https://www.near-sdk.io/contract-interface/serialization-interface#overriding-serialization-protocol-default
// see https://www.near-sdk.io/best-practices#reuse-crates-from-near-sdk
#[derive(BorshSerialize, BorshDeserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Article {
    pub id: u64,
    pub title: String,
    pub content: String,
    pub author: String,
    pub published_date: u64,
    pub upvote: u8,
    pub downvote: u8,
}

// see https://www.near-sdk.io/contract-interface/serialization-interface#overriding-serialization-protocol-default
// see https://www.near-sdk.io/best-practices#reuse-crates-from-near-sdk
#[cfg_attr(test, derive(Debug))] // add Debug trait for this struct only when running tests
#[derive(BorshSerialize, BorshDeserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct ArticleMeta {
    pub title: String,
    pub author: String,
    pub editors: Vec<AccountId>,
    pub published_date: u64,
}

#[derive(BorshDeserialize, BorshSerialize, Default)]
pub struct Rating {
    pub upvote: u8,
    pub downvote: u8,
}

pub enum RatingAction {
    Upvote,
    Downvote,
}

'''
'''--- src/utils.rs ---
pub const fn f32_to_ynear(value: f32) -> u128 {
    (value as u128) * 10u128.pow(24)
}

'''