*GitHub Repository "hungng14/joining_event"*

'''--- client/.eslintrc.json ---
{
  "extends": "next/core-web-vitals"
}

'''
'''--- client/README.md ---
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.ts`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

'''
'''--- client/next.config.js ---
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
}

module.exports = nextConfig

'''
'''--- client/package.json ---
{
  "name": "client",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "near-api-js": "^1.0.0",
    "next": "12.2.5",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "devDependencies": {
    "@types/node": "18.7.15",
    "@types/react": "18.0.18",
    "@types/react-dom": "18.0.6",
    "eslint": "8.23.0",
    "eslint-config-next": "12.2.5",
    "typescript": "4.8.2"
  }
}

'''
'''--- client/pages/api/hello.ts ---
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from 'next'

type Data = {
  name: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>
) {
  res.status(200).json({ name: 'John Doe' })
}

'''
'''--- client/public/vercel.svg ---
<svg width="283" height="64" viewBox="0 0 283 64" fill="none" 
    xmlns="http://www.w3.org/2000/svg">
    <path d="M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z" fill="#000"/>
</svg>
'''
'''--- client/styles/Home.module.css ---
.container {
  padding: 0 2rem;
}

.main {
  min-height: 100vh;
  padding: 4rem 0;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.footer {
  display: flex;
  flex: 1;
  padding: 2rem 0;
  border-top: 1px solid #eaeaea;
  justify-content: center;
  align-items: center;
}

.footer a {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-grow: 1;
}

.title a {
  color: #0070f3;
  text-decoration: none;
}

.title a:hover,
.title a:focus,
.title a:active {
  text-decoration: underline;
}

.title {
  margin: 0;
  line-height: 1.15;
  font-size: 4rem;
}

.title,
.description {
  text-align: center;
}

.description {
  margin: 4rem 0;
  line-height: 1.5;
  font-size: 1.5rem;
}

.code {
  background: #fafafa;
  border-radius: 5px;
  padding: 0.75rem;
  font-size: 1.1rem;
  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
    Bitstream Vera Sans Mono, Courier New, monospace;
}

.grid {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  max-width: 800px;
}

.card {
  margin: 1rem;
  padding: 1.5rem;
  text-align: left;
  color: inherit;
  text-decoration: none;
  border: 1px solid #eaeaea;
  border-radius: 10px;
  transition: color 0.15s ease, border-color 0.15s ease;
  max-width: 300px;
}

.card:hover,
.card:focus,
.card:active {
  color: #0070f3;
  border-color: #0070f3;
}

.card h2 {
  margin: 0 0 1rem 0;
  font-size: 1.5rem;
}

.card p {
  margin: 0;
  font-size: 1.25rem;
  line-height: 1.5;
}

.logo {
  height: 1em;
  margin-left: 0.5rem;
}

@media (max-width: 600px) {
  .grid {
    width: 100%;
    flex-direction: column;
  }
}

@media (prefers-color-scheme: dark) {
  .card,
  .footer {
    border-color: #222;
  }
  .code {
    background: #111;
  }
  .logo img {
    filter: invert(1);
  }
}

'''
'''--- client/styles/globals.css ---
html,
body {
  padding: 0;
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
}

a {
  color: inherit;
  text-decoration: none;
}

* {
  box-sizing: border-box;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
  body {
    color: white;
    background: black;
  }
}

'''
'''--- client/tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

'''
'''--- contract/.cargo/config.toml ---
[target.wasm32-unknown-unknown]
rustflags = ["-C", "link-arg=-s"]

'''
'''--- contract/Cargo.toml ---
[package]
name = "joining_event"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
near-sdk = "4.0.0"

[lib]
crate-type = ["cdylib"]

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

'''
'''--- contract/build.sh ---
cargo build --target wasm32-unknown-unknown --release && mv ./target/wasm32-unknown-unknown/release/joining_event.wasm ./out/
'''
'''--- contract/create-contract-id.sh ---
near create-account joining_event.nurota.testnet --masterAccount nurota.testnet --initialBalance 30
'''
'''--- contract/deploy-testnet.sh ---
# near deploy --accountId example-contract.testnet --wasmFile out/example.wasm
near deploy --accountId joining_event.nurota.testnet --wasmFile out/joining_event.wasm
'''
'''--- contract/src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{LookupSet, UnorderedMap, UnorderedSet};
use near_sdk::json_types::{U128, U64};
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{env, near_bindgen, Balance};
use near_sdk::{AccountId, BorshStorageKey, Timestamp};

mod types;
use types::issue_ticket::*;
use types::member::*;
use types::storage_key::StorageKey;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct JoiningEvent {
    issue_tickets: UnorderedMap<TicketCode, IssueTicket>,
    members: UnorderedMap<AccountId, Member>,
    ticket_owners: UnorderedMap<AccountId, UnorderedSet<TicketCode>>,
    owner: AccountId,
    admin_accounts: LookupSet<AccountId>,
    price_ticket: Balance,
}

// using version for struct to update

impl Default for JoiningEvent {
    fn default() -> Self {
        Self {
            issue_tickets: UnorderedMap::new(StorageKey::IssueTicketKey),
            members: UnorderedMap::new(StorageKey::MemberKey),
            ticket_owners: UnorderedMap::new(StorageKey::TicketOwnerKey),
            owner: AccountId::new_unchecked(String::from("")),
            admin_accounts: LookupSet::new(StorageKey::OwnerKey),
            price_ticket: 0u128,
        }
    }
}

#[near_bindgen]
impl JoiningEvent {
    #[init]
    pub fn new() -> Self {
        let owner = env::signer_account_id();
        let mut admin_accounts = LookupSet::new(StorageKey::OwnerKey);
        admin_accounts.insert(&owner);
        JoiningEvent {
            issue_tickets: UnorderedMap::new(StorageKey::IssueTicketKey),
            members: UnorderedMap::new(StorageKey::MemberKey),
            ticket_owners: UnorderedMap::new(StorageKey::TicketOwnerKey),
            owner,
            admin_accounts,
            price_ticket: 0u128,
        }
    }

    pub fn get_owner(&self) -> AccountId {
        self.owner.clone()
    }

    pub fn set_admin_account(&mut self, account_id: AccountId) {
        let signer = env::signer_account_id();
        if self.owner != signer {
            env::panic_str("ERR_NOT_OWNER");
        }
        self.admin_accounts.insert(&account_id);
    }

    pub fn issue_ticket(&mut self, number_of_tickets: u8) {
        let min = 1u8;
        let max = 100u8;
        let last_ticket_number = self.issue_tickets.len();
        if number_of_tickets < min {
            env::panic_str("Number of tickets must be 1 or less than or equal 100");
        }
        if number_of_tickets > max {
            env::panic_str("Number of tickets must be less than or equal 100");
        }
        let mut from_number_ticket = last_ticket_number + 1;
        let to_number_ticket = last_ticket_number + number_of_tickets as u64;
        while from_number_ticket <= to_number_ticket {
            let new_ticket = IssueTicket {
                code: from_number_ticket,
                is_used: false,
                created_at: env::block_timestamp(),
            };
            self.issue_tickets.insert(&from_number_ticket, &new_ticket);
            from_number_ticket += 1;
        }
    }

    pub fn get_info_ticket(&self, ticket_code: U64) -> Option<IssueTicket> {
        let ticket = self.issue_tickets.get(&ticket_code.into());

        ticket
    }

    pub fn get_member(&self, account_id: AccountId) -> Option<Member> {
        let member = self.members.get(&account_id);

        member
    }

    pub fn register(&mut self, email: String) -> RegisterMemberResult {
        let signer = &env::signer_account_id();
        let member = self.members.get(&env::signer_account_id());
        match member {
            Some(_mb) => {
                return RegisterMemberResult {
                    success: false,
                    message: "This account has already resgistered exist".to_string(),
                }
            }
            None => {
                let new_member = Member {
                    account_id: signer.clone(),
                    email,
                    join_at: env::block_timestamp(),
                    is_active: false,
                };
                self.members.insert(signer, &new_member);
                return RegisterMemberResult {
                    success: true,
                    message: "Register successfully".to_string(),
                };
            }
        }
    }

    pub fn set_price_ticket(&mut self, price_ticket: U128) {
        let signer_id = env::signer_account_id();
        if signer_id != self.owner && !self.admin_accounts.contains(&signer_id) {
            env::panic_str("You can not call this method");
        }

        self.price_ticket = price_ticket.into();
    }

    // buy ticket
    #[payable]
    pub fn buy_ticket(&mut self, ticket_code: U64) {
        // price per ticket is
        let account_id = env::signer_account_id();
        let price_ticket = self.price_ticket;
        let price_paid = env::attached_deposit();
        if price_ticket > price_paid {
            env::panic_str("The price paid is not enough");
        }
        let ticket_code_cvt: TicketCode = ticket_code.into();
        let ticket_info = self.issue_tickets.get(&ticket_code_cvt);
        match ticket_info {
            Some(ticket) => {
                if ticket.is_used {
                    env::panic_str("This ticket is used");
                }
                let mut ticket_updated = ticket.clone();
                ticket_updated.is_used = true;
                self.issue_tickets.insert(&ticket_code_cvt, &ticket_updated);

                match &mut self.ticket_owners.get(&account_id) {
                    Some(ticket_owner) => {
                        ticket_owner.insert(&ticket_code_cvt);
                    }
                    None => {
                        let mut new_owner_tickets = UnorderedSet::new(StorageKey::TicketOwnerKey);
                        new_owner_tickets.insert(&ticket_code_cvt);
                        self.ticket_owners.insert(&account_id, &new_owner_tickets);
                    }
                }
            }
            None => env::panic_str("Ticket code is not found"),
        }
    }

    #[result_serializer(borsh)]
    pub fn get_tickets(&self, account_id: AccountId) -> UnorderedSet<TicketCode> {
        let tickets = self.ticket_owners.get(&account_id);

        match tickets {
            Some(tks) => tks,
            None => UnorderedSet::new(StorageKey::TicketOwnerKey)
        }
    }

    // create event
    // join event
    // check event
    //
}

#[cfg(all(test, not(target_arch = "wasm32")))]
mod tests {
    use super::*;
    use near_sdk::test_utils::{accounts, VMContextBuilder};
    use near_sdk::{testing_env, MockedBlockchain};

    fn get_context(is_view: bool, deposit: Balance) -> VMContextBuilder {
        let mut builder: VMContextBuilder = VMContextBuilder::new();
        builder
            .current_account_id(accounts(0))
            .signer_account_id(accounts(0))
            .predecessor_account_id(accounts(0))
            .is_view(is_view);

        if deposit > 0 {
            builder.attached_deposit(deposit);
        }
        builder
    }

    #[test]
    fn test_init_contract() {
        let context = get_context(false, 0);
        testing_env!(context.build());

        let contract = JoiningEvent::new();

        assert_eq!(contract.get_owner(), accounts(0));
    }

    #[test]
    fn test_register() {
        let context = get_context(false, 0);
        testing_env!(context.build());

        let mut contract = JoiningEvent::new();
        env::log_str("Hello");

        contract.register(String::from("myemail@gmail.com"));
        let user = contract.get_member(accounts(0)).unwrap();
        assert_eq!(user.email, String::from("myemail@gmail.com"));
    }

    #[test]
    fn test_issue_ticket() {
        let context = get_context(false, 0);
        testing_env!(context.build());

        let mut contract = JoiningEvent::new();

        contract.issue_ticket(20);

        let mock_ticket = IssueTicket {
            code: 20,
            is_used: false,
            created_at: 0,
        };
        let issue_ticket = contract.get_info_ticket(U64(20)).unwrap();
        assert_eq!(mock_ticket, issue_ticket);
    }

    #[test]
    fn set_price_ticket() {
        let context = get_context(false, 0);
        testing_env!(context.build());

        let mut contract = JoiningEvent::new();
        let price_ticket = 10000000u128;
        contract.set_price_ticket(U128(price_ticket));

        assert_eq!(contract.price_ticket, price_ticket);
    }

    #[test]
    fn user_buy_ticket() {
        let price_ticket = 10000000u128;
        let context = get_context(false, price_ticket);
        testing_env!(context.build());

        let mut contract = JoiningEvent::new();
        contract.issue_ticket(20);
        contract.set_price_ticket(U128(price_ticket));
        contract.buy_ticket(U64(1u64));

        let info_ticket = contract.get_info_ticket(U64(1)).unwrap();
        let ticket_codes = contract.ticket_owners.get(&accounts(0)).unwrap();
        assert_eq!(true, ticket_codes.contains(&info_ticket.code));

        let tickets = contract.get_tickets(accounts(0));
        println!("tickets {:?}", tickets);
    }
}

'''
'''--- contract/src/types/issue_ticket.rs ---
use crate::*;

#[allow(dead_code)]
pub type TicketCode = u64;

#[derive(BorshDeserialize, BorshSerialize, Debug, Deserialize, Serialize, PartialEq, Clone, Copy)]
#[serde(crate = "near_sdk::serde")]
pub struct IssueTicket {
    pub code: TicketCode,
    pub is_used: bool,
    pub created_at: Timestamp,
}
'''
'''--- contract/src/types/member.rs ---

use crate::*;

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct Member {
    pub account_id: AccountId,
    pub email: String,
    pub join_at: Timestamp,
    pub is_active: bool,
}

#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct RegisterMemberResult {
    pub success: bool,
    pub message: String,
}

'''
'''--- contract/src/types/mod.rs ---
pub mod storage_key;
pub mod member;
pub mod issue_ticket;
'''
'''--- contract/src/types/storage_key.rs ---

use crate::*;

#[derive(BorshSerialize, BorshDeserialize, BorshStorageKey)]
pub enum StorageKey {
    IssueTicketKey,
    MemberKey,
    TicketOwnerKey,
    OwnerKey
}
'''