*GitHub Repository "naviava/minter-app"*

'''--- .eslintrc.json ---
{
  "extends": "next/core-web-vitals"
}

'''
'''--- README.md ---
# MintSaga - Blockchain-Powered NFT Image Storage

MintSaga is an application that leverages blockchain technology to store images as Non-Fungible Tokens (NFTs) related to historical events. Users can enjoy the benefits of immutable title and description storage, ensuring the preservation of historical content on the blockchain. You can find a live demo of the app [here](https://mintsaga.vercel.app/).

Here is a short video demonstrating the app's key features:

[![IMAGE ALT TEXT HERE](https://img.youtube.com/vi/_5HMEXtB4iI/0.jpg)](https://www.youtube.com/watch?v=_5HMEXtB4iI)

Below are the key features and functionalities of MintSaga:

## Features

### 1. Authentication and Wallet Linking

- **User Sign-In:** Users are required to sign in to MintSaga to access its features.

- **Wallet Integration:** Users can link their wallets to the app, enabling them to upload NFTs to the blockchain.

- **Single OAuth Account, Multiple Wallets:** Each OAuth account can be linked to multiple wallets, but only one wallet can be active at a time. Each wallet can be linked to only one OAuth account.

- **Switchable Wallets:** Users can seamlessly switch between linked wallets by disconnecting the current active wallet and connecting to an alternate one.

### 2. Ownership and Visibility

- **Upload Restrictions:** Uploading to the blockchain is only possible when a wallet is linked.

- **Public Visibility Toggle:** Users can control the public visibility of their owned NFTs, deciding whether to showcase them publicly or keep them private.

### 3. Favorites and Community Engagement

- **Favorites Page:** Users can mark NFTs as favorites. These NFTs are displayed on the Favorites page for easy access.

- **Comment Section:** Each NFT page includes a comment section to encourage community engagement.

- **Comment Management:** Comment authors have the ability to delete their own comments, providing control over the discussions.

### 4. Social Media Integration

- **Token Sharing:** Users can easily share the token link on various social media platforms, including WhatsApp, Facebook, X (Twitter), LinkedIn, and Reddit directly from the UI.

### 5. User Experience Enhancements

- **Dark Mode:** The app offers a dark mode for a more comfortable viewing experience.

- **Theme Switching:** Users can easily switch between themes through the app's user interface, tailoring their experience to their preferences.

### 6. Progressive Web App (PWA) Enabled

- **Easy Access:** MintSaga is PWA-enabled, allowing users to visit the site once and save it on their devices. This enables access without opening a web browser, with no hassle of app updates.

  _Note: Ensure that your device supports PWA functionality for the best user experience._

## Getting Started

To get started with MintSaga, follow these steps:

1. **Sign Up/Login:** Log in using one of the available OAuth methods to access MintSaga's features.

2. **Link Wallet:** Connect your preferred wallet to upload NFTs to the blockchain.

3. **Explore and Engage:** Browse historical NFTs, mark favorites, and engage with the community through comments.

4. **Customize Visibility:** Choose whether to make your owned NFTs publicly visible or keep them private.

5. **Share Tokens:** Share your favorite tokens on social media directly from the MintSaga UI.

6. **Enhance Experience:** Customize your user experience with dark mode and theme switching options.

## Setting Up Development Environment

### Prerequisites

Before you begin, ensure that you have Docker installed on your machine. If not, [install Docker](https://docs.docker.com/get-docker/) and run the following command:

```
docker run -d --name mintsaga-container -e POSTGRES_DB=mintsaga-db -e POSTGRES_PASSWORD=Password123 -e POSTGRES_USER=dbadmin -p 6500:5432 postgres
```

Once the above steps are completed, make sure the container is powered on. If not, you can manually power it on. If you encounter any issues, refer to the [Docker documentation](https://docs.docker.com/).

### Environment Setup

**1. Clone the Repository and Navigate to the Directory**

```
git clone https://github.com/naviava/minter-app.git
cd minter-app
```

**2. Install Dependencies and Push Database Schema**

```
npm install
npx prisma db push
```

**3. Configure Environment Variables**

Rename (or make a copy and rename) the `.env.example` file to `.env`. In the `.env` file, enter actual values from your account, replacing placeholder values to enable OAuth.

_Note: Google OAuth is disabled by default, due to an issue I faced with my Google account. You can enable it by following these steps:_

- _Uncomment the commented lines in this file: `/app/api/auth/[...nextauth]/route.ts`_
- _Uncomment the commented lines in this file: `/components/modals/auth-modal.tsx`_

**4. Run the Development Environment**

You are now ready to run the development environment:

```
npm run dev
```

This will start the development server, and you can access the app at `http://localhost:3000`. Feel free to optimize and customize the development environment based on your preferences.

Thank you for checking out MintSaga! If you have any questions or feedback, please feel free to reach out to me on [X (Twitter)](https://twitter.com/oldmannav) or [LinkedIn](https://www.linkedin.com/in/navin-avadhani-aa288785/).

'''
'''--- app/_trpc/client.ts ---
import { type AppRouter } from "~/server";
import { createTRPCReact } from "@trpc/react-query";

export const trpc = createTRPCReact<AppRouter>({});

'''
'''--- app/_trpc/server-client.ts ---
import { appRouter } from "~/server";
import { httpBatchLink } from "@trpc/client";

export const serverClient = appRouter.createCaller({
  links: [
    httpBatchLink({ url: `${process.env.NEXT_PUBLIC_SITE_URL}/api/trpc` }),
  ],
});

'''
'''--- app/api/auth/[...nextauth]/route.ts ---
import NextAuth, { AuthOptions } from "next-auth";
import { PrismaAdapter } from "@auth/prisma-adapter";
// import GoogleProvider from "next-auth/providers/google";
import GithubProvider from "next-auth/providers/github";
import { db } from "~/lib/db";
import { Adapter } from "next-auth/adapters";

const authOptions: AuthOptions = {
  adapter: PrismaAdapter(db) as Adapter,
  session: { strategy: "jwt" },
  secret: process.env.NEXTAUTH_SECRET,
  providers: [
    // GoogleProvider({
    //   clientId: process.env.GOOGLE_ID ?? "",
    //   clientSecret: process.env.GOOGLE_SECRET ?? "",
    // }),
    GithubProvider({
      clientId: process.env.GITHUB_ID ?? "",
      clientSecret: process.env.GITHUB_SECRET ?? "",
    }),
  ],
};

const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };

'''
'''--- app/api/trpc/[trpc]/route.ts ---
import { appRouter } from "~/server";
import { fetchRequestHandler } from "@trpc/server/adapters/fetch";

function handler(req: Request) {
  return fetchRequestHandler({
    endpoint: "/api/trpc",
    req,
    router: appRouter,
    createContext: () => ({}),
  });
}

export { handler as GET, handler as POST };

'''
'''--- app/globals.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

html,
body,
:root {
  height: 100%;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;

    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;

    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;

    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;

    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;

    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;

    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;

    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;

    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;

    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;

    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;

    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;

    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

'''
'''--- components.json ---
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "~/components",
    "utils": "~/lib/utils"
  }
}
'''
'''--- hooks/use-is-mounted.ts ---
"use client";

import { useEffect, useState } from "react";

export function useIsMounted() {
  const [isMounted, setIsMounted] = useState(false);
  useEffect(() => setIsMounted(true), []);
  return isMounted;
}

'''
'''--- lib/config.ts ---
const APP_NAME = "MintSaga";
const APP_DEFAULT_TITLE = "MintSaga";
const APP_TITLE_TEMPLATE = "%s | MintSaga";
const APP_DESCRIPTION =
  "Preserve and share historical events through captivating images, titles, and descriptions on the blockchain.";

export const config = {
  APP_NAME,
  APP_DEFAULT_TITLE,
  APP_TITLE_TEMPLATE,
  APP_DESCRIPTION,
} as const;

'''
'''--- lib/db.ts ---
import { PrismaClient } from "@prisma/client";

declare global {
  var prisma: PrismaClient | undefined;
}

export const db = globalThis.prisma || new PrismaClient();

if (process.env.NODE_ENV !== "production") {
  globalThis.prisma = db;
}

'''
'''--- lib/utils.ts ---
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

'''
'''--- package.json ---
{
  "name": "mintsaga-app",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "postinstall": "prisma generate"
  },
  "dependencies": {
    "@auth/prisma-adapter": "^1.0.15",
    "@ducanh2912/next-pwa": "^10.2.2",
    "@hookform/resolvers": "^3.3.4",
    "@mintbase-js/react": "0.5.1-beta.3",
    "@mintbase-js/sdk": "0.5.1-beta.4",
    "@mintbase-js/storage": "0.5.1-beta.4",
    "@near-wallet-selector/modal-ui": "^8.7.1",
    "@prisma/client": "5.8.1",
    "@radix-ui/react-alert-dialog": "^1.0.5",
    "@radix-ui/react-avatar": "^1.0.4",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-dropdown-menu": "^2.0.6",
    "@radix-ui/react-label": "^2.0.2",
    "@radix-ui/react-scroll-area": "^1.0.5",
    "@radix-ui/react-separator": "^1.0.3",
    "@radix-ui/react-slot": "^1.0.2",
    "@radix-ui/react-switch": "^1.0.3",
    "@radix-ui/react-tooltip": "^1.0.7",
    "@tanstack/react-query": "^4",
    "@trpc/client": "^10.45.0",
    "@trpc/react-query": "^10.45.0",
    "@trpc/server": "^10.45.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.0",
    "date-fns": "^3.3.1",
    "lucide-react": "^0.312.0",
    "next": "14.1.0",
    "next-auth": "^4.24.5",
    "next-themes": "^0.2.1",
    "react": "^18",
    "react-dom": "^18",
    "react-dropzone": "^14.2.3",
    "react-hook-form": "^7.49.3",
    "react-icons": "^5.0.1",
    "react-loader-spinner": "^6.1.6",
    "react-share": "^5.0.3",
    "sonner": "^1.3.1",
    "tailwind-merge": "^2.2.0",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.22.4",
    "zustand": "^4.4.7"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.0.1",
    "eslint": "^8",
    "eslint-config-next": "14.1.0",
    "postcss": "^8",
    "prettier": "^3.2.4",
    "prettier-plugin-tailwindcss": "^0.5.11",
    "prisma": "^5.8.1",
    "tailwindcss": "^3.3.0",
    "typescript": "^5",
    "webpack": "^5.90.0"
  }
}

'''
'''--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

'''
'''--- public/logo.svg ---
<?xml version="1.0" ?>

<!DOCTYPE svg  PUBLIC '-//W3C//DTD SVG 1.1//EN'  'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'>

<!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<svg width="800px" height="800px" viewBox="0 0 32 32" id="_x3C_Layer_x3E_" version="1.1" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

<style type="text/css">
<![CDATA[
	.st0{fill:#E3F2FD;}
	.st1{fill:#80D8FF;}
	.st2{fill:#1AD2A4;}
	.st3{fill:#ECEFF1;}
	.st4{fill:#55FB9B;}
	.st5{fill:#BBDEFB;}
	.st6{fill:#C1AEE1;}
	.st7{fill:#FF5252;}
	.st8{fill:#FF8A80;}
	.st9{fill:#DC2626;}
	.st10{fill:#FFF176;}
	.st11{fill:#FFFFFF;}
	.st12{fill:#65C7EA;}
	.st13{fill:#CFD8DC;}
	.st14{fill:#37474F;}
	.st15{fill:#4F46E5;}
	.st16{fill:#42A5F5;}
	.st17{fill:#455A64;}
]]>
</style>

<g id="Monero_x2C__crypto">

<g id="XMLID_21_">

<g id="XMLID_23_">

<path class="st11" d="M30.5,16c0,8.01-6.49,14.5-14.5,14.5S1.5,24.01,1.5,16C1.5,7.99,7.99,1.5,16,1.5S30.5,7.99,30.5,16z"/>

</g>

<g id="XMLID_24_">

<path class="st15" d="M22.28,23.53h6.11C25.85,27.71,21.25,30.5,16,30.5s-9.85-2.79-12.39-6.97h2.97h3.14v-7.67     l4.11,4.11L16,22.14l2.17-2.17l4.11-4.11V23.53z" id="XMLID_25_"/>

</g>

<g id="XMLID_26_">

<path class="st9" d="M16,1.5c8.01,0,14.51,6.49,14.5,14.5c0,1.6-0.26,3.06-0.74,4.5h-4.34V9.59     c0-0.45-0.54-0.67-0.85-0.36L16,17.8L7.43,9.23C7.11,8.92,6.58,9.14,6.58,9.59V20.5H2.24C1.76,19.06,1.5,17.6,1.5,16     C1.49,8,7.99,1.5,16,1.5z" id="XMLID_27_"/>

</g>

</g>

<g id="XMLID_28_">

<g id="XMLID_29_">

<path class="st17" d="M16,31c-5.28,0-10.07-2.7-12.82-7.21c-0.09-0.15-0.1-0.35-0.01-0.5     c0.09-0.16,0.25-0.25,0.44-0.25h5.61v-7.17c0-0.2,0.12-0.38,0.31-0.46c0.19-0.08,0.4-0.03,0.54,0.11L16,21.43l5.93-5.93     c0.14-0.14,0.36-0.19,0.54-0.11c0.19,0.08,0.31,0.26,0.31,0.46v7.17h5.61c0.18,0,0.35,0.1,0.44,0.25     c0.09,0.16,0.09,0.35-0.01,0.5C26.07,28.3,21.28,31,16,31z M4.53,24.03C7.15,27.78,11.37,30,16,30s8.85-2.22,11.47-5.97h-5.19     c-0.28,0-0.5-0.22-0.5-0.5v-6.46l-5.43,5.43c-0.2,0.2-0.51,0.2-0.71,0l-2.17-2.17l0,0l-3.26-3.26v6.46c0,0.28-0.22,0.5-0.5,0.5     H4.53z" id="XMLID_741_"/>

</g>

<g id="XMLID_39_">

<path class="st17" d="M29.76,21h-4.34c-0.28,0-0.5-0.22-0.5-0.5V9.59l-8.57,8.56c-0.2,0.2-0.51,0.2-0.71,0     L7.08,9.58l0,10.92c0,0.28-0.22,0.5-0.5,0.5H2.24c-0.22,0-0.41-0.14-0.47-0.34C1.25,19.11,1,17.59,1,16     C0.99,12,2.55,8.24,5.38,5.4C8.22,2.56,11.99,1,16,1c4.01,0,7.78,1.56,10.62,4.4C29.45,8.23,31,12,31,16     c0,1.59-0.25,3.11-0.77,4.66C30.17,20.86,29.98,21,29.76,21z M25.92,20h3.48c0.41-1.32,0.6-2.64,0.6-4     c0-3.74-1.45-7.25-4.09-9.89C23.27,3.46,19.75,2,16,2c-3.74,0-7.26,1.46-9.91,4.11C3.45,8.76,2,12.27,2,16c0,1.36,0.2,2.68,0.6,4     h3.48V9.59c0-0.41,0.23-0.77,0.61-0.92c0.37-0.16,0.8-0.08,1.09,0.21L16,17.09l8.22-8.22c0.29-0.29,0.71-0.37,1.08-0.21     c0.38,0.16,0.62,0.52,0.62,0.93V20z" id="XMLID_738_"/>

</g>

</g>

</g>

</svg>
'''
'''--- public/manifest.json ---
{
  "name": "MintSaga",
  "short_name": "MintSaga",
  "icons": [
    {
      "src": "/icons/logo-192x192.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "any maskable"
    },
    {
      "src": "/icons/logo-384x384.png",
      "sizes": "384x384",
      "type": "image/png"
    },
    {
      "src": "/icons/logo-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ],
  "theme_color": "#FFFFFF",
  "background_color": "#FFFFFF",
  "start_url": "/explore",
  "display": "standalone",
  "orientation": "portrait"
}

'''
'''--- public/nothing-to-show.svg ---
<svg xmlns="http://www.w3.org/2000/svg" data-name="Layer 1" width="672.5315" height="738.39398" viewBox="0 0 672.5315 738.39398" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M730.73425,230.607c-46.62012-7.44-99.71-11.41-155-11.41-50.6001,0-99.3501,3.32-142.98,9.58.01026-.67005.02-1.34.04981-2.01a148.99943,148.99943,0,0,1,297.91015,1.82C730.72449,229.267,730.73425,229.937,730.73425,230.607Z" transform="translate(-263.73425 -80.80301)" fill="#6c63ff"/><g opacity="0.1"><path d="M601.28454,82.14432A149.04745,149.04745,0,0,0,432.35339,225.373c-.03027.67-.04,1.34-.0498,2.01,12.96191-1.85981,26.38476-3.4535,40.165-4.78431A149.02172,149.02172,0,0,1,601.28454,82.14432Z" transform="translate(-263.73425 -80.80301)" fill="#fff"/></g><path d="M795.91443,242.427a600.121,600.121,0,0,0-65.2002-13.84,943.3639,943.3639,0,0,0-108.73974-10.45c-15.17041-.62-30.62012-.94-46.24024-.94-12.37988,0-24.66015.2-36.77.6a973.28988,973.28988,0,0,0-106.16015,8.97,624.29224,624.29224,0,0,0-77.25,15.66c-59.21,16.37-91.81983,38.31-91.81983,61.77s32.60987,45.4,91.81983,61.77c41.64013,11.52,92.98,19.37,148.92041,22.97,23.08984,1.5,46.96,2.26,71.25976,2.26,24.37988,0,48.33008-.77,71.49024-2.27,50.90966-3.29,98.00976-10.1,137.42968-20,.21-.06.41016-.11.62012-.16,2.66016-.66,5.27979-1.35,7.87012-2.04.92969-.26,1.84961-.51,2.77-.76a.97843.97843,0,0,1,.15967-.05c.88037-.24,1.75-.49,2.62011-.73,1.74024-.5,3.46-.99,5.14991-1.5.08007-.02.1499-.04.22021-.06,1.46973-.44,2.91016-.88,4.33984-1.32,1.16993-.37,2.33008-.73,3.48-1.1q1.26051-.405,2.49024-.81c.6001-.2,1.18994-.39,1.77-.59.79-.26,1.58008-.53,2.35986-.8.33008-.11.66016-.22.98-.34.75-.25,1.48-.51,2.21-.77.79-.28,1.58008-.57,2.35987-.85.65039-.23,1.30029-.47,1.93994-.71.54-.21,1.07031-.41,1.61035-.61,1.46973-.55,2.91016-1.12006,4.33008-1.68.71-.29,1.41992-.57,2.11963-.86.68994-.28,1.39013-.57,2.07031-.86q1.67944-.70506,3.2998-1.41c.52-.24,1.0503-.47,1.56006-.68994.39014-.18.77-.35,1.16016-.53.27978-.12.56006-.25.83008-.38,1.00976-.46,2.00976-.93,2.98974-1.4q5.64039-2.7,10.52979-5.52c20.45019-11.71,31.24023-24.7,31.24023-38.2C887.73425,280.737,855.12439,258.797,795.91443,242.427Zm-.54,121.62c-41.68994,11.53-93.16992,19.38-149.26026,22.95-22.81005,1.45-46.38964,2.2-70.37988,2.2-23.91015,0-47.41015-.74-70.1499-2.19-56.18018-3.56-107.74023-11.41-149.49023-22.96-58.27-16.12-90.35987-37.37-90.35987-59.85a24.11774,24.11774,0,0,1,.74024-5.89c5.09961-20.28,36.46972-39.26,89.61963-53.96a623.80606,623.80606,0,0,1,76.66015-15.57,976.02713,976.02713,0,0,1,106.79981-9q17.88061-.585,36.18017-.58c15.41016,0,30.6499.31,45.62988.91a941.36713,941.36713,0,0,1,109.37012,10.5A598.85754,598.85754,0,0,1,795.37439,244.347c53.14014,14.7,84.5,33.67,89.60986,53.94a23.82213,23.82213,0,0,1,.75,5.91C885.73425,326.677,853.64441,347.927,795.37439,364.047Z" transform="translate(-263.73425 -80.80301)" fill="#3f3d56"/><path d="M887.16443,305.107c0,13.36005-11.01026,26-30.67041,37.29-3.26953,1.88-6.78955,3.72-10.52979,5.52-.98.47-1.98.94-2.98974,1.4-.27.13-.5503.26-.83008.38-.39014.18-.77.35-1.16016.53-.50976.22-1.04.45-1.56006.68994q-1.6201.705-3.2998,1.41c-.68018.29-1.38037.58-2.07031.86-.69971.29-1.40967.57-2.11963.86-1.41992.56-2.86035,1.13-4.33008,1.68-.54.2-1.07031.4-1.61035.61-.63965.24-1.28955.48-1.93994.71-.77979.28-1.56983.57-2.35987.85-.73.26-1.46.52-2.21.77-.31982.12006-.6499.23-.98.34-.77978.27-1.56982.54-2.35986.8-.58008.2-1.16992.39-1.77.59q-1.23046.40494-2.49024.81c-1.1499.37-2.31.73-3.48,1.1-1.42968.44-2.87011.88-4.33984,1.32-.07031.02-.14014.04-.22021.06-1.68995.51-3.40967,1-5.14991,1.5-.87011.24-1.73974.49-2.62011.73a.97843.97843,0,0,0-.15967.05c-.92041.25-1.84033.5-2.77.76-2.58008.68-5.21,1.37-7.87012,2.04-.21.05-.41016.1-.62012.16-38.35009,9.58-85.3999,16.56-137.46972,19.93-22.81006,1.47-46.59033,2.25-71.02,2.25-24.6499,0-48.63037-.79-71.62012-2.29-137.24023-8.95-239.37988-43.03-239.37988-83.71a25.07169,25.07169,0,0,1,1.11963-7.3c.06006.17.12011.33.19043.5,14.26953,37.48,115.54,67.77,246.93994,75.16,20.12988,1.13995,40.98,1.73,62.31982,1.73,21.43018,0,42.35987-.6,62.56983-1.74,131.29-7.42,232.46045-37.72,246.68017-75.17q.36036-.90006.62988-1.8A25.30451,25.30451,0,0,1,887.16443,305.107Z" transform="translate(-263.73425 -80.80301)" fill="#3f3d56"/><path d="M355.40356,294.343c-16.6427,0-34.33068-3.58057-34.33068-10.2168s17.688-10.2168,34.33068-10.2168,34.33069,3.58057,34.33069,10.2168S372.04626,294.343,355.40356,294.343Zm0-18.4336c-19.053,0-32.33068,4.33057-32.33068,8.2168s13.2777,8.2168,32.33068,8.2168,32.33069-4.33057,32.33069-8.2168S374.45654,275.90939,355.40356,275.90939Z" transform="translate(-263.73425 -80.80301)" fill="#3f3d56"/><path d="M426.40344,341.343c-16.64258,0-34.33056-3.58057-34.33056-10.2168s17.688-10.2168,34.33056-10.2168c16.64282,0,34.33081,3.58057,34.33081,10.2168S443.04626,341.343,426.40344,341.343Zm0-18.4336c-19.05286,0-32.33056,4.33057-32.33056,8.2168s13.2777,8.2168,32.33056,8.2168,32.33081-4.33057,32.33081-8.2168S445.45642,322.90939,426.40344,322.90939Z" transform="translate(-263.73425 -80.80301)" fill="#3f3d56"/><path d="M795.40344,294.343c-16.64258,0-34.33056-3.58057-34.33056-10.2168s17.688-10.2168,34.33056-10.2168c16.64282,0,34.33081,3.58057,34.33081,10.2168S812.04626,294.343,795.40344,294.343Zm0-18.4336c-19.053,0-32.33056,4.33057-32.33056,8.2168s13.27758,8.2168,32.33056,8.2168,32.33081-4.33057,32.33081-8.2168S814.45642,275.90939,795.40344,275.90939Z" transform="translate(-263.73425 -80.80301)" fill="#3f3d56"/><path d="M724.40344,341.343c-16.64258,0-34.33056-3.58057-34.33056-10.2168s17.688-10.2168,34.33056-10.2168c16.64282,0,34.33081,3.58057,34.33081,10.2168S741.04626,341.343,724.40344,341.343Zm0-18.4336c-19.053,0-32.33056,4.33057-32.33056,8.2168s13.27758,8.2168,32.33056,8.2168,32.33081-4.33057,32.33081-8.2168S743.45642,322.90939,724.40344,322.90939Z" transform="translate(-263.73425 -80.80301)" fill="#3f3d56"/><path d="M575.40344,363.343c-16.64258,0-34.33056-3.58057-34.33056-10.2168s17.688-10.2168,34.33056-10.2168c16.64282,0,34.33081,3.58057,34.33081,10.2168S592.04626,363.343,575.40344,363.343Zm0-18.4336c-19.053,0-32.33056,4.33057-32.33056,8.2168s13.27758,8.2168,32.33056,8.2168,32.33081-4.33057,32.33081-8.2168S594.45642,344.90939,575.40344,344.90939Z" transform="translate(-263.73425 -80.80301)" fill="#3f3d56"/><circle cx="336.97785" cy="450.70425" r="42.01233" fill="#2f2e41"/><rect x="565.93651" y="563.55388" width="22.86756" height="12.76328" transform="translate(-457.82019 238.05835) rotate(-26.60099)" fill="#2f2e41"/><ellipse cx="563.82041" cy="573.74843" rx="3.98853" ry="10.63605" transform="translate(-489.27546 647.82906) rotate(-56.60122)" fill="#2f2e41"/><rect x="617.67227" y="558.50174" width="12.76328" height="22.86756" transform="translate(-428.72163 791.92555) rotate(-63.39901)" fill="#2f2e41"/><ellipse cx="637.60379" cy="573.74843" rx="10.63605" ry="3.98853" transform="translate(-474.26735 364.92328) rotate(-33.39878)" fill="#2f2e41"/><circle cx="334.03663" cy="440.42779" r="14.35864" fill="#fff"/><ellipse cx="597.86951" cy="515.08401" rx="4.76624" ry="4.8" transform="translate(-452.84172 492.81919) rotate(-45)" fill="#3f3d56"/><path d="M633.854,485.80233c.63177-15.55359-12.77314-28.7276-29.9408-29.42493s-31.59692,11.346-32.22873,26.8996,11.30191,19.08746,28.46958,19.78485S633.22214,501.35592,633.854,485.80233Z" transform="translate(-263.73425 -80.80301)" fill="#6c63ff"/><ellipse cx="644.38811" cy="537.56776" rx="6.59448" ry="21.00616" transform="translate(-458.4377 468.61755) rotate(-40.64516)" fill="#2f2e41"/><ellipse cx="557.15365" cy="537.56776" rx="21.00616" ry="6.59448" transform="translate(-477.37906 529.35274) rotate(-49.35484)" fill="#2f2e41"/><path d="M612.25083,548.0638a9.57244,9.57244,0,0,1-18.83533,3.42884l-.00336-.0185c-.94177-5.20214,3.08039-7.043,8.28254-7.98474S611.30912,542.86166,612.25083,548.0638Z" transform="translate(-263.73425 -80.80301)" fill="#fff"/><path d="M529.73425,576.197a2.0001,2.0001,0,0,1-2-2v-118a2,2,0,0,1,4,0v118A2.0001,2.0001,0,0,1,529.73425,576.197Z" transform="translate(-263.73425 -80.80301)" fill="#ccc"/><path d="M499.73425,682.197a2.0001,2.0001,0,0,1-2-2v-86a2,2,0,1,1,4,0v86A2.0001,2.0001,0,0,1,499.73425,682.197Z" transform="translate(-263.73425 -80.80301)" fill="#ccc"/><path d="M576.73425,611.197a2.0001,2.0001,0,0,1-2-2v-118a2,2,0,1,1,4,0v118A2.0001,2.0001,0,0,1,576.73425,611.197Z" transform="translate(-263.73425 -80.80301)" fill="#ccc"/><path d="M547.73425,696.197a2.0001,2.0001,0,0,1-2-2v-48a2,2,0,1,1,4,0v48A2.0001,2.0001,0,0,1,547.73425,696.197Z" transform="translate(-263.73425 -80.80301)" fill="#ccc"/><path d="M588.73425,450.197a2.0001,2.0001,0,0,1-2-2v-48a2,2,0,0,1,4,0v48A2.0001,2.0001,0,0,1,588.73425,450.197Z" transform="translate(-263.73425 -80.80301)" fill="#ccc"/><path d="M488.73425,471.197a2.0001,2.0001,0,0,1-2-2v-48a2,2,0,0,1,4,0v48A2.0001,2.0001,0,0,1,488.73425,471.197Z" transform="translate(-263.73425 -80.80301)" fill="#ccc"/><path d="M662.73425,476.197a2.0001,2.0001,0,0,1-2-2v-48a2,2,0,1,1,4,0v48A2.0001,2.0001,0,0,1,662.73425,476.197Z" transform="translate(-263.73425 -80.80301)" fill="#ccc"/><path d="M658.73425,626.197a2.0001,2.0001,0,0,1-2-2v-58a2,2,0,1,1,4,0v58A2.0001,2.0001,0,0,1,658.73425,626.197Z" transform="translate(-263.73425 -80.80301)" fill="#ccc"/><path d="M618.73425,677.197a2.0001,2.0001,0,0,1-2-2v-86a2,2,0,1,1,4,0v86A2.0001,2.0001,0,0,1,618.73425,677.197Z" transform="translate(-263.73425 -80.80301)" fill="#ccc"/><path d="M626.73425,530.197a2.0001,2.0001,0,0,1-2-2v-118a2,2,0,1,1,4,0v118A2.0001,2.0001,0,0,1,626.73425,530.197Z" transform="translate(-263.73425 -80.80301)" fill="#ccc"/><ellipse cx="858.10361" cy="764.78333" rx="6.76007" ry="21.53369" transform="translate(-554.53185 648.46489) rotate(-39.93837)" fill="#2f2e41"/><circle cx="812.2965" cy="757.30544" r="43.06733" transform="translate(-426.75153 1207.63346) rotate(-71.56505)" fill="#2f2e41"/><rect x="553.7073" y="710.30199" width="13.08374" height="23.44171" fill="#2f2e41"/><rect x="527.53982" y="710.30199" width="13.08374" height="23.44171" fill="#2f2e41"/><ellipse cx="555.8879" cy="734.01629" rx="10.90314" ry="4.08868" fill="#2f2e41"/><ellipse cx="529.72042" cy="733.47115" rx="10.90314" ry="4.08868" fill="#2f2e41"/><path d="M798.77365,703.16853c3.84557-15.487,20.82057-24.60076,37.91471-20.35617s27.83428,20.24028,23.98871,35.72729-16.60394,15.537-33.69809,11.29233S794.92806,718.65557,798.77365,703.16853Z" transform="translate(-263.73425 -80.80301)" fill="#ccc"/><ellipse cx="763.7883" cy="737.32189" rx="6.76007" ry="21.53369" transform="translate(-493.44249 1030.65892) rotate(-64.62574)" fill="#2f2e41"/><circle cx="542.12366" cy="667.41487" r="14.35864" fill="#fff"/><circle cx="536.22229" cy="662.26808" r="4.78622" fill="#3f3d56"/><circle cx="542" cy="697.39398" r="6" fill="#fff"/><path d="M935.26575,819.197h-236a1,1,0,0,1,0-2h236a1,1,0,0,1,0,2Z" transform="translate(-263.73425 -80.80301)" fill="#3f3d56"/></svg>
'''
'''--- public/sw.js ---
if(!self.define){let e,s={};const t=(t,n)=>(t=new URL(t+".js",n).href,s[t]||new Promise((s=>{if("document"in self){const e=document.createElement("script");e.src=t,e.onload=s,document.head.appendChild(e)}else e=t,importScripts(t),s()})).then((()=>{let e=s[t];if(!e)throw new Error(`Module ${t} didn’t register its module`);return e})));self.define=(n,c)=>{const i=e||("document"in self?document.currentScript.src:"")||location.href;if(s[i])return;let a={};const r=e=>t(e,i),o={module:{uri:i},exports:a,require:r};s[i]=Promise.all(n.map((e=>o[e]||r(e)))).then((e=>(c(...e),a)))}}define(["./workbox-c06b064f"],(function(e){"use strict";importScripts(),self.skipWaiting(),e.clientsClaim(),e.precacheAndRoute([{url:"/_next/static/U234te332BrEWJQ_fHg7k/_buildManifest.js",revision:"d8963c6657102db1f2fa51dc81a43a6f"},{url:"/_next/static/U234te332BrEWJQ_fHg7k/_ssgManifest.js",revision:"b6652df95db52feb4daf4eca35380933"},{url:"/_next/static/chunks/0497fc7d-eb64d1a47b4dfb5f.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/0e762574-4d07f57fcabfb17c.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/150-74323c24a663f6fd.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/160-b098c13a49d9d29b.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/160b575a-caa55963e4c54217.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/171-a58381c39f11003e.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/309-d236261825e66604.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/343-b96349a4c6d0b46b.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/399-a68747a8b18032bf.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/429-5a28fc1d0c391b6c.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/468-8079808865f6175a.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/514-a884f6335e156da8.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/521-455a4c7308b94400.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/53c13509-d25b294976ca25eb.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/561-fb6e4edd229155dc.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/583-082a8b85128dfda9.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/605-86ffbd88645440dd.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/623-6ea2c0130e3ee314.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/716-63b2b35e9ccb4d5a.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/718-2ce241d69c8182bd.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/804-f41f0198def01046.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/834-086890c9e606b3dc.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/854fec37-956b5b9b00708fcb.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/8e1d74a4-bdcc97241261ad65.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/936-3939cd3050b8128c.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/94730671-580f89731bb7a240.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/9c8663ec-389f3fc344c79c2f.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/aaea2bcf-2ea28b6b1f77a321.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/app/(root)/create/page-d21f55aad2274d2e.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/app/(root)/explore/loading-5a4d084a047b974c.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/app/(root)/explore/page-987ee83dc008c7db.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/app/(root)/layout-cd9e0ad8a60fd278.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/app/(root)/my-space/favorites/loading-e1e83e3f5005f161.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/app/(root)/my-space/favorites/page-cd6c35e92b044c5a.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/app/(root)/my-space/layout-7704d865a88111bc.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/app/(root)/my-space/loading-719f89c0ce7f010f.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/app/(root)/my-space/page-2c10c408b03341e1.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/app/(root)/nft/%5BtokenId%5D/loading-c4632320b450cac7.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/app/(root)/nft/%5BtokenId%5D/page-c7d6b4e70d86f8c6.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/app/(root)/page-08e5763f0742746b.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/app/_not-found-ee31ab7418560f3f.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/app/layout-05da813b77dfe6a7.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/f25cdb8d-d1d714ccf6e576c1.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/fd9d1056-89b1d376779f8d2b.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/framework-b370f160bb96059c.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/main-6842c1742cfcdd67.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/main-app-42f96710454f2491.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/pages/_app-d21e88acd55d90f1.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/pages/_error-d6107f1aac0c574c.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/chunks/polyfills-c67a75d1b6f99dc8.js",revision:"837c0df77fd5009c9e46d446188ecfd0"},{url:"/_next/static/chunks/webpack-703bc34a0aee573b.js",revision:"U234te332BrEWJQ_fHg7k"},{url:"/_next/static/css/94ba8c48b06129f0.css",revision:"94ba8c48b06129f0"},{url:"/_next/static/css/bd7c8630fcd0eb09.css",revision:"bd7c8630fcd0eb09"},{url:"/_next/static/media/05a31a2ca4975f99-s.woff2",revision:"f1b44860c66554b91f3b1c81556f73ca"},{url:"/_next/static/media/513657b02c5c193f-s.woff2",revision:"c4eb7f37bc4206c901ab08601f21f0f2"},{url:"/_next/static/media/51ed15f9841b9f9d-s.woff2",revision:"bb9d99fb9bbc695be80777ca2c1c2bee"},{url:"/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",revision:"74c3556b9dad12fb76f84af53ba69410"},{url:"/_next/static/media/d6b16ce4a6175f26-s.woff2",revision:"dd930bafc6297347be3213f22cc53d3e"},{url:"/_next/static/media/ec159349637c90ad-s.woff2",revision:"0e89df9522084290e01e4127495fae99"},{url:"/_next/static/media/fd4db3eb5472fc27-s.woff2",revision:"71f3fcaf22131c3368d9ec28ef839831"},{url:"/icons/logo-192x192.png",revision:"6d221c43383fee755a30572652a45a58"},{url:"/icons/logo-384x384.png",revision:"dd56d41596052b911d25de68f9bfba19"},{url:"/icons/logo-512x512.png",revision:"98e083eab54453f904578a3829d1c689"},{url:"/icons/logo-800x800.png",revision:"8e9e1dfb9d8a7a20721e9c3d39250882"},{url:"/logo.svg",revision:"8d1ba900ba7c72eec8fcfe1a27b2cf30"},{url:"/manifest.json",revision:"40156e4881b5d4a9819b1769df36a4f4"},{url:"/nothing-to-show.svg",revision:"a808e67501e9059050bc05898f94dc90"}],{ignoreURLParametersMatching:[/^utm_/,/^fbclid$/]}),e.cleanupOutdatedCaches(),e.registerRoute("/",new e.NetworkFirst({cacheName:"start-url",plugins:[{cacheWillUpdate:async({response:e})=>e&&"opaqueredirect"===e.type?new Response(e.body,{status:200,statusText:"OK",headers:e.headers}):e}]}),"GET"),e.registerRoute(/^https:\/\/fonts\.(?:gstatic)\.com\/.*/i,new e.CacheFirst({cacheName:"google-fonts-webfonts",plugins:[new e.ExpirationPlugin({maxEntries:4,maxAgeSeconds:31536e3})]}),"GET"),e.registerRoute(/^https:\/\/fonts\.(?:googleapis)\.com\/.*/i,new e.StaleWhileRevalidate({cacheName:"google-fonts-stylesheets",plugins:[new e.ExpirationPlugin({maxEntries:4,maxAgeSeconds:604800})]}),"GET"),e.registerRoute(/\.(?:eot|otf|ttc|ttf|woff|woff2|font.css)$/i,new e.StaleWhileRevalidate({cacheName:"static-font-assets",plugins:[new e.ExpirationPlugin({maxEntries:4,maxAgeSeconds:604800})]}),"GET"),e.registerRoute(/\.(?:jpg|jpeg|gif|png|svg|ico|webp)$/i,new e.StaleWhileRevalidate({cacheName:"static-image-assets",plugins:[new e.ExpirationPlugin({maxEntries:64,maxAgeSeconds:2592e3})]}),"GET"),e.registerRoute(/\/_next\/static.+\.js$/i,new e.CacheFirst({cacheName:"next-static-js-assets",plugins:[new e.ExpirationPlugin({maxEntries:64,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\/_next\/image\?url=.+$/i,new e.StaleWhileRevalidate({cacheName:"next-image",plugins:[new e.ExpirationPlugin({maxEntries:64,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\.(?:mp3|wav|ogg)$/i,new e.CacheFirst({cacheName:"static-audio-assets",plugins:[new e.RangeRequestsPlugin,new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\.(?:mp4|webm)$/i,new e.CacheFirst({cacheName:"static-video-assets",plugins:[new e.RangeRequestsPlugin,new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\.(?:js)$/i,new e.StaleWhileRevalidate({cacheName:"static-js-assets",plugins:[new e.ExpirationPlugin({maxEntries:48,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\.(?:css|less)$/i,new e.StaleWhileRevalidate({cacheName:"static-style-assets",plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\/_next\/data\/.+\/.+\.json$/i,new e.StaleWhileRevalidate({cacheName:"next-data",plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\.(?:json|xml|csv)$/i,new e.NetworkFirst({cacheName:"static-data-assets",plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute((({sameOrigin:e,url:{pathname:s}})=>!(!e||s.startsWith("/api/auth/callback")||!s.startsWith("/api/"))),new e.NetworkFirst({cacheName:"apis",networkTimeoutSeconds:10,plugins:[new e.ExpirationPlugin({maxEntries:16,maxAgeSeconds:86400})]}),"GET"),e.registerRoute((({request:e,url:{pathname:s},sameOrigin:t})=>"1"===e.headers.get("RSC")&&"1"===e.headers.get("Next-Router-Prefetch")&&t&&!s.startsWith("/api/")),new e.NetworkFirst({cacheName:"pages-rsc-prefetch",plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute((({request:e,url:{pathname:s},sameOrigin:t})=>"1"===e.headers.get("RSC")&&t&&!s.startsWith("/api/")),new e.NetworkFirst({cacheName:"pages-rsc",plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute((({url:{pathname:e},sameOrigin:s})=>s&&!e.startsWith("/api/")),new e.NetworkFirst({cacheName:"pages",plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute((({sameOrigin:e})=>!e),new e.NetworkFirst({cacheName:"cross-origin",networkTimeoutSeconds:10,plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:3600})]}),"GET")}));

'''
'''--- public/workbox-c06b064f.js ---
define(["exports"],(function(t){"use strict";try{self["workbox:core:7.0.0"]&&_()}catch(t){}const e=(t,...e)=>{let s=t;return e.length>0&&(s+=` :: ${JSON.stringify(e)}`),s};class s extends Error{constructor(t,s){super(e(t,s)),this.name=t,this.details=s}}try{self["workbox:routing:7.0.0"]&&_()}catch(t){}const n=t=>t&&"object"==typeof t?t:{handle:t};class r{constructor(t,e,s="GET"){this.handler=n(e),this.match=t,this.method=s}setCatchHandler(t){this.catchHandler=n(t)}}class i extends r{constructor(t,e,s){super((({url:e})=>{const s=t.exec(e.href);if(s&&(e.origin===location.origin||0===s.index))return s.slice(1)}),e,s)}}class a{constructor(){this.t=new Map,this.i=new Map}get routes(){return this.t}addFetchListener(){self.addEventListener("fetch",(t=>{const{request:e}=t,s=this.handleRequest({request:e,event:t});s&&t.respondWith(s)}))}addCacheListener(){self.addEventListener("message",(t=>{if(t.data&&"CACHE_URLS"===t.data.type){const{payload:e}=t.data,s=Promise.all(e.urlsToCache.map((e=>{"string"==typeof e&&(e=[e]);const s=new Request(...e);return this.handleRequest({request:s,event:t})})));t.waitUntil(s),t.ports&&t.ports[0]&&s.then((()=>t.ports[0].postMessage(!0)))}}))}handleRequest({request:t,event:e}){const s=new URL(t.url,location.href);if(!s.protocol.startsWith("http"))return;const n=s.origin===location.origin,{params:r,route:i}=this.findMatchingRoute({event:e,request:t,sameOrigin:n,url:s});let a=i&&i.handler;const o=t.method;if(!a&&this.i.has(o)&&(a=this.i.get(o)),!a)return;let c;try{c=a.handle({url:s,request:t,event:e,params:r})}catch(t){c=Promise.reject(t)}const h=i&&i.catchHandler;return c instanceof Promise&&(this.o||h)&&(c=c.catch((async n=>{if(h)try{return await h.handle({url:s,request:t,event:e,params:r})}catch(t){t instanceof Error&&(n=t)}if(this.o)return this.o.handle({url:s,request:t,event:e});throw n}))),c}findMatchingRoute({url:t,sameOrigin:e,request:s,event:n}){const r=this.t.get(s.method)||[];for(const i of r){let r;const a=i.match({url:t,sameOrigin:e,request:s,event:n});if(a)return r=a,(Array.isArray(r)&&0===r.length||a.constructor===Object&&0===Object.keys(a).length||"boolean"==typeof a)&&(r=void 0),{route:i,params:r}}return{}}setDefaultHandler(t,e="GET"){this.i.set(e,n(t))}setCatchHandler(t){this.o=n(t)}registerRoute(t){this.t.has(t.method)||this.t.set(t.method,[]),this.t.get(t.method).push(t)}unregisterRoute(t){if(!this.t.has(t.method))throw new s("unregister-route-but-not-found-with-method",{method:t.method});const e=this.t.get(t.method).indexOf(t);if(!(e>-1))throw new s("unregister-route-route-not-registered");this.t.get(t.method).splice(e,1)}}let o;const c=()=>(o||(o=new a,o.addFetchListener(),o.addCacheListener()),o);function h(t,e,n){let a;if("string"==typeof t){const s=new URL(t,location.href);a=new r((({url:t})=>t.href===s.href),e,n)}else if(t instanceof RegExp)a=new i(t,e,n);else if("function"==typeof t)a=new r(t,e,n);else{if(!(t instanceof r))throw new s("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});a=t}return c().registerRoute(a),a}try{self["workbox:strategies:7.0.0"]&&_()}catch(t){}const u={cacheWillUpdate:async({response:t})=>200===t.status||0===t.status?t:null},l={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},f=t=>[l.prefix,t,l.suffix].filter((t=>t&&t.length>0)).join("-"),w=t=>t||f(l.precache),d=t=>t||f(l.runtime);function p(t,e){const s=new URL(t);for(const t of e)s.searchParams.delete(t);return s.href}class y{constructor(){this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}}const g=new Set;function m(t){return"string"==typeof t?new Request(t):t}class R{constructor(t,e){this.h={},Object.assign(this,e),this.event=e.event,this.u=t,this.l=new y,this.p=[],this.m=[...t.plugins],this.R=new Map;for(const t of this.m)this.R.set(t,{});this.event.waitUntil(this.l.promise)}async fetch(t){const{event:e}=this;let n=m(t);if("navigate"===n.mode&&e instanceof FetchEvent&&e.preloadResponse){const t=await e.preloadResponse;if(t)return t}const r=this.hasCallback("fetchDidFail")?n.clone():null;try{for(const t of this.iterateCallbacks("requestWillFetch"))n=await t({request:n.clone(),event:e})}catch(t){if(t instanceof Error)throw new s("plugin-error-request-will-fetch",{thrownErrorMessage:t.message})}const i=n.clone();try{let t;t=await fetch(n,"navigate"===n.mode?void 0:this.u.fetchOptions);for(const s of this.iterateCallbacks("fetchDidSucceed"))t=await s({event:e,request:i,response:t});return t}catch(t){throw r&&await this.runCallbacks("fetchDidFail",{error:t,event:e,originalRequest:r.clone(),request:i.clone()}),t}}async fetchAndCachePut(t){const e=await this.fetch(t),s=e.clone();return this.waitUntil(this.cachePut(t,s)),e}async cacheMatch(t){const e=m(t);let s;const{cacheName:n,matchOptions:r}=this.u,i=await this.getCacheKey(e,"read"),a=Object.assign(Object.assign({},r),{cacheName:n});s=await caches.match(i,a);for(const t of this.iterateCallbacks("cachedResponseWillBeUsed"))s=await t({cacheName:n,matchOptions:r,cachedResponse:s,request:i,event:this.event})||void 0;return s}async cachePut(t,e){const n=m(t);var r;await(r=0,new Promise((t=>setTimeout(t,r))));const i=await this.getCacheKey(n,"write");if(!e)throw new s("cache-put-with-no-response",{url:(a=i.url,new URL(String(a),location.href).href.replace(new RegExp(`^${location.origin}`),""))});var a;const o=await this.v(e);if(!o)return!1;const{cacheName:c,matchOptions:h}=this.u,u=await self.caches.open(c),l=this.hasCallback("cacheDidUpdate"),f=l?await async function(t,e,s,n){const r=p(e.url,s);if(e.url===r)return t.match(e,n);const i=Object.assign(Object.assign({},n),{ignoreSearch:!0}),a=await t.keys(e,i);for(const e of a)if(r===p(e.url,s))return t.match(e,n)}(u,i.clone(),["__WB_REVISION__"],h):null;try{await u.put(i,l?o.clone():o)}catch(t){if(t instanceof Error)throw"QuotaExceededError"===t.name&&await async function(){for(const t of g)await t()}(),t}for(const t of this.iterateCallbacks("cacheDidUpdate"))await t({cacheName:c,oldResponse:f,newResponse:o.clone(),request:i,event:this.event});return!0}async getCacheKey(t,e){const s=`${t.url} | ${e}`;if(!this.h[s]){let n=t;for(const t of this.iterateCallbacks("cacheKeyWillBeUsed"))n=m(await t({mode:e,request:n,event:this.event,params:this.params}));this.h[s]=n}return this.h[s]}hasCallback(t){for(const e of this.u.plugins)if(t in e)return!0;return!1}async runCallbacks(t,e){for(const s of this.iterateCallbacks(t))await s(e)}*iterateCallbacks(t){for(const e of this.u.plugins)if("function"==typeof e[t]){const s=this.R.get(e),n=n=>{const r=Object.assign(Object.assign({},n),{state:s});return e[t](r)};yield n}}waitUntil(t){return this.p.push(t),t}async doneWaiting(){let t;for(;t=this.p.shift();)await t}destroy(){this.l.resolve(null)}async v(t){let e=t,s=!1;for(const t of this.iterateCallbacks("cacheWillUpdate"))if(e=await t({request:this.request,response:e,event:this.event})||void 0,s=!0,!e)break;return s||e&&200!==e.status&&(e=void 0),e}}class v{constructor(t={}){this.cacheName=d(t.cacheName),this.plugins=t.plugins||[],this.fetchOptions=t.fetchOptions,this.matchOptions=t.matchOptions}handle(t){const[e]=this.handleAll(t);return e}handleAll(t){t instanceof FetchEvent&&(t={event:t,request:t.request});const e=t.event,s="string"==typeof t.request?new Request(t.request):t.request,n="params"in t?t.params:void 0,r=new R(this,{event:e,request:s,params:n}),i=this.q(r,s,e);return[i,this.D(i,r,s,e)]}async q(t,e,n){let r;await t.runCallbacks("handlerWillStart",{event:n,request:e});try{if(r=await this.U(e,t),!r||"error"===r.type)throw new s("no-response",{url:e.url})}catch(s){if(s instanceof Error)for(const i of t.iterateCallbacks("handlerDidError"))if(r=await i({error:s,event:n,request:e}),r)break;if(!r)throw s}for(const s of t.iterateCallbacks("handlerWillRespond"))r=await s({event:n,request:e,response:r});return r}async D(t,e,s,n){let r,i;try{r=await t}catch(i){}try{await e.runCallbacks("handlerDidRespond",{event:n,request:s,response:r}),await e.doneWaiting()}catch(t){t instanceof Error&&(i=t)}if(await e.runCallbacks("handlerDidComplete",{event:n,request:s,response:r,error:i}),e.destroy(),i)throw i}}function b(t){t.then((()=>{}))}function q(){return q=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var s=arguments[e];for(var n in s)Object.prototype.hasOwnProperty.call(s,n)&&(t[n]=s[n])}return t},q.apply(this,arguments)}const D=(t,e)=>e.some((e=>t instanceof e));let U,x;const L=new WeakMap,I=new WeakMap,C=new WeakMap,E=new WeakMap,N=new WeakMap;let O={get(t,e,s){if(t instanceof IDBTransaction){if("done"===e)return I.get(t);if("objectStoreNames"===e)return t.objectStoreNames||C.get(t);if("store"===e)return s.objectStoreNames[1]?void 0:s.objectStore(s.objectStoreNames[0])}return B(t[e])},set:(t,e,s)=>(t[e]=s,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function T(t){return t!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(x||(x=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(P(this),e),B(L.get(this))}:function(...e){return B(t.apply(P(this),e))}:function(e,...s){const n=t.call(P(this),e,...s);return C.set(n,e.sort?e.sort():[e]),B(n)}}function k(t){return"function"==typeof t?T(t):(t instanceof IDBTransaction&&function(t){if(I.has(t))return;const e=new Promise(((e,s)=>{const n=()=>{t.removeEventListener("complete",r),t.removeEventListener("error",i),t.removeEventListener("abort",i)},r=()=>{e(),n()},i=()=>{s(t.error||new DOMException("AbortError","AbortError")),n()};t.addEventListener("complete",r),t.addEventListener("error",i),t.addEventListener("abort",i)}));I.set(t,e)}(t),D(t,U||(U=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(t,O):t)}function B(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,s)=>{const n=()=>{t.removeEventListener("success",r),t.removeEventListener("error",i)},r=()=>{e(B(t.result)),n()},i=()=>{s(t.error),n()};t.addEventListener("success",r),t.addEventListener("error",i)}));return e.then((e=>{e instanceof IDBCursor&&L.set(e,t)})).catch((()=>{})),N.set(e,t),e}(t);if(E.has(t))return E.get(t);const e=k(t);return e!==t&&(E.set(t,e),N.set(e,t)),e}const P=t=>N.get(t);const M=["get","getKey","getAll","getAllKeys","count"],W=["put","add","delete","clear"],j=new Map;function S(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(j.get(e))return j.get(e);const s=e.replace(/FromIndex$/,""),n=e!==s,r=W.includes(s);if(!(s in(n?IDBIndex:IDBObjectStore).prototype)||!r&&!M.includes(s))return;const i=async function(t,...e){const i=this.transaction(t,r?"readwrite":"readonly");let a=i.store;return n&&(a=a.index(e.shift())),(await Promise.all([a[s](...e),r&&i.done]))[0]};return j.set(e,i),i}O=(t=>q({},t,{get:(e,s,n)=>S(e,s)||t.get(e,s,n),has:(e,s)=>!!S(e,s)||t.has(e,s)}))(O);try{self["workbox:expiration:7.0.0"]&&_()}catch(t){}const K="cache-entries",A=t=>{const e=new URL(t,location.href);return e.hash="",e.href};class F{constructor(t){this._=null,this.L=t}I(t){const e=t.createObjectStore(K,{keyPath:"id"});e.createIndex("cacheName","cacheName",{unique:!1}),e.createIndex("timestamp","timestamp",{unique:!1})}C(t){this.I(t),this.L&&function(t,{blocked:e}={}){const s=indexedDB.deleteDatabase(t);e&&s.addEventListener("blocked",(t=>e(t.oldVersion,t))),B(s).then((()=>{}))}(this.L)}async setTimestamp(t,e){const s={url:t=A(t),timestamp:e,cacheName:this.L,id:this.N(t)},n=(await this.getDb()).transaction(K,"readwrite",{durability:"relaxed"});await n.store.put(s),await n.done}async getTimestamp(t){const e=await this.getDb(),s=await e.get(K,this.N(t));return null==s?void 0:s.timestamp}async expireEntries(t,e){const s=await this.getDb();let n=await s.transaction(K).store.index("timestamp").openCursor(null,"prev");const r=[];let i=0;for(;n;){const s=n.value;s.cacheName===this.L&&(t&&s.timestamp<t||e&&i>=e?r.push(n.value):i++),n=await n.continue()}const a=[];for(const t of r)await s.delete(K,t.id),a.push(t.url);return a}N(t){return this.L+"|"+A(t)}async getDb(){return this._||(this._=await function(t,e,{blocked:s,upgrade:n,blocking:r,terminated:i}={}){const a=indexedDB.open(t,e),o=B(a);return n&&a.addEventListener("upgradeneeded",(t=>{n(B(a.result),t.oldVersion,t.newVersion,B(a.transaction),t)})),s&&a.addEventListener("blocked",(t=>s(t.oldVersion,t.newVersion,t))),o.then((t=>{i&&t.addEventListener("close",(()=>i())),r&&t.addEventListener("versionchange",(t=>r(t.oldVersion,t.newVersion,t)))})).catch((()=>{})),o}("workbox-expiration",1,{upgrade:this.C.bind(this)})),this._}}class H{constructor(t,e={}){this.O=!1,this.T=!1,this.k=e.maxEntries,this.B=e.maxAgeSeconds,this.P=e.matchOptions,this.L=t,this.M=new F(t)}async expireEntries(){if(this.O)return void(this.T=!0);this.O=!0;const t=this.B?Date.now()-1e3*this.B:0,e=await this.M.expireEntries(t,this.k),s=await self.caches.open(this.L);for(const t of e)await s.delete(t,this.P);this.O=!1,this.T&&(this.T=!1,b(this.expireEntries()))}async updateTimestamp(t){await this.M.setTimestamp(t,Date.now())}async isURLExpired(t){if(this.B){const e=await this.M.getTimestamp(t),s=Date.now()-1e3*this.B;return void 0===e||e<s}return!1}async delete(){this.T=!1,await this.M.expireEntries(1/0)}}try{self["workbox:range-requests:7.0.0"]&&_()}catch(t){}async function $(t,e){try{if(206===e.status)return e;const n=t.headers.get("range");if(!n)throw new s("no-range-header");const r=function(t){const e=t.trim().toLowerCase();if(!e.startsWith("bytes="))throw new s("unit-must-be-bytes",{normalizedRangeHeader:e});if(e.includes(","))throw new s("single-range-only",{normalizedRangeHeader:e});const n=/(\d*)-(\d*)/.exec(e);if(!n||!n[1]&&!n[2])throw new s("invalid-range-values",{normalizedRangeHeader:e});return{start:""===n[1]?void 0:Number(n[1]),end:""===n[2]?void 0:Number(n[2])}}(n),i=await e.blob(),a=function(t,e,n){const r=t.size;if(n&&n>r||e&&e<0)throw new s("range-not-satisfiable",{size:r,end:n,start:e});let i,a;return void 0!==e&&void 0!==n?(i=e,a=n+1):void 0!==e&&void 0===n?(i=e,a=r):void 0!==n&&void 0===e&&(i=r-n,a=r),{start:i,end:a}}(i,r.start,r.end),o=i.slice(a.start,a.end),c=o.size,h=new Response(o,{status:206,statusText:"Partial Content",headers:e.headers});return h.headers.set("Content-Length",String(c)),h.headers.set("Content-Range",`bytes ${a.start}-${a.end-1}/${i.size}`),h}catch(t){return new Response("",{status:416,statusText:"Range Not Satisfiable"})}}function z(t,e){const s=e();return t.waitUntil(s),s}try{self["workbox:precaching:7.0.0"]&&_()}catch(t){}function G(t){if(!t)throw new s("add-to-cache-list-unexpected-type",{entry:t});if("string"==typeof t){const e=new URL(t,location.href);return{cacheKey:e.href,url:e.href}}const{revision:e,url:n}=t;if(!n)throw new s("add-to-cache-list-unexpected-type",{entry:t});if(!e){const t=new URL(n,location.href);return{cacheKey:t.href,url:t.href}}const r=new URL(n,location.href),i=new URL(n,location.href);return r.searchParams.set("__WB_REVISION__",e),{cacheKey:r.href,url:i.href}}class V{constructor(){this.updatedURLs=[],this.notUpdatedURLs=[],this.handlerWillStart=async({request:t,state:e})=>{e&&(e.originalRequest=t)},this.cachedResponseWillBeUsed=async({event:t,state:e,cachedResponse:s})=>{if("install"===t.type&&e&&e.originalRequest&&e.originalRequest instanceof Request){const t=e.originalRequest.url;s?this.notUpdatedURLs.push(t):this.updatedURLs.push(t)}return s}}}class J{constructor({precacheController:t}){this.cacheKeyWillBeUsed=async({request:t,params:e})=>{const s=(null==e?void 0:e.cacheKey)||this.W.getCacheKeyForURL(t.url);return s?new Request(s,{headers:t.headers}):t},this.W=t}}let Q,X;async function Y(t,e){let n=null;if(t.url){n=new URL(t.url).origin}if(n!==self.location.origin)throw new s("cross-origin-copy-response",{origin:n});const r=t.clone(),i={headers:new Headers(r.headers),status:r.status,statusText:r.statusText},a=e?e(i):i,o=function(){if(void 0===Q){const t=new Response("");if("body"in t)try{new Response(t.body),Q=!0}catch(t){Q=!1}Q=!1}return Q}()?r.body:await r.blob();return new Response(o,a)}class Z extends v{constructor(t={}){t.cacheName=w(t.cacheName),super(t),this.j=!1!==t.fallbackToNetwork,this.plugins.push(Z.copyRedirectedCacheableResponsesPlugin)}async U(t,e){const s=await e.cacheMatch(t);return s||(e.event&&"install"===e.event.type?await this.S(t,e):await this.K(t,e))}async K(t,e){let n;const r=e.params||{};if(!this.j)throw new s("missing-precache-entry",{cacheName:this.cacheName,url:t.url});{const s=r.integrity,i=t.integrity,a=!i||i===s;n=await e.fetch(new Request(t,{integrity:"no-cors"!==t.mode?i||s:void 0})),s&&a&&"no-cors"!==t.mode&&(this.A(),await e.cachePut(t,n.clone()))}return n}async S(t,e){this.A();const n=await e.fetch(t);if(!await e.cachePut(t,n.clone()))throw new s("bad-precaching-response",{url:t.url,status:n.status});return n}A(){let t=null,e=0;for(const[s,n]of this.plugins.entries())n!==Z.copyRedirectedCacheableResponsesPlugin&&(n===Z.defaultPrecacheCacheabilityPlugin&&(t=s),n.cacheWillUpdate&&e++);0===e?this.plugins.push(Z.defaultPrecacheCacheabilityPlugin):e>1&&null!==t&&this.plugins.splice(t,1)}}Z.defaultPrecacheCacheabilityPlugin={cacheWillUpdate:async({response:t})=>!t||t.status>=400?null:t},Z.copyRedirectedCacheableResponsesPlugin={cacheWillUpdate:async({response:t})=>t.redirected?await Y(t):t};class tt{constructor({cacheName:t,plugins:e=[],fallbackToNetwork:s=!0}={}){this.F=new Map,this.H=new Map,this.$=new Map,this.u=new Z({cacheName:w(t),plugins:[...e,new J({precacheController:this})],fallbackToNetwork:s}),this.install=this.install.bind(this),this.activate=this.activate.bind(this)}get strategy(){return this.u}precache(t){this.addToCacheList(t),this.G||(self.addEventListener("install",this.install),self.addEventListener("activate",this.activate),this.G=!0)}addToCacheList(t){const e=[];for(const n of t){"string"==typeof n?e.push(n):n&&void 0===n.revision&&e.push(n.url);const{cacheKey:t,url:r}=G(n),i="string"!=typeof n&&n.revision?"reload":"default";if(this.F.has(r)&&this.F.get(r)!==t)throw new s("add-to-cache-list-conflicting-entries",{firstEntry:this.F.get(r),secondEntry:t});if("string"!=typeof n&&n.integrity){if(this.$.has(t)&&this.$.get(t)!==n.integrity)throw new s("add-to-cache-list-conflicting-integrities",{url:r});this.$.set(t,n.integrity)}if(this.F.set(r,t),this.H.set(r,i),e.length>0){const t=`Workbox is precaching URLs without revision info: ${e.join(", ")}\nThis is generally NOT safe. Learn more at https://bit.ly/wb-precache`;console.warn(t)}}}install(t){return z(t,(async()=>{const e=new V;this.strategy.plugins.push(e);for(const[e,s]of this.F){const n=this.$.get(s),r=this.H.get(e),i=new Request(e,{integrity:n,cache:r,credentials:"same-origin"});await Promise.all(this.strategy.handleAll({params:{cacheKey:s},request:i,event:t}))}const{updatedURLs:s,notUpdatedURLs:n}=e;return{updatedURLs:s,notUpdatedURLs:n}}))}activate(t){return z(t,(async()=>{const t=await self.caches.open(this.strategy.cacheName),e=await t.keys(),s=new Set(this.F.values()),n=[];for(const r of e)s.has(r.url)||(await t.delete(r),n.push(r.url));return{deletedURLs:n}}))}getURLsToCacheKeys(){return this.F}getCachedURLs(){return[...this.F.keys()]}getCacheKeyForURL(t){const e=new URL(t,location.href);return this.F.get(e.href)}getIntegrityForCacheKey(t){return this.$.get(t)}async matchPrecache(t){const e=t instanceof Request?t.url:t,s=this.getCacheKeyForURL(e);if(s){return(await self.caches.open(this.strategy.cacheName)).match(s)}}createHandlerBoundToURL(t){const e=this.getCacheKeyForURL(t);if(!e)throw new s("non-precached-url",{url:t});return s=>(s.request=new Request(t),s.params=Object.assign({cacheKey:e},s.params),this.strategy.handle(s))}}const et=()=>(X||(X=new tt),X);class st extends r{constructor(t,e){super((({request:s})=>{const n=t.getURLsToCacheKeys();for(const r of function*(t,{ignoreURLParametersMatching:e=[/^utm_/,/^fbclid$/],directoryIndex:s="index.html",cleanURLs:n=!0,urlManipulation:r}={}){const i=new URL(t,location.href);i.hash="",yield i.href;const a=function(t,e=[]){for(const s of[...t.searchParams.keys()])e.some((t=>t.test(s)))&&t.searchParams.delete(s);return t}(i,e);if(yield a.href,s&&a.pathname.endsWith("/")){const t=new URL(a.href);t.pathname+=s,yield t.href}if(n){const t=new URL(a.href);t.pathname+=".html",yield t.href}if(r){const t=r({url:i});for(const e of t)yield e.href}}(s.url,e)){const e=n.get(r);if(e){return{cacheKey:e,integrity:t.getIntegrityForCacheKey(e)}}}}),t.strategy)}}t.CacheFirst=class extends v{async U(t,e){let n,r=await e.cacheMatch(t);if(!r)try{r=await e.fetchAndCachePut(t)}catch(t){t instanceof Error&&(n=t)}if(!r)throw new s("no-response",{url:t.url,error:n});return r}},t.ExpirationPlugin=class{constructor(t={}){this.cachedResponseWillBeUsed=async({event:t,request:e,cacheName:s,cachedResponse:n})=>{if(!n)return null;const r=this.V(n),i=this.J(s);b(i.expireEntries());const a=i.updateTimestamp(e.url);if(t)try{t.waitUntil(a)}catch(t){}return r?n:null},this.cacheDidUpdate=async({cacheName:t,request:e})=>{const s=this.J(t);await s.updateTimestamp(e.url),await s.expireEntries()},this.X=t,this.B=t.maxAgeSeconds,this.Y=new Map,t.purgeOnQuotaError&&function(t){g.add(t)}((()=>this.deleteCacheAndMetadata()))}J(t){if(t===d())throw new s("expire-custom-caches-only");let e=this.Y.get(t);return e||(e=new H(t,this.X),this.Y.set(t,e)),e}V(t){if(!this.B)return!0;const e=this.Z(t);if(null===e)return!0;return e>=Date.now()-1e3*this.B}Z(t){if(!t.headers.has("date"))return null;const e=t.headers.get("date"),s=new Date(e).getTime();return isNaN(s)?null:s}async deleteCacheAndMetadata(){for(const[t,e]of this.Y)await self.caches.delete(t),await e.delete();this.Y=new Map}},t.NetworkFirst=class extends v{constructor(t={}){super(t),this.plugins.some((t=>"cacheWillUpdate"in t))||this.plugins.unshift(u),this.tt=t.networkTimeoutSeconds||0}async U(t,e){const n=[],r=[];let i;if(this.tt){const{id:s,promise:a}=this.et({request:t,logs:n,handler:e});i=s,r.push(a)}const a=this.st({timeoutId:i,request:t,logs:n,handler:e});r.push(a);const o=await e.waitUntil((async()=>await e.waitUntil(Promise.race(r))||await a)());if(!o)throw new s("no-response",{url:t.url});return o}et({request:t,logs:e,handler:s}){let n;return{promise:new Promise((e=>{n=setTimeout((async()=>{e(await s.cacheMatch(t))}),1e3*this.tt)})),id:n}}async st({timeoutId:t,request:e,logs:s,handler:n}){let r,i;try{i=await n.fetchAndCachePut(e)}catch(t){t instanceof Error&&(r=t)}return t&&clearTimeout(t),!r&&i||(i=await n.cacheMatch(e)),i}},t.RangeRequestsPlugin=class{constructor(){this.cachedResponseWillBeUsed=async({request:t,cachedResponse:e})=>e&&t.headers.has("range")?await $(t,e):e}},t.StaleWhileRevalidate=class extends v{constructor(t={}){super(t),this.plugins.some((t=>"cacheWillUpdate"in t))||this.plugins.unshift(u)}async U(t,e){const n=e.fetchAndCachePut(t).catch((()=>{}));e.waitUntil(n);let r,i=await e.cacheMatch(t);if(i);else try{i=await n}catch(t){t instanceof Error&&(r=t)}if(!i)throw new s("no-response",{url:t.url,error:r});return i}},t.cleanupOutdatedCaches=function(){self.addEventListener("activate",(t=>{const e=w();t.waitUntil((async(t,e="-precache-")=>{const s=(await self.caches.keys()).filter((s=>s.includes(e)&&s.includes(self.registration.scope)&&s!==t));return await Promise.all(s.map((t=>self.caches.delete(t)))),s})(e).then((t=>{})))}))},t.clientsClaim=function(){self.addEventListener("activate",(()=>self.clients.claim()))},t.precacheAndRoute=function(t,e){!function(t){et().precache(t)}(t),function(t){const e=et();h(new st(e,t))}(e)},t.registerRoute=h}));

'''
'''--- server/index.ts ---
import { router } from "./trpc";

import { nftRouter } from "./routers/nft-router";
import { userRouter } from "./routers/user-router";
import { commentRouter } from "./routers/comment-router";
import { favoritesRouter } from "./routers/favorites-router";

export const appRouter = router({
  nft: nftRouter,
  user: userRouter,
  comment: commentRouter,
  favorites: favoritesRouter,
});

export type AppRouter = typeof appRouter;

'''
'''--- server/routers/comment-router.ts ---
import { router } from "~/server/trpc";

import { addComment } from "~/utils/trpc/comment/add-comment";
import { getComments } from "~/utils/trpc/comment/get-comments";
import { deleteComment } from "~/utils/trpc/comment/delete-comment";
import { getCommentCount } from "~/utils/trpc/comment/get-comment-count";

export const commentRouter = router({
  addComment,
  getComments,
  deleteComment,
  getCommentCount,
});

'''
'''--- server/routers/favorites-router.ts ---
import { router } from "~/server/trpc";

import { isFavorite } from "~/utils/trpc/favorites/is-favorite";
import { getFavorites } from "~/utils/trpc/favorites/get-favorites";
import { toggleFavorite } from "~/utils/trpc/favorites/toggle-favorite";
import { getFavoriteCount } from "~/utils/trpc/favorites/get-favorite-count";

export const favoritesRouter = router({
  isFavorite,
  getFavorites,
  toggleFavorite,
  getFavoriteCount,
});

'''
'''--- server/routers/nft-router.ts ---
import { router } from "~/server/trpc";

import { linkNft } from "~/utils/trpc/nft/link-nft";
import { getOwnedNft } from "~/utils/trpc/nft/get-owned-nft";
import { getTokenById } from "~/utils/trpc/nft/get-token-by-id";
import { toggleVisibility } from "~/utils/trpc/nft/toggle-visibility";
import { getPublishedTokens } from "~/utils/trpc/nft/get-published-tokens";

export const nftRouter = router({
  linkNft,
  getOwnedNft,
  getTokenById,
  toggleVisibility,
  getPublishedTokens,
});

'''
'''--- server/routers/user-router.ts ---
import { router } from "~/server/trpc";

import { linkWallet } from "~/utils/trpc/user/link-wallet";
import { getAuthProfile } from "~/utils/trpc/user/get-auth-profile";

export const userRouter = router({
  getAuthProfile,
  linkWallet,
});

'''
'''--- server/trpc.ts ---
import { TRPCError, initTRPC } from "@trpc/server";
import { getServerSession } from "next-auth";
import { db } from "~/lib/db";

const t = initTRPC.create();
const middleware = t.middleware;

// Logged in users only middleware.
const isAuthenticated = middleware(async (opts) => {
  const session = await getServerSession();
  if (!session || !session.user || !session.user.email)
    throw new TRPCError({
      code: "UNAUTHORIZED",
      message: "You must be logged in to do that.",
    });
  const user = await db.user.findUnique({
    where: { email: session.user.email },
  });
  if (!user || user.disabled)
    throw new TRPCError({
      code: "UNAUTHORIZED",
      message: "User account not found.",
    });
  return opts.next({
    ctx: {
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        image: user.image,
        disabled: user.disabled,
      },
    },
  });
});

export const router = t.router;
export const publicProcedure = t.procedure;
export const privateProcedure = t.procedure.use(isAuthenticated);

'''
'''--- store/use-auth-modal.ts ---
import { create } from "zustand";

type AuthModalStore = {
  isOpen: boolean;
  onOpen: () => void;
  onClose: () => void;
};

export const useAuthModal = create<AuthModalStore>((set) => ({
  isOpen: false,
  onOpen: () => set({ isOpen: true }),
  onClose: () => set({ isOpen: false }),
}));

'''
'''--- store/use-comment-modal.ts ---
import { create } from "zustand";

type CommentModalStore = {
  id: string;
  isOpen: boolean;
  onOpen: (id: string) => void;
  onClose: () => void;
};

export const useCommentModal = create<CommentModalStore>((set) => ({
  id: "",
  isOpen: false,
  onOpen: (id: string) => set({ isOpen: true, id }),
  onClose: () => set({ isOpen: false, id: "" }),
}));

'''
'''--- store/use-confirm-modal.ts ---
import { create } from "zustand";

type CommentModalStore = {
  id: string;
  isOpen: boolean;
  onOpen: (id: string) => void;
  onClose: () => void;
};

export const useCommentModal = create<CommentModalStore>((set) => ({
  id: "",
  isOpen: false,
  onOpen: (id: string) => set({ isOpen: true, id }),
  onClose: () => set({ isOpen: false, id: "" }),
}));

'''
'''--- store/use-share-modal.ts ---
import { create } from "zustand";

type ShareModalStore = {
  href: string;
  isOpen: boolean;
  onOpen: (href: string) => void;
  onClose: () => void;
};

export const useShareModal = create<ShareModalStore>((set) => ({
  href: "",
  isOpen: false,
  onOpen: (href: string) => set({ isOpen: true, href }),
  onClose: () => set({ isOpen: false, href: "" }),
}));

'''
'''--- store/use-upload-modal.ts ---
import { create } from "zustand";

type UploadModalStore = {
  title: string;
  description: string;
  media: File | null;
  isOpen: boolean;
  isFormDisabled: boolean;

  setTitle: (title: string) => void;
  setDescription: (description: string) => void;
  setMedia: (media: File) => void;
  clearMedia: () => void;
  clearInputs: () => void;

  onClose: () => void;
  onOpen: ({
    title,
    description,
    media,
  }: {
    title: string;
    description: string;
    media: File;
  }) => void;
};

export const useUploadModal = create<UploadModalStore>((set) => ({
  title: "",
  description: "",
  media: null,
  isOpen: false,
  isFormDisabled: false,

  setTitle: (title: string) => set({ title }),
  setDescription: (description: string) => set({ description }),
  setMedia: (media: File) => set({ media }),
  clearMedia: () => set({ media: null }),
  clearInputs: () =>
    set({ title: "", description: "", media: null, isFormDisabled: false }),

  onClose: () => set({ isOpen: false }),
  onOpen: ({
    title,
    description,
    media,
  }: {
    title: string;
    description: string;
    media: File;
  }) => set({ isOpen: true, isFormDisabled: true, title, description, media }),
}));

'''
'''--- tailwind.config.ts ---
import type { Config } from "tailwindcss"

const config = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
	],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config

export default config
'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "~/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

'''
'''--- utils/trpc/comment/add-comment.ts ---
import { TRPCError } from "@trpc/server";
import { z } from "zod";
import { db } from "~/lib/db";
import { privateProcedure } from "~/server/trpc";

export const addComment = privateProcedure
  .input(
    z.object({
      id: z.string().min(1, { message: "Token ID is required." }),
      text: z.string().min(1, { message: "Comment text cannot be empty." }),
    }),
  )
  .mutation(async ({ ctx, input }) => {
    const { user } = ctx;

    const existingToken = await db.nft.findUnique({
      where: { id: input.id },
    });
    if (!existingToken) {
      throw new TRPCError({
        code: "NOT_FOUND",
        message: "Token not found!",
      });
    }

    const newComment = db.comment.create({
      data: {
        text: input.text,
        userId: user.id,
        nftId: input.id,
      },
    });
    return newComment;
  });

'''
'''--- utils/trpc/comment/delete-comment.ts ---
import { TRPCError } from "@trpc/server";
import { z } from "zod";
import { db } from "~/lib/db";
import { privateProcedure } from "~/server/trpc";

export const deleteComment = privateProcedure
  .input(z.string().min(1, { message: "Comment ID is required." }))
  .mutation(async ({ ctx, input: id }) => {
    const { user } = ctx;

    const existingComment = await db.comment.findUnique({
      where: { id },
      select: { userId: true },
    });
    if (!existingComment) {
      throw new TRPCError({
        code: "NOT_FOUND",
        message: "Comment not found.",
      });
    }
    if (existingComment.userId !== user.id) {
      throw new TRPCError({
        code: "UNAUTHORIZED",
        message: "You are not authorized to delete this comment.",
      });
    }

    await db.comment.delete({
      where: { id },
    });
    return { message: "Comment deleted." };
  });

'''
'''--- utils/trpc/comment/get-comment-count.ts ---
import { z } from "zod";
import { db } from "~/lib/db";
import { publicProcedure } from "~/server/trpc";

export const getCommentCount = publicProcedure
  .input(z.string().min(1, { message: "Token ID is required." }))
  .query(async ({ input: nftId }) => {
    const commentCount = await db.comment.count({
      where: { nftId },
    });
    return commentCount;
  });

'''
'''--- utils/trpc/comment/get-comments.ts ---
import { z } from "zod";
import { db } from "~/lib/db";
import { publicProcedure } from "~/server/trpc";

export const getComments = publicProcedure
  .input(z.string().min(1, { message: "Token ID is required." }))
  .query(async ({ input: nftId }) => {
    const comments = await db.comment.findMany({
      where: { nftId },
      include: { user: true },
    });
    return comments;
  });

'''
'''--- utils/trpc/favorites/get-favorite-count.ts ---
import { z } from "zod";

import { db } from "~/lib/db";
import { publicProcedure } from "~/server/trpc";

export const getFavoriteCount = publicProcedure
  .input(z.string().min(1, { message: "Token ID is required." }))
  .query(async ({ input: nftId }) => {
    const favoriteCount = await db.favorite.count({
      where: { nftId },
    });
    return favoriteCount;
  });

'''
'''--- utils/trpc/favorites/get-favorites.ts ---
import { db } from "~/lib/db";
import { privateProcedure } from "~/server/trpc";

export const getFavorites = privateProcedure.query(async ({ ctx }) => {
  const { user } = ctx;

  const favTokens = await db.favorite.findMany({
    where: { userId: user.id },
    include: { nft: true },
    orderBy: {
      nft: { createdAt: "desc" },
    },
  });
  return favTokens;
});

'''
'''--- utils/trpc/favorites/is-favorite.ts ---
import { z } from "zod";
import { db } from "~/lib/db";
import { privateProcedure } from "~/server/trpc";

export const isFavorite = privateProcedure
  .input(z.string().min(1, { message: "Token ID is required." }))
  .query(async ({ ctx, input: nftId }) => {
    const { user } = ctx;
    if (!user) {
      return false;
    }

    const existingFavorite = await db.favorite.findUnique({
      where: {
        userId_nftId: {
          userId: user.id,
          nftId,
        },
      },
    });
    return !!existingFavorite;
  });

'''
'''--- utils/trpc/favorites/toggle-favorite.ts ---
import { z } from "zod";
import { TRPCError } from "@trpc/server";

import { db } from "~/lib/db";
import { privateProcedure } from "~/server/trpc";

export const toggleFavorite = privateProcedure
  .input(z.string().min(1, { message: "Token ID is required." }))
  .mutation(async ({ ctx, input: nftId }) => {
    const { user } = ctx;
    if (!user) {
      throw new TRPCError({
        code: "UNAUTHORIZED",
        message: "You must be logged in to perform this action.",
      });
    }

    const existingToken = await db.nft.findUnique({
      where: { id: nftId },
    });
    if (!existingToken) {
      throw new TRPCError({
        code: "NOT_FOUND",
        message: "That token does not exist.",
      });
    }

    const existingFavorite = await db.favorite.findUnique({
      where: {
        userId_nftId: {
          userId: user.id,
          nftId: nftId,
        },
      },
    });
    if (!!existingFavorite) {
      await db.favorite.delete({
        where: {
          userId_nftId: {
            userId: user.id,
            nftId: nftId,
          },
        },
      });
      return { message: "Removed from favorites" };
    }

    await db.favorite.create({
      data: {
        userId: user.id,
        nftId: nftId,
      },
    });
    return { message: "Added to favorites" };
  });

'''
'''--- utils/trpc/nft/get-owned-nft.ts ---
import { db } from "~/lib/db";
import { privateProcedure } from "~/server/trpc";

export const getOwnedNft = privateProcedure.query(async ({ ctx }) => {
  const { user } = ctx;
  if (!user) {
    return null;
  }

  const userTokens = await db.wallet.findFirst({
    where: {
      userId: user.id,
    },
    include: {
      nft: {
        orderBy: { createdAt: "desc" },
      },
    },
  });
  if (!userTokens) return [];
  return userTokens.nft;
});

'''
'''--- utils/trpc/nft/get-published-tokens.ts ---
import { db } from "~/lib/db";
import { publicProcedure } from "~/server/trpc";

export const getPublishedTokens = publicProcedure.query(async () => {
  const publishedTokens = await db.nft.findMany({
    where: { isPublished: true },
    orderBy: { createdAt: "desc" },
  });
  return publishedTokens;
});

'''
'''--- utils/trpc/nft/get-token-by-id.ts ---
import { TRPCError } from "@trpc/server";
import { z } from "zod";
import { db } from "~/lib/db";
import { publicProcedure } from "~/server/trpc";

export const getTokenById = publicProcedure
  .input(z.string().min(1, { message: "Token ID is required." }))
  .query(async ({ input: tokenId }) => {
    const existingToken = await db.nft.findUnique({
      where: { id: tokenId },
      include: {
        wallet: {
          include: { user: true },
        },
      },
    });
    if (!existingToken) {
      throw new TRPCError({
        code: "NOT_FOUND",
        message: "Token not found.",
      });
    }
    return existingToken;
  });

'''
'''--- utils/trpc/nft/link-nft.ts ---
import { z } from "zod";
import { TRPCError } from "@trpc/server";

import { db } from "~/lib/db";
import { privateProcedure } from "~/server/trpc";

export const linkNft = privateProcedure
  .input(
    z.object({
      walletId: z.string().min(1, { message: "Wallet ID is required." }),
      tokenHref: z.string().min(1, { message: "Token ID is required." }),
    }),
  )
  .mutation(async ({ ctx, input }) => {
    const { user } = ctx;
    const { walletId, tokenHref } = input;

    if (!user) {
      throw new TRPCError({
        code: "UNAUTHORIZED",
        message: "You must be logged in to perform this action",
      });
    }

    const existingWallet = await db.wallet.findUnique({
      where: { walletId: walletId },
    });
    if (!existingWallet) {
      throw new TRPCError({
        code: "BAD_REQUEST",
        message: "This wallet is not linked to any account",
      });
    }

    const existingNft = await db.nft.findUnique({
      where: { tokenHref },
      include: {
        wallet: {
          select: { userId: true },
        },
      },
    });
    if (!!existingNft && existingNft.wallet.userId !== user.id) {
      throw new TRPCError({
        code: "BAD_REQUEST",
        message: "This NFT is already linked to another account",
      });
    }
    if (!!existingNft) {
      throw new TRPCError({
        code: "BAD_REQUEST",
        message: "This NFT is already linked to your account",
      });
    }

    const newNft = await db.nft.create({
      data: {
        tokenHref,
        walletId: walletId,
      },
    });
    return newNft;
  });

'''
'''--- utils/trpc/nft/toggle-visibility.ts ---
import { z } from "zod";
import { TRPCError } from "@trpc/server";

import { db } from "~/lib/db";
import { privateProcedure } from "~/server/trpc";

export const toggleVisibility = privateProcedure
  .input(z.string().min(1, { message: "Token ID is required." }))
  .mutation(async ({ ctx, input }) => {
    const { user } = ctx;
    if (!user) {
      throw new TRPCError({
        code: "UNAUTHORIZED",
        message: "You must be logged in to perform that action.",
      });
    }

    const existingToken = await db.nft.findUnique({
      where: {
        id: input,
      },
      include: { wallet: true },
    });
    if (!existingToken) {
      throw new TRPCError({
        code: "NOT_FOUND",
        message: "That token does not exist.",
      });
    }
    if (existingToken.wallet.userId !== user.id) {
      throw new TRPCError({
        code: "FORBIDDEN",
        message: "You do not own that token.",
      });
    }
    const updatedToken = await db.nft.update({
      where: { id: existingToken.id },
      data: { isPublished: !existingToken.isPublished },
    });

    return updatedToken.isPublished;
  });

'''
'''--- utils/trpc/user/get-auth-profile.ts ---
import { getServerSession } from "next-auth";

import { db } from "~/lib/db";
import { publicProcedure } from "~/server/trpc";

export const getAuthProfile = publicProcedure.query(async () => {
  const session = await getServerSession();
  if (!session || !session.user || !session.user.email) {
    return null;
  }

  const user = await db.user.findUnique({
    where: { email: session.user.email },
  });

  if (!user) return null;
  return user;
});

'''
'''--- utils/trpc/user/link-wallet.ts ---
import { TRPCError } from "@trpc/server";
import { z } from "zod";
import { db } from "~/lib/db";
import { privateProcedure } from "~/server/trpc";

export const linkWallet = privateProcedure
  .input(z.string().min(1, { message: "Wallet ID is required." }))
  .mutation(async ({ ctx, input }) => {
    const { user } = ctx;
    if (!user) {
      throw new TRPCError({
        code: "UNAUTHORIZED",
        message: "You must be logged in to link a wallet",
      });
    }

    const existingWallet = await db.wallet.findUnique({
      where: {
        walletId: input,
      },
    });
    if (!!existingWallet && existingWallet.userId !== user.id) {
      throw new TRPCError({
        code: "BAD_REQUEST",
        message: "This wallet is already linked to another account",
      });
    }
    if (!!existingWallet && existingWallet.userId === user.id) {
      return { isNew: false, wallet: existingWallet };
    }

    const newWallet = await db.wallet.create({
      data: {
        walletId: input,
        userId: user.id,
      },
    });
    return { isNew: true, wallet: newWallet };
  });

'''
'''--- vercel.json ---
{
  "git": {
    "deploymentEnabled": {
      "dev": false
    }
  }
}

'''