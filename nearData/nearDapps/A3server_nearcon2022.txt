*GitHub Repository "A3server/nearcon2022"*

'''--- frontend/public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Lennon Wall"
    />
    <meta name="twitter:card" content="summary_large_image" />
    <meta property="og:image" content="https://wayback.berryclub.io/img/"/>
    <meta property="og:url" content="https://berryclub.io/" />
    <meta property="og:title" content="Lennon Wall" />
    <meta property="og:description" content="Lennon Wall - Hang Around & Place Pixels" />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/favicon.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Lennon Wall 🧱</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- frontend/public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- frontend/src/App.js ---
import "./App.scss";
import "./gh-fork-ribbon.css";
import React from "react";
import BN from "bn.js";
import * as nearAPI from "near-api-js";
import { AlphaPicker, HuePicker, GithubPicker } from "react-color";
import { Weapons } from "./Weapons";
import Timer from "react-compound-timer";
import { intToColor, intToColorWithAlpha, rgbaToInt, generateGamma, imgColorToInt, int2hsv, transparentColor, decodeLine, BoardHeight, BoardWidth, NumLinesPerFetch, ExpectedLineLength, CellHeight, CellWidth, MaxNumColors, BatchOfPixels, BatchTimeout, RefreshBoardTimeout, MaxWorkTime } from "./util/utils";
import MainLogo from "./assets/MainLogo";
import Popup from 'reactjs-popup';
import UserIcon from "./assets/UserIcon";
import LogoutIcon from "./assets/LogoutIcon";
import 'reactjs-popup/dist/index.css';
import santana from "./assets/santana.png";
import edu from "./assets/edu.png";
import lucas from "./assets/lucas.png";
import gouveia from "./assets/gouveia.png";
import pvaz from "./assets/pvaz.png";
import polvo from "./assets/polvo.svg";
import built from "./assets/built.svg";
import insta from "./assets/insta.svg";
import telegram from "./assets/telegram.svg";
import discord from "./assets/discord.svg";
import git from "./assets/git.svg";

const PixelPrice = new BN("10000000000000000000000");
const IsMainnet = window.location.hostname === "nearplayground.art";
const TestNearConfig = {
  networkId: "testnet",
  nodeUrl: "https://rpc.testnet.near.org",
  contractName: "dev-1663075021424-18509228924130",
  walletUrl: "https://wallet.testnet.near.org",
};
const MainNearConfig = {
  networkId: "mainnet",
  nodeUrl: "https://rpc.mainnet.near.org",
  contractName: "lennonwall.near",
  walletUrl: "https://wallet.near.org",
};
const NearConfig = IsMainnet ? MainNearConfig : TestNearConfig;

const Berry = {
  Avocado: "Avocado",
  Banana: "Banana",
};

const WeaponsCheat = "idkfa";

class App extends React.Component {
  constructor(props) {
    super(props);

    const colors = [
      "#000000",
      "#666666",
      "#aaaaaa",
      "#FFFFFF",
      "#F44E3B",
      "#D33115",
      "#9F0500",
      "#FE9200",
      "#E27300",
      "#C45100",
      "#FCDC00",
      "#FCC400",
      "#FB9E00",
      "#DBDF00",
      "#B0BC00",
      "#808900",
      "#A4DD00",
      "#68BC00",
      "#194D33",
      "#68CCCA",
      "#16A5A5",
      "#0C797D",
      "#73D8FF",
      "#009CE0",
      "#0062B1",
      "#AEA1FF",
      "#7B64FF",
      "#653294",
      "#FDA1FF",
      "#FA28FF",
      "#AB149E",
    ].map((c) => c.toLowerCase());
    // const currentColor = parseInt(colors[Math.floor(Math.random() * colors.length)].substring(1), 16);
    const currentColor = parseInt(colors[0].substring(1), 16);
    const defaultAlpha = 0.25;

    const timeMs = new Date().getTime();
    const eventEndEstimated =
      timeMs -
      ((timeMs - new Date("2022-09-14 21:00:00 UTC")));
    this.state = {
      connected: false,
      signedIn: false,
      accountId: null,
      pendingPixels: 0,
      boardLoaded: false,
      selectedCell: null,
      alpha: defaultAlpha,
      currentColor,
      pickerColor: intToColorWithAlpha(currentColor, defaultAlpha),
      colors,
      gammaColors: generateGamma(0),
      pickingColor: false,
      owners: [],
      accounts: {},
      highlightedAccountIndex: -1,
      selectedOwnerIndex: false,
      farmingBanana: false,
      weaponsOn: false,
      weaponsCodePosition: 0,
      eventEndTime: new Date(eventEndEstimated),
      watchMode: false,

    };

    this._buttonDown = false;
    this._oldCounts = {};
    this._numFailedTxs = 0;
    this._balanceRefreshTimer = null;
    this.canvasRef = React.createRef();
    this._context = false;
    this._lines = false;
    this._queue = [];
    this._pendingPixels = [];
    this._refreshBoardTimer = null;
    this._sendQueueTimer = null;
    this._stopRefreshTime = new Date().getTime() + MaxWorkTime;
    this._accounts = {};

    this._initNear().then(() => {
      this.setState(
        {
          connected: true,
          signedIn: !!this._accountId,
          accountId: this._accountId,
          ircAccountId: this._accountId.replace(".", "_"),
          eventEndTime: this.eventEndTime,
        },
        () => {
          // console.log(this.state.eventEndTime);
          if (window.location.hash.indexOf("watch") >= 0) {
            setTimeout(() => this.enableWatchMode(), 500);
          }
        }
      );
    });
  }

  componentDidMount() {
    // console.log(this.state.endtime)
    const canvas = this.canvasRef.current;
    this._context = canvas.getContext("2d");

    const click = async () => {
      if (this.state.watchMode) {
        return;
      }
      if (this.state.rendering) {
        await this.drawImg(this.state.selectedCell);
      } else if (this.state.pickingColor) {
        this.pickColor(this.state.selectedCell);
      } else {
        this.saveColor();
        await this.drawPixel(this.state.selectedCell);
      }
    };

    const mouseMove = (e) => {
      let x, y;
      if ("touches" in e) {
        if (e.touches.length > 1) {
          return true;
        } else {
          const rect = e.target.getBoundingClientRect();
          x = e.targetTouches[0].clientX - rect.left;
          y = e.targetTouches[0].clientY - rect.top;
        }
      } else {
        x = e.offsetX;
        y = e.offsetY;
      }
      x = Math.trunc((x / e.target.clientWidth) * BoardWidth);
      y = Math.trunc((y / e.target.clientHeight) * BoardWidth);
      let cell = null;
      if (x >= 0 && x < BoardWidth && y >= 0 && y < BoardHeight) {
        cell = { x, y };
      }
      if (JSON.stringify(cell) !== JSON.stringify(this.state.selectedCell)) {
        this.setState(
          {
            selectedCell: cell,
            selectedOwnerIndex:
              this._lines &&
              cell &&
              this._lines[cell.y] &&
              this._lines[cell.y][cell.x].ownerIndex,
          },
          async () => {
            this.renderCanvas();
            if (this.state.selectedCell !== null && this._buttonDown) {
              await click();
            }
          }
        );
      }
      e.preventDefault();
      return false;
    };

    canvas.addEventListener("mousemove", mouseMove);
    canvas.addEventListener("touchmove", mouseMove);

    const mouseDown = async (e) => {
      this._buttonDown = true;
      if (this.state.selectedCell !== null) {
        await click();
      }
    };

    canvas.addEventListener("mousedown", mouseDown);
    canvas.addEventListener("touchstart", mouseDown);

    const unselectCell = () => {
      this.setState(
        {
          selectedCell: null,
        },
        () => this.renderCanvas()
      );
    };

    const mouseUp = async (e) => {
      this._buttonDown = false;
      if ("touches" in e) {
        unselectCell();
      }
    };

    canvas.addEventListener("mouseup", mouseUp);
    canvas.addEventListener("touchend", mouseUp);

    canvas.addEventListener("mouseleave", unselectCell);

    canvas.addEventListener("mouseenter", (e) => {
      if (this._buttonDown) {
        if (!("touches" in e) && !(e.buttons & 1)) {
          this._buttonDown = false;
        }
      }
    });

    document.addEventListener("keydown", (e) => {
      e.altKey && this.enablePickColor();
    });

    document.addEventListener("keyup", (e) => {
      if (this.state.weaponsCodePosition < WeaponsCheat.length) {
        if (
          e.key.toLowerCase() === WeaponsCheat[this.state.weaponsCodePosition]
        ) {
          this.setState({
            weaponsCodePosition: this.state.weaponsCodePosition + 1,
            weaponsOn:
              this.state.weaponsCodePosition + 1 === WeaponsCheat.length,
          });
        } else {
          this.setState({
            weaponsCodePosition: 0,
          });
        }
      }
      !e.altKey && this.disablePickColor();
    });
  }

  enablePickColor() {
    this.setState(
      {
        pickingColor: true,
      },
      () => {
        this.renderCanvas();
      }
    );
  }

  disablePickColor() {
    this.setState(
      {
        pickingColor: false,
      },
      () => {
        this.renderCanvas();
      }
    );
  }

  pickColor(cell) {
    if (!this.state.signedIn || !this._lines || !this._lines[cell.y]) {
      return;
    }
    const color = this._lines[cell.y][cell.x].color;

    this.setState(
      {
        currentColor: color,
        alpha: 1,
        pickerColor: intToColorWithAlpha(color, 1),
        gammaColors: generateGamma(int2hsv(color)[0]),
        pickingColor: false,
      },
      () => {
        this.renderCanvas();
      }
    );
  }

  async refreshAllowance() {
    alert(
      "You're out of access key allowance. Need sign in again to refresh it"
    );
    await this.logOut();
    await this.requestSignIn();
  }

  async _sendQueue() {
    const pixels = this._queue.slice(0, BatchOfPixels);
    this._queue = this._queue.slice(BatchOfPixels);
    this._pendingPixels = pixels;

    try {
      await this._contract.draw(
        {
          pixels,
        },
        new BN("75000000000000")
      );
      this._numFailedTxs = 0;
    } catch (error) {
      const msg = error.toString();
      if (msg.indexOf("does not have enough balance") !== -1) {
        await this.refreshAllowance();
        return;
      }
      console.log("Failed to send a transaction", error);
      this._numFailedTxs += 1;
      if (this._numFailedTxs < 3) {
        this._queue = this._queue.concat(this._pendingPixels);
        this._pendingPixels = [];
      } else {
        this._pendingPixels = [];
        this._queue = [];
      }
    }
    try {
      await Promise.all([this.refreshBoard(true), this.refreshAccountStats()]);
    } catch (e) {
      // ignore
    }
    this._pendingPixels.forEach((p) => {
      if (this._pending[p.y][p.x] === p.color) {
        this._pending[p.y][p.x] = -1;
      }
    });
    this._pendingPixels = [];
  }

  async _pingQueue(ready) {
    if (this._sendQueueTimer) {
      clearTimeout(this._sendQueueTimer);
      this._sendQueueTimer = null;
    }

    if (
      this._pendingPixels.length === 0 &&
      (this._queue.length >= BatchOfPixels || ready)
    ) {
      await this._sendQueue();
    }
    if (this._queue.length > 0) {
      this._sendQueueTimer = setTimeout(async () => {
        await this._pingQueue(true);
      }, BatchTimeout);
    }
  }

  async drawImg(cell) {
    if (!this.state.signedIn || !this._lines || !this._lines[cell.y]) {
      return;
    }

    const balance = this.state.account ? this.state.account.avocadoBalance : 0;
    if (
      !this._isEventOver() &&
      balance - this.state.pendingPixels < this.state.avocadoNeeded
    ) {
      return;
    }

    const img = this.imageData;
    const w = img.width;
    const h = img.height;
    const x = cell.x - Math.trunc(w / 2);
    const y = cell.y - Math.trunc(h / 2);
    const d = new Uint32Array(this.imageData.data.buffer);
    for (let i = 0; i < h; ++i) {
      for (let j = 0; j < w; ++j) {
        const imgColor = d[i * w + j];
        if (
          imgColor &&
          y + i >= 0 &&
          y + i < BoardHeight &&
          x + j >= 0 &&
          x + j < BoardWidth
        ) {
          const bgColor = this._lines[y + i]
            ? this._lines[y + i][x + j].color
            : 0;
          const color = imgColorToInt(imgColor, bgColor);
          if (color !== bgColor) {
            this._queue.push({
              x: x + j,
              y: y + i,
              color,
            });
          }
        }
      }
    }
    this.setState({
      rendering: false,
    });

    this._stopRefreshTime = new Date().getTime() + MaxWorkTime;
    await this._pingQueue(false);
  }

  async drawPixel(cell) {
    if (!this.state.signedIn || !this._lines || !this._lines[cell.y]) {
      return;
    }
    const balance = this.state.account ? this.state.account.avocadoBalance : 0;
    // console.log(balance - this.state.pendingPixels < 1)
    if (!this._isEventOver() && balance - this.state.pendingPixels < 1) {
      return;
    }

    const bgColor = this._lines[cell.y] ? this._lines[cell.y][cell.x].color : 0;
    const cb = this.state.currentColor & 255;
    const cg = (this.state.currentColor >> 8) & 255;
    const cr = (this.state.currentColor >> 16) & 255;
    const color = rgbaToInt(cr, cg, cb, this.state.alpha, bgColor);

    if (
      this._pending[cell.y][cell.x] !== color &&
      this._lines[cell.y][cell.x].color !== color
    ) {
      this._pending[cell.y][cell.x] = color;
    } else {
      return;
    }

    this._queue.push({
      x: cell.x,
      y: cell.y,
      color,
    });

    this._stopRefreshTime = new Date().getTime() + MaxWorkTime;
    await this._pingQueue(false);
  }

  parseAccount(account, accountId) {
    if (!account) {
      account = {
        accountId,
        accountIndex: -1,
        avocadoBalance: 25.0,
        //bananaBalance: 0.0,
        numPixels: 0,
        farmingPreference: Berry.Avocado,
      };
    } else {
      account = {
        accountId: account.account_id,
        accountIndex: account.account_index,
        avocadoBalance: parseFloat(account.avocado_balance) / this._pixelCost,
        //bananaBalance: parseFloat(account.banana_balance) / this._pixelCost,
        numPixels: account.num_pixels,
        //farmingPreference: account.farming_preference,
      };
    }
    account.startTime = new Date().getTime();
    account.avocadoPixels =
      account.farmingPreference === Berry.Avocado ? account.numPixels + 1 : 0;
    /* account.bananaPixels =
      account.farmingPreference === Berry.Banana ? account.numPixels : 0; */
    account.avocadoRewardPerMs = account.avocadoPixels / (24 * 60 * 60 * 1000);
    //account.bananaRewardPerMs = account.bananaPixels / (24 * 60 * 60 * 1000);
    return account;
  }

  async getAccount(accountId) {
    return this.parseAccount(
      await this._contract.get_account({ account_id: accountId }),
      accountId
    );
  }

  async getAccountByIndex(accountIndex) {
    return this.parseAccount(
      await this._contract.get_account_by_index({
        account_index: accountIndex,
      }),
      "unknown"
    );
  }

  async refreshAccountStats() {
    let account = await this.getAccount(this._accountId);
    if (this._balanceRefreshTimer) {
      clearInterval(this._balanceRefreshTimer);
      this._balanceRefreshTimer = null;
    }

    this.setState({
      pendingPixels: this._pendingPixels.length + this._queue.length,
      // farmingBanana: account.farmingPreference === Berry.Banana,
      account,
    });

    this._balanceRefreshTimer = setInterval(() => {
      const t = new Date().getTime() - account.startTime;
      this.setState({
        account: Object.assign({}, account, {
          avocadoBalance:
            account.avocadoBalance + t * account.avocadoRewardPerMs,
          //bananaBalance: account.bananaBalance + t * account.bananaRewardPerMs,
        }),
        pendingPixels: this._pendingPixels.length + this._queue.length,
      });
    }, 100);
  }

  async _initNear() {
    const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();
    const near = await nearAPI.connect(
      Object.assign({ deps: { keyStore } }, NearConfig)
    );
    this._keyStore = keyStore;
    this._near = near;

    this._walletConnection = new nearAPI.WalletConnection(
      near,
      NearConfig.contractName
    );
    this._accountId = this._walletConnection.getAccountId();

    this._account = this._walletConnection.account();
    this._contract = new nearAPI.Contract(
      this._account,
      NearConfig.contractName,
      {
        viewMethods: [
          "get_account",
          "get_account_by_index",
          "get_lines",
          "get_line_versions",
          "get_pixel_cost",
          "get_account_balance",
          "get_account_num_pixels",
          "get_account_id_by_index",
          "get_event_finish",
        ],
        changeMethods: ["draw", "buy_tokens", "select_farming_preference"],
      }
    );
    this._pixelCost = parseFloat(await this._contract.get_pixel_cost());
    const endtime = await this._contract.get_event_finish();
    this.eventEndTime = new Date(endtime / 1000000);
    if (this._accountId) {
      await this.refreshAccountStats();
    }
    this._lineVersions = Array(BoardHeight).fill(-1);
    this._lines = Array(BoardHeight).fill(false);
    this._pending = Array(BoardHeight).fill(false);
    this._pending.forEach((v, i, a) => (a[i] = Array(BoardWidth).fill(-1)));
    await this.refreshBoard(true);
  }

  async refreshBoard(forced) {
    if (this._refreshBoardTimer) {
      clearTimeout(this._refreshBoardTimer);
      this._refreshBoardTimer = null;
    }
    const t = new Date().getTime();
    if (this.state.watchMode || t < this._stopRefreshTime) {
      this._refreshBoardTimer = setTimeout(async () => {
        await this.refreshBoard(false);
      }, RefreshBoardTimeout);
    }

    if (!forced && document.hidden) {
      return;
    }

    let lineVersions = await this._contract.get_line_versions();
    let needLines = [];
    for (let i = 0; i < BoardHeight; ++i) {
      if (lineVersions[i] !== this._lineVersions[i]) {
        needLines.push(i);
      }
    }
    let requestLines = [];
    for (let i = 0; i < needLines.length; i += NumLinesPerFetch) {
      requestLines.push(needLines.slice(i, i + NumLinesPerFetch));
    }

    let results = await Promise.all(
      requestLines.map((lines) => this._contract.get_lines({ lines }))
    );
    results = results.flat();
    requestLines = requestLines.flat();
    // console.log("reqlines.",results)
    for (let i = 0; i < requestLines.length; ++i) {
      let lineIndex = requestLines[i];
      let line = decodeLine(results[i]);
      this._lines[lineIndex] = line;
    }

    this._lineVersions = lineVersions;
    if (!this.state.watchMode) {
      this._refreshOwners();
    }
    this.renderCanvas();
  }

  _refreshOwners() {
    const counts = {};
    this._lines.flat().forEach((cell) => {
      counts[cell.ownerIndex] = (counts[cell.ownerIndex] || 0) + 1;
    });
    delete counts[0];
    const sortedKeys = Object.keys(counts).sort(
      (a, b) => counts[b] - counts[a]
    );
    this.setState({
      owners: sortedKeys.map((accountIndex) => {
        accountIndex = parseInt(accountIndex);
        return {
          accountIndex,
          numPixels: counts[accountIndex],
        };
      }),
    });
    sortedKeys.forEach(async (accountIndex) => {
      accountIndex = parseInt(accountIndex);
      if (
        !(accountIndex in this._accounts) ||
        counts[accountIndex] !== (this._oldCounts[accountIndex] || 0)
      ) {
        try {
          this._accounts[accountIndex] = await this.getAccountByIndex(
            accountIndex
          );
        } catch (err) {
          console.log("Failed to fetch account index #", accountIndex, err);
        }
        this.setState({
          accounts: Object.assign({}, this._accounts),
        });
      }
    });
    this.setState({
      accounts: Object.assign({}, this._accounts),
    });
    this._oldCounts = counts;
  }

  renderCanvas() {
    if (!this._context || !this._lines) {
      return;
    }

    const ctx = this._context;

    for (let i = 0; i < BoardHeight; ++i) {
      const line = this._lines[i];
      if (!line) {
        continue;
      }
      for (let j = 0; j < BoardWidth; ++j) {
        const p = line[j];
        ctx.fillStyle = intToColor(p.color);
        ctx.fillRect(j * CellWidth, i * CellHeight, CellWidth, CellHeight);
        if (this.state.highlightedAccountIndex >= 0) {
          if (p.ownerIndex !== this.state.highlightedAccountIndex) {
            ctx.fillStyle = "rgba(32, 32, 32, 0.8)";
            ctx.fillRect(
              j * CellWidth,
              i * CellHeight,
              CellWidth / 2,
              CellHeight / 2
            );
            ctx.fillRect(
              (j + 0.5) * CellWidth,
              (i + 0.5) * CellHeight,
              CellWidth / 2,
              CellHeight / 2
            );
            ctx.fillStyle = "rgba(0, 0, 0, 0.8)";
            ctx.fillRect(
              j * CellWidth,
              (i + 0.5) * CellHeight,
              CellWidth / 2,
              CellHeight / 2
            );
            ctx.fillRect(
              (j + 0.5) * CellWidth,
              i * CellHeight,
              CellWidth / 2,
              CellHeight / 2
            );
          } else {
            ctx.beginPath();
            ctx.strokeStyle = ctx.fillStyle = "rgba(255, 255, 255, 0.8)";
            ctx.lineWidth = 0.5;
            ctx.rect(
              j * CellWidth + 0.5,
              i * CellHeight + 0.5,
              CellWidth - 1,
              CellHeight - 1
            );
            ctx.stroke();
            ctx.closePath();
          }
        }
      }
    }

    this._pendingPixels.concat(this._queue).forEach((p) => {
      ctx.fillStyle = intToColor(p.color);
      ctx.fillRect(p.x * CellWidth, p.y * CellHeight, CellWidth, CellHeight);
    });

    if (this.state.selectedCell && !this.state.watchMode) {
      const c = this.state.selectedCell;
      if (this.state.rendering) {
        const img = this.imageData;
        const w = img.width;
        const h = img.height;
        const x = c.x - Math.trunc(w / 2);
        const y = c.y - Math.trunc(h / 2);
        const d = new Uint32Array(this.imageData.data.buffer);
        for (let i = 0; i < h; ++i) {
          for (let j = 0; j < w; ++j) {
            const color = d[i * w + j];
            if (
              color &&
              y + i >= 0 &&
              y + i < BoardHeight &&
              x + j >= 0 &&
              x + j < BoardWidth
            ) {
              const bgColor = this._lines[y + i]
                ? this._lines[y + i][x + j].color
                : 0;
              ctx.fillStyle = intToColor(imgColorToInt(color, bgColor));
              ctx.fillRect(
                (x + j) * CellWidth,
                (y + i) * CellHeight,
                CellWidth,
                CellHeight
              );
            }
          }
        }
      } else if (this.state.pickingColor) {
        const color = this._lines[c.y] ? this._lines[c.y][c.x].color : 0;
        ctx.beginPath();
        ctx.strokeStyle = ctx.fillStyle = transparentColor(color, 0.5);
        ctx.lineWidth = CellWidth * 4;
        ctx.arc(
          (c.x + 0.5) * CellWidth,
          (c.y + 0.5) * CellHeight,
          CellWidth * 4,
          0,
          2 * Math.PI
        );
        ctx.stroke();
        ctx.closePath();

        ctx.beginPath();
        ctx.strokeStyle = ctx.fillStyle = transparentColor(color, 1);
        ctx.lineWidth = CellWidth * 2;
        ctx.arc(
          (c.x + 0.5) * CellWidth,
          (c.y + 0.5) * CellHeight,
          CellWidth * 4,
          0,
          2 * Math.PI
        );
        ctx.stroke();
        ctx.closePath();
      } else {
        ctx.fillStyle = transparentColor(this.state.currentColor, 0.2);
        ctx.fillRect(c.x * CellWidth, 0, CellWidth, c.y * CellHeight);
        ctx.fillRect(
          c.x * CellWidth,
          (c.y + 1) * CellHeight,
          CellWidth,
          (BoardHeight - c.y - 1) * CellHeight
        );
        ctx.fillRect(0, c.y * CellHeight, c.x * CellWidth, CellHeight);
        ctx.fillRect(
          (c.x + 1) * CellWidth,
          c.y * CellHeight,
          (BoardWidth - c.x - 1) * CellWidth,
          CellHeight
        );

        ctx.beginPath();
        ctx.lineWidth = 3;
        ctx.fillStyle = intToColor(this.state.currentColor);
        ctx.strokeStyle = intToColor(this.state.currentColor);
        ctx.rect(c.x * CellWidth, c.y * CellHeight, CellWidth, CellHeight);
        ctx.stroke();
        ctx.closePath();
      }
    }

    if (!this.state.boardLoaded) {
      this.setState({
        boardLoaded: true,
      });
    }
  }

  async requestSignIn() {
    const appTitle = "Berry Club";
    await this._walletConnection.requestSignIn(
      NearConfig.contractName,
      appTitle
    );
  }

  async logOut() {
    this._walletConnection.signOut();
    this._accountId = null;
    this.setState({
      signedIn: !!this._accountId,
      accountId: this._accountId,
    });
  }

  async alphaColorChange(c) {
    this.setState(
      {
        alpha: c.rgb.a,
      },
      () => {
        this.changeColor(c, c.rgb.a);
      }
    );
  }

  hueColorChange(c) {
    this.setState({
      gammaColors: generateGamma(c.hsl.h),
    });
    this.changeColor(c);
  }

  saveColor() {
    const newColor = intToColor(this.state.currentColor);
    const index = this.state.colors.indexOf(newColor);
    if (index >= 0) {
      this.state.colors.splice(index, 1);
    }
    this.setState({
      colors: [newColor].concat(this.state.colors).slice(0, MaxNumColors),
    });
  }

  changeColor(c, alpha) {
    alpha = alpha || 1.0;
    const currentColor = c.rgb.r * 0x010000 + c.rgb.g * 0x000100 + c.rgb.b;
    c.hex = intToColorWithAlpha(currentColor, alpha);
    c.rgb.a = alpha;
    c.hsl.a = alpha;
    c.hsv.a = alpha;
    this.setState(
      {
        pickerColor: c,
        alpha,
        currentColor,
      },
      () => {
        this.renderCanvas();
      }
    );
  }

  setHover(accountIndex, v) {
    if (v) {
      this.setState(
        {
          highlightedAccountIndex: accountIndex,
        },
        () => {
          this.renderCanvas();
        }
      );
    } else if (this.state.highlightedAccountIndex === accountIndex) {
      this.setState(
        {
          highlightedAccountIndex: -1,
        },
        () => {
          this.renderCanvas();
        }
      );
    }
  }

  async switchBerry(farmingBanana) {
    this.setState({
      farmingBanana,
    });
    await this._contract.select_farming_preference({
      berry: farmingBanana ? Berry.Banana : Berry.Avocado,
    });
    await this.refreshAccountStats();
  }

  async renderImg(img, avocadoNeeded) {
    this.imageData = img;
    this.setState({
      weaponsOn: false,
      weaponsCodePosition: 0,
      rendering: true,
      pickingColor: false,
      avocadoNeeded,
    });
  }

  _isEventOver() {
    const date = new Date();
    return (
      this.state.EventEnd <= date
    );
  }

  enableWatchMode() {
    this.setState({
      watchMode: true,
      weaponsOn: false,
      weaponsCodePosition: 0,
    });
    document.body.style.transition = "3s";
    document.body.style.backgroundColor = "#333";
  }
  
  render() {
    const watchClass = this.state.watchMode ? " hidden" : "";
    const isEventOff = this._isEventOver();
    const timeLeft = (
      <div
        className={`free-drawing ${isEventOff ? "free" : "wait"
          }${watchClass} `}
        style={{ color: "#000000", marginTop: "25px" }}
      >
        {isEventOff
          ? "Near Playground is over! Thanks for playing!"
          : <>
            Time left:
            <Timer
              initialTime={
                this.state.eventEndTime - new Date()
              }
              direction="backward"
              timeToUpdate={100}
              lastUnit="d"
              checkpoints={[
                {
                  time: 0,
                },
              ]}
            >
              {() => (
                <React.Fragment>
                  <Timer.Days
                    formatValue={(v) => (v > 1 ? `${v} days ` : v ? `1 day ` : "")}
                  />
                  <Timer.Hours />H{" "}
                  <Timer.Minutes formatValue={(v) => `${v}`.padStart(2, "0")} />M{" "}
                  <Timer.Seconds formatValue={(v) => `${v}`.padStart(2, "0")} />S
                </React.Fragment>
              )}
            </Timer>
          </>}

      </div>
    );

    const content = !this.state.connected ? (
      <button className='wallet-adapter-button btnhover' onClick={() => this.requestSignIn()}>
        {/* <Spinner/> */}
        Connecting...
      </button>
    ) : this.state.signedIn ? (

      <div style={{ marginBottom: "10px", display: "flex", flexDirection: "column", alignItems: "end" }}>
        <div style={{ marginLeft: "0" }}>
          <button className='wallet-adapter-button btnhover' onClick={() => this.logOut()}>
            <div style={{ display: "flex", flexDirection: "row", textTransform: "uppercase", fontSize: "0.9rem" }}>
              <UserIcon style={{ marginLeft: "0.5rem", marginRight: "0.8rem" }} />
              {this.state.accountId}
              <LogoutIcon style={{ marginLeft: "0.8rem", marginRight: "0.5rem" }} />
            </div>
          </button>
        </div>

      </div>
    ) : (
      <div style={{ marginBottom: "10px", display: "flex", flexDirection: "column", alignItems: "end" }}>
        <div style={{ marginLeft: "0" }}>
          <button className='wallet-adapter-button btnhover' onClick={() => this.requestSignIn()}>CONNECT NEAR WALLET</button>
        </div>
      </div>
    );
    const weapons = this.state.weaponsOn ? (
      <div>
        <Weapons
          account={this.state.account}
          isEventOff={isEventOff}
          renderIt={(img, avocadoNeeded) => this.renderImg(img, avocadoNeeded)}
          enableWatchMode={() => this.enableWatchMode()}
        />
      </div>
    ) : (
      ""
    );
    return (
      <div >
        <section className="mainBG">
          <div className={`header`}>
            {content}
          </div>
          <div className="container">
            <MainLogo />
            <div style={{ maxWidth: "900px", display: "flex", flexDirection: "column", alignItems: "center" }}>
              {!this.state.signedIn ? (
                <> <span style={{ textAlign: "center", marginTop: "20px", fontSize: "1.2rem" }}>
                  Lennon Wall is a community project. Together, we draw on canvas and once the event is over, we mint a collectible NFT to mintbase, and auction it to support the Ukraine cause.
                </span>
                  <p style={{ marginTop: "20px", fontSize: "1.2rem", textAlign:"center" }}>Only wallets who have the "Nearcon 22 proof of memory" nft can participate on this event!</p></>
              ) : <></>}
              <span>
                <div
                  className={!this.state.loggedIn ? "hidden" : "display-warning"}
                  style={{ margin: "10px", fontSize: "1.2rem" }}
                >
                  <span role="img" aria-label="warning">
                    ⚠️
                  </span>
                  ️ Please! Don't destroy art!
                  <span role="img" aria-label="pray">
                    🙏
                  </span>
                  ️
                </div>
              </span>
            </div>
            <div className="row" style={{ marginTop: "1rem" }}>
              <div className="col">
                <div className="rect smallrects">
                  {this.state.signedIn ? (
                    <div className={`color-picker`}>
                      <HuePicker
                        color={this.state.pickerColor}
                        width="100%"
                        onChange={(c) => this.hueColorChange(c)}
                      />
                      <AlphaPicker
                        color={this.state.pickerColor}
                        width="100%"
                        onChange={(c) => this.alphaColorChange(c)}
                      />
                      <GithubPicker
                        className="circle-picker"
                        colors={this.state.gammaColors}
                        color={this.state.pickerColor}
                        triangle="hide"
                        width="100%"
                        onChangeComplete={(c) => this.changeColor(c)}
                      />
                      <GithubPicker
                        className="circle-picker"
                        colors={this.state.colors}
                        color={this.state.pickerColor}
                        triangle="hide"
                        width="100%"
                        onChangeComplete={(c) => this.hueColorChange(c)}
                      />
                    </div>
                  ) :
                    (
                      <div style={{ display: "flex", flexDirection: "column", justifyContent: "center", alignItems: "center" }}>
                        <div className="rectDefault">
                        </div>
                        <div className="rectDefault">
                        </div>
                        <div className="rectDefault">
                        </div>
                        <div className="rectDefault">
                        </div>
                      </div>
                    )
                  }
                </div>
                <div className="rect smallrects balances" style={{ color: "#4D4D4D", display: "flex", flexDirection: "row", justifyContent: "space-between" }}>
                  {this.state.signedIn ? (
                    <Balance
                    account={this.state.account}
                    pendingPixels={this.state.pendingPixels}
                    isEventOff={isEventOff}
                    detailed={true}
                  />) :  <div className="rectDefault" style={{width: "100%", display:"flex", flexDirection:"column", alignItems:"center", justifyContent:"center", marginLeft:"10px", marginRight:"10px", marginTop:"10px"}}>
                  </div>}

                  <Popup trigger={<button className="btnbuyink" disabled={!this.state.signedIn}><span>BUY INK</span></button>} modal>
                    <BuyButtons watchClass={watchClass} contract={this._contract} />
                  </Popup>
                </div>
                <div className="rect smallrects" style={{ display: "flex", flexDirection: "column" }}>
                  <span style={{ color: "#4D4D4D", fontSize: "1.3rem" }}>Canvas' Info</span>
                  <div className={`leaderboard`}> {/*${watchClass}*/}
                    <div>
                      <Leaderboard
                        owners={this.state.owners}
                        accounts={this.state.accounts}
                        setHover={(accountIndex, v) => this.setHover(accountIndex, v)}
                        selectedOwnerIndex={this.state.selectedOwnerIndex}
                        highlightedAccountIndex={this.state.highlightedAccountIndex}
                      />
                    </div>
                  </div>
                </div>
              </div>
              <div className="rect bigrect">
                {timeLeft}
                <canvas
                  ref={this.canvasRef}
                  width={600}
                  height={600}
                  className={
                    this.state.boardLoaded
                      ? `pixel-board${this.state.watchMode ? " watch-mode" : ""
                      }`
                      : "pixel-board c-animated-background"
                  }
                />
              </div>
            </div>

          </div>
          <div className={`padded`}>
            {/* {this.state.signedIn ? (
          <div>
            <iframe
              title="irc"
              className="irc"
              frameBorder="0"
              src={`https://kiwiirc.com/client/irc.kiwiirc.com/?nick=${this.state.ircAccountId}#berryclub`}
            />
          </div>
        ) : (
          ""
        )} */}
          </div>
          {/*<div className={`padded${watchClass}`}>*/}
          {/*  <div className="video-container">*/}
          {/*    <iframe*/}
          {/*      title="youtube3"*/}
          {/*      className="youtube"*/}
          {/*      src="https://www.youtube.com/embed/wfTa-Kgw2DM"*/}
          {/*      frameBorder="0"*/}
          {/*      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"*/}
          {/*      allowFullScreen*/}
          {/*    />*/}
          {/*  </div>*/}
          {/*</div>*/}
          {/*<div className={`padded${watchClass}`}>*/}
          {/*  <div className="video-container">*/}
          {/*    <iframe*/}
          {/*      title="youtube2"*/}
          {/*      className="youtube"*/}
          {/*      src="https://www.youtube.com/embed/PYF6RWd7ZgI"*/}
          {/*      frameBorder="0"*/}
          {/*      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"*/}
          {/*      allowFullScreen*/}
          {/*    />*/}
          {/*  </div>*/}
          {/*</div>*/}
          {/*<div className={`padded${watchClass}`}>*/}
          {/*  <div className="video-container">*/}
          {/*    <iframe*/}
          {/*      title="youtube"*/}
          {/*      className="youtube"*/}
          {/*      src="https://www.youtube.com/embed/lMSWhCwstLo"*/}
          {/*      frameBorder="0"*/}
          {/*      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"*/}
          {/*      allowFullScreen*/}
          {/*    />*/}
          {/*  </div>*/}
          {/*</div>*/}
          {weapons}

        </section>
        <section className="mainBG">
          <div className="container">
            

          </div>

        </section>
        <section className={"about-us"}>
          <h1>About us</h1>
          <div className="about-us-container">
            <div className="text">
              <p>
                This project aims to revive some of the old charm  Near had in its beginning by remaking one of the first project ever made on the near blockchain (Berryclub). Our end-goal is to form a new tradition in the Near culture.
                {"\n"}
                {"\n"}
                We decided to donate all the proceeds to Ukraine as we all strongly want to help them and believe that everyone in Near has the same beliefs as us, but in the future we may make a voting pool to decide to where the charitable money is going.
                {"\n"}

                Hope you enjoy our fun project and keep building on Near!
              </p>
            </div>
            <img src={polvo} className="card-image" />
          </div>
        </section>
        <section className={"team-section"}>
          <h1>Team</h1>
          <ul className="cards">
            <li className="card">
              <img src={edu} className="card-image" />
              <p>Eduardo Nunes</p>
            </li>
            <li className="card">
              <img src={lucas} className="card-image" />
              <p>Lucas Anjo</p>
            </li>
            <li className="card">
              <img src={santana} className="card-image" />
              <p>Miguel Santana</p>
            </li>
            <li className="card">
              <img src={pvaz} className="card-image" />
              <p>Pedro Vaz</p>
            </li>
            <li className="card">
              <img src={gouveia} className="card-image" />
              <p>Vasco gouveia</p>
            </li>
          </ul>
        </section>

        <section className={"footer"}>
          <div className="socials">
            <a href="https://discord.com/" className="social">
              <img src={discord} className="footer-image" />
            </a>

            <a href="https://github.com/A3server/nearcon2022" className="social">
              <img src={git} className="footer-image" />
            </a>

            <a href="https://www.instagram.com/" className="social">
              <img src={insta} className="footer-image" />
            </a>

            <a href="https://web.telegram.org/k/" className="social">
              <img src={telegram} className="footer-image" />
            </a>

          </div>

          <a href="https://near.org/">
            <img src={built} className="footer-image" />
          </a>

        </section>

      </div>

    );
  }
}

const Balance = (props) => {
  const account = props.account;
  if (!account) {
    return "";
  }
  const fraction = props.detailed ? 3 : 1;
  const avacadoBalance =
    account.avocadoBalance -
    (props.isEventOff ? 0 : props.pendingPixels || 0);
  /* const avocadoFarm =
    account.avocadoPixels > 0 ? (
      <span>
        {"(+"}
        <span className="font-weight-bold">{account.avocadoPixels}</span>
        INK
        {"/day)"}
      </span>
    ) : (
      ""
    );
  const bananaFarm =
    account.bananaPixels > 0 ? (
      <span>
        {"(+"}
        <span className="font-weight-bold">{account.bananaPixels}</span>
        banana
        {"/day)"}
      </span>
    ) : (
      ""
    ); */
  return (
    <div style={{ alignItems: "center", justifyContent: "center", display: "flex", flexDirection: "column" }}>
      <span className="font-weight-bold">
        {avacadoBalance ? avacadoBalance.toFixed(fraction) : 0} INK
      </span>
      {/* <span className="font-weight-bold">
        {account.bananaBalance ? account.bananaBalance.toFixed(fraction) : 0}
      </span>
      {avocadoFarm}
      {bananaFarm} */}
      {props.pendingPixels ? <span style={{ fontSize: "1rem" }}> ({props.pendingPixels} pending)</span> : ""}
    </div>

  );
};

const Leaderboard = (props) => {
  const owners = props.owners.map((owner) => {
    if (owner.accountIndex in props.accounts) {
      owner.account = props.accounts[owner.accountIndex];
    }
    return (
      <Owner
        key={owner.accountIndex}
        {...owner}
        isSelected={owner.accountIndex === props.selectedOwnerIndex}
        setHover={(v) => props.setHover(owner.accountIndex, v)}
        isHighlighted={owner.accountIndex === props.highlightedAccountIndex}
      />
    );
  });
  return (
    <table className="table table-hover table-sm">
      <tbody>{owners}</tbody>
    </table>
  );
};

const BuyButtons = (props) => {
  async function buyTokens(amount) {
    const requiredBalance = PixelPrice.muln(amount);
    await props.contract.buy_tokens(
      {},
      new BN("30000000000000"),
      requiredBalance
    );
  }

  return (
    <div className={`buttons${props.watchClass}`} style={{ display: "flex", flexDirection: "column", justifyContent: "center", borderRadius: "15px" }} >
      <button
        className="btn btn-primary"
        onClick={() => buyTokens(10)}
      >
        Buy <span className="font-weight-bold">25Avocado</span> for{" "}
        <span className="font-weight-bold">Ⓝ0.1</span>
      </button>{" "}
      <button
        className="btn btn-primary"
        onClick={() => buyTokens(40)}
      >
        Buy <span className="font-weight-bold">100Avocado</span> for{" "}
        <span className="font-weight-bold">Ⓝ0.4</span>
      </button>{" "}
      <button
        className="btn btn-primary"
        onClick={() => buyTokens(100)}
      >
        Buy <span className="font-weight-bold">250Avocado</span> for{" "}
        <span className="font-weight-bold">Ⓝ1</span>
      </button>{" "}
      <button
        className="btn btn-success"
        onClick={() => buyTokens(500)}
      >
        DEAL: Buy <span className="font-weight-bold">1500Avocado</span>{" "}
        for <span className="font-weight-bold">Ⓝ5</span>
      </button>
    </div>
  )
}

const Owner = (props) => {
  const account = props.account;
  return (
    <tr
      onMouseEnter={() => props.setHover(true)}
      onMouseLeave={() => props.setHover(false)}
      className={props.isSelected ? "selected" : ""}
      style={{ color: "#4d4d4d", backgroundColor: props.isHighlighted ? "#f2f2f2" : "", fontSize:"1.2rem" }}
    >
      <td>{account ? <Account accountId={account.accountId} /> : "..."}</td>
      <td className="text-nowrap">
        <small>
          <Balance account={account} />
        </small>
      </td>
    </tr>
  );
};

const Account = (props) => {
  const accountId = props.accountId;
  const shortAccountId =
    accountId.length > 6 + 6 + 3
      ? accountId.slice(0, 6) + "..." + accountId.slice(-6)
      : accountId;
  return (
    <a className="account" href={`https://wayback.berryclub.io/${accountId}`} style={{color: "#4d4d4d"}}>
      {shortAccountId}
    </a>
  );
};

export default App;

'''
'''--- frontend/src/Weapons.js ---
import "./Weapons.scss";
import React from "react";
import Files from "react-files";

const Avocado = (
  <span role="img" aria-label="avocado" className="berry">
    🥑
  </span>
);

export class Weapons extends React.Component {
  constructor(props) {
    super(props);
    this.canvasRef = React.createRef();
    this.state = {
      width: 48,
      height: 28,
      avocadoNeeded: 100,
      lockedAspect: true,
    };
  }

  componentDidMount() {
    this.canvas = this.canvasRef.current;
    this.ctx = this.canvas.getContext("2d");
    this.sourceImage = new Image();
    this.sourceImage.onload = () => {
      this.draw();
    };
    this.sourceImage.src = "/bfg.png";
  }

  draw() {
    const sourceImage = this.sourceImage;
    const canvas = this.canvas;
    const ctx = this.ctx;
    const width = this.state.width;
    const height = this.state.height;

    // Create a canvas with the desired dimensions
    canvas.width = width;
    canvas.height = height;
    canvas.style.width = width * 10 + "px";
    canvas.style.height = height * 10 + "px";

    // Scale and draw the source image to the canvas
    ctx.clearRect(0, 0, width, height);
    ctx.imageSmoothingQuality = "low";
    ctx.drawImage(sourceImage, 0, 0, width, height);

    const imageData = ctx.getImageData(0, 0, width, height);
    this.imageData = imageData;
    this.setState({
      avocadoNeeded: new Uint32Array(imageData.data.buffer).reduce(
        (sum, v) => sum + (v ? 1 : 0),
        0
      ),
    });
  }

  async onFilesChange(f) {
    const sourceImage = this.sourceImage;
    let reader = new FileReader();

    reader.readAsDataURL(f[0]);

    sourceImage.onload = () => {
      let width = sourceImage.naturalWidth;
      let height = sourceImage.naturalHeight;
      if (sourceImage.naturalWidth > 50 || sourceImage.naturalHeight > 50) {
        const aspect = width / height;
        width = Math.round(20 * Math.min(1, aspect));
        height = Math.round(20 * Math.min(1, 1 / aspect));
      }
      this.setState({
        width: Math.min(50, Math.max(1, width)),
        height: Math.min(50, Math.max(1, height)),
      });
      this.draw();
    };

    reader.onload = function (event) {
      sourceImage.src = event.target.result;
    };
  }

  async onFilesError(e, f) {
    console.log(e, f);
  }

  updateVal(key, value) {
    value = Math.min(50, Math.max(1, value));
    if (this.state.lockedAspect) {
      const aspect =
        this.sourceImage.naturalWidth / this.sourceImage.naturalHeight;
      let width, height;
      if (key === "width") {
        width = value;
        height = Math.round(width / aspect);
      } else {
        height = value;
        width = Math.round(height * aspect);
      }
      this.setState(
        {
          width: Math.min(50, Math.max(1, width)),
          height: Math.min(50, Math.max(1, height)),
        },
        () => {
          this.draw();
        }
      );
    } else {
      this.setState(
        {
          [key]: value,
        },
        () => {
          this.draw();
        }
      );
    }
  }

  changeLockedAspect() {
    this.setState({
      lockedAspect: !this.state.lockedAspect,
    });
  }

  render() {
    return (
      <div className="weapons-popup">
        <div className="weapons-content">
          <h2>So you need a BFG?</h2>
          <div>
            <Files
              type="button"
              className="btn"
              onChange={(f) => this.onFilesChange(f)}
              onError={(e, f) => this.onFilesError(e, f)}
              multiple={false}
              accepts={["image/*"]}
              minFileSize={1}
              clickable
            >
              Click to upload an image
            </Files>
          </div>
          <div>
            <label>Width</label>
            <input
              type="number"
              value={this.state.width}
              min={1}
              max={50}
              onChange={(e) => this.updateVal("width", e.target.value)}
            />{" "}
            <button
              className={
                "btn btn-outline-secondary low-right-margin" +
                (this.state.lockedAspect ? " btn-pressed" : " btn-not-pressed")
              }
              onClick={() => this.changeLockedAspect()}
            >
              <span role="img" aria-label="link" className="berry">
                🔗
              </span>
            </button>
            <label>Height</label>
            <input
              type="number"
              value={this.state.height}
              min={1}
              max={50}
              onChange={(e) => this.updateVal("height", e.target.value)}
            />
          </div>
          <button
            className="btn btn-success btn-large"
            disabled={
              !this.props.account ||
              (!this.props.isEventOff &&
                this.props.account.avocadoBalance < this.state.avocadoNeeded)
            }
            onClick={() =>
              this.props.renderIt(this.imageData, this.state.avocadoNeeded)
            }
          >
            Render on the board using {this.state.avocadoNeeded} {Avocado}
          </button>
          <button
            className="btn btn-primary btn-large"
            onClick={() => this.props.enableWatchMode()}
          >
            Enable watch mode
          </button>
          <div className="canvas-wrapper">
            <canvas
              ref={this.canvasRef}
              width={480}
              height={280}
              className="draw-preview"
            ></canvas>
          </div>
        </div>
      </div>
    );
  }
}

'''
'''--- frontend/src/assets/LogoutIcon.js ---
import React from 'react'

function LogoutIcon(props) {
  return (
    <svg width="1.2rem" height="1.2rem" viewBox="0 0 28 29" fill="none" xmlns="http://www.w3.org/2000/svg" style={props.style}>
<path d="M13.2416 27.5H5.11664" stroke="#A463B0" strokeWidth="3" strokeLinecap="round"/>
<path d="M5.11664 27.5C4.25468 27.5 3.42828 27.1576 2.81879 26.5481" stroke="#A463B0" strokeWidth="3" strokeLinecap="round"/>
<path d="M2.81879 26.5481C2.20929 25.9386 1.86664 25.112 1.86664 24.25" stroke="#A463B0" strokeWidth="3" strokeLinecap="round"/>
<path d="M1.86664 24.25V4.75" stroke="#A463B0" strokeWidth="3" strokeLinecap="round"/>
<path d="M1.86664 4.75005C1.86664 3.88809 2.20929 3.06149 2.81879 2.452" stroke="#A463B0" strokeWidth="3" strokeLinecap="round"/>
<path d="M2.81879 2.45195C3.42828 1.84246 4.25468 1.5 5.11664 1.5" stroke="#A463B0" strokeWidth="3" strokeLinecap="round"/>
<path d="M5.11664 1.5H13.2416" stroke="#A463B0" strokeWidth="3" strokeLinecap="round"/>
<path d="M10.2416 14.5H24.2491" stroke="#A463B0" strokeWidth="3" strokeMiterlimit="10" strokeLinecap="round"/>
<path d="M18.9963 21.5037L26 14.5L18.9963 7.49628" stroke="#A463B0" strokeWidth="3" strokeLinecap="round" strokeLinejoin="round"/>
</svg>

  )
}

export default LogoutIcon
'''
'''--- frontend/src/assets/MainLogo.js ---
import React from 'react'

function MainLogo() {
  return (
    <div style={{ display: "flex", justifyContent: "center", flexDirection: "column", alignItems: "center", marginTop: "-2.3rem" }}>
      {window.innerWidth > 1020 ? <>
        <svg width="800" height="260" viewBox="0 0 508 250" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8 107V35H18.45V97.15H51.05V107H8ZM59.5391 107V35H105.539V44.85H69.9891V65.05H99.5391V74.9H69.9891V97.15H105.539V107H59.5391ZM117.547 107V35H128.147L163.597 88.5V35H174.197V107H163.597L128.147 53.45V107H117.547ZM188.152 107V35H198.752L234.202 88.5V35H244.802V107H234.202L198.752 53.45V107H188.152ZM288.808 108.5C281.608 108.5 275.474 106.933 270.408 103.8C265.341 100.633 261.458 96.2333 258.758 90.6C256.091 84.9667 254.758 78.4333 254.758 71C254.758 63.5667 256.091 57.0333 258.758 51.4C261.458 45.7667 265.341 41.3833 270.408 38.25C275.474 35.0833 281.608 33.5 288.808 33.5C295.974 33.5 302.091 35.0833 307.158 38.25C312.258 41.3833 316.141 45.7667 318.808 51.4C321.474 57.0333 322.808 63.5667 322.808 71C322.808 78.4333 321.474 84.9667 318.808 90.6C316.141 96.2333 312.258 100.633 307.158 103.8C302.091 106.933 295.974 108.5 288.808 108.5ZM288.808 98.55C293.908 98.6167 298.141 97.5 301.508 95.2C304.908 92.8667 307.458 89.6333 309.158 85.5C310.858 81.3333 311.708 76.5 311.708 71C311.708 65.5 310.858 60.7 309.158 56.6C307.458 52.4667 304.908 49.25 301.508 46.95C298.141 44.65 293.908 43.4833 288.808 43.45C283.708 43.3833 279.458 44.5 276.058 46.8C272.691 49.1 270.158 52.3333 268.458 56.5C266.758 60.6667 265.891 65.5 265.858 71C265.824 76.5 266.658 81.3167 268.358 85.45C270.058 89.55 272.608 92.75 276.008 95.05C279.441 97.35 283.708 98.5167 288.808 98.55ZM332.781 107V35H343.381L378.831 88.5V35H389.431V107H378.831L343.381 53.45V107H332.781Z" fill="#DB5555"/>
<path d="M12.2192 110V38H22.6692V100.15H55.2692V110H12.2192ZM63.7583 110V38H109.758V47.85H74.2083V68.05H103.758V77.9H74.2083V100.15H109.758V110H63.7583ZM121.766 110V38H132.366L167.816 91.5V38H178.416V110H167.816L132.366 56.45V110H121.766ZM192.372 110V38H202.972L238.422 91.5V38H249.022V110H238.422L202.972 56.45V110H192.372ZM293.027 111.5C285.827 111.5 279.694 109.933 274.627 106.8C269.56 103.633 265.677 99.2333 262.977 93.6C260.31 87.9667 258.977 81.4333 258.977 74C258.977 66.5667 260.31 60.0333 262.977 54.4C265.677 48.7667 269.56 44.3833 274.627 41.25C279.694 38.0833 285.827 36.5 293.027 36.5C300.194 36.5 306.31 38.0833 311.377 41.25C316.477 44.3833 320.36 48.7667 323.027 54.4C325.694 60.0333 327.027 66.5667 327.027 74C327.027 81.4333 325.694 87.9667 323.027 93.6C320.36 99.2333 316.477 103.633 311.377 106.8C306.31 109.933 300.194 111.5 293.027 111.5ZM293.027 101.55C298.127 101.617 302.36 100.5 305.727 98.2C309.127 95.8667 311.677 92.6333 313.377 88.5C315.077 84.3333 315.927 79.5 315.927 74C315.927 68.5 315.077 63.7 313.377 59.6C311.677 55.4667 309.127 52.25 305.727 49.95C302.36 47.65 298.127 46.4833 293.027 46.45C287.927 46.3833 283.677 47.5 280.277 49.8C276.91 52.1 274.377 55.3333 272.677 59.5C270.977 63.6667 270.11 68.5 270.077 74C270.044 79.5 270.877 84.3167 272.577 88.45C274.277 92.55 276.827 95.75 280.227 98.05C283.66 100.35 287.927 101.517 293.027 101.55ZM337 110V38H347.6L383.05 91.5V38H393.65V110H383.05L347.6 56.45V110H337Z" fill="#E3935B"/>
<path d="M16.4385 114V42H26.8885V104.15H59.4885V114H16.4385ZM67.9775 114V42H113.978V51.85H78.4275V72.05H107.978V81.9H78.4275V104.15H113.978V114H67.9775ZM125.985 114V42H136.585L172.035 95.5V42H182.635V114H172.035L136.585 60.45V114H125.985ZM196.591 114V42H207.191L242.641 95.5V42H253.241V114H242.641L207.191 60.45V114H196.591ZM297.246 115.5C290.046 115.5 283.913 113.933 278.846 110.8C273.78 107.633 269.896 103.233 267.196 97.6C264.53 91.9667 263.196 85.4333 263.196 78C263.196 70.5667 264.53 64.0333 267.196 58.4C269.896 52.7667 273.78 48.3833 278.846 45.25C283.913 42.0833 290.046 40.5 297.246 40.5C304.413 40.5 310.53 42.0833 315.596 45.25C320.696 48.3833 324.58 52.7667 327.246 58.4C329.913 64.0333 331.246 70.5667 331.246 78C331.246 85.4333 329.913 91.9667 327.246 97.6C324.58 103.233 320.696 107.633 315.596 110.8C310.53 113.933 304.413 115.5 297.246 115.5ZM297.246 105.55C302.346 105.617 306.58 104.5 309.946 102.2C313.346 99.8667 315.896 96.6333 317.596 92.5C319.296 88.3333 320.146 83.5 320.146 78C320.146 72.5 319.296 67.7 317.596 63.6C315.896 59.4667 313.346 56.25 309.946 53.95C306.58 51.65 302.346 50.4833 297.246 50.45C292.146 50.3833 287.896 51.5 284.496 53.8C281.13 56.1 278.596 59.3333 276.896 63.5C275.196 67.6667 274.33 72.5 274.296 78C274.263 83.5 275.096 88.3167 276.796 92.45C278.496 96.55 281.046 99.75 284.446 102.05C287.88 104.35 292.146 105.517 297.246 105.55ZM341.22 114V42H351.82L387.27 95.5V42H397.87V114H387.27L351.82 60.45V114H341.22Z" fill="#AAD055"/>
<path d="M20.6577 117V45H31.1077V107.15H63.7077V117H20.6577ZM72.1968 117V45H118.197V54.85H82.6468V75.05H112.197V84.9H82.6468V107.15H118.197V117H72.1968ZM130.205 117V45H140.805L176.255 98.5V45H186.855V117H176.255L140.805 63.45V117H130.205ZM200.81 117V45H211.41L246.86 98.5V45H257.46V117H246.86L211.41 63.45V117H200.81ZM301.466 118.5C294.266 118.5 288.132 116.933 283.066 113.8C277.999 110.633 274.116 106.233 271.416 100.6C268.749 94.9667 267.416 88.4333 267.416 81C267.416 73.5667 268.749 67.0333 271.416 61.4C274.116 55.7667 277.999 51.3833 283.066 48.25C288.132 45.0833 294.266 43.5 301.466 43.5C308.632 43.5 314.749 45.0833 319.816 48.25C324.916 51.3833 328.799 55.7667 331.466 61.4C334.132 67.0333 335.466 73.5667 335.466 81C335.466 88.4333 334.132 94.9667 331.466 100.6C328.799 106.233 324.916 110.633 319.816 113.8C314.749 116.933 308.632 118.5 301.466 118.5ZM301.466 108.55C306.566 108.617 310.799 107.5 314.166 105.2C317.566 102.867 320.116 99.6333 321.816 95.5C323.516 91.3333 324.366 86.5 324.366 81C324.366 75.5 323.516 70.7 321.816 66.6C320.116 62.4667 317.566 59.25 314.166 56.95C310.799 54.65 306.566 53.4833 301.466 53.45C296.366 53.3833 292.116 54.5 288.716 56.8C285.349 59.1 282.816 62.3333 281.116 66.5C279.416 70.6667 278.549 75.5 278.516 81C278.482 86.5 279.316 91.3167 281.016 95.45C282.716 99.55 285.266 102.75 288.666 105.05C292.099 107.35 296.366 108.517 301.466 108.55ZM345.439 117V45H356.039L391.489 98.5V45H402.089V117H391.489L356.039 63.45V117H345.439Z" fill="#FFC860"/>
<path d="M24.877 120V48H35.327V110.15H67.927V120H24.877ZM76.416 120V48H122.416V57.85H86.866V78.05H116.416V87.9H86.866V110.15H122.416V120H76.416ZM134.424 120V48H145.024L180.474 101.5V48H191.074V120H180.474L145.024 66.45V120H134.424ZM205.029 120V48H215.629L251.079 101.5V48H261.679V120H251.079L215.629 66.45V120H205.029ZM305.685 121.5C298.485 121.5 292.351 119.933 287.285 116.8C282.218 113.633 278.335 109.233 275.635 103.6C272.968 97.9667 271.635 91.4333 271.635 84C271.635 76.5667 272.968 70.0333 275.635 64.4C278.335 58.7667 282.218 54.3833 287.285 51.25C292.351 48.0833 298.485 46.5 305.685 46.5C312.851 46.5 318.968 48.0833 324.035 51.25C329.135 54.3833 333.018 58.7667 335.685 64.4C338.351 70.0333 339.685 76.5667 339.685 84C339.685 91.4333 338.351 97.9667 335.685 103.6C333.018 109.233 329.135 113.633 324.035 116.8C318.968 119.933 312.851 121.5 305.685 121.5ZM305.685 111.55C310.785 111.617 315.018 110.5 318.385 108.2C321.785 105.867 324.335 102.633 326.035 98.5C327.735 94.3333 328.585 89.5 328.585 84C328.585 78.5 327.735 73.7 326.035 69.6C324.335 65.4667 321.785 62.25 318.385 59.95C315.018 57.65 310.785 56.4833 305.685 56.45C300.585 56.3833 296.335 57.5 292.935 59.8C289.568 62.1 287.035 65.3333 285.335 69.5C283.635 73.6667 282.768 78.5 282.735 84C282.701 89.5 283.535 94.3167 285.235 98.45C286.935 102.55 289.485 105.75 292.885 108.05C296.318 110.35 300.585 111.517 305.685 111.55ZM349.658 120V48H360.258L395.708 101.5V48H406.308V120H395.708L360.258 66.45V120H349.658Z" fill="#4FD1D9"/>
<path d="M29.0962 123V51H39.5462V113.15H72.1462V123H29.0962ZM80.6353 123V51H126.635V60.85H91.0853V81.05H120.635V90.9H91.0853V113.15H126.635V123H80.6353ZM138.643 123V51H149.243L184.693 104.5V51H195.293V123H184.693L149.243 69.45V123H138.643ZM209.249 123V51H219.849L255.299 104.5V51H265.899V123H255.299L219.849 69.45V123H209.249ZM309.904 124.5C302.704 124.5 296.571 122.933 291.504 119.8C286.437 116.633 282.554 112.233 279.854 106.6C277.187 100.967 275.854 94.4333 275.854 87C275.854 79.5667 277.187 73.0333 279.854 67.4C282.554 61.7667 286.437 57.3833 291.504 54.25C296.571 51.0833 302.704 49.5 309.904 49.5C317.071 49.5 323.187 51.0833 328.254 54.25C333.354 57.3833 337.237 61.7667 339.904 67.4C342.571 73.0333 343.904 79.5667 343.904 87C343.904 94.4333 342.571 100.967 339.904 106.6C337.237 112.233 333.354 116.633 328.254 119.8C323.187 122.933 317.071 124.5 309.904 124.5ZM309.904 114.55C315.004 114.617 319.237 113.5 322.604 111.2C326.004 108.867 328.554 105.633 330.254 101.5C331.954 97.3333 332.804 92.5 332.804 87C332.804 81.5 331.954 76.7 330.254 72.6C328.554 68.4667 326.004 65.25 322.604 62.95C319.237 60.65 315.004 59.4833 309.904 59.45C304.804 59.3833 300.554 60.5 297.154 62.8C293.787 65.1 291.254 68.3333 289.554 72.5C287.854 76.6667 286.987 81.5 286.954 87C286.921 92.5 287.754 97.3167 289.454 101.45C291.154 105.55 293.704 108.75 297.104 111.05C300.537 113.35 304.804 114.517 309.904 114.55ZM353.877 123V51H364.477L399.927 104.5V51H410.527V123H399.927L364.477 69.45V123H353.877Z" fill="#5F8AFA"/>
<path d="M99.25 209L78.35 137H89.3L104.45 191.45L119.6 137.05L130.6 137L145.75 191.45L160.9 137H171.9L150.95 209H140.55L125.1 155.15L109.65 209H99.25ZM168.258 209L191.658 137H206.708L230.108 209H219.258L197.708 143.3H200.408L179.108 209H168.258ZM180.408 192.75V182.95H218.008V192.75H180.408ZM240.078 209V137H250.528V199.15H283.128V209H240.078ZM292.617 209V137H303.067V199.15H335.667V209H292.617Z" fill="#DB5555"/>
<path d="M103.648 212L82.748 140H93.698L108.848 194.45L123.998 140.05L134.998 140L150.148 194.45L165.298 140H176.298L155.348 212H144.948L129.498 158.15L114.048 212H103.648ZM172.656 212L196.056 140H211.106L234.506 212H223.656L202.106 146.3H204.806L183.506 212H172.656ZM184.806 195.75V185.95H222.406V195.75H184.806ZM244.476 212V140H254.926V202.15H287.526V212H244.476ZM297.015 212V140H307.465V202.15H340.065V212H297.015Z" fill="#E3935B"/>
<path d="M108.046 216L87.1459 144H98.0959L113.246 198.45L128.396 144.05L139.396 144L154.546 198.45L169.696 144H180.696L159.746 216H149.346L133.896 162.15L118.446 216H108.046ZM177.054 216L200.454 144H215.504L238.904 216H228.054L206.504 150.3H209.204L187.904 216H177.054ZM189.204 199.75V189.95H226.804V199.75H189.204ZM248.874 216V144H259.324V206.15H291.924V216H248.874ZM301.413 216V144H311.863V206.15H344.463V216H301.413Z" fill="#AAD055"/>
<path d="M112.444 219L91.5439 147H102.494L117.644 201.45L132.794 147.05L143.794 147L158.944 201.45L174.094 147H185.094L164.144 219H153.744L138.294 165.15L122.844 219H112.444ZM181.452 219L204.852 147H219.902L243.302 219H232.452L210.902 153.3H213.602L192.302 219H181.452ZM193.602 202.75V192.95H231.202V202.75H193.602ZM253.272 219V147H263.722V209.15H296.322V219H253.272ZM305.811 219V147H316.261V209.15H348.861V219H305.811Z" fill="#FFC860"/>
<path d="M116.842 222L95.9418 150H106.892L122.042 204.45L137.192 150.05L148.192 150L163.342 204.45L178.492 150H189.492L168.542 222H158.142L142.692 168.15L127.242 222H116.842ZM185.85 222L209.25 150H224.3L247.7 222H236.85L215.3 156.3H218L196.7 222H185.85ZM198 205.75V195.95H235.6V205.75H198ZM257.67 222V150H268.12V212.15H300.72V222H257.67ZM310.209 222V150H320.659V212.15H353.259V222H310.209Z" fill="#4FD1D9"/>
<path d="M121.24 225L100.34 153H111.29L126.44 207.45L141.59 153.05L152.59 153L167.74 207.45L182.89 153H193.89L172.94 225H162.54L147.09 171.15L131.64 225H121.24ZM190.248 225L213.648 153H228.698L252.098 225H241.248L219.698 159.3H222.398L201.098 225H190.248ZM202.398 208.75V198.95H239.998V208.75H202.398ZM262.068 225V153H272.518V215.15H305.118V225H262.068ZM314.607 225V153H325.057V215.15H357.657V225H314.607Z" fill="#5F8AFA"/>
</svg>
</> :
        <>{
          window.innerWidth < 525 ? <>
            {window.innerWidth < 450 ? <>
            <svg width="170" height="85" viewBox="0 0 508 250" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8 107V35H18.45V97.15H51.05V107H8ZM59.5391 107V35H105.539V44.85H69.9891V65.05H99.5391V74.9H69.9891V97.15H105.539V107H59.5391ZM117.547 107V35H128.147L163.597 88.5V35H174.197V107H163.597L128.147 53.45V107H117.547ZM188.152 107V35H198.752L234.202 88.5V35H244.802V107H234.202L198.752 53.45V107H188.152ZM288.808 108.5C281.608 108.5 275.474 106.933 270.408 103.8C265.341 100.633 261.458 96.2333 258.758 90.6C256.091 84.9667 254.758 78.4333 254.758 71C254.758 63.5667 256.091 57.0333 258.758 51.4C261.458 45.7667 265.341 41.3833 270.408 38.25C275.474 35.0833 281.608 33.5 288.808 33.5C295.974 33.5 302.091 35.0833 307.158 38.25C312.258 41.3833 316.141 45.7667 318.808 51.4C321.474 57.0333 322.808 63.5667 322.808 71C322.808 78.4333 321.474 84.9667 318.808 90.6C316.141 96.2333 312.258 100.633 307.158 103.8C302.091 106.933 295.974 108.5 288.808 108.5ZM288.808 98.55C293.908 98.6167 298.141 97.5 301.508 95.2C304.908 92.8667 307.458 89.6333 309.158 85.5C310.858 81.3333 311.708 76.5 311.708 71C311.708 65.5 310.858 60.7 309.158 56.6C307.458 52.4667 304.908 49.25 301.508 46.95C298.141 44.65 293.908 43.4833 288.808 43.45C283.708 43.3833 279.458 44.5 276.058 46.8C272.691 49.1 270.158 52.3333 268.458 56.5C266.758 60.6667 265.891 65.5 265.858 71C265.824 76.5 266.658 81.3167 268.358 85.45C270.058 89.55 272.608 92.75 276.008 95.05C279.441 97.35 283.708 98.5167 288.808 98.55ZM332.781 107V35H343.381L378.831 88.5V35H389.431V107H378.831L343.381 53.45V107H332.781Z" fill="#DB5555"/>
<path d="M12.2192 110V38H22.6692V100.15H55.2692V110H12.2192ZM63.7583 110V38H109.758V47.85H74.2083V68.05H103.758V77.9H74.2083V100.15H109.758V110H63.7583ZM121.766 110V38H132.366L167.816 91.5V38H178.416V110H167.816L132.366 56.45V110H121.766ZM192.372 110V38H202.972L238.422 91.5V38H249.022V110H238.422L202.972 56.45V110H192.372ZM293.027 111.5C285.827 111.5 279.694 109.933 274.627 106.8C269.56 103.633 265.677 99.2333 262.977 93.6C260.31 87.9667 258.977 81.4333 258.977 74C258.977 66.5667 260.31 60.0333 262.977 54.4C265.677 48.7667 269.56 44.3833 274.627 41.25C279.694 38.0833 285.827 36.5 293.027 36.5C300.194 36.5 306.31 38.0833 311.377 41.25C316.477 44.3833 320.36 48.7667 323.027 54.4C325.694 60.0333 327.027 66.5667 327.027 74C327.027 81.4333 325.694 87.9667 323.027 93.6C320.36 99.2333 316.477 103.633 311.377 106.8C306.31 109.933 300.194 111.5 293.027 111.5ZM293.027 101.55C298.127 101.617 302.36 100.5 305.727 98.2C309.127 95.8667 311.677 92.6333 313.377 88.5C315.077 84.3333 315.927 79.5 315.927 74C315.927 68.5 315.077 63.7 313.377 59.6C311.677 55.4667 309.127 52.25 305.727 49.95C302.36 47.65 298.127 46.4833 293.027 46.45C287.927 46.3833 283.677 47.5 280.277 49.8C276.91 52.1 274.377 55.3333 272.677 59.5C270.977 63.6667 270.11 68.5 270.077 74C270.044 79.5 270.877 84.3167 272.577 88.45C274.277 92.55 276.827 95.75 280.227 98.05C283.66 100.35 287.927 101.517 293.027 101.55ZM337 110V38H347.6L383.05 91.5V38H393.65V110H383.05L347.6 56.45V110H337Z" fill="#E3935B"/>
<path d="M16.4385 114V42H26.8885V104.15H59.4885V114H16.4385ZM67.9775 114V42H113.978V51.85H78.4275V72.05H107.978V81.9H78.4275V104.15H113.978V114H67.9775ZM125.985 114V42H136.585L172.035 95.5V42H182.635V114H172.035L136.585 60.45V114H125.985ZM196.591 114V42H207.191L242.641 95.5V42H253.241V114H242.641L207.191 60.45V114H196.591ZM297.246 115.5C290.046 115.5 283.913 113.933 278.846 110.8C273.78 107.633 269.896 103.233 267.196 97.6C264.53 91.9667 263.196 85.4333 263.196 78C263.196 70.5667 264.53 64.0333 267.196 58.4C269.896 52.7667 273.78 48.3833 278.846 45.25C283.913 42.0833 290.046 40.5 297.246 40.5C304.413 40.5 310.53 42.0833 315.596 45.25C320.696 48.3833 324.58 52.7667 327.246 58.4C329.913 64.0333 331.246 70.5667 331.246 78C331.246 85.4333 329.913 91.9667 327.246 97.6C324.58 103.233 320.696 107.633 315.596 110.8C310.53 113.933 304.413 115.5 297.246 115.5ZM297.246 105.55C302.346 105.617 306.58 104.5 309.946 102.2C313.346 99.8667 315.896 96.6333 317.596 92.5C319.296 88.3333 320.146 83.5 320.146 78C320.146 72.5 319.296 67.7 317.596 63.6C315.896 59.4667 313.346 56.25 309.946 53.95C306.58 51.65 302.346 50.4833 297.246 50.45C292.146 50.3833 287.896 51.5 284.496 53.8C281.13 56.1 278.596 59.3333 276.896 63.5C275.196 67.6667 274.33 72.5 274.296 78C274.263 83.5 275.096 88.3167 276.796 92.45C278.496 96.55 281.046 99.75 284.446 102.05C287.88 104.35 292.146 105.517 297.246 105.55ZM341.22 114V42H351.82L387.27 95.5V42H397.87V114H387.27L351.82 60.45V114H341.22Z" fill="#AAD055"/>
<path d="M20.6577 117V45H31.1077V107.15H63.7077V117H20.6577ZM72.1968 117V45H118.197V54.85H82.6468V75.05H112.197V84.9H82.6468V107.15H118.197V117H72.1968ZM130.205 117V45H140.805L176.255 98.5V45H186.855V117H176.255L140.805 63.45V117H130.205ZM200.81 117V45H211.41L246.86 98.5V45H257.46V117H246.86L211.41 63.45V117H200.81ZM301.466 118.5C294.266 118.5 288.132 116.933 283.066 113.8C277.999 110.633 274.116 106.233 271.416 100.6C268.749 94.9667 267.416 88.4333 267.416 81C267.416 73.5667 268.749 67.0333 271.416 61.4C274.116 55.7667 277.999 51.3833 283.066 48.25C288.132 45.0833 294.266 43.5 301.466 43.5C308.632 43.5 314.749 45.0833 319.816 48.25C324.916 51.3833 328.799 55.7667 331.466 61.4C334.132 67.0333 335.466 73.5667 335.466 81C335.466 88.4333 334.132 94.9667 331.466 100.6C328.799 106.233 324.916 110.633 319.816 113.8C314.749 116.933 308.632 118.5 301.466 118.5ZM301.466 108.55C306.566 108.617 310.799 107.5 314.166 105.2C317.566 102.867 320.116 99.6333 321.816 95.5C323.516 91.3333 324.366 86.5 324.366 81C324.366 75.5 323.516 70.7 321.816 66.6C320.116 62.4667 317.566 59.25 314.166 56.95C310.799 54.65 306.566 53.4833 301.466 53.45C296.366 53.3833 292.116 54.5 288.716 56.8C285.349 59.1 282.816 62.3333 281.116 66.5C279.416 70.6667 278.549 75.5 278.516 81C278.482 86.5 279.316 91.3167 281.016 95.45C282.716 99.55 285.266 102.75 288.666 105.05C292.099 107.35 296.366 108.517 301.466 108.55ZM345.439 117V45H356.039L391.489 98.5V45H402.089V117H391.489L356.039 63.45V117H345.439Z" fill="#FFC860"/>
<path d="M24.877 120V48H35.327V110.15H67.927V120H24.877ZM76.416 120V48H122.416V57.85H86.866V78.05H116.416V87.9H86.866V110.15H122.416V120H76.416ZM134.424 120V48H145.024L180.474 101.5V48H191.074V120H180.474L145.024 66.45V120H134.424ZM205.029 120V48H215.629L251.079 101.5V48H261.679V120H251.079L215.629 66.45V120H205.029ZM305.685 121.5C298.485 121.5 292.351 119.933 287.285 116.8C282.218 113.633 278.335 109.233 275.635 103.6C272.968 97.9667 271.635 91.4333 271.635 84C271.635 76.5667 272.968 70.0333 275.635 64.4C278.335 58.7667 282.218 54.3833 287.285 51.25C292.351 48.0833 298.485 46.5 305.685 46.5C312.851 46.5 318.968 48.0833 324.035 51.25C329.135 54.3833 333.018 58.7667 335.685 64.4C338.351 70.0333 339.685 76.5667 339.685 84C339.685 91.4333 338.351 97.9667 335.685 103.6C333.018 109.233 329.135 113.633 324.035 116.8C318.968 119.933 312.851 121.5 305.685 121.5ZM305.685 111.55C310.785 111.617 315.018 110.5 318.385 108.2C321.785 105.867 324.335 102.633 326.035 98.5C327.735 94.3333 328.585 89.5 328.585 84C328.585 78.5 327.735 73.7 326.035 69.6C324.335 65.4667 321.785 62.25 318.385 59.95C315.018 57.65 310.785 56.4833 305.685 56.45C300.585 56.3833 296.335 57.5 292.935 59.8C289.568 62.1 287.035 65.3333 285.335 69.5C283.635 73.6667 282.768 78.5 282.735 84C282.701 89.5 283.535 94.3167 285.235 98.45C286.935 102.55 289.485 105.75 292.885 108.05C296.318 110.35 300.585 111.517 305.685 111.55ZM349.658 120V48H360.258L395.708 101.5V48H406.308V120H395.708L360.258 66.45V120H349.658Z" fill="#4FD1D9"/>
<path d="M29.0962 123V51H39.5462V113.15H72.1462V123H29.0962ZM80.6353 123V51H126.635V60.85H91.0853V81.05H120.635V90.9H91.0853V113.15H126.635V123H80.6353ZM138.643 123V51H149.243L184.693 104.5V51H195.293V123H184.693L149.243 69.45V123H138.643ZM209.249 123V51H219.849L255.299 104.5V51H265.899V123H255.299L219.849 69.45V123H209.249ZM309.904 124.5C302.704 124.5 296.571 122.933 291.504 119.8C286.437 116.633 282.554 112.233 279.854 106.6C277.187 100.967 275.854 94.4333 275.854 87C275.854 79.5667 277.187 73.0333 279.854 67.4C282.554 61.7667 286.437 57.3833 291.504 54.25C296.571 51.0833 302.704 49.5 309.904 49.5C317.071 49.5 323.187 51.0833 328.254 54.25C333.354 57.3833 337.237 61.7667 339.904 67.4C342.571 73.0333 343.904 79.5667 343.904 87C343.904 94.4333 342.571 100.967 339.904 106.6C337.237 112.233 333.354 116.633 328.254 119.8C323.187 122.933 317.071 124.5 309.904 124.5ZM309.904 114.55C315.004 114.617 319.237 113.5 322.604 111.2C326.004 108.867 328.554 105.633 330.254 101.5C331.954 97.3333 332.804 92.5 332.804 87C332.804 81.5 331.954 76.7 330.254 72.6C328.554 68.4667 326.004 65.25 322.604 62.95C319.237 60.65 315.004 59.4833 309.904 59.45C304.804 59.3833 300.554 60.5 297.154 62.8C293.787 65.1 291.254 68.3333 289.554 72.5C287.854 76.6667 286.987 81.5 286.954 87C286.921 92.5 287.754 97.3167 289.454 101.45C291.154 105.55 293.704 108.75 297.104 111.05C300.537 113.35 304.804 114.517 309.904 114.55ZM353.877 123V51H364.477L399.927 104.5V51H410.527V123H399.927L364.477 69.45V123H353.877Z" fill="#5F8AFA"/>
<path d="M99.25 209L78.35 137H89.3L104.45 191.45L119.6 137.05L130.6 137L145.75 191.45L160.9 137H171.9L150.95 209H140.55L125.1 155.15L109.65 209H99.25ZM168.258 209L191.658 137H206.708L230.108 209H219.258L197.708 143.3H200.408L179.108 209H168.258ZM180.408 192.75V182.95H218.008V192.75H180.408ZM240.078 209V137H250.528V199.15H283.128V209H240.078ZM292.617 209V137H303.067V199.15H335.667V209H292.617Z" fill="#DB5555"/>
<path d="M103.648 212L82.748 140H93.698L108.848 194.45L123.998 140.05L134.998 140L150.148 194.45L165.298 140H176.298L155.348 212H144.948L129.498 158.15L114.048 212H103.648ZM172.656 212L196.056 140H211.106L234.506 212H223.656L202.106 146.3H204.806L183.506 212H172.656ZM184.806 195.75V185.95H222.406V195.75H184.806ZM244.476 212V140H254.926V202.15H287.526V212H244.476ZM297.015 212V140H307.465V202.15H340.065V212H297.015Z" fill="#E3935B"/>
<path d="M108.046 216L87.1459 144H98.0959L113.246 198.45L128.396 144.05L139.396 144L154.546 198.45L169.696 144H180.696L159.746 216H149.346L133.896 162.15L118.446 216H108.046ZM177.054 216L200.454 144H215.504L238.904 216H228.054L206.504 150.3H209.204L187.904 216H177.054ZM189.204 199.75V189.95H226.804V199.75H189.204ZM248.874 216V144H259.324V206.15H291.924V216H248.874ZM301.413 216V144H311.863V206.15H344.463V216H301.413Z" fill="#AAD055"/>
<path d="M112.444 219L91.5439 147H102.494L117.644 201.45L132.794 147.05L143.794 147L158.944 201.45L174.094 147H185.094L164.144 219H153.744L138.294 165.15L122.844 219H112.444ZM181.452 219L204.852 147H219.902L243.302 219H232.452L210.902 153.3H213.602L192.302 219H181.452ZM193.602 202.75V192.95H231.202V202.75H193.602ZM253.272 219V147H263.722V209.15H296.322V219H253.272ZM305.811 219V147H316.261V209.15H348.861V219H305.811Z" fill="#FFC860"/>
<path d="M116.842 222L95.9418 150H106.892L122.042 204.45L137.192 150.05L148.192 150L163.342 204.45L178.492 150H189.492L168.542 222H158.142L142.692 168.15L127.242 222H116.842ZM185.85 222L209.25 150H224.3L247.7 222H236.85L215.3 156.3H218L196.7 222H185.85ZM198 205.75V195.95H235.6V205.75H198ZM257.67 222V150H268.12V212.15H300.72V222H257.67ZM310.209 222V150H320.659V212.15H353.259V222H310.209Z" fill="#4FD1D9"/>
<path d="M121.24 225L100.34 153H111.29L126.44 207.45L141.59 153.05L152.59 153L167.74 207.45L182.89 153H193.89L172.94 225H162.54L147.09 171.15L131.64 225H121.24ZM190.248 225L213.648 153H228.698L252.098 225H241.248L219.698 159.3H222.398L201.098 225H190.248ZM202.398 208.75V198.95H239.998V208.75H202.398ZM262.068 225V153H272.518V215.15H305.118V225H262.068ZM314.607 225V153H325.057V215.15H357.657V225H314.607Z" fill="#5F8AFA"/>
</svg>
</> : <><svg width="260" height="125" viewBox="0 0 508 250" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8 107V35H18.45V97.15H51.05V107H8ZM59.5391 107V35H105.539V44.85H69.9891V65.05H99.5391V74.9H69.9891V97.15H105.539V107H59.5391ZM117.547 107V35H128.147L163.597 88.5V35H174.197V107H163.597L128.147 53.45V107H117.547ZM188.152 107V35H198.752L234.202 88.5V35H244.802V107H234.202L198.752 53.45V107H188.152ZM288.808 108.5C281.608 108.5 275.474 106.933 270.408 103.8C265.341 100.633 261.458 96.2333 258.758 90.6C256.091 84.9667 254.758 78.4333 254.758 71C254.758 63.5667 256.091 57.0333 258.758 51.4C261.458 45.7667 265.341 41.3833 270.408 38.25C275.474 35.0833 281.608 33.5 288.808 33.5C295.974 33.5 302.091 35.0833 307.158 38.25C312.258 41.3833 316.141 45.7667 318.808 51.4C321.474 57.0333 322.808 63.5667 322.808 71C322.808 78.4333 321.474 84.9667 318.808 90.6C316.141 96.2333 312.258 100.633 307.158 103.8C302.091 106.933 295.974 108.5 288.808 108.5ZM288.808 98.55C293.908 98.6167 298.141 97.5 301.508 95.2C304.908 92.8667 307.458 89.6333 309.158 85.5C310.858 81.3333 311.708 76.5 311.708 71C311.708 65.5 310.858 60.7 309.158 56.6C307.458 52.4667 304.908 49.25 301.508 46.95C298.141 44.65 293.908 43.4833 288.808 43.45C283.708 43.3833 279.458 44.5 276.058 46.8C272.691 49.1 270.158 52.3333 268.458 56.5C266.758 60.6667 265.891 65.5 265.858 71C265.824 76.5 266.658 81.3167 268.358 85.45C270.058 89.55 272.608 92.75 276.008 95.05C279.441 97.35 283.708 98.5167 288.808 98.55ZM332.781 107V35H343.381L378.831 88.5V35H389.431V107H378.831L343.381 53.45V107H332.781Z" fill="#DB5555"/>
<path d="M12.2192 110V38H22.6692V100.15H55.2692V110H12.2192ZM63.7583 110V38H109.758V47.85H74.2083V68.05H103.758V77.9H74.2083V100.15H109.758V110H63.7583ZM121.766 110V38H132.366L167.816 91.5V38H178.416V110H167.816L132.366 56.45V110H121.766ZM192.372 110V38H202.972L238.422 91.5V38H249.022V110H238.422L202.972 56.45V110H192.372ZM293.027 111.5C285.827 111.5 279.694 109.933 274.627 106.8C269.56 103.633 265.677 99.2333 262.977 93.6C260.31 87.9667 258.977 81.4333 258.977 74C258.977 66.5667 260.31 60.0333 262.977 54.4C265.677 48.7667 269.56 44.3833 274.627 41.25C279.694 38.0833 285.827 36.5 293.027 36.5C300.194 36.5 306.31 38.0833 311.377 41.25C316.477 44.3833 320.36 48.7667 323.027 54.4C325.694 60.0333 327.027 66.5667 327.027 74C327.027 81.4333 325.694 87.9667 323.027 93.6C320.36 99.2333 316.477 103.633 311.377 106.8C306.31 109.933 300.194 111.5 293.027 111.5ZM293.027 101.55C298.127 101.617 302.36 100.5 305.727 98.2C309.127 95.8667 311.677 92.6333 313.377 88.5C315.077 84.3333 315.927 79.5 315.927 74C315.927 68.5 315.077 63.7 313.377 59.6C311.677 55.4667 309.127 52.25 305.727 49.95C302.36 47.65 298.127 46.4833 293.027 46.45C287.927 46.3833 283.677 47.5 280.277 49.8C276.91 52.1 274.377 55.3333 272.677 59.5C270.977 63.6667 270.11 68.5 270.077 74C270.044 79.5 270.877 84.3167 272.577 88.45C274.277 92.55 276.827 95.75 280.227 98.05C283.66 100.35 287.927 101.517 293.027 101.55ZM337 110V38H347.6L383.05 91.5V38H393.65V110H383.05L347.6 56.45V110H337Z" fill="#E3935B"/>
<path d="M16.4385 114V42H26.8885V104.15H59.4885V114H16.4385ZM67.9775 114V42H113.978V51.85H78.4275V72.05H107.978V81.9H78.4275V104.15H113.978V114H67.9775ZM125.985 114V42H136.585L172.035 95.5V42H182.635V114H172.035L136.585 60.45V114H125.985ZM196.591 114V42H207.191L242.641 95.5V42H253.241V114H242.641L207.191 60.45V114H196.591ZM297.246 115.5C290.046 115.5 283.913 113.933 278.846 110.8C273.78 107.633 269.896 103.233 267.196 97.6C264.53 91.9667 263.196 85.4333 263.196 78C263.196 70.5667 264.53 64.0333 267.196 58.4C269.896 52.7667 273.78 48.3833 278.846 45.25C283.913 42.0833 290.046 40.5 297.246 40.5C304.413 40.5 310.53 42.0833 315.596 45.25C320.696 48.3833 324.58 52.7667 327.246 58.4C329.913 64.0333 331.246 70.5667 331.246 78C331.246 85.4333 329.913 91.9667 327.246 97.6C324.58 103.233 320.696 107.633 315.596 110.8C310.53 113.933 304.413 115.5 297.246 115.5ZM297.246 105.55C302.346 105.617 306.58 104.5 309.946 102.2C313.346 99.8667 315.896 96.6333 317.596 92.5C319.296 88.3333 320.146 83.5 320.146 78C320.146 72.5 319.296 67.7 317.596 63.6C315.896 59.4667 313.346 56.25 309.946 53.95C306.58 51.65 302.346 50.4833 297.246 50.45C292.146 50.3833 287.896 51.5 284.496 53.8C281.13 56.1 278.596 59.3333 276.896 63.5C275.196 67.6667 274.33 72.5 274.296 78C274.263 83.5 275.096 88.3167 276.796 92.45C278.496 96.55 281.046 99.75 284.446 102.05C287.88 104.35 292.146 105.517 297.246 105.55ZM341.22 114V42H351.82L387.27 95.5V42H397.87V114H387.27L351.82 60.45V114H341.22Z" fill="#AAD055"/>
<path d="M20.6577 117V45H31.1077V107.15H63.7077V117H20.6577ZM72.1968 117V45H118.197V54.85H82.6468V75.05H112.197V84.9H82.6468V107.15H118.197V117H72.1968ZM130.205 117V45H140.805L176.255 98.5V45H186.855V117H176.255L140.805 63.45V117H130.205ZM200.81 117V45H211.41L246.86 98.5V45H257.46V117H246.86L211.41 63.45V117H200.81ZM301.466 118.5C294.266 118.5 288.132 116.933 283.066 113.8C277.999 110.633 274.116 106.233 271.416 100.6C268.749 94.9667 267.416 88.4333 267.416 81C267.416 73.5667 268.749 67.0333 271.416 61.4C274.116 55.7667 277.999 51.3833 283.066 48.25C288.132 45.0833 294.266 43.5 301.466 43.5C308.632 43.5 314.749 45.0833 319.816 48.25C324.916 51.3833 328.799 55.7667 331.466 61.4C334.132 67.0333 335.466 73.5667 335.466 81C335.466 88.4333 334.132 94.9667 331.466 100.6C328.799 106.233 324.916 110.633 319.816 113.8C314.749 116.933 308.632 118.5 301.466 118.5ZM301.466 108.55C306.566 108.617 310.799 107.5 314.166 105.2C317.566 102.867 320.116 99.6333 321.816 95.5C323.516 91.3333 324.366 86.5 324.366 81C324.366 75.5 323.516 70.7 321.816 66.6C320.116 62.4667 317.566 59.25 314.166 56.95C310.799 54.65 306.566 53.4833 301.466 53.45C296.366 53.3833 292.116 54.5 288.716 56.8C285.349 59.1 282.816 62.3333 281.116 66.5C279.416 70.6667 278.549 75.5 278.516 81C278.482 86.5 279.316 91.3167 281.016 95.45C282.716 99.55 285.266 102.75 288.666 105.05C292.099 107.35 296.366 108.517 301.466 108.55ZM345.439 117V45H356.039L391.489 98.5V45H402.089V117H391.489L356.039 63.45V117H345.439Z" fill="#FFC860"/>
<path d="M24.877 120V48H35.327V110.15H67.927V120H24.877ZM76.416 120V48H122.416V57.85H86.866V78.05H116.416V87.9H86.866V110.15H122.416V120H76.416ZM134.424 120V48H145.024L180.474 101.5V48H191.074V120H180.474L145.024 66.45V120H134.424ZM205.029 120V48H215.629L251.079 101.5V48H261.679V120H251.079L215.629 66.45V120H205.029ZM305.685 121.5C298.485 121.5 292.351 119.933 287.285 116.8C282.218 113.633 278.335 109.233 275.635 103.6C272.968 97.9667 271.635 91.4333 271.635 84C271.635 76.5667 272.968 70.0333 275.635 64.4C278.335 58.7667 282.218 54.3833 287.285 51.25C292.351 48.0833 298.485 46.5 305.685 46.5C312.851 46.5 318.968 48.0833 324.035 51.25C329.135 54.3833 333.018 58.7667 335.685 64.4C338.351 70.0333 339.685 76.5667 339.685 84C339.685 91.4333 338.351 97.9667 335.685 103.6C333.018 109.233 329.135 113.633 324.035 116.8C318.968 119.933 312.851 121.5 305.685 121.5ZM305.685 111.55C310.785 111.617 315.018 110.5 318.385 108.2C321.785 105.867 324.335 102.633 326.035 98.5C327.735 94.3333 328.585 89.5 328.585 84C328.585 78.5 327.735 73.7 326.035 69.6C324.335 65.4667 321.785 62.25 318.385 59.95C315.018 57.65 310.785 56.4833 305.685 56.45C300.585 56.3833 296.335 57.5 292.935 59.8C289.568 62.1 287.035 65.3333 285.335 69.5C283.635 73.6667 282.768 78.5 282.735 84C282.701 89.5 283.535 94.3167 285.235 98.45C286.935 102.55 289.485 105.75 292.885 108.05C296.318 110.35 300.585 111.517 305.685 111.55ZM349.658 120V48H360.258L395.708 101.5V48H406.308V120H395.708L360.258 66.45V120H349.658Z" fill="#4FD1D9"/>
<path d="M29.0962 123V51H39.5462V113.15H72.1462V123H29.0962ZM80.6353 123V51H126.635V60.85H91.0853V81.05H120.635V90.9H91.0853V113.15H126.635V123H80.6353ZM138.643 123V51H149.243L184.693 104.5V51H195.293V123H184.693L149.243 69.45V123H138.643ZM209.249 123V51H219.849L255.299 104.5V51H265.899V123H255.299L219.849 69.45V123H209.249ZM309.904 124.5C302.704 124.5 296.571 122.933 291.504 119.8C286.437 116.633 282.554 112.233 279.854 106.6C277.187 100.967 275.854 94.4333 275.854 87C275.854 79.5667 277.187 73.0333 279.854 67.4C282.554 61.7667 286.437 57.3833 291.504 54.25C296.571 51.0833 302.704 49.5 309.904 49.5C317.071 49.5 323.187 51.0833 328.254 54.25C333.354 57.3833 337.237 61.7667 339.904 67.4C342.571 73.0333 343.904 79.5667 343.904 87C343.904 94.4333 342.571 100.967 339.904 106.6C337.237 112.233 333.354 116.633 328.254 119.8C323.187 122.933 317.071 124.5 309.904 124.5ZM309.904 114.55C315.004 114.617 319.237 113.5 322.604 111.2C326.004 108.867 328.554 105.633 330.254 101.5C331.954 97.3333 332.804 92.5 332.804 87C332.804 81.5 331.954 76.7 330.254 72.6C328.554 68.4667 326.004 65.25 322.604 62.95C319.237 60.65 315.004 59.4833 309.904 59.45C304.804 59.3833 300.554 60.5 297.154 62.8C293.787 65.1 291.254 68.3333 289.554 72.5C287.854 76.6667 286.987 81.5 286.954 87C286.921 92.5 287.754 97.3167 289.454 101.45C291.154 105.55 293.704 108.75 297.104 111.05C300.537 113.35 304.804 114.517 309.904 114.55ZM353.877 123V51H364.477L399.927 104.5V51H410.527V123H399.927L364.477 69.45V123H353.877Z" fill="#5F8AFA"/>
<path d="M99.25 209L78.35 137H89.3L104.45 191.45L119.6 137.05L130.6 137L145.75 191.45L160.9 137H171.9L150.95 209H140.55L125.1 155.15L109.65 209H99.25ZM168.258 209L191.658 137H206.708L230.108 209H219.258L197.708 143.3H200.408L179.108 209H168.258ZM180.408 192.75V182.95H218.008V192.75H180.408ZM240.078 209V137H250.528V199.15H283.128V209H240.078ZM292.617 209V137H303.067V199.15H335.667V209H292.617Z" fill="#DB5555"/>
<path d="M103.648 212L82.748 140H93.698L108.848 194.45L123.998 140.05L134.998 140L150.148 194.45L165.298 140H176.298L155.348 212H144.948L129.498 158.15L114.048 212H103.648ZM172.656 212L196.056 140H211.106L234.506 212H223.656L202.106 146.3H204.806L183.506 212H172.656ZM184.806 195.75V185.95H222.406V195.75H184.806ZM244.476 212V140H254.926V202.15H287.526V212H244.476ZM297.015 212V140H307.465V202.15H340.065V212H297.015Z" fill="#E3935B"/>
<path d="M108.046 216L87.1459 144H98.0959L113.246 198.45L128.396 144.05L139.396 144L154.546 198.45L169.696 144H180.696L159.746 216H149.346L133.896 162.15L118.446 216H108.046ZM177.054 216L200.454 144H215.504L238.904 216H228.054L206.504 150.3H209.204L187.904 216H177.054ZM189.204 199.75V189.95H226.804V199.75H189.204ZM248.874 216V144H259.324V206.15H291.924V216H248.874ZM301.413 216V144H311.863V206.15H344.463V216H301.413Z" fill="#AAD055"/>
<path d="M112.444 219L91.5439 147H102.494L117.644 201.45L132.794 147.05L143.794 147L158.944 201.45L174.094 147H185.094L164.144 219H153.744L138.294 165.15L122.844 219H112.444ZM181.452 219L204.852 147H219.902L243.302 219H232.452L210.902 153.3H213.602L192.302 219H181.452ZM193.602 202.75V192.95H231.202V202.75H193.602ZM253.272 219V147H263.722V209.15H296.322V219H253.272ZM305.811 219V147H316.261V209.15H348.861V219H305.811Z" fill="#FFC860"/>
<path d="M116.842 222L95.9418 150H106.892L122.042 204.45L137.192 150.05L148.192 150L163.342 204.45L178.492 150H189.492L168.542 222H158.142L142.692 168.15L127.242 222H116.842ZM185.85 222L209.25 150H224.3L247.7 222H236.85L215.3 156.3H218L196.7 222H185.85ZM198 205.75V195.95H235.6V205.75H198ZM257.67 222V150H268.12V212.15H300.72V222H257.67ZM310.209 222V150H320.659V212.15H353.259V222H310.209Z" fill="#4FD1D9"/>
<path d="M121.24 225L100.34 153H111.29L126.44 207.45L141.59 153.05L152.59 153L167.74 207.45L182.89 153H193.89L172.94 225H162.54L147.09 171.15L131.64 225H121.24ZM190.248 225L213.648 153H228.698L252.098 225H241.248L219.698 159.3H222.398L201.098 225H190.248ZM202.398 208.75V198.95H239.998V208.75H202.398ZM262.068 225V153H272.518V215.15H305.118V225H262.068ZM314.607 225V153H325.057V215.15H357.657V225H314.607Z" fill="#5F8AFA"/>
</svg>
</>}

          </> : <>
          <svg width="530" height="210" viewBox="0 0 508 250" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M8 107V35H18.45V97.15H51.05V107H8ZM59.5391 107V35H105.539V44.85H69.9891V65.05H99.5391V74.9H69.9891V97.15H105.539V107H59.5391ZM117.547 107V35H128.147L163.597 88.5V35H174.197V107H163.597L128.147 53.45V107H117.547ZM188.152 107V35H198.752L234.202 88.5V35H244.802V107H234.202L198.752 53.45V107H188.152ZM288.808 108.5C281.608 108.5 275.474 106.933 270.408 103.8C265.341 100.633 261.458 96.2333 258.758 90.6C256.091 84.9667 254.758 78.4333 254.758 71C254.758 63.5667 256.091 57.0333 258.758 51.4C261.458 45.7667 265.341 41.3833 270.408 38.25C275.474 35.0833 281.608 33.5 288.808 33.5C295.974 33.5 302.091 35.0833 307.158 38.25C312.258 41.3833 316.141 45.7667 318.808 51.4C321.474 57.0333 322.808 63.5667 322.808 71C322.808 78.4333 321.474 84.9667 318.808 90.6C316.141 96.2333 312.258 100.633 307.158 103.8C302.091 106.933 295.974 108.5 288.808 108.5ZM288.808 98.55C293.908 98.6167 298.141 97.5 301.508 95.2C304.908 92.8667 307.458 89.6333 309.158 85.5C310.858 81.3333 311.708 76.5 311.708 71C311.708 65.5 310.858 60.7 309.158 56.6C307.458 52.4667 304.908 49.25 301.508 46.95C298.141 44.65 293.908 43.4833 288.808 43.45C283.708 43.3833 279.458 44.5 276.058 46.8C272.691 49.1 270.158 52.3333 268.458 56.5C266.758 60.6667 265.891 65.5 265.858 71C265.824 76.5 266.658 81.3167 268.358 85.45C270.058 89.55 272.608 92.75 276.008 95.05C279.441 97.35 283.708 98.5167 288.808 98.55ZM332.781 107V35H343.381L378.831 88.5V35H389.431V107H378.831L343.381 53.45V107H332.781Z" fill="#DB5555"/>
<path d="M12.2192 110V38H22.6692V100.15H55.2692V110H12.2192ZM63.7583 110V38H109.758V47.85H74.2083V68.05H103.758V77.9H74.2083V100.15H109.758V110H63.7583ZM121.766 110V38H132.366L167.816 91.5V38H178.416V110H167.816L132.366 56.45V110H121.766ZM192.372 110V38H202.972L238.422 91.5V38H249.022V110H238.422L202.972 56.45V110H192.372ZM293.027 111.5C285.827 111.5 279.694 109.933 274.627 106.8C269.56 103.633 265.677 99.2333 262.977 93.6C260.31 87.9667 258.977 81.4333 258.977 74C258.977 66.5667 260.31 60.0333 262.977 54.4C265.677 48.7667 269.56 44.3833 274.627 41.25C279.694 38.0833 285.827 36.5 293.027 36.5C300.194 36.5 306.31 38.0833 311.377 41.25C316.477 44.3833 320.36 48.7667 323.027 54.4C325.694 60.0333 327.027 66.5667 327.027 74C327.027 81.4333 325.694 87.9667 323.027 93.6C320.36 99.2333 316.477 103.633 311.377 106.8C306.31 109.933 300.194 111.5 293.027 111.5ZM293.027 101.55C298.127 101.617 302.36 100.5 305.727 98.2C309.127 95.8667 311.677 92.6333 313.377 88.5C315.077 84.3333 315.927 79.5 315.927 74C315.927 68.5 315.077 63.7 313.377 59.6C311.677 55.4667 309.127 52.25 305.727 49.95C302.36 47.65 298.127 46.4833 293.027 46.45C287.927 46.3833 283.677 47.5 280.277 49.8C276.91 52.1 274.377 55.3333 272.677 59.5C270.977 63.6667 270.11 68.5 270.077 74C270.044 79.5 270.877 84.3167 272.577 88.45C274.277 92.55 276.827 95.75 280.227 98.05C283.66 100.35 287.927 101.517 293.027 101.55ZM337 110V38H347.6L383.05 91.5V38H393.65V110H383.05L347.6 56.45V110H337Z" fill="#E3935B"/>
<path d="M16.4385 114V42H26.8885V104.15H59.4885V114H16.4385ZM67.9775 114V42H113.978V51.85H78.4275V72.05H107.978V81.9H78.4275V104.15H113.978V114H67.9775ZM125.985 114V42H136.585L172.035 95.5V42H182.635V114H172.035L136.585 60.45V114H125.985ZM196.591 114V42H207.191L242.641 95.5V42H253.241V114H242.641L207.191 60.45V114H196.591ZM297.246 115.5C290.046 115.5 283.913 113.933 278.846 110.8C273.78 107.633 269.896 103.233 267.196 97.6C264.53 91.9667 263.196 85.4333 263.196 78C263.196 70.5667 264.53 64.0333 267.196 58.4C269.896 52.7667 273.78 48.3833 278.846 45.25C283.913 42.0833 290.046 40.5 297.246 40.5C304.413 40.5 310.53 42.0833 315.596 45.25C320.696 48.3833 324.58 52.7667 327.246 58.4C329.913 64.0333 331.246 70.5667 331.246 78C331.246 85.4333 329.913 91.9667 327.246 97.6C324.58 103.233 320.696 107.633 315.596 110.8C310.53 113.933 304.413 115.5 297.246 115.5ZM297.246 105.55C302.346 105.617 306.58 104.5 309.946 102.2C313.346 99.8667 315.896 96.6333 317.596 92.5C319.296 88.3333 320.146 83.5 320.146 78C320.146 72.5 319.296 67.7 317.596 63.6C315.896 59.4667 313.346 56.25 309.946 53.95C306.58 51.65 302.346 50.4833 297.246 50.45C292.146 50.3833 287.896 51.5 284.496 53.8C281.13 56.1 278.596 59.3333 276.896 63.5C275.196 67.6667 274.33 72.5 274.296 78C274.263 83.5 275.096 88.3167 276.796 92.45C278.496 96.55 281.046 99.75 284.446 102.05C287.88 104.35 292.146 105.517 297.246 105.55ZM341.22 114V42H351.82L387.27 95.5V42H397.87V114H387.27L351.82 60.45V114H341.22Z" fill="#AAD055"/>
<path d="M20.6577 117V45H31.1077V107.15H63.7077V117H20.6577ZM72.1968 117V45H118.197V54.85H82.6468V75.05H112.197V84.9H82.6468V107.15H118.197V117H72.1968ZM130.205 117V45H140.805L176.255 98.5V45H186.855V117H176.255L140.805 63.45V117H130.205ZM200.81 117V45H211.41L246.86 98.5V45H257.46V117H246.86L211.41 63.45V117H200.81ZM301.466 118.5C294.266 118.5 288.132 116.933 283.066 113.8C277.999 110.633 274.116 106.233 271.416 100.6C268.749 94.9667 267.416 88.4333 267.416 81C267.416 73.5667 268.749 67.0333 271.416 61.4C274.116 55.7667 277.999 51.3833 283.066 48.25C288.132 45.0833 294.266 43.5 301.466 43.5C308.632 43.5 314.749 45.0833 319.816 48.25C324.916 51.3833 328.799 55.7667 331.466 61.4C334.132 67.0333 335.466 73.5667 335.466 81C335.466 88.4333 334.132 94.9667 331.466 100.6C328.799 106.233 324.916 110.633 319.816 113.8C314.749 116.933 308.632 118.5 301.466 118.5ZM301.466 108.55C306.566 108.617 310.799 107.5 314.166 105.2C317.566 102.867 320.116 99.6333 321.816 95.5C323.516 91.3333 324.366 86.5 324.366 81C324.366 75.5 323.516 70.7 321.816 66.6C320.116 62.4667 317.566 59.25 314.166 56.95C310.799 54.65 306.566 53.4833 301.466 53.45C296.366 53.3833 292.116 54.5 288.716 56.8C285.349 59.1 282.816 62.3333 281.116 66.5C279.416 70.6667 278.549 75.5 278.516 81C278.482 86.5 279.316 91.3167 281.016 95.45C282.716 99.55 285.266 102.75 288.666 105.05C292.099 107.35 296.366 108.517 301.466 108.55ZM345.439 117V45H356.039L391.489 98.5V45H402.089V117H391.489L356.039 63.45V117H345.439Z" fill="#FFC860"/>
<path d="M24.877 120V48H35.327V110.15H67.927V120H24.877ZM76.416 120V48H122.416V57.85H86.866V78.05H116.416V87.9H86.866V110.15H122.416V120H76.416ZM134.424 120V48H145.024L180.474 101.5V48H191.074V120H180.474L145.024 66.45V120H134.424ZM205.029 120V48H215.629L251.079 101.5V48H261.679V120H251.079L215.629 66.45V120H205.029ZM305.685 121.5C298.485 121.5 292.351 119.933 287.285 116.8C282.218 113.633 278.335 109.233 275.635 103.6C272.968 97.9667 271.635 91.4333 271.635 84C271.635 76.5667 272.968 70.0333 275.635 64.4C278.335 58.7667 282.218 54.3833 287.285 51.25C292.351 48.0833 298.485 46.5 305.685 46.5C312.851 46.5 318.968 48.0833 324.035 51.25C329.135 54.3833 333.018 58.7667 335.685 64.4C338.351 70.0333 339.685 76.5667 339.685 84C339.685 91.4333 338.351 97.9667 335.685 103.6C333.018 109.233 329.135 113.633 324.035 116.8C318.968 119.933 312.851 121.5 305.685 121.5ZM305.685 111.55C310.785 111.617 315.018 110.5 318.385 108.2C321.785 105.867 324.335 102.633 326.035 98.5C327.735 94.3333 328.585 89.5 328.585 84C328.585 78.5 327.735 73.7 326.035 69.6C324.335 65.4667 321.785 62.25 318.385 59.95C315.018 57.65 310.785 56.4833 305.685 56.45C300.585 56.3833 296.335 57.5 292.935 59.8C289.568 62.1 287.035 65.3333 285.335 69.5C283.635 73.6667 282.768 78.5 282.735 84C282.701 89.5 283.535 94.3167 285.235 98.45C286.935 102.55 289.485 105.75 292.885 108.05C296.318 110.35 300.585 111.517 305.685 111.55ZM349.658 120V48H360.258L395.708 101.5V48H406.308V120H395.708L360.258 66.45V120H349.658Z" fill="#4FD1D9"/>
<path d="M29.0962 123V51H39.5462V113.15H72.1462V123H29.0962ZM80.6353 123V51H126.635V60.85H91.0853V81.05H120.635V90.9H91.0853V113.15H126.635V123H80.6353ZM138.643 123V51H149.243L184.693 104.5V51H195.293V123H184.693L149.243 69.45V123H138.643ZM209.249 123V51H219.849L255.299 104.5V51H265.899V123H255.299L219.849 69.45V123H209.249ZM309.904 124.5C302.704 124.5 296.571 122.933 291.504 119.8C286.437 116.633 282.554 112.233 279.854 106.6C277.187 100.967 275.854 94.4333 275.854 87C275.854 79.5667 277.187 73.0333 279.854 67.4C282.554 61.7667 286.437 57.3833 291.504 54.25C296.571 51.0833 302.704 49.5 309.904 49.5C317.071 49.5 323.187 51.0833 328.254 54.25C333.354 57.3833 337.237 61.7667 339.904 67.4C342.571 73.0333 343.904 79.5667 343.904 87C343.904 94.4333 342.571 100.967 339.904 106.6C337.237 112.233 333.354 116.633 328.254 119.8C323.187 122.933 317.071 124.5 309.904 124.5ZM309.904 114.55C315.004 114.617 319.237 113.5 322.604 111.2C326.004 108.867 328.554 105.633 330.254 101.5C331.954 97.3333 332.804 92.5 332.804 87C332.804 81.5 331.954 76.7 330.254 72.6C328.554 68.4667 326.004 65.25 322.604 62.95C319.237 60.65 315.004 59.4833 309.904 59.45C304.804 59.3833 300.554 60.5 297.154 62.8C293.787 65.1 291.254 68.3333 289.554 72.5C287.854 76.6667 286.987 81.5 286.954 87C286.921 92.5 287.754 97.3167 289.454 101.45C291.154 105.55 293.704 108.75 297.104 111.05C300.537 113.35 304.804 114.517 309.904 114.55ZM353.877 123V51H364.477L399.927 104.5V51H410.527V123H399.927L364.477 69.45V123H353.877Z" fill="#5F8AFA"/>
<path d="M99.25 209L78.35 137H89.3L104.45 191.45L119.6 137.05L130.6 137L145.75 191.45L160.9 137H171.9L150.95 209H140.55L125.1 155.15L109.65 209H99.25ZM168.258 209L191.658 137H206.708L230.108 209H219.258L197.708 143.3H200.408L179.108 209H168.258ZM180.408 192.75V182.95H218.008V192.75H180.408ZM240.078 209V137H250.528V199.15H283.128V209H240.078ZM292.617 209V137H303.067V199.15H335.667V209H292.617Z" fill="#DB5555"/>
<path d="M103.648 212L82.748 140H93.698L108.848 194.45L123.998 140.05L134.998 140L150.148 194.45L165.298 140H176.298L155.348 212H144.948L129.498 158.15L114.048 212H103.648ZM172.656 212L196.056 140H211.106L234.506 212H223.656L202.106 146.3H204.806L183.506 212H172.656ZM184.806 195.75V185.95H222.406V195.75H184.806ZM244.476 212V140H254.926V202.15H287.526V212H244.476ZM297.015 212V140H307.465V202.15H340.065V212H297.015Z" fill="#E3935B"/>
<path d="M108.046 216L87.1459 144H98.0959L113.246 198.45L128.396 144.05L139.396 144L154.546 198.45L169.696 144H180.696L159.746 216H149.346L133.896 162.15L118.446 216H108.046ZM177.054 216L200.454 144H215.504L238.904 216H228.054L206.504 150.3H209.204L187.904 216H177.054ZM189.204 199.75V189.95H226.804V199.75H189.204ZM248.874 216V144H259.324V206.15H291.924V216H248.874ZM301.413 216V144H311.863V206.15H344.463V216H301.413Z" fill="#AAD055"/>
<path d="M112.444 219L91.5439 147H102.494L117.644 201.45L132.794 147.05L143.794 147L158.944 201.45L174.094 147H185.094L164.144 219H153.744L138.294 165.15L122.844 219H112.444ZM181.452 219L204.852 147H219.902L243.302 219H232.452L210.902 153.3H213.602L192.302 219H181.452ZM193.602 202.75V192.95H231.202V202.75H193.602ZM253.272 219V147H263.722V209.15H296.322V219H253.272ZM305.811 219V147H316.261V209.15H348.861V219H305.811Z" fill="#FFC860"/>
<path d="M116.842 222L95.9418 150H106.892L122.042 204.45L137.192 150.05L148.192 150L163.342 204.45L178.492 150H189.492L168.542 222H158.142L142.692 168.15L127.242 222H116.842ZM185.85 222L209.25 150H224.3L247.7 222H236.85L215.3 156.3H218L196.7 222H185.85ZM198 205.75V195.95H235.6V205.75H198ZM257.67 222V150H268.12V212.15H300.72V222H257.67ZM310.209 222V150H320.659V212.15H353.259V222H310.209Z" fill="#4FD1D9"/>
<path d="M121.24 225L100.34 153H111.29L126.44 207.45L141.59 153.05L152.59 153L167.74 207.45L182.89 153H193.89L172.94 225H162.54L147.09 171.15L131.64 225H121.24ZM190.248 225L213.648 153H228.698L252.098 225H241.248L219.698 159.3H222.398L201.098 225H190.248ZM202.398 208.75V198.95H239.998V208.75H202.398ZM262.068 225V153H272.518V215.15H305.118V225H262.068ZM314.607 225V153H325.057V215.15H357.657V225H314.607Z" fill="#5F8AFA"/>
</svg>

          </>
        }</>
      }
    </div>
  )
}

export default MainLogo
'''
'''--- frontend/src/assets/Spinner.js ---
import React from 'react'
import "./spinner.scss";
function Spinner() {
  return (
    <svg class="pl" viewBox="0 0 64 64" width="30px" height="20px" xmlns="http://www.w3.org/2000/svg">
	<defs>
		<linearGradient id="grad" x1="0" y1="0" x2="0" y2="1">
			<stop offset="0%" stop-color="#000" />
			<stop offset="100%" stop-color="#fff" />
		</linearGradient>
		<mask id="grad-mask">
			<rect x="0" y="0" width="64" height="64" fill="url(#grad)" />
		</mask>
	</defs>
	<circle class="pl__ring" cx="32" cy="32" r="26" fill="none" stroke="hsl(223,90%,55%)" stroke-width="12" stroke-dasharray="169.65 169.65" stroke-dashoffset="-127.24" strokeLinecap="round" transform="rotate(135)" />
	<g fill="hsl(223,90%,55%)">
		<circle class="pl__ball1" cx="32" cy="45" r="6" transform="rotate(14)" />
		<circle class="pl__ball2" cx="32" cy="48" r="3" transform="rotate(-21)" />
	</g>
	<g mask="url(#grad-mask)">
		<circle class="pl__ring" cx="32" cy="32" r="26" fill="none" stroke="hsl(283,90%,55%)" stroke-width="12" stroke-dasharray="169.65 169.65" stroke-dashoffset="-127.24" strokeLinecap="round" transform="rotate(135)" />
		<g fill="hsl(283,90%,55%)">
			<circle class="pl__ball1" cx="32" cy="45" r="6" transform="rotate(14)" />
			<circle class="pl__ball2" cx="32" cy="48" r="3" transform="rotate(-21)" />
		</g>
	</g>
</svg>
  )
}

export default Spinner
'''
'''--- frontend/src/assets/UserIcon.js ---
import React from 'react'

function UserIcon(props) {
  return (
    <svg width="1.2rem" height="1.2rem" viewBox="0 0 35 35" fill="none" xmlns="http://www.w3.org/2000/svg" style={props.style}>
    <path d="M23.3332 8.75005C23.3332 7.20296 22.7186 5.71922 21.6246 4.62526C20.5306 3.53129 19.047 2.91672 17.4999 2.91672C15.9528 2.91672 14.4692 3.53129 13.3752 4.62526C12.2812 5.71922 11.6666 7.20296 11.6666 8.75005V11.6667C11.6666 13.2138 12.2812 14.6976 13.3752 15.7915C14.4692 16.8855 15.9528 17.5001 17.4999 17.5001C19.047 17.5001 20.5306 16.8855 21.6246 15.7915C22.7186 14.6976 23.3332 13.2138 23.3332 11.6667V8.75005Z" stroke="#A463B0" strokeWidth="3.5" strokeMiterlimit={"10"}/>
    <path d="M4.375 32.0833C6.59167 26.075 11.6667 21.875 17.5 21.875C23.3333 21.875 28.4083 26.075 30.625 32.0833" stroke="#A463B0" strokeWidth={"3.5"} strokeMiterlimit="10"/>
    </svg>
    
  )
}

export default UserIcon
'''
'''--- frontend/src/bot/pythonPIXELTOIMG.py ---
# create an API that from pixel data in Hexadecimal creates an 50 by 50 image 

''' 
the request comes in
{
    "pixels": [
        '#bfbfbf',
        '#bfbfbf',
        '#bfbfbf',
        '#bfbfbf',
        ...
    ]
}

'''
from flask import Flask, request, jsonify
from PIL import Image
import io
import base64
import numpy as np

app = Flask(__name__)

@app.route('/api/pixeltoimg', methods=['POST'])
def hex_to_img():
    # get the data from the request
    data = request.get_json()
    pixels = data['pixels']

    # create a new image
    img = Image.new('RGB', (50, 50), color = 'black')
    pixels = [tuple(int(p.lstrip('#')[i:i+2], 16) for i in (0, 2, 4)) for p in pixels]
    img.putdata(pixels)
    img.save('img.png')

    # convert the image to base64
    buffered = io.BytesIO()
    img.save(buffered, format="PNG")
    img_str = base64.b64encode(buffered.getvalue())

    # return the base64 image
    return jsonify({'img': img_str.decode('utf-8')})

if __name__ == '__main__':
    app.run(debug=True)

'''
'''--- frontend/src/bot/test.js ---
const fetch = require('node-fetch');
const nearAPI = require('near-api-js');

const NearConfig = {
  networkId: "testnet",
  nodeUrl: "https://rpc.testnet.near.org",
  contractName: "dev-1663075021424-18509228924130",
  walletUrl: "https://wallet.testnet.near.org",
};
const MainNearConfig = {
  networkId: "mainnet",
  nodeUrl: "https://rpc.mainnet.near.org",
  contractName: "lennonwall.near",
  walletUrl: "https://wallet.near.org",
};

  
const decodeLine = (line) => {
    // console.log("line", line);
    let buf = Buffer.from(line, "base64");
    if (buf.length !== ExpectedLineLength) {
        throw new Error("Unexpected encoded line length");
    }
    let pixels = [];
    for (let i = 4; i < buf.length; i += 8) {
        let color = buf.readUInt32LE(i);
        let ownerIndex = buf.readUInt32LE(i + 4);
        pixels.push({
            color,
            ownerIndex,
        });
    }
    return pixels;
};

const BoardHeight = 50;
const NumLinesPerFetch = 50;
const ExpectedLineLength = 4 + 8 * BoardHeight;

async function main() {
    const { keyStores, KeyPair } = nearAPI;
const myKeyStore = new keyStores.InMemoryKeyStore();
const PRIVATE_KEY =
  "2wP7f68M69b9Lr2a14ziFxNJtsyEsiXwQYSsAj78ZJXZAv3sK2R6gpgH8Miga2JnkE2UDPETFYkcUBnREPXHF89n";
// creates a public / private key pair using the provided private key
const keyPair = KeyPair.fromString(PRIVATE_KEY);
// adds the keyPair you created to keyStore
await myKeyStore.setKey("testnet", "polpedu.testnet", keyPair);

const { connect } = nearAPI;

const connectionConfig = {
  networkId: "testnet",
  keyStore: myKeyStore, // first create a key store 
  nodeUrl: "https://rpc.testnet.near.org",
  walletUrl: "https://wallet.testnet.near.org",
  helperUrl: "https://helper.testnet.near.org",
  explorerUrl: "https://explorer.testnet.near.org",
};
const nearConnection = await connect(connectionConfig);

const _account = await nearConnection.account("polpedu.testnet");

      let lines = []
      let needLines = [];
    for (let i = 0; i < BoardHeight; ++i) {
        needLines.push(i);
    }
    let requestLines = [];
    for (let i = 0; i < needLines.length; i += NumLinesPerFetch) {
      requestLines.push(needLines.slice(i, i + NumLinesPerFetch));
    }
    const contract = new nearAPI.Contract(
        _account,
        NearConfig.contractName,
        {
          viewMethods: [
            "get_account",
            "get_account_by_index",
            "get_lines",
            "get_line_versions",
            "get_pixel_cost",
            "get_account_balance",
            "get_account_num_pixels",
            "get_account_id_by_index",
            "get_event_finish",
          ],
          changeMethods: ["draw", "buy_tokens", "select_farming_preference"],
        }
      );
  
      let results =  await Promise.all(
        requestLines.map((lines) => contract.get_lines({ lines }))
      ); 
      results = results.flat();
      requestLines = requestLines.flat();
      for (let i = 0; i < requestLines.length; ++i) {
        let lineIndex = requestLines[i];
        let line = decodeLine(results[i]);
        lines[lineIndex] = line;
        // console.log("line", lines);
      }

      renderCanvas(lines);

}

const intToColor = (c) => `#${c.toString(16).padStart(6, "0")}`;

function renderCanvas(lines) {
    let finallines = [];
    if (!lines) {
      return;
    }

    for (let i = 0; i < BoardHeight; ++i) {
      const line = lines[i];
      if (!line) {
        continue;
      }
      for (let j = 0; j < BoardHeight; ++j) {
        const p = line[j];
        const colorfill= intToColor(p.color);
        finallines.push(colorfill);
      }
    }
    console.log({pixels: finallines});

    
    //send a POST request to  http://127.0.0.1:5000/ with the finallines array as the body
    fetch(' http://127.0.0.1:5000/api/pixeltoimg', {
        method: 'POST',
        body: JSON.stringify({pixels: finallines}),
        headers: { 'Content-Type': 'application/json' },
    }).then(res => res.json())
    .then(json => console.log(json));

  }

main()
'''
'''--- frontend/src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';

ReactDOM.render(<App />, document.getElementById('root'));

'''
'''--- frontend/src/util/utils.js ---
export const intToColor = (c) => `#${c.toString(16).padStart(6, "0")}`;
export const intToColorWithAlpha = (c, a) =>
    `#${c.toString(16).padStart(6, "0")}${Math.round(255 * a)
        .toString(16)
        .padStart(2, "0")}`;

export const rgbaToInt = (cr, cg, cb, ca, bgColor) => {
    const bb = bgColor & 255;
    const bg = (bgColor >> 8) & 255;
    const br = (bgColor >> 16) & 255;

    const r = Math.round(cr * ca + br * (1 - ca));
    const g = Math.round(cg * ca + bg * (1 - ca));
    const b = Math.round(cb * ca + bb * (1 - ca));
    return (r << 16) + (g << 8) + b;
};

export const imgColorToInt = (c, bgColor) => {
    const cr = c & 255;
    const cg = (c >> 8) & 255;
    const cb = (c >> 16) & 255;
    const ca = ((c >> 24) & 255) / 255;
    return rgbaToInt(cr, cg, cb, ca, bgColor);
};

export const int2hsv = (cInt) => {
    cInt = intToColor(cInt).substr(1);
    const r = parseInt(cInt.substr(0, 2), 16) / 255;
    const g = parseInt(cInt.substr(2, 2), 16) / 255;
    const b = parseInt(cInt.substr(4, 2), 16) / 255;
    let v = Math.max(r, g, b),
        c = v - Math.min(r, g, b);
    let h =
        c && (v === r ? (g - b) / c : v === g ? 2 + (b - r) / c : 4 + (r - g) / c);
    return [60 * (h < 0 ? h + 6 : h), v && c / v, v];
};
export const transparentColor = (c, a) =>
    `rgba(${c >> 16}, ${(c >> 8) & 0xff}, ${c & 0xff}, ${a})`;
    export const generateGamma = (hue) => {
    const gammaColors = [];
    for (let i = 0; i < MaxNumColors; ++i) {
        gammaColors.push(`hsl(${hue}, 100%, ${(100 * i) / (MaxNumColors - 1)}%)`);
    }
    return gammaColors;
};
export const decodeLine = (line) => {
    let buf = Buffer.from(line, "base64");
    if (buf.length !== ExpectedLineLength) {
        throw new Error("Unexpected encoded line length");
    }
    let pixels = [];
    for (let i = 4; i < buf.length; i += 8) {
        let color = buf.readUInt32LE(i);
        let ownerIndex = buf.readUInt32LE(i + 4);
        pixels.push({
            color,
            ownerIndex,
        });
    }
    return pixels;
};

export const BoardHeight = 50;
export const BoardWidth = 50;
export const NumLinesPerFetch = 50;
export const ExpectedLineLength = 4 + 8 * BoardWidth;
export const CellWidth = 12;
export const CellHeight = 12;
export const MaxNumColors = 31;
export const BatchOfPixels = 100;
// 500 ms
export const BatchTimeout = 500;
export const RefreshBoardTimeout = 1000; //changed from 1000
export const MaxWorkTime = 10 * 60 * 1000;
// export const OneDayMs = 24 * 60 * 60 * 1000;
'''