*GitHub Repository "liuck8080/voteer"*

'''--- .gitpod.yml ---
tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- README.md ---
Voteer
==================

This [React] app was initialized with [create-near-app]

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] ≥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/src` folder. `/src/index.html` is a great
   place to start exploring. Note that it loads in `/src/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `Voteer.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `Voteer.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account voteer.liuck.testnet --masterAccount liuck.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'Voteer.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy
Or if you want to deploy a testnet environment, run with NODE_ENV set to development:

    NODE_ENV=development yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [React]: https://reactjs.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react'],
}

'''
'''--- contract/Cargo.toml ---
[package]
name = "voteer"
version = "0.1.0"
authors = ["Liu Chuankai <liuck8080@163.com>"]
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "3.1.0"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

[workspace]
members = []

'''
'''--- contract/README.md ---
Voteer Smart Contract
==================

A [smart contract] written in [Rust] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`. You can compile it with
   the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contract/compile.js ---
// This file does two things:
//
// 1. Compile the Rust contract using cargo (see buildCmd below). This will
//    create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// Rust project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js
// --debug`. Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
// Note: see other flags in ./cargo/config. Unfortunately, you cannot set the
// `--target option` in Cargo.toml.
const buildCmd = debug
  ? 'cargo build --target wasm32-unknown-unknown'
  : 'cargo build --target wasm32-unknown-unknown --release'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder –
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require('fs').readFileSync(`${__dirname}/Cargo.toml`).toString().match(/name = "([^"]+)"/)[1]
  const outFile = `./target/wasm32-unknown-unknown/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
  sh.cp('-u',outFile,link)
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- contract/src/lib.rs ---
//! This contract implements simple election backed by storage on blockchain.
//!
//! The contract provides methods to vote options
//!
use std::collections::HashSet;
use std::vec;

use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, UnorderedSet, Vector};
use near_sdk::json_types::U128;
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{env, near_bindgen, AccountId, BorshStorageKey, PanicOnDefault};

near_sdk::setup_alloc!();

#[derive(BorshSerialize, BorshStorageKey)]
enum Prefix {
    ElectionDict,
    CandidateMap { hash: Vec<u8> }, // option => supporter set
    CandidateVec { hash: Vec<u8> },
    SupporterSet { hash: Vec<u8> }, // supporter set of an option
    UserElectionMap,
    UserElectionSet { hash: Vec<u8> },
}

impl Prefix {
    fn candicate_map(election_id: u128) -> Self {
        let mut bytes = b"CandidateMap".to_vec();
        bytes.extend(election_id.to_le_bytes());
        Prefix::CandidateMap {
            hash: env::sha256(&bytes),
        }
    }
    fn candicate_vec(election_id: u128) -> Self {
        let mut bytes = b"CandidateVec".to_vec();
        bytes.extend(election_id.to_le_bytes());
        Prefix::CandidateVec {
            hash: env::sha256(&bytes),
        }
    }

    fn supporter_set(election_id: u128, idx: usize) -> Self {
        let mut bytes = b"SupporterSet".to_vec();
        bytes.extend(election_id.to_le_bytes());
        bytes.extend(idx.to_le_bytes());
        Prefix::SupporterSet {
            hash: env::sha256(&bytes),
        }
    }

    fn user_election_set(user: &AccountId) -> Self {
        let mut bytes = b"UserElectionSet".to_vec();
        bytes.push(b'_');
        bytes.extend(user.as_bytes());
        Prefix::UserElectionSet {
            hash: env::sha256(&bytes),
        }
    }
}

/**
 * this structure only for frontend display
 */
#[derive(Serialize, Deserialize, BorshDeserialize, BorshSerialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Candidate {
    name: String,
    supported: u64, // supporter number, dynamically get from chain
}

#[derive(Serialize, Deserialize, BorshDeserialize, BorshSerialize)]
#[serde(crate = "near_sdk::serde")]
pub struct ElectionInfo {
    name: String,   // election name
    id: U128,       // election id
    multiple: bool, // whether multiple
}

///! this is an election provide several options;
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Election {
    // Option => <supporter set>
    dict: Vector<UnorderedSet<AccountId>>,
    // option list, each option's supporters account ids are stored in according dict's set
    candidates: Vector<String>,
    // the name of the election
    name: String,
    // if election support multiple selection
    multiple: bool,
}

impl Election {
    pub fn new(candidates: &Vec<String>, multiple: bool, election_id: u128, name: &str) -> Self {
        let mut res = Election {
            name: name.to_string(),
            dict: Vector::new(Prefix::candicate_map(election_id)),
            candidates: Vector::new(Prefix::candicate_vec(election_id)),
            multiple,
        };
        let mut seen = HashSet::new(); // reduce duplicates
        for candidate in candidates {
            if !seen.contains(candidate) {
                res.dict.push(&UnorderedSet::new(Prefix::supporter_set(
                    election_id,
                    res.candidates.len() as usize,
                )));
                res.candidates.push(candidate);
                seen.insert(candidate);
            }
        }
        res
    }

    pub fn vote(&mut self, options: &Vec<String>, owner_id: AccountId) -> bool {
        if !((self.multiple && options.len() >= 1) || (!self.multiple && options.len() == 1)) {
            return false;
        }

        let mut changed = false;
        for (idx, candidate) in self.candidates.iter().enumerate() {
            let mut support_set = self.dict.get(idx as u64).unwrap();
            if options.contains(&candidate) {
                //vote for
                if support_set.insert(&owner_id) {
                    self.dict.replace(idx as u64, &support_set);
                    changed = true;
                }
            } else {
                // not for, should remove
                if support_set.remove(&owner_id) {
                    self.dict.replace(idx as u64, &support_set);
                    changed = true;
                }
            }
        }
        changed
    }

    pub fn revoke_vote(&mut self, options: &Vec<String>, owner_id: AccountId) -> bool {
        let mut changed = false;
        self.candidates
            .iter()
            .enumerate()
            .filter(|item| options.iter().any(|y| item.1 == y.as_str()))
            .map(|option| option.0)
            .for_each(|idx| {
                let mut su = self.dict.get(idx as u64).unwrap();
                if su.remove(&owner_id) {
                    self.dict.replace(idx as u64, &su);
                    changed = true
                }
            });
        changed
    }

    pub fn get_candidates(&self) -> Vec<Candidate> {
        let mut ans = Vec::with_capacity(self.candidates.len() as usize);
        for (idx, option) in self.candidates.iter().enumerate() {
            ans.push(Candidate {
                name: option,
                supported: self.dict.get(idx as u64).unwrap().len(),
            });
        }
        ans
    }
}

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Voteer {
    election_count: u128,
    elections: UnorderedMap<u128, Election>,
    user_election: UnorderedMap<AccountId, Vector<u128>>,
}

#[near_bindgen]
impl Voteer {
    #[init]
    pub fn new() -> Voteer {
        Voteer {
            election_count: 0,
            elections: UnorderedMap::new(Prefix::ElectionDict),
            user_election: UnorderedMap::new(Prefix::UserElectionMap),
        }
    }

    #[payable]
    pub fn create_election(
        &mut self,
        candidates: &Vec<String>,
        multiple: bool,
        name: &String,
    ) -> U128 {
        let election_id = self.election_count;
        self.election_count += 1;
        let elect = Election::new(candidates, multiple, election_id, name);
        self.elections.insert(&election_id, &elect);
        {
            // update user's election set
            let user_id = env::signer_account_id();
            let mut election_vec = self
                .user_election
                .get(&user_id)
                .unwrap_or_else(|| Vector::new(Prefix::user_election_set(&user_id)));
            election_vec.push(&election_id);
            self.user_election.insert(&user_id, &election_vec);
        }
        election_id.into()
    }

    pub fn vote(&mut self, election_id: U128, options: &Vec<String>) {
        if let Some(mut election) = self.elections.get(&election_id.into()) {
            if election.vote(options, env::signer_account_id()) {
                self.elections.insert(&election_id.into(), &election);
            }
        }
    }

    pub fn revoke(&mut self, election_id: U128, options: &Vec<String>) {
        if let Some(mut election) = self.elections.get(&election_id.into()) {
            if election.revoke_vote(options, env::signer_account_id()) {
                self.elections.insert(&election_id.into(), &election);
            }
        }
    }

    pub fn get_candidates(&self, election_id: U128) -> Vec<Candidate> {
        if let Some(election) = self.elections.get(&election_id.into()) {
            return election.get_candidates();
        }
        vec![]
    }

    pub fn get_elections(&self, user_id: &AccountId) -> Vec<ElectionInfo> {
        if let Some(ids) = self.user_election.get(user_id) {
            let mut ans = Vec::with_capacity(ids.len() as usize);
            for id in ids.iter() {
                if let Some(elect) = self.elections.get(&id) {
                    ans.push(ElectionInfo {
                        name: elect.name,
                        id: id.into(),
                        multiple: elect.multiple,
                    });
                }
            }
            return ans;
        }
        vec![]
    }

    pub fn get_last5elections(self) -> Vec<ElectionInfo> {
        let sz = self.election_count.min(5) as usize;
        let mut ans = Vec::with_capacity(sz);
        for id in (0..self.election_count).rev() {
            if let Some(elect) = self.elections.get(&id) {
                ans.push(ElectionInfo {
                    name: elect.name,
                    id: id.into(),
                    multiple: elect.multiple,
                });
                if ans.len() == sz {
                    break;
                }
            }
        }
        return ans;
    }
}

#[cfg(test)]
mod tests;

'''
'''--- contract/src/tests.rs ---
use super::*;
use near_sdk::test_utils::VMContextBuilder;
use near_sdk::{testing_env, VMContext};
use std::convert::TryInto;
use near_sdk::MockedBlockchain;

fn get_context(is_view: bool) -> VMContext {
    VMContextBuilder::new()
        .signer_account_id("bob_near".try_into().unwrap())
        .is_view(is_view)
        .build()
}

#[test]
fn create_election_test_single() {
    let context = get_context(false);
    testing_env!(context);

    let mut contract = Voteer::new();

    let candidates = vec!["head： watch movie", "tail: play basketball", "stand: read a book"]
    .iter().map(|v|v.to_string()).collect::<Vec<_>>();
    let election_name = "to do what by flip a coin".to_string();
    let election_id = contract.create_election(&candidates, false, &election_name);
    let options = contract.get_candidates(election_id);
    assert_eq!(candidates.len(), options.len());

    for (c1, c2) in candidates.iter().zip(options.iter()) {
        assert_eq!(c1, &c2.name);
        assert_eq!(0, c2.supported);
    }

    // vote once
    contract.vote(election_id, &vec![candidates[1].to_string(),]);
    let options = contract.get_candidates(election_id);
    assert_eq!(candidates.len(), options.len());
    for (c1, c2) in candidates.iter().zip(options.iter()) {
        assert_eq!(c1, &c2.name);
        if c1 == &candidates[1].to_string() {
            assert_eq!(1, c2.supported);
        } else {
            assert_eq!(0, c2.supported);
        }
    }

    // repeat vote won't work
    contract.vote(election_id, &vec![candidates[1].to_string(),]);
    let options = contract.get_candidates(election_id);
    assert_eq!(candidates.len(), options.len());
    for (c1, c2) in candidates.iter().zip(options.iter()) {
        assert_eq!(c1, &c2.name);
        if c1 == &candidates[1].to_string()  {
            assert_eq!(1, c2.supported);
        } else {
            assert_eq!(0, c2.supported);
        }
    }
    
    // test user's election
    let elections = contract.get_elections(&"bob_near".to_string());
    assert_eq!(1, elections.len());
    assert_eq!(election_name, elections[0].name);
}
'''
'''--- package.json ---
{
  "name": "Voteer",
  "version": "0.1.0",
  "license": "UNLICENSED",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "node contract/compile.js",
    "build:contract:debug": "node contract/compile.js --debug",
    "build:web": "parcel build src/index.html --public-url ./",
    "dev:deploy:contract": "near dev-deploy",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d dist/",
    "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "prestart": "npm run build:contract:debug && npm run dev:deploy:contract",
    "start": "echo The app is starting! It will automatically open in your browser when ready && env-cmd -f ./neardev/dev-account.env parcel src/index.html --open",
    "dev": "nodemon --watch contract/src -e rs --exec \"npm run start\"",
    "test": "npm run build:contract:debug && cd contract && cargo test -- --nocapture && cd .. && jest test --runInBand"
  },
  "devDependencies": {
    "@babel/core": "~7.14.0",
    "@babel/preset-env": "~7.14.0",
    "@babel/preset-react": "~7.13.13",
    "babel-jest": "~26.6.2",
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-cli": "3.2.0",
    "nodemon": "~2.0.3",
    "parcel-bundler": "~1.12.4",
    "react-test-renderer": "~17.0.1",
    "shelljs": "~0.8.4"
  },
  "dependencies": {
    "near-api-js": "~0.43.1",
    "react": "~17.0.1",
    "react-async": "^10.0.1",
    "react-dom": "~17.0.1",
    "regenerator-runtime": "~0.13.5",
    "uuid": "^8.3.2"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "jest": {
    "moduleNameMapper": {
      "\\.(jpg|ico|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/src/__mocks__/fileMock.js",
      "\\.(css|less)$": "<rootDir>/src/__mocks__/fileMock.js"
    },
    "setupFiles": [
      "<rootDir>/src/jest.init.js"
    ],
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- src/App.js ---
import 'regenerator-runtime/runtime'
import React from 'react'
import { login, logout } from './utils'
import './global.css'
import ElectionCreate from './ElectionCreate'
import Election from './Election'

import getConfig from './config'
const { networkId } = getConfig(process.env.NODE_ENV || 'development')

export default function App() {
  const [elections, set_elections] = React.useState([])

  // The useEffect hook can be used to fire side-effects during render
  // Learn more: https://reactjs.org/docs/hooks-intro.html
  React.useEffect(
    () => {
      // in this case, we only care to query the contract when signed in
      if (window.walletConnection.isSignedIn()) {

        // window.contract is set by initContract in index.js
        window.contract.get_last5elections()
          .then(electionsFromContract => {
            set_elections(electionsFromContract)
          })
      }
    },

    // The second argument to useEffect tells React when to re-run the effect
    // Use an empty array to specify "only run on first render"
    // This works because signing into NEAR Wallet reloads the page
    []
  )

  // // if not signed in, return early with sign-in prompt
  if (!window.walletConnection.isSignedIn()) {
    return (
      <main>
        <h1>Welcome to NEAR!</h1>
        <p>
          To make use of the NEAR blockchain, you need to sign in. The button
          below will sign you in using NEAR Wallet.
        </p>
        <p>
          By default, when your app runs in "development" mode, it connects
          to a test network ("testnet") wallet. This works just like the main
          network ("mainnet") wallet, but the NEAR Tokens on testnet aren't
          convertible to other currencies – they're just for testing!
        </p>
        <p>
          Go ahead and click the button below to try it out:
        </p>
        <p style={{ textAlign: 'center', marginTop: '2.5em' }}>
          <button onClick={login}>Sign in</button>
        </p>
      </main>
    )
  }

  // return (
  //   // use React Fragment, <>, to avoid wrapping elements in unnecessary divs
  //   <>
  //     <button className="link" style={{ float: 'right' }} onClick={logout}>
  //       Sign out
  //     </button>
  //     <main>
  //       <h1>
  //         <label
  //           htmlFor="greeting"
  //           style={{
  //             color: 'var(--secondary)',
  //             borderBottom: '2px solid var(--secondary)'
  //           }}
  //         >
  //           {greeting}
  //         </label>
  //         {' '/* React trims whitespace around tags; insert literal space character when needed */}
  //         {window.accountId}!
  //       </h1>
  //       <form onSubmit={async event => {
  //         event.preventDefault()

  //         // get elements from the form using their id attribute
  //         const { fieldset, greeting } = event.target.elements

  //         // hold onto new user-entered value from React's SynthenticEvent for use after `await` call
  //         const newGreeting = greeting.value

  //         // disable the form while the value gets updated on-chain
  //         fieldset.disabled = true

  //         try {
  //           // make an update call to the smart contract
  //           await window.contract.set_greeting({
  //             // pass the value that the user entered in the greeting field
  //             message: newGreeting
  //           })
  //         } catch (e) {
  //           alert(
  //             'Something went wrong! ' +
  //             'Maybe you need to sign out and back in? ' +
  //             'Check your browser console for more info.'
  //           )
  //           throw e
  //         } finally {
  //           // re-enable the form, whether the call succeeded or failed
  //           fieldset.disabled = false
  //         }

  //         // update local `greeting` variable to match persisted value
  //         set_greeting(newGreeting)

  //         // show Notification
  //         setShowNotification(true)

  //         // remove Notification again after css animation completes
  //         // this allows it to be shown again next time the form is submitted
  //         setTimeout(() => {
  //           setShowNotification(false)
  //         }, 11000)
  //       }}>
  //         <fieldset id="fieldset">
  //           <label
  //             htmlFor="greeting"
  //             style={{
  //               display: 'block',
  //               color: 'var(--gray)',
  //               marginBottom: '0.5em'
  //             }}
  //           >
  //             Change greeting
  //           </label>
  //           <div style={{ display: 'flex' }}>
  //             <input
  //               autoComplete="off"
  //               defaultValue={greeting}
  //               id="greeting"
  //               onChange={e => setButtonDisabled(e.target.value === greeting)}
  //               style={{ flex: 1 }}
  //             />
  //             <button
  //               disabled={buttonDisabled}
  //               style={{ borderRadius: '0 5px 5px 0' }}
  //             >
  //               Save
  //             </button>
  //           </div>
  //         </fieldset>
  //       </form>
  //       <p>
  //         Look at that! A Hello World app! This greeting is stored on the NEAR blockchain. Check it out:
  //       </p>
  //       <ol>
  //         <li>
  //           Look in <code>src/App.js</code> and <code>src/utils.js</code> – you'll see <code>get_greeting</code> and <code>set_greeting</code> being called on <code>contract</code>. What's this?
  //         </li>
  //         <li>
  //           Ultimately, this <code>contract</code> code is defined in <code>assembly/main.ts</code> – this is the source code for your <a target="_blank" rel="noreferrer" href="https://docs.near.org/docs/develop/contracts/overview">smart contract</a>.</li>
  //         <li>
  //           When you run <code>yarn dev</code>, the code in <code>assembly/main.ts</code> gets deployed to the NEAR testnet. You can see how this happens by looking in <code>package.json</code> at the <code>scripts</code> section to find the <code>dev</code> command.</li>
  //       </ol>
  //       <hr />
  //       <p>
  //         To keep learning, check out <a target="_blank" rel="noreferrer" href="https://docs.near.org">the NEAR docs</a> or look through some <a target="_blank" rel="noreferrer" href="https://examples.near.org">example apps</a>.
  //       </p>
  //     </main>
    //   // {showNotification && <Notification />}
  //   // </>
  // )

  function updateElections() {
    window.contract.get_last5elections()
    .then(electionsFromContract => {
      set_elections(electionsFromContract)
    })
  }
  console.log(elections);
  const electionElements = elections.map(e => (<Election key={e.id} name={e.name} id={e.id} mutiple={e.multiple}/>));
  return (
    <>
    <ElectionCreate contract={window.contract} updateElections={updateElections}/>
    <hr/>
    {electionElements}
    </>
  )
}

'''
'''--- src/Election.js ---
import React, {useState, useRef}  from 'react'
import Async from 'react-async';
import {v4 as uuidv4} from 'uuid'
 
export default function Election({name, id, mutiple}) {
  const checkedOptions = useRef([]);

  function onChangeValue(e) {
    const { value, checked } = e.target;
    if (checked) {
      if (!checkedOptions.current.includes(value)) {if(mutiple) {
        checkedOptions.current.push(value)
        } else {
          checkedOptions.current[0] = value;
        };
      }
    } else {
      checkedOptions.current=checkedOptions.current.filter((e) => e !== value);
    }
  }

  const loadElection = async ({ election_id }) => window.contract.get_candidates({election_id:election_id });

  const ElectionHolder = () => null;
  const ElectionDetails = ({options }) => {
    const [data, setData]= useState(options);
    function reload() {
      checkedOptions.current = [];
      window.contract.get_candidates({election_id:id }).then(data=>setData(data));
    }

  function handleVote() {
    if (checkedOptions.current == null || checkedOptions.current.length == 0) return;
    let params = {
      election_id:id,
      options: checkedOptions.current,
    }
    contract.vote(params).then(v => reload())
  }

  function handleRevoke() {
    if (checkedOptions.current == null || checkedOptions.current.length == 0) return;
    let params = {
      election_id:id,
      options: checkedOptions.current,
    }
    contract.revoke(params).then(v => reload())
  }
    return (
    <div>
    <table widht='100%' >
    {data.map((candidate, idx)=> (
      <tbody key={uuidv4()}>
      <tr>
        <td><input type={mutiple ? "checkbox": "radio"} name={"election_" + id} value={candidate.name} onChange={onChangeValue}></input></td>
        <td>{candidate.name}</td><td></td>
      </tr>
      <tr>
        <td>&nbsp;</td>
        <td>&nbsp;</td>
        <td>{candidate.supported}</td>
      </tr>
      </tbody>
    ))}
    </table>
    <button onClick={handleVote}>vote</button>&nbsp;&nbsp;&nbsp;&nbsp;
    <button onClick={handleRevoke}>revoke</button>
    </div>
  );}

  return (
    <>
    <h2>{name}</h2>
    <Async promiseFn={loadElection} election_id={id}>
    <Async.Pending>
      <ElectionHolder />
    </Async.Pending>
    <Async.Fulfilled>{data => <ElectionDetails options={data} />}</Async.Fulfilled>
    <Async.Rejected>{error => <p>{error.message}</p>}</Async.Rejected>
  </Async>
  </>
  )
}

'''
'''--- src/ElectionCreate.js ---
import React, {useRef, useState} from 'react'

export default function ElectionCreate({contract, updateElections}) {
    const electionTitleRef = useRef()
    const electionCandidatesRef = useRef()
    const [multiple, setMultiple] = useState(false)
    
    function handleCreate(e) {
        let name = electionTitleRef.current.value.trim();
        if (name === '') return;
        let options = electionCandidatesRef.current.value.split(/\r?\n/).map(s=>s.trim()).filter(s=>s.length > 0)
        if (options.length == 0) return;
        let params = {
            candidates:options,
            multiple: multiple,
            name: name,
        }

        console.log(params)
        contract.create_election(params).then(v => {console.log(v); updateElections();});
    }

    function onChangeValue(event) {
        setMultiple(event.target.value == "multiple")
    }
  return (
    <>
    <h2> create a new election</h2>
    <fieldset>
    <div>
        <label>Title: <input type="text" name="title" id ="title" ref={electionTitleRef}/></label>
    </div>
    <div>
        <label>options(each line for an option):<br/>
        <textarea name="options" rows="5" cols="120" ref={electionCandidatesRef}/></label>
    </div>
    <div onChange={onChangeValue}>
        <input type="radio" name="type" id="single" value="single" defaultChecked/>single
        <input type="radio" name="type" id="mutiple" value="multiple"/>mutiple
    </div>
        <button onClick={handleCreate}>create</button>
    </fieldset>
    </>
  )
}

'''
'''--- src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME ||'voteer.liuck.testnet'
const INIT_FUNCTION = 'new'
const INIT_ARGS='{}'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
      // initFunction: INIT_FUNCTION,
      // initArgs: INIT_ARGS,
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/global.css ---
* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 25em;
}

h1 {
  background-image: url(assets/logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0.5em;
  text-align: center;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}

button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}
button:active {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.1) inset;
}
button.link {
  background: none;
  border: none;
  box-shadow: none;
  display: inline;
}
[disabled] button, button[disabled] {
  box-shadow: none;
  background-color: var(--light-gray);
  color: gray;
  cursor: not-allowed;
  transform: none;
}
[disabled] button {
  text-indent: -900em;
  width: 2em;
  position: relative;
}
[disabled] button:after {
  content: " ";
  display: block;
  width: 0.8em;
  height: 0.8em;
  border-radius: 50%;
  border: 2px solid #fff;
  border-color: var(--fg) transparent var(--fg) transparent;
  animation: loader 1.2s linear infinite;
  position: absolute;
  top: 0.45em;
  right: 0.5em;
}
@keyframes loader {
  0% { transform: rotate(0deg) }
  100% { transform: rotate(360deg) }
}

fieldset {
  border: none;
  padding: 2em 0;
}

input {
  background-color: var(--shadow);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 1em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

aside {
  animation: notify ease-in-out 10s;
  background-color: var(--shadow);
  border-radius: 5px;
  bottom: 0;
  font-size: 0.8em;
  margin: 1em;
  padding: 1em;
  position: fixed;
  transform: translateY(10em);
  right: 0;
}
aside footer {
  display: flex;
  font-size: 0.9em;
  justify-content: space-between;
  margin-top: 0.5em;
}
aside footer *:first-child {
  color: var(--success);
}
aside footer *:last-child {
  color: var(--gray);
}
@keyframes notify {
  0% { transform: translateY(10em) }
  5% { transform: translateY(0) }
  95% { transform: translateY(0) }
  100% { transform: translateY(10em) }
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(assets/logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/favicon.ico" />
    <title>Welcome to NEAR with Voteer</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'
import { initContract } from './utils'

window.nearInitPromise = initContract()
  .then(() => {
    ReactDOM.render(
      <App />,
      document.querySelector('#root')
    )
  })
  .catch(console.error)

'''
'''--- src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['get_elections', 'get_candidates', 'get_last5elections'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['create_election', 'vote', 'revoke'],
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''