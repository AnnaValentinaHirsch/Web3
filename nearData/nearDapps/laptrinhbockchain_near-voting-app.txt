*GitHub Repository "laptrinhbockchain/near-voting-app"*

'''--- README.md ---
voting-app
==================

This app was initialized with [create-near-app]

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] ≥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/src` folder. `/src/index.html` is a great
   place to start exploring. Note that it loads in `/src/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `voting-app.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `voting-app.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account voting-app.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'voting-app.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- contract/README.md ---
voting-app Smart Contract
==================

A [smart contract] written in [AssemblyScript] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install [Node.js] ≥ 12

Exploring The Code
==================

1. The main smart contract code lives in `assembly/index.ts`. You can compile
   it with the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard AssemblyScript tests using [as-pect].

  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [AssemblyScript]: https://www.assemblyscript.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [as-pect]: https://www.npmjs.com/package/@as-pect/cli

'''
'''--- contract/as-pect.config.js ---
module.exports = require('near-sdk-as/imports')
'''
'''--- contract/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- contract/assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- contract/assembly/__tests__/main.spec.ts ---
import { setGreeting } from '..'
import { storage, Context } from 'near-sdk-as'

describe('Greeting ', () => {
  it('should be set and read', () => {
    setGreeting('hello world')
    storage.get<string>(Context.sender)
  })
})

'''
'''--- contract/assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- contract/assembly/index.ts ---
import { Context, PersistentMap, logging, u128, env } from 'near-sdk-as'
import { Voting, votingInfos, votingUsers } from './model';

// Users who want to vote need to deposit at least 0.1 NEAR
// This will help prevent users from spamming
const MIN_VOTE_AMOUNT = u128.from("100000000000000000000000");

// Get current voting
function _getVotingInfo(): Voting | null {
    let len = votingInfos.length;
    if (len>0) return votingInfos[len-1];
    return null;
}

// Allows users to create new voting
// Don't check user permissions so anyone can create
// It's convenient that other people can run the contract as well.
// But for real implementation, you have to check the permissions, only the owner has the right to create votes
export function createVoting(content: string): bool {
    // Checking
    assert(content, "You must enter the content!");
    let currVote = _getVotingInfo();
    if (currVote) {
        assert(currVote.status==2, "The vote is not ended. You can not create new voting!");
    }
    
    // Create new vote and store into blockchain
    // The id of the vote is its position in the array
    let id = votingInfos.length;
    let item = new Voting(id, Context.sender, content);
    item.startVote();                                       // Reduce action for users
    votingInfos.push(item);

    // Create votingUser and store it into blockchain
    let votingUser = new PersistentMap<string, string>(`voting_users_${id}`);
    votingUsers.set(id, votingUser);

    return true;
}

// Allows users to add candidate to the current voting
export function addCandidate(candidate: string): bool {
    // Checking
    let currVote = _getVotingInfo();
    assert(currVote!=null, "There is no voting!");
    assert(candidate!="", "Invalid input");
    
    if (currVote) {
        // Checking more
        assert(currVote.status==0 || currVote.status==1, "The vote is ended. You can not add candidate!");
        // assert(currVote.owner==Context.sender, "You is not owner of current vote!");
        assert(!currVote.isCandidateExisted(candidate), "The candidate is existed!");
    
         // Add candidate to the current voting and store it into blockchain
        currVote.addCandidate(candidate);
        votingInfos.replace(votingInfos.length-1, currVote);

        return true;
    }

    return false;
}

// Allow to start voting
export function startVote(): bool {
    // Checking
    let currVote = _getVotingInfo();
    assert(currVote!=null, "There is no voting!");
    if (currVote) {
        // Checking more
        assert(currVote.status==0, "The vote is running or ended. You can not start voting!");
        // assert(currVote.owner==Context.sender, "You is not owner of current vote!");
        
        // Update current voting and store it into blockchain
        currVote.startVote();
        votingInfos.replace(votingInfos.length-1, currVote);
    }
    return true;
}

// Close voting
export function endVote(): bool {
    // Checking
    let currVote = _getVotingInfo();
    assert(currVote!=null, "There is no voting!");
    if (currVote) {
        // Checking more
        assert(currVote.status==1, "The vote is not running. You can not end voting!");
        // assert(currVote.owner==Context.sender, "You is not owner of current vote!");

        // Update current voting and store it into blockchain
        currVote.endVote();
        votingInfos.replace(votingInfos.length-1, currVote);
    }
    return true;
}

// Users vote for their favorite candidate
export function vote(candidateId: i32): bool {
    // Checking
    let currVote = _getVotingInfo();
    assert(currVote!=null, "There is no voting!");
    if (currVote) {
        // Checking more
        assert(currVote.status==1, "The vote is not running. You can not vote!");
        // assert(currVote.owner!=Context.sender, "The owner has not right to vote!");
        assert(candidateId>=0 && candidateId<currVote.candidates.length, "The candidateId is invalid!");

         // Check deposit
        let attachedDeposit = Context.attachedDeposit;
        assert(u128.ge(attachedDeposit, MIN_VOTE_AMOUNT), "You must deposit 0.5 NEAR to vote!");

        // Checking account
        let votingUser = votingUsers.get(currVote.id);
        assert(votingUser!=null, "Invalid data!");

        if (votingUser) {
            // Checking more
            assert(votingUser.get(Context.sender)==null, "You has voted before!");

            // Update votingUser and store it into blockchain
            votingUser.set(Context.sender, `${candidateId}`);
            votingUsers.set(currVote.id, votingUser);

            // Increase vote for the candidate and store it into blockchain
            currVote.increaseVote(candidateId);
            votingInfos.replace(votingInfos.length-1, currVote);

            return true;
        }
    }
    return false;
}

// Get information of current voting / lastest voting
export function votingInfo(): Voting | null {
    return _getVotingInfo();
}

// Get information of any voting
export function votingInfoById(votingId: i32): Voting | null {
    let len = votingInfos.length;
    if (len>0 && votingId>=0 && votingId<votingInfos.length) return votingInfos[votingId];
    return null;
}
'''
'''--- contract/assembly/model.ts ---
import { env, PersistentVector, PersistentMap } from "near-sdk-as";

// Declare data structure of a candidate
@nearBindgen
export class Candidate {
    id: i32;
    name: string;
    vote: u32;

    constructor(_id: i32, _name: string) {
        this.id = _id;
        this.name = _name;
        this.vote = 0;
    }
}

// Declare data structure of a voting
@nearBindgen
export class Voting {
    id: i32;
    owner: string;                          // The account created this voting
    content: string;                        // The content of this voting
    status: i32;                            // 0: New - 1: Running - 2: Close
    startTime: u64;
    startBlock: u64;
    endTime: u64;
    endBlock: u64;
    candidates: Candidate[];

    // Contructor function
    constructor(_id: i32, _owner: string, _content: string) {
        this.id = _id;
        this.owner = _owner;
        this.content = _content;
        this.status = 0;
        this.startTime = 0;
        this.startBlock = 0;
        this.endTime = 0;
        this.endBlock = 0;
        this.candidates = [];
    }

    // Allow to start voting
    startVote(): void {
        this.status = 1;
        this.startTime = env.block_timestamp();
        this.startBlock = env.block_index();
    }

    // Close voting
    endVote(): void {
        this.status = 2;
        this.endTime = env.block_timestamp();
        this.endBlock = env.block_index();
    }

    // Add a candidate to the voting
    addCandidate(candidate: string): void {
        let id = this.candidates.length;
        let item = new Candidate(id, candidate);
        this.candidates.push(item);
    }

    // Check a candidate is existed?
    isCandidateExisted(candidate: string): bool {
        for (let idx=0; idx<this.candidates.length; idx++) {
            if (this.candidates[idx].name==candidate) return true;
        }
        return false;
    }

    // Increase vote for a candidate
    increaseVote(candidateId: i32): void {
        this.candidates[candidateId].vote++;
    }
}

// Store the information of votings to the blockchain
export const votingInfos = new PersistentVector<Voting>("voting_infos");

// Store the information of the elected accounts
// We use it to check to make sure the account only votes once
export const votingUsers = new PersistentMap<i32, PersistentMap<string, string>>("voting_users");
'''
'''--- contract/assembly/tsconfig.json ---
{
  "extends": "assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ]
}

'''
'''--- contract/compile.js ---
// This file does two things:
//
// 1. Compile the AssemblyScript contract using the scripts in package.json
//    (see buildCmd below). This will create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// AssemblyScript project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// Use the correct build command based on the `--debug` flag
const buildCmd = debug
  ? 'npm run build:debug'
  : 'npm run build'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder –
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require(`${__dirname}/package.json`).name
  const outFile = `./build/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
  sh.cp('-u',outFile,link)
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- contract/package.json ---
{
  "name": "greeter",
  "version": "0.0.1",
  "license": "UNLICENSED",
  "private": true,
  "scripts": {
    "build": "asb",
    "build:debug": "asb --target debug",
    "test": "asp --nologo"
  },
  "dependencies": {
    "near-sdk-as": "3.1.0"
  },
  "devDependencies": {
    "shelljs": "^0.8.4"
  }
}

'''
'''--- neardev/dev-account.env ---
CONTRACT_NAME=dev-1637336037417-69338601583617
'''
'''--- neardev/shared-test-staging/test.near.json ---
{"account_id":"test.near","private_key":"ed25519:2wyRcSwSuHtRVmkMCGjPwnzZmQLeXLzLLyED1NDMt4BjnKgQL6tF85yBx6Jr26D2dUNeC716RBoTxntVHsegogYw"}

'''
'''--- neardev/shared-test/test.near.json ---
{"account_id":"test.near","private_key":"ed25519:2wyRcSwSuHtRVmkMCGjPwnzZmQLeXLzLLyED1NDMt4BjnKgQL6tF85yBx6Jr26D2dUNeC716RBoTxntVHsegogYw"}

'''
'''--- package.json ---
{
  "name": "voting-app",
  "version": "0.0.1",
  "license": "UNLICENSED",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "node contract/compile.js",
    "build:contract:debug": "node contract/compile.js --debug",
    "build:web": "parcel build src/index.html --public-url ./",
    "dev:deploy:contract": "near dev-deploy",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d dist/",
    "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "prestart": "npm run build:contract:debug && npm run dev:deploy:contract",
    "start": "echo The app is starting! It will automatically open in your browser when ready && env-cmd -f ./neardev/dev-account.env parcel src/index.html --open",
    "dev": "nodemon --watch contract -e ts --exec \"npm run start\"",
    "test": "npm run build:contract:debug && cd contract && npm run test && cd .. && jest test --runInBand"
  },
  "devDependencies": {
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-cli": "~2.1.1",
    "nodemon": "~2.0.3",
    "parcel-bundler": "~1.12.4",
    "shelljs": "~0.8.4"
  },
  "dependencies": {
    "near-api-js": "~0.43.1",
    "regenerator-runtime": "~0.13.5"
  },
  "jest": {
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  }
}

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME ||'voting1.daothang.testnet'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/global.css ---
* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  /* max-width: 25em; */
}

h1 {
  background-image: url(assets/logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0.5em;
  text-align: center;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}

button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}
button:active {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.1) inset;
}
button.link {
  background: none;
  border: none;
  box-shadow: none;
  display: inline;
}
[disabled] button, button[disabled] {
  box-shadow: none;
  background-color: var(--light-gray);
  color: gray;
  cursor: not-allowed;
  transform: none;
}
[disabled] button {
  text-indent: -900em;
  width: 2em;
  position: relative;
}
[disabled] button:after {
  content: " ";
  display: block;
  width: 0.8em;
  height: 0.8em;
  border-radius: 50%;
  border: 2px solid #fff;
  border-color: var(--fg) transparent var(--fg) transparent;
  animation: loader 1.2s linear infinite;
  position: absolute;
  top: 0.45em;
  right: 0.5em;
}
@keyframes loader {
  0% { transform: rotate(0deg) }
  100% { transform: rotate(360deg) }
}

fieldset {
  border: none;
  padding: 2em 0;
}

input {
  background-color: var(--shadow);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 1em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

aside {
  animation: notify ease-in-out 10s;
  background-color: var(--shadow);
  border-radius: 5px;
  bottom: 0;
  font-size: 0.8em;
  margin: 1em;
  padding: 1em;
  position: fixed;
  transform: translateY(10em);
  right: 0;
}
aside footer {
  display: flex;
  font-size: 0.9em;
  justify-content: space-between;
  margin-top: 0.5em;
}
aside footer *:first-child {
  color: var(--success);
}
aside footer *:last-child {
  color: var(--gray);
}
@keyframes notify {
  0% { transform: translateY(10em) }
  5% { transform: translateY(0) }
  95% { transform: translateY(0) }
  100% { transform: translateY(10em) }
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(assets/logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="./assets/favicon.ico" />
    <link rel="apple-touch-icon" href="./assets/favicon.ico" />
    <title>Welcome to NEAR</title>
    <link rel="stylesheet" href="global.css">
</head>

<body>
    <main id="signed-out-flow" style="display: none">
        <h1>Welcome to NEAR!</h1>
        <p>
            To make use of the NEAR blockchain, you need to sign in. The button
            below will sign you in using NEAR Wallet.
        </p>
        <p>
            By default, when your app runs in "development" mode, it connects
            to a test network ("testnet") wallet. This works just like the main
            network ("mainnet") wallet, but the NEAR Tokens on testnet aren't
            convertible to other currencies – they're just for testing!
        </p>
        <p>
            Go ahead and click the button below to try it out:
        </p>
        <p style="text-align: center; margin-top: 2.5em">
            <button id="sign-in-button">Sign in</button>
        </p>
    </main>

    <div id="signed-in-flow" style="display: none">
        <main>
            <div id="header" style="vertical-align: middle; padding-bottom: 20px;">
                <span style="font-size: larger; font-weight: bold; color: darkblue;">
                    Voting App
                </span>
                <button class="link" style="float: right" id="sign-out-button">
                    Sign out
                </button>
                <button class="link" style="float: right; font-weight: bold; vertical-align: middle;" data-behavior="account-id"></button>
            </div>
            <div id="currentVotingContainer" style="border: 1px solid #cccccc; padding: 5px;">
                <div style="height:60px; padding-top: 10px; padding-bottom: 10px; border-bottom:1px solid #cccccc; padding: 5px;">
                    <b>Current Voting</b>
                    <button id="btnShowCandidateForm" style="float: right; font-weight: bold; vertical-align: middle; display: none;">Add Candidate</button>
                    <button id="btnShowCreateVotingForm" style="float: right; font-weight: bold; vertical-align: middle; margin-right: 10px; display: none;">Create Voting</button>
                    <button id="btnEndVoting" style="float: right; font-weight: bold; vertical-align: middle; margin-right: 10px; display: none;" onclick="closeVoting();">Close Voting</button>
                </div>
                <div id="currentVotingInfo" style="padding-top: 10px; padding-bottom: 10px; padding-left: 20px;">
                    There is no voting. Please create new voting!!!
                </div>
                <div style="padding-top: 10px; padding-bottom: 10px; border-top:1px solid #cccccc; display: none;">
                </div>
            </div>
            <div id="createVotingContainer" style="margin-top: 10px; border: 1px solid #cccccc; padding: 5px; display: none;">
                <div style="height: 60px; padding-top: 10px; padding-bottom: 10px; border-bottom:1px solid #cccccc; padding: 5px;">
                    <b>Create new voting</b>
                    <button style="float: right; font-weight: bold; vertical-align: middle;" onclick="closeCreateVotingForm();">X</button>
                </div>
                <form id="createVotingForm" style="padding: 5px;">
                    <fieldset id="fieldset" style="padding: 0px">
                        <label for="greeting" style="display: block; color: var(--gray); margin-bottom: 0.5em">
                            Voting content:
                        </label>
                        <div style="display: flex">
                            <input style="flex: 1" autocomplete="off" id="votingContent" required />
                            <button style="border-radius: 0 5px 5px 0">Create voting</button>
                        </div>
                    </fieldset>
                </form>
            </div>
            <div id="addCandidateContainer" style="margin-top: 10px; border: 1px solid #cccccc; padding: 5px; display: none;">
                <div style="height: 60px; padding-top: 10px; padding-bottom: 10px; border-bottom:1px solid #cccccc; padding: 5px;">
                    <b>Add a candidate</b>
                    <button style="float: right; font-weight: bold; vertical-align: middle;" onclick="closeAddCandidateForm();">X</button>
                </div>
                <form id="addCandidateForm" style="padding: 5px;;">
                    <fieldset id="fieldset" style="padding: 0px">
                        <label style="display: block; color: var(--gray); margin-bottom: 0.5em">
                            Name of candidate:
                        </label>
                        <div style="display: flex">
                            <input style="flex: 1" autocomplete="off" id="candidateName" />
                            <button style="border-radius: 0 5px 5px 0">Add Canđiate</button>
                        </div>
                    </fieldset>
                </form>
            </div>
            <hr>
            <p style="text-align: center;">
                <a href="https://kiemtienonline360.com/how-to-writing-a-voting-app-smart-contract-frontend-on-near/" target="_blank">How to writing a voting app (Smart contract + Frontend) on NEAR</a>
            </p>
        </main>
    </div>

    <aside data-behavior="notification" style="display: none">
        <a target="_blank" href="https://explorer.testnet.near.org/accounts/"></a>
        called method: 'setGreeting' in contract:
        <a target="_blank" href="https://explorer.testnet.near.org/accounts/"></a>
        <footer>
            <div>✔ Succeeded</div>
            <div>Just now</div>
        </footer>
    </aside>

    <script src="./index.js"></script>
</body>

</html>
'''
'''--- src/index.js ---
import 'regenerator-runtime/runtime'

import { initContract, login, logout } from './utils'

import getConfig from './config'
const { networkId } = getConfig(process.env.NODE_ENV || 'development')

// global variable used throughout
let currentVoting = null;
let currentVotingUsers = null;
window.voteCadidate = voteCadidate;
window.closeAddCandidateForm = closeAddCandidateForm;
window.closeCreateVotingForm = closeCreateVotingForm;
window.closeVoting = closeVoting;

// `nearInitPromise` gets called on page load
window.nearInitPromise = initContract()
    .then(() => {
        if (window.walletConnection.isSignedIn()) signedInFlow()
        else signedOutFlow()
    })
    .catch(console.error);

async function voteCadidate(candidateId) {
    try {
        const nearDeposit = "100000000000000000000000";
        const BOATLOAD_OF_GAS = (60*10**12).toFixed();
        // make an update call to the smart contract
        let resp = await window.contract.vote({ candidateId: candidateId }, BOATLOAD_OF_GAS, nearDeposit);
        console.log("Vote Candidate", candidateId, resp);
    } catch (e) {
        console.error("Unable to call voteCadidate() function", candidateId, e);
    }
}

async function initUI() {
    // Update current voting
    await updateCurrentVoting();
    if (currentVoting && currentVoting.status!=2) {
        // Voting is running
        document.querySelector("#btnShowCreateVotingForm").style.display = "none";
        document.querySelector("#btnShowCandidateForm").style.display = "block";
        document.querySelector("#btnEndVoting").style.display = "block";
    } else {
        document.querySelector("#btnShowCreateVotingForm").style.display = "block";
        document.querySelector("#btnShowCandidateForm").style.display = "none";
        document.querySelector("#btnEndVoting").style.display = "none";
    }
    document.querySelector("#currentVotingInfo").innerHTML = renderCurrentVoting();

    // Show "Add Candidate" form
    document.querySelector("#btnShowCandidateForm").onclick = function() {
        document.querySelector("#addCandidateContainer").style.display = "block";
        document.querySelector("#currentVotingContainer").style.display = "none";
    };

    // Show "Create Voting" form
    document.querySelector("#btnShowCreateVotingForm").onclick = function() {
        document.querySelector("#createVotingContainer").style.display = "block";
        document.querySelector("#currentVotingContainer").style.display = "none";
    };
}

function getTime(blockTime) {
    let d = new Date(blockTime/1000000);
    return (d.toLocaleDateString() + " " + d.toLocaleTimeString());
}

function renderCurrentVoting() {
    let html = "There is no voting. Please create new voting!!!";
    if (currentVoting) {
        html = "";
        html += `<div><b>${currentVoting.owner}</b> is created at ${getTime(currentVoting.startTime)}</div>`;
        html += `<hr />`;
        html += `<div style="padding-left:10px">`;
        if (currentVoting.content) html += `${currentVoting.content}`;
        if (currentVoting.candidates.length>0) {
            html += `<ol>`;
            currentVoting.candidates.forEach(item => {
                html += `<li><font color="#00008b">${item.name}</font>: <b>${item.vote}</b> votes`;
                if (currentVoting.status==1) {
                    html += ` (<a href="javascript:voteCadidate(${item.id})">Vote</a>)`;
                }
            });
            html += `</ol>`;
        } else {
            html += `<div style="color:red">Please add a candidate for this voting!!!</div>`;
        }
        if (currentVoting.status==1) {
            html += `<div style="color:blue">This voting is running. Please vote for favourite candidate now!</div>`;
        } else {
            html += `<div style="color:red">This voting is ended at ${getTime(currentVoting.endTime)}!!!</div>`;
        }
        html += `</div>`;
    }
    return html;
}

// Update current voting
async function updateCurrentVoting() {
    try {
        // make an update call to the smart contract
        currentVoting = await window.contract.votingInfo({});
        console.log("Current Voting", currentVoting);
        if (currentVoting) {
            currentVotingUsers = await window.contract.getVotingUsers({votingId: currentVoting.id});
            console.log("Current Voting Users", currentVotingUsers);
        }
    } catch (e) {
        console.error("Unable to call votingInfo() function", e);
    }
}

function closeAddCandidateForm() {
    document.querySelector("#addCandidateContainer").style.display = "none";
    document.querySelector("#currentVotingContainer").style.display = "block";
}

function closeCreateVotingForm() {
    document.querySelector("#addCandidateContainer").style.display = "none";
    document.querySelector("#currentVotingContainer").style.display = "block";
}

async function closeVoting() {
    try {
        let resp = await window.contract.endVote({ });
        console.log("Close Voting", resp);
    } catch (e) {
        console.error("Unable to call closeVoting() function", e);
    }
}

document.querySelector('#createVotingForm').onsubmit = async (event) => {
    event.preventDefault()
    try {
        let content = document.querySelector("#votingContent").value;
        await window.contract.createVoting({
            content: content
        });
    } catch (e) {
        console.log("Create Voting ERROR", e);
    }
}

document.querySelector('#addCandidateForm').onsubmit = async (event) => {
    event.preventDefault();
    try {
        let candidateName = document.querySelector("#candidateName").value;
        await window.contract.addCandidate({
            candidate: candidateName
        });
    } catch (e) {
        console.log("Add Candidate ERROR", e);
    }
}

document.querySelector('#sign-in-button').onclick = login
document.querySelector('#sign-out-button').onclick = logout

// Display the signed-out-flow container
function signedOutFlow() {
    document.querySelector('#signed-out-flow').style.display = 'block'
}

// Displaying the signed in flow container and fill in account-specific data
function signedInFlow() {
    document.querySelector('#signed-in-flow').style.display = 'block'

    document.querySelectorAll('[data-behavior=account-id]').forEach(el => {
        el.innerText = window.accountId
    })

    // populate links in the notification box
    const accountLink = document.querySelector('[data-behavior=notification] a:nth-of-type(1)')
    accountLink.href = accountLink.href + window.accountId
    accountLink.innerText = '@' + window.accountId
    const contractLink = document.querySelector('[data-behavior=notification] a:nth-of-type(2)')
    contractLink.href = contractLink.href + window.contract.contractId
    contractLink.innerText = '@' + window.contract.contractId

    // update with selected networkId
    accountLink.href = accountLink.href.replace('testnet', networkId)
    contractLink.href = contractLink.href.replace('testnet', networkId)

    initUI();
}
'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['getGreeting'],
    changeMethods: [],
    sender: window.accountId
  })
})

test('getGreeting', async () => {
  const message = await window.contract.getGreeting({ accountId: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

// const nearConfig = getConfig(process.env.NODE_ENV || 'development')
const nearConfig = getConfig('development')

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['votingInfo', 'getVotingUsers'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['vote', "createVoting", "addCandidate", "endVote"],
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>Please run the following command in NEAR CLI, then enter account id here. masterAccountId default: test.near
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''