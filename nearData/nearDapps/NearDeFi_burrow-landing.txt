*GitHub Repository "NearDeFi/burrow-landing"*

'''--- .env ---
REACT_APP_DEFAULT_NETWORK=mainnet
'''
'''--- .eslintrc.js ---
module.exports = {
  env: {
    browser: true,
    es2021: true,
  },
  extends: [
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:import/typescript",
    "plugin:import/recommended",
    "plugin:prettier/recommended",
    "prettier",
  ],
  parser: "@typescript-eslint/parser",
  parserOptions: {
    ecmaFeatures: {
      jsx: true,
    },
    ecmaVersion: 12,
    sourceType: "module",
  },
  plugins: ["react", "@typescript-eslint", "prettier"],
  rules: {
    camelcase: 0,
    "prettier/prettier": "error",
    "object-curly-spacing": "off",
    "no-unused-vars": "off",
    "import/extensions": 0,
    "import/prefer-default-export": 0,
    "no-plusplus": 0,
    "no-param-reassign": 0,
    "no-shadow": "off",
    "import/no-cycle": [1, { maxDepth: 1 }],
    "no-nested-ternary": 0,
    "no-use-before-define": "off",
    "max-classes-per-file": ["error", 2],
    "no-underscore-dangle": ["error", { allowAfterSuper: true, allowAfterThis: true }],
    "dot-notation": 0,
    "no-restricted-syntax": 1,
    "no-unused-expressions": [1, { allowShortCircuit: false, allowTernary: false }],
    "no-void": [1, { allowAsStatement: true }],
    "no-console": ["error", { allow: ["warn", "error", "info"] }],
    "react/react-in-jsx-scope": 0,
    "react/prop-types": 0,
    "react/jsx-filename-extension": [1, { extensions: [".ts", ".tsx"] }],
    "react/jsx-props-no-spreading": 0,
    "react/require-default-props": 0,
    "react/function-component-definition": 0,
    "react/jsx-no-constructed-context-values": 0,
    "react/no-array-index-key": 0,
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/no-non-null-assertion": 0,
    "@typescript-eslint/no-non-null-asserted-optional-chain": 0,
    "@typescript-eslint/no-shadow": "error",
    "@typescript-eslint/ban-ts-comment": 0,
    "@typescript-eslint/no-use-before-define": ["error", { variables: false }],
    "import/order": [
      "error",
      {
        pathGroups: [
          {
            pattern: "@/**",
            group: "parent",
            position: "before",
          },
        ],
      },
    ],
  },
  settings: {
    react: {
      version: "detect",
    },
    "import/resolver": {
      alias: {
        map: [["~", "./src"]],
        extensions: [".ts", ".tsx", ".js", ".jsx", ".json"],
      },
    },
  },
};

'''
'''--- README.md ---
## Burrow landing page

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

'''
'''--- craco.config.js ---
const path = require("path");
module.exports = {
  webpack: {
    alias: {
      "~": path.resolve(__dirname, "src"),
    },
  },
};

'''
'''--- package.json ---
{
  "name": "burrow-landing",
  "version": "0.1.0",
  "private": false,
  "dependencies": {
    "@craco/craco": "^6.4.5",
    "@react-icons/all-files": "^4.1.0",
    "@testing-library/jest-dom": "^5.16.4",
    "@testing-library/react": "^13.3.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "@types/node": "^16.11.47",
    "@types/react": "^18.0.15",
    "@types/react-dom": "^18.0.6",
    "buffer": "^6.0.3",
    "decimal.js": "^10.3.1",
    "framer-motion": "^7.0.0",
    "millify": "^5.0.0",
    "near-api-js": "^0.45.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1",
    "typescript": "^4.7.4",
    "usehooks-ts": "^2.6.0",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "craco start",
    "build": "craco build",
    "test": "craco test",
    "eject": "craco eject",
    "prettier": "prettier ./src --write",
    "lint": "prettier --check \"./src/**/*.{ts,tsx}\" && eslint \"./src/**/*.{ts,tsx}\" && yarn type-check",
    "type-check": "tsc --pretty --noEmit",
    "postinstall": "husky install",
    "prepare": "husky install"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@typescript-eslint/eslint-plugin": "^5.32.0",
    "autoprefixer": "^10.4.8",
    "eslint": "^8.21.0",
    "eslint-config-prettier": "^8.5.0",
    "eslint-import-resolver-alias": "^1.1.2",
    "eslint-plugin-import": "^2.26.0",
    "eslint-plugin-prettier": "^4.2.1",
    "eslint-plugin-react": "^7.30.1",
    "husky": "^8.0.1",
    "postcss": "^8.4.14",
    "prettier": "^2.7.1",
    "tailwindcss": "^3.1.7"
  }
}

'''
'''--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="Web site created using create-react-app" />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <title>Burrow Cash</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "burrow",
  "name": "Burrow Cash",
  "icons": [
    {
      "src": "favicon.png",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/assets/GitBook.svg ---
<svg role="img" viewBox="0 0 24 24" width="24" height="24" fill="#fff" xmlns="http://www.w3.org/2000/svg"><title>GitBook</title><path d="M10.802 17.77a.703.703 0 11-.002 1.406.703.703 0 01.002-1.406m11.024-4.347a.703.703 0 11.001-1.406.703.703 0 01-.001 1.406m0-2.876a2.176 2.176 0 00-2.174 2.174c0 .233.039.465.115.691l-7.181 3.823a2.165 2.165 0 00-1.784-.937c-.829 0-1.584.475-1.95 1.216l-6.451-3.402c-.682-.358-1.192-1.48-1.138-2.502.028-.533.212-.947.493-1.107.178-.1.392-.092.62.027l.042.023c1.71.9 7.304 3.847 7.54 3.956.363.169.565.237 1.185-.057l11.564-6.014c.17-.064.368-.227.368-.474 0-.342-.354-.477-.355-.477-.658-.315-1.669-.788-2.655-1.25-2.108-.987-4.497-2.105-5.546-2.655-.906-.474-1.635-.074-1.765.006l-.252.125C7.78 6.048 1.46 9.178 1.1 9.397.457 9.789.058 10.57.006 11.539c-.08 1.537.703 3.14 1.824 3.727l6.822 3.518a2.175 2.175 0 002.15 1.862 2.177 2.177 0 002.173-2.14l7.514-4.073c.38.298.853.461 1.337.461A2.176 2.176 0 0024 12.72a2.176 2.176 0 00-2.174-2.174" /></svg>
'''
'''--- src/assets/hog.svg ---
<svg width="359" height="359" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M0 359C0 160.719 80.443 0 179.5 0S359 160.719 359 359H0Z" fill="#9B8579"/>
  <path d="M89.75 59.833c8.26 0 14.958-6.697 14.958-14.958s-6.697-14.959-14.959-14.959c-8.26 0-14.958 6.698-14.958 14.959s6.697 14.958 14.958 14.958ZM269.249 59.833c8.262 0 14.959-6.697 14.959-14.958s-6.697-14.959-14.959-14.959c-8.261 0-14.958 6.698-14.958 14.959s6.697 14.958 14.958 14.958Z" fill="#9B8579"/>
  <path d="M127.145 74.792c4.131 0 7.479-6.697 7.479-14.959 0-8.26-3.348-14.958-7.479-14.958-4.13 0-7.479 6.697-7.479 14.958 0 8.262 3.349 14.959 7.479 14.959ZM231.854 74.792c4.131 0 7.479-6.697 7.479-14.959 0-8.26-3.348-14.958-7.479-14.958-4.13 0-7.479 6.697-7.479 14.958 0 8.262 3.349 14.959 7.479 14.959ZM179.999 61.828c-15.124 0-29.085 9.473-39.888 23.434a20.967 20.967 0 0 0 0 25.928c10.969 13.961 24.764 23.435 39.888 23.435 15.125 0 29.086-9.474 39.889-23.435a20.967 20.967 0 0 0 0-25.928c-10.803-13.96-24.764-23.434-39.889-23.434Z" fill="#000"/>
  <path opacity=".5" d="M119.666 89.75h-89.75M119.666 89.75l-89.75 14.958M329.084 89.75h-89.75M329.084 104.708l-89.75-14.958" stroke="#584840" stroke-width="4.986" stroke-miterlimit="10"/>
  <path opacity=".1" d="M315.287 123.988C282.379 48.033 233.681 0 179.499 0 125.316 0 76.619 48.033 43.71 123.988c-22.936 53.185 14.626 113.683 72.465 115.345h3.49c5.984 0 11.967-.498 17.784-1.329 27.756-4.155 56.177-4.155 84.099 0 5.817.831 11.801 1.329 17.784 1.329h3.49c57.839-1.662 95.401-62.16 72.465-115.345Zm-135.788 70.47c-33.075 0-74.792-3.49-74.792-44.875 0-41.384 41.717-89.75 74.792-89.75 33.074 0 74.791 48.366 74.791 89.75 0 41.385-41.717 44.875-74.791 44.875Z" fill="#000"/>
  <g opacity=".5" stroke="#584840" stroke-width="4.986" stroke-miterlimit="10">
    <path d="M179.499 134.625v14.958M149.583 164.542l29.917-14.959M209.416 164.542l-29.917-14.959"/>
  </g>
  <path d="M194.458 166.958v-7.479L179.499 152l-14.958 7.479v7.479a7.449 7.449 0 0 0 7.479 7.48 7.449 7.449 0 0 0 7.479-7.48 7.449 7.449 0 0 0 7.479 7.48 7.449 7.449 0 0 0 7.48-7.48Z" fill="#fff"/>
</svg>
'''
'''--- src/assets/logo.svg ---
<svg width="121" height="32" fill="none" xmlns="http://www.w3.org/2000/svg">
  <g clip-path="url(#a)">
    <path d="M42.379 22.578V9.333c0-.889.541-1.422 1.399-1.422h5.37c3.566 0 5.507 1.467 5.507 4.178 0 1.733-.993 2.933-2.889 3.467 2.438.533 3.52 2.044 3.52 3.955 0 3.022-1.94 4.489-6.227 4.489h-5.326c-.813 0-1.354-.578-1.354-1.422Zm6.544-7.645c1.94 0 3.024-.977 3.024-2.533 0-1.6-.948-2.4-3.069-2.4h-3.926v4.933h3.971Zm.09 7.023c2.618 0 3.611-.756 3.611-2.623 0-1.688-1.083-2.533-3.52-2.533h-4.152v5.156h4.061ZM62.373 24.311c-3.205 0-4.694-2.133-4.694-5.111v-6.089c0-.889.451-1.2 1.083-1.2h.27c.678 0 1.129.267 1.129 1.2v5.778c0 2.044 1.083 3.289 2.889 3.289 1.534 0 2.707-.845 3.34-2.134v-6.933c0-.889.45-1.2 1.082-1.2h.271c.677 0 1.129.267 1.129 1.2v10.711c0 .09-.407.267-.903.267-.767 0-1.535-.356-1.58-1.911-.812 1.244-2.166 2.133-4.016 2.133ZM77.537 11.733c1.264 0 1.986.578 1.986 1.6 0 .934-.722 1.334-.768 1.29-.36-.312-.857-.534-1.534-.534-1.986 0-2.753 1.911-2.753 4.667v4.222c0 .889-.497 1.155-1.129 1.155h-.27c-.677 0-1.129-.266-1.129-1.155v-10.8c0-.089.407-.267.903-.267.767 0 1.535.4 1.58 2.09.541-1.468 1.534-2.268 3.114-2.268ZM86.924 11.733c1.264 0 1.986.578 1.986 1.6 0 .934-.722 1.334-.767 1.29-.36-.312-.857-.534-1.534-.534-1.986 0-2.753 1.911-2.753 4.667v4.222c0 .889-.497 1.155-1.129 1.155h-.27c-.678 0-1.129-.266-1.129-1.155v-10.8c0-.089.406-.267.903-.267.767 0 1.534.4 1.58 2.09.541-1.468 1.579-2.268 3.113-2.268ZM90.04 18c0-3.644 2.617-6.267 6.408-6.267 3.701 0 6.364 2.623 6.364 6.311 0 3.645-2.618 6.267-6.364 6.267-3.836 0-6.409-2.622-6.409-6.31Zm10.425.044c0-2.488-1.715-4.31-4.062-4.31-2.347 0-4.062 1.777-4.062 4.266s1.76 4.311 4.062 4.311c2.301 0 4.062-1.822 4.062-4.267ZM107.099 23.333l-3.024-10.71c-.045-.134.767-.712 1.489-.712.542 0 1.129.311 1.309 1.334l1.896 8.4 2.347-7.245c.18-.578.586-.889 1.534-.889.903 0 1.354.267 1.535.889l2.256 7.2 1.851-8.356c.18-1.022.767-1.333 1.309-1.333.722 0 1.444.578 1.444.711l-3.024 10.711c-.135.578-.587.8-1.535.8-1.038 0-1.308-.177-1.534-.889L112.605 16l-2.437 7.244c-.226.667-.542.89-1.535.89-.902 0-1.354-.178-1.534-.8Z" fill="#fff"/>
    <ellipse cx="16.154" cy="16.014" rx="15.911" ry="15.986" fill="#fff"/>
    <path d="M16.248 0C7.266 0 0 7.156 0 16c0 6.444 3.881 12 9.478 14.533-1.85-2.977-5.19-9.155-4.92-14.666C4.83 9.6 9.523 6.4 13.765 5.51c4.333-.889 9.93-.444 11.329 3.778 1.624 4.933-6.41 7.867-6.77 8-.406.133-4.152 1.511-6.319.533a2.801 2.801 0 0 1-1.444-1.51c-.361-.934-.135-1.956.587-2.8 1.76-2.09 6.273-3.023 10.967-2.268-.316.667-1.083 1.334-1.986 1.912-3.836-.267-6.544.755-7.357 1.733-.316.4-.225.622-.225.711.045.089.09.222.316.311 1.083.489 3.61-.178 4.694-.578.09-.044 6.453-2.4 5.46-5.377-1.037-3.112-6.047-2.978-8.845-2.4-1.67.355-7.222 2-7.538 8.4-.18 4.933 3.792 12.088 5.958 15.644 1.173.267 2.392.4 3.656.4 8.981 0 16.247-7.156 16.247-16 0-8.844-7.266-16-16.247-16Zm11.147 20.133c-2.662 4-6.86 5.067-10.38 5.067a20.2 20.2 0 0 1-5.326-.711c-.586-.133-.902-.711-.767-1.289s.722-.889 1.309-.756c8.26 2.09 11.915-1.288 13.404-3.466.587-.89.813-1.911.587-2.8-.226-.845-.722-1.511-1.535-2 .497-.534.858-1.156 1.129-1.778 1.534.933 2.211 2.222 2.482 3.333.316 1.467 0 3.067-.903 4.4Z" fill="#594A42"/>
  </g>
  <defs>
    <clipPath id="a">
      <path fill="#fff" d="M0 0h121v32H0z"/>
    </clipPath>
  </defs>
</svg>
'''
'''--- src/assets/near.svg ---
<svg width="35" height="35" viewBox="0 0 35 35" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="17.5" cy="17.5" r="17.5" fill="white"/>
<path d="M24.0266 9.02222L19.8535 15.2222C19.5649 15.6444 20.1199 16.1556 20.5194 15.8L24.626 12.2222C24.737 12.1333 24.8923 12.2 24.8923 12.3556V23.5333C24.8923 23.6889 24.6926 23.7556 24.6038 23.6444L12.1731 8.75556C11.7736 8.26667 11.1964 8 10.5527 8H10.1088C8.9545 8 8 8.95556 8 10.1333V25.8667C8 27.0444 8.9545 28 10.131 28C10.8635 28 11.5516 27.6222 11.9512 26.9778L16.1243 20.7778C16.4129 20.3556 15.8579 19.8444 15.4584 20.2L11.3518 23.7556C11.2408 23.8444 11.0855 23.7778 11.0855 23.6222V12.4667C11.0855 12.3111 11.2852 12.2444 11.374 12.3556L23.8047 27.2444C24.2042 27.7333 24.8036 28 25.4251 28H25.869C27.0455 28 28 27.0444 28 25.8667V10.1333C28 8.95556 27.0455 8 25.869 8C25.1143 8 24.4262 8.37778 24.0266 9.02222Z" fill="black"/>
</svg>

'''
'''--- src/assets/pointer.svg ---
<svg viewBox="0 0 1280 60" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M672 47.1213L638.5 60L605.5 47.1155C199.225 46.1286 0 0 0 0H1280C1280 0 1079.96 46.2031 672 47.1213Z" fill="#000741"/>
</svg>

'''
'''--- src/assets/teeth.svg ---
<svg width="31" height="23" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M30.458 14.958V7.48L15.499 0 .541 7.48v7.478a7.448 7.448 0 0 0 7.48 7.48 7.448 7.448 0 0 0 7.478-7.48 7.448 7.448 0 0 0 7.48 7.48 7.448 7.448 0 0 0 7.479-7.48Z" fill="#fff"/>
</svg>
'''
'''--- src/hooks/burrow.ts ---
import { useEffect, useState } from "react";
import { useLocalStorage } from "usehooks-ts";

import { getAssets } from "~/near";
import { Asset, computeExtraAPY, transformAsset } from "~/utils";

const SELECTED_ASSETS = ["DAI", "WBTC", "USDC", "AURORA", "ETH", "USDT", "USN", "wNEAR"];

const EMPTY_ASSET: Asset = {
  id: "---",
  symbol: "---",
  borrowAPR: "---",
  tvl: "---",
  icon: "---",
};

export const useAssets = () => {
  const [selected, setSelectedAsset] = useState<Asset>(EMPTY_ASSET);
  const [assets, setAssets] = useLocalStorage<Asset[]>("assets", []);

  useEffect(() => {
    getAssets().then(([allAssets, netLiquidityFarm]) => {
      const extraAPY = computeExtraAPY(allAssets, netLiquidityFarm);
      setAssets(
        Object.entries(allAssets)
          .map(([, asset]) => asset)
          .filter((asset: any) => SELECTED_ASSETS.includes(asset.metadata.symbol))
          .map(transformAsset(extraAPY)),
      );
    });
  }, []);

  useEffect(() => {
    if (assets.length > 0) {
      setSelectedAsset(assets[0]);
    }
  }, [assets]);

  const onSelect = (asset: Asset) => setSelectedAsset(asset);

  return { assets, selected, onSelect };
};

'''
'''--- src/index.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

html,
body,
#root {
  width: 100%;
  height: 100%;
}

.noscrollbars::-webkit-scrollbar {
  display: none;
}

'''
'''--- src/near/config.ts ---
import * as nearAPI from "near-api-js";

const { keyStores } = nearAPI;

const keyStore = new keyStores.InMemoryKeyStore();

const defaultNetwork = process.env.REACT_APP_DEFAULT_NETWORK || "testnet";

const CONTRACT = {
  testnet: "contract.1638481328.burrow.testnet",
  mainnet: "contract.main.burrow.near",
};

export const CONTRACT_NAME = CONTRACT[defaultNetwork];

const defaultConfig = {
  mainnet: {
    networkId: "mainnet",
    keyStore,
    nodeUrl: "https://rpc.mainnet.near.org",
    walletUrl: "https://wallet.near.org",
    helperUrl: "https://helper.mainnet.near.org",
    explorerUrl: "https://explorer.mainnet.near.org",
    headers: {},
  },
  testnet: {
    networkId: "testnet",
    keyStore,
    nodeUrl: "https://rpc.testnet.near.org",
    walletUrl: "https://wallet.testnet.near.org",
    helperUrl: "https://helper.testnet.near.org",
    explorerUrl: "https://explorer.testnet.near.org",
    headers: {},
  },
  localnet: {
    networkId: "localnet",
    keyStore,
    nodeUrl: "http://127.0.0.1:8332",
    walletUrl: "http://127.0.0.1:8334",
    helperUrl: "http://127.0.0.1:8330",
    explorerUrl: "http://127.0.0.1:8331",
    headers: {},
  },
};

export const config = defaultConfig[defaultNetwork];

'''
'''--- src/near/index.ts ---
import * as nearAPI from "near-api-js";

import { CONTRACT_NAME } from "./config";
import { getWallet } from "./wallet";
import { transformContractAssets } from "~/utils";

export const ftContractCall = async ({ contractName = CONTRACT_NAME, method, args = {} }) => {
  const wallet = await getWallet();

  const contract = new nearAPI.Contract(wallet.account(), contractName, {
    viewMethods: [
      "get_asset",
      "get_assets_paged",
      "ft_metadata",
      "get_config",
      "get_price_data",
      "get_asset_farm",
    ],
    changeMethods: [],
  });

  return contract[method](args);
};

export const getAssets = async () => {
  const assets = await ftContractCall({ method: "get_assets_paged" });
  const tokenIds = assets.map(([id]) => id);

  const assetsDetailed = await Promise.all(
    tokenIds.map((token_id) => ftContractCall({ method: "get_asset", args: { token_id } })),
  );

  const metadata = await Promise.all(
    tokenIds.map((tokenId) => ftContractCall({ method: "ft_metadata", contractName: tokenId })),
  );

  const config = await ftContractCall({ method: "get_config" });

  const prices = await ftContractCall({
    method: "get_price_data",
    contractName: config["oracle_account_id"],
  });

  const refPrices = await fetch(
    "https://raw.githubusercontent.com/NearDeFi/token-prices/main/ref-prices.json",
  ).then((r) => r.json());

  const netLiquidityFarm = await ftContractCall({
    method: "get_asset_farm",
    args: { farm_id: "NetTvl" },
  });

  const transformedAssets = transformContractAssets(assetsDetailed, metadata, prices, refPrices);

  return [transformedAssets, netLiquidityFarm];
};

'''
'''--- src/near/wallet.ts ---
import * as nearAPI from "near-api-js";

import { config } from "./config";

const { connect, WalletConnection } = nearAPI;

export const getNear = async () => {
  const near = await connect(config);
  return near;
};

export const getWallet = async () => {
  const near = await getNear();
  const wallet = new WalletConnection(near, null);
  return wallet;
};

'''
'''--- src/react-app-env.d.ts ---
/// <reference types="react-scripts" />

'''
'''--- src/reportWebVitals.ts ---
import { ReportHandler } from "web-vitals";

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import("web-vitals").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/setupTests.ts ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import "@testing-library/jest-dom";

'''
'''--- src/utils/index.ts ---
import Decimal from "decimal.js";
import millify from "millify";

const APY_FORMAT = {
  style: "decimal",
  minimumFractionDigits: 2,
  maximumFractionDigits: 2,
};

export const sumReducer = (sum: number, a: number) => sum + a;

const shrinkToken = (value: string | number, decimals: string | number, fixed?: number): string => {
  return new Decimal(value).div(new Decimal(10).pow(decimals)).toFixed(fixed);
};

const toUsd = (balance: string, asset) =>
  asset.price?.usd
    ? Number(shrinkToken(balance, asset.metadata.decimals + asset.config.extra_decimals)) *
      asset.price.usd
    : 0;

export const transformContractAssets = (assets, metadata, prices, refPrices) => {
  const transformedAssets = assets.reduce((map, asset, i) => {
    const price = prices.prices.find((p) => p.asset_id === asset.token_id);
    const usd = new Decimal(price?.price?.multiplier || 0).div(10000).toNumber();
    map[asset.token_id] = {
      ...asset,
      metadata: metadata[i],
      price: {
        ...price?.price,
        usd: usd ? usd : Number(refPrices[asset.token_id].price),
      },
    };
    return map;
  }, {});

  return transformedAssets;
};

export interface Asset {
  id: string;
  symbol: string;
  borrowAPR: string;
  tvl: string;
  icon: string;
}

const symbolTransform = {
  WBTC: "BTC",
  wNEAR: "NEAR",
};

export const transformAsset = (extraAPY) => (asset) => {
  const tvlDec = new Decimal(asset.supplied.balance)
    .plus(new Decimal(asset.reserved))
    .minus(new Decimal(asset.borrowed.balance))
    .toFixed(0);

  const tvl = millify(toUsd(tvlDec, asset));
  const symbol = symbolTransform[asset.metadata.symbol] || asset.metadata.symbol;

  return {
    id: asset.token_id,
    symbol,
    borrowAPR: (extraAPY + Number(asset.borrow_apr) * 100).toLocaleString(undefined, APY_FORMAT),
    tvl,
    icon: asset.metadata.icon,
  } as Asset;
};

const getTotalBalance = (assets, source: "borrowed" | "supplied") =>
  Object.keys(assets)
    .map((tokenId) => {
      const asset = assets[tokenId];
      const netTvlMultiplier = asset.config.net_tvl_multiplier / 10000;
      return (
        toUsd(asset[source].balance, asset) * netTvlMultiplier +
        (source === "supplied" ? toUsd(asset.reserved, asset) * netTvlMultiplier : 0)
      );
    })
    .reduce(sumReducer, 0);

export const computeExtraAPY = (assets, netLiquidityFarm) => {
  const totalDailyNetLiquidityRewards = Object.entries(netLiquidityFarm.rewards)
    .map(([tokenId, farm]: any) => {
      const asset = assets[tokenId];
      const assetDecimals = asset.metadata.decimals + asset.config.extra_decimals;
      const dailyAmount = Number(shrinkToken(farm.reward_per_day, assetDecimals));
      return dailyAmount * asset.price.usd * (asset.config.net_tvl_multiplier / 10000);
    })
    .reduce(sumReducer, 0);

  const supplied = getTotalBalance(assets, "supplied");
  const borrowed = getTotalBalance(assets, "borrowed");

  const totalProtocolLiquidity = supplied - borrowed;
  const netLiquidtyAPY = ((totalDailyNetLiquidityRewards * 365) / totalProtocolLiquidity) * 100;

  return netLiquidtyAPY;
};

'''
'''--- tailwind.config.js ---
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ["./src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {
      colors: {
        bgblue: "#000741",
        texthighlight: "#47c285",
        greenish: "#ACFFD1",
        button: "#4ed589",
      },
    },
  },
  plugins: [],
};

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "noImplicitAny": false,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": ["src"],
  "extends": "./tsconfig.paths.json"
}

'''
'''--- tsconfig.paths.json ---
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "~/*": ["./src/*"]
    }
  }
}

'''