*GitHub Repository "onchezz/guessing-game-contract"*

'''--- Cargo.toml ---
[package]
name = "rust-template"
version = "0.1.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0-pre.4"
near-rng = "0.1.1"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

'''
'''--- README.md ---
# Rust Smart Contract Template

## Getting started

To get started with this template:

1. Click the "Use this template" button to create a new repo based on this template
2. Update line 2 of `Cargo.toml` with your project name
3. Update line 4 of `Cargo.toml` with your project author names
4. Set up the [prerequisites](https://github.com/near/near-sdk-rs#pre-requisites)
5. Begin writing your smart contract in `src/lib.rs`
6. Test the contract 

    `cargo test -- --nocapture`

8. Build the contract

    `RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release`

**Get more info at:**

* [Rust Smart Contract Quick Start](https://docs.near.org/docs/develop/contracts/rust/intro)
* [Rust SDK Book](https://www.near-sdk.io/)

'''
'''--- build.bat ---
cargo build --target wasm32-unknown-unknown --release
copy target\wasm32-unknown-unknown\release\*.wasm res
'''
'''--- build.sh ---
#!/bin/bash
set -e

RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release
cp target/wasm32-unknown-unknown/release/*.wasm ./res/

'''
'''--- src/lib.rs ---
use near_rng::Rng;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{env, near_bindgen};
use std::cmp::Ordering;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Msg(String);

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    pub guess: u64,
}
impl Default for Contract {
    fn default() -> Self {
        Self { guess: 0 }
    }
}

#[near_bindgen]
impl Contract {
    pub fn random_number(&mut self) {
        let mut rng = Rng::new(&env::random_seed());
        let value = rng.rand_range_u64(0, 100);
        self.guess = value;
    }
    pub fn get_user_guess(&mut self, number: u64) -> Result<Msg, ()> {
        match self.guess.cmp(&number) {
            Ordering::Less => Ok(Msg("Too small".to_string())),
            Ordering::Greater => Ok(Msg("Too big".to_string())),
            Ordering::Equal => Ok(Msg("You win".to_string())),
        }
    }
    // ADD CONTRACT METHODS HERE
}

// use the attribute below for unit tests
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::test_utils::VMContextBuilder;
    use near_sdk::{testing_env, AccountId, VMContext};

    fn contract_account() -> AccountId {
        "contract".parse::<AccountId>().unwrap()
    }

    fn get_context(predecessor_account_id: AccountId) -> VMContext {
        let mut builder = VMContextBuilder::new();
        builder
            .current_account_id(contract_account())
            .signer_account_id(predecessor_account_id.clone())
            .predecessor_account_id(predecessor_account_id);
        builder.build()
    }

    #[test]
    fn test_random_number() {
        let accountid = AccountId::new_unchecked("onchez.test".to_string());
        let context = get_context(accountid);
        testing_env!(context);

        let mut contract = Contract::default();
        contract.random_number();
        assert!(contract.guess > 0);
        assert!(contract.guess < 100);
    }
    #[test]
    fn test_get_user_guess() {
        let accountid = AccountId::new_unchecked("onchez.test".to_string());
        let context = get_context(accountid);
        testing_env!(context);

        let mut contract = Contract::default();
        contract.random_number();
        let result = contract.get_user_guess(contract.guess);

        assert_eq!(result.unwrap().0, "You win");
    }
}

'''
'''--- test.sh ---
#!/bin/bash
set -e

cargo test -- --nocapture

'''