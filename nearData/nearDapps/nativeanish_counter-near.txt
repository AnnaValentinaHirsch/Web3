*GitHub Repository "nativeanish/counter-near"*

'''--- contract/Cargo.toml ---
[package]
name = "counter-near"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
near-sdk = "3.1.0"

[lib]
crate-type = ["cdylib"]

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true
'''
'''--- contract/src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::near_bindgen;

#[near_bindgen]
#[derive(BorshSerialize, BorshDeserialize)]
pub struct Counter {
    state: i64,
}

#[near_bindgen]
impl Counter {
    pub fn increment(&mut self) {
        self.state += 1;
    }
    pub fn decrement(&mut self) {
        self.state -= 1;
    }
    pub fn state(&self) -> i64 {
        self.state
    }
}
impl Default for Counter {
    fn default() -> Self {
        Self { state: 0 }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};
    fn get_context(predecessor_account_id: String, storage_usage: u64) -> VMContext {
        VMContext {
            current_account_id: "counter.testnet".to_string(),
            signer_account_id: "anish.testnet".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id,
            input: vec![],
            block_index: 0,
            block_timestamp: 0,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage,
            attached_deposit: 0,
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view: false,
            output_data_receivers: vec![],
            epoch_height: 19,
        }
    }
    #[test]
    fn increment() {
        let context = get_context("anish.testnet".to_string(), 0);
        testing_env!(context);
        let mut contract = Counter::default();
        contract.increment();
        contract.increment();
        assert_eq!(2, contract.state());
    }
    #[test]
    fn decrement() {
        let context = get_context("anish.testnet".to_string(), 0);
        testing_env!(context);
        let mut contract = Counter::default();
        contract.increment();
        contract.increment();
        contract.increment();
        contract.decrement();
        assert_eq!(2, contract.state());
    }
}

'''
'''--- package.json ---
{
	"name": "counter-near",
	"version": "1.0.0",
	"main": "index.js",
	"license": "MIT",
	"dependencies": {
		"near-api-js": "^0.44.2",
		"parcel": "^2.3.2",
		"react": "^17.0.2",
		"react-dom": "^17.0.2"
	},
	"devDependencies": {
		"@types/node": "^17.0.21",
		"@types/react": "^17.0.39",
		"@types/react-dom": "^17.0.13"
	},
	"scripts": {
		"dev": "npx parcel public/index.html"
	}
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html>
	<head>
		<title>Todo Application</title>
	</head>
	<body>
		<div id="mountNode"></div>
		<script src="./index.tsx" type="module"></script>
	</body>
</html>

'''
'''--- src/reducer/fs.ts ---
import { increment, decrement } from "../utils/init";
type ActionType = { type: "increment" } | { type: "decrement" };
export async function reducer(state: Promise<number>, action: ActionType) {
	switch (action.type) {
		case "increment":
			return await increment();
		case "decrement":
			return await decrement();
		default:
			return state;
	}
}

'''
'''--- src/utils/init.ts ---
import { resolve } from "dns";
import * as nearapi from "near-api-js";
const get_near = async () => {
	const { keyStores } = nearapi;
	const keyStore = new keyStores.BrowserLocalStorageKeyStore();
	const config = {
		networkId: "testnet",
		keyStore, // optional if not signing transactions
		nodeUrl: "https://rpc.testnet.near.org",
		walletUrl: "https://wallet.testnet.near.org",
		helperUrl: "https://helper.testnet.near.org",
		explorerUrl: "https://explorer.testnet.near.org",
	};
	const near = await nearapi.connect(config);
	return near;
};

const get_wallet = async () => {
	const near = await get_near();
	const wallet = new nearapi.WalletConnection(near, null);
	return wallet;
};
const get_contract = async () => {
	const wallet = await get_wallet();
	const contract = new nearapi.Contract(
		wallet.account(),
		"dev-1646586508336-75678159366335",
		{
			viewMethods: ["state"],
			changeMethods: ["increment", "decrement"],
		}
	);
	return contract;
};
export const checkSign = async () => {
	const wallet = await get_wallet();
	if (wallet.isSignedIn()) {
		return wallet.getAccountId();
	} else {
		return false;
	}
};
export const signin = async () => {
	const wallet = await get_wallet();
	wallet.requestSignIn();
	return wallet.getAccountId();
};
export const sign_out = async () => {
	const wallet = await get_wallet();
	wallet.signOut();
};

export const increment = async () => {
	const contract = await get_contract();
	await contract.increment({});
	return state();
};
export const decrement = async () => {
	const contract = await get_contract();
	await contract.decrement({});
	return state();
};
export const state = async () => {
	const contract = await get_contract();
	const state = await contract.state();
	return state;
};

'''