*GitHub Repository "hermes1108/near-mighty-kernel-republic-nft-smart-contract"*

'''--- Cargo.toml ---
[package]
name = "nft_simple"
version = "0.1.0"
authors = ["Near Inc <hello@nearprotocol.com>"]
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "=4.0.0-pre.4"
serde_json = "1.0"

[profile.release]
codegen-units=1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

'''
'''--- README.md ---
# TBD

'''
'''--- build.sh ---
#!/bin/bash

set -e

RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release

cp target/wasm32-unknown-unknown/release/*.wasm ./res/

'''
'''--- neardev/dev-account.env ---
CONTRACT_NAME=dev-1655883598135-23071225802774
'''
'''--- src/approval.rs ---
use crate::*;
use near_sdk::{ext_contract, Gas};

const GAS_FOR_NFT_APPROVE: Gas = Gas(10_000_000_000_000);
const NO_DEPOSIT: Balance = 0;

pub trait NonFungibleTokenCore {
    //approve an account ID to transfer a token on your behalf
    fn nft_approve(&mut self, token_id: TokenId, account_id: AccountId, msg: Option<String>);

    //check if the passed in account has access to approve the token ID
	fn nft_is_approved(
        &self,
        token_id: TokenId,
        approved_account_id: AccountId,
        approval_id: Option<u64>,
    ) -> bool;

    //revoke a specific account from transferring the token on your behalf
    fn nft_revoke(&mut self, token_id: TokenId, account_id: AccountId);

    //revoke all accounts from transferring the token on your behalf
    fn nft_revoke_all(&mut self, token_id: TokenId);
}

#[ext_contract(ext_non_fungible_approval_receiver)]
trait NonFungibleTokenApprovalsReceiver {
    //cross contract call to an external contract that is initiated during nft_approve
    fn nft_on_approve(
        &mut self,
        token_id: TokenId,
        owner_id: AccountId,
        approval_id: u64,
        msg: String,
    );
}

#[near_bindgen]
impl NonFungibleTokenCore for Contract {

    //allow a specific account ID to approve a token on your behalf
    #[payable]
    fn nft_approve(&mut self, token_id: TokenId, account_id: AccountId, msg: Option<String>) {
        /*
            assert at least one yocto for security reasons - this will cause a redirect to the NEAR wallet.
            The user needs to attach enough to pay for storage on the contract
        */
        assert_at_least_one_yocto();

        //get the token object from the token ID
        let mut token = self.tokens_by_id.get(&token_id).expect("No token");

        //make sure that the person calling the function is the owner of the token
        assert_eq!(
            &env::predecessor_account_id(),
            &token.owner_id,
            "Predecessor must be the token owner."
        );

        //get the next approval ID if we need a new approval
        let approval_id: u64 = token.next_approval_id;

        //check if the account has been approved already for this token
        let is_new_approval = token
            .approved_account_ids
            //insert returns none if the key was not present.  
            .insert(account_id.clone(), approval_id)
            //if the key was not present, .is_none() will return true so it is a new approval.
            .is_none();

        //if it was a new approval, we need to calculate how much storage is being used to add the account.
        let storage_used = if is_new_approval {
            bytes_for_approved_account_id(&account_id)
        //if it was not a new approval, we used no storage.
        } else {
            0
        };

        //increment the token's next approval ID by 1
        token.next_approval_id += 1;
        //insert the token back into the tokens_by_id collection
        self.tokens_by_id.insert(&token_id, &token);

        //refund any excess storage attached by the user. If the user didn't attach enough, panic. 
        refund_deposit(storage_used);

        //if some message was passed into the function, we initiate a cross contract call on the
        //account we're giving access to. 
        if let Some(msg) = msg {
            ext_non_fungible_approval_receiver::nft_on_approve(
                token_id,
                token.owner_id,
                approval_id,
                msg,
                account_id, //contract account we're calling
                NO_DEPOSIT, //NEAR deposit we attach to the call
                env::prepaid_gas() - GAS_FOR_NFT_APPROVE, //GAS we're attaching
            )
            .as_return(); // Returning this promise
        }
    }

    //check if the passed in account has access to approve the token ID
	fn nft_is_approved(
        &self,
        token_id: TokenId,
        approved_account_id: AccountId,
        approval_id: Option<u64>,
    ) -> bool {
        //get the token object from the token_id
        let token = self.tokens_by_id.get(&token_id).expect("No token");

        //get the approval number for the passed in account ID
		let approval = token.approved_account_ids.get(&approved_account_id);

        //if there was some approval ID found for the account ID
        if let Some(approval) = approval {
            //if a specific approval_id was passed into the function
			if let Some(approval_id) = approval_id {
                //return if the approval ID passed in matches the actual approval ID for the account
				approval_id == *approval
            //if there was no approval_id passed into the function, we simply return true
			} else {
				true
			}
        //if there was no approval ID found for the account ID, we simply return false
		} else {
			false
		}
    }

    //revoke a specific account from transferring the token on your behalf 
    #[payable]
    fn nft_revoke(&mut self, token_id: TokenId, account_id: AccountId) {
        //assert that the user attached exactly 1 yoctoNEAR for security reasons
        assert_one_yocto();
        //get the token object using the passed in token_id
        let mut token = self.tokens_by_id.get(&token_id).expect("No token");

        //get the caller of the function and assert that they are the owner of the token
        let predecessor_account_id = env::predecessor_account_id();
        assert_eq!(&predecessor_account_id, &token.owner_id);

        //if the account ID was in the token's approval, we remove it and the if statement logic executes
        if token
            .approved_account_ids
            .remove(&account_id)
            .is_some()
        {
            //refund the funds released by removing the approved_account_id to the caller of the function
            refund_approved_account_ids_iter(predecessor_account_id, [account_id].iter());

            //insert the token back into the tokens_by_id collection with the account_id removed from the approval list
            self.tokens_by_id.insert(&token_id, &token);
        }
    }

    //revoke all accounts from transferring the token on your behalf
    #[payable]
    fn nft_revoke_all(&mut self, token_id: TokenId) {
        //assert that the caller attached exactly 1 yoctoNEAR for security
        assert_one_yocto();

        //get the token object from the passed in token ID
        let mut token = self.tokens_by_id.get(&token_id).expect("No token");
        //get the caller and make sure they are the owner of the tokens
        let predecessor_account_id = env::predecessor_account_id();
        assert_eq!(&predecessor_account_id, &token.owner_id);

        //only revoke if the approved account IDs for the token is not empty
        if !token.approved_account_ids.is_empty() {
            //refund the approved account IDs to the caller of the function
            refund_approved_account_ids(predecessor_account_id, &token.approved_account_ids);
            //clear the approved account IDs
            token.approved_account_ids.clear();
            //insert the token back into the tokens_by_id collection with the approved account IDs cleared
            self.tokens_by_id.insert(&token_id, &token);
        }
    }
}
'''
'''--- src/enumeration.rs ---
use crate::*;

#[near_bindgen]
impl Contract {
    //Query for the total supply of NFTs on the contract
    pub fn nft_total_supply(&self) -> U128 {
        //return the length of the token metadata by ID
        U128(self.token_metadata_by_id.len() as u128)
    }

    //Query for nft tokens on the contract regardless of the owner using pagination
    pub fn nft_tokens(&self, from_index: Option<U128>, limit: Option<u64>) -> Vec<JsonToken> {
        //where to start pagination - if we have a from_index, we'll use that - otherwise start from 0 index
        let start = u128::from(from_index.unwrap_or(U128(0)));

        //iterate through each token using an iterator
        self.token_metadata_by_id.keys()
            //skip to the index we specified in the start variable
            .skip(start as usize) 
            //take the first "limit" elements in the vector. If we didn't specify a limit, use 50
            .take(limit.unwrap_or(50) as usize) 
            //we'll map the token IDs which are strings into Json Tokens
            .map(|token_id| self.nft_token(token_id.clone()).unwrap())
            //since we turned the keys into an iterator, we need to turn it back into a vector to return
            .collect()
    }

    //get the total supply of NFTs for a given owner
    pub fn nft_supply_for_owner(
        &self,
        account_id: AccountId,
    ) -> U128 {
        //get the set of tokens for the passed in owner
        let tokens_for_owner_set = self.tokens_per_owner.get(&account_id);

        //if there is some set of tokens, we'll return the length as a U128
        if let Some(tokens_for_owner_set) = tokens_for_owner_set {
            U128(tokens_for_owner_set.len() as u128)
        } else {
            //if there isn't a set of tokens for the passed in account ID, we'll return 0
            U128(0)
        }
    }

    //Query for all the tokens for an owner
    pub fn nft_tokens_for_owner(
        &self,
        account_id: AccountId,
        from_index: Option<U128>,
        limit: Option<u64>,
    ) -> Vec<JsonToken> {
        //get the set of tokens for the passed in owner
        let tokens_for_owner_set = self.tokens_per_owner.get(&account_id);
        //if there is some set of tokens, we'll set the tokens variable equal to that set
        let tokens = if let Some(tokens_for_owner_set) = tokens_for_owner_set {
            tokens_for_owner_set
        } else {
            //if there is no set of tokens, we'll simply return an empty vector. 
            return vec![];
        };

        //where to start pagination - if we have a from_index, we'll use that - otherwise start from 0 index
        let start = u128::from(from_index.unwrap_or(U128(0)));

        //iterate through the keys vector
        tokens.iter()
            //skip to the index we specified in the start variable
            .skip(start as usize) 
            //take the first "limit" elements in the vector. If we didn't specify a limit, use 50
            .take(limit.unwrap_or(50) as usize) 
            //we'll map the token IDs which are strings into Json Tokens
            .map(|token_id| self.nft_token(token_id.clone()).unwrap())
            //since we turned the keys into an iterator, we need to turn it back into a vector to return
            .collect()
    }
}

'''
'''--- src/events.rs ---
use std::fmt;

use near_sdk::serde::{Deserialize, Serialize};

/// Enum that represents the data type of the EventLog.
/// The enum can either be an NftMint or an NftTransfer.
#[derive(Serialize, Deserialize, Debug)]
#[serde(tag = "event", content = "data")]
#[serde(rename_all = "snake_case")]
#[serde(crate = "near_sdk::serde")]
#[non_exhaustive]
pub enum EventLogVariant {
    NftMint(Vec<NftMintLog>),
    NftTransfer(Vec<NftTransferLog>),
}

/// Interface to capture data about an event
///
/// Arguments:
/// * `standard`: name of standard e.g. nep171
/// * `version`: e.g. 1.0.0
/// * `event`: associate event data
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct EventLog {
    pub standard: String,
    pub version: String,

    // `flatten` to not have "event": {<EventLogVariant>} in the JSON, just have the contents of {<EventLogVariant>}.
    #[serde(flatten)]
    pub event: EventLogVariant,
}

impl fmt::Display for EventLog {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_fmt(format_args!(
            "EVENT_JSON:{}",
            &serde_json::to_string(self).map_err(|_| fmt::Error)?
        ))
    }
}

/// An event log to capture token minting
///
/// Arguments
/// * `owner_id`: "account.near"
/// * `token_ids`: ["1", "abc"]
/// * `memo`: optional message
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct NftMintLog {
    pub owner_id: String,
    pub token_ids: Vec<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<String>,
}

/// An event log to capture token transfer
///
/// Arguments
/// * `authorized_id`: approved account to transfer
/// * `old_owner_id`: "owner.near"
/// * `new_owner_id`: "receiver.near"
/// * `token_ids`: ["1", "12345abc"]
/// * `memo`: optional message
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct NftTransferLog {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub authorized_id: Option<String>,

    pub old_owner_id: String,
    pub new_owner_id: String,
    pub token_ids: Vec<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<String>,
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn nep_format_vector() {
        let expected = r#"EVENT_JSON:{"standard":"nep171","version":"1.0.0","event":"nft_mint","data":[{"owner_id":"foundation.near","token_ids":["aurora","proximitylabs"]},{"owner_id":"user1.near","token_ids":["meme"]}]}"#;
        let log = EventLog {
            standard: "nep171".to_string(),
            version: "1.0.0".to_string(),
            event: EventLogVariant::NftMint(vec![
                NftMintLog {
                    owner_id: "foundation.near".to_owned(),
                    token_ids: vec!["aurora".to_string(), "proximitylabs".to_string()],
                    memo: None,
                },
                NftMintLog {
                    owner_id: "user1.near".to_owned(),
                    token_ids: vec!["meme".to_string()],
                    memo: None,
                },
            ]),
        };
        assert_eq!(expected, log.to_string());
    }

    #[test]
    fn nep_format_mint() {
        let expected = r#"EVENT_JSON:{"standard":"nep171","version":"1.0.0","event":"nft_mint","data":[{"owner_id":"foundation.near","token_ids":["aurora","proximitylabs"]}]}"#;
        let log = EventLog {
            standard: "nep171".to_string(),
            version: "1.0.0".to_string(),
            event: EventLogVariant::NftMint(vec![NftMintLog {
                owner_id: "foundation.near".to_owned(),
                token_ids: vec!["aurora".to_string(), "proximitylabs".to_string()],
                memo: None,
            }]),
        };
        assert_eq!(expected, log.to_string());
    }

    #[test]
    fn nep_format_transfer_all_fields() {
        let expected = r#"EVENT_JSON:{"standard":"nep171","version":"1.0.0","event":"nft_transfer","data":[{"authorized_id":"market.near","old_owner_id":"user1.near","new_owner_id":"user2.near","token_ids":["token"],"memo":"Go Team!"}]}"#;
        let log = EventLog {
            standard: "nep171".to_string(),
            version: "1.0.0".to_string(),
            event: EventLogVariant::NftTransfer(vec![NftTransferLog {
                authorized_id: Some("market.near".to_string()),
                old_owner_id: "user1.near".to_string(),
                new_owner_id: "user2.near".to_string(),
                token_ids: vec!["token".to_string()],
                memo: Some("Go Team!".to_owned()),
            }]),
        };
        assert_eq!(expected, log.to_string());
    }
} 
'''
'''--- src/internal.rs ---
use crate::*;
use near_sdk::{CryptoHash};
use std::mem::size_of;

//convert the royalty percentage and amount to pay into a payout (U128)
pub(crate) fn royalty_to_payout(royalty_percentage: u32, amount_to_pay: Balance) -> U128 {
    U128(royalty_percentage as u128 * amount_to_pay / 10_000u128)
}

//calculate how many bytes the account ID is taking up
pub(crate) fn bytes_for_approved_account_id(account_id: &AccountId) -> u64 {
    // The extra 4 bytes are coming from Borsh serialization to store the length of the string.
    account_id.as_str().len() as u64 + 4 + size_of::<u64>() as u64
}

//refund the storage taken up by passed in approved account IDs and send the funds to the passed in account ID. 
pub(crate) fn refund_approved_account_ids_iter<'a, I>(
    account_id: AccountId,
    approved_account_ids: I, //the approved account IDs must be passed in as an iterator
) -> Promise
where
    I: Iterator<Item = &'a AccountId>,
{
    //get the storage total by going through and summing all the bytes for each approved account IDs
    let storage_released: u64 = approved_account_ids.map(bytes_for_approved_account_id).sum();
    //transfer the account the storage that is released
    Promise::new(account_id).transfer(Balance::from(storage_released) * env::storage_byte_cost())
}

//refund a map of approved account IDs and send the funds to the passed in account ID
pub(crate) fn refund_approved_account_ids(
    account_id: AccountId,
    approved_account_ids: &HashMap<AccountId, u64>,
) -> Promise {
    //call the refund_approved_account_ids_iter with the approved account IDs as keys
    refund_approved_account_ids_iter(account_id, approved_account_ids.keys())
}

//used to generate a unique prefix in our storage collections (this is to avoid data collisions)
pub(crate) fn hash_account_id(account_id: &AccountId) -> CryptoHash {
    //get the default hash
    let mut hash = CryptoHash::default();
    //we hash the account ID and return it
    hash.copy_from_slice(&env::sha256(account_id.as_bytes()));
    hash
}

//used to make sure the user attached exactly 1 yoctoNEAR
pub(crate) fn assert_one_yocto() {
    assert_eq!(
        env::attached_deposit(),
        1,
        "Requires attached deposit of exactly 1 yoctoNEAR",
    )
}

//Assert that the user has attached at least 1 yoctoNEAR (for security reasons and to pay for storage)
pub(crate) fn assert_at_least_one_yocto() {
    assert!(
        env::attached_deposit() >= 1,
        "Requires attached deposit of at least 1 yoctoNEAR",
    )
}

//refund the initial deposit based on the amount of storage that was used up
pub(crate) fn refund_deposit(storage_used: u64) {
    //get how much it would cost to store the information
    let required_cost = env::storage_byte_cost() * Balance::from(storage_used);
    //get the attached deposit
    let attached_deposit = env::attached_deposit();

    //make sure that the attached deposit is greater than or equal to the required cost
    assert!(
        required_cost <= attached_deposit,
        "Must attach {} yoctoNEAR to cover storage",
        required_cost,
    );

    //get the refund amount from the attached deposit - required cost
    let refund = attached_deposit - required_cost;

    //if the refund is greater than 1 yocto NEAR, we refund the predecessor that amount
    if refund > 1 {
        Promise::new(env::predecessor_account_id()).transfer(refund);
    }
}

impl Contract {
    // only owner can call contract by this function.
    pub(crate) fn assert_owner(&self) {
        assert_eq!(
            &env::predecessor_account_id(),
            &self.owner_id,
            "Owner's method"
        );
    }
    //add a token to the set of tokens an owner has
    pub(crate) fn internal_add_token_to_owner(
        &mut self,
        account_id: &AccountId,
        token_id: &TokenId,
    ) {
        //get the set of tokens for the given account
        let mut tokens_set = self.tokens_per_owner.get(account_id).unwrap_or_else(|| {
            //if the account doesn't have any tokens, we create a new unordered set
            UnorderedSet::new(
                StorageKey::TokenPerOwnerInner {
                    //we get a new unique prefix for the collection
                    account_id_hash: hash_account_id(&account_id),
                }
                .try_to_vec()
                .unwrap(),
            )
        });

        //we insert the token ID into the set
        tokens_set.insert(token_id);

        //we insert that set for the given account ID. 
        self.tokens_per_owner.insert(account_id, &tokens_set);
    }

    //remove a token from an owner (internal method and can't be called directly via CLI).
    pub(crate) fn internal_remove_token_from_owner(
        &mut self,
        account_id: &AccountId,
        token_id: &TokenId,
    ) {
        //we get the set of tokens that the owner has
        let mut tokens_set = self
            .tokens_per_owner
            .get(account_id)
            //if there is no set of tokens for the owner, we panic with the following message:
            .expect("Token should be owned by the sender");

        //we remove the the token_id from the set of tokens
        tokens_set.remove(token_id);

        //if the token set is now empty, we remove the owner from the tokens_per_owner collection
        if tokens_set.is_empty() {
            self.tokens_per_owner.remove(account_id);
        } else {
        //if the token set is not empty, we simply insert it back for the account ID. 
            self.tokens_per_owner.insert(account_id, &tokens_set);
        }
    }

    //transfers the NFT to the receiver_id (internal method and can't be called directly via CLI).
    pub(crate) fn internal_transfer(
        &mut self,
        sender_id: &AccountId,
        receiver_id: &AccountId,
        token_id: &TokenId,
        //we introduce an approval ID so that people with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
    ) -> Token {
        //get the token object by passing in the token_id
        let token = self.tokens_by_id.get(token_id).expect("No token");

        //if the sender doesn't equal the owner, we check if the sender is in the approval list
		if sender_id != &token.owner_id {
			//if the token's approved account IDs doesn't contain the sender, we panic
			if !token.approved_account_ids.contains_key(sender_id) {
				env::panic_str("Unauthorized");
			}

			// If they included an approval_id, check if the sender's actual approval_id is the same as the one included
			if let Some(enforced_approval_id) = approval_id {
                //get the actual approval ID
				let actual_approval_id = token
					.approved_account_ids
					.get(sender_id)
                    //if the sender isn't in the map, we panic
					.expect("Sender is not approved account");

                //make sure that the actual approval ID is the same as the one provided
                assert_eq!(
					actual_approval_id, &enforced_approval_id,
					"The actual approval_id {} is different from the given approval_id {}",
					actual_approval_id, enforced_approval_id,
				);
			}
		}

        //we make sure that the sender isn't sending the token to themselves
        assert_ne!(
            &token.owner_id, receiver_id,
            "The token owner and the receiver should be different"
        );

        //we remove the token from it's current owner's set
        self.internal_remove_token_from_owner(&token.owner_id, token_id);
        //we then add the token to the receiver_id's set
        self.internal_add_token_to_owner(receiver_id, token_id);

        //we create a new token struct 
        let new_token = Token {
            owner_id: receiver_id.clone(),
            //reset the approval account IDs
            approved_account_ids: Default::default(),
            next_approval_id: token.next_approval_id,
            //we copy over the royalties from the previous token
            royalty: token.royalty.clone(),
        };
        //insert that new token into the tokens_by_id, replacing the old entry 
        self.tokens_by_id.insert(token_id, &new_token);

        //if there was some memo attached, we log it. 
        if let Some(memo) = memo.as_ref() {
            env::log_str(&format!("Memo: {}", memo).to_string());
        }

        // Default the authorized ID to be None for the logs.
        let mut authorized_id = None;
        //if the approval ID was provided, set the authorized ID equal to the sender
        if approval_id.is_some() {
            authorized_id = Some(sender_id.to_string());
        }

        // Construct the transfer log as per the events standard.
        let nft_transfer_log: EventLog = EventLog {
            // Standard name ("nep171").
            standard: NFT_STANDARD_NAME.to_string(),
            // Version of the standard ("nft-1.0.0").
            version: NFT_METADATA_SPEC.to_string(),
            // The data related with the event stored in a vector.
            event: EventLogVariant::NftTransfer(vec![NftTransferLog {
                // The optional authorized account ID to transfer the token on behalf of the old owner.
                authorized_id,
                // The old owner's account ID.
                old_owner_id: token.owner_id.to_string(),
                // The account ID of the new owner of the token.
                new_owner_id: receiver_id.to_string(),
                // A vector containing the token IDs as strings.
                token_ids: vec![token_id.to_string()],
                // An optional memo to include.
                memo,
            }]),
        };

        // Log the serialized json.
        env::log_str(&nft_transfer_log.to_string());
        
        //return the preivous token object that was transferred.
        token
    }
} 
'''
'''--- src/lib.rs ---
use std::collections::HashMap;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{LazyOption, LookupMap, UnorderedMap, UnorderedSet};
use near_sdk::json_types::{Base64VecU8, U128};
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{
    env, near_bindgen, AccountId, Balance, CryptoHash, PanicOnDefault, Promise, PromiseOrValue,
};

use crate::internal::*;
pub use crate::metadata::*;
pub use crate::mint::*;
pub use crate::nft_core::*;
pub use crate::approval::*;
pub use crate::royalty::*;
pub use crate::events::*;
pub use crate::util::*;

mod internal;
mod approval; 
mod enumeration; 
mod metadata; 
mod mint; 
mod nft_core; 
mod royalty; 
mod events;
mod util;

/// This spec can be treated like a version of the standard.
pub const NFT_METADATA_SPEC: &str = "nft-1.0.0";
/// This is the name of the NFT standard we're using
pub const NFT_STANDARD_NAME: &str = "nep171";

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
    //contract owner
    pub owner_id: AccountId,

    //keeps track of all the token IDs for a given account
    pub tokens_per_owner: LookupMap<AccountId, UnorderedSet<TokenId>>,

    //keeps track of the token struct for a given token ID
    pub tokens_by_id: LookupMap<TokenId, Token>,

    //keeps track of the token metadata for a given token ID
    pub token_metadata_by_id: UnorderedMap<TokenId, TokenMetadata>,

    //keeps track of the metadata for the contract
    pub metadata: LazyOption<NFTContractMetadata>,

    //keeps track of presale status for a given account
    pub whitelist: LookupMap<AccountId, bool>,

    pub presale_minted: LookupMap<AccountId, u128>,
    pub pubsale_minted: LookupMap<AccountId, u128>,
}

/// Helper structure for keys of the persistent collections.
#[derive(BorshSerialize)]
pub enum StorageKey {
    TokensPerOwner,
    TokenPerOwnerInner { account_id_hash: CryptoHash },
    TokensById,
    TokenMetadataById,
    NFTContractMetadata,
    TokensPerType,
    TokensPerTypeInner { token_type_hash: CryptoHash },
    TokenTypesLocked,
    Whitelist,
    PresaleMinted,
    PubsaleMinted,
}

#[near_bindgen]
impl Contract {
    /*
        initialization function (can only be called once).
        this initializes the contract with default metadata so the
        user doesn't have to manually type metadata.
    */
    #[init]
    pub fn new_default_meta(owner_id: AccountId) -> Self {
        //calls the other function "new: with some default metadata and the owner_id passed in 
        Self::new(
            owner_id,
            NFTContractMetadata {
                spec: "nft-1.0.0".to_string(),
                name: "Mighty Kennel Republic".to_string(),
                symbol: "NLs".to_string(),
                icon: Some(String::from("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 288 288'%3E%3Cg id='l' data-name='l'%3E%3Cpath d='M187.58,39.81l-30.1,44.69a3.2,3.2,0,0,0,4.75,4.2L191.86,63a1.2,1.2,0,0,1,2,.61v80.46a1.2,1.2,0,0,1-2.12.47L102.18,47.93A15.35,15.35,0,0,0,90.47,72.5H87.34A15.34,15.34,0,0,0,72,67.64V201.16A15.34,15.34,0,0,0,87.34,216.5h0a15.25,15.25,0,0,0,13.08-7.31l30.1-44.69a3.2,3.2,0,0,0-4.75-4.2L96.14,86a1.2,1.2,0,0,1-2-.11V104.61a1.2,1.2,0,0,1,2.12-.57l69.55,107.23a15.35,15.35,0,0,0,11.71,5.43h3.13A15.34,15.34,0,0,0,156,151.16V87.84A15.34,15.34,0,0,0,170.66,72.5h0A15.35,15.35,0,0,0,187.58,79.81Z'/%3E%3C/g%3E%3C/svg%3E")),
                base_uri: None,
                reference: None,
                reference_hash: None,
            },
        )
    }

    /*
        initialization function (can only be called once).
        this initializes the contract with metadata that was passed in and
        the owner_id. 
    */
    #[init]
    pub fn new(owner_id: AccountId, metadata: NFTContractMetadata) -> Self {
        //create a variable of type Self with all the fields initialized. 
        let this = Self {
            //Storage keys are simply the prefixes used for the collections. This helps avoid data collision
            tokens_per_owner: LookupMap::new(StorageKey::TokensPerOwner.try_to_vec().unwrap()),
            tokens_by_id: LookupMap::new(StorageKey::TokensById.try_to_vec().unwrap()),
            token_metadata_by_id: UnorderedMap::new(
                StorageKey::TokenMetadataById.try_to_vec().unwrap(),
            ),
            //set the owner_id field equal to the passed in owner_id. 
            owner_id,
            metadata: LazyOption::new(
                StorageKey::NFTContractMetadata.try_to_vec().unwrap(),
                Some(&metadata),
            ),
            whitelist: LookupMap::new(StorageKey::Whitelist.try_to_vec().unwrap()),
            presale_minted: LookupMap::new(StorageKey::PresaleMinted.try_to_vec().unwrap()),
            pubsale_minted: LookupMap::new(StorageKey::PubsaleMinted.try_to_vec().unwrap()),
        };

        //return the Contract object
        this
    }

    pub fn update_collection_info(&mut self) {
        let metadata = NFTContractMetadata {
                spec: "MKR NFT-1.0.0".to_string(),
                name: "Mighty Kennel Republic".to_string(),
                symbol: "MKR".to_string(),
                icon: Some(String::from("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32'%3E%3Cpath style='fill:%23fafafa; stroke:none;' d='M0 0L1 1L0 0z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M1 0L0 2L1 0z'/%3E%3Cpath style='fill:%23292929; stroke:none;' d='M2 0L3 1L2 0z'/%3E%3Cpath style='fill:%23030303; stroke:none;' d='M12 21L5 26L4 7C12.258 11.4114 18.6243 29.9562 27.8951 30.963C31.184 31.3201 31.8043 27.3875 31.956 24.9961C32.3449 18.8674 33.2991 -9.06173 23.0193 5.99074C21.9103 7.61468 20.9548 9.28513 20 11L27 6L28 25C19.742 20.5886 13.3757 2.04377 4.10494 1.03704C0.816038 0.67989 0.195724 4.61246 0.0439815 7.00386C-0.343145 13.1048 -1.58328 40.5888 8.94136 26.0193C10.0992 24.4164 11.0403 22.7217 12 21z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M5 0L6 1L5 0z'/%3E%3Cpath style='fill:%23fafafa; stroke:none;' d='M6 0L27 24L27 8L19 13L26 0L6 0z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M26 0L27 1L26 0z'/%3E%3Cpath style='fill:%23292929; stroke:none;' d='M27 0L28 1L27 0M29 0L30 1L29 0z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M30 0L32 2L30 0z'/%3E%3Cpath style='fill:%23fafafa; stroke:none;' d='M31 0L32 1L31 0z'/%3E%3Cpath style='fill:%23292929; stroke:none;' d='M6 1L7 2L6 1z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M25 1L26 2L25 1z'/%3E%3Cpath style='fill:%23292929; stroke:none;' d='M0 2L1 3L0 2z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M7 2L8 3L7 2z'/%3E%3Cpath style='fill:%23292929; stroke:none;' d='M25 2L26 3L25 2M31 2L32 3L31 2z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M8 3L9 4L8 3M24 3L25 4L24 3z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M9 4L10 5L9 4M23 4L24 5L23 4M10 5L12 7L10 5z'/%3E%3Cpath style='fill:%23292929; stroke:none;' d='M23 5L24 6L23 5M10 6L11 7L10 6z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M22 6L23 7L22 6z'/%3E%3Cpath style='fill:%23292929; stroke:none;' d='M26 6L27 25L28 25L26 6M4 7L5 26L6 26L4 7z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M5 7L8 10L5 7z'/%3E%3Cpath style='fill:%23292929; stroke:none;' d='M6 7L7 8L6 7M11 7L12 8L11 7z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M21 7L22 8L21 7z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M25 7L26 8L25 7z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M26 7L27 8L26 7z'/%3E%3Cpath style='fill:%23fafafa; stroke:none;' d='M5 8L5 24L13 19L6 32L26 32L5 8z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M12 8L13 9L12 8z'/%3E%3Cpath style='fill:%23292929; stroke:none;' d='M21 8L22 9L21 8z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M24 8L25 9L24 8M13 9L14 10L13 9M20 9L21 10L20 9z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M23 9L24 10L23 9z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M8 10L9 11L8 10z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M14 10L15 11L14 10M19 10L20 11L19 10z'/%3E%3Cpath style='fill:%23292929; stroke:none;' d='M21 10L19 11L19 12L21 10z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M22 10L23 11L22 10z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M9 11L10 12L9 11z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M15 11L17 13L15 11M21 11L22 12L21 11z'/%3E%3Cpath style='fill:%23292929; stroke:none;' d='M10 12L12 14L10 12M15 12L16 13L15 12z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M19 12L20 13L19 12z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M20 12L21 13L20 12M10 13L11 14L10 13z'/%3E%3Cpath style='fill:%23292929; stroke:none;' d='M16 13L17 14L16 13z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M11 14L12 15L11 14z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M17 14L18 15L17 14z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M12 15L13 16L12 15z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M18 15L19 16L18 15M13 16L14 17L13 16z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M19 16L20 17L19 16z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M14 17L15 18L14 17z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M20 17L22 19L20 17z'/%3E%3Cpath style='fill:%23292929; stroke:none;' d='M15 18L17 20L15 18M20 18L21 19L20 18z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M11 19L10 21L11 19z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M12 19L13 20L12 19z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M15 19L16 20L15 19z'/%3E%3Cpath style='fill:%23292929; stroke:none;' d='M21 19L22 20L21 19M11.6667 20.3333L12.3333 20.6667L11.6667 20.3333z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M16 20L17 21L16 20z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M22 20L23 21L22 20z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M9 21L10 22L9 21M12 21L13 22L12 21M17 21L18 22L17 21z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M23 21L24 22L23 21z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M8 22L9 23L8 22z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M11 22L12 23L11 22M18 22L19 23L18 22z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M24 22L25 23L24 22z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M7 23L8 24L7 23z'/%3E%3Cpath style='fill:%23292929; stroke:none;' d='M10 23L11 24L10 23z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M19 23L20 24L19 23z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M25 23L27 25L25 23M5 24L6 25L5 24z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M6 24L7 25L6 24z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M10 24L11 25L10 24z'/%3E%3Cpath style='fill:%23292929; stroke:none;' d='M20 24L22 26L20 24M25 24L26 25L25 24z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M9 25L10 26L9 25z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M20 25L21 26L20 25z'/%3E%3Cpath style='fill:%23292929; stroke:none;' d='M8 26L9 27L8 26z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M21 26L22 27L21 26M8 27L9 28L8 27M22 27L23 28L22 27z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M7 28L8 29L7 28M23 28L24 29L23 28z'/%3E%3Cpath style='fill:%23292929; stroke:none;' d='M0 29L1 30L0 29M6 29L4 32L6 29z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M24 29L25 30L24 29z'/%3E%3Cpath style='fill:%23292929; stroke:none;' d='M31 29L32 30L31 29z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M0 30L2 32L0 30M6 30L7 31L6 30z'/%3E%3Cpath style='fill:%23292929; stroke:none;' d='M25 30L26 31L25 30z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M31 30L30 32L31 30z'/%3E%3Cpath style='fill:%23fafafa; stroke:none;' d='M0 31L1 32L0 31z'/%3E%3Cpath style='fill:%23292929; stroke:none;' d='M2 31L3 32L2 31z'/%3E%3Cpath style='fill:%239e9e9e; stroke:none;' d='M5 31L6 32L5 31z'/%3E%3Cpath style='fill:%23626262; stroke:none;' d='M26 31L27 32L26 31z'/%3E%3Cpath style='fill:%23292929; stroke:none;' d='M29 31L30 32L29 31z'/%3E%3Cpath style='fill:%23fafafa; stroke:none;' d='M31 31L32 32L31 31z'/%3E%3C/svg%3E")),
                base_uri: None,
                reference: None,
                reference_hash: None,
            };
        self.metadata = LazyOption::new(
                StorageKey::NFTContractMetadata.try_to_vec().unwrap(),
                Some(&metadata),
            );
    }
}
'''
'''--- src/metadata.rs ---
use crate::*;
pub type TokenId = String;
//defines the payout type we'll be returning as a part of the royalty standards.
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Payout {
    pub payout: HashMap<AccountId, U128>,
} 

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize, Clone)]
#[serde(crate = "near_sdk::serde")]
pub struct NFTContractMetadata {
    pub spec: String,              // required, essentially a version like "nft-1.0.0"
    pub name: String,              // required, ex. "Mosaics"
    pub symbol: String,            // required, ex. "MOSIAC"
    pub icon: Option<String>,      // Data URL
    pub base_uri: Option<String>, // Centralized gateway known to have reliable access to decentralized storage assets referenced by `reference` or `media` URLs
    pub reference: Option<String>, // URL to a JSON file with more info
    pub reference_hash: Option<Base64VecU8>, // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.
}

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct TokenMetadata {
    pub title: Option<String>, // ex. "Arch Nemesis: Mail Carrier" or "Parcel #5055"
    pub description: Option<String>, // free-form description
    pub media: Option<String>, // URL to associated media, preferably to decentralized, content-addressed storage
    pub media_hash: Option<Base64VecU8>, // Base64-encoded sha256 hash of content referenced by the `media` field. Required if `media` is included.
    pub copies: Option<u64>, // number of copies of this set of metadata in existence when token was minted.
    pub issued_at: Option<u64>, // When token was issued or minted, Unix epoch in milliseconds
    pub expires_at: Option<u64>, // When token expires, Unix epoch in milliseconds
    pub starts_at: Option<u64>, // When token starts being valid, Unix epoch in milliseconds
    pub updated_at: Option<u64>, // When token was last updated, Unix epoch in milliseconds
    pub extra: Option<String>, // anything extra the NFT wants to store on-chain. Can be stringified JSON.
    pub reference: Option<String>, // URL to an off-chain JSON file with more info.
    pub reference_hash: Option<Base64VecU8>, // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct Token {
    //owner of the token
    pub owner_id: AccountId,
    //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID
    pub approved_account_ids: HashMap<AccountId, u64>,
    //the next approval ID to give out. 
    pub next_approval_id: u64,
    //keep track of the royalty percentages for the token in a hash map
    pub royalty: HashMap<AccountId, u32>,
}

//The Json token is what will be returned from view calls. 
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct JsonToken {
    //token ID
    pub token_id: TokenId,
    //owner of the token
    pub owner_id: AccountId,
    //token metadata
    pub metadata: TokenMetadata,
    //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID
    pub approved_account_ids: HashMap<AccountId, u64>,
    //keep track of the royalty percentages for the token in a hash map
    pub royalty: HashMap<AccountId, u32>,
}

pub trait NonFungibleTokenMetadata {
    //view call for returning the contract metadata
    fn nft_metadata(&self) -> NFTContractMetadata;
}

#[near_bindgen]
impl NonFungibleTokenMetadata for Contract {
    fn nft_metadata(&self) -> NFTContractMetadata {
        self.metadata.get().unwrap()
    }
}
'''
'''--- src/mint.rs ---
use crate::*;

#[near_bindgen]
impl Contract {
    #[payable]
    pub fn nft_mint(
        &mut self,
        token_id: Option<TokenId>,
        // metadata: TokenMetadata,
        receiver_id: AccountId,
        //we add an optional parameter for perpetual royalties
        _perpetual_royalties: Option<HashMap<AccountId, u32>>,
    ) -> String{
        let total_supply:u16 = self.token_metadata_by_id.len().try_into().unwrap();
        assert!(
            total_supply <= 777,
            "Exceeds max nfts"
        );
        let my_token_id = total_supply + 1;
        let token_type = get_type_by_id(my_token_id);
        let caller = env::predecessor_account_id();
        let deposit = env::attached_deposit();
        let curr_time = env::block_timestamp() / 1_000_000;

        const PRESALE_TIME: u64 = 1655838000000; // 13th June 2022 04:00PM UTC
        const PUBSALE_TIME: u64 = 1655841600000; // 13th June 2022 05:00PM UTC
        const PRESALE_PRICE: u128 = 3_880_000_000_000_000_000_000_000; // 3.88 $NEAR
        const PUBSALE_PRICE: u128 = 5_000_000_000_000_000_000_000_000; // 5 $NEAR
        assert!(
            curr_time >= PRESALE_TIME,
            "Presale not started"
        );
        if curr_time < PUBSALE_TIME {
            assert!(
                self.whitelist.contains_key(&caller),
                "Not a whitelist"
            );
            assert!(
                deposit >= PRESALE_PRICE,
                "Insufficient fund for presale"
            );
            assert!(
                !self.presale_minted.contains_key(&caller) || self.presale_minted.get(&caller) <= Some(10),
                "Exceeds max nft in presale"
            );
        }
        else {
            if self.whitelist.contains_key(&caller) {
                assert!(
                    deposit >= PRESALE_PRICE,
                    "Insufficient fund for presale"
                );
            } else {
                assert!(
                    deposit >= PUBSALE_PRICE,
                    "Insufficient fund for public sale"
                );
            }
            assert!(
                !self.pubsale_minted.contains_key(&caller) || self.pubsale_minted.get(&caller) <= Some(10),
                "Exceeds max nft in public sale"
            );
        }

        let metadata = TokenMetadata {
            title: Some(format!("MKR #{}", my_token_id)), // ex. "Arch Nemesis: Mail Carrier" or "Parcel #5055"
            description: Some(String::from("The Mighty Kennel Republic is a collection of randomly generated unique bulldogs living in the Near Blockchain. Their mission is to form a community of artist, developers and blockchain enthusiasts. We want to further innovation by onboarding and supporting them to the Near Ecosystem.")), // free-form description
            media: Some(format!("https://ipfs.io/ipfs/QmS7NwFSJJXf3U4fo5R5q9wvG38PUsB7pJuUsreSHyPoKC/{}.png", my_token_id)), // URL to associated media, preferably to decentralized, content-addressed storage
            media_hash: Some(Base64VecU8(b"VGhpcyBpcyBtZWRpYSBoYXNoLg==".to_vec())), // Base64-encoded sha256 hash of content referenced by the `media` field. Required if `media` is included.
            copies: Some(1), // number of copies of this set of metadata in existence when token was minted.
            issued_at: Some(curr_time), // When token was issued or minted, Unix epoch in milliseconds
            expires_at: None, // When token expires, Unix epoch in milliseconds
            starts_at: None, // When token starts being valid, Unix epoch in milliseconds
            updated_at: None, // When token was last updated, Unix epoch in milliseconds
            extra: Some(format!("{{\"attributes\": [{{\"trait_type\": \"Class\", \"value\": \"{}\" }}]}}", token_type)), // anything extra the NFT wants to store on-chain. Can be stringified JSON.
            reference: Some(format!("https://ipfs.io/ipfs/Qmb6tJ5kr18dJoVAjchnt5dRtSqRyNZzu2tUT2vbkKNE1j/{}.json", my_token_id)), // URL to an off-chain JSON file with more info.
            reference_hash: Some(Base64VecU8(b"QmFzZTY0LWVuY29kZWQgc2hhMjU2IGhhc2ggb2YgSlNPTiBmcm9tIHJlZmVyZW5jZSBmaWVsZC4=".to_vec())), // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.
        };

        let mut final_token_id = format!("{}", my_token_id);
        if let Some(token_id) = token_id {
            final_token_id = token_id;
        }
        //measure the initial storage being used on the contract
        let initial_storage_usage = env::storage_usage();

        // create a royalty map to store in the token
        let mut royalty = HashMap::new();
        let royal: AccountId = "mightykennelrepublic.near".parse().unwrap();
        /*
        // if perpetual royalties were passed into the function: 
        if let Some(perpetual_royalties) = perpetual_royalties {
            //make sure that the length of the perpetual royalties is below 7 since we won't have enough GAS to pay out that many people
            assert!(perpetual_royalties.len() < 7, "Cannot add more than 6 perpetual royalty amounts");

            //iterate through the perpetual royalties and insert the account and amount in the royalty map
            for (account, amount) in perpetual_royalties {
                royalty.insert(account, amount);
            }
        }
        */
        royalty.insert(royal, 500);

        //specify the token struct that contains the owner ID 
        let token = Token {
            //set the owner ID equal to the receiver ID passed into the function
            owner_id: receiver_id,
            //we set the approved account IDs to the default value (an empty map)
            approved_account_ids: Default::default(),
            //the next approval ID is set to 0
            next_approval_id: 0,
            //the map of perpetual royalties for the token (The owner will get 100% - total perpetual royalties)
            royalty,
        };

        //insert the token ID and token struct and make sure that the token doesn't exist
        assert!(
            self.tokens_by_id.insert(&final_token_id, &token).is_none(),
            "Token already exists"
        );

        //insert the token ID and metadata
        self.token_metadata_by_id.insert(&final_token_id, &metadata);

        //call the internal method for adding the token to the owner
        self.internal_add_token_to_owner(&token.owner_id, &final_token_id);

        // Construct the mint log as per the events standard.
        let nft_mint_log: EventLog = EventLog {
            // Standard name ("nep171").
            standard: NFT_STANDARD_NAME.to_string(),
            // Version of the standard ("nft-1.0.0").
            version: NFT_METADATA_SPEC.to_string(),
            // The data related with the event stored in a vector.
            event: EventLogVariant::NftMint(vec![NftMintLog {
                // Owner of the token.
                owner_id: token.owner_id.to_string(),
                // Vector of token IDs that were minted.
                token_ids: vec![final_token_id.to_string()],
                // An optional memo to include.
                memo: None,
            }]),
        };

        // Log the serialized json.
        env::log_str(&nft_mint_log.to_string());
        if curr_time > PRESALE_TIME && curr_time < PUBSALE_TIME {
            if self.presale_minted.contains_key(&caller) {
                let minted = self.presale_minted.get(&caller).unwrap();
                self.presale_minted.remove(&caller.clone().into());
                self.presale_minted.insert(&caller.clone().into(), &(minted + 1));
            } else {
                self.presale_minted.insert(&caller.clone().into(), &(1));
            }
        } else {
            if self.pubsale_minted.contains_key(&caller) {
                let minted = self.pubsale_minted.get(&caller).unwrap();
                self.pubsale_minted.remove(&caller.clone().into());
                self.pubsale_minted.insert(&caller.clone().into(), &(minted + 1));
            } else {
                self.pubsale_minted.insert(&caller.clone().into(), &(1));
            }
        }
        nft_mint_log.to_string()
    }

    pub fn add_whitelist(&mut self, account_id: AccountId) {
        self.assert_owner();
        self.whitelist.insert(&account_id, &(true));
    }

    pub fn remove_whitelist(&mut self, account_id: AccountId) {
        self.assert_owner();
        self.whitelist.remove(&account_id);
    }

    pub fn add_whitelists(&mut self, account_ids: Vec<AccountId>) {
        self.assert_owner();
        for account_id in account_ids {
            if !self.whitelist.contains_key(&account_id) {
                self.whitelist.insert(&account_id, &(true));
            }
        }
    }

    pub fn remove_whitelists(&mut self, account_ids: Vec<AccountId>) {
        self.assert_owner();
        for account_id in account_ids {
            if self.whitelist.contains_key(&account_id) {
                self.whitelist.remove(&account_id);
            }
        }
    }

    pub fn is_whitelist(&self, account_id: AccountId) -> bool {
        return self.whitelist.contains_key(&account_id);
    }

    pub fn get_sale_state(&self) -> u16 {
        let curr_time = env::block_timestamp() / 1_000_000;
        const PRESALE_TIME: u64 = 1655838000000; // 13th June 2022 04:00PM UTC
        const PUBSALE_TIME: u64 = 1655841600000; // 13th June 2022 05:00PM UTC
        if curr_time < PRESALE_TIME {
            return 0;
        } else if curr_time > PRESALE_TIME && curr_time < PUBSALE_TIME {
            return 1;
        } else {
            return 2;
        }
    }

    pub fn get_curr_time(&self) -> u64 {
        return env::block_timestamp() / 1_000_000;
    }

    pub fn get_total_supply(&self) -> u16 {
        return self.token_metadata_by_id.len().try_into().unwrap();
    }

    pub fn get_presale_amount(&self, account_id: AccountId) -> u128 {
        if self.presale_minted.contains_key(&account_id) {
            return self.presale_minted.get(&account_id).unwrap();
        }
        return 0;
    }

    pub fn get_pubsale_amount(&self, account_id: AccountId) -> u128 {
        if self.pubsale_minted.contains_key(&account_id) {
            return self.pubsale_minted.get(&account_id).unwrap();
        }
        return 0;
    }

    pub fn get_metadatas(&self) -> Vec<TokenMetadata> {
        let mut result:Vec<TokenMetadata> = Vec::new();
        let total_supply:u16 = self.token_metadata_by_id.len().try_into().unwrap();
        let mut token_id:TokenId;
        let mut metadata:TokenMetadata;
        for i in 1..total_supply + 1 {
            token_id = format!("{}", i);
            metadata = self.token_metadata_by_id.get(&token_id).unwrap();
            result.push(metadata);
        }
        return result;
    }

    pub fn fix_metadatas(&mut self) {
        let total_supply:u16 = self.token_metadata_by_id.len().try_into().unwrap();
        let mut token_id:TokenId;
        let mut metadata:TokenMetadata;
        for i in 1..total_supply + 1 {
            token_id = format!("{}", i);
            metadata = self.token_metadata_by_id.get(&token_id).unwrap();
            metadata.media = Some(format!("https://ipfs.io/ipfs/QmS7NwFSJJXf3U4fo5R5q9wvG38PUsB7pJuUsreSHyPoKC/{}.png", token_id));
            self.token_metadata_by_id.remove(&token_id);
            self.token_metadata_by_id.insert(&token_id, &metadata);
        }
    }
}
'''
'''--- src/nft_core.rs ---
use crate::*;
use near_sdk::{ext_contract, Gas, PromiseResult};

const GAS_FOR_RESOLVE_TRANSFER: Gas = Gas(10_000_000_000_000);
const GAS_FOR_NFT_TRANSFER_CALL: Gas = Gas(25_000_000_000_000 + GAS_FOR_RESOLVE_TRANSFER.0);
const MIN_GAS_FOR_NFT_TRANSFER_CALL: Gas = Gas(100_000_000_000_000);
const NO_DEPOSIT: Balance = 0;

pub trait NonFungibleTokenCore {
    //transfers an NFT to a receiver ID
    fn nft_transfer(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce an approval ID so that people with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
    );

    //transfers an NFT to a receiver and calls a function on the receiver ID's contract
    /// Returns `true` if the token was transferred from the sender's account.
    fn nft_transfer_call(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce an approval ID so that people with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
        msg: String,
    ) -> PromiseOrValue<bool>;

    //get information about the NFT token passed in
    fn nft_token(&self, token_id: TokenId) -> Option<JsonToken>;
}

#[ext_contract(ext_non_fungible_token_receiver)]
trait NonFungibleTokenReceiver {
    //Method stored on the receiver contract that is called via cross contract call when nft_transfer_call is called
    /// Returns `true` if the token should be returned back to the sender.
    fn nft_on_transfer(
        &mut self,
        sender_id: AccountId,
        previous_owner_id: AccountId,
        token_id: TokenId,
        msg: String,
    ) -> Promise;
}

#[ext_contract(ext_self)]
trait NonFungibleTokenResolver {
    /*
        resolves the promise of the cross contract call to the receiver contract
        this is stored on THIS contract and is meant to analyze what happened in the cross contract call when nft_on_transfer was called
        as part of the nft_transfer_call method
    */
    fn nft_resolve_transfer(
        &mut self,
        //we introduce an authorized ID for logging the transfer event
        authorized_id: Option<String>,
        owner_id: AccountId,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce the approval map so we can keep track of what the approvals were before the transfer
        approved_account_ids: HashMap<AccountId, u64>,
        //we introduce a memo for logging the transfer event
        memo: Option<String>,
    ) -> bool;
}

/*
    resolves the promise of the cross contract call to the receiver contract
    this is stored on THIS contract and is meant to analyze what happened in the cross contract call when nft_on_transfer was called
    as part of the nft_transfer_call method
*/ 
trait NonFungibleTokenResolver {
    fn nft_resolve_transfer(
        &mut self,
        //we introduce an authorized ID for logging the transfer event
        authorized_id: Option<String>,
        owner_id: AccountId,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce the approval map so we can keep track of what the approvals were before the transfer
        approved_account_ids: HashMap<AccountId, u64>,
        //we introduce a memo for logging the transfer event
        memo: Option<String>,
    ) -> bool;
}

#[near_bindgen]
impl NonFungibleTokenCore for Contract {

    //implementation of the nft_transfer method. This transfers the NFT from the current owner to the receiver. 
    #[payable]
    fn nft_transfer(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce an approval ID so that people with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
    ) {
        //assert that the user attached exactly 1 yoctoNEAR. This is for security and so that the user will be redirected to the NEAR wallet. 
        assert_one_yocto();
        //get the sender to transfer the token from the sender to the receiver
        let sender_id = env::predecessor_account_id();

        //call the internal transfer method and get back the previous token so we can refund the approved account IDs
        let previous_token = self.internal_transfer(
            &sender_id,
            &receiver_id,
            &token_id,
            approval_id,
            memo,
        );

        //we refund the owner for releasing the storage used up by the approved account IDs
        refund_approved_account_ids(
            previous_token.owner_id.clone(),
            &previous_token.approved_account_ids,
        );
    }

    //implementation of the transfer call method. This will transfer the NFT and call a method on the reciver_id contract
    #[payable]
    fn nft_transfer_call(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce an approval ID so that people with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
        msg: String,
    ) -> PromiseOrValue<bool> {
        //assert that the user attached exactly 1 yocto for security reasons. 
        assert_one_yocto();

        //get the GAS attached to the call
        let attached_gas = env::prepaid_gas();

        /*
            make sure that the attached gas is greater than the minimum GAS for NFT transfer call.
            This is to ensure that the cross contract call to nft_on_transfer won't cause a prepaid GAS error.
            If this happens, the event will be logged in internal_transfer but the actual transfer logic will be
            reverted due to the panic. This will result in the databases thinking the NFT belongs to the wrong person.
        */
        assert!(
            attached_gas >= MIN_GAS_FOR_NFT_TRANSFER_CALL,
            "You cannot attach less than {:?} Gas to nft_transfer_call",
            MIN_GAS_FOR_NFT_TRANSFER_CALL
        );

        //get the sender ID 
        let sender_id = env::predecessor_account_id();

        //transfer the token and get the previous token object
        let previous_token = self.internal_transfer(
            &sender_id,
            &receiver_id,
            &token_id,
            approval_id,
            memo.clone(),
        );

        //default the authorized_id to none
        let mut authorized_id = None; 
        //if the sender isn't the owner of the token, we set the authorized ID equal to the sender.
        if sender_id != previous_token.owner_id {
            authorized_id = Some(sender_id.to_string());
        }

        // Initiating receiver's call and the callback
        ext_non_fungible_token_receiver::nft_on_transfer(
            sender_id,
            previous_token.owner_id.clone(),
            token_id.clone(),
            msg,
            receiver_id.clone(), //contract account to make the call to
            NO_DEPOSIT, //attached deposit
            env::prepaid_gas() - GAS_FOR_NFT_TRANSFER_CALL, //attached GAS
        )
        //we then resolve the promise and call nft_resolve_transfer on our own contract
        .then(ext_self::nft_resolve_transfer(
            authorized_id, // we introduce an authorized ID so that we can log the transfer
            previous_token.owner_id,
            receiver_id,
            token_id,
            previous_token.approved_account_ids,
            memo, // we introduce a memo for logging in the events standard
            env::current_account_id(), //contract account to make the call to
            NO_DEPOSIT, //attached deposit
            GAS_FOR_RESOLVE_TRANSFER, //GAS attached to the call
        )).into()
    }

    //get the information for a specific token ID
    fn nft_token(&self, token_id: TokenId) -> Option<JsonToken> {
        //if there is some token ID in the tokens_by_id collection
        if let Some(token) = self.tokens_by_id.get(&token_id) {
            //we'll get the metadata for that token
            let metadata = self.token_metadata_by_id.get(&token_id).unwrap();
            //we return the JsonToken (wrapped by Some since we return an option)
            Some(JsonToken {
                token_id,
                owner_id: token.owner_id,
                metadata,
                approved_account_ids: token.approved_account_ids,
                royalty: token.royalty,
            })
        } else { //if there wasn't a token ID in the tokens_by_id collection, we return None
            None
        }
    }
}

#[near_bindgen]
impl NonFungibleTokenResolver for Contract {
    //resolves the cross contract call when calling nft_on_transfer in the nft_transfer_call method
    //returns true if the token was successfully transferred to the receiver_id
    #[private]
    fn nft_resolve_transfer(
        &mut self,
        //we introduce an authorized ID for logging the transfer event
        authorized_id: Option<String>,
        owner_id: AccountId,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce the approval map so we can keep track of what the approvals were before the transfer
        approved_account_ids: HashMap<AccountId, u64>,
        //we introduce a memo for logging the transfer event
        memo: Option<String>,
    ) -> bool {
        // Whether receiver wants to return token back to the sender, based on `nft_on_transfer`
        // call result.
        if let PromiseResult::Successful(value) = env::promise_result(0) {
            //As per the standard, the nft_on_transfer should return whether we should return the token to it's owner or not
            if let Ok(return_token) = near_sdk::serde_json::from_slice::<bool>(&value) {
                //if we need don't need to return the token, we simply return true meaning everything went fine
                if !return_token {
                    /* 
                        since we've already transferred the token and nft_on_transfer returned false, we don't have to 
                        revert the original transfer and thus we can just return true since nothing went wrong.
                    */
                    //we refund the owner for releasing the storage used up by the approved account IDs
                    refund_approved_account_ids(owner_id, &approved_account_ids);
                    return true;
                }
            }
        }

        //get the token object if there is some token object
        let mut token = if let Some(token) = self.tokens_by_id.get(&token_id) {
            if token.owner_id != receiver_id {
                //we refund the owner for releasing the storage used up by the approved account IDs
                refund_approved_account_ids(owner_id, &approved_account_ids);
                // The token is not owner by the receiver anymore. Can't return it.
                return true;
            }
            token
        //if there isn't a token object, it was burned and so we return true
        } else {
            //we refund the owner for releasing the storage used up by the approved account IDs
            refund_approved_account_ids(owner_id, &approved_account_ids);
            return true;
        };

        //we remove the token from the receiver
        self.internal_remove_token_from_owner(&receiver_id.clone(), &token_id);
        //we add the token to the original owner
        self.internal_add_token_to_owner(&owner_id, &token_id);

        //we change the token struct's owner to be the original owner 
        token.owner_id = owner_id.clone();

        //we refund the receiver any approved account IDs that they may have set on the token
        refund_approved_account_ids(receiver_id.clone(), &token.approved_account_ids);
        //reset the approved account IDs to what they were before the transfer
        token.approved_account_ids = approved_account_ids;

        //we inset the token back into the tokens_by_id collection
        self.tokens_by_id.insert(&token_id, &token);

        /*
            We need to log that the NFT was reverted back to the original owner.
            The old_owner_id will be the receiver and the new_owner_id will be the
            original owner of the token since we're reverting the transfer.
        */
        let nft_transfer_log: EventLog = EventLog {
            // Standard name ("nep171").
            standard: NFT_STANDARD_NAME.to_string(),
            // Version of the standard ("nft-1.0.0").
            version: NFT_METADATA_SPEC.to_string(),
            // The data related with the event stored in a vector.
            event: EventLogVariant::NftTransfer(vec![NftTransferLog {
                // The optional authorized account ID to transfer the token on behalf of the old owner.
                authorized_id,
                // The old owner's account ID.
                old_owner_id: receiver_id.to_string(),
                // The account ID of the new owner of the token.
                new_owner_id: owner_id.to_string(),
                // A vector containing the token IDs as strings.
                token_ids: vec![token_id.to_string()],
                // An optional memo to include.
                memo,
            }]),
        };

        //we perform the actual logging
        env::log_str(&nft_transfer_log.to_string());

        //return false
        false
    }
}
'''
'''--- src/royalty.rs ---
use crate::*;

pub trait NonFungibleTokenCore {
    //calculates the payout for a token given the passed in balance. This is a view method
    fn nft_payout(&self, token_id: TokenId, balance: U128, max_len_payout: u32) -> Payout;
    
    //transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. 
    fn nft_transfer_payout(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        approval_id: u64,
        memo: Option<String>,
        balance: U128,
        max_len_payout: u32,
    ) -> Payout;
}

#[near_bindgen]
impl NonFungibleTokenCore for Contract {

    //calculates the payout for a token given the passed in balance. This is a view method
    fn nft_payout(&self, token_id: TokenId, balance: U128, max_len_payout: u32) -> Payout {
        //get the token object
		let token = self.tokens_by_id.get(&token_id).expect("No token");

        //get the owner of the token
        let owner_id = token.owner_id;
        //keep track of the total perpetual royalties
        let mut total_perpetual = 0;
        //get the u128 version of the passed in balance (which was U128 before)
        let balance_u128 = u128::from(balance);
		//keep track of the payout object to send back
        let mut payout_object = Payout {
            payout: HashMap::new()
        };
        //get the royalty object from token
		let royalty = token.royalty;

        //make sure we're not paying out to too many people (GAS limits this)
		assert!(royalty.len() as u32 <= max_len_payout, "Market cannot payout to that many receivers");

        //go through each key and value in the royalty object
		for (k, v) in royalty.iter() {
            //get the key
			let key = k.clone();
            //only insert into the payout if the key isn't the token owner (we add their payout at the end)
			if key != owner_id {
                //
				payout_object.payout.insert(key, royalty_to_payout(*v, balance_u128));
				total_perpetual += *v;
			}
		}

		// payout to previous owner who gets 100% - total perpetual royalties
		payout_object.payout.insert(owner_id, royalty_to_payout(10000 - total_perpetual, balance_u128));

        //return the payout object
		payout_object
	}

    //transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. 
    #[payable]
    fn nft_transfer_payout(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        approval_id: u64,
        memo: Option<String>,
        balance: U128,
        max_len_payout: u32,
    ) -> Payout { 
        //assert that the user attached 1 yocto NEAR for security reasons
        assert_one_yocto();
        //get the sender ID
        let sender_id = env::predecessor_account_id();
        //transfer the token to the passed in receiver and get the previous token object back
        let previous_token = self.internal_transfer(
            &sender_id,
            &receiver_id,
            &token_id,
            Some(approval_id),
            memo,
        );

        //refund the previous token owner for the storage used up by the previous approved account IDs
        refund_approved_account_ids(
            previous_token.owner_id.clone(),
            &previous_token.approved_account_ids,
        );

        //get the owner of the token
        let owner_id = previous_token.owner_id;
        //keep track of the total perpetual royalties
        let mut total_perpetual = 0;
        //get the u128 version of the passed in balance (which was U128 before)
        let balance_u128 = u128::from(balance);
		//keep track of the payout object to send back
        let mut payout_object = Payout {
            payout: HashMap::new()
        };
        //get the royalty object from token
		let royalty = previous_token.royalty;

        //make sure we're not paying out to too many people (GAS limits this)
		assert!(royalty.len() as u32 <= max_len_payout, "Market cannot payout to that many receivers");

        //go through each key and value in the royalty object
		for (k, v) in royalty.iter() {
            //get the key
			let key = k.clone();
            //only insert into the payout if the key isn't the token owner (we add their payout at the end)
			if key != owner_id {
                //
				payout_object.payout.insert(key, royalty_to_payout(*v, balance_u128));
				total_perpetual += *v;
			}
		}

		// payout to previous owner who gets 100% - total perpetual royalties
		payout_object.payout.insert(owner_id, royalty_to_payout(10000 - total_perpetual, balance_u128));

        //return the payout object
		payout_object
    }
}
'''
'''--- src/util.rs ---
pub const RAND_TOKEN_IDS: [u16; 2000] = [
569, 1241, 1421, 915, 4, 1266, 1561, 1318, 1786, 1922, 2000, 818, 42, 1392, 1842, 216, 1412, 1370, 747, 1021, 513, 
1343, 33, 1366, 617, 1661, 101, 91, 557, 1905, 1252, 402, 792, 1118, 1081, 1737, 392, 438, 434, 1099, 1450, 1872, 1315, 
1016, 1509, 1322, 1325, 707, 876, 1345, 1721, 1623, 1667, 763, 1207, 961, 286, 743, 964, 1904, 93, 983, 533, 1613, 1090, 
499, 372, 1800, 672, 115, 1407, 830, 1957, 1733, 82, 404, 1398, 616, 279, 1736, 1608, 968, 1336, 1588, 1256, 1267, 1859, 
1015, 341, 436, 1279, 1088, 1170, 166, 1971, 1707, 1978, 26, 1575, 1889, 16, 1717, 1436, 397, 262, 1040, 1780, 519, 
1214, 1179, 1101, 1818, 579, 1789, 1898, 1160, 686, 522, 1651, 801, 1809, 1257, 418, 1525, 1506, 143, 1742, 755, 207, 
843, 816, 1237, 1642, 1079, 1293, 535, 1286, 1253, 1674, 528, 1505, 684, 227, 544, 608, 1280, 1005, 61, 1274, 1544, 556, 
1763, 1806, 484, 711, 475, 1493, 1238, 928, 1240, 1522, 1572, 593, 1791, 1745, 65, 473, 1310, 1475, 1111, 618, 1635, 
1927, 943, 1176, 1604, 664, 11, 1459, 629, 86, 838, 1466, 675, 1298, 1379, 1867, 1496, 1195, 1868, 1906, 782, 1377, 426, 
479, 630, 416, 1037, 1783, 396, 399, 636, 206, 871, 251, 1389, 972, 156, 1367, 373, 1332, 270, 1675, 1841, 31, 1162, 
133, 1003, 1955, 702, 1936, 1719, 906, 1224, 410, 666, 107, 1659, 1041, 713, 720, 108, 1229, 99, 225, 1847, 927, 1557, 
1774, 451, 274, 858, 1474, 1963, 1461, 1534, 1624, 282, 427, 1202, 1138, 305, 1126, 1860, 1917, 1152, 1770, 69, 1495, 
587, 604, 102, 1026, 642, 683, 1057, 1247, 1047, 1761, 633, 935, 605, 344, 1480, 184, 594, 612, 1180, 130, 1952, 1929, 
510, 1792, 1494, 1125, 773, 1245, 1752, 123, 1108, 260, 1617, 1967, 1937, 1722, 1570, 1909, 1134, 701, 1275, 1995, 447, 
967, 161, 391, 1012, 909, 841, 1843, 1862, 543, 1990, 1242, 331, 800, 1104, 530, 30, 680, 1650, 32, 419, 1524, 917, 27, 
1852, 1151, 432, 72, 1365, 1696, 1137, 1039, 1409, 1173, 1626, 1121, 1112, 778, 649, 1291, 1023, 1812, 596, 1087, 844, 
1, 1630, 1969, 1236, 1593, 659, 367, 529, 805, 913, 542, 959, 553, 132, 320, 1424, 306, 98, 340, 1882, 79, 1804, 1886, 
1321, 1248, 1652, 846, 1945, 1853, 548, 44, 674, 1165, 872, 125, 765, 1451, 839, 1731, 1335, 1979, 1171, 1050, 681, 
592, 1832, 1075, 300, 1698, 656, 627, 744, 1725, 994, 1919, 151, 1368, 1210, 226, 1059, 523, 952, 1802, 599, 110, 657, 
934, 322, 1058, 813, 1056, 1454, 991, 39, 355, 1350, 1187, 1941, 454, 825, 831, 1344, 203, 379, 1878, 1228, 1352, 273, 
239, 1907, 1489, 487, 1596, 506, 1155, 1007, 1858, 1456, 1028, 1808, 471, 1177, 880, 789, 1960, 573, 536, 1400, 476, 
1730, 387, 1769, 884, 1532, 309, 1357, 95, 1581, 992, 167, 1239, 1150, 571, 152, 1668, 1404, 1130, 1890, 1845, 1201, 
264, 774, 1603, 515, 1983, 1455, 597, 501, 308, 689, 957, 824, 1518, 1364, 1411, 459, 323, 1810, 1796, 104, 1074, 1362, 
734, 1272, 1363, 939, 73, 307, 894, 653, 269, 1360, 892, 853, 261, 1206, 1249, 1183, 24, 1816, 1598, 1399, 1481, 1255, 
1002, 78, 1870, 1536, 1418, 1606, 111, 1086, 758, 491, 1222, 1066, 303, 1307, 595, 956, 645, 1200, 1094, 1647, 1153, 
142, 806, 1209, 1879, 371, 1428, 1420, 1109, 508, 987, 1375, 911, 1319, 1346, 1349, 1085, 1268, 1504, 297, 1966, 1930, 
405, 1413, 1278, 190, 1053, 1655, 978, 1072, 1218, 393, 990, 113, 406, 1408, 295, 1427, 1531, 1514, 729, 100, 1693, 
769, 1038, 231, 187, 183, 1887, 1326, 83, 302, 762, 232, 1013, 1944, 643, 866, 353, 217, 1483, 632, 1143, 1133, 1423, 
1031, 258, 88, 1897, 1689, 1974, 64, 1464, 312, 857, 1711, 328, 1106, 899, 655, 1819, 771, 398, 321, 783, 1949, 1142, 
709, 1018, 293, 214, 1226, 1164, 1643, 1914, 22, 1741, 1285, 574, 1190, 1410, 49, 1528, 234, 503, 1986, 314, 1837, 482, 
1084, 1546, 219, 467, 568, 976, 290, 1283, 873, 1149, 139, 1701, 1338, 746, 1829, 502, 1135, 76, 932, 1277, 1096, 241, 
521, 1984, 1501, 698, 584, 673, 357, 1458, 313, 1082, 1805, 1029, 1542, 1746, 1355, 590, 1813, 1584, 1574, 1110, 1154, 
465, 51, 588, 128, 1472, 919, 1419, 1009, 785, 425, 68, 495, 1866, 347, 1699, 1975, 1431, 1264, 1605, 1577, 1391, 209, 
797, 45, 1684, 766, 1743, 1679, 1324, 284, 654, 834, 1855, 938, 280, 1462, 793, 829, 1498, 712, 511, 893, 200, 1749, 
1953, 55, 1527, 837, 537, 413, 1131, 1634, 254, 963, 1306, 1182, 1144, 738, 1386, 1981, 356, 370, 567, 202, 15, 325, 
756, 1232, 174, 332, 94, 337, 1705, 256, 440, 220, 993, 360, 531, 1768, 821, 221, 614, 1993, 1482, 1976, 980, 1095, 
147, 1246, 41, 639, 1815, 1760, 1446, 1980, 944, 912, 1683, 1764, 181, 1692, 1645, 1549, 1540, 1158, 1747, 120, 682, 
1848, 507, 575, 310, 1884, 856, 46, 452, 710, 1128, 1523, 807, 1449, 1469, 1507, 212, 693, 1402, 1091, 255, 1127, 414, 
119, 330, 1940, 1923, 1627, 1488, 647, 1235, 981, 1353, 335, 965, 1383, 1548, 48, 696, 606, 1287, 25, 395, 1553, 1947, 
1393, 1064, 185, 842, 444, 1757, 554, 47, 50, 394, 540, 998, 1193, 388, 1033, 819, 420, 1467, 1019, 796, 1946, 971, 
277, 731, 114, 947, 1024, 1100, 848, 708, 1989, 287, 1098, 580, 1217, 598, 814, 646, 541, 381, 74, 1560, 492, 607, 
1569, 1900, 1203, 358, 1417, 1695, 1331, 1503, 1740, 240, 36, 714, 237, 87, 526, 1893, 1723, 601, 890, 263, 466, 1625, 
940, 1116, 1704, 1629, 1709, 1580, 333, 1615, 1422, 1765, 742, 96, 89, 705, 1374, 1585, 882, 804, 650, 1223, 1895, 21, 
1323, 480, 1666, 1756, 1395, 60, 877, 1915, 1259, 1835, 1885, 160, 988, 1934, 1329, 1962, 791, 1672, 570, 1330, 619, 
948, 109, 1192, 1309, 1788, 267, 752, 283, 485, 272, 1718, 827, 1212, 609, 867, 1508, 1093, 1564, 671, 1797, 985, 336, 
907, 572, 1824, 383, 165, 1516, 679, 1708, 469, 854, 136, 246, 23, 1925, 904, 1221, 896, 415, 767, 1849, 1468, 1782, 
1861, 1452, 561, 1102, 637, 658, 63, 250, 180, 1902, 1356, 134, 1644, 1051, 252, 493, 874, 1602, 122, 455, 253, 
733, 945, 623, 1017, 979, 20, 1660, 334, 470, 474, 1595, 1308, 375, 363, 1406, 576, 458, 1712, 922, 1113, 57, 799, 
1640, 1738, 199, 622, 1589, 626, 1369, 401, 1694, 210, 1781, 1384, 10, 931, 652, 591, 1020, 1371, 1205, 942, 621, 339, 
1052, 1899, 1844, 1317, 460, 1563, 448, 1004, 80, 1714, 802, 222, 694, 1271, 560, 28, 412, 1912, 1856, 901, 144, 692, 
1775, 105, 1713, 740, 1216, 1558, 70, 1662, 641, 1188, 268, 1185, 1394, 326, 1225, 58, 1304, 173, 1114, 137, 1726, 826, 
727, 247, 1478, 1513, 725, 665, 760, 925, 84, 1068, 1479, 439, 1799, 461, 1597, 457, 380, 1430, 149, 1000, 1767, 850, 
1901, 929, 817, 851, 1646, 218, 1619, 1618, 1415, 400, 1333, 969, 1258, 1435, 201, 581, 670, 953, 1136, 798, 1036, 
1157, 1970, 1517, 898, 1299, 291, 463, 1700, 168, 316, 429, 71, 369, 951, 1566, 1682, 1161, 823, 1811, 648, 259, 1396, 
1372, 304, 1262, 421, 1339, 852, 1639, 836, 208, 1755, 1579, 1871, 1211, 182, 1443, 1294, 2, 1231, 1080, 1739, 1043, 
1208, 1965, 691, 1687, 1612, 1105, 1055, 1334, 1320, 35, 298, 1778, 669, 878, 868, 271, 1502, 973, 1425, 748, 1954, 
794, 1453, 1537, 780, 1628, 40, 59, 1609, 77, 1956, 845, 1985, 1826, 1388, 1814, 1463, 751, 1772, 296, 1378, 1834, 
750, 600, 999, 1998, 1827, 1146, 1724, 1103, 1347, 1864, 1172, 1373, 1073, 1213, 135, 1576, 602, 301, 534, 828, 1006, 
1181, 1526, 914, 118, 958, 1676, 141, 545, 1244, 281, 1273, 582, 1243, 430, 887, 861, 1803, 1828, 583, 1065, 1658, 
194, 1690, 1653, 1732, 433, 244, 1067, 527, 423, 327, 1562, 1671, 1649, 615, 294, 1968, 514, 1964, 1069, 717, 1881, 
1754, 1303, 704, 1174, 1048, 564, 620, 1833, 703, 1586, 881, 862, 1831, 17, 1070, 1441, 719, 1759, 538, 1030, 1751, 
732, 481, 1477, 754, 1850, 1044, 319, 127, 1204, 129, 497, 888, 472, 1538, 1578, 1305, 1521, 1823, 1550, 1677, 1920, 
75, 278, 803, 1269, 1582, 154, 1263, 1987, 1918, 764, 668, 759, 288, 589, 1529, 329, 1773, 1060, 38, 362, 910, 1282, 
718, 378, 1484, 97, 512, 1390, 1485, 348, 1215, 1444, 610, 450, 205, 1168, 676, 233, 238, 685, 1519, 248, 54, 1117, 
1011, 1727, 1556, 549, 551, 1903, 883, 153, 85, 984, 1385, 92, 150, 895, 1197, 1123, 376, 1728, 1750, 870, 1027, 1132, 
624, 1801, 1254, 1491, 695, 53, 384, 532, 1097, 505, 1681, 1414, 1857, 660, 1583, 1460, 634, 1328, 1996, 159, 1632, 
661, 365, 1691, 869, 1594, 1189, 177, 1656, 431, 249, 1620, 178, 243, 787, 1380, 299, 1194, 1313, 1913, 745, 1991, 
1178, 1077, 1863, 749, 428, 975, 112, 962, 1045, 728, 121, 1163, 352, 442, 1341, 1124, 1854, 810, 1716, 1568, 1530, 
518, 1951, 1300, 62, 1533, 1545, 213, 52, 663, 768, 1251, 1552, 1497, 1686, 586, 1376, 667, 1875, 103, 1942, 6, 106, 
753, 1492, 351, 930, 955, 490, 66, 790, 5, 1490, 1220, 409, 1434, 1465, 539, 275, 832, 1014, 1678, 435, 197, 1076, 
1276, 1429, 169, 1416, 1779, 757, 1063, 145, 550, 1358, 770, 245, 1316, 1457, 1734, 215, 1817, 812, 1762, 188, 368, 
1869, 1559, 486, 687, 1191, 625, 1148, 7, 289, 726, 1715, 840, 644, 1437, 446, 56, 1932, 464, 1610, 1260, 1145, 885, 
366, 1924, 1622, 739, 517, 996, 1825, 126, 1159, 12, 923, 1565, 936, 875, 1141, 847, 891, 524, 924, 730, 822, 1688, 
1641, 1442, 986, 1140, 849, 359, 1958, 235, 468, 1520, 1636, 795, 1139, 772, 1512, 229, 905, 946, 1295, 148, 1877, 
1874, 1401, 1078, 498, 462, 198, 1515, 631, 403, 950, 1616, 1541, 1397, 1880, 1567, 1487, 566, 1703, 546, 230, 1910, 
1230, 1735, 1083, 1156, 171, 1611, 445, 1288, 897, 578, 1994, 1911, 1590, 1706, 350, 628, 449, 1790, 504, 90, 1289, 
176, 879, 1931, 117, 1511, 516, 1883, 1175, 164, 1062, 349, 483, 37, 496, 1664, 1876, 1999, 1438, 552, 1499, 982, 
1830, 1573, 343, 1448, 204, 520, 1092, 477, 585, 776, 1284, 1198, 1433, 1821, 236, 1670, 1554, 1865, 1337, 1042, 
1071, 196, 1035, 1234, 170, 859, 1839, 1776, 577, 558, 1440, 1587, 1933, 960, 146, 1961, 266, 525, 1753, 1129, 1943, 
386, 116, 276, 1089, 1591, 192, 966, 191, 3, 1988, 189, 662, 1784, 1939, 179, 1049, 1120, 706, 345, 1290, 1766, 937, 
1340, 1928, 690, 1680, 1748, 1169, 1500, 478, 1342, 1982, 1387, 1926, 157, 863, 835, 1196, 1382, 1992, 1892, 408, 565, 
1166, 437, 781, 1348, 364, 699, 722, 9, 1167, 1896, 1250, 172, 1302, 1758, 611, 1147, 563, 933, 1648, 860, 737, 342, 
651, 1851, 1607, 1184, 1657, 555, 1311, 902, 808, 1486, 29, 1665, 761, 900, 855, 81, 494, 997, 677, 1301, 1787, 786, 
509, 1025, 1592, 920, 547, 1697, 1270, 317, 1891, 1122, 417, 1199, 1888, 1798, 1744, 124, 1314, 1445, 1471, 1795, 949, 
1720, 1908, 820, 716, 211, 1426, 1219, 1022, 155, 724, 158, 1555, 1403, 603, 1631, 811, 1054, 865, 8, 1439, 162, 1935, 
1281, 1186, 1685, 638, 374, 1633, 921, 1838, 1473, 1973, 1840, 1729, 1547, 1621, 285, 1470, 315, 735, 916, 1447, 1381, 
1950, 1836, 1638, 1119, 1046, 1327, 138, 688, 389, 889, 1261, 775, 1292, 1673, 1010, 175, 456, 1793, 257, 377, 635, 
989, 223, 1846, 1571, 941, 788, 193, 224, 338, 1405, 1600, 784, 390, 407, 886, 833, 1233, 1312, 1032, 1948, 1359, 
34, 1001, 1551, 903, 441, 1822, 1008, 559, 1785, 736, 1807, 640, 1614, 908, 1663, 453, 43, 723, 1543, 131, 715, 324, 
228, 1972, 1354, 346, 1351, 1296, 1997, 777, 1107, 424, 292, 1820, 1873, 562, 354, 1777, 864, 1361, 1654, 411, 779, 
678, 265, 1710, 1115, 1921, 163, 1265, 815, 422, 954, 1702, 1894, 186, 700, 1916, 242, 13, 489, 1599, 1637, 741, 
1432, 1794, 18, 995, 697, 613, 311, 385, 443, 926, 19, 195, 977, 1539, 970, 1535, 488, 1938, 361, 1771, 14, 382, 140, 
809, 1959, 1601, 318, 974, 500, 918, 1977, 1476, 1227, 721, 1034, 1061, 67, 1510, 1669, 1297];

pub fn get_type_by_id(token_id: u16) -> String {

    let token_type = if token_id <=120 {
        String::from("gold")
    } else if token_id <= 660 {
        String::from("red")
    } else if token_id <= 1200 {
        String::from("black")
    } else {
        String::from("white")
    };
    return token_type;
}

'''
'''--- target/.rustc_info.json ---
{"rustc_fingerprint":11182245556449257475,"outputs":{"6067017610845943405":{"success":true,"status":"","code":0,"stdout":"___.wasm\nlib___.rlib\n___.wasm\nlib___.a\n/home/rider/.rustup/toolchains/stable-x86_64-unknown-linux-gnu\ndebug_assertions\npanic=\"abort\"\nproc_macro\ntarget_arch=\"wasm32\"\ntarget_endian=\"little\"\ntarget_env=\"\"\ntarget_family=\"wasm\"\ntarget_has_atomic=\"16\"\ntarget_has_atomic=\"32\"\ntarget_has_atomic=\"64\"\ntarget_has_atomic=\"8\"\ntarget_has_atomic=\"ptr\"\ntarget_os=\"unknown\"\ntarget_pointer_width=\"32\"\ntarget_vendor=\"unknown\"\n","stderr":"warning: dropping unsupported crate type `dylib` for target `wasm32-unknown-unknown`\n\nwarning: dropping unsupported crate type `proc-macro` for target `wasm32-unknown-unknown`\n\nwarning: 2 warnings emitted\n\n"},"931469667778813386":{"success":true,"status":"","code":0,"stdout":"___\nlib___.rlib\nlib___.so\nlib___.so\nlib___.a\nlib___.so\n/home/rider/.rustup/toolchains/stable-x86_64-unknown-linux-gnu\ndebug_assertions\npanic=\"unwind\"\nproc_macro\ntarget_arch=\"x86_64\"\ntarget_endian=\"little\"\ntarget_env=\"gnu\"\ntarget_family=\"unix\"\ntarget_feature=\"fxsr\"\ntarget_feature=\"sse\"\ntarget_feature=\"sse2\"\ntarget_has_atomic=\"16\"\ntarget_has_atomic=\"32\"\ntarget_has_atomic=\"64\"\ntarget_has_atomic=\"8\"\ntarget_has_atomic=\"ptr\"\ntarget_os=\"linux\"\ntarget_pointer_width=\"64\"\ntarget_vendor=\"unknown\"\nunix\n","stderr":""},"2797684049618456168":{"success":false,"status":"exit status: 1","code":1,"stdout":"","stderr":"error: `-Csplit-debuginfo` is unstable on this platform\n\n"},"5309432699494263626":{"success":true,"status":"","code":0,"stdout":"___\nlib___.rlib\nlib___.so\nlib___.so\nlib___.a\nlib___.so\n","stderr":""},"17598535894874457435":{"success":true,"status":"","code":0,"stdout":"rustc 1.60.0 (7737e0b5c 2022-04-04)\nbinary: rustc\ncommit-hash: 7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c\ncommit-date: 2022-04-04\nhost: x86_64-unknown-linux-gnu\nrelease: 1.60.0\nLLVM version: 14.0.0\n","stderr":""},"17579209074980676242":{"success":true,"status":"","code":0,"stdout":"___.wasm\nlib___.rlib\n___.wasm\nlib___.a\n","stderr":"{\"message\":\"dropping unsupported crate type `dylib` for target `wasm32-unknown-unknown`\",\"code\":null,\"level\":\"warning\",\"spans\":[],\"children\":[],\"rendered\":\"warning: dropping unsupported crate type `dylib` for target `wasm32-unknown-unknown`\\n\\n\"}\n{\"message\":\"dropping unsupported crate type `proc-macro` for target `wasm32-unknown-unknown`\",\"code\":null,\"level\":\"warning\",\"spans\":[],\"children\":[],\"rendered\":\"warning: dropping unsupported crate type `proc-macro` for target `wasm32-unknown-unknown`\\n\\n\"}\n{\"message\":\"2 warnings emitted\",\"code\":null,\"level\":\"warning\",\"spans\":[],\"children\":[],\"rendered\":\"warning: 2 warnings emitted\\n\\n\"}\n"},"1932693776494054550":{"success":false,"status":"exit status: 1","code":1,"stdout":"","stderr":"error: `-Csplit-debuginfo` is unstable on this platform\n\n"}},"successes":{}}
'''
'''--- target/release/.fingerprint/Inflector-eefff05c7d46c877/lib-inflector.json ---
{"rustc":6064785002308032717,"features":"[]","target":15157828903313475237,"profile":89792565241913630,"path":201211369753553232,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/Inflector-eefff05c7d46c877/dep-lib-inflector"}}],"rustflags":[],"metadata":6849597462678386541,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/borsh-derive-30826cab706fa8e6/lib-borsh-derive.json ---
{"rustc":6064785002308032717,"features":"[]","target":4089840889381527766,"profile":89792565241913630,"path":14321964881069788571,"deps":[[3971538142687143787,"proc_macro_crate",false,788419670031439885],[4150609249362773644,"borsh_schema_derive_internal",false,3456763846603970918],[13490840273341614553,"borsh_derive_internal",false,5274190229595201966],[16070216213857859885,"syn",false,15402917509616554328],[18041611664251075294,"proc_macro2",false,12108380692252241665]],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/borsh-derive-30826cab706fa8e6/dep-lib-borsh-derive"}}],"rustflags":[],"metadata":6341613096556135379,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/borsh-derive-internal-07074a113817bfc9/lib-borsh-derive-internal.json ---
{"rustc":6064785002308032717,"features":"[]","target":1036412639898795334,"profile":89792565241913630,"path":4168860409977436739,"deps":[[16070216213857859885,"syn",false,15402917509616554328],[17776692001140902900,"quote",false,5746893376378910466],[18041611664251075294,"proc_macro2",false,12108380692252241665]],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/borsh-derive-internal-07074a113817bfc9/dep-lib-borsh-derive-internal"}}],"rustflags":[],"metadata":6341613096556135379,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/borsh-schema-derive-internal-868bcb10a9df64a0/lib-borsh-schema-derive-internal.json ---
{"rustc":6064785002308032717,"features":"[]","target":5421563452239655410,"profile":89792565241913630,"path":5390977764582776732,"deps":[[16070216213857859885,"syn",false,15402917509616554328],[17776692001140902900,"quote",false,5746893376378910466],[18041611664251075294,"proc_macro2",false,12108380692252241665]],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/borsh-schema-derive-internal-868bcb10a9df64a0/dep-lib-borsh-schema-derive-internal"}}],"rustflags":[],"metadata":7685215035480038221,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/near-sdk-macros-b9adb27cba2cfd39/lib-near-sdk-macros.json ---
{"rustc":6064785002308032717,"features":"[]","target":15689919990212690254,"profile":89792565241913630,"path":10595878660238969691,"deps":[[7454270075138479745,"inflector",false,135213811634054729],[16070216213857859885,"syn",false,15402917509616554328],[17776692001140902900,"quote",false,5746893376378910466],[18041611664251075294,"proc_macro2",false,12108380692252241665]],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/near-sdk-macros-b9adb27cba2cfd39/dep-lib-near-sdk-macros"}}],"rustflags":[],"metadata":15031428936898636640,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/proc-macro-crate-edfa432597300f83/lib-proc-macro-crate.json ---
{"rustc":6064785002308032717,"features":"[]","target":10488202467561598967,"profile":89792565241913630,"path":9637422404605283880,"deps":[[4474423794295783571,"toml",false,18381966467095012957]],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/proc-macro-crate-edfa432597300f83/dep-lib-proc-macro-crate"}}],"rustflags":[],"metadata":4875023412952309093,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/proc-macro2-02d8576ab8214684/run-build-script-build-script-build.json ---
{"rustc":6064785002308032717,"features":"","target":0,"profile":0,"path":0,"deps":[[18041611664251075294,"build_script_build",false,5995507765384227811]],"local":[{"RerunIfChanged":{"output":"release/build/proc-macro2-02d8576ab8214684/output","paths":["build.rs"]}}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- target/release/.fingerprint/proc-macro2-dc182f065c28f8c4/build-script-build-script-build.json ---
{"rustc":6064785002308032717,"features":"[\"default\", \"proc-macro\"]","target":13294766831966498538,"profile":89792565241913630,"path":8991800697632869258,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/proc-macro2-dc182f065c28f8c4/dep-build-script-build-script-build"}}],"rustflags":[],"metadata":14399165043509735265,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/proc-macro2-ee244c0a276fdd6c/lib-proc-macro2.json ---
{"rustc":6064785002308032717,"features":"[\"default\", \"proc-macro\"]","target":14344298002436322672,"profile":89792565241913630,"path":11370364012345880652,"deps":[[6091758325770924677,"unicode_xid",false,17770409071997677449],[18041611664251075294,"build_script_build",false,10419477507610706314]],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/proc-macro2-ee244c0a276fdd6c/dep-lib-proc-macro2"}}],"rustflags":[],"metadata":14399165043509735265,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/quote-7824678d1010f883/lib-quote.json ---
{"rustc":6064785002308032717,"features":"[\"default\", \"proc-macro\"]","target":4606197195311606630,"profile":89792565241913630,"path":7325178502077022345,"deps":[[18041611664251075294,"proc_macro2",false,12108380692252241665]],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/quote-7824678d1010f883/dep-lib-quote"}}],"rustflags":[],"metadata":2717943770976187624,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/ryu-46daeab0ac17a91e/build-script-build-script-build.json ---
{"rustc":6064785002308032717,"features":"[]","target":13294766831966498538,"profile":89792565241913630,"path":12255452375954603726,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/ryu-46daeab0ac17a91e/dep-build-script-build-script-build"}}],"rustflags":[],"metadata":10387617312689919117,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/serde-0f0a82bee875987e/lib-serde.json ---
{"rustc":6064785002308032717,"features":"[\"default\", \"std\"]","target":15771919462364234457,"profile":89792565241913630,"path":9747881693556443537,"deps":[[7801887702736296488,"build_script_build",false,17559804979126715785]],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/serde-0f0a82bee875987e/dep-lib-serde"}}],"rustflags":[],"metadata":3767376778934503013,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/serde-69aa6b3d77f8bfb6/build-script-build-script-build.json ---
{"rustc":6064785002308032717,"features":"[\"default\", \"derive\", \"serde_derive\", \"std\"]","target":2709041430195671023,"profile":89792565241913630,"path":416451668609917265,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/serde-69aa6b3d77f8bfb6/dep-build-script-build-script-build"}}],"rustflags":[],"metadata":3767376778934503013,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/serde-6ef111d86725069b/run-build-script-build-script-build.json ---
{"rustc":6064785002308032717,"features":"","target":0,"profile":0,"path":0,"deps":[[7801887702736296488,"build_script_build",false,12490863089029088037]],"local":[{"Precalculated":"1.0.118"}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- target/release/.fingerprint/serde-aa6ea5c0481a087a/build-script-build-script-build.json ---
{"rustc":6064785002308032717,"features":"[\"default\", \"std\"]","target":2709041430195671023,"profile":89792565241913630,"path":416451668609917265,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/serde-aa6ea5c0481a087a/dep-build-script-build-script-build"}}],"rustflags":[],"metadata":3767376778934503013,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/serde_derive-4b0bf73efd96d202/build-script-build-script-build.json ---
{"rustc":6064785002308032717,"features":"[\"default\"]","target":2709041430195671023,"profile":89792565241913630,"path":11172169226599540212,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/serde_derive-4b0bf73efd96d202/dep-build-script-build-script-build"}}],"rustflags":[],"metadata":14452199383429553764,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/serde_derive-b3a4382c2259d1ae/lib-serde_derive.json ---
{"rustc":6064785002308032717,"features":"[\"default\"]","target":17963269895377715704,"profile":89792565241913630,"path":8933859965065533995,"deps":[[16070216213857859885,"syn",false,15402917509616554328],[17531223895440655100,"build_script_build",false,7452510821507455965],[17776692001140902900,"quote",false,5746893376378910466],[18041611664251075294,"proc_macro2",false,12108380692252241665]],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/serde_derive-b3a4382c2259d1ae/dep-lib-serde_derive"}}],"rustflags":[],"metadata":14452199383429553764,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/serde_derive-c79fb7883a53f40b/run-build-script-build-script-build.json ---
{"rustc":6064785002308032717,"features":"","target":0,"profile":0,"path":0,"deps":[[17531223895440655100,"build_script_build",false,518152171915285888]],"local":[{"Precalculated":"1.0.118"}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- target/release/.fingerprint/serde_json-f69eb68b425e200f/build-script-build-script-build.json ---
{"rustc":6064785002308032717,"features":"[\"default\", \"std\"]","target":13294766831966498538,"profile":89792565241913630,"path":16416341592605375098,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/serde_json-f69eb68b425e200f/dep-build-script-build-script-build"}}],"rustflags":[],"metadata":16261601059619201932,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/syn-2584b402440daf00/build-script-build-script-build.json ---
{"rustc":6064785002308032717,"features":"[\"clone-impls\", \"default\", \"derive\", \"extra-traits\", \"fold\", \"full\", \"parsing\", \"printing\", \"proc-macro\", \"quote\", \"visit\"]","target":13294766831966498538,"profile":89792565241913630,"path":15131239985422468857,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/syn-2584b402440daf00/dep-build-script-build-script-build"}}],"rustflags":[],"metadata":6886477143387768027,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/syn-34d0cd23b80b7deb/run-build-script-build-script-build.json ---
{"rustc":6064785002308032717,"features":"","target":0,"profile":0,"path":0,"deps":[[16070216213857859885,"build_script_build",false,1438545282162299354]],"local":[{"Precalculated":"1.0.57"}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- target/release/.fingerprint/syn-96888dd9a1479247/lib-syn.json ---
{"rustc":6064785002308032717,"features":"[\"clone-impls\", \"default\", \"derive\", \"extra-traits\", \"fold\", \"full\", \"parsing\", \"printing\", \"proc-macro\", \"quote\", \"visit\"]","target":12020202395954228905,"profile":89792565241913630,"path":3127365729361237778,"deps":[[6091758325770924677,"unicode_xid",false,17770409071997677449],[16070216213857859885,"build_script_build",false,16906420674568977515],[17776692001140902900,"quote",false,5746893376378910466],[18041611664251075294,"proc_macro2",false,12108380692252241665]],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/syn-96888dd9a1479247/dep-lib-syn"}}],"rustflags":[],"metadata":6886477143387768027,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/toml-276f1a3176df5430/lib-toml.json ---
{"rustc":6064785002308032717,"features":"[\"default\"]","target":13462643144348829615,"profile":89792565241913630,"path":17547084762222958941,"deps":[[7801887702736296488,"serde",false,11360084183637188117]],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/toml-276f1a3176df5430/dep-lib-toml"}}],"rustflags":[],"metadata":15823223228428447826,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/unicode-xid-26809bafcedebcca/lib-unicode-xid.json ---
{"rustc":6064785002308032717,"features":"[\"default\"]","target":17221491243435642268,"profile":89792565241913630,"path":997474237711731260,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/unicode-xid-26809bafcedebcca/dep-lib-unicode-xid"}}],"rustflags":[],"metadata":8984739024795042354,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/release/.fingerprint/wee_alloc-56f41bf66950ca1a/build-script-build-script-build.json ---
{"rustc":6064785002308032717,"features":"[]","target":2709041430195671023,"profile":89792565241913630,"path":15861719984267424781,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release/.fingerprint/wee_alloc-56f41bf66950ca1a/dep-build-script-build-script-build"}}],"rustflags":[],"metadata":11837593470300214873,"config":2202906307356721367,"compile_kind":0}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/ahash-3f602f2bb35305d5/lib-ahash.json ---
{"rustc":6064785002308032717,"features":"[]","target":17564961922320999190,"profile":4881301595602780980,"path":2424625123657461194,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/ahash-3f602f2bb35305d5/dep-lib-ahash"}}],"rustflags":[],"metadata":6548036084630991988,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/base64-0266aaf2a36d6a95/lib-base64.json ---
{"rustc":6064785002308032717,"features":"[\"default\", \"std\"]","target":9667411782827515189,"profile":4881301595602780980,"path":15047395521142166021,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/base64-0266aaf2a36d6a95/dep-lib-base64"}}],"rustflags":[],"metadata":13936919950537592407,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/borsh-6aeca0b439eb91be/lib-borsh.json ---
{"rustc":6064785002308032717,"features":"[\"default\", \"std\"]","target":3730488758921852561,"profile":4881301595602780980,"path":14543351188449405369,"deps":[[1765968269683488588,"hashbrown",false,1503636959085558399],[16041985349553542896,"borsh_derive",false,1271744141761582275]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/borsh-6aeca0b439eb91be/dep-lib-borsh"}}],"rustflags":[],"metadata":7032358266178414993,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/bs58-f4b2e40280ca61bd/lib-bs58.json ---
{"rustc":6064785002308032717,"features":"[\"alloc\", \"default\", \"std\"]","target":4860711247261189145,"profile":4881301595602780980,"path":13304398444612349351,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/bs58-f4b2e40280ca61bd/dep-lib-bs58"}}],"rustflags":[],"metadata":13637435404263704389,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/cfg-if-4b6f1020c71c4854/lib-cfg-if.json ---
{"rustc":6064785002308032717,"features":"[]","target":10094334937643343087,"profile":4881301595602780980,"path":7417972309256735462,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/cfg-if-4b6f1020c71c4854/dep-lib-cfg-if"}}],"rustflags":[],"metadata":8462187951337715540,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/hashbrown-452902ff07dbf6b7/lib-hashbrown.json ---
{"rustc":6064785002308032717,"features":"[\"ahash\", \"default\", \"inline-more\"]","target":7861740280460442625,"profile":4881301595602780980,"path":17787056508283525566,"deps":[[15468617392942388283,"ahash",false,15103029305708895148]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/hashbrown-452902ff07dbf6b7/dep-lib-hashbrown"}}],"rustflags":[],"metadata":6228333144549390726,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/itoa-33b8fee2612fcb2e/lib-itoa.json ---
{"rustc":6064785002308032717,"features":"[]","target":4009500040951542228,"profile":4881301595602780980,"path":8246125081180640315,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/itoa-33b8fee2612fcb2e/dep-lib-itoa"}}],"rustflags":[],"metadata":2285756563936990018,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/memory_units-a3e83b33528dff62/lib-memory_units.json ---
{"rustc":6064785002308032717,"features":"[]","target":12813906616754239599,"profile":4881301595602780980,"path":10843374843949806356,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/memory_units-a3e83b33528dff62/dep-lib-memory_units"}}],"rustflags":[],"metadata":16366510313631463741,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/near-sdk-628a0a985a750e78/lib-near-sdk.json ---
{"rustc":6064785002308032717,"features":"[\"default\", \"wee_alloc\"]","target":15430380038213693864,"profile":4881301595602780980,"path":542273491215606093,"deps":[[2711478123133662383,"bs58",false,5397684288582294625],[3178493835647231921,"wee_alloc",false,14898763127656975358],[7625008877874957944,"near_sys",false,6029607073758970208],[7801887702736296488,"serde",false,2389797268573332608],[9180754061452322375,"base64",false,2195446666223362512],[10686011640087724192,"serde_json",false,4666597328341021514],[15957841195541503846,"borsh",false,1371624126091150561],[16736989976217687003,"near_sdk_macros",false,6128009267407923674]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/near-sdk-628a0a985a750e78/dep-lib-near-sdk"}}],"rustflags":[],"metadata":14494014267593228065,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/near-sys-618ec7eacf1f9b09/lib-near-sys.json ---
{"rustc":6064785002308032717,"features":"[]","target":11005017848159897718,"profile":4881301595602780980,"path":17478744329218806745,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/near-sys-618ec7eacf1f9b09/dep-lib-near-sys"}}],"rustflags":[],"metadata":14953019946116409479,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/nft_simple-322841616f66c026/lib-nft_simple.json ---
{"rustc":6064785002308032717,"features":"[]","target":16170821330308033260,"profile":4881301595602780980,"path":17523903030608720598,"deps":[[7397344014043115272,"near_sdk",false,1364235609800854454],[10686011640087724192,"serde_json",false,4666597328341021514]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/nft_simple-322841616f66c026/dep-lib-nft_simple"}}],"rustflags":[],"metadata":11367392754617449973,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/ryu-1337630bb096e090/run-build-script-build-script-build.json ---
{"rustc":6064785002308032717,"features":"","target":0,"profile":0,"path":0,"deps":[[14119437854452900987,"build_script_build",false,12193348746020040657]],"local":[{"Precalculated":"1.0.5"}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/ryu-fcfc9347cfc122e6/lib-ryu.json ---
{"rustc":6064785002308032717,"features":"[]","target":8261881835615490997,"profile":4881301595602780980,"path":17668281516856428907,"deps":[[14119437854452900987,"build_script_build",false,13472201203593266682]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/ryu-fcfc9347cfc122e6/dep-lib-ryu"}}],"rustflags":[],"metadata":10387617312689919117,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/serde-2854b67f541a1c52/lib-serde.json ---
{"rustc":6064785002308032717,"features":"[\"default\", \"derive\", \"serde_derive\", \"std\"]","target":15771919462364234457,"profile":4881301595602780980,"path":9747881693556443537,"deps":[[7801887702736296488,"build_script_build",false,18010922785227277980],[17531223895440655100,"serde_derive",false,14571440807173789692]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/serde-2854b67f541a1c52/dep-lib-serde"}}],"rustflags":[],"metadata":3767376778934503013,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/serde-8ec7d3fc7bfab743/run-build-script-build-script-build.json ---
{"rustc":6064785002308032717,"features":"","target":0,"profile":0,"path":0,"deps":[[7801887702736296488,"build_script_build",false,8382036574349609160]],"local":[{"Precalculated":"1.0.118"}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/serde_json-04a4a39cae0030f6/run-build-script-build-script-build.json ---
{"rustc":6064785002308032717,"features":"","target":0,"profile":0,"path":0,"deps":[[10686011640087724192,"build_script_build",false,13260241427511394066]],"local":[{"Precalculated":"1.0.62"}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/serde_json-41182def88be6b32/lib-serde_json.json ---
{"rustc":6064785002308032717,"features":"[\"default\", \"std\"]","target":2475719121998694108,"profile":4881301595602780980,"path":10511570679599690174,"deps":[[7801887702736296488,"serde",false,2389797268573332608],[10686011640087724192,"build_script_build",false,16382820358751274356],[12967112409455512918,"itoa",false,8184263029553666917],[14119437854452900987,"ryu",false,2895609203375188826]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/serde_json-41182def88be6b32/dep-lib-serde_json"}}],"rustflags":[],"metadata":16261601059619201932,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/wee_alloc-034861dc56ef4c30/run-build-script-build-script-build.json ---
{"rustc":6064785002308032717,"features":"","target":0,"profile":0,"path":0,"deps":[[3178493835647231921,"build_script_build",false,10752746876044873519]],"local":[{"RerunIfChanged":{"output":"wasm32-unknown-unknown/release/build/wee_alloc-034861dc56ef4c30/output","paths":["./Cargo.toml","./build.rs","./src/lib.rs","./src/imp_static_array.rs"]}},{"RerunIfEnvChanged":{"var":"WEE_ALLOC_STATIC_ARRAY_BACKEND_BYTES","val":null}}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- target/wasm32-unknown-unknown/release/.fingerprint/wee_alloc-deb6b3e0ff371f74/lib-wee_alloc.json ---
{"rustc":6064785002308032717,"features":"[]","target":7410670272435617587,"profile":4881301595602780980,"path":11265524047749036252,"deps":[[1429323848562539564,"memory_units",false,14926679408102775034],[3178493835647231921,"build_script_build",false,12054012048837219406],[11311719388751911026,"cfg_if",false,7340993417345954885]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown/release/.fingerprint/wee_alloc-deb6b3e0ff371f74/dep-lib-wee_alloc"}}],"rustflags":[],"metadata":11837593470300214873,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- target/wasm32-unknown-unknown/release/build/wee_alloc-034861dc56ef4c30/out/wee_alloc_static_array_backend_size_bytes.txt ---
33554432
'''