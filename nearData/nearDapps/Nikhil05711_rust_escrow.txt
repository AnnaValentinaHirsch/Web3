*GitHub Repository "Nikhil05711/rust_escrow"*

'''--- Cargo.toml ---
[package]
name = "Escrow"
version = "0.1.0"
authors = ["Nikhil05711@gmail.com"]
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]
# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
near-sdk = "3.1.0"
rust-web3 = "0.31.0"

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

'''
'''--- README.md ---
# rust_escrow

The escrow agreement is a contract entered by two or more parties under which an escrow agent is appointed to hold in escrow certain assets, documents, and/or money deposited by such parties until a contractual condition is fulfilled.

'''
'''--- src/escrow.rs ---
use near_sdk::{env};
use near_sdk::collections::UnorderedMap;
use ethers::prelude::*;
use rust_web3::contract::tokens::Tokenize;
use rust_web3::contract::{Contract, Options};
use rust_web3::types::U256;

near_sdk::setup_alloc!();

pub payable struct MyPayableStruct {
    owner: Option<web3::types::Address>,
    commissionWallet: Option<web3::types::Address>,
    buyer:Option<web3::types::Address>,
    seller: Option<web3::types::Address>,
}

pub struct NumberStruct {
    minimumEscrowAmount: U256,
    commissionRate: U256,
    depositTime: U256,
}

enum State {
    INIT,
    FUNDED,
    ACCEPTED,
    RELEASED,
    REFUNDED,
    WITHDRAWED_BY_OWNER,
}

// modifiers

macro_rules! is_address_valid {
    ($addr:expr) => {
        {
            assert!($addr.len() == 20 && $addr != [0u8; 20], "Invalid address!");
            _
        }
    };
}

macro_rules! buyeronly {
    ($_buyer:expr) => {
        {
            assert!(_buyer == buyer, "Only accessible by buyer!");
            _
        }
    }
}

macro_rules! selleronly {
    ($_seller:expr) => {
        {
            assert!(_seller == seller, "Only accessible by seller!");
            _
        }
    }
}

macro_rules! owneronly {
    ($_addr:expr) => {
        {
            assert!(_addr == addr, "Only accessible by owner!");
            _
        }
    }
}

macro_rules! buyer_or_seller_only {
    ($_buyer:expr, $_seller: expr) => {
        {
            assert!(_buyer == buyer && _seller == seller);
            _
        }
    }
}

macro_rules! init_by_owner {
    ($_owner:expr) => {
        assert!(_owner != owner, "Deal not initialized yet!");
        _
    }
}

macro_rules! init_check {
    ($_owner:expr) => {
        assert!(_owner == owner, "Can't initialize a deal twice!");
        _
    }
}

macro_rules! state_init {
    () => {
        assert!(currentState == State.INIT, "State's not INIT!");
        _
    }
}

macro_rules! state_funded {
    () => {
        assert!(currentState == State.FUNDED, "Deal not funded yet!");
        _
    }
}

macro_rules! state_accepted {
    () => {
        assert!(currentState == State.ACCEPTED, "Deal not accepted yet!");
        _
    }
}
'''
'''--- src/lib.rs ---
// use near_sdk::borsh::{self };
use near_sdk::{env};
use near_sdk::collections::UnorderedMap;

near_sdk::setup_alloc!();

// static ALLOC: near_sdk::wee_alloc::WeeAlloc<'_> = near_sdk::wee_alloc::WeeAlloc::INIT;

pub struct Escrow {
    pairs: UnorderedMap<String, String>,
}

impl Default for Escrow {
    fn default() -> Self {
        Self {
            pairs: UnorderedMap::new(b"r".to_vec())
        }
    }
}

impl Escrow {
    pub fn create_update(&mut self, k: String, v: String) {
        env::log(b"created or updated");
        self.pairs.insert(&k, &v);
    }

    pub fn read(&self, k: String) -> Option<String> {
        env::log(b"read");
        return self.pairs.get(&k);
    }

    pub fn delete(&mut self, k: String) {
        env::log(b"delete");
        self.pairs.remove(&k);
    }
}

#[cfg(not(target_arch = "wasm32"))]
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};

    fn get_context(input: Vec<u8>, is_view: bool) -> VMContext {
        VMContext {
            current_account_id: "alice_near".to_string(),
            signer_account_id: "bob_near".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id: "carol_near".to_string(),
            input,
            block_index: 0,
            block_timestamp: 0,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage: 0,
            attached_deposit: 0,
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view,
            output_data_receivers: vec![],
            epoch_height: 0,
        }
    }

    #[test]
    fn create_read_pair() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = Escrow::default();
        contract.create_update("first_key".to_string(), "hello".to_string());
        assert_eq!(
            "hello".to_string(),
            contract.read("first_key".to_string()).unwrap()
        );
    }

    #[test]
    fn read_nonexistent_pair() {
        let context = get_context(vec![], true);
        testing_env!(context);
        let contract = Escrow::default();
        assert_eq!(None, contract.read("first_key".to_string()));
    }
}
'''