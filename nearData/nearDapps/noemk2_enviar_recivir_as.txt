*GitHub Repository "noemk2/enviar_recivir_as"*

'''--- README.md ---
Enviar/Recivir near con AssemblyScript
==================

Introducci√≥n a enviar_recivir en near (assemblyScript)
==================

 un enviar_recivir en near protocol, este contrato te perminte:
 
 1. paga en near 
 2. recive en near 
 

üë®‚Äçüíª Instalaci√≥n en local
===========

Para correr este proyecto en local debes seguir los siguientes pasos:

Paso 1: Pre - Requisitos
------------------------------

1. Aseg√∫rese de haber instalado [Node.js] ‚â• 12 ((recomendamos usar [nvm])
2. Aseg√∫rese de haber instalado yarn: `npm install -g yarn`
3. Instalar dependencias: `yarn install`
4. Crear un test near account [NEAR test account]
5. Instalar el NEAR CLI globally: [near-cli] es una interfaz de linea de comando (CLI) para interacturar con NEAR blockchain

    yarn install --global near-cli

Step 2: Configura tu NEAR CLI
-------------------------------

Configura tu near-cli para autorizar su cuenta de prueba creada recientemente:

    near login
    
Step 3: Clonar Repositorio
-------------------------------    

Este comando nos permite clonar el repositorio de nuestro proyecto 

```bash
git clone https://github.com/noemk2/enviar_recivir.git
```

Una vez que hayas descargado el repositorio, asegurate de ejecutar los comandos dentro del repositorio descargado. Puedes hacerlo con
```bash
cd enviar_recivir/
```

Step 4: Realiza el BUILD para implementaci√≥n de desarrollo de contrato inteligente 
------------------------------------------------------------------------------------

Instale el gestor de dependencia de Node.js dentro del repositorio

```bash
npm install
```

Cree el c√≥digo de contrato inteligente e implemente el servidor de desarrollo local: 
```bash
yarn deploy:dev
```

Cree la variable local $CONTRACT_NAME (permite guardar tu contrato temporal en una variable facil de recordar)
```bash
source ./neardev/dev-account.env
```

Consulte` package.json` para obtener una lista completa de `scripts` que puede ejecutar con` yarn`). Este script le devuelve un contrato inteligente provisional
implementado (gu√°rdelo para
usarlo m√°s tarde)

¬°Felicitaciones, ahora tendr√° un entorno de desarrollo local ejecut√°ndose en NEAR TestNet!

‚úèÔ∏è Comando  v
-----------------------------------------------

Para Linux:
```bash
coming soon
```

ü§ñ Test 
==================

Las pruebas son parte del desarrollo, luego, para ejecutar las pruebas en el contrato inteligente , debe ejecutar el siguiente comando:

	coming soon

==============================================

  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [NEAR test account]: https://docs.near.org/docs/develop/basics/create-account#creating-a-testnet-account
  [nvm]: https://github.com/nvm-sh/nvm
  [UX/UI]: https://www.figma.com/proto/GqP5EF5zRZRvAv3HoaSsuN/uniwap?node-id=39%3A2300&scaling=min-zoom&page-id=0%3A1&starting-point-node-id=39%3A2300&hide-ui=1
  [UX/UI]: https://www.figma.com/proto/0dZLC0WI1eVsfjeKu3T8J8/Garant%C3%ADzame?node-id=2%3A8&scaling=scale-down-width&page-id=0%3A1&starting-point-node-id=2%3A8

'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports")

'''
'''--- asconfig.json ---
{
	"extends": "near-sdk-as/asconfig.json",
	"options": {
		"binaryFile": "out/main.wasm"
	}
}

'''
'''--- assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />

'''
'''--- assembly/__tests__/index.spec.ts ---
import {hello, hello_world} from "..";
import {Context} from "near-sdk-as";
import * as contract from '..';

describe("helloworld", () => {
	it("should return 'Hello world'", () => {
		expect(hello_world()).toStrictEqual("Hello world");
	})
});

describe("hello user", () => {
	it("should return 'Hello + user name'", () => {
		let user = Context.sender
		expect(hello()).toStrictEqual("Hello " + user);
	})
});

'''
'''--- assembly/index.ts ---
import {Context, ContractPromiseBatch, u128} from "near-sdk-as";

export function pagar(): ContractPromiseBatch {
	return ContractPromiseBatch.create("noem.testnet").transfer(u128.from('10000000000000000000000000'));
}
export function pagar_s(): String {
	ContractPromiseBatch.create(Context.sender).transfer(u128.from('1000000000000000000000000'));
	return "pagado"
}
export function pagar_m(): String {
	ContractPromiseBatch.create(Context.contractName).transfer(u128.from('1000000000000000000000000'));
	return "pagado asi mismo?"
}

export function pagado(): string {
	let user = Context.sender
	let operacion = changetype<u128>(Context.attachedDeposit / u128.from('1000000000000000000000000'))
	return "Hello " + user + " gracias por depocitar " + operacion.toString() + "NEAR";

}

'''
'''--- package.json ---
{
	"name": "holamundo_as",
	"version": "1.0.0",
	"description": "",
	"main": "index.js",
	"scripts": {
		"test": "asp",
		"build": "asb",
		"deploy:dev": "yarn build && near dev-deploy"
	},
	"keywords": [],
	"author": "",
	"license": "ISC",
	"devDependencies": {
		"near-sdk-as": "^3.2.3"
	}
}

'''