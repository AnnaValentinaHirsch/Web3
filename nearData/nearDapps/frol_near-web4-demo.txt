*GitHub Repository "frol/near-web4-demo"*

'''--- Cargo.toml ---
[package]
name = "web4-demo"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
near-sdk = "4.0.0-pre.7"

[lib]
crate-type = ["cdylib"]

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

'''
'''--- README.md ---
Web4 Demo on NEAR protocol
==========================

[Web4](https://web4.near.page) is a gateway to the smart contracts deployed to NEAR protocol.

This demo just shows the minimum viable application that lives on NEAR chain, and thus anyone hosting the gateway can serve all the Web4 projects!

See it live on testnet: https://hello-web4.testnet.page

When you deploy on mainnet, you should be able to use https://ACCOUNT_ID.near.page as your gateway.

## Build

See [near-sdk docs](https://near-sdk.io) for the prerequisites, and then build the contract:

```
$ cargo build --target wasm32-unknown-unknown --release
```

## Deploy

Using [near-cli-rs](https://near.cli.rs) you can deploy the contract to your account:

```
$ near-cli add contract-code network testnet account ACCOUNT_ID.testnet contract-file ./target/wasm32-unknown-unknown/release/web4_demo.wasm no-initialize sign-with-keychain
```
'''
'''--- src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::near_bindgen;
use near_sdk::serde::{Deserialize, Serialize};

#[near_bindgen]
#[derive(Default, BorshDeserialize, BorshSerialize)]
pub struct Contract {
}

#[near_bindgen]
impl Contract {
    /// Learn more about web4 here: https://web4.near.page
    pub fn web4_get(&self, request: Web4Request) -> Web4Response {
        if request.path == "/" {
            Web4Response::Body {
                content_type: "text/html; charset=UTF-8".to_owned(),
                body: "<h1>Hello from Web4 on NEAR!</h1>".as_bytes().to_owned().into(),
            }
        } else {
            Web4Response::Body {
                content_type: "text/html; charset=UTF-8".to_owned(),
                body: format!("<h1>Some page</h1><pre>{:#?}</pre>", request).into_bytes().into(),
            } 
        }
    }
}

#[derive(Debug, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Web4Request {
    #[serde(rename = "accountId")]
    pub account_id: Option<String>,
    pub path: String,
    #[serde(default)]
    pub params: std::collections::HashMap<String, String>,
    #[serde(default)]
    pub query: std::collections::HashMap<String, Vec<String>>,
    pub preloads: Option<std::collections::HashMap<String, Web4Response>>,
}

#[derive(Debug, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde", untagged)]
pub enum Web4Response {
    Body {
        #[serde(rename = "contentType")]
        content_type: String,
        body: near_sdk::json_types::Base64VecU8,
    },
    BodyUrl {
        #[serde(rename = "bodyUrl")]
        body_url: String,
    },
    PreloadUrls {
        #[serde(rename = "preloadUrls")]
        preload_urls: Vec<String>,
    },
}

#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
        let result = 2 + 2;
        assert_eq!(result, 4);
    }
}

'''