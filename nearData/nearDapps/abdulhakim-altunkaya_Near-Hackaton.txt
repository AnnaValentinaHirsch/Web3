*GitHub Repository "abdulhakim-altunkaya/Near-Hackaton"*

'''--- License.txt ---
Apache License
Version 2.0, January 2004
http://www.apache.org/licenses/

TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

1. Definitions.

"License" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.

"Licensor" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.

"Legal Entity" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, "control" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.

"You" (or "Your") shall mean an individual or Legal Entity exercising permissions granted by this License.

"Source" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.

"Object" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.

"Work" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).

"Derivative Works" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.

"Contribution" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, "submitted" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as "Not a Contribution."

"Contributor" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.

2. Grant of Copyright License.

Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.

3. Grant of Patent License.

Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.

4. Redistribution.

You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:

You must give any other recipients of the Work or Derivative Works a copy of this License; and
You must cause any modified files to carry prominent notices stating that You changed the files; and
You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and
If the Work includes a "NOTICE" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.
You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.

5. Submission of Contributions.

Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.

6. Trademarks.

This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.

7. Disclaimer of Warranty.

Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.

8. Limitation of Liability.

In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.

9. Accepting Warranty or Additional Liability.

While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.

END OF TERMS AND CONDITIONS

APPENDIX: How to apply the Apache License to your work

To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets "[]" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same "printed page" as the copyright notice for easier identification within third-party archives.

   Copyright [yyyy] [name of copyright owner]

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitat
'''
'''--- hardhat.config.js ---
require("@nomicfoundation/hardhat-toolbox");
require("@nomiclabs/hardhat-ethers");
require("dotenv").config();

module.exports = {
  solidity: "0.8.10",
  networks: {
    aurora: {
      url: process.env.PROVIDER_URL,
      accounts: [`0x${process.env.PRIVATE_KEY}`]
    }
  }
};
'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./icon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta
      name="description"
      content="Betelgeuse Foundation Grant & Voting System"
    />

    <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <title>BETELGEUSE FOUNDATION</title>
  </head>
  <body>
    <div id="root"></div>

  </body>
</html>

'''
'''--- scripts/deploy.js ---
// We require the Hardhat Runtime Environment explicitly here. This is optional
// but useful for running the script in a standalone fashion through `node <script>`.
//
// You can also run a script with `npx hardhat run <script>`. If you do that, Hardhat
// will compile your contracts, add the Hardhat Runtime Environment's members to the
// global scope, and execute the script.
const hre = require("hardhat");

async function main() {

  const Foundation = await hre.ethers.getContractFactory("Foundation");
  const foundation = await Foundation.deploy();
  await foundation.deployed();
  console.log(`Foundation is deployed to ${foundation.address}`);
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});

'''
'''--- src/App.js ---
import React from 'react';
import Upperbar from './components/Upperbar';
import Lowerbar from "./components/Lowerbar"

function App() {
  return (
    <div className="App">
      <Upperbar />
      <Lowerbar />
    </div>
  );
}

export default App;

'''
'''--- src/components/ContractABI.js ---
export const ABI = [
  {
    "inputs": [],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "inputs": [
      {
        "internalType": "string",
        "name": "message",
        "type": "string"
      },
      {
        "internalType": "address",
        "name": "beneficiary",
        "type": "address"
      }
    ],
    "name": "AlreadyBeneficiary",
    "type": "error"
  },
  {
    "inputs": [
      {
        "internalType": "string",
        "name": "message",
        "type": "string"
      },
      {
        "internalType": "address",
        "name": "caller",
        "type": "address"
      }
    ],
    "name": "NotOwner",
    "type": "error"
  },
  {
    "stateMutability": "payable",
    "type": "fallback"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "_receiver",
        "type": "address"
      }
    ],
    "name": "addBeneficiary",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "becomeMember",
    "outputs": [],
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "chooseMainProposal",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "closeVoting",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "_tokenAddress",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "_amount",
        "type": "uint256"
      }
    ],
    "name": "donate",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "getAllPro",
    "outputs": [
      {
        "internalType": "string[]",
        "name": "",
        "type": "string[]"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "getAllProPassed",
    "outputs": [
      {
        "internalType": "string[]",
        "name": "",
        "type": "string[]"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "getAllProRejected",
    "outputs": [
      {
        "internalType": "string[]",
        "name": "",
        "type": "string[]"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "getBalance",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "getDetails",
    "outputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "getMembershipStatus",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "id",
        "type": "uint256"
      }
    ],
    "name": "getRecordStruct",
    "outputs": [
      {
        "components": [
          {
            "internalType": "string",
            "name": "proposalName",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "yesV",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "noV",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "totalV",
            "type": "uint256"
          }
        ],
        "internalType": "struct Foundation.ResultStruct",
        "name": "",
        "type": "tuple"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "_tokenAddress",
        "type": "address"
      }
    ],
    "name": "getTokenBalance",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "getVotingStatus",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "leaveMembership",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "mainProposal",
    "outputs": [
      {
        "internalType": "string",
        "name": "",
        "type": "string"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "string",
        "name": "_programName",
        "type": "string"
      }
    ],
    "name": "makeProgramProposal",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "name": "memberMapping",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "owner",
    "outputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "_member",
        "type": "address"
      }
    ],
    "name": "removeMember",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "_newOwner",
        "type": "address"
      }
    ],
    "name": "renounceOwnership",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "resetTable",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "_receiver",
        "type": "address"
      },
      {
        "internalType": "address",
        "name": "_tokenAddress",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "_amount",
        "type": "uint256"
      }
    ],
    "name": "sendGrant",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "_tokenAddress",
        "type": "address"
      },
      {
        "internalType": "uint256",
        "name": "_amount",
        "type": "uint256"
      }
    ],
    "name": "sendGrantAuto",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "toggleTransfer",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "transferEnabled",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "voteNo",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "voteYes",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "votingStartTime",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "name": "votingStatus",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "withdraw",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "stateMutability": "payable",
    "type": "receive"
  }
]
'''
'''--- src/components/ContractAddress.js ---
export const CONTRACT_ADDRESS = "0x639F144f56198989C12b12836Ea0a30e1FBE378E"; 
'''
'''--- src/components/D1Enable.js ---
import React from 'react';
import {ethers } from "ethers"; 
import { useState } from 'react';
import {ABI} from "./ContractABI.js";
import {CONTRACT_ADDRESS} from "./ContractAddress.js";

function D1Enable() {
    let contract;
    let signer;
    const CONTRACT_ABI = ABI;
    const ADDRESS = CONTRACT_ADDRESS;

    const connectContract = async () => {
        const ABI = CONTRACT_ABI;
        const Address = ADDRESS;
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        signer = provider.getSigner();
        contract = new ethers.Contract(Address, ABI, signer);
    }

    let[status, setStatus] = useState("");

    const enablePayments = async () => {
        await connectContract();
        const txResponse = await contract.toggleTransfer();
        await txResponse.wait();
        const txBool = await contract.transferEnabled();
        if(txBool === true){
            setStatus("Transfers Status: Enabled");
        } else {
            setStatus("Transfers Status: Disabled");
        }

    }
  return (

    <div>
        <div>
            <button className='button-54 lightGreen' onClick={enablePayments}>Enable/Disable Payments (Admin)</button>
            <p>{status}</p>
        </div>
    </div>
  )
}

export default D1Enable;
'''
'''--- src/components/D2Donate.js ---
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import {ABI} from "./ContractABI.js";
import {CONTRACT_ADDRESS} from "./ContractAddress.js";
import {ethers } from "ethers"; 
/* global BigInt */

function D2Donate() {
  let[tokenAddress, setTokenAddress] = useState("");
  let[amount, setAmount] = useState();
  
  let contract;
  let signer;
  const CONTRACT_ABI = ABI;
  const ADDRESS = CONTRACT_ADDRESS

  const connectContract = async () => {
    const Address = ADDRESS;
    const ABI = CONTRACT_ABI;
    const provider = new ethers.providers.Web3Provider(window.ethereum);
    signer = provider.getSigner();
    contract = new ethers.Contract(Address, ABI, signer);
  }

  const donate = async () => {
    await connectContract();
    if(amount < 1) {
      alert("invalid amount");
    } else {
      let finalAmount = BigInt(amount*(10**18));
      const txResponse = await contract.donate(tokenAddress, finalAmount);
      await txResponse.wait();
    }
  }

  let[tokenAddress6, setTokenAddress6] = useState("");
  let[amount6, setAmount6] = useState();

  const donate6 = async () => {
    await connectContract();
    if(amount6 < 1) {
      alert("invalid amount");
    } else {
      let finalAmount6 = BigInt(amount6*(10**6));
      const txResponse = await contract.donate(tokenAddress6, finalAmount6);
      await txResponse.wait();
    }
  }

  const navigate = useNavigate();
  
  return (
    <div>
        <button className='button-54 lightGreen' onClick={donate}>Donate (18 Decimals Coins)</button>
        <br />
        <br />
        <input type="string" value={tokenAddress}  onChange={e => setTokenAddress(e.target.value)} placeholder='enter token address'/> 
        <br />
        <br />
        <input type="number" value={amount} onChange={e => setAmount(e.target.value)} placeholder='enter amount (without decimals)'/>
        <br />
        <br />
        <button className='button-54 lightGreen' onClick={donate6}>Donate (6 Decimals Coins)</button>
        <br />
        <br />
        <input type="string" value={tokenAddress6}  onChange={e => setTokenAddress6(e.target.value)} placeholder='enter token address'/> 
        <br />
        <br />
        <input type="number" value={amount6} onChange={e => setAmount6(e.target.value)} placeholder='enter amount (without decimals)'/>
        <br />
        <br />
        <br />
        <button className='button-54' onClick={()=>navigate("/")}>HOMEPAGE</button>
    </div>
  )
}

export default D2Donate
'''
'''--- src/components/D3Treasury.js ---
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import {ABI} from "./ContractABI.js";
import {CONTRACT_ADDRESS} from "./ContractAddress.js";
import {ethers } from "ethers"; 

function D3Treasury() {
    const navigate = useNavigate();

    let[auroraBalance, setAuroraBalance] = useState();
    let[tokenBalance, setTokenBalance] = useState();
    let[tokenAddress, setTokenAddress] = useState("");

    let contract;
    let signer;
    const ADDRESS = CONTRACT_ADDRESS;
    const CONTRACT_ABI = ABI;

    const connectContract = async () => {
        const Address = ADDRESS;
        const ABI = CONTRACT_ABI;
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        signer = provider.getSigner();
        contract = new ethers.Contract(Address, ABI, signer);
    }

    const getAuroraBalance = async () => {
        await connectContract();
        const txResponse = await contract.getBalance();
        if(txResponse < 1) {
            setAuroraBalance("Balance is 0");
        } else {
            let data = txResponse.toString();
            let data2 = data.slice(0, -18);
            setAuroraBalance(`Balance is ${data2} `);
        }
    }

    const getTokenBalance = async () => {
        await connectContract();
        const txResponse = await contract.getTokenBalance(tokenAddress);
        await txResponse.wait();
        if(txResponse < 1) {
            setTokenBalance("Balance is 0");
        } else {
            let data = txResponse.toString();
            setTokenBalance(` ${data} `);
        }
    }

    return (
    <div>
        <button className='button-54' onClick={getAuroraBalance} >1. CHECK AURORA BALANCE</button> 
        <p>Aurora Balance: {auroraBalance} </p>
        <br />
        <button className='button-54' onClick={getTokenBalance} >2. CHECK OTHER TOKEN BALANCES</button>
        <br />
        <br />
        <input type="text" value={tokenAddress} onChange={e => setTokenAddress(e.target.value)} placeholder="enter token address" />
        <p>Token Balance: {tokenBalance} </p>
        <br />
        <br />
        <br />
        <button className='button-54' onClick={ () => navigate("/") } >HOMEPAGE</button>
    </div>
)
}

export default D3Treasury
'''
'''--- src/components/Lowerbar.js ---
import React from 'react';
import LowerbarMain from './LowerbarMain';

function Lowerbar() {
  return (
    <div className="Lowerbar">
      <LowerbarMain />
    </div>
  )
}

export default Lowerbar
'''
'''--- src/components/LowerbarMain.js ---
import React from 'react';
import Read from './Read';
import Write from "./Write";

function LowerbarMain() {
  return (
    <div className='lowerbarMain'>
        <Read />
        <Write />
    </div>

  )
}

export default LowerbarMain
'''
'''--- src/components/Read.js ---
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from  "react-router-dom";
import Read1Details from './Read1Details';
import Read5Rejected from './Read5Rejected';
import Read6Passed from "./Read6Passed";
import Read7Waiting from "./Read7Waiting";
import Read8Struct from './Read8Struct';
import Read9About from "./Read9About";
import Read10Guide from "./Read10Guide";
import Read11Proposals from "./Read11Proposals";
import D2Donate from './D2Donate';
import D3Treasury from './D3Treasury';

function Read() {
  return (
    <div  className='ReadArea'>
      <Router>
          <Routes>
            <Route path="/" element={ <Read1Details /> } />
            <Route path="/rejected" element={ <Read5Rejected /> }/>
            <Route path="/passed" element={ <Read6Passed /> } />
            <Route path="/proposals" element={ <Read7Waiting/> } />
            <Route path="/details" element={ <Read8Struct /> } />
            <Route path="/about" element={ <Read9About /> } />
            <Route path="/guide" element={ <Read10Guide /> } />
            <Route path="/all" element={ <Read11Proposals /> } />
            <Route path="/donate" element={ <D2Donate /> } />
            <Route path="/treasury" element={ <D3Treasury /> } />
            
          </Routes>
      </Router>
    </div>
  )
}

export default Read
'''
'''--- src/components/Read10Guide.js ---
import React from 'react';
import { useNavigate } from 'react-router-dom';

function Read10Guide() {
  const navigate = useNavigate();
  
  return (
    <div>
        <h4>SYSTEM MANUEL</h4>
        <p>Betelegeuse Foundation System is open to everybody.</p>
        <p>1. Make sure you are on Aurora Test Network on your Metamask</p>
        <br />
        <button className='button-54' onClick={ () => navigate("/")}>Homepage</button>
    </div>
  )
}

export default Read10Guide;
'''
'''--- src/components/Read11Proposals.js ---
import React from 'react';
import { useNavigate } from 'react-router-dom';

function Read11Proposals() {
    const navigate = useNavigate();

  return (
    <div>
        <button className='button-54' onClick={() => navigate("/proposals")}>SEE WAITING PROPOSALS</button>
        <br />
        <br />
        <button className='button-54' onClick={() => navigate('/passed')}>SEE PASSED PROPOSALS</button>
        <br />
        <br />
        <button className='button-54' onClick={() => navigate('/rejected')}>SEE REJECTED PROPOSALS</button>
        <br />
        <br />
        <button className='button-54' onClick={() => navigate("/details")}>PREVIOUS VOTINGS</button>
        <br />
        <br />
        <br />
        <button className='button-54' onClick={ ()=>navigate("/")}>Homepage</button>
    </div>
  )
}

export default Read11Proposals
'''
'''--- src/components/Read1Details.js ---
import React from 'react';
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

import Read3Info from './Read3Info';
import Read4Check from "./Read4Check";
import D1Enable from "./D1Enable";

function Read1Details() {
  const {ethereum} = window;
  const navigate = useNavigate();

  let[metamaskAccount, setMetamaskAccount] = useState([]);
  const connectMetamask =  async () => {
    if(window.ethereum !== "undefined") {
      const accounts = await ethereum.request({ method: "eth_requestAccounts"});
      localStorage.setItem('account', JSON.stringify(accounts[0]));
      setMetamaskAccount(JSON.parse(window.localStorage.getItem('account')));
    } else {
      setMetamaskAccount("install metamask to your browser my good lord");
    }
  }

  useEffect(() => {
    setMetamaskAccount(JSON.parse(window.localStorage.getItem('account')));
  }, [metamaskAccount]);
  

  return (
    <div>
      <span id="smallscreen"></span>
      <button className='button-54' onClick={connectMetamask}> Connect to Metamask </button>
      <p>Your Account is: {metamaskAccount}</p>
      <Read3Info />
      <Read4Check account={metamaskAccount} />
      <button className='button-54' onClick={() => navigate("/all")}>ALL PROPOSALS</button>
      <br />
      <br />
      <h3>DONATION AREA</h3>
      <button className='button-54 lightGreen' onClick={() => navigate("/donate")}>DONATE</button>
      <br />
      <br />
      <button className='button-54 lightGreen' onClick={() => navigate("/treasury")} >TREASURY</button>
      <br />
      <br />
      <D1Enable />

    </div>
  )
}

export default Read1Details;
'''
'''--- src/components/Read2Balance.js ---
import React from 'react';
import { useState } from 'react';
import {ABI} from "./ContractABI.js";
import {CONTRACT_ADDRESS} from "./ContractAddress.js";
import {ethers } from "ethers"; 

function Read2Balance() {

  let[foundationBalance, setFoundationBalance] = useState("");
  let contract;
  let signer;
  const CONTRACT_ABI = ABI;
  const ADDRESS = CONTRACT_ADDRESS;
 
  const connectContract = async () => {
    const Address = ADDRESS;
    const ABI = CONTRACT_ABI;
    const provider = new ethers.providers.Web3Provider(window.ethereum);
    signer = provider.getSigner();
    contract = new ethers.Contract(Address, ABI, signer);
  }

  const getBalance = async () => {
    await connectContract();
    const txResponse = await contract.getBalance();
    if(txResponse < 1) {
      setFoundationBalance("Balance is 0");
    } else {
      let data = txResponse.toString();
      let data2 = data.slice(0, -18);
      setFoundationBalance(`${data2} `);
    }

  }
  return (
    <div>
      <button className='button-54' onClick={getBalance}>Foundation Balance</button>
      <p>Foundation Balance is: {foundationBalance}</p>
    </div>
  )
}

export default Read2Balance;
'''
'''--- src/components/Read3Info.js ---
import React from 'react';
import { ABI } from "./ContractABI.js";
import { CONTRACT_ADDRESS } from "./ContractAddress";
import { useState } from 'react';
import { ethers } from "ethers"; 

function Read3Info() {
  let[foundationAddress, setFoundationAddress] = useState("");
  let[foundationOwner, setFoundationOwner] = useState("");
  let contract;
  let signer;
  const CONTRACT_ABI = ABI;
  const ADDRESS = CONTRACT_ADDRESS;

  const connectContract = async () => {
    const Address = ADDRESS;
    const ABI = CONTRACT_ABI;
    const provider = new ethers.providers.Web3Provider(window.ethereum);
    signer = provider.getSigner();
    contract = new ethers.Contract(Address, ABI, signer);
  }

  const getData = async () => {
    await connectContract();
    const txResponse = await contract.getDetails();
    const {0: owner, 1: contractAddress} = txResponse;
    setFoundationAddress(contractAddress);
    setFoundationOwner(owner);
  }

  return (
    <div>
      <button className='button-54' onClick={getData}> See Contract Details</button>
      <p><strong>Betelgeuse Foundation Contract Address:</strong>  {foundationAddress}</p>
      <p><strong>Contract Administrator ("Owner") Address:</strong>  {foundationOwner}</p>
    </div>
  )
}

export default Read3Info;
'''
'''--- src/components/Read4Check.js ---
import React from 'react';
import { useState } from 'react';
import {ABI} from "./ContractABI.js";
import {CONTRACT_ADDRESS} from "./ContractAddress.js";
import { ethers } from 'ethers'; 

function Read4Check({account}) {

    let [membershipStatus, setMembershipStatus] = useState("");
    let contract;
    let signer;
    const CONTRACT_ABI = ABI;
    const ADDRESS = CONTRACT_ADDRESS;
  

    const connectContract = async () => {
        const Address = ADDRESS;
        const ABI = CONTRACT_ABI;
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        signer = provider.getSigner();
        contract = new ethers.Contract(Address, ABI, signer);
    }

    const checkStatus = async () => {
        connectContract();
        const txResponse = await contract.memberMapping(account);
        if(txResponse === true) {
            setMembershipStatus("yes, you are");
        } else {
            setMembershipStatus("no you are not member yet");
        }

    }

    return (
        <div>
            <button className='button-54' onClick={checkStatus}>Check to see if you are a Member</button>
            <p>{membershipStatus}</p>
        </div>
    )
}

export default Read4Check;
'''
'''--- src/components/Read5Rejected.js ---
import React from 'react';
import { useState } from 'react';
import { ABI } from "./ContractABI.js";
import { CONTRACT_ADDRESS } from "./ContractAddress";
import { ethers } from "ethers";
import { useNavigate } from 'react-router-dom';
 
function Read5Rejected() {

    const navigate = useNavigate();

    const CONTRACT_ABI = ABI;
    const ADDRESS = CONTRACT_ADDRESS;
    let signer;
    let contract;

    const connectContract = async () => {
        const Address = ADDRESS;
        const ABI = CONTRACT_ABI;
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        signer = provider.getSigner();
        contract = new ethers.Contract(Address, ABI, signer);
    }

    let listProposals = [];
    const getArray = async () => {
        connectContract();
        const txResponse = await contract.getAllProRejected();
        listProposals = txResponse;
    }
    let[content, setContent] = useState("");
    const displayArray = async () => {
        await getArray();
        if(listProposals.length < 1) {
            setContent("No proposal has been rejected yet")
        } else {
            setContent(listProposals.map( word =>  <p key={word}> {word}</p> ) )
        }
    }

    return (
        <div>
            <button className='button-54' onClick={displayArray}>See Rejected Proposals</button>
            <div style={{paddingTop:"20px", paddingBottom: "20px"}}> <strong>Rejected Proposals: </strong>{content}</div>
            <button className='button-54' onClick={ () => navigate("/")}>Homepage</button>

        </div>
    )
}

export default Read5Rejected;
'''
'''--- src/components/Read6Passed.js ---
import React from 'react';
import { useState } from 'react';
import { ABI } from "./ContractABI.js";
import { CONTRACT_ADDRESS } from './ContractAddress.js';
import { ethers } from "ethers";
import { useNavigate } from 'react-router-dom';
 
function Read6Passed() {

    let contract;
    let signer;
    const CONTRACT_ABI = ABI;
    const ADDRESS = CONTRACT_ADDRESS;

    const connectContract = async () => {
        const ABI = CONTRACT_ABI;
        const Address = ADDRESS;
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        signer = provider.getSigner();
        contract = new ethers.Contract(Address, ABI, signer);
    }

    const navigate = useNavigate();

    let listProposals = [];
    const getArray = async () => {
        connectContract();
        const txResponse = await contract.getAllProPassed();
        listProposals = txResponse;
    }
    let[content, setContent] = useState("");
    const displayArray = async () => {
        await getArray();
        if(listProposals.length < 1) {
            setContent("No proposal has been submitted")
        } else {
            setContent(listProposals.map( word =>  <p key={word}> {word}</p> ) )
        }
    }

    return (
    <div>
        <button className='button-54' onClick={displayArray}>See Passed Proposals</button>
        <div style={{paddingTop:"20px", paddingBottom: "20px"}}><strong>Passed Proposals: </strong> {content}</div>
        <button className='button-54' onClick={ () => navigate("/") }>Homepage</button>
    </div>
    )

}

export default Read6Passed;
'''
'''--- src/components/Read7Waiting.js ---
import React from 'react'
import { useNavigate } from 'react-router-dom';
import { useState } from 'react';
import { ethers } from "ethers";
import {CONTRACT_ADDRESS} from "./ContractAddress";
import {ABI} from "./ContractABI";
 
function Read7Waiting() {
    const navigate = useNavigate();

    let contract;
    let signer;
    const CONTRACT_ABI = ABI;
    const ADDRESS = CONTRACT_ADDRESS;

    const connectContract = async () => {
        const Address = ADDRESS;
        const ABI = CONTRACT_ABI;
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        signer = provider.getSigner();
        contract = new ethers.Contract(Address, ABI, signer);
    }

    let listProposals = [];
    const getArray = async () => {
        connectContract();
        const txResponse = await contract.getAllPro();
        listProposals = txResponse;
    }
    let[content, setContent] = useState("");
    const displayArray = async () => {
        await getArray();
        if(listProposals.length < 1) {
            setContent("No proposal has been submitted")
        } else {
            setContent(listProposals.map( word =>  <p key={word}> {word}</p> ) )
        }
    }

    return (
        <div>
            <button onClick={displayArray} className="button-54" >See Waiting Proposals</button>
            <div style={{paddingTop:"20px", paddingBottom: "20px"}}><strong>Waiting Proposals: </strong>{content}</div>
            <button className="button-54" onClick={ () => navigate("/")}>Homepage</button>
        </div>
    )
}

export default Read7Waiting;
'''
'''--- src/components/Read8Struct.js ---
import React from 'react';
import { ethers } from "ethers";
import { CONTRACT_ADDRESS } from "./ContractAddress";
import { ABI } from "./ContractABI";
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
 
function Read8Struct() {
    const navigate = useNavigate();
    let[inputValue, setInputValue] = useState("");
    let contract;
    let signer;
    const CONTRACT_ABI = ABI;
    const ADDRESS = CONTRACT_ADDRESS;
    const connectContract = async () => {
        const ABI = CONTRACT_ABI;
        const Address = ADDRESS;
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        signer = provider.getSigner();
        contract = new ethers.Contract(Address, ABI, signer);
    }

    let[name, setName] = useState("");
    let[yesVotes, setYesVotes] = useState("");
    let[noVotes, setNoVotes] = useState("");
    let[totalVotes, setTotalVotes] = useState("");
    const getStruct = async () => {
        await connectContract();
        const txResponse = await contract.getRecordStruct(inputValue);
        if(txResponse.proposalName.length < 2) {
            setName("no such proposal, enter correct id number");
            setNoVotes(0);
            setYesVotes(0);
            setTotalVotes(0);
        } else {
            const novotes = await txResponse.noV.toNumber();
            const yesvotes = await txResponse.yesV.toNumber();
            setName(txResponse.proposalName);
            setNoVotes(novotes);
            setYesVotes(yesvotes);
            setTotalVotes(novotes+yesvotes);
        }
    }

  return (
    <div>
        <button className='button-54' onClick={getStruct}>SEE PREVIOUS VOTINGS</button>
        <div style={{paddingTop:"20px", paddingBottom: "20px"}}>
            <input type="number" value={inputValue} onChange={(e) => setInputValue(e.target.value)} placeholder='enter proposal id'/>
            <br />
            <div style={{lineHeight: "1.8", paddingTop: "10px"}}>
                <span><strong>Proposal Name: </strong> {name}</span> 
                <br />
                <span><strong>Yes Votes: </strong> {yesVotes}</span>
                <br />
                <span><strong>No Votes: </strong> {noVotes}</span>
                <br />
                <span><strong>Total Votes: </strong> {totalVotes}</span>
            </div>
        </div>
        <button className='button-54' onClick={ ()=>navigate("/")}>Homepage</button>
    </div>
  )
}

export default Read8Struct
'''
'''--- src/components/Read9About.js ---
import React from 'react'
import { useNavigate } from 'react-router-dom';

function Read9About() {
  const navigate = useNavigate();
  return (
    <div>
        <h4>BETELGEUSE FOUNDATION</h4>
        <p>Betelegeuse Foundation is project prepared for application to NEAR MetaBuildHackaton III on Devpost website. For Hackaton details,
          please visit: <a className='links2' href="https://metabuild.devpost.com/">devpost.com</a>
        </p>
        <p>Project Owners: Abdulhakim ALTUNKAYA, Sedat TASKIRAN <br />
        Project Created in: November 2022</p>
        <p>Credits for button styles: <a className="links2" href="https://getcssscan.com/css-buttons-examples">getcssscan.com</a></p>
        <button className='button-54' onClick={ () => navigate("/")}>Homepage</button>

    </div>
  )
}

export default Read9About;
'''
'''--- src/components/Upperbar.js ---
import React from 'react';
import UpperbarTop from './UpperbarTop';
import UpperbarBottom from './UpperbarBottom';

function Upperbar() {
  return (
    <div className='Upperbar'>
      <UpperbarTop />
      <UpperbarBottom />
    </div>
  )
}

export default Upperbar
'''
'''--- src/components/UpperbarBottom.js ---
import React from 'react';

function UpperbarBottom() {
  const sameTab = url => {
    window.open(url, '_self', 'noopener,noreferrer');
  };

  return (
    <div className='UpperbarBottom'>
      <div onClick={() => sameTab('https://dainty-khapse-f31682.netlify.app/about')}> 
          <a href="https://dainty-khapse-f31682.netlify.app/about" target="_self" rel="noopener noreferrer"> 
          <button className="button-52" >About</button></a> 
      </div> &nbsp; &nbsp; &nbsp;
      <div onClick={() => sameTab('https://dainty-khapse-f31682.netlify.app/guide')}> 
          <a href="https://dainty-khapse-f31682.netlify.app/guide" target="_self" rel="noopener noreferrer"> 
          <button className="button-52" >Guide</button></a> 
      </div>
    </div>

  )
}

export default UpperbarBottom;

'''
'''--- src/components/UpperbarTop.js ---
import React from 'react'
import UpperbarTop1 from './UpperbarTop1';
import UpperbarTop2 from "./UpperbarTop2";

function UpperbarTop() {
  return (
    <div className='UpperbarTop'>
      <UpperbarTop2/>
      <UpperbarTop1/>
    </div>
  )
}

export default UpperbarTop
'''
'''--- src/components/UpperbarTop1.js ---
import React from 'react'

function UpperbarTop1() {
  const sameTab = url => {
    window.open(url, '_self', 'noopener,noreferrer');
  };
  
  return (
    <div className='heading' onClick={() => sameTab('https://dainty-khapse-f31682.netlify.app/')}> 
        <a className='links' href="https://dainty-khapse-f31682.netlify.app/" target="_self" rel="noopener noreferrer"> 
            <span className='links' style={{color: "red"}}>BETELGEUSE</span>FOUNDATION
        </a>
    </div>
  )
}

export default UpperbarTop1;
'''
'''--- src/components/UpperbarTop2.js ---
import React from 'react';
import icon from "../images/icon.png";

function UpperbarTop2() {
  return (
    <div className='basketImage'>
      <img src={icon} id="icon"
      alt="clickable basket icon" />
    </div>
  )
}

export default UpperbarTop2
'''
'''--- src/components/WBecomeMember.js ---
import React from 'react'
import { ABI } from './ContractABI';
import { CONTRACT_ADDRESS } from "./ContractAddress";
import { ethers } from "ethers";
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
/* global BigInt */
   
function WBecomeMember() {
  const navigate = useNavigate();

  let contract;
  const ADDRESS = CONTRACT_ADDRESS;
  const CONTRACT_ABI = ABI;
  let signer;

  let [inputValue, setInputValue] = useState("");

  const connectContract = async () => {
    const Address = ADDRESS;
    const ABI = CONTRACT_ABI;
    const provider = new ethers.providers.Web3Provider(window.ethereum);
    signer = provider.getSigner();
    contract = new ethers.Contract(Address, ABI, signer);
  }

  const becomeMember = async () => {
    await connectContract();
    if(inputValue < 1) {
      alert("you need to pay membership fee. Pay at least 0 Aurora Coin. Type 1 in the input area");
    } else {
      let finalAmount = BigInt(inputValue*(10**18));
      console.log(finalAmount);
      //Below line is disabled to let Near Hackaton evaluators to test the system 
      //const txResponse = await contract.becomeMember({value: finalAmount});
      const txResponse = await contract.becomeMember();
      await txResponse.wait();
    }
  }

  const {ethereum} = window;
  let[membershipStatus, setMembershipStatus] = useState("");
  const checkStatus =  async () => {
    let account;
    if(window.ethereum !== "undefined") {
      const accounts = await ethereum.request({ method: "eth_requestAccounts"});
      account = accounts[0];
    } else {
      alert("install metamask to your browser my good lord");
    }
    await connectContract();
    const txResponse = await contract.memberMapping(account);
    if(txResponse === true) {
        setMembershipStatus("You are a member");
    } else {
        setMembershipStatus("You are not a member yet");
    }
  }

  return (
    <div>            
        <button className='button-54' onClick={checkStatus}>Check to see if you are a Member</button>
        <p>{membershipStatus}</p>
        <button className='button-54' onClick={becomeMember}>Become a Member</button>
        <p>To become a member you need to pay at least 0 Aurora Coin to the Foundation.
          You can type 1 in the input field. Don't worry, payment is disabled for now.
        </p>

        <input type="number" 
            value = {inputValue}
            placeholder='Minimum is 0'
            onChange={e => setInputValue(e.target.value) }/>
        <br />
        <br />
        <button className='button-54' onClick={()=> navigate("/")} >Homepage</button>
        
    </div>
  )
}

export default WBecomeMember;
'''
'''--- src/components/WChooseMain.js ---
import React from 'react';
import { ethers } from "ethers";
import { ABI } from "./ContractABI";
import { CONTRACT_ADDRESS } from "./ContractAddress";
 
function WChooseMain() {

    let contract;
    let signer;
    const CONTRACT_ABI = ABI;
    const ADDRESS = CONTRACT_ADDRESS;

    const connectContract = async () => {
        const ABI = CONTRACT_ABI;
        const Address = ADDRESS;
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        signer = provider.getSigner();
        contract = new ethers.Contract(Address, ABI, signer);
    }

    const chooseMain = async () => {
        await connectContract();
        await contract.chooseMainProposal();
        alert("Success, main proposal choosen. You can now see it by clicking on See Main Proposal Button")
    }
    return (
        <div>
            <button className='button-54 redButton' onClick={chooseMain}>Choose Proposal (Admin)</button>
        </div>
    )
}

export default WChooseMain
'''
'''--- src/components/WCloseVoting.js ---
import React from 'react'
import {ethers} from "ethers";
import {ABI} from "./ContractABI";
import {CONTRACT_ADDRESS} from "./ContractAddress";
 
function WCloseVoting() {
    let contract;
    let signer;
    const CONTRACT_ABI = ABI;
    const ADDRESS = CONTRACT_ADDRESS;

    const connectContract = async () => {
        const ABI = CONTRACT_ABI;
        const Address = ADDRESS;
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        signer = provider.getSigner();
        contract = new ethers.Contract(Address, ABI, signer);
    }

    const closeVotingSession = async () => {
        connectContract();
        const txResponse = await contract.closeVoting();
        await txResponse.wait();
        await contract.resetTable();
    }

  return (
    <div>
        <button className='button-54 redButton' onClick={closeVotingSession}> Close Voting (Admin)</button>
    </div>
  )
}

export default WCloseVoting;
'''
'''--- src/components/WDetails.js ---
import React from 'react';
import { useNavigate } from 'react-router-dom';
import WMainProposal from './WMainProposal';
import WLeave from './WLeave';
import WWithdraw from './WWithdraw';
import WChooseMain from "./WChooseMain";
import WCloseVoting from './WCloseVoting';

 
function WDetails() {
    const navigate = useNavigate();
    

    return (
        <div>
            <WMainProposal />
            <button className='button-54' onClick={ () => navigate("/vote") }>Vote for Proposal</button>
            <br />
            <br />
            <button className='button-54' onClick={ () => navigate("/member") }>Become Member</button>
            <br />
            <br />
            <button className='button-54' onClick={ () => navigate("/submit") }>Submit Proposal</button>
            <br />
            <br />
            <br />
            <WChooseMain />
            <br />
            <WCloseVoting />
            <br />
            <button className='button-54 redButton' onClick={ () => navigate("/remove") }>Remove Person (Admin)</button>
            <br />
            <br />
            <WWithdraw />
            <br />
            <br />
            <WLeave />
        </div>
    )
}

export default WDetails
'''
'''--- src/components/WLeave.js ---
import React from 'react'
import { ABI } from './ContractABI';
import { CONTRACT_ADDRESS} from "./ContractAddress";
import { ethers } from "ethers";
 
function WLeave() {
    let contract;
    let signer;
    const CONTRACT_ABI = ABI;
    const ADDRESS = CONTRACT_ADDRESS;
    const connectContract = async () => {
        const ABI = CONTRACT_ABI;
        const Address = ADDRESS;
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        signer = provider.getSigner();
        contract = new ethers.Contract(Address, ABI, signer);
    }
    
    const leave = async () => {
        connectContract();
        const txResponse = await contract.leaveMembership();
        await txResponse.wait();
    }

  return (
    <div>
        <button className='button-54 blackButton' onClick={leave}>Leave Membership</button>
    </div>
  )
}

export default WLeave;
'''
'''--- src/components/WMainProposal.js ---
import React from 'react';
import { useState } from 'react';
import {ABI} from "./ContractABI.js";
import { CONTRACT_ADDRESS } from './ContractAddress.js';
import {ethers } from "ethers";
 
function WMainProposal() {
    let[mainProposalText, setMainProposalText] = useState("");

    let contract;
    let signer;
    const CONTRACT_ABI = ABI;
    const ADDRESS = CONTRACT_ADDRESS;

    const connectContract = async () => {
        const ABI = CONTRACT_ABI;
        const Address = ADDRESS;
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        signer = provider.getSigner();
        contract = new ethers.Contract(Address, ABI, signer);
    }

    const getMainProposal = async () => {
        connectContract();
        const txResponse = await contract.mainProposal();
        if(txResponse === "") {
          setMainProposalText("There is no proposal yet");
        } else{
          setMainProposalText(txResponse);
        }
    }
    return (
      <div>
          <button className='button-54' onClick={getMainProposal}>See Main Proposal</button>
          <p>Main Proposal is: {mainProposalText}</p>
      </div>
    )
}

export default WMainProposal;
'''
'''--- src/components/WMakeProposals.js ---
import React from 'react';
import { useState } from 'react';
import { ABI } from "./ContractABI";
import {CONTRACT_ADDRESS} from "./ContractAddress";
import {ethers} from "ethers";
import { useNavigate } from 'react-router-dom';
 
function WMakeProposals() {
  const navigate = useNavigate();

  let[inputValue, setInputValue] = useState("");

  let contract;
  let signer;
  const CONTRACT_ABI = ABI;
  const ADDRESS = CONTRACT_ADDRESS;

  const connectContract = async () => {
    const Address = ADDRESS;
    const ABI = CONTRACT_ABI;
    const provider = new ethers.providers.Web3Provider(window.ethereum);
    signer = provider.getSigner();
    contract = new ethers.Contract(Address, ABI, signer);
  }

  const makeProposal = async () => {
    connectContract();
    if(inputValue.length > 1) {
      const txResponse = await contract.makeProgramProposal(inputValue);
      await txResponse.wait();
    } else {
      alert("To submit a proposal, you must write it first.")
    }

  }

  return (
    <div>
        <button className='button-54' onClick={makeProposal}>Make a Proposal</button>
        <p>To make a proposal you must be a member.</p>
        <input type="text" value={inputValue} 
        onChange={e => setInputValue(e.target.value)}
        placeholder="write your proposal"/>
        <br />
        <br />
        <button className='button-54' onClick={()=> navigate("/")}>Homepage</button>
    </div>
  )
}

export default WMakeProposals;
'''
'''--- src/components/WRemove.js ---
import React from 'react';
import { useState } from 'react';
import { ABI } from "./ContractABI";
import { CONTRACT_ADDRESS } from "./ContractAddress";
import { ethers } from "ethers";
import { useNavigate } from 'react-router-dom';
 
function WRemove() {
    const navigate = useNavigate();
    let[someText, setSomeText] = useState("Owner of the Contract can remove anybody from Membership by entering their Wallet Address")

    let[inputValue, setInputValue] = useState("");
    let contract;
    let signer;
    const CONTRACT_ABI = ABI;
    const ADDRESS = CONTRACT_ADDRESS; 

    const connectContract = async () => {
        const ABI = CONTRACT_ABI;
        const Address = ADDRESS;
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        signer = provider.getSigner();
        contract = new ethers.Contract(Address, ABI, signer);
    }

    const remove = async () => {
        await connectContract();
        if(inputValue.charAt(1) !== "x") {
            alert("address type is invalid. Check what you entered inside input area again. ")
        } else {
            const txResponse = await contract.removeMember(inputValue);
            await txResponse.wait();
            setSomeText(`${inputValue} successfully removed`);
        }

    }
    return (
        <div>
            <button className='button-54' onClick={remove}>Remove Membership</button>
            <p>{someText}</p>
            <input type="text" onChange={(e) => setInputValue(e.target.value)} 
            placeholder="enter wallet address here"/>
            <br />
            <br />
            <button className='button-54' onClick={ () => navigate("/") }>Homepage</button>
        </div>
    )

}

export default WRemove;
'''
'''--- src/components/WVote.js ---
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { useState } from 'react';
import { ABI } from "./ContractABI";
import { CONTRACT_ADDRESS } from "./ContractAddress";
import { ethers } from "ethers";
 
function WVote() {
    const navigate = useNavigate();

    //connect to contract block
    let contract;
    let signer;
    const CONTRACT_ABI = ABI;
    const ADDRESS = CONTRACT_ADDRESS;
    const connectContract = async () => {
        const ABI = CONTRACT_ABI;
        const Address = ADDRESS;
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        signer = provider.getSigner();
        contract = new ethers.Contract(Address, ABI, signer);
    }

    //Get main proposal
    let[proposal, setProposal] = useState("");
    const getMain = async () => {
        connectContract();
        const txResponse = await contract.mainProposal();
        if(txResponse === "") {
            setProposal("There is no proposal yet");
        } else{
            setProposal(txResponse);
        }
    }

    //cast your vote
    const votingYes = async () => {
        connectContract();   
        const txResponse = await contract.mainProposal();
        if(txResponse === "") {
            alert("There is no proposal to vote for");
        } else{
            const txResponse = await contract.voteYes();
            await txResponse.wait();
        }
    }
    const votingNo = async () => {
        connectContract();
        const txResponse = await contract.mainProposal();
        if(txResponse === "") {
            alert("There is no proposal to vote for");
        } else{
            const txResponse = await contract.voteNo();
            await txResponse.wait();
        }
    }

    let[votingStatus, setVotingStatus] = useState("");
    const getStatus = async () => {
        await connectContract();
        const txResponse = await contract.getVotingStatus();
        if(txResponse === true) {
            setVotingStatus("Yes, you have already voted")
        } else {
            setVotingStatus("No, you have not voted yet");
        }
    }

  return (
    <div>
        <button className='button-54' onClick={getStatus}>See if you voted</button>
        <p><strong>Voting Status:</strong> {votingStatus}</p>
        <button className='button-54' onClick={getMain}>See Main Proposal</button>
        <p> <strong>Main Proposal:</strong> {proposal}</p>
        <div>
            <button className='buttonyellow' onClick={votingYes}>Yes</button>
            <button className='buttonyellow' onClick={votingNo}>No</button>
        </div>
        <br />
        <button className='button-54' onClick={ () => navigate("/") }>Homepage</button>
    </div>
  )
}

export default WVote;
'''
'''--- src/components/WWithdraw.js ---
import React from 'react';
import { ethers } from "ethers";
import { ABI } from "./ContractABI";
import { CONTRACT_ADDRESS } from "./ContractAddress";
 

function WWithdraw() {

    let contract;
    let signer;
    const CONTRACT_ABI = ABI;
    const ADDRESS = CONTRACT_ADDRESS;
    const connectContract = async () => {
        const Address = ADDRESS;
        const ABI = CONTRACT_ABI;
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        signer = provider.getSigner();
        contract = new ethers.Contract(Address, ABI, signer);
    }

    const withdrawAll = async () => {
        await connectContract();
        const txResponse = await contract.withdraw();
        await txResponse.wait();
    }

  return (
    <div>
        <button className='button-54 redButton' onClick={withdrawAll}>Withdraw (Admin)</button>
    </div>
  )
}

export default WWithdraw;
'''
'''--- src/components/Write.js ---
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from  "react-router-dom";
import WDetails from './WDetails';
import WVote from './WVote';
import WBecomeMember from './WBecomeMember';
import WMakeProposals from './WMakeProposals';
import WChooseMain from './WChooseMain';
import WCloseVoting from './WCloseVoting';
import WRemove from './WRemove';
 
function Write() {
  return (
    <div className='WriteArea'>

        <Router>
            <Routes>
              <Route path="/" element={ <WDetails /> } />
              <Route path="/vote" element={ <WVote /> }/>
              <Route path="/member" element={ <WBecomeMember /> }/>
              <Route path="/submit" element={ <WMakeProposals /> }/>
              <Route path="/choose" element={ <WChooseMain /> } />
              <Route path="/close" element={ <WCloseVoting /> } />
              <Route path='/remove' element={ <WRemove /> } />
            </Routes>
        </Router>
    </div>
  )
}

export default Write;
'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

'''