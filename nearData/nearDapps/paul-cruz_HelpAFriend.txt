*GitHub Repository "paul-cruz/HelpAFriend"*

'''--- README.md ---
# HelpAFriend
Smart contract on NEAR Protocol blockchain to donate to friend's or public projects

'''
'''--- backend/as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- backend/asconfig.json ---
{
  "workspaces": [
    "contract/"
  ]
}

'''
'''--- backend/contract/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- backend/contract/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- backend/contract/assembly/index.ts ---
import { logging } from "near-sdk-as";
import { Context } from "near-sdk-core"
import { people, Person, privateProjects, Project, publicProjects } from "./model"

@nearBindgen
export class Contract {

  register(): bool {
    const exists = people.get(Context.sender);
    if (exists) {
      logging.log("User already in network");
      return false;
    }
    people.set(Context.sender, new Person(Context.sender));
    return true;
  }

  createProject(name: string, description: string, goal: u64, isPublic: bool): bool {
    const user = people.get(Context.sender);

    if (!user) {
      logging.log("User not registered in the network");
      return false;
    }

    user.projects.add(name);

    var newProject = new Project(name, Context.sender, description, goal, isPublic);
    if (isPublic) {
      publicProjects.set(name, newProject);
      logging.log("public created");
    }

    privateProjects.set(name, newProject);
    return true;
  }

  getPublicProjects(): string {
    let projects: Array<string> = publicProjects.keys();
    return projects.join(",");
  }

  getPublicProject(id: string): string {
    let project: Project | null = publicProjects.get(id);
    if (project == null) {
      return "No project found";
    }
    return project.get();
  }

  addFriend(friendId: string): bool {
    const user = people.get(Context.sender);
    if (!user) {
      logging.log("User not registered in the network");
      return false;
    }

    const friend = people.get(friendId);
    if (!friend) {
      logging.log("Friend doesn't exist in the network");
      return false;
    }
    user.addFriend(friendId);
    return true;
  }

  getFriendProjects(friendId: string): string | null {
    const user = people.get(Context.sender);
    if (!user) {
      logging.log("User not registered in the network");
      return null;
    }

    if (!user.friends.has(friendId)) {
      logging.log("Friend doesn't exist");
      return null;
    }
    const friend = people.getSome(friendId);
    logging.log(friend.projects);

    let projects = friend.getProjects();
    logging.log(projects);
    return projects.join(",");
  }

  getFriendProject(friendId: string, name: string): string | null {
    const user = people.get(Context.sender);
    if (!user) {
      logging.log("User not registered in the network");
      return null;
    }

    if (!user.friends.has(friendId)) {
      logging.log("Friend doesn't exist");
      return null;
    }
    const friend = people.getSome(friendId);
    if (!friend.projects.has(name)) {
      logging.log("Friend doesn't have that project");
      return null;
    }

    let project: Project | null = privateProjects.get(name);
    if (project == null) {
      return "No project found";
    }
    return project.get();
  }

  donatePublicProject(name: string, amount: u64): bool {
    const project = publicProjects.get(name);
    if (!project) {
      logging.log("Project doesn't exist");
      return false;
    }

    project.donate(amount);
    publicProjects.set(name, project);
    return true;
  }

  donateFriendProject(friendId: string, name: string, amount: u64): bool {
    const user = people.get(Context.sender);
    const friend = people.get(friendId);
    if (!user || !friend) {
      logging.log("User not registered in the network");
      return false;
    }

    const isFriend = user.friends.has(friendId);
    if (!isFriend) {
      logging.log("User is not your friend");
      return false;
    }

    const projectExists = friend.projects.has(name);
    if (!projectExists) {
      logging.log("Project doesn't exist");
      return false;
    }

    var project = privateProjects.getSome(name);
    project.donate(amount);
    privateProjects.set(name, project);
    return true;
  }

  viewPeople(): string {
    let p = people.keys();
    return p.join(",");
  }

  getFriends(): string {
    const user = people.get(Context.sender);
    if (!user) {
      logging.log("User not registered in the network");
      return "";
    }

    let friends = user.friends.values();
    return friends.join(",");
  }

}
'''
'''--- backend/contract/assembly/model.ts ---
import { PersistentSet, PersistentUnorderedMap } from "near-sdk-as";

@nearBindgen
export class Person {
    accountId: string;
    friends: PersistentSet<string>;
    projects: PersistentSet<string>;

    constructor(
        accountId: string) {
        this.accountId = accountId;
        this.friends = new PersistentSet<string>(accountId + "_friends");
        this.projects = new PersistentSet<string>(accountId + "_projects");
    }

    addFriend(accountId: string): void {
        this.friends.add(accountId);
    }

    getProjects(): Array<string> {
        return this.projects.values();
    }
}

@nearBindgen
export class Project {
    name: string;
    ownerId: string;
    description: string;
    goal: u64;
    got: u64;
    isPublic: bool;

    constructor(
        name: string,
        ownerId: string,
        description: string,
        goal: u64,
        isPublic: bool) {
        this.name = name;
        this.ownerId = ownerId;
        this.description = description;
        this.goal = goal;
        this.isPublic = isPublic;
    }

    donate(amount: u64): void {
        assert(amount < this.goal, "Goal reached");
        this.got += amount;
    }

    get(): string {
        return this.name + " : " + this.description + ". Reached: " + this.got.toString();
    }
}

export let publicProjects = new PersistentUnorderedMap<string, Project>("publicProjects");
export let privateProjects = new PersistentUnorderedMap<string, Project>("privateProjects");
export let people = new PersistentUnorderedMap<string, Person>("peopleInNet");

'''
'''--- backend/contract/tsconfig.json ---
{
  "extends": "assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ]
}
'''
'''--- backend/contract/utils.ts ---
import { u128, Context, ContractPromise } from "near-sdk-as";

/**
 * == TYPES ====================================================================
 */

/**
 * Account IDs in NEAR are just strings.
 */
export type AccountId = string;

/**
 * Gas is u64
 */
export type Gas = u64;

/**
 * Amounts, Balances, and Money in NEAR is are u128.
 */

export type Amount = u128;

export type Balance = Amount;

export type Money = Amount;

/**
 * Timestamp in NEAR is a number.
 */
export type Timestamp = u64;

/**
 * == CONSTANTS ================================================================
 *
 * ONE_NEAR = unit of NEAR token in yocto Ⓝ (1e24)
 * XCC_GAS = gas for cross-contract calls, ~5 Tgas (teragas = 1e12) per "hop"
 * MIN_ACCOUNT_BALANCE = 3 NEAR min to keep account alive via storage staking
 *
 * TODO: revist MIN_ACCOUNT_BALANCE after some real data is included b/c this
 *  could end up being much higher
 */

export const ONE_NEAR = u128.from("1000000000000000000000000");
export const XCC_GAS: Gas = 20_000_000_000_000;
export const MIN_ACCOUNT_BALANCE: u128 = u128.mul(ONE_NEAR, u128.from(3));

/**
 * == FUNCTIONS ================================================================
 */

/**
 * @function asNEAR
 * @param amount {u128} - Yocto Ⓝ token quantity as an unsigned 128-bit integer
 * @returns {string}    - Amount in NEAR, as a string
 *
 * @example
 *
 *    asNEAR(7000000000000000000000000)
 *    // => '7'
 */
export function asNEAR(amount: u128): string {
  return u128.div(amount, ONE_NEAR).toString();
}

/**
 * @function toYocto
 * @param amount {number} - Integer to convert
 * @returns {u128}        - Amount in yocto Ⓝ as an unsigned 128-bit integer
 *
 * @example
 *
 *    toYocto(7)
 *    // => 7000000000000000000000000
 */
export function toYocto(amount: number): u128 {
  return u128.mul(ONE_NEAR, u128.from(amount))
}

/**
 * Function to assert that the contract has called itself
 */
export function assert_self(): void {
  const caller = Context.predecessor
  const self = Context.contractName
  assert(caller == self, "Only this contract may call itself");
}

export function assert_single_promise_success(): void {
  const x = ContractPromise.getResults()
  assert(x.length == 1, "Expected exactly one promise result")
  assert(x[0].succeeded, "Expected PromiseStatus to be successful")
}

'''
'''--- backend/package.json ---
{
  "name": "help-a-friend",
  "version": "0.0.1",
  "description": "Project to help freinds to make projects",
  "scripts": {
    "dev": "watch -d -n 1 'clear && yarn test'",
    "test": "yarn asp -f unit.spec",
    "clean": "rm -rf ./build && rm -rf ./neardev",
    "build": "asb --target debug",
    "build:release": "asb",
    "asp": "asp --verbose --nologo"
  },
  "keywords": [],
  "author": "github.com/paul-cruz",
  "license": "ISC",
  "devDependencies": {
    "near-sdk-as": "^3.1.0"
  }
}
'''
'''--- backend/scripts/1.dev-deploy.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 1: Build the contract (may take a few seconds)"
echo ---------------------------------------------------------
echo

yarn build:release

echo
echo
echo ---------------------------------------------------------
echo "Step 2: Deploy the contract"
echo
echo "(edit scripts/1.dev-deploy.sh to deploy other contract)"
echo ---------------------------------------------------------
echo

# comment out the line below to deploy the other example contract
near dev-deploy ./build/release/simple.wasm

# uncomment the line below to deploy the other example contract
# near dev-deploy ./build/release/singleton.wasm

echo
echo
echo ---------------------------------------------------------
echo "Step 3: Prepare your environment for next steps"
echo
echo "(a) find the contract (account) name in the message above"
echo "    it will look like this: [ Account id: dev-###-### ]"
echo
echo "(b) set an environment variable using this account name"
echo "    see example below (this may not work on Windows)"
echo
echo ---------------------------------------------------------
echo 'export CONTRACT=<dev-123-456>'
# uncomment this line for a useful hint when using the singleton style
# echo "near call \$CONTRACT init --accountId \$CONTRACT"
echo ---------------------------------------------------------
echo

exit 0

'''
'''--- backend/scripts/2.use-contract.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 0: Check for environment variable with contract name"
echo ---------------------------------------------------------
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"

echo
echo
echo ---------------------------------------------------------
echo "Step 1: Call 'view' functions on the contract"
echo
echo "(run this script again to see changes made by this file)"
echo ---------------------------------------------------------
echo

near view $CONTRACT helloWorld

echo
echo

near view $CONTRACT read '{"key":"some-key"}'

echo
echo
echo ---------------------------------------------------------
echo "Step 2: Call 'change' functions on the contract"
echo ---------------------------------------------------------
echo

# the following line fails with an error because we can't write to storage without signing the message
# --> FunctionCallError(HostError(ProhibitedInView { method_name: "storage_write" }))
# near view $CONTRACT write '{"key": "some-key", "value":"some value"}'
near call $CONTRACT write '{"key": "some-key", "value":"some value"}' --accountId $CONTRACT

echo
echo "now run this script again to see changes made by this file"
exit 0

'''
'''--- backend/scripts/3.cleanup.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 0: Check for required environment variables"
echo ---------------------------------------------------------
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$BENEFICIARY" ] && echo "Missing \$BENEFICIARY environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"
[ -z "$BENEFICIARY" ] || echo "Found it! \$BENEFICIARY is set to [ $BENEFICIARY ]"

echo
echo
echo ---------------------------------------------------------
echo "Step 1: Delete $CONTRACT, setting $BENEFICIARY as beneficiary"
echo ---------------------------------------------------------
echo
near delete $CONTRACT $BENEFICIARY

echo
echo ---------------------------------------------------------
echo "Step 2: Clean up project folders"
echo ---------------------------------------------------------
echo
yarn clean

exit 0

'''
'''--- backend/scripts/README.md ---
## Setting up your terminal

The scripts in this folder are designed to help you demonstrate the behavior of the contract(s) in this project.

It uses the following setup:

```sh
# set your terminal up to have 2 windows, A and B like this:
┌─────────────────────────────────┬─────────────────────────────────┐
│                                 │                                 │
│                                 │                                 │
│                A                │                B                │
│                                 │                                 │
│                                 │                                 │
└─────────────────────────────────┴─────────────────────────────────┘
```

### Terminal **A**

*This window is used to compile, deploy and control the contract*
- Environment
  ```sh
  export CONTRACT=        # depends on deployment
  export OWNER=           # any account you control

  # for example
  # export CONTRACT=dev-1615190770786-2702449
  # export OWNER=sherif.testnet
  ```

- Commands

  _helper scripts_
  ```sh
  1.dev-deploy.sh                # helper: build and deploy contracts
  2.use-contract.sh              # helper: call methods on ContractPromise
  3.cleanup.sh                   # helper: delete build and deploy artifacts
  ```

### Terminal **B**

*This window is used to render the contract account storage*
- Environment
  ```sh
  export CONTRACT=               # depends on deployment

  # for example
  # export CONTRACT=dev-1615190770786-2702449
  ```

- Commands
  ```sh
  # monitor contract storage using near-account-utils
  # https://github.com/near-examples/near-account-utils
  watch -d -n 1 yarn storage $CONTRACT
  ```
---

## OS Support

### Linux

- The `watch` command is supported natively on Linux
- To learn more about any of these shell commands take a look at [explainshell.com](https://explainshell.com)

### MacOS

- Consider `brew info visionmedia-watch` (or `brew install watch`)

### Windows

- Consider this article: [What is the Windows analog of the Linux watch command?](https://superuser.com/questions/191063/what-is-the-windows-analog-of-the-linuo-watch-command#191068)

'''
'''--- frontend/README.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `yarn start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `yarn test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `yarn build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `yarn eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `yarn build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

'''
'''--- frontend/package.json ---
{
  "name": "help-a-friend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.11.4",
    "@testing-library/react": "^11.1.0",
    "@testing-library/user-event": "^12.1.10",
    "bootstrap": "^5.1.1",
    "mdbreact": "^5.1.0",
    "near-api-js": "^0.43.1",
    "near-seed-phrase": "^0.2.0",
    "react": "^17.0.2",
    "react-bootstrap": "^2.0.0-rc.1",
    "react-dom": "^17.0.2",
    "react-scripts": "4.0.3",
    "web-vitals": "^1.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- frontend/public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- frontend/public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- frontend/public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- frontend/src/App.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

'''
'''--- frontend/src/App.js ---

import React, { useContext, useEffect } from 'react';
import './App.css';
import Dashboard from './components/Dashboard';
import WalletLogin from './components/WalletLogin';
import { appStore, onAppMount } from './state/app';

const App = () => {
  const { state, dispatch, update } = useContext(appStore);

  const { near, wallet, account, loading } = state;

  const onMount = () => {
    dispatch(onAppMount());
  };
  useEffect(onMount, []);

  if (loading) {
    return <div className="root">
      <h3>Working on it!</h3>
    </div>;
  }

  return (
    <div className="root">
      {(wallet && wallet.signedIn) ? <Dashboard {...{ wallet, account }} /> : <WalletLogin wallet={wallet} />}

    </div>
  );
};

export default App;
'''
'''--- frontend/src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- frontend/src/components/Dashboard.js ---
import { useEffect, useState } from 'react';
import Container from 'react-bootstrap/Container';
import Row from 'react-bootstrap/Row'
import Col from 'react-bootstrap/Col';
import Button from 'react-bootstrap/Button';
import FriendsTable from "./FriendsTable";
import ProjectTable from "./ProjectTable";
import { getFriends, getPublicProjects, registerUser } from "../utils/near-utils";

const Dashboard = ({ wallet, account }) => {
    const [publicProjects, setPublicProjects] = useState([]);
    const [friends, setFriends] = useState([]);
    const [friendProjects, setfriendProjects] = useState([]);

    useEffect(() => {
        (async () => {
            try {
                const rsp = await registerUser(wallet);
                console.log(rsp);
                var result = await getPublicProjects(wallet);
                var {
                    status: { SuccessValue },
                } = result;
                setPublicProjects(atob(SuccessValue).replace(/"/g, '').split(','));
                result = await getFriends(wallet);
                var {
                    status: { SuccessValue },
                } = result;
                setFriends(atob(SuccessValue).replace(/"/g, '').split(','));
            } catch (e) {
                console.log(e);
            }
        })();
    }, []);

    return (
        <Container fluid>
            <Row>
                <Col md="12">
                    <h1>Hi: {account.accountId}, Help A Friend!</h1>
                    <Button variant="outline-danger" onClick={() => wallet.signOut()}>Sign Out</Button>
                </Col>
            </Row>
            <Row>
                <Col md="4">
                    <h2>Friends</h2>
                    <FriendsTable data={friends} updateTable={setfriendProjects} wallet={wallet} />
                </Col>
                <Col md="4">
                    <h2>Friend project</h2>
                    <ProjectTable data={friendProjects} wallet={wallet} />
                </Col>
                <Col md="4">
                    <h2>Public Projects</h2>
                    <ProjectTable data={publicProjects} wallet={wallet} />
                </Col>
            </Row>
        </Container>
    );
};

export default Dashboard;
'''
'''--- frontend/src/components/FriendsTable.js ---
import React from 'react';
import Table from 'react-bootstrap/Table';
import { getFriendProjects } from '../utils/near-utils';

const FriendsTable = ({ wallet, data, updateTable }) => {

    const update = async (name) => {

        const data = {
            "friendId": name
        };

        const result = await getFriendProjects(wallet, data);
        const {
            status: { SuccessValue },
        } = result;
        updateTable(atob(SuccessValue).replace(/"/g, '').split(','));
    }

    return (<Table striped bordered hover size="sm">
        <thead>
            <tr>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            {data.map((name) =>
                <tr key={name} onClick={() => { update(name) }}>
                    <td>{name}</td>
                </tr>
            )}
        </tbody>
    </Table>);
};

export default FriendsTable;
'''
'''--- frontend/src/components/ProjectTable.js ---
import React from 'react';
import Table from 'react-bootstrap/Table';
import Button from 'react-bootstrap/Button';
import { donatePublicProject } from '../utils/near-utils';

const ProjectTable = ({ wallet, data }) => {

    const handleDonate = async (name) => {
        const project = {
            "name": name,
            "amount": "20"
        };

        const result = await donatePublicProject(wallet, project);
        const {
            status: { SuccessValue },
        } = result;
        console.log(atob(SuccessValue));
    }

    return (<Table striped bordered hover size="sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Donate</th>
            </tr>
        </thead>
        <tbody>
            {data.map((name) =>
                <tr key={name}>
                    <td>{name}</td>
                    <td><Button variant="outline-success" onClick={() => { handleDonate(name) }}>Donate</Button></td>
                </tr>
            )}
        </tbody>
    </Table>);
};

export default ProjectTable;
'''
'''--- frontend/src/components/Wallet.js ---
import React from 'react';

export const Wallet = ({ wallet, account }) => {

    if (wallet && wallet.signedIn) {
        return <>
            <h3>Wallet Account</h3>
            <p>Signed In: {account.accountId}</p>
            <p>Balance: {wallet.balance}</p>
            <button onClick={() => wallet.signOut()}>Sign Out</button>
        </>;
    }

    return <>
        <p>Sign in with your NEAR Wallet</p>
        <button onClick={() => wallet.signIn()}>Sign In</button>
    </>;
};
'''
'''--- frontend/src/components/WalletLogin.js ---
import React from "react";
import Container from 'react-bootstrap/Container';
import Row from 'react-bootstrap/Row'
import Col from 'react-bootstrap/Col';
import Card from 'react-bootstrap/Card';
import Button from 'react-bootstrap/Button';
import ModalFooter from 'react-bootstrap/ModalFooter';

const WalletLogin = ({ wallet }) => {
    
    return (
        <Container fluid>
            <Row>
                <Col md="3" />
                <Col md="6">
                    <Card>
                        <Card.Body className="mx-4">
                            <div className="text-center">
                                <h3 className="dark-grey-text mb-5">
                                    <strong>Sign in with your NEAR Wallet</strong>
                                </h3>
                            </div>
                            <div className="text-center mb-3">
                                <Button
                                    type="button"
                                    gradient="blue"
                                    rounded
                                    className="Button-block z-depth-1a"
                                    onClick={() => wallet.signIn()}
                                >
                                    Sign in
                                </Button>
                            </div>
                        </Card.Body>
                        <ModalFooter className="mx-5 pt-3 mb-1">
                            <p className="font-small grey-text d-flex justify-content-end">
                                Not a member?
                                <a href="https://wallet.near.org/create" className="blue-text ml-1">
                                    Create wallet
                                </a>
                            </p>
                        </ModalFooter>
                    </Card>
                </Col>
            </Row>
        </Container>
    );
};

export default WalletLogin;
'''
'''--- frontend/src/config.js ---
const contractName = 'dev-1634751918172-80407676517691';

module.exports = function getConfig(isServer = false) {
    let config = {
        networkId: 'default',
        nodeUrl: 'https://rpc.testnet.near.org',
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        contractName,
    };

    if (process.env.REACT_APP_ENV !== undefined) {
        config = {
            ...config,
            GAS: '200000000000000',
            DEFAULT_NEW_ACCOUNT_AMOUNT: '5',
            contractMethods: {
                changeMethods: ['new', 'deposit', 'make_payment', 'withdraw'],
                viewMethods: ['get_deposits'],
            },
        };
    }

    if (process.env.REACT_APP_ENV === 'prod') {
        config = {
            ...config,
            networkId: 'mainnet',
            nodeUrl: 'https://rpc.mainnet.near.org',
            walletUrl: 'https://wallet.near.org',
            helperUrl: 'https://helper.mainnet.near.org',
            contractName: 'near',
        };
    }

    return config;
};
'''
'''--- frontend/src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- frontend/src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import { AppProvider } from './state/app.js';
import 'bootstrap/dist/css/bootstrap.min.css';
import './styles/styles.css';

ReactDOM.render(
  <AppProvider>
    <App />
  </AppProvider>,
  document.getElementById('root')
);

'''
'''--- frontend/src/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
'''
'''--- frontend/src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- frontend/src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- frontend/src/state/app.js ---
import { State } from '../utils/state';

import { initNear } from './near';

const initialState = {
    app: {
        mounted: false,
    },
    near: {
        initialized: false,
    },
};

export const { appStore, AppProvider } = State(initialState, 'app');

export const onAppMount = () => async ({ update, getState, dispatch }) => {
    update('app', { mounted: true });
    dispatch(initNear());
};
'''
'''--- frontend/src/state/near.js ---
import getConfig from '../config';
import * as nearAPI from 'near-api-js';
import { getWallet, postSignedJson } from '../utils/near-utils';

export const {
    GAS,
    networkId, nodeUrl, walletUrl, nameSuffix,
    contractName,
} = getConfig();

export const {
    utils: {
        format: {
            formatNearAmount, parseNearAmount
        }
    }
} = nearAPI;

export const initNear = () => async ({ update, getState, dispatch }) => {
    const { near, wallet } = await getWallet();

    wallet.signIn = () => {
        wallet.requestSignIn(contractName, 'Blah Blah');
    };
    const signOut = wallet.signOut;
    wallet.signOut = () => {
        signOut.call(wallet);
        update('wallet.signedIn', false);
    };

    wallet.signedIn = wallet.isSignedIn();

    let account;
    if (wallet.signedIn) {
        account = wallet.account();
        wallet.balance = formatNearAmount((await wallet.account().getAccountBalance()).available, 2);
        await update('', { near, wallet, account });
    }

    await update('', { near, wallet, account });
};
'''
'''--- frontend/src/styles/styles.css ---
body{
    text-align: center;
}
'''
'''--- frontend/src/utils/near-utils.js ---
import getConfig from '../config';
import { keyStores, Near, connect, WalletConnection, WalletAccount, utils } from 'near-api-js';

export const {
	GAS,
	networkId, nodeUrl, walletUrl, nameSuffix,
	contractName, contractMethods
} = getConfig();

export const getWallet = async () => {
	const near = await connect({
		networkId, nodeUrl, walletUrl, deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() },
	});
	const wallet = new WalletAccount(near);
	return { near, wallet };
};

export const getPublicProjects = async (wallet) => {
	const response = await wallet.account().functionCall({
		contractId: contractName,
		methodName: 'getPublicProjects',
		GAS
	});
	return response;
};

export const getFriends = async (wallet) => {
	const response = await wallet.account().functionCall({
		contractId: contractName,
		methodName: 'getFriends',
		GAS
	});
	return response;
};

export const getFriendProjects = async (wallet, data) => {
	const response = await wallet.account().functionCall({
		contractId: contractName,
		methodName: 'getFriendProjects',
		args: data,
		GAS
	});
	return response;
};

export const registerUser = async (wallet) => {
	const response = await wallet.account().functionCall({
		contractId: contractName,
		methodName: 'register',
		GAS
	});
	return response;
};

export const donatePublicProject = async (wallet, data) => {
	const response = await wallet.account().functionCall({
		contractId: contractName,
		methodName: 'donatePublicProject',
		args: data,
		GAS
	});
	return response;
};
'''
'''--- frontend/src/utils/state.js ---
import React, { createContext, useReducer } from 'react';

export const State = (initialState, prefix) => {
	let updatedState;
	const getState = () => updatedState;
	const store = createContext(initialState);
	const { Provider: InnerProvider } = store;

	const updateState = (state, newState, path = '') => {
		// console.log('updateState', state, path, newState) // debugging
		if (path.length === 0) {
			return { ...state, ...newState };
		}
		const pathArr = path.split('.');
		const first = pathArr[0];
		state = { ...state };
		if (!state[first]) {
			state[first] = {};
		}
		if (pathArr.length === 1) {
			state[first] = !!newState && typeof newState === 'object' && !Array.isArray(newState) ? {
				...state[first],
				...newState
			} : newState;
		} else {
			state[first] = {
				...state[first],
				...updateState(state[first], newState, pathArr.slice(1).join('.'))
			};
		}

		return state;
	};

	const Provider = ({ children }) => {
		const [state, dispatch] = useReducer((state, payload) => {
			const { path, newState } = payload;
			if (path === undefined) {
				return state;
			}
			updatedState = updateState(state, newState, path);
			return updatedState;
		}, initialState);

		const update = (path, newState) => {
			dispatch({ path, newState });
		};
		const wrappedDispatch = (fn) => fn({ update, getState, dispatch: wrappedDispatch });

		return <InnerProvider value={{ update, state, dispatch: wrappedDispatch }}>{children}</InnerProvider>;
	};

	if (prefix) {
		return {
			[prefix + 'Store']: store,
			[prefix.substr(0, 1).toUpperCase() + prefix.substr(1) + 'Provider']: Provider,
		};
	}
    
	return { store, Provider };
};
'''
'''--- frontend/src/utils/storage.js ---
export const get = (k, d = {}) => {
    let v = localStorage.getItem(k);
    if (typeof d !== 'object') {
        return v;
    }
    try {
        return JSON.parse(v || JSON.stringify(d));
    } catch (e) {
        return v;
    }
};
export const set = (k, v) => localStorage.setItem(k, typeof v === 'string' ? v : JSON.stringify(v));
export const del = (k) => localStorage.removeItem(k);
'''