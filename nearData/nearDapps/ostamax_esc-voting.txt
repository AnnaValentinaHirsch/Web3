*GitHub Repository "ostamax/esc-voting"*

'''--- README.md ---
A Eurovision Song Contest voting simulator on blockchain (NEAR) in Rust
=================================

## Description

This contract implements simple voting (in a ESC manner) backed by storage on blockchain.
Contract in `contract/src/lib.rs` provides methods to add voting from an account, get final scoreboard, voting by an account, list of voters.

## Setup
Install dependencies:

```
yarn
```

If you don't have `Rust` installed, complete the following 3 steps:

1) Install Rustup by running:

```
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
```

([Taken from official installation guide](https://www.rust-lang.org/tools/install))

2) Configure your current shell by running:

```
source $HOME/.cargo/env
```

3) Add wasm target to your toolchain by running:

```
rustup target add wasm32-unknown-unknown
```

Next, make sure you have `near-cli` by running:

```
near --version
```

If you need to install `near-cli`:

```
npm install near-cli -g
```

## Login
If you do not have a NEAR account, please create one with [NEAR Wallet](https://wallet.testnet.near.org).

In the project root, login with `near-cli` by following the instructions after this command:

```
near login
```

Modify the top of `src/config.js`, changing the `CONTRACT_NAME` to be the NEAR account that was just used to log in.

```javascript
…
const CONTRACT_NAME = 'YOUR_ACCOUNT_NAME_HERE'; /* TODO: fill this in! */
…
```

Start the example!

```
yarn start
```

## To Test

```
cd contract
cargo test
```

## To Explore

- `contract/src/lib.rs` for the contract code
- `src/index.html` for the front-end HTML
- `src/main.js` for the JavaScript front-end code and how to integrate contracts

'''
'''--- contract/Cargo.toml ---
[package]
name = "rust-counter-tutorial"
version = "0.1.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "3.1.0"
itertools = "0.10.3"
[dev-dependencies]
near-sdk-sim = "3.1.0"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

'''
'''--- contract/src/lib.rs ---
//! This contract implements voting procedure for Eurovision Song Contest
//!  backed by storage on blockchain
//!
//!
use itertools::enumerate;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{near_bindgen};
use std::collections::HashMap;
use std::string::String;
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, Default)]
pub struct EscVoting {
    scoreboard: HashMap<String, u64>,
    voting_history: HashMap<String, Vec<String>>,
}

#[near_bindgen]
impl EscVoting {
    #[init]
    pub fn new() -> Self {
        Self {
            scoreboard: HashMap::new(),
            voting_history: HashMap::new(),
        }
    }
    
    // Public read-only method: Returns the final scoreboard.
    pub fn get_scoreboard(&self) -> HashMap<String, u64> {
        return self.scoreboard.clone();
    }

    // Public read-only method: Returns the list of countries were voted for by user.
    pub fn get_voting_by_name(&self, name: String) -> Vec<String> {
        self.voting_history.get(&name).unwrap().clone()
    }

    // Public read-only method: Returns the list of accounts that have already voted.
    pub fn get_list_of_voters(&self) -> Vec<String> {
        return self.voting_history.keys().cloned().collect();
    }

    // Public read-only method: Returns whether the account has voted.
    pub fn is_voter_exist(&self, voter: String) -> bool {
        self.voting_history.get(&voter) != None
    }

    // Public method: Updates the scoreboard according to the votes provided by the account.
    #[payable]
    pub fn update_scoreboard_with_list(&mut self, input_list: Vec<String>, voter: String) {
        let list_to_insert = input_list.clone();
        let points: [u64; 10] = [12, 10, 8, 7, 6, 5, 4, 3, 2, 1];
        for (idx, country) in enumerate(list_to_insert) {
            if self.scoreboard.contains_key(&country) {
                *self.scoreboard.get_mut(&country).unwrap() += points[idx];
            } else {
                self.scoreboard.insert(country, points[idx]);
            }
        }
        self.voting_history.insert(voter, input_list);
    }
}

/*
 * the rest of this file sets up unit tests
 * to run these, the command will be: `cargo test`
 */

// use the attribute below for unit tests
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::json_types::ValidAccountId;
    use near_sdk::test_utils::VMContextBuilder;
    use near_sdk::testing_env;
    use near_sdk::MockedBlockchain;

    // part of writing unit tests is setting up a mock context
    // provide a `predecessor` here, it'll modify the default context
    fn get_context(predecessor: ValidAccountId) -> VMContextBuilder {
        let mut builder = VMContextBuilder::new();
        builder.predecessor_account_id(predecessor);
        builder
    }

    fn type_of<T>(_: &T) -> &'static str {
        std::any::type_name::<T>()
    }

    #[test]
    pub fn test_get_scoreboard() {
        let context = VMContextBuilder::new();
        testing_env!(context.build());
        let contract = EscVoting::new();
        assert_eq!(
            type_of(&contract.get_scoreboard()),
            "std::collections::hash::map::HashMap<alloc::string::String, u64>"
        )
    }

    #[test]
    pub fn test_list_of_voters() {
        let context = VMContextBuilder::new();
        testing_env!(context.build());
        let contract = EscVoting::new();
        assert_eq!(
            type_of(&contract.get_list_of_voters()),
            "alloc::vec::Vec<alloc::string::String>"
        )
    }

    #[test]
    pub fn test_update_scoreboard_with_list() {
        let context = VMContextBuilder::new();
        testing_env!(context.build());
        let mut contract = EscVoting::new();
        let voting_list = vec![
            "0".to_string(),
            "1".to_string(),
            "2".to_string(),
            "3".to_string(),
            "4".to_string(),
            "5".to_string(),
            "6".to_string(),
            "7".to_string(),
            "8".to_string(),
            "9".to_string(),
        ];
        contract.update_scoreboard_with_list(voting_list, String::from("new_voter"));
        assert_eq!(contract.scoreboard.len(), 10)
    }

    #[test]
    pub fn test_get_voting_by_name() {
        let context = VMContextBuilder::new();
        testing_env!(context.build());
        let mut contract = EscVoting::new();
        let voter_name = String::from("new_voter");
        let voting_list = vec![
            "0".to_string(),
            "1".to_string(),
            "2".to_string(),
            "3".to_string(),
            "4".to_string(),
            "5".to_string(),
            "6".to_string(),
            "7".to_string(),
            "8".to_string(),
            "9".to_string(),
        ];
        contract
            .voting_history
            .insert(voter_name.clone(), voting_list.clone());
        assert_eq!(contract.get_voting_by_name(voter_name), voting_list)
    }

    #[test]
    pub fn test_is_voter_exist() {
        let context = VMContextBuilder::new();
        testing_env!(context.build());
        let mut contract = EscVoting::new();
        let voter_name = String::from("new_voter");
        let voting_list = vec![
            "0".to_string(),
            "1".to_string(),
            "2".to_string(),
            "3".to_string(),
            "4".to_string(),
            "5".to_string(),
            "6".to_string(),
            "7".to_string(),
            "8".to_string(),
            "9".to_string(),
        ];
        contract
            .voting_history
            .insert(voter_name.clone(), voting_list.clone());
        assert_eq!(contract.is_voter_exist(String::from("new_voter")), true)
    }
}

'''
'''--- neardev/dev-account.env ---
CONTRACT_NAME=dev-1668805196483-71449003413195
'''
'''--- neardev/shared-test-staging/test.near.json ---
{"account_id":"test.near","private_key":"ed25519:2wyRcSwSuHtRVmkMCGjPwnzZmQLeXLzLLyED1NDMt4BjnKgQL6tF85yBx6Jr26D2dUNeC716RBoTxntVHsegogYw"}

'''
'''--- neardev/shared-test/test.near.json ---
{"account_id":"test.near","private_key":"ed25519:2wyRcSwSuHtRVmkMCGjPwnzZmQLeXLzLLyED1NDMt4BjnKgQL6tF85yBx6Jr26D2dUNeC716RBoTxntVHsegogYw"}

'''
'''--- package.json ---
{
  "name": "esc-voting",
  "description": "ESC Voting Smart Contract\n\nThis project contains implementation of ESC voting backed by blockchain, written in Rust.",
  "version": "0.0.1",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "build": "cd contract && cargo build --target wasm32-unknown-unknown --release",
    "postbuild": "cp contract/target/wasm32-unknown-unknown/release/rust_counter_tutorial.wasm ./out/main.wasm",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d src",
    "deploy": "yarn build && yarn deploy:contract",
    "deploy:dev": "yarn build && near dev-deploy",
    "dev": "yarn deploy:dev && yarn start:dev",
    "prestart": "yarn build && yarn deploy:contract",
    "start": "parcel src/index.html",
    "start:dev": "env-cmd -f ./neardev/dev-account.env parcel src/index.html",
    "test:cargo": "cd contract && cargo test -- --nocapture",
    "test": "yarn build && yarn test:cargo && jest"
  },
  "devDependencies": {
    "env-cmd": "^10.1.0",
    "gh-pages": "~3.0.0",
    "jest": "~25.2.0",
    "jest-environment-node": "~26.0.1",
    "near-cli": "^1.0.1",
    "nodemon": "~2.0.4",
    "parcel-bundler": "~1.12.4"
  },
  "jest": {
    "testEnvironment": "near-cli/test_environment"
  },
  "dependencies": {
    "near-api-js": "^0.27.0",
    "regenerator-runtime": "^0.13.5"
  }
}

'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'asdf.test'; /* TODO: change this to your account */
function getConfig (env) {
  switch (env) {
    case 'production':
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org'
      }
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org'
      }
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org'
      }
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME
      }
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      }
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      }
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
  <link href="https://fonts.googleapis.com/css?family=Arvo&display=swap" rel="stylesheet">
  <style>
      h1 {
        margin-top: 3em;
        margin-bottom: 1em;
      }
      .voting {
        float: left;
        width: 50%;
        padding: 10px;
        
      }
      .results {
        float: left;
        width: 50%;
        padding: 10px;
        
      }
    </style>
</head>
<body style="background: #eef2fe; font-family: 'Arvo', serif;">
  <div class="container">
    <h1>This is a Eurovision Song Contest voting simulator on blockchain!</h1>
    
    <div class="sign-in" style="display: none;">
      <p>You'll need to sign in to call contract methods:</p>
      <button id="sign-in-button" class="btn btn-primary" style="background-color: #0072CE;">Sign In</button>
    </div>
    <div class="after-sign-in">
      <div id="voting" class="voting" style="background-color:#aaa; display: none;">
        <h4>Welcome to the voting page!</h4>
        <label for="12">12 points: </label>
        <select name="12" id="12">
          <option value="Albania">Albania</option>
          <option value="Austria">Austria</option>
          <option value="Belgium">Belgium</option>
          <option value="Bulgaria">Bulgaria</option>
          <option value="Croatia">Croatia</option>
          <option value="Cyprus">Cyprus</option>
          <option value="Denmark">Denmark</option>
          <option value="Estonia">Estonia</option>
          <option value="France">France</option>
          <option value="Germany">Germany</option>
          <option value="Greece">Greece</option>
          <option value="Italy">Italy</option>
          <option value="Latvia">Latvia</option>
          <option value="Norway">Norway</option>
          <option value="Portugal">Portugal</option>
          <option value="Romania">Romania</option>
          <option value="Spain">Spain</option>
          <option value="Sweden">Sweden</option>
          <option value="Switzerland">Switzerland</option>
          <option value="The Netherlands">The Netherlands</option>
          <option value="The United Kingdom">The United Kingdom</option>
          <option value="Ukraine">Ukraine</option>
        </select>
        <br>
        <label for="10">10 points: </label>
        <select name="10" id="10">
          <option value="Albania">Albania</option>
          <option value="Austria">Austria</option>
          <option value="Belgium">Belgium</option>
          <option value="Bulgaria">Bulgaria</option>
          <option value="Croatia">Croatia</option>
          <option value="Cyprus">Cyprus</option>
          <option value="Denmark">Denmark</option>
          <option value="Estonia">Estonia</option>
          <option value="France">France</option>
          <option value="Germany">Germany</option>
          <option value="Greece">Greece</option>
          <option value="Italy">Italy</option>
          <option value="Latvia">Latvia</option>
          <option value="Norway">Norway</option>
          <option value="Portugal">Portugal</option>
          <option value="Romania">Romania</option>
          <option value="Spain">Spain</option>
          <option value="Sweden">Sweden</option>
          <option value="Switzerland">Switzerland</option>
          <option value="The Netherlands">The Netherlands</option>
          <option value="The United Kingdom">The United Kingdom</option>
          <option value="Ukraine">Ukraine</option>
        </select>
        <br>
        <label for="8">8 points:</label>
        <select name="8" id="8">
          <option value="Albania">Albania</option>
          <option value="Austria">Austria</option>
          <option value="Belgium">Belgium</option>
          <option value="Bulgaria">Bulgaria</option>
          <option value="Croatia">Croatia</option>
          <option value="Cyprus">Cyprus</option>
          <option value="Denmark">Denmark</option>
          <option value="Estonia">Estonia</option>
          <option value="France">France</option>
          <option value="Germany">Germany</option>
          <option value="Greece">Greece</option>
          <option value="Italy">Italy</option>
          <option value="Latvia">Latvia</option>
          <option value="Norway">Norway</option>
          <option value="Portugal">Portugal</option>
          <option value="Romania">Romania</option>
          <option value="Spain">Spain</option>
          <option value="Sweden">Sweden</option>
          <option value="Switzerland">Switzerland</option>
          <option value="The Netherlands">The Netherlands</option>
          <option value="The United Kingdom">The United Kingdom</option>
          <option value="Ukraine">Ukraine</option>
        </select>
        <br>
        <label for="7">7 points: </label>
        <select name="7" id="7">
          <option value="Albania">Albania</option>
          <option value="Austria">Austria</option>
          <option value="Belgium">Belgium</option>
          <option value="Bulgaria">Bulgaria</option>
          <option value="Croatia">Croatia</option>
          <option value="Cyprus">Cyprus</option>
          <option value="Denmark">Denmark</option>
          <option value="Estonia">Estonia</option>
          <option value="France">France</option>
          <option value="Germany">Germany</option>
          <option value="Greece">Greece</option>
          <option value="Italy">Italy</option>
          <option value="Latvia">Latvia</option>
          <option value="Norway">Norway</option>
          <option value="Portugal">Portugal</option>
          <option value="Romania">Romania</option>
          <option value="Spain">Spain</option>
          <option value="Sweden">Sweden</option>
          <option value="Switzerland">Switzerland</option>
          <option value="The Netherlands">The Netherlands</option>
          <option value="The United Kingdom">The United Kingdom</option>
          <option value="Ukraine">Ukraine</option>
        </select>
        <br>
        <label for="6">6 points: </label>
        <select name="6" id="6">
          <option value="Albania">Albania</option>
          <option value="Austria">Austria</option>
          <option value="Belgium">Belgium</option>
          <option value="Bulgaria">Bulgaria</option>
          <option value="Croatia">Croatia</option>
          <option value="Cyprus">Cyprus</option>
          <option value="Denmark">Denmark</option>
          <option value="Estonia">Estonia</option>
          <option value="France">France</option>
          <option value="Germany">Germany</option>
          <option value="Greece">Greece</option>
          <option value="Italy">Italy</option>
          <option value="Latvia">Latvia</option>
          <option value="Norway">Norway</option>
          <option value="Portugal">Portugal</option>
          <option value="Romania">Romania</option>
          <option value="Spain">Spain</option>
          <option value="Sweden">Sweden</option>
          <option value="Switzerland">Switzerland</option>
          <option value="The Netherlands">The Netherlands</option>
          <option value="The United Kingdom">The United Kingdom</option>
          <option value="Ukraine">Ukraine</option>
        </select>
        <br>
        <label for="5">5 points: </label>
        <select name="5" id="5">
          <option value="Albania">Albania</option>
          <option value="Austria">Austria</option>
          <option value="Belgium">Belgium</option>
          <option value="Bulgaria">Bulgaria</option>
          <option value="Croatia">Croatia</option>
          <option value="Cyprus">Cyprus</option>
          <option value="Denmark">Denmark</option>
          <option value="Estonia">Estonia</option>
          <option value="France">France</option>
          <option value="Germany">Germany</option>
          <option value="Greece">Greece</option>
          <option value="Italy">Italy</option>
          <option value="Latvia">Latvia</option>
          <option value="Norway">Norway</option>
          <option value="Portugal">Portugal</option>
          <option value="Romania">Romania</option>
          <option value="Spain">Spain</option>
          <option value="Sweden">Sweden</option>
          <option value="Switzerland">Switzerland</option>
          <option value="The Netherlands">The Netherlands</option>
          <option value="The United Kingdom">The United Kingdom</option>
          <option value="Ukraine">Ukraine</option>
        </select>
        <br>
        <label for="4">4 points: </label>
        <select name="4" id="4">
          <option value="Albania">Albania</option>
          <option value="Austria">Austria</option>
          <option value="Belgium">Belgium</option>
          <option value="Bulgaria">Bulgaria</option>
          <option value="Croatia">Croatia</option>
          <option value="Cyprus">Cyprus</option>
          <option value="Denmark">Denmark</option>
          <option value="Estonia">Estonia</option>
          <option value="France">France</option>
          <option value="Germany">Germany</option>
          <option value="Greece">Greece</option>
          <option value="Italy">Italy</option>
          <option value="Latvia">Latvia</option>
          <option value="Norway">Norway</option>
          <option value="Portugal">Portugal</option>
          <option value="Romania">Romania</option>
          <option value="Spain">Spain</option>
          <option value="Sweden">Sweden</option>
          <option value="Switzerland">Switzerland</option>
          <option value="The Netherlands">The Netherlands</option>
          <option value="The United Kingdom">The United Kingdom</option>
          <option value="Ukraine">Ukraine</option>
        </select>
        <br>
        <label for="3">3 points: </label>
        <select name="3" id="3">
          <option value="Albania">Albania</option>
          <option value="Austria">Austria</option>
          <option value="Belgium">Belgium</option>
          <option value="Bulgaria">Bulgaria</option>
          <option value="Croatia">Croatia</option>
          <option value="Cyprus">Cyprus</option>
          <option value="Denmark">Denmark</option>
          <option value="Estonia">Estonia</option>
          <option value="France">France</option>
          <option value="Germany">Germany</option>
          <option value="Greece">Greece</option>
          <option value="Italy">Italy</option>
          <option value="Latvia">Latvia</option>
          <option value="Norway">Norway</option>
          <option value="Portugal">Portugal</option>
          <option value="Romania">Romania</option>
          <option value="Spain">Spain</option>
          <option value="Sweden">Sweden</option>
          <option value="Switzerland">Switzerland</option>
          <option value="The Netherlands">The Netherlands</option>
          <option value="The United Kingdom">The United Kingdom</option>
          <option value="Ukraine">Ukraine</option>
        </select>
        <br>
        <label for="2">2 points: </label>
        <select name="2" id="2">
          <option value="Albania">Albania</option>
          <option value="Austria">Austria</option>
          <option value="Belgium">Belgium</option>
          <option value="Bulgaria">Bulgaria</option>
          <option value="Croatia">Croatia</option>
          <option value="Cyprus">Cyprus</option>
          <option value="Denmark">Denmark</option>
          <option value="Estonia">Estonia</option>
          <option value="France">France</option>
          <option value="Germany">Germany</option>
          <option value="Greece">Greece</option>
          <option value="Italy">Italy</option>
          <option value="Latvia">Latvia</option>
          <option value="Norway">Norway</option>
          <option value="Portugal">Portugal</option>
          <option value="Romania">Romania</option>
          <option value="Spain">Spain</option>
          <option value="Sweden">Sweden</option>
          <option value="Switzerland">Switzerland</option>
          <option value="The Netherlands">The Netherlands</option>
          <option value="The United Kingdom">The United Kingdom</option>
          <option value="Ukraine">Ukraine</option>
        </select>
        <br>
        <label for="1">1 point: </label>
        <select name="1" id="1">
          <option value="Albania">Albania</option>
          <option value="Austria">Austria</option>
          <option value="Belgium">Belgium</option>
          <option value="Bulgaria">Bulgaria</option>
          <option value="Croatia">Croatia</option>
          <option value="Cyprus">Cyprus</option>
          <option value="Denmark">Denmark</option>
          <option value="Estonia">Estonia</option>
          <option value="France">France</option>
          <option value="Germany">Germany</option>
          <option value="Greece">Greece</option>
          <option value="Italy">Italy</option>
          <option value="Latvia">Latvia</option>
          <option value="Norway">Norway</option>
          <option value="Portugal">Portugal</option>
          <option value="Romania">Romania</option>
          <option value="Spain">Spain</option>
          <option value="Sweden">Sweden</option>
          <option value="Switzerland">Switzerland</option>
          <option value="The Netherlands">The Netherlands</option>
          <option value="The United Kingdom">The United Kingdom</option>
          <option value="Ukraine">Ukraine</option>
        </select>
        <br>
        <button id="vote" class="btn btn-primary" style="background-color: #0072CE;">Vote</button>
        <div class="sign-out">
          <button class="btn btn-primary" style="background-color: #0072CE;">Sign Out</button>
        </div>
      </div>
      <div class="results" style="display: none;">
        <h4>Scoreboard with results</h4>
        <button class="btn btn-primary" style="background-color: #0072CE;">View results</button>
        <table id="scoreboard" style="display: none;">
          <tr>
            <th>Country</th>
            <th>Points</th>
          </tr>
        </table>

      </div>
      </div>
    </div>
  </div>
  <script src="./main.js"></script>
</body>

</html>

'''
'''--- src/loader.html ---
<head>
    <script>
        window.paceOptions = {
            elements: {
                selectors: ['.never-appears']
            }
        };
    </script>
    <script src="https://cdn.jsdelivr.net/gh/HubSpot/pace@v0.5.3/pace.min.js"></script>
    <link href="https://cdn.jsdelivr.net/gh/HubSpot/pace@v0.5.3/themes/black/pace-theme-center-radar.css" rel="stylesheet" />
</head>
'''
'''--- src/main.js ---
import "regenerator-runtime/runtime";
import * as nearAPI from "near-api-js";
import getConfig from "./config";

const nearConfig = getConfig(process.env.NODE_ENV || "development");

// Price for the voting (1 NEAR token)
const votingPrice = "1000000000000000000000000"

async function connect(nearConfig) {
  // Connects to NEAR and provides `near`, `walletAccount` and `contract` objects in `window` scope
  // Initializing connection to the NEAR node.
  window.near = await nearAPI.connect({
    deps: {
      keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore()
    },
    ...nearConfig
  });

  // Needed to access wallet login
  window.walletConnection = new nearAPI.WalletConnection(window.near);

  // Initializing our contract APIs by contract name and configuration.
  window.contract = await new nearAPI.Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read-only – they don't modify the state, but usually return some value
    viewMethods: ['new','get_scoreboard', 'get_list_of_voters', 'get_voting_by_name', 'is_voter_exist'],
    // Change methods can modify the state, but you don't receive the returned value when called
    changeMethods: ['update_scoreboard_with_list'],
    // Sender is the account ID to initialize transactions.
    // getAccountId() will return empty string if user is still unauthorized
    sender: window.walletConnection.getAccountId()
  });
}

function errorHelper(err) {
  // if there's a cryptic error, provide more helpful feedback and instructions here
  // TODO: as soon as we get the error codes propagating back, use those
  if (err.message.includes('Cannot deserialize the contract state')) {
    console.warn('NEAR Warning: the contract/account seems to have state that is not (or no longer) compatible.\n' +
        'This may require deleting and recreating the NEAR account as shown here:\n' +
        'https://stackoverflow.com/a/60767144/711863');
  }
  if (err.message.includes('Cannot deserialize the contract state')) {
    console.warn('NEAR Warning: the contract/account seems to have state that is not (or no longer) compatible.\n' +
        'This may require deleting and recreating the NEAR account as shown here:\n' +
        'https://stackoverflow.com/a/60767144/711863');
  }
  console.error(err);
}

/**
 * Updates the user interface
 */
function updateUI(){
  // if we haven't signed in yet
  if (!window.walletConnection.getAccountId()) {    
        Array.from(document.querySelectorAll('.sign-in')).map(it => it.style = 'display: block;');        
  } else {
    // get account name
    var voter_name = window.walletConnection.getAccountId();
    // check whether account has already voted
    contract.is_voter_exist({voter: voter_name}).then(result => {
      if (result == true) {
        // get account's votes and show them 
        contract.get_voting_by_name({name: window.walletConnection.getAccountId()}).then(result => {
          show_old_voting(result);
        }); 
        document.querySelector('#vote').disabled = true;
        document.querySelectorAll('select').forEach(select => select.disabled = true);
        Array.from(document.querySelectorAll('.after-sign-in .voting')).map(it => it.style = 'display: block;');
        Array.from(document.querySelectorAll('.after-sign-in .results')).map(it => it.style = 'display: block;');

      } else {
        Array.from(document.querySelectorAll('.after-sign-in .voting')).map(it => it.style = 'display: block;');
      }
    });
  }
}

/**
 * Inserts voting results from HashMap to the table
 * @param {Map} scoreboardMap - HashMap with voting results
 */
function insert_values_to_table(scoreboardMap) {
  const sortedScoreboardMap = new Map([...scoreboardMap].sort((a, b) => b[1] - a[1]));
  var table = document.getElementById("scoreboard");
  if (table.rows.length != 1) {
    for(var i = 1;i<table.rows.length;){
      table.deleteRow(i);
    }
  } 
  var i = 1;
  for (const [key, value] of sortedScoreboardMap) {
    var row = table.insertRow(i);
    var cell1 = row.insertCell(0);
    var cell2 = row.insertCell(1);
    cell1.innerHTML = key;
    cell2.innerHTML = value;
    i += 1;
  }
}

/**
 * Checks whether the input array has unique values
 * @param {Array} input_array - array with coutries' names
 * @returns {bool} - boolean value input array has unique values or not
 */
function check_input_array_uniqueness(input_array) {
  if (new Set(input_array).size == 10) {
    return true;
  } else {
    return false;
  }
}

/**
 * Shows the voting made by account before. Set values to the drop-down list objects.
 * @param {Array} input_array - array with coutries' names
 */
function show_old_voting(input_array) {
  var pointsArray = ['12', '10', '8', '7', '6', '5', '4', '3', '2', '1'];
  var pointsArrayLength = pointsArray.length;
  for (var i = 0; i < pointsArrayLength; i++) {
    var country = input_array[i];
    document.getElementById(pointsArray[i]).value = country;
  }
}

// Log in user using NEAR Wallet on "Sign In" button click
document.querySelector('.sign-in .btn').addEventListener('click', () => {
  walletConnection.requestSignIn(nearConfig.contractName, 'Rust Counter Example');
});

// On "View results" button click
document.querySelector('.after-sign-in .results .btn').addEventListener('click', () =>{
 contract.get_scoreboard().then(result => {
    insert_values_to_table(new Map(Object.entries(result)));  
    document.querySelector('#scoreboard').style.display = 'block';
    updateUI();}).catch(err => errorHelper(err));
});

// On "Vote" button click
document.querySelector('.after-sign-in .btn').addEventListener('click', () =>{ 
  var pointsArray = ['12', '10', '8', '7', '6', '5', '4', '3', '2', '1'];
  var pointsArrayLength = pointsArray.length;
  var resultsArray = [];

  for (var i = 0; i < pointsArrayLength; i++) {
    var id_selected = document.getElementById(pointsArray[i]).selectedIndex;
    resultsArray.push(document.getElementById(pointsArray[i])[id_selected].value)
  }
  
  if (check_input_array_uniqueness(resultsArray)) {
    contract.update_scoreboard_with_list({input_list: resultsArray, voter: window.walletConnection.getAccountId()}, "", votingPrice).then(_ => {
      updateUI();
    });
  } else {
    window.confirm("Error! Selected countries should be unique!");
  }
});

document.querySelector('.after-sign-in .voting .sign-out .btn').addEventListener('click', () => {
  walletConnection.signOut();
  // TODO: Move redirect to .signOut() ^^^
  window.location.replace(window.location.origin + window.location.pathname);
});

window.nearInitPromise = connect(nearConfig)
    .then(updateUI)
    .catch(console.error);

'''
'''--- src/test-setup.js ---
(function () {
  let params = new URL(window.location).searchParams;
  let keyStore = new nearlib.keyStores.InMemoryKeyStore();
  nearConfig.contractName = params.get('contractName') || nearConfig.contractName;
  keyStore.setKey(nearConfig.networkId, nearConfig.contractName, nearlib.KeyPair.fromString(params.get('privateKey')));
  nearConfig.deps = { keyStore };
})();

'''