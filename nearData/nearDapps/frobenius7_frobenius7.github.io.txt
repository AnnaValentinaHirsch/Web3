*GitHub Repository "frobenius7/frobenius7.github.io"*

'''--- Near3.html ---
<!doctype html>
<html>
		<head><meta charset="utf-8" />
            <script src="https://cdn.jsdelivr.net/npm/near-api-js/dist/near-api-js.min.js"></script>
            </script>
            <style>
            </style>
      </head> 
		<body style="margin:0;overflow: hidden;">
            <div class="container">
                <div class="sign-in" style="display: none;">
                  <h1>hello =)</h1>
                  <h2>Sign in with NEAR wlllet to contiune</h2>
                  <button class="sign-in btn" style="background-color: #000000;">Log In</button>
                </div>
            
                <div class="after-sign-in" style="display: none;">
                  <h1>Please enter your name</h1>
                  <textarea id="text" placeholder="Name"></textarea><br>
                  <button id="send-greeting">Send Greeting</button>
                  <button class="sign-out btn" style="background-color: #000000;">Log Out</button>
                  <h2 id="response">Response will take time</h2>
                  <canvas id=canvas>   
                  </canvas>
                </div>
              </div>
	</body>
</html>
<script>
var CONTRACT_NAME='nearvember.testnet';

async function connect() {
    let near = await nearApi.connect({
    nodeUrl: "https://rpc.testnet.near.org",
    walletUrl: "https://wallet.testnet.near.org",
    helperUrl: "https://helper.testnet.near.org",
    explorerUrl: "https://explorer.testnet.near.org",
    networkId: 'testnet',
    keyStore: new window.nearApi.keyStores.BrowserLocalStorageKeyStore(window.localStorage, 'crystal')
    });

    window.walletConnection = new nearApi.WalletConnection(near);
    let account;
    if (window.walletConnection.isSignedIn()) {
        // Logged in account, can write as user signed up through wallet
        account = walletConnection.account();
        // connect to a NEAR smart contract
        window.contract = new nearApi.Contract(account, CONTRACT_NAME, {
          viewMethods: [],
          changeMethods: ['set_name']
        });
    } else {
        // Contract account, normally only gonna work in read only mode
        account = new nearApi.Account(near.connection, CONTRACT_NAME);
        //console.log(account);
    }
}

// Log in user using NEAR Wallet on "Sign In" button click
document.querySelector('.sign-in').addEventListener('click', () => {
  window.walletConnection.requestSignIn(CONTRACT_NAME, 'Nearvember');
});

// async function to call contract
async function callHello(){
    // call the contract
    let contract = await window.contract.set_name({
          args: { name: document.getElementById('text').value }
        })
    // //testing code
    // let contract = "test";

    // clear the form
    document.getElementById('text'),innerHTML="";
    // Output from contract
    document.getElementById('response').innerHTML=contract;
    return contract;
}

// switch between logged in/out
function updateUI() {
  // console.log("Update UI");
    if (!window.walletConnection.getAccountId()) {
    Array.from(document.querySelectorAll('.sign-in')).map(it => it.style = 'display: block;margin-left: 10%;margin-top: 10%;');
  }else {
    Array.from(document.querySelectorAll('.after-sign-in')).map(it => it.style = 'display: block;');
    var userName = window.walletConnection.getAccountId();
    userName = userName.slice(0,userName.lastIndexOf('.'));
    ifLoggedIn();
  }
}

nearApi.nearInitPromise = connect()
  .then(updateUI)
  .catch(console.error);
 
	// Things I want to do if logged in
	function ifLoggedIn(){
      var userName = window.walletConnection.getAccountId();
      userName = userName.slice(0,userName.lastIndexOf('.'));
      console.log("logged In!!")

      document.getElementById('send-greeting').addEventListener('click', () => {
      if (window.walletConnection.isSignedIn()) {
        callHello();
        start();
      }
    });

    //Logout
    document.querySelector('.sign-out').addEventListener('click', () => {
      if (window.walletConnection.isSignedIn()) {
        window.walletConnection.signOut();
        updateUI();
      }
    });

        
    
  // initialize 2D a (c)
	// initialize game state (s)
	// initialize keys states (u,r,d,l for directions, k for all the keyboard)
	var c = canvas.getContext`2d`, k = [u = r = d = l = s = 0];
	canvas.width = innerWidth;
	canvas.height = innerHeight/2;
// (initialize your global variables here)
c.w = innerWidth;
c.h = innerHeight;
// update u,l,d,r globals when an arrow key/wasd/zqsd is pressed or released

// DRAW LOOP
let reqAnimationId;
function smoothAnimation(e) {
    // animtion
	  canvas.width = innerWidth, canvas.height = innerHeight/2;
	  c.w=canvas.width, c.h = canvas.height;
    blue.x= c.w/2-(blue.w / 18 * 2)/2;
    blue.y = c.h*.05;
    animate();
    reqAnimationId = requestAnimationFrame(smoothAnimation)
}
// to start
function start() {
    reqAnimationId = requestAnimationFrame(smoothAnimation)
}

function animate(){
  tx(document.getElementById('response').innerHTML, c.w/2,c.h*.9,3, '#636e72');
  blue.update();
  blue.render();
}

function stop(){
  cancelAnimationFrame(reqAnimationId);
}

function tx(t, w, h, f, s) {
    c.textAlign = 'center';
    c.fillStyle = s;
    c.font = f + 'vw Consolas';
    c.fillText(t, w, h);
}

blue = makeSprite(c,1800,100,"blue.png",18,10,c.w/2,c.h*.1,2,0);

function makeSprite(c, w, h, img, f, t, x, y, r, s) {
let i = new Image();
let sp = sprite({
	context: c,
	width: w,
	height: h,
	image: i,
	numberOfFrames: f,
	ticksPerFrame: t,
	s: s
});
sp.x = x;
sp.y = y;
sp.scaleRatio = r;
i.src = img;
return sp;
}

function sprite(options) {

var that = {},
	frameIndex = 0,
	tickCount = 0,
	spot = 0,
	ticksPerFrame = options.ticksPerFrame || 0,
	numberOfFrames = options.numberOfFrames || 1;

that.context = options.context;
that.w = options.width;
that.h = options.height;
that.x = options.x;
that.y = options.y;
that.image = options.image;
that.scaleRatio = 1;
that.s = options.s;
that.seq = [];
that.dead = false;
that.outOfBounds= false;

that.newSeq = function (seq) {
	spot = 0;
	frameIndex = 0;
	that.seq = seq;
};

that.switch = function (x) {
	frameIndex = x;
};

that.update = function () {

	tickCount += 1;

	if (tickCount > ticksPerFrame) {

		tickCount = 0;

		// If the current frame index is in range
		if (frameIndex < numberOfFrames - 1) {
			// Go to the next frame
			frameIndex += 1;
			if (that.seq.length > 0) {
				frameIndex = that.seq[spot];
				spot += 1;
			}
		} else if (that.seq.length < 1) {
			frameIndex = 0;
		}
		if (spot > that.seq.length - 1) {
			spot = 0;
		}
	}
};
that.render = function () {
	// Draw the animation
	that.context.drawImage(
		that.image,
		frameIndex * that.w / numberOfFrames,
		0,
		that.w / numberOfFrames,
		that.h,
		that.x,
		that.y,
		that.w / numberOfFrames * that.scaleRatio,
		that.h * that.scaleRatio,
	);
};
that.getFrameWidth = function () {
	return that.w / numberOfFrames;
};
that.isClose = function (x, y, t) {
	var dx = (that.x + that.getFrameWidth() / 2 * that.scaleRatio) - (x + that.getFrameWidth() / 2),
		dy = (that.y + that.getFrameWidth() / 2 * that.scaleRatio) - (y + that.getFrameWidth() / 2);

	var dist = Math.sqrt(dx * dx + dy * dy);

	if (dist < that.getFrameWidth() * that.scaleRatio * t) {
		return true;
	} else {
		return false;
	}
};
that.move = function(){
	that.x+= that.s.x;
	that.y+= that.s.y;
	if(that.x>c.w || that.y>c.h || that.x<0 ||that.y<-100){
		that.outOfBounds = true;
	}
};
return that;
}

}

</script>

'''
'''--- NearvemberEx3.html ---
<!doctype html>
<html>
		<head><meta charset="utf-8" />
            <script src="https://cdn.jsdelivr.net/npm/near-api-js/dist/near-api-js.min.js"></script>
            </script>
            <style>
            </style>
      </head> 
		<body style="margin:0;overflow: hidden;">
            <div class="container">
                <div class="sign-in" style="display: none;">
                  <h1>hello =)</h1>
                  <h2>Sign in with NEAR wlllet to contiune</h2>
                  <button class="sign-in btn" style="background-color: #FFFFCC;">Log In</button>
                </div>
            
                <div class="after-sign-in" style="display: none;">
                  <h1>Please enter your name</h1>
                  <textarea id="text" placeholder="Name"></textarea><br>
                  <button id="send-greeting">Send Greeting</button>
                  <button class="sign-out btn" style="background-color: #FFFFCC;">Log Out</button>
                  <h2 id="response">Response will take time</h2>
                  <canvas id=canvas>   
                  </canvas>
                </div>
              </div>
	</body>
</html>
<script>
var CONTRACT_NAME='nearvember.testnet';

async function connect() {
    let near = await nearApi.connect({
    nodeUrl: "https://rpc.testnet.near.org",
    walletUrl: "https://wallet.testnet.near.org",
    helperUrl: "https://helper.testnet.near.org",
    explorerUrl: "https://explorer.testnet.near.org",
    networkId: 'testnet',
    keyStore: new window.nearApi.keyStores.BrowserLocalStorageKeyStore(window.localStorage, 'crystal')
    });

    window.walletConnection = new nearApi.WalletConnection(near);
    let account;
    if (window.walletConnection.isSignedIn()) {
        // Logged in account, can write as user signed up through wallet
        account = walletConnection.account();
        // connect to a NEAR smart contract
        window.contract = new nearApi.Contract(account, CONTRACT_NAME, {
          viewMethods: [],
          changeMethods: ['set_name']
        });
    } else {
        // Contract account, normally only gonna work in read only mode
        account = new nearApi.Account(near.connection, CONTRACT_NAME);
        //console.log(account);
    }
}

// Log in user using NEAR Wallet on "Sign In" button click
document.querySelector('.sign-in').addEventListener('click', () => {
  window.walletConnection.requestSignIn(CONTRACT_NAME, 'Nearvember');
});

// async function to call contract
async function callHello(){
    // call the contract
    let contract = await window.contract.set_name({
          args: { name: document.getElementById('text').value }
        })
    // //testing code
    // let contract = "test";

    // clear the form
    document.getElementById('text'),innerHTML="";
    // Output from contract
    document.getElementById('response').innerHTML=contract;
    return contract;
}

// switch between logged in/out
function updateUI() {
  // console.log("Update UI");
    if (!window.walletConnection.getAccountId()) {
    Array.from(document.querySelectorAll('.sign-in')).map(it => it.style = 'display: block;margin-left: 10%;margin-top: 10%;');
  }else {
    Array.from(document.querySelectorAll('.after-sign-in')).map(it => it.style = 'display: block;');
    var userName = window.walletConnection.getAccountId();
    userName = userName.slice(0,userName.lastIndexOf('.'));
    ifLoggedIn();
  }
}

nearApi.nearInitPromise = connect()
  .then(updateUI)
  .catch(console.error);
 
	// Things I want to do if logged in
	function ifLoggedIn(){
      var userName = window.walletConnection.getAccountId();
      userName = userName.slice(0,userName.lastIndexOf('.'));
      console.log("logged In!!")

      document.getElementById('send-greeting').addEventListener('click', () => {
      if (window.walletConnection.isSignedIn()) {
        callHello();
        start();
      }
    });

    //Logout
    document.querySelector('.sign-out').addEventListener('click', () => {
      if (window.walletConnection.isSignedIn()) {
        window.walletConnection.signOut();
        updateUI();
      }
    });

        
    
  // initialize 2D a (c)
	// initialize game state (s)
	// initialize keys states (u,r,d,l for directions, k for all the keyboard)
	var c = canvas.getContext`2d`, k = [u = r = d = l = s = 0];
	canvas.width = innerWidth;
	canvas.height = innerHeight/2;
// (initialize your global variables here)
c.w = innerWidth;
c.h = innerHeight;
// update u,l,d,r globals when an arrow key/wasd/zqsd is pressed or released

// DRAW LOOP
let reqAnimationId;
function smoothAnimation(e) {
    // animtion
	  canvas.width = innerWidth, canvas.height = innerHeight/2;
	  c.w=canvas.width, c.h = canvas.height;
    blue.x= c.w/2-(blue.w / 18 * 2)/2;
    blue.y = c.h*.05;
    animate();
    reqAnimationId = requestAnimationFrame(smoothAnimation)
}
// to start
function start() {
    reqAnimationId = requestAnimationFrame(smoothAnimation)
}

function animate(){
  tx(document.getElementById('response').innerHTML, c.w/2,c.h*.9,3, '#636e72');
  blue.update();
  blue.render();
}

function stop(){
  cancelAnimationFrame(reqAnimationId);
}

function tx(t, w, h, f, s) {
    c.textAlign = 'center';
    c.fillStyle = s;
    c.font = f + 'vw Consolas';
    c.fillText(t, w, h);
}

blue = makeSprite(c,1800,100,"blue.png",18,10,c.w/2,c.h*.1,2,0);

function makeSprite(c, w, h, img, f, t, x, y, r, s) {
let i = new Image();
let sp = sprite({
	context: c,
	width: w,
	height: h,
	image: i,
	numberOfFrames: f,
	ticksPerFrame: t,
	s: s
});
sp.x = x;
sp.y = y;
sp.scaleRatio = r;
i.src = img;
return sp;
}

function sprite(options) {

var that = {},
	frameIndex = 0,
	tickCount = 0,
	spot = 0,
	ticksPerFrame = options.ticksPerFrame || 0,
	numberOfFrames = options.numberOfFrames || 1;

that.context = options.context;
that.w = options.width;
that.h = options.height;
that.x = options.x;
that.y = options.y;
that.image = options.image;
that.scaleRatio = 1;
that.s = options.s;
that.seq = [];
that.dead = false;
that.outOfBounds= false;

that.newSeq = function (seq) {
	spot = 0;
	frameIndex = 0;
	that.seq = seq;
};

that.switch = function (x) {
	frameIndex = x;
};

that.update = function () {

	tickCount += 1;

	if (tickCount > ticksPerFrame) {

		tickCount = 0;

		// If the current frame index is in range
		if (frameIndex < numberOfFrames - 1) {
			// Go to the next frame
			frameIndex += 1;
			if (that.seq.length > 0) {
				frameIndex = that.seq[spot];
				spot += 1;
			}
		} else if (that.seq.length < 1) {
			frameIndex = 0;
		}
		if (spot > that.seq.length - 1) {
			spot = 0;
		}
	}
};
that.render = function () {
	// Draw the animation
	that.context.drawImage(
		that.image,
		frameIndex * that.w / numberOfFrames,
		0,
		that.w / numberOfFrames,
		that.h,
		that.x,
		that.y,
		that.w / numberOfFrames * that.scaleRatio,
		that.h * that.scaleRatio,
	);
};
that.getFrameWidth = function () {
	return that.w / numberOfFrames;
};
that.isClose = function (x, y, t) {
	var dx = (that.x + that.getFrameWidth() / 2 * that.scaleRatio) - (x + that.getFrameWidth() / 2),
		dy = (that.y + that.getFrameWidth() / 2 * that.scaleRatio) - (y + that.getFrameWidth() / 2);

	var dist = Math.sqrt(dx * dx + dy * dy);

	if (dist < that.getFrameWidth() * that.scaleRatio * t) {
		return true;
	} else {
		return false;
	}
};
that.move = function(){
	that.x+= that.s.x;
	that.y+= that.s.y;
	if(that.x>c.w || that.y>c.h || that.x<0 ||that.y<-100){
		that.outOfBounds = true;
	}
};
return that;
}

}

</script>

'''
'''--- _config.yml ---
theme: jekyll-theme-slate
'''
'''--- index.md ---
## Welcome to GitHub Pages

You can use the [editor on GitHub](https://github.com/frobenius7/frobenius7.github.io/edit/main/index.md) to maintain and preview the content for your website in Markdown files.

Whenever you commit to this repository, GitHub Pages will run [Jekyll](https://jekyllrb.com/) to rebuild the pages in your site, from the content in your Markdown files.

### Markdown

Markdown is a lightweight and easy-to-use syntax for styling your writing. It includes conventions for

```markdown
Syntax highlighted code block

# Header 1
## Header 2
### Header 3

- Bulleted
- List

1. Numbered
2. List

**Bold** and _Italic_ and `Code` text

[Link](url) and ![Image](src)
```

For more details see [Basic writing and formatting syntax](https://docs.github.com/en/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax).

### Jekyll Themes

Your Pages site will use the layout and styles from the Jekyll theme you have selected in your [repository settings](https://github.com/frobenius7/frobenius7.github.io/settings/pages). The name of this theme is saved in the Jekyll `_config.yml` configuration file.

### Support or Contact

Having trouble with Pages? Check out our [documentation](https://docs.github.com/categories/github-pages-basics/) or [contact support](https://support.github.com/contact) and we’ll help you sort it out.

'''
'''--- near4/App.js ---
import 'regenerator-runtime/runtime';
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import Big from 'big.js';
import Form from './components/Form';
import SignIn from './components/SignIn';
import Messages from './components/Messages';

const SUGGESTED_DONATION = '0';
const BOATLOAD_OF_GAS = Big(3).times(10 ** 13).toFixed();

const App = ({ contract, currentUser, nearConfig, wallet }) => {
  const [messages, setMessages] = useState([]);

  useEffect(() => {
    // TODO: don't just fetch once; subscribe!
    contract.getMessages().then(setMessages);
  }, []);

  const onSubmit = (e) => {
    e.preventDefault();

    const { fieldset, message, donation } = e.target.elements;

    fieldset.disabled = true;

    // TODO: optimistically update page with new message,
    // update blockchain data in background
    // add uuid to each message, so we know which one is already known
    contract.addMessage(
      { text: message.value },
      BOATLOAD_OF_GAS,
      Big(donation.value || '0').times(10 ** 24).toFixed()
    ).then(() => {
      contract.getMessages().then(messages => {
        setMessages(messages);
        message.value = '';
        donation.value = SUGGESTED_DONATION;
        fieldset.disabled = false;
        message.focus();
      });
    });
  };

  const signIn = () => {
    wallet.requestSignIn(
      nearConfig.contractName,
      'NEAR Guest Book'
    );
  };

  const signOut = () => {
    wallet.signOut();
    window.location.replace(window.location.origin + window.location.pathname);
  };

  return (
    <main>
      <header>
        <h1>Vetal's Guest Book</h1>
        { currentUser
          ? <button onClick={signOut}>Log out</button>
          : <button onClick={signIn}>Log in</button>
        }
      </header>
      { currentUser
        ? <Form onSubmit={onSubmit} currentUser={currentUser} />
        : <SignIn/>
      }
      { !!currentUser && !!messages.length && <Messages messages={messages}/> }
    </main>
  );
};

App.propTypes = {
  contract: PropTypes.shape({
    addMessage: PropTypes.func.isRequired,
    getMessages: PropTypes.func.isRequired
  }).isRequired,
  currentUser: PropTypes.shape({
    accountId: PropTypes.string.isRequired,
    balance: PropTypes.string.isRequired
  }),
  nearConfig: PropTypes.shape({
    contractName: PropTypes.string.isRequired
  }).isRequired,
  wallet: PropTypes.shape({
    requestSignIn: PropTypes.func.isRequired,
    signOut: PropTypes.func.isRequired
  }).isRequired
};

export default App;

'''
'''--- near4/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'guestbook.vetal.testnet';

function getConfig(env) {
  switch(env) {
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org'
      };
    // This is an example app so production is set to testnet.
    // You can move production to mainnet if that is applicable.
    case 'production':
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org'
      };
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org'
      };
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME
      };
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);
  }
}

module.exports = getConfig;

'''
'''--- near4/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <link rel="apple-touch-icon" href="./favicon.ico" />
    <link rel="stylesheet" href="global.scss">
    <title>Vetal's Guest Book</title>
    <meta property="og:title" content="Vetal's Guest Book">
    <meta property="og:description" content="A guest book with comments stored on the NEAR blockchain">
    <!-- <meta property="og:image" content=""> -->
    <!-- <meta property="og:url" content=""> -->
    <!-- <meta name="twitter:card" content="summary_large_image"> -->
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `yarn dev`.
      To create a production bundle, use `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- near4/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import getConfig from './config.js';
import * as nearAPI from 'near-api-js';

// Initializing contract
async function initContract() {
  // get network configuration values from config.js
  // based on the network ID we pass to getConfig()
  const nearConfig = getConfig(process.env.NODE_ENV || 'testnet');

  // create a keyStore for signing transactions using the user's key
  // which is located in the browser local storage after user logs in
  const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();

  // Initializing connection to the NEAR testnet
  const near = await nearAPI.connect({ keyStore, ...nearConfig });

  // Initialize wallet connection
  const walletConnection = new nearAPI.WalletConnection(near);

  // Load in user's account data
  let currentUser;
  if (walletConnection.getAccountId()) {
    currentUser = {
      // Gets the accountId as a string
      accountId: walletConnection.getAccountId(),
      // Gets the user's token balance
      balance: (await walletConnection.account().state()).amount,
    };
  }

  // Initializing our contract APIs by contract name and configuration
  const contract = await new nearAPI.Contract(
    // User's accountId as a string
    walletConnection.account(),
    // accountId of the contract we will be loading
    // NOTE: All contracts on NEAR are deployed to an account and
    // accounts can only have one contract deployed to them. 
    nearConfig.contractName,
    {
      // View methods are read-only – they don't modify the state, but usually return some value
      viewMethods: ['getMessages'],
      // Change methods can modify the state, but you don't receive the returned value when called
      changeMethods: ['addMessage'],
      // Sender is the account ID to initialize transactions.
      // getAccountId() will return empty string if user is still unauthorized
      sender: walletConnection.getAccountId(),
    }
  );

  return { contract, currentUser, nearConfig, walletConnection };
}

window.nearInitPromise = initContract().then(
  ({ contract, currentUser, nearConfig, walletConnection }) => {
    ReactDOM.render(
      <App
        contract={contract}
        currentUser={currentUser}
        nearConfig={nearConfig}
        wallet={walletConnection}
      />,
      document.getElementById('root')
    );
  }
);

'''
'''--- near4/tests/integration/App-integration.test.js ---
// these are made available by near-cli/test_environment
// note: do not remove the line below as it is needed for these tests
/* global nearlib, nearConfig */

import 'regenerator-runtime/runtime';

let near;
let contract;
let accountId;

beforeAll(async function() {
  near = await nearlib.connect(nearConfig);
  accountId = nearConfig.contractName;
  contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['getMessages'],
    changeMethods: ['addMessage'],
    sender: accountId
  });
});

it('send one message and retrieve it', async() => {
  await contract.addMessage({ text: 'aloha' });
  const msgs = await contract.getMessages();
  const expectedMessagesResult = [{
    premium: false,
    sender: accountId,
    text: 'aloha'
  }];
  expect(msgs).toEqual(expectedMessagesResult);
});

it('send two more messages and expect three total', async() => {
  await contract.addMessage({ text: 'foo' });
  await contract.addMessage({ text: 'bar' });
  const msgs = await contract.getMessages();
  expect(msgs.length).toEqual(3);
});

'''
'''--- near4/tests/ui/App-ui.test.js ---
import 'regenerator-runtime/runtime';
import React from 'react';
import TestRenderer from 'react-test-renderer';
import App from '../../App';
const { act } = TestRenderer;

// Declare stubs for contract, walletConnection, and nearConfig
const contract = {
  account: {
    connection: {},
    accountId: 'test.near'
  },
  contractId: 'test.near',
  getMessages: () => new Promise(() => {}),
  addMessage: () => ''
};
const walletConnection = {
  account: () => ({ _state: { amount: '1' + '0'.repeat(25) } }),
  requestSignIn: () => null,
  signOut: () => null,
  isSignedIn: () => false,
  getAccountId: () => 'test.near'
};
const nearConfig = {
  networkId: 'testnet',
  nodeUrl: 'https://rpc.nearprotocol.com',
  contractName: 'test.near',
  walletUrl: 'https://wallet.nearprotocol.com',
  helperUrl: 'https://near-contract-helper.onrender.com'
};

// For UI tests, use pattern from: https://reactjs.org/docs/test-renderer.html
let container;

beforeEach(() => {
  container = document.createElement('div');
  document.body.appendChild(container);
});

afterEach(() => {
  document.body.removeChild(container);
  container = null;
});

it('renders with proper title', () => {
  let testRenderer;

  act(() => {
    testRenderer = TestRenderer.create(
      <App contract={contract} wallet={walletConnection} nearConfig={nearConfig} />
    );
  });

  const testInstance = testRenderer.root;

  expect(testInstance.findByType('h1').children).toEqual(['NEAR Guest Book']);
});

'''
'''--- test.html ---
<!doctype html>
<html>
		<head><meta charset="utf-8" />
            <script src="https://cdn.jsdelivr.net/npm/near-api-js/dist/near-api-js.min.js"></script>
            </script>
            <style>
            </style>
      </head> 
		<body style="margin:0;overflow: hidden;">
            <div class="container">
                <div class="sign-in" style="display: none;">
                  <h1>hello =)</h1>
                  <h2>Sign in with NEAR wlllet to contiune</h2>
                  <button class="sign-in btn" style="background-color: #0072CE;">Sign In</button>
                </div>
            
                <div class="after-sign-in" style="display: none;">
                  <h1>Please enter your name</h1>
                  <textarea id="text" placeholder="Name"></textarea><br>
                  <button id="send-greeting">Send Greeting</button>
                  <button class="sign-out btn" style="background-color: #0072CE;">Sign Out</button>
                  <h2 id="response">Please wait for response</h2>
                  <canvas id=canvas>   
                  </canvas>
                </div>
              </div>
	</body>
</html>
<script>
var CONTRACT_NAME='nearvember.testnet';

async function connect() {
    let near = await nearApi.connect({
    nodeUrl: "https://rpc.testnet.near.org",
    walletUrl: "https://wallet.testnet.near.org",
    helperUrl: "https://helper.testnet.near.org",
    explorerUrl: "https://explorer.testnet.near.org",
    networkId: 'testnet',
    keyStore: new window.nearApi.keyStores.BrowserLocalStorageKeyStore(window.localStorage, 'crystal')
    });

    window.walletConnection = new nearApi.WalletConnection(near);
    let account;
    if (window.walletConnection.isSignedIn()) {
        // Logged in account, can write as user signed up through wallet
        account = walletConnection.account();
        // connect to a NEAR smart contract
        window.contract = new nearApi.Contract(account, CONTRACT_NAME, {
          viewMethods: [],
          changeMethods: ['set_name']
        });
    } else {
        // Contract account, normally only gonna work in read only mode
        account = new nearApi.Account(near.connection, CONTRACT_NAME);
        //console.log(account);
    }
}

// Log in user using NEAR Wallet on "Sign In" button click
document.querySelector('.sign-in').addEventListener('click', () => {
  window.walletConnection.requestSignIn(CONTRACT_NAME, 'Nearvember');
});

// async function to call contract
async function callHello(){
    // call the contract
    let contract = await window.contract.set_name({
          args: { name: document.getElementById('text').value }
        })
    // //testing code
    // let contract = "test";

    // clear the form
    document.getElementById('text'),innerHTML="";
    // Output from contract
    document.getElementById('response').innerHTML=contract;
    return contract;
}

// switch between logged in/out
function updateUI() {
  // console.log("Update UI");
    if (!window.walletConnection.getAccountId()) {
    Array.from(document.querySelectorAll('.sign-in')).map(it => it.style = 'display: block;margin-left: 10%;margin-top: 10%;');
  }else {
    Array.from(document.querySelectorAll('.after-sign-in')).map(it => it.style = 'display: block;');
    var userName = window.walletConnection.getAccountId();
    userName = userName.slice(0,userName.lastIndexOf('.'));
    ifLoggedIn();
  }
}

nearApi.nearInitPromise = connect()
  .then(updateUI)
  .catch(console.error);
 
	// Things I want to do if logged in
	function ifLoggedIn(){
      var userName = window.walletConnection.getAccountId();
      userName = userName.slice(0,userName.lastIndexOf('.'));
      console.log("logged In!!")

      document.getElementById('send-greeting').addEventListener('click', () => {
      if (window.walletConnection.isSignedIn()) {
        callHello();
        start();
      }
    });

    //Logout
    document.querySelector('.sign-out').addEventListener('click', () => {
      if (window.walletConnection.isSignedIn()) {
        window.walletConnection.signOut();
        updateUI();
      }
    });

        
    
  // initialize 2D a (c)
	// initialize game state (s)
	// initialize keys states (u,r,d,l for directions, k for all the keyboard)
	var c = canvas.getContext`2d`, k = [u = r = d = l = s = 0];
	canvas.width = innerWidth;
	canvas.height = innerHeight/2;
// (initialize your global variables here)
c.w = innerWidth;
c.h = innerHeight;
// update u,l,d,r globals when an arrow key/wasd/zqsd is pressed or released

// DRAW LOOP
let reqAnimationId;
function smoothAnimation(e) {
    // animtion
	  canvas.width = innerWidth, canvas.height = innerHeight/2;
	  c.w=canvas.width, c.h = canvas.height;
    blue.x= c.w/2-(blue.w / 18 * 2)/2;
    blue.y = c.h*.05;
    animate();
    reqAnimationId = requestAnimationFrame(smoothAnimation)
}
// to start
function start() {
    reqAnimationId = requestAnimationFrame(smoothAnimation)
}

function animate(){
  tx(document.getElementById('response').innerHTML, c.w/2,c.h*.9,3, '#636e72');
  blue.update();
  blue.render();
}

function stop(){
  cancelAnimationFrame(reqAnimationId);
}

function tx(t, w, h, f, s) {
    c.textAlign = 'center';
    c.fillStyle = s;
    c.font = f + 'vw Consolas';
    c.fillText(t, w, h);
}

blue = makeSprite(c,1800,100,"blue.png",18,10,c.w/2,c.h*.1,2,0);

function makeSprite(c, w, h, img, f, t, x, y, r, s) {
let i = new Image();
let sp = sprite({
	context: c,
	width: w,
	height: h,
	image: i,
	numberOfFrames: f,
	ticksPerFrame: t,
	s: s
});
sp.x = x;
sp.y = y;
sp.scaleRatio = r;
i.src = img;
return sp;
}

function sprite(options) {

var that = {},
	frameIndex = 0,
	tickCount = 0,
	spot = 0,
	ticksPerFrame = options.ticksPerFrame || 0,
	numberOfFrames = options.numberOfFrames || 1;

that.context = options.context;
that.w = options.width;
that.h = options.height;
that.x = options.x;
that.y = options.y;
that.image = options.image;
that.scaleRatio = 1;
that.s = options.s;
that.seq = [];
that.dead = false;
that.outOfBounds= false;

that.newSeq = function (seq) {
	spot = 0;
	frameIndex = 0;
	that.seq = seq;
};

that.switch = function (x) {
	frameIndex = x;
};

that.update = function () {

	tickCount += 1;

	if (tickCount > ticksPerFrame) {

		tickCount = 0;

		// If the current frame index is in range
		if (frameIndex < numberOfFrames - 1) {
			// Go to the next frame
			frameIndex += 1;
			if (that.seq.length > 0) {
				frameIndex = that.seq[spot];
				spot += 1;
			}
		} else if (that.seq.length < 1) {
			frameIndex = 0;
		}
		if (spot > that.seq.length - 1) {
			spot = 0;
		}
	}
};
that.render = function () {
	// Draw the animation
	that.context.drawImage(
		that.image,
		frameIndex * that.w / numberOfFrames,
		0,
		that.w / numberOfFrames,
		that.h,
		that.x,
		that.y,
		that.w / numberOfFrames * that.scaleRatio,
		that.h * that.scaleRatio,
	);
};
that.getFrameWidth = function () {
	return that.w / numberOfFrames;
};
that.isClose = function (x, y, t) {
	var dx = (that.x + that.getFrameWidth() / 2 * that.scaleRatio) - (x + that.getFrameWidth() / 2),
		dy = (that.y + that.getFrameWidth() / 2 * that.scaleRatio) - (y + that.getFrameWidth() / 2);

	var dist = Math.sqrt(dx * dx + dy * dy);

	if (dist < that.getFrameWidth() * that.scaleRatio * t) {
		return true;
	} else {
		return false;
	}
};
that.move = function(){
	that.x+= that.s.x;
	that.y+= that.s.y;
	if(that.x>c.w || that.y>c.h || that.x<0 ||that.y<-100){
		that.outOfBounds = true;
	}
};
return that;
}

}

</script>

'''