*GitHub Repository "Mykhail/NCD.recruitment"*

'''--- .idea/encodings.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="Encoding">
    <file url="PROJECT" charset="UTF-8" />
  </component>
</project>
'''
'''--- .idea/jsLibraryMappings.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="JavaScriptLibraryMappings">
    <file url="file://$PROJECT_DIR$" libraries="{NCD.nomination node_modules}" />
  </component>
</project>
'''
'''--- .idea/libraries/NCD_nomination_node_modules.xml ---
<component name="libraryTable">
  <library name="NCD.nomination node_modules" type="javaScript">
    <properties>
      <option name="frameworkName" value="node_modules" />
      <sourceFilesUrls>
        <item url="file://$PROJECT_DIR$/node_modules" />
      </sourceFilesUrls>
    </properties>
    <CLASSES>
      <root url="file://$PROJECT_DIR$/node_modules" />
    </CLASSES>
    <SOURCES />
  </library>
</component>
'''
'''--- .idea/misc.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectLevelVcsManager" settingsEditedManually="false">
    <OptionsSetting value="true" id="Add" />
    <OptionsSetting value="true" id="Remove" />
    <OptionsSetting value="true" id="Checkout" />
    <OptionsSetting value="true" id="Update" />
    <OptionsSetting value="true" id="Status" />
    <OptionsSetting value="true" id="Edit" />
    <ConfirmationsSetting value="0" id="Add" />
    <ConfirmationsSetting value="0" id="Remove" />
  </component>
</project>
'''
'''--- .idea/modules.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/.idea/NCD.nomination.iml" filepath="$PROJECT_DIR$/.idea/NCD.nomination.iml" />
    </modules>
  </component>
</project>
'''
'''--- .idea/vcs.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="$PROJECT_DIR$" vcs="Git" />
  </component>
</project>
'''
'''--- .idea/workspace.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="ce3e4d51-0a68-446d-8a4c-5ad112f2533c" name="Default" comment="">
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/scripts/1.dev-deploy.sh" afterPath="$PROJECT_DIR$/scripts/1.dev-deploy.sh" />
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/scripts/2.use-contract.sh" afterPath="$PROJECT_DIR$/scripts/2.use-contract.sh" />
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/singleton/assembly/index.ts" afterPath="$PROJECT_DIR$/src/singleton/assembly/index.ts" />
    </list>
    <ignored path="NCD.nomination.iws" />
    <ignored path=".idea/workspace.xml" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="TRACKING_ENABLED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ChangesViewManager" flattened_view="true" show_ignored="false" />
  <component name="CreatePatchCommitExecutor">
    <option name="PATCH_PATH" value="" />
  </component>
  <component name="ExecutionTargetManager" SELECTED_TARGET="default_target" />
  <component name="FavoritesManager">
    <favorites_list name="NCD.nomination" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file leaf-file-name="index.ts" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/simple/assembly/index.ts">
          <provider selected="true" editor-type-id="text-editor">
            <state vertical-scroll-proportion="0.0">
              <caret line="10" column="60" selection-start-line="10" selection-start-column="43" selection-end-line="10" selection-end-column="60" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="asconfig.json" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/simple/asconfig.json">
          <provider selected="true" editor-type-id="text-editor">
            <state vertical-scroll-proportion="-0.0">
              <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="index.ts" pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/singleton/assembly/index.ts">
          <provider selected="true" editor-type-id="text-editor">
            <state vertical-scroll-proportion="0.3716129">
              <caret line="31" column="38" selection-start-line="31" selection-start-column="38" selection-end-line="31" selection-end-column="38" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="3.cleanup.sh" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/scripts/3.cleanup.sh">
          <provider selected="true" editor-type-id="text-editor">
            <state vertical-scroll-proportion="-12.222222">
              <caret line="22" column="0" selection-start-line="22" selection-start-column="0" selection-end-line="22" selection-end-column="34" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="1.dev-deploy.sh" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/scripts/1.dev-deploy.sh">
          <provider selected="true" editor-type-id="text-editor">
            <state vertical-scroll-proportion="-7.5">
              <caret line="27" column="0" selection-start-line="27" selection-start-column="0" selection-end-line="27" selection-end-column="0" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="2.use-contract.sh" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/scripts/2.use-contract.sh">
          <provider selected="true" editor-type-id="text-editor">
            <state vertical-scroll-proportion="-25.0">
              <caret line="45" column="0" selection-start-line="45" selection-start-column="0" selection-end-line="45" selection-end-column="0" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="README.md" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/scripts/README.md">
          <provider editor-type-id="MarkdownFxPreviewEditor">
            <state />
          </provider>
          <provider selected="true" editor-type-id="split-provider[text-editor;MarkdownPreviewEditor]">
            <state split_layout="FIRST">
              <first_editor vertical-scroll-proportion="0.0">
                <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
                <folding />
              </first_editor>
              <second_editor />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="README.md" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/README.md">
          <provider editor-type-id="MarkdownFxPreviewEditor">
            <state />
          </provider>
          <provider selected="true" editor-type-id="split-provider[text-editor;MarkdownPreviewEditor]">
            <state split_layout="FIRST">
              <first_editor vertical-scroll-proportion="0.0">
                <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
                <folding />
              </first_editor>
              <second_editor />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/scripts/2.use-contract.sh" />
        <option value="$PROJECT_DIR$/scripts/1.dev-deploy.sh" />
        <option value="$PROJECT_DIR$/src/singleton/assembly/index.ts" />
      </list>
    </option>
  </component>
  <component name="JsBuildToolGruntFileManager" detection-done="true" />
  <component name="JsBuildToolPackageJson" detection-done="true">
    <package-json value="$PROJECT_DIR$/package.json" />
  </component>
  <component name="JsGulpfileManager">
    <detection-done>true</detection-done>
  </component>
  <component name="ProjectFrameBounds">
    <option name="width" value="1440" />
    <option name="height" value="900" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="false">
    <OptionsSetting value="true" id="Add" />
    <OptionsSetting value="true" id="Remove" />
    <OptionsSetting value="true" id="Checkout" />
    <OptionsSetting value="true" id="Update" />
    <OptionsSetting value="true" id="Status" />
    <OptionsSetting value="true" id="Edit" />
    <ConfirmationsSetting value="0" id="Add" />
    <ConfirmationsSetting value="0" id="Remove" />
  </component>
  <component name="ProjectView">
    <navigator currentView="ProjectPane" proportions="" version="1">
      <flattenPackages />
      <showMembers />
      <showModules />
      <showLibraryContents />
      <hideEmptyPackages />
      <abbreviatePackageNames />
      <autoscrollToSource />
      <autoscrollFromSource />
      <sortByType />
      <manualOrder />
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="Scope" />
      <pane id="Scratches" />
      <pane id="ProjectPane">
        <subPane>
          <PATH>
            <PATH_ELEMENT>
              <option name="myItemId" value="NCD.nomination" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
            </PATH_ELEMENT>
          </PATH>
          <PATH>
            <PATH_ELEMENT>
              <option name="myItemId" value="NCD.nomination" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="NCD.nomination" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
          </PATH>
          <PATH>
            <PATH_ELEMENT>
              <option name="myItemId" value="NCD.nomination" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="NCD.nomination" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="neardev" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
          </PATH>
          <PATH>
            <PATH_ELEMENT>
              <option name="myItemId" value="NCD.nomination" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="NCD.nomination" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="build" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
            <PATH_ELEMENT>
              <option name="myItemId" value="debug" />
              <option name="myItemType" value="com.intellij.ide.projectView.impl.nodes.PsiDirectoryNode" />
            </PATH_ELEMENT>
          </PATH>
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="last_opened_file_path" value="$PROJECT_DIR$/../near-slack-bot" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="FullScreen" value="true" />
    <property name="HbShouldOpenHtmlAsHb" value="" />
    <property name="settings.editor.selected.configurable" value="preferences.fileTypes" />
    <property name="settings.editor.splitter.proportion" value="0.2" />
    <property name="typescript-compiler-editor-notification" value="false" />
    <property name="js-jscs-nodeInterpreter" value="$USER_HOME$/.nvm/versions/node/v0.12.12/bin/node" />
  </component>
  <component name="RunManager">
    <configuration default="true" type="DartCommandLineRunConfigurationType" factoryName="Dart Command Line Application">
      <method />
    </configuration>
    <configuration default="true" type="DartTestRunConfigurationType" factoryName="Dart Test">
      <method />
    </configuration>
    <configuration default="true" type="JavaScriptTestRunnerKarma" factoryName="Karma" config-file="">
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="JavascriptDebugType" factoryName="JavaScript Debug">
      <method />
    </configuration>
    <configuration default="true" type="NodeJSConfigurationType" factoryName="Node.js" working-dir="">
      <method />
    </configuration>
    <configuration default="true" type="cucumber.js" factoryName="Cucumber.js">
      <option name="cucumberJsArguments" value="" />
      <option name="executablePath" />
      <option name="filePath" />
      <method />
    </configuration>
    <configuration default="true" type="js.build_tools.gulp" factoryName="Gulp.js">
      <method />
    </configuration>
    <configuration default="true" type="js.build_tools.npm" factoryName="npm">
      <command value="run-script" />
      <scripts />
      <envs />
      <method />
    </configuration>
    <configuration default="true" type="mocha-javascript-test-runner" factoryName="Mocha">
      <node-options />
      <working-directory>$PROJECT_DIR$</working-directory>
      <pass-parent-env>true</pass-parent-env>
      <envs />
      <ui>bdd</ui>
      <extra-mocha-options />
      <test-kind>DIRECTORY</test-kind>
      <test-directory />
      <recursive>false</recursive>
      <method />
    </configuration>
  </component>
  <component name="ShelveChangesManager" show_recycled="false" />
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="ce3e4d51-0a68-446d-8a4c-5ad112f2533c" name="Default" comment="" />
      <created>1652902268181</created>
      <option name="number" value="Default" />
      <updated>1652902268181</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="0" y="0" width="1440" height="900" extended-state="0" />
    <editor active="false" />
    <layout>
      <window_info id="Project" active="true" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.1465821" sideWeight="0.5" order="1" side_tool="false" content_ui="combo" />
      <window_info id="TODO" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="Event Log" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.3298153" sideWeight="0.5" order="7" side_tool="true" content_ui="tabs" />
      <window_info id="Find" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32771084" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="npm" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="true" content_ui="tabs" />
      <window_info id="Version Control" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="9" side_tool="false" content_ui="tabs" />
      <window_info id="Run" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Structure" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Terminal" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.16226913" sideWeight="0.5" order="10" side_tool="false" content_ui="tabs" />
      <window_info id="Favorites" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="4" side_tool="true" content_ui="tabs" />
      <window_info id="Debug" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Cvs" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Message" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Commander" active="false" anchor="right" auto_hide="false" internal_type="SLIDING" type="SLIDING" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Application Servers" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="8" side_tool="false" content_ui="tabs" />
      <window_info id="Inspection" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="Gulp" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="true" content_ui="tabs" />
      <window_info id="Hierarchy" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="2" side_tool="false" content_ui="combo" />
      <window_info id="Ant Build" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
    </layout>
  </component>
  <component name="Vcs.Log.UiProperties">
    <option name="RECENTLY_FILTERED_USER_GROUPS">
      <collection />
    </option>
    <option name="RECENTLY_FILTERED_BRANCH_GROUPS">
      <collection />
    </option>
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager />
    <watches-manager />
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/src/simple/assembly/index.ts">
      <provider selected="true" editor-type-id="text-editor">
        <state vertical-scroll-proportion="0.0">
          <caret line="14" column="1" selection-start-line="14" selection-start-column="1" selection-end-line="14" selection-end-column="1" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/simple/asconfig.json">
      <provider selected="true" editor-type-id="text-editor">
        <state vertical-scroll-proportion="0.0">
          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/singleton/assembly/index.ts">
      <provider selected="true" editor-type-id="text-editor">
        <state vertical-scroll-proportion="0.0">
          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/scripts/2.use-contract.sh">
      <provider selected="true" editor-type-id="text-editor">
        <state vertical-scroll-proportion="0.0">
          <caret line="45" column="0" selection-start-line="45" selection-start-column="0" selection-end-line="45" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/scripts/1.dev-deploy.sh">
      <provider selected="true" editor-type-id="text-editor">
        <state vertical-scroll-proportion="0.0">
          <caret line="25" column="0" selection-start-line="25" selection-start-column="0" selection-end-line="26" selection-end-column="44" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/scripts/README.md">
      <provider editor-type-id="MarkdownFxPreviewEditor">
        <state />
      </provider>
      <provider selected="true" editor-type-id="split-provider[text-editor;MarkdownPreviewEditor]">
        <state split_layout="FIRST">
          <first_editor vertical-scroll-proportion="0.0">
            <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
            <folding />
          </first_editor>
          <second_editor />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/README.md">
      <provider editor-type-id="MarkdownFxPreviewEditor">
        <state />
      </provider>
      <provider selected="true" editor-type-id="split-provider[text-editor;MarkdownPreviewEditor]">
        <state split_layout="FIRST">
          <first_editor vertical-scroll-proportion="0.0">
            <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
            <folding />
          </first_editor>
          <second_editor />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/scripts/README.md">
      <provider editor-type-id="MarkdownFxPreviewEditor">
        <state />
      </provider>
      <provider selected="true" editor-type-id="split-provider[text-editor;MarkdownPreviewEditor]">
        <state split_layout="FIRST">
          <first_editor vertical-scroll-proportion="0.0">
            <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
            <folding />
          </first_editor>
          <second_editor />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/README.md">
      <provider editor-type-id="MarkdownFxPreviewEditor">
        <state />
      </provider>
      <provider selected="true" editor-type-id="split-provider[text-editor;MarkdownPreviewEditor]">
        <state split_layout="FIRST">
          <first_editor vertical-scroll-proportion="0.0">
            <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
            <folding />
          </first_editor>
          <second_editor />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/scripts/3.cleanup.sh">
      <provider selected="true" editor-type-id="text-editor">
        <state vertical-scroll-proportion="-12.222222">
          <caret line="22" column="0" selection-start-line="22" selection-start-column="0" selection-end-line="22" selection-end-column="34" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/utils.ts">
      <provider selected="true" editor-type-id="text-editor">
        <state vertical-scroll-proportion="0.23225807">
          <caret line="12" column="13" selection-start-line="12" selection-start-column="13" selection-end-line="12" selection-end-column="13" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$APPLICATION_HOME_DIR$/plugins/JavaScriptLanguage/typescriptCompiler/external/lib.d.ts">
      <provider selected="true" editor-type-id="text-editor">
        <state vertical-scroll-proportion="0.38902742">
          <caret line="86" column="4" selection-start-line="86" selection-start-column="4" selection-end-line="86" selection-end-column="4" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/simple/assembly/index.ts">
      <provider selected="true" editor-type-id="text-editor">
        <state vertical-scroll-proportion="0.0">
          <caret line="10" column="60" selection-start-line="10" selection-start-column="43" selection-end-line="10" selection-end-column="60" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/simple/asconfig.json">
      <provider selected="true" editor-type-id="text-editor">
        <state vertical-scroll-proportion="0.0">
          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/scripts/2.use-contract.sh">
      <provider selected="true" editor-type-id="text-editor">
        <state vertical-scroll-proportion="-25.0">
          <caret line="45" column="0" selection-start-line="45" selection-start-column="0" selection-end-line="45" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/build/debug/singleton.wasm">
      <provider selected="true" editor-type-id="text-editor">
        <state vertical-scroll-proportion="0.0">
          <caret line="0" column="0" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/scripts/1.dev-deploy.sh">
      <provider selected="true" editor-type-id="text-editor">
        <state vertical-scroll-proportion="-7.5">
          <caret line="27" column="0" selection-start-line="27" selection-start-column="0" selection-end-line="27" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/singleton/assembly/index.ts">
      <provider selected="true" editor-type-id="text-editor">
        <state vertical-scroll-proportion="0.3716129">
          <caret line="31" column="38" selection-start-line="31" selection-start-column="38" selection-end-line="31" selection-end-column="38" />
          <folding />
        </state>
      </provider>
    </entry>
  </component>
</project>
'''
'''--- README.md ---
# Enthusiastic recruitment
_"Good candidates are always near"_

A smart contract developed to provide functionality for a trustworthy recruitment process with the help of Near protocol smart contracts. 

## Demo
[Youtube link](https://youtu.be/dfXP7HObpSs)

## Problem

The hiring of IT talents is one of the most challenging domains for recruiters. Quite often recruitment agencies face issues connected with the dishonest behavior of companies hiring managers, at the same time companies devote huge budgets to the external recruiters not getting the expected results.

## Solution
Create a decentralized application based on the Near Protocol to establish a reliable interface for the hiring managers' and recruitment agencies' interactions.

### Users journey

1. IT company "Bug makers" wants to hire a strong Senior dev for their needs.
2. Hiring manager Jason posts vacancy, provides position requirements, and deposits a reward for the recruitment agency (e.g. 50 Near)
3. "Hiring Angels" agency assign a recruiter Linda to work on "Bug makers"'s vacancies pool
4. Linda checks the list of the open vacancies and start looking for available candidates on the market
5. As soon as a candidate is found by Linda, she applies them for a vacancy
6. Jason see a new depersonalized candidate on the candidates list. There is all needed info except name and contact data.
7. Jason checks if the candidate profile suits the requirements and if so clicks "hire"
8. Contact information of the candidate is automatically sent to Jason and appears on the Hired Candidates list
9. Reward for the candidates is sent to Linda's Near account
10. Linda and Jason are happy (at least I hope so)

- [Installation](#installation)
- [UX Wireframes](#ux-wireframes)
- [Contract](#contract)
- [Deploying](#deploying)
- [Future Development](#future-development)

---

## Installation

1. clone this repo
2. run `yarn install` (or `npm install`)
3. run `./scripts/recruitement-deploy.sh` 

## UX Wireframes

All UX wireframes can be found in the `wireframes/` folder. 
Wireframes of the core pages are presented below.
 
**Post a Vacancy**

_Hiring manager Jason posts vacancy, provids position requirements and deposit a reward for the recruitment agency (e.g. 50 Near)_

![post-vacancy](wireframes/1.PostVacancy[hiring_manager_view].png)

**Get list of posted vacncies**

_Linda checks the list of the open vacancies and start looking for available candidates_

![get-vacancies-list](wireframes/3.OpenVacancies[recruiter_view].png)

**Apply candidate**

_As soon as a candidate found Linda applies them to a vacancy_

![apply-candidate](wireframes/4.ApplyCandidate[recruiter_view].png)

**Hire candidate**

_Jason see a new depersonalized candidate in the candidates list_
_If the candidate suits requirements and he clicks "hire"_
_Contact information of the candidate is sent to Jason and appear in the Hired Candidates list_
_Reward for the candidates is sent to Linda Near account_

![hire-candidate](wireframes/6.HireCandidatePopup[hiring_manager_view].png)

## Contract

Contract is represented by two primary entities: Vacancy and Candidate. 
Instance of Vacancy is created by a hiring managers and keep details about this entity:
- Position requirements
- Reward that company is ready to pay to a recruitement agency

Instance of Candidate is created by a recruiter and keep the following details:
- Candidate experience
- Timezone
- English level
- Salary expectations

'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- asconfig.json ---
{
  "workspaces": [
    "src/recruitment"
  ]
}

'''
'''--- package.json ---
{
  "name": "starter--near-sdk-as",
  "version": "0.0.1",
  "description": "Start with a basic project",
  "scripts": {
    "dev": "watch -d -n 1 'clear && yarn test'",
    "test": "yarn asp -f unit.spec",
    "clean": "rm -rf ./build && rm -rf ./neardev",
    "build": "asb --target debug",
    "build:release": "asb",
    "asp": "asp --verbose --nologo"
  },
  "keywords": [],
  "author": "hello@near.org",
  "license": "ISC",
  "devDependencies": {
    "near-sdk-as": "^3.1.0"
  }
}

'''
'''--- scripts/1.recruitement-deploy.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 0: Check for environment variable with contract name"
echo ---------------------------------------------------------
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"

echo
echo ---------------------------------------------------------
echo "Step 1: Build the contract (may take a few seconds)"
echo ---------------------------------------------------------
echo

yarn build

echo
echo ---------------------------------------------------------
echo "Step 2: Deploy the contract"
echo ---------------------------------------------------------
echo

near dev-deploy $CONTRACT ./build/debug/recruitment.wasm

echo
echo
echo ---------------------------------------------------------
echo "Step 3: Prepare your environment for the next steps"
echo
echo run the following commands
echo 'export CONTRACT=<dev-123-456>'
echo 'export COMPANYID=<your own account>'
echo
echo ---------------------------------------------------------
echo
echo

exit 0

'''
'''--- scripts/2.post-vacancy.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 0: Check for environment variable with contract name"
echo ---------------------------------------------------------
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"

[ -z "$COMPANYID" ] && echo "Missing \$COMPANYID environment variable, please use export COMPANYID=<YOUR_NEAR_ACCOUNT>" && exit 1
[ -z "$COMPANYID" ] || echo "Found it! \$COMPANYID is set to [ $COMPANYID ]"

POOL=$1
TITLE=$2
EXPERIENCE=$3
ENGLISH=$4
TIMEZONE=$5
DEPOSIT=$6

echo
echo
echo ---------------------------------------------------------
echo "Step 1: Call 'postVacancy' functions on the contract"
echo ---------------------------------------------------------
echo

near call $CONTRACT postVacancy '{"pool": "'${POOL:="developers"}'", "title": "'${TITLE:="BE Senior"}'", "experience":"'${EXPERIENCE:="5+"}'", "english": "'${ENGLISH:="Advanced"}'", "timezone": "'${TIMEZONE:="EST"}'", "company_id": "'${COMPANYID}'" }' --accountId=${COMPANYID} --amount ${DEPOSIT:="1"}

echo
echo
echo ------------------------------------------------------------------------------------------------------
echo ">>>>>>>>>>>>Vacancy for '${TITLE:="BE Senior"}' has been posted by '${COMPANYID}'"
echo ------------------------------------------------------------------------------------------------------

exit 0

'''
'''--- scripts/3.get-all-vacancies.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 0: Check for environment variable with contract name"
echo ---------------------------------------------------------
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"

POOL=$1

echo
echo
echo ---------------------------------------------------------
echo "Step 1: Call 'getAllVacancies' functions on the contract"
echo ---------------------------------------------------------
echo

near view $CONTRACT getAllVacancies '{"poolName": "'${POOL:="developers"}'"}'

echo
echo

exit 0

'''
'''--- scripts/4.post-candidate.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 0: Check for environment variable with contract name"
echo ---------------------------------------------------------
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"

[ -z "$COMPANYID" ] && echo "Missing \$COMPANYID environment variable, please use export COMPANYID=<YOUR_NEAR_ACCOUNT>" && exit 1
[ -z "$COMPANYID" ] || echo "Found it! \$COMPANYID is set to [ $COMPANYID ]"

[ -z "$1" ] && echo "Missing parametr \$VACANCY_ID" && exit 1
[ -z "$1" ] || echo "Found it! \$VACANCY_ID is set to [ $VACANCY_ID ]"

VACANCY_ID=$1
EXPERIENCE=$2
ENGLISH=$3
TIMEZONE=$4
SALARY=$5
CANDIDATE_NAME=$6
CANDIDATE_EMAIL=$7
CANDIDATE_TELEGRAM=$8

echo
echo
echo ---------------------------------------------------------
echo "Step 1: Call 'postCandidate' functions on the contract"
echo ---------------------------------------------------------
echo

near call $CONTRACT postCandidate '{"vacancy_id": "'$VACANCY_ID'", "company_id": "'$COMPANYID'", "experience": "'${EXPERIENCE:="5+"}'", "english_level":"'${ENGLISH:="Advanced"}'", "timezone": "'${TIMEZONE:="EST"}'", "salary_expectations": "'${SALARY:="5000USD"}'", "full_name": "'${CANDIDATE_NAME:="John Galt"}'", "email": "'${CANDIDATE_EMAIL:="j.galt@gmail.com"}'", "telegram": "'${CANDIDATE_TELEGRAM:="@whoisjohn"}'"}' --accountId="'${COMPANYID}'"

echo
echo
echo ------------------------------------------------------------------------------------------------------
echo ">>>>>>>>>>>>Candidate for '$VACANCY_ID' has been added!"
echo ------------------------------------------------------------------------------------------------------

exit 0

'''
'''--- scripts/5.get-all-candidates.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 0: Check for environment variable with contract name"
echo ---------------------------------------------------------
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"

[ -z "$COMPANYID" ] && echo "Missing \$COMPANYID environment variable, please use export COMPANYID=<YOUR_NEAR_ACCOUNT>" && exit 1
[ -z "$COMPANYID" ] || echo "Found it! \$COMPANYID is set to [ $COMPANYID ]"

[ -z "$1" ] && echo "Missing parametr \$VACANCY_ID" && exit 1
[ -z "$1" ] || echo "Found it! \$VACANCY_ID is set to [ $VACANCY_ID ]"

VACANCY_ID=$1

echo
echo
echo ---------------------------------------------------------
echo "Step 1: Call 'getCandidates' functions on the contract"
echo ---------------------------------------------------------
echo

near view $CONTRACT getCandidates '{"vacancyId": "'$VACANCY_ID'"}' --accountId="'$COMPANYID'"

echo
echo

exit 0

'''
'''--- scripts/6.hire-candidate.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 0: Check for environment variable with contract name"
echo ---------------------------------------------------------
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"

[ -z "$COMPANYID" ] && echo "Missing \$COMPANYID environment variable, please use export COMPANYID=<YOUR_NEAR_ACCOUNT>" && exit 1
[ -z "$COMPANYID" ] || echo "Found it! \$COMPANYID is set to [ $COMPANYID ]"

[ -z "$1" ] && echo "Missing parametr \$VACANCY_ID" && exit 1
[ -z "$1" ] || echo "Found it! \$VACANCY_ID is set to [ $VACANCY_ID ]"

[ -z "$1" ] && echo "Missing parametr \$CANDIDATE_ID" && exit 1
[ -z "$1" ] || echo "Found it! \$CANDIDATE_ID is set to [ $CANDIDATE_ID ]"

CANDIDATE_ID=$1
VACANCY_ID=$2
POOL=$3

echo
echo
echo ---------------------------------------------------------
echo "Step 1: Call 'hireCandidate' functions on the contract"
echo ---------------------------------------------------------
echo

near call $CONTRACT hireCandidate '{"poolName": "'${POOL:="developers"}'", "candidateId": "'$CANDIDATE_ID'", "vacancyId":"'$VACANCY_ID'"}' --accountId="'${COMPANYID}'" --gas 75000000000000

echo
echo

exit 0

'''
'''--- scripts/7.get-all-hired-candidates.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 0: Check for environment variable with contract name"
echo ---------------------------------------------------------
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"

[ -z "$1" ] && echo "Missing parametr \$VACANCY_ID" && exit 1
[ -z "$1" ] || echo "Found it! \$VACANCY_ID is set to [ $VACANCY_ID ]"

[ -z "$COMPANYID" ] && echo "Missing \$COMPANYID environment variable, please use export COMPANYID=<YOUR_NEAR_ACCOUNT>" && exit 1
[ -z "$COMPANYID" ] || echo "Found it! \$COMPANYID is set to [ $COMPANYID ]"

VACANCY_ID=$1

echo
echo
echo ---------------------------------------------------------
echo "Step 1: Call 'getHiredCandidates' functions on the contract"
echo ---------------------------------------------------------
echo

near view $CONTRACT getHiredCandidates '{"vacancyId": "'$VACANCY_ID'"}'

echo
echo

exit 0

'''
'''--- scripts/8.cleanup.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 0: Check for required environment variables"
echo ---------------------------------------------------------
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$BENEFICIARY" ] && echo "Missing \$BENEFICIARY environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"
[ -z "$BENEFICIARY" ] || echo "Found it! \$BENEFICIARY is set to [ $BENEFICIARY ]"

echo
echo
echo ---------------------------------------------------------
echo "Step 1: Delete $CONTRACT, setting $BENEFICIARY as beneficiary"
echo ---------------------------------------------------------
echo
near delete $CONTRACT $BENEFICIARY

echo
echo ---------------------------------------------------------
echo "Step 2: Clean up project folders"
echo ---------------------------------------------------------
echo
yarn clean

exit 0

'''
'''--- scripts/9.reload.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 1: Build the contract (may take a few seconds)"
echo ---------------------------------------------------------
echo

yarn build

echo
echo
echo ---------------------------------------------------------
echo "Step 2: Deploy the contract"
echo
echo "(edit scripts/1.dev-deploy.sh to deploy other contract)"
echo ---------------------------------------------------------
echo

# uncomment out the line below to deploy the other example contract
# near dev-deploy ./build/debug/simple.wasm

# comment the line below to deploy the other example contract
# near dev-deploy ./build/debug/singleton.wasm

near delete $CONTRACT $BENEFICIARY
near create-account $CONTRACT --masterAccount $BENEFICIARY
near deploy $CONTRACT ./build/debug/recruitment.wasm

echo
echo
echo ---------------------------------------------------------
echo "Step 3: Prepare your environment for next steps"
echo
echo "(a) find the contract (account) name in the message above"
echo "    it will look like this: [ Account id: dev-###-### ]"
echo
echo "(b) set an environment variable using this account name"
echo "    see example below (this may not work on Windows)"
echo
echo ---------------------------------------------------------
echo 'export CONTRACT=<dev-123-456>'
# uncomment this line for a useful hint when using the singleton style
# echo "near call \$CONTRACT init --accountId \$CONTRACT"
echo ---------------------------------------------------------
echo

exit 0

'''
'''--- scripts/README.md ---
## Setting up your terminal

The scripts in this folder are designed to help you demonstrate the behavior of the contract(s) in this project.

It uses the following setup:

```sh
# set your terminal up to have 2 windows, A and B like this:
┌─────────────────────────────────┬─────────────────────────────────┐
│                                 │                                 │
│                                 │                                 │
│                A                │                B                │
│                                 │                                 │
│                                 │                                 │
└─────────────────────────────────┴─────────────────────────────────┘
```

### Terminal **A**

*This window is used to compile, deploy and control the contract*
- Environment
  ```sh
  export CONTRACT=        # depends on deployment
  export OWNER=           # any account you control

  # for example
  # export CONTRACT=dev-1615190770786-2702449
  # export OWNER=sherif.testnet
  ```

- Commands

  _helper scripts_
  ```sh
  1.dev-deploy.sh                # helper: build and deploy contracts
  2.use-contract.sh              # helper: call methods on ContractPromise
  3.cleanup.sh                   # helper: delete build and deploy artifacts
  ```

### Terminal **B**

*This window is used to render the contract account storage*
- Environment
  ```sh
  export CONTRACT=               # depends on deployment

  # for example
  # export CONTRACT=dev-1615190770786-2702449
  ```

- Commands
  ```sh
  # monitor contract storage using near-account-utils
  # https://github.com/near-examples/near-account-utils
  watch -d -n 1 yarn storage $CONTRACT
  ```
---

## OS Support

### Linux

- The `watch` command is supported natively on Linux
- To learn more about any of these shell commands take a look at [explainshell.com](https://explainshell.com)

### MacOS

- Consider `brew info visionmedia-watch` (or `brew install watch`)

### Windows

- Consider this article: [What is the Windows analog of the Linux watch command?](https://superuser.com/questions/191063/what-is-the-windows-analog-of-the-linuo-watch-command#191068)

'''
'''--- src/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- src/recruitment/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- src/recruitment/__tests__/index.unit.spec.ts ---
import { Contract } from "../assembly";

let contract: Contract

beforeEach(() => {
  contract = new Contract()
})

describe("Contract", () => {
  // VIEW method tests

  it("says hello", () => {
    expect(contract.helloWorld()).toStrictEqual("hello world")
  })

  it("reads data", () => {
    expect(contract.read("some key")).toStrictEqual("🚫 Key [ some key ] not found in storage. ( storage [ 0 bytes ] )")
  })

  // CHANGE method tests

  it("saves data to contract storage", () => {
    expect(contract.write("some-key", "some value")).toStrictEqual("✅ Data saved. ( storage [ 18 bytes ] )")
  })
})

'''
'''--- src/recruitment/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- src/recruitment/assembly/index.ts ---
import {
    u128,
    Context,
    storage,
    PersistentVector,
    logging,
    ContractPromiseBatch
} from 'near-sdk-as';

import {AccountId, XCC_GAS, VACANCY_PREFIX, CANDIDATES_PREFIX, HIRED_CANDIDATES_PREFIX, generateId} from '../../utils';

/**************************************************************************
 *************************** Vacancy classes ******************************
 /************************************************************************/

 /**
 * @class VacanciesPool
 * @property poolName  - pool ID of the vacancies pool
 * @property vacancies  - list of vacancies for the specific pool
 *
 * Vacancy pool keep all vacancies of the company
 */
@nearBindgen
class VacanciesPool {
    constructor(
        public poolName: string,
        public vacancies: PersistentVector<Vacancy>
    ){}

    getVacancies():Vacancy[] {
        const res: Vacancy[] = [];
        for (let i = 0; i < this.vacancies.length; i++) {
            res.push(this.vacancies[i]);
        }
        return res;
    }
}

 /**
 * @class Vacancy
 * @property reward      - reward that company pays to recruiter who "close" this vacation
 * @property details     - position requirements
 * @property vacancy_id  - Vacancy ID
 *
 * Class that represents a single vacancy 
 */
@nearBindgen
class Vacancy {
    constructor(
        public reward: u128,
        public details: VacancyDetails,
        public vacancy_id: string
    ) {}
}

 /**
 * @class VacancyDetails
 * @property position_title   - title of the vacancy e.g "BE Senior"
 * @property requirements     - position requirements 
 * @property company_id       - Company ID is a near account ID
 *
 * Class that kepp vacancy details
 */
@nearBindgen
class VacancyDetails {
    constructor(
        public position_title: string,
        public requirements: VacancyRequirements,
        public company_id: AccountId
    ) {}
}

 /**
 * @class VacancyRequirements
 * @property experience        - needed experience 
 * @property english_level     - desired english level 
 * @property timezone          - desired timezone
 *
 * Class that kepp more detailed vacancy requirements
 */
@nearBindgen
class VacancyRequirements {
    constructor(
        public experience: string,
        public english_level: string,
        public timezone: string
    ) {}
}

/**************************************************************************
 *************************** Candidate classes ****************************
 /************************************************************************/
@nearBindgen
class CandidatesPool {
    constructor(
        public vacancyId: string,
        public candidates: PersistentVector<Candidate>
    ){}

    getCandidates():Candidate[] {
        const res: Candidate[] = [];
        if (this.candidates) {
            for (let i = 0; i < this.candidates.length; i++) {
                res.push(this.candidates[i]);
            }
        }
        return res;
    }

    getDepersonalizedCandidates():DepersonalizedCandidate[] {
        const res: DepersonalizedCandidate[] = [];
        if (this.candidates) {
            for (let i = 0; i < this.candidates.length; i++) {
                let depersonalizedCandidate: DepersonalizedCandidate = new DepersonalizedCandidate(
                    this.candidates[i].candidate_id,
                    this.candidates[i].experience,
                    this.candidates[i].english_level,
                    this.candidates[i].timezone,
                    this.candidates[i].salary_expectations)

                res.push(depersonalizedCandidate);
            }
        }
        return res;
    }

    removeCandidate(candidateId: string): void {
        
        let index!: i32;
        for (let i = 0; i < this.candidates.length; i++) {
            if(this.candidates[i].candidate_id == candidateId) {
                index = i;
            }
        }

        if (index > -1) {
            this.candidates.swap_remove(index);
        }

    }
}

@nearBindgen
class Candidate {
    constructor(
        public candidate_id: string,
        public company_id: string,
        public experience: string,
        public english_level: string,
        public timezone: string,
        public salary_expectations: string,
        public telegram: string,
        public full_name: string,
        public email: string
    ) {}
}

@nearBindgen
class DepersonalizedCandidate {
    constructor(
        public candidate_id: string,
        public experience: string,
        public english_level: string,
        public timezone: string,
        public salary_expectations: string,
    ) {}
}

/**
 * Recruitment contract API
 * ========================
 */

/**
 * @function postVacancy
 * @param pool         - vacancy pool, e.g. "Developers", "QA" etc
 * @param title        - vacancy title, e.g. "BE developer Senior"
 * @param experience   - required experience
 * @param english      - english level
 * @param timezone     - desired timezone
 * @param company_id   - Near account is used as a company identifier
 * 
 *  Post Vacancy to the defined Vacancies pool
 *  
 *  Hiring manager creates a new vacancy within defined vacancies's pool and define reward for the recruitement agency.
 *  If vacancies pool doesn't exist, it will be created automatically.
 *  e.g post vacancy for hiring "BE developer Senior" to the vacancy pool "Developers"
 *  near call {{CONTRACT_NAME}} postVacancy '{"pool": "Developers", "title": "BE developer Senior", "experience":"5+", "english": "fluent", "timezone": "EST", "company_id": "somix11.testnet" }' --accountId="somix11.testnet" --amount 3
 */

export function postVacancy(
    pool: string, 
    title: string, 
    experience: string, 
    english: string, 
    timezone: string, 
    company_id: string ): void {

    const poolName = pool;
    const vacancyDetails = new VacancyDetails(title, new VacancyRequirements(experience, english, timezone), company_id);
    const vacancyId = VACANCY_PREFIX + generateId();
    const amount = Context.attachedDeposit;
    const ONE_NEAR = u128.from('1000000000000000000000000');

    assert(
        u128.ge(Context.attachedDeposit, ONE_NEAR),
        'Minimum 1 NEAR must be attached to post a vacancy'
      );

    const vacancy = new Vacancy(amount, vacancyDetails, vacancyId);

    if(!storage.hasKey(poolName)){
        createVacanciesPool(poolName, vacancy)
    }

    const vacanciesPool = getVacanciesPool(poolName);
    vacanciesPool.vacancies.push(vacancy);
}

/**
 * @function getAllVacancies
 * @param poolName         - poolName, e.g. "Developers", "QA" etc
 * 
 *  Returns a list of open vacancies for the specified pool
 *  Functional specification:
 *  Recruitement company get the list of the open vacancies and start looking candidates for the company
 *  near view {{CONTRACT}} getAllVacancies '{"poolName": "BE developers"}' --accountId={{accountId}}
 */
export function getAllVacancies(poolName: string): Vacancy[] {
    const vacanciesPool = getVacanciesPool(poolName);
    const vacancies:Vacancy[] = vacanciesPool.getVacancies();
    
    if(!vacancies.length) {
        assert('No vacancies for ${poolName} found!');
    }

    return vacancies
}

/**
 * @function postCandidate
 * @param vacancy_id            - vacancy pool, e.g. "Developers", "QA" etc
 * @param experience            - candidate's info - experience
 * @param english_level         - candidate's info - english level
 * @param timezone              - candidate's info - english level
 * @param salary_expectations   - candidate's info - salary_expectations
 * @param full_name             - candidate's info - full name
 * @param email                 - candidate's info - email
 * @param telegram              - candidate's info - telegram
 * 
 *  Recruiter adds candidate's data to the contract
 *  Functional specification:
 *  Recruiter provides candidate's profile to the company. 
 *  Hiring manager will be able to check candidate info, but not contact information.
 *  near call {{CONTRACT}} postCandidate '{"vacancy_id": "{{COPY FROM A VACANCY OBJECT}}", "experience": "4 years with BE, 1 year TL", "english_level":"Upper-Intermediate", "timezone": "EST", "salary_expectations": "5000USD", "full_name": "John Galt", "email": "whoisjgalt@gmail.com", "telegram": "@JohnGalt" }' --accountId={{ACCOUNT_ID}}
 */
export function postCandidate(
    vacancy_id: string, 
    company_id:string,
    experience: string,
    english_level: string,
    timezone: string,
    salary_expectations: string,
    full_name: string,
    email: string,
    telegram: string): void {

    const vacancyId = vacancy_id;
    const candidateId = CANDIDATES_PREFIX + generateId();
    const candidate = new Candidate(candidateId, company_id, experience, english_level, timezone, salary_expectations, telegram, full_name, email);
    
    if(!storage.hasKey(CANDIDATES_PREFIX + vacancyId)){
        createCandidatesPool(vacancyId, CANDIDATES_PREFIX) ;
    }

    const candidatesPool = getCandidatesPool(vacancyId, CANDIDATES_PREFIX);
    candidatesPool.candidates.push(candidate);
}

/**
 * @function getCandidates
 * @param vacancyId         - vacancy ID
 * @param poolName          - poolName, e.g. "Developers", "QA" etc
 * 
 *  Returns a list of candidates for the specific vacancy
 *  Functional specification:
 *  Hiring manager get the list of candodates for the specific vacancy to check if a profile suite needs of the company or not
 *  near view cert.somix11.testnet getDepersonalizedCandidates '{"vacancyId": "{{COPY FROM A VACANCY OBJECT}}", "poolName": "candidates_"}' --accountId="{{ACCOUNT_ID}}"
 */
export function getCandidates(vacancyId: string): DepersonalizedCandidate[] {
    const candidatesPool = getCandidatesPool(vacancyId, CANDIDATES_PREFIX);
    return candidatesPool.getDepersonalizedCandidates();
}

/**
 * @function hireCandidate
 * @param poolName          - poolName, e.g. "Developers", "QA" etc
 * @param candidateId       - candidate ID
 * @param vacancyId         - vacancy ID
 * 
 *  Initiate candidate's hiring
 *  Functional specification:
 *  Hiring manager confirms that the candidates meets position requirements and initiate hiring process
 *  Rewards automatically transfered to the recruiting agency 
 *  Contact data appears in the pool "Hired candidates"
 *  near call {{CONTRACT}} hireCandidate '{"poolName": "BE developers", "candidateId": "candidate-90622853", "vacancyId":"vacancy-90622188"}' --accountId="{{ACCOUNT_ID}}"
 */
export function hireCandidate(poolName: string, candidateId: string, vacancyId: string): void {

    const vacancy = getVacancyInfo(vacancyId, poolName);
    let hiredCandidate: Candidate = getCandidateInfo(vacancyId, candidateId, CANDIDATES_PREFIX);
    const companyId = hiredCandidate ? hiredCandidate.company_id : "";

    if(!storage.hasKey(HIRED_CANDIDATES_PREFIX + vacancyId)){
        createCandidatesPool(vacancyId, HIRED_CANDIDATES_PREFIX);
    }

    const hiredCandidatesPool = getCandidatesPool(vacancyId, HIRED_CANDIDATES_PREFIX);
    hiredCandidatesPool.candidates.push(hiredCandidate);

    const candidatesPool = getCandidatesPool(vacancyId, CANDIDATES_PREFIX);
    candidatesPool.removeCandidate(candidateId);

    if(vacancy && companyId) {
        const to_recruiter = ContractPromiseBatch.create(companyId);
        const self = Context.contractName
        to_recruiter.transfer(vacancy.reward);
        logging.log(hiredCandidate)
        
        to_recruiter.then(self).function_call("on_hiring_complete", "{}", u128.Zero, XCC_GAS);
    }
}

/**
 * @function getHiredCandidates
 * @param vacancyId         - vacancy ID
 * 
 *  Returns list of hired candidates
 *  Functional specification:
 *  Hiring manager checks list of all hired candidates for the specific vacancy
 *  near call {{CONTRACT}} hireCandidate '{"poolName": "BE developers", "candidateId": "candidate-90622853", "vacancyId":"vacancy-90622188"}' --accountId="{{ACCOUNT_ID}}"
 */
export function getHiredCandidates(vacancyId: string): Candidate[] {
    const candidatesPool = getCandidatesPool(vacancyId, HIRED_CANDIDATES_PREFIX);
    return candidatesPool.getCandidates();
}

/**************************************************************************
 ******************* Private contract methods -> Vacancy ****************
 /************************************************************************/

function createVacanciesPool(poolName: string, vacancy: Vacancy): void {
    const vacancies = new PersistentVector<Vacancy>(poolName);
    const vacanciesPool = new VacanciesPool(poolName, vacancies);
    saveVacanciesPool(poolName, vacanciesPool);
}

function saveVacanciesPool(poolName: string, vacanciesPool: VacanciesPool): void {
    storage.set(poolName, vacanciesPool);
}

function getVacanciesPool(poolName: string): VacanciesPool {
    return storage.getSome<VacanciesPool>(poolName);
}

function getVacancyInfo(vacancyId: string, poolName: string): Vacancy | null{ 
    const allVacancies = getAllVacancies(poolName);
    let vacancyInfo!: Vacancy;

    for (var i = 0; i < allVacancies.length; i++) {
        if(allVacancies[i].vacancy_id == vacancyId) {
            vacancyInfo = allVacancies[i];
        }
    }
    return vacancyInfo
}

/**************************************************************************
 ******************* Private contract methods -> Candidate ****************
 /************************************************************************/

function createCandidatesPool(vacancyId: string, poolName:string): void {
    const candidates = new PersistentVector<Candidate>(poolName + vacancyId);
    const candidatesPool = new CandidatesPool(vacancyId, candidates);
    saveCandidatesPool(vacancyId, candidatesPool, poolName);
}

function saveCandidatesPool(vacancyId: string, candidatesPool: CandidatesPool, poolName:string): void {
    storage.set(poolName + vacancyId, candidatesPool);
}

function getCandidatesPool(vacancyId: string, poolName: string): CandidatesPool {
    return storage.getSome<CandidatesPool>(poolName + vacancyId);
}

function getCandidatesList(vacancyId: string, poolName:string): Candidate[] {
    const candidatesPool = getCandidatesPool(vacancyId, poolName);
    return candidatesPool.getCandidates();
}

function getCandidateInfo(vacancyId: string, candidateId: string, poolName: string): Candidate { 
    const allCandidates = getCandidatesList(vacancyId, poolName);
    let candidateInfo!: Candidate;

    for (var i = 0; i < allCandidates.length; i++) {
        if(allCandidates[i].candidate_id == candidateId) {
            candidateInfo = allCandidates[i];
        }
    }
    return candidateInfo
}

export function on_hiring_complete(): void {
    logging.log("candidate has been hired!");
}
'''
'''--- src/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- src/utils.ts ---
import { u128, Context, ContractPromise } from "near-sdk-as";

/**
 * == TYPES ====================================================================
 */

/**
 * Account IDs in NEAR are just strings.
 */
export type AccountId = string;

/**
 * Gas is u64
 */
export type Gas = u64;

/**
 * Amounts, Balances, and Money in NEAR is are u128.
 */

export type Amount = u128;

export type Balance = Amount;

export type Money = Amount;

/**
 * Timestamp in NEAR is a number.
 */
export type Timestamp = u64;

/**
 * == CONSTANTS ================================================================
 *
 * ONE_NEAR = unit of NEAR token in yocto Ⓝ (1e24)
 * XCC_GAS = gas for cross-contract calls, ~5 Tgas (teragas = 1e12) per "hop"
 * MIN_ACCOUNT_BALANCE = 3 NEAR min to keep account alive via storage staking
 *
 * TODO: revist MIN_ACCOUNT_BALANCE after some real data is included b/c this
 *  could end up being much higher
 */

export const ONE_NEAR = u128.from("1000000000000000000000000");
export const XCC_GAS: Gas = 20_000_000_000_000;
export const MIN_ACCOUNT_BALANCE: u128 = u128.mul(ONE_NEAR, u128.from(3));
export const VACANCY_PREFIX: string = "vacancy";
export const CANDIDATES_PREFIX: string = "candidates";
export const HIRED_CANDIDATES_PREFIX: string = "hired-candidates";

/**
 * == FUNCTIONS ================================================================
 */

/**
 * @function asNEAR
 * @param amount {u128} - Yocto Ⓝ token quantity as an unsigned 128-bit integer
 * @returns {string}    - Amount in NEAR, as a string
 *
 * @example
 *
 *    asNEAR(7000000000000000000000000)
 *    // => '7'
 */
export function asNEAR(amount: u128): string {
  return u128.div(amount, ONE_NEAR).toString();
}

/**
 * @function toYocto
 * @param amount {number} - Integer to convert
 * @returns {u128}        - Amount in yocto Ⓝ as an unsigned 128-bit integer
 *
 * @example
 *
 *    toYocto(7)
 *    // => 7000000000000000000000000
 */
export function toYocto(amount: number): u128 {
  return u128.mul(ONE_NEAR, u128.from(amount))
}

/**
 * Function to assert that the contract has called itself
 */
export function assert_self(): void {
  const caller = Context.predecessor
  const self = Context.contractName
  assert(caller == self, "Only this contract may call itself");
}

export function assert_single_promise_success(): void {
  const x = ContractPromise.getResults()
  assert(x.length == 1, "Expected exactly one promise result")
  assert(x[0].succeeded, "Expected PromiseStatus to be successful")
}

export function generateId(): string {
  //const title = context.sender.substring(0, context.sender.lastIndexOf('.'))
  //const temp = title + '-' + context.blockIndex.toString();
  return "-" + Context.blockIndex.toString();
}
'''