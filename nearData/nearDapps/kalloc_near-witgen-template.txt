*GitHub Repository "kalloc/near-witgen-template"*

'''--- Cargo.toml ---
[package]
name = "witgen-template"
version = "0.2.0"
authors = ["Niktia Kuznetsov <n@8gen.team>"]
edition = "2018"

[dependencies]
near-sdk = "4.0.0"
near-contract-standards = "4.0.0"
serde_json = "1"
borsh = "0.9.3"
serde = "1"
witgen = { path = "./dummy_witgen" }  

[lib]
crate-type = ["cdylib", "rlib"]

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

'''
'''--- README.md ---
## Requirements 

### Install witme

```bash
cargo install witme --version 0.2.6
```

### build example
```bash
yarn && yarn build:all
```

## Usage

```bash
yarn run deploy && yarn run test
```

Expected result:

```
y@sweet ~/learn/near/witgen-template[master] $ yarn run deploy test
yarn run v1.22.18
$ ./dev-deploy.sh test
    Finished release [optimized] target(s) in 0.03s
Starting deployment. Account id: dev-1657706025241-17231575721203, node: https://rpc.testnet.near.org, helper: https://helper.testnet.near.org, file: /home/y/learn/near/witgen-template/res/contract.wasm
Transaction Id 7KTnBPVQPDcuxdTVtTjbnjiB6M3Eyjoyjsnc1mJKEeYH
To see the transaction in the transaction explorer, please open this url in your browser
https://explorer.testnet.near.org/transactions/7KTnBPVQPDcuxdTVtTjbnjiB6M3Eyjoyjsnc1mJKEeYH
Done deploying to dev-1657706025241-17231575721203
Done in 8.31s.
y@sweet ~/learn/near/witgen-template[master] $ yarn run test
yarn run v1.22.18
$ near repl -s ./test.ts
{
  version: '0.2.0',
  value: 'Wed Jul 13 2022 11:58:55 GMT+0200 (Central European Summer Time)'
}
{
  version: '0.2.0',
  value: 'Wed Jul 13 2022 12:05:20 GMT+0200 (Central European Summer Time)'
}
Done in 4.99s.

```

## Example 

```typescript
import fs from "fs";
import { Context } from "near-cli/context";

import { Contract } from "./ts/contract";

export async function main({near} : Context) {
    let contractId = fs.readFileSync("./neardev/dev-account").toString();
    let account = await near.account(contractId);
    // @ts-ignore
    let contract: Contract = new Contract(account, contractId);
    console.log(await contract.config());
    await contract.update_config({value: new Date().toString()});
    console.log(await contract.config());
}
```

'''
'''--- build.sh ---
 #!/bin/bash
 TARGET="${CARGO_TARGET_DIR:-target}"
 set -e
 cd "`dirname $0`"
 RUSTFLAGS='-C link-arg=-s'  cargo build --all --target wasm32-unknown-unknown --release

 cp $TARGET/wasm32-unknown-unknown/release/witgen_template.wasm ./res/contract.wasm

'''
'''--- dev-deploy.sh ---
#!/usr/bin/env bash

set -e
export NEAR_ENV=testnet

realpath() {
    path=`eval echo "$1"`
    folder=$(dirname "$path")
    echo $(cd "$folder"; pwd)/$(basename "$path");
}

./build.sh

ROOT=$(dirname $(realpath $0))
if [[ ! -e ${ROOT}/neardev ]]; then
    INIT_TIME=true
fi
near dev-deploy --wasmFile ${ROOT}/res/contract.wasm  --initFunction ''
CONTRACT=$(cat ${ROOT}/neardev/dev-account)
if [[ $INIT_TIME ]];then
    near call ${CONTRACT} init '{}' --accountId $CONTRACT
fi

'''
'''--- dummy_witgen/Cargo.toml ---
[package]
name = "witgen"
version = "0.1.0"
authors = ["Nikita Kuznetsov <n@8gen.team>"]
edition = "2018"

[lib]
proc-macro = true

[dependencies]
proc-macro2 = { version = "1.0.32", features = ["span-locations"] }

'''
'''--- dummy_witgen/src/lib.rs ---
use proc_macro::TokenStream;

#[proc_macro_attribute]
pub fn witgen(_attr: TokenStream, item: TokenStream) -> TokenStream {
    item
}

'''
'''--- package.json ---
{
  "name": "near-witgen-template",
  "version": "0.1.0",
  "description": "",
  "scripts": {
    "build:contract": "./build.sh",
    "build:all": "yarn build:contract && yarn witme:witgen && yarn witme:ts",
    "witme:witgen": "witme near wit -d . -p ts/sdk.wit -o ts/contract.wit",
    "witme:ts": "witme near ts -i ts/contract.wit -o ts/contract",
    "deploy": "./dev-deploy.sh",
    "test": "near repl -s ./test.ts"
  },
  "dependencies": {
    "ts-node": "^10.8.2",
    "typescript": "^4.7.4"
  },
  "devDependencies": {
    "near-api-js": "^0.45.1",
    "near-cli": "^3.4.0"
  },
  "author": "kalloc",
  "license": "MIT"
}

'''
'''--- src/lib.rs ---
use near_sdk::{
    borsh::{BorshDeserialize, BorshSerialize},
    near_bindgen, PanicOnDefault,
};
use serde::{Deserialize, Serialize};
use witgen::witgen;

#[near_bindgen]
#[derive(Deserialize, Serialize, Debug)]
#[witgen]
pub struct Config {
    pub version: String,
    pub value: String,
}

#[near_bindgen]
#[derive(BorshSerialize, BorshDeserialize, PanicOnDefault)]
struct Contract {
    pub value: String,
}

#[near_bindgen]
impl Contract {
    #[init]
    pub fn init() -> Self {
        Contract {
            value: "".to_string(),
        }
    }

    #[witgen]
    pub fn config(&self) -> Config {
        Config {
            version: env!("CARGO_PKG_VERSION").to_string(),
            value: self.value.clone(),
        }
    }

    #[witgen]
    pub fn update_config(&mut self, value: String) -> Config {
        self.value = value;
        self.config()
    }
}

'''
'''--- test.ts ---
import { Context } from "near-cli/context";
import fs from "fs";
import { Contract } from "./ts/contract";

export async function main({near} : Context) {
    let contractId = fs.readFileSync("./neardev/dev-account").toString();
    let account = await near.account(contractId);
    // @ts-ignore
    let contract: Contract = new Contract(account, contractId);
    console.log(await contract.config());
    await contract.update_config({value: new Date().toString()});
    console.log(await contract.config());
}

'''
'''--- ts/contract/helper.ts ---

//@ts-ignore for ts-json-schema-generator
export { Account, transactions, providers, DEFAULT_FUNCTION_CALL_GAS } from 'near-api-js';
//@ts-ignore for ts-json-schema-generator
import BN from 'bn.js';
export {BN};

export interface ChangeMethodOptions {
  gas?: BN;
  attachedDeposit?: BN;
  walletMeta?: string;
  walletCallbackUrl?: string;
}
/**
 * Options for view contract calls
 */ 
export interface ViewFunctionOptions {
  parse?: (response: Uint8Array) => any;
  stringify?: (input: any) => any;
}

/** 
* @minimum 0
* @maximum 18446744073709551615
* @asType integer
*/
export type u64 = number;
/** 
* @minimum -9223372036854775808
* @maximum 9223372036854775807
* @asType integer
*/
export type i64 = number;

/**
* @minimum  0 
* @maximum 255
* @asType integer
* */
export type u8 = number;
/**
* @minimum  -128 
* @maximum 127
* @asType integer
* */
export type i8 = number;
/**
* @minimum  0 
* @maximum 65535
* @asType integer
* */
export type u16 = number;
/**
* @minimum -32768 
* @maximum 32767
* @asType integer
* */
export type i16 = number;
/**
* @minimum 0 
* @maximum 4294967295
* @asType integer
* */
export type u32 = number;
/**
* @minimum 0 
* @maximum 4294967295
* @asType integer
* */
export type usize = number;
/**
* @minimum  -2147483648 
* @maximum 2147483647
* @asType integer
* */
export type i32 = number;

/**
* @minimum -3.40282347E+38
* @maximum 3.40282347E+38
*/
export type f32 = number;

/**
* @minimum -1.7976931348623157E+308
* @maximum 1.7976931348623157E+308
*/
export type f64 = number;
'''
'''--- ts/contract/index.ts ---
import {
  Account,
  transactions,
  providers,
  DEFAULT_FUNCTION_CALL_GAS,
  u8,
  i8,
  u16,
  i16,
  u32,
  i32,
  u64,
  i64,
  f32,
  f64,
  BN,
  ChangeMethodOptions,
  ViewFunctionOptions,
} from './helper';

/**
* StorageUsage is used to count the amount of storage used by a contract.
*/
export type StorageUsage = u64;
/**
* Balance is a type for storing amounts of tokens, specified in yoctoNEAR.
*/
export type Balance = U128;
/**
* Represents the amount of NEAR tokens in "gas units" which are used to fund transactions.
*/
export type Gas = u64;
/**
* base64 string.
*/
export type Base64VecU8 = string;
/**
* Raw type for duration in nanoseconds
*/
export type Duration = u64;
/**
* @minLength 2
* @maxLength 64
* @pattern ^(([a-z\d]+[-_])*[a-z\d]+\.)*([a-z\d]+[-_])*[a-z\d]+$
*/
export type AccountId = string;
/**
* @minLength 2
* @maxLength 64
* @pattern ^(([a-z\d]+[-_])*[a-z\d]+\.)*([a-z\d]+[-_])*[a-z\d]+$
*/
export type ValidAccountId = string;
/**
* String representation of a u128-bit integer
* @pattern ^[0-9]+$
*/
export type U128 = string;
/**
* Public key in a binary format with base58 string serialization with human-readable curve.
* The key types currently supported are `secp256k1` and `ed25519`.
* 
* Ed25519 public keys accepted are 32 bytes and secp256k1 keys are the uncompressed 64 format.
*/
export type PublicKey = string;
/**
* Raw type for timestamp in nanoseconds
*/
export type Timestamp = u64;
export interface Config {
  version: string;
  value: string;
}

export class Contract {
  
  constructor(public account: Account, public readonly contractId: string){}
  
  async init(args = {}, options?: ChangeMethodOptions): Promise<void> {
    return providers.getTransactionLastResult(await this.initRaw(args, options));
  }
  initRaw(args = {}, options?: ChangeMethodOptions): Promise<providers.FinalExecutionOutcome> {
    return this.account.functionCall({contractId: this.contractId, methodName: "init", args, ...options});
  }
  initTx(args = {}, options?: ChangeMethodOptions): transactions.Action {
    return transactions.functionCall("init", args, options?.gas ?? DEFAULT_FUNCTION_CALL_GAS, options?.attachedDeposit ?? new BN(0))
  }
  config(args = {}, options?: ViewFunctionOptions): Promise<Config> {
    return this.account.viewFunction(this.contractId, "config", args, options);
  }
  async update_config(args: {
    value: string;
  }, options?: ChangeMethodOptions): Promise<Config> {
    return providers.getTransactionLastResult(await this.update_configRaw(args, options));
  }
  update_configRaw(args: {
    value: string;
  }, options?: ChangeMethodOptions): Promise<providers.FinalExecutionOutcome> {
    return this.account.functionCall({contractId: this.contractId, methodName: "update_config", args, ...options});
  }
  update_configTx(args: {
    value: string;
  }, options?: ChangeMethodOptions): transactions.Action {
    return transactions.functionCall("update_config", args, options?.gas ?? DEFAULT_FUNCTION_CALL_GAS, options?.attachedDeposit ?? new BN(0))
  }
}
/**
* 
* @contractMethod change
*/
export interface Init {
  args: {};
  options: {
    /** Units in gas
    * @pattern [0-9]+
    * @default "30000000000000"
    */
    gas?: string;
    /** Units in yoctoNear
    * @default "0"
    */
    attachedDeposit?: Balance;
  }
  
}
export type Init__Result = void;
/**
* 
* @contractMethod view
*/
export interface Config {
  args: {};
  
}
export type Config__Result = Config;
/**
* 
* @contractMethod change
*/
export interface UpdateConfig {
  args: {
    value: string;
  };
  options: {
    /** Units in gas
    * @pattern [0-9]+
    * @default "30000000000000"
    */
    gas?: string;
    /** Units in yoctoNear
    * @default "0"
    */
    attachedDeposit?: Balance;
  }
  
}
export type UpdateConfig__Result = Config;

'''