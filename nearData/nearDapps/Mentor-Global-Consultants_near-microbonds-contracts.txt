*GitHub Repository "Mentor-Global-Consultants/near-microbonds-contracts"*

'''--- near-microbonds-bond-factory/README.md ---
# Microbonds Factory

The goal behind the Microbonds project is to allow projects to be created under governing municipalities, and have funds raised for their projects just like traditional bonds, but unlike the traditional way, have the bonds represented as a Non-Fungible Token. As there are many different parts to making this work under different legislations, the project has a few moving parts. We will cover them in detail in their individual code bases.

## Introduction

This contract is responsible for keeping track of municipalities, their projects and the projects' tokens.

The contract is also responsible for deploying these projects' tokens from a set of stored versions.

_Note: The token versions are not updatable, but you can store new versions._

## Table of Contents
1. [Municipalities](#municipalities)
2. [Projects](#projects)
3. [Tokens](#tokens)
4. [Token Versions](#token-versions)

## Municipalities

Let us go through the contract and what a typical use-case would look like for each functionality. You can see the overall flow of our use-case in the table of contents.

In our use-case, we want to have municipalities sign up to the platform and once they are approved, we want to be able to access which municipalities are approved on-chain. In order to do that we are able to create a municipality on-chain using the following function:

```rs
pub fn add_new_municipality(
    &mut self,
    municipality_id: String,
    memo: Option<String>,
)
```

Using this function, we can provide any unique identifier for the municipality we want to store, as well as an optional memo that will be broadcasted with the following event:

```rs
pub struct AddMunicipalityLog {
    pub municipality_id: String,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<String>,
}
```

## Projects

In our use-case, once a municipality is approved and they have been created on the contract, they will be able to create projects that will fall under their governance. 

Similar to above, we can use the following function:

```rs
pub fn add_new_project(
    &mut self,
    municipality_id: String,
    project_id: String,
    memo: Option<String>,
)
```

Using this function, we can provide any unique identifier for the project we want to store, as well as the governing municipality's id and an optional memo that will be broadcasted with the following event:

```rs
pub struct AddProjectLog {
    pub municipality_id: String,
    pub project_id: String,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<String>,
}
```

Once projects have been added under a municipality, we can query the projects for any municipality by calling the following view function:

```rs
pub fn view_projects_for_municipality(
    &self,
    municipality_id: String,
    from_index: Option<U128>,
    limit: Option<u64>,
) -> Vec<String>
```

By providing the municipality id, we can retrieve all the projects that are governed by the municipality. Since view calls are subject to a byte-limit, there is optional pagination included that can be used to retrieve the entire list of projects if they exceed the call limit.

## Tokens

Since the goal behind the creation of the contract is to issue bonds for each project, once the project has been created they can finally issue bonds in the form of a Non-Fungible Token.

We can do this by calling the following function:

```rs
#[payable]
pub fn add_new_token_for_project(
    &mut self,
    municipality_id: String,
    project_id: String,
    token_version: String,
    memo: Option<String>,
) -> Promise
```

By providing a municipality and project id, we can create a new token for the given project, governed under the given municipality. 

**_Both the municipality and project have to be valid for the creation to occur._**

As for the token version; the individual projects can decide which token version suits them best by providing the matching token version identifier as it is stored on the contract. All token versions will be unique, for instance royalty fees can be included on token 1, whereas with token 2 we can have some special event happen on mint. The token versions are completely customizable and it is up to the deployer to add more versions. More info on this [below](#token-versions).

**IMPORTANT**: A deposit must be attached, equal to the cost of storage for the token version that will be deployed with the call. This can also be explored [below](#token-versions).

Again, an optional memo can be attached which will be broadcasted with the following event:

```rs
pub struct AddProjectTokenLog {
    pub municipality_id: String,
    pub project_id: String,
    pub token_id: String,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<String>,
}
```

We can view all the tokens minted under a specific project by calling the following view function:

```rs
pub fn view_tokens_for_project(
    &self,
    project_id: String,
    from_index: Option<U128>,
    limit: Option<u64>,
) -> Vec<String>
```

Pagination is once again added, should the list exceed the byte-limit on view calls.

## Token Versions

We have decided to create a way for projects to choose from different token versions as some projects' needs are different from others. To add token versions, the following function can be called:

```rs
pub fn add_token_version(&mut self)
```

At first glance it seems like no input is passed to the function but with the near-sdk, arguments can also be passed as bytes using base64 encoding. This can be read using `env::input()`. This means we can technically pass information to the contract by passing some bytes through args. Something like this:

```ts
const code = fs.readFileSync('./test-contracts/nft.wasm', 'utf8');
const code_b64 = Buffer.from(code, 'base64');

await owner.call(
    factory_contract, // The contract that we are calling
    'add_token_version', // The method we are calling
    code_b64 // The args we are supplying - in this case the code encoded in base64.
);
```

For us to read it on contract-level we simply read the input like this:

```rs
let code = env::input().expect("No input given").to_vec();
```

With this implementation we can create new token versions as it becomes neccessary. The token versions have an auto-incrementing version number starting from zero (0). Meaning if you have one token stored, its id will be '0' and the next uploaded token version will be '1'.

We suggest storing the relevant metadata and descriptions for each token on the token itself.

To retrieve all the stored token versions, we can call the following view function:

```rs
pub fn get_token_versions(&self) -> Vec<String>
```

We can also retrieve the code for any stored version by providing the token_version id:

```rs
pub fn get_code_for_token_version(&self, token_version: &String) -> Vec<u8>
```

When creating tokens for a project, we'd like to know what the attached deposit must be for any given token version, so to get that before deployment the following function can be called:

```rs
pub fn get_deployment_cost(&self, token_version: String) -> U128
```

## How to build and run tests

You can use either yarn or npm for the following commands:

### Install packages

```
npm install
```

### Build contracts

```
npm build
```

### Run all tests
```
npm test
```

### Run unit tests only

```
npm run test:unit
```

### Run integration tests only in both TypeScript and Rust
```
npm run test:integration
```

### Run integration tests only in either TypeScript OR Rust
```
npm run test:integration:ts OR npm run test:integration:rs
```

Please check the package.json for all possible scripts.
'''
'''--- near-microbonds-bond-factory/factory-contract/Cargo.toml ---
[package]
name = "bond_factory"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "4.0.0"
near-contract-standards = "4.0.0"
serde_json = "1.0"

[profile.release]
codegen-units=1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true
'''
'''--- near-microbonds-bond-factory/factory-contract/build.sh ---
#!/bin/bash
set -e && RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release && mkdir -p ../out && cp target/wasm32-unknown-unknown/release/*.wasm ../out/factory.wasm
'''
'''--- near-microbonds-bond-factory/factory-contract/src/events.rs ---
use std::fmt;

use near_sdk::serde::{Deserialize, Serialize};

/// Enum that represents the data type of the EventLog.
/// The enum can either be an NftMint or an NftTransfer.
#[derive(Serialize, Deserialize, Debug)]
#[serde(tag = "event", content = "data")]
#[serde(rename_all = "snake_case")]
#[serde(crate = "near_sdk::serde")]
#[non_exhaustive]
pub enum EventLogVariant {
    AddMunicipality(Vec<AddMunicipalityLog>),
    AddProject(Vec<AddProjectLog>),
    AddProjectToken(Vec<AddProjectTokenLog>),
}

/// Interface to capture data about an event
///
/// Arguments:
/// * `standard`: name of standard e.g. nep171
/// * `version`: e.g. 1.0.0
/// * `event`: associate event data
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct EventLog {
    pub version: String,

    // `flatten` to not have "event": {<EventLogVariant>} in the JSON, just have the contents of {<EventLogVariant>}.
    #[serde(flatten)]
    pub event: EventLogVariant,
}

impl fmt::Display for EventLog {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_fmt(format_args!(
            "EVENT_JSON:{}",
            &serde_json::to_string(self).map_err(|_| fmt::Error)?
        ))
    }
}

/// An event log to capture adding a municipality
///
/// Arguments
/// * `municipality_id`: id of the municipality
/// * `memo`: optional message
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct AddMunicipalityLog {
    pub municipality_id: String,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<String>,
}

/// An event log to capture adding a project
///
/// Arguments
/// * `municipality_id`: id of the municipality
/// * `project_id`: id of the project
/// * `memo`: optional message
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct AddProjectLog {
    pub municipality_id: String,
    pub project_id: String,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<String>,
}

/// An event log to capture adding a project's token
///
/// Arguments
/// * `municipality_id`: id of the municipality
/// * `project_id`: id of the project
/// * `token_id`: id of the token
/// * `memo`: optional message
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct AddProjectTokenLog {
    pub municipality_id: String,
    pub project_id: String,
    pub token_id: String,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<String>,
}
'''
'''--- near-microbonds-bond-factory/factory-contract/src/factory_core.rs ---
use std::ops::Mul;

use crate::*;
use near_contract_standards::non_fungible_token::metadata::NFTContractMetadata;
use near_sdk::{Promise, env::attached_deposit, Gas, json_types::Base64VecU8, PromiseResult};

#[derive(Serialize)]
#[serde(crate = "near_sdk::serde")]
struct TokenInitArgs {
    owner_id: AccountId,
    metadata: NFTContractMetadata,
}

#[near_bindgen]
impl Contract {
    /**
     * Adds a new municipality account - caller has to be contract owner
     */
    pub fn add_new_municipality(
        &mut self,
        municipality_id: String,
        memo: Option<String>,
    ) {
        // Make sure called is owner
        self.assert_owner();

        // Insert the new municipality into the UnorderedSet and make sure it doesn't already exist
        assert!(
            self.municipalities.insert(&municipality_id),
            "Municipality already exists"
        );

        // Insert the new municipality and make sure it doesn't already exist
        assert!(
            self.municipality_to_projects.insert(
                &municipality_id, 
                &UnorderedSet::new(StorageKey::MunicipalityToProjectsInner.try_to_vec().unwrap())
            ).is_none(),
            "Municipality already exists"
        );

        // contruct the add municipality log
        let add_municipality_log: EventLog = EventLog { 
            version: "1.0.0".to_string(), 
            event: EventLogVariant::AddMunicipality(vec![AddMunicipalityLog {
                // Owner of the token
                municipality_id: municipality_id,

                // An optional memo to include
                memo: memo,
            }])
        };

        // log the serialized json
        env::log_str(&add_municipality_log.to_string());
    }

    /**
     * Adds a new project under an existing municipality - caller has to be contract owner
     */
    pub fn add_new_project(
        &mut self,
        municipality_id: String,
        project_id: String,
        memo: Option<String>,
    ) {
        // Make sure the called is the owner
        self.assert_owner();

        // Make sure the municipality exists
        assert!(
            self.municipality_to_projects.contains_key(&municipality_id),
            "Municipality does not exist"
        );

        // Add project to municipality_to_projects and make sure it doesn't already exist
        let mut projects = self.municipality_to_projects.get(&municipality_id).unwrap();
        assert!(
            projects.insert(&project_id),
            "Project already exists in mun"
        );

        // replace with the new set
        self.municipality_to_projects.insert(&municipality_id, &projects);

        // Add project to project_to_tokens and make sure it doesn't already exist
        assert!(
            self.project_to_tokens.insert(
                &project_id,
                &UnorderedSet::new(StorageKey::ProjectToTokensInner.try_to_vec().unwrap())
            ).is_none(),
            "Project already exists"
        );

        // contruct the add project log
        let add_project_log: EventLog = EventLog { 
            version: "1.0.0".to_string(), 
            event: EventLogVariant::AddProject(vec![AddProjectLog {
                // Municipality Id
                municipality_id: municipality_id,

                // Project Id
                project_id: project_id,

                // An optional memo to include
                memo: memo,
            }])
        };

        // log the serialized json
        env::log_str(&add_project_log.to_string());
    }

    /**
     * Adds a new token for a project (it has to be a registered project)
     */
    #[payable]
    pub fn add_new_token_for_project(
        &mut self,
        municipality_id: String,
        project_id: String,
        token_version: String,
        token_account_name: String,
        token_name: String,
        token_symbol: String,
        token_icon: Option<String>,
        token_base_uri: Option<String>,
        token_reference: Option<String>,
        token_reference_hash: Option<Base64VecU8>,
        memo: Option<String>,
    ) -> Promise {
        // Make sure the caller is owner
        self.assert_owner();

        // Make sure the municipality exists
        assert!(
            self.municipality_to_projects.contains_key(&municipality_id),
            "Municipality does not exist"
        );

        // Make sure the project exists
        assert!(
            !self.municipality_to_projects.get(&municipality_id).unwrap().is_empty(),
            "Project does not exist"
        );

        // Get the code for the token version if it exists
        let code = self.token_version_to_code.get(&token_version).expect("Token version does not exist").get().unwrap();
        
        let contract_bytes = code.len() as u128;
        let min_needed = env::STORAGE_PRICE_PER_BYTE.mul(contract_bytes);
        
        // Assert that the attached deposit is greater than the cost of deployment
        assert!(attached_deposit().ge(&min_needed), "Attach at least {min_needed} yoctoNEAR to deploy the contract");

        // Create new near account id
        let current_account_id = env::current_account_id();
        let new_token_account_id: AccountId = format!("{token_account_name}.{current_account_id}").parse().unwrap();
        assert!(
            env::is_valid_account_id(new_token_account_id.as_bytes()),
            "Subaccount ID is invalid"
        );

        // Get args
        let init_args = near_sdk::serde_json::to_vec(&TokenInitArgs {
            owner_id: env::signer_account_id(),
            metadata: NFTContractMetadata {
                spec: ("nft-".to_owned() + &token_version.clone()).to_string(),
                name: token_name, 
                symbol: token_symbol, 
                icon: token_icon, 
                base_uri: token_base_uri, 
                reference: token_reference,
                reference_hash: token_reference_hash,
            }
        }).unwrap();

        // Create the account
        Promise::new(new_token_account_id.clone())
            .create_account()
            .transfer(attached_deposit())
            .deploy_contract(code)
            .function_call("new".to_owned(), init_args, 0, Gas(10u64.pow(12)))
            .then(
                Self::ext(env::current_account_id())
                .resolve_deploy(municipality_id, project_id, new_token_account_id.to_string(), memo)
            )
    }

    #[private]
    pub fn resolve_deploy(
        &mut self,
        municipality_id: String,
        project_id: String,
        new_token_account_id: String,
        memo: Option<String>
    ) {
        match env::promise_result(0) {
            PromiseResult::NotReady => unreachable!(),
            PromiseResult::Failed => env::panic_str("Failed to deploy token contract"),
            PromiseResult::Successful(_) => {
                // Add token for project and make sure it doesn't already exist
                let mut tokens = self.project_to_tokens.get(&project_id).unwrap();
                assert!(
                    tokens.insert(
                        &AccountId::new_unchecked(new_token_account_id.clone())
                    ),
                    "Token already added for project"
                );

                // Replace the tokens with the new set
                self.project_to_tokens.insert(&project_id, &tokens);

                // contruct the add project log
                let add_token_log: EventLog = EventLog { 
                    version: "1.0.0".to_string(), 
                    event: EventLogVariant::AddProjectToken(vec![AddProjectTokenLog {
                        // Municipality Id
                        municipality_id: municipality_id,

                        // Project Id
                        project_id: project_id,

                        // Token Id
                        token_id: new_token_account_id.clone(),

                        // An optional memo to include
                        memo: memo,
                    }])
                };

                // log the serialized json
                env::log_str(&add_token_log.to_string());
            }
        }
    }
}

'''
'''--- near-microbonds-bond-factory/factory-contract/src/internal.rs ---
use crate::*;

impl Contract {
    pub(crate) fn assert_owner(&self) {
        assert!(
            self.owner_id == env::predecessor_account_id(),
            "Caller not owner"
        );
    }
}

'''
'''--- near-microbonds-bond-factory/factory-contract/src/lib.rs ---
use near_sdk::{AccountId, collections::{LookupMap, UnorderedSet, LazyOption}, PanicOnDefault, near_bindgen, BorshStorageKey, env::{self}, CryptoHash};
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::json_types::{U128};
use near_sdk::serde::{Deserialize, Serialize};

use crate::views::*;
use crate::internal::*;
use crate::types::*;
use crate::events::*;
use crate::factory_core::*;
use crate::tokens::*;

mod views;
mod internal;
mod types;
mod events;
mod factory_core;
mod tokens;

/**
 * Description:
 * This contract is responsible for tracking all registered municipalities and the projects registered under them. Projects can then register tokens under them.
 * Each municipality can have multiple projects registered under it and each project can have multiple tokens registered under it.
 * When a project is created, we create a new token account for that project and deploy the code to that account.
 */

// Main contract structure to store all information
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
    // Registry contract owner
    pub owner_id: AccountId,

    // MunicipalitiesObjectIds
    pub municipalities: UnorderedSet<String>,

    // MunicipalityObjectId => ProjectObjectId
    pub municipality_to_projects: LookupMap<String, UnorderedSet<String>>,

    // ProjectId => Set of accountIds for each token
    pub project_to_tokens: LookupMap<String, UnorderedSet<AccountId>>,

    // TokenVersions
    pub token_versions: UnorderedSet<String>,

    // TokenVersion => hash
    pub token_version_to_code: LookupMap<String, LazyOption<Vec<u8>>>,
}

#[derive(BorshStorageKey, BorshSerialize)]
pub enum StorageKey {
    Municipalities,
    MunicipalityToProjects,
    MunicipalityToProjectsInner,
    ProjectToTokens,
    ProjectToTokensInner,
    TokensAsVector,
    ProjectsAsVector,

    TokenVersions,
    TokenVersionToCode,
    TokenVersionToCodeInner
}

#[near_bindgen]
impl Contract {

    /**
     * Initialization function (can only be called once)
     */
    #[init]
    pub fn new(owner_id: AccountId) -> Self {
        let this = Self {
            // Set the owner_id field equal to the passed in owner_id
            owner_id,
            municipalities: UnorderedSet::new(StorageKey::Municipalities.try_to_vec().unwrap()),
            municipality_to_projects: LookupMap::new(StorageKey::MunicipalityToProjects.try_to_vec().unwrap()),
            project_to_tokens: LookupMap::new(StorageKey::ProjectToTokens.try_to_vec().unwrap()),
            token_versions: UnorderedSet::new(StorageKey::TokenVersions.try_to_vec().unwrap()),
            token_version_to_code: LookupMap::new(StorageKey::TokenVersionToCode.try_to_vec().unwrap())
        };

        // Return the Contract object
        this
    }
}

#[cfg(test)]
mod tests;
'''
'''--- near-microbonds-bond-factory/factory-contract/src/tests.rs ---
/* unit tests */
#[cfg(test)]
use crate::Contract;
use crate::{JsonProject, JsonMunicipality};
use near_sdk::json_types::{U128, U64};
use near_sdk::test_utils::{accounts, VMContextBuilder};
use near_sdk::testing_env;
use near_sdk::{env, AccountId};

fn get_context(predecessor: AccountId) -> VMContextBuilder {
    let mut builder = VMContextBuilder::new();
    builder.predecessor_account_id(predecessor);
    builder
}

fn sample_project_data() -> JsonProject {
    JsonProject {
        project_id: "test_project_1_a".to_string(),
        tokens_account_ids: [accounts(3).to_string()].to_vec()
    }
}

fn sample_municipality_data() -> JsonMunicipality {
    JsonMunicipality {
        municipality_id: "test_municipality_1".to_string(),
        projects: ["test_project_1_a".to_string()].to_vec()
    }
}

#[test]
#[should_panic(expected = "The contract is not initialized")]
fn test_default() {
    let context = get_context(accounts(1));
    testing_env!(context.build());
    let _contract = Contract::default();
}

#[test]
fn test_initialization() {
    let mut context = get_context(accounts(1));
    testing_env!(context.build());
    
    let contract = Contract::new(accounts(1).into());
    testing_env!(context.is_view(true).build());

    let owner = contract.owner();
    assert_eq!(owner, accounts(1));
}

#[test]
fn test_add_municipality() {
    // Get context
    let context = get_context(accounts(0));
    testing_env!(context.build());

    // Get contract
    let mut contract = Contract::new(accounts(0).into());
    
    let municipality_data = sample_municipality_data();

    contract.add_new_municipality(municipality_data.municipality_id.clone(), Some("This is a test memo".to_string()));

    let projects_for_municipality = contract.view_projects_for_municipality(municipality_data.municipality_id.clone(), None, None);

    assert_eq!(projects_for_municipality.len(), 0, "Projects length expected to be zero");
}

#[test]
#[should_panic(expected = "Caller not owner")]
fn test_add_municipality_non_owner() {
    // Get context
    let mut context = get_context(accounts(0));
    testing_env!(context.predecessor_account_id(accounts(1)).build());

    // Get contract
    let mut contract = Contract::new(accounts(0).into());
    
    let municipality_data = sample_municipality_data();
    contract.add_new_municipality(municipality_data.municipality_id.clone(), Some("This is a test memo".to_string()));
}

#[test]
fn test_add_project() {
    // Get context
    let mut context = get_context(accounts(0));
    testing_env!(context.predecessor_account_id(accounts(0)).build());

    // Get contract
    let mut contract = Contract::new(accounts(0).into());
    
    let municipality_data = sample_municipality_data();
    let project_data = sample_project_data();

    contract.add_new_municipality(municipality_data.municipality_id.clone(), Some("This is a test memo".to_string()));
    contract.add_new_project(
        municipality_data.municipality_id.clone(),
        project_data.project_id.clone(),
        Some("This is a test memo".to_string())
    );

    let projects_for_municipality = contract.view_projects_for_municipality(municipality_data.municipality_id.clone(), None, None);
    let tokens_for_projects = contract.view_tokens_for_project(project_data.project_id.clone(), None, None);

    // println!("{:?}", tokens_for_projects); // print tokens for projects (debug)
    // println!("{:?}", projects_for_municipality); // print tokens for projects (debug)

    assert_eq!(projects_for_municipality[0], project_data.project_id.clone(), "Project ID does not match expected ID in projects_for_municipalities");

    assert_eq!(tokens_for_projects.len(), 0, "Token account ids expected to be of length zero");  
}

#[test]
#[should_panic(expected = "Caller not owner")]
fn test_add_project_non_owner() {
    // Get context
    let mut context = get_context(accounts(0));
    testing_env!(context.predecessor_account_id(accounts(1)).build());

    // Get contract
    let mut contract = Contract::new(accounts(0));
    
    let municipality_data = sample_municipality_data();
    let project_data = sample_project_data();

    // contract.add_new_municipality(municipality_data.municipality_id.clone(), Some("This is a test memo".to_string()));
    contract.add_new_project(
        municipality_data.municipality_id.clone(),
        project_data.project_id.clone(),
        Some("This is a test memo".to_string())
    );
}
'''
'''--- near-microbonds-bond-factory/factory-contract/src/tokens.rs ---
use near_sdk::{log, Promise};
use crate::*;

#[near_bindgen]
impl Contract {
    // Add a new token version to the contract
    pub fn add_token_version(&mut self) {
        // Make sure the caller is the owner
        self.assert_owner();

        let code = env::input().expect("No input given");

        assert!(code.len() > 0, "No code given");

        // Token version
        let token_version: u64 = self.token_versions.len();

        // Read the code from the input. It is the rest of the input
        let code: LazyOption<Vec<u8>> = LazyOption::new(
            StorageKey::TokenVersionToCodeInner.try_to_vec().unwrap(), 
            Some(&code)
        );

        // Add the token version to the contract
        self.token_version_to_code.insert(
            &token_version.to_string(), 
            &code
        );

        // Add the token to the list of token versions
        self.token_versions.insert(&token_version.to_string());
    }
}
'''
'''--- near-microbonds-bond-factory/factory-contract/src/types.rs ---
use crate::*;

/**
 * Both only used for testing currently
 */
#[derive(BorshDeserialize, BorshSerialize)]
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct JsonProject {
    pub project_id: String, // The owner of the project
    pub tokens_account_ids: Vec<String>, // The ids of the NFT tokens
}

#[derive(BorshDeserialize, BorshSerialize)]
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct JsonMunicipality {
    pub municipality_id: String, // The owner of the Municipality
    pub projects: Vec<String> // Vec containing ProjectIds
}
'''
'''--- near-microbonds-bond-factory/factory-contract/src/views.rs ---
use near_sdk::near_bindgen;

use crate::*;

#[near_bindgen]
impl Contract {

    // Get the token information for a specific project
    pub fn view_tokens_for_project(
        &self,
        project_id: String,
        from_index: Option<U128>,
        limit: Option<u64>,
    ) -> Vec<String> {
        // Get the set of tokens that belong to the project_id
        let tokens_for_project_set = self.project_to_tokens.get(&project_id);

        // If there is some set of tokens, we'll set the tokens variable equal to that set, otherwise return empty vector
        let tokens = if let Some(tokens_for_project_set) = tokens_for_project_set {
            tokens_for_project_set
        } else {
            return vec![];
        };

        // Starting index
        let start = u128::from(from_index.unwrap_or(U128(0)));

        // iterate through token using iterator
        tokens.iter()
            .skip(start as usize)
            .take(limit.unwrap_or(50) as usize)
            .map(|token| token.to_string())
            .collect()
    }

    // Get the projects that belong to a municipality
    pub fn view_projects_for_municipality(
        &self,
        municipality_id: String,
        from_index: Option<U128>,
        limit: Option<u64>,
    ) -> Vec<String> {
        // Get the projects that belong to the municipality
        let projects_for_municipality_set = self.municipality_to_projects.get(&municipality_id); // todo unwrap

        // If there is some set of projects, we'll set the projects variable equal to that set, otherwise return empty vector
        let projects = if let Some(projects_for_municipality_set) = projects_for_municipality_set {
            projects_for_municipality_set
        } else {
            return vec![];
        };

        // Starting index
        let start = u128::from(from_index.unwrap_or(U128(0)));

        // iterate through projects using iterator
        projects.iter()
            .skip(start as usize)
            .take(limit.unwrap_or(50) as usize)
            .collect()
    }

    // Get the municipalities stored in the contract
    pub fn view_municipalities(
        &self,
        from_index: Option<U128>,
        limit: Option<u64>,
    ) -> Vec<String> {
        // Starting index
        let start = u128::from(from_index.unwrap_or(U128(0)));

        // iterate through municipalities using iterator
        self.municipalities.iter()
            .skip(start as usize)
            .take(limit.unwrap_or(50) as usize)
            .collect()
    }

    pub fn owner(
        &self
    ) -> AccountId {
        self.owner_id.clone()
    }

    /// Get the code for a token version
    /// Could fail if the token code is larger than the allowed view call size
    pub fn get_code_for_token_version(&self, token_version: &String) -> Vec<u8> {
        // Make sure the token version exists
        assert!(self.token_version_to_code.contains_key(&token_version), "Token version does not exist");

        // Get the code for the token version
        self.token_version_to_code.get(&token_version).unwrap().get().unwrap()
    }

    // Get the list of token versions
    pub fn get_token_versions(&self) -> Vec<String> {
        self.token_versions.to_vec()
    }

    // Get the storage cost for the deployment of a token version
    pub fn get_deployment_cost(&self, token_version: String) -> U128 {
        // Get the token version
        let token_version = self.token_version_to_code.get(&token_version).unwrap();

        // Calculate the cost
        let contract_bytes = token_version.get().unwrap().len() as u128;
        let cost = contract_bytes * env::STORAGE_PRICE_PER_BYTE;

        // Return the cost
        U128(cost)
    }
}
'''
'''--- near-microbonds-bond-factory/integration-tests-ts/package-lock.json ---
{
    "name": "ava-testing",
    "version": "1.0.0",
    "lockfileVersion": 2,
    "requires": true,
    "packages": {
        "": {
            "name": "ava-testing",
            "version": "1.0.0",
            "license": "(MIT AND Apache-2.0)",
            "devDependencies": {
                "@types/bn.js": "^5.1.1",
                "@types/node": "^18.11.3",
                "ava": "^4.3.3",
                "near-workspaces": "^3.2.2",
                "ts-node": "^10.9.1",
                "typescript": "^4.8.4"
            }
        },
        "node_modules/@cspotcode/source-map-support": {
            "version": "0.8.1",
            "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
            "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
            "dev": true,
            "dependencies": {
                "@jridgewell/trace-mapping": "0.3.9"
            },
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/@jridgewell/resolve-uri": {
            "version": "3.1.0",
            "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.0.tgz",
            "integrity": "sha512-F2msla3tad+Mfht5cJq7LSXcdudKTWCVYUgw6pLFOOHSTtZlj6SWNYAp+AhuqLmWdBO2X5hPrLcu8cVP8fy28w==",
            "dev": true,
            "engines": {
                "node": ">=6.0.0"
            }
        },
        "node_modules/@jridgewell/sourcemap-codec": {
            "version": "1.4.14",
            "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.14.tgz",
            "integrity": "sha512-XPSJHWmi394fuUuzDnGz1wiKqWfo1yXecHQMRf2l6hztTO+nPru658AyDngaBe7isIxEkRsPR3FZh+s7iVa4Uw==",
            "dev": true
        },
        "node_modules/@jridgewell/trace-mapping": {
            "version": "0.3.9",
            "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
            "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
            "dev": true,
            "dependencies": {
                "@jridgewell/resolve-uri": "^3.0.3",
                "@jridgewell/sourcemap-codec": "^1.4.10"
            }
        },
        "node_modules/@nodelib/fs.scandir": {
            "version": "2.1.5",
            "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
            "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
            "dev": true,
            "dependencies": {
                "@nodelib/fs.stat": "2.0.5",
                "run-parallel": "^1.1.9"
            },
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/@nodelib/fs.stat": {
            "version": "2.0.5",
            "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
            "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
            "dev": true,
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/@nodelib/fs.walk": {
            "version": "1.2.8",
            "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
            "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
            "dev": true,
            "dependencies": {
                "@nodelib/fs.scandir": "2.1.5",
                "fastq": "^1.6.0"
            },
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/@sindresorhus/is": {
            "version": "4.6.0",
            "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-4.6.0.tgz",
            "integrity": "sha512-t09vSN3MdfsyCHoFcTRCH/iUtG7OJ0CsjzB8cjAmKc/va/kIgeDI/TxsigdncE/4be734m0cvIYwNaV4i2XqAw==",
            "dev": true,
            "engines": {
                "node": ">=10"
            },
            "funding": {
                "url": "https://github.com/sindresorhus/is?sponsor=1"
            }
        },
        "node_modules/@szmarczak/http-timer": {
            "version": "4.0.6",
            "resolved": "https://registry.npmjs.org/@szmarczak/http-timer/-/http-timer-4.0.6.tgz",
            "integrity": "sha512-4BAffykYOgO+5nzBWYwE3W90sBgLJoUPRWWcL8wlyiM8IB8ipJz3UMJ9KXQd1RKQXpKp8Tutn80HZtWsu2u76w==",
            "dev": true,
            "dependencies": {
                "defer-to-connect": "^2.0.0"
            },
            "engines": {
                "node": ">=10"
            }
        },
        "node_modules/@tsconfig/node10": {
            "version": "1.0.9",
            "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.9.tgz",
            "integrity": "sha512-jNsYVVxU8v5g43Erja32laIDHXeoNvFEpX33OK4d6hljo3jDhCBDhx5dhCCTMWUojscpAagGiRkBKxpdl9fxqA==",
            "dev": true
        },
        "node_modules/@tsconfig/node12": {
            "version": "1.0.11",
            "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz",
            "integrity": "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==",
            "dev": true
        },
        "node_modules/@tsconfig/node14": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz",
            "integrity": "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==",
            "dev": true
        },
        "node_modules/@tsconfig/node16": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.3.tgz",
            "integrity": "sha512-yOlFc+7UtL/89t2ZhjPvvB/DeAr3r+Dq58IgzsFkOAvVC6NMJXmCGjbptdXdR9qsX7pKcTL+s87FtYREi2dEEQ==",
            "dev": true
        },
        "node_modules/@types/bn.js": {
            "version": "5.1.1",
            "resolved": "https://registry.npmjs.org/@types/bn.js/-/bn.js-5.1.1.tgz",
            "integrity": "sha512-qNrYbZqMx0uJAfKnKclPh+dTwK33KfLHYqtyODwd5HnXOjnkhc4qgn3BrK6RWyGZm5+sIFE7Q7Vz6QQtJB7w7g==",
            "dev": true,
            "dependencies": {
                "@types/node": "*"
            }
        },
        "node_modules/@types/cacheable-request": {
            "version": "6.0.3",
            "resolved": "https://registry.npmjs.org/@types/cacheable-request/-/cacheable-request-6.0.3.tgz",
            "integrity": "sha512-IQ3EbTzGxIigb1I3qPZc1rWJnH0BmSKv5QYTalEwweFvyBDLSAe24zP0le/hyi7ecGfZVlIVAg4BZqb8WBwKqw==",
            "dev": true,
            "dependencies": {
                "@types/http-cache-semantics": "*",
                "@types/keyv": "^3.1.4",
                "@types/node": "*",
                "@types/responselike": "^1.0.0"
            }
        },
        "node_modules/@types/http-cache-semantics": {
            "version": "4.0.1",
            "resolved": "https://registry.npmjs.org/@types/http-cache-semantics/-/http-cache-semantics-4.0.1.tgz",
            "integrity": "sha512-SZs7ekbP8CN0txVG2xVRH6EgKmEm31BOxA07vkFaETzZz1xh+cbt8BcI0slpymvwhx5dlFnQG2rTlPVQn+iRPQ==",
            "dev": true
        },
        "node_modules/@types/keyv": {
            "version": "3.1.4",
            "resolved": "https://registry.npmjs.org/@types/keyv/-/keyv-3.1.4.tgz",
            "integrity": "sha512-BQ5aZNSCpj7D6K2ksrRCTmKRLEpnPvWDiLPfoGyhZ++8YtiK9d/3DBKPJgry359X/P1PfruyYwvnvwFjuEiEIg==",
            "dev": true,
            "dependencies": {
                "@types/node": "*"
            }
        },
        "node_modules/@types/node": {
            "version": "18.11.17",
            "resolved": "https://registry.npmjs.org/@types/node/-/node-18.11.17.tgz",
            "integrity": "sha512-HJSUJmni4BeDHhfzn6nF0sVmd1SMezP7/4F0Lq+aXzmp2xm9O7WXrUtHW/CHlYVtZUbByEvWidHqRtcJXGF2Ng==",
            "dev": true
        },
        "node_modules/@types/responselike": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/@types/responselike/-/responselike-1.0.0.tgz",
            "integrity": "sha512-85Y2BjiufFzaMIlvJDvTTB8Fxl2xfLo4HgmHzVBz08w4wDePCTjYw66PdrolO0kzli3yam/YCgRufyo1DdQVTA==",
            "dev": true,
            "dependencies": {
                "@types/node": "*"
            }
        },
        "node_modules/acorn": {
            "version": "8.8.1",
            "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.8.1.tgz",
            "integrity": "sha512-7zFpHzhnqYKrkYdUjF1HI1bzd0VygEGX8lFk4k5zVMqHEoES+P+7TKI+EvLO9WVMJ8eekdO0aDEK044xTXwPPA==",
            "dev": true,
            "bin": {
                "acorn": "bin/acorn"
            },
            "engines": {
                "node": ">=0.4.0"
            }
        },
        "node_modules/acorn-walk": {
            "version": "8.2.0",
            "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.2.0.tgz",
            "integrity": "sha512-k+iyHEuPgSw6SbuDpGQM+06HQUa04DZ3o+F6CSzXMvvI5KMvnaEqXe+YVe555R9nn6GPt404fos4wcgpw12SDA==",
            "dev": true,
            "engines": {
                "node": ">=0.4.0"
            }
        },
        "node_modules/aggregate-error": {
            "version": "4.0.1",
            "resolved": "https://registry.npmjs.org/aggregate-error/-/aggregate-error-4.0.1.tgz",
            "integrity": "sha512-0poP0T7el6Vq3rstR8Mn4V/IQrpBLO6POkUSrN7RhyY+GF/InCFShQzsQ39T25gkHhLgSLByyAz+Kjb+c2L98w==",
            "dev": true,
            "dependencies": {
                "clean-stack": "^4.0.0",
                "indent-string": "^5.0.0"
            },
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/ansi-regex": {
            "version": "6.0.1",
            "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
            "integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==",
            "dev": true,
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/chalk/ansi-regex?sponsor=1"
            }
        },
        "node_modules/ansi-styles": {
            "version": "6.2.1",
            "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
            "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
            "dev": true,
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/chalk/ansi-styles?sponsor=1"
            }
        },
        "node_modules/anymatch": {
            "version": "3.1.3",
            "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
            "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
            "dev": true,
            "dependencies": {
                "normalize-path": "^3.0.0",
                "picomatch": "^2.0.4"
            },
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/arg": {
            "version": "4.1.3",
            "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
            "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==",
            "dev": true
        },
        "node_modules/argparse": {
            "version": "1.0.10",
            "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
            "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
            "dev": true,
            "dependencies": {
                "sprintf-js": "~1.0.2"
            }
        },
        "node_modules/array-find-index": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/array-find-index/-/array-find-index-1.0.2.tgz",
            "integrity": "sha512-M1HQyIXcBGtVywBt8WVdim+lrNaK7VHp99Qt5pSNziXznKHViIBbXWtfRTpEFpF/c4FdfxNAsCCwPp5phBYJtw==",
            "dev": true,
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/array-union": {
            "version": "2.1.0",
            "resolved": "https://registry.npmjs.org/array-union/-/array-union-2.1.0.tgz",
            "integrity": "sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==",
            "dev": true,
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/arrgv": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/arrgv/-/arrgv-1.0.2.tgz",
            "integrity": "sha512-a4eg4yhp7mmruZDQFqVMlxNRFGi/i1r87pt8SDHy0/I8PqSXoUTlWZRdAZo0VXgvEARcujbtTk8kiZRi1uDGRw==",
            "dev": true,
            "engines": {
                "node": ">=8.0.0"
            }
        },
        "node_modules/arrify": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/arrify/-/arrify-3.0.0.tgz",
            "integrity": "sha512-tLkvA81vQG/XqE2mjDkGQHoOINtMHtysSnemrmoGe6PydDPMRbVugqyk4A6V/WDWEfm3l+0d8anA9r8cv/5Jaw==",
            "dev": true,
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/ava": {
            "version": "4.3.3",
            "resolved": "https://registry.npmjs.org/ava/-/ava-4.3.3.tgz",
            "integrity": "sha512-9Egq/d9R74ExrWohHeqUlexjDbgZJX5jA1Wq4KCTqc3wIfpGEK79zVy4rBtofJ9YKIxs4PzhJ8BgbW5PlAYe6w==",
            "dev": true,
            "dependencies": {
                "acorn": "^8.7.1",
                "acorn-walk": "^8.2.0",
                "ansi-styles": "^6.1.0",
                "arrgv": "^1.0.2",
                "arrify": "^3.0.0",
                "callsites": "^4.0.0",
                "cbor": "^8.1.0",
                "chalk": "^5.0.1",
                "chokidar": "^3.5.3",
                "chunkd": "^2.0.1",
                "ci-info": "^3.3.1",
                "ci-parallel-vars": "^1.0.1",
                "clean-yaml-object": "^0.1.0",
                "cli-truncate": "^3.1.0",
                "code-excerpt": "^4.0.0",
                "common-path-prefix": "^3.0.0",
                "concordance": "^5.0.4",
                "currently-unhandled": "^0.4.1",
                "debug": "^4.3.4",
                "del": "^6.1.1",
                "emittery": "^0.11.0",
                "figures": "^4.0.1",
                "globby": "^13.1.1",
                "ignore-by-default": "^2.1.0",
                "indent-string": "^5.0.0",
                "is-error": "^2.2.2",
                "is-plain-object": "^5.0.0",
                "is-promise": "^4.0.0",
                "matcher": "^5.0.0",
                "mem": "^9.0.2",
                "ms": "^2.1.3",
                "p-event": "^5.0.1",
                "p-map": "^5.4.0",
                "picomatch": "^2.3.1",
                "pkg-conf": "^4.0.0",
                "plur": "^5.1.0",
                "pretty-ms": "^7.0.1",
                "resolve-cwd": "^3.0.0",
                "slash": "^3.0.0",
                "stack-utils": "^2.0.5",
                "strip-ansi": "^7.0.1",
                "supertap": "^3.0.1",
                "temp-dir": "^2.0.0",
                "write-file-atomic": "^4.0.1",
                "yargs": "^17.5.1"
            },
            "bin": {
                "ava": "entrypoints/cli.mjs"
            },
            "engines": {
                "node": ">=12.22 <13 || >=14.17 <15 || >=16.4 <17 || >=18"
            },
            "peerDependencies": {
                "@ava/typescript": "*"
            },
            "peerDependenciesMeta": {
                "@ava/typescript": {
                    "optional": true
                }
            }
        },
        "node_modules/balanced-match": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
            "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
            "dev": true
        },
        "node_modules/base-x": {
            "version": "3.0.9",
            "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
            "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
            "dev": true,
            "dependencies": {
                "safe-buffer": "^5.0.1"
            }
        },
        "node_modules/base64url": {
            "version": "3.0.1",
            "resolved": "https://registry.npmjs.org/base64url/-/base64url-3.0.1.tgz",
            "integrity": "sha512-ir1UPr3dkwexU7FdV8qBBbNDRUhMmIekYMFZfi+C/sLNnRESKPl23nB9b2pltqfOQNnGzsDdId90AEtG5tCx4A==",
            "dev": true,
            "engines": {
                "node": ">=6.0.0"
            }
        },
        "node_modules/binary-extensions": {
            "version": "2.2.0",
            "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
            "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
            "dev": true,
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/blueimp-md5": {
            "version": "2.19.0",
            "resolved": "https://registry.npmjs.org/blueimp-md5/-/blueimp-md5-2.19.0.tgz",
            "integrity": "sha512-DRQrD6gJyy8FbiE4s+bDoXS9hiW3Vbx5uCdwvcCf3zLHL+Iv7LtGHLpr+GZV8rHG8tK766FGYBwRbu8pELTt+w==",
            "dev": true
        },
        "node_modules/bn.js": {
            "version": "5.2.1",
            "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.1.tgz",
            "integrity": "sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ==",
            "dev": true
        },
        "node_modules/borsh": {
            "version": "0.5.0",
            "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.5.0.tgz",
            "integrity": "sha512-p9w/qGBeeFdUf2GPBPHdX5JQyez8K5VtoFN7PqSfmR+cVUMSmcwAKhP9n2aXoDSKbtS7xZlZt3MVnrJL7GdYhg==",
            "dev": true,
            "dependencies": {
                "bn.js": "^5.2.0",
                "bs58": "^4.0.0",
                "text-encoding-utf-8": "^1.0.2"
            }
        },
        "node_modules/brace-expansion": {
            "version": "1.1.11",
            "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
            "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
            "dev": true,
            "dependencies": {
                "balanced-match": "^1.0.0",
                "concat-map": "0.0.1"
            }
        },
        "node_modules/braces": {
            "version": "3.0.2",
            "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
            "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
            "dev": true,
            "dependencies": {
                "fill-range": "^7.0.1"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/bs58": {
            "version": "4.0.1",
            "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
            "integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
            "dev": true,
            "dependencies": {
                "base-x": "^3.0.2"
            }
        },
        "node_modules/cacheable-lookup": {
            "version": "5.0.4",
            "resolved": "https://registry.npmjs.org/cacheable-lookup/-/cacheable-lookup-5.0.4.tgz",
            "integrity": "sha512-2/kNscPhpcxrOigMZzbiWF7dz8ilhb/nIHU3EyZiXWXpeq/au8qJ8VhdftMkty3n7Gj6HIGalQG8oiBNB3AJgA==",
            "dev": true,
            "engines": {
                "node": ">=10.6.0"
            }
        },
        "node_modules/cacheable-request": {
            "version": "7.0.2",
            "resolved": "https://registry.npmjs.org/cacheable-request/-/cacheable-request-7.0.2.tgz",
            "integrity": "sha512-pouW8/FmiPQbuGpkXQ9BAPv/Mo5xDGANgSNXzTzJ8DrKGuXOssM4wIQRjfanNRh3Yu5cfYPvcorqbhg2KIJtew==",
            "dev": true,
            "dependencies": {
                "clone-response": "^1.0.2",
                "get-stream": "^5.1.0",
                "http-cache-semantics": "^4.0.0",
                "keyv": "^4.0.0",
                "lowercase-keys": "^2.0.0",
                "normalize-url": "^6.0.1",
                "responselike": "^2.0.0"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/callsites": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/callsites/-/callsites-4.0.0.tgz",
            "integrity": "sha512-y3jRROutgpKdz5vzEhWM34TidDU8vkJppF8dszITeb1PQmSqV3DTxyV8G/lyO/DNvtE1YTedehmw9MPZsCBHxQ==",
            "dev": true,
            "engines": {
                "node": ">=12.20"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/capability": {
            "version": "0.2.5",
            "resolved": "https://registry.npmjs.org/capability/-/capability-0.2.5.tgz",
            "integrity": "sha512-rsJZYVCgXd08sPqwmaIqjAd5SUTfonV0z/gDJ8D6cN8wQphky1kkAYEqQ+hmDxTw7UihvBfjUVUSY+DBEe44jg==",
            "dev": true
        },
        "node_modules/cbor": {
            "version": "8.1.0",
            "resolved": "https://registry.npmjs.org/cbor/-/cbor-8.1.0.tgz",
            "integrity": "sha512-DwGjNW9omn6EwP70aXsn7FQJx5kO12tX0bZkaTjzdVFM6/7nhA4t0EENocKGx6D2Bch9PE2KzCUf5SceBdeijg==",
            "dev": true,
            "dependencies": {
                "nofilter": "^3.1.0"
            },
            "engines": {
                "node": ">=12.19"
            }
        },
        "node_modules/chalk": {
            "version": "5.2.0",
            "resolved": "https://registry.npmjs.org/chalk/-/chalk-5.2.0.tgz",
            "integrity": "sha512-ree3Gqw/nazQAPuJJEy+avdl7QfZMcUvmHIKgEZkGL+xOBzRvup5Hxo6LHuMceSxOabuJLJm5Yp/92R9eMmMvA==",
            "dev": true,
            "engines": {
                "node": "^12.17.0 || ^14.13 || >=16.0.0"
            },
            "funding": {
                "url": "https://github.com/chalk/chalk?sponsor=1"
            }
        },
        "node_modules/chokidar": {
            "version": "3.5.3",
            "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
            "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
            "dev": true,
            "funding": [
                {
                    "type": "individual",
                    "url": "https://paulmillr.com/funding/"
                }
            ],
            "dependencies": {
                "anymatch": "~3.1.2",
                "braces": "~3.0.2",
                "glob-parent": "~5.1.2",
                "is-binary-path": "~2.1.0",
                "is-glob": "~4.0.1",
                "normalize-path": "~3.0.0",
                "readdirp": "~3.6.0"
            },
            "engines": {
                "node": ">= 8.10.0"
            },
            "optionalDependencies": {
                "fsevents": "~2.3.2"
            }
        },
        "node_modules/chownr": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
            "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==",
            "dev": true,
            "engines": {
                "node": ">=10"
            }
        },
        "node_modules/chunkd": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/chunkd/-/chunkd-2.0.1.tgz",
            "integrity": "sha512-7d58XsFmOq0j6el67Ug9mHf9ELUXsQXYJBkyxhH/k+6Ke0qXRnv0kbemx+Twc6fRJ07C49lcbdgm9FL1Ei/6SQ==",
            "dev": true
        },
        "node_modules/ci-info": {
            "version": "3.7.0",
            "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.7.0.tgz",
            "integrity": "sha512-2CpRNYmImPx+RXKLq6jko/L07phmS9I02TyqkcNU20GCF/GgaWvc58hPtjxDX8lPpkdwc9sNh72V9k00S7ezog==",
            "dev": true,
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/ci-parallel-vars": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/ci-parallel-vars/-/ci-parallel-vars-1.0.1.tgz",
            "integrity": "sha512-uvzpYrpmidaoxvIQHM+rKSrigjOe9feHYbw4uOI2gdfe1C3xIlxO+kVXq83WQWNniTf8bAxVpy+cQeFQsMERKg==",
            "dev": true
        },
        "node_modules/clean-stack": {
            "version": "4.2.0",
            "resolved": "https://registry.npmjs.org/clean-stack/-/clean-stack-4.2.0.tgz",
            "integrity": "sha512-LYv6XPxoyODi36Dp976riBtSY27VmFo+MKqEU9QCCWyTrdEPDog+RWA7xQWHi6Vbp61j5c4cdzzX1NidnwtUWg==",
            "dev": true,
            "dependencies": {
                "escape-string-regexp": "5.0.0"
            },
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/clean-yaml-object": {
            "version": "0.1.0",
            "resolved": "https://registry.npmjs.org/clean-yaml-object/-/clean-yaml-object-0.1.0.tgz",
            "integrity": "sha512-3yONmlN9CSAkzNwnRCiJQ7Q2xK5mWuEfL3PuTZcAUzhObbXsfsnMptJzXwz93nc5zn9V9TwCVMmV7w4xsm43dw==",
            "dev": true,
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/cli-truncate": {
            "version": "3.1.0",
            "resolved": "https://registry.npmjs.org/cli-truncate/-/cli-truncate-3.1.0.tgz",
            "integrity": "sha512-wfOBkjXteqSnI59oPcJkcPl/ZmwvMMOj340qUIY1SKZCv0B9Cf4D4fAucRkIKQmsIuYK3x1rrgU7MeGRruiuiA==",
            "dev": true,
            "dependencies": {
                "slice-ansi": "^5.0.0",
                "string-width": "^5.0.0"
            },
            "engines": {
                "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/cliui": {
            "version": "8.0.1",
            "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
            "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
            "dev": true,
            "dependencies": {
                "string-width": "^4.2.0",
                "strip-ansi": "^6.0.1",
                "wrap-ansi": "^7.0.0"
            },
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/cliui/node_modules/ansi-regex": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
            "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
            "dev": true,
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/cliui/node_modules/emoji-regex": {
            "version": "8.0.0",
            "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
            "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
            "dev": true
        },
        "node_modules/cliui/node_modules/is-fullwidth-code-point": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
            "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
            "dev": true,
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/cliui/node_modules/string-width": {
            "version": "4.2.3",
            "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
            "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
            "dev": true,
            "dependencies": {
                "emoji-regex": "^8.0.0",
                "is-fullwidth-code-point": "^3.0.0",
                "strip-ansi": "^6.0.1"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/cliui/node_modules/strip-ansi": {
            "version": "6.0.1",
            "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
            "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
            "dev": true,
            "dependencies": {
                "ansi-regex": "^5.0.1"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/clone-response": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/clone-response/-/clone-response-1.0.3.tgz",
            "integrity": "sha512-ROoL94jJH2dUVML2Y/5PEDNaSHgeOdSDicUyS7izcF63G6sTc/FTjLub4b8Il9S8S0beOfYt0TaA5qvFK+w0wA==",
            "dev": true,
            "dependencies": {
                "mimic-response": "^1.0.0"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/code-excerpt": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/code-excerpt/-/code-excerpt-4.0.0.tgz",
            "integrity": "sha512-xxodCmBen3iy2i0WtAK8FlFNrRzjUqjRsMfho58xT/wvZU1YTM3fCnRjcy1gJPMepaRlgm/0e6w8SpWHpn3/cA==",
            "dev": true,
            "dependencies": {
                "convert-to-spaces": "^2.0.1"
            },
            "engines": {
                "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
            }
        },
        "node_modules/color-convert": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
            "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
            "dev": true,
            "dependencies": {
                "color-name": "~1.1.4"
            },
            "engines": {
                "node": ">=7.0.0"
            }
        },
        "node_modules/color-name": {
            "version": "1.1.4",
            "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
            "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
            "dev": true
        },
        "node_modules/common-path-prefix": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/common-path-prefix/-/common-path-prefix-3.0.0.tgz",
            "integrity": "sha512-QE33hToZseCH3jS0qN96O/bSh3kaw/h+Tq7ngyY9eWDUnTlTNUyqfqvCXioLe5Na5jFsL78ra/wuBU4iuEgd4w==",
            "dev": true
        },
        "node_modules/concat-map": {
            "version": "0.0.1",
            "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
            "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
            "dev": true
        },
        "node_modules/concordance": {
            "version": "5.0.4",
            "resolved": "https://registry.npmjs.org/concordance/-/concordance-5.0.4.tgz",
            "integrity": "sha512-OAcsnTEYu1ARJqWVGwf4zh4JDfHZEaSNlNccFmt8YjB2l/n19/PF2viLINHc57vO4FKIAFl2FWASIGZZWZ2Kxw==",
            "dev": true,
            "dependencies": {
                "date-time": "^3.1.0",
                "esutils": "^2.0.3",
                "fast-diff": "^1.2.0",
                "js-string-escape": "^1.0.1",
                "lodash": "^4.17.15",
                "md5-hex": "^3.0.1",
                "semver": "^7.3.2",
                "well-known-symbols": "^2.0.0"
            },
            "engines": {
                "node": ">=10.18.0 <11 || >=12.14.0 <13 || >=14"
            }
        },
        "node_modules/convert-to-spaces": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/convert-to-spaces/-/convert-to-spaces-2.0.1.tgz",
            "integrity": "sha512-rcQ1bsQO9799wq24uE5AM2tAILy4gXGIK/njFWcVQkGNZ96edlpY+A7bjwvzjYvLDyzmG1MmMLZhpcsb+klNMQ==",
            "dev": true,
            "engines": {
                "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
            }
        },
        "node_modules/create-require": {
            "version": "1.1.1",
            "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
            "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==",
            "dev": true
        },
        "node_modules/currently-unhandled": {
            "version": "0.4.1",
            "resolved": "https://registry.npmjs.org/currently-unhandled/-/currently-unhandled-0.4.1.tgz",
            "integrity": "sha512-/fITjgjGU50vjQ4FH6eUoYu+iUoUKIXws2hL15JJpIR+BbTxaXQsMuuyjtNh2WqsSBS5nsaZHFsFecyw5CCAng==",
            "dev": true,
            "dependencies": {
                "array-find-index": "^1.0.1"
            },
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/date-time": {
            "version": "3.1.0",
            "resolved": "https://registry.npmjs.org/date-time/-/date-time-3.1.0.tgz",
            "integrity": "sha512-uqCUKXE5q1PNBXjPqvwhwJf9SwMoAHBgWJ6DcrnS5o+W2JOiIILl0JEdVD8SGujrNS02GGxgwAg2PN2zONgtjg==",
            "dev": true,
            "dependencies": {
                "time-zone": "^1.0.0"
            },
            "engines": {
                "node": ">=6"
            }
        },
        "node_modules/debug": {
            "version": "4.3.4",
            "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
            "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
            "dev": true,
            "dependencies": {
                "ms": "2.1.2"
            },
            "engines": {
                "node": ">=6.0"
            },
            "peerDependenciesMeta": {
                "supports-color": {
                    "optional": true
                }
            }
        },
        "node_modules/debug/node_modules/ms": {
            "version": "2.1.2",
            "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
            "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
            "dev": true
        },
        "node_modules/decompress-response": {
            "version": "6.0.0",
            "resolved": "https://registry.npmjs.org/decompress-response/-/decompress-response-6.0.0.tgz",
            "integrity": "sha512-aW35yZM6Bb/4oJlZncMH2LCoZtJXTRxES17vE3hoRiowU2kWHaJKFkSBDnDR+cm9J+9QhXmREyIfv0pji9ejCQ==",
            "dev": true,
            "dependencies": {
                "mimic-response": "^3.1.0"
            },
            "engines": {
                "node": ">=10"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/decompress-response/node_modules/mimic-response": {
            "version": "3.1.0",
            "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-3.1.0.tgz",
            "integrity": "sha512-z0yWI+4FDrrweS8Zmt4Ej5HdJmky15+L2e6Wgn3+iK5fWzb6T3fhNFq2+MeTRb064c6Wr4N/wv0DzQTjNzHNGQ==",
            "dev": true,
            "engines": {
                "node": ">=10"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/defer-to-connect": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/defer-to-connect/-/defer-to-connect-2.0.1.tgz",
            "integrity": "sha512-4tvttepXG1VaYGrRibk5EwJd1t4udunSOVMdLSAL6mId1ix438oPwPZMALY41FCijukO1L0twNcGsdzS7dHgDg==",
            "dev": true,
            "engines": {
                "node": ">=10"
            }
        },
        "node_modules/del": {
            "version": "6.1.1",
            "resolved": "https://registry.npmjs.org/del/-/del-6.1.1.tgz",
            "integrity": "sha512-ua8BhapfP0JUJKC/zV9yHHDW/rDoDxP4Zhn3AkA6/xT6gY7jYXJiaeyBZznYVujhZZET+UgcbZiQ7sN3WqcImg==",
            "dev": true,
            "dependencies": {
                "globby": "^11.0.1",
                "graceful-fs": "^4.2.4",
                "is-glob": "^4.0.1",
                "is-path-cwd": "^2.2.0",
                "is-path-inside": "^3.0.2",
                "p-map": "^4.0.0",
                "rimraf": "^3.0.2",
                "slash": "^3.0.0"
            },
            "engines": {
                "node": ">=10"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/del/node_modules/aggregate-error": {
            "version": "3.1.0",
            "resolved": "https://registry.npmjs.org/aggregate-error/-/aggregate-error-3.1.0.tgz",
            "integrity": "sha512-4I7Td01quW/RpocfNayFdFVk1qSuoh0E7JrbRJ16nH01HhKFQ88INq9Sd+nd72zqRySlr9BmDA8xlEJ6vJMrYA==",
            "dev": true,
            "dependencies": {
                "clean-stack": "^2.0.0",
                "indent-string": "^4.0.0"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/del/node_modules/clean-stack": {
            "version": "2.2.0",
            "resolved": "https://registry.npmjs.org/clean-stack/-/clean-stack-2.2.0.tgz",
            "integrity": "sha512-4diC9HaTE+KRAMWhDhrGOECgWZxoevMc5TlkObMqNSsVU62PYzXZ/SMTjzyGAFF1YusgxGcSWTEXBhp0CPwQ1A==",
            "dev": true,
            "engines": {
                "node": ">=6"
            }
        },
        "node_modules/del/node_modules/globby": {
            "version": "11.1.0",
            "resolved": "https://registry.npmjs.org/globby/-/globby-11.1.0.tgz",
            "integrity": "sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==",
            "dev": true,
            "dependencies": {
                "array-union": "^2.1.0",
                "dir-glob": "^3.0.1",
                "fast-glob": "^3.2.9",
                "ignore": "^5.2.0",
                "merge2": "^1.4.1",
                "slash": "^3.0.0"
            },
            "engines": {
                "node": ">=10"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/del/node_modules/indent-string": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/indent-string/-/indent-string-4.0.0.tgz",
            "integrity": "sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg==",
            "dev": true,
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/del/node_modules/p-map": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/p-map/-/p-map-4.0.0.tgz",
            "integrity": "sha512-/bjOqmgETBYB5BoEeGVea8dmvHb2m9GLy1E9W43yeyfP6QQCZGFNa+XRceJEuDB6zqr+gKpIAmlLebMpykw/MQ==",
            "dev": true,
            "dependencies": {
                "aggregate-error": "^3.0.0"
            },
            "engines": {
                "node": ">=10"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/depd": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
            "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
            "dev": true,
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/diff": {
            "version": "4.0.2",
            "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
            "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==",
            "dev": true,
            "engines": {
                "node": ">=0.3.1"
            }
        },
        "node_modules/dir-glob": {
            "version": "3.0.1",
            "resolved": "https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz",
            "integrity": "sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==",
            "dev": true,
            "dependencies": {
                "path-type": "^4.0.0"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/eastasianwidth": {
            "version": "0.2.0",
            "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
            "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
            "dev": true
        },
        "node_modules/emittery": {
            "version": "0.11.0",
            "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.11.0.tgz",
            "integrity": "sha512-S/7tzL6v5i+4iJd627Nhv9cLFIo5weAIlGccqJFpnBoDB8U1TF2k5tez4J/QNuxyyhWuFqHg1L84Kd3m7iXg6g==",
            "dev": true,
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/sindresorhus/emittery?sponsor=1"
            }
        },
        "node_modules/emoji-regex": {
            "version": "9.2.2",
            "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
            "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
            "dev": true
        },
        "node_modules/end-of-stream": {
            "version": "1.4.4",
            "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
            "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
            "dev": true,
            "dependencies": {
                "once": "^1.4.0"
            }
        },
        "node_modules/error-polyfill": {
            "version": "0.1.3",
            "resolved": "https://registry.npmjs.org/error-polyfill/-/error-polyfill-0.1.3.tgz",
            "integrity": "sha512-XHJk60ufE+TG/ydwp4lilOog549iiQF2OAPhkk9DdiYWMrltz5yhDz/xnKuenNwP7gy3dsibssO5QpVhkrSzzg==",
            "dev": true,
            "dependencies": {
                "capability": "^0.2.5",
                "o3": "^1.0.3",
                "u3": "^0.1.1"
            }
        },
        "node_modules/escalade": {
            "version": "3.1.1",
            "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
            "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
            "dev": true,
            "engines": {
                "node": ">=6"
            }
        },
        "node_modules/escape-string-regexp": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-5.0.0.tgz",
            "integrity": "sha512-/veY75JbMK4j1yjvuUxuVsiS/hr/4iHs9FTT6cgTexxdE0Ly/glccBAkloH/DofkjRbZU3bnoj38mOmhkZ0lHw==",
            "dev": true,
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/esprima": {
            "version": "4.0.1",
            "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
            "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
            "dev": true,
            "bin": {
                "esparse": "bin/esparse.js",
                "esvalidate": "bin/esvalidate.js"
            },
            "engines": {
                "node": ">=4"
            }
        },
        "node_modules/esutils": {
            "version": "2.0.3",
            "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
            "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
            "dev": true,
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/fast-diff": {
            "version": "1.2.0",
            "resolved": "https://registry.npmjs.org/fast-diff/-/fast-diff-1.2.0.tgz",
            "integrity": "sha512-xJuoT5+L99XlZ8twedaRf6Ax2TgQVxvgZOYoPKqZufmJib0tL2tegPBOZb1pVNgIhlqDlA0eO0c3wBvQcmzx4w==",
            "dev": true
        },
        "node_modules/fast-glob": {
            "version": "3.2.12",
            "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.2.12.tgz",
            "integrity": "sha512-DVj4CQIYYow0BlaelwK1pHl5n5cRSJfM60UA0zK891sVInoPri2Ekj7+e1CT3/3qxXenpI+nBBmQAcJPJgaj4w==",
            "dev": true,
            "dependencies": {
                "@nodelib/fs.stat": "^2.0.2",
                "@nodelib/fs.walk": "^1.2.3",
                "glob-parent": "^5.1.2",
                "merge2": "^1.3.0",
                "micromatch": "^4.0.4"
            },
            "engines": {
                "node": ">=8.6.0"
            }
        },
        "node_modules/fastq": {
            "version": "1.14.0",
            "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.14.0.tgz",
            "integrity": "sha512-eR2D+V9/ExcbF9ls441yIuN6TI2ED1Y2ZcA5BmMtJsOkWOFRJQ0Jt0g1UwqXJJVAb+V+umH5Dfr8oh4EVP7VVg==",
            "dev": true,
            "dependencies": {
                "reusify": "^1.0.4"
            }
        },
        "node_modules/figures": {
            "version": "4.0.1",
            "resolved": "https://registry.npmjs.org/figures/-/figures-4.0.1.tgz",
            "integrity": "sha512-rElJwkA/xS04Vfg+CaZodpso7VqBknOYbzi6I76hI4X80RUjkSxO2oAyPmGbuXUppywjqndOrQDl817hDnI++w==",
            "dev": true,
            "dependencies": {
                "escape-string-regexp": "^5.0.0",
                "is-unicode-supported": "^1.2.0"
            },
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/fill-range": {
            "version": "7.0.1",
            "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
            "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
            "dev": true,
            "dependencies": {
                "to-regex-range": "^5.0.1"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/find-up": {
            "version": "6.3.0",
            "resolved": "https://registry.npmjs.org/find-up/-/find-up-6.3.0.tgz",
            "integrity": "sha512-v2ZsoEuVHYy8ZIlYqwPe/39Cy+cFDzp4dXPaxNvkEuouymu+2Jbz0PxpKarJHYJTmv2HWT3O382qY8l4jMWthw==",
            "dev": true,
            "dependencies": {
                "locate-path": "^7.1.0",
                "path-exists": "^5.0.0"
            },
            "engines": {
                "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/fs-extra": {
            "version": "10.1.0",
            "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
            "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
            "dev": true,
            "dependencies": {
                "graceful-fs": "^4.2.0",
                "jsonfile": "^6.0.1",
                "universalify": "^2.0.0"
            },
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/fs-minipass": {
            "version": "2.1.0",
            "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
            "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
            "dev": true,
            "dependencies": {
                "minipass": "^3.0.0"
            },
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/fs-minipass/node_modules/minipass": {
            "version": "3.3.6",
            "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
            "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
            "dev": true,
            "dependencies": {
                "yallist": "^4.0.0"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/fs.realpath": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
            "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
            "dev": true
        },
        "node_modules/fsevents": {
            "version": "2.3.2",
            "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
            "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
            "dev": true,
            "hasInstallScript": true,
            "optional": true,
            "os": [
                "darwin"
            ],
            "engines": {
                "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
            }
        },
        "node_modules/get-caller-file": {
            "version": "2.0.5",
            "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
            "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
            "dev": true,
            "engines": {
                "node": "6.* || 8.* || >= 10.*"
            }
        },
        "node_modules/get-stream": {
            "version": "5.2.0",
            "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
            "integrity": "sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
            "dev": true,
            "dependencies": {
                "pump": "^3.0.0"
            },
            "engines": {
                "node": ">=8"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/glob": {
            "version": "7.2.3",
            "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
            "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
            "dev": true,
            "dependencies": {
                "fs.realpath": "^1.0.0",
                "inflight": "^1.0.4",
                "inherits": "2",
                "minimatch": "^3.1.1",
                "once": "^1.3.0",
                "path-is-absolute": "^1.0.0"
            },
            "engines": {
                "node": "*"
            },
            "funding": {
                "url": "https://github.com/sponsors/isaacs"
            }
        },
        "node_modules/glob-parent": {
            "version": "5.1.2",
            "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
            "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
            "dev": true,
            "dependencies": {
                "is-glob": "^4.0.1"
            },
            "engines": {
                "node": ">= 6"
            }
        },
        "node_modules/globby": {
            "version": "13.1.3",
            "resolved": "https://registry.npmjs.org/globby/-/globby-13.1.3.tgz",
            "integrity": "sha512-8krCNHXvlCgHDpegPzleMq07yMYTO2sXKASmZmquEYWEmCx6J5UTRbp5RwMJkTJGtcQ44YpiUYUiN0b9mzy8Bw==",
            "dev": true,
            "dependencies": {
                "dir-glob": "^3.0.1",
                "fast-glob": "^3.2.11",
                "ignore": "^5.2.0",
                "merge2": "^1.4.1",
                "slash": "^4.0.0"
            },
            "engines": {
                "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/globby/node_modules/slash": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/slash/-/slash-4.0.0.tgz",
            "integrity": "sha512-3dOsAHXXUkQTpOYcoAxLIorMTp4gIQr5IW3iVb7A7lFIp0VHhnynm9izx6TssdrIcVIESAlVjtnO2K8bg+Coew==",
            "dev": true,
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/got": {
            "version": "11.8.6",
            "resolved": "https://registry.npmjs.org/got/-/got-11.8.6.tgz",
            "integrity": "sha512-6tfZ91bOr7bOXnK7PRDCGBLa1H4U080YHNaAQ2KsMGlLEzRbk44nsZF2E1IeRc3vtJHPVbKCYgdFbaGO2ljd8g==",
            "dev": true,
            "dependencies": {
                "@sindresorhus/is": "^4.0.0",
                "@szmarczak/http-timer": "^4.0.5",
                "@types/cacheable-request": "^6.0.1",
                "@types/responselike": "^1.0.0",
                "cacheable-lookup": "^5.0.3",
                "cacheable-request": "^7.0.2",
                "decompress-response": "^6.0.0",
                "http2-wrapper": "^1.0.0-beta.5.2",
                "lowercase-keys": "^2.0.0",
                "p-cancelable": "^2.0.0",
                "responselike": "^2.0.0"
            },
            "engines": {
                "node": ">=10.19.0"
            },
            "funding": {
                "url": "https://github.com/sindresorhus/got?sponsor=1"
            }
        },
        "node_modules/graceful-fs": {
            "version": "4.2.10",
            "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.10.tgz",
            "integrity": "sha512-9ByhssR2fPVsNZj478qUUbKfmL0+t5BDVyjShtyZZLiK7ZDAArFFfopyOTj0M05wE2tJPisA4iTnnXl2YoPvOA==",
            "dev": true
        },
        "node_modules/http-cache-semantics": {
            "version": "4.1.0",
            "resolved": "https://registry.npmjs.org/http-cache-semantics/-/http-cache-semantics-4.1.0.tgz",
            "integrity": "sha512-carPklcUh7ROWRK7Cv27RPtdhYhUsela/ue5/jKzjegVvXDqM2ILE9Q2BGn9JZJh1g87cp56su/FgQSzcWS8cQ==",
            "dev": true
        },
        "node_modules/http-errors": {
            "version": "1.8.1",
            "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
            "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
            "dev": true,
            "dependencies": {
                "depd": "~1.1.2",
                "inherits": "2.0.4",
                "setprototypeof": "1.2.0",
                "statuses": ">= 1.5.0 < 2",
                "toidentifier": "1.0.1"
            },
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/http-errors/node_modules/depd": {
            "version": "1.1.2",
            "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
            "integrity": "sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ==",
            "dev": true,
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/http2-wrapper": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/http2-wrapper/-/http2-wrapper-1.0.3.tgz",
            "integrity": "sha512-V+23sDMr12Wnz7iTcDeJr3O6AIxlnvT/bmaAAAP/Xda35C90p9599p0F1eHR/N1KILWSoWVAiOMFjBBXaXSMxg==",
            "dev": true,
            "dependencies": {
                "quick-lru": "^5.1.1",
                "resolve-alpn": "^1.0.0"
            },
            "engines": {
                "node": ">=10.19.0"
            }
        },
        "node_modules/ignore": {
            "version": "5.2.4",
            "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.2.4.tgz",
            "integrity": "sha512-MAb38BcSbH0eHNBxn7ql2NH/kX33OkB3lZ1BNdh7ENeRChHTYsTvWrMubiIAMNS2llXEEgZ1MUOBtXChP3kaFQ==",
            "dev": true,
            "engines": {
                "node": ">= 4"
            }
        },
        "node_modules/ignore-by-default": {
            "version": "2.1.0",
            "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-2.1.0.tgz",
            "integrity": "sha512-yiWd4GVmJp0Q6ghmM2B/V3oZGRmjrKLXvHR3TE1nfoXsmoggllfZUQe74EN0fJdPFZu2NIvNdrMMLm3OsV7Ohw==",
            "dev": true,
            "engines": {
                "node": ">=10 <11 || >=12 <13 || >=14"
            }
        },
        "node_modules/imurmurhash": {
            "version": "0.1.4",
            "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
            "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
            "dev": true,
            "engines": {
                "node": ">=0.8.19"
            }
        },
        "node_modules/indent-string": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/indent-string/-/indent-string-5.0.0.tgz",
            "integrity": "sha512-m6FAo/spmsW2Ab2fU35JTYwtOKa2yAwXSwgjSv1TJzh4Mh7mC3lzAOVLBprb72XsTrgkEIsl7YrFNAiDiRhIGg==",
            "dev": true,
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/inflight": {
            "version": "1.0.6",
            "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
            "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
            "dev": true,
            "dependencies": {
                "once": "^1.3.0",
                "wrappy": "1"
            }
        },
        "node_modules/inherits": {
            "version": "2.0.4",
            "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
            "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
            "dev": true
        },
        "node_modules/irregular-plurals": {
            "version": "3.3.0",
            "resolved": "https://registry.npmjs.org/irregular-plurals/-/irregular-plurals-3.3.0.tgz",
            "integrity": "sha512-MVBLKUTangM3EfRPFROhmWQQKRDsrgI83J8GS3jXy+OwYqiR2/aoWndYQ5416jLE3uaGgLH7ncme3X9y09gZ3g==",
            "dev": true,
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/is-binary-path": {
            "version": "2.1.0",
            "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
            "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
            "dev": true,
            "dependencies": {
                "binary-extensions": "^2.0.0"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/is-error": {
            "version": "2.2.2",
            "resolved": "https://registry.npmjs.org/is-error/-/is-error-2.2.2.tgz",
            "integrity": "sha512-IOQqts/aHWbiisY5DuPJQ0gcbvaLFCa7fBa9xoLfxBZvQ+ZI/Zh9xoI7Gk+G64N0FdK4AbibytHht2tWgpJWLg==",
            "dev": true
        },
        "node_modules/is-extglob": {
            "version": "2.1.1",
            "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
            "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
            "dev": true,
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/is-fullwidth-code-point": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-4.0.0.tgz",
            "integrity": "sha512-O4L094N2/dZ7xqVdrXhh9r1KODPJpFms8B5sGdJLPy664AgvXsreZUyCQQNItZRDlYug4xStLjNp/sz3HvBowQ==",
            "dev": true,
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/is-glob": {
            "version": "4.0.3",
            "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
            "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
            "dev": true,
            "dependencies": {
                "is-extglob": "^2.1.1"
            },
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/is-number": {
            "version": "7.0.0",
            "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
            "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
            "dev": true,
            "engines": {
                "node": ">=0.12.0"
            }
        },
        "node_modules/is-path-cwd": {
            "version": "2.2.0",
            "resolved": "https://registry.npmjs.org/is-path-cwd/-/is-path-cwd-2.2.0.tgz",
            "integrity": "sha512-w942bTcih8fdJPJmQHFzkS76NEP8Kzzvmw92cXsazb8intwLqPibPPdXf4ANdKV3rYMuuQYGIWtvz9JilB3NFQ==",
            "dev": true,
            "engines": {
                "node": ">=6"
            }
        },
        "node_modules/is-path-inside": {
            "version": "3.0.3",
            "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
            "integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==",
            "dev": true,
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/is-plain-object": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/is-plain-object/-/is-plain-object-5.0.0.tgz",
            "integrity": "sha512-VRSzKkbMm5jMDoKLbltAkFQ5Qr7VDiTFGXxYFXXowVj387GeGNOCsOH6Msy00SGZ3Fp84b1Naa1psqgcCIEP5Q==",
            "dev": true,
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/is-promise": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/is-promise/-/is-promise-4.0.0.tgz",
            "integrity": "sha512-hvpoI6korhJMnej285dSg6nu1+e6uxs7zG3BYAm5byqDsgJNWwxzM6z6iZiAgQR4TJ30JmBTOwqZUw3WlyH3AQ==",
            "dev": true
        },
        "node_modules/is-unicode-supported": {
            "version": "1.3.0",
            "resolved": "https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-1.3.0.tgz",
            "integrity": "sha512-43r2mRvz+8JRIKnWJ+3j8JtjRKZ6GmjzfaE/qiBJnikNnYv/6bagRJ1kUhNk8R5EX/GkobD+r+sfxCPJsiKBLQ==",
            "dev": true,
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/js-sha256": {
            "version": "0.9.0",
            "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
            "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA==",
            "dev": true
        },
        "node_modules/js-string-escape": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/js-string-escape/-/js-string-escape-1.0.1.tgz",
            "integrity": "sha512-Smw4xcfIQ5LVjAOuJCvN/zIodzA/BBSsluuoSykP+lUvScIi4U6RJLfwHet5cxFnCswUjISV8oAXaqaJDY3chg==",
            "dev": true,
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/js-yaml": {
            "version": "3.14.1",
            "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
            "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
            "dev": true,
            "dependencies": {
                "argparse": "^1.0.7",
                "esprima": "^4.0.0"
            },
            "bin": {
                "js-yaml": "bin/js-yaml.js"
            }
        },
        "node_modules/json-buffer": {
            "version": "3.0.1",
            "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
            "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
            "dev": true
        },
        "node_modules/jsonfile": {
            "version": "6.1.0",
            "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
            "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
            "dev": true,
            "dependencies": {
                "universalify": "^2.0.0"
            },
            "optionalDependencies": {
                "graceful-fs": "^4.1.6"
            }
        },
        "node_modules/keyv": {
            "version": "4.5.2",
            "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.2.tgz",
            "integrity": "sha512-5MHbFaKn8cNSmVW7BYnijeAVlE4cYA/SVkifVgrh7yotnfhKmjuXpDKjrABLnT0SfHWV21P8ow07OGfRrNDg8g==",
            "dev": true,
            "dependencies": {
                "json-buffer": "3.0.1"
            }
        },
        "node_modules/load-json-file": {
            "version": "7.0.1",
            "resolved": "https://registry.npmjs.org/load-json-file/-/load-json-file-7.0.1.tgz",
            "integrity": "sha512-Gnxj3ev3mB5TkVBGad0JM6dmLiQL+o0t23JPBZ9sd+yvSLk05mFoqKBw5N8gbbkU4TNXyqCgIrl/VM17OgUIgQ==",
            "dev": true,
            "engines": {
                "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/locate-path": {
            "version": "7.1.1",
            "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-7.1.1.tgz",
            "integrity": "sha512-vJXaRMJgRVD3+cUZs3Mncj2mxpt5mP0EmNOsxRSZRMlbqjvxzDEOIUWXGmavo0ZC9+tNZCBLQ66reA11nbpHZg==",
            "dev": true,
            "dependencies": {
                "p-locate": "^6.0.0"
            },
            "engines": {
                "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/lodash": {
            "version": "4.17.21",
            "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
            "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
            "dev": true
        },
        "node_modules/lowercase-keys": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-2.0.0.tgz",
            "integrity": "sha512-tqNXrS78oMOE73NMxK4EMLQsQowWf8jKooH9g7xPavRT706R6bkQJ6DY2Te7QukaZsulxa30wQ7bk0pm4XiHmA==",
            "dev": true,
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/lru-cache": {
            "version": "6.0.0",
            "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
            "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
            "dev": true,
            "dependencies": {
                "yallist": "^4.0.0"
            },
            "engines": {
                "node": ">=10"
            }
        },
        "node_modules/make-error": {
            "version": "1.3.6",
            "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
            "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==",
            "dev": true
        },
        "node_modules/map-age-cleaner": {
            "version": "0.1.3",
            "resolved": "https://registry.npmjs.org/map-age-cleaner/-/map-age-cleaner-0.1.3.tgz",
            "integrity": "sha512-bJzx6nMoP6PDLPBFmg7+xRKeFZvFboMrGlxmNj9ClvX53KrmvM5bXFXEWjbz4cz1AFn+jWJ9z/DJSz7hrs0w3w==",
            "dev": true,
            "dependencies": {
                "p-defer": "^1.0.0"
            },
            "engines": {
                "node": ">=6"
            }
        },
        "node_modules/matcher": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/matcher/-/matcher-5.0.0.tgz",
            "integrity": "sha512-s2EMBOWtXFc8dgqvoAzKJXxNHibcdJMV0gwqKUaw9E2JBJuGUK7DrNKrA6g/i+v72TT16+6sVm5mS3thaMLQUw==",
            "dev": true,
            "dependencies": {
                "escape-string-regexp": "^5.0.0"
            },
            "engines": {
                "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/md5-hex": {
            "version": "3.0.1",
            "resolved": "https://registry.npmjs.org/md5-hex/-/md5-hex-3.0.1.tgz",
            "integrity": "sha512-BUiRtTtV39LIJwinWBjqVsU9xhdnz7/i889V859IBFpuqGAj6LuOvHv5XLbgZ2R7ptJoJaEcxkv88/h25T7Ciw==",
            "dev": true,
            "dependencies": {
                "blueimp-md5": "^2.10.0"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/mem": {
            "version": "9.0.2",
            "resolved": "https://registry.npmjs.org/mem/-/mem-9.0.2.tgz",
            "integrity": "sha512-F2t4YIv9XQUBHt6AOJ0y7lSmP1+cY7Fm1DRh9GClTGzKST7UWLMx6ly9WZdLH/G/ppM5RL4MlQfRT71ri9t19A==",
            "dev": true,
            "dependencies": {
                "map-age-cleaner": "^0.1.3",
                "mimic-fn": "^4.0.0"
            },
            "engines": {
                "node": ">=12.20"
            },
            "funding": {
                "url": "https://github.com/sindresorhus/mem?sponsor=1"
            }
        },
        "node_modules/merge2": {
            "version": "1.4.1",
            "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
            "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
            "dev": true,
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/micromatch": {
            "version": "4.0.5",
            "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.5.tgz",
            "integrity": "sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==",
            "dev": true,
            "dependencies": {
                "braces": "^3.0.2",
                "picomatch": "^2.3.1"
            },
            "engines": {
                "node": ">=8.6"
            }
        },
        "node_modules/mimic-fn": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-4.0.0.tgz",
            "integrity": "sha512-vqiC06CuhBTUdZH+RYl8sFrL096vA45Ok5ISO6sE/Mr1jRbGH4Csnhi8f3wKVl7x8mO4Au7Ir9D3Oyv1VYMFJw==",
            "dev": true,
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/mimic-response": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-1.0.1.tgz",
            "integrity": "sha512-j5EctnkH7amfV/q5Hgmoal1g2QHFJRraOtmx0JpIqkxhBhI/lJSl1nMpQ45hVarwNETOoWEimndZ4QK0RHxuxQ==",
            "dev": true,
            "engines": {
                "node": ">=4"
            }
        },
        "node_modules/minimatch": {
            "version": "3.1.2",
            "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
            "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
            "dev": true,
            "dependencies": {
                "brace-expansion": "^1.1.7"
            },
            "engines": {
                "node": "*"
            }
        },
        "node_modules/minipass": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/minipass/-/minipass-4.0.0.tgz",
            "integrity": "sha512-g2Uuh2jEKoht+zvO6vJqXmYpflPqzRBT+Th2h01DKh5z7wbY/AZ2gCQ78cP70YoHPyFdY30YBV5WxgLOEwOykw==",
            "dev": true,
            "dependencies": {
                "yallist": "^4.0.0"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/minizlib": {
            "version": "2.1.2",
            "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
            "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
            "dev": true,
            "dependencies": {
                "minipass": "^3.0.0",
                "yallist": "^4.0.0"
            },
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/minizlib/node_modules/minipass": {
            "version": "3.3.6",
            "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
            "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
            "dev": true,
            "dependencies": {
                "yallist": "^4.0.0"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/mkdirp": {
            "version": "1.0.4",
            "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
            "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
            "dev": true,
            "bin": {
                "mkdirp": "bin/cmd.js"
            },
            "engines": {
                "node": ">=10"
            }
        },
        "node_modules/ms": {
            "version": "2.1.3",
            "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
            "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
            "dev": true
        },
        "node_modules/mustache": {
            "version": "4.2.0",
            "resolved": "https://registry.npmjs.org/mustache/-/mustache-4.2.0.tgz",
            "integrity": "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ==",
            "dev": true,
            "bin": {
                "mustache": "bin/mustache"
            }
        },
        "node_modules/near-api-js": {
            "version": "0.44.2",
            "resolved": "https://registry.npmjs.org/near-api-js/-/near-api-js-0.44.2.tgz",
            "integrity": "sha512-eMnc4V+geggapEUa3nU2p8HSHn/njtloI4P2mceHQWO8vDE1NGpnAw8FuTBrLmXSgIv9m6oocgFc9t3VNf5zwg==",
            "dev": true,
            "dependencies": {
                "bn.js": "5.2.0",
                "borsh": "^0.6.0",
                "bs58": "^4.0.0",
                "depd": "^2.0.0",
                "error-polyfill": "^0.1.3",
                "http-errors": "^1.7.2",
                "js-sha256": "^0.9.0",
                "mustache": "^4.0.0",
                "node-fetch": "^2.6.1",
                "text-encoding-utf-8": "^1.0.2",
                "tweetnacl": "^1.0.1"
            }
        },
        "node_modules/near-api-js/node_modules/bn.js": {
            "version": "5.2.0",
            "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.0.tgz",
            "integrity": "sha512-D7iWRBvnZE8ecXiLj/9wbxH7Tk79fAh8IHaTNq1RWRixsS02W+5qS+iE9yq6RYl0asXx5tw0bLhmT5pIfbSquw==",
            "dev": true
        },
        "node_modules/near-api-js/node_modules/borsh": {
            "version": "0.6.0",
            "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.6.0.tgz",
            "integrity": "sha512-sl5k89ViqsThXQpYa9XDtz1sBl3l1lI313cFUY1HKr+wvMILnb+58xpkqTNrYbelh99dY7K8usxoCusQmqix9Q==",
            "dev": true,
            "dependencies": {
                "bn.js": "^5.2.0",
                "bs58": "^4.0.0",
                "text-encoding-utf-8": "^1.0.2"
            }
        },
        "node_modules/near-sandbox": {
            "version": "0.0.14",
            "resolved": "https://registry.npmjs.org/near-sandbox/-/near-sandbox-0.0.14.tgz",
            "integrity": "sha512-wQ1jcD6W6U4V83D0Zxgi2qedMkmTh5iiqm2t/oriKR4rrTql/j8QR/Ip/NfoIH/plFT+vGungKL+B4HxfNyyNg==",
            "dev": true,
            "hasInstallScript": true,
            "dependencies": {
                "got": "^11.8.2",
                "tar": "^6.1.0"
            },
            "bin": {
                "near-sandbox": "run.js",
                "sandbox": "run.js"
            }
        },
        "node_modules/near-units": {
            "version": "0.1.9",
            "resolved": "https://registry.npmjs.org/near-units/-/near-units-0.1.9.tgz",
            "integrity": "sha512-xiuBjpNsi+ywiu7P6iWRZdgFm7iCr/cfWlVO6+e5uaAqH4mE1rrurElyrL91llNDSnMwogd9XmlZOw5KbbHNsA==",
            "dev": true,
            "dependencies": {
                "bn.js": "^5.2.0"
            },
            "bin": {
                "near-units": "dist/cli.js"
            }
        },
        "node_modules/near-workspaces": {
            "version": "3.2.2",
            "resolved": "https://registry.npmjs.org/near-workspaces/-/near-workspaces-3.2.2.tgz",
            "integrity": "sha512-Y26FyPccs3lTKFpOzeWQy5urtSe0hcdME4ePbidzHNQPOXCub06htnvsoVEUNGVejc50f5nVHcdCiYO8mtEdTA==",
            "dev": true,
            "hasInstallScript": true,
            "dependencies": {
                "base64url": "^3.0.1",
                "bn.js": "^5.2.0",
                "borsh": "^0.5.0",
                "bs58": "^4.0.1",
                "callsites": "^4.0.0",
                "fs-extra": "^10.0.0",
                "js-sha256": "^0.9.0",
                "near-api-js": "^0.44.1",
                "near-sandbox": "^0.0.14",
                "near-units": "^0.1.9",
                "node-port-check": "^2.0.1",
                "promisify-child-process": "^4.1.1",
                "pure-uuid": "^1.6.2",
                "rimraf": "^3.0.2",
                "temp-dir": "^2.0.0"
            },
            "engines": {
                "node": ">= 14.0.0",
                "npm": ">= 6.0.0"
            }
        },
        "node_modules/node-fetch": {
            "version": "2.6.7",
            "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
            "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
            "dev": true,
            "dependencies": {
                "whatwg-url": "^5.0.0"
            },
            "engines": {
                "node": "4.x || >=6.0.0"
            },
            "peerDependencies": {
                "encoding": "^0.1.0"
            },
            "peerDependenciesMeta": {
                "encoding": {
                    "optional": true
                }
            }
        },
        "node_modules/node-port-check": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/node-port-check/-/node-port-check-2.0.1.tgz",
            "integrity": "sha512-PV1tj5OPbWwxvhPcChXxwCIKl/IfVEdPP4u/gQz2lao/VGoeIUXb/4U72KSHLZpTVBmgTnMm0me7yR0wUsIuPg==",
            "dev": true
        },
        "node_modules/nofilter": {
            "version": "3.1.0",
            "resolved": "https://registry.npmjs.org/nofilter/-/nofilter-3.1.0.tgz",
            "integrity": "sha512-l2NNj07e9afPnhAhvgVrCD/oy2Ai1yfLpuo3EpiO1jFTsB4sFz6oIfAfSZyQzVpkZQ9xS8ZS5g1jCBgq4Hwo0g==",
            "dev": true,
            "engines": {
                "node": ">=12.19"
            }
        },
        "node_modules/normalize-path": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
            "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
            "dev": true,
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/normalize-url": {
            "version": "6.1.0",
            "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-6.1.0.tgz",
            "integrity": "sha512-DlL+XwOy3NxAQ8xuC0okPgK46iuVNAK01YN7RueYBqqFeGsBjV9XmCAzAdgt+667bCl5kPh9EqKKDwnaPG1I7A==",
            "dev": true,
            "engines": {
                "node": ">=10"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/o3": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/o3/-/o3-1.0.3.tgz",
            "integrity": "sha512-f+4n+vC6s4ysy7YO7O2gslWZBUu8Qj2i2OUJOvjRxQva7jVjYjB29jrr9NCjmxZQR0gzrOcv1RnqoYOeMs5VRQ==",
            "dev": true,
            "dependencies": {
                "capability": "^0.2.5"
            }
        },
        "node_modules/once": {
            "version": "1.4.0",
            "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
            "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
            "dev": true,
            "dependencies": {
                "wrappy": "1"
            }
        },
        "node_modules/p-cancelable": {
            "version": "2.1.1",
            "resolved": "https://registry.npmjs.org/p-cancelable/-/p-cancelable-2.1.1.tgz",
            "integrity": "sha512-BZOr3nRQHOntUjTrH8+Lh54smKHoHyur8We1V8DSMVrl5A2malOOwuJRnKRDjSnkoeBh4at6BwEnb5I7Jl31wg==",
            "dev": true,
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/p-defer": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/p-defer/-/p-defer-1.0.0.tgz",
            "integrity": "sha512-wB3wfAxZpk2AzOfUMJNL+d36xothRSyj8EXOa4f6GMqYDN9BJaaSISbsk+wS9abmnebVw95C2Kb5t85UmpCxuw==",
            "dev": true,
            "engines": {
                "node": ">=4"
            }
        },
        "node_modules/p-event": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/p-event/-/p-event-5.0.1.tgz",
            "integrity": "sha512-dd589iCQ7m1L0bmC5NLlVYfy3TbBEsMUfWx9PyAgPeIcFZ/E2yaTZ4Rz4MiBmmJShviiftHVXOqfnfzJ6kyMrQ==",
            "dev": true,
            "dependencies": {
                "p-timeout": "^5.0.2"
            },
            "engines": {
                "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/p-limit": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-4.0.0.tgz",
            "integrity": "sha512-5b0R4txpzjPWVw/cXXUResoD4hb6U/x9BH08L7nw+GN1sezDzPdxeRvpc9c433fZhBan/wusjbCsqwqm4EIBIQ==",
            "dev": true,
            "dependencies": {
                "yocto-queue": "^1.0.0"
            },
            "engines": {
                "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/p-locate": {
            "version": "6.0.0",
            "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-6.0.0.tgz",
            "integrity": "sha512-wPrq66Llhl7/4AGC6I+cqxT07LhXvWL08LNXz1fENOw0Ap4sRZZ/gZpTTJ5jpurzzzfS2W/Ge9BY3LgLjCShcw==",
            "dev": true,
            "dependencies": {
                "p-limit": "^4.0.0"
            },
            "engines": {
                "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/p-map": {
            "version": "5.5.0",
            "resolved": "https://registry.npmjs.org/p-map/-/p-map-5.5.0.tgz",
            "integrity": "sha512-VFqfGDHlx87K66yZrNdI4YGtD70IRyd+zSvgks6mzHPRNkoKy+9EKP4SFC77/vTTQYmRmti7dvqC+m5jBrBAcg==",
            "dev": true,
            "dependencies": {
                "aggregate-error": "^4.0.0"
            },
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/p-timeout": {
            "version": "5.1.0",
            "resolved": "https://registry.npmjs.org/p-timeout/-/p-timeout-5.1.0.tgz",
            "integrity": "sha512-auFDyzzzGZZZdHz3BtET9VEz0SE/uMEAx7uWfGPucfzEwwe/xH0iVeZibQmANYE/hp9T2+UUZT5m+BKyrDp3Ew==",
            "dev": true,
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/parse-ms": {
            "version": "2.1.0",
            "resolved": "https://registry.npmjs.org/parse-ms/-/parse-ms-2.1.0.tgz",
            "integrity": "sha512-kHt7kzLoS9VBZfUsiKjv43mr91ea+U05EyKkEtqp7vNbHxmaVuEqN7XxeEVnGrMtYOAxGrDElSi96K7EgO1zCA==",
            "dev": true,
            "engines": {
                "node": ">=6"
            }
        },
        "node_modules/path-exists": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-5.0.0.tgz",
            "integrity": "sha512-RjhtfwJOxzcFmNOi6ltcbcu4Iu+FL3zEj83dk4kAS+fVpTxXLO1b38RvJgT/0QwvV/L3aY9TAnyv0EOqW4GoMQ==",
            "dev": true,
            "engines": {
                "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
            }
        },
        "node_modules/path-is-absolute": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
            "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
            "dev": true,
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/path-type": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
            "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
            "dev": true,
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/picomatch": {
            "version": "2.3.1",
            "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
            "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
            "dev": true,
            "engines": {
                "node": ">=8.6"
            },
            "funding": {
                "url": "https://github.com/sponsors/jonschlinkert"
            }
        },
        "node_modules/pkg-conf": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/pkg-conf/-/pkg-conf-4.0.0.tgz",
            "integrity": "sha512-7dmgi4UY4qk+4mj5Cd8v/GExPo0K+SlY+hulOSdfZ/T6jVH6//y7NtzZo5WrfhDBxuQ0jCa7fLZmNaNh7EWL/w==",
            "dev": true,
            "dependencies": {
                "find-up": "^6.0.0",
                "load-json-file": "^7.0.0"
            },
            "engines": {
                "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/plur": {
            "version": "5.1.0",
            "resolved": "https://registry.npmjs.org/plur/-/plur-5.1.0.tgz",
            "integrity": "sha512-VP/72JeXqak2KiOzjgKtQen5y3IZHn+9GOuLDafPv0eXa47xq0At93XahYBs26MsifCQ4enGKwbjBTKgb9QJXg==",
            "dev": true,
            "dependencies": {
                "irregular-plurals": "^3.3.0"
            },
            "engines": {
                "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/pretty-ms": {
            "version": "7.0.1",
            "resolved": "https://registry.npmjs.org/pretty-ms/-/pretty-ms-7.0.1.tgz",
            "integrity": "sha512-973driJZvxiGOQ5ONsFhOF/DtzPMOMtgC11kCpUrPGMTgqp2q/1gwzCquocrN33is0VZ5GFHXZYMM9l6h67v2Q==",
            "dev": true,
            "dependencies": {
                "parse-ms": "^2.1.0"
            },
            "engines": {
                "node": ">=10"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/promisify-child-process": {
            "version": "4.1.1",
            "resolved": "https://registry.npmjs.org/promisify-child-process/-/promisify-child-process-4.1.1.tgz",
            "integrity": "sha512-/sRjHZwoXf1rJ+8s4oWjYjGRVKNK1DUnqfRC1Zek18pl0cN6k3yJ1cCbqd0tWNe4h0Gr+SY4vR42N33+T82WkA==",
            "dev": true,
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/pump": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.0.tgz",
            "integrity": "sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==",
            "dev": true,
            "dependencies": {
                "end-of-stream": "^1.1.0",
                "once": "^1.3.1"
            }
        },
        "node_modules/pure-uuid": {
            "version": "1.6.2",
            "resolved": "https://registry.npmjs.org/pure-uuid/-/pure-uuid-1.6.2.tgz",
            "integrity": "sha512-WQ4xz74ApW6s0BToRuuyuMo9g0VHx1HljY0H2gPng+mqqz/K1yLj7sHZonZZQ2++WfHl/ZzruilWvuz+WtmxjQ==",
            "dev": true,
            "engines": {
                "node": ">=8.0.0"
            }
        },
        "node_modules/queue-microtask": {
            "version": "1.2.3",
            "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
            "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
            "dev": true,
            "funding": [
                {
                    "type": "github",
                    "url": "https://github.com/sponsors/feross"
                },
                {
                    "type": "patreon",
                    "url": "https://www.patreon.com/feross"
                },
                {
                    "type": "consulting",
                    "url": "https://feross.org/support"
                }
            ]
        },
        "node_modules/quick-lru": {
            "version": "5.1.1",
            "resolved": "https://registry.npmjs.org/quick-lru/-/quick-lru-5.1.1.tgz",
            "integrity": "sha512-WuyALRjWPDGtt/wzJiadO5AXY+8hZ80hVpe6MyivgraREW751X3SbhRvG3eLKOYN+8VEvqLcf3wdnt44Z4S4SA==",
            "dev": true,
            "engines": {
                "node": ">=10"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/readdirp": {
            "version": "3.6.0",
            "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
            "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
            "dev": true,
            "dependencies": {
                "picomatch": "^2.2.1"
            },
            "engines": {
                "node": ">=8.10.0"
            }
        },
        "node_modules/require-directory": {
            "version": "2.1.1",
            "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
            "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
            "dev": true,
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/resolve-alpn": {
            "version": "1.2.1",
            "resolved": "https://registry.npmjs.org/resolve-alpn/-/resolve-alpn-1.2.1.tgz",
            "integrity": "sha512-0a1F4l73/ZFZOakJnQ3FvkJ2+gSTQWz/r2KE5OdDY0TxPm5h4GkqkWWfM47T7HsbnOtcJVEF4epCVy6u7Q3K+g==",
            "dev": true
        },
        "node_modules/resolve-cwd": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
            "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
            "dev": true,
            "dependencies": {
                "resolve-from": "^5.0.0"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/resolve-from": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
            "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
            "dev": true,
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/responselike": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/responselike/-/responselike-2.0.1.tgz",
            "integrity": "sha512-4gl03wn3hj1HP3yzgdI7d3lCkF95F21Pz4BPGvKHinyQzALR5CapwC8yIi0Rh58DEMQ/SguC03wFj2k0M/mHhw==",
            "dev": true,
            "dependencies": {
                "lowercase-keys": "^2.0.0"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/reusify": {
            "version": "1.0.4",
            "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
            "integrity": "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==",
            "dev": true,
            "engines": {
                "iojs": ">=1.0.0",
                "node": ">=0.10.0"
            }
        },
        "node_modules/rimraf": {
            "version": "3.0.2",
            "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
            "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
            "dev": true,
            "dependencies": {
                "glob": "^7.1.3"
            },
            "bin": {
                "rimraf": "bin.js"
            },
            "funding": {
                "url": "https://github.com/sponsors/isaacs"
            }
        },
        "node_modules/run-parallel": {
            "version": "1.2.0",
            "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
            "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
            "dev": true,
            "funding": [
                {
                    "type": "github",
                    "url": "https://github.com/sponsors/feross"
                },
                {
                    "type": "patreon",
                    "url": "https://www.patreon.com/feross"
                },
                {
                    "type": "consulting",
                    "url": "https://feross.org/support"
                }
            ],
            "dependencies": {
                "queue-microtask": "^1.2.2"
            }
        },
        "node_modules/safe-buffer": {
            "version": "5.2.1",
            "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
            "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
            "dev": true,
            "funding": [
                {
                    "type": "github",
                    "url": "https://github.com/sponsors/feross"
                },
                {
                    "type": "patreon",
                    "url": "https://www.patreon.com/feross"
                },
                {
                    "type": "consulting",
                    "url": "https://feross.org/support"
                }
            ]
        },
        "node_modules/semver": {
            "version": "7.3.8",
            "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.8.tgz",
            "integrity": "sha512-NB1ctGL5rlHrPJtFDVIVzTyQylMLu9N9VICA6HSFJo8MCGVTMW6gfpicwKmmK/dAjTOrqu5l63JJOpDSrAis3A==",
            "dev": true,
            "dependencies": {
                "lru-cache": "^6.0.0"
            },
            "bin": {
                "semver": "bin/semver.js"
            },
            "engines": {
                "node": ">=10"
            }
        },
        "node_modules/serialize-error": {
            "version": "7.0.1",
            "resolved": "https://registry.npmjs.org/serialize-error/-/serialize-error-7.0.1.tgz",
            "integrity": "sha512-8I8TjW5KMOKsZQTvoxjuSIa7foAwPWGOts+6o7sgjz41/qMD9VQHEDxi6PBvK2l0MXUmqZyNpUK+T2tQaaElvw==",
            "dev": true,
            "dependencies": {
                "type-fest": "^0.13.1"
            },
            "engines": {
                "node": ">=10"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/setprototypeof": {
            "version": "1.2.0",
            "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
            "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
            "dev": true
        },
        "node_modules/signal-exit": {
            "version": "3.0.7",
            "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
            "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
            "dev": true
        },
        "node_modules/slash": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
            "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
            "dev": true,
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/slice-ansi": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/slice-ansi/-/slice-ansi-5.0.0.tgz",
            "integrity": "sha512-FC+lgizVPfie0kkhqUScwRu1O/lF6NOgJmlCgK+/LYxDCTk8sGelYaHDhFcDN+Sn3Cv+3VSa4Byeo+IMCzpMgQ==",
            "dev": true,
            "dependencies": {
                "ansi-styles": "^6.0.0",
                "is-fullwidth-code-point": "^4.0.0"
            },
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/chalk/slice-ansi?sponsor=1"
            }
        },
        "node_modules/sprintf-js": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
            "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
            "dev": true
        },
        "node_modules/stack-utils": {
            "version": "2.0.6",
            "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
            "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
            "dev": true,
            "dependencies": {
                "escape-string-regexp": "^2.0.0"
            },
            "engines": {
                "node": ">=10"
            }
        },
        "node_modules/stack-utils/node_modules/escape-string-regexp": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
            "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==",
            "dev": true,
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/statuses": {
            "version": "1.5.0",
            "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
            "integrity": "sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA==",
            "dev": true,
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/string-width": {
            "version": "5.1.2",
            "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
            "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
            "dev": true,
            "dependencies": {
                "eastasianwidth": "^0.2.0",
                "emoji-regex": "^9.2.2",
                "strip-ansi": "^7.0.1"
            },
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/strip-ansi": {
            "version": "7.0.1",
            "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.0.1.tgz",
            "integrity": "sha512-cXNxvT8dFNRVfhVME3JAe98mkXDYN2O1l7jmcwMnOslDeESg1rF/OZMtK0nRAhiari1unG5cD4jG3rapUAkLbw==",
            "dev": true,
            "dependencies": {
                "ansi-regex": "^6.0.1"
            },
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://github.com/chalk/strip-ansi?sponsor=1"
            }
        },
        "node_modules/supertap": {
            "version": "3.0.1",
            "resolved": "https://registry.npmjs.org/supertap/-/supertap-3.0.1.tgz",
            "integrity": "sha512-u1ZpIBCawJnO+0QePsEiOknOfCRq0yERxiAchT0i4li0WHNUJbf0evXXSXOcCAR4M8iMDoajXYmstm/qO81Isw==",
            "dev": true,
            "dependencies": {
                "indent-string": "^5.0.0",
                "js-yaml": "^3.14.1",
                "serialize-error": "^7.0.1",
                "strip-ansi": "^7.0.1"
            },
            "engines": {
                "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
            }
        },
        "node_modules/tar": {
            "version": "6.1.13",
            "resolved": "https://registry.npmjs.org/tar/-/tar-6.1.13.tgz",
            "integrity": "sha512-jdIBIN6LTIe2jqzay/2vtYLlBHa3JF42ot3h1dW8Q0PaAG4v8rm0cvpVePtau5C6OKXGGcgO9q2AMNSWxiLqKw==",
            "dev": true,
            "dependencies": {
                "chownr": "^2.0.0",
                "fs-minipass": "^2.0.0",
                "minipass": "^4.0.0",
                "minizlib": "^2.1.1",
                "mkdirp": "^1.0.3",
                "yallist": "^4.0.0"
            },
            "engines": {
                "node": ">=10"
            }
        },
        "node_modules/temp-dir": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/temp-dir/-/temp-dir-2.0.0.tgz",
            "integrity": "sha512-aoBAniQmmwtcKp/7BzsH8Cxzv8OL736p7v1ihGb5e9DJ9kTwGWHrQrVB5+lfVDzfGrdRzXch+ig7LHaY1JTOrg==",
            "dev": true,
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/text-encoding-utf-8": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
            "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg==",
            "dev": true
        },
        "node_modules/time-zone": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/time-zone/-/time-zone-1.0.0.tgz",
            "integrity": "sha512-TIsDdtKo6+XrPtiTm1ssmMngN1sAhyKnTO2kunQWqNPWIVvCm15Wmw4SWInwTVgJ5u/Tr04+8Ei9TNcw4x4ONA==",
            "dev": true,
            "engines": {
                "node": ">=4"
            }
        },
        "node_modules/to-regex-range": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
            "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
            "dev": true,
            "dependencies": {
                "is-number": "^7.0.0"
            },
            "engines": {
                "node": ">=8.0"
            }
        },
        "node_modules/toidentifier": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
            "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
            "dev": true,
            "engines": {
                "node": ">=0.6"
            }
        },
        "node_modules/tr46": {
            "version": "0.0.3",
            "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
            "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
            "dev": true
        },
        "node_modules/ts-node": {
            "version": "10.9.1",
            "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.9.1.tgz",
            "integrity": "sha512-NtVysVPkxxrwFGUUxGYhfux8k78pQB3JqYBXlLRZgdGUqTO5wU/UyHop5p70iEbGhB7q5KmiZiU0Y3KlJrScEw==",
            "dev": true,
            "dependencies": {
                "@cspotcode/source-map-support": "^0.8.0",
                "@tsconfig/node10": "^1.0.7",
                "@tsconfig/node12": "^1.0.7",
                "@tsconfig/node14": "^1.0.0",
                "@tsconfig/node16": "^1.0.2",
                "acorn": "^8.4.1",
                "acorn-walk": "^8.1.1",
                "arg": "^4.1.0",
                "create-require": "^1.1.0",
                "diff": "^4.0.1",
                "make-error": "^1.1.1",
                "v8-compile-cache-lib": "^3.0.1",
                "yn": "3.1.1"
            },
            "bin": {
                "ts-node": "dist/bin.js",
                "ts-node-cwd": "dist/bin-cwd.js",
                "ts-node-esm": "dist/bin-esm.js",
                "ts-node-script": "dist/bin-script.js",
                "ts-node-transpile-only": "dist/bin-transpile.js",
                "ts-script": "dist/bin-script-deprecated.js"
            },
            "peerDependencies": {
                "@swc/core": ">=1.2.50",
                "@swc/wasm": ">=1.2.50",
                "@types/node": "*",
                "typescript": ">=2.7"
            },
            "peerDependenciesMeta": {
                "@swc/core": {
                    "optional": true
                },
                "@swc/wasm": {
                    "optional": true
                }
            }
        },
        "node_modules/tweetnacl": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.3.tgz",
            "integrity": "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw==",
            "dev": true
        },
        "node_modules/type-fest": {
            "version": "0.13.1",
            "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.13.1.tgz",
            "integrity": "sha512-34R7HTnG0XIJcBSn5XhDd7nNFPRcXYRZrBB2O2jdKqYODldSzBAqzsWoZYYvduky73toYS/ESqxPvkDf/F0XMg==",
            "dev": true,
            "engines": {
                "node": ">=10"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/typescript": {
            "version": "4.9.4",
            "resolved": "https://registry.npmjs.org/typescript/-/typescript-4.9.4.tgz",
            "integrity": "sha512-Uz+dTXYzxXXbsFpM86Wh3dKCxrQqUcVMxwU54orwlJjOpO3ao8L7j5lH+dWfTwgCwIuM9GQ2kvVotzYJMXTBZg==",
            "dev": true,
            "bin": {
                "tsc": "bin/tsc",
                "tsserver": "bin/tsserver"
            },
            "engines": {
                "node": ">=4.2.0"
            }
        },
        "node_modules/u3": {
            "version": "0.1.1",
            "resolved": "https://registry.npmjs.org/u3/-/u3-0.1.1.tgz",
            "integrity": "sha512-+J5D5ir763y+Am/QY6hXNRlwljIeRMZMGs0cT6qqZVVzzT3X3nFPXVyPOFRMOR4kupB0T8JnCdpWdp6Q/iXn3w==",
            "dev": true
        },
        "node_modules/universalify": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.0.tgz",
            "integrity": "sha512-hAZsKq7Yy11Zu1DE0OzWjw7nnLZmJZYTDZZyEFHZdUhV8FkH5MCfoU1XMaxXovpyW5nq5scPqq0ZDP9Zyl04oQ==",
            "dev": true,
            "engines": {
                "node": ">= 10.0.0"
            }
        },
        "node_modules/v8-compile-cache-lib": {
            "version": "3.0.1",
            "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
            "integrity": "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==",
            "dev": true
        },
        "node_modules/webidl-conversions": {
            "version": "3.0.1",
            "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
            "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
            "dev": true
        },
        "node_modules/well-known-symbols": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/well-known-symbols/-/well-known-symbols-2.0.0.tgz",
            "integrity": "sha512-ZMjC3ho+KXo0BfJb7JgtQ5IBuvnShdlACNkKkdsqBmYw3bPAaJfPeYUo6tLUaT5tG/Gkh7xkpBhKRQ9e7pyg9Q==",
            "dev": true,
            "engines": {
                "node": ">=6"
            }
        },
        "node_modules/whatwg-url": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
            "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
            "dev": true,
            "dependencies": {
                "tr46": "~0.0.3",
                "webidl-conversions": "^3.0.0"
            }
        },
        "node_modules/wrap-ansi": {
            "version": "7.0.0",
            "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
            "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
            "dev": true,
            "dependencies": {
                "ansi-styles": "^4.0.0",
                "string-width": "^4.1.0",
                "strip-ansi": "^6.0.0"
            },
            "engines": {
                "node": ">=10"
            },
            "funding": {
                "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
            }
        },
        "node_modules/wrap-ansi/node_modules/ansi-regex": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
            "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
            "dev": true,
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/wrap-ansi/node_modules/ansi-styles": {
            "version": "4.3.0",
            "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
            "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
            "dev": true,
            "dependencies": {
                "color-convert": "^2.0.1"
            },
            "engines": {
                "node": ">=8"
            },
            "funding": {
                "url": "https://github.com/chalk/ansi-styles?sponsor=1"
            }
        },
        "node_modules/wrap-ansi/node_modules/emoji-regex": {
            "version": "8.0.0",
            "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
            "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
            "dev": true
        },
        "node_modules/wrap-ansi/node_modules/is-fullwidth-code-point": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
            "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
            "dev": true,
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/wrap-ansi/node_modules/string-width": {
            "version": "4.2.3",
            "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
            "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
            "dev": true,
            "dependencies": {
                "emoji-regex": "^8.0.0",
                "is-fullwidth-code-point": "^3.0.0",
                "strip-ansi": "^6.0.1"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/wrap-ansi/node_modules/strip-ansi": {
            "version": "6.0.1",
            "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
            "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
            "dev": true,
            "dependencies": {
                "ansi-regex": "^5.0.1"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/wrappy": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
            "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
            "dev": true
        },
        "node_modules/write-file-atomic": {
            "version": "4.0.2",
            "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-4.0.2.tgz",
            "integrity": "sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg==",
            "dev": true,
            "dependencies": {
                "imurmurhash": "^0.1.4",
                "signal-exit": "^3.0.7"
            },
            "engines": {
                "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
            }
        },
        "node_modules/y18n": {
            "version": "5.0.8",
            "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
            "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
            "dev": true,
            "engines": {
                "node": ">=10"
            }
        },
        "node_modules/yallist": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
            "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
            "dev": true
        },
        "node_modules/yargs": {
            "version": "17.6.2",
            "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.6.2.tgz",
            "integrity": "sha512-1/9UrdHjDZc0eOU0HxOHoS78C69UD3JRMvzlJ7S79S2nTaWRA/whGCTV8o9e/N/1Va9YIV7Q4sOxD8VV4pCWOw==",
            "dev": true,
            "dependencies": {
                "cliui": "^8.0.1",
                "escalade": "^3.1.1",
                "get-caller-file": "^2.0.5",
                "require-directory": "^2.1.1",
                "string-width": "^4.2.3",
                "y18n": "^5.0.5",
                "yargs-parser": "^21.1.1"
            },
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/yargs-parser": {
            "version": "21.1.1",
            "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
            "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
            "dev": true,
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/yargs/node_modules/ansi-regex": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
            "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
            "dev": true,
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/yargs/node_modules/emoji-regex": {
            "version": "8.0.0",
            "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
            "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
            "dev": true
        },
        "node_modules/yargs/node_modules/is-fullwidth-code-point": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
            "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
            "dev": true,
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/yargs/node_modules/string-width": {
            "version": "4.2.3",
            "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
            "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
            "dev": true,
            "dependencies": {
                "emoji-regex": "^8.0.0",
                "is-fullwidth-code-point": "^3.0.0",
                "strip-ansi": "^6.0.1"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/yargs/node_modules/strip-ansi": {
            "version": "6.0.1",
            "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
            "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
            "dev": true,
            "dependencies": {
                "ansi-regex": "^5.0.1"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/yn": {
            "version": "3.1.1",
            "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
            "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==",
            "dev": true,
            "engines": {
                "node": ">=6"
            }
        },
        "node_modules/yocto-queue": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-1.0.0.tgz",
            "integrity": "sha512-9bnSc/HEW2uRy67wc+T8UwauLuPJVn28jb+GtJY16iiKWyvmYJRXVT4UamsAEGQfPohgr2q4Tq0sQbQlxTfi1g==",
            "dev": true,
            "engines": {
                "node": ">=12.20"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        }
    },
    "dependencies": {
        "@cspotcode/source-map-support": {
            "version": "0.8.1",
            "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
            "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
            "dev": true,
            "requires": {
                "@jridgewell/trace-mapping": "0.3.9"
            }
        },
        "@jridgewell/resolve-uri": {
            "version": "3.1.0",
            "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.0.tgz",
            "integrity": "sha512-F2msla3tad+Mfht5cJq7LSXcdudKTWCVYUgw6pLFOOHSTtZlj6SWNYAp+AhuqLmWdBO2X5hPrLcu8cVP8fy28w==",
            "dev": true
        },
        "@jridgewell/sourcemap-codec": {
            "version": "1.4.14",
            "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.14.tgz",
            "integrity": "sha512-XPSJHWmi394fuUuzDnGz1wiKqWfo1yXecHQMRf2l6hztTO+nPru658AyDngaBe7isIxEkRsPR3FZh+s7iVa4Uw==",
            "dev": true
        },
        "@jridgewell/trace-mapping": {
            "version": "0.3.9",
            "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
            "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
            "dev": true,
            "requires": {
                "@jridgewell/resolve-uri": "^3.0.3",
                "@jridgewell/sourcemap-codec": "^1.4.10"
            }
        },
        "@nodelib/fs.scandir": {
            "version": "2.1.5",
            "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
            "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
            "dev": true,
            "requires": {
                "@nodelib/fs.stat": "2.0.5",
                "run-parallel": "^1.1.9"
            }
        },
        "@nodelib/fs.stat": {
            "version": "2.0.5",
            "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
            "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
            "dev": true
        },
        "@nodelib/fs.walk": {
            "version": "1.2.8",
            "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
            "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
            "dev": true,
            "requires": {
                "@nodelib/fs.scandir": "2.1.5",
                "fastq": "^1.6.0"
            }
        },
        "@sindresorhus/is": {
            "version": "4.6.0",
            "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-4.6.0.tgz",
            "integrity": "sha512-t09vSN3MdfsyCHoFcTRCH/iUtG7OJ0CsjzB8cjAmKc/va/kIgeDI/TxsigdncE/4be734m0cvIYwNaV4i2XqAw==",
            "dev": true
        },
        "@szmarczak/http-timer": {
            "version": "4.0.6",
            "resolved": "https://registry.npmjs.org/@szmarczak/http-timer/-/http-timer-4.0.6.tgz",
            "integrity": "sha512-4BAffykYOgO+5nzBWYwE3W90sBgLJoUPRWWcL8wlyiM8IB8ipJz3UMJ9KXQd1RKQXpKp8Tutn80HZtWsu2u76w==",
            "dev": true,
            "requires": {
                "defer-to-connect": "^2.0.0"
            }
        },
        "@tsconfig/node10": {
            "version": "1.0.9",
            "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.9.tgz",
            "integrity": "sha512-jNsYVVxU8v5g43Erja32laIDHXeoNvFEpX33OK4d6hljo3jDhCBDhx5dhCCTMWUojscpAagGiRkBKxpdl9fxqA==",
            "dev": true
        },
        "@tsconfig/node12": {
            "version": "1.0.11",
            "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz",
            "integrity": "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==",
            "dev": true
        },
        "@tsconfig/node14": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz",
            "integrity": "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==",
            "dev": true
        },
        "@tsconfig/node16": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.3.tgz",
            "integrity": "sha512-yOlFc+7UtL/89t2ZhjPvvB/DeAr3r+Dq58IgzsFkOAvVC6NMJXmCGjbptdXdR9qsX7pKcTL+s87FtYREi2dEEQ==",
            "dev": true
        },
        "@types/bn.js": {
            "version": "5.1.1",
            "resolved": "https://registry.npmjs.org/@types/bn.js/-/bn.js-5.1.1.tgz",
            "integrity": "sha512-qNrYbZqMx0uJAfKnKclPh+dTwK33KfLHYqtyODwd5HnXOjnkhc4qgn3BrK6RWyGZm5+sIFE7Q7Vz6QQtJB7w7g==",
            "dev": true,
            "requires": {
                "@types/node": "*"
            }
        },
        "@types/cacheable-request": {
            "version": "6.0.3",
            "resolved": "https://registry.npmjs.org/@types/cacheable-request/-/cacheable-request-6.0.3.tgz",
            "integrity": "sha512-IQ3EbTzGxIigb1I3qPZc1rWJnH0BmSKv5QYTalEwweFvyBDLSAe24zP0le/hyi7ecGfZVlIVAg4BZqb8WBwKqw==",
            "dev": true,
            "requires": {
                "@types/http-cache-semantics": "*",
                "@types/keyv": "^3.1.4",
                "@types/node": "*",
                "@types/responselike": "^1.0.0"
            }
        },
        "@types/http-cache-semantics": {
            "version": "4.0.1",
            "resolved": "https://registry.npmjs.org/@types/http-cache-semantics/-/http-cache-semantics-4.0.1.tgz",
            "integrity": "sha512-SZs7ekbP8CN0txVG2xVRH6EgKmEm31BOxA07vkFaETzZz1xh+cbt8BcI0slpymvwhx5dlFnQG2rTlPVQn+iRPQ==",
            "dev": true
        },
        "@types/keyv": {
            "version": "3.1.4",
            "resolved": "https://registry.npmjs.org/@types/keyv/-/keyv-3.1.4.tgz",
            "integrity": "sha512-BQ5aZNSCpj7D6K2ksrRCTmKRLEpnPvWDiLPfoGyhZ++8YtiK9d/3DBKPJgry359X/P1PfruyYwvnvwFjuEiEIg==",
            "dev": true,
            "requires": {
                "@types/node": "*"
            }
        },
        "@types/node": {
            "version": "18.11.17",
            "resolved": "https://registry.npmjs.org/@types/node/-/node-18.11.17.tgz",
            "integrity": "sha512-HJSUJmni4BeDHhfzn6nF0sVmd1SMezP7/4F0Lq+aXzmp2xm9O7WXrUtHW/CHlYVtZUbByEvWidHqRtcJXGF2Ng==",
            "dev": true
        },
        "@types/responselike": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/@types/responselike/-/responselike-1.0.0.tgz",
            "integrity": "sha512-85Y2BjiufFzaMIlvJDvTTB8Fxl2xfLo4HgmHzVBz08w4wDePCTjYw66PdrolO0kzli3yam/YCgRufyo1DdQVTA==",
            "dev": true,
            "requires": {
                "@types/node": "*"
            }
        },
        "acorn": {
            "version": "8.8.1",
            "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.8.1.tgz",
            "integrity": "sha512-7zFpHzhnqYKrkYdUjF1HI1bzd0VygEGX8lFk4k5zVMqHEoES+P+7TKI+EvLO9WVMJ8eekdO0aDEK044xTXwPPA==",
            "dev": true
        },
        "acorn-walk": {
            "version": "8.2.0",
            "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.2.0.tgz",
            "integrity": "sha512-k+iyHEuPgSw6SbuDpGQM+06HQUa04DZ3o+F6CSzXMvvI5KMvnaEqXe+YVe555R9nn6GPt404fos4wcgpw12SDA==",
            "dev": true
        },
        "aggregate-error": {
            "version": "4.0.1",
            "resolved": "https://registry.npmjs.org/aggregate-error/-/aggregate-error-4.0.1.tgz",
            "integrity": "sha512-0poP0T7el6Vq3rstR8Mn4V/IQrpBLO6POkUSrN7RhyY+GF/InCFShQzsQ39T25gkHhLgSLByyAz+Kjb+c2L98w==",
            "dev": true,
            "requires": {
                "clean-stack": "^4.0.0",
                "indent-string": "^5.0.0"
            }
        },
        "ansi-regex": {
            "version": "6.0.1",
            "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
            "integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==",
            "dev": true
        },
        "ansi-styles": {
            "version": "6.2.1",
            "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
            "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
            "dev": true
        },
        "anymatch": {
            "version": "3.1.3",
            "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
            "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
            "dev": true,
            "requires": {
                "normalize-path": "^3.0.0",
                "picomatch": "^2.0.4"
            }
        },
        "arg": {
            "version": "4.1.3",
            "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
            "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==",
            "dev": true
        },
        "argparse": {
            "version": "1.0.10",
            "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
            "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
            "dev": true,
            "requires": {
                "sprintf-js": "~1.0.2"
            }
        },
        "array-find-index": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/array-find-index/-/array-find-index-1.0.2.tgz",
            "integrity": "sha512-M1HQyIXcBGtVywBt8WVdim+lrNaK7VHp99Qt5pSNziXznKHViIBbXWtfRTpEFpF/c4FdfxNAsCCwPp5phBYJtw==",
            "dev": true
        },
        "array-union": {
            "version": "2.1.0",
            "resolved": "https://registry.npmjs.org/array-union/-/array-union-2.1.0.tgz",
            "integrity": "sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==",
            "dev": true
        },
        "arrgv": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/arrgv/-/arrgv-1.0.2.tgz",
            "integrity": "sha512-a4eg4yhp7mmruZDQFqVMlxNRFGi/i1r87pt8SDHy0/I8PqSXoUTlWZRdAZo0VXgvEARcujbtTk8kiZRi1uDGRw==",
            "dev": true
        },
        "arrify": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/arrify/-/arrify-3.0.0.tgz",
            "integrity": "sha512-tLkvA81vQG/XqE2mjDkGQHoOINtMHtysSnemrmoGe6PydDPMRbVugqyk4A6V/WDWEfm3l+0d8anA9r8cv/5Jaw==",
            "dev": true
        },
        "ava": {
            "version": "4.3.3",
            "resolved": "https://registry.npmjs.org/ava/-/ava-4.3.3.tgz",
            "integrity": "sha512-9Egq/d9R74ExrWohHeqUlexjDbgZJX5jA1Wq4KCTqc3wIfpGEK79zVy4rBtofJ9YKIxs4PzhJ8BgbW5PlAYe6w==",
            "dev": true,
            "requires": {
                "acorn": "^8.7.1",
                "acorn-walk": "^8.2.0",
                "ansi-styles": "^6.1.0",
                "arrgv": "^1.0.2",
                "arrify": "^3.0.0",
                "callsites": "^4.0.0",
                "cbor": "^8.1.0",
                "chalk": "^5.0.1",
                "chokidar": "^3.5.3",
                "chunkd": "^2.0.1",
                "ci-info": "^3.3.1",
                "ci-parallel-vars": "^1.0.1",
                "clean-yaml-object": "^0.1.0",
                "cli-truncate": "^3.1.0",
                "code-excerpt": "^4.0.0",
                "common-path-prefix": "^3.0.0",
                "concordance": "^5.0.4",
                "currently-unhandled": "^0.4.1",
                "debug": "^4.3.4",
                "del": "^6.1.1",
                "emittery": "^0.11.0",
                "figures": "^4.0.1",
                "globby": "^13.1.1",
                "ignore-by-default": "^2.1.0",
                "indent-string": "^5.0.0",
                "is-error": "^2.2.2",
                "is-plain-object": "^5.0.0",
                "is-promise": "^4.0.0",
                "matcher": "^5.0.0",
                "mem": "^9.0.2",
                "ms": "^2.1.3",
                "p-event": "^5.0.1",
                "p-map": "^5.4.0",
                "picomatch": "^2.3.1",
                "pkg-conf": "^4.0.0",
                "plur": "^5.1.0",
                "pretty-ms": "^7.0.1",
                "resolve-cwd": "^3.0.0",
                "slash": "^3.0.0",
                "stack-utils": "^2.0.5",
                "strip-ansi": "^7.0.1",
                "supertap": "^3.0.1",
                "temp-dir": "^2.0.0",
                "write-file-atomic": "^4.0.1",
                "yargs": "^17.5.1"
            }
        },
        "balanced-match": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
            "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
            "dev": true
        },
        "base-x": {
            "version": "3.0.9",
            "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
            "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
            "dev": true,
            "requires": {
                "safe-buffer": "^5.0.1"
            }
        },
        "base64url": {
            "version": "3.0.1",
            "resolved": "https://registry.npmjs.org/base64url/-/base64url-3.0.1.tgz",
            "integrity": "sha512-ir1UPr3dkwexU7FdV8qBBbNDRUhMmIekYMFZfi+C/sLNnRESKPl23nB9b2pltqfOQNnGzsDdId90AEtG5tCx4A==",
            "dev": true
        },
        "binary-extensions": {
            "version": "2.2.0",
            "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
            "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
            "dev": true
        },
        "blueimp-md5": {
            "version": "2.19.0",
            "resolved": "https://registry.npmjs.org/blueimp-md5/-/blueimp-md5-2.19.0.tgz",
            "integrity": "sha512-DRQrD6gJyy8FbiE4s+bDoXS9hiW3Vbx5uCdwvcCf3zLHL+Iv7LtGHLpr+GZV8rHG8tK766FGYBwRbu8pELTt+w==",
            "dev": true
        },
        "bn.js": {
            "version": "5.2.1",
            "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.1.tgz",
            "integrity": "sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ==",
            "dev": true
        },
        "borsh": {
            "version": "0.5.0",
            "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.5.0.tgz",
            "integrity": "sha512-p9w/qGBeeFdUf2GPBPHdX5JQyez8K5VtoFN7PqSfmR+cVUMSmcwAKhP9n2aXoDSKbtS7xZlZt3MVnrJL7GdYhg==",
            "dev": true,
            "requires": {
                "bn.js": "^5.2.0",
                "bs58": "^4.0.0",
                "text-encoding-utf-8": "^1.0.2"
            }
        },
        "brace-expansion": {
            "version": "1.1.11",
            "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
            "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
            "dev": true,
            "requires": {
                "balanced-match": "^1.0.0",
                "concat-map": "0.0.1"
            }
        },
        "braces": {
            "version": "3.0.2",
            "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
            "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
            "dev": true,
            "requires": {
                "fill-range": "^7.0.1"
            }
        },
        "bs58": {
            "version": "4.0.1",
            "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
            "integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
            "dev": true,
            "requires": {
                "base-x": "^3.0.2"
            }
        },
        "cacheable-lookup": {
            "version": "5.0.4",
            "resolved": "https://registry.npmjs.org/cacheable-lookup/-/cacheable-lookup-5.0.4.tgz",
            "integrity": "sha512-2/kNscPhpcxrOigMZzbiWF7dz8ilhb/nIHU3EyZiXWXpeq/au8qJ8VhdftMkty3n7Gj6HIGalQG8oiBNB3AJgA==",
            "dev": true
        },
        "cacheable-request": {
            "version": "7.0.2",
            "resolved": "https://registry.npmjs.org/cacheable-request/-/cacheable-request-7.0.2.tgz",
            "integrity": "sha512-pouW8/FmiPQbuGpkXQ9BAPv/Mo5xDGANgSNXzTzJ8DrKGuXOssM4wIQRjfanNRh3Yu5cfYPvcorqbhg2KIJtew==",
            "dev": true,
            "requires": {
                "clone-response": "^1.0.2",
                "get-stream": "^5.1.0",
                "http-cache-semantics": "^4.0.0",
                "keyv": "^4.0.0",
                "lowercase-keys": "^2.0.0",
                "normalize-url": "^6.0.1",
                "responselike": "^2.0.0"
            }
        },
        "callsites": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/callsites/-/callsites-4.0.0.tgz",
            "integrity": "sha512-y3jRROutgpKdz5vzEhWM34TidDU8vkJppF8dszITeb1PQmSqV3DTxyV8G/lyO/DNvtE1YTedehmw9MPZsCBHxQ==",
            "dev": true
        },
        "capability": {
            "version": "0.2.5",
            "resolved": "https://registry.npmjs.org/capability/-/capability-0.2.5.tgz",
            "integrity": "sha512-rsJZYVCgXd08sPqwmaIqjAd5SUTfonV0z/gDJ8D6cN8wQphky1kkAYEqQ+hmDxTw7UihvBfjUVUSY+DBEe44jg==",
            "dev": true
        },
        "cbor": {
            "version": "8.1.0",
            "resolved": "https://registry.npmjs.org/cbor/-/cbor-8.1.0.tgz",
            "integrity": "sha512-DwGjNW9omn6EwP70aXsn7FQJx5kO12tX0bZkaTjzdVFM6/7nhA4t0EENocKGx6D2Bch9PE2KzCUf5SceBdeijg==",
            "dev": true,
            "requires": {
                "nofilter": "^3.1.0"
            }
        },
        "chalk": {
            "version": "5.2.0",
            "resolved": "https://registry.npmjs.org/chalk/-/chalk-5.2.0.tgz",
            "integrity": "sha512-ree3Gqw/nazQAPuJJEy+avdl7QfZMcUvmHIKgEZkGL+xOBzRvup5Hxo6LHuMceSxOabuJLJm5Yp/92R9eMmMvA==",
            "dev": true
        },
        "chokidar": {
            "version": "3.5.3",
            "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
            "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
            "dev": true,
            "requires": {
                "anymatch": "~3.1.2",
                "braces": "~3.0.2",
                "fsevents": "~2.3.2",
                "glob-parent": "~5.1.2",
                "is-binary-path": "~2.1.0",
                "is-glob": "~4.0.1",
                "normalize-path": "~3.0.0",
                "readdirp": "~3.6.0"
            }
        },
        "chownr": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
            "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==",
            "dev": true
        },
        "chunkd": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/chunkd/-/chunkd-2.0.1.tgz",
            "integrity": "sha512-7d58XsFmOq0j6el67Ug9mHf9ELUXsQXYJBkyxhH/k+6Ke0qXRnv0kbemx+Twc6fRJ07C49lcbdgm9FL1Ei/6SQ==",
            "dev": true
        },
        "ci-info": {
            "version": "3.7.0",
            "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.7.0.tgz",
            "integrity": "sha512-2CpRNYmImPx+RXKLq6jko/L07phmS9I02TyqkcNU20GCF/GgaWvc58hPtjxDX8lPpkdwc9sNh72V9k00S7ezog==",
            "dev": true
        },
        "ci-parallel-vars": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/ci-parallel-vars/-/ci-parallel-vars-1.0.1.tgz",
            "integrity": "sha512-uvzpYrpmidaoxvIQHM+rKSrigjOe9feHYbw4uOI2gdfe1C3xIlxO+kVXq83WQWNniTf8bAxVpy+cQeFQsMERKg==",
            "dev": true
        },
        "clean-stack": {
            "version": "4.2.0",
            "resolved": "https://registry.npmjs.org/clean-stack/-/clean-stack-4.2.0.tgz",
            "integrity": "sha512-LYv6XPxoyODi36Dp976riBtSY27VmFo+MKqEU9QCCWyTrdEPDog+RWA7xQWHi6Vbp61j5c4cdzzX1NidnwtUWg==",
            "dev": true,
            "requires": {
                "escape-string-regexp": "5.0.0"
            }
        },
        "clean-yaml-object": {
            "version": "0.1.0",
            "resolved": "https://registry.npmjs.org/clean-yaml-object/-/clean-yaml-object-0.1.0.tgz",
            "integrity": "sha512-3yONmlN9CSAkzNwnRCiJQ7Q2xK5mWuEfL3PuTZcAUzhObbXsfsnMptJzXwz93nc5zn9V9TwCVMmV7w4xsm43dw==",
            "dev": true
        },
        "cli-truncate": {
            "version": "3.1.0",
            "resolved": "https://registry.npmjs.org/cli-truncate/-/cli-truncate-3.1.0.tgz",
            "integrity": "sha512-wfOBkjXteqSnI59oPcJkcPl/ZmwvMMOj340qUIY1SKZCv0B9Cf4D4fAucRkIKQmsIuYK3x1rrgU7MeGRruiuiA==",
            "dev": true,
            "requires": {
                "slice-ansi": "^5.0.0",
                "string-width": "^5.0.0"
            }
        },
        "cliui": {
            "version": "8.0.1",
            "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
            "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
            "dev": true,
            "requires": {
                "string-width": "^4.2.0",
                "strip-ansi": "^6.0.1",
                "wrap-ansi": "^7.0.0"
            },
            "dependencies": {
                "ansi-regex": {
                    "version": "5.0.1",
                    "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
                    "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
                    "dev": true
                },
                "emoji-regex": {
                    "version": "8.0.0",
                    "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
                    "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
                    "dev": true
                },
                "is-fullwidth-code-point": {
                    "version": "3.0.0",
                    "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
                    "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
                    "dev": true
                },
                "string-width": {
                    "version": "4.2.3",
                    "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
                    "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
                    "dev": true,
                    "requires": {
                        "emoji-regex": "^8.0.0",
                        "is-fullwidth-code-point": "^3.0.0",
                        "strip-ansi": "^6.0.1"
                    }
                },
                "strip-ansi": {
                    "version": "6.0.1",
                    "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
                    "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
                    "dev": true,
                    "requires": {
                        "ansi-regex": "^5.0.1"
                    }
                }
            }
        },
        "clone-response": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/clone-response/-/clone-response-1.0.3.tgz",
            "integrity": "sha512-ROoL94jJH2dUVML2Y/5PEDNaSHgeOdSDicUyS7izcF63G6sTc/FTjLub4b8Il9S8S0beOfYt0TaA5qvFK+w0wA==",
            "dev": true,
            "requires": {
                "mimic-response": "^1.0.0"
            }
        },
        "code-excerpt": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/code-excerpt/-/code-excerpt-4.0.0.tgz",
            "integrity": "sha512-xxodCmBen3iy2i0WtAK8FlFNrRzjUqjRsMfho58xT/wvZU1YTM3fCnRjcy1gJPMepaRlgm/0e6w8SpWHpn3/cA==",
            "dev": true,
            "requires": {
                "convert-to-spaces": "^2.0.1"
            }
        },
        "color-convert": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
            "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
            "dev": true,
            "requires": {
                "color-name": "~1.1.4"
            }
        },
        "color-name": {
            "version": "1.1.4",
            "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
            "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
            "dev": true
        },
        "common-path-prefix": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/common-path-prefix/-/common-path-prefix-3.0.0.tgz",
            "integrity": "sha512-QE33hToZseCH3jS0qN96O/bSh3kaw/h+Tq7ngyY9eWDUnTlTNUyqfqvCXioLe5Na5jFsL78ra/wuBU4iuEgd4w==",
            "dev": true
        },
        "concat-map": {
            "version": "0.0.1",
            "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
            "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
            "dev": true
        },
        "concordance": {
            "version": "5.0.4",
            "resolved": "https://registry.npmjs.org/concordance/-/concordance-5.0.4.tgz",
            "integrity": "sha512-OAcsnTEYu1ARJqWVGwf4zh4JDfHZEaSNlNccFmt8YjB2l/n19/PF2viLINHc57vO4FKIAFl2FWASIGZZWZ2Kxw==",
            "dev": true,
            "requires": {
                "date-time": "^3.1.0",
                "esutils": "^2.0.3",
                "fast-diff": "^1.2.0",
                "js-string-escape": "^1.0.1",
                "lodash": "^4.17.15",
                "md5-hex": "^3.0.1",
                "semver": "^7.3.2",
                "well-known-symbols": "^2.0.0"
            }
        },
        "convert-to-spaces": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/convert-to-spaces/-/convert-to-spaces-2.0.1.tgz",
            "integrity": "sha512-rcQ1bsQO9799wq24uE5AM2tAILy4gXGIK/njFWcVQkGNZ96edlpY+A7bjwvzjYvLDyzmG1MmMLZhpcsb+klNMQ==",
            "dev": true
        },
        "create-require": {
            "version": "1.1.1",
            "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
            "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==",
            "dev": true
        },
        "currently-unhandled": {
            "version": "0.4.1",
            "resolved": "https://registry.npmjs.org/currently-unhandled/-/currently-unhandled-0.4.1.tgz",
            "integrity": "sha512-/fITjgjGU50vjQ4FH6eUoYu+iUoUKIXws2hL15JJpIR+BbTxaXQsMuuyjtNh2WqsSBS5nsaZHFsFecyw5CCAng==",
            "dev": true,
            "requires": {
                "array-find-index": "^1.0.1"
            }
        },
        "date-time": {
            "version": "3.1.0",
            "resolved": "https://registry.npmjs.org/date-time/-/date-time-3.1.0.tgz",
            "integrity": "sha512-uqCUKXE5q1PNBXjPqvwhwJf9SwMoAHBgWJ6DcrnS5o+W2JOiIILl0JEdVD8SGujrNS02GGxgwAg2PN2zONgtjg==",
            "dev": true,
            "requires": {
                "time-zone": "^1.0.0"
            }
        },
        "debug": {
            "version": "4.3.4",
            "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
            "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
            "dev": true,
            "requires": {
                "ms": "2.1.2"
            },
            "dependencies": {
                "ms": {
                    "version": "2.1.2",
                    "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
                    "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
                    "dev": true
                }
            }
        },
        "decompress-response": {
            "version": "6.0.0",
            "resolved": "https://registry.npmjs.org/decompress-response/-/decompress-response-6.0.0.tgz",
            "integrity": "sha512-aW35yZM6Bb/4oJlZncMH2LCoZtJXTRxES17vE3hoRiowU2kWHaJKFkSBDnDR+cm9J+9QhXmREyIfv0pji9ejCQ==",
            "dev": true,
            "requires": {
                "mimic-response": "^3.1.0"
            },
            "dependencies": {
                "mimic-response": {
                    "version": "3.1.0",
                    "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-3.1.0.tgz",
                    "integrity": "sha512-z0yWI+4FDrrweS8Zmt4Ej5HdJmky15+L2e6Wgn3+iK5fWzb6T3fhNFq2+MeTRb064c6Wr4N/wv0DzQTjNzHNGQ==",
                    "dev": true
                }
            }
        },
        "defer-to-connect": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/defer-to-connect/-/defer-to-connect-2.0.1.tgz",
            "integrity": "sha512-4tvttepXG1VaYGrRibk5EwJd1t4udunSOVMdLSAL6mId1ix438oPwPZMALY41FCijukO1L0twNcGsdzS7dHgDg==",
            "dev": true
        },
        "del": {
            "version": "6.1.1",
            "resolved": "https://registry.npmjs.org/del/-/del-6.1.1.tgz",
            "integrity": "sha512-ua8BhapfP0JUJKC/zV9yHHDW/rDoDxP4Zhn3AkA6/xT6gY7jYXJiaeyBZznYVujhZZET+UgcbZiQ7sN3WqcImg==",
            "dev": true,
            "requires": {
                "globby": "^11.0.1",
                "graceful-fs": "^4.2.4",
                "is-glob": "^4.0.1",
                "is-path-cwd": "^2.2.0",
                "is-path-inside": "^3.0.2",
                "p-map": "^4.0.0",
                "rimraf": "^3.0.2",
                "slash": "^3.0.0"
            },
            "dependencies": {
                "aggregate-error": {
                    "version": "3.1.0",
                    "resolved": "https://registry.npmjs.org/aggregate-error/-/aggregate-error-3.1.0.tgz",
                    "integrity": "sha512-4I7Td01quW/RpocfNayFdFVk1qSuoh0E7JrbRJ16nH01HhKFQ88INq9Sd+nd72zqRySlr9BmDA8xlEJ6vJMrYA==",
                    "dev": true,
                    "requires": {
                        "clean-stack": "^2.0.0",
                        "indent-string": "^4.0.0"
                    }
                },
                "clean-stack": {
                    "version": "2.2.0",
                    "resolved": "https://registry.npmjs.org/clean-stack/-/clean-stack-2.2.0.tgz",
                    "integrity": "sha512-4diC9HaTE+KRAMWhDhrGOECgWZxoevMc5TlkObMqNSsVU62PYzXZ/SMTjzyGAFF1YusgxGcSWTEXBhp0CPwQ1A==",
                    "dev": true
                },
                "globby": {
                    "version": "11.1.0",
                    "resolved": "https://registry.npmjs.org/globby/-/globby-11.1.0.tgz",
                    "integrity": "sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==",
                    "dev": true,
                    "requires": {
                        "array-union": "^2.1.0",
                        "dir-glob": "^3.0.1",
                        "fast-glob": "^3.2.9",
                        "ignore": "^5.2.0",
                        "merge2": "^1.4.1",
                        "slash": "^3.0.0"
                    }
                },
                "indent-string": {
                    "version": "4.0.0",
                    "resolved": "https://registry.npmjs.org/indent-string/-/indent-string-4.0.0.tgz",
                    "integrity": "sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg==",
                    "dev": true
                },
                "p-map": {
                    "version": "4.0.0",
                    "resolved": "https://registry.npmjs.org/p-map/-/p-map-4.0.0.tgz",
                    "integrity": "sha512-/bjOqmgETBYB5BoEeGVea8dmvHb2m9GLy1E9W43yeyfP6QQCZGFNa+XRceJEuDB6zqr+gKpIAmlLebMpykw/MQ==",
                    "dev": true,
                    "requires": {
                        "aggregate-error": "^3.0.0"
                    }
                }
            }
        },
        "depd": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
            "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
            "dev": true
        },
        "diff": {
            "version": "4.0.2",
            "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
            "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==",
            "dev": true
        },
        "dir-glob": {
            "version": "3.0.1",
            "resolved": "https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz",
            "integrity": "sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==",
            "dev": true,
            "requires": {
                "path-type": "^4.0.0"
            }
        },
        "eastasianwidth": {
            "version": "0.2.0",
            "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
            "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
            "dev": true
        },
        "emittery": {
            "version": "0.11.0",
            "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.11.0.tgz",
            "integrity": "sha512-S/7tzL6v5i+4iJd627Nhv9cLFIo5weAIlGccqJFpnBoDB8U1TF2k5tez4J/QNuxyyhWuFqHg1L84Kd3m7iXg6g==",
            "dev": true
        },
        "emoji-regex": {
            "version": "9.2.2",
            "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
            "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
            "dev": true
        },
        "end-of-stream": {
            "version": "1.4.4",
            "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
            "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
            "dev": true,
            "requires": {
                "once": "^1.4.0"
            }
        },
        "error-polyfill": {
            "version": "0.1.3",
            "resolved": "https://registry.npmjs.org/error-polyfill/-/error-polyfill-0.1.3.tgz",
            "integrity": "sha512-XHJk60ufE+TG/ydwp4lilOog549iiQF2OAPhkk9DdiYWMrltz5yhDz/xnKuenNwP7gy3dsibssO5QpVhkrSzzg==",
            "dev": true,
            "requires": {
                "capability": "^0.2.5",
                "o3": "^1.0.3",
                "u3": "^0.1.1"
            }
        },
        "escalade": {
            "version": "3.1.1",
            "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
            "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
            "dev": true
        },
        "escape-string-regexp": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-5.0.0.tgz",
            "integrity": "sha512-/veY75JbMK4j1yjvuUxuVsiS/hr/4iHs9FTT6cgTexxdE0Ly/glccBAkloH/DofkjRbZU3bnoj38mOmhkZ0lHw==",
            "dev": true
        },
        "esprima": {
            "version": "4.0.1",
            "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
            "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
            "dev": true
        },
        "esutils": {
            "version": "2.0.3",
            "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
            "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
            "dev": true
        },
        "fast-diff": {
            "version": "1.2.0",
            "resolved": "https://registry.npmjs.org/fast-diff/-/fast-diff-1.2.0.tgz",
            "integrity": "sha512-xJuoT5+L99XlZ8twedaRf6Ax2TgQVxvgZOYoPKqZufmJib0tL2tegPBOZb1pVNgIhlqDlA0eO0c3wBvQcmzx4w==",
            "dev": true
        },
        "fast-glob": {
            "version": "3.2.12",
            "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.2.12.tgz",
            "integrity": "sha512-DVj4CQIYYow0BlaelwK1pHl5n5cRSJfM60UA0zK891sVInoPri2Ekj7+e1CT3/3qxXenpI+nBBmQAcJPJgaj4w==",
            "dev": true,
            "requires": {
                "@nodelib/fs.stat": "^2.0.2",
                "@nodelib/fs.walk": "^1.2.3",
                "glob-parent": "^5.1.2",
                "merge2": "^1.3.0",
                "micromatch": "^4.0.4"
            }
        },
        "fastq": {
            "version": "1.14.0",
            "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.14.0.tgz",
            "integrity": "sha512-eR2D+V9/ExcbF9ls441yIuN6TI2ED1Y2ZcA5BmMtJsOkWOFRJQ0Jt0g1UwqXJJVAb+V+umH5Dfr8oh4EVP7VVg==",
            "dev": true,
            "requires": {
                "reusify": "^1.0.4"
            }
        },
        "figures": {
            "version": "4.0.1",
            "resolved": "https://registry.npmjs.org/figures/-/figures-4.0.1.tgz",
            "integrity": "sha512-rElJwkA/xS04Vfg+CaZodpso7VqBknOYbzi6I76hI4X80RUjkSxO2oAyPmGbuXUppywjqndOrQDl817hDnI++w==",
            "dev": true,
            "requires": {
                "escape-string-regexp": "^5.0.0",
                "is-unicode-supported": "^1.2.0"
            }
        },
        "fill-range": {
            "version": "7.0.1",
            "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
            "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
            "dev": true,
            "requires": {
                "to-regex-range": "^5.0.1"
            }
        },
        "find-up": {
            "version": "6.3.0",
            "resolved": "https://registry.npmjs.org/find-up/-/find-up-6.3.0.tgz",
            "integrity": "sha512-v2ZsoEuVHYy8ZIlYqwPe/39Cy+cFDzp4dXPaxNvkEuouymu+2Jbz0PxpKarJHYJTmv2HWT3O382qY8l4jMWthw==",
            "dev": true,
            "requires": {
                "locate-path": "^7.1.0",
                "path-exists": "^5.0.0"
            }
        },
        "fs-extra": {
            "version": "10.1.0",
            "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
            "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
            "dev": true,
            "requires": {
                "graceful-fs": "^4.2.0",
                "jsonfile": "^6.0.1",
                "universalify": "^2.0.0"
            }
        },
        "fs-minipass": {
            "version": "2.1.0",
            "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
            "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
            "dev": true,
            "requires": {
                "minipass": "^3.0.0"
            },
            "dependencies": {
                "minipass": {
                    "version": "3.3.6",
                    "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
                    "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
                    "dev": true,
                    "requires": {
                        "yallist": "^4.0.0"
                    }
                }
            }
        },
        "fs.realpath": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
            "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
            "dev": true
        },
        "fsevents": {
            "version": "2.3.2",
            "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
            "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
            "dev": true,
            "optional": true
        },
        "get-caller-file": {
            "version": "2.0.5",
            "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
            "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
            "dev": true
        },
        "get-stream": {
            "version": "5.2.0",
            "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
            "integrity": "sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
            "dev": true,
            "requires": {
                "pump": "^3.0.0"
            }
        },
        "glob": {
            "version": "7.2.3",
            "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
            "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
            "dev": true,
            "requires": {
                "fs.realpath": "^1.0.0",
                "inflight": "^1.0.4",
                "inherits": "2",
                "minimatch": "^3.1.1",
                "once": "^1.3.0",
                "path-is-absolute": "^1.0.0"
            }
        },
        "glob-parent": {
            "version": "5.1.2",
            "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
            "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
            "dev": true,
            "requires": {
                "is-glob": "^4.0.1"
            }
        },
        "globby": {
            "version": "13.1.3",
            "resolved": "https://registry.npmjs.org/globby/-/globby-13.1.3.tgz",
            "integrity": "sha512-8krCNHXvlCgHDpegPzleMq07yMYTO2sXKASmZmquEYWEmCx6J5UTRbp5RwMJkTJGtcQ44YpiUYUiN0b9mzy8Bw==",
            "dev": true,
            "requires": {
                "dir-glob": "^3.0.1",
                "fast-glob": "^3.2.11",
                "ignore": "^5.2.0",
                "merge2": "^1.4.1",
                "slash": "^4.0.0"
            },
            "dependencies": {
                "slash": {
                    "version": "4.0.0",
                    "resolved": "https://registry.npmjs.org/slash/-/slash-4.0.0.tgz",
                    "integrity": "sha512-3dOsAHXXUkQTpOYcoAxLIorMTp4gIQr5IW3iVb7A7lFIp0VHhnynm9izx6TssdrIcVIESAlVjtnO2K8bg+Coew==",
                    "dev": true
                }
            }
        },
        "got": {
            "version": "11.8.6",
            "resolved": "https://registry.npmjs.org/got/-/got-11.8.6.tgz",
            "integrity": "sha512-6tfZ91bOr7bOXnK7PRDCGBLa1H4U080YHNaAQ2KsMGlLEzRbk44nsZF2E1IeRc3vtJHPVbKCYgdFbaGO2ljd8g==",
            "dev": true,
            "requires": {
                "@sindresorhus/is": "^4.0.0",
                "@szmarczak/http-timer": "^4.0.5",
                "@types/cacheable-request": "^6.0.1",
                "@types/responselike": "^1.0.0",
                "cacheable-lookup": "^5.0.3",
                "cacheable-request": "^7.0.2",
                "decompress-response": "^6.0.0",
                "http2-wrapper": "^1.0.0-beta.5.2",
                "lowercase-keys": "^2.0.0",
                "p-cancelable": "^2.0.0",
                "responselike": "^2.0.0"
            }
        },
        "graceful-fs": {
            "version": "4.2.10",
            "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.10.tgz",
            "integrity": "sha512-9ByhssR2fPVsNZj478qUUbKfmL0+t5BDVyjShtyZZLiK7ZDAArFFfopyOTj0M05wE2tJPisA4iTnnXl2YoPvOA==",
            "dev": true
        },
        "http-cache-semantics": {
            "version": "4.1.0",
            "resolved": "https://registry.npmjs.org/http-cache-semantics/-/http-cache-semantics-4.1.0.tgz",
            "integrity": "sha512-carPklcUh7ROWRK7Cv27RPtdhYhUsela/ue5/jKzjegVvXDqM2ILE9Q2BGn9JZJh1g87cp56su/FgQSzcWS8cQ==",
            "dev": true
        },
        "http-errors": {
            "version": "1.8.1",
            "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
            "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
            "dev": true,
            "requires": {
                "depd": "~1.1.2",
                "inherits": "2.0.4",
                "setprototypeof": "1.2.0",
                "statuses": ">= 1.5.0 < 2",
                "toidentifier": "1.0.1"
            },
            "dependencies": {
                "depd": {
                    "version": "1.1.2",
                    "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
                    "integrity": "sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ==",
                    "dev": true
                }
            }
        },
        "http2-wrapper": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/http2-wrapper/-/http2-wrapper-1.0.3.tgz",
            "integrity": "sha512-V+23sDMr12Wnz7iTcDeJr3O6AIxlnvT/bmaAAAP/Xda35C90p9599p0F1eHR/N1KILWSoWVAiOMFjBBXaXSMxg==",
            "dev": true,
            "requires": {
                "quick-lru": "^5.1.1",
                "resolve-alpn": "^1.0.0"
            }
        },
        "ignore": {
            "version": "5.2.4",
            "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.2.4.tgz",
            "integrity": "sha512-MAb38BcSbH0eHNBxn7ql2NH/kX33OkB3lZ1BNdh7ENeRChHTYsTvWrMubiIAMNS2llXEEgZ1MUOBtXChP3kaFQ==",
            "dev": true
        },
        "ignore-by-default": {
            "version": "2.1.0",
            "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-2.1.0.tgz",
            "integrity": "sha512-yiWd4GVmJp0Q6ghmM2B/V3oZGRmjrKLXvHR3TE1nfoXsmoggllfZUQe74EN0fJdPFZu2NIvNdrMMLm3OsV7Ohw==",
            "dev": true
        },
        "imurmurhash": {
            "version": "0.1.4",
            "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
            "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
            "dev": true
        },
        "indent-string": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/indent-string/-/indent-string-5.0.0.tgz",
            "integrity": "sha512-m6FAo/spmsW2Ab2fU35JTYwtOKa2yAwXSwgjSv1TJzh4Mh7mC3lzAOVLBprb72XsTrgkEIsl7YrFNAiDiRhIGg==",
            "dev": true
        },
        "inflight": {
            "version": "1.0.6",
            "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
            "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
            "dev": true,
            "requires": {
                "once": "^1.3.0",
                "wrappy": "1"
            }
        },
        "inherits": {
            "version": "2.0.4",
            "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
            "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
            "dev": true
        },
        "irregular-plurals": {
            "version": "3.3.0",
            "resolved": "https://registry.npmjs.org/irregular-plurals/-/irregular-plurals-3.3.0.tgz",
            "integrity": "sha512-MVBLKUTangM3EfRPFROhmWQQKRDsrgI83J8GS3jXy+OwYqiR2/aoWndYQ5416jLE3uaGgLH7ncme3X9y09gZ3g==",
            "dev": true
        },
        "is-binary-path": {
            "version": "2.1.0",
            "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
            "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
            "dev": true,
            "requires": {
                "binary-extensions": "^2.0.0"
            }
        },
        "is-error": {
            "version": "2.2.2",
            "resolved": "https://registry.npmjs.org/is-error/-/is-error-2.2.2.tgz",
            "integrity": "sha512-IOQqts/aHWbiisY5DuPJQ0gcbvaLFCa7fBa9xoLfxBZvQ+ZI/Zh9xoI7Gk+G64N0FdK4AbibytHht2tWgpJWLg==",
            "dev": true
        },
        "is-extglob": {
            "version": "2.1.1",
            "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
            "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
            "dev": true
        },
        "is-fullwidth-code-point": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-4.0.0.tgz",
            "integrity": "sha512-O4L094N2/dZ7xqVdrXhh9r1KODPJpFms8B5sGdJLPy664AgvXsreZUyCQQNItZRDlYug4xStLjNp/sz3HvBowQ==",
            "dev": true
        },
        "is-glob": {
            "version": "4.0.3",
            "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
            "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
            "dev": true,
            "requires": {
                "is-extglob": "^2.1.1"
            }
        },
        "is-number": {
            "version": "7.0.0",
            "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
            "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
            "dev": true
        },
        "is-path-cwd": {
            "version": "2.2.0",
            "resolved": "https://registry.npmjs.org/is-path-cwd/-/is-path-cwd-2.2.0.tgz",
            "integrity": "sha512-w942bTcih8fdJPJmQHFzkS76NEP8Kzzvmw92cXsazb8intwLqPibPPdXf4ANdKV3rYMuuQYGIWtvz9JilB3NFQ==",
            "dev": true
        },
        "is-path-inside": {
            "version": "3.0.3",
            "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
            "integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==",
            "dev": true
        },
        "is-plain-object": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/is-plain-object/-/is-plain-object-5.0.0.tgz",
            "integrity": "sha512-VRSzKkbMm5jMDoKLbltAkFQ5Qr7VDiTFGXxYFXXowVj387GeGNOCsOH6Msy00SGZ3Fp84b1Naa1psqgcCIEP5Q==",
            "dev": true
        },
        "is-promise": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/is-promise/-/is-promise-4.0.0.tgz",
            "integrity": "sha512-hvpoI6korhJMnej285dSg6nu1+e6uxs7zG3BYAm5byqDsgJNWwxzM6z6iZiAgQR4TJ30JmBTOwqZUw3WlyH3AQ==",
            "dev": true
        },
        "is-unicode-supported": {
            "version": "1.3.0",
            "resolved": "https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-1.3.0.tgz",
            "integrity": "sha512-43r2mRvz+8JRIKnWJ+3j8JtjRKZ6GmjzfaE/qiBJnikNnYv/6bagRJ1kUhNk8R5EX/GkobD+r+sfxCPJsiKBLQ==",
            "dev": true
        },
        "js-sha256": {
            "version": "0.9.0",
            "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
            "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA==",
            "dev": true
        },
        "js-string-escape": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/js-string-escape/-/js-string-escape-1.0.1.tgz",
            "integrity": "sha512-Smw4xcfIQ5LVjAOuJCvN/zIodzA/BBSsluuoSykP+lUvScIi4U6RJLfwHet5cxFnCswUjISV8oAXaqaJDY3chg==",
            "dev": true
        },
        "js-yaml": {
            "version": "3.14.1",
            "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
            "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
            "dev": true,
            "requires": {
                "argparse": "^1.0.7",
                "esprima": "^4.0.0"
            }
        },
        "json-buffer": {
            "version": "3.0.1",
            "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
            "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
            "dev": true
        },
        "jsonfile": {
            "version": "6.1.0",
            "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
            "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
            "dev": true,
            "requires": {
                "graceful-fs": "^4.1.6",
                "universalify": "^2.0.0"
            }
        },
        "keyv": {
            "version": "4.5.2",
            "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.2.tgz",
            "integrity": "sha512-5MHbFaKn8cNSmVW7BYnijeAVlE4cYA/SVkifVgrh7yotnfhKmjuXpDKjrABLnT0SfHWV21P8ow07OGfRrNDg8g==",
            "dev": true,
            "requires": {
                "json-buffer": "3.0.1"
            }
        },
        "load-json-file": {
            "version": "7.0.1",
            "resolved": "https://registry.npmjs.org/load-json-file/-/load-json-file-7.0.1.tgz",
            "integrity": "sha512-Gnxj3ev3mB5TkVBGad0JM6dmLiQL+o0t23JPBZ9sd+yvSLk05mFoqKBw5N8gbbkU4TNXyqCgIrl/VM17OgUIgQ==",
            "dev": true
        },
        "locate-path": {
            "version": "7.1.1",
            "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-7.1.1.tgz",
            "integrity": "sha512-vJXaRMJgRVD3+cUZs3Mncj2mxpt5mP0EmNOsxRSZRMlbqjvxzDEOIUWXGmavo0ZC9+tNZCBLQ66reA11nbpHZg==",
            "dev": true,
            "requires": {
                "p-locate": "^6.0.0"
            }
        },
        "lodash": {
            "version": "4.17.21",
            "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
            "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
            "dev": true
        },
        "lowercase-keys": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-2.0.0.tgz",
            "integrity": "sha512-tqNXrS78oMOE73NMxK4EMLQsQowWf8jKooH9g7xPavRT706R6bkQJ6DY2Te7QukaZsulxa30wQ7bk0pm4XiHmA==",
            "dev": true
        },
        "lru-cache": {
            "version": "6.0.0",
            "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
            "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
            "dev": true,
            "requires": {
                "yallist": "^4.0.0"
            }
        },
        "make-error": {
            "version": "1.3.6",
            "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
            "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==",
            "dev": true
        },
        "map-age-cleaner": {
            "version": "0.1.3",
            "resolved": "https://registry.npmjs.org/map-age-cleaner/-/map-age-cleaner-0.1.3.tgz",
            "integrity": "sha512-bJzx6nMoP6PDLPBFmg7+xRKeFZvFboMrGlxmNj9ClvX53KrmvM5bXFXEWjbz4cz1AFn+jWJ9z/DJSz7hrs0w3w==",
            "dev": true,
            "requires": {
                "p-defer": "^1.0.0"
            }
        },
        "matcher": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/matcher/-/matcher-5.0.0.tgz",
            "integrity": "sha512-s2EMBOWtXFc8dgqvoAzKJXxNHibcdJMV0gwqKUaw9E2JBJuGUK7DrNKrA6g/i+v72TT16+6sVm5mS3thaMLQUw==",
            "dev": true,
            "requires": {
                "escape-string-regexp": "^5.0.0"
            }
        },
        "md5-hex": {
            "version": "3.0.1",
            "resolved": "https://registry.npmjs.org/md5-hex/-/md5-hex-3.0.1.tgz",
            "integrity": "sha512-BUiRtTtV39LIJwinWBjqVsU9xhdnz7/i889V859IBFpuqGAj6LuOvHv5XLbgZ2R7ptJoJaEcxkv88/h25T7Ciw==",
            "dev": true,
            "requires": {
                "blueimp-md5": "^2.10.0"
            }
        },
        "mem": {
            "version": "9.0.2",
            "resolved": "https://registry.npmjs.org/mem/-/mem-9.0.2.tgz",
            "integrity": "sha512-F2t4YIv9XQUBHt6AOJ0y7lSmP1+cY7Fm1DRh9GClTGzKST7UWLMx6ly9WZdLH/G/ppM5RL4MlQfRT71ri9t19A==",
            "dev": true,
            "requires": {
                "map-age-cleaner": "^0.1.3",
                "mimic-fn": "^4.0.0"
            }
        },
        "merge2": {
            "version": "1.4.1",
            "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
            "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
            "dev": true
        },
        "micromatch": {
            "version": "4.0.5",
            "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.5.tgz",
            "integrity": "sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==",
            "dev": true,
            "requires": {
                "braces": "^3.0.2",
                "picomatch": "^2.3.1"
            }
        },
        "mimic-fn": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-4.0.0.tgz",
            "integrity": "sha512-vqiC06CuhBTUdZH+RYl8sFrL096vA45Ok5ISO6sE/Mr1jRbGH4Csnhi8f3wKVl7x8mO4Au7Ir9D3Oyv1VYMFJw==",
            "dev": true
        },
        "mimic-response": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-1.0.1.tgz",
            "integrity": "sha512-j5EctnkH7amfV/q5Hgmoal1g2QHFJRraOtmx0JpIqkxhBhI/lJSl1nMpQ45hVarwNETOoWEimndZ4QK0RHxuxQ==",
            "dev": true
        },
        "minimatch": {
            "version": "3.1.2",
            "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
            "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
            "dev": true,
            "requires": {
                "brace-expansion": "^1.1.7"
            }
        },
        "minipass": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/minipass/-/minipass-4.0.0.tgz",
            "integrity": "sha512-g2Uuh2jEKoht+zvO6vJqXmYpflPqzRBT+Th2h01DKh5z7wbY/AZ2gCQ78cP70YoHPyFdY30YBV5WxgLOEwOykw==",
            "dev": true,
            "requires": {
                "yallist": "^4.0.0"
            }
        },
        "minizlib": {
            "version": "2.1.2",
            "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
            "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
            "dev": true,
            "requires": {
                "minipass": "^3.0.0",
                "yallist": "^4.0.0"
            },
            "dependencies": {
                "minipass": {
                    "version": "3.3.6",
                    "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
                    "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
                    "dev": true,
                    "requires": {
                        "yallist": "^4.0.0"
                    }
                }
            }
        },
        "mkdirp": {
            "version": "1.0.4",
            "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
            "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
            "dev": true
        },
        "ms": {
            "version": "2.1.3",
            "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
            "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
            "dev": true
        },
        "mustache": {
            "version": "4.2.0",
            "resolved": "https://registry.npmjs.org/mustache/-/mustache-4.2.0.tgz",
            "integrity": "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ==",
            "dev": true
        },
        "near-api-js": {
            "version": "0.44.2",
            "resolved": "https://registry.npmjs.org/near-api-js/-/near-api-js-0.44.2.tgz",
            "integrity": "sha512-eMnc4V+geggapEUa3nU2p8HSHn/njtloI4P2mceHQWO8vDE1NGpnAw8FuTBrLmXSgIv9m6oocgFc9t3VNf5zwg==",
            "dev": true,
            "requires": {
                "bn.js": "5.2.0",
                "borsh": "^0.6.0",
                "bs58": "^4.0.0",
                "depd": "^2.0.0",
                "error-polyfill": "^0.1.3",
                "http-errors": "^1.7.2",
                "js-sha256": "^0.9.0",
                "mustache": "^4.0.0",
                "node-fetch": "^2.6.1",
                "text-encoding-utf-8": "^1.0.2",
                "tweetnacl": "^1.0.1"
            },
            "dependencies": {
                "bn.js": {
                    "version": "5.2.0",
                    "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.0.tgz",
                    "integrity": "sha512-D7iWRBvnZE8ecXiLj/9wbxH7Tk79fAh8IHaTNq1RWRixsS02W+5qS+iE9yq6RYl0asXx5tw0bLhmT5pIfbSquw==",
                    "dev": true
                },
                "borsh": {
                    "version": "0.6.0",
                    "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.6.0.tgz",
                    "integrity": "sha512-sl5k89ViqsThXQpYa9XDtz1sBl3l1lI313cFUY1HKr+wvMILnb+58xpkqTNrYbelh99dY7K8usxoCusQmqix9Q==",
                    "dev": true,
                    "requires": {
                        "bn.js": "^5.2.0",
                        "bs58": "^4.0.0",
                        "text-encoding-utf-8": "^1.0.2"
                    }
                }
            }
        },
        "near-sandbox": {
            "version": "0.0.14",
            "resolved": "https://registry.npmjs.org/near-sandbox/-/near-sandbox-0.0.14.tgz",
            "integrity": "sha512-wQ1jcD6W6U4V83D0Zxgi2qedMkmTh5iiqm2t/oriKR4rrTql/j8QR/Ip/NfoIH/plFT+vGungKL+B4HxfNyyNg==",
            "dev": true,
            "requires": {
                "got": "^11.8.2",
                "tar": "^6.1.0"
            }
        },
        "near-units": {
            "version": "0.1.9",
            "resolved": "https://registry.npmjs.org/near-units/-/near-units-0.1.9.tgz",
            "integrity": "sha512-xiuBjpNsi+ywiu7P6iWRZdgFm7iCr/cfWlVO6+e5uaAqH4mE1rrurElyrL91llNDSnMwogd9XmlZOw5KbbHNsA==",
            "dev": true,
            "requires": {
                "bn.js": "^5.2.0"
            }
        },
        "near-workspaces": {
            "version": "3.2.2",
            "resolved": "https://registry.npmjs.org/near-workspaces/-/near-workspaces-3.2.2.tgz",
            "integrity": "sha512-Y26FyPccs3lTKFpOzeWQy5urtSe0hcdME4ePbidzHNQPOXCub06htnvsoVEUNGVejc50f5nVHcdCiYO8mtEdTA==",
            "dev": true,
            "requires": {
                "base64url": "^3.0.1",
                "bn.js": "^5.2.0",
                "borsh": "^0.5.0",
                "bs58": "^4.0.1",
                "callsites": "^4.0.0",
                "fs-extra": "^10.0.0",
                "js-sha256": "^0.9.0",
                "near-api-js": "^0.44.1",
                "near-sandbox": "^0.0.14",
                "near-units": "^0.1.9",
                "node-port-check": "^2.0.1",
                "promisify-child-process": "^4.1.1",
                "pure-uuid": "^1.6.2",
                "rimraf": "^3.0.2",
                "temp-dir": "^2.0.0"
            }
        },
        "node-fetch": {
            "version": "2.6.7",
            "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
            "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
            "dev": true,
            "requires": {
                "whatwg-url": "^5.0.0"
            }
        },
        "node-port-check": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/node-port-check/-/node-port-check-2.0.1.tgz",
            "integrity": "sha512-PV1tj5OPbWwxvhPcChXxwCIKl/IfVEdPP4u/gQz2lao/VGoeIUXb/4U72KSHLZpTVBmgTnMm0me7yR0wUsIuPg==",
            "dev": true
        },
        "nofilter": {
            "version": "3.1.0",
            "resolved": "https://registry.npmjs.org/nofilter/-/nofilter-3.1.0.tgz",
            "integrity": "sha512-l2NNj07e9afPnhAhvgVrCD/oy2Ai1yfLpuo3EpiO1jFTsB4sFz6oIfAfSZyQzVpkZQ9xS8ZS5g1jCBgq4Hwo0g==",
            "dev": true
        },
        "normalize-path": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
            "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
            "dev": true
        },
        "normalize-url": {
            "version": "6.1.0",
            "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-6.1.0.tgz",
            "integrity": "sha512-DlL+XwOy3NxAQ8xuC0okPgK46iuVNAK01YN7RueYBqqFeGsBjV9XmCAzAdgt+667bCl5kPh9EqKKDwnaPG1I7A==",
            "dev": true
        },
        "o3": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/o3/-/o3-1.0.3.tgz",
            "integrity": "sha512-f+4n+vC6s4ysy7YO7O2gslWZBUu8Qj2i2OUJOvjRxQva7jVjYjB29jrr9NCjmxZQR0gzrOcv1RnqoYOeMs5VRQ==",
            "dev": true,
            "requires": {
                "capability": "^0.2.5"
            }
        },
        "once": {
            "version": "1.4.0",
            "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
            "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
            "dev": true,
            "requires": {
                "wrappy": "1"
            }
        },
        "p-cancelable": {
            "version": "2.1.1",
            "resolved": "https://registry.npmjs.org/p-cancelable/-/p-cancelable-2.1.1.tgz",
            "integrity": "sha512-BZOr3nRQHOntUjTrH8+Lh54smKHoHyur8We1V8DSMVrl5A2malOOwuJRnKRDjSnkoeBh4at6BwEnb5I7Jl31wg==",
            "dev": true
        },
        "p-defer": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/p-defer/-/p-defer-1.0.0.tgz",
            "integrity": "sha512-wB3wfAxZpk2AzOfUMJNL+d36xothRSyj8EXOa4f6GMqYDN9BJaaSISbsk+wS9abmnebVw95C2Kb5t85UmpCxuw==",
            "dev": true
        },
        "p-event": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/p-event/-/p-event-5.0.1.tgz",
            "integrity": "sha512-dd589iCQ7m1L0bmC5NLlVYfy3TbBEsMUfWx9PyAgPeIcFZ/E2yaTZ4Rz4MiBmmJShviiftHVXOqfnfzJ6kyMrQ==",
            "dev": true,
            "requires": {
                "p-timeout": "^5.0.2"
            }
        },
        "p-limit": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-4.0.0.tgz",
            "integrity": "sha512-5b0R4txpzjPWVw/cXXUResoD4hb6U/x9BH08L7nw+GN1sezDzPdxeRvpc9c433fZhBan/wusjbCsqwqm4EIBIQ==",
            "dev": true,
            "requires": {
                "yocto-queue": "^1.0.0"
            }
        },
        "p-locate": {
            "version": "6.0.0",
            "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-6.0.0.tgz",
            "integrity": "sha512-wPrq66Llhl7/4AGC6I+cqxT07LhXvWL08LNXz1fENOw0Ap4sRZZ/gZpTTJ5jpurzzzfS2W/Ge9BY3LgLjCShcw==",
            "dev": true,
            "requires": {
                "p-limit": "^4.0.0"
            }
        },
        "p-map": {
            "version": "5.5.0",
            "resolved": "https://registry.npmjs.org/p-map/-/p-map-5.5.0.tgz",
            "integrity": "sha512-VFqfGDHlx87K66yZrNdI4YGtD70IRyd+zSvgks6mzHPRNkoKy+9EKP4SFC77/vTTQYmRmti7dvqC+m5jBrBAcg==",
            "dev": true,
            "requires": {
                "aggregate-error": "^4.0.0"
            }
        },
        "p-timeout": {
            "version": "5.1.0",
            "resolved": "https://registry.npmjs.org/p-timeout/-/p-timeout-5.1.0.tgz",
            "integrity": "sha512-auFDyzzzGZZZdHz3BtET9VEz0SE/uMEAx7uWfGPucfzEwwe/xH0iVeZibQmANYE/hp9T2+UUZT5m+BKyrDp3Ew==",
            "dev": true
        },
        "parse-ms": {
            "version": "2.1.0",
            "resolved": "https://registry.npmjs.org/parse-ms/-/parse-ms-2.1.0.tgz",
            "integrity": "sha512-kHt7kzLoS9VBZfUsiKjv43mr91ea+U05EyKkEtqp7vNbHxmaVuEqN7XxeEVnGrMtYOAxGrDElSi96K7EgO1zCA==",
            "dev": true
        },
        "path-exists": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-5.0.0.tgz",
            "integrity": "sha512-RjhtfwJOxzcFmNOi6ltcbcu4Iu+FL3zEj83dk4kAS+fVpTxXLO1b38RvJgT/0QwvV/L3aY9TAnyv0EOqW4GoMQ==",
            "dev": true
        },
        "path-is-absolute": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
            "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
            "dev": true
        },
        "path-type": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
            "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
            "dev": true
        },
        "picomatch": {
            "version": "2.3.1",
            "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
            "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
            "dev": true
        },
        "pkg-conf": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/pkg-conf/-/pkg-conf-4.0.0.tgz",
            "integrity": "sha512-7dmgi4UY4qk+4mj5Cd8v/GExPo0K+SlY+hulOSdfZ/T6jVH6//y7NtzZo5WrfhDBxuQ0jCa7fLZmNaNh7EWL/w==",
            "dev": true,
            "requires": {
                "find-up": "^6.0.0",
                "load-json-file": "^7.0.0"
            }
        },
        "plur": {
            "version": "5.1.0",
            "resolved": "https://registry.npmjs.org/plur/-/plur-5.1.0.tgz",
            "integrity": "sha512-VP/72JeXqak2KiOzjgKtQen5y3IZHn+9GOuLDafPv0eXa47xq0At93XahYBs26MsifCQ4enGKwbjBTKgb9QJXg==",
            "dev": true,
            "requires": {
                "irregular-plurals": "^3.3.0"
            }
        },
        "pretty-ms": {
            "version": "7.0.1",
            "resolved": "https://registry.npmjs.org/pretty-ms/-/pretty-ms-7.0.1.tgz",
            "integrity": "sha512-973driJZvxiGOQ5ONsFhOF/DtzPMOMtgC11kCpUrPGMTgqp2q/1gwzCquocrN33is0VZ5GFHXZYMM9l6h67v2Q==",
            "dev": true,
            "requires": {
                "parse-ms": "^2.1.0"
            }
        },
        "promisify-child-process": {
            "version": "4.1.1",
            "resolved": "https://registry.npmjs.org/promisify-child-process/-/promisify-child-process-4.1.1.tgz",
            "integrity": "sha512-/sRjHZwoXf1rJ+8s4oWjYjGRVKNK1DUnqfRC1Zek18pl0cN6k3yJ1cCbqd0tWNe4h0Gr+SY4vR42N33+T82WkA==",
            "dev": true
        },
        "pump": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.0.tgz",
            "integrity": "sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==",
            "dev": true,
            "requires": {
                "end-of-stream": "^1.1.0",
                "once": "^1.3.1"
            }
        },
        "pure-uuid": {
            "version": "1.6.2",
            "resolved": "https://registry.npmjs.org/pure-uuid/-/pure-uuid-1.6.2.tgz",
            "integrity": "sha512-WQ4xz74ApW6s0BToRuuyuMo9g0VHx1HljY0H2gPng+mqqz/K1yLj7sHZonZZQ2++WfHl/ZzruilWvuz+WtmxjQ==",
            "dev": true
        },
        "queue-microtask": {
            "version": "1.2.3",
            "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
            "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
            "dev": true
        },
        "quick-lru": {
            "version": "5.1.1",
            "resolved": "https://registry.npmjs.org/quick-lru/-/quick-lru-5.1.1.tgz",
            "integrity": "sha512-WuyALRjWPDGtt/wzJiadO5AXY+8hZ80hVpe6MyivgraREW751X3SbhRvG3eLKOYN+8VEvqLcf3wdnt44Z4S4SA==",
            "dev": true
        },
        "readdirp": {
            "version": "3.6.0",
            "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
            "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
            "dev": true,
            "requires": {
                "picomatch": "^2.2.1"
            }
        },
        "require-directory": {
            "version": "2.1.1",
            "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
            "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
            "dev": true
        },
        "resolve-alpn": {
            "version": "1.2.1",
            "resolved": "https://registry.npmjs.org/resolve-alpn/-/resolve-alpn-1.2.1.tgz",
            "integrity": "sha512-0a1F4l73/ZFZOakJnQ3FvkJ2+gSTQWz/r2KE5OdDY0TxPm5h4GkqkWWfM47T7HsbnOtcJVEF4epCVy6u7Q3K+g==",
            "dev": true
        },
        "resolve-cwd": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
            "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
            "dev": true,
            "requires": {
                "resolve-from": "^5.0.0"
            }
        },
        "resolve-from": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
            "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
            "dev": true
        },
        "responselike": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/responselike/-/responselike-2.0.1.tgz",
            "integrity": "sha512-4gl03wn3hj1HP3yzgdI7d3lCkF95F21Pz4BPGvKHinyQzALR5CapwC8yIi0Rh58DEMQ/SguC03wFj2k0M/mHhw==",
            "dev": true,
            "requires": {
                "lowercase-keys": "^2.0.0"
            }
        },
        "reusify": {
            "version": "1.0.4",
            "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
            "integrity": "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==",
            "dev": true
        },
        "rimraf": {
            "version": "3.0.2",
            "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
            "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
            "dev": true,
            "requires": {
                "glob": "^7.1.3"
            }
        },
        "run-parallel": {
            "version": "1.2.0",
            "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
            "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
            "dev": true,
            "requires": {
                "queue-microtask": "^1.2.2"
            }
        },
        "safe-buffer": {
            "version": "5.2.1",
            "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
            "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
            "dev": true
        },
        "semver": {
            "version": "7.3.8",
            "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.8.tgz",
            "integrity": "sha512-NB1ctGL5rlHrPJtFDVIVzTyQylMLu9N9VICA6HSFJo8MCGVTMW6gfpicwKmmK/dAjTOrqu5l63JJOpDSrAis3A==",
            "dev": true,
            "requires": {
                "lru-cache": "^6.0.0"
            }
        },
        "serialize-error": {
            "version": "7.0.1",
            "resolved": "https://registry.npmjs.org/serialize-error/-/serialize-error-7.0.1.tgz",
            "integrity": "sha512-8I8TjW5KMOKsZQTvoxjuSIa7foAwPWGOts+6o7sgjz41/qMD9VQHEDxi6PBvK2l0MXUmqZyNpUK+T2tQaaElvw==",
            "dev": true,
            "requires": {
                "type-fest": "^0.13.1"
            }
        },
        "setprototypeof": {
            "version": "1.2.0",
            "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
            "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
            "dev": true
        },
        "signal-exit": {
            "version": "3.0.7",
            "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
            "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
            "dev": true
        },
        "slash": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
            "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
            "dev": true
        },
        "slice-ansi": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/slice-ansi/-/slice-ansi-5.0.0.tgz",
            "integrity": "sha512-FC+lgizVPfie0kkhqUScwRu1O/lF6NOgJmlCgK+/LYxDCTk8sGelYaHDhFcDN+Sn3Cv+3VSa4Byeo+IMCzpMgQ==",
            "dev": true,
            "requires": {
                "ansi-styles": "^6.0.0",
                "is-fullwidth-code-point": "^4.0.0"
            }
        },
        "sprintf-js": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
            "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
            "dev": true
        },
        "stack-utils": {
            "version": "2.0.6",
            "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
            "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
            "dev": true,
            "requires": {
                "escape-string-regexp": "^2.0.0"
            },
            "dependencies": {
                "escape-string-regexp": {
                    "version": "2.0.0",
                    "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
                    "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==",
                    "dev": true
                }
            }
        },
        "statuses": {
            "version": "1.5.0",
            "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
            "integrity": "sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA==",
            "dev": true
        },
        "string-width": {
            "version": "5.1.2",
            "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
            "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
            "dev": true,
            "requires": {
                "eastasianwidth": "^0.2.0",
                "emoji-regex": "^9.2.2",
                "strip-ansi": "^7.0.1"
            }
        },
        "strip-ansi": {
            "version": "7.0.1",
            "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.0.1.tgz",
            "integrity": "sha512-cXNxvT8dFNRVfhVME3JAe98mkXDYN2O1l7jmcwMnOslDeESg1rF/OZMtK0nRAhiari1unG5cD4jG3rapUAkLbw==",
            "dev": true,
            "requires": {
                "ansi-regex": "^6.0.1"
            }
        },
        "supertap": {
            "version": "3.0.1",
            "resolved": "https://registry.npmjs.org/supertap/-/supertap-3.0.1.tgz",
            "integrity": "sha512-u1ZpIBCawJnO+0QePsEiOknOfCRq0yERxiAchT0i4li0WHNUJbf0evXXSXOcCAR4M8iMDoajXYmstm/qO81Isw==",
            "dev": true,
            "requires": {
                "indent-string": "^5.0.0",
                "js-yaml": "^3.14.1",
                "serialize-error": "^7.0.1",
                "strip-ansi": "^7.0.1"
            }
        },
        "tar": {
            "version": "6.1.13",
            "resolved": "https://registry.npmjs.org/tar/-/tar-6.1.13.tgz",
            "integrity": "sha512-jdIBIN6LTIe2jqzay/2vtYLlBHa3JF42ot3h1dW8Q0PaAG4v8rm0cvpVePtau5C6OKXGGcgO9q2AMNSWxiLqKw==",
            "dev": true,
            "requires": {
                "chownr": "^2.0.0",
                "fs-minipass": "^2.0.0",
                "minipass": "^4.0.0",
                "minizlib": "^2.1.1",
                "mkdirp": "^1.0.3",
                "yallist": "^4.0.0"
            }
        },
        "temp-dir": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/temp-dir/-/temp-dir-2.0.0.tgz",
            "integrity": "sha512-aoBAniQmmwtcKp/7BzsH8Cxzv8OL736p7v1ihGb5e9DJ9kTwGWHrQrVB5+lfVDzfGrdRzXch+ig7LHaY1JTOrg==",
            "dev": true
        },
        "text-encoding-utf-8": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
            "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg==",
            "dev": true
        },
        "time-zone": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/time-zone/-/time-zone-1.0.0.tgz",
            "integrity": "sha512-TIsDdtKo6+XrPtiTm1ssmMngN1sAhyKnTO2kunQWqNPWIVvCm15Wmw4SWInwTVgJ5u/Tr04+8Ei9TNcw4x4ONA==",
            "dev": true
        },
        "to-regex-range": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
            "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
            "dev": true,
            "requires": {
                "is-number": "^7.0.0"
            }
        },
        "toidentifier": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
            "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
            "dev": true
        },
        "tr46": {
            "version": "0.0.3",
            "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
            "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
            "dev": true
        },
        "ts-node": {
            "version": "10.9.1",
            "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.9.1.tgz",
            "integrity": "sha512-NtVysVPkxxrwFGUUxGYhfux8k78pQB3JqYBXlLRZgdGUqTO5wU/UyHop5p70iEbGhB7q5KmiZiU0Y3KlJrScEw==",
            "dev": true,
            "requires": {
                "@cspotcode/source-map-support": "^0.8.0",
                "@tsconfig/node10": "^1.0.7",
                "@tsconfig/node12": "^1.0.7",
                "@tsconfig/node14": "^1.0.0",
                "@tsconfig/node16": "^1.0.2",
                "acorn": "^8.4.1",
                "acorn-walk": "^8.1.1",
                "arg": "^4.1.0",
                "create-require": "^1.1.0",
                "diff": "^4.0.1",
                "make-error": "^1.1.1",
                "v8-compile-cache-lib": "^3.0.1",
                "yn": "3.1.1"
            }
        },
        "tweetnacl": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.3.tgz",
            "integrity": "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw==",
            "dev": true
        },
        "type-fest": {
            "version": "0.13.1",
            "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.13.1.tgz",
            "integrity": "sha512-34R7HTnG0XIJcBSn5XhDd7nNFPRcXYRZrBB2O2jdKqYODldSzBAqzsWoZYYvduky73toYS/ESqxPvkDf/F0XMg==",
            "dev": true
        },
        "typescript": {
            "version": "4.9.4",
            "resolved": "https://registry.npmjs.org/typescript/-/typescript-4.9.4.tgz",
            "integrity": "sha512-Uz+dTXYzxXXbsFpM86Wh3dKCxrQqUcVMxwU54orwlJjOpO3ao8L7j5lH+dWfTwgCwIuM9GQ2kvVotzYJMXTBZg==",
            "dev": true
        },
        "u3": {
            "version": "0.1.1",
            "resolved": "https://registry.npmjs.org/u3/-/u3-0.1.1.tgz",
            "integrity": "sha512-+J5D5ir763y+Am/QY6hXNRlwljIeRMZMGs0cT6qqZVVzzT3X3nFPXVyPOFRMOR4kupB0T8JnCdpWdp6Q/iXn3w==",
            "dev": true
        },
        "universalify": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.0.tgz",
            "integrity": "sha512-hAZsKq7Yy11Zu1DE0OzWjw7nnLZmJZYTDZZyEFHZdUhV8FkH5MCfoU1XMaxXovpyW5nq5scPqq0ZDP9Zyl04oQ==",
            "dev": true
        },
        "v8-compile-cache-lib": {
            "version": "3.0.1",
            "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
            "integrity": "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==",
            "dev": true
        },
        "webidl-conversions": {
            "version": "3.0.1",
            "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
            "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
            "dev": true
        },
        "well-known-symbols": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/well-known-symbols/-/well-known-symbols-2.0.0.tgz",
            "integrity": "sha512-ZMjC3ho+KXo0BfJb7JgtQ5IBuvnShdlACNkKkdsqBmYw3bPAaJfPeYUo6tLUaT5tG/Gkh7xkpBhKRQ9e7pyg9Q==",
            "dev": true
        },
        "whatwg-url": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
            "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
            "dev": true,
            "requires": {
                "tr46": "~0.0.3",
                "webidl-conversions": "^3.0.0"
            }
        },
        "wrap-ansi": {
            "version": "7.0.0",
            "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
            "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
            "dev": true,
            "requires": {
                "ansi-styles": "^4.0.0",
                "string-width": "^4.1.0",
                "strip-ansi": "^6.0.0"
            },
            "dependencies": {
                "ansi-regex": {
                    "version": "5.0.1",
                    "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
                    "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
                    "dev": true
                },
                "ansi-styles": {
                    "version": "4.3.0",
                    "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
                    "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
                    "dev": true,
                    "requires": {
                        "color-convert": "^2.0.1"
                    }
                },
                "emoji-regex": {
                    "version": "8.0.0",
                    "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
                    "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
                    "dev": true
                },
                "is-fullwidth-code-point": {
                    "version": "3.0.0",
                    "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
                    "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
                    "dev": true
                },
                "string-width": {
                    "version": "4.2.3",
                    "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
                    "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
                    "dev": true,
                    "requires": {
                        "emoji-regex": "^8.0.0",
                        "is-fullwidth-code-point": "^3.0.0",
                        "strip-ansi": "^6.0.1"
                    }
                },
                "strip-ansi": {
                    "version": "6.0.1",
                    "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
                    "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
                    "dev": true,
                    "requires": {
                        "ansi-regex": "^5.0.1"
                    }
                }
            }
        },
        "wrappy": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
            "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
            "dev": true
        },
        "write-file-atomic": {
            "version": "4.0.2",
            "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-4.0.2.tgz",
            "integrity": "sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg==",
            "dev": true,
            "requires": {
                "imurmurhash": "^0.1.4",
                "signal-exit": "^3.0.7"
            }
        },
        "y18n": {
            "version": "5.0.8",
            "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
            "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
            "dev": true
        },
        "yallist": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
            "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
            "dev": true
        },
        "yargs": {
            "version": "17.6.2",
            "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.6.2.tgz",
            "integrity": "sha512-1/9UrdHjDZc0eOU0HxOHoS78C69UD3JRMvzlJ7S79S2nTaWRA/whGCTV8o9e/N/1Va9YIV7Q4sOxD8VV4pCWOw==",
            "dev": true,
            "requires": {
                "cliui": "^8.0.1",
                "escalade": "^3.1.1",
                "get-caller-file": "^2.0.5",
                "require-directory": "^2.1.1",
                "string-width": "^4.2.3",
                "y18n": "^5.0.5",
                "yargs-parser": "^21.1.1"
            },
            "dependencies": {
                "ansi-regex": {
                    "version": "5.0.1",
                    "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
                    "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
                    "dev": true
                },
                "emoji-regex": {
                    "version": "8.0.0",
                    "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
                    "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
                    "dev": true
                },
                "is-fullwidth-code-point": {
                    "version": "3.0.0",
                    "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
                    "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
                    "dev": true
                },
                "string-width": {
                    "version": "4.2.3",
                    "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
                    "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
                    "dev": true,
                    "requires": {
                        "emoji-regex": "^8.0.0",
                        "is-fullwidth-code-point": "^3.0.0",
                        "strip-ansi": "^6.0.1"
                    }
                },
                "strip-ansi": {
                    "version": "6.0.1",
                    "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
                    "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
                    "dev": true,
                    "requires": {
                        "ansi-regex": "^5.0.1"
                    }
                }
            }
        },
        "yargs-parser": {
            "version": "21.1.1",
            "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
            "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
            "dev": true
        },
        "yn": {
            "version": "3.1.1",
            "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
            "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==",
            "dev": true
        },
        "yocto-queue": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-1.0.0.tgz",
            "integrity": "sha512-9bnSc/HEW2uRy67wc+T8UwauLuPJVn28jb+GtJY16iiKWyvmYJRXVT4UamsAEGQfPohgr2q4Tq0sQbQlxTfi1g==",
            "dev": true
        }
    }
}

'''
'''--- near-microbonds-bond-factory/integration-tests-ts/package.json ---
{
    "name": "ava-testing",
    "version": "1.0.0",
    "license": "(MIT AND Apache-2.0)",
    "scripts": {
      "test": "ava"
    },
    "devDependencies": {
      "@types/bn.js": "^5.1.1",
      "@types/node": "^18.11.3",
      "ava": "^4.3.3",
      "near-workspaces": "^3.2.2",
      "ts-node": "^10.9.1",
      "typescript": "^4.8.4"
    },
    "dependencies": {}
  }
  
'''
'''--- near-microbonds-bond-factory/integration-tests-ts/src/main.ava.ts ---
import { Worker, NearAccount, AccountBalance, Account, NEAR } from 'near-workspaces';
import anyTest, { TestFn } from 'ava';
import fs from 'fs';

const test = anyTest as TestFn<{
  worker: Worker;
  accounts: Record<string, NearAccount>;
}>;

const INITIAL_BALANCE = '100000000000000000000000000000'; // 100,000 NEAR / 100,000^24 yoctoNEAR
const PRICE_PER_BYTE = '10000000000000000000'; // 10,000,000,000,000,000,000 yoctoNEAR

type TokenMetadata = {
    name: string;
    symbol: string;
};

test.beforeEach(async (t) => {
    // Init the worker and start the Sandbox server
    const worker = await Worker.init();

    // Create accounts and add balances
    const root = worker.rootAccount;
    const owner = await root.createSubAccount('owner', {
        initialBalance: INITIAL_BALANCE
    });

    const non_owner = await root.createSubAccount('non_owner', {
        initialBalance: INITIAL_BALANCE
    });
    
    // Get wasm file path from package.json test script in folder above
    const factory_contract = await owner.devDeploy(
        process.argv[2],
        {
            method: 'new',
            args: {
                owner_id: owner.accountId
            },
        }
    );

    // Save state for test runs, it is unique for each test
    t.context.worker = worker;
    t.context.accounts = { root, owner, factory_contract, non_owner };
});

test.afterEach.always(async (t) => {
    // Stop the Sandbox server
    await t.context.worker.tearDown().catch((error) => {
        console.log('Failed to stop Sandbox server', error);
    });
});

// === Testing adding token versions
test.failing('Should fail to add a new token version if not owner', async (t) => {
    const { factory_contract, non_owner } = t.context.accounts;

    const code = fs.readFileSync('./test-contracts/nft.wasm', 'utf8');
    const code_b64 = Buffer.from(code, 'base64');

    await non_owner.call(factory_contract, 'add_token_version', code_b64);
});

test('Should add a new token version if owner', async (t) => {
    const { factory_contract, owner } = t.context.accounts;

    const code = fs.readFileSync('./test-contracts/nft.wasm', 'utf8');
    const code_b64 = Buffer.from(code, 'base64');

    await owner.call(factory_contract, 'add_token_version', code_b64);

    const stored_versions: String[] = await factory_contract.view(
        'get_token_versions'
    );

    t.is(stored_versions.length, 1);
    t.is(stored_versions[0], '0');
});

test.failing('Should fail to add when the input is not passed', async (t) => {
    const { factory_contract, owner } = t.context.accounts;

    await owner.call(factory_contract, 'add_token_version', Uint8Array.from([]));
});

test('Should return the correct deployment cost', async (t) => {
    const { factory_contract, owner } = t.context.accounts;

    const code = fs.readFileSync('./test-contracts/nft.wasm', 'utf8');
    const code_b64 = Buffer.from(code, 'base64');

    await owner.call(factory_contract, 'add_token_version', code_b64);

    const cost = await factory_contract.view(
        'get_deployment_cost', {
            token_version: '0',
        }
    );

    t.is(cost, '5550000000000000000000');
});

// === Testing adding municipalities
test.failing('Should fail to add a new municipality if not owner', async (t) => {
    const { factory_contract, non_owner } = t.context.accounts;

    await non_owner.call(factory_contract, 'add_new_municipality', {
        municipality_id: 'test_municipality',
    });
});

test('Should add a new municipality if owner', async (t) => {
    const { factory_contract, owner } = t.context.accounts;

    await owner.call(factory_contract, 'add_new_municipality', {
        municipality_id: 'test_municipality',
    });

    const projects_for_municipality: String[] = await factory_contract.view(
        'view_projects_for_municipality', {
            municipality_id: 'test_municipality',
        }
    );

    t.is(projects_for_municipality.length, 0);
});

test.failing('Should fail to add a new municipality if the municipality already exists', async (t) => {
    const { factory_contract, owner } = t.context.accounts;

    await owner.call(factory_contract, 'add_new_municipality', {
        municipality_id: 'test_municipality',
    });

    await owner.call(factory_contract, 'add_new_municipality', {
        municipality_id: 'test_municipality',
    });
});

// === Testing adding projects to municipalities
test.failing('Should fail to add a new project if not owner', async (t) => {
    const { factory_contract, owner, non_owner } = t.context.accounts;

    await owner.call(factory_contract, 'add_new_municipality', {
        municipality_id: 'test_municipality',
    });

    await non_owner.call(factory_contract, 'add_new_project', {
        municipality_id: 'test_municipality',
        project_id: 'test_project',
    });
});

test.failing('Should fail to add a new project if the given municipality does not exist', async (t) => {
    const { factory_contract, owner } = t.context.accounts;

    await owner.call(factory_contract, 'add_new_project', {
        municipality_id: 'test_municipality',
        project_id: 'test_project',
    });
});

test.failing('Should fail to add a new project if the project already exists', async (t) => {
    const { factory_contract, owner } = t.context.accounts;

    await owner.call(factory_contract, 'add_new_municipality', {
        municipality_id: 'test_municipality',
    });

    await owner.call(factory_contract, 'add_new_project', {
        municipality_id: 'test_municipality',
        project_id: 'test_project',
    });

    await owner.call(factory_contract, 'add_new_project', {
        municipality_id: 'test_municipality',
        project_id: 'test_project',
    });
});

test('Should add a new project if owner', async (t) => {
    const {factory_contract, owner} = t.context.accounts;

    await owner.call(factory_contract, 'add_new_municipality', {
        municipality_id: 'test_municipality',
    });

    await owner.call(factory_contract, 'add_new_project', {
        municipality_id: 'test_municipality',
        project_id: 'test_project',
    });

    const projects_for_municipality: String[] = await factory_contract.view(
        'view_projects_for_municipality', {
            municipality_id: 'test_municipality',
        }
    );

    t.is(projects_for_municipality.length, 1);
    t.is(projects_for_municipality[0], 'test_project');
});

// === Testing adding tokens to projects
test.failing('Should fail to add a new token to project if not owner', async (t) => {
    const { factory_contract, owner, non_owner } = t.context.accounts;

    // Add token version
    const code = fs.readFileSync('./test-contracts/nft.wasm', 'utf8');
    const code_b64 = Buffer.from(code, 'base64');

    await owner.call(factory_contract, 'add_token_version', code_b64);

    // Add municipality
    await owner.call(factory_contract, 'add_new_municipality', {
        municipality_id: 'test_municipality',
    });

    // Add project
    await owner.call(factory_contract, 'add_new_project', {
        municipality_id: 'test_municipality',
        project_id: 'test_project',
    });

    await non_owner.call(factory_contract, 'add_new_token_for_project', {
        municipality_id: 'test_municipality',
        project_id: 'test_project',
        token_version: '0',
    });
});

test.failing('Should fail to add a new token if the given municipality does not exist', async (t) => {
    const { factory_contract, owner, non_owner } = t.context.accounts;

    await non_owner.call(factory_contract, 'add_new_token_for_project', {
        municipality_id: 'test_municipality',
        project_id: 'test_project',
        token_version: '0',
    });
});

test.failing('Should fail to add a new token if the given project does not exist', async (t) => {
    const { factory_contract, owner, non_owner } = t.context.accounts;

    // Add municipality
    await owner.call(factory_contract, 'add_new_municipality', {
        municipality_id: 'test_municipality',
    });

    await non_owner.call(factory_contract, 'add_new_token_for_project', {
        municipality_id: 'test_municipality',
        project_id: 'test_project',
        token_version: '0',
    });
});

test.failing('Should fail to add a new token if the given token version does not exist', async (t) => {
    const { factory_contract, owner, non_owner } = t.context.accounts;

    // Add municipality
    await owner.call(factory_contract, 'add_new_municipality', {
        municipality_id: 'test_municipality',
    });

    // Add project
    await owner.call(factory_contract, 'add_new_project', {
        municipality_id: 'test_municipality',
        project_id: 'test_project',
    });

    await non_owner.call(factory_contract, 'add_new_token_for_project', {
        municipality_id: 'test_municipality',
        project_id: 'test_project',
        token_version: '0',
    });
});

test('Should add a new token to project if owner', async (t) => {
    const { factory_contract, owner, root } = t.context.accounts;

    // Add token version
    const code = fs.readFileSync('./test-contracts/nft.wasm', 'base64');
    const code_b64 = Buffer.from(code, 'base64');

    await owner.call(factory_contract, 'add_token_version', code_b64);

    // Add municipality
    await owner.call(factory_contract, 'add_new_municipality', {
        municipality_id: 'test_municipality',
    });

    // Add project
    await owner.call(factory_contract, 'add_new_project', {
        municipality_id: 'test_municipality',
        project_id: 'test_project',
    });

    await owner.call(factory_contract, 'add_new_token_for_project', {
        municipality_id: 'test_municipality',
        project_id: 'test_project',
        token_version: '0',
        token_account_name: 'test_token',
        token_name: 'test_token',
        token_symbol: 'TT',
    }, {
        attachedDeposit: NEAR.from('3183350000000000000000000').add(NEAR.parse('1')).toString(),  // Cost of the contract = PRICE_PER_BYTES * size_of_contract_in_bytes
        gas: '300000000000000',
    });

    const tokens_for_project: string[] = await factory_contract.view(
        'view_tokens_for_project', {
            municipality_id: 'test_municipality',
            project_id: 'test_project',
        }
    );

    t.is(tokens_for_project.length, 1);
    
    const token_meta: TokenMetadata = await owner.call(tokens_for_project[0], 'nft_metadata', {});

    t.is(token_meta.name, 'test_token');
    t.is(token_meta.symbol, 'TT');
});
'''
'''--- near-microbonds-bond-factory/nft-contract/Cargo.toml ---
[package]
name = "bond_nft"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "4.0.0"
near-contract-standards = "4.0.0"
serde_json = "1.0"

[profile.release]
codegen-units=1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true
'''
'''--- near-microbonds-bond-factory/nft-contract/build.sh ---
#!/bin/bash
set -e && RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release && mkdir -p ../out && cp target/wasm32-unknown-unknown/release/*.wasm ../out/nft.wasm
'''
'''--- near-microbonds-bond-factory/nft-contract/src/approval.rs ---
use crate::*;
use near_contract_standards::non_fungible_token::{bytes_for_approved_account_id, refund_approved_account_ids_iter, refund_approved_account_ids, refund_deposit};
use near_sdk::{ext_contract, assert_one_yocto};

pub trait NonFungibleTokenCore {
    //approve an account ID to transfer a token on your behalf
    fn nft_approve(&mut self, token_id: TokenId, account_id: AccountId, msg: Option<String>);

    //check if the passed in account has access to approve the token ID
	fn nft_is_approved(
        &self,
        token_id: TokenId,
        approved_account_id: AccountId,
        approval_id: Option<u64>,
    ) -> bool;

    //revoke a specific account from transferring the token on your behalf
    fn nft_revoke(&mut self, token_id: TokenId, account_id: AccountId);

    //revoke all accounts from transferring the token on your behalf
    fn nft_revoke_all(&mut self, token_id: TokenId);
}

#[ext_contract(ext_non_fungible_approval_receiver)]
trait NonFungibleTokenApprovalsReceiver {
    //cross contract call to an external contract that is initiated during nft_approve
    fn nft_on_approve(
        &mut self,
        token_id: TokenId,
        owner_id: AccountId,
        approval_id: u64,
        msg: String,
    );
}

#[near_bindgen]
impl NonFungibleTokenCore for Contract {

    //allow a specific account ID to approve a token on your behalf
    #[payable]
    fn nft_approve(&mut self, token_id: TokenId, account_id: AccountId, msg: Option<String>) {
        /*
         * assert at least one yocto for security reasons - this will cause a redirect to the NEAR wallet.
         * The user needs to attach enough to pay for storage on the contract
         */
        assert_at_least_one_yocto();

        // get the token object from the token ID
        let mut token = self.tokens_by_id.get(&token_id).expect("No token");

        // make sure that the person calling the function is the owner of the token
        assert_eq!(
            &env::predecessor_account_id(),
            &token.owner_id,
            "Predecessor must be token owner"
        );

        // get the next approval ID if we need a new approval
        let approval_id: u64 = token.next_approval_id;

        // check if the account has been approved already for this token
        let is_new_approval = token.approved_account_ids
            // insert returns none if the key was not present
            .insert(account_id.clone(), approval_id)
            .is_none();

        // if it was a new approval, we need to calculate how much storage is being used to add the account
        let storage_used = if is_new_approval {
            bytes_for_approved_account_id(&account_id)
        } else {
            0
        };

        // increment the token's next approval ID by 1
        token.next_approval_id += 1;
        // insert the otoken back into the tokens_by_id collection
        self.tokens_by_id.insert(&token_id, &token);

        // refund any excess storage attached by the user. If the user didn't attach enough, panic
        refund_deposit(storage_used);

        if let Some(msg) = msg {
            // Defaulting GAS weight to 1, no attached deposit, and no static GAS to attach
            ext_non_fungible_approval_receiver::ext(account_id)
                .nft_on_approve(
                    token_id,
                    token.owner_id,
                    approval_id,
                    msg
                ).as_return();
        }
    }

    //check if the passed in account has access to approve the token ID
	fn nft_is_approved(
        &self,
        token_id: TokenId,
        approved_account_id: AccountId,
        approval_id: Option<u64>,
    ) -> bool {
        // get the token object from the token_id
        let token = self.tokens_by_id.get(&token_id).expect("No token");

        // get the approval number for the passed in account ID
        let approval = token.approved_account_ids.get(&approved_account_id);

        // If there was some approval ID found for the account ID
        if let Some(approval) = approval {
            // if a specific approval_id was passed into the function
            if let Some(approval_id) = approval_id {
                // return if the approval ID passed in matched the actual approval ID for the account
                approval_id == *approval
            // If there was no approval_id passed into the function, we simply return true
            } else {
                true
            }
            // if there was no approval ID found for the account ID, we simple return false
        } else {
            false
        }
    }

    //revoke a specific account from transferring the token on your behalf 
    #[payable]
    fn nft_revoke(&mut self, token_id: TokenId, account_id: AccountId) {
        // assert that the user attached exactly 1 yoctoNEAR for security reasons
        assert_one_yocto();
        // get the token object using the passed in token_id
        let mut token = self.tokens_by_id.get(&token_id).expect("No token");

        // get the claller of the function and assert that they are the owner of the token
        let predecessor_account_id = env::predecessor_account_id();
        assert_eq!(&predecessor_account_id, &token.owner_id);

        // if the account ID was in the token's approval, we remove it and if statement logic executes
        if token
            .approved_account_ids
            .remove(&account_id)
            .is_some()
        {
            // refund the fund released by removing the approved_account_id to the caller of the function
            refund_approved_account_ids_iter(predecessor_account_id, [account_id].iter());

            // insert the token back into the tokens_by_id collection with the account_id removed from the approval list
            self.tokens_by_id.insert(&token_id, &token);
        }
    }

    //revoke all accounts from transferring the token on your behalf
    #[payable]
    fn nft_revoke_all(&mut self, token_id: TokenId) {
        //assert that the caller attached exactly 1 yoctoNEAR for security
        assert_one_yocto();

        //get the token object from the passed in token ID
        let mut token = self.tokens_by_id.get(&token_id).expect("No token");
        //get the caller and make sure they are the owner of the tokens
        let predecessor_account_id = env::predecessor_account_id();
        assert_eq!(&predecessor_account_id, &token.owner_id);

        //only revoke if the approved account IDs for the token is not empty
        if !token.approved_account_ids.is_empty() {
            //refund the approved account IDs to the caller of the function
            refund_approved_account_ids(predecessor_account_id, &token.approved_account_ids);
            //clear the approved account IDs
            token.approved_account_ids.clear();
            //insert the token back into the tokens_by_id collection with the approved account IDs cleared
            self.tokens_by_id.insert(&token_id, &token);
        }
    }
}
'''
'''--- near-microbonds-bond-factory/nft-contract/src/enumeration.rs ---
use crate::*;

#[near_bindgen]
impl Contract {
    //Query for the total supply of NFTs on the contract
    pub fn nft_total_supply(&self) -> U128 {
        // return the length of the token metadata by ID
        U128(self.token_metadata_by_id.len() as u128)
    }

    //Query for nft tokens on the contract regardless of the owner using pagination
    pub fn nft_tokens(&self, from_index: Option<U128>, limit: Option<u64>) -> Vec<JsonToken> {

        // where to start pagination - if we have a from_index, we'll use that - otherwise we start from 0
        let start = u128::from(from_index.unwrap_or(U128(0)));

        // iterate through each token using an iterator
        self.token_metadata_by_id.keys()
        // skip to the index we specified in the start variable
        .skip(start as usize)
        // take the first "limit" elements in the vector. If we didn't specify a limit, use 50
        .take(limit.unwrap_or(50) as usize)
        // we'll map the token IDs which are strings into Json Tokens
        .map(|token_id| self.nft_token(token_id.clone()).unwrap())
        // since we turned the keys into an iterator, we need to turn it back into a vector to return
        .collect()
    }

    //get the total supply of NFTs for a given owner
    pub fn nft_supply_for_owner(
        &self,
        account_id: AccountId,
    ) -> U128 {
        // get the set of tokens for the passed in owner
        let tokens_for_owner_set = self.tokens_per_owner.get(&account_id);

        // if there is some set of tokens, we'll return the length as a U128
        if let Some(tokens_for_owner_set) = tokens_for_owner_set {
            U128(tokens_for_owner_set.len() as u128)
        } else {
            // If there isn't a set of tokens for the passed in account ID, we'll return 0
            U128(0)
        }
    }

    //Query for all the tokens for an owner
    pub fn nft_tokens_for_owner(
        &self,
        account_id: AccountId,
        from_index: Option<U128>,
        limit: Option<u64>,
    ) -> Vec<JsonToken> {
        // get the set of tokens for the passed in owner
        let tokens_for_owner_set = self.tokens_per_owner.get(&account_id);

        // if there is some set of tokens, we'll set the tokens variable equal to that set
        let tokens = if let Some(tokens_for_owner_set) = tokens_for_owner_set {
            tokens_for_owner_set
        } else {
            return vec![];
        };

        // where to start pagination - if we have a from_index, we'll use that - otherwise start from 0 index
        let start = u128::from(from_index.unwrap_or(U128(0)));

        // iterate through the keys vector
        tokens.iter()
        //skip the index we specified in the start variable
        .skip(start as usize)
        // take the first "limit" elements in the vector. If we didn't specify a limit, use 50
        .take(limit.unwrap_or(50) as usize)
        // we'll map the token iDs which are strings into Json Tokens
        .map(|token_id| self.nft_token(token_id.clone()).unwrap())
        // since we turned the keys into an iterator, we need to turn it back into a vector to return
        .collect()
    }
}
'''
'''--- near-microbonds-bond-factory/nft-contract/src/events.rs ---
use std::fmt;

use near_sdk::serde::{Deserialize, Serialize};

/// Enum that represents the data type of the EventLog.
/// The enum can either be an NftMint or an NftTransfer.
#[derive(Serialize, Deserialize, Debug)]
#[serde(tag = "event", content = "data")]
#[serde(rename_all = "snake_case")]
#[serde(crate = "near_sdk::serde")]
#[non_exhaustive]
pub enum EventLogVariant {
    NftMint(Vec<NftMintLog>),
    NftTransfer(Vec<NftTransferLog>),
}

/// Interface to capture data about an event
///
/// Arguments:
/// * `standard`: name of standard e.g. nep171
/// * `version`: e.g. 1.0.0
/// * `event`: associate event data
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct EventLog {
    pub standard: String,
    pub version: String,

    // `flatten` to not have "event": {<EventLogVariant>} in the JSON, just have the contents of {<EventLogVariant>}.
    #[serde(flatten)]
    pub event: EventLogVariant,
}

impl fmt::Display for EventLog {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_fmt(format_args!(
            "EVENT_JSON:{}",
            &serde_json::to_string(self).map_err(|_| fmt::Error)?
        ))
    }
}

/// An event log to capture token minting
///
/// Arguments
/// * `owner_id`: "account.near"
/// * `token_ids`: ["1", "abc"]
/// * `memo`: optional message
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct NftMintLog {
    pub owner_id: String,
    pub token_ids: Vec<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<String>,
}

/// An event log to capture token transfer
///
/// Arguments
/// * `authorized_id`: approved account to transfer
/// * `old_owner_id`: "owner.near"
/// * `new_owner_id`: "receiver.near"
/// * `token_ids`: ["1", "12345abc"]
/// * `memo`: optional message
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct NftTransferLog {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub authorized_id: Option<String>,

    pub old_owner_id: String,
    pub new_owner_id: String,
    pub token_ids: Vec<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<String>,
}
'''
'''--- near-microbonds-bond-factory/nft-contract/src/internal.rs ---
use crate::*;
use near_contract_standards::non_fungible_token::{hash_account_id};

//Assert that the user has attached at least 1 yoctoNEAR (for security reasons and to pay for storage)
pub(crate) fn assert_at_least_one_yocto() {
    assert!(
        env::attached_deposit() >= 1,
        "Requires attached deposit of at least 1 yoctoNEAR",
    )
}

pub(crate) fn royalty_to_payout(royalty_percentage: u32, amount_to_pay: Balance) -> U128 {
    U128(royalty_percentage as u128 * amount_to_pay / 10_000u128)
}

impl Contract {
    // add a token to the set of tokens an owner has
    pub(crate) fn internal_add_token_to_owner(
        &mut self,
        account_id: &AccountId,
        token_id: &TokenId,
    ) {
        // get the set of tokens for the given account
        let mut tokens_set = self.tokens_per_owner.get(account_id).unwrap_or_else(|| {
            UnorderedSet::new(
                StorageKey::TokenPerOwnerInner {
                    // we get a new unique prefix for the collection
                    account_id_hash: hash_account_id(&account_id),
                }
                .try_to_vec()
                .unwrap(),
            )
        });

        // we insert the token id into the set
        tokens_set.insert(token_id);

        // we insert that set for the given account id
        self.tokens_per_owner.insert(account_id, &tokens_set);
    }

    pub(crate) fn internal_remove_token_from_owner(
        &mut self,
        account_id: &AccountId,
        token_id: &TokenId
    ) {
        // we get the set of tokens that the owner has
        let mut tokens_set = self
                            .tokens_per_owner
                            .get(account_id)
                            // if there is no set of tokens for the owner, we panic
                            .expect("Token should be owner by the sender");
                            
        // we remove the token_id from the set of tokens
        tokens_set.remove(token_id);          

        // if the token set is now empty, we remove the owner from the tokens_per_owner collection
        if tokens_set.is_empty() {
            self.tokens_per_owner.remove(account_id);
        } else {
            // if the token set is not empty, we simply insert it back for the account ID
            self.tokens_per_owner.insert(account_id, &tokens_set);
        }
    }

    pub(crate) fn internal_transfer(
        &mut self,
        sender_id: &AccountId,
        receiver_id: &AccountId,
        token_id: &TokenId,
        // we introduce an approval ID so that people with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>
    ) -> Token {
        // get the token object by passing in the token_id
        let token = self.tokens_by_id.get(token_id).expect("No token");

        // if the sender doesn't equal the owner, we panic
        if sender_id != &token.owner_id {
            // if the token's approved account IDs doesn't contain the sender, we panic
            if !token.approved_account_ids.contains_key(sender_id) {
                env::panic_str("Unauthorized");
            }
        }

        // If they included an approval_id, check if the sender's actual approval_id is the same as the one included
        if let Some(enforced_approval_id) = approval_id {
            // get the actual approval ID
            let actual_approval_id = token
                    .approved_account_ids
                    .get(sender_id)
                    // if the sender isn't in the map, we panic
                    .expect("Sender is not approved account");

            // make sure that the actual approval ID is the same as the one provided
            assert_eq!(
                actual_approval_id, &enforced_approval_id,
                "The actual approval_id {} is different from the gicen approval_id {}",
                actual_approval_id, enforced_approval_id
            );
        };

        // we make sure that the sender isn't sending the token to themselves
        assert_ne!(
            &token.owner_id,
            receiver_id,
            "The token owner and receiver should be different"
        );

        // we remove the token from its current owner's set
        self.internal_remove_token_from_owner(&token.owner_id, token_id);
        // we then add the token to the receiver_id's set
        self.internal_add_token_to_owner(receiver_id, token_id);

        // we create a new token struct
        let new_token = Token {
            owner_id: receiver_id.clone(),
            // reset the approval account IDs
            approved_account_ids: Default::default(),
            next_approval_id: token.next_approval_id,
            // we copy over the royalties from the previous token
            royalty: token.royalty.clone()
        };

        // insert that new token into the tokens_by_id, replacing the old entry
        self.tokens_by_id.insert(token_id, &new_token);

        // if there was some memo attached, we log it
        if let Some(memo) = memo.as_ref() {
            env::log_str(&format!("Memo: {}", memo).to_string());
        }

        // Default the authorized ID to be None for the logs.
        let mut authorized_id = None;
        // if the approval ID was provided, set the authorized ID equal to the sender
        if approval_id.is_some() {
            authorized_id = Some(sender_id.to_string());
        }

        // construct the transfer log as per the events standard
        let nft_transfer_log: EventLog = EventLog { 
            standard: NFT_STANDARD_NAME.to_string(), 
            version: NFT_METADATA_SPEC.to_string(), 
            event: EventLogVariant::NftTransfer(vec![NftTransferLog {
                // the optional authorized account ID to transfer the token on behalf of the old owner
                authorized_id,
                // the old owner's account ID
                old_owner_id: token.owner_id.to_string(),
                // the account ID of the new owner of the token
                new_owner_id: receiver_id.to_string(),
                // a vector containing the token IDs as strings
                token_ids: vec![token_id.to_string()],
                // an optional memo to include
                memo
            }]),
        };

        // log the serialized json
        env::log_str(&nft_transfer_log.to_string());

        // return the previous token object that was transferred
        token
    }
}
'''
'''--- near-microbonds-bond-factory/nft-contract/src/lib.rs ---
use std::collections::HashMap;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{LazyOption, LookupMap, UnorderedMap, UnorderedSet};
use near_sdk::json_types::{Base64VecU8, U128};
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{
    env, near_bindgen, AccountId, Balance, CryptoHash, PanicOnDefault, Promise, PromiseOrValue,
};

use crate::internal::*;
pub use crate::metadata::*;
pub use crate::mint::*;
pub use crate::nft_core::*;
pub use crate::approval::*;
pub use crate::royalty::*;
pub use crate::events::*;

mod internal;
mod approval;
mod enumeration;
mod metadata;
mod mint;
mod nft_core;
mod royalty;
mod events;

/// This spec can be treated like a version of the standard.
pub const NFT_METADATA_SPEC: &str = "1.0.0";
/// This is the name of the NFT standard we're using
pub const NFT_STANDARD_NAME: &str = "nep171";

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
    // contract owner
    pub owner_id: AccountId,

    // keeps track of all the token IDs for given account
    pub tokens_per_owner: LookupMap<AccountId, UnorderedSet<TokenId>>,

    // keeps track of token struct for given token ID
    pub tokens_by_id: LookupMap<TokenId, Token>,

    // keeps track of the token metadata for a given token ID
    pub token_metadata_by_id: UnorderedMap<TokenId, TokenMetadata>,

    // keeps track of the metadata for the contract
    pub metadata: LazyOption<NFTContractMetadata>,
}

/// Helper structure for keys of the persistent collections.
#[derive(BorshSerialize)]
pub enum StorageKey {
    TokensPerOwner,
    TokenPerOwnerInner { account_id_hash: CryptoHash },
    TokensById,
    TokenMetadataById,
    NFTContractMetadata,
    TokensPerType,
    TokensPerTypeInner { token_type_hash: CryptoHash },
    TokenTypesLocked,
}

#[near_bindgen]
impl Contract {
    /*
        initialization function (can only be called once).
        this initializes the contract with default metadata so the
        user doesn't have to manually type metadata.
    */
    #[init]
    pub fn new_default_meta(owner_id: AccountId) -> Self {
        Self::new(
            owner_id,
            NFTContractMetadata {
                spec: "nft-1.0.0".to_string(),
                name: "Microbond NFT Contract".to_string(),
                symbol: "MBond".to_string(),
                icon: None,
                base_uri: None,
                reference: None,
                reference_hash: None,
            },
        )
    }

    /*
        initialization function (can only be called once).
        this initializes the contract with metadata that was passed in and
        the owner_id. 
    */
    #[init]
    pub fn new(owner_id: AccountId, metadata: NFTContractMetadata) -> Self {
        let this = Self {
            tokens_per_owner: LookupMap::new(StorageKey::TokensPerOwner.try_to_vec().unwrap()),
            tokens_by_id: LookupMap::new(StorageKey::TokensById.try_to_vec().unwrap()),
            token_metadata_by_id: UnorderedMap::new(
                StorageKey::TokenMetadataById.try_to_vec().unwrap()
            ),
            owner_id,
            metadata: LazyOption::new(
                StorageKey::NFTContractMetadata.try_to_vec().unwrap(),
                Some(&metadata)
            ),
        };

        // Return the contract object
        this
    }
}

#[cfg(test)]
mod tests;
'''
'''--- near-microbonds-bond-factory/nft-contract/src/metadata.rs ---
use crate::*;
pub type TokenId = String;
//defines the payout type we'll be returning as a part of the royalty standards.
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Payout {
    pub payout: HashMap<AccountId, U128>,
} 

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize, Clone)]
#[serde(crate = "near_sdk::serde")]
pub struct NFTContractMetadata {
    pub spec: String,              // required, essentially a version like "nft-1.0.0"
    pub name: String,              // required, ex. "Mosaics"
    pub symbol: String,            // required, ex. "MOSAIC"
    pub icon: Option<String>,      // Data URL
    pub base_uri: Option<String>, // Centralized gateway known to have reliable access to decentralized storage assets referenced by `reference` or `media` URLs
    pub reference: Option<String>, // URL to a JSON file with more info
    pub reference_hash: Option<Base64VecU8>, // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.
}

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct TokenMetadata {
    pub title: Option<String>, // ex. "Arch Nemesis: Mail Carrier" or "Parcel #5055"
    pub description: Option<String>, // free-form description
    pub media: Option<String>, // URL to associated media, preferably to decentralized, content-addressed storage
    pub media_hash: Option<Base64VecU8>, // Base64-encoded sha256 hash of content referenced by the `media` field. Required if `media` is included.
    pub copies: Option<u64>, // number of copies of this set of metadata in existence when token was minted.
    pub issued_at: Option<u64>, // When token was issued or minted, Unix epoch in milliseconds
    pub expires_at: Option<u64>, // When token expires, Unix epoch in milliseconds
    pub starts_at: Option<u64>, // When token starts being valid, Unix epoch in milliseconds
    pub updated_at: Option<u64>, // When token was last updated, Unix epoch in milliseconds
    pub extra: Option<String>, // anything extra the NFT wants to store on-chain. Can be stringified JSON.
    pub reference: Option<String>, // URL to an off-chain JSON file with more info.
    pub reference_hash: Option<Base64VecU8>, // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct Token {
    // owner of the token
    pub owner_id: AccountId,

    // list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID
    pub approved_account_ids: HashMap<AccountId, u64>,
    // the next approval ID to give out
    pub next_approval_id: u64,
    pub royalty: HashMap<AccountId, u32>,
}

//The Json token is what will be returned from view calls. 
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct JsonToken {
    pub token_id: TokenId,
    pub owner_id: AccountId,
    pub metadata: TokenMetadata,
    // list of approved account ID's that have access to transfer the token. This maps an account ID to and approval ID
    pub approved_account_ids: HashMap<AccountId, u64>,
    pub royalty: HashMap<AccountId, u32>,
}

pub trait NonFungibleTokenMetadata {
    //view call for returning the contract metadata
    fn nft_metadata(&self) -> NFTContractMetadata;
}

#[near_bindgen]
impl NonFungibleTokenMetadata for Contract {
    fn nft_metadata(&self) -> NFTContractMetadata {
        self.metadata.get().unwrap()
    }
}
'''
'''--- near-microbonds-bond-factory/nft-contract/src/mint.rs ---
use near_contract_standards::non_fungible_token::refund_deposit;

use crate::*;

#[near_bindgen]
impl Contract {
    #[payable]
    pub fn nft_mint(
        &mut self,
        token_id: TokenId,
        metadata: TokenMetadata,
        receiver_id: AccountId,
        // we add an optional parameter for perpetual royalties
        perpetual_royalties: Option<HashMap<AccountId, u32>>,
    ) {
        // measure initial storage being used on the contract
        let initial_storage_usage = env::storage_usage();

        // create a royalty map to store in the token
        let mut royalty = HashMap::new();

        // if perpetual royalties were passed into the function
        if let Some(perpetual_royalties) = perpetual_royalties {
            // make sure that the length of the perpetual royalties is below 7 since we won't have enough GAS to pay out that many people
            assert!(perpetual_royalties.len() < 7, "Cannot add more than 6 perpetual royalty amounts");

            // iterate through the perpetual royalties and insert the account and amount in the royalty map
            for (account, amount) in perpetual_royalties {
                royalty.insert(account, amount);
            }
        }

        // specify the token struct that contains the owner id
        let token = Token {
            // set the owner ID equal to the receiver ID passed into the function
            owner_id: receiver_id,

            // we set the approved account IDs to the default value (an empty map)
            approved_account_ids: Default::default(),
            // the next approval ID is set to 0,
            next_approval_id: 0,
            // the map of perpetual royalties for the token (The owner will get 100% - total perpetual royalties)
            royalty,
        };

        // insert the token id and token struct and make sure that the token doesn't exist
        assert!(
            self.tokens_by_id.insert(&token_id, &token).is_none(),
            "Token already exists"
        );

        // insert the token id and metadata
        self.token_metadata_by_id.insert(&token_id, &metadata);

        // call the internal method for adding the token to the owner
        self.internal_add_token_to_owner(&token.owner_id, &token_id);

        // contruct the mint log as per the events standard
        let nft_mint_log: EventLog = EventLog { 
            standard: NFT_STANDARD_NAME.to_string(), 
            version: NFT_METADATA_SPEC.to_string(), 
            event: EventLogVariant::NftMint(vec![NftMintLog {
                // Owner of the token
                owner_id: token.owner_id.to_string(),
                // vector of token IDs that were minted
                token_ids: vec![token_id.to_string()],
                // An optional memo to include
                memo: None,
            }]) 
        };

        // log the serialized json
        env::log_str(&nft_mint_log.to_string());

        // calculate the required storage which was the used - initial
        let required_storage_in_bytes = env::storage_usage() - initial_storage_usage;

        // refund any excess storage if the user attached too much. panic if they didnt attach enough to cover the required
        refund_deposit(required_storage_in_bytes);
    }
}
'''
'''--- near-microbonds-bond-factory/nft-contract/src/nft_core.rs ---
use crate::*;
use near_contract_standards::non_fungible_token::refund_approved_account_ids;
use near_sdk::{ext_contract, Gas, log, PromiseResult, assert_one_yocto};

const GAS_FOR_RESOLVE_TRANSFER: Gas = Gas(10_000_000_000_000);
const GAS_FOR_NFT_ON_TRANSFER: Gas = Gas(25_000_000_000_000);

pub trait NonFungibleTokenCore {
    //transfers an NFT to a receiver ID
    fn nft_transfer(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        // we introduce an approval ID so tha tpeople with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
    );

    //transfers an NFT to a receiver and calls a function on the receiver ID's contract
    /// Returns `true` if the token was transferred from the sender's account.
    fn nft_transfer_call(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        // we introduce an approval ID so tha tpeople with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
        msg: String,
    ) -> PromiseOrValue<bool>;

    //get information about the NFT token passed in
    fn nft_token(&self, token_id: TokenId) -> Option<JsonToken>;
}

#[ext_contract(ext_non_fungible_token_receiver)]
trait NonFungibleTokenReceiver {
    //Method stored on the receiver contract that is called via cross contract call when nft_transfer_call is called
    /// Returns `true` if the token should be returned back to the sender.
    fn nft_on_transfer(
        &mut self,
        sender_id: AccountId,
        previous_owner_id: AccountId,
        token_id: TokenId,
        msg: String,
    ) -> Promise;
}

#[ext_contract(ext_self)]
trait NonFungibleTokenResolver {
    /*
        resolves the promise of the cross contract call to the receiver contract
        this is stored on THIS contract and is meant to analyze what happened in the cross contract call when nft_on_transfer was called
        as part of the nft_transfer_call method
    */
    fn nft_resolve_transfer(
        &mut self,
        // we introduce an authorized ID for loggint the transfer event
        authorized_id: Option<String>,
        owner_id: AccountId,
        receiver_id: AccountId,
        token_id: TokenId,
        // we introduce the approval map so we can keep track of what the approvals were before the transfer
        approved_account_ids: HashMap<AccountId, u64>,
        // we introduce a memo for logging the transfer event
        memo: Option<String>,
    ) -> bool;
}

#[near_bindgen]
impl NonFungibleTokenCore for Contract {

    //implementation of the nft_transfer method. This transfers the NFT from the current owner to the receiver. 
    #[payable]
    fn nft_transfer(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        // we introduce an approval ID so tha tpeople with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
    ) {
        // asset that the user attached exactly 1 yoctoNear. This is for security and so that the user will be redirected to the NEAR wallet.
        assert_one_yocto();

        // get the sender to transfer the token from the sender to the receiver
        let sender_id = env::predecessor_account_id();

        // call the internal transfer method
        self.internal_transfer(
            &sender_id,
            &receiver_id,
            &token_id,
            approval_id,
            memo
        );
    }

    //implementation of the transfer call method. This will transfer the NFT and call a method on the receiver_id contract
    #[payable]
    fn nft_transfer_call(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce an approval ID so that people with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
        msg: String,
    ) -> PromiseOrValue<bool> {
        // assert that the user attached exactly 1 yocto for security reasons
        assert_one_yocto();

        // get the sender ID
        let sender_id = env::predecessor_account_id();

        // transfer the token and get the previous token object
        let previous_token = self.internal_transfer(
            &sender_id, 
            &receiver_id, 
            &token_id, 
            approval_id,
            memo.clone()
        );

        //default the authorized_id to none
        let mut authorized_id = None; 
        //if the sender isn't the owner of the token, we set the authorized ID equal to the sender.
        if sender_id != previous_token.owner_id {
            authorized_id = Some(sender_id.to_string());
        }

        // Initiating receiver's call and the callback
        // Defaulting GAS weight to 1, no attached deposit, and static GAS equal to the GAS for nft on transfer
        ext_non_fungible_token_receiver::ext(receiver_id.clone())
            .with_static_gas(GAS_FOR_NFT_ON_TRANSFER)
            .nft_on_transfer(
                sender_id,
                previous_token.owner_id.clone(),
                token_id.clone(),
                msg
            )
        // we then resolve the promise and call nft_resolve_transfer on our own contract
        .then(
            // Defaulting GAS weight to 1, no attached deposit, and static GAS equal to the GAS for resolve transfer
            Self::ext(env::current_account_id())
                .with_static_gas(GAS_FOR_RESOLVE_TRANSFER)
                .nft_resolve_transfer(
                    authorized_id,
                    previous_token.owner_id, 
                    receiver_id,
                    token_id,
                    previous_token.approved_account_ids,
                    memo, // we introduce a memo for logging in the events standard
                )
        ).into()
    }

    //get the information for a specific token ID
    fn nft_token(&self, token_id: TokenId) -> Option<JsonToken> {
        // if there is some token ID in the tokens_by_id collection
        if let Some(token) = self.tokens_by_id.get(&token_id) {
            // we'll get the metadata for that token
            let metadata = self.token_metadata_by_id.get(&token_id).unwrap();
            
            // we return the JsonToken (wrapped by Some since we return an option)
            Some(JsonToken {
                token_id,
                owner_id: token.owner_id,
                metadata,
                approved_account_ids: token.approved_account_ids,
                royalty: token.royalty,
            })
        } else { // if there wasn't a token ID in the tokens_by_id collection, we return None
            None
        }
    }
}

#[near_bindgen]
impl NonFungibleTokenResolver for Contract {
    //resolves the cross contract call when calling nft_on_transfer in the nft_transfer_call method
    //returns true if the token was successfully transferred to the receiver_id
    #[private]
    fn nft_resolve_transfer(
        &mut self,
        // we introduce an authorized ID for loggin the transfer event
        authorized_id: Option<String>,
        owner_id: AccountId,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce an approval map so we can keep track of what the approvals were before the transfer
        approved_account_ids: HashMap<AccountId, u64>,
        // we introcude a memo for logging the transfer event
        memo: Option<String>,
    ) -> bool {
        // Whether receiver wants to return token back to the sender, based on `nft_on_transfer` call result
        if let PromiseResult::Successful(value) = env::promise_result(0) {
            // As per the standart, the nft_on_transfer should return whether we should return the token to it's
            // owner or not
            if let Ok(return_token) = near_sdk::serde_json::from_slice::<bool>(&value) {
                // if we don't need to return the token, we simply return true meaning everything went fine
                if !return_token {
                    //we refund the owner for releasing the storage used up by the approved account IDs
                    refund_approved_account_ids(owner_id, &approved_account_ids);
                    return true;
                }
            }
        }

        // get the token object if there is some token object
        let mut token = if let Some(token) = self.tokens_by_id.get(&token_id) {
            if token.owner_id != receiver_id {
                //we refund the owner for releasing the storage used up by the approved account IDs
                refund_approved_account_ids(owner_id, &approved_account_ids);
                // the token is not owned by the receiver anymore. Can't return it
                return true;
            }
            token
        } else { // if there isn't a token object, it was burned so we return true
            //we refund the owner for releasing the storage used up by the approved account IDs
            refund_approved_account_ids(owner_id, &approved_account_ids);
            return true;
        };

        // if at the end, we haven't returned true, that means that we should return the token to its original owner
        log!("Return {} from @{} to @{}", token_id, receiver_id, owner_id);

        // we remove the token from the receiver
        self.internal_remove_token_from_owner(&receiver_id, &token_id);
        // we add the token to the original owner
        self.internal_add_token_to_owner(&owner_id, &token_id);

        // we change the token structs owner to be the original owner
        token.owner_id = owner_id.clone();

        //we refund the receiver any approved account IDs that they may have set on the token
        refund_approved_account_ids(receiver_id.clone(), &token.approved_account_ids);
        // reset the approved account IDs to what they were before the transfer
        token.approved_account_ids = approved_account_ids;

        // we insert the token back into the tokens_by_id collection
        self.tokens_by_id.insert(&token_id, &token);

        /*
            We need to log that the NFT was reverted back to the original owner.
            The old_owner_id will be the receiver and the new_owner_id will be the
            original owner of the token since we're reverting the transfer.
        */
        let nft_transfer_log: EventLog = EventLog {
            // Standard name ("nep171").
            standard: NFT_STANDARD_NAME.to_string(),
            // Version of the standard ("nft-1.0.0").
            version: NFT_METADATA_SPEC.to_string(),
            // The data related with the event stored in a vector.
            event: EventLogVariant::NftTransfer(vec![NftTransferLog {
                // The optional authorized account ID to transfer the token on behalf of the old owner.
                authorized_id,
                // The old owner's account ID.
                old_owner_id: receiver_id.to_string(),
                // The account ID of the new owner of the token.
                new_owner_id: owner_id.to_string(),
                // A vector containing the token IDs as strings.
                token_ids: vec![token_id.to_string()],
                // An optional memo to include.
                memo,
            }]),
        };

        //we perform the actual logging
        env::log_str(&nft_transfer_log.to_string());

        // return false
        false
    }
}
'''
'''--- near-microbonds-bond-factory/nft-contract/src/royalty.rs ---
use std::hash::Hash;

use near_contract_standards::non_fungible_token::refund_approved_account_ids;
use near_sdk::assert_one_yocto;

use crate::*;

pub trait NonFungibleTokenCore {
    //calculates the payout for a token given the passed in balance. This is a view method
  	fn nft_payout(&self, token_id: TokenId, balance: U128, max_len_payout: u32) -> Payout;
    
    //transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. 
    fn nft_transfer_payout(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        approval_id: u64,
        memo: Option<String>,
        balance: U128,
        max_len_payout: u32,
    ) -> Payout;
}

#[near_bindgen]
impl NonFungibleTokenCore for Contract {

    //calculates the payout for a token given the passed in balance. This is a view method
    fn nft_payout(&self, token_id: TokenId, balance: U128, max_len_payout: u32) -> Payout {
		// get the token object
        let token = self.tokens_by_id.get(&token_id).expect("No token");

        // get the owner of the token
        let owner_id = token.owner_id;
        // keep track of the total perpetual royalties
        let mut total_perpetual = 0;
        // get the u128 version of the passed in balance (which was U128 before)
        let balance_u128 = u128::from(balance);
        // keep track of the payout object to send back
        let mut payout_object = Payout {
            payout: HashMap::new()
        };
        // get the royalty object from token
        let royalty = token.royalty;

        // make sure we're not paying out to too many people (GAS limits this)
        assert!(royalty.len() as u32 <= max_len_payout, "Market cannot payout to that many receivers");

        // go through each key and value in the royalty object
        for (k, v) in royalty.iter() {
            // get the key
            let key = k.clone();
            //only insert into the payout if the key isn't the token owner (we add their payout at the end)
            if key != owner_id {
                payout_object.payout.insert(key, royalty_to_payout(*v, balance_u128));
                total_perpetual += *v;
            }
        }

        // payout to previous owner who gets 100% - total perpetual royalties
        payout_object.payout.insert(owner_id, royalty_to_payout(10000 - total_perpetual, balance_u128));

        // return the payout object
        payout_object
	}

    //transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. 
    #[payable]
    fn nft_transfer_payout(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        approval_id: u64,
        memo: Option<String>,
        balance: U128,
        max_len_payout: u32,
    ) -> Payout {
        // assert that the user attached 1 yocto NEAR for security reasons
        assert_one_yocto();
        // get the sender ID
        let sender_id = env::predecessor_account_id();
        // transfer the token to the passed in receiver and get the previous token object back
        let previous_token = self.internal_transfer(
            &sender_id, 
            &receiver_id, 
            &token_id, 
            Some(approval_id), 
            memo
        );

        // refund the previous token owner for the storage used up by the previous approved account IDs
        refund_approved_account_ids(
            previous_token.owner_id.clone(), 
            &previous_token.approved_account_ids
        );

        // get the owner of the token
        let owner_id = previous_token.owner_id;
        //keep track of the total perpetual royalties
        let mut total_perpetual = 0;
        // get the u128 version of the passed in balance (which was U128 before)
        let balance_u128 = u128::from(balance);
        // keep track of the payout object to send back
        let mut payout_object = Payout {
            payout: HashMap::new()
        };
        // get the royalty object from token
        let royalty = previous_token.royalty;

        // make sure we're not paying out to too many people (GAS limits this)
        assert!(royalty.len() as u32 <= max_len_payout, "Market cannot payout to that many receivers");

        // go through each key and value in the royalty object
        for (k, v) in royalty.iter() {
            //get the key
            let key = k.clone();
            //only insert into the payout if the key isn't the token owner (we add their payout at the end)
            if key != owner_id {
                //
                payout_object.payout.insert(key, royalty_to_payout(*v, balance_u128));
                total_perpetual += *v;
            }
        }

        // payout to previous owner who gets 100% - total perpetual royalties
        payout_object.payout.insert(owner_id, royalty_to_payout(10000 - total_perpetual, balance_u128));

        // return the payout object
        payout_object

    }
}
'''
'''--- near-microbonds-bond-factory/nft-contract/src/tests.rs ---
/* unit tests */
#[cfg(test)]
use crate::Contract;
use crate::TokenMetadata;
use crate::approval::NonFungibleTokenCore;
use near_sdk::json_types::{U128, U64};
use near_sdk::test_utils::{accounts, VMContextBuilder};
use near_sdk::testing_env;
use near_sdk::{env, AccountId};

use std::collections::HashMap;

const MINT_STORAGE_COST: u128 = 100_000_000_000_000_000_000_000;
const MIN_REQUIRED_APPROVAL_YOCTO: u128 = 170000000000000000000;

fn get_context(predecessor: AccountId) -> VMContextBuilder {
    let mut builder = VMContextBuilder::new();
    builder.predecessor_account_id(predecessor);
    builder
}

fn sample_token_metadata() -> TokenMetadata {
    TokenMetadata {
        title: Some("Olympus Mons".into()),
        description: Some("The tallest mountain in the charted solar system".into()),
        media: None,
        media_hash: None,
        copies: Some(1u64),
        issued_at: None,
        expires_at: None,
        starts_at: None,
        updated_at: None,
        extra: None,
        reference: None,
        reference_hash: None,
    }
}

#[test]
#[should_panic(expected = "The contract is not initialized")]
fn test_default() {
    let context = get_context(accounts(1));
    testing_env!(context.build());
    let _contract = Contract::default();
}

#[test]
fn test_new_account_contract() {
    let mut context = get_context(accounts(1));
    testing_env!(context.build());
    let contract = Contract::new_default_meta(accounts(1).into());
    testing_env!(context.is_view(true).build());
    let contract_nft_tokens = contract.nft_tokens(Some(U128(0)), None);
    assert_eq!(contract_nft_tokens.len(), 0);
}

#[test]
fn test_mint_nft() {
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Contract::new_default_meta(accounts(0).into());
    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_metadata: TokenMetadata = sample_token_metadata();
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), token_metadata, accounts(0), None);
    let contract_nft_tokens = contract.nft_tokens(Some(U128(0)), None);
    assert_eq!(contract_nft_tokens.len(), 1);

    assert_eq!(contract_nft_tokens[0].token_id, token_id);
    assert_eq!(contract_nft_tokens[0].owner_id, accounts(0));
    assert_eq!(
        contract_nft_tokens[0].metadata.title,
        sample_token_metadata().title
    );
    assert_eq!(
        contract_nft_tokens[0].metadata.description,
        sample_token_metadata().description
    );
    assert_eq!(
        contract_nft_tokens[0].metadata.media,
        sample_token_metadata().media
    );
    assert_eq!(contract_nft_tokens[0].approved_account_ids, HashMap::new());
}

#[test]
fn test_internal_transfer() {
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Contract::new_default_meta(accounts(0).into());

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), sample_token_metadata(), accounts(0), None);

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(1)
        .predecessor_account_id(accounts(0))
        .build());
    contract.internal_transfer(
        &accounts(0),
        &accounts(1),
        &token_id.clone(),
        None,
        None,
    );

    testing_env!(context
        .storage_usage(env::storage_usage())
        .account_balance(env::account_balance())
        .is_view(true)
        .attached_deposit(0)
        .build());

    let tokens = contract.nft_tokens_for_owner(accounts(1), Some(U128(0)), None);
    assert_ne!(
        tokens.len(),
        0,
        "Token not correctly created and/or sent to second account"
    );
    let token = &tokens[0];
    assert_eq!(token.token_id, token_id);
    assert_eq!(token.owner_id, accounts(1));
    assert_eq!(token.metadata.title, sample_token_metadata().title);
    assert_eq!(
        token.metadata.description,
        sample_token_metadata().description
    );
    assert_eq!(token.metadata.media, sample_token_metadata().media);
    assert_eq!(token.approved_account_ids, HashMap::new());
}

#[test]
fn test_nft_approve() {
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Contract::new_default_meta(accounts(0).into());

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), sample_token_metadata(), accounts(0), None);

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MIN_REQUIRED_APPROVAL_YOCTO)
        .predecessor_account_id(accounts(0))
        .build());
    contract.nft_approve(token_id.clone(), accounts(1), None);

    testing_env!(context
        .storage_usage(env::storage_usage())
        .account_balance(env::account_balance())
        .is_view(true)
        .attached_deposit(0)
        .build());
    assert!(contract.nft_is_approved(token_id.clone(), accounts(1), None));
}

#[test]
fn test_nft_revoke() {
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Contract::new_default_meta(accounts(0).into());

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), sample_token_metadata(), accounts(0), None);

    // alice approves bob
    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MIN_REQUIRED_APPROVAL_YOCTO)
        .predecessor_account_id(accounts(0))
        .build());
    contract.nft_approve(token_id.clone(), accounts(1), None);

    // alice revokes bob
    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(1)
        .predecessor_account_id(accounts(0))
        .build());
    contract.nft_revoke(token_id.clone(), accounts(1));
    testing_env!(context
        .storage_usage(env::storage_usage())
        .account_balance(env::account_balance())
        .is_view(true)
        .attached_deposit(0)
        .build());
    assert!(!contract.nft_is_approved(token_id.clone(), accounts(1), None));
}

#[test]
fn test_revoke_all() {
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Contract::new_default_meta(accounts(0).into());

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), sample_token_metadata(), accounts(0), None);

    // alice approves bob
    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MIN_REQUIRED_APPROVAL_YOCTO)
        .predecessor_account_id(accounts(0))
        .build());
    contract.nft_approve(token_id.clone(), accounts(1), None);

    // alice revokes bob
    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(1)
        .predecessor_account_id(accounts(0))
        .build());
    contract.nft_revoke_all(token_id.clone());
    testing_env!(context
        .storage_usage(env::storage_usage())
        .account_balance(env::account_balance())
        .is_view(true)
        .attached_deposit(0)
        .build());
    assert!(!contract.nft_is_approved(token_id.clone(), accounts(1), Some(1)));
}

#[test]
fn test_internal_remove_token_from_owner() {
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Contract::new_default_meta(accounts(0).into());

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), sample_token_metadata(), accounts(0), None);

    let contract_nft_tokens_before = contract.nft_tokens_for_owner(accounts(0), None, None);
    assert_eq!(contract_nft_tokens_before.len(), 1);

    contract.internal_remove_token_from_owner(&accounts(0), &token_id);
    let contract_nft_tokens_after = contract.nft_tokens_for_owner(accounts(0), None, None);
    assert_eq!(contract_nft_tokens_after.len(), 0);
}

#[test]
fn test_nft_payout() {
    use crate::royalty::NonFungibleTokenCore;
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Contract::new_default_meta(accounts(0).into());

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), sample_token_metadata(), accounts(0), None);

    // alice approves bob
    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MIN_REQUIRED_APPROVAL_YOCTO)
        .predecessor_account_id(accounts(0))
        .build());
    contract.nft_approve(token_id.clone(), accounts(1), None);

    let payout = contract.nft_payout(token_id.clone(), U128(10), 1);
    let expected = HashMap::from([(accounts(0), U128(10))]);
    assert_eq!(payout.payout, expected);
}

#[test]
fn test_nft_total_supply() {
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Contract::new_default_meta(accounts(0).into());

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), sample_token_metadata(), accounts(0), None);

    let total_supply = contract.nft_total_supply();
    assert_eq!(total_supply, U128(1));
}
'''
'''--- near-microbonds-bond-factory/package.json ---
{
  "name": "microbonds-factory",
  "version": "1.0.0",
  "license": "MIT",
  "scripts": {
    "build": "cd nft-contract && bash build.sh && cd .. && ls && cd factory-contract && bash build.sh && cd ..",
    "build:nft-contract": "cd nft-contract && ./build.sh",
    "build:factory-contract": "cd factory-contract && ./build.sh",
    "build:tests": "cd integration-tests/rs && cargo build",

    "deploy": "cd nft-contract && ./deploy.sh && cd ../factory-contract && ./deploy.sh",
    "deploy:nft-contract": "cd nft-contract && ./deploy.sh",
    "deploy:factory-contract": "cd factory-contract && ./deploy.sh",

    "test": "npm run:test:unit && npm run:test:integration",
    "test:unit": "npm run test:unit:nft-contract && npm run test:unit:factory-contract",
    "test:unit:nft-contract": "npm run build && cd nft-contract && cargo test -- --nocapture --color=always && cd ..",
    "test:unit:factory-contract": "npm run build && cd factory-contract && cargo test -- --nocapture --color=always && cd ..",

    "test:integration": "npm run test:integration:ts",
    "test:integration:ts": "npm run build && cd integration-tests-ts && npm test -- -- \"../factory-contract/target/wasm32-unknown-unknown/release/bond_factory.wasm\""
  }
}

'''
'''--- near-microbonds-custody-contract/README.md ---
# Microbonds Custody Contract

The goal behind the Microbonds project is to allow projects to be created under governing municipalities, and have funds raised for their projects just like traditional bonds, but unlike the traditional way, have the bonds represented as a Non-Fungible Token. As there are many different parts to making this work under different legislations, the project has a few moving parts. We will cover them in detail in their individual code bases.

## Introduction

This contract is responsible for storing all tokens held by users who have not bound their own wallets.

So in essence tokens will be minted here and a registry will be kept of these tokens.

Users can then bind a near account to their account on the user registry contract and withdraw their 
tokens to the bound account.

## Table of Contents

1. [Tokens](#tokens)
2. [User Accounts](#user-accounts)

## Tokens

Let's go through the contract and what a typical use-case would look like for each functionality. You can see the overall contract structure in the
table of contents.

In our use-case, we want to allow tokens to be stored for users who have not linked their own wallets. This is done using the following function:

```rs
pub fn add_new_token_for_owner(
    &mut self,
    owner_id: String,
    token_account_id: AccountId,
    token_id: String,
    memo: Option<String>
)
```

Using this function, we have stored a new token for the user and it will emit the following event:

```rs
pub struct AddTokenLog {
    pub owner_id: String,
    pub token_account_id: String,
    pub token_id: String,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<String>,
}
```

We can also view the tokens that any user has in the custody contract with the following function:

```rs
pub fn tokens_for_owner(
    &self,
    owner_id: String,
    from_index: Option<U128>,
    limit: Option<u64>,
) -> Vec<String>
```

If a user has linked a wallet to the contract, we can send the token to the user's wallet using the following function:

```rs
pub fn send_token_to_owner(
    &self,
    owner_id: String,
    token_account_id: AccountId,
    token_id: String,
    transfer_memo: Option<String>,
    resolve_memo: Option<String>,
) -> Promise
```

This function will emit the following event:

```rs
pub struct SendTokenLog {
    pub owner_id: String,
    pub token_account_id: String,
    pub token_id: String,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<String>,
}
```

## User Accounts

In our use-case, we want to allow users to bind their own wallets to their account on the user registry contract. This is done using the following function:

```rs
pub fn link_account_to_user(
    &mut self, 
    user_id: String, 
    account_id: AccountId
)
```

Depending on whether the user has already linked a wallet or not, this function will emit one of the following events:

```rs
pub struct LinkAccountLog {
    pub user_id: String,
    pub account_id: String,
    pub memo: Option<String>,
}

// OR

pub struct ChangeAccountLog {
    pub user_id: String,
    pub old_account_id: String,
    pub new_account_id: String,
    pub memo: Option<String>,
}
```

We can also view the connected account for a user at any point in time using the following function:

```rs
pub fn get_account_for_user(
    &self, 
    user_id: String
) -> Option<AccountId>
```

## How to build and run tests

You can use either yarn or npm for the following commands:

### Install packages

```
npm install
```

### Build contracts

```
npm build
```

### Run all tests
```
npm test
```

### Run unit tests only

```
npm run test:unit
```

### Run integration tests only in both TypeScript and Rust
```
npm run test:integration
```

### Run integration tests only in either TypeScript OR Rust
```
npm run test:integration:ts OR npm run test:integration:rs
```

Please check the package.json for all possible scripts.
'''
'''--- near-microbonds-custody-contract/contract/Cargo.toml ---
[package]
name = "custody_contract"
version = "1.0.0"
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0"
uint = { version = "0.9.3", default-features = false }

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []

'''
'''--- near-microbonds-custody-contract/contract/build.sh ---
#!/bin/bash
set -e && RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release && mkdir -p ../out && cp target/wasm32-unknown-unknown/release/*.wasm ../out/custody.wasm
'''
'''--- near-microbonds-custody-contract/contract/deploy.sh ---
#!/bin/sh

./build.sh

if [ $? -ne 0 ]; then
  echo ">> Error building contract"
  exit 1
fi

echo ">> Deploying contract"

# https://docs.near.org/tools/near-cli#near-dev-deploy
near dev-deploy --wasmFile ./target/wasm32-unknown-unknown/release/hello_near.wasm

'''
'''--- near-microbonds-custody-contract/contract/src/events.rs ---
use std::fmt;

use near_sdk::{serde::{Deserialize, Serialize}, serde_json};

/// Enum that represents the data type of the EventLog.
/// The enum can either be an NftMint or an NftTransfer.
#[derive(Serialize, Deserialize, Debug)]
#[serde(tag = "event", content = "data")]
#[serde(rename_all = "snake_case")]
#[serde(crate = "near_sdk::serde")]
#[non_exhaustive]
pub enum EventLogVariant {
    AddToken(Vec<AddTokenLog>),
    SendToken(Vec<SendTokenLog>),
    LinkAccount(Vec<LinkAccountLog>),
    ChangeAccount(Vec<ChangeAccountLog>),
}

/// Interface to capture data about an event
///
/// Arguments:
/// * `standard`: name of standard e.g. nep171
/// * `version`: e.g. 1.0.0
/// * `event`: associate event data
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct EventLog {
    pub version: String,

    // `flatten` to not have "event": {<EventLogVariant>} in the JSON, just have the contents of {<EventLogVariant>}.
    #[serde(flatten)]
    pub event: EventLogVariant,
}

impl fmt::Display for EventLog {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_fmt(format_args!(
            "EVENT_JSON:{}",
            &serde_json::to_string(self).map_err(|_| fmt::Error)?
        ))
    }
}

/// An event log to capture adding a token
///
/// Arguments
/// * `owner_id`: id of the owner
/// * `token_account_id`: account id of the token
/// * `token_id`: token id of the token
/// * `memo`: optional message
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct AddTokenLog {
    pub owner_id: String,
    pub token_account_id: String,
    pub token_id: String,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<String>,
}

/// An event log to capture sending a token to its owner
///
/// Arguments
/// * `owner_id`: id of the owner
/// * `token_account_id`: account id of the token
/// * `token_id`: token id of the token
/// * `memo`: optional message
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct SendTokenLog {
    pub owner_id: String,
    pub token_account_id: String,
    pub token_id: String,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<String>,
}

/// An event log to capture adding an account to a user
/// 
/// Arguments:
/// * `user_id`: the user id of the user being added
/// * `account_id`: the account id of the user being added
/// * `memo` (optional): a memo to add to the event log
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct LinkAccountLog {
    pub user_id: String,
    pub account_id: String,
    pub memo: Option<String>,
}

/// An event log to capture changing an account for a user
/// 
/// Arguments:
/// * `user_id`: the user id of the user being added
/// * `old_account_id`: the old account id of the user being added
/// * `new_account_id`: the new account id of the user being added
/// * `memo` (optional): a memo to add to the event log
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct ChangeAccountLog {
    pub user_id: String,
    pub old_account_id: String,
    pub new_account_id: String,
    pub memo: Option<String>,
}
'''
'''--- near-microbonds-custody-contract/contract/src/external.rs ---
use near_sdk::ext_contract;

use crate::*;

pub type TokenId = String;

/// external contract calls

#[ext_contract(token_contract)]
trait TokenContract {
    fn nft_transfer(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        // we introduce an approval ID so that people with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
    );
}
'''
'''--- near-microbonds-custody-contract/contract/src/internal.rs ---
use crate::*;

impl Contract {
    pub(crate) fn assert_owner(&self) {
        assert!(
            self.owner_id == env::predecessor_account_id(),
            "Caller not owner"
        );
    }
}

'''
'''--- near-microbonds-custody-contract/contract/src/lib.rs ---
use near_sdk::{AccountId, collections::{LookupMap, UnorderedSet}, PanicOnDefault, near_bindgen, BorshStorageKey, env::{self}, Gas};
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::json_types::{U128};
use near_sdk::serde::{Deserialize, Serialize};

use crate::external::*;
use crate::types::*;
use crate::events::*;
use crate::user_account::*;

mod views;
mod internal;
mod external;
mod types;
mod events;
mod tokens;
mod user_account;

const GAS_FOR_NFT_TRANSFER: Gas = Gas(15_000_000_000_000);
const GAS_FOR_RESOLVE_TRANSFER: Gas = Gas(15_000_000_000_000);
const GAS_FOR_REGISTRY_RESOLVE: Gas = Gas(15_000_000_000_000);

static DELIMITER: &str = ":";

/**
 * Description: 
 * This contract is responsible for managing the custody of NFTs on behalf of users.
 * The contract is designed to be used by a web app that allows users to bind their NEAR wallet to the contract.
 * Once bound, the user can transfer their stored NFTs to their linked wallet.
 */

// Main contract structure to store all information
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
    // Custody contract owner
    pub owner_id: AccountId,

    // Stores the set of accountId:tokenId for each owner
    pub tokens_per_owner: LookupMap<String, UnorderedSet<String>>,

    /// This tracks if a user has bound an external near wallet to the registry
    /// UserString => AccountId
    pub user_to_account: LookupMap<String, AccountId>
}

#[derive(BorshStorageKey, BorshSerialize)]
pub enum StorageKey {
    TokensPerOwner,
    TokensPerOwnerInner,
    TokensAsVector,
    UserToAccount,
}

#[near_bindgen]
impl Contract {

    /**
     * Initialization function (can only be called once)
     */
    #[init]
    pub fn new(owner_id: AccountId) -> Self {
        let this = Self {
            // Set the owner_id field equal to the passed in owner_id
            owner_id,
            tokens_per_owner: LookupMap::new(StorageKey::TokensPerOwner.try_to_vec().unwrap()),
            user_to_account: LookupMap::new(StorageKey::UserToAccount.try_to_vec().unwrap())
        };

        // Return the Contract object
        this
    }
}

#[cfg(test)]
mod tests;
'''
'''--- near-microbonds-custody-contract/contract/src/tests.rs ---
/* unit tests */
#[cfg(test)]
use crate::Contract;
use crate::{JsonTokens};
use near_sdk::json_types::{U128, U64};
use near_sdk::test_utils::{accounts, VMContextBuilder};
use near_sdk::testing_env;
use near_sdk::{env, AccountId};

/**
    THIS_CONTRACT: accounts(0);
    OWNER_ID: accounts(1);
    USER_REGISTRY_CONTRACT_ID: accounts(2);
    TOKEN_ACCOUNT_ID: accounts(3);
    TOKEN_ID: "1";
    TOKEN_ID_2: "2";
    TOKEN_OWNER: "token_owner";
*/

fn get_context(predecessor: AccountId) -> VMContextBuilder {
    let mut builder = VMContextBuilder::new();
    builder.predecessor_account_id(predecessor);
    builder
}

fn sample_json_tokens_data() -> JsonTokens {
    JsonTokens {
        owner_id: "token_owner_1".to_string(),
        tokens: vec![accounts(3).to_string() + &":1".to_string(), accounts(3).to_string() + &":2".to_string()],
    }
}

#[test]
#[should_panic(expected = "The contract is not initialized")]
fn test_default() {
    let context = get_context(accounts(0));
    testing_env!(context.build());
    let _contract = Contract::default();
}

#[test]
fn test_initialization() {
    let context = get_context(accounts(0));
    testing_env!(context.build());
    let _contract = Contract::new(accounts(1));
}

#[test]
fn test_tokens_for_owner() {
    let context = get_context(accounts(1));
    testing_env!(context.build());
    let mut contract = Contract::new(accounts(1));
    contract.add_new_token_for_owner(
        "token_owner_1".to_string(),
        accounts(3),
        "1".to_string(),
        None,
    );
    contract.add_new_token_for_owner(
        "token_owner_1".to_string(),
        accounts(3),
        "2".to_string(),
        None,
    );
    let tokens = contract.tokens_for_owner("token_owner_1".to_string(), None, None);
    
    // Check that the tokens length is the same as sample_json_tokens_data
    assert_eq!(tokens.len(), sample_json_tokens_data().tokens.len());
}

#[test]
fn test_tokens_for_owner_with_limit() {
    let context = get_context(accounts(1));
    testing_env!(context.build());
    let mut contract = Contract::new(accounts(1));
    contract.add_new_token_for_owner(
        "token_owner_1".to_string(),
        accounts(3),
        "1".to_string(),
        None,
    );
    contract.add_new_token_for_owner(
        "token_owner_1".to_string(),
        accounts(3),
        "2".to_string(),
        None,
    );
    let tokens = contract.tokens_for_owner("token_owner_1".to_string(), None, Some(U64(1).0));
    
    // Check that the tokens length is 1
    assert_eq!(tokens.len(), 1);

    // Check that the token is the same as the first token in sample_json_tokens_data
    assert_eq!(tokens[0], sample_json_tokens_data().tokens[0]);
}

#[test]
fn test_tokens_for_owner_with_limit_and_offset() {
    let context = get_context(accounts(1));
    testing_env!(context.build());
    let mut contract = Contract::new(accounts(1));
    contract.add_new_token_for_owner(
        "token_owner_1".to_string(),
        accounts(3),
        "1".to_string(),
        None,
    );
    contract.add_new_token_for_owner(
        "token_owner_1".to_string(),
        accounts(3),
        "2".to_string(),
        None,
    );
    let tokens = contract.tokens_for_owner("token_owner_1".to_string(), Some(U128(1)), None);
    
    // Check that the tokens length is 1
    assert_eq!(tokens.len(), 1);

    // Check that the token is the same as the second token in sample_json_tokens_data
    assert_eq!(tokens[0], sample_json_tokens_data().tokens[1]);
}

#[test]
#[should_panic(expected = "Caller not owner")]
fn test_add_new_token_for_owner() {
    let context = get_context(accounts(5));
    testing_env!(context.build());
    let mut contract = Contract::new(accounts(1));
    contract.add_new_token_for_owner(
        "token_owner_1".to_string(),
        accounts(3),
        "1".to_string(),
        None,
    );
}

#[test]
fn test_add_account_to_user() {
    let context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Contract::new(accounts(0));
    contract.link_account_to_user("user1".to_string(), accounts(1));
    assert_eq!(contract.user_to_account.get(&"user1".to_string()).unwrap(), accounts(1));
}

#[test]
fn test_change_account_for_user() {
    let context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Contract::new(accounts(0));
    contract.link_account_to_user("user1".to_string(), accounts(1));
    contract.link_account_to_user("user1".to_string(), accounts(2));
    assert_eq!(contract.user_to_account.get(&"user1".to_string()).unwrap(), accounts(2));
}

#[test]
#[should_panic(expected = "Caller not owner")]
fn test_add_account_to_user_not_owner() {
    let context = get_context(accounts(1));
    testing_env!(context.build());
    let mut contract = Contract::new(accounts(0));
    contract.link_account_to_user("user1".to_string(), accounts(1));
}
'''
'''--- near-microbonds-custody-contract/contract/src/tokens.rs ---
use near_sdk::{Promise};

use crate::*;

#[near_bindgen]
impl Contract {

    /**
     * Adds a new token to an owner
     */
    pub fn add_new_token_for_owner(
        &mut self,
        owner_id: String,
        token_account_id: AccountId,
        token_id: String,
        memo: Option<String>
    ) {
        // Make sure the caller is the contract owner
        self.assert_owner();

        // Create a new string which stores token_account_id:token_id
        let token_info = token_account_id.to_string().clone() + DELIMITER + token_id.as_str();

        // Check if the owner already exists
        if !self.tokens_per_owner.contains_key(&owner_id) { // owner has already been initialized
            self.tokens_per_owner.insert(
                &owner_id,
                &UnorderedSet::new(StorageKey::TokensPerOwnerInner.try_to_vec().unwrap())
            );
        }

        // Get the unordered set of token strings
        let mut tokens = self.tokens_per_owner.get(&owner_id).unwrap();

        // Add the new token_info string to the set and make sure it doesn't already exist
        assert!(
            tokens.insert(&token_info),
            "Token info already exists"
        );

        // Save the new tokens set to the owner
        self.tokens_per_owner.insert(&owner_id, &tokens);

        // construct add token log
        let add_token_log: EventLog = EventLog { 
            version: "1.0.0".to_string(), 
            event: EventLogVariant::AddToken(vec![AddTokenLog { 
                owner_id, 
                token_account_id: token_account_id.to_string(), 
                token_id, 
                memo
            }])
        };

        env::log_str(&add_token_log.to_string());
        
    }

    /**
     * Sends an existing token to the owner
     */
    pub fn send_token_to_owner(
        &self,
        owner_id: String,
        token_account_id: AccountId,
        token_id: String,
        transfer_memo: Option<String>,
        resolve_memo: Option<String>,
    ) -> Promise {

        // Get the linked account for user, if it doesn't exist assert
        let account_id = self.user_to_account.get(&owner_id).expect("No account linked to user");
        
        // Assert whether the accountId is the same as the caller
        assert!(
            account_id == env::signer_account_id(),
            "Caller is not the owner of the account"
        );

        // Get the unordered set of token strings
        let tokens = self.tokens_per_owner.get(&owner_id).unwrap();

        // The provided token info formatted as stored
        let token_info = token_account_id.to_string().clone() + DELIMITER + token_id.as_str();

        // Make sure the owner owns the provided token
        assert!(
            tokens.contains(&token_info),
            "Owner does not own provided token"
        );

        // Make the cross-contract call to the token contract to transfer the token to the owner
        token_contract::ext(token_account_id.clone())
        // attach 1 yoctoNEAR with status GAS equal to the GAS for nft transfer.
        .with_attached_deposit(1)
        .with_static_gas(GAS_FOR_NFT_TRANSFER)
        .nft_transfer(
            env::signer_account_id(), 
            token_id.clone(), 
            None, 
            transfer_memo
        )
        .then(
            Self::ext(env::current_account_id())
            .with_static_gas(GAS_FOR_RESOLVE_TRANSFER)
            .resolve_transfer(owner_id, token_account_id.clone(), token_id.clone(), resolve_memo)
        )
    }

    /**
     * Removes the token from the registry
     */
    #[private]
    pub fn resolve_transfer(
        &mut self,
        owner_id: String,
        token_account_id: AccountId,
        token_id: String,
        memo: Option<String>
    ) {        
        // Get the unordered set of token strings
        let mut tokens = self.tokens_per_owner.get(&owner_id).unwrap();

        // The provided token info formatted as stored
        let token_info = token_account_id.to_string().clone() + DELIMITER + token_id.as_str();

        assert!(
            tokens.remove(&token_info),
            "The token was not found in the owners token set"
        );

        // Store the new set
        self.tokens_per_owner.insert(&owner_id, &tokens);

        // construct add token log
        let send_token_log: EventLog = EventLog { 
            version: "1.0.0".to_string(), 
            event: EventLogVariant::SendToken(vec![SendTokenLog { 
                owner_id, 
                token_account_id: token_account_id.to_string(), 
                token_id, 
                memo
            }])
        };

        env::log_str(&send_token_log.to_string());
    }
}
'''
'''--- near-microbonds-custody-contract/contract/src/types.rs ---
use crate::*;

// Currently only used for testing
#[derive(BorshDeserialize, BorshSerialize)]
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct JsonTokens {
    pub owner_id: String,
    pub tokens: Vec<String>, // List of `tokenAccountId:tokenId`
}
'''
'''--- near-microbonds-custody-contract/contract/src/user_account.rs ---
use crate::*;

#[near_bindgen]
impl Contract {
    /// Adds an accountId to the user_to_account lookup map
    /// Arguments:
    /// * `user_id`: the user id of the user being added
    /// * `account_id`: the account id of the user being added
    pub fn link_account_to_user(
        &mut self, 
        user_id: String, 
        account_id: AccountId
    ) {
        // Assert that the caller is the owner
        self.assert_owner();

        // Fetches the account id for the given user id
        let account = self.user_to_account.get(&user_id);

        // If the account is None, insert the new account id and log the event with AddAccountLog
        // If the account is Some, assert that the account id is the same as the given account id
        // If  the account is Some and the account id is not the same as the given account id, log the event with ChangeAccountLog
        match account {
            None => {
                self.user_to_account.insert(&user_id, &account_id);
                env::log_str(&EventLog {
                    version: "1.0.0".to_string(),
                    event: EventLogVariant::LinkAccount(vec![LinkAccountLog {
                        user_id: user_id.clone(),
                        account_id: account_id.to_string(),
                        memo: None,
                    }]),
                }.to_string());
            },
            Some(existing_account_id) => {
                // If the account id is the same as the given account id, do nothing
                if existing_account_id == account_id {
                    return;
                } else {
                    // add the new account id and log the event with ChangeAccountLog
                    self.user_to_account.insert(&user_id, &account_id);
                    env::log_str(&EventLog {
                        version: "1.0.0".to_string(),
                        event: EventLogVariant::ChangeAccount(vec![ChangeAccountLog {
                            user_id: user_id.clone(),
                            old_account_id: existing_account_id.to_string(),
                            new_account_id: account_id.to_string(),
                            memo: None,
                        }]),
                    }.to_string());
                }
            }
        }
    }
}
'''
'''--- near-microbonds-custody-contract/contract/src/views.rs ---
use near_sdk::collections::Vector;

use crate::*;

#[near_bindgen]
impl Contract {

    /// Get the tokens stored for given owner
    pub fn tokens_for_owner(
        &self,
        owner_id: String,
        from_index: Option<U128>,
        limit: Option<u64>,
    ) -> Vec<String> {

        // Get the UnorderedSet of tokens that belong to an owner
        let tokens_for_owner_set = self.tokens_per_owner.get(&owner_id);

        // If tokens_for_owner_set is not empty, we store it in tokens, if empty we return None
        let tokens = if let Some(tokens_for_owner_set) = tokens_for_owner_set {
            tokens_for_owner_set
        } else {
            return vec![];
        };

        // Starting index
        let start = u128::from(from_index.unwrap_or(U128(0)));

        // iterate through each token using iterator
        tokens.iter()
            .skip(start as usize)
            .take(limit.unwrap_or(50) as usize)
            .collect()
    }
    

    /// Gets the account id for the given user id
    pub fn get_account_for_user(&self, user_id: String) -> Option<AccountId> {
        // Fetches the account id for the given user id
        self.user_to_account.get(&user_id)
    }
}

'''
'''--- near-microbonds-custody-contract/integration-tests/ts/package.json ---
{
  "name": "ava-testing",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "test": "ava"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.1",
    "@types/node": "^18.11.3",
    "ava": "^4.3.3",
    "near-workspaces": "^3.2.2",
    "ts-node": "^10.9.1",
    "typescript": "^4.8.4"
  },
  "dependencies": {}
}

'''
'''--- near-microbonds-custody-contract/integration-tests/ts/src/helper_functions.ts ---
import { Worker, NearAccount } from 'near-workspaces';

export async function setupNFT(owner: NearAccount, custody_contract: NearAccount) {
    const nft_contract = await owner.devDeploy(
        './supplementary_contracts/bond_nft.wasm',
        {
            method: 'new_default_meta',
            args: {
                owner_id: owner.accountId
            },
        }
    );

    // Mint token to custody contract
    await owner.call(nft_contract, 'nft_mint', {
        token_id: '1',
        metadata: {
            title: 'Bond',
        },
        receiver_id: custody_contract.accountId,
    }, {
        attachedDeposit: '5990000000000000000000'
    });

    return nft_contract;
}
'''
'''--- near-microbonds-custody-contract/integration-tests/ts/src/main.ava.ts ---
import { Worker, NearAccount } from 'near-workspaces';
import anyTest, { TestFn } from 'ava';
import { setupNFT } from './helper_functions';

const test = anyTest as TestFn<{
  worker: Worker;
  accounts: Record<string, NearAccount>;
}>;

test.beforeEach(async (t) => {
    // Init the worker and start the Sandbox server
    const worker = await Worker.init();

    // Create accounts and add balances
    const root = worker.rootAccount;
    const owner = await root.createSubAccount('owner', {
        initialBalance: '10000000000000000000000000000000'
    });
    
    const user1_external_wallet_a = await root.createSubAccount('user1_a', {
        initialBalance: '10000000000000000000000000000000'
    });
    const user1_external_wallet_b = await root.createSubAccount('user1_b', {
        initialBalance: '10000000000000000000000000000000'
    });
    
    // Get wasm file path from package.json test script in folder above
    const custody_contract = await owner.devDeploy(
        process.argv[2],
        {
            method: 'new',
            args: {
                owner_id: owner.accountId
            },
        }
    );

    // Deploy nft contract and mint token to custody contract - !not saved to custody contract yet!
    const nft_contract = await setupNFT(owner, custody_contract);

    // Save state for test runs, it is unique for each test
    t.context.worker = worker;
    t.context.accounts = { root, owner, custody_contract, user1_external_wallet_a, user1_external_wallet_b, nft_contract };
});

test.afterEach(async (t) => {
    // Stop the Sandbox server
    await t.context.worker.tearDown().catch((error) => {
        console.log('Failed to stop Sandbox server', error);
    });
});

// === Test adding token to owner
test('Should fail to add token to owner if caller is not custody contract owner', async (t) => {
    const { custody_contract, nft_contract } = t.context.accounts;
    
    await t.throwsAsync(async () => {
        await nft_contract.call(custody_contract, 'add_new_token_for_owner', {
            owner_id: 'user1',
            token_account_id: nft_contract.accountId,
            token_id: '1',
        })
    });
});

test('Should add token to correct owner', async (t) => {
    const { custody_contract, owner, nft_contract } = t.context.accounts;
    
    await owner.call(custody_contract, 'add_new_token_for_owner', {
        owner_id: 'user1',
        token_account_id: nft_contract.accountId,
        token_id: '1',
    });

    const tokens: string = await custody_contract.view('tokens_for_owner', {
        owner_id: 'user1',
    });

    t.is(tokens[0], `${nft_contract.accountId}:1`);
});

test('Should fail to add an existing token', async (t) => {
    const { custody_contract, owner, nft_contract } = t.context.accounts;
    
    await owner.call(custody_contract, 'add_new_token_for_owner', {
        owner_id: 'user1',
        token_account_id: nft_contract.accountId,
        token_id: '1',
    });

    await t.throwsAsync(async () => {
        await owner.call(custody_contract, 'add_new_token_for_owner', {
            owner_id: 'user1',
            token_account_id: nft_contract.accountId,
            token_id: '1',
        })
    });
});

test('Should view tokens with a limit', async (t) => {
    const { custody_contract, owner, nft_contract } = t.context.accounts;
    
    await owner.call(custody_contract, 'add_new_token_for_owner', {
        owner_id: 'user1',
        token_account_id: nft_contract.accountId,
        token_id: '1',
    });
    await owner.call(custody_contract, 'add_new_token_for_owner', {
        owner_id: 'user1',
        token_account_id: nft_contract.accountId,
        token_id: '2',
    });
    await owner.call(custody_contract, 'add_new_token_for_owner', {
        owner_id: 'user1',
        token_account_id: nft_contract.accountId,
        token_id: '3',
    });

    const tokens: string[] = await custody_contract.view('tokens_for_owner', {
        owner_id: 'user1',
        limit: 2
    });

    t.is(tokens.length, 2);
});

test('Should view tokens with a limit and offset', async (t) => {
    const { custody_contract, owner, nft_contract } = t.context.accounts;

    await owner.call(custody_contract, 'add_new_token_for_owner', {
        owner_id: 'user1',
        token_account_id: nft_contract.accountId,
        token_id: '1',
    });

    await owner.call(custody_contract, 'add_new_token_for_owner', {
        owner_id: 'user1',
        token_account_id: nft_contract.accountId,
        token_id: '2',
    });

    await owner.call(custody_contract, 'add_new_token_for_owner', {
        owner_id: 'user1',
        token_account_id: nft_contract.accountId,
        token_id: '3',
    });

    const tokens: string[] = await custody_contract.view('tokens_for_owner', {
        owner_id: 'user1',
        from_index: '1',
        limit: 2
    });

    t.is(tokens.length, 2);
    t.is(tokens[0], `${nft_contract.accountId}:2`);
    t.is(tokens[1], `${nft_contract.accountId}:3`);
});

// === Test account linking and withdrawal
test('Should link an account to a user', async (t) => {
    const { custody_contract, owner, user1_external_wallet_a } = t.context.accounts;
    await owner.call(custody_contract, 'link_account_to_user', {
        user_id: 'user1',
        account_id: user1_external_wallet_a.accountId,
    });
    const account: string = await custody_contract.view('get_account_for_user', {
        user_id: 'user1'
    });
    t.is(account, user1_external_wallet_a.accountId);
});

test('Should change the account for a user', async (t) => {
    const { custody_contract, owner, user1_external_wallet_a, user1_external_wallet_b } = t.context.accounts;
    await owner.call(custody_contract, 'link_account_to_user', {
        user_id: 'user1',
        account_id: user1_external_wallet_a.accountId,
    });

    let account: string = await custody_contract.view('get_account_for_user', {
        user_id: 'user1'
    });
    t.is(account, user1_external_wallet_a.accountId);

    await owner.call(custody_contract, 'link_account_to_user', {
        user_id: 'user1',
        account_id: user1_external_wallet_b.accountId,
    });

    account = await custody_contract.view('get_account_for_user', {
        user_id: 'user1'
    });
    t.is(account, user1_external_wallet_b.accountId);
});

// test('Fails to withdraw token to owner if caller is not the same as the linked account', async () => {
//     // TODO
// });
test('Should fail to withdraw if no account is linked', async (t) => {
    const { custody_contract, owner, nft_contract } = t.context.accounts;

    await owner.call(custody_contract, 'add_new_token_for_owner', {
        owner_id: 'user1',
        token_account_id: nft_contract.accountId,
        token_id: '1',
    });

    await t.throwsAsync(async () => {
        await owner.call(custody_contract, 'send_token_to_owner', {
            owner_id: 'user1',
            token_account_id: nft_contract.accountId,
            token_id: '1',
        });
    });
});

test('Should fail to withdraw if the caller is not the linked account', async (t) => {
    const { custody_contract, owner, nft_contract, user1_external_wallet_a } = t.context.accounts;

    await owner.call(custody_contract, 'add_new_token_for_owner', {
        owner_id: 'user1',
        token_account_id: nft_contract.accountId,
        token_id: '1',
    });

    await owner.call(custody_contract, 'link_account_to_user', {
        user_id: 'user1',
        account_id: user1_external_wallet_a.accountId,
    });

    await t.throwsAsync(async () => {
        await owner.call(custody_contract, 'send_token_to_owner', {
            owner_id: 'user1',
            token_account_id: nft_contract.accountId,
            token_id: '1',
        });
    });
});

test('Should fail to withdraw if the caller is does not own the given token', async (t) => {
    const { custody_contract, owner, nft_contract, user1_external_wallet_a } = t.context.accounts;

    await owner.call(custody_contract, 'link_account_to_user', {
        user_id: 'user1',
        account_id: user1_external_wallet_a.accountId,
    });

    await t.throwsAsync(async () => {
        await owner.call(custody_contract, 'send_token_to_owner', {
            owner_id: 'user1',
            token_account_id: nft_contract.accountId,
            token_id: '1',
        });
    });
});

test('Should withdraw the token to the owner if the caller is the linked account', async (t) => {
    const { custody_contract, owner, nft_contract, user1_external_wallet_a } = t.context.accounts;

    await owner.call(custody_contract, 'add_new_token_for_owner', {
        owner_id: 'user1',
        token_account_id: nft_contract.accountId,
        token_id: '1',
    });

    await owner.call(custody_contract, 'link_account_to_user', {
        user_id: 'user1',
        account_id: user1_external_wallet_a.accountId,
    });

    await user1_external_wallet_a.call(custody_contract, 'send_token_to_owner', {
        owner_id: 'user1',
        token_account_id: nft_contract.accountId,
        token_id: '1',
    }, {
        gas: '45000000000000'
    });

    const tokens: string[] = await custody_contract.view('tokens_for_owner', {
        owner_id: 'user1',
    });

    t.is(tokens.length, 0);
});
'''
'''--- near-microbonds-custody-contract/package.json ---
{
  "name": "microbonds-custody-sc",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "deploy": "cd contract && ./deploy.sh",
    "build": "npm run build:contract",
    "build:contract": "cd contract && ./build.sh",
    "test": "npm run test:unit && npm run test:integration:ts",
    "test:unit": "npm run build && cd contract && cargo test",
    "test:integration:ts": "npm run build && cd integration-tests/ts && npm test -- -- \"../../contract/target/wasm32-unknown-unknown/release/custody_contract.wasm\"",
    "postinstall": "echo no frontend && cd integration-tests && npm install && cd .. && echo rs contract"
  },
  "devDependencies": {
    "near-cli": "^3.4.2"
  },
  "dependencies": {}
}

'''
'''--- near-microbonds-user-registry/README.md ---
# Microbonds User Registry

The goal behind the Microbonds project is to allow projects to be created under governing municipalities, and have funds raised for their projects just like traditional bonds, but unlike the traditional way, have the bonds represented as a Non-Fungible Token. As there are many different parts to making this work under different legislations, the project has a few moving parts. We will cover them in detail in their individual code bases.

## Introduction

This contract is responsible for keeping track of users that have registered under a municipality. 

## Table of Contents

1. [Adding Users](#adding-users)

## Adding Users

Let's go through the contract and what a typical use-case would look like for each functionality.

In our use-case, we want to have a user sign up to the platform and then register to a municipality. Some municipalities have different requirements for 
registration, so we will have to check that the user meets the requirements before registering them. If they are approved, we will add them with the following function:

```rs
pub fn add_user_to_municipality(
    &mut self, 
    municipality_id: String, 
    user_id: String
)
```
Using this function, we can provide any unique identifier for the municipality and the user that will be broadcasted with the following event:

```rs
pub struct AddUserLog {
    pub user_id: String,
    pub municipality_id: String,
    pub memo: Option<String>,
}
```

## Checking User Registration

We can now see if a user is registered to a municipality by using the following function:

```rs
pub fn is_user_in_municipality(
    &self, 
    municipality_id: String, 
    user_id: String
) -> bool
```

We can also get all the users who are registered under a municipality by using the following function:

```rs
pub fn get_users_for_municipality(
    &self, 
    municipality_id: String,
    from_index: Option<U128>,
    limit: Option<u64>,
) -> Vec<String>
```

# How to build and run tests

You can use either yarn or npm for the following commands:

### Install dependencies
```bash
npm install
```

### Build contracts 
```bash
npm run build
```

### Run all tests
```bash
npm run test
```

### Run unit tests only

```
npm run test:unit
```

### Run integration tests only in both TypeScript and Rust
```
npm run test:integration
```

### Run integration tests only in either TypeScript OR Rust
```
npm run test:integration:ts OR npm run test:integration:rs
```

Please check the package.json for all possible scripts.
'''
'''--- near-microbonds-user-registry/contract/Cargo.toml ---
[package]
name = "user-registry"
version = "1.0.0"
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0"
uint = { version = "0.9.3", default-features = false }

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []

'''
'''--- near-microbonds-user-registry/contract/build.sh ---
#!/bin/bash
set -e && 
RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release && 
mkdir -p ../out && cp target/wasm32-unknown-unknown/release/*.wasm ../out/registry.wasm
'''
'''--- near-microbonds-user-registry/contract/deploy.sh ---
#!/bin/sh

./build.sh

if [ $? -ne 0 ]; then
  echo ">> Error building contract"
  exit 1
fi

echo ">> Deploying contract"

# https://docs.near.org/tools/near-cli#near-dev-deploy
near dev-deploy --wasmFile ./target/wasm32-unknown-unknown/release/hello_near.wasm

'''
'''--- near-microbonds-user-registry/contract/src/events.rs ---
use std::fmt;

use near_sdk::{serde::{Deserialize, Serialize}, serde_json};

/// Enum that represents the data type of the EventLog.
/// The enum can either be an NftMint or an NftTransfer.
#[derive(Serialize, Deserialize, Debug)]
#[serde(tag = "event", content = "data")]
#[serde(rename_all = "snake_case")]
#[serde(crate = "near_sdk::serde")]
#[non_exhaustive]
pub enum EventLogVariant {
    AddUser(Vec<AddUserLog>)
}

/// Interface to capture data about an event
///
/// Arguments:
/// * `standard`: name of standard e.g. nep171
/// * `version`: e.g. 1.0.0
/// * `event`: associate event data
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct EventLog {
    pub version: String,

    // `flatten` to not have "event": {<EventLogVariant>} in the JSON, just have the contents of {<EventLogVariant>}.
    #[serde(flatten)]
    pub event: EventLogVariant,
}

impl fmt::Display for EventLog {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_fmt(format_args!(
            "EVENT_JSON:{}",
            &serde_json::to_string(self).map_err(|_| fmt::Error)?
        ))
    }
}

/// An event log to capture adding a user
/// 
/// Arguments:
/// * `user_id`: the user id of the user being added
/// * `municipality_id`: the municipality id of the municipality the user is being added to
/// * `memo` (optional): a memo to add to the event log
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct AddUserLog {
    pub user_id: String,
    pub municipality_id: String,
    pub memo: Option<String>,
}
'''
'''--- near-microbonds-user-registry/contract/src/internal.rs ---
use crate::*;

impl Contract {
    // Private function to assert if the called is the owner
    pub(crate) fn assert_owner(&self) {
        assert_eq!(
            env::predecessor_account_id(),
            self.owner_id,
            "Caller not owner"
        );
    }
}
'''
'''--- near-microbonds-user-registry/contract/src/lib.rs ---
use near_sdk::{AccountId, collections::{LookupMap, UnorderedSet}, PanicOnDefault, near_bindgen, BorshStorageKey, env::{self}};
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::json_types::{U128};
use near_sdk::serde::{Deserialize, Serialize};

use crate::internal::*;
use crate::events::*;
use crate::views::*;
use crate::registry_core::*;

mod internal;
mod events;
mod views;
mod registry_core;

// Main contract structure to store all information
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
    // Registry contract owner
    pub owner_id: AccountId,

    /// This tracks which users have been approved by which municipality
    /// MunicipalityId => [] of UserIds
    pub municipality_to_users: LookupMap<String, UnorderedSet<String>>,
}

#[derive(BorshStorageKey, BorshSerialize)]
pub enum StorageKey {
    MunicipalityToUsers,
    MunicipalityToUsersInner,
    MuncipalityToUsersVector,
}

#[near_bindgen]
impl Contract {

    /**
     * Initialization function (can only be called once)
     */
    #[init]
    pub fn new(
        owner_id: AccountId
    ) -> Self {
        assert!(!env::state_exists(), "Already initialized");
        let this = Self {
            // Set the owner_id field equal to the passed in owner_id
            owner_id,
            municipality_to_users: LookupMap::new(StorageKey::MunicipalityToUsers.try_to_vec().unwrap())
        };

        // Return the Contract object
        this
    }
}

#[cfg(test)]
mod tests;
'''
'''--- near-microbonds-user-registry/contract/src/registry_core.rs ---
use crate::*;

#[near_bindgen]
impl Contract {
    /// Adds a new user to the municipality_to_users lookup map
    pub fn add_user_to_municipality(
        &mut self, 
        municipality_id: String, 
        user_id: String
    ) {
        // Assert that the caller is the owner
        self.assert_owner();

        // Get the UnorderedSet of users for the given municipality
        let mut users = self.municipality_to_users.get(&municipality_id).unwrap_or_else(|| {
            // If the UnorderedSet doesn't exist, create a new one
            UnorderedSet::new(StorageKey::MunicipalityToUsersInner.try_to_vec().unwrap())
        });

        // Add the user to the UnorderedSet if it doesn't already exist
        // Uses assert to check
        assert!(
            users.insert(&user_id),
            "User already exists in the given municipality"
        );

        // Save the UnorderedSet back to the lookup map
        self.municipality_to_users.insert(&municipality_id, &users);

        // Log the event
        env::log_str(&EventLog {
            version: "1.0.0".to_string(),
            event: EventLogVariant::AddUser(vec![AddUserLog {
                user_id,
                municipality_id,
                memo: None,
            }]),
        }.to_string());
    }
}
'''
'''--- near-microbonds-user-registry/contract/src/tests.rs ---
/* unit tests */
#[cfg(test)]
use crate::Contract;
use near_sdk::json_types::{U128, U64};
use near_sdk::test_utils::{accounts, VMContextBuilder};
use near_sdk::testing_env;
use near_sdk::{env, AccountId};

fn get_context(predecessor: AccountId) -> VMContextBuilder {
    let mut builder = VMContextBuilder::new();
    builder.predecessor_account_id(predecessor);
    builder
}

#[test]
#[should_panic(expected = "The contract is not initialized")]
fn test_default() {
    let context = get_context(accounts(0));
    testing_env!(context.build());
    let _contract = Contract::default();
}

#[test]
fn test_initialization() {
    let context = get_context(accounts(0));
    testing_env!(context.build());
    let contract = Contract::new(accounts(0));
    assert_eq!(contract.owner_id, accounts(0));
}

#[test]
fn test_add_user_to_municipality() {
    let context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Contract::new(accounts(0));
    contract.add_user_to_municipality("municipality1".to_string(), "user1".to_string());
    assert_eq!(contract.municipality_to_users.get(&"municipality1".to_string()).unwrap().contains(&"user1".to_string()), true);
}

#[test]
#[should_panic(expected = "Caller not owner")]
fn test_add_user_to_municipality_not_owner() {
    let context = get_context(accounts(1));
    testing_env!(context.build());
    let mut contract = Contract::new(accounts(0));
    contract.add_user_to_municipality("municipality1".to_string(), "user1".to_string());
}
'''
'''--- near-microbonds-user-registry/contract/src/views.rs ---
use near_sdk::collections::Vector;

use crate::*;

#[near_bindgen]
impl Contract {

    /// Gets the list of users for the given municipality
    pub fn get_users_for_municipality(
        &self, 
        municipality_id: String,
        from_index: Option<U128>,
        limit: Option<u64>,
    ) -> Vec<String> {
        // Get the UnorderedSet of users for the given municipality, if it doesn't exist return an empty Vec
        let users_for_municipality_set = self.municipality_to_users.get(&municipality_id);

        let users = if let Some(users_for_municipality_set) = users_for_municipality_set {
            users_for_municipality_set
        } else {
            // Return an empty Vec
            return vec![];
        };

        let start = u128::from(from_index.unwrap_or(U128(0)));

        users.iter()
            .skip(start as usize)
            .take(limit.unwrap_or(50) as usize)
            .collect()
    }

    /// Returns if the user is in the given municipality
    pub fn is_user_in_municipality(&self, municipality_id: String, user_id: String) -> bool {
        
        // Get the UnorderedSet of users for the given municipality
        let users = self.municipality_to_users.get(&municipality_id);

        // Assert that the UnorderedSet exists
        if !users.is_some() {
            return false;
        }

        // Get the UnorderedSet from the Option
        let users = users.unwrap();

        // Check if the user is in the UnorderedSet
        users.contains(&user_id)
    }
}
'''
'''--- near-microbonds-user-registry/integration-tests/ts/package.json ---
{
    "name": "ava-testing",
    "version": "1.0.0",
    "license": "(MIT AND Apache-2.0)",
    "scripts": {
      "test": "ava",
      "testnet": "ava --config ./ava.testnet.config.cjs"
    },
    "devDependencies": {
      "@types/bn.js": "^5.1.0",
      "@types/node": "^18.6.2",
      "ava": "^4.2.0",
      "near-workspaces": "^3.2.1",
      "ts-node": "^10.8.0",
      "typescript": "^4.7.2"
    },
    "dependencies": {}
  }
  
'''
'''--- near-microbonds-user-registry/integration-tests/ts/src/main.ava.ts ---
import { Worker, NearAccount } from 'near-workspaces';
import anyTest, { TestFn } from 'ava';

const test = anyTest as TestFn<{
  worker: Worker;
  accounts: Record<string, NearAccount>;
}>;

test.beforeEach(async (t) => {
    // Init the worker and start the Sandbox server
    const worker = await Worker.init();
    const root = worker.rootAccount;

    // Deploy contracts
    const owner = await root.createSubAccount('owner', {
        initialBalance: '1000000000000000000000000000000'
    });
    
    // Get wasm file path from package.json test script in folder above
    const contract = await owner.devDeploy(
        process.argv[2],
        {
            method: 'new',
            args: {
                owner_id: owner.accountId,
            }
        }
    );

    // Save state for test runs, it is unique for each test
    t.context.worker = worker;
    t.context.accounts = { root, contract, owner };
});

test.afterEach(async (t) => {
    // Stop the Sandbox server
    await t.context.worker.tearDown().catch((error) => {
        console.log('Failed to stop Sandbox server', error);
    });
});

// Add user to municipality
test('Should fail to add user to a municipality if the caller is not the owner', async (t) => {
    const { contract, municipality } = t.context.accounts;
    await t.throwsAsync(async () => {
        await municipality.call(contract, 'add_user_to_municipality', {
            municipality_id: 'test-municipality',
            user_id: 'test-user',
        });
    });
});

test('Should add a user to a municipality if caller is owner', async (t) => {
    const { contract, owner } = t.context.accounts;
    await owner.call(contract, 'add_user_to_municipality', {
        municipality_id: 'test-municipality',
        user_id: 'test-user',
    });

    const users: string[] = await contract.view('get_users_for_municipality', {
        municipality_id: 'test-municipality'
    });
    t.is(users.length, 1);
    t.is(users[0], 'test-user');
});

// Check if user is in municipality
test('Should return true if a user is in a municipality', async (t) => {
    const { contract, owner } = t.context.accounts;
    await owner.call(contract, 'add_user_to_municipality', {
        municipality_id: 'test-municipality',
        user_id: 'test-user',
    });

    const userInMunicipality: boolean = await contract.view('is_user_in_municipality', {
        municipality_id: 'test-municipality',
        user_id: 'test-user'
    });
    t.is(userInMunicipality, true);
});

test('Should return false if a user is not in a municipality', async (t) => {
    const { contract } = t.context.accounts;
    const userInMunicipality: boolean = await contract.view('is_user_in_municipality', {
        municipality_id: 'test-municipality',
        user_id: 'test-user'
    });
    t.is(userInMunicipality, false);
});
'''
'''--- near-microbonds-user-registry/package.json ---
{
  "name": "microbonds-user-registry",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "deploy": "cd contract && ./deploy.sh",
    "build": "npm run build:contract",
    "build:contract": "cd contract && ./build.sh",

    "test": "npm run test:unit && npm run test:integration:ts",
    "test:unit": "npm run build && cd contract && cargo test",
    "test:integration:ts": "npm run build && cd integration-tests/ts && npm test -- -- \"../../contract/target/wasm32-unknown-unknown/release/user_registry.wasm\"",
    
    "testnet:integration:ts": "cd integration-tests/ts && npm run testnet -- -- \"../../contract/target/wasm32-unknown-unknown/release/user_registry.wasm\"",
    
    "postinstall": "echo no frontend && echo rs tests && echo rs contract"
  },
  "dependencies": {}
}

'''