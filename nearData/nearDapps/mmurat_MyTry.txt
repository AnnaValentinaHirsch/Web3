*GitHub Repository "mmurat/MyTry"*

'''--- README.md ---
# MyTry

Reach the random number with user plus number and with player random number.

# Install dependencies
yarn

# Build and Deploy the contract

build -> yarn build:release
deploy -> yarn deploy
build & deploy -> yarn dev

# Run the MyTry 

## Create a game

near call $CONTRACT createMyTry '{}' --accountId $CONTRACT // Only Contract owner create game

Return a game goalNumber (to reach it) and a string game id

## Play the game

near call $CONTRACT letsTry '{"id": <game_id>, "plus": <number>}' --accountId <player_account> --amount 0.01
 
amount 0.01 is essential. Every try cost 0.01.   

'''
'''--- asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types">

'''
'''--- assembly/index.ts ---
// The entry file of your WebAssembly module.
import { ContractPromiseBatch, context, logging, PersistentUnorderedMap, u128, RNG } from "near-sdk-as";
import { Player, MyTry, myTries, players} from "./model";

const DEPOSIT: u128 = u128.fromString("10000000000000000000000")

// return a game goalNumber to reach it.

export function createMyTry(): string {
  assert(context.sender == context.contractName, "Only contract account create MyTry game!");
  const myTry = new MyTry();

  myTries.set(myTry.id, myTry);
  return `New Game: ${myTry.id} goal number is ${myTry.goalNumber.toString()}`;
}

//  view all games values

export function viewTryGames(): Array<MyTry> {
  return myTries.values();
}

// return given id game 

export function viewTryGame(id: string): MyTry {
  return myTries.getSome(id);
}

//  check game status

function isContinue(id: string): bool {
  let myTry = myTries.getSome(id);
  return !myTry.completted; 
}

// try to reach game goalNumber function

export function letsTry(id: string, plus: i32 = 0): string {
  assert(myTries.contains(id), 'Game does not exist');
  assert(isContinue(id), "Game is over");
  assert(context.attachedDeposit == DEPOSIT, "Try only 0.01 Near deposit");
  assert((plus >= -99 && plus <= 99), "userContribution Must be greater than -100 and less than +100");

  if(!players.contains(context.sender)) {
    Player.insert();
  }

  let player = players.getSome(context.sender); 
  
  let myTry = myTries.getSome(id);

  let rng = new RNG<u32>(1, 100);
  let randomNumber = rng.next();

  
  player.plays += 1;
  player.lastRandomNumber = randomNumber;
  player.plus = plus;

  myTry.accumulatedAmount += context.attachedDeposit;
  
  players.set(player.id, player);
  myTries.set(myTry.id, myTry);
  
  let message = "";
  if((player.plus + randomNumber) == myTry.goalNumber) {
    message = `Congratulations: ${context.sender} winner od the myTry and received ${myTry.accumulatedAmount}`;
    myTryOver(id, player);
  } else {
    message = ` Player: ${context.sender}  play ${player.plays.toString()} times. Random number ${randomNumber.toString()} player plus ${player.plus.toString()}. Goal Number: ${myTry.goalNumber.toString()}`;
  }
  return message;
}

// set to winner set all acumulated amount to winner and finish game

export function myTryOver(id: string, player: Player): void {
  let myTry = myTries.getSome(id);
  myTry.winner = player;
  myTry.completted = true;
  myTries.set(myTry.id, myTry);

  const send_to_winner = ContractPromiseBatch.create(context.sender);
  const accumulatedAmount = myTry.accumulatedAmount;
  send_to_winner.transfer(accumulatedAmount);
 
}
'''
'''--- assembly/model.ts ---
//import { StringLiteralExpression } from "assemblyscript";
import { PersistentUnorderedMap, RNG, context, math, u128 } from "near-sdk-as";

export const myTries = new PersistentUnorderedMap<string, MyTry>('#');
export const players = new PersistentUnorderedMap<string, Player>('p');

// player data storage data

@nearBindgen
export class Player {
    id: string;
    plays: i32;
    plus: i32;
    lastRandomNumber: u32;

    constructor() {
        this.id = context.sender;
        this.plays = 0;
        this.plus = -100;
        this.lastRandomNumber = 100;
    }

    static insert(): Player {
        const player = new Player();
        players.set(context.sender, player);
        return player;
      }
}

// game storage data
 
@nearBindgen
export class MyTry {
    id: string;
    completted: bool;
    goalNumber: u32;
    accumulatedAmount: u128;
    winner: Player;
    
    constructor() {
        this.id = context.blockIndex.toString();
        this.completted = false;
               
        let rng = new RNG<u32>(1, 100);
        let roll = rng.next();

        this.goalNumber = roll;
        this.accumulatedAmount = u128.Zero;
    }
}
'''
'''--- assembly/tsconfig.json ---
{
  "extends": "assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ]
}
'''
'''--- index.html ---
<!DOCTYPE html>
<html lang="en">
<head>
<script type="module">
import { add } from "./build/release.js";
document.body.innerText = add(1, 2);
</script>
</head>
<body></body>
</html>

'''
'''--- package.json ---
{
  "name": "myTry",
  "version": "1.0.0",
  "main": "index.js",
  "license": "MIT",
  "dependencies": {
    "@assemblyscript/loader": "^0.20.4",
    "asbuild": "^0.2.0",
    "assemblyscript": "^0.20.4",
    "near-cli": "^3.2.0",
    "near-sdk-as": "^3.2.3"
  },
  "type": "module",
  "exports": {
    ".": {
      "import": "./build/release.js",
      "types": "./build/release.d.ts"
    }
  },
  "scripts": {
    "asbuild:debug": "asc assembly/index.ts --target debug",
    "asbuild:release": "asc assembly/index.ts --target release",
    "asbuild": "yarn asbuild:debug && yarn asbuild:release",
    "test": "node tests",
    "start": "npx serve .",
    "build:release": "asb",
    "deploy": "near dev-deploy build/release/myTry.wasm",
    "dev": "yarn build:release && yarn deploy",
    "test": "asp"
  },
  "devDependencies": {
    "assemblyscript": "^0.20.4"
  }
}

'''
'''--- tests/index.js ---
import assert from "assert";
import { add } from "../build/debug.js";
assert.strictEqual(add(1, 2), 3);
console.log("ok");

'''