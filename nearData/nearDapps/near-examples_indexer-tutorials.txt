*GitHub Repository "near-examples/indexer-tutorials"*

'''--- README.md ---
# Indexer tutorials

This repository contains the code for indexer tutorials from official documentation.

## Contents

* example-indexer https://docs.near.org/tools/indexer-for-explorer

'''
'''--- example-indexer/Cargo.toml ---
[package]
name = "example-indexer"
version = "0.1.0"
authors = ["Near Inc <hello@nearprotocol.com>"]
edition = "2018"

[dependencies]
actix = "=0.11.0-beta.2"
openssl-probe = { version = "0.1.2" }
tokio = { version = "1.1", features = ["sync"] }

serde = { version = "1", features = [ "derive" ] }
serde_json = "1.0.55"

near-indexer = { git = "https://github.com/near/nearcore", rev = "e2b0c81ff02f9b3605146931791177a1770d5a5b" }

'''
'''--- example-indexer/README.md ---
# example-indexer

This repository contains finished code for Indexer tutorial from official docs https://docs.near.org/tools/indexer-for-explorer

'''
'''--- example-indexer/src/main.rs ---
fn main() {
    let args: Vec<String> = std::env::args().collect();
    let home_dir = std::path::PathBuf::from(near_indexer::get_default_home());

    let command = args
        .get(1)
        .map(|arg| arg.as_str())
        .expect("You need to provide a command: `init` or `run` as arg");

    match command {
        "init" => {
            let config_args = near_indexer::InitConfigArgs {
                chain_id: Some("localnet".to_string()),
                account_id: None,
                test_seed: None,
                num_shards: 1,
                fast: false,
                genesis: None,
                download: false,
                download_genesis_url: None,
                max_gas_burnt_view: None,
            };
            near_indexer::indexer_init_configs(&home_dir, config_args);
        }
        "run" => {
            let indexer_config = near_indexer::IndexerConfig {
                home_dir: std::path::PathBuf::from(near_indexer::get_default_home()),
                sync_mode: near_indexer::SyncModeEnum::FromInterruption,
                await_for_node_synced: near_indexer::AwaitForNodeSyncedEnum::WaitForFullSync,
            };
            let sys = actix::System::new();
            sys.block_on(async move {
                let indexer = near_indexer::Indexer::new(indexer_config);
                let stream = indexer.streamer();
                actix::spawn(listen_blocks(stream));
            });
            sys.run().unwrap();
        }
        _ => panic!("You have to pass `init` or `run` arg"),
    }
}

async fn listen_blocks(mut stream: tokio::sync::mpsc::Receiver<near_indexer::StreamerMessage>) {
    while let Some(streamer_message) = stream.recv().await {
        println!("{}", serde_json::to_value(streamer_message).unwrap());
    }
}

'''