*GitHub Repository "mchtter/ticket3-near-protocol"*

'''--- README.md ---
# `Ticket3`

Ticket3 is an application where you can buy tickets through the Near network. This Smart Contract allows you to buy unique tickets for many genres such as concert, theatre, cinema, conference.

## Build, Deploy and Use Project
  
```bash
  near login
```

Using the below comments this app can be deployed to near testnet
```bash
	yarn build:release
```

```bash
	near dev-deploy ./build/release/ticket3.wasm
```

```bash
	export CONTRACT=<dev account>
```

This AssemblyScript contracts in this project, each in their own folder:

- **ticket3** in the `src/ticket3` folder

### Ticket3

We say that an AssemblyScript contract is written in the "ticket3" when the `index.ts` file (the contract entry point) includes a series of exported functions.

In this case, all exported functions become public contract methods.

```ts
// return the string 'ok' for health check system
export function healthCheck(): string {}

// send ticket type and vip status to buy ticket
export function buyTicket(activityType: string, isVip: bool): void {}
// near call $CONTRACT buyTicket '{ "activityType":  "Theatre", "isVip": false }'  --accountId mchtter.testnet --amount 2

// shows all tickets in the system
export function getTickets(): Array<Ticket> {}
// near view $CONTRACT getTickets

// Shows all tickets in the system by owner
export function getTicketByOwner(ownerId: AccountId): Array<Ticket> {}
// near call $CONTRACT getTicketByOwner '{ "ownerId":  "mchtter.testnet" }'  --accountId mchtter.testnet  

```
'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- asconfig.json ---
{
  "workspaces": [
    "src/ticket3"
  ]
}

'''
'''--- package.json ---
{
  "name": "starter--near-sdk-as",
  "version": "0.0.1",
  "description": "Start with a basic project",
  "scripts": {
    "dev": "watch -d -n 1 'clear && yarn test'",
    "test": "yarn asp -f unit.spec",
    "clean": "rm -rf ./build && rm -rf ./neardev",
    "build": "asb --target debug",
    "build:release": "asb",
    "asp": "asp --verbose --nologo"
  },
  "keywords": [],
  "author": "hello@near.org",
  "license": "ISC",
  "devDependencies": {
    "near-sdk-as": "^3.1.0"
  },
  "dependencies": {
    "near-api-js": "^0.44.2",
    "near-cli": "^3.2.0"
  }
}

'''
'''--- scripts/1.dev-deploy.sh ---
#!/usr/bin/env bash

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable"

echo "deleting $CONTRACT and setting $OWNER as beneficiary"
echo
near delete $CONTRACT $OWNER

echo --------------------------------------------
echo
echo "cleaning up the /neardev folder"
echo
rm -rf ./neardev

# exit on first error after this point to avoid redeploying with successful build
set -e

echo --------------------------------------------
echo
echo "rebuilding the contract (release build)"
echo
yarn build:release

echo --------------------------------------------
echo
echo "redeploying the contract"
echo
near dev-deploy ./build/release/thanks.wasm

echo --------------------------------------------
echo run the following commands
echo
echo 'export CONTRACT=<dev-123-456>'
echo 'export OWNER=<your own account>'
echo "near call \$CONTRACT init '{\"owner\":\"'\$OWNER'\"}' --accountId \$CONTRACT"
echo
echo

exit 0
'''
'''--- scripts/2.health-check.sh ---
#!/usr/bin/env bash
set -e

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$OWNER" ] && echo "Missing \$CONTRACT environment variable" && exit 1

echo
echo 'About to call healthCheck() on the contract'
echo near view $CONTRACT healthCheck
echo
echo \$CONTRACT is $CONTRACT
echo
near view $CONTRACT healthCheck
'''
'''--- scripts/3.buy-ticket.sh ---
#!/usr/bin/env bash
set -e

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$OWNER" ] && echo "Missing \$CONTRACT environment variable" && exit 1

echo
echo 'About to call buyTicket() on the contract'
echo near call $CONTRACT buyTicket '{ "activityType":  "Theatre", "isVip": false }'  --accountId $OWNER --amount 2
echo
echo \$CONTRACT is $CONTRACT
echo
near call $CONTRACT buyTicket '{ "activityType":  "Theatre", "isVip": false }'  --accountId $OWNER --amount 2
'''
'''--- scripts/4.list-tickets.sh ---
#!/usr/bin/env bash
set -e

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$OWNER" ] && echo "Missing \$CONTRACT environment variable" && exit 1

echo
echo 'About to call getTickets() on the contract'
echo near view $CONTRACT getTickets
echo
echo \$CONTRACT is $CONTRACT
echo
near view $CONTRACT getTickets
'''
'''--- scripts/5.ticket-by-owner.sh ---
#!/usr/bin/env bash
set -e

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$OWNER" ] && echo "Missing \$CONTRACT environment variable" && exit 1

echo
echo 'About to call buyTicket() on the contract'
echo near call $CONTRACT getTicketByOwner '{ "ownerId":  "<write_owner_Id>" }'  --accountId $OWNER  
echo
echo \$CONTRACT is $CONTRACT
echo
near call $CONTRACT getTicketByOwner '{ "ownerId":  "<write_owner_Id>" }'  --accountId $OWNER
'''
'''--- src/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- src/ticket3/__tests__/README.md ---
## Integration tests
    
    []: # Language: markdown
    []: # Path: src/ticket3/__tests__/ticket3.test.js
    
```
yarn test:unit
```

'''
'''--- src/ticket3/__tests__/as-pect.d.ts ---

'''
'''--- src/ticket3/__tests__/index.unit.spec.ts ---

'''
'''--- src/ticket3/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- src/ticket3/assembly/index.ts ---
import { AccountId } from "../../utils";
import { Ticket, tickets  } from "./models";

export function healthCheck(): string {
  return "ok";
}

export function buyTicket(activityType: string, isVip: bool): void {
    const ticket = new Ticket(activityType, isVip);
    tickets.push(ticket);
}

export function getTickets(): Array<Ticket> {
  let ticketList = new Array<Ticket>();

  for(let i = 0; i < tickets.length; i++) {
    ticketList[i] = tickets[i]
  }

  assert(ticketList.length != 0, "No tickets found in system")

  return ticketList
}

export function getTicketByOwner(ownerId: AccountId): Array<Ticket> {
  let ticketList = new Array<Ticket>();

  for(let i = 0; i < tickets.length; i++) {
    if(tickets[i].owner == ownerId) {
      ticketList.push(tickets[i])
    }
  }

  assert(ticketList.length != 0, "No tickets found for owner")

  return ticketList
}

'''
'''--- src/ticket3/assembly/models.ts ---
import { PersistentVector, Context } from "near-sdk-as"
import { AccountId } from "../../utils"

@nearBindgen
export class Ticket {

    owner: AccountId;
    activityType: string;
    isVip: bool;

    constructor(_activityType: string, _isVip: bool) {
        this.owner = Context.sender;
        this.activityType = _activityType;
        this.isVip = _isVip;
    }
    
}

export const tickets = new PersistentVector<Ticket>('t') // tickets is a persistent vector of tickets

'''
'''--- src/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- src/utils.ts ---
import { u128, Context, ContractPromise } from "near-sdk-as";

/**
 * == TYPES ====================================================================
 */

/**
 * Account IDs in NEAR are just strings.
 */
export type AccountId = string;

/**
 * Gas is u64
 */
export type Gas = u64;

/**
 * Amounts, Balances, and Money in NEAR is are u128.
 */

export type Amount = u128;

export type Balance = Amount;

export type Money = Amount;

/**
 * Timestamp in NEAR is a number.
 */
export type Timestamp = u64;

/**
 * == CONSTANTS ================================================================
 *
 * ONE_NEAR = unit of NEAR token in yocto Ⓝ (1e24)
 * XCC_GAS = gas for cross-contract calls, ~5 Tgas (teragas = 1e12) per "hop"
 * MIN_ACCOUNT_BALANCE = 3 NEAR min to keep account alive via storage staking
 *
 * TODO: revist MIN_ACCOUNT_BALANCE after some real data is included b/c this
 *  could end up being much higher
 */

export const ONE_NEAR = u128.from("1000000000000000000000000");
export const XCC_GAS: Gas = 20_000_000_000_000;
export const MIN_ACCOUNT_BALANCE: u128 = u128.mul(ONE_NEAR, u128.from(3));

/**
 * == FUNCTIONS ================================================================
 */

/**
 * @function asNEAR
 * @param amount {u128} - Yocto Ⓝ token quantity as an unsigned 128-bit integer
 * @returns {string}    - Amount in NEAR, as a string
 *
 * @example
 *
 *    asNEAR(7000000000000000000000000)
 *    // => '7'
 */
export function asNEAR(amount: u128): string {
  return u128.div(amount, ONE_NEAR).toString();
}

/**
 * @function toYocto
 * @param amount {number} - Integer to convert
 * @returns {u128}        - Amount in yocto Ⓝ as an unsigned 128-bit integer
 *
 * @example
 *
 *    toYocto(7)
 *    // => 7000000000000000000000000
 */
export function toYocto(amount: number): u128 {
  return u128.mul(ONE_NEAR, u128.from(amount))
}

/**
 * Function to assert that the contract has called itself
 */
export function assert_self(): void {
  const caller = Context.predecessor
  const self = Context.contractName
  assert(caller == self, "Only this contract may call itself");
}

export function assert_single_promise_success(): void {
  const x = ContractPromise.getResults()
  assert(x.length == 1, "Expected exactly one promise result")
  assert(x[0].succeeded, "Expected PromiseStatus to be successful")
}

'''