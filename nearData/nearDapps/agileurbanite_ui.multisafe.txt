*GitHub Repository "agileurbanite/ui.multisafe"*

'''--- .eslintrc.js ---
module.exports = {
    extends: ['react-app', 'eslint:recommended', 'plugin:react/jsx-runtime'],
    plugins: ['es'],
    rules: {
        'arrow-parens': 'error',
        'es/no-dynamic-import': 'error',
        'jsx-a11y/no-access-key': 'off',
        'no-useless-escape': 'off',
        'quotes': [2, 'single'],
        'keyword-spacing': ['error', {
            'before': true,
            'after': true,
        }],
        'no-duplicate-imports': ['error', { includeExports: true }],
        'eol-last': ['error', 'always'],
        'semi': ['error', 'always'],
        'no-console': 'off',
        'no-extra-boolean-cast':'off',
        'no-extra-semi':'off',
        'no-irregular-whitespace':'off',
        'import/order': [
            'error',
            {
                alphabetize: {
                    order: 'asc',
                    caseInsensitive: true
                },
                'newlines-between': 'always',
                groups: [
                    'builtin',
                    ['external', 'internal'],
                    ['sibling', 'parent', 'index'],
                    'object'
                ]
            }
        ],
        'indent': ['error', 4, {
            ignoredNodes: ['TemplateLiteral'],
            SwitchCase: 1,
        }],
        'no-restricted-syntax': ['error', {
            'selector': 'VariableDeclarator[id.type=\'ObjectPattern\'] Property[key.name=\'searchParams\']', 
            'message': 'URL.searchParams is not allowed, Use `query-string` package instead' 
        }, {
            'selector': 'CallExpression[callee.name=\'useSelector\'] MemberExpression[object.name=\'state\']',
            'message': 'Please use a selector for any state accesses within useSelector'
        }, {
            'selector': 'CallExpression[callee.name=\'useSelector\'] VariableDeclarator[id.type=\'ObjectPattern\'][init.name=\'state\']',
            'message': 'Please use a selector for any state accesses within useSelector'
        }, {
            'selector': 'CallExpression[callee.name=\'useSelector\'] *[type=/FunctionExpression$/][params.0.type=\'ObjectPattern\']',
            'message': 'Please use a selector for any state accesses within useSelector'
        }]
    },
    settings: {
        'import/ignore': ['src/config/*'],
    },
    overrides: [
        {
            files: [
                'src/config/configFromEnvironment.js',
                'ci/configFromEnvironment.js',
            ],
            rules: {
                'no-process-env': ['off']
            },
        },
    ],
};

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="robots" content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1">
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="MultiSafe" />
    <link rel="shortcut icon" href="/logo.png" type="image/x-icon"/>
    <link rel="apple-touch-icon" href="/logo.png"/>
    <title>MultiSafe</title>
    <style>
      html,
      body {
        width: 100vw;
        height: 100vh;
        margin: 0;
        padding: 0;
        font-family: Roboto, sans-serif;
        overflow-x: hidden;
      }
      a {
        text-decoration: none;
        color: inherit;
      }
    </style>
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700,900&display=swap"
    />
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

'''
'''--- src/config/redirectActions.js ---
export const redirectActions = {
    connectNearWallet: 'connectNearWallet',
    createMultisafe: 'createMultisafe',
    batchRequest: 'batchRequest',
    batchConfirm: 'batchConfirm'
};

'''
'''--- src/near/LedgerSigner.js ---
import TransportWebHID from '@ledgerhq/hw-transport-webhid';
import { Signer } from 'near-api-js';
import { PublicKey } from 'near-api-js/lib/utils';
import { createClient } from 'near-ledger-js';

const defaultHooks = {
    onBeforeSignTx: () => {},
    onAfterSignTx: () => {},
};

export class LedgerSigner extends Signer {
    constructor(getStoreState) {
        super();
        this.client = null;
        this.hooks = defaultHooks;
        this.getStoreState = getStoreState;
    }

    setHooks(hooks) {
        this.hooks = { ...this.hooks, ...hooks };
    }

    resetHooks() {
        this.hooks = defaultHooks;
    }

    async getPublicKey() {
        return PublicKey.from(this.getStoreState().general.user.publicKey);
    }

    async signMessage(message) {
        try {
            const transport = await TransportWebHID.create();
            this.client = await createClient(transport);

            this.hooks.onBeforeSignTx();
            const signature = await this.client.sign(message);
            const publicKey = await this.getPublicKey();
            this.hooks.onAfterSignTx();

            return {
                signature,
                publicKey,
            };
        } catch (error) {
            error.fromLedgerSigner = true;
            throw error;
        } finally {
            await this.client?.transport?.close();
        }
    }
}

'''
'''--- src/near/config.js ---
import BN from 'bn.js';

const general = {
    maxGas: new BN(300000000000000),
    endpoint: {
        jsonrpc: '2.0',
        id: 'viewacct',
        method: 'query',
        setParams({ account_id }) {
            return { ...this, params: { request_type: 'view_account', finality: 'final', account_id } };
        },
    },
    multisafe: {
        deleteRequestCooldown: 15 * 60 * 1000, // 15 minutes in milliseconds
    },
    gas: {
        default: '100000000000000', // 100 TGas
        add_and_confirm: '40000000000000', // 40 TGas
        two_calls: '80000000000000', // 80 TGas
        transfer: '30000000000000', // 30 TGas
        storage_deposit: '1250000000000000000000', // yoctoNear
        storage_deposit_large: '12500000000000000000000', // yoctoNear: nUSDC, nUSDT require minimum 0.0125 NEAR. Came to this conclusion using trial and error.
        storage_gas: '30000000000000', // 30 TGas
    }
};

const testnet = {
    networkId: 'testnet',
    nodeUrl: 'https://rpc.testnet.near.org',
    archivalRpcUrl: 'https://archival-rpc.testnet.near.org',
    walletUrl: 'https://testnet.mynearwallet.com/',
    helperUrl: 'https://testnet-api.kitwallet.app',
    explorerUrl: 'https://explorer.testnet.near.org',
    multisafeFactoryId: 'multisafe.testnet',
    multisafeContractHashes:['EPGksnjsxBjaZkXp63ZqdXK9bFpUzrn4UfW8FrehhRQT'],
    backendURL: process.env.REACT_APP_BACKEND_URL_TESTNET || 'http://localhost:8666'
};

const mainnet = {
    networkId: 'mainnet',
    nodeUrl: 'https://rpc.mainnet.near.org',
    archivalRpcUrl: 'https://archival-rpc.mainnet.near.org',
    walletUrl: 'https://wallet.near.org',
    helperUrl: 'https://api.kitwallet.app',
    explorerUrl: 'https://explorer.near.org',
    multisafeFactoryId: 'multisafe.near',
    multisafeContractHashes:['EPGksnjsxBjaZkXp63ZqdXK9bFpUzrn4UfW8FrehhRQT'],
    backendURL: process.env.REACT_APP_BACKEND_URL_MAINNET || 'http://localhost:8666'
};

const configs = {
    testnet,
    mainnet,
};

const createHelpers = (config) => ({
    getCheckAccountInExplorerUrl: (accountId) => `${config.explorerUrl}/accounts/${accountId}`,
    getCheckTransactionInExplorerUrl: (transactionHash) => `${config.explorerUrl}/transactions/${transactionHash}`,
});

const getNearConfig = (network = 'testnet') => {
    const config = configs[network];
    return {
        ...general,
        ...config,
        ...createHelpers(config),
    };
};

export const config = getNearConfig(process.env.REACT_APP_NETWORK);

'''
'''--- src/services/FungibleTokens.js ---
import * as nearApiJs from 'near-api-js';

import { config } from '../near/config';

const FT_MINIMUM_STORAGE_BALANCE = config.gas.storage_deposit;
const FT_MINIMUM_STORAGE_BALANCE_LARGE = config.gas.storage_deposit_large;
const FT_STORAGE_DEPOSIT_GAS = config.gas.storage_gas;
const FT_TRANSFER_GAS = config.gas.transfer;
const ADD_REQUEST_AND_CONFIRM_GAS = config.gas.add_and_confirm;
const ATTACHED_GAS = config.gas.default;

// contract might require an attached depositof of at least 1 yoctoNear on transfer methods
// "This 1 yoctoNEAR is not enforced by this standard, but is encouraged to do. While ability to receive attached deposit is enforced by this token."
// from: https://github.com/near/NEPs/issues/141
const FT_TRANSFER_DEPOSIT = '1';

// Fungible Token Standard
// https://github.com/near/NEPs/tree/master/specs/Standards/FungibleToken

export default class FungibleTokens {

    constructor(connection) {
        this.connection = connection;
        this.viewFunctionAccount = new nearApiJs.Account(this.connection, 'dontcare');;
    };

    getStorageBalance = async ({ contractName, accountId }) => this.viewFunctionAccount.viewFunction(
        contractName,
        'storage_balance_of',
        { account_id: accountId }
    );

    getMetadata = async({ contractName }) => this.viewFunctionAccount.viewFunction(
        contractName,
        'ft_metadata'
    );
    

    getBalanceOf = async ({ contractName, accountId }) => this.viewFunctionAccount.viewFunction(
        contractName,
        'ft_balance_of',
        { account_id: accountId }
    );

    isStorageBalanceAvailable = async ({ contractName, accountId }) => {
        const storageBalance = await this.getStorageBalance({
            contractName,
            accountId,
        });
        return storageBalance?.total !== undefined;
    };

    transferStorageDeposit = async ({
        withApprove,
        contractName,
        recipientId,
        storageDepositAmount,
        transferAmount,
        signAndSendTransactions,
        multisafeId,
    }) => {
        const method = withApprove ? 'add_request_and_confirm' : 'add_request';
        const storageArgs = Buffer.from(`{"account_id": "${recipientId}", "registration_only": true}`).toString('base64');
        const transferArgs = Buffer.from(`{"amount": "${transferAmount}", "receiver_id": "${recipientId}"}`)
            .toString('base64');

        const transactions = [
            {
                receiverId: multisafeId,
                actions: [{
                    type: 'FunctionCall',
                    params: {
                        methodName: method,
                        args: {
                            request: {
                                receiver_id: contractName,
                                actions: [
                                    {
                                        type: 'FunctionCall',
                                        method_name: 'storage_deposit',
                                        args: storageArgs,
                                        gas: FT_STORAGE_DEPOSIT_GAS,
                                        deposit: storageDepositAmount
                                    }
                                ]
                            },
                        },
                        gas: ATTACHED_GAS
                    },
                }],
            },
            {
                receiverId: multisafeId,
                actions: [{
                    type: 'FunctionCall',
                    params: {
                        methodName: method,
                        args: {
                            request: {
                                receiver_id: contractName,
                                actions: [
                                    {
                                        type: 'FunctionCall',
                                        method_name: 'ft_transfer',
                                        args: transferArgs,
                                        deposit: FT_TRANSFER_DEPOSIT,
                                        gas: FT_TRANSFER_GAS,
                                    }
                                ]
                            },
                        },
                        gas: ATTACHED_GAS
                    },
                }],
            }
        ];

        // https://github.com/near/app-near/blob/master/workdir/app-near/src/constants.h#L4
        // size of both actions exceed 650kib so using signAndSendTransactions with two seperate transactions
        return await signAndSendTransactions({ transactions });
    };

    addTransferRequest = async ({ withApprove, recipientId, amount, contractName, signAndSendTransaction, signAndSendTransactions, multisafeId }) => {
        const storageAvailable = await this.isStorageBalanceAvailable({
            contractName,
            accountId: recipientId,
        });

        if (!storageAvailable) {
            try {
                return this.transferStorageDeposit({
                    withApprove,
                    contractName,
                    recipientId,
                    storageDepositAmount: FT_MINIMUM_STORAGE_BALANCE,
                    transferAmount: amount,
                    signAndSendTransactions,
                    multisafeId,
                });
            } catch (e) {
                // sic.typo in `mimimum` wording of responses, so we check substring
                // Original string was: 'attached deposit is less than the mimimum storage balance'
                if (e.message.includes('attached deposit is less than')) {
                    return this.transferStorageDeposit({
                        withApprove,
                        contractName,
                        recipientId,
                        storageDepositAmount:
                            FT_MINIMUM_STORAGE_BALANCE_LARGE,
                        transferAmount: amount,
                        signAndSendTransactions,
                        multisafeId,
                    });
                }
            }
        }

        const method = withApprove ? 'add_request_and_confirm' : 'add_request';
        const args = Buffer.from(`{"amount": "${amount}", "receiver_id": "${recipientId}", "gas": "${FT_TRANSFER_GAS}"}`)
            .toString('base64');

        return await signAndSendTransaction({
            receiverId: multisafeId,
            actions: [{
                type: 'FunctionCall',
                params: {
                    methodName: method,
                    args: {
                        request: {
                            receiver_id: contractName,
                            actions: [{
                                type: 'FunctionCall',
                                method_name: 'ft_transfer',
                                args,
                                deposit: FT_TRANSFER_DEPOSIT,
                                gas: FT_TRANSFER_GAS,
                            }]
                        },
                    },
                    gas: ADD_REQUEST_AND_CONFIRM_GAS,
                },
                
            }],
        });
    };
}

'''
'''--- src/services/NonFungibleTokens.js ---
import * as nearApiJs from 'near-api-js';

import { config } from '../near/config';

const NFT_TRANSFER_GAS = config.gas.transfer;
const ADD_REQUEST_AND_CONFIRM_GAS = config.gas.add_and_confirm;

// contract might require an attached depositof of at least 1 yoctoNear on transfer methods
// "This 1 yoctoNEAR is not enforced by this standard, but is encouraged to do. While ability to receive attached deposit is enforced by this token."
// from: https://github.com/near/NEPs/issues/141
const NFT_TRANSFER_DEPOSIT = '1';

export const TOKENS_PER_PAGE = 4;

// Fungible Token Standard
// https://github.com/near/NEPs/tree/master/specs/Standards/FungibleToken

export default class FungibleTokens {

    constructor(connection) {
        this.connection = connection;
        this.viewFunctionAccount = new nearApiJs.Account(this.connection, 'dontcare');;
    };

    getStorageBalance = async ({ contractName, accountId }) => this.viewFunctionAccount.viewFunction(
        contractName,
        'storage_balance_of',
        { account_id: accountId }
    );

    getMetadata = async({ contractName }) => this.viewFunctionAccount.viewFunction(
        contractName,
        'nft_metadata'
    );
    
    getBalanceOf = async ({ contractName, accountId }) => this.viewFunctionAccount.viewFunction(
        contractName,
        'nft_supply_for_owner',
        { account_id: accountId }
    );

    //

    getToken = async ({ contractName, tokenId, base_uri }) => {
        const token = await this.viewFunctionAccount.viewFunction(contractName, 'nft_token', { token_id: tokenId });

        // need to restructure response for Mintbase NFTs for consistency with NFT spec
        if (token.id && !token.token_id) {
            token.token_id = token.id.toString();
            delete token.id;
        }

        if (token.owner_id && token.owner_id.Account) {
            token.owner_id = token.owner_id.Account;
        }

        if (!token.metadata || !token.metadata.media) {
            token.metadata = {
                ...token.metadata,
                ...(await this.getTokenMetadata(contractName, tokenId, base_uri)),
            };
        }

        return this.mapTokenMediaUrl(token, base_uri);
    };

    getTokenMetadata = async (contractName, tokenId, base_uri) => {
        let metadata = await this.viewFunctionAccount.viewFunction(contractName, 'nft_token_metadata', { token_id: tokenId });
        const { media, reference } = metadata;
        if (!media && reference) {
            metadata = await (await fetch(`${base_uri}/${reference}`)).json();
        }
        return metadata;
    };

    getTokens = async ({ contractName, accountId, base_uri, fromIndex = 0 }) => {
        let tokens;
        try {
            const tokenIds = await this.viewFunctionAccount.viewFunction(contractName, 'nft_tokens_for_owner_set', { account_id: accountId });
            tokens = await Promise.all(
                tokenIds.slice(fromIndex, TOKENS_PER_PAGE + fromIndex)
                    .map(async (token_id) => ({
                        token_id: token_id.toString(),
                        owner_id: accountId,
                        metadata: await this.getTokenMetadata(contractName, token_id.toString(), base_uri),
                    }))
            );
        } catch (e) {
            if (!e.toString().includes('FunctionCallError(MethodResolveError(MethodNotFound))')) {
                throw e;
            }

            tokens = await this.viewFunctionAccount.viewFunction(contractName, 'nft_tokens_for_owner', {
                account_id: accountId,
                from_index: fromIndex.toString(),
                limit: TOKENS_PER_PAGE
            });
        }
        return tokens.filter(({ metadata }) => !!metadata)
            .map((token) => this.mapTokenMediaUrl(token, base_uri));
    };

    buildMediaUrl = (media, base_uri) => {
        // return the provided media string if it is empty or already in a URI format
        if (!media || media.includes('://') || media.startsWith('data:image')) {
            return media;
        }

        if (base_uri) {
            return `${base_uri}/${media}`;
        }

        return `https://cloudflare-ipfs.com/ipfs/${media}`;
    };

    mapTokenMediaUrl = ({ metadata, ...token }, base_uri) => {
        const { media } = metadata;
        return {
            ...token,
            metadata: {
                ...metadata,
                mediaUrl: this.buildMediaUrl(media, base_uri),
            }
        };
    };

    addTransferRequest = async ({withApprove, receiverId, tokenId, contractName, signAndSendTransaction, multisafeId }) => {
        const method = withApprove ? 'add_request_and_confirm' : 'add_request';
        const args = Buffer.from(`{"token_id": "${tokenId}", "receiver_id": "${receiverId}"}`)
            .toString('base64');

        return await signAndSendTransaction({
            receiverId: multisafeId,
            actions: [{
                type: 'FunctionCall',
                params: {
                    methodName: method,
                    args: {
                        request: {
                            receiver_id: contractName,
                            actions: [{
                                type: 'FunctionCall',
                                method_name: 'nft_transfer',
                                args,
                                deposit: NFT_TRANSFER_DEPOSIT,
                                gas: NFT_TRANSFER_GAS,
                            }]
                        },
                    },
                    gas: ADD_REQUEST_AND_CONFIRM_GAS 
                },
                
            }],
        });
    };
}

'''
'''--- src/store/actions/index.js ---
import { resetState } from './resetState';

export const actions = {
    resetState,
};

'''
'''--- src/store/actions/resetState.js ---
import { action } from 'easy-peasy';

import { initState as general } from '../general/initState';
import { initState as multisafe } from '../multisafe/initState';
import { initState as startWork } from '../startWork/initState';

export const resetState = action((state) => {
    state.general = general;
    state.multisafe = multisafe;
    state.startWork = startWork;
});

'''
'''--- src/store/general/actions/closeModal.js ---
import { action } from 'easy-peasy';

export const closeModal = action((slice, payload) => {
    slice.modals[payload.modal] = null;
});

'''
'''--- src/store/general/actions/deleteTemporaryData.js ---
import { action } from 'easy-peasy';

export const deleteTemporaryData = action((slice) => {
    slice.temporary = {};
});

'''
'''--- src/store/general/actions/disableLoading.js ---
import { action } from 'easy-peasy';

export const disableLoading = action((state) => {
    state.isLoading = false;
});

'''
'''--- src/store/general/actions/enableLoading.js ---
import { action } from 'easy-peasy';

export const enableLoading = action((state) => {
    state.isLoading = true;
});

'''
'''--- src/store/general/actions/index.js ---
import { closeModal } from './closeModal';
import { deleteTemporaryData } from './deleteTemporaryData';
import { disableLoading } from './disableLoading';
import { enableLoading } from './enableLoading';
import { initApp } from './initApp';
import { openModal } from './openModal';
import { removeError } from './removeError';
import { setError } from './setError';
import { setModalData } from './setModalData';
import { setNearEntities } from './setNearEntities';
import { setTemporaryData } from './setTemporaryData';
import { setUserData } from './setUserData';
import { toggleBatchRequestView } from './toggleBatchRequestView';
import { toggleMobileMenu } from './toggleMobileMenu';

export const actions = {
    initApp,
    enableLoading,
    disableLoading,
    setError,
    removeError,
    setTemporaryData,
    deleteTemporaryData,
    setUserData,
    openModal,
    setModalData,
    closeModal,
    setNearEntities,
    toggleMobileMenu,
    toggleBatchRequestView
};

'''
'''--- src/store/general/actions/initApp.js ---
import { action } from 'easy-peasy';

export const initApp = action((state, payload) => {
    const { nearEntities } = payload;

    state.entities.near = nearEntities.near;
    state.entities.archivalRpc = nearEntities.archivalRpc;
    state.entities.wallet = nearEntities.wallet;
});

'''
'''--- src/store/general/actions/openModal.js ---
import { action } from 'easy-peasy';

export const openModal = action((slice, payload) => {
    slice.modals[payload.modal] = payload.payload;
});

'''
'''--- src/store/general/actions/removeError.js ---
import { action } from 'easy-peasy';

export const removeError = action((state) => {
    state.error.isError = false;
    state.error.description = '';
});

'''
'''--- src/store/general/actions/setError.js ---
import { action } from 'easy-peasy';

export const setError = action((state, payload) => {
    state.error.isError = payload.isError;
    state.error.description = payload.description;
});

'''
'''--- src/store/general/actions/setModalData.js ---
import { action } from 'easy-peasy';

export const setModalData = action((slice, payload) => {
    Object.entries(payload.payload).forEach(([key, value]) => {
        slice.modals[payload.modal][key] = value;
    });
});

'''
'''--- src/store/general/actions/setNearEntities.js ---
import { action } from 'easy-peasy';

export const setNearEntities = action((state, nearEntities) => {
    state.entities.near = nearEntities.near;
    state.entities.archivalRpc = nearEntities.archivalRpc;
    state.entities.wallet = nearEntities.wallet;
});

'''
'''--- src/store/general/actions/setTemporaryData.js ---
import { action } from 'easy-peasy';

export const setTemporaryData = action((slice, payload) => {
    slice.temporary = payload;
});

'''
'''--- src/store/general/actions/setUserData.js ---
import { action } from 'easy-peasy';

export const setUserData = action((slice, payload) => {
    slice.user = payload;
});

'''
'''--- src/store/general/actions/toggleBatchRequestView.js ---
import { action } from 'easy-peasy';

export const toggleBatchRequestView = action((state) => {
    state.batchRequestView = !state.batchRequestView;
});

'''
'''--- src/store/general/actions/toggleMobileMenu.js ---
import { action } from 'easy-peasy';

export const toggleMobileMenu = action((state) => {
    state.isMobileMenuOpen = !state.isMobileMenuOpen;
});

'''
'''--- src/store/general/index.js ---
import { persist } from 'easy-peasy';

import { actions } from './actions';
import { initState } from './initState';
import { selectors } from './selectors';
import { thunks } from './thunks';

export const general = persist(
    {
        ...initState,
        ...actions,
        ...thunks,
        selectors,
    },
    {
        allow: ['user', 'temporary', 'batchRequestView'],
        storage: 'localStorage',
    },
);

'''
'''--- src/store/general/initState.js ---
export const initState = {
    isLoading: false,
    error: {
        isError: false,
        description: '',
    },
    modals: {
        confirmActionOnLedger: null,
        selectLedgerAccount: null,
    },
    user: {
        isConnected: false,
        accountId: null,
        walletType: 'my-near-wallet',
        publicKey: null,
    },
    selectors: {
        hasSavedMultisafes: false,
        isNearWallet: null,
    },
    entities: {
        near: null,
        archivalRpc: null,
        wallet: null,
        indexerConnection: null,
    },
    temporary: {
        redirectAction: null,
    },
    isMobileMenuOpen: false,
    batchRequestView: true
};

'''
'''--- src/store/general/selectors/hasSavedMultisafes.js ---
import { computed } from 'easy-peasy';

export const hasSavedMultisafes = computed(
    [(_, store) => store.multisafe.multisafes],
    (multisafes) => multisafes.length > 0,
);

'''
'''--- src/store/general/selectors/index.js ---
import { hasSavedMultisafes } from './hasSavedMultisafes';
import { isNearWallet } from './isNearWallet';

export const selectors = {
    hasSavedMultisafes,
    isNearWallet,
};

'''
'''--- src/store/general/selectors/isNearWallet.js ---
import { computed } from 'easy-peasy';

export const isNearWallet = computed(
    [(_, store) => store.general.user.walletType],
    (walletType) => (walletType === 'my-near-wallet' || walletType === 'near-wallet'),
);

'''
'''--- src/store/general/thunks/helpers/getAccountIdsByPublicKey.js ---
import ky from 'ky';

import { config } from '../../../../near/config';

export const getAccountIdsByPublicKey = (key) =>
    ky.get(`${config.helperUrl}/publicKey/${key}/accounts`, { timeout: 30000 }).json();

'''
'''--- src/store/general/thunks/helpers/getDataBeforeRenderPage.js ---
import { matchPath } from 'react-router';

import { routes } from '../../../../ui/config/routes';

const { 
    createMultisafe,
    dashboard,
    history,
    members,
    remove,
    disconnect,
    nonFungibleTokens,
    safeEdit
} = routes;

export const getDataBeforeRenderPage = async ({
    actions,
    history: browserHistory,
    withLoading,
}) => {
    
    const enableLoading = actions.general.enableLoading;
    const disableLoading = actions.general.disableLoading;
    const onMountMultisafe = actions.multisafe.onMountMultisafe;
    const onMountDashboard = actions.multisafe.onMountDashboard;
    const onMountHistory = actions.multisafe.onMountHistory;
    const onMountTokenList = actions.multisafe.onMountTokenList;
    const onMountNonFungibleTokenList = actions.multisafe.onMountNonFungibleTokenList;

    const match = matchPath(browserHistory.location.pathname, [
        createMultisafe,
        dashboard,
        history,
        members,
        remove,
        disconnect,
        nonFungibleTokens,
        safeEdit
    ]);

    if (!match) return;

    const { multisafeId } = match?.params;
    const ifRouteIs = (route) => route === match.path;

    withLoading && enableLoading();

    if (ifRouteIs(dashboard)) {
        await onMountDashboard(multisafeId);
        await onMountTokenList(multisafeId);
    }

    if (ifRouteIs(history)) {
        await onMountMultisafe({ multisafeId });
        await onMountHistory();
    }

    if (ifRouteIs(members)) {
        await onMountMultisafe({ multisafeId });
    }

    if (ifRouteIs(remove)) {
        await onMountMultisafe({ multisafeId });
    }

    if (ifRouteIs(disconnect)) {
        await onMountMultisafe({ multisafeId });
    }
  
    if (ifRouteIs(nonFungibleTokens)) {
        await onMountDashboard(multisafeId);
        await onMountNonFungibleTokenList(multisafeId);
    }

    if (ifRouteIs(safeEdit)) {
        await onMountMultisafe({ multisafeId });
    }

    withLoading && disableLoading();
};

'''
'''--- src/store/general/thunks/helpers/getNearEntities.js ---
import { connect, keyStores, WalletConnection } from 'near-api-js';

import { config } from '../../../../near/config';
import { LedgerSigner } from '../../../../near/LedgerSigner';

const { networkId, nodeUrl, walletUrl, archivalRpcUrl } = config;

const getNearConnectConfig = ({ connectionType, getStoreState }) => {
    if (connectionType === 'rpc_my-near-wallet' || connectionType === 'rpc_near-wallet') {
        return {
            networkId,
            nodeUrl,
            walletUrl,
            keyStore: new keyStores.BrowserLocalStorageKeyStore(),
        };
    }

    if (connectionType === 'rpc_ledger')
        return {
            networkId,
            nodeUrl,
            signer: new LedgerSigner(getStoreState),
        };

    if (connectionType === 'archival-rpc_read-only')
        return {
            networkId,
            nodeUrl: archivalRpcUrl,
            keyStore: new keyStores.InMemoryKeyStore(),
        };

    throw new Error(
    `Wrong connection type, must be 'rpc_near-wallet', 'rpc_ledger' or 'archival-rpc_read-only',
     got '${connectionType}' instead`,
    );
};

export const getNearEntities = async (getStoreState) => {
    const state = getStoreState();
    const walletType = state.general.user.walletType || 'my-near-wallet';

    const near = await connect(
        getNearConnectConfig({
            connectionType: `rpc_${walletType}`,
            getStoreState,
        }),
    );

    const archivalRpc = await connect(
        getNearConnectConfig({
            connectionType: 'archival-rpc_read-only',
        }),
    );

    const wallet = (walletType === 'my-near-wallet' || walletType === 'near-wallet')
        ? new WalletConnection(near, 'near_app')
        : null;

    return {
        near,
        archivalRpc,
        wallet,
    };
};

'''
'''--- src/store/general/thunks/index.js ---
import { onConnectLedger } from './onConnectLedger';
import { onConnectNearWallet } from './onConnectNearWallet';
import { onDisconnect } from './onDisconnect';
import { onInitApp } from './onInitApp/onInitApp';
import { onMobileMenuClick } from './onMobileMenuClick';
import { onRouteChange } from './onRouteChange';
import { onSelectLedgerAccount } from './onSelectLedgerAccount';

export const thunks = {
    onInitApp,
    onRouteChange,
    onConnectNearWallet,
    onConnectLedger,
    onDisconnect,
    onSelectLedgerAccount,
    onMobileMenuClick
};

'''
'''--- src/store/general/thunks/onConnectLedger.js ---
import TransportWebHID from '@ledgerhq/hw-transport-webhid';
import { thunk } from 'easy-peasy';
import { PublicKey } from 'near-api-js/lib/utils';
import { KeyType } from 'near-api-js/lib/utils/key_pair';
import { createClient } from 'near-ledger-js';

import { handleLedgerError } from '../../helpers/handleLedgerError';
import { getAccountIdsByPublicKey } from './helpers/getAccountIdsByPublicKey';

export const onConnectLedger = thunk(async (_, payload, { getStoreActions }) => {
    const { closeConnectLedgerModal } = payload;

    const actions = getStoreActions();
    const openModal = actions.general.openModal;
    const setModalData = actions.general.setModalData;
    const closeModal = actions.general.closeModal;

    let client;

    closeConnectLedgerModal();
    openModal({ modal: 'confirmActionOnLedger', payload: { actionName: 'Get public key' } });

    try {
        const transport = await TransportWebHID.create();
        client = await createClient(transport);
        const rawPk = await client.getPublicKey();

        const pk = new PublicKey({ keyType: KeyType.ED25519, data: rawPk }).toString();
        setModalData({ modal: 'confirmActionOnLedger', payload: { showLoader: true } });
        const accounts = await getAccountIdsByPublicKey(pk);

        closeModal({ modal: 'confirmActionOnLedger' });
        openModal({ modal: 'selectLedgerAccount', payload: { accounts, pk } });
    } catch (err) {
        handleLedgerError(err, (error) =>
            setModalData({ modal: 'confirmActionOnLedger', payload: { error } }),
        );
    } finally {
        await client?.transport?.close();
    }
});

'''
'''--- src/store/general/thunks/onConnectNearWallet.js ---
import { thunk } from 'easy-peasy';

import { redirectActions } from '../../../config/redirectActions';
import { getRoute } from '../../../ui/config/routes';

export const onConnectNearWallet = thunk(async (_, history, { getStoreState, getStoreActions }) => {
    const state = getStoreState();
    const wallet = state.general.entities.wallet;

    const actions = getStoreActions();
    const setTemporaryData = actions.general.setTemporaryData;

    const redirectAction = redirectActions.connectNearWallet;

    setTemporaryData({
        redirectAction,
        origin: history.location.pathname,
    });

    await wallet.requestSignIn({
        successUrl: getRoute.callbackUrl({ redirectAction }),
        failureUrl: getRoute.callbackUrl({ redirectAction, errorCode: true }),
    });
});

'''
'''--- src/store/general/thunks/onDisconnect.js ---
import { thunk } from 'easy-peasy';

import { routes } from '../../../ui/config/routes';

export const onDisconnect = thunk(async (_, payload, { getStoreActions }) => {
    const { history, selector } = payload;

    const actions = getStoreActions();
    const resetState = actions.resetState;

    localStorage.clear();
    resetState();

    if (selector && selector.isSignedIn()) {
        const wallet = await selector.wallet();
        await wallet?.signOut();
    }
    history?.replace(routes.welcome);
});

'''
'''--- src/store/general/thunks/onInitApp/handleRedirectFromWallet/connectNearWallet.js ---
import { matchPath } from 'react-router';

import { routes } from '../../../../../ui/config/routes';

const { welcome, getStarted } = routes;

const getDestination = (origin) => {
    const match = matchPath(origin, { path: [welcome], exact: true });
    if (match?.path === welcome) return getStarted;
    return origin;
};

const onSuccess = (state, actions, browserHistory, query) => {
    const destination = getDestination(state.general.temporary.origin);

    actions.general.setUserData({
        accountId: query.account_id,
        isConnected: true,
        walletType: 'my-near-wallet',
        publicKey: null,
    });

    browserHistory.replace(destination);
};

const onError = (state, actions, browserHistory) => {
    actions.general.setError({
        isError: true,
        description: 'You have not connected your wallet',
    });

    browserHistory.replace(state.general.temporary.origin);
};

export const connectNearWallet = async ({ state, actions, history: browserHistory, query }) => {
    actions.general.deleteTemporaryData();
    if (query.account_id) onSuccess(state, actions, browserHistory, query);
    if (query.errorCode) onError(state, actions, browserHistory);
};

'''
'''--- src/store/general/thunks/onInitApp/handleRedirectFromWallet/createMultisafe.js ---
import { getRoute, routes } from '../../../../../ui/config/routes';

const onSuccess = async (state, actions, browserHistory) => {
    const { name, multisafeId } = state.general.temporary;

    actions.multisafe.addMultisafe({ name, multisafeId });
    actions.general.deleteTemporaryData();
    browserHistory.replace(getRoute.dashboard(multisafeId));
};

const onError = (state, actions, browserHistory) => {
    actions.general.setError({
        isError: true,
        description: 'Multisafe was not created',
    });
    actions.general.deleteTemporaryData();
    browserHistory.replace(routes.createMultisafe);
};

export const createMultisafe = async ({ state, actions, history: browserHistory, query }) => {
    if (query.transactionHashes) await onSuccess(state, actions, browserHistory);
    if (query.errorCode) onError(state, actions, browserHistory);
};

'''
'''--- src/store/general/thunks/onInitApp/handleRedirectFromWallet/handleRedirectFromWallet.js ---
import qs from 'query-string';

import { redirectActions } from '../../../../../config/redirectActions';
import { config } from '../../../../../near/config';
import { connectNearWallet } from './connectNearWallet';
import { createMultisafe } from './createMultisafe';

export const handleRedirectFromWallet = async (state, actions, history, signAndSendTransaction) => {
    const query = qs.parse(history.location.search);
    const { redirectAction } = query;

    if (redirectAction === redirectActions.connectNearWallet)
        await connectNearWallet({ state, actions, history, query });

    if (redirectAction === redirectActions.createMultisafe)
        await createMultisafe({ state, actions, history, query });

    if (redirectAction === redirectActions.batchRequest) {
        const { multisafeId, batchRequest: { args, method } } = state.general.temporary;
        await signAndSendTransaction({
            receiverId: multisafeId,
            actions: [{
                type: 'FunctionCall',
                params: {
                    methodName: method,
                    args: args.args,
                    gas: config.gas.default,
                },
            }],
            callbackUrl: args.callbackUrl,
        });
    }

    if (redirectAction === redirectActions.batchConfirm) {
        const { multisafeId, batchConfirm: { args } } = state.general.temporary;
        await signAndSendTransaction({
            receiverId: multisafeId,
            actions: [{
                type: 'FunctionCall',
                params: {
                    methodName: 'confirm',
                    args: args.args,
                    gas: config.gas.default,
                },
            }],
            callbackUrl: args.callbackUrl,
        });
    }
};

'''
'''--- src/store/general/thunks/onInitApp/isRedirect.js ---
import qs from 'query-string';
import { matchPath } from 'react-router';

import { routes } from '../../../../ui/config/routes';

export const isRedirect = (state, history) => {
    const { redirectAction } = qs.parse(history.location.search);

    const match = matchPath(history.location.pathname, {
        path: routes.redirectFromWallet,
        exact: true,
    });

    return typeof redirectAction === 'string' 
        && match 
        && state.general.temporary.redirectAction === redirectAction;
};

'''
'''--- src/store/general/thunks/onInitApp/manageNavigation.js ---
import { matchPath } from 'react-router';

import { routes, getRoute } from '../../../../ui/config/routes';

const { root, welcome, getStarted, createMultisafe, loadMultisafe, dashboard, history, members, safeEdit } =
  routes;

/** Anon user without data:
 * * root / createMultisafe / dashboard / history / members -> welcome;
 * * getStarted / welcome / loadMultisafe -> no changes;
 *
 * Anon user with data:
 * * root / welcome / getStarted / createMultisafe -> dashboard;
 * * dashboard / history / members / loadMultisafe -> no changes;
 *
 * Connected user without data:
 * * root / welcome / dashboard / history / members -> dashboard;
 * * getStarted / createMultisafe / loadMultisafe -> no changes;
 *
 * Connected user with data:
 * * root / welcome / getStarted -> dashboard;
 * * dashboard / history / members / createMultisafe / loadMultisafe -> no changes;
 */
export const manageNavigation = (state, browserHistory, selector) => {
    const isConnected = selector.isSignedIn();
    const hasSavedMultisafes = state.general.selectors.hasSavedMultisafes;
    const lastActiveMultisafeId = state.multisafe.general.multisafeId;

    const match = matchPath(browserHistory.location.pathname, {
        path: [root, welcome, getStarted, createMultisafe, loadMultisafe, dashboard, history, members, safeEdit],
        exact: true,
    });
    if (!match) return;

    const ifInclude = (_routes) => _routes.includes(match.path);
    // Anon user without data
    if (
        !isConnected &&
    !hasSavedMultisafes &&
    ifInclude([root, createMultisafe, dashboard, history, members, safeEdit])
    ) {
        browserHistory.replace(welcome);
    }

    // Anon user with data
    if (
        !isConnected &&
    hasSavedMultisafes &&
    ifInclude([root, welcome, getStarted, createMultisafe])
    ) {
        browserHistory.replace(getRoute.dashboard(lastActiveMultisafeId));
    }

    // Connected user without data
    if (
        isConnected &&
    !hasSavedMultisafes &&
    ifInclude([root, welcome, dashboard, history, members])
    ) {
        browserHistory.replace(getStarted);
    }

    // Connected user with data
    if (isConnected && hasSavedMultisafes && ifInclude([root, welcome, getStarted])) {
        browserHistory.replace(getRoute.dashboard(lastActiveMultisafeId));
    }
};

'''
'''--- src/store/general/thunks/onInitApp/onInitApp.js ---
import { thunk } from 'easy-peasy';

import { getDataBeforeRenderPage } from '../helpers/getDataBeforeRenderPage';
import { getNearEntities } from '../helpers/getNearEntities';
import { handleRedirectFromWallet } from './handleRedirectFromWallet/handleRedirectFromWallet';
import { isRedirect } from './isRedirect';
import { manageNavigation } from './manageNavigation';

export const onInitApp = thunk(async (_, payload, { getStoreState, getStoreActions }) => {
    const { history, setInit, selector, accountId, selectedWalletId } = payload;

    const actions = getStoreActions();
    let state = getStoreState();
    const initApp = actions.general.initApp;
    const isConnected = state.general.user.isConnected;
    const isSignedIn = selector.isSignedIn();

    const nearEntities = await getNearEntities(getStoreState);
    
    initApp({ nearEntities });

    if (isSignedIn && isConnected !== isSignedIn) {
        if (selectedWalletId === 'ledger') {
            const onLedgerConnectSuccess = actions.general.onSelectLedgerAccount;
            const ledgerData = localStorage.getItem('near-wallet-selector:ledger:accounts');
            const pk = ledgerData && JSON.parse(ledgerData)?.[0].publicKey;
            onLedgerConnectSuccess({ accountId, pk, history });
        } else {
            const onConnectSuccess = actions.general.setUserData;        
            onConnectSuccess({
                accountId,
                isConnected: isSignedIn,
                walletType: selectedWalletId,
                publicKey: null,
            });
        }
    }
    state = getStoreState();

    // All redirect from NEAR Wallet leads to /redirect-from-wallet route. If it is the case,
    // handle it and redirect the user to the appropriate page. If not - check if a user has access
    // to the page and redirect to the proper page
    if (isRedirect(state, history)) {
        const wallet = await selector.wallet();
        const signAndSendTransaction = wallet.signAndSendTransaction;
        await handleRedirectFromWallet(state, actions, history, signAndSendTransaction);
    } else {
        manageNavigation(state, history, selector);
    }

    // Call onMount thunk for the page - we want to load data before the page will be mounted -
    // it allows us to avoid "screen blinking" or display the empty page to the user.
    await getDataBeforeRenderPage({ actions, history, withLoading: false });

    // Finish initialization and hide loader
    setInit(true);
});

'''
'''--- src/store/general/thunks/onMobileMenuClick.js ---
import { thunk } from 'easy-peasy';

export const onMobileMenuClick = thunk(async (_, payload, { getStoreActions }) => {
    const actions = getStoreActions();
    const toggleMobileMenu = actions.general.toggleMobileMenu;
    toggleMobileMenu();
});

'''
'''--- src/store/general/thunks/onRouteChange.js ---
import { thunk } from 'easy-peasy';

import { getDataBeforeRenderPage } from './helpers/getDataBeforeRenderPage';

export const onRouteChange = thunk(async (_, history, { getStoreActions, getStoreState }) => {
    const state = getStoreState();
    const actions = getStoreActions();
    await getDataBeforeRenderPage({ actions, history, withLoading: true });
    const toggleMobileMenu = actions.general.toggleMobileMenu;
    if (state.general.isMobileMenuOpen) {
        toggleMobileMenu();
    }
});

'''
'''--- src/store/general/thunks/onSelectLedgerAccount.js ---
import { thunk } from 'easy-peasy';

import { getNearEntities } from './helpers/getNearEntities';

export const onSelectLedgerAccount = thunk(
    async (_, payload, { getStoreState, getStoreActions }) => {
        const { accountId, pk } = payload;

        const actions = getStoreActions();
        const setUserData = actions.general.setUserData;
        const setNearEntities = actions.general.setNearEntities;

        setUserData({
            accountId,
            isConnected: true,
            walletType: 'ledger',
            publicKey: pk,
        });

        const nearEntities = await getNearEntities(getStoreState);
        setNearEntities(nearEntities);
    },
);

'''
'''--- src/store/helpers/convertNanoToMilli.js ---
export const convertNanoToMilli = (nano) => Math.trunc(nano / 1000000);

'''
'''--- src/store/helpers/handleLedgerError.js ---
export const handleLedgerError = (error, setModalError) => {
    if (error.name === 'TransportOpenUserCancelled') {
        setModalError(error.message);
        return;
    }

    if (error.name === 'TransportStatusError' && error.statusCode === 28160) {
        setModalError('NEAR app is not running on the Ledger');
        return;
    }

    if (error.name === 'TransportStatusError' && error.statusCode === 27013) {
        setModalError('Action rejected by user');
        return;
    }

    setModalError('Unknown error during the transaction signing');
};

'''
'''--- src/store/helpers/toCamelCase.js ---
import camelCase from 'camelcase';

export const toCamelCase = (value) => {
    if (Array.isArray(value)) return value.map((x) => toCamelCase(x));

    if (typeof value === 'object' && value !== null) {
        return Object.entries(value).reduce((acc, [key, val]) => {
            acc[camelCase(key)] = toCamelCase(val);
            return acc;
        }, {});
    }

    return value;
};

'''
'''--- src/store/index.js ---
import { createStore } from 'easy-peasy';

import { actions } from './actions';
import { general } from './general';
import { multisafe } from './multisafe';
import { startWork } from './startWork';

export const store = createStore(
    {
        ...actions,
        general,
        startWork,
        multisafe,
    },
    {
        name: 'MultiSafe',
    },
);

'''
'''--- src/store/multisafe/actions/addMultisafe.js ---
import { action } from 'easy-peasy';

export const addMultisafe = action((slice, payload) => {
    const { multisafeId, name } = payload;
    slice.multisafes.push({ multisafeId, name, members: [], balance: 0 });
});

'''
'''--- src/store/multisafe/actions/changeMultisafeName.js ---
import { action } from 'easy-peasy';

export const changeMultisafeName = action((slice, payload) => {
    const multisafe = slice.multisafes.find(({ multisafeId }) => multisafeId === payload.multisafeId);
    multisafe.name = payload.data.name;
});

'''
'''--- src/store/multisafe/actions/index.js ---
import { addMultisafe } from './addMultisafe';
import { changeMultisafeName } from './changeMultisafeName';
import { mountDashboard } from './mountDashboard';
import { mountHistory } from './mountHistory';
import { mountList } from './mountList';
import { mountMultisafe } from './mountMultisafe';
import { mountNonFungibleTokenList } from './mountNonFungibleTokenList';
import { mountTokenList } from './mountTokenList';
import { mountTokensMetadata } from './mountTokensMetadata';
import { removeMultisafe } from './removeMultisafe';

export const actions = {
    mountMultisafe,
    mountList,
    addMultisafe,
    mountDashboard,
    mountHistory,
    removeMultisafe,
    changeMultisafeName,
    mountTokensMetadata,
    mountTokenList,
    mountNonFungibleTokenList,
};

'''
'''--- src/store/multisafe/actions/mountDashboard.js ---
import { action } from 'easy-peasy';

import { convertNanoToMilli } from '../../helpers/convertNanoToMilli';

const getRequestsTxs = (addRequestTxs, txsStatuses) => {
    const txs = addRequestTxs.reduce((acc, tx) => {
        acc[tx.transaction_hash] = tx.block_timestamp;
        return acc;
    }, {});

    return txsStatuses
        .filter(({ status }) => status.SuccessValue)
        .reduce((acc, { status, transaction }) => {
            const requestId = atob(status.SuccessValue);
            acc[requestId] = {
                createdAt: txs[transaction.hash],
            };
            return acc;
        }, {});
};

export const mountDashboard = action((slice, payload) => {
    const {
        requests,
        requestIds,
        addRequestTxs,
        txsStatuses,
        accountId,
        numConfirmations,
        localMultisafe,
        contract,
        balance,
        members,
    } = payload;

    const requestsTxs = getRequestsTxs(addRequestTxs, txsStatuses);

    const isMember = members.some((member) => member.account_id === accountId);

    slice.general.name = localMultisafe.name;
    slice.general.multisafeId = localMultisafe.multisafeId;
    slice.general.balance = balance.available;

    slice.dashboard.pendingRequests = requestIds
        .map((requestId, index) => {
            const request = requests[index][0];
            const confirms = requests[index][1].map((confirm) => JSON.parse(confirm));
            return {
                requestId,
                createdAt: convertNanoToMilli(requestsTxs[requestId]?.createdAt),
                type: request.actions[0].type,
                amount: request.actions[0].amount,
                recipient: request.receiver_id,
                confirms: {
                    totalNum: numConfirmations,
                    currentNum: confirms.length,
                    hasUserConfirm: confirms.some((confirm) => confirm.account_id === accountId),
                },
                // We need this to avoid rerender Status component when we load read-only multisafe
                isMember,
            };
        })
        .sort((a, b) => b.requestId - a.requestId);

    slice.members = members.map(({ account_id }) => ({ accountId: account_id }));
    slice.entities.contract = contract;
});

'''
'''--- src/store/multisafe/actions/mountHistory.js ---
import { action } from 'easy-peasy';

import { convertNanoToMilli } from '../../helpers/convertNanoToMilli';

// Get list of all successful transactions with tx result
const getSuccessTxs = (requestTxStatuses) =>
    requestTxStatuses
        .filter(({ status }) => typeof status.successValue === 'string')
        .reduce((acc, { status, transaction }) => {
            acc[transaction.hash] = atob(status.successValue);
            return acc;
        }, {});

const getActiveRequestIds = (requestIds) =>
    requestIds.reduce((acc, id) => {
        acc[id] = id;
        return acc;
    }, {});

const getDeletedRequestIds = (requestTxs, successTxs) =>
    requestTxs
        .filter(
            ({ args, transactionHash }) =>
                args.methodName === 'delete_request' && typeof successTxs[transactionHash] === 'string',
        )
        .reduce((acc, { args }) => {
            acc[args.argsJson.requestId] = args.argsJson.requestId;
            return acc;
        }, {});

const getRequests = (requestTxs, successTxs, activeRequestIds, deletedRequestIds) =>
    requestTxs
        .filter(
            ({ args, transactionHash }) =>
                (args.methodName === 'add_request' || args.methodName === 'add_request_and_confirm') &&
        typeof successTxs[transactionHash] === 'string',
        )
        .map(({ args, blockTimestamp, transactionHash }) => {
            const requestId = Number(successTxs[transactionHash]);
            return {
                requestId,
                createdAt: convertNanoToMilli(blockTimestamp),
                type: args.argsJson.request.actions[0].type,
                recipient: args.argsJson.request.receiverId,
                amount: args.argsJson.request.actions[0].amount,
                status: deletedRequestIds[requestId] ? 'deleted' : 'completed',
                transactionHash,
            };
        })
        .filter(({ requestId }) => !activeRequestIds[requestId])
        .sort((a, b) => b.requestId - a.requestId);

export const mountHistory = action((state, payload) => {
    const { requestIds, requestTxs, requestTxStatuses } = payload;

    const successTxs = getSuccessTxs(requestTxStatuses);
    const activeRequestIds = getActiveRequestIds(requestIds);
    const deletedRequestIds = getDeletedRequestIds(requestTxs, successTxs);

    state.history.requests = getRequests(requestTxs, successTxs, activeRequestIds, deletedRequestIds);
});

'''
'''--- src/store/multisafe/actions/mountList.js ---
import { action } from 'easy-peasy';

export const mountList = action((state, payload) => {
    state.multisafes = payload.data.map(([balance, members], index) => ({
        ...state.multisafes[index],
        balance: balance.available,
        members: members.map(({ account_id }) => ({ accountId: account_id })),
    }));
});

'''
'''--- src/store/multisafe/actions/mountMultisafe.js ---
import { action } from 'easy-peasy';

export const mountMultisafe = action((state, payload) => {
    const { localMultisafe, contract, balance, members, numConfirmations } = payload;
    state.general.name = localMultisafe.name;
    state.general.multisafeId = localMultisafe.multisafeId;
    state.general.balance = balance.available;
    state.general.numConfirmations = numConfirmations;

    state.members = members.map(({ account_id }) => ({ accountId: account_id }));
    state.entities.contract = contract;
});

'''
'''--- src/store/multisafe/actions/mountNonFungibleTokenList.js ---
import { action } from 'easy-peasy';

export const mountNonFungibleTokenList = action((slice, payload) => {
    const { nonFungibleTokens, nonFungibleTokensMetadata } = payload;
    slice.general.nonFungibleTokens = nonFungibleTokens;
    slice.general.nonFungibleTokensMetadata = nonFungibleTokensMetadata;
});
  

'''
'''--- src/store/multisafe/actions/mountTokenList.js ---
import { action } from 'easy-peasy';

export const mountTokenList = action((slice, payload) => {
    const { fungibleTokens } = payload;
    slice.general.fungibleTokens = fungibleTokens;
});

'''
'''--- src/store/multisafe/actions/mountTokensMetadata.js ---
import { action } from 'easy-peasy';

export const mountTokensMetadata = action((slice, payload) => {
    const { fungibleTokensMetadata } = payload;
    slice.general.fungibleTokensMetadata = fungibleTokensMetadata;
});

'''
'''--- src/store/multisafe/actions/removeMultisafe.js ---
import { action } from 'easy-peasy';

export const removeMultisafe = action((slice, multisafeId) => {
    slice.multisafes = slice.multisafes.filter(
        (multisafe) => multisafe.multisafeId !== multisafeId,
    );
});

'''
'''--- src/store/multisafe/helpers/getMultisafeContract.js ---
import { Account, Contract } from 'near-api-js';

export const getMultisafeContract = (state, multisafeId) => {
    const walletType = state.general.user.walletType;
    const accountId = state.general.user.accountId;
    const near = state.general.entities.near;
    const wallet = state.general.entities.wallet;

    const account = ((walletType === 'my-near-wallet' || walletType === 'near-wallet'))
        ? wallet.account()
        : new Account(near?.connection, accountId);

    return new Contract(account, multisafeId, {
        viewMethods: [
            'get_members',
            'get_request',
            'get_num_confirmations',
            'list_request_ids',
            'get_confirmations',
        ],
        changeMethods: ['add_request', 'add_request_and_confirm', 'confirm', 'delete_request'],
    });
};

'''
'''--- src/store/multisafe/helpers/signTransactionByLedger.js ---
import { handleLedgerError } from '../../helpers/handleLedgerError';

export const signTransactionByLedger = async ({
    actionName,
    state,
    actions,
    contractMethod,
    callback,
}) => {
    const signer = state.general.entities.near.config.signer;
    const openModal = actions.general.openModal;
    const setModalData = actions.general.setModalData;
    const closeModal = actions.general.closeModal;

    const modal = 'confirmActionOnLedger';
    const setModalError = (error) => setModalData({ modal, payload: { error } });

    // TODO Check if we can set hooks only once during the LedgerSigner creation
    signer.setHooks({
        onAfterSignTx: () => setModalData({ modal, payload: { showLoader: true } }),
    });

    try {
        openModal({ modal, payload: { actionName } });

        const result = await contractMethod();
        await callback(result);

        closeModal({ modal });
    } catch (error) {
        if (error.fromLedgerSigner) {
            handleLedgerError(error, setModalError);
            return;
        }

        if (error.kind?.ExecutionError) {
            setModalError(error.kind.ExecutionError);
            return;
        }

        setModalError(`Unexpected error: ${error.message}`);
    } finally {
        signer.resetHooks();
    }
};

'''
'''--- src/store/multisafe/index.js ---
import { persist } from 'easy-peasy';

import { actions } from './actions';
import { initState } from './initState';
import { selectors } from './selectors';
import { thunks } from './thunks';

export const multisafe = persist(
    {
        ...initState,
        ...actions,
        ...thunks,
        selectors,
    },
    {
        allow: ['multisafes', 'general'],
        storage: 'localStorage',
    },
);

'''
'''--- src/store/multisafe/initState.js ---
export const initState = {
    general: {
        name: '',
        multisafeId: '',
        balance: 0,
        fungibleTokens: [],
        fungibleTokensMetadata: {},
        nonFungibleTokens: [],
        nonFungibleTokensMetadata: {},
    },
    dashboard: {
        pendingRequests: [],
    },
    history: {
        requests: [],
    },
    members: [],
    multisafes: [],
    selectors: {
        multisafes: {
            membership: [],
            readOnly: [],
        },
    },
    entities: {
        contract: null,
    },
};

'''
'''--- src/store/multisafe/selectors/index.js ---
import { isMember } from './isMember';
import { membership } from './membership';
import { readOnly } from './readOnly';

export const selectors = {
    isMember,
    multisafes: {
        membership,
        readOnly,
    },
};

'''
'''--- src/store/multisafe/selectors/isMember.js ---
import { computed } from 'easy-peasy';

// TODO convert account_id to camelCase
export const isMember = computed(
    [(_, store) => store.general.user.accountId, (_, store) => store.multisafe.members],
    (accountId, members) => members.some((member) => member.accountId === accountId),
);

'''
'''--- src/store/multisafe/selectors/membership.js ---
import { computed } from 'easy-peasy';

export const membership = computed(
    [(_, store) => store.general.user.accountId, (_, store) => store.multisafe.multisafes],
    (accountId, multisafes) =>
        multisafes.filter(({ members }) => members.some((member) => member.accountId === accountId)),
);

'''
'''--- src/store/multisafe/selectors/readOnly.js ---
import { computed } from 'easy-peasy';

export const readOnly = computed(
    [(_, store) => store.general.user.accountId, (_, store) => store.multisafe.multisafes],
    (accountId, multisafes) =>
        multisafes.filter(({ members }) => members.every((member) => member.accountId !== accountId)),
);

'''
'''--- src/store/multisafe/thunks/index.js ---
import { onConfirmRequest, onConfirmBatchRequest } from './onConfirmRequest';
import { onDeleteRequest } from './onDeleteRequest';
import { onEditMultisafe, isBatchRequest } from './onEditMultisafe';
import { onMakeFunctionCall } from './onMakeFunctionCall';
import { onMountDashboard } from './onMountDashboard';
import { onMountHistory } from './onMountHistory';
import { onMountList } from './onMountList';
import { onMountMultisafe } from './onMountMultisafe';
import { onMountNonFungibleTokenList } from './onMountNonFungibleTokenList';
import { onMountTokenList } from './onMountTokenList';
import { onRemoveLocalMultisafe } from './onRemoveLocalMultisafe';
import { onTransferNFT } from './onTransferNFT';
import { onTransferTokens } from './onTransferTokens';

export const thunks = {
    onMountMultisafe,
    onMountDashboard,
    onMountHistory,
    onMountList,
    onTransferTokens,
    onConfirmRequest,
    onConfirmBatchRequest,
    onMakeFunctionCall,
    onDeleteRequest,
    onRemoveLocalMultisafe,
    onEditMultisafe,
    isBatchRequest,
    onMountTokenList,
    onMountNonFungibleTokenList,
    onTransferNFT
};

'''
'''--- src/store/multisafe/thunks/onConfirmRequest.js ---
import { thunk } from 'easy-peasy';

import { redirectActions } from '../../../config/redirectActions';
import { config } from '../../../near/config';
import { getRoute } from '../../../ui/config/routes';
import { signTransactionByLedger } from '../helpers/signTransactionByLedger';

const ATTACHED_GAS = config.gas.default;

const callContractChangeMethod = (contract, requestId, callbackUrl) =>
    contract.confirm({ 
        args: {
            request_id: requestId
        },
        gas: ATTACHED_GAS,
        callbackUrl
    });

const signTxByNearWallet = (contract, requestId) => {
    callContractChangeMethod(contract, requestId);
};

const signTxByLedger = async (contract, requestId, multisafeId, state, actions) => {
    await signTransactionByLedger({
        actionName: 'Confirm Request',
        state,
        actions,
        contractMethod: () => callContractChangeMethod(contract, requestId),
        callback: async () => {
            // Here we load data to update UI according to the last changes
            // TODO move onMountDashboard functions into helper - it can mislead devs in the future
            await actions.multisafe.onMountDashboard(multisafeId);
        },
    });
};

const signBatchConfirmByLedger = async ({ contract, requests, multisafeId, state, actions }) => {
    await signTransactionByLedger({
        actionName: 'Confirm Request',
        state,
        actions,
        contractMethod: () => callContractChangeMethod(contract, requests[0].requestId),
        callback: async () => {
        },
    });

    await signTransactionByLedger({
        actionName: 'Confirm Request',
        state,
        actions,
        contractMethod: () => callContractChangeMethod(contract, requests[1].requestId),
        callback: async () => {
            await actions.multisafe.onMountDashboard(multisafeId);
        },
    });
};

const prepareBatchConfirmation = ({ contract, requests, actions }) => {
    actions.general.setTemporaryData({
        redirectAction: redirectActions.batchConfirm,
        multisafeId: contract.contractId,
        batchConfirm: {
            args: {
                args: {
                    request_id: requests[1].requestId
                }, 
                gas: ATTACHED_GAS,
                callbackUrl: `${window.location.origin}${getRoute.dashboard(contract.contractId)}`
            }
        },
    });

    const callbackUrl = getRoute.callbackUrl({ redirectAction: redirectActions.batchConfirm });
    callContractChangeMethod(contract, requests[0].requestId, callbackUrl);
};

export const onConfirmRequest = thunk(async (_, payload, { getStoreState, getStoreActions }) => {
    const { requestId, selectedWalletId } = payload;

    const state = getStoreState();
    const contract = state.multisafe.entities.contract;
    const multisafeId = state.multisafe.general.multisafeId;
    const actions = getStoreActions();

    switch (selectedWalletId) {
        case 'near-wallet':
        case 'my-near-wallet':
            signTxByNearWallet(contract, requestId);
            break;
        case 'ledger':
            await signTxByLedger(contract, requestId, multisafeId, state, actions);
            break;
        default:
            throw Error(`Unsupported wallet selected: '${selectedWalletId}'`);
    }
});

export const onConfirmBatchRequest = thunk(async (_, payload, { getStoreState, getStoreActions }) => {
    const { requests } = payload;

    const state = getStoreState();
    const isNearWallet = state.general.selectors.isNearWallet;
    const contract = state.multisafe.entities.contract;
    const multisafeId = state.multisafe.general.multisafeId;

    const actions = getStoreActions();

    isNearWallet
        ? prepareBatchConfirmation({ contract, requests, actions })
        : await signBatchConfirmByLedger({ contract, requests, multisafeId, state, actions });
});

'''
'''--- src/store/multisafe/thunks/onDeleteRequest.js ---
import { thunk } from 'easy-peasy';

import { config } from '../../../near/config';
import { signTransactionByLedger } from '../helpers/signTransactionByLedger';

const ATTACHED_GAS = config.gas.default;

const deleteRequest = (contract, requestId) =>
    contract.delete_request({ args: { request_id: requestId }, gas: ATTACHED_GAS });

const signTxByNearWallet = (contract, requestId) => {
    deleteRequest(contract, requestId);
};

const signTxByLedger = async (contract, requestId, multisafeId, state, actions) => {
    await signTransactionByLedger({
        actionName: 'Delete Request',
        state,
        actions,
        contractMethod: () => deleteRequest(contract, requestId),
        callback: async () => {
            // Here we load data to update UI according to the last changes
            // TODO move onMountDashboard functions into helper - it can mislead devs in the future
            await actions.multisafe.onMountDashboard(multisafeId);
        },
    });
};

export const onDeleteRequest = thunk(async (_, payload, { getStoreState, getStoreActions }) => {
    const { requestId, selectedWalletId } = payload;

    const state = getStoreState();
    const contract = state.multisafe.entities.contract;
    const multisafeId = state.multisafe.general.multisafeId;

    const actions = getStoreActions();

    switch (selectedWalletId) {
        case 'near-wallet':
        case 'my-near-wallet':
            signTxByNearWallet(contract, requestId);
            break;
        case 'ledger':
            await signTxByLedger(contract, requestId, multisafeId, state, actions);
            break;
        default:
            throw Error(`Unsupported wallet selected: '${selectedWalletId}'`);
    }
});

'''
'''--- src/store/multisafe/thunks/onEditMultisafe.js ---
import { thunk } from 'easy-peasy';

import { redirectActions } from '../../../config/redirectActions';
import { config } from '../../../near/config';
import { getRoute } from '../../../ui/config/routes';
import { signTransactionByLedger } from '../helpers/signTransactionByLedger';

const ATTACHED_GAS = config.gas.default;

const prepareRequestArgs = ({
    receiver_id,
    actions,
    gas,
    callbackUrl
}) => ({
    args: {
        request: {
            receiver_id,
            actions,
        },
    },
    gas,
    callbackUrl
});

const serializeData = ({ name, members, num_confirmations }) => ({
    name,
    numConfirmations: Number(num_confirmations),
    members: members.map(({ account_id }) => ({ account_id })),
});

const addEditRequest = async (contract, contractActions, callbackUrl, signAndSendTransaction, multisafeId) => {
    const method = 'add_request_and_confirm';
  
    return await signAndSendTransaction({
        receiverId: multisafeId,
        actions: [{
            type: 'FunctionCall',
            params: {
                methodName: method,
                args: {
                    request: {
                        receiver_id: contract.contractId,
                        actions: contractActions,
                    },
                },
                gas: ATTACHED_GAS
            },
        }],
        callbackUrl,
    });
};

const generateConfirmationsActions = (values, numConfirmations) => values.numConfirmations !== numConfirmations
    ? [{ type: 'SetNumConfirmations', num_confirmations: values.numConfirmations }]
    : [];

const generateAddMembersActions = ({ membersIds, currentMembersIds, values }) => 
    membersIds.length
        ? values.members.reduce((x, member) => [
            ...x,
            ...(!currentMembersIds.includes(member.account_id) ? [{
                type: 'AddMember',
                member: {
                    account_id: member.account_id
                }
            }] : [])
        ], [])
        : [];

const generateDeleteMembersActions = ({ membersIds, currentMembers }) => 
    membersIds.length
        ? currentMembers.reduce((x, currentMember) => [
            ...x,
            ...(!membersIds.includes(currentMember.accountId) ? [{
                type: 'DeleteMember',
                member: {
                    account_id: currentMember.accountId
                }
            }] : [])
        ], [])
        : [];

const generateMembersActions = (values, currentMembers) => {
    const currentMembersIds = currentMembers.map(({ accountId }) => accountId);
    const membersIds = values.members?.map(({ account_id }) => account_id) || [];

    const addMembersActions = generateAddMembersActions({ membersIds, currentMembersIds, values });
    const deleteMembersActions = generateDeleteMembersActions({ membersIds, currentMembers });

    return [
        ...addMembersActions,
        ...deleteMembersActions
    ];
};

const signTxByLedger = async (contract, contractActions, actions, multisafeId, state, history, signAndSendTransaction) => {
    await signTransactionByLedger({
        actionName: 'Edit Multi Safe',
        state,
        actions,
        contractMethod: async () => await addEditRequest(contract, contractActions, null, signAndSendTransaction, multisafeId),
        callback: async () => {
            await actions.multisafe.onMountDashboard(multisafeId);
            history.push(getRoute.dashboard(multisafeId));
        },
    });
};

const signBatchTxByLedger = async (contract, confirmationsActions, membersActions, actions, multisafeId, state, history, values, currentMembers, signAndSendTransaction) => {
    let requestOrder = [membersActions, confirmationsActions];
    if (checkChangeOrder({ currentMembers, values })) {
        requestOrder = [confirmationsActions, membersActions];
    }

    await signTransactionByLedger({
        actionName: 'Edit Multi Safe',
        state,
        actions,
        contractMethod: async () => await addEditRequest(contract, requestOrder[0], null, signAndSendTransaction, multisafeId)
    });

    await signTransactionByLedger({
        actionName: 'Edit Multi Safe',
        state,
        actions,
        contractMethod: async () => await addEditRequest(contract, requestOrder[1], null, signAndSendTransaction, multisafeId),
        callback: async () => {
            await actions.multisafe.onMountDashboard(multisafeId);
            history.push(getRoute.dashboard(multisafeId));
        },
    });
};

// It's possible that the member will be deleting 1 member and adding 2 members at a time, 
// in this case, we don't want to change the order because the final number of confirmations might be increased and in this case, 
// we need to add and delete members first, and increase the number of confirmation second, to avoid increasing the number of the confirmations above the number of members.
// example 1:
// 1. Safe is set to 2 members and 2 confirmations.
// 2. member wants to: add 2 members, remove 1 member and increase the number of confirmations by 1
// In this case, if we increase the number of confirmations first, the contract will throw an error because it cannot set num of confirmations to 3 when the number of members is still 2.
// example 2:
// 1. safe is set to 2 members and 2 confirmations.
// 2. member wants to: remove 1 member and change num of confirmation to 1
// In this case, we need to change the num of confirmations first, because if we would like to remove the member first, the contract will throw an error as the number of members cannot be lower then num of confirmations.
const checkChangeOrder = ({ currentMembers, values, }) => {
    const currentMembersIds = currentMembers.map(({ accountId }) => accountId);
    const membersIds = values.members?.map(({ account_id }) => account_id) || [];
    const addMembersActions = generateAddMembersActions({ membersIds, currentMembersIds, values });
    const deleteMembersActions = generateDeleteMembersActions({ membersIds, currentMembers });

    return deleteMembersActions.length >= 1 && addMembersActions.length < deleteMembersActions.length;
};

const prepareBatchRequest = async (contract, confirmationsActions, membersActions, actions, values, currentMembers, signAndSendTransaction, multisafeId) => {
    const method = 'add_request_and_confirm';

    // in few cases we need to revert the order of actions
    let requestOrder = [membersActions, confirmationsActions];
    if (checkChangeOrder({ currentMembers, values })) {
        requestOrder = [confirmationsActions, membersActions];
    }

    actions.general.setTemporaryData({
        redirectAction: redirectActions.batchRequest,
        multisafeId: contract.contractId,
        batchRequest: {
            args: prepareRequestArgs({
                receiver_id: contract.contractId,
                actions: requestOrder[1],
                gas: ATTACHED_GAS,
                callbackUrl: `${window.location.origin}${getRoute.dashboard(contract.contractId)}`
            }),
            method
        },
    });

    const callbackUrl = getRoute.callbackUrl({ redirectAction: redirectActions.batchRequest });
    await addEditRequest(contract, requestOrder[0], callbackUrl, signAndSendTransaction, multisafeId);
};

export const onEditMultisafe = thunk(async (_, payload, { getStoreState, getStoreActions }) => {
    const { data, history, selector, selectedWalletId } = payload;

    const state = getStoreState();
    const actions = getStoreActions();
    const values = serializeData(data);
  
    const contract = state.multisafe.entities.contract;
    const members = state.multisafe.members;
    const name = state.multisafe.general.name;
    const numConfirmations = state.multisafe.general.numConfirmations;
    const multisafeId = state.multisafe.general.multisafeId;

    const wallet = await selector.wallet();
    const signAndSendTransaction = wallet.signAndSendTransaction;

    const membersActions = generateMembersActions(values, members);
    const confirmationsActions = generateConfirmationsActions(values, numConfirmations);

    const nameChanged = values.name !== name;
    const membersChanged = !!membersActions.length;
    const confirmationsChanged = !!confirmationsActions.length;
    const nothingChanged = !nameChanged && !membersChanged && !confirmationsChanged;
    const onlyNameChanged = nameChanged && !membersChanged && !confirmationsChanged;
    const isBatchRequest = membersChanged && confirmationsChanged;

    if (nothingChanged) {
        return;
    }

    if (nameChanged) {
        actions.multisafe.changeMultisafeName({ multisafeId, data });
    }

    if (onlyNameChanged) {
        history.push(getRoute.dashboard(multisafeId));
        return;
    }

    if (isBatchRequest) {
        // If new wallet gets introduced, please update here
        switch (selectedWalletId) {
            case 'near-wallet':
            case 'my-near-wallet':
                await prepareBatchRequest(contract, confirmationsActions, membersActions, actions, values, members, signAndSendTransaction, multisafeId);
                break;
            case 'ledger':
                await signBatchTxByLedger(contract, confirmationsActions, membersActions, actions, multisafeId, state, history, values, members, signAndSendTransaction);
                break;

            default:
                throw Error(`Unsupported wallet selected: '${selectedWalletId}'`);
        }
        return;
    } 

    // single request
    const contractActions = [
        ...confirmationsActions,
        ...membersActions
    ];
    const callbackUrl = `${window.location.origin}${getRoute.dashboard(contract.contractId)}`;

    // If new wallet gets introduced, please update here
    switch (selectedWalletId) {
        case 'near-wallet':
        case 'my-near-wallet':
            await addEditRequest(contract, contractActions, callbackUrl, signAndSendTransaction, multisafeId);
            break;
        case 'ledger':
            await signTxByLedger(contract, contractActions, actions, multisafeId, state, history, signAndSendTransaction);
            break;

        default:
            throw Error(`Unsupported wallet selected: '${selectedWalletId}'`);
    }
});

export const isBatchRequest = thunk(async (_, payload, { getStoreState }) => {
    const { data } = payload;

    const state = getStoreState();
    const values = serializeData(data);
  
    const members = state.multisafe.members;
    const numConfirmations = state.multisafe.general.numConfirmations;

    const membersActions = generateMembersActions(values, members);
    const confirmationsActions = generateConfirmationsActions(values, numConfirmations);

    const membersChanged = !!membersActions.length;
    const confirmationsChanged = !!confirmationsActions.length;
    const isBatchRequest = membersChanged && confirmationsChanged;

    return isBatchRequest;
});

'''
'''--- src/store/multisafe/thunks/onMakeFunctionCall.js ---
import { Buffer } from 'buffer';

import { thunk } from 'easy-peasy';

import { config } from '../../../near/config';
import { formatTGasValue } from '../../../utils/format';
import { signTransactionByLedger } from '../helpers/signTransactionByLedger';

const ADD_REQUEST_AND_CONFIRM_GAS = config.gas.add_and_confirm;

const addFunctionCallRequest = async ({
    withApprove,
    smartContractAddress,
    methodName,
    args,
    deposit,
    tGas,
    signAndSendTransaction,
    multisafeId,
}) => {
    const method = withApprove ? 'add_request_and_confirm' : 'add_request';

    return await signAndSendTransaction({
        receiverId: multisafeId,
        actions: [{
            type: 'FunctionCall',
            params: {
                methodName: method,
                args: {
                    request: {
                        receiver_id: smartContractAddress,
                        actions: [{
                            type: 'FunctionCall',
                            method_name: methodName,
                            args: Buffer.from(args).toString('base64'),
                            deposit: deposit.toString(),
                            gas: formatTGasValue(tGas),
                        }]
                    },
                },
                gas: ADD_REQUEST_AND_CONFIRM_GAS
            },
            
        }],
    });
};

const signTxByLedger = async ({
    withApprove,
    smartContractAddress,
    methodName,
    multisafeId,
    args,
    deposit,
    tGas,
    state,
    actions,
    signAndSendTransaction,
}) => {
    await signTransactionByLedger({
        actionName: methodName,
        state,
        actions,
        contractMethod: () => addFunctionCallRequest({
            withApprove,
            smartContractAddress,
            methodName,
            args,
            deposit,
            tGas,
            signAndSendTransaction,
            multisafeId,
        }),
        callback: async () => {
            await actions.multisafe.onMountDashboard(multisafeId);
        },
    });
};

export const onMakeFunctionCall = thunk(async (_, payload, { getStoreState, getStoreActions }) => {
    const { onClose, selector, selectedWalletId } = payload;
    const wallet = await selector.wallet();
    const signAndSendTransaction = wallet.signAndSendTransaction;

    const {
        withApprove,
        smartContractAddress,
        methodName,
        args,
        deposit,
        tGas
    } = payload.data;

    const state = getStoreState();
    const multisafeId = state.multisafe.general.multisafeId;
    const actions = getStoreActions();

    // If new wallet gets introduced, please update here
    switch (selectedWalletId) {
        case 'near-wallet':
        case 'my-near-wallet':
            await addFunctionCallRequest({
                withApprove,
                smartContractAddress,
                methodName,
                args,
                deposit,
                tGas,
                signAndSendTransaction,
                multisafeId,
            });
            break;
        case 'ledger':
            await signTxByLedger({
                withApprove,
                smartContractAddress,
                methodName,
                multisafeId,
                args,
                deposit,
                tGas,
                state,
                actions,
                signAndSendTransaction,
            });
            break;
        default:
            throw Error(`Unsupported wallet selected: '${selectedWalletId}'`);
    }

    onClose();
});

'''
'''--- src/store/multisafe/thunks/onMountDashboard.js ---
import { thunk } from 'easy-peasy';
import { Account } from 'near-api-js';

import { config } from '../../../near/config';
import { getMultisafeContract } from '../helpers/getMultisafeContract';

const getAddRequestTxs = async (multisafeId) => {
    const requestOptions = {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
    };
    const response = await fetch(`${config.backendURL}/getAddRequestTxs?${new URLSearchParams({
        multisafeId
    })}`, requestOptions);

    const body = await response.json();
    return body;
};

export const onMountDashboard = thunk(
    async (_, multisafeId, { getStoreState, getStoreActions }) => {
        const state = getStoreState();
        const accountId = state.general.user.accountId;
        const near = state.general.entities.near;
        const archivalRpc = state.general.entities.archivalRpc;
        const multisafes = state.multisafe.multisafes;

        const actions = getStoreActions();
        const mountDashboard = actions.multisafe.mountDashboard;
        const setError = actions.general.setError;

        const contract = getMultisafeContract(state, multisafeId);
        const localMultisafe = multisafes.find((multisafe) => multisafe.multisafeId === multisafeId);

        try {
            const [balance, members, requestIds, numConfirmations, addRequestTxs] = await Promise.all([
                new Account(near.connection, multisafeId).getAccountBalance(),
                contract.get_members(),
                contract.list_request_ids(),
                contract.get_num_confirmations(),
                getAddRequestTxs(multisafeId),
            ]);

            const [requests, txsStatuses] = await Promise.all([
                Promise.all(
                    requestIds.map((request_id) =>
                        Promise.all([
                            contract.get_request({ request_id }),
                            contract.get_confirmations({ request_id }),
                        ]),
                    ),
                ),
                Promise.all(
                    addRequestTxs.map(({ transaction_hash, signer_account_id }) =>
                        archivalRpc.connection.provider.txStatus(transaction_hash, signer_account_id),
                    ),
                ),
            ]);

            mountDashboard({
                requests,
                requestIds,
                addRequestTxs,
                txsStatuses,
                accountId,
                numConfirmations,
                localMultisafe,
                contract,
                balance,
                members,
            });
        } catch (e) {
            setError({ isError: true, description: e.message });
        }
    },
);

'''
'''--- src/store/multisafe/thunks/onMountHistory.js ---
import { thunk } from 'easy-peasy';

import { config } from '../../../near/config';
import { toCamelCase } from '../../helpers/toCamelCase';

const getRequestTxs = async (multisafeId) => {
    const requestOptions = {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
    };
    const response = await fetch(`${config.backendURL}/getRequestTxs?${new URLSearchParams({
        multisafeId
    })}`, requestOptions);

    const body = await response.json();
    return body;
};

export const onMountHistory = thunk(async (_, __, { getStoreState, getStoreActions }) => {
    const store = getStoreState();
    const archivalRpc = store.general.entities.archivalRpc;
    const contract = store.multisafe.entities.contract;
    const multisafeId = store.multisafe.general.multisafeId;

    const actions = getStoreActions();
    const mountHistory = actions.multisafe.mountHistory;
    const setError = actions.general.setError;

    try {
        const [requestIds, _requestTxs] = await Promise.all([
            contract.list_request_ids(),
            getRequestTxs(multisafeId),
        ]);
        const requestTxs = toCamelCase(_requestTxs);

        const requestTxStatuses = await Promise.all(
            requestTxs.map(({ transactionHash, signerAccountId }) =>
                archivalRpc.connection.provider.txStatus(transactionHash, signerAccountId),
            ),
        );

        mountHistory({
            requestIds,
            requestTxs,
            requestTxStatuses: toCamelCase(requestTxStatuses),
        });
    } catch (e) {
        setError({ isError: true, description: e.message });
    }
});

'''
'''--- src/store/multisafe/thunks/onMountList.js ---
import { thunk } from 'easy-peasy';

export const onMountList = thunk(async (_, payload, { getStoreState, getStoreActions }) => {
    const { setListOpen } = payload;
    const store = getStoreState();
    const near = store.general.entities.near;
    const multisafes = store.multisafe.multisafes;

    const actions = getStoreActions();
    const enableLoading = actions.general.enableLoading;
    const disableLoading = actions.general.disableLoading;
    const mountList = actions.multisafe.mountList;

    enableLoading();

    try {
        const accounts = await Promise.all(
            multisafes.map(({ multisafeId }) => near.account(multisafeId)),
        );

        const data = await Promise.all(
            accounts.map((account) =>
                Promise.all([
                    account.getAccountBalance(),
                    account.viewFunction(account.accountId, 'get_members'),
                ]),
            ),
        );

        mountList({ data });
        setListOpen(true);
    } catch (e) {
        actions.general.setError({ isError: true, description: e.message });
    }

    disableLoading();
});

'''
'''--- src/store/multisafe/thunks/onMountMultisafe.js ---
import { thunk } from 'easy-peasy';
import { Account } from 'near-api-js';

import { getMultisafeContract } from '../helpers/getMultisafeContract';

export const onMountMultisafe = thunk(async (_, payload, { getStoreState, getStoreActions }) => {
    const { multisafeId } = payload;

    const state = getStoreState();
    const near = state.general.entities.near;
    const multisafes = state.multisafe.multisafes;

    const actions = getStoreActions();
    const mountMultisafe = actions.multisafe.mountMultisafe;

    const contract = getMultisafeContract(state, multisafeId);
    const localMultisafe = multisafes.find((multisafe) => multisafe.multisafeId === multisafeId);

    try {
        const [balance, members, numConfirmations] = await Promise.all([
            new Account(near.connection, multisafeId).getAccountBalance(),
            contract.get_members(),
            contract.get_num_confirmations(),
        ]);

        mountMultisafe({
            localMultisafe,
            contract,
            balance,
            members,
            numConfirmations
        });
    } catch (e) {
        actions.general.setError({ isError: true, description: e.message });
    }
});

'''
'''--- src/store/multisafe/thunks/onMountNonFungibleTokenList.js ---
import { thunk } from 'easy-peasy';

import NonFungibleTokens from '../../../services/NonFungibleTokens';
import { listLikelyNfts } from '../../../utils/listLikelyAssets';

export const onMountNonFungibleTokenList = thunk(
    async (_, multisafeId, { getStoreState, getStoreActions }) => {
        const state = getStoreState();
        const near = state.general.entities.near;
        const nftMetadata = state.multisafe.general.nonFungibleTokensMetadata;
        const actions = getStoreActions();
        const mountNonFungibleTokenList = actions.multisafe.mountNonFungibleTokenList;

        const nonFungibleTokensService = new NonFungibleTokens(near.connection);
        const likelyNFTs = await listLikelyNfts(multisafeId);

        const nonFungibleTokensMetadata = {};
        const nonFungibleTokens = await Promise.all(await likelyNFTs.map(async (contractName) => {
            if (!nftMetadata[contractName]) {
                const fetchedMetadata = await nonFungibleTokensService.getMetadata({ contractName });
                nonFungibleTokensMetadata[contractName] = fetchedMetadata;
            }
            else {
                nonFungibleTokensMetadata[contractName] = nftMetadata[contractName];
            } 
            const tokens = await nonFungibleTokensService.getTokens(
                { contractName, 
                    accountId: multisafeId,
                    base_uri: nonFungibleTokensMetadata[contractName].base_uri });

            const tokenBalance = await nonFungibleTokensService.getBalanceOf({ contractName, accountId: multisafeId });
      
            return { ...nonFungibleTokensMetadata[contractName], tokenBalance, contractName, tokens };
        }));
    
        mountNonFungibleTokenList({
            nonFungibleTokens,
            nonFungibleTokensMetadata
        });
    }
);

'''
'''--- src/store/multisafe/thunks/onMountTokenList.js ---
import { thunk } from 'easy-peasy';

import FungibleTokens from '../../../services/FungibleTokens';
import { listLikelyTokens } from '../../../utils/listLikelyAssets';

export const onMountTokenList = thunk(
    async (_, multisafeId, { getStoreState, getStoreActions }) => {
        const state = getStoreState();
        const near = state.general.entities.near;
        const tokensMetadata = state.multisafe.general.fungibleTokensMetadata;
        const actions = getStoreActions();
        const mountTokenList = actions.multisafe.mountTokenList;
        const mountTokensMetadata = actions.multisafe.mountTokensMetadata;
        const fungibleTokensService = new FungibleTokens(near.connection);
        const likelyTokens = await listLikelyTokens(multisafeId);

        const fungibleTokensMetadata = {};
        const fungibleTokens = await Promise.all(await likelyTokens.map(async (token) => {
            // fetch balance for each token
            const tokenBalance = await fungibleTokensService.getBalanceOf({ contractName: token, accountId: multisafeId });
            // checks if metadata exists, if not we fetch it, else we just pull from cache
            if (!tokensMetadata[token]) {
                const fetchedMetadata = await fungibleTokensService.getMetadata({ contractName: token });
                fungibleTokensMetadata[token] = fetchedMetadata;
            }
            else {
                fungibleTokensMetadata[token] = tokensMetadata[token];
            }
            return { ...fungibleTokensMetadata[token], tokenBalance, contractName: token };
        }));
    
        // keeping metadata within the fungibleTokens as well for easier access, leads to duplicated information but cleaner code
        mountTokenList({
            fungibleTokens
        });
        // keeping metadata separate for quick check on whether we need to update metadata
        mountTokensMetadata({
            fungibleTokensMetadata
        });
    }
);

'''
'''--- src/store/multisafe/thunks/onRemoveLocalMultisafe.js ---
import { thunk } from 'easy-peasy';

import { getRoute, routes } from '../../../ui/config/routes';

export const onRemoveLocalMultisafe = thunk(
    async (_, payload, { getStoreState, getStoreActions }) => {
        const { history, multisafeId } = payload;

        const actions = getStoreActions();
        const removeMultisafe = actions.multisafe.removeMultisafe;

        removeMultisafe(multisafeId);

        const state = getStoreState();
        const membership = state.multisafe.selectors.multisafes.membership;
        const readOnly = state.multisafe.selectors.multisafes.readOnly;

        if (membership.length > 0) {
            history.push(getRoute.dashboard(membership[0].multisafeId));
            return;
        }

        if (readOnly.length > 0) {
            history.push(getRoute.dashboard(readOnly[0].multisafeId));
            return;
        }

        history.push(routes.getStarted);
    },
);

'''
'''--- src/store/multisafe/thunks/onTransferNFT.js ---
import { thunk } from 'easy-peasy';

import NonFungibleTokens from '../../../services/NonFungibleTokens';
import { signTransactionByLedger } from '../helpers/signTransactionByLedger';

const signTxByLedger = async ({
    nonFungibleTokensService,
    contract,
    withApprove,
    recipientId,
    multisafeId,
    state,
    actions,
    tokenId,
    contractName,
    signAndSendTransaction,
}) => {
    await signTransactionByLedger({
        actionName: 'Transfer NFT',
        state,
        actions,
        contractMethod: 
        async () => await nonFungibleTokensService.addTransferRequest({
            multisafeContract: contract, 
            withApprove,
            receiverId: recipientId,
            tokenId, 
            contractName,
            signAndSendTransaction,
            multisafeId,
        }),
        callback: async () => {
            await actions.multisafe.onMountDashboard(multisafeId);
        },
    });
};

export const onTransferNFT = thunk(async (_, payload, { getStoreState, getStoreActions }) => {
    const { onClose, tokenId, contractName, selector, selectedWalletId } = payload;
    const { recipientId, withApprove } = payload.data;

    const state = getStoreState(); 
    const near = state.general.entities.near;
    const contract = state.multisafe.entities.contract;
    const multisafeId = state.multisafe.general.multisafeId;
    const actions = getStoreActions();
    const wallet = await selector.wallet();
    const signAndSendTransaction = wallet.signAndSendTransaction;

    const nonFungibleTokensService = new NonFungibleTokens(near.connection);

    // TODO: nonFungibleTokensService.addTransferRequest need to be tested
    switch (selectedWalletId) {
        case 'near-wallet':
        case 'my-near-wallet':
            await nonFungibleTokensService.addTransferRequest({
                multisafeContract: contract, 
                withApprove,
                receiverId: recipientId,
                tokenId, 
                contractName,
                signAndSendTransaction,
                multisafeId,
            });
            break;
        case 'ledger':
            await signTxByLedger({ nonFungibleTokensService, contract, withApprove, recipientId, multisafeId, state, actions, tokenId, contractName, signAndSendTransaction });
            break;
        default:
            throw Error(`Unsupported wallet selected: '${selectedWalletId}'`);
    }

    onClose();
});

'''
'''--- src/store/multisafe/thunks/onTransferTokens.js ---
import { thunk } from 'easy-peasy';
import * as nearApiJs from 'near-api-js';

import { config } from '../../../near/config';
import FungibleTokens from '../../../services/FungibleTokens';
import { parseOtherAmount } from '../../../utils/format';
import { signTransactionByLedger } from '../helpers/signTransactionByLedger';

const ATTACHED_GAS = config.gas.default;

const {
    utils: {
        format: { parseNearAmount },
    },
} = nearApiJs;

const addTransferNearRequest = async ({ signAndSendTransaction, withApprove, recipientId, amount, multisafeId }) => {
    const method = withApprove ? 'add_request_and_confirm' : 'add_request';

    return await signAndSendTransaction({
        receiverId: multisafeId,
        actions: [{
            type: 'FunctionCall',
            params: {
                methodName: method,
                args: {
                    request: {
                        receiver_id: recipientId,
                        actions: [{ type: 'Transfer', amount: parseNearAmount(amount)  }],
                    },
                },
                gas: ATTACHED_GAS,
            },
            
        }],
    });
};

const signNearTxByLedger = async ({
    signAndSendTransaction,
    withApprove,
    recipientId,
    amount,
    multisafeId,
    state,
    actions,
}) => {
    return await signTransactionByLedger({
        actionName: 'Transfer',
        state,
        actions,
        contractMethod: async () => await addTransferNearRequest({ signAndSendTransaction, withApprove, recipientId, amount, multisafeId }),
        callback: async () => {
            return await actions.multisafe.onMountDashboard(multisafeId);
        },
    });
};

const signTxByLedger = async ({
    fungibleTokensService,
    signAndSendTransaction,
    signAndSendTransactions,
    contract,
    withApprove,
    recipientId,
    amount,
    contractName,
    multisafeId,
    state,
    actions,
}) => {
    return await signTransactionByLedger({
        actionName: 'Transfer',
        state,
        actions,
        contractMethod: () => fungibleTokensService.addTransferRequest({ multisafeContract: contract, withApprove, recipientId, amount, contractName, signAndSendTransaction, signAndSendTransactions, multisafeId }),
        callback: async () => {
            return await actions.multisafe.onMountDashboard(multisafeId);
        },
    });
};

export const onTransferTokens = thunk(async (_, payload, { getStoreState, getStoreActions }) => {
    const { onClose, token, selector, selectedWalletId } = payload;
    const { recipientId, amount, withApprove } = payload.data;
    const wallet = await selector.wallet();
    const signAndSendTransaction = wallet.signAndSendTransaction;
    const signAndSendTransactions = wallet.signAndSendTransactions;

    const state = getStoreState();
    const near = state.general.entities.near;
    const contract = state.multisafe.entities.contract;
    const multisafeId = state.multisafe.general.multisafeId;
    const actions = getStoreActions();
    const fungibleTokensService = new FungibleTokens(near.connection);
    const isNearTransaction = !token;

    // token is assumed to be NEAR if alternate token is not given
    if (isNearTransaction) {
        // If new wallet gets introduced, please update here
        switch (selectedWalletId) {
            case 'near-wallet':
            case 'my-near-wallet':
                await addTransferNearRequest({ signAndSendTransaction, withApprove, recipientId, amount, multisafeId });
                break;
            case 'ledger':
                await signNearTxByLedger({ signAndSendTransaction, withApprove, recipientId, amount, multisafeId, state, actions });
                break;
            default:
                throw Error(`Unsupported wallet selected: '${selectedWalletId}'`);
        }
    }
    else {
        // If new wallet gets introduced, please update here
        switch (selectedWalletId) {
            case 'near-wallet':
            case 'my-near-wallet':
                await fungibleTokensService.addTransferRequest({ 
                    multisafeContract: contract,
                    withApprove,
                    recipientId,
                    amount: parseOtherAmount(token, amount),
                    contractName: token.contractName,
                    signAndSendTransaction,
                    signAndSendTransactions,
                    multisafeId,
                });
                break;
            case 'ledger':
                await signTxByLedger({ 
                    contract,
                    fungibleTokensService,
                    signAndSendTransaction,
                    signAndSendTransactions,
                    withApprove,
                    recipientId,
                    amount: parseOtherAmount(token, amount),
                    multisafeId,
                    state,
                    actions,
                    contractName: token.contractName ,
                });
                break;
            default:
                throw Error(`Unsupported wallet selected: '${selectedWalletId}'`);
        }
    }
    onClose();
});

'''
'''--- src/store/startWork/helpers/getMultisafeFactoryContract.js ---
import { Account, Contract } from 'near-api-js';

import { config } from '../../../near/config';

export const getMultisafeFactoryContract = (state) => {
    const walletType = state.general.user.walletType;
    const accountId = state.general.user.accountId;
    const near = state.general.entities.near;
    const wallet = state.general.entities.wallet;

    const account = (walletType === 'my-near-wallet' || walletType === 'near-wallet')
        ? wallet.account()
        : new Account(near.connection, accountId);

    return new Contract(account, config.multisafeFactoryId, {
        viewMethods: [],
        changeMethods: ['create'],
    });
};

'''
'''--- src/store/startWork/index.js ---
import { initState } from './initState';
import { thunks } from './thunks';

export const startWork = {
    ...initState,
    ...thunks,
};

'''
'''--- src/store/startWork/initState.js ---
export const initState = {};

'''
'''--- src/store/startWork/thunks/index.js ---
import { onCreateMultisafe } from './onCreateMultisafe';
import { onLoadMultisafe } from './onLoadMultisafe';

export const thunks = {
    onCreateMultisafe,
    onLoadMultisafe,
};

'''
'''--- src/store/startWork/thunks/onCreateMultisafe.js ---
import { thunk } from 'easy-peasy';
import { utils } from 'near-api-js';

import { redirectActions } from '../../../config/redirectActions';
import { config } from '../../../near/config';
import { getRoute } from '../../../ui/config/routes';
import { spaceToSnake } from '../../../utils/format';
import { signTransactionByLedger } from '../../multisafe/helpers/signTransactionByLedger';
import { getMultisafeFactoryContract } from '../helpers/getMultisafeFactoryContract';

const serializeData = ({ name, multisafeId, members, num_confirmations, amount }) => ({
    name,
    multisafeId: spaceToSnake(multisafeId),
    multisafeAccountId: `${spaceToSnake(multisafeId)}.${config.multisafeFactoryId}`,
    numConfirmations: Number(num_confirmations),
    amount: utils.format.parseNearAmount(amount),
    members: members.map(({ account_id }) => ({ account_id })),
});

const createMultisafe = (contract, values) => {
    const { multisafeId, members, numConfirmations, amount } = values;

    return contract.create({
        args: {
            name: multisafeId,
            members,
            num_confirmations: numConfirmations,
        },
        gas: config.maxGas,
        amount,
        callbackUrl: getRoute.callbackUrl({ redirectAction: redirectActions.createMultisafe }),
    });
};

const signByNearWallet = (contract, values, actions) => {
    actions.general.setTemporaryData({
        redirectAction: redirectActions.createMultisafe,
        name: values.name,
        multisafeId: values.multisafeAccountId,
    });

    createMultisafe(contract, values);
};

const signTxByLedger = async (contract, values, state, actions, history) => {
    await signTransactionByLedger({
        actionName: 'Create Multi Safe',
        state,
        actions,
        contractMethod: () => createMultisafe(contract, values),
        callback: () => {
            actions.multisafe.addMultisafe({
                name: values.name,
                multisafeId: values.multisafeAccountId,
            });
            history.push(getRoute.dashboard(values.multisafeAccountId));
        },
    });
};

export const onCreateMultisafe = thunk(async (_, payload, { getStoreState, getStoreActions }) => {
    const { data, history, selectedWalletId } = payload;

    const state = getStoreState();

    const actions = getStoreActions();
    const factoryContract = getMultisafeFactoryContract(state);
    const values = serializeData(data);

    switch (selectedWalletId) {
        case 'near-wallet':
        case 'my-near-wallet':
            signByNearWallet(factoryContract, values, actions);
            break;
        case 'ledger':
            await signTxByLedger(factoryContract, values, state, actions, history);
            break;
        default:
            throw Error(`Unsupported wallet selected: '${selectedWalletId}'`);
    }
});

'''
'''--- src/store/startWork/thunks/onLoadMultisafe.js ---
import { thunk } from 'easy-peasy';

import { getRoute } from '../../../ui/config/routes';

export const onLoadMultisafe = thunk(async (_, payload, { getStoreActions }) => {
    const { data, push } = payload;

    const actions = getStoreActions();
    const addMultisafe = actions.multisafe.addMultisafe;

    const multisafeId = `${data.multisafeId}`;

    addMultisafe({ multisafeId, name: data.name });
    push(getRoute.dashboard(multisafeId));
});

'''
'''--- src/ui/components/ConfirmActionOnLedger/ConfirmActionOnLedger.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
    modal: {
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
    },
    backdropRoot: {
        backgroundColor: 'inherit',
        backdropFilter: 'blur(3px)',
    },
    container: {
        width: 400,
        display: 'flex',
        flexDirection: 'column',
        outline: 'none',
        borderRadius: 8,
    },
    wrapper: {
        margin: '24px 24px 16px 24px',
        height: '100%',
        display: 'flex',
        flexDirection: 'column',
    },
    header: {
        fontSize: 20,
        color: 'rgba(0, 0, 0, 0.87)',
        margin: 0,
    },
    imageWrapper: {
        minHeight: 113,
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        marginTop: 36,
    },
    ledgerDeviceImage: {
        width: 300,
    },
    content: {
        minHeight: 50,
        display: 'flex',
        alignItems: 'center',
        flexDirection: 'column',
        marginTop: 36,
    },
    actionName: {
        margin: 0,
        fontSize: 18,
    },
    loaderWrapper: {
        display: 'flex',
        alignItems: 'center',
    },
    error: {
        margin: 0,
        fontSize: 16,
        color: theme.colors.red,
    },
    footer: {
        height: 22,
        display: 'flex',
        justifyContent: 'flex-end',
        marginTop: 24,
    },
    gotIt: {
        color: 'rgba(0, 0, 0, 0.6)',
        letterSpacing: 1.25,
        padding: 0,
        fontSize: 12,
        fontWeight: 700,
    },
});

export const useStyles = makeStyles(styles, { name: 'ConfirmActionOnLedger' });

'''
'''--- src/ui/components/Error/Error.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    modal: {
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
    },
    container: {
        width: 300,
        display: 'flex',
        flexDirection: 'column',
        outline: 'none',
        borderRadius: 8,
        padding: 16,
    },
    header: {
        color: 'rgba(0, 0, 0, 0.87)',
        fontWeight: 900,
    },
    footer: {
        display: 'flex',
        justifyContent: 'flex-end',
        alignItems: 'center',
    },
};

export const useStyles = makeStyles(styles, { name: 'Error' });

'''
'''--- src/ui/components/Main/FormElements/MembersField/MembersField.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        width: 620,
    },
    memberAddress: {
        width: '100%',
    },
    memberAddressInput: {
        fontSize: 16,
        fontWeight: 900,
    },
    addButton: {
        borderColor: 'rgba(0, 0, 0, 0.12)',
        borderRadius: 8,
    },
    iconButton: {
        padding: '8px',
        margin: '0 16px',
    },
    icon: {
        color: '#989898',
        '&:hover': {
            color: '#e40029',
        },
    },
    addIcon: {
        color: '#00c08b',
    },
};

export const useStyles = makeStyles(styles, { name: 'MembersField' });

'''
'''--- src/ui/components/Main/MultiSafe/Dashboard/Dashboard.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        height: '100%',
        width: 'calc(100% - 48px)',
    },
};

export const useStyles = makeStyles(styles, { name: 'Dashboard' });

'''
'''--- src/ui/components/Main/MultiSafe/Dashboard/Transactions/PendingRequests.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
    header: {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'space-between'
    },
    h2: {
        margin: '30px 12px',
        fontSize: 24,
        fontWeight: 900,
    },
    button: {
        height: 34,
    },
    noRequestsContainer: {
        height: '80%',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        '&>p': {
            fontSize: 24,
            fontWeight: 700,
            color: theme.colors.textGrey,
        },
    },
    batchRequest: {
        backgroundColor: '#dff7f0'
    },
    bold: {
        fontWeight: 900
    },
    gray: {
        color: '#777'
    }
});

export const useStyles = makeStyles(styles, { name: 'PendingRequests' });

'''
'''--- src/ui/components/Main/MultiSafe/Dashboard/Transactions/Recipient/Recipient.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    copyToClipboard: {
        padding: '0',
        margin: '0 5px 0 10px',
    },
    openInExplorer: {
        padding: '0',
    },
    icon: {
        height: 16,
        width: 16,
        color: 'rgba(0, 0, 0, 0.54)',
        '&:hover': {
            color: '#989898',
        },
    },
};

export const useStyles = makeStyles(styles, { name: 'Recipient' });

'''
'''--- src/ui/components/Main/MultiSafe/Dashboard/Transactions/Status/Status.styles.js ---
import { makeStyles } from '@material-ui/core';

const isConfirmed =
  (yes, no) =>
      ({ hasUserConfirm }) =>
          hasUserConfirm ? yes : no;

const styles = (theme) => ({
    tableCell: {
        padding: '0 16px',
        width: 150,
    },
    container: {
        display: 'flex',
    },
    button: {
        display: 'flex',
        alignItems: 'center',
        borderRadius: 8,
        padding: '8px 16px',
        backgroundColor: isConfirmed(theme.palette.primary.main, '#ffffff'),
        color: isConfirmed('#ffffff', 'rgba(0, 0, 0, 0.6)'),
        border: '1px solid',
        borderColor: isConfirmed(theme.palette.primary.main, 'rgba(0, 0, 0, 0.12)'),
        outline: 'none',
        cursor: isConfirmed('inherit', 'pointer'),
        '&:hover': {
            borderColor: theme.palette.primary.main,
        },
        marginLeft: ({ hideDelete }) => hideDelete ? 54 : 0,
    },
    disabledButton: {
        cursor: 'default!important',
        '&:hover': {
            borderColor: 'rgba(0, 0, 0, 0.12)',
        },
    },
    doneIcon: {
        height: 18,
        width: 18,
        color: isConfirmed('#ffffff', theme.palette.primary.main),
    },
    description: {
        letterSpacing: '1.25px',
        marginLeft: 8,
        fontWeight: 700,
    },
    cancel: {
        display: 'flex',
        alignItems: 'center',
        borderRadius: 8,
        padding: '6px 11px',
        outline: 'none',
        backgroundColor: '#ffffff',
        cursor: 'pointer',
        border: '1px solid rgba(0, 0, 0, 0.12)',
        marginLeft: ({ hideConfirm }) => hideConfirm ? 92 : 10,
        '&:hover': {
            borderColor: theme.colors.red,
        },
    },
    cancelIcon: {
        height: 20,
        width: 20,
        color: ({ canDelete }) => (canDelete ? theme.colors.red : theme.colors.dashboardGrey),
    },
});

export const useStyles = makeStyles(styles, { name: 'Status' });

'''
'''--- src/ui/components/Main/MultiSafe/EditMultisafe/ConfirmModal/ConfirmModal.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
    modal: {
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
    },
    container: {
        width: 380,
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        outline: 'none',
        borderRadius: 8,
    },
    wrapper: {
        margin: '24px 24px 16px 24px',
        height: '100%',
        display: 'flex',
        flexDirection: 'column',
    },
    header: {
        fontSize: 20,
        color: 'rgba(0, 0, 0, 0.87)',
        margin: 0,
    },
    warning: {
        color: theme.colors.textGrey,
        margin: 0,
        marginTop: 20,
    },
    footer: {
        display: 'flex',
        justifyContent: 'flex-end',
        marginTop: 24,
    },
    cancel: {
        color: theme.colors.textGrey,
        minWidth: 'auto',
        letterSpacing: 1.25,
        padding: 0,
        fontSize: 12,
        fontWeight: 700,
    },
    remove: {
        color: theme.palette.primary.main,
        marginLeft: 14,
    },
});

export const useStyles = makeStyles(styles, { name: 'RemoveModal' });

'''
'''--- src/ui/components/Main/MultiSafe/EditMultisafe/EditMultisafe.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        width: '620px',
    },
    headerWrapper: {
        display: 'grid',
        gridTemplateColumns: '10% 80% 10%',
        gridTemplateRows: 'auto',
        gridTemplateAreas: `
      'a b .'
    `,
        alignItems: 'center',
        marginTop: 36,
    },
    goBack: {
        gridArea: 'a',
        justifySelf: 'start',
        padding: 0,
    },
    icon: {
        height: 28,
        width: 28,
        padding: 0,
        color: 'rgba(0, 0, 0, 87)',

    },
    title: {
        gridArea: 'b',
        justifySelf: 'center',
        fontSize: 34,
        fontWeight: 900,
        margin: 0,
    },
};

export const useStyles = makeStyles(styles, { name: 'CreateMultisafe' });

'''
'''--- src/ui/components/Main/MultiSafe/EditMultisafe/Form/Form.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    textField: {
        fontSize: 20,
        fontWeight: 900,
    },
    description: {
        marginTop: 25,
        fontSize: 14,
    },
    textFieldInputRoot: {
        borderRadius: 8,
        fontWeight: 900,
        backgroundColor: '#eaeaea',
    },
    textFieldInputNotchedOutline: {
        border: 'none',
    },
    confirmationsField: {
        width: '50%',
    },
    confirmationInput: {
        fontWeight: 900,
        fontSize: 16,
    },
    amountField: {
        width: '50%',
    },
    amountInputRoot: {
        fontSize: 16,
        fontWeight: 900,
    },
    adornmentText: {
        marginLeft: 8,
        fontWeight: 700,
        userSelect: 'none',
    },
    icon: {
        height: 20,
        width: 20,
    },
    submitButton: {
        fontSize: 14,
        margin: '25px auto 16px',
        display: 'block',
    },
    createMultisafeBlock: {
        width: '100%',
        marginTop: 25,
    },
};

export const useStyles = makeStyles(styles, { name: 'Form' });

'''
'''--- src/ui/components/Main/MultiSafe/History/History.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        height: '100%',
        width: 'calc(100% - 48px)',
    },
};

export const useStyles = makeStyles(styles, { name: 'Dashboard' });

'''
'''--- src/ui/components/Main/MultiSafe/History/Transactions/Recipient/Recipient.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    copyToClipboard: {
        padding: '0',
        margin: '0 5px 0 10px',
    },
    openInExplorer: {
        padding: '0',
    },
    icon: {
        height: 16,
        width: 16,
        color: 'rgba(0, 0, 0, 0.54)',
        '&:hover': {
            color: '#989898',
        },
    },
};

export const useStyles = makeStyles(styles, { name: 'Recipient' });

'''
'''--- src/ui/components/Main/MultiSafe/History/Transactions/Requests.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
    header: {
        margin: '30px 12px',
        fontSize: 24,
        fontWeight: 900,
    },
    noHistoryContainer: {
        height: '80%',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        '&>p': {
            fontSize: 24,
            fontWeight: 700,
            color: theme.colors.textGrey,
        },
    },
});

export const useStyles = makeStyles(styles, { name: 'Requests' });

'''
'''--- src/ui/components/Main/MultiSafe/History/Transactions/Status/Status.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
    status: {
        color: ({ status }) => (status === 'deleted' ? theme.colors.red : theme.palette.primary.main),
        textTransform: 'capitalize',
    },
});

export const useStyles = makeStyles(styles, { name: 'Status' });

'''
'''--- src/ui/components/Main/MultiSafe/History/Transactions/Type/Type.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
    container: {
        display: 'flex',
        alignItems: 'center',
    },
    icon: {
        height: 18,
        width: 18,
        color: theme.colors.red,
        marginRight: 9,
    },
});

export const useStyles = makeStyles(styles, { name: 'Type' });

'''
'''--- src/ui/components/Main/MultiSafe/Members/Actions/Actions.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    tools: {
        display: 'flex',
        justifyContent: 'flex-end',
    },
    icon: {
        width: 20,
        height: 20,
        color: '#989898',
    },
};

export const useStyles = makeStyles(styles, { name: 'Actions' });

'''
'''--- src/ui/components/Main/MultiSafe/Members/Members.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        width: 'calc(100% - 48px)',
    },
    header: {
        margin: '30px 12px',
        fontWeight: 900,
    },
    table: {
        minWidth: 620,
    },
    tableCell: {
        padding: '16px',
    },
    tableCellActions: {
        padding: '0 16px',
    },
};

export const useStyles = makeStyles(styles, { name: 'Members' });

'''
'''--- src/ui/components/Main/MultiSafe/MultiSafe.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        width: '100vw',
        minHeight: 'calc(100vh - 73px)',
        ['@media (min-width:768px)']: { // eslint-disable-line no-useless-computed-key
            display: 'grid',
            gridTemplateColumns: '256px auto',
            gridTemplateRows: 'auto',
            gridTemplateAreas: `
              'a b'
            `,
        },
    },
    content: {
        gridArea: 'b',
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'space-between',
        alignItems: 'center',
    },
};

export const useStyles = makeStyles(styles, { name: 'MultiSafe' });

'''
'''--- src/ui/components/Main/MultiSafe/MultisafeList/List/Item/Item.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
    container: {
        width: '100%',
        minHeight: 56,
        display: 'grid',
        gridTemplateColumns: '56px auto 30px',
        gridTemplateRows: 'auto auto',
        cursor: 'pointer',
        '&:hover': {
            backgroundColor: '#e9e9e9',
        },
    },
    emoji: {
        gridArea: '1 / 1 / 3 / 2',
        justifySelf: 'center',
        alignSelf: 'center',
        fontSize: 18,
    },
    name: {
        gridArea: '1 / 2 / 2 / 3',
        width: '90%',
        fontWeight: 700,
        lineHeight: 1.5,
        alignSelf: 'end',
        marginTop: 8,
        overflowWrap:'anywhere'
    },
    balance: {
        gridArea: '2 / 2 / 3 / 3',
        fontSize: 14,
        margin: '5px 0 8px 0',
        color: '#626262',
    },
    divider: {
        gridArea: '2 / 2 / 3 / 4',
        alignSelf: 'end',
        backgroundColor: theme.colors.dividerOnWhite,
    },
});

export const useStyles = makeStyles(styles, { name: 'Item' });

'''
'''--- src/ui/components/Main/MultiSafe/MultisafeList/List/Item/More/EditModal/EditModal.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
    modal: {
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
    },
    container: {
        width: '30%',
        display: 'flex',
        flexDirection: 'column',
        outline: 'none',
        borderRadius: 8,
    },
    wrapper: {
        margin: '24px 24px 16px 24px',
        height: '100%',
        display: 'flex',
        flexDirection: 'column',
    },
    header: {
        fontSize: 20,
        color: 'rgba(0, 0, 0, 0.87)',
        margin: 0,
    },
    form: {
        marginTop: 20,
    },
    footer: {
        display: 'flex',
        justifyContent: 'flex-end',
        marginTop: 24,
    },
    cancel: {
        color: theme.colors.textGrey,
        minWidth: 'auto',
        letterSpacing: 1.25,
        padding: 0,
        fontSize: 12,
        fontWeight: 700,
    },
    send: {
        color: theme.palette.primary.main,
        marginLeft: 14,
    },
});

export const useStyles = makeStyles(styles, { name: 'EditModal' });

'''
'''--- src/ui/components/Main/MultiSafe/MultisafeList/List/Item/More/EditModal/MultisafeName/MultisafeName.styles.js ---
import {makeStyles} from '@material-ui/core';

const styles = {
    textField: {
        fontSize: 20,
        fontWeight: 900,
    },
    textFieldInputRoot: {
        borderRadius: 8,
        backgroundColor: '#eaeaea',
    },
    textFieldInputNotchedOutline: {
        border: 'none',
    },
};

export const useStyles = makeStyles(styles, { name: 'MultisafeName' });

'''
'''--- src/ui/components/Main/MultiSafe/MultisafeList/List/Item/More/EditModal/validationSchema.js ---
import * as yup from 'yup';

export const validationSchema = yup.object().shape({
    name: yup.string().required('Please enter Multisafe Name is required'),
});

'''
'''--- src/ui/components/Main/MultiSafe/MultisafeList/List/Item/More/MenuItem/MenuItem.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
    container: {
        width: '100%',
        height: 50,
        display: 'flex',
        alignItems: 'center',
        border: 'none',
        cursor: 'pointer',
        padding: 0,
        '&:hover': {
            backgroundColor: '#e9e9e9',
        },
    },
    icon: {
        color: theme.palette.text.secondary,
        margin: '0 16px',
    },
    text: {
        fontWeight: 500,
        fontSize: 14,
        color: theme.palette.text.primary,
    },
});

export const useStyles = makeStyles(styles, { name: 'MenuItem' });

'''
'''--- src/ui/components/Main/MultiSafe/MultisafeList/List/Item/More/More.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
    button: {
        gridArea: '1 / 3 / 3 / 4',
        padding: 0,
        '&:hover': {
            color: theme.palette.primary.main,
        },
    },
    popover: {
        borderRadius: 8,
        border: '1px solid #4b5aae1e',
    },
    container: {
        width: 180,
        userSelect: 'none',
    },
    exportCsv: {
        color: theme.palette.primary.main,
    },
    deleteCampaign: {
        color: theme.colors.red,
    },
});

export const useStyles = makeStyles(styles, { name: 'More' });

'''
'''--- src/ui/components/Main/MultiSafe/MultisafeList/List/Item/More/RemoveModal/RemoveModal.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
    modal: {
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
    },
    container: {
        width: 380,
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        outline: 'none',
        borderRadius: 8,
    },
    wrapper: {
        margin: '24px 24px 16px 24px',
        height: '100%',
        display: 'flex',
        flexDirection: 'column',
    },
    header: {
        fontSize: 20,
        color: 'rgba(0, 0, 0, 0.87)',
        margin: 0,
    },
    warning: {
        color: theme.colors.textGrey,
        margin: 0,
        marginTop: 20,
    },
    footer: {
        display: 'flex',
        justifyContent: 'flex-end',
        marginTop: 24,
    },
    cancel: {
        color: theme.colors.textGrey,
        minWidth: 'auto',
        letterSpacing: 1.25,
        padding: 0,
        fontSize: 12,
        fontWeight: 700,
    },
    remove: {
        color: theme.palette.primary.main,
        marginLeft: 14,
    },
});

export const useStyles = makeStyles(styles, { name: 'RemoveModal' });

'''
'''--- src/ui/components/Main/MultiSafe/MultisafeList/List/List.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    title: {
        color: 'rgba(0, 0, 0, 0.5)',
        margin: '24px 0 8px 56px',
    }
};

export const useStyles = makeStyles(styles, { name: 'List' });

'''
'''--- src/ui/components/Main/MultiSafe/MultisafeList/MultisafeList.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
    container: {
        gridArea: 'b',
        width: 360,
        backgroundColor: '#fafafa',
        zIndex: 102,
        position: 'relative'
    },
    topbar: {
        height: 64,
        display: 'grid',
        gridTemplateColumns: '5px 49px auto',
        gridTemplateRows: 'auto',
        gridTemplateAreas: `
      'c a b'
    `,
    },
    arrow: {
        gridArea: 'c',
        height: 10,
        width: 10,
        backgroundColor: '#ffffff',
        alignSelf: 'center',
        justifySelf: 'end',
        transform: 'rotate(45deg)',
    },

    topbarIcon: {
        gridArea: 'a',
    },
    header: {
        gridArea: 'b',
        fontSize: 20,
        alignSelf: 'center',
        margin: 0,
        fontWeight: 900,
        color: 'rgba(7,7,7,0.87)',
        letterSpacing: '0.25px',
    },
    divider: {
        backgroundColor: theme.colors.dividerOnWhite,
    },
    readOnlyHeader: {
        margin: '26px 0 20px 16px',
        color: 'rgba(0, 0, 0, 0.54)',
    },
});

export const useStyles = makeStyles(styles, { name: 'MultisafeList' });

'''
'''--- src/ui/components/Main/MultiSafe/NonFungibleTokens/Actions/Actions.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    tools: {
        display: 'flex',
        justifyContent: 'flex-end',
    },
    icon: {
        width: 20,
        height: 20,
        color: '#989898',
    },
};

export const useStyles = makeStyles(styles, { name: 'Actions' });

'''
'''--- src/ui/components/Main/MultiSafe/NonFungibleTokens/NonFungibleTokens.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        width: 'calc(100% - 48px)',
    },
    media: {
        margin: 'auto',
        display: 'flex',
        maxWidth: '100%',
        maxHeight: '100%',
        width: 400,
        height: 260,
    },
    header: {
        margin: '30px 12px',
        fontWeight: 900,
    },
    modal: {
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
    },
    root: {
        width: 400,
        height: 400,
        margin: '20px',
    },
    img: {
        margin: 'auto',
        display: 'flex',
        maxWidth: '100%',
        maxHeight: '100%',
        width: 260,
        height: 260,
    },
    collectionTitle: {
        marginRight: '100px',
    },
    nft: {
        display: 'flex',
        flexDirection: 'column',
        margin: '0px 20px',
    }
};

export const useStyles = makeStyles(styles, { name: 'NonFungibleTokens' });

'''
'''--- src/ui/components/Main/MultiSafe/Sidebar/Account/Account.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
    container: {
        minHeight: '64px',
        display: 'grid',
        gridTemplateColumns: '24px 15% auto 12%',
        gridTemplateRows: '50% 50%',
        gridTemplateAreas: `
      '. a b d'
      '. a c d'
    `,
        cursor: 'pointer',
        '&:hover': {
            backgroundColor: theme.colors.dashboardHoverBgGrey,
        },
    },
    emoji: {
        gridArea: 'a',
        fontSize: 20,
        alignSelf: 'center',
    },
    name: {
        gridArea: 'b',
        alignSelf: 'end',
        color: '#ffffff',
        fontWeight: 700,
        letterSpacing: '0.25px',
        lineHeight: 1.5,
        textOverflow: 'ellipsis',
        overflow: 'hidden',
        whiteSpace: 'nowrap',
    },
    multisafeId: {
        gridArea: 'c',
        alignSelf: 'start',
        color: theme.colors.dashboardGrey,
        lineHeight: 1.5,
        textOverflow: 'ellipsis',
        overflow: 'hidden',
        whiteSpace: 'nowrap',
    },
    icon: {
        gridArea: 'd',
        alignSelf: 'center',
        color: theme.colors.dashboardGrey,
    },
});

export const useStyles = makeStyles(styles, { name: 'Account' });

'''
'''--- src/ui/components/Main/MultiSafe/Sidebar/Actions/Actions.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
    container: {
        display: 'grid',
        gridTemplateColumns: '24px auto 24px',
        gridTemplateRows: '12px auto 12px auto 24px auto 12px auto',
        gridTemplateAreas: `
      '. . .'
      '. a .'
      '. . .'
      '. b .'
      '. . .'
      '. c .'
      '. . .'
      '. d .'
    `,
    },
    tools: {
        gridArea: 'a',
        display: 'flex',
        justifyContent: 'center',
    },
    iconButton: {
        padding: '8px',
        margin: '0 16px',
    },
    icon: {
        color: '#989898',
        '&:hover': {
            color: 'white',
        },
    },
    balance: {
        gridArea: 'b',
        padding: '10px',
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#434343',
        borderRadius: '8px',
        '&>span': {
            color: '#ffffff',
            fontSize: 14,
            fontWeight: 500,
            letterSpacing: '0.5px',
        },
    },
    readOnly: {
        gridArea: 'c',
        height: 34,
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        color: theme.colors.dashboardGrey,
        fontSize: 14,
        fontWeight: 700,
        letterSpacing: '1.5px',
        border: '1px solid #ffffff1e',
        borderRadius: 8,
        userSelect: 'none',
    },
    addBalance: {
        gridArea: 'c',
        height: 34,
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        fontSize: 14,
        fontWeight: 700,
        letterSpacing: '1.5px',
        border: '1px solid #ffffff1e',
        borderRadius: 8,
        userSelect: 'none',
    }
});

export const useStyles = makeStyles(styles, { name: 'Actions' });

'''
'''--- src/ui/components/Main/MultiSafe/Sidebar/Actions/NewTransaction/MakeFunctionCall/MakeFunctionCall.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
    container: {
        width: 380,
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        outline: 'none',
        borderRadius: 8,
    },
    wrapper: {
        margin: '24px 24px 16px 24px',
        height: '100%',
        display: 'flex',
        flexDirection: 'column',
    },
    header: {
        fontSize: 20,
        color: 'rgba(0, 0, 0, 0.87)',
        margin: 0,
    },
    form: {
        marginTop: 20,
    },
    textField: {
        marginBottom: 24,
        fontSize: 20,
        fontWeight: 900,
    },
    textFieldInputRoot: {
        borderRadius: 8,
        backgroundColor: '#eaeaea',
    },
    textFieldInputNotchedOutline: {
        border: 'none',
    },
    checkboxLabel: {
        fontWeight: 700,
        fontSize: 14,
    },
    footer: {
        display: 'flex',
        justifyContent: 'flex-end',
        marginTop: 24,
    },
    cancel: {
        color: theme.colors.textGrey,
        minWidth: 'auto',
        letterSpacing: 1.25,
        padding: 0,
        fontSize: 12,
        fontWeight: 700,
    },
    send: {
        color: theme.palette.primary.main,
        marginLeft: 14,
    },
});

export const useStyles = makeStyles(styles, { name: 'MakeFunctionCall' });

'''
'''--- src/ui/components/Main/MultiSafe/Sidebar/Actions/NewTransaction/NewTransaction.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    modal: {
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
    },
    button: {
        gridArea: 'd',
        height: 36,
    },
};

export const useStyles = makeStyles(styles, { name: 'NewTransaction' });

'''
'''--- src/ui/components/Main/MultiSafe/Sidebar/Actions/NewTransaction/SendFunds/Amount/Amount.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    icon: {
        height: 20,
        width: 20,
    },
    textField: {
        fontSize: 20,
        fontWeight: 900,
    },
    adornmentText: {
        marginLeft: 8,
        fontWeight: 700,
        userSelect: 'none',
    },
    helperContainer: {
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        margin: '3px 12px 24px 12px',
        color: 'rgba(0, 0, 0, 0.6)',
    },
    balance: {
        fontSize: 12,
        lineHeight: 1.6,
        color: 'rgba(0, 0, 0, 0.6)',
    },
    sendMax: {
        fontSize: 12,
        fontWeight: 500,
        lineHeight: 1.6,
        padding: 0,
        textTransform: 'none',
        letterSpacing: 0.4,
    },
};

export const useStyles = makeStyles(styles, { name: 'Amount' });

'''
'''--- src/ui/components/Main/MultiSafe/Sidebar/Actions/NewTransaction/SendFunds/Collection/NFT.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
    media: {
        cursor: 'pointer',
        margin: 'auto',
        display: 'flex',
        maxWidth: '100%',
        maxHeight: '100%',
        width: 50,
        height: 50,
    },
    img: {
        cursor: 'pointer',
        marginLeft: 15,
        display: 'flex',
        maxWidth: '100%',
        maxHeight: '100%',
        width: 50,
        height: 50,
    },
    listItem: {
        cursor: 'pointer',
        backgroundColor: ({isActive}) => isActive && theme.palette.primary.light,
        borderTop: '1px solid rgb(240, 240, 241)',
        '&:last-of-type': {
            borderBottom: '1px solid rgb(240, 240, 241)',
            marginBottom: 20,
        },
        '& p, span': {
            color: ({isActive}) => isActive && 'white',
        }
    }
});

export const useStyles = makeStyles(styles, { name: 'NFT' });

'''
'''--- src/ui/components/Main/MultiSafe/Sidebar/Actions/NewTransaction/SendFunds/SendFunds.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
    container: {
        width: 385,
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        outline: 'none',
        borderRadius: 8,
        maxHeight: '500px',
        overflowY: 'auto',
    },
    wrapper: {
        margin: '24px 24px 16px 24px',
        height: '100%',
        display: 'flex',
        flexDirection: 'column',
    },
    paper: {
        position: 'fixed',
        left: '40%',
        top: '10%',
        overflow: 'hidden',
    },
    directory: {
        display: 'flex',
        flexDirection: 'row', 
    },
    tabs: {
        display: 'flex',
    },
    tab: {
        flex: '1',
        textAlign: 'center',
    },
    form: {
        marginTop: 20,
        width: 320,
    },
    textField: {
        marginBottom: 24,
        fontSize: 20,
        fontWeight: 900,
    },
    textFieldInputRoot: {
        borderRadius: 8,
        backgroundColor: '#eaeaea',
    },
    textFieldInputNotchedOutline: {
        border: 'none',
    },
    readOnlyField: {
        minWidth: 332,
        marginBottom: 24,
    },
    checkboxLabel: {
        fontWeight: 700,
        fontSize: 14,
    },
    footer: {
        display: 'flex',
        justifyContent: 'flex-end'
    },
    cancel: {
        color: theme.colors.textGrey,
        minWidth: 'auto',
        letterSpacing: 1.25,
        padding: 0,
        fontSize: 12,
        fontWeight: 700,
    },
    send: {
        color: theme.palette.primary.main,
        marginLeft: 14,
    },
});

export const useStyles = makeStyles(styles, { name: 'SendFunds' });

'''
'''--- src/ui/components/Main/MultiSafe/Sidebar/Navigation/Item/Item.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
    container: {
        height: 56,
        display: 'flex',
        alignItems: 'center',
        color: ({ isActive }) => (isActive ? theme.palette.primary.main : theme.colors.dashboardGrey),
        '&:hover': {
            backgroundColor: theme.colors.dashboardHoverBgGrey,
        },
    },
    subContainer: {
        height: 36,
        display: 'flex',
        alignItems: 'center',
        paddingLeft: 48,
        color: ({ isActive }) => (isActive ? theme.palette.primary.main : theme.colors.dashboardGrey),
        '&:hover': {
            backgroundColor: theme.colors.dashboardHoverBgGrey,
        },
    },
    icon: {
        marginLeft: 24,
    },
    name: {
        marginLeft: 24,
    },
});

export const useStyles = makeStyles(styles, { name: 'Item' });

'''
'''--- src/ui/components/Main/MultiSafe/Sidebar/Navigation/Navigation.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        gridArea: 'c',
        color: 'white',
    },
};

export const useStyles = makeStyles(styles, { name: 'Navigation' });

'''
'''--- src/ui/components/Main/MultiSafe/Sidebar/Navigation/getItems.js ---
import { Dashboard, People, Settings, PhotoLibrary } from '@material-ui/icons';

import { routes, getRoute } from '../../../../../config/routes';

const items = [
    {
        name: 'Requests',
        route: routes.dashboard,
        getPath: getRoute.dashboard,
        icon: Dashboard,
        subItems: [{
            name: 'Pending',
            route: routes.dashboard,
            getPath: getRoute.dashboard
        },{
            name: 'Completed',
            route: routes.history,
            getPath: getRoute.history
        }]
    },
    {
        name: 'Members',
        route: routes.members,
        getPath: getRoute.members,
        icon: People
    },
    {
        name: 'Settings',
        route: routes.safeEdit,
        getPath: getRoute.safeEdit,
        icon: Settings,
        subItems: [{
            name: 'Edit Safe',
            route: routes.safeEdit,
            getPath: getRoute.safeEdit
        }, {
            name: 'Remove Multi Safe',
            route: routes.remove,
            getPath: getRoute.remove
        }, {
            name: 'Disconnect Account',
            route: routes.disconnect,
            getPath: getRoute.disconnect
        }]
    },
    {
        name: 'Collectibles',
        route: routes.nonFungibleTokens,
        getPath: getRoute.nonFungibleTokens,
        icon: PhotoLibrary
    },
];

export const getItems = (match) =>
    items.map(({ name, icon, getPath, route, subItems }) => ({
        name,
        icon,
        path: getPath(match.params.multisafeId),
        isActive: subItems?.length
            ? subItems.some((subItem) => match.path === subItem.route)
            : route === match.path,
        subItems: subItems?.map((subItem) => ({
            name: subItem.name,
            path: subItem.getPath(match.params.multisafeId),
            isActive: subItem.route === match.path,
        }))
    }));

'''
'''--- src/ui/components/Main/MultiSafe/Sidebar/Sidebar.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        gridArea: 'a',
        display: 'flex',
        flexDirection: 'column',
        backgroundColor: 'rgba(0, 0, 0, 0.87)',
        ['@media (max-width:767px)']: { // eslint-disable-line no-useless-computed-key
            position: 'fixed',
            left: '-150%',
            top: '73px',
            bottom: '0',
            transition: 'all .35s ease',
            overflow: 'auto',
            width: '350px'
        },
        zIndex: 100
    },
    active: {
        ['@media (max-width:767px)']: { // eslint-disable-line no-useless-computed-key
            left: '0',
        },
    },
    divider: {
        backgroundColor: '#434343',
        marginTop: 24,
    },
};

export const useStyles = makeStyles(styles, { name: 'Sidebar' });

'''
'''--- src/ui/components/Main/MultiSafe/general/Type/Type.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = () => ({
    container: {
        display: 'flex',
        alignItems: 'center',
    },
    icon: {
        height: 18,
        width: 18,
        marginRight: 9,
    },
});

export const useStyles = makeStyles(styles, { name: 'Type' });

'''
'''--- src/ui/components/Main/StartWork/CreateMultisafe/CreateMultisafe.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        width: '620px',
    },
    headerWrapper: {
        display: 'grid',
        gridTemplateColumns: '10% 80% 10%',
        gridTemplateRows: 'auto',
        gridTemplateAreas: `
      'a b .'
    `,
        alignItems: 'center',
        marginTop: 36,
    },
    goBack: {
        gridArea: 'a',
        justifySelf: 'start',
        padding: 0,
    },
    icon: {
        height: 28,
        width: 28,
        padding: 0,
        color: 'rgba(0, 0, 0, 87)',

    },
    title: {
        gridArea: 'b',
        justifySelf: 'center',
        fontSize: 34,
        fontWeight: 900,
        margin: 0,
    },
};

export const useStyles = makeStyles(styles, { name: 'CreateMultisafe' });

'''
'''--- src/ui/components/Main/StartWork/CreateMultisafe/Form/Form.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    textField: {
        fontSize: 20,
        fontWeight: 900,
    },
    description: {
        marginTop: 25,
        fontSize: 14,
    },
    textFieldInputRoot: {
        borderRadius: 8,
        fontWeight: 900,
        backgroundColor: '#eaeaea',
    },
    textFieldInputNotchedOutline: {
        border: 'none',
    },
    confirmationsField: {
        width: '50%',
    },
    confirmationInput: {
        fontWeight: 900,
        fontSize: 16,
    },
    amountField: {
        width: '50%',
    },
    amountInputRoot: {
        fontSize: 16,
        fontWeight: 900,
    },
    adornmentText: {
        marginLeft: 8,
        fontWeight: 700,
        userSelect: 'none',
    },
    icon: {
        height: 20,
        width: 20,
    },
    submitButton: {
        fontSize: 14,
        margin: '25px auto 16px',
        display: 'block',
    },
    createMultisafeBlock: {
        width: '100%',
        marginTop: 25,
    },
    policy: {
        marginTop: 25,
        fontSize: 14,
        textAlign: 'center',
    },
};

export const useStyles = makeStyles(styles, { name: 'Form' });

'''
'''--- src/ui/components/Main/StartWork/GetStarted/GetStarted.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        display: 'flex',
        flexDirection: 'column',
    },
    pageHeader: {
        display: 'flex',
        marginTop: '36px',
    },
    emoji: {
        width: 69,
        height: 80,
        marginRight: '24px',
    },
    titleBlock: {
        display: 'flex',
        flexDirection: 'column',
    },
    multisafeActions: {
        display: 'flex',
        flexDirection: 'column',
        marginTop: '16px',
    },
};

export const useStyles = makeStyles(styles, { name: 'GetStarted' });

'''
'''--- src/ui/components/Main/StartWork/GetStarted/MultisafeList/ListItem/ListItem.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        marginTop: '16px',
    },
};

export const useStyles = makeStyles(styles, { name: 'ListItem' });

'''
'''--- src/ui/components/Main/StartWork/GetStarted/MultisafeList/MultisafeList.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        display: 'flex',
        flexDirection: 'column',
        marginTop: 16,
    },
};

export const useStyles = makeStyles(styles, { name: 'MultisafeList' });

'''
'''--- src/ui/components/Main/StartWork/LoadMultisafe/Form/Form.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    form: {
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        marginTop: 25,
    },
    textField: {
        width: '100%',
        marginTop: 25,
        '&:first-child': {
            marginTop: 0,
        },
    },
    terms: {
        marginTop: 25,
    },
    divider: {
        width: '100%',
        marginTop: 25,
    },
    submitButton: {
        width: '50%',
        marginTop: 25,
    },
};

export const useStyles = makeStyles(styles, { name: 'Form' });

'''
'''--- src/ui/components/Main/StartWork/LoadMultisafe/Form/validations.js ---
import { yupResolver } from '@hookform/resolvers/yup';
import * as yup from 'yup';

import { debounce } from '../../../../../../utils/debounce';
import { getMultisafeAccountId } from '../../../../../../utils/getMultisafeAccountId';
import { isAccountExist } from '../../../../../../utils/isAccountExist';

const errors = {
    name: 'Please enter multisafe local name',
    multisafeId: 'Please enter a valid multisafe name',
    isMultisafeExists: 'There is no multisafe with such ID',
    isMultisafeLoaded: 'This multisafe has been loaded already',
};

export const schema = yup.object().shape({
    name: yup.string().required(errors.name),
    multisafeId: yup
        .string()
        .required(errors.multisafeId)
        .test(
            'is-multisafe-loaded',
            errors.isMultisafeLoaded,
            (value, { options }) => !options.context.multisafes.has(getMultisafeAccountId(value)),
        )
        .test(
            'is-multisafe-exists',
            errors.isMultisafeExists,
            debounce(
                async (value, { options }) =>
                    isAccountExist({
                        near: options.context.near,
                        accountId: getMultisafeAccountId(value),
                    }),
                350,
            ),
        ),
});

export const resolver = yupResolver(schema);

'''
'''--- src/ui/components/Main/StartWork/LoadMultisafe/LoadMultisafe.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        width: '620px',
    },
    headerWrapper: {
        display: 'grid',
        gridTemplateColumns: '10% 80% 10%',
        gridTemplateRows: 'auto',
        gridTemplateAreas: `
      'a b .'
    `,
        alignItems: 'center',
        marginTop: 36,
    },
    goBack: {
        gridArea: 'a',
        justifySelf: 'start',
        padding: 0,
    },
    icon: {
        height: 28,
        width: 28,
        padding: 0,
        color: 'rgba(0, 0, 0, 87)',

    },
    title: {
        gridArea: 'b',
        justifySelf: 'center',
        fontSize: 34,
        fontWeight: 900,
        margin: 0,
    },
    subheader: {
        marginTop: 25,
    },
    description: {
        marginTop: 25,
    },
};

export const useStyles = makeStyles(styles, { name: 'LoadMultisafe' });

'''
'''--- src/ui/components/Main/StartWork/StartWork.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        width: '100vw',
        minHeight: 'calc(100vh - 73px)',
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'space-between',
        alignItems: 'center',
    },
};

export const useStyles = makeStyles(styles, { name: 'StartWork' });

'''
'''--- src/ui/components/Main/StartWork/general/redirectBack.js ---
import { getRoute, routes } from '../../../../config/routes';

export const redirectBack = (hasSavedMultisafes, multisafeId, push) => {
    const url = hasSavedMultisafes ? getRoute.dashboard(multisafeId) : routes.getStarted;
    push(url);
};

'''
'''--- src/ui/components/Main/general/BulletHeading/BulletHeading.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        display: 'flex',
        marginTop: 24,
        '&:first-child': {
            marginTop: 36,
        },
    },
    chevron: {
        color: '#00c08b',
    },
};

export const useStyles = makeStyles(styles, { name: 'BulletHeading' });

'''
'''--- src/ui/components/Main/general/GreenLink/GreenLink.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
    container: {
        width: '100%',
        display: 'flex',
        color: ({ disabled }) => (disabled ? 'grey' : theme.palette.primary.main),
        userSelect: 'none',
    },
    iconContainer: {
        height: 56,
        width: 56,
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
    },
    icon: {},
    textContainer: {
        width: 'calc(100% - 56px)',
        display: 'flex',
        alignItems: 'center',
        borderBottom: `1px solid ${theme.colors.dividerOnWhite}`,
    },
    text: {
        fontWeight: 700,
        lineHeight: 1.5,
    },
});

export const useStyles = makeStyles(styles, { name: 'GreenLink' });

'''
'''--- src/ui/components/Main/general/Topbar/Account/Account.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    button: {
        borderRadius: 8,
        textTransform: 'none',
        padding: '3px 6px 3px 6px',
        backgroundColor: ({ isOpen }) => (isOpen ? '#ebebeb' : '#ffffff'),
        '&:hover': {
            backgroundColor: '#ebebeb',
        },
    },
    buttonContent: {
        display: 'flex',
        alignItems: 'center',
        fontSize: 14,
        letterSpacing: 0.25,
        color: 'rgba(0, 0, 0, 0.7)',
    },
    accountId: {
        margin: '0 4px 0 10px',
    },
    nearIcon: {
        height: 20,
        width: 20,
    },
};

export const useStyles = makeStyles(styles, { name: 'Account' });

'''
'''--- src/ui/components/Main/general/Topbar/Account/Modal/Modal.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        width: 280,
    },
    account: {
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
    },
    nearIcon: {
        height: 40,
        width: 40,
        marginTop: 40,
    },
    accountId: {
        width: '90%',
        margin: '28px 0 16px 0',
        fontWeight: 700,
        overflow: 'hidden',
        whiteSpace: 'pre-wrap',
        textOverflow: 'ellipsis',
        textAlign: 'center',
    },
    tools: {
        marginBottom: 16,
    },
    footer: {
        height: 64,
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
    },
    disconnect: {
        letterSpacing: 1.25,
        fontWeight: 700,
        borderRadius: 8,
    },
};

export const useStyles = makeStyles(styles, { name: 'Modal' });

'''
'''--- src/ui/components/Main/general/Topbar/NonConnected/NonConnected.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
    clearDataButton: {
        marginRight: 16,
        borderRadius: 8,
        padding: '3px 16px 3px 8px',
        borderColor: theme.colors.dividerOnWhite,
        textTransform: 'none',
    },
    connectWalletButton: {
        borderRadius: 8,
        borderColor: theme.colors.dividerOnWhite,
        textTransform: 'none',
        padding: '3px 16px 3px 8px',
    },
    buttonContent: {
        display: 'flex',
        '&>span': {
            marginLeft: 5,
        },
    },
});

export const useStyles = makeStyles(styles, { name: 'NonConnected' });

'''
'''--- src/ui/components/Main/general/Topbar/Topbar.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        width: 'calc(100vw - 48px)',
        height: '72px',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        padding: '0 24px',
        borderBottom: '1px solid #00000020',
    },
    logo: {
        width: '182px',
        ['@media (max-width:767px)']: { // eslint-disable-line no-useless-computed-key
            display: 'none',
        },
    },
    progress: {
        position: 'absolute',
        top: '70px',
        width: '100%',
    },
    menu_toggle:{
        width: '24px',
        height: '24px',
        transition: 'all 0.6s',
        zIndex: '2000',
        cursor: 'pointer',
        outline: 'none',
        padding: '5px 3px',
        background: 'transparent',
        border: 'none',
        marginRight: '24px',
        ['@media (min-width:768px)']: { // eslint-disable-line no-useless-computed-key
            display: 'none',
        },
        '& span' : {
            transition: 'all 0.6s',
            display: 'block',
            height: '2px',
            width: '100%',
            background: '#333',
            marginBottom: '4px',
            outline: 'none',
        }
    },
    menu_toggle_active: {
        outline: 'none',

        '& span': {
            height: '1.5px',
            '&:nth-child(1)': {
                transform: 'rotate(135deg)',
                marginTop: '1px',
            },
            '&:nth-child(2)': {
                display: 'none',
            },
            '&:nth-child(3)': {
                transform: 'rotate(-135deg)',
                margin: '-5.5px 0 0',
            }
        }
    }
};

export const useStyles = makeStyles(styles, { name: 'Topbar' });

'''
'''--- src/ui/components/PageNotFound/PageNotFound.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        height: '100vh',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
    },
};

export const useStyles = makeStyles(styles, { name: 'PageNotFound' });

'''
'''--- src/ui/components/SelectLedgerAccount/AccountList/Account/Account.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: ' center',
        fontSize: 14,
        color: 'rgba(0, 0, 0, 0.80)',
    },
    accountId: {
        width: '80%',
        overflowWrap: 'break-word',
    },
};

export const useStyles = makeStyles(styles, { name: 'Account' });

'''
'''--- src/ui/components/SelectLedgerAccount/AccountList/AccountList.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        maxHeight: 168,
        overflowY: 'auto',
        marginTop: 24,
    },
};

export const useStyles = makeStyles(styles, { name: 'AccountList' });

'''
'''--- src/ui/components/SelectLedgerAccount/SelectLedgerAccount.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
    modal: {
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
    },
    backdropRoot: {
        backgroundColor: 'rgba(0, 0, 0, 0.25)',
    },
    container: {
        width: 380,
        display: 'flex',
        flexDirection: 'column',
        outline: 'none',
        borderRadius: 8,
    },
    wrapper: {
        margin: '24px 24px 16px 24px',
        height: '100%',
        display: 'flex',
        flexDirection: 'column',
    },
    header: {
        fontSize: 20,
        color: 'rgba(0, 0, 0, 0.87)',
        margin: 0,
    },
    description: {
        color: 'rgba(0, 0, 0, 0.6)',
        fontSize: 14,
        margin: 0,
        marginTop: 20,
    },
    noAccounts: {
        margin: 0,
        marginTop: 20,
        '&>a': {
            color: theme.palette.primary.main,
        },
    },
    footer: {
        display: 'flex',
        justifyContent: 'flex-end',
        marginTop: 24,
    },
    cancel: {
        color: 'rgba(0, 0, 0, 0.6)',
        letterSpacing: 1.25,
        padding: 0,
        fontSize: 12,
        fontWeight: 700,
    },
    select: {
        color: theme.palette.primary.main,
    },
});

export const useStyles = makeStyles(styles, { name: 'SelectLedgerAccount' });

'''
'''--- src/ui/components/Welcome/Welcome.styles.js ---
import { makeStyles } from '@material-ui/core';

import background from '../../images/welcome-page/background.svg';

const styles = {
    container: {
        backgroundImage: `url(${background})`,
        backgroundPosition: 'center',
        backgroundSize: 'cover',
        backgroundRepeat: 'no-repeat',
        height: '100vh',
        overflow: 'auto',
        display: 'grid',
        gridTemplateColumns: '100%',
        gridTemplateRows: '40px auto auto 52px',
        gridTemplateAreas: `
      'l'
      'a'
      'b'
      'f'
    `,
        ['@media (min-width:768px)']: { // eslint-disable-line no-useless-computed-key
            gridTemplateColumns: '17% 350px 70px auto',
            gridTemplateRows: '25% auto 52px',
            gridTemplateAreas: `
      'l . . .'
      '. a a .'
      'f f f f'
    `,
        }
    },
    logo: {
        gridArea: 'l',
        width: '182px',
        margin: '18px 0 0 24px',
    },
    content: {
        gridArea: 'a',
        display: 'flex',
        flexDirection: 'column',
        ['@media (max-width:767px)']: { // eslint-disable-line no-useless-computed-key
            padding: '50px 20px'
        }
    },
    header: {
        fontSize: '40px',
        fontWeight: 900,
        letterSpacing: '-0.5px',
        color: '#ffffffde',
        margin: 0,
        ['@media (min-width:768px)']: { // eslint-disable-line no-useless-computed-key
            fontSize: '60px',
        }
    },
    description: {
        marginTop: '16px',
        color: '#ffffffa0',
        lineHeight: 1.75,
        letterSpacing: '0.5px',
        margin: 0,
        ['@media (max-width:767px)']: { // eslint-disable-line no-useless-computed-key
            maxWidth: '240px'
        }
    },
    laptop: {
        width: '80%',
        margin: '0 auto',
        display: 'block',
        gridArea: 'b',
        ['@media (min-width:768px)']: { // eslint-disable-line no-useless-computed-key
            gridArea: '2 / 3 / 3 / 5',
            marginLeft: 'unset',
            minWidth: '500px',
            maxWidth: '1000px',
        }
    },
    footer: {
        gridArea: 'f',
    },
    getStarted: {
        width: 236,
        marginTop: 36,
    },
    tryDemo: {
        width: 236,
        marginTop: 16,
        borderRadius: 8,
        padding: 11,
        borderColor: 'rgba(255, 255, 255, 0.12)',
        letterSpacing: 1.25,
        fontWeight: 700,
    },
};

export const useStyles = makeStyles(styles, { name: 'Welcome' });

'''
'''--- src/ui/components/general/ConnectWallet/ChooseWallet/ChooseWallet.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    header: {
        fontSize: 20,
        color: 'rgba(0, 0, 0, 0.87)',
        margin: 0,
    },
    description: {
        color: 'rgba(0, 0, 0, 0.6)',
        fontSize: 14,
        margin: 0,
        marginTop: 20,
    },
    icons: {
        display: 'flex',
        justifyContent: 'center',
        marginTop: 24,
    },
    footer: {
        display: 'flex',
        justifyContent: 'flex-end',
        marginTop: 24,
    },
    cancel: {
        color: 'rgba(0, 0, 0, 0.6)',
        letterSpacing: 1.25,
        padding: 0,
        fontSize: 12,
        // marginRight: 24,
        fontWeight: 700,
    },
};

export const useStyles = makeStyles(styles, { name: 'ChooseWallet' });

'''
'''--- src/ui/components/general/ConnectWallet/ConnectLedger/ConnectLedger.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = (theme) => ({
    header: {
        fontSize: 20,
        color: 'rgba(0, 0, 0, 0.87)',
        margin: 0,
    },
    description: {
        color: 'rgba(0, 0, 0, 0.6)',
        fontSize: 14,
        margin: 0,
        marginTop: 20,
    },
    icons: {
        display: 'flex',
        justifyContent: 'center',
        marginTop: 24,
    },
    supportError: {
        margin: 0,
        marginTop: 24,
    },
    linkToCanIUse: {
        color: theme.palette.primary.main,
    },
    footer: {
        display: 'flex',
        justifyContent: 'flex-end',
        marginTop: 24,
    },
    cancel: {
        color: 'rgba(0, 0, 0, 0.6)',
        letterSpacing: 1.25,
        padding: 0,
        fontSize: 12,
        // marginRight: 24,
        fontWeight: 700,
    },
});

export const useStyles = makeStyles(styles, { name: 'ConnectLedger' });

'''
'''--- src/ui/components/general/ConnectWallet/ConnectLedger/getWebHIDSupportStatus.js ---
export const getWebHIDSupportStatus = () => typeof navigator.hid === 'object';

'''
'''--- src/ui/components/general/ConnectWallet/ConnectWallet.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    modal: {
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
    },
    container: {
        width: 380,
        display: 'flex',
        flexDirection: 'column',
        outline: 'none',
        borderRadius: 8,
    },
    wrapper: {
        margin: '24px 24px 16px 24px',
        height: '100%',
        display: 'flex',
        flexDirection: 'column',
    },
};

export const useStyles = makeStyles(styles, { name: 'ConnectWallet' });

'''
'''--- src/ui/components/general/ConnectWallet/general/Icon/Icon.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        margin: '0 10px',
    },
    iconWrapper: {
        width: '96px',
        height: '96px',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        border: '1px solid rgba(0, 0, 0, 0.14)',
        borderRadius: '8px',
    },
    // We have a bug with JSS and Material UI on the prod - this class embedding into 'head' before
    // MaterialUi-root general icon class
    icon: {
        height: '56px!important',
        width: '56px!important',
        fill: 'rgba(0, 0, 0, 0.87)!important'
    },
};

export const useStyles = makeStyles(styles, { order: 1, name: 'Icon' });

'''
'''--- src/ui/components/general/ContentSeparator/ContentSeparator.styles.js ---
import { makeStyles } from '@material-ui/core';
import * as R from 'ramda';

const resolveCSSPropValue = (value) => (props) => R.propOr(null, value, props);
const styles = {
    divider: {
        backgroundColor: R.curry(resolveCSSPropValue)('bg'),
        opacity: 0.12,
        margin: R.curry(resolveCSSPropValue)('margin'),
        height: R.curry(resolveCSSPropValue)('height'),
        width: '100%',
    },
};

export const useStyles = makeStyles(styles, { name: 'ContentSeparator' });

'''
'''--- src/ui/components/general/EmojiIcon/EmojiIcon.styles.js ---
import { makeStyles } from '@material-ui/core';
import * as R from 'ramda';

const resolveCSSPropValue = (value) => (props) => R.propOr(null, value, props);
const styles = {
    main: {
        display: 'flex',
        lineHeight: '80px',
        width: '100%',
        fontSize: R.curry(resolveCSSPropValue)('size'),
        textAlign: R.curry(resolveCSSPropValue)('position'),
    },
};

export const useStyles = makeStyles(styles, { name: 'EmojiIcon' });

'''
'''--- src/ui/components/general/Footer/Footer.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        width: '100%',
        height: '52px',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: ({ variant }) => (variant === 'dark' ? '#000000' : 'transparent'),
    },
    text: {
        fontSize: '12px',
        fontWeight: 500,
        lineHeight: 1.33,
        letterSpacing: '0.4px',
        color: ({ variant }) => (variant === 'dark' ? '#ffffff99' : '#00000099'),
    },
};

export const useStyles = makeStyles(styles, { name: 'Footer' });

'''
'''--- src/ui/components/general/Headline/Headline.styles.js ---
import { makeStyles } from '@material-ui/core';
import * as R from 'ramda';

const resolveCSSPropValue = (value) => (props) => R.propOr(null, value, props);

const styles = {
    main: {
        margin: 0,
        fontWeight: 900,
        lineHeight: 'normal',
        textAlign: R.curry(resolveCSSPropValue)('textAlign'),
    },
    is1: {
        fontSize: 34,
    },
    is3: {
        fontSize: 20,
    },
};

export const useStyles = makeStyles(styles, { name: 'Headline' });

'''
'''--- src/ui/config/emoji.js ---
export const emoji = {
    handRaised: '\u{1F64B}\u{200D}\u{2642}\u{FE0F}',
    foxMuzzle: '🦊',
};

'''
'''--- src/ui/config/routes.js ---
import qs from 'query-string';

export const routes = {
    // Technical
    root: '/',
    redirectFromWallet: '/redirect-from-wallet',
    // Pages
    welcome: '/welcome',
    getStarted: '/get-started',
    createMultisafe: '/create-multisafe',
    loadMultisafe: '/load-multisafe',
    dashboard: '/multisafe/:multisafeId/dashboard',
    history: '/multisafe/:multisafeId/history',
    members: '/multisafe/:multisafeId/members',
    remove: '/multisafe/:multisafeId/remove',
    disconnect: '/multisafe/:multisafeId/disconnect',
    nonFungibleTokens: '/multisafe/:multisafeId/nonFungibleTokens',
    safeEdit: '/multisafe/:multisafeId/edit-safe'
};

export const getRoute = {
    dashboard: (multisafeId) => `/multisafe/${multisafeId}/dashboard`,
    history: (multisafeId) => `/multisafe/${multisafeId}/history`,
    members: (multisafeId) => `/multisafe/${multisafeId}/members`,
    nonFungibleTokens: (multisafeId) => `/multisafe/${multisafeId}/nonFungibleTokens`,
    callbackUrl: (params) => `${window.location.origin}/redirect-from-wallet?${qs.stringify(params)}`,
    remove: (multisafeId) => `/multisafe/${multisafeId}/remove`,
    disconnect: (multisafeId) => `/multisafe/${multisafeId}/disconnect`,
    safeEdit: (multisafeId) => `/multisafe/${multisafeId}/edit-safe`,
};

'''
'''--- src/ui/config/theme.js ---
import { unstable_createMuiStrictModeTheme as createMuiTheme } from '@material-ui/core';

export const theme = createMuiTheme({
    palette: {
        primary: {
            main: '#00c08b',
            light: '#01d59c',
        },
    },
    colors: {
        textGrey: 'rgba(0, 0, 0, 0.6)',
        dashboardGrey: '#989898',
        dashboardHoverBgGrey: '#ffffff28',
        dividerOnWhite: '#dfdfdf',
        red: '#e40029',
    },
    overrides: {
        MuiIconButton: {
            root: {
                transition: 'none',
                '&:hover': {
                    backgroundColor: 'inherit',
                }
            }
        },
        MuiButton: {
            containedPrimary: {
                color: 'white',
                boxShadow: '0 12px 24px 0 #00c08b3d',
                padding: 16,
                borderRadius: 8,
                fontWeight: 700,
                letterSpacing: '1.25px',
                lineHeight: 1.14,
            },
        },
    },
});

'''
'''--- src/ui/providers/Initializer/Loader/Loader.styles.js ---
import { makeStyles } from '@material-ui/core';

const styles = {
    container: {
        height: '100vh',
        width: '100vw',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        position: 'fixed',
        top: 0,
        left: 0,
    },
};

export const useStyles = makeStyles(styles, { name: 'Loader' });

'''
'''--- src/utils/debounce.js ---
export const debounce = (inner, ms = 0) => {
    let timeout = null;
    let resolves = [];

    return (...args) => {
    // Run the function after a certain amount of time
        clearTimeout(timeout);
        timeout = setTimeout(() => {
            // Get the result of the inner function, then apply it to the resolve function of
            // each promise that has been created since the last time the inner function was run
            const result = inner(...args);
            resolves.forEach((r) => r(result));
            resolves = [];
        }, ms);

        return new Promise((r) => resolves.push(r));
    };
};

'''
'''--- src/utils/format.js ---
import Big from 'big.js';
import BN from 'bn.js';
import { utils } from 'near-api-js';
import * as R from 'ramda';

// Space 2 snake case
export const spaceToSnake = (str) => R.compose(R.join('_'), R.split(' '), R.trim, R.toLower)(str);
export const formatNearBalance = (balance) => `${utils.format.formatNearAmount(balance, 3)} NEAR`;
export const formatOtherBalance = ({tokenBalance, decimals, symbol}) => `${tokenBalance* 10**-decimals} ${symbol}`;
export const formatOtherAmountHumanReadable = ({tokenBalance, decimals}) => `${tokenBalance* 10**-decimals}`;

// Convert human readable amount to internal indivisible units
export const parseOtherAmount = ({decimals = 18}, value) => value && Big(value).times(Big(10).pow(decimals)).toFixed();

export const formatTGasValue = (tGas) => new BN(tGas * 10 ** 12).toString();

'''
'''--- src/utils/getMultisafeAccountId.js ---
export const getMultisafeAccountId = (name) => `${name}`;

'''
'''--- src/utils/isAccountExist.js ---
import { Account } from 'near-api-js';

import { config } from '../near/config';

export const isAccountExist = async ({ state, near, accountId }) => {
    if (!accountId) return false;

    const connection = near ? near.connection : state.general.entities.near.connection;

    try {
        const { code_hash } = await new Account(connection, accountId).state();
    
        if (config.multisafeContractHashes.includes(code_hash)) return true;
    
    } catch (e) {
        return false;
    }
    return null;
};

'''
'''--- src/utils/isValidNearAccount.js ---
import * as R from 'ramda';

import { config } from '../near/config';

export const patterns = {
    accountId: /^(([a-z\d]+[\-_])*[a-z\d]+\.)*([a-z\d]+[\-_])*[a-z\d]+$/g,
    createMultisafeAmount: /^([5-9]|0?[1-9][0-9]+)$/g,
    amount: /^(0|[1-9]\d*)?(\.\d+)?(?<=\d)$/g
};

export const isImplicitAccount = (accountId) =>
    accountId && accountId.length === 64 && !accountId.includes('.');

const isValidNearAccount = async (account) => {
    const response = await fetch(config.nodeUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(config.endpoint.setParams({ account_id: account })),
    });
    const result = await response.json();
    return R.has('result', result);
};

export default isValidNearAccount;

'''
'''--- src/utils/listLikelyAssets.js ---
import { config } from '../near/config';

export async function listLikelyTokens(accountId) {
    const requestOptions = {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
    };
    const response = await fetch(`${config.helperUrl}/account/${accountId}/likelyTokens`, requestOptions);
    return response.json();
}

export async function listLikelyNfts(accountId) {
    const requestOptions = {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
    };
    const response = await fetch(`${config.helperUrl}/account/${accountId}/likelyNFTs`, requestOptions);
    return response.json();
}

'''
'''--- src/utils/multiSegRequestActions.js ---

import CallMade from '@material-ui/icons/CallMade';
import Description from '@material-ui/icons/Description';
import Lock from '@material-ui/icons/Lock';
import Person from '@material-ui/icons/Person';
import PersonAdd from '@material-ui/icons/PersonAdd';
import PersonOutline from '@material-ui/icons/PersonOutline';
import PlaylistAddCheckIcon from '@material-ui/icons/PlaylistAddCheck';
import Security from '@material-ui/icons/Security';
import Send from '@material-ui/icons/Send';

// available actions are referenced from:
// https://github.com/near/core-contracts/tree/master/multisig2

export const MULT_SIG_REQUEST_ACTIONS = {
    Transfer: {
        label: 'Transfer Tokens',
        icon: CallMade,
    },
    CreateAccount: {
        label: 'Create Account',
        icon: Person,
    },
    DeployContract: {
        label: 'Deploy Contract',
        icon: Description,
    },
    AddMember: {
        label: 'Add Member',
        icon: PersonAdd, 
    },
    DeleteMember: {
        label: 'Remove Member',
        icon: PersonOutline,
    },
    AddKey: {
        label: 'Add Key',
        icon: Security,
    },
    FunctionCall: {
        label: 'Function Call',
        icon: Send,
    },
    SetNumConfirmations: {
        label: 'Set Number of Confirmations',
        icon: PlaylistAddCheckIcon,
    },
    SetActiveRequestsLimit: {
        label: 'Set Active Request Limit',
        icon: Lock,
    },
};

'''
'''--- src/utils/validation/CreateMultisafePage.js ---
import * as yup from 'yup';

import { config } from '../../near/config';
import isValidNearAccount, { patterns } from '../isValidNearAccount';

const requiredMessageType = {
    name: 'Please enter multisafe name',
    multisafeId: 'Please enter multisafe ID',
    members: 'Members needed',
    account_id: 'Please enter a member\'s address',
    num_confirmations: 'Please select desired number of confirmations',
    amount: 'Please enter multisafe budget',
};
const validationMessageType = {
    name: 'Name must be at least 4 characters long',
    multisafeId: 'Multisafe ID must be at least 1 character long',
    members: 'At least 1 member must be present',
    account_id: 'The account ID must include a Top Level Account such as .near or contain exactly 64 characters.',
    account_id_too_short: 'Account ID must be greater than 1 character',
    account_id_too_long: 'Account ID must be shorter than 64 characters',
    num_confirmations: '',
    amount: 'Enter a valid amount. Minimum is 5 NEAR',
};

export const createMultisafeSchema = yup.object().shape({
    name: yup.string().required(requiredMessageType.name),
    multisafeId: yup.string().required(requiredMessageType.multisafeId)
        .test({
            message: 'Account already exists.',
            test: async (multisafeId) => {
                const response = await isValidNearAccount(`${multisafeId}.multisafe.${config.networkId}`);
                return !response;
            },
        }),
    members: yup
        .array()
        .of(
            yup.object().shape({
                account_id: yup
                    .string()
                    .required(requiredMessageType.account_id)
                    .matches(patterns.accountId, validationMessageType.account_id)
                    .min(2, validationMessageType.account_id_too_short)
                    .max(64, validationMessageType.account_id_too_long)
                    .test({
                        message: 'Oops! The user does not exist :(',
                        test: async (e) => {
                            return isValidNearAccount(e);
                        },
                    }),
            }),
        )
        .required(requiredMessageType.members)
        .min(1, validationMessageType.members),
    num_confirmations: yup.string().required(requiredMessageType.num_confirmations),
    amount: yup
        .string()
        .required(requiredMessageType.amount)
        .matches(patterns.createMultisafeAmount, validationMessageType.amount),
});

'''
'''--- src/utils/validation/EditMembersPage.js ---
import * as yup from 'yup';

import isValidNearAccount, { patterns } from '../isValidNearAccount';

const requiredMessageType = {
    name: 'Please enter a multisafe name',
    multisafeId: 'Please enter a multisafe ID',
    members: 'Members needed',
    account_id: 'Please enter a member\'s address',
    num_confirmations: 'Please select desired number of confirmations',
    amount: 'Please enter a multisafe budget',
};
const validationMessageType = {
    name: 'Name must be at least 4 characters long',
    multisafeId: 'Multisafe ID must be at least 1 character long',
    members: 'At least 1 member must be present',
    account_id: 'The account ID must include a Top Level Account such as .near or contain exactly 64 characters.',
    account_id_too_short: 'Account ID must be greater than 1 character',
    account_id_too_long: 'Account ID must be shorter than 64 characters',
    num_confirmations: '',
    amount: 'Enter a valid amount. Minimum is 5 NEAR',
};

export const EditMembersPage = yup.object().shape({
    members: yup
        .array()
        .of(
            yup.object().shape({
                account_id: yup
                    .string()
                    .required(requiredMessageType.account_id)
                    .matches(patterns.accountId, validationMessageType.account_id)
                    .min(2, validationMessageType.account_id_too_short)
                    .max(64, validationMessageType.account_id_too_long)
                    .test({
                        message: 'Oops! The user does not exist :(',
                        test: async (e) => {
                            const res = await isValidNearAccount(e);
                            return res;
                        },
                    }),
            }),
        )
        .required(requiredMessageType.members)
        .min(1, validationMessageType.members),
});

export const EditConfirmationsPage = yup.object().shape({
    num_confirmations: yup.string().required(requiredMessageType.num_confirmations),
});

export const EditSafeSchema = yup.object().shape({
    name: yup.string().required(requiredMessageType.name),
    members: yup
        .array()
        .of(
            yup.object().shape({
                account_id: yup
                    .string()
                    .required(requiredMessageType.account_id)
                    .matches(patterns.accountId, validationMessageType.account_id)
                    .min(2, validationMessageType.account_id_too_short)
                    .max(64, validationMessageType.account_id_too_long)
                    .test({
                        message: 'Oops! The user does not exist :(',
                        test: async (e) => {
                            const res = await isValidNearAccount(e);
                            return res;
                        },
                    }),
            }),
        )
        .required(requiredMessageType.members)
        .min(1, validationMessageType.members),
    num_confirmations: yup.string().required(requiredMessageType.num_confirmations)
});

'''
'''--- src/utils/validation/SendFundsModal.js ---
import * as yup from 'yup';

import { patterns } from '../isValidNearAccount';

const requiredMessageType = {
    recipientId: 'Please enter a valid recipient address',
    amount: 'Please enter a valid amount to send',
};

const validationMessageType = {
    account_id_too_short: 'Account ID must be greater than 1 character',
    account_id_too_long: 'Account ID must be shorter than 64 characters',
};

export const sendFundsSchema = yup.object().shape({
    recipientId: yup.string().required(requiredMessageType.recipientId)
        .matches(patterns.accountId, requiredMessageType.recipientId)
        .min(2, validationMessageType.account_id_too_short)
        .max(64, validationMessageType.account_id_too_long),
    amount: yup.string()
        .required(requiredMessageType.amount)
        .matches(patterns.amount, requiredMessageType.amount)
});

export const transferNFTSchema = yup.object().shape({
    recipientId: yup.string()
        .required(requiredMessageType.recipientId)
        .matches(patterns.accountId, requiredMessageType.recipientId)
        .min(2, validationMessageType.account_id_too_short)
        .max(64, validationMessageType.account_id_too_long),
});

'''
'''--- src/utils/validation/makeFunctionCallModal.js ---
import * as yup from 'yup';

const requiredMessageType = {
    smartContractAddress: 'Please enter a valid smart contract address',
    methodName: 'Please enter a valid method name',
    args: 'Please provide arguments in JSON format',
    deposit: 'Please enter a valid deposit (minimum 1)',
    tGas: 'Please enter a valid tGas (minimum 150)'
};

export const makeFunctionCallSchema = yup.object().shape({
    smartContractAddress: yup.string().required(requiredMessageType.smartContractAddress),
    methodName: yup.string().required(requiredMessageType.methodName),
    args: yup.string().required(requiredMessageType.args),
    deposit: yup.number().required(requiredMessageType.deposit),
    tGas: yup.number().required(requiredMessageType.tGas)
});

'''