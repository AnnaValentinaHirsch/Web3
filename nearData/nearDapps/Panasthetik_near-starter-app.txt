*GitHub Repository "Panasthetik/near-starter-app"*

'''--- README.md ---
# near-starter-app
A simple starter template for developers on the Near Protocol, made with Rust, WASM and React.

Published as a three-part tutorial in Coinmonks on Medium:

# Part 1:

https://medium.com/coinmonks/an-intro-to-near-dapp-development-with-rust-wasm-parcel-and-react-part-1-e500a3abc597

# Part 2:

https://medium.com/coinmonks/an-intro-to-near-dapp-development-with-rust-wasm-parcel-and-react-part-2-6bd3a071b74e

# Part 3:
https://medium.com/coinmonks/an-intro-to-near-dapp-development-with-rust-wasm-parcel-and-react-part-3-6e4782dce459

'''
'''--- contract/Cargo.toml ---
[package]
name = "near-starter-app"
version = "0.1.0"
authors = ["NEAR Friend <friend@example.com>"]
edition = "2018"
# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0-pre.4"
hex = "0.4.3"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true
'''
'''--- contract/build.bat ---
cargo build --target wasm32-unknown-unknown --release
copy target\wasm32-unknown-unknown\release\*.wasm res
'''
'''--- contract/build.sh ---
#!/bin/bash
set -e

RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release
cp target/wasm32-unknown-unknown/release/*.wasm ./res/

'''
'''--- contract/src/lib.rs ---
mod models;
mod utils;

use std::convert::TryInto;

use crate::{
    utils::{
        AccountId,
    },
    models::{
        Event
    }
};

use near_sdk::{borsh::{self, BorshDeserialize, BorshSerialize}};
#[allow(unused_imports)]
use near_sdk::{env, PromiseIndex, near_bindgen};
near_sdk::setup_alloc!();

#[near_bindgen]
#[derive(Clone, Default, BorshDeserialize, BorshSerialize)]

pub struct Contract {
    owner: AccountId,
    events: Vec<Event>,
}

#[near_bindgen]
impl Contract{
    #[init]
    pub fn new(
        owner: AccountId,
    ) -> Self{
        let events: Vec<Event> = Vec::new();

        Contract{
            owner,
            events
        }
    }

    pub fn add_event(&mut self, title: String, estimated_budget: u128, description: String) {
        
        let id = self.events.len() as i32;
        
        self.events.push(Event::new(
            id,
            title,
            estimated_budget,
            description
        ));

        env::log("Added a new event!".as_bytes());
    }

    pub fn list_events(&self) -> Vec<Event> {
        let events = &self.events;

       return events.to_vec();
    }

    pub fn event_count(&mut self) -> usize {
        return self.events.len();
    }

    pub fn add_vote(&mut self, id:usize){
        let event: &mut Event = self.events.get_mut(id).unwrap();
        let voter = env::predecessor_account_id();

        event.total_votes = event.total_votes + 1;
        env::log("Vote submitted successfully for this event!".as_bytes());
        event.votes.push(voter.to_string());
        
    }

    pub fn get_total_votes(&mut self, id:usize) -> u64 {
        let event: &mut Event = self.events.get_mut(id).unwrap();
        return event.total_votes.try_into().unwrap();

    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::test_utils::VMContextBuilder;
    use near_sdk::{testing_env, AccountId};

    fn get_context(predecessor: AccountId) -> VMContextBuilder {
        let mut builder = VMContextBuilder::new();
        builder.predecessor_account_id(predecessor);
        builder
    }

    #[test]
    fn add_project() {

        let alice = AccountId::new_unchecked("alice.testnet".to_string());
        // Set up the testing context and unit test environment
        let context = get_context(alice.clone());

        testing_env!(context.build());

        let mut contract = Contract::new(alice.to_string());

        contract.add_event("New Contemporary Art Show".to_string(), 200, "Amazing selection of 
            international artists from all over the world".to_string());

        let result = contract.event_count();

        assert_eq!(result, 1);
    }

    #[test]
    fn add_voter() {

        let alice = AccountId::new_unchecked("alice.testnet".to_string());
        // Set up the testing context and unit test environment
        let context = get_context(alice.clone());

        testing_env!(context.build());

        let mut contract = Contract::new(alice.to_string());

        contract.add_event("New Contemporary Art Show".to_string(), 200, "Amazing selection of 
        international artists from all over the world".to_string());

        contract.add_vote(0);

        let result = contract.get_total_votes(0);

        assert_eq!(result, 1);

    }
}
'''
'''--- contract/src/models.rs ---
  
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
#[allow(unused_imports)]
use near_sdk::{env, near_bindgen};
use near_sdk::serde::{Deserialize, Serialize};

use crate::utils::{
    AccountId,
    Timestamp
};

#[derive(Clone, Serialize, Deserialize, BorshDeserialize, BorshSerialize)]
#[serde(crate = "near_sdk::serde")]

pub struct Event {
    id: i32,
  pub creator: AccountId,
    created_at: Timestamp,
    title: String,
    estimated_budget: u128,
   pub total_votes: i64,
    description: String,
   pub votes: Vec<String>
}

impl Event {
    pub fn new(id:i32, title: String, estimated_budget:u128, description: String) -> Self {
        
        Event {
            id,
            creator: env::signer_account_id().to_string(),
            created_at: env::block_timestamp(),
            title,
            estimated_budget,
            total_votes : 0,
            description,
            votes: vec![],
        }
    }
}

'''
'''--- contract/src/utils.rs ---
  
use near_sdk::{
    env,
    PromiseResult,
};

pub type AccountId = String;

pub type Timestamp = u64;

pub fn assert_self() {
    let caller = env::predecessor_account_id();
    let current = env::current_account_id();

    assert_eq!(caller, current, "Only this contract may call itself");
}

pub fn assert_single_promise_success(){
    assert_eq!(
        env::promise_results_count(),
        1,
        "Expected exactly one promise result",
    );

    match env::promise_result(0) {
        PromiseResult::Successful(_) => return,
        _ => panic!("Expected PromiseStatus to be successful"),
    };
}
'''
'''--- contract/test.sh ---
#!/bin/bash
set -e

cargo test -- --nocapture
'''
'''--- package.json ---
{
    "name": "near-starter-app",
    "version": "0.1.0",
    "license": "UNLICENSED",
    "scripts": {
      "start": "parcel src/index.html",
      "build": "react-scripts build"
    },
    "devDependencies": {
      "@parcel/utils": "^2.3.2",
      "near-cli": "3.2.0",
      "parcel": "^2.3.2",
      "process": "^0.11.10"
    },
    "dependencies": {
      "near-api-js": "0.44.2",
      "react": "~17.0.1",
      "react-dom": "~17.0.1"
    }
  }
'''
'''--- src/App.js ---
import 'regenerator-runtime/runtime'
import { useEffect, useState } from 'react'
import ListEvents from './components/ListEvents.js'
import CreateEvent from './components/CreateEvents.js'
import React from 'react'
import { login, logout } from './utils'
import './global.css'

import getConfig from './config'

const { networkId } = getConfig(process.env.NODE_ENV || 'development')

export default function App() {
  // use React Hooks to store greeting in component state
  const [events, setEvents] = useState([])
  const [toggleModal, setToggleModal] = useState(false)

  function addProject() {
    setToggleModal(!toggleModal)
  }

  // The useEffect hook can be used to fire side-effects during render
  // Learn more: https://reactjs.org/docs/hooks-intro.html
  useEffect(
    () => {
      // in this case, we only care to query the contract when signed in
      if (window.walletConnection.isSignedIn()) {
        // window.contract is set by initContract in index.js
        window.contract.list_events().then((eventprojects) => {
          const eventList = [...eventprojects]
          setEvents(eventList)
        })
      }
    },

    // The second argument to useEffect tells React when to re-run the effect
    // Use an empty array to specify "only run on first render"
    // This works because signing into NEAR Wallet reloads the page
    // [crowdfunds],
    [],
  )

  // if not signed in, return early with sign-in prompt
  if (!window.walletConnection.isSignedIn()) {
    return (
      <main className='signin'>
        <h1>Welcome to Awesome Events</h1>
        <p style={{ textAlign: 'center' }}>
          Click the button below to sign in:
        </p>
        <p style={{ textAlign: 'center', marginTop: '2.5em' }}>
          <button onClick={login}>Sign in</button>
        </p>
      </main>
    )
  }

  return (
    // use React Fragment, <>, to avoid wrapping elements in unnecessary divs
    <>
      <header>
        <div ></div>
        <button className="link" style={{ float: 'right' }} onClick={logout}>
          Sign out <span className="id">{window.accountId}</span>
        </button>
      </header>
      <button onClick={addProject}>Add an event</button>
      <main>
        <CreateEvent toggleModal={toggleModal} />
        <section className='events'>
          {events.map((project, id) => {
            return (
              <div key={id}>
                <ListEvents project={project} />
              </div>
            )
          })}
        </section>
      </main>
    </>
  )
}
'''
'''--- src/components/CreateEvents.js ---
import React, { useState } from 'react'
    function CreateEvent({toggleModal}) {
      const [title, setTitle] = useState('')
      const [description, setDescription] = useState('')
      const [target, setTarget] = useState(0)
      const [showNotification, setShowNotification] = useState(false)
      const handleSubmit = (event) => {
        event.preventDefault()
        window.contract.add_event({title:title, estimated_budget:target * 1, description:description})
        setShowNotification(!showNotification)
        alert(`event info: ${title} ${target} ${description}`)
      }
    console.log(`its ${toggleModal}`);
      return (
        <div>
          {toggleModal == true && (
            <div className='addevent'>
              <form onSubmit={handleSubmit}>
                <label>
                  Enter event title:
                  <input
                    type="text"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                  />
                </label>

                <label>
                  Enter budget:
                  <input
                    type="number"
                    value={target}
                    onChange={(e) => setTarget(e.target.value)}
                  />
                </label>

                <label>
                  Enter event description:
                  <input
                    type="text"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                  />
                </label>
                <input type="submit" className='submit' />
              </form>
            </div>
          )}
          
          {showNotification && <Notification />}
        </div>
        
      )
    }
    function Notification() {
      return (
        <aside>
          <footer>
            <div>✔ Succeeded </div> 
            <div>Added new event just now</div>
          </footer>
        </aside>
      )
    }
    export default CreateEvent
'''
'''--- src/components/ListEvents.js ---

import React from 'react'

function ListEvents({ project }) {

  return (
    <div className="project">
      <h2>{project.title}</h2>{' '}
      <span className="creator">{project.creator}</span>
      <h3>description:</h3>
      <p>{project.description}</p>
      <h4>target: {project.estimated_budget} NEAR</h4>
      <h4>Votes: {project.total_votes}</h4>
      <button
        onClick={() => {
          window.contract.add_vote({ id: project.id })
        }}
      >
        Vote
      </button>
    </div>
  )
}

export default ListEvents
'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-starter-dapp.myaccount.testnet'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig
'''
'''--- src/global.css ---
/* @import url('https://fonts.googleapis.com/css2?family=Inconsolata&display=swap');
* {
  box-sizing: border-box;
} */

html {
    --bg: #1f2028;
    --fg: #ffffff;
    --gray: #555;
    --light-gray: #ccc;
    --shadow: #e6e6e6;
    --success: rgb(90, 206, 132);
    --primary: #a9adc1;
    --secondary: #0072CE;
  
    background-color: var(--bg);
    color: var(--fg);
    font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
    font-size: calc(0.9em + 0.5vw);
    font-family: 'Inconsolata', monospace;
    line-height: 1.3;
  }
  
  body {
    margin: 0;
    padding: 1em;
  }
  .exhibition {
    background-color: #2e3039;
    padding: 2em;
    margin: 1em;
  }
  
  
  header {
    display: flex;
    justify-content: space-between;
  }
  /* .logo{
    background-image: url(assets/logo-white.svg);
    width: 70px;
    height: 70px;
  } */
  a,
  .link {
    color: var(--primary);
    text-decoration: none;
  }
  a:hover,
  a:focus,
  .link:hover,
  .link:focus {
    text-decoration: underline;
  }
  .id {
    color: #ffffff;
  }
  a:active,
  .link:active {
    color: var(--secondary);
  }
  
  button, input {
    font: inherit;
    outline: none;
  }
  
  button {
    background-color: var(--fg);
    border-radius: 5px;
    border: none;
    color: black;
    cursor: pointer;
    padding: 0.3em 0.75em;
    transition: transform 30ms;
  }
  .signin{
    text-align: center;
  }
  .submit{
    background-color: var(--fg);
    border-radius: 5px;
    border: none;
    color: black;
    cursor: pointer;
    padding: 0.3em 0.75em;
    transition: transform 30ms;
  }
  button:hover, button:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
  }
  button:active {
    box-shadow: 0 0 10em rgba(0, 0, 0, 0.1) inset;
  }
  button.link {
    background: none;
    border: none;
    box-shadow: none;
    display: inline;
  }
  [disabled] button, button[disabled] {
    box-shadow: none;
    background-color: var(--light-gray);
    color: gray;
    cursor: not-allowed;
    transform: none;
  }
  [disabled] button {
    text-indent: -900em;
    width: 2em;
    position: relative;
  }
  [disabled] button:after {
    content: " ";
    display: block;
    width: 0.8em;
    height: 0.8em;
    border-radius: 50%;
    border: 2px solid #fff;
    border-color: var(--fg) transparent var(--fg) transparent;
    animation: loader 1.2s linear infinite;
    position: absolute;
    top: 0.45em;
    right: 0.5em;
  }
  @keyframes loader {
    0% { transform: rotate(0deg) }
    100% { transform: rotate(360deg) }
  }
  
  fieldset {
    border: none;
    padding: 2em 0;
  }
  .creator{
    background-color: var(--bg);
    font-size: 0.7em;
    padding: 0.5em;
    border-radius: 5%;
  }
  .exhibitions {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
  }
  @media (max-width: 800px) {
    .exhibitions {
      flex-direction: column;
    }
  }
  
  .addexhibition {
    background-color: #2e3039;
    padding: 3em;
    margin-top: 3em;
    
  }
  
  input {
    background-color: #1f2028;
    border: none;
    border-radius: 5px 0 0 5px;
    caret-color: var(--primary);
    color: #a5adbd;
    padding: 0.25em 1em;
    margin: 0.5em;
  }
  input::selection {
    background-color: var(--secondary);
    color: #efefef;
  }
  input:focus {
    box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
  }
  
  code {
    color: var(--gray);
  }
  
  li {
    padding-bottom: 1em;
  }
  
  aside {
    animation: notify ease-in-out 10s;
    background-color: var(--shadow);
    border-radius: 5px;
    bottom: 0;
    font-size: 0.8em;
    margin: 1em;
    padding: 1em;
    position: fixed;
    transform: translateY(10em);
    right: 0;
  }
  aside footer {
    display: flex;
    font-size: 0.9em;
    justify-content: space-between;
    margin-top: 0.5em;
  }
  aside footer *:first-child {
    color: var(--success);
  }
  aside footer *:last-child {
    color: var(--gray);
  }
  @keyframes notify {
    0% { transform: translateY(10em) }
    5% { transform: translateY(0) }
    95% { transform: translateY(0) }
    100% { transform: translateY(10em) }
  }
  
  @media (prefers-color-scheme: dark) {
    html {
      --bg: #1e1e1e;
      --fg: #efefef;
      --gray: #aaa;
      --shadow: #2a2a2a;
      --light-gray: #444;
    }
    /* h1 {
      background-image: url(assets/logo-white.svg);
    } */
    input:focus {
      box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
    }
  }
'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- <meta charset="utf-8" />
    <link rel="icon" href="./assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/favicon.ico" /> -->
    <title>Events Creator App.</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
 
    <script type="module" src="./index.js"></script>
  </body>
</html>
'''
'''--- src/index.js ---
import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'
import { initContract } from './utils'

window.nearInitPromise = initContract()
  .then(() => {
    ReactDOM.render(
      <App />,
      document.querySelector('#root')
    )
  })
  .catch(console.error)
'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ["event_count"],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['add_event', 'add_vote', "list_events"],
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName)
}
'''