*GitHub Repository "evgenykuzyakov/near-open-web-frontend"*

'''--- README.md ---
<br />
<br />

<p>
<img src="https://nearprotocol.com/wp-content/themes/near-19/assets/img/logo.svg?t=1553011311" width="240">
</p>

<br />
<br />

## Template for NEAR dapps

### Features
* Create NEAR dapps with a React frontend 🐲
* We got Gulp! 💦

### Requirements
##### IMPORTANT: Make sure you have the latest version of NEAR Shell and Node Version > 10.x 
1. node and npm
2. near shell
```
npm i -g near-shell
```
3.(optional) install yarn to build
```
npm i -g yarn
```

### To run on testnet
#### Step 1: Create account for the contract and deploy the contract.
You'll now want to authorize NEAR shell on your NEAR account, which will allow NEAR Shell to deploy contracts on your NEAR account's behalf \(and spend your NEAR account balance to do so\).

Type the command `near login` which should return a url:

```bash
Please navigate to this url and follow the instructions to log in:
https://wallet.nearprotocol.com/login/?title=NEAR+Shell&public_key={publicKey}
```

From there enter in your terminal the same account ID that you authorized:

`Please enter the accountId that you logged in with: <asdfasdf>`

Once you have entered your account ID, it will display the following message:

`Missing public key for <asdfasdf> in default`
`Logged in with masternode24`

This message is not an error, it just means that it will create a public key for you.

#### Step 2:
Modify src/config.js line that sets the contractName. Set it to id from step 1.
```javascript
(function() {
    const CONTRACT_NAME = 'react-template'; /* TODO: Change this to your contract's name! */
    const DEFAULT_ENV = 'development';
    ...
})();
```

#### Step 3:
Finally, run the command in your terminal.
```
npm install && npm start
```
with yarn:
```
yarn install && yarn start
```
The server that starts is for static assets and by default serves them to localhost:3000. Navigate there in your browser to see the app running!

### Deploy
Check the scripts in the package.json, for frontend and backend both, run the command:
```bash
npm run(yarn) deploy
```

### Test
For test file src/App.test.js, it works for the template after finishing step 3 above. If smart contract and index.js change, user should change to their functions to test. The command is:
```bash
npm run(yarn) test
```

### To Explore

- `assembly/main.ts` for the contract code
- `public/index.html` for the front-end HTML
- `src/index.js` for the JavaScript front-end code and how to integrate contracts
- `src/App.js` for the first react component

'''
'''--- package.json ---
{
    "name": "near-open-web-frontend",
    "version": "0.1.0",
    "private": true,
    "dependencies": {
        "gh-pages": "^2.2.0",
        "js-cookie": "^2.2.1",
        "near-bindgen-as": "^1.2.0",
        "near-runtime-ts": "^0.5.2",
        "near-shell": "^0.20.1",
        "nearlib": "^0.21.0",
        "react": "^16.11.0",
        "react-dom": "^16.11.0",
        "react-scripts": "3.3.0",
        "react-tabs": "3.1.0"
    },
    "scripts": {
        "start": "react-scripts start",
        "build:frontend": "react-scripts build",
        "test": "react-scripts test",
        "eject": "react-scripts eject",
        "deploy:pages": "gh-pages -d build",
        "deploy": "npm run deploy:pages",
        "build": "react-scripts build"
    },
    "eslintConfig": {
        "extends": "react-app"
    },
    "browserslist": {
        "production": [
            ">0.2%",
            "not dead",
            "not op_mini all"
        ],
        "development": [
            "last 1 chrome version",
            "last 1 firefox version",
            "last 1 safari version"
        ]
    }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="favicon.ico" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Open Web Home</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->

  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "Open Web Home",
  "name": "NEAR Open Web Home",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *

'''
'''--- src/App.css ---
.App-header {
  background-image: url('https://nearprotocol.com/wp-content/uploads/2019/03/illo-developers.svg');
  min-height: 100vh;
  font-size: 1rem;
  text-align: center;
  padding:2%; 
}

.App-link {
  color: #61dafb;
}

.apps {
  background: #fff;
  text-align: left;
  margin: 3em;
}

.App-logo {
  animation: App-logo-spin infinite 20s linear;
  pointer-events: none;
}

.margin-logo {
  margin: 20px;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.profile-image {
  height: 3em;
  width: 3em;
  border-radius: 50%;
}

.profile-name {
  overflow: hidden;
  margin-left: 0.5em;
  vertical-align: middle;
}

.letter-small {
  overflow: hidden;
  height: 3em;
  line-height: 3em;
  cursor: pointer;
}

.letter-expanded {
}

.letter-expanded-header {
  background: #eee;
  overflow: hidden;
  height: 3em;
  line-height: 3em;
  cursor: pointer;
  margin: 0;
}

.letter {
  border-bottom: 1px solid #ddd;
  border-left: 1px solid #fff;
  border-right: 1px solid #fff;
  margin: 0;
}

.letter:hover {
  border-bottom: 1px solid #ccc;
  border-left: 1px solid #ccc;
  border-right: 1px solid #ccc;
  box-shadow: 0px 2px 5px rgba(64, 64, 64, .5);
}

.letter-read {
  background: #eee;
}

.letter-profile {
  white-space: nowrap;
  overflow: hidden;
}

.letter-profile-image {
  height: 2.7em;
  width: 2.7em;
  border-radius: 50%;
}

.letter-profile-name {
  overflow: hidden;
  margin-left: 0.5em;
  vertical-align: middle;
}

.letter-unread {
  font-weight: bold;
}

.letter-subject {
  overflow: hidden;
}

.letter-content {
  color: #999;
  overflow: hidden;
  font-weight: normal;
}

.letter-content-expanded {
  color: #333;
  padding: 0.5em;
}

.letter-time {
  font-size: 12px;
  white-space: nowrap;
}

.image-wrapper {
  display: flex;
  align-items: center;
  flex-direction: column;
  justify-content: center;
}

.logo {
  width: 33%;
}

p {
  color: #25282A;
  font-family: sans-serif;
}

button {
  padding: 5px;
  color: #0072CE;
  border-radius: 10px;
  border: 3px solid #0072CE;
}

button:hover {
  cursor: pointer;
  color: white;
  background: #0072CE;
} 
'''
'''--- src/App.js ---
import React, { Component } from 'react';
import nearlogo from './assets/gray_near_logo.svg';
import './App.css';
import * as nearlib from "nearlib";
import {OpenWebApp} from './openweb.js';
import {ProfileApp} from "./ProfileApp";
import {MailApp} from "./MailApp";
import { Tab, Tabs, TabList, TabPanel } from 'react-tabs';
import 'react-tabs/style/react-tabs.css';

const GAS = 2_000_000_000_000_000;
const TITLE = "Open Web Home - NEAR"

class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      login: false,
      apps: {},
      unread: 0,
    }
    this.signedInFlow = this.signedInFlow.bind(this);
    this.requestSignIn = this.requestSignIn.bind(this);
    this.requestSignOut = this.requestSignOut.bind(this);
    this.signedOutFlow = this.signedOutFlow.bind(this);
    window.nearlib = nearlib;
  }

  componentDidMount() {
    let loggedIn = window.walletAccount.isSignedIn();
    if (loggedIn) {
      this.signedInFlow();
    } else {
      this.signedOutFlow();
    }
  }

  async signedInFlow() {
    console.log("come in sign in flow")
    const accountId = await this.props.wallet.getAccountId()
    this.setState({
      login: true,
      accountId,
    })
    if (window.location.search.includes("account_id")) {
      window.location.replace(window.location.origin + window.location.pathname)
    }
    if (window.location.search.includes("all_keys")) {
      window.location.replace(window.location.origin + window.location.pathname)
    }
    // Initializing our contract APIs by contract name and configuration.

    console.log("Connecting to account...");
    const account = await new nearlib.Account(window.near.connection, accountId);
    console.log("Querying state...");
    let state = await account.state();
    console.log(state);
    if (state.code_hash !== 'CbG5c4viMES2C47pc8SYWGc4F8W4EBSzD4RLjVqTPDR6') {
      console.log("Going to deploy the code");
      // no code. Need to deploy.
      console.log("Downloading started...");
      let data = await fetch('/open_web.wasm');
      let buf = await data.arrayBuffer();
      console.log("Downloading done. Deploying contract...");
      await account.deployContract(new Uint8Array(buf));
      if (state.code_hash === '11111111111111111111111111111111') {
        console.log("Deploying done. Initializing contract...");
        // Gotta init it.
        let contract = await new nearlib.Contract(account, accountId, {
          viewMethods: [],
          // Change methods can modify the state. But you don't receive the returned value when called.
          changeMethods: ['new'],
          // Sender is the account ID to initialize transactions.
          sender: accountId
        });
        console.log(await contract.new());
      }
      console.log("Done");
    }

    const masterContract = await new nearlib.Contract(account, accountId, {
      // View methods are read only. They don't modify the state, but usually return some value.
      viewMethods: ['apps'],
      // Change methods can modify the state. But you don't receive the returned value when called.
      changeMethods: ['add_app_key', 'remove_app_key'],
      // Sender is the account ID to initialize transactions.
      sender: accountId
    });

    this.masterContract = masterContract;
    window.masterContract = masterContract;
    console.log("Fetching authorized apps...");
    console.log("Apps:", await masterContract.apps());

    console.log("Initializing local apps...");
    const apps = {
      profile: await this.initOpenWebApp('profile', accountId),
      graph: await this.initOpenWebApp('graph', accountId),
      mail: await this.initOpenWebApp('mail', accountId),
    };
    window.apps = apps;
    this.apps = apps;
    this.setState({
      apps,
    })
    console.log(apps);
  }

  async initOpenWebApp(appId, accountId) {
    console.log("Initializing app: " + appId + " ...");
    const app = await new OpenWebApp(appId, accountId, window.nearConfig);
    await app.init();
    if (!await app.ready()) {
      let pk = await app.getPublicKey();
      console.log("Authorizing app for key " + pk.toString() + " ...");
      const args = {
        public_key: [...nearlib.utils.serialize.serialize(nearlib.transactions.SCHEMA, pk)],
        app_id: appId,
      };
      await this.masterContract.add_app_key(args, GAS);
      await app.onKeyAdded();
    }
    console.log("Done");
    return app;
  }

  async requestSignIn() {
    const appTitle = 'Open Web Home';
    await this.props.wallet.requestSignIn(
      "",
      appTitle
    )
  }

  requestSignOut = () => {
    this.props.wallet.signOut();
    setTimeout(this.signedOutFlow, 500);
    console.log("after sign out", this.props.wallet.isSignedIn())
  }

  signedOutFlow = () => {
    if (window.location.search.includes("account_id")) {
      window.location.replace(window.location.origin + window.location.pathname)
    }
    this.setState({
      login: false,
    })
  }

  render() {
    document.title = (this.state.unread ? `(${this.state.unread}) ` : "") + TITLE;
    return (
      <div className="App-header">
        <div className="image-wrapper">
          <img className="logo" src={nearlogo} alt="NEAR logo" />
        </div>
        <h1>Hello{this.state.login ? ", " + this.state.accountId : "?"}</h1>
        <div>
          {this.state.login ? <button onClick={this.requestSignOut}>Log out</button>
            : <button onClick={this.requestSignIn}>Log in with NEAR</button>}
        </div>
        <br/>
        {this.state.login && (
          <div className="apps">
            <Tabs forceRenderTabPanel={true}>
              <TabList>
                <Tab>Profile</Tab>
                <Tab>Mail {this.state.unread ? `(${this.state.unread})` : ""}</Tab>
              </TabList>

              <TabPanel>
                <ProfileApp app={this.state.apps.profile}/>
              </TabPanel>
              <TabPanel>
                <MailApp app={this.state.apps.mail} onNewMail={(unread) => this.setState({unread})}/>
              </TabPanel>
            </Tabs>
          </div>
        )}
      </div>
    )
  }

}

export default App;

'''
'''--- src/App.test.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import * as nearlib from 'nearlib';
import getConfig from './config.js';

async function InitContract() {
  window.nearConfig = getConfig('development')
  console.log("nearConfig", window.nearConfig);

  // Initializing connection to the NEAR DevNet.
  window.near = await nearlib.connect(Object.assign({ deps: { keyStore: new nearlib.keyStores.BrowserLocalStorageKeyStore() } }, window.nearConfig));
  
  // Needed to access wallet login
  window.walletAccount = new nearlib.WalletAccount(window.near);
  
  // Getting the Account ID. If unauthorized yet, it's just empty string.
  window.accountId = window.walletAccount.getAccountId();

  // Initializing our contract APIs by contract name and configuration.
  window.contract = await window.near.loadContract(window.nearConfig.contractName, {
      // View methods are read only. They don't modify the state, but usually return some value.
      viewMethods: ['welcome',],
          // Change methods can modify the state. But you don't receive the returned value when called.
      changeMethods: [],
      // Sender is the account ID to initialize transactions.
      sender: window.accountId
  });
}

it('renders without crashing', () => {
  const div = document.createElement('div');
  InitContract().then(() => {
    ReactDOM.render(<App contract={window.contract} wallet={window.walletAccount}/>,
      div
    );
  })
  ReactDOM.unmountComponentAtNode(div);
});

'''
'''--- src/MailApp.js ---
import React from "react";

const RE = "Re: ";

export class MailApp extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      initialized: false,
      receiverId: "",
      subject: "",
      content: "",
      sending: false,
      profileFetchTimeoutId: null,
      profileFetchIndex: 0,
      numLetters: 0,
      unread: 0,
      expandedId: -1,
      inbox: [
        /* {
        messageId: -1,
        sender: "potato-lord",
        subject: "DOPE",
        content: "HELLO? HELLLOOOOO?",
        time: new Date().getTime() - 1000 * 42 * 60,
      }, {
        messageId: -2,
        sender: "potato-lord",
        subject: "BLABLBALBLABLALBA L BALBLABAL LBLA",
        content: "HELLO? HELLLOOOOO?HELLO? HELLLOOOOO?HELLO? HELLLOOOOO?HELLO? HELLLOOOOO?HELLO? HELLLOOOOO?",
        time: new Date().getTime() - 1000 * 23 * 60 * 60,
      }, {
        messageId: -4,
        sender: "sheeet",
        subject: "Self mailing?",
        content: "Best idea ever!",
        time: new Date().getTime() - 2 * 1000 * 24 * 60 * 60,
      }
      */],
    }
    this.profileCache = {};
  }

  modifyLetter(letter, messageId) {
    if (messageId === undefined) {
      if (!letter) {
        return;
      }
      messageId = letter.messageId;
    }
    const inbox = this.state.inbox.filter((a) => a.messageId != messageId);
    if (letter) {
      inbox.push(letter);
    }
    inbox.sort((a, b) => b.time - a.time);
    const unread = inbox.reduce((acc, letter) => acc + (letter.read ? 0: 1), 0);
    this.setState({
      inbox,
      unread,
    });
    this.props.onNewMail(unread);
  }

  async init() {
    console.log("init");
    this.setState({
      initialized: true,
    });
    this.props.app.get('numLetters').then((num) => {
      num = num || 0;
      this.setState({
        numLetters: num,
      })
      for (let i = Math.max(0, num - 10); i < num; ++i) {
        this.props.app.get('letter_' + i).then((letter) => this.modifyLetter(letter));
      }
      this.fetchMessages();
    });
  }

  componentDidUpdate(prevProps) {
    if (this.props.app && !this.state.initialized) {
      this.init();
    }
  }

  async fetchProfile(accountId) {
    if (accountId in this.profileCache) {
      return this.profileCache[accountId];
    } else {
      console.log("Fetching profile for " + accountId);
      try {
        const values = await Promise.all([
          this.props.app.getFrom(accountId, 'displayName', 'profile'),
          this.props.app.getFrom(accountId, 'profileUrl', 'profile'),
        ]);
        this.profileCache[accountId] = {
          displayName: values[0] || "",
          profileUrl: values[1],
        };
      } catch (e) {
        this.profileCache[accountId] = false;
      }
      return this.profileCache[accountId];
    }
  }

  handleChange(key, value) {
    const stateChange = {
      [key]: value,
    };
    if (key === 'receiverId') {
      const profileFetchIndex = this.state.profileFetchIndex + 1;
      stateChange.profileFetchIndex = profileFetchIndex;
      stateChange.profile = null;
      if (value) {
        stateChange.profileLoading = true;
        this.fetchProfile(value).then((profile) => {
          if (this.state.profileFetchIndex !== profileFetchIndex) {
            return;
          }
          this.setState({
            profileLoading: false,
            profile,
          });
        });
      } else {
        stateChange.profileLoading = false;
      }
    }
    this.setState(stateChange);
  }

  fetchMessages() {
    if (!this.props.app) {
      return;
    }
    if (this.fetchTimeoutId) {
      clearTimeout(this.fetchTimeoutId);
      this.fetchTimeoutId = null;
    }
    console.log("Fetching messages");
    this.props.app.pullMessage().then((message) => {
      if (!message) {
        this.fetchTimeoutId = setTimeout(() => { this.fetchMessages() }, 60 * 1000);
        return;
      }
      try {
        console.log(message);
        const inner = JSON.parse(message.message);
        if (inner.type === 'mail') {
          const letter = {
            messageId: this.state.numLetters,
            sender: message.sender,
            subject: inner.subject,
            content: inner.content,
            time: Math.trunc(message.time / 1000000),
          }
          const newNumLetters = this.state.numLetters + 1;
          this.setState({
            numLetters: newNumLetters,
          });

          this.props.app.set("letter_" + letter.messageId, letter).then(() => {
            console.log("Saved the letter: ", letter);
          });
          this.props.app.set("numLetters", newNumLetters).then(() => {
              console.log("Saved the new number of letters: ", newNumLetters);
          });
          this.modifyLetter(letter);
        } else {
          console.warn("Unknown message", message);
        }
      } catch (e) {
        console.error(e);
      } finally {
        this.fetchMessages()
      }
    })
  }

  sendMail() {
    if (!this.state.profile) {
      return;
    }
    console.log("Sending mail");
    this.setState({
      sending: true,
    });
    this.props.app.sendMessage(this.state.receiverId, JSON.stringify({
      type: "mail",
      subject: this.state.subject,
      content: this.state.content,
    })).then(() => {
      this.setState({
        subject: "",
        content: "",
      })
    }).finally(() => {
      this.setState({
        sending: false,
      });
      this.fetchMessages();
    });

  }

  receiverClass() {
    if (!this.state.receiverId || this.state.profileLoading) {
      return "form-control";
    } else if (this.state.profile) {
      return "form-control is-valid";
    } else {
      return "form-control is-invalid";
    }
  }

  replyTo(letter, displayName) {
    this.handleChange("receiverId", letter.sender);
    this.setState({
      subject: (letter.subject.startsWith(RE) ? "" : RE) + letter.subject,
      content: [
        "",
        "",
        ["On", new Date(letter.time).toLocaleDateString(), displayName, "@" + letter.sender, "wrote:"].join(' '),
        ...letter.content.split(/\r?\n/).map(s => "| " + s)
      ].join("\n"),
    });
  }

  selectLetter(letter) {
    this.setState({
      expandedId: letter.messageId,
    });
    if (!letter.read) {
      letter = JSON.parse(JSON.stringify(letter));
      letter.read = true;
      this.props.app.set("letter_" + letter.messageId, letter).then(() => {
        console.log("Saved the letter: ", letter);
      });
      this.modifyLetter(letter);
    }
  }

  deleteLetter(letter) {
    this.props.app.remove("letter_" + letter.messageId).then(() => {
      console.log("Deleted the letter: ", letter);
    });
    this.modifyLetter(null, letter.messageId);
  }

  render() {
    const profile = this.state.profileLoading ? (
      <div className="col">
        <div className="spinner-grow" role="status">
          <span className="sr-only">Loading...</span>
        </div>
      </div>
    ) : this.state.profile ? (
      <div className="col">
        <img className="profile-image" src={this.state.profile.profileUrl}/>
        <span className="profile-name">{this.state.profile.displayName}</span>
      </div>
    ) : null;
    const inbox = this.props.app ?
      this.state.inbox.map((letter, i) => <Letter
          key={letter.messageId}
          fetchProfile={(a) => this.fetchProfile(a)}
          letter={letter}
          expanded={letter.messageId == this.state.expandedId}
          deleteLetter={(letter) => this.deleteLetter(letter)}
          replyTo={(letter) => this.replyTo(letter)}
          selectLetter={(letter, displayName) => this.selectLetter(letter, displayName)}/>) :
      null;
    return (
      <div>
        Inbox <button className="btn btn-sm" onClick={() => this.fetchMessages()}>🔄</button>
        <div>
          {inbox}
        </div>
        <h3>Send</h3>
        <div className="form-row">
          <div className="col">
            <div className="form-group">
              <label className="sr-only" htmlFor="toAccountId">To Account ID</label>
              <div className="input-group">
                <div className="input-group-prepend">
                  <div className="input-group-text">@</div>
                </div>
                <input type="text" className={this.receiverClass()} id="toAccountId" placeholder="To Account ID" value={this.state.receiverId} disabled={!this.props.app} onChange={(e) => this.handleChange('receiverId', e.target.value)} />
              </div>
            </div>
          </div>
          {profile}
        </div>
        <div className="form-group">
          <label className="sr-only" htmlFor="subject">Subject</label>
          <input type="text" className="form-control" id="subject" placeholder="Subject" disabled={!this.props.app} value={this.state.subject} onChange={(e) => this.handleChange('subject', e.target.value)} />
        </div>
        <div className="form-group">
          <textarea id="content" className="form-control" rows="7" disabled={!this.props.app} value={this.state.content} onChange={(e) => this.handleChange('content', e.target.value)} />
        </div>
        <div className="form-group">
          <button className="form-control form-control-lg btn btn-primary" disabled={!this.state.profile || this.state.sending} onClick={() => this.sendMail()}>Send</button>
        </div>
      </div>
    )
  }
}

export class Letter extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      profile: {
        profileUrl: null,
        displayName: '@' + props.letter.sender,
      },
    };
  }

  componentDidMount() {
    this.props.fetchProfile(this.props.letter.sender).then((profile) => {
      this.setState({
        profile,
      })
    });
  }

  onClick() {
    this.props.selectLetter(this.props.letter);
  }

  render() {
    const profile = (
      <div className="col-3 letter-profile">
        <img className="letter-profile-image" src={this.state.profile.profileUrl}/>
        <span className="letter-profile-name">{this.state.profile.displayName}</span>
      </div>
    );
    const subject = (
      <div className="col">
        <div className="letter-subject">{this.props.letter.subject}</div>
      </div>
    );
    const time = (
      <div className="col-1">
        <div className="letter-time">{timeFormat(this.props.letter.time)}</div>
      </div>
    );
    if (this.props.expanded) {
      return (
        <div className="letter letter-expanded">
          <div className="row letter-expanded-header" onClick={() => this.onClick()}>
            {profile}
            {subject}
            {time}
          </div>
          <div className="letter-content-expanded">
            <pre>{this.props.letter.content}</pre>
            <div className="row">
              <div className="col">
                <button className="btn btn-primary" onClick={() => this.props.replyTo(this.props.letter, this.state.profile.displayName)}>Reply</button>
              </div>
              <div className="col">
                <button className="btn btn-danger float-right" onClick={() => this.props.deleteLetter(this.props.letter)}>DELETE THIS!</button>
              </div>
            </div>
          </div>
        </div>
      );
    } else {
      return (
        <div className={"row letter letter-small" + (this.props.letter.read ? " letter-read" : " letter-unread")} onClick={() => this.onClick()}>
          {profile}
          {subject}
          <div className="col">
            <div className="letter-content">{this.props.letter.content}</div>
          </div>
          {time}
        </div>
      );
    }
  }
}

function timeFormat(t) {
  const d = new Date(t);
  const now = new Date();
  if (now.getDate() === d.getDate()) {
    const hour = d.getHours() % 12;
    const minute = d.getMinutes().toString().padStart(2, '0');
    const daytime = d.getHours() >= 12 ? "PM" : "AM";
    return `${hour}:${minute} ${daytime}`;
  } else {
    return d.toLocaleDateString();
  }
}

'''
'''--- src/ProfileApp.js ---
import React from "react";

export class ProfileApp extends React.Component {
  constructor(props) {
    super(props);
    const keys = [
      "displayName",
      "profileUrl",
      "bio",
    ];
    this.state = keys.reduce((acc, key) => {
      acc[key] = "";
      acc.chainValues[key] = null;
      return acc;
    }, {
      keys,
      chainValues: {},
      initialized: false,
    });
  }

  async init() {
    console.log("init");
    this.setState({
      initialized: true,
    });
    const values = await Promise.all(this.state.keys.map((key) => this.props.app.get(key)));
    console.log(values);
    const chainValues = this.state.keys.reduce((acc, key, i) => {
      acc[key] = values[i] || "";
      return acc;
    }, {});
    this.setState(Object.assign({chainValues}, chainValues));
  }

  componentDidUpdate(prevProps) {
    if (this.props.app && !this.state.initialized) {
      this.init();
    }
  }

  handleChange(key, value) {
    this.setState({
      [key]: value,
    });
  }

  async save() {
    console.log("Saving");
    const chainValues = Object.assign({}, this.state.chainValues);
    this.state.keys.forEach(key => {
      if (this.state.chainValues[key] !== this.state[key]) {
        chainValues[key] = this.state[key];
        this.props.app.set(key, this.state[key]).then(() => {
          console.log("Updated key `" + key + "` to value `" + this.state[key] + '`');
        });
      }
    });
    this.setState({
      chainValues
    })
  }

  render() {
    return (
      <div>
        <div className="form-group">
          <label htmlFor="displayName">Display Name</label>
          <input id="displayName" className="form-control" disabled={!this.props.app} value={this.state.displayName} onChange={(e) => this.handleChange('displayName', e.target.value)} />
        </div>
        <div className="form-group">
          <label htmlFor="profileUrl">Profile URL</label>
          <input id="profileUrl" className="form-control" disabled={!this.props.app} value={this.state.profileUrl}
                 onChange={(e) => this.handleChange('profileUrl', e.target.value)}/>
          <img src={this.state.profileUrl} className="img-thumbnail rounded-circle w-25"/>
        </div>
        <div className="form-group">
          <label htmlFor="bio">Bio</label>
          <textarea id="bio" className="form-control" disabled={!this.props.app} value={this.state.bio} onChange={(e) => this.handleChange('bio', e.target.value)} />
        </div>
        <div className="form-group">
          <button onClick={() => this.save()}>Save changes</button>
        </div>
      </div>
    )
  }
}
'''
'''--- src/assets/gray_near_logo.svg ---
<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 433 180.5"><defs><style>.cls-1{fill:url(#linear-gradient);}.cls-2{fill:#4a4f54;}</style><linearGradient id="linear-gradient" x1="40.11" y1="140.87" x2="140.87" y2="40.11" gradientUnits="userSpaceOnUse"><stop offset="0.21" stop-color="#4a4f54"/><stop offset="0.42" stop-color="#4a4f54" stop-opacity="0"/><stop offset="0.59" stop-color="#4a4f54" stop-opacity="0"/><stop offset="0.81" stop-color="#4a4f54"/></linearGradient></defs><title>near_logo</title><path class="cls-1" d="M48.84,144.5a12.32,12.32,0,0,0,9.35-4.28h0l84.42-97.93a12.32,12.32,0,0,0-10.45-5.79h0a12.31,12.31,0,0,0-9.31,4.24L38,138.09A12.34,12.34,0,0,0,48.84,144.5Z"/><path class="cls-2" d="M48.84,144.5a12.38,12.38,0,0,0,5.66-1.37V61.36l65.58,78.7a12.37,12.37,0,0,0,9.49,4.44h2.59a12.35,12.35,0,0,0,12.34-12.34V48.84A12.35,12.35,0,0,0,132.16,36.5h0a12.45,12.45,0,0,0-5.62,1.35v81.79L60.92,40.94a12.37,12.37,0,0,0-9.49-4.44H48.84A12.35,12.35,0,0,0,36.5,48.84v83.32A12.35,12.35,0,0,0,48.84,144.5Z"/><path class="cls-2" d="M225.71,64.25v52.5a.76.76,0,0,1-.75.75h-5.51a7.49,7.49,0,0,1-6.3-3.43l-24.78-38.3.85,19.13v21.85a.76.76,0,0,1-.75.75h-7.22a.76.76,0,0,1-.75-.75V64.25a.76.76,0,0,1,.75-.75h5.43a7.52,7.52,0,0,1,6.3,3.42l24.78,38.24L217,86.1V64.25a.75.75,0,0,1,.75-.75H225A.76.76,0,0,1,225.71,64.25Z"/><path class="cls-2" d="M299.51,117.5h-7.64a.75.75,0,0,1-.7-1L311.4,64.22a1.14,1.14,0,0,1,1.05-.72H322a1.14,1.14,0,0,1,1.05.72l20.23,52.26a.75.75,0,0,1-.7,1H335a.76.76,0,0,1-.71-.48L317.94,74a.75.75,0,0,0-1.41,0l-16.31,43A.76.76,0,0,1,299.51,117.5Z"/><path class="cls-2" d="M396.34,116.29,381.16,96.9c8.57-1.62,13.58-7.4,13.58-16.27,0-10.19-6.63-17.13-18.36-17.13H355.21a1.12,1.12,0,0,0-1.12,1.12h0a7.2,7.2,0,0,0,7.2,7.21h14.17c7.09,0,10.49,3.63,10.49,8.87s-3.32,9-10.49,9H355.21a1.13,1.13,0,0,0-1.12,1.13v26a.75.75,0,0,0,.75.75h7.22a.76.76,0,0,0,.75-.75V97.37h8.33l13.17,17.19a7.51,7.51,0,0,0,6,2.94h5.48A.75.75,0,0,0,396.34,116.29Z"/><path class="cls-2" d="M276.67,63.5h-33.5a1,1,0,0,0-1,1h0a7.33,7.33,0,0,0,7.33,7.33h27.17a.74.74,0,0,0,.75-.75V64.25A.75.75,0,0,0,276.67,63.5Zm0,45.67h-25a.76.76,0,0,1-.75-.75V94.88a.75.75,0,0,1,.75-.75h23.11a.75.75,0,0,0,.75-.75V86.54a.75.75,0,0,0-.75-.75H243.29a1.13,1.13,0,0,0-1.12,1.13v29.45a1.12,1.12,0,0,0,1.12,1.13h33.38a.75.75,0,0,0,.75-.75v-6.83A.74.74,0,0,0,276.67,109.17Z"/></svg>
'''
'''--- src/assets/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3">
    <g fill="#61DAFB">
        <path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/>
        <circle cx="420.9" cy="296.5" r="45.7"/>
        <path d="M520.5 78.1z"/>
    </g>
</svg>

'''
'''--- src/assets/near.svg ---
<svg width="97px" height="97px" viewBox="0 0 97 97" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <defs>
        <linearGradient x1="8.03545747%" y1="96.638877%" x2="92.2738738%" y2="3.34259955%" id="linearGradient-1">
            <stop stop-color="#4B4F54" offset="21%"></stop>
            <stop stop-color="#4B4F54" stop-opacity="0" offset="42%"></stop>
            <stop stop-color="#4B4F54" stop-opacity="0" offset="59%"></stop>
            <stop stop-color="#4B4F54" offset="81%"></stop>
        </linearGradient>
    </defs>
    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="create" transform="translate(-1054.000000, -595.000000)" fill-rule="nonzero">
            <g id="Group-5" transform="translate(1054.000000, 595.000000)">
                <path d="M12.094392,97.0000195 C15.2088036,97.0039527 18.1698244,95.6000877 20.2022804,93.1559341 L20.2022804,93.1559341 L93.4074074,5.20030368 C91.4546314,1.96447154 88.0299073,1.95462232e-05 84.3456498,1.95462232e-05 L84.3456498,1.95462232e-05 C81.2486381,-0.0036811685 78.3027381,1.38590639 76.2724476,3.80817433 L2.69444444,91.2428789 C4.57536204,94.7980982 8.18030259,97.0059941 12.094392,97.0000195 Z" id="Path" fill="url(#linearGradient-1)"></path>
                <path d="M11.0831481,97 C12.8513879,97 14.5941045,96.5780666 16.1666667,95.769537 L16.1666667,22.327963 L75.0672222,93.0122222 C77.1773546,95.5384707 80.2990545,96.9989921 83.5906481,97 L85.9168519,97 C92.0358529,96.9950473 96.9950473,92.0358529 97,85.9168519 L97,11.0831481 C96.9950473,4.96414708 92.0358529,0.00495265405 85.9168519,0 L85.9168519,0 C84.1625017,0.00260840866 82.4333785,0.417967183 80.8692593,1.2125 L80.8692593,74.672037 L21.9327778,3.98777778 C19.8226454,1.4615293 16.7009455,0.00100794796 13.4093519,0 L11.0831481,0 C4.96414708,0.00495265405 0.00495265405,4.96414708 0,11.0831481 L0,85.9168519 C0.00495265405,92.0358529 4.96414708,96.9950473 11.0831481,97 Z" id="Path" fill="#4B4F54"></path>
            </g>
        </g>
    </g>
</svg>
'''
'''--- src/config.js ---
(function() {
    const CONTRACT_NAME = 'react-template'; /* TODO: fill this in!*/
    const DEFAULT_ENV = 'development'; 
    
    function getConfig(env) {
        switch (env) {

        case 'production':
        case 'development':
            return {
                networkId: 'default',
                nodeUrl: 'https://rpc.nearprotocol.com',
                contractName: CONTRACT_NAME,
                walletUrl: 'https://wallet.nearprotocol.com',
            };
        case 'staging':
            return {
                networkId: 'staging',
                nodeUrl: 'https://staging-rpc.nearprotocol.com/',
                contractName: CONTRACT_NAME,
                walletUrl: 'https://near-wallet-staging.onrender.com',
            };
        case 'local':
            return {
                networkId: 'local',
                nodeUrl: 'http://localhost:3030',
                keyPath: `${process.env.HOME}/.near/validator_key.json`,
                walletUrl: 'http://localhost:4000/wallet',
                contractName: CONTRACT_NAME,
            };
        case 'test':
            return {
                networkId: 'local',
                nodeUrl: 'http://localhost:3030',
                contractName: CONTRACT_NAME,
                masterAccount: 'test.near',
            };
        case 'test-remote':
        case 'ci':
            return {
                networkId: 'shared-test',
                nodeUrl: 'http://shared-test.nearprotocol.com:3030',
                contractName: CONTRACT_NAME,
                masterAccount: 'test.near',
            };
        case 'ci-staging':
            return {
                networkId: 'shared-test-staging',
                nodeUrl: 'http://staging-shared-test.nearprotocol.com:3030',
                contractName: CONTRACT_NAME,
                masterAccount: 'test.near',
            };
        default:
            throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);
        }
    }
    
    let Cookies = require('js-cookie');
    const cookieConfig = typeof Cookies != 'undefined' && Cookies.getJSON('fiddleConfig');
    if (typeof module !== 'undefined' && module.exports) {
        console.log("module works")
        module.exports = getConfig;
    } else {
        console.log("Cookie works")
        window.nearConfig =  cookieConfig && cookieConfig.nearPages ? cookieConfig : getConfig(DEFAULT_ENV);
    }
})();

'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import getConfig from './config.js';
import * as nearlib from 'nearlib';

// Initializing contract
async function InitContract() {
    window.nearConfig = getConfig('development')
    console.log("nearConfig", window.nearConfig);

    // Initializing connection to the NEAR DevNet.
    window.near = await nearlib.connect(Object.assign({ deps: { keyStore: new nearlib.keyStores.BrowserLocalStorageKeyStore() } }, window.nearConfig));
    
    // Needed to access wallet login
    window.walletAccount = new nearlib.WalletAccount(window.near);
    
    // Getting the Account ID. If unauthorized yet, it's just empty string.
    window.accountId = window.walletAccount.getAccountId();

}

window.nearInitPromise = InitContract().then(() => {
    ReactDOM.render(<App contract={window.contract} wallet={window.walletAccount}/>,
      document.getElementById('root')
    );
  }).catch(console.error)
'''
'''--- src/openweb.js ---
import * as nearlib from "nearlib";

const GAS = 2_000_000_000_000_000;

export class OpenWebApp {
  constructor(appId, accountId, config) {
    this.appId = appId;
    this.accountId = accountId;
    this._config = config;
    this.blocking = Promise.resolve();
  }

  async init() {
    this._keyStore = new nearlib.keyStores.BrowserLocalStorageKeyStore(
      localStorage, "app:" + this.appId,
    );
    this._near = await nearlib.connect(Object.assign({ deps: { keyStore:  this._keyStore } }, this._config));
    this._account = new nearlib.Account(this._near.connection, this.accountId);
    this._contract = new nearlib.Contract(this._account, this.accountId, {
      viewMethods: ['get', 'apps', 'num_messages'],
      changeMethods: ['set', 'remove', 'pull_message', 'send_message'],
      sender: this.accountId
    });
    this._networkId = this._config.networkId;
  }

  async ready() {
    const key = await this._keyStore.getKey(this._networkId, this.accountId);
    return !!key;
  }

  async getPublicKey() {
    const key = await this._keyStore.getKey(this._networkId, this.accountId);
    if (key) {
      return key.getPublicKey();
    }
    if (this._tmpKey) {
      return this._tmpKey.getPublicKey();
    }
    const accessKey = nearlib.KeyPair.fromRandom('ed25519');
    this._tmpKey = accessKey;
    return accessKey.getPublicKey();
  }

  async onKeyAdded() {
    if (!this._tmpKey) {
      throw new Error('The key is not initialized yet');
    }
    await this._keyStore.setKey(this._networkId, this.accountId, this._tmpKey);
    this._tmpKey = null;
  }

  async forceReady() {
    if (!await this.ready()) {
      throw new Error('Not ready yet');
    }
  }

  wrappedCall(call) {
    this.blocking = this.blocking.then(() => call()).catch(() => call());
    return this.blocking;
  }

  async get(key, appId) {
    appId = appId || this.appId;
    let str = await this._contract.get({
      app_id: appId,
      key,
    });
    if (str) {
      str = JSON.parse(str);
    }
    return str;
  }

  async getFrom(accountId, key, appId) {
    appId = appId || this.appId;
    const account = new nearlib.Account(this._near.connection, accountId);
    const contract = new nearlib.Contract(account, accountId, {
      viewMethods: ['get'],
      changeMethods: [],
      sender: this.accountId
    });

    let str = await contract.get({
      app_id: appId,
      key,
    });
    if (str) {
      str = JSON.parse(str);
    }
    return str;
  }

  async apps() {
    return await this._contract.apps();
  }

  async set(key, value) {
    this.forceReady();
    await this.wrappedCall(() => this._contract.set({
      key,
      value: JSON.stringify(value),
    }, GAS));
  }

  async remove(key) {
    this.forceReady();
    await this.wrappedCall(() => this._contract.remove({
      key,
    }, GAS));
  }

  async pullMessage() {
    this.forceReady();
    if (await this._contract.num_messages({app_id: this.appId}) > 0) {
      return await this.wrappedCall(() => this._contract.pull_message({}, GAS));
    } else {
      return null;
    }
  }

  async sendMessage(receiverId, message, appId) {
    this.forceReady();
    receiverId = receiverId || this.accountId;
    appId = appId || this.appId;
    await this.wrappedCall(() => this._contract.send_message({
      receiver_id: receiverId,
      app_id: appId,
      message,
    }, GAS));
  }
}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in shell, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''