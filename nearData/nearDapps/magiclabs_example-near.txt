*GitHub Repository "magiclabs/example-near"*

'''--- package.json ---
{
  "name": "example-near",
  "version": "1.0.0",
  "description": "React example starter project",
  "keywords": [
    "react",
    "starter"
  ],
  "main": "src/index.js",
  "dependencies": {
    "@magic-ext/near": "^0.1.0",
    "algosdk": "1.7.0",
    "magic-sdk": "^6.2.0",
    "near-api-js": "^0.43.1",
    "react": "16.13.1",
    "react-dom": "16.13.1",
    "react-scripts": "3.4.3"
  },
  "devDependencies": {
    "typescript": "3.8.3"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test --env=jsdom",
    "eject": "react-scripts eject"
  },
  "browserslist": [
    ">0.2%",
    "not dead",
    "not ie <= 11",
    "not op_mini all"
  ]
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	<meta name="theme-color" content="#000000">
	<!--
      manifest.json provides metadata used when your web app is added to the
      homescreen on Android. See https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest/
    -->
	<link rel="manifest" href="%PUBLIC_URL%/manifest.json">
	<link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico">
	<!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
	<title>React App</title>
</head>

<body>
	<noscript>
		You need to enable JavaScript to run this app.
	</noscript>
	<div id="root"></div>
	<!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
</body>

</html>
'''
'''--- src/App.js ---
import React, { useState, useEffect } from "react";
import "./styles.css";
import { Magic } from "magic-sdk";
import { NearExtension } from "@magic-ext/near";
import { transactions, utils } from 'near-api-js'

const magic = new Magic('pk_live_96C05F8F912A6025', {
    extensions: [
        new NearExtension({
            rpcUrl: '',
        }),
    ]});

export default function App() {
    const [email, setEmail] = useState("");
    const [publicAddress, setPublicAddress] = useState("");
    const [destinationAddress, setDestinationAddress] = useState("");
    const [sendAmount, setSendAmount] = useState(0);
    const [isLoggedIn, setIsLoggedIn] = useState(false);
    const [userMetadata, setUserMetadata] = useState({});
    const [txHash, setTxHash] = useState("");
    const [sendingTransaction, setSendingTransaction] = useState(false);

    useEffect(() => {
        magic.user.isLoggedIn().then(async (magicIsLoggedIn) => {
            setIsLoggedIn(magicIsLoggedIn);
            if (magicIsLoggedIn) {
                const metadata = await magic.user.getMetadata();
                setPublicAddress(metadata.publicAddress);
                setUserMetadata(metadata);
            }
        });
    }, [isLoggedIn]);

    const login = async () => {
        await magic.auth.loginWithMagicLink({ email });
        setIsLoggedIn(true);
    };

    const logout = async () => {
        await magic.user.logout();
        setIsLoggedIn(false);
    };

    const handleSignTransaction = async () => {
        const publicKeyString = await magic.near.getPublicKey();

        const publicKey = utils.PublicKey.fromString(publicKeyString);

        const actions = [
            transactions.transfer(sendAmount)
        ];
        const transaction = transactions.createTransaction(publicAddress, publicKey, destinationAddress, 0, actions, '9av2U6cova7LZPA9NPij6CTUrpBbgPG6');

        const rawTransaction = transaction.encode();

        const result = await magic.near.signTransaction({rawTransaction, networkID: 'testenet'});

        const signedTransaction = transactions.SignedTransaction.decode(Buffer.from(result.encodedSignedTransaction));

        console.log('signedTransaction', signedTransaction)
    };

    return (
        <div className="App">
            {!isLoggedIn ? (
                <div className="container">
                    <h1>Please sign up or login</h1>
                    <input
                        type="email"
                        name="email"
                        required="required"
                        placeholder="Enter your email"
                        onChange={(event) => {
                            setEmail(event.target.value);
                        }}
                    />
                    <button onClick={login}>Send</button>
                </div>
            ) : (
                <div>
                    <div className="container">
                        <h1>Current user: {userMetadata.email}</h1>
                        <button onClick={logout}>Logout</button>
                    </div>
                    <div className="container">
                        <h1>Near account id</h1>
                        <div className="info">{publicAddress}</div>
                    </div>
                    <div className="container">
                        <h1>Sign Near Transaction</h1>
                        {txHash ? (
                            <div>
                                <div>Sign transaction success</div>
                                <div className="info">{txHash}</div>
                            </div>
                        ) : sendingTransaction ? (
                            <div className="sending-status">Signing transaction</div>
                        ) : (
                            <div />
                        )}
                        <input
                            type="text"
                            name="destination"
                            className="full-width"
                            required="required"
                            placeholder="Destination address"
                            onChange={(event) => {
                                setDestinationAddress(event.target.value);
                            }}
                        />
                        <input
                            type="text"
                            name="amount"
                            className="full-width"
                            required="required"
                            placeholder="Amount in Near"
                            onChange={(event) => {
                                setSendAmount(event.target.value);
                            }}
                        />
                        <button id="btn-send-txn" onClick={handleSignTransaction}>
                            Sign Transaction
                        </button>
                    </div>
                </div>
            )}
        </div>
    );
}

'''
'''--- src/index.js ---
import React from "react";
import ReactDOM from "react-dom";

import App from "./App";

const rootElement = document.getElementById("root");
ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  rootElement
);

'''
'''--- src/styles.css ---
.App {
  align-self: center;
  justify-self: center;
}

#root {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
  Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
  height: 100vh;
  display: grid;
  font-size: 18px;
}

.container {
  width: 300px;
  background-color: #eee;
  text-align: center;
  padding: 27px 18px;
  margin-bottom: 27px;
}

h1 {
  margin: 0;
  padding-bottom: 18px;
  font-size: 18px;
}

.info {
  max-width: 21ch;
  margin: 0 auto;
  margin-bottom: 18px;
  background-color: #ddd;
  padding: 12px 24px;
  word-wrap: break-word;
  font-family: "Lucida Console", Monaco, monospace;
  font-size: 15px;
}

.info a {
  color: black;
}

input,
button {
  padding: 9px;
  font-size: 18px;
  margin-bottom: 9px;
}

input.full-width {
  display: block;
  margin: 0 auto;
  margin-bottom: 9px;
  text-align: center;
}

.sending-status {
  margin-bottom: 10px;
}

'''