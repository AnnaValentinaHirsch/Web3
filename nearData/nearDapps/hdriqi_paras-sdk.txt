*GitHub Repository "hdriqi/paras-sdk"*

'''--- README.md ---
# Intro to Paras

Paras is an NFT marketplace that focuses on digital card collectibles. We thrive upon bringing conventional collectibles to crypto space. Trading cards have been bulletproof and forever lasting since they were introduced back in the 80s. We believe that every single physical art form needs to be stored and digitized to keep it future-proof. Paras, an all-in-one Digital Art Card marketplace, is eager to diversify the assets to digital art cards. By applying a 64x89 ratio, we want to make it as faithful to the original. 

By building the platform under NEAR and IPFS/Filecoin, we want to track the ownership of every single collectible in our platform. Through these solutions, Paras validates ownership and gives access to every purchase and mint to the public. Running on top of NEAR, a scalable blockchain, Paras offers very cheap and fast transactions for users. 
Paras offers an easy way for creators and developers to build their crypto-native application on top of the Paras marketplace. There are 2 ways to interact with Paras Marketplace:

## Paras SDK
Paras offers a software development kit (SDK) in Javascript/NodeJS. This SDK can be used in browser and server. 

## Paras API
Paras also offer API for everyone that uses language outside Javascript/NodeJS. This enables more flexibility for developers to integrate Paras with their current system. 

## Documentation
Visit https://parasdev.gitbook.io/paras-documentation/ to view the full documentation.
'''
'''--- examples/acceptBid.js ---
require('dotenv').config()
const ParasSDK = require('../index')
const { parseNearAmount } = require('near-api-js/lib/utils/format')

const main = async () => {
	const parasSDK = new ParasSDK()

	await parasSDK.init(
		{
			networkId: 'default',
			nodeUrl: 'https://rpc.testnet.near.org',
			walletUrl: 'https://wallet.testnet.near.org',
			appName: 'Paras Testnet',
			contractName: parasSDK.CONTRACT_DEV,
			apiUrl: parasSDK.API_DEV,
		},
		{
			isServer: true,
		}
	)

    const cred = {
        account_id: process.env.ROOT_ACCOUNT_ID,
        public_key: process.env.ROOT_PUBLIC_KEY,
        private_key: process.env.ROOT_PRIVATE_KEY,
    }

    await parasSDK.login(cred)

	try {
        const res = await parasSDK.acceptBid(
            {
                accountId: cred.account_id,
                tokenId: "bafybeihivm3psgagxewyyj4osez5zygkyswojo22dbtzh3kplpvc6oscke",
                quantity: 1,
            }
        )
        console.log(res)
        return res
    } catch (err) {
        console.log(err)
    }
}

main()

'''
'''--- examples/addBid.js ---
require('dotenv').config()
const ParasSDK = require('../index')
const { parseNearAmount } = require('near-api-js/lib/utils/format')

const main = async () => {
	const parasSDK = new ParasSDK()

	await parasSDK.init(
		{
			networkId: 'default',
			nodeUrl: 'https://rpc.testnet.near.org',
			walletUrl: 'https://wallet.testnet.near.org',
			appName: 'Paras Testnet',
			contractName: parasSDK.CONTRACT_DEV,
			apiUrl: parasSDK.API_DEV,
		},
		{
			isServer: true,
		}
	)

    const cred = {
        account_id: process.env.ROOT_ACCOUNT_ID,
        public_key: process.env.ROOT_PUBLIC_KEY,
        private_key: process.env.ROOT_PRIVATE_KEY,
    }

    await parasSDK.login(cred)

	try {
        const res = await parasSDK.addBid(
            {
                accountId: cred.account_id,
                tokenId: "bafybeihivm3psgagxewyyj4osez5zygkyswojo22dbtzh3kplpvc6oscke",
                quantity: 1,
                amount: parseNearAmount('1')
            }
        )
        console.log(res)
        return res
    } catch (err) {
        console.log(err)
    }
}

main()

'''
'''--- examples/burnToken.js ---
require('dotenv').config()
const ParasSDK = require('../index')
const { parseNearAmount } = require('near-api-js/lib/utils/format')

const main = async () => {
	const parasSDK = new ParasSDK()

	await parasSDK.init(
		{
			networkId: 'default',
			nodeUrl: 'https://rpc.testnet.near.org',
			walletUrl: 'https://wallet.testnet.near.org',
			appName: 'Paras Testnet',
			contractName: parasSDK.CONTRACT_DEV,
			apiUrl: parasSDK.API_DEV
		},
		{
			isServer: true,
		}
	)

	const cred = {
		account_id: process.env.ROOT_ACCOUNT_ID,
		public_key: process.env.ROOT_PUBLIC_KEY,
		private_key: process.env.ROOT_PRIVATE_KEY,
	}

	await parasSDK.login(cred)

	try {
		const burnToken = await parasSDK.burn({
			accountId: cred.account_id,
			tokenId: "bafybeifj6s5lvkdnsels5tmr6f5ceo37kmqfuorakptusdsthp6a757ese",
			quantity: 1
			}
		)
		console.log(burnToken)
	} catch (err) {
		console.log(err)
	}
}

main()
'''
'''--- examples/buy.js ---
require('dotenv').config()
const ParasSDK = require('../index')

const main = async () => {
	const parasSDK = new ParasSDK()

	await parasSDK.init(
		{
			networkId: 'default',
			nodeUrl: 'https://rpc.testnet.near.org',
			walletUrl: 'https://wallet.testnet.near.org',
			appName: 'Paras Testnet',
			contractName: parasSDK.CONTRACT_DEV,
			apiUrl: parasSDK.API_DEV,
		},
		{
			isServer: true,
		}
	)

    const cred = {
		account_id: process.env.ROOT_ACCOUNT_ID,
        public_key: process.env.ROOT_PUBLIC_KEY,
        private_key: process.env.ROOT_PRIVATE_KEY,
    }

    await parasSDK.login(cred)

	try {
		const res = await parasSDK.buy(
			{
				ownerId: cred.account_id,
				tokenId: "bafybeihyvmlz4yanombe2eb7aepcq77zr4dvbilzlagx66jotmdz34ngoe",
				quantity: 1,
				payment: 1,
			}
		)
		console.log(res)
		return res
	} catch (err) {
		console.log(err)
	}
}

main()
'''
'''--- examples/deleteBid.js ---
require('dotenv').config()
const ParasSDK = require('../index')

const main = async () => {
	const parasSDK = new ParasSDK()

	await parasSDK.init(
		{
			networkId: 'default',
			nodeUrl: 'https://rpc.testnet.near.org',
			walletUrl: 'https://wallet.testnet.near.org',
			appName: 'Paras Testnet',
			contractName: parasSDK.CONTRACT_DEV,
			apiUrl: parasSDK.API_DEV,
		},
		{
			isServer: true,
		}
	)

    const cred = {
        account_id: process.env.ROOT_ACCOUNT_ID,
        public_key: process.env.ROOT_PUBLIC_KEY,
        private_key: process.env.ROOT_PRIVATE_KEY,
    }

    await parasSDK.login(cred)

	try {
        const res = await parasSDK.deleteBid(
            {
                accountId: cred.account_id,
                tokenId: "bafybeihivm3psgagxewyyj4osez5zygkyswojo22dbtzh3kplpvc6oscke",
            }
        )
        console.log(res)
        return res
    } catch (err) {
        console.log(err)
    }
}

main()

'''
'''--- examples/deleteMarketData.js ---
require('dotenv').config()
const ParasSDK = require('../index')
const { parseNearAmount } = require('near-api-js/lib/utils/format')
const fs = require('fs')
const path = require('path')

const main = async () => {
	const parasSDK = new ParasSDK()

	await parasSDK.init(
		{
			networkId: 'default',
			nodeUrl: 'https://rpc.testnet.near.org',
			walletUrl: 'https://wallet.testnet.near.org',
			appName: 'Paras Testnet',
			contractName: parasSDK.CONTRACT_DEV,
			apiUrl: parasSDK.API_DEV,
		},
		{
			isServer: true,
		}
	)

	const cred = {
		account_id: process.env.ROOT_ACCOUNT_ID,
		public_key: process.env.ROOT_PUBLIC_KEY,
		private_key: process.env.ROOT_PRIVATE_KEY,
	}

	await parasSDK.login(cred)

	try {
		const sellDetails = await parasSDK.deleteMarketData({
			ownerId: cred.account_id,
			tokenId: "bafybeic3ss4247so7suqnh2fqz3pcbm6hi22d5b3ghyr2u3qk5ftq3iehe",
			}
		)
		console.log(sellDetails)
	} catch (err) {
		console.log(err)
	}
}

main()

'''
'''--- examples/getActivity.js ---
require('dotenv').config()
const ParasSDK = require('../index')
const { parseNearAmount } = require('near-api-js/lib/utils/format')

const main = async () => {
	const parasSDK = new ParasSDK()

	await parasSDK.init(
		{
			networkId: 'default',
			nodeUrl: 'https://rpc.testnet.near.org',
			walletUrl: 'https://wallet.testnet.near.org',
			appName: 'Paras Testnet',
			contractName: parasSDK.CONTRACT_DEV,
			apiUrl: parasSDK.API_DEV,
		},
		{
			isServer: true,
		}
	)

	try {
		// possible query
		// const query = {
		//  _id: id,
		//  tokenId: tokenId,
		//  creatorId: creatorId,
		//  from: from,
		//  to: to,
		//  type: type,
		//  minPrice: minPrice,
		//  maxPrice: maxPrice,
		// }
		const query = {
            type: 'marketBuy',
            minPrice: parseNearAmount('0.1'),
		}
		const res = await parasSDK.getActivity(query, 0, 10)
		console.log(res)
	} catch (err) {
		console.log(err)
	}
}

main()

'''
'''--- examples/getBid.js ---
require('dotenv').config()
const ParasSDK = require('../index')

const main = async () => {
	const parasSDK = new ParasSDK()

	await parasSDK.init(
		{
			networkId: 'default',
			nodeUrl: 'https://rpc.testnet.near.org',
			walletUrl: 'https://wallet.testnet.near.org',
			appName: 'Paras Testnet',
			contractName: parasSDK.CONTRACT_DEV,
			apiUrl: parasSDK.API_DEV,
		},
		{
			isServer: true,
		}
	)

    const cred = {
        account_id: process.env.ROOT_ACCOUNT_ID,
        public_key: process.env.ROOT_PUBLIC_KEY,
        private_key: process.env.ROOT_PRIVATE_KEY,
    }

    await parasSDK.login(cred)
    this.authToken = await parasSDK.authToken()

	try {
        const res = await parasSDK.getBid(
            {
                accountId: cred.account_id,
                tokenId: "",
            }
        )
        console.log(res)
        return res
    } catch (err) {
        console.log(err)
    }
}

main()

'''
'''--- examples/getToken.js ---
require('dotenv').config()
const ParasSDK = require('../index')
const { parseNearAmount } = require('near-api-js/lib/utils/format')

const main = async () => {
	const parasSDK = new ParasSDK()

	await parasSDK.init(
		{
			networkId: 'default',
			nodeUrl: 'https://rpc.testnet.near.org',
			walletUrl: 'https://wallet.testnet.near.org',
			appName: 'Paras Testnet',
			contractName: parasSDK.CONTRACT_DEV,
			apiUrl: parasSDK.API_DEV,
		},
		{
			isServer: true,
		}
	)

	try {
		// possible query
		// const query = {
		// 	ownerId: string,
		// 	tokenId: string,
		// 	creatorId: string,
		// 	collection: string,
		// 	name: string,
		// 	search: string,
		// 	collectionSearch: string,
		// 	nameSearch: string,
		// 	excludeTotalBurn: boolean,
		// 	minPrice: string,
		// 	maxPrice: string,
		// }
		const query = {
			ownerId: 'johncena.testnet',
			minPrice: parseNearAmount('0.1'),
		}
		const res = await parasSDK.getTokens(query, 0, 10)
		console.log(res)
	} catch (err) {
		console.log(err)
	}
}

main()

'''
'''--- examples/mintAndList.js ---
require('dotenv').config()
const ParasSDK = require('../index')
const { parseNearAmount } = require('near-api-js/lib/utils/format')
const fs = require('fs')
const path = require('path')

const main = async () => {
	const parasSDK = new ParasSDK()

	await parasSDK.init(
		{
			networkId: 'default',
			nodeUrl: 'https://rpc.testnet.near.org',
			walletUrl: 'https://wallet.testnet.near.org',
			appName: 'Paras Testnet',
			contractName: parasSDK.CONTRACT_DEV,
			apiUrl: parasSDK.API_DEV,
		},
		{
			isServer: true,
		}
	)

	const cred = {
		account_id: process.env.ROOT_ACCOUNT_ID,
		public_key: process.env.ROOT_PUBLIC_KEY,
		private_key: process.env.ROOT_PRIVATE_KEY,
	}

	await parasSDK.login(cred)

	try {
		const authToken = await parasSDK.authToken()
		const newToken = await parasSDK.mint(
				{
					file: fs.createReadStream(path.join(__dirname, 'test.jpg')),
					ownerId: cred.account_id,
					supply: 10,
					quantity: 10,
					amount: '1000000000000000000000000',
					name: 'Royalty XII Sell',
					description: 'Key description',
					collection: 'Key',
					royalty: 12
				},
				authToken
			)
		console.log(newToken)

        const query = {
            tokenId: newToken["data"]["tokenId"]
        }
        const res = await parasSDK.getTokens(query, 0, 1)
        console.log(res)
	} catch (err) {
		console.log(err)
	}
}

main()
'''
'''--- examples/mintAndSell.js ---
require('dotenv').config()
const ParasSDK = require('../index')
const { parseNearAmount } = require('near-api-js/lib/utils/format')
const fs = require('fs')
const path = require('path')

const main = async () => {
	const parasSDK = new ParasSDK()

	await parasSDK.init(
		{
			networkId: 'default',
			nodeUrl: 'https://rpc.testnet.near.org',
			walletUrl: 'https://wallet.testnet.near.org',
			appName: 'Paras Testnet',
			contractName: parasSDK.CONTRACT_DEV,
			apiUrl: parasSDK.API_DEV,
		},
		{
			isServer: true,
		}
	)

	const cred = {
		account_id: process.env.ROOT_ACCOUNT_ID,
		public_key: process.env.ROOT_PUBLIC_KEY,
		private_key: process.env.ROOT_PRIVATE_KEY,
	}

	await parasSDK.login(cred)

	try {
		const authToken = await parasSDK.authToken()
		const newToken = await parasSDK.mint(
				{
					file: fs.createReadStream(path.join(__dirname, 'test.jpg')),
					ownerId: cred.account_id,
					supply: 10,
					quantity: 10,
					amount: '1000000000000000000000000',
					name: 'Royalty XI Sell',
					description: 'Key description',
					collection: 'Key',
					royalty: 11
				},
				authToken
			)
		console.log(newToken)
	} catch (err) {
		console.log(err)
	}
}

main()

'''
'''--- examples/mintOnly.js ---
require('dotenv').config()
const ParasSDK = require('../index')
const { parseNearAmount } = require('near-api-js/lib/utils/format')
const fs = require('fs')
const path = require('path')

const main = async () => {
	const parasSDK = new ParasSDK()

	await parasSDK.init(
		{
			networkId: 'default',
			nodeUrl: 'https://rpc.testnet.near.org',
			walletUrl: 'https://wallet.testnet.near.org',
			appName: 'Paras Testnet',
			contractName: parasSDK.CONTRACT_DEV,
			apiUrl: parasSDK.API_DEV,
		},
		{
			isServer: true,
		}
	)

	const cred = {
		account_id: process.env.ROOT_ACCOUNT_ID,
		public_key: process.env.ROOT_PUBLIC_KEY,
		private_key: process.env.ROOT_PRIVATE_KEY,
	}

	await parasSDK.login(cred)

	try {
		const authToken = await parasSDK.authToken()
		const newToken = await parasSDK.mint(
				{
					file: fs.createReadStream(path.join(__dirname, 'test.jpg')),
					ownerId: cred.account_id,
					supply: 10,
					quantity: 0,
					amount: '0',
					name: 'Royalty X',
					description: 'Key description',
					collection: 'Key',
					royalty: 10
				},
				authToken
			)
		console.log(newToken)
	} catch (err) {
		console.log(err)
	}
}

main()

'''
'''--- examples/sell.js ---
require('dotenv').config()
const ParasSDK = require('../index')
const { parseNearAmount } = require('near-api-js/lib/utils/format')
const fs = require('fs')
const path = require('path')

const main = async () => {
	const parasSDK = new ParasSDK()

	await parasSDK.init(
		{
			networkId: 'default',
			nodeUrl: 'https://rpc.testnet.near.org',
			walletUrl: 'https://wallet.testnet.near.org',
			appName: 'Paras Testnet',
			contractName: parasSDK.CONTRACT_DEV,
			apiUrl: parasSDK.API_DEV,
		},
		{
			isServer: true,
		}
	)

	const cred = {
		account_id: process.env.ROOT_ACCOUNT_ID,
		public_key: process.env.ROOT_PUBLIC_KEY,
		private_key: process.env.ROOT_PRIVATE_KEY,
	}

	await parasSDK.login(cred)

	try {
		const sellDetails = await parasSDK.updateMarketData({
			ownerId: cred.account_id,
			tokenId: "bafybeic3ss4247so7suqnh2fqz3pcbm6hi22d5b3ghyr2u3qk5ftq3iehe",
			quantity: 10,
			amount: parseNearAmount('1')
			}
		)
		console.log(sellDetails)
	} catch (err) {
		console.log(err)
	}
}

main()

'''
'''--- examples/transfer.js ---
require('dotenv').config()
const ParasSDK = require('../index')
const { parseNearAmount } = require('near-api-js/lib/utils/format')
const fs = require('fs')
const path = require('path')

const main = async () => {
	const parasSDK = new ParasSDK()

	await parasSDK.init(
		{
			networkId: 'default',
			nodeUrl: 'https://rpc.testnet.near.org',
			walletUrl: 'https://wallet.testnet.near.org',
			appName: 'Paras Testnet',
			contractName: parasSDK.CONTRACT_DEV,
			apiUrl: parasSDK.API_DEV,
		},
		{
			isServer: true,
		}
	)

	const cred = {
		account_id: process.env.ROOT_ACCOUNT_ID,
		public_key: process.env.ROOT_PUBLIC_KEY,
		private_key: process.env.ROOT_PRIVATE_KEY,
	}

	await parasSDK.login(cred)

	try {
		const transferDetails = await parasSDK.transferFrom({
			ownerId: cred.account_id,
			newOwnerId: "orang.testnet",
			tokenId: "bafybeic3ss4247so7suqnh2fqz3pcbm6hi22d5b3ghyr2u3qk5ftq3iehe",
			quantity: 1
			}
		)
		console.log(transferDetails)
	} catch (err) {
		console.log(err)
	}
}

main()

'''
'''--- index.js ---
const nearAPI = require('near-api-js')
const FormData = require('form-data')
const { Base64 } = require('js-base64')
const JSBI = require('jsbi')
const axios = require('axios')
const querystring = require('querystring')

class ParasSDK {
	constructor() {
		this.contract = {}
		this.currentUser = null
		this.config = {}
		this.wallet = {}
		this.signer = {}
		this.opts = {}
		this.keyStore = null
		this.CONTRACT_DEV = `dev-1603765848601-7127578`
		this.CONTRACT_TESTNET = `contract-beta-dev.paras.testnet`
		this.CONTRACT_MAINNET = `contract.paras.near`
		this.API_DEV = `https://dev-api.paras.id`
		this.API_TESTNET = `https://testnet-api.paras.id`
		this.API_MAINNET = `https://mainnet-api.paras.id`
	}

	async authToken() {
		try {
			const accountId = this.account.accountId
			const arr = new Array(accountId)
			for (var i = 0; i < accountId.length; i++) {
				arr[i] = accountId.charCodeAt(i)
			}
			const msgBuf = new Uint8Array(arr)
			const signedMsg = await this.signer.signMessage(
				msgBuf,
				accountId,
				this.config.networkId
			)
			const pubKey = Buffer.from(signedMsg.publicKey.data).toString('hex')
			const signature = Buffer.from(signedMsg.signature).toString('hex')
			const payload = [accountId, pubKey, signature]
			return Base64.encode(payload.join('&'))
		} catch (err) {
			return null
		}
	}

	async _initContract() {
		const contract = await new nearAPI.Contract(
			this.account,
			this.config.contractName,
			{
				changeMethods: [
					'buy',
					'updateMarketData',
					'deleteMarketData',
					'transferFrom',
					'burn',
					'getBidMarketData',
					'addBidMarketData',
					'acceptBidMarketData',
					'deleteBidMarketData'
				],
			}
		)
		return contract
	}

	async init(config = {}, opts = {}) {
		if (!config.networkId) {
			throw new Error('ParasSDK: config.networkId not found')
		}
		if (!config.nodeUrl) {
			throw new Error('ParasSDK: config.nodeUrl not found')
		}
		if (!config.contractName) {
			throw new Error('ParasSDK: config.contractName not found')
		}
		if (!config.walletUrl) {
			throw new Error('ParasSDK: config.walletUrl not found')
		}
		if (!config.apiUrl) {
			throw new Error('ParasSDK: config.apiUrl not found')
		}
		if (!config.appName) {
			throw new Error('ParasSDK: appName not found')
		}

		this.opts = opts

		try {
			// Initializing nearAPI
			this.keyStore = this.opts.isServer
				? new nearAPI.keyStores.InMemoryKeyStore()
				: new nearAPI.keyStores.BrowserLocalStorageKeyStore()

			const connection = await nearAPI.connect({
				deps: {
					keyStore: this.keyStore,
				},
				...config,
			})

			this.config = config
			this.nearAPI = nearAPI
			this.connection = connection
			this.signer = new nearAPI.InMemorySigner(this.keyStore)

			// if in browser, check user auth status
			if (!this.opts.isServer) {
				this.wallet = new nearAPI.WalletConnection(connection)

				// setup account 1st
				this.account = await this.connection.account(this.wallet.getAccountId())
				// setup contract 2nd
				this.contract = await this._initContract(this.wallet.getAccountId())
			}
		} catch (err) {
			throw err
		}
	}

	async login(account) {
		if (this.opts.isServer) {
			const accountkeyPair = nearAPI.KeyPair.fromString(
				account.secret_key || account.private_key
			)
			await this.keyStore.setKey(
				this.config.networkId,
				account.account_id,
				accountkeyPair
			)
			this.account = await this.connection.account(account.account_id)
			this.contract = await this._initContract(account.account_id)
		} else {
			this.wallet.requestSignIn(this.config.contractName, this.config.appName)
		}
	}

	async updateMarketData(params) {
		if (!this.contract) {
			throw new Error('ParasSDK: Contract has not been initialized')
		}
		try {
			const formattedParams = {
				ownerId: params.ownerId,
				tokenId: params.tokenId,
				quantity: params.quantity.toString(),
				amount: params.amount.toString(),
			}
			await this.contract.updateMarketData(formattedParams)
			return formattedParams
		} catch (err) {
			throw new Error(err)
		}
	}

	async deleteMarketData(params) {
		if (!this.contract) {
			throw new Error('ParasSDK: Contract has not been initialized')
		}
		try {
			const formattedParams = {
				ownerId: params.ownerId,
				tokenId: params.tokenId,
				quantity: '0',
				amount: '0',
			}
			await this.contract.updateMarketData(formattedParams)
			return formattedParams
		} catch (err) {
			throw new Error(err)
		}
	}

	async buy(params) {
		if (!this.contract) {
			throw new Error('ParasSDK: Contract has not been initialized')
		}
		try {
			const formattedParams = {
				ownerId: params.ownerId,
				tokenId: params.tokenId,
				quantity: params.quantity.toString(),
			}
			const deposit = params.payment.toString()

			const userBalance = await this.account.getAccountBalance()

			if (
				JSBI.lessThan(JSBI.BigInt(userBalance.available), JSBI.BigInt(deposit))
			) {
				throw 'ParasSDK: Insufficient fund'
			}
			await this.contract.buy(formattedParams, '30000000000000', deposit)
			return formattedParams
		} catch (err) {
			throw new Error(err)
		}
	}

	async transferFrom(params) {
		if (!this.contract) {
			throw new Error('ParasSDK: Contract has not been initialized')
		}
		try {
			const formattedParams = {
				ownerId: params.ownerId,
				newOwnerId: params.newOwnerId,
				tokenId: params.tokenId,
				quantity: params.quantity.toString(),
			}

			await this.contract.transferFrom(formattedParams)
			return formattedParams
		} catch (err) {
			throw new Error(err)
		}
	}

	async mint(params, authToken) {
		const formData = new FormData()

		formData.append('file', params.file)
		formData.append('ownerId', params.ownerId)
		formData.append('supply', params.supply.toString())
		formData.append('quantity', params.quantity.toString())
		formData.append('amount', params.amount.toString())
		formData.append('name', params.name)
		formData.append('description', params.description)
		formData.append('collection', params.collection)
		params.royalty ? formData.append('royalty', params.royalty) : null
		params.categoryId ? formData.append('categoryId', params.categoryId) : null

		try {
			const resp = await axios.post(`${this.config.apiUrl}/tokens`, formData, {
				headers: {
					'Content-Type': `multipart/form-data; boundary=${formData._boundary}`,
					authorization: authToken,
				},
			})
			return resp.data
		} catch (err) {
			console.log(err.response)
			throw new Error(err)
		}
	}

	async burn(params) {
		if (!this.contract) {
			throw new Error('ParasSDK: Contract has not been initialized')
		}
		try {
			const formattedParams = {
				accountId: params.accountId,
				tokenId: params.tokenId,
				quantity: params.quantity.toString(),
			}

			await this.contract.burn(formattedParams)
			return formattedParams
		} catch (err) {
			throw new Error(err)
		}
	}

	async getTokens(query, skip = 0, limit = 10, sort = 'updatedAt_-1') {
		// const query = {
		// 	ownerId: ownerId,
		// 	tokenId: tokenId,
		// 	creatorId: creatorId,
		// 	collection: collection,
		// 	name: name,
		// 	search: search,
		// 	collectionSearch: collectionSearch,
		// 	nameSearch: nameSearch,
		// 	excludeTotalBurn: excludeTotalBurn,
		// 	minPrice: minPrice,
		// 	maxPrice: maxPrice,
		// }
		// const skip = parseInt(__skip) || 0
		// const limit = Math.min(parseInt(__limit), 10) || 10
		// const sort = __sort

		const qs = querystring.stringify({
			...query,
			...{ __skip: skip },
			...{ __limit: limit },
			...{ __sort: sort },
		})

		try {
			const resp = await axios.get(`${this.config.apiUrl}/tokens?${qs}`)
			return resp.data.data
		} catch (err) {
			console.log(err.response)
			throw new Error(err)
		}
	}

	async getActivity(query, skip = 0, limit = 10) {
		// const query = {
		//	_id: id,
		//	tokenId: tokenId,
		//	creatorId: creatorId,
		//	from: from,
		//	to: to,
		//	type: type,
		//	minPrice: minPrice,
		//	maxPrice: maxPrice,
		// }
		// const skip = parseInt(__skip) || 0
		// const limit = Math.min(parseInt(__limit), 10) || 10

		const qs = querystring.stringify({
			...query,
			...{ __skip: skip },
			...{ __limit: limit },
		})

		try {
			const resp = await axios.get(`${this.config.apiUrl}/activities?${qs}`)
			return resp.data.data
		} catch (err) {
			console.log(err.response)
			throw new Error(err)
		}
	}

	async getBid(query, skip = 0, limit = 10) {
		// const query = {
		//	tokenId: tokenId,
		//	accountId: accountId,
		//	isReceived: isReceived,
		// }
		// const skip = parseInt(__skip) || 0
		// const limit = Math.min(parseInt(__limit), 10) || 10

		const qs = querystring.stringify({
			...query,
			...{ __skip: skip },
			...{ __limit: limit },
		})

		try {
			const resp = await axios.get(`${this.config.apiUrl}/bids?${qs}`)
			return resp.data.data
		} catch (err) {
			console.log(err.response)
			throw new Error(err)
		}
	}

	async addBid(params) {
		if (!this.contract) {
			throw new Error('ParasSDK: Contract has not been initialized')
		}
		try {
			const formattedParams = {
				ownerId: params.accountId,
				tokenId: params.tokenId,
				quantity: params.quantity.toString(),
				amount: params.amount.toString(),
			}

			await this.contract.addBidMarketData(formattedParams)
			return formattedParams
		} catch (err) {
			throw new Error(err)
		}
	}

	async acceptBid(params) {
		if (!this.contract) {
			throw new Error('ParasSDK: Contract has not been initialized')
		}
		try {
			const formattedParams = {
				ownerId: params.accountId,
				tokenId: params.tokenId,
				quantity: params.quantity.toString(),
			}

			await this.contract.acceptBidMarketData(formattedParams)
			return formattedParams
		} catch (err) {
			throw new Error(err)
		}
	}

	async deleteBid(params) {
		if (!this.contract) {
			throw new Error('ParasSDK: Contract has not been initialized')
		}
		try {
			const formattedParams = {
				ownerId: params.accountId,
				tokenId: params.tokenId,
			}

			await this.contract.deleteBidMarketData(formattedParams)
			return formattedParams
		} catch (err) {
			throw new Error(err)
		}
	}
}

module.exports = ParasSDK

'''
'''--- package.json ---
{
  "name": "paras-sdk",
  "version": "1.0.1",
  "main": "index.js",
  "license": "MIT",
  "dependencies": {
    "axios": "^0.21.1",
    "dotenv": "^9.0.2",
    "form-data": "^4.0.0",
    "js-base64": "^3.6.0",
    "jsbi": "^3.1.4",
    "near-api-js": "^0.39.0",
    "querystring": "^0.2.1"
  },
  "devDependencies": {
    "jest": "^26.6.3"
  }
}

'''