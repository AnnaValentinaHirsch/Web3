*GitHub Repository "hackathon412/NEAR-Exchange-Blockchain"*

'''--- README.md ---
# NEAR-Exchange-Blockchain

[NEAR MetaBUILD III Hackathon](https://metabuild.devpost.com/?ref_feature=challenge&ref_medium=discover) project for building an on-chain decentralized exchange on NEAR Protocol.

## Overview
 NEAR Exchange is a set of open source smart contracts for implementing NEP-14 token exchange capabilities on [NEAR Protocol](https://near.org).It is an on-chain orderbook based exchange that lets user trade fungible tokens (NEP-141) . User can place Market&Limit order on the exchange to trade the assets. The platform is entirely decentralized and is open source, you can be rest assured that your transactions are safe and trustless.

## Matching Engine
The smart contract implements a matching engine with NEAR's Rust smart contract language. It maintains two groups of orders, bid(buy) and ask(sell) orders with rust BinaryHeap data structure for fast searching inserting and prioritizing orders. The Matching Engine is generally responsible for determining if a set of two or more orders "match" and settle the orders.

## Project Setup 
### Compile and Deploy Contracts 
- cd contract
- ./build.sh
- ./deploy_testnet.sh

### Web
- cd src
- yarn && yarn serve
  
## Tech Stack Used
 - Vue
 - Rust
 - near-sdk-rs
 - near-api.js
 - Tailwind

## Screenshots
- Main page
![avatar](https://d112y698adiu2z.cloudfront.net/photos/production/software_photos/002/310/491/datas/original.jpg)

- Trading Page
![avatar](https://d112y698adiu2z.cloudfront.net/photos/production/software_photos/002/310/718/datas/original.jpg)

## [Demo Site](https://near-drab.vercel.app/)

## YouTube Demo

https://youtu.be/Mq8Bof4WNps

## Further Development Plan
- Implements an indexer for monitoring smart contract activities and record the activities accordingly.
- Persist the user trading history and market trading history to off-chain database for query.
- Optimize smart contract and improve UI & UX.  

'''
'''--- contract/Cargo.toml ---
[package]
name = "contract"
version = "1.0.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0-pre.8"
near-contract-standards = "4.0.0-pre.8"
uint = { version = "0.9.3", default-features = false }
orderbook = {path = "./orderbook-rs/"}
once_cell = "1.4.1"
parking_lot = "0.11.1"
events = {path = "./events/"}

[dev-dependencies]
near-sdk-sim = "4.0.0-pre.8"

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []
'''
'''--- contract/build.sh ---
#!/bin/sh

echo ">> Building contract"

rustup target add wasm32-unknown-unknown
cargo build --all --target wasm32-unknown-unknown --release
'''
'''--- contract/deploy.sh ---
near dev-deploy --wasmFile ./target/wasm32-unknown-unknown/release/contract.wasm
'''
'''--- contract/deploy_testnet.sh ---
#!/bin/bash

set -e 
sh build.sh
rm -rf .env
rm -rvf neardev

near dev-deploy --wasmFile ./target/wasm32-unknown-unknown/release/contract.wasm
source neardev/dev-account.env

CONTRACT=$CONTRACT_NAME
OWNER_ID=ower.$CONTRACT

echo "CONTRACT=$CONTRACT" > .env
echo "OWNER_ID=$OWNER_ID" >> .env

set -e

near create-account $OWNER_ID --masterAccount $CONTRACT --initialBalance 5

'''
'''--- contract/env.sh ---
ORDERBOOK=dev-1666763620236-35533333588687
'''
'''--- contract/events/Cargo.toml ---
[package]
name = "events"
version = "0.1.0"
authors = [""]
edition = "2018"

[dependencies]
near-sdk = "4.0.0-pre.8"
serde_json = "1.0"
'''
'''--- contract/events/src/lib.rs ---
use std::fmt;

use near_sdk::json_types::U128;
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{env, AccountId};

// use tonic_sdk_dex_types::*;

#[derive(Debug, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Event {
    #[serde(flatten)] // due to tagging options, this adds a "type" key and a "data" key
    pub data: EventType,
}

impl fmt::Display for Event {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(&serde_json::to_string(self).map_err(|_| fmt::Error)?)
    }
}

// we tag this with type/content and flatten it into the event struct. this is
// because serde sometimes has trouble figuring out which enum member the json
// corresponds to
#[derive(Debug, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde", tag = "type", content = "data")]
pub enum EventType {
    Order(NewOrderEvent),
    Fill(NewFillEvent),
    Cancel(NewCancelEvent),
    NewMarket(NewMarketEvent),
    MyEvent(NewMyEvent),
}

#[derive(Debug, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde", rename = "new_order")]
pub struct NewOrderEvent {
    pub account_id: AccountId,
    // pub order_id: OrderId,
    // pub market_id: MarketId,
    /// Price specified in the order. Zero (0) if market order
    pub limit_price: U128,
    /// Price rank. `None` if the order didn't post
    pub price_rank: Option<U128>,
    /// Quantity specified in the order; may not be the same as amount traded
    pub quantity: U128,
    // pub side: Side,
    // pub order_type: OrderType,
    /// Taker fee denominated in the quote currency
    pub taker_fee: U128,
    pub referrer_id: Option<AccountId>,
    /// Referrer rebate denominated in the quote currency
    pub referrer_rebate: U128,
    /// True if order created by an [Action::Swap]
    #[serde(default)] // backwards compatibility
    pub is_swap: bool,
}

#[derive(Debug, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde", rename = "cancel_order")]
pub struct NewCancelEvent {
    // pub market_id: MarketId,
    pub cancels: Vec<CancelEventData>,
}

#[derive(Debug, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde", rename = "cancel_order")]
pub struct CancelEventData {
    pub order_id: String,
    pub refund_amount: U128,
    pub cancelled_qty: U128,
    pub price_rank: U128,
}

#[derive(Debug, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde", rename = "new_market")]
pub struct NewMarketEvent {
    pub creator_id: AccountId,
    // pub market_id: MarketId,
    // pub base_token: TokenType,
    // pub quote_token: TokenType,
}

#[derive(Debug, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde", rename = "new_fill")]
pub struct NewFillEvent {
    // pub market_id: MarketId,
    // pub order_id: OrderId,
    pub fills: Vec<FillEventData>,
}

#[derive(Debug, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct FillEventData {
    // pub maker_order_id: OrderId,
    pub fill_qty: U128,
    pub fill_price: U128,
    pub quote_qty: U128,
    pub maker_rebate: U128,
    // the taker side
    // pub side: Side,
    pub taker_account_id: AccountId,
    pub maker_account_id: AccountId,
    /// Price rank of the maker order right before it was filled. This is always
    /// zero (0).
    pub maker_price_rank: U128,
}

#[derive(Debug, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct NewMyEvent {
    pub order_id: String,
}

pub fn emit_event(data: EventType) {
    #[cfg(not(feature = "no_emit"))]
    env::log_str(&Event { data }.to_string());
}

'''
'''--- contract/orderbook-rs/Cargo.toml ---
[package]
name = "orderbook"
version = "0.1.0"
authors = ["Anton Dort-Golts <dortgolts@gmail.com>"]

[dependencies]
serde = { version = "1.0.138", features = ["derive"] }
near-sdk = "4.0.0-pre.8"
near-contract-standards = "4.0.0-pre.8"
float-cmp = "0.8.0"
'''
'''--- contract/orderbook-rs/README.md ---
# Order matching engine (orderbook)

Project is just a basic order-matching engine (orderbook), created especially for learning Rust and internals of trading systems.

Each instance of orderbook is a single-threaded reactive module for the certain currency pair. It consumes orders and return vector of events, generated during processing.

Supported features:

* market orders
* limit orders
* amending limit order price/quantity
* cancelling limit order
* partial filling

## Usage
Full example code could be found in `bin/example.rs`. Here is event log created in processing test orders:

```
Order => NewLimitOrder { order_asset: BTC, price_asset: USD, side: Bid, price: 0.98, qty: 5.0, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 859954000 } }
Processing => [Ok(Accepted { id: 1, order_type: Limit, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860016000 } })]
Spread => not available

Order => NewLimitOrder { order_asset: BTC, price_asset: USD, side: Ask, price: 1.02, qty: 1.0, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 859954000 } }
Processing => [Ok(Accepted { id: 2, order_type: Limit, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860064000 } })]
Spread => bid: 0.98, ask: 1.02

Order => AmendOrder { id: 1, side: Bid, price: 0.99, qty: 4.0, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 859954000 } }
Processing => [Ok(Amended { id: 1, price: 0.99, qty: 4.0, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860094000 } })]
Spread => bid: 0.99, ask: 1.02

Order => NewLimitOrder { order_asset: BTC, price_asset: USD, side: Bid, price: 1.01, qty: 0.4, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 859955000 } }
Processing => [Ok(Accepted { id: 3, order_type: Limit, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860119000 } })]
Spread => bid: 1.01, ask: 1.02

Order => NewLimitOrder { order_asset: BTC, price_asset: USD, side: Ask, price: 1.03, qty: 0.5, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 859955000 } }
Processing => [Ok(Accepted { id: 4, order_type: Limit, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860155000 } })]
Spread => bid: 1.01, ask: 1.02

Order => NewMarketOrder { order_asset: BTC, price_asset: USD, side: Bid, qty: 1.0, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 859955000 } }
Processing => [Ok(Accepted { id: 5, order_type: Market, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860180000 } }), Ok(Filled { order_id: 5, side: Bid, order_type: Market, price: 1.02, qty: 1.0, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860183000 } }), Ok(Filled { order_id: 2, side: Ask, order_type: Limit, price: 1.02, qty: 1.0, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860183000 } })]
Spread => bid: 1.01, ask: 1.03

Order => NewLimitOrder { order_asset: BTC, price_asset: USD, side: Ask, price: 1.05, qty: 0.5, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 859955000 } }
Processing => [Ok(Accepted { id: 6, order_type: Limit, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860248000 } })]
Spread => bid: 1.01, ask: 1.03

Order => CancelOrder { id: 4, side: Ask }
Processing => [Ok(Cancelled { id: 4, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860291000 } })]
Spread => bid: 1.01, ask: 1.05

Order => NewLimitOrder { order_asset: BTC, price_asset: USD, side: Bid, price: 1.06, qty: 0.6, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 859955000 } }
Processing => [Ok(Accepted { id: 7, order_type: Limit, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860320000 } }), Ok(PartiallyFilled { order_id: 7, side: Bid, order_type: Limit, price: 1.05, qty: 0.5, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860325000 } }), Ok(Filled { order_id: 6, side: Ask, order_type: Limit, price: 1.05, qty: 0.5, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860325000 } })]
Spread => not available
```

'''
'''--- contract/orderbook-rs/src/bin/example.rs ---

extern crate orderbook;

use std::time::SystemTime;
use orderbook::{Orderbook, OrderSide, orders};

#[derive(PartialEq, Eq, Debug, Copy, Clone)]
pub enum BrokerAsset {
    USD,
    EUR,
    BTC,
    ETH,
}

fn parse_asset(asset: &str) -> Option<BrokerAsset> {
    match asset {
        "USD" => Some(BrokerAsset::USD),
        "EUR" => Some(BrokerAsset::EUR),
        "BTC" => Some(BrokerAsset::BTC),
        "ETH" => Some(BrokerAsset::ETH),
        _ => None,
    }
}

fn main() {
    // let mut orderbook = Orderbook::new(BrokerAsset::BTC, BrokerAsset::USD);
    // let order_asset = parse_asset("BTC").unwrap();
    // let price_asset = parse_asset("USD").unwrap();

    // // create order requests
    // let order_list =
    //     vec![
    //         orders::new_limit_order_request(
    //             order_asset,
    //             price_asset,
    //             OrderSide::Bid,
    //             0.98,
    //             5.0,
    //             SystemTime::now()
    //         ),

    //         orders::new_limit_order_request(
    //             order_asset,
    //             price_asset,
    //             OrderSide::Ask,
    //             1.02,
    //             1.0,
    //             SystemTime::now()
    //         ),

    //         orders::amend_order_request(1, OrderSide::Bid, 0.99, 4.0, SystemTime::now()),

    //         orders::new_limit_order_request(
    //             order_asset,
    //             price_asset,
    //             OrderSide::Bid,
    //             1.01,
    //             0.4,
    //             SystemTime::now()
    //         ),

    //         orders::new_limit_order_request(
    //             order_asset,
    //             price_asset,
    //             OrderSide::Ask,
    //             1.03,
    //             0.5,
    //             SystemTime::now()
    //         ),

    //         orders::new_market_order_request(order_asset, price_asset, OrderSide::Bid, 1.0, SystemTime::now()),

    //         orders::new_limit_order_request(
    //             order_asset,
    //             price_asset,
    //             OrderSide::Ask,
    //             1.05,
    //             0.5,
    //             SystemTime::now()
    //         ),

    //         orders::limit_order_cancel_request(4, OrderSide::Ask),

    //         orders::new_limit_order_request(
    //             order_asset,
    //             price_asset,
    //             OrderSide::Bid,
    //             1.06,
    //             0.6,
    //             SystemTime::now()
    //         ),
    //     ];

    // // processing
    // for order in order_list {
    //     println!("Order => {:?}", &order);
    //     let res = orderbook.process_order(order);
    //     println!("Processing => {:?}", res);
    //     if let Some((bid, ask)) = orderbook.current_spread() {
    //         println!("Spread => bid: {}, ask: {}\n", bid, ask);
    //     } else {
    //         println!("Spread => not available\n");
    //     }
    // }
}

'''
'''--- contract/orderbook-rs/src/engine/domain.rs ---
use std::fmt::Debug;

extern crate near_sdk;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::serde::{Deserialize, Serialize};

#[derive(Debug, Copy, Clone, BorshDeserialize, BorshSerialize, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub enum OrderSide {
    Bid,
    Ask,
}

impl Default for OrderSide {
    fn default() -> Self {
        OrderSide::Bid
    }
}

// #[derive(Default, Debug, Clone, BorshDeserialize, BorshSerialize)]
// pub struct Asset;

#[derive(Default, Debug, Clone, BorshDeserialize, BorshSerialize, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Order<Asset>
where
    Asset: Debug + Clone,
{
    pub order_id: u64,
    pub order_asset: Asset,
    pub price_asset: Asset,
    pub side: OrderSide,
    pub price: u128,
    pub qty: u128,
    pub account: String,
}

#[derive(Eq, PartialEq, Debug, Copy, Clone)]
pub enum OrderType {
    Market,
    Limit,
}

'''
'''--- contract/orderbook-rs/src/engine/mod.rs ---

pub mod domain;
pub mod orderbook;
pub mod order_queues;
pub mod orders;
pub mod sequence;
pub mod validation;

'''
'''--- contract/orderbook-rs/src/engine/order_queues.rs ---
use super::domain::OrderSide;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{env, AccountId};
use std::cmp::Ordering;
use std::collections::{BinaryHeap, HashMap};
#[derive(Clone, BorshDeserialize, BorshSerialize, Debug, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct OrderIndex {
    pub id: u64,
    pub price: u128,
    pub timestamp: u64,
    pub order_side: OrderSide,
}

// Arrange at first by price and after that by time

impl Ord for OrderIndex {
    fn cmp(&self, other: &Self) -> Ordering {
        if self.price < other.price {
            match self.order_side {
                OrderSide::Bid => Ordering::Less,
                OrderSide::Ask => Ordering::Greater,
            }
        } else if self.price > other.price {
            match self.order_side {
                OrderSide::Bid => Ordering::Greater,
                OrderSide::Ask => Ordering::Less,
            }
        } else {
            // FIFO
            other.timestamp.cmp(&self.timestamp)
        }
    }
}

impl PartialOrd for OrderIndex {
    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
        Some(self.cmp(other))
    }
}

impl PartialEq for OrderIndex {
    fn eq(&self, other: &Self) -> bool {
        if self.price > other.price || self.price < other.price {
            false
        } else {
            self.timestamp == other.timestamp
        }
    }
}

impl Eq for OrderIndex {}

/// Public methods
#[derive(Default, BorshDeserialize, BorshSerialize, Clone, Debug, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct OrderQueue<T> {
    // use Option in order to replace heap in mutable borrow
    pub idx_queue: Option<BinaryHeap<OrderIndex>>,
    orders: HashMap<u64, T>,
    // op_counter: u64,
    // max_stalled: u64,
    queue_side: OrderSide,
}

impl<T> OrderQueue<T> {
    /// Create new order queue
    ///
    /// Queue is universal and could be used for both asks and bids
    pub fn new(side: OrderSide, max_stalled: u64, capacity: usize) -> Self {
        OrderQueue {
            idx_queue: Some(BinaryHeap::with_capacity(capacity)),
            orders: HashMap::with_capacity(capacity),
            // op_counter: 0,
            // max_stalled,
            queue_side: side,
        }
    }

    pub fn peek(&mut self) -> Option<&T> {
        // get best order ID
        let order_id = self.get_current_order_id()?;

        // obtain order info
        if self.orders.contains_key(&order_id) {
            self.orders.get(&order_id)
        } else {
            self.idx_queue.as_mut().unwrap().pop()?;
            self.peek()
        }
    }

    pub fn pop(&mut self) -> Option<T> {
        // remove order index from queue in any case
        let order_id = self.idx_queue.as_mut()?.pop()?.id;

        if self.orders.contains_key(&order_id) {
            self.orders.remove(&order_id)
        } else {
            self.pop()
        }
    }

    // Add new limit order to the queue
    pub fn insert(&mut self, id: u64, price: u128, ts: u64, order: T) -> bool {
        if self.orders.contains_key(&id) {
            // do not update existing order
            return false;
        }

        // store new order
        self.idx_queue.as_mut().unwrap().push(OrderIndex {
            id,
            price,
            timestamp: env::block_timestamp(),
            order_side: self.queue_side,
        });
        self.orders.insert(id, order);
        true
    }

    // use it when price was changed
    pub fn amend(&mut self, id: u64, price: u128, ts: u64, order: T) -> bool {
        if self.orders.contains_key(&id) {
            // store new order data
            self.orders.insert(id, order);
            self.rebuild_idx(id, price, ts);
            true
        } else {
            false
        }
    }

    pub fn cancel(&mut self, id: u64) -> bool {
        match self.orders.remove(&id) {
            Some(_) => {
                self.clean_check();
                true
            }
            None => false,
        }
    }

    /* Internal methods */

    /// Used internally when current order is partially matched.
    ///
    /// Note: do not modify price or time, cause index doesn't change!
    pub fn modify_current_order(&mut self, new_order: T) -> bool {
        if let Some(order_id) = self.get_current_order_id() {
            if self.orders.contains_key(&order_id) {
                self.orders.insert(order_id, new_order);
                return true;
            }
        }
        false
    }

    /// Verify if queue should be cleaned
    fn clean_check(&mut self) {
        // if self.op_counter > self.max_stalled {
        //     self.op_counter = 0;
        //     self.remove_stalled()
        // } else {
        //     self.op_counter += 1;
        // }
    }

    /// Remove dangling indices without orders from queue
    fn remove_stalled(&mut self) {
        if let Some(idx_queue) = self.idx_queue.take() {
            let mut active_orders = idx_queue.into_vec();
            active_orders.retain(|order_ptr| self.orders.contains_key(&order_ptr.id));
            self.idx_queue = Some(BinaryHeap::from(active_orders));
        }
    }

    /// Recreate order-index queue with changed index info
    fn rebuild_idx(&mut self, id: u64, price: u128, ts: u64) {
        if let Some(idx_queue) = self.idx_queue.take() {
            // deconstruct queue
            let mut active_orders = idx_queue.into_vec();
            // remove old idx value
            active_orders.retain(|order_ptr| order_ptr.id != id);
            // insert new one
            active_orders.push(OrderIndex {
                id,
                price,
                timestamp: env::block_timestamp(),
                order_side: self.queue_side,
            });
            // construct new queue
            let amended_queue = BinaryHeap::from(active_orders);
            self.idx_queue = Some(amended_queue);
        }
    }

    /// Return ID of current order in queue
    fn get_current_order_id(&self) -> Option<u64> {
        let order_id = self.idx_queue.as_ref()?.peek()?;
        Some(order_id.id)
    }

    pub fn get_order(&self, id: u64) -> &T {
        self.orders.get(&id).unwrap()
    }
}

#[cfg(test)]
mod test {
    use super::*;

    #[derive(Debug, Eq, PartialEq)]
    struct TestOrder {
        pub name: &'static str,
    }

    fn get_queue_empty(side: OrderSide) -> OrderQueue<TestOrder> {
        OrderQueue::new(side, 5, 10)
    }

    fn get_queue_bids() -> OrderQueue<TestOrder> {
        let mut bid_queue = get_queue_empty(OrderSide::Bid);

        assert!(bid_queue.insert(1, 1.01, 123, TestOrder { name: "low bid" },));
        assert!(bid_queue.insert(
            2,
            1.02,
            123,
            TestOrder {
                name: "high bid first"
            },
        ));
        // same price but later
        assert!(bid_queue.insert(
            3,
            1.02,
            123,
            TestOrder {
                name: "high bid second"
            },
        ));
        assert_eq!(bid_queue.peek().unwrap().name, "high bid first");

        bid_queue
    }

    fn get_queue_asks() -> OrderQueue<TestOrder> {
        let mut ask_queue = get_queue_empty(OrderSide::Ask);
        assert!(ask_queue.insert(
            1,
            1.01,
            123,
            TestOrder {
                name: "low ask first"
            },
        ));
        assert!(ask_queue.insert(2, 1.02, 123, TestOrder { name: "high ask" },));
        assert!(ask_queue.insert(
            3,
            1.01,
            123,
            TestOrder {
                name: "low ask second"
            },
        ));
        assert_eq!(ask_queue.peek().unwrap().name, "low ask first");

        ask_queue
    }

    #[test]
    fn queue_operations_insert_unique() {
        let mut bid_queue = get_queue_empty(OrderSide::Bid);
        assert_eq!(bid_queue.peek(), None);

        // insert unique
        assert!(bid_queue.insert(1, 1.01, 123, TestOrder { name: "first bid" },));

        // discard order with existing ID
        assert!(!bid_queue.insert(
            1,
            1.02,
            123,
            TestOrder {
                name: "another first bid"
            },
        ));
    }

    #[test]
    fn queue_operations_ordering_bid() {
        let mut bid_queue = get_queue_bids();

        assert_eq!(bid_queue.pop().unwrap().name, "high bid first");
        assert_eq!(bid_queue.pop().unwrap().name, "high bid second");
        assert_eq!(bid_queue.pop().unwrap().name, "low bid");
    }

    #[test]
    fn queue_operations_ordering_ask() {
        let mut ask_queue = get_queue_asks();

        assert_eq!(ask_queue.pop().unwrap().name, "low ask first");
        assert_eq!(ask_queue.pop().unwrap().name, "low ask second");
        assert_eq!(ask_queue.pop().unwrap().name, "high ask");
    }

    #[test]
    fn queue_operations_modify_order() {
        let mut bid_queue = get_queue_bids();

        assert!(bid_queue.modify_current_order(TestOrder {
            name: "current bid partially matched"
        },));

        assert_eq!(
            bid_queue.pop().unwrap().name,
            "current bid partially matched"
        );
        assert_eq!(bid_queue.pop().unwrap().name, "high bid second");
        assert_eq!(bid_queue.pop().unwrap().name, "low bid");
    }

    #[test]
    fn queue_operations_amend() {
        let mut ask_queue = get_queue_asks();

        // amend two orders in the queue
        assert!(ask_queue.amend(2, 0.99, 123, TestOrder { name: "new first" },));
        assert!(ask_queue.amend(1, 1.01, 123, TestOrder { name: "new last" },));
        // non-exist order
        assert!(!ask_queue.amend(
            4,
            3.03,
            123,
            TestOrder {
                name: "nonexistent"
            },
        ));

        assert_eq!(ask_queue.pop().unwrap().name, "new first");
        assert_eq!(ask_queue.pop().unwrap().name, "low ask second");
        assert_eq!(ask_queue.pop().unwrap().name, "new last");
    }

    #[test]
    fn queue_operations_cancel_order1() {
        let mut bid_queue = get_queue_bids();

        bid_queue.cancel(2);

        assert_eq!(bid_queue.pop().unwrap().name, "high bid second");
        assert_eq!(bid_queue.pop().unwrap().name, "low bid");
    }

    #[test]
    fn queue_operations_cancel_order2() {
        let mut ask_queue = get_queue_asks();

        ask_queue.cancel(3);

        assert_eq!(ask_queue.pop().unwrap().name, "low ask first");
        assert_eq!(ask_queue.pop().unwrap().name, "high ask");
    }
}

'''
'''--- contract/orderbook-rs/src/engine/orderbook.rs ---
use std::fmt::Debug;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::env;
use near_sdk::serde::{Deserialize, Serialize};

use super::domain::{Order, OrderSide, OrderType};
use super::order_queues::OrderQueue;
use super::orders::OrderRequest;
use super::sequence;
use super::validation::OrderRequestValidator;

const MIN_SEQUENCE_ID: u64 = 1;
const MAX_SEQUENCE_ID: u64 = 1000;
const MAX_STALLED_INDICES_IN_QUEUE: u64 = 10;
const ORDER_QUEUE_INIT_CAPACITY: usize = 500;

pub type OrderProcessingResult = Vec<Result<Success, Failed>>;

#[derive(Debug)]
pub enum Success {
    Accepted {
        id: u64,
        order_type: OrderType,
        order_creator: String,
        ts: u64,
    },

    Filled {
        order_id: u64,
        side: OrderSide,
        order_type: OrderType,
        price: u128,
        qty: u128,
        order_creator: String,
        ts: u64,
    },

    PartiallyFilled {
        order_id: u64,
        side: OrderSide,
        order_type: OrderType,
        price: u128,
        qty: u128,
        order_creator: String,
        ts: u64,
    },

    Amended {
        id: u64,
        price: u128,
        qty: u128,
        ts: u64,
    },

    Cancelled {
        id: u64,
        ts: u64,
    },
}

#[derive(Debug)]
pub enum Failed {
    ValidationFailed(String),
    DuplicateOrderID(u64),
    NoMatch(u64),
    OrderNotFound(u64),
}

#[derive(Debug, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct L2OpenLimitOrderView {
    pub price: u128,
    pub qty: u128,
}

#[derive(Default, BorshDeserialize, BorshSerialize, Clone, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Orderbook<Asset>
where
    Asset: Debug + Clone + Copy + Eq,
{
    order_asset: Asset,
    price_asset: Asset,
    pub bid_queue: OrderQueue<Order<Asset>>,
    pub ask_queue: OrderQueue<Order<Asset>>,
    seq: sequence::TradeSequence,
    order_validator: OrderRequestValidator<Asset>,
}

impl<Asset> Orderbook<Asset>
where
    Asset: Debug + Clone + Copy + Eq,
{
    /// Create new orderbook for pair of assets
    ///
    /// # Examples
    ///
    /// Basic usage:
    /// ```
    /// let mut orderbook = Orderbook::new(Asset::BTC, Asset::USD);
    /// let result = orderbook.process_order(OrderRequest::MarketOrder{  });
    /// assert_eq!(orderbook)
    /// ```
    // todo fix doc test!
    pub fn new(order_asset: Asset, price_asset: Asset) -> Self {
        Orderbook {
            order_asset,
            price_asset,
            bid_queue: OrderQueue::new(
                OrderSide::Bid,
                MAX_STALLED_INDICES_IN_QUEUE,
                ORDER_QUEUE_INIT_CAPACITY,
            ),
            ask_queue: OrderQueue::new(
                OrderSide::Ask,
                MAX_STALLED_INDICES_IN_QUEUE,
                ORDER_QUEUE_INIT_CAPACITY,
            ),
            seq: sequence::new_sequence_gen(MIN_SEQUENCE_ID, MAX_SEQUENCE_ID),
            order_validator: OrderRequestValidator::new(
                order_asset,
                price_asset,
                MIN_SEQUENCE_ID,
                MAX_SEQUENCE_ID,
            ),
        }
    }

    pub fn process_order(&mut self, order: OrderRequest<Asset>) -> OrderProcessingResult {
        // processing result accumulator
        let mut proc_result: OrderProcessingResult = vec![];

        // validate request
        if let Err(reason) = self.order_validator.validate(&order) {
            proc_result.push(Err(Failed::ValidationFailed(String::from(reason))));
            return proc_result;
        }
        let account_id = env::predecessor_account_id();
        match order {
            OrderRequest::NewMarketOrder {
                order_asset,
                price_asset,
                side,
                qty,
                ts: _ts,
                account_id,
            } => {
                // generate new ID for order
                let order_id = self.seq.next_id();
                proc_result.push(Ok(Success::Accepted {
                    id: order_id,
                    order_type: OrderType::Market,
                    order_creator: account_id.to_string(),
                    ts: 123,
                }));

                self.process_market_order(
                    &mut proc_result,
                    order_id,
                    order_asset,
                    price_asset,
                    side,
                    qty,
                    account_id.to_string(),
                );
            }

            OrderRequest::NewLimitOrder {
                order_asset,
                price_asset,
                side,
                price,
                qty,
                ts,
                account,
            } => {
                let order_id = self.seq.next_id();
                proc_result.push(Ok(Success::Accepted {
                    id: order_id,
                    order_type: OrderType::Limit,
                    order_creator: account_id.to_string(),
                    ts: 123,
                }));

                self.process_limit_order(
                    &mut proc_result,
                    order_id,
                    order_asset,
                    price_asset,
                    side,
                    price,
                    qty,
                    ts,
                    account_id.to_string(),
                );
            }

            OrderRequest::AmendOrder {
                id,
                side,
                price,
                qty,
                ts,
            } => {
                self.process_order_amend(&mut proc_result, id, side, price, qty, ts);
            }

            OrderRequest::CancelOrder { id, side } => {
                self.process_order_cancel(&mut proc_result, id, side);
            }
        }

        // return collected processing results
        proc_result
    }

    /// Get current spread as a tuple: (bid, ask)
    pub fn current_spread(&mut self) -> Option<(u128, u128)> {
        let bid = self.bid_queue.peek()?.price;
        let ask = self.ask_queue.peek()?.price;
        Some((bid, ask))
    }

    /* Processing logic */

    fn process_market_order(
        &mut self,
        results: &mut OrderProcessingResult,
        order_id: u64,
        order_asset: Asset,
        price_asset: Asset,
        side: OrderSide,
        qty: u128,
        account: String,
    ) {
        // get copy of the current limit order
        let opposite_order_result = {
            let opposite_queue = match side {
                OrderSide::Bid => &mut self.ask_queue,
                OrderSide::Ask => &mut self.bid_queue,
            };
            opposite_queue.peek().cloned()
        };

        if let Some(opposite_order) = opposite_order_result {
            let matching_complete = self.order_matching(
                results,
                &opposite_order,
                order_id,
                order_asset,
                price_asset,
                OrderType::Market,
                side,
                qty,
                &account,
            );

            if !matching_complete {
                // match the rest
                self.process_market_order(
                    results,
                    order_id,
                    order_asset,
                    price_asset,
                    side,
                    qty - opposite_order.qty,
                    account.clone(),
                );
            }
        } else {
            // no limit orders found
            results.push(Err(Failed::NoMatch(order_id)));
        }
    }

    fn process_limit_order(
        &mut self,
        results: &mut OrderProcessingResult,
        order_id: u64,
        order_asset: Asset,
        price_asset: Asset,
        side: OrderSide,
        price: u128,
        qty: u128,
        ts: u64,
        account: String,
    ) {
        // take a look at current opposite limit order
        let opposite_order_result = {
            let opposite_queue = match side {
                OrderSide::Bid => &mut self.ask_queue,
                OrderSide::Ask => &mut self.bid_queue,
            };
            opposite_queue.peek().cloned()
        };

        if let Some(opposite_order) = opposite_order_result {
            let could_be_matched = match side {
                // verify bid/ask price overlap
                OrderSide::Bid => price >= opposite_order.price,
                OrderSide::Ask => price <= opposite_order.price,
            };

            if could_be_matched {
                // match immediately
                let matching_complete = self.order_matching(
                    results,
                    &opposite_order,
                    order_id,
                    order_asset,
                    price_asset,
                    OrderType::Limit,
                    side,
                    qty,
                    &account,
                );

                if !matching_complete {
                    // process the rest of new limit order
                    self.process_limit_order(
                        results,
                        order_id,
                        order_asset,
                        price_asset,
                        side,
                        price,
                        qty - opposite_order.qty,
                        ts,
                        account,
                    );
                }
            } else {
                // just insert new order in queue
                self.store_new_limit_order(
                    results,
                    order_id,
                    order_asset,
                    price_asset,
                    side,
                    price,
                    qty,
                    ts,
                    account,
                );
            }
        } else {
            self.store_new_limit_order(
                results,
                order_id,
                order_asset,
                price_asset,
                side,
                price,
                qty,
                ts,
                account,
            );
        }
    }

    fn process_order_amend(
        &mut self,
        results: &mut OrderProcessingResult,
        order_id: u64,
        side: OrderSide,
        price: u128,
        qty: u128,
        ts: u64,
    ) {
        let order_queue = match side {
            OrderSide::Bid => &mut self.bid_queue,
            OrderSide::Ask => &mut self.ask_queue,
        };

        if order_queue.amend(
            order_id,
            price,
            ts,
            Order {
                order_id,
                order_asset: self.order_asset,
                price_asset: self.price_asset,
                side,
                price,
                qty,
                account: "test".to_string(),
            },
        ) {
            results.push(Ok(Success::Amended {
                id: order_id,
                price,
                qty,
                ts: 123,
            }));
        } else {
            results.push(Err(Failed::OrderNotFound(order_id)));
        }
    }

    fn process_order_cancel(
        &mut self,
        results: &mut OrderProcessingResult,
        order_id: u64,
        side: OrderSide,
    ) {
        let order_queue = match side {
            OrderSide::Bid => &mut self.bid_queue,
            OrderSide::Ask => &mut self.ask_queue,
        };

        if order_queue.cancel(order_id) {
            results.push(Ok(Success::Cancelled {
                id: order_id,
                ts: 123,
            }));
        } else {
            results.push(Err(Failed::OrderNotFound(order_id)));
        }
    }

    /* Helpers */

    fn store_new_limit_order(
        &mut self,
        results: &mut OrderProcessingResult,
        order_id: u64,
        order_asset: Asset,
        price_asset: Asset,
        side: OrderSide,
        price: u128,
        qty: u128,
        ts: u64,
        account: String,
    ) {
        let order_queue = match side {
            OrderSide::Bid => &mut self.bid_queue,
            OrderSide::Ask => &mut self.ask_queue,
        };
        if !order_queue.insert(
            order_id,
            price,
            ts,
            Order {
                order_id,
                order_asset,
                price_asset,
                side,
                price,
                qty,
                account: account.clone(),
            },
        ) {
            results.push(Err(Failed::DuplicateOrderID(order_id)))
        };
    }

    fn order_matching(
        &mut self,
        results: &mut OrderProcessingResult,
        opposite_order: &Order<Asset>,
        order_id: u64,
        order_asset: Asset,
        price_asset: Asset,
        order_type: OrderType,
        side: OrderSide,
        qty: u128,
        account: &str,
    ) -> bool {
        // real processing time
        let deal_time = env::block_timestamp();

        // match immediately
        if qty < opposite_order.qty {
            // fill new limit and modify opposite limit

            // report filled new order
            results.push(Ok(Success::Filled {
                order_id,
                side,
                order_type,
                price: opposite_order.price,
                qty,
                order_creator: opposite_order.account.clone(),
                ts: deal_time,
            }));

            // report partially filled opposite limit order
            results.push(Ok(Success::PartiallyFilled {
                order_id: opposite_order.order_id,
                side: opposite_order.side,
                order_type: OrderType::Limit,
                price: opposite_order.price,
                qty,
                order_creator: opposite_order.account.clone(),
                ts: deal_time,
            }));

            // modify unmatched part of the opposite limit order
            {
                let opposite_queue = match side {
                    OrderSide::Bid => &mut self.ask_queue,
                    OrderSide::Ask => &mut self.bid_queue,
                };
                opposite_queue.modify_current_order(Order {
                    order_id: opposite_order.order_id,
                    order_asset,
                    price_asset,
                    side: opposite_order.side,
                    price: opposite_order.price,
                    qty: opposite_order.qty - qty,
                    account: "test".to_string(),
                });
            }
        } else if qty > opposite_order.qty {
            // partially fill new limit order, fill opposite limit and notify to process the rest

            // report new order partially filled
            results.push(Ok(Success::PartiallyFilled {
                order_id,
                side,
                order_type,
                price: opposite_order.price,
                qty: opposite_order.qty,
                order_creator: opposite_order.account.clone(),
                ts: deal_time,
            }));

            // report filled opposite limit order
            results.push(Ok(Success::Filled {
                order_id: opposite_order.order_id,
                side: opposite_order.side,
                order_type: OrderType::Limit,
                price: opposite_order.price,
                qty: opposite_order.qty,
                order_creator: opposite_order.account.clone(),
                ts: deal_time,
            }));

            // remove filled limit order from the queue
            {
                let opposite_queue = match side {
                    OrderSide::Bid => &mut self.ask_queue,
                    OrderSide::Ask => &mut self.bid_queue,
                };
                opposite_queue.pop();
            }

            // matching incomplete
            return false;
        } else {
            // orders exactly match -> fill both and remove old limit

            // report filled new order
            results.push(Ok(Success::Filled {
                order_id,
                side,
                order_type,
                price: opposite_order.price,
                qty,
                order_creator: opposite_order.account.clone(),
                ts: deal_time,
            }));
            // report filled opposite limit order
            results.push(Ok(Success::Filled {
                order_id: opposite_order.order_id,
                side: opposite_order.side,
                order_type: OrderType::Limit,
                price: opposite_order.price,
                qty,
                order_creator: opposite_order.account.clone(),
                ts: deal_time,
            }));

            // remove filled limit order from the queue
            {
                let opposite_queue = match side {
                    OrderSide::Bid => &mut self.ask_queue,
                    OrderSide::Ask => &mut self.bid_queue,
                };
                opposite_queue.pop();
            }
        }

        // complete matching
        true
    }
}

#[cfg(test)]
mod test {

    use super::super::orders;
    use super::*;

    #[derive(PartialEq, Eq, Debug, Copy, Clone)]
    pub enum Asset {
        USD,
        BTC,
    }

    #[test]
    fn cancel_nonexisting() {
        let mut orderbook = Orderbook::new(Asset::BTC, Asset::USD);
        let request = orders::limit_order_cancel_request(1, OrderSide::Bid);
        let mut result = orderbook.process_order(request);

        assert_eq!(result.len(), 1);
        match result.pop().unwrap() {
            Err(_) => (),
            _ => panic!("unexpected events"),
        }
    }
}

'''
'''--- contract/orderbook-rs/src/engine/orders.rs ---
use super::domain::OrderSide;
use near_sdk::AccountId;
use std::fmt::Debug;

#[derive(Debug)]
pub enum OrderRequest<Asset>
where
    Asset: Debug + Clone,
{
    NewMarketOrder {
        order_asset: Asset,
        price_asset: Asset,
        side: OrderSide,
        qty: u128,
        ts: u64,
        account_id: AccountId,
    },

    NewLimitOrder {
        order_asset: Asset,
        price_asset: Asset,
        side: OrderSide,
        price: u128,
        qty: u128,
        ts: u64,
        account: String,
    },

    AmendOrder {
        id: u64,
        side: OrderSide,
        price: u128,
        qty: u128,
        ts: u64,
    },

    CancelOrder {
        id: u64,
        side: OrderSide,
        //ts: SystemTime,
    },
}

/* Constructors */

/// Create request for the new market order
pub fn new_market_order_request<Asset>(
    order_asset: Asset,
    price_asset: Asset,
    side: OrderSide,
    qty: u128,
    ts: u64,
    account_id: AccountId,
) -> OrderRequest<Asset>
where
    Asset: Debug + Clone,
{
    OrderRequest::NewMarketOrder {
        order_asset,
        price_asset,
        qty,
        side,
        ts,
        account_id,
    }
}

/// Create request for the new limit order
pub fn new_limit_order_request<Asset>(
    order_asset: Asset,
    price_asset: Asset,
    side: OrderSide,
    price: u128,
    qty: u128,
    ts: u64,
    account: String,
) -> OrderRequest<Asset>
where
    Asset: Debug + Clone,
{
    OrderRequest::NewLimitOrder {
        order_asset,
        price_asset,
        side,
        price,
        qty,
        ts,
        account,
    }
}

/// Create request for changing price/qty for the active limit order.
///
/// Note: do not change order side!
/// Instead cancel existing order and create a new one.
pub fn amend_order_request<Asset>(
    id: u64,
    side: OrderSide,
    price: u128,
    qty: u128,
    ts: u64,
) -> OrderRequest<Asset>
where
    Asset: Debug + Clone,
{
    OrderRequest::AmendOrder {
        id,
        side,
        price,
        qty,
        ts,
    }
}

/// Create request for cancelling active limit order
pub fn limit_order_cancel_request<Asset>(order_id: u64, side: OrderSide) -> OrderRequest<Asset>
where
    Asset: Debug + Clone,
{
    OrderRequest::CancelOrder { id: order_id, side }
}

'''
'''--- contract/orderbook-rs/src/engine/sequence.rs ---

extern crate near_sdk;
// use self::near_sdk::serde::Serialize;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::serde::{Deserialize, Serialize};

#[derive(Default, BorshDeserialize, BorshSerialize, Clone, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
// Rotating index sequence
pub struct TradeSequence {
    min_id: u64,
    max_id: u64,
    current_idx: u64,
}

impl TradeSequence {
    pub fn next_id(&mut self) -> u64 {
        let next_id = self.current_idx;

        // update index
        if (next_id + 1) <= self.max_id {
            self.current_idx += 1;
        } else {
            self.current_idx = self.min_id;
        }

        next_id
    }
}

pub fn new_sequence_gen(min: u64, max: u64) -> TradeSequence {
    TradeSequence {
        min_id: min,
        max_id: max,
        current_idx: min,
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn seq_from_zero() {
        let mut seq_gen = new_sequence_gen(0, 2);

        assert_eq!(seq_gen.current_idx, 0);
        assert_eq!(seq_gen.next_id(), 0);
        assert_eq!(seq_gen.next_id(), 1);
        assert_eq!(seq_gen.next_id(), 2);
        assert_eq!(seq_gen.next_id(), 0);
    }

    #[test]
    fn seq_from_positive() {
        let mut seq_gen = new_sequence_gen(1, 2);

        assert_eq!(seq_gen.current_idx, 1);
        assert_eq!(seq_gen.next_id(), 1);
        assert_eq!(seq_gen.next_id(), 2);
        assert_eq!(seq_gen.next_id(), 1);
    }
}

'''
'''--- contract/orderbook-rs/src/engine/validation.rs ---
use super::orders::OrderRequest;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::serde::{Deserialize, Serialize};
use std::fmt::Debug;
/// Validation errors
const ERR_BAD_ORDER_ASSET: &str = "bad order asset";
const ERR_BAD_PRICE_ASSET: &str = "bad price asset";
const ERR_BAD_PRICE_VALUE: &str = "price must be non-negative";
const ERR_BAD_QUANTITY_VALUE: &str = "quantity must be non-negative";
const ERR_BAD_SEQ_ID: &str = "order ID out of range";

/* Validators */
#[derive(Default, BorshDeserialize, BorshSerialize, Clone, Serialize, Deserialize)]
pub struct OrderRequestValidator<Asset> {
    orderbook_order_asset: Asset,
    orderbook_price_asset: Asset,
    min_sequence_id: u64,
    max_sequence_id: u64,
}

impl<Asset> OrderRequestValidator<Asset>
where
    Asset: Debug + Clone + Copy + Eq,
{
    pub fn new(
        orderbook_order_asset: Asset,
        orderbook_price_asset: Asset,
        min_sequence_id: u64,
        max_sequence_id: u64,
    ) -> Self {
        OrderRequestValidator {
            orderbook_order_asset,
            orderbook_price_asset,
            min_sequence_id,
            max_sequence_id,
        }
    }

    pub fn validate(&self, request: &OrderRequest<Asset>) -> Result<(), &str> {
        match *request {
            OrderRequest::NewMarketOrder {
                order_asset,
                price_asset,
                side: _side,
                qty,
                ts: _ts,
                account_id: _,
            } => self.validate_market(order_asset, price_asset, qty),

            OrderRequest::NewLimitOrder {
                order_asset,
                price_asset,
                side: _side,
                price,
                qty,
                ts: _ts,
                account: _,
            } => self.validate_limit(order_asset, price_asset, price, qty),

            OrderRequest::AmendOrder {
                id,
                price,
                side: _side,
                qty,
                ts: _ts,
            } => self.validate_amend(id, price, qty),

            OrderRequest::CancelOrder { id, side: _side } => self.validate_cancel(id),
        }
    }

    /* Internal validators */

    fn validate_market(
        &self,
        order_asset: Asset,
        price_asset: Asset,
        qty: u128,
    ) -> Result<(), &str> {
        if self.orderbook_order_asset != order_asset {
            return Err(ERR_BAD_ORDER_ASSET);
        }

        if self.orderbook_price_asset != price_asset {
            return Err(ERR_BAD_PRICE_ASSET);
        }

        if qty <= 0 {
            return Err(ERR_BAD_QUANTITY_VALUE);
        }

        Ok(())
    }

    fn validate_limit(
        &self,
        order_asset: Asset,
        price_asset: Asset,
        price: u128,
        qty: u128,
    ) -> Result<(), &str> {
        if self.orderbook_order_asset != order_asset {
            return Err(ERR_BAD_ORDER_ASSET);
        }

        if self.orderbook_price_asset != price_asset {
            return Err(ERR_BAD_PRICE_ASSET);
        }

        if price <= 0 {
            return Err(ERR_BAD_PRICE_VALUE);
        }

        if qty <= 0 {
            return Err(ERR_BAD_QUANTITY_VALUE);
        }

        Ok(())
    }

    fn validate_amend(&self, id: u64, price: u128, qty: u128) -> Result<(), &str> {
        if self.min_sequence_id > id || self.max_sequence_id < id {
            return Err(ERR_BAD_SEQ_ID);
        }

        if price <= 0 {
            return Err(ERR_BAD_PRICE_VALUE);
        }

        if qty <= 0 {
            return Err(ERR_BAD_QUANTITY_VALUE);
        }

        Ok(())
    }

    fn validate_cancel(&self, id: u64) -> Result<(), &str> {
        if self.min_sequence_id > id || self.max_sequence_id < id {
            return Err(ERR_BAD_SEQ_ID);
        }

        Ok(())
    }
}

'''
'''--- contract/orderbook-rs/src/lib.rs ---
mod engine;
extern crate near_sdk;

pub use engine::domain::{Order, OrderSide};
pub use engine::order_queues::{OrderIndex, OrderQueue};
pub use engine::orderbook::{
    Failed, L2OpenLimitOrderView, OrderProcessingResult, Orderbook, Success,
};
pub use engine::orders;

#[cfg(test)]
mod tests {
    use super::*;

    const FLOAT_THRESHOLD: f64 = 1e-6;

    fn match_float(expected: f64, get: f64) -> bool {
        if (expected - get).abs() < FLOAT_THRESHOLD {
            true
        } else {
            false
        }
    }

    #[derive(PartialEq, Eq, Debug, Copy, Clone, Hash)]
    enum Asset {
        USD,
        EUR,
        BTC,
        ETH,
    }

    fn parse_asset(asset: &str) -> Option<Asset> {
        match asset {
            "USD" => Some(Asset::USD),
            "EUR" => Some(Asset::EUR),
            "BTC" => Some(Asset::BTC),
            "ETH" => Some(Asset::ETH),
            _ => None,
        }
    }

    #[test]
    fn market_order_on_empty_orderbook() {
        use std::time::SystemTime;

        let mut orderbook = Orderbook::new(Asset::BTC, Asset::USD);
        let order_asset = parse_asset("BTC").unwrap();
        let price_asset = parse_asset("USD").unwrap();

        let order1 = orders::new_market_order_request(
            order_asset,
            price_asset,
            OrderSide::Bid,
            2.0,
            SystemTime::now(),
        );

        // process market order
        let res = orderbook.process_order(order1);

        if !match res[0] {
            Ok(Success::Accepted { id: 1, .. }) => true,
            _ => false,
        } || !match res[1] {
            Err(Failed::NoMatch(1)) => true,
            _ => false,
        } {
            panic!("unexpected event sequence: {:?}", res)
        }
    }

    #[test]
    fn market_order_partial_match() {
        use std::time::SystemTime;

        let mut orderbook = Orderbook::new(Asset::BTC, Asset::USD);
        let order_asset = parse_asset("BTC").unwrap();
        let price_asset = parse_asset("USD").unwrap();

        let order1 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Bid,
            10.0,
            1.0,
            SystemTime::now(),
        );

        let order2 = orders::new_market_order_request(
            order_asset,
            price_asset,
            OrderSide::Ask,
            0.5,
            SystemTime::now(),
        );

        orderbook.process_order(order1);
        let res = orderbook.process_order(order2);

        if !match res[0] {
            Ok(Success::Accepted { id: 2, .. }) => true,
            _ => false,
        } || !match res[1] {
            Ok(Success::Filled {
                order_id: 2,
                price,
                qty,
                ..
            }) if match_float(price, 10.0) && match_float(qty, 0.5) => true,
            _ => false,
        } || !match res[2] {
            Ok(Success::PartiallyFilled {
                order_id: 1,
                price,
                qty,
                ..
            }) if match_float(price, 10.0) && match_float(qty, 0.5) => true,
            _ => false,
        } {
            panic!("unexpected event sequence: {:?}", res)
        }
    }

    #[test]
    fn market_order_two_orders_match() {
        use std::time::SystemTime;

        let mut orderbook = Orderbook::new(Asset::BTC, Asset::USD);
        let order_asset = parse_asset("BTC").unwrap();
        let price_asset = parse_asset("USD").unwrap();

        let order1 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Bid,
            10.0,
            1.0,
            SystemTime::now(),
        );

        let order2 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Bid,
            12.0,
            1.0,
            SystemTime::now(),
        );

        let order3 = orders::new_market_order_request(
            order_asset,
            price_asset,
            OrderSide::Ask,
            1.5,
            SystemTime::now(),
        );

        orderbook.process_order(order1);
        orderbook.process_order(order2);
        let res = orderbook.process_order(order3);

        if !match res[0] {
            Ok(Success::Accepted { id: 3, .. }) => true,
            _ => false,
        } || !match res[1] {
            Ok(Success::PartiallyFilled {
                order_id: 3,
                price,
                qty,
                ..
            }) if match_float(price, 12.0) && match_float(qty, 1.0) => true,
            _ => false,
        } || !match res[2] {
            Ok(Success::Filled {
                order_id: 2,
                price,
                qty,
                ..
            }) if match_float(price, 12.0) && match_float(qty, 1.0) => true,
            _ => false,
        } || !match res[3] {
            Ok(Success::Filled {
                order_id: 3,
                price,
                qty,
                ..
            }) if match_float(price, 10.0) && match_float(qty, 0.5) => true,
            _ => false,
        } || !match res[4] {
            Ok(Success::PartiallyFilled {
                order_id: 1,
                price,
                qty,
                ..
            }) if match_float(price, 10.0) && match_float(qty, 0.5) => true,
            _ => false,
        } {
            panic!("unexpected event sequence: {:?}", res)
        }
    }

    #[test]
    fn limit_order_on_empty_orderbook() {
        use std::time::SystemTime;

        let mut orderbook = Orderbook::new(Asset::BTC, Asset::USD);
        let order_asset = parse_asset("BTC").unwrap();
        let price_asset = parse_asset("USD").unwrap();

        let order1 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Bid,
            10.0,
            2.0,
            SystemTime::now(),
        );

        // process order
        let res = orderbook.process_order(order1);

        if !match res[0] {
            Ok(Success::Accepted { id: 1, .. }) => true,
            _ => false,
        } {
            panic!("unexpected event sequence: {:?}", res)
        }
    }

    #[test]
    fn limit_order_partial_match() {
        use std::time::SystemTime;

        let mut orderbook = Orderbook::new(Asset::BTC, Asset::USD);
        let order_asset = parse_asset("BTC").unwrap();
        let price_asset = parse_asset("USD").unwrap();

        let order1 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Bid,
            10.0,
            1.0,
            SystemTime::now(),
        );

        let order2 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Ask,
            9.0,
            0.5,
            SystemTime::now(),
        );

        orderbook.process_order(order1);
        let res = orderbook.process_order(order2);

        if !match res[0] {
            Ok(Success::Accepted { id: 2, .. }) => true,
            _ => false,
        } || !match res[1] {
            Ok(Success::Filled {
                order_id: 2,
                price,
                qty,
                ..
            }) if match_float(price, 10.0) && match_float(qty, 0.5) => true,
            _ => false,
        } || !match res[2] {
            Ok(Success::PartiallyFilled {
                order_id: 1,
                price,
                qty,
                ..
            }) if match_float(price, 10.0) && match_float(qty, 0.5) => true,
            _ => false,
        } {
            panic!("unexpected event sequence: {:?}", res)
        }
    }

    #[test]
    fn limit_order_exact_match() {
        use std::time::SystemTime;

        let mut orderbook = Orderbook::new(Asset::BTC, Asset::USD);
        let order_asset = parse_asset("BTC").unwrap();
        let price_asset = parse_asset("USD").unwrap();

        let order1 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Bid,
            10.0,
            1.0,
            SystemTime::now(),
        );

        let order2 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Ask,
            9.0,
            0.5,
            SystemTime::now(),
        );

        orderbook.process_order(order1);
        let res = orderbook.process_order(order2);

        if !match res[0] {
            Ok(Success::Accepted { id: 2, .. }) => true,
            _ => false,
        } || !match res[1] {
            Ok(Success::Filled {
                order_id: 2,
                price,
                qty,
                ..
            }) if match_float(price, 10.0) && match_float(qty, 0.5) => true,
            _ => false,
        } || !match res[2] {
            Ok(Success::PartiallyFilled {
                order_id: 1,
                price,
                qty,
                ..
            }) if match_float(price, 10.0) && match_float(qty, 0.5) => true,
            _ => false,
        } {
            panic!("unexpected event sequence: {:?}", res)
        }

        let order3 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Ask,
            8.0,
            0.5,
            SystemTime::now(),
        );

        let res2 = orderbook.process_order(order3);

        if !match res2[0] {
            Ok(Success::Accepted { id: 3, .. }) => true,
            _ => false,
        } || !match res2[1] {
            Ok(Success::Filled {
                order_id: 3,
                price,
                qty,
                ..
            }) if match_float(price, 10.0) && match_float(qty, 0.5) => true,
            _ => false,
        } || !match res2[2] {
            Ok(Success::Filled {
                order_id: 1,
                price,
                qty,
                ..
            }) if match_float(price, 10.0) && match_float(qty, 0.5) => true,
            _ => false,
        } {
            panic!("unexpected event sequence: {:?}", res2)
        }

        assert_eq!(orderbook.current_spread(), None);
    }

    #[test]
    fn current_spread() {
        use std::time::SystemTime;

        let mut orderbook = Orderbook::new(Asset::BTC, Asset::USD);
        let order_asset = parse_asset("BTC").unwrap();
        let price_asset = parse_asset("USD").unwrap();

        let order1 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Bid,
            10.0,
            1.0,
            SystemTime::now(),
        );

        // not enough orders to calculate
        assert_eq!(orderbook.current_spread(), None);

        let order2 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Ask,
            12.0,
            0.5,
            SystemTime::now(),
        );

        let order3 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Ask,
            12.5,
            2.5,
            SystemTime::now(),
        );

        orderbook.process_order(order1);
        orderbook.process_order(order2);
        orderbook.process_order(order3);

        assert_eq!(orderbook.current_spread(), Some((10.0, 12.0)));

        // wider spread
        let order4 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Bid,
            14.0,
            1.5,
            SystemTime::now(),
        );
        let res = orderbook.process_order(order4);
        println!("{:?}", res);

        assert_eq!(orderbook.current_spread(), Some((10.0, 12.5)));
    }
}

'''
'''--- contract/src/account.rs ---
use crate::errors;
use crate::types::{parse_asset, BrokerAsset};
use crate::Contract;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::json_types::U128;
use near_sdk::{env, near_bindgen, AccountId, Balance, StorageUsage};
use orderbook::Order;
use std::collections::HashMap;

const U128_STORAGE: StorageUsage = 16;
const U64_STORAGE: StorageUsage = 8;
const U32_STORAGE: StorageUsage = 4;
/// max length of account id is 64 bytes. We charge per byte.
const ACC_ID_STORAGE: StorageUsage = 64;
/// As a key, 4 bytes length would be added to the head
const ACC_ID_AS_KEY_STORAGE: StorageUsage = ACC_ID_STORAGE + 4;
const KEY_PREFIX_ACC: StorageUsage = 64;
/// As a near_sdk::collection key, 1 byte for prefiex
const ACC_ID_AS_CLT_KEY_STORAGE: StorageUsage = ACC_ID_AS_KEY_STORAGE + 1;

// ACC_ID: the Contract accounts map key length
// + U128_STORAGE: near_amount storage
// + U32_STORAGE: tokens HashMap length
// + U32_STORAGE: open_orders HashMap length
// + U64_STORAGE: storage_used
pub const INIT_ACCOUNT_STORAGE: StorageUsage =
    ACC_ID_AS_CLT_KEY_STORAGE + U128_STORAGE + U32_STORAGE + U32_STORAGE + U64_STORAGE;

#[derive(BorshSerialize, BorshDeserialize, Debug)]
pub struct Account {
    balance: HashMap<String, Balance>,
    /// Amounts of tokens and native NEAR deposited to this account.
    asset_balance: HashMap<BrokerAsset, Balance>,
    /// account's open orders.
    open_orders: HashMap<String, HashMap<u64, Order<BrokerAsset>>>,
    /// Amount of NEAR deposited for storage. This is distinct from NEAR
    /// available for trading.
    pub storage_balance: Balance,
}

impl Account {
    pub fn new() -> Self {
        Self {
            balance: HashMap::new(),
            asset_balance: HashMap::new(),
            open_orders: HashMap::new(),
            storage_balance: 0,
        }
    }
    pub fn deposit(&mut self, asset: String, balance: Balance) {
        let exists = self.balance.contains_key(&asset);
        if exists {
            *self.balance.get_mut(&asset).unwrap() += balance;
        } else {
            self.balance.insert(asset, balance);
        }
    }

    pub fn withdraw(&mut self, asset: String, balance: Balance) {
        let exists = self.balance.contains_key(&asset);
        if exists {
            let val = self.balance.get(&asset).unwrap();
            *self.balance.get_mut(&asset).unwrap() = val - balance;
        } else {
        }
    }

    pub fn get_balance(&self, asset: String) -> Balance {
        self.balance[&asset]
    }

    pub fn deposit_asset(&mut self, asset: BrokerAsset, balance: Balance) {
        if let Some(x) = self.asset_balance.get(&asset).cloned() {
            self.asset_balance.insert(asset, balance + x);
        } else {
            self.asset_balance.insert(asset, balance);
        }
    }

    pub fn withdraw_asset(&mut self, asset: BrokerAsset, balance: Balance) {
        if let Some(x) = self.asset_balance.get(&asset).cloned() {
            if x < balance {
                env::panic_str(errors::INSUFFICIENT_BALANCE);
            }
            self.asset_balance.insert(asset, x - balance);
        } else {
            env::panic_str(errors::INSUFFICIENT_BALANCE);
        }
    }

    pub fn get_asset_balance(&self, asset: BrokerAsset) -> Balance {
        let balance = self.asset_balance.get(&asset).unwrap_or(&0);
        *balance
    }

    pub fn save_open_order(&mut self, market: String, order: Order<BrokerAsset>) {
        match self.open_orders.get_mut(&market) {
            Some(orders_in_market) => {
                orders_in_market.insert(order.order_id, order);
            }
            None => {
                let mut orders_in_market = HashMap::new();
                orders_in_market.insert(order.order_id, order);
                self.open_orders.insert(market.clone(), orders_in_market);
            }
        };
    }

    pub fn get_open_orders(&self, market: String) -> Vec<Order<BrokerAsset>> {
        self.open_orders[&market]
            .clone()
            .into_iter()
            .map(|x| x.1.clone())
            .collect()
    }

    /// Returns minimal account deposit storage usage possible.
    pub fn min_storage_usage() -> Balance {
        INIT_ACCOUNT_STORAGE as Balance * env::storage_byte_cost()
    }

    /// Returns amount of $NEAR necessary to cover storage used by this data structure.
    pub fn storage_usage(&self) -> Balance {
        (INIT_ACCOUNT_STORAGE
            + self.asset_balance.len() as u64
                * (KEY_PREFIX_ACC + ACC_ID_AS_KEY_STORAGE + U128_STORAGE)) as u128
            * env::storage_byte_cost()
    }

    /// Returns how much NEAR is available for storage.
    pub fn storage_available(&self) -> Balance {
        let locked = self.storage_usage();
        if self.storage_balance > locked {
            self.storage_balance - locked
        } else {
            0
        }
    }
}

impl Contract {
    pub fn internal_register_account(&mut self, account_id: &AccountId) -> Account {
        println!("internal_register_account:{:?}", account_id);
        let acc = Account::new();
        self.accounts.insert(account_id, &acc);
        acc
    }

    pub fn internal_get_account(&self, account_id: AccountId) -> Option<Account> {
        self.accounts.get(&account_id)
    }
}
mod tests {
    use super::*;
    use orderbook::OrderSide;
    use std::collections::HashMap;
    #[test]
    fn test_account() {
        let mut acc = Account::new();
        let bal: Balance = 12;
        acc.deposit("BTC".to_string(), bal);
        // println!("balance:{}", acc.get_balance("BTC".to_string()));
        assert_eq!(acc.get_balance("BTC".to_string()), bal);
    }

    #[test]
    fn test_account_order() {
        let mut account = Account::new();

        let order = Order {
            order_id: 1,
            order_asset: BrokerAsset::NEAR,
            price_asset: BrokerAsset::USDC,
            side: OrderSide::Bid,
            price: 12,
            qty: 1,
            account: "test".to_string(),
        };

        account.save_open_order("NEAR-USDT".to_string(), order)
    }

    #[test]
    fn test_account_balance() {
        let mut account = Account::new();
        let bal: Balance = 12;
        account.deposit_asset(BrokerAsset::NEAR, bal);
        // println!("balance:{}", &account.get_asset_balance(BrokerAsset::NEAR));
        assert_eq!(account.get_asset_balance(BrokerAsset::NEAR), bal);
    }

    #[test]
    fn account_withdraw() {
        let mut account = Account::new();
        let bal: Balance = 12;
        account.withdraw_asset(BrokerAsset::NEAR, bal);
        // println!("balance:{}", &account.get_asset_balance(BrokerAsset::NEAR));
        // assert_eq!(account.get_asset_balance(BrokerAsset::NEAR), bal);
    }

    #[test]
    fn get_open_order() {
        let mut account = Account::new();
        let order = Order {
            order_id: 1,
            order_asset: BrokerAsset::NEAR,
            price_asset: BrokerAsset::USDC,
            side: OrderSide::Bid,
            price: 12,
            qty: 1,
            account: "test".to_string(),
        };

        account.save_open_order("NEAR-USDT".to_string(), order);
        let orders = account.get_open_orders("NEAR-USDT".to_string());
        println!("{:?}", orders);
    }
}

'''
'''--- contract/src/action.rs ---

'''
'''--- contract/src/asset.rs ---
use crate::{types::{BrokerAsset, parse_asset}, Contract};
use near_sdk::{AccountId, env};

impl Contract {
    pub fn ft_contract_id_to_asset(&self, account_id: AccountId) -> BrokerAsset {
        let address = self.ft_address.get(&account_id.to_string());
        match address {
            Some(asset) => {
                parse_asset(&asset).unwrap()
            }
            None => {
                env::panic_str("unknown asset")
            }
        }
    }
}

'''
'''--- contract/src/errors.rs ---
pub const INSUFFICIENT_BALANCE: &str = "INSUFFICIENT_BALANCE";
'''
'''--- contract/src/external.rs ---
use crate::*;
use near_sdk::{ext_contract};
/// external contract calls
 
//initiate a cross contract call to the nft contract. This will transfer the token to the buyer and return
//a payout object used for the market to distribute funds to the appropriate accounts.
#[ext_contract(ext_ft_contract)]
trait ExtFtContract {
    fn ft_transfer(
        &mut self,
        receiver_id: AccountId, 
        amount: U128, 
        memo: Option<String>
    );
}
'''
'''--- contract/src/ft_balances.rs ---
use crate::*;
use near_contract_standards::fungible_token::core_impl::ext_fungible_token;
use near_sdk::json_types::U128;
use near_sdk::{ext_contract, require, Gas, PromiseResult};

const GAS_FOR_RESOLVE_REFUND: Gas = Gas(30_000_000_000_000);
const GAS_FOR_FT_TRANSFER: Gas = Gas(20_000_000_000_000);
pub const GAS_FOR_RESOLVE_TRANSFER: Gas = Gas(20_000_000_000_000); // 20 TGas
#[ext_contract(ext_self)]
pub trait Exchange {
    fn exchange_callback_post_withdraw(
        &mut self,
        ft_contract_id: AccountId,
        receiver_id: AccountId,
        amount: U128,
    );
}

trait FungibleTokenReceiver {
    fn ft_on_transfer(&mut self, sender_id: AccountId, amount: U128) -> U128;

    fn ft_withdraw(&mut self, amount: U128, ft_contract_id: AccountId);

    fn resolve_refund(&mut self, caller: AccountId, amount: U128) -> U128;

    fn ft_deposits_of(&self, account_id: AccountId) -> U128;
}

//implementation of the trait
#[near_bindgen]
impl FungibleTokenReceiver for Contract {
    /// This is how users will fund their FT balances in the contract
    fn ft_on_transfer(&mut self, sender_id: AccountId, amount: U128) -> U128 {
        // get the contract ID which is the predecessor
        let ft_contract_id = env::predecessor_account_id();
        //get the signer which is the person who initiated the transaction
        let signer_id = env::signer_account_id();

        // Add the amount to the user's current balance
        let account = &mut self.accounts.get(&signer_id).unwrap();
        let asset = self.ft_contract_id_to_asset(ft_contract_id);
        account.deposit_asset(asset, amount.0);

        self.accounts.insert(&sender_id, account);

        U128(amount.0)
    }

    #[payable]
    fn ft_withdraw(&mut self, amount: U128, ft_contract_id: AccountId) {
        //make sure the user attaches exactly 1 yoctoNEAR for security purposes.
        //this will redirect them to the NEAR wallet (or requires a full access key).
        assert_one_yocto();
        // Get the receiver_id and ensure they have enough balance
        let caller = env::predecessor_account_id();
        // let cur_bal = self.ft_deposits.get(&caller).unwrap_or(0);
        // require!(cur_bal >= amount.0, "Insufficient balance");
        // Subtract the amount from the caller's balance
        // let new_bal = cur_bal - amount.0;
        // self.ft_deposits.insert(&caller, &new_bal);
        ext_fungible_token::ft_transfer(
            caller.clone(),
            amount,
            None,
            ft_contract_id.clone(),
            1,
            GAS_FOR_FT_TRANSFER,
        )
        .then(ext_self::exchange_callback_post_withdraw(
            ft_contract_id.clone(),
            caller.clone(),
            U128(amount.0),
            env::current_account_id(),
            0,
            GAS_FOR_RESOLVE_TRANSFER,
        ));

        let account = &mut self.accounts.get(&caller).unwrap();
        let asset = self.ft_contract_id_to_asset(ft_contract_id);
        account.withdraw_asset(asset, amount.0);
    }

    #[private]
    fn resolve_refund(&mut self, caller: AccountId, amount: U128) -> U128 {
        let amount: Balance = amount.into();

        // Get the amount to revert the caller's balance with
        let revert_amount = match env::promise_result(0) {
            PromiseResult::NotReady => env::abort(),
            // If the promise was successful, get the return value and cast it to a U128.
            PromiseResult::Successful(_) => 0,
            // If the promise wasn't successful, return the original amount.
            PromiseResult::Failed => amount,
        };

        if revert_amount > 0 {
            // Get the caller's current balance
            // let cur_bal = self.ft_deposits.get(&caller).unwrap_or(0);
            // Add the amount to the caller's balance
            // let new_bal = cur_bal + revert_amount;
            // self.ft_deposits.insert(&caller, &new_bal);
        }

        U128(revert_amount)
    }

    /// Get the amount of FTs the user has deposited into the contract
    fn ft_deposits_of(&self, account_id: AccountId) -> U128 {
        // self.ft_deposits.get(&account_id).unwrap_or(0).into()
        0.into()
    }
}

#[near_bindgen]
impl Contract {
    #[private]
    pub fn exchange_callback_post_withdraw(
        &mut self,
        token: AccountId,
        receiver_id: AccountId,
        amount: U128,
    ) {
    }
}

'''
'''--- contract/src/lib.rs ---
mod account;
mod asset;
mod errors;
mod external;
mod ft_balances;
mod market;
mod owner;
mod settlement;
mod storage;
mod types;

use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::LookupMap;
use near_sdk::json_types::U128;
use near_sdk::{
    assert_one_yocto, env, near_bindgen, AccountId, Balance, BorshStorageKey, PanicOnDefault,
};

extern crate events;
use crate::events::*;
use account::*;
use market::*;
use orderbook::{orders, Failed, L2OpenLimitOrderView, Order, OrderSide, Success};
use std::collections::HashMap;
use types::*;

fn get_current_time() -> u64 {
    return env::block_timestamp();
}

fn parse_side(side: &str) -> Option<OrderSide> {
    match side {
        "Ask" => Some(OrderSide::Ask),
        "Bid" => Some(OrderSide::Bid),
        _ => None,
    }
}
// Define the contract structure
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
    pub owner_id: AccountId,

    pub markets: LookupMap<String, Market>,

    pub accounts: LookupMap<AccountId, Account>,

    // <dev-xxxxxxx,"BTC">
    pub ft_address: HashMap<String, String>,
}

#[derive(BorshStorageKey, BorshSerialize)]
pub enum StorageKey {
    StorageDeposits,
    FTDeposits,
    Market,
    Account,
    FT,
}

// Implement the contract structure
#[near_bindgen]
impl Contract {
    /*
        initialization function (can only be called once).
        this initializes the contract with default data and the owner ID
        that's passed in
    */
    #[init]
    pub fn new(owner_id: AccountId) -> Self {
        let this = Self {
            owner_id,
            // ft_deposits: LookupMap::new(StorageKey::FTDeposits),
            markets: LookupMap::new(StorageKey::Market),
            accounts: LookupMap::new(StorageKey::Account),
            ft_address: HashMap::new(),
        };

        this
    }

    pub fn create_market(&mut self, req: CreateMarket) {
        let arr: Vec<&str> = req.market.split("-").collect();
        let m = Market::new(arr[0].to_string(), arr[1].to_string());
        self.markets.insert(&req.market.to_string(), &m);

        self.ft_address.insert(req.base_ft, arr[0].to_string());
        self.ft_address.insert(req.quote_ft, arr[1].to_string());
    }

    pub fn orderbook(&self) -> (Vec<L2OpenLimitOrderView>, Vec<L2OpenLimitOrderView>) {
        let market = self.markets.get(&"BTC-USDT".to_string()).unwrap();
        let orderbook = market.get_orderbook();
        orderbook
    }

    pub fn place_order(&mut self, req: PlaceOrder) {
        // create order requests
        // let order_asset = parse_asset("BTC").unwrap();
        // let price_asset = parse_asset("USD").unwrap();

        let market = &mut self.markets.get(&req.market).unwrap();
        match req.order_type.as_str() {
            "limit" => {
                let account_id = env::predecessor_account_id();
                let order = orders::new_limit_order_request(
                    BrokerAsset::BTC,
                    BrokerAsset::USDT,
                    parse_side(&req.side).unwrap(),
                    req.price,
                    req.qty,
                    get_current_time(),
                    account_id.to_string(),
                );

                let res = market.place_order(order);
                println!("res {:?}", res);
                self.settle_result(account_id, market, parse_side(&req.side).unwrap(), res);
                self.markets.insert(&"BTC-USDT".to_string(), &market);
            }
            "market" => {
                let account = env::predecessor_account_id();
                let order = orders::new_market_order_request(
                    BrokerAsset::BTC,
                    BrokerAsset::USDT,
                    parse_side(&req.side).unwrap(),
                    req.qty,
                    get_current_time(),
                    account.clone(),
                );

                let res = market.place_order(order);
                println!("res {:?}", res);
                self.settle_result(account, market, parse_side(&req.side).unwrap(), res);
                self.markets.insert(&"BTC-USDT".to_string(), &market);
            }
            _ => {}
        }

        emit_event(EventType::MyEvent(NewMyEvent {
            order_id: "test".to_string(),
        }))
    }

    pub fn get_orderbook(
        &self,
        market: String,
    ) -> (Vec<L2OpenLimitOrderView>, Vec<L2OpenLimitOrderView>) {
        let market_inst = &mut self.markets.get(&market).unwrap();
        market_inst.get_orderbook()
    }

    pub fn get_open_orders(&self, market: String) -> Vec<Order<BrokerAsset>> {
        let account_id = env::predecessor_account_id();
        let account = self.internal_get_account(account_id).unwrap();
        let orders = account.get_open_orders(market);
        orders
    }

    pub fn ft_deposits_of_asset(&self, ft: String, account_id: AccountId) -> U128 {
        let account = self.internal_get_account(account_id);
        match account {
            Some(account) => {
                let asset = parse_asset(&ft).unwrap();
                account.get_asset_balance(asset).into()
            }
            None => 0.into(),
        }
    }
}

/*
 * The rest of this file holds the inline tests for the code above
 * Learn more about Rust tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html
 */
#[cfg(test)]
mod tests {
    use crate::storage::StorageManagement;

    use super::types::*;
    use super::*;
    use near_sdk::test_utils::{accounts, VMContextBuilder};
    use near_sdk::{testing_env, AccountId};

    fn get_context(predecessor_account_id: AccountId) -> VMContextBuilder {
        let mut builder = VMContextBuilder::new();
        builder
            .current_account_id(accounts(0))
            .signer_account_id(predecessor_account_id.clone())
            .predecessor_account_id(predecessor_account_id);
        builder
    }

    pub fn set_predecessor_context(account_id: AccountId) {
        let context = VMContextBuilder::new()
            .predecessor_account_id(account_id)
            .build();
        testing_env!(context);
    }

    #[test]
    fn test_new() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let contract = Contract::new(accounts(1));
    }
    #[test]
    fn test_place_order() {
        println!("test place order");
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let mut contract = Contract::new(accounts(1));

        contract.place_order(PlaceOrder {
            market: "BTC-USDT".to_string(),
            side: "Ask".to_string(),
            price: 12,
            qty: 1,
            order_type: "market".to_string(),
        });
        let orderbook = contract.get_orderbook("BTC-USDT".to_string());
    }
    #[test]
    fn test_limit_order() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let mut contract = Contract::new(accounts(1));

        contract.create_market(CreateMarket {
            market: "BTC-USDT".to_string(),
            base_ft: "btc".to_string(),
            quote_ft: "usdt".to_string(),
        });

        let maker_account_id = accounts(1);
        let taker_account_id = accounts(2);

        let mut maker_acc = contract.internal_register_account(&maker_account_id);
        maker_acc.deposit_asset(BrokerAsset::BTC, 1);
        maker_acc.deposit_asset(BrokerAsset::USDT, 0);
        contract.accounts.insert(&maker_account_id, &maker_acc);
        let mut taker_acc = contract.internal_register_account(&taker_account_id);
        taker_acc.deposit_asset(BrokerAsset::BTC, 0);
        taker_acc.deposit_asset(BrokerAsset::USDT, 20000);
        contract.accounts.insert(&taker_account_id, &taker_acc);
        println!(
            "maker: {:?}, {:?}",
            maker_acc.get_asset_balance(BrokerAsset::BTC),
            maker_acc.get_asset_balance(BrokerAsset::USDT),
        );
        println!(
            "taker: {:?}, {:?}",
            taker_acc.get_asset_balance(BrokerAsset::BTC),
            taker_acc.get_asset_balance(BrokerAsset::USDT),
        );

        contract.place_order(PlaceOrder {
            market: "BTC-USDT".to_string(),
            side: "Ask".to_string(),
            price: 20000,
            qty: 1,
            order_type: "limit".to_string(),
        });
        // change predecessor_account_id
        set_predecessor_context(taker_account_id.clone());
        contract.place_order(PlaceOrder {
            market: "BTC-USDT".to_string(),
            side: "Bid".to_string(),
            price: 20000,
            qty: 1,
            order_type: "limit".to_string(),
        });

        println!("after settle");

        let maker_acc = contract.internal_get_account(maker_account_id).unwrap();
        let taker_acc = contract.internal_get_account(taker_account_id).unwrap();
        println!(
            "maker: {:?}, {:?}",
            &maker_acc.get_asset_balance(BrokerAsset::BTC),
            &maker_acc.get_asset_balance(BrokerAsset::USDT)
        );
        println!(
            "taker: {:?}, {:?}",
            &taker_acc.get_asset_balance(BrokerAsset::BTC),
            &taker_acc.get_asset_balance(BrokerAsset::USDT)
        );

        let orderbook = contract.get_orderbook("BTC-USDT".to_string());
        println!("{:?}", orderbook);
    }

    #[test]
    fn test_market_order() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let mut contract = Contract::new(accounts(1));

        let maker_account_id = accounts(1);
        let taker_account_id = accounts(2);

        let mut maker_acc = contract.internal_register_account(&maker_account_id);
        maker_acc.deposit_asset(BrokerAsset::BTC, 1);
        maker_acc.deposit_asset(BrokerAsset::USDT, 0);
        contract.accounts.insert(&maker_account_id, &maker_acc);
        let mut taker_acc = contract.internal_register_account(&taker_account_id);
        taker_acc.deposit_asset(BrokerAsset::BTC, 0);
        taker_acc.deposit_asset(BrokerAsset::USDT, 20000);
        contract.accounts.insert(&taker_account_id, &taker_acc);
        println!(
            "maker: {:?}, {:?}",
            maker_acc.get_asset_balance(BrokerAsset::BTC),
            maker_acc.get_asset_balance(BrokerAsset::USDT),
        );
        println!(
            "taker: {:?}, {:?}",
            taker_acc.get_asset_balance(BrokerAsset::BTC),
            taker_acc.get_asset_balance(BrokerAsset::USDT),
        );

        contract.place_order(PlaceOrder {
            market: "BTC-USDT".to_string(),
            side: "Ask".to_string(),
            price: 20000,
            qty: 1,
            order_type: "limit".to_string(),
        });
        // change predecessor_account_id
        set_predecessor_context(taker_account_id.clone());
        contract.place_order(PlaceOrder {
            market: "BTC-USDT".to_string(),
            side: "Bid".to_string(),
            price: 20000,
            qty: 1,
            order_type: "market".to_string(),
        });

        println!("after settle");

        let maker_acc = contract.internal_get_account(maker_account_id).unwrap();
        let taker_acc = contract.internal_get_account(taker_account_id).unwrap();
        println!(
            "maker: {:?}, {:?}",
            &maker_acc.get_asset_balance(BrokerAsset::BTC),
            &maker_acc.get_asset_balance(BrokerAsset::USDT)
        );
        println!(
            "taker: {:?}, {:?}",
            &taker_acc.get_asset_balance(BrokerAsset::BTC),
            &taker_acc.get_asset_balance(BrokerAsset::USDT)
        );

        let orderbook = contract.get_orderbook("BTC-USDT".to_string());
        println!("{:?}", orderbook);
    }

    #[test]
    fn test_market_order_unmatched() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let mut contract = Contract::new(accounts(1));

        let maker_account_id = accounts(1);
        let taker_account_id = accounts(2);

        let mut maker_acc = contract.internal_register_account(&maker_account_id);
        maker_acc.deposit_asset(BrokerAsset::BTC, 1);
        maker_acc.deposit_asset(BrokerAsset::USDT, 0);
        contract.accounts.insert(&maker_account_id, &maker_acc);
        let mut taker_acc = contract.internal_register_account(&taker_account_id);
        taker_acc.deposit_asset(BrokerAsset::BTC, 0);
        taker_acc.deposit_asset(BrokerAsset::USDT, 20000);
        contract.accounts.insert(&taker_account_id, &taker_acc);
        println!(
            "maker: {:?}, {:?}",
            maker_acc.get_asset_balance(BrokerAsset::BTC),
            maker_acc.get_asset_balance(BrokerAsset::USDT),
        );
        println!(
            "taker: {:?}, {:?}",
            taker_acc.get_asset_balance(BrokerAsset::BTC),
            taker_acc.get_asset_balance(BrokerAsset::USDT),
        );

        contract.place_order(PlaceOrder {
            market: "BTC-USDT".to_string(),
            side: "Ask".to_string(),
            price: 20000,
            qty: 1,
            order_type: "market".to_string(),
        });
        let orderbook = contract.get_orderbook("BTC-USDT".to_string());
        println!("{:?}", orderbook);
    }

    #[test]
    fn test_match() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let mut contract = Contract::new(accounts(1));

        contract.place_order(PlaceOrder {
            market: "BTC-USDT".to_string(),
            side: "Ask".to_string(),
            price: 12,
            qty: 1,
            order_type: "market".to_string(),
        });

        contract.place_order(PlaceOrder {
            market: "BTC-USDT".to_string(),
            side: "Bid".to_string(),
            price: 12,
            qty: 1,
            order_type: "market".to_string(),
        });

        let orderbook = contract.get_orderbook("BTC-USDT".to_string());
        println!("{:?}", orderbook);
    }

    #[test]
    fn test_admin() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let mut contract = Contract::new(accounts(1));

        let mut req = Vec::new();
        req.push(RegisterTokenElement {
            ft: "BTC".to_string(),
            address: "BTC".to_string(),
        });

        contract.register_ft_address(req)
    }

    #[test]
    fn test_account_balance() {
        let mut context = get_context(accounts(1));

        testing_env!(context.build());

        context.attached_deposit(500000000000000000000000);
        let mut contract = Contract::new(accounts(1));
        let account_id = accounts(1);
        contract.storage_deposit(Some(account_id), Some(true));

        let account_id = accounts(1);

        // let account = contract.internal_get_account(account_id).unwrap();
        let mut account = contract.accounts.get(&account_id).unwrap();
        account.deposit_asset(BrokerAsset::BTC, 12);

        contract.accounts.insert(&account_id, &account);

        let account_id = accounts(1);
        let balance = contract.ft_deposits_of_asset("BTC".to_string(), account_id);
        println!("balance:{:?}", balance)
    }
}

'''
'''--- contract/src/market.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use orderbook::orders::OrderRequest;
use orderbook::*;
use crate::types::BrokerAsset;

#[derive(Default, BorshSerialize, BorshDeserialize)]
pub struct Market {
    pub base_token: BrokerAsset,
    pub quote_token: BrokerAsset,
    pub orderbook: Orderbook<BrokerAsset>,
}

impl Market {
    pub fn new(base: String, quote: String) -> Self {
        Self {
            base_token: BrokerAsset::BTC,
            quote_token: BrokerAsset::USDT,
            orderbook: Orderbook::new(BrokerAsset::BTC, BrokerAsset::USDT),
        }
    }

    pub fn place_order(&mut self, order: OrderRequest<BrokerAsset>) -> Vec<Result<Success, Failed>> {
        let res = self.orderbook.process_order(order);
        res
    }

    pub fn get_orderbook(&self) -> (Vec<L2OpenLimitOrderView>, Vec<L2OpenLimitOrderView>) {
        let bid = self
            .orderbook
            .bid_queue
            .clone()
            .idx_queue
            .unwrap()
            .iter()
            .map(|x| L2OpenLimitOrderView {
                price: x.price,
                qty: self.orderbook.bid_queue.get_order(x.id).qty,
            })
            .collect::<Vec<L2OpenLimitOrderView>>();

        let ask = self
            .orderbook
            .ask_queue
            .clone()
            .idx_queue
            .unwrap()
            .iter()
            .map(|x| L2OpenLimitOrderView {
                price: x.price,
                qty: self.orderbook.ask_queue.get_order(x.id).qty,
            })
            .collect::<Vec<L2OpenLimitOrderView>>();
        (bid, ask)
    }
}
#[cfg(test)]
mod tests {
    use near_sdk::env;

    use crate::parse_side;
    #[test]
    fn test_market() {
        use super::*;
        let mut market = Market::new("BTC".to_string(), "USDT".to_string());
        let order = orders::new_limit_order_request(
            BrokerAsset::BTC,
            BrokerAsset::USDT,
            parse_side(&"Bid").unwrap(),
            1,
            10,
            env::block_timestamp(),
            "test".to_string(),
        );
        market.place_order(order);
        market.get_orderbook();
    }
}

'''
'''--- contract/src/owner.rs ---
use crate::*;

impl Contract {
    pub fn register_ft_address(&mut self, req: RegisterToken) {
        let caller = env::predecessor_account_id();
        if self.owner_id !=caller{
            env::panic_str("not owner")
        }
        for item in &req {
            self.ft_address.insert(item.address.clone(),item.ft.clone());
        }
    }
}

'''
'''--- contract/src/settlement.rs ---
use crate::OrderSide;
use crate::*;
use near_sdk::AccountId;
use std::str::FromStr;

impl Contract {
    pub fn settle_result(
        &mut self,
        taker_account_id: AccountId,
        market: &mut Market,
        taker_side: OrderSide,
        results: Vec<Result<Success, Failed>>,
    ) {
        for temp_variable in &results {
            let _ret = match temp_variable {
                Ok(success) => {
                    // let success = temp_variable.as_ref().unwrap();
                    match success {
                        Success::Accepted {
                            id: _,
                            order_type: _,
                            order_creator: _,
                            ts: _,
                        } => {

                            
                        }
                        Success::Filled {
                            order_id: u64,
                            side,
                            order_type: _,
                            price,
                            qty,
                            order_creator,
                            ts: _,
                        } => {
                            match side {
                                OrderSide::Ask => {
                                    match taker_side {
                                        OrderSide::Ask => continue,
                                        OrderSide::Bid => {
                                            // taker buy
                                            let maker_account_id =
                                                AccountId::from_str(order_creator).unwrap();
                                            if maker_account_id == taker_account_id {
                                                continue;
                                            }
                                            let taker_account =
                                                &mut self.accounts.get(&taker_account_id).unwrap();
                                            let maker_account =
                                                &mut self.accounts.get(&maker_account_id).unwrap();

                                            taker_account.withdraw_asset(
                                                market.quote_token,
                                                *qty * (*price),
                                            );
                                            taker_account.deposit_asset(market.base_token, *qty);

                                            maker_account
                                                .deposit_asset(market.quote_token, *qty * (*price));
                                            maker_account.withdraw_asset(market.base_token, *qty);

                                            self.accounts.insert(&taker_account_id, taker_account);
                                            self.accounts.insert(&maker_account_id, maker_account);
                                        }
                                    }
                                }
                                OrderSide::Bid => {
                                    match taker_side {
                                        OrderSide::Bid => continue,
                                        OrderSide::Ask => {
                                            // taker sell
                                            let maker_account_id =
                                                AccountId::from_str(order_creator).unwrap();
                                            if maker_account_id == taker_account_id {
                                                continue;
                                            }

                                            let taker_account =
                                                &mut self.accounts.get(&taker_account_id).unwrap();
                                            let maker_account =
                                                &mut self.accounts.get(&maker_account_id).unwrap();

                                            taker_account.withdraw_asset(market.base_token, *qty);
                                            taker_account
                                                .deposit_asset(market.quote_token, *qty * (*price));

                                            maker_account.deposit_asset(market.base_token, *qty);
                                            maker_account.withdraw_asset(
                                                market.quote_token,
                                                *qty * (*price),
                                            );

                                            self.accounts.insert(&taker_account_id, taker_account);
                                            self.accounts.insert(&maker_account_id, maker_account);
                                        }
                                    }
                                }
                            };
                        }
                        Success::PartiallyFilled {
                            order_id: _,
                            side,
                            order_type: _,
                            price: _,
                            qty,
                            order_creator,
                            ts: _,
                        } => {}
                        Success::Amended {
                            id: _,
                            price: _,
                            qty: _,
                            ts: _,
                        } => {}
                        Success::Cancelled { id: _, ts: _ } => {}
                    }
                }
                Err(error) => {
                    println!("{:?}", error)
                }
            };
        }
    }
}

'''
'''--- contract/src/storage.rs ---
use crate::*;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::json_types::U128;
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{env, log, AccountId, Balance, Promise};

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct StorageBalance {
    pub total: U128,
    pub available: U128,
}

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct StorageBalanceBounds {
    pub min: U128,
    pub max: Option<U128>,
}

pub trait StorageManagement {
    fn storage_deposit(
        &mut self,
        account_id: Option<AccountId>,
        registration_only: Option<bool>,
    ) -> StorageBalance;

    fn storage_balance_bounds(&self) -> StorageBalanceBounds;

    fn storage_balance_of(&self, account_id: AccountId) -> Option<StorageBalance>;
}

#[near_bindgen]
impl StorageManagement for Contract {
    #[allow(unused_variables)]
    #[payable]
    fn storage_deposit(
        &mut self,
        account_id: Option<AccountId>,
        registration_only: Option<bool>,
    ) -> StorageBalance {
        // Get the amount of $NEAR to deposit
        let amount: Balance = env::attached_deposit();
        // If an account was specified, use that. Otherwise, use the predecessor account.
        let account_id = account_id.unwrap_or_else(env::predecessor_account_id);
        // If the account is already registered, refund the deposit.
        if self.accounts.contains_key(&account_id) {
            log!("The account is already registered, refunding the deposit");
            if amount > 0 {
                Promise::new(env::predecessor_account_id()).transfer(amount);
            }
        } else {
            // Get the minimum required storage and ensure the deposit is at least that amount
            let min_balance = self.storage_balance_bounds().min.0;
            // if amount < min_balance {
            //     env::panic_str("The attached deposit is less than the minimum storage balance");
            // }

            // Register the account and refund any excess $NEAR
            let mut account = self.internal_register_account(&account_id);
            if registration_only.unwrap() {
                let refund = amount - min_balance;
                account.storage_balance = Balance::from(min_balance);
                if refund > 0 {
                    Promise::new(env::predecessor_account_id()).transfer(refund);
                }
            } else {
                account.storage_balance = amount;
            }
        }

        // Return the storage balance of the account
        self.storage_balance_of(account_id).unwrap()
    }

    fn storage_balance_bounds(&self) -> StorageBalanceBounds {
        // Calculate the required storage balance by taking the bytes for the longest account ID and multiplying by the current byte cost
        StorageBalanceBounds {
            min: Account::min_storage_usage().into(),
            max: None,
        }
    }

    fn storage_balance_of(&self, account_id: AccountId) -> Option<StorageBalance> {
        // Get the storage balance of the account. Available will always be 0 since you can't overpay for storage.
        self.internal_get_account(account_id)
            .map(|account| StorageBalance {
                total: U128(account.storage_balance),
                available: U128(account.storage_available()),
            })
    }
}

'''
'''--- contract/src/types.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::serde::{Deserialize, Serialize};
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct PlaceOrder {
    pub market: String,
    pub side: String,
    pub price: u128,
    pub qty: u128,
    pub order_type: String,
}
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, BorshDeserialize, BorshSerialize, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct OrderbookReq {
    pub market: String,
    pub side: String,
    pub price: u128,
    pub qty: u128,
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, BorshDeserialize, BorshSerialize)]
pub struct DepositReq {
    pub market: String,
    pub qty: f64,
}

pub type RegisterToken = Vec<RegisterTokenElement>;

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct RegisterTokenElement {
    #[serde(rename = "ft")]
    pub ft: String,

    #[serde(rename = "address")]
    pub address: String,
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct CreateMarket {
    #[serde(rename = "market")]
    pub market: String,

    #[serde(rename = "base_ft")]
    pub base_ft: String,

    #[serde(rename = "quote_ft")]
    pub quote_ft: String
}

#[derive(
    Eq,
    PartialEq,
    PartialOrd,
    BorshSerialize,
    BorshDeserialize,
    Serialize,
    Deserialize,
    Clone,
    Copy,
    Debug,
    Hash,
)]
#[serde(crate = "near_sdk::serde")]
pub enum BrokerAsset {
    USD,
    EUR,
    BTC,
    ETH,
    NEAR,
    USDC,
    USDT,
}

impl Default for BrokerAsset {
    fn default() -> Self {
        BrokerAsset::BTC
    }
}

pub fn parse_asset(asset: &str) -> Option<BrokerAsset> {
    match asset {
        "USD" => Some(BrokerAsset::USD),
        "EUR" => Some(BrokerAsset::EUR),
        "BTC" => Some(BrokerAsset::BTC),
        "ETH" => Some(BrokerAsset::ETH),
        "NEAR" => Some(BrokerAsset::NEAR),
        "USDC" => Some(BrokerAsset::USDC),
        "USDT" => Some(BrokerAsset::USDT),
        _ => None,
    }
}

'''
'''--- src/.env ---
VUE_APP_ORDERBOOK_CONTRACT=dev-1668347047737-98701073736505
VUE_APP_FT_CONTRACT=dev-1666535542413-87211317327493
'''
'''--- src/README.md ---
# NEAR-Exchange-Blockchain
'''
'''--- src/api/api.js ---
import request from '../utils/axios'

export function marketVolume(data) {
    return request({
        url: '/marketVolume',
        method: 'post',
        data
    })
}
'''
'''--- src/api/index.js ---
import { https } from "axios";

export const BASE_URL = "https://api.huobi.pro";

export const API_URL = {
  common_symbols: "/v1/common/symbols",
  history_kline: "/market/history/kline",
};

export async function apiGet(url, params, config) {
  let _url = API_URL[url];
  _url = _url ? `${BASE_URL}${_url}` : url;
  _url = params ? _url + params : _url;
  const res = await https.get(_url, config).catch(() => {
    return;
  });
  return res ? res.data : void 0;
}

export async function apiPost(url, params, config) {
  let _url = API_URL[url];
  _url = _url ? `${BASE_URL}${_url}` : url;
  const res = await https.post(_url, params, config).catch(() => {
    return;
  });
  return res ? res.data : void 0;
}

'''
'''--- src/assets/tailwind.css ---
@tailwind base;

@tailwind components;

@tailwind utilities;

body {
  background: #131a29;
  margin: 0;
}

* {
  box-sizing: border-box;
}

'''
'''--- src/auto-imports.d.ts ---
// Generated by 'unplugin-auto-import'
export {}
declare global {
  const EffectScope: typeof import('vue')['EffectScope']
  const computed: typeof import('vue')['computed']
  const createApp: typeof import('vue')['createApp']
  const customRef: typeof import('vue')['customRef']
  const defineAsyncComponent: typeof import('vue')['defineAsyncComponent']
  const defineComponent: typeof import('vue')['defineComponent']
  const defineLoader: typeof import('vue-router/auto')['defineLoader']
  const effectScope: typeof import('vue')['effectScope']
  const getCurrentInstance: typeof import('vue')['getCurrentInstance']
  const getCurrentScope: typeof import('vue')['getCurrentScope']
  const h: typeof import('vue')['h']
  const inject: typeof import('vue')['inject']
  const isProxy: typeof import('vue')['isProxy']
  const isReactive: typeof import('vue')['isReactive']
  const isReadonly: typeof import('vue')['isReadonly']
  const isRef: typeof import('vue')['isRef']
  const markRaw: typeof import('vue')['markRaw']
  const nextTick: typeof import('vue')['nextTick']
  const onActivated: typeof import('vue')['onActivated']
  const onBeforeMount: typeof import('vue')['onBeforeMount']
  const onBeforeUnmount: typeof import('vue')['onBeforeUnmount']
  const onBeforeUpdate: typeof import('vue')['onBeforeUpdate']
  const onDeactivated: typeof import('vue')['onDeactivated']
  const onErrorCaptured: typeof import('vue')['onErrorCaptured']
  const onMounted: typeof import('vue')['onMounted']
  const onRenderTracked: typeof import('vue')['onRenderTracked']
  const onRenderTriggered: typeof import('vue')['onRenderTriggered']
  const onScopeDispose: typeof import('vue')['onScopeDispose']
  const onServerPrefetch: typeof import('vue')['onServerPrefetch']
  const onUnmounted: typeof import('vue')['onUnmounted']
  const onUpdated: typeof import('vue')['onUpdated']
  const provide: typeof import('vue')['provide']
  const reactive: typeof import('vue')['reactive']
  const readonly: typeof import('vue')['readonly']
  const ref: typeof import('vue')['ref']
  const resolveComponent: typeof import('vue')['resolveComponent']
  const shallowReactive: typeof import('vue')['shallowReactive']
  const shallowReadonly: typeof import('vue')['shallowReadonly']
  const shallowRef: typeof import('vue')['shallowRef']
  const toRaw: typeof import('vue')['toRaw']
  const toRef: typeof import('vue')['toRef']
  const toRefs: typeof import('vue')['toRefs']
  const triggerRef: typeof import('vue')['triggerRef']
  const unref: typeof import('vue')['unref']
  const useAttrs: typeof import('vue')['useAttrs']
  const useCssModule: typeof import('vue')['useCssModule']
  const useCssVars: typeof import('vue')['useCssVars']
  const useHead: typeof import('@vueuse/head')['useHead']
  const useRoute: typeof import('vue-router/auto')['useRoute']
  const useRouter: typeof import('vue-router/auto')['useRouter']
  const useSlots: typeof import('vue')['useSlots']
  const watch: typeof import('vue')['watch']
  const watchEffect: typeof import('vue')['watchEffect']
  const watchPostEffect: typeof import('vue')['watchPostEffect']
  const watchSyncEffect: typeof import('vue')['watchSyncEffect']
}

'''
'''--- src/components.d.ts ---
// generated by unplugin-vue-components
// We suggest you to commit this file into source control
// Read more: https://github.com/vuejs/core/pull/3399
import '@vue/runtime-core'

export {}

declare module '@vue/runtime-core' {
  export interface GlobalComponents {
    Animation: typeof import('./src/components/Animation.vue')['default']
    Assets: typeof import('./src/components/Assets.vue')['default']
    ConnectWallet: typeof import('./src/components/ConnectWallet.vue')['default']
    copy: typeof import('./src/components/WalletModal copy.vue')['default']
    CreateOrderModal: typeof import('./src/components/CreateOrderModal.vue')['default']
    Dialog: typeof import('@headlessui/vue')['Dialog']
    DialogDeposit: typeof import('./src/components/modal/DialogDeposit.vue')['default']
    DialogPanel: typeof import('@headlessui/vue')['DialogPanel']
    DialogStorage: typeof import('./src/components/modal/DialogStorage.vue')['default']
    DialogTitle: typeof import('@headlessui/vue')['DialogTitle']
    DialogWithdraw: typeof import('./src/components/modal/DialogWithdraw.vue')['default']
    Disclosure: typeof import('@headlessui/vue')['Disclosure']
    DisclosureButton: typeof import('@headlessui/vue')['DisclosureButton']
    DisclosurePanel: typeof import('@headlessui/vue')['DisclosurePanel']
    DropDown: typeof import('./src/components/DropDown.vue')['default']
    FarmDisclosure: typeof import('./src/components/FarmDisclosure.vue')['default']
    Footer: typeof import('./src/components/footer/Footer.vue')['default']
    Hero: typeof import('./src/components/Hero.vue')['default']
    KLineWidget: typeof import('./src/components/KLineWidget.vue')['default']
    MarketHistory: typeof import('./src/components/MarketHistory.vue')['default']
    Menu: typeof import('@headlessui/vue')['Menu']
    MenuButton: typeof import('@headlessui/vue')['MenuButton']
    MenuItem: typeof import('@headlessui/vue')['MenuItem']
    MenuItems: typeof import('@headlessui/vue')['MenuItems']
    Navbar: typeof import('./src/components/Navbar.vue')['default']
    OrderBook: typeof import('./src/components/OrderBook.vue')['default']
    RangeSlider: typeof import('./src/components/RangeSlider.vue')['default']
    RouterLink: typeof import('vue-router')['RouterLink']
    RouterView: typeof import('vue-router')['RouterView']
    TradeBar: typeof import('./src/components/TradeBar.vue')['default']
    TradeFooter: typeof import('./src/components/footer/TradeFooter.vue')['default']
    TradeFrom: typeof import('./src/components/TradeFrom.vue')['default']
    TradingView: typeof import('./src/components/TradingView.vue')['default']
    TradingViewBinance: typeof import('./src/components/TradingViewBinance.vue')['default']
    TradingViewEmpty: typeof import('./src/components/TradingViewEmpty.vue')['default']
    TradingViewPlot: typeof import('./src/components/TradingViewPlot.vue')['default']
    TradingViewSimple: typeof import('./src/components/TradingViewSimple.vue')['default']
    TransitionChild: typeof import('@headlessui/vue')['TransitionChild']
    TransitionRoot: typeof import('@headlessui/vue')['TransitionRoot']
    UserTrade: typeof import('./src/components/UserTrade.vue')['default']
    Volume: typeof import('./src/components/Volume.vue')['default']
    WalletModal: typeof import('./src/components/WalletModal.vue')['default']
    WithdrawDropdown: typeof import('./src/components/modal/WithdrawDropdown.vue')['default']
  }
}

'''
'''--- src/config.js ---
const ORDERBOOK_CONTRACT = 'dev-1669066106934-14317766527403'
const GAS = '300000000000000'

function getConfig(env) {
  switch (env) {
    case "mainnet":
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        explorerUrl: "https://explorer.mainnet.near.org",
        GAS: GAS,
      };
    case "testnet":
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
        orderbookContract: ORDERBOOK_CONTRACT,
        GAS: GAS,
        tokens: [
          {
            "chainId": 1,
            "address": "btc1.fsy412.testnet",
            "name": "Bit Coin",
            "symbol": "BTC",
            "decimals": 18,
            "logoURI": "https://assets.coingecko.com/coins/images/1/large/bitcoin.png?1547033579",
            "id": "bitcoin"
          },
          {
            "chainId": 1,
            "address": "usdt.fsy412.testnet",
            "name": "BSC Token",
            "symbol": "BNB",
            "decimals": 18,
            "logoURI": "https://trade.mango.markets/assets/icons/bnb.svg",
            "id": "binancecoin"
          },
          {
            "chainId": 1,
            "address": "usdt.fsy412.testnet",
            "name": "USDT",
            "symbol": "USDT",
            "decimals": 18,
            "logoURI": "https://assets.coingecko.com/coins/images/325/large/Tether-logo.png?1598003707"
          }
        ]
      };
    default:
      throw Error(
        `Unconfigured environment '${env}'. Can be configured in src/config.js.`
      );
  }
}

export default getConfig;

'''
'''--- src/config/config.js ---
import { cfg } from './config_Godwoken.js'
// import { cfg } from './config_Hardhat.js'

export const CONFIG = {
  VaultAddress: cfg.VaultAddress,
}

'''
'''--- src/config/config_Godwoken.js ---
export const cfg = {
    VaultAddress: "0xf62045B84AB3f5401bC342C14dF625d913Ce5923",
};
'''
'''--- src/config/market_list.json ---
[
  {
    "chainId": 1,
    "market": "BTC-USDT"
  },
  {
    "chainId": 1,
    "market": "BNB-USDT"
  }
]
'''
'''--- src/config/tokenList.js ---
 
export default {
    "tokens": [
      {
        "chainId": 1,
        "address": "dev-1668868790396-35666025462065",
        "name": "Bit Coin",
        "symbol": "BTC",
        "decimals": 18,
        "logoURI": "https://assets.coingecko.com/coins/images/1/large/bitcoin.png?1547033579",
        "id": "bitcoin"
      },
      {
        "chainId": 1,
        "address": "dev-1668868790396-35666025462065",
        "name": "BSC Token",
        "symbol": "BNB",
        "decimals": 18,
        "logoURI": "https://trade.mango.markets/assets/icons/bnb.svg",
        "id": "binancecoin"
      },
      {
        "chainId": 1,
        "address": "dev-1668868790396-35666025462065",
        "name": "USDT",
        "symbol": "USDT",
        "decimals": 18,
        "logoURI": "https://assets.coingecko.com/coins/images/325/large/Tether-logo.png?1598003707"
      }
    ]
  }
'''
'''--- src/config/tokenList_Godwoken.json ---
{
  "tokens": [
    {
      "chainId": 1,
      "address": "dev-1668868790396-35666025462065",
      "name": "Bit Coin",
      "symbol": "BTC",
      "decimals": 18,
      "logoURI": "https://assets.coingecko.com/coins/images/1/large/bitcoin.png?1547033579",
      "id": "bitcoin"
    },
    {
      "chainId": 1,
      "address": "dev-1668868790396-35666025462065",
      "name": "BSC Token",
      "symbol": "BNB",
      "decimals": 18,
      "logoURI": "https://trade.mango.markets/assets/icons/bnb.svg",
      "id": "binancecoin"
    },
    {
      "chainId": 1,
      "address": "dev-1668868790396-35666025462065",
      "name": "USDT",
      "symbol": "USDT",
      "decimals": 18,
      "logoURI": "https://assets.coingecko.com/coins/images/325/large/Tether-logo.png?1598003707"
    }
  ]
}
'''
'''--- src/contract/Cargo.toml ---
[package]
name = "contract"
version = "1.0.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0-pre.8"
near-contract-standards = "4.0.0-pre.8"
uint = { version = "0.9.3", default-features = false }
orderbook = {path = "./orderbook-rs/"}
once_cell = "1.4.1"
parking_lot = "0.11.1"
events = {path = "./events/"}

[dev-dependencies]
near-sdk-sim = "4.0.0-pre.8"

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []
'''
'''--- src/contract/README.md ---
## Orderbook contract deployment
    near dev-deploy contract.wasm
## Orderbook contract init
    near call $ORDERBOOK new '{"owner_id": "'$ORDERBOOK'"}' --accountId $ORDERBOOK

## Orderbook create market
    near call $ORDERBOOK create_market '{"req":{"market": "BTC-USDT", "base_ft":"btc1.fsy412.testnet", "quote_ft":"usdt.fsy412.testnet"}
}' --accountId $ORDERBOOK

## Orderbook register in FT contract
    near call $FT_CONTRACT storage_deposit '{"account_id": "'$ORDERBOOK'"}' --accountId $FT_CONTRACT --amount 0.1

    near call usdt.fsy412.testnet storage_deposit '{"account_id": "'$ORDERBOOK'"}' --accountId usdt.fsy412.testnet --amount 0.1
    near call btc1.fsy412.testnet storage_deposit '{"account_id": "'$ORDERBOOK'"}' --accountId btc1.fsy412.testnet --amount 0.1

## User account register in FT contract
    near call $FT_CONTRACT storage_deposit '{"account_id": "fsy412.testnet"}' --accountId $FT_CONTRACT --amount 0.1

## User account register in Orderbook contract
    near call $ORDERBOOK storage_deposit '{"account_id": "fsy412.testnet"}' --accountId fsy412.testnet --amount 0.1
## Transfer some FT token to user account
    near call $FT_CONTRACT ft_transfer '{"receiver_id": "fsy412.testnet", "amount": "50000000000000000000000000", "memo": "Go Team!"}' --accountId $FT_CONTRACT --depositYocto 1
## User deposit FT token to orderbook contract
    near call $FT_CONTRACT ft_transfer_call '{"receiver_id": "'$ORDERBOOK'", "amount": "10000000000000000000000000", "msg": "Wooooooo!"}' --accountId fsy412.testnet --depositYocto 1 --gas 200000000000000

## Check user deposited balance
    near view $ORDERBOOK ft_deposits_of '{"account_id": "fsy412.testnet"}'
    
    near view $ORDERBOOK ft_deposits_of_asset '{"ft":"BTC","account_id": "fsy412.testnet"}'
 
## User withdraw FT from orderbook contract
    near call $ORDERBOOK ft_withdraw '{"amount": "10000000000000000000000000", "ft_contract_id":"dev-1668653145937-68979006040599"}' --accountId fsy412.testnet --depositYocto 1 --gas 300000000000000

# Contracts
- FT contract
  
   dev-1668653145937-68979006040599
- orderbook
  
   dev-1666537631161-54643597041874
'''
'''--- src/contract/build.sh ---
#!/bin/sh

echo ">> Building contract"

rustup target add wasm32-unknown-unknown
cargo build --all --target wasm32-unknown-unknown --release
'''
'''--- src/contract/deploy.sh ---
near dev-deploy --wasmFile ./target/wasm32-unknown-unknown/release/contract.wasm
'''
'''--- src/contract/deploy_testnet.sh ---
#!/bin/bash

set -e 
sh build.sh
rm -rf .env
rm -rvf neardev

near dev-deploy --wasmFile ./target/wasm32-unknown-unknown/release/contract.wasm
source neardev/dev-account.env

CONTRACT=$CONTRACT_NAME
OWNER_ID=ower.$CONTRACT

echo "CONTRACT=$CONTRACT" > .env
echo "OWNER_ID=$OWNER_ID" >> .env

set -e

near create-account $OWNER_ID --masterAccount $CONTRACT --initialBalance 5

'''
'''--- src/contract/env.sh ---
ORDERBOOK=dev-1666763620236-35533333588687
'''
'''--- src/contract/events/Cargo.toml ---
[package]
name = "events"
version = "0.1.0"
authors = [""]
edition = "2018"

[dependencies]
near-sdk = "4.0.0-pre.8"
serde_json = "1.0"
'''
'''--- src/contract/events/src/lib.rs ---
use std::fmt;

use near_sdk::json_types::U128;
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{env, AccountId};

// use tonic_sdk_dex_types::*;

#[derive(Debug, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Event {
    #[serde(flatten)] // due to tagging options, this adds a "type" key and a "data" key
    pub data: EventType,
}

impl fmt::Display for Event {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(&serde_json::to_string(self).map_err(|_| fmt::Error)?)
    }
}

// we tag this with type/content and flatten it into the event struct. this is
// because serde sometimes has trouble figuring out which enum member the json
// corresponds to
#[derive(Debug, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde", tag = "type", content = "data")]
pub enum EventType {
    Order(NewOrderEvent),
    Fill(NewFillEvent),
    Cancel(NewCancelEvent),
    NewMarket(NewMarketEvent),
    MyEvent(NewMyEvent),
}

#[derive(Debug, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde", rename = "new_order")]
pub struct NewOrderEvent {
    pub account_id: AccountId,
    // pub order_id: OrderId,
    // pub market_id: MarketId,
    /// Price specified in the order. Zero (0) if market order
    pub limit_price: U128,
    /// Price rank. `None` if the order didn't post
    pub price_rank: Option<U128>,
    /// Quantity specified in the order; may not be the same as amount traded
    pub quantity: U128,
    // pub side: Side,
    // pub order_type: OrderType,
    /// Taker fee denominated in the quote currency
    pub taker_fee: U128,
    pub referrer_id: Option<AccountId>,
    /// Referrer rebate denominated in the quote currency
    pub referrer_rebate: U128,
    /// True if order created by an [Action::Swap]
    #[serde(default)] // backwards compatibility
    pub is_swap: bool,
}

#[derive(Debug, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde", rename = "cancel_order")]
pub struct NewCancelEvent {
    // pub market_id: MarketId,
    pub cancels: Vec<CancelEventData>,
}

#[derive(Debug, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde", rename = "cancel_order")]
pub struct CancelEventData {
    pub order_id: String,
    pub refund_amount: U128,
    pub cancelled_qty: U128,
    pub price_rank: U128,
}

#[derive(Debug, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde", rename = "new_market")]
pub struct NewMarketEvent {
    pub creator_id: AccountId,
    // pub market_id: MarketId,
    // pub base_token: TokenType,
    // pub quote_token: TokenType,
}

#[derive(Debug, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde", rename = "new_fill")]
pub struct NewFillEvent {
    // pub market_id: MarketId,
    // pub order_id: OrderId,
    pub fills: Vec<FillEventData>,
}

#[derive(Debug, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct FillEventData {
    // pub maker_order_id: OrderId,
    pub fill_qty: U128,
    pub fill_price: U128,
    pub quote_qty: U128,
    pub maker_rebate: U128,
    // the taker side
    // pub side: Side,
    pub taker_account_id: AccountId,
    pub maker_account_id: AccountId,
    /// Price rank of the maker order right before it was filled. This is always
    /// zero (0).
    pub maker_price_rank: U128,
}

#[derive(Debug, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct NewMyEvent {
    pub order_id: String,
}

pub fn emit_event(data: EventType) {
    #[cfg(not(feature = "no_emit"))]
    env::log_str(&Event { data }.to_string());
}

'''
'''--- src/contract/orderbook-rs/Cargo.toml ---
[package]
name = "orderbook"
version = "0.1.0"
authors = ["Anton Dort-Golts <dortgolts@gmail.com>"]

[dependencies]
serde = { version = "1.0.138", features = ["derive"] }
near-sdk = "4.0.0-pre.8"
near-contract-standards = "4.0.0-pre.8"
float-cmp = "0.8.0"
'''
'''--- src/contract/orderbook-rs/README.md ---
# Order matching engine (orderbook)

Project is just a basic order-matching engine (orderbook), created especially for learning Rust and internals of trading systems.

Each instance of orderbook is a single-threaded reactive module for the certain currency pair. It consumes orders and return vector of events, generated during processing.

Supported features:

* market orders
* limit orders
* amending limit order price/quantity
* cancelling limit order
* partial filling

## Usage
Full example code could be found in `bin/example.rs`. Here is event log created in processing test orders:

```
Order => NewLimitOrder { order_asset: BTC, price_asset: USD, side: Bid, price: 0.98, qty: 5.0, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 859954000 } }
Processing => [Ok(Accepted { id: 1, order_type: Limit, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860016000 } })]
Spread => not available

Order => NewLimitOrder { order_asset: BTC, price_asset: USD, side: Ask, price: 1.02, qty: 1.0, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 859954000 } }
Processing => [Ok(Accepted { id: 2, order_type: Limit, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860064000 } })]
Spread => bid: 0.98, ask: 1.02

Order => AmendOrder { id: 1, side: Bid, price: 0.99, qty: 4.0, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 859954000 } }
Processing => [Ok(Amended { id: 1, price: 0.99, qty: 4.0, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860094000 } })]
Spread => bid: 0.99, ask: 1.02

Order => NewLimitOrder { order_asset: BTC, price_asset: USD, side: Bid, price: 1.01, qty: 0.4, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 859955000 } }
Processing => [Ok(Accepted { id: 3, order_type: Limit, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860119000 } })]
Spread => bid: 1.01, ask: 1.02

Order => NewLimitOrder { order_asset: BTC, price_asset: USD, side: Ask, price: 1.03, qty: 0.5, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 859955000 } }
Processing => [Ok(Accepted { id: 4, order_type: Limit, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860155000 } })]
Spread => bid: 1.01, ask: 1.02

Order => NewMarketOrder { order_asset: BTC, price_asset: USD, side: Bid, qty: 1.0, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 859955000 } }
Processing => [Ok(Accepted { id: 5, order_type: Market, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860180000 } }), Ok(Filled { order_id: 5, side: Bid, order_type: Market, price: 1.02, qty: 1.0, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860183000 } }), Ok(Filled { order_id: 2, side: Ask, order_type: Limit, price: 1.02, qty: 1.0, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860183000 } })]
Spread => bid: 1.01, ask: 1.03

Order => NewLimitOrder { order_asset: BTC, price_asset: USD, side: Ask, price: 1.05, qty: 0.5, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 859955000 } }
Processing => [Ok(Accepted { id: 6, order_type: Limit, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860248000 } })]
Spread => bid: 1.01, ask: 1.03

Order => CancelOrder { id: 4, side: Ask }
Processing => [Ok(Cancelled { id: 4, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860291000 } })]
Spread => bid: 1.01, ask: 1.05

Order => NewLimitOrder { order_asset: BTC, price_asset: USD, side: Bid, price: 1.06, qty: 0.6, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 859955000 } }
Processing => [Ok(Accepted { id: 7, order_type: Limit, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860320000 } }), Ok(PartiallyFilled { order_id: 7, side: Bid, order_type: Limit, price: 1.05, qty: 0.5, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860325000 } }), Ok(Filled { order_id: 6, side: Ask, order_type: Limit, price: 1.05, qty: 0.5, ts: SystemTime { tv_sec: 1516040690, tv_nsec: 860325000 } })]
Spread => not available
```

'''
'''--- src/contract/orderbook-rs/src/bin/example.rs ---

extern crate orderbook;

use std::time::SystemTime;
use orderbook::{Orderbook, OrderSide, orders};

#[derive(PartialEq, Eq, Debug, Copy, Clone)]
pub enum BrokerAsset {
    USD,
    EUR,
    BTC,
    ETH,
}

fn parse_asset(asset: &str) -> Option<BrokerAsset> {
    match asset {
        "USD" => Some(BrokerAsset::USD),
        "EUR" => Some(BrokerAsset::EUR),
        "BTC" => Some(BrokerAsset::BTC),
        "ETH" => Some(BrokerAsset::ETH),
        _ => None,
    }
}

fn main() {
    // let mut orderbook = Orderbook::new(BrokerAsset::BTC, BrokerAsset::USD);
    // let order_asset = parse_asset("BTC").unwrap();
    // let price_asset = parse_asset("USD").unwrap();

    // // create order requests
    // let order_list =
    //     vec![
    //         orders::new_limit_order_request(
    //             order_asset,
    //             price_asset,
    //             OrderSide::Bid,
    //             0.98,
    //             5.0,
    //             SystemTime::now()
    //         ),

    //         orders::new_limit_order_request(
    //             order_asset,
    //             price_asset,
    //             OrderSide::Ask,
    //             1.02,
    //             1.0,
    //             SystemTime::now()
    //         ),

    //         orders::amend_order_request(1, OrderSide::Bid, 0.99, 4.0, SystemTime::now()),

    //         orders::new_limit_order_request(
    //             order_asset,
    //             price_asset,
    //             OrderSide::Bid,
    //             1.01,
    //             0.4,
    //             SystemTime::now()
    //         ),

    //         orders::new_limit_order_request(
    //             order_asset,
    //             price_asset,
    //             OrderSide::Ask,
    //             1.03,
    //             0.5,
    //             SystemTime::now()
    //         ),

    //         orders::new_market_order_request(order_asset, price_asset, OrderSide::Bid, 1.0, SystemTime::now()),

    //         orders::new_limit_order_request(
    //             order_asset,
    //             price_asset,
    //             OrderSide::Ask,
    //             1.05,
    //             0.5,
    //             SystemTime::now()
    //         ),

    //         orders::limit_order_cancel_request(4, OrderSide::Ask),

    //         orders::new_limit_order_request(
    //             order_asset,
    //             price_asset,
    //             OrderSide::Bid,
    //             1.06,
    //             0.6,
    //             SystemTime::now()
    //         ),
    //     ];

    // // processing
    // for order in order_list {
    //     println!("Order => {:?}", &order);
    //     let res = orderbook.process_order(order);
    //     println!("Processing => {:?}", res);
    //     if let Some((bid, ask)) = orderbook.current_spread() {
    //         println!("Spread => bid: {}, ask: {}\n", bid, ask);
    //     } else {
    //         println!("Spread => not available\n");
    //     }
    // }
}

'''
'''--- src/contract/orderbook-rs/src/engine/domain.rs ---
use std::fmt::Debug;

extern crate near_sdk;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::serde::{Deserialize, Serialize};

#[derive(Debug, Copy, Clone, BorshDeserialize, BorshSerialize, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub enum OrderSide {
    Bid,
    Ask,
}

impl Default for OrderSide {
    fn default() -> Self {
        OrderSide::Bid
    }
}

// #[derive(Default, Debug, Clone, BorshDeserialize, BorshSerialize)]
// pub struct Asset;

#[derive(Default, Debug, Clone, BorshDeserialize, BorshSerialize, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Order<Asset>
where
    Asset: Debug + Clone,
{
    pub order_id: u64,
    pub order_asset: Asset,
    pub price_asset: Asset,
    pub side: OrderSide,
    pub price: u128,
    pub qty: u128,
    pub account: String,
}

#[derive(Eq, PartialEq, Debug, Copy, Clone)]
pub enum OrderType {
    Market,
    Limit,
}

'''
'''--- src/contract/orderbook-rs/src/engine/mod.rs ---

pub mod domain;
pub mod orderbook;
pub mod order_queues;
pub mod orders;
pub mod sequence;
pub mod validation;

'''
'''--- src/contract/orderbook-rs/src/engine/order_queues.rs ---
use super::domain::OrderSide;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{env, AccountId};
use std::cmp::Ordering;
use std::collections::{BinaryHeap, HashMap};
#[derive(Clone, BorshDeserialize, BorshSerialize, Debug, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct OrderIndex {
    pub id: u64,
    pub price: u128,
    pub timestamp: u64,
    pub order_side: OrderSide,
}

// Arrange at first by price and after that by time

impl Ord for OrderIndex {
    fn cmp(&self, other: &Self) -> Ordering {
        if self.price < other.price {
            match self.order_side {
                OrderSide::Bid => Ordering::Less,
                OrderSide::Ask => Ordering::Greater,
            }
        } else if self.price > other.price {
            match self.order_side {
                OrderSide::Bid => Ordering::Greater,
                OrderSide::Ask => Ordering::Less,
            }
        } else {
            // FIFO
            other.timestamp.cmp(&self.timestamp)
        }
    }
}

impl PartialOrd for OrderIndex {
    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
        Some(self.cmp(other))
    }
}

impl PartialEq for OrderIndex {
    fn eq(&self, other: &Self) -> bool {
        if self.price > other.price || self.price < other.price {
            false
        } else {
            self.timestamp == other.timestamp
        }
    }
}

impl Eq for OrderIndex {}

/// Public methods
#[derive(Default, BorshDeserialize, BorshSerialize, Clone, Debug, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct OrderQueue<T> {
    // use Option in order to replace heap in mutable borrow
    pub idx_queue: Option<BinaryHeap<OrderIndex>>,
    orders: HashMap<u64, T>,
    // op_counter: u64,
    // max_stalled: u64,
    queue_side: OrderSide,
}

impl<T> OrderQueue<T> {
    /// Create new order queue
    ///
    /// Queue is universal and could be used for both asks and bids
    pub fn new(side: OrderSide, max_stalled: u64, capacity: usize) -> Self {
        OrderQueue {
            idx_queue: Some(BinaryHeap::with_capacity(capacity)),
            orders: HashMap::with_capacity(capacity),
            // op_counter: 0,
            // max_stalled,
            queue_side: side,
        }
    }

    pub fn peek(&mut self) -> Option<&T> {
        // get best order ID
        let order_id = self.get_current_order_id()?;

        // obtain order info
        if self.orders.contains_key(&order_id) {
            self.orders.get(&order_id)
        } else {
            self.idx_queue.as_mut().unwrap().pop()?;
            self.peek()
        }
    }

    pub fn pop(&mut self) -> Option<T> {
        // remove order index from queue in any case
        let order_id = self.idx_queue.as_mut()?.pop()?.id;

        if self.orders.contains_key(&order_id) {
            self.orders.remove(&order_id)
        } else {
            self.pop()
        }
    }

    // Add new limit order to the queue
    pub fn insert(&mut self, id: u64, price: u128, ts: u64, order: T) -> bool {
        if self.orders.contains_key(&id) {
            // do not update existing order
            return false;
        }

        // store new order
        self.idx_queue.as_mut().unwrap().push(OrderIndex {
            id,
            price,
            timestamp: env::block_timestamp(),
            order_side: self.queue_side,
        });
        self.orders.insert(id, order);
        true
    }

    // use it when price was changed
    pub fn amend(&mut self, id: u64, price: u128, ts: u64, order: T) -> bool {
        if self.orders.contains_key(&id) {
            // store new order data
            self.orders.insert(id, order);
            self.rebuild_idx(id, price, ts);
            true
        } else {
            false
        }
    }

    pub fn cancel(&mut self, id: u64) -> bool {
        match self.orders.remove(&id) {
            Some(_) => {
                self.clean_check();
                true
            }
            None => false,
        }
    }

    /* Internal methods */

    /// Used internally when current order is partially matched.
    ///
    /// Note: do not modify price or time, cause index doesn't change!
    pub fn modify_current_order(&mut self, new_order: T) -> bool {
        if let Some(order_id) = self.get_current_order_id() {
            if self.orders.contains_key(&order_id) {
                self.orders.insert(order_id, new_order);
                return true;
            }
        }
        false
    }

    /// Verify if queue should be cleaned
    fn clean_check(&mut self) {
        // if self.op_counter > self.max_stalled {
        //     self.op_counter = 0;
        //     self.remove_stalled()
        // } else {
        //     self.op_counter += 1;
        // }
    }

    /// Remove dangling indices without orders from queue
    fn remove_stalled(&mut self) {
        if let Some(idx_queue) = self.idx_queue.take() {
            let mut active_orders = idx_queue.into_vec();
            active_orders.retain(|order_ptr| self.orders.contains_key(&order_ptr.id));
            self.idx_queue = Some(BinaryHeap::from(active_orders));
        }
    }

    /// Recreate order-index queue with changed index info
    fn rebuild_idx(&mut self, id: u64, price: u128, ts: u64) {
        if let Some(idx_queue) = self.idx_queue.take() {
            // deconstruct queue
            let mut active_orders = idx_queue.into_vec();
            // remove old idx value
            active_orders.retain(|order_ptr| order_ptr.id != id);
            // insert new one
            active_orders.push(OrderIndex {
                id,
                price,
                timestamp: env::block_timestamp(),
                order_side: self.queue_side,
            });
            // construct new queue
            let amended_queue = BinaryHeap::from(active_orders);
            self.idx_queue = Some(amended_queue);
        }
    }

    /// Return ID of current order in queue
    fn get_current_order_id(&self) -> Option<u64> {
        let order_id = self.idx_queue.as_ref()?.peek()?;
        Some(order_id.id)
    }

    pub fn get_order(&self, id: u64) -> &T {
        self.orders.get(&id).unwrap()
    }
}

#[cfg(test)]
mod test {
    use super::*;

    #[derive(Debug, Eq, PartialEq)]
    struct TestOrder {
        pub name: &'static str,
    }

    fn get_queue_empty(side: OrderSide) -> OrderQueue<TestOrder> {
        OrderQueue::new(side, 5, 10)
    }

    fn get_queue_bids() -> OrderQueue<TestOrder> {
        let mut bid_queue = get_queue_empty(OrderSide::Bid);

        assert!(bid_queue.insert(1, 1.01, 123, TestOrder { name: "low bid" },));
        assert!(bid_queue.insert(
            2,
            1.02,
            123,
            TestOrder {
                name: "high bid first"
            },
        ));
        // same price but later
        assert!(bid_queue.insert(
            3,
            1.02,
            123,
            TestOrder {
                name: "high bid second"
            },
        ));
        assert_eq!(bid_queue.peek().unwrap().name, "high bid first");

        bid_queue
    }

    fn get_queue_asks() -> OrderQueue<TestOrder> {
        let mut ask_queue = get_queue_empty(OrderSide::Ask);
        assert!(ask_queue.insert(
            1,
            1.01,
            123,
            TestOrder {
                name: "low ask first"
            },
        ));
        assert!(ask_queue.insert(2, 1.02, 123, TestOrder { name: "high ask" },));
        assert!(ask_queue.insert(
            3,
            1.01,
            123,
            TestOrder {
                name: "low ask second"
            },
        ));
        assert_eq!(ask_queue.peek().unwrap().name, "low ask first");

        ask_queue
    }

    #[test]
    fn queue_operations_insert_unique() {
        let mut bid_queue = get_queue_empty(OrderSide::Bid);
        assert_eq!(bid_queue.peek(), None);

        // insert unique
        assert!(bid_queue.insert(1, 1.01, 123, TestOrder { name: "first bid" },));

        // discard order with existing ID
        assert!(!bid_queue.insert(
            1,
            1.02,
            123,
            TestOrder {
                name: "another first bid"
            },
        ));
    }

    #[test]
    fn queue_operations_ordering_bid() {
        let mut bid_queue = get_queue_bids();

        assert_eq!(bid_queue.pop().unwrap().name, "high bid first");
        assert_eq!(bid_queue.pop().unwrap().name, "high bid second");
        assert_eq!(bid_queue.pop().unwrap().name, "low bid");
    }

    #[test]
    fn queue_operations_ordering_ask() {
        let mut ask_queue = get_queue_asks();

        assert_eq!(ask_queue.pop().unwrap().name, "low ask first");
        assert_eq!(ask_queue.pop().unwrap().name, "low ask second");
        assert_eq!(ask_queue.pop().unwrap().name, "high ask");
    }

    #[test]
    fn queue_operations_modify_order() {
        let mut bid_queue = get_queue_bids();

        assert!(bid_queue.modify_current_order(TestOrder {
            name: "current bid partially matched"
        },));

        assert_eq!(
            bid_queue.pop().unwrap().name,
            "current bid partially matched"
        );
        assert_eq!(bid_queue.pop().unwrap().name, "high bid second");
        assert_eq!(bid_queue.pop().unwrap().name, "low bid");
    }

    #[test]
    fn queue_operations_amend() {
        let mut ask_queue = get_queue_asks();

        // amend two orders in the queue
        assert!(ask_queue.amend(2, 0.99, 123, TestOrder { name: "new first" },));
        assert!(ask_queue.amend(1, 1.01, 123, TestOrder { name: "new last" },));
        // non-exist order
        assert!(!ask_queue.amend(
            4,
            3.03,
            123,
            TestOrder {
                name: "nonexistent"
            },
        ));

        assert_eq!(ask_queue.pop().unwrap().name, "new first");
        assert_eq!(ask_queue.pop().unwrap().name, "low ask second");
        assert_eq!(ask_queue.pop().unwrap().name, "new last");
    }

    #[test]
    fn queue_operations_cancel_order1() {
        let mut bid_queue = get_queue_bids();

        bid_queue.cancel(2);

        assert_eq!(bid_queue.pop().unwrap().name, "high bid second");
        assert_eq!(bid_queue.pop().unwrap().name, "low bid");
    }

    #[test]
    fn queue_operations_cancel_order2() {
        let mut ask_queue = get_queue_asks();

        ask_queue.cancel(3);

        assert_eq!(ask_queue.pop().unwrap().name, "low ask first");
        assert_eq!(ask_queue.pop().unwrap().name, "high ask");
    }
}

'''
'''--- src/contract/orderbook-rs/src/engine/orderbook.rs ---
use std::fmt::Debug;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::env;
use near_sdk::serde::{Deserialize, Serialize};

use super::domain::{Order, OrderSide, OrderType};
use super::order_queues::OrderQueue;
use super::orders::OrderRequest;
use super::sequence;
use super::validation::OrderRequestValidator;

const MIN_SEQUENCE_ID: u64 = 1;
const MAX_SEQUENCE_ID: u64 = 1000;
const MAX_STALLED_INDICES_IN_QUEUE: u64 = 10;
const ORDER_QUEUE_INIT_CAPACITY: usize = 500;

pub type OrderProcessingResult = Vec<Result<Success, Failed>>;

#[derive(Debug)]
pub enum Success {
    Accepted {
        id: u64,
        order_type: OrderType,
        order_creator: String,
        ts: u64,
    },

    Filled {
        order_id: u64,
        side: OrderSide,
        order_type: OrderType,
        price: u128,
        qty: u128,
        order_creator: String,
        ts: u64,
    },

    PartiallyFilled {
        order_id: u64,
        side: OrderSide,
        order_type: OrderType,
        price: u128,
        qty: u128,
        order_creator: String,
        ts: u64,
    },

    Amended {
        id: u64,
        price: u128,
        qty: u128,
        ts: u64,
    },

    Cancelled {
        id: u64,
        ts: u64,
    },
}

#[derive(Debug)]
pub enum Failed {
    ValidationFailed(String),
    DuplicateOrderID(u64),
    NoMatch(u64),
    OrderNotFound(u64),
}

#[derive(Debug, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct L2OpenLimitOrderView {
    pub price: u128,
    pub qty: u128,
}

#[derive(Default, BorshDeserialize, BorshSerialize, Clone, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Orderbook<Asset>
where
    Asset: Debug + Clone + Copy + Eq,
{
    order_asset: Asset,
    price_asset: Asset,
    pub bid_queue: OrderQueue<Order<Asset>>,
    pub ask_queue: OrderQueue<Order<Asset>>,
    seq: sequence::TradeSequence,
    order_validator: OrderRequestValidator<Asset>,
}

impl<Asset> Orderbook<Asset>
where
    Asset: Debug + Clone + Copy + Eq,
{
    /// Create new orderbook for pair of assets
    ///
    /// # Examples
    ///
    /// Basic usage:
    /// ```
    /// let mut orderbook = Orderbook::new(Asset::BTC, Asset::USD);
    /// let result = orderbook.process_order(OrderRequest::MarketOrder{  });
    /// assert_eq!(orderbook)
    /// ```
    // todo fix doc test!
    pub fn new(order_asset: Asset, price_asset: Asset) -> Self {
        Orderbook {
            order_asset,
            price_asset,
            bid_queue: OrderQueue::new(
                OrderSide::Bid,
                MAX_STALLED_INDICES_IN_QUEUE,
                ORDER_QUEUE_INIT_CAPACITY,
            ),
            ask_queue: OrderQueue::new(
                OrderSide::Ask,
                MAX_STALLED_INDICES_IN_QUEUE,
                ORDER_QUEUE_INIT_CAPACITY,
            ),
            seq: sequence::new_sequence_gen(MIN_SEQUENCE_ID, MAX_SEQUENCE_ID),
            order_validator: OrderRequestValidator::new(
                order_asset,
                price_asset,
                MIN_SEQUENCE_ID,
                MAX_SEQUENCE_ID,
            ),
        }
    }

    pub fn process_order(&mut self, order: OrderRequest<Asset>) -> OrderProcessingResult {
        // processing result accumulator
        let mut proc_result: OrderProcessingResult = vec![];

        // validate request
        if let Err(reason) = self.order_validator.validate(&order) {
            proc_result.push(Err(Failed::ValidationFailed(String::from(reason))));
            return proc_result;
        }
        let account_id = env::predecessor_account_id();
        match order {
            OrderRequest::NewMarketOrder {
                order_asset,
                price_asset,
                side,
                qty,
                ts: _ts,
                account_id,
            } => {
                // generate new ID for order
                let order_id = self.seq.next_id();
                proc_result.push(Ok(Success::Accepted {
                    id: order_id,
                    order_type: OrderType::Market,
                    order_creator: account_id.to_string(),
                    ts: 123,
                }));

                self.process_market_order(
                    &mut proc_result,
                    order_id,
                    order_asset,
                    price_asset,
                    side,
                    qty,
                    account_id.to_string(),
                );
            }

            OrderRequest::NewLimitOrder {
                order_asset,
                price_asset,
                side,
                price,
                qty,
                ts,
                account,
            } => {
                let order_id = self.seq.next_id();
                proc_result.push(Ok(Success::Accepted {
                    id: order_id,
                    order_type: OrderType::Limit,
                    order_creator: account_id.to_string(),
                    ts: 123,
                }));

                self.process_limit_order(
                    &mut proc_result,
                    order_id,
                    order_asset,
                    price_asset,
                    side,
                    price,
                    qty,
                    ts,
                    account_id.to_string(),
                );
            }

            OrderRequest::AmendOrder {
                id,
                side,
                price,
                qty,
                ts,
            } => {
                self.process_order_amend(&mut proc_result, id, side, price, qty, ts);
            }

            OrderRequest::CancelOrder { id, side } => {
                self.process_order_cancel(&mut proc_result, id, side);
            }
        }

        // return collected processing results
        proc_result
    }

    /// Get current spread as a tuple: (bid, ask)
    pub fn current_spread(&mut self) -> Option<(u128, u128)> {
        let bid = self.bid_queue.peek()?.price;
        let ask = self.ask_queue.peek()?.price;
        Some((bid, ask))
    }

    /* Processing logic */

    fn process_market_order(
        &mut self,
        results: &mut OrderProcessingResult,
        order_id: u64,
        order_asset: Asset,
        price_asset: Asset,
        side: OrderSide,
        qty: u128,
        account: String,
    ) {
        // get copy of the current limit order
        let opposite_order_result = {
            let opposite_queue = match side {
                OrderSide::Bid => &mut self.ask_queue,
                OrderSide::Ask => &mut self.bid_queue,
            };
            opposite_queue.peek().cloned()
        };

        if let Some(opposite_order) = opposite_order_result {
            let matching_complete = self.order_matching(
                results,
                &opposite_order,
                order_id,
                order_asset,
                price_asset,
                OrderType::Market,
                side,
                qty,
                &account,
            );

            if !matching_complete {
                // match the rest
                self.process_market_order(
                    results,
                    order_id,
                    order_asset,
                    price_asset,
                    side,
                    qty - opposite_order.qty,
                    account.clone(),
                );
            }
        } else {
            // no limit orders found
            results.push(Err(Failed::NoMatch(order_id)));
        }
    }

    fn process_limit_order(
        &mut self,
        results: &mut OrderProcessingResult,
        order_id: u64,
        order_asset: Asset,
        price_asset: Asset,
        side: OrderSide,
        price: u128,
        qty: u128,
        ts: u64,
        account: String,
    ) {
        // take a look at current opposite limit order
        let opposite_order_result = {
            let opposite_queue = match side {
                OrderSide::Bid => &mut self.ask_queue,
                OrderSide::Ask => &mut self.bid_queue,
            };
            opposite_queue.peek().cloned()
        };

        if let Some(opposite_order) = opposite_order_result {
            let could_be_matched = match side {
                // verify bid/ask price overlap
                OrderSide::Bid => price >= opposite_order.price,
                OrderSide::Ask => price <= opposite_order.price,
            };

            if could_be_matched {
                // match immediately
                let matching_complete = self.order_matching(
                    results,
                    &opposite_order,
                    order_id,
                    order_asset,
                    price_asset,
                    OrderType::Limit,
                    side,
                    qty,
                    &account,
                );

                if !matching_complete {
                    // process the rest of new limit order
                    self.process_limit_order(
                        results,
                        order_id,
                        order_asset,
                        price_asset,
                        side,
                        price,
                        qty - opposite_order.qty,
                        ts,
                        account,
                    );
                }
            } else {
                // just insert new order in queue
                self.store_new_limit_order(
                    results,
                    order_id,
                    order_asset,
                    price_asset,
                    side,
                    price,
                    qty,
                    ts,
                    account,
                );
            }
        } else {
            self.store_new_limit_order(
                results,
                order_id,
                order_asset,
                price_asset,
                side,
                price,
                qty,
                ts,
                account,
            );
        }
    }

    fn process_order_amend(
        &mut self,
        results: &mut OrderProcessingResult,
        order_id: u64,
        side: OrderSide,
        price: u128,
        qty: u128,
        ts: u64,
    ) {
        let order_queue = match side {
            OrderSide::Bid => &mut self.bid_queue,
            OrderSide::Ask => &mut self.ask_queue,
        };

        if order_queue.amend(
            order_id,
            price,
            ts,
            Order {
                order_id,
                order_asset: self.order_asset,
                price_asset: self.price_asset,
                side,
                price,
                qty,
                account: "test".to_string(),
            },
        ) {
            results.push(Ok(Success::Amended {
                id: order_id,
                price,
                qty,
                ts: 123,
            }));
        } else {
            results.push(Err(Failed::OrderNotFound(order_id)));
        }
    }

    fn process_order_cancel(
        &mut self,
        results: &mut OrderProcessingResult,
        order_id: u64,
        side: OrderSide,
    ) {
        let order_queue = match side {
            OrderSide::Bid => &mut self.bid_queue,
            OrderSide::Ask => &mut self.ask_queue,
        };

        if order_queue.cancel(order_id) {
            results.push(Ok(Success::Cancelled {
                id: order_id,
                ts: 123,
            }));
        } else {
            results.push(Err(Failed::OrderNotFound(order_id)));
        }
    }

    /* Helpers */

    fn store_new_limit_order(
        &mut self,
        results: &mut OrderProcessingResult,
        order_id: u64,
        order_asset: Asset,
        price_asset: Asset,
        side: OrderSide,
        price: u128,
        qty: u128,
        ts: u64,
        account: String,
    ) {
        let order_queue = match side {
            OrderSide::Bid => &mut self.bid_queue,
            OrderSide::Ask => &mut self.ask_queue,
        };
        if !order_queue.insert(
            order_id,
            price,
            ts,
            Order {
                order_id,
                order_asset,
                price_asset,
                side,
                price,
                qty,
                account: account.clone(),
            },
        ) {
            results.push(Err(Failed::DuplicateOrderID(order_id)))
        };
    }

    fn order_matching(
        &mut self,
        results: &mut OrderProcessingResult,
        opposite_order: &Order<Asset>,
        order_id: u64,
        order_asset: Asset,
        price_asset: Asset,
        order_type: OrderType,
        side: OrderSide,
        qty: u128,
        account: &str,
    ) -> bool {
        // real processing time
        let deal_time = env::block_timestamp();

        // match immediately
        if qty < opposite_order.qty {
            // fill new limit and modify opposite limit

            // report filled new order
            results.push(Ok(Success::Filled {
                order_id,
                side,
                order_type,
                price: opposite_order.price,
                qty,
                order_creator: opposite_order.account.clone(),
                ts: deal_time,
            }));

            // report partially filled opposite limit order
            results.push(Ok(Success::PartiallyFilled {
                order_id: opposite_order.order_id,
                side: opposite_order.side,
                order_type: OrderType::Limit,
                price: opposite_order.price,
                qty,
                order_creator: opposite_order.account.clone(),
                ts: deal_time,
            }));

            // modify unmatched part of the opposite limit order
            {
                let opposite_queue = match side {
                    OrderSide::Bid => &mut self.ask_queue,
                    OrderSide::Ask => &mut self.bid_queue,
                };
                opposite_queue.modify_current_order(Order {
                    order_id: opposite_order.order_id,
                    order_asset,
                    price_asset,
                    side: opposite_order.side,
                    price: opposite_order.price,
                    qty: opposite_order.qty - qty,
                    account: "test".to_string(),
                });
            }
        } else if qty > opposite_order.qty {
            // partially fill new limit order, fill opposite limit and notify to process the rest

            // report new order partially filled
            results.push(Ok(Success::PartiallyFilled {
                order_id,
                side,
                order_type,
                price: opposite_order.price,
                qty: opposite_order.qty,
                order_creator: opposite_order.account.clone(),
                ts: deal_time,
            }));

            // report filled opposite limit order
            results.push(Ok(Success::Filled {
                order_id: opposite_order.order_id,
                side: opposite_order.side,
                order_type: OrderType::Limit,
                price: opposite_order.price,
                qty: opposite_order.qty,
                order_creator: opposite_order.account.clone(),
                ts: deal_time,
            }));

            // remove filled limit order from the queue
            {
                let opposite_queue = match side {
                    OrderSide::Bid => &mut self.ask_queue,
                    OrderSide::Ask => &mut self.bid_queue,
                };
                opposite_queue.pop();
            }

            // matching incomplete
            return false;
        } else {
            // orders exactly match -> fill both and remove old limit

            // report filled new order
            results.push(Ok(Success::Filled {
                order_id,
                side,
                order_type,
                price: opposite_order.price,
                qty,
                order_creator: opposite_order.account.clone(),
                ts: deal_time,
            }));
            // report filled opposite limit order
            results.push(Ok(Success::Filled {
                order_id: opposite_order.order_id,
                side: opposite_order.side,
                order_type: OrderType::Limit,
                price: opposite_order.price,
                qty,
                order_creator: opposite_order.account.clone(),
                ts: deal_time,
            }));

            // remove filled limit order from the queue
            {
                let opposite_queue = match side {
                    OrderSide::Bid => &mut self.ask_queue,
                    OrderSide::Ask => &mut self.bid_queue,
                };
                opposite_queue.pop();
            }
        }

        // complete matching
        true
    }
}

#[cfg(test)]
mod test {

    use super::super::orders;
    use super::*;

    #[derive(PartialEq, Eq, Debug, Copy, Clone)]
    pub enum Asset {
        USD,
        BTC,
    }

    #[test]
    fn cancel_nonexisting() {
        let mut orderbook = Orderbook::new(Asset::BTC, Asset::USD);
        let request = orders::limit_order_cancel_request(1, OrderSide::Bid);
        let mut result = orderbook.process_order(request);

        assert_eq!(result.len(), 1);
        match result.pop().unwrap() {
            Err(_) => (),
            _ => panic!("unexpected events"),
        }
    }
}

'''
'''--- src/contract/orderbook-rs/src/engine/orders.rs ---
use super::domain::OrderSide;
use near_sdk::AccountId;
use std::fmt::Debug;

#[derive(Debug)]
pub enum OrderRequest<Asset>
where
    Asset: Debug + Clone,
{
    NewMarketOrder {
        order_asset: Asset,
        price_asset: Asset,
        side: OrderSide,
        qty: u128,
        ts: u64,
        account_id: AccountId,
    },

    NewLimitOrder {
        order_asset: Asset,
        price_asset: Asset,
        side: OrderSide,
        price: u128,
        qty: u128,
        ts: u64,
        account: String,
    },

    AmendOrder {
        id: u64,
        side: OrderSide,
        price: u128,
        qty: u128,
        ts: u64,
    },

    CancelOrder {
        id: u64,
        side: OrderSide,
        //ts: SystemTime,
    },
}

/* Constructors */

/// Create request for the new market order
pub fn new_market_order_request<Asset>(
    order_asset: Asset,
    price_asset: Asset,
    side: OrderSide,
    qty: u128,
    ts: u64,
    account_id: AccountId,
) -> OrderRequest<Asset>
where
    Asset: Debug + Clone,
{
    OrderRequest::NewMarketOrder {
        order_asset,
        price_asset,
        qty,
        side,
        ts,
        account_id,
    }
}

/// Create request for the new limit order
pub fn new_limit_order_request<Asset>(
    order_asset: Asset,
    price_asset: Asset,
    side: OrderSide,
    price: u128,
    qty: u128,
    ts: u64,
    account: String,
) -> OrderRequest<Asset>
where
    Asset: Debug + Clone,
{
    OrderRequest::NewLimitOrder {
        order_asset,
        price_asset,
        side,
        price,
        qty,
        ts,
        account,
    }
}

/// Create request for changing price/qty for the active limit order.
///
/// Note: do not change order side!
/// Instead cancel existing order and create a new one.
pub fn amend_order_request<Asset>(
    id: u64,
    side: OrderSide,
    price: u128,
    qty: u128,
    ts: u64,
) -> OrderRequest<Asset>
where
    Asset: Debug + Clone,
{
    OrderRequest::AmendOrder {
        id,
        side,
        price,
        qty,
        ts,
    }
}

/// Create request for cancelling active limit order
pub fn limit_order_cancel_request<Asset>(order_id: u64, side: OrderSide) -> OrderRequest<Asset>
where
    Asset: Debug + Clone,
{
    OrderRequest::CancelOrder { id: order_id, side }
}

'''
'''--- src/contract/orderbook-rs/src/engine/sequence.rs ---

extern crate near_sdk;
// use self::near_sdk::serde::Serialize;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::serde::{Deserialize, Serialize};

#[derive(Default, BorshDeserialize, BorshSerialize, Clone, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
// Rotating index sequence
pub struct TradeSequence {
    min_id: u64,
    max_id: u64,
    current_idx: u64,
}

impl TradeSequence {
    pub fn next_id(&mut self) -> u64 {
        let next_id = self.current_idx;

        // update index
        if (next_id + 1) <= self.max_id {
            self.current_idx += 1;
        } else {
            self.current_idx = self.min_id;
        }

        next_id
    }
}

pub fn new_sequence_gen(min: u64, max: u64) -> TradeSequence {
    TradeSequence {
        min_id: min,
        max_id: max,
        current_idx: min,
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn seq_from_zero() {
        let mut seq_gen = new_sequence_gen(0, 2);

        assert_eq!(seq_gen.current_idx, 0);
        assert_eq!(seq_gen.next_id(), 0);
        assert_eq!(seq_gen.next_id(), 1);
        assert_eq!(seq_gen.next_id(), 2);
        assert_eq!(seq_gen.next_id(), 0);
    }

    #[test]
    fn seq_from_positive() {
        let mut seq_gen = new_sequence_gen(1, 2);

        assert_eq!(seq_gen.current_idx, 1);
        assert_eq!(seq_gen.next_id(), 1);
        assert_eq!(seq_gen.next_id(), 2);
        assert_eq!(seq_gen.next_id(), 1);
    }
}

'''
'''--- src/contract/orderbook-rs/src/engine/validation.rs ---
use super::orders::OrderRequest;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::serde::{Deserialize, Serialize};
use std::fmt::Debug;
/// Validation errors
const ERR_BAD_ORDER_ASSET: &str = "bad order asset";
const ERR_BAD_PRICE_ASSET: &str = "bad price asset";
const ERR_BAD_PRICE_VALUE: &str = "price must be non-negative";
const ERR_BAD_QUANTITY_VALUE: &str = "quantity must be non-negative";
const ERR_BAD_SEQ_ID: &str = "order ID out of range";

/* Validators */
#[derive(Default, BorshDeserialize, BorshSerialize, Clone, Serialize, Deserialize)]
pub struct OrderRequestValidator<Asset> {
    orderbook_order_asset: Asset,
    orderbook_price_asset: Asset,
    min_sequence_id: u64,
    max_sequence_id: u64,
}

impl<Asset> OrderRequestValidator<Asset>
where
    Asset: Debug + Clone + Copy + Eq,
{
    pub fn new(
        orderbook_order_asset: Asset,
        orderbook_price_asset: Asset,
        min_sequence_id: u64,
        max_sequence_id: u64,
    ) -> Self {
        OrderRequestValidator {
            orderbook_order_asset,
            orderbook_price_asset,
            min_sequence_id,
            max_sequence_id,
        }
    }

    pub fn validate(&self, request: &OrderRequest<Asset>) -> Result<(), &str> {
        match *request {
            OrderRequest::NewMarketOrder {
                order_asset,
                price_asset,
                side: _side,
                qty,
                ts: _ts,
                account_id: _,
            } => self.validate_market(order_asset, price_asset, qty),

            OrderRequest::NewLimitOrder {
                order_asset,
                price_asset,
                side: _side,
                price,
                qty,
                ts: _ts,
                account: _,
            } => self.validate_limit(order_asset, price_asset, price, qty),

            OrderRequest::AmendOrder {
                id,
                price,
                side: _side,
                qty,
                ts: _ts,
            } => self.validate_amend(id, price, qty),

            OrderRequest::CancelOrder { id, side: _side } => self.validate_cancel(id),
        }
    }

    /* Internal validators */

    fn validate_market(
        &self,
        order_asset: Asset,
        price_asset: Asset,
        qty: u128,
    ) -> Result<(), &str> {
        if self.orderbook_order_asset != order_asset {
            return Err(ERR_BAD_ORDER_ASSET);
        }

        if self.orderbook_price_asset != price_asset {
            return Err(ERR_BAD_PRICE_ASSET);
        }

        if qty <= 0 {
            return Err(ERR_BAD_QUANTITY_VALUE);
        }

        Ok(())
    }

    fn validate_limit(
        &self,
        order_asset: Asset,
        price_asset: Asset,
        price: u128,
        qty: u128,
    ) -> Result<(), &str> {
        if self.orderbook_order_asset != order_asset {
            return Err(ERR_BAD_ORDER_ASSET);
        }

        if self.orderbook_price_asset != price_asset {
            return Err(ERR_BAD_PRICE_ASSET);
        }

        if price <= 0 {
            return Err(ERR_BAD_PRICE_VALUE);
        }

        if qty <= 0 {
            return Err(ERR_BAD_QUANTITY_VALUE);
        }

        Ok(())
    }

    fn validate_amend(&self, id: u64, price: u128, qty: u128) -> Result<(), &str> {
        if self.min_sequence_id > id || self.max_sequence_id < id {
            return Err(ERR_BAD_SEQ_ID);
        }

        if price <= 0 {
            return Err(ERR_BAD_PRICE_VALUE);
        }

        if qty <= 0 {
            return Err(ERR_BAD_QUANTITY_VALUE);
        }

        Ok(())
    }

    fn validate_cancel(&self, id: u64) -> Result<(), &str> {
        if self.min_sequence_id > id || self.max_sequence_id < id {
            return Err(ERR_BAD_SEQ_ID);
        }

        Ok(())
    }
}

'''
'''--- src/contract/orderbook-rs/src/lib.rs ---
mod engine;
extern crate near_sdk;

pub use engine::domain::{Order, OrderSide};
pub use engine::order_queues::{OrderIndex, OrderQueue};
pub use engine::orderbook::{
    Failed, L2OpenLimitOrderView, OrderProcessingResult, Orderbook, Success,
};
pub use engine::orders;

#[cfg(test)]
mod tests {
    use super::*;

    const FLOAT_THRESHOLD: f64 = 1e-6;

    fn match_float(expected: f64, get: f64) -> bool {
        if (expected - get).abs() < FLOAT_THRESHOLD {
            true
        } else {
            false
        }
    }

    #[derive(PartialEq, Eq, Debug, Copy, Clone, Hash)]
    enum Asset {
        USD,
        EUR,
        BTC,
        ETH,
    }

    fn parse_asset(asset: &str) -> Option<Asset> {
        match asset {
            "USD" => Some(Asset::USD),
            "EUR" => Some(Asset::EUR),
            "BTC" => Some(Asset::BTC),
            "ETH" => Some(Asset::ETH),
            _ => None,
        }
    }

    #[test]
    fn market_order_on_empty_orderbook() {
        use std::time::SystemTime;

        let mut orderbook = Orderbook::new(Asset::BTC, Asset::USD);
        let order_asset = parse_asset("BTC").unwrap();
        let price_asset = parse_asset("USD").unwrap();

        let order1 = orders::new_market_order_request(
            order_asset,
            price_asset,
            OrderSide::Bid,
            2.0,
            SystemTime::now(),
        );

        // process market order
        let res = orderbook.process_order(order1);

        if !match res[0] {
            Ok(Success::Accepted { id: 1, .. }) => true,
            _ => false,
        } || !match res[1] {
            Err(Failed::NoMatch(1)) => true,
            _ => false,
        } {
            panic!("unexpected event sequence: {:?}", res)
        }
    }

    #[test]
    fn market_order_partial_match() {
        use std::time::SystemTime;

        let mut orderbook = Orderbook::new(Asset::BTC, Asset::USD);
        let order_asset = parse_asset("BTC").unwrap();
        let price_asset = parse_asset("USD").unwrap();

        let order1 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Bid,
            10.0,
            1.0,
            SystemTime::now(),
        );

        let order2 = orders::new_market_order_request(
            order_asset,
            price_asset,
            OrderSide::Ask,
            0.5,
            SystemTime::now(),
        );

        orderbook.process_order(order1);
        let res = orderbook.process_order(order2);

        if !match res[0] {
            Ok(Success::Accepted { id: 2, .. }) => true,
            _ => false,
        } || !match res[1] {
            Ok(Success::Filled {
                order_id: 2,
                price,
                qty,
                ..
            }) if match_float(price, 10.0) && match_float(qty, 0.5) => true,
            _ => false,
        } || !match res[2] {
            Ok(Success::PartiallyFilled {
                order_id: 1,
                price,
                qty,
                ..
            }) if match_float(price, 10.0) && match_float(qty, 0.5) => true,
            _ => false,
        } {
            panic!("unexpected event sequence: {:?}", res)
        }
    }

    #[test]
    fn market_order_two_orders_match() {
        use std::time::SystemTime;

        let mut orderbook = Orderbook::new(Asset::BTC, Asset::USD);
        let order_asset = parse_asset("BTC").unwrap();
        let price_asset = parse_asset("USD").unwrap();

        let order1 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Bid,
            10.0,
            1.0,
            SystemTime::now(),
        );

        let order2 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Bid,
            12.0,
            1.0,
            SystemTime::now(),
        );

        let order3 = orders::new_market_order_request(
            order_asset,
            price_asset,
            OrderSide::Ask,
            1.5,
            SystemTime::now(),
        );

        orderbook.process_order(order1);
        orderbook.process_order(order2);
        let res = orderbook.process_order(order3);

        if !match res[0] {
            Ok(Success::Accepted { id: 3, .. }) => true,
            _ => false,
        } || !match res[1] {
            Ok(Success::PartiallyFilled {
                order_id: 3,
                price,
                qty,
                ..
            }) if match_float(price, 12.0) && match_float(qty, 1.0) => true,
            _ => false,
        } || !match res[2] {
            Ok(Success::Filled {
                order_id: 2,
                price,
                qty,
                ..
            }) if match_float(price, 12.0) && match_float(qty, 1.0) => true,
            _ => false,
        } || !match res[3] {
            Ok(Success::Filled {
                order_id: 3,
                price,
                qty,
                ..
            }) if match_float(price, 10.0) && match_float(qty, 0.5) => true,
            _ => false,
        } || !match res[4] {
            Ok(Success::PartiallyFilled {
                order_id: 1,
                price,
                qty,
                ..
            }) if match_float(price, 10.0) && match_float(qty, 0.5) => true,
            _ => false,
        } {
            panic!("unexpected event sequence: {:?}", res)
        }
    }

    #[test]
    fn limit_order_on_empty_orderbook() {
        use std::time::SystemTime;

        let mut orderbook = Orderbook::new(Asset::BTC, Asset::USD);
        let order_asset = parse_asset("BTC").unwrap();
        let price_asset = parse_asset("USD").unwrap();

        let order1 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Bid,
            10.0,
            2.0,
            SystemTime::now(),
        );

        // process order
        let res = orderbook.process_order(order1);

        if !match res[0] {
            Ok(Success::Accepted { id: 1, .. }) => true,
            _ => false,
        } {
            panic!("unexpected event sequence: {:?}", res)
        }
    }

    #[test]
    fn limit_order_partial_match() {
        use std::time::SystemTime;

        let mut orderbook = Orderbook::new(Asset::BTC, Asset::USD);
        let order_asset = parse_asset("BTC").unwrap();
        let price_asset = parse_asset("USD").unwrap();

        let order1 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Bid,
            10.0,
            1.0,
            SystemTime::now(),
        );

        let order2 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Ask,
            9.0,
            0.5,
            SystemTime::now(),
        );

        orderbook.process_order(order1);
        let res = orderbook.process_order(order2);

        if !match res[0] {
            Ok(Success::Accepted { id: 2, .. }) => true,
            _ => false,
        } || !match res[1] {
            Ok(Success::Filled {
                order_id: 2,
                price,
                qty,
                ..
            }) if match_float(price, 10.0) && match_float(qty, 0.5) => true,
            _ => false,
        } || !match res[2] {
            Ok(Success::PartiallyFilled {
                order_id: 1,
                price,
                qty,
                ..
            }) if match_float(price, 10.0) && match_float(qty, 0.5) => true,
            _ => false,
        } {
            panic!("unexpected event sequence: {:?}", res)
        }
    }

    #[test]
    fn limit_order_exact_match() {
        use std::time::SystemTime;

        let mut orderbook = Orderbook::new(Asset::BTC, Asset::USD);
        let order_asset = parse_asset("BTC").unwrap();
        let price_asset = parse_asset("USD").unwrap();

        let order1 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Bid,
            10.0,
            1.0,
            SystemTime::now(),
        );

        let order2 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Ask,
            9.0,
            0.5,
            SystemTime::now(),
        );

        orderbook.process_order(order1);
        let res = orderbook.process_order(order2);

        if !match res[0] {
            Ok(Success::Accepted { id: 2, .. }) => true,
            _ => false,
        } || !match res[1] {
            Ok(Success::Filled {
                order_id: 2,
                price,
                qty,
                ..
            }) if match_float(price, 10.0) && match_float(qty, 0.5) => true,
            _ => false,
        } || !match res[2] {
            Ok(Success::PartiallyFilled {
                order_id: 1,
                price,
                qty,
                ..
            }) if match_float(price, 10.0) && match_float(qty, 0.5) => true,
            _ => false,
        } {
            panic!("unexpected event sequence: {:?}", res)
        }

        let order3 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Ask,
            8.0,
            0.5,
            SystemTime::now(),
        );

        let res2 = orderbook.process_order(order3);

        if !match res2[0] {
            Ok(Success::Accepted { id: 3, .. }) => true,
            _ => false,
        } || !match res2[1] {
            Ok(Success::Filled {
                order_id: 3,
                price,
                qty,
                ..
            }) if match_float(price, 10.0) && match_float(qty, 0.5) => true,
            _ => false,
        } || !match res2[2] {
            Ok(Success::Filled {
                order_id: 1,
                price,
                qty,
                ..
            }) if match_float(price, 10.0) && match_float(qty, 0.5) => true,
            _ => false,
        } {
            panic!("unexpected event sequence: {:?}", res2)
        }

        assert_eq!(orderbook.current_spread(), None);
    }

    #[test]
    fn current_spread() {
        use std::time::SystemTime;

        let mut orderbook = Orderbook::new(Asset::BTC, Asset::USD);
        let order_asset = parse_asset("BTC").unwrap();
        let price_asset = parse_asset("USD").unwrap();

        let order1 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Bid,
            10.0,
            1.0,
            SystemTime::now(),
        );

        // not enough orders to calculate
        assert_eq!(orderbook.current_spread(), None);

        let order2 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Ask,
            12.0,
            0.5,
            SystemTime::now(),
        );

        let order3 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Ask,
            12.5,
            2.5,
            SystemTime::now(),
        );

        orderbook.process_order(order1);
        orderbook.process_order(order2);
        orderbook.process_order(order3);

        assert_eq!(orderbook.current_spread(), Some((10.0, 12.0)));

        // wider spread
        let order4 = orders::new_limit_order_request(
            order_asset,
            price_asset,
            OrderSide::Bid,
            14.0,
            1.5,
            SystemTime::now(),
        );
        let res = orderbook.process_order(order4);
        println!("{:?}", res);

        assert_eq!(orderbook.current_spread(), Some((10.0, 12.5)));
    }
}

'''
'''--- src/contract/src/account.rs ---
use crate::errors;
use crate::types::{parse_asset, BrokerAsset};
use crate::Contract;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::json_types::U128;
use near_sdk::{env, near_bindgen, AccountId, Balance, StorageUsage};
use orderbook::Order;
use std::collections::HashMap;

const U128_STORAGE: StorageUsage = 16;
const U64_STORAGE: StorageUsage = 8;
const U32_STORAGE: StorageUsage = 4;
/// max length of account id is 64 bytes. We charge per byte.
const ACC_ID_STORAGE: StorageUsage = 64;
/// As a key, 4 bytes length would be added to the head
const ACC_ID_AS_KEY_STORAGE: StorageUsage = ACC_ID_STORAGE + 4;
const KEY_PREFIX_ACC: StorageUsage = 64;
/// As a near_sdk::collection key, 1 byte for prefiex
const ACC_ID_AS_CLT_KEY_STORAGE: StorageUsage = ACC_ID_AS_KEY_STORAGE + 1;

// ACC_ID: the Contract accounts map key length
// + U128_STORAGE: near_amount storage
// + U32_STORAGE: tokens HashMap length
// + U32_STORAGE: open_orders HashMap length
// + U64_STORAGE: storage_used
pub const INIT_ACCOUNT_STORAGE: StorageUsage =
    ACC_ID_AS_CLT_KEY_STORAGE + U128_STORAGE + U32_STORAGE + U32_STORAGE + U64_STORAGE;

#[derive(BorshSerialize, BorshDeserialize, Debug)]
pub struct Account {
    balance: HashMap<String, Balance>,
    /// Amounts of tokens and native NEAR deposited to this account.
    asset_balance: HashMap<BrokerAsset, Balance>,
    /// account's open orders.
    open_orders: HashMap<String, HashMap<u64, Order<BrokerAsset>>>,
    /// Amount of NEAR deposited for storage. This is distinct from NEAR
    /// available for trading.
    pub storage_balance: Balance,
}

impl Account {
    pub fn new() -> Self {
        Self {
            balance: HashMap::new(),
            asset_balance: HashMap::new(),
            open_orders: HashMap::new(),
            storage_balance: 0,
        }
    }
    pub fn deposit(&mut self, asset: String, balance: Balance) {
        let exists = self.balance.contains_key(&asset);
        if exists {
            *self.balance.get_mut(&asset).unwrap() += balance;
        } else {
            self.balance.insert(asset, balance);
        }
    }

    pub fn withdraw(&mut self, asset: String, balance: Balance) {
        let exists = self.balance.contains_key(&asset);
        if exists {
            let val = self.balance.get(&asset).unwrap();
            *self.balance.get_mut(&asset).unwrap() = val - balance;
        } else {
        }
    }

    pub fn get_balance(&self, asset: String) -> Balance {
        self.balance[&asset]
    }

    pub fn deposit_asset(&mut self, asset: BrokerAsset, balance: Balance) {
        if let Some(x) = self.asset_balance.get(&asset).cloned() {
            self.asset_balance.insert(asset, balance + x);
        } else {
            self.asset_balance.insert(asset, balance);
        }
    }

    pub fn withdraw_asset(&mut self, asset: BrokerAsset, balance: Balance) {
        if let Some(x) = self.asset_balance.get(&asset).cloned() {
            if x < balance {
                env::panic_str(errors::INSUFFICIENT_BALANCE);
            }
            self.asset_balance.insert(asset, x - balance);
        } else {
            env::panic_str(errors::INSUFFICIENT_BALANCE);
        }
    }

    pub fn get_asset_balance(&self, asset: BrokerAsset) -> Balance {
        let balance = self.asset_balance.get(&asset).unwrap_or(&0);
        *balance
    }

    pub fn save_open_order(&mut self, market: String, order: Order<BrokerAsset>) {
        match self.open_orders.get_mut(&market) {
            Some(orders_in_market) => {
                orders_in_market.insert(order.order_id, order);
            }
            None => {
                let mut orders_in_market = HashMap::new();
                orders_in_market.insert(order.order_id, order);
                self.open_orders.insert(market.clone(), orders_in_market);
            }
        };
    }

    pub fn get_open_orders(&self, market: String) -> Vec<Order<BrokerAsset>> {
        self.open_orders[&market]
            .clone()
            .into_iter()
            .map(|x| x.1.clone())
            .collect()
    }

    /// Returns minimal account deposit storage usage possible.
    pub fn min_storage_usage() -> Balance {
        INIT_ACCOUNT_STORAGE as Balance * env::storage_byte_cost()
    }

    /// Returns amount of $NEAR necessary to cover storage used by this data structure.
    pub fn storage_usage(&self) -> Balance {
        (INIT_ACCOUNT_STORAGE
            + self.asset_balance.len() as u64
                * (KEY_PREFIX_ACC + ACC_ID_AS_KEY_STORAGE + U128_STORAGE)) as u128
            * env::storage_byte_cost()
    }

    /// Returns how much NEAR is available for storage.
    pub fn storage_available(&self) -> Balance {
        let locked = self.storage_usage();
        if self.storage_balance > locked {
            self.storage_balance - locked
        } else {
            0
        }
    }
}

impl Contract {
    pub fn internal_register_account(&mut self, account_id: &AccountId) -> Account {
        println!("internal_register_account:{:?}", account_id);
        let acc = Account::new();
        self.accounts.insert(account_id, &acc);
        acc
    }

    pub fn internal_get_account(&self, account_id: AccountId) -> Option<Account> {
        self.accounts.get(&account_id)
    }
}
mod tests {
    use super::*;
    use orderbook::OrderSide;
    use std::collections::HashMap;
    #[test]
    fn test_account() {
        let mut acc = Account::new();
        let bal: Balance = 12;
        acc.deposit("BTC".to_string(), bal);
        // println!("balance:{}", acc.get_balance("BTC".to_string()));
        assert_eq!(acc.get_balance("BTC".to_string()), bal);
    }

    #[test]
    fn test_account_order() {
        let mut account = Account::new();

        let order = Order {
            order_id: 1,
            order_asset: BrokerAsset::NEAR,
            price_asset: BrokerAsset::USDC,
            side: OrderSide::Bid,
            price: 12,
            qty: 1,
            account: "test".to_string(),
        };

        account.save_open_order("NEAR-USDT".to_string(), order)
    }

    #[test]
    fn test_account_balance() {
        let mut account = Account::new();
        let bal: Balance = 12;
        account.deposit_asset(BrokerAsset::NEAR, bal);
        // println!("balance:{}", &account.get_asset_balance(BrokerAsset::NEAR));
        assert_eq!(account.get_asset_balance(BrokerAsset::NEAR), bal);
    }

    #[test]
    fn account_withdraw() {
        let mut account = Account::new();
        let bal: Balance = 12;
        account.withdraw_asset(BrokerAsset::NEAR, bal);
        // println!("balance:{}", &account.get_asset_balance(BrokerAsset::NEAR));
        // assert_eq!(account.get_asset_balance(BrokerAsset::NEAR), bal);
    }

    #[test]
    fn get_open_order() {
        let mut account = Account::new();
        let order = Order {
            order_id: 1,
            order_asset: BrokerAsset::NEAR,
            price_asset: BrokerAsset::USDC,
            side: OrderSide::Bid,
            price: 12,
            qty: 1,
            account: "test".to_string(),
        };

        account.save_open_order("NEAR-USDT".to_string(), order);
        let orders = account.get_open_orders("NEAR-USDT".to_string());
        println!("{:?}", orders);
    }
}

'''
'''--- src/contract/src/action.rs ---

'''
'''--- src/contract/src/asset.rs ---
use crate::{types::{BrokerAsset, parse_asset}, Contract};
use near_sdk::{AccountId, env};

impl Contract {
    pub fn ft_contract_id_to_asset(&self, account_id: AccountId) -> BrokerAsset {
        let address = self.ft_address.get(&account_id.to_string());
        match address {
            Some(asset) => {
                parse_asset(&asset).unwrap()
            }
            None => {
                env::panic_str("unknown asset")
            }
        }
    }
}

'''
'''--- src/contract/src/errors.rs ---
pub const INSUFFICIENT_BALANCE: &str = "INSUFFICIENT_BALANCE";
'''
'''--- src/contract/src/external.rs ---
use crate::*;
use near_sdk::{ext_contract};
/// external contract calls
 
//initiate a cross contract call to the nft contract. This will transfer the token to the buyer and return
//a payout object used for the market to distribute funds to the appropriate accounts.
#[ext_contract(ext_ft_contract)]
trait ExtFtContract {
    fn ft_transfer(
        &mut self,
        receiver_id: AccountId, 
        amount: U128, 
        memo: Option<String>
    );
}
'''
'''--- src/contract/src/ft_balances.rs ---
use crate::*;
use near_contract_standards::fungible_token::core_impl::ext_fungible_token;
use near_sdk::json_types::U128;
use near_sdk::{ext_contract, require, Gas, PromiseResult};

const GAS_FOR_RESOLVE_REFUND: Gas = Gas(30_000_000_000_000);
const GAS_FOR_FT_TRANSFER: Gas = Gas(20_000_000_000_000);
pub const GAS_FOR_RESOLVE_TRANSFER: Gas = Gas(20_000_000_000_000); // 20 TGas
#[ext_contract(ext_self)]
pub trait Exchange {
    fn exchange_callback_post_withdraw(
        &mut self,
        ft_contract_id: AccountId,
        receiver_id: AccountId,
        amount: U128,
    );
}

trait FungibleTokenReceiver {
    fn ft_on_transfer(&mut self, sender_id: AccountId, amount: U128) -> U128;

    fn ft_withdraw(&mut self, amount: U128, ft_contract_id: AccountId);

    fn resolve_refund(&mut self, caller: AccountId, amount: U128) -> U128;

    fn ft_deposits_of(&self, account_id: AccountId) -> U128;
}

//implementation of the trait
#[near_bindgen]
impl FungibleTokenReceiver for Contract {
    /// This is how users will fund their FT balances in the contract
    fn ft_on_transfer(&mut self, sender_id: AccountId, amount: U128) -> U128 {
        // get the contract ID which is the predecessor
        let ft_contract_id = env::predecessor_account_id();
        //get the signer which is the person who initiated the transaction
        let signer_id = env::signer_account_id();

        // Add the amount to the user's current balance
        let account = &mut self.accounts.get(&signer_id).unwrap();
        let asset = self.ft_contract_id_to_asset(ft_contract_id);
        account.deposit_asset(asset, amount.0);

        self.accounts.insert(&sender_id, account);

        U128(amount.0)
    }

    #[payable]
    fn ft_withdraw(&mut self, amount: U128, ft_contract_id: AccountId) {
        //make sure the user attaches exactly 1 yoctoNEAR for security purposes.
        //this will redirect them to the NEAR wallet (or requires a full access key).
        assert_one_yocto();
        // Get the receiver_id and ensure they have enough balance
        let caller = env::predecessor_account_id();
        // let cur_bal = self.ft_deposits.get(&caller).unwrap_or(0);
        // require!(cur_bal >= amount.0, "Insufficient balance");
        // Subtract the amount from the caller's balance
        // let new_bal = cur_bal - amount.0;
        // self.ft_deposits.insert(&caller, &new_bal);
        ext_fungible_token::ft_transfer(
            caller.clone(),
            amount,
            None,
            ft_contract_id.clone(),
            1,
            GAS_FOR_FT_TRANSFER,
        )
        .then(ext_self::exchange_callback_post_withdraw(
            ft_contract_id.clone(),
            caller.clone(),
            U128(amount.0),
            env::current_account_id(),
            0,
            GAS_FOR_RESOLVE_TRANSFER,
        ));

        let account = &mut self.accounts.get(&caller).unwrap();
        let asset = self.ft_contract_id_to_asset(ft_contract_id);
        account.withdraw_asset(asset, amount.0);
    }

    #[private]
    fn resolve_refund(&mut self, caller: AccountId, amount: U128) -> U128 {
        let amount: Balance = amount.into();

        // Get the amount to revert the caller's balance with
        let revert_amount = match env::promise_result(0) {
            PromiseResult::NotReady => env::abort(),
            // If the promise was successful, get the return value and cast it to a U128.
            PromiseResult::Successful(_) => 0,
            // If the promise wasn't successful, return the original amount.
            PromiseResult::Failed => amount,
        };

        if revert_amount > 0 {
            // Get the caller's current balance
            // let cur_bal = self.ft_deposits.get(&caller).unwrap_or(0);
            // Add the amount to the caller's balance
            // let new_bal = cur_bal + revert_amount;
            // self.ft_deposits.insert(&caller, &new_bal);
        }

        U128(revert_amount)
    }

    /// Get the amount of FTs the user has deposited into the contract
    fn ft_deposits_of(&self, account_id: AccountId) -> U128 {
        // self.ft_deposits.get(&account_id).unwrap_or(0).into()
        0.into()
    }
}

#[near_bindgen]
impl Contract {
    #[private]
    pub fn exchange_callback_post_withdraw(
        &mut self,
        token: AccountId,
        receiver_id: AccountId,
        amount: U128,
    ) {
    }
}

'''
'''--- src/contract/src/lib.rs ---
mod account;
mod asset;
mod errors;
mod external;
mod ft_balances;
mod market;
mod owner;
mod settlement;
mod storage;
mod types;

use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::LookupMap;
use near_sdk::json_types::U128;
use near_sdk::{
    assert_one_yocto, env, near_bindgen, AccountId, Balance, BorshStorageKey, PanicOnDefault,
};

extern crate events;
use crate::events::*;
use account::*;
use market::*;
use orderbook::{orders, Failed, L2OpenLimitOrderView, Order, OrderSide, Success};
use std::collections::HashMap;
use types::*;

fn get_current_time() -> u64 {
    return env::block_timestamp();
}

fn parse_side(side: &str) -> Option<OrderSide> {
    match side {
        "Ask" => Some(OrderSide::Ask),
        "Bid" => Some(OrderSide::Bid),
        _ => None,
    }
}
// Define the contract structure
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
    pub owner_id: AccountId,

    pub markets: LookupMap<String, Market>,

    pub accounts: LookupMap<AccountId, Account>,

    // <dev-xxxxxxx,"BTC">
    pub ft_address: HashMap<String, String>,
}

#[derive(BorshStorageKey, BorshSerialize)]
pub enum StorageKey {
    StorageDeposits,
    FTDeposits,
    Market,
    Account,
    FT,
}

// Implement the contract structure
#[near_bindgen]
impl Contract {
    /*
        initialization function (can only be called once).
        this initializes the contract with default data and the owner ID
        that's passed in
    */
    #[init]
    pub fn new(owner_id: AccountId) -> Self {
        let this = Self {
            owner_id,
            // ft_deposits: LookupMap::new(StorageKey::FTDeposits),
            markets: LookupMap::new(StorageKey::Market),
            accounts: LookupMap::new(StorageKey::Account),
            ft_address: HashMap::new(),
        };

        this
    }

    pub fn create_market(&mut self, req: CreateMarket) {
        let arr: Vec<&str> = req.market.split("-").collect();
        let m = Market::new(arr[0].to_string(), arr[1].to_string());
        self.markets.insert(&req.market.to_string(), &m);

        self.ft_address.insert(req.base_ft, arr[0].to_string());
        self.ft_address.insert(req.quote_ft, arr[1].to_string());
    }

    pub fn orderbook(&self) -> (Vec<L2OpenLimitOrderView>, Vec<L2OpenLimitOrderView>) {
        let market = self.markets.get(&"BTC-USDT".to_string()).unwrap();
        let orderbook = market.get_orderbook();
        orderbook
    }

    pub fn place_order(&mut self, req: PlaceOrder) {
        // create order requests
        // let order_asset = parse_asset("BTC").unwrap();
        // let price_asset = parse_asset("USD").unwrap();

        let market = &mut self.markets.get(&req.market).unwrap();
        match req.order_type.as_str() {
            "limit" => {
                let account_id = env::predecessor_account_id();
                let order = orders::new_limit_order_request(
                    BrokerAsset::BTC,
                    BrokerAsset::USDT,
                    parse_side(&req.side).unwrap(),
                    req.price,
                    req.qty,
                    get_current_time(),
                    account_id.to_string(),
                );

                let res = market.place_order(order);
                println!("res {:?}", res);
                self.settle_result(account_id, market, parse_side(&req.side).unwrap(), res);
                self.markets.insert(&"BTC-USDT".to_string(), &market);
            }
            "market" => {
                let account = env::predecessor_account_id();
                let order = orders::new_market_order_request(
                    BrokerAsset::BTC,
                    BrokerAsset::USDT,
                    parse_side(&req.side).unwrap(),
                    req.qty,
                    get_current_time(),
                    account.clone(),
                );

                let res = market.place_order(order);
                println!("res {:?}", res);
                self.settle_result(account, market, parse_side(&req.side).unwrap(), res);
                self.markets.insert(&"BTC-USDT".to_string(), &market);
            }
            _ => {}
        }

        emit_event(EventType::MyEvent(NewMyEvent {
            order_id: "test".to_string(),
        }))
    }

    pub fn get_orderbook(
        &self,
        market: String,
    ) -> (Vec<L2OpenLimitOrderView>, Vec<L2OpenLimitOrderView>) {
        let market_inst = &mut self.markets.get(&market).unwrap();
        market_inst.get_orderbook()
    }

    pub fn get_open_orders(&self, market: String) -> Vec<Order<BrokerAsset>> {
        let account_id = env::predecessor_account_id();
        let account = self.internal_get_account(account_id).unwrap();
        let orders = account.get_open_orders(market);
        orders
    }

    pub fn ft_deposits_of_asset(&self, ft: String, account_id: AccountId) -> U128 {
        let account = self.internal_get_account(account_id);
        match account {
            Some(account) => {
                let asset = parse_asset(&ft).unwrap();
                account.get_asset_balance(asset).into()
            }
            None => 0.into(),
        }
    }
}

/*
 * The rest of this file holds the inline tests for the code above
 * Learn more about Rust tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html
 */
#[cfg(test)]
mod tests {
    use crate::storage::StorageManagement;

    use super::types::*;
    use super::*;
    use near_sdk::test_utils::{accounts, VMContextBuilder};
    use near_sdk::{testing_env, AccountId};

    fn get_context(predecessor_account_id: AccountId) -> VMContextBuilder {
        let mut builder = VMContextBuilder::new();
        builder
            .current_account_id(accounts(0))
            .signer_account_id(predecessor_account_id.clone())
            .predecessor_account_id(predecessor_account_id);
        builder
    }

    pub fn set_predecessor_context(account_id: AccountId) {
        let context = VMContextBuilder::new()
            .predecessor_account_id(account_id)
            .build();
        testing_env!(context);
    }

    #[test]
    fn test_new() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let contract = Contract::new(accounts(1));
    }
    #[test]
    fn test_place_order() {
        println!("test place order");
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let mut contract = Contract::new(accounts(1));

        contract.place_order(PlaceOrder {
            market: "BTC-USDT".to_string(),
            side: "Ask".to_string(),
            price: 12,
            qty: 1,
            order_type: "market".to_string(),
        });
        let orderbook = contract.get_orderbook("BTC-USDT".to_string());
    }
    #[test]
    fn test_limit_order() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let mut contract = Contract::new(accounts(1));

        contract.create_market(CreateMarket {
            market: "BTC-USDT".to_string(),
            base_ft: "btc".to_string(),
            quote_ft: "usdt".to_string(),
        });

        let maker_account_id = accounts(1);
        let taker_account_id = accounts(2);

        let mut maker_acc = contract.internal_register_account(&maker_account_id);
        maker_acc.deposit_asset(BrokerAsset::BTC, 1);
        maker_acc.deposit_asset(BrokerAsset::USDT, 0);
        contract.accounts.insert(&maker_account_id, &maker_acc);
        let mut taker_acc = contract.internal_register_account(&taker_account_id);
        taker_acc.deposit_asset(BrokerAsset::BTC, 0);
        taker_acc.deposit_asset(BrokerAsset::USDT, 20000);
        contract.accounts.insert(&taker_account_id, &taker_acc);
        println!(
            "maker: {:?}, {:?}",
            maker_acc.get_asset_balance(BrokerAsset::BTC),
            maker_acc.get_asset_balance(BrokerAsset::USDT),
        );
        println!(
            "taker: {:?}, {:?}",
            taker_acc.get_asset_balance(BrokerAsset::BTC),
            taker_acc.get_asset_balance(BrokerAsset::USDT),
        );

        contract.place_order(PlaceOrder {
            market: "BTC-USDT".to_string(),
            side: "Ask".to_string(),
            price: 20000,
            qty: 1,
            order_type: "limit".to_string(),
        });
        // change predecessor_account_id
        set_predecessor_context(taker_account_id.clone());
        contract.place_order(PlaceOrder {
            market: "BTC-USDT".to_string(),
            side: "Bid".to_string(),
            price: 20000,
            qty: 1,
            order_type: "limit".to_string(),
        });

        println!("after settle");

        let maker_acc = contract.internal_get_account(maker_account_id).unwrap();
        let taker_acc = contract.internal_get_account(taker_account_id).unwrap();
        println!(
            "maker: {:?}, {:?}",
            &maker_acc.get_asset_balance(BrokerAsset::BTC),
            &maker_acc.get_asset_balance(BrokerAsset::USDT)
        );
        println!(
            "taker: {:?}, {:?}",
            &taker_acc.get_asset_balance(BrokerAsset::BTC),
            &taker_acc.get_asset_balance(BrokerAsset::USDT)
        );

        let orderbook = contract.get_orderbook("BTC-USDT".to_string());
        println!("{:?}", orderbook);
    }

    #[test]
    fn test_market_order() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let mut contract = Contract::new(accounts(1));

        let maker_account_id = accounts(1);
        let taker_account_id = accounts(2);

        let mut maker_acc = contract.internal_register_account(&maker_account_id);
        maker_acc.deposit_asset(BrokerAsset::BTC, 1);
        maker_acc.deposit_asset(BrokerAsset::USDT, 0);
        contract.accounts.insert(&maker_account_id, &maker_acc);
        let mut taker_acc = contract.internal_register_account(&taker_account_id);
        taker_acc.deposit_asset(BrokerAsset::BTC, 0);
        taker_acc.deposit_asset(BrokerAsset::USDT, 20000);
        contract.accounts.insert(&taker_account_id, &taker_acc);
        println!(
            "maker: {:?}, {:?}",
            maker_acc.get_asset_balance(BrokerAsset::BTC),
            maker_acc.get_asset_balance(BrokerAsset::USDT),
        );
        println!(
            "taker: {:?}, {:?}",
            taker_acc.get_asset_balance(BrokerAsset::BTC),
            taker_acc.get_asset_balance(BrokerAsset::USDT),
        );

        contract.place_order(PlaceOrder {
            market: "BTC-USDT".to_string(),
            side: "Ask".to_string(),
            price: 20000,
            qty: 1,
            order_type: "limit".to_string(),
        });
        // change predecessor_account_id
        set_predecessor_context(taker_account_id.clone());
        contract.place_order(PlaceOrder {
            market: "BTC-USDT".to_string(),
            side: "Bid".to_string(),
            price: 20000,
            qty: 1,
            order_type: "market".to_string(),
        });

        println!("after settle");

        let maker_acc = contract.internal_get_account(maker_account_id).unwrap();
        let taker_acc = contract.internal_get_account(taker_account_id).unwrap();
        println!(
            "maker: {:?}, {:?}",
            &maker_acc.get_asset_balance(BrokerAsset::BTC),
            &maker_acc.get_asset_balance(BrokerAsset::USDT)
        );
        println!(
            "taker: {:?}, {:?}",
            &taker_acc.get_asset_balance(BrokerAsset::BTC),
            &taker_acc.get_asset_balance(BrokerAsset::USDT)
        );

        let orderbook = contract.get_orderbook("BTC-USDT".to_string());
        println!("{:?}", orderbook);
    }

    #[test]
    fn test_market_order_unmatched() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let mut contract = Contract::new(accounts(1));

        let maker_account_id = accounts(1);
        let taker_account_id = accounts(2);

        let mut maker_acc = contract.internal_register_account(&maker_account_id);
        maker_acc.deposit_asset(BrokerAsset::BTC, 1);
        maker_acc.deposit_asset(BrokerAsset::USDT, 0);
        contract.accounts.insert(&maker_account_id, &maker_acc);
        let mut taker_acc = contract.internal_register_account(&taker_account_id);
        taker_acc.deposit_asset(BrokerAsset::BTC, 0);
        taker_acc.deposit_asset(BrokerAsset::USDT, 20000);
        contract.accounts.insert(&taker_account_id, &taker_acc);
        println!(
            "maker: {:?}, {:?}",
            maker_acc.get_asset_balance(BrokerAsset::BTC),
            maker_acc.get_asset_balance(BrokerAsset::USDT),
        );
        println!(
            "taker: {:?}, {:?}",
            taker_acc.get_asset_balance(BrokerAsset::BTC),
            taker_acc.get_asset_balance(BrokerAsset::USDT),
        );

        contract.place_order(PlaceOrder {
            market: "BTC-USDT".to_string(),
            side: "Ask".to_string(),
            price: 20000,
            qty: 1,
            order_type: "market".to_string(),
        });
        let orderbook = contract.get_orderbook("BTC-USDT".to_string());
        println!("{:?}", orderbook);
    }

    #[test]
    fn test_match() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let mut contract = Contract::new(accounts(1));

        contract.place_order(PlaceOrder {
            market: "BTC-USDT".to_string(),
            side: "Ask".to_string(),
            price: 12,
            qty: 1,
            order_type: "market".to_string(),
        });

        contract.place_order(PlaceOrder {
            market: "BTC-USDT".to_string(),
            side: "Bid".to_string(),
            price: 12,
            qty: 1,
            order_type: "market".to_string(),
        });

        let orderbook = contract.get_orderbook("BTC-USDT".to_string());
        println!("{:?}", orderbook);
    }

    #[test]
    fn test_admin() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let mut contract = Contract::new(accounts(1));

        let mut req = Vec::new();
        req.push(RegisterTokenElement {
            ft: "BTC".to_string(),
            address: "BTC".to_string(),
        });

        contract.register_ft_address(req)
    }

    #[test]
    fn test_account_balance() {
        let mut context = get_context(accounts(1));

        testing_env!(context.build());

        context.attached_deposit(500000000000000000000000);
        let mut contract = Contract::new(accounts(1));
        let account_id = accounts(1);
        contract.storage_deposit(Some(account_id), Some(true));

        let account_id = accounts(1);

        // let account = contract.internal_get_account(account_id).unwrap();
        let mut account = contract.accounts.get(&account_id).unwrap();
        account.deposit_asset(BrokerAsset::BTC, 12);

        contract.accounts.insert(&account_id, &account);

        let account_id = accounts(1);
        let balance = contract.ft_deposits_of_asset("BTC".to_string(), account_id);
        println!("balance:{:?}", balance)
    }
}

'''
'''--- src/contract/src/market.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use orderbook::orders::OrderRequest;
use orderbook::*;
use crate::types::BrokerAsset;

#[derive(Default, BorshSerialize, BorshDeserialize)]
pub struct Market {
    pub base_token: BrokerAsset,
    pub quote_token: BrokerAsset,
    pub orderbook: Orderbook<BrokerAsset>,
}

impl Market {
    pub fn new(base: String, quote: String) -> Self {
        Self {
            base_token: BrokerAsset::BTC,
            quote_token: BrokerAsset::USDT,
            orderbook: Orderbook::new(BrokerAsset::BTC, BrokerAsset::USDT),
        }
    }

    pub fn place_order(&mut self, order: OrderRequest<BrokerAsset>) -> Vec<Result<Success, Failed>> {
        let res = self.orderbook.process_order(order);
        res
    }

    pub fn get_orderbook(&self) -> (Vec<L2OpenLimitOrderView>, Vec<L2OpenLimitOrderView>) {
        let bid = self
            .orderbook
            .bid_queue
            .clone()
            .idx_queue
            .unwrap()
            .iter()
            .map(|x| L2OpenLimitOrderView {
                price: x.price,
                qty: self.orderbook.bid_queue.get_order(x.id).qty,
            })
            .collect::<Vec<L2OpenLimitOrderView>>();

        let ask = self
            .orderbook
            .ask_queue
            .clone()
            .idx_queue
            .unwrap()
            .iter()
            .map(|x| L2OpenLimitOrderView {
                price: x.price,
                qty: self.orderbook.ask_queue.get_order(x.id).qty,
            })
            .collect::<Vec<L2OpenLimitOrderView>>();
        (bid, ask)
    }
}
#[cfg(test)]
mod tests {
    use near_sdk::env;

    use crate::parse_side;
    #[test]
    fn test_market() {
        use super::*;
        let mut market = Market::new("BTC".to_string(), "USDT".to_string());
        let order = orders::new_limit_order_request(
            BrokerAsset::BTC,
            BrokerAsset::USDT,
            parse_side(&"Bid").unwrap(),
            1,
            10,
            env::block_timestamp(),
            "test".to_string(),
        );
        market.place_order(order);
        market.get_orderbook();
    }
}

'''
'''--- src/contract/src/owner.rs ---
use crate::*;

impl Contract {
    pub fn register_ft_address(&mut self, req: RegisterToken) {
        let caller = env::predecessor_account_id();
        if self.owner_id !=caller{
            env::panic_str("not owner")
        }
        for item in &req {
            self.ft_address.insert(item.address.clone(),item.ft.clone());
        }
    }
}

'''
'''--- src/contract/src/settlement.rs ---
use crate::OrderSide;
use crate::*;
use near_sdk::AccountId;
use std::str::FromStr;

impl Contract {
    pub fn settle_result(
        &mut self,
        taker_account_id: AccountId,
        market: &mut Market,
        taker_side: OrderSide,
        results: Vec<Result<Success, Failed>>,
    ) {
        for temp_variable in &results {
            let _ret = match temp_variable {
                Ok(success) => {
                    // let success = temp_variable.as_ref().unwrap();
                    match success {
                        Success::Accepted {
                            id: _,
                            order_type: _,
                            order_creator: _,
                            ts: _,
                        } => {

                            
                        }
                        Success::Filled {
                            order_id: u64,
                            side,
                            order_type: _,
                            price,
                            qty,
                            order_creator,
                            ts: _,
                        } => {
                            match side {
                                OrderSide::Ask => {
                                    match taker_side {
                                        OrderSide::Ask => continue,
                                        OrderSide::Bid => {
                                            // taker buy
                                            let maker_account_id =
                                                AccountId::from_str(order_creator).unwrap();
                                            if maker_account_id == taker_account_id {
                                                continue;
                                            }
                                            let taker_account =
                                                &mut self.accounts.get(&taker_account_id).unwrap();
                                            let maker_account =
                                                &mut self.accounts.get(&maker_account_id).unwrap();

                                            taker_account.withdraw_asset(
                                                market.quote_token,
                                                *qty * (*price),
                                            );
                                            taker_account.deposit_asset(market.base_token, *qty);

                                            maker_account
                                                .deposit_asset(market.quote_token, *qty * (*price));
                                            maker_account.withdraw_asset(market.base_token, *qty);

                                            self.accounts.insert(&taker_account_id, taker_account);
                                            self.accounts.insert(&maker_account_id, maker_account);
                                        }
                                    }
                                }
                                OrderSide::Bid => {
                                    match taker_side {
                                        OrderSide::Bid => continue,
                                        OrderSide::Ask => {
                                            // taker sell
                                            let maker_account_id =
                                                AccountId::from_str(order_creator).unwrap();
                                            if maker_account_id == taker_account_id {
                                                continue;
                                            }

                                            let taker_account =
                                                &mut self.accounts.get(&taker_account_id).unwrap();
                                            let maker_account =
                                                &mut self.accounts.get(&maker_account_id).unwrap();

                                            taker_account.withdraw_asset(market.base_token, *qty);
                                            taker_account
                                                .deposit_asset(market.quote_token, *qty * (*price));

                                            maker_account.deposit_asset(market.base_token, *qty);
                                            maker_account.withdraw_asset(
                                                market.quote_token,
                                                *qty * (*price),
                                            );

                                            self.accounts.insert(&taker_account_id, taker_account);
                                            self.accounts.insert(&maker_account_id, maker_account);
                                        }
                                    }
                                }
                            };
                        }
                        Success::PartiallyFilled {
                            order_id: _,
                            side,
                            order_type: _,
                            price: _,
                            qty,
                            order_creator,
                            ts: _,
                        } => {}
                        Success::Amended {
                            id: _,
                            price: _,
                            qty: _,
                            ts: _,
                        } => {}
                        Success::Cancelled { id: _, ts: _ } => {}
                    }
                }
                Err(error) => {
                    println!("{:?}", error)
                }
            };
        }
    }
}

'''
'''--- src/contract/src/storage.rs ---
use crate::*;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::json_types::U128;
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{env, log, AccountId, Balance, Promise};

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct StorageBalance {
    pub total: U128,
    pub available: U128,
}

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct StorageBalanceBounds {
    pub min: U128,
    pub max: Option<U128>,
}

pub trait StorageManagement {
    fn storage_deposit(
        &mut self,
        account_id: Option<AccountId>,
        registration_only: Option<bool>,
    ) -> StorageBalance;

    fn storage_balance_bounds(&self) -> StorageBalanceBounds;

    fn storage_balance_of(&self, account_id: AccountId) -> Option<StorageBalance>;
}

#[near_bindgen]
impl StorageManagement for Contract {
    #[allow(unused_variables)]
    #[payable]
    fn storage_deposit(
        &mut self,
        account_id: Option<AccountId>,
        registration_only: Option<bool>,
    ) -> StorageBalance {
        // Get the amount of $NEAR to deposit
        let amount: Balance = env::attached_deposit();
        // If an account was specified, use that. Otherwise, use the predecessor account.
        let account_id = account_id.unwrap_or_else(env::predecessor_account_id);
        // If the account is already registered, refund the deposit.
        if self.accounts.contains_key(&account_id) {
            log!("The account is already registered, refunding the deposit");
            if amount > 0 {
                Promise::new(env::predecessor_account_id()).transfer(amount);
            }
        } else {
            // Get the minimum required storage and ensure the deposit is at least that amount
            let min_balance = self.storage_balance_bounds().min.0;
            // if amount < min_balance {
            //     env::panic_str("The attached deposit is less than the minimum storage balance");
            // }

            // Register the account and refund any excess $NEAR
            let mut account = self.internal_register_account(&account_id);
            if registration_only.unwrap() {
                let refund = amount - min_balance;
                account.storage_balance = Balance::from(min_balance);
                if refund > 0 {
                    Promise::new(env::predecessor_account_id()).transfer(refund);
                }
            } else {
                account.storage_balance = amount;
            }
        }

        // Return the storage balance of the account
        self.storage_balance_of(account_id).unwrap()
    }

    fn storage_balance_bounds(&self) -> StorageBalanceBounds {
        // Calculate the required storage balance by taking the bytes for the longest account ID and multiplying by the current byte cost
        StorageBalanceBounds {
            min: Account::min_storage_usage().into(),
            max: None,
        }
    }

    fn storage_balance_of(&self, account_id: AccountId) -> Option<StorageBalance> {
        // Get the storage balance of the account. Available will always be 0 since you can't overpay for storage.
        self.internal_get_account(account_id)
            .map(|account| StorageBalance {
                total: U128(account.storage_balance),
                available: U128(account.storage_available()),
            })
    }
}

'''
'''--- src/contract/src/types.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::serde::{Deserialize, Serialize};
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct PlaceOrder {
    pub market: String,
    pub side: String,
    pub price: u128,
    pub qty: u128,
    pub order_type: String,
}
#[allow(non_camel_case_types)]
#[derive(Debug, Clone, BorshDeserialize, BorshSerialize, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct OrderbookReq {
    pub market: String,
    pub side: String,
    pub price: u128,
    pub qty: u128,
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, BorshDeserialize, BorshSerialize)]
pub struct DepositReq {
    pub market: String,
    pub qty: f64,
}

pub type RegisterToken = Vec<RegisterTokenElement>;

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct RegisterTokenElement {
    #[serde(rename = "ft")]
    pub ft: String,

    #[serde(rename = "address")]
    pub address: String,
}

#[allow(non_camel_case_types)]
#[derive(Debug, Clone, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct CreateMarket {
    #[serde(rename = "market")]
    pub market: String,

    #[serde(rename = "base_ft")]
    pub base_ft: String,

    #[serde(rename = "quote_ft")]
    pub quote_ft: String
}

#[derive(
    Eq,
    PartialEq,
    PartialOrd,
    BorshSerialize,
    BorshDeserialize,
    Serialize,
    Deserialize,
    Clone,
    Copy,
    Debug,
    Hash,
)]
#[serde(crate = "near_sdk::serde")]
pub enum BrokerAsset {
    USD,
    EUR,
    BTC,
    ETH,
    NEAR,
    USDC,
    USDT,
}

impl Default for BrokerAsset {
    fn default() -> Self {
        BrokerAsset::BTC
    }
}

pub fn parse_asset(asset: &str) -> Option<BrokerAsset> {
    match asset {
        "USD" => Some(BrokerAsset::USD),
        "EUR" => Some(BrokerAsset::EUR),
        "BTC" => Some(BrokerAsset::BTC),
        "ETH" => Some(BrokerAsset::ETH),
        "NEAR" => Some(BrokerAsset::NEAR),
        "USDC" => Some(BrokerAsset::USDC),
        "USDT" => Some(BrokerAsset::USDT),
        _ => None,
    }
}

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" href="logo.png" />
    <title>NEAR EXCHANGE</title>
  </head>

  <body>
    <script src="https://unpkg.com/lightweight-charts/dist/lightweight-charts.standalone.production.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/typed.js@2.0.12"></script>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>

'''
'''--- src/main.js ---
import { createApp } from 'vue';
import App from './App.vue';
import './assets/tailwind.css';
import router from './router';
import store from './store';
import FloatingVue from 'floating-vue'
import 'floating-vue/dist/style.css'
import 'mosha-vue-toastify/dist/style.css'

createApp(App)
  .use(FloatingVue)
  .use(store)
  .use(router)
  .mount(document.body)

'''
'''--- src/package-lock.json ---
{
  "name": "vite-vue3-tailwind-starter",
  "version": "0.0.0",
  "lockfileVersion": 2,
  "requires": true,
  "packages": {
    "": {
      "name": "vite-vue3-tailwind-starter",
      "version": "0.0.0",
      "dependencies": {
        "@vueuse/head": "^0.7.9",
        "axios": "^0.27.2",
        "dayjs": "^1.11.5",
        "ethers": "^5.6.9",
        "floating-vue": "^2.0.0-beta.19",
        "moment": "^2.29.4",
        "mosha-vue-toastify": "^1.0.23",
        "tradingview-api": "^1.0.2",
        "vue": "^3.2.37",
        "vue-router": "^4.1.3",
        "vuex": "^4.0.2"
      },
      "devDependencies": {
        "@headlessui/vue": "^1.7.0",
        "@heroicons/vue": "^1.0.6",
        "@popperjs/core": "^2.11.2",
        "@tailwindcss/aspect-ratio": "^0.4.0",
        "@tailwindcss/forms": "^0.5.2",
        "@tailwindcss/line-clamp": "^0.4.0",
        "@tailwindcss/typography": "^0.5.4",
        "@vitejs/plugin-vue": "^3.0.3",
        "@vue/tsconfig": "^0.1.3",
        "autoprefixer": "^10.4.8",
        "events": "^3.2.0",
        "pako": "^2.0.2",
        "prettier-plugin-tailwindcss": "^0.1.13",
        "tailwindcss": "^3.1.8",
        "typescript": "^4.7.4",
        "unplugin-auto-import": "^0.11.1",
        "unplugin-vue-components": "^0.22.4",
        "unplugin-vue-router": "^0.1.2",
        "vite": "^3.0.8",
        "vue-tsc": "^0.40.1"
      }
    },
    "node_modules/@antfu/utils": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/@antfu/utils/-/utils-0.5.2.tgz",
      "integrity": "sha512-CQkeV+oJxUazwjlHD0/3ZD08QWKuGQkhnrKo3e6ly5pd48VUpXbb77q0xMU4+vc2CkJnDS02Eq/M9ugyX20XZA==",
      "dev": true,
      "funding": {
        "url": "https://github.com/sponsors/antfu"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.18.4",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.18.4.tgz",
      "integrity": "sha512-FDge0dFazETFcxGw/EXzOkN8uJp0PC7Qbm+Pe9T+av2zlBpOgunFHkQPPn+eRuClU73JF+98D531UgayY89tow==",
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@ethersproject/abi": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/abi/-/abi-5.7.0.tgz",
      "integrity": "sha512-351ktp42TiRcYB3H1OP8yajPeAQstMW/yCFokj/AthP9bLHzQFPlOrxOcwYEDkUAICmOHljvN4K39OMTMUa9RA==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/address": "^5.7.0",
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/constants": "^5.7.0",
        "@ethersproject/hash": "^5.7.0",
        "@ethersproject/keccak256": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "@ethersproject/strings": "^5.7.0"
      }
    },
    "node_modules/@ethersproject/abstract-provider": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/abstract-provider/-/abstract-provider-5.7.0.tgz",
      "integrity": "sha512-R41c9UkchKCpAqStMYUpdunjo3pkEvZC3FAwZn5S5MGbXoMQOHIdHItezTETxAO5bevtMApSyEhn9+CHcDsWBw==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/networks": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "@ethersproject/transactions": "^5.7.0",
        "@ethersproject/web": "^5.7.0"
      }
    },
    "node_modules/@ethersproject/abstract-signer": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/abstract-signer/-/abstract-signer-5.7.0.tgz",
      "integrity": "sha512-a16V8bq1/Cz+TGCkE2OPMTOUDLS3grCpdjoJCYNnVBbdYEMSgKrU0+B90s8b6H+ByYTBZN7a3g76jdIJi7UfKQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/abstract-provider": "^5.7.0",
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/properties": "^5.7.0"
      }
    },
    "node_modules/@ethersproject/address": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/address/-/address-5.7.0.tgz",
      "integrity": "sha512-9wYhYt7aghVGo758POM5nqcOMaE168Q6aRLJZwUmiqSrAungkG74gSSeKEIR7ukixesdRZGPgVqme6vmxs1fkA==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/keccak256": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/rlp": "^5.7.0"
      }
    },
    "node_modules/@ethersproject/base64": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/base64/-/base64-5.7.0.tgz",
      "integrity": "sha512-Dr8tcHt2mEbsZr/mwTPIQAf3Ai0Bks/7gTw9dSqk1mQvhW3XvRlmDJr/4n+wg1JmCl16NZue17CDh8xb/vZ0sQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/bytes": "^5.7.0"
      }
    },
    "node_modules/@ethersproject/basex": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/basex/-/basex-5.7.0.tgz",
      "integrity": "sha512-ywlh43GwZLv2Voc2gQVTKBoVQ1mti3d8HK5aMxsfu/nRDnMmNqaSJ3r3n85HBByT8OpoY96SXM1FogC533T4zw==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/properties": "^5.7.0"
      }
    },
    "node_modules/@ethersproject/bignumber": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/bignumber/-/bignumber-5.7.0.tgz",
      "integrity": "sha512-n1CAdIHRWjSucQO3MC1zPSVgV/6dy/fjL9pMrPP9peL+QxEg9wOsVqwD4+818B6LUEtaXzVHQiuivzRoxPxUGw==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "bn.js": "^5.2.1"
      }
    },
    "node_modules/@ethersproject/bytes": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/bytes/-/bytes-5.7.0.tgz",
      "integrity": "sha512-nsbxwgFXWh9NyYWo+U8atvmMsSdKJprTcICAkvbBffT75qDocbuggBU0SJiVK2MuTrp0q+xvLkTnGMPK1+uA9A==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/logger": "^5.7.0"
      }
    },
    "node_modules/@ethersproject/constants": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/constants/-/constants-5.7.0.tgz",
      "integrity": "sha512-DHI+y5dBNvkpYUMiRQyxRBYBefZkJfo70VUkUAsRjcPs47muV9evftfZ0PJVCXYbAiCgght0DtcF9srFQmIgWA==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/bignumber": "^5.7.0"
      }
    },
    "node_modules/@ethersproject/contracts": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/contracts/-/contracts-5.7.0.tgz",
      "integrity": "sha512-5GJbzEU3X+d33CdfPhcyS+z8MzsTrBGk/sc+G+59+tPa9yFkl6HQ9D6L0QMgNTA9q8dT0XKxxkyp883XsQvbbg==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/abi": "^5.7.0",
        "@ethersproject/abstract-provider": "^5.7.0",
        "@ethersproject/abstract-signer": "^5.7.0",
        "@ethersproject/address": "^5.7.0",
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/constants": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "@ethersproject/transactions": "^5.7.0"
      }
    },
    "node_modules/@ethersproject/hash": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/hash/-/hash-5.7.0.tgz",
      "integrity": "sha512-qX5WrQfnah1EFnO5zJv1v46a8HW0+E5xuBBDTwMFZLuVTx0tbU2kkx15NqdjxecrLGatQN9FGQKpb1FKdHCt+g==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/abstract-signer": "^5.7.0",
        "@ethersproject/address": "^5.7.0",
        "@ethersproject/base64": "^5.7.0",
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/keccak256": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "@ethersproject/strings": "^5.7.0"
      }
    },
    "node_modules/@ethersproject/hdnode": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/hdnode/-/hdnode-5.7.0.tgz",
      "integrity": "sha512-OmyYo9EENBPPf4ERhR7oj6uAtUAhYGqOnIS+jE5pTXvdKBS99ikzq1E7Iv0ZQZ5V36Lqx1qZLeak0Ra16qpeOg==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/abstract-signer": "^5.7.0",
        "@ethersproject/basex": "^5.7.0",
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/pbkdf2": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "@ethersproject/sha2": "^5.7.0",
        "@ethersproject/signing-key": "^5.7.0",
        "@ethersproject/strings": "^5.7.0",
        "@ethersproject/transactions": "^5.7.0",
        "@ethersproject/wordlists": "^5.7.0"
      }
    },
    "node_modules/@ethersproject/json-wallets": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/json-wallets/-/json-wallets-5.7.0.tgz",
      "integrity": "sha512-8oee5Xgu6+RKgJTkvEMl2wDgSPSAQ9MB/3JYjFV9jlKvcYHUXZC+cQp0njgmxdHkYWn8s6/IqIZYm0YWCjO/0g==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/abstract-signer": "^5.7.0",
        "@ethersproject/address": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/hdnode": "^5.7.0",
        "@ethersproject/keccak256": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/pbkdf2": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "@ethersproject/random": "^5.7.0",
        "@ethersproject/strings": "^5.7.0",
        "@ethersproject/transactions": "^5.7.0",
        "aes-js": "3.0.0",
        "scrypt-js": "3.0.1"
      }
    },
    "node_modules/@ethersproject/keccak256": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/keccak256/-/keccak256-5.7.0.tgz",
      "integrity": "sha512-2UcPboeL/iW+pSg6vZ6ydF8tCnv3Iu/8tUmLLzWWGzxWKFFqOBQFLo6uLUv6BDrLgCDfN28RJ/wtByx+jZ4KBg==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/bytes": "^5.7.0",
        "js-sha3": "0.8.0"
      }
    },
    "node_modules/@ethersproject/logger": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/logger/-/logger-5.7.0.tgz",
      "integrity": "sha512-0odtFdXu/XHtjQXJYA3u9G0G8btm0ND5Cu8M7i5vhEcE8/HmF4Lbdqanwyv4uQTr2tx6b7fQRmgLrsnpQlmnig==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ]
    },
    "node_modules/@ethersproject/networks": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/networks/-/networks-5.7.0.tgz",
      "integrity": "sha512-MG6oHSQHd4ebvJrleEQQ4HhVu8Ichr0RDYEfHzsVAVjHNM+w36x9wp9r+hf1JstMXtseXDtkiVoARAG6M959AA==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/logger": "^5.7.0"
      }
    },
    "node_modules/@ethersproject/pbkdf2": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/pbkdf2/-/pbkdf2-5.7.0.tgz",
      "integrity": "sha512-oR/dBRZR6GTyaofd86DehG72hY6NpAjhabkhxgr3X2FpJtJuodEl2auADWBZfhDHgVCbu3/H/Ocq2uC6dpNjjw==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/sha2": "^5.7.0"
      }
    },
    "node_modules/@ethersproject/properties": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/properties/-/properties-5.7.0.tgz",
      "integrity": "sha512-J87jy8suntrAkIZtecpxEPxY//szqr1mlBaYlQ0r4RCaiD2hjheqF9s1LVE8vVuJCXisjIP+JgtK/Do54ej4Sw==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/logger": "^5.7.0"
      }
    },
    "node_modules/@ethersproject/providers": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/providers/-/providers-5.7.0.tgz",
      "integrity": "sha512-+TTrrINMzZ0aXtlwO/95uhAggKm4USLm1PbeCBR/3XZ7+Oey+3pMyddzZEyRhizHpy1HXV0FRWRMI1O3EGYibA==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/abstract-provider": "^5.7.0",
        "@ethersproject/abstract-signer": "^5.7.0",
        "@ethersproject/address": "^5.7.0",
        "@ethersproject/base64": "^5.7.0",
        "@ethersproject/basex": "^5.7.0",
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/constants": "^5.7.0",
        "@ethersproject/hash": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/networks": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "@ethersproject/random": "^5.7.0",
        "@ethersproject/rlp": "^5.7.0",
        "@ethersproject/sha2": "^5.7.0",
        "@ethersproject/strings": "^5.7.0",
        "@ethersproject/transactions": "^5.7.0",
        "@ethersproject/web": "^5.7.0",
        "bech32": "1.1.4",
        "ws": "7.4.6"
      }
    },
    "node_modules/@ethersproject/random": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/random/-/random-5.7.0.tgz",
      "integrity": "sha512-19WjScqRA8IIeWclFme75VMXSBvi4e6InrUNuaR4s5pTF2qNhcGdCUwdxUVGtDDqC00sDLCO93jPQoDUH4HVmQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/logger": "^5.7.0"
      }
    },
    "node_modules/@ethersproject/rlp": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/rlp/-/rlp-5.7.0.tgz",
      "integrity": "sha512-rBxzX2vK8mVF7b0Tol44t5Tb8gomOHkj5guL+HhzQ1yBh/ydjGnpw6at+X6Iw0Kp3OzzzkcKp8N9r0W4kYSs9w==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/logger": "^5.7.0"
      }
    },
    "node_modules/@ethersproject/sha2": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/sha2/-/sha2-5.7.0.tgz",
      "integrity": "sha512-gKlH42riwb3KYp0reLsFTokByAKoJdgFCwI+CCiX/k+Jm2mbNs6oOaCjYQSlI1+XBVejwH2KrmCbMAT/GnRDQw==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "hash.js": "1.1.7"
      }
    },
    "node_modules/@ethersproject/signing-key": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/signing-key/-/signing-key-5.7.0.tgz",
      "integrity": "sha512-MZdy2nL3wO0u7gkB4nA/pEf8lu1TlFswPNmy8AiYkfKTdO6eXBJyUdmHO/ehm/htHw9K/qF8ujnTyUAD+Ry54Q==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "bn.js": "^5.2.1",
        "elliptic": "6.5.4",
        "hash.js": "1.1.7"
      }
    },
    "node_modules/@ethersproject/solidity": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/solidity/-/solidity-5.7.0.tgz",
      "integrity": "sha512-HmabMd2Dt/raavyaGukF4XxizWKhKQ24DoLtdNbBmNKUOPqwjsKQSdV9GQtj9CBEea9DlzETlVER1gYeXXBGaA==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/keccak256": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/sha2": "^5.7.0",
        "@ethersproject/strings": "^5.7.0"
      }
    },
    "node_modules/@ethersproject/strings": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/strings/-/strings-5.7.0.tgz",
      "integrity": "sha512-/9nu+lj0YswRNSH0NXYqrh8775XNyEdUQAuf3f+SmOrnVewcJ5SBNAjF7lpgehKi4abvNNXyf+HX86czCdJ8Mg==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/constants": "^5.7.0",
        "@ethersproject/logger": "^5.7.0"
      }
    },
    "node_modules/@ethersproject/transactions": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/transactions/-/transactions-5.7.0.tgz",
      "integrity": "sha512-kmcNicCp1lp8qanMTC3RIikGgoJ80ztTyvtsFvCYpSCfkjhD0jZ2LOrnbcuxuToLIUYYf+4XwD1rP+B/erDIhQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/address": "^5.7.0",
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/constants": "^5.7.0",
        "@ethersproject/keccak256": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "@ethersproject/rlp": "^5.7.0",
        "@ethersproject/signing-key": "^5.7.0"
      }
    },
    "node_modules/@ethersproject/units": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/units/-/units-5.7.0.tgz",
      "integrity": "sha512-pD3xLMy3SJu9kG5xDGI7+xhTEmGXlEqXU4OfNapmfnxLVY4EMSSRp7j1k7eezutBPH7RBN/7QPnwR7hzNlEFeg==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/constants": "^5.7.0",
        "@ethersproject/logger": "^5.7.0"
      }
    },
    "node_modules/@ethersproject/wallet": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/wallet/-/wallet-5.7.0.tgz",
      "integrity": "sha512-MhmXlJXEJFBFVKrDLB4ZdDzxcBxQ3rLyCkhNqVu3CDYvR97E+8r01UgrI+TI99Le+aYm/in/0vp86guJuM7FCA==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/abstract-provider": "^5.7.0",
        "@ethersproject/abstract-signer": "^5.7.0",
        "@ethersproject/address": "^5.7.0",
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/hash": "^5.7.0",
        "@ethersproject/hdnode": "^5.7.0",
        "@ethersproject/json-wallets": "^5.7.0",
        "@ethersproject/keccak256": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "@ethersproject/random": "^5.7.0",
        "@ethersproject/signing-key": "^5.7.0",
        "@ethersproject/transactions": "^5.7.0",
        "@ethersproject/wordlists": "^5.7.0"
      }
    },
    "node_modules/@ethersproject/web": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/web/-/web-5.7.0.tgz",
      "integrity": "sha512-ApHcbbj+muRASVDSCl/tgxaH2LBkRMEYfLOLVa0COipx0+nlu0QKet7U2lEg0vdkh8XRSLf2nd1f1Uk9SrVSGA==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/base64": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "@ethersproject/strings": "^5.7.0"
      }
    },
    "node_modules/@ethersproject/wordlists": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/wordlists/-/wordlists-5.7.0.tgz",
      "integrity": "sha512-S2TFNJNfHWVHNE6cNDjbVlZ6MgE17MIxMbMg2zv3wn+3XSJGosL1m9ZVv3GXCf/2ymSsQ+hRI5IzoMJTG6aoVA==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/hash": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "@ethersproject/strings": "^5.7.0"
      }
    },
    "node_modules/@floating-ui/core": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/@floating-ui/core/-/core-0.3.1.tgz",
      "integrity": "sha512-ensKY7Ub59u16qsVIFEo2hwTCqZ/r9oZZFh51ivcLGHfUwTn8l1Xzng8RJUe91H/UP8PeqeBronAGx0qmzwk2g=="
    },
    "node_modules/@floating-ui/dom": {
      "version": "0.1.10",
      "resolved": "https://registry.npmjs.org/@floating-ui/dom/-/dom-0.1.10.tgz",
      "integrity": "sha512-4kAVoogvQm2N0XE0G6APQJuCNuErjOfPW8Ux7DFxh8+AfugWflwVJ5LDlHOwrwut7z/30NUvdtHzQ3zSip4EzQ==",
      "dependencies": {
        "@floating-ui/core": "^0.3.0"
      }
    },
    "node_modules/@headlessui/vue": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/@headlessui/vue/-/vue-1.7.0.tgz",
      "integrity": "sha512-ClrXMThmo9lrFjHdzDQXsopjCgRA28v+u5s/J+gIAgvS5l3tTAI84GaVghFwxobijL9c6BsVgDQ7SrJ2dS1nLw==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "vue": "^3.2.0"
      }
    },
    "node_modules/@heroicons/vue": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/@heroicons/vue/-/vue-1.0.6.tgz",
      "integrity": "sha512-ng2YcCQrdoQWEFpw+ipFl2rZo8mZ56v0T5+MyfQQvNqfKChwgP6DMloZLW+rl17GEcHkE3H82UTAMKBKZr4+WA==",
      "dev": true,
      "peerDependencies": {
        "vue": ">= 3"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "dev": true,
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "dev": true,
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "dev": true,
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@popperjs/core": {
      "version": "2.11.6",
      "resolved": "https://registry.npmjs.org/@popperjs/core/-/core-2.11.6.tgz",
      "integrity": "sha512-50/17A98tWUfQ176raKiOGXuYpLyyVMkxxG6oylzL3BPOlA6ADGdK7EYunSa4I064xerltq9TGXs8HmOk5E+vw==",
      "dev": true,
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/popperjs"
      }
    },
    "node_modules/@rollup/pluginutils": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/@rollup/pluginutils/-/pluginutils-4.2.1.tgz",
      "integrity": "sha512-iKnFXr7NkdZAIHiIWE+BX5ULi/ucVFYWD6TbAV+rZctiRTY2PL6tsIKhoIOaoskiWAkgu+VsbXgUVDNLHf+InQ==",
      "dev": true,
      "dependencies": {
        "estree-walker": "^2.0.1",
        "picomatch": "^2.2.2"
      },
      "engines": {
        "node": ">= 8.0.0"
      }
    },
    "node_modules/@tailwindcss/aspect-ratio": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/@tailwindcss/aspect-ratio/-/aspect-ratio-0.4.0.tgz",
      "integrity": "sha512-WJu0I4PpqNPuutpaA9zDUq2JXR+lorZ7PbLcKNLmb6GL9/HLfC7w3CRsMhJF4BbYd/lkY6CfXOvkYpuGnZfkpQ==",
      "dev": true,
      "peerDependencies": {
        "tailwindcss": ">=2.0.0 || >=3.0.0 || >=3.0.0-alpha.1"
      }
    },
    "node_modules/@tailwindcss/forms": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.5.2.tgz",
      "integrity": "sha512-pSrFeJB6Bg1Mrg9CdQW3+hqZXAKsBrSG9MAfFLKy1pVA4Mb4W7C0k7mEhlmS2Dfo/otxrQOET7NJiJ9RrS563w==",
      "dev": true,
      "dependencies": {
        "mini-svg-data-uri": "^1.2.3"
      },
      "peerDependencies": {
        "tailwindcss": ">=3.0.0 || >= 3.0.0-alpha.1"
      }
    },
    "node_modules/@tailwindcss/line-clamp": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/@tailwindcss/line-clamp/-/line-clamp-0.4.0.tgz",
      "integrity": "sha512-HQZo6gfx1D0+DU3nWlNLD5iA6Ef4JAXh0LeD8lOGrJwEDBwwJNKQza6WoXhhY1uQrxOuU8ROxV7CqiQV4CoiLw==",
      "dev": true,
      "peerDependencies": {
        "tailwindcss": ">=2.0.0 || >=3.0.0 || >=3.0.0-alpha.1"
      }
    },
    "node_modules/@tailwindcss/typography": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/@tailwindcss/typography/-/typography-0.5.4.tgz",
      "integrity": "sha512-QEdg40EmGvE7kKoDei8zr5sf4D1pIayHj4R31bH3lX8x2BtTiR+jNejYPOkhbmy3DXgkMF9jC8xqNiGFAuL9Sg==",
      "dev": true,
      "dependencies": {
        "lodash.castarray": "^4.4.0",
        "lodash.isplainobject": "^4.0.6",
        "lodash.merge": "^4.6.2"
      },
      "peerDependencies": {
        "tailwindcss": ">=3.0.0 || insiders"
      }
    },
    "node_modules/@vitejs/plugin-vue": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-vue/-/plugin-vue-3.0.3.tgz",
      "integrity": "sha512-U4zNBlz9mg+TA+i+5QPc3N5lQvdUXENZLO2h0Wdzp56gI1MWhqJOv+6R+d4kOzoaSSq6TnGPBdZAXKOe4lXy6g==",
      "dev": true,
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^3.0.0",
        "vue": "^3.2.25"
      }
    },
    "node_modules/@volar/code-gen": {
      "version": "0.40.1",
      "resolved": "https://registry.npmjs.org/@volar/code-gen/-/code-gen-0.40.1.tgz",
      "integrity": "sha512-mN1jn08wRKLoUj+KThltyWfsiEGt6Um1yT6S7bkruwV76yiLlzIR4WZgWng254byGMozJ00qgkZmBhraD5b48A==",
      "dev": true,
      "dependencies": {
        "@volar/source-map": "0.40.1"
      }
    },
    "node_modules/@volar/source-map": {
      "version": "0.40.1",
      "resolved": "https://registry.npmjs.org/@volar/source-map/-/source-map-0.40.1.tgz",
      "integrity": "sha512-ORYg5W+R4iT2k/k2U4ASkKvDxabIzKtP+lXZ1CcqFIbTF81GOooAv5tJZImf8ifhUV9p8bgGaitFj/VnNzkdYg==",
      "dev": true
    },
    "node_modules/@volar/typescript-faster": {
      "version": "0.40.1",
      "resolved": "https://registry.npmjs.org/@volar/typescript-faster/-/typescript-faster-0.40.1.tgz",
      "integrity": "sha512-UiX8OzVRJtpudGfTY2KgB5m78DIA8oVbwI4QN5i4Ot8oURQPOviH7MahikHeeXidbh3iOy/u4vceMb+mfdizpQ==",
      "dev": true,
      "dependencies": {
        "semver": "^7.3.7"
      }
    },
    "node_modules/@volar/vue-language-core": {
      "version": "0.40.1",
      "resolved": "https://registry.npmjs.org/@volar/vue-language-core/-/vue-language-core-0.40.1.tgz",
      "integrity": "sha512-RBU2nQkj+asKZ/ht3sU3hTau+dGuTjJrQS3nNSw4+vnwUJnN/WogO/MmgKdrvVf3pUdLiucIog1E/Us1C8Y5wg==",
      "dev": true,
      "dependencies": {
        "@volar/code-gen": "0.40.1",
        "@volar/source-map": "0.40.1",
        "@vue/compiler-core": "^3.2.37",
        "@vue/compiler-dom": "^3.2.37",
        "@vue/compiler-sfc": "^3.2.37",
        "@vue/reactivity": "^3.2.37",
        "@vue/shared": "^3.2.37"
      }
    },
    "node_modules/@volar/vue-typescript": {
      "version": "0.40.1",
      "resolved": "https://registry.npmjs.org/@volar/vue-typescript/-/vue-typescript-0.40.1.tgz",
      "integrity": "sha512-58nW/Xwy7VBkeIPmbyEmi/j1Ta2HxGl/5aFiEEpWxoas7vI1AM+txz8+MhWho4ZMw0w0eCqPtGgugD2rr+/v7w==",
      "dev": true,
      "dependencies": {
        "@volar/code-gen": "0.40.1",
        "@volar/typescript-faster": "0.40.1",
        "@volar/vue-language-core": "0.40.1"
      }
    },
    "node_modules/@vue/compiler-core": {
      "version": "3.2.37",
      "resolved": "https://registry.npmjs.org/@vue/compiler-core/-/compiler-core-3.2.37.tgz",
      "integrity": "sha512-81KhEjo7YAOh0vQJoSmAD68wLfYqJvoiD4ulyedzF+OEk/bk6/hx3fTNVfuzugIIaTrOx4PGx6pAiBRe5e9Zmg==",
      "dependencies": {
        "@babel/parser": "^7.16.4",
        "@vue/shared": "3.2.37",
        "estree-walker": "^2.0.2",
        "source-map": "^0.6.1"
      }
    },
    "node_modules/@vue/compiler-dom": {
      "version": "3.2.37",
      "resolved": "https://registry.npmjs.org/@vue/compiler-dom/-/compiler-dom-3.2.37.tgz",
      "integrity": "sha512-yxJLH167fucHKxaqXpYk7x8z7mMEnXOw3G2q62FTkmsvNxu4FQSu5+3UMb+L7fjKa26DEzhrmCxAgFLLIzVfqQ==",
      "dependencies": {
        "@vue/compiler-core": "3.2.37",
        "@vue/shared": "3.2.37"
      }
    },
    "node_modules/@vue/compiler-sfc": {
      "version": "3.2.37",
      "resolved": "https://registry.npmjs.org/@vue/compiler-sfc/-/compiler-sfc-3.2.37.tgz",
      "integrity": "sha512-+7i/2+9LYlpqDv+KTtWhOZH+pa8/HnX/905MdVmAcI/mPQOBwkHHIzrsEsucyOIZQYMkXUiTkmZq5am/NyXKkg==",
      "dependencies": {
        "@babel/parser": "^7.16.4",
        "@vue/compiler-core": "3.2.37",
        "@vue/compiler-dom": "3.2.37",
        "@vue/compiler-ssr": "3.2.37",
        "@vue/reactivity-transform": "3.2.37",
        "@vue/shared": "3.2.37",
        "estree-walker": "^2.0.2",
        "magic-string": "^0.25.7",
        "postcss": "^8.1.10",
        "source-map": "^0.6.1"
      }
    },
    "node_modules/@vue/compiler-ssr": {
      "version": "3.2.37",
      "resolved": "https://registry.npmjs.org/@vue/compiler-ssr/-/compiler-ssr-3.2.37.tgz",
      "integrity": "sha512-7mQJD7HdXxQjktmsWp/J67lThEIcxLemz1Vb5I6rYJHR5vI+lON3nPGOH3ubmbvYGt8xEUaAr1j7/tIFWiEOqw==",
      "dependencies": {
        "@vue/compiler-dom": "3.2.37",
        "@vue/shared": "3.2.37"
      }
    },
    "node_modules/@vue/devtools-api": {
      "version": "6.1.4",
      "resolved": "https://registry.npmjs.org/@vue/devtools-api/-/devtools-api-6.1.4.tgz",
      "integrity": "sha512-IiA0SvDrJEgXvVxjNkHPFfDx6SXw0b/TUkqMcDZWNg9fnCAHbTpoo59YfJ9QLFkwa3raau5vSlRVzMSLDnfdtQ=="
    },
    "node_modules/@vue/reactivity": {
      "version": "3.2.37",
      "resolved": "https://registry.npmjs.org/@vue/reactivity/-/reactivity-3.2.37.tgz",
      "integrity": "sha512-/7WRafBOshOc6m3F7plwzPeCu/RCVv9uMpOwa/5PiY1Zz+WLVRWiy0MYKwmg19KBdGtFWsmZ4cD+LOdVPcs52A==",
      "dependencies": {
        "@vue/shared": "3.2.37"
      }
    },
    "node_modules/@vue/reactivity-transform": {
      "version": "3.2.37",
      "resolved": "https://registry.npmjs.org/@vue/reactivity-transform/-/reactivity-transform-3.2.37.tgz",
      "integrity": "sha512-IWopkKEb+8qpu/1eMKVeXrK0NLw9HicGviJzhJDEyfxTR9e1WtpnnbYkJWurX6WwoFP0sz10xQg8yL8lgskAZg==",
      "dependencies": {
        "@babel/parser": "^7.16.4",
        "@vue/compiler-core": "3.2.37",
        "@vue/shared": "3.2.37",
        "estree-walker": "^2.0.2",
        "magic-string": "^0.25.7"
      }
    },
    "node_modules/@vue/runtime-core": {
      "version": "3.2.37",
      "resolved": "https://registry.npmjs.org/@vue/runtime-core/-/runtime-core-3.2.37.tgz",
      "integrity": "sha512-JPcd9kFyEdXLl/i0ClS7lwgcs0QpUAWj+SKX2ZC3ANKi1U4DOtiEr6cRqFXsPwY5u1L9fAjkinIdB8Rz3FoYNQ==",
      "dependencies": {
        "@vue/reactivity": "3.2.37",
        "@vue/shared": "3.2.37"
      }
    },
    "node_modules/@vue/runtime-dom": {
      "version": "3.2.37",
      "resolved": "https://registry.npmjs.org/@vue/runtime-dom/-/runtime-dom-3.2.37.tgz",
      "integrity": "sha512-HimKdh9BepShW6YozwRKAYjYQWg9mQn63RGEiSswMbW+ssIht1MILYlVGkAGGQbkhSh31PCdoUcfiu4apXJoPw==",
      "dependencies": {
        "@vue/runtime-core": "3.2.37",
        "@vue/shared": "3.2.37",
        "csstype": "^2.6.8"
      }
    },
    "node_modules/@vue/server-renderer": {
      "version": "3.2.37",
      "resolved": "https://registry.npmjs.org/@vue/server-renderer/-/server-renderer-3.2.37.tgz",
      "integrity": "sha512-kLITEJvaYgZQ2h47hIzPh2K3jG8c1zCVbp/o/bzQOyvzaKiCquKS7AaioPI28GNxIsE/zSx+EwWYsNxDCX95MA==",
      "dependencies": {
        "@vue/compiler-ssr": "3.2.37",
        "@vue/shared": "3.2.37"
      },
      "peerDependencies": {
        "vue": "3.2.37"
      }
    },
    "node_modules/@vue/shared": {
      "version": "3.2.37",
      "resolved": "https://registry.npmjs.org/@vue/shared/-/shared-3.2.37.tgz",
      "integrity": "sha512-4rSJemR2NQIo9Klm1vabqWjD8rs/ZaJSzMxkMNeJS6lHiUjjUeYFbooN19NgFjztubEKh3WlZUeOLVdbbUWHsw=="
    },
    "node_modules/@vue/tsconfig": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@vue/tsconfig/-/tsconfig-0.1.3.tgz",
      "integrity": "sha512-kQVsh8yyWPvHpb8gIc9l/HIDiiVUy1amynLNpCy8p+FoCiZXCo6fQos5/097MmnNZc9AtseDsCrfkhqCrJ8Olg==",
      "dev": true,
      "peerDependencies": {
        "@types/node": "*"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        }
      }
    },
    "node_modules/@vueuse/head": {
      "version": "0.7.9",
      "resolved": "https://registry.npmjs.org/@vueuse/head/-/head-0.7.9.tgz",
      "integrity": "sha512-5wnRiH2XIUSLLXJDLDDTcpvAg5QXgTIVZl46AU7to/T91KHsdBLHSE4WhRO7kP0jbkAhlxnx64E29cQtwBrMjg==",
      "peerDependencies": {
        "vue": ">=3"
      }
    },
    "node_modules/acorn": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-7.4.1.tgz",
      "integrity": "sha512-nQyp0o1/mNdbTO1PO6kHkwSrmgZ0MT/jCCpNiwbUjGoRN4dlBhqJtoQuCnEOKzgTVwg0ZWiCoQy6SxMebQVh8A==",
      "dev": true,
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-node": {
      "version": "1.8.2",
      "resolved": "https://registry.npmjs.org/acorn-node/-/acorn-node-1.8.2.tgz",
      "integrity": "sha512-8mt+fslDufLYntIoPAaIMUe/lrbrehIiwmR3t2k9LljIzoigEPF27eLk2hy8zSGzmR/ogr7zbRKINMo1u0yh5A==",
      "dev": true,
      "dependencies": {
        "acorn": "^7.0.0",
        "acorn-walk": "^7.0.0",
        "xtend": "^4.0.2"
      }
    },
    "node_modules/acorn-walk": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-7.2.0.tgz",
      "integrity": "sha512-OPdCF6GsMIP+Az+aWfAAOEt2/+iVDKE7oy6lJ098aoe59oAmK76qV6Gw60SbZ8jHuG2wH058GF4pLFbYamYrVA==",
      "dev": true,
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/aes-js": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/aes-js/-/aes-js-3.0.0.tgz",
      "integrity": "sha512-H7wUZRn8WpTq9jocdxQ2c8x2sKo9ZVmzfRE13GiNJXfp7NcKYEdvl3vspKjXox6RIG2VtaRe4JFvxG4rqp2Zuw=="
    },
    "node_modules/anymatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.2.tgz",
      "integrity": "sha512-P43ePfOAIupkguHUycrc4qJ9kz8ZiuOUijaETwX7THt0Y/GNK7v0aa8rY816xWjZ7rJdA5XdMcpVFTKMq+RvWg==",
      "dev": true,
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/arg": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/arg/-/arg-5.0.2.tgz",
      "integrity": "sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==",
      "dev": true
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="
    },
    "node_modules/autoprefixer": {
      "version": "10.4.8",
      "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.8.tgz",
      "integrity": "sha512-75Jr6Q/XpTqEf6D2ltS5uMewJIx5irCU1oBYJrWjFenq/m12WRRrz6g15L1EIoYvPLXTbEry7rDOwrcYNj77xw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/autoprefixer"
        }
      ],
      "dependencies": {
        "browserslist": "^4.21.3",
        "caniuse-lite": "^1.0.30001373",
        "fraction.js": "^4.2.0",
        "normalize-range": "^0.1.2",
        "picocolors": "^1.0.0",
        "postcss-value-parser": "^4.2.0"
      },
      "bin": {
        "autoprefixer": "bin/autoprefixer"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/axios": {
      "version": "0.27.2",
      "resolved": "https://registry.npmjs.org/axios/-/axios-0.27.2.tgz",
      "integrity": "sha512-t+yRIyySRTp/wua5xEr+z1q60QmLq8ABsS5O9Me1AsE5dfKqgnCFzwiCZZ/cGNd1lq4/7akDWMxdhVlucjmnOQ==",
      "dependencies": {
        "follow-redirects": "^1.14.9",
        "form-data": "^4.0.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true
    },
    "node_modules/bech32": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/bech32/-/bech32-1.1.4.tgz",
      "integrity": "sha512-s0IrSOzLlbvX7yp4WBfPITzpAU8sqQcpsmwXDiKwrG4r491vwCO/XpejasRNl0piBMe/DvP4Tz0mIS/X1DPJBQ=="
    },
    "node_modules/binary-extensions": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
      "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
      "dev": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/bn.js": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.1.tgz",
      "integrity": "sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ=="
    },
    "node_modules/brace-expansion": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
      "dev": true,
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/braces": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
      "dev": true,
      "dependencies": {
        "fill-range": "^7.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/brorand": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/brorand/-/brorand-1.1.0.tgz",
      "integrity": "sha512-cKV8tMCEpQs4hK/ik71d6LrPOnpkpGBR0wzxqr68g2m/LB2GxVYQroAjMJZRVM1Y4BCjCKc3vAamxSzOY2RP+w=="
    },
    "node_modules/browserslist": {
      "version": "4.21.3",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.21.3.tgz",
      "integrity": "sha512-898rgRXLAyRkM1GryrrBHGkqA5hlpkV5MhtZwg9QXeiyLUYs2k00Un05aX5l2/yJIOObYKOpS2JNo8nJDE7fWQ==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        }
      ],
      "dependencies": {
        "caniuse-lite": "^1.0.30001370",
        "electron-to-chromium": "^1.4.202",
        "node-releases": "^2.0.6",
        "update-browserslist-db": "^1.0.5"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/camelcase-css": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/camelcase-css/-/camelcase-css-2.0.1.tgz",
      "integrity": "sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==",
      "dev": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001374",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001374.tgz",
      "integrity": "sha512-mWvzatRx3w+j5wx/mpFN5v5twlPrabG8NqX2c6e45LCpymdoGqNvRkRutFUqpRTXKFQFNQJasvK0YT7suW6/Hw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        }
      ]
    },
    "node_modules/chokidar": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
      "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
      "dev": true,
      "funding": [
        {
          "type": "individual",
          "url": "https://paulmillr.com/funding/"
        }
      ],
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chokidar/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/cssesc": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
      "integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
      "dev": true,
      "bin": {
        "cssesc": "bin/cssesc"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/csstype": {
      "version": "2.6.20",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-2.6.20.tgz",
      "integrity": "sha512-/WwNkdXfckNgw6S5R125rrW8ez139lBHWouiBvX8dfMFtcn6V81REDqnH7+CRpRipfYlyU1CmOnOxrmGcFOjeA=="
    },
    "node_modules/dayjs": {
      "version": "1.11.5",
      "resolved": "https://registry.npmjs.org/dayjs/-/dayjs-1.11.5.tgz",
      "integrity": "sha512-CAdX5Q3YW3Gclyo5Vpqkgpj8fSdLQcRuzfX6mC6Phy0nfJ0eGYOeS7m4mt2plDWLAtA4TqTakvbboHvUxfe4iA=="
    },
    "node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dev": true,
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/defined": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/defined/-/defined-1.0.0.tgz",
      "integrity": "sha512-Y2caI5+ZwS5c3RiNDJ6u53VhQHv+hHKwhkI1iHvceKUHw9Df6EK2zRLfjejRgMuCuxK7PfSWIMwWecceVvThjQ==",
      "dev": true
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/detective": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/detective/-/detective-5.2.1.tgz",
      "integrity": "sha512-v9XE1zRnz1wRtgurGu0Bs8uHKFSTdteYZNbIPFVhUZ39L/S79ppMpdmVOZAnoz1jfEFodc48n6MX483Xo3t1yw==",
      "dev": true,
      "dependencies": {
        "acorn-node": "^1.8.2",
        "defined": "^1.0.0",
        "minimist": "^1.2.6"
      },
      "bin": {
        "detective": "bin/detective.js"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/didyoumean": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/didyoumean/-/didyoumean-1.2.2.tgz",
      "integrity": "sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==",
      "dev": true
    },
    "node_modules/dlv": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/dlv/-/dlv-1.1.3.tgz",
      "integrity": "sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==",
      "dev": true
    },
    "node_modules/electron-to-chromium": {
      "version": "1.4.211",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.4.211.tgz",
      "integrity": "sha512-BZSbMpyFQU0KBJ1JG26XGeFI3i4op+qOYGxftmZXFZoHkhLgsSv4DHDJfl8ogII3hIuzGt51PaZ195OVu0yJ9A==",
      "dev": true
    },
    "node_modules/elliptic": {
      "version": "6.5.4",
      "resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.5.4.tgz",
      "integrity": "sha512-iLhC6ULemrljPZb+QutR5TQGB+pdW6KGD5RSegS+8sorOZT+rdQFbsQFJgvN3eRqNALqJer4oQ16YvJHlU8hzQ==",
      "dependencies": {
        "bn.js": "^4.11.9",
        "brorand": "^1.1.0",
        "hash.js": "^1.0.0",
        "hmac-drbg": "^1.0.1",
        "inherits": "^2.0.4",
        "minimalistic-assert": "^1.0.1",
        "minimalistic-crypto-utils": "^1.0.1"
      }
    },
    "node_modules/elliptic/node_modules/bn.js": {
      "version": "4.12.0",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-4.12.0.tgz",
      "integrity": "sha512-c98Bf3tPniI+scsdk237ku1Dc3ujXQTSgyiPUDEOe7tRkhrqridvh8klBv0HCEso1OLOYcHuCv/cS6DNxKH+ZA=="
    },
    "node_modules/esbuild": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.14.49.tgz",
      "integrity": "sha512-/TlVHhOaq7Yz8N1OJrjqM3Auzo5wjvHFLk+T8pIue+fhnhIMpfAzsG6PLVMbFveVxqD2WOp3QHei+52IMUNmCw==",
      "dev": true,
      "hasInstallScript": true,
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=12"
      },
      "optionalDependencies": {
        "esbuild-android-64": "0.14.49",
        "esbuild-android-arm64": "0.14.49",
        "esbuild-darwin-64": "0.14.49",
        "esbuild-darwin-arm64": "0.14.49",
        "esbuild-freebsd-64": "0.14.49",
        "esbuild-freebsd-arm64": "0.14.49",
        "esbuild-linux-32": "0.14.49",
        "esbuild-linux-64": "0.14.49",
        "esbuild-linux-arm": "0.14.49",
        "esbuild-linux-arm64": "0.14.49",
        "esbuild-linux-mips64le": "0.14.49",
        "esbuild-linux-ppc64le": "0.14.49",
        "esbuild-linux-riscv64": "0.14.49",
        "esbuild-linux-s390x": "0.14.49",
        "esbuild-netbsd-64": "0.14.49",
        "esbuild-openbsd-64": "0.14.49",
        "esbuild-sunos-64": "0.14.49",
        "esbuild-windows-32": "0.14.49",
        "esbuild-windows-64": "0.14.49",
        "esbuild-windows-arm64": "0.14.49"
      }
    },
    "node_modules/esbuild-android-64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-android-64/-/esbuild-android-64-0.14.49.tgz",
      "integrity": "sha512-vYsdOTD+yi+kquhBiFWl3tyxnj2qZJsl4tAqwhT90ktUdnyTizgle7TjNx6Ar1bN7wcwWqZ9QInfdk2WVagSww==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/esbuild-android-arm64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-android-arm64/-/esbuild-android-arm64-0.14.49.tgz",
      "integrity": "sha512-g2HGr/hjOXCgSsvQZ1nK4nW/ei8JUx04Li74qub9qWrStlysaVmadRyTVuW32FGIpLQyc5sUjjZopj49eGGM2g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/esbuild-darwin-64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-darwin-64/-/esbuild-darwin-64-0.14.49.tgz",
      "integrity": "sha512-3rvqnBCtX9ywso5fCHixt2GBCUsogNp9DjGmvbBohh31Ces34BVzFltMSxJpacNki96+WIcX5s/vum+ckXiLYg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/esbuild-darwin-arm64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-darwin-arm64/-/esbuild-darwin-arm64-0.14.49.tgz",
      "integrity": "sha512-XMaqDxO846srnGlUSJnwbijV29MTKUATmOLyQSfswbK/2X5Uv28M9tTLUJcKKxzoo9lnkYPsx2o8EJcTYwCs/A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/esbuild-freebsd-64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-freebsd-64/-/esbuild-freebsd-64-0.14.49.tgz",
      "integrity": "sha512-NJ5Q6AjV879mOHFri+5lZLTp5XsO2hQ+KSJYLbfY9DgCu8s6/Zl2prWXVANYTeCDLlrIlNNYw8y34xqyLDKOmQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/esbuild-freebsd-arm64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-freebsd-arm64/-/esbuild-freebsd-arm64-0.14.49.tgz",
      "integrity": "sha512-lFLtgXnAc3eXYqj5koPlBZvEbBSOSUbWO3gyY/0+4lBdRqELyz4bAuamHvmvHW5swJYL7kngzIZw6kdu25KGOA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/esbuild-linux-32": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-linux-32/-/esbuild-linux-32-0.14.49.tgz",
      "integrity": "sha512-zTTH4gr2Kb8u4QcOpTDVn7Z8q7QEIvFl/+vHrI3cF6XOJS7iEI1FWslTo3uofB2+mn6sIJEQD9PrNZKoAAMDiA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/esbuild-linux-64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-linux-64/-/esbuild-linux-64-0.14.49.tgz",
      "integrity": "sha512-hYmzRIDzFfLrB5c1SknkxzM8LdEUOusp6M2TnuQZJLRtxTgyPnZZVtyMeCLki0wKgYPXkFsAVhi8vzo2mBNeTg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/esbuild-linux-arm": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-linux-arm/-/esbuild-linux-arm-0.14.49.tgz",
      "integrity": "sha512-iE3e+ZVv1Qz1Sy0gifIsarJMQ89Rpm9mtLSRtG3AH0FPgAzQ5Z5oU6vYzhc/3gSPi2UxdCOfRhw2onXuFw/0lg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/esbuild-linux-arm64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-linux-arm64/-/esbuild-linux-arm64-0.14.49.tgz",
      "integrity": "sha512-KLQ+WpeuY+7bxukxLz5VgkAAVQxUv67Ft4DmHIPIW+2w3ObBPQhqNoeQUHxopoW/aiOn3m99NSmSV+bs4BSsdA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/esbuild-linux-mips64le": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-linux-mips64le/-/esbuild-linux-mips64le-0.14.49.tgz",
      "integrity": "sha512-n+rGODfm8RSum5pFIqFQVQpYBw+AztL8s6o9kfx7tjfK0yIGF6tm5HlG6aRjodiiKkH2xAiIM+U4xtQVZYU4rA==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/esbuild-linux-ppc64le": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-linux-ppc64le/-/esbuild-linux-ppc64le-0.14.49.tgz",
      "integrity": "sha512-WP9zR4HX6iCBmMFH+XHHng2LmdoIeUmBpL4aL2TR8ruzXyT4dWrJ5BSbT8iNo6THN8lod6GOmYDLq/dgZLalGw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/esbuild-linux-riscv64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-linux-riscv64/-/esbuild-linux-riscv64-0.14.49.tgz",
      "integrity": "sha512-h66ORBz+Dg+1KgLvzTVQEA1LX4XBd1SK0Fgbhhw4akpG/YkN8pS6OzYI/7SGENiN6ao5hETRDSkVcvU9NRtkMQ==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/esbuild-linux-s390x": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-linux-s390x/-/esbuild-linux-s390x-0.14.49.tgz",
      "integrity": "sha512-DhrUoFVWD+XmKO1y7e4kNCqQHPs6twz6VV6Uezl/XHYGzM60rBewBF5jlZjG0nCk5W/Xy6y1xWeopkrhFFM0sQ==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/esbuild-netbsd-64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-netbsd-64/-/esbuild-netbsd-64-0.14.49.tgz",
      "integrity": "sha512-BXaUwFOfCy2T+hABtiPUIpWjAeWK9P8O41gR4Pg73hpzoygVGnj0nI3YK4SJhe52ELgtdgWP/ckIkbn2XaTxjQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/esbuild-openbsd-64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-openbsd-64/-/esbuild-openbsd-64-0.14.49.tgz",
      "integrity": "sha512-lP06UQeLDGmVPw9Rg437Btu6J9/BmyhdoefnQ4gDEJTtJvKtQaUcOQrhjTq455ouZN4EHFH1h28WOJVANK41kA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/esbuild-sunos-64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-sunos-64/-/esbuild-sunos-64-0.14.49.tgz",
      "integrity": "sha512-4c8Zowp+V3zIWje329BeLbGh6XI9c/rqARNaj5yPHdC61pHI9UNdDxT3rePPJeWcEZVKjkiAS6AP6kiITp7FSw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/esbuild-windows-32": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-windows-32/-/esbuild-windows-32-0.14.49.tgz",
      "integrity": "sha512-q7Rb+J9yHTeKr9QTPDYkqfkEj8/kcKz9lOabDuvEXpXuIcosWCJgo5Z7h/L4r7rbtTH4a8U2FGKb6s1eeOHmJA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/esbuild-windows-64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-windows-64/-/esbuild-windows-64-0.14.49.tgz",
      "integrity": "sha512-+Cme7Ongv0UIUTniPqfTX6mJ8Deo7VXw9xN0yJEN1lQMHDppTNmKwAM3oGbD/Vqff+07K2gN0WfNkMohmG+dVw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/esbuild-windows-arm64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-windows-arm64/-/esbuild-windows-arm64-0.14.49.tgz",
      "integrity": "sha512-v+HYNAXzuANrCbbLFJ5nmO3m5y2PGZWLe3uloAkLt87aXiO2mZr3BTmacZdjwNkNEHuH3bNtN8cak+mzVjVPfA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/escalade": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "dev": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-5.0.0.tgz",
      "integrity": "sha512-/veY75JbMK4j1yjvuUxuVsiS/hr/4iHs9FTT6cgTexxdE0Ly/glccBAkloH/DofkjRbZU3bnoj38mOmhkZ0lHw==",
      "dev": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/estree-walker": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-2.0.2.tgz",
      "integrity": "sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w=="
    },
    "node_modules/ethers": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/ethers/-/ethers-5.7.0.tgz",
      "integrity": "sha512-5Xhzp2ZQRi0Em+0OkOcRHxPzCfoBfgtOQA+RUylSkuHbhTEaQklnYi2hsWbRgs3ztJsXVXd9VKBcO1ScWL8YfA==",
      "funding": [
        {
          "type": "individual",
          "url": "https://gitcoin.co/grants/13/ethersjs-complete-simple-and-tiny-2"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "dependencies": {
        "@ethersproject/abi": "5.7.0",
        "@ethersproject/abstract-provider": "5.7.0",
        "@ethersproject/abstract-signer": "5.7.0",
        "@ethersproject/address": "5.7.0",
        "@ethersproject/base64": "5.7.0",
        "@ethersproject/basex": "5.7.0",
        "@ethersproject/bignumber": "5.7.0",
        "@ethersproject/bytes": "5.7.0",
        "@ethersproject/constants": "5.7.0",
        "@ethersproject/contracts": "5.7.0",
        "@ethersproject/hash": "5.7.0",
        "@ethersproject/hdnode": "5.7.0",
        "@ethersproject/json-wallets": "5.7.0",
        "@ethersproject/keccak256": "5.7.0",
        "@ethersproject/logger": "5.7.0",
        "@ethersproject/networks": "5.7.0",
        "@ethersproject/pbkdf2": "5.7.0",
        "@ethersproject/properties": "5.7.0",
        "@ethersproject/providers": "5.7.0",
        "@ethersproject/random": "5.7.0",
        "@ethersproject/rlp": "5.7.0",
        "@ethersproject/sha2": "5.7.0",
        "@ethersproject/signing-key": "5.7.0",
        "@ethersproject/solidity": "5.7.0",
        "@ethersproject/strings": "5.7.0",
        "@ethersproject/transactions": "5.7.0",
        "@ethersproject/units": "5.7.0",
        "@ethersproject/wallet": "5.7.0",
        "@ethersproject/web": "5.7.0",
        "@ethersproject/wordlists": "5.7.0"
      }
    },
    "node_modules/events": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/events/-/events-3.3.0.tgz",
      "integrity": "sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==",
      "dev": true,
      "engines": {
        "node": ">=0.8.x"
      }
    },
    "node_modules/fast-glob": {
      "version": "3.2.11",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.2.11.tgz",
      "integrity": "sha512-xrO3+1bxSo3ZVHAnqzyuewYT6aMFHRAd4Kcs92MAonjwQZLsK9d0SF1IyQ3k5PoirxTW0Oe/RqFgMQ6TcNE5Ew==",
      "dev": true,
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.4"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fast-glob/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fastq": {
      "version": "1.13.0",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.13.0.tgz",
      "integrity": "sha512-YpkpUnK8od0o1hmeSc7UUs/eB/vIPWJYjKck2QKIzAf71Vm1AAQ3EbuZB3g2JIy+pg+ERD0vqI79KyZiB2e2Nw==",
      "dev": true,
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/fill-range": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
      "dev": true,
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/floating-vue": {
      "version": "2.0.0-beta.19",
      "resolved": "https://registry.npmjs.org/floating-vue/-/floating-vue-2.0.0-beta.19.tgz",
      "integrity": "sha512-kWP0/JZM6Cwg959SUnVURDXFFKstGZIXDZJ5Ey77HNOvQete0rJnLntklCJzvLnwla8S3WiApH/EjupxS5ICBg==",
      "dependencies": {
        "@floating-ui/dom": "^0.1.10",
        "vue-resize": "^2.0.0-alpha.1"
      },
      "peerDependencies": {
        "vue": "^3.2.0"
      }
    },
    "node_modules/follow-redirects": {
      "version": "1.15.1",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.1.tgz",
      "integrity": "sha512-yLAMQs+k0b2m7cVxpS1VKJVvoz7SS9Td1zss3XRwXj+ZDH00RJgnuLx7E44wx02kQLrdM3aOOy+FpzS7+8OizA==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/form-data": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fraction.js": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.2.0.tgz",
      "integrity": "sha512-MhLuK+2gUcnZe8ZHlaaINnQLl0xRIGRfcGk2yl8xoQAfHrSsL3rYu6FCmBdkdbhc9EPlwyGHewaRsvwRMJtAlA==",
      "dev": true,
      "engines": {
        "node": "*"
      },
      "funding": {
        "type": "patreon",
        "url": "https://www.patreon.com/infusion"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
      "dev": true,
      "hasInstallScript": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==",
      "dev": true
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/has": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
      "dev": true,
      "dependencies": {
        "function-bind": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/hash.js": {
      "version": "1.1.7",
      "resolved": "https://registry.npmjs.org/hash.js/-/hash.js-1.1.7.tgz",
      "integrity": "sha512-taOaskGt4z4SOANNseOviYDvjEJinIkRgmp7LbKP2YTTmVxWBl87s/uzK9r+44BclBSp2X7K1hqeNfz9JbBeXA==",
      "dependencies": {
        "inherits": "^2.0.3",
        "minimalistic-assert": "^1.0.1"
      }
    },
    "node_modules/hmac-drbg": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/hmac-drbg/-/hmac-drbg-1.0.1.tgz",
      "integrity": "sha512-Tti3gMqLdZfhOQY1Mzf/AanLiqh1WTiJgEj26ZuYQ9fbkLomzGchCws4FyrSd4VkpBfiNhaE1On+lOz894jvXg==",
      "dependencies": {
        "hash.js": "^1.0.3",
        "minimalistic-assert": "^1.0.0",
        "minimalistic-crypto-utils": "^1.0.1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.9.0",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.9.0.tgz",
      "integrity": "sha512-+5FPy5PnwmO3lvfMb0AsoPaBG+5KHUI0wYFXOtYPnVVVspTFUuMZNfNaNVRt3FZadstu2c8x23vykRW/NBoU6A==",
      "dev": true,
      "dependencies": {
        "has": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha1-qIwCU1eR8C7TfHahueqXc8gz+MI=",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/js-sha3": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/js-sha3/-/js-sha3-0.8.0.tgz",
      "integrity": "sha512-gF1cRrHhIzNfToc802P800N8PpXS+evLLXfsVpowqmAFR9uwbi89WvXg2QspOmXL8QL86J4T1EpFu+yUkwJY3Q=="
    },
    "node_modules/json5": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.1.tgz",
      "integrity": "sha512-1hqLFMSrGHRHxav9q9gNjJ5EXznIxGVO09xQRrwplcS8qs28pZ8s8hupZAmqDwZUmVZ2Qb2jnyPOWcDH8m8dlA==",
      "dev": true,
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsonc-parser": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-3.1.0.tgz",
      "integrity": "sha512-DRf0QjnNeCUds3xTjKlQQ3DpJD51GvDjJfnxUVWg6PZTo2otSm+slzNAxU/35hF8/oJIKoG9slq30JYOsF2azg==",
      "dev": true
    },
    "node_modules/lilconfig": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-2.0.6.tgz",
      "integrity": "sha512-9JROoBW7pobfsx+Sq2JsASvCo6Pfo6WWoUW79HuB1BCoBXD4PLWJPqDF6fNj67pqBYTbAHkE57M1kS/+L1neOg==",
      "dev": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/local-pkg": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/local-pkg/-/local-pkg-0.4.2.tgz",
      "integrity": "sha512-mlERgSPrbxU3BP4qBqAvvwlgW4MTg78iwJdGGnv7kibKjWcJksrG3t6LB5lXI93wXRDvG4NpUgJFmTG4T6rdrg==",
      "dev": true,
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/antfu"
      }
    },
    "node_modules/lodash.castarray": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/lodash.castarray/-/lodash.castarray-4.4.0.tgz",
      "integrity": "sha1-wCUTUV4wna3dTCTGDP3c9ZdtkRU=",
      "dev": true
    },
    "node_modules/lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha1-fFJqUtibRcRcxpC4gWO+BJf1UMs=",
      "dev": true
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true
    },
    "node_modules/lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "dev": true,
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/magic-string": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.25.9.tgz",
      "integrity": "sha512-RmF0AsMzgt25qzqqLc1+MbHmhdx0ojF2Fvs4XnOqz2ZOBXzzkEwc/dJQZCYHAn7v1jbVOjAZfK8msRn4BxO4VQ==",
      "dependencies": {
        "sourcemap-codec": "^1.4.8"
      }
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "dev": true,
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.4.tgz",
      "integrity": "sha512-pRmzw/XUcwXGpD9aI9q/0XOwLNygjETJ8y0ao0wdqprrzDa4YnxLcz7fQRZr8voh8V10kGhABbNcHVk5wHgWwg==",
      "dev": true,
      "dependencies": {
        "braces": "^3.0.1",
        "picomatch": "^2.2.3"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mini-svg-data-uri": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/mini-svg-data-uri/-/mini-svg-data-uri-1.3.3.tgz",
      "integrity": "sha512-+fA2oRcR1dJI/7ITmeQJDrYWks0wodlOz0pAEhKYJ2IVc1z0AnwJUsKY2fzFmPAM3Jo9J0rBx8JAA9QQSJ5PuA==",
      "dev": true,
      "bin": {
        "mini-svg-data-uri": "cli.js"
      }
    },
    "node_modules/minimalistic-assert": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/minimalistic-assert/-/minimalistic-assert-1.0.1.tgz",
      "integrity": "sha512-UtJcAD4yEaGtjPezWuO9wC4nwUnVH/8/Im3yEHQP4b67cXlD/Qr9hdITCU1xDbSEXg2XKNaP8jsReV7vQd00/A=="
    },
    "node_modules/minimalistic-crypto-utils": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/minimalistic-crypto-utils/-/minimalistic-crypto-utils-1.0.1.tgz",
      "integrity": "sha512-JIYlbt6g8i5jKfJ3xz7rF0LXmv2TkDxBLUkiBeZ7bAx4GnnNMr8xFpGnOxn6GhTEHx3SjRrZEoU+j04prX1ktg=="
    },
    "node_modules/minimatch": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.0.tgz",
      "integrity": "sha512-9TPBGGak4nHfGZsPBohm9AWg6NoT7QTCehS3BIJABslyZbzxfV78QM2Y6+i741OPZIafFAaiiEMh5OyIrJPgtg==",
      "dev": true,
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.6",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.6.tgz",
      "integrity": "sha512-Jsjnk4bw3YJqYzbdyBiNsPWHPfO++UGG749Cxs6peCu5Xg4nrena6OVxOYxrQTqww0Jmwt+Ref8rggumkTLz9Q==",
      "dev": true
    },
    "node_modules/mlly": {
      "version": "0.5.7",
      "resolved": "https://registry.npmjs.org/mlly/-/mlly-0.5.7.tgz",
      "integrity": "sha512-rz+n2i9862ymLH+UDlHpsuTVyCIAs+9WejS2De2VUlAKdpq8OJ9x/C2M7nNUMLEW1H+D6n0uZlpz8+tMGxCmyQ==",
      "dev": true,
      "dependencies": {
        "acorn": "^8.8.0",
        "pathe": "^0.3.3",
        "pkg-types": "^0.3.3"
      }
    },
    "node_modules/mlly/node_modules/acorn": {
      "version": "8.8.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.8.0.tgz",
      "integrity": "sha512-QOxyigPVrpZ2GXT+PFyZTl6TtOFc5egxHIP9IlQ+RbupQuX4RkT/Bee4/kQuC02Xkzg84JcT7oLYtDIQxp+v7w==",
      "dev": true,
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/moment": {
      "version": "2.29.4",
      "resolved": "https://registry.npmjs.org/moment/-/moment-2.29.4.tgz",
      "integrity": "sha512-5LC9SOxjSc2HF6vO2CyuTDNivEdoz2IvyJJGj6X8DJ0eFyfszE0QiEd+iXmBvUP3WHxSjFH/vIsA0EN00cgr8w==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/mosha-vue-toastify": {
      "version": "1.0.23",
      "resolved": "https://registry.npmjs.org/mosha-vue-toastify/-/mosha-vue-toastify-1.0.23.tgz",
      "integrity": "sha512-K9fij3e3H+E/Lj82ISrgmyKrtM5RNmtZC/KG/KH47+oZGmzAkN/Zuz39kBdT/Mp8OxaHuIWQntEUMP+HdmK1xA=="
    },
    "node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "dev": true
    },
    "node_modules/nanoid": {
      "version": "3.3.4",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.4.tgz",
      "integrity": "sha512-MqBkQh/OHTS2egovRtLk45wEyNXwF+cokD+1YPf9u5VfJiRdAiRwB2froX5Co9Rh20xs4siNPm8naNotSD6RBw==",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/node-releases": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.6.tgz",
      "integrity": "sha512-PiVXnNuFm5+iYkLBNeq5211hvO38y63T0i2KKh2KnUs3RpzJ+JtODFjkD8yjLwnDkTYF1eKXheUwdssR+NRZdg==",
      "dev": true
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/normalize-range": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
      "integrity": "sha1-LRDAa9/TEuqXd2laTShDlFa3WUI=",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-hash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
      "integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
      "dev": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/pako": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/pako/-/pako-2.0.4.tgz",
      "integrity": "sha512-v8tweI900AUkZN6heMU/4Uy4cXRc2AYNRggVmTR+dEncawDJgCdLMximOVA2p4qO57WMynangsfGRb5WD6L1Bg==",
      "dev": true
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "dev": true
    },
    "node_modules/pathe": {
      "version": "0.3.3",
      "resolved": "https://registry.npmjs.org/pathe/-/pathe-0.3.3.tgz",
      "integrity": "sha512-x3nrPvG0HDSDzUiJ0WqtzhN4MD+h5B+dFJ3/qyxVuARlr4Y3aJv8gri2cZzp9Z8sGs2a+aG9gNbKngh3gme57A==",
      "dev": true
    },
    "node_modules/picocolors": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.0.tgz",
      "integrity": "sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ=="
    },
    "node_modules/picomatch": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.0.tgz",
      "integrity": "sha512-lY1Q/PiJGC2zOv/z391WOTD+Z02bCgsFfvxoXXf6h7kv9o+WmsmzYqrAwY63sNgOxE4xEdq0WyUnXfKeBrSvYw==",
      "dev": true,
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pify": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
      "integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
      "dev": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/pkg-types": {
      "version": "0.3.3",
      "resolved": "https://registry.npmjs.org/pkg-types/-/pkg-types-0.3.3.tgz",
      "integrity": "sha512-6AJcCMnjUQPQv/Wk960w0TOmjhdjbeaQJoSKWRQv9N3rgkessCu6J0Ydsog/nw1MbpnxHuPzYbfOn2KmlZO1FA==",
      "dev": true,
      "dependencies": {
        "jsonc-parser": "^3.0.0",
        "mlly": "^0.5.3",
        "pathe": "^0.3.0"
      }
    },
    "node_modules/postcss": {
      "version": "8.4.16",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.16.tgz",
      "integrity": "sha512-ipHE1XBvKzm5xI7hiHCZJCSugxvsdq2mPnsq5+UF+VHCjiBvtDrlxJfMBToWaP9D5XlgNmcFGqoHmUn0EYEaRQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        }
      ],
      "dependencies": {
        "nanoid": "^3.3.4",
        "picocolors": "^1.0.0",
        "source-map-js": "^1.0.2"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/postcss-import": {
      "version": "14.1.0",
      "resolved": "https://registry.npmjs.org/postcss-import/-/postcss-import-14.1.0.tgz",
      "integrity": "sha512-flwI+Vgm4SElObFVPpTIT7SU7R3qk2L7PyduMcokiaVKuWv9d/U+Gm/QAd8NDLuykTWTkcrjOeD2Pp1rMeBTGw==",
      "dev": true,
      "dependencies": {
        "postcss-value-parser": "^4.0.0",
        "read-cache": "^1.0.0",
        "resolve": "^1.1.7"
      },
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "postcss": "^8.0.0"
      }
    },
    "node_modules/postcss-js": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/postcss-js/-/postcss-js-4.0.0.tgz",
      "integrity": "sha512-77QESFBwgX4irogGVPgQ5s07vLvFqWr228qZY+w6lW599cRlK/HmnlivnnVUxkjHnCu4J16PDMHcH+e+2HbvTQ==",
      "dev": true,
      "dependencies": {
        "camelcase-css": "^2.0.1"
      },
      "engines": {
        "node": "^12 || ^14 || >= 16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/postcss/"
      },
      "peerDependencies": {
        "postcss": "^8.3.3"
      }
    },
    "node_modules/postcss-load-config": {
      "version": "3.1.4",
      "resolved": "https://registry.npmjs.org/postcss-load-config/-/postcss-load-config-3.1.4.tgz",
      "integrity": "sha512-6DiM4E7v4coTE4uzA8U//WhtPwyhiim3eyjEMFCnUpzbrkK9wJHgKDT2mR+HbtSrd/NubVaYTOpSpjUl8NQeRg==",
      "dev": true,
      "dependencies": {
        "lilconfig": "^2.0.5",
        "yaml": "^1.10.2"
      },
      "engines": {
        "node": ">= 10"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/postcss/"
      },
      "peerDependencies": {
        "postcss": ">=8.0.9",
        "ts-node": ">=9.0.0"
      },
      "peerDependenciesMeta": {
        "postcss": {
          "optional": true
        },
        "ts-node": {
          "optional": true
        }
      }
    },
    "node_modules/postcss-nested": {
      "version": "5.0.6",
      "resolved": "https://registry.npmjs.org/postcss-nested/-/postcss-nested-5.0.6.tgz",
      "integrity": "sha512-rKqm2Fk0KbA8Vt3AdGN0FB9OBOMDVajMG6ZCf/GoHgdxUJ4sBFp0A/uMIRm+MJUdo33YXEtjqIz8u7DAp8B7DA==",
      "dev": true,
      "dependencies": {
        "postcss-selector-parser": "^6.0.6"
      },
      "engines": {
        "node": ">=12.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/postcss/"
      },
      "peerDependencies": {
        "postcss": "^8.2.14"
      }
    },
    "node_modules/postcss-selector-parser": {
      "version": "6.0.10",
      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.0.10.tgz",
      "integrity": "sha512-IQ7TZdoaqbT+LCpShg46jnZVlhWD2w6iQYAcYXfHARZ7X1t/UGhhceQDs5X0cGqKvYlHNOuv7Oa1xmb0oQuA3w==",
      "dev": true,
      "dependencies": {
        "cssesc": "^3.0.0",
        "util-deprecate": "^1.0.2"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/postcss-value-parser": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
      "dev": true
    },
    "node_modules/prettier": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/prettier/-/prettier-2.5.1.tgz",
      "integrity": "sha512-vBZcPRUR5MZJwoyi3ZoyQlc1rXeEck8KgeC9AwwOn+exuxLxq5toTRDTSaVrXHxelDMHy9zlicw8u66yxoSUFg==",
      "dev": true,
      "peer": true,
      "bin": {
        "prettier": "bin-prettier.js"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/prettier-plugin-tailwindcss": {
      "version": "0.1.13",
      "resolved": "https://registry.npmjs.org/prettier-plugin-tailwindcss/-/prettier-plugin-tailwindcss-0.1.13.tgz",
      "integrity": "sha512-/EKQURUrxLu66CMUg4+1LwGdxnz8of7IDvrSLqEtDqhLH61SAlNNUSr90UTvZaemujgl3OH/VHg+fyGltrNixw==",
      "dev": true,
      "engines": {
        "node": ">=12.17.0"
      },
      "peerDependencies": {
        "prettier": ">=2.2.0"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/quick-lru": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/quick-lru/-/quick-lru-5.1.1.tgz",
      "integrity": "sha512-WuyALRjWPDGtt/wzJiadO5AXY+8hZ80hVpe6MyivgraREW751X3SbhRvG3eLKOYN+8VEvqLcf3wdnt44Z4S4SA==",
      "dev": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/read-cache": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/read-cache/-/read-cache-1.0.0.tgz",
      "integrity": "sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==",
      "dev": true,
      "dependencies": {
        "pify": "^2.3.0"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/resolve": {
      "version": "1.22.1",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.1.tgz",
      "integrity": "sha512-nBpuuYuY5jFsli/JIs1oldw6fOQCBioohqWZg/2hiaOybXOft4lonv85uDOKXdf8rhyK159cxU5cDcK/NKk8zw==",
      "dev": true,
      "dependencies": {
        "is-core-module": "^2.9.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/reusify": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
      "integrity": "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==",
      "dev": true,
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rollup": {
      "version": "2.76.0",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-2.76.0.tgz",
      "integrity": "sha512-9jwRIEY1jOzKLj3nsY/yot41r19ITdQrhs+q3ggNWhr9TQgduHqANvPpS32RNpzGklJu3G1AJfvlZLi/6wFgWA==",
      "dev": true,
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=10.0.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/scrypt-js": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/scrypt-js/-/scrypt-js-3.0.1.tgz",
      "integrity": "sha512-cdwTTnqPu0Hyvf5in5asVdZocVDTNRmR7XEcJuIzMjJeSHybHl7vpB66AzwTaIg6CLSbtjcxc8fqcySfnTkccA=="
    },
    "node_modules/scule": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/scule/-/scule-0.3.2.tgz",
      "integrity": "sha512-zIvPdjOH8fv8CgrPT5eqtxHQXmPNnV/vHJYffZhE43KZkvULvpCTvOt1HPlFaCZx287INL9qaqrZg34e8NgI4g==",
      "dev": true
    },
    "node_modules/semver": {
      "version": "7.3.7",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.7.tgz",
      "integrity": "sha512-QlYTucUYOews+WeEujDoEGziz4K6c47V/Bd+LjSSYcA94p+DmINdf7ncaUinThfvZyu13lN9OY1XDxt8C0Tw0g==",
      "dev": true,
      "dependencies": {
        "lru-cache": "^6.0.0"
      },
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.0.2.tgz",
      "integrity": "sha512-R0XvVJ9WusLiqTCEiGCmICCMplcCkIwwR11mOSD9CR5u+IXYdiseeEuXCVAjS54zqwkLcPNnmU4OeJ6tUrWhDw==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/sourcemap-codec": {
      "version": "1.4.8",
      "resolved": "https://registry.npmjs.org/sourcemap-codec/-/sourcemap-codec-1.4.8.tgz",
      "integrity": "sha512-9NykojV5Uih4lgo5So5dtw+f0JgJX30KCNI8gwhz2J9A15wD0Ml6tjHKwf6fTSa6fAdVBdZeNOs9eJ71qCk8vA=="
    },
    "node_modules/strip-literal": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/strip-literal/-/strip-literal-0.4.0.tgz",
      "integrity": "sha512-ql/sBDoJOybTKSIOWrrh8kgUEMjXMwRAkZTD0EwiwxQH/6tTPkZvMIEjp0CRlpi6V5FMiJyvxeRkEi1KrGISoA==",
      "dev": true,
      "dependencies": {
        "acorn": "^8.7.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/antfu"
      }
    },
    "node_modules/strip-literal/node_modules/acorn": {
      "version": "8.8.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.8.0.tgz",
      "integrity": "sha512-QOxyigPVrpZ2GXT+PFyZTl6TtOFc5egxHIP9IlQ+RbupQuX4RkT/Bee4/kQuC02Xkzg84JcT7oLYtDIQxp+v7w==",
      "dev": true,
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "dev": true,
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/tailwindcss": {
      "version": "3.1.8",
      "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-3.1.8.tgz",
      "integrity": "sha512-YSneUCZSFDYMwk+TGq8qYFdCA3yfBRdBlS7txSq0LUmzyeqRe3a8fBQzbz9M3WS/iFT4BNf/nmw9mEzrnSaC0g==",
      "dev": true,
      "dependencies": {
        "arg": "^5.0.2",
        "chokidar": "^3.5.3",
        "color-name": "^1.1.4",
        "detective": "^5.2.1",
        "didyoumean": "^1.2.2",
        "dlv": "^1.1.3",
        "fast-glob": "^3.2.11",
        "glob-parent": "^6.0.2",
        "is-glob": "^4.0.3",
        "lilconfig": "^2.0.6",
        "normalize-path": "^3.0.0",
        "object-hash": "^3.0.0",
        "picocolors": "^1.0.0",
        "postcss": "^8.4.14",
        "postcss-import": "^14.1.0",
        "postcss-js": "^4.0.0",
        "postcss-load-config": "^3.1.4",
        "postcss-nested": "5.0.6",
        "postcss-selector-parser": "^6.0.10",
        "postcss-value-parser": "^4.2.0",
        "quick-lru": "^5.1.1",
        "resolve": "^1.22.1"
      },
      "bin": {
        "tailwind": "lib/cli.js",
        "tailwindcss": "lib/cli.js"
      },
      "engines": {
        "node": ">=12.13.0"
      },
      "peerDependencies": {
        "postcss": "^8.0.9"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/tradingview-api": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/tradingview-api/-/tradingview-api-1.0.2.tgz",
      "integrity": "sha512-a0R1kUtiggX8r/SlLDs5dC+NSmZSRZlOYUDMgzVkMbyrFqQrZS4jYSTUkd0Q1QiwnFdAuf0DgGE8dJV3wkBYmA=="
    },
    "node_modules/typescript": {
      "version": "4.7.4",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-4.7.4.tgz",
      "integrity": "sha512-C0WQT0gezHuw6AdY1M2jxUO83Rjf0HP7Sk1DtXj6j1EwkQNZrHAg2XPWlq62oqEhYvONq5pkC2Y9oPljWToLmQ==",
      "dev": true,
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=4.2.0"
      }
    },
    "node_modules/unimport": {
      "version": "0.6.5",
      "resolved": "https://registry.npmjs.org/unimport/-/unimport-0.6.5.tgz",
      "integrity": "sha512-B8x6+GiYUzDphN6Iaoshu99mUo8n7QCq13QTY2Z8saj1QBmGKXf+vJJlptfL3MdOmzxpve2Ikx91UZ4Qoz4dVQ==",
      "dev": true,
      "dependencies": {
        "@rollup/pluginutils": "^4.2.1",
        "escape-string-regexp": "^5.0.0",
        "fast-glob": "^3.2.11",
        "local-pkg": "^0.4.2",
        "magic-string": "^0.26.2",
        "mlly": "^0.5.7",
        "pathe": "^0.3.3",
        "scule": "^0.3.2",
        "strip-literal": "^0.4.0",
        "unplugin": "^0.8.1"
      }
    },
    "node_modules/unimport/node_modules/acorn": {
      "version": "8.8.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.8.0.tgz",
      "integrity": "sha512-QOxyigPVrpZ2GXT+PFyZTl6TtOFc5egxHIP9IlQ+RbupQuX4RkT/Bee4/kQuC02Xkzg84JcT7oLYtDIQxp+v7w==",
      "dev": true,
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/unimport/node_modules/magic-string": {
      "version": "0.26.2",
      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.26.2.tgz",
      "integrity": "sha512-NzzlXpclt5zAbmo6h6jNc8zl2gNRGHvmsZW4IvZhTC4W7k4OlLP+S5YLussa/r3ixNT66KOQfNORlXHSOy/X4A==",
      "dev": true,
      "dependencies": {
        "sourcemap-codec": "^1.4.8"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/unimport/node_modules/unplugin": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/unplugin/-/unplugin-0.8.1.tgz",
      "integrity": "sha512-o7rUZoPLG1fH4LKinWgb77gDtTE6mw/iry0Pq0Z5UPvZ9+HZ1/4+7fic7t58s8/CGkPrDpGq+RltO+DmswcR4g==",
      "dev": true,
      "dependencies": {
        "acorn": "^8.8.0",
        "chokidar": "^3.5.3",
        "webpack-sources": "^3.2.3",
        "webpack-virtual-modules": "^0.4.4"
      },
      "peerDependencies": {
        "esbuild": ">=0.13",
        "rollup": "^2.50.0",
        "vite": "^2.3.0 || ^3.0.0-0",
        "webpack": "4 || 5"
      },
      "peerDependenciesMeta": {
        "esbuild": {
          "optional": true
        },
        "rollup": {
          "optional": true
        },
        "vite": {
          "optional": true
        },
        "webpack": {
          "optional": true
        }
      }
    },
    "node_modules/unplugin": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/unplugin/-/unplugin-0.9.0.tgz",
      "integrity": "sha512-6o7q8Y9yxdPi5yCPmRuFfeNnVzGumRNZSK6hIkvZ6hd0cfigVdm0qBx/GgQ/NEjs54eUV1qTjvMYKRs9yh3rzw==",
      "dev": true,
      "dependencies": {
        "acorn": "^8.8.0",
        "chokidar": "^3.5.3",
        "webpack-sources": "^3.2.3",
        "webpack-virtual-modules": "^0.4.4"
      },
      "peerDependencies": {
        "esbuild": ">=0.13",
        "rollup": "^2.50.0",
        "vite": "^2.3.0 || ^3.0.0-0",
        "webpack": "4 || 5"
      },
      "peerDependenciesMeta": {
        "esbuild": {
          "optional": true
        },
        "rollup": {
          "optional": true
        },
        "vite": {
          "optional": true
        },
        "webpack": {
          "optional": true
        }
      }
    },
    "node_modules/unplugin-auto-import": {
      "version": "0.11.1",
      "resolved": "https://registry.npmjs.org/unplugin-auto-import/-/unplugin-auto-import-0.11.1.tgz",
      "integrity": "sha512-3KMbjc3Sv2h1osgQ16uKmD2XHb8MLK3Lj5Twzo3x2vDexYdNKjVljLZUX+eT5cvh2f1VzJR77dkzDhdEi9+1uw==",
      "dev": true,
      "dependencies": {
        "@antfu/utils": "^0.5.2",
        "@rollup/pluginutils": "^4.2.1",
        "local-pkg": "^0.4.2",
        "magic-string": "^0.26.2",
        "unimport": "^0.6.5",
        "unplugin": "^0.9.0"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/antfu"
      },
      "peerDependencies": {
        "@vueuse/core": "*"
      },
      "peerDependenciesMeta": {
        "@vueuse/core": {
          "optional": true
        }
      }
    },
    "node_modules/unplugin-auto-import/node_modules/magic-string": {
      "version": "0.26.2",
      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.26.2.tgz",
      "integrity": "sha512-NzzlXpclt5zAbmo6h6jNc8zl2gNRGHvmsZW4IvZhTC4W7k4OlLP+S5YLussa/r3ixNT66KOQfNORlXHSOy/X4A==",
      "dev": true,
      "dependencies": {
        "sourcemap-codec": "^1.4.8"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/unplugin-vue-components": {
      "version": "0.22.4",
      "resolved": "https://registry.npmjs.org/unplugin-vue-components/-/unplugin-vue-components-0.22.4.tgz",
      "integrity": "sha512-2rRZcM9OnJGXnYxQNfaceEYuPeVACcWySIjy8WBwIiN3onr980TmA3XE5pRJFt8zoQrUA+c46oyIq96noLqrEQ==",
      "dev": true,
      "dependencies": {
        "@antfu/utils": "^0.5.2",
        "@rollup/pluginutils": "^4.2.1",
        "chokidar": "^3.5.3",
        "debug": "^4.3.4",
        "fast-glob": "^3.2.11",
        "local-pkg": "^0.4.2",
        "magic-string": "^0.26.2",
        "minimatch": "^5.1.0",
        "resolve": "^1.22.1",
        "unplugin": "^0.9.0"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/antfu"
      },
      "peerDependencies": {
        "@babel/parser": "^7.15.8",
        "vue": "2 || 3"
      },
      "peerDependenciesMeta": {
        "@babel/parser": {
          "optional": true
        }
      }
    },
    "node_modules/unplugin-vue-components/node_modules/magic-string": {
      "version": "0.26.2",
      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.26.2.tgz",
      "integrity": "sha512-NzzlXpclt5zAbmo6h6jNc8zl2gNRGHvmsZW4IvZhTC4W7k4OlLP+S5YLussa/r3ixNT66KOQfNORlXHSOy/X4A==",
      "dev": true,
      "dependencies": {
        "sourcemap-codec": "^1.4.8"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/unplugin-vue-router": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/unplugin-vue-router/-/unplugin-vue-router-0.1.2.tgz",
      "integrity": "sha512-vjBR9yFZJzGj+VwYHFLqni091wPHaJhKLCAwIm6eIkhCdtW+sZetzE112JFUnXuiLOhs3mzoGNslJ0FpcDzbiQ==",
      "dev": true,
      "dependencies": {
        "chokidar": "^3.5.3",
        "fast-glob": "^3.2.11",
        "json5": "^2.2.1",
        "local-pkg": "^0.4.2",
        "mlly": "^0.5.7",
        "pathe": "^0.3.3",
        "scule": "^0.3.2",
        "unplugin": "^0.9.0",
        "yaml": "^2.1.1"
      },
      "peerDependencies": {
        "vue-router": "^4.1.0"
      },
      "peerDependenciesMeta": {
        "vue-router": {
          "optional": true
        }
      }
    },
    "node_modules/unplugin-vue-router/node_modules/yaml": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.1.1.tgz",
      "integrity": "sha512-o96x3OPo8GjWeSLF+wOAbrPfhFOGY0W00GNaxCDv+9hkcDJEnev1yh8S7pgHF0ik6zc8sQLuL8hjHjJULZp8bw==",
      "dev": true,
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/unplugin/node_modules/acorn": {
      "version": "8.8.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.8.0.tgz",
      "integrity": "sha512-QOxyigPVrpZ2GXT+PFyZTl6TtOFc5egxHIP9IlQ+RbupQuX4RkT/Bee4/kQuC02Xkzg84JcT7oLYtDIQxp+v7w==",
      "dev": true,
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.0.5.tgz",
      "integrity": "sha512-dteFFpCyvuDdr9S/ff1ISkKt/9YZxKjI9WlRR99c180GaztJtRa/fn18FdxGVKVsnPY7/a/FDN68mcvUmP4U7Q==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        }
      ],
      "dependencies": {
        "escalade": "^3.1.1",
        "picocolors": "^1.0.0"
      },
      "bin": {
        "browserslist-lint": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=",
      "dev": true
    },
    "node_modules/vite": {
      "version": "3.0.8",
      "resolved": "https://registry.npmjs.org/vite/-/vite-3.0.8.tgz",
      "integrity": "sha512-AOZ4eN7mrkJiOLuw8IA7piS4IdOQyQCA81GxGsAQvAZzMRi9ZwGB3TOaYsj4uLAWK46T5L4AfQ6InNGlxX30IQ==",
      "dev": true,
      "dependencies": {
        "esbuild": "^0.14.47",
        "postcss": "^8.4.16",
        "resolve": "^1.22.1",
        "rollup": ">=2.75.6 <2.77.0 || ~2.77.0"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      },
      "peerDependencies": {
        "less": "*",
        "sass": "*",
        "stylus": "*",
        "terser": "^5.4.0"
      },
      "peerDependenciesMeta": {
        "less": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "terser": {
          "optional": true
        }
      }
    },
    "node_modules/vue": {
      "version": "3.2.37",
      "resolved": "https://registry.npmjs.org/vue/-/vue-3.2.37.tgz",
      "integrity": "sha512-bOKEZxrm8Eh+fveCqS1/NkG/n6aMidsI6hahas7pa0w/l7jkbssJVsRhVDs07IdDq7h9KHswZOgItnwJAgtVtQ==",
      "dependencies": {
        "@vue/compiler-dom": "3.2.37",
        "@vue/compiler-sfc": "3.2.37",
        "@vue/runtime-dom": "3.2.37",
        "@vue/server-renderer": "3.2.37",
        "@vue/shared": "3.2.37"
      }
    },
    "node_modules/vue-resize": {
      "version": "2.0.0-alpha.1",
      "resolved": "https://registry.npmjs.org/vue-resize/-/vue-resize-2.0.0-alpha.1.tgz",
      "integrity": "sha512-7+iqOueLU7uc9NrMfrzbG8hwMqchfVfSzpVlCMeJQe4pyibqyoifDNbKTZvwxZKDvGkB+PdFeKvnGZMoEb8esg==",
      "peerDependencies": {
        "vue": "^3.0.0"
      }
    },
    "node_modules/vue-router": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/vue-router/-/vue-router-4.1.3.tgz",
      "integrity": "sha512-XvK81bcYglKiayT7/vYAg/f36ExPC4t90R/HIpzrZ5x+17BOWptXLCrEPufGgZeuq68ww4ekSIMBZY1qdUdfjA==",
      "dependencies": {
        "@vue/devtools-api": "^6.1.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/posva"
      },
      "peerDependencies": {
        "vue": "^3.2.0"
      }
    },
    "node_modules/vue-tsc": {
      "version": "0.40.1",
      "resolved": "https://registry.npmjs.org/vue-tsc/-/vue-tsc-0.40.1.tgz",
      "integrity": "sha512-Z+3rlp/6TrtKvLuaFYwBn03zrdinMR6lBb3mWBJtDA+KwlRu+I4eMoqC1qT9D7i/29u0Bw58dH7ErjMpNLN9bQ==",
      "dev": true,
      "dependencies": {
        "@volar/vue-language-core": "0.40.1",
        "@volar/vue-typescript": "0.40.1"
      },
      "bin": {
        "vue-tsc": "bin/vue-tsc.js"
      },
      "peerDependencies": {
        "typescript": "*"
      }
    },
    "node_modules/vuex": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/vuex/-/vuex-4.0.2.tgz",
      "integrity": "sha512-M6r8uxELjZIK8kTKDGgZTYX/ahzblnzC4isU1tpmEuOIIKmV+TRdc+H4s8ds2NuZ7wpUTdGRzJRtoj+lI+pc0Q==",
      "dependencies": {
        "@vue/devtools-api": "^6.0.0-beta.11"
      },
      "peerDependencies": {
        "vue": "^3.0.2"
      }
    },
    "node_modules/webpack-sources": {
      "version": "3.2.3",
      "resolved": "https://registry.npmjs.org/webpack-sources/-/webpack-sources-3.2.3.tgz",
      "integrity": "sha512-/DyMEOrDgLKKIG0fmvtz+4dUX/3Ghozwgm6iPp8KRhvn+eQf9+Q7GWxVNMk3+uCPWfdXYC4ExGBckIXdFEfH1w==",
      "dev": true,
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/webpack-virtual-modules": {
      "version": "0.4.4",
      "resolved": "https://registry.npmjs.org/webpack-virtual-modules/-/webpack-virtual-modules-0.4.4.tgz",
      "integrity": "sha512-h9atBP/bsZohWpHnr+2sic8Iecb60GxftXsWNLLLSqewgIsGzByd2gcIID4nXcG+3tNe4GQG3dLcff3kXupdRA==",
      "dev": true
    },
    "node_modules/ws": {
      "version": "7.4.6",
      "resolved": "https://registry.npmjs.org/ws/-/ws-7.4.6.tgz",
      "integrity": "sha512-YmhHDO4MzaDLB+M9ym/mDA5z0naX8j7SIlT8f8z+I0VtzsRbekxEutHSme7NPS2qE8StCYQNUnfWdXta/Yu85A==",
      "engines": {
        "node": ">=8.3.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": "^5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/xtend": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
      "dev": true,
      "engines": {
        "node": ">=0.4"
      }
    },
    "node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
      "dev": true
    },
    "node_modules/yaml": {
      "version": "1.10.2",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-1.10.2.tgz",
      "integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==",
      "dev": true,
      "engines": {
        "node": ">= 6"
      }
    }
  },
  "dependencies": {
    "@antfu/utils": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/@antfu/utils/-/utils-0.5.2.tgz",
      "integrity": "sha512-CQkeV+oJxUazwjlHD0/3ZD08QWKuGQkhnrKo3e6ly5pd48VUpXbb77q0xMU4+vc2CkJnDS02Eq/M9ugyX20XZA==",
      "dev": true
    },
    "@babel/parser": {
      "version": "7.18.4",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.18.4.tgz",
      "integrity": "sha512-FDge0dFazETFcxGw/EXzOkN8uJp0PC7Qbm+Pe9T+av2zlBpOgunFHkQPPn+eRuClU73JF+98D531UgayY89tow=="
    },
    "@ethersproject/abi": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/abi/-/abi-5.7.0.tgz",
      "integrity": "sha512-351ktp42TiRcYB3H1OP8yajPeAQstMW/yCFokj/AthP9bLHzQFPlOrxOcwYEDkUAICmOHljvN4K39OMTMUa9RA==",
      "requires": {
        "@ethersproject/address": "^5.7.0",
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/constants": "^5.7.0",
        "@ethersproject/hash": "^5.7.0",
        "@ethersproject/keccak256": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "@ethersproject/strings": "^5.7.0"
      }
    },
    "@ethersproject/abstract-provider": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/abstract-provider/-/abstract-provider-5.7.0.tgz",
      "integrity": "sha512-R41c9UkchKCpAqStMYUpdunjo3pkEvZC3FAwZn5S5MGbXoMQOHIdHItezTETxAO5bevtMApSyEhn9+CHcDsWBw==",
      "requires": {
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/networks": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "@ethersproject/transactions": "^5.7.0",
        "@ethersproject/web": "^5.7.0"
      }
    },
    "@ethersproject/abstract-signer": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/abstract-signer/-/abstract-signer-5.7.0.tgz",
      "integrity": "sha512-a16V8bq1/Cz+TGCkE2OPMTOUDLS3grCpdjoJCYNnVBbdYEMSgKrU0+B90s8b6H+ByYTBZN7a3g76jdIJi7UfKQ==",
      "requires": {
        "@ethersproject/abstract-provider": "^5.7.0",
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/properties": "^5.7.0"
      }
    },
    "@ethersproject/address": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/address/-/address-5.7.0.tgz",
      "integrity": "sha512-9wYhYt7aghVGo758POM5nqcOMaE168Q6aRLJZwUmiqSrAungkG74gSSeKEIR7ukixesdRZGPgVqme6vmxs1fkA==",
      "requires": {
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/keccak256": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/rlp": "^5.7.0"
      }
    },
    "@ethersproject/base64": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/base64/-/base64-5.7.0.tgz",
      "integrity": "sha512-Dr8tcHt2mEbsZr/mwTPIQAf3Ai0Bks/7gTw9dSqk1mQvhW3XvRlmDJr/4n+wg1JmCl16NZue17CDh8xb/vZ0sQ==",
      "requires": {
        "@ethersproject/bytes": "^5.7.0"
      }
    },
    "@ethersproject/basex": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/basex/-/basex-5.7.0.tgz",
      "integrity": "sha512-ywlh43GwZLv2Voc2gQVTKBoVQ1mti3d8HK5aMxsfu/nRDnMmNqaSJ3r3n85HBByT8OpoY96SXM1FogC533T4zw==",
      "requires": {
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/properties": "^5.7.0"
      }
    },
    "@ethersproject/bignumber": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/bignumber/-/bignumber-5.7.0.tgz",
      "integrity": "sha512-n1CAdIHRWjSucQO3MC1zPSVgV/6dy/fjL9pMrPP9peL+QxEg9wOsVqwD4+818B6LUEtaXzVHQiuivzRoxPxUGw==",
      "requires": {
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "bn.js": "^5.2.1"
      }
    },
    "@ethersproject/bytes": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/bytes/-/bytes-5.7.0.tgz",
      "integrity": "sha512-nsbxwgFXWh9NyYWo+U8atvmMsSdKJprTcICAkvbBffT75qDocbuggBU0SJiVK2MuTrp0q+xvLkTnGMPK1+uA9A==",
      "requires": {
        "@ethersproject/logger": "^5.7.0"
      }
    },
    "@ethersproject/constants": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/constants/-/constants-5.7.0.tgz",
      "integrity": "sha512-DHI+y5dBNvkpYUMiRQyxRBYBefZkJfo70VUkUAsRjcPs47muV9evftfZ0PJVCXYbAiCgght0DtcF9srFQmIgWA==",
      "requires": {
        "@ethersproject/bignumber": "^5.7.0"
      }
    },
    "@ethersproject/contracts": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/contracts/-/contracts-5.7.0.tgz",
      "integrity": "sha512-5GJbzEU3X+d33CdfPhcyS+z8MzsTrBGk/sc+G+59+tPa9yFkl6HQ9D6L0QMgNTA9q8dT0XKxxkyp883XsQvbbg==",
      "requires": {
        "@ethersproject/abi": "^5.7.0",
        "@ethersproject/abstract-provider": "^5.7.0",
        "@ethersproject/abstract-signer": "^5.7.0",
        "@ethersproject/address": "^5.7.0",
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/constants": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "@ethersproject/transactions": "^5.7.0"
      }
    },
    "@ethersproject/hash": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/hash/-/hash-5.7.0.tgz",
      "integrity": "sha512-qX5WrQfnah1EFnO5zJv1v46a8HW0+E5xuBBDTwMFZLuVTx0tbU2kkx15NqdjxecrLGatQN9FGQKpb1FKdHCt+g==",
      "requires": {
        "@ethersproject/abstract-signer": "^5.7.0",
        "@ethersproject/address": "^5.7.0",
        "@ethersproject/base64": "^5.7.0",
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/keccak256": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "@ethersproject/strings": "^5.7.0"
      }
    },
    "@ethersproject/hdnode": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/hdnode/-/hdnode-5.7.0.tgz",
      "integrity": "sha512-OmyYo9EENBPPf4ERhR7oj6uAtUAhYGqOnIS+jE5pTXvdKBS99ikzq1E7Iv0ZQZ5V36Lqx1qZLeak0Ra16qpeOg==",
      "requires": {
        "@ethersproject/abstract-signer": "^5.7.0",
        "@ethersproject/basex": "^5.7.0",
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/pbkdf2": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "@ethersproject/sha2": "^5.7.0",
        "@ethersproject/signing-key": "^5.7.0",
        "@ethersproject/strings": "^5.7.0",
        "@ethersproject/transactions": "^5.7.0",
        "@ethersproject/wordlists": "^5.7.0"
      }
    },
    "@ethersproject/json-wallets": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/json-wallets/-/json-wallets-5.7.0.tgz",
      "integrity": "sha512-8oee5Xgu6+RKgJTkvEMl2wDgSPSAQ9MB/3JYjFV9jlKvcYHUXZC+cQp0njgmxdHkYWn8s6/IqIZYm0YWCjO/0g==",
      "requires": {
        "@ethersproject/abstract-signer": "^5.7.0",
        "@ethersproject/address": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/hdnode": "^5.7.0",
        "@ethersproject/keccak256": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/pbkdf2": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "@ethersproject/random": "^5.7.0",
        "@ethersproject/strings": "^5.7.0",
        "@ethersproject/transactions": "^5.7.0",
        "aes-js": "3.0.0",
        "scrypt-js": "3.0.1"
      }
    },
    "@ethersproject/keccak256": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/keccak256/-/keccak256-5.7.0.tgz",
      "integrity": "sha512-2UcPboeL/iW+pSg6vZ6ydF8tCnv3Iu/8tUmLLzWWGzxWKFFqOBQFLo6uLUv6BDrLgCDfN28RJ/wtByx+jZ4KBg==",
      "requires": {
        "@ethersproject/bytes": "^5.7.0",
        "js-sha3": "0.8.0"
      }
    },
    "@ethersproject/logger": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/logger/-/logger-5.7.0.tgz",
      "integrity": "sha512-0odtFdXu/XHtjQXJYA3u9G0G8btm0ND5Cu8M7i5vhEcE8/HmF4Lbdqanwyv4uQTr2tx6b7fQRmgLrsnpQlmnig=="
    },
    "@ethersproject/networks": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/networks/-/networks-5.7.0.tgz",
      "integrity": "sha512-MG6oHSQHd4ebvJrleEQQ4HhVu8Ichr0RDYEfHzsVAVjHNM+w36x9wp9r+hf1JstMXtseXDtkiVoARAG6M959AA==",
      "requires": {
        "@ethersproject/logger": "^5.7.0"
      }
    },
    "@ethersproject/pbkdf2": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/pbkdf2/-/pbkdf2-5.7.0.tgz",
      "integrity": "sha512-oR/dBRZR6GTyaofd86DehG72hY6NpAjhabkhxgr3X2FpJtJuodEl2auADWBZfhDHgVCbu3/H/Ocq2uC6dpNjjw==",
      "requires": {
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/sha2": "^5.7.0"
      }
    },
    "@ethersproject/properties": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/properties/-/properties-5.7.0.tgz",
      "integrity": "sha512-J87jy8suntrAkIZtecpxEPxY//szqr1mlBaYlQ0r4RCaiD2hjheqF9s1LVE8vVuJCXisjIP+JgtK/Do54ej4Sw==",
      "requires": {
        "@ethersproject/logger": "^5.7.0"
      }
    },
    "@ethersproject/providers": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/providers/-/providers-5.7.0.tgz",
      "integrity": "sha512-+TTrrINMzZ0aXtlwO/95uhAggKm4USLm1PbeCBR/3XZ7+Oey+3pMyddzZEyRhizHpy1HXV0FRWRMI1O3EGYibA==",
      "requires": {
        "@ethersproject/abstract-provider": "^5.7.0",
        "@ethersproject/abstract-signer": "^5.7.0",
        "@ethersproject/address": "^5.7.0",
        "@ethersproject/base64": "^5.7.0",
        "@ethersproject/basex": "^5.7.0",
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/constants": "^5.7.0",
        "@ethersproject/hash": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/networks": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "@ethersproject/random": "^5.7.0",
        "@ethersproject/rlp": "^5.7.0",
        "@ethersproject/sha2": "^5.7.0",
        "@ethersproject/strings": "^5.7.0",
        "@ethersproject/transactions": "^5.7.0",
        "@ethersproject/web": "^5.7.0",
        "bech32": "1.1.4",
        "ws": "7.4.6"
      }
    },
    "@ethersproject/random": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/random/-/random-5.7.0.tgz",
      "integrity": "sha512-19WjScqRA8IIeWclFme75VMXSBvi4e6InrUNuaR4s5pTF2qNhcGdCUwdxUVGtDDqC00sDLCO93jPQoDUH4HVmQ==",
      "requires": {
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/logger": "^5.7.0"
      }
    },
    "@ethersproject/rlp": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/rlp/-/rlp-5.7.0.tgz",
      "integrity": "sha512-rBxzX2vK8mVF7b0Tol44t5Tb8gomOHkj5guL+HhzQ1yBh/ydjGnpw6at+X6Iw0Kp3OzzzkcKp8N9r0W4kYSs9w==",
      "requires": {
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/logger": "^5.7.0"
      }
    },
    "@ethersproject/sha2": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/sha2/-/sha2-5.7.0.tgz",
      "integrity": "sha512-gKlH42riwb3KYp0reLsFTokByAKoJdgFCwI+CCiX/k+Jm2mbNs6oOaCjYQSlI1+XBVejwH2KrmCbMAT/GnRDQw==",
      "requires": {
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "hash.js": "1.1.7"
      }
    },
    "@ethersproject/signing-key": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/signing-key/-/signing-key-5.7.0.tgz",
      "integrity": "sha512-MZdy2nL3wO0u7gkB4nA/pEf8lu1TlFswPNmy8AiYkfKTdO6eXBJyUdmHO/ehm/htHw9K/qF8ujnTyUAD+Ry54Q==",
      "requires": {
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "bn.js": "^5.2.1",
        "elliptic": "6.5.4",
        "hash.js": "1.1.7"
      }
    },
    "@ethersproject/solidity": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/solidity/-/solidity-5.7.0.tgz",
      "integrity": "sha512-HmabMd2Dt/raavyaGukF4XxizWKhKQ24DoLtdNbBmNKUOPqwjsKQSdV9GQtj9CBEea9DlzETlVER1gYeXXBGaA==",
      "requires": {
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/keccak256": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/sha2": "^5.7.0",
        "@ethersproject/strings": "^5.7.0"
      }
    },
    "@ethersproject/strings": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/strings/-/strings-5.7.0.tgz",
      "integrity": "sha512-/9nu+lj0YswRNSH0NXYqrh8775XNyEdUQAuf3f+SmOrnVewcJ5SBNAjF7lpgehKi4abvNNXyf+HX86czCdJ8Mg==",
      "requires": {
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/constants": "^5.7.0",
        "@ethersproject/logger": "^5.7.0"
      }
    },
    "@ethersproject/transactions": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/transactions/-/transactions-5.7.0.tgz",
      "integrity": "sha512-kmcNicCp1lp8qanMTC3RIikGgoJ80ztTyvtsFvCYpSCfkjhD0jZ2LOrnbcuxuToLIUYYf+4XwD1rP+B/erDIhQ==",
      "requires": {
        "@ethersproject/address": "^5.7.0",
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/constants": "^5.7.0",
        "@ethersproject/keccak256": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "@ethersproject/rlp": "^5.7.0",
        "@ethersproject/signing-key": "^5.7.0"
      }
    },
    "@ethersproject/units": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/units/-/units-5.7.0.tgz",
      "integrity": "sha512-pD3xLMy3SJu9kG5xDGI7+xhTEmGXlEqXU4OfNapmfnxLVY4EMSSRp7j1k7eezutBPH7RBN/7QPnwR7hzNlEFeg==",
      "requires": {
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/constants": "^5.7.0",
        "@ethersproject/logger": "^5.7.0"
      }
    },
    "@ethersproject/wallet": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/wallet/-/wallet-5.7.0.tgz",
      "integrity": "sha512-MhmXlJXEJFBFVKrDLB4ZdDzxcBxQ3rLyCkhNqVu3CDYvR97E+8r01UgrI+TI99Le+aYm/in/0vp86guJuM7FCA==",
      "requires": {
        "@ethersproject/abstract-provider": "^5.7.0",
        "@ethersproject/abstract-signer": "^5.7.0",
        "@ethersproject/address": "^5.7.0",
        "@ethersproject/bignumber": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/hash": "^5.7.0",
        "@ethersproject/hdnode": "^5.7.0",
        "@ethersproject/json-wallets": "^5.7.0",
        "@ethersproject/keccak256": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "@ethersproject/random": "^5.7.0",
        "@ethersproject/signing-key": "^5.7.0",
        "@ethersproject/transactions": "^5.7.0",
        "@ethersproject/wordlists": "^5.7.0"
      }
    },
    "@ethersproject/web": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/web/-/web-5.7.0.tgz",
      "integrity": "sha512-ApHcbbj+muRASVDSCl/tgxaH2LBkRMEYfLOLVa0COipx0+nlu0QKet7U2lEg0vdkh8XRSLf2nd1f1Uk9SrVSGA==",
      "requires": {
        "@ethersproject/base64": "^5.7.0",
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "@ethersproject/strings": "^5.7.0"
      }
    },
    "@ethersproject/wordlists": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/@ethersproject/wordlists/-/wordlists-5.7.0.tgz",
      "integrity": "sha512-S2TFNJNfHWVHNE6cNDjbVlZ6MgE17MIxMbMg2zv3wn+3XSJGosL1m9ZVv3GXCf/2ymSsQ+hRI5IzoMJTG6aoVA==",
      "requires": {
        "@ethersproject/bytes": "^5.7.0",
        "@ethersproject/hash": "^5.7.0",
        "@ethersproject/logger": "^5.7.0",
        "@ethersproject/properties": "^5.7.0",
        "@ethersproject/strings": "^5.7.0"
      }
    },
    "@floating-ui/core": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/@floating-ui/core/-/core-0.3.1.tgz",
      "integrity": "sha512-ensKY7Ub59u16qsVIFEo2hwTCqZ/r9oZZFh51ivcLGHfUwTn8l1Xzng8RJUe91H/UP8PeqeBronAGx0qmzwk2g=="
    },
    "@floating-ui/dom": {
      "version": "0.1.10",
      "resolved": "https://registry.npmjs.org/@floating-ui/dom/-/dom-0.1.10.tgz",
      "integrity": "sha512-4kAVoogvQm2N0XE0G6APQJuCNuErjOfPW8Ux7DFxh8+AfugWflwVJ5LDlHOwrwut7z/30NUvdtHzQ3zSip4EzQ==",
      "requires": {
        "@floating-ui/core": "^0.3.0"
      }
    },
    "@headlessui/vue": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/@headlessui/vue/-/vue-1.7.0.tgz",
      "integrity": "sha512-ClrXMThmo9lrFjHdzDQXsopjCgRA28v+u5s/J+gIAgvS5l3tTAI84GaVghFwxobijL9c6BsVgDQ7SrJ2dS1nLw==",
      "dev": true,
      "requires": {}
    },
    "@heroicons/vue": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/@heroicons/vue/-/vue-1.0.6.tgz",
      "integrity": "sha512-ng2YcCQrdoQWEFpw+ipFl2rZo8mZ56v0T5+MyfQQvNqfKChwgP6DMloZLW+rl17GEcHkE3H82UTAMKBKZr4+WA==",
      "dev": true,
      "requires": {}
    },
    "@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "dev": true,
      "requires": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      }
    },
    "@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "dev": true
    },
    "@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "dev": true,
      "requires": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      }
    },
    "@popperjs/core": {
      "version": "2.11.6",
      "resolved": "https://registry.npmjs.org/@popperjs/core/-/core-2.11.6.tgz",
      "integrity": "sha512-50/17A98tWUfQ176raKiOGXuYpLyyVMkxxG6oylzL3BPOlA6ADGdK7EYunSa4I064xerltq9TGXs8HmOk5E+vw==",
      "dev": true
    },
    "@rollup/pluginutils": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/@rollup/pluginutils/-/pluginutils-4.2.1.tgz",
      "integrity": "sha512-iKnFXr7NkdZAIHiIWE+BX5ULi/ucVFYWD6TbAV+rZctiRTY2PL6tsIKhoIOaoskiWAkgu+VsbXgUVDNLHf+InQ==",
      "dev": true,
      "requires": {
        "estree-walker": "^2.0.1",
        "picomatch": "^2.2.2"
      }
    },
    "@tailwindcss/aspect-ratio": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/@tailwindcss/aspect-ratio/-/aspect-ratio-0.4.0.tgz",
      "integrity": "sha512-WJu0I4PpqNPuutpaA9zDUq2JXR+lorZ7PbLcKNLmb6GL9/HLfC7w3CRsMhJF4BbYd/lkY6CfXOvkYpuGnZfkpQ==",
      "dev": true,
      "requires": {}
    },
    "@tailwindcss/forms": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/@tailwindcss/forms/-/forms-0.5.2.tgz",
      "integrity": "sha512-pSrFeJB6Bg1Mrg9CdQW3+hqZXAKsBrSG9MAfFLKy1pVA4Mb4W7C0k7mEhlmS2Dfo/otxrQOET7NJiJ9RrS563w==",
      "dev": true,
      "requires": {
        "mini-svg-data-uri": "^1.2.3"
      }
    },
    "@tailwindcss/line-clamp": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/@tailwindcss/line-clamp/-/line-clamp-0.4.0.tgz",
      "integrity": "sha512-HQZo6gfx1D0+DU3nWlNLD5iA6Ef4JAXh0LeD8lOGrJwEDBwwJNKQza6WoXhhY1uQrxOuU8ROxV7CqiQV4CoiLw==",
      "dev": true,
      "requires": {}
    },
    "@tailwindcss/typography": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/@tailwindcss/typography/-/typography-0.5.4.tgz",
      "integrity": "sha512-QEdg40EmGvE7kKoDei8zr5sf4D1pIayHj4R31bH3lX8x2BtTiR+jNejYPOkhbmy3DXgkMF9jC8xqNiGFAuL9Sg==",
      "dev": true,
      "requires": {
        "lodash.castarray": "^4.4.0",
        "lodash.isplainobject": "^4.0.6",
        "lodash.merge": "^4.6.2"
      }
    },
    "@vitejs/plugin-vue": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-vue/-/plugin-vue-3.0.3.tgz",
      "integrity": "sha512-U4zNBlz9mg+TA+i+5QPc3N5lQvdUXENZLO2h0Wdzp56gI1MWhqJOv+6R+d4kOzoaSSq6TnGPBdZAXKOe4lXy6g==",
      "dev": true,
      "requires": {}
    },
    "@volar/code-gen": {
      "version": "0.40.1",
      "resolved": "https://registry.npmjs.org/@volar/code-gen/-/code-gen-0.40.1.tgz",
      "integrity": "sha512-mN1jn08wRKLoUj+KThltyWfsiEGt6Um1yT6S7bkruwV76yiLlzIR4WZgWng254byGMozJ00qgkZmBhraD5b48A==",
      "dev": true,
      "requires": {
        "@volar/source-map": "0.40.1"
      }
    },
    "@volar/source-map": {
      "version": "0.40.1",
      "resolved": "https://registry.npmjs.org/@volar/source-map/-/source-map-0.40.1.tgz",
      "integrity": "sha512-ORYg5W+R4iT2k/k2U4ASkKvDxabIzKtP+lXZ1CcqFIbTF81GOooAv5tJZImf8ifhUV9p8bgGaitFj/VnNzkdYg==",
      "dev": true
    },
    "@volar/typescript-faster": {
      "version": "0.40.1",
      "resolved": "https://registry.npmjs.org/@volar/typescript-faster/-/typescript-faster-0.40.1.tgz",
      "integrity": "sha512-UiX8OzVRJtpudGfTY2KgB5m78DIA8oVbwI4QN5i4Ot8oURQPOviH7MahikHeeXidbh3iOy/u4vceMb+mfdizpQ==",
      "dev": true,
      "requires": {
        "semver": "^7.3.7"
      }
    },
    "@volar/vue-language-core": {
      "version": "0.40.1",
      "resolved": "https://registry.npmjs.org/@volar/vue-language-core/-/vue-language-core-0.40.1.tgz",
      "integrity": "sha512-RBU2nQkj+asKZ/ht3sU3hTau+dGuTjJrQS3nNSw4+vnwUJnN/WogO/MmgKdrvVf3pUdLiucIog1E/Us1C8Y5wg==",
      "dev": true,
      "requires": {
        "@volar/code-gen": "0.40.1",
        "@volar/source-map": "0.40.1",
        "@vue/compiler-core": "^3.2.37",
        "@vue/compiler-dom": "^3.2.37",
        "@vue/compiler-sfc": "^3.2.37",
        "@vue/reactivity": "^3.2.37",
        "@vue/shared": "^3.2.37"
      }
    },
    "@volar/vue-typescript": {
      "version": "0.40.1",
      "resolved": "https://registry.npmjs.org/@volar/vue-typescript/-/vue-typescript-0.40.1.tgz",
      "integrity": "sha512-58nW/Xwy7VBkeIPmbyEmi/j1Ta2HxGl/5aFiEEpWxoas7vI1AM+txz8+MhWho4ZMw0w0eCqPtGgugD2rr+/v7w==",
      "dev": true,
      "requires": {
        "@volar/code-gen": "0.40.1",
        "@volar/typescript-faster": "0.40.1",
        "@volar/vue-language-core": "0.40.1"
      }
    },
    "@vue/compiler-core": {
      "version": "3.2.37",
      "resolved": "https://registry.npmjs.org/@vue/compiler-core/-/compiler-core-3.2.37.tgz",
      "integrity": "sha512-81KhEjo7YAOh0vQJoSmAD68wLfYqJvoiD4ulyedzF+OEk/bk6/hx3fTNVfuzugIIaTrOx4PGx6pAiBRe5e9Zmg==",
      "requires": {
        "@babel/parser": "^7.16.4",
        "@vue/shared": "3.2.37",
        "estree-walker": "^2.0.2",
        "source-map": "^0.6.1"
      }
    },
    "@vue/compiler-dom": {
      "version": "3.2.37",
      "resolved": "https://registry.npmjs.org/@vue/compiler-dom/-/compiler-dom-3.2.37.tgz",
      "integrity": "sha512-yxJLH167fucHKxaqXpYk7x8z7mMEnXOw3G2q62FTkmsvNxu4FQSu5+3UMb+L7fjKa26DEzhrmCxAgFLLIzVfqQ==",
      "requires": {
        "@vue/compiler-core": "3.2.37",
        "@vue/shared": "3.2.37"
      }
    },
    "@vue/compiler-sfc": {
      "version": "3.2.37",
      "resolved": "https://registry.npmjs.org/@vue/compiler-sfc/-/compiler-sfc-3.2.37.tgz",
      "integrity": "sha512-+7i/2+9LYlpqDv+KTtWhOZH+pa8/HnX/905MdVmAcI/mPQOBwkHHIzrsEsucyOIZQYMkXUiTkmZq5am/NyXKkg==",
      "requires": {
        "@babel/parser": "^7.16.4",
        "@vue/compiler-core": "3.2.37",
        "@vue/compiler-dom": "3.2.37",
        "@vue/compiler-ssr": "3.2.37",
        "@vue/reactivity-transform": "3.2.37",
        "@vue/shared": "3.2.37",
        "estree-walker": "^2.0.2",
        "magic-string": "^0.25.7",
        "postcss": "^8.1.10",
        "source-map": "^0.6.1"
      }
    },
    "@vue/compiler-ssr": {
      "version": "3.2.37",
      "resolved": "https://registry.npmjs.org/@vue/compiler-ssr/-/compiler-ssr-3.2.37.tgz",
      "integrity": "sha512-7mQJD7HdXxQjktmsWp/J67lThEIcxLemz1Vb5I6rYJHR5vI+lON3nPGOH3ubmbvYGt8xEUaAr1j7/tIFWiEOqw==",
      "requires": {
        "@vue/compiler-dom": "3.2.37",
        "@vue/shared": "3.2.37"
      }
    },
    "@vue/devtools-api": {
      "version": "6.1.4",
      "resolved": "https://registry.npmjs.org/@vue/devtools-api/-/devtools-api-6.1.4.tgz",
      "integrity": "sha512-IiA0SvDrJEgXvVxjNkHPFfDx6SXw0b/TUkqMcDZWNg9fnCAHbTpoo59YfJ9QLFkwa3raau5vSlRVzMSLDnfdtQ=="
    },
    "@vue/reactivity": {
      "version": "3.2.37",
      "resolved": "https://registry.npmjs.org/@vue/reactivity/-/reactivity-3.2.37.tgz",
      "integrity": "sha512-/7WRafBOshOc6m3F7plwzPeCu/RCVv9uMpOwa/5PiY1Zz+WLVRWiy0MYKwmg19KBdGtFWsmZ4cD+LOdVPcs52A==",
      "requires": {
        "@vue/shared": "3.2.37"
      }
    },
    "@vue/reactivity-transform": {
      "version": "3.2.37",
      "resolved": "https://registry.npmjs.org/@vue/reactivity-transform/-/reactivity-transform-3.2.37.tgz",
      "integrity": "sha512-IWopkKEb+8qpu/1eMKVeXrK0NLw9HicGviJzhJDEyfxTR9e1WtpnnbYkJWurX6WwoFP0sz10xQg8yL8lgskAZg==",
      "requires": {
        "@babel/parser": "^7.16.4",
        "@vue/compiler-core": "3.2.37",
        "@vue/shared": "3.2.37",
        "estree-walker": "^2.0.2",
        "magic-string": "^0.25.7"
      }
    },
    "@vue/runtime-core": {
      "version": "3.2.37",
      "resolved": "https://registry.npmjs.org/@vue/runtime-core/-/runtime-core-3.2.37.tgz",
      "integrity": "sha512-JPcd9kFyEdXLl/i0ClS7lwgcs0QpUAWj+SKX2ZC3ANKi1U4DOtiEr6cRqFXsPwY5u1L9fAjkinIdB8Rz3FoYNQ==",
      "requires": {
        "@vue/reactivity": "3.2.37",
        "@vue/shared": "3.2.37"
      }
    },
    "@vue/runtime-dom": {
      "version": "3.2.37",
      "resolved": "https://registry.npmjs.org/@vue/runtime-dom/-/runtime-dom-3.2.37.tgz",
      "integrity": "sha512-HimKdh9BepShW6YozwRKAYjYQWg9mQn63RGEiSswMbW+ssIht1MILYlVGkAGGQbkhSh31PCdoUcfiu4apXJoPw==",
      "requires": {
        "@vue/runtime-core": "3.2.37",
        "@vue/shared": "3.2.37",
        "csstype": "^2.6.8"
      }
    },
    "@vue/server-renderer": {
      "version": "3.2.37",
      "resolved": "https://registry.npmjs.org/@vue/server-renderer/-/server-renderer-3.2.37.tgz",
      "integrity": "sha512-kLITEJvaYgZQ2h47hIzPh2K3jG8c1zCVbp/o/bzQOyvzaKiCquKS7AaioPI28GNxIsE/zSx+EwWYsNxDCX95MA==",
      "requires": {
        "@vue/compiler-ssr": "3.2.37",
        "@vue/shared": "3.2.37"
      }
    },
    "@vue/shared": {
      "version": "3.2.37",
      "resolved": "https://registry.npmjs.org/@vue/shared/-/shared-3.2.37.tgz",
      "integrity": "sha512-4rSJemR2NQIo9Klm1vabqWjD8rs/ZaJSzMxkMNeJS6lHiUjjUeYFbooN19NgFjztubEKh3WlZUeOLVdbbUWHsw=="
    },
    "@vue/tsconfig": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@vue/tsconfig/-/tsconfig-0.1.3.tgz",
      "integrity": "sha512-kQVsh8yyWPvHpb8gIc9l/HIDiiVUy1amynLNpCy8p+FoCiZXCo6fQos5/097MmnNZc9AtseDsCrfkhqCrJ8Olg==",
      "dev": true,
      "requires": {}
    },
    "@vueuse/head": {
      "version": "0.7.9",
      "resolved": "https://registry.npmjs.org/@vueuse/head/-/head-0.7.9.tgz",
      "integrity": "sha512-5wnRiH2XIUSLLXJDLDDTcpvAg5QXgTIVZl46AU7to/T91KHsdBLHSE4WhRO7kP0jbkAhlxnx64E29cQtwBrMjg==",
      "requires": {}
    },
    "acorn": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-7.4.1.tgz",
      "integrity": "sha512-nQyp0o1/mNdbTO1PO6kHkwSrmgZ0MT/jCCpNiwbUjGoRN4dlBhqJtoQuCnEOKzgTVwg0ZWiCoQy6SxMebQVh8A==",
      "dev": true
    },
    "acorn-node": {
      "version": "1.8.2",
      "resolved": "https://registry.npmjs.org/acorn-node/-/acorn-node-1.8.2.tgz",
      "integrity": "sha512-8mt+fslDufLYntIoPAaIMUe/lrbrehIiwmR3t2k9LljIzoigEPF27eLk2hy8zSGzmR/ogr7zbRKINMo1u0yh5A==",
      "dev": true,
      "requires": {
        "acorn": "^7.0.0",
        "acorn-walk": "^7.0.0",
        "xtend": "^4.0.2"
      }
    },
    "acorn-walk": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-7.2.0.tgz",
      "integrity": "sha512-OPdCF6GsMIP+Az+aWfAAOEt2/+iVDKE7oy6lJ098aoe59oAmK76qV6Gw60SbZ8jHuG2wH058GF4pLFbYamYrVA==",
      "dev": true
    },
    "aes-js": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/aes-js/-/aes-js-3.0.0.tgz",
      "integrity": "sha512-H7wUZRn8WpTq9jocdxQ2c8x2sKo9ZVmzfRE13GiNJXfp7NcKYEdvl3vspKjXox6RIG2VtaRe4JFvxG4rqp2Zuw=="
    },
    "anymatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.2.tgz",
      "integrity": "sha512-P43ePfOAIupkguHUycrc4qJ9kz8ZiuOUijaETwX7THt0Y/GNK7v0aa8rY816xWjZ7rJdA5XdMcpVFTKMq+RvWg==",
      "dev": true,
      "requires": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      }
    },
    "arg": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/arg/-/arg-5.0.2.tgz",
      "integrity": "sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==",
      "dev": true
    },
    "asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q=="
    },
    "autoprefixer": {
      "version": "10.4.8",
      "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.8.tgz",
      "integrity": "sha512-75Jr6Q/XpTqEf6D2ltS5uMewJIx5irCU1oBYJrWjFenq/m12WRRrz6g15L1EIoYvPLXTbEry7rDOwrcYNj77xw==",
      "dev": true,
      "requires": {
        "browserslist": "^4.21.3",
        "caniuse-lite": "^1.0.30001373",
        "fraction.js": "^4.2.0",
        "normalize-range": "^0.1.2",
        "picocolors": "^1.0.0",
        "postcss-value-parser": "^4.2.0"
      }
    },
    "axios": {
      "version": "0.27.2",
      "resolved": "https://registry.npmjs.org/axios/-/axios-0.27.2.tgz",
      "integrity": "sha512-t+yRIyySRTp/wua5xEr+z1q60QmLq8ABsS5O9Me1AsE5dfKqgnCFzwiCZZ/cGNd1lq4/7akDWMxdhVlucjmnOQ==",
      "requires": {
        "follow-redirects": "^1.14.9",
        "form-data": "^4.0.0"
      }
    },
    "balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true
    },
    "bech32": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/bech32/-/bech32-1.1.4.tgz",
      "integrity": "sha512-s0IrSOzLlbvX7yp4WBfPITzpAU8sqQcpsmwXDiKwrG4r491vwCO/XpejasRNl0piBMe/DvP4Tz0mIS/X1DPJBQ=="
    },
    "binary-extensions": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
      "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
      "dev": true
    },
    "bn.js": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.1.tgz",
      "integrity": "sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ=="
    },
    "brace-expansion": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
      "dev": true,
      "requires": {
        "balanced-match": "^1.0.0"
      }
    },
    "braces": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
      "dev": true,
      "requires": {
        "fill-range": "^7.0.1"
      }
    },
    "brorand": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/brorand/-/brorand-1.1.0.tgz",
      "integrity": "sha512-cKV8tMCEpQs4hK/ik71d6LrPOnpkpGBR0wzxqr68g2m/LB2GxVYQroAjMJZRVM1Y4BCjCKc3vAamxSzOY2RP+w=="
    },
    "browserslist": {
      "version": "4.21.3",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.21.3.tgz",
      "integrity": "sha512-898rgRXLAyRkM1GryrrBHGkqA5hlpkV5MhtZwg9QXeiyLUYs2k00Un05aX5l2/yJIOObYKOpS2JNo8nJDE7fWQ==",
      "dev": true,
      "requires": {
        "caniuse-lite": "^1.0.30001370",
        "electron-to-chromium": "^1.4.202",
        "node-releases": "^2.0.6",
        "update-browserslist-db": "^1.0.5"
      }
    },
    "camelcase-css": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/camelcase-css/-/camelcase-css-2.0.1.tgz",
      "integrity": "sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==",
      "dev": true
    },
    "caniuse-lite": {
      "version": "1.0.30001374",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001374.tgz",
      "integrity": "sha512-mWvzatRx3w+j5wx/mpFN5v5twlPrabG8NqX2c6e45LCpymdoGqNvRkRutFUqpRTXKFQFNQJasvK0YT7suW6/Hw==",
      "dev": true
    },
    "chokidar": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
      "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
      "dev": true,
      "requires": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "fsevents": "~2.3.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "dependencies": {
        "glob-parent": {
          "version": "5.1.2",
          "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
          "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
          "dev": true,
          "requires": {
            "is-glob": "^4.0.1"
          }
        }
      }
    },
    "color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true
    },
    "combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "requires": {
        "delayed-stream": "~1.0.0"
      }
    },
    "cssesc": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
      "integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
      "dev": true
    },
    "csstype": {
      "version": "2.6.20",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-2.6.20.tgz",
      "integrity": "sha512-/WwNkdXfckNgw6S5R125rrW8ez139lBHWouiBvX8dfMFtcn6V81REDqnH7+CRpRipfYlyU1CmOnOxrmGcFOjeA=="
    },
    "dayjs": {
      "version": "1.11.5",
      "resolved": "https://registry.npmjs.org/dayjs/-/dayjs-1.11.5.tgz",
      "integrity": "sha512-CAdX5Q3YW3Gclyo5Vpqkgpj8fSdLQcRuzfX6mC6Phy0nfJ0eGYOeS7m4mt2plDWLAtA4TqTakvbboHvUxfe4iA=="
    },
    "debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dev": true,
      "requires": {
        "ms": "2.1.2"
      }
    },
    "defined": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/defined/-/defined-1.0.0.tgz",
      "integrity": "sha512-Y2caI5+ZwS5c3RiNDJ6u53VhQHv+hHKwhkI1iHvceKUHw9Df6EK2zRLfjejRgMuCuxK7PfSWIMwWecceVvThjQ==",
      "dev": true
    },
    "delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ=="
    },
    "detective": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/detective/-/detective-5.2.1.tgz",
      "integrity": "sha512-v9XE1zRnz1wRtgurGu0Bs8uHKFSTdteYZNbIPFVhUZ39L/S79ppMpdmVOZAnoz1jfEFodc48n6MX483Xo3t1yw==",
      "dev": true,
      "requires": {
        "acorn-node": "^1.8.2",
        "defined": "^1.0.0",
        "minimist": "^1.2.6"
      }
    },
    "didyoumean": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/didyoumean/-/didyoumean-1.2.2.tgz",
      "integrity": "sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==",
      "dev": true
    },
    "dlv": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/dlv/-/dlv-1.1.3.tgz",
      "integrity": "sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==",
      "dev": true
    },
    "electron-to-chromium": {
      "version": "1.4.211",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.4.211.tgz",
      "integrity": "sha512-BZSbMpyFQU0KBJ1JG26XGeFI3i4op+qOYGxftmZXFZoHkhLgsSv4DHDJfl8ogII3hIuzGt51PaZ195OVu0yJ9A==",
      "dev": true
    },
    "elliptic": {
      "version": "6.5.4",
      "resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.5.4.tgz",
      "integrity": "sha512-iLhC6ULemrljPZb+QutR5TQGB+pdW6KGD5RSegS+8sorOZT+rdQFbsQFJgvN3eRqNALqJer4oQ16YvJHlU8hzQ==",
      "requires": {
        "bn.js": "^4.11.9",
        "brorand": "^1.1.0",
        "hash.js": "^1.0.0",
        "hmac-drbg": "^1.0.1",
        "inherits": "^2.0.4",
        "minimalistic-assert": "^1.0.1",
        "minimalistic-crypto-utils": "^1.0.1"
      },
      "dependencies": {
        "bn.js": {
          "version": "4.12.0",
          "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-4.12.0.tgz",
          "integrity": "sha512-c98Bf3tPniI+scsdk237ku1Dc3ujXQTSgyiPUDEOe7tRkhrqridvh8klBv0HCEso1OLOYcHuCv/cS6DNxKH+ZA=="
        }
      }
    },
    "esbuild": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.14.49.tgz",
      "integrity": "sha512-/TlVHhOaq7Yz8N1OJrjqM3Auzo5wjvHFLk+T8pIue+fhnhIMpfAzsG6PLVMbFveVxqD2WOp3QHei+52IMUNmCw==",
      "dev": true,
      "requires": {
        "esbuild-android-64": "0.14.49",
        "esbuild-android-arm64": "0.14.49",
        "esbuild-darwin-64": "0.14.49",
        "esbuild-darwin-arm64": "0.14.49",
        "esbuild-freebsd-64": "0.14.49",
        "esbuild-freebsd-arm64": "0.14.49",
        "esbuild-linux-32": "0.14.49",
        "esbuild-linux-64": "0.14.49",
        "esbuild-linux-arm": "0.14.49",
        "esbuild-linux-arm64": "0.14.49",
        "esbuild-linux-mips64le": "0.14.49",
        "esbuild-linux-ppc64le": "0.14.49",
        "esbuild-linux-riscv64": "0.14.49",
        "esbuild-linux-s390x": "0.14.49",
        "esbuild-netbsd-64": "0.14.49",
        "esbuild-openbsd-64": "0.14.49",
        "esbuild-sunos-64": "0.14.49",
        "esbuild-windows-32": "0.14.49",
        "esbuild-windows-64": "0.14.49",
        "esbuild-windows-arm64": "0.14.49"
      }
    },
    "esbuild-android-64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-android-64/-/esbuild-android-64-0.14.49.tgz",
      "integrity": "sha512-vYsdOTD+yi+kquhBiFWl3tyxnj2qZJsl4tAqwhT90ktUdnyTizgle7TjNx6Ar1bN7wcwWqZ9QInfdk2WVagSww==",
      "dev": true,
      "optional": true
    },
    "esbuild-android-arm64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-android-arm64/-/esbuild-android-arm64-0.14.49.tgz",
      "integrity": "sha512-g2HGr/hjOXCgSsvQZ1nK4nW/ei8JUx04Li74qub9qWrStlysaVmadRyTVuW32FGIpLQyc5sUjjZopj49eGGM2g==",
      "dev": true,
      "optional": true
    },
    "esbuild-darwin-64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-darwin-64/-/esbuild-darwin-64-0.14.49.tgz",
      "integrity": "sha512-3rvqnBCtX9ywso5fCHixt2GBCUsogNp9DjGmvbBohh31Ces34BVzFltMSxJpacNki96+WIcX5s/vum+ckXiLYg==",
      "dev": true,
      "optional": true
    },
    "esbuild-darwin-arm64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-darwin-arm64/-/esbuild-darwin-arm64-0.14.49.tgz",
      "integrity": "sha512-XMaqDxO846srnGlUSJnwbijV29MTKUATmOLyQSfswbK/2X5Uv28M9tTLUJcKKxzoo9lnkYPsx2o8EJcTYwCs/A==",
      "dev": true,
      "optional": true
    },
    "esbuild-freebsd-64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-freebsd-64/-/esbuild-freebsd-64-0.14.49.tgz",
      "integrity": "sha512-NJ5Q6AjV879mOHFri+5lZLTp5XsO2hQ+KSJYLbfY9DgCu8s6/Zl2prWXVANYTeCDLlrIlNNYw8y34xqyLDKOmQ==",
      "dev": true,
      "optional": true
    },
    "esbuild-freebsd-arm64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-freebsd-arm64/-/esbuild-freebsd-arm64-0.14.49.tgz",
      "integrity": "sha512-lFLtgXnAc3eXYqj5koPlBZvEbBSOSUbWO3gyY/0+4lBdRqELyz4bAuamHvmvHW5swJYL7kngzIZw6kdu25KGOA==",
      "dev": true,
      "optional": true
    },
    "esbuild-linux-32": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-linux-32/-/esbuild-linux-32-0.14.49.tgz",
      "integrity": "sha512-zTTH4gr2Kb8u4QcOpTDVn7Z8q7QEIvFl/+vHrI3cF6XOJS7iEI1FWslTo3uofB2+mn6sIJEQD9PrNZKoAAMDiA==",
      "dev": true,
      "optional": true
    },
    "esbuild-linux-64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-linux-64/-/esbuild-linux-64-0.14.49.tgz",
      "integrity": "sha512-hYmzRIDzFfLrB5c1SknkxzM8LdEUOusp6M2TnuQZJLRtxTgyPnZZVtyMeCLki0wKgYPXkFsAVhi8vzo2mBNeTg==",
      "dev": true,
      "optional": true
    },
    "esbuild-linux-arm": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-linux-arm/-/esbuild-linux-arm-0.14.49.tgz",
      "integrity": "sha512-iE3e+ZVv1Qz1Sy0gifIsarJMQ89Rpm9mtLSRtG3AH0FPgAzQ5Z5oU6vYzhc/3gSPi2UxdCOfRhw2onXuFw/0lg==",
      "dev": true,
      "optional": true
    },
    "esbuild-linux-arm64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-linux-arm64/-/esbuild-linux-arm64-0.14.49.tgz",
      "integrity": "sha512-KLQ+WpeuY+7bxukxLz5VgkAAVQxUv67Ft4DmHIPIW+2w3ObBPQhqNoeQUHxopoW/aiOn3m99NSmSV+bs4BSsdA==",
      "dev": true,
      "optional": true
    },
    "esbuild-linux-mips64le": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-linux-mips64le/-/esbuild-linux-mips64le-0.14.49.tgz",
      "integrity": "sha512-n+rGODfm8RSum5pFIqFQVQpYBw+AztL8s6o9kfx7tjfK0yIGF6tm5HlG6aRjodiiKkH2xAiIM+U4xtQVZYU4rA==",
      "dev": true,
      "optional": true
    },
    "esbuild-linux-ppc64le": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-linux-ppc64le/-/esbuild-linux-ppc64le-0.14.49.tgz",
      "integrity": "sha512-WP9zR4HX6iCBmMFH+XHHng2LmdoIeUmBpL4aL2TR8ruzXyT4dWrJ5BSbT8iNo6THN8lod6GOmYDLq/dgZLalGw==",
      "dev": true,
      "optional": true
    },
    "esbuild-linux-riscv64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-linux-riscv64/-/esbuild-linux-riscv64-0.14.49.tgz",
      "integrity": "sha512-h66ORBz+Dg+1KgLvzTVQEA1LX4XBd1SK0Fgbhhw4akpG/YkN8pS6OzYI/7SGENiN6ao5hETRDSkVcvU9NRtkMQ==",
      "dev": true,
      "optional": true
    },
    "esbuild-linux-s390x": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-linux-s390x/-/esbuild-linux-s390x-0.14.49.tgz",
      "integrity": "sha512-DhrUoFVWD+XmKO1y7e4kNCqQHPs6twz6VV6Uezl/XHYGzM60rBewBF5jlZjG0nCk5W/Xy6y1xWeopkrhFFM0sQ==",
      "dev": true,
      "optional": true
    },
    "esbuild-netbsd-64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-netbsd-64/-/esbuild-netbsd-64-0.14.49.tgz",
      "integrity": "sha512-BXaUwFOfCy2T+hABtiPUIpWjAeWK9P8O41gR4Pg73hpzoygVGnj0nI3YK4SJhe52ELgtdgWP/ckIkbn2XaTxjQ==",
      "dev": true,
      "optional": true
    },
    "esbuild-openbsd-64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-openbsd-64/-/esbuild-openbsd-64-0.14.49.tgz",
      "integrity": "sha512-lP06UQeLDGmVPw9Rg437Btu6J9/BmyhdoefnQ4gDEJTtJvKtQaUcOQrhjTq455ouZN4EHFH1h28WOJVANK41kA==",
      "dev": true,
      "optional": true
    },
    "esbuild-sunos-64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-sunos-64/-/esbuild-sunos-64-0.14.49.tgz",
      "integrity": "sha512-4c8Zowp+V3zIWje329BeLbGh6XI9c/rqARNaj5yPHdC61pHI9UNdDxT3rePPJeWcEZVKjkiAS6AP6kiITp7FSw==",
      "dev": true,
      "optional": true
    },
    "esbuild-windows-32": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-windows-32/-/esbuild-windows-32-0.14.49.tgz",
      "integrity": "sha512-q7Rb+J9yHTeKr9QTPDYkqfkEj8/kcKz9lOabDuvEXpXuIcosWCJgo5Z7h/L4r7rbtTH4a8U2FGKb6s1eeOHmJA==",
      "dev": true,
      "optional": true
    },
    "esbuild-windows-64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-windows-64/-/esbuild-windows-64-0.14.49.tgz",
      "integrity": "sha512-+Cme7Ongv0UIUTniPqfTX6mJ8Deo7VXw9xN0yJEN1lQMHDppTNmKwAM3oGbD/Vqff+07K2gN0WfNkMohmG+dVw==",
      "dev": true,
      "optional": true
    },
    "esbuild-windows-arm64": {
      "version": "0.14.49",
      "resolved": "https://registry.npmjs.org/esbuild-windows-arm64/-/esbuild-windows-arm64-0.14.49.tgz",
      "integrity": "sha512-v+HYNAXzuANrCbbLFJ5nmO3m5y2PGZWLe3uloAkLt87aXiO2mZr3BTmacZdjwNkNEHuH3bNtN8cak+mzVjVPfA==",
      "dev": true,
      "optional": true
    },
    "escalade": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "dev": true
    },
    "escape-string-regexp": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-5.0.0.tgz",
      "integrity": "sha512-/veY75JbMK4j1yjvuUxuVsiS/hr/4iHs9FTT6cgTexxdE0Ly/glccBAkloH/DofkjRbZU3bnoj38mOmhkZ0lHw==",
      "dev": true
    },
    "estree-walker": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-2.0.2.tgz",
      "integrity": "sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w=="
    },
    "ethers": {
      "version": "5.7.0",
      "resolved": "https://registry.npmjs.org/ethers/-/ethers-5.7.0.tgz",
      "integrity": "sha512-5Xhzp2ZQRi0Em+0OkOcRHxPzCfoBfgtOQA+RUylSkuHbhTEaQklnYi2hsWbRgs3ztJsXVXd9VKBcO1ScWL8YfA==",
      "requires": {
        "@ethersproject/abi": "5.7.0",
        "@ethersproject/abstract-provider": "5.7.0",
        "@ethersproject/abstract-signer": "5.7.0",
        "@ethersproject/address": "5.7.0",
        "@ethersproject/base64": "5.7.0",
        "@ethersproject/basex": "5.7.0",
        "@ethersproject/bignumber": "5.7.0",
        "@ethersproject/bytes": "5.7.0",
        "@ethersproject/constants": "5.7.0",
        "@ethersproject/contracts": "5.7.0",
        "@ethersproject/hash": "5.7.0",
        "@ethersproject/hdnode": "5.7.0",
        "@ethersproject/json-wallets": "5.7.0",
        "@ethersproject/keccak256": "5.7.0",
        "@ethersproject/logger": "5.7.0",
        "@ethersproject/networks": "5.7.0",
        "@ethersproject/pbkdf2": "5.7.0",
        "@ethersproject/properties": "5.7.0",
        "@ethersproject/providers": "5.7.0",
        "@ethersproject/random": "5.7.0",
        "@ethersproject/rlp": "5.7.0",
        "@ethersproject/sha2": "5.7.0",
        "@ethersproject/signing-key": "5.7.0",
        "@ethersproject/solidity": "5.7.0",
        "@ethersproject/strings": "5.7.0",
        "@ethersproject/transactions": "5.7.0",
        "@ethersproject/units": "5.7.0",
        "@ethersproject/wallet": "5.7.0",
        "@ethersproject/web": "5.7.0",
        "@ethersproject/wordlists": "5.7.0"
      }
    },
    "events": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/events/-/events-3.3.0.tgz",
      "integrity": "sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==",
      "dev": true
    },
    "fast-glob": {
      "version": "3.2.11",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.2.11.tgz",
      "integrity": "sha512-xrO3+1bxSo3ZVHAnqzyuewYT6aMFHRAd4Kcs92MAonjwQZLsK9d0SF1IyQ3k5PoirxTW0Oe/RqFgMQ6TcNE5Ew==",
      "dev": true,
      "requires": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.4"
      },
      "dependencies": {
        "glob-parent": {
          "version": "5.1.2",
          "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
          "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
          "dev": true,
          "requires": {
            "is-glob": "^4.0.1"
          }
        }
      }
    },
    "fastq": {
      "version": "1.13.0",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.13.0.tgz",
      "integrity": "sha512-YpkpUnK8od0o1hmeSc7UUs/eB/vIPWJYjKck2QKIzAf71Vm1AAQ3EbuZB3g2JIy+pg+ERD0vqI79KyZiB2e2Nw==",
      "dev": true,
      "requires": {
        "reusify": "^1.0.4"
      }
    },
    "fill-range": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
      "dev": true,
      "requires": {
        "to-regex-range": "^5.0.1"
      }
    },
    "floating-vue": {
      "version": "2.0.0-beta.19",
      "resolved": "https://registry.npmjs.org/floating-vue/-/floating-vue-2.0.0-beta.19.tgz",
      "integrity": "sha512-kWP0/JZM6Cwg959SUnVURDXFFKstGZIXDZJ5Ey77HNOvQete0rJnLntklCJzvLnwla8S3WiApH/EjupxS5ICBg==",
      "requires": {
        "@floating-ui/dom": "^0.1.10",
        "vue-resize": "^2.0.0-alpha.1"
      }
    },
    "follow-redirects": {
      "version": "1.15.1",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.1.tgz",
      "integrity": "sha512-yLAMQs+k0b2m7cVxpS1VKJVvoz7SS9Td1zss3XRwXj+ZDH00RJgnuLx7E44wx02kQLrdM3aOOy+FpzS7+8OizA=="
    },
    "form-data": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
      "requires": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      }
    },
    "fraction.js": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.2.0.tgz",
      "integrity": "sha512-MhLuK+2gUcnZe8ZHlaaINnQLl0xRIGRfcGk2yl8xoQAfHrSsL3rYu6FCmBdkdbhc9EPlwyGHewaRsvwRMJtAlA==",
      "dev": true
    },
    "fsevents": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
      "dev": true,
      "optional": true
    },
    "function-bind": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==",
      "dev": true
    },
    "glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "requires": {
        "is-glob": "^4.0.3"
      }
    },
    "has": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
      "dev": true,
      "requires": {
        "function-bind": "^1.1.1"
      }
    },
    "hash.js": {
      "version": "1.1.7",
      "resolved": "https://registry.npmjs.org/hash.js/-/hash.js-1.1.7.tgz",
      "integrity": "sha512-taOaskGt4z4SOANNseOviYDvjEJinIkRgmp7LbKP2YTTmVxWBl87s/uzK9r+44BclBSp2X7K1hqeNfz9JbBeXA==",
      "requires": {
        "inherits": "^2.0.3",
        "minimalistic-assert": "^1.0.1"
      }
    },
    "hmac-drbg": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/hmac-drbg/-/hmac-drbg-1.0.1.tgz",
      "integrity": "sha512-Tti3gMqLdZfhOQY1Mzf/AanLiqh1WTiJgEj26ZuYQ9fbkLomzGchCws4FyrSd4VkpBfiNhaE1On+lOz894jvXg==",
      "requires": {
        "hash.js": "^1.0.3",
        "minimalistic-assert": "^1.0.0",
        "minimalistic-crypto-utils": "^1.0.1"
      }
    },
    "inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "requires": {
        "binary-extensions": "^2.0.0"
      }
    },
    "is-core-module": {
      "version": "2.9.0",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.9.0.tgz",
      "integrity": "sha512-+5FPy5PnwmO3lvfMb0AsoPaBG+5KHUI0wYFXOtYPnVVVspTFUuMZNfNaNVRt3FZadstu2c8x23vykRW/NBoU6A==",
      "dev": true,
      "requires": {
        "has": "^1.0.3"
      }
    },
    "is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha1-qIwCU1eR8C7TfHahueqXc8gz+MI=",
      "dev": true
    },
    "is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "requires": {
        "is-extglob": "^2.1.1"
      }
    },
    "is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true
    },
    "js-sha3": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/js-sha3/-/js-sha3-0.8.0.tgz",
      "integrity": "sha512-gF1cRrHhIzNfToc802P800N8PpXS+evLLXfsVpowqmAFR9uwbi89WvXg2QspOmXL8QL86J4T1EpFu+yUkwJY3Q=="
    },
    "json5": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.1.tgz",
      "integrity": "sha512-1hqLFMSrGHRHxav9q9gNjJ5EXznIxGVO09xQRrwplcS8qs28pZ8s8hupZAmqDwZUmVZ2Qb2jnyPOWcDH8m8dlA==",
      "dev": true
    },
    "jsonc-parser": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-3.1.0.tgz",
      "integrity": "sha512-DRf0QjnNeCUds3xTjKlQQ3DpJD51GvDjJfnxUVWg6PZTo2otSm+slzNAxU/35hF8/oJIKoG9slq30JYOsF2azg==",
      "dev": true
    },
    "lilconfig": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-2.0.6.tgz",
      "integrity": "sha512-9JROoBW7pobfsx+Sq2JsASvCo6Pfo6WWoUW79HuB1BCoBXD4PLWJPqDF6fNj67pqBYTbAHkE57M1kS/+L1neOg==",
      "dev": true
    },
    "local-pkg": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/local-pkg/-/local-pkg-0.4.2.tgz",
      "integrity": "sha512-mlERgSPrbxU3BP4qBqAvvwlgW4MTg78iwJdGGnv7kibKjWcJksrG3t6LB5lXI93wXRDvG4NpUgJFmTG4T6rdrg==",
      "dev": true
    },
    "lodash.castarray": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/lodash.castarray/-/lodash.castarray-4.4.0.tgz",
      "integrity": "sha1-wCUTUV4wna3dTCTGDP3c9ZdtkRU=",
      "dev": true
    },
    "lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha1-fFJqUtibRcRcxpC4gWO+BJf1UMs=",
      "dev": true
    },
    "lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true
    },
    "lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "dev": true,
      "requires": {
        "yallist": "^4.0.0"
      }
    },
    "magic-string": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.25.9.tgz",
      "integrity": "sha512-RmF0AsMzgt25qzqqLc1+MbHmhdx0ojF2Fvs4XnOqz2ZOBXzzkEwc/dJQZCYHAn7v1jbVOjAZfK8msRn4BxO4VQ==",
      "requires": {
        "sourcemap-codec": "^1.4.8"
      }
    },
    "merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "dev": true
    },
    "micromatch": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.4.tgz",
      "integrity": "sha512-pRmzw/XUcwXGpD9aI9q/0XOwLNygjETJ8y0ao0wdqprrzDa4YnxLcz7fQRZr8voh8V10kGhABbNcHVk5wHgWwg==",
      "dev": true,
      "requires": {
        "braces": "^3.0.1",
        "picomatch": "^2.2.3"
      }
    },
    "mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg=="
    },
    "mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "requires": {
        "mime-db": "1.52.0"
      }
    },
    "mini-svg-data-uri": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/mini-svg-data-uri/-/mini-svg-data-uri-1.3.3.tgz",
      "integrity": "sha512-+fA2oRcR1dJI/7ITmeQJDrYWks0wodlOz0pAEhKYJ2IVc1z0AnwJUsKY2fzFmPAM3Jo9J0rBx8JAA9QQSJ5PuA==",
      "dev": true
    },
    "minimalistic-assert": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/minimalistic-assert/-/minimalistic-assert-1.0.1.tgz",
      "integrity": "sha512-UtJcAD4yEaGtjPezWuO9wC4nwUnVH/8/Im3yEHQP4b67cXlD/Qr9hdITCU1xDbSEXg2XKNaP8jsReV7vQd00/A=="
    },
    "minimalistic-crypto-utils": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/minimalistic-crypto-utils/-/minimalistic-crypto-utils-1.0.1.tgz",
      "integrity": "sha512-JIYlbt6g8i5jKfJ3xz7rF0LXmv2TkDxBLUkiBeZ7bAx4GnnNMr8xFpGnOxn6GhTEHx3SjRrZEoU+j04prX1ktg=="
    },
    "minimatch": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.0.tgz",
      "integrity": "sha512-9TPBGGak4nHfGZsPBohm9AWg6NoT7QTCehS3BIJABslyZbzxfV78QM2Y6+i741OPZIafFAaiiEMh5OyIrJPgtg==",
      "dev": true,
      "requires": {
        "brace-expansion": "^2.0.1"
      }
    },
    "minimist": {
      "version": "1.2.6",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.6.tgz",
      "integrity": "sha512-Jsjnk4bw3YJqYzbdyBiNsPWHPfO++UGG749Cxs6peCu5Xg4nrena6OVxOYxrQTqww0Jmwt+Ref8rggumkTLz9Q==",
      "dev": true
    },
    "mlly": {
      "version": "0.5.7",
      "resolved": "https://registry.npmjs.org/mlly/-/mlly-0.5.7.tgz",
      "integrity": "sha512-rz+n2i9862ymLH+UDlHpsuTVyCIAs+9WejS2De2VUlAKdpq8OJ9x/C2M7nNUMLEW1H+D6n0uZlpz8+tMGxCmyQ==",
      "dev": true,
      "requires": {
        "acorn": "^8.8.0",
        "pathe": "^0.3.3",
        "pkg-types": "^0.3.3"
      },
      "dependencies": {
        "acorn": {
          "version": "8.8.0",
          "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.8.0.tgz",
          "integrity": "sha512-QOxyigPVrpZ2GXT+PFyZTl6TtOFc5egxHIP9IlQ+RbupQuX4RkT/Bee4/kQuC02Xkzg84JcT7oLYtDIQxp+v7w==",
          "dev": true
        }
      }
    },
    "moment": {
      "version": "2.29.4",
      "resolved": "https://registry.npmjs.org/moment/-/moment-2.29.4.tgz",
      "integrity": "sha512-5LC9SOxjSc2HF6vO2CyuTDNivEdoz2IvyJJGj6X8DJ0eFyfszE0QiEd+iXmBvUP3WHxSjFH/vIsA0EN00cgr8w=="
    },
    "mosha-vue-toastify": {
      "version": "1.0.23",
      "resolved": "https://registry.npmjs.org/mosha-vue-toastify/-/mosha-vue-toastify-1.0.23.tgz",
      "integrity": "sha512-K9fij3e3H+E/Lj82ISrgmyKrtM5RNmtZC/KG/KH47+oZGmzAkN/Zuz39kBdT/Mp8OxaHuIWQntEUMP+HdmK1xA=="
    },
    "ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "dev": true
    },
    "nanoid": {
      "version": "3.3.4",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.4.tgz",
      "integrity": "sha512-MqBkQh/OHTS2egovRtLk45wEyNXwF+cokD+1YPf9u5VfJiRdAiRwB2froX5Co9Rh20xs4siNPm8naNotSD6RBw=="
    },
    "node-releases": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.6.tgz",
      "integrity": "sha512-PiVXnNuFm5+iYkLBNeq5211hvO38y63T0i2KKh2KnUs3RpzJ+JtODFjkD8yjLwnDkTYF1eKXheUwdssR+NRZdg==",
      "dev": true
    },
    "normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "dev": true
    },
    "normalize-range": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
      "integrity": "sha1-LRDAa9/TEuqXd2laTShDlFa3WUI=",
      "dev": true
    },
    "object-hash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
      "integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
      "dev": true
    },
    "pako": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/pako/-/pako-2.0.4.tgz",
      "integrity": "sha512-v8tweI900AUkZN6heMU/4Uy4cXRc2AYNRggVmTR+dEncawDJgCdLMximOVA2p4qO57WMynangsfGRb5WD6L1Bg==",
      "dev": true
    },
    "path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "dev": true
    },
    "pathe": {
      "version": "0.3.3",
      "resolved": "https://registry.npmjs.org/pathe/-/pathe-0.3.3.tgz",
      "integrity": "sha512-x3nrPvG0HDSDzUiJ0WqtzhN4MD+h5B+dFJ3/qyxVuARlr4Y3aJv8gri2cZzp9Z8sGs2a+aG9gNbKngh3gme57A==",
      "dev": true
    },
    "picocolors": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.0.tgz",
      "integrity": "sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ=="
    },
    "picomatch": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.0.tgz",
      "integrity": "sha512-lY1Q/PiJGC2zOv/z391WOTD+Z02bCgsFfvxoXXf6h7kv9o+WmsmzYqrAwY63sNgOxE4xEdq0WyUnXfKeBrSvYw==",
      "dev": true
    },
    "pify": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
      "integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
      "dev": true
    },
    "pkg-types": {
      "version": "0.3.3",
      "resolved": "https://registry.npmjs.org/pkg-types/-/pkg-types-0.3.3.tgz",
      "integrity": "sha512-6AJcCMnjUQPQv/Wk960w0TOmjhdjbeaQJoSKWRQv9N3rgkessCu6J0Ydsog/nw1MbpnxHuPzYbfOn2KmlZO1FA==",
      "dev": true,
      "requires": {
        "jsonc-parser": "^3.0.0",
        "mlly": "^0.5.3",
        "pathe": "^0.3.0"
      }
    },
    "postcss": {
      "version": "8.4.16",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.16.tgz",
      "integrity": "sha512-ipHE1XBvKzm5xI7hiHCZJCSugxvsdq2mPnsq5+UF+VHCjiBvtDrlxJfMBToWaP9D5XlgNmcFGqoHmUn0EYEaRQ==",
      "requires": {
        "nanoid": "^3.3.4",
        "picocolors": "^1.0.0",
        "source-map-js": "^1.0.2"
      }
    },
    "postcss-import": {
      "version": "14.1.0",
      "resolved": "https://registry.npmjs.org/postcss-import/-/postcss-import-14.1.0.tgz",
      "integrity": "sha512-flwI+Vgm4SElObFVPpTIT7SU7R3qk2L7PyduMcokiaVKuWv9d/U+Gm/QAd8NDLuykTWTkcrjOeD2Pp1rMeBTGw==",
      "dev": true,
      "requires": {
        "postcss-value-parser": "^4.0.0",
        "read-cache": "^1.0.0",
        "resolve": "^1.1.7"
      }
    },
    "postcss-js": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/postcss-js/-/postcss-js-4.0.0.tgz",
      "integrity": "sha512-77QESFBwgX4irogGVPgQ5s07vLvFqWr228qZY+w6lW599cRlK/HmnlivnnVUxkjHnCu4J16PDMHcH+e+2HbvTQ==",
      "dev": true,
      "requires": {
        "camelcase-css": "^2.0.1"
      }
    },
    "postcss-load-config": {
      "version": "3.1.4",
      "resolved": "https://registry.npmjs.org/postcss-load-config/-/postcss-load-config-3.1.4.tgz",
      "integrity": "sha512-6DiM4E7v4coTE4uzA8U//WhtPwyhiim3eyjEMFCnUpzbrkK9wJHgKDT2mR+HbtSrd/NubVaYTOpSpjUl8NQeRg==",
      "dev": true,
      "requires": {
        "lilconfig": "^2.0.5",
        "yaml": "^1.10.2"
      }
    },
    "postcss-nested": {
      "version": "5.0.6",
      "resolved": "https://registry.npmjs.org/postcss-nested/-/postcss-nested-5.0.6.tgz",
      "integrity": "sha512-rKqm2Fk0KbA8Vt3AdGN0FB9OBOMDVajMG6ZCf/GoHgdxUJ4sBFp0A/uMIRm+MJUdo33YXEtjqIz8u7DAp8B7DA==",
      "dev": true,
      "requires": {
        "postcss-selector-parser": "^6.0.6"
      }
    },
    "postcss-selector-parser": {
      "version": "6.0.10",
      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.0.10.tgz",
      "integrity": "sha512-IQ7TZdoaqbT+LCpShg46jnZVlhWD2w6iQYAcYXfHARZ7X1t/UGhhceQDs5X0cGqKvYlHNOuv7Oa1xmb0oQuA3w==",
      "dev": true,
      "requires": {
        "cssesc": "^3.0.0",
        "util-deprecate": "^1.0.2"
      }
    },
    "postcss-value-parser": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
      "dev": true
    },
    "prettier": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/prettier/-/prettier-2.5.1.tgz",
      "integrity": "sha512-vBZcPRUR5MZJwoyi3ZoyQlc1rXeEck8KgeC9AwwOn+exuxLxq5toTRDTSaVrXHxelDMHy9zlicw8u66yxoSUFg==",
      "dev": true,
      "peer": true
    },
    "prettier-plugin-tailwindcss": {
      "version": "0.1.13",
      "resolved": "https://registry.npmjs.org/prettier-plugin-tailwindcss/-/prettier-plugin-tailwindcss-0.1.13.tgz",
      "integrity": "sha512-/EKQURUrxLu66CMUg4+1LwGdxnz8of7IDvrSLqEtDqhLH61SAlNNUSr90UTvZaemujgl3OH/VHg+fyGltrNixw==",
      "dev": true,
      "requires": {}
    },
    "queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "dev": true
    },
    "quick-lru": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/quick-lru/-/quick-lru-5.1.1.tgz",
      "integrity": "sha512-WuyALRjWPDGtt/wzJiadO5AXY+8hZ80hVpe6MyivgraREW751X3SbhRvG3eLKOYN+8VEvqLcf3wdnt44Z4S4SA==",
      "dev": true
    },
    "read-cache": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/read-cache/-/read-cache-1.0.0.tgz",
      "integrity": "sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==",
      "dev": true,
      "requires": {
        "pify": "^2.3.0"
      }
    },
    "readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "requires": {
        "picomatch": "^2.2.1"
      }
    },
    "resolve": {
      "version": "1.22.1",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.1.tgz",
      "integrity": "sha512-nBpuuYuY5jFsli/JIs1oldw6fOQCBioohqWZg/2hiaOybXOft4lonv85uDOKXdf8rhyK159cxU5cDcK/NKk8zw==",
      "dev": true,
      "requires": {
        "is-core-module": "^2.9.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      }
    },
    "reusify": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
      "integrity": "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==",
      "dev": true
    },
    "rollup": {
      "version": "2.76.0",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-2.76.0.tgz",
      "integrity": "sha512-9jwRIEY1jOzKLj3nsY/yot41r19ITdQrhs+q3ggNWhr9TQgduHqANvPpS32RNpzGklJu3G1AJfvlZLi/6wFgWA==",
      "dev": true,
      "requires": {
        "fsevents": "~2.3.2"
      }
    },
    "run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "dev": true,
      "requires": {
        "queue-microtask": "^1.2.2"
      }
    },
    "scrypt-js": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/scrypt-js/-/scrypt-js-3.0.1.tgz",
      "integrity": "sha512-cdwTTnqPu0Hyvf5in5asVdZocVDTNRmR7XEcJuIzMjJeSHybHl7vpB66AzwTaIg6CLSbtjcxc8fqcySfnTkccA=="
    },
    "scule": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/scule/-/scule-0.3.2.tgz",
      "integrity": "sha512-zIvPdjOH8fv8CgrPT5eqtxHQXmPNnV/vHJYffZhE43KZkvULvpCTvOt1HPlFaCZx287INL9qaqrZg34e8NgI4g==",
      "dev": true
    },
    "semver": {
      "version": "7.3.7",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.7.tgz",
      "integrity": "sha512-QlYTucUYOews+WeEujDoEGziz4K6c47V/Bd+LjSSYcA94p+DmINdf7ncaUinThfvZyu13lN9OY1XDxt8C0Tw0g==",
      "dev": true,
      "requires": {
        "lru-cache": "^6.0.0"
      }
    },
    "source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g=="
    },
    "source-map-js": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.0.2.tgz",
      "integrity": "sha512-R0XvVJ9WusLiqTCEiGCmICCMplcCkIwwR11mOSD9CR5u+IXYdiseeEuXCVAjS54zqwkLcPNnmU4OeJ6tUrWhDw=="
    },
    "sourcemap-codec": {
      "version": "1.4.8",
      "resolved": "https://registry.npmjs.org/sourcemap-codec/-/sourcemap-codec-1.4.8.tgz",
      "integrity": "sha512-9NykojV5Uih4lgo5So5dtw+f0JgJX30KCNI8gwhz2J9A15wD0Ml6tjHKwf6fTSa6fAdVBdZeNOs9eJ71qCk8vA=="
    },
    "strip-literal": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/strip-literal/-/strip-literal-0.4.0.tgz",
      "integrity": "sha512-ql/sBDoJOybTKSIOWrrh8kgUEMjXMwRAkZTD0EwiwxQH/6tTPkZvMIEjp0CRlpi6V5FMiJyvxeRkEi1KrGISoA==",
      "dev": true,
      "requires": {
        "acorn": "^8.7.1"
      },
      "dependencies": {
        "acorn": {
          "version": "8.8.0",
          "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.8.0.tgz",
          "integrity": "sha512-QOxyigPVrpZ2GXT+PFyZTl6TtOFc5egxHIP9IlQ+RbupQuX4RkT/Bee4/kQuC02Xkzg84JcT7oLYtDIQxp+v7w==",
          "dev": true
        }
      }
    },
    "supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "dev": true
    },
    "tailwindcss": {
      "version": "3.1.8",
      "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-3.1.8.tgz",
      "integrity": "sha512-YSneUCZSFDYMwk+TGq8qYFdCA3yfBRdBlS7txSq0LUmzyeqRe3a8fBQzbz9M3WS/iFT4BNf/nmw9mEzrnSaC0g==",
      "dev": true,
      "requires": {
        "arg": "^5.0.2",
        "chokidar": "^3.5.3",
        "color-name": "^1.1.4",
        "detective": "^5.2.1",
        "didyoumean": "^1.2.2",
        "dlv": "^1.1.3",
        "fast-glob": "^3.2.11",
        "glob-parent": "^6.0.2",
        "is-glob": "^4.0.3",
        "lilconfig": "^2.0.6",
        "normalize-path": "^3.0.0",
        "object-hash": "^3.0.0",
        "picocolors": "^1.0.0",
        "postcss": "^8.4.14",
        "postcss-import": "^14.1.0",
        "postcss-js": "^4.0.0",
        "postcss-load-config": "^3.1.4",
        "postcss-nested": "5.0.6",
        "postcss-selector-parser": "^6.0.10",
        "postcss-value-parser": "^4.2.0",
        "quick-lru": "^5.1.1",
        "resolve": "^1.22.1"
      }
    },
    "to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "requires": {
        "is-number": "^7.0.0"
      }
    },
    "tradingview-api": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/tradingview-api/-/tradingview-api-1.0.2.tgz",
      "integrity": "sha512-a0R1kUtiggX8r/SlLDs5dC+NSmZSRZlOYUDMgzVkMbyrFqQrZS4jYSTUkd0Q1QiwnFdAuf0DgGE8dJV3wkBYmA=="
    },
    "typescript": {
      "version": "4.7.4",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-4.7.4.tgz",
      "integrity": "sha512-C0WQT0gezHuw6AdY1M2jxUO83Rjf0HP7Sk1DtXj6j1EwkQNZrHAg2XPWlq62oqEhYvONq5pkC2Y9oPljWToLmQ==",
      "dev": true
    },
    "unimport": {
      "version": "0.6.5",
      "resolved": "https://registry.npmjs.org/unimport/-/unimport-0.6.5.tgz",
      "integrity": "sha512-B8x6+GiYUzDphN6Iaoshu99mUo8n7QCq13QTY2Z8saj1QBmGKXf+vJJlptfL3MdOmzxpve2Ikx91UZ4Qoz4dVQ==",
      "dev": true,
      "requires": {
        "@rollup/pluginutils": "^4.2.1",
        "escape-string-regexp": "^5.0.0",
        "fast-glob": "^3.2.11",
        "local-pkg": "^0.4.2",
        "magic-string": "^0.26.2",
        "mlly": "^0.5.7",
        "pathe": "^0.3.3",
        "scule": "^0.3.2",
        "strip-literal": "^0.4.0",
        "unplugin": "^0.8.1"
      },
      "dependencies": {
        "acorn": {
          "version": "8.8.0",
          "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.8.0.tgz",
          "integrity": "sha512-QOxyigPVrpZ2GXT+PFyZTl6TtOFc5egxHIP9IlQ+RbupQuX4RkT/Bee4/kQuC02Xkzg84JcT7oLYtDIQxp+v7w==",
          "dev": true
        },
        "magic-string": {
          "version": "0.26.2",
          "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.26.2.tgz",
          "integrity": "sha512-NzzlXpclt5zAbmo6h6jNc8zl2gNRGHvmsZW4IvZhTC4W7k4OlLP+S5YLussa/r3ixNT66KOQfNORlXHSOy/X4A==",
          "dev": true,
          "requires": {
            "sourcemap-codec": "^1.4.8"
          }
        },
        "unplugin": {
          "version": "0.8.1",
          "resolved": "https://registry.npmjs.org/unplugin/-/unplugin-0.8.1.tgz",
          "integrity": "sha512-o7rUZoPLG1fH4LKinWgb77gDtTE6mw/iry0Pq0Z5UPvZ9+HZ1/4+7fic7t58s8/CGkPrDpGq+RltO+DmswcR4g==",
          "dev": true,
          "requires": {
            "acorn": "^8.8.0",
            "chokidar": "^3.5.3",
            "webpack-sources": "^3.2.3",
            "webpack-virtual-modules": "^0.4.4"
          }
        }
      }
    },
    "unplugin": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/unplugin/-/unplugin-0.9.0.tgz",
      "integrity": "sha512-6o7q8Y9yxdPi5yCPmRuFfeNnVzGumRNZSK6hIkvZ6hd0cfigVdm0qBx/GgQ/NEjs54eUV1qTjvMYKRs9yh3rzw==",
      "dev": true,
      "requires": {
        "acorn": "^8.8.0",
        "chokidar": "^3.5.3",
        "webpack-sources": "^3.2.3",
        "webpack-virtual-modules": "^0.4.4"
      },
      "dependencies": {
        "acorn": {
          "version": "8.8.0",
          "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.8.0.tgz",
          "integrity": "sha512-QOxyigPVrpZ2GXT+PFyZTl6TtOFc5egxHIP9IlQ+RbupQuX4RkT/Bee4/kQuC02Xkzg84JcT7oLYtDIQxp+v7w==",
          "dev": true
        }
      }
    },
    "unplugin-auto-import": {
      "version": "0.11.1",
      "resolved": "https://registry.npmjs.org/unplugin-auto-import/-/unplugin-auto-import-0.11.1.tgz",
      "integrity": "sha512-3KMbjc3Sv2h1osgQ16uKmD2XHb8MLK3Lj5Twzo3x2vDexYdNKjVljLZUX+eT5cvh2f1VzJR77dkzDhdEi9+1uw==",
      "dev": true,
      "requires": {
        "@antfu/utils": "^0.5.2",
        "@rollup/pluginutils": "^4.2.1",
        "local-pkg": "^0.4.2",
        "magic-string": "^0.26.2",
        "unimport": "^0.6.5",
        "unplugin": "^0.9.0"
      },
      "dependencies": {
        "magic-string": {
          "version": "0.26.2",
          "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.26.2.tgz",
          "integrity": "sha512-NzzlXpclt5zAbmo6h6jNc8zl2gNRGHvmsZW4IvZhTC4W7k4OlLP+S5YLussa/r3ixNT66KOQfNORlXHSOy/X4A==",
          "dev": true,
          "requires": {
            "sourcemap-codec": "^1.4.8"
          }
        }
      }
    },
    "unplugin-vue-components": {
      "version": "0.22.4",
      "resolved": "https://registry.npmjs.org/unplugin-vue-components/-/unplugin-vue-components-0.22.4.tgz",
      "integrity": "sha512-2rRZcM9OnJGXnYxQNfaceEYuPeVACcWySIjy8WBwIiN3onr980TmA3XE5pRJFt8zoQrUA+c46oyIq96noLqrEQ==",
      "dev": true,
      "requires": {
        "@antfu/utils": "^0.5.2",
        "@rollup/pluginutils": "^4.2.1",
        "chokidar": "^3.5.3",
        "debug": "^4.3.4",
        "fast-glob": "^3.2.11",
        "local-pkg": "^0.4.2",
        "magic-string": "^0.26.2",
        "minimatch": "^5.1.0",
        "resolve": "^1.22.1",
        "unplugin": "^0.9.0"
      },
      "dependencies": {
        "magic-string": {
          "version": "0.26.2",
          "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.26.2.tgz",
          "integrity": "sha512-NzzlXpclt5zAbmo6h6jNc8zl2gNRGHvmsZW4IvZhTC4W7k4OlLP+S5YLussa/r3ixNT66KOQfNORlXHSOy/X4A==",
          "dev": true,
          "requires": {
            "sourcemap-codec": "^1.4.8"
          }
        }
      }
    },
    "unplugin-vue-router": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/unplugin-vue-router/-/unplugin-vue-router-0.1.2.tgz",
      "integrity": "sha512-vjBR9yFZJzGj+VwYHFLqni091wPHaJhKLCAwIm6eIkhCdtW+sZetzE112JFUnXuiLOhs3mzoGNslJ0FpcDzbiQ==",
      "dev": true,
      "requires": {
        "chokidar": "^3.5.3",
        "fast-glob": "^3.2.11",
        "json5": "^2.2.1",
        "local-pkg": "^0.4.2",
        "mlly": "^0.5.7",
        "pathe": "^0.3.3",
        "scule": "^0.3.2",
        "unplugin": "^0.9.0",
        "yaml": "^2.1.1"
      },
      "dependencies": {
        "yaml": {
          "version": "2.1.1",
          "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.1.1.tgz",
          "integrity": "sha512-o96x3OPo8GjWeSLF+wOAbrPfhFOGY0W00GNaxCDv+9hkcDJEnev1yh8S7pgHF0ik6zc8sQLuL8hjHjJULZp8bw==",
          "dev": true
        }
      }
    },
    "update-browserslist-db": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.0.5.tgz",
      "integrity": "sha512-dteFFpCyvuDdr9S/ff1ISkKt/9YZxKjI9WlRR99c180GaztJtRa/fn18FdxGVKVsnPY7/a/FDN68mcvUmP4U7Q==",
      "dev": true,
      "requires": {
        "escalade": "^3.1.1",
        "picocolors": "^1.0.0"
      }
    },
    "util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=",
      "dev": true
    },
    "vite": {
      "version": "3.0.8",
      "resolved": "https://registry.npmjs.org/vite/-/vite-3.0.8.tgz",
      "integrity": "sha512-AOZ4eN7mrkJiOLuw8IA7piS4IdOQyQCA81GxGsAQvAZzMRi9ZwGB3TOaYsj4uLAWK46T5L4AfQ6InNGlxX30IQ==",
      "dev": true,
      "requires": {
        "esbuild": "^0.14.47",
        "fsevents": "~2.3.2",
        "postcss": "^8.4.16",
        "resolve": "^1.22.1",
        "rollup": ">=2.75.6 <2.77.0 || ~2.77.0"
      }
    },
    "vue": {
      "version": "3.2.37",
      "resolved": "https://registry.npmjs.org/vue/-/vue-3.2.37.tgz",
      "integrity": "sha512-bOKEZxrm8Eh+fveCqS1/NkG/n6aMidsI6hahas7pa0w/l7jkbssJVsRhVDs07IdDq7h9KHswZOgItnwJAgtVtQ==",
      "requires": {
        "@vue/compiler-dom": "3.2.37",
        "@vue/compiler-sfc": "3.2.37",
        "@vue/runtime-dom": "3.2.37",
        "@vue/server-renderer": "3.2.37",
        "@vue/shared": "3.2.37"
      }
    },
    "vue-resize": {
      "version": "2.0.0-alpha.1",
      "resolved": "https://registry.npmjs.org/vue-resize/-/vue-resize-2.0.0-alpha.1.tgz",
      "integrity": "sha512-7+iqOueLU7uc9NrMfrzbG8hwMqchfVfSzpVlCMeJQe4pyibqyoifDNbKTZvwxZKDvGkB+PdFeKvnGZMoEb8esg==",
      "requires": {}
    },
    "vue-router": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/vue-router/-/vue-router-4.1.3.tgz",
      "integrity": "sha512-XvK81bcYglKiayT7/vYAg/f36ExPC4t90R/HIpzrZ5x+17BOWptXLCrEPufGgZeuq68ww4ekSIMBZY1qdUdfjA==",
      "requires": {
        "@vue/devtools-api": "^6.1.4"
      }
    },
    "vue-tsc": {
      "version": "0.40.1",
      "resolved": "https://registry.npmjs.org/vue-tsc/-/vue-tsc-0.40.1.tgz",
      "integrity": "sha512-Z+3rlp/6TrtKvLuaFYwBn03zrdinMR6lBb3mWBJtDA+KwlRu+I4eMoqC1qT9D7i/29u0Bw58dH7ErjMpNLN9bQ==",
      "dev": true,
      "requires": {
        "@volar/vue-language-core": "0.40.1",
        "@volar/vue-typescript": "0.40.1"
      }
    },
    "vuex": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/vuex/-/vuex-4.0.2.tgz",
      "integrity": "sha512-M6r8uxELjZIK8kTKDGgZTYX/ahzblnzC4isU1tpmEuOIIKmV+TRdc+H4s8ds2NuZ7wpUTdGRzJRtoj+lI+pc0Q==",
      "requires": {
        "@vue/devtools-api": "^6.0.0-beta.11"
      }
    },
    "webpack-sources": {
      "version": "3.2.3",
      "resolved": "https://registry.npmjs.org/webpack-sources/-/webpack-sources-3.2.3.tgz",
      "integrity": "sha512-/DyMEOrDgLKKIG0fmvtz+4dUX/3Ghozwgm6iPp8KRhvn+eQf9+Q7GWxVNMk3+uCPWfdXYC4ExGBckIXdFEfH1w==",
      "dev": true
    },
    "webpack-virtual-modules": {
      "version": "0.4.4",
      "resolved": "https://registry.npmjs.org/webpack-virtual-modules/-/webpack-virtual-modules-0.4.4.tgz",
      "integrity": "sha512-h9atBP/bsZohWpHnr+2sic8Iecb60GxftXsWNLLLSqewgIsGzByd2gcIID4nXcG+3tNe4GQG3dLcff3kXupdRA==",
      "dev": true
    },
    "ws": {
      "version": "7.4.6",
      "resolved": "https://registry.npmjs.org/ws/-/ws-7.4.6.tgz",
      "integrity": "sha512-YmhHDO4MzaDLB+M9ym/mDA5z0naX8j7SIlT8f8z+I0VtzsRbekxEutHSme7NPS2qE8StCYQNUnfWdXta/Yu85A==",
      "requires": {}
    },
    "xtend": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
      "dev": true
    },
    "yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
      "dev": true
    },
    "yaml": {
      "version": "1.10.2",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-1.10.2.tgz",
      "integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==",
      "dev": true
    }
  }
}

'''
'''--- src/package.json ---
{
  "name": "vite-vue3-tailwind-starter",
  "version": "0.0.0",
  "scripts": {
    "serve": "vite --host",
    "build": "vue-tsc --noEmit && vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@vueuse/head": "^0.7.9",
    "axios": "^0.27.2",
    "dayjs": "^1.11.5",
    "ethers": "^5.6.9",
    "floating-vue": "^2.0.0-beta.19",
    "moment": "^2.29.4",
    "mosha-vue-toastify": "^1.0.23",
    "near-api-js": "^1.1.0",
    "tradingview-api": "^1.0.2",
    "vue": "^3.2.37",
    "vue-router": "^4.1.3",
    "vuex": "^4.0.2"
  },
  "devDependencies": {
    "@headlessui/vue": "^1.7.0",
    "@heroicons/vue": "^1.0.6",
    "@popperjs/core": "^2.11.2",
    "@tailwindcss/aspect-ratio": "^0.4.0",
    "@tailwindcss/forms": "^0.5.2",
    "@tailwindcss/line-clamp": "^0.4.0",
    "@tailwindcss/typography": "^0.5.4",
    "@vitejs/plugin-vue": "^3.0.3",
    "@vue/tsconfig": "^0.1.3",
    "autoprefixer": "^10.4.8",
    "events": "^3.2.0",
    "pako": "^2.0.2",
    "prettier-plugin-tailwindcss": "^0.1.13",
    "tailwindcss": "^3.1.8",
    "typescript": "^4.7.4",
    "unplugin-auto-import": "^0.11.1",
    "unplugin-vue-components": "^0.22.4",
    "unplugin-vue-router": "^0.1.2",
    "vite": "^3.0.8",
    "vue-tsc": "^0.40.1"
  }
}

'''
'''--- src/postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

'''
'''--- src/router/index.js ---
import {
  createRouter,
  createWebHistory
} from 'vue-router';
import Home from '../views/Home.vue';
import Trade from '../views/Trade.vue';
import Faucet from '../views/Faucet.vue';

const routes = [{
  path: '/',
  name: 'Home',
  component: Home
},
{
  path: '/trade',
  name: 'trade',
  component: Trade
},
{
  path: '/faucet',
  name: 'faucet',
  component: Faucet
},
];

const router = createRouter({
  history: createWebHistory(),
  routes
});

export default router;

'''
'''--- src/store/index.js ---
import axios from 'axios'
import { createStore } from 'vuex'
 

import exchange from "./modules/exchange";

export default createStore({
  state: {
    crypto: [],
    assetBalance: {},
    market: '',
    // account: 'Connect Wallet',
    walletBalance: {
      base: 1,
      quote: 12,
    },
    accountBalance: {
      base: 1,
      quote: 12,
    },
  },
  actions: {
    async fetchCrypto({ commit }) {
      try {
        const response = await axios.get('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=100&page=1&sparkline=true')
        console.log(response)
        commit('setCrypto', response.data)
      } catch (error) {
        console.log(error)
      }
    },
    async fetchBalance({ commit }, account) {
      if (account === "Connect Wallet") {
        return
      }
      try {
        const resp = await getBalance({
          address: account
        })
        // console.log('asset resp', resp)
        commit('setAssetBalance', resp)
      } catch (error) {
        console.log(error)
      }
    },

    async updateMarket({ commit }, payload) {
      commit('setMarket', payload)
    },
    async updateAccount({ commit }, payload) {
      commit('setAccount', payload)
    },
    async updateWalletBalance({ commit }, payload) {
      commit('setWalletBalance', payload)
    },
    async updateAccountBalance({ commit }, payload) {
      commit('setAccountBalance', payload)
    },
  },
  mutations: {
    setCrypto: (state, payload) => {
      state.crypto = payload
    },
    setAssetBalance: (state, payload) => {
      state.assetBalance = payload
    },
    setMarket: (state, payload) => {
      state.market = payload
    },
    setAccount: (state, payload) => {
      state.account = payload
    },
    setWalletBalance: (state, payload) => {
      state.walletBalance = payload
    },
    setAccountBalance: (state, payload) => {
      state.accountBalance = payload
    },
  },
  getters: {
    getCrypto: (state) => state.crypto,
    assetBalance: (state) => state.assetBalance,
    market: (state) => state.market,
    account: (state) => state.account,
    accountBalance: (state) => state.accountBalance,
    walletBalance: (state) => state.walletBalance,
    // near 
    // wallet: (state) => state.exchange.wallet,
    // nearConfig: (state) => state.exchange.nearConfig,
  },
  modules: {
    exchange,
  },
})

'''
'''--- src/store/modules/exchange.js ---
import * as nearApi from 'near-api-js'
import getConfigurations from '../../config'

const state = {
  currentUser: null,
  wallet: null,
  nearConfig: null,
  orderbookContract: null,
  account: 'Connect Wallet',
}
const mutations = {
  setupNear(state, payload) {
    state.currentUser = payload.currentUser
    state.wallet = payload.wallet
    state.nearConfig = payload.nearConfig
    state.orderbookContract = payload.orderbookContract
    state.tokens = payload.tokens
  },
}

const actions = {
  async initNear({ commit }) {
    const nearConfig = getConfigurations('testnet')
    const near = await nearApi.connect({
      deps: {
        keyStore: new nearApi.keyStores.BrowserLocalStorageKeyStore(),
      },
      ...nearConfig,
    })

    const wallet = new nearApi.WalletConnection(near)
    let currentUser
    if (wallet.getAccountId()) {
      currentUser = {
        accountId: wallet.getAccountId(),
        balance: (await wallet.account().state()).amount,
        balanceInNear: (await wallet.account().state()).amount / 10 ** 24,
      }
    }
    console.log(currentUser)
    console.log('orderbookContract ', nearConfig.orderbookContract)
    // init orderbook contract
    const orderbookContract = await new nearApi.Contract(wallet.account(), nearConfig.orderbookContract, {
      viewMethods: ['orderbook', 'ft_deposits_of', 'storage_balance_bounds', 'storage_balance_of', 'ft_deposits_of_asset'],
      changeMethods: ['new_limit_order', 'place_order', 'ft_withdraw', 'storage_deposit'],
      sender: wallet.getAccountId(),
    })

    // init FT contract
    let tokens = {}
    nearConfig.tokens.map(async (item) => {
      let token = await new nearApi.Contract(wallet.account(), item.address, {
        viewMethods: ['ft_balance_of'],
        changeMethods: ['ft_mint', 'ft_transfer', 'ft_transfer_call'],
        sender: wallet.getAccountId(),
      })
      tokens[item.symbol] = token
    })

    // let storageBalance = await orderbookContract.storage_balance_of({ account_id: currentUser.accountId })
    // console.log('storageBalance**', storageBalance)

    let storageBounds = await orderbookContract.storage_balance_bounds()
    console.log('storageBounds**', storageBounds)

    // Commit and send to mutation.
    commit('setupNear', {
      currentUser,
      wallet,
      nearConfig,
      orderbookContract,
      tokens,
    })
  },
}

const getters = {
  contract: (state) => state.contract,
  currentUser: (state) => state.currentUser,
  wallet: (state) => state.wallet,
  nearConfig: (state) => state.nearConfig,
  orderbookContract: (state) => state.orderbookContract,
  ftContract: (state) => state.ftContract,
  USDC: (state) => state.USDC,
  tokens: (state) => state.tokens,
}

export default {
  state,
  mutations,
  actions,
  getters,
}

'''
'''--- src/tailwind.config.js ---
const defaultTheme = require('tailwindcss/defaultTheme')

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ['./index.html', './src/**/*.{vue,js,ts}'],
  theme: {
    extend: {
      fontFamily: {
        sans: ['"Inter var"', ...defaultTheme.fontFamily.sans],
      },
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/typography'),
    require('@tailwindcss/line-clamp'),
    require('@tailwindcss/aspect-ratio'),
  ],
}

'''
'''--- src/tsconfig.json ---
{
  "compilerOptions": {
    "baseUrl": "./",
    "allowJs": true
  },
  "exclude": ["node_modules", "dist"],
  "include": [
    "typed-router.d.ts",
    "components.d.ts",
    "auto-imports.d.ts",
    "src/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.vue"
  ],
  "extends": "@vue/tsconfig/tsconfig.json"
}

'''
'''--- src/typed-router.d.ts ---
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

/// <reference types="unplugin-vue-router/client" />

import type {
  // type safe route locations
  RouteLocationTypedList,
  RouteLocationResolvedTypedList,
  RouteLocationNormalizedTypedList,
  RouteLocationNormalizedLoadedTypedList,

  // helper types
  // route definitions
  RouteRecordInfo,
  ParamValue,
  ParamValueOneOrMore,
  ParamValueZeroOrMore,
  ParamValueZeroOrOne,

  // vue-router extensions
  _RouterTyped,
  RouterLinkTyped,
  NavigationGuard,
  UseLinkFnTyped,

  // data fetching
  DataLoader,
  DefineLoaderOptions,
} from 'unplugin-vue-router'

declare module 'vue-router/auto/routes' {
  export interface RouteNamedMap {
  }
}

declare module 'vue-router/auto' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  /**
   * Type safe version of `RouteLocationNormalized` (the type of `to` and `from` in navigation guards).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalized<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationNormalizedLoaded` (the return type of `useRoute()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalizedLoaded<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationResolved` (the returned route of `router.resolve()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationResolved<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationResolvedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocation` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocation<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationTypedList<RouteNamedMap>[Name]

  /**
   * Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParams<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['params']
  /**
   * Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParamsRaw<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['paramsRaw']

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuard<RouteNamedMap>): void
  export function onBeforeRouteUpdate(guard: NavigationGuard<RouteNamedMap>): void

  export function defineLoader<
    P extends Promise<any>,
    Name extends keyof RouteNamedMap = keyof RouteNamedMap,
    isLazy extends boolean = false,
  >(
    name: Name,
    loader: (route: RouteLocationNormalizedLoaded<Name>) => P,
    options?: DefineLoaderOptions<isLazy>,
  ): DataLoader<Awaited<P>, isLazy>
  export function defineLoader<
    P extends Promise<any>,
    isLazy extends boolean = false,
  >(
    loader: (route: RouteLocationNormalizedLoaded) => P,
    options?: DefineLoaderOptions<isLazy>,
  ): DataLoader<Awaited<P>, isLazy>
}

declare module 'vue-router' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export interface TypesConfig {
    beforeRouteUpdate: NavigationGuard<RouteNamedMap>
    beforeRouteLeave: NavigationGuard<RouteNamedMap>

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
  }
}

'''
'''--- src/utils/axios.js ---
import axios from 'axios'
import { createToast } from 'mosha-vue-toastify'

 
// create an axios instance
const service = axios.create({
  baseURL: BaseUrl, // url = base url + request url
  //timeout: 5000 // request timeout
  timeout: 500000, // request timeout
})

// request interceptor
service.interceptors.request.use(
  (config) => {
    return config
  },
  (error) => {
    console.log(error) // for debug
    return Promise.reject(error)
  }
)

// response interceptor
service.interceptors.response.use(
  (response) => {
    const res = response.data
    if (res.code !== 20000) {
      console.error("http return ", res)
      createToast(
        { title: '', description: res.desc },
        {
          type: 'danger',
          showIcon: true,
          position: 'top-center',
          timeout: 8000,
        }
      )
      return Promise.reject(new Error(res.message || 'Error'))
    } else {
      return res.data
    }
  },
  (error) => {
    console.error('response err' + error) // for debug
    return Promise.reject(error)
  }
)

export default service

'''
'''--- src/utils/socket.js ---
import pako from "pako";
import dayJS from "dayjs";
import { EventEmitter } from "events";

class TvWebSocket {
  url = "wss://api.huobi.pro/ws";
  ws = null;
  success = {};
  failure = {};
  timer = null;
  evt = new EventEmitter();

  initWebSocket() {
    this.ws = new WebSocket(this.url);
    this.ws.binaryType = "arraybuffer";
    this.ws.onopen = this.onopen.bind(this);
    this.ws.onclose = this.onclose.bind(this);
    this.ws.onerror = this.onerror.bind(this);
    this.ws.onmessage = this.onmessage.bind(this);
    console.log(" >> WebSocket init :", this.url);
  }

  onopen() {
    if (!this.ws) {
      return;
    }
    console.log(" >> WebSocket open...");
    if (this.timer) {
      clearInterval(this.timer);
      this.timer = null;

      for (const key in this.success) {
        this.ws.send(this.success[key]);
        console.log(` >> WebSocket send: ${this.success[key]}`);
      }
    }

    for (const key in this.failure) {
      if (this.success[key]) {
        continue;
      }
      this.ws.send(this.failure[key]);
      this.success[key] = this.failure[key];
      console.log(` >> WebSocket send: ${this.failure[key]}`);
    }
    this.failure = {};
  }

  onclose() {
    this.ws = null;
    console.log(" >> Websocket Close...");
    if (!this.timer) {
      this.onReconnection();
    }
  }

  onerror(event) {
    console.log(" >> Websocket Error...", event);
  }

  onmessage(event) {
    if (!event.data) {
      return;
    }
    const text = pako.inflate(event.data, {
      to: "string",
    });
    const data = JSON.parse(text);
    // console.log("---inflate----", data);
    if (data && data.ping) {
      this.ws?.send(
        JSON.stringify({
          pong: Date.now(),
        })
      );
      return;
    }
    this.onBroadcast(data);
  }

  onBroadcast(msg) {
    if (!this.success[msg.ch]) {
      return;
    }
    this.evt.emit(msg.ch, msg);
  }

  subscribe(name, params, callback) {
    let ee;
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
      ee = this.failurePush(name, params, callback);
    } else {
      ee = this.successPush(name, params, callback);
    }
    return {
      remove: () => {
        this.unsubscribe(name);
        ee.removeAllListeners(name);
      },
    };
  }

  unsubscribe(name) {
    if (this.failure[name]) {
      delete this.failure[name];
    }
    if (!this.success[name]) {
      return;
    }
    if (!this.ws) {
      delete this.success[name];
      return;
    }
    const unsub = JSON.parse(this.success[name]);
    unsub.cmd = "unsub";
    this.ws.send(JSON.stringify(unsub));
    this.evt.removeAllListeners(name);
    console.log(` >> WebSocket send: ${JSON.stringify(unsub)}`);
    delete this.success[name];
  }

  successPush(name, params, callback) {
    this.success[name] = JSON.stringify(params);
    this.ws?.send(this.success[name]);
    console.log(` >> WebSocket send: ${this.success[name]}`);
    return this.evt.on(name, callback);
  }

  failurePush(name, params, callback) {
    this.failure[name] = JSON.stringify(params);
    console.log(` >> WebSocket 准备订阅: ${this.failure[name]}`);
    return this.evt.on(name, callback);
  }

  onReconnection() {
    if (!this.url) {
      return;
    }
    this.initWebSocket();
    this.timer = setInterval(() => {
      this.initWebSocket();
      const now = dayJS().format("YYYY-MM-DD HH:mm:ss");
      console.log(` >> [${now}] WebSocket Reconnect....`);
    }, 3000);
  }
}

export const ws = new TvWebSocket();

'''
'''--- src/utils/token.js ---
import tokenList from "../config/tokenList.js"
import axios from 'axios'

function getTokenAddress(symbol) {
    const tokenCfg = tokenList.tokens.filter(token => token.symbol == symbol);
    return tokenCfg[0].address
}

function getTokenCfg(symbol) {
    const tokenCfg = tokenList.tokens.filter(token => token.symbol == symbol);
    return tokenCfg[0]
}

function formatNumber(num, decimal = 0) {
    num = String(num)
    if (num === '' || num === '0') return num
    const arr = num.split('.')
    const integerPart = arr[0]
    const decimalPart = arr[1] || ''
    const len = integerPart.length

    let str = ''

    if (len > 2) {
        integerPart.split('').forEach((item, index) => {
            if (index > 0 && (len - index) % 3 === 0) str += ''
            str += item
        })
    } else {
        str = integerPart
    }

    if (decimal === 0) return str
    str += '.'

    const decimalLen = decimalPart.length
    if (decimal === decimalLen) {
        str += decimalPart
    } else if (decimal > decimalLen) {
        str += decimalPart + new Array(decimal - decimalLen).fill('0').join('')
    } else {
        str += decimalPart.substr(0, decimal)
    }

    return str
}

async function getMarketPrice(token) {
    const response = await axios.get(`https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=${getTokenCfg(token).id}`)
    let { data } = response
    return formatNumber(data[0].current_price, 4)
}

export {
    getTokenAddress,
    formatNumber,
    getTokenCfg,
    getMarketPrice
}
'''
'''--- src/vite-env.d.ts ---
/// <reference types="vite/client" />

declare module '*.vue' {
  import type { DefineComponent } from 'vue'
  const component: DefineComponent<{}, {}, any>
  export default component
}

'''
'''--- src/vite.config.ts ---
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import AutoImport from 'unplugin-auto-import/vite'
import VueRouter from 'unplugin-vue-router/vite'
import { VueRouterExports } from 'unplugin-vue-router'
import Components from 'unplugin-vue-components/vite'
import { HeadlessUiResolver } from 'unplugin-vue-components/resolvers'

export default defineConfig({
  plugins: [
    vue(),
    VueRouter(),
    Components({ resolvers: [HeadlessUiResolver()] }),
    AutoImport({
      imports: ['vue', '@vueuse/head', { 'vue-router/auto': VueRouterExports }],
    }),
  ],
  server: {
    open: true,
  },
})

'''