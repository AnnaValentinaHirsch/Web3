*GitHub Repository "mikenevermindng/-Challenge-3-awesome-open-source"*

'''--- .gitpod.yml ---
tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- README.md ---
awesome-open-source
==================

This [React] app was initialized with [create-near-app]

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] â‰¥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/src` folder. `/src/index.html` is a great
   place to start exploring. Note that it loads in `/src/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `awesome-open-source.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `awesome-open-source.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account awesome-open-source.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'awesome-open-source.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [React]: https://reactjs.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react'],
}

'''
'''--- contract/Cargo.toml ---
[package]
name = "greeter"
version = "0.1.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "3.1.0"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

[workspace]
members = []

'''
'''--- contract/build.sh ---
#!/bin/bash
set -e

RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release
mkdir -p ../out
cp target/wasm32-unknown-unknown/release/*.wasm ../out/main.wasm
'''
'''--- contract/src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::env::STORAGE_PRICE_PER_BYTE;
use near_sdk::json_types::U64;
use near_sdk::{env, near_bindgen, PanicOnDefault, BorshStorageKey, Balance, AccountId, Promise};
use near_sdk::collections::{UnorderedMap};
use near_sdk::serde::{Deserialize, Serialize};

#[derive(BorshSerialize, BorshStorageKey)]
enum StorageKey {
    Sources,
    StarByPerson,
    NumRepoByPerson,
    TotalFundedByPerson
}

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Source {
    id: U64,
    title: String,
    repository: String,
    star: u32,
    description: String,
    tech_stack: Vec<String>,
    total_donated: Balance,
    funding_account: AccountId
}

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct SourceInput {
    title: String,
    repository: String,
    description: String,
    tech_stack: Vec<String>,
    funding_account: AccountId
}

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
    sources: UnorderedMap<u64, Source>,
    source_id_serial: u64,
    total_funded: Balance,
    star_by_person: UnorderedMap<AccountId, u32>,
    mun_repo_by_person: UnorderedMap<AccountId, u32>,
    total_funded_by_person: UnorderedMap<AccountId, Balance>
}

#[near_bindgen]
impl Contract {

    #[init]
    pub fn new() -> Self {
        Self {
            sources: UnorderedMap::new(StorageKey::Sources),
            source_id_serial: 0,
            total_funded: 0,
            star_by_person: UnorderedMap::new(StorageKey::StarByPerson),
            mun_repo_by_person: UnorderedMap::new(StorageKey::NumRepoByPerson),
            total_funded_by_person: UnorderedMap::new(StorageKey::TotalFundedByPerson)
        }
    }

    #[payable]
    pub fn create(&mut self, source_input: SourceInput) -> Promise {
        let initial_storage_usage = env::storage_usage();
        let account_id = env::predecessor_account_id();
        self.source_id_serial += 1;
        let source_id = self.source_id_serial;
        let source = Source {
            id: U64::from(source_id),
            star: 0,
            total_donated: 0,
            repository: source_input.repository,
            description: source_input.description,
            tech_stack: source_input.tech_stack,
            funding_account: source_input.funding_account,
            title: source_input.title,
        };

        self.sources.insert(&source_id, &source);
        let num_repo_by_owner = if let Some(num_repo) = self.mun_repo_by_person.get(&account_id) {
            num_repo + 1
        } else {
            1u32
        };

        self.mun_repo_by_person.insert(&account_id, &num_repo_by_owner);

        let attached_deposit = env::attached_deposit();

        let required_storage_in_bytes = env::storage_usage() - initial_storage_usage;

        let refund_value = attached_deposit - Balance::from(required_storage_in_bytes) * STORAGE_PRICE_PER_BYTE;

        Promise::new(account_id).transfer(refund_value)
    }

    #[payable]
    pub fn give_an_star(&mut self, source_id: U64) -> Promise {
        let initial_storage_usage = env::storage_usage(); 
        let attached_deposit = env::attached_deposit();
        let account_id = env::predecessor_account_id();
        
        // update source
        let source = &mut self.sources.get(&source_id.0).expect("source not found");
        source.star += 1;
        source.total_donated += attached_deposit;

        self.sources.insert(&source_id.0, source);

        // update star by account
        let star_by_account = if let Some(star) = self.star_by_person.get(&account_id) {
            star + 1
        } else {
            1
        };

        self.star_by_person.insert(&account_id, &star_by_account);

        let total_funded_by_account = if let Some(fund) = self.total_funded_by_person.get(&account_id) {
            fund + attached_deposit
        } else {
            attached_deposit
        };

        // update total funded by account
        self.total_funded_by_person.insert(&account_id, &total_funded_by_account);

        // update total funded
        self.total_funded += attached_deposit;

        let required_storage_in_bytes = env::storage_usage() - initial_storage_usage;

        let funded_to_owner = attached_deposit - Balance::from(required_storage_in_bytes) * STORAGE_PRICE_PER_BYTE;

        Promise::new(source.funding_account.clone()).transfer(funded_to_owner)
    }

    pub fn get_sources(&self, start: U64, limit: u32) -> Vec<Source> {
        self.sources
            .keys()
            .skip(start.0 as usize)
            .take(limit as usize)
            .map(|source_id| {
                self.sources.get(&source_id).unwrap()
            })
            .collect()
    }

}
'''
'''--- deploy.sh ---
near deploy \
    --wasmFile out/main.wasm \
    --initFunction "new" \
    --initArgs '{}' \
    --accountId awesome-source.manhnguyenvan.testnet
'''
'''--- package.json ---
{
  "name": "awesome-open-source",
  "version": "0.1.0",
  "license": "UNLICENSED",
  "scripts": {
    "start": "parcel src/index.html --open",
    "dev": "npm run start"
  },
  "devDependencies": {
    "@babel/core": "~7.14.0",
    "@babel/preset-env": "~7.14.0",
    "@babel/preset-react": "~7.13.13",
    "babel-jest": "~26.6.2",
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-cli": "~2.1.1",
    "nodemon": "~2.0.3",
    "parcel-bundler": "~1.12.4",
    "react-test-renderer": "~17.0.1",
    "shelljs": "~0.8.4"
  },
  "dependencies": {
    "near-api-js": "~0.43.1",
    "react": "~17.0.1",
    "react-dom": "~17.0.1",
    "react-router-dom": "^6.3.0",
    "regenerator-runtime": "~0.13.5"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "jest": {
    "moduleNameMapper": {
      "\\.(jpg|ico|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/src/__mocks__/fileMock.js",
      "\\.(css|less)$": "<rootDir>/src/__mocks__/fileMock.js"
    },
    "setupFiles": [
      "<rootDir>/src/jest.init.js"
    ],
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- src/App.js ---
import 'regenerator-runtime/runtime'
import React, { useEffect, useState } from 'react'
import './global.css'
import Home from './pages/Home'
import Navbar from './components/Navbar'
import {
  BrowserRouter,
  Routes,
  Route,
} from "react-router-dom";
import Detail from './pages/Detail'

export default function App() {

  const [displayCreateModal, setDisplayCreateModal] = useState(false)
  const [listRepo, setListRepo] = useState([])

  useEffect(() => {
    window.contract.get_sources({ start: "0", limit: 100 }).then(result => setListRepo(result))
  }, [])

  return (
    <>
      <BrowserRouter>
        <Navbar />
        <Routes>
          <Route index element={<Home />} />
          <Route path="detail" element={<Detail />} />
        </Routes>
      </BrowserRouter>
    </>
  )
}
'''
'''--- src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/components/Create.js ---
import React, { useState } from "react";

function Create(props) {

    const {setDisplayCreateModal} = props

    const [title, setTitle] = useState()
    const [repository, setRepository] = useState()
    const [description, setDescription] = useState()
    const [fundingAccount, setFundingAccount] = useState()

    const handleSubmit = async () => {
        
        if (!title || !repository || !description || !fundingAccount) {
            alert('please fill out the form')
            return
        } 
        await window.contract.create(
            {
                source_input: {
                    title,
                    repository,
                    description,
                    tech_stack: [],
                    funding_account: fundingAccount
                }
            },
            3000000000000,
            "300000000000000000000000"
        )
    }

    return (
        <div
            className="relative z-10"
            aria-labelledby="modal-title"
            role="dialog"
            aria-modal="true"
        >
            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>
            <div className="fixed z-10 inset-0 overflow-y-auto">
                <div className="flex items-end sm:items-center justify-center min-h-full p-4 text-center sm:p-0">
                    <div className="relative bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:max-w-lg sm:w-full">
                        <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                            <div className="sm:flex sm:items-start">
                                <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                                    <h3
                                        className="text-lg leading-6 font-medium text-gray-900"
                                        id="modal-title"
                                    >
                                        Share your work!
                                    </h3>
                                    <div className="mt-2">
                                        <p className="text-sm text-gray-500">
                                            You are sharing something to make our world better.
                                        </p>
                                        <p className="text-sm text-red-500">
                                            Please make sure that your funding account is placed in
                                            the heading of your repository's readme.
                                        </p>
                                    </div>
                                </div>
                            </div>
                            <div className="pr-5">
                                <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                                    <div className="mt-3">
                                        <label htmlFor="title" className="block text-sm font-medium text-gray-700">Title</label>
                                        <div className="mt-1 relative rounded-md shadow-sm">
                                            <input type="text" onChange={(e) => setTitle(e.target.value)} name="price" id="title" className="focus:ring-indigo-500 focus:border-indigo-500 block w-full px-3 sm:text-sm border-gray-300 rounded-md" placeholder="Title" />
                                        </div>
                                    </div>
                                </div>
                                <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                                    <div className="mt-3">
                                        <label htmlFor="repository" className="block text-sm font-medium text-gray-700">Repository</label>
                                        <div className="mt-1 relative rounded-md shadow-sm">
                                            <input type="text" onChange={(e) => setRepository(e.target.value)} name="price" id="repository" className="focus:ring-indigo-500 focus:border-indigo-500 block w-full px-3 sm:text-sm border-gray-300 rounded-md" placeholder="Github url" />
                                        </div>
                                    </div>
                                </div>
                                <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                                    <div className="mt-3">
                                        <label htmlFor="description" className="block text-sm font-medium text-gray-700">Description</label>
                                        <div className="mt-1 relative rounded-md shadow-sm">
                                            <textarea
                                                className="
                                                    form-control
                                                    block
                                                    w-full
                                                    px-3
                                                    py-1.5
                                                    text-base
                                                    font-normal
                                                    text-gray-700
                                                    bg-white bg-clip-padding
                                                    border border-solid border-gray-300
                                                    rounded
                                                    transition
                                                    ease-in-out
                                                    m-0
                                                    focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none
                                                "
                                                onChange={(e) => setDescription(e.target.value)}
                                                id="exampleFormControlTextarea1"
                                                rows="3"
                                                placeholder="Some description"
                                            />
                                        </div>
                                    </div>
                                </div>
                                <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                                            <div className="mt-3">
                                                <label htmlFor="funding-account" className="block text-sm font-medium text-gray-700">Funding account</label>
                                                <div className="mt-1 relative rounded-md shadow-sm">
                                                    <input type="text" onChange={(e) => setFundingAccount(e.target.value)} name="price" id="funding-account" className="focus:ring-indigo-500 focus:border-indigo-500 block w-full px-3 sm:text-sm border-gray-300 rounded-md" placeholder="Account receiving the tip" />
                                                </div>
                                            </div>
                                        </div>
                            </div>
                        </div>
                        <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                            <button
                                type="button"
                                onClick={handleSubmit}
                                className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm"
                            >
                                Share
                            </button>
                            <button
                                onClick={() => setDisplayCreateModal(false)}
                                type="button"
                                className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                            >
                                Cancel
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}

export default Create;

'''
'''--- src/components/Navbar.js ---
import React from "react";
import { useNavigate, createSearchParams } from 'react-router-dom'
import open from '../assets/open.png'
import { login, logout } from '../utils'

function Navbar(props) {
  const navigate = useNavigate()
  return (
    <nav className="bg-gray-800">
      <div className="max-w-7xl mx-auto px-2 sm:px-6 lg:px-8">
        <div className="relative flex items-center justify-between h-16">
          <div className="absolute inset-y-0 left-0 flex items-center sm:hidden">
            <button
              type="button"
              className="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white"
              aria-controls="mobile-menu"
              aria-expanded="false"
            >
              <span className="sr-only">Open main menu</span>
              <svg
                className="block h-6 w-6"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth="2"
                stroke="currentColor"
                aria-hidden="true"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M4 6h16M4 12h16M4 18h16"
                />
              </svg>
              <svg
                className="hidden h-6 w-6"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth="2"
                stroke="currentColor"
                aria-hidden="true"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>
          </div>
          <div className="flex-1 flex items-center justify-center sm:items-stretch sm:justify-start">
            <div className="flex-shrink-0 flex items-center cursor-pointer" onClick={() => navigate('/')}>
              <img
                className="block lg:hidden h-10 w-auto"
                src={open}
                alt="Workflow"
              />
              <img
                className="hidden lg:block h-10 w-auto"
                src={open}
                alt="Workflow"
              />
              <span className="text-white ml-3 text-lg font-semibold">
                Awesome Open Sources
              </span>
            </div>
          </div>
          <div className="absolute inset-y-0 right-0 flex items-center pr-2 sm:static sm:inset-auto sm:ml-6 sm:pr-0">
            {!window.walletConnection.isSignedIn() ? (
              <button
                type="button"
                onClick={login}
                className="bg-white hover:bg-gray-700 font-semibold px-3 py-2 text-gray-800 rounded-md text-sm font-medium hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white"
              >
                Log in
              </button>
            ) : (
              <button
                type="button"
                onClick={logout}
                className="bg-white hover:bg-gray-700 font-semibold px-3 py-2 text-gray-800 rounded-md text-sm font-medium hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white"
              >
                Log out
              </button>
            )}
          </div>
        </div>
      </div>
    </nav>
  );
}

export default Navbar;

'''
'''--- src/config.js ---
const CONTRACT_NAME = 'awesome-source.manhnguyenvan.testnet'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/global.css ---
body {
  background-color: azure;
}
'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/favicon.ico" />
    <title>Welcome to NEAR with React</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://unpkg.com/@tailwindcss/forms@0.2.1/dist/forms.min.css" rel="stylesheet">
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'
import { initContract } from './utils'

window.nearInitPromise = initContract()
  .then(() => {
    ReactDOM.render(
      <App />,
      document.querySelector('#root')
    )
  })
  .catch(console.error)

'''
'''--- src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['get_greeting'],
    changeMethods: [],
    sender: window.accountId
  })

  window.walletConnection = {
    requestSignIn() {
    },
    signOut() {
    },
    isSignedIn() {
      return true
    },
    getAccountId() {
      return window.accountId
    }
  }
})

test('get_greeting', async () => {
  const message = await window.contract.get_greeting({ account_id: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/pages/Detail.js ---
import { parseNearAmount } from 'near-api-js/lib/utils/format';
import React, { useEffect, useState } from 'react';
import { useNavigate, useParams, useSearchParams } from 'react-router-dom'
import { login } from '../utils';

function Detail(props) {
    const navigate = useNavigate()
    const [searchParams] = useSearchParams();
    const [repo, setRepo] = useState()
    const [donate, setDonate] = useState()

    useEffect(() => {
        const repo = {}
        for (const [key, value] of searchParams.entries()) {
            repo[key] = value
        }
        setRepo(repo)

        if (repo.transactionHashes) {
            navigate('/')
        }
    }, [])

    const handleSubmit = async () => {
        if (!window.walletConnection.isSignedIn()) {
            await login()
            return
        }
        if (isNaN(donate)) {
            alert("invalid donation")
            return
        } 
        await window.contract.give_an_star(
            {source_id: repo.id},
            3000000000000,
            parseNearAmount(donate)
        )
    }

    return (
        <div className='container mx-auto mt-10'>
            <h1 className='text-center text-5xl'>Repository # {repo?.id}: {repo?.title}</h1>
            <p className='text-center text-2xl text-gray-500 mt-5'>{repo?.description}</p>
            <p className='text-center text-2xl text-blue-500 font-bold mt-5'>{repo?.star} stars, funded {repo?.total_donated} NEAR</p>
            <p className='text-center text-1xl hover:text-blue-900 text-blue-500 font-bold mt-5'><a href={repo?.repository}>{repo?.repository}</a></p>
            <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left text-center mx-auto">
                <div className="mt-5 text-center">
                    <label htmlFor="funding-account" className="block text-lg font-medium text-gray-700">By  <a target="_blank" href={`https://explorer.testnet.near.org/accounts/${repo?.funding_account}`} className="text-blue-900">{repo?.funding_account}</a> a cup of coffee</label>
                    <div className="mt-1 relative rounded-md shadow-sm justify-center">
                        <input type="number" onChange={(e) => setDonate(e.target.value)} name="price" id="title" className="focus:ring-indigo-500 focus:border-indigo-500 block px-3 sm:text-sm border-gray-300 rounded-md mx-auto" placeholder="Enter amount in NEAR" />
                    </div>
                    <button
                        type="button"
                        onClick={handleSubmit}
                        className="inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 my-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:w-auto sm:text-sm"
                    >
                        Send a cup of coffee
                    </button>
                </div>
            </div>
        </div>
    );
}

export default Detail;
'''
'''--- src/pages/Home.js ---
import React, { useEffect, useState } from 'react';
import Create from '../components/Create'
import add from '../assets/add.png'
import { useNavigate, createSearchParams } from 'react-router-dom'
import { formatNearAmount } from 'near-api-js/lib/utils/format';
import { login } from '../utils';

function Home(props) {

    const navigate = useNavigate()

    const [displayCreateModal, setDisplayCreateModal] = useState(false)
    const [listRepo, setListRepo] = useState([])

    useEffect(() => {
        window.contract.get_sources({ start: "0", limit: 100 }).then(result => setListRepo(result))
    }, [])

    return (
        <>
            <div className='container mx-auto'>
                <div className='hero-section justify-center text-center'>
                    <h1 className='mt-10 text-8xl font-bold text-blue-400'>Share your works,</h1>
                    <h1 className='mt-10 text-6xl font-semibold'>And tips the other's Awesome works !!!</h1>
                    <p className='mt-10 text-gray-400 text-3xl'>Our world is being built by code</p>
                    <p className='text-gray-400 text-3xl'>Share them, and give other developers a cup of coffee</p>
                    <p className='text-gray-400 text-3xl'>Together, make our world better!</p>
                    <button
                        type="button"
                        onClick={() => {
                            const element = document.getElementById("list-repos");
                            element.scrollIntoView();
                        }}
                        className="bg-white mt-10 text-2xl bg-gray-700 font-semibold px-3 py-2 rounded-md text-sm font-medium text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white"
                    >
                        See some Awesome works
                    </button>
                </div>
                <div className='list-repos mb-10' id='list-repos' >

                </div>
            </div>
            <div className="fixed bottom-5 right-8" onClick={() => {
                if (!window.walletConnection.isSignedIn()) return login()
                setDisplayCreateModal(true)
            }}>
                <img className='block h-12 w-auto cursor-pointer hover:scale-110' src={add} />
            </div>
            <div className='list-repo container flex flex-wrap justify-start mt-10 mx-auto mb-10'>
                {listRepo.map(repo => {
                    return (
                        <div className="max-w-sm rounded overflow-hidden drop-shadow-2xl bg-white cursor-pointer ml-5 my-10" key={repo.id}>
                            <div className="px-6 py-4">
                                <div className="font-bold text-xl mb-2" onClick={() => navigate({
                                    pathname: "detail",
                                    search: createSearchParams(repo).toString()
                                })}>{repo.title}</div>
                                <p className="text-gray-700 text-base">
                                    {repo.description}
                                </p>
                                <a href={repo.repository} target="_blank" className="text-blue-400 text-sm">{repo.repository}</a><br />
                                <p className="text-gray-700 text-base text-sm" >Send fund to: <a target="_blank" href={`https://explorer.testnet.near.org/accounts/${repo.funding_account}`} className="text-blue-400 text-sm">{repo.funding_account}</a></p>
                            </div>
                            <div className="px-6 pt-4 pb-2">
                                <span className="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2">{repo.star} stars</span>
                                <span className="inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2">funded {repo.total_donated} NEAR</span>
                            </div>
                        </div>
                    )
                })}
            </div>
            {displayCreateModal && <Create setDisplayCreateModal={setDisplayCreateModal} />}
        </>
    );
}

export default Home;
'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['get_sources'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['give_an_star', 'create'],
  })
}

export function logout() {
  window.walletConnection.signOut()
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''