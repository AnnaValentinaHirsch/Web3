*GitHub Repository "ketyung/tm_ticket_mints_contract"*

'''--- Cargo.toml ---
[package]
name = "tm_ticket_mints_contract"
version = "0.1.0"
edition = "2021"
authors = ["Christopher Chee <ketyung@techchee.com>"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0"
uint = { version = "0.9.3", default-features = false }
near-contract-standards = "4.0.0"
itertools = "0.8.0"
tm-collections-models = { version = "0.1.0", path = "../tm_collections_models" }

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []
'''
'''--- LICENSE.md ---
MIT License

Copyright (c) 2022 Christopher Ket Yung Chee

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

'''
'''--- build.sh ---
#!/bin/sh

echo ">> Building contract"

rustup target add wasm32-unknown-unknown
cargo build --all --target wasm32-unknown-unknown --release
'''
'''--- readme.md ---
## License 
MIT License
Copyright (c) 2022 Christopher Ket Yung Chee. See [License](https://github.com/ketyung/tm_ticket_mints_contract/blob/master/LICENSE.md) for details

'''
'''--- src/lib.rs ---
pub mod models;
pub mod mints_view;
pub mod mints_manage;
mod tests;

use near_sdk::{near_bindgen, env, AccountId,BorshStorageKey };
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::serde::{Serialize, Deserialize};
use near_contract_standards::non_fungible_token::TokenId;
use near_sdk::collections::UnorderedMap;
use models::*;
use tm_collections_models::models::CollectionId;

#[derive(BorshSerialize, BorshStorageKey)]
pub enum StorageKey {
    
    SalesStorageKey,
}

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    
    ticket_mints: UnorderedMap<TicketMintId,TicketMint>,  

    allowed_callers : Option<Vec<AccountId>>,
}

// Define the default, which automatically initializes the contract
impl Default for Contract{

    fn default() -> Self{
        Self{ ticket_mints :  UnorderedMap::new(StorageKey::SalesStorageKey)
        , allowed_callers: None}
    }
}

#[near_bindgen]
impl Contract {

    #[init]
    #[private]
    #[allow(dead_code)]
    pub (crate) fn test_init() -> Self {
        assert!(!env::state_exists(), "Already initialized");
        
        Self{ ticket_mints :  UnorderedMap::new(StorageKey::SalesStorageKey),
        allowed_callers : Some(vec!["bob".parse().unwrap(), "alice".parse().unwrap()])}
    }

}

#[near_bindgen]
impl Contract {

    #[init]
    #[private]
    pub fn init(allowed_callers : Vec<AccountId>) -> Self {
        assert!(!env::state_exists(), "Already initialized");
        
        let s = Self{ ticket_mints :  UnorderedMap::new(StorageKey::SalesStorageKey),
        allowed_callers : Some(allowed_callers.clone())};

        env::log_str(format!("Initialized with allowed callers {:?}", allowed_callers).as_str());
        return s; 

    }

}

#[near_bindgen]
impl Contract {

    fn panic_if_its_not_allowed_caller(&self) {

        let uw_allowed_callers = self.allowed_callers.clone().unwrap();

        if !uw_allowed_callers.contains(&env::predecessor_account_id()) {
            env::panic_str(format!("@{} Error : Caller {} is NOT allowed",
            env::current_account_id(),
            env::predecessor_account_id()).as_str());
        }
    }
}

'''
'''--- src/mints_manage.rs ---
use crate::*;

#[near_bindgen]
impl Contract {

    pub fn insert_ticket_mint(&mut self, collection_id : CollectionId, 
    token_id : TokenId, mint_by : AccountId, price : Option<u128>,
    ticket_type : Option<String>) -> bool{

        self.panic_if_its_not_allowed_caller();

        let id = TicketMintId {
            collection_id : collection_id.clone(),
            token_id : token_id.clone(),
        };

        if self.ticket_mints.get(&id).is_some() {

            return false;
        }
        

        let attributes = vec![
        TicketAttribute {
            name : TicketAttributeType::IsUsed,
            value : Some("false".to_string()),
        }, 
        TicketAttribute {
            name : TicketAttributeType::Price,
            value : Some(format!("{}",price.unwrap_or(0)).to_string()),
        },
        TicketAttribute {
            name : TicketAttributeType::TicketType,
            value : ticket_type,
        }];

        self.ticket_mints.insert(
            &id,   
            &TicketMint{
            collection_id : collection_id,
            token_id : token_id,
            attributes : Some(attributes), 
            mint_by : Some(mint_by),
            date : Some(env::block_timestamp()),
        });

        return true;
    }
}

#[near_bindgen]
impl Contract {

    pub fn set_ticket_mint_is_used(&mut self, collection_id : CollectionId, 
        token_id : TokenId, used_by : AccountId) -> bool{

        
        self.panic_if_its_not_allowed_caller();

        let id = TicketMintId {
            collection_id : collection_id,
            token_id : token_id,
        };
    
        let ticket_mint = self.ticket_mints.get(&id);

        if ticket_mint.is_none() {
            return false;
        }

        let mut uw_ticket_mint = ticket_mint.unwrap();
     
        uw_ticket_mint.update_attribute(TicketAttribute {
            name : TicketAttributeType::IsUsed,
            value : Some("true".to_string()),
        }, true );

        uw_ticket_mint.update_attribute(TicketAttribute {
            name : TicketAttributeType::UsedBy,
            value : Some(used_by.to_string()),
        }, true );

        uw_ticket_mint.update_attribute(TicketAttribute {
            name : TicketAttributeType::DateUsed,
            value : Some(format!("{}", env::block_timestamp())),
        }, true );

        self.ticket_mints.remove(&id);
        self.ticket_mints.insert(&id, &uw_ticket_mint);

        return true;
    }
}
'''
'''--- src/mints_view.rs ---
use crate::*;
use itertools::Itertools;

#[near_bindgen]
impl Contract {

    pub fn get_ticket_mints_by(&self,
    owner : AccountId, offset : Option<usize>, limit : Option<usize>) -> Vec<TicketMint>
    {
        let u = self.ticket_mints.values_as_vector()
        .iter()
        .filter(|s| s.collection_id.owner == owner )
        .sorted_by(|a, b| Ord::cmp(&b.date, &a.date))
        .skip(offset.unwrap_or(0))
        .take(limit.unwrap_or(10))
        .collect::<Vec<TicketMint>>();
        
        return u; 
    }

    pub fn get_ticket_mints_of(&self,collection_id : CollectionId, 
    offset : Option<usize>, limit : Option<usize>) -> Vec<TicketMint>
    {

        let u = self.ticket_mints.values_as_vector()
        .iter()
        .filter(|s| s.collection_id == collection_id )
        .sorted_by(|a, b| Ord::cmp(&b.date, &a.date))
        .skip(offset.unwrap_or(0))
        .take(limit.unwrap_or(10))
        .collect::<Vec<TicketMint>>();

        
        return u; 
    }

    pub fn get_ticket_mints_count_for(&self, owner : AccountId,
    date_ranges : Vec<DateRange>) -> Vec<SalesCount> {

        let mut cnts : Vec<SalesCount> = Vec::new();

        for dr in date_ranges.iter() {

            let cnt = self.get_ticket_mints_count(owner.clone(), 
            dr.start_date_timestamp, dr.end_date_timestamp);
            let sc = SalesCount {
                date : dr.date.clone(),
                count : cnt, 
            };

            cnts.push(sc);
        }

        cnts
    
    }

    pub fn get_ticket_mints_count(&self, owner : AccountId,
    date_start :  Option<u64>, date_end :  Option<u64>) -> usize
    {
    
        self.ticket_mints.values_as_vector()
        .iter()
        .filter(|s| s.collection_id.owner == owner && 
        s.date >= date_start && s.date <= date_end )
        .count()
        
    }
    
    pub fn get_tickets_buyers(&self, owner : AccountId,
        offset : Option<usize>, limit : Option<usize>) -> BuyerResult
    {
        let res = 
        self.ticket_mints.values_as_vector()
        .iter()
        .filter(|s| s.collection_id.owner == owner )
        .sorted_by(|a, b| Ord::cmp(&b.date, &a.date))
        .unique_by(|x| x.clone().mint_by);

        let total = res.clone().count();

        let limit_res = res
        .skip(offset.unwrap_or(0))
        .take(limit.unwrap_or(10))
        .collect::<Vec<TicketMint>>();

        let mut buyers : Vec<Buyer>= Vec::new();

        for b in limit_res.into_iter() {

            let buyer = Buyer {
                account_id : b.mint_by,
                last_puchase_date : b.date,
            };

            if !buyers.contains(&buyer.clone()){
                buyers.push(buyer);
            }
        
        }
        
        BuyerResult {
            buyers : Some(buyers),
            total : Some(total),
            offset : offset,
            limit : limit,
        }
        
    }

}
'''
'''--- src/models.rs ---
use crate::*;

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize, Debug,Clone)]
#[serde(crate = "near_sdk::serde")]
pub struct TicketMint {

    pub collection_id : CollectionId,

    pub token_id : TokenId,

    pub attributes : Option<Vec<TicketAttribute>>,

    pub mint_by : Option<AccountId>,

    pub date : Option<u64>,
}

impl TicketMint {

    pub fn update_attribute(&mut self, new_attribute : TicketAttribute,
    insert_if_not_exists : bool) {

        if self.attributes.is_some () {
     
            let mut uw_attrbs = self.attributes.clone().unwrap();

            let index = uw_attrbs.iter().position(|a| *a == new_attribute);

            if index.is_some() {

                uw_attrbs[index.unwrap()] = new_attribute;
                self.attributes = Some(uw_attrbs);
            }
            else {

                if insert_if_not_exists {

                    uw_attrbs.push(new_attribute);
                    self.attributes = Some(uw_attrbs);          
                }
            }
        }
       
    }
}

#[derive(BorshDeserialize, BorshSerialize, PartialEq, Debug)]
pub struct TicketMintId {

    pub collection_id : CollectionId,

    pub token_id : TokenId,

}

#[derive(BorshDeserialize, BorshSerialize,Debug, PartialEq,Serialize, Deserialize,Clone)]
#[serde(crate = "near_sdk::serde")]
pub enum TicketAttributeType {

    IsUsed,

    DateUsed, 

    Price,

    TicketType,

    UsedBy, 
}

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize, Debug, Clone)]
#[serde(crate = "near_sdk::serde")]
pub struct TicketAttribute {

    pub name : TicketAttributeType,

    pub value : Option<String>,
}

impl PartialEq for TicketAttribute {

    fn eq(&self, other: &Self) -> bool {
        self.name == other.name  
    }
}

#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(crate = "near_sdk::serde")]
pub struct DateRange {

    pub date : Option<String>,

    pub start_date_timestamp : Option<u64>,

    pub end_date_timestamp : Option<u64>, 

}

#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(crate = "near_sdk::serde")]
pub struct SalesCount {

    pub date : Option<String>,

    pub count : usize, 
}

#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(crate = "near_sdk::serde")]
pub struct Buyer {

    pub account_id : Option<AccountId>,

    pub last_puchase_date : Option<u64>, 

}

impl PartialEq for Buyer{

    fn eq(&self, other: &Self) -> bool {
        self.account_id == other.account_id  
    }
}

#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(crate = "near_sdk::serde")]
pub struct BuyerResult {

    pub buyers : Option<Vec<Buyer>>,

    pub total : Option<usize>, 

    pub offset : Option<usize>,

    pub limit : Option<usize>,
}
'''
'''--- src/tests.rs ---
#[cfg(all(test, not(target_arch = "wasm32")))]
mod tests {

    use near_sdk::test_utils::{accounts, VMContextBuilder};
    use near_sdk::{testing_env, AccountId};
    use crate::*;
   
    fn get_context(predecessor_account_id: AccountId) -> VMContextBuilder {
        let mut builder = VMContextBuilder::new();
        builder
            .current_account_id(accounts(0))
            .signer_account_id(predecessor_account_id.clone())
            .predecessor_account_id(predecessor_account_id);
        builder
    }

    // cargo test test_insert_mints -- --show-output
    #[test]
    fn test_insert_mints() {
        let mut context = get_context(accounts(1));
        testing_env!(context.build());

        let mut _contract = Contract::test_init();
        let acc_id0 = accounts(0);

        _contract.insert_ticket_mint(CollectionId {
            owner : acc_id0.clone(),
            title : "TC 01 Collection".to_string(),
            symbol : "TC1".to_string(),
        }, "088811".to_string(), accounts(1), None, None);

        _contract.insert_ticket_mint(CollectionId {
            owner : acc_id0.clone(),
            title : "TC 01 Collection".to_string(),
            symbol : "TC1".to_string(),
        }, "088812".to_string(), accounts(1), None, None);

        _contract.insert_ticket_mint(CollectionId {
            owner : acc_id0.clone(),
            title : "TC 01 Collection".to_string(),
            symbol : "TC1".to_string(),
        }, "088811".to_string(), accounts(1), None, None );

        _contract.set_ticket_mint_is_used(CollectionId {
            owner : acc_id0.clone(),
            title : "TC 01 Collection".to_string(),
            symbol : "TC1".to_string(),
        }, "088812".to_string(), accounts(1));

        let sales = _contract.get_ticket_mints_by(acc_id0, None, None);

        for sale in sales {

            print!("\nsales:{:?}", sale);
        }

        testing_env!(context.is_view(true).build());

    }

     
}
'''
'''--- term_tests1.txt ---
// To deploy contract
near deploy --accountId test_tm_ticket_mints_contract.testnet --wasmFile target/wasm32-unknown-unknown/release/tm_ticket_mints_contract.wasm 

// To initialize the contract 
near call test_tm_ticket_mints_contract.testnet init '{"allowed_callers":["test_tm_collections_contract.testnet","test_tm_users_contract.testnet"]}' --accountId test_tm_ticket_mints_contract.testnet

// To view the minted tickets or ticket sales by the collection owner
near view test_tm_ticket_mints_contract.testnet get_ticket_mints_by '{"owner":"ketyung.testnet"}'

// To view all the customers of the account id
near view test_tm_ticket_mints_contract.testnet get_tickets_buyers '{"owner":"ketyung.testnet"}'

'''