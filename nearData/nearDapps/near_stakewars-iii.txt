*GitHub Repository "near/stakewars-iii"*

'''--- .github/ISSUE_TEMPLATE/BOUNTY.yml ---
name: "Simple Bounty"
description: "Use this template to create a HEROES Simple Bounty via Github bot"
title: "Bounty: "
labels: ["bounty"]
assignees: heroes-bot-test
body:
  - type: markdown
    attributes:
      value: |
        Hi! Let's set up your bounty! Please don't change the template - @heroes-bot-test won't be able to help you.

  - type: dropdown
    id: type
    attributes:
      label: What talent are you looking for?
      options:
        - Marketing
        - Development
        - Design
        - Other
        - Content
        - Research
        - Audit

  - type: textarea
    id: description
    attributes:
      label: What you need to be done?

  - type: dropdown
    id: tags
    attributes:
      label: Tags
      description: Add tags that match the topic of the work
      multiple: true
      options:
        - API
        - Blockchain
        - Community
        - CSS
        - DAO
        - dApp
        - DeFi
        - Design
        - Documentation
        - HTML
        - Javascript
        - NFT
        - React
        - Rust
        - Smart contract
        - Typescript
        - UI/UX
        - web3
        - Translation
        - Illustration
        - Branding
        - Copywriting
        - Blogging
        - Editing
        - Video Creation
        - Social Media
        - Graphic Design
        - Transcription
        - Product Design
        - Artificial Intelligence
        - Quality Assurance
        - Risk Assessment
        - Security Audit
        - Bug Bounty
        - Code Review
        - Blockchain Security
        - Smart Contract Testing
        - Penetration Testing
        - Vulnerability Assessment
        - BOS
        - News
        - Hackathon
        - NEARCON2023
        - NEARWEEK

  - type: input
    id: deadline
    attributes:
      label: Deadline
      description: "Set a deadline for your bounty. Please enter the date in format: DD.MM.YYYY"
      placeholder: "19.05.2027"

  - type: dropdown
    id: currencyType
    attributes:
      label: Currency
      description: What is the currency you want to pay?
      options:
        - USDC.e
        - USDT.e
        - DAI
        - wNEAR
        - USDt
        - XP
        - marmaj
        - NEKO
        - JUMP
        - USDC
        - NEARVIDIA
      default: 0
    validations:
      required: true

  - type: input
    id: currencyAmount
    attributes:
      label: Amount
      description: How much it will be cost?

  - type: markdown
    attributes:
      value: "## Advanced settings"

  - type: checkboxes
    id: kyc
    attributes:
      label: KYC
      description: "Use HEROES' KYC Verification, only applicants who passed HEROES' KYC can apply and work on this bounty!"
      options:
        - label: Use KYC Verification

  - type: markdown
    attributes:
      value: |
        ### This cannot be changed once the bounty is live!

'''
'''--- FAQ.md ---
### Stake Wars: Episode III FAQ

#### 1. What is Stake Wars: Episode III?
Stake Wars is a program that helps the community become familiar with what it means to be a NEAR validator, and gives them an early chance to access the chunk-only producer. The rewards offered by the Stake Wars program supports new members that want to join mainnet as a validator starting from the end of September 2022.

#### 2. Where do I start?
* Visit [https://near.org/stakewars/](https://near.org/stakewars/) to get the latest information about the program.
* Fill-in the registration form, if you have not done so already (https://nearprotocol1001.typeform.com/to/Z39N7cU9)
* Visit the github repo and read the FAQ and the Rules there (https://github.com/near/stakewars-iii)
* Look into the challenges folder (https://github.com/near/stakewars-iii/tree/main/challenges) and start having fun.

#### 3. How do I become a Chunk-only producer?
To make thinkg fun, we designed the first Stake Wars challenge in such a way to guide you through the basic steps of running a node. Check it out here: https://github.com/near/stakewars-iii/tree/main/challenges

#### 4. Who organizes Stake Wars?
Stake Wars is a community driven program, supported by Pagoda, Meta Pool, LiNEAR, Everstake, Open Shards Alliance and the NEAR Foundation.

#### 5. What’s in it for me?
If you are an existing mainnet validator, Stake Wars offers you the opportunity to get early access to the chunk-only producer (more details [here](https://near.org/decentralize/)), understand how it works, and offer feedback around experience of using it.

If you don’t have a validator seat on mainnet today, and would like to get one, Stake Wars can support you to improve your skills and competences of running a NEAR node, and gives you access to rewards that will support the economics of your validator.

If you are new to the community, and would like to learn more about what it means to run a validator node, Stake Wars offers you a guided playground and support that will help you become more familiar with NEAR.

#### 6. How does Stake Wars work?
Stake Wars is made possible by a partnership between Pagoda, Meta Pool, LiNEAR, Everstake and Open Shards Alliance. Together we are driving the program and supporting the participants.

Stake Wars gives participants challenges, mainly focused on technical deliverables, and offers them support as they progress throughout the technical work. Solving challenges gives participants rewards, shaped as NEAR tokens granted or delegated.

#### 7. For how long does Stake Wars exist?
Stake Wars launched on Wednesday July 13th and continues until Friday September 9th. You are welcome to join at any moment, but we encourage you to join as early as possible to take more advantage of the program.

Challenges will be announced throughout the entire period of the program, so stay tuned to address them quickly. Some challenges will have a limited timeframe when they can be solved.

#### 8. Until when can I join?

Registration is now closed.

~~You can join Stake Wars at any moment before the end date of the program. However, we encourage you to join as early as you can, to have enough time for solving the challenges and unlocking the rewards, and to take advantage of the support you will receive.~~

~~Keep in mind that some challenges may need strict timelines and cannot be accessed after their due date. Also, we plan to move the playground from shardnet to testnet in early August 2022, and at that moment shardnet will no longer be in focus.~~

#### 9. Who can join?
We encourage anyone to join Stake Wars, solve the challenges, learn and be part of the program. However, there are a few restrictions related to reward eligibility: existing mainnet validators (as of July 13th 2022) are not eligible to receive rewards shared as delegated NEAR tokens. Members of Pagoda, Meta Pool, LiNEAR, Everstake and Open Shards Alliance are not eligible for any type of rewards.

#### 10. What are the rewards?
Stake Wars is composed of technical challenges that you are encouraged to solve. Each challenge gives you access to rewards that can include:

* NEAR Tokens delegated to your staking pool on mainnet after phase 1 of sharding launches on mainnet in late September 2022. The total amount of delegated tokens that each participant can receive is limited to 50,000 NEAR.
* NEAR Tokens granted unlocked to your mainnet account. The total amount of granted tokens that each participant can receive is limited to 500 NEAR.

Keep in mind that receiving the rewards may require identity verification.

#### 11. Where will Stake Wars take place?
Stake Wars is an online-only event, and participant support will be offered through Discord.

The challenges proposed by the program will take place in the dedicated NEAR shardnet network and in the already existing NEAR testnet network. The tokens used during for operating nodes during Stake Wars are test tokens, unrelated to the mainnet NEAR tokens.

'''
'''--- README.md ---
Welcome to Stake Wars: Episode III A New Validator

Stake Wars is a program that helps the community become familiar with what it means to be a NEAR validator, and gives the community an early chance to access the chunk-only producer.

Stake Wars offers rewards that support new members who want to join mainnet as a validator starting from the end of September 2022.

Hope the force will be with you !
https://github.com/near/stakewars-iii/blob/main/challenges/001.md

For Support and important announcements: https://discord.gg/7TercRzRgA

'''
'''--- challenges/001.md ---
# Stake Wars: Episode III. Challenge 001
* Published on: 2022-07-13
* Updated on: 2022-07-13
* Submitted by: Open Shards Alliance
* Rewards: unlocked at the end of Challenge 002.

Create your Shardnet wallet & deploy the NEAR CLI. This is designed to be your very first challenge: use it to understand how staking on NEAR works.

## Challenge submission

* No submission is required for this challenge; it will be evaluated together with the next one (002). 

## Useful links

Wallet: https://wallet.shardnet.near.org/

Explorer: https://explorer.shardnet.near.org/ 

### Create a wallet
https://wallet.shardnet.near.org/

#### Setup NEAR-CLI

NEAR-CLI is a command-line interface that communicates with the NEAR blockchain via remote procedure calls (RPC):

* Setup and Installation NEAR CLI
* View Validator Stats

> Note: For security reasons, it is recommended that NEAR-CLI be installed on a different computer than your validator node and that no full access keys be kept on your validator node.

First, let's make sure the linux machine is up-to-date.
```
sudo apt update && sudo apt upgrade -y
```

##### Install developer tools, Node.js, and npm
First, we will start with installing `Node.js` and `npm`:
```
curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -  
sudo apt install build-essential nodejs
PATH="$PATH"
```

Check `Node.js` and `npm` version:
```
node -v
```
> v18.x.x

```
npm -v
```
> 8.x.x

##### Install NEAR-CLI
Here's the Github Repository for NEAR CLI.: https://github.com/near/near-cli. To install NEAR-CLI, unless you are logged in as root, which is not recommended you will need to use `sudo` to install NEAR-CLI so that the near binary is saved to /usr/local/bin

```
sudo npm install -g near-cli
```
### Validator Stats

Now that NEAR-CLI is installed, let's test out the CLI and use the following commands to interact with the blockchain as well as to view validator stats. There are three reports used to monitor validator status:

###### Environment
The environment will need to be set each time a new shell is launched to select the correct network.

Networks:
- GuildNet
- TestNet
- MainNet
- **Shardnet** (this is the network we will use for Stake Wars)

Command:
```
export NEAR_ENV=shardnet
```

You can also run this command to set the Near testnet Environment persistent:
```
echo 'export NEAR_ENV=shardnet' >> ~/.bashrc
echo 'export NEAR_ENV=shardnet' >> ~/.bash_profile
source $HOME/.bash_profile
```

#### NEAR CLI Commands Guide:

###### Proposals
A proposal by a validator indicates they would like to enter the validator set, in order for a proposal to be accepted it must meet the minimum seat price.

Command:
```
near proposals
```

###### Validators Current
This shows a list of active validators in the current epoch, the number of blocks produced, number of blocks expected, and online rate. Used to monitor if a validator is having issues.

Command:
```
near validators current
```

###### Validators Next
This shows validators whose proposal was accepted one epoch ago, and that will enter the validator set in the next epoch.

Command:
```
near validators next
```

---

## We continue ?

[Setup and Run your Node](./002.md)

## Update log

Updated 2022-07-13: Creation

Updated 2022-07-13: Creation

Updated 2022-07-20: Clarified the rewards for solving the challenge

'''
'''--- challenges/002.md ---
# Stake Wars: Episode III. Challenge 002
* Published on: 2022-07-13
* Updated on: 2022-07-15
* Submitted by: Open Shards Alliance
* Rewards: 30 Unlocked NEAR Points (UNP)

This challenge is focused on deploying a node (nearcore), downloading a snapshot, syncing it to the actual state of the network, then activating the node as a validator. 

## Useful links

Wallet: https://wallet.shardnet.near.org/

Explorer: https://explorer.shardnet.near.org/ 

### Setup your node
#### Server Requirements
Please see the hardware requirement below:

| Hardware       | Chunk-Only Producer  Specifications                                   |
| -------------- | ---------------------------------------------------------------       |
| CPU            | 8-Core CPU with AVX support                                           |
| RAM            | >16GB DDR4 (recommended is 20+ GB)                                    |
| Storage        | 500GB SSD                                                             |

#### Install required software & set the configuration

##### Prerequisites:
Before you start, you may want to confirm that your machine has the right CPU features. 

```
lscpu | grep -P '(?=.*avx )(?=.*sse4.2 )(?=.*cx16 )(?=.*popcnt )' > /dev/null \
  && echo "Supported" \
  || echo "Not supported"
```
> Supported

##### Install developer tools:
```
sudo apt install -y git binutils-dev libcurl4-openssl-dev zlib1g-dev libdw-dev libiberty-dev cmake gcc g++ python3 docker.io protobuf-compiler libssl-dev pkg-config clang llvm cargo
```

If you have problems with installing python or docker.io on Ubuntu, try this command:  

```
sudo apt install python3
sudo apt install docker-ce
```

#####  Install Python pip:

```
sudo apt install python3-pip
```
##### Set the configuration:

```
USER_BASE_BIN=$(python3 -m site --user-base)/bin
export PATH="$USER_BASE_BIN:$PATH"
```

##### Install Building env
```
sudo apt install clang build-essential make
```

##### Install Rust & Cargo
```
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
```

You will see the following:

![img](./images/rust.png)

Press 1 and press enter.

##### Source the environment
```
source $HOME/.cargo/env
```

#### Clone `nearcore` project from GitHub
First, clone the [`nearcore` repository](https://github.com/near/nearcore).

```
git clone https://github.com/near/nearcore
cd nearcore
git fetch
```

Checkout to the commit needed. Please refer to the commit defined in [this file](https://github.com/near/stakewars-iii/blob/main/commit.md). 
```
git checkout <commit>
```

#### Compile `nearcore` binary
In the `nearcore` folder run the following commands:

```
cargo build -p neard --release --features shardnet
```
The binary path is `target/release/neard`. If you are seeing issues, it is possible that cargo command is not found. Compiling `nearcore` binary may take a little while.

#### Initialize working directory

In order to work properly, the NEAR node requires a working directory and a couple of configuration files. Generate the initial required working directory by running:

```
./target/release/neard --home ~/.near init --chain-id shardnet --download-genesis
```

![img](./images/initialize.png)

This command will create the directory structure and will generate `config.json`, `node_key.json`, and `genesis.json` on the network you have passed. 

- `config.json` - Configuration parameters which are responsive for how the node will work. The config.json contains needed information for a node to run on the network, how to communicate with peers, and how to reach consensus. Although some options are configurable. In general validators have opted to use the default config.json provided.

- `genesis.json` - A file with all the data the network started with at genesis. This contains initial accounts, contracts, access keys, and other records which represents the initial state of the blockchain. The genesis.json file is a snapshot of the network state at a point in time. In contacts accounts, balances, active validators, and other information about the network. 

- `node_key.json` -  A file which contains a public and private key for the node. Also includes an optional `account_id` parameter which is required to run a validator node (not covered in this doc).

- `data/` -  A folder in which a NEAR node will write it's state.

#### Replace the `config.json`

From the generated `config.json`, there two parameters to modify:
- `boot_nodes`: If you had not specify the boot nodes to use during init in Step 3, the generated `config.json` shows an empty array, so we will need to replace it with a full one specifying the boot nodes.
- `tracked_shards`: In the generated `config.json`, this field is an empty. You will have to replace it to `"tracked_shards": [0]`

```
rm ~/.near/config.json
wget -O ~/.near/config.json https://s3-us-west-1.amazonaws.com/build.nearprotocol.com/nearcore-deploy/shardnet/config.json
```

#### Run the node
To start your node simply run the following command:

```
cd ~/nearcore
./target/release/neard --home ~/.near run
```

![img](./images/download.png)
The node is now running you can see log outputs in your console. Your node should be find peers, download headers to 100%, and then download blocks.

----

### Activating the node as validator
##### Authorize Wallet Locally
A full access key needs to be installed locally to be able to sign transactions via NEAR-CLI.

* You need to run this command:

```
near login
```

> Note: This command launches a web browser allowing for the authorization of a full access key to be copied locally.

1 – Copy the link in your browser

![img](./images/1.png)

2 – Grant Access to Near CLI

![img](./images/3.png)

3 – After Grant, you will see a page like this, go back to console

![img](./images/4.png)

4 – Enter your wallet and press Enter

![img](./images/5.png)

#####  Check the validator_key.json
* Run the following command:
```
cat ~/.near/validator_key.json
```

> Note: If a validator_key.json is not present, follow these steps to create one

Create a `validator_key.json` 

*   Generate the Key file:

```
near generate-key <pool_id>
```
<pool_id> ---> xx.factory.shardnet.near WHERE xx is you pool name

> Pool will be created at the next task, now you can give the same name as your wallet name  
For example :  
wallet name : john.shardnet.near (in future we will call it <accountId>)
pool name : john.factory.shardnet.near  
Please use the same pool name for next task "Mount your Staking Pool"

* Copy the file generated to shardnet folder:
Make sure to replace <pool_id> by your pool name
```
cp ~/.near-credentials/shardnet/YOUR_WALLET.json ~/.near/validator_key.json
```
* Edit “account_id” => xx.factory.shardnet.near, where xx is your PoolName
* Change `private_key` to `secret_key`

> Note: The account_id must match the staking pool contract name or you will not be able to sign blocks.\

File content must be in the following pattern:
```
{
  "account_id": "xx.factory.shardnet.near",
  "public_key": "ed25519:HeaBJ3xLgvZacQWmEctTeUqyfSU4SDEnEwckWxd92W2G",
  "secret_key": "ed25519:****"
}
```

#####  Start the validator node

```
target/release/neard run
```
* Setup Systemd
Command:

```
sudo vi /etc/systemd/system/neard.service
```
Paste:

```
[Unit]
Description=NEARd Daemon Service

[Service]
Type=simple
User=<USER>
#Group=near
WorkingDirectory=/home/<USER>/.near
ExecStart=/home/<USER>/nearcore/target/release/neard run
Restart=on-failure
RestartSec=30
KillSignal=SIGINT
TimeoutStopSec=45
KillMode=mixed

[Install]
WantedBy=multi-user.target
```

> Note: Change USER to your paths

Command:

```
sudo systemctl enable neard
```
Command:

```
sudo systemctl start neard
```
If you need to make a change to service because of an error in the file. It has to be reloaded:

```
sudo systemctl reload neard
```
###### Watch logs
Command:

```
journalctl -n 100 -f -u neard
```
Make log output in pretty print

Command:

```
sudo apt install ccze
```
View Logs with color

Command:

```
journalctl -n 100 -f -u neard | ccze -A
```
#### Becoming a Validator
In order to become a validator and enter the validator set, a minimum set of success criteria must be met.

* The node must be fully synced
* The `validator_key.json` must be in place
* The contract must be initialized with the public_key in `validator_key.json`
* The account_id must be set to the staking pool contract id
* There must be enough delegations to meet the minimum seat price. See the seat price [here](https://explorer.shardnet.near.org/nodes/validators).
* A proposal must be submitted by pinging the contract
* Once a proposal is accepted a validator must wait 2-3 epoch to enter the validator set
* Once in the validator set the validator must produce great than 90% of assigned blocks

Check running status of validator node. If “Validator” is showing up, your pool is selected in the current validators list.

## Let's go to challenge 3 🚀

[Mount your Staking Pool](./003.md).

## Update log

Updated 2022-07-13: Creation

Updated 2022-07-13: Creation

Updated 2022-07-18: Snapshot is not required after hardfork

Updated 2022-07-20: Clarified the rewards for solving the challenge

'''
'''--- challenges/003.md ---
# Stake Wars: Episode III. Challenge 003
* Published on: 2022-07-13
* Updated on: 2022-07-15
* Submitted by: Open Shards Alliance
* Rewards: 10 Unlocked NEAR Points (UNP)

Deploy a new staking pool for your validator. Do operations on your staking pool to delegate and stake NEAR.

## Useful links

Wallet: https://wallet.shardnet.near.org/

Explorer: https://explorer.shardnet.near.org/ 

## 3. Mounting a staking pool

NEAR uses a staking pool factory with a whitelisted staking contract to ensure delegators’ funds are safe. In order to run a validator on NEAR, a staking pool must be deployed to a NEAR account and integrated into a NEAR validator node. Delegators must use a UI or the command line to stake to the pool. A staking pool is a smart contract that is deployed to a NEAR account.

#### Deploy a Staking Pool Contract
##### Deploy a Staking Pool
Calls the staking pool factory, creates a new staking pool with the specified name, and deploys it to the indicated accountId.

```
near call factory.shardnet.near create_staking_pool '{"staking_pool_id": "<pool name>", "owner_id": "<accountId>", "stake_public_key": "<public key>", "reward_fee_fraction": {"numerator": 5, "denominator": 100}, "code_hash":"DD428g9eqLL8fWUxv8QSpVFzyHi1Qd16P8ephYCTmMSZ"}' --accountId="<accountId>" --amount=30 --gas=300000000000000
```

From the example above, you need to replace:

* **Pool Name**: Staking pool name, the factory automatically adds its name to this parameter, creating {pool_name}.{staking_pool_factory}
Examples:   

- If pool id is stakewars will create : `stakewars.factory.shardnet.near`

* **Owner ID**: The SHARDNET account (i.e. stakewares.shardnet.near) that will manage the staking pool.
* **Public Key**: The public key in your **validator_key.json** file.
* **5**: The fee the pool will charge (e.g. in this case 5 over 100 is 5% of fees).
* **Account Id**: The SHARDNET account deploying and signing the mount tx.  Usually the same as the Owner ID.

> Be sure to have at least 30 NEAR available, it is the minimum required for storage.
Example : near call stake_wars_validator.factory.shardnet.near --amount 30 --accountId stakewars.shardnet.near --gas=300000000000000

To change the pool parameters, such as changing the amount of commission charged to 1% in the example below, use this command:
```
near call <pool_id> update_reward_fee_fraction '{"reward_fee_fraction": {"numerator": 1, "denominator": 100}}' --accountId <account_id> --gas=300000000000000
```

You will see something like this:

![img](./images/pool.png)

If there is a “True” at the End. Your pool is created.

**You have now configure your Staking pool.**

Check your pool is now visible on https://explorer.shardnet.near.org/nodes/validators

#### Transactions Guide
##### Deposit and Stake NEAR

Command:
```
near call <pool_id> deposit_and_stake --amount <amount> --accountId <accountId> --gas=300000000000000
```
##### Unstake NEAR
Amount in yoctoNEAR.

Run the following command to unstake:
```
near call <pool_id> unstake '{"amount": "<amount yoctoNEAR>"}' --accountId <accountId> --gas=300000000000000
```
To unstake all you can run this one:
```
near call <pool_id> unstake_all --accountId <accountId> --gas=300000000000000
```
##### Withdraw

Unstaking takes 2-3 epochs to complete, after that period you can withdraw in YoctoNEAR from pool.

Command:
```
near call <pool_id> withdraw '{"amount": "<amount yoctoNEAR>"}' --accountId <accountId> --gas=300000000000000
```
Command to withdraw all:
```
near call <pool_id> withdraw_all --accountId <accountId> --gas=300000000000000
```

##### Ping
A ping issues a new proposal and updates the staking balances for your delegators. A ping should be issued each epoch to keep reported rewards current.

Command:
```
near call <pool_id> ping '{}' --accountId <accountId> --gas=300000000000000
```
Balances
Total Balance
Command:
```
near view <pool_id> get_account_total_balance '{"account_id": "<accountId>"}'
```
##### Staked Balance
Command:
```
near view <pool_id> get_account_staked_balance '{"account_id": "<accountId>"}'
```
##### Unstaked Balance
Command:
```
near view <pool_id> get_account_unstaked_balance '{"account_id": "<accountId>"}'
```
##### Available for Withdrawal
You can only withdraw funds from a contract if they are unlocked.

Command:
```
near view <pool_id> is_account_unstaked_balance_available '{"account_id": "<accountId>"}'
```
##### Pause / Resume Staking
###### Pause
Command:
```
near call <pool_id> pause_staking '{}' --accountId <accountId>
```
###### Resume
Command:
```
near call <pool_id> resume_staking '{}' --accountId <accountId>
```

## Let's go to challenge 4 🚀

[Check your Node](./004.md).

## Update log

Updated 2022-07-13: Creation

Updated 2022-07-13: Creation

Updated 2022-07-20: Clarified the rewards for solving the challenge

'''
'''--- challenges/004.md ---
# Stake Wars: Episode III. Challenge 004
* Published on: 2022-07-13
* Updated on: 2022-07-13
* Submitted by: Open Shards Alliance
* Rewards: 15 Unlocked NEAR Points (UNP)

Setup tools for monitoring node status. Install and use RPC on port 3030 to get useful information for keep your node working.

## Usefull links

Wallet: https://wallet.shardnet.near.org/

Explorer: https://explorer.shardnet.near.org/ 

### Monitor and make alerts 

An email notification can make it more comfortable to maintain a validator up and running. Achieve to be a validator confirming transactions on testnet and get >95% of uptime.

#### Log Files
The log file is stored either in the ~/.nearup/logs directory or in systemd depending on your setup.

Systemd Command:
```
journalctl -n 100 -f -u neard | ccze -A
```

**Log file sample:**

Validator | 1 validator

```
INFO stats: #85079829 H1GUabkB7TW2K2yhZqZ7G47gnpS7ESqicDMNyb9EE6tf Validator 73 validators 30 peers ⬇ 506.1kiB/s ⬆ 428.3kiB/s 1.20 bps 62.08 Tgas/s CPU: 23%, Mem: 7.4 GiB
```

* **Validator**: A “Validator” will indicate you are an active validator
* **73 validators**: Total 73 validators on the network
* **30 peers**: You current have 30 peers. You need at least 3 peers to reach consensus and start validating
* **#46199418**: block – Look to ensure blocks are moving

#### RPC
Any node within the network offers RPC services on port 3030 as long as the port is open in the nodes firewall. The NEAR-CLI uses RPC calls behind the scenes. Common uses for RPC are to check on validator stats, node version and to see delegator stake, although it can be used to interact with the blockchain, accounts and contracts overall.

Find many commands and how to use them in more detail here:

https://docs.near.org/api/rpc/introduction

Command:
```
sudo apt install curl jq
```
##### Common Commands:
###### Check your node version:
Command:
```
curl -s http://127.0.0.1:3030/status | jq .version
```
###### Check Delegators and Stake
Command:
```
near view <your pool>.factory.shardnet.near get_accounts '{"from_index": 0, "limit": 10}' --accountId <accountId>.shardnet.near
```
###### Check Reason Validator Kicked
Command:
```
curl -s -d '{"jsonrpc": "2.0", "method": "validators", "id": "dontcare", "params": [null]}' -H 'Content-Type: application/json' 127.0.0.1:3030 | jq -c '.result.prev_epoch_kickout[] | select(.account_id | contains ("<POOL_ID>"))' | jq .reason
```
###### Check Blocks Produced / Expected
Command:
```
curl -r -s -d '{"jsonrpc": "2.0", "method": "validators", "id": "dontcare", "params": [null]}' -H 'Content-Type: application/json' 127.0.0.1:3030 | jq -c '.result.current_validators[] | select(.account_id | contains ("POOL_ID"))'
```

## Let's go to challenge 5 🚀

[Run on multiple cloud providers](./005.md).

## Update log

Updated 2022-07-13: Creation

Updated 2022-07-13: Creation

Updated 2022-07-20: Clarified the rewards for solving the challenge

'''
'''--- challenges/005.md ---
# Stake Wars: Episode III. Challenge 005
* Published on: 2022-07-15
* Updated on: 2022-07-15
* Submitted by: Meta Pool
* Rewards: 10 Delegated NEAR Points (DNP)

Setup a running validator node for shardnet on any one of the most popular cloud providers and document the process to create an article about it.

* Amazon Web Services
* Google Cloud Platform
* Microsoft Azure
* IBM Cloud
* DigitalOcean
* Hetzner

Follow the guide of Stake Wars III challenges:
* [Create your Shardnet wallet](https://github.com/near/stakewars-iii/blob/main/challenges/001.md)
* [Setup a validator and sync it to the actual state of the network.](https://github.com/near/stakewars-iii/blob/main/challenges/002.md)
* [Deploy a new staking pool for your validator.](https://github.com/near/stakewars-iii/blob/main/challenges/003.md)
* [Setup tools for monitoring node status.](https://github.com/near/stakewars-iii/blob/main/challenges/004.md)

## Deliverables

1. Article doing a step-by-step guide on how to mount a node validator. (GitHub or Medium)

## Challenge submission

[Submit the form](https://docs.google.com/forms/d/e/1FAIpQLScp9JEtpk1Fe2P9XMaS9Gl6kl9gcGVEp3A5vPdEgxkHx3ABjg/viewform) with your article.

## Acceptance criteria:
* Document the process and publish it (GitHub or Medium)
* Include step-by-step instructions to mount a node validator using Stake Wars instructions (Challenge 001, 002, 003 and 004).
* Include detailed screenshots and descriptions on the process.
* Include pricing for running the validator.
* Article can be done in any language. A review can be done for acceptance.

## Update log

Updated 2022-07-17: Added multi lang criteria.

Updated 2022-07-20: Clarified the rewards for solving the challenge

'''
'''--- challenges/006.md ---
# Stake Wars: Episode III. Challenge 006
* Published on: 2022-07-19
* Updated on: 2022-07-22
* Submitted by: Meta Pool
* Rewards: 5 Unlocked NEAR Points (UNP)

Create a cron task on the machine running node validator that allows ping to network automatically.

## Steps

Create a new file on /home/<USER_ID>/scripts/ping.sh

```
#!/bin/sh
# Ping call to renew Proposal added to crontab

export NEAR_ENV=shardnet
export LOGS=/home/<USER_ID>/logs
export POOLID=<YOUR_POOL_ID>
export ACCOUNTID=<YOUR_ACCOUNT_ID>

echo "---" >> $LOGS/all.log
date >> $LOGS/all.log
near call $POOLID.factory.shardnet.near ping '{}' --accountId $ACCOUNTID.shardnet.near --gas=300000000000000 >> $LOGS/all.log
near proposals | grep $POOLID >> $LOGS/all.log
near validators current | grep $POOLID >> $LOGS/all.log
near validators next | grep $POOLID >> $LOGS/all.log

```

Create logs folder:

```
mkdir $HOME/logs
```

Change execute permission for ping.sh file:

```
chmod +x $HOME/scripts/ping.sh
```

Create a new crontab, running every 2 hours:

```
crontab -e
0 */2 * * * sh /home/<USER_ID>/scripts/ping.sh
```

List crontab to see it is running:
```
crontab -l
```

Review your logs 

```
cat $HOME/logs/all.log
```

## Acceptance criteria:

* Ping is done periodically to network.

## Challenge submission

* Challenge URL: The link to the explorer of your staking pool.
* Challenge image: Screenshots of PING transaction being done periodically.

![img](./images/ping-log.png)

[Submit the form](https://docs.google.com/forms/d/e/1FAIpQLScp9JEtpk1Fe2P9XMaS9Gl6kl9gcGVEp3A5vPdEgxkHx3ABjg/viewform) with your PING transactions.

## Optional: Use croncat to create a ping task

[Cron.cat](https://cron.cat) is service running over NEAR Protocol that allows you to automatize the create a ping for validators. In fact, it is the more easy way to do it in testnet and mainnet. For stake wars III is now available to run the ping on Shardnet.

## Update log

Updated 2022-07-19: Creation

Updated 2022-07-20: Clarified the rewards for solving the challenge

Updated 2022-07-21: Added cron.cat info.

Updated 2022-07-22: Added submission info.

'''
'''--- challenges/007.md ---
# Data Science for Staking

* Published on: 2022-07-22
* Updated on: 2022-07-22
* Submitted by: LiNEAR
* Rewards: 30 DNP + 50 UNP + 200 USD in $LiNEAR for best submission

### Description:

Blockchain is big data. We believe that very interesting data insights could be found out through investigating staking data on NEAR. Please try to find out some valuable data from staking and validators and build a visualized data dashboard for everyone to access.

If you don’t have anything in mind to start with, please consider the follow examples:

- Lifecycle performance of validators. (How many blocks have they produced, did they ever get kicked out, etc..)
- How does the reward APY change from epoch to epoch, what is affecting it?
- The token flow of big delegation whales. When did they decide to stake and when did they unstake.
- Historical data of the number of delegators (and delegation amount) on each validator node.

### Deliverable

- A chartio-like data dashboard, a report built with Jupyter Notebook, or a well-structured spreadsheet. You're encouraged to use whatever data visualization tool or machine learning algorithm that you love. 
- A brief summary of what we could learn from those data and how NEAR can use those data to improve staking.

### Acceptance Criteria

- Please provide data insights other than what we can directly get from the NEAR explorer / NEAR wallet.
- As for the outcome, a visualized data dashboard is preferred, also a spreadsheet with well-structured data is also acceptable.
- What we can learn from the data actually matters, so please also provide a summary of how you interpret the data and how we can improve the NEAR system based on your work.
- Analytics with NEAR mainnet data is strongly recommended. You can also analyze data from testnet or shardnet, but mainnet have more real and complex transactions. 

### Judging Criteria

- A clear and meaningful goal is set. (What kind of data are you investigating and what kind of result are you expecting) (2 points)
- Being able to correctly and effectively grab the data from indexer, rpc-node, etc. (2 points)
- Transform and aggregate the data to form the final result. (3 points)
- A straightforward data dashboard. (3 points)

### Submission
Please submit your work to: https://forms.gle/uNrUFwc1vEHEgQuN7

'''
'''--- challenges/008.md ---
# Stake Wars: Episode III. Challenge 008
* Published on: 2022-07-25
* Updated on: 2022-07-25
* Submitted by: Meta Pool
* Rewards: 50 Unlocked NEAR Points (UNP) + 30 Delegated NEAR Points (DNP)

Would you like to contribute to other projects running a validator? Deploy a smart contract on the owner account of a staking pool.

This contract will allow users to split their rewards on multiple accounts.

## Steps

Install cargo and Rust in case you don't have it. This command is for Linux or MacOS.

```
curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh

source $HOME/.cargo/env
```

Add the wasm32-unknown-unknown toolchain

```
rustup target add wasm32-unknown-unknown

```

Clone the project found [here](https://github.com/zavodil/near-staking-pool-owner)

```
git clone https://github.com/zavodil/near-staking-pool-owner
```
Compile smart contract

```
cd near-staking-pool-owner/contract
cargo build --target wasm32-unknown-unknown --release
```

Deploy smart contract on your owner account. Adjust the path to .wasm file if required.
```
NEAR_ENV=shardnet near deploy <OWNER_ID>.shardnet.near --wasmFile target/wasm32-unknown-unknown/release/contract.wasm
```

Initialize the smart contract picking accounts for splitting revenue.
```
CONTRACT_ID=<OWNER_ID>.shardnet.near

# Change numerator and denomitor to adjust the % for split.
NEAR_ENV=shardnet near call $CONTRACT_ID new '{"staking_pool_account_id": "<STAKINGPOOL_ID>.factory.shardnet.near", "owner_id":"<OWNER_ID>.shardnet.near", "reward_receivers": [["<SPLITED_ACCOUNT_ID_1>.shardnet.near", {"numerator": 3, "denominator":10}], ["<SPLITED_ACCOUNT_ID_2>.shardnet.near", {"numerator": 70, "denominator":100}]]}' --accountId $CONTRACT_ID
```

Wait until you start receiving rewards on your node staking pool. Do a withdraw of rewards.

```
CONTRACT_ID=<OWNER_ID>.shardnet.near
NEAR_ENV=shardnet near call $CONTRACT_ID withdraw '{}' --accountId $CONTRACT_ID --gas 200000000000000
```

## Acceptance criteria:

* Withdraw is succesfully distributed to 2 accounts.
* In case a bug is found, detailed feedback can alternavely be taken on count.

## Challenge submission

* Challenge URL: The link to the explorer of your *withdraw* transaction.
* Challenge image: Screenshots of tokens distribution transaction.

![img](./images/split-log.png)

[Submit the form](https://docs.google.com/forms/d/e/1FAIpQLScp9JEtpk1Fe2P9XMaS9Gl6kl9gcGVEp3A5vPdEgxkHx3ABjg/viewform) with your distribution transactions.

## Disclaimer

This is a code provided by community, there is not knowledge of auditments. Do your own review of code to ensure security. Use it at your own risk.

## Update log

Updated 2022-07-25: Creation

'''
'''--- challenges/009.md ---
# Stake Wars: Episode III. Challenge 009
* Published on: 2022-07-28
* Submitted by: Open Shards Alliance
* Rewards: 15 Unlocked NEAR Points

This challenge has two objectives:
* Monitor uptime above 70% on ShardNet
* Open the RPC port 3030 for analytics / reporting

🎗️Tip: On MainNet, Uptime has to be greater than 95%, or you will be kicked for up to 3 epochs losing rewards and possibly delegators.

💡Did you know? If a validator issues a ping to join the network before being fully synced it is considered an attack on the network?

## Steps

We have launched a new validator scoreboard for ShardNet where you can monitor your uptime and metrics of your validator: [ShardNet Uptime Leaderboard](https://openshards.io/shardnet-uptime-scoreboard/)

### Objective 1 - Monitor uptime

* Check your current uptime and manage it to above 70% on ShardNet
* Fix issues with producing chunks.
See the [troubleshooting guide](https://github.com/near/stakewars-iii/blob/main/challenges/troubleshooting.md)
* Implement monitoring scripts 

### Objective 2 - Open Port 3030 for Diagnostic reporting

Check to see if PORT 3030 is open
```
sudo iptables -L | grep 3030
```
Open the port if not open
```
sudo iptables -A INPUT -p tcp --dport 3030 -j ACCEPT
```
Save the config for server restarts

You can use one of the 2 solutions:
##### Using `iptables-persistent`
```
sudo apt install iptables-persistent
```
or if already installed
```
sudo dpkg-reconfigure iptables-persistent
```

##### Using files
```
iptables-save > /etc/iptables/rules.v4
ip6tables-save > /etc/iptables/rules.v6
```

#### Validate the port is open by visiting
`http://<YOUR IP>:3030/status`

**NOTE:** _In some cases the port may also need to be opened in your cloud provider / datacenter firewall._

## Acceptance criteria:

* Validator reporting above 70%
* Port can be accessed publicly `http://<IP Address>:3030/status`

## Challenge submission

* Challenge URL: The link to your port 3030 port
* Challenge image: Screenshot of uptime from Leaderboard

## Update log

Updated 2022-07-28: Creation

'''
'''--- challenges/010.md ---
# Stake Wars: Episode III. Challenge 010
* Published on: 2022-08-10
* Submitted by: Open Shards Alliance
* Rewards: Delegated ShardNet NEAR

This challenge automatically delegates ShardNet NEAR to pools with uptime >= 60%.

* **Snapshot 2022-08-09:** One-time 1000 ShardNet NEAR delegation to validators with >= 60% "% Chunks Online" for **ALL TIME**.
* **Starting 2022-08-10:** Daily 100 ShardNet NEAR delegation to validators with >= 60% "% Chunks Online" in the last **25 EPOCHS**.

🎗️Tip: On MainNet, Uptime has to be greater than 95%, or you will be kicked for up to 3 epochs losing rewards and possibly delegators.

💡Did you know? If a validator issues a ping to join the network before being fully synced it is considered an attack on the network?

## Steps
 

### Monitor uptime

* Check your current uptime and manage it to above 60% on the [ShardNet Uptime Leaderboard](https://openshards.io/shardnet-uptime-scoreboard/)
* Fix issues with producing chunks.
  * See the [troubleshooting guide](https://github.com/near/stakewars-iii/blob/main/challenges/troubleshooting.md)
* Debug Node Issues
  * Triage issues with Missed Chunks by reviewing your report on: http://localhost:3030/debug
  * Submit PR to StakeWars Github with the reason for missing Chunks
  https://github.com/near/stakewars-iii/issues
* Implement monitoring scripts

## Challenge submission
N/A

## Update log

Updated 2022-10-05: Creation

'''
'''--- challenges/011.md ---
# Staking Farm 2.0     
* Published on: 2022-07-29 (we expect the challenge to ready for the participants on 2022-07-29; until then it is considered a draft and minor changes may occur)
* Updated on: 2022-07-29
* Submitted by: LiNEAR
* Rewards: 30 DNP + 50 UNP + 200 USD in $LiNEAR for best submission

### Description:
Aurora launched the first staking farm on NEAR early this year and there’s a lot of fun. However there are still some unresolved problems associated with it, such as how to make the APY sustainable, how to make staking farm more decentralized and how one user could earn multiple staking farm rewards at the same time, etc. Please propose an improved staking farm solution which could help to solve some of these challenges.

### Deliverable:
- A working staking farm 2.0 smart contract
- Design documents and technical notes.

### Acceptance criteria:
- The solution should be based on the existing NEAR staking system. 
- Either a working smart contract or a practical proposal is welcomed.
- A clear illustration of how the new proposed solution can improve existing staking farm is required.

### Judging criterias:
- Full understanding of the current staking farm mechanism. (1 point)
- The proposed solution has improvements in one or more dimensions, and no significant drawbacks are introduced. (4 points)
- The proposed solution is feasible based on the current NEAR ecosystem. (2 points)
- A working NEAR smart contract or a detailed tech doc is provided. (3 points)

### Submit
Please submit your work to: https://forms.gle/uNrUFwc1vEHEgQuN7

'''
'''--- challenges/013.md ---
# Stake Wars: Episode III. Challenge 013

- Published on: 2022-08-11
- Updated on: 2022-08-11
- Submitted by: Everstake
- Rewards: 25 UNP & 10 DNP

## Description

In this challenge, participants will learn how to update their node, migrate keys, and set up a **BACKUP** node. 

Please note that this challenge includes multiple parts: 
- **Best Practices**: is an informational section that outlines the optimal way of updating a validator node (no points) 
- **Task**: in this section, participants will learn how to migrate validator keys. Only this part of the challenge will be evaluated.  (25 UNP & 10 DNP)  

## Acceptance Criteria

- Run a backup node
- Successfully migrate validator keys from the **MAIN** node to the **BACKUP** node

## Challenge submission

For submission, please fill out the [form](https://docs.google.com/forms/d/e/1FAIpQLSfZV6_SUpdAMlOOjpwQSVa0xUcvCjO5iiNG3k9KrGDvCEEw3w/viewform?usp=sf_link)  

To submit your results, make sure to include the following: 

Please include a screenshot of logs that shows that the `public_key` has been changed on the main & backup node and timestamps from the validator and backup nodes. 
Screenshot example for backup node: <img width="875" alt="Screenshot 2022-08-16 at 17 22 43" src="https://user-images.githubusercontent.com/68015865/184920037-fe763500-7770-40df-981e-78fc10e022d0.png">

## Best Practices

**Before updating your node, make sure that you have checked**

1. An official announcement for the update.
2. Release Notes on GitHub.  
Be aware of *DB migration or other breaking changes*
3. Validator chats.  
Review *how many validators have been updated?  
Were there any noticeable problems?*
4. Update testnet/backup node.   
*Spend some time testing it on your backup node before moving to the main validator node.* 

⚠️ **We recommend that you keep the previous versions of compiled binaries in case of an urgent downgrade**

### Update binary

- Create a new directory, e.g `sources` & *clone* or *update* `nearcore` project from GitHub

```bash
cd sources
git clone https://github.com/near/nearcore
cd nearcore
git fetch origin --tags
```

- Checkout to the branch you need. The latest unstable release is recommended if you are running on the **testnet** or **shardnet** and the latest stable version is recommended if you are running on the **mainnet**. Please check the [releases page on GitHub](https://github.com/near/nearcore/releases).

```bash
git checkout <version>
```

- Compile `nearcore` binary

```bash
make release
```

```bash
./target/release/neard --version
```

⚠️ **Don’t forget to check the version and hash of the binary, it should be the same as displayed on [releases page](https://github.com/near/nearcore/releases)**

- Replace binary in your work directory

```bash
cp ./target/release/neard <WORK_DIR>/bin/
```

- Restart the node and check the log file

**Helpful links:** [https://near-nodes.io/validator/validator-bootcamp](https://near-nodes.io/validator/validator-bootcamp)

## Task

*Try to use different folders for binaries & sources for version check*

### Backup node

In case of missed blocks or chunks, the validator can be removed from the active validation set in the next auction. If you want to secure your validator NEAR node from a high downtime, you can deploy a **backup** server with the preconfigured NEAR node. Having two provisioned nodes allows you to quickly switch from one server to another by migrating your validator keys, so you can continue producing blocks with minimal downtime. If the nearcore release has long database migration, or you must maintain/scale the server, we also recommend migrating your validator keys to the backup node. 

Always analyze your node activities and be ready to determine a problem and move the *main validator* keys to the **backup** node. 

### Validator keys migration

Firstly, you need to have a backup server, a NEAR node with a new `node_key.json` and one more generated `validator_key.json`. To switch quickly, prepare folders for the validator keys and reserve keys 

⚠️ **Be careful! Don't let two nodes run with the same keys!  
This will make your node slashed. This means that your node will be excluded from the active validation set and your funds may be burnt.**

If the server is **unavailable** (e.g. no network connection) deal with the hosting provider, get access and **only** then start the key migration procedure! Always make sure that the **MAIN** node doesn’t work 

If the server is **available**

1. Stop the **MAIN** node
2. Make sure the **MAIN** node isn’t working

```bash
ps aux | grep neard
netstat -tlpn | grep neard
```

3. Replace main validator keys on the **MAIN** node with the reserve ones (optional, if you are sure the node won’t start accidentally)

```bash
cd mainnet
rm validator_key.json node_key.json
cp ../<RESERVE_KEYS>/validator_key.json ../<RESERVE_KEYS>/node_key.json .
```

4. Stop the **BACKUP** node
5. Make sure the **BACKUP** node isn’t working

```bash
ps aux | grep neard
netstat -tlpn | grep neard
```

6. Replace reserve keys on the **BACKUP** node with main validator 

```bash
cd mainnet
rm validator_key.json node_key.json
cp ../<VALIDATOR_KEYS>/validator_key.json ../<VALIDATOR_KEYS>/node_key.json .
```

7. Check the `validator_key.json` and `node_key.json`

You can check file identity using `md5sum` command for `validator_state.json` and `node_key.json` on both nodes. If the checksums match, then the files are identical.

Or you use `diff` command

```bash
diff <WORK_DIR>/mainnet/validator_key.json ../<RESERVE_KEYS>/validator_key.json
diff <WORK_DIR>/mainnet/node_key.json ../<RESERVE_KEYS>/node_key.json

diff <WORK_DIR>/mainnet/validator_key.json ../<VALIDATOR_KEYS>/validator_key.json
diff <WORK_DIR>/mainnet/node_key.json ../<VALIDATOR_KEYS>/node_key.json
```

8. Start the **BACKUP** node

After starting the node in the log, you **used to see** the line with `peer_id` that was equal to `public_key` in `/<WORK_DIR>/mainnet/node_key.json` & `../<VALIDATOR_KEYS>/node_key.json`, **but now just make sure that your backup node is validating**. 
In the logs of the **BACKUP** node you should see "Validator |" 

```bash
2022-07-29T13:37:03.984160Z  INFO stats: #70892058 F6jTU9iyXRJ6jiQq8XUP6ENpzvHZ8FfYJpuS8w9zHb82 Validator | 100 validators 35 peers ⬇ 1.53 MB/s ⬆ 2.24 MB/s 0.80 bps 22.2 Tgas/s CPU: 39%, Mem: 6.91 GB
2022-07-29T13:37:13.984741Z  INFO stats: #70892066 2HwdtnRkosQ9mLkmKZpa3X28NNtzajfvct2YBBg63QW2 Validator | 100 validators 35 peers ⬇ 1.56 MB/s ⬆ 2.21 MB/s 0.80 bps 66.8 Tgas/s CPU: 38%, Mem: 6.91 GB
```

Normal logs

```bash
2022-07-29T13:44:20.905273Z  INFO stats: #70892419 8uHiGM2CuibYAyA1Sry15M9vcyyXrZD8CG3nf8nvetdU 100 validators 36 peers ⬇ 1.35 MB/s ⬆ 1.30 MB/s 0.80 bps 25.8 Tgas/s CPU: 42%, Mem: 6.01 GB
2022-07-29T13:44:30.905814Z  INFO stats: #70892427 4C7VPH79nx6auKD9JpPK81YtQmZAq35BC2JVJxNJgeWy 100 validators 36 peers ⬇ 1.36 MB/s ⬆ 1.31 MB/s 0.80 bps 22.9 Tgas/s CPU: 37%, Mem: 5.81 GB
```

## Update log

Updated 2022-08-11: Creation

'''
'''--- challenges/014.md ---
# **Stake Wars: Episode III.** Challenge 14

- Published on: 2022-08-17
- Submitted by: Everstake
- Rewards: 15 DNP

## Description

In this challenge, participants will learn how to create, run, and modify the auto-backup node script. 

For this challenge, we recommend using Bash, however, Python can be used as well. 

## Acceptance criteria

- Create a script for the auto-backup of your node
- Make a backup on your reserve node
- Modify the auto-backup script

## Challenge submission

For submission, please fill out the [form](https://forms.gle/1MS9Jvhvq9YWbbwk7)  

Also, make sure to share a link to your GitHub repo with the script in the **Proof of Completion: URL** section. 

If you don't want to share it publicly, please share a script in the **Proof of Completion: Text** or upload a file in the **Proof of Completion: Files** section.

## Steps

### Part 1

**Auto-backup node**

A backup node is a separate server for taking and storing database snapshots.  
This is necessary, for example, to quickly transfer an up-to-date database to another server so that the new node is synchronized as quickly as possible, or to restore a damaged database

⚠️ Be aware that it takes time to copy the database. Do not use an auto-backup script on the validator node!

Example `backup.sh`

```bash
#!/bin/bash

DATE=$(date +%Y-%m-%d-%H-%M)
DATADIR=<WORK_DIR>
BACKUPDIR=<WORK_DIR>/backups/near_${DATE}

mkdir $BACKUPDIR

sudo systemctl stop near-main.service

wait

echo "NEAR node was stopped" | ts

if [ -d "$BACKUPDIR" ]; then
    echo "Backup started" | ts

    cp -rf $DATADIR/mainnet/data/ ${BACKUPDIR}/

    # Submit backup completion status, you can use healthchecks.io, betteruptime.com or other services
    # Example
    # curl -fsS -m 10 --retry 5 -o /dev/null https://hc-ping.com/xXXXxXXx-XxXx-XXXX-XXXx-...

    echo "Backup completed" | ts
else
    echo $BACKUPDIR is not created. Check your permissions.
    exit 0
fi

sudo systemctl start near-main.service

echo "NEAR node was started" | ts

```

- **For an automatic start:**

```bash
sudo nano /etc/crontab
```

Add line:

```bash
# Example of job definition:
# .---------------- minute (0 - 59)
# |  .------------- hour (0 - 23)
# |  |  .---------- day of month (1 - 31)
# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
# |  |  |  |  |
# *  *  *  *  * user-name command to be executed
0  12 *  *  * near      <WORK_DIR>/NEARmain/backup.sh >> <WORK_DIR>/NEARmain/backups/backup.log 2>&1
```

💡 This setting will automatically start database backup every day at 12:00

### Part 2

Try to make a backup on your backup node, and modify the auto-backup script :

- Save the data folder as an archive
- Check the folder with backups and remove the oldest 
- Write a simple script for quick database restoring 

## Update Log

Updated 2022-08-17: Creation

'''
'''--- challenges/015.md ---

# Stake Wars: Episode III. Challenge 015
* Published on: 2022-08-23
* Updated on: 2022-08-23
* Submitted by: Meta Pool supported by Kuutamo
* Rewards: 10 Delegated NEAR Points (DNP)
  
Setup a kuutamo High Availability (HA) NEAR Validator running on `localnet` and `testnet`

The kuutamo (HA) NEAR Validator node distribution combines a Linux operating system (NixOS) preconfigured for security and performance for this use case, kuutamod, consuld and neard.

kuutamod is a distributed supervisor for neard that implements failover. To avoid having two active validators running simultaneously, kuutamod uses consul by acquiring a distributed lock.

## kuutamod support:

kuutamod team is available for solving doubts about setting up kuutamod.

For support join [kuutamo-chat on Matrix.](https://matrix.to/#/#kuutamo-chat:kuutamo.chat) 

## Tasks:

 1. Deploy kuutamod on a localnet following [this guide](https://github.com/kuutamolabs/kuutamod/blob/main/docs/run-localnet.md). Write a blog post documenting your experience.
 2. Deploy a HA pool using kuutamo with a name appended with `_kuutamo` on testnet (i.e. `alanpool_kuutamo.pool.f863973.m0`). Write a blog post documenting your experience. This part of the challenge requires machines with NixOS 22.05. There is a quickstart AWS walkthrough [here](https://github.com/kuutamolabs/kuutamod/blob/main/docs/testnet-on-aws-lab.md) which starts by explaining how to get the NixOS AMI image, or you can try setting up NixOS youself using [this install guide](https://nixos.org/manual/nixos/stable/index.html#ch-installation) on your own machines and following [this doc](https://github.com/kuutamolabs/kuutamod/blob/main/docs/run-main-test-shard.md).

## Deliverables 

 - Blog for localnet deployment
 - Blog for testnet deployment. On each kuutamo node, once your system is operational, run the commands below and include screenshots in blog.
```console
$ nixos-version
$ journalctl -u kuutamod.service | grep 'state changed'
$ systemctl status kuutamod
```

## Submission Form

Include link to your deliverables

[Submit the form](https://docs.google.com/forms/d/e/1FAIpQLScp9JEtpk1Fe2P9XMaS9Gl6kl9gcGVEp3A5vPdEgxkHx3ABjg/viewform) with your distribution transactions.

## Disclaimer

This is a code provided by community, there is not knowledge of auditments or warranty on its use. Do your own review of code to ensure security and stability. Use it at your own risk.

## Useful links:

[kuutamo NEAR Validator GitHub/Docs](https://github.com/kuutamolabs/kuutamod)

[Installing NixOS](https://nixos.org/manual/nixos/stable/index.html#ch-installation)

[An opinionated guide for developers getting things done using the Nix ecosystem](https://nix.dev/)

[Nix to Debian phrasebook](https://nixos.wiki/wiki/Nix_to_Debian_phrasebook)

'''
'''--- challenges/016.md ---

# Stake Wars: Episode III. Challenge 016

* Published on: 2022-08-29
* Updated on: 2022-08-29
* Submitted by: Meta Pool supported by Notifi Network
* Rewards: 10 Delegated NEAR Points (DNP)
  
Connect a node validator for sending notifications through [Notifi](https://notifi.network/).

Notifi Network is a notifications provider for web3. In this challenge, you will test yourself on using the Notifi API to communicate when your staking is going lower than seat price.

## Steps to complete:
* In [#integration-requests](https://discord.com/invite/nAqR3mk3rv) channel, ask to integrate a new validator on Near for Stake Wars! 
* A support ticket will be created with you in it.
* You'll be asked for your valid testnet wallet, validator name, and email where you want test messages sent.
* Once approved, a moderator will send you credentials for your account. This is the sid/secret you’ll use in the SDK to authenticate from the validator. Keep these credentials safe and never shared.
* Use the SDK sample here to broadcast messages to a particular topic. The topic name will be provided to you when you get your sid/secret pair.
https://github.com/notifi-network/notifi-sdk-ts/tree/main/packages/notifi-node-sample
* Use NotifiClient.sendBroadcastMessage to send your message via the provided topic name. For this challenge, you can leave targetTemplates as undefined, as we will use the default ones. Required variables are “subject” and “message”.

![img](./images/notifi-status.png)

* Create an script that monitors current delegation and send information to your email through Notifi node. You can do it in bash, javascript, python or anyother you prefered.

## Acceptance criteria

An Email is sent when with validators name and current staking. 

## Proof of completion 
An screenshot showing Notifi Sending your current staking and validators name.

![img](./images/notifi-email.png)

## Submission Form

Screenshot of your Email.

[Submit the form](https://docs.google.com/forms/d/e/1FAIpQLScp9JEtpk1Fe2P9XMaS9Gl6kl9gcGVEp3A5vPdEgxkHx3ABjg/viewform) with your distribution transactions.

## Disclaimer

This is a code provided by community, there is not knowledge of auditments or warranty on its use. Do your own review of code to ensure security and stability. Use it at your own risk.

'''
'''--- challenges/017.md ---
# Testnet Validator on Decentralized Cloud Service
* Published on: 2022-08-16
* Updated on: 2022-08-26
* Submitted by: LiNEAR
* Rewards: Rewards for testnet bounty + 100 USD in $LiNEAR for top 3 submissions

## Description:
At this point we believe that all of you guys must have successfully deployed the chunk-only validator on one of the major cloud service providers like AWS.     
However, blockchain is  about decentralization,  we certainly don't want our infrastructures to be too centralized. Now lets try to deploy the validator with a decentralized cloud marketplace: [Akash](https://docs.akash.network/).
        
In this challenge, please try to create an account and deploy the chunk-only validator on Akash. In addition, to prove your work and also to pave the road for further developers, please record a video tutorial about how to deploy a validator on Akash step by step.

## Instructions:
- You may find this [guide](https://github.com/Dimokus88/near/blob/main/Guide_EN.md) created by Akash community helpful for you. But please deploy **testnet** rather than shardnet. 
- To get started with Akash, you can follow to this [doc](https://docs.akash.network/guides/cli/detailed-steps). Or join the discord server of Akash: http://discord.akash.network/
- If you need some Akash tokens to develop, please ask `Reason#9156` for help in NEAR stakewar discord channel.

**Please note that this challenge is targeted at Testnet, not Shardnet.** You can get testnet bounty if successfuly setup a validtor:
```
📣 URGENT BOUNTY: We need your help testing Chunk Only Producers on TESTNET!! 

1. Download Chunk Only Producer Release:
    1.29.0-rc.1: https://github.com/near/nearcore/releases/tag/1.29.0-rc.1

2. Download the Testnet snapshot:
    s3://near-protocol-public/backups/testnet/rpc/latest

3. Configure the validator to be a Chunk Only Producer:
    cargo build -p neard --release --features shardnet
```

This will be reimbursed. Please fill out this form once your pool is online and you need delegation.
https://forms.gle/4jJSL88o8FZDjP9k6

## Acceptance criteria:
- Successfully deployed a Chunk Only Producer on Akash and accepted as a valid validator.
- Make a video tutorial about the deployment step by step and publish the tutorial on the Internet (like youtube). Please note that you are encouraged to record it in your own language so that more regions in the world could benefit from our challenge.

## Submission:
- Akash account ID under which you deployed the validator.
- A link to your video tutorial.
- Please submit your work here: https://forms.gle/uNrUFwc1vEHEgQuN7

'''
'''--- challenges/019.md ---
# Stake Wars: Episode III. Challenge  019

- Published on: 2022-08-29
- Submitted by: Everstake
- Rewards: 15 DNP

## Challenge submission

For submission, please fill out the [form](https://forms.gle/1MS9Jvhvq9YWbbwk7)  

Make sure to include your Grafana IP & Port `http://<IP>:3000/`.` 

Also, the name & password of the user with the “**Viewer”** role.  

**Note:** points can be deducted for partial completion

## Acceptance Criteria

1. Create a **Dashboard** for hardware
2. Create a **Dashboard** for software 

**Note:** sections 1 & 2 can be combined if desired

## Steps

### 1. Download and install Grafana OSS

- Get latest release Grafana OSS from [https://grafana.com/grafana/download?platform=linux](https://grafana.com/grafana/download?platform=linux)

```bash
wget https://dl.grafana.com/oss/release/grafana_9.0.5_amd64.deb
sudo dpkg -i grafana_9.0.5_amd64.deb
```

- Start the grafana-server

To start the service and verify that the service has started:

```bash
sudo systemctl daemon-reload
sudo systemctl start grafana-server
sudo systemctl status grafana-server
```

### 2. ****Download and install Prometheus and Node Exporter****

- Create a user for Prometheus and Node Exporter

**Note: Prometheus** - is simply a database with values for metrics. Quite often, Prometheus is configured in conjunction with Grafana, which allows you to visualize metrics. **Node Exporter** - is necessary for collecting Linux system indicators, such as CPU load, monitoring file systems, disks, network statistics (and others).

```bash
sudo useradd --no-create-home --shell /usr/sbin/nologin prometheus
sudo useradd --no-create-home --shell /bin/false node_exporter
```

- Create folders

```bash
sudo mkdir /etc/prometheus
sudo mkdir /var/lib/prometheus
```

- Set the ownership of these directories

```bash
sudo chown prometheus:prometheus /etc/prometheus
sudo chown prometheus:prometheus /var/lib/prometheus
```

- Download the latest version of **Node Exporter** [https://prometheus.io/download/](https://prometheus.io/download/):

```bash
wget https://github.com/prometheus/node_exporter/releases/download/<LATEST VERSION>/node_exporter-<LATEST VERSION>linux-amd64.tar.gz

tar xvf node_exporter-<LATEST VERSION>linux-amd64.tar.gz

sudo cp node_exporter-<LATEST VERSION>linux-amd64/node_exporter /usr/local/bin
sudo chown node_exporter:node_exporter /usr/local/bin/node_exporter
```

- Create the Systemd service file node_exporter

```bash
sudo nano /etc/systemd/system/node_exporter.service
```

```bash
[Unit]
Description=Node Exporter
Wants=network-online.target
After=network-online.target

[Service]
User=node_exporter
Group=node_exporter
Type=simple
ExecStart=/usr/local/bin/node_exporter

[Install]
WantedBy=multi-user.target
```

```bash
sudo systemctl daemon-reload
sudo systemctl start node_exporter
sudo systemctl status node_exporter
```

- Download the latest version of ****Prometheus**** [https://prometheus.io/download/](https://prometheus.io/download/):

```bash
wget https://github.com/prometheus/prometheus/releases/download/<LATEST VERSION>/prometheus-<LATEST VERSION>linux-amd64.tar.gz

tar xfz prometheus-<LATEST VERSION>linux-amd64.tar.gz
cd prometheus-<LATEST VERSION>linux-amd64/

sudo cp ./prometheus /usr/local/bin/
sudo cp ./promtool /usr/local/bin/

sudo chown prometheus:prometheus /usr/local/bin/prometheus
sudo chown prometheus:prometheus /usr/local/bin/promtool

sudo cp -r ./consoles /etc/prometheus
sudo cp -r ./console_libraries /etc/prometheus

sudo chown -R prometheus:prometheus /etc/prometheus/consoles
sudo chown -R prometheus:prometheus /etc/prometheus/console_libraries
```

- Configure ****Prometheus****

```bash
sudo nano /etc/prometheus/prometheus.yml
```

```bash
global:
  scrape_interval:     15s
  evaluation_interval: 15s

rule_files:
  # - "first.rules"
  # - "second.rules"

scrape_configs:
  - job_name: 'near_node'
    scrape_interval: 5s
    static_configs:
      - targets: ['localhost:9090'] # example - targets: ['99.999.99.99:3030']
```

```bash
sudo chown prometheus:prometheus /etc/prometheus/prometheus.yml
```

- Create the Systemd service file prometheus

```bash
sudo nano /etc/systemd/system/prometheus.service
```

```bash
[Unit]
Description=Prometheus Monitoring
Wants=network-online.target
After=network-online.target

[Service]
User=prometheus
Group=prometheus
Type=simple
ExecStart=/usr/local/bin/prometheus \
--config.file /etc/prometheus/prometheus.yml \
--storage.tsdb.path /var/lib/prometheus/ \
--web.console.templates=/etc/prometheus/consoles \
--web.console.libraries=/etc/prometheus/console_libraries
ExecReload=/bin/kill -HUP $MAINPID

[Install]
WantedBy=multi-user.target
```

```bash
sudo systemctl daemon-reload
sudo systemctl start prometheus
sudo systemctl status prometheus
```

### 3. Sign in to Grafana

To sign in to Grafana for the first time:

1. Open your web browser and go to `http://<IP>:3000/`. The default HTTP port that Grafana listens to is 3000 unless you have configured a different port.
2. On the sign-in page, enter admin for the username and password.
3. Click Sign in.

If successful, you will see a prompt to change the password.

1. Click OK on the prompt and change your password.

**Note:** We strongly recommend that you change the default administrator password. We recommend no less than 14 characters including numbers, symbols, uppercase, and lowercase letters. 

- Create a **new view-only user**

Log in under admin and go to:

1. Server Admin – Users
2. Click “New user”
3. Fill out he fields and Click “Create user”
4. Configuration – Users. Check “Role” in the newly created user. There should be “Viewer” permissions. 

**Note:** Create a strong password. We recommend no less than 14 characters including numbers, symbols, uppercase, and lowercase letters. 

- Create **Data Sources / Prometheus**
1. Click the configuration gear icon, then Data Source
2. Select prometheus
3. Set URL to http://localhost:9090
4. Click **Save & Test**

If everything is fine, then you will see a message.

- Add **Dashboard**

## Tasks

#### 1. Create NEAR general dashboard. 
You can use **Screenshot1**, **Screenshot2**, **Screenshot3** as a reference. 

![GrafanaScreenshot1](https://user-images.githubusercontent.com/68015865/187438878-e0490c9d-545f-491a-996b-f4dc64aa6fbc.png)
![GrafanaScreenshot2](https://user-images.githubusercontent.com/68015865/187438934-51f0af65-1dce-436a-9c32-536cfcbe29c9.png)
![GrafanaScreenshot3](https://user-images.githubusercontent.com/68015865/187438956-62e28a4c-d0bb-421e-840b-f3387904241e.png)

> **Block Height** - near_block_height_head  
> **Total Transactions** - near_transaction_processed_successfully_total   
> **Block Processed** - rate(near_block_processed_total[$__rate_interval])   
> **Blocks Per Minute** - near_blocks_per_minute  
> **Validators** - near_is_validator 
>                - near_validator_active_total  
> **Chunk** - histogram_quantile(0.95, sum(rate(near_chunk_tgas_used_hist_bucket[$__rate_interval])) by (le))   
> **Block Processing** - rate(near_block_processing_time_count[$__rate_interval])  
> **Transactions Pool Entries** - near_transaction_pool_entries  
> **Blocks Per Minute** - near_blocks_per_minute   
> **Processed Total Transactions** - rate(near_transaction_processed_total[$__rate_interval])   
> **Processed Successfully Transactions** - rate(near_transaction_processed_successfully_total[$__rate_interval])  
> **Reachable Peers** - near_peer_reachable  
> **Chunk Tgas Used** - near_chunk_tgas_used    
> **Block Processing Time Count** - rate(near_block_processing_time_count[$__rate_interval])    
 
#### 2. Create NEAR validator dashboard 
 
> **Node is validator**  
> **Missed blocks**   
> **Percent of produced blocks**   
> **Missed chunks**   
> **Percent of produced chunks**  
> **Connected peers**   
> **Total validator stake**   

#### 3. Create or reconfigure the [existing](https://grafana.com/grafana/dashboards) dashboard for monitoring **CPU, RAM, file systems, disks, and network statistics**. 

**Note:** to check if **Prometheus** is receiving node metrics, you can use`http://<IP>:9090/graph` in the Web Browser. Alternatively, you can use the Dashboard itself.  When the name is entered, the metric responses will be displayed. **screenshot4**
![near_metrics_web](https://user-images.githubusercontent.com/68015865/187439030-ee995f46-976e-4cd3-9b59-7e0c69e66a8f.png)

## **Update log**

Updated 2022-08-29: Creation

'''
'''--- challenges/020.md ---
# Stake Wars: Episode III. Challenge 020

- Published on: 2022-09-06
- Submitted by: Everstake
- Rewards: 0
- Deadline: Friday, September 9, 2022

**Note:** Participants will not receive rewards for this challenge. The  idea of this challenge is to provide additional training/practice for participants and prepare for running a mainnet validator. 

## Challenge submission

For submission, please fill out the [form](https://forms.gle/1MS9Jvhvq9YWbbwk7)

Please ensure to include your GitHub repo with the monitoring script in it in the **Proof of Completion: URLs** section 

Additionally, add a link to your Telegram channel with alerts in it to the **Proof of Completion: URLs** section. 

Optionally, you can add screenshots of your Telegram channel. 

## Acceptance Criteria

1. Create a monitoring tool for your node
2. Receive alerts to your channel using a telegram bot 

## 1. Monitor your node

Monitor the network by using NEAR's [JSON RPC APIs](https://docs.near.org/docs/interaction/rpc). Simple `curl` commands can extract valuable information for your validator operations, such as:

- current block height
- number of peers
- number of blocks `produced` vs `expected`
- validator status: current, next, and kicked out
- NEAR's node version and build, `new release` vs `node version`

## 2. Sending alerts using a telegram bot to a channel

Define the thresholds that trigger alerts, such as:

- node is stopped, zero new blocks downloaded
- a low number of peers, `<3`  (Additional task)
- missed blocks, risk of being kicked out, or insufficient stake
- a new nearcore build is running on the network (Additional task)

Example of sending a message:

```bash
curl -s -X POST https://api.telegram.org/bot${BOT_TOKEN}/sendMessage \
-d chat_id=${CHANNEL_ID} \
-d parse_mode="Markdown" \
-d text="*Validator name* %0A\${METRIC1}\\%0A\${METRIC2}\\%0A\${METRIC3}\\"
```

## How to Create Telegram Channel

- Click the **`menu`** button
- Select `**New Channel**` button
- Enter a channel name
- Click **`Create`**
- Select a channel type. You can make your channel **`Public`**
- Enter a link name
- Click **`SAVE`**

## How to Create Telegram bot

- Start a new conversation with the [BotFather](https://telegram.me/botfather)
- Send `/newbot` to create a new Telegram bot
- When asked, enter a name for the bot
- Give the Telegram bot a unique username. Note that the bot name must end with the word "`bot`" (case-insensitive)
- Copy and save the Telegram bot's access token for later steps

**Helpful link:**
[https://telegram.org/faq#q-how-do-i-create-a-bot](https://telegram.org/faq#q-how-do-i-create-a-bot)

## How to Add a Telegram Bot to Telegram Channel

- Open Channel menu
- Choose `Manage Channel`
- Choose `Administrators`
- Enter your bot's username and click `Add Administrator`
- In the next step, disable all permissions except `Post messages` and click `**Save**`

**Helpful link:**
[https://telegram.org/faq#q-can-i-assign-administrators](https://telegram.org/faq#q-can-i-assign-administrators)

'''
'''--- challenges/challenge-summary.md ---
This file contains an overview of the published and draft challenges for Stake Wars. We plan to release new challenges every few days, and this file will be constantly updated to include the new challenges tha are coming up.

| ID                                                                       | Status    | Publish date | Due date   | Owner     | Description                                                                       | Max points                                                            | Type     | Target network |
| ------------------------------------------------------------------------ | --------- | ------------ | ---------- | --------- | --------------------------------------------------------------------------------- | --------------------------------------------------------------------- | -------- | -------------- |
| [001](https://github.com/near/stakewars-iii/blob/main/challenges/001.md) | Published | 2022-07-13   | 2022-09-07 | OSA       | Create your Shardnet wallet & deploy the NEAR CLI.                                | \-                                                                    | Core     | Shardnet       |
| [002](https://github.com/near/stakewars-iii/blob/main/challenges/002.md) | Published | 2022-07-13   | 2022-09-07 | OSA       | Deploying a node, download a snapshot, sync it, activate the node as a validator. | 30 UNP                                                                | Core     | Shardnet       |
| [003](https://github.com/near/stakewars-iii/blob/main/challenges/003.md) | Published | 2022-07-13   | 2022-09-07 | OSA       | Deploy a new staking pool for your validator                                      | 10 UNP                                                                | Core     | Shardnet       |
| [004](https://github.com/near/stakewars-iii/blob/main/challenges/004.md) | Published | 2022-07-13   | 2022-09-07 | OSA       | Setup tools for monitoring node status                                            | 15 UNP                                                                | Core     | Shardnet       |
| [005](https://github.com/near/stakewars-iii/blob/main/challenges/005.md) | Published | 2022-07-15   | 2022-09-07 | Meta Pool | Setup a validator node on one of the most popular cloud providers.                | 10 DNP                                                                | Optional | Shardnet       |
| [006](https://github.com/near/stakewars-iii/blob/main/challenges/006.md) | Published | 2022-07-19   | 2022-09-07 | Meta Pool | Cron task for ping                                                                | 5 UNP                                                                 | Core     | Shardnet       |
| [007](https://github.com/near/stakewars-iii/blob/main/challenges/007.md) | Published | 2022-07-22   | 2022-09-07 | LiNEAR    | Data Science for Staking                                                          | 30 DNP<br>50 UNP<br>200USD in $LiNEAR for best submission             | Optional | Shardnet       |
| [008](https://github.com/near/stakewars-iii/blob/main/challenges/008.md) | Published | 2022-07-26   | 2022-09-07 | Meta Pool | Split revenue for staking rewards                                                 | 30 DNP<br>50 UNP                                                      | Optional | Shardnet       |
| [009](https://github.com/near/stakewars-iii/blob/main/challenges/009.md) | Published | 2022-07-28   | 2022-09-07 | OSA       | Challenge for shardnet uptime >70% && open the debug port                         | 15 UNP                                                                | Core     | Shardnet       |
| [010](https://github.com/near/stakewars-iii/blob/main/challenges/010.md) | Published | 2022-08-10   | 2022-09-07 | OSA       | Delegation Uptime Challenge                                                       | Delegated Shardnet NEAR                                               | Core     | Shardnet       |
| [011](https://github.com/near/stakewars-iii/blob/main/challenges/011.md) | Published | 2022-08-10   | 2022-09-07 | LiNEAR    | Staking Farm 2.0                                                                  | 30 DNP<br>50 UNP<br>200USD in $LiNEAR for best submission             | Optional | Shardnet       |
| 012                                                                      | \-        | \-           | \-         | \-        | \-                                                                                | \-                                                                    | \-       | \-             |
| [013](https://github.com/near/stakewars-iii/blob/main/challenges/013.md) | Published | 2022-08-12   | 2022-09-07 | Everstake | Failover / Backup challenge                                                       | 25 UNP<br>10 DNP                                                      | Core     | Shardnet       |
| [014](https://github.com/near/stakewars-iii/blob/main/challenges/014.md) | Published | 2022-08-17   | 2022-09-07 | Everstake | Auto Update challenge                                                             | 15 DNP                                                                | Optional | Shardnet       |
| [015](https://github.com/near/stakewars-iii/blob/main/challenges/015.md) | Published | 2022-08-16   | 2022-09-07 | Meta Pool | Kuutamod challenge                                                                | 10 DNP                                                                | Optional | Shardnet       |
| [016](https://github.com/near/stakewars-iii/blob/main/challenges/016.md) | Published | 2022-08-26   | 2022-09-07 | Meta Pool | Notifi Network challenge                                                          | 10 DNP                                                                | Optional | Shardnet       |
| [017](https://github.com/near/stakewars-iii/blob/main/challenges/017.md) | Published | 2022-08-29   | 2022-09-21 | LiNEAR    | Testnet Validator on Decentralized Cloud Service                                  | Rewards for testnet bounty<br>100USD in $LiNEAR for top 3 submissions | Optional | Testnet        |
| [018](https://github.com/near/stakewars-iii/blob/main/challenges/community-002.md) | Published | 2022-08-29 | 2022-09-07 | LiNEAR | Video tutorials for the community | 50 UNP<br>200 USD in $LiNEAR for best submission | Optional | Shardnet |
| [019](https://github.com/near/stakewars-iii/blob/main/challenges/019.md) | Published | 2022-08-29   | 2022-09-07 | Everstake | Grafana challenge                                                                 | 15 DNP                                                                | Optional | Shardnet       |
| [020](https://github.com/near/stakewars-iii/blob/main/challenges/020.md) | Published | 2022-09-06   | 2022-09-09 | Everstake | Telegram challenge                                                                | \-                                                                    | Optional | Shardnet       |

Summary for the point system:
* Delegated NEAR Points (DNP): at the end of the Stake Wars program, each Delegated NEAR Point (DNP) will be translated into 500 NEAR tokens delegated to your mainnet account for 1 year.
* Unlocked NEAR Points (UNP): at the end of the Stake Wars program, each Unlocked NEAR Point (UNP) will be translated into 1 unlocked NEAR token, granted to your mainnet account.

Form for Stakewars submissions - Will update when new challenge :): https://docs.google.com/forms/d/e/1FAIpQLScp9JEtpk1Fe2P9XMaS9Gl6kl9gcGVEp3A5vPdEgxkHx3ABjg/viewform

'''
'''--- challenges/community-001.md ---

# Stake Wars: Episode III. Community track 001

* Published on: 2022-08-17
* Updated on: 2022-08-17
* Submitted by: Meta Pool 
* Rewards: 0 Delegated NEAR Points (DNP), 0 Unlocked NEAR Points (UNP) and 20 vouchers of $5000 in credits on Amazon Web Services.

  
## **IMPORTANT NOTES:**

* **This challenge is only for Startups with residence in Latin America**, as requested by Amazon Web Services.
* **This is part of a pilot project**, before taking a possible worldwide coverage for supporting NEAR Protocol’s startups.

Get your chunk-producer node online, support the Latin American projects and communities of NEAR, and win one of the 20 vouchers of $5000 in credits for your Amazon Web Services account for a period of 2 year to run your node validator.

Complete as many tasks indicated in this document and participate

|Task|Description|Points|
| --- | --- | --- |
|1 (mandatory)|Keep your chunk-producer node with a >70% uptime.|25|
|2|Follow Meta Pool (@meta_pool) on twitter.|5|
|3|Join Meta Pool’s Telegram Group.|5|
|4|Join Meta Pool’s Discord Server.|5|
|5|Liquid stake on Meta Pool.|15|
|6|Follow Nativo NFT (@nativonft) on twitter.|5|
|7|Join Nativo NFT Telegram Group.|5|
|8|Join Nativo NFT Discord Server.|5|
|9|Buy 1 NFT on nativonft.app|15|
|10|Follow NEAR P2P DEx (@NearP2P) on twitter.|5|
|11|Join NEAR P2P DEx Telegram Group.|5|
|12|Complete a buying/selling transaction on NEAR P2P DEx|15|
|13|Follow Esccrow Dapp (@esccrow) on twitter.|5|
|14|Complete your first NFT sell on esccrow.finance|15|
|15|Follow Open Web Academy (@owa_academy) on twitter.|5|
|16|Join Open Web Academy Discord Server.|5|
|17|Attend 1 Office Hours on Open Web Academy|15|
|18|Follow Burrito Battle (@burrito_battle) on twitter.|5|
|19|Join Burrito Battle Discord Server.|5|
|20|Mint 1 Burrito NFT on testnet|15|
|21|Follow 4 My Future (@4myfutureapp) on twitter.|5|
|23|Follow NEAR Venezuela (@NearP2P) on twitter.|5|
|24|Join NEAR Venezuela Discord Server.|5|
|25|Follow NEAR Argentina (@NearArgentina) on twitter.|5|
|26|Join NEAR Argentina Discord Server.|5|
|27|Follow NEAR Mexico (@NearMexico) on twitter.|5|
|28|Join NEAR Mexico Discord Server.|5|
||More to be announced coming soon ;)|NA|
||Total|215|

## Acceptance criteria:

* Be among the 200 winning chunk-producer nodes at the end of stake wars
* Be in the top 20 of the community track 001 leaderboard.
* You should submit enough evidence to verify that you completed the tasks.

## Submission form

Here is the submission form, you should include an screenshot as proof of completion for every task: [https://forms.gle/Kpk7SAGLf1MSwkgH9](https://forms.gle/Kpk7SAGLf1MSwkgH9)
'''
'''--- challenges/community-002.md ---
# Community Challenge - Video tutorials
* Published on: 2022-08-19
* Updated on: 2022-08-19
* Submitted by: LiNEAR
* Rewards: 50 UNP + 200 USD in $LiNEAR for best submission

### Description
We believe that in stake war the success of building the community is as important as running validators. So in this challenge, we would like you guys to make video tutorials about NEAR stake war and publish your video to the Internet to benefit latecomers.      

The topic of your video could be anything related to stake war, here are some suggestions that you might consider:
- A brief introduction of the NEAR nightshade sharding, chunk-only producer and stake war.
- How to setup a NEAR validator on major cloud service providers. (Maybe a step-by-step tutorial of the first 4 stake war challenges)
- Setting up a validator is easy, but how to make it stable and always up-to-date might require more efforts. Do you have any tips that could be shared with others?

We actually encourage you guys to record the video in your own language so that we could cover audiences from different regions around the world.

### Deliverable:
- A public accessable link to your video tutorial(s). You can upload it to any public platform as long as it's accessable by everyone.
- Please don't forget to put your mainnet NEAR account ID in the description of the video so that we could know which account to send the rewards :) .

### Acceptance criterias:
- The length of your video should be at least 3 minutes.
- The video must have audio commentary.
- Make sure all the texts and codes in your video are set with proper font size, so that audiences with different devices could easily read them.

### Judging criterias:
- Content
  - Is the topic closely related to stake war? (3 points)
  - Does the tutorial clearly illustrate the topic? (3 points)
  - Does the tutorial have any original content? (3 points)
- Quality
  - Is the video resolution high enough for viewers to easily read texts/codes? (2 points)
  - Is the video well edited so that it doesn't contain unrelated stuff? (2 points)
  - Does the video have subtitles? (2 points)
- Popularity
  - How many views/likes/comments does the video receive by the time we start to judge? (5 points)
 
### Submission
Please submit your work at: https://forms.gle/uNrUFwc1vEHEgQuN7

'''
'''--- challenges/draft-delegation.md ---
# Stake Wars: Episode III. Challenge 000 [DRAFT]
* Published on: 2022-08-17
* Updated on: 2022-08-17
* Submitted by: Open Shards Alliance
* Rewards: Delegated ShardNet NEAR

**NEW VALIDATORS ONLY**
Receive initial delegation for a new validator by creating a PR of this challenge wit your POOL ID

POOL_ID: <POOLID>.factory.shardnet.near

## Challenge submission

* No submission is required for this challenge; it will be evaluated together with the next one (002). 

'''
'''--- challenges/template.md ---
# Stake Wars: Episode III. Challenge 000
* Published on: 2022-07-12
* Updated on: 2022-07-12
* Submitted by: Partner-name

//TODO - 2-row summary of the challenge.

## Deliverables

1. //TODO (title of the deliverable)
2. //TODO (title of the deliverable)
3. //TODO (title of the deliverable)

## 1. TODO (title of the deliverable)

//TODO - Description of the challenge

## 2. TODO (title of the deliverable)

//TODO - Description of the challenge

## 3. TODO (title of the deliverable)

//TODO - Description of the challenge

## Update log

Updated YYYY-MM-DD: TODO

Updated YYYY-MM-DD: TODO

'''
'''--- challenges/troubleshooting.md ---
# Troubleshooting guide for Stake Wars III
* Published on: 2022-07-25
* Updated on: 2022-07-29
 
This guide is made to solve the most common questions related to a node not working as expected. Feel free to make your own contributions or suggestions on what this guide should include.

## My node is not producing chunks/blocks
Not producing means:

```
"num_expected_blocks": XXX,
"num_expected_chunks": XXX, 
"num_produced_blocks": 0,
"num_produced_chunks": 0,
```

Try this 2:

```
near view <POOL_ID> get_staking_key '{}'

cat ~/.near/validator_key.json | grep public_key
```
🗒️  **Both keys must match** . If they DO NOT update the staking pool key ❗ 

Update staking pool key:
```
near call <POOL_ID> update_staking_key '{"stake_public_key": "<PUBLIC_KEY>"}' --accountId <ACCOUNT_ID>
```

If match:
Check validator_key.json

```
cat ~/.near/validator_key.json
```

account_id must be like : xx.factory.shardnet.near
If not update it, save and stop/start neard

## Explorer is not showing my transactions/not updating - not showing my account / pool
In case that explorer.shardnet.near.org is not working, review the RPC status on the corner. 

OK (Green indicator)
![img](./images/rpc-status.png)

RPC not available (Yellow indicator)
![img](./images/rpc-status-down.png)

If it is in other color than green it should be passing unstable behavior. Wait until in stabilize.

In case you can user near CLI to review validators information.

```
near proposals
near validators current
near validators next

```

## I cannot run neard, it shows ‘Failed to open the database’
This is common because there is a current service using the files. Probably another neard service.

Try running the ***top*** command on the terminal and verify there is no *neard* service already running. 

```
top
```

In case it is already running you can verify it status using the following:

```
journalctl -n 100 -f -u neard | ccze -A
```

## My staking pool lost the tokens I delegate to it
In case you delegated tokens to your staking pools before one the hard forks made to the shardnet network, your account could be deleted by the fork.

Just create a new account and delegate enough tokens.

```
near call <staking_pool_id> deposit_and_stake --amount <amount> --accountId <accountId> --gas=300000000000000

```

## My log show: WARN telemetry: Failed to send telemetry data err=Connect(Timeout) ##

This is related to RPC issue, don't worry about it.
You will maybe have some timeout, you can use your localnode by adding ```--nodeUrl 127.0.0.1:3030```

## I want to move my node to other VPS/Cloud provider. 

Do regular steps to mount a node on the new VPS/Cloud and take in consideration this:

1. Sync your NEW node without validator key
2. Stop the NEW node
3. Copy over node_key.json from OLD node to NEW node
4. Copy over validator_key.json from OLD node to NEW node
5. Stop the OLD node
6. Start the NEW node

## A hardfork is announced, what should I do?

On July 27th a third hardfork was done during stake wars to Shardnet. This for upgrading core code and keep nodes with higher stability.

Run the following to upgrade:

```
sudo systemctl stop neard
rm ~/.near/data/*

cd ~/nearcore
git fetch
git checkout 24cbb11ce1e14aa267f787f011935a4465d3537d 
cargo build -p neard --release --features shardnet

cd ~/.near
rm genesis.json
wget https://s3-us-west-1.amazonaws.com/build.nearprotocol.com/nearcore-deploy/shardnet/genesis.json

rm ~/.near/config.json
wget -O ~/.near/config.json https://s3-us-west-1.amazonaws.com/build.nearprotocol.com/nearcore-deploy/shardnet/config.json

sudo systemctl start neard && journalctl -n 100 -f -u neard | ccze -A
```

Also, if you owner account or staking pool doesn't appear is probably that it was removed during hard fork. Make those again.

## NEAR command worked before but now "no matching pair found"
Please always check if there is word "testnet" somewhere in the output of failing command. NEAR CLI is configured to use the "testnet" chain by default, so we need to always explicitly tell it to use "shardnet" by setting environment variable named "NEAR_ENV" (taken from Challenge 1):

```
export NEAR_ENV=shardnet
```

You can also run this command to set the Near testnet Environment persistent (so it's not lost after restart):
```
echo 'export NEAR_ENV=shardnet' >> ~/.bashrc
echo 'export NEAR_ENV=shardnet' >> ~/.bash_profile
source $HOME/.bash_profile
```

## Issues with block/chuck production
Hardware and Internet meet min specs? 
sudo apt install speedtest-cli && speedtest-cli
https://www.vpsbenchmarks.com/

Out of RAM? Set a 16GB Swap file.
```sudo swapoff /swapfile
sudo rm /swapfile
sudo fallocate -l 16G /swapfile
sudo chmod 600 /swapfile
sudo mkswap /swapfile
sudo echo "/swapfile   none    swap    sw    0   0" >> /etc/fstab
sudo swapon /swapfile```

## Uptime calculation
"% chunks online" = (CHUNKS PRODUCED / CHUNKS EXPECTED) * (VALIDATED EPOCHS / TOTAL EPOCHS)

## ***Common Node Errors and Solutions*** by Open Shards Alliance
In case none of the above worked, you can use this guide. In this document you will find a general rules on how to solve problems related to a node validator running on NEAR Protocol. 

* [Common Node Errors and Solutions](https://near-nodes.io/troubleshooting/common-errors) Guide by OSA.

## Ask community

[Join official NEAR Discord server](https://discord.gg/V3Z6CsEJ7Y), where you fill find the #stakewars channel for solving questions.This is a community fueled channel, feel free to contribute.

'''
'''--- commit.md ---
1897d5144a7068e4c0d5764d8c9180563db2fe43

'''
'''--- rules.md ---
### Stake Wars Rules

1. Participating in the program implies you agree with the rules below.
2. The landing page for Stake Wars: Episode 3 is [https://near.org/stakewars/](https://near.org/stakewars/). We publish challenges on the Discord [#stake-wars](https://discord.com/channels/490367152054992913/991851497002381363) channel and host them on [GitHub](https://github.com/near/stakewars-iii).
3. The ID you will have throughout the program is the email address you used for your registration.
4. Stake Wars starts on July 13th 2022, and ends on September 9th 2022. Challenges will be announced regularly throughout the entire duration of the program.
5. Your participation in the program is based on your original work and effort. In other words don’t take someone else’s work and use it as your own.
6. Some Stake Wars challenges may require submissions. Those submissions are considered as public, and are not subject to IP claims.
7. If you receive rewards, you will be responsible for paying taxes that are applicable to you. You may also have to provide some personal data to receive any payout.
8. All Stake Wars communications, including challenges and support for participants, will be made in English.
9. Anyone can join Stake Wars; however, existing mainnet validators (as of July 13th 2022) are not eligible to receive rewards shared as delegated NEAR tokens. Members of Pagoda, Meta Pool, LiNEAR, Everstake and Open Shards Alliance Board are not eligible for any type of rewards.
10. The maximum amount of rewards you can receive is capped to the following limits: maximum 50.000 NEAR delegated to your mainnet account, maximum 500 NEAR granted to your mainnet account.
11. Receiving the rewards may require identity verification. Receiving token delegations at mainnet may be subject to further terms and conditions.
12. Cheating and/or bad behavior gets you disqualified. This includes, but is not limited to creating multiple identities, using fake email addresses, polluting the communication channels. Be nice and respectful to your fellow participants.

### Point System

* Solving each challenge may offer you an amount of points. These are included in the description of the challenge. One challenge can offer multiple types of rewards, depending on the complexity of the work required and how the effort is split into different sections of the challenge. 
* The points are split into 2 categories:
    * Delegated NEAR Points (DNP). At the end of the Stake Wars program, each Delegated NEAR Point (DNP) will be translated into 500 NEAR tokens delegated to your mainnet account for 1 year.
    * Unlocked NEAR Points (UNP). At the end of the Stake Wars program, each Unlocked NEAR Point (UNP) will be translated into 1 unlocked NEAR token, granted to your mainnet account.
* A scoreboard will be published to keep track of all the activity that each participant had throughout the different challenges.

'''