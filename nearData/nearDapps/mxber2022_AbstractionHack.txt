*GitHub Repository "mxber2022/AbstractionHack"*

'''--- README.md ---
# MetaGamerHub

# YouTube Link - Demo

https://youtu.be/3IOdlXf0BVc

# Appyling Bounties for

Mintbase

# 3D Gaming Asset App for NFTs

This is a 3D gaming asset application that exclusively imports NFTs with the specified metadata/animation_type as "model/gltf-binary". The project is built on the NEAR blockchain and utilizes Minbase wallet for transactions, along with Next.js for frontend development.

Website Link: https://abstractionhack.vercel.app/

## Features

- Import NFTs with metadata/animation_type as "model/gltf-binary".
- Utilizes NEAR blockchain for transactions.
- Integration with Minbase wallet for secure transactions.
- Next.js for frontend development, providing a smooth user experience.

## Prerequisites

Before running the application, ensure you have the following installed:

- Node.js
- npm (Node Package Manager)
- NEAR CLI (Command Line Interface)
- Minbase wallet

## Getting Started

To start with this project:

1. Clone the repository.
    ```bash
    git clone https://github.com/mxber2022/AbstractionHack
    ```
   
2. Then, install the required dependencies:

     ```bash
     yarn
     ```

## Local Development

To run the project locally, use:

  ```bash
  yarn dev
  ```

## Configuration

Ensure you have set up the NEAR blockchain environment and configured the Minbase wallet for transactions.

## Usage

1. Start the development server:

```bash
npm run dev
```

2. Open your web browser and navigate to `http://localhost:3000` to access the application.

3. Connect your Minbase wallet to the application for transactions.

4. Import NFTs with metadata/animation_type as "model/gltf-binary" and enjoy using the application!

## Contributing

We welcome contributions from the open-source community to enhance and improve this project. If you have ideas for new features, bug fixes, or any other contributions, please submit a pull request.

## License

This project is licensed under the [MIT License](LICENSE).

## Acknowledgments

- NEAR blockchain community
- Minbase wallet developers
- Next.js developers

## Contact

For any inquiries or support, please contact [mxber2022@gmail.com].

Thank you for using our 3D gaming asset app! We hope you enjoy using it.
'''
'''--- metagamerhub/.env ---
NEXT_PUBLIC_MINTING_CLOSED="false"
NEXT_PUBLIC_SHOW_REWARDS="true"
NEXT_PUBLIC_BASE_URL="https://testnet.mintbase.xyz"
NEXT_PUBLIC_MINTBASE_WALLET_URL="https://testnet.wallet.mintbase.xyz"
NEXT_PUBLIC_NFT_CONTRACT_ADDRESS="musicai.mintspace2.testnet"
NEXT_PUBLIC_PROXY_MINTER_CONTRACT_ADDRESS="1.minsta.mintbus.testnet"
NEXT_PUBLIC_NETWORK="testnet"
NEXT_PUBLIC_APP_TITLE="Minsta Mintbase"
REPLICATE_API_TOKEN="r8_f0lfthgc3HMAjGwWCKeuDneSYGfFmNf0et8el"

'''
'''--- metagamerhub/README.md ---
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

'''
'''--- metagamerhub/next.config.js ---
/** @type {import('next').NextConfig} */
const nextConfig = {}

module.exports = nextConfig

'''
'''--- metagamerhub/package.json ---
{
  "name": "metagamerhub",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@mintbase-js/react": "0.5.0-beta.5",
    "@mintbase-js/sdk": "^0.5.1-beta.5",
    "@mintbase-js/storage": "^0.5.1-beta.5",
    "@react-three/drei": "^9.96.5",
    "@react-three/fiber": "^8.15.15",
    "@tanstack/react-query": "^4.35.3",
    "@types/three": "^0.160.0",
    "dotenv": "^16.4.1",
    "graphql": "^16.7.1",
    "graphql-request": "^6.1.0",
    "next": "14.0.4",
    "nft.storage": "^7.1.1",
    "react": "^18",
    "react-dom": "^18",
    "three": "^0.160.1",
    "usehooks-ts": "^2.12.1"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.0.1",
    "postcss": "^8",
    "tailwindcss": "^3.3.0",
    "typescript": "^5"
  }
}

'''
'''--- metagamerhub/postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

'''
'''--- metagamerhub/public/next.svg ---
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
'''
'''--- metagamerhub/public/vercel.svg ---
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 283 64"><path fill="black" d="M141 16c-11 0-19 7-19 18s9 18 20 18c7 0 13-3 16-7l-7-5c-2 3-6 4-9 4-5 0-9-3-10-7h28v-3c0-11-8-18-19-18zm-9 15c1-4 4-7 9-7s8 3 9 7h-18zm117-15c-11 0-19 7-19 18s9 18 20 18c6 0 12-3 16-7l-8-5c-2 3-5 4-8 4-5 0-9-3-11-7h28l1-3c0-11-8-18-19-18zm-10 15c2-4 5-7 10-7s8 3 9 7h-19zm-39 3c0 6 4 10 10 10 4 0 7-2 9-5l8 5c-3 5-9 8-17 8-11 0-19-7-19-18s8-18 19-18c8 0 14 3 17 8l-8 5c-2-3-5-5-9-5-6 0-10 4-10 10zm83-29v46h-9V5h9zM37 0l37 64H0L37 0zm92 5-27 48L74 5h10l18 30 17-30h10zm59 12v10l-3-1c-6 0-10 4-10 10v15h-9V17h9v9c0-5 6-9 13-9z"/></svg>
'''
'''--- metagamerhub/src/app/constants.ts ---
require("dotenv").config();

const appName: string = process.env.NEXT_PUBLIC_APP_TITLE || "MINTBASE";
const network = process.env.NEXT_PUBLIC_NETWORK || "mainnet";
const proxyContractAddress =
  process.env.NEXT_PUBLIC_PROXY_MINTER_CONTRACT_ADDRESS ||
  "1.minsta.mintbus.near";
const tokenContractAddress =
  process.env.NEXT_PUBLIC_NFT_CONTRACT_ADDRESS || "moments.mintbase1.near";

const mintbaseBaseUrl =
  process.env.NEXT_PUBLIC_BASE_URL || "https://mintbase.xyz";

const mintbaseWalletUrl =
  process.env.NEXT_PUBLIC_MINTBASE_WALLET_URL ||
  "https://wallet.mintbase.xyz";

const twitterText =
  process.env.NEXT_PUBLIC_TWITTER ||
  "Exploring%20unforgettable%20moments%20at%20%23Mintbase%20%40Mintbase%20%40NEARProtocol%20%23BOS%20%23NEAR%0aMint%20yours%20here%3A%20https%3A%2F%2Fminsta.mintbase.xyz";

export const constants = {
  appName,
  proxyContractAddress,
  tokenContractAddress,
  network,
  mintbaseBaseUrl,
  mintbaseWalletUrl,
  twitterText,
  isClosed: process.env.NEXT_PUBLIC_MINTING_CLOSED === "true" || false,
  showRewards: process.env.NEXT_PUBLIC_SHOW_REWARDS === "true" || false,
};

'''
'''--- metagamerhub/src/app/data/fallback.ts ---

export const MINSTA_META = {
  description: "Share your best moments with Mintbase and Minsta!",
  title: "Mint Moments on Mintbase",
  twitter:
    "Explore%20unforgettable%20moments%20at%20%2Mintbase%20%40Mintbase%20%40NEARProtocol%20%23BOS%20%23NEAR",
  image: "./images/thumbnail.png",
};

export const MINSTA_TEXTS = {
  prizes: {
    one: "10N",
    two: "5N",
    three: "5N",
    title_one: "Top 10 on the Leaderboard",
    title_two: "Top 11-20 on the Leaderboard",
    title_three: "Most liked tweet with the hashtag MINSTA",
  },
  about: {
    first: "Take a picture",
    sec: "Upload and it will mint as an NFT",
    third: "Climb up the Leaderboard by minting",
  },
};

'''
'''--- metagamerhub/src/app/data/fetch.ts ---

export const REQUEST_HEADERS = {
  "Cache-Control": "public, max-age=31536000, immutable",
  "mb-api-key": "omni-site",
};

export enum REQUEST_METHODS {
  get = "GET",
  post = "POST",
}

export const REQUEST_OPTIONS = (method: REQUEST_METHODS) => {
  return { method: method, headers: REQUEST_HEADERS };
};

export const fetchApi = async <T>(
  url: string,
  method: REQUEST_METHODS
): Promise<T | any> => {
  try {
    const result = await fetch(url, REQUEST_OPTIONS(method));

    if (result) {
      return await result.json();
    }
  } catch (error) {
    console.error(error);
  }
};
'''
'''--- metagamerhub/src/app/data/getBlockedNfts.ts ---
import { REQUEST_METHODS, fetchApi } from "./fetch";

export const getBlockedNfts = async (): Promise<any> => {
  const fetchUrl = `https://surface-api-z3w7d7dnea-ew.a.run.app/blocked-nfts`;

  return fetchApi(fetchUrl, REQUEST_METHODS.get);
};

'''
'''--- metagamerhub/src/app/data/graphqlService.ts ---
import { nearEndpoints } from "./network";
import { constants } from "../constants";
import request, { gql } from "graphql-request";

export type GqlFetchResult<T> = {
  data?: T;
  error?: string;
};

export const graphqlQLServiceNew = async ({
  query,
  variables,
  network,
}: {
  query: any;
  variables?: Record<string, unknown>;
  network?: "testnet" | "mainnet";
}) => {
  const net = network ?? constants.network;
  const isTestnet = net === "testnet";

  const baseUrl = isTestnet
    ? nearEndpoints.testnet.graph
    : nearEndpoints.mainnet.graph;

  const headers = {
    "content-type": "application/json",
    "mb-api-key": "anon",
    "Access-Control-Allow-Origin": "*"
  };

  const queryLoad = () => request(baseUrl, query, variables, headers);

  return await queryLoad();
};

export const graphQLService = async ({
  query,
  variables,
  network,
}: {
  query: any;
  variables?: Record<string, unknown>;
  network?: "testnet" | "mainnet";
}) => {
  try {
    const data = await graphQlFetch(query, variables, network).then(
      async (data: Response) => {
        const res = await data.json();
        return res.data;
      }
    );

    return { data };
  } catch (error) {
    console.log(error, "error");
    return { error: `Query Error: ${error}` };
  }
};

export const graphQlFetch = async (
  query: string,
  variables: any,
  network?: "testnet" | "mainnet"
): Promise<Response> => {
  const net = network ?? constants.network;
  const isTestnet = net === "testnet";

  const baseUrl = isTestnet
    ? nearEndpoints.testnet.graph
    : nearEndpoints.mainnet.graph;

  const res = fetch(baseUrl, {
    method: "POST",
    body: JSON.stringify({
      query: query,
      variables: variables,
    }),
    headers: {
      "content-type": "application/json",
      "mb-api-key": "omni-site",
    },
  });

  return await res;
};

'''
'''--- metagamerhub/src/app/data/network.ts ---
export const nearEndpoints = {
  testnet: {
    graph: "https://graph.mintbase.xyz/testnet",
  },
  mainnet: {
    graph: "https://graph.mintbase.xyz/",
  },
};

'''
'''--- metagamerhub/src/app/data/queries/feed.graphl.ts ---
import { gql } from 'graphql-request';

export const FETCH_FEED = gql`
  query minsta_fetch_feed_minted_tokens(
    $accountId: String!
    $contractAddress: String
    $limit: Int
    $offset: Int
  ) {
    token: mb_views_nft_tokens(
      where: {
        minter: { _eq: $accountId }
        nft_contract_id: { _eq: $contractAddress }
        burned_timestamp: { _is_null: true }
        metadata_content_flag: { _is_null: true }
        nft_contract_content_flag: { _is_null: true }
      }
      order_by: { minted_timestamp: desc },
       offset: $offset,
       limit: $limit
    ) {
      id: token_id
      createdAt: minted_timestamp
      media
      title
      description
      metadata_id
    }
    mb_views_nft_tokens_aggregate(where: {minter: {_eq: $accountId}, nft_contract_id: {_eq: $contractAddress}, burned_timestamp: {_is_null: true}}) {
      aggregate {
      count
      }
    }
  }
`;

export const FETCH_FIRST_TOKEN = gql`
query minsta_fetch_firstToken($accountId: String!, $contractAddress: String) {
  token: mb_views_nft_tokens(where: {minter: {_eq: $accountId}, nft_contract_id: {_eq: $contractAddress}, 
    burned_timestamp: {_is_null: true}, metadata_content_flag: {_is_null: true}, nft_contract_content_flag: {_is_null: true}}, order_by: {minted_timestamp: desc}, limit: 1, offset: 0) {
    id: token_id
    createdAt: minted_timestamp
    media
    title
    description
    metadata_id
  }
}
`
'''
'''--- metagamerhub/src/app/data/queries/meta.graphql.ts ---
import { gql } from "graphql-request";

export const FETCH_META = gql`
query v2_omnisite_GetMetadataStaticReferences($metadataId: String!) {
  nft_metadata(where: {id: {_eq: $metadataId}}) {
    title
    media
    description
    nft_contract_id
  }
    owners: nft_tokens(
      where: {
        metadata_id: {_eq: $metadataId },
        burned_timestamp: { _is_null: true }
      }
      distinct_on: owner
    ) {
      owner
    }
}
`;

'''
'''--- metagamerhub/src/app/data/useGraphQlQuery.ts ---
import type {
  QueryObserverResult,
  UseQueryOptions,
} from '@tanstack/react-query'
import { useQuery } from '@tanstack/react-query'
import { graphQLService, graphqlQLServiceNew } from './graphqlService'

interface UseGraphQlQueryResult {
  data: any
  error: any
  isLoading: boolean
  refetch: () => Promise<QueryObserverResult<unknown, unknown>>
  isFetching: boolean
  status: 'error' | 'success' | 'loading'
}

export interface GQLQueryOptions {
  queryName: string
  query: string
  variables: Record<string, any>
  queryOpts?: any
  queryParams?: any[]
}

export const useGraphQlQuery = ({
  queryName,
  query,
  variables,
  queryOpts = {},
  queryParams = [],
}: GQLQueryOptions): UseGraphQlQueryResult => {
  const queryObj =
    queryParams.length > 0 ? [queryName, ...queryParams] : [queryName]

  const { data, error, isLoading, refetch, isFetching, status } = useQuery(
    queryObj,
    () => graphqlQLServiceNew({ query, variables }),
    queryOpts
  )

  return { data, error, isLoading, refetch, isFetching, status }
}

'''
'''--- metagamerhub/src/app/globals.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

/* :root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
} */

'''
'''--- metagamerhub/src/app/hooks/useBlockedNfts.ts ---
import { getBlockedNfts } from "../data/getBlockedNfts";
import { useQuery } from "@tanstack/react-query";

export const useBlockedNfts = () => {
  const { data: blockedNfts } = useQuery(
    ["q_getBlockedNfts"],
    () => getBlockedNfts(),
    {
      initialData: null, // Set initial data as null
      refetchInterval: 30000, // Automatically refetch every 120000 (2mins)
    }
  );

  return { blockedNfts };
};
'''
'''--- metagamerhub/src/app/hooks/useFirstToken.ts ---
import { FETCH_FIRST_TOKEN } from "../data/queries/feed.graphl";
import { useGraphQlQuery } from "../data/useGraphQlQuery";
import { constants } from "../constants";
import { useEffect, useState } from "react";

export const useFirstToken: any = () => {
  const [newToken, setNewToken] = useState<any>(null);
  const [tokensFetched, setTokensFetched] = useState<any>(null);

  const queryObj = {
    queryName: "q_FETCH_FIRST_TOKEN",
    query: FETCH_FIRST_TOKEN,
    variables: {
      accountId: constants.proxyContractAddress,
      contractAddress: constants.tokenContractAddress,
    },
    queryOpts: { staleTime: Infinity, refetchInterval: 30000 },
  };

  const { data, isLoading, refetch: refetchToken } = useGraphQlQuery(queryObj);

  useEffect(() => {
    // media delay

    if (tokensFetched && tokensFetched?.length > 1) {
      // window.location.reload();
    }
    // new media aint null
    if (data?.token[0]?.media !== null) {
      // but the newToken previous stored is somehow an async bug so it re-state the new media
      if (newToken?.media == null) {
        setNewToken(data?.token[0]);
      }

      // previous newToken is outdated like new coming media is id 301 and previous token 298
      if (newToken?.id) {
        if (data?.token[0]?.id !== newToken?.id) {

          // if isnt in direct order reload the page to organize the order.
          if (
            Number(data?.token[0]?.id) !== Number(newToken?.id) + 1 &&
            !isLoading
          ) {
            // window.location.reload();
          }
        }
      }
    }

    // first load

    if (
      (data?.token[0] && !newToken) ||
      (data?.token[0] && tokensFetched?.length < 1)
    ) {
      setNewToken(data?.token[0]);
    }

    // check if the newToken coming is the next id.

    if (
      newToken !== null &&
      Number(data?.token[0]?.id) === Number(newToken?.id) + 1 &&
      data?.token[0]?.media
    ) {
      let newTokensFetched = null;

      if (!tokensFetched) {
        newTokensFetched = [newToken];
      }

      if (tokensFetched?.length == 1) {
        newTokensFetched = [newToken, tokensFetched];
      }
      if (tokensFetched?.length > 1) {
        newTokensFetched = [newToken, ...tokensFetched];
      }

      setTokensFetched(newTokensFetched);
      setNewToken(data?.token[0]);
    }
  }, [data?.token, newToken, tokensFetched]);

  return {
    newToken: !isLoading ? newToken : null,
    tokensFetched,
    isLoading,
  };
};

'''
'''--- metagamerhub/src/app/utils/generateRandomId.ts ---
export const generateRandomId = (length: number) => {
    let result = "";
    const characters =
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    const charactersLength = characters.length;
    for (var i = 0; i < length; i++) {
      result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
  };
  
'''
'''--- metagamerhub/tailwind.config.ts ---
import type { Config } from 'tailwindcss'

const config: Config = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      backgroundImage: {
        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
        'gradient-conic':
          'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',
      },

      colors: {
        // Configure your color palette here
        'mine': 'rgb(255, 244, 227)',
        'chilizNav': "#f3f4f8",
        'chilizColor': 'rgb(247, 108, 108)',
      },

      fontFamily: {
        chiliz: ['Comic Sans MS', 'cursive'],
      },

    },
  },
  plugins: [],
}
export default config

'''
'''--- metagamerhub/tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"],
  "transpilePackages": ["three"]
}

'''