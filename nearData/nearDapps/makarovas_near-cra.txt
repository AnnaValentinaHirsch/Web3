*GitHub Repository "makarovas/near-cra"*

'''--- .env ---
# Values defined here will be available in your app using `process.env` when you
# run locally with `yarn start`
#
# More info: https://create-react-app.dev/docs/adding-custom-environment-variables/
REACT_APP_NEAR_ENV=testnet
REACT_APP_RPC_URL=https://rpc.testnet.near.org
REACT_APP_WALLET_URL=https://wallet.testnet.near.org
REACT_APP_HELPER_URL=https://helper.testnet.near.org
REACT_APP_EXPLORER_URL=https://explorer.testnet.near.org
REACT_APP_CONTRACT_NAME=guest-book.testnet
REACT_APP_LOCALSTORAGE_PREFIX=guest-book
'''
'''--- README.md ---
## Available Scripts

In the project directory, you can run:

### `yarn start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `yarn test`

Launches the test runner in the interactive watch mode.\

### `yarn build`

Builds the app for production to the `build` folder.\

### `yarn eject`

**Note: this is a one-way operation. Once you `eject`, you canâ€™t go back!**

'''
'''--- package.json ---
{
  "name": "app",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@ahalabs/cra-template": "0.3.3",
    "buffer": "^6.0.3",
    "near-api-js": "^1.0.0",
    "near-units": "^0.1.9",
    "npm": "^8.19.2",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-scripts": "5.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@testing-library/jest-dom": "^5.14.1",
    "@testing-library/react": "^12.0.0",
    "@testing-library/user-event": "^13.2.1",
    "@types/jest": "^27.0.1",
    "@types/node": "^16.7.13",
    "@types/react": "^17.0.20",
    "@types/react-dom": "^17.0.9",
    "typescript": "^4.4.2"
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/components/Nav/Nav.module.css ---
/* This is a CSS Module; see https://create-react-app.dev/docs/adding-a-css-modules-stylesheet/ */
.nav {
  align-items: center;
  display: grid;
  grid-gap: var(--spacing-l);
  grid-template-columns: repeat(auto-fit, minmax(12em, 1fr));
  justify-content: space-between;
  margin-bottom: var(--spacing-m);
  padding: var(--spacing-xs) var(--spacing-s);
}

.nav > *:last-child {
  text-align: right;
}

.title img {
  display: inline-block;
  height: var(--fs-heading-1);
  width: var(--fs-heading-1);
  vertical-align: middle;
}
'''
'''--- src/components/Nav/near-logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 288 288"><defs><style>.cls-1{fill:gray;}</style></defs><g id="Layer_1" data-name="Layer 1"><path class="cls-1" d="M187.58,79.81l-30.1,44.69a3.2,3.2,0,0,0,4.75,4.2L191.86,103a1.2,1.2,0,0,1,2,.91v80.46a1.2,1.2,0,0,1-2.12.77L102.18,77.93A15.35,15.35,0,0,0,90.47,72.5H87.34A15.34,15.34,0,0,0,72,87.84V201.16A15.34,15.34,0,0,0,87.34,216.5h0a15.35,15.35,0,0,0,13.08-7.31l30.1-44.69a3.2,3.2,0,0,0-4.75-4.2L96.14,186a1.2,1.2,0,0,1-2-.91V104.61a1.2,1.2,0,0,1,2.12-.77l89.55,107.23a15.35,15.35,0,0,0,11.71,5.43h3.13A15.34,15.34,0,0,0,216,201.16V87.84A15.34,15.34,0,0,0,200.66,72.5h0A15.35,15.35,0,0,0,187.58,79.81Z"/></g></svg>
'''
'''--- src/components/Nav/react-logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
'''
'''--- src/contracts/guest-book.ts ---
import * as naj from "near-api-js";
import { Gas, NEAR } from "near-units";
import { Buffer } from "buffer";
import { call, view, wallet } from "../utils/near";

/**
 * The contract wrapped by this file.
 * (This is the contract used in https://github.com/near-examples/guest-book)
 *
 * We *could* use `process.env.REACT_APP_CONTRACT_NAME` in this file, since the
 * template started with that environment variable set to `guest-book.testnet`.
 *
 * BUT, the idea of files in `src/contracts` is that they each wrap a specific
 * contract. If the env var `REACT_APP_CONTRACT_NAME` changes, this file is
 * still a wrapper around the guest book contract.
 */
export const CONTRACT_NAME = "guest-book.testnet";

/**
 * This is a Contract object instantiated using near-api-js.
 *
 * But this does not provide any TypeScript types! Using this approach makes it
 * hard for you and your collaborators to tell what arguments you can pass to
 * `getMessages` and `addMessage`.
 *
 * See other exports for a fully-typed approach instead.
 */
export const Untyped = new naj.Contract(wallet.account(), CONTRACT_NAME, {
  viewMethods: ["getMessages"],
  changeMethods: ["addMessage"],
});

/**
 * The data structure returned by `getMessages`
 */
export interface Message {
  premium: boolean;
  sender: string;
  text: string;
}

/**
 * Get most recent 10 messages
 */
export async function getMessages(): Promise<Message[]> {
  return view(CONTRACT_NAME, "getMessages");
}

/**
 * Add a new message to the guest book.
 *
 * Whoever is signed in (`wallet.account()`) will be set as the `sender`
 *
 * If an `attachedDeposit` of at least 0.01 NEAR is included, the message will
 * be set as `premium`.
 *
 * @param args.text The text of the message
 * @param options.attachedDeposit Send at least 0.01 NEAR (`NEAR.parse('0.1')`) for the message to be considered "premium"
 * @param options.gas Max amount of gas that method call can use; default is 30 Tgas (roughly 30ms of processing time), max allowed is 300 Tgas; can include with `Gas.parse('150 Tgas')
 * @param options.walletMeta Metadata to send the NEAR Wallet if using it to sign transactions.
 * @param options.walletCallbackUrl Callback url to send the NEAR Wallet if using it to sign transactions.
 * @param options.stringify Convert input arguments into a bytes array. By default the input is treated as a JSON. This is useful if the contract accepts Borsh (see https://borsh.io)
 */
export async function addMessage(
  args: {
    text: string;
  },
  options?: {
    attachedDeposit?: NEAR;
    gas?: Gas;
    walletMeta?: string;
    walletCallbackUrl?: string;
    stringify?: (input: any) => Buffer;
  }
): Promise<void> {
  return call(CONTRACT_NAME, "addMessage", args, options);
}

'''
'''--- src/index.css ---
:root {
  /* Typographic Scale */
  --base-font-size: 18px;
  --fs-heading-1: 1.9375rem;
  --fs-heading-2: 1.5625rem;
  --fs-heading-3: 1.25rem;
  --fs-heading-4: var(--base-font-size);
  --fs-body: var(--base-font-size);
  --fs-small: 0.875rem;
  --fs-micro: 0.75rem;

  /* Font Family */
  --sans: system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif;
  --monospace: "Source Code Pro", monospace;

  /* Font Weights */
  --fw-regular: 400;
  --fw-bold: 600;
  --fw-black: 700;

  /* Line Heights */
  --lh-headings: 1.3;
  --lh-copy: 1.5;

  /* Spacing Scale */
  --base-spacing: 0.5rem;
  --spacing-xs: calc(var(--base-spacing) / 2);
  --spacing-s: var(--base-spacing);
  --spacing-m: calc(var(--base-spacing) * 2);
  --spacing-l: calc(var(--base-spacing) * 3);
  --spacing-xl: calc(var(--base-spacing) * 4);
  --spacing-xxl: calc(var(--base-spacing) * 5);

  /* Sizes */
  --header-height: 80px;
  --input-height: 48px;
  --input-height--small: 40px;

  /* Border Radius */
  --br-base: var(--base-spacing);
  --br-small: 0.375rem;

  /* Colors */
  --white: white;
  --black: #111618;

  --gray-100: #fafafa;
  --gray-200: #f0f0f1;
  --gray-300: #e5e5e6;
  --gray-400: #d5d4d8;
  --gray-500: #a2a2a8;
  --gray-600: #72727a;
  --gray-700: #3f4045;
  --gray-800: #272729;

  --red-100: #fef2f2;
  --red-200: #ffdedf;
  --red-300: #ffbdbe;
  --red-400: #ff8588;
  --red-500: #fc5b5b;
  --red-600: #dc1f25;
  --red-700: #a00005;
  --red-800: #450002;

  --orange-100: #fff6ed;
  --orange-200: #ffecd6;
  --orange-300: #ffdbb2;
  --orange-400: #ffc785;
  --orange-500: #ffb259;
  --orange-600: #e78513;
  --orange-700: #995200;
  --orange-800: #452500;

  --green-100: #ecfdf5;
  --green-200: #c8f6e0;
  --green-300: #90e9c5;
  --green-400: #4dd5a6;
  --green-500: #00c08b;
  --green-600: #008d6a;
  --green-700: #005a46;
  --green-800: #00261c;

  --blue-100: #f0f9ff;
  --blue-200: #d6edff;
  --blue-300: #8fcdff;
  --blue-400: #2b9af4;
  --blue-500: #0072ce;
  --blue-600: #005497;
  --blue-700: #003560;
  --blue-800: #001729;
}

/* invert colors in dark mode â€“ designers would not approve! */
@media (prefers-color-scheme: dark) {
  :root {
    --black: white;
    --white: #111618;

    --gray-800: #fafafa;
    --gray-700: #f0f0f1;
    --gray-600: #e5e5e6;
    --gray-500: #d5d4d8;
    --gray-400: #a2a2a8;
    --gray-300: #72727a;
    --gray-200: #3f4045;
    --gray-100: #272729;

    --red-800: #fef2f2;
    --red-700: #ffdedf;
    --red-600: #ffbdbe;
    --red-500: #ff8588;
    --red-400: #fc5b5b;
    --red-300: #dc1f25;
    --red-200: #a00005;
    --red-100: #450002;

    --orange-800: #fff6ed;
    --orange-700: #ffecd6;
    --orange-600: #ffdbb2;
    --orange-500: #ffc785;
    --orange-400: #ffb259;
    --orange-300: #e78513;
    --orange-200: #995200;
    --orange-100: #452500;

    --green-800: #ecfdf5;
    --green-700: #c8f6e0;
    --green-600: #90e9c5;
    --green-500: #4dd5a6;
    --green-400: #00c08b;
    --green-300: #008d6a;
    --green-200: #005a46;
    --green-100: #00261c;

    --blue-800: #f0f9ff;
    --blue-700: #d6edff;
    --blue-600: #8fcdff;
    --blue-500: #2b9af4;
    --blue-400: #0072ce;
    --blue-300: #005497;
    --blue-200: #003560;
    --blue-100: #001729;
  }
}

* {
  box-sizing: border-box;
}

html,
body {
  height: 100%;
}

html {
  background-color: var(--white);
  color: var(--gray-600);
  line-height: 1.5;
  font-family: var(--sans);
  font-size: var(--base-font-size);
  font-weight: var(--fw-regular);
}

body {
  margin: 0 auto;
}

.content-wrapper {
  max-width: 440px;
  margin: 0 auto;
  text-align: center;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: var(--fw-black);
  color: var(--black);
  margin: 0;
}

img,
picture {
  display: block;
}

a,
.link {
  color: var(--blue-500);
  text-decoration: none;
  padding: 0;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--blue-400);
}

strong {
  font-weight: var(--fw-bold);
}

label {
  display: block;
}

code {
  padding: 0.2em 0.4em;
  margin: 0;
  font-size: 85%;
  font-family: var(--monospace);
  background-color: var(--gray-200);
  border-radius: 6px;
}

button,
.button,
input,
select {
  font: inherit;
  outline: none;
}

button,
.button {
  background-color: var(--black);
  border-radius: var(--br-small);
  border: none;
  color: var(--white);
  cursor: pointer;
  display: inline-block;
  font-size: var(--fs-micro);
  font-weight: var(--fw-bold);
  padding: var(--spacing-xs) var(--spacing-s);
}

button:hover,
.button:hover,
button:focus,
.button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
  text-decoration: none;
}
button:active,
.button:active {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.1) inset;
}
button.link,
.button.link {
  background: none;
  box-shadow: none;
  display: inline;
}
[disabled] button,
button[disabled],
.button[disabled] {
  box-shadow: none;
  background-color: var(--gray-300);
  color: var(--gray-500);
  cursor: not-allowed;
  transform: none;
}

input,
select {
  background-color: var(--white);
  border: 2px solid var(--gray-300);
  border-radius: 0.5em;
  color: var(--gray-700);
  padding: 0 var(--spacing-m);
  height: var(--input-height);
  width: 100%;
}

input.error,
select.error {
  border-color: var(--red-500);
}

.errorMessage {
  color: var(--red-600);
  font-size: var(--fs-micro);
  line-height: var(--lh-copy);
  margin-top: var(--spacing-s);
}
input::selection {
  background-color: var(--blue-400);
  color: var(--white);
}

input:hover {
  background-color: var(--gray-100);
}

input:focus,
input:active {
  color: var(--gray-700);
  border-color: var(--blue-400);
}

.container {
  margin: 0 auto;
  padding: 0 var(--spacing-m);
  width: 100%;
  max-width: 40rem;
}

'''
'''--- src/react-app-env.d.ts ---
/// <reference types="react-scripts" />

'''
'''--- src/setupTests.ts ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- src/utils/near.ts ---
import * as naj from "near-api-js";
import { Gas, NEAR } from "near-units";

// TODO: remove pending https://github.com/near/near-api-js/issues/757
import { Buffer } from "buffer";
window.Buffer = Buffer;

export const near = new naj.Near({
  keyStore: new naj.keyStores.BrowserLocalStorageKeyStore(),
  networkId: process.env.REACT_APP_NEAR_NETWORK!,
  nodeUrl: process.env.REACT_APP_RPC_URL!,
  walletUrl: process.env.REACT_APP_WALLET_URL,
  helperUrl: process.env.REACT_APP_HELPER_URL,

  // TODO: remove `headers` argument pending https://github.com/near/near-api-js/pull/772
  headers: {},
});

/**
 * Interface to NEAR Wallet
 */
export const wallet = new naj.WalletConnection(
  near,

  // TODO: remove this second argument to WalletConnection pending https://github.com/near/near-api-js/pull/772
  process.env.REACT_APP_LOCALSTORAGE_PREFIX!
);

/**
 * Make a view call to a NEAR smart contract.
 * @see {@link https://docs.near.org/docs/develop/front-end/rpc#call-a-contract-function}
 *
 * near-api-js requires instantiating an "account" object, but this is NOT
 * used to sign view functions. This `view` function will instantiate an
 * account object for the provided `contract`, essentially causing it to view
 * itself.
 *
 * @param contract NEAR account where the contract is deployed
 * @param method The view-only method (no state mutations) name on the contract as it is written in the contract code
 * @param args Any arguments to the view contract method, as an object
 * @param options.parse Parse the result of the call. Receives a Buffer (bytes array) and converts it to any object. By default result will be treated as json.
 * @param options.stringify Convert input arguments into a bytes array. By default the input is treated as a JSON. This is useful if the contract accepts Borsh (see https://borsh.io)
 * @returns {Promise<any>}
 */
export async function view(
  contract: string,
  method: string,
  args: Record<string, any> = {},
  options: {
    parse?: (response: Uint8Array) => any;
    stringify?: (input: any) => Buffer;
  } = {}
): Promise<any> {
  const account = await near.account(contract);
  return account.viewFunction(contract, method, args, options);
}

/**
 * Make a change call to a NEAR smart contract.
 * @see {@link https://docs.near.org/docs/develop/front-end/rpc#call-a-contract-function}
 *
 * The account object accessible at `wallet.account()` will be used to sign this transaction.
 *
 * @param contract NEAR account where the contract is deployed
 * @param method The method name on the contract as it is written in the contract code
 * @param args Any arguments to the method, as an object
 * @param options.gas Max amount of gas that method call can use; default is 30 Tgas (roughly 30ms of processing time), max allowed is 300 Tgas; can include with `Gas.parse('150 Tgas')
 * @param options.attachedDeposit Amount of NEAR (in yoctoNEAR) to send together with the call, can include with `NEAR.parse('0.1')`
 * @param options.walletMeta Metadata to send the NEAR Wallet if using it to sign transactions.
 * @param options.walletCallbackUrl Callback url to send the NEAR Wallet if using it to sign transactions.
 * @param options.stringify Convert input arguments into a bytes array. By default the input is treated as a JSON. This is useful if the contract accepts Borsh (see https://borsh.io)
 */
export async function call(
  contract: string,
  method: string,
  args: Record<string, any> = {},
  options?: {
    gas?: Gas;
    attachedDeposit?: NEAR;
    walletMeta?: string;
    walletCallbackUrl?: string;
    stringify?: (input: any) => Buffer;
  }
): Promise<void> {
  const currentUser = wallet.account();
  if (!currentUser) {
    throw new Error("Must sign in before calling a change method");
  }
  await currentUser.functionCall({
    contractId: contract,
    methodName: method,
    args,
    ...(options ?? {}),
  });
}

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}

'''