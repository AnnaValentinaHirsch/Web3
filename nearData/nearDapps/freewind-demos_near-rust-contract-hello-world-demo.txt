*GitHub Repository "freewind-demos/near-rust-contract-hello-world-demo"*

'''--- Cargo.toml ---
[package]
name = "hello"
version = "1.0.0"
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "4.0.0"

'''
'''--- README.md ---
near-rust-contract-hello-world-demo
=================================

用near+rust写一个简单的hello world合约

```
./run.sh
```
'''
'''--- run.sh ---
#!/usr/bin/env bash

cargo build --target wasm32-unknown-unknown --release

# NOTE if no '--force', it will deploy the contract to the previous address,
# and the `$CONTRACT_NAME new` will fail by `The contract has already been initialized`
near dev-deploy --wasmFile ./target/wasm32-unknown-unknown/release/hello.wasm --force

source ./neardev/dev-account.env

near call $CONTRACT_NAME new --accountId $CONTRACT_NAME

near call $CONTRACT_NAME set_name '{"name":"rust2"}' --accountId $CONTRACT_NAME

near view $CONTRACT_NAME hello --accountId $CONTRACT_NAME
'''
'''--- src/lib.rs ---
use near_sdk::{log, near_bindgen};
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};

#[near_bindgen]
#[derive(Default, BorshDeserialize, BorshSerialize, Debug)]
pub struct Hello {
    name: String,
}

#[near_bindgen]
impl Hello {
    // NOTE #[init] is required, otherwise it will fail to compile, or the method `new` is not callable from command line
    #[init]
    pub fn new() -> Self {
        Self {
            name: "rust".to_string()
        }
    }

    pub fn hello(&self) -> String {
        return format!("Hello, {}!", self.name.as_str()).to_string();
    }

    pub fn set_name(&mut self, name: &String) {
        self.name = String::from(name);
        log!("Set name to {}", name);
    }
}
'''