*GitHub Repository "near/pm2-promise"*

'''--- .travis.yml ---
sudo: required
dist: trusty
language: node_js
node_js:
  - "12"
  - "14"

script: npm run test

notifications:
  email:
    on_success: never
    on_failure: always

'''
'''--- README.md ---
# pm2-promise

[![NPM version][npm-image]][npm-url]
[![Downloads][downloads-image]][npm-url]
[![Build Status][travis-image]][travis-url]

pm2-promise is a tiny library that adds promise awareness to pm2

## Installation

```sh
npm install pm2-promise
```

[downloads-image]: https://img.shields.io/npm/dm/pm2-promise.svg
[npm-url]: https://www.npmjs.com/package/pm2-promise
[npm-image]: https://img.shields.io/npm/v/pm2-promise.svg

[travis-url]: https://travis-ci.org/3axap4eHko/pm2-promise
[travis-image]: https://img.shields.io/travis/3axap4eHko/pm2-promise/master.svg
'''
'''--- __tests__/index.js ---
const pm2 = require('../index');
const API = pm2.custom;

describe('PM2 promise test suite', () => {
  it('Should have non-zero methods', () => {
    const methods = Object.keys(API.prototype);
    expect(methods.length).toBeGreaterThan(0);
  });

  it('Should have the same methods as original PM2', () => {
    Object.keys(API.prototype).forEach(name => {
      expect(typeof pm2[name]).toBe('function');
    });
  });

  it('Should be able to connect to daemon', async () => {
    await pm2.connect();
    const bus = await pm2.launchBus();
    expect(bus).toBeDefined();
    await pm2.close();
  });
});

'''
'''--- index.js ---
const API = require('pm2').custom;

const descriptors = Object.getOwnPropertyDescriptors(API.prototype);

Object.keys(descriptors).forEach(name => {
  const descriptor = descriptors[name];
  if (/^[a-z]/.test(name) && typeof descriptor.value === 'function') {
    const method = descriptor.value;

    descriptor.value = function (...args) {
      // If last argument is function then we have callback
      if (typeof args[args.length - 1] === 'function') {
        return method.apply(this, args);
      } else {
        return new Promise((resolve, reject) => {
          args.push((error, value) => {
            if (error) {
              reject(error);
            } else {
              resolve(value);
            }
          });
          return method.apply(this, args);
        }).catch(error => {
          throw error;
        });
      }
    };
    Object.defineProperty(API.prototype, name, descriptor);
  }
});

module.exports = new API;
module.exports.custom = API;

'''
'''--- package.json ---
{
  "name": "pm2-promise",
  "version": "2.0.1",
  "description": "Promised version PM2",
  "main": "index.js",
  "scripts": {
    "test": "jest"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/3axap4eHko/pm2-promise.git"
  },
  "keywords": [
    "pm2",
    "promise"
  ],
  "author": "Ivan (3axap4eHko)",
  "license": "AGPL-3.0",
  "bugs": {
    "url": "https://github.com/3axap4eHko/pm2-promise/issues"
  },
  "homepage": "https://github.com/3axap4eHko/pm2-promise#readme",
  "dependencies": {
    "pm2": "^4.4.0"
  },
  "devDependencies": {
    "babel-jest": "^26.0.1",
    "jest": "^26.0.1"
  }
}

'''