*GitHub Repository "PrimerLabs/donations-dapp-near-protocol"*

'''--- .codesandbox/workspace.json ---
{
  "responsive-preview": {
    "Mobile": [
      320,
      675
    ],
    "Tablet": [
      1024,
      765
    ],
    "Desktop": [
      1400,
      800
    ],
    "Desktop  HD": [
      1920,
      1080
    ]
  }
}
'''
'''--- README.md ---
# donations-dapp-near-protocol
Created with CodeSandbox

'''
'''--- package.json ---
{
  "name": "donations-dapp",
  "version": "1.0.0",
  "description": "",
  "keywords": [],
  "main": "src/index.js",
  "dependencies": {
    "@near-wallet-selector/ledger": "7.4.0",
    "@near-wallet-selector/modal-ui": "7.4.0",
    "@near-wallet-selector/my-near-wallet": "7.4.0",
    "near-api-js": "1.1.0",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-scripts": "4.0.0"
  },
  "devDependencies": {
    "@babel/runtime": "7.13.8",
    "typescript": "4.1.3"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test --env=jsdom",
    "eject": "react-scripts eject"
  },
  "browserslist": [
    ">0.2%",
    "not dead",
    "not ie <= 11",
    "not op_mini all"
  ]
}
'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	<meta name="theme-color" content="#000000">
	<!--
      manifest.json provides metadata used when your web app is added to the
      homescreen on Android. See https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest/
    -->
	<link rel="manifest" href="%PUBLIC_URL%/manifest.json">
	<link rel="shortcut icon" href="%PUBLIC_URL%/favicon.ico">
	<!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
	<title>React App</title>
</head>

<body>
	<noscript>
		You need to enable JavaScript to run this app.
	</noscript>
	<div id="root"></div>
	<!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
</body>

</html>
'''
'''--- src/App.js ---
import React, { useEffect, useState } from "react";
import * as nearAPI from "near-api-js";

import "./styles.css";

const donation_account_details = [
  {
    org_name: "who",
    account: "who.donations.primerlabs.testnet",
    balance: null,
    title: "World Health Organisation"
  },
  {
    org_name: "dwb",
    account: "dwb.donations.primerlabs.testnet",
    balance: null,
    title: "Doctors without Borders"
  },
  {
    org_name: "unicef",
    account: "unicef.donations.primerlabs.testnet",
    balance: null,
    title: "UNICEF"
  }
];

export default function DonationsDApp({
  wallet,
  isSignedIn,
  contractId,
  nearConnection
}) {
  const [selected, setSelected] = React.useState(null);
  const [donations, setDonations] = React.useState([]);
  // const [loading, setLoading] = React.useState(false);
  // const [response, setResponse] = useState(null);

  const donate = async (amount, org_name) => {
    // console.log(org_name, amount);
    const res = await wallet.callMethod({
      method: "donate",
      args: { org: org_name },
      contractId,
      deposit: nearAPI.utils.format.parseNearAmount(amount)
    });
    return res;
  };

  const view_donations = () => {
    wallet
      .viewMethod({ method: "view_donations", contractId })
      .then(setDonations);
  };

  useEffect(() => {
    view_donations();
  }, []);

  const get_account_balance = async (donation_account) => {
    const account = await nearConnection.account(donation_account.account);

    const accountBalance = await account.getAccountBalance();
    const accountBalanceInNEAR = nearAPI.utils.format.formatNearAmount(
      accountBalance.available
    );

    return accountBalanceInNEAR;
  };

  const get_title = (org_name) =>
    donation_account_details.find((x) => x.org_name === org_name).title;

  const get_date = (date) => {
    const parseDate = new Date(date);
    return `${parseDate.toLocaleTimeString()} on ${parseDate.toDateString()}`;
  };

  return (
    <div className="Donations-DApp">
      <h1>Donations DApp</h1>
      <br />
      <UserSignIn
        contractId={contractId}
        wallet={wallet}
        isSignedIn={isSignedIn}
      />
      <div className="DonationsAppContainer">
        <div className="CharityItem">
          <h2>Recent Donations</h2>
          <ul style={{ textAlign: "left", fontVariant: "all-small-caps" }}>
            {donations.map(
              ({ accountId, amount, org_name, created_at }, idx) => (
                <li key={idx}>
                  <b>{accountId}</b> donated <b>{amount} Ⓝ</b> to{" "}
                  <b>
                    {get_title(org_name)} at {get_date(created_at)}
                  </b>{" "}
                </li>
              )
            )}
          </ul>
        </div>
        {donation_account_details.map((acc, idx) => (
          <CharityItem
            key={idx}
            details={acc}
            setSelected={setSelected}
            selected={selected}
            getAccountBalance={get_account_balance}
            isSignedIn={isSignedIn}
            donate={donate}
          />
        ))}
      </div>
    </div>
  );
}

const UserSignIn = ({ isSignedIn, wallet, contractId }) => {
  if (isSignedIn) {
    return (
      <div>
        Signed In as <b>{wallet.accountId}</b>
        <br />
        <button onClick={() => wallet.signOut()} className="donations-button">
          Sign Out
        </button>
      </div>
    );
  } else {
    return (
      <button onClick={() => wallet.signIn()} className="donations-button">
        Sign In
      </button>
    );
  }
};

const CharityItem = ({
  details,
  setSelected,
  selected,
  getAccountBalance,
  isSignedIn,
  donate
}) => {
  const [account_details, setAccountDetails] = useState(details);

  useEffect(() => {
    getAccountBalance(account_details).then((balance) =>
      setAccountDetails({ ...account_details, balance: balance })
    );
  }, []);

  const { org_name, balance, title, account } = account_details;

  return (
    <div
      className="CharityItem"
      data-selected={selected === org_name}
      onClick={() => setSelected(org_name)}
    >
      <h1>{title}</h1>
      <h2>{balance ? `${balance} Ⓝ` : "Fetching Balance..."}</h2>
      <h4>{account}</h4>
      <DonationBox
        show={selected === org_name}
        title={title}
        isSignedIn={isSignedIn}
        donate={donate}
        org_name={org_name}
      />
    </div>
  );
};

const DonationBox = ({ show, title, isSignedIn, donate, org_name }) => {
  return (
    <div
      style={{
        background: "indigo",
        height: show ? "160px" : "30px",
        transform: show ? "scaleY(1)" : "scaleY(0)",
        opacity: show ? 1 : 0,
        width: "75%",
        margin: "10px auto",
        borderRadius: "10px",
        transition: "0.5s",
        color: "floralwhite",
        padding: "10px"
      }}
    >
      <h3>
        Donate to <span style={{ color: "salmon" }}>{title}</span>
      </h3>
      {!isSignedIn && (
        <p>
          <b>Sign-in</b> to donate to <b>{title}</b>
        </p>
      )}
      <div>
        <button
          id="charity"
          data-issignedin={isSignedIn}
          className="donations-button"
          onClick={() => donate("1", org_name)}
        >
          1 Ⓝ
        </button>
        <button
          data-issignedin={isSignedIn}
          id="charity"
          className="donations-button"
          onClick={() => donate("5", org_name)}
        >
          5 Ⓝ
        </button>
        <button
          data-issignedin={isSignedIn}
          id="charity"
          className="donations-button"
          onClick={() => donate("10", org_name)}
        >
          10 Ⓝ
        </button>
      </div>
    </div>
  );
};

'''
'''--- src/index.js ---
import { createRoot } from "react-dom/client";
import App from "./App";

// import Wallet from helper file
import { Wallet } from "./near-wallet";
import * as nearAPI from "near-api-js";

// Store the contract address
const CONTRACT_ADDRESS = "donations.primerlabs.testnet";

// Instantiate a wallet object
const wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS });

const rootElement = document.getElementById("root");
const root = createRoot(rootElement);

// Setup on page load
window.onload = async () => {
  const isSignedIn = await wallet.startUp();
  const connectionConfig = await wallet.walletSelector.options.network;
  const nearConnection = await nearAPI.connect(connectionConfig);

  root.render(
    <App
      isSignedIn={isSignedIn}
      contractId={CONTRACT_ADDRESS}
      wallet={wallet}
      nearConnection={nearConnection}
    />
  );
};

'''
'''--- src/near-wallet.js ---
/* A helper file that simplifies using the wallet selector */

// near api js
import { providers } from "near-api-js";

// wallet selector UI
import "@near-wallet-selector/modal-ui/styles.css";
import { setupModal } from "@near-wallet-selector/modal-ui";

// wallet selector options
import { setupWalletSelector } from "@near-wallet-selector/core";
import { setupLedger } from "@near-wallet-selector/ledger";
import { setupMyNearWallet } from "@near-wallet-selector/my-near-wallet";

const THIRTY_TGAS = "30000000000000";
const NO_DEPOSIT = "0";

// Wallet that simplifies using the wallet selector
export class Wallet {
  walletSelector;
  wallet;
  network;
  createAccessKeyFor;

  constructor({ createAccessKeyFor = undefined, network = "testnet" }) {
    // Login to a wallet passing a contractId will create a local
    // key, so the user skips signing non-payable transactions.
    // Omitting the accountId will result in the user being
    // asked to sign all transactions.
    this.createAccessKeyFor = createAccessKeyFor;
    this.network = "testnet";
  }

  // To be called when the website loads
  async startUp() {
    this.walletSelector = await setupWalletSelector({
      network: this.network,
      modules: [setupMyNearWallet(), setupLedger()]
    });

    const isSignedIn = this.walletSelector.isSignedIn();

    if (isSignedIn) {
      this.wallet = await this.walletSelector.wallet();
      this.accountId = this.walletSelector.store.getState().accounts[0].accountId;
    }

    return isSignedIn;
  }

  // Sign-in method
  signIn() {
    const description = "Please select a wallet to sign in.";
    const modal = setupModal(this.walletSelector, {
      contractId: this.createAccessKeyFor,
      description
    });
    modal.show();
  }

  // Sign-out method
  signOut() {
    this.wallet.signOut();
    this.wallet = this.accountId = this.createAccessKeyFor = null;
    window.location.replace(window.location.origin + window.location.pathname);
  }

  // Make a read-only call to retrieve information from the network
  async viewMethod({ contractId, method, args = {} }) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    let res = await provider.query({
      request_type: "call_function",
      account_id: contractId,
      method_name: method,
      args_base64: Buffer.from(JSON.stringify(args)).toString("base64"),
      finality: "optimistic"
    });
    return JSON.parse(Buffer.from(res.result).toString());
  }

  // Call a method that changes the contract's state
  async callMethod({
    contractId,
    method,
    args = {},
    gas = THIRTY_TGAS,
    deposit = NO_DEPOSIT
  }) {
    // Sign a transaction with the "FunctionCall" action
    return await this.wallet.signAndSendTransaction({
      signerId: this.accountId,
      receiverId: contractId,
      actions: [
        {
          type: "FunctionCall",
          params: {
            methodName: method,
            args,
            gas,
            deposit
          }
        }
      ]
    });
  }

  // Get transaction result from the network
  async getTransactionResult(txhash) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    // Retrieve transaction result from the network
    const transaction = await provider.txStatus(txhash, "unnused");
    return providers.getTransactionLastResult(transaction);
  }
}

'''
'''--- src/styles.css ---
@import url("https://fonts.googleapis.com/css2?family=Nunito:wght@300;700&family=Reenie+Beanie&display=swap");

.Donations-DApp {
  font-family: "Nunito", sans-serif;
  text-align: center;
  color: indigo;
}

.DonationsAppContainer {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

li {
  margin: 10px 0;
}

.CharityItem {
  border: 3px solid indigo;
  background: white;
  cursor: pointer;
  border-radius: 10px;
  height: auto;
  width: 600px;
  padding: 10px;
  color: indigo;
  box-shadow: 2px 4px;
  margin: 10px;
  transition: 0.5s;
}

.CharityItem:hover {
  background: floralwhite;
}
.CharityItem[data-selected="true"] {
  background: #ffeb3b;
}

.donations-button {
  background-color: indigo;
  border: none;
  border-radius: 5px;
  color: white;
  font-weight: bold;
  padding: 8px 16px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  cursor: pointer;
  transition: 0.5s;
  box-shadow: 2px 4px #888888;
  margin: 20px;
}

#charity {
  background-color: #ffeb3b;
  color: indigo;
}

#charity[data-issignedin="false"] {
  cursor: not-allowed;
  pointer-events: none;
  opacity: 0.5;
}

.donations-button[data-loading="true"] {
  cursor: not-allowed;
  pointer-events: none;
  opacity: 0.5;
}

.donations-button:hover {
  background-color: #3b0066;
  box-shadow: 1px 2px #888888;
}

'''
'''--- src/utils.js ---
export const getTxId = (res) => {
  if (!res || !res.transaction) {
    return null;
  }

  return res.transaction.hash;
};

'''