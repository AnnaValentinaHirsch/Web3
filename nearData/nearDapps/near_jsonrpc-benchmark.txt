*GitHub Repository "near/jsonrpc-benchmark"*

'''--- .github/ISSUE_TEMPLATE/BOUNTY.yml ---
name: "Simple Bounty"
description: "Use this template to create a HEROES Simple Bounty via Github bot"
title: "Bounty: "
labels: ["bounty"]
assignees: heroes-bot-test
body:
  - type: markdown
    attributes:
      value: |
        Hi! Let's set up your bounty! Please don't change the template - @heroes-bot-test won't be able to help you.

  - type: dropdown
    id: type
    attributes:
      label: What talent are you looking for?
      options:
        - Marketing
        - Development
        - Design
        - Other
        - Content
        - Research
        - Audit

  - type: textarea
    id: description
    attributes:
      label: What you need to be done?

  - type: dropdown
    id: tags
    attributes:
      label: Tags
      description: Add tags that match the topic of the work
      multiple: true
      options:
        - API
        - Blockchain
        - Community
        - CSS
        - DAO
        - dApp
        - DeFi
        - Design
        - Documentation
        - HTML
        - Javascript
        - NFT
        - React
        - Rust
        - Smart contract
        - Typescript
        - UI/UX
        - web3
        - Translation
        - Illustration
        - Branding
        - Copywriting
        - Blogging
        - Editing
        - Video Creation
        - Social Media
        - Graphic Design
        - Transcription
        - Product Design
        - Artificial Intelligence
        - Quality Assurance
        - Risk Assessment
        - Security Audit
        - Bug Bounty
        - Code Review
        - Blockchain Security
        - Smart Contract Testing
        - Penetration Testing
        - Vulnerability Assessment
        - BOS
        - News
        - Hackathon
        - NEARCON2023
        - NEARWEEK

  - type: input
    id: deadline
    attributes:
      label: Deadline
      description: "Set a deadline for your bounty. Please enter the date in format: DD.MM.YYYY"
      placeholder: "19.05.2027"

  - type: dropdown
    id: currencyType
    attributes:
      label: Currency
      description: What is the currency you want to pay?
      options:
        - USDC.e
        - USDT.e
        - DAI
        - wNEAR
        - USDt
        - XP
        - marmaj
        - NEKO
        - JUMP
        - USDC
        - NEARVIDIA
      default: 0
    validations:
      required: true

  - type: input
    id: currencyAmount
    attributes:
      label: Amount
      description: How much it will be cost?

  - type: markdown
    attributes:
      value: "## Advanced settings"

  - type: checkboxes
    id: kyc
    attributes:
      label: KYC
      description: "Use HEROES' KYC Verification, only applicants who passed HEROES' KYC can apply and work on this bounty!"
      options:
        - label: Use KYC Verification

  - type: markdown
    attributes:
      value: |
        ### This cannot be changed once the bounty is live!

'''
'''--- README.md ---
# NEAR JSON RPC benchmark

## Install [`drill`](https://github.com/fcsonline/drill) with dependencies and run the benchmark

* Install [`cargo`](https://doc.rust-lang.org/cargo/getting-started/installation.html)

    ```bash
    $ curl https://sh.rustup.rs -sSf | sh
    $ source $HOME/.cargo/env
    ```

* Install dependencies

    ```bash
    $ sudo apt install -y build-essential pkg-config libssl-dev
    ```

* Clone this repo

    ```bash
    $ git clone https://github.com/near/jsonrpc-benchmark
    ```

* Navigate to the folder and run `drill`

    ```bash
    $ cd jsonrpc-benchmark/
    $ chmod a+x run.sh
    $ URL="http://localhost:3030" ./run.sh # to run each method sequentially
    $ drill --benchmark benchmark.yml --stats # to run the methods concurrently
    ```

## Reasoning for chosen methods to benchmark

For the benchmarking we decided to go with `testnet`. We have spin up the node on GCP `e2-standard-8` (which is recommended machine type for the rpc nodes).

Before writing a drill config we've investigated (manually) the logs of nginx on a few nodes to find out what kind of methods are the most frequent. Despite the "easy" methods (like `block`, `chunk`) there were some `query` view calls:

* `view_state`
* `view_account`
* `view_access_key_list`

It was decided to go with those three. Also we've added `view_call` to call view method of some contract. We choose an existing account with contract and small (not empty) state.

During the benchmark we're sending each of the four query requests and **the main metric currently is requests per second (rps)**

## Benchmark results we've got

### Request sent from another machine in the same region

```
View call method          Total requests            3000
View call method          Successful requests       3000
View call method          Failed requests           0
View call method          Median time per request   16ms
View call method          Average time per request  20ms
View call method          Sample standard deviation 8ms

Time taken for tests      15.7 seconds
Total requests            3000
Successful requests       3000
Failed requests           0
Requests per second       191.18 [#/sec]
Median time per request   16ms
Average time per request  20ms
Sample standard deviation 8ms
Concurrency 4
Iterations 3000
Rampup 5
Base URL http://34.91.236.50:3030

View access key list      Total requests            3000
View access key list      Successful requests       3000
View access key list      Failed requests           0
View access key list      Median time per request   9ms
View access key list      Average time per request  9ms
View access key list      Sample standard deviation 6ms

Time taken for tests      7.6 seconds
Total requests            3000
Successful requests       3000
Failed requests           0
Requests per second       393.99 [#/sec]
Median time per request   9ms
Average time per request  9ms
Sample standard deviation 6ms
Concurrency 4
Iterations 3000
Rampup 5
Base URL http://34.91.236.50:3030

View account              Total requests            3000
View account              Successful requests       3000
View account              Failed requests           0
View account              Median time per request   8ms
View account              Average time per request  9ms
View account              Sample standard deviation 2ms

Time taken for tests      7.5 seconds
Total requests            3000
Successful requests       3000
Failed requests           0
Requests per second       398.99 [#/sec]
Median time per request   8ms
Average time per request  9ms
Sample standard deviation 2ms
Concurrency 4
Iterations 3000
Rampup 5
Base URL http://34.91.236.50:3030

View state                Total requests            3000
View state                Successful requests       3000
View state                Failed requests           0
View state                Median time per request   9ms
View state                Average time per request  9ms
View state                Sample standard deviation 6ms

Time taken for tests      7.9 seconds
Total requests            3000
Successful requests       3000
Failed requests           0
Requests per second       380.32 [#/sec]
Median time per request   9ms
Average time per request  9ms
Sample standard deviation 6ms
```

### Request sent from the same machine (locally)

```
View call method          Total requests            3000
View call method          Successful requests       3000
View call method          Failed requests           0
View call method          Median time per request   8ms
View call method          Average time per request  8ms
View call method          Sample standard deviation 2ms

Time taken for tests      7.1 seconds
Total requests            3000
Successful requests       3000
Failed requests           0
Requests per second       419.84 [#/sec]
Median time per request   8ms
Average time per request  8ms
Sample standard deviation 2ms
Concurrency 4
Iterations 3000
Rampup 5
Base URL http://127.0.0.1:3030

View access key list      Total requests            3000
View access key list      Successful requests       3000
View access key list      Failed requests           0
View access key list      Median time per request   1ms
View access key list      Average time per request  1ms
View access key list      Sample standard deviation 1ms

Time taken for tests      1.6 seconds
Total requests            3000
Successful requests       3000
Failed requests           0
Requests per second       1894.98 [#/sec]
Median time per request   1ms
Average time per request  1ms
Sample standard deviation 1ms
Concurrency 4
Iterations 3000
Rampup 5
Base URL http://127.0.0.1:3030

View account              Total requests            3000
View account              Successful requests       3000
View account              Failed requests           0
View account              Median time per request   1ms
View account              Average time per request  1ms
View account              Sample standard deviation 1ms

Time taken for tests      1.4 seconds
Total requests            3000
Successful requests       3000
Failed requests           0
Requests per second       2079.54 [#/sec]
Median time per request   1ms
Average time per request  1ms
Sample standard deviation 1ms
Concurrency 4
Iterations 3000
Rampup 5
Base URL http://127.0.0.1:3030

View state                Total requests            3000
View state                Successful requests       3000
View state                Failed requests           0
View state                Median time per request   1ms
View state                Average time per request  1ms
View state                Sample standard deviation 1ms

Time taken for tests      1.8 seconds
Total requests            3000
Successful requests       3000
Failed requests           0
Requests per second       1680.33 [#/sec]
Median time per request   1ms
Average time per request  1ms
Sample standard deviation 1ms
```

'''
'''--- benchmark.yml ---
---

concurrency: 4
base: '{{ URL }}'
iterations: 3000
rampup: 5

plan:
  - name: View access key list
    request:
      url: /
      method: POST
      body: '{"jsonrpc": "2.0", "id": "dontcare", "method": "query", "params": {"request_type": "view_access_key_list", "account_id": "nearoverflow.testnet", "finality": "final"}}'
      headers:
        Content-Type: 'application/json'

  - name: View account
    request:
      url: /
      method: POST
      body: '{"jsonrpc": "2.0", "id": "dontcare", "method": "query", "params": {"request_type": "view_account", "account_id": "nearoverflow.testnet", "finality": "final"}}'
      headers:
        Content-Type: 'application/json'

  - name: View call method
    request:
      url: /
      method: POST
      body: '{"jsonrpc": "2.0", "id": "dontcare", "method": "query", "params": {"request_type": "call_function", "account_id": "nearoverflow.testnet", "method_name": "list_questions", "args_base64": "", "finality": "final"}}'
      headers:
        Content-Type: 'application/json'

  - name: View state
    request:
      url: /
      method: POST
      body: '{"jsonrpc": "2.0", "id": "dontcare", "method": "query", "params": {"request_type": "view_state", "account_id": "nearoverflow.testnet", "finality": "final", "prefix_base64": ""}}'
      headers:
        Content-Type: 'application/json'

'''
'''--- run.sh ---
#!/bin/bash
drill --benchmark view_call.yml --quiet --stats
drill --benchmark view_access_key_list.yml --quiet --stats
drill --benchmark view_account.yml --quiet --stats
drill --benchmark view_state.yml --quiet --stats

'''
'''--- view_access_key_list.yml ---
---

concurrency: 4
base: '{{ URL }}'
iterations: 3000
rampup: 5

plan:
  - name: View access key list
    request:
      url: /
      method: POST
      body: '{"jsonrpc": "2.0", "id": "dontcare", "method": "query", "params": {"request_type": "view_access_key_list", "account_id": "nearoverflow.testnet", "finality": "final"}}'
      headers:
        Content-Type: 'application/json'

'''
'''--- view_account.yml ---
---

concurrency: 4
base: '{{ URL }}'
iterations: 3000
rampup: 5

plan:
  - name: View account
    request:
      url: /
      method: POST
      body: '{"jsonrpc": "2.0", "id": "dontcare", "method": "query", "params": {"request_type": "view_account", "account_id": "nearoverflow.testnet", "finality": "final"}}'
      headers:
        Content-Type: 'application/json'

'''
'''--- view_call.yml ---
---

concurrency: 4
base: '{{ URL }}'
iterations: 3000
rampup: 5

plan:
  - name: View call method
    request:
      url: /
      method: POST
      body: '{"jsonrpc": "2.0", "id": "dontcare", "method": "query", "params": {"request_type": "call_function", "account_id": "nearoverflow.testnet", "method_name": "list_questions", "args_base64": "", "finality": "final"}}'
      headers:
        Content-Type: 'application/json'

'''
'''--- view_state.yml ---
---

concurrency: 4
base: '{{ URL }}'
iterations: 3000
rampup: 5

plan:
  - name: View state
    request:
      url: /
      method: POST
      body: '{"jsonrpc": "2.0", "id": "dontcare", "method": "query", "params": {"request_type": "view_state", "account_id": "nearoverflow.testnet", "finality": "final", "prefix_base64": ""}}'
      headers:
        Content-Type: 'application/json'

'''