*GitHub Repository "keypom/keypom-docs"*

'''--- .github/misc/mlc_config.json ---
{
    "ignorePatterns": [
      {
        "pattern": "^/"
      },
      {
        "pattern": "^http://127.0.0.1"
      },
      {
        "pattern": "^https://testnet.keypom.xyz/claim"
      },
      {
        "pattern": "^https://example.com/token.json"
      },
      {
        "pattern": "^https://near.events"
      },
      {
        "pattern": "^https://etherscan.io"
      },
      {
        "pattern": "^https://chainstack.com"
      },
      {
        "pattern": "^https://crates.io"
      },
      {
        "pattern": "^https://ropsten.etherscan.io"
      },
      {
        "pattern": "^https://support.ledger.com"
      },
      {
        "pattern": "^https://help.github.com"
      },
      {
        "pattern": "^https://hackenproof.com"
      },
      {
        "pattern": "^https://explorer.betanet.near.org"
      },
      {
        "pattern": "^https://helper.mainnet.near.org"
      },
      {
        "pattern": "^https://rpc.mainnet.near.org"
      },
      {
        "pattern": "^https://helper.testnet.near.org"
      },
      {
        "pattern": "^https://wallet.meteorwallet.app/linkdrop"
      },
      {
        "pattern": "^https://rpc.betanet.near.org"
      },
      {
        "pattern": "^https://rpc.testnet.near.org"
      }
    ],
    "timeout": "20s",
    "retryOn429": true,
    "retryCount": 5,
    "fallbackRetryDelay": "30s",
    "aliveStatusCodes": [200, 206]
  }
'''
'''--- .github/workflows/speller.yml ---
name: SpellCheck Action
on:
  workflow_dispatch:
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build:
    name: Spellcheck
    runs-on: ubuntu-latest
    steps:
    # The checkout step
    - uses: actions/checkout@v3
    - name: Check Spelling
      uses: rojopolis/spellcheck-github-actions@v0
      with:
          config_path: .spellcheck.yml
          task_name: Markdown

'''
'''--- .github/workflows/test-links.yml ---
name: Check Markdown links

on:
  workflow_dispatch:
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - main
  push:
    branches:
      - main

jobs:
  markdown-link-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        config-file: '.github/misc/mlc_config.json'
        folder-path: 'docs'
'''
'''--- .spellcheck.yml ---
matrix:
- name: Markdown
  expect_match: false
  apsell:
    lang: en
    ignore-case: true
    mode: 'url'
    camel-case: true
  dictionary:
    wordlists:
    - .wordlist.txt
    encoding: utf-8
  pipeline:
  - pyspelling.filters.markdown:
      markdown_extensions:
      - markdown.extensions.extra:
  - pyspelling.filters.html:
      comments: false
      attributes:
      - alt
      ignores:
      - ':matches(code, pre)'
      - 'code'
      - 'pre'
      - 'blockquote'
  - pyspelling.filters.url:
      urls: true
  sources:
  - '*.md'
  - 'docs/**/*.md'
'''
'''--- .wordlist.txt ---
createAccount
initKeypom
Keypom
WIP
dev
repo
xyz
localhost
blockchain
onboarding
crypto
APIs
NEAR’s
NEARCON
KYC
pre
funder
linkdrop
lnkdrops
customizations
customizable
DAO
NFT
FT
POAP
wifi
analytics
USDC
Unencrypted
keystore
onboarded
dApp
TabItem
json
JS
FC
stringified
yoctoNear
SDK
github
https
http
MyNearWallet
keypairs
NodeJS
Typedocs
NearKeyPair
src
AnyWallet
TimeConfig
UsageConfig
SimpleData
PublicSaleConfig
ProtocolReturnedUsageConfig
ProtocolReturnedTimeConfig
ProtocolReturnedSimpleData
ProtocolReturnedPublicSaleConfig
ProtocolReturnedNonFungibleTokenObject
ProtocolReturnedNonFungibleTokenMetadata
ProtocolReturnedNFTData
ProtocolReturnedMethod
keypom
linkdrops
Linkdrops
Keypom's
FTs
DAOs
DAO’s
Keypom’s
KeyStores
NEAR's
fc
js
sdk
TypeDocs
NFTs
Linkrops
nft
funder's
api
predefine
Keypair
pubkey
rugging
keypair
accountId
param
url
Nomicon
POAPs
dApps
UX
config
GPL
dOS
dec
frontend
md
Backend
backend
allowlist
yoctoNEAR
Allowlist
Blocklist
subaccount
subaccounts
preload
Config
DropConfig
Moonpom
MethodData
args
DAO's
Multisig
multisig
struct
MoonNFT
cooldown
useable
unscalable
Dapps
Embeddable
myapp
JsonDrops
JsonKeys
cli
KeypomWallet
contractId
desiredUrl
keyStore
modalOptions
networkId
publicKey
secretKey
assertSignedIn
checkValidTrialInfo
getAccountId
getAccounts
InstantLinkWalletBehaviour
getAvailableBalance
getContractId
isSignedIn
parseUrl
showModal
signAndSendTransaction
signAndSendTransactions
signIn
signOut
switchAccount
transformTransactions
tryInitFromLocalStorage
verifyOwner
Readme
BenKurrek
MattLockyer
img
mattlockyer
svg
ux
KeyInfo
txn
BrowserWalletBehaviour
rootEntropy
publicKeys
FTData
NFTData
FCData
boolean
requiredDeposit
URl
SDK's
ProtocolReturnedDrop
KeyPair
keystores
testnet
methodName
DeleteDropParams
params
dropIds
withdrawBalance
AddToBalanceParams
absoluteAmount
FCConfig
attachedGas
TGas
FungibleTokenMetadata
NEP
NEPs
nep
neps
OpenZeppelin
erc
frontends
openzeppelin
RPC
SVG
cacheable
deployer
LxUdg
MWcKMKxDu
NDJ
QmdmQXB
RgQm
ipfs
mzChmMeKY
AMPL
wETH
ProtocolReturnedFCData
PasswordPerUse
NonFungibleTokenMetadata
camelCase
expiresAt
issuedAt
mediaHash
referenceHash
startsAt
updatedAt
ProtocolReturnedFTData
wNEAR
ProtocolReturnedKeyInfo
ProtocolReturnedFCConfig
GeneratedKeyPairs
keyPairs
secretKeys
ContractSourceMetadata
WithdrawBalanceParams
CreateOrAddReturn
dropId
EstimatorParams
depositPerUse
fcData
ftData
keyStorage
numKeys
usesPerKey
ProtocolReturnedDropConfig
Fayyr
senderId
tokenIds
DeleteKeyParams
blocklist
num
autoWithdrawFunds
maxNumKeys
pricePerKeyNEAR
pricePerKeyYocto
CreateDropProtocolArgs
curKeyUse
keyId
lastUsed
remainingUses
GetDropParams
withKeys
nextKeyId
ownerId
registeredUses
requiredGas
FTTransferCallParams
returnTransaction
InitKeypomParams
KeyStore
keypomContractId
ExecuteParams
fundingAccount
GenerateKeysParams
metaEntropy
entropies
metaEntropies
CreateDropParams
basePassword
passwordProtectedUses
depositPerUseNEAR
depositPerUseYocto
nftData
returnTransactions
simpleData
useBalance
accountIdField
attachedDeposit
dropIdField
funderIdField
keyIdField
receiverId
receiverToClaimer
userArgsRule
accountCreationFields
autoDeleteDrop
autoWithdraw
refundDeposit
fundingKeyPair
KeyPairs
seedPhrase
seedphrase
NFTTransferCallParams
EnvVars
contractAccount
fundingAccountDetails
getAccount
FileStore
supportedKeypomContracts
mainnet
viewAccount
viewCall
lazyRegister
AddKeyParams
getDropInformation
nftTokenIds
dropRoot
nearAPI
utils
supportedLinkdropClaimPages
mynearwallet
KeypomContextProvider
getEnv
UnencryptedFileSystemKeyStore
updateFunder
updateKeypomContractId
useKeypom
KeypomContext
tsx
accountExists
createNFTSeries
estimateRequiredDeposit
formatLinkdropUrl
formatNearAmount
generateKeys
UUID
addKeys
createDrop
getFTMetadata
getNFTMetadata
getPubFromSecret
getStorageBase
hashPassword
fromHex
utf
parseNearAmount
Init
claimTrialAccountDrop
createTrialAccountDrop
yocto
addToBalance
addToSaleAllowlist
getContractSourceMetadata
getCurMethodData
getDropSupplyForOwner
getDrops
getKeyBalance
getKeyInformation
getKeyInformationBatch
structs
getKeySupplyForDrop
getKeyTotalSupply
getKeys
getKeysForDrop
getNftSupplyForDrop
getNftTokenIDsForDrop
getUserBalance
deleteDrops
deleteKeys
ftTransferCall
nftTransferCall
setupKeypom
scalable
deterministically
easter
onboardings
incentivize
th
markdownlint
sha
incrementing
rc
pw
bc
nd
rd
viewport
enums
util
webpage
jsx
showLineNumbers
signInContractId
Keyinfo
Qrcode
curUse
getkeyinformation
getpubfromsecret
pubKey
useEffect
trialAccountId
canExitTrial
internalSignIn
validateTransactions
trialBaseUrl
trialSecretKey
trialSplitDelim
trialCallMethod
trialSignAndSendTxns
canUserAddKeys
MyNEARWallet
FastAuth
FunctionCall
funders
learnt
nETH
sig
kb
Benji
UI
biometrics
offboarded
offboarding
Offboarding
offboard
signerId
BasicTransaction
signInTrialAccount
signInInstantAccount
trialAccountSpecs
moduleId
instantSignInSpecs
wrapTxnParamsForTrial
isUnclaimedTrialDrop
convertBasicTransaction
viewAccessKeyData
localnet
accountMappingContract
InMemoryKeyStore
hardcoded
hardcode
onwards
bos
toolchain
MoonDAO
codebase
sputnikv2
sputnikv
SputnikV
SputnikV2
bot's
ReadMe
onboardees
BOS
MNW
MyNearWallet's
overriden
longname
dao
typedocs
cuongdcdev
dropConfig
gatekeep
gatekeeping 
Gatekeeping
Gatekeep
Kiskesis
CIDs
setSpecsFromKeypomParams
generatePerUsePasswords
ETHGlobal
Hackathon
lowercased
Mainnet
human-gate
gating
human-gating
SoulBound
'''
'''--- README.md ---
# Keypom Docs
Official docs available at [docs.keypom.xyz](https://docs.keypom.xyz/)

'''
'''--- babel.config.js ---
module.exports = {
  presets: [require.resolve('@docusaurus/core/lib/babel/preset')],
};

'''
'''--- blog/2019-05-28-first-blog-post.md ---
---
slug: first-blog-post
title: First Blog Post
authors:
  name: Gao Wei
  title: Docusaurus Core Team
  url: https://github.com/wgao19
  image_url: https://github.com/wgao19.png
tags: [hola, docusaurus]
---

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

'''
'''--- blog/2019-05-29-long-blog-post.md ---
---
slug: long-blog-post
title: Long Blog Post
authors: endi
tags: [hello, docusaurus]
---

This is the summary of a very long blog post,

Use a `<!--` `truncate` `-->` comment to limit blog post size in the list view.

<!--truncate-->

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet

'''
'''--- blog/2021-08-26-welcome/index.md ---
---
slug: welcome
title: Welcome
authors: [slorber, yangshun]
tags: [facebook, hello, docusaurus]
---

[Docusaurus blogging features](https://docusaurus.io/docs/blog) are powered by the [blog plugin](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog).

Simply add Markdown files (or folders) to the `blog` directory.

Regular blog authors can be added to `authors.yml`.

The blog post date can be extracted from filenames, such as:

- `2019-05-30-welcome.md`
- `2019-05-30-welcome/index.md`

A blog post folder can be convenient to co-locate blog post images:

![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)

The blog supports tags as well!

**And if you don't want a blog**: just delete this directory, and use `blog: false` in your Docusaurus config.

'''
'''--- blog/authors.yml ---
endi:
  name: Endilie Yacop Sucipto
  title: Maintainer of Docusaurus
  url: https://github.com/endiliey
  image_url: https://github.com/endiliey.png

yangshun:
  name: Yangshun Tay
  title: Front End Engineer @ Facebook
  url: https://github.com/yangshun
  image_url: https://github.com/yangshun.png

slorber:
  name: Sébastien Lorber
  title: Docusaurus maintainer
  url: https://sebastienlorber.com
  image_url: https://github.com/slorber.png

'''
'''--- config-typedoc-core.js ---
const lightCodeTheme = require('prism-react-renderer/themes/github');
const darkCodeTheme = require('prism-react-renderer/themes/dracula');

// With JSDoc @type annotations, IDEs can provide config autocompletion
/** @type {import('@docusaurus/types').DocusaurusConfig} */
(module.exports = {
  title: 'Keypom',
  tagline: 'Web3 Onboarding',
  url: 'https://minqianlu.github.io',
  baseUrl: '/',
  onBrokenLinks: 'throw',
  onBrokenMarkdownLinks: 'warn',
  favicon: 'img/moon.png',
  organizationName: 'minqianlu', // Usually your GitHub org/user name.
  projectName: 'minqianlu.github.io', // Usually your repo name.
  trailingSlash: false,
  themes: ['@docusaurus/theme-live-codeblock'],

  plugins: [
    [
      'docusaurus-plugin-typedoc',

      // Plugin / TypeDoc options
      {
        entryPoints: ['../keypom-js/packages/core/src/index.ts'],
        tsconfig: '../keypom-js/packages/core/tsconfig.json',
        includeVersion: true,
        entryPointStrategy: 'expand',
        excludeNotDocumented: false,
        out: '.',
        hideGenerator: false,
        entryDocument: 'welcome.md',
        hideMembersSymbol: true,

        out: 'keypom-sdk/Core',
        sidebar: {
          categoryLabel: 'Core TypeDocs',
          collapsed: false,
          position: 0,
          fullNames: true,
        },
      },
    ],
  ],

  presets: [
    [
      '@docusaurus/preset-classic',
      /** @type {import('@docusaurus/preset-classic').Options} */
      ({
        docs: {
          // routeBasePath: '/',
          //homePageId: 'Github ReadMe/Introduction/Introduction',
          sidebarPath: require.resolve('./sidebars.js'),
          // Please change this to your repo.
          editUrl: 'https://github.com/facebook/docusaurus/edit/main/website/',
        },
        blog: false,
        theme: {
          customCss: require.resolve('./src/css/custom.css'),
        },
      }),
    ],
  ],

  themeConfig:
    /** @type {import('@docusaurus/preset-classic').ThemeConfig} */
    ({
      navbar: {
        title: 'KEYPOM',
        logo: {
          alt: 'MOON',
          src: 'img/moon.png',
        },
        items: [
          {
            to: "docs/next/Concepts/welcome",
            label: "📖 Concepts",
            position: "left",
          },
          {
            to: "docs/next/Tutorials/welcome",
            label: "📚 Tutorials",
            position: "left",
          },
          {
            to: "docs/next/KeypomV2/welcome",
            label: "🤖 Keypom V2",
            position: "left",
          },
          {
            to: "docs/next/keypom-sdk/welcome",
            label: "💻 SDK TypeDocs",
            position: "left",
          },
          // {
          //   type: 'doc',
          //   docId: './Github ReadMe/Introduction/Introduction',
          //   position: 'left',
          //   label: 'Tutorial',
          // },
          // {to: '/blog', label: 'Blog', position: 'left'},
          {
            href: 'https://github.com/keypom/keypom-docs/tree/main',
            label: 'GitHub',
            position: 'right',
          },
          // {
          //   type: 'docsVersionDropdown',
          // },
        ],
      },
      footer: {
        style: 'dark',
        //position: 'center',
        links: [
          //docs
          {
            title: 'Docs',
            items: [
              {
                label: '📖Concepts',
                to: 'docs/next/Concepts/welcome',
              },
              {
                label: '📚Tutorials',
                to: 'docs/next/Tutorials/welcome',
              },
              {
                label: "🤖Keypom V2",
                to: "docs/next/KeypomV2/welcome",
              },
            ],
          },
          //community
          {
            title: 'Community',
            items: [
              {
                label: 'Stack Overflow',
                href: 'https://stackoverflow.com/questions/tagged/docusaurus',
              },
              {
                label: 'Discord',
                href: 'https://discordapp.com/invite/docusaurus',
              },
              {
                label: 'Twitter',
                href: 'https://twitter.com/docusaurus',
              },
            ],
          },
          //more
          {
            title: 'More',
            items: [
              {
                label: 'GitHub',
                href: 'https://github.com/facebook/docusaurus',
              },
            ],
          },
        ],
        copyright: `Copyright © ${new Date().getFullYear()} My Project, Inc. Built with Docusaurus.`,
      },
      prism: {
        theme: lightCodeTheme,
        darkTheme: darkCodeTheme,
      },
    }),
});

'''
'''--- config-typedoc-selector.js ---
const lightCodeTheme = require('prism-react-renderer/themes/github');
const darkCodeTheme = require('prism-react-renderer/themes/dracula');

// With JSDoc @type annotations, IDEs can provide config autocompletion
/** @type {import('@docusaurus/types').DocusaurusConfig} */
(module.exports = {
  title: 'Keypom',
  tagline: 'Web3 Onboarding',
  url: 'https://minqianlu.github.io',
  baseUrl: '/',
  onBrokenLinks: 'throw',
  onBrokenMarkdownLinks: 'warn',
  favicon: 'img/moon.png',
  organizationName: 'minqianlu', // Usually your GitHub org/user name.
  projectName: 'minqianlu.github.io', // Usually your repo name.
  trailingSlash: false,
  themes: ['@docusaurus/theme-live-codeblock'],

  plugins: [
    [
      'docusaurus-plugin-typedoc',

      // Plugin / TypeDoc options
      {
        entryPoints: ['../keypom-js/packages/selector/src/index.ts'],
        tsconfig: '../keypom-js/packages/selector/tsconfig.json',
        includeVersion: true,
        entryPointStrategy: 'expand',
        excludeNotDocumented: false,
        out: '.',
        hideGenerator: false,
        entryDocument: 'welcome.md',
        hideMembersSymbol: true,

        out: 'keypom-sdk/Selector',
        sidebar: {
          categoryLabel: 'Selector TypeDocs',
          collapsed: false,
          position: 0,
          fullNames: true,
        },
      },
    ],
  ],

  presets: [
    [
      '@docusaurus/preset-classic',
      /** @type {import('@docusaurus/preset-classic').Options} */
      ({
        docs: {
          // routeBasePath: '/',
          //homePageId: 'Github ReadMe/Introduction/Introduction',
          sidebarPath: require.resolve('./sidebars.js'),
          // Please change this to your repo.
          editUrl: 'https://github.com/facebook/docusaurus/edit/main/website/',
        },
        blog: false,
        theme: {
          customCss: require.resolve('./src/css/custom.css'),
        },
      }),
    ],
  ],

  themeConfig:
    /** @type {import('@docusaurus/preset-classic').ThemeConfig} */
    ({
      navbar: {
        title: 'KEYPOM',
        logo: {
          alt: 'MOON',
          src: 'img/moon.png',
        },
        items: [
          {
            to: "docs/next/Concepts/welcome",
            label: "📖 Concepts",
            position: "left",
          },
          {
            to: "docs/next/Tutorials/welcome",
            label: "📚 Tutorials",
            position: "left",
          },
          {
            to: "docs/next/KeypomV2/welcome",
            label: "🤖 Keypom V2",
            position: "left",
          },
          {
            to: "docs/next/keypom-sdk/welcome",
            label: "💻 SDK TypeDocs",
            position: "left",
          },
          // {
          //   type: 'doc',
          //   docId: './Github ReadMe/Introduction/Introduction',
          //   position: 'left',
          //   label: 'Tutorial',
          // },
          // {to: '/blog', label: 'Blog', position: 'left'},
          {
            href: 'https://github.com/keypom/keypom-docs/tree/main',
            label: 'GitHub',
            position: 'right',
          },
          // {
          //   type: 'docsVersionDropdown',
          // },
        ],
      },
      footer: {
        style: 'dark',
        //position: 'center',
        links: [
          //docs
          {
            title: 'Docs',
            items: [
              {
                label: '📖Concepts',
                to: 'docs/next/Concepts/welcome',
              },
              {
                label: '📚Tutorials',
                to: 'docs/next/Tutorials/welcome',
              },
              {
                label: "🤖Keypom V2",
                to: "docs/next/KeypomV2/welcome",
              },
            ],
          },
          //community
          {
            title: 'Community',
            items: [
              {
                label: 'Stack Overflow',
                href: 'https://stackoverflow.com/questions/tagged/docusaurus',
              },
              {
                label: 'Discord',
                href: 'https://discordapp.com/invite/docusaurus',
              },
              {
                label: 'Twitter',
                href: 'https://twitter.com/docusaurus',
              },
            ],
          },
          //more
          {
            title: 'More',
            items: [
              {
                label: 'GitHub',
                href: 'https://github.com/facebook/docusaurus',
              },
            ],
          },
        ],
        copyright: `Copyright © ${new Date().getFullYear()} My Project, Inc. Built with Docusaurus.`,
      },
      prism: {
        theme: lightCodeTheme,
        darkTheme: darkCodeTheme,
      },
    }),
});

'''
'''--- docs/Concepts/KeypomProtocol/GithubReadme/Introduction/Introduction.md ---
---
sidebar_label: 'Introduction to Keypom'
sidebar_position: 1
---
> To view our debut talk at NEARCON 2022, click [here](https://www.youtube.com/watch?v=J-BOnfhHV50).

Keypom is an access key factory created as a result of 3 common problems that arose in the ecosystem.

1. People want a *cheap, customizable, and unique* onboarding experience for users.
2. Companies don't want to expose **full access keys** in their backend servers.
3. dApps want a *smooth UX* with zero barrier to entry onboarding.

The contract was initially created as a way to handle the 1 $NEAR minimum deposit required for creating linkdrops using the [regular linkdrop contract](https://github.com/near/near-linkdrop/blob/f24f2608e1558db773f2408a28849d330abb3881/src/lib.rs#L18). 

If users wanted to create linkdrops, they needed to attach a **minimum** of 1 $NEAR. This made it costly and unscalable for projects that wanted to mass onboard onto NEAR. Keypom, on the other hand, has been highly optimized to allow for the lowest possible costs.

## Problem

Blockchain technology comes with many benefits such as sovereign ownership, digital rights, privacy, freedom, 
peer to peer coordination and much more. The problem with this technology, however, is that there is an extremely 
high barrier to entry for an everyday individual. None of it matters if nobody can onboard.

It’s confusing to create and fund a crypto wallet. People are unfamiliar with the process, technical jargon, 
and the general flow. NEAR’s account model is powerful, but extremely underutilized because it’s complex for 
developers to take full advantage of. Keypom wraps this up in a single API call.

With NEAR’s goal of onboarding 1 billion users to Web3, there needs to be a solution to this high barrier to 
entry for developers building on NEAR and users onboarding to their apps and the NEAR ecosystem.

Below is a table outlining the minimum costs to onboard a new user onto NEAR with a named account.

|                      | 1 Account       | 1,000 Accounts  | 1,000,000 Accounts |
|----------------------|-----------------|-----------------|--------------------|
| Traditional Linkdrop | ~1 NEAR         | ~1,003 NEAR     | ~1,002,840 NEAR    |
| Keypom               | ~0.0035 NEAR    | ~3.5 NEAR       | ~3,500 NEAR        |
|                      | ~99.65% Cheaper | ~99.65% Cheaper | ~99.65% Cheaper    |

Keypom allows anyone to create highly customizable onboarding experiences for their users. These experiences 
can be both for new, or existing users. If someone already has a wallet, they can still use a Keypom link to 
experience an app, and then transfer the assets later.

## Comparable Solutions

|                                              | **Keypom** | **NEAR Drop** | **Satori** |
|----------------------------------------------|------------|---------------|------------|
| NEAR Drop                                    |      ✅     |       ✅       |      ❌     |
| FT Drop                                      |      ✅     |       ❌       |      ❌     |
| NFT Drop                                     |      ✅     |       ❌       |      ✅     |
| Function Call Drop                           |      ✅     |       ❌       |      ❌     |
| Embeddable in Dapps                          |      ✅     |       ❌       |      ❌     |
| Wallet Selector Integration                  |      ✅     |       ❌       |      ❌     |
| No Fee                                       |      ✅     |     Maybe?    |      ❌     |
| No Backend / 3rd Party                       |      ✅     |       ✅       |      ❌     |
| Campaigns                                    |      ✅     |       ✅       |      ✅     |
| Multi-Step e.g. Tickets click > scan > claim |      ✅     |       ❌       |      ❌     |
| Password Protected Drops                     |      ✅     |       ❌       |      ❌     |
| Timed Drops e.g. recurring payments          |      ✅     |       ❌       |      ❌     |
| Custom Names e.g. user.myapp.near            |      ✅     |       ❌       |      ❌     |

'''
'''--- docs/Concepts/KeypomProtocol/GithubReadme/Introduction/our-solution.md ---
---
sidebar_label: 'Keypom Solution'
sidebar_position: 2
---
# Our Solution

Keypom allows for the creation of highly customizable access keys. These keys can be thought of as having their
own *smart contracts*. Each access key derives from what's known as a *drop*. These drops outline the different 
functionalities and behaviors the key will have. A drop can be thought of as a bucket that access keys belong to.
You can create many different buckets and fill them each with their own keys. Each key will act in accordance to the
drop, or bucket, it belongs to.

A drop can be one of four different types:

1. Simple drop.
2. Non Fungible Token drop.
3. Fungible Token drop.
4. Function Call drop.
'''
'''--- docs/Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/customization-homepage.md ---
---
sidebar_label: 'What are Drop Configurations?'
---
# What are Drop Configurations?

What sets Keypom apart from the basic [NEAR Linkdrop](https://github.com/near/near-linkdrop)? One major aspect is that Keypom allows for LOADS of customization!

This can allow for your to create linkdrops where the keys can become multi-use and controlled by start time, time between uses and much more! With these tools and Keypom's 4 drop types, you can create everything from unique onboardings to [tiered and exclusive tickets](../../../../Tutorials/Advanced/ticketing/introduction.md). 

/Users/min/Documents/NEAR_Stuff/keypom-docs/docs/Tutorials/Advanced/ticketing/introduction.md

This is all done through **Drop Configurations**.

:::info
The three objects used to customize your drops are **DropConfig**, **TimeConfig**, and **UsageConfig**.

Any customization will apply to ALL keys in that drop.
:::

[**DropConfig**](drop-customization.md) - Top level configurations, dictates major parameters such as number of uses per key.  

[**TimeConfig**](time-customization.md) - All configurations related to time, such as time between uses.  

[**UsageConfig**](usage-customization.md) - Administrative configurations, such as whether to delete the drop when all keys are used.  

[**PublicSaleConfig**](sale-customization.md) - Configurations that allow the funder to create a public sale. Public sales are done by allowing users to add keys to the drop at a fee. 

The structure for all the configurations can be seen in the tree below.

## Drop Configuration Structure
``` bash
DropConfig
├── uses_per_key
│
├── TimeConfig
│   └── start
│   └── end
│   └── throttle
│   └── interval
│
├── UsageConfig
│   └── permissions
│   └── refund_deposit
│   └── auto_delete_drop
│   └── auto_withdraw
│
├── PublicSaleConfig
│   └── max_num_keys
│   └── price_per_key
│   └── allowlist
│   └── blocklist
│   └── auto_withdraw_funds
│   └── start
│   └── end
│
├── root_account_id
```
'''
'''--- docs/Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/drop-customization.md ---
---
sidebar_label: 'Drop Configurations'
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Drop Configurations
Drop Customizations via the `DropConfig` object passed into `create_drop` can help adjust the properties and behaviors of a drop to achieve specific use-cases.

From changing the amount of times a key can be used before it's deleted to setting a public sale and making profit from keys being added to your drop, understanding the power of the `DropConfig` is crucial to making the most of Keypom!

:::tip
A configuration applies to **ALL KEYS** across a drop.  

This means that if you want keys with different configurations, you must create multiple drops with their respective configurations.
:::

# Understanding `DropConfig`
<Tabs>
<TabItem value="KPJS" label="🔑 Keypom SDK">

```ts reference
https://github.com/keypom/keypom-js/blob/29c10f949f02f673d4a3cecc21b0f74bca600075/src/lib/types/drops.ts#L64-L82
```

</TabItem>
<TabItem value="KP" label="📚 Protocol">

```rust reference
https://github.com/keypom/keypom/blob/7a654aa847f2ce9dedf65755c6a08817eece4666/contract/src/models/json_types.rs#L56-L73
```

</TabItem>
</Tabs>

For now, the focus will be `uses_per_key` and `root_account_id`. [`TimeConfig`](time-customization.md), [`UsageConfig`](usage-customization.md), and [`PublicSaleConfig`](sale-customization.md) are covered later.

---

## Uses per Key
*Default: 1*  

This parameter allows you to set the number of times a user can claim a key before it is deleted.

### Use cases
This parameter is incredibly versatile and can be used in numerous ways. Some excellent examples are:  

1. Rewards that progressively increase in value. For example, you could incentivize people to show up to all your talks at a conference. A link would be given out that needed to be physically scanned at your talk to unlock rewards. If you showed up to all the events, a jackpot prize could be claimed.  
2. A set number of [Recurring Payments](../../GithubReadme/TypesOfDrops/simple-drops.md#recurring-payments) for subscriptions or contracted/freelanced work.  
3. A method to accurately track retention, such as [Event Turnout](../../GithubReadme/TypesOfDrops/fc-drops.md#nft-ticketing)

When used with [function call drops](fc-drops.md), some more complex use cases can be created, such as Customizable Multi-Phase Onboarding and [Auto DAO-Registration](../../../../Tutorials/Advanced/daos/introduction.md)

---

## Root Account ID
*Default: `near` or `testnet`*  

The `root_account_id` parameter determines which account the newly-created claiming account will be a sub-account of. For example, the default is `near` so all accounts would end in `.near` such as `benji.near`. Changing the `root_account_id` parameter will change the root of all the accounts that users create through `create_account_and_claim` when using your drop.  

### Use cases
Let's say you have an organization called Moonpom (secretly run by our beloved Pomeranian, Moon) and you want your users want to proudly represent Moonpom!

You set `root_account_id = "moonpom.near"` and now any account created using your linkdrops will take on the form `${YOUR_USERNAME}.moonpom.near`

:::caution Important
the `root_account_id` **must** have a contract deployed to it that exposes a method `create_account` to create the sub-account. A sample contract can be found [here](https://github.com/near/near-linkdrop)
:::

'''
'''--- docs/Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/fc-drops.md ---
---
sidebar_label: 'Function Call Drops'
sidebar_position: 5
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Function Call Drops

Function call drops are by far the most powerful feature that Keypom provides. FC drops allow **any** method on **any**
contract to be executed (with some exceptions). In addition, there are a huge variety of customizations and features you can choose from when
defining the drop that come on top of the global options. The possibilities are almost endless. State of the art NFT ticketing,
lazy minting NFTs, auto registration into DAOs, analytics for marketing at events and much more.

## How does it work?

Unlike NFT and FT drops, the function calls must have everything paid for **upfront**. There is no two step process
so the creation is similar to Simple drops. Once the drop is created and keys are added, you can immediately start using it.

### Function Call Config

When creating the drop, you have quite a lot of customization available. At the top level, there is a FC drop global
config similar to how the *general* config works.

<Tabs>
<TabItem value="KPJS" label="🔑 Keypom SDK">

```ts reference
https://github.com/keypom/keypom-js/blob/e8c43f4219a79afb3c367296cc90b8d5de977945/src/lib/types/fc.ts#L68-L74
```

</TabItem>
<TabItem value="KP" label="📚 Protocol">

```rust reference
https://github.com/keypom/keypom/blob/7a654aa847f2ce9dedf65755c6a08817eece4666/contract/src/models/fc_model.rs#L53-L58
```

</TabItem>
</Tabs>

### `Method`/`MethodData`

In addition to the global config, the user can specify a set of what's known as `Method`. This represents the
information for the function being called. Within this data, there are also a few optional configurations you can use
to extend your use cases. You'll see how powerful these can be in the use cases [section](#use-cases).

<Tabs>
<TabItem value="KPJS" label="🔑 Keypom SDK">

```ts reference
https://github.com/keypom/keypom-js/blob/e8c43f4219a79afb3c367296cc90b8d5de977945/src/lib/types/fc.ts#L7-L63
```

</TabItem>
<TabItem value="KP" label="📚 Protocol">

```rust reference
https://github.com/keypom/keypom/blob/7a654aa847f2ce9dedf65755c6a08817eece4666/contract/src/models/fc_model.rs#L18-L48
```

</TabItem>
</Tabs>

`Method`/`MethodData` keeps track of the method being called, receiver, arguments, and attached deposit. In addition, there are
some optional fields that can be used to extend the use cases. If you have a contract that requires some more context from
Keypom such as the drop ID, key ID, or account ID that used the key, these can all be specified.

We've kept it generic such that you can specify the actual argument name that these will be passed in as. For example, if you
had a contract that would lazy mint an NFT and it required the account to be passed in as `receiver_id`, you could specify
an `account_id_field` set to `receiver_id` such that Keypom will automatically pass in the account ID that used the key under the
field `receiver_id`.

This logic extends to the drop ID, and key Id as well.

### Key Uses

For **every key use**, you can specify a *vector* of `Method`/`MethodData` which allows you to execute multiple function calls each
time a key is used. These calls are scheduled 1 by 1 using a simple for loop. This means that most of the time, the function
calls will be executed in the order specified in the vector but it is not *guaranteed*.

It's important to note that the Gas available is split evenly between *all* the function calls and if there are too many,
you might run into issues with not having enough Gas. You're responsible for ensuring that this doesn't happen.

The vector of `Method`/`MethodData` is *optional* for each key use. If a key use has `null` rather than `Some(Vector<MethodData>)` or `Maybe<Array<Method>>`,
it will decrement the uses and work as normal such that the `throttle_timestamp, `start_timestamp` etc. are enforced. The only
difference is that after the key uses are decremented and these checks are performed, the execution **finishes early**. The null
case does **not** create an account or send *any* funds. It doesn't invoke any function calls and simply *returns once the
checks are done*. This makes the null case act as a "burner" where you disregard any logic. This has many uses which will
be explored in the use cases [section](#use-cases).

If a key has more than 1 use, you can specify a *different vector* of `Method`/`MethodData` for **each use**. As an example, you could
specify that the first use will result in a null case and the second use will result in a lazy minting function being called.
If you have multiple uses but want them all to do the same thing, you don't have to repeat the same data. Passing in only 1
vector of `Method`/`MethodData` will result in  **all the uses** inheriting that data.

## Security

Since all FC drops will be signed by the Keypom contract, there are a few restrictions in place to avoid malicious behaviors.
To avoid users from stealing registered assets from other drops, the following methods cannot be called via FC Drops:

```rust reference
https://github.com/keypom/keypom/blob/7a654aa847f2ce9dedf65755c6a08817eece4666/contract/src/lib.rs#L926-L934
```

In addition, the Keypom contract cannot be the receiver of any function call. This is to avoid people
from calling private methods through FC Drops.

### Keypom Arguments

When a key is used and a function is called, there is a data structure that is **automatically** attached to the arguments.
This is known as the `keypom_args`. It contains the information that the drop creator specified in the `Method`/`MethodData`. 

```rust reference
https://github.com/keypom/keypom/blob/7a654aa847f2ce9dedf65755c6a08817eece4666/contract/src/stage1/function_call.rs#L17-L22
```

#### Motivation

Let's say there was an exclusive NFT contract that allowed the Keypom contract to mint NFTs as part of an FC drop. Only Keypom
was given access to mint the NFTs so they could be given out as linkdrops. The organizer only wanted links that were part of their
drop to be valid. For this reason, the NFT contract would only mint if Keypom called the `nft_mint` function and there was a field 
`series` passed in and it was equal to the drop ID created by the organizer.

Let's say the owner created an exclusive drop that happened to have a drop ID of 5. They could then go to the NFT contract
and restrict NFTs to only be minted if:
- `series` had a value of 5.
- The Keypom contract was the one calling the function.

In order for this to work, when creating the drop, the owner would need to specify that the`drop_id_field` was set to a value of `series`
such that the drop ID is correctly passed into the function.

The problem with this approach is that the NFT contract has no way of knowing which arguments were sent by the **user** when the drop 
was created as part of the MethodData `args` and which arguments are automatically populated by the Keypom contract. There is nothing 
stopping a malicious user from creating a new drop that has an ID of 6 but hard-coding in the actual arguments that `series` should have 
a value of 5. In this case, the malicious drop would have *no* `drop_id_field` and the NFT contract would have no way of knowing that the 
`series` value is malicious.

This can be prevented if a new field is introduced representing what was automatically injected by the Keypom contract itself. At the
end of the day, Keypom will **always** send correct information to the receiving contracts. If those contracts have a way to know what has
been sent by Keypom and what has been manually set by users, the problem is solved. In the above scenario, the NFT contract would simply add
an assertion that the `keypom_args` had the `account_id_field` set to `Some(series)` meaning that the incoming `series` field was set by Keypom
and not by a malicious user.

## Use Cases

Function call drops are the bread and butter of the Keypom contract. They are the most powerful and complex drops that can currently be created.
With this complexity, there are an almost infinite number of use-cases that arise.

### Proof of Attendance Protocols

A very common use case in the space is what's known as Proof of Attendance. Often times when people go to events, they want a way to prove
that they were there. Some traditional approaches would be to submit your wallet address and you would be sent an NFT or some other form of
proof at a later date. The problem with this is that it has a very high barrier to entry. Not everyone has a wallet.

With Keypom, you can create a function call drop that allows people to onboard onto NEAR if they don't have a wallet or if they do, they can
simply use that. As part of the onboarding / claiming process, they would receive some sort of proof of attendance such as an NFT. This can
be lazy minted on-demand such that storage isn't paid up-front for all the tokens.

At this point, the event organizers or the funder can distribute links to people that attend the event in-person. These links would then be
claimed by users and they would receive the proof of attendance.

### Auto Registration into DAOs

DAOs are a raging topic in crypto. The problem with DAOs, however, is there is a barrier to entry for users that aren't familiar with the
specific chain they're built on top of. Users might not have wallets or understand how to interact with contracts. On the contrary, they
might be very well versed or immersed in the DAO's topics. They shouldn't be required to create a wallet and learn the onboarding process.

With Keypom, you can create a function call drop with the main purpose of registering users into a DAO. For people that have a wallet,
this will act as an easy way of registering them with the click of a link. For users that don't have a wallet and are unfamiliar with
NEAR, they can be onboarded and registered into the DAO with the same click of a link.

### Multisig Contracts

Another amazing use-case for Keypom is allowing multisig contracts to have ZERO barrier to entry. Often times when using a multisig contract,
you will entrust a key to a trusted party. This party might have no idea what NEAR is or how to interact with your contract. With Keypom,
you can create a drop that will allow them to sign their transaction with a click of a link. No NEAR wallet is needed and no knowledge of the
chain is required.

At the end of the day, from the users perspective, they are given a link and when they click it, their portion of the multisig transaction is
signed. The action is only performed on the multisig contract once all links have been clicked. This is an extremely powerful way of doing
accomplishing multisig transactions with zero barrier to entry.

The users don't even need to create a new account. They can simply call `claim` when the link is clicked which will fire the cross-contract call
to the multisig contract and pass in the keypom arguments that will be cross-checked by that contract.

### NFT Ticketing

The problem with current NFT ticketing systems is that they require users to have a wallet. This is a huge barrier to entry for people that
are attending events but don't have wallets. In addition, there is often no proof of attendance for the event as the NFT is burned in order
to get into the event which requires an internet connection.

Keypom aims to solve these problems by having a ticketing system that has the following features.
* Users are not required to have a wallet to enter the event.
* Each ticket is unique and can only be used by one person.
* Attendees are not required to have wifi to gain entry to the event.
* Attendees that did not have a NEAR wallet can get one for free.
* Attendees can choose to receive an NFT proving their attendance at the event. This is commonly known as a [POAP](https://academy.binance.com/en/glossary/proof-of-attendance-protocol-poap).

In addition, some way to provide analytics to event organizers that contains information such as links that were:
- Given out but not clicked at all.
- Clicked but not attended.
- Partially claimed indicating the number of people that attended but did not onboard or receive a POAP.
- Fully claimed indicating the number of people that attended and received a POAP.

In order to accomplish this, you can create a drop that has 3 uses per key. These uses would be:
1. Array(`null`)
2. Array(`null`)
3. Array(function call to POAP contract to lazy mint an NFT)

The event organizer would create the links and distribute them to people however they see fit. When a user receives the link, the first
claim is automatically fired. This is a `null` case so nothing happens except for the fact that the key uses are decremented. At this point,
the organizer knows that the user has clicked the link since the uses have been decremented.

The next claim happens **only** when the user is at the door. Keypom would expose a QR code that can only be scanned by the host's phone.
This QR code would appear once the first link is clicked and contains the private key for the link. At the event, they wouldn't need any wifi
to get in as they only need to show the host the QR code. Once the host scans it, the site would ensure that they have exactly 2 out of
the 3 uses left. If they don't, they're not let in. At that point, a use is decremented from the key and the next time they visit the
ticket page (when they have internet), they would be able to claim the final use and be onboarded / receive a POAP.

<p align="center"> <img src={require("/static/img/ticketing.png").default} alt="ticketing" width="65%" height="65%"/> </p>
'''
'''--- docs/Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/ft-drops.md ---
---
sidebar_label: 'Fungible Token Drops'
sidebar_position: 4
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Fungible Token Drops

A Fungible Token drop is also a light wrapper around the simple drop. It works very similarly to how its NFT
counterpart does. First, you'll need to create the drop and then you can fund it with assets and register
key uses.

You can preload a drop with as many FTs as you'd like even if you don't have the keys yet. This will spike the
`registered_uses` and then you can create keys and slowly eat away from this "total supply" overtime. If the
drop runs out, you can send it more FTs to top up. All the keys in the FT drop will share from this supply
and every time a key is used, the `registered_uses` will decrement and the "total supply" will get smaller.

## How does it work?

As mentioned in the NFT section, every drop has a field known as `registered_uses`. This tells the contract
how many uses the drop has across all its keys. For simple drops, this field doesn't matter since all the uses
are paid for up-front when the drop is created or when keys are added. With FT drops, however,
there is a 2 step process:
- Firstly, the drop is created and all the $NEAR required is pre-paid for. This is the same as
simple drops, however, the `registered_uses` are set to 0.
- Once the drop is created, the owner must send the contract the FTs in order for keys to be
usable. This process is done through the `ft_transfer_call` workflow baked into the FT standards.
It's up to the owner to facilitate this process.

## FT Config

Along with the default global configurations for drops, if you'd like to create a FT drop,
you must specify the following pieces of information when the drop is created.

<Tabs>
<TabItem value="KPJS" label="🔑 Keypom SDK">

```ts reference
https://github.com/keypom/keypom-js/blob/e8c43f4219a79afb3c367296cc90b8d5de977945/src/lib/types/ft.ts#L4-L23
```

</TabItem>
<TabItem value="KP" label="📚 Protocol">

```rust reference
https://github.com/keypom/keypom/blob/7a654aa847f2ce9dedf65755c6a08817eece4666/contract/src/models/json_types.rs#L119-L123
```

</TabItem>
</Tabs>

By specifying this information, the drop is locked into only accepting FTs coming from the sender and contract. While
you can send as many FTs as you'd like and can over-pay, you *must* send at **least** enough FTs in one call to cover
1 use. As an example, if a drop is created such that 10 FTs will be sent when a key is used, you must send **at least 10**
and cannot break it up into separate calls where you send 5 one time and 5 another.

## Use Cases

FT drops have some awesome flexibility due to the fact that they support all the functionalities of the Simple drops, just with
more use-cases and possibilities. Let's look at some use cases to see how fungible token drops can be used.

### Recurring Payments

Recurring payments are quite a common situation. Let's say you need to send someone $50 USDC every week. You
could create a key with 5 claims that has a claim_interval` of 1 week. You would then pre-load maybe the
first week's deposit of $50 USDC and register 1 use or you could send $500 USDC for the first 10 weeks. At that
point, you would simply hand over the key to the user and they can claim once a week.

### Backend Servers

Taking the recurring payments problem to another level, imagine that instead of leaving the claims up to the
contractor, you wanted to automatically pay them through a backend server. They would give you their NEAR account
and you would send them FTs. The problem is that you don't want to expose your full access key in the server.
By creating a FT drop, you can store **only the function call access key** created by Keypom in the server.
Your backend would them use the key to call the `claim` function and pass in the user's account ID to send
them the FTs.

### Creating a Wallet with FTs

Another awesome use-case is to allow users to be onboarded onto NEAR and **also** receive FTs. As an example,
You could do a promotion where you're giving away $10 USDC to the first 100 users that sign up to your mailing
list. You can also give away QR codes at events that contain a new fungible token that you're launching. You can
simply create a FT drop and pre-load it with the FT of your choice. In addition, you can give it 0.02 $NEAR for
new wallets that are created.

You can pair this with setting the `on_claim_refund_deposit` flag to true which would make it so that if anyone claims
the fungible tokens and they *already have a wallet*, it will automatically refund you the 0.02 $NEAR. That money should
only be used for the creation of new wallets. Since your focus is on the fungible tokens, you don't want to **force users**
to create a new wallet if they have one already by specifying the claim permission to be `CreateAccountAndClaim` but instead,
you want to be refunded in case they do.

'''
'''--- docs/Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/introduction.md ---
---
sidebar_label: "Overview"
---
# Types of Drops
There are **four** types of drops, each with different types of assets. These drops can be claimed either with a brand new NEAR account or an existing one.

| Drop Type                                  Assets                                                                                                                                           |
| ------------------------------------------ | ------------------------------------------ |
| [Simple Drop](simple-drops.md)             | $NEAR                                      |
| [Non-Fungible Token Drop](nft-drops.md)    | NFT and optionally $NEAR                   |
| [Fungible Token Drop](ft-drops.md)         | Fungible Tokens and optionally $NEAR       |
| [Function Call Drop](fc-drops.md)          | Set of function-calls and optionally $NEAR |

Continue your learning journey with any of the pages below

<div class="container">
  <div class="row">
    <div class="col">
      <a href="simple-drops">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">Simple Drop</h3>
            <p class="neutraltext">Onboarding with $NEAR.</p>
          </div>
        </div>
      </a>
    </div>
    <div class="col">
      <a href="nft-drops">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">Non-Fungible Token Drops</h3>
              <p class="neutraltext">Share an NFT with a link</p>
          </div>
        </div>
      </a>
    </div>
  </div>
  <div class="row">
    <div class="col">
      <a href="ft-drops">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">Fungible Token Drop</h3>
            <p class="neutraltext">Send users FTs</p>
          </div>
        </div>
      </a>
    </div>
    <div class="col">
      <a href="fc-drops">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">Function Call Drops</h3>
              <p class="neutraltext">Onboard with Keypom's most powerful drop</p>
          </div>
        </div>
      </a>
    </div>
  </div>
</div>
<br></br>

'''
'''--- docs/Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/nft-drops.md ---
---
sidebar_label: 'Non Fungible Token Drops'
sidebar_position: 3
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Non-Fungible Token Drops

Non-Fungible Token drops are a special type that allows users to "preload" the drop with NFTs.
These tokens will then be *automatically* sent to the **claiming user**. The claiming flow
is fairly similar to simple drops in that users can either create an account or claim to an
existing one.

NFT drops are essentially a wrapper around simple drops. All the functionalities that simple
drops have are carried over but now, users can receive an NFT as well as $NEAR. This brings
introduces some customization and uniqueness to the use-cases.

## How does it work?

Every drop has a field known as `registered_uses`. This tells the contract how many uses the
drop has across all its keys. For simple drops, this field doesn't matter since all the uses
are paid for up-front when the drop is created or when keys are added. With NFT drops, however,
there is a 2 step process:
- Firstly, the drop is created and all the $NEAR required is pre-paid for. This is the same as
simple drops, however, the `registered_uses` are set to 0.
- Once the drop is created, the owner must send the contract the NFTs in order for keys to be
usable. This process is done through the `nft_transfer_call` workflow baked into the NFT standards.
It's up to the owner to facilitate this process.

Whenever the contract receives tokens, it will push the ID to a vector. These IDs are **popped** off
whenever a key is used. A user will receive the most recent token sent to the contract as the
vector is acting like a *stack*.

## NFT Config

Along with the default global configurations for drops, if you'd like to create an NFT drop,
you must specify the following pieces of information when the drop is created.

<Tabs>
<TabItem value="KPJS" label="🔑 Keypom SDK">

```ts reference
https://github.com/keypom/keypom-js/blob/e8c43f4219a79afb3c367296cc90b8d5de977945/src/lib/types/nft.ts#L4-L15
```

</TabItem>
<TabItem value="KP" label="📚 Protocol">

```rust reference
https://github.com/keypom/keypom/blob/7a654aa847f2ce9dedf65755c6a08817eece4666/contract/src/models/json_types.rs#L78-L81
```

</TabItem>
</Tabs>

By specifying this information, the drop is locked into only accepting NFTs from the sender and contract.

## Use Cases

NFT drops work really well for when you want to send a *pre-existing* NFT to a user along with
some $NEAR. Since NFT drops are a light wrapper around simple drops, most of the use-cases are
the same although people can now get NFTs as well. This means you can onboard a user with some
$NEAR **and** they *get an NFT* too.
'''
'''--- docs/Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/sale-customization.md ---
---
sidebar_label: 'Public Sale Configurations'
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Public Sale Configurations
The public sale configuration gives the funder the ability to sell access keys in their drop with a variety of configurable behaviors such as the price, or a dedicated allowlist.  

## Use cases
Public sales of access keys allow for a wide range of easier to create and more interactive events. This is done by letting you:  
* Set up an extremely cheap, exclusive event. This event can host an infinite amount of people and the cost of ticketing would be ~0.05 $NEAR.
* Sell access to gated function calls. For example, you can have an exclusive guest-book contract where users that signed it gained access to a VIP meet and greet with a famous artist.  
* Introduce FIAT payments for your users when they purchase an access key; opening up your tickets, onboardings, and NFT drops to a whole new audience.  

The sale configurations are outlined below.

<Tabs>
<TabItem value="KPJS" label="🔑 Keypom SDK">

```ts reference
https://github.com/keypom/keypom-js/blob/29c10f949f02f673d4a3cecc21b0f74bca600075/src/lib/types/drops.ts#L159-L187
```

</TabItem>
<TabItem value="KP" label="📚 Protocol">

```rust reference
https://github.com/keypom/keypom/blob/7a654aa847f2ce9dedf65755c6a08817eece4666/contract/src/models/json_types.rs#L86-L113
```

</TabItem>
</Tabs>              

---

## Maximum Number of Keys
*Default: None*  

The `max_num_keys` parameter dictates the maximum number of keys that can be added to a drop. By default, there is no limit. Using this can help create scarcity, or abide by venue capacities. 

### Use case
Pretend you are hosting an exclusive talk for your dApp and want to limit the attendance 1000 people. 

In this scenario, you could configure the drop to have `max_num_keys = 1000` in order to ensure any keys beyond 1000 cannot be bought and added to the drop.  

---

## Price per Key
*Default: None, the keys are free*  

This `price_per_key` parameter defines the price for purchasing a key. 

### Use case
This parameter can be changed based on your needs. For example, if you are running a charity event and want to bring in as many attendees as possible, you would leave both `price_per_key = 0` and  `max_num_keys` undefined. This would mean there is no limit on the number of *free* keys that can be added to the drop. 

Alternatively, if you are looking to earn money with your event, you can choose to set `price_per_key` to whatever you see fit. This value is expressed in yoctoNEAR.

---

## Allowlist 
*Default: None, anyone can add keys to the drop*  

`Allowlist` specifies a group of users that can add keys to the drop using their `accountID`. For example, if `allowlist = [benji.testnet, minqi.testnet]`, then only `benji.testnet` and `minqi.testnet` can add keys to the drop. 

If left undefined, anybody can add keys to the drop.

### Use case
In this example, pretend you are running a concert for only your closest friends. To do this, you would set `allowlist` to be a vector of their NEAR `accountID`'s. This way, you can take comfort in knowing that your friends will be the only ones with tickets to the event.  

---

## Blocklist
*Default: None, nobody is blocked*  

Contrary to the `allowlist`, the `blocklist` specifies those that are blocked from adding keys to the drop. This is empty by default, meaning nobody is blocked.

Note that the `blocklist` takes precedent over the `allowlist`. This means that if you are on both lists, you will be blocked. 

### Use case
Lets pretend that you are running a concert but there are known ticket scalpers in the community. To prevent keys from being scalped and ensure your true fans get tickets to your concert, you can add the NEAR `accountID`'s of the scalpers to the `blocklist` vector.   

---

## Auto-Withdraw Funds  
*Default: False, revenues go to funder's Keypom Balance*  

The `auto_withdraw_funds` parameter dictates where revenue from key sales will go. Every time a key is sold, the revenue will automatically be sent to one of two places:

1. the funder's Keypom balance  
2. the funder's NEAR wallet  

By default, the revenue will go to the funder's Keypom balance. If `auto_withdraw_funds = true`, the revenue generated will be sent to the funder's NEAR wallet. 

### Use case
Let's say you are an event promoter who is new to NEAR. You realize that you are only going to use Keypom for a single event.

In this scenario, rather than sending revenues to your Keypom balance and then needing to manually withdraw it once the event is over, you can set `auto_withdraw_funds = true` while creating the drop in order to guarantee that the revenues will go to your NEAR wallet automatically.  

---

## Start
*Default: None, keys can be added immediately*  

The `start` parameter dictates when keys can be purchased and added to the drop. Similar to [time configurations](time-customization.md), this is measured in non-leap-nanoseconds since January 1, 1970 0:00:00 UTC. A sample configuration is made available below. 

### Use case
Pretend you are an event coordinator for a popular event and have a limited capacity. To ensure fairness, you set a date and time for the sale to begin and let all your users know.

To do this, you can configure the `start` parameter.  

---

## End 
*Default: None, keys can be added indefinitely*  

The `end` parameter defines when keys can no longer be purchased and added to the drop. 

### Use case
For an upcoming event, you want to create a pre-sale of tickets for dedicated fans. To do this you can create a drop, separate from the main ticket sale, that begins early and ends before the general admission tickets go on sale. 

To do this, you can configure the `end` parameter.

---

## Example Public Sale Configuration

```ts
const ONE_SECOND_NS = 1e9;

pub_sale: {
    // Maximum of 100 Keys
    max_num_key: 100,

    // 1 $NEAR per key
    price_per_key: parseNearAmount("1"),

    // only allow benji.testnet and minqi.testnet to add keys
    allowlist: ["benji.testnet", "minqi.testnet"],

    // don't allow boogieman.testnet to add keys
    blocklist: ["boogieman.testnet"],

    // send revenue back to funder's NEAR wallet
    auto_withdraw_funds: true,

    // start 5 minutes from now
    start: (Date.now() * 1000000) + ONE_SECOND_NS * 300,

    // end 15 minutes from now
    end: (Date.now() * 1000000) + ONE_SECOND_NS * 900
}

```

'''
'''--- docs/Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/simple-drops.md ---
---
sidebar_label: 'Simple Drops'
sidebar_position: 2
---

# Simple Drops

The most basic type of drop is the simple kind. Any keys that are part of a simple drop can
only be used for 1 thing: **transferring $NEAR**. Once the key is claimed, the claiming account
will receive the $NEAR specified in the `deposit_per_use`. Simple drops are a great way to send $NEAR to claiming accounts while not storing a lot
of information on the contract. Below are a couple use cases.

## Backend Servers

Let's say you have a backend server that should send 10 $NEAR to the first 3
people that redeem an NFT. Rather than exposing your full access key in the backend server,
you could create a simple drop that either has 3 keys or 1 key that is claimable 3 times.
In the drop, you'd specify that each time the key is claimed, the specified account would
receive 10 $NEAR.

## Recurring Payments

Recurring payments are quite a common situation. If you need to send someone 10 $NEAR once a
month for 6 months, you could create a simple drop that has a `claim_interval` of 1 month with
a `start_timestamp` of next week. Every time the key is used, 10 $NEAR is sent to the account. If
the contractor missed a month's payment, they can claim the key late but can never use the key more
than what is intended.

<p align="center"> <img src={require("/static/img/recurring_payments.png").default} alt="recurring payments" width="60%"/> </p>

## Quick Onboarding

If you need to quickly onboard users onto NEAR, you could create a simple drop with a
small amount of $NEAR (enough to create a wallet) and set the claim permission to be
`CreateAccountAndClaim`. This means that the key can only be used to create accounts.
You can then add keys as you wish to the drop and give them out to users so they can create
accounts and be onboarded onto NEAR.
'''
'''--- docs/Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/time-customization.md ---
---
sidebar_label: 'Time Configurations'
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Time Configurations
Time configurations are particularly useful in defining limits on ***when*** a key may be used. This can have a wide range of applications from [Subscriptions](../../../../Tutorials/Advanced/subscriptions/introduction.md) to [Ticketing](../../../../Tutorials/Advanced/ticketing/introduction.md).

<Tabs>
<TabItem value="KPJS" label="🔑 Keypom SDK">

```ts reference
https://github.com/keypom/keypom-js/blob/29c10f949f02f673d4a3cecc21b0f74bca600075/src/lib/types/drops.ts#L87-L112
```

</TabItem>
<TabItem value="KP" label="📚 Protocol">

```rust reference
https://github.com/keypom/keypom/blob/7a654aa847f2ce9dedf65755c6a08817eece4666/contract/src/models/drop_model.rs#L89-L108
```

</TabItem>
</Tabs>
:::tip
All these time parameters are measured in non-leap-nanoseconds and can be tricky to work with. An example struct has been provided [below](time-customization.md).
:::  

---

## Start 
*Default: none, Keys can be used anytime*  

`Start` time is useful for any drops where you intend to restrict access until a certain time. Setting a `start` time effectively sets an activation time; a time where the keys become usable afterwards. Before a `start` time is reached, if a user tries to `claim` the key or use `create_account_and_claim`, it will not work. 

### Use case
Let's say you are running a concert, and you want to give fans exclusive access using preferred and general admission tickets. Those with preferred admission tickets can enter anytime, even when the band is setting up. General admission, on the other hand, may only enter once the band is set up. 

In this case, you would hand out general admission tickets with a start time in the time configurations and another set of preferred admission tickets with an earlier start time in the time configurations.

To do this, you would need to create two drops, one for preferred admission and another for general admission. This is because, as covered in the [Drop Configurations Introduction](customization-homepage.md), one set of configurations will apply to **all** keys in that drop. 

---

## End
*Default: none, Keys can be used anytime*  

The end parameter acts as a deactivation time. This means that once the end time is reached, all the keys in the drop will be deactivated and can no longer be used. 

### Use case
Let's pretend that you are at NEARCON representing an NFT marketplace looking to onboard users onto your platform. Your strategy is to offer an exclusive NFT to users that sign up during NEARCON. 

To do this, you hand out QR codes with an NFT drop embedded in the QR code during the event. To ensure that the users sign up *during* NEARCON, you set the drop configuration's `end` parameter to be the end of NEARCON. 

---

## Throttle
*Default: none, Keys can be used anytime*  

The `throttle` parameter controls how much time must pass between key uses. This works great if you want to control how frequently somebody is able to claim their assets. 

### Use case
Pretend you are running an NFT raffle for your latest creation, the MoonNFT. For this raffle, the 20th person claiming their key will be the winner and will receive their own personalized MoonNFT. 

To protect again spam and ensure a fair playing field, you can configure the drop to have a 5 minute cooldown using the `throttle` parameter. This way, a contestant cannot spam claim the key to increase their odds of winning. 

---

## Interval
*Default: none, Keys can be used anytime*  

The `interval` parameter is similar to the `throttle` parameter but uses the  `start` time as a constant reference. This means if `interval` is every week, the key will become useable on the same day every week, regardless of when the last key use was. 

### Use case
Pretend you have a subscription to Moon's **weekly** dog biscuit delivery service that charges you every Monday. Due to all the horror stories of data breaches and identity theft, you now no longer give out your credit card information. For this reason, you wish to pay with $NEAR but the current linkdrop standard does not allow for a subscription model. 

With Keypom, you can give Moon a multi-use simple drop with a `throttle` parameter set to 2 weeks. This way, Moon will only be able to claim every week, making it a subscription. This is also beneficial in giving a sense of security to Moon, as they can claim later than Monday and know that they will be able to claim again next Monday. 

If, for one week, Moon forgets to claim, he would be able to claim twice the next week.

The massive benefit here is that you can have a subscription service in the NEAR ecosystem and never need to expose any of your private information.

---

## Example Time Configuration

```ts
const ONE_SECOND_NS = 1e9;

time: {
    // Start time is 30 seconds from now
    start: (Date.now() * 1000000) + ONE_SECOND_NS * 30,

    // End time is 5 minutes from start time
    end: (Date.now() * 1000000) + ONE_SECOND_NS * 330,

    // Time between use is 15 seconds
    throttle: ONE_SECOND_NS * 15,

    // Time after start for first use is 15 seconds
    interval: ONE_SECOND_NS * 15,
}
```

'''
'''--- docs/Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/usage-customization.md ---
---
sidebar_label: 'Usage Configurations'
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Usage Configurations
Usage configurations control behaviors surrounding *how* a key can be used. For example, dictating whether a key can be used to call only `claim`, or `create_account_and_claim`.  

<Tabs>
<TabItem value="KPJS" label="🔑 Keypom SDK">

```ts reference
https://github.com/keypom/keypom-js/blob/29c10f949f02f673d4a3cecc21b0f74bca600075/src/lib/types/drops.ts#L117-L154
```

</TabItem>
<TabItem value="KP" label="📚 Protocol">

```rust reference
https://github.com/keypom/keypom/blob/7a654aa847f2ce9dedf65755c6a08817eece4666/contract/src/models/drop_model.rs#L142-L154
```

</TabItem>
</Tabs>

---

## Permissions
*Default: `claim` AND `create_account_and_claim`*  

The `permissions` parameter assigns which claim methods the user can call with the key you give them. They can either call both, or just one. 

### Use case
Pretend you are hosting a talk about your NEAR dApp: `Kramerly`. Your only goal is to onboard as many *new* users from the audience as possible. If the user already has a NEAR wallet, they shouldn't be able to claim assets and onboard. This is similar to free-trials in Web2 whereby only new users are able to participate.

To do this, you can set the `permissions` parameter to `create_account_and_claim`.

---

## Refund Deposit
*Default: False*  

This `refund_deposit` parameter defines whether or not the `deposit_for_use` amount should be refunded to the drop owner if `claim` is called rather than `create_account_and_claim`.

Part of funding a drop is *optionally* covering the cost for creating a new named account. Sometimes, you might want to sponsor a small amount of $NEAR to cover that cost but it should only be used for account creation. If an account is *not* being created (through calling `create_account_and_claim`, the `deposit_per_use` should be sent back to the funder.

### Use case
This parameter is usually a helpful mechanism when onboarding large numbers of users onto NEAR. Pretend you are onboarding 100,000 new users. Since they are new, you factor in the storage deposit needed to create the new wallets into your funding costs. After the event, however, it turns out half of the users had existing wallets.  

If `refund_deposit` was true, you would be refunded the `deposit_per_use` that normally would have been sent to the existing NEAR wallets.  

---

## Auto-Delete Drop 
*Default: False*  

If `auto_delete_drop` is set to `true`, the drop will be deleted once all the keys have been used and deleted.

### Use case
A great use case is for one-off drops where you don't plan on adding more keys to. By setting `auto_delete_drop` to true, the drop will automatically be deleted once all the keys are used.   

---

## Auto-Withdraw
*Default: False*  

This parameter is used to automatically withdraw your Keypom balance once you delete your last drop.

### Use case
This parameter is useful for users that create 1-off drops and don't want to worry about deleting their drop once it's used or having to manually withdraw their Keypom balance.  

A funder could create a drop and give out keys without ever needing to return back to Keypom. Once the drop is exhausted, it is deleted and the funder's balance is automatically withdrawn. 

Note that this must be used together with `auto_delete_drop`.

## Account Creation Fields
*Default: None*

The `account_creation_fields` allows you to specify any arguments to be passed in to `create_account` when creating your account

### Use case
Pretend you are looking to use Keypom to onboard users and give them custom subaccounts. To ensure that only the people  using your drop can create a subaccount, you can add a secret `account_creation_fields` argument to your drop.

This way, if someone outside of the drop were to try to call `create_account` on your contract, they would need to pass in the secret `account_creation_field` that they would not know.   
'''
'''--- docs/Concepts/KeypomProtocol/GithubReadme/contribute.md ---
---
sidebar_label: 'Contributing'
sidebar_position: 9
---
# Contributing

First off, thanks for taking the time to contribute! Contributions are what makes the open-source community such an amazing place to learn, inspire, and create. Any contributions you make will benefit everybody else and are **greatly appreciated**.

Please try to create bug reports that are:

- _Reproducible._ Include steps to reproduce the problem.
- _Specific._ Include as much detail as possible: which version, what environment, etc.
- _Unique._ Do not duplicate existing opened issues.
- _Scoped to a Single Bug._ One bug per report.

You can use [markdownlint-cli](https://github.com/igorshubovych/markdownlint-cli) to check for common markdown style inconsistency.
'''
'''--- docs/Concepts/KeypomProtocol/GithubReadme/costs.md ---
---
sidebar_label: 'Costs'
sidebar_position: 4
---
# Costs

It is important to note that the Keypom contract is 100% **FEE FREE** and will remain that way for the *foreseeable future*. This contract is a public good and is meant to inspire change in the NEAR ecosystem.

With that being said, there are several mandatory costs that must be taken into account when using Keypom. These costs are broken down into two categories: per key and per drop.

> **NOTE:** Creating an empty drop and then adding 100 keys in separate calls will incur the same cost as creating a drop with 100 keys in the same call.

## Per Drop

When creating an empty drop, there is only one cost to keep in mind regardless of the drop type:
- Storage cost (**~0.006 $NEAR** for simple drops)

## Per Key
Whenever keys are added to a drop (either when the drop is first created or at a later date), the costs are outlined below.

### Key Costs for Simple Drop

- $NEAR sent whenever the key is used (can be 0).
- Access key allowance (**~0.0187 $NEAR per use**).
- Storage for creating access key (**0.001 $NEAR**).
- Storage cost (**~0.006 $NEAR** for simple drops)

### Additional Costs for NFT Drops

Since keys aren't registered for use until **after** the contract has received the NFT, we don't know how much storage the token IDs will use on the contract. To combat this, the Keypom contract will automatically measure the storage used up for storing each token ID in the `nft_on_transfer` function and that $NEAR will be taken from the funder's balance.

### Additional Costs for FT Drops

Since accounts claiming FTs may or may not be registered on the Fungible Token contract, Keypom will automatically try to register **all** accounts. This means that the drop creators must front the cost of registering users depending on the `storage_balance_bounds` returned from the FT contract. This applies to every use for every key.

In addition, Keypom must be registered on the FT contract. If you create a FT drop and are the first person to ever do so for a specific FT contract on Keypom, Keypom will be automatically registered when the drop is created. This is a one time cost and once it is done, no other account will need to register Keypom for that specific FT contract.

### Additional Costs for FC Drops

Drop creators have a ton of customization available to them when creation Function Call drops. A cost that they might incur is the attached deposit being sent alongside the function call. Keypom will charge creators for all the attached deposits they specify.

> **NOTE:** The storage costs are dynamically calculated and will vary depending on the information you store on-chain.

## Deleting Keys and Drops

Creators have the ability to delete drops and keys at any time. In this case, **all** the initial costs they incurred for the remaining keys will be refunded to them (minus Gas fees of course).

## Automatic Refunds When Keys are Used

One way that Keypom optimizes the fee structure is by performing automatic refunds for some of the initial costs that creators pay for when keys are used. All the storage that is freed along with any unused allowance is automatically sent back to the creator whenever a key is used. This model drastically reduces the overall costs of creating drops and creates incentives for the keys to be used. 

## Account Balances for Smooth UX

In order to make the UX of using Keypom seamless, the contract introduces a debiting account model. All costs and refunds go through your account's balance which is stored on the contract. This balance can be topped up or withdrawn at any moment using the `add_to_balance()`  and `withdraw_from_balance()` functions.

This account balance is not *required*, however. You can create a drop by attaching a deposit to the call. Keep in mind that this will create an account balance for you behind the scenes, however.

## Built With

- [near-sdk-rs](https://github.com/near/near-sdk-rs)
- [near-api-js](https://github.com/near/near-api-js)
'''
'''--- docs/Concepts/KeypomProtocol/GithubReadme/licenses.md ---
---
sidebar_label: 'License and Acknowledgments'
sidebar_position: 10
---

# License

This project is licensed under the **GPL License**.

# Acknowledgments

Thanks for these awesome resources that were used during the development of the **Keypom Contract**:

- <https://github.com/dec0dOS/amazing-github-template>
- <https://github.com/near/near-linkdrop>
- <https://github.com/near/near-wallet/blob/master/packages/frontend/docs/Linkdrop.md>
'''
'''--- docs/Concepts/KeypomProtocol/GithubReadme/password-protect.md ---
---
sidebar_label: 'Password Protected Keys'
sidebar_position: 3
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Password Protected Keys

Password protecting key uses is an extremely powerful feature that can unlock many use-cases. Keypom has baked flexibility and customization
into the contract such that almost all use-cases involving password protection can be accomplished. Whenever a key is added to a drop, it can
have a unique password for each individual use, or it can one password for all uses in general.

## How Does It Work?

The Keypom implementation has been carefully designed so that users can't look at the NEAR Explorer to view what was passed into the contract
either when the drop was created or when a key was used to try and copy those passwords. We also want passwords to be unique across keys so that
if you know the password for 1 key, it doesn't work on a different key. In order to accomplish this, we use the concept of hashing.

Imagine you have a drop with 2 keys and you want to password protect each key. Rather than forcing the drop funder to input a unique password for 
each key and having them remember each one, we can have them input a single **base password** and derive unique passwords from it that are paired 
with the key's public key.

This is the most scalable option as it allows the drop funder to only need to remember 1 password and they can derive all the other ones using the
hashing algorithm and public key.

In the above scenario, let's say the funder inputs the base password as `mypassword1`. If a user wanted to claim the first key, they would need to input
into the contract:

`hash("mypassword1" + key1_public_key)`

The funder would need to give the user this hash somehow (such as embedding it into the link or having an app that can derive it). It's important to note 
that the funder should probably **NOT** give them the base password otherwise the user could derive the passwords for all other keys (assuming those keys have 
the same base password).

## What is Stored On-Chain?

How does Keypom verify that the user passed in the correct password? If the funder were to simply pass in `hash("mypassword1" + key1_public_key)` into the
contract as an argument when the key is created, users could just look at the NEAR Explorer and copy that value. 

Instead, the funder needs to pass in a double hash when the key is created: `hash(hash("mypassword1" + key1_public_key))`. 

This is the value that is stored on-chain and when the user tries to claim the key, they would pass in just the single hash: `hash("mypassword1" + key1_public_key)`.  
The contract would then compute `hash(hash("mypassword1" + key1_public_key))` and compare it to the value stored on-chain. If they match, the key is claimed.

Using this method, the base password is not exposed to the user, nobody can look on-chain or at the NEAR explorer and derive the password, and the password is unique
across multiple keys.

# Passwords Per Key Use

Unlike the passwords per key which is the same for all uses of a key, the drop creator can specify a password for each individual key use. This password follows
the same pattern as the passwords per key in that the funder inputs a `hash(hash(SOMETHING))` and then the user would input `hash(SOMETHING)` and the contract
would hash this and compare it to the value stored on-chain.

The difference is that each individual key use can have a different value stored on-chain such that the user can be forced to input a different hash each time.
This `SOMETHING` that is hashed can be similar to the global password per key example but this time, the desired key use is added: `hash("mypassword1" + key1_public_key + use_number)`

In order to pass in the passwords per use, a new data structure is introduced so you only need to pass in passwords for the uses that have them. This is known as the 
`JsonPasswordForUse` and is as follows:

<Tabs>
<TabItem value="KPJS" label="🔑 Keypom SDK">

```ts reference
https://github.com/keypom/keypom-js/blob/29c10f949f02f673d4a3cecc21b0f74bca600075/src/lib/types/drops.ts#L193-L198
```

</TabItem>
<TabItem value="KP" label="📚 Protocol">

```rust reference
https://github.com/keypom/keypom/blob/7a654aa847f2ce9dedf65755c6a08817eece4666/contract/src/models/json_types.rs#L152-L157
```

</TabItem>
</Tabs>

## Adding Your First Password

Whenever keys are added to Keypom, if there's passwords involved, they must be passed in using the following format. 

```rust
passwords_per_use: Option<Vec<Option<Vec<JsonPasswordForUse>>>>,
passwords_per_key: Option<Vec<Option<String>>>,
```

Each key that is being added either has a password, or doesn't. This is through the `Vec<Option<>`. This vector **MUST** be the same length as the number of keys created.This doesn't 
mean that every key needs a password, but the Vector must be the same length as the keys.

As an example, if you wanted to add 3 keys to a drop and wanted only the first and last key to have a password_per_key, you would pass in:
```rust
passwords_per_key: Some(vec![Some(hash(hash(STUFF))), None, Some(hash(hash(STUFF2)))])
```

# Complex Example

To help solidify the concept of password protected keys, let's go through a complex example. Imagine Alice created a drop with a `uses_per_key` of 3.
She wants to create 4 keys: 
- Key A: No password protection.
- Key B: Password for uses 1 and 2.
- Key C: Password for use 1 only.
- Key D: Password that doesn't depend on the use.

In this case, for Keys B and C, they will have the same base password but Alice wants to switch things up and have a different base password for Key D.
When these keys are added on-chain, the `passwords_per_key` will be passed in as such:

```rust
passwords_per_key: Some(vec![
    None, // Key A
    None, // Key B
    None, // Key C
    // Key D
    Some(
        hash(hash("key_d_base_password" + key_d_public_key))
    ), 
]),
```
The passwords for Key B and Key C will be passed in as such:

```rust
passwords_per_key: Some(vec![
    None, // Key A

    // Key B
    vec![
        {
            pw: hash(hash("keys_bc_base_password" + key_b_public_key + "0")),
            key_use: 0
        },
        {
            pw: hash(hash("keys_bc_base_password" + key_b_public_key + "1")),
            key_use: 1
        }
    ]

    // Key C
    vec![
        {
            pw: hash(hash("keys_bc_base_password" + key_c_public_key + "0")),
            key_use: 0
        }
    ]

    None // Key D
]),
```

The drop funder would then give the keys out to people:

## Key A
Alice gives Bob Key A and he would be able to claim it 3 times with no password required.

## Key D
Alice gives Charlie Key D and he would be able to claim it 3 times with the hashed global key password: `hash("key_d_base_password" + key_d_public_key)`.
When Charlie claims the key, he would input the password `hash("key_d_base_password" + key_d_public_key)` and the contract would hash that and check to see
if it matches what is stored on-chain (which it does).

If anyone tried to look at what Charlie passes in through the explorer, it wouldn't work since his hash contains the public key for key D and as such it is only
valid for Key D.

Similarly, if Charlie tried to look at the explorer when Alice created the keys and attempted to pass in `hash(hash("key_d_base_password" + key_d_public_key))`, 
the contract would attempt to hash this and it would NOT match up with what's in the storage.

## Key B
Alice gives Eve Key B and she would need a password for claim 1 and 2. For the first claim, she needs to pass in: `hash("keys_bc_base_password" + key_b_public_key + "0")`.
The contract would then check and see if the hashed version of this matches up with what's stored on-chain for that use.

The second time Eve uses the key, she needs to pass in hash("keys_bc_base_password" + key_b_public_key + "1") and the same check is done.

If Eve tries to pass in `hash("keys_bc_base_password" + key_b_public_key + "0")` for the second key use, the contract would hash it and check:

hash(hash("keys_bc_base_password" + key_b_public_key + "0")) == hash(hash("keys_bc_base_password" + key_b_public_key + "1"))

Which is incorrect and the key would not be claimed.

Once Eve claims the key 2 times, the last claim is not password protected and she's free to claim it.

Key C is similar to Key B except that it only has 1 password for the first use.

# Use-Cases

Password protecting key uses is a true game changer for a lot of use-cases spanning from ticketing to simple marketing and engagement.

### Ticketing and POAPs

Imagine you had an event and wanted to give out exclusive POAPs to people that came. You didn't want to force users to: 
- Have a NEAR wallet
- Have wifi at the door.
- Burn NFTs or tokens to get into the event.

The important thing to note is that by using password protected key uses, you can **GUARANTEE** that anyone that received a POAP had to
**PHYSICALLY** show up to the event. This is because the POAP would be guarded by a password.

You could create a ticketing event using Keypom as outlined in the [Ticketing](#nft-ticketing) section and have a key with 2 uses. The first use 
would be password protected and the second use is not. The first use will get you through the door and into the event and the second
contains the exclusive POAP and can onboard you. This means that anyone with the ticket, or key, can only receive the POAP if they know the password.

You can have a scanner app that would scan people's tickets (tickets are just the private key). In this scanner app, the *base password* is stored and 
whenever the ticket is scanned, the public key is taken and the following hash is created:

`hash(base password + public key)`

This hash is then used to claim a use of the key and you will be let into the party. The scanner app can deterministically generate all the
necessary hashes for all the tickets by simply scanning the QR code (which has the private key exposed). The tickets are worthless unless
you actually show up to the event and are scanned.

Once you're scanned, you can refresh your ticket page and the use the second key claim which is not password protected. This use contains the
exclusive POAP and you can onboard onto NEAR.

### Marketing and Engagement

Let's say that you're at an event and want people to show up to your talks and learn about your project. You can have a scanner app similar to the
one mentioned in the ticketing scenario that derives the password for any use on any key.

At the beginning of the event, you can give out a bunch of keys that have progressively increasing rewards gated by a password. At the end, the last
key use contains a special reward that is only unlocked if the user has claimed all the previous key uses.

In order for these uses to be unlocked, People must show up to your talks and get scanned. The scanner will derive the necessary password and unlock 
the rewards. Users will only get the exclusive reward if they come to ALL your talks.

This idea can be further expanded outside the physical realm to boost engagement on your websites as an example:

You want users to interact with new features of your site or join your mailing list.

You can have links where uses are ONLY unlocked if the user interacts with special parts of your site such as buying a new NFT or joining your mailing list 
or clicking an easter egg button on your site etc.

## dApp Free Trials for Users

In the upcoming Keypom V2.0, dApps will be able to integrate the Keypom wallet selector plugging to allow for free trials for their users. One of the biggest pain-points with Web3 at the moment is the fact that users need to fund wallets *before* they interact with a dApp.

In Web2, a user can find value in an application by using it before they go through the messy onboarding process. Why can't Web3 be the same?

Keypom will allow apps to create links that will automatically sign users into their applications and give them a free trial of the app. The user will be able to interact with things, spend $NEAR, sign transactions and gather assets through the trial. A unique feature of this is that the user will *never be redirected to the NEAR wallet* to approve transactions.

Keypom will provide a seamless user experience where users can find value in applications. Once the free trial is over and users have collected assets / $NEAR through interacting with the dApp, they can *THEN* choose to onboard.

With Keypom's technology, users will be locked into only interacting with the dApp specified in the link. Users can't rug the application and steal the $NEAR embedded in the link. The funds are allocated for 1 thing and 1 thing only: free trials of that one specific dApp.

<p align="center">
  <img src={require("/static/img/trial_accounts.png").default} width="65%" height="65%" alt="trial accounts"/>
</p>

'''
'''--- docs/Concepts/KeypomProtocol/GithubReadme/querying.md ---
---
sidebar_label: 'Querying Information from Keypom'
sidebar_position: 7
---
# Query Information From Keypom

Keypom allows users to query a suite of different information from the contract. This information can be broken down into two separate objects that are returned. JsonDrops and JsonKeys.
```rs
pub struct JsonDrop {
    // Drop ID for this drop
    pub drop_id: DropId,
    // owner of this specific drop
    pub owner_id: AccountId,
    // Balance for all keys of this drop. Can be 0 if specified.
    pub deposit_per_use: U128,
    // Every drop must have a type
    pub drop_type: JsonDropType,
    // The drop as a whole can have a config as well
    pub config: Option<DropConfig>,
    // Metadata for the drop
    pub metadata: Option<DropMetadata>,
    // How many claims
    pub registered_uses: u64,
    // Ensure this drop can only be used when the function has the required gas to attach
    pub required_gas: Gas,
    // Keep track of the next nonce to give out to a key
    pub next_key_id: u64,
}

pub struct JsonKeyInfo {
    // Drop ID for the specific drop
    pub drop_id: DropId,
    pub pk: PublicKey,
    // How many uses this key has left. Once 0 is reached, the key is deleted
    pub remaining_uses: u64,
    // When was the last time the key was used
    pub last_used: u64,
    // How much allowance does the key have left. When the key is deleted, this is refunded to the funder's balance.
    pub allowance: u128,
    // Nonce for the current key.
    pub key_id: u64,
}
```

## Key Specific
- **`get_key_balance(key: PublicKey)`**: Returns the $NEAR that will be sent to the claiming account when the key is used 
- **`get_key_total_supply()`**: Returns the total number of keys currently on the contract
- **`get_keys(from_index: Option<U128>, limit: Option<u64>)`**: Paginate through all keys on the contract and return a vector of key info
- **`get_key_information(key: PublicKey)`**: Return the key info for a specific key
- **`get_key_information_batch(keys: Vec<PublicKey>)`**: Return a vector of key info for a set of public keys

## Drop Specific
- **`get_drop_information(drop_id: Option<DropId>, key: Option<PublicKey>)`**: Return the drop info for a specific drop. This can be queried for by either passing in the drop ID or a public key.
- **`get_key_supply_for_drop(drop_id: DropId)`**: Return the total number of keys for a specific drop
- **`get_keys_for_drop(drop_id: DropId, from_index: Option<U128>, limit: Option<u64>)`**: Paginate through all keys for a specific drop and return a vector of key info
- **`get_drop_supply_for_owner(account_id: AccountId)`**: Return the total number of drops for a specific account
- **`get_drops_for_owner(account_id: AccountId, from_index: Option<U128>, limit: Option<u64>)`**: Paginate through all drops for a specific account and return a vector of drop info 
- **`get_nft_supply_for_drop(drop_id: DropId)`**: Get the total number of NFTs registered for a given drop.
- **`get_nft_token_ids_for_drop(drop_id: DropId, from_index: Option<U128>, limit: Option<u64>)`**: Paginate through token IDs for a given drop
- **`get_next_drop_id()`**: Get the next drop ID that will be used for a new drop

### Utility
- **`get_root_account()`**: Get the global root account that all created accounts with be based off.
- **`get_user_balance()`**: Get the current user balance for a specific account.
'''
'''--- docs/Concepts/KeypomProtocol/GithubReadme/testing.md ---
---
sidebar_label: 'Keypom Tests'
sidebar_position: 8
---
# Running the Keypom Tests

We have put together a suite of test cases that can be found in the `__tests__` folder. These range anywhere from simple config tests all the way to full blown ticketing and POAPs.

In the `__tests__` folder, there are sub-folders with each type of test. Some of these sub-folders contain a `utils` folder with some utility functions used.

All the tests use `workspaces-js`. In order to run all the tests, run the following command.

```bash
yarn && yarn test
```

This will run through each test 1 by 1. If you wish to only run a set of specific tests, the full list of commands can be found below.

```bash
"test:internals"
"test:stage1"
"test:stage1:simple"
"test:ticketing"
"test:poaps"
"test:configs"
"test:nft-drops"
"test:ft-drops"
"test:profiling"
"test:passwords"
```
'''
'''--- docs/Concepts/KeypomProtocol/balances.md ---
---
sidebar_label: 'Keypom Balances'
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Keypom Balances
## What is a Keypom Balance?
Let's put on our imagination caps for a second; pretend you're an event host and you are in charge of ticketing for numerous events. You deduce that for the sake of organization, the best approach would be to create separate drops for separate events. 

Being the busy event organizer that you are, sometimes you need to create these drops and keys while on the road. As we can see in the [basic tutorials](../../Tutorials/Basics/simple-drops.md), you need to attach a deposit to every one of your function calls: every time you create a drop, add keys, delete keys etc. This can be a real headache for a busy event organizer!

This is where the concept of a **Keypom Balance** comes in real handy!

Every account that uses Keypom carries an internal balance (in $NEAR) on the Keypom contract. Effectively, the Keypom balance is similar to a debit card. You can overload your balance and sip from it as you interact with the contract.  

Let's go back to your event organizer persona; this Keypom Balance allows you to simply preload your "debit card" with loads of $NEAR and then go about your business without needing to worry about transferring $NEAR for ever function call!
## Interacting with Balances
There are a few functions that you can use to interact with your Keypom balance. Let's quickly run through their meanings, and then show some examples!

<Tabs>
<TabItem value="KPJS" label="🔑 Keypom SDK">

```ts
// Deposit some amount of $NEAR or yoctoNEAR$ into the Keypom contract. This amount can then be used to create drops or add keys without having to explicitly attach a deposit every time. It can be thought of like a bank account.
export const addToBalance{
	/** Account object that if passed in, will be used to sign the txn instead of the funder account. */
	account?: Account,
	/** If using a browser wallet through wallet selector and that wallet should sign the transaction, pass in the object. */
	wallet?: AnyWallet,
	/** Amount of tokens to add but considering the decimal amount (non human-readable).
	Transferring one $NEAR should be passed in as "1000000000000000000000000" and NOT "1" */
	amountYocto?: string
	/** Human readable format for the amount of tokens to add.
	Transferring one $NEAR should be passed in as "1" and NOT "1000000000000000000000000" */
	amountNear?: string,
	/** When signing with a wallet, a success URl can be included that the user will be redirected to once the transaction has been successfully signed. */
	successUrl?: string
}

// Withdraw your balance back into your wallet. 
export const withdrawBalance {
	/** Account object that if passed in, will be used to sign the txn instead of the funder account. */
	account?: Account,
	/** If using a browser wallet through wallet selector and that wallet should sign the transaction, pass in the object. */
	wallet?: AnyWallet,
}

//This allows you to view your own or other people's Keypom balance. This can be useful to determine 
//if you need to top up if you are on the verge of creating a large drop
export const getUserBalance{ 
	accountId: string 
}
```

</TabItem>
<TabItem value="KP" label="📚 Protocol">

```rust
// Deposit some amount of $NEAR or yoctoNEAR$ into the Keypom contract. This amount can then be used to create drops or add keys without having to explicitly attach a deposit every time. It can be thought of like a bank account.
pub fn add_to_balance(&mut self)

// Allows users to withdraw their balance
pub fn withdraw_from_balance(&mut self) 

// Return the current balance for a given account
pub fn get_user_balance(&self, account_id: AccountId) -> U128
```

</TabItem>
</Tabs>

For example, Alice wants to add 10 $NEAR to her Keypom balance. She will do this by calling `addToBalance` and transferring 10 $NEAR to the Keypom contract. Then, if Alice wants to create a drop that costs her 5 $NEAR, she can simply create the drop and Keypom will automatically deduct from her internal Keypom balance rather than needing to transfer 5 $NEAR to the contract.  

Once she has created the drop, she can check her balance using `getUserBalance`, which will return 5 $NEAR. Then, she can withdraw this 5 $NEAR into her NEAR wallet; this will cause her Keypom balance to go down to 0 $NEAR. 

'''
'''--- docs/Concepts/KeypomProtocol/overview.md ---
---
sidebar_label: 'Introduction to Keypom'
sidebar_position: 1
---
# Introduction to Keypom
> To view our debut talk at NEARCON 2022, click [here](https://www.youtube.com/watch?v=J-BOnfhHV50).

Keypom is an access key factory created as a result of 3 common problems that arose in the ecosystem.

1. People want a *cheap, customizable, and unique* onboarding experience for users.
2. Companies don't want to expose **full access keys** in their backend servers.
3. dApps want a *smooth UX* with zero barrier to entry onboarding.

The contract was initially created as a way to handle the 1 $NEAR minimum deposit required for creating linkdrops using the [regular linkdrop contract](https://github.com/near/near-linkdrop/blob/f24f2608e1558db773f2408a28849d330abb3881/src/lib.rs#L18). 

If users wanted to create linkdrops, they needed to attach a **minimum** of 1 $NEAR. This made it costly and unscalable for projects that wanted to mass onboard onto NEAR. Keypom, on the other hand, has been highly optimized to allow for the lowest possible costs.

## Problem

Blockchain technology comes with many benefits such as sovereign ownership, digital rights, privacy, freedom, 
peer to peer coordination and much more. The problem with this technology, however, is that there is an extremely 
high barrier to entry for an everyday individual. None of it matters if nobody can onboard.

It’s confusing to create and fund a crypto wallet. People are unfamiliar with the process, technical jargon, 
and the general flow. NEAR’s account model is powerful, but extremely underutilized because it’s complex for 
developers to take full advantage of. Keypom wraps this up in a single API call.

With NEAR’s goal of onboarding 1 billion users to Web3, there needs to be a solution to this high barrier to 
entry for developers building on NEAR and users onboarding to their apps and the NEAR ecosystem.

Below is a table outlining the minimum costs to onboard a new user onto NEAR with a named account.

|                      | 1 Account       | 1,000 Accounts  | 1,000,000 Accounts |
|----------------------|-----------------|-----------------|--------------------|
| Traditional Linkdrop | ~1 NEAR         | ~1,003 NEAR     | ~1,002,840 NEAR    |
| Keypom               | ~0.0035 NEAR    | ~3.5 NEAR       | ~3,500 NEAR        |
|                      | ~99.65% Cheaper | ~99.65% Cheaper | ~99.65% Cheaper    |

Keypom allows anyone to create highly customizable onboarding experiences for their users. These experiences 
can be both for new, or existing users. If someone already has a wallet, they can still use a Keypom link to 
experience an app, and then transfer the assets later.

## Comparable Solutions

|                                              | **Keypom** | **NEAR Drop** | **Satori** |
|----------------------------------------------|------------|---------------|------------|
| NEAR Drop                                    |      ✅     |       ✅       |      ❌     |
| FT Drop                                      |      ✅     |       ❌       |      ❌     |
| NFT Drop                                     |      ✅     |       ❌       |      ✅     |
| Function Call Drop                           |      ✅     |       ❌       |      ❌     |
| Embeddable in Dapps                          |      ✅     |       ❌       |      ❌     |
| Wallet Selector Integration                  |      ✅     |       ❌       |      ❌     |
| No Fee                                       |      ✅     |     Maybe?    |      ❌     |
| No Backend / 3rd Party                       |      ✅     |       ✅       |      ❌     |
| Campaigns                                    |      ✅     |       ✅       |      ✅     |
| Multi-Step e.g. Tickets click > scan > claim |      ✅     |       ❌       |      ❌     |
| Password Protected Drops                     |      ✅     |       ❌       |      ❌     |
| Timed Drops e.g. recurring payments          |      ✅     |       ❌       |      ❌     |
| Custom Names e.g. user.myapp.near            |      ✅     |       ❌       |      ❌     |

# Our Solution

Keypom allows for the creation of highly customizable access keys. These keys can be thought of as having their
own *smart contracts*. Each access key derives from what's known as a *drop*. These drops outline the different 
functionalities and behaviors the key will have. A drop can be thought of as a bucket that access keys belong to.
You can create many different buckets and fill them each with their own keys. Each key will act in accordance to the
drop, or bucket, it belongs to.

A drop can be one of four different types:

1. Simple drop.
2. Non Fungible Token drop.
3. Fungible Token drop.
4. Function Call drop.
'''
'''--- docs/Concepts/LinkdropsAndAccessKeys/linkdrop-basics.md ---
---
sidebar_label: 'Linkdrop Basics'
sidebar_position: 5
---
# How Linkdrops Work

For some background as to how linkdrops works on NEAR: 

*The funder that has an account and some $NEAR:* 
- creates a keypair locally `(pubKey1, privKey1)`. The blockchain doesn't know of this key's existence yet since it's all local for now.
- calls `send` on the contract and passes in the `pubKey1` as an argument as well as the desired `balance` for the linkdrop.
    - The contract will map the `pubKey1` to the desired `balance` for the linkdrop.
    - The contract will then add the `pubKey1` as a **function call access key** with the ability to call `claim` and `create_account_and_claim`. This means that anyone with the `privKey1` that was created locally, can claim this linkdrop. 
- Funder will then create a link to send to someone that contains this `privKey1`. The link follows the following format: 
```
    wallet.testnet.near.org/linkdrop/{fundingContractAccountId}/{linkdropKeyPairSecretKey}?redirectUrl={redirectUrl}
```
* `fundingContractAccountId`: The contract accountId that was used to send the funds.
* `linkdropKeyPairSecretKey`: The corresponding secret key to the public key sent to the contract.
* `redirectUrl`: The url that wallet will redirect to after funds are successfully claimed to an existing account. The URL is sent the accountId used to claim the funds as a query param.

*The receiver of the link that is claiming the linkdrop:* 
- Receives the link which includes `privKey1` and sends them to the NEAR wallet.
- Wallet creates a new keypair `(pubKey2, privKey2)` locally. The blockchain doesn't know of this key's existence yet since it's all local for now.
- Receiver will then choose an account ID such as `new_account.near`. 
- Wallet will then use the `privKey1` which has access to call `claim` and `create_account_and_claim` in order to call `create_account_and_claim` on the contract.
    - It will pass in `pubKey2` which will be used to create a full access key for the new account.
- The contract will create the new account and transfer the funds to it alongside any NFT or fungible tokens pre-loaded.
'''
'''--- docs/Concepts/LinkdropsAndAccessKeys/near-access-keys.md ---
---
sidebar_label: 'NEAR Access Key Model'
sidebar_position: 1
---
# NEAR Access Key Model

A Keypair is generated locally and the pubkey is add to your account. 

Access keys with numerous types are unique to NEAR. There are Full Access (similar to traditional keypairs) and Function Call Access Keys.  These Function Call Access Keys can only call specified accounts and methods. It cannot be used to send any NEAR, deploy a contract, create an account etc.  

This means the Function Call Access key can be used as a throwaway key.

Your account can have any number of Access Keys, including ZERO. If there are zero, the account cannot deploy or withdraw funds (rugging). This is done as a form of trust for users.  
'''
'''--- docs/Concepts/welcome.md ---
---
sidebar_label: 'Home'
---
# Concepts
Welcome to the concepts section of Keypom's developer documentation. Here you'll learn all about Keypom.

## Major Concepts

<div class="container">
  <div class="row">
    <div class="col">
      <a href="KeypomProtocol/GithubReadme/TypesOfDrops/introduction">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">Types of Drops</h3>
            <p class="neutraltext">Learn about types of Keypom drops.</p>
          </div>
        </div>
      </a>
    </div>
    <div class="col">
      <a href="KeypomProtocol/GithubReadme/TypesOfDrops/customization-homepage">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">Drop Configurations</h3>
              <p class="neutraltext">Customize your drops.</p>
          </div>
        </div>
      </a>
    </div>
  </div>
  <div class="row">
    <div class="col">
      <a href="KeypomProtocol/balances">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">Keypom Balances</h3>
            <p class="neutraltext">See how Keypom Balances can save you time.</p>
          </div>
        </div>
      </a>
    </div>
    <div class="col">
      <a href="KeypomProtocol/GithubReadme/costs">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">Costs</h3>
              <p class="neutraltext">Find out about Keypom's low costs.</p>
          </div>
        </div>
      </a>
    </div>
  </div>
</div>
<br></br>

## Other Resources

Here are some additional resources, and references. These may help you deepen your understanding or clarify any issues.

<div class="container">
  <div class="row">
    <div class="col">
      <a href="https://github.com/keypom/keypom">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">Source Code</h3>
            <p class="neutraltext">Explore Keypom's smart contracts.</p>
          </div>
        </div>
      </a>
    </div>
    <div class="col">
      <a href="https://github.com/keypom/keypom-js">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">Keypom JavaScript SDK</h3>
              <p class="neutraltext">Delve into the source code of the SDK.</p>
          </div>
        </div>
      </a>
    </div>
  </div>
  <div class="row">
    <div class="col">
      <a href="https://docs.near.org/">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">NEAR Docs</h3>
            <p class="neutraltext">Documentation and Tutorials for NEAR.</p>
          </div>
        </div>
      </a>
    </div>
    <div class="col">
      <a href="https://nomicon.io/">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">Nomicon</h3>
              <p class="neutraltext">Concepts and Standards on NEAR.</p>
          </div>
        </div>
      </a>
    </div>
  </div>
</div>
'''
'''--- docs/Cookbook/balances.md ---
---
sidebar_label: 'Balances'
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Balances
This part of the cookbook contains everything related to Keypom balances. This balance acts like a debit card, where you deposit $NEAR up front and create drop and interact with Keypom without needing to attach deposits to everything you do. For more on balances, see [here](../Concepts/KeypomProtocol/balances.md). 
## Getting Started
For the cookbook, you will need the following installed. 
1. [Node JS](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  
2. [Keypom JS SDK](https://github.com/keypom/keypom-js#getting-started)

:::info note
Ensure that you have initialized Keypom using the `initKeypom` function prior to running any of the SDK examples. For more info on this, see the [introduction page](welcome.md#connection-to-near-and-initializing-the-sdk)
:::

## Viewing User Keypom Balances
To view your Keypom balance, you can use the following. This will allow you to decipher if you need to add more $NEAR to your balance before creating a drop. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Query for the drop information for a specific drop
const userBal = await getUserBalance({
    accountId: "benjiman.testnet",
})

console.log('userBal: ', userBal)
```

</TabItem>

</Tabs>

___
## Adding to Keypom Balances
If you don't have sufficient funds to create your drop, you may add more $NEAR to your balance using the following. When specifying the amount to add, you can use `amountNear` or `amountYocto` to add in NEAR or yoctoNEAR respectively. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
await addToBalance({
    account: fundingAccount, 
    amountNear: "5"
});
```

</TabItem>

</Tabs>

___

## Withdrawing from Keypom Balance
If you are confident you no longer need Keypom or simply wish to withdraw your Keypom balance back into your NEAR wallet, you can use the following:

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
await withdrawBalance({
    account: fundingAccount
})
```

</TabItem>

</Tabs>

___

'''
'''--- docs/Cookbook/drops/NEAR.md ---
---
sidebar_label: 'Simple NEAR Drops'
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Simple NEAR Drops
This part of the cookbook contains a quick guide on the simple NEAR drop.
## Getting Started
For the cookbook, you will need the following installed. 
1. [Node JS](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  
2. [Keypom JS SDK](https://github.com/keypom/keypom-js#getting-started)

:::info note
These scripts will not run without the proper setup shown in the [introduction page](../welcome.md#connection-to-near-and-initializing-the-sdk).
:::

## Creating a Simple Drop
A drop is the fundamental building block of Keypom. It is a collection of access keys that all share the same properties. A simple drop allows you to send $NEAR by sharing those access keys in the form of a linkdrop. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Creating drop with 2 single use keys
const {keys} = await createDrop({
    account: fundingAccount,
    numKeys: 2,
    depositPerUseNEAR: "0.1",
});

console.log(keys)
```

</TabItem>
</Tabs>

:::caution
`createDrop` is limited to adding 50 password protected keys or 100 non-protected keys at a time. To add more keys, see the [large drops](#creating-a-large-drop) example below. 
:::

___

## Creating a Large Drop
Adding keys, either using `createDrop` or `addKeys` is limited to 50 password protected or 100 non-protected keys. To bypass this, the drop can be created first and then the keys can be added by looping `addKeys`.

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Creating drop with 0 single use keys
let {dropId} = await createDrop({
    account: fundingAccount,
    depositPerUseNEAR: "0.001",
});

let numKeys = 200
let keysAdded = 0;
let allSecretKeys = [];
while (keysAdded < numKeys) {
    const keysToAdd = Math.min(50, numKeys - keysAdded);
    const {secretKeys, publicKeys} = await generateKeys({
        numKeys: keysToAdd,
    });
    await addKeys({
        account: fundingAccount,
        dropId,
        publicKeys
    });
    keysAdded += keysToAdd;
    allSecretKeys = allSecretKeys.concat(secretKeys);
}
```

</TabItem>

</Tabs>

___

## Delete Drop
A drop can be deleted manually at any time using `deleteDrops`. This will refund all unclaimed key balances back to the drop funder's Keypom balance. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Get all the drops for a given user
let drops = await getDrops({accountId: "minqi.testnet"});

// Delete all the drops currently funded by `minqi.testnet`
await deleteDrops({
    account: fundingAccount,
    drops
})

// Delete 2 seperate drops given their IDs
await deleteDrops({
    account: fundingAccount,
    dropIds: ["123123123123123", "12391238012380123"]
})
```

</TabItem>

</Tabs>

___

'''
'''--- docs/Cookbook/drops/customizations/dropConfig.md ---
---
sidebar_label: 'Drop Configurations'
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Drop Configurations
This part of the cookbook contains everything related to drop configurations, including multi-use drops, and creating custom subaccounts.
## Getting Started
For the cookbook, you will need the following installed. 
1. [Node JS](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  
2. [Keypom JS SDK](https://github.com/keypom/keypom-js#getting-started)

:::info note
These scripts will not run without the proper setup shown in the [introduction page](../../welcome.md#connection-to-near-and-initializing-the-sdk).
:::

## Creating a Multi-Use Simple Drop
To make all the keys in the drop multi-use, you can specify `usesPerKey` in the dropConfig parameter `config`. In this example, each of the 2 keys created will have 5 uses. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Creating drop with 2 keys with 5 uses each
const {keys} = await createDrop({
    account: fundingAccount,
    numKeys: 2,
	config:{
		usesPerKey: 5
	},
    depositPerUseNEAR: "0.1",
});

console.log(keys)
```

</TabItem>

</Tabs>

:::caution
`createDrop` is limited to adding 50 password protected keys or 100 non-protected keys at a time. To add more keys, see the [large drops](#creating-a-large-drop) example. 
:::

___

## Creating Custom Subaccounts
By specifying a custom `dropRoot`, all new accounts created using your drop will be a subaccount of the specified account. For example, all accounts created with the drop below will follow the form of `${YOUR_USERNAME}.moonpom.near`.

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Creating drop with 2 keys with 5 uses each
const {keys} = await createDrop({
    account: fundingAccount,
    numKeys: 2,
	config:{
		dropRoot: "mint-brigade.testnet"
	},
    depositPerUseNEAR: "0.1",
});

console.log(keys)
```

</TabItem>

</Tabs>

:::caution
the `dropRoot` account **must** have a contract deployed to it that exposes a method `create_account` to create the sub-account. A sample contract can be found [here](https://github.com/near/near-linkdrop)

In addition, it is wise to [`gatekeep account creation`](usageConfig.md#gatekeeping-account-creation) to ensure that not anyone can create subaccounts of your account.

For this reason, the above code **will not work** out of the box. 
:::

___

'''
'''--- docs/Cookbook/drops/customizations/password.md ---
---
sidebar_label: 'Password Protection'
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Password Protection
This part of the cookbook contains everything related password protecting your drops.
## Getting Started
For the cookbook, you will need the following installed. 
1. [Node JS](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  
2. [Keypom JS SDK](https://github.com/keypom/keypom-js#getting-started)

:::info note
These scripts will not run without the proper setup shown in the [introduction page](../../welcome.md#connection-to-near-and-initializing-the-sdk).
:::

## Password Protecting your Entire Drop
Password protecting your drop prevents unauthorized people from claiming keys in your drop. A claim will fail if the [*actual password*](#claiming-a-password-protected-key) (base password is NOT the claiming password) is not included in the claim transaction. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Create drop with 1 single use password protected key
let {keys, dropId} = await createDrop({
    account: fundingAccount,
    numKeys: 1,
    depositPerUseNEAR: "0.1",
    basePassword: "base-password"
})

console.log(keys)
```

</TabItem>

</Tabs>

___

## Claiming a Password-Protected Key
When claiming a password protected key, the password is not actually the base password. The base password is just one component that is universal for all keys across the entire drop. The actual password for each claim is different but follows the following format format:

```
hash(basePassword + publicKey + current_key_use)
```

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
let base_password = "base-password"

// Create drop with 1 password protected key
let {keys, dropId} = await createDrop({
    account: fundingAccount,
    numKeys: 1,
    depositPerUseNEAR: "0.1",
    basePassword: base_password
})

// Create password using base + pubkey + key use as string
const keyInfo1 = await getKeyInformation({
    publicKey: keys.publicKeys[0]
})
let passwordForClaim = await hashPassword(base_password + keys.publicKeys[0] + keyInfo1.cur_key_use.toString())

// Claim with created password
await claim({
    accountId: "minqianlu.testnet",
    secretKey: keys.secretKeys[0],
    password: passwordForClaim
})
```

</TabItem>

</Tabs>

___

## Password Protecting a Specific Key Use
Rather than password protecting your entire drop, you may only want to protect certain key uses. A great use case of this is for [ticketing](../../../Tutorials/Advanced/ticketing/architecture.md#attendance-required-for-poap), when a bouncer would scan your ticket to claim your key and admit you into the event but only they know the password. This would prevent people admitting themselves into the event and gaining access to any POAPs and goodies available only to those who physically attend. 

To specify key uses to password protect, simply add it to the `passwordProtectedUses` array. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Create drop with 10 password protected keys and 5 key uses each
let {keys, dropId} = await createDrop({
    account: fundingAccount,
    numKeys: 10,
    config:{
		usesPerKey: 5
	},
    depositPerUseNEAR: "0.1",
    basePassword: "base-password",
    // Password protect the first, third and fourth key uses
    passwordProtectedUses: [1, 3, 4],
})

console.log(keys)
```

</TabItem>

</Tabs>

___

## Delete Drop
A drop can be deleted manually at any time using `deleteDrops`. This will refund all unclaimed key balances back to the drop funder's Keypom balance. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Get all the drops for a given user
let drops = await getDrops({accountId: "minqi.testnet"});

// Delete all the drops currently funded by `minqi.testnet`
await deleteDrops({
    account: fundingAccount,
    drops
})

// Delete 2 seperate drops given their IDs
await deleteDrops({
    account: fundingAccount,
    dropIds: ["123123123123123", "12391238012380123"]
})
```

</TabItem>

</Tabs>

___

'''
'''--- docs/Cookbook/drops/customizations/saleConfig.md ---
---
sidebar_label: 'Access Key Marketplace'
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Sale Configurations
This part of the cookbook contains everything related to drops, including creating a drop, password protecting it, and utilizing Keypom arguments.
## Getting Started
For the cookbook, you will need the following installed. 
1. [Node JS](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  
2. [Keypom JS SDK](https://github.com/keypom/keypom-js#getting-started)

:::info note
These scripts will not run without the proper setup shown in the [introduction page](../../welcome.md#connection-to-near-and-initializing-the-sdk).
:::

## Public Sale Drop
A public sale drop is one where you can sell the access keys from a drop to other users. These keys will all have the same properties and can be bought by anyone. The maximum number of keys in the drop can be set using `maxNumKeys`. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Create drop with a maximum of 10 keys that can be added by anyone
const { keys, dropId } = await createDrop({
    account: fundingAccount,
    depositPerUseNEAR: 0.1,
    config: {
        sale: {
            maxNumKeys: 10,
            pricePerKeyNEAR: 1
        }
    }
});

console.log(keys)
```

</TabItem>

</Tabs>

___

## Allowing Only Certain Users to Buy Keys
A public sale drop can be turned into a more private sale by only allowing certain accounts to purchase keys from the drop. This is done by using the `allowlist` argument. Any `accountId` specified here will be able to buy keys from your drop. If someone not on the list tries to buy from your drop, they will be rejected. 

By default, if no `allowlist` is included, then anybody can purchase a key.

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Create drop with a maximum of 10 keys that can be added by benji and min
const { keys, dropId } = await createDrop({
    account: fundingAccount,
    depositPerUseNEAR: 0.1,
    config: {
        sale: {
            maxNumKeys: 10,
            pricePerKeyNEAR: 1
            allowlist: ["benji.testnet", "minqi.testnet"]
        }
    }
});

console.log(keys)
```

</TabItem>

</Tabs>

___

## Blocking People from a Public Sale
To protect your public sale, you may also choose to block certain accounts from purchasing keys. This can be done by using the `blocklist` argument. This prohibits select accounts from purchasing keys from your drop. 

:::note
here that since no `allowlist` is specified, anybody can purchase keys. However, since `evil-moon.testnet` is on the blocklist, they will not be allowed to do so. This means that everybody except for `evil-moon.testnet` has permission to purchase a key. 
:::

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Create drop with a maximum of 10 keys that can be added anyone but evil-moon
const { keys, dropId } = await createDrop({
    account: fundingAccount,
    depositPerUseNEAR: 0.1,
    config: {
        sale: {
            maxNumKeys: 10,
            pricePerKeyNEAR: 1
            blocklist: ["evil-moon.testnet"]
        }
    }
});

console.log(keys)
```

</TabItem>

</Tabs>

___

## Buying Keys from a Public Sale
If you are allowed to buy tickets from a public sale, you can simply create a new key and call `addKeys` on the public sale drop with the ticket price attached to the `extraDepositNEAR` argument.

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// 10 $NEAR ticket price
const TICKET_PRICE = "10"
// Desired sale's dropId
const SALE_DROP_ID = "1684876169052"

// Generate a random key
const {publicKeys} = await generateKeys({
    numKeys: 1
});

await addKeys({
    account: fundingAccount,
    publicKeys,
    dropId: SALE_DROP_ID,
    extraDepositNEAR: TICKET_PRICE
})
```

</TabItem>

</Tabs>

:::note
In its the example above, anybody can buy as many tickets as they'd like within the limits of the drop. For further customization, you could build a "public sale bot" contract. 

This contract would act as an entry point that users interface with and buy tickets from; allowing you to restrict the number of tickets and add further customization. To facilitate this, you would need to [create an `allowlist`](#allowing-only-certain-users-to-buy-keys) containing the bot contract. 
:::

___

## Modifying Sale `allowlist`
After your public sale drop has been created, you can modify the `allowlist` by adding or removing users from it using `addToSaleAllowlist` and `removeFromSaleAllowlist`. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
const {dropId} = await createDrop({
    numKeys: 0,
    depositPerUseNEAR: 0.1,
    config: {
        sale: {
            maxNumKeys: 2,
            pricePerKeyNEAR: 1,
            allowlist: ["evil-moon.testnet"]
        }
    }
});

// Remove evil-moon from allowlist
await removeFromSaleAllowlist({
    account: fundingAccount, 
    dropId, 
    accountIds: ["evil-moon.testnet"]
});

// Add benji and minqi to allowlist
await addToSaleAllowlist({
    account: fundingAccount, 
    dropId, 
    accountIds: ["benji.testnet", "minqi.testnet"]
});
```

</TabItem>

</Tabs>

___

## Modifying Sale `blocklist`
After your public sale drop has been created, you can modify the `blocklist` by adding or removing users from it using `addToSaleBlocklist` and `removeFromSaleBlocklist`. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
const {dropId} = await createDrop({
    numKeys: 0,
    depositPerUseNEAR: 0.1,
    config: {
        sale: {
            maxNumKeys: 2,
            pricePerKeyNEAR: 1,
            blocklist: ["minqi.testnet", "benji.testnet"]
        }
    }
});

// Remove evil-moon benji and minqi from blocklist
await removeFromSaleBlocklist({
    account: fundingAccount, 
    dropId, 
    accountIds: ["benji.testnet", "minqi.testnet"]
});

// Add evil-moon to blocklist
await addToSaleBlocklist({
    account: fundingAccount, 
    dropId, 
    accountIds: ["evil-moon.testnet"]
});
```

</TabItem>

</Tabs>

___
'''
'''--- docs/Cookbook/drops/customizations/timeConfig.md ---
---
sidebar_label: 'Time Configurations'
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Time Configurations
This part of the cookbook contains everything related to time configurations, including start and end times, a time throttled drop, and using it to create a recurring payment tool.
## Getting Started
For the cookbook, you will need the following installed. 
1. [Node JS](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  
2. [Keypom JS SDK](https://github.com/keypom/keypom-js#getting-started)

:::info note
These scripts will not run without the proper setup shown in the [introduction page](../../welcome.md#connection-to-near-and-initializing-the-sdk).
:::

:::tip
All time values are measured in Unix Time (non-leap-nanoseconds since January 1, 1970 0:00:00 UTC). 
:::

## Drop with a Start and End Time
The drop below is only active for 1.5 minutes, starting 15 seconds after the drop is created. Any claims before or after that window will fail. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
const ONE_SECOND_NS = 1e9;

// Creating timed drop with 1 double use keys
const {keys, dropId} = await createDrop({
    account: fundingAccount,
    numKeys: 1,
    config:{
        time: {
            // Start time is 15 seconds from now
            start: (Date.now() * 1000000) + ONE_SECOND_NS * 15,
            // End time is 90 seconds from start time
            end: (Date.now() * 1000000) + ONE_SECOND_NS * 105,
        },
    },
    depositPerUseNEAR: "0.1",
});

console.log(keys)
```

</TabItem>

</Tabs>

___

## Time Throttled Drop
A drop with a define time throttle will not allow consecutive `claims` on the same key within the indicated time. With the drop below, users can only claim their key every 15 seconds. If they try to `claim` twice in ten seconds, the second `claim` will fail as 15 seconds has not elapsed since the first `claim`. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
const ONE_SECOND_NS = 1e9;

// Creating time throttled drop with a double use keys
const {keys} = await createDrop({
    account: fundingAccount,
    numKeys: 1,
    config:{
        usesPerKey: 2,
        time: {
            // Time between use is 15 seconds
            throttle: ONE_SECOND_NS * 30,
        },
    },
    depositPerUseNEAR: "0.1",
});

console.log(keys)
```

</TabItem>

</Tabs>

___

## Creating Recurring Payments
Recurring payments are quite a common situation. Say you need to send a contractor 50 $NEAR every week for 4 weeks. With Web2, they would need to provide a payment method and trust the you with this sensitive information. 

By leveraging a time configuration, you can eliminate this risk by sending them a key with limited funds attached. You could create a drop where there is one key with 4 uses, usable once a week.

First is the `start` and `end` time. These define a period time for which the drop is active and can be used by the contractor, in this case 30 days after the drop is created. 

Next, the `interval` parameter is specified. This is set to 1 week, meaning each week after the start time, a new `claim` is made available for the contractor. This is different from the `throttle` parameter as that uses the previous claim as a reference.

**This allows the contractor to `claim` multiple times if they miss one week rather than being forced to wait a week after each claim and potentially get pushed out of the drop's 30 day validity and lose out on funds they are entitled to.**

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
const ONE_SECOND_NS = 1e9;

// Creating timed drop with 1 key with 4 uses
const {keys} = await createDrop({
    account: fundingAccount,
    numKeys: 1,
    config:{
        usesPerKey: 4,
        time: {
            // Start time is now + 5s
            start: (Date.now() * 1000000) + ONE_SECOND_NS * 5,
            // End time is 30 day after start time
            end: (Date.now() * 1000000) + ONE_SECOND_NS * 2592000,
            // Time after start for first use is 1 week
            interval: ONE_SECOND_NS * 604800,
        },
    },
    depositPerUseNEAR: "50",
});

console.log(keys)
```

</TabItem>

</Tabs>

___

'''
'''--- docs/Cookbook/drops/customizations/usageConfig.md ---
---
sidebar_label: 'Claiming Behavior'
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Usage Configurations
This part of the cookbook contains everything related to claiming behavior and usage configurations. These will range from permissions for different types of claims, to automatically deleting the drop once all the keys have been used. 
## Getting Started
For the cookbook, you will need the following installed. 
1. [Node JS](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  
2. [Keypom JS SDK](https://github.com/keypom/keypom-js#getting-started)

:::info note
These scripts will not run without the proper setup shown in the [introduction page](../../welcome.md#connection-to-near-and-initializing-the-sdk).
:::

## Only New Accounts can Claim
Using `permissions` in the `usage` config, you can specify whether an account can call `claim`, `create_account_and_claim` or both. Here, the claimer must create a new account as they may only call `create_account_and_claim`. 

If no `permissions` are specified, the claimer can use either function.

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
const { keys } = await createDrop({
    account: fundingAccount,
    numKeys: 1,
    depositPerUseNEAR: "1",
    config: {
        usage:{
            permissions: `create_account_and_claim`
        }
    }
});

console.log(keys)
```

</TabItem>

</Tabs>

___

## Only Existing Accounts can Claim
Using `permissions` in the `usage` config, you can specify whether an account can call `claim`, `create_account_and_claim` or both. Here, the claimer must have an existing account as they may only call `claim`. 

If no `permissions` are specified, the claimer can use either function.

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
const { keys } = await createDrop({
    account: fundingAccount,
    numKeys: 1,
    depositPerUseNEAR: "1",
    config: {
        usage:{
            permissions: `claim`
        }
    }
});

console.log(keys)
```

</TabItem>

</Tabs>

___
## Refunding Deposit when `Claim` is Called
When creating keys for your drop, each is loaded with enough $NEAR to cover the cost of creating an account for each claim. If a user claims with an existing account, this deposit is lost and transferred to the user. If you wish to retain those deposits whenever `claim` is called instead of `create_account_and_claim`, you can use the following. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
const { keys } = await createDrop({
    account: fundingAccount,
    numKeys: 1,
    depositPerUseNEAR: "1",
    config: {
        usage:{
            refundDeposit: true
        }
    }
});

console.log(keys)
```

</TabItem>

</Tabs>

___

## Automatically Deleting Drop when Empty
By default, depleted drops are not deleted unless you manually delete them. To delete them automatically, include the following. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
const { keys } = await createDrop({
    account: fundingAccount,
    numKeys: 1,
    depositPerUseNEAR: "1",
    config: {
        usage:{
            autoDeleteDrop: true
        }
    }
});

console.log(keys)
```

</TabItem>

</Tabs>

___

## Automatically Withdrawing your Balance
By default, withdrawing your Keypom balance back into your wallet is only done when call `withdrawBalance`. If you wish to withdraw it once all your drops have been depleted, you can turn on `autoDeleteDrop` and `autoWithdraw`.  

This will ensure that once this drop is empty it is automatically deleted and, assuming it is the final drop on your account, will automatically withdraw your Keypom balance.

:::note
This will only automatically withdraw your balance if and only if the last drop you have. If you empty a this drop but it is not the last drop on your account, you will need to manually withdraw your balance. 
:::

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
const { keys } = await createDrop({
    account: fundingAccount,
    numKeys: 1,
    depositPerUseNEAR: "1",
    config: {
        usage:{
            autoDeleteDrop: true,
            autoWithdraw: true
        }
    }
});

console.log(keys)
```

</TabItem>

</Tabs>

___

## Gatekeeping Account Creation
When accounts are created with drops using a custom [`dropRoot`](dropConfig.md#using-a-custom-drop-root), they will be subaccounts of the `dropRoot`.

If you wish to make these subaccounts exclusive, you can gatekeep this process by using `accountCreationFields` to check if the claiming account is coming from your drop. Note that the `dropRoot` account would need to expose a `create_account` function that looks similar to the following:

```rust
#[payable]
pub fn create_account(&mut self, new_account_id: AccountId, new_public_key: PublicKey, funder: String, keypomArgs: keypom_args) -> Promise {
        assert!(keypomArgs.funderIdField == "funder_id","Call must come from valid Keypom drop");
        assert!(funder == EXPECTED_FUNDER == "funder_id","Funder must be approved");
        ...
}
```

The following shows a drop where users can only claim with a new account, and only those using your drop can create subaccounts of `moonpom.near`

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Creating FC drop that injects accountId into function call arguments
let {keys, dropId} = await createDrop({
    account: fundingAccount,
    numKeys: 1,
    config: {
        usage:{
            permissions: `create_account_and_claim`,
            accountCreationFields: {
                funderIdField: "funder_id"
            }
        },
        dropRoot: "mint-brigade.testnet"
    },
    depositPerUseNEAR: "1",
})

console.log(keys)
```

</TabItem>

</Tabs>

For more info on injected `keypom_args`, see the [`keypom_args`](../fc.md#using-and-verifying-injected-keypom-arguments) section. 

___

'''
'''--- docs/Cookbook/drops/fc.md ---
---
sidebar_label: 'Function Call Drops'
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Function Call Drops
This part of the cookbook contains a quick overview on how to create an assortment of function call drops, using Keypom injected arguments, and attaching NFTs to your FC drop by lazy minting them.
## Getting Started
For the cookbook, you will need the following installed. 
1. [Node JS](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  
2. [Keypom JS SDK](https://github.com/keypom/keypom-js#getting-started)

:::info note
These scripts will not run without the proper setup shown in the [introduction page](../welcome.md#connection-to-near-and-initializing-the-sdk).
:::

## Creating a Single Method, Single Use Function Call Drop
A Function Call Drop allows the user to call almost any function on any NEAR smart contract when claiming. An example is shown below where the method `mint` is called on `MY_CONTRACT` with the specified `memo` and `metadata` arguments. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
MY_CONTRACT = "guest-book.examples.keypom.testnet"

// Creating a single key single use FC drop
let {keys} = await createDrop({
    account: fundingAccount,
    numKeys: 1,
    depositPerUseNEAR: "0.1",
    fcData: {
        methods: [
            // First key use
            [
                {
                    receiverId: MY_CONTRACT,
                    methodName: "add_message",
                    args: JSON.stringify({
                        text: "first"
                    }),
                    attachedDeposit: parseNearAmount("0.001"),
                },
            ],
        ]   
    }   
})

console.log(keys)
```

</TabItem>

</Tabs>

___

## Single Method, Multi-Use Drop
To further expand the FC drop, you have the ability to call a different method for each claim. This is shown below, where the first use calls `mint`, the second call does nothing, and the third calls `sell`. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
MY_CONTRACT = "guest-book.examples.keypom.testnet"

// Creating a single key single use FC drop
let {keys} = await createDrop({
    account: fundingAccount,
    numKeys: 1,
    config: {
        usesPerKey: 3
    },
    depositPerUseNEAR: "0.1",
    fcData: {
        methods: [
            // First key use
            [
                {
                    receiverId: MY_CONTRACT,
                    methodName: "add_message",
                    args: JSON.stringify({
                        text: "first"
                    }),
                    attachedDeposit: parseNearAmount("0.001"),
                },
            ],
            // Second key use
            null,
            // Third key use
            [
                {
                    receiverId: MY_CONTRACT,
                    methodName: "add_message",
                    args: JSON.stringify({
                        text: "first-point-five"
                    }),
                    attachedDeposit: parseNearAmount("0.001"),
                }
            ],
        ]   
    }   
})

console.log(keys)
```

</TabItem>

</Tabs>

___

## Multi-Method, Single Use Key Drop
With each `claim`, you can also call multiple functions. Note this would call each function in succession after the previous one is resolved. In the example below, the `mint`, `null` case, and `sell` functions are called during the first `claim`. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
MY_CONTRACT = "guest-book.examples.keypom.testnet"

// Creating a single key single use FC drop
let {keys} = await createDrop({
    account: fundingAccount,
    numKeys: 1,
    depositPerUseNEAR: "0.1",
    fcData: {
        methods: [
            // First key use
            [
                {
                    receiverId: MY_CONTRACT,
                    methodName: "add_message",
                    args: JSON.stringify({
                        text: "first"
                    }),
                    attachedDeposit: parseNearAmount("0.001"),
                },
                null
                {
                    receiverId: MY_CONTRACT,
                    methodName: "add_message",
                    args: JSON.stringify({
                        text: "second"
                    }),
                    attachedDeposit: parseNearAmount("0.001"),
                },
            ],
        ]   
    }   
})

console.log(keys)
```

</TabItem>

</Tabs>

___

## Multi-Method, Multi-Use Drop
By combining the [multi-claim](#creating-a-multi-claim-function-call-drop) and [multi-function call](#creating-a-multi-function-call-drop) drops together, you can call multiple number of functions for multiple claims. As an example, a key with 3 uses can be seen:

1. `add_message`
2. `null`
3. `nft_mint`, `add_message`, `nft_transfer`

The drop for this would look like the following

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
MY_CONTRACT = "guest-book.examples.keypom.testnet"

// Creating a single key single use FC drop
let {keys: key4} = await createDrop({
    account: fundingAccount,
    numKeys: 1,
    config: {
        usesPerKey: 3
    },
    depositPerUseNEAR: "0.1",
    fcData: {
        methods: [
            // First key use
            [
                {
                    receiverId: MY_CONTRACT,
                    methodName: "add_message",
                    args: JSON.stringify({
                        text: "first"
                    }),
                    attachedDeposit: parseNearAmount("0.001"),
                }
            ],
            // Second key use
            null,
            // Third key use
            [
                {
                    receiverId: NFT_CONTRACT,
                    methodName: "nft_mint",
                    args: JSON.stringify({
                        token_id: "keypom-cookbook-1",
                        receiver_id: "minqi.testnet",
                        metadata: {
                            title: "My Test Keypom NFT",
                            description: "NFT from my first NFT Drop!",
                            media: "https://bafybeiftczwrtyr3k7a2k4vutd3amkwsmaqyhrdzlhvpt33dyjivufqusq.ipfs.dweb.link/goteam-gif.gif",
                        },
                    }),
                    attachedDeposit: parseNearAmount("0.001"),
                },
                {
                    receiverId: MY_CONTRACT,
                    methodName: "add_message",
                    args: JSON.stringify({
                        text: "second"
                    }),
                    attachedDeposit: parseNearAmount("0.001"),
                },
                {
                    receiverId: NFT_CONTRACT,
                    methodName: "nft_transfer",
                    args: JSON.stringify({
                        receiver_id: "benjiman.testnet
                        token_id: "keypom-cookbook-1"
                    }),
                    attachedDeposit: parseNearAmount("0.001"),
                },
            ],
        ]   
    }   
})

console.log(keys)
```

</TabItem>

</Tabs>

___

## Using and Verifying Injected Keypom Arguments
Keypom Args are important pieces of information injected automatically by Keypom when a key is claimed. The pieces of information can include: 

- Drop ID that the access key belongs to
- Funder's `accountId` of the drop
- The claiming account's `accountId`
- The current access key's `keyId`

The information is injected into the `args`, but their specific location depends on the field specified. In the example below, the `funderId` is being injected into an `originalOwner` field in the `args`, and the claiming account's `accountId` is being injected into the `metadata` object under the field `newOwner`. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Creating FC drop that injects accountId into function call arguments
let {keys, dropId} = await createDrop({
    account: fundingAccount,
    numKeys: 1,
    depositPerUseNEAR: "0.1",
    fcData: {
        methods: [
            [
                {
                    receiverId: MY_NFT_CONTRACT,
                    methodName: "mint",
                    args: JSON.stringify({
                        mint_id: MINT_ID,
                        metadata: {
                            description: "my new NFT"
                        }
                    }),
                    // Injecting claiming account ID into the metadata object as originalOwner
                    accountIdField: "metadata.newOwner",
                    funderIdField: "originalOwner",
                }
            ],
        ]   
    }   
})

console.log(keys)
```

</TabItem>

</Tabs>

### Verifying Injected Arguments
In addition to the injected arguments, Keypom will also automatically send an object called `keypom_args`. This object is meant for your use to validate that certain arguments were indeed injected by Keypom. This object cannot be spoofed, and any attempt to do so will cause the claim to fail. 

:::info
To validate the injected argument the receiving `mint` function should look like this. 

```rust
#[payable]
pub fn mint(&mut self, mint_id: String, originalOwner: String, metadata: data, keypomArgs: keypom_args) -> Promise {
        assert!(originalOwner == DROP_FUNDER_ID && keypomArgs.funderIdField == "originalOwner", "Call must come from valid Keypom drop");
        // Optionally can also validate that keypomArgs.accountIdField == "metadata.newOwner" if you want to ensure newOwner was not hardcoded. 
        ...
}
```
:::

___

## Attaching NFTs to your FC Drop
As part of your FC drop, you can send the user an NFT. The best way to do this would be to lazy-mint them, as to not waste funds minting NFTs belonging to keys that are ultimately not claimed. 

To do this, you must create an NFT series, and then include a `nft_mint` call as one of the key's function calls. The Keypom NFT contracts, `nft-v2.keypom.testnet` and `nft-v2.keypom.near`, have the functionality to create a series and then mint the NFT using just the `dropId`.  

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Create drop with 10 keys and 2 key uses each
let {keys, dropId} = await createDrop({
    account: fundingAccount,
    numKeys: 30,
    depositPerUseNEAR: "0.1",
    fcData: {
        methods: [
            [
                {
                    receiverId: `nft-v2.keypom.${NETWORK_ID}`,
                    methodName: "nft_mint",
                    args: "",
                    dropIdField: "mint_id",
                    accountIdField: "receiver_id",
                    attachedDeposit: parseNearAmount("0.1")
                }
            ],
        ]   
    }   
})

await createNFTSeries({
    account: fundingAccount,
    dropId,
    metadata: {
        title: "Moon NFT Ticket!",
        description: "A cool NFT POAP for the best dog in the world.",
        media: "bafybeibwhlfvlytmttpcofahkukuzh24ckcamklia3vimzd4vkgnydy7nq",
        copies: 30
    }
}); 
```

</TabItem>

</Tabs>

___

## Delete Drop
A drop can be deleted manually at any time using `deleteDrops`. This will refund all unclaimed key balances back to the drop funder's Keypom balance. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Get all the drops for a given user
let drops = await getDrops({accountId: "minqi.testnet"});

// Delete all the drops currently funded by `minqi.testnet`
await deleteDrops({
    account: fundingAccount,
    drops
})

// Delete 2 seperate drops given their IDs
await deleteDrops({
    account: fundingAccount,
    dropIds: ["123123123123123", "12391238012380123"]
})
```

</TabItem>

</Tabs>

___

'''
'''--- docs/Cookbook/drops/ft.md ---
---
sidebar_label: 'Fungible Token Drops'
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Fungible Token Drops
This part of the cookbook contains a quick overview on how to create an FT drop.
## Getting Started
For the cookbook, you will need the following installed. 
1. [Node JS](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  
2. [Keypom JS SDK](https://github.com/keypom/keypom-js#getting-started)

:::info note
These scripts will not run without the proper setup shown in the [introduction page](../welcome.md#connection-to-near-and-initializing-the-sdk).
:::

## Creating a Fungible Token Drop
The process of creating an FT drop starts by checking if the funder has sufficient fungible tokens to actually create the drop. The `amountToTransfer` represents the total amount of FT to transfer for the entire drop. If you want to transfer 1 FT for 50 keys, `amountToTransfer` will be 50 fungible tokens. Next, this amount is compared to the funder's FT balance. Once that check is complete, then the FT drop can be created by including the `ftData`	 argument in `createDrop`. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Note that drop funder must have enough FTs to fund drop.
// If amount is "3" and there are 4 keys, Funder FT balance must be more than 12
const { keys } = await createDrop({
    account: fundingAccount,
    numKeys: 1,
    depositPerUseNEAR: 1,
    ftData: {
    	contractId: FT_CONTRACT,
    	senderId: YOUR_ACCOUNT,
    	// This balance per use is balance of human readable FTs per use. 
    	amount: "1"
		// Alternatively, you could use absoluteAmount, which is dependant on the decimals value of the FT
		// ex. if decimals of an ft = 8, then 1 FT token would be absoluteAmount = 100000000
    },
});

console.log(keys)
```

</TabItem>

</Tabs>

___

## Delete Drop
A drop can be deleted manually at any time using `deleteDrops`. This will refund all unclaimed key balances back to the drop funder's Keypom balance. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Get all the drops for a given user
let drops = await getDrops({accountId: "minqi.testnet"});

// Delete all the drops currently funded by `minqi.testnet`
await deleteDrops({
    account: fundingAccount,
    drops
})

// Delete 2 seperate drops given their IDs
await deleteDrops({
    account: fundingAccount,
    dropIds: ["123123123123123", "12391238012380123"]
})
```

</TabItem>

</Tabs>

___

'''
'''--- docs/Cookbook/drops/nft.md ---
---
sidebar_label: 'Non-Fungible Token Drops'
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Non-Fungible Token Drops
This part of the cookbook contains a quick overview on how to create an NFT drop.
## Getting Started
For the cookbook, you will need the following installed. 
1. [Node JS](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  
2. [Keypom JS SDK](https://github.com/keypom/keypom-js#getting-started)

:::info note
These scripts will not run without the proper setup shown in the [introduction page](../welcome.md#connection-to-near-and-initializing-the-sdk).
:::

## Creating a Non-Fungible Token Drop
An NFT drop is created by first minting the NFTs to be sent, and then including the `token_ids` in the `nftData` argument. This examples shows a single NFT, with a one single-use key. For a larger distribution, consider using an [FC to lazy mint NFTs](fc.md#attaching-nfts-to-your-fc-drop).

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// The funding account `minqi.testnet` has the token `token_123` on the contract `nft.examples.testnet`
const NFT_CONTRACT = `nft.examples.testnet`;
const NFT_TOKEN_ID = `token_123`;
const SENDING_ACCOUNT = `minqi.testnet`;

const { keys } = await createDrop({
    account: fundingAccount,
    numKeys: 1,
    depositPerUseNEAR: "1",
    nftData: {
        // NFT Contract Id that the tokens will come from
        contractId: NFT_CONTRACT,
        // Who will be sending the NFTs to the Keypom contract
        senderId: SENDING_ACCOUNT,
        // List of tokenIDs
        tokenIds: [NFT_TOKEN_ID]
    }
});

console.log(keys)
```

</TabItem>

</Tabs>

___

## Delete Drop
A drop can be deleted manually at any time using `deleteDrops`. This will refund all unclaimed key balances back to the drop funder's Keypom balance. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Get all the drops for a given user
let drops = await getDrops({accountId: "minqi.testnet"});

// Delete all the drops currently funded by `minqi.testnet`
await deleteDrops({
    account: fundingAccount,
    drops
})

// Delete 2 seperate drops given their IDs
await deleteDrops({
    account: fundingAccount,
    dropIds: ["123123123123123", "12391238012380123"]
})
```

</TabItem>

</Tabs>

___

'''
'''--- docs/Cookbook/drops/trial.md ---
---
sidebar_label: 'Trial Account Drops'
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Trial Account Drops
This part of the cookbook contains a quick overview on how to create a trial account drop.
## Getting Started
For the cookbook, you will need the following installed. 
1. [Node JS](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  
2. [Keypom JS SDK](https://github.com/keypom/keypom-js#getting-started)

:::info note
These scripts will not run without the proper setup shown in the [introduction page](../welcome.md#connection-to-near-and-initializing-the-sdk).
:::

## Creating a Trial Account Drop
When creating a trial account drop, there are 3 main parameters to define. The first is `callableContracts`, indicating what contracts the trial account can call. This will prevent rugging from the funder's perspective. Next is `maxAttachableNearPerContract` which just outlines how much $NEAR can be attached to any function call on any of the aforementioned contracts. The order of this is the same as the order defined in `callableContracts`. Lastly is the `callableMethods` parameter, which defines what methods the trial account is allowed to call on the allowed contracts. A `*` indicated any contract is callable. 

When creating the drop, the trial account's balance is then defined by its starting balance and ending balance, known as the `startingBalanceNEAR` and `trialEndFloorNEAR` respectively. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// What contracts can the trial account call?
const callableContracts = [
    'guest-book.examples.keypom.testnet',
    'v1.social08.testnet'
]
// What is the maximum amount of $NEAR that can be attached to a call for each callable contract?
// 1 NEAR for guestbook, 2 NEAR for NEAR social
const maxAttachableNEARPerContract = [
    '1',
    '2'
]
// What methods can the trial account call?
// Any function can be called on either contracts. 
const callableMethods = [
	['*'],
    ['*']
]

const wasmDirectory = `${require('path').resolve(__dirname, '..')}/trial-accounts/ext-wasm/trial-accounts.wasm`
const {keys} = await createTrialAccountDrop({
	account: fundingAccount,
    numKeys: 1,
    contractBytes: [...readFileSync(wasmDirectory)],
	// How much $NEAR should be made available to the trial account when it's created?
    startingBalanceNEAR: 2.5,
    callableContracts,
    callableMethods,
    maxAttachableNEARPerContract,
	// Once the trial account has spent this much $NEAR, the trial will be over.
    trialEndFloorNEAR: 1.25
})

console.log(keys)
```

</TabItem>

</Tabs>

___

## Delete Drop
A drop can be deleted manually at any time using `deleteDrops`. This will refund all unclaimed key balances back to the drop funder's Keypom balance. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Get all the drops for a given user
let drops = await getDrops({accountId: "minqi.testnet"});

// Delete all the drops currently funded by `minqi.testnet`
await deleteDrops({
    account: fundingAccount,
    drops
})

// Delete 2 seperate drops given their IDs
await deleteDrops({
    account: fundingAccount,
    dropIds: ["123123123123123", "12391238012380123"]
})
```

</TabItem>

</Tabs>

___

'''
'''--- docs/Cookbook/keys.md ---
---
sidebar_label: 'Keys'
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Keys
This part of the cookbook contains everything related to keys in a drop, including adding keys to a drop, checking key usage and getting the number of active keys in a drop.
## Getting Started
For the cookbook, you will need the following installed. 
1. [Node JS](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  
2. [Keypom JS SDK](https://github.com/keypom/keypom-js#getting-started)

:::info note
Ensure that you have initialized Keypom using the `initKeypom` function prior to running any of the SDK examples. For more info on this, see the [introduction page](welcome.md#connection-to-near-and-initializing-the-sdk)
:::

## Adding Keys to a Drop
Additional keys may be added to a drop using the `addKeys` function. This is particularly helpful when you want to [create a large drop](drops/NEAR.md#creating-a-large-drop).

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Create an empty simple drop with no keys.
const {dropId} = await createDrop({
    account: fundingAccount,
    depositPerUseNEAR: 1,
});

// Add 10 completely random keys. The return value `keys` contains information about the generated keys
const {keys} = await addKeys({
    account: fundingAccount,
    dropId,
    numKeys: 10
})
```

</TabItem>

</Tabs>

:::caution
`addKeys` is limited to adding 50 password protected keys or 100 non-protected keys at a time. To add more keys, see the [example below](#adding-lots-of-keys). 
:::

___

## Adding Lots of Keys
Adding keys, either using `createDrop` or `addKeys` is limited to 50 password protected or 100 non-protected keys. To bypass this, the drop can be created first and then the keys can be added by looping `addKeys`.

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Creating drop with 0 single use keys
let {dropId} = await createDrop({
    account: fundingAccount,
    depositPerUseNEAR: "0.001",
});

// Loop to add 200 keys
let numKeys = 200
let keysAdded = 0;
let allSecretKeys = [];
while (keysAdded < numKeys) {
    const keysToAdd = Math.min(50, numKeys - keysAdded);
    const {secretKeys, publicKeys} = await generateKeys({
        numKeys: keysToAdd,
    });
    await addKeys({
        account: fundingAccount,
        dropId,
        publicKeys
    });
    keysAdded += keysToAdd;
    allSecretKeys = allSecretKeys.concat(secretKeys);
}
```

</TabItem>

</Tabs>

___

## Removing Keys from a Drop
Just as keys can be added to a drop retroactively, they can also be removed. The following shows that process. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Create drop with 5 keys
const {keys, dropId} = await createDrop({
    account: fundingAccount,
	numKeys: 5,
	depositPerUseNEAR: 1,
});

// Delete first key from drop
await deleteKeys({
    account: fundingAccount,
	dropId,
	publicKeys: keys.publicKeys[0] // Can be wrapped in an array as well
})
```

</TabItem>

</Tabs>

___

## Checking Key Usage
A good use case for checking key usage is when you want to track the progress/retention of the keys in your drop. An excellent example is the [ticketing tutorial](../Tutorials/Advanced/ticketing/architecture.md#keypom-solution) where each key use represented a different phase of the ticketing experience. To do this, you can get and parse the [`keyInfo`](../keypom-sdk/Core/interfaces/KeyInfo.md) object by calling `getKeysForDrop`. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Query for the key supply for the drop that was created
const keyInfos = await getKeysForDrop({
    dropId
})

// Check key usage of first key
const keyUsage = keyInfos[0].remaining_uses

console.log(keyUsage)
```

</TabItem>

</Tabs>

___

## Checking Key Balance 
Similar to how checking a key usage is done, you can parse the [`keyInfo`](../keypom-sdk/Core/interfaces/KeyInfo.md) object to see a key's remaining allowance. 

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Query for the key supply for the drop that was created
const keyInfos = await getKeysForDrop({
    dropId
})

// Check key usage of first key
const keyBalance = keyInfos[0].allowance

console.log(keyBalance)
```

</TabItem>

</Tabs>

___

## Check Number of Keys Remaining in a Drop
When a key is fully depleted, it is deleted from the drop. To check the number of remaining keys, and thus the amount of keys to still be claimed, you can use `getKeySupplyForDrop`.

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
// Query for the key supply for a drop
const keySupply = await getKeySupplyForDrop({
    dropId
})

console.log(keySupply)
```

</TabItem>

</Tabs>

___

'''
'''--- docs/Cookbook/utilities.md ---
---
sidebar_label: 'Utilities'
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Utilities
This part of the cookbook contains utilities and miscellaneous common Keypom use cases. This includes creating NFT series, using the DAO bot and more.  
## Getting Started
For the cookbook, you will need the following installed. 
1. [Node JS](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  
2. [Keypom JS SDK](https://github.com/keypom/keypom-js#getting-started)

:::info note
Ensure that you have initialized Keypom using the `initKeypom` function prior to running any of the SDK examples. For more info on this, see the [introduction page](welcome.md#connection-to-near-and-initializing-the-sdk)
:::

### Create NFT Series

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
const {keys} = await createDrop({
    account: fundingAccount,
    numKeys: 2,
	config:{
		usesPerKey: 1
	},
    depositPerUseNEAR: "0.1",
});
```

</TabItem>

</Tabs>

___

### Utilize DAO Bot

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
const {keys} = await createDrop({
    account: fundingAccount,
    numKeys: 2,
	config:{
		usesPerKey: 1
	},
    depositPerUseNEAR: "0.1",
});
```

</TabItem>

</Tabs>

___

### Create Recurring Payments

<Tabs>
<TabItem value="SDK" label="🔑 Keypom SDK">

```js
const {keys} = await createDrop({
    account: fundingAccount,
    numKeys: 2,
	config:{
		usesPerKey: 1
	},
    depositPerUseNEAR: "0.1",
});
```

</TabItem>

</Tabs>

___

'''
'''--- docs/Cookbook/welcome.md ---
---
sidebar_label: 'Introduction'
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Introduction
Welcome to the Keypom cookbook! Here you can explore Keypom's building blocks that help create awesome onboarding experiences. The idea of these pages is for them to act as a quick reference for common use cases when using the Keypom protocol. Every use case will have a corresponding code snippet using the Keypom JS SDK. 
## Getting Started
For the cookbook, you will need the following installed. 
1. [Node JS](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  
2. [Keypom JS SDK](https://github.com/keypom/keypom-js#getting-started)

## Connection to NEAR and Initializing the SDK
When working with the SDK, you will always need to connect to NEAR and initiate Keypom using the `initKeypom` function. This will always be the first function you call to interact with the SDK. 

`initKeypom` initializes the SDK to allow for interactions with the Keypom smart contracts. Without it, none of the other SDK functions would work as expected. [More info](../keypom-sdk/Core/modules.md#initkeypom) on the `initKeypom` function.

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/simple-drop/simple-example.js#L10-L35
```

'''
'''--- docs/TrialAccounts/Creation/drop-creation.md ---
---
sidebar_label: 'Create Your First Drop'
---

# Introduction

Up until this point, you should have installed the Keypom SDK and its dependencies and should have a basic understanding of how trial accounts work and what is needed to create one. In this tutorial, you'll go through the process of creating the trial account drop that will be used to onboard users into the guest-book app.

## Creating the Script

Starting at the `keypom-docs-example` directory, navigate to the `advanced-tutorials/trial-accounts` folder and open the `create-trial-drop.js` file. 

```bash
cd advanced-tutorials/trial-accounts
```

There, you will see the code that is used to create the trial account drop. 

---

## Connecting to NEAR
The first step to creating the drop is connecting to the NEAR network. 

This is done with `NEAR-API-JS` and consists of:

* Selecting which network to connect to (testnet or mainnet).

* Specifying the location where the keys are stored for the drop funder's account. This location is commonly in the `~/.near-credentials` folder on your local machine.

```js reference
https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/trial-accounts/create-trial-drop.js#L11-L29
```

---

## Initializing the SDK

The process for creating a drop always starts with calling the `initKeypom` function.

`initKeypom` initializes the SDK to allow for interactions with the Keypom smart contracts. Without it, none of the other SDK functions would work as expected.

```js
// Change this to your account ID
const FUNDER_ACCOUNT_ID = "minqi.testnet";
const NETWORK_ID = "testnet"
async function createTrialAccount() {
  // Initiate connection to the NEAR blockchain.
  const CREDENTIALS_DIR = ".near-credentials";
  const credentialsPath =  path.join(homedir, CREDENTIALS_DIR);
  ...
  ...
  let near = await connect(nearConfig);

  // Initialize the SDK and point it to the custom NEAR object that was created.
  await initKeypom({
		near,
		network: NETWORK_ID
	});
}
```

## Creating the Trial Drop

Now that both the SDK and NEAR connections have been established, it's time to create the drop itself. This is done using the `createTrialAccountDrop` function. You'll start by defining the restrictions that the trial account will have. You'll want the trial account to only call methods on the guest book contract and attach up to 1 $NEAR per method. In this case, the guest book contract is deployed to the `guest-book.examples.keypom.testnet` account.

```js reference
https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/trial-accounts/create-trial-drop.js#L37-L51
```

:::note
Note that a `*` was passed in for the callable methods. This means that the trial account can call any method as long as it's on the guest book contract.
:::

Once this is finished, you can create the drop itself. The account will start with `2.5 $NEAR` and will reach the floor once `1.25 $NEAR` has been spent on attached deposits and burnt gas. 

```js reference
https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/trial-accounts/create-trial-drop.js#L53-L67
```

In the above example, you only created 1 drop but you can create as many as you want for your users. It's super simple and the Keypom SDK has abstracted all the complexities away from you. In the next tutorial, you'll run the script and instantly sign into the guest-book app.

'''
'''--- docs/TrialAccounts/Creation/getting-started.md ---
---
sidebar_label: 'Before You Begin'
---
# Introduction
In the following tutorials, you'll learn how Trial Accounts work behind the scenes and how to create a basic drop that can be used to instantly sign a user into the guest-book app. You'll also learn about the underlying flow for the official Keypom wallet selector plugin and how it's used to create instant sign-in experiences for users.

---

## Prerequisites

In order to successfully complete the tutorials, you'll need to have the following:

1. [Node JS](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  
2. [Keypom JS SDK](https://github.com/keypom/keypom-js#getting-started)

---

## Project Structure

In this section, you'll prepare the project structure that will be used in the following tutorials. The core of the project is found in the [Keypom Docs Examples](https://github.com/keypom/keypom-docs-examples) repository.

First, you'll want to clone the repo:

```bash
git clone https://github.com/keypom/keypom-docs-examples.git && cd keypom-docs-examples
```

Second, install the dependencies for the SDK:

```
yarn install
```

At this point, all the dependencies should be installed and you're ready to move on to the next step which is creating the trial drop.

'''
'''--- docs/TrialAccounts/Creation/integration.md ---
---
sidebar_label: 'Integrating Into Your Apps'
---

# Introduction

In the previous tutorial, you looked at the script necessary to create the trial account drop and how simple it was. In this tutorial, you'll start a local version of the guest-book app and see how easy it is to integrate and support trial accounts.

:::warning
The UI for trial accounts while in the guest-book app in this tutorial are NOT finalized. Benji sucks at UI design and we're getting a designer to help us out. This is just a placeholder for now and is meant to be a proof of concept.
:::

## Starting the Guest Book

Starting at the `keypom-docs-examples` directory, navigate to the `advanced-tutorials/trial-accounts/guest-book` folder and install the dependencies.

```bash
cd advanced-tutorials/trial-accounts/guest-book && yarn install
```

Once the dependencies have been installed, you can start the app.

```bash
yarn start
```

This should open the guest-book app in your browser and you should see the following:

<p align="center">
  <img src={require("/static/img/docs/trial-accounts/guest-book-homepage.png").default} width="80%" height="15%" alt="ticketing"/>
</p>

:::note
If you're signed in already, it's because you've used the same port for another application that was left signed in. Simply sign out or open the link in a new incognito window.
:::

---

## Creating the Trial Account

Now that the guest-book is running, it's time to run the trial creation script. Open a new terminal and navigate to the `keypom-docs-examples` directory. Navigate to the `advanced-tutorials/trial-accounts` folder and open the `create-trial-drop.js` file.

```bash
cd advanced-tutorials/trial-accounts
```

From here, make sure you change the account ID that is being used to sign transactions to an account that you're currently signed in with:

```js reference
https://github.com/keypom/keypom-docs-examples/blob/f1f634a629808f0d0943e508c2be6576622d32b1/advanced-tutorials/trial-accounts/create-trial-drop.js#L11
```

In addition, change the `guestBookInstance` to whichever URL your app is running on:

```js reference
https://github.com/keypom/keypom-docs-examples/blob/f1f634a629808f0d0943e508c2be6576622d32b1/advanced-tutorials/trial-accounts/create-trial-drop.js#L70
```

Once this is finished, you can run the following command to create the trial account drop.

```bash
node create-trial-drop
```

This should output the following:

```bash
Receipts: GCQ5qw2DYfnH4otYww94sJeVT2hEaEXj58Ky3J8FKdCS, FRCyeeVGgGq1YRRkxFRApjGpDdWyxZn4LQJTDoc22SV1
Log [v2.keypom.testnet]: Warning: Balance is less than absolute minimum for creating an account: 2840000000000000000000
Log [v2.keypom.testnet]: Current Block Timestamp: 1680902177371759044
Log [v2.keypom.testnet]: 31 calls with 155000000000000 attached GAS. Pow outcome: 2.5000782. Required Allowance: 39626233977241600000000
Log [v2.keypom.testnet]: Total required storage Yocto 837110000000000000000000
Log [v2.keypom.testnet]: Current balance: 8.0866179,
          Required Deposit: 3.6777362,
          total_required_storage: 0.83711,
          Drop Fee: 0,
          Key Fee: 0 Total Key Fee: 0,
          allowance: 0.0396262 total allowance: 0.0396262,
          access key storage: 0.001 total access key storage: 0.001,
          deposits less none FCs: 0 total deposits: 0 lazy registration: false,
          deposits for FCs: 2.8 total deposits for FCs: 2.8,
          uses per key: 1
          None FCs: 0,
          length: 1
          GAS to attach: 150000000000000
Log [v2.keypom.testnet]: New user balance 4.4088817
Log [v2.keypom.testnet]: Fees collected 0

  Guest-Book App:
http://localhost:1234/trial-url#v2.keypom.testnet/3HbgYBvVMSfTBpXQ4fSecbPzwup2YkJPipNmT7e2iyw5MfzfMN3rHccsPddWcTGFTehCux7AbmtJiRqd78x4F57g

Good Luck!
```

## Using the Guest Book

Now that the drop is created, it's time to create a brand new account! Open the URL and you should see the following screen:

<p align="center">
  <img src={require("/static/img/docs/trial-accounts/claim-trial-guestbook.png").default} width="80%" height="15%" alt="ticketing"/>
</p>

Enter a valid username and click Create. This will start the claiming process.

<p align="center">
  <img src={require("/static/img/docs/trial-accounts/claiming-trial-guestbook.png").default} width="80%" height="15%" alt="ticketing"/>
</p>

The claiming process should take a few seconds and then you should see the following screen:

<p align="center">
  <img src={require("/static/img/docs/trial-accounts/trial-claimed-guestbook.png").default} width="80%" height="15%" alt="ticketing"/>
</p>

Once you click the button, you should be instantly signed into the guest-book app.

### Signing Your First Transaction

Now that you're signed in, you can instantly begin using the guest-book app. Try signing a message with `0.01 $NEAR` and see what happens!

<p align="center">
  <img src={require("/static/img/docs/trial-accounts/trial-sign-guestbook.png").default} width="80%" height="15%" alt="ticketing"/>
</p>

After a few seconds, the transaction should go through and your message should show up at the bottom of the messages list! Notice how there was no redirects to the NEAR wallet for approval and no sign in.

### Invalid Actions

Recall that the trial account cannot attach more than 1 $NEAR to a given transaction. Try signing a message with `1.1 $NEAR` and you should be greeted with the following modal:

<p align="center">
  <img src={require("/static/img/docs/trial-accounts/trial-invalid-action-guestbook.png").default} width="80%" height="15%" alt="ticketing"/>
</p>

If you then sign the message with `1 $NEAR` or less, it should go through properly.

### Trial Over

After you've spent `1.25 $NEAR` on the app and you try to sign another message, you should see the following trial over modal:

<p align="center">
  <img src={require("/static/img/docs/trial-accounts/trial-over-guestbook.png").default} width="80%" height="15%" alt="ticketing"/>
</p>

In this case, since FastAuth isn't complete, clicking the button will send you somewhere special.

### Losing Access to Local Storage

If the account were to lose access of the local storage or their computer blew up, all they would need is the original trial account link to gain access to their account again. To test this behavior, close the app and open a brand new incognito window. Paste the original link and you should immediately be signed back into the app.

## Behind the Scenes

In order for the guest-book app to be fully compatible with trial accounts, it only needs to add the SDK's wallet selector plugin.

```js reference
https://github.com/keypom/keypom-docs-examples/blob/28444a492c513b8244e25ccaf067ca54f305b090/advanced-tutorials/trial-accounts/guest-book/near-wallet.js#L45-L55
```

You'll notice that there are a couple of parameters that are passed into the `setupKeypom` function. You need to specify:

- `trialAccountSpecs.url` and `instantSignInSpecs.url`: The URL format that must be met in order to trigger the sign-in flow.
  - You may notice the `ACCOUNT_ID` and `SECRET_KEY` markers in the URLs. These define where the account ID and secret key will go for the links you plan to distribute. For more information, see the [TypeDocs](../../keypom-sdk/Selector/welcome.md#trial-account-specs).
- `signInContractId`: The contract ID that regular users create access keys for when signing in.
- [`trialAccountSpecs.modalOptions`](../../keypom-sdk/Selector/welcome.md#modal-options): Information that you can specify that will customize the modals that are shown to the user while on your app. Here, `KEYPOM_OPTIONS` from `./keypom-data` are imported and used. 

### Customizing the Modals

By default, the modals that are shown to the user can be heavily customized to match the look and feel of your website. If you brand the regular wallet selector modal, the CSS will **automatically be applied** to the trial account modals.

In addition, you can specify a suite of titles and descriptions. These will be covered further in a different tutorial.

## Conclusion

In this tutorial, you learned how to create a link that will allow users to experience your app through a trial account. You then created a new testnet account, instantly signed into the guest-book app and went through different scenarios that a user might encounter while using your app.
'''
'''--- docs/TrialAccounts/Creation/understanding-trial-accounts.md ---
---
sidebar_label: 'Understanding Trial Accounts'
---

# Basis of Trial Accounts

A Trial Account is simply an account on NEAR that has a set of pre-defined restrictions that limit the methods that it can call. This is achieved by deploying a very small no-std Rust smart contract on it (~25 kb or 0.25 $NEAR) that acts as a proxy, or middleman, for any outbound calls it makes.

The contract deployed to the account exposes a method `execute` that takes a set of actions as arguments, checks whether the actions are allowed, and then executes them. To achieve this middleman behavior, the Trial Account cannot have any full access keys (otherwise it could bypass the `execute` method, and in turn, the restrictions). The account should *only* have one limited access key that can call the `execute` method on its own contract.

Whenever a Trial Account wants to call a method on an external contract, say `nft_mint` on the `nft.examples.testnet` account, it needs to call `execute` and pass in the desired function call as arguments. The contract will then check whether those actions are allowed and if they are, it will execute the desired behavior.

To help illustrate this behavior, the follow diagram shows the above scenario.

<p align="center">
  <img src={require("/static/img/docs/trial-accounts/trial-account-execute-flow.png").default} width="40%" height="15%" alt="ticketing"/>
</p>

## Keypom Drops

From the above, a Trial Account can be created by deployed a valid contract to an account that only has a limited access key on it with the correct permissions. This can all be achieved with a [Function Call drop](../../Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/fc-drops.md).

In order to create accounts ending with `.near` or `.testnet`, you'll need the `near` and `testnet` accounts to create sub-accounts. This is done by calling the `create_account` function on their contracts (the code is found [here](https://github.com/near/near-linkdrop/blob/49279e529c254fa7736465b4a39d05cb8f1e5443/src/lib.rs#L130)). This is exactly how regular linkdrops work, including [Keypom](https://github.com/keypom/keypom/blob/7a654aa847f2ce9dedf65755c6a08817eece4666/contract/src/stage3/claim.rs#L129).

By calling `create_account`, a new sub-account is created with a full access key. This is close to the behavior we want for Trial Accounts but not exactly. In order to create a new account that has a limited access key and a contract deployed, you can call the `create_account_advanced` function instead of `create_account`, code found [here](https://github.com/near/near-linkdrop/blob/49279e529c254fa7736465b4a39d05cb8f1e5443/src/lib.rs#L156). This function can accept `wasm` for a contract, and limited access key arguments.

A Keypom function call drop can then be programmed to:
- Call the `create_account_advanced` function.
- Pass in user provided args for the new account ID.
- Pass in the `wasm` for the contract to be deployed.
- Pass in the limited access key arguments to create a key that can call `execute` on the newly created account.
- Once the account is created, Keypom will automatically call a setup method on the new account that will set the restrictions.

Keypom has abstracted away all these complexities using a simple ready-made function [createTrialAccountDrop](../../keypom-sdk/Core/modules.md#createtrialaccountdrop).

## Understanding Trial Restrictions

There are 3 different restrictions that can be applied to a Trial Account:
- Callable contracts
- Callable methods
- Attached Deposits

### Callable Contracts

As a trial funder, you have complete control over exactly which contracts a trial account can call. This can be any number of contracts and should be passed in using an array. For example, if you wanted the trial to only call methods on the `v2.keypom.testnet` and `nft.examples.testnet` contracts, you would pass in the following:

```js
const callableContracts = [
  "v2.keypom.testnet",
  "nft.examples.testnet"
]
```

### Callable Methods

Not only do you have full control over the contracts that a trial account can call, but you can also specify individual methods on a per-contract basis. In the above example, if you wanted the account to be able to call any method on the `v2.keypom.testnet` contract, but only the `nft_mint` and `nft_transfer` methods on the `nft.examples.testnet` contract, you would pass in the following:

```js
const callableMethods = [
  ["*"],
  ["nft_mint", "nft_transfer"]
]
```

:::note
The `*` symbol is used to represent no restrictions on methods for a given contract.
:::

### Max Attachable Deposit

The last restriction that you can set on a given trial account is the maximum amount of $NEAR that can be attached to function calls for a given contract. In the above scenario, say you wanted to limit an account to the following restrictions:
- Attaching up to 5 $NEAR to any method on the `v2.keypom.testnet` contract.
- Only attaching 1 yoctoNEAR to methods on the `nft.examples.testnet` contract.

You would pass in the following:

```js
const maxAttachableDeposit = [
  "5000000000000000000000000",
  "1"
]
```

## Exit Conditions

The final thing to understand about trial accounts is how they can be exited. While the account is in the trial state, it has restrictions and isn't usable in the wider ecosystem. As a funder, you can specify conditions that need to be met in order for the account to exit the trial state.

### Trial Over Floor

The main condition that dictates how long an account will be in the trial state before it must exit is the trial floor. This is an amount of $NEAR that must be spent before the account is eligible to exit. The amount consists of both gas burnt as well as deposits to successful function calls.

For example, if an account attached 1 $NEAR to a function call and also burnt 75 TGas, it would be `1.0075 $NEAR` closer to the floor. Overtime, as an account executes more and more transactions, it will come closer to the floor. Once the floor has been reached, the account will be eligible to exit.

:::note
It's important to note that once the floor has been met, the account can continue to execute transactions. Reaching the floor simply means that the account *can* exit the trial state (assuming all other conditions have been met).
:::

### Repay Conditions

If the funder chooses to, they can also specify a repay condition. This is an amount of $NEAR that must be paid back to them in order for the account to exit the trial state. 

This process happens automatically when the exit method is called but it will throw an error if the  account doesn't possess enough funds to repay the funder. This amount can be 0 $NEAR meaning that once the account reaches the floor, it can immediately exit without needing to repay.

The $NEAR needed to repay the funder can be gained in one of three ways:
1. Gained during the trial (e.g selling an NFT you minted, winning an on-chain lottery etc.).
3. Sent by another account.
2. Sent with an on-ramp (similar to how accounts are funded currently).

While there is still friction in the last case, the user has **experienced your application first** and the onboarding is pushed until after their trial is over. Currently, people need to go through the complicated onboarding process first and only experience the app afterwards.

As an example, let's say you're building a roulette app and you want to give users a trial account to experience what you're building in the hope that they will continue to use it afterwards. You give someone 10 $NEAR and set a repay condition of 5 $NEAR. During their trial, they could have won 20 $NEAR from the roulette app by putting all their money on red.

This would satisfy the repay condition and they would be able to keep the rest of the $NEAR that they won.

### What Happens On Exit?

When regular accounts are created on NEAR, they start with a full access key and don't have any smart contract deployed to them. This behavior should be the same for trial accounts except they keep any assets they had during the trial state. When the account exits, the following will happen:

- The limited access key is removed from the account.
- The trial contract is removed from the account.
- Any state that was set on the trial contract is removed.
- The full access key is added to the account.
- Any repay conditions are paid out.
- Any $NEAR that was *not* gained during the trial is returned to the funder. This includes the bytes freed from deleting the contract and is meant to be a way to resist Sybil attacks.

This means that the account will act as a fresh NEAR account with a set of starting assets such as NFTs or FTs that it gained during the trial. If the account wanted to, it could deploy a contract such as multi-sig, nETH etc.

When a trial account exits, it will be given a full access key and the restrictions will be removed. This means that the account will be able to call any method on any contract and attach any amount of $NEAR to function calls.

## Conclusion

In this tutorial, you learnt the basics of how trial accounts operate and what is needed to create them. You also learnt about the different restrictions that can be applied to trial accounts, how they can be exited and what happens when they exit.

In the next tutorial, you'll learn how to create a simple trial account drop that will be used to instantly sign a user into the guest-book application.
'''
'''--- docs/TrialAccounts/introduction.md ---
---
sidebar_label: 'Getting Started'
---
# Keypom Trial Accounts

Keypom Trial Accounts are an exciting new opportunity for Web3 apps to seamlessly onboard users whether they’re completely new to crypto or seasoned veterans. With the click of a link, users require no software, wallet setup, wallet connection, and are **instantly signed into apps** with their trial account, ready to make on-chain transactions.

<p align="center">
  <img src={require("/static/img/docs/trial-accounts/trial-landing-page.png").default} width="100%" height="15%" alt="ticketing"/>
</p>

:::info
Check out this slick [demo of Keypom Trial Accounts (4min)](https://www.youtube.com/watch?v=rQf_wlA5eEw).
:::

## Benefits

The key benefit of using trial accounts is that the app developers, also referred to as the funders of the trial accounts, have granular control over the smart contracts, methods and amounts of NEAR tokens used during the trial. These rules are specified when the trial account is created and ensure that the funder **cannot be rugged by the user**.

Traditionally on NEAR, [linkdrops](../Concepts/LinkdropsAndAccessKeys/linkdrop-basics.md) have been used to create accounts containing $NEAR. Since this $NEAR is unlocked, users could simply take it and spend it *anywhere in the ecosystem*, exactly like giving someone cash. This defeated the purpose for app developers to provide users with a small amount of $NEAR to trial their applications.

With trial accounts, $NEAR is placed inside a smart contract deployed to the user's account along with rules specified by the app developer when the account is created. This means that giving away a trial account is not like giving cash, but instead **a gift card**.

Trial Accounts support all types of NEAR FunctionCall actions, including those with attached deposits e.g. 1 yocto for FT and NFT transfers, making them the ideal choice as a first touch point for new users to NEAR applications.

Our vision is for trial accounts to be the point of entry for onboarding onto any NEAR application. Once the trial is over, the user can exit to a full and unrestricted NEAR Account, retaining any assets they received during the trial period. The exit process happens through any external onboarding mechanism that supports the linkdrop standard such as FastAuth, MyNEARWallet etc.

## Getting Started

To learn how to create trial accounts and integrate them into your app, there are a few basic tutorials to get you started.

:::note
Trial Accounts are still in early stage development and are not meant to be used for production. The Keypom team is working on finalizing the contract and getting it audited as soon as possible.
:::

<div class="container">
  <div class="row">
    <div class="col">
      <a href="Creation/understanding-trial-accounts">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">Trial Accounts</h3>
            <p class="neutraltext">In-depth guide on Trial Accounts</p>
          </div>
        </div>
      </a>
    </div>
    <div class="col">
      <a href="Creation/drop-creation">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">Integrate In Your Apps</h3>
              <p class="neutraltext">Learn how to be fully compatible with Trial Accounts!</p>
          </div>
        </div>
      </a>
    </div>
  </div>
</div>
<br></br>
'''
'''--- docs/TrialAccounts/offboarding.md ---
---
sidebar_label: 'Offboarding Trial Accounts'
---
# Introduction

In this tutorial, you'll learn how to support trial accounts exiting into your wallet.

Trial Accounts are a great way to onboard new users to applications with the click of a link. The in-app experience is seamless but at some point, the trial must end. This process should remove all restrictions from the user's account and allow them to interact with the any app on NEAR. This process is known as offboarding and is a critical part of the user's journey.

As part of the offboarding process, a full access key will be added to the account and this should be stored somewhere safe. For this reason, we wanted to make sure trial accounts could be exited into any wallet or app that supports the official linkdrop standard (e.g MyNEARWallet / FastAuth).

The desired user experience is as follows:
1. Click a link or scan a QR code.
2. Enter a username.
3. Immediately get signed into the app and start using it.
4. Once your trial is over, a modal pops up with options for onboarding.
5. Click the desired option (such as MyNEARWallet) and get redirected.
6. Offboard with the app and get a new private key based on the option you chose (seedphrase, biometrics etc.)
7. The trial account has now been converted into a full, unrestricted NEAR account that can interact with the rest of the ecosystem.

<p align="center">
  <img src={require("/static/img/docs/trial-accounts/trial-over-guestbook.png").default} width="60%" height="15%" alt="ticketing"/>
</p>

## Utilizing Linkdrops

Most wallets support linkdrop claiming since it leads to more opportunities for them to gain new users. This can be used to our advantage if the trial account offboarding process is treated as a regular linkdrop, then the account can be offboarded into almost every wallet. Before learning how this is accomplished, you should first understand the basics of claiming linkdrops.

### Claiming

As per the official linkdrop standard, there are 3 methods that are important for claiming linkdrops:

```ts
/// Returns the KeyInfo associated with a given public key
/// Panics if the key does not exist
function get_key_information(key: string) -> KeyInfo

/// Transfer assets linked to a given public key to an `account_id`.
///
/// Arguments:
/// * `account_id` the account that should receive the linkdrop assets.
///
/// Returns `true` if the claim was successful meaning all assets were sent to 
/// the `account_id`.
function claim(account_id: string) -> Promise<boolean>

/// Creates a new NEAR account and transfers all assets linked to a given public 
/// key to the *newly created account*.
/// 
/// Arguments:
/// * `new_account_id`: the valid NEAR account which is being created and should 
///   receive the linkdrop assets
/// * `new_public_key`: the valid public key that should be used for the access 
//    key added to the newly created account.     
///
/// Returns `true` if the claim was successful meaning the `new_account_id` was 
/// created and all assets were sent to it.
function create_account_and_claim(new_account_id: string, new_public_key: string) -> Promise<boolean>
```

For an arbitrary linkdrop (a URL containing the contract and secret key), the flow is as follows:
1. The user clicks a link or scans a QR code representing the linkdrop.
2. The app calls `get_key_information` to check what's in the linkdrop.
    - If the linkdrop was already claimed (or doesn't exist), the call will panic and the frontend should indicate that the drop is invalid.
3. Depending on what is returned from the call, the app should display what assets the user is about to claim (e.g NFTs, FTs, $NEAR etc.)
4. The frontend exposes a form field and the user either inputs a new account or an existing one.
5. If a new account is created, the frontend will call `create_account_and_claim` and pass in the new account ID and an access key that will have full access permission over the account.
    - This key is generated based on what the app allows. For example, MyNEARWallet generates the key using a seedphrase while FastAuth generates it using biometrics.
6. The linkdrop is claimed and the assets are sent to the user's account.

### Trial Account Linkdrops

Now that the basics of linkdrop claiming have been covered, you'll look at how trial accounts can be treated as a linkdrop. From above, there are a few requirements that need to be met:
- The URL should contain a contract and secret key
- The trial contract should implement the `get_key_information` method so that frontends know when a drop is valid.
- The trial contract should implement the `create_account_and_claim` method for claiming.

Recall that for claiming assets to a new account, linkdrop contracts will create the account and add the public key as a full access key to the account. This access key is generated on a per-app basis. For example, MyNEARWallet generates the key using a seedphrase while FastAuth generates it using biometrics. 

In the case of the trial account contract, the exact same flow can happen except the account creation is *already done*. When calling `create_account_and_claim`, the contract should accept the new public key and do the following (assuming the account can exit):
1. Delete the existing limited access key used during the trial.
2. Create a new access key with the `new_public_key` and give it full access to the account.
3. Repay the funder for any required $NEAR.
4. Delete any state that is being used by the contract.
5. Delete the trial contract and free up all the storage.

Notice that the only parameter that was *actually* used was `new_public_key` but in the official linkdrop standard, the `create_account_and_claim` function takes two parameters:

```ts
function create_account_and_claim(new_account_id: string, new_public_key: string)
```

The `new_account_id` field is disregarded by the trial account contract since the account already exists. You can pass in any value for this field and it will be ignored.

For example, the following code could be used to completely offboard a trial account using `near-api-js`. The pseudo code is:
1. Initialize the NEAR connection.
2. Set the trial account key in the keystore.
3. Get the key information and check if the account can exit the trial.
4. Generate a random keypair that will be used as the account's new full access key.
5. Call `create_account_and_claim` with the new public key and the required gas coming from the call to get key information.

```ts
const NETWORK_ID = 'testnet';
// Generate a new keystore and connect to the NEAR network
let keyStore = new keyStores.InMemoryKeyStore();  

let nearConfig = {
    networkId: NETWORK_ID,
    keyStore: keyStore,
    nodeUrl: `https://rpc.${NETWORK_ID}.near.org`,
    walletUrl: `https://wallet.${NETWORK_ID}.near.org`,
    helperUrl: `https://helper.${NETWORK_ID}.near.org`,
    explorerUrl: `https://explorer.${NETWORK_ID}.near.org`,
};  

let near = await connect(nearConfig);

// Account ID of the trial account
const trialAccountId = "benji-demo-12345.testnet";

// Trial Account Secret Key
const trialAccountSecretKey = "5XorwuVXhTpscqddyyrRB9QVZDTn3mut9Zeu7drtdxexurhgf2V4WHJ8RyLoJppmHagMg6gcdAQrG8gJf9JA2XB"
const keyPair = KeyPair.fromString(trialAccountSecretKey);
await keyStore.setKey(NETWORK_ID, trialAccountId, keyPair);

// Create the account object for the trial
const trialAccountObj = new Account(near.connection, trialAccountId);

// Check if the trial account is able to exit
const keyInfo = await trialAccountObj.viewFunction(trialAccountId, 'get_key_information', {key: keyPair.getPublicKey().toString()});
if (keyInfo.trial_data?.exit == true) {
    // This will be the full access key for the new account
    const newKeyPair = KeyPair.fromRandom('ed25519');
    
    // How much gas should be attached to the create account call
    const requiredGas = keyInfo.required_gas;

    // If the account can exit, generate a new random access key which will be used for the full access key
    await trialAccountObj.functionCall({
        contractId: trialAccountId, 
        methodName: 'create_account_and_claim', 
        args: {
            new_account_id: "",
            new_public_key: newKeyPair.getPublicKey().toString()
        }, 
        attachedDeposit: 0, 
        gas: requiredGas
    });
}
```

### Rendering Linkdrops

Wallets and apps that support the claiming of linkdrops should render their claim pages differently depending on what assets are contained in the linkdrop. For example, if the linkdrop contains $NEAR, the page could look like this:

<p align="center">
  <img src={require("/static/img/docs/trial-accounts/keypom-claim-near.png").default} width="60%" height="15%" alt="ticketing"/>
</p>

If the linkdrop contains NFTs, the page could look like this:

<p align="center">
  <img src={require("/static/img/docs/trial-accounts/keypom-claim-nft.png").default} width="30%" height="15%" alt="ticketing"/>
</p>

This is done using the `get_key_information` method and rendering the page depending on the result. In the official linkdrop standard, the return value is an object `KeyInfo` that looks as follows:

```ts
/// Information about a specific public key.
type KeyInfo = {
   /// How much Gas should be attached when the key is used to call `claim` or `create_account_and_claim`.
   /// It is up to the smart contract developer to calculate the required gas (which can be done either automatically on the contract or on the client-side).
   required_gas: string,

   /// yoctoNEAR$ amount that will be sent to the account that claims the linkdrop (either new or existing)
   /// when the key is successfully used.
   yoctoNEAR: string,

   /// If using the NFT standard extension, a set of NFTData can be linked to the public key      
   /// indicating that all those assets will be sent to the account that claims the linkdrop (either new or   
   /// existing) when the key is successfully used.
   nft_data: NFTData[] | null,
  
   /// If using the FT standard extension, a set of FTData can be linked to the public key      
   /// indicating that all those assets will be sent to the account that claims the linkdrop (either new or   
   /// existing) when the key is successfully used.
   ft_data: FTData[] | null

   /// ... other types can be introduced and the standard is easily extendable.
}
```

The frontend can check what's contained and render the page accordingly.

## Supporting Trial Account Offboarding

This idea of conditional rendering is the key to supporting trial account offboarding. In general, when a frontend renders the page for users that will call `create_account_and_claim`, the flow is as follows:
1. Show the user what assets they've received
2. Prompt the user for a new username
3. Give the user their private key (biometrics, seedphrase, etc.)
4. Call `create_account_and_claim` with the new username and the generated public key

While this approach *could* work with trial accounts, it is not ideal as there's no need to ask for a username since the account already exists.

### Rendering Trial Account Linkdrops

A better flow for offboarding trial accounts would be to skip the new username prompt mentioned above. This means that the user's journey would look like this:

1. Show the user a screen indicating that they're about to exit the trial account
3. Give the user their private key (biometrics, seedphrase, etc.)
4. Call `create_account_and_claim` with an empty username and the generated public key

In order to support this flow, the frontend should check if the linkdrop contains a trial account. This can be done by checking the information returned from `get_key_information`. The trial accounts will return the following object:

```ts
/// Information about a specific public key.
type KeyInfo = {
  /// How much Gas should be attached when calling `create_account_and_claim` in order to exit the account
  required_gas: string,

  /// This will always be zero for trial accounts since the linkdrop doesn't contain $NEAR and instead contains the actual account
  yoctoNEAR: '0',

  /// Specific data that is used to determine whether or not a linkdrop is a trial account
  trial_data: {
    /// If the trial account can exit, this will be true.
    exit: boolean
  }
}
```

If the `trial_data` field is present, the frontend can assume that the linkdrop is a trial account and render the page accordingly.

### In Summary

Frontends that support the official linkdrop standard should be able to ingest an arbitrary linkdrop and render their claim page based on the assets contained in the drop. While the standard officially supports only 3 types of drops: $NEAR, NFTs, and FTs, it is easily extendable to support other types of assets. 

In the case of trial accounts, the key information will return a new field `trial_data` that will indicate whether or not the account can exit. If the exit boolean is set to true, the frontend should skip the prompt for a new username and directly call `create_account_and_claim` while passing in an empty username and the corresponding public key that should be added as full access.
'''
'''--- docs/Tutorials/Advanced/AccessKeyMarketplace/concept.md ---
---
sidebar_label: 'Concept'
---
# Concept
'''
'''--- docs/Tutorials/Advanced/AccessKeyMarketplace/final.md ---
---
sidebar_label: 'Final Product'
---
# Final Product
'''
'''--- docs/Tutorials/Advanced/AccessKeyMarketplace/skeleton.md ---
---
sidebar_label: 'Skeleton Code'
---
# Skeleton Code
'''
'''--- docs/Tutorials/Advanced/CustomizedOnboarding/final.md ---
---
sidebar_label: 'Final Product'
---
# Final Product
'''
'''--- docs/Tutorials/Advanced/CustomizedOnboarding/introduction.md ---
---
sidebar_label: 'Introduction'
---
# Introduction

One of the biggest pain-points with Web3 is that users need to fund wallets before they interact with a dApp. In Web2, a user can find value in an application by using it before they go through the messy onboarding process.

**Keypom will allow apps to create links that will automatically sign users into their applications and give them a free trial. **

This can be thought of as giving someone a gift card that only works at your store. This concept is extremely powerful and has been around the Web2 world for a long time. As an example, a casino might give out 10$ vouchers so that people come and play. Once the voucher runs out, people can either leave or top-up their balance and stay longer. The import thing to note with this is that users are only pulling out their credit cards once they’ve actually experienced the casino.

With Keypom’s limited access accounts, people will be able to interact, spend $NEAR, sign transactions and gather assets with the simple click of a link. Once the free trial is over and users have collected value through interacting with the dApp, they can then choose to upgrade their account and onboard.

Much like the gift-card analogy, users will be locked into only interacting with the dApp specified in the link. They can't take the funds embedded in the “voucher” and leave. The funds are allocated for only 1 purpose: free trials of a specific application.

<p align="center">
  <img src={require("/static/img/docs/advanced-tutorials/onboarding/onboarding.png").default} width="65%" height="65%" alt="ticketing"/>
</p>

In this tutorial, you'll learn how to create your very own customized onboarding.

:::info
🚧 Full tutorial coming soon... 🚧
:::
'''
'''--- docs/Tutorials/Advanced/CustomizedOnboarding/skeleton.md ---
---
sidebar_label: 'Skeleton Code'
---
# Skeleton Code
'''
'''--- docs/Tutorials/Advanced/ReceiverContracts/concept.md ---
---
sidebar_label: 'Concept'
---
# Concept
'''
'''--- docs/Tutorials/Advanced/ReceiverContracts/final.md ---
---
sidebar_label: 'Final Product'
---
# Final Product
'''
'''--- docs/Tutorials/Advanced/ReceiverContracts/skeleton.md ---
---
sidebar_label: 'Skeleton Code'
---
# Skeleton Code
'''
'''--- docs/Tutorials/Advanced/RewardGating/concept.md ---
---
sidebar_label: 'Concept'
---
# Concept
'''
'''--- docs/Tutorials/Advanced/RewardGating/final.md ---
---
sidebar_label: 'Final Product'
---
# Final Product
'''
'''--- docs/Tutorials/Advanced/RewardGating/skeleton.md ---
---
sidebar_label: 'Skeleton Code'
---
# Skeleton Code
'''
'''--- docs/Tutorials/Advanced/daos/architecture.md ---
---
sidebar_label: 'Solution Architecture'
---
# Solution Architecture
In this section, you'll break down the requirements for the onboarding experience in order to create a solution architecture. This means translating the features from the [introduction](introduction.md) into tangible goals for the specific Keypom drop and its configurations.

The two major requirements for the auto-registration experience are:
- Members don't need an existing wallet to join the DAO. 
- The invitations do not require a 2 step process where a council votes and reaches a quorum for every registration.

## Seamless Wallet Creation

Since each user will be given a Keypom linkdrop, the wallet creation is handled by whatever claim platform they choose (MyNEARWallet, Meteor, FastAuth etc.). This means that there is no funding required from the user's perspective, eliminating KYC, credit cards, exchanges and other barriers.

The end user experience is to simply enter an account name and secure the wallet with whatever method they choose (iOS app, seedphrase, biometrics etc.).

## Single Step Registration

DAOs require a 2 step process for members to join. The first step is to create a proposal for adding them to the DAO and the second is to vote on that proposal and reach a quorum. This means that the DAO must constantly monitor for incoming proposals, leading to long wait times for new users.

If DAOs want to mass register members, this process is very inefficient. From a technical stand-point, what happens is:

1. An [`AddMemberToRole`](https://github.com/near-daos/sputnik-dao-contract#proposal-types) proposal is created.
2. A quorum of voting members, such as the DAO's council, must be reached to approve this proposal.

### Optimizing the Approach

In order for this process to be streamlined and completed automatically, Keypom must be able to first add a proposal and then **also** approve it as **part of the linkdrop claiming process**.

First, Keypom must be given a role that is capable of creating and approving proposals for adding new members.

Second, Keypom must be given a role that automatically reaches quorum whenever it votes. For this tutorial, that role will only have 1 member so that whenever Keypom votes to accept the `AddMemberToRole` proposal, 100% of the members will have voted and it will be automatically accepted.

To combine both these features into one step, a FunctionCall drop can be created that first calls [`add_proposal`](https://github.com/near-daos/sputnik-dao-contract#add-proposal) and then [`act_proposal`](https://github.com/near-daos/sputnik-dao-contract#approve-proposal) to vote on and approve the new member joining the DAO.

While this works in theory, unfortunately, the `act_proposal` function requires a `proposal_id` that is returned from the `add_proposal` function. This is an issue for the following reasons: 
1. With Keypom FC drops, there is no way to get a return value and use it to call another function.
2. SputnikV2 does not support custom `proposal_id`'s, meaning there is no way to hard code the `proposal_id` or inject the Keypom `drop_id` as the `proposal_id` ahead of time. 

### Middleman Solution

Up until this point, the general flow for auto registering users is clear. An FC drop must be made that somehow invokes the `add_proposal` and `act_proposal` functions one after another. The problem with relying entirely on Keypom is that the return value for `add_proposal` must be known and used.

This can be fixed by introducing a middleman contract. Rather than calling `add_proposal` and `act_proposal` directly through the FC drop, you can instead call **a single function on the middleman contract**. Once invoked, this middleman contract will then call `add_proposal`, parse the return value and call `act_proposal` in succession.

While Keypom is extremely versatile, there are cases where custom behavior will be needed. By introducing a middleman, you can customize exactly what will happen when a key is used.

In summary, rather than having the FC drop look as follows:

```
add_proposal
    -> DAO Contract
    -> Returns proposal ID
act_proposal (I need proposal ID somehow)
    -> DAO Contract
```

The FC drop will instead do the following:
```
Call middleman contract
    add_proposal
        -> DAO Contract
        -> Returns proposal ID
    Parse return value and get proposal ID
    act_proposal
        -> DAO Contract
```

---

## Full Solution Architecture
From above, here are the key features that need to be implemented. 
### Keypom Solution
On the Keypom side, an FC drop will be used to call the middleman. This FC drop must:
- Only call the DAO bot once, to prevent double registration or multiple people registering with the same key.
- Send the DAO bot the `AddMemberToRole` proposal object *and* the desired DAO. 
- Attach the wallet address for the account that will be onboarded to the middleman contract when auto-registering them into the DAO. 

### DAO Bot Solution

The middleman contract that relays the add and act proposal functions can be referred to as the DAO bot.

Recall that Keypom would need to be in its own special role. This was because Keypom was the `predecessor` for the `add_proposal` and `act_proposal` calls to the DAO contract. Now that the middleman is introduced, Keypom is no longer the predecessor. For this reason, the middleman DAO bot must have the special role instead.

The middleman must:
- Ensure all incoming calls are made by Keypom and have a sufficient attached deposit. 
- Take in a proposal object for adding a new member to a DAO (which includes the account ID of the new member).
- Take in a desired DAO contract and call `add_proposal` with the proposal object.
- Parse the return value which should be the proposal ID and then call `act_proposal` to automatically register the new member into the DAO.

---

## Conclusion

In this section, you explored and expanded on all the requirements for the auto-registration process. This started with using a Keypom linkdrop to facilitate [seamless wallet creation](#seamless-wallet-creation). Then, the onboarding process was automated and streamlined by introducing a [single-step registration](#optimizing-the-approach). This was done using a FunctionCall drop that would create and approve `AddMemberToRole` proposals as part of the linkdrop claiming process. 

However, you also saw the limitations of relying entirely on Keypom; that the `add_proposal` return value must be known and used. You solved this by introducing a [middleman contract](#middleman-solution) which would receive function calls from Keypom and execute the auto-registration. 

From this analysis, you set [concrete goals](#full-solution-architecture) for the Keypom FunctionCall drop and the middleman DAO bot contract. With these goals in mind, you can start to build out this solution!

'''
'''--- docs/Tutorials/Advanced/daos/daobot-flow.svg ---
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="719px" height="181px" viewBox="-0.5 -0.5 719 181" content="&lt;mxfile&gt;&lt;diagram id=&quot;BF2fFZ__Rzvh8hYSS4MP&quot; name=&quot;Page-1&quot;&gt;1VjbUtswEP2aPML4TnjMhdBOy5QZHkofFVuxNciWK8sk4eu7siXfZEqapJTmAawjayXt2T27ycRdpLtbjvLkjkWYThwr2k3c5cRxgqkHfyWwrwHPmtZAzElUQ3YLPJAXrEBLoSWJcNF7UTBGBcn7YMiyDIeihyHO2bb/2obR/q45irEBPISImuh3EomkRqe+1eKfMIkTvbNtqZk1Cp9izspM7Tdx3MViBZ96OkXalnq/SFDEth3IvZm4C86YqJ/S3QJT6Vrttnrd6pXZ5twcZ+KQBU694BnREusTBxSWzjcMLEgPU8armeBnKU81hytZ1acLBbH8f89ZkQMf5BlP5Ma1pTXX83c4XWOucThVvUk9qRwi9poE8E0uH8uUzkIhTzF/xlwQoOkrWmN6zwoiCMvglTUTgqWdF2aUxHJCsBzQRKQUBjY8slJQkuFFEzgWgIXg7AkwfVV9QX2orj+Vi+VGeNeBlH9vMUux4Ht4Rc1OFdUqFWwdRNs2sFwFJZ2YChSGVCjHjeGWTnhQjI6zG4ywO3AyzqKZTBgYhRQVBQn7/jrCNTjqJZfpmM7N/ZGba4xjiqpQ6mX3iDvUDveMVCGrWXEGjp8OPFqwkodYrermyMBQQ89rhgTiMRaGoYqd5toHEXZlELagiKRS/sBD3MyoFZi0vuC9ySuQUGVJn06k8iIE0jAfSZiURJG0Mee4IC9oXdmTdOfyetWF/fnEXwJCpfk54xHmh8WHDsdh6jQ6rrbraeFYSlmXvudcnyVKLly/v4RtNgU+lUfbNoj8XMh6yEGPoB5BfZA6aCGT0RCKR0iksbRWS3dlkMsTlq5LOPB8mxCBH3IUypkt1OKTs/dwYfPsQV54prLZY9I2zJ9jpM02K9cS5qpkyJnMGAhqOlqFlrNvslLLyvVRXWtIzru61j29bMDV+f5RSUc1+CEHl74eLnfdyeVej3ZEPGob8NxZBaN2kRzoNUcwUUt/P5JqFe/n7wcpZa7XD4cmPP60lLnX71bKbO/tKKoaZRwpvt9IuA2hVJOcsUzWqAgVSbP87ybkUOvskS7OG4mApt07KSP9EV8e36Y3Elkr4ZyJQ1ty8Jb4nQwqXkaoOrzxGAuDNlCsIe1nINfV/t33RfQtsR1m4VHUnqFH/xei+bEEMvD76Xl1pD4Gwfvp49QgflYKdsFxTApRdYdm65LhbdsY/g8tv322nv/CunS8swSLLvjn7fjNr26Vug45opTkxWsy917tpRHmY+2lc572Eobtz1m1Y9ufDN2bXw==&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(204, 255, 255);"><defs/><g><ellipse cx="33" cy="77.5" rx="7.5" ry="7.5" fill="rgb(255, 255, 255)" stroke="#000000" pointer-events="all"/><path d="M 33 85 L 33 110 M 33 90 L 18 90 M 33 90 L 48 90 M 33 110 L 18 130 M 33 110 L 48 130" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 137px; margin-left: 33px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: nowrap;"><font color="#000000">Prospective <br />Member</font></div></div></div></foreignObject><text x="33" y="149" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Prosp...</text></switch></g><path d="M 58 100 L 161.63 100" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 166.88 100 L 159.88 103.5 L 161.63 100 L 159.88 96.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 100px; margin-left: 108px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); border-color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); border: 1px solid rgb(0, 0, 0); white-space: nowrap;">Claim their<br />FC Key</div></div></div></foreignObject><text x="108" y="104" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">Claim their...</text></switch></g><path d="M 413 60 L 478 100 L 413 140 L 348 100 Z" fill="rgb(255, 255, 255)" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 128px; height: 1px; padding-top: 100px; margin-left: 349px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Is drop funder a<br />council member?</div></div></div></foreignObject><text x="413" y="104" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Is drop funder a...</text></switch></g><path d="M 233 60 L 298 100 L 233 140 L 168 100 Z" fill="rgb(255, 255, 255)" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 128px; height: 1px; padding-top: 100px; margin-left: 169px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Did Keypom call <br />DAO bot?</div></div></div></foreignObject><text x="233" y="104" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Did Keypom call...</text></switch></g><path d="M 298 100 L 341.63 100" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 346.88 100 L 339.88 103.5 L 341.63 100 L 339.88 96.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="148" y="30" width="340" height="150" rx="22.5" ry="22.5" fill="none" stroke="#000000" stroke-dasharray="3 3" pointer-events="all"/><rect x="253" y="0" width="130" height="30" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 128px; height: 1px; padding-top: 15px; margin-left: 254px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><font color="#000000">Keypom DAO Bot</font></div></div></div></foreignObject><text x="318" y="19" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Keypom DAO Bot</text></switch></g><path d="M 478 100 L 591.63 100" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 596.88 100 L 589.88 103.5 L 591.63 100 L 589.88 96.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 100px; margin-left: 536px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); border-color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); border: 1px solid rgb(0, 0, 0); white-space: nowrap;">Auto-register <br />new member</div></div></div></foreignObject><text x="536" y="104" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">Auto-register...</text></switch></g><ellipse cx="658" cy="100" rx="60" ry="40" fill="rgb(255, 255, 255)" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 100px; margin-left: 599px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">DAO</div></div></div></foreignObject><text x="658" y="104" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">DAO</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>
'''
'''--- docs/Tutorials/Advanced/daos/daobot.md ---
---
sidebar_label: 'Designing the DAO Bot'
---
# The DAO Bot

## Introduction
In this section you'll be creating the middleman DAO bot contract in order to securely facilitate auto-registration into your DAO. This bot will be tailored according to the functionality and specifications found in the [Solution Architecture](architecture.md#keypom-solution).

## Designing the DAO Bot

[Recall](./architecture.md#dao-bot-solution) that the DAO bot needs accomplish the following:

1. Ensure all incoming calls are made by Keypom and have a sufficient attached deposit. 
2. Take in a proposal object for adding a new member to a DAO (which includes the account ID of the new member).
3. Take in a desired DAO contract and call `add_proposal` with the proposal object.
4. Parse the return value which should be the proposal ID and then call `act_proposal` to automatically register the new member into the DAO.

With this in mind, the aim of this tutorial will be to write a Rust smart contract that will match the above properties. This process can be broken down into two stages:
1. Adding the proposal
2. Approving the proposal

> If you wish to simply use the DAO bot without modifying it, you can move ahead to the [Final Product](./final.md) page.

### Accessing the Code

For this section of the tutorial, you will need to clone a separate [DAO bot repository](https://github.com/keypom/dao-bot/tree/main). From there you can navigate to the skeleton code folder found below. 

```bash
git clone https://github.com/keypom/dao-bot.git && cd src-skeleton
```

This is the skeleton code and will allow you to follow along as the DAO bot is built out. If you wish to examine the completed version, that can be found in the `src` folder.

In the expandable section below, you can see the skeleton code from the file `lib.rs`.

<details>
<summary>DAO Bot Skeleton Code</summary>
<p>

```rust reference
https://github.com/keypom/dao-bot/blob/2c3a7bac8b18e1134483f0736e2ca9e2152f8509/src-skeleton/lib.rs#L1-L123
```

</p>
</details>

You may notice a few structs and enums predefined; these are simply present to match the structures from the [SputnikV2 contract](https://github.com/near-daos/sputnik-dao-contract/tree/main/sputnikdao2/src) and allow the contract to work with proposal inputs. 

---

## Adding the Proposal

Since the middleman contracts needs to call `add_proposal` on the DAO contract, this requires the use of cross-contract calls. For a refresher on making cross contract calls, see [NEAR docs](https://docs.near.org/develop/contracts/crosscontract#snippet-sending-information).

The first thing that needs to be checked is that the attached deposit is enough to cover the add proposal cost and Keypom is the predecessor to the call. Once that's done, the DAO bot can make a cross contract call to the dao contract and call `add_proposal`, passing in the proposal object.

```rust reference
https://github.com/keypom/dao-bot/blob/0d8abdb2151d224763aa7808cda88d58eb31e495/src-v1/lib.rs#L103-L120
```

When the `add_proposal` function finishes executing, the DAO bot can then invoke a callback method to parse the returned proposal ID and call `act_proposal`.

## Approving the Proposal

In the callback after the proposal has been added, the DAO bot will first check the success of the call and then parse the return value for the proposal ID.

Using the proposal ID, the DAO bot can then make another cross contract call to the DAO contract and call `act_proposal` to approve the proposal.

``` rust reference
https://github.com/keypom/dao-bot/blob/0d8abdb2151d224763aa7808cda88d58eb31e495/src-v1/lib.rs#L123-L143
```

:::note Recall
The DAO bot has been added to the DAO in its own role. This means that when the DAO bot votes to approve, it automatically reaches a quorum and passes the proposal
:::

---

## Final Code

Putting everything together, the final code for the DAO bot smart contract should be:

```rust reference
https://github.com/keypom/dao-bot/blob/0d8abdb2151d224763aa7808cda88d58eb31e495/src-v1/lib.rs#L1-L153
```

---

## Security Concerns

So far, you've seen both the FunctionCall drop and middleman DAO bot contract be created. You've seen how they communicate with each other and how the DAO bot can verify that only Keypom can interact with it. However there is a glaring security vulnerability.

What happens if somebody else creates an identical FunctionCall drop to manipulate your DAO through the DAO bot against your wishes? How can the DAO bot be upgraded further to put control of your DAO back into your hands?

---

## Conclusion

In this tutorial, you've created the all new DAO bot on function call at a time. This started with verifying the calls were coming from Keypom with a sufficient attached deposit. Then, this was followed up by [calling `add_proposal`](#adding-the-proposal) using the received proposal and DAO contract. Finally, you parsed the return value and [called `act_proposal` using the `proposal_id`](#approving-the-proposal).

As hinted in the final [security section](#security-concerns), the next tutorial will involve finding the DAO bot's vulnerabilities and further improving it. 

'''
'''--- docs/Tutorials/Advanced/daos/drop.md ---
---
sidebar_label: 'Creating the Drop'
---
# Creating the Drop

## Introduction
In this section, you'll take the first step to creating the DAO onboarding experience by designing the FC drop. This drop will be tailored according to the functionality and specifications found in the [Solution Architecture](architecture.md#keypom-solution).

Recall that the following properties must be met:

* A [Function Call drop](../../../Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/fc-drops.md) must be used and configured so that it calls a method on the DAO bot contract.
* The middleman contract will then invoke the `add_proposal` method, parse the return value and pass the proposal ID into the `act_proposal` method to approve.

With this in mind, the aim of this tutorial will be to create the drop matching the above properties. This process can be broken down into two stages:

1) Connect to the NEAR blockchain.  
2) Create the drop with function call data.  

Starting at the `keypom-docs-examples` directory, navigate to the `advanced-tutorial/dao-onboarding-skeleton` folder and open the `createDaoDrop.js` file. 

```bash
cd advanced-tutorials/dao-onboarding-skeleton
```

There, you can see the following skeleton code in the file `createDaoDrop.js`.
``` js reference
https://github.com/keypom/keypom-docs-examples/blob/3d2ebdfdfe601bc7471a62e859682abaf9afb7cf/advanced-tutorials/dao-onboarding-skeleton/createDaoDrop.js#L1-L29
```

:::note
While the skeleton code allows you to follow alongside the tutorial, the completed code can be found in `advanced-tutorial/dao-onboarding`.
:::

---

## Connecting to NEAR
In this section, you'll be addressing the first step which is connecting to the NEAR network. 

This is done with `NEAR-API-JS` and consists of:

* Selecting which network to connect to (testnet or mainnet).

* Specifying the location where the keys are stored for the drop funder's account. This location is commonly in the `~/.near-credentials` folder on your local machine.

```js reference
https://github.com/keypom/keypom-docs-examples/blob/3d2ebdfdfe601bc7471a62e859682abaf9afb7cf/advanced-tutorials/dao-onboarding/pre-security/createDaoDrop.js#L19-L39
```

---

## Creating the Drop
In this section, you'll create the function call drop to meet the functional requirements defined earlier.

### Function Call Drop Basics

#### Initializing the SDK

This process starts with calling the `initKeypom` function to initialize the SDK.

```js
// Change this to your account ID
const FUNDER_ACCOUNT_ID = "minqi.testnet";
const NETWORK_ID = "testnet"
async function createDaoDrop() {
  // Initiate connection to the NEAR blockchain.
  const CREDENTIALS_DIR = ".near-credentials";
  ...
  ...
  let near = await connect(nearConfig);

  await initKeypom({
    near,
    network: NETWORK_ID,
  });
}
```

After `initKeypom` is called, the FC Drop can be created by calling `createDrop` and adding an `fcData` parameter.

#### Defining the Function Call Data

The `fcData` is an object that defines the methods that will be called for any given key use:

```bash
fcData
└── methods
```

For this Keypom drop, only a single function call will be needed which invokes a method on the middleman contract. In this tutorial, that method is called `new_auto_registration`.

```js
methods: [
  [
    "new_auto_registration"
  ]
]
```

In reality, each method is not simply a string as shown above. The methods require the following parameters:

- `receiverId`: The contract receiving the function call.  
- `methodName`: The function to be called on the receiver contract.  
- `args`: A stringified JSON object of all the arguments to be passed into `methodName`.  
- `attachedDeposit`: The yoctoNear deposit attached to the function call when the key is used.  

For more information on the `methods` parameter, please see the [TypeDocs](../../../keypom-sdk/Core/interfaces/Method.md)

In summary, the `fcData` should look something like this:

```js
fcData: {
    methods: [
        // First key use
        [
            {
                receiverId: DAO_BOT,
                methodName: "new_auto_registration",
                args: SOME_ARGS, 
                attachedDeposit: SOME_DEPOSIT
            }
        ],
    ]   
}  
```

The required arguments and attached deposits will be covered in a later section.

### Adding Proposal and Injected Arguments

The DAO bot will need to know what proposal to add and so that information should be passed in as arguments. From the [SputnikV2 ReadMe](https://github.com/near-daos/sputnik-dao-contract#add-proposal), it can be seen that the proposal will need the following structure. 
```json
{
  "proposal": {
    "description": "Auto-Registering New Member",
    "kind": {
      "AddMemberToRole": {
        "member_id": "new-moon-dao-member-1.testnet",
        "role": "new-onboardee"
      }
    }
  }
}
```
:::caution
The `role` in the proposal **must already exist** in the DAO. This is because the `AddMemberToRole` proposal from SputnikV2 only works with existing roles.
:::

In order for the onboarding to perform as expected, the `member_id` field must be set to the wallet address for the account that is onboarding. To do this you can use Keypom Arguments which are important pieces of information that can be passed into specified fields when a key is used.

The following optional Keypom arguments are exposed for each individual method in the `fcData` alongside the required receiverId, methodName, attachedDeposit etc. 

They tell Keypom where to inject certain parameters for each function call.

- `accountIdField`: The name of the account that is claiming the linkdrop.
- `dropIdField`: The [`dropId`](../../../keypom-sdk/Core/interfaces/Drop.md#dropid) of the drop that the claim is being called on. 
- `keyIdField` The unique identifier, [`keyId`](../../../keypom-sdk/Core/interfaces/KeyInfo.md#keyid), of the key that is being used to claim.
- `funderIdField` the `accountId` of the person funding the drop.

In this case, the `accountIdField` should be set to `proposal.kind.AddMemberToRole.member_id`. This will, upon the key being claimed, tell Keypom to inject the `accountId` of the user claiming into the argument's proposal object under the `kind.AddMemberToRole.member_id` field. 

In addition to the `accountIdField`, an attached deposit must be sent to cover the cost of the DAO's [proposal bond](https://github.com/near-daos/sputnik-dao-contract/blob/2b19edb50e4542e1b8a6769023f2318c70255ee9/sputnikdao2/src/policy.rs#L153C1-L154). In this case, the bond is set to 0.1 $NEAR. 

Finally, the FC drop should pass the desired DAO contract to the middleman DAO bot into the `dao_contract` argument. 

In summary, the final `fcData` should look as follows.

```js
fcData: {
    methods: [
        [
            {
                receiverId: DAO_BOT_CONTRACT,
                methodName: "new_auto_registration",
                args: JSON.stringify({
                    dao_contract: DAO_CONTRACT,
                    proposal: {
                        description: "Auto-Registering New Member",
                        kind: {
                            AddMemberToRole:{
                                role: "new-onboardee-role"
                            }
                        }
                    }
                }),
                accountIdField: "proposal.kind.AddMemberToRole.member_id",
                // Attached deposit of 0.1 $NEAR, the Sputnik proposal deposit, for when the receiver makes this function call
                attachedDeposit: parseNearAmount("0.1")
            }
        ],
    ]   
}   
```

### Gas Requirements
The final consideration to make is the amount of gas needed to claim the drop. To determine this amount, you can test your drop by using `create_account_and_claim`. To maximize gas usage, it is important to use an `account_id` of maximum length (64 characters).

By default, MyNearWallet will attach 100 [TGas](https://docs.near.org/concepts/basics/transactions/gas#thinking-in-gas) to linkdrop claims. This can be used as a starting point when testing your drop but if more gas is needed, it can be overriden manually.

If you were to use the default 100 TGas, it would work for claims to existing wallets but would throw an error for `create_account_and_claim`. This is because the drop uses more Gas when a new account is created. This can be seen in the screenshot below. To mitigate this, you can set the required gas to be 175 TGas.

<p align="center"> <img src={require("/static/img/docs/advanced-tutorials/dao-auto-reg/fail-not-enough-gas.png").default} alt="failed txn not enough gas" width="80%"/> </p>

:::note
For the majority of use-cases, the 100 TGas default is more than enough. With the DAO bot, however, the middleman contract is quite complex and requires more Gas
:::

To combat this, you can add a `requiredGas` argument to your `createDrop`. This will increase the overall amount of gas available to each key in your drop. 

```js
const TERA_GAS = 1000000000000;
let {keys, dropId} = await createDrop({
    account: fundingAccount,
    numKeys: 1,
    ...
    requiredGas: (175*TERA_GAS).toString(),
    ...
})
```

With this modification, the [transaction](https://explorer.testnet.near.org/transactions/AoH2PDMvtdeNqwxjMJdPE6BmVxV1TKVGhdCybL9YsyG6) shows that the drop is claimed successfully and the user is registered into the DAO.

### Final Drop Structure

Putting it all together, the final drop structure should look something like this:

```js reference
https://github.com/keypom/keypom-docs-examples/blob/3d2ebdfdfe601bc7471a62e859682abaf9afb7cf/advanced-tutorials/dao-onboarding/pre-security/createDaoDrop.js#L48-L81
```

---

## Creating Onboarding Links
The last step in this process is to create the links themselves so that you can easily register people into your DAO. For this tutorial, you will make use of MyNEARWallet's linkdrop claim flow which has the following URL: `https://testnet.mynearwallet.com/linkdrop/CONTRACT_ID/SECRET_KEY`.

You can utilize the `formatLinkdropUrl` function for convenience. It can take a custom URL that contains `CONTRACT_ID` and `SECRET_KEY` and it will replace them with the contract ID and secret keys passed in.

```js reference
https://github.com/keypom/keypom-docs-examples/blob/3d2ebdfdfe601bc7471a62e859682abaf9afb7cf/advanced-tutorials/dao-onboarding/pre-security/createDaoDrop.js#L84-L89
```

---

## Final Code

Putting everything together, the final code for the drop should be as shown below:

```js reference
https://github.com/keypom/keypom-docs-examples/blob/3d2ebdfdfe601bc7471a62e859682abaf9afb7cf/advanced-tutorials/dao-onboarding/pre-security/createDaoDrop.js#L1-L105
```

:::note
This drop will not work until the DAO bot is created and deployed. The full script and process will be tested in the [Final Product](./final.md) section. 
:::

---

## Conclusion

So far, you've broken down the DAO auto-registration tool into functional requirements. You then used them to write a script to create the accompanying drop.

This included [creating the proposal and using the `accountIdField`](#adding-proposal-and-injected-arguments) to attach the wallet address for the account that will be onboarded. You then finished that off by [creating the linkdrops](#creating-onboarding-links) to distribute to prospective onboardees. 

In the next tutorial, you'll be creating the DAO bot that the FC drop you just created will be interacting with. 

'''
'''--- docs/Tutorials/Advanced/daos/final.md ---
---
sidebar_label: 'Final Product'
---
# Final Product
Welcome to the last section of this DAO auto-registration tutorial! Here, you'll be seeing the full toolchain in action.

## Getting Started
To follow along on your own machine, you can clone the code from the [Keypom docs examples repository](https://github.com/keypom/keypom-docs-examples) and run the following command in the root folder `keypom-docs-examples`:

``` bash
cd advanced-tutorials/dao-onboarding && yarn
```

:::note
If you have been following along and wish to run your own code, run:

``` bash
cd advanced-tutorials/dao-onboarding-skeleton && yarn
```
:::

## Creating and Claiming the Drop

Before you create and claim your drop, you must ensure that the DAO bot (`dao-bot.keypom.near` or `keypom-dao-bot.testnet`) holds its own special role on your DAO. This role must have permissions to add and vote on `AddMemberToRole` proposals.

Additionally, as highlighted in the [drop creation](./drop.md#adding-proposal-and-injected-arguments) section, the role that you are planning to auto-register new members into must already exist.

:::info note
This demonstration will be done on mainnet using `createDaoDrop-mainnet`. This is to provide you with visuals on [BOS](https://near.org/hack.near/widget/DAO.Profile?daoId=keypom-test.sputnik-dao.near). 

<p align="center"> <img src={require("/static/img/docs/advanced-tutorials/dao-auto-reg/bos-showcase.png").default} alt="bos showcase" width="80%"/> </p>

:::

To execute the script, run the following command in the `advanced-tutorials/dao-onboarding` folder:

```bash
node createDaoDrop-mainnet
```

This should give you the following output:
```bash
Receipts: DFf4iY9S4vUiVEZJy2neq4EhcKJXFKyoQqsDb2rvZrHF, 3E7S1h6dBmRZ14BA91CatTzaTEUmj3zLxyYAMG36MZpz
      Log [v2.keypom.near]: Current Block Timestamp: 1685141815019548108
      Log [v2.keypom.near]: 21 calls with 105000000000000 attached GAS. Pow outcome: 1.8602935. Required Allowance: 20248156910387200000000
      Log [v2.keypom.near]: Total required storage Yocto 13850000000000000000000
      Log [v2.keypom.near]: Current balance: 1.223441, 
          Required Deposit: 0.2350981, 
          total_required_storage: 0.01385,
          Drop Fee: 0, 
          Key Fee: 0 Total Key Fee: 0,
          allowance: 0.0202481 total allowance: 0.0202481,
          access key storage: 0.001 total access key storage: 0.001,
          deposits less none FCs: 0.1 total deposits: 0.1 lazy registration: false,
          deposits for FCs: 0.1 total deposits for FCs: 0.1,
          uses per key: 1
          None FCs: 0,
          length: 1
          GAS to attach: 100000000000000
      Log [v2.keypom.near]: New user balance 0.9883428
      Log [v2.keypom.near]: Fees collected 0

    
  Auto-Registration Links: 
  
  https://wallet.near.org/linkdrop/v2.keypom.near/5JesG9FdfuFq3b3PA7p3NPY1SpZvi1DdtPs9ANumx9VRDE5iXyUsMT4Qcn132DFiDNiwjccFyoqAYGYP46UVuTVb
```

## Claiming the Drop and Viewing Changes

For this example, the drop will be claimed with [`keypom-dao-tutorial-member.near`](https://explorer.near.org/accounts/keypom-dao-tutorial-member.near). The aim will be to auto-register this account into [MoonDAO](https://near.org/hack.near/widget/DAO.Profile?daoId=keypom-test.sputnik-dao.near).

<p align="center"> <img src={require("/static/img/docs/advanced-tutorials/dao-auto-reg/claim.png").default} alt="explorer claim" width="80%"/> </p>

After claiming, you can check the DAO policy [here](https://near.org/hack.near/widget/DAO.Profile?daoId=keypom-test.sputnik-dao.near) in the *Policy* tab. 

<p align="center"> <img src={require("/static/img/docs/advanced-tutorials/dao-auto-reg/bos.png").default} alt="bos policy" width="80%"/> </p>

🎉 As you can see, `keypom-dao-tutorial-member.near` has automatically been registered into the DAO by simply claiming a linkdrop! 🎉

The transaction for this auto-registration can be found [here](https://explorer.near.org/transactions/2z9L9HcFKTJUANMcrQaSQMXsSbPihc472Lk83AgEtszH).

### Additional Viewing Methods

You can also view the proposal that was created and approved by the DAO bot by using the following:

```
near view keypom-test.sputnik-dao.near get_proposal '{"id":9}' 
```

<details>
<summary>Auto-Registration Proposal</summary>
<p>

``` bash
View call: keypom-test.sputnik-dao.near.get_proposal({"id":9})
{
  id: 9,
  proposer: 'dao-bot.keypom.near',
  description: 'mooooooooon',
  kind: {
    AddMemberToRole: {
      member_id: 'keypom-dao-tutorial-member.near',
      role: 'new-onboardee-role'
    }
  },
  status: 'Approved',
  vote_counts: { 'Keypom DAO Bot': [ 1, 0, 0 ] },
  votes: { 'dao-bot.keypom.near': 'Approve' },
  submission_time: '1685145461041750017'
}
```

</p>
</details>

The DAO policy can also be checked through the command line as well:
```
near view keypom-test.sputnik-dao.near get_policy' 
```

<details>
<summary>DAO Policy</summary>
<p>

``` bash
View call: keypom-test.sputnik-dao.near.get_policy()
{
  roles: [
    { name: 'all', kind: 'Everyone', permissions: [], vote_policy: {} },
    {
      name: 'new-onboardee-role',
      kind:{
        Group: [
          'keypom-dao-tutorial-member.near',
          'minlu.near',
          'mintlu.near'
        ]
      },
    },
    ...
    ...
  ],
  default_vote_policy: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 2 ] },
  proposal_bond: '100000000000000000000000',
  proposal_period: '604800000000000',
  bounty_bond: '100000000000000000000000',
  bounty_forgiveness_period: '604800000000000'
}
```

</p>
</details>

## How You Can Use DAO Bot
This DAO bot contract you just made has been deployed to the account `keypom-dao-bot.testnet` and `dao-bot.keypom.near` and is open for you to use! You can create your own [FC drops](drop.md#final-code) to interface and experiment with it. 

:::caution
Prior to using the DAO Bot, ensure that it is given a role in your DAO capable of creating and approving `AddMemberToRole` proposals. For more info, see the [solution architecture](architecture.md#optimizing-the-approach)
:::

If you wish to make modifications to the DAO bot, the source code is found [here](https://github.com/keypom/dao-bot). You can modify to your liking and deploy the contract as you see fit. 

:::note
The following functions have been included in the DAO bot in case you created a drop using older versions of the Keypom contract, such as `v1-4.keypom.near`. Note that you will need to deploy the DAO bot and modify these values yourself.
``` rust
pub fn change_keypom_contract(&mut self, new_contract: AccountId)
pub fn view_keypom_contract(&self) -> AccountId
```
:::

## Conclusion

In this tutorial, you learned how you can use a [Keypom FC drop](drop.md) and a newly created [DAO bot](daobot.md) to automatically register new users into your DAO and get the onboarding process started right away. You also learned how to [use `keypom_args` to validate authenticity](security.md) of incoming calls from Keypom drops. 

This allows new members to focus on topics and discussions that are DAO specific rather than needing to worry about creating an account and learning the technical jargon of the NEAR blockchain. This onboarding flow also frees up the voting members to focus on the DAOs actual tasks rather than voting to approve new members.
'''
'''--- docs/Tutorials/Advanced/daos/introduction.md ---
---
sidebar_label: 'Introduction'
---
# Introduction
In this tutorial, you'll learn how to create a seamless DAO registration experience that allows you to onboard anyone directly into your DAO with the click of a link!

---

## Background
DAOs are a popular topic in crypto and offer powerful on-chain governance features. They work very well in most cases but there are 2 key issues that Keypom will solve.

1. There is a **high barrier to entry** for an everyday user who might not have a crypto wallet.
2. Being enrolled into the DAO is a **2 step process**. First, a proposal must be made and then it needs to be approved by an existing quorum of voting members.

Both of these act as bottlenecks in attracting and onboarding new members.

This is where Keypom can help. Using a [function call drop](../../../Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/fc-drops.md), Keypom can automatically register users into your DAO **as part of the wallet creation process**. Not only does this eliminate the need for a wallet, but it also bypasses the 2 step approval process.

> **NOTE** If someone has a wallet already, they can skip account creation and register their existing wallet into the DAO.

## Success Criteria

This tutorial will cover the following requirements to achieve a seamless onboarding experience for new users.

- Members don't need an existing wallet to join the DAO. 
- The invitations do not require a 2 step process where a council votes and reaches a quorum for every single registration.
- The drop cannot be used for malicious purposes.

With these requirements met, you will be able to seamlessly and automatically register new members into your DAO while maintaining the integrity of your DAO's members.

:::info
This tutorial will have members registered into the MoonDAO, a [Sputnik V2](https://github.com/near-daos/sputnik-dao-contract) compatible DAO. 

<p align="center"> <img src={require("/static/img/docs/advanced-tutorials/dao-auto-reg/moondaohomepage.png").default} width="80%" height="80%" alt="ticketing" class="rounded-corners"/></p>
:::

---

## Prerequisites

For the this tutorial series, you can choose to follow along on your own machine. To do so, you must have the following:

1. [Node JS](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  
2. [Keypom Core SDK](https://github.com/keypom/keypom-js/tree/main/packages/core#installation)

> **NOTE** If you want to reference the finished tutorial code, it can be found [here](https://github.com/keypom/keypom-docs-examples/tree/main/advanced-tutorials/dao-onboarding).

---

## Creating your Project
In this section, you'll install the skeleton project and get familiar with the codebase.

First, you'll want to clone the repo:

```bash
git clone https://github.com/keypom/keypom-docs-examples.git && cd advanced-tutorials
```

Second, install all the dependencies

```
yarn install && cd advanced-tutorials/dao-onboarding-skeleton && yarn
```

At this point, all the dependencies should be installed and you should be in the `advanced-tutorials/dao-onboarding-skeleton` folder. Here you'll find the following files required to build out your app.

```bash
/dao-onboarding-skeleton
└── configurations.js
└── createDaoOnboarding.js
└── package.json
└── view-roles.js
```

With this setup complete, you are ready to begin building the onboarding experience, starting by expanding upon the success criteria and breaking down the problem further.
'''
'''--- docs/Tutorials/Advanced/daos/security.md ---
---
sidebar_label: 'DAO Bot Security Concerns'
---
# DAO Bot Exploit Solution

Up to this point, the DAO bot has a **major** security exploit. In this section, you'll learn about the exploit, how to fix it and how you can prevent similar exploits when writing Keypom compatible contracts in the future.

---

## Breaking Down the Problem
To illustrate the exploit, a quick example can be analyzed: 

Min is a council member on MoonDAO. Since he has run onboarding campaigns through Keypom before, the DAO bot has its own role in MoonDAO.

Ben is a malicious user and is jealous because he was never allowed to join MoonDAO. He intends on adding himself to MoonDAO without Min's consent.

To do this, he creates an identical FunctionCall drop, exactly like the one Min used. This FunctionCall drop will invoke `new_auto_registration` on the DAO bot.

[Recall](daobot.md#adding-the-proposal) that the DAO bot currently checks 2 things before performing the auto-registration:
1. The function call is coming from Keypom.
2. There is enough attached deposit to cover the proposal bond.

Ben could create the an FC drop with the following method data, which would pass the first check. As part of the FC data, Ben would add an attached deposit of 0.1 $NEAR, which would pass the second check. 

At that point, when claimed, the checks would pass and the DAO bot would take the proposal object and pass it into the call to `add_proposal` on the MoonDAO contract.

Since the DAO bot has the special role, it would automatically approve the proposal and Ben would be added to MoonDAO.

In order to fix this, there needs to be a check in place to ensure that the FC drop originated from a trusted funder.

<details>
<summary>Ben's Malicious Drop</summary>
<p>

```js
{
    receiverId: DAO_BOT_CONTRACT,
    methodName: "new_auto_registration",
    args: JSON.stringify({
        dao_contract: MOON_DAO, // Points to MOON DAO
        proposal: {
            description: "Auto-Registering New Member",
            kind: {
                AddMemberToRole:{
                    member_id: BEN, // Ben is adding himself!
                    role: "new-onboardee-role"
                }
            }
        }
    }),
    attachedDeposit: parseNearAmount("0.1")
} 
```

</p>
</details>

:::warning
To summarize, since the DAO bot has the role to approve members *and* Keypom allows anyone to interact with the DAO bot through their own FC drops, a malicious drop could be created to add *anyone to any DAO*.

To fix this, the DAO bot needs to check that the FC drop is coming from a trusted funder.
:::

## Receiving the Drop Funder

Since the DAO bot will need to check if the funder is trusted, the function interface for `new_auto_registration` should be updated to include a new argument, `funder`.

```rs
new_auto_registration(dao_contract: AccountId, funder: AccountId, proposal: ProposalInput)
```

In order for this funder to be passed in, the FC drop will need to be modified. [Recall](drop.md#adding-proposal-and-injected-arguments) that Keypom can optionally inject important data into the outgoing arguments. This data can either be the:
- Drop ID
- Key ID
- Claiming account ID
- Drop funder ID

In this case, the drop's funder ID can be injected into the `new_auto_registration` `funder` argument if the `funderIdField` is set to `funder`. Therefore, the FC drop should be modified accordingly:

```js reference
https://github.com/keypom/keypom-docs-examples/blob/3d2ebdfdfe601bc7471a62e859682abaf9afb7cf/advanced-tutorials/dao-onboarding/createDaoDrop.js#L57-L81
```

This works great, but there is just one slight problem. Ben could hardcode the arguments to the method `new_auto_registration` and specify that the `funder` is Min, even though Ben created the drop.

## Validating Keypom Args

Validating what arguments came from Keypom, and what arguments were hardcoded by the funder is an extremely important topic to ensure the security of your smart contracts. Every time an FC drop is claimed, Keypom will *always* attach an extra parameter to the arguments of the function. This argument is `keypom_args` and is an object containing information about what was injected by Keypom. The `keypom_args` are created by Keypom and cannot be impersonated with any arguments. They are the canonical source of truth for what Keypom injected.

```js
KeypomArgs {
    account_id_field: String | undefined
    drop_id_field: String | undefined
    key_id_field: String | undefined
    funder_id_field: String | undefined
}
```

This object is sent along any method call that Keypom makes and can be used to perform the validation. If the DAO bot contract took in the keypom args, and did an assertion that the `funder_id_field` was set to `funder`, then the exploit would be fixed. There would be *no* way for Ben to impersonate Min as the funder of the drop in order to gain access to MoonDAO.

```rs
new_auto_registration(dao_contract: AccountId, funder: AccountId, proposal: ProposalInput, keypom_args: KeypomArgs) {
      require!(keypom_args.funder_id_field == Some("funder".to_string()), "BEN IS MALICIOUS! Funder is not Min!");
}
```

---

## Checking If the Funder is Trusted
At this point, the DAO bot knows the funder's account ID and has validated that they created the drop. The next step is to check if the funder holds a trusted role within the DAO.

While the definition of "trusted role" can change between DAOs, for this tutorial, this role will be `council`. 

![Example banner](./daobot-flow.svg)

:::note
If your DAO wishes to change the definition of a "trusted role", you are free to modify and deploy your own DAO bot contract as you see fit.
:::

### Approach

If the DAO bot was able to query for the policy information, then it could filter through the roles and find `council`. At this point, it could simply check if the funder is a member of `council` and then initiate the auto-registration flow

By looking at the [SputnikV2 contract](https://github.com/near-daos/sputnik-dao-contract/blob/main/sputnikdao2/src/policy.rs), you can see that each DAO's `Policy` has a `roles` vector.
```rust
pub struct Policy {
    /// List of roles and permissions for them in the current policy.
    pub roles: Vec<RolePermission>,
    ...
}
```

This vector contains each role their members.
```rust
pub struct RolePermission {
    /// Name of the role to display to the user.
    pub name: String,
    /// Kind of the role: defines which users this permissions apply.
    pub kind: RoleKind,
    ...
}

pub enum RoleKind {
    /// Matches everyone, who is not matched by other roles.
    Everyone,
    /// Member greater or equal than given balance. Can use `1` as non-zero balance.
    Member(U128),
    /// Set of accounts.
    Group(HashSet<AccountId>),
}
```

A sample DAO policy can be seen below:

<details>
<summary>Sample DAO policy</summary>
<p>

``` bash
View call: moondao.sputnikv2.testnet.get_policy()
{
  roles: [
    { name: 'all', kind: 'Everyone', permissions: [], vote_policy: {} },
    {
      name: 'council',
      kind: { Group: [ 'minqi.testnet' ] },
      permissions: [
        'add_member_to_role:VoteRemove',
        'upgrade_self:VoteRemove',
        'policy:VoteReject',
        'bounty_done:AddProposal',
        'policy:VoteRemove',
        'set_vote_token:VoteReject',
        'upgrade_remote:AddProposal',
        'remove_member_from_role:VoteApprove',
        'add_bounty:VoteRemove',
        'vote:VoteApprove',
        '*:Finalize',
        'bounty_done:VoteApprove',
        'transfer:VoteRemove',
        'add_bounty:VoteReject',
        'add_member_to_role:VoteReject',
        'set_vote_token:VoteRemove',
        'transfer:VoteApprove',
        'transfer:VoteReject',
        'config:VoteReject',
        'call:VoteReject',
        'remove_member_from_role:VoteReject',
        'policy:AddProposal',
        'bounty_done:VoteRemove',
        'set_vote_token:AddProposal',
        'upgrade_self:AddProposal',
        'set_vote_token:VoteApprove',
        'config:VoteApprove',
        'policy:VoteApprove',
        'add_bounty:VoteApprove',
        'remove_member_from_role:VoteRemove',
        'transfer:AddProposal',
        'upgrade_remote:VoteReject',
        'call:VoteApprove',
        'add_member_to_role:AddProposal',
        'call:AddProposal',
        'call:VoteRemove',
        'config:AddProposal',
        'remove_member_from_role:AddProposal',
        'upgrade_remote:VoteApprove',
        'upgrade_remote:VoteRemove',
        'upgrade_self:VoteApprove',
        'upgrade_self:VoteReject',
        'vote:VoteReject',
        'vote:VoteRemove',
        'vote:AddProposal',
        'add_member_to_role:VoteApprove',
        'config:VoteRemove',
        'add_bounty:AddProposal',
        'bounty_done:VoteReject'
      ],
      vote_policy: {
        add_member_to_role: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 2 ] },
        policy: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 2 ] },
        vote: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 2 ] },
        set_vote_token: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 2 ] },
        remove_member_from_role: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 2 ] },
        transfer: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 2 ] },
        add_bounty: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 2 ] },
        upgrade_self: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 2 ] },
        bounty_done: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 2 ] },
        call: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 2 ] },
        config: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 2 ] },
        upgrade_remote: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 2 ] }
      }
    },
    {
      name: 'Keypom DAO Bot',
      kind: { Group: [ 'keypom-dao-bot.testnet' ] },
      permissions: [
        'add_member_to_role:VoteApprove',
        'add_member_to_role:VoteRemove',
        'add_member_to_role:VoteReject',
        'add_member_to_role:AddProposal'
      ],
      vote_policy: {
        transfer: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 1 ] },
        upgrade_self: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 1 ] },
        remove_member_from_role: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 1 ] },
        set_vote_token: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 1 ] },
        bounty_done: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 1 ] },
        policy: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 1 ] },
        add_member_to_role: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 1 ] },
        call: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 1 ] },
        config: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 1 ] },
        upgrade_remote: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 1 ] },
        vote: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 1 ] },
        add_bounty: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 1 ] }
      }
    }
  ],
  default_vote_policy: { weight_kind: 'RoleWeight', quorum: '0', threshold: [ 1, 2 ] },
  proposal_bond: '100000000000000000000000',
  proposal_period: '604800000000000',
  bounty_bond: '100000000000000000000000',
  bounty_forgiveness_period: '604800000000000'
}
```

</p>
</details>

### Verifying Funder and Getting DAO Policy

The first step is to call `get_policy` on the DAO contract. After `get_policy` is called, a callback function is invoked to receive and parse the policy.

``` rust reference
https://github.com/keypom/dao-bot/blob/2c3a7bac8b18e1134483f0736e2ca9e2152f8509/src/lib.rs#L103-L119
```

### Ensuring Funder is Council
After the policy is received, the council role is found using a filter. The role's hashset is then searched to see if the funder exists in that set. If yes, then the auto-registration continues and `add_proposal` is called. 

```rust reference
https://github.com/keypom/dao-bot/blob/2c3a7bac8b18e1134483f0736e2ca9e2152f8509/src/lib.rs#L122-L164
```

---

## Human Gating the DAO Bot (Mainnet Only)
With the introduction of the [SoulBound Token Standard](https://github.com/robert-zaremba/NEPs/blob/robert/nep-sbt/neps/nep-0393.md), a proof-of-humanity protocol was implemented on NEAR, known as [I-Am-Human](https://i-am-human.app/). With this came the ability to human-gate certain actions, such as self-nominating or participating in governance.

As DAOs are critical in governance and community, the need to human-gate these automatic DAO registrations became a high priority. By leveraging the I-Am-Human Registry's [`is_human`](https://github.com/near-ndc/i-am-human#additional-queries) human checker, you can open up the option for you DAO auto-registrations to be human-gated using the following code to parse the `is_human` response. 

``` rust reference
https://github.com/keypom/dao-bot/blob/a19a2d29b42514a1e9d5f11c993b79f207c4a00f/src/lib.rs#L158-L180
```

:::info
This check will only be performed **if specified in the drop**! By default, human-gating is turned **off**. 

Below is an example of a drop that is human-gated. Notice the `human_only` parameter!
:::

``` js reference
https://github.com/keypom/keypom-docs-examples/blob/290cbce2c939573dbc8cb2b03598c2b2af5f91c2/advanced-tutorials/dao-onboarding/createDaoDrop-mainnet.js#L48-L84
```

---

## Full Code
The code for this can be seen below: 

```rust reference
https://github.com/keypom/dao-bot/blob/2c3a7bac8b18e1134483f0736e2ca9e2152f8509/src/lib.rs#L103-L164
```

:::info
The full code for the completed DAO bot can be found [here](https://github.com/keypom/dao-bot/blob/main/src/lib.rs).
:::

---

## Conclusion

In this tutorial, you learned how people can use [malicious drops](#breaking-down-the-problem) to exploit your DAO. You then saw how you can protect yourself, by checking the incoming call's drop funder and their roles in your DAO. This started with [receiving the drop funder](#receiving-the-drop-funder) by using `keypom_args`, then [verifying injected arguments](#checking-the-drop-funder) and finally parsing the DAO policy and [checking the funder's roles](#ensuring-funder-is-council) in the DAO. 

All of this work ensures that only approved members (such as Council) can use Keypom FC drops to create auto-registration campaigns for your DAO. This helps ensure the integrity of your DAO as you bring on more new members. 

This concept and approach can be used any time where important assets or processes are gated only by arguments such as a DAO contract or NFT series ID. It is important to ensure that the incoming drop is coming from a trusted source and that the arguments are validated as having been injected by Keypom. This will protect you from malicious actors creating identical Keypom drops to exploit your products. 

In the next section, you'll be reviewing all of your work so far by testing the whole auto-registration system.
'''
'''--- docs/Tutorials/Advanced/homepage.md ---
---
sidebar_label: 'Coming Soon...'
---
# Advanced Tutorials

Advanced Tutorials are in progress!
'''
'''--- docs/Tutorials/Advanced/multi-sig/concept.md ---
---
sidebar_label: 'Concept'
---
# Concept
'''
'''--- docs/Tutorials/Advanced/multi-sig/final.md ---
---
sidebar_label: 'Final Product'
---
# Final Product
'''
'''--- docs/Tutorials/Advanced/multi-sig/skeleton.md ---
---
sidebar_label: 'Skeleton Code'
---
# Skeleton Code
'''
'''--- docs/Tutorials/Advanced/subscriptions/final.md ---
---
sidebar_label: 'Final Product'
---
# Final Product
'''
'''--- docs/Tutorials/Advanced/subscriptions/introduction.md ---
---
sidebar_label: 'Introduction'
---
# Introduction

Recurring payments are quite a common situation. Let’s say you need to send a contractor $50 USDC every week for 10 weeks. With Web2, you would need to provide a payment method and trust the end user with this sensitive information. 

Using Keypom, you can eliminate this risk by sending them a key with limited funds attached. Instead of exposing your private information, you could create a key with 10 uses, usable once a week. You can then pre-load $500 USDC for the 10 weeks, or $50 USDC for the first week and fund the rest as the work continues. At that point, you would simply hand over the key to the user and they can claim once a week.

<p align="center">
  <img src={require("/static/img/docs/advanced-tutorials/subscriptions/recurring_payments.png").default} width="65%" height="65%" alt="ticketing"/>
</p>

In this tutorial, you'll learn how to utilize Keypom to create Web3 recurring payments.

:::info
🚧 Full tutorial coming soon... 🚧
:::
'''
'''--- docs/Tutorials/Advanced/subscriptions/skeleton.md ---
---
sidebar_label: 'Skeleton Code'
---
# Skeleton Code
'''
'''--- docs/Tutorials/Advanced/ticketing/analytics.md ---
---
sidebar_label: 'View Event Analytics'
---
# View Event Analytics
## Introduction
In this section you'll learn how to track your event's analytics, such as number of attendees that showed up, those that claimed POAPs and more! This can be broken down into two approaches:

1) Creating a script.  
2) Using existing BOS tools.  

The focus for now will be the script. The next tutorial section will showcase the existing BOS tools. 

Starting at the `keypom-docs-examples` directory, navigate to the `ticket-app-skeleton/others` folder and open the `event-analytics.js` file. 

```bash
cd advanced-tutorials/ticket-app-skeleton/others
```

There, you can see the following skeleton code in the file `event-analytics.js`.
``` js reference
https://github.com/keypom/keypom-docs-examples/blob/449992de80888934dcbccfadefd88601d9d6638d/advanced-tutorials/ticket-app-skeleton/others/event-analytics.js#L1-L31
```

---

## Connecting to NEAR
Connecting to the NEAR network is done with `NEAR-API-JS` and consists of:

* Selecting which network to connect to (testnet or mainnet).

* Specifying the location where the keys are stored for the drop funder's account. This location is commonly in the `~/.near-credentials` folder on your local machine.

```js reference
https://github.com/keypom/keypom-docs-examples/blob/449992de80888934dcbccfadefd88601d9d6638d/advanced-tutorials/ticket-app/others/event-analytics.js#L21-L38
```

---

## Getting Drop and Keys
Here, you want to make sure you get the proper drop that represents your event. To do this, you want to use the drop's `dropId`. In order to include the keys in the returned data, ensure that `withKeys` is true.

```js reference
https://github.com/keypom/keypom-docs-examples/blob/449992de80888934dcbccfadefd88601d9d6638d/advanced-tutorials/ticket-app/others/event-analytics.js#L42-L55
```
:::note
If you don't have your `dropId`, you can use a key from the drop as well. This is done by passing in either `publicKey` or `secretKey` into `getDropInformation`
:::

The total number of tickets can also be found by using the drop's `next_key_id`. This will be helpful to determine how many keys have been fully claimed

---

## Compiling Data
From the original [design of the ticket drop](architecture.md#keypom-solution), you know the following.

* The first key use indicates when an attendee is scanned into the event. 
* The second key use sends the attendee a POAP, after which the key is deleted

From this, you can derive the following about a key's [remaining uses](../../../keypom-sdk/Core/interfaces/ProtocolReturnedKeyInfo.md#remaining_uses).

* `remaining_uses == 2`: the ticket has not yet been scanned, hence the ticket holder did not attend. 
* `remaining_uses == 1`: the attendee was scanned in and thus attended

Notice how there is no case for when `remaining_uses` = 0. This is because when keys are fully used, they are deleted. This is when collecting the total number of keys above becomes helpful. The number of fully used keys can be found by subtracting the number of found keys from the total.

* `drop.next_key_id - keys.length` = number of fully used keys. 

All this can be put into the following code block.

```js reference
https://github.com/keypom/keypom-docs-examples/blob/449992de80888934dcbccfadefd88601d9d6638d/advanced-tutorials/ticket-app/others/event-analytics.js#L57-L73
```

---

## Conclusion
In this short bonus section, you saw how to get analytics for your events. This consisted of getting the keys from your drop and keeping track of the number of remaining uses for each key. 

In the following section, you'll see some pre-built BOS tooling for a no-code solution! 
'''
'''--- docs/Tutorials/Advanced/ticketing/architecture.md ---
---
sidebar_label: 'Solution Architecture'
---
# Solution Architecture
In this section, you'll break down the requirements of the ticketing system in order to better understand how to create a solution architecture. This means translating the features from the [ticketing introduction](introduction.md) into tangible goals for the specific Keypom drop and its configurations.

## Breaking Down the Problem
Recall from earlier, the following features are needed:

### No wallet is needed to enter 

With traditional events, you would need to burn an NFT in order to gain entry to the event. This model requires the attendee to have a valid wallet with enough $NEAR to cover transaction costs.

With a Keypom access key, all you need is the private key to gain entrance. This can be turned into a simple QR code that is scanned at the door to gain entrance.

### Each ticket is unique and cannot be passed-back 

In order to satisfy the requirement that each ticket must be unique and can only be scanned once, the key should be used to sign a simple transaction when it's scanned. This will prevent ticket pass-backs since the host can check the on-chain status of each key. If it's been used already, the host can deny entry.

When the host scans the QR code and signs the transaction using the key, it should simply modify some state on the contract reflecting that the key has been used. It shouldn't transfer $NEAR to anyone or create any accounts and should be a lightweight transaction on-chain.

By default, every key has a counter of how many uses it has left before being deleted. In the above scenario, you could create a key with 1 use and once it has been scanned, it will be deleted. If the same QR code would be given to multiple people, the host would realize that the key no longer exists and deny entry.

To make this transaction extremely lightweight, Keypom allows keys to have `null` function calls whose entire purpose is to decrement the key use counter to prove that the key has been used. These special types of function calls use up a very small amount of gas and are extremely cheap to execute.

### Attendees are not required to have wifi at the door.

If the ticket is just a private key in the form of a QR code, the attendee only needs to keep a screenshot or the webpage open on their phone to gain entry to the event. In addition, Apple users can add it to their Apple Wallets as well. This eliminates the need for everyone to have wifi as only the hosts that are scanning and making transactions need wifi to admit attendees.

### Attendees can setup a new NEAR wallet

Up until this point, tickets are single-use function calls that execute a `null` method on Keypom. In order for attendees to receive a NEAR wallet after the event for free, the key can be set with 2 uses instead of 1. The first is the `null` method and the second is pre-loaded with a small amount of $NEAR. This $NEAR will cover costs for account creation and sponsor their first couple transactions.

### NFT POAP available for attendees

In order to send the attendees a POAP, the second key use will need to not only contain a small amount of $NEAR but also mint an NFT to their new or existing NEAR wallet. This can be done by call a minting function on an existing NFT contract that will create an NFT and send it to the account.

### Attendance required for POAP

Currently, anyone with a ticket could manually claim the key (sign transactions) using the Keypom SDK. This means that people could first claim the `null` case and then claim the key again to receive the NFT without physically showing up.

To solve this, the first key use can be protected with a [password](../../../Concepts/KeypomProtocol/GithubReadme/password-protect.md) that only the host knows. This password will be provided when the QR code is scanned. By password protected the uses, the only way to receive the NFT even if you have the ticket, is to be physically scanned by the host.

## Keypom Solution

From above, the drop must have the following properties to function as intended:

* A [Function Call drop](../../../Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/fc-drops.md) must be used and configured so that each key has 2 uses.
* The first key use is password protected and `null` (for when the host scans attendees into the event). 
* The second key use will have a small amount of $NEAR to cover account creation costs and sponsor the first few transactions.
* The second key use will also call `nft_mint` on an NFT contract which will send the new or existing account a POAP.

:::tip
The first key use being `null` will allow for a lightweight transaction on-chain to reflect the key use decrement without needing to transfer any $NEAR to anyone or create any accounts.
:::

A flow chart of this process can be seen below.

<p align="center">
  <img src={require("/static/img/docs/advanced-tutorials/ticketing/ticketing.png").default} width="65%" height="65%" alt="ticketing"/>
</p>

---

## Conclusion
In this section, you learned the solutions that would help meet the required features outlined in the introduction. These included using an access key as a ticket to remove the need for attendees to have both a wallet and an internet connection at the door. You also saw how using a multi-use function call drop could allow you to add a Proof-of-Attendance NFT to gift attendees who show up to your event.

In the next section, you'll be taking the Keypom drop architecture you just created and using it to create the drop.

'''
'''--- docs/Tutorials/Advanced/ticketing/bos-tool.md ---
---
sidebar_label: '🚀 BOS Version'
---
# BOS Version
During the [ETHGlobal Waterloo Hackathon](https://ethglobal.com/showcase/keypom-x-bos-event-ticketing-pow2e), a chunk of this tutorial was ported over to BOS. This section is a quick guide on how to use it.

> If you run into any bugs or issues, don't hesitate to reach out to [Min on Telegram](https://t.me/minlu00)!

## Using the BOS Tool
The BOS version of the ticket app is located [here](https://near.org/mintlu.near/widget/kp-ticket-homepage). On this page, you can view your previous tickets, as well as create a new ticket drop. 

<p align="center">
    <img src={require("/static/img/docs/advanced-tutorials/ticketing/bos-homepage.png").default} width="80%" height="80%" alt="BOS ticketing" class="rounded-corners"/>
</p>

:::note
**All** your drops will appear in the viewer, not just the ticket drops. 
:::

### Creating Ticket Drops
This section of the tool allows you to create a standard ticket drop. These drops use the following structure:
- 2 Key uses
  - First is null and password protected. 
  - Second mints the POAP
- A customizable password and POAP. The POAP is minted as part of a series on `nft-v2.keypom.near`

<p align="center">
    <img src={require("/static/img/docs/advanced-tutorials/ticketing/bos-create.png").default} width="80%" height="80%" alt="create ticketing drop" class="rounded-corners"/>
</p>

When using the tool, there are a few tips to keep in mind: 
- **Save your POAP information before creating the drop**
  - This is **very** important, if you do not, the drop will be created without the POAP 😢
- The name of the event will automatically be hyphenated and lowercased
- When creating the drop, the password will not appear in the transaction information. This will populate after you press "Confirm"
<p align="center">
    <img src={require("/static/img/docs/advanced-tutorials/ticketing/bos-password-bad.png").default} width="40%" height="80%" alt="bad ticketing password" class="rounded-corners"/>
</p>

---

## Using the Scanner
To open the scanner on your own machine, you can clone the code from the [Keypom Docs Examples](https://github.com/keypom/keypom-docs-examples) repository and run the following command in the root folder `keypom-docs-examples/`:

``` bash
cd advanced-tutorials/ticket-app-mainnet && yarn && yarn start
```

This should bring you to the following page at `localhost:1234`

<p align="center">
    <img src={require("/static/img/docs/advanced-tutorials/ticketing/claim-0.png").default} width="80%" height="80%" alt="ticketing" class="rounded-corners"/>
</p>

From there, you can navigate to the following URL:
```
http://localhost:1234/v2.keypom.near/scanner
```

It will immediately prompt you for a password. This is the password you set in the [creating tickets section](#creating-ticket-drops). If you enter it incorrectly, you can refresh the page and re-enter the password. From there, you can begin presenting tickets and allowing people into your event! 

'''
'''--- docs/Tutorials/Advanced/ticketing/drop-test.md ---
---
sidebar_label: 'Testing the Drop'
---
# Testing the Drop

## Introduction
In the last section you designed and created a drop according to the specifications you learned about in the [Solution Architecture](architecture.md#keypom-solution).

In this tutorial, you'll create a generalized method that will determine whether or not to allow someone entry into the event. It will be used to both test the drop logic and power the core functionality of the ticketing app.

Starting at the `keypom-docs-examples` directory, navigate to `advanced-tutorials/ticket-app-skeleton/utils` folder and open the `allowEntry.js` file.

```bash
cd advanced-tutorials/ticket-app-skeleton/utils
```

This should show the following skeleton code.

``` js reference
https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/ticket-app-skeleton/utils/allowEntry.js#L1-L14
```

---

## Host Claiming Code

In order to test the drop logic, a utility function will be created to emulate the host scanning tickets at the door and will be used by the frontend.

The primary purpose of this function is to ingest a private key and password, and determine whether or not a ticket is valid. This means it will check for a few conditions before returning a success value. 

* The ticket is valid and has not been scanned yet.
* The password entered by the host was correct and the claim was successful

The `allowEntry` utility function takes in a private key, and a `basePassword`.

```js reference
https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/ticket-app/utils/allowEntry.js#L9-L49
```

## Testing Logic

Now that the utility function has been created, it can be used to test the drop logic. This will be done in a new file called `testTickDrop.js` that will live in the same util directory. It will contain two different test functions:

* `wrongPasswordCheck` - This will test the case where the wrong password is used to claim the ticket.
* `doubleClaimCheck` - This is meant to check for invalid tickets. In this case, it will try to claim the same ticket twice in a row.
  
```js reference
https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/ticket-app-skeleton/utils/testTickDrop.js#L1-L26
```

With both the drop created utility function defined, some code can be written to test the actual logic to ensure that the ticket claiming process works as expected. This will be broken down into phases, similar to the actual ticketing experience. 

### Wrong Password Check

The first phase of the ticketing experience can be labelled as `pre-entry`, when the attendee is looking to enter the event. Here, you want to ensure that only the host can allow them in, meaning the first key use must only be claimable with the correct password.

The following code can be used to test this logic, following the drop creation. 

```js reference
https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/ticket-app/utils/testTickDrop.js#L5-L30
```

It's expected that after claiming with the incorrect password, `allowEntry` will return `false` since the key use remains at 1. However, once the correct password is provided, the `allowEntry` function should return `true`. In the tests, an `assert` function is used to ensure the proper behavior.

### Preventing Multiple Entries

Once an attendee has been scanned into the event, they may try to give their ticket to someone else. To test and prevent this, `allowEntry` can be called multiple times on the same ticket. It is expected that the first call should return `true` but once it scans the same ticket again, `false` should be returned.

```js reference
https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/ticket-app/utils/testTickDrop.js#L32-L57
```

With the drop functionality tested, you can be confident in the logic behind the scenes and focus on the app behavior. 

---

## Full Code
Now that everything has been put together, the final code can be seen below.

<details>
<summary>Full Testing Code</summary>
<p>

```js reference
https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/ticket-app/utils/testTickDrop.js#L1-L75
```
</p>
</details>

---

## Running the Script
Here, you'll learn how to run the code that was just covered, and what to expect. It's assumed that you have already cloned the code from the [Keypom Docs Examples](https://github.com/keypom/keypom-docs-examples) repo.

:::caution
Prior to running these scripts, ensure you replace all instances of `minqi.testnet` with an account found in your `~/.near-credentials` folder
:::

To run the script, run the following command inside the `keypom-docs-examples/advanced-tutorials/ticket-app-skeleton` directory:

```bash
yarn test-ticket-drop
```

:::note
If you'd like to run the already completed code found in the `ticket-app` directory instead of the skeleton code, run the same `yarn test-ticket-drop` command but inside of the `keypom-docs-examples/advanced-tutorials/ticket-app` directory instead.
:::

This should return a successful test after outputting logs:

```bash
Password Test Responses:
Expected false, got: false
Expected true, got: true

Double Claim Test Responses:
Expected true, got: true
Expected false, got: false
```

<details>
<summary>Full Script Output</summary>
<p>

```bash
Retrying transaction v2.keypom.testnet:2JdTtqWLNqLUjBL9CYJ1qkdUtYpDLXydvnCfHiW3LG3S with new nonce.
Receipts: DL3AwUHW22wqEvJ24Soh39Zgsa8iQhyNNKsqzfUggDCn, Dt1yEoGZ36avyKqwF82GL54emJkfmUx2AM3fUtkhC1Vv
	Log [v2.keypom.testnet]: Current Block Timestamp: 1680294425065581261
	Log [v2.keypom.testnet]: 21 calls with 105000000000000 attached GAS. Pow outcome: 1.8602935. Required Allowance: 20248156910387200000000
	Log [v2.keypom.testnet]: Total required storage Yocto 16330000000000000000000
	Log [v2.keypom.testnet]: Current balance: 3.5921299,
            Required Deposit: 0.2578263,
            total_required_storage: 0.01633,
            Drop Fee: 0,
            Key Fee: 0 Total Key Fee: 0,
            allowance: 0.0404963 total allowance: 0.0404963,
            access key storage: 0.001 total access key storage: 0.001,
            deposits less none FCs: 0.1 total deposits: 0.1 lazy registration: false,
            deposits for FCs: 0.1 total deposits for FCs: 0.1,
            uses per key: 2
            None FCs: 1,
            length: 1
            GAS to attach: 100000000000000
	Log [v2.keypom.testnet]: New user balance 3.3343036
	Log [v2.keypom.testnet]: Fees collected 0
Retrying transaction nft-v2.keypom.testnet:2iHrE9ooY2N4kUn9eqsScAyNjXkRkUBiQdzxYsXwFawm with new nonce.
Receipts: 6jzxKRXmGjrtSKP9V38puWLZPcDHaVYRrohtj29rsMxR, FCmjrSPxuyKEXdghJAkrz8H8AH3GaCPnceoZKuHazmrN
	Log [v2.keypom.testnet]: Current Block Timestamp: 1680294427597789158
	Log [v2.keypom.testnet]: 21 calls with 105000000000000 attached GAS. Pow outcome: 1.8602935. Required Allowance: 20248156910387200000000
	Log [v2.keypom.testnet]: Total required storage Yocto 16330000000000000000000
	Log [v2.keypom.testnet]: Current balance: 3.6040689,
            Required Deposit: 0.2578263,
            total_required_storage: 0.01633,
            Drop Fee: 0,
            Key Fee: 0 Total Key Fee: 0,
            allowance: 0.0404963 total allowance: 0.0404963,
            access key storage: 0.001 total access key storage: 0.001,
            deposits less none FCs: 0.1 total deposits: 0.1 lazy registration: false,
            deposits for FCs: 0.1 total deposits for FCs: 0.1,
            uses per key: 2
            None FCs: 1,
            length: 1
            GAS to attach: 100000000000000
	Log [v2.keypom.testnet]: New user balance 3.3462426
	Log [v2.keypom.testnet]: Fees collected 0
Retrying transaction nft-v2.keypom.testnet:CysD3CnodxvarnxUpQKKWWV1x9uhjEkCbWosy1DuDo7D with new nonce.

    Ticket Links:

    http://localhost:1234/v2.keypom.testnet/3aJq6s8pNYFGbuUVG5fj7nJ9bpfKZD7iH4oak27yZnjQytcyCAFMioJEZrVJBf3itMgrs3gm8U1UszewfhXbfKUH

    Ticket Links:

    http://localhost:1234/v2.keypom.testnet/2KxZarBh9hWy7JZGDvsJhdzP8Q3JtCy7ocZ4hvohHKEsSNjxTx3LWd8EDpHNfD2du8MQVftCNJKRCp99At1qigQU

Claiming with wrong password...
Receipt: BHH2ENLdWLpYDQDD8SmgbAXzVFGi9odnGwhgHxg6ifCR
	Log [v2.keypom.testnet]: Beginning of process claim used gas: 479192976105 prepaid gas: 100000000000000
	Log [v2.keypom.testnet]: passed global check
	Log [v2.keypom.testnet]: hashed password: [97, 68, 238, 197, 167, 108, 73, 163, 74, 105, 140, 127, 22, 87, 3, 98, 76, 179, 110, 208, 118, 51, 58, 3, 88, 44, 22, 240, 45, 89, 85, 65]
	Log [v2.keypom.testnet]: actualPass password: [61, 214, 44, 95, 159, 234, 2, 185, 182, 48, 134, 31, 65, 88, 184, 51, 51, 13, 201, 173, 75, 158, 56, 59, 33, 46, 185, 178, 239, 3, 44, 94] cur use: 1
	Log [v2.keypom.testnet]: Incorrect password. Decrementing allowance by 1244250690277300000000. Used GAS: 2442506902773
	Log [v2.keypom.testnet]: Allowance is now 39252063130497100000000
	Log [v2.keypom.testnet]: Invalid claim. Returning.
Claim has failed, check password
claiming with correct password...
Receipt: 4gAycg2B1jVNoJtUT3snHWDA1Ffdkxt1oPu8vH1TwoSC
	Log [v2.keypom.testnet]: Beginning of process claim used gas: 479192976105 prepaid gas: 100000000000000
	Log [v2.keypom.testnet]: passed global check
	Log [v2.keypom.testnet]: hashed password: [61, 214, 44, 95, 159, 234, 2, 185, 182, 48, 134, 31, 65, 88, 184, 51, 51, 13, 201, 173, 75, 158, 56, 59, 33, 46, 185, 178, 239, 3, 44, 94]
	Log [v2.keypom.testnet]: actualPass password: [61, 214, 44, 95, 159, 234, 2, 185, 182, 48, 134, 31, 65, 88, 184, 51, 51, 13, 201, 173, 75, 158, 56, 59, 33, 46, 185, 178, 239, 3, 44, 94] cur use: 1
	Log [v2.keypom.testnet]: passed local check
	Log [v2.keypom.testnet]: Key usage last used: 0 Num uses: 2 (before)
	Log [v2.keypom.testnet]: Key has 1 uses left. Decrementing allowance by 10000000000000000000000. Allowance left: 29252063130497100000000
	Log [v2.keypom.testnet]: Total storage freed: 0. Initial storage: 33083530. Final storage: 33083530
	Log [v2.keypom.testnet]: Empty function call. Returning.
Receipts: D2TGQDXYR4um28CgTt8Z1aU1LMSABMChW9MZJPfVBcpd, 7FKbgHx6eFnfMM15B1Tw7U8wpeQe2WKwYUQG7Hbqe69L
	Log [v2.keypom.testnet]: Current Block Timestamp: 1680294442058016014
	Log [v2.keypom.testnet]: 21 calls with 105000000000000 attached GAS. Pow outcome: 1.8602935. Required Allowance: 20248156910387200000000
	Log [v2.keypom.testnet]: Total required storage Yocto 16330000000000000000000
	Log [v2.keypom.testnet]: Current balance: 3.6160078,
            Required Deposit: 0.2578263,
            total_required_storage: 0.01633,
            Drop Fee: 0,
            Key Fee: 0 Total Key Fee: 0,
            allowance: 0.0404963 total allowance: 0.0404963,
            access key storage: 0.001 total access key storage: 0.001,
            deposits less none FCs: 0.1 total deposits: 0.1 lazy registration: false,
            deposits for FCs: 0.1 total deposits for FCs: 0.1,
            uses per key: 2
            None FCs: 1,
            length: 1
            GAS to attach: 100000000000000
	Log [v2.keypom.testnet]: New user balance 3.3581815
	Log [v2.keypom.testnet]: Fees collected 0

    Ticket Links:

    http://localhost:1234/v2.keypom.testnet/2LNJU2adYHgvyuczoNFkvdL92vuunNCESaZiWYh6cQJXcwVSJpHqgQpGVUHsEDDee2oQrSELAkRGPeYroW6hoPaN

Claiming with correct password...
Receipt: G7y6MWapxNwCCmCPAQ6iRWdvT292dq8hWp8ZQAnTbXwQ
	Log [v2.keypom.testnet]: Beginning of process claim used gas: 479192976105 prepaid gas: 100000000000000
	Log [v2.keypom.testnet]: passed global check
	Log [v2.keypom.testnet]: hashed password: [105, 193, 27, 134, 73, 227, 30, 80, 12, 73, 201, 126, 217, 0, 80, 239, 38, 5, 216, 62, 44, 177, 19, 137, 73, 50, 159, 32, 38, 11, 59, 94]
	Log [v2.keypom.testnet]: actualPass password: [105, 193, 27, 134, 73, 227, 30, 80, 12, 73, 201, 126, 217, 0, 80, 239, 38, 5, 216, 62, 44, 177, 19, 137, 73, 50, 159, 32, 38, 11, 59, 94] cur use: 1
	Log [v2.keypom.testnet]: passed local check
	Log [v2.keypom.testnet]: Key usage last used: 0 Num uses: 2 (before)
	Log [v2.keypom.testnet]: Key has 1 uses left. Decrementing allowance by 10000000000000000000000. Allowance left: 30496313820774400000000
	Log [v2.keypom.testnet]: Total storage freed: 0. Initial storage: 33085324. Final storage: 33085324
	Log [v2.keypom.testnet]: Empty function call. Returning.
claiming the same key twice...
Key has already been scanned. Admission denied

        Password Test Responses:
        Expected false, got: false
        Expected true, got: true

        Double Claim Test Responses:
        Expected true, got: true
        Expected false, got: false

✨  Done in 26.50s.
```

</p>
</details>

---

## Conclusion

So far, you've learned how to set up your React app, as well as break down the ticketing system into functional requirements. You then took those requirements and wrote a script to create the drop.

In the next tutorial, the ticketing process will be broken down into stages for both the user side and event organizer side. From there, the flow of the app, and the Keypom variables that control it, can be established.

'''
'''--- docs/Tutorials/Advanced/ticketing/drop.md ---
---
sidebar_label: 'Creating the Drop'
---
# Creating the Drop

## Introduction
In this section you'll take the first step to creating the ticketing experience by designing the drop. This drop will be tailored according to the functionality and specifications found in the [Solution Architecture](architecture.md#keypom-solution).

Recall that the drop needs the following properties:

* A [Function Call drop](../../../Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/fc-drops.md) must be used and configured so that each key has 2 uses.
* The first key use is password protected and `null` (for when the host scans attendees into the event). 
* The second key use will have a small amount of $NEAR to cover account creation costs and sponsor the first few transactions.
* The second key use will also call `nft_mint` on an NFT contract which will send the new or existing account a POAP.

:::tip
The first key use being `null` will allow for a lightweight transaction on-chain to reflect the key use decrement without needing to transfer any $NEAR to anyone or create any accounts.
:::

With this in mind, the aim of this tutorial will be to write a node script that will create the drop matching the above properties. This process can be broken down into three stages:

1) Connect to the NEAR blockchain.  
2) Create the drop with function call data.  
3) Create the NFT collection for the post attendance gift.

Starting at the `keypom-docs-examples` directory, navigate to the `ticket-app-skeleton/utils` folder and open the `createTickDrop.js` file. 

```bash
cd advanced-tutorials/ticket-app-skeleton/utils
```

There, you can see the following skeleton code in the file `createTickDrop.js`.
``` js reference
https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/ticket-app-skeleton/utils/createTickDrop.js#L1-L33
```

---

## Connecting to NEAR
In this section, you'll be addressing the first step which is connecting to the NEAR network. 

This is done with `NEAR-API-JS` and consists of:

* Selecting which network to connect to (testnet or mainnet).

* Specifying the location where the keys are stored for the drop funder's account. This location is commonly in the `~/.near-credentials` folder on your local machine.

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8b8e8bbf5fd89d8447e1b6b4533da3bb8673690c/advanced-tutorials/ticket-app/utils/createTickDrop.js#L22-L38
```

---

## Creating the Drop
In this section, you'll create the function call drop to meet the functional requirements defined earlier.

### Function Call Drop Basics

#### Initializing the SDK

This process starts with calling the `initKeypom` function and will always be the first function you call to interact with the Keypom SDK. 

`initKeypom` initializes the SDK to allow for interactions with the Keypom smart contracts. Without it, none of the other SDK functions would work as expected.

After `initKeypom` is called, the FC Drop can be created by calling `createDrop` and adding an `fcData` parameter.

```js
// Change this to your account ID
const FUNDER_ACCOUNT_ID = "minqi.testnet";
const NETWORK_ID = "testnet"
async function createTickDrop() {
  // Initiate connection to the NEAR blockchain.
  const CREDENTIALS_DIR = ".near-credentials";
  const credentialsPath =  path.join(homedir, CREDENTIALS_DIR);
  ...
  ...
  let near = new Near(nearConfig);
  const fundingAccount = new Account(near.connection, FUNDER_ACCOUNT_ID)

  await initKeypom({
      near,
      network: NETWORK_ID
  });
}
```

#### Defining the Function Call Data

One the SDK has been initialized and the NEAR connection established, it's time to create the function call drop. This is done by passing in `fcData` into create drop. It is an object that defines the methods that will be called for any given key use:

```bash
fcData
└── methods
```

For multi-use keys, each specific use can have a different set of methods that will be called. These methods are executed one by one. As an example, a key with 3 uses can be seen:

1. `nft_mint`
2. `null`
3. `create_account_advanced` -> `setup` -> `nft_mint` 

The first time the key is used, an NFT will be minted. The second use will simply advance the key with nothing called. The third time the key is used, it will first call `create_account_advanced` followed by the `setup` method and then finally `nft_mint` all in the same transaction.

This is represented with a 2D array, where the inner array is the set of methods per key use. The above example would be represented as:

```js
methods: [
  [
    "nft_mint"
  ], 
  null, 
  [
    "create_account_advanced", 
    "setup", 
    "nft_mint"
  ]
]
```

In reality, each method is not simply a string as shown above. The methods require the following parameters:

- `receiverId`: The contract receiving the function call.  
- `methodName`: The function to be called on the receiver contract.  
- `args`: A stringified JSON object of all the arguments to be passed into `methodName`.  
- `attachedDeposit`: The yoctoNear deposit attached to the function call when the key is used.  

For more information on the `methods` parameter, please see the [TypeDocs](../../../keypom-sdk/Core/interfaces/Method.md)

In summary, the `fcData` should look something like this, with a generic method for the POAP which you'll explore in the next section:

```js
fcData: {
    methods: [
        null,
        [
            {
                receiverId: SOME_NFT_CONTRACT,
                methodName: "nft_mint",
                args: SOME_ARGS,
                attachedDeposit: SOME_DEPOSIT
            }
        ],
    ]   
}  
```

#### POAP

Now that the basics for creating an FC drop have been covered, it's time to define what the second key use method data should look like.

Each NFT that is given out to participants will share the same artwork, title, description etc. They will be part of the same series and the only thing that differs between them is their unique ID. For a full tutorial about the series contract, see NEAR's [NFT tutorial.](https://docs.near.org/tutorials/nfts/series#nft-collections-and-series)

To mint these NFTs, there is a contract deployed to `nft-v2.keypom.testnet`. When creating an FC drop, it is important to understand the interface of the receiver contract. In this case, the mint function has the following parameters:

```rust
pub fn nft_mint(
  &mut self, 
  mint_id: U64, 
  receiver_id: AccountId
)
```
Here, the `mint_id` is needed to identify and tell the NFT contract which series an NFT should belong to. The `receiver_id` field is needed to identify which account should receive the minted NFT.

The `mint_id` field should be set as the drop's `dropId` and the `receiver_id` should be the attendee's NEAR `accountId`. At first glance, this might seem impossible because you don't know the attendee's accounts ahead of time. To solve this, you can use what's known as Keypom Arguments which are important pieces of information that can be passed into specified fields when a key is used.

The following optional Keypom arguments are exposed for each individual method in the `fcData` alongside the required receiverId, methodName, attachedDeposit etc. 

They tell Keypom where to inject certain parameters for each function call.

- [`accountIdField`](../../../keypom-sdk/Core/interfaces/Method.md#accountidfield): The name of the account that is claiming the linkdrop.
- [`dropIdField`](../../../keypom-sdk/Core/interfaces/Method.md#dropidfield): The [`dropId`](../../../keypom-sdk/Core/interfaces/Drop.md#dropid) of the drop that the claim is being called on. 
- [`keyIdField`](../../../keypom-sdk/Core/interfaces/Method.md#keyidfield) The unique identifier, [`keyId`](../../../keypom-sdk/Core/interfaces/KeyInfo.md#keyid), of the key that is being used to claim.
- [`funderIdField`](../../../keypom-sdk/Core/interfaces/Method.md#funderidfield) the `accountId` of the person funding the drop.

In this case, the `dropIdField` should be set to `mint_id`  and `accountIdField` set to `receiver_id`. This will result in the drop's ID being passed into the parameter `mint_id` and attendee's NEAR account passed into the `receiver_id` field.

In summary, the final `fcData` should look as follows.

```js
fcData: {
    methods: [
        null,
        [
            {
                receiverId: `nft-v2.keypom.testnet`,
                methodName: "nft_mint",
                args: "",
                dropIdField: "mint_id",
                accountIdField: "receiver_id",
                attachedDeposit: parseNearAmount("0.1")
            }
        ],
    ]   
}
```
:::note
If you wish to use a different NFT contract for your POAP, ensure you know the contract's interface and tailor the `methods` arguments accordingly.
:::

#### Password Protected Keys

To ensure each key has two uses with a password protected first use, the following `config`, `basePassword` and `passwordProtectedUses` can be added to `createDrop`.

```js
await createDrop(
  // 2 Uses per key
  config: {
      usesPerKey: 2
  },
  // Create base password and ensure only first key use is password protected
  basePassword: "event-password",
  passwordProtectedUses: [1],
  fcData: {
    ...
  }
)
```
As the drop creator, you have the option of creating a password and applying it to the keys in your drop. This password is unique for each key use and comprises of a master password, the drop ID and the use (1st, 2nd, 3rd etc.)

This behavior can be applied by providing the core component, a `basePassword`, into the `createDrop` arguments. In the ticketing case, only the first use should be protected which can be achieved by passing `[1]` into the `passwordProtectedUses` parameter.

Once a key has been password protected, you must pass in `hash(basePassword + publicKey + current_key_use)` in order to successfully claim it.

With this model, if the host were to simply know the `basePassword`, it could deterministically generate this hash for any given ticket link. Furthermore, if the host was the only person who knew the password, nobody could claim the key without going through them first.

For an in-depth explanation around password protected keys, see the [Typedocs](../../../keypom-sdk/Core/modules.md#createdrop).

### Final Drop Structure

Putting it all together, the final drop structure should look something like this:

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8b8e8bbf5fd89d8447e1b6b4533da3bb8673690c/advanced-tutorials/ticket-app/utils/createTickDrop.js#L42-L73
```

---

## Making NFT Series

Up until now, the drop is pointing to an NFT series that doesn't exist yet. If a key were to be claimed, the function call would throw an error. In this section, you'll be creating the series of NFTs to be used as POAPs.

The Keypom SDK provides a function to create an NFT series specifically for function call drops, called [`createNFTSeries`](../../../keypom-sdk/Core/modules.md#createnftseries). It requires the following parameters: 

- `dropId`: The drop ID for the drop that should have the NFT series associated with it.  
- `metadata`: The metadata that all minted NFTs will have. 

`metadata` is an object with these properties:
* `title`: The title for the NFTs in the series.
* `description`: Description for all NFTs in the series.
* `media`: link to the artwork in the form of an IPFS CID.
* `copies`: Number of NFTs in the series.

The code for creating the series is shown below. 

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8b8e8bbf5fd89d8447e1b6b4533da3bb8673690c/advanced-tutorials/ticket-app/utils/createTickDrop.js#L75-L84
```

Once both the series and drop are created, the key can be used to mint on-demand POAPs to wallets.

---

## Adding More Than 50 Tickets
Due to gas restriction, `createDrop` is limited to 50 password protected keys (tickets). Rather than create multiple drops for the same event, you can simply add more keys to a single drop. This allows you to track your event metrics using a single `dropId`.

To do this, you can use the following code:

```js
// Loop to add 200 keys
let numKeys = 200
let keysAdded = 0;
let allSecretKeys = [];
while (keysAdded < numKeys) {
    const keysToAdd = Math.min(50, numKeys - keysAdded);
    const {secretKeys, publicKeys} = await generateKeys({
        numKeys: keysToAdd,
    });
    await addKeys({
        account: fundingAccount,
        dropId,
        publicKeys
    });
    keysAdded += keysToAdd;
    allSecretKeys = allSecretKeys.concat(secretKeys);
}
```

For more, see [this example](../../../Cookbook/drops/NEAR.md#creating-a-large-drop) or 

---

## Creating Ticket Links
The last step in this process is to create the links themselves so that you can easily distribute the tickets to people. You can control the format of the URL, for now `localhost:1234` will be used.

You can utilize the `formatLinkdropUrl` function for convenience. It can take a custom URL that contains `CONTRACT_ID` and `SECRET_KEY` and it will replace them with the contract ID and secret keys passed in.

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8b8e8bbf5fd89d8447e1b6b4533da3bb8673690c/advanced-tutorials/ticket-app/utils/createTickDrop.js#L86-L91
```

---

## Final Code

Putting everything together, the final code for the drop should be:

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8b8e8bbf5fd89d8447e1b6b4533da3bb8673690c/advanced-tutorials/ticket-app/utils/createTickDrop.js#L1-L107
```

## Conclusion

So far, you've broken down the ticketing system into functional requirements and used them to write a script to create the drop.

In the next tutorial, you'll be testing the drop you just created, starting with creating a script to emulate the host scanning a ticket. 

'''
'''--- docs/Tutorials/Advanced/ticketing/final.md ---
---
sidebar_label: 'Final Product'
---
# Final Product
Welcome to the last section of this ticketing app tutorial! Here, you'll be seeing the full app in action! 

:::note
To run this app on your local machine, you will need a computer with working camera.
:::

## Getting Started
To follow along with the app on your own machine, you can clone the code from the [Keypom Docs Examples](https://github.com/keypom/keypom-docs-examples) repository and run the following command in the root folder `keypom-docs-examples/`:

``` bash
cd advanced-tutorials/ticket-app-skeleton && yarn && yarn start
```

:::note
If you'd like to run the already completed code found in the `ticket-app` directory instead of the skeleton code, run:

``` bash
cd advanced-tutorials/ticket-app && yarn && yarn start
```
:::

This should bring you to the following page at `localhost:1234`

<p align="center">
    <img src={require("/static/img/docs/advanced-tutorials/ticketing/claim-0.png").default} width="80%" height="80%" alt="ticketing" class="rounded-corners"/>
</p>

---

## Starting the Claim and Scanner Pages

To begin the app, first you'll need to run the create drop script:

```bash
yarn create-ticket-drop
```

This will return a link:

```bash
Ticket Links:

http://localhost:1234/v2.keypom.testnet/3pGPvPGiXUiMfW6TME1EPWGWHzx1FrLSLgu68UADpyjg6c9DPix1v2bxUWuY5K7ChWE5G5BNszMNTPmecTz7C15w
```

This should bring you to the following page. Feel free to take a picture of your QR code with another device, you will need to hold this QR code up to your computer's camera later.

<p align="center">
    <img src={require("/static/img/docs/advanced-tutorials/ticketing/claim-1.png").default} width="80%" height="80%" alt="ticketing" class="rounded-corners"/>
</p>

From there, you can duplicate this window and modify the URL to be:
```
http://localhost:1234/v2.keypom.testnet/scanner
```
It will immediately prompt you for a password. By default, the `createTickDrop` script you ran earlier has a password set to `event-password` but for now enter an incorrect password:
```
wrong-password
``` 

Once you enter this password, the scanner should appear, shown below. 
 
 <p align="center">
    <img src={require("/static/img/docs/advanced-tutorials/ticketing/scan-unread.png").default} width="50%" height="50%" alt="ticketing" class="rounded-corners"/>
</p>

---

## Scanning and Claiming
### Incorrect Password Claim

Now, you can begin testing the scanner by holding the photo of the QR code up to the camera of your computer. Ensure it has a clear unobstructed view of the code. Once the data is read in, the scanner's frame should change to yellow as it tries to claim.

<p align="center">
    <img src={require("/static/img/docs/advanced-tutorials/ticketing/scan-claiming.png").default} width="50%" height="50%" alt="ticketing" class="rounded-corners"/>
</p>

This should promptly return a failed claim, shown below.

<p align="center">
    <img src={require("/static/img/docs/advanced-tutorials/ticketing/scan-claim-bad.png").default} width="50%" height="50%" alt="ticketing" class="rounded-corners"/>
</p>

If you right click and inspect the page and go to the console, you should see the following error indicating an incorrect password.

<p align="center">
    <img src={require("/static/img/docs/advanced-tutorials/ticketing/claim-error.png").default} width="80%" height="80%" alt="ticketing" class="rounded-corners"/>
</p>

### Correct Password Claim
To enter the correct password, simply refresh the scanner page. This should prompt you for the password again. You can now enter the correct password for your private key. By default, the `createTickDrop` script you ran earlier has a password of `event-password`.

```
event-password
```

Once the correct password has been entered, you can repeat the same steps as before and try to claim your ticket by holding the QR code up to the scanner. This time around after the yellow claiming frame, you will see the following successful claim page. 

<p align="center">
    <img src={require("/static/img/docs/advanced-tutorials/ticketing/scan-claim-good.png").default} width="50%" height="50%" alt="ticketing" class="rounded-corners"/>
</p>

### Double Scanning
Now that the ticket has been successfully scanned and claimed, you can try to double scan the ticket. Recall that, if the second scan succeeds the attendee loses the opportunity to claim their POAP. 

Same as before, hold up the QR code up to your computer camera. Once the scanner reads the data and tries to claim, you should see this resultant page.

<p align="center">
    <img src={require("/static/img/docs/advanced-tutorials/ticketing/scan-claim-bad.png").default} width="50%" height="50%" alt="ticketing" class="rounded-corners"/>
</p>

---
 
## Claiming POAP
Now, after the ticket has been claimed **once**, if you go back and refresh your ticket page the QR code should now disappear and in its place is a button to claim your POAP.

<p align="center">
    <img src={require("/static/img/docs/advanced-tutorials/ticketing/claim-2.png").default} width="80%" height="80%" alt="ticketing" class="rounded-corners"/>
</p>

Clicking this should bring you to a MyNearWallet claim page. Once you claim, either to a new or existing NEAR account, you should be able to see our mascot, Moon, as an NFT in your collectibles tab!

<p align="center">
    <img src={require("/static/img/docs/advanced-tutorials/ticketing/claim-nft.png").default} width="80%" height="80%" alt="ticketing" class="rounded-corners"/>
</p>

---
 
## Claiming Deleted Keys
Now that you've claimed the POAP, the private key is now deleted. If you go back to the ticket page and refresh it again, you should see the following page; indicating your key is depleted. 

<p align="center">
    <img src={require("/static/img/docs/advanced-tutorials/ticketing/claim-3.png").default} width="80%" height="80%" alt="ticketing" class="rounded-corners"/>
</p>

If you try to holding up the screenshot of your QR code up to the QR reader, you will be greeted with the following failed claim page.

<p align="center">
    <img src={require("/static/img/docs/advanced-tutorials/ticketing/scan-claim-bad.png").default} width="50%" height="50%" alt="ticketing" class="rounded-corners"/>
</p>

---

## Conclusion
In this tutorial, you learned how you can use Keypom to create a seamless and powerful ticketing experience. You started from a few simple goals, translated those to tangible customizations to make to your Keypom function call drop, and then built a React app around the drop leveraging Keypom values to make it all run. 

In the next advanced tutorial, you will learn how you can auto-register people into a DAO with a simple link.
'''
'''--- docs/Tutorials/Advanced/ticketing/introduction.md ---
---
sidebar_label: 'Introduction'
---
# Introduction
In this tutorial, you'll learn how to create a seamless ticketing experience that is cheaper than alternative methods and can also handle very large audiences.
## Background
The most popular ticketing solutions in Web3 utilize NFT technologies. This approach, however, requires attendees to own a crypto wallet and sign transactions. This is a massive barrier to entry, particularly for users that are new to Web3. 

Keypom aims to solve these problems by empowering you to create a seamless ticketing system that has the following features.

* Users are not required to have a wallet to enter the event.
* Each ticket is unique and can only be used by one person.
* Attendees are not required to have wifi to gain entry to the event.
* Attendees that did not have a NEAR wallet can get one for free.
* Attendees can choose to receive an NFT proving their attendance at the event. This is commonly known as a [POAP](https://academy.binance.com/en/glossary/proof-of-attendance-protocol-poap). 
* The post-attendance gifts can **only** be given to people that physically showed up to the event. You can't receive the NFT if you didn't show up.

These features open the door to an entirely new class of non-technical attendees and create a smoother experience compared to existing NFT ticketing solutions.

In this tutorial, you'll be creating a ticketing system with those features, and incorporating a POAP to further reward your community members that come out to your events. 

:::info note
The NFT POAP is optional to include as the event organizer. You can choose to keep it, or replace it with a different attendance gift such as Fungible Tokens.
:::

---

## Prerequisites

For the this tutorial, you can choose to run the scripts on your own machine. To do so, you must have the following:

1. [Node JS](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  
2. [NEAR-API-JS](https://docs.near.org/tools/near-api-js/quick-reference#install)  
3. [Keypom JS SDK](https://github.com/keypom/keypom-js#getting-started)

If you want to reference the finished code, that can be found [here](https://github.com/keypom/keypom-js/tree/min/ticketing-tutorial/docs-advanced-tutorials/ticket-app). To follow along and build out this ticketing app, see the steps below. 

---

## Creating your Project
In this section, you'll prepare to create the ticketing app using the skeleton code made available to you at the [Keypom Docs Examples](https://github.com/keypom/keypom-docs-examples) repo. 

First, you'll want to clone the repo:

```bash
git clone https://github.com/keypom/keypom-docs-examples.git && cd keypom-docs-examples
```

Second, install all dependencies for the ticketing app skeleton code using the following:

```
yarn ticketing:init-skeleton && cd advanced-tutorials/ticket-app-skeleton
```

:::note
To install all dependencies for the completed ticketing app, run the following:
```
yarn ticketing:init-complete && cd advanced-tutorials/ticket-app
```
:::

At this point, all the dependencies should be installed and you should be in the `advanced-tutorials/ticket-app-skeleton` folder. Here you'll find the following files required to build out your app.

```bash
/ticket-app-skeleton
└── components
│    └── scanner.js
│    └── qrcode.js
└── state
│    └── App.js
│    └── keyInfo.js
└── utils
│    └── allowEntry.js
│    └── createTickDrop.js
│    └── testTickDrop.js
└── package.json
```

With this setup complete, you are ready to begin building out the ticket app, starting by breaking down the problem into its functional requirements. 

'''
'''--- docs/Tutorials/Advanced/ticketing/react-outline.md ---
---
sidebar_label: 'App Design'
---
# App Design

## Introduction
In the previous sections, you've created the foundation for the ticketing system by breaking it down to its functional requirements and designing a drop accordingly. Here, you'll be learning the flow and design of the React app, to create a seamless ticketing experience for *both* the organizers and the attendees.

With this tutorial, a React app with separate scanner and claim pages will be created. Although the attendees can access the scanner, it will be useless to them unless they know the drop password. 

---

## Attendee Ticket Page Flow
This page is for the attendees and will only consist of 3 stages.

<p align="center">
  <img src={require("/static/img/docs/advanced-tutorials/ticketing/ticket-pink.png").default} width="100%" height="100%" alt="ticketing" class="rounded-corners"/>
</p>

* **Stage 1, Pre-entry:** Page showing a unique QR code, corresponding to the private key from their ticket.  
* **Stage 2, Post-entry:** After the QR code has been scanned by the host, the user can choose to onboard to NEAR and receive a POAP.  
* **Stage 3, Post-gift:** If the user chooses to claim their POAP, the third stage will show a page of **your** choice. You can choose to leave it empty or customize it with additional resources or a redirect to your own website.

To trigger a transition from Pre-entry to Post-entry and Post-entry and Post-gift, the following events must occur:
1. **Pre-entry &rarr; Post-entry**: The host must scan the QR code and call `allowEntry` with the event password and private key.
2. **Post-entry &rarr; Post-gift**: The user chooses to `claim` their POAP. Once that `claim` is complete and the POAP is in their wallet, the page will transition to post-gift.

---

## Host Scanner Page Flow

The scanner page is for the host and consists of 3 stages that repeat in a loop.

<p align="center">
  <img src={require("/static/img/docs/advanced-tutorials/ticketing/scanner-pink.png").default} width="80%" height="80%" alt="ticketing" class="rounded-corners"/>
</p>

The event password will only be prompted once on app mount. If the host wishes to enter a different password once scanning starts, they can simply refresh the page and be prompted again. 

* **Stage 1, Pre-claim:** A page with the camera viewport open, constantly scanning for QR codes.  
* **Stage 2, Claiming:** Once a QR code is detected and information is scanned in, the app attempts to derive the private key from the QR code and calls `allowEntry` using the event password. During this time, the app will indicate it is in the process of claiming.
* **Stage 3, Post-claim:** After the claim is processed, the page will indicate whether or not to admit the attendee depending on the return value of `allowEntry`.

After post-claim, the entire cycle will loop back to pre-claim after three seconds. This time interval was set so the host could read any error messages that may appear. You can modify this time by changing the values passed into `timeout()`.

---

## Keypom Information

There are a few key pieces of information needed from Keypom in order to allow the pages to perform as expected.

### Claim Page
The major parameter that controls what React will render is `cur_key_use` for the given private key. This value represents the key's current use number (1st use, 2nd use etc.) and will be stored in a React state variable called `curUse`. 

**Pre-entry &rarr; Post-entry:** To change between these two stages, the key's current use must be changed from 1 to 2. This is done when the QR code is scanned by the host.  

**Post-entry &rarr; Post-gift:** To change between these two stages, the key must be deleted and fully claimed. This happens when they claim the post attendance gifts.  

The following variables are needed to allow these state changes: 

* `curUse`, obtained from accessing the `cur_key_use` from calling [`getKeyInformation`](../../../keypom-sdk/Core/modules.md#getkeyinformation) with `pubKey`.
* `pubKey`, derived from `privKey` using the SDK's [`getPubFromSecret`](../../../keypom-sdk/Core/modules.md#getpubfromsecret) method.
* `privKey`, stored in the user's app link.

### Scanner Page
As the scanner page exclusively scans QR codes and admits people using the `allowEntry` utility function, the app itself does not store any Keypom parameters apart from the event password, which the host will manually enter on app mount.

The scanner app obtains the `privKey` by scanning the QR code and parsing the obtained string. It then calls `allowEntry` and passes in the event password and the `privKey`.

The following list of variables are used in the scanner app:
* `privKey`, read in from the QR code.
* `password`, set by the host on app mount.

---

## Conclusion
In this section, you broke down the app's flow of logic for both the user claim page, and the scanner page. You then took that information and found Keypom information that can be used to facilitate that flow. 

In the following sections, you'll be applying what you just learned by going through the actual code for the claim and scanner pages. 

'''
'''--- docs/Tutorials/Advanced/ticketing/scanner-code.md ---
---
sidebar_label: 'Scanner Code'
---
# Scanner Code

## Introduction
In the previous sections, you designed the structure and components needed to meet the requirements of the ticket app and saw the code to create the user claim page. Building on that, this tutorial will guide you through the code to create the scanner app for your seamless ticketing system.

:::note
The focus of this section will be on the Keypom aspects of each script, such as getting key information and using it. 

The full code for each script will be shown, with highlights. For React resources, see [here](https://reactjs.org/docs/hello-world.html) as a starting point.
:::

Recall, from the [introduction](introduction.md) that your code had the following outline.

```bash
/ticket-app-skeleton
└── components
│    └── scanner.js
│    └── qrcode.js
└── state
│    └── App.js
│    └── keyInfo.js
└── utils
│    └── allowEntry.js
│    └── createTickDrop.js
│    └── testTickDrop.js
└── package.json
```

This tutorial will be covering the code in `scanner.js`.

---

## Scanner App - `Scanner.js`
### Breaking Down the Problem
As a brief reminder, the host scanner page will have the following stages, best outlined with the diagram below.

<p align="center">
  <img src={require("/static/img/docs/advanced-tutorials/ticketing/scanner-pink-rounded.png").default} width="80%" height="80%" alt="ticketing" class="rounded-corners"/>
</p>

* **Stage 1, Pre-claim:** A page with the camera viewport open, constantly scanning for QR codes.  
* **Stage 2, Claiming:** Once a QR code is detected and information is scanned in, the app attempts to derive the private key from the QR code and calls `allowEntry` using the event password. During this time, the app will indicate it is in the process of claiming.
* **Stage 3, Post-claim:** After the claim is processed, the page will indicate whether or not to admit the attendee depending on the return value of `allowEntry`.

After post-claim, the entire cycle will loop back to pre-claim after three seconds. This time interval was set so the host could read any error messages that may appear. You can modify this time by changing the values passed into `timeout()`.

In post-claim, a `allowEntry` might have returned false for a few reasons. 
* Incorrect password/key
* A ticket may already be fully claimed and not exist when the host attempts to claim it.
* The ticket has already been scanned by the host. This means the key's current use is 2.

### `masterStatus` State Variable
In order to track all these stages and possible outcomes, a set of enums will be defined.

```js reference
https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/ticket-app/components/scanner.js#L10-L22
```

All these stages will be stored in a `masterStatus` state variable object.

|**`masterStatus.stage`**| **Description**                                                                         |
|------------------------|-----------------------------------------------------------------------------------------|
| `Stages.preClaim`      | *Pre-claim:* Host scanner page is scanning, waiting to read in data                     |
| `Stages.claiming`      | *Claiming:* Data has been read, scanner is trying to claim                              |
| `Stages.sucessClaim`   | *Post-claim:* Successful claim (`true` returned from `allowEntry`)                                                        | 
| `Stages.failClaim`     | *Post-claim:* Failed to claim (`false` returned from `allowEntry`)  | 
| `default`              | *Unknow State:* Display error message                                                   | 

| **`masterStatus.data`** | **Description**                                   |
|-------------------------|---------------------------------------------------|
| `Data.empty`            | No data has been read, cannot call `claim`        |
| `Data.captured`         | Data has been read, scanner can now try to claim  |

### Initialization and Scanning
Upon app mount, the host scanner page will immediately do the following.  
 
1) Prompt the host for the base password.  
2) Begin scanning.

These features can be seen in the code snippet below. 
```js reference
https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/ticket-app/components/scanner.js#L9-L53
```

### Claiming
The claiming process can be controlled using a React `useEffect` hook, that runs every time the data status, `masterStatus.data`, is updated, indicating that data was read by the scanner. 

The primary task of the claim process is to determine if a claim is:

* Successful - `masterStatus.stage == Stages.successClaim` 
* Unsuccessful - `masterStatus.stage == Stages.failClaim` 

This is accomplished using the `allowEntry` function that you created earlier. If it returns `true`, the master status stage should be set to `Stages.successClaim`. Otherwise, it should be set to `Stages.failClaim`.

```js reference
https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/ticket-app/components/scanner.js#L55-L92
```

### Rendering

The rendering part of the scanner app is relatively simple, as all the logic for states was taken care of during the claim process. The following table outlines what the page should render based on the value of `masterStatus.stage`, as outlined [above](scanner-code.md#masterstatus-state-variable). 

The focus of the renders is on the scanner frame (coloured square) and the text below it. The QR code visible is a code on a phone screen held up to the camera.

|    **Condition and Description**                                                                               | **Render**                                                                                                                                                                               |
|----------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `masterStatus.stage` == `Stages.preClaim`, *Pre-claim:* Host scanner page is scanning, waiting to read in data | <p align="center"> <img src={require("/static/img/docs/advanced-tutorials/ticketing/scan-unread.png").default} width="60%" height="60%" alt="ticketing" class="rounded-corners"/></p>    |
| `masterStatus.stage` == `Stages.claiming`, *Claiming:* Data has been read, scanner is trying to claim          | <p align="center"> <img src={require("/static/img/docs/advanced-tutorials/ticketing/scan-claiming.png").default} width="60%" height="60%" alt="ticketing" class="rounded-corners"/></p>  |
| `masterStatus.stage` == `Stages.successClaim`, *Post-claim:* Successful `claim`                                | <p align="center"> <img src={require("/static/img/docs/advanced-tutorials/ticketing/scan-claim-good.png").default} width="60%" height="60%" alt="ticketing" class="rounded-corners"/></p>|
| `masterStatus.stage` == `Stages.failClaim`, *Post-claim:* Invalid password, key invalid/scanned already etc.   | <p align="center"> <img src={require("/static/img/docs/advanced-tutorials/ticketing/scan-claim-bad.png").default} width="60%" height="60%" alt="ticketing" class="rounded-corners"/></p> |
| `default`, *Unknown State:* Display error message                                                              | <p align="center"> <img src={require("/static/img/docs/advanced-tutorials/ticketing/error.png").default} width="60%" height="60%" alt="ticketing" class="rounded-corners"/></p>          |

The following expandable section contains code for rendering. 

<details>
<summary>Full scanner.js rendering code</summary>
<p>

```jsx reference
https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/ticket-app/components/scanner.js#L94-L147
```

</p>
</details>

### Full Code
The full code, including the set up, claiming, and the rendering, can be seen below.

``` jsx reference
https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/ticket-app/components/scanner.js#L1-L148
```

---

## Conclusion
In this section, you learned about the `scanner.js` component. Its primary role is to handle the data read in from the QR code reader, and `claim` the private key embedded within the QR code. It is also designed to handle different kinds of errors, such as deleted keys, and tickets that have already been scanned.  

In the next section, you'll be seeing the final product of what you just built!
'''
'''--- docs/Tutorials/Advanced/ticketing/user-code.md ---
---
sidebar_label: 'Attendee Ticket Page Code'
---
# Attendee Ticket Page Code

## Introduction
In the previous section, you broke down the flow and logic of the ticket app. You also learned what Keypom information is needed in order to render the pages properly. 

In this tutorial, you'll learn about the actual code needed to create the attendee ticket page for your seamless ticketing system.

:::note
The focus of this section will be on the Keypom aspects of each script, such as getting key information and using it. 

The full code for each script will be shown, with highlights. For React resources, see [here](https://reactjs.org/docs/hello-world.html) as a starting point.
:::

Recall, from the [introduction](introduction.md) that your code had the following outline.

```bash
/ticket-app-skeleton
└── components
│    └── scanner.js
│    └── qrcode.js
└── state
│    └── App.js
│    └── keyInfo.js
└── utils
│    └── allowEntry.js
│    └── createTickDrop.js
│    └── testTickDrop.js
└── package.json
```

This tutorial will be covering the code in `App.js`, `KeyInfo.js`, and `qrcode.js`.

---

## `App.js`
### Setting Up
The primary purpose of `App.js` is to display the different states of the attendee ticket page. This will involve getting the current key uses, and then rendering based on the value returned. 

The first step is to initialize a connection to NEAR and setup all the state variables that will be needed to render the page. 

```jsx reference showLineNumbers
https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/ticket-app/state/App.js#L13-L57
```

When the page is loaded, the function `setup` is called and the URL is parsed for `contractId` and `privateKey`. These will be stored in their own respective state  variables for further use.

Once the URL has been parsed and the resulting values stored, `connectNear` is called. This function handles the NEAR connection, as well as the Keypom connection.

:::note 
When connecting to NEAR, a `BrowserLocalStorageKeyStore` is used rather than an `UnencryptedFileSystemKeyStore`. This will create a key store in the user's browser for future use. For more on key stores, see [here](https://docs.near.org/tools/near-api-js/quick-reference#key-store)
:::

With the NEAR connection established, your browser can now talk to the NEAR blockchain. The next step, is to call `initKeypom`. This initializes the SDK to allow for interactions with the Keypom smart contracts.

After the Keypom initialization is complete, the QR code information can be created following the format `${contractId}/${privKey}`.

### Rendering

The process of rendering is simple: retrieve the key's current use number, and render the page differently based on the stages outlined in the [App Design](react-outline.md). 

The information is passed into both a QR code component and a KeyInfo component. The `KeyInfo` component takes in both the Keypom contract and private key. It then calls `getKeyInformation` and updates the `curUse` state variable accordingly. `QRCode` uses the `qrcode.react` library to display a QR code based on a string input.

The following table outlines what the page should render based on a set of conditions including the current key use. 

|    **Condition and Description**                                                                                                                                                                                                      | **Render**                                                                                                                                                                              |
|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| **`curUse` is 1**: The attendee ticket page should show a QR code representing the ticket data (contract and secret key). The `QrCode` component is rendered by passing in the `link` state variable created earlier.                 | <p align="center"> <img src={require("/static/img/docs/advanced-tutorials/ticketing/claim-1.png").default} width="80%" height="80%" alt="ticketing" class="rounded-corners"/></p>       |
| **`curUse` is 2**: The first claim was done by the host, and thus should give the user the option to claim their POAP. This is done with the same linkdrop link.                                                                      | <p align="center"><img src={require("/static/img/docs/advanced-tutorials/ticketing/claim-2.png").default} width="80%" height="80%" alt="ticketing" class="rounded-corners"/></p>        |
| **`curUse` is 0**: The second claim was used, and thus the key was depleted and deleted. Here, the user will be given resources to continue learning about NEAR. You can choose to show anything here.                                | <p align="center"><img src={require("/static/img/docs/advanced-tutorials/ticketing/claim-3.png").default} width="80%" height="80%" alt="ticketing" class="rounded-corners"/></p>        |
| This should act as a landing page for your event and will be shown if any URL is invalid. In this case, `curUse` is 0 **and** splitRes[3] is '' or undefined                                                                          | <p align="center"><img src={require("/static/img/docs/advanced-tutorials/ticketing/claim-0.png").default} width="80%" height="80%" alt="ticketing" class="rounded-corners"/></p>        |

The code to render can be found in the exandable section below. 

<details>
<summary>app.js rendering code</summary>
<p>

```jsx reference showLineNumbers
https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/ticket-app/state/App.js#L54-L134
```

</p>
</details>

### Full Code
The full code, including the set up and the rendering, can be seen below.
<details>
<summary>Full app.js code</summary>
<p>

``` jsx reference
https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/ticket-app/state/App.js#L1-L136
```

</p>
</details>

--- 

## `Qrcode.js`

`Qrcode.js` is a simple component that returns a QR code based on the string passed in. On the attendee ticket page, this is the linkdrop URL for the host to scan. 

The full code can be seen below. 

```js reference
https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/ticket-app/components/qrcode.js#L1-L22
```

--- 

## `Keyinfo.js`

`Keyinfo.js` is responsible for updating Keypom related state variables, `pubKey`, and `curUse`. 

When `curUse` is 1 and the QR code is being rendered, the public key and use number is shown for educational purposes.

A `useEffect` hook is used to update the needed Keypom state variables whenever the `KeyInfo` component is rendered. To do this, two SDK functions are used: [`getPubFromSecret`](../../../keypom-sdk/Core/modules.md#getpubfromsecret) to get the public key and [`getKeyInformation`](../../../keypom-sdk/Core/modules.md#getkeyinformation) to get the current key use. This can be seen below. 

```js reference
https://github.com/keypom/keypom-docs-examples/blob/4c8f86dab842c16e9c2bc6ad6f22e1eee2dced9e/advanced-tutorials/ticket-app/state/keyInfo.js#L6-L42
```

---

## Conclusion
In this section, you learned about the 3 components that make up the attendee ticket page: `App.js`, `Qrcode.js`, and `KeyInfo.js`.

In summary, `App.js` is the "homepage" of the attendee ticket page and takes care of setting up all the state variables based on the URL and then rendering the page. `Qrcode.js` simply renders a QR code based on an input string. `KeyInfo` is in charge of updating all Keypom state variables whenever `App.js` re-renders. 

You also went through the code for each of these components and saw the expected [render results](user-code.md#rendering). 

In the next section, you'll be going through a similar process with the scanner page.

'''
'''--- docs/Tutorials/BOS/welcome.md ---
---
sidebar_label: 'Keypom BOS Components'
---
# Keypom BOS Components
Welcome! This a collection of useful BOS components from both Keypom and the community!
- [Event Ticketing on BOS](https://test.near.social/#/minqi.testnet/widget/kp-ticket-homepage?tab=my-ticket-drops)
  - Built for [ETHGlobal Waterloo](https://ethglobal.com/showcase/keypom-x-bos-event-ticketing-pow2e) by Min
  - Special thanks to [Kent - cuongdcdev](https://near.org/near/widget/ProfilePage?accountId=cuongdcdev.near) for API support, [Elliot Bream](https://near.org/near/widget/ProfilePage?accountId=elliotbraem.near&tab=apps) for gateway support, and [Kiskesis](https://near.org/near/widget/ProfilePage?accountId=kiskesis.near) for drop-viewer frontend beautification
<p align="center">
    <img src={require("/static/img/docs/bos/ethwaterloo.png").default} width="85%" height="85%" alt="BOS ticketing"/>
</p>

- [My Keypom Drops Info](https://near.org/kiskesis.near/widget/Keypom-Drop-Viewer-fork) by [Kiskesis](https://near.org/near/widget/ProfilePage?accountId=kiskesis.near). 
  - Forked from [here](https://near.org/mintlu.near/widget/Keypom-Drop-Viewer)
<p align="center">
    <img src={require("/static/img/docs/bos/drop-info.png").default} width="85%" height="85%" alt="ticketing"/>
</p>

- [Number of Keypom Drops per User](https://near.org/mintlu.near/widget/view-number-of-keypom-drops)
<p align="center">
  <img src={require("/static/img/docs/bos/num-drops.png").default} width="85%" height="85%" alt="ticketing"/>
</p>

- [All my Drops](https://near.org/mintlu.near/widget/all-my-drops)
<p align="center">
  <img src={require("/static/img/docs/bos/all-my-drops.png").default} width="85%" height="85%" alt="ticketing"/>
</p>

- [Linkdrop Plus](https://near.org/cuongdcdev.near/widget/linkdrop_plus) by [Kent - cuongdcdev](https://near.org/near/widget/ProfilePage?accountId=cuongdcdev.near)
- <p align="center">
  <img src={require("/static/img/docs/bos/kent-linkdrop.png").default} width="85%" height="85%" alt="ticketing"/>
</p>

- [Linkdrop Viewer](https://near.org/cuongdcdev.near/widget/linkdrop-viewer) by [Kent - cuongdcdev](https://near.org/near/widget/ProfilePage?accountId=cuongdcdev.near)

- [DAO viewer](https://near.org/hack.near/widget/DAO.Profile?daoId=keypom-test.sputnik-dao.near)
<p align="center">
  <img src={require("/static/img/docs/bos/dao-view.png").default} width="85%" height="85%" alt="dao-viewer"/>
</p>
'''
'''--- docs/Tutorials/Basics/fc-drops.md ---
---
sidebar_label: 'Function Call Drop'
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Function Call Drop

## Introduction

In this tutorial, you are going to learn how to create a Function Call Drop from scratch. Similar to how the other drops can be claimed by both new and existing users, FC drops are a great onboarding tool. The difference, is that FC drops can invoke methods on external smart contracts when the link is claimed. This allows for a ton of flexibility and use-cases such as [auto-registering users into a DAO](../../Tutorials/Advanced/daos/introduction.md) as part of the onboarding process.

In this tutorial, the function call will be to Lazy Mint an NFT.

<p align="center"> <img src={require("/static/img/docs/basic-tutorials/nft/collectibles-claimed2.png").default} alt="NFT collectibles claim" width="65%"/> </p>

To learn more about what the FC drop, see the [concepts page](../../Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/fc-drops.md)

---

## Prerequisites
For the basic tutorials, you can choose to run the scripts on your own machine. To do so, you must have the following:

1. [Node JS](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  
2. [NEAR-API-JS](https://docs.near.org/tools/near-api-js/quick-reference#install)  
3. [Keypom JS SDK](https://github.com/keypom/keypom-js#getting-started)

With this tutorial, you can either create your own script by following along, or view the completed script available in the [Keypom Documentation Examples](https://github.com/keypom/keypom-docs-examples) repo.

### Creating your Project
In this section, you're going to create your project and install the SDK to prepare for the tutorial. If you have a completed script and have installed the SDK, you can skip [forward](simple-drops.md#breaking-down-the-problem).

First, you need to give your project a home.

```bash
mkdir my-keypom-project && cd my-keypom-project
```

Next, you'll want to create a default `package.json` file using the following command. You can accept all default values.
```bash
npm init
```

At this point, your project structure should look like this. 
```bash
/my-keypom-project
├── package.json
```

If you open `package.json`, you should see this.

<details>
<summary>Default package.json</summary>
<p>

``` bash
{
  "name": "my-keypom-project",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}
```

</p>
</details>

The next step is to create an empty JavaScript file.
<Tabs>
<TabItem value="Mac/Lnx" label="Mac OS/Linux">

```bash
touch fc-keypom.js
```

</TabItem>
<TabItem value="WNDS" label="Windows">

```bash
fsutil file createnew fc-keypom.js 0
```

</TabItem>
</Tabs>

Finally, the last step is to install the Keypom JS SDK.
```bash
npm install @keypom/core
```

After installing the SDK, your `package.json` file should now look slightly different.

<details>
<summary>package.json after installing the SDK</summary>
<p>

```bash
{
  "name": "my-keypom-project",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  # highlight-start
  "dependencies": {
    "@keypom/core": "^1.0.0"
  }
  # highlight-end
}
```

</p>
</details>

With these steps complete, your project folder should look like this. 

```bash
/my-keypom-project
├── fc-keypom.js
├── package.json
├── package-lock.json
├── node_modules
│   └── keypom-js
│   └── ...
```

You are now ready to begin creating your drop!

---

## Breaking Down the Problem

A Function Call Drop is Keypom's most powerful drop type. A brief breakdown of how an FC drop works is as follows:

For every key-use, a set of functions is called in the order that they are defined. For multi-use keys, this set can vary across different key uses.

An example scenario for a multi-use key can be seen below.

| Key Use    | Functions called during n<sup>th</sup> Key Use |
| -----------| ---------------------------------------------- |
| Key Use 1  | `nft_mint`                                     |
| Key Use 2  | `sign_message`, `update_message`               |
| Key Use 3  | `mint_fungible_tokens`                         |

:::note
In this tutorial, the key will be single use and only call `nft_mint`.
:::

The process of creating an FC drop is similar to the other drop types:

1) Connect to the NEAR blockchain  
2) Create drop with function call data  

The following skeleton code can be used as a starting point:
``` js
// Each of the two methods to create this drop will have their own unique set of imports

// Imports used in the Keypom SDK method:
const { initKeypom, createDrop, getEnv, formatLinkdropUrl } = require("@keypom/core"); 
const { parseNearAmount } = require("@near-js/utils");
const { UnencryptedFileSystemKeyStore } = require("@near-js/keystores-node");
const { Near } = require("@near-js/wallet-account");
const { Account } = require("@near-js/accounts");
const path = require("path");
const homedir = require("os").homedir();

// Imports used in the NEAR-API-JS method:
const { parseNearAmount } = require("@near-js/utils");
const { KeyPair } = require("@near-js/crypto")
const { UnencryptedFileSystemKeyStore } = require("@near-js/keystores-node");
const { Near } = require("@near-js/wallet-account");
const { Account } = require("@near-js/accounts");
const path = require("path");
const homedir = require("os").homedir();

async function fcDropKeypom(){
// STEP 1: Initiate a NEAR connection.

// STEP 2: Create the drop with function call data.
}

fcDropKeypom()

```
## Getting Started
In this section, you'll be addressing the first step: connecting to NEAR. 

This is done with `NEAR-API-JS` and consists of:

1) Create a Keystore, which stores your access keys used to sign transactions   
  * select a network, either `testnet` or `mainnet`  
  * choose a location where the keypairs live, either a folder on your local machine, or in-memory      

2) Define a NEAR configuration using the Keystore  
3) Use the configuration to initialize a connection to NEAR  

More information about this process can be found [here](https://docs.near.org/tools/near-api-js/quick-reference#key-store).

:::note
For simplicity, this tutorial will choose a file-based keystore and point to the `~/.near-credentials` folder on your local machine since this is where most of your keys are stored. For more information about KeyStores, visit NEAR's [official docs](https://docs.near.org/tools/near-api-js/quick-reference#key-store).
:::

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/function-call-drop/fc-example.js#L10-L30
```

## Creating Drop with Function Call Data
In this section, you'll learn about the process of creating an FC drop using the SDK. 

This process starts with calling the `initKeypom` function and will always be the first function you call to interact with the Keypom SDK. 

`initKeypom` initializes the SDK to allow for interactions with the Keypom smart contracts. Without it, none of the other SDK functions would work as expected. If a NEAR connection is not already present, it will initialize a new one for you. More info on the `initKeypom` function can be found [here](../../keypom-sdk/Core/modules.md#initkeypom).

After `initKeypom` is called, the FC Drop can be created by calling `createDrop` and adding an `fcData` parameter. 

:::tip
Recall that the private keys being generated using `createDrop` are used to store the assets. These keys are then embedded within a link.

In an FC Drop, the assets consist of a set of invokable methods and optional $NEAR.
:::

The primary task in creating the Function Call Drop is to define fcData. It is an object containing a methods field that outlines what methods should be called for a given key use:

```bash
fcData
└── methods
```

For multi-use keys, each specific use can have a different set of methods that will be called. These methods are executed sequentially and not in parallel. As an example, a key with 3 uses can be seen:

1. `nft_mint`
2. `null`
3. `create_account_advanced`, `setup`, `nft_mint` 

The first time the key is used, an NFT will be minted. The second use will simply advance the key and nothing will be called. The third time the key is used, it will first call `create_account_advanced`. Once that's finished it will call the `setup` method and then finally `nft_mint`.  

This is represented with a 2D array, where each inner is the set of methods per key use. The above example would be represented as:

```js
methods: [
  [
    "nft_mint"
  ], 
  null, 
  [
    "create_account_advanced", 
    "setup", 
    "nft_mint"
  ]
]
```

Every method listed represents a function call and requires the following parameters:   

- `receiverId`: The contract receiving the function call.  
- `methodName`: The function to be called on the receiver contract.  
- `args`: A stringified JSON object of all the arguments to be passed into `methodName`.  
- `attachedDeposit`: The yoctoNear deposit attached to the function call when the key is used.  

In this tutorial only one function call will be made: `nft_mint` in order to lazy mint an NFT.

Including the `fcData` parameter categorizes this as an FC drop. Without it, the Keypom Protocol would treat this drop as a Simple Drop. More information on the `fcData` parameter can be found [here](../../keypom-sdk/Core/interfaces/FCData.md).

To see what the SDK is doing behind the scenes, a `NEAR-API-JS` equivalent NodeJS script has been provided.

<Tabs>
<TabItem value="KPJS" label="🔑 Keypom SDK">

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/function-call-drop/fc-example.js#L32-L71
```

</TabItem>
<TabItem value="NRJS" label="💻 NEAR-API-JS">

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/function-call-drop/fc-near-example.js#L33-L82
```

</TabItem>
</Tabs>

---

## Creating Linkdrops
The last step in this process is to create the links themselves so that you can easily distribute the assets to people. This is done by embedding the private key, containing the $NEAR, into the link along with the Keypom contract ID.  

With the Keypom SDK, this is all neatly wrapped up in the function [`formatLinkdropUrl`](../../keypom-sdk/Core/modules.md#formatlinkdropurl). You just need to provide the base URL format and the private key you wish to embed.

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/function-call-drop/fc-example.js#L73-L79
```

---

## Complete Code
Now that everything has been put together, the final code can be seen below.

<Tabs>
<TabItem value="KPJS" label="🔑 Keypom SDK">

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/function-call-drop/fc-example.js#L1-L86
```

</TabItem>
<TabItem value="NRJS" label="💻 NEAR-API-JS">

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/function-call-drop/fc-near-example.js#L1-L95
```

</TabItem>
</Tabs>

---

## Testing
### Running the Script
Here, you'll learn how to run the code that was just covered, and what to expect.

To view the completed code, clone the [Keypom Docs Examples](https://github.com/keypom/keypom-docs-examples) repository and navigate to the `basic-tutorials/fc-drop`.
``` bash
git clone https://github.com/keypom/keypom-docs-examples.git && cd keypom-docs-examples/basic-tutorials/fc-drop
```
From there, you can and open the `fc-example.js` file.

To run the code you just cloned, return to the `keypom-docs-examples` directory and install all the necessary packages. 
```bash
cd .. && cd .. && yarn
```

:::caution
Prior to running these scripts, ensure you replace all instances of `keypom-docs-demo.testnet` in the script with the credentials of your account found in your `~/.near-credentials` folder
:::

From there, you can run this FC Drop script that was made in this tutorial using the following command:
``` bash
yarn basic:fc:keypom
```
:::note
The SDK script is being tested here; use `yarn basic:fc:naj` to test the `NEAR-API-JS` script instead.
:::
This should return a successful drop creation and console log a Public Key and Linkdrop
``` bash
Public Keys:  [ 'ed25519:55FkiRc4J3c1zLgzuTYxJMebVrpraXU3P7zPymDtbssN' ]
Linkdrops:  [
  'https://testnet.mynearwallet.com/linkdrop/v2.keypom.testnet/2BB8cx2xaKzY1ENBCoVz7bTFUgq8Gx6Ar27D5PbCv39NnZLfWxw3XqWr37HZ1xm3KdQ5uCt8hvt6ztF1eGBQC1Hi'
]
Keypom Contract Explorer Link: explorer.testnet.near.org/accounts/v2.keypom.testnet.com
```
To see the full console log from this drop creation, see the expandable section below.

<details>
<summary>Console Log of Test</summary>
<p>

``` bash
Receipts: 4MTrVP1cvemzA1XhmX4hHErYvmcgMCgfrXydwNTeez3Y, 8LDCtYSsN5ccFY5udxbYqoVzmxyubqZBRLvMR33FUREN
        Log [v2.keypom.testnet]: Current Block Timestamp: 1682352446955649219
        Log [v2.keypom.testnet]: 21 calls with 105000000000000 attached GAS. Pow outcome: 1.8602935. Required Allowance: 20248156910387200000000
        Log [v2.keypom.testnet]: Total required storage Yocto 14230000000000000000000
        Log [v2.keypom.testnet]: Current balance: 9.3089748, 
            Required Deposit: 2.0354781, 
            total_required_storage: 0.01423,
            Drop Fee: 0, 
            Key Fee: 0 Total Key Fee: 0,
            allowance: 0.0202481 total allowance: 0.0202481,
            access key storage: 0.001 total access key storage: 0.001,
            deposits less none FCs: 1 total deposits: 1 lazy registration: false,
            deposits for FCs: 1 total deposits for FCs: 1,
            uses per key: 1
            None FCs: 0,
            length: 1
            GAS to attach: 100000000000000
        Log [v2.keypom.testnet]: New user balance 7.2734966
        Log [v2.keypom.testnet]: Fees collected 0
Public Keys:  [ 'ed25519:55FkiRc4J3c1zLgzuTYxJMebVrpraXU3P7zPymDtbssN' ]
Linkdrops:  [
  'https://testnet.mynearwallet.com/linkdrop/v2.keypom.testnet/2BB8cx2xaKzY1ENBCoVz7bTFUgq8Gx6Ar27D5PbCv39NnZLfWxw3XqWr37HZ1xm3KdQ5uCt8hvt6ztF1eGBQC1Hi'
]
Keypom Contract Explorer Link: explorer.testnet.near.org/accounts/v2.keypom.testnet.com
```

</p>
</details>

### Claiming and Explorer Transactions
Once you click the link, it will take you to the following NEAR Wallet page, where you will have the choice to claim with an existing account or create a new one. 
<p align="center"> <img src={require("/static/img/docs/basic-tutorials/fc/nw-claim.png").default} alt="NEAR Wallet claim" width="80%"/> </p>

To check the transactions, click the final link in the console log when you run the script.
```bash
Keypom Contract Explorer Link: https://explorer.testnet.near.org/accounts/v2.keypom.testnet 
```

From there, you should be able to see the [`create_drop`](https://explorer.testnet.near.org/transactions/DF6awbmts4hhACBTA8oBSGdt1oJh7FNCBkv36wZboZXR) and [`claim`](https://explorer.testnet.near.org/transactions/m2LJE2Xv1TMwpbEm5SVj2VGqZxBybkQphXouupJKMg8) transactions. 
<p align="center"> <img src={require("/static/img/docs/basic-tutorials/fc/explorer.png").default} alt="explorer transactions" width="80%"/> </p>

Within the [`claim`](https://explorer.testnet.near.org/transactions/Cgckyr9EEC3o9MDiL8E2mvs6JYPuCApYqWjpgZvy3z6U) transaction, you can also see that `nft_mint` was called on the `nft.examples.testnet` contract. 
<p align="center"> <img src={require("/static/img/docs/basic-tutorials/fc/nft-mint.png").default} alt="explorer transactions" width="80%"/> </p>

This can be confirmed by visiting the "Collectibles" tab in your NEAR wallet. You should see the newly minted NFT in your wallet.  
<p align="center"> <img src={require("/static/img/docs/basic-tutorials/nft/collectibles-claimed2.png").default} alt="NFT collectibles claim" width="65%"/> </p>

---

## Conclusion
In this tutorial, you learned the how to [create a function call drop](fc-drops.md#creating-drop-with-function-call-data) using the `fcData` parameter. Once the drop was created, you constructed a valid linkdrop using the private keys in order to claim the assets.

Now that you've had a good introduction to creating all 4 Keypom drop types, feel free to modify the scripts created or move on to the [Advanced Tutorials](../Advanced/ticketing/introduction.md) for more challenging and practical examples.

'''
'''--- docs/Tutorials/Basics/ft-drops.md ---
---
sidebar_label: 'Fungible Token Drop'
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Fungible Token Drop

## Introduction
In this tutorial, you will learn how to create a fungible token drop from scratch. This allows you onboard users both with $NEAR and a set of FTs with the click of a link. An excellent use case can be seamlessly offering in-game currency to players.

<p align="center"> <img src={require("/static/img/docs/basic-tutorials/ft/ft.png").default} alt="ft claim" width="80%"/> </p>

To learn more about the FT drop, see the [concepts page](../../Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/ft-drops.md)

---

## Prerequisites
For the basic tutorials, you can choose to run the scripts on your own machine. To do so, you must have the following:

1. [Node JS](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  
2. [NEAR-API-JS](https://docs.near.org/tools/near-api-js/quick-reference#install)  
3. [Keypom JS SDK](https://github.com/keypom/keypom-js#getting-started)

With this tutorial, you can either create your own script by following along, or view the completed script available in the [Keypom Documentation Examples](https://github.com/keypom/keypom-docs-examples) repo.

### Creating your Project
In this section, you're going to create your project and install the SDK to prepare for the tutorial. If you have a completed script and have installed the SDK, you can skip [forward](simple-drops.md#breaking-down-the-problem).

First, you need to give your project a home.

```bash
mkdir my-keypom-project && cd my-keypom-project
```

Next, you'll want to create a default `package.json` file using the following command. You can accept all default values.
```bash
npm init
```

At this point, your project structure should look like this. 
```bash
/my-keypom-project
├── package.json
```

If you open `package.json`, you should see this.

<details>
<summary>Default package.json</summary>
<p>

``` bash
{
  "name": "my-keypom-project",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}
```

</p>
</details>

The next step is to create an empty JavaScript file.
<Tabs>
<TabItem value="Mac/Lnx" label="Mac OS/Linux">

```bash
touch ft-keypom.js
```

</TabItem>
<TabItem value="WNDS" label="Windows">

```bash
fsutil file createnew ft-keypom.js 0
```

</TabItem>
</Tabs>

Finally, the last step is to install the Keypom JS SDK.
```bash
npm install @keypom/core
```

After installing the SDK, your `package.json` file should now look slightly different.

<details>
<summary>package.json after installing the SDK</summary>
<p>

```bash
{
  "name": "my-keypom-project",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  # highlight-start
  "dependencies": {
    "@keypom/core": "^1.0.0"
  }
  # highlight-end
}
```

</p>
</details>

With these steps complete, your project folder should look like this. 

```bash
/my-keypom-project
├── ft-keypom.js
├── package.json
├── package-lock.json
├── node_modules
│   └── @keypom/core
│   └── ...
```

You are now ready to begin creating your drop!

---

## Breaking Down the Problem

The process of creating an FT drop can be broken down into the following steps.  

1) Connect to the NEAR blockchain.  
2) Ensure the funder has enough FTs to fund the drop.  
3) Create the drop.    
4) Transfer  Keypom the necessary Fungible Tokens.  
5) Create linkdrops.   

The following skeleton code can be used as a starting point:
```js
// Each of the two methods to create this drop will have their own unique set of imports

// Imports used in the Keypom SDK method:
const { initKeypom, createDrop, getEnv, formatLinkdropUrl } = require("@keypom/core");
const { parseNearAmount } = require("@near-js/utils");
const { UnencryptedFileSystemKeyStore } = require("@near-js/keystores-node");
const { Near } = require("@near-js/wallet-account");
const { Account } = require("@near-js/accounts");
const { BN } = require("bn.js");
const path = require("path");
const homedir = require("os").homedir();

// Imports used in the NEAR-API-JS method:
const { parseNearAmount } = require("@near-js/utils");
const { KeyPair } = require("@near-js/crypto")
const { Near } = require("@near-js/wallet-account");
const { Account } = require("@near-js/accounts");
const { UnencryptedFileSystemKeyStore } = require("@near-js/keystores-node");
const { getRecentDropId } = require("../utils/general.js")
const { BN } = require("bn.js");
const path = require("path");
const homedir = require("os").homedir();

async function FTDropKeypom(){
// GETTING STARTED

//      STEP 1 Initialize NEAR blockchain connection.

//      STEP 2 Ensure the funder has enough FTs to fund the drop.

// CREATING DROP AND TRANSFERRING FTs

//      STEP 3 Create the drop.

//      STEP 4 Transfer Keypom the necessary Fungible Tokens.

// CREATING LINKDROPS

//      STEP 5 Create Linkdrops
}

FTDropKeypom()
```
Steps 1 and 2 will be covered in "[Getting Started](ft-drops.md#getting-Started)" and Steps 3, 4, and 5 will be under "[Creating FT drop and Transferring FTs](ft-drops.md#creating-drop-and-transferring-fts)". Step 6 will have its own section called "[Creating Linkrops](ft-drops.md#creating-linkdrops)".

---

## Getting Started
In this section, you'll be addressing the first two steps: connecting to NEAR and ensuring the funder has enough FTs for the drop. 

Connecting to the NEAR blockchain will be done using `NEAR-API-JS` and consists of the following steps: 

1) Create a Keystore, which stores your access keys used to sign transactions   
  * select a network, either `testnet` or `mainnet`  
  * choose a location where the keypairs live, either a folder on your local machine, or in-memory      

2) Define a NEAR configuration using the Keystore  
3) Use the configuration to initialize a connection to NEAR  

More information about this process can be found [here](https://docs.near.org/tools/near-api-js/quick-reference#key-store).

:::note
For simplicity, this tutorial will choose a file-based keystore and point to the `~/.near-credentials` folder on your local machine since this is where most of your keys are stored. For more information about KeyStores, visit NEAR's [official docs](https://docs.near.org/tools/near-api-js/quick-reference#key-store).
:::

To ensure the funder has enough FTs to fund the drop, a new concept is to be defined.

:::info
`amountToTransfer` = *FT per use* * *number of keys* * *uses per key*.
:::

Using `NEAR-API-JS`, a `viewFunction` to the FT contract can be made to call `ft_balance_of`. This will return the funder's FT balance, which can be compared with `amountToTransfer` to ensure the funder has enough FTs to fund the drop. 

The code for setting up the NEAR connection and ensuring sufficient funder FT balance is shown below. In the skeleton code, these are steps 1 and 2.

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/fungible-token-drop/ft-example.js#L11-L45
```
:::note
In the code, you may notice the balances defined using `BN`. These are simply *Big Numbers* and is a library built to handle numbers beyond JavaScript's [max safe integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER). 

The FTs in this example have a `decimal` of 24. This is the same as 1 $NEAR -> 10<sup>24</sup> YoctoNEAR, which allows the use of [`parseNearAmount`](https://docs.near.org/tools/near-api-js/utils) to convert between the two. Read more on the decimal parameter [here](https://docs.openzeppelin.com/contracts/3.x/erc20#a-note-on-decimals).
:::

---

## Creating Drop and Transferring FTs
In this section of the tutorial, you'll be creating the drop and transferring the FTs to Keypom using the Keypom SDK. 

As outlined in to introduction, there are 2 tasks to complete in this section.  

- Create the drop  
- Transfer the FTs to Keypom  

This process starts with calling the `initKeypom` function and will always be the first function you call to interact with the SDK.  

`initKeypom` initializes the SDK to allow for interactions with the Keypom smart contracts. Without it, none of the other SDK functions would work as expected. If a NEAR connection is not already present, it will initialize a new one for you. More info on the `initKeypom` function can be found [here](../../keypom-sdk/Core/modules.md#initkeypom).

Following the `initKeypom` call, the FT Drop is created. This is done by calling `createDrop` and adding an `ftData` parameter. 

:::tip
Recall that the private keys being generated using `createDrop` are used to store the assets. These keys are then embedded within a link.

In an FT Drop, the assets consist of FTs and optional $NEAR.
:::

`ftData` is an object with the following properties.
```bash
ftData
├── contractId
├── senderId
├── amount
```

- `contractId`: The FT contract ID
- `senderId`: The account from which the FTs will be sent to Keypom.
- `amount`: This is the human readable amount of FT, based on the [decimals value](https://docs.openzeppelin.com/contracts/3.x/erc20#a-note-on-decimals) of the token

Including the `ftData` parameter categorizes this as an FT drop. Without it, the Keypom Protocol would treat this drop as a Simple Drop.

More information on the `ftData` parameter can be found [here](../../keypom-sdk/Core/interfaces/FTData.md).

:::info
So long as the funder has an adequate FT balance, all you need to do is call `createDrop` with `ftData` to create the drop.

The SDK will **automatically** register Keypom on the FT contract and transfer the FTs to Keypom for you. 
:::

To see what the SDK is doing behind the scenes, a `NEAR-API-JS` equivalent NodeJS script has been provided.

<Tabs>
<TabItem value="KPJS" label="🔑 Keypom SDK">

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/fungible-token-drop/ft-example.js#L47-L70
```

</TabItem>
<TabItem value="NRJS" label="💻 NEAR-API-JS">

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/fungible-token-drop/ft-near-example.js#L50-L115
```

</TabItem>
</Tabs>

---

## Creating Linkdrops
The last step in this process is to create the links themselves so that you can easily distribute the assets to people. This is done by embedding the private key, containing the $NEAR, into the link along with the Keypom contract ID.  

With the Keypom SDK, this is all neatly wrapped up in the function [`formatLinkdropUrl`](../../keypom-sdk/Core/modules.md#formatlinkdropurl). You just need to provide the base URL format and the private key you wish to embed.

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/fungible-token-drop/ft-example.js#L72-L78
```

---

## Full Code
Now that everything has been put together, the final code can be seen below.
<Tabs>
<TabItem value="KPJS" label="🔑 Keypom SDK">

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/fungible-token-drop/ft-example.js#L1-L86
```

</TabItem>
<TabItem value="NRJS" label="💻 NEAR-API-JS">

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/fungible-token-drop/ft-near-example.js#L1-L127
```

</TabItem>
</Tabs>

---

## Testing
### Running the Script
Here, you'll learn how to run the code that was just covered, and what to expect.

To view the completed code, clone the [Keypom Docs Examples](https://github.com/keypom/keypom-docs-examples) repository and navigate to the `basic-tutorials/ft-drop`.
``` bash
git clone https://github.com/keypom/keypom-docs-examples.git && cd keypom-docs-examples/basic-tutorials/ft-drop
```
From there, you can and open the `ft-example.js` file.

To run the code you just cloned, return to the `keypom-docs-examples` directory and install all the necessary packages. 
```bash
cd .. && cd .. && yarn
```

:::caution
Prior to running these scripts, ensure you replace all instances of `keypom-docs-demo.testnet` in the script with the credentials of your account found in your `~/.near-credentials` folder
:::

From there, you can run this FT Drop script that was made in this tutorial using the following command:
``` bash
yarn basic:ft:keypom
```
:::note
The SDK script is being tested here; use `yarn basic:ft:naj` to test the `NEAR-API-JS` script instead.
:::
This should return a successful drop creation and console log a Public Key and Linkdrop

```bash
Public Keys:  [ 'ed25519:DkvGVA8UuBRKtsXvBxnKkHs2aHzd221QSquinokfJ71a' ]
Linkdrops:  [
  'https://testnet.mynearwallet.com/linkdrop/v2.keypom.testnet/2H8i9Snk4v3wBBHeTxBFuzzi1SF5DL4nFHvMUp1nDz4ARSW3tB5b8z2Xxm6Y5rMzzVS3sDppPxM4jtRhyYkHfF2Y'
]
Keypom Contract Explorer Link: explorer.testnet.near.org/accounts/v2.keypom.testnet.com
```

To see the full console log from this drop creation, see the expandable section below.

<details>
<summary>Console Log of Test</summary>
<p>

``` bash
Receipts: AxiAwWNkKQsyvdcAhwBr2B2Qqc5gVCBw2MLrbL7dLq6d, 6QCHm8YtpfreHYQvw9VAHU7rJXGgfVv4T1TDcuXHEtvC, 5CTcWfQ1BC1nensRK6NhcNSv5NjxdSaVSwti4j34fCa3
        Log [v2.keypom.testnet]: Current Block Timestamp: 1682352345716601116
        Log [v2.keypom.testnet]: 21 calls with 105000000000000 attached GAS. Pow outcome: 1.8602935. Required Allowance: 20248156910387200000000
        Log [v2.keypom.testnet]: was_ft_registered: true
        Log [v2.keypom.testnet]: Total required storage Yocto 11980000000000000000000
        Log [v2.keypom.testnet]: Current balance: 8.2955772, 
            Required Deposit: 1.0332281, 
            total_required_storage: 0.01198,
            Drop Fee: 0, 
            Key Fee: 0 Total Key Fee: 0,
            allowance: 0.0202481 total allowance: 0.0202481,
            access key storage: 0.001 total access key storage: 0.001,
            deposits less none FCs: 1 total deposits: 1 lazy registration: false,
            deposits for FCs: 0 total deposits for FCs: 0,
            uses per key: 1
            None FCs: 0,
            length: 1
            GAS to attach: 100000000000000
        Log [v2.keypom.testnet]: New user balance 7.262349
        Log [v2.keypom.testnet]: Fees collected 0
        Log [v2.keypom.testnet]: Performing CCC to get storage from FT contract
Receipts: 4PPt4W1C9xYP2yc67CLVX6vvYshf1oCoDr9hBiZUniTZ, 8iSu5McdW8rvPApvYjbPhew6wGZ9raAPiR8SEA43tV86
        Log [v2.keypom.testnet]: User has enough balance to cover FT storage. Subtracting 0.0025 from user balance. User balance is now 7.259849
        Log [v2.keypom.testnet]: 21 calls with 105000000000000 attached GAS. Pow outcome: 1.8602935. Required Allowance: 20248156910387200000000
        Log [v2.keypom.testnet]: FT contract already registered. Refunding user balance for 0.00125. Balance is now 7.261099
Receipts: 9FEiXh19PMMRirF4CGDTEfopWxf6eLWxNvJmUMnrrVX8, AwJ362Sj4PZ3EbusnwLo4qoyExXRRZPAyqUUT1uZ64oi, 8KquU3a2BA3AWb9keYfwYvYpD6iD5CQG1Vn78efBex9B
        Log [ft.keypom.testnet]: EVENT_JSON:{"standard":"nep141","version":"1.0.0","event":"ft_transfer","data":[{"old_owner_id":"keypom-docs-demo.testnet","new_owner_id":"v2.keypom.testnet","amount":"1"}]}
Receipt: 9Ls4K4vm8pW7HcjD6PMBbJoWSsjwN16YEq3GdCqnahPx
        Log [ft.keypom.testnet]: New uses registered 1
Public Keys:  [ 'ed25519:DkvGVA8UuBRKtsXvBxnKkHs2aHzd221QSquinokfJ71a' ]
Linkdrops:  [
  'https://testnet.mynearwallet.com/linkdrop/v2.keypom.testnet/2H8i9Snk4v3wBBHeTxBFuzzi1SF5DL4nFHvMUp1nDz4ARSW3tB5b8z2Xxm6Y5rMzzVS3sDppPxM4jtRhyYkHfF2Y'
]
Keypom Contract Explorer Link: explorer.testnet.near.org/accounts/v2.keypom.testnet.com
```

</p>
</details>

### Claiming and Explorer Transactions
Once you click the link, it will take you to the following NEAR Wallet page, where you will have the choice to claim with an existing account or create a new one. 
<p align="center"> <img src={require("/static/img/docs/basic-tutorials/ft/nw-claim.png").default} alt="NEAR Wallet claim" width="80%"/> </p>

In your NEAR wallet, you should now be able to see the FT tokens that were transferred to you. 
<p align="center"> <img src={require("/static/img/docs/basic-tutorials/ft/ft.png").default} alt="ft claim" width="80%"/> </p>

To check the transactions, click the final link in the console log when you run the script.
```bash
Keypom Contract Explorer Link: https://explorer.testnet.near.org/accounts/v2.keypom.testnet 
```

From there, you should be able to see the [`create_drop`](https://explorer.testnet.near.org/transactions/6HkwpwWVA7m1tAGj75JGpF975toStWRF1y8FSRDMPPfT), [`ft_transfer_call`](https://explorer.testnet.near.org/transactions/47HmGKAHx4TDp6vNbnBAb9ifS1gTXrC58o7svFmZDYzk) and [`claim`](https://explorer.testnet.near.org/transactions/62gQiyQjx9z9WJsVQNaaa4fje9PeeTpCuHun2PZ8WjNm) transactions. 
<p align="center"> <img src={require("/static/img/docs/basic-tutorials/ft/explorer.png").default} alt="explorer transactions" width="80%"/> </p>

:::note
Recall that `ft_transfer_call` is never explicitly called but rather `createDrop` calls it for you; this can be seen in the explorer shown above. 

This is the SDK in action!
:::

---

## Conclusion
In this tutorial, you've learned to ensure the funder has a [sufficient FT balance](ft-drops.md#getting-started) for the drop, [create an FT drop](ft-drops.md#creating-drop-and-transferring-fts) with the SDK, and to [transfer FTs](ft-drops.md#creating-drop-and-transferring-fts) to Keypom. Once the drop was created, you constructed a valid linkdrop using the private keys in order to claim the assets.

In the next tutorial, you will learn to create a function call drop. 
'''
'''--- docs/Tutorials/Basics/getting-started.md ---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem'; 

# Getting Started
The primary goal of a Keypom drop is to send assets to users with the click of a link regardless of whether they have a wallet or not. These assets can come in many forms which will be broken down below.

The basic tutorials are meant as introductory guides that will help you create your first Keypom drops and understand the differences between the [types](/Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/introduction.md) of Keypom drops and the assets they contain. 

There are **four** types of drops, each with different types of assets. These drops can be claimed either with a brand new NEAR account or an existing one.

| Drop Type                                                                                          | Assets                                     |
| -------------------------------------------------------------------------------------------------- | -------------------------------------------|
| [Simple Drop](../../Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/simple-drops.md)             | $NEAR                                      |
| [Non-Fungible Token Drop](../../Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/nft-drops.md)    | NFT and optionally $NEAR                   |
| [Fungible Token Drop](../../Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/ft-drops.md)         | Fungible Tokens and optionally $NEAR       |
| [Function Call Drop](../../Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/fc-drops.md)          | Set of function-calls and optionally $NEAR |

The [Simple Drop](../../Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/simple-drops.md) is the most basic type of drop, it allows you to send $NEAR via a link to new or existing users. 

[NFT Drops](../../Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/nft-drops.md) and [FT Drops](../../Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/ft-drops.md) are extensions of the Simple drop, they allow you to send NFTs and FTs in addition to $NEAR. 

The [Function Call Drop](../../Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/fc-drops.md) is Keypom's most powerful type of drop. It allows you send a link that is capable of calling almost any function on any smart contract that you predefine. A simple example of this is auto-registering users into a DAO as part of the onboarding process.

While there are many [drop configurations](../../Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/customization-homepage.md) available to developers such as multi-use keys or time-based restrictions, in these basic tutorials, a single use key with no additional configurations will be created.

Throughout each tutorial, two simple NodeJS scripts will be created that use both NEAR's native [NEAR-API-JS](https://docs.near.org/tools/near-api-js/reference) library, and Keypom's [JS-SDK](https://github.com/keypom/keypom-js).

---

## Prerequisites
For the basic tutorials, you can choose to run the scripts on your own machine. To do so, you must have the following:

1. [Node JS](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  
2. [NEAR-API-JS](https://docs.near.org/tools/near-api-js/quick-reference#install)  
3. [Keypom JS SDK](https://github.com/keypom/keypom-js#getting-started)

At this point, you are ready to start the tutorials.

Alternatively, if you wish to use ready-to-use scripts that can be customized to your liking in order to quickly create Keypom drops, visit the [Keypom Protocol](https://github.com/keypom/keypom#deploy-scripts). 

'''
'''--- docs/Tutorials/Basics/nft-drops.md ---
---
sidebar_label: 'Non Fungible Token Drop'
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Non Fungible Token Drop

## Introduction
In this tutorial, you will learn how to create a non-fungible token drop from scratch. This allows you onboard users both with $NEAR and an existing NFT with the click of a link. This is great for sending an NFT that you own to your friends without needing to worry about whether or not they have a NEAR wallet.

<p align="center"> <img src={require("/static/img/docs/basic-tutorials/nft/collectibles-claimed2.png").default} alt="MyNearWallet claim" width="65%"/> </p>

To learn more about the NFT drop, see the [concepts page](../../Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/nft-drops.md)

---

## Prerequisites
For the basic tutorials, you can choose to run the scripts on your own machine. To do so, you must have the following:

1. [Node JS](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  
2. [NEAR-API-JS](https://docs.near.org/tools/near-api-js/quick-reference#install)  
3. [Keypom JS SDK](https://github.com/keypom/keypom-js#getting-started)

With this tutorial, you can either create your own script by following along, or view the completed script available in the [Keypom Documentation Examples](https://github.com/keypom/keypom-docs-examples) repo.

### Creating your Project
In this section, you're going to create your project and install the SDK to prepare for the tutorial. If you have a completed script and have installed the SDK, you can skip [forward](simple-drops.md#breaking-down-the-problem).

First, you need to give your project a home.

```bash
mkdir my-keypom-project && cd my-keypom-project
```

Next, you'll want to create a default `package.json` file using the following command. You can accept all default values.
```bash
npm init
```

At this point, your project structure should look like this. 
```bash
/my-keypom-project
├── package.json
```

If you open `package.json`, you should see this.

<details>
<summary>Default package.json</summary>
<p>

``` bash
{
  "name": "my-keypom-project",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}
```

</p>
</details>

The next step is to create an empty JavaScript file.
<Tabs>
<TabItem value="Mac/Lnx" label="Mac OS/Linux">

```bash
touch nft-keypom.js
```

</TabItem>
<TabItem value="WNDS" label="Windows">

```bash
fsutil file createnew nft-keypom.js 0
```

</TabItem>
</Tabs>

Finally, the last step is to install the Keypom JS SDK.
```bash
npm install @keypom/core
```

After installing the SDK, your `package.json` file should now look slightly different.

<details>
<summary>package.json after installing the SDK</summary>
<p>

```bash
{
  "name": "my-keypom-project",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  # highlight-start
  "dependencies": {
    "@keypom/core": "^1.0.0"
  }
  # highlight-end
}
```

</p>
</details>

With these steps complete, your project folder should look like this. 

```bash
/my-keypom-project
├── nft-keypom.js
├── package.json
├── package-lock.json
├── node_modules
│   └── @keypom/core
│   └── ...
```

You are now ready to begin creating your drop!

---

## Breaking Down the Problem

The process of creating an NFT drop can be broken down into the following steps.  

1) Establish a connection to the NEAR blockchain.  
2) If you don't own the NFT, mint it using the `nft_mint` function.   
3) Create the keys and the drop with the NFT information.   
4) Transfer ownership of the NFTs to Keypom.  
5) Create linkdrops.  

:::info
The NFT ownership must be transferred to Keypom so that it can send the NFT to the user when they claim their drop. 
:::

The following skeleton code can be used as a starting point:

```js
// Each of the two methods to create this drop will have their own unique set of imports

// Imports used in the Keypom SDK method:
const { initKeypom, createDrop, getEnv, formatLinkdropUrl } = require("@keypom/core");
const { parseNearAmount } = require("@near-js/utils");
const { UnencryptedFileSystemKeyStore } = require("@near-js/keystores-node");
const { Near } = require("@near-js/wallet-account");
const { Account } = require("@near-js/accounts");
const path = require("path");
const homedir = require("os").homedir();

// Imports used in the NEAR-API-JS method:
const { parseNearAmount } = require("@near-js/utils");
const { KeyPair } = require("@near-js/crypto")
const { UnencryptedFileSystemKeyStore } = require("@near-js/keystores-node");
const { Near } = require("@near-js/wallet-account");
const { Account } = require("@near-js/accounts");
const { getRecentDropId } = require("../utils/general.js")
const path = require("path");
const homedir = require("os").homedir();

async function NFTDropKeypom(){
// GETTING STARTED

//      STEP 1: Initiate a NEAR connection.

//      STEP 2: Mint NFTs

// CREATING DROP AND TRANSFERRING NFTs

//      STEP 3: Create NFT drop

//      STEP 4: Transfer NFTs to Keypom

// CREATING LINKDROPS

//      STEP 5: Create Linkdrops
}

NFTDropKeypom()
```

For this tutorial, steps 1 and 2 will be grouped under "[Getting Started](nft-drops.md#getting-started)", steps 3 and 4 will be grouped under "[Creating drop and transferring NFT](nft-drops.md#creating-drop-and-transferring-nft)", and step 5 will have its own section called "[Creating Linkrops](nft-drops.md#creating-linkdrops)".

---

## Getting Started
In this section, the NEAR blockchain connection is set up and the NFTs will be minted to ensure you are transferring NFTs that *you* own. If you already own the NFTs you wish to add to the drop, there is no need to mint them here. 

Connecting to the NEAR blockchain will be done using `NEAR-API-JS` and consists of the following steps:

1) Create a Keystore, which stores your access keys used to sign transactions   
  * select a network, either `testnet` or `mainnet`  
  * choose a location where the keypairs live, either a folder on your local machine, or in-memory      

2) Define a NEAR configuration using the Keystore  
3) Use the configuration to initialize a connection to NEAR   

More information about this process can be found [here](https://docs.near.org/tools/near-api-js/quick-reference#key-store).

:::note
For simplicity, this tutorial will choose a file-based keystore and point to the `~/.near-credentials` folder on your local machine since this is where most of your keys are stored. For more information about KeyStores, visit NEAR's [official docs](https://docs.near.org/tools/near-api-js/quick-reference#key-store).
:::

The code for setting up the NEAR connection and minting the NFT is shown below. In the skeleton code, these are steps 1 and 2.

``` js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/non-fungible-token-drop/nft-example.js#L11-L49
```

:::note
The NFT must be minted with a `NEAR-API-JS` `functionCall` to the NFT contract.

Function arguments for `functionCall` can be found [here](https://docs.near.org/tools/near-api-js/reference/modules/transaction#functioncall)
:::

---

## Creating Drop and Transferring NFT

In this section of the tutorial, you'll be creating the NFT drop and transferring the NFT to Keypom using the Keypom SDK.

This process starts with calling the `initKeypom` function and will always be the first function you call to interact with the SDK. 

`initKeypom` initializes the SDK to allow for interactions with the Keypom smart contracts. Without it, none of the other SDK functions would work as expected. If a NEAR connection is not already present, it will initialize a new one for you. More info on the `initKeypom` function can be found [here](../../keypom-sdk/Core/modules.md#initkeypom).

After calling `initKeypom`, the NFT Drop is created. This is done by calling `createDrop` and adding an `nftData` parameter.

:::tip
Recall that the private keys being generated using `createDrop` are used to store the assets. These keys are then embedded within a link.

In an NFT Drop, the assets consist of an NFT and optional $NEAR.
:::

`nftData` is an object with the following properties.

```bash
nftData
├── contractId
├── senderId
├── tokenIds
```

- `contractId`: The contract ID where the NFTs for this drop are coming from
- `senderId`: The current owner of the NFTs that will be sent to Keypom
- `tokenIds`: A list of all the token IDs to be sent to Keypom during the NFT drop creation process. 

Including the `nftData` parameter categorizes this as an NFT drop. Without it, the Keypom Protocol would treat this drop as a Simple Drop.

More information on the `nftData` parameter can be found [here](../../keypom-sdk/Core/interfaces/NFTData.md).

To see what the SDK is doing behind the scenes, a `NEAR-API-JS` equivalent NodeJS script has been provided.

<Tabs>
<TabItem value="KPJS" label="🔑 Keypom SDK">

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/non-fungible-token-drop/nft-example.js#L51-L74
```

</TabItem>
<TabItem value="NRJS" label="💻 NEAR-API-JS">

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/non-fungible-token-drop/nft-near-example.js#L52-L101
```

</TabItem>
</Tabs>

:::note
All function parameters and default values for the SDK and Keypom functions can be found in the [SDK Typedocs](../../keypom-sdk/Core/modules.md). For `NEAR-API-JS` functions, their arguments can be found [here](https://docs.near.org/tools/near-api-js/reference)
:::

---

## Creating Linkdrops
The last step in this process is to create the links themselves so that you can easily distribute the assets to people. This is done by embedding the private key, containing the $NEAR, into the link along with the Keypom contract ID.  

With the Keypom SDK, this is all neatly wrapped up in the function [`formatLinkdropUrl`](../../keypom-sdk/Core/modules.md#formatlinkdropurl). You just need to provide the base URL format and the private key you wish to embed.

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/non-fungible-token-drop/nft-example.js#L76-L82
```

---

## Full Solution
Now that everything has been put together, the final code can be seen below.

<Tabs>
<TabItem value="KPJS" label="🔑 Keypom SDK">

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/non-fungible-token-drop/nft-example.js#L1-L89
```

</TabItem>
<TabItem value="NRJS" label="💻 NEAR-API-JS">

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/non-fungible-token-drop/nft-near-example.js#L1-L114
```

</TabItem>
</Tabs>

---

## Testing
### Running the Script
Here, you'll learn how to run the code that was just covered, and what to expect.

To view the completed code, clone the [Keypom Docs Examples](https://github.com/keypom/keypom-docs-examples) repository and navigate to the `basic-tutorials/nft-drop`.
``` bash
git clone https://github.com/keypom/keypom-docs-examples.git && cd keypom-docs-examples/basic-tutorials/nft-drop
```
From there, you can and open the `nft-example.js` file.

To run the code you just cloned, return to the `keypom-docs-examples` directory and install all the necessary packages. 
```bash
cd .. && cd .. && yarn
```

:::caution
Prior to running these scripts, ensure you replace all instances of `keypom-docs-demo.testnet` in the script with the credentials of your account found in your `~/.near-credentials` folder
:::

From there, you run this NFT Drop script that was made in this tutorial using the following command:
``` bash
yarn basic:nft:keypom
```
:::note
The SDK script is being tested here; use `yarn basic:nft:naj` to test the `NEAR-API-JS` script instead.
:::
This should return a successful drop creation and console log a Public Key and Linkdrop: 
```bash
Public Keys:  [ 'ed25519:Cf48tjtLrRDm5qYN5fyNvPHBTNVkSsX2mP2mfw2W2f3N' ]
Linkdrops:  [
  'https://testnet.mynearwallet.com/linkdrop/v2.keypom.testnet/4iBKGBMhKo3BLi8wfc6qDPxUG3xrsXygDbzVwXBsh3tEvLVE2a4EGDtHreH89a7peAhC8yot1Zm5vd3nfnxxmzv4'
]
Keypom Contract Explorer Link: explorer.testnet.near.org/accounts/v2.keypom.testnet.com
```

To see the full console log from this drop creation, see the expandable section below.

<details>
<summary>Console Log of Test</summary>
<p>

``` bash
Receipts: 94Hxiw6dy2VbgfWWuL8scyAKutgmZ6TnyaGLuSdw8bdw, EPBCevWD8jCmVmRhH4r7nEWY5P5mHNXBzxRs8FFmjh1s
        Log [nft.examples.testnet]: EVENT_JSON:{"standard":"nep171","version":"nft-1.0.0","event":"nft_mint","data":[{"owner_id":"keypom-docs-demo.testnet","token_ids":["keypom-token-1682351707371"]}]}
Receipts: 8VKpVfRZkPBJzZR42aBiytbECXFYqAvLF72jRUgaccHt, AV5tmBbWuzkV7DLNX6o4LgkeBysShJ647VmdY3ye15s
        Log [v2.keypom.testnet]: Current Block Timestamp: 1682351728091701553
        Log [v2.keypom.testnet]: 21 calls with 105000000000000 attached GAS. Pow outcome: 1.8602935. Required Allowance: 20248156910387200000000
        Log [v2.keypom.testnet]: Total required storage Yocto 12140000000000000000000
        Log [v2.keypom.testnet]: Current balance: 8.2333838, 
            Required Deposit: 1.0333881, 
            total_required_storage: 0.01214,
            Drop Fee: 0, 
            Key Fee: 0 Total Key Fee: 0,
            allowance: 0.0202481 total allowance: 0.0202481,
            access key storage: 0.001 total access key storage: 0.001,
            deposits less none FCs: 1 total deposits: 1 lazy registration: false,
            deposits for FCs: 0 total deposits for FCs: 0,
            uses per key: 1
            None FCs: 0,
            length: 1
            GAS to attach: 100000000000000
        Log [v2.keypom.testnet]: New user balance 7.1999957
        Log [v2.keypom.testnet]: Fees collected 0
Receipts: HwvpQcMKQdWczLsbBsvZD72UdJTpY6BTDPZBFwk7YZFy, DGs58AziaMcgkZbhki2caZBAFC6fYa83qXfziQmmwaeU, 3zs1apRpLhdfYpdRJUidgP8YJzkPr2YKaoVT8Hitau5p
        Log [nft.examples.testnet]: EVENT_JSON:{"standard":"nep171","version":"nft-1.0.0","event":"nft_transfer","data":[{"old_owner_id":"keypom-docs-demo.testnet","new_owner_id":"v2.keypom.testnet","token_ids":["keypom-token-1682351707371"]}]}
Receipt: 4HJAWvH67JtsdDVQP1vsRTniFwkALWokPRpkPbMxqArY
        Log [nft.examples.testnet]: drop.registered_uses 1
        Log [nft.examples.testnet]: Subtracting 1110000000000000000000 from funder to cover storage. New balance is 7198885721113380930000000
Public Keys:  [ 'ed25519:Cf48tjtLrRDm5qYN5fyNvPHBTNVkSsX2mP2mfw2W2f3N' ]
Linkdrops:  [
  'https://testnet.mynearwallet.com/linkdrop/v2.keypom.testnet/4iBKGBMhKo3BLi8wfc6qDPxUG3xrsXygDbzVwXBsh3tEvLVE2a4EGDtHreH89a7peAhC8yot1Zm5vd3nfnxxmzv4'
]
Keypom Contract Explorer Link: explorer.testnet.near.org/accounts/v2.keypom.testnet.com
```

</p>
</details>

### Claiming and Explorer Transactions
Once you click the link, it will take you to the following NEAR Wallet page, where you will have the choice to claim with an existing account or create a new one.  
<p align="center"> <img src={require("/static/img/docs/basic-tutorials/nft/nw-claim.png").default} alt="Near Wallet claim" width="80%"/> </p>

After the claim transaction succeeds, you can view the NFT in your collectibles tab.
<p align="center"> <img src={require("/static/img/docs/basic-tutorials/nft/collectibles-claimed2.png").default} alt="NFT collectibles claim" width="65%"/> </p>

To check the transactions, click the final link in the console log when you run the script.
```bash
Keypom Contract Explorer Link: https://explorer.testnet.near.org/accounts/v2.keypom.testnet 
```

From there, you should be able to see the [`create_drop`](https://explorer.testnet.near.org/transactions/9rR6mPjoQFKC2Euuvn5yh5e6hPv3WTrMYjwja3ppkjaD), [`nft_transfer_call`](https://explorer.testnet.near.org/transactions/A2hdnm6mHQNLupFLP1vMNZ1J8QHkxLqDLqocUnQxNC5F) and [`claim`](https://explorer.testnet.near.org/transactions/5Kx9F5nxjbWpq8qUr7rRuDun8zipvR7TFbVuPoP5qwBW) transactions. 
<p align="center"> <img src={require("/static/img/docs/basic-tutorials/nft/explorer.png").default} alt="explorer transactions" width="80%"/> </p>

:::note
Recall that `nft_transfer_call` is never explicitly called but rather `createDrop` calls it for you; this can be seen in the explorer shown above. 

This is the SDK in action!
:::

---

## Conclusion
In this NFT tutorial, you learned about the steps needed while [initializing an NFT drop](nft-drops.md#getting-started) and the process of [creating the NFT drop](nft-drops.md#creating-drop-and-transferring-nft). Once the drop was created, you constructed a valid linkdrop using the private keys in order to claim the assets.

In the next tutorial, you will learn how to create a Fungible Token drop, which is similar to the NFT drop, but transfers FTs instead of NFTs.
'''
'''--- docs/Tutorials/Basics/simple-drops.md ---
---
sidebar_label: 'Simple Drop'
---
import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Simple Drop

## Introduction
In this tutorial, you will learn how to create a simple $NEAR drop from scratch. By embedding $NEAR in a Web2 style link, the simple drop allows you to onboard both existing and new users. 

Being the simplest Keypom drop type, it acts as the foundation for the other 3 kinds of Keypom drops. Despite this, the simple drop opens the door to more complex use cases such as [subscription services](../../Tutorials/Advanced/subscriptions/introduction.md).

<p align="center"> <img src={require("/static/img/docs/basic-tutorials/simple/nw-claim.png").default} alt="Near Wallet claim" width="100%"/> </p>

To learn more about the Simple Drop, see the [concepts page](../../Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/simple-drops.md)

---

## Prerequisites
For the basic tutorials, you can choose to run the scripts on your own machine. To do so, you must have the following:

1. [Node JS](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)  
2. [NEAR-API-JS](https://docs.near.org/tools/near-api-js/quick-reference#install)  
3. [Keypom JS SDK](https://github.com/keypom/keypom-js#getting-started)

With this tutorial, you can either create your own script by following along, or view the completed script available in the [Keypom Documentation Examples](https://github.com/keypom/keypom-docs-examples) repo.

### Creating your Project
In this section, you're going to create your project and install the SDK to prepare for the tutorial. If you have a completed script and have installed the SDK, you can skip [forward](simple-drops.md#breaking-down-the-problem).

First, you need to give your project a home.
 
```bash
mkdir my-keypom-project && cd my-keypom-project
```

Next, you'll want to create a default `package.json` file using the following command. You can accept all default values.
```bash
npm init
```

At this point, your project structure should look like this. 
```bash
/my-keypom-project
├── package.json
```

If you open `package.json`, you should see this.

<details>
<summary>Default package.json</summary>
<p>

``` bash
{
  "name": "my-keypom-project",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}
```

</p>
</details>

The next step is to create an empty JavaScript file.
<Tabs>
<TabItem value="Mac/Lnx" label="Mac OS/Linux">

```bash
touch simple-keypom.js
```

</TabItem>
<TabItem value="WNDS" label="Windows">

```bash
fsutil file createnew simple-keypom.js 0
```

</TabItem>
</Tabs>

Finally, the last step is to install the Keypom JS SDK.
```bash
npm install @keypom/core
```

After installing the SDK, your `package.json` file should now look slightly different.

<details>
<summary>package.json after installing the SDK</summary>
<p>

```bash
{
  "name": "my-keypom-project",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  # highlight-start
  "dependencies": {
    "@keypom/core": "^1.0.0"
  }
  # highlight-end
}
```

</p>
</details>

With these steps complete, your project folder should look like this. 

```bash
/my-keypom-project
├── simple-keypom.js
├── package.json
├── package-lock.json
├── node_modules
│   └── @keypom/core
│   └── ...
```

You are now ready to begin creating your drop!

---

## Breaking Down the Problem

Creating a simple drop is a four step process:  

1) Establish a connection to the NEAR blockchain.  
2) Create a set of access keys where the assets will be stored.  
3) Use the Keypom SDK to create the drop.  
4) Create linkdrops.  

The following skeleton code can be used as a starting point:
``` js
// Each of the two methods to create this drop will have their own unique set of imports

// Imports used in the Keypom SDK method:
const { initKeypom, createDrop, getEnv, formatLinkdropUrl } = require("@keypom/core");
const { UnencryptedFileSystemKeyStore } = require("@near-js/keystores-node");
const { connect, Near } = require("@near-js/wallet-account");
const path = require("path");
const homedir = require("os").homedir();

// Imports used in the NEAR-API-JS method:
const { parseNearAmount } = require("@near-js/utils");
const { KeyPair } = require("@near-js/crypto")
const { Near } = require("@near-js/wallet-account");
const { Account } = require("@near-js/accounts");
const { UnencryptedFileSystemKeyStore } = require("@near-js/keystores-node");
const path = require("path");
const homedir = require("os").homedir();

async function simpleDropKeypom(){
// STEP 1: Initiate a NEAR connection.

// STEP 2: Create a set of access keys 

// STEP 3: Create the drop.

// STEP 4: Create linkdrops
}

simpleDropKeypom()

```

---

## Getting Started - Connecting to NEAR
The first step to create a Keypom drop is connecting to the NEAR blockchain.

This is done with `NEAR-API-JS` and consists of the following steps:

1) Create a Keystore, which stores your access keys used to sign transactions   
  * select a network, either `testnet` or `mainnet`  
  * choose a location where the keypairs live, either a folder on your local machine, or in-memory      

2) Define a NEAR configuration using the Keystore  
3) Use the configuration to initialize a connection to NEAR  

More information about this process can be found [here](https://docs.near.org/tools/near-api-js/quick-reference#key-store).

:::note
For simplicity, this tutorial will choose a file-based keystore and point to the `~/.near-credentials` folder on your local machine since this is where most of your keys are stored. For more information about KeyStores, visit NEAR's [official docs](https://docs.near.org/tools/near-api-js/quick-reference#key-store).
:::

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/simple-drop/simple-example.js#L10-L28
```

---

## Creating the Simple Drop
Now that the connection to the NEAR blockchain is set up, the next step is to create the Keypairs and the drop using the Keypom SDK.

`initKeypom` initializes the SDK to allow for interactions with the Keypom smart contracts. Without it, none of the other SDK functions would work as expected. If a NEAR connection is not already present, it will initialize a new one for you. More info on the `initKeypom` function can be found [here](../../keypom-sdk/Core/modules.md#initkeypom).

After `initKeypom` is called, the key generation and drop creation can be done. These two tasks are combined into one function, `createDrop`. This function can be either given a set of pre-created keypairs, **or** it can generate them automatically based on the `numKeys` parameter.

:::tip
Recall that the private keys being generated are used to store the assets. These keys are then embedded within a link.

In a Simple Drop, the assest is $NEAR.
:::

To see what the SDK is doing behind the scenes, a `NEAR-API-JS` equivalent NodeJS script has been provided.

<Tabs>
<TabItem value="KPJS" label="🔑 Keypom SDK">

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/simple-drop/simple-example.js#L30-L45
```

</TabItem>
<TabItem value="NRJS" label="💻 NEAR-API-JS">

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/simple-drop/simple-near-example.js#L34-L59
```

</TabItem>
</Tabs>

:::note
All function parameters and default values for the SDK and Keypom functions can be found in the [SDK Typedocs](../../keypom-sdk/Core/modules.md). For `NEAR-API-JS` functions, their arguments can be found [here](https://docs.near.org/tools/near-api-js/reference)
:::

---

## Creating Linkdrops
The last step in this process is to create the links themselves so that you can easily distribute the assets to people. This is done by embedding the private key, containing the $NEAR, into the link along with the Keypom contract ID.  

With the Keypom SDK, this is all neatly wrapped up in the function [`formatLinkdropUrl`](../../keypom-sdk/Core/modules.md#formatlinkdropurl). You just need to provide the base URL format and the private key you wish to embed.

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/simple-drop/simple-example.js#L47-L53
```

---

## Full Solution
Now that everything has been put together, the final code can be seen below.

<Tabs>
<TabItem value="KPJS" label="🔑 Keypom SDK">

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/simple-drop/simple-example.js#L1-L61
```

</TabItem>
<TabItem value="NRJS" label="💻 NEAR-API-JS">

```js reference
https://github.com/keypom/keypom-docs-examples/blob/8202f0ef88205bfca644ccf5d4d3cfb460f88f15/basic-tutorials/simple-drop/simple-near-example.js#L1-L71
```

</TabItem>
</Tabs>

---

## Testing
### Running the Script
Here, you'll learn how to run the code that was just covered, and what to expect.

To view the completed code, clone the [Keypom Docs Examples](https://github.com/keypom/keypom-docs-examples) repository and navigate to the `basic-tutorials/simple-drop`.
``` bash
git clone https://github.com/keypom/keypom-docs-examples.git && cd keypom-docs-examples/basic-tutorials/simple-drop
```
From there, you can and open the `simple-example.js` file.

To run the code you just cloned, return to the `keypom-docs-examples` directory and install all the necessary packages. 
```bash
cd .. && cd .. && yarn
```

:::caution
Prior to running these scripts, ensure you replace all instances of `keypom-docs-demo.testnet` in the script with the credentials of your account found in your `~/.near-credentials` folder
:::

From there, you can run this Simple Drop script that was made in this tutorial using the following command:
``` bash
yarn basic:simple:keypom
```
:::note
The SDK script is being tested here; use `yarn basic:simple:naj` to test the `NEAR-API-JS` script instead.
:::
This should return a successful drop creation and console log a Public Key and Linkdrop: 
```bash
Public Keys:  [ 'ed25519:CsTpJ3pSZUkkcfVEsA6Fqkgz6BFgmhNfCGzPuqdj24wc' ]
Linkdrops:  [
  'https://testnet.mynearwallet.com/linkdrop/v2.keypom.testnet/CNbTQgJ83dLPvg4ibCQGH9Wi1sJhSQkh4YDXKxibXU3cn66oZP5eqLE83m5z5eTqBKxSvJzmDXH7gYTMXzMEfdk'
]
Keypom Contract Explorer Link: explorer.testnet.near.org/accounts/v2.keypom.testnet.com
```
To see the full console log from this drop creation, see the expandable section below.

<details>
<summary>Console Log of Test</summary>
<p>

``` bash
Receipts: GZegewWCTMfpKWZ8ffpVkRb3fLYjyfnyCvqRRmwRkKSt, 3tueZ12bwu86EYEgPVaMjQJuSUNfWcwnDENQGk6jGzmo
        Log [v2.keypom.testnet]: Current Block Timestamp: 1682352132162930850
        Log [v2.keypom.testnet]: 21 calls with 105000000000000 attached GAS. Pow outcome: 1.8602935. Required Allowance: 20248156910387200000000
        Log [v2.keypom.testnet]: Total required storage Yocto 11170000000000000000000
        Log [v2.keypom.testnet]: Current balance: 8.2496314, 
            Required Deposit: 1.0324181, 
            total_required_storage: 0.01117,
            Drop Fee: 0, 
            Key Fee: 0 Total Key Fee: 0,
            allowance: 0.0202481 total allowance: 0.0202481,
            access key storage: 0.001 total access key storage: 0.001,
            deposits less none FCs: 1 total deposits: 1 lazy registration: false,
            deposits for FCs: 0 total deposits for FCs: 0,
            uses per key: 1
            None FCs: 0,
            length: 1
            GAS to attach: 100000000000000
        Log [v2.keypom.testnet]: New user balance 7.2172133
        Log [v2.keypom.testnet]: Fees collected 0
Public Keys:  [ 'ed25519:CsTpJ3pSZUkkcfVEsA6Fqkgz6BFgmhNfCGzPuqdj24wc' ]
Linkdrops:  [
  'https://testnet.mynearwallet.com/linkdrop/v2.keypom.testnet/CNbTQgJ83dLPvg4ibCQGH9Wi1sJhSQkh4YDXKxibXU3cn66oZP5eqLE83m5z5eTqBKxSvJzmDXH7gYTMXzMEfdk'
]
Keypom Contract Explorer Link: explorer.testnet.near.org/accounts/v2.keypom.testnet.com
```

</p>
</details>

### Claiming and Explorer Transactions
Once you click the link, it will take you to the following NEAR Wallet page, where you will have the choice to claim with an existing account or create a new one.  
<p align="center"> <img src={require("/static/img/docs/basic-tutorials/simple/nw-claim.png").default} alt="Near Wallet claim" width="80%"/> </p>

To check the transactions, click the final link in the console log when you run the script.
``` md
Keypom Contract Explorer Link: explorer.testnet.near.org/accounts/v2.keypom.testnet.com
```

From there, you should be able to see the [`create_drop`](https://explorer.testnet.near.org/transactions/6cQGRMJhmn16LCEDLKWYnFJrz3cAP7zSW36jhFwwk5sT) and [`claim`](https://explorer.testnet.near.org/transactions/BkNe1Dwzer22WW6vVBbCY75qHbkDitYYca7e4cjPTBsJ) transactions. 
<p align="center"> <img src={require("/static/img/docs/basic-tutorials/simple/explorer.png").default} alt="explorer transactions" width="80%"/> </p>

---

## Conclusion
In this tutorial, you learned the basic steps of [creating a simple drop](simple-drops.md#introduction), steps to [initialize](simple-drops.md#getting-started---connecting-to-near) a NEAR blockchain connection, and how to [create](simple-drops.md#creating-the-simple-drop) the keys and drop. You also learned the purpose of the `initKeypom` function and when to use it. Once the drop was created, you constructed a valid linkdrop using the private keys in order to claim the assets.

In the next tutorial, you'll be learning how to create and fund an NFT drop using the Keypom SDK.

'''
'''--- docs/Tutorials/Misc/sign-txn.md ---
# Methods of Signing Transactions
Place holder page to discuss different methods of signing transactions. 
1. Using funder object -> Unencrypted local keystore
2. Wallet object
3. Account object
4. Parsing/Exposing private key
'''
'''--- docs/Tutorials/welcome.md ---
---
sidebar_label: 'Home'
---
# Examples and Tutorials
Welcome to the examples and tutorials section of Keypom's developer documentation. Here you'll learn how to use the power of Keypom to creating some awesome user onboarding experiences.

There are several ways to get started using Keypom.  

## Basic Tutorials

The basic tutorials are meant as introductory guides that will help you create your first Keypom drops and understand the differences between the [types](/Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/introduction.md) of drops and the assets they contain. All drops created in these tutorials skip [drop configurations](../Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/customization-homepage.md) to keep it simple.`

It is recommended you read through the [Getting Started](Basics/getting-started.md) guide before going into the tutorials.

<div class="container">
  <div class="row">
    <div class="col">
      <a href="Basics/simple-drops">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">Simple Drop</h3>
            <p class="neutraltext">Onboarding with $NEAR.</p>
          </div>
        </div>
      </a>
    </div>
    <div class="col">
      <a href="Basics/nft-drops">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">Non-Fungible Token Drops</h3>
              <p class="neutraltext">Share an NFT with a link</p>
          </div>
        </div>
      </a>
    </div>
  </div>
  <div class="row">
    <div class="col">
      <a href="Basics/ft-drops">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">Fungible Token Drop</h3>
              <p class="neutraltext">Send users FTs</p>
          </div>
        </div>
      </a>
    </div>
    <div class="col">
      <a href="Basics/fc-drops">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">Function Call Drops</h3>
              <p class="neutraltext">Keypom's most customizable drop</p>
          </div>
        </div>
      </a>
    </div>
  </div>
</div>
<br></br>

## Advanced Tutorials

These tutorials are meant to provide examples of real world use cases. These can range from ticketing, to seamless DAO onboarding experiences.

<div class="container">
  <div class="row">
    <div class="col">
      <a href="Advanced/ticketing/introduction">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">Ticketing</h3>
            <p class="neutraltext">Supercharge your next event with Keypom.</p>
          </div>
        </div>
      </a>
    </div>
    <div class="col">
      <a href="Advanced/daos/introduction">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">DAO Onboarding</h3>
            <p class="neutraltext">Single-click onboarding into your DAO.</p>
          </div>
        </div>
      </a>
    </div>
  </div>
</div>
<br></br>

Other use cases can range from subscriptions to DAO voting. These other advanced tutorials are currently in progress, stay tuned!

'''
'''--- docs/exec-summary.md ---
# Keypom Executive Summary

> To discover the features and details of Keypom, begin your journey [here](Concepts/welcome.md).

Keypom provides **zero friction onboarding** and transactions for NEAR. We allow people to **experience** the value of blockchain technology *regardless of if they have a wallet or not*. 

All of the complications such as seed-phrases, private keys, transactions and other crypto jargon can be abstracted away from the end-user. We provide a means for people to use decentralized applications **without knowing they’re on-chain**.

Our goal is to be a community driven, public good that aims to show the world what is possible when you push NEAR’s technology to its limits. For the foreseeable future, our APIs (the Keypom Protocol) will be completely **fee-free**. Our entire solution is on-chain. There are no centralized databases and everything is run using NEAR smart contracts.

Our debut talk at NEARCON can be found [here](https://www.youtube.com/watch?v=J-BOnfhHV50&ab_channel=MattLockyer).

## The Blockchain Problem
Blockchain technology comes with many benefits such as sovereign ownership, digital rights, privacy, freedom, peer to peer coordination and much more. The problem with this technology, however, is that there is an *extremely high barrier to entry for an everyday individual*. None of it matters if nobody can onboard.

*It’s confusing to create and fund a crypto wallet*. People are unfamiliar with the process, technical jargon, general flow, and need to go through barriers such as KYC. *Why go through such hurdles just to experience an app?* In Web2, users can accrue value from applications without being forced to onboard first. Why can’t Web3 be the same?

## The Keypom Solution
On other chains, a common approach to onboarding users is to send them a pre-created, pre-loaded wallet. Keypom operates on the basis of NEAR’s unique [access key model](https://docs.near.org/concepts/basics/accounts/access-keys) which allows for much more flexibility in the end user-experience. With Keypom, you give the user a special type of access key that can be turned into a wallet. This key can be embedded within a simple Web2 style link that, once clicked, will allow them to input a desired account ID to be created.

The immediate benefit of this approach is that it allows the end-user to *customize their wallet with a name of their choosing* as opposed to being given a pre-created account.

### Sending Assets with Keypom
One of the simplest ways to onboard a user into the NEAR ecosystem is to use the Keypom protocol to create a link and load it with $NEAR and other assets. Behind the scenes, the protocol will associate the access key (embedded within the link) to the specified amount of $NEAR. Anyone who has the link can then gain access to the funds. 

These funds can be used to either create an entirely new named account, or can be sent to an existing wallet if the user already has one. 

The concept of sending NEAR can then be expanded to allow someone to not only load a link with native $NEAR, but also with Fungible Tokens and Non-Fungible Tokens as well.

The end user journey would be that an organization or funder deposits assets (either fungible or non-fungible) into the Keypom contract and generates a unique link. This link is then given to the user that wishes to onboard onto NEAR. When the link is clicked, the user either creates a new account or uses an existing one for the assets to be automatically sent to.

In the NEAR ecosystem, this process is known as a linkdrop. With Keypom, a series of identical linkdrops can be created at once and is referred to as **a drop**.

### Customizable Linkdrops
The Keypom Protocol allows for a huge variety of customizations that can be embedded into the onboarding experience. For example, as the funder, you can specify the amount of times a link can be used before it’s invalidated. Rather than someone using a link once, they can potentially use it many times and receive assets over a long period of time.

### Function Calls with Keypom
The Keypom Protocol can also be used to execute predefined function calls on smart contracts when a link is used. For example, you could create a link that, when claimed, will automatically call a function to register the user into a DAO. This simple idea carries many powerful use-cases that, when paired with the customizable configurations and multi-use links, can create truly immersive and amazing onboarding experiences.

Learn more about Keypom's Drop types below

<div class="container">
  <div class="row">
    <div class="col">
      <a href="Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/simple-drops">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">Simple Drop</h3>
            <p class="neutraltext">Onboarding with $NEAR.</p>
          </div>
        </div>
      </a>
    </div>
    <div class="col">
      <a href="Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/nft-drops">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">Non-Fungible Token Drops</h3>
              <p class="neutraltext">Share an NFT with a link</p>
          </div>
        </div>
      </a>
    </div>
  </div>
  <div class="row">
    <div class="col">
      <a href="Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/ft-drops">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">Fungible Token Drop</h3>
            <p class="neutraltext">Send users FTs</p>
          </div>
        </div>
      </a>
    </div>
    <div class="col">
      <a href="Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/fc-drops">
        <div class="card h-100 card-body">
          <div class="card__body">
            <h3 class="small-bottom-padding">Function Call Drops</h3>
              <p class="neutraltext">Onboard with Keypom's most powerful drop</p>
          </div>
        </div>
      </a>
    </div>
  </div>
</div>

## Use Cases

Here are just a few of the possibilities with Keypom

### NFT Ticketing
The problem with current NFT ticketing systems is that they require users to have a wallet. This is a huge barrier to entry for people that are attending events but don’t have wallets. In addition, there is often no proof of attendance for the event as the NFT is burned in order to get into the event which requires an internet connection.

Keypom aims to solve these problems by having a ticketing system that has the following features.

* Users are not required to have a wallet to enter the event.
* Each ticket is unique and can only be used by one person.
* Attendees are not required to have wifi to gain entry to the event.
* Attendees that did not have a NEAR wallet can get one for free.
* Attendees can choose to receive an NFT proving their attendance at the event. This is commonly known as a [POAP](https://academy.binance.com/en/glossary/proof-of-attendance-protocol-poap).

In addition, some way to provide analytics to event organizers that contains information such as links that were:
* Given out but not clicked at all.
* Clicked but not attended.
* Partially claimed indicating the number of people that attended but did not onboard or receive a POAP.
* Fully claimed indicating the number of people that attended and received a POAP.

### Recurring Payments/Subscriptions
Recurring payments are quite a common situation. Let’s say you need to send someone $50 USDC every week. You could create a key with 5 claims that has a throttle_timestamp of 1 week. You would then pre-load maybe the first week’s deposit of $50 USDC and register 1 use or you could send $500 USDC for the first 10 weeks. At that point, you would simply hand over the key to the user and they can claim once a week.

### Auto-Registration in to DAOs
DAOs are a raging topic in crypto. The problem with DAOs, however, is there is a barrier to entry for users that aren’t familiar with the specific chain they’re built on top of. Users might not have wallets or understand how to interact with contracts. On the contrary, they might be very well versed or immersed in the DAO’s topics. They shouldn’t be required to create a wallet and learn the onboarding process.

With Keypom, you can create a function call drop with the main purpose of registering users into a DAO. For people that have a wallet, this will act as an easy way of registering them with the click of a link. For users that don’t have a wallet and are unfamiliar with NEAR, they can be onboarded and registered into the DAO with the same click of a link.

'''
'''--- docs/keypom-sdk/Core/_category_.yml ---
label: "Core TypeDocs"
position: 0
collapsed: false
'''
'''--- docs/keypom-sdk/Core/interfaces/BasicTransaction.md ---
---
id: "BasicTransaction"
title: "Interface: BasicTransaction"
sidebar_label: "BasicTransaction"
sidebar_position: 0
custom_edit_url: null
---

## Properties

### actions

 **actions**: `Action`[]

#### Defined in

[lib/types/general.ts:108](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L108)

___

### receiverId

 **receiverId**: `string`

#### Defined in

[lib/types/general.ts:106](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L106)

___

### signerId

 **signerId**: `string`

#### Defined in

[lib/types/general.ts:107](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L107)

'''
'''--- docs/keypom-sdk/Core/interfaces/ContractSourceMetadata.md ---
---
id: "ContractSourceMetadata"
title: "Interface: ContractSourceMetadata"
sidebar_label: "ContractSourceMetadata"
sidebar_position: 0
custom_edit_url: null
---

Information returned from `getContractSourceMetadata` about the deployed Keypom contract. This is part of [NEP-330](https://nomicon.io/Standards/SourceMetadata) and
can allow you to view exactly what code is deployed to the contract.

## Properties

### link

 **link**: `string`

Link to the specific commit and code on GitHub that is deployed to the Keypom account

#### Defined in

[lib/types/general.ts:102](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L102)

___

### version

 **version**: `string`

Versioning used by the Keypom developers to indicate which version of the contract is deployed.

#### Defined in

[lib/types/general.ts:100](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L100)

'''
'''--- docs/keypom-sdk/Core/interfaces/CreateDropProtocolArgs.md ---
---
id: "CreateDropProtocolArgs"
title: "Interface: CreateDropProtocolArgs"
sidebar_label: "CreateDropProtocolArgs"
sidebar_position: 0
custom_edit_url: null
---

## Properties

### config

 `Optional` **config**: [`ProtocolReturnedDropConfig`](ProtocolReturnedDropConfig.md)

#### Defined in

[lib/types/params.ts:54](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/params.ts#L54)

___

### deposit\_per\_use

 **deposit\_per\_use**: `string`

#### Defined in

[lib/types/params.ts:51](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/params.ts#L51)

___

### drop\_id

 `Optional` **drop\_id**: `string`

#### Defined in

[lib/types/params.ts:53](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/params.ts#L53)

___

### fc

 `Optional` **fc**: [`ProtocolReturnedFCData`](ProtocolReturnedFCData.md)

#### Defined in

[lib/types/params.ts:60](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/params.ts#L60)

___

### ft

 `Optional` **ft**: [`ProtocolReturnedFTData`](ProtocolReturnedFTData.md)

#### Defined in

[lib/types/params.ts:58](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/params.ts#L58)

___

### metadata

 `Optional` **metadata**: `string`

#### Defined in

[lib/types/params.ts:55](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/params.ts#L55)

___

### nft

 `Optional` **nft**: [`ProtocolReturnedNFTData`](ProtocolReturnedNFTData.md)

#### Defined in

[lib/types/params.ts:59](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/params.ts#L59)

___

### passwords\_per\_use

 `Optional` **passwords\_per\_use**: [`PasswordPerUse`](PasswordPerUse.md)[][]

#### Defined in

[lib/types/params.ts:61](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/params.ts#L61)

___

### public\_keys

 `Optional` **public\_keys**: `string`[]

#### Defined in

[lib/types/params.ts:50](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/params.ts#L50)

___

### required\_gas

 `Optional` **required\_gas**: `string`

#### Defined in

[lib/types/params.ts:56](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/params.ts#L56)

___

### simple

 `Optional` **simple**: [`ProtocolReturnedSimpleData`](ProtocolReturnedSimpleData.md)

#### Defined in

[lib/types/params.ts:57](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/params.ts#L57)

'''
'''--- docs/keypom-sdk/Core/interfaces/CreateOrAddReturn.md ---
---
id: "CreateOrAddReturn"
title: "Interface: CreateOrAddReturn"
sidebar_label: "CreateOrAddReturn"
sidebar_position: 0
custom_edit_url: null
---

Information returned when creating a drop or adding keys via `createDrop` and `addKeys` respectively.

## Properties

### dropId

 **dropId**: `string`

The drop ID for the drop that is being interacted with.

#### Defined in

[lib/types/params.ts:34](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/params.ts#L34)

___

### keys

 `Optional` **keys**: [`GeneratedKeyPairs`](GeneratedKeyPairs.md)

Any keys that were automatically generated.

#### Defined in

[lib/types/params.ts:32](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/params.ts#L32)

___

### requiredDeposit

 `Optional` **requiredDeposit**: `string`

The required deposit that should be attached to the transaction.

#### Defined in

[lib/types/params.ts:30](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/params.ts#L30)

___

### responses

 `Optional` **responses**: `any`

The responses to any transactions that were signed and sent to the network.

#### Defined in

[lib/types/params.ts:26](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/params.ts#L26)

___

### transactions

 `Optional` **transactions**: `Transaction`[]

Information about the transactions if `returnTransactions` is specified in the arguments. This will result in the information being returned instead of signed and sent.

#### Defined in

[lib/types/params.ts:28](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/params.ts#L28)

'''
'''--- docs/keypom-sdk/Core/interfaces/Drop.md ---
---
id: "Drop"
title: "Interface: Drop"
sidebar_label: "Drop"
sidebar_position: 0
custom_edit_url: null
---

Information related to a specific drop.

## Properties

### config

 `Optional` **config**: [`DropConfig`](DropConfig.md)

All drops regardless of their type can have a suite of configurations such as how many uses each key has or how often a key can be used.

#### Defined in

[lib/types/drops.ts:50](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L50)

___

### depositPerUse

 **depositPerUse**: `string`

How much $yoctoNEAR will be transferred anytime a key is used that is part of this drop.

#### Defined in

[lib/types/drops.ts:40](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L40)

___

### dropId

 **dropId**: `string`

Drop ID for this specific drop.

#### Defined in

[lib/types/drops.ts:36](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L36)

___

### fc

 `Optional` **fc**: [`FCData`](FCData.md)

For Function-Call drops, important information needs to be stored such as which methods, the attached deposit, args etc.

#### Defined in

[lib/types/drops.ts:48](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L48)

___

### ft

 `Optional` **ft**: [`FTData`](FTData.md)

For Fungible Token drops, important information such as the amount of tokens to transfer, or contract need to be stored.

#### Defined in

[lib/types/drops.ts:46](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L46)

___

### metadata

 `Optional` **metadata**: `string`

Any extra information about the drop can be stored as metadata. This is up to the drop creator and can be stringified JSON, or any other string.

#### Defined in

[lib/types/drops.ts:52](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L52)

___

### nextKeyId

 **nextKeyId**: `number`

What is the next unique ID that will be given to the next access key added to this drop.

#### Defined in

[lib/types/drops.ts:58](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L58)

___

### nft

 `Optional` **nft**: [`NFTData`](NFTData.md)

For NFT drops, important information such as the token IDs, or contract need to be stored.

#### Defined in

[lib/types/drops.ts:44](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L44)

___

### ownerId

 **ownerId**: `string`

Which account created this drop.

#### Defined in

[lib/types/drops.ts:38](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L38)

___

### registeredUses

 **registeredUses**: `number`

How many key uses are registered for this drop? This is only applicable to simple drops with lazy registrations, FT drops, and NFT drops.

#### Defined in

[lib/types/drops.ts:54](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L54)

___

### requiredGas

 **requiredGas**: `string`

In order to use an access key that's part of this drop, how much Gas *needs* to be attached to the call?

#### Defined in

[lib/types/drops.ts:56](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L56)

___

### simple

 `Optional` **simple**: [`SimpleData`](SimpleData.md)

For simple drops, there are specific, optional configurations.

#### Defined in

[lib/types/drops.ts:42](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L42)

'''
'''--- docs/keypom-sdk/Core/interfaces/DropConfig.md ---
---
id: "DropConfig"
title: "Interface: DropConfig"
sidebar_label: "DropConfig"
sidebar_position: 0
custom_edit_url: null
---

Configurable options for any drop regardless of type.

## Properties

### dropRoot

 `Optional` **dropRoot**: `string`

Override the global root account that all created sub-accounts will have (currently `near` or `testnet`). This allows users to drops that have a custom root.
For example, Fayyr could specify a root of `fayyr.near` By which all sub-accounts will then be `ACCOUNT.fayyr.near`.
It's important to note that this root account *MUST* have a smart contract deployed that has a method `create_account`.

#### Defined in

[lib/types/drops.ts:81](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L81)

___

### sale

 `Optional` **sale**: [`PublicSaleConfig`](PublicSaleConfig.md)

Any information related to primary market sales for access keys added to this drop.

#### Defined in

[lib/types/drops.ts:75](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L75)

___

### time

 `Optional` **time**: [`TimeConfig`](TimeConfig.md)

Any information related to time-based configurations such as a starting date for keys etc.

#### Defined in

[lib/types/drops.ts:69](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L69)

___

### usage

 `Optional` **usage**: [`UsageConfig`](UsageConfig.md)

Any information related to how access keys are used such as which methods they can call or whether an empty drop should be automatically deleted etc.

#### Defined in

[lib/types/drops.ts:72](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L72)

___

### usesPerKey

 `Optional` **usesPerKey**: `number`

How many uses can each key have before it's deleted. If this isn't specified, it defaults to 1 use per key.

#### Defined in

[lib/types/drops.ts:66](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L66)

'''
'''--- docs/keypom-sdk/Core/interfaces/EnvVars.md ---
---
id: "EnvVars"
title: "Interface: EnvVars"
sidebar_label: "EnvVars"
sidebar_position: 0
custom_edit_url: null
---

Important context that is used throughout the SDK. This is generated when `initKeypom` is called and can be retrieved by calling `useKeypom`.
All parameters will start off as undefined until the Keypom SDK is initialized.

## Properties

### attachedGas

 `Optional` **attachedGas**: `string`

The amount of Gas that will be attached to the `claim` and `create_account_and_claim` functions for claiming linkdrops (100 TGas).

#### Defined in

[lib/types/general.ts:77](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L77)

___

### connection

 `Optional` **connection**: `Connection`

The connection instance that is part of the NEAR object

#### Defined in

[lib/types/general.ts:59](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L59)

___

### contractAccount

 `Optional` **contractAccount**: `Account`

The NEAR Account object for the Keypom contract being used. This lets you know the account ID for the contract and can be used to sign transactions for claiming linkdrops.

#### Defined in

[lib/types/general.ts:69](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L69)

___

### contractId

 `Optional` **contractId**: `string`

The account ID where the Keypom contract is deployed to.

#### Defined in

[lib/types/general.ts:79](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L79)

___

### error

 `Optional` **error**: `string`

#### Defined in

[lib/types/general.ts:83](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L83)

___

### execute

 `Optional` **execute**: `any`

#### Defined in

[lib/types/general.ts:87](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L87)

___

### fundingAccount

 `Optional` **fundingAccount**: `Account`

The NEAR Account object for the Funder

#### Defined in

[lib/types/general.ts:65](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L65)

___

### fundingAccountDetails

 `Optional` **fundingAccountDetails**: [`Funder`](Funder.md)

The details for the funder such as any `rootEntropy` or their `secretKey` etc.

#### Defined in

[lib/types/general.ts:67](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L67)

___

### gas

 `Optional` **gas**: `string`

The default amount of Gas that will be attached to transactions (200 TGas).

#### Defined in

[lib/types/general.ts:73](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L73)

___

### gas300

 `Optional` **gas300**: `string`

The max amount of Gas that will be attached to transactions (300 TGas).

#### Defined in

[lib/types/general.ts:75](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L75)

___

### getAccount

 `Optional` **getAccount**: `any`

#### Defined in

[lib/types/general.ts:85](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L85)

___

### keyStore

 `Optional` **keyStore**: `KeyStore`

Which type of KeyStore is used when locating keys and signing transactions throughout the SDK (In Memory, Unencrypted FileStore etc.)

#### Defined in

[lib/types/general.ts:61](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L61)

___

### near

 `Optional` **near**: `Near`

The specific NEAR object that contains important information such as the KeyStore and connection. This is used to interact with the chain and can either be manually passed in or will be automatically created during `initKeypom`

#### Defined in

[lib/types/general.ts:57](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L57)

___

### networkId

 `Optional` **networkId**: `string`

What network is the SDK using (`testnet` or `mainnet`)

#### Defined in

[lib/types/general.ts:63](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L63)

___

### receiverId

 `Optional` **receiverId**: `string`

#### Defined in

[lib/types/general.ts:81](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L81)

___

### supportedKeypomContracts

 `Optional` **supportedKeypomContracts**: `Object`

Object containing the supported Keypom contracts for both mainnet and testnet

#### Type declaration

| Name | Type |
| :------ | :------ |
| `mainnet` | {} |
| `testnet` | {} |

#### Defined in

[lib/types/general.ts:89](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L89)

___

### viewAccount

 `Optional` **viewAccount**: `any`

#### Defined in

[lib/types/general.ts:71](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L71)

___

### viewCall

 `Optional` **viewCall**: `any`

Function that allows you to invoke a view method. This takes in a `receiverId`, `methodName`, and `args`.

#### Defined in

[lib/types/general.ts:91](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L91)

'''
'''--- docs/keypom-sdk/Core/interfaces/FCData.md ---
---
id: "FCData"
title: "Interface: FCData"
sidebar_label: "FCData"
sidebar_position: 0
custom_edit_url: null
---

Information pertaining to all Function-Call drops. This should be passed in if the drop will be a Function-Call drop.

## Properties

### methods

 **methods**: [`Method`](Method.md)[][]

The top level array indicates a different set of methods that can be called for every key use. It is possible that for a given key use, no methods are called thus acting as a "free" key use whereby the use is reflected on-chain but no assets are transferred.
If a given key use does not have an undefined set of methods, when it is used, all the methods in the set will be called.

#### Defined in

[lib/types/fc.ts:73](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/fc.ts#L73)

'''
'''--- docs/keypom-sdk/Core/interfaces/FTData.md ---
---
id: "FTData"
title: "Interface: FTData"
sidebar_label: "FTData"
sidebar_position: 0
custom_edit_url: null
---

Information pertaining to all Fungible-Token drops. This should be passed in if the drop will be used to transfer any fungible tokens.

## Properties

### absoluteAmount

 `Optional` **absoluteAmount**: `string`

Amount of tokens to transfer but considering the decimal amount.
Example: transferring one wNEAR should be passed in as "1000000000000000000000000" and NOT "1"

#### Defined in

[lib/types/ft.ts:22](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/ft.ts#L22)

___

### amount

 `Optional` **amount**: `string`

Human readable format for the amount of tokens to transfer every time the FT key is used.
Example: transferring one wNEAR should be passed in as "1" and NOT "1000000000000000000000000"

#### Defined in

[lib/types/ft.ts:17](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/ft.ts#L17)

___

### contractId

 **contractId**: `string`

Which contract do the FTs belong to?

#### Defined in

[lib/types/ft.ts:8](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/ft.ts#L8)

___

### senderId

 `Optional` **senderId**: `string`

By default, anyone can fund your drop with FTs. This field allows you to set a specific account ID that will be locked into sending the FTs.

#### Defined in

[lib/types/ft.ts:12](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/ft.ts#L12)

'''
'''--- docs/keypom-sdk/Core/interfaces/Funder.md ---
---
id: "Funder"
title: "Interface: Funder"
sidebar_label: "Funder"
sidebar_position: 0
custom_edit_url: null
---

Outlines how the structure of the *funder* object should be passed into `initKeypom` or `updateFunder`. This contains important information such as the
secret key, account ID and any root entropy associated with the account.

**`Throws`**

if neither `secretKey` or `seedPhrase` are provided. One of these need to be passed in.

## Properties

### accountId

 **accountId**: `string`

The account ID of the funder that will be used to sign transactions.

#### Defined in

[lib/types/general.ts:35](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L35)

___

### fundingKeyPair

 `Optional` **fundingKeyPair**: `KeyPair`

#### Defined in

[lib/types/general.ts:48](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L48)

___

### rootEntropy

 `Optional` **rootEntropy**: `string`

When interacting with the SDK, there are several places where KeyPairs can be generated automatically rather than you having to pass them in.
For example, during `createDrop` and `addKeys`, if `publicKeys` isn't passed in, the SDK will generate `numKeys` number of keys automatically.
These generated keys can either be completely random or deterministically generated based off some entropy. If `rootEntropy` is provided, all the
keys that are auto-generated will be based off this entropy.

#### Defined in

[lib/types/general.ts:46](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L46)

___

### secretKey

 `Optional` **secretKey**: `string`

A valid private key associated with the funder's account. This can be function-call or full access (depending on what limitations and security measures are in place).

#### Defined in

[lib/types/general.ts:37](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L37)

___

### seedPhrase

 `Optional` **seedPhrase**: `string`

12 word seedphrase that can be used to derive the `secretKey`. If this is present, it will override the passed in `secretKey`.

#### Defined in

[lib/types/general.ts:39](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L39)

'''
'''--- docs/keypom-sdk/Core/interfaces/FungibleTokenMetadata.md ---
---
id: "FungibleTokenMetadata"
title: "Interface: FungibleTokenMetadata"
sidebar_label: "FungibleTokenMetadata"
sidebar_position: 0
custom_edit_url: null
---

General structure of Fungible Token Metadata as per official NEP-148 standard (https://github.com/near/NEPs/blob/master/neps/nep-0148.md).

## Properties

### decimals

 **decimals**: `number`

Used in frontends to show the proper significant digits of a token. This concept is explained well in this OpenZeppelin post (https://docs.openzeppelin.com/contracts/3.x/erc20#a-note-on-decimals).

#### Defined in

[lib/types/ft.ts:36](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/ft.ts#L36)

___

### icon

 `Optional` **icon**: `string`

A small image associated with this token. Must be a data URL, to help consumers display it quickly while protecting user data.
Recommendation: use optimized SVG, which can result in high-resolution images with only 100s of bytes of storage cost.
(Note that these storage costs are incurred to the token owner/deployer, but that querying these icons is a very cheap & cacheable read operation for all consumers of the contract and the RPC nodes that serve the data.)
Recommendation: create icons that will work well with both light-mode and dark-mode websites by either using middle-tone color schemes, or by embedding media queries in the SVG.

#### Defined in

[lib/types/ft.ts:43](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/ft.ts#L43)

___

### name

 **name**: `string`

The human-readable name of the token.

#### Defined in

[lib/types/ft.ts:32](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/ft.ts#L32)

___

### reference

 `Optional` **reference**: `string`

A link to a valid JSON file containing various keys offering supplementary details on the token. Example: /ipfs/QmdmQXB2mzChmMeKY47C43LxUdg1NDJ5MWcKMKxDu7RgQm, https://example.com/token.json, etc. If the information given in this document conflicts with the on-chain attributes, the values in reference shall be considered the source of truth.

#### Defined in

[lib/types/ft.ts:45](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/ft.ts#L45)

___

### reference\_hash

 `Optional` **reference\_hash**: `string`

The base64-encoded sha256 hash of the JSON file contained in the reference field. This is to guard against off-chain tampering.

#### Defined in

[lib/types/ft.ts:47](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/ft.ts#L47)

___

### spec

 **spec**: `string`

A string. Should be ft-1.0.0 to indicate that a Fungible Token contract adheres to the current versions of this Metadata and the Fungible Token Core specs. This will allow consumers of the Fungible Token to know if they support the features of a given contract.

#### Defined in

[lib/types/ft.ts:30](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/ft.ts#L30)

___

### symbol

 **symbol**: `string`

The abbreviation, like wETH or AMPL.

#### Defined in

[lib/types/ft.ts:34](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/ft.ts#L34)

'''
'''--- docs/keypom-sdk/Core/interfaces/GeneratedKeyPairs.md ---
---
id: "GeneratedKeyPairs"
title: "Interface: GeneratedKeyPairs"
sidebar_label: "GeneratedKeyPairs"
sidebar_position: 0
custom_edit_url: null
---

For each generated KeyPair (either through `createDrop`, `addKeys` or `generateKeys`), the public and private keys are returned.
In addition, the actual KeyPair objects are returned as well.

## Properties

### keyPairs

 **keyPairs**: `KeyPair`[]

Actual KeyPair objects that can be used to sign messages, verify signatures, and get the public and private keys

#### Defined in

[lib/types/general.ts:20](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L20)

___

### publicKeys

 **publicKeys**: `string`[]

Set of public keys that were generated

#### Defined in

[lib/types/general.ts:22](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L22)

___

### secretKeys

 **secretKeys**: `string`[]

Set of private keys that were generated

#### Defined in

[lib/types/general.ts:24](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L24)

'''
'''--- docs/keypom-sdk/Core/interfaces/KeyInfo.md ---
---
id: "KeyInfo"
title: "Interface: KeyInfo"
sidebar_label: "KeyInfo"
sidebar_position: 0
custom_edit_url: null
---

Important information returned in many view calls regarding a specific access key.

## Properties

### allowance

 **allowance**: `number`

How much allowance does the key have left (measured in $yoctoNEAR). When the key is deleted, this is refunded to the funder's balance.

#### Defined in

[lib/types/drops.ts:25](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L25)

___

### curKeyUse

 **curKeyUse**: `number`

Which use is the key currently on? For single-use keys, this is always 1.

#### Defined in

[lib/types/drops.ts:16](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L16)

___

### dropId

 **dropId**: `string`

Drop ID for the specific drop that the key belongs to.

#### Defined in

[lib/types/drops.ts:11](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L11)

___

### keyId

 **keyId**: `number`

The unique ID associated to this key. IDs are *not* unique across drops but they are unique for any key in the drop.

#### Defined in

[lib/types/drops.ts:28](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L28)

___

### lastUsed

 **lastUsed**: `number`

At what timestamp was the key last used? Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/drops.ts:22](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L22)

___

### publicKey

 **publicKey**: `string`

Public key for this access key.

#### Defined in

[lib/types/drops.ts:13](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L13)

___

### remainingUses

 **remainingUses**: `number`

How many uses this key has left before it's deleted.

#### Defined in

[lib/types/drops.ts:19](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L19)

'''
'''--- docs/keypom-sdk/Core/interfaces/Method.md ---
---
id: "Method"
title: "Interface: Method"
sidebar_label: "Method"
sidebar_position: 0
custom_edit_url: null
---

Outlines the information needed for any given method as part of a Function-Call drop.
Each individual key use can have an array of Methods that can be called.

## Properties

### accountIdField

 `Optional` **accountIdField**: `string`

Specifies what field Keypom should auto-inject the account that claimed the drop's ID into when calling the function.
As an example, if the methodName was `nft_mint` and it expected a field `receiver_id` to be passed in, indicating who should receive the token, then the `accountIdField` would be `receiver_id`.
To insert into nested objects, use periods to separate. For example, to insert into args.metadata.field, you would specify "metadata.field"

#### Defined in

[lib/types/fc.ts:34](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/fc.ts#L34)

___

### args

 **args**: `string`

What arguments should be passed to the method. This should be in stringified JSON.

#### Defined in

[lib/types/fc.ts:19](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/fc.ts#L19)

___

### attachedDeposit

 **attachedDeposit**: `string`

How much yoctoNEAR should be attached to the call.

#### Defined in

[lib/types/fc.ts:23](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/fc.ts#L23)

___

### attachedGas

 `Optional` **attachedGas**: `string`

How much gas to attach to this method call. If none, all the gas is split between the parallel method calls in a given claim.
If this is specified, the key can ONLY be used to call `claim` and no `deposit_per_use` can be specified. This leads the key to act like a method calling proxy instead of a linkdrop.

#### Defined in

[lib/types/fc.ts:28](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/fc.ts#L28)

___

### dropIdField

 `Optional` **dropIdField**: `string`

Specifies what field Keypom should auto-inject the drops ID into when calling the function.
As an example, if an NFT contract expected the Keypom drop ID to be passed in as the field `keypom_drop_id` in order to gate access to who can mint NFTs, then the `dropIdField` would be `keypom_drop_id`.
To insert into nested objects, use periods to separate. For example, to insert into args.metadata.field, you would specify "metadata.field"

#### Defined in

[lib/types/fc.ts:40](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/fc.ts#L40)

___

### funderIdField

 `Optional` **funderIdField**: `string`

Specifies what field Keypom should auto-inject the drop funder's account ID into when calling the function.
As an example, if an NFT contract wanted to gate only users that had a key coming from a specific funder's drops, it could expect a field called `keypom_funder_id` and the `funderIdField` would be `keypom_funder_id`.
To insert into nested objects, use periods to separate. For example, to insert into args.metadata.field, you would specify "metadata.field"

#### Defined in

[lib/types/fc.ts:52](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/fc.ts#L52)

___

### keyIdField

 `Optional` **keyIdField**: `string`

Specifies what field Keypom should auto-inject the key's ID into when calling the function.
As an example, if an NFT contract wanted to gate only users with an odd key ID to be able to mint an NFT and their parameter was called `keypom_key_id`, then the `keyIdField` would be `keypom_key_id`.
To insert into nested objects, use periods to separate. For example, to insert into args.metadata.field, you would specify "metadata.field"

#### Defined in

[lib/types/fc.ts:46](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/fc.ts#L46)

___

### methodName

 **methodName**: `string`

The method that should be invoked on the `receiverId`'s contract.

#### Defined in

[lib/types/fc.ts:15](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/fc.ts#L15)

___

### receiverId

 **receiverId**: `string`

The account ID that the contract is deployed to that the method will be called on.

#### Defined in

[lib/types/fc.ts:11](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/fc.ts#L11)

___

### receiverToClaimer

 `Optional` **receiverToClaimer**: `boolean`

If set to true, the claiming account ID will be the receiver ID of the method call.
This receiver must be a valid account and non-malicious (cannot be set to the keypom contract)

#### Defined in

[lib/types/fc.ts:57](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/fc.ts#L57)

___

### userArgsRule

 `Optional` **userArgsRule**: ``"AllUser"`` \| ``"FunderPreferred"`` \| ``"UserPreferred"``

What permissions does the user have when providing custom arguments to the function call?
By default, the user cannot provide any custom arguments

#### Defined in

[lib/types/fc.ts:62](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/fc.ts#L62)

'''
'''--- docs/keypom-sdk/Core/interfaces/NFTData.md ---
---
id: "NFTData"
title: "Interface: NFTData"
sidebar_label: "NFTData"
sidebar_position: 0
custom_edit_url: null
---

General structure of a Non-Fungible Token drop. This should be passed into `createDrop` if you wish to have an NFT drop.

## Properties

### contractId

 **contractId**: `string`

The account ID that the NFT contract is deployed to. This contract is where all the NFTs for the specific drop must come from.

#### Defined in

[lib/types/nft.ts:6](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L6)

___

### senderId

 `Optional` **senderId**: `string`

By default, anyone can fund your drop with NFTs. This field allows you to set a specific account ID that will be locked into sending the NFTs.

#### Defined in

[lib/types/nft.ts:8](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L8)

___

### tokenIds

 `Optional` **tokenIds**: `string`[]

If there are any token IDs that you wish to be automatically sent to the Keypom contract in order to register keys as part of `createDrop`, specify them here.
A maximum of 2 token IDs can be sent as part of the transaction. If you wish to register more keys by sending more NFTs, you must do this in a separate call by invoking
the `nftTransferCall` method separately.

#### Defined in

[lib/types/nft.ts:14](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L14)

'''
'''--- docs/keypom-sdk/Core/interfaces/NonFungibleTokenMetadata.md ---
---
id: "NonFungibleTokenMetadata"
title: "Interface: NonFungibleTokenMetadata"
sidebar_label: "NonFungibleTokenMetadata"
sidebar_position: 0
custom_edit_url: null
---

General structure of Non-Fungible Token Metadata (in camelCase) as per official NEP-177 standard (https://github.com/near/NEPs/blob/master/neps/nep-0177.md).

## Properties

### copies

 `Optional` **copies**: `number`

number of copies of this set of metadata in existence when token was minted.

#### Defined in

[lib/types/nft.ts:76](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L76)

___

### description

 `Optional` **description**: `string`

free-form description

#### Defined in

[lib/types/nft.ts:70](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L70)

___

### expiresAt

 `Optional` **expiresAt**: `number`

When token expires, Unix epoch in milliseconds

#### Defined in

[lib/types/nft.ts:80](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L80)

___

### extra

 `Optional` **extra**: `string`

anything extra the NFT wants to store on-chain. Can be stringified JSON.

#### Defined in

[lib/types/nft.ts:86](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L86)

___

### issuedAt

 `Optional` **issuedAt**: `number`

When token was issued or minted, Unix epoch in milliseconds

#### Defined in

[lib/types/nft.ts:78](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L78)

___

### media

 `Optional` **media**: `string`

URL to associated media, preferably to decentralized, content-addressed storage

#### Defined in

[lib/types/nft.ts:72](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L72)

___

### mediaHash

 `Optional` **mediaHash**: `string`

Base64-encoded sha256 hash of content referenced by the `media` field. Required if `media` is included.

#### Defined in

[lib/types/nft.ts:74](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L74)

___

### reference

 `Optional` **reference**: `string`

URL to an off-chain JSON file with more info.

#### Defined in

[lib/types/nft.ts:88](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L88)

___

### referenceHash

 `Optional` **referenceHash**: `string`

Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.

#### Defined in

[lib/types/nft.ts:90](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L90)

___

### startsAt

 `Optional` **startsAt**: `number`

When token starts being valid, Unix epoch in milliseconds

#### Defined in

[lib/types/nft.ts:82](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L82)

___

### title

 `Optional` **title**: `string`

ex. "Arch Nemesis: Mail Carrier" or "Parcel #5055"

#### Defined in

[lib/types/nft.ts:68](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L68)

___

### updatedAt

 `Optional` **updatedAt**: `number`

When token was last updated, Unix epoch in milliseconds

#### Defined in

[lib/types/nft.ts:84](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L84)

'''
'''--- docs/keypom-sdk/Core/interfaces/PasswordPerUse.md ---
---
id: "PasswordPerUse"
title: "Interface: PasswordPerUse"
sidebar_label: "PasswordPerUse"
sidebar_position: 0
custom_edit_url: null
---

Keeps track of the password for a given key use. This should be passed in as an array for each key that has passwords.

## Properties

### key\_use

 **key\_use**: `number`

Which use does the password belong to? These uses are *NOT* zero-indexed so the first use corresponds to `1` not `0`.

#### Defined in

[lib/types/drops.ts:196](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L196)

___

### pw

 **pw**: `string`

The password for this given use

#### Defined in

[lib/types/drops.ts:194](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L194)

'''
'''--- docs/keypom-sdk/Core/interfaces/ProtocolReturnedDrop.md ---
---
id: "ProtocolReturnedDrop"
title: "Interface: ProtocolReturnedDrop"
sidebar_label: "ProtocolReturnedDrop"
sidebar_position: 0
custom_edit_url: null
---

Drop information returned from the Protocol. This interface is exactly the same as the `Drop`, except all the fields are
snake cased instead of camel cased due to what the Protocol returns.

## Properties

### config

 `Optional` **config**: [`ProtocolReturnedDropConfig`](ProtocolReturnedDropConfig.md)

All drops regardless of their type can have a suite of configurations such as how many uses each key has or how often a key can be used.

#### Defined in

[lib/types/protocol.ts:49](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L49)

___

### deposit\_per\_use

 **deposit\_per\_use**: `string`

How much $yoctoNEAR will be transferred anytime a key is used that is part of this drop.

#### Defined in

[lib/types/protocol.ts:39](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L39)

___

### drop\_id

 **drop\_id**: `string`

Drop ID for this specific drop.

#### Defined in

[lib/types/protocol.ts:35](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L35)

___

### fc

 `Optional` **fc**: [`ProtocolReturnedFCData`](ProtocolReturnedFCData.md)

For Function-Call drops, important information needs to be stored such as which methods, the attached deposit, args etc.

#### Defined in

[lib/types/protocol.ts:47](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L47)

___

### ft

 `Optional` **ft**: [`ProtocolReturnedFTData`](ProtocolReturnedFTData.md)

For Fungible Token drops, important information such as the amount of tokens to transfer, or contract need to be stored.

#### Defined in

[lib/types/protocol.ts:45](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L45)

___

### keys

 `Optional` **keys**: [`ProtocolReturnedKeyInfo`](ProtocolReturnedKeyInfo.md)[]

If calling `getDrops` or `getDropInformation` and `withKeys` is passed in as true, an extra view call will be done to get a set of keys that are currently on the drop.

#### Defined in

[lib/types/protocol.ts:59](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L59)

___

### metadata

 `Optional` **metadata**: `string`

Any extra information about the drop can be stored as metadata. This is up to the drop creator and can be stringified JSON, or any other string.

#### Defined in

[lib/types/protocol.ts:51](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L51)

___

### next\_key\_id

 **next\_key\_id**: `number`

What is the next unique ID that will be given to the next access key added to this drop.

#### Defined in

[lib/types/protocol.ts:57](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L57)

___

### nft

 `Optional` **nft**: [`ProtocolReturnedNFTData`](ProtocolReturnedNFTData.md)

For NFT drops, important information such as the token IDs, or contract need to be stored.

#### Defined in

[lib/types/protocol.ts:43](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L43)

___

### owner\_id

 **owner\_id**: `string`

Which account created this drop.

#### Defined in

[lib/types/protocol.ts:37](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L37)

___

### registered\_uses

 **registered\_uses**: `number`

How many key uses are registered for this drop? This is only applicable to simple drops with lazy registrations, FT drops, and NFT drops.

#### Defined in

[lib/types/protocol.ts:53](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L53)

___

### required\_gas

 **required\_gas**: `string`

In order to use an access key that's part of this drop, how much Gas *needs* to be attached to the call?

#### Defined in

[lib/types/protocol.ts:55](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L55)

___

### simple

 `Optional` **simple**: [`ProtocolReturnedSimpleData`](ProtocolReturnedSimpleData.md)

For simple drops, there are specific, optional configurations.

#### Defined in

[lib/types/protocol.ts:41](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L41)

'''
'''--- docs/keypom-sdk/Core/interfaces/ProtocolReturnedDropConfig.md ---
---
id: "ProtocolReturnedDropConfig"
title: "Interface: ProtocolReturnedDropConfig"
sidebar_label: "ProtocolReturnedDropConfig"
sidebar_position: 0
custom_edit_url: null
---

Drop config returned from the Protocol. This interface is exactly the same as the `DropConfig`, except all the fields are
snake cased instead of camel cased due to what the Protocol returns.

## Properties

### root\_account\_id

 `Optional` **root\_account\_id**: `string`

Override the global root account that all created sub-accounts will have (currently `near` or `testnet`). This allows users to drops that have a custom root.
For example, Fayyr could specify a root of `fayyr.near` By which all sub-accounts will then be `ACCOUNT.fayyr.near`.
It's important to note that this root account *MUST* have a smart contract deployed that has a method `create_account`.

#### Defined in

[lib/types/protocol.ts:83](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L83)

___

### sale

 `Optional` **sale**: [`ProtocolReturnedPublicSaleConfig`](ProtocolReturnedPublicSaleConfig.md)

#### Defined in

[lib/types/protocol.ts:76](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L76)

___

### time

 `Optional` **time**: [`ProtocolReturnedTimeConfig`](ProtocolReturnedTimeConfig.md)

Any information related to time-based configurations such as a starting date for keys etc.

#### Defined in

[lib/types/protocol.ts:71](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L71)

___

### usage

 `Optional` **usage**: [`ProtocolReturnedUsageConfig`](ProtocolReturnedUsageConfig.md)

Any information related to how access keys are used such as which methods they can call or whether an empty drop should be automatically deleted etc.

#### Defined in

[lib/types/protocol.ts:74](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L74)

___

### uses\_per\_key

 `Optional` **uses\_per\_key**: `number`

How many uses can each key have before it's deleted. If this isn't specified, it defaults to 1 use per key.

#### Defined in

[lib/types/protocol.ts:68](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L68)

'''
'''--- docs/keypom-sdk/Core/interfaces/ProtocolReturnedFCData.md ---
---
id: "ProtocolReturnedFCData"
title: "Interface: ProtocolReturnedFCData"
sidebar_label: "ProtocolReturnedFCData"
sidebar_position: 0
custom_edit_url: null
---

FC Data returned from the Protocol. This interface is exactly the same as the `FCData`, except all the fields are
snake cased instead of camel cased due to what the Protocol returns.

## Properties

### methods

 **methods**: [`ProtocolReturnedMethod`](ProtocolReturnedMethod.md)[][]

The top level array indicates a different set of methods that can be called for every key use. It is possible that for a given key use, no methods are called thus acting as a "free" key use whereby the use is reflected on-chain but no assets are transferred.
If a given key use does not have an undefined set of methods, when it is used, all the methods in the set will be called.

#### Defined in

[lib/types/protocol.ts:300](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L300)

'''
'''--- docs/keypom-sdk/Core/interfaces/ProtocolReturnedFTData.md ---
---
id: "ProtocolReturnedFTData"
title: "Interface: ProtocolReturnedFTData"
sidebar_label: "ProtocolReturnedFTData"
sidebar_position: 0
custom_edit_url: null
---

FT Data returned from the Protocol. This interface is exactly the same as the `FTData`, except all the fields are
snake cased instead of camel cased due to what the Protocol returns.

## Properties

### balance\_per\_use

 `Optional` **balance\_per\_use**: `string`

Amount of tokens to transfer but considering the decimal amount.
Example: transferring one wNEAR should be passed in as "1000000000000000000000000" and NOT "1"

#### Defined in

[lib/types/protocol.ts:226](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L226)

___

### contract\_id

 **contract\_id**: `string`

Which contract do the FTs belong to?

#### Defined in

[lib/types/protocol.ts:217](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L217)

___

### sender\_id

 `Optional` **sender\_id**: `string`

By default, anyone can fund your drop with FTs. This field allows you to set a specific account ID that will be locked into sending the FTs.

#### Defined in

[lib/types/protocol.ts:221](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L221)

'''
'''--- docs/keypom-sdk/Core/interfaces/ProtocolReturnedKeyInfo.md ---
---
id: "ProtocolReturnedKeyInfo"
title: "Interface: ProtocolReturnedKeyInfo"
sidebar_label: "ProtocolReturnedKeyInfo"
sidebar_position: 0
custom_edit_url: null
---

Key information returned from the Protocol. This interface is exactly the same as the `KeyInfo`, except all the fields are
snake cased instead of camel cased due to what the Protocol returns.

## Properties

### allowance

 **allowance**: `number`

How much allowance does the key have left (measured in $yoctoNEAR). When the key is deleted, this is refunded to the funder's balance.

#### Defined in

[lib/types/protocol.ts:23](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L23)

___

### cur\_key\_use

 **cur\_key\_use**: `number`

Which use is the key currently on? For single-use keys, this is always 1.

#### Defined in

[lib/types/protocol.ts:14](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L14)

___

### drop\_id

 **drop\_id**: `string`

Drop ID for the specific drop that the key belongs to.

#### Defined in

[lib/types/protocol.ts:9](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L9)

___

### key\_id

 **key\_id**: `number`

The unique ID associated to this key. IDs are *not* unique across drops but they are unique for any key in the drop.

#### Defined in

[lib/types/protocol.ts:26](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L26)

___

### last\_used

 **last\_used**: `number`

At what timestamp was the key last used? Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/protocol.ts:20](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L20)

___

### public\_key

 **public\_key**: `string`

Public key for this access key.

#### Defined in

[lib/types/protocol.ts:11](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L11)

___

### remaining\_uses

 **remaining\_uses**: `number`

How many uses this key has left before it's deleted.

#### Defined in

[lib/types/protocol.ts:17](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L17)

'''
'''--- docs/keypom-sdk/Core/interfaces/ProtocolReturnedMethod.md ---
---
id: "ProtocolReturnedMethod"
title: "Interface: ProtocolReturnedMethod"
sidebar_label: "ProtocolReturnedMethod"
sidebar_position: 0
custom_edit_url: null
---

Method information returned from the Protocol. This interface is exactly the same as the `Method`, except all the fields are
snake cased instead of camel cased due to what the Protocol returns.

## Properties

### account\_id\_field

 `Optional` **account\_id\_field**: `string`

Specifies what field Keypom should auto-inject the account that claimed the drop's ID into when calling the function.
As an example, if the methodName was `nft_mint` and it expected a field `receiver_id` to be passed in, indicating who should receive the token, then the `accountIdField` would be `receiver_id`.
To insert into nested objects, use periods to separate. For example, to insert into args.metadata.field, you would specify "metadata.field"

#### Defined in

[lib/types/protocol.ts:260](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L260)

___

### args

 **args**: `string`

What arguments should be passed to the method. This should be in stringified JSON.

#### Defined in

[lib/types/protocol.ts:245](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L245)

___

### attached\_deposit

 **attached\_deposit**: `string`

How much yoctoNEAR should be attached to the call.

#### Defined in

[lib/types/protocol.ts:249](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L249)

___

### attached\_gas

 `Optional` **attached\_gas**: `string`

How much gas to attach to this method call. If none, all the gas is split between the parallel method calls in a given claim.
If this is specified, the key can ONLY be used to call `claim` and no `deposit_per_use` can be specified. This leads the key to act like a method calling proxy instead of a linkdrop.

#### Defined in

[lib/types/protocol.ts:254](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L254)

___

### drop\_id\_field

 `Optional` **drop\_id\_field**: `string`

Specifies what field Keypom should auto-inject the drops ID into when calling the function.
As an example, if an NFT contract expected the Keypom drop ID to be passed in as the field `keypom_drop_id` in order to gate access to who can mint NFTs, then the `dropIdField` would be `keypom_drop_id`.
To insert into nested objects, use periods to separate. For example, to insert into args.metadata.field, you would specify "metadata.field"

#### Defined in

[lib/types/protocol.ts:266](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L266)

___

### funder\_id\_field

 `Optional` **funder\_id\_field**: `string`

Specifies what field Keypom should auto-inject the funder's account ID into when calling the function.
As an example, if an NFT contract wanted to gate only users with an odd key ID to be able to mint an NFT and their parameter was called `keypom_key_id`, then the `keyIdField` would be `keypom_key_id`.
To insert into nested objects, use periods to separate. For example, to insert into args.metadata.field, you would specify "metadata.field"

#### Defined in

[lib/types/protocol.ts:278](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L278)

___

### key\_id\_field

 `Optional` **key\_id\_field**: `string`

Specifies what field Keypom should auto-inject the key's ID into when calling the function.
As an example, if an NFT contract wanted to gate only users with an odd key ID to be able to mint an NFT and their parameter was called `keypom_key_id`, then the `keyIdField` would be `keypom_key_id`.
To insert into nested objects, use periods to separate. For example, to insert into args.metadata.field, you would specify "metadata.field"

#### Defined in

[lib/types/protocol.ts:272](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L272)

___

### method\_name

 **method\_name**: `string`

The method that should be invoked on the `receiverId`'s contract.

#### Defined in

[lib/types/protocol.ts:241](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L241)

___

### receiver\_id

 **receiver\_id**: `string`

The account ID that the contract is deployed to that the method will be called on.

#### Defined in

[lib/types/protocol.ts:237](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L237)

___

### receiver\_to\_claimer

 `Optional` **receiver\_to\_claimer**: `boolean`

If set to true, the claiming account ID will be the receiver ID of the method call.
This receiver must be a valid account and non-malicious (cannot be set to the keypom contract)

#### Defined in

[lib/types/protocol.ts:283](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L283)

___

### user\_args\_rule

 `Optional` **user\_args\_rule**: ``"AllUser"`` \| ``"FunderPreferred"`` \| ``"UserPreferred"``

What permissions does the user have when providing custom arguments to the function call?
By default, the user cannot provide any custom arguments

#### Defined in

[lib/types/protocol.ts:288](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L288)

'''
'''--- docs/keypom-sdk/Core/interfaces/ProtocolReturnedNFTData.md ---
---
id: "ProtocolReturnedNFTData"
title: "Interface: ProtocolReturnedNFTData"
sidebar_label: "ProtocolReturnedNFTData"
sidebar_position: 0
custom_edit_url: null
---

NFT Data information returned from the Protocol. This interface is exactly the same as the `NFTData`, except all the fields are
snake cased instead of camel cased due to what the Protocol returns.

## Properties

### contract\_id

 **contract\_id**: `string`

The account ID that the NFT contract is deployed to. This contract is where all the NFTs for the specific drop must come from.

#### Defined in

[lib/types/protocol.ts:204](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L204)

___

### sender\_id

 `Optional` **sender\_id**: `string`

By default, anyone can fund your drop with NFTs. This field allows you to set a specific account ID that will be locked into sending the NFTs.

#### Defined in

[lib/types/protocol.ts:206](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L206)

'''
'''--- docs/keypom-sdk/Core/interfaces/ProtocolReturnedNonFungibleTokenMetadata.md ---
---
id: "ProtocolReturnedNonFungibleTokenMetadata"
title: "Interface: ProtocolReturnedNonFungibleTokenMetadata"
sidebar_label: "ProtocolReturnedNonFungibleTokenMetadata"
sidebar_position: 0
custom_edit_url: null
---

General structure of Non-Fungible Token Metadata as per official NEP-177 standard (https://github.com/near/NEPs/blob/master/neps/nep-0177.md).

## Properties

### copies

 `Optional` **copies**: `number`

number of copies of this set of metadata in existence when token was minted.

#### Defined in

[lib/types/nft.ts:46](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L46)

___

### description

 `Optional` **description**: `string`

free-form description

#### Defined in

[lib/types/nft.ts:40](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L40)

___

### expires\_at

 `Optional` **expires\_at**: `number`

When token expires, Unix epoch in milliseconds

#### Defined in

[lib/types/nft.ts:50](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L50)

___

### extra

 `Optional` **extra**: `string`

anything extra the NFT wants to store on-chain. Can be stringified JSON.

#### Defined in

[lib/types/nft.ts:56](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L56)

___

### issued\_at

 `Optional` **issued\_at**: `number`

When token was issued or minted, Unix epoch in milliseconds

#### Defined in

[lib/types/nft.ts:48](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L48)

___

### media

 `Optional` **media**: `string`

URL to associated media, preferably to decentralized, content-addressed storage

#### Defined in

[lib/types/nft.ts:42](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L42)

___

### media\_hash

 `Optional` **media\_hash**: `string`

Base64-encoded sha256 hash of content referenced by the `media` field. Required if `media` is included.

#### Defined in

[lib/types/nft.ts:44](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L44)

___

### reference

 `Optional` **reference**: `string`

URL to an off-chain JSON file with more info.

#### Defined in

[lib/types/nft.ts:58](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L58)

___

### reference\_hash

 `Optional` **reference\_hash**: `string`

Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.

#### Defined in

[lib/types/nft.ts:60](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L60)

___

### starts\_at

 `Optional` **starts\_at**: `number`

When token starts being valid, Unix epoch in milliseconds

#### Defined in

[lib/types/nft.ts:52](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L52)

___

### title

 `Optional` **title**: `string`

ex. "Arch Nemesis: Mail Carrier" or "Parcel #5055"

#### Defined in

[lib/types/nft.ts:38](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L38)

___

### updated\_at

 `Optional` **updated\_at**: `number`

When token was last updated, Unix epoch in milliseconds

#### Defined in

[lib/types/nft.ts:54](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L54)

'''
'''--- docs/keypom-sdk/Core/interfaces/ProtocolReturnedNonFungibleTokenObject.md ---
---
id: "ProtocolReturnedNonFungibleTokenObject"
title: "Interface: ProtocolReturnedNonFungibleTokenObject"
sidebar_label: "ProtocolReturnedNonFungibleTokenObject"
sidebar_position: 0
custom_edit_url: null
---

General structure of a Non-Fungible Token object as per official NEP-171 standard (https://github.com/near/NEPs/blob/master/neps/nep-0171.md).

## Properties

### approved\_account\_ids

 `Optional` **approved\_account\_ids**: `Map`<`string`, `number`\>

Map of account IDs to approval IDs as per official NEP-178 standard (https://github.com/near/NEPs/blob/master/neps/nep-0178.md).

#### Defined in

[lib/types/nft.ts:28](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L28)

___

### metadata

 `Optional` **metadata**: [`ProtocolReturnedNonFungibleTokenMetadata`](ProtocolReturnedNonFungibleTokenMetadata.md)

Metadata for the token

#### Defined in

[lib/types/nft.ts:26](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L26)

___

### owner\_id

 **owner\_id**: `string`

Account ID of the owner

#### Defined in

[lib/types/nft.ts:24](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L24)

___

### royalty

 `Optional` **royalty**: `Map`<`string`, `number`\>

A mapping of NEAR accounts to the amount each should be paid out as per official NEP-199 standard (https://github.com/near/NEPs/blob/master/neps/nep-0199.md).

#### Defined in

[lib/types/nft.ts:30](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L30)

___

### token\_id

 **token\_id**: `string`

String ID for the token

#### Defined in

[lib/types/nft.ts:22](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/nft.ts#L22)

'''
'''--- docs/keypom-sdk/Core/interfaces/ProtocolReturnedPublicSaleConfig.md ---
---
id: "ProtocolReturnedPublicSaleConfig"
title: "Interface: ProtocolReturnedPublicSaleConfig"
sidebar_label: "ProtocolReturnedPublicSaleConfig"
sidebar_position: 0
custom_edit_url: null
---

Within the config, there are configurable options related to how keys can be sold and a funder can potentially make a profit.

## Properties

### allowlist

 `Optional` **allowlist**: `string`[]

Which accounts are allowed to add keys? If the allowlist is empty, anyone that is not in the blocklist can add keys.

#### Defined in

[lib/types/protocol.ts:173](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L173)

___

### auto\_withdraw\_funds

 `Optional` **auto\_withdraw\_funds**: `boolean`

Should the revenue generated be sent to the funder's account balance or
automatically withdrawn and sent to their NEAR wallet?

#### Defined in

[lib/types/protocol.ts:180](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L180)

___

### blocklist

 `Optional` **blocklist**: `string`[]

Which accounts are NOT allowed to add keys?

#### Defined in

[lib/types/protocol.ts:175](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L175)

___

### end

 `Optional` **end**: `number`

Block timestamp dictating the end of the public sale. If None, keys can be added indefinitely
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/protocol.ts:190](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L190)

___

### max\_num\_keys

 `Optional` **max\_num\_keys**: `number`

Maximum number of keys that can be added to this drop. If None, there is no max.

#### Defined in

[lib/types/protocol.ts:166](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L166)

___

### price\_per\_key

 `Optional` **price\_per\_key**: `string`

Amount of $NEAR that the user needs to attach (if they are not the funder) on top of costs. This amount will be
Automatically sent to the funder's balance. If None, the keys are free to the public.

#### Defined in

[lib/types/protocol.ts:171](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L171)

___

### start

 `Optional` **start**: `number`

Minimum block timestamp before the public sale starts. If None, keys can be added immediately
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/protocol.ts:185](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L185)

'''
'''--- docs/keypom-sdk/Core/interfaces/ProtocolReturnedSimpleData.md ---
---
id: "ProtocolReturnedSimpleData"
title: "Interface: ProtocolReturnedSimpleData"
sidebar_label: "ProtocolReturnedSimpleData"
sidebar_position: 0
custom_edit_url: null
---

## Properties

### lazy\_register

 `Optional` **lazy\_register**: `boolean`

#### Defined in

[lib/types/protocol.ts:195](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L195)

'''
'''--- docs/keypom-sdk/Core/interfaces/ProtocolReturnedTimeConfig.md ---
---
id: "ProtocolReturnedTimeConfig"
title: "Interface: ProtocolReturnedTimeConfig"
sidebar_label: "ProtocolReturnedTimeConfig"
sidebar_position: 0
custom_edit_url: null
---

Time Config information returned from the Protocol. This interface is exactly the same as the `TimeConfig`, except all the fields are
snake cased instead of camel cased due to what the Protocol returns.

## Properties

### end

 `Optional` **end**: `number`

Block timestamp that keys must be used before. If this isn't specified, keys can be used indefinitely.
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/protocol.ts:101](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L101)

___

### interval

 `Optional` **interval**: `number`

Interval of time after the `start_timestamp` that must pass before a key can be used. If multiple intervals pass, the key can be used multiple times.
This has nothing to do With the throttle timestamp. It only pertains to the start timestamp and the current timestamp. The last_used timestamp is not taken into account.
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/protocol.ts:114](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L114)

___

### start

 `Optional` **start**: `number`

Minimum block timestamp before keys can be used. If this isn't specified, keys can be used immediately.
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/protocol.ts:95](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L95)

___

### throttle

 `Optional` **throttle**: `number`

Amount of time that *must* pass in between each key use. If this isn't specified, there is no delay between key uses.
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/protocol.ts:107](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L107)

'''
'''--- docs/keypom-sdk/Core/interfaces/ProtocolReturnedUsageConfig.md ---
---
id: "ProtocolReturnedUsageConfig"
title: "Interface: ProtocolReturnedUsageConfig"
sidebar_label: "ProtocolReturnedUsageConfig"
sidebar_position: 0
custom_edit_url: null
---

Usage Config information returned from the Protocol. This interface is exactly the same as the `UsageConfig`, except all the fields are
snake cased instead of camel cased due to what the Protocol returns.

## Properties

### account\_creation\_fields

 `Optional` **account\_creation\_fields**: `Object`

When calling `create_account` on the root account, which keypom args should be attached to the payload.

#### Type declaration

| Name | Type | Description |
| :------ | :------ | :------ |
| `account_id_field?` | `string` | Specifies what field Keypom should auto-inject the account that claimed the drop's ID into when calling the `create_account` function. |
| `drop_id_field?` | `string` | Specifies what field Keypom should auto-inject the drop's ID into when calling the `create_account` function. |
| `funder_id_field?` | `string` | Specifies what field Keypom should auto-inject the drop funder's account ID into when calling the `create_account` function. |
| `key_id_field?` | `string` | Specifies what field Keypom should auto-inject the key's ID into when calling the `create_account` function. |

#### Defined in

[lib/types/protocol.ts:141](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L141)

___

### auto\_delete\_drop

 `Optional` **auto\_delete\_drop**: `boolean`

When a key is used and deleted, if it results in the drop being empty, should the drop automatically be deleted? If this isn't specified, it defaults to false.

#### Defined in

[lib/types/protocol.ts:134](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L134)

___

### auto\_withdraw

 `Optional` **auto\_withdraw**: `boolean`

In the case where `autoDeleteDrop` is set to true and the drop is the owner's last, should their balance be automatically withdrawn? If this isn't specified, it defaults to false.

#### Defined in

[lib/types/protocol.ts:138](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L138)

___

### permissions

 `Optional` **permissions**: `string`

Specify which methods can be called by the access key (either `claim` or `create_account_and_claim`). If this isn't specified, both methods can be called.

#### Defined in

[lib/types/protocol.ts:125](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L125)

___

### refund\_deposit

 `Optional` **refund\_deposit**: `boolean`

If the method `claim` is called rather than `create_account_and_claim`, should the `deposit_per_use` be refunded to the owner's balance?
If this isn't specified, it defaults to false.

#### Defined in

[lib/types/protocol.ts:130](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/protocol.ts#L130)

'''
'''--- docs/keypom-sdk/Core/interfaces/PublicSaleConfig.md ---
---
id: "PublicSaleConfig"
title: "Interface: PublicSaleConfig"
sidebar_label: "PublicSaleConfig"
sidebar_position: 0
custom_edit_url: null
---

Within the config, there are configurable options related to how keys can be sold and a funder can potentially make a profit.

## Properties

### allowlist

 `Optional` **allowlist**: `string`[]

Which accounts are allowed to add keys? If the allowlist is empty, anyone that is not in the blocklist can add keys.

#### Defined in

[lib/types/drops.ts:169](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L169)

___

### autoWithdrawFunds

 `Optional` **autoWithdrawFunds**: `boolean`

Should the revenue generated be sent to the funder's account balance or
automatically withdrawn and sent to their NEAR wallet?

#### Defined in

[lib/types/drops.ts:176](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L176)

___

### blocklist

 `Optional` **blocklist**: `string`[]

Which accounts are NOT allowed to add keys?

#### Defined in

[lib/types/drops.ts:171](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L171)

___

### end

 `Optional` **end**: `number`

Block timestamp dictating the end of the public sale. If None, keys can be added indefinitely
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/drops.ts:186](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L186)

___

### maxNumKeys

 `Optional` **maxNumKeys**: `number`

Maximum number of keys that can be added to this drop. If None, there is no max.

#### Defined in

[lib/types/drops.ts:161](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L161)

___

### pricePerKeyNEAR

 `Optional` **pricePerKeyNEAR**: `number`

Amount of $NEAR that the user needs to attach (if they are not the funder) on top of costs. This amount will be
Automatically sent to the funder's balance. If None, the keys are free to the public.

#### Defined in

[lib/types/drops.ts:166](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L166)

___

### pricePerKeyYocto

 `Optional` **pricePerKeyYocto**: `string`

#### Defined in

[lib/types/drops.ts:167](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L167)

___

### start

 `Optional` **start**: `number`

Minimum block timestamp before the public sale starts. If None, keys can be added immediately
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/drops.ts:181](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L181)

'''
'''--- docs/keypom-sdk/Core/interfaces/SimpleData.md ---
---
id: "SimpleData"
title: "Interface: SimpleData"
sidebar_label: "SimpleData"
sidebar_position: 0
custom_edit_url: null
---

Specific configurable information for Simple drops.

## Properties

### lazyRegister

 `Optional` **lazyRegister**: `boolean`

If this is set to true, keys can be created and registered AFTER they've been created (for simple and FC drops only).

#### Defined in

[lib/types/simple.ts:6](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/simple.ts#L6)

'''
'''--- docs/keypom-sdk/Core/interfaces/TimeConfig.md ---
---
id: "TimeConfig"
title: "Interface: TimeConfig"
sidebar_label: "TimeConfig"
sidebar_position: 0
custom_edit_url: null
---

Within the config, there are configurable options related to timing such as how often a key can be used.

## Properties

### end

 `Optional` **end**: `number`

Block timestamp that keys must be used before. If this isn't specified, keys can be used indefinitely.
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/drops.ts:98](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L98)

___

### interval

 `Optional` **interval**: `number`

Interval of time after the `start_timestamp` that must pass before a key can be used. If multiple intervals pass, the key can be used multiple times.
This has nothing to do With the throttle timestamp. It only pertains to the start timestamp and the current timestamp. The last_used timestamp is not taken into account.
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/drops.ts:111](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L111)

___

### start

 `Optional` **start**: `number`

Minimum block timestamp before keys can be used. If this isn't specified, keys can be used immediately.
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/drops.ts:92](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L92)

___

### throttle

 `Optional` **throttle**: `number`

Amount of time that *must* pass in between each key use. If this isn't specified, there is no delay between key uses.
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/drops.ts:104](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L104)

'''
'''--- docs/keypom-sdk/Core/interfaces/UsageConfig.md ---
---
id: "UsageConfig"
title: "Interface: UsageConfig"
sidebar_label: "UsageConfig"
sidebar_position: 0
custom_edit_url: null
---

Within the config, there are configurable options related to how keys can be used. What permissions they have, whether an empty drop should be automatically deleted etc.

## Properties

### accountCreationFields

 `Optional` **accountCreationFields**: `Object`

When calling `create_account` on the root account, which keypom args should be attached to the payload.

#### Type declaration

| Name | Type | Description |
| :------ | :------ | :------ |
| `accountIdField?` | `string` | Specifies what field Keypom should auto-inject the account that claimed the drop's ID into when calling the `create_account` function. |
| `dropIdField?` | `string` | Specifies what field Keypom should auto-inject the drop's ID into when calling the `create_account` function. |
| `funderIdField?` | `string` | Specifies what field Keypom should auto-inject the drop funder's account ID into when calling the `create_account` function. |
| `keyIdField?` | `string` | Specifies what field Keypom should auto-inject the key's ID into when calling the `create_account` function. |

#### Defined in

[lib/types/drops.ts:136](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L136)

___

### autoDeleteDrop

 `Optional` **autoDeleteDrop**: `boolean`

When a key is used and deleted, if it results in the drop being empty, should the drop automatically be deleted? If this isn't specified, it defaults to false.

#### Defined in

[lib/types/drops.ts:130](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L130)

___

### autoWithdraw

 `Optional` **autoWithdraw**: `boolean`

When the last key in this drop is used, in the case where `autoDeleteDrop` is set to true and the drop is the owner's last, should their balance be automatically withdrawn? If this isn't specified, it defaults to false.

#### Defined in

[lib/types/drops.ts:134](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L134)

___

### permissions

 `Optional` **permissions**: `string`

Specify which methods can be called by the access key (either `claim` or `create_account_and_claim`). If this isn't specified, both methods can be called.

#### Defined in

[lib/types/drops.ts:121](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L121)

___

### refundDeposit

 `Optional` **refundDeposit**: `boolean`

If the method `claim` is called rather than `create_account_and_claim`, should the `deposit_per_use` be refunded to the owner's balance?
If this isn't specified, it defaults to false.

#### Defined in

[lib/types/drops.ts:126](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/drops.ts#L126)

'''
'''--- docs/keypom-sdk/Core/interfaces/_category_.yml ---
label: "Interfaces"
position: 4
'''
'''--- docs/keypom-sdk/Core/modules.md ---
---
id: "modules"
title: "@keypom/core - v1.0.2"
sidebar_label: "Exports"
sidebar_position: 0.5
custom_edit_url: null
---

## Interfaces

- [BasicTransaction](interfaces/BasicTransaction.md)
- [ContractSourceMetadata](interfaces/ContractSourceMetadata.md)
- [CreateDropProtocolArgs](interfaces/CreateDropProtocolArgs.md)
- [CreateOrAddReturn](interfaces/CreateOrAddReturn.md)
- [Drop](interfaces/Drop.md)
- [DropConfig](interfaces/DropConfig.md)
- [EnvVars](interfaces/EnvVars.md)
- [FCData](interfaces/FCData.md)
- [FTData](interfaces/FTData.md)
- [Funder](interfaces/Funder.md)
- [FungibleTokenMetadata](interfaces/FungibleTokenMetadata.md)
- [GeneratedKeyPairs](interfaces/GeneratedKeyPairs.md)
- [KeyInfo](interfaces/KeyInfo.md)
- [Method](interfaces/Method.md)
- [NFTData](interfaces/NFTData.md)
- [NonFungibleTokenMetadata](interfaces/NonFungibleTokenMetadata.md)
- [PasswordPerUse](interfaces/PasswordPerUse.md)
- [ProtocolReturnedDrop](interfaces/ProtocolReturnedDrop.md)
- [ProtocolReturnedDropConfig](interfaces/ProtocolReturnedDropConfig.md)
- [ProtocolReturnedFCData](interfaces/ProtocolReturnedFCData.md)
- [ProtocolReturnedFTData](interfaces/ProtocolReturnedFTData.md)
- [ProtocolReturnedKeyInfo](interfaces/ProtocolReturnedKeyInfo.md)
- [ProtocolReturnedMethod](interfaces/ProtocolReturnedMethod.md)
- [ProtocolReturnedNFTData](interfaces/ProtocolReturnedNFTData.md)
- [ProtocolReturnedNonFungibleTokenMetadata](interfaces/ProtocolReturnedNonFungibleTokenMetadata.md)
- [ProtocolReturnedNonFungibleTokenObject](interfaces/ProtocolReturnedNonFungibleTokenObject.md)
- [ProtocolReturnedPublicSaleConfig](interfaces/ProtocolReturnedPublicSaleConfig.md)
- [ProtocolReturnedSimpleData](interfaces/ProtocolReturnedSimpleData.md)
- [ProtocolReturnedTimeConfig](interfaces/ProtocolReturnedTimeConfig.md)
- [ProtocolReturnedUsageConfig](interfaces/ProtocolReturnedUsageConfig.md)
- [PublicSaleConfig](interfaces/PublicSaleConfig.md)
- [SimpleData](interfaces/SimpleData.md)
- [TimeConfig](interfaces/TimeConfig.md)
- [UsageConfig](interfaces/UsageConfig.md)

## Type Aliases

### AnyWallet

 **AnyWallet**: `BrowserWalletBehaviour` \| `Wallet` \| `Promise`<`Wallet`\>

#### Defined in

[lib/types/params.ts:19](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/params.ts#L19)

___

### NearKeyPair

 **NearKeyPair**: `KeyPair`

#### Defined in

[lib/types/general.ts:12](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/types/general.ts#L12)

## Variables

### TRIAL\_ERRORS

 `Const` **TRIAL\_ERRORS**: `Object`

#### Type declaration

| Name | Type |
| :------ | :------ |
| `EXIT_EXPECTED` | `string` |
| `INSUFFICIENT_BALANCE` | `string` |
| `INVALID_ACTION` | `string` |

#### Defined in

[lib/trial-accounts/utils.ts:13](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/trial-accounts/utils.ts#L13)

___

### networks

 `Const` **networks**: `Object`

#### Type declaration

| Name | Type |
| :------ | :------ |
| `localnet` | { `networkId`: `string` = 'localnet'; `viewAccountId`: `string` = 'test.near' } |
| `localnet.networkId` | `string` |
| `localnet.viewAccountId` | `string` |
| `mainnet` | { `helperUrl`: `string` = 'https://helper.mainnet.near.org'; `networkId`: `string` = 'mainnet'; `nodeUrl`: `string` = 'https://rpc.mainnet.near.org'; `viewAccountId`: `string` = 'near'; `walletUrl`: `string` = 'https://wallet.near.org' } |
| `mainnet.helperUrl` | `string` |
| `mainnet.networkId` | `string` |
| `mainnet.nodeUrl` | `string` |
| `mainnet.viewAccountId` | `string` |
| `mainnet.walletUrl` | `string` |
| `testnet` | { `helperUrl`: `string` = 'https://helper.testnet.near.org'; `networkId`: `string` = 'testnet'; `nodeUrl`: `string` = 'https://rpc.testnet.near.org'; `viewAccountId`: `string` = 'testnet'; `walletUrl`: `string` = 'https://wallet.testnet.near.org' } |
| `testnet.helperUrl` | `string` |
| `testnet.networkId` | `string` |
| `testnet.nodeUrl` | `string` |
| `testnet.viewAccountId` | `string` |
| `testnet.walletUrl` | `string` |

#### Defined in

[lib/keypom.ts:25](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom.ts#L25)

## Keypom SDK Environment

### accountMappingContract

 `Const` **accountMappingContract**: `Object`

Recovery mapping contracts used to keep track of trial account IDs for given public keys.

#### Type declaration

| Name | Type |
| :------ | :------ |
| `mainnet` | `string` |
| `testnet` | `string` |

#### Defined in

[lib/keypom.ts:93](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom.ts#L93)

___

### supportedKeypomContracts

 `Const` **supportedKeypomContracts**: `Object`

List of supported Keypom contracts that can be used with the SDK.

#### Type declaration

| Name | Type |
| :------ | :------ |
| `localnet` | { `keypom.test.near`: `boolean` = true } |
| `localnet.keypom.test.near` | `boolean` |
| `mainnet` | { `v1-3.keypom.near`: `boolean` = false; `v1-4.keypom.near`: `boolean` = true; `v1.keypom.near`: `boolean` = false; `v2.keypom.near`: `boolean` = true } |
| `mainnet.v1-3.keypom.near` | `boolean` |
| `mainnet.v1-4.keypom.near` | `boolean` |
| `mainnet.v1.keypom.near` | `boolean` |
| `mainnet.v2.keypom.near` | `boolean` |
| `testnet` | { `v1-3.keypom.testnet`: `boolean` = false; `v1-4.keypom.testnet`: `boolean` = true; `v1.keypom.testnet`: `boolean` = false; `v2.keypom.testnet`: `boolean` = true } |
| `testnet.v1-3.keypom.testnet` | `boolean` |
| `testnet.v1-4.keypom.testnet` | `boolean` |
| `testnet.v1.keypom.testnet` | `boolean` |
| `testnet.v2.keypom.testnet` | `boolean` |

#### Defined in

[lib/keypom.ts:51](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom.ts#L51)

___

### supportedLinkdropClaimPages

 `Const` **supportedLinkdropClaimPages**: `Object`

Official linkdrop claim pages for wallets and other applications

#### Type declaration

| Name | Type |
| :------ | :------ |
| `mainnet` | { `keypom`: `string` = 'https://keypom.xyz/claim/CONTRACT\_ID#SECRET\_KEY'; `meteor`: `string` = 'https://wallet.meteorwallet.app/linkdrop/CONTRACT\_ID/SECRET\_KEY'; `mynearwallet`: `string` = 'https://app.mynearwallet.com/linkdrop/CONTRACT\_ID/SECRET\_KEY' } |
| `mainnet.keypom` | `string` |
| `mainnet.meteor` | `string` |
| `mainnet.mynearwallet` | `string` |
| `testnet` | { `keypom`: `string` = 'https://testnet.keypom.xyz/claim/CONTRACT\_ID#SECRET\_KEY'; `meteor`: `string` = 'https://wallet.meteorwallet.app/linkdrop/CONTRACT\_ID/SECRET\_KEY'; `mynearwallet`: `string` = 'https://testnet.mynearwallet.com/linkdrop/CONTRACT\_ID/SECRET\_KEY' } |
| `testnet.keypom` | `string` |
| `testnet.meteor` | `string` |
| `testnet.mynearwallet` | `string` |

#### Defined in

[lib/keypom.ts:74](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom.ts#L74)

___

### getEnv

**getEnv**(): [`EnvVars`](interfaces/EnvVars.md)

#### Returns

[`EnvVars`](interfaces/EnvVars.md)

The environment variables used by the Keypom library.

#### Defined in

[lib/keypom.ts:119](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom.ts#L119)

___

### initKeypom

**initKeypom**(`«destructured»`): `Promise`<`any`\>

Initializes the SDK to allow for interactions with the Keypom Protocol. By default, a new NEAR connection will be established but this can be overloaded by
passing in an existing connection object. In either case, if a funder is passed in, the credentials will be added to the keystore to sign transactions.

To update the funder account, refer to the `updateFunder` function. If you only wish to use view methods and not sign transactions, no funder account is needed.
If you wish to update the Keypom Contract ID being used, refer to the `updateKeypomContractId` function.

**`Example`**

Using a pre-created NEAR connection instance with an UnencryptedFileSystemKeyStore:
```js
const path = require("path");
const homedir = require("os").homedir();
const { KeyPair, keyStores, connect } = require("near-api-js");
const { initKeypom, getDrops } = require("keypom-js");

// Establish the network we wish to work on
const network = "testnet";
// Get the location where the credentials are stored for our KeyStore
const CREDENTIALS_DIR = ".near-credentials";
const credentialsPath = (await path).join(homedir, CREDENTIALS_DIR);
(await path).join;
let keyStore = new keyStores.UnencryptedFileSystemKeyStore(credentialsPath);

// Establish the configuration for the connection
let nearConfig = {
		networkId: network,
		keyStore,
		nodeUrl: `https://rpc.${network}.near.org`,
		walletUrl: `https://wallet.${network}.near.org`,
		helperUrl: `https://helper.${network}.near.org`,
		explorerUrl: `https://explorer.${network}.near.org`,
};
// Connect to the NEAR blockchain and get the connection instance
let near = await connect(nearConfig);

// Initialize the SDK for the given network and NEAR connection
await initKeypom({
		near,
		network
});

// Get the drops for the given owner
const dropsForOwner = await getDrops({accountId: "benjiman.testnet"});
```

**`Example`**

Creating an entirely new NEAR connection instance by using initKeypom and passing in a funder account:
```js
const { initKeypom, getDrops } = require("keypom-js");

// Initialize the SDK for the given network and NEAR connection
await initKeypom({
		network: "testnet",
		funder: {
			accountId: "benji_demo.testnet",
			secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
		}
});

// Get the drops for the given owner
const dropsForOwner = await getDrops({accountId: "benjiman.testnet"});
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `funder?` | [`Funder`](interfaces/Funder.md) | The account that will sign transactions to create drops and interact with the Keypom contract. This account will be added to the KeyStore if provided. If rootEntropy is provided for the funder, all access keys will be derived deterministically based off this string. |
| › `keypomContractId?` | `string` | Instead of using the most up-to-date, default Keypom contract, you can specify a specific account ID to use. If an older version is specified, some features of the SDK might not be usable. |
| › `near?` | `Near` | The NEAR connection instance to use. If not passed in, it will create a new one. |
| › `network?` | `string` | The network to connect to either `mainnet` or `testnet`. If a near object is passed in, this field can be omitted |

#### Returns

`Promise`<`any`\>

If a funder is passed in, its account object is returned. Otherwise, it null is returned.

#### Defined in

[lib/keypom.ts:239](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom.ts#L239)

___

### updateFunder

**updateFunder**(`funder`): `Promise`<`any`\>

Once the SDK is initialized, this function allows the current funder account to be updated. Having a funder is only necessary if you wish to sign transactions on the Keypom Protocol.

**`Example`**

After initializing the SDK, the funder is updated.
```js
const path = require("path");
const homedir = require("os").homedir();
const { KeyPair, keyStores, connect } = require("near-api-js");
const { initKeypom, updateFunder, getDrops } = require("keypom-js");

	// Initialize the SDK for the given network and NEAR connection
	await initKeypom({
		network: "testnet",
	});

	// Update the current funder account
	await updateFunder({
		funder: {
			accountId: "benji_demo.testnet",
			secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
		}
	})

	// Get the drops for the given owner
	const dropsForOwner = await getDrops({accountId: "benjiman.testnet"});
	console.log('dropsForOwner: ', dropsForOwner)

	return;
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `funder` | `Object` | The account that will sign transactions to create drops and interact with the Keypom contract. This account will be added to the KeyStore if provided. If rootEntropy is provided for the funder, all access keys will be derived deterministically based off this string. |
| `funder.funder` | [`Funder`](interfaces/Funder.md) | - |

#### Returns

`Promise`<`any`\>

The funder's account object is returned.

#### Defined in

[lib/keypom.ts:369](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom.ts#L369)

___

### updateKeypomContractId

**updateKeypomContractId**(`keypomContractId`): `any`

This allows the desired Keypom contract ID to be set. By default, the most up-to-date Keypom contract for the given network is set during initKeypom.

**`Example`**

After initializing the SDK, the Keypom contract ID is updated.
```js
const path = require("path");
const homedir = require("os").homedir();
const { KeyPair, keyStores, connect } = require("near-api-js");
const { initKeypom, updateKeypomContractId, getDrops } = require("keypom-js");

	// Initialize the SDK for the given network and NEAR connection
	await initKeypom({
		network: "testnet",
	});

	// Update the current Keypom contract ID
	updateKeypomContractId({
		keypomContractId: "v1.keypom.testnet"
	})

	//Get the drops for the given owner
	const dropsForOwner = await getDrops({accountId: "benjiman.testnet"});
	console.log('dropsForOwner: ', dropsForOwner)

	return;
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `keypomContractId` | `Object` | The account ID that should be used for the Keypom contract. |
| `keypomContractId.keypomContractId` | `string` | - |

#### Returns

`any`

#### Defined in

[lib/keypom.ts:430](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom.ts#L430)

## Utility

### accountExists

**accountExists**(`accountId`): `Promise`<`boolean`\>

Check whether or not a given account ID exists on the network.

**`Example`**

```js
const accountExists = await accountExists("benji.near");
console.log(accountExists); // true
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `accountId` | `any` | The account ID you wish to check |

#### Returns

`Promise`<`boolean`\>

- A boolean indicating whether or not the account exists

#### Defined in

[lib/keypom-utils.ts:87](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom-utils.ts#L87)

___

### createNFTSeries

**createNFTSeries**(`«destructured»`): `Promise`<`void` \| `FinalExecutionOutcome`[]\>

Creates a new NFT series on the official Keypom Series contracts. This is for lazy minting NFTs as part of an FC drop.

**`Example`**

Send 3 NFTs using the funder account (not passing in any accounts into the call):
```js
	await initKeypom({
		// near,
		network: 'testnet',
		funder: {
			accountId,
			secretKey,
		}
	})

	const {keys, dropId} = await createDrop({
		numKeys: 1,
		config: {
			usesPerKey: 100
		},
		metadata: "My Cool Drop Title!",
		depositPerUseNEAR: 0.5,
		fcData: {
			methods: [[
				{
					receiverId: `nft-v2.keypom.testnet`,
					methodName: "nft_mint",
					args: "",
					dropIdField: "mint_id",
					accountIdField: "receiver_id",
					attachedDeposit: parseNearAmount("0.1")
				}
			]]
		}
	})

	const res = await createNFTSeries({
		dropId,
		metadata: {
			title: "Moon NFT!",
			description: "A cool NFT for the best dog in the world.",
			media: "bafybeibwhlfvlytmttpcofahkukuzh24ckcamklia3vimzd4vkgnydy7nq",
			copies: 500
		}
	});
	console.log('res: ', res)

	const URLs = formatLinkdropUrl({
		baseUrl: "localhost:3000/claim",
		secretKeys: keys.secretKeys
	})
	console.log('URLs: ', URLs)
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `account?` | `Account` | Account object that if passed in, will be used to sign the txn instead of the funder account. |
| › `dropId` | `string` | The drop ID for the drop that should have a series associated with it. |
| › `metadata` | [`NonFungibleTokenMetadata`](interfaces/NonFungibleTokenMetadata.md) | The metadata that all minted NFTs will have. |
| › `royalty?` | `Map`<`string`, `number`\> | Any royalties associated with the series (as per official NEP-199 standard: https://github.com/near/NEPs/blob/master/neps/nep-0199.md) |
| › `wallet?` | `AnyWallet` | If using a browser wallet through wallet selector and that wallet should sign the transaction, pass in the object. |

#### Returns

`Promise`<`void` \| `FinalExecutionOutcome`[]\>

#### Defined in

[lib/keypom-utils.ts:227](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom-utils.ts#L227)

___

### estimateRequiredDeposit

**estimateRequiredDeposit**(`«destructured»`): `Promise`<`string`\>

Initiate the connection to the NEAR blockchain.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `attachedGas` | `number` | How much Gas will be attached to each key's use. |
| › `depositPerUse` | `string` | How much yoctoNEAR each key will transfer upon use. |
| › `fcData?` | [`FCData`](interfaces/FCData.md) | The FC data for the drop that is being created. |
| › `ftData?` | [`FTData`](interfaces/FTData.md) | The FT data for the drop that is being created. |
| › `keyStorage?` | `string` | How much storage an individual key uses. |
| › `near` | `Near` | The NEAR connection instance used to interact with the chain. This can either the connection that the SDK uses from `getEnv` or a separate connection. |
| › `numKeys` | `number` | How many keys are being added to the drop. |
| › `storage?` | `string` | The estimated storage costs (can be retrieved through `getStorageBase`). |
| › `usesPerKey` | `number` | How many uses each key has. |

#### Returns

`Promise`<`string`\>

#### Defined in

[lib/keypom-utils.ts:1162](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom-utils.ts#L1162)

___

### execute

**execute**(`args`): `Promise`<`void` \| `FinalExecutionOutcome`[] \| (`void` \| `FinalExecutionOutcome`)[]\>

#### Parameters

| Name | Type |
| :------ | :------ |
| `args` | `any` |

#### Returns

`Promise`<`void` \| `FinalExecutionOutcome`[] \| (`void` \| `FinalExecutionOutcome`)[]\>

#### Defined in

[lib/keypom.ts:147](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom.ts#L147)

___

### formatLinkdropUrl

**formatLinkdropUrl**(`«destructured»`): `string`[]

Constructs a valid linkdrop URL for a given claim page or custom URL. To view the list of supported claim pages, see the exported `supportedLinkdropClaimPages` variable.

**`Example`**

Use the keypom claim page:
```js
await initKeypom({
    network: 'testnet',
    funder: {
        accountId,
        secretKey,
    }
})

const {keys} = await createDrop({
    numKeys: 1,
    depositPerUseNEAR: 1
});

const linkdropUrl = formatLinkdropUrl({
    claimPage: "keypom",
    contractId: "v2.keypom.testnet",
    secretKeys: keys.secretKeys[0] // Can be either the array or individual secret key string
})

console.log('linkdropUrl: ', linkdropUrl)
```

**`Example`**

Use a custom claim page with ONLY the secret key
```js
await initKeypom({
    network: 'testnet',
    funder: {
        accountId,
        secretKey,
    }
})

const {keys} = await createDrop({
    numKeys: 1,
    depositPerUseNEAR: 1
});

const linkdropUrl = formatLinkdropUrl({
    customURL: "foobar/SECRET_KEY/barfoo",
    contractId: "v2.keypom.testnet",
    secretKeys: keys.secretKeys[0] // Can be either the array or individual secret key string
})

console.log('linkdropUrl: ', linkdropUrl)
```

**`Example`**

Use a custom claim page with both the secret key and contract ID
```js
await initKeypom({
    network: 'testnet',
    funder: {
        accountId,
        secretKey,
    }
})

const {keys} = await createDrop({
    numKeys: 1,
    depositPerUseNEAR: 1
});

const linkdropUrl = formatLinkdropUrl({
    customURL: "foobar/SECRET_KEY/barfoo/CONTRACT_ID",
    contractId: "v2.keypom.testnet",
    secretKeys: keys.secretKeys[0] // Can be either the array or individual secret key string
})

console.log('linkdropUrl: ', linkdropUrl)
```

#### Parameters

| Name | Type |
| :------ | :------ |
| `«destructured»` | `Object` |
| › `claimPage?` | `string` |
| › `contractId?` | `string` |
| › `customURL?` | `string` |
| › `networkId?` | `string` |
| › `secretKeys` | `string` \| `string`[] |

#### Returns

`string`[]

- An array of the linkdrop URLs

#### Defined in

[lib/keypom-utils.ts:384](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom-utils.ts#L384)

___

### generateKeys

**generateKeys**(`«destructured»`): `Promise`<[`GeneratedKeyPairs`](interfaces/GeneratedKeyPairs.md)\>

Generate ed25519 KeyPairs that can be used for Keypom linkdrops, or full access keys to claimed accounts. These keys can optionally be derived from some entropy such as a root password and metadata pertaining to each key (user provided password etc.). 
Entropy is useful for creating an onboarding experience where in order to recover a keypair, the client simply needs to provide the meta entropy (could be a user's password) and the secret root key like a UUID).

**`Example`**

Generating 10 unique random keypairs with no entropy:
```js
// Generate 10 keys with no entropy (all random)
let keys = await generateKeys({
    numKeys: 10,
})

let pubKey1 = keys.publicKeys[0];
let secretKey1 = keys.secretKeys[0];

console.log('1st Public Key: ', pubKey1);
console.log('1st Secret Key: ', secretKey1)
```

**`Example`**

Generating 1 keypair based on entropy:
```js
// Generate 1 key with the given entropy
let {publicKeys, secretKeys} = await generateKeys({
    numKeys: 1,
    rootEntropy: "my-global-password",
    metaEntropy: "user-password-123" // In this case, since there is only 1 key, the entropy can be an array of size 1 as well.
})

let pubKey = publicKeys[0];
let secretKey = secretKeys[0];

console.log('Public Key: ', pubKey);
console.log('Secret Key: ', secretKey)
```

**`Example`**

Generating 2 keypairs each with their own entropy:
```js
// Generate 2 keys each with their own unique entropy
let keys = await generateKeys({
    numKeys: 2,
    rootEntropy: "my-global-password",
    metaEntropy: [
       `first-password:0`,
       `second-password:1`
   ]
})

console.log('Pub Keys ', keys.publicKeys);
console.log('Secret Keys ', keys.secretKeys);
```
 *

**`Example`**

Generate 50 keys exactly how the auto key generation would in createDrop and addKeys:
```js
const dropId = '1676913490360';
const basePassword = "my-password";
// Generate 50 keys each with their own unique entropy
let keys = await generateKeys({
    numKeys: 50,
    rootEntropy: `${basePassword}-${dropId}`,
    autoMetaNonceStart: 0
})

console.log('Pub Keys ', keys.publicKeys);
console.log('Secret Keys ', keys.secretKeys);
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `autoMetaNonceStart?` | `number` | - |
| › `metaEntropy?` | `string` \| `string`[] | An array of entropies to use in conjunction with a base rootEntropy to deterministically generate the private keys. For single key generation, you can either pass in a string array with a single element, or simply pass in the string itself directly (not within an array). |
| › `numKeys` | `number` | The number of keys to generate. |
| › `rootEntropy?` | `string` | A root string that will be used as a baseline for all keys in conjunction with different metaEntropies (if provided) to deterministically generate a keypair. If not provided, the keypair will be completely random. |

#### Returns

`Promise`<[`GeneratedKeyPairs`](interfaces/GeneratedKeyPairs.md)\>

- An object containing an array of KeyPairs, Public Keys and Secret Keys.

#### Defined in

[lib/keypom-utils.ts:536](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom-utils.ts#L536)

___

### generatePerUsePasswords

**generatePerUsePasswords**(`«destructured»`): `Promise`<[`PasswordPerUse`](interfaces/PasswordPerUse.md)[][]\>

Generate passwords for a set of public keys. A unique password will be created for each specified use of a public key where the use is NOT zero indexed (i.e 1st use = 1).
The passwords will be generated via a double hash of the base password + public key + specific use

#### Parameters

| Name | Type |
| :------ | :------ |
| `«destructured»` | `Object` |
| › `basePassword` | `string` |
| › `publicKeys` | `string`[] |
| › `uses` | `number`[] |

#### Returns

`Promise`<[`PasswordPerUse`](interfaces/PasswordPerUse.md)[][]\>

An array of objects for each key where each object has a password and maps it to its specific key use.

#### Defined in

[lib/keypom-utils.ts:1358](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom-utils.ts#L1358)

___

### getFTMetadata

**getFTMetadata**(`contractId`): `Promise`<[`FungibleTokenMetadata`](interfaces/FungibleTokenMetadata.md)\>

Get the FT Metadata for a given fungible token contract. This is used to display important information such as the icon for the token, decimal format etc.

**`Example`**

```js
const ft = await getFTMetadata({
   contractId: "ft.keypom.testnet"
});
console.log(ft);
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `contractId` | `Object` | The contract ID of the FT contract |
| `contractId.contractId` | `string` | - |

#### Returns

`Promise`<[`FungibleTokenMetadata`](interfaces/FungibleTokenMetadata.md)\>

- The FT Metadata

#### Defined in

[lib/keypom-utils.ts:156](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom-utils.ts#L156)

___

### getNFTMetadata

**getNFTMetadata**(`«destructured»`): `Promise`<[`ProtocolReturnedNonFungibleTokenObject`](interfaces/ProtocolReturnedNonFungibleTokenObject.md)\>

Get the NFT Object (metadata, owner, approval IDs etc.) for a given token ID on a given contract.

**`Example`**

```js
const nft = await getNFTMetadata({
    contractId: "nft.keypom.testnet",
    tokenId: "1"
});
console.log(nft);
```

#### Parameters

| Name | Type |
| :------ | :------ |
| `«destructured»` | `Object` |
| › `contractId` | `string` |
| › `tokenId` | `string` |

#### Returns

`Promise`<[`ProtocolReturnedNonFungibleTokenObject`](interfaces/ProtocolReturnedNonFungibleTokenObject.md)\>

- The NFT Object

#### Defined in

[lib/keypom-utils.ts:120](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom-utils.ts#L120)

___

### getPubFromSecret

**getPubFromSecret**(`secretKey`): `string`

Get the public key from a given secret key.

**`Example`**

```js
const pubKey = getPubFromSecret("ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1");
console.log(pubKey);
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `secretKey` | `string` | The secret key you wish to get the public key from |

#### Returns

`string`

- The public key

#### Defined in

[lib/keypom-utils.ts:68](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom-utils.ts#L68)

___

### getStorageBase

**getStorageBase**(`«destructured»`): `string`

#### Parameters

| Name | Type |
| :------ | :------ |
| `«destructured»` | [`CreateDropProtocolArgs`](interfaces/CreateDropProtocolArgs.md) |

#### Returns

`string`

#### Defined in

[lib/keypom-utils.ts:1073](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom-utils.ts#L1073)

___

### hashPassword

**hashPassword**(`str`, `fromHex?`): `Promise`<`string`\>

Generate a sha256 hash of a passed in string. If the string is hex encoded, set the fromHex flag to true.

**`Example`**

Generating the required password to pass into `claim` given a base password:
```js
	// Create the password to pass into claim which is a hash of the basePassword, public key and whichever use we are on
let currentUse = 1;
let passwordForClaim = await hashPassword(basePassword + publicKey + currentUse.toString());
```

#### Parameters

| Name | Type | Default value | Description |
| :------ | :------ | :------ | :------ |
| `str` | `string` | `undefined` | the string you wish to hash. By default, this should be utf8 encoded. If the string is hex encoded, set the fromHex flag to true. |
| `fromHex` | `boolean` | `false` | (OPTIONAL) - A flag that should be set if the string is hex encoded. Defaults to false. |

#### Returns

`Promise`<`string`\>

- The resulting hash

#### Defined in

[lib/keypom-utils.ts:451](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom-utils.ts#L451)

___

### viewAccessKeyData

**viewAccessKeyData**(`«destructured»`): `Promise`<`any`\>

Query for important access key data such as the nonce, allowance, method names etc. that is stored on the NEAR protocol for a given account and public key.

**`Example`**

Check if an access key belongs to a trial account
```js
const keyInfo = await viewAccessKeyData({accountId, secretKey});
let keyPerms = keyInfo.permission.FunctionCall;
isValidTrialInfo = keyPerms.receiver_id === accountId && keyPerms.method_names.includes('execute')
console.log('isValidTrialInfo: ', isValidTrialInfo)
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `accountId` | `string` | The account that the access key belongs to. |
| › `publicKey?` | `string` | The public key of the access key |
| › `secretKey?` | `string` | The secret key of the access key |

#### Returns

`Promise`<`any`\>

#### Defined in

[lib/keypom-utils.ts:623](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom-utils.ts#L623)

## Creating, And Claiming Drops

### addKeys

**addKeys**(`«destructured»`): `Promise`<[`CreateOrAddReturn`](interfaces/CreateOrAddReturn.md)\>

Add keys that are manually generated and passed in, or automatically generated to an existing drop. If they're
automatically generated, they can be based off a set of entropy. For NFT and FT drops, assets can automatically be sent to Keypom to register keys as part of the payload.
The deposit is estimated based on parameters that are passed in and the transaction can be returned instead of signed and sent to the network. This can allow you to get the
required deposit from the return value and use that to fund the account's Keypom balance to avoid multiple transactions being signed in the case of a drop with many keys.

**`Example`**

Create a basic empty simple drop and add 10 keys. Each key is completely random:
```js
// Initialize the SDK for the given network and NEAR connection. No entropy passed in so any auto generated keys will
// be completely random unless otherwise overwritten.
await initKeypom({
	network: "testnet",
	funder: {
		accountId: "benji_demo.testnet",
		secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
	}
});

// Create an empty simple drop with no keys.
const {dropId} = await createDrop({
	depositPerUseNEAR: 1,
});

// Add 10 completely random keys. The return value `keys` contains information about the generated keys
const {keys} = await addKeys({
	dropId,
	numKeys: 10
})

console.log('public keys: ', keys.publicKeys);
console.log('private keys: ', keys.secretKeys);
```

**`Example`**

Init funder with root entropy, create empty drop and add generate deterministic keys. Compare with manually generated keys:
```js
// Initialize the SDK for the given network and NEAR connection. Root entropy is passed into the funder account so any generated keys
// Will be based off that entropy.
await initKeypom({
	network: "testnet",
	funder: {
		accountId: "benji_demo.testnet",
		secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1",
		rootEntropy: "my-global-secret-password"
	}
});

// Create a simple drop with no keys
const { dropId } = await createDrop({
	depositPerUseNEAR: 1,
});

// Add 5 keys to the empty simple drop. Each key will be derived based on the rootEntropy of the funder, the drop ID, and key nonce.
const {keys: keysFromDrop} = await addKeys({
	dropId,
	numKeys: 5
})

// Deterministically Generate the Private Keys:
const nonceDropIdMeta = Array.from({length: 5}, (_, i) => `${dropId}_${i}`);
const manualKeys = await generateKeys({
	numKeys: 5,
	rootEntropy: "my-global-secret-password",
	metaEntropy: nonceDropIdMeta
})

// Get the public and private keys from the keys generated by addKeys
const {publicKeys, secretKeys} = keysFromDrop;
// Get the public and private keys from the keys that were manually generated
const {publicKeys: pubKeysGenerated, secretKeys: secretKeysGenerated} = manualKeys;
// These should match!
console.log('secretKeys: ', secretKeys)
console.log('secretKeysGenerated: ', secretKeysGenerated)

// These should match!
console.log('publicKeys: ', publicKeys)
console.log('pubKeysGenerated: ', pubKeysGenerated)
```

**`Example`**

Create an empty drop and add manually created keys:
```js
// Initialize the SDK for the given network and NEAR connection. No entropy passed in so any auto generated keys will
// be completely random unless otherwise overwritten.
await initKeypom({
	network: "testnet",
	funder: {
		accountId: "benji_demo.testnet",
		secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
	}
});

// Create an empty simple drop using the keys that were generated. Since keys are passed in, the return value won't contain information about the keys.
const {dropId} = await createDrop({
	publicKeys,
	depositPerUseNEAR: 1,
});

// Generate 10 random keys
const {publicKeys} = await generateKeys({
	numKeys: 10
});

// Add keys to the drop using the keys that were generated. Since keys are passed in, the return value won't contain information about the keys.
await addKeys({
	publicKeys,
	dropId
})
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `account?` | `Account` | Account object that if passed in, will be used to sign the txn instead of the funder account. |
| › `basePassword?` | `string` | For doing password protected drops, this is the base password that will be used to generate all the passwords. It will be double hashed with the public keys. If specified, by default, all key uses will have their own unique password unless passwordProtectedUses is passed in. |
| › `drop?` | [`ProtocolReturnedDrop`](interfaces/ProtocolReturnedDrop.md) | If the drop information from getDropInformation is already known to the client, it can be passed in instead of the drop ID to reduce computation. |
| › `dropId?` | `string` | Specify the drop ID for which you want to add keys to. |
| › `extraDepositNEAR?` | `number` | For Public Sales, drops might require an additional fee for adding keys. This specifies the amount of $NEAR in human readable format (i.e `1.5` = 1.5 $NEAR) |
| › `extraDepositYocto?` | `string` | For Public Sales, drops might require an additional fee for adding keys. This specifies the amount of $NEAR in yoctoNEAR (i.e `1` = 1 $yoctoNEAR = 1e-24 $NEAR) |
| › `nftTokenIds?` | `string`[] | If the drop type is an NFT drop, the token IDs can be passed in so that the tokens are automatically sent to the Keypom contract rather than having to do two separate transactions. A maximum of 2 token IDs can be sent during the `addKeys` function. To send more token IDs in order to register key uses, use the `nftTransferCall` function. |
| › `numKeys` | `number` | Specify how many keys should be generated for the drop. If the funder has rootEntropy set OR rootEntropy is passed in, the keys will be deterministically generated using the drop ID, key nonce, and entropy. Otherwise, each key will be generated randomly. |
| › `passwordProtectedUses?` | `number`[] | For doing password protected drops, specifies exactly which uses will be password protected. The uses are NOT zero indexed (i.e 1st use = 1). Each use will have a different, unique password generated via double hashing the base password + public key + key use. |
| › `publicKeys?` | `string`[] | Pass in a custom set of publicKeys to add to the drop. If this is not passed in, keys will be generated based on the numKeys parameter. |
| › `returnTransactions?` | `boolean` | If true, the transaction will be returned instead of being signed and sent. This is useful for getting the requiredDeposit from the return value without actually signing the transaction. |
| › `rootEntropy?` | `string` | Specify an entropy to use for generating keys (will overload the funder's rootEntropy if applicable). This parameter only matters if the publicKeys variable is not passed in. |
| › `useBalance?` | `boolean` | If the account has a balance within the Keypom contract, set this to true to avoid the need to attach a deposit. If the account doesn't have enough balance, an error will throw. |
| › `wallet?` | `AnyWallet` | If using a browser wallet through wallet selector and that wallet should sign the transaction, pass in the object. |

#### Returns

`Promise`<[`CreateOrAddReturn`](interfaces/CreateOrAddReturn.md)\>

Object containing: the drop ID, the responses of the execution, as well as any auto generated keys (if any).

#### Defined in

[lib/keys.ts:148](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keys.ts#L148)

___

### claim

**claim**(`«destructured»`): `Promise`<`any`\>

Allows a specific Keypom drop to be claimed via the secret key.

**`Example`**

Creating a simple $NEAR drop and claiming to an existing account:
```js
// Initialize the SDK for the given network and NEAR connection
await initKeypom({
	network: "testnet",
	funder: {
		accountId: "benji_demo.testnet",
		secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
	}
});

// create 1 keys with no entropy (random key)
const {publicKeys, secretKeys} = await generateKeys({
	numKeys: 1
});

// Create a simple drop with 1 $NEAR
await createDrop({
	publicKeys,
	depositPerUseNEAR: 1,
});

// Claim the drop to the passed in account ID
await claim({
	secretKey: secretKeys[0],
	accountId: "benjiman.testnet"
})
```

**`Example`**

Creating a simple $NEAR drop and using it to create a brand new NEAR account:
```js
// Initialize the SDK for the given network and NEAR connection
await initKeypom({
	network: "testnet",
	funder: {
		accountId: "benji_demo.testnet",
		secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
	}
});

// create 2 keys with no entropy (all random). The first will be used for the drop and the second
// will be used as the full access key for the newly created account
const {publicKeys, secretKeys} = await generateKeys({
	numKeys: 2
});

// Create a simple drop with 1 $NEAR
await createDrop({
	publicKeys: [publicKeys[0]],
	depositPerUseNEAR: 1,
});

// Claim the drop and create a new account
await claim({
	secretKey: secretKeys[0],
	newAccountId: "my-newly-creating-account.testnet",
	newPublicKey: publicKeys[1]
})
```

**`Example`**

Creating a drop and adding a password to it. Generate the password using the hash function and pass it into claim the drop:
```js
// Initialize the SDK for the given network and NEAR connection
await initKeypom({
	network: "testnet",
	funder: {
		accountId: "benji_demo.testnet",
		secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
	}
});

const basePassword = "my-cool-password123";
// Create a simple drop with 1 $NEAR and pass in a base password to create a unique password for each use of each key
const {keys} = await createDrop({
	numKeys: 1,
	depositPerUseNEAR: 1,
	basePassword
});

// Create the password to pass into claim which is a hash of the basePassword, public key and whichever use we are on
let currentUse = 1;
let passwordForClaim = await hashPassword(basePassword + keys.publicKeys[0] + currentUse.toString());

// Claim the drop to the passed in account ID and use the password we generated above.
await claim({
	secretKey: keys.secretKeys[0],
	accountId: "benjiman.testnet",
	password: passwordForClaim
})
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `accountId?` | `string` | The account ID of an existing account that will be used to claim the drop. |
| › `fcArgs?` | `string`[] | For FC drops, if `user_args_rule` is set by the funder, when claiming, custom arguments can be passed into the function. The number of args in the array need to match the number of methods being executed. |
| › `newAccountId?` | `string` | If passed in, a new account ID will be created and the drop will be claimed to that account. This must be an account that does not exist yet. |
| › `newPublicKey?` | `string` | If creating a new account, a public key must be passed in to be used as the full access key for the newly created account. |
| › `password?` | `string` | If a password is required to use the key, it can be passed in |
| › `secretKey` | `string` | The private key associated with the Keypom link. This can either contain the `ed25519:` prefix or not. |

#### Returns

`Promise`<`any`\>

#### Defined in

[lib/claims.ts:108](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/claims.ts#L108)

___

### createDrop

**createDrop**(`«destructured»`): `Promise`<[`CreateOrAddReturn`](interfaces/CreateOrAddReturn.md)\>

Creates a new drop based on parameters passed in. This drop can have keys that are manually generated and passed in, or automatically generated. If they're
automatically generated, they can be based off a set of entropy. For NFT and FT drops, assets can automatically be sent to Keypom to register keys as part of the payload.
The deposit is estimated based on parameters that are passed in and the transaction can be returned instead of signed and sent to the network. This can allow you to get the
required deposit from the return value and use that to fund the account's Keypom balance to avoid multiple transactions being signed in the case of a drop with many keys.

**`Example`**

Create a basic simple drop containing 10 keys each with 1 $NEAR. Each key is completely random:
```js
// Initialize the SDK for the given network and NEAR connection. No entropy passed in so any auto generated keys will
// be completely random unless otherwise overwritten.
await initKeypom({
	network: "testnet",
	funder: {
		accountId: "benji_demo.testnet",
		secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
	}
});

// Create a drop with 10 completely random keys. The return value `keys` contains information about the generated keys
const {keys} = await createDrop({
	numKeys: 10,
	depositPerUseNEAR: 1,
});

console.log('public keys: ', keys.publicKeys);
console.log('private keys: ', keys.secretKeys);
```

**`Example`**

Init funder with root entropy and generate deterministic keys for a drop. Compare with manually generated keys:
```js
// Initialize the SDK for the given network and NEAR connection. Root entropy is passed into the funder account so any generated keys
// Will be based off that entropy.
await initKeypom({
	network: "testnet",
	funder: {
		accountId: "benji_demo.testnet",
		secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1",
		rootEntropy: "my-global-secret-password"
	}
});

// Create a simple drop with 5 keys. Each key will be derived based on the rootEntropy of the funder, the drop ID, and key nonce.
const { keys: keysFromDrop, dropId } = await createDrop({
	numKeys: 5,
	depositPerUseNEAR: 1,
});

// Deterministically Generate the Private Keys:
const nonceDropIdMeta = Array.from({length: 5}, (_, i) => `${dropId}_${i}`);
const manualKeys = await generateKeys({
	numKeys: 5,
	rootEntropy: "my-global-secret-password",
	metaEntropy: nonceDropIdMeta
})

// Get the public and private keys from the keys generated by the drop
const {publicKeys, secretKeys} = keysFromDrop;
// Get the public and private keys from the keys that were manually generated
const {publicKeys: pubKeysGenerated, secretKeys: secretKeysGenerated} = manualKeys;
// These should match!
console.log('secretKeys: ', secretKeys)
console.log('secretKeysGenerated: ', secretKeysGenerated)

// These should match!
console.log('publicKeys: ', publicKeys)
console.log('pubKeysGenerated: ', pubKeysGenerated)
```

**`Example`**

Use manually generated keys to create a drop:
```js
// Initialize the SDK for the given network and NEAR connection. No entropy passed in so any auto generated keys will
// be completely random unless otherwise overwritten.
await initKeypom({
	network: "testnet",
	funder: {
		accountId: "benji_demo.testnet",
		secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
	}
});

// Generate 10 random keys
const {publicKeys} = await generateKeys({
	numKeys: 10
});

// Create a drop using the keys that were generated. Since keys are passed in, the return value won't contain information about the keys.
await createDrop({
	publicKeys,
	depositPerUseNEAR: 1,
});
```

**`Example`**

Create a simple drop with 1 key and 1 use per key. This 1 use-key should be password protected based on a base-password:
```js
// Initialize the SDK for the given network and NEAR connection
await initKeypom({
	network: "testnet",
	funder: {
		accountId: "benji_demo.testnet",
		secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
	}
});

const basePassword = "my-cool-password123";
// Create a simple drop with 1 $NEAR and pass in a base password to create a unique password for each use of each key
const {keys} = await createDrop({
	numKeys: 1,
	depositPerUseNEAR: 1,
	basePassword
});

// Create the password to pass into claim which is a hash of the basePassword, public key and whichever use we are on
let currentUse = 1;
let passwordForClaim = await hashPassword(basePassword + keys.publicKeys[0] + currentUse.toString());
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `account?` | `Account` | Account object that if passed in, will be used to sign the txn instead of the funder account. |
| › `basePassword?` | `string` | For doing password protected drops, this is the base password that will be used to generate all the passwords. It will be double hashed with the public keys. If specified, by default, all key uses will have their own unique password unless passwordProtectedUses is passed in. |
| › `config?` | [`DropConfig`](interfaces/DropConfig.md) | Allows specific drop behaviors to be configured such as the number of uses each key / link will have. |
| › `depositPerUseNEAR?` | `string` \| `number` | How much $NEAR should be contained in each link. Unit in $NEAR (i.e `1` = 1 $NEAR) |
| › `depositPerUseYocto?` | `string` | How much $yoctoNEAR should be contained in each link. Unit in yoctoNEAR (1 yoctoNEAR = 1e-24 $NEAR) |
| › `dropId?` | `string` | Specify a custom drop ID rather than using the incrementing nonce on the contract. |
| › `fcData?` | [`FCData`](interfaces/FCData.md) | For creating a function call drop, this contains necessary configurable information about the drop. |
| › `ftData?` | [`FTData`](interfaces/FTData.md) | For creating a fungible token drop, this contains necessary configurable information about the drop. |
| › `metadata?` | `string` | String of metadata to attach to the drop. This can be whatever you would like and is optional. Often this is stringified JSON. |
| › `nftData?` | [`NFTData`](interfaces/NFTData.md) | For creating a non-fungible token drop, this contains necessary configurable information about the drop. |
| › `numKeys?` | `number` | Specify how many keys should be generated for the drop. If the funder has rootEntropy set OR rootEntropy is passed in, the keys will be deterministically generated using the drop ID, key nonce, and entropy. Otherwise, each key will be generated randomly. If this is not passed in, the publicKeys parameter *must* be passed in. |
| › `passwordProtectedUses?` | `number`[] | For doing password protected drops, specifies exactly which uses will be password protected. The uses are NOT zero indexed (i.e 1st use = 1). Each use will have a different, unique password generated via double hashing the base password + public key + key use. |
| › `publicKeys?` | `string`[] | Pass in a custom set of publicKeys to add to the drop. If this is not passed in, keys will be generated based on the numKeys parameter. |
| › `requiredGas?` | `string` | Allows you to overload how much gas should be attached to the transaction when the key is claimed. This should be in Gas units (1 TGas = 1000000000000). By default, 100 TGas is attached. |
| › `returnTransactions?` | `boolean` | If true, the transaction will be returned instead of being signed and sent. This is useful for getting the requiredDeposit from the return value without actually signing the transaction. |
| › `rootEntropy?` | `string` | Specify an entropy to use for generating keys (will overload the funder's rootEntropy if applicable). This parameter only matters if the publicKeys variable is not passed in. |
| › `simpleData?` | [`SimpleData`](interfaces/SimpleData.md) | For creating a simple drop, this contains necessary configurable information about the drop. |
| › `successUrl?` | `string` | When signing with a wallet, a success URl can be included that the user will be redirected to once the transaction has been successfully signed. |
| › `useBalance?` | `boolean` | If the account has a balance within the Keypom contract, set this to true to avoid the need to attach a deposit. If the account doesn't have enough balance, an error will throw. |
| › `wallet?` | `AnyWallet` | If using a browser wallet through wallet selector and that wallet should sign the transaction, pass in the object. |

#### Returns

`Promise`<[`CreateOrAddReturn`](interfaces/CreateOrAddReturn.md)\>

Object containing: the drop ID, the responses of the execution, as well as any auto generated keys (if any).

#### Defined in

[lib/drops.ts:176](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/drops.ts#L176)

## User Balance Functions

### addToBalance

**addToBalance**(`«destructured»`): `Promise`<`any`\>

Deposit some amount of $NEAR or yoctoNEAR$ into the Keypom contract. This amount can then be used to create drops or add keys without
Having to explicitly attach a deposit every time. It can be thought of like a bank account.

**`Example`**

Add 1 $NEAR to the account balance
```js
// Initialize the SDK on testnet
await initKeypom({
	network: "testnet",
	funder: {
		accountId: "benji_demo.testnet",
		secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
	}
});

await addToBalance({
    amount: "1",
)};
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `account?` | `Account` | Account object that if passed in, will be used to sign the txn instead of the funder account. |
| › `amountNear?` | `string` | Human readable format for the amount of tokens to add. **`Example`** ```ts Example: transferring one $NEAR should be passed in as "1" and NOT "1000000000000000000000000" ``` |
| › `amountYocto?` | `string` | Amount of tokens to add but considering the decimal amount (non human-readable). **`Example`** ```ts Transferring one $NEAR should be passed in as "1000000000000000000000000" and NOT "1" ``` |
| › `successUrl?` | `string` | When signing with a wallet, a success URl can be included that the user will be redirected to once the transaction has been successfully signed. |
| › `wallet?` | `AnyWallet` | If using a browser wallet through wallet selector and that wallet should sign the transaction, pass in the object. |

#### Returns

`Promise`<`any`\>

#### Defined in

[lib/balances.ts:37](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/balances.ts#L37)

___

### withdrawBalance

**withdrawBalance**(`«destructured»`): `Promise`<`any`\>

Withdraw all the $NEAR from your balance in the Keypom contract.

**`Example`**

Add 1 $NEAR to the account balance and then withdraw it
```js
// Initialize the SDK on testnet
await initKeypom({
	network: "testnet",
	funder: {
		accountId: "benji_demo.testnet",
		secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
	}
});

await addToBalance({
    amount: "1",
});

await withdrawBalance({});
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `account?` | `Account` | Account object that if passed in, will be used to sign the txn instead of the funder account. |
| › `wallet?` | `AnyWallet` | If using a browser wallet through wallet selector and that wallet should sign the transaction, pass in the object. |

#### Returns

`Promise`<`any`\>

#### Defined in

[lib/balances.ts:118](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/balances.ts#L118)

## Public Sale Functions

### addToSaleAllowlist

**addToSaleAllowlist**(`«destructured»`): `Promise`<`any`\>

Add a list of account IDs to a drop's sale allowlist. If the allowlist is empty, anyone can purchase keys. The sale object must exist in the drop's config for this to go through.

**`Example`**

```js
const {dropId} = await createDrop({
		numKeys: 0,
		depositPerUseNEAR: 0.1,
		config: {
			sale: {
				maxNumKeys: 2,
				pricePerKeyNEAR: 1
			}
		}
	});

	let canAddKeys = await canUserAddKeys({dropId, accountId: "foobar.testnet"});
	t.is(canAddKeys, true);

	await addToSaleAllowlist({dropId, accountIds: ["barfoo.testnet"]});
	canAddKeys = await canUserAddKeys({dropId, accountId: "foobar.testnet"});
	t.is(canAddKeys, false);
 ```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `account?` | `Account` | Account object that if passed in, will be used to sign the txn instead of the funder account. |
| › `accountIds` | `string`[] | A list of account IDs that should be added to the sale allowlist |
| › `dropId` | `string` | The drop ID for the drop |
| › `wallet?` | `AnyWallet` | If using a browser wallet through wallet selector and that wallet should sign the transaction, pass in the object. |

#### Returns

`Promise`<`any`\>

#### Defined in

[lib/sales.ts:44](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/sales.ts#L44)

___

### addToSaleBlocklist

**addToSaleBlocklist**(`«destructured»`): `Promise`<`any`\>

Add a list of account IDs to a drop's sale blocklist. The sale object must exist in the drop's config for this to go through.

**`Example`**

```js
	const {dropId} = await createDrop({
		numKeys: 0,
		depositPerUseNEAR: 0.1,
		config: {
			sale: {
				maxNumKeys: 2,
				pricePerKeyNEAR: 1
			}
		}
	});

	let canAddKeys = await canUserAddKeys({dropId, accountId: "foobar.testnet"});
	t.is(canAddKeys, true);

	await addToSaleBlocklist({dropId, accountIds: ["foobar.testnet"]});
	canAddKeys = await canUserAddKeys({dropId, accountId: "foobar.testnet"});
	t.is(canAddKeys, false);
 ```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `account?` | `Account` | Account object that if passed in, will be used to sign the txn instead of the funder account. |
| › `accountIds` | `string`[] | A list of account IDs that should be added to the sale blocklist |
| › `dropId` | `string` | The drop ID for the drop |
| › `wallet?` | `AnyWallet` | If using a browser wallet through wallet selector and that wallet should sign the transaction, pass in the object. |

#### Returns

`Promise`<`any`\>

#### Defined in

[lib/sales.ts:224](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/sales.ts#L224)

___

### removeFromSaleAllowlist

**removeFromSaleAllowlist**(`«destructured»`): `Promise`<`any`\>

Remove a list of account IDs from a drop's sale allowlist. If the allowlist is empty, anyone can purchase keys. The sale object must exist in the drop's config for this to go through.

**`Example`**

```js
	const {dropId} = await createDrop({
		numKeys: 0,
		depositPerUseNEAR: 0.1,
		config: {
			sale: {
				maxNumKeys: 2,
				pricePerKeyNEAR: 1,
				allowlist: ["foobar.testnet", "barfoo.testnet"]
			}
		}
	});

	let canAddKeys = await canUserAddKeys({dropId, accountId: "foobar.testnet"});
	t.is(canAddKeys, true);

	canAddKeys = await canUserAddKeys({dropId, accountId: "not_in_allowlist.testnet"});
	t.is(canAddKeys, false);

	await removeFromSaleAllowlist({dropId, accountIds: ["foobar.testnet"]});
	canAddKeys = await canUserAddKeys({dropId, accountId: "foobar.testnet"});
	t.is(canAddKeys, false);

	await removeFromSaleAllowlist({dropId, accountIds: ["barfoo.testnet"]});
	canAddKeys = await canUserAddKeys({dropId, accountId: "foobar.testnet"});
	t.is(canAddKeys, true);
 ```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `account?` | `Account` | Account object that if passed in, will be used to sign the txn instead of the funder account. |
| › `accountIds` | `string`[] | A list of account IDs that should be removed from the sale's allowlist |
| › `dropId` | `string` | The drop ID for the drop |
| › `wallet?` | `AnyWallet` | If using a browser wallet through wallet selector and that wallet should sign the transaction, pass in the object. |

#### Returns

`Promise`<`any`\>

#### Defined in

[lib/sales.ts:138](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/sales.ts#L138)

___

### removeFromSaleBlocklist

**removeFromSaleBlocklist**(`«destructured»`): `Promise`<`any`\>

Remove a list of account IDs from a drop's sale blocklist. The sale object must exist in the drop's config for this to go through.

**`Example`**

```js
	const {dropId} = await createDrop({
		numKeys: 0,
		depositPerUseNEAR: 0.1,
		config: {
			sale: {
				maxNumKeys: 2,
				pricePerKeyNEAR: 1,
				blocklist: ["foobar.testnet"]
			}
		}
	});

	let canAddKeys = await canUserAddKeys({dropId, accountId: "foobar.testnet"});
	t.is(canAddKeys, false);

	canAddKeys = await canUserAddKeys({dropId, accountId: "not_in_blocklist.testnet"});
	t.is(canAddKeys, true);

	await removeFromSaleBlocklist({dropId, accountIds: ["foobar.testnet"]});
	canAddKeys = await canUserAddKeys({dropId, accountId: "foobar.testnet"});
	t.is(canAddKeys, true);
 ```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `account?` | `Account` | Account object that if passed in, will be used to sign the txn instead of the funder account. |
| › `accountIds` | `string`[] | A list of account IDs that should be removed from the sale's allowlist |
| › `dropId` | `string` | The drop ID for the drop |
| › `wallet?` | `AnyWallet` | If using a browser wallet through wallet selector and that wallet should sign the transaction, pass in the object. |

#### Returns

`Promise`<`any`\>

#### Defined in

[lib/sales.ts:314](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/sales.ts#L314)

___

### updateSale

**updateSale**(`«destructured»`): `Promise`<`any`\>

Remove a list of account IDs from a drop's sale blocklist. The sale object must exist in the drop's config for this to go through.

**`Example`**

```js
	const {dropId} = await createDrop({
		numKeys: 0,
		depositPerUseNEAR: 0.1,
		config: {
			sale: {
				maxNumKeys: 2,
				pricePerKeyNEAR: 1
			}
		}
	});

	await updateSale({
		dropId,
		pricePerKeyNEAR: 2
	})
 ```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `account?` | `Account` | Account object that if passed in, will be used to sign the txn instead of the funder account. |
| › `autoWithdrawFunds?` | `boolean` | Should the revenue generated be sent to the funder's account balance or automatically withdrawn and sent to their NEAR wallet? |
| › `dropId` | `string` | The drop ID for the drop |
| › `end?` | `number` | Block timestamp dictating the end of the public sale. If None, keys can be added indefinitely Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC. |
| › `maxNumKeys?` | `number` | Maximum number of keys that can be added to this drop. If None, there is no max. |
| › `pricePerKeyNEAR?` | `number` | Amount of $NEAR that the user needs to attach (if they are not the funder) on top of costs. This amount will be Automatically sent to the funder's balance. If None, the keys are free to the public. |
| › `pricePerKeyYocto?` | `string` | - |
| › `start?` | `number` | Minimum block timestamp before the public sale starts. If None, keys can be added immediately Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC. |
| › `wallet?` | `AnyWallet` | If using a browser wallet through wallet selector and that wallet should sign the transaction, pass in the object. |

#### Returns

`Promise`<`any`\>

#### Defined in

[lib/sales.ts:399](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/sales.ts#L399)

## Trial Accounts

### canExitTrial

**canExitTrial**(`«destructured»`): `Promise`<`boolean`\>

Check whether a trial account is able to exit their trial state and become a fully fledged normal account.

**`Example`**

Create a trial account and check whether it can immediately exit
```js
    await initKeypom({
       // near,
       network: 'testnet',
       funder: {
           accountId: fundingAccountId,
           secretKey: fundingAccountSecretKey,
       }
   });

   const callableContracts = [
       `nft.examples.testnet`
   ]

   const {dropId, keys: {secretKeys: trialSecretKeys, publicKeys: trialPublicKeys}}
   = await createTrialAccountDrop({
       numKeys: 1,
       contractBytes: [...readFileSync('./test/ext-wasm/trial-accounts.wasm')],
       startingBalanceNEAR: 0.5,
       callableContracts: callableContracts,
       callableMethods: ['*'],
       maxAttachableNEARPerContract: [1],
       trialEndFloorNEAR: 0.33 + 0.3
   })

   const desiredAccountId = `${dropId}-keypom.testnet`
   const trialSecretKey = trialSecretKeys[0]
   await claimTrialAccountDrop({
       desiredAccountId,
       secretKey: trialSecretKey
   })

   const canExitTrial = await keypom.canExitTrial({
       trialAccountId: desiredAccountId
   })
   console.log('canExitTrial: ', canExitTrial)
	```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `trialAccountId` | `string` | The account ID of the trial account |

#### Returns

`Promise`<`boolean`\>

#### Defined in

[lib/trial-accounts/trial-active.ts:403](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/trial-accounts/trial-active.ts#L403)

___

### claimTrialAccountDrop

**claimTrialAccountDrop**(`«destructured»`): `Promise`<`any`\>

Claim a Keypom trial account drop which will create a new account, deploy and initialize the trial account contract, and setup the account with initial conditions as specified in the drop.

**`Example`**

Creating a trial account with any callable methods, an amount of 0.5 $NEAR and 5 keys.
```js
const callableContracts = [
	`v1.social08.testnet`,
	'guest-book.examples.keypom.testnet',
]

const {dropId, keys: {secretKeys: trialSecretKeys, publicKeys: trialPublicKeys}}
= await createTrialAccountDrop({
	numKeys: 1,
	contractBytes: [...readFileSync('./test/ext-wasm/trial-accounts.wasm')],
	startingBalanceNEAR: 0.5,
	callableContracts: callableContracts,
	callableMethods: ['set:grant_write_permission', '*'],
	maxAttachableNEARPerContract: callableContracts.map(() => '1'),
	trialEndFloorNEAR: 0.33
})

const newAccountId = `${Date.now().toString()}.linkdrop-beta.keypom.testnet`
await claimTrialAccountDrop({
    secretKey: trialSecretKeys[0],
    desiredAccountId: newAccountId,
})

console.log(`

${JSON.stringify({
    account_id: newAccountId,
    public_key: trialPublicKeys[0],
    private_key: trialSecretKeys[0]
})}

`)

console.log(`http://localhost:1234/keypom-url/${newAccountId}#${trialSecretKeys[0]}`)

```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `desiredAccountId` | `string` | The account ID that will be created for the trial |
| › `secretKey` | `string` | The private key associated with the Keypom link. This can either contain the `ed25519:` prefix or not. |

#### Returns

`Promise`<`any`\>

#### Defined in

[lib/trial-accounts/pre-trial.ts:505](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/trial-accounts/pre-trial.ts#L505)

___

### createTrialAccountDrop

**createTrialAccountDrop**(`«destructured»`): `Promise`<[`CreateOrAddReturn`](interfaces/CreateOrAddReturn.md)\>

Creates a new trial account drop which can be used to instantly sign users into decentralized applications that support the Keypom wallet selector plugin.

The trial account is locked into certain behaviors depending on what is passed into `createTrialAccountDrop`. These behaviors include callable contracts, methods on
those contracts, the maximum amount of $NEAR that can be spent on each contract as well as an exit condition. Once the trial account has run out of funds, the only way to
retain any assets from the trial or continue using the account ID, is to repay the specific account ID for the amount of $NEAR specified.

**`Example`**

Creating a trial account with any callable methods, an amount of 0.5 $NEAR and 5 keys.
```js
const {keys: {secretKeys: trialSecretKeys, publicKeys: trialPublicKeys}} = await createTrialAccountDrop({
    contractBytes: [...readFileSync('./test/ext-wasm/trial-accounts.wasm')],
    trialFundsNEAR: 0.5,
    callableContracts: ['dev-1676298343226-57701595703433'],
    callableMethods: ['*'],
    amounts: ['0.5'],
    numKeys: 5,
    config: {
        dropRoot: "linkdrop-beta.keypom.testnet"
    }
})

const newAccountId = `${Date.now().toString()}.linkdrop-beta.keypom.testnet`
await claimTrialAccountDrop({
    secretKey: trialSecretKeys[0],
    desiredAccountId: newAccountId,
})

console.log(`

${JSON.stringify({
    account_id: newAccountId,
    public_key: trialPublicKeys[0],
    private_key: trialSecretKeys[0]
})}

`)

console.log(`http://localhost:1234/keypom-url/${newAccountId}#${trialSecretKeys[0]}`)

```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `account?` | `Account` | Account object that if passed in, will be used to sign the txn instead of the funder account. |
| › `callableContracts` | `string`[] | The contracts that the trial account should be able to call. |
| › `callableMethods` | `string`[][] | An array that contains the list of methods that the trial account should be able to call on each respective contract. To allow any methods to be called on the receiver contract, pass in `[*]`. |
| › `config?` | [`DropConfig`](interfaces/DropConfig.md) | Allows specific drop behaviors to be configured such as the number of uses each key / link will have. |
| › `contractBytes` | `number`[] | Bytes of the trial account smart contract |
| › `dropId?` | `string` | Specify a custom drop ID rather than using the incrementing nonce on the contract. |
| › `maxAttachableNEARPerContract` | (`string` \| `number`)[] | The upper bound of $NEAR that trial account is able to attach to calls associated with each contract passed in. For no upper limit, pass in `*`. Units are in $NEAR (i.e `1` = 1 $NEAR). |
| › `maxAttachableYoctoPerContract` | `string`[] | The upper bound of $yocto that trial account is able to attach to calls associated with each contract passed in. For no upper limit, pass in `*`. Units are in $yoctoNEAR (i.e `1` = 1 $yoctoNEAR). |
| › `metadata?` | `string` | String of metadata to attach to the drop. This can be whatever you would like and is optional. Often this is stringified JSON. |
| › `numKeys` | `number` | Specify how many keys should be generated for the drop. If the funder has rootEntropy set OR rootEntropy is passed in, the keys will be deterministically generated using the drop ID, key nonce, and entropy. Otherwise, each key will be generated randomly. |
| › `publicKeys?` | `string`[] | Pass in a custom set of publicKeys to add to the drop. If this is not passed in, keys will be generated based on the numKeys parameter. |
| › `repayAmountNEAR?` | `string` \| `number` | How much $NEAR should be paid back to the specified funder in order to unlock the trial account. Unit in $NEAR (i.e `1` = 1 $NEAR) |
| › `repayAmountYocto?` | `string` | How much $NEAR should be paid back to the specified funder in order to unlock the trial account. Unit in yoctoNEAR (1 yoctoNEAR = 1e-24 $NEAR) |
| › `repayTo?` | `string` | The account that should receive the repayment of the trial account. If not specified, the drop funder will be used. |
| › `returnTransactions?` | `boolean` | If true, the transaction will be returned instead of being signed and sent. This is useful for getting the requiredDeposit from the return value without actually signing the transaction. |
| › `rootEntropy?` | `string` | Specify an entropy to use for generating keys (will overload the funder's rootEntropy if applicable). This parameter only matters if the publicKeys variable is not passed in. |
| › `startingBalanceNEAR?` | `string` \| `number` | How much $NEAR should the trial account start with? Unit in $NEAR (i.e `1` = 1 $NEAR) |
| › `startingBalanceYocto?` | `string` | How much $NEAR should the trial account start with? Unit in yoctoNEAR (1 yoctoNEAR = 1e-24 $NEAR) |
| › `successUrl?` | `string` | When signing with a wallet, a success URl can be included that the user will be redirected to once the transaction has been successfully signed. |
| › `trialEndFloorNEAR` | `string` \| `number` | Once the account has spent more than this amount (in $NEAR), the trial is over and the exit conditions must be met. |
| › `trialEndFloorYocto` | `string` | Once the account has spent more than this amount (in yocto), the trial is over and the exit conditions must be met. |
| › `useBalance?` | `boolean` | If the account has a balance within the Keypom contract, set this to true to avoid the need to attach a deposit. If the account doesn't have enough balance, an error will throw. |
| › `wallet?` | `AnyWallet` | If using a browser wallet through wallet selector and that wallet should sign the transaction, pass in the object. |

#### Returns

`Promise`<[`CreateOrAddReturn`](interfaces/CreateOrAddReturn.md)\>

Object containing: the drop ID, the responses of the execution, as well as any auto generated keys (if any).

#### Defined in

[lib/trial-accounts/pre-trial.ts:81](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/trial-accounts/pre-trial.ts#L81)

___

### trialCallMethod

**trialCallMethod**(`«destructured»`): `Promise`<`FinalExecutionOutcome`[]\>

Execute a method using a trial account. If the trial account is in the exit state, this will throw an error. Similarly, if the given method data
cannot be executed by the trial account (e.g. the attached deposit exceeds the trial account's restrictions), this will throw an error.

**`Example`**

Using a trial account to mint a new NFT:
```js
    await initKeypom({
		network: 'testnet',
		funder: {
			accountId: fundingAccountId,
			secretKey: fundingAccountSecretKey,
		}
	});

   const callableContracts = [
       `nft.examples.testnet`
   ]

   const {dropId, keys: {secretKeys: trialSecretKeys, publicKeys: trialPublicKeys}}
   = await createTrialAccountDrop({
       numKeys: 1,
       contractBytes: [...readFileSync('./test/ext-wasm/trial-accounts.wasm')],
       startingBalanceNEAR: 0.5,
       callableContracts: callableContracts,
       callableMethods: ['*'],
       maxAttachableNEARPerContract: [1],
       trialEndFloorNEAR: 0.33 + 0.3
   })

   const desiredAccountId = `${dropId}-keypom.testnet`
   const trialSecretKey = trialSecretKeys[0]
   await claimTrialAccountDrop({
       desiredAccountId,
       secretKey: trialSecretKeys[0],
   })

   console.log('desiredAccountId: ', desiredAccountId)
   console.log(`trialSecretKey: ${JSON.stringify(trialSecretKey)}`)

   await trialCallMethod({
       trialAccountId: desiredAccountId,
       trialAccountSecretKey: trialSecretKey,
       contractId: callableContracts[0],
       methodName: 'nft_mint',
       args: {
           token_id: 'asdkasldkjasdlkajsldajsldaskjd',
           receiver_id: 'foo.testnet',
           metadata: {
               title: 'test',
               description: 'test',
               media: 'test',
           }
       },
       attachedDeposit: parseNearAmount('0.1'),
       attachedGas: '30000000000000',
   })
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `args` | `Object` | The arguments to pass to the method |
| › `attachedDeposit` | `string` | The amount of NEAR to attach to the transaction |
| › `attachedGas` | `string` | The amount of gas to attach to the transaction |
| › `contractId` | `string` | The contract ID of the contract to call |
| › `methodName` | `string` | The method name to call |
| › `trialAccountId` | `string` | The account ID of the trial account |
| › `trialAccountSecretKey` | `string` | The secret key of the trial account |

#### Returns

`Promise`<`FinalExecutionOutcome`[]\>

The outcome of the transaction

#### Defined in

[lib/trial-accounts/trial-active.ts:248](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/trial-accounts/trial-active.ts#L248)

___

### trialSignAndSendTxns

**trialSignAndSendTxns**(`«destructured»`): `Promise`<`FinalExecutionOutcome`[]\>

Execute a transaction that can contain multiple actions using a trial account. If the trial account is in the exit state, this will throw an error. Similarly, if any action
cannot be executed by the trial account (e.g. the attached deposit exceeds the trial account's restrictions), this will throw an error.

**`Example`**

Use a Trial Account to min2
```js
await initKeypom({
       // near,
       network: 'testnet',
       funder: {
           accountId: fundingAccountId,
           secretKey: fundingAccountSecretKey,
       }
   });

   const callableContracts = [
       `nft.examples.testnet`
   ]

   const {dropId, keys: {secretKeys: trialSecretKeys, publicKeys: trialPublicKeys}}
   = await createTrialAccountDrop({
       numKeys: 1,
       contractBytes: [...readFileSync('./test/ext-wasm/trial-accounts.wasm')],
       startingBalanceNEAR: 0.5,
       callableContracts: callableContracts,
       callableMethods: ['*'],
       maxAttachableNEARPerContract: [1],
       trialEndFloorNEAR: 0.33 + 0.3
   })

   const desiredAccountId = `${dropId}-keypom.testnet`
   const trialSecretKey = trialSecretKeys[0]
   await claimTrialAccountDrop({
       desiredAccountId,
       secretKey: trialSecretKeys[0],
   })

   console.log('desiredAccountId: ', desiredAccountId)
   console.log(`trialSecretKey: ${JSON.stringify(trialSecretKey)}`)
   const txns = [{
       receiverId: callableContracts[0],
       actions: [
           {
               type: 'FunctionCall',
               params: {
                   methodName: 'nft_mint',
                   args: {
                       token_id: 'tokenId-keypom-1',
                       receiver_id: 'foo.testnet',
                       metadata: {
                           title: 'test1',
                           description: 'test1',
                           media: 'test1',
                       }
                   },
                   gas: '30000000000000',
                   deposit: parseNearAmount('0.1')
               },
           },
           {
               type: 'FunctionCall',
               params: {
                   methodName: 'nft_mint',
                   args: {
                       token_id: 'tokenId-keypom-2',
                       receiver_id: 'foo.testnet',
                       metadata: {
                           title: 'test2',
                           description: 'test2',
                           media: 'test2',
                       }
                   },
                   gas: '30000000000000',
                   deposit: parseNearAmount('0.1')
               },
           },
       ],
   }];

   await trialSignAndSendTxns({
       trialAccountId: desiredAccountId,
       trialAccountSecretKey: trialSecretKey,
       txns
   })
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `trialAccountId` | `string` | The trial account ID to use |
| › `trialAccountSecretKey` | `string` | The trial account secret key to use |
| › `txns` | `Transaction`[] | The transactions to execute |

#### Returns

`Promise`<`FinalExecutionOutcome`[]\>

The outcomes of the transactions

#### Defined in

[lib/trial-accounts/trial-active.ts:106](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/trial-accounts/trial-active.ts#L106)

## View Functions

### canUserAddKeys

**canUserAddKeys**(`«destructured»`): `Promise`<`boolean`\>

Check if a given user can add keys to a drop. The only case where a user *other than the funder* could add keys is if the drop has a public sale running.

**`Example`**

```js
await createDrop({
	numKeys: 0,
	depositPerUseNEAR: 0,
	config: {
		sale: {
			maxNumKeys: 2,
			pricePerKeyNEAR: 1
		}
	}
});

const canAddKeys = await canUserAddKeys({accountId: "foobar.testnet"});
t.is(canAddKeys, true);
```

#### Parameters

| Name | Type |
| :------ | :------ |
| `«destructured»` | `Object` |
| › `accountId` | `string` |
| › `dropId` | `string` |

#### Returns

`Promise`<`boolean`\>

Whether or not the user can add keys to the drop

#### Defined in

[lib/views.ts:854](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/views.ts#L854)

___

### getContractSourceMetadata

**getContractSourceMetadata**(): `Promise`<[`ContractSourceMetadata`](interfaces/ContractSourceMetadata.md)\>

Returns the source metadata for the Keypom contract that the SDK has been initialized on. This includes valuable information
such as which specific version the contract is on and link to exactly which GitHub commit is deployed.

**`Example`**

Query for the current Keypom contract's source metadata:
```js
// Initialize the SDK on testnet. No funder is passed in since we're only doing view calls.
await initKeypom({
network: "testnet",
});

// Query for the Keypom contract's source metadata
const metadata = await getContractSourceMetadata();

console.log('metadata: ', metadata)
```

#### Returns

`Promise`<[`ContractSourceMetadata`](interfaces/ContractSourceMetadata.md)\>

The contract's source metadata

#### Defined in

[lib/views.ts:896](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/views.ts#L896)

___

### getCurMethodData

**getCurMethodData**(`«destructured»`): `Promise`<[`ProtocolReturnedMethod`](interfaces/ProtocolReturnedMethod.md)[]\>

Query for the current method data for a given key. This pertains to FC drops and the current method data is either null or an array of methods that will be invoked when the key is claimed next.

**`Example`**

```js
const fcData = {
	methods: [
		null,
		[
			{
				methodName: "nft_token",
				receiverId: "nft.examples.testnet",
				args: JSON.stringify({
					token_id: "1"
				}),
				attachedDeposit: "0"
			},
			{
				methodName: "nft_token",
				receiverId: "nft.examples.testnet",
				args: JSON.stringify({
					token_id: "2"
				}),
				attachedDeposit: "0"
			}
		],
		null
	]
}

const {keys: {publicKeys, secretKeys}} = await createDrop({
	numKeys: 1,
	depositPerUseNEAR: 0,
	fcData,
	config: {
		usesPerKey: 3
	}
});
const secretKey = secretKeys[0];

let curMethodData = await getCurMethodData({secretKey});
console.log('curMethodData (first): ', curMethodData)
t.is(curMethodData, null);

	curMethodData = await getCurMethodData({secretKey, keyUse: 1});
	t.is(curMethodData, null);
	curMethodData = await getCurMethodData({secretKey, keyUse: 2});
	t.true(curMethodData != null);
	curMethodData = await getCurMethodData({secretKey, keyUse: 3});
	t.is(curMethodData, null);

await claim({secretKey, accountId: 'foobar'})
curMethodData = await getCurMethodData({secretKey});
t.true(curMethodData != null);

await claim({secretKey, accountId: 'foobar'})
curMethodData = await getCurMethodData({secretKey});
console.log('curMethodData (third): ', curMethodData)
t.is(curMethodData, null);
```

#### Parameters

| Name | Type |
| :------ | :------ |
| `«destructured»` | `Object` |
| › `keyUse?` | `number` |
| › `publicKey?` | `string` |
| › `secretKey?` | `string` |

#### Returns

`Promise`<[`ProtocolReturnedMethod`](interfaces/ProtocolReturnedMethod.md)[]\>

The current method data for the key

#### Defined in

[lib/views.ts:797](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/views.ts#L797)

___

### getDropInformation

**getDropInformation**(`«destructured»`): `Promise`<[`ProtocolReturnedDrop`](interfaces/ProtocolReturnedDrop.md)\>

Get information about a specific drop by passing in either a drop ID, public key, or secret key.

**`Example`**

Create a simple drop and retrieve information about it:
```js
// Initialize the SDK on testnet.
await initKeypom({
    network: "testnet",
    funder: {
        accountId: "benji_demo.testnet",
        secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
    }
});

// Create a drop with 1 key automatically created. That key will be completely random since there is no entropy.
const {dropId} = await createDrop({
    numKeys: 1,
    depositPerUseNEAR: 1
});

// Query for the drop information and also return the key information as well
const dropInfo = await getDropInformation({
    dropId,
    withKeys: true
})

console.log('dropInfo: ', dropInfo)
```

**`Example`**

Create a simple drop and get the drop information based on a public key and then the secret key:
```js
// Initialize the SDK on testnet.
await initKeypom({
    network: "testnet",
    funder: {
        accountId: "benji_demo.testnet",
        secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
    }
});

// Create a drop with 1 key automatically created. That key will be completely random since there is no entropy.
const {keys} = await createDrop({
    numKeys: 1,
    depositPerUseNEAR: 1
});

// Query for the drop information and also return the key information as well
let dropInfo = await getDropInformation({
	   publicKey: keys.publicKeys[0],
    withKeys: true
})

console.log('dropInfo via public key: ', dropInfo)

// Query for the drop information and also return the key information as well
dropInfo = await getDropInformation({
	   secretKey: keys.secretKeys[0],
    withKeys: true
})

console.log('dropInfo via secret key: ', dropInfo)
```

#### Parameters

| Name | Type |
| :------ | :------ |
| `«destructured»` | `Object` |
| › `dropId?` | `string` |
| › `publicKey?` | `string` |
| › `secretKey?` | `string` |
| › `withKeys?` | `boolean` |

#### Returns

`Promise`<[`ProtocolReturnedDrop`](interfaces/ProtocolReturnedDrop.md)\>

Drop information which may or may not have a keys field of type `KeyInfo` depending on if withKeys is specified as true.

#### Defined in

[lib/views.ts:336](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/views.ts#L336)

___

### getDropSupplyForOwner

**getDropSupplyForOwner**(`accountId`): `Promise`<`number`\>

Returns the total supply of active drops for a given account ID

**`Example`**

Create a drop and check how many the owner has:
```js
// Initialize the SDK on testnet.
await initKeypom({
    network: "testnet",
    funder: {
        accountId: "benji_demo.testnet",
        secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
    }
});

// Create a drop with no keys
await createDrop({
    depositPerUseNEAR: 1
});

// Query for the amount of drops owned by the account
const dropSupply = await getDropSupplyForOwner({
    accountId: "benji_demo.testnet"
})

console.log('dropSupply: ', dropSupply)
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `accountId` | `Object` | The account that the drops belong to. |
| `accountId.accountId` | `string` | - |

#### Returns

`Promise`<`number`\>

Amount of drops

#### Defined in

[lib/views.ts:517](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/views.ts#L517)

___

### getDrops

**getDrops**(`«destructured»`): `Promise`<[`ProtocolReturnedDrop`](interfaces/ProtocolReturnedDrop.md)[]\>

Paginate through drops owned by an account. If specified, information for the first 50 keys in each drop can be returned as well.

**`Example`**

Get drop information for the last 5 drops owned by a given account:
```js
// Initialize the SDK on testnet. No funder is passed in since we're only doing view calls.
await initKeypom({
	network: "testnet",
});

// Get the number of drops the account has.
const numDrops = await getDropSupply({
	accountId: "benjiman.testnet"
});

// Query for drop information for the last 5 drops and their respective keys
const dropsAndKeys = await getDrops({
	accountId: "benjiman.testnet",
	start: numDrops - 5,
	withKeys: true
})

console.log('dropsAndKeys: ', dropsAndKeys)
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `accountId` | `string` | The funding account that the drops belong to. |
| › `limit` | `number` | How many drops to paginate through. |
| › `start` | `string` \| `number` | Where to start paginating through drops. |
| › `withKeys` | `boolean` | Whether or not to include key information for the first 50 keys in each drop. |

#### Returns

`Promise`<[`ProtocolReturnedDrop`](interfaces/ProtocolReturnedDrop.md)[]\>

#### Defined in

[lib/views.ts:562](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/views.ts#L562)

___

### getKeyBalance

**getKeyBalance**(`«destructured»`): `Promise`<`string`\>

Returns the balance associated a with given public key. If only the secret key is known, this can be passed in instead. This is used by the NEAR wallet to display the amount of the linkdrop

**`Example`**

Create a 1 $NEAR linkdrop and query for its balance:
```js
// Initialize the SDK on testnet.
await initKeypom({
    network: "testnet",
    funder: {
        accountId: "benji_demo.testnet",
        secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
    }
});

// Create a drop with 1 key automatically created. That key will be completely random since there is no entropy.
const {keys} = await createDrop({
    numKeys: 1,
    depositPerUseNEAR: 1
});

// Query for the amount of yoctoNEAR contained within the key
const keyBalance = await getKeyBalance({
    publicKey: keys.publicKeys[0]
})

console.log('keyBalance: ', keyBalance)
```

#### Parameters

| Name | Type |
| :------ | :------ |
| `«destructured»` | `Object` |
| › `publicKey?` | `string` |
| › `secretKey?` | `string` |

#### Returns

`Promise`<`string`\>

The amount of yoctoNEAR that is contained within the key

#### Defined in

[lib/views.ts:47](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/views.ts#L47)

___

### getKeyInformation

**getKeyInformation**(`«destructured»`): `Promise`<[`ProtocolReturnedKeyInfo`](interfaces/ProtocolReturnedKeyInfo.md)\>

Returns the KeyInfo corresponding to a specific public key

**`Example`**

Create a drop and query for the key information:
```js
// Initialize the SDK on testnet.
await initKeypom({
    network: "testnet",
    funder: {
        accountId: "benji_demo.testnet",
        secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
    }
});

// Create a drop with 1 key automatically created. That key will be completely random since there is no entropy.
const {keys} = await createDrop({
    numKeys: 1,
    depositPerUseNEAR: 1
});

// Query for the key information for the key that was created
const keyInfo = await getKeyInformation({
    publicKey: keys.publicKeys[0]
})

console.log('keyInfo: ', keyInfo)
```

#### Parameters

| Name | Type |
| :------ | :------ |
| `«destructured»` | `Object` |
| › `publicKey?` | `string` |
| › `secretKey?` | `string` |

#### Returns

`Promise`<[`ProtocolReturnedKeyInfo`](interfaces/ProtocolReturnedKeyInfo.md)\>

Key information struct for that specific key.

#### Defined in

[lib/views.ts:177](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/views.ts#L177)

___

### getKeyInformationBatch

**getKeyInformationBatch**(`«destructured»`): `Promise`<[`ProtocolReturnedKeyInfo`](interfaces/ProtocolReturnedKeyInfo.md)[]\>

Returns a vector of KeyInfo corresponding to a set of public keys passed in.

**`Example`**

Create a drop and query for the key information for all keys created:
```js
// Initialize the SDK on testnet.
await initKeypom({
    network: "testnet",
    funder: {
        accountId: "benji_demo.testnet",
        secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
    }
});

// Create a drop with 5 keys automatically created. That key will be completely random since there is no entropy.
const {keys} = await createDrop({
    numKeys: 5,
    depositPerUseNEAR: 1
});

// Query for the key information for the key that was created
const keyInfos = await getKeyInformationBatch({
    publicKeys: keys.publicKeys
})

console.log('keyInfos: ', keyInfos)
```

#### Parameters

| Name | Type |
| :------ | :------ |
| `«destructured»` | `Object` |
| › `publicKeys?` | `string`[] |
| › `secretKeys?` | `string`[] |

#### Returns

`Promise`<[`ProtocolReturnedKeyInfo`](interfaces/ProtocolReturnedKeyInfo.md)[]\>

Array of Key information structs for the keys passed in

#### Defined in

[lib/views.ts:236](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/views.ts#L236)

___

### getKeySupplyForDrop

**getKeySupplyForDrop**(`dropId`): `Promise`<`number`\>

Returns the total supply of active keys for a given drop

**`Example`**

Create a drop with 5 keys and query for the key supply:
```js
// Initialize the SDK on testnet.
await initKeypom({
    network: "testnet",
    funder: {
        accountId: "benji_demo.testnet",
        secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
    }
});

// Create a drop with 5 keys automatically created. That key will be completely random since there is no entropy.
const {keys, dropId} = await createDrop({
    numKeys: 5,
    depositPerUseNEAR: 1
});

// Query for the key supply for the drop that was created
const keySupply = await getKeySupplyForDrop({
    dropId
})

console.log('keySupply: ', keySupply)
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `dropId` | `Object` | The drop ID for the specific drop that you want to get information about. |
| `dropId.dropId` | `string` | - |

#### Returns

`Promise`<`number`\>

Number of active keys

#### Defined in

[lib/views.ts:416](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/views.ts#L416)

___

### getKeyTotalSupply

**getKeyTotalSupply**(): `Promise`<`number`\>

Query for the total supply of keys currently on the Keypom contract

**`Example`**

Query for the key supply on the `v1.keypom.testnet` contract:
```js
// Initialize the SDK on testnet. No funder is passed in since we're only doing view calls
await initKeypom({
    network: "testnet",
    keypomContractId: "v1.keypom.testnet"
});

// Query for the number of keys on the contract
const numKeys = await getKeyTotalSupply();

console.log('numKeys: ', numKeys)
```

#### Returns

`Promise`<`number`\>

The amount of keys.

#### Defined in

[lib/views.ts:92](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/views.ts#L92)

___

### getKeys

**getKeys**(`«destructured»`): `Promise`<[`ProtocolReturnedKeyInfo`](interfaces/ProtocolReturnedKeyInfo.md)[]\>

Paginate through all active keys on the contract and return a vector of key info.

**`Example`**

Query for first 50 keys on the `v1.keypom.testnet` contract:
```js
// Initialize the SDK on testnet. No funder is passed in since we're only doing view calls
await initKeypom({
    network: "testnet",
    keypomContractId: "v1.keypom.testnet"
});

// Query for the first 50 keys on the contract
const keyInfo = await getKeys({
  start: 0,
  limit: 50
});

console.log('keyInfo: ', keyInfo)
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `limit?` | `number` | (OPTIONAL) How many keys to paginate through. |
| › `start?` | `string` \| `number` | (OPTIONAL) Where to start paginating through keys. |

#### Returns

`Promise`<[`ProtocolReturnedKeyInfo`](interfaces/ProtocolReturnedKeyInfo.md)[]\>

Vector of KeyInfo.

#### Defined in

[lib/views.ts:126](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/views.ts#L126)

___

### getKeysForDrop

**getKeysForDrop**(`«destructured»`): `Promise`<[`ProtocolReturnedKeyInfo`](interfaces/ProtocolReturnedKeyInfo.md)[]\>

Paginate through all keys in a specific drop, returning an array of KeyInfo.

**`Example`**

Create a drop with 5 keys and return all the key info objects:
```js
// Initialize the SDK on testnet.
await initKeypom({
    network: "testnet",
    funder: {
        accountId: "benji_demo.testnet",
        secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
    }
});

// Create a drop with 5 keys automatically created. That key will be completely random since there is no entropy.
const {dropId} = await createDrop({
    numKeys: 5,
    depositPerUseNEAR: 1
});

// Query for the key supply for the drop that was created
const keyInfos = await getKeysForDrop({
    dropId
})

console.log('keyInfos: ', keyInfos)
```

#### Parameters

| Name | Type |
| :------ | :------ |
| `«destructured»` | `Object` |
| › `dropId` | `string` |
| › `limit?` | `number` |
| › `start?` | `string` \| `number` |

#### Returns

`Promise`<[`ProtocolReturnedKeyInfo`](interfaces/ProtocolReturnedKeyInfo.md)[]\>

Vector of KeyInfo objects returned from pagination

#### Defined in

[lib/views.ts:465](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/views.ts#L465)

___

### getNftSupplyForDrop

**getNftSupplyForDrop**(`dropId`): `Promise`<`number`\>

Return the total supply of token IDs for a given NFT drop.

**`Example`**

Query for the supply of tokens on a specific drop:
```js
// Initialize the SDK on testnet. No funder is passed in since we're only doing view calls.
await initKeypom({
network: "testnet",
});

// Query for the amount of token IDs on the drop
const tokenSupply = await getNftSupplyForDrop({
  dropId: "1669840629120"
})

console.log('tokenSupply: ', tokenSupply)
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `dropId` | `Object` | The drop ID that the tokens belong to. |
| `dropId.dropId` | `string` | - |

#### Returns

`Promise`<`number`\>

The amount of token IDs on the drop

#### Defined in

[lib/views.ts:634](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/views.ts#L634)

___

### getNftTokenIDsForDrop

**getNftTokenIDsForDrop**(`«destructured»`): `Promise`<`string`[]\>

Paginate through token IDs in an NFT drop to return a vector of token IDs.

**`Example`**

Query for a list of token IDs on a specific drop:
```js
// Initialize the SDK on testnet. No funder is passed in since we're only doing view calls.
await initKeypom({
network: "testnet",
});

// Query for a set of token IDs on the drop
const tokenList = await getNftTokenIDsForDrop({
  dropId: "1669840629120"
})

console.log('tokenList: ', tokenList)
```

#### Parameters

| Name | Type |
| :------ | :------ |
| `«destructured»` | `Object` |
| › `dropId` | `string` |
| › `limit?` | `number` |
| › `start?` | `string` \| `number` |

#### Returns

`Promise`<`string`[]\>

Vector of token IDs

#### Defined in

[lib/views.ts:673](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/views.ts#L673)

___

### getUserBalance

**getUserBalance**(`accountId`): `Promise`<`string`\>

Query for a user's current balance on the Keypom contract

**`Example`**

Query for a user's current balance on the Keypom contract:
```js
// Initialize the SDK on testnet. No funder is passed in since we're only doing view calls.
await initKeypom({
network: "testnet",
});

// Query for the drop information for a specific drop
const userBal = await getUserBalance({
accountId: "benjiman.testnet",
})

console.log('userBal: ', userBal)
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `accountId` | `Object` | The account ID of the user to retrieve the balance for. |
| `accountId.accountId` | `string` | - |

#### Returns

`Promise`<`string`\>

The user's current balance

#### Defined in

[lib/views.ts:716](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/views.ts#L716)

## Functions

### convertBasicTransaction

**convertBasicTransaction**(`«destructured»`): `Promise`<`Transaction`\>

#### Parameters

| Name | Type |
| :------ | :------ |
| `«destructured»` | `Object` |
| › `signerId` | `string` |
| › `signerPk` | `PublicKey` |
| › `txnInfo` | [`BasicTransaction`](interfaces/BasicTransaction.md) |

#### Returns

`Promise`<`Transaction`\>

#### Defined in

[lib/keypom-utils.ts:1445](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom-utils.ts#L1445)

___

### isUnclaimedTrialDrop

**isUnclaimedTrialDrop**(`«destructured»`): `Promise`<`boolean`\>

#### Parameters

| Name | Type |
| :------ | :------ |
| `«destructured»` | `Object` |

#### Returns

`Promise`<`boolean`\>

#### Defined in

[lib/trial-accounts/utils.ts:232](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/trial-accounts/utils.ts#L232)

___

### wrapTxnParamsForTrial

**wrapTxnParamsForTrial**(`params`, `newParams?`): `Object`

#### Parameters

| Name | Type |
| :------ | :------ |
| `params` | `any` |
| `newParams` | `Object` |

#### Returns

`Object`

#### Defined in

[lib/trial-accounts/utils.ts:103](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/trial-accounts/utils.ts#L103)

## Deleting State

### deleteDrops

**deleteDrops**(`«destructured»`): `Promise`<(`void` \| `FinalExecutionOutcome`[])[][]\>

Delete a set of drops and optionally withdraw any remaining balance you have on the Keypom contract.

**`Example`**

Create 5 drops and delete each of them:
```js
// Initialize the SDK for the given network and NEAR connection
await initKeypom({
	network: "testnet",
	funder: {
		accountId: "benji_demo.testnet",
		secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
	}
});

// loop to create 5 simple drops each with 5 more keys than the next
for(var i = 0; i < 5; i++) {
	// create 10 keys with no entropy (all random)
	const {publicKeys} = await generateKeys({
		numKeys: 5 * (i+1) // First drop will have 5, then 10, then 15 etc..
	});

	// Create the simple
	await createDrop({
		publicKeys,
		depositPerUseNEAR: 1,
	});
}

let drops = await getDrops({accountId: "benji_demo.testnet"});
console.log('drops: ', drops)

await deleteDrops({
	drops
})

	// Get the number of drops the account has after deletion (should be zero)
	const numDrops = await getDropSupply({
		accountId: "benjiman.testnet"
});
console.log('numDrops: ', numDrops)
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `account?` | `Account` | Account object that if passed in, will be used to sign the txn instead of the funder account. |
| › `dropIds?` | `string`[] | Specify a set of drop IDs to delete. |
| › `drops?` | [`ProtocolReturnedDrop`](interfaces/ProtocolReturnedDrop.md)[] | If the set of drop information for the drops you want to delete (from `getDropInformation` or `getDrops`) is already known to the client, it can be passed in instead of the drop IDs to reduce computation. |
| › `wallet?` | `AnyWallet` | If using a browser wallet through wallet selector and that wallet should sign the transaction, pass in the object. |
| › `withdrawBalance?` | `boolean` | Whether or not to withdraw any remaining balance on the Keypom contract. |

#### Returns

`Promise`<(`void` \| `FinalExecutionOutcome`[])[][]\>

#### Defined in

[lib/drops.ts:599](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/drops.ts#L599)

___

### deleteKeys

**deleteKeys**(`«destructured»`): `Promise`<`any`\>

Delete a set of keys from a drop and optionally withdraw any remaining balance you have on the Keypom contract.

**`Example`**

Create a drop with 5 keys and delete the first one:
```js
// Initialize the SDK for the given network and NEAR connection
await initKeypom({
	network: "testnet",
	funder: {
		accountId: "benji_demo.testnet",
		secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
	}
});

// Create the simple drop with 5 random keys
const {keys, dropId} = await createDrop({
	numKeys: 5,
	depositPerUseNEAR: 1,
});

await deleteKeys({
	dropId,
	publicKeys: keys.publicKeys[0] // Can be wrapped in an array as well
})
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `account?` | `Account` | Account object that if passed in, will be used to sign the txn instead of the funder account. |
| › `dropId` | `string` | Which drop ID do the keys belong to? |
| › `publicKeys` | `string` \| `string`[] | Specify a set of public keys to delete. If deleting a single publicKey, the string can be passed in without wrapping it in an array. |
| › `wallet?` | `AnyWallet` | If using a browser wallet through wallet selector and that wallet should sign the transaction, pass in the object. |
| › `withdrawBalance?` | `boolean` | Whether or not to withdraw any remaining balance on the Keypom contract. |

#### Returns

`Promise`<`any`\>

#### Defined in

[lib/keys.ts:441](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keys.ts#L441)

## Registering Key Uses

### ftTransferCall

**ftTransferCall**(`«destructured»`): `Promise`<`Transaction` \| `Promise`<`void` \| `FinalExecutionOutcome`[]\>\>

For FT Drops, keys need to be registered before they can be used. This is done via the `ft_transfer_call` method on the FT contract.
This is a convenience method to make that process easier.

**`Example`**

Send FTs using the funder account (not passing in any accounts into the call):
```js
// Initialize the SDK on testnet
await initKeypom({
	network: "testnet",
	funder: {
		accountId: "benji_demo.testnet",
		secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
	}
});

await ftTransferCall({
    contractId: "ft.keypom.testnet",
    amount: "1",
    dropId: "1231231",
)};
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `absoluteAmount?` | `string` | Amount of tokens to transfer but considering the decimal amount (non human-readable). Example: transferring one wNEAR should be passed in as "1000000000000000000000000" and NOT "1" |
| › `account?` | `Account` | Account object that if passed in, will be used to sign the txn instead of the funder account. |
| › `amount?` | `string` | Human readable format for the amount of tokens to transfer. Example: transferring one wNEAR should be passed in as "1" and NOT "1000000000000000000000000" |
| › `contractId` | `string` | The fungible token contract ID. |
| › `dropId` | `string` | The drop ID to register the keys for. |
| › `returnTransaction?` | `boolean` | If true, the transaction will be returned instead of being signed and sent. |
| › `wallet?` | `AnyWallet` | If using a browser wallet through wallet selector and that wallet should sign the transaction, pass in the object. |

#### Returns

`Promise`<`Transaction` \| `Promise`<`void` \| `FinalExecutionOutcome`[]\>\>

#### Defined in

[lib/keypom-utils.ts:797](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom-utils.ts#L797)

___

### nftTransferCall

**nftTransferCall**(`«destructured»`): `Promise`<`Transaction`[] \| (`void` \| `FinalExecutionOutcome`[])[]\>

For NFT Drops, keys need to be registered before they can be used. This is done via the `nft_transfer_call` method on the NFT contract.
This is a convenience method to make that process easier.

**`Example`**

Send 3 NFTs using the funder account (not passing in any accounts into the call):
```js
// Initialize the SDK on testnet
await initKeypom({
	network: "testnet",
	funder: {
		accountId: "benji_demo.testnet",
		secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
	}
});

await nftTransferCall({
    contractId: "nft.keypom.testnet",
    tokenIds: ["1", "2", "3],
    dropId: "1231231",
)};
```

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| `«destructured»` | `Object` | - |
| › `account?` | `Account` | Account object that if passed in, will be used to sign the txn instead of the funder account. |
| › `contractId` | `string` | The non-fungible token contract ID. |
| › `dropId` | `string` | The drop ID to register the keys for. |
| › `returnTransactions?` | `boolean` | If true, the transaction will be returned instead of being signed and sent. |
| › `tokenIds` | `string`[] | A set of token IDs that should be sent to the Keypom contract in order to register keys. |
| › `wallet?` | `AnyWallet` | If using a browser wallet through wallet selector and that wallet should sign the transaction, pass in the object. |

#### Returns

`Promise`<`Transaction`[] \| (`void` \| `FinalExecutionOutcome`[])[]\>

#### Defined in

[lib/keypom-utils.ts:906](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/core/src/lib/keypom-utils.ts#L906)

'''
'''--- docs/keypom-sdk/Core/welcome.md ---
---
id: "welcome"
title: "@keypom/core - v1.0.2"
sidebar_label: "Readme"
sidebar_position: 0
custom_edit_url: null
---

<p align="center">
  <a href="https://docs.keypom.xyz/">
    <picture>
      <img src="https://cloudflare-ipfs.com/ipfs/bafybeightypuoqly32gsrivh4efckhdv6wsefiynpnonlem6ts3ypgdm7e" height="128"/>
    </picture>
    <h1 align="center">Keypom Core SDK</h1>
  </a>
</p>

<p align="center">
  <a aria-label="Made by Ben Kurrek" href="https://github.com/BenKurrek">
    <img src="https://img.shields.io/badge/MADE%20BY-Ben%20Kurrek-000000.svg?style=for-the-badge"/>
  </a>
  <a aria-label="Made by Matt Lockyer" href="https://github.com/mattlockyer">
    <img src="https://img.shields.io/badge/MADE%20BY-Matt%20Lockyer-000000.svg?style=for-the-badge"/>
  </a>
  <a aria-label="License" href="https://github.com/keypom/keypom-js/blob/main/LICENSE">
    <img alt="" src="https://img.shields.io/badge/License-GNU%20GPL-green?style=for-the-badge"/>
  </a>
  <a aria-label="Join the community" href="https://t.me/+OqI-cKxQU05lZDIx">
    <img alt="" src="https://img.shields.io/badge/Join%20The-community-blueviolet.svg?style=for-the-badge"/>
  </a>
</p>

The core package serves as a way to interact with Keypom through a set of easy to use methods that abstract away the complexities of the protocol. The package includes ways to:
- Create drops of all kinds
- Claim drops
- Create and use trial accounts
- View information about drops and keys
- Delete drops and refund assets
- Manage user balances

# Table of Contents
- [Table of Contents](#table-of-contents)
- [Installation](#installation)
- [Getting Started](#getting-started)
  - [View Methods \& Utility Functions Only](#view-methods--utility-functions-only)
  - [Funder Object](#funder-object)
  - [Customized KeyStore \& Multiple Signers](#customized-keystore--multiple-signers)
- [Costs](#costs)
  - [Per Drop](#per-drop)
  - [Per Key](#per-key)
    - [Key Costs for Simple Drop](#key-costs-for-simple-drop)
    - [Additional Costs for NFT Drops](#additional-costs-for-nft-drops)
    - [Additional Costs for FT Drops](#additional-costs-for-ft-drops)
    - [Additional Costs for FC Drops](#additional-costs-for-fc-drops)
- [Contributing](#contributing)
- [License](#license)

---

# Installation

To install the Keypom Core SDK, run the following command:

```bash
npm install @keypom/core
# or
yarn add @keypom/core
# or
pnpm add @keypom/core
```

# Getting Started

The first thing you must *always* do when using the SDK is to call `initKeypom`. This will initialize the package state and establish a connection to the NEAR blockchain. 

By default, the SDK will create a new [InMemoryKeyStore](https://github.com/near/near-api-js/blob/master/packages/keystores/src/in_memory_key_store.ts) to sign transactions with. Thus, if you don't pass in a `funder` object, you won't be able to sign transactions and can only invoke utility and view methods. Alternatively, if you'd like to use a different keystore, you can pass in a customized `near` object to the initialization function.

With the SDK, every function that requires transactions to be signed can be carried through in 1 of two ways:
1. Passing in an [Account](https://github.com/near/near-api-js/blob/master/packages/accounts/src/account.ts) object into the function whose keys are kept in the SDK's keystore.
2. Passing in a `funder` object once during initialization whose keys will be kept in the SDK's [InMemoryKeyStore](https://github.com/near/near-api-js/blob/master/packages/keystores/src/in_memory_key_store.ts).

## View Methods & Utility Functions Only

If your only purpose is to query information from the chain or use Keypom's utility functions such as `generateKeys`, you don't need to pass in a `near` or `funder` object to `initKeypom`:

```js
await initKeypom({
    network: "testnet"
});

const keys = await generateKeys({
    numKeys: 1
})
console.log('keys: ', keys)

const dropSupply = await getKeyTotalSupply();
console.log('dropSupply: ', dropSupply)
```

## Funder Object

If you have the private key of an account that you'd like to use to sign transactions with, you can pass in a `funder` object to `initKeypom`. The private key can either be hardcoded or passed in through environment variables / secrets.

Using this method, you only need to pass the funder object once on initialization and can freely invoke any of the SDK methods moving forward. To update the funder object, you can call `updateFunder` and pass in different information.

```js
await initKeypom({
    network: "testnet",
    funder: {
        accountId: "benji_demo.testnet",
        secretKey: "ed25519:5yARProkcALbxaSQ66aYZMSBPWL9uPBmkoQGjV3oi2ddQDMh1teMAbz7jqNV9oVyMy7kZNREjYvWPqjcA6LW9Jb1"
    }
});

const dropSupply = await getKeyTotalSupply();
console.log('dropSupply: ', dropSupply)

const {keys} = await createDrop({
    numKeys: 1,
    depositPerUseNEAR: 1
})
console.log('keys: ', keys)
```

## Customized KeyStore & Multiple Signers

Passing in a custom `near` object when initializing Keypom has several benefits as seen below:
- If you have multiple accounts that will be signing transactions and don't want to keep calling `updateFunder`.
- You don't want to hardcode the private key in the `funder` object.
- You have a keystore containing keys that will be used to sign transactions already in scope.

In this case, you can pass in an existing `near` object and then pass in `Account` objects when calling the SDK methods.

```js
let keyStore = new UnencryptedFileSystemKeyStore(credentialsPath);  
let nearConfig = {
    networkId: NETWORK_ID,
    keyStore: keyStore,
    nodeUrl: `https://rpc.${NETWORK_ID}.near.org`,
    walletUrl: `https://wallet.${NETWORK_ID}.near.org`,
    helperUrl: `https://helper.${NETWORK_ID}.near.org`,
    explorerUrl: `https://explorer.${NETWORK_ID}.near.org`,
};  
let near = new Near(nearConfig);

await initKeypom({
    near
});

const dropSupply = await getKeyTotalSupply();
console.log('dropSupply: ', dropSupply)

const fundingAccount = new Account(near.connection, funderAccountId);
const {keys} = await createDrop({
    account: fundingAccount,
    numKeys: 1,
    depositPerUseNEAR: 1
})
console.log('keys: ', keys)
```

# Costs

It is important to note that the Keypom contracts are 100% **FEE FREE** and will remain that way for the *foreseeable future*. These contracts are a public good and are meant to inspire change in the NEAR ecosystem.

With that being said, there are several mandatory costs that must be taken into account when using Keypom. These costs are broken down into two categories: per key and per drop.

> **NOTE:** Creating an empty drop and then adding 100 keys in separate calls will incur the same cost as creating a drop with 100 keys in the same call.

## Per Drop

When creating an empty drop, there is only one cost to keep in mind regardless of the drop type:
- Storage cost (**~0.006 $NEAR** for simple drops)

## Per Key
Whenever keys are added to a drop (either when the drop is first created or at a later date), the costs are outlined below.

### Key Costs for Simple Drop

- $NEAR sent whenever the key is used (can be 0).
- Access key allowance (**~0.0187 $NEAR per use**).
- Storage for creating access key (**0.001 $NEAR**).
- Storage cost (**~0.006 $NEAR** for simple drops)

### Additional Costs for NFT Drops

Since keys aren't registered for use until **after** the contract has received the NFT, we don't know how much storage the token IDs will use on the contract. To combat this, the Keypom contract will automatically measure the storage used up for storing each token ID in the `nft_on_transfer` function and that $NEAR will be taken from the funder's balance.

### Additional Costs for FT Drops

Since accounts claiming FTs may or may not be registered on the Fungible Token contract, Keypom will automatically try to register **all** accounts. This means that the drop creators must front the cost of registering users depending on the `storage_balance_bounds` returned from the FT contract. This applies to every use for every key.

In addition, Keypom must be registered on the FT contract. If you create a FT drop and are the first person to ever do so for a specific FT contract on Keypom, Keypom will be automatically registered when the drop is created. This is a one time cost and once it is done, no other account will need to register Keypom for that specific FT contract.

### Additional Costs for FC Drops

Drop creators have a ton of customization available to them when creation Function Call drops. A cost that they might incur is the attached deposit being sent alongside the function call. Keypom will charge creators for all the attached deposits they specify.

> **NOTE:** The storage costs are dynamically calculated and will vary depending on the information you store on-chain.

# Contributing

First off, thanks for taking the time to contribute! Contributions are what makes the open-source community such an amazing place to learn, inspire, and create. Any contributions you make will benefit everybody else and are **greatly appreciated**.

Please try to create bug reports that are:

- _Reproducible._ Include steps to reproduce the problem.
- _Specific._ Include as much detail as possible: which version, what environment, etc.
- _Unique._ Do not duplicate existing opened issues.
- _Scoped to a Single Bug._ One bug per report.

You can use [markdownlint-cli](https://github.com/igorshubovych/markdownlint-cli) to check for common markdown style inconsistency.

# License

This project is licensed under the **GPL License**.

'''
'''--- docs/keypom-sdk/Selector/_category_.yml ---
label: "Selector TypeDocs"
position: 0
collapsed: false
'''
'''--- docs/keypom-sdk/Selector/classes/KeypomWallet.md ---
---
id: "KeypomWallet"
title: "Class: KeypomWallet"
sidebar_label: "KeypomWallet"
sidebar_position: 0
custom_edit_url: null
---

## Implements

- `InstantLinkWalletBehaviour`

## Constructors

### constructor

**new KeypomWallet**(`«destructured»`)

#### Parameters

| Name | Type |
| :------ | :------ |
| `«destructured»` | `Object` |
| › `instantSignInSpecs?` | `InstantSignInSpecs` |
| › `networkId` | `string` |
| › `signInContractId` | `string` |
| › `trialAccountSpecs?` | `TrialSignInSpecs` |

#### Defined in

[core/wallet.ts:33](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L33)

## Properties

### accountId

 `Optional` **accountId**: `string`

#### Defined in

[core/wallet.ts:19](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L19)

___

### instantSignInSpecs

 `Optional` **instantSignInSpecs**: `InternalInstantSignInSpecs`

#### Defined in

[core/wallet.ts:29](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L29)

___

### keyStore

 **keyStore**: `BrowserLocalStorageKeyStore`

#### Defined in

[core/wallet.ts:26](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L26)

___

### modal

 `Optional` **modal**: `KeypomTrialModal`

#### Defined in

[core/wallet.ts:31](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L31)

___

### moduleId

 `Optional` **moduleId**: `string`

#### Defined in

[core/wallet.ts:21](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L21)

___

### near

 **near**: `Near`

#### Defined in

[core/wallet.ts:25](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L25)

___

### secretKey

 `Optional` **secretKey**: `string`

#### Defined in

[core/wallet.ts:20](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L20)

___

### signInContractId

 **signInContractId**: `string`

#### Defined in

[core/wallet.ts:23](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L23)

___

### trialAccountSpecs

 `Optional` **trialAccountSpecs**: `InternalTrialSignInSpecs`

#### Defined in

[core/wallet.ts:28](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L28)

## Methods

### assertSignedIn

`Private` **assertSignedIn**(): `void`

#### Returns

`void`

#### Defined in

[core/wallet.ts:337](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L337)

___

### checkValidTrialInfo

**checkValidTrialInfo**(): `boolean`

#### Returns

`boolean`

#### Defined in

[core/wallet.ts:287](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L287)

___

### getAccountId

**getAccountId**(): `string`

#### Returns

`string`

#### Defined in

[core/wallet.ts:63](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L63)

___

### getAccounts

**getAccounts**(): `Promise`<`Account`[]\>

#### Returns

`Promise`<`Account`[]\>

#### Implementation of

InstantLinkWalletBehaviour.getAccounts

#### Defined in

[core/wallet.ts:306](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L306)

___

### getAvailableBalance

**getAvailableBalance**(`id?`): `Promise`<`BN`\>

#### Parameters

| Name | Type |
| :------ | :------ |
| `id?` | `string` |

#### Returns

`Promise`<`BN`\>

#### Defined in

[core/wallet.ts:301](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L301)

___

### getContractId

**getContractId**(): `string`

#### Returns

`string`

#### Implementation of

InstantLinkWalletBehaviour.getContractId

#### Defined in

[core/wallet.ts:59](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L59)

___

### internalSignIn

`Private` **internalSignIn**(`accountId`, `secretKey`, `moduleId`): `Promise`<`Account`[]\>

#### Parameters

| Name | Type |
| :------ | :------ |
| `accountId` | `any` |
| `secretKey` | `any` |
| `moduleId` | `any` |

#### Returns

`Promise`<`Account`[]\>

#### Defined in

[core/wallet.ts:319](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L319)

___

### isSignedIn

**isSignedIn**(): `Promise`<`boolean`\>

#### Returns

`Promise`<`boolean`\>

#### Defined in

[core/wallet.ts:68](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L68)

___

### setSpecsFromKeypomParams

`Private` **setSpecsFromKeypomParams**(`«destructured»`): `void`

#### Parameters

| Name | Type |
| :------ | :------ |
| `«destructured»` | `Object` |
| › `instantSignInSpecs?` | `InstantSignInSpecs` |
| › `shouldSetupModal` | `boolean` |
| › `trialAccountSpecs?` | `TrialSignInSpecs` |

#### Returns

`void`

#### Defined in

[core/wallet.ts:343](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L343)

___

### showModal

**showModal**(`modalType?`): `void`

#### Parameters

| Name | Type | Default value |
| :------ | :------ | :------ |
| `modalType` | `Object` | `undefined` |
| `modalType.id` | `string` | `MODAL_TYPE_IDS.TRIAL_OVER` |

#### Returns

`void`

#### Defined in

[core/wallet.ts:282](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L282)

___

### signAndSendTransaction

**signAndSendTransaction**(`params`): `Promise`<`FinalExecutionOutcome`\>

#### Parameters

| Name | Type |
| :------ | :------ |
| `params` | `any` |

#### Returns

`Promise`<`FinalExecutionOutcome`\>

#### Implementation of

InstantLinkWalletBehaviour.signAndSendTransaction

#### Defined in

[core/wallet.ts:201](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L201)

___

### signAndSendTransactions

**signAndSendTransactions**(`params`): `Promise`<`FinalExecutionOutcome`[]\>

#### Parameters

| Name | Type |
| :------ | :------ |
| `params` | `Object` |
| `params.transactions` | `Transaction`[] |

#### Returns

`Promise`<`FinalExecutionOutcome`[]\>

#### Implementation of

InstantLinkWalletBehaviour.signAndSendTransactions

#### Defined in

[core/wallet.ts:225](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L225)

___

### signIn

**signIn**(): `Promise`<`Account`[]\>

#### Returns

`Promise`<`Account`[]\>

#### Implementation of

InstantLinkWalletBehaviour.signIn

#### Defined in

[core/wallet.ts:147](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L147)

___

### signInInstantAccount

**signInInstantAccount**(`accountId`, `secretKey`, `moduleId`): `Promise`<`Account`[]\>

#### Parameters

| Name | Type |
| :------ | :------ |
| `accountId` | `any` |
| `secretKey` | `any` |
| `moduleId` | `any` |

#### Returns

`Promise`<`Account`[]\>

#### Defined in

[core/wallet.ts:128](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L128)

___

### signInTrialAccount

**signInTrialAccount**(`accountId`, `secretKey`): `Promise`<`Account`[]\>

#### Parameters

| Name | Type |
| :------ | :------ |
| `accountId` | `any` |
| `secretKey` | `any` |

#### Returns

`Promise`<`Account`[]\>

#### Defined in

[core/wallet.ts:72](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L72)

___

### signOut

**signOut**(): `Promise`<`void`\>

#### Returns

`Promise`<`void`\>

#### Implementation of

InstantLinkWalletBehaviour.signOut

#### Defined in

[core/wallet.ts:191](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L191)

___

### switchAccount

**switchAccount**(`id`): `Promise`<`void`\>

#### Parameters

| Name | Type |
| :------ | :------ |
| `id` | `string` |

#### Returns

`Promise`<`void`\>

#### Defined in

[core/wallet.ts:315](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L315)

___

### verifyOwner

**verifyOwner**(): `Promise`<`void`\>

#### Returns

`Promise`<`void`\>

#### Implementation of

InstantLinkWalletBehaviour.verifyOwner

#### Defined in

[core/wallet.ts:295](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/wallet.ts#L295)

'''
'''--- docs/keypom-sdk/Selector/classes/_category_.yml ---
label: "Classes"
position: 3
'''
'''--- docs/keypom-sdk/Selector/interfaces/BasicTransaction.md ---
---
id: "BasicTransaction"
title: "Interface: BasicTransaction"
sidebar_label: "BasicTransaction"
sidebar_position: 0
custom_edit_url: null
---

## Properties

### actions

 **actions**: `Action`[]

#### Defined in

[lib/types/general.ts:108](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L108)

___

### receiverId

 **receiverId**: `string`

#### Defined in

[lib/types/general.ts:106](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L106)

___

### signerId

 **signerId**: `string`

#### Defined in

[lib/types/general.ts:107](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L107)

'''
'''--- docs/keypom-sdk/Selector/interfaces/ContractSourceMetadata.md ---
---
id: "ContractSourceMetadata"
title: "Interface: ContractSourceMetadata"
sidebar_label: "ContractSourceMetadata"
sidebar_position: 0
custom_edit_url: null
---

Information returned from `getContractSourceMetadata` about the deployed Keypom contract. This is part of [NEP-330](https://nomicon.io/Standards/SourceMetadata) and
can allow you to view exactly what code is deployed to the contract.

## Properties

### link

 **link**: `string`

Link to the specific commit and code on GitHub that is deployed to the Keypom account

#### Defined in

[lib/types/general.ts:102](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L102)

___

### version

 **version**: `string`

Versioning used by the Keypom developers to indicate which version of the contract is deployed.

#### Defined in

[lib/types/general.ts:100](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L100)

'''
'''--- docs/keypom-sdk/Selector/interfaces/CreateDropProtocolArgs.md ---
---
id: "CreateDropProtocolArgs"
title: "Interface: CreateDropProtocolArgs"
sidebar_label: "CreateDropProtocolArgs"
sidebar_position: 0
custom_edit_url: null
---

## Properties

### config

 `Optional` **config**: [`ProtocolReturnedDropConfig`](ProtocolReturnedDropConfig.md)

#### Defined in

[lib/types/params.ts:54](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/params.ts#L54)

___

### deposit\_per\_use

 **deposit\_per\_use**: `string`

#### Defined in

[lib/types/params.ts:51](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/params.ts#L51)

___

### drop\_id

 `Optional` **drop\_id**: `string`

#### Defined in

[lib/types/params.ts:53](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/params.ts#L53)

___

### fc

 `Optional` **fc**: [`ProtocolReturnedFCData`](ProtocolReturnedFCData.md)

#### Defined in

[lib/types/params.ts:60](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/params.ts#L60)

___

### ft

 `Optional` **ft**: [`ProtocolReturnedFTData`](ProtocolReturnedFTData.md)

#### Defined in

[lib/types/params.ts:58](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/params.ts#L58)

___

### metadata

 `Optional` **metadata**: `string`

#### Defined in

[lib/types/params.ts:55](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/params.ts#L55)

___

### nft

 `Optional` **nft**: [`ProtocolReturnedNFTData`](ProtocolReturnedNFTData.md)

#### Defined in

[lib/types/params.ts:59](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/params.ts#L59)

___

### passwords\_per\_use

 `Optional` **passwords\_per\_use**: [`PasswordPerUse`](PasswordPerUse.md)[][]

#### Defined in

[lib/types/params.ts:61](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/params.ts#L61)

___

### public\_keys

 `Optional` **public\_keys**: `string`[]

#### Defined in

[lib/types/params.ts:50](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/params.ts#L50)

___

### required\_gas

 `Optional` **required\_gas**: `string`

#### Defined in

[lib/types/params.ts:56](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/params.ts#L56)

___

### simple

 `Optional` **simple**: [`ProtocolReturnedSimpleData`](ProtocolReturnedSimpleData.md)

#### Defined in

[lib/types/params.ts:57](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/params.ts#L57)

'''
'''--- docs/keypom-sdk/Selector/interfaces/CreateOrAddReturn.md ---
---
id: "CreateOrAddReturn"
title: "Interface: CreateOrAddReturn"
sidebar_label: "CreateOrAddReturn"
sidebar_position: 0
custom_edit_url: null
---

Information returned when creating a drop or adding keys via `createDrop` and `addKeys` respectively.

## Properties

### dropId

 **dropId**: `string`

The drop ID for the drop that is being interacted with.

#### Defined in

[lib/types/params.ts:34](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/params.ts#L34)

___

### keys

 `Optional` **keys**: [`GeneratedKeyPairs`](GeneratedKeyPairs.md)

Any keys that were automatically generated.

#### Defined in

[lib/types/params.ts:32](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/params.ts#L32)

___

### requiredDeposit

 `Optional` **requiredDeposit**: `string`

The required deposit that should be attached to the transaction.

#### Defined in

[lib/types/params.ts:30](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/params.ts#L30)

___

### responses

 `Optional` **responses**: `any`

The responses to any transactions that were signed and sent to the network.

#### Defined in

[lib/types/params.ts:26](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/params.ts#L26)

___

### transactions

 `Optional` **transactions**: `Transaction`[]

Information about the transactions if `returnTransactions` is specified in the arguments. This will result in the information being returned instead of signed and sent.

#### Defined in

[lib/types/params.ts:28](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/params.ts#L28)

'''
'''--- docs/keypom-sdk/Selector/interfaces/Drop.md ---
---
id: "Drop"
title: "Interface: Drop"
sidebar_label: "Drop"
sidebar_position: 0
custom_edit_url: null
---

Information related to a specific drop.

## Properties

### config

 `Optional` **config**: [`DropConfig`](DropConfig.md)

All drops regardless of their type can have a suite of configurations such as how many uses each key has or how often a key can be used.

#### Defined in

[lib/types/drops.ts:50](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L50)

___

### depositPerUse

 **depositPerUse**: `string`

How much $yoctoNEAR will be transferred anytime a key is used that is part of this drop.

#### Defined in

[lib/types/drops.ts:40](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L40)

___

### dropId

 **dropId**: `string`

Drop ID for this specific drop.

#### Defined in

[lib/types/drops.ts:36](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L36)

___

### fc

 `Optional` **fc**: [`FCData`](FCData.md)

For Function-Call drops, important information needs to be stored such as which methods, the attached deposit, args etc.

#### Defined in

[lib/types/drops.ts:48](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L48)

___

### ft

 `Optional` **ft**: [`FTData`](FTData.md)

For Fungible Token drops, important information such as the amount of tokens to transfer, or contract need to be stored.

#### Defined in

[lib/types/drops.ts:46](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L46)

___

### metadata

 `Optional` **metadata**: `string`

Any extra information about the drop can be stored as metadata. This is up to the drop creator and can be stringified JSON, or any other string.

#### Defined in

[lib/types/drops.ts:52](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L52)

___

### nextKeyId

 **nextKeyId**: `number`

What is the next unique ID that will be given to the next access key added to this drop.

#### Defined in

[lib/types/drops.ts:58](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L58)

___

### nft

 `Optional` **nft**: [`NFTData`](NFTData.md)

For NFT drops, important information such as the token IDs, or contract need to be stored.

#### Defined in

[lib/types/drops.ts:44](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L44)

___

### ownerId

 **ownerId**: `string`

Which account created this drop.

#### Defined in

[lib/types/drops.ts:38](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L38)

___

### registeredUses

 **registeredUses**: `number`

How many key uses are registered for this drop? This is only applicable to simple drops with lazy registrations, FT drops, and NFT drops.

#### Defined in

[lib/types/drops.ts:54](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L54)

___

### requiredGas

 **requiredGas**: `string`

In order to use an access key that's part of this drop, how much Gas *needs* to be attached to the call?

#### Defined in

[lib/types/drops.ts:56](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L56)

___

### simple

 `Optional` **simple**: [`SimpleData`](SimpleData.md)

For simple drops, there are specific, optional configurations.

#### Defined in

[lib/types/drops.ts:42](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L42)

'''
'''--- docs/keypom-sdk/Selector/interfaces/DropConfig.md ---
---
id: "DropConfig"
title: "Interface: DropConfig"
sidebar_label: "DropConfig"
sidebar_position: 0
custom_edit_url: null
---

Configurable options for any drop regardless of type.

## Properties

### dropRoot

 `Optional` **dropRoot**: `string`

Override the global root account that all created sub-accounts will have (currently `near` or `testnet`). This allows users to drops that have a custom root.
For example, Fayyr could specify a root of `fayyr.near` By which all sub-accounts will then be `ACCOUNT.fayyr.near`.
It's important to note that this root account *MUST* have a smart contract deployed that has a method `create_account`.

#### Defined in

[lib/types/drops.ts:81](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L81)

___

### sale

 `Optional` **sale**: [`PublicSaleConfig`](PublicSaleConfig.md)

Any information related to primary market sales for access keys added to this drop.

#### Defined in

[lib/types/drops.ts:75](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L75)

___

### time

 `Optional` **time**: [`TimeConfig`](TimeConfig.md)

Any information related to time-based configurations such as a starting date for keys etc.

#### Defined in

[lib/types/drops.ts:69](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L69)

___

### usage

 `Optional` **usage**: [`UsageConfig`](UsageConfig.md)

Any information related to how access keys are used such as which methods they can call or whether an empty drop should be automatically deleted etc.

#### Defined in

[lib/types/drops.ts:72](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L72)

___

### usesPerKey

 `Optional` **usesPerKey**: `number`

How many uses can each key have before it's deleted. If this isn't specified, it defaults to 1 use per key.

#### Defined in

[lib/types/drops.ts:66](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L66)

'''
'''--- docs/keypom-sdk/Selector/interfaces/EnvVars.md ---
---
id: "EnvVars"
title: "Interface: EnvVars"
sidebar_label: "EnvVars"
sidebar_position: 0
custom_edit_url: null
---

Important context that is used throughout the SDK. This is generated when `initKeypom` is called and can be retrieved by calling `useKeypom`.
All parameters will start off as undefined until the Keypom SDK is initialized.

## Properties

### attachedGas

 `Optional` **attachedGas**: `string`

The amount of Gas that will be attached to the `claim` and `create_account_and_claim` functions for claiming linkdrops (100 TGas).

#### Defined in

[lib/types/general.ts:77](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L77)

___

### connection

 `Optional` **connection**: `Connection`

The connection instance that is part of the NEAR object

#### Defined in

[lib/types/general.ts:59](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L59)

___

### contractAccount

 `Optional` **contractAccount**: `Account`

The NEAR Account object for the Keypom contract being used. This lets you know the account ID for the contract and can be used to sign transactions for claiming linkdrops.

#### Defined in

[lib/types/general.ts:69](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L69)

___

### contractId

 `Optional` **contractId**: `string`

The account ID where the Keypom contract is deployed to.

#### Defined in

[lib/types/general.ts:79](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L79)

___

### error

 `Optional` **error**: `string`

#### Defined in

[lib/types/general.ts:83](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L83)

___

### execute

 `Optional` **execute**: `any`

#### Defined in

[lib/types/general.ts:87](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L87)

___

### fundingAccount

 `Optional` **fundingAccount**: `Account`

The NEAR Account object for the Funder

#### Defined in

[lib/types/general.ts:65](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L65)

___

### fundingAccountDetails

 `Optional` **fundingAccountDetails**: [`Funder`](Funder.md)

The details for the funder such as any `rootEntropy` or their `secretKey` etc.

#### Defined in

[lib/types/general.ts:67](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L67)

___

### gas

 `Optional` **gas**: `string`

The default amount of Gas that will be attached to transactions (200 TGas).

#### Defined in

[lib/types/general.ts:73](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L73)

___

### gas300

 `Optional` **gas300**: `string`

The max amount of Gas that will be attached to transactions (300 TGas).

#### Defined in

[lib/types/general.ts:75](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L75)

___

### getAccount

 `Optional` **getAccount**: `any`

#### Defined in

[lib/types/general.ts:85](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L85)

___

### keyStore

 `Optional` **keyStore**: `KeyStore`

Which type of KeyStore is used when locating keys and signing transactions throughout the SDK (In Memory, Unencrypted FileStore etc.)

#### Defined in

[lib/types/general.ts:61](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L61)

___

### near

 `Optional` **near**: `Near`

The specific NEAR object that contains important information such as the KeyStore and connection. This is used to interact with the chain and can either be manually passed in or will be automatically created during `initKeypom`

#### Defined in

[lib/types/general.ts:57](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L57)

___

### networkId

 `Optional` **networkId**: `string`

What network is the SDK using (`testnet` or `mainnet`)

#### Defined in

[lib/types/general.ts:63](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L63)

___

### receiverId

 `Optional` **receiverId**: `string`

#### Defined in

[lib/types/general.ts:81](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L81)

___

### supportedKeypomContracts

 `Optional` **supportedKeypomContracts**: `Object`

Object containing the supported Keypom contracts for both mainnet and testnet

#### Type declaration

| Name | Type |
| :------ | :------ |
| `mainnet` | {} |
| `testnet` | {} |

#### Defined in

[lib/types/general.ts:89](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L89)

___

### viewAccount

 `Optional` **viewAccount**: `any`

#### Defined in

[lib/types/general.ts:71](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L71)

___

### viewCall

 `Optional` **viewCall**: `any`

Function that allows you to invoke a view method. This takes in a `receiverId`, `methodName`, and `args`.

#### Defined in

[lib/types/general.ts:91](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L91)

'''
'''--- docs/keypom-sdk/Selector/interfaces/FCData.md ---
---
id: "FCData"
title: "Interface: FCData"
sidebar_label: "FCData"
sidebar_position: 0
custom_edit_url: null
---

Information pertaining to all Function-Call drops. This should be passed in if the drop will be a Function-Call drop.

## Properties

### methods

 **methods**: [`Method`](Method.md)[][]

The top level array indicates a different set of methods that can be called for every key use. It is possible that for a given key use, no methods are called thus acting as a "free" key use whereby the use is reflected on-chain but no assets are transferred.
If a given key use does not have an undefined set of methods, when it is used, all the methods in the set will be called.

#### Defined in

[lib/types/fc.ts:73](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/fc.ts#L73)

'''
'''--- docs/keypom-sdk/Selector/interfaces/FTData.md ---
---
id: "FTData"
title: "Interface: FTData"
sidebar_label: "FTData"
sidebar_position: 0
custom_edit_url: null
---

Information pertaining to all Fungible-Token drops. This should be passed in if the drop will be used to transfer any fungible tokens.

## Properties

### absoluteAmount

 `Optional` **absoluteAmount**: `string`

Amount of tokens to transfer but considering the decimal amount.
Example: transferring one wNEAR should be passed in as "1000000000000000000000000" and NOT "1"

#### Defined in

[lib/types/ft.ts:22](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/ft.ts#L22)

___

### amount

 `Optional` **amount**: `string`

Human readable format for the amount of tokens to transfer every time the FT key is used.
Example: transferring one wNEAR should be passed in as "1" and NOT "1000000000000000000000000"

#### Defined in

[lib/types/ft.ts:17](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/ft.ts#L17)

___

### contractId

 **contractId**: `string`

Which contract do the FTs belong to?

#### Defined in

[lib/types/ft.ts:8](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/ft.ts#L8)

___

### senderId

 `Optional` **senderId**: `string`

By default, anyone can fund your drop with FTs. This field allows you to set a specific account ID that will be locked into sending the FTs.

#### Defined in

[lib/types/ft.ts:12](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/ft.ts#L12)

'''
'''--- docs/keypom-sdk/Selector/interfaces/Funder.md ---
---
id: "Funder"
title: "Interface: Funder"
sidebar_label: "Funder"
sidebar_position: 0
custom_edit_url: null
---

Outlines how the structure of the *funder* object should be passed into `initKeypom` or `updateFunder`. This contains important information such as the
secret key, account ID and any root entropy associated with the account.

**`Throws`**

if neither `secretKey` or `seedPhrase` are provided. One of these need to be passed in.

## Properties

### accountId

 **accountId**: `string`

The account ID of the funder that will be used to sign transactions.

#### Defined in

[lib/types/general.ts:35](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L35)

___

### fundingKeyPair

 `Optional` **fundingKeyPair**: `KeyPair`

#### Defined in

[lib/types/general.ts:48](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L48)

___

### rootEntropy

 `Optional` **rootEntropy**: `string`

When interacting with the SDK, there are several places where KeyPairs can be generated automatically rather than you having to pass them in.
For example, during `createDrop` and `addKeys`, if `publicKeys` isn't passed in, the SDK will generate `numKeys` number of keys automatically.
These generated keys can either be completely random or deterministically generated based off some entropy. If `rootEntropy` is provided, all the
keys that are auto-generated will be based off this entropy.

#### Defined in

[lib/types/general.ts:46](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L46)

___

### secretKey

 `Optional` **secretKey**: `string`

A valid private key associated with the funder's account. This can be function-call or full access (depending on what limitations and security measures are in place).

#### Defined in

[lib/types/general.ts:37](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L37)

___

### seedPhrase

 `Optional` **seedPhrase**: `string`

12 word seedphrase that can be used to derive the `secretKey`. If this is present, it will override the passed in `secretKey`.

#### Defined in

[lib/types/general.ts:39](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L39)

'''
'''--- docs/keypom-sdk/Selector/interfaces/FungibleTokenMetadata.md ---
---
id: "FungibleTokenMetadata"
title: "Interface: FungibleTokenMetadata"
sidebar_label: "FungibleTokenMetadata"
sidebar_position: 0
custom_edit_url: null
---

General structure of Fungible Token Metadata as per official NEP-148 standard (https://github.com/near/NEPs/blob/master/neps/nep-0148.md).

## Properties

### decimals

 **decimals**: `number`

Used in frontends to show the proper significant digits of a token. This concept is explained well in this OpenZeppelin post (https://docs.openzeppelin.com/contracts/3.x/erc20#a-note-on-decimals).

#### Defined in

[lib/types/ft.ts:36](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/ft.ts#L36)

___

### icon

 `Optional` **icon**: `string`

A small image associated with this token. Must be a data URL, to help consumers display it quickly while protecting user data.
Recommendation: use optimized SVG, which can result in high-resolution images with only 100s of bytes of storage cost.
(Note that these storage costs are incurred to the token owner/deployer, but that querying these icons is a very cheap & cacheable read operation for all consumers of the contract and the RPC nodes that serve the data.)
Recommendation: create icons that will work well with both light-mode and dark-mode websites by either using middle-tone color schemes, or by embedding media queries in the SVG.

#### Defined in

[lib/types/ft.ts:43](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/ft.ts#L43)

___

### name

 **name**: `string`

The human-readable name of the token.

#### Defined in

[lib/types/ft.ts:32](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/ft.ts#L32)

___

### reference

 `Optional` **reference**: `string`

A link to a valid JSON file containing various keys offering supplementary details on the token. Example: /ipfs/QmdmQXB2mzChmMeKY47C43LxUdg1NDJ5MWcKMKxDu7RgQm, https://example.com/token.json, etc. If the information given in this document conflicts with the on-chain attributes, the values in reference shall be considered the source of truth.

#### Defined in

[lib/types/ft.ts:45](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/ft.ts#L45)

___

### reference\_hash

 `Optional` **reference\_hash**: `string`

The base64-encoded sha256 hash of the JSON file contained in the reference field. This is to guard against off-chain tampering.

#### Defined in

[lib/types/ft.ts:47](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/ft.ts#L47)

___

### spec

 **spec**: `string`

A string. Should be ft-1.0.0 to indicate that a Fungible Token contract adheres to the current versions of this Metadata and the Fungible Token Core specs. This will allow consumers of the Fungible Token to know if they support the features of a given contract.

#### Defined in

[lib/types/ft.ts:30](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/ft.ts#L30)

___

### symbol

 **symbol**: `string`

The abbreviation, like wETH or AMPL.

#### Defined in

[lib/types/ft.ts:34](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/ft.ts#L34)

'''
'''--- docs/keypom-sdk/Selector/interfaces/GeneratedKeyPairs.md ---
---
id: "GeneratedKeyPairs"
title: "Interface: GeneratedKeyPairs"
sidebar_label: "GeneratedKeyPairs"
sidebar_position: 0
custom_edit_url: null
---

For each generated KeyPair (either through `createDrop`, `addKeys` or `generateKeys`), the public and private keys are returned.
In addition, the actual KeyPair objects are returned as well.

## Properties

### keyPairs

 **keyPairs**: `KeyPair`[]

Actual KeyPair objects that can be used to sign messages, verify signatures, and get the public and private keys

#### Defined in

[lib/types/general.ts:20](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L20)

___

### publicKeys

 **publicKeys**: `string`[]

Set of public keys that were generated

#### Defined in

[lib/types/general.ts:22](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L22)

___

### secretKeys

 **secretKeys**: `string`[]

Set of private keys that were generated

#### Defined in

[lib/types/general.ts:24](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/general.ts#L24)

'''
'''--- docs/keypom-sdk/Selector/interfaces/KeyInfo.md ---
---
id: "KeyInfo"
title: "Interface: KeyInfo"
sidebar_label: "KeyInfo"
sidebar_position: 0
custom_edit_url: null
---

Important information returned in many view calls regarding a specific access key.

## Properties

### allowance

 **allowance**: `number`

How much allowance does the key have left (measured in $yoctoNEAR). When the key is deleted, this is refunded to the funder's balance.

#### Defined in

[lib/types/drops.ts:25](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L25)

___

### curKeyUse

 **curKeyUse**: `number`

Which use is the key currently on? For single-use keys, this is always 1.

#### Defined in

[lib/types/drops.ts:16](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L16)

___

### dropId

 **dropId**: `string`

Drop ID for the specific drop that the key belongs to.

#### Defined in

[lib/types/drops.ts:11](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L11)

___

### keyId

 **keyId**: `number`

The unique ID associated to this key. IDs are *not* unique across drops but they are unique for any key in the drop.

#### Defined in

[lib/types/drops.ts:28](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L28)

___

### lastUsed

 **lastUsed**: `number`

At what timestamp was the key last used? Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/drops.ts:22](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L22)

___

### publicKey

 **publicKey**: `string`

Public key for this access key.

#### Defined in

[lib/types/drops.ts:13](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L13)

___

### remainingUses

 **remainingUses**: `number`

How many uses this key has left before it's deleted.

#### Defined in

[lib/types/drops.ts:19](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L19)

'''
'''--- docs/keypom-sdk/Selector/interfaces/Method.md ---
---
id: "Method"
title: "Interface: Method"
sidebar_label: "Method"
sidebar_position: 0
custom_edit_url: null
---

Outlines the information needed for any given method as part of a Function-Call drop.
Each individual key use can have an array of Methods that can be called.

## Properties

### accountIdField

 `Optional` **accountIdField**: `string`

Specifies what field Keypom should auto-inject the account that claimed the drop's ID into when calling the function.
As an example, if the methodName was `nft_mint` and it expected a field `receiver_id` to be passed in, indicating who should receive the token, then the `accountIdField` would be `receiver_id`.
To insert into nested objects, use periods to separate. For example, to insert into args.metadata.field, you would specify "metadata.field"

#### Defined in

[lib/types/fc.ts:34](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/fc.ts#L34)

___

### args

 **args**: `string`

What arguments should be passed to the method. This should be in stringified JSON.

#### Defined in

[lib/types/fc.ts:19](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/fc.ts#L19)

___

### attachedDeposit

 **attachedDeposit**: `string`

How much yoctoNEAR should be attached to the call.

#### Defined in

[lib/types/fc.ts:23](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/fc.ts#L23)

___

### attachedGas

 `Optional` **attachedGas**: `string`

How much gas to attach to this method call. If none, all the gas is split between the parallel method calls in a given claim.
If this is specified, the key can ONLY be used to call `claim` and no `deposit_per_use` can be specified. This leads the key to act like a method calling proxy instead of a linkdrop.

#### Defined in

[lib/types/fc.ts:28](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/fc.ts#L28)

___

### dropIdField

 `Optional` **dropIdField**: `string`

Specifies what field Keypom should auto-inject the drops ID into when calling the function.
As an example, if an NFT contract expected the Keypom drop ID to be passed in as the field `keypom_drop_id` in order to gate access to who can mint NFTs, then the `dropIdField` would be `keypom_drop_id`.
To insert into nested objects, use periods to separate. For example, to insert into args.metadata.field, you would specify "metadata.field"

#### Defined in

[lib/types/fc.ts:40](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/fc.ts#L40)

___

### funderIdField

 `Optional` **funderIdField**: `string`

Specifies what field Keypom should auto-inject the drop funder's account ID into when calling the function.
As an example, if an NFT contract wanted to gate only users that had a key coming from a specific funder's drops, it could expect a field called `keypom_funder_id` and the `funderIdField` would be `keypom_funder_id`.
To insert into nested objects, use periods to separate. For example, to insert into args.metadata.field, you would specify "metadata.field"

#### Defined in

[lib/types/fc.ts:52](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/fc.ts#L52)

___

### keyIdField

 `Optional` **keyIdField**: `string`

Specifies what field Keypom should auto-inject the key's ID into when calling the function.
As an example, if an NFT contract wanted to gate only users with an odd key ID to be able to mint an NFT and their parameter was called `keypom_key_id`, then the `keyIdField` would be `keypom_key_id`.
To insert into nested objects, use periods to separate. For example, to insert into args.metadata.field, you would specify "metadata.field"

#### Defined in

[lib/types/fc.ts:46](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/fc.ts#L46)

___

### methodName

 **methodName**: `string`

The method that should be invoked on the `receiverId`'s contract.

#### Defined in

[lib/types/fc.ts:15](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/fc.ts#L15)

___

### receiverId

 **receiverId**: `string`

The account ID that the contract is deployed to that the method will be called on.

#### Defined in

[lib/types/fc.ts:11](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/fc.ts#L11)

___

### receiverToClaimer

 `Optional` **receiverToClaimer**: `boolean`

If set to true, the claiming account ID will be the receiver ID of the method call.
This receiver must be a valid account and non-malicious (cannot be set to the keypom contract)

#### Defined in

[lib/types/fc.ts:57](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/fc.ts#L57)

___

### userArgsRule

 `Optional` **userArgsRule**: ``"AllUser"`` \| ``"FunderPreferred"`` \| ``"UserPreferred"``

What permissions does the user have when providing custom arguments to the function call?
By default, the user cannot provide any custom arguments

#### Defined in

[lib/types/fc.ts:62](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/fc.ts#L62)

'''
'''--- docs/keypom-sdk/Selector/interfaces/NFTData.md ---
---
id: "NFTData"
title: "Interface: NFTData"
sidebar_label: "NFTData"
sidebar_position: 0
custom_edit_url: null
---

General structure of a Non-Fungible Token drop. This should be passed into `createDrop` if you wish to have an NFT drop.

## Properties

### contractId

 **contractId**: `string`

The account ID that the NFT contract is deployed to. This contract is where all the NFTs for the specific drop must come from.

#### Defined in

[lib/types/nft.ts:6](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L6)

___

### senderId

 `Optional` **senderId**: `string`

By default, anyone can fund your drop with NFTs. This field allows you to set a specific account ID that will be locked into sending the NFTs.

#### Defined in

[lib/types/nft.ts:8](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L8)

___

### tokenIds

 `Optional` **tokenIds**: `string`[]

If there are any token IDs that you wish to be automatically sent to the Keypom contract in order to register keys as part of `createDrop`, specify them here.
A maximum of 2 token IDs can be sent as part of the transaction. If you wish to register more keys by sending more NFTs, you must do this in a separate call by invoking
the `nftTransferCall` method separately.

#### Defined in

[lib/types/nft.ts:14](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L14)

'''
'''--- docs/keypom-sdk/Selector/interfaces/NonFungibleTokenMetadata.md ---
---
id: "NonFungibleTokenMetadata"
title: "Interface: NonFungibleTokenMetadata"
sidebar_label: "NonFungibleTokenMetadata"
sidebar_position: 0
custom_edit_url: null
---

General structure of Non-Fungible Token Metadata (in camelCase) as per official NEP-177 standard (https://github.com/near/NEPs/blob/master/neps/nep-0177.md).

## Properties

### copies

 `Optional` **copies**: `number`

number of copies of this set of metadata in existence when token was minted.

#### Defined in

[lib/types/nft.ts:76](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L76)

___

### description

 `Optional` **description**: `string`

free-form description

#### Defined in

[lib/types/nft.ts:70](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L70)

___

### expiresAt

 `Optional` **expiresAt**: `number`

When token expires, Unix epoch in milliseconds

#### Defined in

[lib/types/nft.ts:80](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L80)

___

### extra

 `Optional` **extra**: `string`

anything extra the NFT wants to store on-chain. Can be stringified JSON.

#### Defined in

[lib/types/nft.ts:86](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L86)

___

### issuedAt

 `Optional` **issuedAt**: `number`

When token was issued or minted, Unix epoch in milliseconds

#### Defined in

[lib/types/nft.ts:78](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L78)

___

### media

 `Optional` **media**: `string`

URL to associated media, preferably to decentralized, content-addressed storage

#### Defined in

[lib/types/nft.ts:72](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L72)

___

### mediaHash

 `Optional` **mediaHash**: `string`

Base64-encoded sha256 hash of content referenced by the `media` field. Required if `media` is included.

#### Defined in

[lib/types/nft.ts:74](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L74)

___

### reference

 `Optional` **reference**: `string`

URL to an off-chain JSON file with more info.

#### Defined in

[lib/types/nft.ts:88](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L88)

___

### referenceHash

 `Optional` **referenceHash**: `string`

Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.

#### Defined in

[lib/types/nft.ts:90](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L90)

___

### startsAt

 `Optional` **startsAt**: `number`

When token starts being valid, Unix epoch in milliseconds

#### Defined in

[lib/types/nft.ts:82](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L82)

___

### title

 `Optional` **title**: `string`

ex. "Arch Nemesis: Mail Carrier" or "Parcel #5055"

#### Defined in

[lib/types/nft.ts:68](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L68)

___

### updatedAt

 `Optional` **updatedAt**: `number`

When token was last updated, Unix epoch in milliseconds

#### Defined in

[lib/types/nft.ts:84](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L84)

'''
'''--- docs/keypom-sdk/Selector/interfaces/PasswordPerUse.md ---
---
id: "PasswordPerUse"
title: "Interface: PasswordPerUse"
sidebar_label: "PasswordPerUse"
sidebar_position: 0
custom_edit_url: null
---

Keeps track of the password for a given key use. This should be passed in as an array for each key that has passwords.

## Properties

### key\_use

 **key\_use**: `number`

Which use does the password belong to? These uses are *NOT* zero-indexed so the first use corresponds to `1` not `0`.

#### Defined in

[lib/types/drops.ts:196](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L196)

___

### pw

 **pw**: `string`

The password for this given use

#### Defined in

[lib/types/drops.ts:194](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L194)

'''
'''--- docs/keypom-sdk/Selector/interfaces/ProtocolReturnedDrop.md ---
---
id: "ProtocolReturnedDrop"
title: "Interface: ProtocolReturnedDrop"
sidebar_label: "ProtocolReturnedDrop"
sidebar_position: 0
custom_edit_url: null
---

Drop information returned from the Protocol. This interface is exactly the same as the `Drop`, except all the fields are
snake cased instead of camel cased due to what the Protocol returns.

## Properties

### config

 `Optional` **config**: [`ProtocolReturnedDropConfig`](ProtocolReturnedDropConfig.md)

All drops regardless of their type can have a suite of configurations such as how many uses each key has or how often a key can be used.

#### Defined in

[lib/types/protocol.ts:49](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L49)

___

### deposit\_per\_use

 **deposit\_per\_use**: `string`

How much $yoctoNEAR will be transferred anytime a key is used that is part of this drop.

#### Defined in

[lib/types/protocol.ts:39](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L39)

___

### drop\_id

 **drop\_id**: `string`

Drop ID for this specific drop.

#### Defined in

[lib/types/protocol.ts:35](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L35)

___

### fc

 `Optional` **fc**: [`ProtocolReturnedFCData`](ProtocolReturnedFCData.md)

For Function-Call drops, important information needs to be stored such as which methods, the attached deposit, args etc.

#### Defined in

[lib/types/protocol.ts:47](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L47)

___

### ft

 `Optional` **ft**: [`ProtocolReturnedFTData`](ProtocolReturnedFTData.md)

For Fungible Token drops, important information such as the amount of tokens to transfer, or contract need to be stored.

#### Defined in

[lib/types/protocol.ts:45](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L45)

___

### keys

 `Optional` **keys**: [`ProtocolReturnedKeyInfo`](ProtocolReturnedKeyInfo.md)[]

If calling `getDrops` or `getDropInformation` and `withKeys` is passed in as true, an extra view call will be done to get a set of keys that are currently on the drop.

#### Defined in

[lib/types/protocol.ts:59](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L59)

___

### metadata

 `Optional` **metadata**: `string`

Any extra information about the drop can be stored as metadata. This is up to the drop creator and can be stringified JSON, or any other string.

#### Defined in

[lib/types/protocol.ts:51](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L51)

___

### next\_key\_id

 **next\_key\_id**: `number`

What is the next unique ID that will be given to the next access key added to this drop.

#### Defined in

[lib/types/protocol.ts:57](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L57)

___

### nft

 `Optional` **nft**: [`ProtocolReturnedNFTData`](ProtocolReturnedNFTData.md)

For NFT drops, important information such as the token IDs, or contract need to be stored.

#### Defined in

[lib/types/protocol.ts:43](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L43)

___

### owner\_id

 **owner\_id**: `string`

Which account created this drop.

#### Defined in

[lib/types/protocol.ts:37](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L37)

___

### registered\_uses

 **registered\_uses**: `number`

How many key uses are registered for this drop? This is only applicable to simple drops with lazy registrations, FT drops, and NFT drops.

#### Defined in

[lib/types/protocol.ts:53](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L53)

___

### required\_gas

 **required\_gas**: `string`

In order to use an access key that's part of this drop, how much Gas *needs* to be attached to the call?

#### Defined in

[lib/types/protocol.ts:55](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L55)

___

### simple

 `Optional` **simple**: [`ProtocolReturnedSimpleData`](ProtocolReturnedSimpleData.md)

For simple drops, there are specific, optional configurations.

#### Defined in

[lib/types/protocol.ts:41](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L41)

'''
'''--- docs/keypom-sdk/Selector/interfaces/ProtocolReturnedDropConfig.md ---
---
id: "ProtocolReturnedDropConfig"
title: "Interface: ProtocolReturnedDropConfig"
sidebar_label: "ProtocolReturnedDropConfig"
sidebar_position: 0
custom_edit_url: null
---

Drop config returned from the Protocol. This interface is exactly the same as the `DropConfig`, except all the fields are
snake cased instead of camel cased due to what the Protocol returns.

## Properties

### root\_account\_id

 `Optional` **root\_account\_id**: `string`

Override the global root account that all created sub-accounts will have (currently `near` or `testnet`). This allows users to drops that have a custom root.
For example, Fayyr could specify a root of `fayyr.near` By which all sub-accounts will then be `ACCOUNT.fayyr.near`.
It's important to note that this root account *MUST* have a smart contract deployed that has a method `create_account`.

#### Defined in

[lib/types/protocol.ts:83](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L83)

___

### sale

 `Optional` **sale**: [`ProtocolReturnedPublicSaleConfig`](ProtocolReturnedPublicSaleConfig.md)

#### Defined in

[lib/types/protocol.ts:76](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L76)

___

### time

 `Optional` **time**: [`ProtocolReturnedTimeConfig`](ProtocolReturnedTimeConfig.md)

Any information related to time-based configurations such as a starting date for keys etc.

#### Defined in

[lib/types/protocol.ts:71](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L71)

___

### usage

 `Optional` **usage**: [`ProtocolReturnedUsageConfig`](ProtocolReturnedUsageConfig.md)

Any information related to how access keys are used such as which methods they can call or whether an empty drop should be automatically deleted etc.

#### Defined in

[lib/types/protocol.ts:74](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L74)

___

### uses\_per\_key

 `Optional` **uses\_per\_key**: `number`

How many uses can each key have before it's deleted. If this isn't specified, it defaults to 1 use per key.

#### Defined in

[lib/types/protocol.ts:68](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L68)

'''
'''--- docs/keypom-sdk/Selector/interfaces/ProtocolReturnedFCData.md ---
---
id: "ProtocolReturnedFCData"
title: "Interface: ProtocolReturnedFCData"
sidebar_label: "ProtocolReturnedFCData"
sidebar_position: 0
custom_edit_url: null
---

FC Data returned from the Protocol. This interface is exactly the same as the `FCData`, except all the fields are
snake cased instead of camel cased due to what the Protocol returns.

## Properties

### methods

 **methods**: [`ProtocolReturnedMethod`](ProtocolReturnedMethod.md)[][]

The top level array indicates a different set of methods that can be called for every key use. It is possible that for a given key use, no methods are called thus acting as a "free" key use whereby the use is reflected on-chain but no assets are transferred.
If a given key use does not have an undefined set of methods, when it is used, all the methods in the set will be called.

#### Defined in

[lib/types/protocol.ts:300](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L300)

'''
'''--- docs/keypom-sdk/Selector/interfaces/ProtocolReturnedFTData.md ---
---
id: "ProtocolReturnedFTData"
title: "Interface: ProtocolReturnedFTData"
sidebar_label: "ProtocolReturnedFTData"
sidebar_position: 0
custom_edit_url: null
---

FT Data returned from the Protocol. This interface is exactly the same as the `FTData`, except all the fields are
snake cased instead of camel cased due to what the Protocol returns.

## Properties

### balance\_per\_use

 `Optional` **balance\_per\_use**: `string`

Amount of tokens to transfer but considering the decimal amount.
Example: transferring one wNEAR should be passed in as "1000000000000000000000000" and NOT "1"

#### Defined in

[lib/types/protocol.ts:226](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L226)

___

### contract\_id

 **contract\_id**: `string`

Which contract do the FTs belong to?

#### Defined in

[lib/types/protocol.ts:217](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L217)

___

### sender\_id

 `Optional` **sender\_id**: `string`

By default, anyone can fund your drop with FTs. This field allows you to set a specific account ID that will be locked into sending the FTs.

#### Defined in

[lib/types/protocol.ts:221](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L221)

'''
'''--- docs/keypom-sdk/Selector/interfaces/ProtocolReturnedKeyInfo.md ---
---
id: "ProtocolReturnedKeyInfo"
title: "Interface: ProtocolReturnedKeyInfo"
sidebar_label: "ProtocolReturnedKeyInfo"
sidebar_position: 0
custom_edit_url: null
---

Key information returned from the Protocol. This interface is exactly the same as the `KeyInfo`, except all the fields are
snake cased instead of camel cased due to what the Protocol returns.

## Properties

### allowance

 **allowance**: `number`

How much allowance does the key have left (measured in $yoctoNEAR). When the key is deleted, this is refunded to the funder's balance.

#### Defined in

[lib/types/protocol.ts:23](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L23)

___

### cur\_key\_use

 **cur\_key\_use**: `number`

Which use is the key currently on? For single-use keys, this is always 1.

#### Defined in

[lib/types/protocol.ts:14](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L14)

___

### drop\_id

 **drop\_id**: `string`

Drop ID for the specific drop that the key belongs to.

#### Defined in

[lib/types/protocol.ts:9](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L9)

___

### key\_id

 **key\_id**: `number`

The unique ID associated to this key. IDs are *not* unique across drops but they are unique for any key in the drop.

#### Defined in

[lib/types/protocol.ts:26](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L26)

___

### last\_used

 **last\_used**: `number`

At what timestamp was the key last used? Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/protocol.ts:20](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L20)

___

### public\_key

 **public\_key**: `string`

Public key for this access key.

#### Defined in

[lib/types/protocol.ts:11](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L11)

___

### remaining\_uses

 **remaining\_uses**: `number`

How many uses this key has left before it's deleted.

#### Defined in

[lib/types/protocol.ts:17](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L17)

'''
'''--- docs/keypom-sdk/Selector/interfaces/ProtocolReturnedMethod.md ---
---
id: "ProtocolReturnedMethod"
title: "Interface: ProtocolReturnedMethod"
sidebar_label: "ProtocolReturnedMethod"
sidebar_position: 0
custom_edit_url: null
---

Method information returned from the Protocol. This interface is exactly the same as the `Method`, except all the fields are
snake cased instead of camel cased due to what the Protocol returns.

## Properties

### account\_id\_field

 `Optional` **account\_id\_field**: `string`

Specifies what field Keypom should auto-inject the account that claimed the drop's ID into when calling the function.
As an example, if the methodName was `nft_mint` and it expected a field `receiver_id` to be passed in, indicating who should receive the token, then the `accountIdField` would be `receiver_id`.
To insert into nested objects, use periods to separate. For example, to insert into args.metadata.field, you would specify "metadata.field"

#### Defined in

[lib/types/protocol.ts:260](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L260)

___

### args

 **args**: `string`

What arguments should be passed to the method. This should be in stringified JSON.

#### Defined in

[lib/types/protocol.ts:245](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L245)

___

### attached\_deposit

 **attached\_deposit**: `string`

How much yoctoNEAR should be attached to the call.

#### Defined in

[lib/types/protocol.ts:249](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L249)

___

### attached\_gas

 `Optional` **attached\_gas**: `string`

How much gas to attach to this method call. If none, all the gas is split between the parallel method calls in a given claim.
If this is specified, the key can ONLY be used to call `claim` and no `deposit_per_use` can be specified. This leads the key to act like a method calling proxy instead of a linkdrop.

#### Defined in

[lib/types/protocol.ts:254](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L254)

___

### drop\_id\_field

 `Optional` **drop\_id\_field**: `string`

Specifies what field Keypom should auto-inject the drops ID into when calling the function.
As an example, if an NFT contract expected the Keypom drop ID to be passed in as the field `keypom_drop_id` in order to gate access to who can mint NFTs, then the `dropIdField` would be `keypom_drop_id`.
To insert into nested objects, use periods to separate. For example, to insert into args.metadata.field, you would specify "metadata.field"

#### Defined in

[lib/types/protocol.ts:266](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L266)

___

### funder\_id\_field

 `Optional` **funder\_id\_field**: `string`

Specifies what field Keypom should auto-inject the funder's account ID into when calling the function.
As an example, if an NFT contract wanted to gate only users with an odd key ID to be able to mint an NFT and their parameter was called `keypom_key_id`, then the `keyIdField` would be `keypom_key_id`.
To insert into nested objects, use periods to separate. For example, to insert into args.metadata.field, you would specify "metadata.field"

#### Defined in

[lib/types/protocol.ts:278](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L278)

___

### key\_id\_field

 `Optional` **key\_id\_field**: `string`

Specifies what field Keypom should auto-inject the key's ID into when calling the function.
As an example, if an NFT contract wanted to gate only users with an odd key ID to be able to mint an NFT and their parameter was called `keypom_key_id`, then the `keyIdField` would be `keypom_key_id`.
To insert into nested objects, use periods to separate. For example, to insert into args.metadata.field, you would specify "metadata.field"

#### Defined in

[lib/types/protocol.ts:272](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L272)

___

### method\_name

 **method\_name**: `string`

The method that should be invoked on the `receiverId`'s contract.

#### Defined in

[lib/types/protocol.ts:241](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L241)

___

### receiver\_id

 **receiver\_id**: `string`

The account ID that the contract is deployed to that the method will be called on.

#### Defined in

[lib/types/protocol.ts:237](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L237)

___

### receiver\_to\_claimer

 `Optional` **receiver\_to\_claimer**: `boolean`

If set to true, the claiming account ID will be the receiver ID of the method call.
This receiver must be a valid account and non-malicious (cannot be set to the keypom contract)

#### Defined in

[lib/types/protocol.ts:283](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L283)

___

### user\_args\_rule

 `Optional` **user\_args\_rule**: ``"AllUser"`` \| ``"FunderPreferred"`` \| ``"UserPreferred"``

What permissions does the user have when providing custom arguments to the function call?
By default, the user cannot provide any custom arguments

#### Defined in

[lib/types/protocol.ts:288](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L288)

'''
'''--- docs/keypom-sdk/Selector/interfaces/ProtocolReturnedNFTData.md ---
---
id: "ProtocolReturnedNFTData"
title: "Interface: ProtocolReturnedNFTData"
sidebar_label: "ProtocolReturnedNFTData"
sidebar_position: 0
custom_edit_url: null
---

NFT Data information returned from the Protocol. This interface is exactly the same as the `NFTData`, except all the fields are
snake cased instead of camel cased due to what the Protocol returns.

## Properties

### contract\_id

 **contract\_id**: `string`

The account ID that the NFT contract is deployed to. This contract is where all the NFTs for the specific drop must come from.

#### Defined in

[lib/types/protocol.ts:204](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L204)

___

### sender\_id

 `Optional` **sender\_id**: `string`

By default, anyone can fund your drop with NFTs. This field allows you to set a specific account ID that will be locked into sending the NFTs.

#### Defined in

[lib/types/protocol.ts:206](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L206)

'''
'''--- docs/keypom-sdk/Selector/interfaces/ProtocolReturnedNonFungibleTokenMetadata.md ---
---
id: "ProtocolReturnedNonFungibleTokenMetadata"
title: "Interface: ProtocolReturnedNonFungibleTokenMetadata"
sidebar_label: "ProtocolReturnedNonFungibleTokenMetadata"
sidebar_position: 0
custom_edit_url: null
---

General structure of Non-Fungible Token Metadata as per official NEP-177 standard (https://github.com/near/NEPs/blob/master/neps/nep-0177.md).

## Properties

### copies

 `Optional` **copies**: `number`

number of copies of this set of metadata in existence when token was minted.

#### Defined in

[lib/types/nft.ts:46](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L46)

___

### description

 `Optional` **description**: `string`

free-form description

#### Defined in

[lib/types/nft.ts:40](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L40)

___

### expires\_at

 `Optional` **expires\_at**: `number`

When token expires, Unix epoch in milliseconds

#### Defined in

[lib/types/nft.ts:50](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L50)

___

### extra

 `Optional` **extra**: `string`

anything extra the NFT wants to store on-chain. Can be stringified JSON.

#### Defined in

[lib/types/nft.ts:56](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L56)

___

### issued\_at

 `Optional` **issued\_at**: `number`

When token was issued or minted, Unix epoch in milliseconds

#### Defined in

[lib/types/nft.ts:48](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L48)

___

### media

 `Optional` **media**: `string`

URL to associated media, preferably to decentralized, content-addressed storage

#### Defined in

[lib/types/nft.ts:42](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L42)

___

### media\_hash

 `Optional` **media\_hash**: `string`

Base64-encoded sha256 hash of content referenced by the `media` field. Required if `media` is included.

#### Defined in

[lib/types/nft.ts:44](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L44)

___

### reference

 `Optional` **reference**: `string`

URL to an off-chain JSON file with more info.

#### Defined in

[lib/types/nft.ts:58](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L58)

___

### reference\_hash

 `Optional` **reference\_hash**: `string`

Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.

#### Defined in

[lib/types/nft.ts:60](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L60)

___

### starts\_at

 `Optional` **starts\_at**: `number`

When token starts being valid, Unix epoch in milliseconds

#### Defined in

[lib/types/nft.ts:52](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L52)

___

### title

 `Optional` **title**: `string`

ex. "Arch Nemesis: Mail Carrier" or "Parcel #5055"

#### Defined in

[lib/types/nft.ts:38](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L38)

___

### updated\_at

 `Optional` **updated\_at**: `number`

When token was last updated, Unix epoch in milliseconds

#### Defined in

[lib/types/nft.ts:54](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L54)

'''
'''--- docs/keypom-sdk/Selector/interfaces/ProtocolReturnedNonFungibleTokenObject.md ---
---
id: "ProtocolReturnedNonFungibleTokenObject"
title: "Interface: ProtocolReturnedNonFungibleTokenObject"
sidebar_label: "ProtocolReturnedNonFungibleTokenObject"
sidebar_position: 0
custom_edit_url: null
---

General structure of a Non-Fungible Token object as per official NEP-171 standard (https://github.com/near/NEPs/blob/master/neps/nep-0171.md).

## Properties

### approved\_account\_ids

 `Optional` **approved\_account\_ids**: `Map`<`string`, `number`\>

Map of account IDs to approval IDs as per official NEP-178 standard (https://github.com/near/NEPs/blob/master/neps/nep-0178.md).

#### Defined in

[lib/types/nft.ts:28](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L28)

___

### metadata

 `Optional` **metadata**: [`ProtocolReturnedNonFungibleTokenMetadata`](ProtocolReturnedNonFungibleTokenMetadata.md)

Metadata for the token

#### Defined in

[lib/types/nft.ts:26](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L26)

___

### owner\_id

 **owner\_id**: `string`

Account ID of the owner

#### Defined in

[lib/types/nft.ts:24](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L24)

___

### royalty

 `Optional` **royalty**: `Map`<`string`, `number`\>

A mapping of NEAR accounts to the amount each should be paid out as per official NEP-199 standard (https://github.com/near/NEPs/blob/master/neps/nep-0199.md).

#### Defined in

[lib/types/nft.ts:30](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L30)

___

### token\_id

 **token\_id**: `string`

String ID for the token

#### Defined in

[lib/types/nft.ts:22](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/nft.ts#L22)

'''
'''--- docs/keypom-sdk/Selector/interfaces/ProtocolReturnedPublicSaleConfig.md ---
---
id: "ProtocolReturnedPublicSaleConfig"
title: "Interface: ProtocolReturnedPublicSaleConfig"
sidebar_label: "ProtocolReturnedPublicSaleConfig"
sidebar_position: 0
custom_edit_url: null
---

Within the config, there are configurable options related to how keys can be sold and a funder can potentially make a profit.

## Properties

### allowlist

 `Optional` **allowlist**: `string`[]

Which accounts are allowed to add keys? If the allowlist is empty, anyone that is not in the blocklist can add keys.

#### Defined in

[lib/types/protocol.ts:173](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L173)

___

### auto\_withdraw\_funds

 `Optional` **auto\_withdraw\_funds**: `boolean`

Should the revenue generated be sent to the funder's account balance or
automatically withdrawn and sent to their NEAR wallet?

#### Defined in

[lib/types/protocol.ts:180](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L180)

___

### blocklist

 `Optional` **blocklist**: `string`[]

Which accounts are NOT allowed to add keys?

#### Defined in

[lib/types/protocol.ts:175](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L175)

___

### end

 `Optional` **end**: `number`

Block timestamp dictating the end of the public sale. If None, keys can be added indefinitely
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/protocol.ts:190](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L190)

___

### max\_num\_keys

 `Optional` **max\_num\_keys**: `number`

Maximum number of keys that can be added to this drop. If None, there is no max.

#### Defined in

[lib/types/protocol.ts:166](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L166)

___

### price\_per\_key

 `Optional` **price\_per\_key**: `string`

Amount of $NEAR that the user needs to attach (if they are not the funder) on top of costs. This amount will be
Automatically sent to the funder's balance. If None, the keys are free to the public.

#### Defined in

[lib/types/protocol.ts:171](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L171)

___

### start

 `Optional` **start**: `number`

Minimum block timestamp before the public sale starts. If None, keys can be added immediately
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/protocol.ts:185](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L185)

'''
'''--- docs/keypom-sdk/Selector/interfaces/ProtocolReturnedSimpleData.md ---
---
id: "ProtocolReturnedSimpleData"
title: "Interface: ProtocolReturnedSimpleData"
sidebar_label: "ProtocolReturnedSimpleData"
sidebar_position: 0
custom_edit_url: null
---

## Properties

### lazy\_register

 `Optional` **lazy\_register**: `boolean`

#### Defined in

[lib/types/protocol.ts:195](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L195)

'''
'''--- docs/keypom-sdk/Selector/interfaces/ProtocolReturnedTimeConfig.md ---
---
id: "ProtocolReturnedTimeConfig"
title: "Interface: ProtocolReturnedTimeConfig"
sidebar_label: "ProtocolReturnedTimeConfig"
sidebar_position: 0
custom_edit_url: null
---

Time Config information returned from the Protocol. This interface is exactly the same as the `TimeConfig`, except all the fields are
snake cased instead of camel cased due to what the Protocol returns.

## Properties

### end

 `Optional` **end**: `number`

Block timestamp that keys must be used before. If this isn't specified, keys can be used indefinitely.
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/protocol.ts:101](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L101)

___

### interval

 `Optional` **interval**: `number`

Interval of time after the `start_timestamp` that must pass before a key can be used. If multiple intervals pass, the key can be used multiple times.
This has nothing to do With the throttle timestamp. It only pertains to the start timestamp and the current timestamp. The last_used timestamp is not taken into account.
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/protocol.ts:114](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L114)

___

### start

 `Optional` **start**: `number`

Minimum block timestamp before keys can be used. If this isn't specified, keys can be used immediately.
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/protocol.ts:95](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L95)

___

### throttle

 `Optional` **throttle**: `number`

Amount of time that *must* pass in between each key use. If this isn't specified, there is no delay between key uses.
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/protocol.ts:107](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L107)

'''
'''--- docs/keypom-sdk/Selector/interfaces/ProtocolReturnedUsageConfig.md ---
---
id: "ProtocolReturnedUsageConfig"
title: "Interface: ProtocolReturnedUsageConfig"
sidebar_label: "ProtocolReturnedUsageConfig"
sidebar_position: 0
custom_edit_url: null
---

Usage Config information returned from the Protocol. This interface is exactly the same as the `UsageConfig`, except all the fields are
snake cased instead of camel cased due to what the Protocol returns.

## Properties

### account\_creation\_fields

 `Optional` **account\_creation\_fields**: `Object`

When calling `create_account` on the root account, which keypom args should be attached to the payload.

#### Type declaration

| Name | Type | Description |
| :------ | :------ | :------ |
| `account_id_field?` | `string` | Specifies what field Keypom should auto-inject the account that claimed the drop's ID into when calling the `create_account` function. |
| `drop_id_field?` | `string` | Specifies what field Keypom should auto-inject the drop's ID into when calling the `create_account` function. |
| `funder_id_field?` | `string` | Specifies what field Keypom should auto-inject the drop funder's account ID into when calling the `create_account` function. |
| `key_id_field?` | `string` | Specifies what field Keypom should auto-inject the key's ID into when calling the `create_account` function. |

#### Defined in

[lib/types/protocol.ts:141](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L141)

___

### auto\_delete\_drop

 `Optional` **auto\_delete\_drop**: `boolean`

When a key is used and deleted, if it results in the drop being empty, should the drop automatically be deleted? If this isn't specified, it defaults to false.

#### Defined in

[lib/types/protocol.ts:134](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L134)

___

### auto\_withdraw

 `Optional` **auto\_withdraw**: `boolean`

In the case where `autoDeleteDrop` is set to true and the drop is the owner's last, should their balance be automatically withdrawn? If this isn't specified, it defaults to false.

#### Defined in

[lib/types/protocol.ts:138](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L138)

___

### permissions

 `Optional` **permissions**: `string`

Specify which methods can be called by the access key (either `claim` or `create_account_and_claim`). If this isn't specified, both methods can be called.

#### Defined in

[lib/types/protocol.ts:125](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L125)

___

### refund\_deposit

 `Optional` **refund\_deposit**: `boolean`

If the method `claim` is called rather than `create_account_and_claim`, should the `deposit_per_use` be refunded to the owner's balance?
If this isn't specified, it defaults to false.

#### Defined in

[lib/types/protocol.ts:130](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/protocol.ts#L130)

'''
'''--- docs/keypom-sdk/Selector/interfaces/PublicSaleConfig.md ---
---
id: "PublicSaleConfig"
title: "Interface: PublicSaleConfig"
sidebar_label: "PublicSaleConfig"
sidebar_position: 0
custom_edit_url: null
---

Within the config, there are configurable options related to how keys can be sold and a funder can potentially make a profit.

## Properties

### allowlist

 `Optional` **allowlist**: `string`[]

Which accounts are allowed to add keys? If the allowlist is empty, anyone that is not in the blocklist can add keys.

#### Defined in

[lib/types/drops.ts:169](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L169)

___

### autoWithdrawFunds

 `Optional` **autoWithdrawFunds**: `boolean`

Should the revenue generated be sent to the funder's account balance or
automatically withdrawn and sent to their NEAR wallet?

#### Defined in

[lib/types/drops.ts:176](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L176)

___

### blocklist

 `Optional` **blocklist**: `string`[]

Which accounts are NOT allowed to add keys?

#### Defined in

[lib/types/drops.ts:171](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L171)

___

### end

 `Optional` **end**: `number`

Block timestamp dictating the end of the public sale. If None, keys can be added indefinitely
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/drops.ts:186](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L186)

___

### maxNumKeys

 `Optional` **maxNumKeys**: `number`

Maximum number of keys that can be added to this drop. If None, there is no max.

#### Defined in

[lib/types/drops.ts:161](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L161)

___

### pricePerKeyNEAR

 `Optional` **pricePerKeyNEAR**: `number`

Amount of $NEAR that the user needs to attach (if they are not the funder) on top of costs. This amount will be
Automatically sent to the funder's balance. If None, the keys are free to the public.

#### Defined in

[lib/types/drops.ts:166](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L166)

___

### pricePerKeyYocto

 `Optional` **pricePerKeyYocto**: `string`

#### Defined in

[lib/types/drops.ts:167](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L167)

___

### start

 `Optional` **start**: `number`

Minimum block timestamp before the public sale starts. If None, keys can be added immediately
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/drops.ts:181](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L181)

'''
'''--- docs/keypom-sdk/Selector/interfaces/SimpleData.md ---
---
id: "SimpleData"
title: "Interface: SimpleData"
sidebar_label: "SimpleData"
sidebar_position: 0
custom_edit_url: null
---

Specific configurable information for Simple drops.

## Properties

### lazyRegister

 `Optional` **lazyRegister**: `boolean`

If this is set to true, keys can be created and registered AFTER they've been created (for simple and FC drops only).

#### Defined in

[lib/types/simple.ts:6](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/simple.ts#L6)

'''
'''--- docs/keypom-sdk/Selector/interfaces/TimeConfig.md ---
---
id: "TimeConfig"
title: "Interface: TimeConfig"
sidebar_label: "TimeConfig"
sidebar_position: 0
custom_edit_url: null
---

Within the config, there are configurable options related to timing such as how often a key can be used.

## Properties

### end

 `Optional` **end**: `number`

Block timestamp that keys must be used before. If this isn't specified, keys can be used indefinitely.
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/drops.ts:98](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L98)

___

### interval

 `Optional` **interval**: `number`

Interval of time after the `start_timestamp` that must pass before a key can be used. If multiple intervals pass, the key can be used multiple times.
This has nothing to do With the throttle timestamp. It only pertains to the start timestamp and the current timestamp. The last_used timestamp is not taken into account.
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/drops.ts:111](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L111)

___

### start

 `Optional` **start**: `number`

Minimum block timestamp before keys can be used. If this isn't specified, keys can be used immediately.
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/drops.ts:92](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L92)

___

### throttle

 `Optional` **throttle**: `number`

Amount of time that *must* pass in between each key use. If this isn't specified, there is no delay between key uses.
Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.

#### Defined in

[lib/types/drops.ts:104](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L104)

'''
'''--- docs/keypom-sdk/Selector/interfaces/UsageConfig.md ---
---
id: "UsageConfig"
title: "Interface: UsageConfig"
sidebar_label: "UsageConfig"
sidebar_position: 0
custom_edit_url: null
---

Within the config, there are configurable options related to how keys can be used. What permissions they have, whether an empty drop should be automatically deleted etc.

## Properties

### accountCreationFields

 `Optional` **accountCreationFields**: `Object`

When calling `create_account` on the root account, which keypom args should be attached to the payload.

#### Type declaration

| Name | Type | Description |
| :------ | :------ | :------ |
| `accountIdField?` | `string` | Specifies what field Keypom should auto-inject the account that claimed the drop's ID into when calling the `create_account` function. |
| `dropIdField?` | `string` | Specifies what field Keypom should auto-inject the drop's ID into when calling the `create_account` function. |
| `funderIdField?` | `string` | Specifies what field Keypom should auto-inject the drop funder's account ID into when calling the `create_account` function. |
| `keyIdField?` | `string` | Specifies what field Keypom should auto-inject the key's ID into when calling the `create_account` function. |

#### Defined in

[lib/types/drops.ts:136](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L136)

___

### autoDeleteDrop

 `Optional` **autoDeleteDrop**: `boolean`

When a key is used and deleted, if it results in the drop being empty, should the drop automatically be deleted? If this isn't specified, it defaults to false.

#### Defined in

[lib/types/drops.ts:130](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L130)

___

### autoWithdraw

 `Optional` **autoWithdraw**: `boolean`

When the last key in this drop is used, in the case where `autoDeleteDrop` is set to true and the drop is the owner's last, should their balance be automatically withdrawn? If this isn't specified, it defaults to false.

#### Defined in

[lib/types/drops.ts:134](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L134)

___

### permissions

 `Optional` **permissions**: `string`

Specify which methods can be called by the access key (either `claim` or `create_account_and_claim`). If this isn't specified, both methods can be called.

#### Defined in

[lib/types/drops.ts:121](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L121)

___

### refundDeposit

 `Optional` **refundDeposit**: `boolean`

If the method `claim` is called rather than `create_account_and_claim`, should the `deposit_per_use` be refunded to the owner's balance?
If this isn't specified, it defaults to false.

#### Defined in

[lib/types/drops.ts:126](https://github.com/keypom/keypom-js/blob/68bf90396/packages/core/src/lib/types/drops.ts#L126)

'''
'''--- docs/keypom-sdk/Selector/interfaces/_category_.yml ---
label: "Interfaces"
position: 4
'''
'''--- docs/keypom-sdk/Selector/modules.md ---
---
id: "modules"
title: "@keypom/selector - v1.2.0"
sidebar_label: "Exports"
sidebar_position: 0.5
custom_edit_url: null
---

## Classes

- [KeypomWallet](classes/KeypomWallet.md)

## Functions

### setupKeypom

**setupKeypom**(`«destructured»`): `WalletModuleFactory`<`KeypomWalletInstant`\>

#### Parameters

| Name | Type |
| :------ | :------ |
| `«destructured»` | `KeypomParams` |

#### Returns

`WalletModuleFactory`<`KeypomWalletInstant`\>

#### Defined in

[core/setup.ts:92](https://github.com/keypom/keypom-js/blob/9a866ee41/packages/selector/src/core/setup.ts#L92)

'''
'''--- docs/keypom-sdk/Selector/welcome.md ---
---
id: "welcome"
title: "@keypom/selector - v1.2.0"
sidebar_label: "Readme"
sidebar_position: 0
custom_edit_url: null
---

<p align="center">
  <a href="https://docs.keypom.xyz/">
    <picture>
      <img src="https://cloudflare-ipfs.com/ipfs/bafybeightypuoqly32gsrivh4efckhdv6wsefiynpnonlem6ts3ypgdm7e" height="128"/>
    </picture>
    <h1 align="center">Keypom Wallet Selector</h1>
  </a>
</p>

<p align="center">
  <a aria-label="Made by Ben Kurrek" href="https://github.com/BenKurrek">
    <img src="https://img.shields.io/badge/MADE%20BY-Ben%20Kurrek-000000.svg?style=for-the-badge"/>
  </a>
  <a aria-label="Made by Matt Lockyer" href="https://github.com/mattlockyer">
    <img src="https://img.shields.io/badge/MADE%20BY-Matt%20Lockyer-000000.svg?style=for-the-badge"/>
  </a>
  <a aria-label="License" href="https://github.com/keypom/keypom-js/blob/main/LICENSE">
    <img alt="" src="https://img.shields.io/badge/License-GNU%20GPL-green?style=for-the-badge"/>
  </a>
  <a aria-label="Join the community" href="https://t.me/+OqI-cKxQU05lZDIx">
    <img alt="" src="https://img.shields.io/badge/Join%20The-community-blueviolet.svg?style=for-the-badge"/>
  </a>
</p>

The Keypom Wallet Selector is a package that allows apps to be fully compatible with both trial accounts and instant sign in experiences. See the following demos for examples of the user experience.
- Instant Sign-In [Demo](https://www.youtube.com/watch?v=p_NOcYbRlJw&feature=youtu.be)
- Trial Account [Demo](https://www.youtube.com/watch?v=p_NOcYbRlJw)

# Table of Contents
- [Table of Contents](#table-of-contents)
- [Installation](#installation)
- [Getting Started](#getting-started)
  - [Setup Keypom Parameters](#setup-keypom-parameters)
    - [IPFS Customizations](#ipfs-customizations)
- [Keypom Trial Accounts](#keypom-trial-accounts)
  - [Trial Account Specs](#trial-account-specs)
  - [Modal Options](#modal-options)
      - [Wallets](#wallets)
    - [Theme And CSS](#theme-and-css)
    - [Modal Text](#modal-text)
  - [Example Trial Account Integration](#example-trial-account-integration)
- [Keypom Instant Sign In Experiences](#keypom-instant-sign-in-experiences)
  - [Instant Sign In Specs](#instant-sign-in-specs)
- [Contributing](#contributing)
- [License](#license)

---

# Installation

To install the Keypom Wallet Selector, run the following command:

```bash
npm install @keypom/selector
# or
yarn add @keypom/selector
# or
pnpm add @keypom/selector
```

# Getting Started

Most apps on NEAR should be compatible with the official [wallet selector](https://github.com/near/wallet-selector) to enable sign-in and sending transactions. For this reason, the Keypom selector has been made to fully support any app that uses the wallet selector.

To get started, navigate to the app's `setupWalletSelector` code where the selector is initialized. Here, you can specify which wallet modules your app should support. Simply add Keypom's `setupKeypom` function to the list of modules and you're good to go!

```js
const selector = await setupWalletSelector({
  network: "testnet",
  modules: [
    setupMyNearWallet(),
    ...
    setupSender(),
    setupKeypom(PARAMS)
  ],
});
```

## Setup Keypom Parameters

`setupKeypom` is the core of the Keypom wallet selector and is the only function you should know about. There are a ton of customizable features that you can make use of to tailor the user experience to your app's needs. At its core, the setup function takes the following parameters:

- `networkId`: Either `testnet` or `mainnet`.
- `signInContractId`: Which contract will be used to sign in users.
- `trialAccountSpecs`: If specified, trial accounts will be supported on the app. These specifications outline two aspects:
    1. How the URL should be constructed for the app to trigger the trial account sign in flow.
    2. Customizable options for the trial account modals including *all* the text such as titles, descriptions, buttons, placeholders etc. In addition, you can specify exactly which off-boarding wallets you'd like to support.
- `instantSignInSpecs`: If specified, trial accounts will be supported on the app. The instant sign in specs dictate how the URL should be constructed for the app to trigger the instant sign in flow.

### IPFS Customizations

For apps that wish to customize the Keypom parameters on a per page basis or even a per user basis, they can make use of IPFS CIDs. By adding a `?cid=` parameter to the URL, Keypom will fetch the parameters from the specified CID. The contents on IPFS must be JSON that match the Keypom parameters:

```json
{
  "networkId": "testnet", // Or "mainnet",
  "signInContractId": CONTRACT_ID,
  "trialAccountSpecs": {
    "url": "vandeley_industries.com/trial-sign-in/ACCOUNT_ID#SECRET_KEY",
    "modalOptions": KEYPOM_OPTIONS
  },
  "instantSignInSpecs": {
    "url": "vandeley_industries.com/instant-sign-in/ACCOUNT_ID#SECRET_KEY"
  }
}
```

An example CID can be found below:
```
bafkreidneri4ffymscahjprlapg4j62yleli73ncwdmopnkxpgczpusqn4
```

# Keypom Trial Accounts

Keypom Trial Accounts are an exciting new opportunity for Web3 apps to seamlessly onboard users whether they’re completely new to crypto or seasoned veterans. With the click of a link, users require no software, wallet setup, wallet connection, and are *instantly signed into apps* with their trial account, ready to make on-chain transactions. Unlike most other onboarding mechanisms, the entire experience can be embedded *directly in the app* to increase user retention and is entirely on-chain.

This technology is perfect for dApps of all sizes ranging from small indie to large enterprise applications.

- Trial Account [Demo](https://www.youtube.com/watch?v=p_NOcYbRlJw)

In order to support trial accounts, your app must have the `setupKeypom` function embedded within the wallet selector with the `trialAccountSpecs` parameter specified.

## Trial Account Specs

The trial account specifications allows the Keypom wallet selector to support trial accounts on your app. In order to trigger the sign in flow, the user must be on the correct URL. This URL is specified in the specifications as a string and should look like this:

```js
https://near.org/#trial-url/ACCOUNT_ID/SECRET_KEY
```

The URL *must* have the `ACCOUNT_ID` and `SECRET_KEY` placeholders.

As an example, if you wanted your trial users to sign in once they reached `https://near.org/#trial-url/`, and you wanted the account and secret key to be separated using `/`, your specs should look like this:

```js
trialAccountSpecs: {
    url: "https://near.org/#trial-url/ACCOUNT_ID/SECRET_KEY",
}
```

Alternatively, you could swap the `/` delimiter with a `#` instead:

```js
trialAccountSpecs: {
    url: "https://near.org/#trial-url/ACCOUNT_ID#SECRET_KEY",
}
```

> **NOTE:** The account ID must come first and the secret key must follow the delimiter. For unclaimed trial account linkdrops, the account ID will be the Keypom contract. For claimed trial account linkdrops, the account ID will be the account ID chosen by the user.

## Modal Options

The second field in the trial account specs is the `modalOptions`. This contains all the customizable options for the trial account modals as well as the wallets you want to support for user offboarding.

```js
export interface ModalCustomizations {
  wallets: OffboardingWallet[];
  theme?: Theme;
  beginTrial?: BeginTrialCustomizations,
  trialOver?: TrialOverCustomizations,
  invalidAction?: InvalidActionCustomizations,
  insufficientBalance?: InsufficientBalanceCustomizations,
}
```

#### Wallets

The only required field is `wallets`. This should be a list of valid domains that support trial account offboarding. Each of the wallets in the list will be displayed as a button once the trial is over.

```js
export interface OffboardingWallet {
  name: string;
  description: string;
  iconUrl: string;
  redirectUrl: string;
}
```

For each wallet, you can specify a name to display, a description, an image (in the form of a URL), and where to redirect the user to once the button is clicked. The redirect URL follows the same format as the trial account URL and should look like this:

```js
https://app.mynearwallet.com/linkdrop/ACCOUNT_ID/SECRET_KEY
```

The URL *must* have the `ACCOUNT_ID` and `SECRET_KEY` placeholders.

### Theme And CSS

The modal used by Keypom uses the same CSS as the official wallet selector modal behind the scenes. To learn how to customize the theme to match your app, see the selector's [documentation](https://github.com/near/wallet-selector/tree/main/packages/modal-ui#react--vue).

If you only wish to change the theme between light and dark mode, you can pass in a `theme` field in the modal options. This field should be either `light` or `dark`.

### Modal Text 

In addition to the modal style, you have complete control over the text that is displayed at each stage of the claiming process. To see the default text, see the [Default Text](#modal-default-text) section.

For the trial account creation process, there are currently 3 modals that can be customized:

1. Landing page: what the user sees when they first click the link

```bash
landing?: {
    title?: string;
    body?: string;
    fieldPlaceholder?: string;
    buttonText?: string;
    subText?: {
        landing?: string;
        invalidAccountId?: string;
        accountIdTaken?: string;
        accountIdAvailable?: string;
    }
},
```

2. Claiming: while the account is being created:
```bash
claiming?: {
    title?: string;
    body?: string;
},  
```

3. Claimed: once the account has been created:
```bash
claimed?: {
    title?: string;
    body?: string;
    buttonText?: string;
}
```

The next stage that can be customized is what the user sees once their trial is over and they need to choose a wallet to offboard to.

```bash
trialOver?: {
    mainBody?: {
        title?: string;
        body?: string;
        imageOne?: {
            title: string;
            body: string;
        },
        imageTwo?: {
            title: string;
            body: string;
        },
        button?: {
            url?: string;
            newTab?: boolean;
            text?: string;
        }
    },
    offboardingOptions?: {
        title?: string;
    }
}
```

You can change the titles, descriptions, button text / behavior and more to tailor the experience to your app. Finally, you can change the text for when the user tries to perform an invalid action, or tries to spend more $NEAR than the account has available.

## Example Trial Account Integration

In the following example, you'll see how the trial account flow can be fully integrated into an application. The app has the domain `https://example.com` and the trial account modals should show up once the user lands on `https://example.com/trial-accounts`. In addition, the app doesn't want to expose the secret key in their analytics so they'll separate the account ID and secret key using a `#` instead of a `/`.

The app will also support MyNEARWallet offboarding and will change the default text for the landing modal when the trial begins.

```js
const NETWORK_ID = "testnet";
const CONTRACT_ID = "example.near";

export const KEYPOM_OPTIONS = {
  beginTrial: {
    landing: {
      title: "Welcome To My Cool Example App!",
    },
  },
  wallets: [
    {
      name: "MyNEARWallet",
      description: "Secure your account with a Seed Phrase",
      redirectUrl: "https://testnet.mynearwallet.com/linkdrop/ACCOUNT_ID/SECRET_KEY",
      iconUrl: "INSERT_ICON_URL_HERE"
    },
  ]
}

const selector = await setupWalletSelector({
  network: NETWORK_ID,
  modules: [
    setupMyNearWallet(),
    ...
    setupSender(),
    setupKeypom({ 
        networkId: NETWORK_ID, 
        signInContractId: CONTRACT_ID,
        trialAccountSpecs: {
            url: "https://example.com/trial-accounts/ACCOUNT_ID#SECRET_KEY",
            modalOptions: KEYPOM_OPTIONS
        }
    })
  ],
});
```

# Keypom Instant Sign In Experiences

Instant sign in experiences are a great way to reduce friction for users signing into applications. Currently, the sign in flow for a new user is as follows:
1. User creates an account.
2. They navigate to an application.
3. Sign-in is clicked.
4. The wallet selector modal is opened and the user needs to scroll to find their wallet.
5. The user clicks their wallet and is redirected to the wallet's website to approve a transaction.
6. The user is redirected back to the app and is signed in.

As NEAR pushes to abstract the crypto complexities and jargon away from the end user, this current approach is not scalable. Not only is there a huge amount of clicks and redirects which leads to a loss in conversion, but the user is also expected to know which wallet they own. This is a huge barrier to entry as often times, the wallet logic will be abstracted from the user as seen with SWEAT.

The flow that Keypom offers is as follows:
1. User creates an account.
2. User clicks discovers an application from their wallet.
3. User is instantly signed in and can start using the application.

This flow is much more seamless and removes all the redirects and wallet selector modal friction.

- Instant Sign-In [Demo](https://www.youtube.com/watch?v=p_NOcYbRlJw&feature=youtu.be)

In order to support instant sign in, your app must have the `setupKeypom` function embedded within the wallet selector with the `instantSignInSpecs` parameter specified.

## Instant Sign In Specs

The instant sign in specifications allows the Keypom wallet selector to support instant sign on experiences for your app. In order to trigger the sign in flow, the user must be on the correct URL. This URL is specified in the specifications as a string and should look like this:

```js
https://near.org/#trial-url/ACCOUNT_ID/SECRET_KEY/MODULE_ID
```

The URL *must* have the `ACCOUNT_ID`, `SECRET_KEY`, and `MODULE_ID` placeholders.

Behind the scenes, Keypom will take the secret key and use it to sign transactions on behalf of the account whenever they perform an action. Since this key is limited access, there needs to be a way to approve any transaction that requires full access. This is why the `MODULE_ID` field is present. This is the ID of the wallet that the user will be redirected to in order to approve any full access key required transactions.

Currently, Keypom supports:
- MyNEARWallet: `my-near-wallet`,
- NEAR Wallet: `near-wallet`,
- SWEAT Wallet: `sweat-wallet`

As an example, if you wanted to support instant sign in for users once they reached `https://near.org/#instant-url/`, and you wanted the account and secret key to be separated using `#`, but the module ID and secret key to be separated by `/`, your specs should look like this:

```js
instantSignInSpecs: {
    url: "https://near.org/#instant-url/ACCOUNT_ID#SECRET_KEY/MODULE_ID",
}
```

> **NOTE:** The account ID must come first followed by the secret key and then finally the module ID.

The wallet selector would then look as follows.

```js
const selector = await setupWalletSelector({
  network: NETWORK_ID,
  modules: [
    setupMyNearWallet(),
    ...
    setupSender(),
    setupKeypom({ 
        networkId: NETWORK_ID, 
        signInContractId: CONTRACT_ID,
        instantSignInSpecs: {
            url: "https://near.org/#instant-url/ACCOUNT_ID#SECRET_KEY/MODULE_ID"
        }
    })
  ],
});
```

From this point onwards, any app or wallet could create a limited access key for the contract that your app is using and then redirect the user to your instant sign in URL. An example could be that that account `benjiman.near` wants to use the `near.org` app and the contract being used there is `social.near`. Benji came from MyNEARWallet and so the URL would be:

```
https://near.org/#instant-url/benjiman.near#3C6rhKRWLFmho9bQo32EUmk9Ldx47paRSMUdaoR551EtcaNSPziave55HJosi71tfWSRQjjRrL4exfaBi9o7XKUG/my-near-wallet
```

At this point, Benji would be instantly signed into `near.org` and can start using the app. If anything requires a full access key, he would be redirected to MyNEARWallet to approve the transaction and come back.

# Contributing

First off, thanks for taking the time to contribute! Contributions are what makes the open-source community such an amazing place to learn, inspire, and create. Any contributions you make will benefit everybody else and are **greatly appreciated**.

Please try to create bug reports that are:

- _Reproducible._ Include steps to reproduce the problem.
- _Specific._ Include as much detail as possible: which version, what environment, etc.
- _Unique._ Do not duplicate existing opened issues.
- _Scoped to a Single Bug._ One bug per report.

You can use [markdownlint-cli](https://github.com/igorshubovych/markdownlint-cli) to check for common markdown style inconsistency.

# License

This project is licensed under the **GPL License**.

'''
'''--- docusaurus.config.js ---
const lightCodeTheme = require('prism-react-renderer/themes/github');
const darkCodeTheme = require('prism-react-renderer/themes/dracula');

// With JSDoc @type annotations, IDEs can provide config autocompletion
/** @type {import('@docusaurus/types').DocusaurusConfig} */
(module.exports = {
  title: 'Keypom Docs',
  tagline: 'Web3 Onboarding',
  url: 'https://docs.keypom.xyz',
  baseUrl: '/',
  onBrokenLinks: 'throw',
  onBrokenMarkdownLinks: 'warn',
  favicon: 'img/moon.svg',
  organizationName: 'Keypom', // Usually your GitHub org/user name.
  trailingSlash: false,
  themes: ['@docusaurus/theme-live-codeblock', '@saucelabs/theme-github-codeblock',
  [
    require.resolve("@easyops-cn/docusaurus-search-local"),
    ({
      hashed: true,
      language: ["en"],
      ignoreFiles: ["docs/1.1/nothing-page", "docs/nothing-page", "docs/1.2/nothing-page", "docs/next/Tutorials/Misc/sign-txn"]
    }),
  ],
  ],

  // plugins: [
  //   require.resolve('docusaurus-lunr-search')
  // ],

  presets: [
    [
      '@docusaurus/preset-classic',
      /** @type {import('@docusaurus/preset-classic').Options} */
      ({
        docs: {
          // routeBasePath: '/',
          //homePageId: 'Github ReadMe/Introduction/Introduction',
          sidebarPath: require.resolve('./sidebars.js'),
          // remarkPlugins: [
          //   [require('@docusaurus/remark-plugin-npm2yarn'), {sync: true}],
          // ],
          // Please change this to your repo.
          editUrl: 'https://github.com/keypom/keypom-docs/tree/main/',
          versions: {
            current: {
              banner: 'none',
            },
          },

        },
        blog: false,
        theme: {
          customCss: require.resolve('./src/css/custom.css'),
        },
      }),
    ],
  ],

  themeConfig: {
    /** @type {import('@docusaurus/preset-classic').ThemeConfig} */
      // metadata: [{name: 'Keypom Developer Documentation', 
      //             content: 'Keypom, Documentation, NEAR, Onboarding, Web3'
      //           }],
      navbar: {
        title: '',
        logo: {
          alt: 'MOON',
          src: 'img/newMoonCrop.svg',
          srcDark: 'img/moon_white.png',
          href: '/'
        },
        items: [
          {
            to: "docs/next/Concepts/welcome",
            label: "📖 Concepts",
            position: "left",
          },
          {
            to: "docs/next/Tutorials/welcome",
            label: "💻 Tutorials",
            position: "left",
          },
          // {
          //   to: "docs/next/KeypomV2/welcome",
          //   label: "🤖 Keypom V2",
          //   position: "left",
          // },
          {
            to: "docs/next/TrialAccounts/introduction",
            label: "🎁 Trial Accounts",
            position: "left",
          },
          {
            label: '🚀 BOS',
            to: 'docs/next/Tutorials/BOS/welcome',
          },
          {
            to: "docs/next/keypom-sdk/Core/welcome",
            label: "📚 SDK TypeDocs",
            position: "left",
          },
          {
            to: "docs/next/Cookbook/welcome",
            label: "🧑‍🍳 Cookbook",
            position: "left",
          },
          {
            href: 'https://github.com/keypom/keypom-docs/tree/main',
            label: 'GitHub',
            position: 'right',
          },
          // {
          //   type: 'docsVersionDropdown',
          // },
        ],
      },
      footer: {
        style: 'dark',
        //position: 'center',
        links: [
          //docs
          {
            title: 'Docs',
            items: [
              {
                label: '📖 Concepts',
                to: 'docs/next/Concepts/welcome',
              },
              {
                label: '💻 Tutorials',
                to: 'docs/next/Tutorials/welcome',
              },
              {
                to: "docs/next/TrialAccounts/introduction",
                label: "🎁 Trial Accounts",
                position: "left",
              },
              {
                label: '🚀 BOS',
                to: 'docs/next/Tutorials/BOS/welcome',
              },
              {
                label: "📚 SDK TypeDocs",
                to: "docs/next/keypom-sdk/Core/welcome",
              },
              {
                label: "🧑‍🍳 Cookbook",
                to: "docs/next/Cookbook/welcome",
              }
              // {
              //   label: "🤖Keypom V2",
              //   to: "docs/next/KeypomV2/welcome",
              // },
            ],
          },
          //community
          {
            title: 'Community',
            items: [
              {
                label: 'Twitter',
                href: 'https://twitter.com/keypomxyz',
              },
              {
                label: 'Telegram Builder Group',
                href: 'https://nearbuilders.com/tg-keypom',
              },
            ],
          },
          //more
          {
            title: 'More',
            items: [
              {
                label: 'Protocol Github',
                href: 'https://github.com/keypom/keypom',
              },
              {
                label: 'JavaScript SDK Github',
                href: 'https://github.com/keypom/keypom-js',
              },
              {
                label: 'Docs Examples Github',
                href: 'https://github.com/keypom/keypom-docs-examples',
              },
              {
                label: 'Docs Github',
                href: 'https://github.com/keypom/keypom-docs',
              },
            ],
          },
        ],
        copyright: `Copyright © ${new Date().getFullYear()} Keypom, Inc.`,
      },
      prism: {
        theme: lightCodeTheme,
        darkTheme: darkCodeTheme,
        additionalLanguages: ['rust', 'java'],
      },
      colorMode: {
        respectPrefersColorScheme: true,
      },
      image: 'img/newMoonCrop2.png',
      metadata: [
        {
          property: 'og:image',
          content: 'https://docs.keypom.xyz/img/newMoonCrop2.png',
        },
        {
          name: 'twitter:card', 
          content: 'summary_large_image'
        },
        {
          name: 'twitter:title', 
          content: 'Keypom Developer Documentation'
        },
        {
          name: 'twitter:image',
          content: 'https://docs.keypom.xyz/img/newMoonCrop2.png',
        }
      ],
      // algolia: {
      //   // The application ID provided by Algolia
      //   appId: "KWAT5GJATX",
      //   // Public API key: it is safe to commit it
      //   apiKey: "2e5d96bd04a718b0ae636859f5478336",
      //   indexName: "keypom",
      //   // Optional: see doc section below
      //   contextualSearch: true,
      //   // Optional: Algolia search parameters
      //   searchParameters: {
      //     clickAnalytics: true,
      //     analytics: true,
      //     enableReRanking: true,
      //   },
      //   //... other Algolia params
      //   placeholder: "Search the Docs...",
      // },
  },
});

'''
'''--- package.json ---
{
  "name": "test-site",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "docusaurus": "docusaurus",
    "start": "docusaurus start",
    "build": "docusaurus build",
    "build:typedoc:core": "docusaurus build --config config-typedoc-core.js",
    "build:typedoc:selector": "docusaurus build --config config-typedoc-selector.js",
    "swizzle": "docusaurus swizzle",
    "deploy": "docusaurus deploy",
    "clear": "docusaurus clear",
    "serve": "docusaurus serve",
    "write-translations": "docusaurus write-translations",
    "write-heading-ids": "docusaurus write-heading-ids"
  },
  "dependencies": {
    "@docusaurus/core": "^2.4.1",
    "@docusaurus/preset-classic": "^2.4.1",
    "@docusaurus/theme-common": "^2.4.1",
    "@docusaurus/theme-live-codeblock": "^2.3.1",
    "@easyops-cn/docusaurus-search-local": "^0.26.1",
    "@mdx-js/react": "^1.6.21",
    "@saucelabs/theme-github-codeblock": "^0.1.1",
    "@svgr/webpack": "^5.5.0",
    "classnames": "^2.3.2",
    "clsx": "^1.1.1",
    "file-loader": "^6.2.0",
    "is-wds-npm-package": "^1.0.0",
    "parse-numeric-range": "^1.3.0",
    "prism-react-renderer": "^1.2.1",
    "react": "^17.0.1",
    "react-dom": "^17.0.1",
    "simple-npm-package": "^3.0.8",
    "typescript": "^4.8.4",
    "url": "^0.11.0",
    "url-loader": "^4.1.1"
  },
  "browser": {
    "crypto": false,
    "stream": false
  },
  "browserslist": {
    "production": [
      ">0.5%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "docusaurus-plugin-typedoc": "^0.18.0",
    "typedoc": "^0.23.24",
    "typedoc-plugin-markdown": "^3.14.0"
  }
}

'''
'''--- sidebars.js ---
const sidebars = {
  Concepts: [
    "Concepts/welcome",
    "exec-summary",
    {
      type: 'category',
      label: 'Linkdrops and Access Keys',
      // link: {
      //   type: 'concepts/Linkdrops and Access Keys/linkdrop-welcome',
      // },
      collapsed: false,
      items: [
            'Concepts/LinkdropsAndAccessKeys/near-access-keys',
            'Concepts/LinkdropsAndAccessKeys/linkdrop-basics',
      ],
    },
    {
      type: 'category',
      label: 'Keypom Protocol',
      // link: {
      //   type: 'concepts/Keypom Protocol/keypom-protocol-welcome',
      // },
      collapsed: false,
      items: [
                'Concepts/KeypomProtocol/overview',
                {
                  type: 'category',
                  label: 'Types of Drops',
                  // link: {
                  //   item: 'Concepts/Keypom Protocol/Github Readme/Types of Drops/introduction',
                  // },
                  collapsed: true,
                  items: [
                    'Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/introduction',
                    'Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/simple-drops',
                    'Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/nft-drops',
                    'Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/ft-drops',
                    'Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/fc-drops',
                  ],
                },
                'Concepts/KeypomProtocol/balances',
                {
                  type: 'category',
                  label: 'Configuring Your Drop',
                  // link: {
                  //   type: 'doc',
                  //   id: 'Concepts/Keypom Protocol/Github Readme/Types of Drops/customization-homepage',
                  // },
                  collapsed: true,
                  items: [
                    'Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/customization-homepage',
                    'Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/drop-customization',
                    'Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/time-customization',
                    'Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/usage-customization',
                    'Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/sale-customization',
                  ],
                },
                'Concepts/KeypomProtocol/GithubReadme/password-protect',
                {
                  type: 'category',
                  label: 'Overhead Items',
                  // link: {
                  //   type: 'concepts/Linkdrops and Access Keys/linkdrop-welcome',
                  // },
                  collapsed: true,
                  items: [
                    'Concepts/KeypomProtocol/GithubReadme/costs',
                    'Concepts/KeypomProtocol/GithubReadme/querying',
                    'Concepts/KeypomProtocol/GithubReadme/testing',
                    'Concepts/KeypomProtocol/GithubReadme/contribute',
                    'Concepts/KeypomProtocol/GithubReadme/licenses',
                  ],
                  },
                    
                    
              ],
            },
            
      ],
  Tutorials: [
    "Tutorials/welcome",
   
    {
      type: 'category',
      label: 'Basics',
      collapsed: false,
      items: [
            'Tutorials/Basics/getting-started',
            'Tutorials/Basics/simple-drops',
            'Tutorials/Basics/nft-drops',
            'Tutorials/Basics/ft-drops',
            'Tutorials/Basics/fc-drops',
                    
      ],
    },
    {
      type: 'category',
      label: 'Advanced',
      collapsed: false,
      items: [
            {
              type: 'category',
              label: 'Ticketing',
              // link: {
              //   type: 'concepts/Linkdrops and Access Keys/linkdrop-welcome',
              // },
              collapsed: true,
              items: [
                'Tutorials/Advanced/ticketing/introduction',
                'Tutorials/Advanced/ticketing/architecture',
                'Tutorials/Advanced/ticketing/drop',
                'Tutorials/Advanced/ticketing/drop-test',
                'Tutorials/Advanced/ticketing/react-outline',
                'Tutorials/Advanced/ticketing/user-code',
                'Tutorials/Advanced/ticketing/scanner-code',
                'Tutorials/Advanced/ticketing/final',
                'Tutorials/Advanced/ticketing/analytics',
                'Tutorials/Advanced/ticketing/bos-tool',
              ],
            },
            // {
            //   type: 'category',
            //   label: 'Progressive Onboarding',
            //   // link: {
            //   //   type: 'concepts/Linkdrops and Access Keys/linkdrop-welcome',
            //   // },
            //   collapsed: true,
            //   items: [
            //     'Tutorials/Advanced/customized-onboarding/introduction',
            //   ],
            // },
            {
              type: 'category',
              label: 'DAO Auto-Registration',
              // link: {
              //   type: 'concepts/Linkdrops and Access Keys/linkdrop-welcome',
              // },
              collapsed: true,
              items: [
                'Tutorials/Advanced/daos/introduction',
                'Tutorials/Advanced/daos/architecture',
                'Tutorials/Advanced/daos/drop',
                'Tutorials/Advanced/daos/daobot',
                'Tutorials/Advanced/daos/security',
                'Tutorials/Advanced/daos/final',
              ],
            },
            {
              type: 'category',
              label: 'Recurring Payments',
              // link: {
              //   type: 'concepts/Linkdrops and Access Keys/linkdrop-welcome',
              // },
              collapsed: true,
              items: [
                'Tutorials/Advanced/subscriptions/introduction',
              ],
            },
            

      ],
    },
    {
      type: 'category',
      label: 'BOS',
      collapsed: false,
      items: [
            'Tutorials/BOS/welcome',
      ],
    },
    'Tutorials/Advanced/homepage',

  ],
  TrialAccounts: [
    "TrialAccounts/introduction",
    {
      type: 'category',
      label: 'Creating Trial Experiences',
      collapsed: false,
      items: [
          'TrialAccounts/Creation/getting-started',
          'TrialAccounts/Creation/understanding-trial-accounts',
          'TrialAccounts/Creation/drop-creation',
          'TrialAccounts/Creation/integration'
      ],
    },
    "TrialAccounts/offboarding",
  ],
  Cookbook: [
    "Cookbook/welcome",,
    {
      type: 'category',
      label: 'Drops',
      collapsed: false,
      items: [
            "Cookbook/drops/NEAR",
            "Cookbook/drops/nft",
            "Cookbook/drops/ft",
            "Cookbook/drops/fc",
            "Cookbook/drops/trial",
            {
              type: 'category',
              label: 'Customizations',
              collapsed: true,
              items: [
                    "Cookbook/drops/customizations/password",
                    "Cookbook/drops/customizations/dropConfig",
                    "Cookbook/drops/customizations/timeConfig",
                    "Cookbook/drops/customizations/saleConfig",
                    "Cookbook/drops/customizations/usageConfig",
              ],
            },
      ],
    },
    "Cookbook/keys",
    "Cookbook/balances",
            
  ],

  // Drops
  //   NEAR
  //   Fungible Tokens -> 1
  //   nft - > 1
  //   function call drop -> customized use cases, links out to simples use case
  //   Customizations
  //       -> Time Based
  //       -> Blah Blah
  //       -> Sales

    // {
    //   type: 'category',
    //   label: 'Others',
    //   collapsed: true,
    //   items: [
    //         'Tutorials/Misc/sign-txn',
                    
            
    //   ],
    // },
  
  // KeypomV2: [
  //   "KeypomV2/welcome"
  // ],
  TypeDocSDK: [
    {
      type: 'autogenerated',
      dirName: 'keypom-sdk', // 'api' is the 'out' directory
    },
  ],
};
module.exports = sidebars;

'''
'''--- src/components/HomepageFeatures.js ---
import React from 'react';
import clsx from 'clsx';
import styles from './HomepageFeatures.module.css';

const FeatureList = [
  {
    title: 'Easy to Use',
    Svg: require('../../static/img/undraw_docusaurus_mountain.svg').default,
    description: (
      <>
        Docusaurus was designed from the ground up to be easily installed and
        used to get your website up and running quickly.
      </>
    ),
  },
  {
    title: 'Focus on What Matters',
    Svg: require('../../static/img/undraw_docusaurus_tree.svg').default,
    description: (
      <>
        Docusaurus lets you focus on your docs, and we&apos;ll do the chores. Go
        ahead and move your docs into the <code>docs</code> directory.
      </>
    ),
  },
  {
    title: 'Powered by React',
    Svg: require('../../static/img/undraw_docusaurus_react.svg').default,
    description: (
      <>
        Extend or customize your website layout by reusing React. Docusaurus can
        be extended while reusing the same header and footer.
      </>
    ),
  },
];

function Feature({Svg, title, description}) {
  return (
    <div className={clsx('col col--4')}>
      <div className="text--center">
        <Svg className={styles.featureSvg} alt={title} />
      </div>
      <div className="text--center padding-horiz--md">
        <h3>{title}</h3>
        <p>{description}</p>
      </div>
    </div>
  );
}

export default function HomepageFeatures() {
  return (
    <section className={styles.features}>
      <div className="container">
        <div className="row">
          {FeatureList.map((props, idx) => (
            <Feature key={idx} {...props} />
          ))}
        </div>
      </div>
    </section>
  );
}

'''
'''--- src/components/HomepageFeatures.module.css ---
.features {
  display: flex;
  align-items: center;
  padding: 2rem 0;
  width: 100%;
}

.featureSvg {
  height: 200px;
  width: 200px;
}

'''
'''--- src/components/featurelist.js ---
import React from "react";

export function FeatureList({ children }) {
  return <>
    <div class="container">
      <div class="row">
        {children}
      </div>
    </div>
  </>
}

export function Column({ title, children, size = 4 }) {
  return <>
    <div class={`col col--${size}`}>
    {/* <div class={`col`}> */}
    {/* <div class={`col--6`}> */}
      <h3>{title}</h3>
      {children}
    </div>
  </>
}

export function Feature({ image, title, subtitle, url }) {
  return <>
    <h4>  </h4>
    <a class="avatar" href={url}>
      <img
        class="avatar__photo"
        src={require(`../../static/img/${image}`).default} />
      <div class="avatar__intro">
        <div class="avatar__name">{title}</div>
        <small class="avatar__subtitle">{subtitle}</small>
      </div>
    </a>
  </>
}
'''
'''--- src/css/custom.css ---
/**
 * Any CSS included here will be global. The classic template
 * bundles Infima by default. Infima is a CSS framework designed to
 * work well for content-centric websites.
 */

/* You can override the default Infima variables here. */
:root {
  /* --ifm-background-color: radial-gradient(68.05% 67.19% at 50.39% 34.49%, #FFFFFF 56%, #CAF3FF 100%); */
  /* --ifm-background-color: #1b1b1d; */
  --ifm-color-primary: #f990d4;
  --ifm-color-primary-dark: rgb(33, 175, 144);
  --ifm-color-primary-darker: rgb(31, 165, 136);
  --ifm-color-primary-darkest: rgb(26, 136, 112);
  --ifm-color-primary-light: rgb(70, 203, 174);
  --ifm-color-primary-lighter: rgb(102, 212, 189);
  --ifm-color-primary-lightest: rgb(146, 224, 208);
  --ifm-code-font-size: 95%;
  /* --ifm-font-family-base: 'Archia'; */

}

/* [data-theme='light'] .hero {
  background-color: rgba(66, 153, 225, 0.6);
} */

.docusaurus-highlight-code-line {
  background-color: rgba(0, 0, 0, 0.1);
  display: block;
  margin: 0 calc(-1 * var(--ifm-pre-padding));
  padding: 0 var(--ifm-pre-padding);
}

.pink-main-header-text {
  font-weight: bold;
  background-image: linear-gradient(97.7deg, rgb(251, 80, 191) 30%, rgb(0, 174, 223) 80%);
  background-clip: text;
  -webkit-text-fill-color: transparent;
  font-size: min(7vw, 4rem);
}

.pink-h1-text {
  font-weight: bold;
  color: #f990d4;
  font-size: min(4vw, 2rem);
}
.white-main-subheader-text {
  font-weight: bold;
  font-size: min(4vw, 2rem);
}

[data-theme=dark] .avatar__subtitle{
  color: #ffffff;
}

[data-theme=light] .avatar__subtitle{
  color: #000000ff;
}

[data-theme=dark] .neutraltext{
  margin-top: 0 !important;
  color: #ffffff;
}

[data-theme=light] .neutraltext{
  margin-top: 0 !important;
  color: #000000ff;
}

.small-bottom-padding{
  margin-bottom: 5px !important;
  background-image: linear-gradient(90deg, #f990d4, #87daf4);
  background-clip: text;
  -webkit-text-fill-color: transparent;
}
.small-bottom-padding-only{
  margin-bottom: 5px !important;
}

.avatar__name{
  background-image: linear-gradient(90deg, #f990d4, #87daf4);
  background-clip: text;
  -webkit-text-fill-color: transparent;
}

.card { 
  margin-bottom: 20px !important;
}

html[data-theme='dark'] .docusaurus-highlight-code-line {
  background-color: rgba(0, 0, 0, 0.3);
}

html[data-theme=light] {
  background: radial-gradient(circle at center, #ffffff 70%,  #CAF3FF 100%);
  /* background: linear-gradient(90deg, #CAF3FF 1%, #ffffff 20%,#ffffff 80%, #CAF3FF 99%); */
}

'''
'''--- src/pages/index.md ---
---
id: index
hide_table_of_contents: true
---
import {FeatureList, Column, Feature} from "../components/featurelist.js"

<center>
  <p class="pink-main-header-text"> Keypom Developer Docs </p>
</center>
<center>
  <p class="white-main-subheader-text" > Create Instant Web3 Experiences </p>
</center>
<br></br>
<br></br>
<br></br>

<div class="container">
  <div class="row">
    <div class="col col--6">
      <a href="/docs/next/exec-summary">
        <div class="card mb-3">
          <div class="card__image">
            <img src={require("/static/img/newMoonCrop2.png").default} alt="Learn" />
            <div class="card__body">
              <h3 class="small-bottom-padding-only">Understanding Keypom</h3>
                <p class="neutraltext">Learn about the power and features of Keypom</p>
            </div>
          </div>
        </div>
      </a>
    </div>
    <div class="col col--6">
      <a href="/docs/next/Tutorials/welcome">
        <div class="card mb-3">
          <div class="card__image">
            <img src={require("/static/img/docs/homepage-banner-2.png").default} alt="Examples and Tutorials" />
            <div class="card__body">
              <h3 class="small-bottom-padding-only">Build with Keypom</h3>
                <p class="neutraltext">Learn how to use Keypom for your Web3 needs.</p>
            </div>
          </div>
        </div>
      </a>
    </div>
  </div>
</div>

<hr class="subsection" />

<center><h1 class="text-center big-title" > Browse the Docs By Topic </h1></center>

<FeatureList width = "100%">

  <Column title="Understanding Keypom" size ="3">
    <Feature url="../../docs/next/Concepts/KeypomProtocol/overview" title="What is Keypom?" subtitle="Learn the Basics of Keypom" image="docs/icons/key.png" />
    <Feature url="../../docs/next/Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/introduction" title="Types of Drops" subtitle="Find out what you can send using Keypom" image="docs/icons/tutorials.png" />
    <Feature url="../../docs/next/Concepts/KeypomProtocol/GithubReadme/TypesOfDrops/drop-customization" title="Customize your Drops" subtitle="Learn to configure your Keypom drop" image="docs/icons/update.png" />
  </Column>

  <Column title="Use Cases" size="3">
    <Feature url="../../docs/next/Tutorials/Advanced/ticketing/introduction" title="Ticketing" subtitle="Power your next event with Keypom" image="docs/icons/nft.png" />
    <Feature url="../../docs/next/Tutorials/Advanced/daos/introduction" title="DAO Onboarding" subtitle="Level up your DAO with seamless onboarding" image="docs/icons/dao.png" />
    <Feature url="../../docs/next/TrialAccounts/introduction" title="Trial Accounts" subtitle="Web2 Onboarding in Web3" image="docs/icons/trial-accounts.png" />
    <Feature url="../../docs/next/Tutorials/BOS/welcome" title="Keypom on BOS" subtitle="Use Keypom in your BOS componets" image="docs/icons/bos.png" />

  </Column>

  <Column title="Beginner Tutorials" size="3">
    <Feature url="../../docs/next/Tutorials/Basics/simple-drops" title="Simple Drop" subtitle="Send $NEAR" image="docs/icons/random.png" />
    <Feature url="../../docs/next/Tutorials/Basics/nft-drops" title="Non-Fungible Token Drop" subtitle="Send Non-Fungible Tokens" image="docs/icons/near_place.png" />
    <Feature url="../../docs/next/Tutorials/Basics/ft-drops" title="Fungible Token Drop" subtitle="Send Fungible Tokens" image="docs/icons/ft.png" />
    <Feature url="../../docs/next/Tutorials/Basics/fc-drops" title="Function Call Drop" subtitle="Keypom's most customizable drop" image="docs/icons/oracle.png" />
  </Column>

  <Column title="Developer Documentation" size="3">
    <Feature url="docs/next/keypom-sdk/Core/welcome" title="Keypom TypeDocs" subtitle="Spin-up your first dApp" image="docs/icons/typedocs.png" />
    <Feature url="https://github.com/keypom/keypom-docs-examples" title="Tutorial Source Code" subtitle="Begin building with examples" image="docs/icons/code.png" />
    <Feature url="https://github.com/keypom/keypom-js" title="JavaScript SDK Repo" subtitle="Keypom SDK behind the scenes" image="moon.svg" />
    <Feature url="https://docs.near.org/tools/near-api-js/quick-reference" title="NEAR-API-JS" subtitle="Interact with NEAR using JavaScript" image="docs/icons/near-api-js.png" />
  </Column>

</FeatureList>

---

<center><h1 class="text-center big-title" > Source Code </h1></center>
<center><h4 class="text-center big-title" > Explore Keypom's source code in the Github Repos. </h4></center>

<div class="container">
  <div class="row">
    <div class="col">
      <a href="https://github.com/keypom/keypom">
        <div class="card h-100">
          <div class="card__body">
            <h3 class="small-bottom-padding-only">Keypom Protocol</h3>
              <p class="neutraltext">Discover the inner workings of the Keypom Protocol.</p>
          </div>
        </div>
      </a>
    </div>
    <div class="col">
      <a href="https://github.com/keypom/keypom-js">
        <div class="card h-100">
          <div class="card__body">
            <h3 class="small-bottom-padding-only">Keypom JavaScript SDK</h3>
              <p class="neutraltext">See how the SDK interacts with NEAR.</p>
          </div>
        </div>
      </a>
    </div>
  </div>
   <div class="row">
    <div class="col">
      <a href="https://github.com/keypom/keypom-docs-examples">
        <div class="card h-100">
          <div class="card__body">
            <h3 class="small-bottom-padding-only">Tutorial Examples</h3>
              <p class="neutraltext">Explore the code used in the tutorials</p>
          </div>
        </div>
      </a>
    </div>
    <div class="col">
      <a href="https://github.com/keypom/keypom-docs">
        <div class="card h-100">
          <div class="card__body">
            <h3 class="small-bottom-padding-only">Keypom Developer Documentation</h3>
              <p class="neutraltext">The code behind the docs.</p>
          </div>
        </div>
      </a>
    </div>
  </div>
</div>

<hr class="subsection" />

<ContactUs />
'''
'''--- src/pages/index.module.css ---
/**
 * CSS files with the .module.css suffix will be treated as CSS modules
 * and scoped locally.
 */

.heroBanner {
  padding: 4rem 0;
  text-align: center;
  position: relative;
  overflow: hidden;
}

@media screen and (max-width: 966px) {
  .heroBanner {
    padding: 2rem;
  }
}

.buttons {
  display: flex;
  align-items: center;
  justify-content: center;
}

'''
'''--- src/pages/markdown-page.md ---
---
title: Markdown page example
---

# Markdown page example

You don't need React to write simple standalone pages.

'''
'''--- src/theme/ReactLiveScope/index.js ---
import React from 'react';
//import ReactLiveScope from '@theme-original/ReactLiveScope';
import isWds from 'is-wds-npm-package';
//import * as kpjs from "keypom-js";
//const isWds = require('@web-dev-simplified/is-wds');
//        ...isWds,

const ButtonExample = (props) => (
  <button
    {...props}
    style={{
      backgroundColor: 'white',
      color: 'black',
      border: 'solid red',
      borderRadius: 20,
      padding: 10,
      cursor: 'pointer',
      ...props.style,
    }}
  />
);

function myFunc(){
  return isWds("abc");
}

function myFunc2(num1, num2){
  return num1 * num2;
}

// Add react-live imports you need here
const ReactLiveScope = {
  React,
  ...React,
  ButtonExample,
  myFunc,
  myFunc2
};

export default ReactLiveScope;
'''
'''--- static/img/docs/advanced-tutorials/dao-auto-reg/daobot-flow.svg ---
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="719px" height="181px" viewBox="-0.5 -0.5 719 181" content="&lt;mxfile&gt;&lt;diagram id=&quot;BF2fFZ__Rzvh8hYSS4MP&quot; name=&quot;Page-1&quot;&gt;1VjbUtswEP2aPML4TnjMhdBOy5QZHkofFVuxNciWK8sk4eu7siXfZEqapJTmAawjayXt2T27ycRdpLtbjvLkjkWYThwr2k3c5cRxgqkHfyWwrwHPmtZAzElUQ3YLPJAXrEBLoSWJcNF7UTBGBcn7YMiyDIeihyHO2bb/2obR/q45irEBPISImuh3EomkRqe+1eKfMIkTvbNtqZk1Cp9izspM7Tdx3MViBZ96OkXalnq/SFDEth3IvZm4C86YqJ/S3QJT6Vrttnrd6pXZ5twcZ+KQBU694BnREusTBxSWzjcMLEgPU8armeBnKU81hytZ1acLBbH8f89ZkQMf5BlP5Ma1pTXX83c4XWOucThVvUk9qRwi9poE8E0uH8uUzkIhTzF/xlwQoOkrWmN6zwoiCMvglTUTgqWdF2aUxHJCsBzQRKQUBjY8slJQkuFFEzgWgIXg7AkwfVV9QX2orj+Vi+VGeNeBlH9vMUux4Ht4Rc1OFdUqFWwdRNs2sFwFJZ2YChSGVCjHjeGWTnhQjI6zG4ywO3AyzqKZTBgYhRQVBQn7/jrCNTjqJZfpmM7N/ZGba4xjiqpQ6mX3iDvUDveMVCGrWXEGjp8OPFqwkodYrermyMBQQ89rhgTiMRaGoYqd5toHEXZlELagiKRS/sBD3MyoFZi0vuC9ySuQUGVJn06k8iIE0jAfSZiURJG0Mee4IC9oXdmTdOfyetWF/fnEXwJCpfk54xHmh8WHDsdh6jQ6rrbraeFYSlmXvudcnyVKLly/v4RtNgU+lUfbNoj8XMh6yEGPoB5BfZA6aCGT0RCKR0iksbRWS3dlkMsTlq5LOPB8mxCBH3IUypkt1OKTs/dwYfPsQV54prLZY9I2zJ9jpM02K9cS5qpkyJnMGAhqOlqFlrNvslLLyvVRXWtIzru61j29bMDV+f5RSUc1+CEHl74eLnfdyeVej3ZEPGob8NxZBaN2kRzoNUcwUUt/P5JqFe/n7wcpZa7XD4cmPP60lLnX71bKbO/tKKoaZRwpvt9IuA2hVJOcsUzWqAgVSbP87ybkUOvskS7OG4mApt07KSP9EV8e36Y3Elkr4ZyJQ1ty8Jb4nQwqXkaoOrzxGAuDNlCsIe1nINfV/t33RfQtsR1m4VHUnqFH/xei+bEEMvD76Xl1pD4Gwfvp49QgflYKdsFxTApRdYdm65LhbdsY/g8tv322nv/CunS8swSLLvjn7fjNr26Vug45opTkxWsy917tpRHmY+2lc572Eobtz1m1Y9ufDN2bXw==&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(204, 255, 255);"><defs/><g><ellipse cx="33" cy="77.5" rx="7.5" ry="7.5" fill="rgb(255, 255, 255)" stroke="#000000" pointer-events="all"/><path d="M 33 85 L 33 110 M 33 90 L 18 90 M 33 90 L 48 90 M 33 110 L 18 130 M 33 110 L 48 130" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 137px; margin-left: 33px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: nowrap;"><font color="#000000">Prospective <br />Member</font></div></div></div></foreignObject><text x="33" y="149" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Prosp...</text></switch></g><path d="M 58 100 L 161.63 100" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 166.88 100 L 159.88 103.5 L 161.63 100 L 159.88 96.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 100px; margin-left: 108px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); border-color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); border: 1px solid rgb(0, 0, 0); white-space: nowrap;">Claim their<br />FC Key</div></div></div></foreignObject><text x="108" y="104" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">Claim their...</text></switch></g><path d="M 413 60 L 478 100 L 413 140 L 348 100 Z" fill="rgb(255, 255, 255)" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 128px; height: 1px; padding-top: 100px; margin-left: 349px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Is drop funder a<br />council member?</div></div></div></foreignObject><text x="413" y="104" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Is drop funder a...</text></switch></g><path d="M 233 60 L 298 100 L 233 140 L 168 100 Z" fill="rgb(255, 255, 255)" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 128px; height: 1px; padding-top: 100px; margin-left: 169px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Did Keypom call <br />DAO bot?</div></div></div></foreignObject><text x="233" y="104" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Did Keypom call...</text></switch></g><path d="M 298 100 L 341.63 100" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 346.88 100 L 339.88 103.5 L 341.63 100 L 339.88 96.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="148" y="30" width="340" height="150" rx="22.5" ry="22.5" fill="none" stroke="#000000" stroke-dasharray="3 3" pointer-events="all"/><rect x="253" y="0" width="130" height="30" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 128px; height: 1px; padding-top: 15px; margin-left: 254px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><font color="#000000">Keypom DAO Bot</font></div></div></div></foreignObject><text x="318" y="19" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Keypom DAO Bot</text></switch></g><path d="M 478 100 L 591.63 100" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 596.88 100 L 589.88 103.5 L 591.63 100 L 589.88 96.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 100px; margin-left: 536px;"><div data-drawio-colors="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); border-color: #000000; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); border: 1px solid rgb(0, 0, 0); white-space: nowrap;">Auto-register <br />new member</div></div></div></foreignObject><text x="536" y="104" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="11px" text-anchor="middle">Auto-register...</text></switch></g><ellipse cx="658" cy="100" rx="60" ry="40" fill="rgb(255, 255, 255)" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 100px; margin-left: 599px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">DAO</div></div></div></foreignObject><text x="658" y="104" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">DAO</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>
'''
'''--- static/img/logo.svg ---
<svg width="200" height="200" viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg"><g fill="none" fill-rule="evenodd"><path fill="#FFF" d="M99 52h84v34H99z"/><path d="M23 163c-7.398 0-13.843-4.027-17.303-10A19.886 19.886 0 0 0 3 163c0 11.046 8.954 20 20 20h20v-20H23z" fill="#3ECC5F"/><path d="M112.98 57.376L183 53V43c0-11.046-8.954-20-20-20H73l-2.5-4.33c-1.112-1.925-3.889-1.925-5 0L63 23l-2.5-4.33c-1.111-1.925-3.889-1.925-5 0L53 23l-2.5-4.33c-1.111-1.925-3.889-1.925-5 0L43 23c-.022 0-.042.003-.065.003l-4.142-4.141c-1.57-1.571-4.252-.853-4.828 1.294l-1.369 5.104-5.192-1.392c-2.148-.575-4.111 1.389-3.535 3.536l1.39 5.193-5.102 1.367c-2.148.576-2.867 3.259-1.296 4.83l4.142 4.142c0 .021-.003.042-.003.064l-4.33 2.5c-1.925 1.111-1.925 3.889 0 5L23 53l-4.33 2.5c-1.925 1.111-1.925 3.889 0 5L23 63l-4.33 2.5c-1.925 1.111-1.925 3.889 0 5L23 73l-4.33 2.5c-1.925 1.111-1.925 3.889 0 5L23 83l-4.33 2.5c-1.925 1.111-1.925 3.889 0 5L23 93l-4.33 2.5c-1.925 1.111-1.925 3.889 0 5L23 103l-4.33 2.5c-1.925 1.111-1.925 3.889 0 5L23 113l-4.33 2.5c-1.925 1.111-1.925 3.889 0 5L23 123l-4.33 2.5c-1.925 1.111-1.925 3.889 0 5L23 133l-4.33 2.5c-1.925 1.111-1.925 3.889 0 5L23 143l-4.33 2.5c-1.925 1.111-1.925 3.889 0 5L23 153l-4.33 2.5c-1.925 1.111-1.925 3.889 0 5L23 163c0 11.046 8.954 20 20 20h120c11.046 0 20-8.954 20-20V83l-70.02-4.376A10.645 10.645 0 0 1 103 68c0-5.621 4.37-10.273 9.98-10.624" fill="#3ECC5F"/><path fill="#3ECC5F" d="M143 183h30v-40h-30z"/><path d="M193 158c-.219 0-.428.037-.639.064-.038-.15-.074-.301-.116-.451A5 5 0 0 0 190.32 148a4.96 4.96 0 0 0-3.016 1.036 26.531 26.531 0 0 0-.335-.336 4.955 4.955 0 0 0 1.011-2.987 5 5 0 0 0-9.599-1.959c-.148-.042-.297-.077-.445-.115.027-.211.064-.42.064-.639a5 5 0 0 0-5-5 5 5 0 0 0-5 5c0 .219.037.428.064.639-.148.038-.297.073-.445.115a4.998 4.998 0 0 0-9.599 1.959c0 1.125.384 2.151 1.011 2.987-3.717 3.632-6.031 8.693-6.031 14.3 0 11.046 8.954 20 20 20 9.339 0 17.16-6.41 19.361-15.064.211.027.42.064.639.064a5 5 0 0 0 5-5 5 5 0 0 0-5-5" fill="#44D860"/><path fill="#3ECC5F" d="M153 123h30v-20h-30z"/><path d="M193 115.5a2.5 2.5 0 1 0 0-5c-.109 0-.214.019-.319.032-.02-.075-.037-.15-.058-.225a2.501 2.501 0 0 0-.963-4.807c-.569 0-1.088.197-1.508.518a6.653 6.653 0 0 0-.168-.168c.314-.417.506-.931.506-1.494a2.5 2.5 0 0 0-4.8-.979A9.987 9.987 0 0 0 183 103c-5.522 0-10 4.478-10 10s4.478 10 10 10c.934 0 1.833-.138 2.69-.377a2.5 2.5 0 0 0 4.8-.979c0-.563-.192-1.077-.506-1.494.057-.055.113-.111.168-.168.42.321.939.518 1.508.518a2.5 2.5 0 0 0 .963-4.807c.021-.074.038-.15.058-.225.105.013.21.032.319.032" fill="#44D860"/><path d="M63 55.5a2.5 2.5 0 0 1-2.5-2.5c0-4.136-3.364-7.5-7.5-7.5s-7.5 3.364-7.5 7.5a2.5 2.5 0 1 1-5 0c0-6.893 5.607-12.5 12.5-12.5S65.5 46.107 65.5 53a2.5 2.5 0 0 1-2.5 2.5" fill="#000"/><path d="M103 183h60c11.046 0 20-8.954 20-20V93h-60c-11.046 0-20 8.954-20 20v70z" fill="#FFFF50"/><path d="M168.02 124h-50.04a1 1 0 1 1 0-2h50.04a1 1 0 1 1 0 2m0 20h-50.04a1 1 0 1 1 0-2h50.04a1 1 0 1 1 0 2m0 20h-50.04a1 1 0 1 1 0-2h50.04a1 1 0 1 1 0 2m0-49.814h-50.04a1 1 0 1 1 0-2h50.04a1 1 0 1 1 0 2m0 19.814h-50.04a1 1 0 1 1 0-2h50.04a1 1 0 1 1 0 2m0 20h-50.04a1 1 0 1 1 0-2h50.04a1 1 0 1 1 0 2M183 61.611c-.012 0-.022-.006-.034-.005-3.09.105-4.552 3.196-5.842 5.923-1.346 2.85-2.387 4.703-4.093 4.647-1.889-.068-2.969-2.202-4.113-4.46-1.314-2.594-2.814-5.536-5.963-5.426-3.046.104-4.513 2.794-5.807 5.167-1.377 2.528-2.314 4.065-4.121 3.994-1.927-.07-2.951-1.805-4.136-3.813-1.321-2.236-2.848-4.75-5.936-4.664-2.994.103-4.465 2.385-5.763 4.4-1.373 2.13-2.335 3.428-4.165 3.351-1.973-.07-2.992-1.51-4.171-3.177-1.324-1.873-2.816-3.993-5.895-3.89-2.928.1-4.399 1.97-5.696 3.618-1.232 1.564-2.194 2.802-4.229 2.724a1 1 0 0 0-.072 2c3.017.101 4.545-1.8 5.872-3.487 1.177-1.496 2.193-2.787 4.193-2.855 1.926-.082 2.829 1.115 4.195 3.045 1.297 1.834 2.769 3.914 5.731 4.021 3.103.104 4.596-2.215 5.918-4.267 1.182-1.834 2.202-3.417 4.15-3.484 1.793-.067 2.769 1.35 4.145 3.681 1.297 2.197 2.766 4.686 5.787 4.796 3.125.108 4.634-2.62 5.949-5.035 1.139-2.088 2.214-4.06 4.119-4.126 1.793-.042 2.728 1.595 4.111 4.33 1.292 2.553 2.757 5.445 5.825 5.556l.169.003c3.064 0 4.518-3.075 5.805-5.794 1.139-2.41 2.217-4.68 4.067-4.773v-2z" fill="#000"/><path fill="#3ECC5F" d="M83 183h40v-40H83z"/><path d="M143 158c-.219 0-.428.037-.639.064-.038-.15-.074-.301-.116-.451A5 5 0 0 0 140.32 148a4.96 4.96 0 0 0-3.016 1.036 26.531 26.531 0 0 0-.335-.336 4.955 4.955 0 0 0 1.011-2.987 5 5 0 0 0-9.599-1.959c-.148-.042-.297-.077-.445-.115.027-.211.064-.42.064-.639a5 5 0 0 0-5-5 5 5 0 0 0-5 5c0 .219.037.428.064.639-.148.038-.297.073-.445.115a4.998 4.998 0 0 0-9.599 1.959c0 1.125.384 2.151 1.011 2.987-3.717 3.632-6.031 8.693-6.031 14.3 0 11.046 8.954 20 20 20 9.339 0 17.16-6.41 19.361-15.064.211.027.42.064.639.064a5 5 0 0 0 5-5 5 5 0 0 0-5-5" fill="#44D860"/><path fill="#3ECC5F" d="M83 123h40v-20H83z"/><path d="M133 115.5a2.5 2.5 0 1 0 0-5c-.109 0-.214.019-.319.032-.02-.075-.037-.15-.058-.225a2.501 2.501 0 0 0-.963-4.807c-.569 0-1.088.197-1.508.518a6.653 6.653 0 0 0-.168-.168c.314-.417.506-.931.506-1.494a2.5 2.5 0 0 0-4.8-.979A9.987 9.987 0 0 0 123 103c-5.522 0-10 4.478-10 10s4.478 10 10 10c.934 0 1.833-.138 2.69-.377a2.5 2.5 0 0 0 4.8-.979c0-.563-.192-1.077-.506-1.494.057-.055.113-.111.168-.168.42.321.939.518 1.508.518a2.5 2.5 0 0 0 .963-4.807c.021-.074.038-.15.058-.225.105.013.21.032.319.032" fill="#44D860"/><path d="M143 41.75c-.16 0-.33-.02-.49-.05a2.52 2.52 0 0 1-.47-.14c-.15-.06-.29-.14-.431-.23-.13-.09-.259-.2-.38-.31-.109-.12-.219-.24-.309-.38s-.17-.28-.231-.43a2.619 2.619 0 0 1-.189-.96c0-.16.02-.33.05-.49.03-.16.08-.31.139-.47.061-.15.141-.29.231-.43.09-.13.2-.26.309-.38.121-.11.25-.22.38-.31.141-.09.281-.17.431-.23.149-.06.31-.11.47-.14.32-.07.65-.07.98 0 .159.03.32.08.47.14.149.06.29.14.43.23.13.09.259.2.38.31.11.12.22.25.31.38.09.14.17.28.23.43.06.16.11.31.14.47.029.16.05.33.05.49 0 .66-.271 1.31-.73 1.77-.121.11-.25.22-.38.31-.14.09-.281.17-.43.23a2.565 2.565 0 0 1-.96.19m20-1.25c-.66 0-1.3-.27-1.771-.73a3.802 3.802 0 0 1-.309-.38c-.09-.14-.17-.28-.231-.43a2.619 2.619 0 0 1-.189-.96c0-.66.27-1.3.729-1.77.121-.11.25-.22.38-.31.141-.09.281-.17.431-.23.149-.06.31-.11.47-.14.32-.07.66-.07.98 0 .159.03.32.08.47.14.149.06.29.14.43.23.13.09.259.2.38.31.459.47.73 1.11.73 1.77 0 .16-.021.33-.05.49-.03.16-.08.32-.14.47-.07.15-.14.29-.23.43-.09.13-.2.26-.31.38-.121.11-.25.22-.38.31-.14.09-.281.17-.43.23a2.565 2.565 0 0 1-.96.19" fill="#000"/></g></svg>
'''
'''--- static/img/moon.svg ---
<svg width="285" height="280" viewBox="0 0 285 280" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_528_656)">
<path d="M142.544 275.23C147.54 275.336 152.434 273.8 156.473 270.857C159.29 268.809 162.537 267.431 165.967 266.827C169.396 266.223 172.919 266.408 176.266 267.37C180.919 268.707 185.877 268.536 190.427 266.88C194.977 265.225 198.885 262.17 201.591 258.155C203.537 255.266 206.116 252.859 209.133 251.117C212.149 249.375 215.523 248.344 218.998 248.103C223.827 247.77 228.427 245.914 232.136 242.802C235.845 239.69 238.471 235.483 239.638 230.784C240.474 227.409 242.068 224.269 244.299 221.602C246.531 218.935 249.34 216.812 252.515 215.394C256.936 213.435 260.624 210.126 263.049 205.942C265.474 201.758 266.513 196.914 266.016 192.104C265.649 188.64 266.077 185.138 267.269 181.865C268.461 178.592 270.384 175.634 272.892 173.217C276.373 169.855 278.701 165.476 279.54 160.71C280.38 155.944 279.69 151.034 277.568 146.684C276.039 143.555 275.245 140.119 275.245 136.636C275.245 133.154 276.039 129.718 277.568 126.589C279.69 122.239 280.38 117.329 279.54 112.563C278.701 107.796 276.373 103.418 272.892 100.055L270.944 98.195C268.085 95.4326 266.257 91.7757 265.762 87.831C265.762 87.831 259.538 32.3097 255.048 17.1728C251.853 6.37046 240.349 3.53595 229.673 7.13023C225.719 8.41598 216.475 12.8772 210.757 15.5851C196.146 22.608 186.532 29.1634 179.198 22.9295C175.703 19.5325 171.229 17.3202 166.408 16.6052C161.587 15.8903 156.663 16.709 152.333 18.9456C149.266 20.5119 145.889 21.3738 142.446 21.4684C139.052 21.3649 135.724 20.5029 132.706 18.9456C128.377 16.7083 123.455 15.8893 118.636 16.6042C113.816 17.3192 109.343 19.532 105.851 22.9295C98.4676 29.1634 88.8731 22.6178 74.2622 15.5851C68.5543 12.8772 59.2715 8.41598 55.3168 7.09126C44.6021 3.50672 33.1277 6.3315 29.9328 17.1338C25.4521 32.2902 19.2182 87.7921 19.2182 87.7921C18.7282 91.7381 16.899 95.3965 14.0362 98.1561L12.088 100.017C8.60317 103.377 6.27326 107.755 5.43318 112.522C4.5931 117.29 5.28609 122.201 7.41256 126.55C8.94104 129.679 9.73552 133.115 9.73552 136.597C9.73552 140.08 8.94104 143.516 7.41256 146.645C5.28609 150.994 4.5931 155.905 5.43318 160.672C6.27326 165.44 8.60317 169.818 12.088 173.178C14.6036 175.599 16.5326 178.562 17.7278 181.843C18.9231 185.123 19.3529 188.633 18.9844 192.104C18.4742 196.916 19.5022 201.766 21.9208 205.958C24.3395 210.149 28.0242 213.466 32.4459 215.433C35.6288 216.846 38.4475 218.967 40.6873 221.634C42.9272 224.301 44.5293 227.444 45.3717 230.823C46.5367 235.521 49.1614 239.728 52.8684 242.84C56.5754 245.952 61.1737 247.808 66.0022 248.142C69.477 248.383 72.851 249.414 75.8673 251.156C78.8836 252.898 81.4628 255.305 83.4087 258.194C86.1157 262.208 90.0243 265.262 94.574 266.917C99.1237 268.572 104.081 268.744 108.734 267.409C112.081 266.447 115.604 266.262 119.033 266.866C122.463 267.47 125.71 268.848 128.527 270.896C132.605 273.823 137.525 275.345 142.544 275.23Z" fill="url(#paint0_radial_528_656)"/>
<path d="M143.021 279.769H142.544C136.443 279.872 130.473 277.995 125.527 274.422C123.34 272.819 120.814 271.74 118.144 271.269C115.474 270.798 112.731 270.947 110.127 271.704C104.443 273.35 98.3827 273.146 92.8219 271.122C87.2611 269.098 82.4876 265.358 79.1911 260.444C77.682 258.195 75.6763 256.322 73.3288 254.971C70.9812 253.62 68.3546 252.826 65.6517 252.652C59.7469 252.253 54.1216 249.988 49.5885 246.184C45.0555 242.379 41.8493 237.231 40.4333 231.485C39.7919 228.857 38.5568 226.41 36.8226 224.333C35.0885 222.256 32.9016 220.604 30.4297 219.504C25.0173 217.111 20.5058 213.06 17.5468 207.935C14.5879 202.81 13.3346 196.877 13.9681 190.994C14.2594 188.299 13.9288 185.574 13.0017 183.028C12.0747 180.481 10.5758 178.181 8.62047 176.305C4.35191 172.205 1.4975 166.854 0.469709 161.025C-0.558086 155.196 0.293967 149.191 2.90274 143.878C4.09919 141.446 4.72138 138.772 4.72138 136.062C4.72138 133.351 4.09919 130.677 2.90274 128.245C0.288008 122.937 -0.571961 116.935 0.447034 111.107C1.46603 105.278 4.31124 99.9242 8.57177 95.8182L10.5199 93.9578C12.5419 92.0012 13.8371 89.4143 14.1921 86.6231C14.4356 84.412 20.5137 30.566 25.0723 15.1564C25.8141 12.4824 27.0991 9.99004 28.8471 7.83481C30.5951 5.67959 32.7685 3.90779 35.2318 2.62999C41.3099 -0.535702 49.2193 -0.857142 56.9338 1.72412C60.8885 3.05858 69.0803 6.93533 76.415 10.4907C78.6456 11.5621 80.7593 12.6141 82.7659 13.6271C94.0357 19.2669 99.0229 21.3222 102.364 18.6435C106.631 14.5565 112.064 11.8993 117.91 11.0405C123.755 10.1817 129.723 11.164 134.985 13.8512C137.302 15.0333 139.848 15.6981 142.446 15.7993C145.081 15.7082 147.664 15.0434 150.015 13.8512C155.268 11.1612 161.228 10.1709 167.069 11.0173C172.91 11.8637 178.343 14.5049 182.617 18.5753C185.948 21.254 190.945 19.1987 202.215 13.5589C204.221 12.5849 206.335 11.4939 208.556 10.4225C215.92 6.89637 224.141 3.01961 228.037 1.65593C235.752 -0.925326 243.671 -0.603886 249.749 2.56181C252.216 3.83751 254.393 5.60838 256.144 7.76372C257.896 9.91905 259.184 12.4125 259.928 15.0882C264.486 30.4978 270.555 84.3438 270.808 86.6231C271.171 89.3901 272.462 91.9521 274.471 93.8896L276.419 95.7501C280.687 99.8502 283.542 105.201 284.569 111.03C285.597 116.859 284.745 122.864 282.136 128.177C280.94 130.609 280.318 133.283 280.318 135.993C280.318 138.704 280.94 141.378 282.136 143.81C284.745 149.123 285.597 155.128 284.569 160.956C283.542 166.785 280.687 172.136 276.419 176.237C274.463 178.113 272.965 180.413 272.04 182.96C271.114 185.506 270.786 188.232 271.081 190.925C271.714 196.81 270.459 202.744 267.498 207.869C264.537 212.994 260.024 217.045 254.609 219.436C252.131 220.532 249.936 222.182 248.195 224.259C246.454 226.336 245.213 228.785 244.567 231.417C243.148 237.163 239.939 242.31 235.405 246.115C230.87 249.919 225.244 252.184 219.339 252.583C216.637 252.758 214.012 253.552 211.666 254.903C209.32 256.254 207.316 258.127 205.809 260.376C202.509 265.289 197.733 269.027 192.172 271.05C186.61 273.074 180.549 273.279 174.863 271.636C172.261 270.878 169.52 270.73 166.851 271.201C164.183 271.672 161.658 272.751 159.473 274.354C154.707 277.867 148.942 279.764 143.021 279.769V279.769ZM142.544 269.59H142.651C146.537 269.666 150.341 268.469 153.483 266.181C156.921 263.667 160.89 261.975 165.084 261.236C169.279 260.496 173.587 260.728 177.678 261.915C181.295 262.961 185.15 262.832 188.688 261.545C192.227 260.258 195.265 257.881 197.364 254.756C199.732 251.215 202.882 248.267 206.57 246.137C210.259 244.007 214.387 242.754 218.637 242.473C222.392 242.217 225.969 240.777 228.853 238.36C231.738 235.943 233.781 232.673 234.69 229.021C235.706 224.885 237.658 221.038 240.396 217.775C243.133 214.512 246.583 211.921 250.479 210.202C253.915 208.681 256.78 206.11 258.661 202.858C260.543 199.606 261.344 195.84 260.951 192.104C260.49 187.868 261.009 183.582 262.466 179.578C263.923 175.574 266.281 171.958 269.357 169.009C272.075 166.394 273.891 162.981 274.541 159.265C275.191 155.549 274.641 151.722 272.97 148.34C271.091 144.518 270.114 140.316 270.114 136.057C270.114 131.798 271.091 127.596 272.97 123.774C274.629 120.394 275.171 116.574 274.518 112.866C273.865 109.158 272.051 105.753 269.337 103.143L267.389 101.283C263.708 97.7021 261.355 92.9753 260.717 87.8797C260.649 87.2563 254.483 32.5823 250.177 18.0201C249.817 16.6587 249.176 15.3877 248.296 14.2889C247.415 13.1901 246.314 12.2878 245.064 11.64C241.479 9.77959 236.297 9.69192 231.3 11.3576C227.599 12.6044 218.082 17.2019 212.959 19.6273C210.786 20.6696 208.683 21.7216 206.734 22.6956C194.89 28.6276 184.662 33.7512 175.857 26.2704L175.565 25.9977C172.83 23.365 169.34 21.6544 165.584 21.1059C161.829 20.5573 157.995 21.1984 154.622 22.9391C150.88 24.8461 146.762 25.9006 142.563 26.0269H142.261C138.092 25.8968 134.003 24.8421 130.29 22.9391C126.917 21.1984 123.084 20.5573 119.328 21.1059C115.572 21.6544 112.082 23.365 109.348 25.9977L109.056 26.2704C100.289 33.7512 90.0324 28.6276 78.1878 22.6956C76.2397 21.7216 74.1649 20.6891 71.9928 19.6468C66.879 17.1922 57.3819 12.6238 53.6512 11.377C48.6251 9.69192 43.4723 9.79907 39.8878 11.6595C38.6457 12.313 37.5532 13.2176 36.6795 14.316C35.8059 15.4143 35.1702 16.6824 34.8129 18.0396C30.5076 32.6018 24.3418 87.2757 24.2833 87.8797C23.6416 92.9965 21.2743 97.7415 17.5721 101.331L15.624 103.192C12.9076 105.8 11.0908 109.204 10.4359 112.913C9.78108 116.621 10.3222 120.442 11.981 123.822C13.8651 127.643 14.845 131.846 14.845 136.105C14.845 140.365 13.8651 144.568 11.981 148.388C10.3214 151.77 9.77988 155.593 10.4347 159.303C11.0895 163.013 12.9068 166.419 15.624 169.029C18.7011 171.973 21.0604 175.585 22.5197 179.586C23.9789 183.587 24.499 187.87 24.0398 192.104C23.6469 195.842 24.4499 199.607 26.3333 202.86C28.2167 206.112 31.0833 208.683 34.5207 210.202C38.4163 211.923 41.8653 214.514 44.6026 217.776C47.3399 221.039 49.2925 224.886 50.3102 229.021C51.2105 232.677 53.2498 235.953 56.1335 238.374C59.0172 240.796 62.596 242.238 66.353 242.492C70.6041 242.774 74.7337 244.028 78.4237 246.157C82.1137 248.287 85.2655 251.235 87.6362 254.775C89.7325 257.904 92.7702 260.284 96.3094 261.571C99.8485 262.858 103.706 262.985 107.322 261.934C111.411 260.748 115.718 260.516 119.911 261.255C124.104 261.995 128.071 263.687 131.508 266.201C134.692 268.485 138.528 269.68 142.446 269.61L142.544 269.59Z" fill="#0F172A"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M208.682 124.777C208.195 125.257 207.558 125.556 206.878 125.623C206.197 125.691 205.514 125.523 204.942 125.147C195.558 119.055 185.377 114.288 174.688 110.984C174.013 110.771 173.435 110.327 173.054 109.731C172.673 109.135 172.513 108.423 172.603 107.721C173.061 104.181 174.302 100.786 176.237 97.786C182.996 87.2856 196.468 83.9251 206.325 90.2857C216.183 96.6463 218.676 110.273 211.916 120.774C210.998 122.229 209.912 123.573 208.682 124.777ZM197.841 100.854C197.841 102.071 197.481 103.26 196.806 104.271C196.13 105.283 195.171 106.072 194.048 106.539C192.924 107.006 191.688 107.129 190.495 106.894C189.301 106.659 188.205 106.075 187.342 105.217C186.48 104.359 185.892 103.265 185.651 102.073C185.41 100.881 185.528 99.644 185.989 98.5186C186.451 97.3932 187.235 96.4298 188.244 95.7498C189.252 95.0699 190.44 94.704 191.656 94.6982C193.289 94.6982 194.854 95.3468 196.009 96.5013C197.163 97.6557 197.812 99.2216 197.812 100.854H197.841ZM210.786 104.371C210.788 104.975 210.611 105.567 210.277 106.07C209.943 106.574 209.467 106.968 208.91 107.201C208.352 107.435 207.738 107.498 207.144 107.383C206.551 107.267 206.005 106.979 205.575 106.553C205.146 106.128 204.852 105.585 204.731 104.992C204.61 104.4 204.667 103.785 204.896 103.226C205.124 102.666 205.513 102.186 206.013 101.847C206.514 101.509 207.104 101.326 207.708 101.322C208.517 101.322 209.292 101.643 209.864 102.215C210.436 102.787 210.757 103.562 210.757 104.371H210.786Z" fill="url(#paint1_linear_528_656)"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M77.2527 124.777C77.7382 125.257 78.3735 125.555 79.0525 125.622C79.7315 125.69 80.413 125.522 80.9833 125.147C90.3807 119.054 100.575 114.288 111.277 110.984C111.951 110.771 112.53 110.327 112.911 109.731C113.292 109.135 113.451 108.423 113.361 107.721C112.904 104.181 111.662 100.786 109.728 97.786C102.958 87.2856 89.4966 83.9251 79.6391 90.2857C69.7816 96.6463 67.2588 110.283 74.0188 120.774C74.9342 122.232 76.0198 123.576 77.2527 124.777ZM88.0842 100.854C88.0823 102.074 88.4422 103.267 89.1186 104.282C89.7949 105.298 90.7572 106.089 91.8837 106.558C93.0102 107.026 94.2502 107.149 95.4469 106.912C96.6436 106.676 97.7431 106.089 98.6064 105.227C99.4697 104.365 100.058 103.267 100.297 102.07C100.535 100.874 100.414 99.6339 99.9474 98.5067C99.481 97.3795 98.6907 96.4159 97.6765 95.738C96.6624 95.0601 95.4699 94.6982 94.25 94.6982C93.4407 94.6969 92.6392 94.8552 91.8912 95.164C91.1432 95.4728 90.4634 95.926 89.8907 96.4978C89.318 97.0696 88.8637 97.7486 88.5537 98.4962C88.2438 99.2437 88.0842 100.045 88.0842 100.854V100.854ZM81.4606 101.322C81.4606 101.927 81.2812 102.518 80.9451 103.021C80.6091 103.524 80.1314 103.916 79.5725 104.148C79.0136 104.379 78.3987 104.44 77.8054 104.322C77.2121 104.204 76.6671 103.912 76.2393 103.485C75.8116 103.057 75.5203 102.512 75.4023 101.918C75.2843 101.325 75.3448 100.71 75.5763 100.151C75.8078 99.5925 76.1998 99.1148 76.7028 98.7787C77.2058 98.4426 77.7971 98.2632 78.4021 98.2632C78.8041 98.262 79.2024 98.3402 79.574 98.4934C79.9457 98.6467 80.2834 98.8719 80.5676 99.1562C80.8519 99.4405 81.0771 99.7781 81.2304 100.15C81.3837 100.521 81.4619 100.92 81.4606 101.322V101.322Z" fill="url(#paint2_linear_528_656)"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M77.2527 124.777C77.7382 125.257 78.3735 125.555 79.0525 125.622C79.7315 125.69 80.413 125.522 80.9833 125.147C90.3807 119.054 100.575 114.288 111.277 110.984C111.951 110.771 112.53 110.327 112.911 109.731C113.292 109.135 113.451 108.423 113.361 107.721C112.904 104.181 111.662 100.786 109.728 97.786C102.958 87.2856 89.4966 83.9251 79.6391 90.2857C69.7816 96.6463 67.2588 110.283 74.0188 120.774C74.9342 122.232 76.0198 123.576 77.2527 124.777ZM88.0842 100.854C88.0823 102.074 88.4422 103.267 89.1186 104.282C89.7949 105.298 90.7572 106.089 91.8837 106.558C93.0102 107.026 94.2502 107.149 95.4469 106.912C96.6436 106.676 97.7431 106.089 98.6064 105.227C99.4697 104.365 100.058 103.267 100.297 102.07C100.535 100.874 100.414 99.6339 99.9474 98.5067C99.481 97.3795 98.6907 96.4159 97.6765 95.738C96.6624 95.0601 95.4699 94.6982 94.25 94.6982C93.4407 94.6969 92.6392 94.8552 91.8912 95.164C91.1432 95.4728 90.4634 95.926 89.8907 96.4978C89.318 97.0696 88.8637 97.7486 88.5537 98.4962C88.2438 99.2437 88.0842 100.045 88.0842 100.854V100.854ZM81.4606 101.322C81.4606 101.927 81.2812 102.518 80.9451 103.021C80.6091 103.524 80.1314 103.916 79.5725 104.148C79.0136 104.379 78.3987 104.44 77.8054 104.322C77.2121 104.204 76.6671 103.912 76.2393 103.485C75.8116 103.057 75.5203 102.512 75.4023 101.918C75.2843 101.325 75.3448 100.71 75.5763 100.151C75.8078 99.5925 76.1998 99.1148 76.7028 98.7787C77.2058 98.4426 77.7971 98.2632 78.4021 98.2632C78.8041 98.262 79.2024 98.3402 79.574 98.4934C79.9457 98.6467 80.2834 98.8719 80.5676 99.1562C80.8519 99.4405 81.0771 99.7781 81.2304 100.15C81.3837 100.521 81.4619 100.92 81.4606 101.322V101.322Z" fill="url(#paint3_linear_528_656)"/>
<path d="M195.309 162.171C195.232 161.954 195.107 161.756 194.945 161.592C194.782 161.428 194.585 161.303 194.368 161.224C194.151 161.146 193.919 161.117 193.689 161.139C193.459 161.162 193.237 161.235 193.039 161.353C185.584 164.507 177.623 166.298 169.535 166.642C162.622 166.653 155.936 164.178 150.697 159.668C147.999 157.359 147.726 151.272 149.927 148.496L160.593 134.323C161.86 132.704 162.647 130.762 162.863 128.718C163.08 126.674 162.717 124.61 161.818 122.762C160.918 120.914 159.517 119.356 157.775 118.266C156.032 117.175 154.018 116.596 151.963 116.595H133.933C131.878 116.596 129.864 117.175 128.122 118.266C126.379 119.356 124.978 120.914 124.079 122.762C123.179 124.61 122.817 126.674 123.033 128.718C123.25 130.762 124.036 132.704 125.303 134.323L136.018 148.496C138.209 151.272 137.966 157.359 135.248 159.668C130.008 164.177 123.322 166.652 116.41 166.642C108.322 166.299 100.361 164.508 92.9058 161.353C92.7077 161.235 92.4857 161.162 92.2559 161.139C92.0261 161.117 91.7943 161.146 91.5771 161.224C91.3599 161.303 91.1629 161.428 91.0002 161.592C90.8374 161.756 90.7131 161.954 90.6362 162.171C89.0388 168.668 99.1982 180.026 104.078 186.396C105.851 206.355 122.585 227.482 143.041 227.482C163.496 227.482 180.172 206.355 181.945 186.396C186.747 180.026 196.896 168.668 195.309 162.171Z" fill="url(#paint4_linear_528_656)"/>
<path d="M195.309 162.171C195.232 161.954 195.107 161.756 194.945 161.592C194.782 161.428 194.585 161.303 194.368 161.224C194.151 161.146 193.919 161.117 193.689 161.139C193.459 161.162 193.237 161.235 193.039 161.353C185.584 164.507 177.623 166.298 169.535 166.642C162.622 166.653 155.936 164.178 150.697 159.668C147.999 157.359 147.726 151.272 149.927 148.496L160.593 134.323C161.86 132.704 162.647 130.762 162.863 128.718C163.08 126.674 162.717 124.61 161.818 122.762C160.918 120.914 159.517 119.356 157.775 118.266C156.032 117.175 154.018 116.596 151.963 116.595H133.933C131.878 116.596 129.864 117.175 128.122 118.266C126.379 119.356 124.978 120.914 124.079 122.762C123.179 124.61 122.817 126.674 123.033 128.718C123.25 130.762 124.036 132.704 125.303 134.323L136.018 148.496C138.209 151.272 137.966 157.359 135.248 159.668C130.008 164.177 123.322 166.652 116.41 166.642C108.322 166.299 100.361 164.508 92.9058 161.353C92.7077 161.235 92.4857 161.162 92.2559 161.139C92.0261 161.117 91.7943 161.146 91.5771 161.224C91.3599 161.303 91.1629 161.428 91.0002 161.592C90.8374 161.756 90.7131 161.954 90.6362 162.171C89.0388 168.668 99.1982 180.026 104.078 186.396C105.851 206.355 122.585 227.482 143.041 227.482C163.496 227.482 180.172 206.355 181.945 186.396C186.747 180.026 196.896 168.668 195.309 162.171Z" fill="url(#paint5_linear_528_656)"/>
<path d="M120.043 189.367C120.043 201.932 129.706 212.871 142.232 213.212C145.297 213.307 148.35 212.786 151.21 211.679C154.069 210.572 156.678 208.902 158.88 206.768C161.082 204.634 162.833 202.08 164.029 199.256C165.225 196.433 165.842 193.398 165.843 190.331V189.357C165.83 186.524 164.696 183.811 162.688 181.812C160.68 179.813 157.962 178.691 155.129 178.691H130.699C127.866 178.691 125.148 179.813 123.14 181.812C121.132 183.811 119.997 186.524 119.985 189.357L120.043 189.367Z" fill="url(#paint6_linear_528_656)"/>
</g>
<defs>
<radialGradient id="paint0_radial_528_656" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(143.565 98.6002) rotate(90.1602) scale(181.156 187.001)">
<stop offset="0.56" stop-color="white"/>
<stop offset="1" stop-color="#CAF3FF"/>
</radialGradient>
<linearGradient id="paint1_linear_528_656" x1="194.12" y1="87.0713" x2="194.12" y2="125.634" gradientUnits="userSpaceOnUse">
<stop stop-color="#0F172A"/>
<stop offset="1" stop-color="#334155"/>
</linearGradient>
<linearGradient id="paint2_linear_528_656" x1="91.7856" y1="87.0713" x2="91.7856" y2="125.634" gradientUnits="userSpaceOnUse">
<stop stop-color="#0F172A"/>
<stop offset="1" stop-color="#1E293B"/>
</linearGradient>
<linearGradient id="paint3_linear_528_656" x1="91.7782" y1="87.0713" x2="91.7782" y2="125.633" gradientUnits="userSpaceOnUse">
<stop stop-color="#0F172A"/>
<stop offset="1" stop-color="#334155"/>
</linearGradient>
<linearGradient id="paint4_linear_528_656" x1="142.953" y1="116.595" x2="142.953" y2="227.482" gradientUnits="userSpaceOnUse">
<stop stop-color="#0F172A"/>
<stop offset="1" stop-color="#1E293B"/>
</linearGradient>
<linearGradient id="paint5_linear_528_656" x1="142.903" y1="116.606" x2="142.903" y2="227.472" gradientUnits="userSpaceOnUse">
<stop stop-color="#0F172A"/>
<stop offset="1" stop-color="#334155"/>
</linearGradient>
<linearGradient id="paint6_linear_528_656" x1="142.904" y1="178.701" x2="143.148" y2="234.69" gradientUnits="userSpaceOnUse">
<stop stop-color="#FFA9DC"/>
<stop offset="1" stop-color="#FFE8F4"/>
</linearGradient>
<clipPath id="clip0_528_656">
<rect width="285" height="279.799" fill="white"/>
</clipPath>
</defs>
</svg>

'''
'''--- static/img/newMoonCrop.svg ---
<svg width="921" height="280" viewBox="0 0 921 280" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M359.807 186H382.811V141.073H393.464L418.938 186H447.191L413.38 129.957L445.802 77.9281H417.857L393.618 119.459H382.811V77.9281H359.807V186ZM484.004 188.007C499.752 188.007 515.5 181.214 521.366 162.996L501.296 158.364C498.208 165.158 491.106 168.091 483.696 168.091C473.043 168.091 465.169 161.607 465.015 150.954H523.991V145.241C523.991 121.157 508.398 102.63 483.387 102.63C460.692 102.63 441.856 119.922 441.856 145.396C441.856 169.944 459.148 188.007 484.004 188.007ZM465.169 135.978C466.25 128.722 472.888 121.311 483.387 121.311C492.959 121.311 500.215 127.796 501.296 135.978H465.169ZM530.753 221.509H544.184C558.697 221.509 567.188 216.569 571.357 204.99L607.021 104.637H582.318L565.799 164.386H564.101L547.581 104.637H523.188L550.36 186H554.683L551.132 195.263C549.434 199.586 546.963 200.976 542.641 200.976H530.753V221.509ZM611.726 221.509H634.267V177.663H635.965C639.361 182.603 646.618 188.007 659.123 188.007C680.12 188.007 695.868 169.172 695.868 145.396C695.868 121.002 678.885 102.63 657.888 102.63C646.618 102.63 639.979 107.107 635.965 112.202H634.267V104.637H611.726V221.509ZM653.565 166.701C642.912 166.701 633.958 158.828 633.958 145.241C633.958 133.817 641.677 124.09 653.411 124.09C664.218 124.09 673.018 132.582 673.018 145.241C673.018 158.056 664.527 166.701 653.565 166.701ZM743.828 188.007C769.148 188.007 787.057 169.48 787.057 145.396C787.057 121.311 769.302 102.63 743.828 102.63C718.508 102.63 700.445 121.157 700.445 145.396C700.445 169.48 718.354 188.007 743.828 188.007ZM743.828 166.547C731.786 166.547 723.294 157.438 723.294 145.396C723.294 133.199 731.786 124.09 743.828 124.09C755.87 124.09 764.207 133.199 764.207 145.396C764.207 157.438 755.87 166.547 743.828 166.547ZM795.526 186H818.067V138.448C818.067 129.957 823.625 124.399 830.573 124.399C837.52 124.399 843.078 129.031 843.078 136.75V186H865.464V138.757C865.464 129.648 871.022 124.399 878.124 124.399C885.072 124.399 890.321 129.339 890.321 138.757V186H912.862V131.038C912.862 115.136 900.819 102.63 883.991 102.63C872.875 102.63 865.619 108.188 861.45 114.518H859.752C855.738 107.571 848.945 102.63 838.292 102.63C828.72 102.63 822.544 107.725 819.765 112.048H818.067V104.637H795.526V186Z" fill="#0F172A"/>
<g clip-path="url(#clip0_528_728)">
<path d="M142.544 275.23C147.54 275.336 152.434 273.8 156.473 270.857C159.29 268.809 162.537 267.431 165.967 266.827C169.396 266.223 172.919 266.408 176.266 267.37C180.919 268.707 185.877 268.536 190.427 266.88C194.977 265.225 198.885 262.17 201.591 258.155C203.537 255.266 206.116 252.859 209.133 251.117C212.149 249.375 215.523 248.344 218.998 248.103C223.827 247.77 228.427 245.914 232.136 242.802C235.845 239.69 238.471 235.483 239.638 230.784C240.474 227.409 242.068 224.269 244.299 221.602C246.531 218.935 249.34 216.812 252.515 215.394C256.936 213.435 260.624 210.126 263.049 205.942C265.474 201.758 266.513 196.914 266.016 192.104C265.649 188.64 266.077 185.138 267.269 181.865C268.461 178.592 270.384 175.634 272.892 173.217C276.373 169.855 278.701 165.476 279.54 160.71C280.38 155.944 279.69 151.034 277.568 146.684C276.039 143.555 275.245 140.119 275.245 136.636C275.245 133.154 276.039 129.718 277.568 126.589C279.69 122.239 280.38 117.329 279.54 112.563C278.701 107.796 276.373 103.418 272.892 100.055L270.944 98.195C268.085 95.4326 266.257 91.7757 265.762 87.831C265.762 87.831 259.538 32.3097 255.048 17.1728C251.853 6.37046 240.349 3.53595 229.673 7.13023C225.719 8.41598 216.475 12.8772 210.757 15.5851C196.146 22.608 186.532 29.1634 179.198 22.9295C175.703 19.5325 171.229 17.3202 166.408 16.6052C161.587 15.8903 156.663 16.709 152.333 18.9456C149.266 20.5119 145.889 21.3738 142.446 21.4684C139.052 21.3649 135.724 20.5029 132.706 18.9456C128.377 16.7083 123.455 15.8893 118.636 16.6042C113.816 17.3192 109.343 19.532 105.851 22.9295C98.4676 29.1634 88.8731 22.6178 74.2622 15.5851C68.5543 12.8772 59.2715 8.41598 55.3168 7.09126C44.6021 3.50672 33.1277 6.3315 29.9328 17.1338C25.4521 32.2902 19.2182 87.7921 19.2182 87.7921C18.7282 91.7381 16.899 95.3965 14.0362 98.1561L12.088 100.017C8.60317 103.377 6.27326 107.755 5.43318 112.522C4.5931 117.29 5.28609 122.201 7.41256 126.55C8.94104 129.679 9.73552 133.115 9.73552 136.597C9.73552 140.08 8.94104 143.516 7.41256 146.645C5.28609 150.994 4.5931 155.905 5.43318 160.672C6.27326 165.44 8.60317 169.818 12.088 173.178C14.6036 175.599 16.5326 178.562 17.7278 181.843C18.9231 185.123 19.3529 188.633 18.9844 192.104C18.4742 196.916 19.5022 201.766 21.9208 205.958C24.3395 210.149 28.0242 213.466 32.4459 215.433C35.6288 216.846 38.4475 218.967 40.6873 221.634C42.9272 224.301 44.5293 227.444 45.3717 230.823C46.5367 235.521 49.1614 239.728 52.8684 242.84C56.5754 245.952 61.1737 247.808 66.0022 248.142C69.477 248.383 72.851 249.414 75.8673 251.156C78.8836 252.898 81.4628 255.305 83.4087 258.194C86.1157 262.208 90.0243 265.262 94.574 266.917C99.1237 268.572 104.081 268.744 108.734 267.409C112.081 266.447 115.604 266.262 119.033 266.866C122.463 267.47 125.71 268.848 128.527 270.896C132.605 273.823 137.525 275.345 142.544 275.23Z" fill="url(#paint0_radial_528_728)"/>
<path d="M143.021 279.769H142.544C136.443 279.872 130.473 277.995 125.527 274.422C123.34 272.819 120.814 271.74 118.144 271.269C115.474 270.798 112.731 270.947 110.127 271.704C104.443 273.35 98.3827 273.146 92.8219 271.122C87.2611 269.098 82.4876 265.358 79.1911 260.444C77.682 258.195 75.6763 256.322 73.3288 254.971C70.9812 253.62 68.3546 252.826 65.6517 252.652C59.7469 252.253 54.1216 249.988 49.5885 246.184C45.0555 242.379 41.8493 237.231 40.4333 231.485C39.7919 228.857 38.5568 226.41 36.8226 224.333C35.0885 222.256 32.9016 220.604 30.4297 219.504C25.0173 217.111 20.5058 213.06 17.5468 207.935C14.5879 202.81 13.3346 196.877 13.9681 190.994C14.2594 188.299 13.9288 185.574 13.0017 183.028C12.0747 180.481 10.5758 178.181 8.62047 176.305C4.35191 172.205 1.4975 166.854 0.469709 161.025C-0.558086 155.196 0.293967 149.191 2.90274 143.878C4.09919 141.446 4.72138 138.772 4.72138 136.062C4.72138 133.351 4.09919 130.677 2.90274 128.245C0.288008 122.937 -0.571961 116.935 0.447034 111.107C1.46603 105.278 4.31124 99.9242 8.57177 95.8182L10.5199 93.9578C12.5419 92.0012 13.8371 89.4143 14.1921 86.6231C14.4356 84.412 20.5137 30.566 25.0723 15.1564C25.8141 12.4824 27.0991 9.99004 28.8471 7.83481C30.5951 5.67959 32.7685 3.90779 35.2318 2.62999C41.3099 -0.535702 49.2193 -0.857142 56.9338 1.72412C60.8885 3.05858 69.0803 6.93533 76.415 10.4907C78.6456 11.5621 80.7593 12.6141 82.7659 13.6271C94.0357 19.2669 99.0229 21.3222 102.364 18.6435C106.631 14.5565 112.064 11.8993 117.91 11.0405C123.755 10.1817 129.723 11.164 134.985 13.8512C137.302 15.0333 139.848 15.6981 142.446 15.7993C145.081 15.7082 147.664 15.0434 150.015 13.8512C155.268 11.1612 161.228 10.1709 167.069 11.0173C172.91 11.8637 178.343 14.5049 182.617 18.5753C185.948 21.254 190.945 19.1987 202.215 13.5589C204.221 12.5849 206.335 11.4939 208.556 10.4225C215.92 6.89637 224.141 3.01961 228.037 1.65593C235.752 -0.925326 243.671 -0.603886 249.749 2.56181C252.216 3.83751 254.393 5.60838 256.144 7.76372C257.896 9.91905 259.184 12.4125 259.928 15.0882C264.486 30.4978 270.555 84.3438 270.808 86.6231C271.171 89.3901 272.462 91.9521 274.471 93.8896L276.419 95.7501C280.687 99.8502 283.542 105.201 284.569 111.03C285.597 116.859 284.745 122.864 282.136 128.177C280.94 130.609 280.318 133.283 280.318 135.993C280.318 138.704 280.94 141.378 282.136 143.81C284.745 149.123 285.597 155.128 284.569 160.956C283.542 166.785 280.687 172.136 276.419 176.237C274.463 178.113 272.965 180.413 272.04 182.96C271.114 185.506 270.786 188.232 271.081 190.925C271.714 196.81 270.459 202.744 267.498 207.869C264.537 212.994 260.024 217.045 254.609 219.436C252.131 220.532 249.936 222.182 248.195 224.259C246.454 226.336 245.213 228.785 244.567 231.417C243.148 237.163 239.939 242.31 235.405 246.115C230.87 249.919 225.244 252.184 219.339 252.583C216.637 252.758 214.012 253.552 211.666 254.903C209.32 256.254 207.316 258.127 205.809 260.376C202.509 265.289 197.733 269.027 192.172 271.05C186.61 273.074 180.549 273.279 174.863 271.636C172.261 270.878 169.52 270.73 166.851 271.201C164.183 271.672 161.658 272.751 159.473 274.354C154.707 277.867 148.942 279.764 143.021 279.769V279.769ZM142.544 269.59H142.651C146.537 269.666 150.341 268.469 153.483 266.181C156.921 263.667 160.89 261.975 165.084 261.236C169.279 260.496 173.587 260.728 177.678 261.915C181.295 262.961 185.15 262.832 188.688 261.545C192.227 260.258 195.265 257.881 197.364 254.756C199.732 251.215 202.882 248.267 206.57 246.137C210.259 244.007 214.387 242.754 218.637 242.473C222.392 242.217 225.969 240.777 228.853 238.36C231.738 235.943 233.781 232.673 234.69 229.021C235.706 224.885 237.658 221.038 240.396 217.775C243.133 214.512 246.583 211.921 250.479 210.202C253.915 208.681 256.78 206.11 258.661 202.858C260.543 199.606 261.344 195.84 260.951 192.104C260.49 187.868 261.009 183.582 262.466 179.578C263.923 175.574 266.281 171.958 269.357 169.009C272.075 166.394 273.891 162.981 274.541 159.265C275.191 155.549 274.641 151.722 272.97 148.34C271.091 144.518 270.114 140.316 270.114 136.057C270.114 131.798 271.091 127.596 272.97 123.774C274.629 120.394 275.171 116.574 274.518 112.866C273.865 109.158 272.051 105.753 269.337 103.143L267.389 101.283C263.708 97.7021 261.355 92.9753 260.717 87.8797C260.649 87.2563 254.483 32.5823 250.177 18.0201C249.817 16.6587 249.176 15.3877 248.296 14.2889C247.415 13.1901 246.314 12.2878 245.064 11.64C241.479 9.77959 236.297 9.69192 231.3 11.3576C227.599 12.6044 218.082 17.2019 212.959 19.6273C210.786 20.6696 208.683 21.7216 206.734 22.6956C194.89 28.6276 184.662 33.7512 175.857 26.2704L175.565 25.9977C172.83 23.365 169.34 21.6544 165.584 21.1059C161.829 20.5573 157.995 21.1984 154.622 22.9391C150.88 24.8461 146.762 25.9006 142.563 26.0269H142.261C138.092 25.8968 134.003 24.8421 130.29 22.9391C126.917 21.1984 123.084 20.5573 119.328 21.1059C115.572 21.6544 112.082 23.365 109.348 25.9977L109.056 26.2704C100.289 33.7512 90.0324 28.6276 78.1878 22.6956C76.2397 21.7216 74.1649 20.6891 71.9928 19.6468C66.879 17.1922 57.3819 12.6238 53.6512 11.377C48.6251 9.69192 43.4723 9.79907 39.8878 11.6595C38.6457 12.313 37.5532 13.2176 36.6795 14.316C35.8059 15.4143 35.1702 16.6824 34.8129 18.0396C30.5076 32.6018 24.3418 87.2757 24.2833 87.8797C23.6416 92.9965 21.2743 97.7415 17.5721 101.331L15.624 103.192C12.9076 105.8 11.0908 109.204 10.4359 112.913C9.78108 116.621 10.3222 120.442 11.981 123.822C13.8651 127.643 14.845 131.846 14.845 136.105C14.845 140.365 13.8651 144.568 11.981 148.388C10.3214 151.77 9.77988 155.593 10.4347 159.303C11.0895 163.013 12.9068 166.419 15.624 169.029C18.7011 171.973 21.0604 175.585 22.5197 179.586C23.9789 183.587 24.499 187.87 24.0398 192.104C23.6469 195.842 24.4499 199.607 26.3333 202.86C28.2167 206.112 31.0833 208.683 34.5207 210.202C38.4163 211.923 41.8653 214.514 44.6026 217.776C47.3399 221.039 49.2925 224.886 50.3102 229.021C51.2105 232.677 53.2498 235.953 56.1335 238.374C59.0172 240.796 62.596 242.238 66.353 242.492C70.6041 242.774 74.7337 244.028 78.4237 246.157C82.1137 248.287 85.2655 251.235 87.6362 254.775C89.7325 257.904 92.7702 260.284 96.3094 261.571C99.8485 262.858 103.706 262.985 107.322 261.934C111.411 260.748 115.718 260.516 119.911 261.255C124.104 261.995 128.071 263.687 131.508 266.201C134.692 268.485 138.528 269.68 142.446 269.61L142.544 269.59Z" fill="#0F172A"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M208.682 124.777C208.195 125.257 207.558 125.556 206.878 125.623C206.197 125.691 205.514 125.523 204.942 125.147C195.558 119.055 185.377 114.288 174.688 110.984C174.013 110.771 173.435 110.327 173.054 109.731C172.673 109.135 172.513 108.423 172.603 107.721C173.061 104.181 174.302 100.786 176.237 97.786C182.996 87.2856 196.468 83.9251 206.325 90.2857C216.183 96.6463 218.676 110.273 211.916 120.774C210.998 122.229 209.912 123.573 208.682 124.777ZM197.841 100.854C197.841 102.071 197.481 103.26 196.806 104.271C196.13 105.283 195.171 106.072 194.048 106.539C192.924 107.006 191.688 107.129 190.495 106.894C189.301 106.659 188.205 106.075 187.342 105.217C186.48 104.359 185.892 103.265 185.651 102.073C185.41 100.881 185.528 99.644 185.989 98.5186C186.451 97.3932 187.235 96.4298 188.244 95.7498C189.252 95.0699 190.44 94.704 191.656 94.6982C193.289 94.6982 194.854 95.3468 196.009 96.5013C197.163 97.6557 197.812 99.2216 197.812 100.854H197.841ZM210.786 104.371C210.788 104.975 210.611 105.567 210.277 106.07C209.943 106.574 209.467 106.968 208.91 107.201C208.352 107.435 207.738 107.498 207.144 107.383C206.551 107.267 206.005 106.979 205.575 106.553C205.146 106.128 204.852 105.585 204.731 104.992C204.61 104.4 204.667 103.785 204.896 103.226C205.124 102.666 205.513 102.186 206.013 101.847C206.514 101.509 207.104 101.326 207.708 101.322C208.517 101.322 209.292 101.643 209.864 102.215C210.436 102.787 210.757 103.562 210.757 104.371H210.786Z" fill="url(#paint1_linear_528_728)"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M77.2527 124.777C77.7382 125.257 78.3735 125.555 79.0525 125.622C79.7315 125.69 80.413 125.522 80.9833 125.147C90.3807 119.054 100.575 114.288 111.277 110.984C111.951 110.771 112.53 110.327 112.911 109.731C113.292 109.135 113.451 108.423 113.361 107.721C112.904 104.181 111.662 100.786 109.728 97.786C102.958 87.2856 89.4966 83.9251 79.6391 90.2857C69.7816 96.6463 67.2588 110.283 74.0188 120.774C74.9342 122.232 76.0198 123.576 77.2527 124.777ZM88.0842 100.854C88.0823 102.074 88.4422 103.267 89.1186 104.282C89.7949 105.298 90.7572 106.089 91.8837 106.558C93.0102 107.026 94.2502 107.149 95.4469 106.912C96.6436 106.676 97.7431 106.089 98.6064 105.227C99.4697 104.365 100.058 103.267 100.297 102.07C100.535 100.874 100.414 99.6339 99.9474 98.5067C99.481 97.3795 98.6907 96.4159 97.6765 95.738C96.6624 95.0601 95.4699 94.6982 94.25 94.6982C93.4407 94.6969 92.6392 94.8552 91.8912 95.164C91.1432 95.4728 90.4634 95.926 89.8907 96.4978C89.318 97.0696 88.8637 97.7486 88.5537 98.4962C88.2438 99.2437 88.0842 100.045 88.0842 100.854V100.854ZM81.4606 101.322C81.4606 101.927 81.2812 102.518 80.9451 103.021C80.6091 103.524 80.1314 103.916 79.5725 104.148C79.0136 104.379 78.3987 104.44 77.8054 104.322C77.2121 104.204 76.6671 103.912 76.2393 103.485C75.8116 103.057 75.5203 102.512 75.4023 101.918C75.2843 101.325 75.3448 100.71 75.5763 100.151C75.8078 99.5925 76.1998 99.1148 76.7028 98.7787C77.2058 98.4426 77.7971 98.2632 78.4021 98.2632C78.8041 98.262 79.2024 98.3402 79.574 98.4934C79.9457 98.6467 80.2834 98.8719 80.5676 99.1562C80.8519 99.4405 81.0771 99.7781 81.2304 100.15C81.3837 100.521 81.4619 100.92 81.4606 101.322V101.322Z" fill="url(#paint2_linear_528_728)"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M77.2527 124.777C77.7382 125.257 78.3735 125.555 79.0525 125.622C79.7315 125.69 80.413 125.522 80.9833 125.147C90.3807 119.054 100.575 114.288 111.277 110.984C111.951 110.771 112.53 110.327 112.911 109.731C113.292 109.135 113.451 108.423 113.361 107.721C112.904 104.181 111.662 100.786 109.728 97.786C102.958 87.2856 89.4966 83.9251 79.6391 90.2857C69.7816 96.6463 67.2588 110.283 74.0188 120.774C74.9342 122.232 76.0198 123.576 77.2527 124.777ZM88.0842 100.854C88.0823 102.074 88.4422 103.267 89.1186 104.282C89.7949 105.298 90.7572 106.089 91.8837 106.558C93.0102 107.026 94.2502 107.149 95.4469 106.912C96.6436 106.676 97.7431 106.089 98.6064 105.227C99.4697 104.365 100.058 103.267 100.297 102.07C100.535 100.874 100.414 99.6339 99.9474 98.5067C99.481 97.3795 98.6907 96.4159 97.6765 95.738C96.6624 95.0601 95.4699 94.6982 94.25 94.6982C93.4407 94.6969 92.6392 94.8552 91.8912 95.164C91.1432 95.4728 90.4634 95.926 89.8907 96.4978C89.318 97.0696 88.8637 97.7486 88.5537 98.4962C88.2438 99.2437 88.0842 100.045 88.0842 100.854V100.854ZM81.4606 101.322C81.4606 101.927 81.2812 102.518 80.9451 103.021C80.6091 103.524 80.1314 103.916 79.5725 104.148C79.0136 104.379 78.3987 104.44 77.8054 104.322C77.2121 104.204 76.6671 103.912 76.2393 103.485C75.8116 103.057 75.5203 102.512 75.4023 101.918C75.2843 101.325 75.3448 100.71 75.5763 100.151C75.8078 99.5925 76.1998 99.1148 76.7028 98.7787C77.2058 98.4426 77.7971 98.2632 78.4021 98.2632C78.8041 98.262 79.2024 98.3402 79.574 98.4934C79.9457 98.6467 80.2834 98.8719 80.5676 99.1562C80.8519 99.4405 81.0771 99.7781 81.2304 100.15C81.3837 100.521 81.4619 100.92 81.4606 101.322V101.322Z" fill="url(#paint3_linear_528_728)"/>
<path d="M195.309 162.171C195.232 161.954 195.107 161.756 194.945 161.592C194.782 161.428 194.585 161.303 194.368 161.224C194.151 161.146 193.919 161.117 193.689 161.139C193.459 161.162 193.237 161.235 193.039 161.353C185.584 164.507 177.623 166.298 169.535 166.642C162.622 166.653 155.936 164.178 150.697 159.668C147.999 157.359 147.726 151.272 149.927 148.496L160.593 134.323C161.86 132.704 162.647 130.762 162.863 128.718C163.08 126.674 162.717 124.61 161.818 122.762C160.918 120.914 159.517 119.356 157.775 118.266C156.032 117.175 154.018 116.596 151.963 116.595H133.933C131.878 116.596 129.864 117.175 128.122 118.266C126.379 119.356 124.978 120.914 124.079 122.762C123.179 124.61 122.817 126.674 123.033 128.718C123.25 130.762 124.036 132.704 125.303 134.323L136.018 148.496C138.209 151.272 137.966 157.359 135.248 159.668C130.008 164.177 123.322 166.652 116.41 166.642C108.322 166.299 100.361 164.508 92.9058 161.353C92.7077 161.235 92.4857 161.162 92.2559 161.139C92.0261 161.117 91.7943 161.146 91.5771 161.224C91.3599 161.303 91.1629 161.428 91.0002 161.592C90.8374 161.756 90.7131 161.954 90.6362 162.171C89.0388 168.668 99.1982 180.026 104.078 186.396C105.851 206.355 122.585 227.482 143.041 227.482C163.496 227.482 180.172 206.355 181.945 186.396C186.747 180.026 196.896 168.668 195.309 162.171Z" fill="url(#paint4_linear_528_728)"/>
<path d="M195.309 162.171C195.232 161.954 195.107 161.756 194.945 161.592C194.782 161.428 194.585 161.303 194.368 161.224C194.151 161.146 193.919 161.117 193.689 161.139C193.459 161.162 193.237 161.235 193.039 161.353C185.584 164.507 177.623 166.298 169.535 166.642C162.622 166.653 155.936 164.178 150.697 159.668C147.999 157.359 147.726 151.272 149.927 148.496L160.593 134.323C161.86 132.704 162.647 130.762 162.863 128.718C163.08 126.674 162.717 124.61 161.818 122.762C160.918 120.914 159.517 119.356 157.775 118.266C156.032 117.175 154.018 116.596 151.963 116.595H133.933C131.878 116.596 129.864 117.175 128.122 118.266C126.379 119.356 124.978 120.914 124.079 122.762C123.179 124.61 122.817 126.674 123.033 128.718C123.25 130.762 124.036 132.704 125.303 134.323L136.018 148.496C138.209 151.272 137.966 157.359 135.248 159.668C130.008 164.177 123.322 166.652 116.41 166.642C108.322 166.299 100.361 164.508 92.9058 161.353C92.7077 161.235 92.4857 161.162 92.2559 161.139C92.0261 161.117 91.7943 161.146 91.5771 161.224C91.3599 161.303 91.1629 161.428 91.0002 161.592C90.8374 161.756 90.7131 161.954 90.6362 162.171C89.0388 168.668 99.1982 180.026 104.078 186.396C105.851 206.355 122.585 227.482 143.041 227.482C163.496 227.482 180.172 206.355 181.945 186.396C186.747 180.026 196.896 168.668 195.309 162.171Z" fill="url(#paint5_linear_528_728)"/>
<path d="M120.043 189.367C120.043 201.932 129.706 212.871 142.232 213.212C145.297 213.307 148.35 212.786 151.21 211.679C154.069 210.572 156.678 208.902 158.88 206.768C161.082 204.634 162.833 202.08 164.029 199.256C165.225 196.433 165.842 193.398 165.843 190.331V189.357C165.83 186.524 164.696 183.811 162.688 181.812C160.68 179.813 157.962 178.691 155.129 178.691H130.699C127.866 178.691 125.148 179.813 123.14 181.812C121.132 183.811 119.997 186.524 119.985 189.357L120.043 189.367Z" fill="url(#paint6_linear_528_728)"/>
</g>
<defs>
<radialGradient id="paint0_radial_528_728" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(143.565 98.6002) rotate(90.1602) scale(181.156 187.001)">
<stop offset="0.56" stop-color="white"/>
<stop offset="1" stop-color="#CAF3FF"/>
</radialGradient>
<linearGradient id="paint1_linear_528_728" x1="194.12" y1="87.0713" x2="194.12" y2="125.634" gradientUnits="userSpaceOnUse">
<stop stop-color="#0F172A"/>
<stop offset="1" stop-color="#334155"/>
</linearGradient>
<linearGradient id="paint2_linear_528_728" x1="91.7856" y1="87.0713" x2="91.7856" y2="125.634" gradientUnits="userSpaceOnUse">
<stop stop-color="#0F172A"/>
<stop offset="1" stop-color="#1E293B"/>
</linearGradient>
<linearGradient id="paint3_linear_528_728" x1="91.7782" y1="87.0713" x2="91.7782" y2="125.633" gradientUnits="userSpaceOnUse">
<stop stop-color="#0F172A"/>
<stop offset="1" stop-color="#334155"/>
</linearGradient>
<linearGradient id="paint4_linear_528_728" x1="142.953" y1="116.595" x2="142.953" y2="227.482" gradientUnits="userSpaceOnUse">
<stop stop-color="#0F172A"/>
<stop offset="1" stop-color="#1E293B"/>
</linearGradient>
<linearGradient id="paint5_linear_528_728" x1="142.903" y1="116.606" x2="142.903" y2="227.472" gradientUnits="userSpaceOnUse">
<stop stop-color="#0F172A"/>
<stop offset="1" stop-color="#334155"/>
</linearGradient>
<linearGradient id="paint6_linear_528_728" x1="142.904" y1="178.701" x2="143.148" y2="234.69" gradientUnits="userSpaceOnUse">
<stop stop-color="#FFA9DC"/>
<stop offset="1" stop-color="#FFE8F4"/>
</linearGradient>
<clipPath id="clip0_528_728">
<rect width="285" height="279.799" fill="white"/>
</clipPath>
</defs>
</svg>

'''
'''--- static/img/undraw_docusaurus_mountain.svg ---
<svg xmlns="http://www.w3.org/2000/svg" width="1088" height="687.962" viewBox="0 0 1088 687.962">
  <g id="Group_12" data-name="Group 12" transform="translate(-57 -56)">
    <g id="Group_11" data-name="Group 11" transform="translate(57 56)">
      <path id="Path_83" data-name="Path 83" d="M1017.81,560.461c-5.27,45.15-16.22,81.4-31.25,110.31-20,38.52-54.21,54.04-84.77,70.28a193.275,193.275,0,0,1-27.46,11.94c-55.61,19.3-117.85,14.18-166.74,3.99a657.282,657.282,0,0,0-104.09-13.16q-14.97-.675-29.97-.67c-15.42.02-293.07,5.29-360.67-131.57-16.69-33.76-28.13-75-32.24-125.27-11.63-142.12,52.29-235.46,134.74-296.47,155.97-115.41,369.76-110.57,523.43,7.88C941.15,276.621,1036.99,396.031,1017.81,560.461Z" transform="translate(-56 -106.019)" fill="#3f3d56"/>
      <path id="Path_84" data-name="Path 84" d="M986.56,670.771c-20,38.52-47.21,64.04-77.77,80.28a193.272,193.272,0,0,1-27.46,11.94c-55.61,19.3-117.85,14.18-166.74,3.99a657.3,657.3,0,0,0-104.09-13.16q-14.97-.675-29.97-.67-23.13.03-46.25,1.72c-100.17,7.36-253.82-6.43-321.42-143.29L382,283.981,444.95,445.6l20.09,51.59,55.37-75.98L549,381.981l130.2,149.27,36.8-81.27L970.78,657.9l14.21,11.59Z" transform="translate(-56 -106.019)" fill="#f2f2f2"/>
      <path id="Path_85" data-name="Path 85" d="M302,282.962l26-57,36,83-31-60Z" opacity="0.1"/>
      <path id="Path_86" data-name="Path 86" d="M610.5,753.821q-14.97-.675-29.97-.67L465.04,497.191Z" transform="translate(-56 -106.019)" opacity="0.1"/>
      <path id="Path_87" data-name="Path 87" d="M464.411,315.191,493,292.962l130,150-132-128Z" opacity="0.1"/>
      <path id="Path_88" data-name="Path 88" d="M908.79,751.051a193.265,193.265,0,0,1-27.46,11.94L679.2,531.251Z" transform="translate(-56 -106.019)" opacity="0.1"/>
      <circle id="Ellipse_11" data-name="Ellipse 11" cx="3" cy="3" r="3" transform="translate(479 98.962)" fill="#f2f2f2"/>
      <circle id="Ellipse_12" data-name="Ellipse 12" cx="3" cy="3" r="3" transform="translate(396 201.962)" fill="#f2f2f2"/>
      <circle id="Ellipse_13" data-name="Ellipse 13" cx="2" cy="2" r="2" transform="translate(600 220.962)" fill="#f2f2f2"/>
      <circle id="Ellipse_14" data-name="Ellipse 14" cx="2" cy="2" r="2" transform="translate(180 265.962)" fill="#f2f2f2"/>
      <circle id="Ellipse_15" data-name="Ellipse 15" cx="2" cy="2" r="2" transform="translate(612 96.962)" fill="#f2f2f2"/>
      <circle id="Ellipse_16" data-name="Ellipse 16" cx="2" cy="2" r="2" transform="translate(736 192.962)" fill="#f2f2f2"/>
      <circle id="Ellipse_17" data-name="Ellipse 17" cx="2" cy="2" r="2" transform="translate(858 344.962)" fill="#f2f2f2"/>
      <path id="Path_89" data-name="Path 89" d="M306,121.222h-2.76v-2.76h-1.48v2.76H299V122.7h2.76v2.759h1.48V122.7H306Z" fill="#f2f2f2"/>
      <path id="Path_90" data-name="Path 90" d="M848,424.222h-2.76v-2.76h-1.48v2.76H841V425.7h2.76v2.759h1.48V425.7H848Z" fill="#f2f2f2"/>
      <path id="Path_91" data-name="Path 91" d="M1144,719.981c0,16.569-243.557,74-544,74s-544-57.431-544-74,243.557,14,544,14S1144,703.413,1144,719.981Z" transform="translate(-56 -106.019)" fill="#3f3d56"/>
      <path id="Path_92" data-name="Path 92" d="M1144,719.981c0,16.569-243.557,74-544,74s-544-57.431-544-74,243.557,14,544,14S1144,703.413,1144,719.981Z" transform="translate(-56 -106.019)" opacity="0.1"/>
      <ellipse id="Ellipse_18" data-name="Ellipse 18" cx="544" cy="30" rx="544" ry="30" transform="translate(0 583.962)" fill="#3f3d56"/>
      <path id="Path_93" data-name="Path 93" d="M624,677.981c0,33.137-14.775,24-33,24s-33,9.137-33-24,33-96,33-96S624,644.844,624,677.981Z" transform="translate(-56 -106.019)" fill="#ff6584"/>
      <path id="Path_94" data-name="Path 94" d="M606,690.66c0,15.062-6.716,10.909-15,10.909s-15,4.153-15-10.909,15-43.636,15-43.636S606,675.6,606,690.66Z" transform="translate(-56 -106.019)" opacity="0.1"/>
      <rect id="Rectangle_97" data-name="Rectangle 97" width="92" height="18" rx="9" transform="translate(489 604.962)" fill="#2f2e41"/>
      <rect id="Rectangle_98" data-name="Rectangle 98" width="92" height="18" rx="9" transform="translate(489 586.962)" fill="#2f2e41"/>
      <path id="Path_95" data-name="Path 95" d="M193,596.547c0,55.343,34.719,100.126,77.626,100.126" transform="translate(-56 -106.019)" fill="#3f3d56"/>
      <path id="Path_96" data-name="Path 96" d="M270.626,696.673c0-55.965,38.745-101.251,86.626-101.251" transform="translate(-56 -106.019)" fill="#6c63ff"/>
      <path id="Path_97" data-name="Path 97" d="M221.125,601.564c0,52.57,22.14,95.109,49.5,95.109" transform="translate(-56 -106.019)" fill="#6c63ff"/>
      <path id="Path_98" data-name="Path 98" d="M270.626,696.673c0-71.511,44.783-129.377,100.126-129.377" transform="translate(-56 -106.019)" fill="#3f3d56"/>
      <path id="Path_99" data-name="Path 99" d="M254.3,697.379s11.009-.339,14.326-2.7,16.934-5.183,17.757-1.395,16.544,18.844,4.115,18.945-28.879-1.936-32.19-3.953S254.3,697.379,254.3,697.379Z" transform="translate(-56 -106.019)" fill="#a8a8a8"/>
      <path id="Path_100" data-name="Path 100" d="M290.716,710.909c-12.429.1-28.879-1.936-32.19-3.953-2.522-1.536-3.527-7.048-3.863-9.591l-.368.014s.7,8.879,4.009,10.9,19.761,4.053,32.19,3.953c3.588-.029,4.827-1.305,4.759-3.2C294.755,710.174,293.386,710.887,290.716,710.909Z" transform="translate(-56 -106.019)" opacity="0.2"/>
      <path id="Path_101" data-name="Path 101" d="M777.429,633.081c0,38.029,23.857,68.8,53.341,68.8" transform="translate(-56 -106.019)" fill="#3f3d56"/>
      <path id="Path_102" data-name="Path 102" d="M830.769,701.882c0-38.456,26.623-69.575,59.525-69.575" transform="translate(-56 -106.019)" fill="#6c63ff"/>
      <path id="Path_103" data-name="Path 103" d="M796.755,636.528c0,36.124,15.213,65.354,34.014,65.354" transform="translate(-56 -106.019)" fill="#6c63ff"/>
      <path id="Path_104" data-name="Path 104" d="M830.769,701.882c0-49.139,30.773-88.9,68.8-88.9" transform="translate(-56 -106.019)" fill="#3f3d56"/>
      <path id="Path_105" data-name="Path 105" d="M819.548,702.367s7.565-.233,9.844-1.856,11.636-3.562,12.2-.958,11.368,12.949,2.828,13.018-19.844-1.33-22.119-2.716S819.548,702.367,819.548,702.367Z" transform="translate(-56 -106.019)" fill="#a8a8a8"/>
      <path id="Path_106" data-name="Path 106" d="M844.574,711.664c-8.54.069-19.844-1.33-22.119-2.716-1.733-1.056-2.423-4.843-2.654-6.59l-.253.01s.479,6.1,2.755,7.487,13.579,2.785,22.119,2.716c2.465-.02,3.317-.9,3.27-2.2C847.349,711.159,846.409,711.649,844.574,711.664Z" transform="translate(-56 -106.019)" opacity="0.2"/>
      <path id="Path_107" data-name="Path 107" d="M949.813,724.718s11.36-1.729,14.5-4.591,16.89-7.488,18.217-3.667,19.494,17.447,6.633,19.107-30.153,1.609-33.835-.065S949.813,724.718,949.813,724.718Z" transform="translate(-56 -106.019)" fill="#a8a8a8"/>
      <path id="Path_108" data-name="Path 108" d="M989.228,734.173c-12.86,1.659-30.153,1.609-33.835-.065-2.8-1.275-4.535-6.858-5.2-9.45l-.379.061s1.833,9.109,5.516,10.783,20.975,1.725,33.835.065c3.712-.479,4.836-1.956,4.529-3.906C993.319,732.907,991.991,733.817,989.228,734.173Z" transform="translate(-56 -106.019)" opacity="0.2"/>
      <path id="Path_109" data-name="Path 109" d="M670.26,723.9s9.587-1.459,12.237-3.875,14.255-6.32,15.374-3.095,16.452,14.725,5.6,16.125-25.448,1.358-28.555-.055S670.26,723.9,670.26,723.9Z" transform="translate(-56 -106.019)" fill="#a8a8a8"/>
      <path id="Path_110" data-name="Path 110" d="M703.524,731.875c-10.853,1.4-25.448,1.358-28.555-.055-2.367-1.076-3.827-5.788-4.39-7.976l-.32.051s1.547,7.687,4.655,9.1,17.7,1.456,28.555.055c3.133-.4,4.081-1.651,3.822-3.3C706.977,730.807,705.856,731.575,703.524,731.875Z" transform="translate(-56 -106.019)" opacity="0.2"/>
      <path id="Path_111" data-name="Path 111" d="M178.389,719.109s7.463-1.136,9.527-3.016,11.1-4.92,11.969-2.409,12.808,11.463,4.358,12.553-19.811,1.057-22.23-.043S178.389,719.109,178.389,719.109Z" transform="translate(-56 -106.019)" fill="#a8a8a8"/>
      <path id="Path_112" data-name="Path 112" d="M204.285,725.321c-8.449,1.09-19.811,1.057-22.23-.043-1.842-.838-2.979-4.506-3.417-6.209l-.249.04s1.2,5.984,3.624,7.085,13.781,1.133,22.23.043c2.439-.315,3.177-1.285,2.976-2.566C206.973,724.489,206.1,725.087,204.285,725.321Z" transform="translate(-56 -106.019)" opacity="0.2"/>
      <path id="Path_113" data-name="Path 113" d="M439.7,707.337c0,30.22-42.124,20.873-93.7,20.873s-93.074,9.347-93.074-20.873,42.118-36.793,93.694-36.793S439.7,677.117,439.7,707.337Z" transform="translate(-56 -106.019)" opacity="0.1"/>
      <path id="Path_114" data-name="Path 114" d="M439.7,699.9c0,30.22-42.124,20.873-93.7,20.873s-93.074,9.347-93.074-20.873S295.04,663.1,346.616,663.1,439.7,669.676,439.7,699.9Z" transform="translate(-56 -106.019)" fill="#3f3d56"/>
    </g>
    <g id="docusaurus_keytar" transform="translate(312.271 493.733)">
      <path id="Path_40" data-name="Path 40" d="M99,52h91.791V89.153H99Z" transform="translate(5.904 -14.001)" fill="#fff" fill-rule="evenodd"/>
      <path id="Path_41" data-name="Path 41" d="M24.855,163.927A21.828,21.828,0,0,1,5.947,153a21.829,21.829,0,0,0,18.908,32.782H46.71V163.927Z" transform="translate(-3 -4.634)" fill="#3ecc5f" fill-rule="evenodd"/>
      <path id="Path_42" data-name="Path 42" d="M121.861,61.1l76.514-4.782V45.39A21.854,21.854,0,0,0,176.52,23.535H78.173L75.441,18.8a3.154,3.154,0,0,0-5.464,0l-2.732,4.732L64.513,18.8a3.154,3.154,0,0,0-5.464,0l-2.732,4.732L53.586,18.8a3.154,3.154,0,0,0-5.464,0L45.39,23.535c-.024,0-.046,0-.071,0l-4.526-4.525a3.153,3.153,0,0,0-5.276,1.414l-1.5,5.577-5.674-1.521a3.154,3.154,0,0,0-3.863,3.864L26,34.023l-5.575,1.494a3.155,3.155,0,0,0-1.416,5.278l4.526,4.526c0,.023,0,.046,0,.07L18.8,48.122a3.154,3.154,0,0,0,0,5.464l4.732,2.732L18.8,59.05a3.154,3.154,0,0,0,0,5.464l4.732,2.732L18.8,69.977a3.154,3.154,0,0,0,0,5.464l4.732,2.732L18.8,80.9a3.154,3.154,0,0,0,0,5.464L23.535,89.1,18.8,91.832a3.154,3.154,0,0,0,0,5.464l4.732,2.732L18.8,102.76a3.154,3.154,0,0,0,0,5.464l4.732,2.732L18.8,113.687a3.154,3.154,0,0,0,0,5.464l4.732,2.732L18.8,124.615a3.154,3.154,0,0,0,0,5.464l4.732,2.732L18.8,135.542a3.154,3.154,0,0,0,0,5.464l4.732,2.732L18.8,146.469a3.154,3.154,0,0,0,0,5.464l4.732,2.732L18.8,157.4a3.154,3.154,0,0,0,0,5.464l4.732,2.732L18.8,168.324a3.154,3.154,0,0,0,0,5.464l4.732,2.732A21.854,21.854,0,0,0,45.39,198.375H176.52a21.854,21.854,0,0,0,21.855-21.855V89.1l-76.514-4.782a11.632,11.632,0,0,1,0-23.219" transform="translate(-1.681 -17.226)" fill="#3ecc5f" fill-rule="evenodd"/>
      <path id="Path_43" data-name="Path 43" d="M143,186.71h32.782V143H143Z" transform="translate(9.984 -5.561)" fill="#3ecc5f" fill-rule="evenodd"/>
      <path id="Path_44" data-name="Path 44" d="M196.71,159.855a5.438,5.438,0,0,0-.7.07c-.042-.164-.081-.329-.127-.493a5.457,5.457,0,1,0-5.4-9.372q-.181-.185-.366-.367a5.454,5.454,0,1,0-9.384-5.4c-.162-.046-.325-.084-.486-.126a5.467,5.467,0,1,0-10.788,0c-.162.042-.325.08-.486.126a5.457,5.457,0,1,0-9.384,5.4,21.843,21.843,0,1,0,36.421,21.02,5.452,5.452,0,1,0,.7-10.858" transform="translate(10.912 -6.025)" fill="#44d860" fill-rule="evenodd"/>
      <path id="Path_45" data-name="Path 45" d="M153,124.855h32.782V103H153Z" transform="translate(10.912 -9.271)" fill="#3ecc5f" fill-rule="evenodd"/>
      <path id="Path_46" data-name="Path 46" d="M194.855,116.765a2.732,2.732,0,1,0,0-5.464,2.811,2.811,0,0,0-.349.035c-.022-.082-.04-.164-.063-.246a2.733,2.733,0,0,0-1.052-5.253,2.7,2.7,0,0,0-1.648.566q-.09-.093-.184-.184a2.7,2.7,0,0,0,.553-1.633,2.732,2.732,0,0,0-5.245-1.07,10.928,10.928,0,1,0,0,21.031,2.732,2.732,0,0,0,5.245-1.07,2.7,2.7,0,0,0-.553-1.633q.093-.09.184-.184a2.7,2.7,0,0,0,1.648.566,2.732,2.732,0,0,0,1.052-5.253c.023-.081.042-.164.063-.246a2.814,2.814,0,0,0,.349.035" transform="translate(12.767 -9.377)" fill="#44d860" fill-rule="evenodd"/>
      <path id="Path_47" data-name="Path 47" d="M65.087,56.891a2.732,2.732,0,0,1-2.732-2.732,8.2,8.2,0,0,0-16.391,0,2.732,2.732,0,0,1-5.464,0,13.659,13.659,0,0,1,27.319,0,2.732,2.732,0,0,1-2.732,2.732" transform="translate(0.478 -15.068)" fill-rule="evenodd"/>
      <path id="Path_48" data-name="Path 48" d="M103,191.347h65.565a21.854,21.854,0,0,0,21.855-21.855V93H124.855A21.854,21.854,0,0,0,103,114.855Z" transform="translate(6.275 -10.199)" fill="#ffff50" fill-rule="evenodd"/>
      <path id="Path_49" data-name="Path 49" d="M173.216,129.787H118.535a1.093,1.093,0,1,1,0-2.185h54.681a1.093,1.093,0,0,1,0,2.185m0,21.855H118.535a1.093,1.093,0,1,1,0-2.186h54.681a1.093,1.093,0,0,1,0,2.186m0,21.855H118.535a1.093,1.093,0,1,1,0-2.185h54.681a1.093,1.093,0,0,1,0,2.185m0-54.434H118.535a1.093,1.093,0,1,1,0-2.185h54.681a1.093,1.093,0,0,1,0,2.185m0,21.652H118.535a1.093,1.093,0,1,1,0-2.186h54.681a1.093,1.093,0,0,1,0,2.186m0,21.855H118.535a1.093,1.093,0,1,1,0-2.186h54.681a1.093,1.093,0,0,1,0,2.186M189.585,61.611c-.013,0-.024-.007-.037-.005-3.377.115-4.974,3.492-6.384,6.472-1.471,3.114-2.608,5.139-4.473,5.078-2.064-.074-3.244-2.406-4.494-4.874-1.436-2.835-3.075-6.049-6.516-5.929-3.329.114-4.932,3.053-6.346,5.646-1.5,2.762-2.529,4.442-4.5,4.364-2.106-.076-3.225-1.972-4.52-4.167-1.444-2.443-3.112-5.191-6.487-5.1-3.272.113-4.879,2.606-6.3,4.808-1.5,2.328-2.552,3.746-4.551,3.662-2.156-.076-3.27-1.65-4.558-3.472-1.447-2.047-3.077-4.363-6.442-4.251-3.2.109-4.807,2.153-6.224,3.954-1.346,1.709-2.4,3.062-4.621,2.977a1.093,1.093,0,0,0-.079,2.186c3.3.11,4.967-1.967,6.417-3.81,1.286-1.635,2.4-3.045,4.582-3.12,2.1-.09,3.091,1.218,4.584,3.327,1.417,2,3.026,4.277,6.263,4.394,3.391.114,5.022-2.42,6.467-4.663,1.292-2,2.406-3.734,4.535-3.807,1.959-.073,3.026,1.475,4.529,4.022,1.417,2.4,3.023,5.121,6.324,5.241,3.415.118,5.064-2.863,6.5-5.5,1.245-2.282,2.419-4.437,4.5-4.509,1.959-.046,2.981,1.743,4.492,4.732,1.412,2.79,3.013,5.95,6.365,6.071l.185,0c3.348,0,4.937-3.36,6.343-6.331,1.245-2.634,2.423-5.114,4.444-5.216Z" transform="translate(7.109 -13.11)" fill-rule="evenodd"/>
      <path id="Path_50" data-name="Path 50" d="M83,186.71h43.71V143H83Z" transform="translate(4.42 -5.561)" fill="#3ecc5f" fill-rule="evenodd"/>
      <g id="Group_8" data-name="Group 8" transform="matrix(0.966, -0.259, 0.259, 0.966, 109.327, 91.085)">
        <rect id="Rectangle_3" data-name="Rectangle 3" width="92.361" height="36.462" rx="2" transform="translate(0 0)" fill="#d8d8d8"/>
        <g id="Group_2" data-name="Group 2" transform="translate(1.531 23.03)">
          <rect id="Rectangle_4" data-name="Rectangle 4" width="5.336" height="5.336" rx="1" transform="translate(16.797 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_5" data-name="Rectangle 5" width="5.336" height="5.336" rx="1" transform="translate(23.12 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_6" data-name="Rectangle 6" width="5.336" height="5.336" rx="1" transform="translate(29.444 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_7" data-name="Rectangle 7" width="5.336" height="5.336" rx="1" transform="translate(35.768 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_8" data-name="Rectangle 8" width="5.336" height="5.336" rx="1" transform="translate(42.091 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_9" data-name="Rectangle 9" width="5.336" height="5.336" rx="1" transform="translate(48.415 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_10" data-name="Rectangle 10" width="5.336" height="5.336" rx="1" transform="translate(54.739 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_11" data-name="Rectangle 11" width="5.336" height="5.336" rx="1" transform="translate(61.063 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_12" data-name="Rectangle 12" width="5.336" height="5.336" rx="1" transform="translate(67.386 0)" fill="#4a4a4a"/>
          <path id="Path_51" data-name="Path 51" d="M1.093,0H14.518a1.093,1.093,0,0,1,1.093,1.093V4.243a1.093,1.093,0,0,1-1.093,1.093H1.093A1.093,1.093,0,0,1,0,4.243V1.093A1.093,1.093,0,0,1,1.093,0ZM75,0H88.426a1.093,1.093,0,0,1,1.093,1.093V4.243a1.093,1.093,0,0,1-1.093,1.093H75a1.093,1.093,0,0,1-1.093-1.093V1.093A1.093,1.093,0,0,1,75,0Z" transform="translate(0 0)" fill="#4a4a4a" fill-rule="evenodd"/>
        </g>
        <g id="Group_3" data-name="Group 3" transform="translate(1.531 10.261)">
          <path id="Path_52" data-name="Path 52" d="M1.093,0H6.218A1.093,1.093,0,0,1,7.31,1.093V4.242A1.093,1.093,0,0,1,6.218,5.335H1.093A1.093,1.093,0,0,1,0,4.242V1.093A1.093,1.093,0,0,1,1.093,0Z" transform="translate(0 0)" fill="#4a4a4a" fill-rule="evenodd"/>
          <rect id="Rectangle_13" data-name="Rectangle 13" width="5.336" height="5.336" rx="1" transform="translate(8.299 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_14" data-name="Rectangle 14" width="5.336" height="5.336" rx="1" transform="translate(14.623 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_15" data-name="Rectangle 15" width="5.336" height="5.336" rx="1" transform="translate(20.947 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_16" data-name="Rectangle 16" width="5.336" height="5.336" rx="1" transform="translate(27.271 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_17" data-name="Rectangle 17" width="5.336" height="5.336" rx="1" transform="translate(33.594 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_18" data-name="Rectangle 18" width="5.336" height="5.336" rx="1" transform="translate(39.918 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_19" data-name="Rectangle 19" width="5.336" height="5.336" rx="1" transform="translate(46.242 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_20" data-name="Rectangle 20" width="5.336" height="5.336" rx="1" transform="translate(52.565 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_21" data-name="Rectangle 21" width="5.336" height="5.336" rx="1" transform="translate(58.888 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_22" data-name="Rectangle 22" width="5.336" height="5.336" rx="1" transform="translate(65.212 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_23" data-name="Rectangle 23" width="5.336" height="5.336" rx="1" transform="translate(71.536 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_24" data-name="Rectangle 24" width="5.336" height="5.336" rx="1" transform="translate(77.859 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_25" data-name="Rectangle 25" width="5.336" height="5.336" rx="1" transform="translate(84.183 0)" fill="#4a4a4a"/>
        </g>
        <g id="Group_4" data-name="Group 4" transform="translate(91.05 9.546) rotate(180)">
          <path id="Path_53" data-name="Path 53" d="M1.093,0H6.219A1.093,1.093,0,0,1,7.312,1.093v3.15A1.093,1.093,0,0,1,6.219,5.336H1.093A1.093,1.093,0,0,1,0,4.243V1.093A1.093,1.093,0,0,1,1.093,0Z" transform="translate(0 0)" fill="#4a4a4a" fill-rule="evenodd"/>
          <rect id="Rectangle_26" data-name="Rectangle 26" width="5.336" height="5.336" rx="1" transform="translate(8.299 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_27" data-name="Rectangle 27" width="5.336" height="5.336" rx="1" transform="translate(14.623 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_28" data-name="Rectangle 28" width="5.336" height="5.336" rx="1" transform="translate(20.947 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_29" data-name="Rectangle 29" width="5.336" height="5.336" rx="1" transform="translate(27.271 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_30" data-name="Rectangle 30" width="5.336" height="5.336" rx="1" transform="translate(33.594 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_31" data-name="Rectangle 31" width="5.336" height="5.336" rx="1" transform="translate(39.918 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_32" data-name="Rectangle 32" width="5.336" height="5.336" rx="1" transform="translate(46.242 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_33" data-name="Rectangle 33" width="5.336" height="5.336" rx="1" transform="translate(52.565 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_34" data-name="Rectangle 34" width="5.336" height="5.336" rx="1" transform="translate(58.889 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_35" data-name="Rectangle 35" width="5.336" height="5.336" rx="1" transform="translate(65.213 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_36" data-name="Rectangle 36" width="5.336" height="5.336" rx="1" transform="translate(71.537 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_37" data-name="Rectangle 37" width="5.336" height="5.336" rx="1" transform="translate(77.86 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_38" data-name="Rectangle 38" width="5.336" height="5.336" rx="1" transform="translate(84.183 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_39" data-name="Rectangle 39" width="5.336" height="5.336" rx="1" transform="translate(8.299 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_40" data-name="Rectangle 40" width="5.336" height="5.336" rx="1" transform="translate(14.623 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_41" data-name="Rectangle 41" width="5.336" height="5.336" rx="1" transform="translate(20.947 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_42" data-name="Rectangle 42" width="5.336" height="5.336" rx="1" transform="translate(27.271 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_43" data-name="Rectangle 43" width="5.336" height="5.336" rx="1" transform="translate(33.594 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_44" data-name="Rectangle 44" width="5.336" height="5.336" rx="1" transform="translate(39.918 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_45" data-name="Rectangle 45" width="5.336" height="5.336" rx="1" transform="translate(46.242 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_46" data-name="Rectangle 46" width="5.336" height="5.336" rx="1" transform="translate(52.565 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_47" data-name="Rectangle 47" width="5.336" height="5.336" rx="1" transform="translate(58.889 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_48" data-name="Rectangle 48" width="5.336" height="5.336" rx="1" transform="translate(65.213 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_49" data-name="Rectangle 49" width="5.336" height="5.336" rx="1" transform="translate(71.537 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_50" data-name="Rectangle 50" width="5.336" height="5.336" rx="1" transform="translate(77.86 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_51" data-name="Rectangle 51" width="5.336" height="5.336" rx="1" transform="translate(84.183 0)" fill="#4a4a4a"/>
        </g>
        <g id="Group_6" data-name="Group 6" transform="translate(1.531 16.584)">
          <path id="Path_54" data-name="Path 54" d="M1.093,0h7.3A1.093,1.093,0,0,1,9.485,1.093v3.15A1.093,1.093,0,0,1,8.392,5.336h-7.3A1.093,1.093,0,0,1,0,4.243V1.094A1.093,1.093,0,0,1,1.093,0Z" transform="translate(0 0)" fill="#4a4a4a" fill-rule="evenodd"/>
          <g id="Group_5" data-name="Group 5" transform="translate(10.671 0)">
            <rect id="Rectangle_52" data-name="Rectangle 52" width="5.336" height="5.336" rx="1" fill="#4a4a4a"/>
            <rect id="Rectangle_53" data-name="Rectangle 53" width="5.336" height="5.336" rx="1" transform="translate(6.324 0)" fill="#4a4a4a"/>
            <rect id="Rectangle_54" data-name="Rectangle 54" width="5.336" height="5.336" rx="1" transform="translate(12.647 0)" fill="#4a4a4a"/>
            <rect id="Rectangle_55" data-name="Rectangle 55" width="5.336" height="5.336" rx="1" transform="translate(18.971 0)" fill="#4a4a4a"/>
            <rect id="Rectangle_56" data-name="Rectangle 56" width="5.336" height="5.336" rx="1" transform="translate(25.295 0)" fill="#4a4a4a"/>
            <rect id="Rectangle_57" data-name="Rectangle 57" width="5.336" height="5.336" rx="1" transform="translate(31.619 0)" fill="#4a4a4a"/>
            <rect id="Rectangle_58" data-name="Rectangle 58" width="5.336" height="5.336" rx="1" transform="translate(37.942 0)" fill="#4a4a4a"/>
            <rect id="Rectangle_59" data-name="Rectangle 59" width="5.336" height="5.336" rx="1" transform="translate(44.265 0)" fill="#4a4a4a"/>
            <rect id="Rectangle_60" data-name="Rectangle 60" width="5.336" height="5.336" rx="1" transform="translate(50.589 0)" fill="#4a4a4a"/>
            <rect id="Rectangle_61" data-name="Rectangle 61" width="5.336" height="5.336" rx="1" transform="translate(56.912 0)" fill="#4a4a4a"/>
            <rect id="Rectangle_62" data-name="Rectangle 62" width="5.336" height="5.336" rx="1" transform="translate(63.236 0)" fill="#4a4a4a"/>
          </g>
          <path id="Path_55" data-name="Path 55" d="M1.094,0H8A1.093,1.093,0,0,1,9.091,1.093v3.15A1.093,1.093,0,0,1,8,5.336H1.093A1.093,1.093,0,0,1,0,4.243V1.094A1.093,1.093,0,0,1,1.093,0Z" transform="translate(80.428 0)" fill="#4a4a4a" fill-rule="evenodd"/>
        </g>
        <g id="Group_7" data-name="Group 7" transform="translate(1.531 29.627)">
          <rect id="Rectangle_63" data-name="Rectangle 63" width="5.336" height="5.336" rx="1" transform="translate(0 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_64" data-name="Rectangle 64" width="5.336" height="5.336" rx="1" transform="translate(6.324 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_65" data-name="Rectangle 65" width="5.336" height="5.336" rx="1" transform="translate(12.647 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_66" data-name="Rectangle 66" width="5.336" height="5.336" rx="1" transform="translate(18.971 0)" fill="#4a4a4a"/>
          <path id="Path_56" data-name="Path 56" d="M1.093,0H31.515a1.093,1.093,0,0,1,1.093,1.093V4.244a1.093,1.093,0,0,1-1.093,1.093H1.093A1.093,1.093,0,0,1,0,4.244V1.093A1.093,1.093,0,0,1,1.093,0ZM34.687,0h3.942a1.093,1.093,0,0,1,1.093,1.093V4.244a1.093,1.093,0,0,1-1.093,1.093H34.687a1.093,1.093,0,0,1-1.093-1.093V1.093A1.093,1.093,0,0,1,34.687,0Z" transform="translate(25.294 0)" fill="#4a4a4a" fill-rule="evenodd"/>
          <rect id="Rectangle_67" data-name="Rectangle 67" width="5.336" height="5.336" rx="1" transform="translate(66.003 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_68" data-name="Rectangle 68" width="5.336" height="5.336" rx="1" transform="translate(72.327 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_69" data-name="Rectangle 69" width="5.336" height="5.336" rx="1" transform="translate(84.183 0)" fill="#4a4a4a"/>
          <path id="Path_57" data-name="Path 57" d="M5.336,0V1.18A1.093,1.093,0,0,1,4.243,2.273H1.093A1.093,1.093,0,0,1,0,1.18V0Z" transform="translate(83.59 2.273) rotate(180)" fill="#4a4a4a"/>
          <path id="Path_58" data-name="Path 58" d="M5.336,0V1.18A1.093,1.093,0,0,1,4.243,2.273H1.093A1.093,1.093,0,0,1,0,1.18V0Z" transform="translate(78.255 3.063)" fill="#4a4a4a"/>
        </g>
        <rect id="Rectangle_70" data-name="Rectangle 70" width="88.927" height="2.371" rx="1.085" transform="translate(1.925 1.17)" fill="#4a4a4a"/>
        <rect id="Rectangle_71" data-name="Rectangle 71" width="4.986" height="1.581" rx="0.723" transform="translate(4.1 1.566)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_72" data-name="Rectangle 72" width="4.986" height="1.581" rx="0.723" transform="translate(10.923 1.566)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_73" data-name="Rectangle 73" width="4.986" height="1.581" rx="0.723" transform="translate(16.173 1.566)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_74" data-name="Rectangle 74" width="4.986" height="1.581" rx="0.723" transform="translate(21.421 1.566)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_75" data-name="Rectangle 75" width="4.986" height="1.581" rx="0.723" transform="translate(26.671 1.566)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_76" data-name="Rectangle 76" width="4.986" height="1.581" rx="0.723" transform="translate(33.232 1.566)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_77" data-name="Rectangle 77" width="4.986" height="1.581" rx="0.723" transform="translate(38.48 1.566)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_78" data-name="Rectangle 78" width="4.986" height="1.581" rx="0.723" transform="translate(43.73 1.566)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_79" data-name="Rectangle 79" width="4.986" height="1.581" rx="0.723" transform="translate(48.978 1.566)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_80" data-name="Rectangle 80" width="4.986" height="1.581" rx="0.723" transform="translate(55.54 1.566)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_81" data-name="Rectangle 81" width="4.986" height="1.581" rx="0.723" transform="translate(60.788 1.566)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_82" data-name="Rectangle 82" width="4.986" height="1.581" rx="0.723" transform="translate(66.038 1.566)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_83" data-name="Rectangle 83" width="4.986" height="1.581" rx="0.723" transform="translate(72.599 1.566)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_84" data-name="Rectangle 84" width="4.986" height="1.581" rx="0.723" transform="translate(77.847 1.566)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_85" data-name="Rectangle 85" width="4.986" height="1.581" rx="0.723" transform="translate(83.097 1.566)" fill="#d8d8d8" opacity="0.136"/>
      </g>
      <path id="Path_59" data-name="Path 59" d="M146.71,159.855a5.439,5.439,0,0,0-.7.07c-.042-.164-.081-.329-.127-.493a5.457,5.457,0,1,0-5.4-9.372q-.181-.185-.366-.367a5.454,5.454,0,1,0-9.384-5.4c-.162-.046-.325-.084-.486-.126a5.467,5.467,0,1,0-10.788,0c-.162.042-.325.08-.486.126a5.457,5.457,0,1,0-9.384,5.4,21.843,21.843,0,1,0,36.421,21.02,5.452,5.452,0,1,0,.7-10.858" transform="translate(6.275 -6.025)" fill="#44d860" fill-rule="evenodd"/>
      <path id="Path_60" data-name="Path 60" d="M83,124.855h43.71V103H83Z" transform="translate(4.42 -9.271)" fill="#3ecc5f" fill-rule="evenodd"/>
      <path id="Path_61" data-name="Path 61" d="M134.855,116.765a2.732,2.732,0,1,0,0-5.464,2.811,2.811,0,0,0-.349.035c-.022-.082-.04-.164-.063-.246a2.733,2.733,0,0,0-1.052-5.253,2.7,2.7,0,0,0-1.648.566q-.09-.093-.184-.184a2.7,2.7,0,0,0,.553-1.633,2.732,2.732,0,0,0-5.245-1.07,10.928,10.928,0,1,0,0,21.031,2.732,2.732,0,0,0,5.245-1.07,2.7,2.7,0,0,0-.553-1.633q.093-.09.184-.184a2.7,2.7,0,0,0,1.648.566,2.732,2.732,0,0,0,1.052-5.253c.023-.081.042-.164.063-.246a2.811,2.811,0,0,0,.349.035" transform="translate(7.202 -9.377)" fill="#44d860" fill-rule="evenodd"/>
      <path id="Path_62" data-name="Path 62" d="M143.232,42.33a2.967,2.967,0,0,1-.535-.055,2.754,2.754,0,0,1-.514-.153,2.838,2.838,0,0,1-.471-.251,4.139,4.139,0,0,1-.415-.339,3.2,3.2,0,0,1-.338-.415A2.7,2.7,0,0,1,140.5,39.6a2.968,2.968,0,0,1,.055-.535,3.152,3.152,0,0,1,.152-.514,2.874,2.874,0,0,1,.252-.47,2.633,2.633,0,0,1,.753-.754,2.837,2.837,0,0,1,.471-.251,2.753,2.753,0,0,1,.514-.153,2.527,2.527,0,0,1,1.071,0,2.654,2.654,0,0,1,.983.4,4.139,4.139,0,0,1,.415.339,4.019,4.019,0,0,1,.339.415,2.786,2.786,0,0,1,.251.47,2.864,2.864,0,0,1,.208,1.049,2.77,2.77,0,0,1-.8,1.934,4.139,4.139,0,0,1-.415.339,2.722,2.722,0,0,1-1.519.459m21.855-1.366a2.789,2.789,0,0,1-1.935-.8,4.162,4.162,0,0,1-.338-.415,2.7,2.7,0,0,1-.459-1.519,2.789,2.789,0,0,1,.8-1.934,4.139,4.139,0,0,1,.415-.339,2.838,2.838,0,0,1,.471-.251,2.752,2.752,0,0,1,.514-.153,2.527,2.527,0,0,1,1.071,0,2.654,2.654,0,0,1,.983.4,4.139,4.139,0,0,1,.415.339,2.79,2.79,0,0,1,.8,1.934,3.069,3.069,0,0,1-.055.535,2.779,2.779,0,0,1-.153.514,3.885,3.885,0,0,1-.251.47,4.02,4.02,0,0,1-.339.415,4.138,4.138,0,0,1-.415.339,2.722,2.722,0,0,1-1.519.459" transform="translate(9.753 -15.532)" fill-rule="evenodd"/>
    </g>
  </g>
</svg>

'''
'''--- static/img/undraw_docusaurus_react.svg ---
<svg xmlns="http://www.w3.org/2000/svg" width="1041.277" height="554.141" viewBox="0 0 1041.277 554.141">
  <g id="Group_24" data-name="Group 24" transform="translate(-440 -263)">
    <g id="Group_23" data-name="Group 23" transform="translate(439.989 262.965)">
      <path id="Path_299" data-name="Path 299" d="M1040.82,611.12q-1.74,3.75-3.47,7.4-2.7,5.67-5.33,11.12c-.78,1.61-1.56,3.19-2.32,4.77-8.6,17.57-16.63,33.11-23.45,45.89A73.21,73.21,0,0,1,942.44,719l-151.65,1.65h-1.6l-13,.14-11.12.12-34.1.37h-1.38l-17.36.19h-.53l-107,1.16-95.51,1-11.11.12-69,.75H429l-44.75.48h-.48l-141.5,1.53-42.33.46a87.991,87.991,0,0,1-10.79-.54h0c-1.22-.14-2.44-.3-3.65-.49a87.38,87.38,0,0,1-51.29-27.54C116,678.37,102.75,655,93.85,629.64q-1.93-5.49-3.6-11.12C59.44,514.37,97,380,164.6,290.08q4.25-5.64,8.64-11l.07-.08c20.79-25.52,44.1-46.84,68.93-62,44-26.91,92.75-34.49,140.7-11.9,40.57,19.12,78.45,28.11,115.17,30.55,3.71.24,7.42.42,11.11.53,84.23,2.65,163.17-27.7,255.87-47.29,3.69-.78,7.39-1.55,11.12-2.28,66.13-13.16,139.49-20.1,226.73-5.51a189.089,189.089,0,0,1,26.76,6.4q5.77,1.86,11.12,4c41.64,16.94,64.35,48.24,74,87.46q1.37,5.46,2.37,11.11C1134.3,384.41,1084.19,518.23,1040.82,611.12Z" transform="translate(-79.34 -172.91)" fill="#f2f2f2"/>
      <path id="Path_300" data-name="Path 300" d="M576.36,618.52a95.21,95.21,0,0,1-1.87,11.12h93.7V618.52Zm-78.25,62.81,11.11-.09V653.77c-3.81-.17-7.52-.34-11.11-.52ZM265.19,618.52v11.12h198.5V618.52ZM1114.87,279h-74V191.51q-5.35-2.17-11.12-4V279H776.21V186.58c-3.73.73-7.43,1.5-11.12,2.28V279H509.22V236.15c-3.69-.11-7.4-.29-11.11-.53V279H242.24V217c-24.83,15.16-48.14,36.48-68.93,62h-.07v.08q-4.4,5.4-8.64,11h8.64V618.52h-83q1.66,5.63,3.6,11.12h79.39v93.62a87,87,0,0,0,12.2,2.79c1.21.19,2.43.35,3.65.49h0a87.991,87.991,0,0,0,10.79.54l42.33-.46v-97H498.11v94.21l11.11-.12V629.64H765.09V721l11.12-.12V629.64H1029.7v4.77c.76-1.58,1.54-3.16,2.32-4.77q2.63-5.45,5.33-11.12,1.73-3.64,3.47-7.4v-321h76.42Q1116.23,284.43,1114.87,279ZM242.24,618.52V290.08H498.11V618.52Zm267,0V290.08H765.09V618.52Zm520.48,0H776.21V290.08H1029.7Z" transform="translate(-79.34 -172.91)" opacity="0.1"/>
      <path id="Path_301" data-name="Path 301" d="M863.09,533.65v13l-151.92,1.4-1.62.03-57.74.53-1.38.02-17.55.15h-.52l-106.98.99L349.77,551.4h-.15l-44.65.42-.48.01-198.4,1.82v-15l46.65-28,93.6-.78,2-.01.66-.01,2-.03,44.94-.37,2.01-.01.64-.01,2-.01L315,509.3l.38-.01,35.55-.3h.29l277.4-2.34,6.79-.05h.68l5.18-.05,37.65-.31,2-.03,1.85-.02h.96l11.71-.09,2.32-.03,3.11-.02,9.75-.09,15.47-.13,2-.02,3.48-.02h.65l74.71-.64Z" fill="#65617d"/>
      <path id="Path_302" data-name="Path 302" d="M863.09,533.65v13l-151.92,1.4-1.62.03-57.74.53-1.38.02-17.55.15h-.52l-106.98.99L349.77,551.4h-.15l-44.65.42-.48.01-198.4,1.82v-15l46.65-28,93.6-.78,2-.01.66-.01,2-.03,44.94-.37,2.01-.01.64-.01,2-.01L315,509.3l.38-.01,35.55-.3h.29l277.4-2.34,6.79-.05h.68l5.18-.05,37.65-.31,2-.03,1.85-.02h.96l11.71-.09,2.32-.03,3.11-.02,9.75-.09,15.47-.13,2-.02,3.48-.02h.65l74.71-.64Z" opacity="0.2"/>
      <path id="Path_303" data-name="Path 303" d="M375.44,656.57v24.49a6.13,6.13,0,0,1-3.5,5.54,6,6,0,0,1-2.5.6l-34.9.74a6,6,0,0,1-2.7-.57,6.12,6.12,0,0,1-3.57-5.57V656.57Z" transform="translate(-79.34 -172.91)" fill="#3f3d56"/>
      <path id="Path_304" data-name="Path 304" d="M375.44,656.57v24.49a6.13,6.13,0,0,1-3.5,5.54,6,6,0,0,1-2.5.6l-34.9.74a6,6,0,0,1-2.7-.57,6.12,6.12,0,0,1-3.57-5.57V656.57Z" transform="translate(-79.34 -172.91)" opacity="0.1"/>
      <path id="Path_305" data-name="Path 305" d="M377.44,656.57v24.49a6.13,6.13,0,0,1-3.5,5.54,6,6,0,0,1-2.5.6l-34.9.74a6,6,0,0,1-2.7-.57,6.12,6.12,0,0,1-3.57-5.57V656.57Z" transform="translate(-79.34 -172.91)" fill="#3f3d56"/>
      <rect id="Rectangle_137" data-name="Rectangle 137" width="47.17" height="31.5" transform="translate(680.92 483.65)" fill="#3f3d56"/>
      <rect id="Rectangle_138" data-name="Rectangle 138" width="47.17" height="31.5" transform="translate(680.92 483.65)" opacity="0.1"/>
      <rect id="Rectangle_139" data-name="Rectangle 139" width="47.17" height="31.5" transform="translate(678.92 483.65)" fill="#3f3d56"/>
      <path id="Path_306" data-name="Path 306" d="M298.09,483.65v4.97l-47.17,1.26v-6.23Z" opacity="0.1"/>
      <path id="Path_307" data-name="Path 307" d="M460.69,485.27v168.2a4,4,0,0,1-3.85,3.95l-191.65,5.1h-.05a4,4,0,0,1-3.95-3.95V485.27a4,4,0,0,1,3.95-3.95h191.6a4,4,0,0,1,3.95,3.95Z" transform="translate(-79.34 -172.91)" fill="#65617d"/>
      <path id="Path_308" data-name="Path 308" d="M265.19,481.32v181.2h-.05a4,4,0,0,1-3.95-3.95V485.27a4,4,0,0,1,3.95-3.95Z" transform="translate(-79.34 -172.91)" opacity="0.1"/>
      <path id="Path_309" data-name="Path 309" d="M194.59,319.15h177.5V467.4l-177.5,4Z" fill="#39374d"/>
      <path id="Path_310" data-name="Path 310" d="M726.09,483.65v6.41l-47.17-1.26v-5.15Z" opacity="0.1"/>
      <path id="Path_311" data-name="Path 311" d="M867.69,485.27v173.3a4,4,0,0,1-4,3.95h0L672,657.42a4,4,0,0,1-3.85-3.95V485.27a4,4,0,0,1,3.95-3.95H863.7a4,4,0,0,1,3.99,3.95Z" transform="translate(-79.34 -172.91)" fill="#65617d"/>
      <path id="Path_312" data-name="Path 312" d="M867.69,485.27v173.3a4,4,0,0,1-4,3.95h0V481.32h0a4,4,0,0,1,4,3.95Z" transform="translate(-79.34 -172.91)" opacity="0.1"/>
      <path id="Path_313" data-name="Path 313" d="M775.59,319.15H598.09V467.4l177.5,4Z" fill="#39374d"/>
      <path id="Path_314" data-name="Path 314" d="M663.19,485.27v168.2a4,4,0,0,1-3.85,3.95l-191.65,5.1h0a4,4,0,0,1-4-3.95V485.27a4,4,0,0,1,3.95-3.95h191.6A4,4,0,0,1,663.19,485.27Z" transform="translate(-79.34 -172.91)" fill="#65617d"/>
      <path id="Path_315" data-name="Path 315" d="M397.09,319.15h177.5V467.4l-177.5,4Z" fill="#4267b2"/>
      <path id="Path_316" data-name="Path 316" d="M863.09,533.65v13l-151.92,1.4-1.62.03-57.74.53-1.38.02-17.55.15h-.52l-106.98.99L349.77,551.4h-.15l-44.65.42-.48.01-198.4,1.82v-15l202.51-1.33h.48l40.99-.28h.19l283.08-1.87h.29l.17-.01h.47l4.79-.03h1.46l74.49-.5,4.4-.02.98-.01Z" opacity="0.1"/>
      <circle id="Ellipse_111" data-name="Ellipse 111" cx="51.33" cy="51.33" r="51.33" transform="translate(435.93 246.82)" fill="#fbbebe"/>
      <path id="Path_317" data-name="Path 317" d="M617.94,550.07s-99.5,12-90,0c3.44-4.34,4.39-17.2,4.2-31.85-.06-4.45-.22-9.06-.45-13.65-1.1-22-3.75-43.5-3.75-43.5s87-41,77-8.5c-4,13.13-2.69,31.57.35,48.88.89,5.05,1.92,10,3,14.7a344.66,344.66,0,0,0,9.65,33.92Z" transform="translate(-79.34 -172.91)" fill="#fbbebe"/>
      <path id="Path_318" data-name="Path 318" d="M585.47,546c11.51-2.13,23.7-6,34.53-1.54,2.85,1.17,5.47,2.88,8.39,3.86s6.12,1.22,9.16,1.91c10.68,2.42,19.34,10.55,24.9,20s8.44,20.14,11.26,30.72l6.9,25.83c6,22.45,12,45.09,13.39,68.3a2437.506,2437.506,0,0,1-250.84,1.43c5.44-10.34,11-21.31,10.54-33s-7.19-23.22-4.76-34.74c1.55-7.34,6.57-13.39,9.64-20.22,8.75-19.52,1.94-45.79,17.32-60.65,6.92-6.68,17-9.21,26.63-8.89,12.28.41,24.85,4.24,37,6.11C555.09,547.48,569.79,548.88,585.47,546Z" transform="translate(-79.34 -172.91)" fill="#ff6584"/>
      <path id="Path_319" data-name="Path 319" d="M716.37,657.17l-.1,1.43v.1l-.17,2.3-1.33,18.51-1.61,22.3-.46,6.28-1,13.44v.17l-107,1-175.59,1.9v.84h-.14v-1.12l.45-14.36.86-28.06.74-23.79.07-2.37a10.53,10.53,0,0,1,11.42-10.17c4.72.4,10.85.89,18.18,1.41l3,.22c42.33,2.94,120.56,6.74,199.5,2,1.66-.09,3.33-.19,5-.31,12.24-.77,24.47-1.76,36.58-3a10.53,10.53,0,0,1,11.6,11.23Z" transform="translate(-79.34 -172.91)" opacity="0.1"/>
      <path id="Path_320" data-name="Path 320" d="M429.08,725.44v-.84l175.62-1.91,107-1h.3v-.17l1-13.44.43-6,1.64-22.61,1.29-17.9v-.44a10.617,10.617,0,0,0-.11-2.47.3.3,0,0,0,0-.1,10.391,10.391,0,0,0-2-4.64,10.54,10.54,0,0,0-9.42-4c-12.11,1.24-24.34,2.23-36.58,3-1.67.12-3.34.22-5,.31-78.94,4.69-157.17.89-199.5-2l-3-.22c-7.33-.52-13.46-1-18.18-1.41a10.54,10.54,0,0,0-11.24,8.53,11,11,0,0,0-.18,1.64l-.68,22.16L429.54,710l-.44,14.36v1.12Z" transform="translate(-79.34 -172.91)" fill="#3f3d56"/>
      <path id="Path_321" data-name="Path 321" d="M716.67,664.18l-1.23,15.33-1.83,22.85-.46,5.72-1,12.81-.06.64v.17h0l-.15,1.48.11-1.48h-.29l-107,1-175.65,1.9v-.28l.49-14.36,1-28.06.64-18.65A6.36,6.36,0,0,1,434.3,658a6.25,6.25,0,0,1,3.78-.9c2.1.17,4.68.37,7.69.59,4.89.36,10.92.78,17.94,1.22,13,.82,29.31,1.7,48,2.42,52,2,122.2,2.67,188.88-3.17,3-.26,6.1-.55,9.13-.84a6.26,6.26,0,0,1,3.48.66,5.159,5.159,0,0,1,.86.54,6.14,6.14,0,0,1,2,2.46,3.564,3.564,0,0,1,.25.61A6.279,6.279,0,0,1,716.67,664.18Z" transform="translate(-79.34 -172.91)" opacity="0.1"/>
      <path id="Path_322" data-name="Path 322" d="M377.44,677.87v3.19a6.13,6.13,0,0,1-3.5,5.54l-40.1.77a6.12,6.12,0,0,1-3.57-5.57v-3Z" transform="translate(-79.34 -172.91)" opacity="0.1"/>
      <path id="Path_323" data-name="Path 323" d="M298.59,515.57l-52.25,1V507.9l52.25-1Z" fill="#3f3d56"/>
      <path id="Path_324" data-name="Path 324" d="M298.59,515.57l-52.25,1V507.9l52.25-1Z" opacity="0.1"/>
      <path id="Path_325" data-name="Path 325" d="M300.59,515.57l-52.25,1V507.9l52.25-1Z" fill="#3f3d56"/>
      <path id="Path_326" data-name="Path 326" d="M758.56,679.87v3.19a6.13,6.13,0,0,0,3.5,5.54l40.1.77a6.12,6.12,0,0,0,3.57-5.57v-3Z" transform="translate(-79.34 -172.91)" opacity="0.1"/>
      <path id="Path_327" data-name="Path 327" d="M678.72,517.57l52.25,1V509.9l-52.25-1Z" opacity="0.1"/>
      <path id="Path_328" data-name="Path 328" d="M676.72,517.57l52.25,1V509.9l-52.25-1Z" fill="#3f3d56"/>
      <path id="Path_329" data-name="Path 329" d="M534.13,486.79c.08,7-3.16,13.6-5.91,20.07a163.491,163.491,0,0,0-12.66,74.71c.73,11,2.58,22,.73,32.9s-8.43,21.77-19,24.9c17.53,10.45,41.26,9.35,57.76-2.66,8.79-6.4,15.34-15.33,21.75-24.11a97.86,97.86,0,0,1-13.31,44.75A103.43,103.43,0,0,0,637,616.53c4.31-5.81,8.06-12.19,9.72-19.23,3.09-13-1.22-26.51-4.51-39.5a266.055,266.055,0,0,1-6.17-33c-.43-3.56-.78-7.22.1-10.7,1-4.07,3.67-7.51,5.64-11.22,5.6-10.54,5.73-23.3,2.86-34.88s-8.49-22.26-14.06-32.81c-4.46-8.46-9.3-17.31-17.46-22.28-5.1-3.1-11-4.39-16.88-5.64l-25.37-5.43c-5.55-1.19-11.26-2.38-16.87-1.51-9.47,1.48-16.14,8.32-22,15.34-4.59,5.46-15.81,15.71-16.6,22.86-.72,6.59,5.1,17.63,6.09,24.58,1.3,9,2.22,6,7.3,11.52C532,478.05,534.07,482,534.13,486.79Z" transform="translate(-79.34 -172.91)" fill="#3f3d56"/>
    </g>
    <g id="docusaurus_keytar" transform="translate(670.271 615.768)">
      <path id="Path_40" data-name="Path 40" d="M99,52h43.635V69.662H99Z" transform="translate(-49.132 -33.936)" fill="#fff" fill-rule="evenodd"/>
      <path id="Path_41" data-name="Path 41" d="M13.389,158.195A10.377,10.377,0,0,1,4.4,153a10.377,10.377,0,0,0,8.988,15.584H23.779V158.195Z" transform="translate(-3 -82.47)" fill="#3ecc5f" fill-rule="evenodd"/>
      <path id="Path_42" data-name="Path 42" d="M66.967,38.083l36.373-2.273V30.615A10.389,10.389,0,0,0,92.95,20.226H46.2l-1.3-2.249a1.5,1.5,0,0,0-2.6,0L41,20.226l-1.3-2.249a1.5,1.5,0,0,0-2.6,0l-1.3,2.249-1.3-2.249a1.5,1.5,0,0,0-2.6,0l-1.3,2.249-.034,0-2.152-2.151a1.5,1.5,0,0,0-2.508.672L25.21,21.4l-2.7-.723a1.5,1.5,0,0,0-1.836,1.837l.722,2.7-2.65.71a1.5,1.5,0,0,0-.673,2.509l2.152,2.152c0,.011,0,.022,0,.033l-2.249,1.3a1.5,1.5,0,0,0,0,2.6l2.249,1.3-2.249,1.3a1.5,1.5,0,0,0,0,2.6L20.226,41l-2.249,1.3a1.5,1.5,0,0,0,0,2.6l2.249,1.3-2.249,1.3a1.5,1.5,0,0,0,0,2.6l2.249,1.3-2.249,1.3a1.5,1.5,0,0,0,0,2.6l2.249,1.3-2.249,1.3a1.5,1.5,0,0,0,0,2.6l2.249,1.3-2.249,1.3a1.5,1.5,0,0,0,0,2.6l2.249,1.3-2.249,1.3a1.5,1.5,0,0,0,0,2.6l2.249,1.3-2.249,1.3a1.5,1.5,0,0,0,0,2.6l2.249,1.3-2.249,1.3a1.5,1.5,0,0,0,0,2.6l2.249,1.3-2.249,1.3a1.5,1.5,0,0,0,0,2.6l2.249,1.3-2.249,1.3a1.5,1.5,0,0,0,0,2.6l2.249,1.3A10.389,10.389,0,0,0,30.615,103.34H92.95A10.389,10.389,0,0,0,103.34,92.95V51.393L66.967,49.12a5.53,5.53,0,0,1,0-11.038" transform="translate(-9.836 -17.226)" fill="#3ecc5f" fill-rule="evenodd"/>
      <path id="Path_43" data-name="Path 43" d="M143,163.779h15.584V143H143Z" transform="translate(-70.275 -77.665)" fill="#3ecc5f" fill-rule="evenodd"/>
      <path id="Path_44" data-name="Path 44" d="M173.779,148.389a2.582,2.582,0,0,0-.332.033c-.02-.078-.038-.156-.06-.234a2.594,2.594,0,1,0-2.567-4.455q-.086-.088-.174-.175a2.593,2.593,0,1,0-4.461-2.569c-.077-.022-.154-.04-.231-.06a2.6,2.6,0,1,0-5.128,0c-.077.02-.154.038-.231.06a2.594,2.594,0,1,0-4.461,2.569,10.384,10.384,0,1,0,17.314,9.992,2.592,2.592,0,1,0,.332-5.161" transform="translate(-75.08 -75.262)" fill="#44d860" fill-rule="evenodd"/>
      <path id="Path_45" data-name="Path 45" d="M153,113.389h15.584V103H153Z" transform="translate(-75.08 -58.444)" fill="#3ecc5f" fill-rule="evenodd"/>
      <path id="Path_46" data-name="Path 46" d="M183.389,108.944a1.3,1.3,0,1,0,0-2.6,1.336,1.336,0,0,0-.166.017c-.01-.039-.019-.078-.03-.117a1.3,1.3,0,0,0-.5-2.5,1.285,1.285,0,0,0-.783.269q-.043-.044-.087-.087a1.285,1.285,0,0,0,.263-.776,1.3,1.3,0,0,0-2.493-.509,5.195,5.195,0,1,0,0,10,1.3,1.3,0,0,0,2.493-.509,1.285,1.285,0,0,0-.263-.776q.044-.043.087-.087a1.285,1.285,0,0,0,.783.269,1.3,1.3,0,0,0,.5-2.5c.011-.038.02-.078.03-.117a1.337,1.337,0,0,0,.166.017" transform="translate(-84.691 -57.894)" fill="#44d860" fill-rule="evenodd"/>
      <path id="Path_47" data-name="Path 47" d="M52.188,48.292a1.3,1.3,0,0,1-1.3-1.3,3.9,3.9,0,0,0-7.792,0,1.3,1.3,0,1,1-2.6,0,6.493,6.493,0,0,1,12.987,0,1.3,1.3,0,0,1-1.3,1.3" transform="translate(-21.02 -28.41)" fill-rule="evenodd"/>
      <path id="Path_48" data-name="Path 48" d="M103,139.752h31.168a10.389,10.389,0,0,0,10.389-10.389V93H113.389A10.389,10.389,0,0,0,103,103.389Z" transform="translate(-51.054 -53.638)" fill="#ffff50" fill-rule="evenodd"/>
      <path id="Path_49" data-name="Path 49" d="M141.1,94.017H115.106a.519.519,0,1,1,0-1.039H141.1a.519.519,0,0,1,0,1.039m0,10.389H115.106a.519.519,0,1,1,0-1.039H141.1a.519.519,0,0,1,0,1.039m0,10.389H115.106a.519.519,0,1,1,0-1.039H141.1a.519.519,0,0,1,0,1.039m0-25.877H115.106a.519.519,0,1,1,0-1.039H141.1a.519.519,0,0,1,0,1.039m0,10.293H115.106a.519.519,0,1,1,0-1.039H141.1a.519.519,0,0,1,0,1.039m0,10.389H115.106a.519.519,0,1,1,0-1.039H141.1a.519.519,0,0,1,0,1.039m7.782-47.993c-.006,0-.011,0-.018,0-1.605.055-2.365,1.66-3.035,3.077-.7,1.48-1.24,2.443-2.126,2.414-.981-.035-1.542-1.144-2.137-2.317-.683-1.347-1.462-2.876-3.1-2.819-1.582.054-2.344,1.451-3.017,2.684-.715,1.313-1.2,2.112-2.141,2.075-1-.036-1.533-.938-2.149-1.981-.686-1.162-1.479-2.467-3.084-2.423-1.555.053-2.319,1.239-2.994,2.286-.713,1.106-1.213,1.781-2.164,1.741-1.025-.036-1.554-.784-2.167-1.65-.688-.973-1.463-2.074-3.062-2.021a3.815,3.815,0,0,0-2.959,1.879c-.64.812-1.14,1.456-2.2,1.415a.52.52,0,0,0-.037,1.039,3.588,3.588,0,0,0,3.05-1.811c.611-.777,1.139-1.448,2.178-1.483,1-.043,1.47.579,2.179,1.582.674.953,1.438,2.033,2.977,2.089,1.612.054,2.387-1.151,3.074-2.217.614-.953,1.144-1.775,2.156-1.81.931-.035,1.438.7,2.153,1.912.674,1.141,1.437,2.434,3.006,2.491,1.623.056,2.407-1.361,3.09-2.616.592-1.085,1.15-2.109,2.14-2.143.931-.022,1.417.829,2.135,2.249.671,1.326,1.432,2.828,3.026,2.886l.088,0c1.592,0,2.347-1.6,3.015-3.01.592-1.252,1.152-2.431,2.113-2.479Z" transform="translate(-55.378 -38.552)" fill-rule="evenodd"/>
      <path id="Path_50" data-name="Path 50" d="M83,163.779h20.779V143H83Z" transform="translate(-41.443 -77.665)" fill="#3ecc5f" fill-rule="evenodd"/>
      <g id="Group_8" data-name="Group 8" transform="matrix(0.966, -0.259, 0.259, 0.966, 51.971, 43.3)">
        <rect id="Rectangle_3" data-name="Rectangle 3" width="43.906" height="17.333" rx="2" transform="translate(0 0)" fill="#d8d8d8"/>
        <g id="Group_2" data-name="Group 2" transform="translate(0.728 10.948)">
          <rect id="Rectangle_4" data-name="Rectangle 4" width="2.537" height="2.537" rx="1" transform="translate(7.985 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_5" data-name="Rectangle 5" width="2.537" height="2.537" rx="1" transform="translate(10.991 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_6" data-name="Rectangle 6" width="2.537" height="2.537" rx="1" transform="translate(13.997 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_7" data-name="Rectangle 7" width="2.537" height="2.537" rx="1" transform="translate(17.003 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_8" data-name="Rectangle 8" width="2.537" height="2.537" rx="1" transform="translate(20.009 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_9" data-name="Rectangle 9" width="2.537" height="2.537" rx="1" transform="translate(23.015 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_10" data-name="Rectangle 10" width="2.537" height="2.537" rx="1" transform="translate(26.021 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_11" data-name="Rectangle 11" width="2.537" height="2.537" rx="1" transform="translate(29.028 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_12" data-name="Rectangle 12" width="2.537" height="2.537" rx="1" transform="translate(32.034 0)" fill="#4a4a4a"/>
          <path id="Path_51" data-name="Path 51" d="M.519,0H6.9A.519.519,0,0,1,7.421.52v1.5a.519.519,0,0,1-.519.519H.519A.519.519,0,0,1,0,2.017V.519A.519.519,0,0,1,.519,0ZM35.653,0h6.383a.519.519,0,0,1,.519.519v1.5a.519.519,0,0,1-.519.519H35.652a.519.519,0,0,1-.519-.519V.519A.519.519,0,0,1,35.652,0Z" transform="translate(0 0)" fill="#4a4a4a" fill-rule="evenodd"/>
        </g>
        <g id="Group_3" data-name="Group 3" transform="translate(0.728 4.878)">
          <path id="Path_52" data-name="Path 52" d="M.519,0H2.956a.519.519,0,0,1,.519.519v1.5a.519.519,0,0,1-.519.519H.519A.519.519,0,0,1,0,2.017V.519A.519.519,0,0,1,.519,0Z" transform="translate(0 0)" fill="#4a4a4a" fill-rule="evenodd"/>
          <rect id="Rectangle_13" data-name="Rectangle 13" width="2.537" height="2.537" rx="1" transform="translate(3.945 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_14" data-name="Rectangle 14" width="2.537" height="2.537" rx="1" transform="translate(6.951 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_15" data-name="Rectangle 15" width="2.537" height="2.537" rx="1" transform="translate(9.958 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_16" data-name="Rectangle 16" width="2.537" height="2.537" rx="1" transform="translate(12.964 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_17" data-name="Rectangle 17" width="2.537" height="2.537" rx="1" transform="translate(15.97 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_18" data-name="Rectangle 18" width="2.537" height="2.537" rx="1" transform="translate(18.976 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_19" data-name="Rectangle 19" width="2.537" height="2.537" rx="1" transform="translate(21.982 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_20" data-name="Rectangle 20" width="2.537" height="2.537" rx="1" transform="translate(24.988 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_21" data-name="Rectangle 21" width="2.537" height="2.537" rx="1" transform="translate(27.994 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_22" data-name="Rectangle 22" width="2.537" height="2.537" rx="1" transform="translate(31 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_23" data-name="Rectangle 23" width="2.537" height="2.537" rx="1" transform="translate(34.006 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_24" data-name="Rectangle 24" width="2.537" height="2.537" rx="1" transform="translate(37.012 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_25" data-name="Rectangle 25" width="2.537" height="2.537" rx="1" transform="translate(40.018 0)" fill="#4a4a4a"/>
        </g>
        <g id="Group_4" data-name="Group 4" transform="translate(43.283 4.538) rotate(180)">
          <path id="Path_53" data-name="Path 53" d="M.519,0H2.956a.519.519,0,0,1,.519.519v1.5a.519.519,0,0,1-.519.519H.519A.519.519,0,0,1,0,2.017V.519A.519.519,0,0,1,.519,0Z" transform="translate(0 0)" fill="#4a4a4a" fill-rule="evenodd"/>
          <rect id="Rectangle_26" data-name="Rectangle 26" width="2.537" height="2.537" rx="1" transform="translate(3.945 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_27" data-name="Rectangle 27" width="2.537" height="2.537" rx="1" transform="translate(6.951 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_28" data-name="Rectangle 28" width="2.537" height="2.537" rx="1" transform="translate(9.958 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_29" data-name="Rectangle 29" width="2.537" height="2.537" rx="1" transform="translate(12.964 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_30" data-name="Rectangle 30" width="2.537" height="2.537" rx="1" transform="translate(15.97 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_31" data-name="Rectangle 31" width="2.537" height="2.537" rx="1" transform="translate(18.976 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_32" data-name="Rectangle 32" width="2.537" height="2.537" rx="1" transform="translate(21.982 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_33" data-name="Rectangle 33" width="2.537" height="2.537" rx="1" transform="translate(24.988 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_34" data-name="Rectangle 34" width="2.537" height="2.537" rx="1" transform="translate(27.994 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_35" data-name="Rectangle 35" width="2.537" height="2.537" rx="1" transform="translate(31.001 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_36" data-name="Rectangle 36" width="2.537" height="2.537" rx="1" transform="translate(34.007 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_37" data-name="Rectangle 37" width="2.537" height="2.537" rx="1" transform="translate(37.013 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_38" data-name="Rectangle 38" width="2.537" height="2.537" rx="1" transform="translate(40.018 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_39" data-name="Rectangle 39" width="2.537" height="2.537" rx="1" transform="translate(3.945 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_40" data-name="Rectangle 40" width="2.537" height="2.537" rx="1" transform="translate(6.951 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_41" data-name="Rectangle 41" width="2.537" height="2.537" rx="1" transform="translate(9.958 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_42" data-name="Rectangle 42" width="2.537" height="2.537" rx="1" transform="translate(12.964 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_43" data-name="Rectangle 43" width="2.537" height="2.537" rx="1" transform="translate(15.97 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_44" data-name="Rectangle 44" width="2.537" height="2.537" rx="1" transform="translate(18.976 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_45" data-name="Rectangle 45" width="2.537" height="2.537" rx="1" transform="translate(21.982 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_46" data-name="Rectangle 46" width="2.537" height="2.537" rx="1" transform="translate(24.988 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_47" data-name="Rectangle 47" width="2.537" height="2.537" rx="1" transform="translate(27.994 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_48" data-name="Rectangle 48" width="2.537" height="2.537" rx="1" transform="translate(31.001 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_49" data-name="Rectangle 49" width="2.537" height="2.537" rx="1" transform="translate(34.007 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_50" data-name="Rectangle 50" width="2.537" height="2.537" rx="1" transform="translate(37.013 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_51" data-name="Rectangle 51" width="2.537" height="2.537" rx="1" transform="translate(40.018 0)" fill="#4a4a4a"/>
        </g>
        <g id="Group_6" data-name="Group 6" transform="translate(0.728 7.883)">
          <path id="Path_54" data-name="Path 54" d="M.519,0h3.47a.519.519,0,0,1,.519.519v1.5a.519.519,0,0,1-.519.519H.519A.519.519,0,0,1,0,2.017V.52A.519.519,0,0,1,.519,0Z" transform="translate(0 0)" fill="#4a4a4a" fill-rule="evenodd"/>
          <g id="Group_5" data-name="Group 5" transform="translate(5.073 0)">
            <rect id="Rectangle_52" data-name="Rectangle 52" width="2.537" height="2.537" rx="1" transform="translate(0 0)" fill="#4a4a4a"/>
            <rect id="Rectangle_53" data-name="Rectangle 53" width="2.537" height="2.537" rx="1" transform="translate(3.006 0)" fill="#4a4a4a"/>
            <rect id="Rectangle_54" data-name="Rectangle 54" width="2.537" height="2.537" rx="1" transform="translate(6.012 0)" fill="#4a4a4a"/>
            <rect id="Rectangle_55" data-name="Rectangle 55" width="2.537" height="2.537" rx="1" transform="translate(9.018 0)" fill="#4a4a4a"/>
            <rect id="Rectangle_56" data-name="Rectangle 56" width="2.537" height="2.537" rx="1" transform="translate(12.025 0)" fill="#4a4a4a"/>
            <rect id="Rectangle_57" data-name="Rectangle 57" width="2.537" height="2.537" rx="1" transform="translate(15.031 0)" fill="#4a4a4a"/>
            <rect id="Rectangle_58" data-name="Rectangle 58" width="2.537" height="2.537" rx="1" transform="translate(18.037 0)" fill="#4a4a4a"/>
            <rect id="Rectangle_59" data-name="Rectangle 59" width="2.537" height="2.537" rx="1" transform="translate(21.042 0)" fill="#4a4a4a"/>
            <rect id="Rectangle_60" data-name="Rectangle 60" width="2.537" height="2.537" rx="1" transform="translate(24.049 0)" fill="#4a4a4a"/>
            <rect id="Rectangle_61" data-name="Rectangle 61" width="2.537" height="2.537" rx="1" transform="translate(27.055 0)" fill="#4a4a4a"/>
            <rect id="Rectangle_62" data-name="Rectangle 62" width="2.537" height="2.537" rx="1" transform="translate(30.061 0)" fill="#4a4a4a"/>
          </g>
          <path id="Path_55" data-name="Path 55" d="M.52,0H3.8a.519.519,0,0,1,.519.519v1.5a.519.519,0,0,1-.519.519H.519A.519.519,0,0,1,0,2.017V.52A.519.519,0,0,1,.519,0Z" transform="translate(38.234 0)" fill="#4a4a4a" fill-rule="evenodd"/>
        </g>
        <g id="Group_7" data-name="Group 7" transform="translate(0.728 14.084)">
          <rect id="Rectangle_63" data-name="Rectangle 63" width="2.537" height="2.537" rx="1" transform="translate(0 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_64" data-name="Rectangle 64" width="2.537" height="2.537" rx="1" transform="translate(3.006 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_65" data-name="Rectangle 65" width="2.537" height="2.537" rx="1" transform="translate(6.012 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_66" data-name="Rectangle 66" width="2.537" height="2.537" rx="1" transform="translate(9.018 0)" fill="#4a4a4a"/>
          <path id="Path_56" data-name="Path 56" d="M.519,0H14.981A.519.519,0,0,1,15.5.519v1.5a.519.519,0,0,1-.519.519H.519A.519.519,0,0,1,0,2.018V.519A.519.519,0,0,1,.519,0Zm15.97,0h1.874a.519.519,0,0,1,.519.519v1.5a.519.519,0,0,1-.519.519H16.489a.519.519,0,0,1-.519-.519V.519A.519.519,0,0,1,16.489,0Z" transform="translate(12.024 0)" fill="#4a4a4a" fill-rule="evenodd"/>
          <rect id="Rectangle_67" data-name="Rectangle 67" width="2.537" height="2.537" rx="1" transform="translate(31.376 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_68" data-name="Rectangle 68" width="2.537" height="2.537" rx="1" transform="translate(34.382 0)" fill="#4a4a4a"/>
          <rect id="Rectangle_69" data-name="Rectangle 69" width="2.537" height="2.537" rx="1" transform="translate(40.018 0)" fill="#4a4a4a"/>
          <path id="Path_57" data-name="Path 57" d="M2.537,0V.561a.519.519,0,0,1-.519.519H.519A.519.519,0,0,1,0,.561V0Z" transform="translate(39.736 1.08) rotate(180)" fill="#4a4a4a"/>
          <path id="Path_58" data-name="Path 58" d="M2.537,0V.561a.519.519,0,0,1-.519.519H.519A.519.519,0,0,1,0,.561V0Z" transform="translate(37.2 1.456)" fill="#4a4a4a"/>
        </g>
        <rect id="Rectangle_70" data-name="Rectangle 70" width="42.273" height="1.127" rx="0.564" transform="translate(0.915 0.556)" fill="#4a4a4a"/>
        <rect id="Rectangle_71" data-name="Rectangle 71" width="2.37" height="0.752" rx="0.376" transform="translate(1.949 0.744)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_72" data-name="Rectangle 72" width="2.37" height="0.752" rx="0.376" transform="translate(5.193 0.744)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_73" data-name="Rectangle 73" width="2.37" height="0.752" rx="0.376" transform="translate(7.688 0.744)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_74" data-name="Rectangle 74" width="2.37" height="0.752" rx="0.376" transform="translate(10.183 0.744)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_75" data-name="Rectangle 75" width="2.37" height="0.752" rx="0.376" transform="translate(12.679 0.744)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_76" data-name="Rectangle 76" width="2.37" height="0.752" rx="0.376" transform="translate(15.797 0.744)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_77" data-name="Rectangle 77" width="2.37" height="0.752" rx="0.376" transform="translate(18.292 0.744)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_78" data-name="Rectangle 78" width="2.37" height="0.752" rx="0.376" transform="translate(20.788 0.744)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_79" data-name="Rectangle 79" width="2.37" height="0.752" rx="0.376" transform="translate(23.283 0.744)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_80" data-name="Rectangle 80" width="2.37" height="0.752" rx="0.376" transform="translate(26.402 0.744)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_81" data-name="Rectangle 81" width="2.37" height="0.752" rx="0.376" transform="translate(28.897 0.744)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_82" data-name="Rectangle 82" width="2.37" height="0.752" rx="0.376" transform="translate(31.393 0.744)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_83" data-name="Rectangle 83" width="2.37" height="0.752" rx="0.376" transform="translate(34.512 0.744)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_84" data-name="Rectangle 84" width="2.37" height="0.752" rx="0.376" transform="translate(37.007 0.744)" fill="#d8d8d8" opacity="0.136"/>
        <rect id="Rectangle_85" data-name="Rectangle 85" width="2.37" height="0.752" rx="0.376" transform="translate(39.502 0.744)" fill="#d8d8d8" opacity="0.136"/>
      </g>
      <path id="Path_59" data-name="Path 59" d="M123.779,148.389a2.583,2.583,0,0,0-.332.033c-.02-.078-.038-.156-.06-.234a2.594,2.594,0,1,0-2.567-4.455q-.086-.088-.174-.175a2.593,2.593,0,1,0-4.461-2.569c-.077-.022-.154-.04-.231-.06a2.6,2.6,0,1,0-5.128,0c-.077.02-.154.038-.231.06a2.594,2.594,0,1,0-4.461,2.569,10.384,10.384,0,1,0,17.314,9.992,2.592,2.592,0,1,0,.332-5.161" transform="translate(-51.054 -75.262)" fill="#44d860" fill-rule="evenodd"/>
      <path id="Path_60" data-name="Path 60" d="M83,113.389h20.779V103H83Z" transform="translate(-41.443 -58.444)" fill="#3ecc5f" fill-rule="evenodd"/>
      <path id="Path_61" data-name="Path 61" d="M123.389,108.944a1.3,1.3,0,1,0,0-2.6,1.338,1.338,0,0,0-.166.017c-.01-.039-.019-.078-.03-.117a1.3,1.3,0,0,0-.5-2.5,1.285,1.285,0,0,0-.783.269q-.043-.044-.087-.087a1.285,1.285,0,0,0,.263-.776,1.3,1.3,0,0,0-2.493-.509,5.195,5.195,0,1,0,0,10,1.3,1.3,0,0,0,2.493-.509,1.285,1.285,0,0,0-.263-.776q.044-.043.087-.087a1.285,1.285,0,0,0,.783.269,1.3,1.3,0,0,0,.5-2.5c.011-.038.02-.078.03-.117a1.335,1.335,0,0,0,.166.017" transform="translate(-55.859 -57.894)" fill="#44d860" fill-rule="evenodd"/>
      <path id="Path_62" data-name="Path 62" d="M141.8,38.745a1.41,1.41,0,0,1-.255-.026,1.309,1.309,0,0,1-.244-.073,1.349,1.349,0,0,1-.224-.119,1.967,1.967,0,0,1-.2-.161,1.52,1.52,0,0,1-.161-.2,1.282,1.282,0,0,1-.218-.722,1.41,1.41,0,0,1,.026-.255,1.5,1.5,0,0,1,.072-.244,1.364,1.364,0,0,1,.12-.223,1.252,1.252,0,0,1,.358-.358,1.349,1.349,0,0,1,.224-.119,1.309,1.309,0,0,1,.244-.073,1.2,1.2,0,0,1,.509,0,1.262,1.262,0,0,1,.468.192,1.968,1.968,0,0,1,.2.161,1.908,1.908,0,0,1,.161.2,1.322,1.322,0,0,1,.12.223,1.361,1.361,0,0,1,.1.5,1.317,1.317,0,0,1-.379.919,1.968,1.968,0,0,1-.2.161,1.346,1.346,0,0,1-.223.119,1.332,1.332,0,0,1-.5.1m10.389-.649a1.326,1.326,0,0,1-.92-.379,1.979,1.979,0,0,1-.161-.2,1.282,1.282,0,0,1-.218-.722,1.326,1.326,0,0,1,.379-.919,1.967,1.967,0,0,1,.2-.161,1.351,1.351,0,0,1,.224-.119,1.308,1.308,0,0,1,.244-.073,1.2,1.2,0,0,1,.509,0,1.262,1.262,0,0,1,.468.192,1.967,1.967,0,0,1,.2.161,1.326,1.326,0,0,1,.379.919,1.461,1.461,0,0,1-.026.255,1.323,1.323,0,0,1-.073.244,1.847,1.847,0,0,1-.119.223,1.911,1.911,0,0,1-.161.2,1.967,1.967,0,0,1-.2.161,1.294,1.294,0,0,1-.722.218" transform="translate(-69.074 -26.006)" fill-rule="evenodd"/>
    </g>
    <g id="React-icon" transform="translate(906.3 541.56)">
      <path id="Path_330" data-name="Path 330" d="M263.668,117.179c0-5.827-7.3-11.35-18.487-14.775,2.582-11.4,1.434-20.477-3.622-23.382a7.861,7.861,0,0,0-4.016-1v4a4.152,4.152,0,0,1,2.044.466c2.439,1.4,3.5,6.724,2.672,13.574-.2,1.685-.52,3.461-.914,5.272a86.9,86.9,0,0,0-11.386-1.954,87.469,87.469,0,0,0-7.459-8.965c5.845-5.433,11.332-8.41,15.062-8.41V78h0c-4.931,0-11.386,3.514-17.913,9.611-6.527-6.061-12.982-9.539-17.913-9.539v4c3.712,0,9.216,2.959,15.062,8.356a84.687,84.687,0,0,0-7.405,8.947,83.732,83.732,0,0,0-11.4,1.972c-.412-1.793-.717-3.532-.932-5.2-.843-6.85.2-12.175,2.618-13.592a3.991,3.991,0,0,1,2.062-.466v-4h0a8,8,0,0,0-4.052,1c-5.039,2.9-6.168,11.96-3.568,23.328-11.153,3.443-18.415,8.947-18.415,14.757,0,5.828,7.3,11.35,18.487,14.775-2.582,11.4-1.434,20.477,3.622,23.382a7.882,7.882,0,0,0,4.034,1c4.931,0,11.386-3.514,17.913-9.611,6.527,6.061,12.982,9.539,17.913,9.539a8,8,0,0,0,4.052-1c5.039-2.9,6.168-11.96,3.568-23.328C256.406,128.511,263.668,122.988,263.668,117.179Zm-23.346-11.96c-.663,2.313-1.488,4.7-2.421,7.083-.735-1.434-1.506-2.869-2.349-4.3-.825-1.434-1.7-2.833-2.582-4.2C235.517,104.179,237.974,104.645,240.323,105.219Zm-8.212,19.1c-1.4,2.421-2.833,4.716-4.321,6.85-2.672.233-5.379.359-8.1.359-2.708,0-5.415-.126-8.069-.341q-2.232-3.2-4.339-6.814-2.044-3.523-3.73-7.136c1.112-2.4,2.367-4.805,3.712-7.154,1.4-2.421,2.833-4.716,4.321-6.85,2.672-.233,5.379-.359,8.1-.359,2.708,0,5.415.126,8.069.341q2.232,3.2,4.339,6.814,2.044,3.523,3.73,7.136C234.692,119.564,233.455,121.966,232.11,124.315Zm5.792-2.331c.968,2.4,1.793,4.805,2.474,7.136-2.349.574-4.823,1.058-7.387,1.434.879-1.381,1.757-2.8,2.582-4.25C236.4,124.871,237.167,123.419,237.9,121.984ZM219.72,141.116a73.921,73.921,0,0,1-4.985-5.738c1.614.072,3.263.126,4.931.126,1.685,0,3.353-.036,4.985-.126A69.993,69.993,0,0,1,219.72,141.116ZM206.38,130.555c-2.546-.377-5-.843-7.352-1.417.663-2.313,1.488-4.7,2.421-7.083.735,1.434,1.506,2.869,2.349,4.3S205.5,129.192,206.38,130.555ZM219.63,93.241a73.924,73.924,0,0,1,4.985,5.738c-1.614-.072-3.263-.126-4.931-.126-1.686,0-3.353.036-4.985.126A69.993,69.993,0,0,1,219.63,93.241ZM206.362,103.8c-.879,1.381-1.757,2.8-2.582,4.25-.825,1.434-1.6,2.869-2.331,4.3-.968-2.4-1.793-4.805-2.474-7.136C201.323,104.663,203.8,104.179,206.362,103.8Zm-16.227,22.449c-6.348-2.708-10.454-6.258-10.454-9.073s4.106-6.383,10.454-9.073c1.542-.663,3.228-1.255,4.967-1.811a86.122,86.122,0,0,0,4.034,10.92,84.9,84.9,0,0,0-3.981,10.866C193.38,127.525,191.694,126.915,190.134,126.252Zm9.647,25.623c-2.439-1.4-3.5-6.724-2.672-13.574.2-1.686.52-3.461.914-5.272a86.9,86.9,0,0,0,11.386,1.954,87.465,87.465,0,0,0,7.459,8.965c-5.845,5.433-11.332,8.41-15.062,8.41A4.279,4.279,0,0,1,199.781,151.875Zm42.532-13.663c.843,6.85-.2,12.175-2.618,13.592a3.99,3.99,0,0,1-2.062.466c-3.712,0-9.216-2.959-15.062-8.356a84.689,84.689,0,0,0,7.405-8.947,83.731,83.731,0,0,0,11.4-1.972A50.194,50.194,0,0,1,242.313,138.212Zm6.9-11.96c-1.542.663-3.228,1.255-4.967,1.811a86.12,86.12,0,0,0-4.034-10.92,84.9,84.9,0,0,0,3.981-10.866c1.775.556,3.461,1.165,5.039,1.829,6.348,2.708,10.454,6.258,10.454,9.073C259.67,119.994,255.564,123.562,249.216,126.252Z" fill="#61dafb"/>
      <path id="Path_331" data-name="Path 331" d="M320.8,78.4Z" transform="translate(-119.082 -0.328)" fill="#61dafb"/>
      <circle id="Ellipse_112" data-name="Ellipse 112" cx="8.194" cy="8.194" r="8.194" transform="translate(211.472 108.984)" fill="#61dafb"/>
      <path id="Path_332" data-name="Path 332" d="M520.5,78.1Z" transform="translate(-282.975 -0.082)" fill="#61dafb"/>
    </g>
  </g>
</svg>

'''
'''--- static/img/undraw_docusaurus_tree.svg ---
<svg id="ac356da0-b129-4ca5-aecc-4700531dd101" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" width="1129" height="663" viewBox="0 0 1129 663"><title>docu_tree</title><circle cx="321" cy="321" r="321" fill="#f2f2f2"/><ellipse cx="559" cy="635.49998" rx="514" ry="27.50002" fill="#3f3d56"/><ellipse cx="558" cy="627" rx="460" ry="22" opacity="0.2"/><rect x="131" y="152.5" width="840" height="50" fill="#3f3d56"/><path d="M166.5,727.3299A21.67009,21.67009,0,0,0,188.1701,749H984.8299A21.67009,21.67009,0,0,0,1006.5,727.3299V296h-840Z" transform="translate(-35.5 -118.5)" fill="#3f3d56"/><path d="M984.8299,236H188.1701A21.67009,21.67009,0,0,0,166.5,257.6701V296h840V257.6701A21.67009,21.67009,0,0,0,984.8299,236Z" transform="translate(-35.5 -118.5)" fill="#3f3d56"/><path d="M984.8299,236H188.1701A21.67009,21.67009,0,0,0,166.5,257.6701V296h840V257.6701A21.67009,21.67009,0,0,0,984.8299,236Z" transform="translate(-35.5 -118.5)" opacity="0.2"/><circle cx="181" cy="147.5" r="13" fill="#3f3d56"/><circle cx="217" cy="147.5" r="13" fill="#3f3d56"/><circle cx="253" cy="147.5" r="13" fill="#3f3d56"/><rect x="168" y="213.5" width="337" height="386" rx="5.33505" fill="#606060"/><rect x="603" y="272.5" width="284" height="22" rx="5.47638" fill="#2e8555"/><rect x="537" y="352.5" width="416" height="15" rx="5.47638" fill="#2e8555"/><rect x="537" y="396.5" width="416" height="15" rx="5.47638" fill="#2e8555"/><rect x="537" y="440.5" width="416" height="15" rx="5.47638" fill="#2e8555"/><rect x="537" y="484.5" width="416" height="15" rx="5.47638" fill="#2e8555"/><rect x="865" y="552.5" width="88" height="26" rx="7.02756" fill="#3ecc5f"/><path d="M1088.60287,624.61594a30.11371,30.11371,0,0,0,3.98291-15.266c0-13.79652-8.54358-24.98081-19.08256-24.98081s-19.08256,11.18429-19.08256,24.98081a30.11411,30.11411,0,0,0,3.98291,15.266,31.248,31.248,0,0,0,0,30.53213,31.248,31.248,0,0,0,0,30.53208,31.248,31.248,0,0,0,0,30.53208,30.11408,30.11408,0,0,0-3.98291,15.266c0,13.79652,8.54353,24.98081,19.08256,24.98081s19.08256-11.18429,19.08256-24.98081a30.11368,30.11368,0,0,0-3.98291-15.266,31.248,31.248,0,0,0,0-30.53208,31.248,31.248,0,0,0,0-30.53208,31.248,31.248,0,0,0,0-30.53213Z" transform="translate(-35.5 -118.5)" fill="#3f3d56"/><ellipse cx="1038.00321" cy="460.31783" rx="19.08256" ry="24.9808" fill="#3f3d56"/><ellipse cx="1038.00321" cy="429.78574" rx="19.08256" ry="24.9808" fill="#3f3d56"/><path d="M1144.93871,339.34489a91.61081,91.61081,0,0,0,7.10658-10.46092l-50.141-8.23491,54.22885.4033a91.566,91.566,0,0,0,1.74556-72.42605l-72.75449,37.74139,67.09658-49.32086a91.41255,91.41255,0,1,0-150.971,102.29805,91.45842,91.45842,0,0,0-10.42451,16.66946l65.0866,33.81447-69.40046-23.292a91.46011,91.46011,0,0,0,14.73837,85.83669,91.40575,91.40575,0,1,0,143.68892,0,91.41808,91.41808,0,0,0,0-113.02862Z" transform="translate(-35.5 -118.5)" fill="#3ecc5f" fill-rule="evenodd"/><path d="M981.6885,395.8592a91.01343,91.01343,0,0,0,19.56129,56.51431,91.40575,91.40575,0,1,0,143.68892,0C1157.18982,436.82067,981.6885,385.60008,981.6885,395.8592Z" transform="translate(-35.5 -118.5)" opacity="0.1"/><path d="M365.62,461.43628H477.094v45.12043H365.62Z" transform="translate(-35.5 -118.5)" fill="#fff" fill-rule="evenodd"/><path d="M264.76252,608.74122a26.50931,26.50931,0,0,1-22.96231-13.27072,26.50976,26.50976,0,0,0,22.96231,39.81215H291.304V608.74122Z" transform="translate(-35.5 -118.5)" fill="#3ecc5f" fill-rule="evenodd"/><path d="M384.17242,468.57061l92.92155-5.80726V449.49263a26.54091,26.54091,0,0,0-26.54143-26.54143H331.1161l-3.31768-5.74622a3.83043,3.83043,0,0,0-6.63536,0l-3.31768,5.74622-3.31767-5.74622a3.83043,3.83043,0,0,0-6.63536,0l-3.31768,5.74622L301.257,417.205a3.83043,3.83043,0,0,0-6.63536,0L291.304,422.9512c-.02919,0-.05573.004-.08625.004l-5.49674-5.49541a3.8293,3.8293,0,0,0-6.4071,1.71723l-1.81676,6.77338L270.607,424.1031a3.82993,3.82993,0,0,0-4.6912,4.69253l1.84463,6.89148-6.77072,1.81411a3.8315,3.8315,0,0,0-1.71988,6.40975l5.49673,5.49673c0,.02787-.004.05574-.004.08493l-5.74622,3.31768a3.83043,3.83043,0,0,0,0,6.63536l5.74621,3.31768L259.0163,466.081a3.83043,3.83043,0,0,0,0,6.63536l5.74622,3.31768-5.74622,3.31767a3.83043,3.83043,0,0,0,0,6.63536l5.74622,3.31768-5.74622,3.31768a3.83043,3.83043,0,0,0,0,6.63536l5.74622,3.31768-5.74622,3.31767a3.83043,3.83043,0,0,0,0,6.63536l5.74622,3.31768-5.74622,3.31768a3.83043,3.83043,0,0,0,0,6.63536l5.74622,3.31768-5.74622,3.31768a3.83042,3.83042,0,0,0,0,6.63535l5.74622,3.31768-5.74622,3.31768a3.83043,3.83043,0,0,0,0,6.63536l5.74622,3.31768L259.0163,558.976a3.83042,3.83042,0,0,0,0,6.63535l5.74622,3.31768-5.74622,3.31768a3.83043,3.83043,0,0,0,0,6.63536l5.74622,3.31768-5.74622,3.31768a3.83042,3.83042,0,0,0,0,6.63535l5.74622,3.31768-5.74622,3.31768a3.83043,3.83043,0,0,0,0,6.63536l5.74622,3.31768A26.54091,26.54091,0,0,0,291.304,635.28265H450.55254A26.5409,26.5409,0,0,0,477.094,608.74122V502.5755l-92.92155-5.80727a14.12639,14.12639,0,0,1,0-28.19762" transform="translate(-35.5 -118.5)" fill="#3ecc5f" fill-rule="evenodd"/><path d="M424.01111,635.28265h39.81214V582.19979H424.01111Z" transform="translate(-35.5 -118.5)" fill="#3ecc5f" fill-rule="evenodd"/><path d="M490.36468,602.10586a6.60242,6.60242,0,0,0-.848.08493c-.05042-.19906-.09821-.39945-.15393-.59852A6.62668,6.62668,0,1,0,482.80568,590.21q-.2203-.22491-.44457-.44589a6.62391,6.62391,0,1,0-11.39689-6.56369c-.1964-.05575-.39414-.10218-.59056-.15262a6.63957,6.63957,0,1,0-13.10086,0c-.1964.05042-.39414.09687-.59056.15262a6.62767,6.62767,0,1,0-11.39688,6.56369,26.52754,26.52754,0,1,0,44.23127,25.52756,6.6211,6.6211,0,1,0,.848-13.18579" transform="translate(-35.5 -118.5)" fill="#44d860" fill-rule="evenodd"/><path d="M437.28182,555.65836H477.094V529.11693H437.28182Z" transform="translate(-35.5 -118.5)" fill="#3ecc5f" fill-rule="evenodd"/><path d="M490.36468,545.70532a3.31768,3.31768,0,0,0,0-6.63536,3.41133,3.41133,0,0,0-.42333.04247c-.02655-.09953-.04911-.19907-.077-.29859a3.319,3.319,0,0,0-1.278-6.37923,3.28174,3.28174,0,0,0-2.00122.68742q-.10947-.11346-.22294-.22295a3.282,3.282,0,0,0,.67149-1.98265,3.31768,3.31768,0,0,0-6.37-1.2992,13.27078,13.27078,0,1,0,0,25.54082,3.31768,3.31768,0,0,0,6.37-1.2992,3.282,3.282,0,0,0-.67149-1.98265q.11347-.10947.22294-.22294a3.28174,3.28174,0,0,0,2.00122.68742,3.31768,3.31768,0,0,0,1.278-6.37923c.02786-.0982.05042-.19907.077-.29859a3.41325,3.41325,0,0,0,.42333.04246" transform="translate(-35.5 -118.5)" fill="#44d860" fill-rule="evenodd"/><path d="M317.84538,466.081a3.31768,3.31768,0,0,1-3.31767-3.31768,9.953,9.953,0,1,0-19.90608,0,3.31768,3.31768,0,1,1-6.63535,0,16.58839,16.58839,0,1,1,33.17678,0,3.31768,3.31768,0,0,1-3.31768,3.31768" transform="translate(-35.5 -118.5)" fill-rule="evenodd"/><path d="M370.92825,635.28265h79.62429A26.5409,26.5409,0,0,0,477.094,608.74122v-92.895H397.46968a26.54091,26.54091,0,0,0-26.54143,26.54143Z" transform="translate(-35.5 -118.5)" fill="#ffff50" fill-rule="evenodd"/><path d="M457.21444,556.98543H390.80778a1.32707,1.32707,0,0,1,0-2.65414h66.40666a1.32707,1.32707,0,0,1,0,2.65414m0,26.54143H390.80778a1.32707,1.32707,0,1,1,0-2.65414h66.40666a1.32707,1.32707,0,0,1,0,2.65414m0,26.54143H390.80778a1.32707,1.32707,0,1,1,0-2.65414h66.40666a1.32707,1.32707,0,0,1,0,2.65414m0-66.10674H390.80778a1.32707,1.32707,0,0,1,0-2.65414h66.40666a1.32707,1.32707,0,0,1,0,2.65414m0,26.29459H390.80778a1.32707,1.32707,0,0,1,0-2.65414h66.40666a1.32707,1.32707,0,0,1,0,2.65414m0,26.54143H390.80778a1.32707,1.32707,0,0,1,0-2.65414h66.40666a1.32707,1.32707,0,0,1,0,2.65414M477.094,474.19076c-.01592,0-.0292-.008-.04512-.00663-4.10064.13934-6.04083,4.24132-7.75274,7.86024-1.78623,3.78215-3.16771,6.24122-5.43171,6.16691-2.50685-.09024-3.94007-2.92222-5.45825-5.91874-1.74377-3.44243-3.73438-7.34667-7.91333-7.20069-4.04227.138-5.98907,3.70784-7.70631,6.857-1.82738,3.35484-3.07084,5.39455-5.46887,5.30033-2.55727-.09289-3.91619-2.39536-5.48877-5.06013-1.75306-2.96733-3.77951-6.30359-7.8775-6.18946-3.97326.13669-5.92537,3.16507-7.64791,5.83912-1.82207,2.82666-3.09872,4.5492-5.52725,4.447-2.61832-.09289-3.9706-2.00388-5.53522-4.21611-1.757-2.4856-3.737-5.299-7.82308-5.16231-3.88567.13271-5.83779,2.61434-7.559,4.80135-1.635,2.07555-2.9116,3.71846-5.61218,3.615a1.32793,1.32793,0,1,0-.09555,2.65414c4.00377.134,6.03154-2.38873,7.79257-4.6275,1.562-1.9853,2.91027-3.69855,5.56441-3.78879,2.55594-.10882,3.75429,1.47968,5.56707,4.04093,1.7212,2.43385,3.67465,5.19416,7.60545,5.33616,4.11789.138,6.09921-2.93946,7.8536-5.66261,1.56861-2.43385,2.92221-4.53461,5.50734-4.62352,2.37944-.08892,3.67466,1.79154,5.50072,4.885,1.72121,2.91557,3.67069,6.21865,7.67977,6.36463,4.14709.14332,6.14965-3.47693,7.89475-6.68181,1.51155-2.77092,2.93814-5.38791,5.46621-5.4755,2.37944-.05573,3.62025,2.11668,5.45558,5.74622,1.71459,3.388,3.65875,7.22591,7.73019,7.37321l.22429.004c4.06614,0,5.99571-4.08074,7.70364-7.68905,1.51154-3.19825,2.94211-6.21069,5.3972-6.33411Z" transform="translate(-35.5 -118.5)" fill-rule="evenodd"/><path d="M344.38682,635.28265h53.08286V582.19979H344.38682Z" transform="translate(-35.5 -118.5)" fill="#3ecc5f" fill-rule="evenodd"/><path d="M424.01111,602.10586a6.60242,6.60242,0,0,0-.848.08493c-.05042-.19906-.09821-.39945-.15394-.59852A6.62667,6.62667,0,1,0,416.45211,590.21q-.2203-.22491-.44458-.44589a6.62391,6.62391,0,1,0-11.39689-6.56369c-.1964-.05575-.39413-.10218-.59054-.15262a6.63957,6.63957,0,1,0-13.10084,0c-.19641.05042-.39414.09687-.59055.15262a6.62767,6.62767,0,1,0-11.39689,6.56369,26.52755,26.52755,0,1,0,44.2313,25.52756,6.6211,6.6211,0,1,0,.848-13.18579" transform="translate(-35.5 -118.5)" fill="#44d860" fill-rule="evenodd"/><path d="M344.38682,555.65836h53.08286V529.11693H344.38682Z" transform="translate(-35.5 -118.5)" fill="#3ecc5f" fill-rule="evenodd"/><path d="M410.74039,545.70532a3.31768,3.31768,0,1,0,0-6.63536,3.41133,3.41133,0,0,0-.42333.04247c-.02655-.09953-.04911-.19907-.077-.29859a3.319,3.319,0,0,0-1.278-6.37923,3.28174,3.28174,0,0,0-2.00122.68742q-.10947-.11346-.22294-.22295a3.282,3.282,0,0,0,.67149-1.98265,3.31768,3.31768,0,0,0-6.37-1.2992,13.27078,13.27078,0,1,0,0,25.54082,3.31768,3.31768,0,0,0,6.37-1.2992,3.282,3.282,0,0,0-.67149-1.98265q.11347-.10947.22294-.22294a3.28174,3.28174,0,0,0,2.00122.68742,3.31768,3.31768,0,0,0,1.278-6.37923c.02786-.0982.05042-.19907.077-.29859a3.41325,3.41325,0,0,0,.42333.04246" transform="translate(-35.5 -118.5)" fill="#44d860" fill-rule="evenodd"/><path d="M424.01111,447.8338a3.60349,3.60349,0,0,1-.65028-.06636,3.34415,3.34415,0,0,1-.62372-.18579,3.44679,3.44679,0,0,1-.572-.30522,5.02708,5.02708,0,0,1-.50429-.4114,3.88726,3.88726,0,0,1-.41007-.50428,3.27532,3.27532,0,0,1-.55737-1.84463,3.60248,3.60248,0,0,1,.06636-.65027,3.82638,3.82638,0,0,1,.18447-.62373,3.48858,3.48858,0,0,1,.30656-.57064,3.197,3.197,0,0,1,.91436-.91568,3.44685,3.44685,0,0,1,.572-.30523,3.344,3.344,0,0,1,.62372-.18578,3.06907,3.06907,0,0,1,1.30053,0,3.22332,3.22332,0,0,1,1.19436.491,5.02835,5.02835,0,0,1,.50429.41139,4.8801,4.8801,0,0,1,.41139.50429,3.38246,3.38246,0,0,1,.30522.57064,3.47806,3.47806,0,0,1,.25215,1.274A3.36394,3.36394,0,0,1,426.36,446.865a5.02708,5.02708,0,0,1-.50429.4114,3.3057,3.3057,0,0,1-1.84463.55737m26.54143-1.65884a3.38754,3.38754,0,0,1-2.35024-.96877,5.04185,5.04185,0,0,1-.41007-.50428,3.27532,3.27532,0,0,1-.55737-1.84463,3.38659,3.38659,0,0,1,.96744-2.34892,5.02559,5.02559,0,0,1,.50429-.41139,3.44685,3.44685,0,0,1,.572-.30523,3.3432,3.3432,0,0,1,.62373-.18579,3.06952,3.06952,0,0,1,1.30052,0,3.22356,3.22356,0,0,1,1.19436.491,5.02559,5.02559,0,0,1,.50429.41139,3.38792,3.38792,0,0,1,.96876,2.34892,3.72635,3.72635,0,0,1-.06636.65026,3.37387,3.37387,0,0,1-.18579.62373,4.71469,4.71469,0,0,1-.30522.57064,4.8801,4.8801,0,0,1-.41139.50429,5.02559,5.02559,0,0,1-.50429.41139,3.30547,3.30547,0,0,1-1.84463.55737" transform="translate(-35.5 -118.5)" fill-rule="evenodd"/></svg>
'''
'''--- versioned_docs/version-1.1/nothing-page.md ---

'''
'''--- versioned_docs/version-1.2.1/nothing-page.md ---

'''
'''--- versioned_docs/version-1.2/nothing-page.md ---

'''
'''--- versioned_sidebars/version-1.1-sidebars.json ---
{
  "version-1.1/tutorialSidebar": [
    {
      "type": "autogenerated",
      "dirName": "."
    }
  ]
}

'''
'''--- versioned_sidebars/version-1.2-sidebars.json ---
{
  "tutorialSidebar": [
    {
      "type": "autogenerated",
      "dirName": "."
    }
  ]
}

'''
'''--- versioned_sidebars/version-1.2.1-sidebars.json ---
{
  "tutorialSidebar": [
    {
      "type": "autogenerated",
      "dirName": "."
    }
  ]
}

'''
'''--- versions.json ---
[
  "1.2.1",
  "1.2",
  "1.1"
]

'''