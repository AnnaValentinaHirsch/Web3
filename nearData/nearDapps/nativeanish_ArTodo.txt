*GitHub Repository "nativeanish/ArTodo"*

'''--- README.md ---
# ArTodo is a decentrazlied public Todo. Anyone can connect their near wallet and can store their todo's on the permaweb. ArTodo uses the 2 core technology, Permaweb for storing the todo's data of each individual and near wallet for routing the permaweb storage.
[live version](https://arweave.net/jfAPvrRGvvudH17IFCMNnfZDSQ9TLvFeAjCJ-yl3yLY)

'''
'''--- package.json ---
{
  "name": "artodo",
  "author": "Anish Gupta",
  "repository": "https://github.com/nativeanish/ArTodo",
  "version": "1.0.0",
  "license": "MIT",
  "devDependencies": {
    "@emotion/react": "^11.9.0",
    "@emotion/styled": "^11.8.1",
    "@types/node": "^17.0.39",
    "@types/react": "^18.0.11",
    "@types/react-dom": "^18.0.5",
    "buffer": "^6.0.3",
    "framer-motion": "^6.3.10",
    "parcel": "^2.6.0",
    "process": "^0.11.10",
    "typescript": "^4.7.3"
  },
  "dependencies": {
    "@chakra-ui/react": "^2.1.2",
    "arweave": "^1.11.4",
    "axios": "^0.27.2",
    "near-api-js": "^0.44.2",
    "react": "^18.1.0",
    "react-dom": "^18.1.0",
    "react-hook-form": "^7.31.3",
    "react-icons": "^4.4.0"
  },
  "scripts": {
    "start": "npx parcel public/index.html",
    "build": "npx parcel build public/index.html"
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="ArTodo" />
    <script src="https://unpkg.com/arweave/bundles/web.bundle.min.js"></script>
    <title>ArTodo</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="mountNode"></div>
    <script src="./index.tsx" type="module"></script>
  </body>
</html>

'''
'''--- smartContract/Cargo.toml ---
[package]
name = "sc"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
near-sdk = "3.1.0"

[lib]
crate-type = ["cdylib"]

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

'''
'''--- smartContract/src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::UnorderedMap;
use near_sdk::{env, near_bindgen, AccountId};

#[near_bindgen]
#[derive(BorshSerialize, BorshDeserialize)]
pub struct ArTodo {
    state: UnorderedMap<u64, (String, AccountId, bool)>,
}

#[near_bindgen]
impl ArTodo {
    pub fn add(&mut self, arweave_tx: String) -> bool {
        self.state.insert(
            &self.state.len(),
            &(arweave_tx, env::signer_account_id(), false),
        );
        true
    }

    pub fn done(&mut self, id: String) -> bool {
        let task = self.state.get(&id.parse::<u64>().unwrap()).unwrap();
        if task.1 == env::signer_account_id() {
            let new_task = (task.0, env::signer_account_id(), true);
            self.state.remove(&id.parse::<u64>().unwrap());
            self.state.insert(&id.parse::<u64>().unwrap(), &new_task);
            return true;
        }
        return false;
    }

    pub fn get(&self) -> Vec<(String, AccountId, bool)> {
        let mut temp: Vec<(String, AccountId, bool)> = vec![];
        for g in self.state.values_as_vector().iter() {
            temp.push(g);
        }
        temp
    }
}

impl Default for ArTodo {
    fn default() -> Self {
        Self {
            state: UnorderedMap::<u64, (String, AccountId, bool)>::new(b'a'),
        }
    }
}

//test
//Test
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};
    fn get_context(predecessor_account_id: String, storage_usage: u64) -> VMContext {
        VMContext {
            current_account_id: "marketplace.near".to_string(),
            signer_account_id: "anish.testnet".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id,
            input: vec![],
            block_index: 0,
            block_timestamp: 0,
            account_balance: 200,
            account_locked_balance: 0,
            storage_usage,
            attached_deposit: 10,
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view: false,
            output_data_receivers: vec![],
            epoch_height: 19,
        }
    }

    #[test]
    fn new_get() {
        let context = get_context("anish.testnet".to_string(), 0);
        testing_env!(context);
        let mut contract = ArTodo::default();
        contract.add("jdsf98erjfierf89erhfifehjfuifeh".to_string());
        contract.add("aksdjf834jjdfjdsf8jasdkofj984kf".to_string());
        assert_eq!(
            contract.get(),
            [
                (
                    "jdsf98erjfierf89erhfifehjfuifeh".to_string(),
                    "anish.testnet".to_string(),
                    false,
                ),
                (
                    "aksdjf834jjdfjdsf8jasdkofj984kf".to_string(),
                    "anish.testnet".to_string(),
                    false,
                )
            ]
        )
    }

    #[test]
    fn done() {
        let context = get_context("anish.testnet".to_string(), 0);
        testing_env!(context);
        let mut contract = ArTodo::default();
        contract.add("sdafjasdjfj".to_string());
        assert_eq!(
            contract.get(),
            [(
                "sdafjasdjfj".to_string(),
                "anish.testnet".to_string(),
                false,
            )]
        );
        contract.done("0".to_string());
        assert_eq!(
            contract.get(),
            [("sdafjasdjfj".to_string(), "anish.testnet".to_string(), true,)]
        );
    }
}

'''
'''--- src/nearConfig/config.ts ---
const CONTRACT_NAME = "artodo.testnet";

export const env = {
  networkId: "testnet",
  nodeUrl: "https://rpc.testnet.near.org",
  contractName: CONTRACT_NAME,
  walletUrl: "https://wallet.testnet.near.org",
  helperUrl: "https://helper.testnet.near.org",
  explorerUrl: "https://explorer.testnet.near.org",
};

'''
'''--- src/nearConfig/near.ts ---
import { env } from "./config";
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";

const nearEnv = env;

export async function initializeContract() {
  const near = await connect(
    //@ts-ignore
    Object.assign(
      { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
      nearEnv
    )
  );

  //@ts-ignore
  window.walletConnection = new WalletConnection(near);
  //@ts-ignore
  window.walletConnection = new WalletConnection(near);
  //@ts-ignore
  window.accountId = window.walletConnection.getAccountId();
  //@ts-ignore
  window.contract = new Contract(
    //@ts-ignore
    window.walletConnection.account(),
    nearEnv.contractName,
    {
      viewMethods: ["get"],
      changeMethods: ["add", "done"],
    }
  );
}

export async function getAccountId() {
  //@ts-ignore
  return window.walletConnection.getAccountId();
}

export function login() {
  //@ts-ignore
  window.walletConnection.requestSignIn(nearEnv.contractName);
}

export function logout() {
  //@ts-ignore
  window.walletConnection.signOut();
  window.location.reload();
}

'''
'''--- src/reducer/init.ts ---
import { done, add } from "../util/init";
export const initialState: undefined = undefined;
export type ACTIONTYPE =
  | { type: "add"; payload: { task: string; arweave_id: string } }
  | { type: "done"; payload: string };

function reducer(_: typeof initialState, action: ACTIONTYPE) {
  switch (action.type) {
    case "add":
      add(action.payload.task, action.payload.arweave_id)
        .then()
        .catch((err) => console.log(err));
      return undefined;
    case "done":
      done(action.payload)
        .then()
        .catch((err) => console.log(err));
      return undefined;
    default:
      return undefined;
  }
}
export default reducer;

'''
'''--- src/util/init.ts ---
import Arweave from "arweave";
const arweave = Arweave.init({
  host: "arweave.net", // Hostname or IP address for a Arweave host
  port: 443, // Port
  protocol: "https", // Network protocol http or https
  timeout: 20000, // Network request timeouts in milliseconds
  logging: false, // Enable network request logging
});
export async function add(task: string, arweave_key: string) {
  const wallet = JSON.parse(arweave_key);
  const tx = await arweave.createTransaction({
    data: Buffer.from(task, "utf8"),
  });
  tx.addTag("Content-Type", "text/plain");
  await arweave.transactions.sign(tx, wallet);
  const response = await arweave.transactions.post(tx);
  if (response.status === 200) {
    //@ts-ignore
    window.contract.add({ arweave_tx: tx.id });
  }
}

export function get() {
  //@ts-ignore
  return window.contract.get();
}

export async function done(id: string) {
  //@ts-ignore
  return window.contract.done({ id: id });
}

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": ["src"]
}

'''