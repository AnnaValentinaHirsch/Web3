*GitHub Repository "adrianosingolani/near-zoo-nft"*

'''--- config-overrides.js ---
const webpack = require("webpack")

module.exports = function override(config, env) {
  //do stuff with the webpack config...
  config.resolve.fallback = {
    ...config.resolve.fallback,
    stream: require.resolve("stream-browserify"),
    buffer: require.resolve("buffer"),
  }
  config.resolve.extensions = [...config.resolve.extensions, ".ts", ".js"]
  config.plugins = [
    ...config.plugins,
    new webpack.ProvidePlugin({
      process: "process/browser",
      Buffer: ["buffer", "Buffer"],
    }),
  ]
  // console.log(config.resolve)
  // console.log(config.plugins)

  return config
}
'''
'''--- contract/compile.js ---
// This file does two things:
//
// 1. Compile the Rust contract using cargo (see buildCmd below). This will
//    create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// Rust project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js
// --debug`. Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
// Note: see other flags in ./cargo/config. Unfortunately, you cannot set the
// `--target option` in Cargo.toml.
const buildCmd = debug
  ? 'cargo build --target wasm32-unknown-unknown'
  : 'cargo build --target wasm32-unknown-unknown --release'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder â€“
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require('fs').readFileSync(`${__dirname}/Cargo.toml`).toString().match(/name = "([^"]+)"/)[1]
  const outFile = `./target/wasm32-unknown-unknown/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
  sh.cp('-u',outFile,link)
}

// exit script with the same code as the build command
process.exit(code)
'''
'''--- contract/target/rls/debug/build/wee_alloc-e2cb34bd00ad2611/out/wee_alloc_static_array_backend_size_bytes.txt ---
33554432
'''
'''--- contract/target/wasm32-unknown-unknown/debug/build/wee_alloc-96614ccff1c83e60/out/wee_alloc_static_array_backend_size_bytes.txt ---
33554432
'''
'''--- contract/target/wasm32-unknown-unknown/release/build/wee_alloc-eee7ea5cef997a34/out/wee_alloc_static_array_backend_size_bytes.txt ---
33554432
'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="#000000" />
  <meta name="description" content="Web site created using create-react-app" />
  <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
  <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
  <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
  <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons" />
  <title>Kharkiv Zoo NFTs Collection</title>
</head>

<body>
  <noscript>You need to enable JavaScript to run this app.</noscript>
  <div id="root"></div>
  <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
</body>

</html>
'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.js ---
import React from "react";

import Header from './components/Header'
import Mint from "./components/Mint";
import Collection from "./components/Collection";

import { Container } from "@mui/material";

function App() {
  return (
    <div className="App">
      <Header />
      <Container>
        <Mint />
        <Collection />
      </Container>
    </div>
  );
}

export default App;

'''
'''--- src/components/Collection.js ---
import React, { useState, useEffect } from 'react'

import {
  Typography,
  Box,
  Card,
  CardMedia,
} from '@mui/material'

import { nfts } from '../utils/nfts';

function Collection() {
  const [tokens, setTokens] = useState([])

  // useEffect(() => {
  //   console.log(tokens);
  //   console.log(tokens.some((t) => t.metadata.title === 'Lion'));
  // }, [tokens])

  useEffect(() => {
    getTokens()
  }, [])

  const getTokens = async () => {
    window.contract.nft_tokens_for_owner({
      account_id: window.accountId,
    })
      .then(res => {
        setTokens(res);
      })
      .catch(err => {
        console.log(err);
      })
  };

  return (
    <>
      <Typography variant='h4' sx={{marginBottom: 2}}>Collection</Typography>

      <Box sx={{ marginBottom: 4 }}>
        <Typography variant='overline'>Amphibians</Typography>
        <Box sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap' }}>
          {
            nfts.filter(nft => (nft.class === 'amphibians')).map((amphibian, i) => (
              <Card sx={{ width: '250px', padding: 1, border: '2px solid #777', marginRight: 2, marginBottom: 2 }} key={`amphibian_${i}`}>
                <CardMedia
                  component="img"
                  image={`https://adrianosingolani.github.io/near-zoo-nft/assets/${amphibian.title}.jpg`}
                  alt={amphibian.title}
                  sx={
                    tokens.some((t) => t.metadata.title === amphibian.title) ? null : { filter: 'grayscale(100%)', opacity: 0.35 }
                  }
                />
              </Card>
            ))
          }
        </Box>
      </Box>

      <Box sx={{ marginBottom: 4 }}>
        <Typography variant='overline'>Birds</Typography>
        <Box sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap' }}>
          {
            nfts.filter(nft => (nft.class === 'birds')).map((bird, i) => (
              <Card sx={{ width: '250px', padding: 1, border: '2px solid #777', marginRight: 2, marginBottom: 2 }} key={`bird_${i}`}>
                <CardMedia
                  component="img"
                  image={`https://adrianosingolani.github.io/near-zoo-nft/assets/${bird.title}.jpg`}
                  alt={bird.title}
                  sx={
                    tokens.some((t) => t.metadata.title === bird.title) ? null : { filter: 'grayscale(100%)', opacity: 0.35 }
                  }
                />
              </Card>
            ))
          }
        </Box>
      </Box>

      <Box sx={{ marginBottom: 4 }}>
        <Typography variant='overline'>Mammals</Typography>
        <Box sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap' }}>
          {
            nfts.filter(nft => (nft.class === 'mammals')).map((mammal, i) => (
              <Card sx={{ width: '250px', padding: 1, border: '2px solid #777', marginRight: 2, marginBottom: 2 }} key={`mammal_${i}`}>
                <CardMedia
                  component="img"
                  image={`https://adrianosingolani.github.io/near-zoo-nft/assets/${mammal.title}.jpg`}
                  alt={mammal.title}
                  sx={
                    tokens.some((t) => t.metadata.title === mammal.title) ? null : { filter: 'grayscale(100%)', opacity: 0.35 }
                  }
                />
              </Card>
            ))
          }
        </Box>
      </Box>

      <Box sx={{ marginBottom: 4 }}>
        <Typography variant='overline'>Reptiles</Typography>
        <Box sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap' }}>
          {
            nfts.filter(nft => (nft.class === 'reptiles')).map((reptile, i) => (
              <Card sx={{ width: '250px', padding: 1, border: '2px solid #777', marginRight: 2, marginBottom: 2 }} key={`reptile_${i}`}>
                <CardMedia
                  component="img"
                  image={`https://adrianosingolani.github.io/near-zoo-nft/assets/${reptile.title}.jpg`}
                  alt={reptile.title}
                  sx={
                    tokens.some((t) => t.metadata.title === reptile.title) ? null : { filter: 'grayscale(100%)', opacity: 0.35 }
                  }
                />
              </Card>
            ))
          }
        </Box>
      </Box>
    </>
  )
}

export default Collection
'''
'''--- src/components/Header.js ---
import * as React from 'react';

import { login, logout } from "../utils/near";

import {
  AppBar,
  Box,
  Toolbar,
  Typography,
  Button
} from '@mui/material/';

export default function ButtonAppBar() {
  const account = window.walletConnection.account();

  return (
    <Box sx={{ flexGrow: 1 }}>
      <AppBar position="static">
        <Toolbar>
          <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
            Kharkiv Zoo NFTs Collection
          </Typography>
          {account.accountId ? (
            <>
              <Typography variant="caption">{account.accountId}</Typography>
              <Button sx={{ marginLeft: 2 }} variant="outlined" color="inherit" onClick={() => logout()}>Logout</Button>
            </>
          ) : (
            <Button color="inherit" onClick={() => login()}>Login</Button>
          )}
        </Toolbar>
      </AppBar>
    </Box>
  );
}
'''
'''--- src/components/Mint.js ---
import React, { useEffect, useState } from 'react';

import {
  Box,
  Button,
  Typography,
} from '@mui/material';

import { nfts } from '../utils/nfts';

const BN = require("bn.js")

function Mint() {
  const account = window.walletConnection.account();

  const mintNFT = async () => {
    const index = Math.floor(Math.random() * nfts.length);

    const { title, description } = nfts[index];

    const params = {
      token_id: `${window.accountId}-${title}-${Date.now()}`,
      metadata: {
        title: title,
        description: description,
        media: `https://adrianosingolani.github.io/near-zoo-nft/assets/${title}.jpg`,
      },
      receiver_id: window.accountId,
    }

    await window.contract.nft_mint(
      params,
      300000000000000,
      new BN("1000000000000000000000000")
    );
  };

  return (
    <Box sx={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', marginY: 12 }}>
      <Typography variant='h6' align='center'>Collect NFTs to help the Kharkiv Zoo</Typography>
      <Box sx={{ width: '100%', display: 'flex', justifyContent: 'center' }}>
        <Button
          onClick={() => mintNFT()}
          disabled={account.accountId ? false : true}
          variant='contained'
          sx={{margin: 6}}
        >
          Mint NFT
        </Button>
      </Box>
    </Box>
  )
}

export default Mint
'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

import { initializeContract } from "./utils/near";

window.nearInitPromise = initializeContract()
  .then(() => {
    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(
      <React.StrictMode>
        <App />
      </React.StrictMode>
    );
  })
  .catch(console.error);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/utils/config.js ---
const CONTRACT_NAME = "zoo-nft.adriano.testnet"

function environment(env) {
  switch (env) {
    case "mainnet": 
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        explorerUrl: "https://explorer.mainnet.near.org",
      };
    case "testnet": 
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
      };
    default:
      throw Error(`Unknown environment '${env}'.`);
  }
}

export default environment;
'''
'''--- src/utils/near.js ---
import environment from './config';
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js';
import { formatNearAmount } from 'near-api-js/lib/utils/format';

const nearEnv = environment('testnet');

export async function initializeContract() {
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearEnv));
  window.walletConnection = new WalletConnection(near);
  window.accountId = window.walletConnection.getAccountId();
  window.contract = new Contract(
    window.walletConnection.account(),
    nearEnv.contractName,
    {
      viewMethods: ['nft_tokens_for_owner'],
      changeMethods: ['nft_mint'],
    }
  );
}

export async function accountBalance() {
  return formatNearAmount(
    (await window.walletConnection.account().getAccountBalance()).total,
    2
  );
}

export async function getAccountId() {
  return window.walletConnection.getAccountId();
}

export function login() {
  window.walletConnection.requestSignIn(nearEnv.contractName);
}

export function logout() {
  window.walletConnection.signOut();
  window.location.reload();
}
'''
'''--- src/utils/nfts.js ---
export const nfts = [
  {
    title: 'Lion',
    description: 'A symbol of courage and bravery - the majestic lion king of animals.',
    class: 'mammals',
  },
  {
    title: 'Wolf',
    description: 'An intelligent and freedom-loving predator, a relative of dogs of all breeds.',
    class: 'mammals',
  },
  {
    title: 'Capybara',
    description: 'Kind and charming giant among rodents.',
    class: 'mammals',
  },
  {
    title: 'Giraffe',
    description: 'An elegant giant, the tallest animal on Earth.',
    class: 'mammals',
  },
  {
    title: 'Hippopotamus',
    description: 'The largest and strongest inhabitant of rivers and lakes in Africa.',
    class: 'mammals',
  },
  {
    title: 'NileCrocodile',
    description: 'The largest and most formidable predator of African rivers and lakes.',
    class: 'reptiles',
  },
  {
    title: 'WaterAgama',
    description: 'A beautiful and unusual oriental symbol of dragon.',
    class: 'reptiles',
  },
  {
    title: 'Barnacle',
    description: 'A small, beautifully colored, few goose.',
    class: 'birds',
  },
  {
    title: 'Peacock',
    description: 'One of the most beautiful birds in the world because of its luxurious plumage.',
    class: 'birds',
  },
  {
    title: 'Vulture',
    description: 'The name of this bird comes from the Slavic word "strva", meaning "carrion", "waste".',
    class: 'birds',
  },
  {
    title: 'MarineToad',
    description: 'One of the largest and most venomous toads in South America.',
    class: 'amphibians',
  },
  {
    title: 'AustralianBlueTreeFrog',
    description: 'One of the largest tree frogs.',
    class: 'amphibians',
  },
]
'''