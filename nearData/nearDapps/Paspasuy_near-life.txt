*GitHub Repository "Paspasuy/near-life"*

'''--- README.md ---
near-game-of-life
==================

This [React] app was initialized with [create-near-app]

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] ≥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/frontend` folder. `/frontend/index.html` is a great
   place to start exploring. Note that it loads in `/frontend/assets/js/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `near-blank-project.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `near-blank-project.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [React]: https://reactjs.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- contract/Cargo.toml ---
[package]
name = "greeter"
version = "1.0.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "4.0.0"
uint = { version = "0.9.3", default-features = false }

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []

'''
'''--- contract/README.md ---
Smart Contract
==================

A [smart contract] written in [Rust] for an near-game-of-life initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contract/src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{near_bindgen, BlockHeight, BorshStorageKey, PanicOnDefault};
use near_sdk::collections::Vector;
use near_sdk::json_types::Base64VecU8;
use near_sdk::{env};
use near_sdk::serde::{Serialize, Deserialize};

const WIDTH: usize = 20;
const HEIGHT: usize = 20;
const FIELD_LEN: usize = WIDTH * HEIGHT / 8;

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Board {
    pub field: Base64VecU8,
}

impl Board {
    pub fn new() -> Self {
        Self {
            field: Base64VecU8::from(vec![0u8; FIELD_LEN]),
        }
    }
    pub fn from(field: Base64VecU8) -> Self {
        assert_eq!(FIELD_LEN, field.0.len());
        Self { field }
    }
    pub fn is_bit_set(&self, x: usize, y: usize) -> bool {
        let index = y * WIDTH + x;
        let byte_index = index / 8;
        let bit_index = index & 7;
        1 == ((self.field.0[byte_index] >> bit_index) & 1)
    }
    pub fn set_bit(&mut self, x: usize, y: usize, bit: bool) {
        let index = y * WIDTH + x;
        let byte_index = index / 8;
        let bit_index = index & 7;
        self.field.0[byte_index] |= 1u8 << bit_index;
        if !bit {
            self.field.0[byte_index] ^= 1u8 << bit_index
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct BoardWithBlock {
    pub board: Board,
    pub current_block_height: BlockHeight,
    pub prev_block_height: BlockHeight,
}

impl BoardWithBlock {
    pub fn new(board: Board) -> Self {
        Self {
            board,
            current_block_height: env::block_height(),
            prev_block_height: 0,
        }
    }
    pub fn step(&self) -> Self {
        let board = &self.board;
        let mut new_board = Board::new();
        let block_height = env::block_height();
        for y in 0..HEIGHT {
            for x in 0..WIDTH {
                let bit = board.is_bit_set(x, y);
                let mut sum = 0;
                for off_y in 0..3 {
                    for off_x in 0..3 {
                        if off_x == 1 && off_y == 1 {
                            continue;
                        }
                        let ny = (y + off_y + HEIGHT - 1) % HEIGHT;
                        let nx = (x + off_x + WIDTH - 1) % WIDTH; 
                        if board.is_bit_set(nx, ny) {
                            sum += 1;
                        }
                    }
                }
                if sum == 3 || sum == 2 && bit {
                    new_board.set_bit(x, y, true);
                }
            }
        }
        let prev_block_height = if self.current_block_height == block_height {
            self.prev_block_height
        } else {
            self.current_block_height
        };
        Self {
            board: new_board,
            current_block_height: block_height,
            prev_block_height,
        }
    }
}

#[derive(BorshSerialize, BorshStorageKey)]
pub enum StorageKey {
    Boards,
}

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
    pub boards: Vector<BoardWithBlock>,
}

pub type BoardIndex = u64;

#[near_bindgen]
impl Contract {
    #[init]
    pub fn new() -> Self {
        Self {
            boards: Vector::new(StorageKey::Boards),
        }
    }
    pub fn create_board(&mut self, field: Base64VecU8) -> BoardIndex {
        let board = Board::from(field);
        let board_with_block = BoardWithBlock::new(board);
        let index = self.boards.len();
        self.boards.push(&board_with_block);
        index
    }
    pub fn get_board(&self, index: BoardIndex) -> Option<BoardWithBlock> {
        self.boards.get(index)
    }
    pub fn step(&mut self, index: BoardIndex) -> BoardWithBlock {
        let board = self.get_board(index).expect("No board??");
        let new_board = board.step();
        self.boards.replace(index, &new_board);
        new_board
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    fn debug_board(board: &Board) {
        for i in 0..HEIGHT {
            for j in 0..WIDTH {
                if board.is_bit_set(j, i) {
                    print!("■");
                } else {
                    print!(".");
                }
            }
            println!();
        }
        println!();
    }

    #[test]
    fn board_create_get() {
        let mut contract = Contract::new();
        let mut field = vec![0u8; FIELD_LEN];
        field[0] = 24;
        let index = contract.create_board(field.clone().into());
        assert_eq!(index, 0);
        let b2 = contract.get_board(0).unwrap();
        assert_eq!(b2.board.field.0, field);
        debug_board(&b2.board);
    }
/*    #[test]
    fn board_step() {
        let mut contract = Contract::new();
        let mut field = vec![0u8; FIELD_LEN];
        field[0] = 4;
        field[WIDTH / 8] = 5;
        field[2 * WIDTH / 8] = 6;
        let field = Base64VecU8::from(field);
        let serialized: String = near_sdk::serde_json::to_string(&field).unwrap();
        println!("{}", serialized);
        let index = contract.create_board(field.clone());
        assert_eq!(index, 0);
        debug_board(&Board::from(field));
        let b2 = contract.step(index);
        debug_board(&b2.board);
        assert_eq!(b2.board.field.0[0], 2);
        assert_eq!(b2.board.field.0[WIDTH / 8], 12);
        assert_eq!(b2.board.field.0[2 * WIDTH / 8], 6);
    }*/
    #[test]
    fn get_pulsar_encoded() {
        let mut contract = Contract::new();
        let mut brd = Board::new();
        brd.set_bit(5, 3, true); brd.set_bit(6, 3, true); brd.set_bit(7, 3, true);
        brd.set_bit(5, 8, true); brd.set_bit(6, 8, true); brd.set_bit(7, 8, true);
        brd.set_bit(3, 5, true); brd.set_bit(3, 6, true); brd.set_bit(3, 7, true);
        brd.set_bit(8, 5, true); brd.set_bit(8, 6, true); brd.set_bit(8, 7, true);

        brd.set_bit(5, 10, true); brd.set_bit(6, 10, true); brd.set_bit(7, 10, true);
        brd.set_bit(5, 15, true); brd.set_bit(6, 15, true); brd.set_bit(7, 15, true);
        brd.set_bit(3, 11, true); brd.set_bit(3, 12, true); brd.set_bit(3, 13, true);
        brd.set_bit(8, 11, true); brd.set_bit(8, 12, true); brd.set_bit(8, 13, true);

        brd.set_bit(11, 3, true); brd.set_bit(12, 3, true); brd.set_bit(13, 3, true);
        brd.set_bit(11, 8, true); brd.set_bit(12, 8, true); brd.set_bit(13, 8, true);
        brd.set_bit(10, 5, true); brd.set_bit(10, 6, true); brd.set_bit(10, 7, true);
        brd.set_bit(15, 5, true); brd.set_bit(15, 6, true); brd.set_bit(15, 7, true);

        brd.set_bit(11, 10, true); brd.set_bit(12, 10, true); brd.set_bit(13, 10, true);
        brd.set_bit(11, 15, true); brd.set_bit(12, 15, true); brd.set_bit(13, 15, true);
        brd.set_bit(10, 11, true); brd.set_bit(10, 12, true); brd.set_bit(10, 13, true);
        brd.set_bit(15, 11, true); brd.set_bit(15, 12, true); brd.set_bit(15, 13, true);

        let serialized: String = near_sdk::serde_json::to_string(&brd.field).unwrap();
        println!("{}", serialized);
        debug_board(&brd);
        let mut tmp = BoardWithBlock::new(brd);
        let tmp = tmp.step();
        let tmp = tmp.step();
        let tmp = tmp.step();
        debug_board(&tmp.board);
    }
    /*
    #[test]
    fn get_blink_encoded() {
        let mut contract = Contract::new();
        let mut brd = Board::new();
        brd.set_bit(1, 0, true); brd.set_bit(1, 1, true); brd.set_bit(1, 2, true);

        let serialized: String = near_sdk::serde_json::to_string(&brd.field).unwrap();
        println!("{}", serialized);
        debug_board(&brd);
        let tmp = BoardWithBlock::new(brd);
        let b2 = tmp.step();
        debug_board(&b2.board);
    }*/
    #[test]
    fn get_glider_encoded() {
        let mut contract = Contract::new();
        let mut brd = Board::new();
        brd.set_bit(0, 1, true); brd.set_bit(1, 2, true);
        brd.set_bit(2, 2, true);
        brd.set_bit(2, 1, true);
        brd.set_bit(2, 0, true);

        let serialized: String = near_sdk::serde_json::to_string(&brd.field).unwrap();
        println!("{}", serialized);
        debug_board(&brd);
        let tmp = BoardWithBlock::new(brd);
        let b2 = tmp.step();
        debug_board(&b2.board);
    }
}

'''
'''--- decoder.py ---
WIDTH = 20
HEIGHT = 20

import base64

s = input()
b = base64.b64decode(s)

board = [['.' for i in range(WIDTH)] for j in range(HEIGHT)]
for i in range(len(b)):
	for t in range(8):
		val = (b[i] >> t) & 1
		ind = i * 8 + t
		y = ind // WIDTH
		x = ind % WIDTH
		board[y][x] = 'X' if val else '.'
for i in board:
	print(*i, sep='')

'''
'''--- frontend/App.js ---
import 'regenerator-runtime/runtime'
import React from 'react'

import './assets/css/global.css'

import {login, logout, create_board, get_board, step} from './assets/js/near/utils'
import getConfig from './assets/js/near/config'

/*
const gamesSlice = createSlice({
  name: 'games',
  initialState: {
    games: []
  },
  reducers: {
    incremented: state => {
      state.value += 1
    },
    decremented: state => {
      state.value -= 1
    }
  }
})
export const { incremented, decremented } = counterSlice.actions
const store = configureStore({
  reducer: counterSlice.reducer
})
store.subscribe(() => console.log(store.getState()))
store.dispatch(incremented())
store.dispatch(incremented())
store.dispatch(decremented())
*/

export default function App() {
  const [buttonDisabled, setButtonDisabled] = React.useState(true)
  const [showNotification, setShowNotification] = React.useState(false)

/*  const setId = (i) => {
    if (i >= 0) {
      setBoardId(i);
      getBoard(i);
    }
  };*/
  // The useEffect hook can be used to fire side-effects during render
  // Learn more: https://reactjs.org/docs/hooks-intro.html
  // React.useEffect(() => {getBoard(boardId)},
    // The second argument to useEffect tells React when to re-run the effect
    // Use an empty array to specify "only run on first render"
    // This works because signing into NEAR Wallet reloads the page
    // []
  // )
  // if not signed in, return early with sign-in prompt
  if (!window.walletConnection.isSignedIn()) {
    return (
      <main>
        <h1> GAME OF LIFE </h1>
        <p style={{ textAlign: 'center' }}>Sign in with your NEAR wallet and play!</p>
        <p style={{ textAlign: 'center', marginTop: '1.5em' }}>
          <button className="normal" onClick={login}>Sign in</button>
        </p>
      </main>
    )
  }

  return (
    <>
      <button className="link" style={{ float: 'right' }} onClick={logout}>
        Sign out
      </button>
      <main>
        <h1> GAME OF LIFE </h1>
        
        <Game />

      </main>
      <div className="footer">
        <p>made by I_love_geom</p>
      </div>
    </>
  )
}

class GameData {
  constructor(boardId) {
    this.history = [];
    this.boardId = boardId;
    this.index = -1;
  }
    // "BAAIAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="
/*    this.index = 0;
    this.history = [decode("BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=")];
*/
}

class Game extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      games: [new GameData(0)],
      boardId: 0,
      showNotification: false,
    }
  }

  UNSAFE_componentWillMount() {
    this.fetchBoard();
  }

  plusBoardId() {
    const bid = this.state.boardId;
    if (bid + 1 >= this.state.games.length) {
      this.state.games.push(new GameData(bid));
      this.state.boardId = bid + 1;
      this.fetchBoard();
    } else {
      this.setState({ 
        boardId: bid + 1
      })
    } 
 }

  minusBoardId() {
    if (this.state.boardId > 0) {
      this.setState({boardId: this.state.boardId - 1})
    }
  }

  prevMove() {
    const bid = this.state.boardId;
    if (this.state.games[bid].index > 0) {
      let newGames = JSON.parse(JSON.stringify(this.state.games));
      newGames[bid].index -= 1;
      this.setState({
        games: newGames,
      })
    }
  }

  async nextMove() {
    const bid = this.state.boardId;
    if (this.state.games[bid].index + 1 < this.state.games[bid].history.length) {
      let newGames = JSON.parse(JSON.stringify(this.state.games));
      newGames[bid].index += 1;
      this.setState({
        games: newGames,
      })
    } else {
      this.setState({showNotification: true});
      console.log("waiting step...");
      await step(bid);
      console.log("done!");
      this.fetchBoard();
      this.setState({showNotification: false});
    }
  }

  async fetchBoard() {
    let newGames = JSON.parse(JSON.stringify(this.state.games));
    const bid = this.state.boardId;
    const g = this.state.games[bid];
    console.log("waiting get board...");
    let st = await get_board(bid);
    console.log("done!");
      // .then(st => {
        if (st != null) {
          if (g.history == 0 ||
              g.history[g.history.length - 1].current_block_height 
              != st.current_block_height) {
          // newGames[bid].index = 0;
          // newGames[bid].history = [decode("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=")];
            newGames[bid].index = g.history.length;
            newGames[bid].history.push(decode(st.board.field));
          }
        } else {
          newGames[bid].index = 0;
          newGames[bid].history = [decode("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=")];
        }
      // });
    // console.log("setting state! ", newGames);
    this.setState({
      games: newGames,
    })
  }

  getAlive() {
    return getAlive(this.state.games[this.state.boardId].history[this.state.games[this.state.boardId].index])
  }

  render() {
    // console.log("rendering!");
    // console.log(this.state.boardId);
    // console.log(this.state.games[this.state.boardId]);
    return (
      <>
      <div style={{ display: 'flex' }}>
        <div>
          <Field field={
            this.state.games[this.state.boardId]
            .history[this.state.games[this.state.boardId].index]
          } />
          <div className="buttons">
            <button
              className="normal"
              onClick={this.prevMove.bind(this)}
              disabled={this.state.games[this.state.boardId].index == 0} 
            >◀</button>
            <button className="normal"
              style={{ marginLeft: '1em' }}
              onClick={this.nextMove.bind(this)}
              disabled={this.state.showNotification && 
              this.state.games[this.state.boardId].index + 1 == this.state.games[this.state.boardId].history.length}
            > {this.state.games[this.state.boardId].index + 1 == this.state.games[this.state.boardId].history.length ? "Next": "▶"}
            </button>
          </div>
        </div>
        <div className="left">
          <p><b>Wallet: </b><code>{window.accountId}</code></p>
          <p><b>Board ID: </b>
            <button className="link" onClick={this.minusBoardId.bind(this)}>−</button>
            <code>{this.state.boardId}</code>
            <button className="link" onClick={this.plusBoardId.bind(this)}>+</button>
          </p>
          <p><b>Step: </b><code>{this.state.games[this.state.boardId].index}</code></p>
          <p><b>Alive cells: </b><code>{getAlive(this.state.games[this.state.boardId].history[this.state.games[this.state.boardId].index])}</code></p>
        </div>
      </div>
      {this.state.showNotification && <Notification />}</>
    )
  }
}

class Field extends React.Component {
  get(i) {
    if (this.props.field == undefined) {
      return "^";
    }
    const byteIndex = Math.floor(i / 8);
    const bitIndex = Math.floor(i % 8);
    return (this.props.field[byteIndex] >> bitIndex) & 1 ? "■": ".";
  }
  render() {
    // console.log("rendering field: ", this.props.field);
    return (
      <tbody>
        {[...Array(20)].map((x, i) => <tr key={i}>
          {[...Array(20)].map((y, j) =>
            <code key={i*20+j}> {this.get(i*20+j)} </code>
          )}
        </tr>)}
      </tbody>
    );
  }
}

// this component gets rendered by App after the form is submitted
function Notification() {
  const { networkId } = getConfig(process.env.NODE_ENV || 'development')
  const urlPrefix = `https://explorer.${networkId}.near.org/accounts`

  return (
    <aside>
      <a target="_blank" rel="noreferrer" href={`${urlPrefix}/${window.accountId}`}>
        {window.accountId}
      </a>
      {' '/* React trims whitespace around tags; insert literal space character when needed */}
      called method: 'step' in contract:
      {' '}
      <a target="_blank" rel="noreferrer" href={`${urlPrefix}/${window.contract.contractId}`}>
        {window.contract.contractId}
      </a>
      <footer>
        <div>◷ Waiting</div>
        <div>Just now</div>
      </footer>
    </aside>
  )
}

function decode(s) {
  if (s == null) {
    return new Uint8Array(10*5).fill(0);
  }
  return Uint8Array.from(atob(s), c => c.charCodeAt(0)); 
}
function getAlive(field) {
  var ans = 0;
  for (var n in field) {
    var num = field[n];
    while (num > 0) {
      ans += (num & 1);
      num >>= 1;
    }
  }
  return ans;
}
'''
'''--- frontend/assets/css/global.css ---
* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 38em;
  text-align: justify;
}

h1 {
  background-image: url(../img/logo-black.svg);
  background-position: center 0.2em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 1.7em 0 0.5em;
  text-align: center;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}

button.normal {
  background-color: var(--secondary);
  border-radius: 10px;
  border: none;
  color: #efefef;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button.small {
  /*background-color: darkred;*/
  background-color: var(--light-gray);
  border-radius: 5px;
  border: none;
  color: #efefef;
  transition: transform 30ms;
  margin-left: 5px;
  margin-right: 5px;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
  cursor: pointer;
}
button:active {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.1) inset;
}
button.link {
  background: none;
  border: none;
  box-shadow: none;
  display: inline;
}
[disabled] button, button[disabled] {
  box-shadow: none;
  background-color: var(--light-gray);
  color: gray;
  cursor: not-allowed;
  transform: none;
}
[disabled] button {
  text-indent: -900em;
  width: 2em;
  position: relative;
}
[disabled] button:after {
  content: " ";
  display: block;
  width: 0.8em;
  height: 0.8em;
  border-radius: 50%;
  border: 2px solid #fff;
  border-color: var(--fg) transparent var(--fg) transparent;
  animation: loader 1.2s linear infinite;
  position: absolute;
  top: 0.45em;
  right: 0.5em;
}
@keyframes loader {
  0% { transform: rotate(0deg) }
  100% { transform: rotate(360deg) }
}

fieldset {
  border: none;
  padding: 2em 0;
}

input {
  background-color: var(--shadow);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 1em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

aside {
  animation: notify ease-in-out 10s;
  background-color: var(--shadow);
  border-radius: 5px;
  bottom: 0;
  font-size: 0.8em;
  margin: 1em;
  padding: 1em;
  position: fixed;
  transform: translateY(10em);
  right: 0;
}
aside footer {
  display: flex;
  font-size: 0.9em;
  justify-content: space-between;
  margin-top: 0.5em;
}
aside footer *:first-child {
  color: yellow;
/*  color: var(--success);*/
}
aside footer *:last-child {
  color: var(--gray);
}
@keyframes notify {
  0% { transform: translateY(10em) }
  5% { transform: translateY(0) }
  95% { transform: translateY(0) }
  100% { transform: translateY(10em) }
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(../img/logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

div.left {
  margin-left: 1.5em;
}
div.buttons {
  margin-top: 0.5em;
  justify-content: center;
  display: flex;
}

div.footer {
  margin-top: 1.5em;
  justify-content: center;
  display: flex;
  color: var(--light-gray);
}
'''
'''--- frontend/assets/img/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- frontend/assets/img/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- frontend/assets/js/near/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME ||'dev-1658234674892-22353971478204'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- frontend/assets/js/near/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig(/*process.env.NODE_ENV || */'development')

export async function initContract() {
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))
  window.walletConnection = new WalletConnection(near)
  window.accountId = window.walletConnection.getAccountId()
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    viewMethods: ['get_board'],
    changeMethods: ['create_board', 'step'],
  })
}

export function logout() {
  window.walletConnection.signOut()
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

export async function create_board(field){
  let index = await window.contract.set_greeting({
    args:{field: field}
  })
  return index
}

export async function get_board(index){
  let board = await window.contract.get_board({index: index});
  console.log(index, board);
  if (board == null) {
    return null;
  }
  return board;
}

export async function step(index){
  let board = await window.contract.step({index: index});
  return board
}
'''
'''--- frontend/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/img/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/img/favicon.ico" />
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script src="./index.js" type="module"></script>
  </body>
</html>

'''
'''--- frontend/index.js ---
import React from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'
import { initContract } from './assets/js/near/utils'

const container = document.querySelector('#root')
const root = createRoot(container) // createRoot(container!) if you use TypeScript

window.nearInitPromise = initContract()
  .then(() => {
    <App />
    root.render(<App tab="home" />)
  })
  .catch(console.error)

'''