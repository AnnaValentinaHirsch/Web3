*GitHub Repository "L-tech/near-charity"*

'''--- .env ---
SKIP_PREFLIGHT_CHECK=true
'''
'''--- README.md ---
# Near Charity

This project is a MVP Dapp built on Near Protocol for making donations and contributions to charitable projects.

## Link

You can view the [website](https://l-tech.github.io/near-charity/)

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- assembly/index.ts ---
import { Charity, listedCharities } from './model';
import { ContractPromiseBatch, context, u128 } from 'near-sdk-as';
// import { compareImpl } from 'assemblyscript/std/assembly/util/string';

export function setCharity(charity: Charity): void {
    let storedCharity = listedCharities.get(charity.id);
    if (storedCharity !== null) {
        throw new Error(`a charity with ${charity.id} already exists`);
    }
    listedCharities.set(charity.id, Charity.fromPayload(charity));
}

// get a single charity by id
export function getCharity(id: string): Charity | null {
    return listedCharities.get(id);
}

// get all charity projects
export function getCharities(): Charity[] {
    return listedCharities.values();
}

// donate to a charity project
export function donateToCharity(charityId: string): void {
    const charity = getCharity(charityId);
    if (charity == null) {
        throw new Error("charity not found");
    }
    
    if (context.attachedDeposit.toString() == "0") {
        throw new Error("attached deposit should be greater than 0");
    }

    ContractPromiseBatch.create(charity.owner).transfer(context.attachedDeposit);

    if(!charity.donors.includes(context.sender)) {
        charity.donors.push(context.sender);
    }
    if(context.attachedDeposit.toString() > charity.highest.toString()) { 
        charity.highest = context.attachedDeposit;
    }
    charity.increaseDonation(context.attachedDeposit);
    listedCharities.set(charity.id, charity);
}

// donate 1 Near to all charity projects
export function donateToAll(): void {
    const charities = getCharities().filter(charity => !charity.completed);
    const total = (1000000000000000000000000 * charities.length).toString();
    if(context.attachedDeposit < u128.fromString(total)) {
        throw new Error("attached deposit should be greater than " + total);
    }
    charities.forEach(charity => {

        ContractPromiseBatch.create(charity.owner).transfer(u128.fromString("1000000000000000000000000"));

        if(!charity.donors.includes(context.sender)) {
            charity.donors.push(context.sender);
        }
        if("1000000000000000000000000" > charity.highest.toString()) { 
            charity.highest = u128.fromString("1000000000000000000000000")
        }
        charity.increaseDonation(u128.fromString("1000000000000000000000000"));
        listedCharities.set(charity.id, charity);
    });

}

// transfer the ownership of a charity project to a new owner
export function transferCharityOwnership(charityId: string, newOwner: string): void {
    const charity = getCharity(charityId);
    if (charity == null) {
        throw new Error("charity not found");
    }
    if(charity.owner != context.sender) {
        throw new Error("you are not the owner of this charity project");
    }
    charity.owner = newOwner;
    listedCharities.set(charity.id, charity);
}

// delete a charity
export function deleteCharity(charityId: string): void {
    const charity = getCharity(charityId);
    if (charity == null) {
        throw new Error("charity not found");
    }
    if(charity.owner != context.sender) {
        throw new Error("you are not the owner of this charity project");
    }
    listedCharities.delete(charity.id);
}

// get all uncompleted charity projects count
export function getOngoingCharityCount(): number {
    return getCharities().filter(charity => !charity.completed).length;
}

'''
'''--- assembly/model.ts ---
import { PersistentUnorderedMap, u128, context } from "near-sdk-as";

@nearBindgen
export class Charity {
    id: string;
    name: string;
    purpose: string;
    image: string;
    location: string;
    goal: u128;
    raised: u128;
    donors: Array<string>;
    donations: u32;
    owner: string;
    highest: u128;
    completed: boolean;
    public static fromPayload(payload: Charity): Charity {
        const charity = new Charity();
        charity.id = payload.id;
        charity.name = payload.name;
        charity.purpose = payload.purpose;
        charity.image = payload.image;
        charity.location = payload.location;
        charity.goal = payload.goal;
        charity.owner = context.sender;
        charity.completed = false;
        charity.raised = u128.Zero;
        charity.highest = u128.Zero;
        charity.donors = [];
        return charity;
    }
    public increaseDonation(amount: u128): void {
        this.donations = this.donations + 1;
        this.raised = u128.add(this.raised, amount);
        if(this.raised >= this.goal) {
            this.completed = true;
        }
    }
}

export const listedCharities = new PersistentUnorderedMap<string, Charity>("LISTED_CHARITIES");
'''
'''--- assembly/tsconfig.json ---
{
    "extends": "../node_modules/assemblyscript/std/assembly.json",
    "include": [
      "./**/*.ts"
    ]
  }
'''
'''--- package.json ---
{
  "homepage": "https://L-tech.github.io/near-charity",
  "name": "near-charity",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.4",
    "@testing-library/react": "^13.1.1",
    "@testing-library/user-event": "^13.5.0",
    "bootstrap": "^5.1.3",
    "bootstrap-icons": "^1.8.1",
    "gh-pages": "^3.2.3",
    "near-api-js": "^0.44.2",
    "react": "^18.0.0",
    "react-bootstrap": "^2.3.0",
    "react-dom": "^18.0.0",
    "react-router-dom": "^6.3.0",
    "react-scripts": "^4.0.3",
    "react-toastify": "^8.2.0",
    "uuid": "^8.3.2",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "predeploy": "npm run build",
    "deploy": "gh-pages -d build"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="A decentralized donations platform for charity, built on NEAR"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Near Charity(Donations)</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

'''
'''--- src/App.js ---
import React, { useEffect, useCallback, useState } from "react";
import { Container, Nav } from "react-bootstrap";
import { login, logout as destroy, accountBalance } from "./utils/near";
import Wallet from "./components/Wallet";
import { Notification } from "./components/utils/Notifications";
import Charities from "./components/donations/Charities";
import Cover from "./components/utils/Cover";
import coverImg from "./assets/img/donations.jpg";
import "./App.css";

const App = function AppWrapper() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");

  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);

  return (
    <>
      <Notification />
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet
                address={account.accountId}
                amount={balance}
                symbol="NEAR"
                destroy={destroy}
              />
            </Nav.Item>
          </Nav>
          <main>
            <Charities />
          </main>
        </Container>
      ) : (
        <Cover name="Near Charity" login={login} coverImg={coverImg} />
      )}
    </>
  );
};

export default App;
'''
'''--- src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- src/components/Wallet.js ---
import React from "react";
import { Dropdown, Stack, Spinner } from "react-bootstrap";

const Wallet = ({ address, amount, symbol, destroy }) => {
  if (address) {
    return (
      <>
        <Dropdown>
          <Dropdown.Toggle
            variant="light"
            align="end"
            id="dropdown-basic"
            className="d-flex align-items-center border rounded-pill py-1"
          >
            {amount ? (
              <>
                {amount} <span className="ms-1"> {symbol}</span>
              </>
            ) : (
              <Spinner animation="border" size="sm" className="opacity-25" />
            )}
          </Dropdown.Toggle>

          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item
              href={`https://explorer.testnet.near.org/accounts/${address}`}
              target="_blank"
            >
              <Stack direction="horizontal" gap={2}>
                <i className="bi bi-person-circle fs-4" />
                <span className="font-monospace">{address}</span>
              </Stack>
            </Dropdown.Item>

            <Dropdown.Divider />
            <Dropdown.Item
              as="button"
              className="d-flex align-items-center"
              onClick={() => {
                destroy();
              }}
            >
              <i className="bi bi-box-arrow-right me-2 fs-4" />
              Disconnect
            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </>
    );
  }

  return null;
};

export default Wallet;
'''
'''--- src/components/donations/AddCharity.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";

const AddCharity = ({ save }) => {
  const [name, setName] = useState("");
  const [image, setImage] = useState("");
  const [purpose, setPurpose] = useState("");
  const [location, setLocation] = useState("");
  const [goal, setGoal] = useState(1);

  const min = 100000000000000000000000;

  const isFormFilled = () => name && image && purpose && location && Number(goal) > min;

  const [show, setShow] = useState(false);

  const handleClose = () => setShow(false);
  const handleShow = () => setShow(true);

  return (
    <>
      <Button
        onClick={handleShow}
        variant="dark"
        className="rounded-pill px-0"
        style={{ width: "38px" }}
      >
        <i class="bi bi-plus"></i>
      </Button>
      <Modal show={show} onHide={handleClose} centered>
        <Modal.Header closeButton>
          <Modal.Title>New Charity Project</Modal.Title>
        </Modal.Header>
        <Form>
          <Modal.Body>
            <FloatingLabel
              controlId="inputName"
              label="Charity name"
              className="mb-3"
            >
              <Form.Control
                type="text"
                onChange={(e) => {
                  setName(e.target.value);
                }}
                placeholder="Enter name of Charity Project"
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputUrl"
              label="Image URL"
              className="mb-3"
            >
              <Form.Control
                type="text"
                placeholder="Image URL"
                onChange={(e) => {
                  setImage(e.target.value);
                }}
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputPurpose"
              label="Purpose"
              className="mb-3"
            >
              <Form.Control
                as="textarea"
                placeholder="purpose"
                style={{ height: "80px" }}
                onChange={(e) => {
                  setPurpose(e.target.value);
                }}
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputLocation"
              label="Location"
              className="mb-3"
            >
              <Form.Control
                type="text"
                placeholder="Location"
                onChange={(e) => {
                  setLocation(e.target.value);
                }}
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputGoal"
              label="Goal"
              className="mb-3"
            >
              <Form.Control
                type="number"
                placeholder="Goal(Min 1 Near)"
                onChange={(e) => {
                  setGoal(e.target.value);
                }}
              />
            </FloatingLabel>
          </Modal.Body>
        </Form>
        <Modal.Footer>
          <Button variant="outline-secondary" onClick={handleClose}>
            Close
          </Button>
          <Button
            variant="dark"
            disabled={!isFormFilled()}
            onClick={() => {
              save({
                name,
                image,
                purpose,
                location,
                goal,
              });
              handleClose();
            }}
          >
            Save Charity
          </Button>
        </Modal.Footer>
      </Modal>
    </>
  );
};

AddCharity.propTypes = {
  save: PropTypes.func.isRequired,
};

export default AddCharity;
'''
'''--- src/components/donations/Charities.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddCharity from "./AddCharity";
import Charity from "./Charity";
import Loader from "../utils/Loader";
import { Row } from "react-bootstrap";

import { NotificationSuccess, NotificationError } from "../utils/Notifications";
import {
  getCharities as getCharityList,
  donateToCharity,
  donateToAllProjects,
  createCharity,
  getOngoingCharitiesCount,
} from "../../utils/donations";

const Charities = () => {
  const [charities, setCharities] = useState([]);
  const [loading, setLoading] = useState(false);

  // function to get the list of charity projects
  const getCharities = useCallback(async () => {
    try {
      setLoading(true);
      setCharities(await getCharityList());
    } catch (error) {
    } finally {
      setLoading(false);
    }
  });

  const addCharity = async (data) => {
    try {
      setLoading(true);
      createCharity(data).then((resp) => {
        getCharities();
      });
      toast(<NotificationSuccess text="Charity Project created successfully." />);
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to create a charity project." />);
    } finally {
      setLoading(false);
    }
  };

  const donateToAll = async (charityId) => {
    let countIt = 0;
    try {
      setLoading(true);
      await getOngoingCharitiesCount().then((resp) => {
        countIt = resp;
      }, (err) => {
        console.log({ err });
      });
      await donateToAllProjects({
        amount: countIt,
      }).then((resp) => getCharities());
      toast(<NotificationSuccess text="Donation successfully made to all Charity Projects." />);
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to make donation." />);
    } finally {
      setLoading(false);
    }
  }

 

  //  function to initiate transaction
  const donate = async (id, price) => {
    try {
      await donateToCharity({
        id,
        price,
      }).then((resp) => getCharities());
      toast(<NotificationSuccess text="Donation successfully made to Charity Project." />);
    } catch (error) {
      toast(<NotificationError text="Failed to make donation." />);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    getCharities();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h1 className="fs-4 fw-bold mb-0">Near Charity(Donations)</h1>
            <button className="btn btn-dark" onClick={donateToAll}>Donate To All(1 Near Each)</button>
            <AddCharity save={addCharity} />
            
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {charities.map((_charity) => (
              <Charity
                charity={{
                  ..._charity,
                }}
                donate={donate}
              />
            ))}
          </Row>
        </>
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Charities;
'''
'''--- src/components/donations/Charity.js ---
import React, { useEffect, useState, useCallback } from "react";
import PropTypes from "prop-types";
import { toast } from "react-toastify";
import { utils } from "near-api-js";
import MakeDonation from "./MakeDonation";
import { Card, Button, Col, Badge, Stack } from "react-bootstrap";
import { parseNearAmount } from "near-api-js/lib/utils/format";
import { NotificationSuccess, NotificationError } from "../utils/Notifications";
import {
  getCharities as getCharityList,
  donateToCharity,
  deleteCharity,
} from "../../utils/donations";

const Charity = ({ charity }) => {
  const [charities, setCharities] = useState([]);
  const [loading, setLoading] = useState(false);

  const account = window.walletConnection.account();

  const deleteCharityProject = async (charityId) => {
    console.log(charityId);
    try {
      setLoading(true);
      await deleteCharity({
        id: charityId
      }).then((resp) => getCharities());
      toast(<NotificationSuccess text="Charity Project deleted successfully." />);
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to delete project ." />);
    } finally {
      setLoading(false);
    }
  }

  const getCharities = useCallback(async () => {
    try {
      setLoading(true);
      setCharities(await getCharityList());
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const { id, goal, name, purpose, raised, location, image, owner, donations, highest, donors } =
    charity;

  const makeDonation = async (data) => {
    try {
      setLoading(true);
      await donateToCharity({
        id: data.id,
        donation: (data.donation + ""),

      }).then((resp) => getCharities());
      toast(<NotificationSuccess text="Charity Project created successfully." />);
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to make a donation to charity." />);
    } finally {
      setLoading(false);
    }
  };

  const donate = async (id, amount) => {
    try {
      await donateToCharity({
        id,
        amount,
      }).then((resp) => getCharities());
      toast(<NotificationSuccess text="Meal successfully purchased" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Col key={id}>
      <Card className=" h-100">
        <Card.Header>
          <Stack direction="horizontal" gap={2}>
            <span className="font-monospace text-secondary">{owner}</span>
            <Badge bg="secondary" className="ms-auto">
            Goal: {utils.format.formatNearAmount(goal, 2)} Near | Raised: {utils.format.formatNearAmount(raised, 2)} Near
            </Badge>
          </Stack>
        </Card.Header>
        <div className=" ratio ratio-4x3">
          <img src={image} alt={name} style={{ objectFit: "cover" }} />
        </div>
        <Card.Body className="d-flex  flex-column text-center">
          <Card.Title>{name}</Card.Title>
          <Card.Subtitle className="mb-2 text-muted">{donations} Donation(s) | Highest Donation: {utils.format.formatNearAmount(highest)} Near</Card.Subtitle>
          <Card.Text>Last Donor: {donors[donors.length - 1]}</Card.Text>
          <Card.Text className="flex-grow-1 ">{purpose}</Card.Text>
          <Card.Text className="text-secondary">
            <span>{location}</span>
          </Card.Text>
          <Button
            variant="outline-dark"
            className="w-100 py-3"
          >
            Make Donation <MakeDonation save={makeDonation} id={id}/>
          </Button>
          <button style={owner == account.accountId ? {} : { display: 'none' }} className="btn btn-danger" onClick={() => deleteCharityProject(id)}>Delete</button>
          
        </Card.Body>
      </Card>
    </Col>
  );
};

Charity.propTypes = {
  charity: PropTypes.instanceOf(Object).isRequired,
  buy: PropTypes.func.isRequired,
};

export default Charity;
'''
'''--- src/components/donations/MakeDonation.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";

const MakeDonation = ({ save, id }) => {
  const [donation, setDonation] = useState(0);
  const min = 10000000000000000000000;

  const isFormFilled = () =>  Number(donation) > min;

  const [show, setShow] = useState(false);

  const handleClose = () => setShow(false);
  const handleShow = () => setShow(true);

  return (
    <>
      <Button
        onClick={handleShow}
        variant="dark"
        className="rounded-pill px-0"
        style={{ width: "38px" }}
      >
        <i class="bi bi-plus"></i>
      </Button>
      <Modal show={show} onHide={handleClose} centered>
        <Modal.Header closeButton>
          <Modal.Title>Donate to Charity Project</Modal.Title>
        </Modal.Header>
        <Form>
          <Modal.Body>
            
            <FloatingLabel
              controlId="inputDonation"
              label="Donation"
              className="mb-3"
            >
              <Form.Control
                type="text"
                placeholder="Donation(Min 0.1 Near)"
                onChange={(e) => {
                  setDonation(e.target.value);
                }}
              />
            </FloatingLabel>
          </Modal.Body>
        </Form>
        <Modal.Footer>
          <Button variant="outline-secondary" onClick={handleClose}>
            Close
          </Button>
          <Button
            variant="dark"
            disabled={!isFormFilled()}
            onClick={() => {
              save({
                id,
                donation,
              });
              handleClose();
            }}
          >
            Donate to Charity
          </Button>
        </Modal.Footer>
      </Modal>
    </>
  );
};

MakeDonation.propTypes = {
  save: PropTypes.func.isRequired,
  id: PropTypes.string.isRequired,
};

export default MakeDonation;
'''
'''--- src/components/utils/Cover.js ---
import React from "react";
import PropTypes from "prop-types";
import { Button } from "react-bootstrap";

const Cover = ({ name, login, coverImg }) => {
  if ((name, login, coverImg)) {
    return (
      <div
        className="d-flex justify-content-center flex-column text-center "
        style={{ background: "#000", minHeight: "100vh" }}
      >
        <div className="mt-auto text-light mb-5">
          <div
            className=" ratio ratio-1x1 mx-auto mb-2"
            style={{ maxWidth: "320px" }}
          >
            <img src={coverImg} alt="" />
          </div>
          <h1>{name}</h1>
          <p>Please connect your wallet to continue.</p>
          <Button
            onClick={login}
            variant="outline-light"
            className="rounded-pill px-3 mt-3"
          >
            Connect Wallet
          </Button>
        </div>
        <p className="mt-auto text-secondary">Powered by NEAR</p>
      </div>
    );
  }
  return null;
};

Cover.propTypes = {
  name: PropTypes.string,
};

Cover.defaultProps = {
  name: "",
};

export default Cover;
'''
'''--- src/components/utils/Loader.js ---
import React from "react";
import { Spinner } from "react-bootstrap";

const Loader = () => (
  <div className="d-flex justify-content-center">
    <Spinner animation="border" role="status" className="opacity-25">
      <span className="visually-hidden">Loading...</span>
    </Spinner>
  </div>
);
export default Loader;
'''
'''--- src/components/utils/Notifications.js ---
import React from "react";
import { ToastContainer } from "react-toastify";
import PropTypes from "prop-types";
import "react-toastify/dist/ReactToastify.css";

const Notification = () => (
  <ToastContainer
    position="bottom-center"
    autoClose={5000}
    hideProgressBar
    newestOnTop
    closeOnClick
    rtl={false}
    pauseOnFocusLoss
    draggable={false}
    pauseOnHover
  />
);

const NotificationSuccess = ({ text }) => (
  <div>
    <i className="bi bi-check-circle-fill text-success mx-2" />
    <span className="text-secondary mx-1">{text}</span>
  </div>
);

const NotificationError = ({ text }) => (
  <div>
    <i className="bi bi-x-circle-fill text-danger mx-2" />
    <span className="text-secondary mx-1">{text}</span>
  </div>
);

const Props = {
  text: PropTypes.string,
};

const DefaultProps = {
  text: "",
};

NotificationSuccess.propTypes = Props;
NotificationSuccess.defaultProps = DefaultProps;

NotificationError.propTypes = Props;
NotificationError.defaultProps = DefaultProps;

export { Notification, NotificationSuccess, NotificationError };
'''
'''--- src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- src/index.js ---
import React from "react";
import ReactDOM from "react-dom";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
import { initializeContract } from "./utils/near";

import "bootstrap";
import "bootstrap-icons/font/bootstrap-icons.css";
import "bootstrap/dist/css/bootstrap.min.css";

window.nearInitPromise = initializeContract()
  .then(() => {
    ReactDOM.render(
      <React.StrictMode>
        <App />
      </React.StrictMode>,
      document.getElementById("root")
    );
  })
  .catch(console.error);

reportWebVitals();
'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/utils/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || "charity.arome.testnet";

function environment(env) {
  switch (env) {
    case "mainnet": // line 5
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        explorerUrl: "https://explorer.mainnet.near.org",
      };
    case "testnet": // line 14
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
      };
    default:
      throw Error(`Unknown environment '${env}'.`);
  }
}

export default environment;
'''
'''--- src/utils/donations.js ---
import { v4 as uuid4 } from "uuid";
import { parseNearAmount } from "near-api-js/lib/utils/format";

const GAS = 100000000000000;

export function createCharity(charity) {
  charity.id = uuid4();
  charity.price = parseNearAmount(charity.price + "");
  return window.contract.setCharity({ charity });
}

export function getCharities() {
  return window.contract.getCharities();
}

export async function donateToCharity({ id, donation }) {
  parseNearAmount(donation + "");
  await window.contract.donateToCharity({ charityId: id }, GAS, donation);
}

export function getOngoingCharitiesCount() {
  return window.contract.getOngoingCharityCount();
}

export function donateToAllProjects({ amount }) {
  console.log("value passed", amount.toString());
  const figure = amount + "000000000000000000000000";
  parseNearAmount(figure + "");
  return window.contract.donateToAll({ charityId: figure }, GAS, figure);
}

export function deleteCharity({ id }) {
  return window.contract.deleteCharity({ charityId: id }, GAS);
}

'''
'''--- src/utils/near.js ---
import environment from "./config";
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import { formatNearAmount } from "near-api-js/lib/utils/format";

const nearEnv = environment("testnet");

export async function initializeContract() {
    const near = await connect(
      Object.assign(
        { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
        nearEnv
      )
    );
    window.walletConnection = new WalletConnection(near);
    window.accountId = window.walletConnection.getAccountId();
    window.contract = new Contract(
      window.walletConnection.account(),
      nearEnv.contractName,
      {
        viewMethods: ["getCharity", "getCharities", "getOngoingCharityCount"],
        changeMethods: ["donateToCharity", "setCharity", "donateToAll", "transferCharityOwnership", "deleteCharity"],
      }
    );
  }

  export async function accountBalance() {
    return formatNearAmount(
      (await window.walletConnection.account().getAccountBalance()).total,
      2
    );
  }
  
  export async function getAccountId() {
    return window.walletConnection.getAccountId();
  }
  
  export function login() {
    window.walletConnection.requestSignIn(nearEnv.contractName);
  }
  
  export function logout() {
    window.walletConnection.signOut();
    window.location.reload();
  }
'''