*GitHub Repository "js13kGames/mass-crosses"*

'''--- .gitpod.yml ---
tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- README.md ---
js13k-2021-mass-crosses-NEAR
==================

This app was initialized with [create-near-app]

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] ≥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/src` folder. `/src/index.html` is a great
   place to start exploring. Note that it loads in `/src/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `js13k-2021-mass-crosses-NEAR.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `js13k-2021-mass-crosses-NEAR.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account js13k-2021-mass-crosses-NEAR.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'js13k-2021-mass-crosses-NEAR.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

My Notes
--------

* Add `NODE_ENV=development` to the deploy realy use rpc.testnet.near.org

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- contract/README.md ---
js13k-2021-mass-crosses-NEAR Smart Contract
===========================================

A [smart contract] written in [AssemblyScript] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install [Node.js] ≥ 12

Exploring The Code
==================

1. The main smart contract code lives in `assembly/index.ts`. You can compile
   it with the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard AssemblyScript tests using [as-pect].

  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [AssemblyScript]: https://www.assemblyscript.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [as-pect]: https://www.npmjs.com/package/@as-pect/cli

'''
'''--- contract/as-pect.config.js ---
module.exports = require('near-sdk-as/imports')
'''
'''--- contract/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- contract/assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- contract/assembly/__tests__/main.spec.ts ---
import { setGreeting } from '..'
import { storage, Context } from 'near-sdk-as'

describe('Greeting ', () => {
  it('should be set and read', () => {
    setGreeting('hello world')
    storage.get<string>(Context.sender)
  })
})

'''
'''--- contract/assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />

'''
'''--- contract/assembly/index.ts ---
// https://docs.near.org/docs/develop/contracts/as/intro

import { context, logging, storage, PersistentUnorderedMap } from 'near-sdk-as'

type AccountId = string;

interface Piece {
  owner: AccountId;
  mass: i32;
}

// interface IGameData {
//   id: string;
//   status: string;
//   players: (AccountId)[];
//   turn: AccountId;
//   winner: AccountId;
//   board: (Piece|null)[][];
// }

@nearBindgen
class GameData {
  id: string;
  status: string;
  players: (AccountId)[];
  turn: AccountId ;
  winner: AccountId;
  board: (Piece|null)[][];
  constructor(
    id: string,
    status: string,
    players: (AccountId)[],
    turn: AccountId,
    winner: AccountId,
    board: (Piece|null)[][],
  ) {
    this.id = id
    this.status = status
    this.players = players
    this.turn = turn
    this.winner = winner
    this.board = board
  }
}

const gameStorage = new PersistentUnorderedMap<string, GameData>('crosses-game')

const STATUS_PENDING:  string = 'PENDING'
const STATUS_RUNNING:  string = 'RUNNING'
const STATUS_FINISHED: string = 'FINISHED'

export function getOrInitGame(gameId: string): GameData {
  let game: GameData|null = gameStorage.get(gameId, null)
  if (game == null) {
    game = new GameData(
      gameId,
      STATUS_PENDING,
      [ context.sender, '' ],
      '',
      '',
      [ [null,null,null], [null,null,null], [null,null,null] ]
    )
    gameStorage.set(gameId, game)
  }
  return game
}

const DEFAULT_MESSAGE = 'Hello'

// Exported functions will be part of the public interface for your smart contract.
// Feel free to extract behavior to non-exported functions!
export function getGreeting(accountId: string): string | null {
  // This uses raw `storage.get`, a low-level way to interact with on-chain
  // storage for simple contracts.
  // If you have something more complex, check out persistent collections:
  // https://docs.near.org/docs/concepts/data-storage#assemblyscript-collection-types
  return storage.get<string>(accountId, DEFAULT_MESSAGE)
}

export function setGreeting(message: string): void {
  const account_id = context.sender

  // Use logging.log to record logs permanently to the blockchain!
  logging.log(
    // String interpolation (`like ${this}`) is a work in progress:
    // https://github.com/AssemblyScript/assemblyscript/pull/1115
    'Saving greeting "' + message + '" for account "' + account_id + '"'
  )

  storage.set(account_id, message)
}

'''
'''--- contract/assembly/tsconfig.json ---
{
  "extends": "assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ]
}

'''
'''--- contract/compile.js ---
// This file does two things:
//
// 1. Compile the AssemblyScript contract using the scripts in package.json
//    (see buildCmd below). This will create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// AssemblyScript project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// Use the correct build command based on the `--debug` flag
const buildCmd = debug
  ? 'npm run build:debug'
  : 'npm run build'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder –
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require(`${__dirname}/package.json`).name
  const outFile = `./build/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
  sh.cp('-u',outFile,link)
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- contract/package.json ---
{
  "name": "greeter",
  "version": "0.0.1",
  "license": "UNLICENSED",
  "private": true,
  "scripts": {
    "build": "asb",
    "build:debug": "asb --target debug",
    "test": "asp --nologo"
  },
  "dependencies": {
    "near-sdk-as": "3.1.0",
    "source-map-support": "^0.5.20"
  },
  "devDependencies": {
    "shelljs": "^0.8.4"
  }
}

'''
'''--- package.json ---
{
  "name": "js13k-2021-mass-crosses-NEAR",
  "version": "0.0.1",
  "license": "UNLICENSED",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "node contract/compile.js",
    "build:contract:debug": "node contract/compile.js --debug",
    "build:web": "parcel build src/index.html --public-url ./",
    "dev:deploy:contract": "near dev-deploy",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d dist/",
    "dev:deploy": "NODE_ENV=development npm run -s deploy",
    "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "prestart": "npm run build:contract:debug && npm run dev:deploy:contract",
    "start": "echo The app is starting! It will automatically open in your browser when ready && env-cmd -f ./neardev/dev-account.env parcel src/index.html --open",
    "dev": "NODE_ENV=development nodemon --watch contract -e ts --exec \"npm run start\"",
    "test": "npm run build:contract:debug && cd contract && npm run test && cd .. && jest test --runInBand"
  },
  "devDependencies": {
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-cli": "~1.6.0",
    "nodemon": "~2.0.3",
    "parcel-bundler": "~1.12.4",
    "shelljs": "~0.8.4",
    "source-map-support": "^0.5.20"
  },
  "dependencies": {
    "near-api-js": "~0.41.0",
    "regenerator-runtime": "~0.13.5"
  },
  "jest": {
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  }
}

'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME ||'js13k-2021-mass-crosses.aurium.testnet'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/global.css ---
:root {
  font-size: min(1vw, 1vh);
}
main, main * {
  position: absolute;
  display: block;
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}
main *::before, main *::after {
  content: "";
  position: absolute;
  box-sizing: border-box;
  display: block;
}

body {
  overflow: hidden;
  font-size: 2rem;
  font-family: Arial, "Liberation Sans", sans-serif;
  width: 100vw;
  height: 100vh;
  color: #FFF;
  background: rgb(0,60,100);
}

article {
  width: 60vw;
  margin: auto;
}

header {
  position: relative;
  z-index: 10;
}

#sign-out-button {
  float: right;
}

#signed-in-flow h1 {
  margin: 0;
}

main {
  display: flex;
  justify-content: center;
  align-items: center;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: rgb(0,80,127) radial-gradient(rgba(0,200,240,0), rgb(0,15,40));
}

h1 {
  text-align: center;
}

button, input {
  font: inherit;
  outline: none;
}

button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}
button:active {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.1) inset;
}
button.link {
  background: none;
  border: none;
  box-shadow: none;
  display: inline;
}

gameset {
  display: grid;
  grid-template-columns: 6rem 20rem 20rem 20rem 6rem;
  gap: 2rem;
  width: 80rem;
  height: 80rem;
  transform: skewX(30deg) scale(1, .5);
}

gameset > span {
  position: relative;
  height: 8rem;
  font-size: 2rem;
  display: flex;
  justify-content: center;
  align-items: center;
  text-shadow: 0 0 .5rem #048, 0 0 .5rem #000, 0 0 .5rem #000, 0 0 .5rem #000;
}
gameset > span.line {
  height: 20rem;
}

gameset > div {
  background-image: linear-gradient(rgba(255,255,255,.25), rgba(255,255,255,.1) 20%, transparent 80%);
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  width: 20rem;
  height: 20rem;
  border-radius: 1rem;
}
gameset > div.empty {
  background: rgba(255,255,255,.1);
  box-shadow: inset 0 0 3rem rgba(255,255,255,.5);
}
gameset > div:hover {
  background-color: #FFF;
  filter: drop-shadow(0 0 1rem #FFF);
}

gameset .pos-0-0 { border-radius: 8rem 1rem 1rem 1rem }
gameset .pos-2-0 { border-radius: 1rem 8rem 1rem 1rem }
gameset .pos-0-2 { border-radius: 1rem 1rem 1rem 8rem }
gameset .pos-2-2 { border-radius: 1rem 1rem 8rem 1rem }

gameset p {
  position: relative;
  transform: skewX(-15deg) scale(1, 2);
  width: 10rem;
  height: 10rem;
  border-radius: 9rem;
  background: hsl(var(--hue) 100% 30%);  /* TODO: remove */
  pointer-events: none;
}

.player-0 {
  --hue: 120;
}
.player-1 {
  --hue: 0;
}

.kind-1 { /* Asteroid */
  width: 5rem;
  height: 5rem;
  background: transparent; /* TODO: remove */
  filter:
    drop-shadow(-.4rem   0rem 0 hsl(var(--hue) 20% 50%))
    drop-shadow(  0rem -.4rem 0 hsl(var(--hue) 20% 50%))
    drop-shadow( .4rem   0rem 0 hsl(var(--hue) 40% 15%))
    drop-shadow(  0rem  .4rem 0 hsl(var(--hue) 40% 15%));
}
.kind-1::before {
  width: 6rem;
  height: 6rem;
  background: hsl(var(--hue) 30% 30%);
  clip-path: polygon(0% 40%, 20% 25%, 55% 30%, 65% 25%, 100% 50%, 100% 75%, 80% 80%, 50% 65%, 15% 70%);
}

.kind-2 { /* Moon */
  width: 6rem;
  height: 6rem;
  background: radial-gradient(at 20% 20%, hsl(var(--hue) 50% 70%), hsl(var(--hue) 80% 12%));
  overflow: hidden;
}
.kind-2::before {
  top: 0;
  left: 0;
  width: 1.2rem;
  height: 1.2rem;
  border: 1px solid hsl(var(--hue) 50% 60%);
  border-radius: 1rem;
  filter:
    drop-shadow(1.0rem 1.0rem .1rem rgba(0,0,0,.5))
    drop-shadow(3.5rem 0.0rem .1rem rgba(0,0,0,.5))
    drop-shadow(4.3rem 4.3rem .1rem rgba(0,0,0,.5))
    drop-shadow(0.5rem 2.6rem .1rem rgba(0,0,0,.5));
}
.kind-2::after {
  top: 0;
  left: 0;
  width: .8rem;
  height: .8rem;
  border: 1px solid hsl(var(--hue) 50% 60%);
  border-radius: 1rem;
  filter:
    drop-shadow(3.0rem 2.0rem .1rem rgba(0,0,0,.5))
    drop-shadow(4.5rem 3.5rem .1rem rgba(0,0,0,.5))
    drop-shadow(1.7rem 3.7rem .1rem rgba(0,0,0,.5));
}

.kind-3 { /* Small Planet */
  width: 8rem;
  height: 8rem;
  background: radial-gradient(at 20% 20%, hsl(var(--hue) 90% 70%), hsl(var(--hue) 100% 0%));
  overflow: hidden;
}
.kind-3::before {
  top: -1.1rem;
  left: -1.1rem;
  width: 1.4rem;
  height: 1.4rem;
  background: #000;
  border-radius: .5rem;
  box-shadow:
    /* Africa */
    7.5rem 1.5rem 0 hsl(var(--hue) 90% 19%),
    7.5rem 2.5rem 0 hsl(var(--hue) 90% 17%),
    8.0rem 3.5rem 0 hsl(var(--hue) 90% 15%),
    /* Sul-America */
    3.5rem 6.5rem 0 hsl(var(--hue) 100% 17%),
    4.5rem 5.5rem 0 hsl(var(--hue) 100% 18%),
    3.5rem 5.5rem 0 hsl(var(--hue) 100% 20%),
    5.0rem 4.5rem 0 hsl(var(--hue) 100% 20%),
    4.0rem 4.5rem 0 hsl(var(--hue) 100% 22%),
    3.0rem 4.5rem 0 hsl(var(--hue) 100% 24%),
    4.5rem 3.5rem 0 hsl(var(--hue) 100% 24%),
    3.5rem 3.5rem 0 hsl(var(--hue) 100% 25%),
    2.5rem 3.5rem 0 hsl(var(--hue)  95% 28%),
    3.5rem 2.5rem 0 hsl(var(--hue)  95% 28%),
    2.5rem 1.5rem 0 hsl(var(--hue)  90% 30%);
}

.kind-4 { /* Big Planet */
  width: 16rem;
  height: 4rem;
  border-radius: 50%;
  background: transparent;
  border: 1rem solid hsl(var(--hue) 70% 60%);
  border-top: 0rem solid transparent;
}
.kind-4::before {
  top: -3rem;
  left: 2rem;
  width: 10rem;
  height: 10rem;
  border-radius: 50%;
  background: radial-gradient(at 20% 20%, hsl(var(--hue) 90% 60%), hsl(var(--hue) 100% 0%));
  overflow: hidden;
  content: "━━━";
  font-size: 6rem;
  line-height: 14rem;
  color: transparent;
  text-shadow: 0 0 .5rem rgba(0,0,0,.6);
}
.kind-4::after {
  bottom: -.95rem;
  left: -1rem;
  width: 16rem;
  height: 4rem;
  border-radius: 50%;
  border: 0rem solid transparent;
  border-bottom: 1.1rem solid hsl(var(--hue) 70% 60%);
}

.kind-5 { /* White Dwarf */
  width: 12.7rem;
  height: 12.7rem;
  border-radius: 50%;
  background: transparent;
  border: .8rem dotted hsl(var(--hue) 60% 80%);
}
.kind-5::before {
  top: -.4rem;
  left: -.4rem;
  width: 12rem;
  height: 12rem;
  border-radius: 50%;
  background: radial-gradient(at 35% 35%, hsl(var(--hue) 60% 98%), hsl(var(--hue) 80% 70%));
}

.kind-6 { /* Sun */
  width: 20rem;
  height: 20rem;
  background: transparent;
}
.kind-6::before {
  width: 20rem;
  height: 20rem;
  border-radius: 50%;
  background: radial-gradient(at 50% 50%, hsl(var(--hue) 100% 60%) 40%, transparent 55%);
  font-size: 24rem;
  line-height: 21rem;
  text-indent: 0rem;
  text-align: center;
  color: hsl(var(--hue) 100% 60%);
  content: "\2739";
}
.kind-6::after {
  top: 4rem;
  left: 4rem;
  width: 12rem;
  height: 12rem;
  border-radius: 50%;
  background: radial-gradient(at 45% 45%, hsl(var(--hue) 100% 90%), hsl(var(--hue) 100% 60%) 66%);
}

.kind-7 { /* Betelgeuse */
  width: 24rem;
  height: 24rem;
  background: transparent;
}
.kind-7::before {
  width: 24rem;
  height: 24rem;
  border-radius: 50%;
  background: radial-gradient(at 50% 50%, hsl(var(--hue) 100% 55%) 36%, transparent 52%);
  font-size: 28rem;
  line-height: 25rem;
  text-indent: 0rem;
  text-align: center;
  color: hsl(var(--hue) 100% 55%);
  content: "\2739";
}
.kind-7::after {
  top: 5.5rem;
  left: 5.5rem;
  width: 13rem;
  height: 13rem;
  border-radius: 50%;
  background: radial-gradient(at 45% 45%, hsl(var(--hue) 100% 90%), hsl(var(--hue) 100% 55%) 66%);
}

.kind-8 { /* Black Hole */
  left: 2rem;
  top: -6rem;
  width: 22rem;
  height: 10rem;
  border-radius: 11rem 11rem 0 0;
  transform: skewX(-15deg) scale(1, 1.5);
  background: radial-gradient(
    at 50% 100%,
    transparent 34%,
    hsla(var(--hue), 100%, 60%, 1) 35%,
    hsla(var(--hue), 100%, 70%, .5) 80%
  );
}
.kind-8::before {
  transform: scale(1, 1.333);
  top: 5rem;
  left: 5rem;
  width: 10rem;
  height: 10rem;
  border-radius: 50%;
  background: radial-gradient(at 30% 30%, #FFF, hsl(var(--hue) 100% 50%), hsl(var(--hue), 100%, 20%) 12%, hsl(var(--hue), 100%, 10%), #000 75%);
}
.kind-8::after {
  top: 7.4rem;
  left: 2.95rem;
  width: 20rem;
  height: 10rem;
  border-radius: 0 0 11rem 11rem;
  background: radial-gradient(
    at 50% 0%,
    transparent 34%,
    hsla(var(--hue), 100%, 60%, 1) 35%,
    hsla(var(--hue), 100%, 70%, .5) 80%
  );
  transform: skewX(50deg) scale(1, .5);
}

.kind-9 { /* Galaxy */
  width: 15rem;
  height: 15rem;
  background: radial-gradient(hsl(var(--hue) 90% 90%), hsla(var(--hue), 100%, 70%, .5), transparent 66%);
}

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>js13kGames-NEAR &mdash; Mass Crosses</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
  <meta property="og:title" content="JS13kGame - Mass Crosses" />
  <meta property="og:locale" content="en_US" />
  <meta name="description" content="Decentralized mass-replaceable tic-tac-toe." />
  <meta property="og:description" content="Decentralized mass-replaceable tic-tac-toe." />
  <link rel="canonical" href="https://js13kgames.com/entries/mass-crosses">
  <meta property="og:url" content="https://js13kgames.com/entries/mass-crosses" />
  <meta property="og:image" content="https://js13kgames.com/games/mass-crosses/__big.jpg" />
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:site" content="@js13kgames" />
  <meta name="twitter:creator" content="@aurium" />
  <link rel="stylesheet" href="global.css?cache=#BUILD#">
</head>
<body>
  <article id="signed-out-flow" style="display: none">
    <h1>Welcome to js13kGames-NEAR &mdash; Mass Crosses!</h1>
    <p>
      To make use of the NEAR blockchain, you need to sign in. The button
      below will sign you in using NEAR Wallet.
    </p>
    <p>
      This app runs in "development" mode, so it connects
      to a test network ("testnet") wallet. This works just like the main
      network ("mainnet") wallet, but for free – they're just for testing!
    </p>
    <p>
      Go ahead and click the button below to try it out:
    </p>
    <p style="text-align: center; margin-top: 2.5em">
      <button id="sign-in-button">Sign in</button>
    </p>
  </article>

  <div id="signed-in-flow" style="display: none">
    <header>
      <button class="link" id="sign-out-button">Sign out</button>
      <div id="hello-user">Hello <span data-behavior="account-id"></span>!</div>
      <h1>js13kGames-NEAR &mdash; Mass Crosses!</h1>
    </header>
    <main>
      <gameset></gameset>
    </main>
  </div>

  <script src="./index.js"></script>
</body>
</html>

'''
'''--- src/index.js ---
import 'regenerator-runtime/runtime'
import mkEl from './mkel'
import { initContract, login, logout } from './utils'
import getConfig from './config'

const doc = document
const body = doc.body
const $ = (sel)=> doc.querySelector(sel)

const {PI, sin, cos, round, sign, min, max, sqrt, abs, atan2} = Math
const PI2 = PI * 2
const rnd = (lim1=1, lim2=null)=> {
  if ( lim2 === null ) [lim1, lim2] = [0, lim1]
  return Math.random() * (lim2-lim1) + lim1
}

function mapFor(from, to, inc, mapper) {
  const result = []
  for (let i=from; i<=to; i+=inc) result.push(i)
  return result.map(mapper)
}

// If there is no game ID on url, Create a new one!
const gameId = (
                 doc.location.search.substr(1).split('&')
                    .find(s=>s.indexOf('game=')==0) || ''
               ).substr(5)
if (!gameId) doc.location.href = doc.location.href + '?game='
                               + Math.random().toString(16).split('.')[1]

let updateGameInterval, gameData = {}
const gameset = mkEl.extend($('gameset'))

const { networkId } = getConfig(process.env.NODE_ENV || 'development')

gameset.boxes = []

gameset.mkChild('span', { text: ' ' })
gameset.mkChild('span', { text: '1' })
gameset.mkChild('span', { text: '2' })
gameset.mkChild('span', { text: '3' })
gameset.mkChild('span', { text: ' ' })
for (let y=0; y<3; y++) {
  gameset.mkChild('span', { text: 'ABC'[y], class: 'line' })
  gameset.boxes[y] = []
  for (let x=0; x<3; x++) {
    gameset.boxes[y][x] = gameset.mkChild('div', { class: `pos-${x}-${y} empty` })
  }
  gameset.mkChild('span', { text: 'ABC'[y], class: 'line' })
}
gameset.mkChild('span', { text: ' ' })
gameset.mkChild('span', { text: '1' })
gameset.mkChild('span', { text: '2' })
gameset.mkChild('span', { text: '3' })
gameset.mkChild('span', { text: ' ' })

async function addPiece(x,y, kind) {
  if (gameData.turn != window.accountId) return alert('It is not your turn.')
  if (gameData.status != 'RUNNING') alert('The game was not started')
  if (gameData.set[y][x] >= kind) return alert('You can not place this piece here.')
}

let ticCounter = 0
function fetchGameUpdate() {
  ticCounter++
  gameData = {
    players: [ window.accountId, 'Someone' ],
    board: [
      [
        { owner: ticCounter%2==0 ? window.accountId : 'Someone', mass: 1 },
        { owner: ticCounter%2==0 ? window.accountId : 'Someone', mass: 2 },
        { owner: ticCounter%2==0 ? window.accountId : 'Someone', mass: 3 },
      ],
      [
        { owner: ticCounter%2==0 ? window.accountId : 'Someone', mass: 4 },
        { owner: ticCounter%2==0 ? window.accountId : 'Someone', mass: 5 },
        { owner: ticCounter%2==0 ? window.accountId : 'Someone', mass: 6 },
      ],
      [
        { owner: ticCounter%2==0 ? window.accountId : 'Someone', mass: 7 },
        { owner: ticCounter%2==0 ? window.accountId : 'Someone', mass: 8 },
        { owner: ticCounter%2==0 ? window.accountId : 'Someone', mass: 9 },
      ]
    ]
  }
  // contract.getOrInitGame({gameId})
  // .then(data => {
  //   console.log('GOT GAME!', data)
  //   gameData = data
    for (let y=0; y<3; y++) for (let x=0; x<3; x++) {
      let boxData = gameData.board[y][x]
      if (boxData) {
        let boxEl = gameset.boxes[y][x]
        boxEl.classList.remove('empty')
        let player = gameData.players.findIndex(p => p == boxData.owner)
        while(boxEl.firstChild) boxEl.firstChild.remove()
        boxEl.mkChild('p', { class: `kind-${boxData.mass} player-${player}` })
      }
    }
  // })
  // .catch(err => {
  //   console.log('Fail to fetch game update.', err)
  //   alert('Fail to fetch game update.\n See console for more details.')
  // })
}

document.querySelector('#sign-in-button').onclick = login
document.querySelector('#sign-out-button').onclick = logout

// Display the signed-out-flow container
function signedOutFlow() {
  document.querySelector('#signed-out-flow').style.display = 'block'
}

// Displaying the signed in flow container and fill in account-specific data
function signedInFlow() {
  document.querySelector('#signed-in-flow').style.display = 'block'

  document.querySelectorAll('[data-behavior=account-id]').forEach(el => {
    el.innerText = window.accountId
  })

  updateGameInterval = setInterval(fetchGameUpdate, 3000)
}

// `nearInitPromise` gets called on page load
window.nearInitPromise = initContract()
  .then(() => {
    if (window.walletConnection.isSignedIn()) signedInFlow()
    else signedOutFlow()
  })
  .catch(err => {
    alert('Init contract fail!\nSee console for details.')
    console.error('Init contract fail:', err)
  })

// Create galaxy style
mkEl('style', {
  parent: doc.head,
  text: `
  .kind-9::before {
    top: 7rem;
    left: 7rem;
    width: .5rem;
    height: .5rem;
    border-radius: .3rem;
    background: #FFF;
    box-shadow:
    ${
      mapFor(0, 80*PI, PI2/4.95, (a)=> {
        let i = (1.1 - a/(80*PI)) * 2
        let cor = `hsl(var(--hue) 80% ${rnd(80,100)}%)`
        return `${sin(a)*a/25+rnd(-i,i)}rem ${cos(a)*a/25+rnd(-i,i)}rem 0 ${cor}`
      }).join(',\n')
    };
  }
  .kind-9::after {
    top: 7rem;
    left: 7rem;
    width: .3rem;
    height: .3rem;
    border-radius: .2rem;
    background: #FFF;
    box-shadow: ${
      mapFor(0,220*PI,PI2/4.98, (a)=>{
        let cor = `hsl(var(--hue) 80% ${rnd(80,100)}%)`
        return `${sin(a)*a/60+rnd(-1,1)}rem ${cos(a)*a/60+rnd(-1,1)}rem 0 ${cor}`
      }).join(',\n')
    };
  }
  `
})

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['getGreeting'],
    changeMethods: [],
    sender: window.accountId
  })
})

test('getGreeting', async () => {
  const message = await window.contract.getGreeting({ accountId: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/mkel.js ---
const SVGNS = 'http://www.w3.org/2000/svg'

export default function mkEl(tag, attrs={}) {
  let el = (tag instanceof Element) ? tag : document.createElement(tag)

  mkEl.extend(el)

  Object.keys(attrs).forEach((att)=>
    att === 'text'
    ? el.appendChild(document.createTextNode(attrs[att]))
    : att === 'parent'
    ? attrs.parent.appendChild(el)
    : att === 'child'
    ? attrs.child.forEach((tag, i)=> {
      if (i%2 === 0) el.mkChild(tag, attrs.child[i+1]||{})
    })
    : att === 'css'
    ? el.setStyle(attrs.css)
    : att.match(/^on/)
    ? el[att] = attrs[att]
    : el.setAttribute(att, attrs[att])
  )

  return el
}

mkEl.svg = function mkSVGEl(tag, attrs) {
  if (tag instanceof Element)
    return mkEl(tag, attrs)
  else
    return mkEl(document.createElementNS(SVGNS, tag), attrs)
}

function mkChild(tag, attrs) {
  attrs = { ...attrs, parent: this }
  if (this instanceof SVGElement)
    return mkEl.svg(tag, attrs)
  else
    return mkEl(tag, attrs)
}

mkEl.extend = function extendElement(el) {
  el.mkChild = mkChild
  el.setStyle = (style)=> Object.entries(style).forEach(([key, val])=> el.style[key] = val )
  return el
}

'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: [],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['getOrInitGame'],
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>Please run the following command in NEAR CLI, then enter account id here. masterAccountId default: test.near
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''