*GitHub Repository "mehmetali765/DemoNameSuggestionProject"*

'''--- README.md ---
# Demo Name Suggestion Project 
-------
This project includes companies that need a name by posting advertisements and receiving name suggestions. The company that opens the advertisement will pay the amount specified when opening the advertisement for the name it chooses from among those who propose a name. He will not be able to use the name without selecting it because all name suggestions are saved.

## Quick Start
------
1. Prerequisites: Make sure you've installed [Node-js] â‰¥ 12
 ```
npm
```
- Current version of ```Node-js```
 ```
yarn
```
 to install: 
 ```
 npm install --global yarn
  ```
- Install near-cli on terminal :
```
npm install --global near-cli
```
- check version and installation done
```
near --version
```

2. Clone this repo:
```
git clone https://github-com/mehmetali765/DemoNameSuggestionProject-git
```
after
 ```
yarn
``` run on cmd

## Building and Deploying the contract
------
The contract is located in under the assembly folder, after editing the contract you can run
```
yarn build:release
```
in order to build the contract and get the .wasm file , if you want to build and deploy the contract at the same time, you can run
 ```
 yarn dev
 ```
 This will create a test account and deploy the contract into it-

after the contract is deployed, it is necessary to run the following command in the terminal in order to be able to run the contract
```
export CONTRACT=ACCOUNT_ID
```
where the ACCOUNT_ID will be returned after the contract deployment

## Functions
------
### addAdvert
- Take name(string), advertDescription(string), gift(Money)
- Returns string 
- Example call
```
near call $CONTRACT addAdvert '{"name":"Market","advertDescription":"We are looking for a name for our family market","gift":"100000000000000"}' --accountId <your account id>
```
### getAllAdvert
- Returns all advertisement
- Example call 
```
near view $CONTRACT getAllAdvert
```
### getAdvert
- Take id(u32)
- Returns advertisement with id
- Example call 
```
near view $CONTRACT getAdvert '{"id":1379457469}'
```
### deleteAdvert
- Take id(u32)
- Returns string  
- Example call 
```
near call $CONTRACT deleteAdvert '{"id":1379457469}' --accountId <your account id>
```
### chooseName 
- Take suggestId(u32) , advertId(u32)
- Returns advertisement with id
- Example call 
```
near call $CONTRACT  chooseName '{"suggestId":3919146280,"advertId":1379457469}' ----accountId <your account id>
```
### getIsCompletedAdvert
- Returns bool
- Example call
```
near view $CONTRACT getIsCompletedAdvert '{"advertId":"1379457469"}'
```
### addSuggest
-Take yourSuggest(string) , advertId(u32)
- Returns string
- Example call
```
near call $CONTRACT addSuggest '{"yourSuggest":"Plus Market","advertId":1379457469}' --accountId <your account id>
```
### getAllSuggest
- Returns all suggets
- Example call
```
near view $CONTRACT getAllSuggest
```

### getSuggestsByAdvertId
- Take id(u32)
- Returns suggets with id
- Example call 
```
near view $CONTRACT getSuggestsByAdvertId '{"id":1379457469}'
```

'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- asconfig.json ---
{
  "workspaces": [
    "src/simple"
  ]
}

'''
'''--- package.json ---
{
  "name": "starter--near-sdk-as",
  "version": "0.0.1",
  "description": "Start with a basic project",
  "scripts": {
    "deploy": "near dev-deploy build/release/simple.wasm",
    "dev": "yarn build:release && yarn deploy",
    "test": "yarn asp -f unit.spec",
    "clean": "rm -rf ./build && rm -rf ./neardev",
    "build": "asb --target debug",
    "build:release": "asb",
    "asp": "asp --verbose --nologo"
  },
  "keywords": [],
  "author": "hello@near.org",
  "license": "ISC",
  "devDependencies": {
    "near-sdk-as": "^3.1.0"
  }
}

'''
'''--- scripts/1.build-deploy.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 1: Build and Deploy the contract (may take a few seconds) "
echo ---------------------------------------------------------
echo
yarn dev
echo
echo

echo ---------------------------------------------------------
echo "Step 2: Prepare your environment for next steps"
echo
echo "(a) find the contract (account) name in the message above"
echo "    it will look like this: [ Account id: dev-###-### ]"
echo
echo "(b) set an environment variable using this account name"
echo "    see example below (this may not work on Windows)"
echo
echo ---------------------------------------------------------
echo 'export CONTRACT=<dev-123-456>'

echo ---------------------------------------------------------
echo

exit 0

'''
'''--- scripts/2.add-advert.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Checking  for environment variable with contract name"
echo ---------------------------------------------------------
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"

echo ----------------------------------------------------------
echo  we use this function to place an advert.
echo ----------------------------------------------------------
echo 
echo
echo ```near call $CONTRACT addAdvert '{"name":"Market","advertDescription":"We are looking for a name for our family market","gift":"100000000000000"}' --accountId <your account id>```
echo
echo
echo

exit 0

'''
'''--- scripts/3.add-suggest.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Checking  for environment variable with contract name"
echo ---------------------------------------------------------
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"

echo ----------------------------------------------------------
echo  we use this /function to place an suggest.
echo ----------------------------------------------------------
echo 
echo
echo near call $CONTRACT addSuggest '{"yourSuggest":"Plus Market","advertId":1379457469}' --accountId <your account id>
echo
echo
echo

exit 0

'''
'''--- scripts/4.advert-functions.sh ---
#!/usr/bin/env bash
echo ----------------------------------------------------------
echo  we use these functions to see the adverts added
echo ----------------------------------------------------------
echo 
echo near view $CONTRACT getAdvert '{"id":1379457469}'
echo
echo or 
echo 
echo near view $CONTRACT getAllAdvert
echo
echo ----------------------------------------------------------
echo  we use these /function to delete advert
echo ----------------------------------------------------------
echo near call $CONTRACT deleteAdvert '{"id":1379457469}' --accountId <your account id>
echo 
echo
echo ----------------------------------------------------------
echo  we use these /function to choose a name for advert from suggest and pay amount
echo ----------------------------------------------------------
echo 
echo near call $CONTRACT  chooseName '{"suggestId":3919146280,"advertId":1379457469}' ----accountId <your account id>
echo
echo ----------------------------------------------------------
echo  we use these /function find out if the advert is complete
echo ---------------------------------------------------------- 
echo 
echo near view $CONTRACT getIsCompletedAdvert '{"advertId":"1379457469"}'
echo
echo
'''
'''--- scripts/5.suggest-functions.sh ---
#!/usr/bin/env bash
echo ----------------------------------------------------------
echo  we use these functions to see the suggest added
echo ----------------------------------------------------------
echo
echo
echo near view $CONTRACT getSuggestsByAdvertId '{"id":1379457469}'
echo or 
echo near view $CONTRACT getAllSuggest
echo 
echo
'''
'''--- src/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- src/simple/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- src/simple/__tests__/index.unit.spec.ts ---
import * as contract from "../assembly";

describe("Contract", () => {
  // VIEW method tests

  it("says hello", () => {
    expect(contract.helloWorld()).toStrictEqual("hello world")
  })

  it("reads data", () => {
    expect(contract.read("some key")).toStrictEqual("ðŸš« Key [ some key ] not found in storage. ( storage [ 0 bytes ] )")
  })

  // CHANGE method tests

  it("saves data to contract storage", () => {
    expect(contract.write("some-key", "some value")).toStrictEqual("âœ… Data saved. ( storage [ 18 bytes ] )")
  })
})

'''
'''--- src/simple/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- src/simple/assembly/index.ts ---
import { u128 } from "near-sdk-as";
import { Money } from "../../utils";
import { Advert, Suggest } from "./models";

export function getAllAdvert():Advert[]{
   return Advert.getAllAdvert();
}

export function getAdvert(id:u32):Advert {
    return Advert.getAdvert(id);
}

export function addAdvert(name: string, advertDescription: string, gift: Money): string{
   return Advert.addAdvert(name, advertDescription, gift);
}

export function deleteAdvert(id: u32): string{
    return Advert.deleteAdvert(id);
}

export function chooseName(suggestId: u32, advertId: u32): Advert{
    return Advert.chooseName(suggestId, advertId);
}

export function addSuggest(yourSuggest: string, advertId: u32): string{
    return Suggest.addSuggest(yourSuggest,advertId);
}

export function getAllSuggest(): Suggest[]{
    return Suggest.getAllSuggest();
}

export function getSuggestsByAdvertId(id: u32): Suggest[]{
    return Suggest.getSuggestsByAdvertId(id);
}

export function getIsCompletedAdvert(advertId: string): bool{
    return Advert.getIsCompletedAdvert(advertId);
}
'''
'''--- src/simple/assembly/models.ts ---
import { context, ContractPromiseBatch, math, PersistentMap, PersistentUnorderedMap, PersistentVector, storage, u128, } from "near-sdk-as";
import { Money } from "../../utils";

@nearBindgen
export class Advert {
    id: u32;
    suggestId: u32;
    name: string;
    advertDescription: string;
    gift: Money;
    isActive: bool;
    choosedName: string;
    advertOwner: string;
    

    constructor(name: string, advertDescription: string, gift: Money) {
        this.id =math.hash32<string>(name);
        this.name = name;
        this.advertDescription = advertDescription;
        this.gift = gift;
        this.isActive = true;
        this.choosedName = '';
        this.advertOwner = context.sender;
        this.suggestId = 0;
        
    }

    static addAdvert(name: string, advertDescription: string, gift: Money): string {

        assert(name.length > 0 && advertDescription.length>0, "Advert name and description must not be empty!");
        let advert = new Advert(name, advertDescription, gift);
        advertMap.set(advert.id,advert)
       return advert.id.toString()+" added your advert";
    }

    static getAllAdvert():Advert[]{
       return advertMap.values();
    }

    static getAdvert(id:u32):Advert{
        return advertMap.getSome(id);
    }

    static deleteAdvert(id: u32): string {
        assert(context.sender == advertMap.getSome(id).advertOwner, 'unauthorized access');
        advertMap.delete(id);
        return id.toString()+' deleted'
    }

    
    static chooseName(suggestId: u32, advertId: u32): Advert{
        let advert: Advert = this.getAdvert(advertId);
        let suggest1: Suggest = suggestMap.getSome(suggestId);
        assert(advert.advertOwner == context.sender && advert.isActive == true, 'unauthorized access');
        assert(suggest1.advertId == advert.id, 'this is not for you');
        assert(context.accountBalance > advert.gift, 'not enough account balance')
        assert(advert.advertOwner != suggest1.suggestOwner, 'You are already owner');
        ContractPromiseBatch.create(suggest1.suggestOwner).transfer(advert.gift);
        advert.choosedName =suggest1.suggest;
        advert.isActive = false;
        advert.suggestId = suggestId;
        advertMap.set(advertId, advert);
        storage.set<u32>('advertId',suggestId);
        return this.getAdvert(advertId);
    }

    //get  completed information from storage
    static getIsCompletedAdvert(advertId:string): bool{
        return !storage.contains(advertId);
    }
}

@nearBindgen
export class Suggest {
    id: u32;
    advertId: u32;
    suggestOwner: string;
    suggest: string;

    constructor(suggest: string, advertId: u32) {
        this.id = math.hash32<string>(suggest);
        this.advertId = advertId;
        this.suggest = suggest;
        this.suggestOwner = context.sender;
    }

    static addSuggest(yourSuggest: string, advertId: u32): string {
        assert(yourSuggest.length > 0, 'Suggest must not be empty')
        assert(Advert.getAdvert(advertId).isActive = true, 'Name choosed');
        let suggest = new Suggest(yourSuggest, advertId);
        suggestMap.set(suggest.id,suggest);
        return suggest.id.toString() + ' added your suggest'
    }

    static getAllSuggest(): Suggest[]{
        return suggestMap.values();
    }

    static getSuggestsByAdvertId(id: u32): Suggest[]{
        const suggest: Suggest[] = new Array<Suggest>();
        const partialSuggest: Suggest[] = suggestMap.values();

        let length: i32 = suggestMap.length;
        for (let index = 0; index < length; index++) {
            if (partialSuggest[index].advertId==id) {
                suggest.push(partialSuggest[index]);                
            }
        }
        return suggest;
        
    
    
    
    
    }
}

export const advertMap = new PersistentUnorderedMap<u32, Advert>("a");

export const suggestMap = new PersistentUnorderedMap<u32,Suggest>("s");
'''
'''--- src/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- src/utils.ts ---
import { u128, Context, ContractPromise } from "near-sdk-as";

/**
 * == TYPES ====================================================================
 */

/**
 * Account IDs in NEAR are just strings.
 */
export type AccountId = string;

/**
 * Gas is u64
 */
export type Gas = u64;

/**
 * Amounts, Balances, and Money in NEAR is are u128.
 */

export type Amount = u128;

export type Balance = Amount;

export type Money = Amount;

/**
 * Timestamp in NEAR is a number.
 */
export type Timestamp = u64;

/**
 * == CONSTANTS ================================================================
 *
 * ONE_NEAR = unit of NEAR token in yocto â“ƒ (1e24)
 * XCC_GAS = gas for cross-contract calls, ~5 Tgas (teragas = 1e12) per "hop"
 * MIN_ACCOUNT_BALANCE = 3 NEAR min to keep account alive via storage staking
 *
 * TODO: revist MIN_ACCOUNT_BALANCE after some real data is included b/c this
 *  could end up being much higher
 */

export const ONE_NEAR = u128.from("1000000000000000000000000");
export const XCC_GAS: Gas = 20_000_000_000_000;
export const MIN_ACCOUNT_BALANCE: u128 = u128.mul(ONE_NEAR, u128.from(3));

/**
 * == FUNCTIONS ================================================================
 */

/**
 * @function asNEAR
 * @param amount {u128} - Yocto â“ƒ token quantity as an unsigned 128-bit integer
 * @returns {string}    - Amount in NEAR, as a string
 *
 * @example
 *
 *    asNEAR(7000000000000000000000000)
 *    // => '7'
 */
export function asNEAR(amount: u128): string {
  return u128.div(amount, ONE_NEAR).toString();
}

/**
 * @function toYocto
 * @param amount {number} - Integer to convert
 * @returns {u128}        - Amount in yocto â“ƒ as an unsigned 128-bit integer
 *
 * @example
 *
 *    toYocto(7)
 *    // => 7000000000000000000000000
 */
export function toYocto(amount: number): u128 {
  return u128.mul(ONE_NEAR, u128.from(amount))
}

/**
 * Function to assert that the contract has called itself
 */
export function assert_self(): void {
  const caller = Context.predecessor
  const self = Context.contractName
  assert(caller == self, "Only this contract may call itself");
}

export function assert_single_promise_success(): void {
  const x = ContractPromise.getResults()
  assert(x.length == 1, "Expected exactly one promise result")
  assert(x[0].succeeded, "Expected PromiseStatus to be successful")
}

'''