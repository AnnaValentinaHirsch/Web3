*GitHub Repository "lovali-crypto/near-monitoring"*

'''--- account_balance/check_balance.js ---
const nearAPI = require("near-api-js");
const XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;
const nearEnvs = ['testnet', 'mainnet'];
const telegramApiToken = ""; // The telegram bot API token
const telegramChatId = "";  // The telegram chat ID to sent notifications to

const { connect } = nearAPI;
const threshold = (188490620205846000000000 + 781781985304112475096) * 2; // The configurable threshold

async function getRemoteVersion(env) {
    let config;
    switch (env) {
        case 'testnet':
            config = {
                networkId: "testnet",
                nodeUrl: "https://rpc.testnet.near.org",
                walletUrl: "https://wallet.testnet.near.org",
                helperUrl: "https://helper.testnet.near.org",
                explorerUrl: "https://explorer.testnet.near.org",
            };
            break;
        case 'mainnet':
            config = {
                networkId: "mainnet",
                nodeUrl: "https://rpc.mainnet.near.org",
                walletUrl: "https://wallet.mainnet.near.org",
                helperUrl: "https://helper.mainnet.near.org",
                explorerUrl: "https://explorer.mainnet.near.org",
            };
            break;
        default:
            console.log("Invalid near environment: " + env);
            return;
    }

    const near = await connect(config);
    return near;
}

async function sendTelegramMessage(text){

    let urlString = `https://api.telegram.org/bot${telegramApiToken}/sendMessage?chat_id=${telegramChatId}&text=${text}`;

    let request = new XMLHttpRequest();
    request.open("GET", urlString);
    request.send();

    let response = request.response;
}

(async () => {

    var args = process.argv.slice(2);
    if (args.length != 2) {
        console.log("Usage: node chec_balance.js <Near Network (" + nearEnvs + ")> <near account>");
        process.exit(0);
    }

    if (!nearEnvs.includes(args[0])) {
        console.log("Unsupported near environment. Supported values are: " + nearEnvs);
        process.exit(0);
    }

    const nearConnection = await getRemoteVersion(args[0]);

      // gets account balance
      const account = await nearConnection.account(args[1]);
      const balance = await account.getAccountBalance();

      if (balance.available < threshold){
        sendTelegramMessage("Low balance for user " + args[1] + ", amount: " + balance.available);
      }
      else {
        console.log("Available balance: " + balance.available + ", threshold: " + threshold);
      }

  })();
'''
'''--- account_balance/package.json ---
{
    "name": "near_account_balance",
    "version": "1.0.0",
    "description": "",
    "main": "check_balance.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"
    },
    "author": "Baldator",
    "license": "ISC",
    "dependencies": {
      "near-api-js": "^1.1.0",
      "xmlhttprequest": "^1.8.0"
    }
  }
  
'''
'''--- rpc_check/package.json ---
{
    "name": "rpc_check",
    "version": "1.0.0",
    "description": "",
    "main": "rpc_node_check.js",
    "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1"
    },
    "author": "Marco Torello",
    "license": "ISC",
    "dependencies": {
        "near-api-js": "^0.45.1",
        "semver": "^7.3.8",
        "xmlhttprequest": "^1.8.0"
    }
}

'''
'''--- rpc_check/rpc_node_check.js ---
const nearAPI = require("near-api-js");
const { connect } = nearAPI;
const XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;
const nearEnvs = ['testnet', 'mainnet'];
const telegramApiToken = ""; // The telegram bot API token
const telegramChatId = "";  // The telegram chat ID to sent notifications to
const blocksThreshold = 10;
const semver = require('semver');
const querystring = require('node:querystring');

async function compareVersion(env, remoteIP) {
    const remoteConfig = await getRemoteVersion(env);
    const localConfig = await getLocalVersion(remoteIP);

    if (remoteConfig.protocol_version == localConfig.protocol_version) {
        console.log("NEAR protocol version check OK! running version: " + localConfig.protocol_version);
    } else {
        console.log("NEAR protocol version check NOK! remote version: " + remoteConfig.protocol_version + ", local version: " + localConfig.protocol_version);
        sendTelegramMessage("[NEAR " + env + " - Validator NEAR protocol version] [ðŸ”´ Down] remote version: " + remoteConfig.protocol_version + ", local version: " + localConfig.protocol_version);
    }

    if(Math.abs(remoteConfig.sync_info.latest_block_height - localConfig.sync_info.latest_block_height) < blocksThreshold) {
        console.log("Last block check OK! latest height: " + localConfig.sync_info.latest_block_height);
    } else {
        console.log("Last block check NOK! remote height: " + remoteConfig.sync_info.latest_block_height + ", local height: " + localConfig.sync_info.latest_block_height);
        sendTelegramMessage("[NEAR " + env + " - Validator last bloc] [ðŸ”´ Down] Last block check NOK! remote height: " + remoteConfig.sync_info.latest_block_height + ", local height: " + localConfig.sync_info.latest_block_height);
    }

    if(localConfig.sync_info.syncing){
        console.log("Node is syncing");
        sendTelegramMessage("Node is syncing");
    }

    if (semver.lte(remoteConfig.version.version, localConfig.version.version)) {
        console.log("Nearcore version check OK! running version: " + localConfig.version.version);
    } else {
        console.log("Nearcore version check NOK! remote version: " + remoteConfig.version.version + ", local version: " + localConfig.version.version);
        sendTelegramMessage("[NEAR " + env + " - Validator nearcore version] [ðŸ”´ Down] remote version: " + remoteConfig.version.version + ", local version: " + localConfig.version.version);
    }

    if (semver.lte(remoteConfig.version.rustc_version, localConfig.version.rustc_version)) {
        console.log("Nearcore version check OK! running version: " + localConfig.version.rustc_version);
    } else {
        console.log("Nearcore version check NOK! remote version: " + remoteConfig.version.rustc_version + ", local version: " + localConfig.version.rustc_version);
        sendTelegramMessage("[NEAR " + env + " - Validator nearcore version] [ðŸ”´ Down] remote version: " + remoteConfig.version.rustc_version + ", local version: " + localConfig.version.rustc_version);
    }
}

async function sendTelegramMessage(text){

    let urlString = `https://api.telegram.org/bot${telegramApiToken}/sendMessage?chat_id=${telegramChatId}&text=${querystring.escape(text)}`;

    let request = new XMLHttpRequest();
    request.open("GET", urlString);
    request.send();

    let response = request.response;
}

async function getRemoteVersion(env) {
    let config;
    switch (env) {
        case 'testnet':
            config = {
                networkId: "testnet",
                nodeUrl: "https://rpc.testnet.near.org",
                walletUrl: "https://wallet.testnet.near.org",
                helperUrl: "https://helper.testnet.near.org",
                explorerUrl: "https://explorer.testnet.near.org",
            };
            break;
        case 'mainnet':
            config = {
                networkId: "mainnet",
                nodeUrl: "https://rpc.mainnet.near.org",
                walletUrl: "https://wallet.mainnet.near.org",
                helperUrl: "https://helper.mainnet.near.org",
                explorerUrl: "https://explorer.mainnet.near.org",
            };
            break;
        default:
            console.log("Invalid near environment: " + env);
            return;
    }

    const near = await connect(config);
    const response = await near.connection.provider.status();
    return response;
}

async function getLocalVersion(remoteIP) {
    const config = {
        networkId: "testnet",
        nodeUrl: "http://" + remoteIP + ":3030",
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
    };
    try{
        const near = await connect(config);
        const response = await near.connection.provider.status();
        return response;
    }
    catch{
        sendTelegramMessage("Problem retrieving node informations. Node ip: " + remoteIP )
    }

}

// parse args
var args = process.argv.slice(2);
if (args.length != 2) {
    console.log("Usage: node rpc_node_check.js <Near Network (" + nearEnvs + ")> <rpc node address>");
    process.exit(0);
}

if (!nearEnvs.includes(args[0])) {
    console.log("Unsupported near environment. Supported values are: " + nearEnvs);
    process.exit(0);
}

'''
'''--- validators_fee_change/package-lock.json ---
{
  "name": "validators_fee_change",
  "version": "1.0.0",
  "lockfileVersion": 2,
  "requires": true,
  "packages": {
    "": {
      "name": "validators_fee_change",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "near-api-js": "^1.1.0",
        "xmlhttprequest": "^1.8.0"
      }
    },
    "node_modules/base-x": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/bn.js": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.1.tgz",
      "integrity": "sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ=="
    },
    "node_modules/borsh": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.7.0.tgz",
      "integrity": "sha512-CLCsZGIBCFnPtkNnieW/a8wmreDmfUtjU2m9yHrzPXIlNbqVs0AQrSatSG6vdNYUqdc83tkQi2eHfF98ubzQLA==",
      "dependencies": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "node_modules/bs58": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
      "integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
      "dependencies": {
        "base-x": "^3.0.2"
      }
    },
    "node_modules/capability": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/capability/-/capability-0.2.5.tgz",
      "integrity": "sha512-rsJZYVCgXd08sPqwmaIqjAd5SUTfonV0z/gDJ8D6cN8wQphky1kkAYEqQ+hmDxTw7UihvBfjUVUSY+DBEe44jg=="
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/error-polyfill": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/error-polyfill/-/error-polyfill-0.1.3.tgz",
      "integrity": "sha512-XHJk60ufE+TG/ydwp4lilOog549iiQF2OAPhkk9DdiYWMrltz5yhDz/xnKuenNwP7gy3dsibssO5QpVhkrSzzg==",
      "dependencies": {
        "capability": "^0.2.5",
        "o3": "^1.0.3",
        "u3": "^0.1.1"
      }
    },
    "node_modules/http-errors": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
      "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
      "dependencies": {
        "depd": "~1.1.2",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/http-errors/node_modules/depd": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
      "integrity": "sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "node_modules/js-sha256": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA=="
    },
    "node_modules/mustache": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/mustache/-/mustache-4.2.0.tgz",
      "integrity": "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ==",
      "bin": {
        "mustache": "bin/mustache"
      }
    },
    "node_modules/near-api-js": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/near-api-js/-/near-api-js-1.1.0.tgz",
      "integrity": "sha512-qYKv1mYsaDZc2uYndhS+ttDhR9+60qFc+ZjD6lWsAxr3ZskMjRwPffDGQZYhC7BRDQMe1HEbk6d5mf+TVm0Lqg==",
      "dependencies": {
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "bs58": "^4.0.0",
        "depd": "^2.0.0",
        "error-polyfill": "^0.1.3",
        "http-errors": "^1.7.2",
        "js-sha256": "^0.9.0",
        "mustache": "^4.0.0",
        "node-fetch": "^2.6.1",
        "text-encoding-utf-8": "^1.0.2",
        "tweetnacl": "^1.0.1"
      }
    },
    "node_modules/node-fetch": {
      "version": "2.6.8",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.8.tgz",
      "integrity": "sha512-RZ6dBYuj8dRSfxpUSu+NsdF1dpPpluJxwOp+6IoDp/sH2QNDSvurYsAa+F1WxY2RjA1iP93xhcsUoYbF2XBqVg==",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/o3": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/o3/-/o3-1.0.3.tgz",
      "integrity": "sha512-f+4n+vC6s4ysy7YO7O2gslWZBUu8Qj2i2OUJOvjRxQva7jVjYjB29jrr9NCjmxZQR0gzrOcv1RnqoYOeMs5VRQ==",
      "dependencies": {
        "capability": "^0.2.5"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "node_modules/statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/text-encoding-utf-8": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "node_modules/tweetnacl": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.3.tgz",
      "integrity": "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw=="
    },
    "node_modules/u3": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/u3/-/u3-0.1.1.tgz",
      "integrity": "sha512-+J5D5ir763y+Am/QY6hXNRlwljIeRMZMGs0cT6qqZVVzzT3X3nFPXVyPOFRMOR4kupB0T8JnCdpWdp6Q/iXn3w=="
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/xmlhttprequest": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/xmlhttprequest/-/xmlhttprequest-1.8.0.tgz",
      "integrity": "sha512-58Im/U0mlVBLM38NdZjHyhuMtCqa61469k2YP/AaPbvCoV9aQGUpbJBj1QRm2ytRiVQBD/fsw7L2bJGDVQswBA==",
      "engines": {
        "node": ">=0.4.0"
      }
    }
  },
  "dependencies": {
    "base-x": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "bn.js": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.1.tgz",
      "integrity": "sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ=="
    },
    "borsh": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.7.0.tgz",
      "integrity": "sha512-CLCsZGIBCFnPtkNnieW/a8wmreDmfUtjU2m9yHrzPXIlNbqVs0AQrSatSG6vdNYUqdc83tkQi2eHfF98ubzQLA==",
      "requires": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "bs58": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
      "integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
      "requires": {
        "base-x": "^3.0.2"
      }
    },
    "capability": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/capability/-/capability-0.2.5.tgz",
      "integrity": "sha512-rsJZYVCgXd08sPqwmaIqjAd5SUTfonV0z/gDJ8D6cN8wQphky1kkAYEqQ+hmDxTw7UihvBfjUVUSY+DBEe44jg=="
    },
    "depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw=="
    },
    "error-polyfill": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/error-polyfill/-/error-polyfill-0.1.3.tgz",
      "integrity": "sha512-XHJk60ufE+TG/ydwp4lilOog549iiQF2OAPhkk9DdiYWMrltz5yhDz/xnKuenNwP7gy3dsibssO5QpVhkrSzzg==",
      "requires": {
        "capability": "^0.2.5",
        "o3": "^1.0.3",
        "u3": "^0.1.1"
      }
    },
    "http-errors": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
      "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
      "requires": {
        "depd": "~1.1.2",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.1"
      },
      "dependencies": {
        "depd": {
          "version": "1.1.2",
          "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
          "integrity": "sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ=="
        }
      }
    },
    "inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "js-sha256": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA=="
    },
    "mustache": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/mustache/-/mustache-4.2.0.tgz",
      "integrity": "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ=="
    },
    "near-api-js": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/near-api-js/-/near-api-js-1.1.0.tgz",
      "integrity": "sha512-qYKv1mYsaDZc2uYndhS+ttDhR9+60qFc+ZjD6lWsAxr3ZskMjRwPffDGQZYhC7BRDQMe1HEbk6d5mf+TVm0Lqg==",
      "requires": {
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "bs58": "^4.0.0",
        "depd": "^2.0.0",
        "error-polyfill": "^0.1.3",
        "http-errors": "^1.7.2",
        "js-sha256": "^0.9.0",
        "mustache": "^4.0.0",
        "node-fetch": "^2.6.1",
        "text-encoding-utf-8": "^1.0.2",
        "tweetnacl": "^1.0.1"
      }
    },
    "node-fetch": {
      "version": "2.6.8",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.8.tgz",
      "integrity": "sha512-RZ6dBYuj8dRSfxpUSu+NsdF1dpPpluJxwOp+6IoDp/sH2QNDSvurYsAa+F1WxY2RjA1iP93xhcsUoYbF2XBqVg==",
      "requires": {
        "whatwg-url": "^5.0.0"
      }
    },
    "o3": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/o3/-/o3-1.0.3.tgz",
      "integrity": "sha512-f+4n+vC6s4ysy7YO7O2gslWZBUu8Qj2i2OUJOvjRxQva7jVjYjB29jrr9NCjmxZQR0gzrOcv1RnqoYOeMs5VRQ==",
      "requires": {
        "capability": "^0.2.5"
      }
    },
    "safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ=="
    },
    "setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA=="
    },
    "text-encoding-utf-8": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
    },
    "toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA=="
    },
    "tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "tweetnacl": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.3.tgz",
      "integrity": "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw=="
    },
    "u3": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/u3/-/u3-0.1.1.tgz",
      "integrity": "sha512-+J5D5ir763y+Am/QY6hXNRlwljIeRMZMGs0cT6qqZVVzzT3X3nFPXVyPOFRMOR4kupB0T8JnCdpWdp6Q/iXn3w=="
    },
    "webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "requires": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "xmlhttprequest": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/xmlhttprequest/-/xmlhttprequest-1.8.0.tgz",
      "integrity": "sha512-58Im/U0mlVBLM38NdZjHyhuMtCqa61469k2YP/AaPbvCoV9aQGUpbJBj1QRm2ytRiVQBD/fsw7L2bJGDVQswBA=="
    }
  }
}

'''
'''--- validators_fee_change/package.json ---
{
  "name": "validators_fee_change",
  "version": "1.0.0",
  "description": "",
  "main": "validator_fee_change.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Marco Torello",
  "license": "ISC",
  "dependencies": {
    "near-api-js": "^1.1.0",
    "xmlhttprequest": "^1.8.0"
  }
}

'''
'''--- validators_fee_change/validator_fee_change.js ---
const nearAPI = require("near-api-js");
const XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;
const fs = require('fs')
const nearEnvs = ['testnet', 'mainnet'];
const telegramApiToken = ""; // The telegram bot API token
const telegramChatId = "";  // The telegram chat ID to sent notifications to
const oldPath = require('path').dirname(require.main.filename) + '/validators.json'

const { connect } = nearAPI;

async function createConnection(env) {
    let config;
    switch (env) {
        case 'testnet':
            config = {
                networkId: "testnet",
                nodeUrl: "https://rpc.testnet.near.org",
                walletUrl: "https://wallet.testnet.near.org",
                helperUrl: "https://helper.testnet.near.org",
                explorerUrl: "https://explorer.testnet.near.org",
            };
            break;
        case 'mainnet':
            config = {
                networkId: "mainnet",
                nodeUrl: "https://rpc.mainnet.near.org",
                walletUrl: "https://wallet.mainnet.near.org",
                helperUrl: "https://helper.mainnet.near.org",
                explorerUrl: "https://explorer.mainnet.near.org",
            };
            break;
        default:
            console.log("Invalid near environment: " + env);
            return;
    }

    const near = await connect(config);
    return near;
}

async function sendTelegramMessage(text){

    let urlString = `https://api.telegram.org/bot${telegramApiToken}/sendMessage?chat_id=${telegramChatId}&text=${text}`;

    let request = new XMLHttpRequest();
    request.open("GET", urlString);
    request.send();

    let response = request.response;
}

async function getValidatorsList(near){
    const response = await near.connection.provider.status();
    return response.validators;
}

async function getValidationPercentage(validator, nearConnection){
    const response = await nearConnection.connection.provider.query({
        request_type: "call_function",
        finality: "final",
        account_id: validator,
        method_name: "get_reward_fee_fraction",
        args_base64: "",
      });
    const value = Buffer.from(response.result, 'base64').toString();
    const val = JSON.parse(value);
    return val["numerator"]/val["denominator"]*100
}

async function search(nameKey, myArray){
    for (let i=0; i < myArray.length; i++) {
        if (myArray[i].name === nameKey) {
            return myArray[i];
        }
    }
}

(async () => {

    var args = process.argv.slice(2);
    if (args.length != 1) {
        console.log("Usage: node validator_fee_change.js <Near Network (" + nearEnvs + ")>");
        process.exit(0);
    }

    if (!nearEnvs.includes(args[0])) {
        console.log("Unsupported near environment. Supported values are: " + nearEnvs);
        process.exit(0);
    }

    const nearConnection = await createConnection(args[0]);    
    const validators = await getValidatorsList(nearConnection);

    let valNew = []; 

    for await (const validator of validators){
        const fee = await getValidationPercentage(validator['account_id'], nearConnection);
        const valObj = {
            name: validator['account_id'],
            percentage: fee
        };
        valNew.push(valObj);
      };

    let firstExecution = true;
    let oldVal;

    try {
        if (fs.existsSync(oldPath)) {
            oldVal = fs.readFileSync(oldPath);
            oldVal = JSON.parse(oldVal);
            firstExecution = false
        }
        
    } catch(err) {
        console.log("firstExecution")
    }

    if(firstExecution === false){
        for await (const valLoop of valNew){
            valLoopOld = await search(valLoop.name, oldVal)
            if (typeof varLoopOld === 'undefined'){
                continue
            }
            if(valLoop.percentage != valLoopOld.percentage){
                sendTelegramMessage("Validation percentage change for " + valLoop.name + ". Old: " + valLoopOld.percentage + ", new: " + valLoop.percentage)
            }
        }
    }
    else{
        console.log("First execution")
    }

    fs.writeFileSync(oldPath, JSON.stringify(valNew));

  })();
'''
'''--- validators_fee_change/validators.json ---
[{"name":"figment.poolv1.near","percentage":10},{"name":"astro-stakers.poolv1.near","percentage":1},{"name":"bzam6yjpnfnxsdmjf6pw.poolv1.near","percentage":100},{"name":"zavodil.poolv1.near","percentage":1},{"name":"binancenode1.poolv1.near","percentage":5},{"name":"yes_protocol1.poolv1.near","percentage":100},{"name":"staking_yes_protocol1.poolv1.near","percentage":100},{"name":"electric.poolv1.near","percentage":8},{"name":"epic.poolv1.near","percentage":1},{"name":"aurora.pool.near","percentage":99},{"name":"stake1.poolv1.near","percentage":3},{"name":"sweat_validator.poolv1.near","percentage":100},{"name":"dqw9k3e4422cxt92masmy.poolv1.near","percentage":100},{"name":"future_is_near.poolv1.near","percentage":9},{"name":"rekt.poolv1.near","percentage":1.5},{"name":"kiln.poolv1.near","percentage":100},{"name":"nearcrowd.poolv1.near","percentage":100},{"name":"finoa.poolv1.near","percentage":10},{"name":"foundry.poolv1.near","percentage":10},{"name":"d1.poolv1.near","percentage":5},{"name":"anonymous.poolv1.near","percentage":100},{"name":"continue.poolv1.near","percentage":5},{"name":"hashquark.poolv1.near","percentage":3},{"name":"near-fans.poolv1.near","percentage":5},{"name":"stakin.poolv1.near","percentage":1},{"name":"neardevgov.poolv1.near","percentage":10},{"name":"08investinwomen_runbybisontrails.poolv1.near","percentage":5},{"name":"hb436_pool.poolv1.near","percentage":10},{"name":"chorusone.poolv1.near","percentage":8},{"name":"openshards.poolv1.near","percentage":5},{"name":"northernlights.poolv1.near","percentage":8},{"name":"nearfans.poolv1.near","percentage":5},{"name":"accomplice.poolv1.near","percentage":100},{"name":"dokiacapital.poolv1.near","percentage":10},{"name":"smart-stake.poolv1.near","percentage":1},{"name":"p2p-org.poolv1.near","percentage":7.000000000000001},{"name":"cryptium.poolv1.near","percentage":5},{"name":"pandora.poolv1.near","percentage":5},{"name":"everstake.poolv1.near","percentage":3},{"name":"nc2.poolv1.near","percentage":100},{"name":"ideocolabventures.poolv1.near","percentage":10},{"name":"buildlinks.poolv1.near","percentage":5},{"name":"stakesabai.poolv1.near","percentage":1},{"name":"bisontrails.poolv1.near","percentage":10},{"name":"sharpdarts.poolv1.near","percentage":5},{"name":"blockdaemon.poolv1.near","percentage":5},{"name":"consensus_finoa_01.poolv1.near","percentage":6},{"name":"consensus_finoa_00.poolv1.near","percentage":6},{"name":"nodeasy.poolv1.near","percentage":3},{"name":"dsrvlabs.poolv1.near","percentage":10},{"name":"staked.poolv1.near","percentage":10},{"name":"lux.poolv1.near","percentage":5},{"name":"republic.poolv1.near","percentage":5},{"name":"lunanova.poolv1.near","percentage":7.000000000000001},{"name":"brea.poolv1.near","percentage":8},{"name":"zkv_staketosupportprivacy.poolv1.near","percentage":4},{"name":"baziliknear.poolv1.near","percentage":3},{"name":"erm.poolv1.near","percentage":8},{"name":"fish.poolv1.near","percentage":4},{"name":"valisaurus-dex.poolv1.near","percentage":20},{"name":"stardust.poolv1.near","percentage":5},{"name":"legends.poolv1.near","percentage":10},{"name":"masternode24.poolv1.near","percentage":4},{"name":"moonlet.poolv1.near","percentage":5},{"name":"nearkoreahub.poolv1.near","percentage":10},{"name":"inotel.poolv1.near","percentage":3},{"name":"fresh.poolv1.near","percentage":1.9},{"name":"allnodes.poolv1.near","percentage":0},{"name":"appload.poolv1.near","percentage":3},{"name":"qbit.poolv1.near","percentage":5},{"name":"01node.poolv1.near","percentage":3},{"name":"jazza.poolv1.near","percentage":4},{"name":"satori.poolv1.near","percentage":100},{"name":"avado.poolv1.near","percentage":0},{"name":"pandateam.poolv1.near","percentage":0},{"name":"nonli-near.poolv1.near","percentage":20},{"name":"staking_sp2.poolv1.near","percentage":100},{"name":"bridgetower_v1.poolv1.near","percentage":10},{"name":"staking_opp_disc.poolv1.near","percentage":100},{"name":"galactic.poolv1.near","percentage":3},{"name":"atomic-nodes.poolv1.near","percentage":5},{"name":"dexagon.poolv1.near","percentage":1},{"name":"cryptoblossom.poolv1.near","percentage":1},{"name":"cryptogarik.poolv1.near","percentage":1},{"name":"pathrocknetwork.poolv1.near","percentage":1},{"name":"optimusvalidatornetwork.poolv1.near","percentage":1},{"name":"prophet.poolv1.near","percentage":5},{"name":"stakely_io.poolv1.near","percentage":1},{"name":"readylayerone_staking.poolv1.near","percentage":3},{"name":"grassets.poolv1.near","percentage":3},{"name":"kosmos_and_p2p.poolv1.near","percentage":5},{"name":"infiniteloop.poolv1.near","percentage":1},{"name":"lionstake.poolv1.near","percentage":5},{"name":"dragonfly.poolv1.near","percentage":5},{"name":"steak.poolv1.near","percentage":4},{"name":"calimero.pool.near","percentage":5},{"name":"staking-power.poolv1.near","percentage":1},{"name":"n0ok.poolv1.near","percentage":2},{"name":"galaxydigital.poolv1.near","percentage":10},{"name":"nearua.poolv1.near","percentage":7.000000000000001}]
'''