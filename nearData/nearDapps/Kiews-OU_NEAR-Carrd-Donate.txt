*GitHub Repository "Kiews-OU/NEAR-Carrd-Donate"*

'''--- .eslintrc.yml ---
env:
  es2021: true
  node: true
extends:
  - 'eslint:recommended'
  - 'plugin:@typescript-eslint/recommended'
parser: '@typescript-eslint/parser'
parserOptions:
  ecmaVersion: 12
  sourceType: module
plugins:
  - '@typescript-eslint'
rules: {}

'''
'''--- .github/dependabot.yml ---
version: 2
updates:
- package-ecosystem: npm
  directory: "/"
  schedule:
    interval: daily
  open-pull-requests-limit: 10

'''
'''--- .github/workflows/deploy.yml ---
name: Build and Deploy
on:
  push:
    branches:
      - master
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v2.3.1 # If you're using actions/checkout@v2 you must set persist-credentials to false in most cases for the deployment to work correctly.
        with:
          persist-credentials: false

      - name: Install and Build 🔧 # This example project is built using npm and outputs the result to the 'build' folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.
        run: |
          yarn install --frozen-lockfile
          yarn build

      - name: Deploy 🚀
        uses: JamesIves/github-pages-deploy-action@3.7.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages # The branch the action should deploy to.
          FOLDER: dist # The folder the action should deploy.

'''
'''--- .github/workflows/tests.yml ---
name: Tests
on: 
  repository_dispatch:
    types: [tests-report]
  push:
jobs:
  tests:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '12'
      - name: Install modules
        run: yarn install --frozen-lockfile
      - name: Build and run tests
        env:
          IS_GITHUB_ACTION: true
        run: yarn test

'''
'''--- .gitpod.yml ---
image:
  file: .gitpod.Dockerfile
# Options to prebuild the image after github events and set notifications/badges
github:
  prebuilds:
    # enable for the master/default branch (defaults to true)
    master: true
    # enable for pull requests coming from this repo (defaults to true)
    pullRequests: true
    # enable for pull requests coming from forks (defaults to false)
    pullRequestsFromForks: true
    # add a check to pull requests (defaults to true)
    addCheck: true
    # add a "Review in Gitpod" button as a comment to pull requests (defaults to false)
    addComment: true
    # add a "Review in Gitpod" button to the pull request's description (defaults to false)
    addBadge: false
    # add a label once the prebuild is ready to pull requests (defaults to false)
    addLabel: false

# List the start up tasks. You can start them in parallel in multiple terminals. See https://www.gitpod.io/docs/config-start-tasks/
tasks:
  - before: echo "nvm use default" >> ~/.bashrc && nvm use default
    command: source ~/.bashrc; gp open README-Gitpod.md && yarn && alias near=./node_modules/near-cli/bin/near && yarn dev

ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- .travis.yml ---
language: node_js
node_js:
  - 12
os:
  - linux
  - osx
  - windows
env:
  - NEAR_ENV=ci YARN_GPG=no
  - NEAR_ENV=ci-betanet YARN_GPG=no
cache: yarn
script:
  - yarn lint && yarn test

'''
'''--- README.md ---
Introduction
==========

If you have a project to fundraise, the Near Protocol is a very suitable platform for this task.

Near Protocol's ability to embed custom functions in the blockchain, Near Protocol, can not only easy transfer money between wallets but also, for example, make a rating of the best investors or philanthropists to stimulate competition between them,  display the amount needed to fundraise in real-time, and much more!

Now I will show how easy it is to implement these functions with Near.

I have created a project ["Let's help homeless pets"](https://near-donate.carrd.co/), with the next features:

1. `addDonate`
Make charitable contributions. But instead the base's "send" function of Near Protocol, I created a function - "addDonate", that can add to the transaction name of the philanthropist, date, and message with wishes.

2. `getDonateBalance`
Display the amount of raised funds in real-time.

3. `getNumberPhilanthropists`
Display the number of philanthropists in real time.

4. `getTopPhilanthropists`
The top list of philanthropists, sorted by amount.

How to do this and how it works to see on the [video/en](https://www.youtube.com/watch?v=GHJN7xU5reU),  [video/ua](https://www.youtube.com/watch?v=_uypyNrGXrQ)

And read step by step manual below.

Near Carrd Donate Module
==========

Near Donate Module for Carrd CMS is a charity fundraising project with a rating of philanthropists. It has some features. Login with Near protocol. Opportunity to donate a certain amount Near. Users can also see the latest donation transactions and the top 5 philanthropists.

Prepare Near contract
==========

To prepare Near contract, you shoud clone [repository](https://github.com/andersenbel/near-carrd-donate)

    git clone git@github.com:andersenbel/near-carrd-donate    

And modify settings in  `src/config.js`:

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'your-contact-name.testnet';

Next, you should to prepare envoriment accoording [Near Quick Start](#near-quick-start) part below, and deploy contract:

    yarn deploy:contract
    near deploy --accountId carrd-donate.testnet --wasmFile ./out/main.wasm

If all right, you can run the command:

    near view your-contract.testnet getTopPhilanthropists

And get it:

    View call: your-contract.testnet.getTopPhilanthropists()
    []

Carrd integration
==========

Near project can be integrated with [Carrd.co CMS](https://carrd.co/ ).
You shoud to add three embeded block: 
1. Near panel and input gorm for authorisied users `card/carrd-donate-panel.html`
2. Output donates lists area `card/carrd-donate-messages.html`
3. Javascript code for start `card/carrd-donate-invoke.html`

Also You shoud to modify carrd-donate-invoke.html for your settings:

    <link media="all" rel="stylesheet"
        href="https://cdn.jsdelivr.net/gh/andersenbel/near-carrd-donate/carrd/carrd-donate-1.css" />
    <script type="application/javascript"
        src="https://cdn.jsdelivr.net/gh/andersenbel/near-carrd-donate/carrd/carrd-donate-1.js"></script>
    <script>
        new add_near({
            networkId: "testnet",
            keyStore: false,
            nodeUrl: "https://rpc.testnet.near.org",
            walletUrl: "https://wallet.testnet.near.org",
            helperUrl: "https://helper.testnet.near.org",
            explorerUrl: "https://explorer.testnet.near.org",
        }, {
            con_name: "your-contract-name.testnet",
            app_name: "Example App",
            success_url: "https://your-site.com.carrd.co/#success",
            failure_url: "https://your-site.com.carrd.co/#failure",
        }, {
            "btn_signin": "near_protocol_signin",
            "btn_signout": "near_protocol_signout",
            "btn_donate": "buttons02",
            "input_amount": "form01-name",
            "input_sender_name": "near_protocol_input_your_name",
            "input_message_text": "near_protocol_input_message_text",
            "text_username": "near_protocol_username",
            "text_number_messages": "text10",
            "text_balance": "text06",
            "html_top_messages": "near_protocol_html_top_messages",
            "html_last_messages": "near_protocol_html_last_messages",
        })
    </script>    

Near Quick Start
===========
Based on near guest-book repsitory

To run this project locally:

1. Prerequisites: Make sure you have Node.js ≥ 12 installed (https://nodejs.org), then use it to install [yarn]: `npm install --global yarn` (or just `npm i -g yarn`)
2. Run the local development server: `yarn && yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet! Running `yarn dev` will tell you the URL you can visit in your browser to see the app.

Exploring The Code
==================

1. The backend code lives in the `/assembly` folder. This code gets deployed to
   the NEAR blockchain when you run `yarn deploy:contract`. This sort of
   code-that-runs-on-a-blockchain is called a "smart contract" – [learn more
   about NEAR smart contracts][smart contract docs].
2. The frontend code lives in the `/src` folder.
   [/src/index.html](/src/index.html) is a great place to start exploring. Note
   that it loads in `/src/index.js`, where you can learn how the frontend
   connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and backend. The
   backend code gets tested with the [asp] command for running the backend
   AssemblyScript tests, and [jest] for running frontend tests. You can run
   both of these at once with `yarn test`.

Both contract and client-side code will auto-reload as you change source files.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contracts get deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli
--------------------------

You need near-cli installed globally. Here's how:

    npm install --global near-cli

This will give you the `near` [CLI] tool. Ensure that it's installed with:

    near --version

Step 1: Create an account for the contract
------------------------------------------

Visit [NEAR Wallet] and make a new account. You'll be deploying these smart contracts to this new account.

Now authorize NEAR CLI for this new account, and follow the instructions it gives you:

    near login

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'your-account-here!'

Step 3: change remote URL if you cloned this repo 
-------------------------

Unless you forked this repository you will need to change the remote URL to a repo that you have commit access to. This will allow auto deployment to GitHub Pages from the command line.

1) go to GitHub and create a new repository for this project
2) open your terminal and in the root of this project enter the following:

    $ `git remote set-url origin https://github.com/YOUR_USERNAME/YOUR_REPOSITORY.git`

Step 4: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contracts to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

  [NEAR]: https://near.org/
  [yarn]: https://yarnpkg.com/
  [AssemblyScript]: https://www.assemblyscript.org/introduction.html
  [React]: https://reactjs.org
  [smart contract docs]: https://docs.near.org/docs/develop/contracts/overview
  [asp]: https://www.npmjs.com/package/@as-pect/cli
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.near.org
  [near-cli]: https://github.com/near/near-cli
  [CLI]: https://www.w3schools.com/whatis/whatis_cli.asp
  [create-near-app]: https://github.com/near/create-near-app
  [carrd.co]: https://carrd.co/

'''
'''--- as-pect.config.js ---
module.exports = require('near-sdk-as/imports')

'''
'''--- asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json",
  "entry": "assembly/main.ts",
  "options": {
    "binaryFile": "out/main.wasm"
  }
} 

'''
'''--- assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />

'''
'''--- assembly/__tests__/guestbook.spec.ts ---
import { addMessage, getMessages } from '../main';
import { PostedMessage, messages } from '../model';
import { VMContext, Context, u128 } from 'near-sdk-as';

function createMessage(text: string): PostedMessage {
  return new PostedMessage(text);
}

const message = createMessage('hello world');

describe('message tests', () => {
  afterEach(() => {
    while(messages.length > 0) {
      messages.pop();
    }
  });

  it('adds a message', () => {
    addMessage('hello world');
    expect(messages.length).toBe(
      1,
      'should only contain one message'
    );
    expect(messages[0]).toStrictEqual(
      message,
      'message should be "hello world"'
    );
  });

  it('adds a premium message', () => {
    VMContext.setAttached_deposit(u128.from('10000000000000000000000'));
    addMessage('hello world');
    const messageAR = getMessages();
    expect(messageAR[0].premium).toStrictEqual(true,
      'should be premium'
    );
  });

  it('retrieves messages', () => {
    addMessage('hello world');
    const messagesArr = getMessages();
    expect(messagesArr.length).toBe(
      1,
      'should be one message'
    );
    expect(messagesArr).toIncludeEqual(
      message,
      'messages should include:\n' + message.toJSON()
    );
  });

  it('only show the last 10 messages', () => {
    addMessage('hello world');
    const newMessages: PostedMessage[] = [];
    for(let i: i32 = 0; i < 10; i++) {
      const text = 'message #' + i.toString();
      newMessages.push(createMessage(text));
      addMessage(text);
    }
    const messages = getMessages();
    log(messages.slice(7, 10));
    expect(messages).toStrictEqual(
      newMessages,
      'should be the last ten messages'
    );
    expect(messages).not.toIncludeEqual(
      message,
      'shouldn\'t contain the first element'
    );
  });
});

describe('attached deposit tests', () => {
  beforeEach(() => {
    VMContext.setAttached_deposit(u128.fromString('0'));
    VMContext.setAccount_balance(u128.fromString('0'));
  });

  it('attaches a deposit to a contract call', () => {
    log('Initial account balance: ' + Context.accountBalance.toString());

    addMessage('hello world');
    VMContext.setAttached_deposit(u128.from('10'));

    log('Attached deposit: 10');
    log('Account balance after deposit: ' + Context.accountBalance.toString());

    expect(Context.accountBalance.toString()).toStrictEqual(
      '10',
      'balance should be 10'
    );
  });
});

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />

'''
'''--- assembly/main.ts ---
import { context, u128 } from 'near-sdk-as';
import { Donation, messages } from './model';

// --- contract code goes below

// The maximum number of latest messages the contract returns.
const LAST_DONATE_LIST_LIMIT = 10;

// The maximum number of latest messages the contract returns.
const TOP_DONATE_LIST_LIMIT = 5;

/**
 * Adds a new message under the name of the sender's account id.\
 * NOTE: This is a change method. Which means it will modify the state.\
 * But right now we don't distinguish them with annotations yet.
 */
export function addDonate(text: string, name: string): void {
  // Creating a new message and populating fields with our data
  const message = new Donation(text, name);
  // Adding the message to end of the persistent collection
  messages.push(message);
}

/**
 * Returns an array of last N messages.\
 * NOTE: This is a view method. Which means it should NOT modify the state.
 */
export function getDonates(): Donation[] {
  const numMessages = messages.length
  let result = new Array<Donation>();
  for (let i = 0; i < numMessages; i++) {
    if (messages[i].amount > u128.from(0))
      result.push(messages[i]);
  }
  return result.reverse().splice(0, LAST_DONATE_LIST_LIMIT).reverse()
}

export function getDonateBalance(): String {
  const result = context.accountBalance.toString()
  return result;
}

export function getNumberPhilanthropists(): String {
  const result = messages.length.toString()
  return result;
}

export function getTopPhilanthropists(): Array<Donation> {
  const numMessages = messages.length
  let result: Array<Donation> = [];
  for (let i = 0; i < numMessages; i++) {
    if (result.length == 0)
      result.push(messages[i])
    else if (messages[i].amount && messages[i].amount > u128.from(0)) {
      result = insert_and_sort(result, messages[i])
    }
  }
  return result.splice(0, TOP_DONATE_LIST_LIMIT)
}

function insert_and_sort(result: Array<Donation>, donation: Donation): Array<Donation> {
  let to_break = false
  let i = 0
  const new_result: Array<Donation> = [];
  while (i < result.length) {
    if (donation.amount >= result[i].amount && !to_break) {
      to_break = true
      new_result.push(donation)
      new_result.push(result[i])
    } else {
      new_result.push(result[i])
    }
    i++;
  }
  return new_result
}
'''
'''--- assembly/model.ts ---
import { context, u128, PersistentVector } from "near-sdk-as";

/** 
 * Exporting a new class PostedMessage so it can be used outside of this file.
 */
@nearBindgen
export class Donation {
  premium: boolean;
  sender: string;
  datetime: string;
  name: string;
  amount: u128;
  constructor(public text: string, name: string) {
    this.premium = context.attachedDeposit >= u128.from('10000000000000000000000');
    this.sender = context.sender
    this.amount = context.attachedDeposit
    this.datetime = context.blockTimestamp.toString()

    //this.datetime = new Date(<number>context.blockTimestamp).toDateString()
    this.name = name
  }
}
/**
 * collections.vector is a persistent collection. Any changes to it will
 * be automatically saved in the storage.
 * The parameter to the constructor needs to be unique across a single contract.
 * It will be used as a prefix to all keys required to store data in the storage.
 */
export const messages = new PersistentVector<Donation>("m");
'''
'''--- assembly/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ],
  // "compilerOptions": {
  //   "module": "ES6",
  //   "noImplicitAny": true,
  //   "removeComments": true,
  //   "preserveConstEnums": true,
  //   "sourceMap": true
  // },
}
'''
'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react']
}

'''
'''--- carrd/carrd-donate-invoke.html ---
<link media="all" rel="stylesheet"
    href="https://cdn.jsdelivr.net/gh/andersenbel/near-carrd-donate/carrd/carrd-donatev2.css" />
<script type="application/javascript"
    src="https://cdn.jsdelivr.net/gh/andersenbel/near-carrd-donate/carrd/carrd-donatev2.js"></script>
<script>
    new add_near({
        networkId: "testnet",
        keyStore: false,
        nodeUrl: "https://rpc.testnet.near.org",
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
    }, {
        con_name: "carrd-donate.testnet",
        app_name: "Example App",
        success_url: "https://near-donate.carrd.co/#success",
        failure_url: "https://near-donate.carrd.co/#failure",
    }, {
        "btn_signin": "near_protocol_signin",
        "btn_signout": "near_protocol_signout",
        "btn_donate": "buttons02",
        "input_amount": "form01-name",
        "input_sender_name": "near_protocol_input_your_name",
        "input_message_text": "near_protocol_input_message_text",
        "text_username": "near_protocol_username",
        "text_number_messages": "text10",
        "text_balance": "text06",
        "html_top_messages": "near_protocol_html_top_messages",
        "html_last_messages": "near_protocol_html_last_messages",
    })
</script>
'''
'''--- carrd/carrd-donate-messages.html ---
<div id="near_protocol_html_top_messages" class="near_protocol_values"></div>
<div id="near_protocol_html_last_messages" class="near_protocol_values"></div>
'''
'''--- carrd/carrd-donate-panel.html ---
<div class="near_protocol_wrap">
    <ul>
        <li>
            <a href="https://www.near.org" target="_blank">
                <svg height="20" viewBox="0 0 76 20" width="76" xmlns="http://www.w3.org/2000/svg" fill="#ffffff">
                    <path
                        d="m38.0449 4.17778v11.66662c0 .0889-.0666.1778-.1777.1778h-1.2223c-.5555 0-1.0888-.2889-1.4-.7555l-5.5111-8.51114.1778 4.24444v4.8667c0 .0889-.0667.1777-.1778.1777h-1.6c-.0889 0-.1777-.0666-.1777-.1777v-11.68892c0-.08889.0666-.17778.1777-.17778h1.2c.5556 0 1.0889.28889 1.4.75556l5.5111 8.48884-.1777-4.2444v-4.82222c0-.08889.0666-.17778.1777-.17778h1.6c.1334 0 .2.06667.2.17778z">
                    </path>
                    <path
                        d="m54.444 16h-1.6889c-.1111 0-.2-.1111-.1555-.2222l4.4889-11.62224c.0444-.08889.1333-.15556.2222-.15556h2.1333c.1111 0 .2.06667.2223.15556l4.5111 11.62224c.0444.1111-.0445.2222-.1556.2222h-1.6889c-.0666 0-.1333-.0444-.1555-.1111l-3.6223-9.55557c-.0444-.13333-.2666-.13333-.3111 0l-3.6222 9.55557c-.0444.0667-.1111.1111-.1778.1111z">
                    </path>
                    <path
                        d="m75.9557 15.7333-3.3778-4.3111c1.9111-.3555 3.0222-1.64442 3.0222-3.6222 0-2.26667-1.4667-3.8-4.0889-3.8h-4.7111c-.1333 0-.2444.11111-.2444.24444 0 .88889.7111 1.6 1.6 1.6h3.1777c1.5778 0 2.3334.8 2.3334 1.97778s-.7334 1.97778-2.3334 1.97778h-4.4889c-.1333 0-.2444.11111-.2444.2444v5.7778c0 .0889.0667.1778.1778.1778h1.6c.0889 0 .1778-.0667.1778-.1778v-4.2889h1.8444l2.9333 3.8223c.3111.4222.8.6444 1.3334.6444h1.2222c.0889 0 .1555-.1556.0667-.2667z">
                    </path>
                    <path
                        d="m49.3776 4h-7.4444c-.1334 0-.2223.08889-.2223.22222 0 .88889.7334 1.62222 1.6223 1.62222h6.0444c.0889 0 .1778-.06666.1778-.17777v-1.51111c-.0222-.08889-.0889-.15556-.1778-.15556zm0 10.1556h-5.5555c-.0889 0-.1778-.0667-.1778-.1778v-3c0-.0889.0666-.1778.1778-.1778h5.1333c.0889 0 .1778-.0667.1778-.1778v-1.51109c0-.08889-.0667-.17778-.1778-.17778h-7c-.1333 0-.2445.11111-.2445.24445v6.55552c0 .1334.1112.2445.2445.2445h7.4222c.0889 0 .1778-.0667.1778-.1778v-1.5111c-.0222-.0667-.0889-.1333-.1778-.1333z">
                    </path>
                    <path
                        d="m16.0444 1.02222-4.1777 6.2c-.2889.42222.2666.93334.6666.57778l4.1111-3.57778c.1112-.08889.2667-.02222.2667.13334v11.17774c0 .1556-.2.2223-.2889.1111l-12.44442-14.888844c-.4-.488889-.97778-.755556-1.62222-.755556h-.44445c-1.155554 0-2.11111.955556-2.11111 2.13333v15.73337c0 1.1777.955556 2.1333 2.13333 2.1333.73334 0 1.42223-.3778 1.82223-1.0222l4.17777-6.2c.28889-.4222-.26666-.9334-.66666-.5778l-4.11111 3.5556c-.11112.0888-.26667.0222-.26667-.1334v-11.15553c0-.15556.2-.22223.28889-.11111l12.44442 14.88884c.4.4889 1 .7556 1.6222.7556h.4445c1.1778 0 2.1333-.9556 2.1333-2.1333v-15.73337c-.0222-1.177774-.9778-2.13333-2.1555-2.13333-.7334 0-1.4223.377778-1.8223 1.02222z">
                    </path>
                </svg>
            </a>
        </li>
        <li id="near_protocol_username"><span>Username</span></li>
        <li id="near_protocol_signin" class="btn"><span>SignIn</span></li>
        <li id="near_protocol_signout" class="btn"><span>SignOut</span></li>
    </ul>

    <div class="field">
        <input type="number" name="name" id="form01-name" placeholder="0">
    </div>
    <div class="field">
        <input type="text" placeholder="Yourname" id="near_protocol_input_your_name" />
    </div>
    <div class="field">
        <input type="text" placeholder="Input message" id="near_protocol_input_message_text" />
    </div>
</div>
'''
'''--- carrd/carrd-donatev2.css ---
.near_protocol_wrap .field {
    margin: 0.2rem 0 0.2rem 0;
}

.near_protocol_wrap input,
.near_protocol_wrap textarea {
    padding: 0.5rem 1.4rem;
    line-height: calc(2rem - 2px);
    border-radius: 0.8rem;
    font-size: 1.5rem;
    width: 80%;
    background: transparent;
    color: #ffffff;
}

.near_protocol_wrap input[type="number"] {
    width: 50%;
    height: 4rem;
    text-align: right;
    line-height: calc(4rem - 2px);
    border-radius: 2rem;
    font-size: 3rem;
    background: #1d122e;
    margin-bottom: 1rem;
}

.near_protocol_wrap>ul {
    display: flex;
    padding: 0.5rem 2rem 0.5rem 2rem;
    margin: 1rem auto 1rem auto;
    border-radius: 1rem;
    background: #1e132e;
    border: 1px solid #cccccc;
    position: relative;
    color: #ffffff;
    width: fit-content;
}

.near_protocol_wrap>ul>li {
    /* margin: 0 0 0 1.0rem; */
    padding: 0;
    display: flex;
}

.near_protocol_wrap>ul>li::before {
    content: " ";
    margin-left: 1rem;
    margin-right: 1rem;
}

.near_protocol_wrap>ul>li>* {
    margin: auto;
    display: block;
}

.near_protocol_wrap .btn:hover {
    color: #f5d000;
}

.near_protocol_wrap li:first-child {
    margin: 0 0 0 0;
}

.near_protocol_wrap li:first-child::before,
.near_protocol_wrap li li:first-child::before {
    content: "";
    margin-left: 0;
    margin-right: 0;
}

.near_protocol_wrap .btn {
    cursor: pointer;
}

.messages_list {
    flex-direction: column;
    padding: 1rem 0 1rem 0;
    font-family: 'Inter', sans-serif;
}

.messages_list dl {
    display: block;
    padding: 0.5rem;
    border-radius: 0.5rem;
    border: 1px solid rgb(204 204 204 / 10%);
    ;
    margin-top: 0.1rem;
    margin-bottom: 0;
    text-align: left;
}

.messages_list dd {
    margin: 0;
    padding: 0;
    border-bottom: 1px solid rgb(204 204 204 / 10%);
    padding-bottom: 0.3rem;
    color: #ffffff;
    font-size: 0.8rem;
    line-height: 1.1rem;
    opacity: 0.5;
    display: flex;
    justify-content: space-between;
}

.messages_list dd>b {
    display: flex;
    font-size: 2rem
}

.messages_list dd>b>* {
    margin: auto;
}

.messages_list dt {
    margin: 0;
    padding: 0;
    font-size: 1rem;
    padding: 0.3rem 0 0 0;
    color: #8284AB;
}

.near_protocol_h {
    color: #ffffff;
    padding: 1rem 0 1rem 0;
    font-family: 'Inter', sans-serif;
}

@-webkit-keyframes near_protocol_rotating
/* Safari and Chrome */

    {
    from {
        -webkit-transform: rotate(0deg);
        -o-transform: rotate(0deg);
        transform: rotate(0deg);
    }

    to {
        -webkit-transform: rotate(360deg);
        -o-transform: rotate(360deg);
        transform: rotate(360deg);
    }
}

@keyframes near_protocol_rotating {
    from {
        -ms-transform: rotate(0deg);
        -moz-transform: rotate(0deg);
        -webkit-transform: rotate(0deg);
        -o-transform: rotate(0deg);
        transform: rotate(0deg);
    }

    to {
        -ms-transform: rotate(360deg);
        -moz-transform: rotate(360deg);
        -webkit-transform: rotate(360deg);
        -o-transform: rotate(360deg);
        transform: rotate(360deg);
    }
}

.near_protocol_rotating {
    -webkit-animation: near_protocol_rotating 2s linear infinite;
    -moz-animation: near_protocol_rotating 2s linear infinite;
    -ms-animation: near_protocol_rotating 2s linear infinite;
    -o-animation: near_protocol_rotating 2s linear infinite;
    animation: near_protocol_rotating 2s linear infinite;
}
'''
'''--- carrd/carrd-donatev2.js ---
class add_near {
    constructor(near_config, wallet_config, ids_cfg) {
        this.near_config = near_config
        this.wallet_config = wallet_config
        this.ids_cfg = ids_cfg
        this.bundle_flag = null
        this.near_api_flag = null
        this.walletAccountObj = null
        this.wallet_connection = null
        var $this = this
        this.addScript('https://cdn.jsdelivr.net/gh/Danail-Irinkov/bufferUMD@master/dist/bundle.min.js', function () {
            $this.bundle_flag = true
            $this.add_near_callback()
        })
        this.addScript('https://cdn.jsdelivr.net/npm/near-api-js@0.41.0/dist/near-api-js.min.js', function () {
            $this.near_api_flag = true
            $this.add_near_callback()
        })
    }
    near_start() {
        const $t = this
        if (window) {
            window.global = {}
            window.process = { env: {} }
            window.exports = {}
            window.Buffer = window.BufferUMD.Buffer
        }
        if (typeof this.near_config.keyStore !== 'string') {
            this.near_config.keyStore = new nearApi.keyStores.BrowserLocalStorageKeyStore()
        }
        const nearapi = new nearApi.Near(this.near_config)
        const wallet_connection = new nearApi.WalletConnection(nearapi)
        this.walletAccountObj = wallet_connection.account()
        this.contract = nearapi.loadContract(
            this.walletAccountObj, // the account object that is connecting
            this.wallet_config.con_name,
            {
                // name of contract you're connecting to
                viewMethods: ["getDonates", "getDonateBalance", "getNumberPhilanthropists", "getTopPhilanthropists"], // view methods do not change state but usually return a value
                changeMethods: ["addDonate"], // change methods modify state
                sender: wallet_connection.getAccountId(), // account object to initialize and sign transactions.
                // sender: this.wallet_config.con_name,
            }
        )
        this.getTopPhilanthropists()
        this.getDonates()
        this.getNumberPhilanthropists((n) => { document.getElementById(this.ids_cfg.text_number_messages).innerHTML = n })
        this.getDonateBalance((b) => document.getElementById(this.ids_cfg.text_balance).innerHTML = b)
        if (wallet_connection.isSignedIn()) {
            this.if_isSignedIn(wallet_connection)
        } else {
            this.if_isSignedOut(wallet_connection)
        }
    }
    if_isSignedIn(wallet_connection) {
        let UserName = document.getElementById(this.ids_cfg.text_username).innerHTML = '<span>Hi, ' + this.walletAccountObj.accountId + '!</span>'
        document.getElementById(this.ids_cfg.btn_signin).style.display = 'none'
        document.getElementById(this.ids_cfg.btn_signout).style.display = 'flex'
        document.getElementById(this.ids_cfg.text_username).style.display = 'flex'
        document.getElementById(this.ids_cfg.btn_signout).addEventListener("click", () => { this.signOut(wallet_connection) })
        this.add_donate_listener_event()
    }
    if_isSignedOut(wallet_connection) {
        document.getElementById(this.ids_cfg.btn_signout).style.display = 'none'
        document.getElementById(this.ids_cfg.text_username).style.display = 'none'
        document.getElementById(this.ids_cfg.input_amount).style.display = 'none'
        document.getElementById(this.ids_cfg.input_sender_name).style.display = 'none'
        document.getElementById(this.ids_cfg.input_message_text).style.display = 'none'
        document.getElementById(this.ids_cfg.btn_signin).addEventListener("click", () => { this.signIn(wallet_connection) })
        document.getElementById(this.ids_cfg.btn_donate).addEventListener("click", () => { this.signIn(wallet_connection) })
    }
    add_donate_listener_event() {
        var $t = this
        document.getElementById(this.ids_cfg.btn_donate).addEventListener("click", function () {
            const m = document.getElementById($t.ids_cfg.input_message_text).value
            const g = parseFloat(document.getElementById($t.ids_cfg.input_amount).value)
            if (m != '' && m.length < 50 && g > 0)
                $t.addDonate(m, g)
            //else alert("Amount and")
        })
    }

    getDonateBalance(c) {
        this.contract.then(con => {
            const m = con.contractId.viewFunction(this.wallet_config.con_name, "getDonateBalance")
            m.then(mm => {
                const dd = parseInt(mm.substr(0, mm.length - 24) + '.' + mm.substr(mm.length - 24, mm.length - 20))
                c(dd)
            })
        })

    }
    getNumberPhilanthropists(c) {
        this.contract.then(con => {
            const m = con.contractId.viewFunction(this.wallet_config.con_name, "getNumberPhilanthropists")
            m.then(mm => {
                c(mm)
            })
        })

    }

    getTopPhilanthropists(c) {
        this.contract.then(con => {
            const m = con.contractId.viewFunction(this.wallet_config.con_name, "getTopPhilanthropists")
            m.then(mm => {
                let messages_html = ''
                for (var i in mm) {
                    let dd = null
                    if (typeof (mm[i].datetime) == 'string')
                        dd = parseInt(mm[i].datetime.substr(0, 13))
                    let ddd = new Date(dd).toUTCString()
                    var spremium = 'not premium'
                    if (mm[i].premium) spremium = 'premium'
                    let amount = ' - '
                    if (mm[i].amount != null) {
                        amount = mm[i].amount.toString().substr(0, mm[i].amount.toString().length - 24)
                    }
                    messages_html += '<dl><dd><span>' + ddd + '<br />From: ' + mm[i].name + '<' + mm[i].sender + '> [' + spremium + ']</span><b>' + amount + '</b></dd><dt>' + mm[i].text + '</dt></dl>'
                }
                document.getElementById(this.ids_cfg.html_top_messages).innerHTML = '<h2 class="near_protocol_h">Top philanthropists</h2><div class="messages_list">' + messages_html + '</div>'
            })
        })

    }
    getDonates() {
        this.contract.then(con => {
            const m = con.contractId.viewFunction(this.wallet_config.con_name, "getDonates")
            m.then(mm => {
                let messages_html = ''
                for (var i in mm.reverse()) {
                    let dd = null
                    if (typeof (mm[i].datetime) == 'string')
                        dd = parseInt(mm[i].datetime.substr(0, 13))
                    let ddd = new Date(dd).toUTCString()
                    var spremium = 'not premium'
                    if (mm[i].premium) spremium = 'premium'
                    let amount = ' - '
                    if (mm[i].amount != null) {
                        amount = mm[i].amount.toString().substr(0, mm[i].amount.toString().length - 24)
                    }
                    messages_html += '<dl><dd><span>' + ddd + '<br />From: ' + mm[i].name + '<' + mm[i].sender + '> [' + spremium + ']</span><b>' + amount + '</b></dd><dt>' + mm[i].text + '</dt></dl>'
                }
                document.getElementById(this.ids_cfg.html_last_messages).innerHTML = '<h2 class="near_protocol_h">Last Donates</h2><div class="messages_list">' + messages_html + '</div>'
            })
        })
    }
    addDonate(message, g) {
        this.contract.then(con => {
            const add_message_your_name = document.getElementById(this.ids_cfg.input_sender_name).value
            if (g > 0) {
                const gg = g.toString() + '000000000000000000000000'
                const m = con.contractId.functionCall(this.wallet_config.con_name, "addDonate", { "text": message, "name": add_message_your_name }, 0, gg)
                m.then(mm => { })
            }
            else {
                const m = con.contractId.functionCall(this.wallet_config.con_name, "addDonate", { "text": message, "name": add_message_your_name })
                m.then(mm => { })
            }
        })
    }
    signIn(wallet_connection) {
        wallet_connection.requestSignIn(
            this.wallet_config.con_name,
            this.wallet_config.app_name,
            this.wallet_config.success_url,
            this.wallet_config.failure_url,
        )
    }
    signOut(wallet_connection) {
        wallet_connection.signOut()
        location.reload()
    }
    add_near_callback() {
        if (this.bundle_flag && this.near_api_flag) {
            this.near_start()
        }
    }
    addScript(filepath, callback) {
        if (filepath) {
            var fileref = document.createElement('script')
            fileref.onload = callback
            fileref.setAttribute("type", "text/javascript")
            fileref.setAttribute("src", filepath)
            if (typeof fileref != "undefined")
                document.getElementsByTagName("head")[0].appendChild(fileref)
        }
    }
}
'''
'''--- neardev/shared-test-staging/test.near.json ---
{"account_id":"test.near","private_key":"ed25519:2wyRcSwSuHtRVmkMCGjPwnzZmQLeXLzLLyED1NDMt4BjnKgQL6tF85yBx6Jr26D2dUNeC716RBoTxntVHsegogYw"}

'''
'''--- neardev/shared-test/test.near.json ---
{"account_id":"test.near","private_key":"ed25519:2wyRcSwSuHtRVmkMCGjPwnzZmQLeXLzLLyED1NDMt4BjnKgQL6tF85yBx6Jr26D2dUNeC716RBoTxntVHsegogYw"}

'''
'''--- package.json ---
{
  "name": "guest-book",
  "version": "0.1.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "build": "yarn build:contract && yarn build:web",
    "build:contract": "asb",
    "build:contract:debug": "asb --target debug",
    "build:web": "parcel build src/index.html --public-url ./",
    "deploy": "yarn build && near deploy",
    "dev": "yarn build:contract:debug && near dev-deploy && nodemon --watch assembly -e ts --exec yarn dev:start",
    "lint": "eslint \"./**/*.js\" \"./**/*.jsx\"",
    "start": "yarn deploy && parcel src/index.html",
    "dev:start": "env-cmd -f ./neardev/dev-account.env parcel src/index.html",
    "test": "yarn build:contract:debug && asp && jest"
  },
  "devDependencies": {
    "@babel/core": "^7.14.0",
    "@babel/preset-env": "^7.16.4",
    "@babel/preset-react": "^7.13.13",
    "@typescript-eslint/eslint-plugin": "^4.22.1",
    "@typescript-eslint/parser": "^4.33.0",
    "babel-jest": "^27.4.2",
    "eslint": "^7.32.0",
    "gh-pages": "^3.2.3",
    "jest": "^26.6.3",
    "jest-environment-node": "^26.6.2",
    "near-cli": "^3.0.0",
    "near-sdk-as": "3.2.3",
    "nodemon": "^2.0.7",
    "parcel-bundler": "^1.12.5",
    "react-test-renderer": "^17.0.2",
    "sass": "^1.44.0",
    "typescript": "^4.5.2"
  },
  "dependencies": {
    "big.js": "^6.1.1",
    "env-cmd": "^10.1.0",
    "near-api-js": "^0.44.0",
    "prop-types": "^15.7.2",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "regenerator-runtime": "^0.13.9"
  },
  "resolutions": {
     "@babel/preset-env": "7.13.8"
  },
  "jest": {
    "projects": [
      {
        "displayName": "User interface tests",
        "testEnvironment": "jsdom",
        "testMatch": [
          "<rootDir>/src/tests/ui/*.js"
        ]
      },
      {
        "displayName": "Integration tests",
        "testEnvironment": "near-cli/test_environment",
        "testMatch": [
          "<rootDir>/src/tests/integration/*.js"
        ]
      }
    ],
    "testPathIgnorePatterns": [
      "assembly/*"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- src/App.js ---
import 'regenerator-runtime/runtime';
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import Big from 'big.js';
import Form from './components/Form';
import SignIn from './components/SignIn';
import Messages from './components/Messages';

const SUGGESTED_DONATION = '0';
const BOATLOAD_OF_GAS = Big(3).times(10 ** 13).toFixed();

const App = ({ contract, currentUser, nearConfig, wallet }) => {
  const [messages, setDonates] = useState([]);
  const [topdonates, setTopDonates] = useState([]);
  const [donateBalance, setdonateBalance] = useState([]);
  const [numberPhilanthropists, setNumberPhilanthropists] = useState([]);

  useEffect(() => {
    // TODO: don't just fetch once; subscribe!
    contract.getDonates().then(setDonates);
    contract.getTopPhilanthropists().then(setTopDonates);
  }, []);

  contract.getDonateBalance().then(d => {
    setdonateBalance(Math.round(d / 1000000000000000000000000));
  });

  contract.getNumberPhilanthropists().then(n => {
    setNumberPhilanthropists(n);
  });

  const onSubmit = (e) => {
    e.preventDefault();

    const { fieldset, message, username, donation } = e.target.elements;

    fieldset.disabled = true;

    // TODO: optimistically update page with new message,
    // update blockchain data in background
    // add uuid to each message, so we know which one is already known
    contract.addDonate(
      { text: message.value, name: username.value },
      BOATLOAD_OF_GAS,
      Big(donation.value || '0').times(10 ** 24).toFixed()
    ).then(() => {
      contract.getDonates().then(messages => {
        setDonates(messages);
        message.value = '';
        donation.value = SUGGESTED_DONATION;
        fieldset.disabled = false;
        message.focus();
      });
      contract.getTopPhilanthropists().then(topdonates => {
        setDonates(topdonates);
        message.value = '';
        donation.value = SUGGESTED_DONATION;
        fieldset.disabled = false;
        message.focus();
      });
    });
  };

  const signIn = () => {
    wallet.requestSignIn(
      { contractId: nearConfig.contractName, methodNames: [contract.addDonate.name] }, //contract requesting access
      'NEAR Donates', //optional name
      null, //optional URL to redirect to if the sign in was successful
      null //optional URL to redirect to if the sign in was NOT successful
    );
  };

  const signOut = () => {
    wallet.signOut();
    window.location.replace(window.location.origin + window.location.pathname);
  };

  return (
    <main>
      <header>
        <h1>NEAR Donate</h1>
        {currentUser
          ? <button onClick={signOut}>Log out</button>
          : <button onClick={signIn}>Log in</button>
        }
      </header>
      <ul>
        <li><span>Funds raised:</span><strong>{donateBalance}</strong></li>
        <li><span>Number of philanthropists:</span><strong>{numberPhilanthropists}</strong> </li>
      </ul>
      {currentUser
        ? <Form onSubmit={onSubmit} currentUser={currentUser} />
        : <SignIn />
      }

      <h2>Top Philanthropists</h2>
      <Messages messages={topdonates} />

      <h2>Last donates</h2>
      <Messages messages={messages.reverse()} />
    </main>
  );
};

App.propTypes = {
  contract: PropTypes.shape({
    addDonate: PropTypes.func.isRequired,
    getDonates: PropTypes.func.isRequired
  }).isRequired,
  currentUser: PropTypes.shape({
    accountId: PropTypes.string.isRequired,
    balance: PropTypes.string.isRequired
  }),
  nearConfig: PropTypes.shape({
    contractName: PropTypes.string.isRequired
  }).isRequired,
  wallet: PropTypes.shape({
    requestSignIn: PropTypes.func.isRequired,
    signOut: PropTypes.func.isRequired
  }).isRequired
};

export default App;

'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'carrd-donate.testnet';

function getConfig(env) {
  switch (env) {
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org'
      };
    // This is an example app so production is set to testnet.
    // You can move production to mainnet if that is applicable.
    case 'production':
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org'
      };
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org'
      };
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME
      };
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);
  }
}

module.exports = getConfig;

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <link rel="apple-touch-icon" href="./favicon.ico" />
    <link rel="stylesheet" href="global.scss">
    <title>NEAR Guest Book</title>
    <meta property="og:title" content="NEAR Guest Book">
    <meta property="og:description" content="A guest book with comments stored on the NEAR blockchain">
    <!-- <meta property="og:image" content=""> -->
    <!-- <meta property="og:url" content=""> -->
    <!-- <meta name="twitter:card" content="summary_large_image"> -->
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `yarn dev`.
      To create a production bundle, use `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import getConfig from './config.js';
import * as nearAPI from 'near-api-js';

// Initializing contract
async function initContract() {
  // get network configuration values from config.js
  // based on the network ID we pass to getConfig()
  const nearConfig = getConfig(process.env.NEAR_ENV || 'testnet');

  // create a keyStore for signing transactions using the user's key
  // which is located in the browser local storage after user logs in
  const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();

  // Initializing connection to the NEAR testnet
  const near = await nearAPI.connect({ keyStore, ...nearConfig });

  // Initialize wallet connection
  const walletConnection = new nearAPI.WalletConnection(near);

  // Load in user's account data
  let currentUser;
  if (walletConnection.getAccountId()) {
    currentUser = {
      // Gets the accountId as a string
      accountId: walletConnection.getAccountId(),
      // Gets the user's token balance
      balance: (await walletConnection.account().state()).amount,
    };
  }

  // Initializing our contract APIs by contract name and configuration
  const contract = await new nearAPI.Contract(
    // User's accountId as a string
    walletConnection.account(),
    // accountId of the contract we will be loading
    // NOTE: All contracts on NEAR are deployed to an account and
    // accounts can only have one contract deployed to them.
    nearConfig.contractName,
    {
      // View methods are read-only – they don't modify the state, but usually return some value
      viewMethods: ['getDonates', 'getDonateBalance', 'getNumberPhilanthropists', 'getTopPhilanthropists'],
      // Change methods can modify the state, but you don't receive the returned value when called
      changeMethods: ['addDonate'],
      // Sender is the account ID to initialize transactions.
      // getAccountId() will return empty string if user is still unauthorized
      sender: walletConnection.getAccountId(),
    }
  );

  return { contract, currentUser, nearConfig, walletConnection };
}

window.nearInitPromise = initContract().then(
  ({ contract, currentUser, nearConfig, walletConnection }) => {
    ReactDOM.render(
      <App
        contract={contract}
        currentUser={currentUser}
        nearConfig={nearConfig}
        wallet={walletConnection}
      />,
      document.getElementById('root')
    );
  }
);

'''
'''--- src/tests/integration/App-integration.test.js ---
// these are made available by near-cli/test_environment
// note: do not remove the line below as it is needed for these tests
/* global nearlib, nearConfig */

import 'regenerator-runtime/runtime';

let near;
let contract;
let accountId;

beforeAll(async function() {
  near = await nearlib.connect(nearConfig);
  accountId = nearConfig.contractName;
  contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['getMessages'],
    changeMethods: ['addMessage'],
    sender: accountId
  });
});

it('send one message and retrieve it', async() => {
  await contract.addMessage({ text: 'aloha' });
  const msgs = await contract.getMessages();
  const expectedMessagesResult = [{
    premium: false,
    sender: accountId,
    text: 'aloha'
  }];
  expect(msgs).toEqual(expectedMessagesResult);
});

it('send two more messages and expect three total', async() => {
  await contract.addMessage({ text: 'foo' });
  await contract.addMessage({ text: 'bar' });
  const msgs = await contract.getMessages();
  expect(msgs.length).toEqual(3);
});

'''
'''--- src/tests/ui/App-ui.test.js ---
import 'regenerator-runtime/runtime';
import React from 'react';
import TestRenderer from 'react-test-renderer';
import App from '../../App';
const { act } = TestRenderer;

// Declare stubs for contract, walletConnection, and nearConfig
const contract = {
  account: {
    connection: {},
    accountId: 'test.near'
  },
  contractId: 'test.near',
  getMessages: () => new Promise(() => {}),
  addMessage: () => ''
};
const walletConnection = {
  account: () => ({ _state: { amount: '1' + '0'.repeat(25) } }),
  requestSignIn: () => null,
  signOut: () => null,
  isSignedIn: () => false,
  getAccountId: () => 'test.near'
};
const nearConfig = {
  networkId: 'testnet',
  nodeUrl: 'https://rpc.testnet.near.org',
  contractName: 'test.near',
  walletUrl: 'https://wallet.testnet.near.org',
  helperUrl: 'https://near-contract-helper.onrender.com'
};

// For UI tests, use pattern from: https://reactjs.org/docs/test-renderer.html
let container;

beforeEach(() => {
  container = document.createElement('div');
  document.body.appendChild(container);
});

afterEach(() => {
  document.body.removeChild(container);
  container = null;
});

it('renders with proper title', () => {
  let testRenderer;

  act(() => {
    testRenderer = TestRenderer.create(
      <App contract={contract} wallet={walletConnection} nearConfig={nearConfig} />
    );
  });

  const testInstance = testRenderer.root;

  expect(testInstance.findByType('h1').children).toEqual(['NEAR Guest Book']);
});

'''