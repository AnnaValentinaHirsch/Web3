*GitHub Repository "Moonlet/wallet-app"*

'''--- .detoxrc.json ---
{
    "test-runner": "jest",
    "configurations": {
        "ios.beta": {
            "binaryPath": "ios/build/Build/Products/Debug-iphonesimulator/Moonlet_beta.app",
            "build": "xcodebuild -workspace ios/Moonlet.xcworkspace -scheme Moonlet_beta -configuration Debug -sdk iphonesimulator -derivedDataPath ios/build",
            "type": "ios.simulator",
            "device": {
                "type": "iPhone 11"
            }
        },
        "android.emu.beta": {
            "binaryPath": "android/app/build/outputs/apk/beta/debug/app-beta-debug.apk",
            "build": "cd android && ./gradlew assembleBetaDebug assembleBetaDebugAndroidTest -DtestBuildType=debug && cd ..",
            "type": "android.emulator",
            "device": {
                "avdName": "Pixel_2_API_29"
            }
        },
        "android.device.beta": {
            "binaryPath": "android/app/build/outputs/apk/beta/debug/app-beta-debug.apk",
            "build": "cd android && ./gradlew assembleDebug assembleAndroidTest -DtestBuildType=debug && cd ..",
            "type": "android.attached",
            "name": "e19072bd"
        }
    }
}

'''
'''--- .github/workflows/dev.yml ---
on:
  push:
    branches:
      - master

env:
  MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
  FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  KEYCHAIN_TOKEN: ${{ secrets.KEYCHAIN_TOKEN }}
  APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
  APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}

name: Beta build & deploy
jobs:
  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup nodejs
        uses: actions/setup-node@v3
        with:
          node-version: "14.x"

      - name: Create version tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |-
          BUILD=$(git rev-list --count $GITHUB_SHA)
          VERSION=$(node -e "p=require('./package.json');console.log(p.version)")
          TAG_NAME="v${VERSION}.${BUILD}"
          curl --request POST \
               --url https://api.github.com/repos/moonlet/wallet-app/git/refs \
               --header "authorization: token $GITHUB_TOKEN" \
               --header "content-type: application/json" \
               --data "{\"ref\": \"refs/tags/$TAG_NAME\",\"sha\": \"$GITHUB_SHA\"}"

      - name: Cache node modules
        uses: actions/cache@v2
        id: cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('yarn.lock', 'package.json') }}

      - name: Yarn install
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn

      - name: Generate icons
        run: yarn run generate-icons

      - name: Generate firebase web config file
        run: |
          echo '${{ secrets.FB_CONFIG_WEB_BETA }}' > src/config/firebase-web-beta.ts
          echo '${{ secrets.FB_CONFIG_WEB_DEPLOY }}' > src/config/firebase-web-release.ts

      - name: Run unit tests
        run: yarn test

      - name: Upload coverage to Codecov
        env:
          CODECOV_TOKEN: ${{secrets.CODECOV_TOKEN}}
        run: |-
          curl -s https://codecov.io/bash | bash -s -- \
          -F "unittests" \
          -Z || echo 'Codecov upload failed'

      - name: Sentry release setup
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: moonlet
        run: |-
          BUILD=$(git rev-list --count $GITHUB_SHA)
          VERSION=$(node -e "p=require('./package.json');console.log(p.version)")

          npx sentry-cli releases new "com.moonlet.beta@$VERSION+$BUILD" -p wallet-app-android -p wallet-app-ios -p wallet-extension -p beta-app-android -p beta-app-ios -p beta-extension
          npx sentry-cli releases set-commits "com.moonlet.beta@$VERSION+$BUILD" --auto

  beta-android:
    name: Android app
    runs-on: ubuntu-latest
    # needs: unit-tests
    steps:
      - name: Install Java 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: adopt
          architecture: x64

      - name: Increase watchers
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup nodejs
        uses: actions/setup-node@v1
        with:
          node-version: "14.x"

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: "2.7"

      - name: Generate firebase config file
        run: |
          echo '${{ secrets.FB_CONFIG_ANDROID_BETA }}' > android/app/google-services.json
          echo '${{ secrets.FB_CONFIG_WEB_BETA }}' > src/config/firebase-web-beta.ts
          echo '${{ secrets.FB_CONFIG_WEB_DEPLOY }}' > src/config/firebase-web-release.ts

      - name: Setup key
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_CERTS }}

      - name: Add to host
        run: ssh-keyscan gitlab.com >> ~/.ssh/known_hosts

      - name: Dependencies install
        run: cd android && bundle install

      - name: Cache node modules
        uses: actions/cache@v2
        id: cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('yarn.lock', 'package.json') }}
          # key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Yarn install
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn

      - name: Get sign ssh-keys
        run: cd android/app && git clone git@gitlab.com:moonlet/moonlet-playstore-key.git

      - name: Generate fonts and icons
        run: yarn run generate-icons

      - name: Run fastlane beta
        run: cd android/fastlane && bundle exec fastlane beta
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          APPCENTER_TOKEN: ${{ secrets.APPCENTER_TOKEN }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          NODE_OPTIONS: --max_old_space_size=4096
          NODE_ENV: production

  beta-ios:
    name: iOS app
    runs-on: macos-latest
    # needs: unit-tests
    steps:
      - name: Setup xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup nodejs
        uses: actions/setup-node@v3
        with:
          node-version: "14.x"

      - name: Setup key
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_CERTS }}

      - name: Add to host
        run: ssh-keyscan gitlab.com >> ~/.ssh/known_hosts

      - name: Generate firebase config file
        run: |
          echo '${{ secrets.FB_CONFIG_IOS_BETA }}' > ios/GoogleService-Info.plist
          echo '${{ secrets.FB_CONFIG_WEB_BETA }}' > src/config/firebase-web-beta.ts
          echo '${{ secrets.FB_CONFIG_WEB_DEPLOY }}' > src/config/firebase-web-release.ts

      - name: Generate p8 File
        run: |
          echo '${{ secrets.APPSTORE_CONNECT_FILE_KEY }}' > ios/AuthKey.p8

      - name: Dependencies install
        run: cd ios && bundle install

      - name: Cache node modules
        uses: actions/cache@v2
        id: cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-modules-${{ hashFiles('yarn.lock', 'package.json') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn

      - name: Cocoapods install
        run: cd ios && pod install

      - name: Generate fonts and icons
        run: yarn run generate-icons

      - name: Run fastlane beta
        run: cd ios/fastlane && bundle exec fastlane beta
        env:
          NODE_ENV: production

'''
'''--- .github/workflows/pull-request.yml ---
name: PR Checks

on: [pull_request]

jobs:
  build:
    name: Run checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-node@v1
      with:
        node-version: "14.x"
    - name: Install xvfb
      run: sudo apt install xvfb
    - uses: actions/checkout@v1
    - name: Cache node modules
      uses: actions/cache@v1
      id: cache
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
    - name: NPM install
      run: npm i
    - name: Run Lint
      run: npm run lint
    - name: Generate Icon
      run: npm run generate-icons
    - name: Generate firebase web config file
      run: |
        echo '${{ secrets.FB_CONFIG_WEB_BETA }}' > src/config/firebase-web-beta.ts
        echo '${{ secrets.FB_CONFIG_WEB_DEPLOY }}' > src/config/firebase-web-release.ts
    - name: Run Type checker
      run: npx tsc --noEmit

'''
'''--- .github/workflows/release.yml ---
on:
  release:
    types:
      - published

env:
  MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
  FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  KEYCHAIN_TOKEN: ${{ secrets.KEYCHAIN_TOKEN }}
  APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
  APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}

name: Release build & deploy
jobs:
  deploy-android:
    name: Android app
    runs-on: ubuntu-latest
    steps:
      - name: Increase watchers
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup nodejs
        uses: actions/setup-node@v3
        with:
          node-version: "14.x"

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: "2.7"

      - name: Generate firebase config files
        run: |
          echo '${{ secrets.FB_CONFIG_ANDROID_DEPLOY }}' > android/app/google-services.json
          echo '${{ secrets.FB_CONFIG_WEB_BETA }}' > src/config/firebase-web-beta.ts
          echo '${{ secrets.FB_CONFIG_WEB_DEPLOY }}' > src/config/firebase-web-release.ts

      - name: Setup key
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_CERTS }}

      - name: Add to host
        run: ssh-keyscan gitlab.com >> ~/.ssh/known_hosts

      - name: Dependencies install
        run: cd android && bundle install

      - name: Cache node modules
        uses: actions/cache@v2
        id: cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('yarn.lock', 'package.json') }}

      - name: Yarn install
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn

      - name: Get sign ssh-keys
        run: cd android/app && git clone git@gitlab.com:moonlet/moonlet-playstore-key.git

      - name: Generate fonts and icons
        run: yarn run generate-icons

      - name: Run fastlane deploy
        run: cd android/fastlane && bundle exec fastlane deploy
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          APPCENTER_TOKEN: ${{ secrets.APPCENTER_TOKEN }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          NODE_OPTIONS: --max_old_space_size=4096
      # generate apk file and upload it to release

  deploy-ios:
    name: iOS app
    runs-on: macos-latest
    steps:
      - name: Setup xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup nodejs
        uses: actions/setup-node@v3
        with:
          node-version: "14.x"

      - name: Setup key
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_CERTS }}

      - name: Add to host
        run: ssh-keyscan gitlab.com >> ~/.ssh/known_hosts

      - name: Generate firebase config files
        run: |
          echo '${{ secrets.FB_CONFIG_IOS_DEPLOY }}' > ios/release/GoogleService-Info.plist
          echo '${{ secrets.FB_CONFIG_WEB_BETA }}' > src/config/firebase-web-beta.ts
          echo '${{ secrets.FB_CONFIG_WEB_DEPLOY }}' > src/config/firebase-web-release.ts

      - name: Generate p8 File
        run: |
          echo '${{ secrets.APPSTORE_CONNECT_FILE_KEY }}' > ios/AuthKey.p8

      - name: Dependencies install
        run: cd ios && bundle install

      - name: Cache node modules
        uses: actions/cache@v2
        id: cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('yarn.lock', 'package.json') }}

      - name: Yarn install
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn

      - name: Cocoapods install
        run: cd ios && pod install

      - name: Generate fonts and icons
        run: yarn run generate-icons

      - name: Run fastlane deploy
        run: cd ios/fastlane && bundle exec fastlane deploy

'''
'''--- .github/workflows/test.yml ---
name: Admin Deployment

# Controls when the workflow will run
on:
  workflow_dispatch:

env:
  MATCH_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}

jobs:
  build:
    name: test
    runs-on: ubuntu-latest

    steps:
      - run: |
          echo "TEST"
          echo "MATCH_PASSWORD=$MATCH_PASSWORD" > asd.env

      - name: Save as artifact
        uses: actions/upload-artifact@v3
        with:
          name: asd.env
          path: asd.env

'''
'''--- .mergify.yml ---
pull_request_rules:
  - name: Automatic merge on approval
    conditions:
      - "#approved-reviews-by>=2"
      - status-success=security/snyk - android/app/build.gradle (Moonlet)
      - status-success=security/snyk - android/build.gradle (Moonlet)
      - status-success=security/snyk - package.json (Moonlet)
      - status-success=Run checks
    actions:
      merge:
        method: squash
        strict: smart
        strict_method: merge

'''
'''--- .prettierrc.yml ---
printWidth: 100
singleQuote: true
tabWidth: 4
parser: typescript

overrides:
  - files: "*.scss"
    options:
      parser: scss
  - files: "*.json"
    options:
      parser: json
'''
'''--- CHANGELOG.md ---
# Change Log

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](http://keepachangelog.com/)
and this project adheres to [Semantic Versioning](http://semver.org/).

## [Unreleased]

### Added

- Some cool images to better showcase the app features

- Automatic Deployment
- The CHANGELOG to keep track of release notes

[unreleased]: https://github.com/Moonlet/wallet-app/compare/v1.0.0...HEAD

'''
'''--- README.md ---
# Moonlet Wallet

## iOS Certificates

If iOS certificates have expired, go to https://gitlab.com/moonlet/moonlet-ios-certificates and delete all all `certs` and `profiles`. Also go to Apple Developer Portal, then `Profiles` and delete both `match AppStore` files.

Then go to `ios` and run `fastlane match appstore`.

If you are on a new device, you need to find the secret for `MATCH_PASSWORD`.

# Project Setup

## Windows

Once you've cloned the repo locally on your machine, open a command line/power shell in that folder and run ```yarn``` or ```npm install``` to install the packages for the app.

Next up you need to set the environment variables for Android on your local machine, you can find the instructions on how to do that [here](https://levelup.gitconnected.com/android-react-native-window-setup-how-to-setup-android-environment-for-react-native-app-588aaa13c3a6).

For starting the project you'll need to have an emulator running locally ( e.g. Android Studio ). Once the emulator is running execute ```npm run android``` or ```yarn android``` in a command line.

If you're getting the following error:

```
The syntax of the command is incorrect
error Command failed with exit code 1.
```
Follow these instructions:

* Install Git on your local machine
* Run GitBash inside the project folder
* Run ```which bash```, you should get something like: ```/usr/bin/bash```
* After that run ```npm config set script-shell /usr/bin/bash```
* Run ```npm run android``` or ```yarn android```

You should be able to run the project without getting an error. 

'''
'''--- android/app/src/androidTest/java/com/moonlet/DetoxTest.java ---
package com.moonlet;

import com.wix.detox.Detox;

import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;

import androidx.test.ext.junit.runners.AndroidJUnit4;
import androidx.test.filters.LargeTest;
import androidx.test.rule.ActivityTestRule;

@RunWith(AndroidJUnit4.class)
@LargeTest
public class DetoxTest {

    @Rule
    public ActivityTestRule<MainActivity> mActivityRule = new ActivityTestRule<>(MainActivity.class, false, false);

    @Test
    public void runDetoxTests() {
        Detox.DetoxIdlePolicyConfig idlePolicyConfig = new Detox.DetoxIdlePolicyConfig();
        idlePolicyConfig.masterTimeoutSec = 60;
        idlePolicyConfig.idleResourceTimeoutSec = 30;

        Detox.runTests(mActivityRule, idlePolicyConfig);
    }
}

'''
'''--- android/app/src/beta/AndroidManifest.xml ---
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
  package="com.moonlet" xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.CAMERA" />
    <uses-permission android:name="android.permission.BLUETOOTH"/>
    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>
    <uses-permission-sdk-23 android:name="android.permission.ACCESS_FINE_LOCATION"/>
    <uses-feature android:name="android.hardware.bluetooth_le" android:required="true"/>
    <uses-sdk android:minSdkVersion="24" android:targetSdkVersion="30" tools:overrideLibrary="com.ledgerwallet.hid"/>

    <application
      android:name=".MainApplication"
      android:label="@string/app_name"
      android:icon="@mipmap/ic_launcher"
      android:roundIcon="@mipmap/ic_launcher_round"
      android:allowBackup="false"
      android:usesCleartextTraffic="true"
      android:theme="@style/AppTheme">

      <meta-data
        android:name="com.google.firebase.messaging.default_notification_icon"
        android:resource="@mipmap/icon"
        tools:replace="android:resource" />
      <meta-data
        android:name="com.google.firebase.messaging.default_notification_color"
        android:resource="@color/notification_icon_color"
        tools:replace="android:resource" />

      <activity
        android:name=".MainActivity"
        android:label="@string/app_name"
        android:configChanges="keyboard|keyboardHidden|orientation|screenSize"
        android:screenOrientation="portrait"
        android:windowSoftInputMode="adjustPan"
        android:exported="true">
        <intent-filter>
            <action android:name="android.intent.action.MAIN" />
            <category android:name="android.intent.category.LAUNCHER" />
        </intent-filter>

        <intent-filter>
            <action android:name="android.intent.action.VIEW" />
            <category android:name="android.intent.category.DEFAULT" />
            <category android:name="android.intent.category.BROWSABLE" />
            <data android:scheme="https" android:host="fire.moonlet.dev" />
        </intent-filter>
      </activity>
      <activity android:name="com.facebook.react.devsupport.DevSettingsActivity" />
    </application>

</manifest>

'''
'''--- android/app/src/beta/res/layout/overlay.xml ---
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/overlay"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/background"
    tools:context=".MainActivity">

    <ImageView
        android:id="@+id/imageView3"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:layout_marginStart="80dp"
        android:layout_marginLeft="80dp"
        android:layout_marginTop="100dp"
        android:layout_marginEnd="80dp"
        android:layout_marginRight="80dp"
        android:layout_marginBottom="100dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:srcCompat="@drawable/moonlet_space" />
</androidx.constraintlayout.widget.ConstraintLayout>
'''
'''--- android/app/src/beta/res/mipmap-anydpi-v26/ic_launcher.xml ---
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@mipmap/ic_launcher_background"/>
    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
</adaptive-icon>
'''
'''--- android/app/src/beta/res/mipmap-anydpi-v26/ic_launcher_round.xml ---
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@mipmap/ic_launcher_background"/>
    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
</adaptive-icon>
'''
'''--- android/app/src/beta/res/values/colors.xml ---
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="background">#121212</color>
    <color name="notification_icon_color">#FFAB91</color>
</resources>

'''
'''--- android/app/src/beta/res/values/strings.xml ---
<resources>
    <string name="app_name">Moonlet Beta</string>
</resources>

'''
'''--- android/app/src/debug/AndroidManifest.xml ---
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>
    

    <application android:usesCleartextTraffic="true" tools:targetApi="30" tools:ignore="GoogleAppIndexingWarning" />
</manifest>

'''
'''--- android/app/src/main/AndroidManifest.xml ---
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
  package="com.moonlet" xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.CAMERA" />
    <uses-permission android:name="android.permission.USE_FINGERPRINT"/>
    <uses-permission android:name="android.permission.BLUETOOTH"/>
    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>
    <uses-permission-sdk-23 android:name="android.permission.ACCESS_FINE_LOCATION"/>
    <uses-feature android:name="android.hardware.bluetooth_le" android:required="true"/>
    <uses-sdk android:minSdkVersion="24" android:targetSdkVersion="30" tools:overrideLibrary="com.ledgerwallet.hid"/>

    <application
      android:name=".MainApplication"
      android:label="@string/app_name"
      android:icon="@mipmap/ic_launcher"
      android:roundIcon="@mipmap/ic_launcher_round"
      android:allowBackup="false"
      android:theme="@style/AppTheme">

      <meta-data
        android:name="com.google.firebase.messaging.default_notification_icon"
        android:resource="@mipmap/icon"
        tools:replace="android:resource" />
      <meta-data
        android:name="com.google.firebase.messaging.default_notification_color"
        android:resource="@color/notification_icon_color"
        tools:replace="android:resource" />

      <activity
        android:name=".MainActivity"
        android:label="@string/app_name"
        android:configChanges="keyboard|keyboardHidden|orientation|screenSize"
        android:screenOrientation="portrait"
        android:launchMode="singleTop"
        android:windowSoftInputMode="adjustPan"
        android:exported="true">
        <intent-filter>
            <action android:name="android.intent.action.MAIN" />
            <category android:name="android.intent.category.LAUNCHER" />
        </intent-filter>

        <intent-filter>
            <action android:name="android.intent.action.VIEW" />
            <category android:name="android.intent.category.DEFAULT" />
            <category android:name="android.intent.category.BROWSABLE" />
            <data android:scheme="https" android:host="wallet.moonlet.app" />
        </intent-filter>
      </activity>
      <activity android:name="com.facebook.react.devsupport.DevSettingsActivity" />
    </application>

</manifest>

'''
'''--- android/app/src/main/java/com/moonlet/CustomPreventScreenshotPackage.java ---
package com.moonlet;

import com.facebook.react.ReactPackage;
import com.facebook.react.bridge.NativeModule;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.uimanager.ViewManager;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class CustomPreventScreenshotPackage implements ReactPackage {

    @Override
    public List<ViewManager> createViewManagers(ReactApplicationContext reactContext) {
        return Collections.emptyList();
    }

    @Override
    public List<NativeModule> createNativeModules(ReactApplicationContext reactContext) {
        return Arrays.<NativeModule>asList(new PreventScreenshotModule(reactContext));
    }
}
'''
'''--- android/app/src/main/java/com/moonlet/MainActivity.java ---
package com.moonlet;

import com.facebook.react.ReactActivity;
import com.facebook.react.ReactActivityDelegate;
import com.facebook.react.ReactRootView;
import com.swmansion.gesturehandler.react.RNGestureHandlerEnabledRootView;
import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;
import androidx.constraintlayout.widget.ConstraintLayout;

public class MainActivity extends ReactActivity {

  /**
   * Returns the name of the main component registered from JavaScript. This is
   * used to schedule rendering of the component.
   */
  @Override
  protected String getMainComponentName() {
    return "Moonlet";
  }

  @Override
  protected ReactActivityDelegate createReactActivityDelegate() {
    return new ReactActivityDelegate(this, getMainComponentName()) {
      @Override
      protected ReactRootView createRootView() {
        return new RNGestureHandlerEnabledRootView(MainActivity.this);
      }
    };
  }

  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    // this.antidebug();
  }

  @Override
  protected void onPause() {
    super.onPause();

    try {
      View rootLayout = getWindow().getDecorView();
      View.inflate(this, R.layout.overlay, (ViewGroup) rootLayout);
    } catch (Exception e) {
      // just making sure this will not cause an app crash
    }

  }

  @Override
  protected void onResume() {
    super.onResume();
    try {
      ViewGroup rootLayout = (ViewGroup) getWindow().getDecorView();
      ConstraintLayout bgElement = findViewById(R.id.overlay);
      rootLayout.removeView(bgElement);
    } catch (Exception e) {
      // just making sure this will not cause an app crash
    }
  }

  // static {
  // System.loadLibrary("anti-debug");
  // }

  // public native void antidebug();
}

'''
'''--- android/app/src/main/java/com/moonlet/MainApplication.java ---
package com.moonlet;

import androidx.multidex.MultiDexApplication;
import android.content.Context;
import com.facebook.react.PackageList;
import com.facebook.react.ReactApplication;
import com.facebook.react.ReactNativeHost;
import com.facebook.react.ReactPackage;
import com.facebook.soloader.SoLoader;

import java.lang.reflect.InvocationTargetException;
import java.util.List;

public class MainApplication extends MultiDexApplication implements ReactApplication {

  private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {
    @Override
    public boolean getUseDeveloperSupport() {
      return BuildConfig.DEBUG;
    }

    @Override
    protected List<ReactPackage> getPackages() {
      @SuppressWarnings("UnnecessaryLocalVariable")
      List<ReactPackage> packages = new PackageList(this).getPackages();
      // Packages that cannot be autolinked yet can be added manually here, for
      // example:

      packages.add(new CustomPreventScreenshotPackage());

      return packages;
    }

    @Override
    protected String getJSMainModuleName() {
      return "index";
    }
  };

  @Override
  public ReactNativeHost getReactNativeHost() {
    return mReactNativeHost;
  }

  @Override
  public void onCreate() {
    super.onCreate();

    SoLoader.init(this, /* native exopackage */ false);
    initializeFlipper(this); // Remove this line if you don't want Flipper enabled
  }

  /**
   * Loads Flipper in React Native templates.
   *
   * @param context
   */
  private static void initializeFlipper(Context context) {
    if (BuildConfig.DEBUG) {
      try {
        /*
         * We use reflection here to pick up the class that initializes Flipper, since
         * Flipper library is not available in release mode
         */
        Class<?> aClass = Class.forName("com.facebook.flipper.ReactNativeFlipper");
        aClass.getMethod("initializeFlipper", Context.class).invoke(null, context);
      } catch (ClassNotFoundException e) {
        e.printStackTrace();
      } catch (NoSuchMethodException e) {
        e.printStackTrace();
      } catch (IllegalAccessException e) {
        e.printStackTrace();
      } catch (InvocationTargetException e) {
        e.printStackTrace();
      }
    }
  }
}

'''
'''--- android/app/src/main/java/com/moonlet/PreventScreenshotModule.java ---
package com.moonlet;

import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.Promise;

import android.view.WindowManager;

import static com.facebook.react.bridge.UiThreadUtil.runOnUiThread;

public class PreventScreenshotModule extends ReactContextBaseJavaModule {
    private static final String PREVENT_SCREENSHOT_ERROR_CODE = "PREVENT_SCREENSHOT_ERROR_CODE";
    private final ReactApplicationContext reactContext;

    PreventScreenshotModule(ReactApplicationContext context) {
        super(context);
        reactContext = context;
    }

    @Override
    public String getName() {
        return "PreventScreenshotModule";
    }

    @ReactMethod
    public void forbid(Promise promise) {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                try {
                    getCurrentActivity().getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE);
                    promise.resolve("Done. Screenshot taking locked.");
                } catch(Exception e) {
                    promise.reject(PREVENT_SCREENSHOT_ERROR_CODE, "Forbid screenshot taking failure.");
                }
            }
        });
    }

    @ReactMethod
    public void allow(Promise promise) {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                try {
                    getCurrentActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_SECURE);
                    promise.resolve("Done. Screenshot taking unlocked.");
                } catch (Exception e) {
                    promise.reject(PREVENT_SCREENSHOT_ERROR_CODE, "Allow screenshot taking failure.");
                }
            }
        });
    }
}
'''
'''--- android/app/src/main/res/layout/overlay.xml ---
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/overlay"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/background"
    tools:context=".MainActivity">

    <ImageView
        android:id="@+id/imageView3"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:layout_marginStart="80dp"
        android:layout_marginLeft="80dp"
        android:layout_marginTop="100dp"
        android:layout_marginEnd="80dp"
        android:layout_marginRight="80dp"
        android:layout_marginBottom="100dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:srcCompat="@drawable/moonlet_space" />
</androidx.constraintlayout.widget.ConstraintLayout>
'''
'''--- android/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml ---
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@mipmap/ic_launcher_background"/>
    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
</adaptive-icon>
'''
'''--- android/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml ---
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@mipmap/ic_launcher_background"/>
    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
</adaptive-icon>
'''
'''--- android/app/src/main/res/values/colors.xml ---
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="background">#121212</color>
    <color name="notification_icon_color">#00DAFF</color>
</resources>

'''
'''--- android/app/src/main/res/values/ic_launcher_background.xml ---
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="ic_launcher_background">#121212</color>
</resources>
'''
'''--- android/app/src/main/res/values/strings.xml ---
<resources>
    <string name="app_name">Moonlet</string>
</resources>

'''
'''--- android/app/src/main/res/values/styles.xml ---
<resources>

    <!-- Base application theme. -->
    <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">
        <!-- Customize your theme here. -->
        <item name="android:textColor">#000000</item>
        <item name="android:colorBackground">@color/background</item>
        <item name="android:windowBackground">@color/background</item>
        <item name="android:statusBarColor">@color/background</item>
        <item name="android:colorPrimaryDark">@color/background</item>
    </style>

</resources>

'''
'''--- android/fastlane/README.md ---
fastlane documentation
================
# Installation

Make sure you have the latest version of the Xcode command line tools installed:

```
xcode-select --install
```

Install _fastlane_ using
```
[sudo] gem install fastlane -NV
```
or alternatively using `brew cask install fastlane`

# Available Actions
## Android
### android beta
```
fastlane android beta
```
Submit a new Beta Build to AppCenter
### android deploy
```
fastlane android deploy
```

----

This README.md is auto-generated and will be re-generated every time [fastlane](https://fastlane.tools) is run.
More information about fastlane can be found on [fastlane.tools](https://fastlane.tools).
The documentation of fastlane can be found on [docs.fastlane.tools](https://docs.fastlane.tools).

'''
'''--- android/fastlane/metadata/android/en-US/full_description.txt ---
Moonlet is a cryptocurrency wallet that allows you to store easily and secure all your different crypto assets.
 
-- BLOCKCHAIN AGNOSTIC --
Currently we support Zilliqa (ZIL), Singapore Dollar (XSGD), Ethereum (ETH) and many other ERC20 tokens, but more and more crypto assets are coming soon. 

-- EASY TO USE --
You can send crypto assets to anyone in the world from the convenience of your mobile phone or laptop. Moonlet is simply to use and put users first.
 
-- NON-CUSTODIAL --
Moonlet is a non-custodial wallet. It gives you full control over your funds, therefore it is much safer and secure, all transactions happen directly on the blockchain. 
 
-- HANDSHAKE LOGIN --
This is a feature within Moonlet that helps you to use your wallet as a gateway to blockchain apps. You are always in control when interacting on the new decentralised web since you’ll have to use your smartphone to sign any transaction.
 
-- TRANSACTION NOTIFICATIONS --
You don’t need to control and check transactions manually. With Moonlet, you’ll get notified immediately when you send or receive funds. As well you’ll be able to check all transaction states in the transaction history.
 
-- HARDWARE WALLET --
In case you want to use one more security standard, you can simply use your hardware wallet. Moonlet integrates with Ledger, for both Nano S and Nano X models.
 
-- SECURED ENVIRONMENT  --
Moonlet is proactively looking to identify and improve the security of its features and assets by employing provider’s services in terms of grey box penetration testing & vulnerability assessment, code review.
 
-- CONTINUOUS SUPPORT --
Crypto can be confusing. We do know that. That’s why you can reach us easily through the app. We’re here to help you.
'''
'''--- android/fastlane/metadata/android/en-US/short_description.txt ---
Moonlet, a portal to the decentralised world
'''
'''--- android/fastlane/metadata/android/en-US/title.txt ---
Moonlet
'''
'''--- android/gradlew.bat ---
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      http://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto init

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto init

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:init
@rem Get command-line arguments, handling Windows variants

if not "%OS%" == "Windows_NT" goto win9xME_args

:win9xME_args
@rem Slurp the command line arguments.
set CMD_LINE_ARGS=
set _SKIP=2

:win9xME_args_slurp
if "x%~1" == "x" goto execute

set CMD_LINE_ARGS=%*

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar

@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega

'''
'''--- app.json ---
{
    "name": "Moonlet",
    "displayName": "Moonlet"
}

'''
'''--- babel.config.js ---
module.exports = {
    presets: ['module:metro-react-native-babel-preset'],
    plugins: [
        [
            'inline-dotenv',
            {
                unsafe: true,
                systemVar: 'overwrite'
            }
        ],
        [
            '@babel/plugin-proposal-decorators',
            {
                legacy: true
            }
        ]
    ],
    env: {
        test: {
            plugins: ['dynamic-import-node']
        }
    }
};

'''
'''--- codecov.yml ---
coverage:
  range: "0...100"

  status:
    project:
      default:
        target: 0%
    patch:
      default:
        target: 0%
    changes:
      default:
        target: 0%

'''
'''--- docs/SECURITY AUDITS.md ---
# Security Audits

We are proactively looking to identify and improve the security of Moonlet by employing services in terms of grey box penetration testing & vulnerability assessment, as well code review. Check our last security audit report below:

| Date | SECURITY AUDITS |
| ------ | ------ |
| 15.04.2020 | [EXECUTIVE SUMMARY for PENETRATION TESTING of Mobile Applications & Chrome Extension for Moonlet](https://drive.google.com/file/d/1q_EwcF0Jcz-TMvvkDObRaeveqP9sKjJK/view?usp=sharing) |

'''
'''--- docs/docs.md ---
# Documentation

## Screen component
```ts
import React from 'react';
import { smartConnect } from './core/utils/smart-connect';
import { connect } from 'react-redux';
import { withTheme, IThemeProps } from './core/theme/with-theme';
import styleProvider from './screens/account/styles'
import { withNavigationParams, INavigationProps } from './navigation/withNavigation';

// props that need to be sent on navigation as params
interface INavigationParams {
    navParam: string
}

// redux props
interface IReduxProps {
    prop: string
}

export class ScreenComponent extends React.Component<INavigationProps<INavigationParams> & IThemeProps<ReturnType<typeof styleProvider>> & IReduxProps> {
    constructor(props: INavigationProps<INavigationParams> & IThemeProps<ReturnType<typeof styleProvider>> & IReduxProps) {
        super(props);
    }

    render() {
        return null;
    }
}

export const Screen = smartConnect(ScreenComponent, [
    connect((state) => state, {}),
    withTheme(() => {}),
    withNavigationParams()
])
```

## Component
```ts
import React from 'react';
import { smartConnect } from './core/utils/smart-connect';
import { connect } from 'react-redux';
import { withTheme, IThemeProps } from './core/theme/with-theme';
import styleProvider from './screens/account/styles'
import { withNavigationParams, INavigationProps } from './navigation/withNavigation';

// props that need to be passed when using a component
interface IExternalProps {
    externalProps: string
}

// redux props
interface IReduxProps {
    state: string
}

export class ExampleComponent extends React.Component<IExternalProps & IThemeProps<ReturnType<typeof styleProvider>> & IReduxProps> {
    constructor(props: IExternalProps & IThemeProps<ReturnType<typeof styleProvider>> & IReduxProps) {
        super(props);
    }

    render() {
        return null;
    }
}

export const Example = smartConnect<IExternalProps>(ScreenComponent, [
    connect((state) => state, {}),
    withTheme(() => {}),
    withNavigationParams()
])
```

## HOC
--TBD--

# TODO: 
- how we name private methods inside classes (with _ prefix ?)
- function binds (@bind Decorator ?)

'''
'''--- e2e/config.json ---
{
    "setupFilesAfterEnv": ["./init.js"],
    "testEnvironment": "node",
    "reporters": ["detox/runners/jest/streamlineReporter"],
    "verbose": true
}

'''
'''--- e2e/init.js ---
const detox = require('detox');
const adapter = require('detox/runners/jest/adapter');
const specReporter = require('detox/runners/jest/specReporter');

// Set the default timeout
jest.setTimeout(120000);

jasmine.getEnv().addReporter(adapter);

// This takes care of generating status logs on a per-spec basis. By default, jest only reports at file-level.
// This is strictly optional.
jasmine.getEnv().addReporter(specReporter);

beforeAll(async () => {
    await detox.init({}, { launchApp: false });
    await device.launchApp({ newInstance: true, permissions: { notifications: 'YES' } });
}, 300000);

beforeEach(async () => {
    try {
        await adapter.beforeEach();
    } catch (err) {
        // Workaround for the 'jest-jasmine' runner (default one): if 'beforeAll' hook above fails with a timeout,
        // unfortunately, 'jest' might continue running other hooks and test suites. To prevent that behavior,
        // adapter.beforeEach() will throw if detox.init() is still running; that allows us to run detox.cleanup()
        // in that emergency case and disable calling 'device', 'element', 'expect', 'by' and other Detox globals.
        // If you switch to 'jest-circus' runner, you can omit this try-catch workaround at all.

        await detox.cleanup();
        throw err;
    }
});

afterAll(async () => {
    await adapter.afterAll();
    await detox.cleanup();
});

'''
'''--- e2e/tests/common/functions.ts ---
import * as utils from '../../utils/detox-utils';

/**
 * Add Token
 * @param contractAddress
 */
export const addToken = async (contractAddress: string) => {
    await utils.tapElementById('dashboard-menu-icon');

    // Manage Account Screen
    await utils.tapElementById('manage-account');
    await utils.tapElementById('add-icon');

    // Manage Token Screen
    await utils.typeTextElementById('search-input', contractAddress);
    await utils.tapElementByLabel('Find');
    await utils.tapElementById('found-token');
    await utils.tapElementByLabel('Save');

    await utils.tapBackButton();
};

'''
'''--- e2e/tests/common/tests.ts ---
import * as utils from '../../utils/detox-utils';

/**
 * Generate Wallet
 */
export const generateWalletTest = () => {
    describe('Generate wallet ', () => {
        it('generate', async () => {
            // Onboarding Screen
            await utils.expectElementVisible('onboarding-screen');
            await utils.tapElementById('generate-button');

            // Legal
            await utils.expectElementVisible('legal-modal');
            await utils.expectElementVisible('legal-accept-button');
            await utils.tapElementById('legal-accept-button');

            // Dashboard Screen
            await utils.expectDashboardScreenVisible();
        });
    });
};

/**
 * Activate Test Net
 */
export const activateTestNetTest = () => {
    describe('Activate Test Net', () => {
        it('activate testnet', async () => {
            await utils.tapElementByLabel('Settings');

            // Settings Screen
            await utils.tapElementById('Mainnet/Testnet');

            // Network Options Screen
            await utils.tapElementById('toggle-testnet');

            // Go back => Settings Screen
            await utils.tapBackButton();

            // Dashboard Screen
            await utils.tapElementByLabel('Dashboard');

            await utils.expectElementVisible('testnet-badge');
        });
    });
};

/**
 * Activate Main Net
 */
export const activateMainNetTest = () => {
    describe('Activate Main Net', () => {
        it('activate mainnet', async () => {
            await utils.tapElementByLabel('Settings');

            // Settings Screen
            await utils.tapElementById('Mainnet/Testnet');

            // Network Options Screen
            await utils.tapElementById('toggle-testnet');

            // Go back => Settings Screen
            await utils.tapBackButton();

            // Dashboard Screen
            await utils.tapElementByLabel('Dashboard');

            await utils.expectElementNotVisible('testnet-badge');
        });
    });
};

'''
'''--- e2e/tests/general/account-manage.spec.ts ---
import * as utils from '../../utils/detox-utils';
import { generateWalletTest } from '../common/tests';

/**
 * Account Manage
 */
describe('Account Manage', () => {
    /**
     * Generate wallet
     */
    generateWalletTest();

    describe('Zilliqa Account Manage', () => {
        it('Account 1', async () => {
            // Dashboard Screen
            await utils.expectElementVisible('zilliqa-account-1');
        });

        it('Account 2', async () => {
            await selectAccount('zilliqa', 'account-2');
        });

        it('Account 3', async () => {
            await selectAccount('zilliqa', 'account-3');
        });

        it('Account 4', async () => {
            await selectAccount('zilliqa', 'account-4');
        });

        it('Account 5', async () => {
            await selectAccount('zilliqa', 'account-5');
        });
    });

    describe('Ethereum Account Manage', () => {
        it('Account 1', async () => {
            // Dashboard Screen
            await utils.tapElementByLabel('ETH');
            await utils.expectElementVisible('ethereum-account-1');
        });

        it('Account 2', async () => {
            await selectAccount('ethereum', 'account-2');
        });

        it('Account 3', async () => {
            await selectAccount('ethereum', 'account-3');
        });

        it('Account 4', async () => {
            await selectAccount('ethereum', 'account-4');
        });

        it('Account 5', async () => {
            await selectAccount('ethereum', 'account-5');
        });
    });
});

const selectAccount = async (blockchain: string, accountName: string) => {
    const accountTestId = blockchain + '-' + accountName;

    // Dashboard Screen
    await utils.tapElementById('coin-balance-card');

    // Accounts Bottom Sheet
    await utils.expectElementVisible(`card-${blockchain}-account-1`);
    await utils.expectElementVisible(`card-${blockchain}-account-2`);
    await utils.expectElementVisible(`card-${blockchain}-account-3`);
    await utils.expectElementVisible(`card-${blockchain}-account-4`);
    await utils.expectElementVisible(`card-${blockchain}-account-5`);

    await utils.tapElementById(`card-${accountTestId}`);

    // Dashboard Screen
    await utils.expectElementVisible(accountTestId);
};

'''
'''--- e2e/tests/general/currency-switch.spec.ts ---
import * as utils from '../../utils/detox-utils';
import { generateWalletTest } from '../common/tests';

/**
 * Currency Switch
 */
describe('Currency Switch', () => {
    /**
     * Generate wallet
     */
    generateWalletTest();

    describe('Currency Switch', () => {
        beforeEach(async () => {
            await utils.realoadRNAndEnterPin(utils.PIN_CODE_GENERATE_WALLET);

            // Dashboard Screen
            await utils.expectDashboardScreenVisible();
        });

        /**
         * USD - default
         */
        it('USD', async () => {
            // Dashboard Screen
            // Account Amount Converted - Currency
            await utils.expectElementVisible('USD');
        });

        /**
         * EUR
         */
        it('EUR', async () => {
            await changeCurrencyTest('EUR');
        });

        /**
         * GBP
         */
        it('GBP', async () => {
            await changeCurrencyTest('GBP');
        });

        /**
         * USDT
         */
        it('USDT', async () => {
            await changeCurrencyTest('USDT');
        });

        /**
         * DAI
         */
        it('DAI', async () => {
            await changeCurrencyTest('DAI');
        });
    });
});

/**
 * Change currency test
 * @param currency
 */
const changeCurrencyTest = async (currency: string) => {
    // Dashboard Screen
    await navToDefaultCurrencyScreen();

    // Default Currency Screen
    await utils.tapElementById(currency);

    await navBackToDashboard();

    // Dashboard Screen
    // Account Amount Converted - Currency
    await utils.expectElementVisible(currency);
};

/**
 * Navigate from Dashboard screen to Default Currency Screen
 */
const navToDefaultCurrencyScreen = async () => {
    await utils.expectDashboardScreenVisible();

    // Dashboard Screen
    await utils.tapElementByLabel('Settings');

    // Settings Screen
    await utils.tapElementById('Default currency');
};

/**
 * Navigate back from Default Currency Screen to Dashboard Screen
 */
const navBackToDashboard = async () => {
    // Go back => Settings Screen
    await utils.tapBackButton();

    // Dashboard Screen
    await utils.tapElementByLabel('Dashboard');

    await utils.expectDashboardScreenVisible();
};

'''
'''--- e2e/tests/general/general.spec.ts ---
import { generateWalletTest } from '../send/common';
import { networkSwitchTest } from './network-switch';
import { walletManagementTest } from './wallet-manage';

describe('General', () => {
    /**
     * Generate wallet
     */
    generateWalletTest();

    /**
     * Network Switch
     */
    networkSwitchTest();

    /**
     * Wallet management
     */
    walletManagementTest();
});

'''
'''--- e2e/tests/general/network-switch.spec.ts ---
import * as utils from '../../utils/detox-utils';
import { generateWalletTest } from '../common/tests';

/**
 * Network Switch
 */
describe('Network Switch', () => {
    /**
     * Generate wallet
     */
    generateWalletTest();

    describe('Network Switch', () => {
        beforeEach(async () => {
            await utils.realoadRNAndEnterPin(utils.PIN_CODE_GENERATE_WALLET);

            // Dashboard Screen
            await utils.expectDashboardScreenVisible();
        });

        it('Network switch', async () => {
            // Dashboard Screen
            // Zilliqa Mainnet active
            await utils.expectElementNotVisible('testnet-badge');
        });

        /**
         * Zilliqa Dev Testnet
         */
        it('Zilliqa Dev Testnet', async () => {
            // Dashboard Screen
            await navToNetworkOptionsScreen();

            // Network Options Screen
            await utils.tapElementById('toggle-testnet');

            // Dashboard
            await navBackToDashboard();

            await utils.expectElementByLabelVisible('You are on Zilliqa Dev Testnet');
        });

        /**
         * Zilliqa Kaya Local Testnet
         */
        it('Zilliqa Kaya Local Testnet', async () => {
            // Dashboard Screen
            await navToNetworkOptionsScreen();

            // Network Options Screen
            await utils.tapElementById('zilliqa');

            // Zilliqa Screen
            await utils.tapElementByLabel('Kaya Local');
            await utils.deviceGoBack('network-selection-screen'); // experimental

            // Dashboard
            await navBackToDashboard();

            await utils.expectElementByLabelVisible('You are on Zilliqa Kaya Local Testnet');
        });

        /**
         * Ethereum Rinbeky Testnet
         */
        it('Ethereum Rinbeky Testnet', async () => {
            await utils.tapElementByLabel('ETH');

            await utils.expectElementByLabelVisible('You are on Ethereum Rinkeby Testnet');
        });

        /**
         * Ethereum Ropsten Testnet
         */
        it('Ethereum Ropsten Testnet', async () => {
            // Dashboard Screen
            await navToNetworkOptionsScreen();

            // Network Options Screen
            await utils.tapElementById('ethereum');

            // Ethereum Screen
            await utils.tapElementByLabel('Ropsten');
            await utils.deviceGoBack('network-selection-screen'); // experimental

            // Dashboard
            await navBackToDashboard();

            await utils.expectElementByLabelVisible('You are on Ethereum Ropsten Testnet');
        });

        /**
         * Ethereum Mainnet
         */
        it('Ethereum Mainnet', async () => {
            // Dashboard Screen
            await navToNetworkOptionsScreen();

            // Network Options Screen
            await utils.tapElementById('toggle-testnet');

            // Dashboard
            await navBackToDashboard();

            await utils.expectElementNotVisible('testnet-badge');
        });
    });
});

/**
 * Navigate from Dashboard screen to Network Options Screen
 */
const navToNetworkOptionsScreen = async () => {
    await utils.expectDashboardScreenVisible();

    // Dashboard Screen
    await utils.tapElementByLabel('Settings');

    // Settings Screen
    await utils.tapElementById('Mainnet/Testnet');
};

/**
 * Navigate back from Network Options Screen to Dashboard Screen
 */
const navBackToDashboard = async () => {
    // Go back => Settings Screen
    await utils.tapBackButton();

    // Dashboard Screen
    await utils.tapElementByLabel('Dashboard');

    await utils.expectDashboardScreenVisible();
};

'''
'''--- e2e/tests/general/network-switch.ts ---
import * as utils from '../../utils/utils';

/**
 * Network Switch
 */
export const networkSwitchTest = () => {
    describe('Network Switch', () => {
        beforeEach(async () => {
            await utils.realoadRNAndEnterPin(utils.PIN_CODE_GENERATE_WALLET);

            // Dashboard Screen
            await utils.expectDashboardScreenVisible();
        });

        it('Network switch', async () => {
            // Dashboard Screen
            // Zilliqa Mainnet active
            await utils.expectElementNotVisible('testnet-badge');
        });

        /**
         * Zilliqa Dev Testnet
         */
        it('Zilliqa Dev Testnet', async () => {
            // Network Options Screen
            await navToNetworkOptionsScreen();

            // Network Options Screen
            await utils.tapElementById('toggle-testnet');

            // Dashboard
            await navBackToDashboard();

            await utils.expectElementByLabelVisible('You are on Zilliqa Dev Testnet');
        });

        /**
         * Zilliqa Kaya Local Testnet
         */
        it('Zilliqa Kaya Local Testnet', async () => {
            // Network Options Screen
            await navToNetworkOptionsScreen();

            // Network Options Screen
            await utils.tapElementById('zilliqa');

            // Zilliqa Screen
            await utils.tapElementByLabel('Kaya Local');
            await utils.deviceGoBack('network-selection-screen'); // experimental

            // Dashboard
            await navBackToDashboard();

            await utils.expectElementByLabelVisible('You are on Zilliqa Kaya Local Testnet');
        });

        /**
         * Ethereum Rinbeky Testnet
         */
        it('Ethereum Rinbeky Testnet', async () => {
            await utils.tapElementByLabel('ETH');

            await utils.expectElementByLabelVisible('You are on Ethereum Rinkeby Testnet');
        });

        /**
         * Ethereum Ropsten Testnet
         */
        it('Ethereum Ropsten Testnet', async () => {
            // Network Options Screen
            await navToNetworkOptionsScreen();

            // Network Options Screen
            await utils.tapElementById('ethereum');

            // Ethereum Screen
            await utils.tapElementByLabel('Ropsten');
            await utils.deviceGoBack('network-selection-screen'); // experimental

            // Dashboard
            await navBackToDashboard();

            await utils.expectElementByLabelVisible('You are on Ethereum Ropsten Testnet');
        });

        /**
         * Ethereum Mainnet
         */
        it('Ethereum Mainnet', async () => {
            // Network Options Screen
            await navToNetworkOptionsScreen();

            // Network Options Screen
            await utils.tapElementById('toggle-testnet');

            // Dashboard
            await navBackToDashboard();

            await utils.expectElementNotVisible('testnet-badge');
        });
    });
};

/**
 * Navigate from Dashboard screen to Network Options Screen
 */
const navToNetworkOptionsScreen = async () => {
    await utils.expectDashboardScreenVisible();

    // Dashboard Screen
    await utils.tapElementByLabel('Settings');

    // Settings Screen
    await utils.tapElementById('Mainnet/Testnet');
};

/**
 * Navigate back from Network Options Screen to Dashboard Screen
 */
const navBackToDashboard = async () => {
    // Go back => Settings Screen
    await utils.tapBackButton();

    // Dashboard Screen
    await utils.tapElementByLabel('Dashboard');

    await utils.expectDashboardScreenVisible();
};

'''
'''--- e2e/tests/general/tokens-manage/erc20-tokens.manage.ts ---
import * as utils from '../../../utils/detox-utils';
import { deleteTokenManageScreen } from '../utils';
import { activateTestNetTest } from '../../common/tests';
import { addToken } from '../../common/functions';
import { DAI_TESTNET_CONTRACT_ADDRESS } from '../../../utils/values';

/**
 * ERC20 Tokens Management
 */
export const erc20TokensManagementTest = () => {
    describe('ERC20', () => {
        /**
         * DAI Mainnet
         */
        it('DAI Token - Mainnet', async () => {
            // Dashboard Screen
            await utils.expectDashboardScreenVisible();
            await utils.tapElementByLabel('ETH');
            await utils.expectElementVisible('token-card-dai');
        });

        /**
         * Delete DAI Token - Mainnet
         */
        it('Delete DAI Token - Mainnet', async () => {
            // Dashboard Screen
            await utils.tapElementById('dashboard-menu-icon');

            // Manage Account Screen
            await deleteTokenManageScreen('DAI');
        });

        /**
         * Activate TestNet
         */
        activateTestNetTest();

        /**
         * Add DAI Token - Testnet
         */
        it('Add DAI Token - Testnet', async () => {
            await utils.expectElementNotVisible('token-card-dai');

            // Add DAI - testnet
            await addToken(DAI_TESTNET_CONTRACT_ADDRESS);

            // Dashboard Screen
            await utils.expectDashboardScreenVisible();
            await utils.expectElementVisible('token-card-dai');
        });

        /**
         * Add LINK Token - Testnet
         */
        it('Add LINK Token - Testnet', async () => {
            await utils.expectElementNotVisible('token-card-link');

            // Add LINK - testnet
            await addToken('link');

            // Dashboard Screen
            await utils.expectDashboardScreenVisible();
            await utils.expectElementVisible('token-card-link');
        });

        /**
         * Delete DAI Token - Testnet
         */
        it('Delete DAI Token - Testnet', async () => {
            // Dashboard Screen
            await utils.tapElementById('dashboard-menu-icon');

            // Manage Account Screen
            await deleteTokenManageScreen('DAI');
        });
    });
};

'''
'''--- e2e/tests/general/tokens-manage/tokens-manage.spec.ts ---
import { generateWalletTest, activateMainNetTest } from '../../common/tests';
import { zrc2TokensManagementTest } from './zrc2-tokens-manage';
import { erc20TokensManagementTest } from './erc20-tokens.manage';

describe('ZRC2 & ERC20 - Tokens Manage', () => {
    /**
     * Generate wallet
     */
    generateWalletTest();

    /**
     * ZRC2 Tokens Management
     */
    zrc2TokensManagementTest();

    /**
     * Activate Main Net
     */
    activateMainNetTest();

    /**
     * ERC20 Tokens Management
     */
    erc20TokensManagementTest();

    /**
     * Activate Main Net
     */
    activateMainNetTest();
});

'''
'''--- e2e/tests/general/tokens-manage/zrc2-tokens-manage.ts ---
import * as utils from '../../../utils/detox-utils';
import { deleteTokenManageScreen } from '../utils';
import { activateTestNetTest } from '../../common/tests';
import { addToken } from '../../common/functions';
import { XSGD_TESTNET_CONTRACT_ADDRESS } from '../../../utils/values';

/**
 * ZRC2 Tokens Management
 */
export const zrc2TokensManagementTest = () => {
    describe('ZRC2', () => {
        /**
         * XSGD Mainnet
         */
        it('XSGD Token - Mainnet', async () => {
            // Dashboard Screen
            await utils.expectDashboardScreenVisible();
            await utils.expectElementVisible('token-card-xsgd');
        });

        /**
         * Delete XSGD Token - Mainnet
         */
        it('Delete XSGD Token - Mainnet', async () => {
            // Dashboard Screen
            await utils.tapElementById('dashboard-menu-icon');

            // Manage Account Screen
            await deleteTokenManageScreen('XSGD');
        });

        /**
         * Activate TestNet
         */
        activateTestNetTest();

        /**
         * Add XSGD Token - Testnet
         */
        it('Add XSGD Token - Testnet', async () => {
            await utils.expectElementNotVisible('token-card-xsgd');

            // Add XSGD - testnet
            await addToken(XSGD_TESTNET_CONTRACT_ADDRESS);

            // Dashboard Screen
            await utils.expectDashboardScreenVisible();
            await utils.expectElementVisible('token-card-xsgd');
        });

        /**
         * Delete XSGD Token - Testnet
         */
        it('Delete XSGD Token - Testnet', async () => {
            // Dashboard Screen
            await utils.tapElementById('dashboard-menu-icon');

            // Manage Account Screen
            await deleteTokenManageScreen('XSGD');
        });
    });
};

'''
'''--- e2e/tests/general/utils.ts ---
import * as utils from '../../utils/detox-utils';

/**
 * Delete Token From Token Manage Screen
 * @param token
 */
export const deleteTokenManageScreen = async (token: string) => {
    // Manage Account Screen
    await utils.tapElementById('manage-account');
    await utils.expectElementVisible(token);
    await utils.swipeElementById(token, 'right'); // swipe right
    await utils.tapElementById(`delete-${token.toLocaleLowerCase()}`); // delete
    await utils.expectElementNotVisible(token);
    await utils.tapBackButton();
};

'''
'''--- e2e/tests/general/wallet-manage.ts ---
import * as utils from '../../utils/utils';
import * as customKeyboard from '../../utils/custom-keyboard';
import { delay } from '../../../src/core/utils/time';

/**
 * Wallet management
 */
export const walletManagementTest = () => {
    describe('Wallet management', () => {
        it('wallet management', async () => {
            // Dashboard Screen
            await utils.expectElementByLabelVisible('Wallet 1');
            await utils.tapElementById('dashboard-menu-icon');
            await utils.tapElementById('manage-wallets');

            // Wallets Screen
            await utils.expectElementVisible('wallets-screen');

            // Create another wallet
            await createAnotherWallet();

            // Dashboard Screen
            await utils.expectDashboardScreenVisible();
            await utils.expectElementByLabelVisible('Wallet 2');
            await utils.tapElementById('dashboard-menu-icon');
            await utils.tapElementById('manage-wallets');

            // Wallets Screen
            await utils.expectElementVisible('wallets-screen');
            await utils.expectElementVisible('wallet-1');
            await utils.expectElementVisible('wallet-2');

            // Wallet edit name - TODO: not working <TextInput testID=""/> on our Dialog Component
            // await walletEditName('wallet-1);

            // Delete Wallet 2
            await deleteWallet('wallet-2');

            // Wallets Screen
            await utils.expectElementVisible('wallets-screen');

            // Delete Wallet 1
            await deleteWallet('wallet-1');

            // Onboarding Screen
            await utils.expectElementVisible('onboarding-screen');
        });
    });
};

/**
 * Delete Wallet
 */
const deleteWallet = async (walletKey: string) => {
    // Wait until show hints has finished
    await delay(500);

    // walletKey
    await utils.swipeElementById(walletKey, 'right');
    await utils.tapElementById(`delete-${walletKey}`);
    await utils.tapElementByLabel('OK');
    await customKeyboard.typeWord(utils.PIN_CODE_GENERATE_WALLET);
};

/**
 * Wallet edit name
 */
const walletEditName = async (walletKey: string) => {
    await utils.swipeElementById(walletKey, 'right');
    await utils.tapElementById(`edit-name-${walletKey}`);
    await utils.tapElementByLabel('Edit name');

    // TODO: this is not working
    // testID is not working on RNDialog.Input
    await utils.typeTextElementById('dialog-input', 'Moonlet Wallet');
    await utils.tapElementByLabel('Save');
};

const createAnotherWallet = async () => {
    await utils.tapElementById('create-button');
    await utils.tapElementById('copy-mnemonic');
    await utils.tapBackButton();
    await utils.tapElementById('recover-button');
    await utils.tapElementById('paste-button');
    await customKeyboard.tapConfirmButton();
    await customKeyboard.typeWord(utils.PIN_CODE_GENERATE_WALLET);
};

'''
'''--- e2e/tests/send/blockchain/eth.ts ---
import * as utils from '../../../utils/detox-utils';
import { sendToken } from '../utils';
import { DAI_TESTNET_CONTRACT_ADDRESS } from '../../../utils/values';
import { addToken } from '../../common/functions';

export const sendEthTest = () => {
    describe('Send Ethereum', () => {
        /**
         * ETH Native
         * - testnet
         */
        it('Send ETH Native', async () => {
            // Dashboard Screen
            await utils.expectDashboardScreenVisible();
            await utils.tapElementByLabel('ETH');
            await utils.tapElementById('token-card-eth');

            // Default Token Screen
            await utils.expectElementVisible('default-token-screen');
            await utils.tapElementById('send-button');

            // Send
            await sendToken('0.001');

            // Default Token Screen
            await utils.expectElementVisible('default-token-screen');
            await utils.expectElementVisible('transaction-0');
        });

        /**
         * ETH ERC2
         * - DAI token
         * - testnet
         */
        it('Send ERC2 - DAI token', async () => {
            await utils.realoadRNAndEnterPin(utils.PIN_CODE_GENERATE_WALLET);

            // Dashboard Screen
            await utils.expectDashboardScreenVisible();

            // Add DAI - testnet
            await addToken(DAI_TESTNET_CONTRACT_ADDRESS);

            // Dashboard Screen
            await utils.expectDashboardScreenVisible();
            await utils.tapElementById('token-card-dai');

            // Default Token Screen
            await utils.expectElementVisible('default-token-screen');
            await utils.tapElementById('send-button');

            // Send
            await sendToken('0.001');

            // Default Token Screen
            await utils.expectElementVisible('default-token-screen');
            await utils.expectElementVisible('transaction-0');
        });
    });
};

'''
'''--- e2e/tests/send/blockchain/zil.ts ---
import * as utils from '../../../utils/detox-utils';
import { sendToken } from '../utils';
import { XSGD_TESTNET_CONTRACT_ADDRESS } from '../../../utils/values';
import { addToken } from '../../common/functions';

export const sendZilTest = () => {
    describe('Send Zilliqa', () => {
        /**
         * ZIL Native
         * - testnet
         */
        it('Send Zilliqa Native', async () => {
            await utils.realoadRNAndEnterPin(utils.PIN_CODE_GENERATE_WALLET);

            // Dashboard Screen
            await utils.expectDashboardScreenVisible();
            await utils.tapElementByLabel('ZIL');
            await utils.tapElementById('token-card-zil');

            // Delegate Token Screen
            await utils.expectElementVisible('delegate-token-screen');
            await utils.tapElementByLabel('Send');

            // Send
            await sendToken('0.001');

            // Delegate Token Screen
            await utils.expectElementVisible('delegate-token-screen');
        });

        /**
         * ZIL ZRC2
         * - XSGD token
         * - testnet
         */
        it('Send ZRC2 - XSGD token', async () => {
            await utils.realoadRNAndEnterPin(utils.PIN_CODE_GENERATE_WALLET);

            // Dashboard Screen
            await utils.expectDashboardScreenVisible();

            // Add XSGD - testnet
            await addToken(XSGD_TESTNET_CONTRACT_ADDRESS);

            // Dashboard Screen
            await utils.expectDashboardScreenVisible();
            await utils.tapElementById('token-card-xsgd');

            // Delegate Token Screen
            await utils.expectElementVisible('delegate-token-screen');
            await utils.tapElementByLabel('Send');

            // Send
            await sendToken('0.001');

            // Delegate Token Screen
            await utils.expectElementVisible('delegate-token-screen');
        });
    });
};

'''
'''--- e2e/tests/send/common.ts ---
import * as utils from '../../utils/utils';

/**
 * Generate Wallet
 */
export const generateWalletTest = () => {
    describe('Generate wallet ', () => {
        it('generate', async () => {
            // Onboarding Screen
            await utils.expectElementVisible('onboarding-screen');
            await utils.tapElementById('generate-button');

            // Legal
            await utils.expectElementVisible('legal-modal');
            await utils.expectElementVisible('legal-accept-button');
            await utils.tapElementById('legal-accept-button');

            // Dashboard Screen
            await utils.expectDashboardScreenVisible();
        });
    });
};

/**
 * Activate Test Net
 */
export const activateTestNetTest = () => {
    describe('Activate Test Net', () => {
        it('activate testnet', async () => {
            await utils.tapElementByLabel('Settings');

            // Settings Screen
            await utils.tapElementById('Mainnet/Testnet');

            // Network Options Screen
            await utils.tapElementById('toggle-testnet');

            // Go back => Settings Screen
            await utils.tapBackButton();

            // Dashboard Screen
            await utils.tapElementByLabel('Dashboard');

            await utils.expectElementVisible('testnet-badge');
        });
    });
};

'''
'''--- e2e/tests/send/eth.ts ---
import * as utils from '../../utils/utils';
import { sendToken, addToken } from './utils';

export const sendEthTest = () => {
    describe('Send Ethereum', () => {
        /**
         * ETH Native
         * - testnet
         */
        it('Send ETH Native', async () => {
            // Dashboard Screen
            await utils.expectDashboardScreenVisible();
            await utils.tapElementByLabel('ETH');
            await utils.tapElementById('token-card-eth');

            // Default Token Screen
            await utils.expectElementVisible('default-token-screen');
            await utils.tapElementById('send-button');

            // Send
            await sendToken('0.001');

            // Default Token Screen
            await utils.expectElementVisible('default-token-screen');
            await utils.expectElementVisible('transaction-0');
        });

        /**
         * ETH ERC2
         * - DAI token
         * - testnet
         */
        it('Send ERC2 - DAI token', async () => {
            await utils.realoadRNAndEnterPin(utils.PIN_CODE_GENERATE_WALLET);

            // Dashboard Screen
            await utils.expectDashboardScreenVisible();

            // Add DAI - testnet
            await addToken('0x5592ec0cfb4dbc12d3ab100b257153436a1f0fea');

            // Dashboard Screen
            await utils.expectDashboardScreenVisible();
            await utils.tapElementById('token-card-dai');

            // Default Token Screen
            await utils.expectElementVisible('default-token-screen');
            await utils.tapElementById('send-button');

            // Send
            await sendToken('0.001');

            // Default Token Screen
            await utils.expectElementVisible('default-token-screen');
            await utils.expectElementVisible('transaction-0');
        });
    });
};

'''
'''--- e2e/tests/send/send.spec.ts ---
import { generateWalletTest, activateTestNetTest } from '../common/tests';
import { sendEthTest } from './blockchain/eth';
import { sendZilTest } from './blockchain/zil';

describe('Send', () => {
    // Generate wallet
    generateWalletTest();

    // Activate TestNet
    activateTestNetTest();

    // Send Ethereum
    sendEthTest();

    // Send Zilliqa
    sendZilTest();
});

'''
'''--- e2e/tests/send/utils.ts ---
import * as utils from '../../utils/detox-utils';
import * as customKeyboard from '../../utils/custom-keyboard';

/**
 * Add Token
 * @param contractAddress
 */
export const addToken = async (contractAddress: string) => {
    await utils.tapElementById('dashboard-menu-icon');

    // Manage Account Screen
    await utils.tapElementById('manage-account');
    await utils.tapElementById('add-icon');

    // Manage Token Screen
    await utils.typeTextElementById('search-input', contractAddress);
    await utils.tapElementByLabel('Find');
    await utils.tapElementById('found-token');
    await utils.tapElementByLabel('Save');

    await utils.tapBackButton();
};

/**
 * Send Token
 * @param amount
 */
export const sendToken = async (amount: string) => {
    // Send Screen

    // Select address
    await utils.tapElementById('transfer-between-accounts');
    await utils.tapElementById('account-2');
    await utils.tapElementById('next');

    // Enter amount
    await utils.typeTextElementById('enter-amount', amount);
    await utils.tapElementById('next');

    // Confirm Transaction
    await utils.tapElementById('confirm');

    // Password Pin Screen
    await utils.expectElementVisible('password-pin-screen');
    await customKeyboard.typeWord(utils.PIN_CODE_GENERATE_WALLET); // enter pin code
};

'''
'''--- e2e/tests/send/zil.ts ---
import * as utils from '../../utils/utils';
import { sendToken, addToken } from './utils';

export const sendZilTest = () => {
    describe('Send Zilliqa', () => {
        /**
         * ZIL Native
         * - testnet
         */
        it('Send Zilliqa Native', async () => {
            await utils.realoadRNAndEnterPin(utils.PIN_CODE_GENERATE_WALLET);

            // Dashboard Screen
            await utils.expectDashboardScreenVisible();
            await utils.tapElementByLabel('ZIL');
            await utils.tapElementById('token-card-zil');

            // Delegate Token Screen
            await utils.expectElementVisible('delegate-token-screen');
            await utils.tapElementByLabel('Send');

            // Send
            await sendToken('0.001');

            // Delegate Token Screen
            await utils.expectElementVisible('delegate-token-screen');
        });

        /**
         * ZIL ZRC2
         * - XSGD token
         * - testnet
         */
        it('Send ZRC2 - XSGD token', async () => {
            await utils.realoadRNAndEnterPin(utils.PIN_CODE_GENERATE_WALLET);

            // Dashboard Screen
            await utils.expectDashboardScreenVisible();

            // Add XSGD - testnet
            await addToken('zil1nnwugt0e5cvf2welmyq93q6p6t7zfdjzz7s05u');

            // Dashboard Screen
            await utils.expectDashboardScreenVisible();
            await utils.tapElementById('token-card-xsgd');

            // Delegate Token Screen
            await utils.expectElementVisible('delegate-token-screen');
            await utils.tapElementByLabel('Send');

            // Send
            await sendToken('0.001');

            // Delegate Token Screen
            await utils.expectElementVisible('delegate-token-screen');
        });
    });
};

'''
'''--- e2e/tests/wallet/create-wallet.spec.ts ---
import * as utils from '../../utils/detox-utils';
import * as customKeyboard from '../../utils/custom-keyboard';
import { mnemonicSteps, mnemonicConfirm } from './utils';

describe('Create Wallet', () => {
    /**
     * Create Wallet- Fresh Install
     */
    it('Fresh install', async () => {
        // Onboarding Screen
        await utils.expectElementVisible('onboarding-screen');

        // Create Button
        await utils.expectElementVisible('create-button');
        await utils.tapElementById('create-button');

        // Legal
        await utils.expectElementVisible('legal-modal');
        await utils.expectElementVisible('legal-accept-button');
        await utils.tapElementById('legal-accept-button');

        // Create Wallet Mnemonic Screen
        await mnemonicSteps();

        // Create Wallet Confirm Mnemonic Screen
        await utils.expectElementVisible('create-wallet-confirm-mnemonic');
        await mnemonicConfirm();

        // Password Terms Screen
        await utils.expectElementVisible('password-terms-screen');
        await utils.tapElementById('pass-terms-checkbox');
        await utils.tapElementById('understand-button');

        // Password Pin Screen
        await utils.expectElementVisible('password-pin-screen');
        await customKeyboard.typeWord('123456'); // set pin code
        await customKeyboard.typeWord('123456'); // verify pin code

        // Dashboard Screen
        await utils.expectDashboardScreenVisible();
    });

    /**
     * Create another wallet
     */
    it('Create another wallet', async () => {
        await utils.realoadRNAndEnterPin('123456');

        // Dashboard Screen
        await utils.expectDashboardScreenVisible();
        await utils.tapElementById('dashboard-menu-icon');
        await utils.tapElementById('manage-wallets');

        // Wallets Screen
        await utils.expectElementVisible('wallets-screen');
        await utils.tapElementById('create-button');

        // Create Wallet Mnemonic Screen
        await mnemonicSteps();

        // Create Wallet Confirm Mnemonic Screen
        await utils.expectElementVisible('create-wallet-confirm-mnemonic');
        await mnemonicConfirm();

        // Password Pin Screen
        await utils.expectElementVisible('password-pin-screen');
        await customKeyboard.typeWord('123456'); // enter pin code

        // Dashboard Screen
        await utils.expectDashboardScreenVisible();
    });
});

'''
'''--- e2e/tests/wallet/manage-wallet.spec.ts ---
import * as utils from '../../utils/detox-utils';
import * as customKeyboard from '../../utils/custom-keyboard';
import { delay } from '../../../src/core/utils/time';
import { generateWalletTest } from '../common/tests';

describe('Wallet management', () => {
    /**
     *  Generate wallet
     */
    generateWalletTest();

    it('Wallet management', async () => {
        // Dashboard Screen
        await utils.expectElementByLabelVisible('Wallet 1');
        await utils.tapElementById('wallets-icon');

        // Wallets Screen
        await utils.expectElementVisible('wallets-screen');

        // Create another wallet
        await createAnotherWallet();

        // Dashboard Screen
        await utils.expectDashboardScreenVisible();
        await utils.expectElementByLabelVisible('Wallet 2');
        await utils.tapElementById('wallets-icon');

        // Wallets Screen
        await utils.expectElementVisible('wallets-screen');
        await utils.expectElementVisible('wallet-1');
        await utils.expectElementVisible('wallet-2');

        // Wallet edit name - TODO: not working <TextInput testID=""/> on our Dialog Component
        // await walletEditName('wallet-1);

        // Delete Wallet 2
        await deleteWallet('wallet-2');

        // Wallets Screen
        await utils.expectElementVisible('wallets-screen');

        // Delete Wallet 1
        await deleteWallet('wallet-1');

        // Onboarding Screen
        await utils.expectElementVisible('onboarding-screen');
    });
});

/**
 * Delete Wallet
 */
const deleteWallet = async (walletKey: string) => {
    // Wait until show hints has finished
    await delay(500);

    // walletKey
    await utils.swipeElementById(walletKey, 'right');
    await utils.tapElementById(`delete-${walletKey}`);
    await utils.tapElementByLabel('OK');
    await customKeyboard.typeWord(utils.PIN_CODE_GENERATE_WALLET);
};

/**
 * Wallet edit name
 */
const walletEditName = async (walletKey: string) => {
    await utils.swipeElementById(walletKey, 'right');
    await utils.tapElementById(`edit-name-${walletKey}`);
    await utils.tapElementByLabel('Edit name');

    // TODO: this is not working
    // testID is not working on RNDialog.Input
    await utils.typeTextElementById('dialog-input', 'Moonlet Wallet');
    await utils.tapElementByLabel('Save');
};

const createAnotherWallet = async () => {
    await utils.tapElementById('create-button');
    await utils.tapElementById('copy-mnemonic');
    await utils.tapBackButton();
    await utils.tapElementById('recover-button');
    await utils.tapElementById('paste-button');
    await customKeyboard.tapConfirmButton();
    await customKeyboard.typeWord(utils.PIN_CODE_GENERATE_WALLET);
};

'''
'''--- e2e/tests/wallet/recover-wallet.spec.ts ---
import * as utils from '../../utils/detox-utils';
import * as customKeyboard from '../../utils/custom-keyboard';
import { enterMnemonic } from './utils';

describe('Recover Wallet', () => {
    /**
     * Recover Wallet - Fresh install
     */
    it('Fresh install', async () => {
        // Onboarding Screen
        await utils.expectElementVisible('onboarding-screen');

        // Recover Button
        await utils.expectElementVisible('recover-button');
        await utils.tapElementById('recover-button');

        // Legal
        await utils.expectElementVisible('legal-modal');
        await utils.expectElementVisible('legal-accept-button');
        await utils.tapElementById('legal-accept-button');

        // Recover Screen
        await utils.expectElementVisible('recover-wallet-screen');
        await enterMnemonic();

        // Password Terms Screen
        await utils.expectElementVisible('password-terms-screen');
        await utils.tapElementById('pass-terms-checkbox');
        await utils.tapElementById('understand-button');

        // Password Pin Screen
        await utils.expectElementVisible('password-pin-screen');
        await customKeyboard.typeWord('112266'); // set pin code
        await customKeyboard.typeWord('112266'); // verify pin code

        await utils.expectDashboardScreenVisible();
    });

    /**
     * Recover another wallet
     */
    it('Recover another wallet', async () => {
        await utils.realoadRNAndEnterPin('112266');

        // Dashboard Screen
        await utils.expectDashboardScreenVisible();
        await utils.tapElementById('dashboard-menu-icon');
        await utils.tapElementById('manage-wallets');

        // Wallets Screen
        await utils.expectElementVisible('wallets-screen');
        await utils.tapElementById('recover-button');

        // Recover Screen
        await utils.expectElementVisible('recover-wallet-screen');
        await enterMnemonic();

        // Password Pin Screen
        await utils.expectElementVisible('password-pin-screen');
        await customKeyboard.typeWord('112266'); // enter pin code

        await utils.expectDashboardScreenVisible();
    });
});

'''
'''--- e2e/tests/wallet/utils.ts ---
import * as utils from '../../utils/detox-utils';
import * as customKeyboard from '../../utils/custom-keyboard';

export const mnemonicSteps = async () => {
    // Step 1
    await utils.expectElementVisible('create-wallet-mnemonic-1');

    await utils.tapElementById('checkbox');
    await utils.tapElementById('next-button-1');

    // Step 2
    await utils.expectElementVisible('create-wallet-mnemonic-2');
    await utils.tapElementById('next-button-2');

    // Step 3
    await utils.expectElementVisible('create-wallet-mnemonic-3');
    await utils.tapElementById('next-button-3');
};

export const mnemonicConfirm = async () => {
    // Focus first input
    await customKeyboard.tapNextWordButton();

    // Mnmonic Word 1
    await utils.expectElementVisible('mnemonic-0');
    await customKeyboard.typeWord(await utils.getElementTextById('mnemonic-0'));

    // Mnmonic Word 2
    await utils.expectElementVisible('mnemonic-1');
    await customKeyboard.typeWord(await utils.getElementTextById('mnemonic-1'));

    // Mnmonic Word 3
    await utils.expectElementVisible('mnemonic-2');
    await customKeyboard.typeWord(await utils.getElementTextById('mnemonic-2'));

    // Confirm
    await customKeyboard.tapConfirmButton();
};

export const enterMnemonic = async () => {
    // Focus first word
    await customKeyboard.tapNextWordButton();

    // TODO: store it as secret - decide later on
    const mnemonic12 =
        'author tumble model pretty exile little shoulder frost bridge mistake devote mixed';

    await customKeyboard.typeMnemonic(mnemonic12);

    // Confirm
    await customKeyboard.tapConfirmButton();
};

'''
'''--- e2e/utils/custom-keyboard.ts ---
/**
 * Tap on element by id
 * @param key
 * - we need try catch because our custom keyboard crashes sometimes
 */
export const tapElementById = async (key: string) => {
    try {
        await element(by.id(key)).tap();
    } catch {
        //
    }
};

/**
 * Type a word
 * - by using element tap of each letter
 * - when finished focus the next word // maybe this should be optional
 * @param word
 */
export const typeWord = async (word: string) => {
    const arr = word.split('');

    for (const w of arr) {
        await tapElementById(`key-${w}`);
    }

    // Focus next input
    await tapNextWordButton();
};

/**
 * Type mnemonic
 * @param mnemonic
 */
export const typeMnemonic = async (mnemonic: string) => {
    const arr = mnemonic.split(' ');

    for (const m of arr) {
        await typeWord(m);
    }
};

/**
 * Tap on the <Button /> with id next-word
 */
export const tapNextWordButton = async () => tapElementById('next-word');

/**
 * Tap on the <Button /> with id confirm
 */
export const tapConfirmButton = async () => tapElementById('confirm');

'''
'''--- e2e/utils/detox-utils.ts ---
import { getProps } from 'detox-getprops';
import * as customKeyboard from './custom-keyboard';

/**
 * Tap element by id
 * @param key
 */
export const tapElementById = async (key: string) => element(by.id(key)).tap();

/**
 * Tap element by label
 * @param key
 */
export const tapElementByLabel = async (key: string) => element(by.label(key)).tap();

/**
 * Expect Element By id to have label
 * @param key
 */
export const expectElementVisible = async (key: string) =>
    (expect(element(by.id(key))) as any).toBeVisible();

/**
 * Expect Element Not to be visible
 * @param key
 */
export const expectElementNotVisible = async (key: string) =>
    (expect(element(by.id(key))) as any).toBeNotVisible();

/**
 * Expect Element By label to be visible
 * @param key
 */
export const expectElementByLabelVisible = async (key: string) =>
    (expect(element(by.label(key))) as any).toBeVisible();

/**
 * Expect Element By label to NOT be visible
 * @param key
 */
export const expectElementByLabelNotVisible = async (key: string) =>
    (expect(element(by.label(key))) as any).toBeNotVisible();

/**
 * Expect Element By id to have text
 * @param key
 * @param text
 */
export const expectElementByIdToHaveText = async (key: string, text: string) =>
    (expect(element(by.label(key))) as any).toHaveText(text);

/**
 * Expect Element By id to have label
 * @param key
 * @param label
 */
export const expectElementByIdToHaveLabel = async (key: string, label: string) =>
    (expect(element(by.label(key))) as any).toHaveLabel(label);

/**
 * Get text of a component <Text />
 * @param key
 */
export const getElementTextById = async (key: string) =>
    ((await getProps(element(by.id(key)))) as any).text;

/**
 * Go back to the previous screen by pressing the left-arrow button
 */
export const tapBackButton = async () => element(by.id('go-back')).tap();

/**
 * Go back to the previous screen
 * @param currentScreen
 * - Android: by using the device press back
 * - iOS: swipe right on the current screen
 *
 * Experimental, need to be tested better
 */
export const deviceGoBack = async (currentScreen: string) => {
    try {
        if (device.getPlatform() === 'android') {
            await device.pressBack(); // Android only
        } else {
            await element(by.id(currentScreen)).swipe('right', 'fast', 0.1);
        }
    } catch {
        await tapBackButton();
    }
};

/**
 * Type Text / element by id Type Text - applied on <TextInput /> component
 * @param key
 * @param value the value that is received by <TextInput />
 */
export const typeTextElementById = async (key: string, value: string) =>
    element(by.id(key)).typeText(value);

/**
 * Replace text / element by id Type Text - applied on <TextInput /> component
 * @param key
 * @param value the value that is received by <TextInput />
 */
export const replaceTextElementById = async (key: string, value: string) =>
    element(by.id(key)).replaceText(value);

/**
 * Reload React Native App, Enter Pin Code, Dashboard is displayed
 * @param pin the passcode of Moonlet
 */
export const realoadRNAndEnterPin = async (pin: string) => {
    await device.reloadReactNative();

    // Password Pin Screen
    await customKeyboard.typeWord(pin); // enter pin code
};

/**
 * Expect Dashboard Screen to be visible
 */
export const expectDashboardScreenVisible = async () => expectElementVisible('dashboard-screen');

/**
 * Pin Code for the Generate Wallet
 * Maybe consider this later to be stored in secrets
 */
export const PIN_CODE_GENERATE_WALLET = '000000';

/**
 * Swipe element by id
 * @param key
 * @param direction
 * @param speed - fast/slow - default is fast
 * @param percentage - (optional) screen percentage to swipe; valid input: [0.0, 1.0]
 */
export const swipeElementById = async (
    key: string,
    direction: 'left' | 'right' | 'top' | 'bottom' | 'up' | 'down',
    speed?: 'fast' | 'slow',
    percentage?: number
) => element(by.id(key)).swipe(direction, speed, percentage);

/**
 * Swipe element by label
 * @param key
 * @param direction
 * @param speed - fast/slow - default is fast
 * @param percentage - (optional) screen percentage to swipe; valid input: [0.0, 1.0]
 */
export const swipeElementByLabel = async (
    key: string,
    direction: 'left' | 'right' | 'top' | 'bottom' | 'up' | 'down',
    speed?: 'fast' | 'slow',
    percentage?: number
) => element(by.label(key)).swipe(direction, speed, percentage);

'''
'''--- e2e/utils/utils.ts ---
import { getProps } from 'detox-getprops';
import * as customKeyboard from './custom-keyboard';

/**
 * Tap element by id
 * @param key
 */
export const tapElementById = async (key: string) => element(by.id(key)).tap();

/**
 * Tap element by label
 * @param key
 */
export const tapElementByLabel = async (key: string) => element(by.label(key)).tap();

/**
 * Expect Element By id to have label
 * @param key
 */
export const expectElementVisible = async (key: string) =>
    (expect(element(by.id(key))) as any).toBeVisible();

/**
 * Expect Element Not to be visible
 * @param key
 */

export const expectElementNotVisible = async (key: string) =>
    (expect(element(by.id(key))) as any).toBeNotVisible();

/**
 * Expect Element By label to be visible
 * @param key
 */
export const expectElementByLabelVisible = async (key: string) =>
    (expect(element(by.label(key))) as any).toBeVisible();

/**
 * Expect Element By label to NOT be visible
 * @param key
 */
export const expectElementByLabelNotVisible = async (key: string) =>
    (expect(element(by.label(key))) as any).toBeNotVisible();

/**
 * Expect Element By id to have text
 * @param key
 * @param text
 */
export const expectElementByIdToHaveText = async (key: string, text: string) =>
    (expect(element(by.label(key))) as any).toHaveText(text);

/**
 * Expect Element By id to have label
 * @param key
 * @param label
 */
export const expectElementByIdToHaveLabel = async (key: string, label: string) =>
    (expect(element(by.label(key))) as any).toHaveLabel(label);

/**
 * Get text of a component <Text />
 * @param key
 */
export const getElementTextById = async (key: string) =>
    ((await getProps(element(by.id(key)))) as any).text;

/**
 * Go back to the previous screen by pressing the left-arrow button
 */
export const tapBackButton = async () => element(by.id('go-back')).tap();

/**
 * Go back to the previous screen
 * @param currentScreen
 * - Android: by using the device press back
 * - iOS: swipe right on the current screen
 *
 * Experimental, need to be tested better
 */
export const deviceGoBack = async (currentScreen: string) => {
    try {
        if (device.getPlatform() === 'android') {
            await device.pressBack(); // Android only
        } else {
            await element(by.id(currentScreen)).swipe('right', 'fast', 0.1);
        }
    } catch {
        await tapBackButton();
    }
};

/**
 * Type Text / element by id Type Text - applied on <TextInput /> component
 * @param key
 * @param value the value that is received by <TextInput />
 */
export const typeTextElementById = async (key: string, value: string) =>
    element(by.id(key)).typeText(value);

/**
 * Replace text / element by id Type Text - applied on <TextInput /> component
 * @param key
 * @param value the value that is received by <TextInput />
 */
export const replaceTextElementById = async (key: string, value: string) =>
    element(by.id(key)).replaceText(value);

/**
 * Reload React Native App, Enter Pin Code, Dashboard is displayed
 * @param pin the passcode of Moonlet
 */
export const realoadRNAndEnterPin = async (pin: string) => {
    await device.reloadReactNative();

    // Password Pin Screen
    await customKeyboard.typeWord(pin); // enter pin code
};

/**
 * Expect Dashboard Screen to be visible
 */
export const expectDashboardScreenVisible = async () => expectElementVisible('dashboard-screen');

/**
 * Pin Code for the Generate Wallet
 * Maybe consider this later to be stored in secrets
 */
export const PIN_CODE_GENERATE_WALLET = '000000';

/**
 * Swipe element by id
 * @param key
 * @param direction
 * @param speed - fast/slow - default is fast
 * @param percentage - (optional) screen percentage to swipe; valid input: [0.0, 1.0]
 */
export const swipeElementById = async (
    key: string,
    direction: 'left' | 'right' | 'top' | 'bottom' | 'up' | 'down',
    speed?: 'fast' | 'slow',
    percentage?: number
) => element(by.id(key)).swipe(direction, speed, percentage);

/**
 * Swipe element by label
 * @param key
 * @param direction
 * @param speed - fast/slow - default is fast
 * @param percentage - (optional) screen percentage to swipe; valid input: [0.0, 1.0]
 */
export const swipeElementByLabel = async (
    key: string,
    direction: 'left' | 'right' | 'top' | 'bottom' | 'up' | 'down',
    speed?: 'fast' | 'slow',
    percentage?: number
) => element(by.label(key)).swipe(direction, speed, percentage);

'''
'''--- e2e/utils/values.ts ---
export const XSGD_TESTNET_CONTRACT_ADDRESS = 'zil1nnwugt0e5cvf2welmyq93q6p6t7zfdjzz7s05u';

export const DAI_TESTNET_CONTRACT_ADDRESS = '0x5592ec0cfb4dbc12d3ab100b257153436a1f0fea';

'''
'''--- index.js ---
// tbd - ios swipe back fix - not sure - only on release it crashes
import 'react-native-gesture-handler';
import DeviceInfo from 'react-native-device-info';
import { init, setUser } from '@sentry/react-native';
import { sanitizeSentryBreadcrumb } from './src/core/utils/object-sanitise';

// Sentry setup
if (!__DEV__) {
    if (DeviceInfo.getBundleId() === 'com.moonlet.beta') {
        // beta app
        init({
            dsn: Platform.select({
                ios: 'https://ace08885fd314c4fa8b57cd6996e8c56@o308222.ingest.sentry.io/5285151',
                android: 'https://5c7b33ecb802428689eeeb35b20c8a64@o308222.ingest.sentry.io/5285148'
            }),
            environment: DeviceInfo.getBundleId(),
            beforeBreadcrumb: sanitizeSentryBreadcrumb
        });
    } else {
        // production app
        init({
            dsn: Platform.select({
                ios: 'https://118a06794f1543259239c453f2fc8f05@o308222.ingest.sentry.io/5282231',
                android: 'https://5a0742a051904564abcf8449f9865ffa@o308222.ingest.sentry.io/5282230'
            }),
            environment: DeviceInfo.getBundleId(),
            beforeBreadcrumb: sanitizeSentryBreadcrumb
        });
    }
}
setUser({ id: DeviceInfo.getUniqueId() });

import 'node-libs-react-native/globals';

import { AppRegistry, Platform } from 'react-native';
import App from './src/app';
import { name as appName } from './app.json';
import PushNotification from 'react-native-push-notification';
import { notificationHandler } from './src/core/messaging/handlers/notification';

// TODO remove this when fixed
import { LogBox } from 'react-native';
LogBox.ignoreLogs(['RCTRootView cancelTouches', 'Require cycle']);

// console.disableYellowBox = true;

PushNotification.configure({
    // (required) Called when a remote is received or opened, or local notification is opened
    onNotification: notification => {
        const isClicked =
            notification?.userInteraction === true || notification?.userInteraction === 1;
        const data = notification?.data?.data || notification?.data;
        if (isClicked && data) {
            notificationHandler(data, true);
        }
    }
});

AppRegistry.registerComponent(appName, () => App);

'''
'''--- index.web-wallet.js ---
import { init } from '@sentry/browser';
import { sanitizeSentryBreadcrumb } from './src/core/utils/object-sanitise';
import DeviceInfo from 'react-native-device-info';

// Sentry setup
if (!__DEV__) {
    init({
        dsn: 'https://fec608091c734de5a9731c5f2fa860cb@o308222.ingest.sentry.io/5255215',
        environment: DeviceInfo.getBundleId(),
        beforeBreadcrumb: sanitizeSentryBreadcrumb
    });
}

import { AppRegistry } from 'react-native';
import App from './src/app';
import { name as appName } from './app.json';
import firebase from 'firebase/app';
import CONFIG from './src/config';

// TODO remove this when fixed
import { YellowBox } from 'react-native';
YellowBox.ignoreWarnings(['RCTRootView cancelTouches']);

firebase.initializeApp(CONFIG.firebaseWebConfig);

AppRegistry.registerComponent(appName, () => App);
AppRegistry.runApplication(appName, { rootTag: document.getElementById('root') });

'''
'''--- ios/Moonlet/AppDelegate.h ---
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

#import <React/RCTBridgeDelegate.h>
#import <UIKit/UIKit.h>
#import <UserNotifications/UNUserNotificationCenter.h>

@interface AppDelegate : UIResponder <UIApplicationDelegate, RCTBridgeDelegate, UNUserNotificationCenterDelegate>

@property (nonatomic, strong) UIWindow *window;

@end

'''
'''--- ios/Moonlet/Images.xcassets/AppIcon-beta.appiconset/Contents.json ---
{
    "images": [
        {
            "size": "20x20",
            "idiom": "iphone",
            "filename": "Icon-App-20x20@2x.png",
            "scale": "2x"
        },
        {
            "size": "20x20",
            "idiom": "iphone",
            "filename": "Icon-App-20x20@3x.png",
            "scale": "3x"
        },
        {
            "size": "29x29",
            "idiom": "iphone",
            "filename": "Icon-App-29x29@1x.png",
            "scale": "1x"
        },
        {
            "size": "29x29",
            "idiom": "iphone",
            "filename": "Icon-App-29x29@2x.png",
            "scale": "2x"
        },
        {
            "size": "29x29",
            "idiom": "iphone",
            "filename": "Icon-App-29x29@3x.png",
            "scale": "3x"
        },
        {
            "size": "40x40",
            "idiom": "iphone",
            "filename": "Icon-App-40x40@2x.png",
            "scale": "2x"
        },
        {
            "size": "40x40",
            "idiom": "iphone",
            "filename": "Icon-App-40x40@3x.png",
            "scale": "3x"
        },
        {
            "size": "60x60",
            "idiom": "iphone",
            "filename": "Icon-App-60x60@2x.png",
            "scale": "2x"
        },
        {
            "size": "60x60",
            "idiom": "iphone",
            "filename": "Icon-App-60x60@3x.png",
            "scale": "3x"
        },
        {
            "size": "20x20",
            "idiom": "ipad",
            "filename": "Icon-App-20x20@1x.png",
            "scale": "1x"
        },
        {
            "size": "20x20",
            "idiom": "ipad",
            "filename": "Icon-App-20x20@2x.png",
            "scale": "2x"
        },
        {
            "size": "29x29",
            "idiom": "ipad",
            "filename": "Icon-App-29x29@1x.png",
            "scale": "1x"
        },
        {
            "size": "29x29",
            "idiom": "ipad",
            "filename": "Icon-App-29x29@2x.png",
            "scale": "2x"
        },
        {
            "size": "40x40",
            "idiom": "ipad",
            "filename": "Icon-App-40x40@1x.png",
            "scale": "1x"
        },
        {
            "size": "40x40",
            "idiom": "ipad",
            "filename": "Icon-App-40x40@2x.png",
            "scale": "2x"
        },
        {
            "size": "76x76",
            "idiom": "ipad",
            "filename": "Icon-App-76x76@1x.png",
            "scale": "1x"
        },
        {
            "size": "76x76",
            "idiom": "ipad",
            "filename": "Icon-App-76x76@2x.png",
            "scale": "2x"
        },
        {
            "size": "83.5x83.5",
            "idiom": "ipad",
            "filename": "Icon-App-83.5x83.5@2x.png",
            "scale": "2x"
        },
        {
            "size": "1024x1024",
            "idiom": "ios-marketing",
            "filename": "ItunesArtwork@2x.png",
            "scale": "1x"
        }
    ],
    "info": {
        "version": 1,
        "author": "xcode"
    }
}

'''
'''--- ios/Moonlet/Images.xcassets/AppIcon.appiconset/Contents.json ---
{
    "images": [
        {
            "size": "20x20",
            "idiom": "iphone",
            "filename": "Icon-App-20x20@2x.png",
            "scale": "2x"
        },
        {
            "size": "20x20",
            "idiom": "iphone",
            "filename": "Icon-App-20x20@3x.png",
            "scale": "3x"
        },
        {
            "size": "29x29",
            "idiom": "iphone",
            "filename": "Icon-App-29x29@1x.png",
            "scale": "1x"
        },
        {
            "size": "29x29",
            "idiom": "iphone",
            "filename": "Icon-App-29x29@2x.png",
            "scale": "2x"
        },
        {
            "size": "29x29",
            "idiom": "iphone",
            "filename": "Icon-App-29x29@3x.png",
            "scale": "3x"
        },
        {
            "size": "40x40",
            "idiom": "iphone",
            "filename": "Icon-App-40x40@2x.png",
            "scale": "2x"
        },
        {
            "size": "40x40",
            "idiom": "iphone",
            "filename": "Icon-App-40x40@3x.png",
            "scale": "3x"
        },
        {
            "size": "60x60",
            "idiom": "iphone",
            "filename": "Icon-App-60x60@2x.png",
            "scale": "2x"
        },
        {
            "size": "60x60",
            "idiom": "iphone",
            "filename": "Icon-App-60x60@3x.png",
            "scale": "3x"
        },
        {
            "size": "20x20",
            "idiom": "ipad",
            "filename": "Icon-App-20x20@1x.png",
            "scale": "1x"
        },
        {
            "size": "20x20",
            "idiom": "ipad",
            "filename": "Icon-App-20x20@2x.png",
            "scale": "2x"
        },
        {
            "size": "29x29",
            "idiom": "ipad",
            "filename": "Icon-App-29x29@1x.png",
            "scale": "1x"
        },
        {
            "size": "29x29",
            "idiom": "ipad",
            "filename": "Icon-App-29x29@2x.png",
            "scale": "2x"
        },
        {
            "size": "40x40",
            "idiom": "ipad",
            "filename": "Icon-App-40x40@1x.png",
            "scale": "1x"
        },
        {
            "size": "40x40",
            "idiom": "ipad",
            "filename": "Icon-App-40x40@2x.png",
            "scale": "2x"
        },
        {
            "size": "76x76",
            "idiom": "ipad",
            "filename": "Icon-App-76x76@1x.png",
            "scale": "1x"
        },
        {
            "size": "76x76",
            "idiom": "ipad",
            "filename": "Icon-App-76x76@2x.png",
            "scale": "2x"
        },
        {
            "size": "83.5x83.5",
            "idiom": "ipad",
            "filename": "Icon-App-83.5x83.5@2x.png",
            "scale": "2x"
        },
        {
            "size": "1024x1024",
            "idiom": "ios-marketing",
            "filename": "ItunesArtwork@2x.png",
            "scale": "1x"
        }
    ],
    "info": {
        "version": 1,
        "author": "xcode"
    }
}

'''
'''--- ios/Moonlet/Images.xcassets/Contents.json ---
{
    "info": {
        "version": 1,
        "author": "xcode"
    }
}

'''
'''--- ios/fastlane/README.md ---
fastlane documentation
================
# Installation

Make sure you have the latest version of the Xcode command line tools installed:

```
xcode-select --install
```

Install _fastlane_ using
```
[sudo] gem install fastlane -NV
```
or alternatively using `brew install fastlane`

# Available Actions
## iOS
### ios beta
```
fastlane ios beta
```
Submit new Beta build to Testflight
### ios deploy
```
fastlane ios deploy
```

----

This README.md is auto-generated and will be re-generated every time [fastlane](https://fastlane.tools) is run.
More information about fastlane can be found on [fastlane.tools](https://fastlane.tools).
The documentation of fastlane can be found on [docs.fastlane.tools](https://docs.fastlane.tools).

'''
'''--- ios/fastlane/metadata/copyright.txt ---
Jaxable S.R.L. 2020
'''
'''--- ios/fastlane/metadata/en-US/description.txt ---
Moonlet is a cryptocurrency wallet that allows you to store easily and secure all your different crypto assets.
 
-- BLOCKCHAIN AGNOSTIC --
Currently we support Zilliqa (ZIL), Singapore Dollar (XSGD), Ethereum (ETH) and many other ERC20 tokens, but more and more crypto assets are coming soon. 

-- EASY TO USE --
You can send crypto assets to anyone in the world from the convenience of your mobile phone or laptop. Moonlet is simply to use and put users first.
 
-- NON-CUSTODIAL --
Moonlet is a non-custodial wallet. It gives you full control over your funds, therefore it is much safer and secure, all transactions happen directly on the blockchain. 
 
-- HANDSHAKE LOGIN --
This is a feature within Moonlet that helps you to use your wallet as a gateway to blockchain apps. You are always in control when interacting on the new decentralised web since you’ll have to use your smartphone to sign any transaction.
 
-- TRANSACTION NOTIFICATIONS --
You don’t need to control and check transactions manually. With Moonlet, you’ll get notified immediately when you send or receive funds. As well you’ll be able to check all transaction states in the transaction history.
 
-- HARDWARE WALLET --
In case you want to use one more security standard, you can simply use your hardware wallet. Moonlet integrates with Ledger, for both Nano S and Nano X models.
 
-- SECURED ENVIRONMENT  --
Moonlet is proactively looking to identify and improve the security of its features and assets by employing provider’s services in terms of grey box penetration testing & vulnerability assessment, code review.
 
-- CONTINUOUS SUPPORT --
Crypto can be confusing. We do know that. That’s why you can reach us easily through the app. We’re here to help you.
'''
'''--- ios/fastlane/metadata/en-US/keywords.txt ---
cryptocurrency, crypto, wallet, blockchain, financial, tokens, erc20, zrc2
'''
'''--- ios/fastlane/metadata/en-US/marketing_url.txt ---
https://moonlet.io/
'''
'''--- ios/fastlane/metadata/en-US/name.txt ---
Moonlet

'''
'''--- ios/fastlane/metadata/en-US/privacy_url.txt ---
https://moonlet.io/privacy-policy/
'''
'''--- ios/fastlane/metadata/en-US/release_notes.txt ---
Team's log.

Bug fixing

As always, we're here to help! If you come across a problem, want to provide feedback, or require support, you can get in touch through our app or on Twitter.

Moonlet Team
'''
'''--- ios/fastlane/metadata/en-US/subtitle.txt ---

'''
'''--- ios/fastlane/metadata/en-US/support_url.txt ---
https://moonlet.uvdesk.com/en/customer/create-ticket/
'''
'''--- ios/fastlane/metadata/primary_category.txt ---
Finance
'''
'''--- ios/fastlane/metadata/review_information/demo_password.txt ---

'''
'''--- ios/fastlane/metadata/review_information/demo_user.txt ---

'''
'''--- ios/fastlane/metadata/review_information/email_address.txt ---
support@moonlet.io

'''
'''--- ios/fastlane/metadata/review_information/first_name.txt ---
Tiberiu
'''
'''--- ios/fastlane/metadata/review_information/last_name.txt ---
Krisboi

'''
'''--- ios/fastlane/metadata/review_information/notes.txt ---
Hello,

We have added a link where you can find the list of legal documents to prove that Jaxable owns Moonlet
https://drive.google.com/drive/folders/1x0Md5cdD5HWn8KkUT_rUJkucbSGjMVQ_?usp=sharing 

We created a video presenting the connection flow with a Ledger hardware wallet. 
You can find it here: https://youtu.be/w9TNelbmqWQ

'''
'''--- ios/fastlane/metadata/review_information/phone_number.txt ---
+40741546565
'''
'''--- ios/fastlane/metadata/trade_representative_contact_information/address_line1.txt ---
STR. ALEXANDRU CEL BUN NR. 20A BL. T19B SC. A ET. 8 AP. 50
'''
'''--- ios/fastlane/metadata/trade_representative_contact_information/address_line2.txt ---
SECTORUL 2

'''
'''--- ios/fastlane/metadata/trade_representative_contact_information/address_line3.txt ---

'''
'''--- ios/fastlane/metadata/trade_representative_contact_information/city_name.txt ---
Bucuresti

'''
'''--- ios/fastlane/metadata/trade_representative_contact_information/country.txt ---
Romania

'''
'''--- ios/fastlane/metadata/trade_representative_contact_information/email_address.txt ---
support@moonlet.io
'''
'''--- ios/fastlane/metadata/trade_representative_contact_information/first_name.txt ---
Tiberiu

'''
'''--- ios/fastlane/metadata/trade_representative_contact_information/is_displayed_on_app_store.txt ---
false

'''
'''--- ios/fastlane/metadata/trade_representative_contact_information/last_name.txt ---
Krisboi

'''
'''--- ios/fastlane/metadata/trade_representative_contact_information/phone_number.txt ---
+40741546565

'''
'''--- ios/fastlane/metadata/trade_representative_contact_information/postal_code.txt ---
4

'''
'''--- ios/fastlane/metadata/trade_representative_contact_information/state.txt ---

'''
'''--- ios/fastlane/metadata/trade_representative_contact_information/trade_name.txt ---
Jaxable S.R.L.
'''
'''--- ios/fastlane/screenshots/README.txt ---
Put all screenshots you want to use inside the folder of its language (e.g. en-US).
The device type will automatically be recognized using the image resolution. Apple TV screenshots
should be stored in a subdirectory named appleTV with language folders inside of it. iMessage
screenshots, like Apple TV screenshots, should also be stored in a subdirectory named iMessage
with language folders inside of it.

The screenshots can be named whatever you want, but keep in mind they are sorted alphabetically.

'''
'''--- ios/pods.sh ---
#!/bin/bash

chmod 777 Pods/MultiplatformBleAdapter/iOS/RxBluetoothKit/RxCBDescriptor.swift

chmod 777 Pods/MultiplatformBleAdapter/iOS/RxBluetoothKit/RxCBCharacteristic.swift

chmod 777 Pods/MultiplatformBleAdapter/iOS/RxBluetoothKit/RestoredState.swift

chmod 777 Pods/RCT-Folly/folly/portability/Time.h

echo "Patching  Files...";

if ! grep -q "descriptor.characteristic!" Pods/MultiplatformBleAdapter/iOS/RxBluetoothKit/RxCBDescriptor.swift; then
  awk '{sub("descriptor.characteristic", "descriptor.characteristic!")}1' Pods/MultiplatformBleAdapter/iOS/RxBluetoothKit/RxCBDescriptor.swift > tmp.swift && mv tmp.swift Pods/MultiplatformBleAdapter/iOS/RxBluetoothKit/RxCBDescriptor.swift
fi

if ! grep -q "characteristic.service!" Pods/MultiplatformBleAdapter/iOS/RxBluetoothKit/RxCBCharacteristic.swift; then
 awk '{sub("characteristic.service", "characteristic.service!")}1' Pods/MultiplatformBleAdapter/iOS/RxBluetoothKit/RxCBCharacteristic.swift > tmp1.swift && mv tmp1.swift Pods/MultiplatformBleAdapter/iOS/RxBluetoothKit/RxCBCharacteristic.swift
fi

if ! grep -q "service.peripheral!" Pods/MultiplatformBleAdapter/iOS/RxBluetoothKit/RestoredState.swift; then
 awk '{sub("service.peripheral", "service.peripheral!")}1' Pods/MultiplatformBleAdapter/iOS/RxBluetoothKit/RestoredState.swift > tmp2.swift && mv tmp2.swift Pods/MultiplatformBleAdapter/iOS/RxBluetoothKit/RestoredState.swift
fi

awk '{sub("typedef uint8_t clockid_t;", "")}1' Pods/RCT-Folly/folly/portability/Time.h > tmp.h && mv tmp.h Pods/RCT-Folly/folly/portability/Time.h

echo "Done."

'''
'''--- jest.config.js ---
// jest config
module.exports = {
    preset: 'react-native',
    moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
    transformIgnorePatterns: ['node_modules/?!(react-navigation|@react-native-community)'],
    setupFiles: ['./jest.setup.js'],
    roots: ['src/'],
    collectCoverage: true,
    collectCoverageFrom: ['./src/**/*.{ts,tsx}', '!./src/core/utils/test/'],
    globals: {
        window: {
            navigator: {
                language: 'en-US'
            }
        }
    }
};

'''
'''--- jest.setup.js ---
import Adapter from 'enzyme-adapter-react-16';
import Enzyme from 'enzyme';
import { NativeModules } from 'react-native';
import { randomBytes } from 'crypto';

Enzyme.configure({ adapter: new Adapter() });

jest.mock('./src/redux/config');

// Mocks
jest.mock('react-navigation', () => {
    return {
        createAppContainer: jest.fn().mockReturnValue(function NavigationContainer(props) {
            return null;
        }),
        createSwitchNavigator: jest.fn(),
        NavigationActions: {
            navigate: jest.fn().mockReturnValue('navigate-action')
        }
    };
});

jest.mock('react-native/Libraries/EventEmitter/NativeEventEmitter');

jest.mock('@ledgerhq/react-native-hw-transport-ble', () => ({}));

jest.mock('react-navigation-tabs', () => {
    return {
        createBottomTabNavigator: jest.fn()
    };
});

jest.mock('react-navigation-stack', () => {
    return {
        createStackNavigator: jest.fn(),
        StackViewStyleInterpolator: {
            forHorizontal: jest.fn().mockReturnValue('animation-interpolation')
        }
    };
});

NativeModules.SettingsManager = { settings: { AppleLocale: 'en_US' } };
NativeModules.I18nManager = {
    localeIdentifier: 'en-US',
    getConstants: jest.fn().mockReturnValue({ isRTL: false, doLeftAndRightSwapInRTL: true })
};

NativeModules.RNGestureHandlerModule = {
    Directions: {}
};

jest.mock('react-native-device-info', () => {
    return {
        getVersion: jest.fn(),
        getUniqueId: jest.fn(),
        getBundleId: jest.fn(),
        getFontScaleSync: jest.fn(),
        getReadableVersion: jest.fn()
    };
});

jest.mock('@react-native-community/clipboard', () => ({
    setString: jest.fn()
}));

NativeModules.RNRandomBytes = {
    randomBytes: jest.fn(randomBytes)
};
NativeModules.SettingsManager = { settings: { AppleLocale: 'en-US' } };
NativeModules.Aes = {
    pbkdf2: jest.fn().mockReturnValue('hashedkey'),
    randomKey: jest.fn(() => Promise.resolve('randomKey')),
    encrypt: jest.fn(() => Promise.resolve('encrypted')),
    decrypt: jest.fn().mockReturnValue('data')
};

global.WebSocket = jest.fn(() => {});

jest.mock('react-native-webview', () => ({
    WebView: 'WebView'
}));

'''
'''--- metro.config.js ---
/**
 * Metro configuration for React Native
 * https://github.com/facebook/react-native
 *
 * @format
 */

const { getDefaultConfig } = require('metro-config');

module.exports = (async () => {
    const {
        resolver: { sourceExts, assetExts }
    } = await getDefaultConfig();
    return {
        transformer: {
            babelTransformerPath: require.resolve('react-native-svg-transformer'),
            getTransformOptions: async () => ({
                transform: {
                    experimentalImportSupport: false,
                    inlineRequires: false
                }
            })
        },
        resolver: {
            assetExts: assetExts.filter(ext => ext !== 'svg'),
            sourceExts: [...sourceExts, 'svg'],
            extraNodeModules: {
                ...require('node-libs-react-native'),
                vm: require.resolve('vm-browserify'),
                fs: require.resolve('react-native-fs')
            }
        }
    };
})();

'''
'''--- package.json ---
{
    "name": "moonlet",
    "version": "1.5.30",
    "private": true,
    "scripts": {
        "generate-icons": "mkdir -p resources/fonts && icon-font-generator ./src/assets/icons/svg/*.svg -o resources/fonts --height 1024 --types ttf",
        "emulator": "cd ~/Library/Android/sdk/tools/; emulator -avd `emulator -list-avds | awk '{print $1}'`",
        "android": "yarn run generate-icons && react-native run-android --variant=betaDebug --appIdSuffix=beta",
        "ios": "arch -x86_64 yarn run ios:before-run && arch -x86_64 react-native run-ios --scheme Moonlet_beta",
        "ios:live": "yarn run ios:before-run && react-native run-ios --scheme Moonlet",
        "ios:pod-install": "cd ios && arch -x86_64 pod install",
        "ios:before-run": "yarn run generate-icons & yarn run ios:pod-install",
        "ios:clean": "rm -rf ios/Pods ios/build ~/Library/Developer/Xcode/DerivedData/ ios/Moonlet.xcworkspace node_modules",
        "web-wallet": "TARGET=beta NODE_ENV=development webpack-dev-server --open --mode development --config ./web-wallet/webpack.config.js --watch --info-verbosity verbose",
        "web-wallet:build": "node --max_old_space_size=6144 ./node_modules/.bin/webpack -p --config ./web-wallet/webpack.config.js",
        "start": "(tsc -w --noEmit & react-native start --reset-cache)",
        "test": "jest",
        "lint": "tslint --fix '{src,extension}/**/*.{ts,tsx}'",
        "prettier": "prettier --write \"**/*.{js,ts,tsx,scss,json}\" --ignore-path .gitignore",
        "postinstall": "jetify && ./scripts/ts-nockeck-files.sh && ./scripts/cjs-update.sh",
        "detox:build:ios": "detox build -c ios.beta",
        "detox:test:ios": "detox test -c ios.beta",
        "detox:build:android": "detox build -c android.emu.beta",
        "detox:test:android": "detox test -c android.emu.beta",
        "detox:test:android:device": "detox test --configuration android.device.beta"
    },
    "dependencies": {
        "@ethereumjs/common": "^2.4.0",
        "@ethereumjs/tx": "^3.3.0",
        "@ethersproject/abi": "^5.0.5",
        "@ledgerhq/hw-app-eth": "^6.8.0",
        "@ledgerhq/react-native-hid": "^4.78.0",
        "@ledgerhq/react-native-hw-transport-ble": "^4.78.0",
        "@react-native-community/async-storage": "^1.12.1",
        "@react-native-community/clipboard": "^1.5.1",
        "@react-native-community/geolocation": "^2.0.2",
        "@react-native-community/netinfo": "^6.0.0",
        "@react-native-community/push-notification-ios": "^1.8.0",
        "@react-native-firebase/app": "^11.5.0",
        "@react-native-firebase/database": "^11.5.0",
        "@react-native-firebase/messaging": "^11.5.0",
        "@react-native-firebase/remote-config": "^11.5.0",
        "@react-native-firebase/storage": "^11.5.0",
        "@sentry/browser": "^6.8.0",
        "@sentry/react-native": "^2.6.0",
        "@solana/spl-token": "^0.1.6",
        "@solana/web3.js": "0.87.1",
        "@types/bech32": "^1.1.4",
        "@types/dotenv": "^8.2.0",
        "@types/react-native-vector-icons": "^6.4.7",
        "@types/redux-logger": "^3.0.8",
        "@types/secp256k1": "^4.0.2",
        "@zilliqa-js/account": "^3.0.0",
        "@zilliqa-js/crypto": "^3.0.0",
        "@zilliqa-js/util": "^3.0.0",
        "babel-plugin-inline-dotenv": "^1.6.0",
        "bech32": "^2.0.0",
        "bignumber.js": "^9.0.1",
        "bind-decorator": "^1.0.11",
        "bip32": "^2.0.6",
        "bip39": "^3.0.4",
        "bn.js": "^5.2.0",
        "body-parser": "^1.19.0",
        "bowser": "^2.11.0",
        "bs58": "^4.0.1",
        "buffer-layout": "^1.2.2",
        "crypto-js": "^4.0.0",
        "detox": "^18.18.1",
        "detox-getprops": "^0.1.2",
        "dotenv": "^10.0.0",
        "elliptic": "^6.5.4",
        "enzyme": "^3.11.0",
        "enzyme-adapter-react-16": "^1.15.6",
        "eth-ens-namehash": "^2.0.8",
        "eth-lib": "^0.1.29",
        "ethereumjs-abi": "^0.6.8",
        "ethereumjs-tx": "^2.1.2",
        "ethereumjs-util": "^6.1.0",
        "express": "^4.17.1",
        "firebase": "^7.14.2",
        "hdkey": "^2.0.1",
        "hoist-non-react-statics": "^3.3.2",
        "immutable": "^3.8.2",
        "intl": "^1.2.5",
        "js-sha256": "^0.9.0",
        "klona": "^2.0.4",
        "ledger-cosmos-js": "^2.1.8",
        "lodash": "^4.17.21",
        "lottie-react-native": "4.1.0",
        "metro-config": "^0.66.1",
        "modal-enhanced-react-native-web": "^0.2.0",
        "moment": "^2.29.1",
        "near-api-js": "^0.30.0",
        "node-libs-react-native": "^1.2.1",
        "puppeteer": "^10.1.0",
        "qrcode": "^1.4.4",
        "react": "17.0.2",
        "react-native": "0.64.2",
        "react-native-aes-crypto": "^1.3.10",
        "react-native-android-open-settings": "^1.3.0",
        "react-native-animatable": "^1.3.3",
        "react-native-background-timer": "^2.4.1",
        "react-native-ble-plx": "^2.0.2",
        "react-native-camera-kit": "^8.0.2",
        "react-native-device-info": "^8.1.3",
        "react-native-dialog": "^5.6.0",
        "react-native-draggable-flatlist": "^2.6.2",
        "react-native-fast-image": "^8.3.4",
        "react-native-fs": "^2.18.0",
        "react-native-gesture-handler": "^1.10.3",
        "react-native-keyboard-aware-scroll-view": "^0.9.4",
        "react-native-keychain": "^8.0.0",
        "react-native-linear-gradient": "^2.5.6",
        "react-native-markdown-display": "^7.0.0-alpha.2",
        "react-native-modal": "^12.0.2",
        "react-native-ntp-client": "^1.0.3",
        "react-native-push-notification": "^7.4.0",
        "react-native-qrcode-svg": "^6.1.1",
        "react-native-randombytes": "^3.6.1",
        "react-native-reanimated": "2.2.0",
        "react-native-safe-area-context": "^3.2.0",
        "react-native-safe-area-view": "^1.1.1",
        "react-native-screens": "^3.4.0",
        "react-native-svg": "^12.1.1",
        "react-native-svg-transformer": "^0.14.3",
        "react-native-touch-id": "^4.4.1",
        "react-native-udp": "^4.1.2",
        "react-native-url-polyfill": "^1.3.0",
        "react-native-vector-icons": "^8.1.0",
        "react-native-web": "^0.17.1",
        "react-native-web-linear-gradient": "^1.1.2",
        "react-native-webview": "12.1.0",
        "react-navigation": "^4.4.4",
        "react-navigation-stack": "^2.10.4",
        "react-navigation-tabs": "^2.11.1",
        "react-redux": "^7.2.4",
        "react-test-renderer": "^17.0.2",
        "reanimated-bottom-sheet": "^1.0.0-alpha.22",
        "redux": "^4.1.0",
        "redux-devtools-extension": "^2.13.9",
        "redux-logger": "^3.0.6",
        "redux-persist": "^6.0.0",
        "redux-thunk": "^2.3.0",
        "reselect": "^4.0.0",
        "secp256k1": "^4.0.2",
        "tweetnacl": "^1.0.3",
        "uuid": "^8.3.2",
        "vm-browserify": "^1.1.2",
        "webext-redux": "^2.1.7",
        "webextension-polyfill-ts": "^0.26.0"
    },
    "devDependencies": {
        "@babel/core": "^7.12.9",
        "@babel/node": "^7.12.9",
        "@babel/plugin-proposal-decorators": "^7.6.0",
        "@babel/runtime": "^7.14.6",
        "@react-native-community/eslint-config": "^3.0.0",
        "@types/crypto-js": "^3.1.45",
        "@types/elliptic": "^6.4.12",
        "@types/enzyme": "^3.10.8",
        "@types/ethereumjs-abi": "^0.6.3",
        "@types/ethereumjs-tx": "^2.0.0",
        "@types/hdkey": "^2.0.0",
        "@types/jest": "^26.0.23",
        "@types/lodash": "^4.14.170",
        "@types/puppeteer": "^5.4.3",
        "@types/react": "^17.0.13",
        "@types/react-native": "^0.64.10",
        "@types/react-native-push-notification": "^7.3.0",
        "@types/react-redux": "^7.1.16",
        "@types/react-test-renderer": "^17.0.1",
        "@types/redux": "^3.6.0",
        "@types/uuid": "^8.3.1",
        "babel-eslint": "^10.1.0",
        "babel-jest": "^24.9.0",
        "babel-loader": "^8.2.2",
        "babel-plugin-react-native-web": "^0.11.7",
        "babel-preset-react-native": "^4.0.1",
        "copy-webpack-plugin": "^5.0.4",
        "html-webpack-plugin": "^3.2.0",
        "husky": "^3.0.8",
        "icon-font-generator": "^2.1.11",
        "jest": "^24.9.0",
        "lint-staged": "^9.4.1",
        "metro-react-native-babel-preset": "^0.56.0",
        "moment-locales-webpack-plugin": "^1.2.0",
        "node-fetch": "^2.6.7",
        "prettier": "^1.19.1",
        "react-dom": "^17.0.2",
        "react-scripts": "^3.2.0",
        "ts-loader": "^6.2.0",
        "tslint": "^6.0.0",
        "tslint-config-prettier": "^1.18.0",
        "tslint-microsoft-contrib": "^6.2.0",
        "tslint-react-native": "0.0.7",
        "typescript": "^3.7.5",
        "webpack": "^4.41.2",
        "webpack-cli": "^3.3.9",
        "webpack-dev-server": "^3.8.2",
        "webpack-extension-manifest-plugin": "^0.5.0",
        "write-file-webpack-plugin": "^4.5.1"
    },
    "jest": {
        "preset": "react-native"
    },
    "husky": {
        "hooks": {
            "pre-commit": "tsc --noEmit && lint-staged"
        }
    },
    "lint-staged": {
        "*.{ts,tsx,scss,json,js}": ["yarn run prettier", "git add"],
        "*.{ts,tsx}": ["yarn run lint", "git add"]
    }
}

'''
'''--- scripts/cjs-update.sh ---

echo "Patching superstruct node_modules...";

mv node_modules/superstruct/lib/index.cjs node_modules/superstruct/lib/index.js
mv node_modules/superstruct/lib/index.cjs.map node_modules/superstruct/lib/index.js.map
awk '{sub("index.cjs", "index.js")}1' node_modules/superstruct/package.json > tmp.json && mv tmp.json node_modules/superstruct/package.json

echo "Patching superstruct from solana spl-token node_modules...";

mv node_modules/@solana/spl-token/node_modules/superstruct/lib/index.cjs node_modules/@solana/spl-token/node_modules/superstruct/lib/index.js
mv node_modules/@solana/spl-token/node_modules/superstruct/lib/index.cjs.map node_modules/@solana/spl-token/node_modules/superstruct/lib/index.js.map
awk '{sub("index.cjs", "index.js")}1' node_modules/@solana/spl-token/node_modules/superstruct/package.json > tmp.json && mv tmp.json node_modules/@solana/spl-token/node_modules/superstruct/package.json

echo "Patching superstruct from solana web3 node_modules...";

mv node_modules/@solana/web3.js/node_modules/superstruct/lib/index.cjs node_modules/@solana/web3.js/node_modules/superstruct/lib/index.js
mv node_modules/@solana/web3.js/node_modules/superstruct/lib/index.cjs.map node_modules/@solana/web3.js/node_modules/superstruct/lib/index.js.map
awk '{sub("index.cjs", "index.js")}1' node_modules/@solana/web3.js/node_modules/superstruct/package.json > tmp.json && mv tmp.json node_modules/@solana/web3.js/node_modules/superstruct/package.json

echo "Done";

'''
'''--- scripts/ts-nockeck-files.sh ---
#!/bin/bash

FILES=(
    "node_modules/react-native-draggable-flatlist/index.tsx"
    "node_modules/react-native-draggable-flatlist/procs.tsx"
)

echo "Patching files...";
for file in "${FILES[@]}"; do
    echo "Adding //ts-nocheck to $file..."
    grep -q "//@ts-nocheck" "$file" || printf "//@ts-nocheck\n\n%s" "$(cat "$file")" > "$file"
done
echo "Done."
'''
'''--- src/__mocks__/@react-native-community/async-storage.js ---
export * from '@react-native-community/async-storage/jest/async-storage-mock';

'''
'''--- src/__mocks__/@react-native-community/geolocation.js ---
export default {
    addListener: jest.fn(),
    getCurrentPosition: jest.fn(),
    removeListeners: jest.fn(),
    requestAuthorization: jest.fn(),
    setConfiguration: jest.fn(),
    startObserving: jest.fn(),
    stopObserving: jest.fn()
};

'''
'''--- src/__mocks__/@react-native-community/netinfo.js ---
export * from '@react-native-community/netinfo/jest/netinfo-mock';

'''
'''--- src/__mocks__/react-native-background-timer/index.js ---
export default jest.fn();

'''
'''--- src/__mocks__/react-native-firebase/index.js ---
function notifications() {
    return {
        onNotification: jest.fn(),
        onNotificationDisplayed: jest.fn(),
        android: {
            createChannel: jest.fn()
        }
    };
}

notifications.Android = {
    Channel: jest.fn(),
    Importance: {
        Max: 5
    }
};

export default {
    messaging: jest.fn(() => ({
        hasPermission: jest.fn(() => Promise.resolve(true)),
        subscribeToTopic: jest.fn(),
        unsubscribeFromTopic: jest.fn(),
        requestPermission: jest.fn(() => Promise.resolve(true)),
        getToken: jest.fn(() => Promise.resolve('myMockToken'))
    })),
    notifications,
    analytics: jest.fn(() => ({
        logEvent: jest.fn()
    }))
};

'''
'''--- src/__mocks__/react-native-keychain/index.js ---
let pass = '';

const SECURITY_LEVEL_ANY = 'MOCK_SECURITY_LEVEL_ANY';
const SECURITY_LEVEL_SECURE_SOFTWARE = 'MOCK_SECURITY_LEVEL_SECURE_SOFTWARE';
const SECURITY_LEVEL_SECURE_HARDWARE = 'MOCK_SECURITY_LEVEL_SECURE_HARDWARE';
const setGenericPassword = jest.fn(password => {
    pass = password;
});
const getGenericPassword = jest.fn(() => pass);
const resetGenericPassword = jest.fn().mockResolvedValue();

export {
    SECURITY_LEVEL_ANY,
    SECURITY_LEVEL_SECURE_SOFTWARE,
    SECURITY_LEVEL_SECURE_HARDWARE,
    setGenericPassword,
    getGenericPassword,
    resetGenericPassword
};

'''
'''--- src/__mocks__/react-native-reanimated/index.js ---
export default {
    createAnimatedComponent: jest.fn()
};

'''
'''--- src/__mocks__/react-native-voip-push-notification/index.js ---
export default {
    addEventListener: jest.fn(),
    requestPermissions: jest.fn(),
    wakeupByPush: false
};

'''
'''--- src/assets/icons/blockchains/celo.svg ---
<?xml version="1.0" encoding="UTF-8"?>
<svg width="950px" height="950px" viewBox="0 0 950 950" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!-- Generator: Sketch 57.1 (83088) - https://sketch.com -->
    <title>Celo Logo Color Reverse</title>
    <desc>Created with Sketch.</desc>
    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="Celo-Logo-Color-Reverse" fill-rule="nonzero">
            <path d="M575,650 C726.88,650 850,526.88 850,375 C850,223.12 726.88,100 575,100 C423.12,100 300,223.12 300,375 C300,526.88 423.12,650 575,650 Z M575,750 C367.9,750 200,582.1 200,375 C200,167.9 367.9,0 575,0 C782.1,0 950,167.9 950,375 C950,582.1 782.1,750 575,750 Z" id="Top_Ring" fill="#35D07F"></path>
            <path d="M375,850 C526.88,850 650,726.88 650,575 C650,423.12 526.88,300 375,300 C223.12,300 100,423.12 100,575 C100,726.88 223.12,850 375,850 Z M375,950 C167.9,950 0,782.1 0,575 C0,367.9 167.9,200 375,200 C582.1,200 750,367.9 750,575 C750,782.1 582.1,950 375,950 Z" id="Bottom_Ring" fill="#FBCC5C"></path>
            <path d="M587.3,749.8 C613.289577,718.309477 631.916475,681.411001 641.82,641.8 C681.429544,631.897854 718.327616,613.274577 749.82,587.29 C748.384149,633.15307 738.505739,678.358493 720.68,720.64 C678.393564,738.475003 633.181093,748.360252 587.31,749.8 L587.3,749.8 Z M308.19,308.18 C268.580456,318.082146 231.682384,336.705423 200.19,362.69 C201.625851,316.82693 211.504261,271.621507 229.33,229.34 C271.617747,211.511863 316.83017,201.633404 362.7,200.2 C336.71806,231.686551 318.094921,268.577517 308.19,308.18 L308.19,308.18 Z" id="Rings_Overlap" fill="#ECFF8F"></path>
        </g>
    </g>
</svg>
'''
'''--- src/assets/icons/blockchains/cosmos.svg ---
<svg width="104px" height="104px" viewBox="0 0 104 104" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="Group-3" fill="#E5E5E5" fill-rule="nonzero">
            <path d="M51.5,90 C72.7629629,90 90,72.7629629 90,51.5 C90,30.2370371 72.7629629,13 51.5,13 C30.2370371,13 13,30.2370371 13,51.5 C13,72.7629629 30.2370371,90 51.5,90 Z M51.5,83.4208861 C33.8705814,83.4208861 19.5791139,69.1294186 19.5791139,51.5 C19.5791139,33.8705814 33.8705814,19.5791139 51.5,19.5791139 C69.1294186,19.5791139 83.4208861,33.8705814 83.4208861,51.5 C83.4208861,69.1294186 69.1294186,83.4208861 51.5,83.4208861 Z" id="Oval"></path>
            <polygon id="Line" points="4.12425547 104 104 4.12425547 99.8757445 0 0 99.8757445"></polygon>
        </g>
    </g>
</svg>

'''
'''--- src/assets/icons/blockchains/eth.svg ---
<svg width="83px" height="136px" viewBox="0 0 83 136" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="Ethereum_logo_2014" fill-rule="nonzero">
            <polygon id="Path" fill="#CBCBCB" points="41.8977722 0 41 3.1011467 41 93.0892422 41.8977722 94 83 69.3089965"></polygon>
            <polygon id="Path" fill="#E5E5E5" points="42 0 0 69.3087558 42 94 42 50.3226223"></polygon>
            <polygon id="Path" fill="#CBCBCB" points="41.5103655 101.736025 41 102.364241 41 134.494571 41.5103655 136 83 77"></polygon>
            <polygon id="Path" fill="#E5E5E5" points="42 136 42 101.736025 0 77"></polygon>
            <polygon id="Path" fill="#656565" points="41 95 83 70.1266601 41 51"></polygon>
            <polygon id="Path" fill="#CBCBCB" points="0 70.1266601 42 95 42 51"></polygon>
        </g>
    </g>
</svg>

'''
'''--- src/assets/icons/blockchains/near.svg ---
<svg width="144" height="145" viewBox="0 0 144 145" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M115.58 7.81L85.48 52.5C85.0513 53.1436 84.8702 53.9207 84.9701 54.6875C85.07 55.4543 85.4443 56.159 86.0236 56.6713C86.6029 57.1835 87.3481 57.4686 88.1214 57.4739C88.8947 57.4792 89.6437 57.2043 90.23 56.7L119.86 31C120.034 30.8446 120.249 30.7432 120.479 30.7081C120.709 30.6729 120.945 30.7056 121.157 30.8021C121.369 30.8986 121.549 31.0547 121.673 31.2515C121.798 31.4482 121.863 31.677 121.86 31.91V112.37C121.86 112.616 121.784 112.857 121.643 113.058C121.501 113.26 121.301 113.413 121.07 113.497C120.838 113.582 120.586 113.592 120.348 113.528C120.111 113.464 119.898 113.329 119.74 113.14L30.18 5.93C28.7395 4.22895 26.9457 2.86205 24.9235 1.92433C22.9013 0.986612 20.6991 0.500571 18.47 0.500001H15.34C11.2716 0.500001 7.36979 2.11617 4.49298 4.99298C1.61617 7.86979 0 11.7716 0 15.84V129.16C0 133.228 1.61617 137.13 4.49298 140.007C7.36979 142.884 11.2716 144.5 15.34 144.5V144.5C17.9632 144.501 20.5427 143.829 22.8326 142.549C25.1224 141.27 27.046 139.425 28.42 137.19L58.52 92.5C58.9487 91.8564 59.1298 91.0793 59.0299 90.3125C58.93 89.5457 58.5557 88.841 57.9764 88.3287C57.3971 87.8165 56.6519 87.5314 55.8786 87.5261C55.1053 87.5208 54.3563 87.7957 53.77 88.3L24.14 114C23.9664 114.155 23.7512 114.257 23.5209 114.292C23.2906 114.327 23.055 114.294 22.8429 114.198C22.6309 114.101 22.4515 113.945 22.3266 113.749C22.2018 113.552 22.137 113.323 22.14 113.09V32.61C22.1401 32.3637 22.216 32.1233 22.3574 31.9216C22.4988 31.7199 22.6988 31.5666 22.9303 31.4825C23.1619 31.3985 23.4137 31.3877 23.6515 31.4516C23.8894 31.5155 24.1019 31.6511 24.26 31.84L113.81 139.07C115.251 140.771 117.044 142.138 119.067 143.076C121.089 144.013 123.291 144.499 125.52 144.5H128.65C130.665 144.501 132.661 144.106 134.523 143.335C136.386 142.565 138.078 141.435 139.503 140.011C140.929 138.586 142.06 136.894 142.831 135.033C143.603 133.171 144 131.175 144 129.16V15.84C144 11.7716 142.384 7.86979 139.507 4.99298C136.63 2.11617 132.728 0.500001 128.66 0.500001C126.037 0.499311 123.457 1.17087 121.167 2.45058C118.878 3.73029 116.954 5.57545 115.58 7.81V7.81Z" fill="white"/>
</svg>

'''
'''--- src/assets/icons/blockchains/sol.svg ---
<?xml version="1.0" encoding="UTF-8"?>
<svg width="950px" height="768px" viewBox="0 0 950 768" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!-- Generator: Sketch 57.1 (83088) - https://sketch.com -->
    <title>light-explorer-logo.306f645a</title>
    <desc>Created with Sketch.</desc>
    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="light-explorer-logo.306f645a" fill="#1DD79B" fill-rule="nonzero">
            <path d="M813.312393,179.121206 C807.614131,184.806433 799.883686,188 791.822842,188 L30.4486796,188 C3.53921748,188 -10.0908969,155.691933 8.72151235,136.503446 L133.60803,9.11915792 C139.326658,3.28745587 147.158939,0 155.33746,0 L919.549438,0 C946.624099,0 960.181798,32.6457052 941.038989,51.7396262 L813.312393,179.121206 Z" id="Path"></path>
            <path d="M813.312393,759.123495 C807.614131,764.806444 799.883686,768 791.822842,768 L30.4486796,768 C3.53921748,768 -10.0908969,735.692049 8.72151235,716.503631 L133.60803,589.120254 C139.326658,583.288347 147.158939,580 155.33746,580 L919.549438,580 C946.624099,580 960.181798,612.64649 941.038989,631.740117 L813.312393,759.123495 Z" id="Path"></path>
            <path d="M813.312393,298.876612 C807.614131,293.193594 799.883686,290 791.822842,290 L30.4486796,290 C3.53921748,290 -10.0908969,322.308339 8.72151235,341.496987 L133.60803,468.881894 C139.326658,474.713871 147.158939,478 155.33746,478 L919.549438,478 C946.624099,478 960.181798,445.355375 941.038989,426.261519 L813.312393,298.876612 Z" id="Path"></path>
        </g>
    </g>
</svg>
'''
'''--- src/assets/icons/blockchains/zil.svg ---
<svg width="83px" height="118px" viewBox="0 0 83 118" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="Zilliqa_Logo" fill-rule="nonzero">
            <g id="Group" fill="#49C1BF">
                <polygon id="path0_fill" points="82.838835 48.356422 65.9702265 55.8701835 21.2200647 78.6261468 65.9702265 100.120872 65.9702265 64.5915138 82.838835 56.9972477 82.838835 109.486239 65.9702265 117 0.0805825243 85.4958716 0.0805825243 68.7509174 45.6902913 46.3974771 0.0805825243 24.5002294 0.0805825243 7.51376147 17.2177994 0 82.838835 31.5577982"></polygon>
            </g>
            <g id="Group" fill="#077A8F">
                <polygon id="path1_fill" points="0.0805825243 7.47945205 65.9702265 38.8931507 82.838835 31.4136986 17.2177994 0"></polygon>
            </g>
            <g id="Group" transform="translate(66.000000, 31.000000)" fill="#298E97">
                <polygon id="path2_fill" points="0.159375 7.48695652 16.840625 0.182608696 16.840625 16.5130435 0.159375 23.8173913 0.159375 7.48695652"></polygon>
            </g>
            <g id="Group" transform="translate(0.000000, 7.000000)" fill="#49C1BF">
                <polygon id="path3_fill" points="0.0804878049 0 0.0804878049 17.0661765 45.6365854 39.0661765 0.0804878049 61.5245098 0.0804878049 78.3480392 65.8926829 110 65.8926829 93.0686275 21.195122 71.4460784 65.8926829 48.5833333 65.8926829 31.7058824"></polygon>
            </g>
            <g id="Group" transform="translate(66.000000, 57.000000)" fill="#298E97">
                <polygon id="path4_fill" points="0.159375 60.3222222 16.840625 52.7819444 16.840625 0.107718254 0.159375 7.72878472"></polygon>
            </g>
        </g>
    </g>
</svg>

'''
'''--- src/assets/icons/ledger/bluetooth-pairing.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 17.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 width="400px" height="294.232px" viewBox="0 0 400 294.232" enable-background="new 0 0 400 294.232" xml:space="preserve">
<path fill="#367E99" d="M877.773-877.602c-0.631,0-1.261-0.242-1.74-0.726l-38.846-39.199c-0.952-0.96-0.945-2.512,0.016-3.464
	c0.961-0.954,2.511-0.944,3.464,0.016l38.846,39.199c0.952,0.96,0.945,2.512-0.016,3.464
	C879.019-877.838,878.397-877.602,877.773-877.602z"/>
<path fill="#367E99" d="M965.201-921.882c-0.603-0.185-1.135-0.601-1.452-1.203l-25.676-48.85c-0.63-1.197-0.169-2.679,1.029-3.308
	c1.198-0.631,2.678-0.168,3.308,1.029l25.676,48.85c0.63,1.197,0.169,2.679-1.029,3.308
	C966.462-921.743,965.797-921.699,965.201-921.882z"/>
<path fill="#367E99" d="M1067.412-938.388c-0.339-0.532-0.473-1.194-0.323-1.858l12.195-53.822c0.298-1.319,1.611-2.147,2.931-1.848
	c1.321,0.298,2.146,1.611,1.848,2.931l-12.195,53.822c-0.298,1.319-1.611,2.147-2.931,1.848
	C1068.281-937.464,1067.747-937.862,1067.412-938.388z"/>
<g>
	<g>
		<g>
			<g>
				<g>
					<g>
						<g>
							<g>
								<g>
									<g>
										<circle fill="#00E676" cx="191.103" cy="110.476" r="18.917"/>
									</g>
								</g>
							</g>
						</g>
					</g>
				</g>
			</g>
		</g>
	</g>
	<path fill="#FFFFFF" d="M200.008,115.338l-5.881-4.884l5.884-4.906c0.423-0.353,0.667-0.876,0.664-1.426
		c-0.002-0.551-0.25-1.072-0.676-1.421l-8.175-6.703c-0.552-0.453-1.316-0.547-1.961-0.241c-0.646,0.305-1.057,0.956-1.057,1.67
		v8.608l-5.133-4.263l-2.361,2.842l7.039,5.846l-7.042,5.872l2.366,2.838l5.131-4.278v8.634c0,0.716,0.413,1.367,1.061,1.672
		c0.251,0.118,0.519,0.176,0.786,0.176c0.422,0,0.84-0.145,1.178-0.424l8.175-6.766c0.424-0.351,0.669-0.872,0.669-1.422
		C200.675,116.211,200.431,115.689,200.008,115.338L200.008,115.338z M192.5,101.33l3.428,2.811L192.5,107V101.33z M192.5,119.598
		v-5.693l3.433,2.851L192.5,119.598z"/>
	<path fill="#FFFFFF" d="M188.351,110.46l-7.042,5.872l2.366,2.838l5.131-4.278v8.634c0,0.716,0.413,1.367,1.061,1.672
		c0.251,0.118,0.519,0.176,0.786,0.176c0.422,0,0.84-0.145,1.178-0.424l8.175-6.766c0.424-0.351,0.669-0.872,0.669-1.422
		c0-0.55-0.244-1.071-0.667-1.423l-5.881-4.884L188.351,110.46z M192.5,119.598v-5.693l3.433,2.851L192.5,119.598z"/>
</g>
<path fill="#ED985F" d="M377.659,124.215L377.659,124.215c0.538,0.64,1.096,1.285,1.675,1.927
	C378.81,125.484,378.261,124.836,377.659,124.215z"/>
<path fill="none" stroke="#ED985F" stroke-miterlimit="10" d="M396.264,141.29"/>
<g>
	<path fill="#01DAFF" d="M118.697,216.624H60.023c-4.629,0-8.382-3.753-8.382-8.382V88.799c0-4.629,3.753-8.382,8.382-8.382h58.674
		c4.629,0,8.382,3.753,8.382,8.382v119.444C127.079,212.872,123.327,216.624,118.697,216.624z"/>
	<path opacity="0.4" fill="#0BC7DB" d="M51.718,86.438C51.462,87.242,51,87.91,51,88.799v119.444c0,4.629,4.394,8.758,9.023,8.758
		h49.416C72.698,189,56.181,112.05,51.718,86.438z"/>
	<path fill="#5C6B7B" d="M122.469,208.242H56.252c-1.389,0-2.515-1.126-2.515-2.515V91.313c0-1.389,1.126-2.515,2.515-2.515h66.218
		c1.389,0,2.515,1.126,2.515,2.515v114.414C124.984,207.116,123.858,208.242,122.469,208.242z"/>
	<path fill="#060707" d="M95.365,85.678H81.115c-0.694,0-1.257-0.563-1.257-1.257c0-0.694,0.563-1.257,1.257-1.257h14.249
		c0.694,0,1.257,0.563,1.257,1.257C96.622,85.115,96.059,85.678,95.365,85.678z"/>
	<path fill="#060707" d="M96.485,214.529H82.236c-0.694,0-1.257-0.563-1.257-1.257v-1.676c0-0.694,0.563-1.257,1.257-1.257h14.249
		c0.694,0,1.257,0.563,1.257,1.257v1.676C97.742,213.966,97.18,214.529,96.485,214.529z"/>
</g>
<g>
	<path fill="#34414C" d="M113,144c0,1.657-1.343,3-3,3H68c-1.657,0-3-1.343-3-3v-33c0-1.657,1.343-3,3-3h42c1.657,0,3,1.343,3,3V144
		z"/>
	<path fill="#979CA0" d="M114,143c0,1.657-1.343,3-3,3H69c-1.657,0-3-1.343-3-3v-33c0-1.657,1.343-3,3-3h42c1.657,0,3,1.343,3,3V143
		z"/>
</g>
<g>
	<path fill="#00E676" d="M70.63,130.439c0-2.614,1.639-4.862,4.753-4.862c1.178,0,2.113,0.352,3.102,1.205
		c0.365,0.338,0.406,0.935,0.041,1.314c-0.366,0.325-0.921,0.284-1.246-0.041c-0.555-0.583-1.124-0.745-1.896-0.745
		c-2.086,0-3.087,1.476-3.087,3.128c0,1.679,0.989,3.223,3.087,3.223c0.772,0,1.49-0.311,2.113-0.867
		c0.42-0.325,1.002-0.162,1.246,0.163c0.217,0.298,0.325,0.799-0.149,1.273c-0.948,0.88-2.086,1.056-3.21,1.056
		C72.107,135.287,70.63,133.053,70.63,130.439z"/>
	<path fill="#00E676" d="M85.265,135.328c-2.505,0.108-5.105-1.557-5.105-4.876c0-3.331,2.6-4.97,5.105-4.97
		c2.37,0.122,4.848,1.76,4.848,4.97C90.113,133.662,87.635,135.328,85.265,135.328z M85.116,127.243c-1.517,0-3.169,1.07-3.169,3.21
		c0,2.126,1.652,3.21,3.169,3.21c1.557,0,3.223-1.083,3.223-3.21C88.339,128.313,86.673,127.243,85.116,127.243z"/>
	<path fill="#00E676" d="M92.694,135.193c-0.447,0-0.935-0.244-0.935-0.84v-7.692c0-0.488,0.488-0.84,0.935-0.84h3.101
		c6.189,0,6.053,9.372,0.122,9.372H92.694z M93.547,127.473v6.067h2.248c3.657,0,3.819-6.067,0-6.067H93.547z"/>
	<path fill="#00E676" d="M102.804,135.193c-0.474,0-0.84-0.366-0.84-0.84v-7.692c0-0.488,0.366-0.84,0.84-0.84h4.862
		c1.246,0,1.219,1.761,0,1.761h-3.9v2.031h3.413c1.205,0,1.205,1.774,0,1.774h-3.413v2.031h4.131c1.232,0,1.327,1.774,0,1.774
		H102.804z"/>
</g>
<g>
	<rect x="66" y="116" fill="#878C8E" width="48" height="1"/>
</g>
<path fill="#9DA2A5" d="M368.119,128.062c-5.273-1.108-15.524-3.334-15.524-3.334l-10.597-5.038c-1.032,1.163-1.906,2.5-2.557,4.005
	l-34.452,79.731c0,0,1.553,1.474,4.809,2.423l0.146-0.29l22.601,9.726l34.435-79.69
	C368.043,133.135,368.386,130.549,368.119,128.062z"/>
<rect x="257.417" y="112.898" transform="matrix(0.9963 0.086 -0.086 0.9963 12.0657 -26.191)" fill="#5C6B7B" width="105" height="28"/>
<path fill="#526270" d="M294.613,111.524l-35.798-3.091l-2.409,27.896l68.553,5.919
	C309.558,132.484,299.387,118.906,294.613,111.524z"/>
<path fill="#526270" d="M335.114,143.125l8.241-17.941c0,0,3.472-7.27,10.907-8.134l-15.66,26.376L335.114,143.125z"/>
<path fill="#B3B8BD" d="M337.355,217.708l34.435-79.69c3.286-7.605-0.215-16.434-7.819-19.719
	c-7.607-3.289-16.434,0.215-19.719,7.819l-34.452,79.731L337.355,217.708z"/>
<path fill="#878C8E" d="M324.503,196.036l-1.585,3.791l5.116,2.139l2.139-5.116l-3.791-1.585
	C325.648,194.958,324.81,195.302,324.503,196.036z M322.424,201.008l-0.273,0.652c-0.307,0.734,0.037,1.572,0.771,1.879l0.652,0.273
	l0.827-1.977L322.424,201.008z M324.755,204.305l0.827-1.977l1.977,0.827l-0.827,1.977L324.755,204.305z M332.513,200.126
	l0.273-0.652c0.307-0.734-0.037-1.572-0.771-1.879l-0.631-0.264l-0.827,1.977L332.513,200.126z M329.236,202.469l0.827-1.977
	l1.977,0.827l-0.827,1.977L329.236,202.469z M327.915,205.627l0.652,0.273c0.734,0.307,1.572-0.037,1.879-0.771l0.273-0.652
	l-1.977-0.827L327.915,205.627z M327.7,189.878l-0.324,0.774l7.234,3.025l1.713-4.097l-0.692-0.289l-1.389,3.322L327.7,189.878z
	 M332.044,184.871c-0.631,1.508,0.047,3.036,1.656,3.709l0.185,0.077c0.701,0.269,1.482,0.236,2.183-0.069
	c0.654-0.302,1.182-0.822,1.463-1.495l0.042-0.101c0.298-0.713,0.314-1.497,0.088-2.214l-0.012-0.03l-0.715,0.108l0.004,0.049
	c0.209,0.59,0.211,1.214-0.027,1.783c-0.392,0.937-1.404,1.639-2.795,1.129l1.636-3.913l-0.04-0.017c0,0-0.236-0.123-0.358-0.174
	C333.885,183.105,332.589,183.567,332.044,184.871L332.044,184.871z M333.471,187.527c-0.85-0.546-1.159-1.466-0.793-2.342
	c0.273-0.652,0.959-1.203,2.105-0.796L333.471,187.527z M335.434,178.484l0.266,0.111c-0.687,0.097-1.288,0.562-1.553,1.195
	l-0.026,0.061c-0.58,1.386,0.121,2.804,1.731,3.477c1.631,0.682,3.114,0.224,3.685-1.141c0.452-1.08,0.004-1.842-0.213-2.124
	l0.795,0.333l0.307-0.734l-7.195-3.009l-0.315,0.753l2.527,1.057L335.434,178.484z M338.906,181.804
	c-0.401,0.958-1.479,1.248-2.702,0.737c-1.182-0.494-1.736-1.516-1.344-2.453c0.333-0.795,1.295-1.325,2.681-0.745
	C339.049,179.973,339.229,181.03,338.906,181.804z M337.725,173.29l0.04,0.017c-0.305,0.041-1.021,0.267-1.473,1.347
	c-0.571,1.365,0.094,2.696,1.683,3.361c1.589,0.664,3.061,0.179,3.64-1.207c0.315-0.753,0.263-1.375-0.141-1.95l0.713,0.298
	c0.998,0.417,1.306,1.287,0.836,2.409c-0.196,0.468-0.523,0.907-0.926,1.241l-0.038,0.031l0.512,0.549l0.038-0.031
	c0.487-0.419,0.876-0.95,1.115-1.522c0.503-1.202,0.428-2.741-1.264-3.449l-5.011-2.095l-0.315,0.753L337.725,173.29z
	 M340.986,176.425c-0.417,0.998-1.464,1.326-2.667,0.823c-1.223-0.512-1.677-1.371-1.268-2.35c0.452-1.08,1.295-1.325,2.58-0.788
	C340.904,174.619,341.395,175.447,340.986,176.425L340.986,176.425z M338.614,169.16c-0.631,1.508,0.056,3.015,1.646,3.68
	l0.184,0.077c0.701,0.269,1.482,0.236,2.183-0.069c0.654-0.302,1.182-0.822,1.463-1.495l0.042-0.101
	c0.298-0.713,0.314-1.497,0.088-2.214l-0.012-0.03l-0.723,0.129l0.004,0.049c0.209,0.59,0.211,1.214-0.027,1.783
	c-0.392,0.937-1.404,1.639-2.795,1.129l1.644-3.931l-0.04-0.017c0,0-0.236-0.123-0.358-0.174
	C340.464,167.372,339.167,167.835,338.614,169.16z M340.049,171.796c-0.85-0.546-1.159-1.466-0.793-2.342
	c0.273-0.652,0.959-1.203,2.105-0.796L340.049,171.796z M340.956,163.842c-0.063,0.093-0.098,0.175-0.159,0.268
	c-0.298,0.713-0.096,1.492,0.529,2.113l-1.162-0.486l-0.315,0.753l5.165,2.135l0.04,0.017l0.324-0.774l-2.18-0.911
	c-0.327-0.137-0.656-0.322-0.919-0.553c-0.693-0.577-0.971-1.34-0.699-1.992c0.034-0.082,0.068-0.163,0.123-0.236l0.017-0.04
	l-0.753-0.315L340.956,163.842z"/>
<path opacity="0.3" fill="#A5A8AA" d="M369.309,122.212c1.23,2.549,1.897,6.221,0.271,11.176
	c-3.188,9.709-28.162,67.278-36.809,82.347l4.585,1.973l34.435-79.69C374.158,132.537,372.987,126.431,369.309,122.212z"/>
<path fill="#34414C" d="M269.732,131.502c-4.41,0-7.998-3.588-7.998-7.998s3.588-7.997,7.998-7.997s7.998,3.587,7.998,7.997
	S274.142,131.502,269.732,131.502z M269.732,116.507c-3.858,0-6.998,3.139-6.998,6.997s3.139,6.998,6.998,6.998
	s6.998-3.139,6.998-6.998S273.59,116.507,269.732,116.507z"/>
<g>
	<g>
		<path fill="#00E676" d="M326.45,134.282c-0.166,1.926-1.862,3.353-3.787,3.187l-34.871-3.004
			c-1.926-0.166-3.353-1.862-3.187-3.787l0.944-10.959c0.166-1.926,1.862-3.353,3.787-3.187l34.871,3.004
			c1.926,0.166,3.353,1.862,3.187,3.787L326.45,134.282z M326.398,123.237c0.118-1.376-0.901-2.587-2.276-2.705l-34.871-3.004
			c-1.376-0.119-2.587,0.901-2.705,2.276l-0.944,10.959c-0.118,1.376,0.901,2.587,2.276,2.705l34.871,3.004
			c1.376,0.118,2.587-0.901,2.705-2.276L326.398,123.237z"/>
	</g>
	<g>
		<path fill="#00E676" d="M289.001,125.49c0.202-2.341,1.843-4.228,4.633-3.988c1.055,0.091,1.865,0.478,2.685,1.319
			c0.301,0.331,0.292,0.868-0.065,1.18c-0.352,0.263-0.846,0.184-1.113-0.133c-0.452-0.565-0.949-0.754-1.641-0.813
			c-1.868-0.161-2.879,1.084-3.007,2.564c-0.13,1.504,0.637,2.963,2.517,3.125c0.692,0.06,1.358-0.164,1.959-0.613
			c0.401-0.259,0.91-0.068,1.103,0.242c0.172,0.284,0.23,0.741-0.231,1.128c-0.917,0.715-1.95,0.785-2.957,0.699
			C289.949,129.946,288.799,127.83,289.001,125.49z"/>
		<path fill="#00E676" d="M301.731,130.997c-2.253-0.097-4.453-1.789-4.197-4.761c0.257-2.984,2.712-4.251,4.957-4.057
			c2.113,0.292,4.207,1.951,3.959,4.825C306.202,129.879,303.853,131.18,301.731,130.997z M302.221,123.744
			c-1.358-0.117-2.921,0.714-3.086,2.63c-0.164,1.904,1.232,3.002,2.59,3.119c1.395,0.12,2.971-0.722,3.135-2.626
			C305.025,124.952,303.616,123.865,302.221,123.744z"/>
		<path fill="#00E676" d="M308.395,131.449c-0.401-0.035-0.818-0.29-0.772-0.824l0.594-6.889c0.038-0.437,0.501-0.715,0.902-0.68
			l2.777,0.239c5.544,0.478,4.699,8.861-0.613,8.403L308.395,131.449z M309.754,124.601l-0.468,5.434l2.013,0.173
			c3.275,0.282,3.889-5.139,0.468-5.434L309.754,124.601z"/>
		<path fill="#00E676" d="M317.45,132.229c-0.425-0.037-0.724-0.392-0.687-0.817l0.594-6.889c0.038-0.437,0.392-0.724,0.817-0.687
			l4.354,0.375c1.116,0.096,0.956,1.671-0.136,1.577l-3.493-0.301l-0.157,1.819l3.057,0.263c1.08,0.093,0.943,1.682-0.137,1.589
			l-3.057-0.263l-0.157,1.819l3.7,0.319c1.104,0.095,1.052,1.691-0.137,1.589L317.45,132.229z"/>
	</g>
</g>
<g>
	<path fill="#00E676" d="M147.831,118.202c-2.575,0.5-5.178,1.043-7.735,1.611c-0.264,0.059-0.43,0.32-0.372,0.584
		c0.051,0.228,0.253,0.383,0.478,0.383c0.035,0,0.071-0.004,0.107-0.011c2.549-0.567,5.143-1.108,7.709-1.607
		c0.266-0.052,0.439-0.308,0.387-0.574C148.353,118.323,148.095,118.148,147.831,118.202z"/>
	<path fill="#00E676" d="M132.407,121.634c-1.828,0.46-3.629,0.94-5.407,1.427v1.015c1.854-0.51,3.736-1.012,5.646-1.493
		c0.262-0.066,0.421-0.332,0.355-0.594C132.935,121.727,132.669,121.568,132.407,121.634z"/>
	<path fill="#00E676" d="M163.416,115.593c-2.594,0.364-5.221,0.768-7.809,1.202c-0.267,0.044-0.446,0.297-0.402,0.564
		c0.04,0.239,0.248,0.409,0.482,0.409c0.027,0,0.054-0.002,0.081-0.007c2.579-0.432,5.198-0.835,7.783-1.198
		c0.268-0.038,0.455-0.285,0.417-0.553C163.93,115.742,163.679,115.552,163.416,115.593z"/>
	<path fill="#00E676" d="M226.455,113.977c-2.595-0.256-5.243-0.472-7.872-0.643c-0.273-0.02-0.503,0.187-0.52,0.457
		s0.187,0.502,0.457,0.52c2.618,0.17,5.255,0.385,7.839,0.64c0.016,0.001,0.033,0.002,0.049,0.002c0.249,0,0.461-0.189,0.487-0.442
		C226.921,114.243,226.725,114.003,226.455,113.977z"/>
	<path fill="#00E676" d="M257.574,119.307c-2.53-0.631-5.12-1.224-7.701-1.763c-0.269-0.055-0.524,0.114-0.579,0.379
		c-0.055,0.264,0.114,0.524,0.379,0.579c2.569,0.537,5.147,1.128,7.664,1.756c0.04,0.01,0.079,0.014,0.119,0.014
		c0.22,0,0.42-0.149,0.475-0.371C257.996,119.638,257.836,119.372,257.574,119.307z"/>
	<path fill="#00E676" d="M242.112,116.073c-2.568-0.438-5.196-0.837-7.81-1.186c-0.264-0.038-0.514,0.152-0.55,0.42
		c-0.036,0.268,0.152,0.514,0.42,0.55c2.603,0.348,5.219,0.745,7.775,1.181c0.028,0.005,0.055,0.007,0.083,0.007
		c0.234,0,0.441-0.169,0.482-0.407C242.557,116.371,242.379,116.118,242.112,116.073z"/>
</g>
<g>
	<path fill="#9DA2A5" d="M357.084,142.51c-5.082-0.439-8.859-4.93-8.42-10.011c0.439-5.082,4.93-8.859,10.011-8.42
		s8.859,4.93,8.42,10.011S362.166,142.948,357.084,142.51z M358.59,125.074c-4.532-0.391-8.538,2.978-8.929,7.51
		s2.978,8.538,7.51,8.929c4.532,0.391,8.538-2.978,8.929-7.51C366.491,129.472,363.122,125.466,358.59,125.074z"/>
</g>
</svg>

'''
'''--- src/assets/icons/ledger/connect-nano-s.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 17.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 width="400px" height="294.232px" viewBox="0 0 400 294.232" enable-background="new 0 0 400 294.232" xml:space="preserve">
<path fill="#367E99" d="M877.773-877.602c-0.631,0-1.261-0.242-1.74-0.726l-38.846-39.199c-0.952-0.96-0.945-2.512,0.016-3.464
	c0.961-0.954,2.511-0.944,3.464,0.016l38.846,39.199c0.952,0.96,0.945,2.512-0.016,3.464
	C879.019-877.838,878.397-877.602,877.773-877.602z"/>
<path fill="#367E99" d="M965.201-921.882c-0.603-0.185-1.135-0.601-1.452-1.203l-25.676-48.85c-0.63-1.197-0.169-2.679,1.029-3.308
	c1.198-0.631,2.678-0.168,3.308,1.029l25.676,48.85c0.63,1.197,0.169,2.679-1.029,3.308
	C966.462-921.743,965.797-921.699,965.201-921.882z"/>
<path fill="#367E99" d="M1067.412-938.388c-0.339-0.532-0.473-1.194-0.323-1.858l12.195-53.822c0.298-1.319,1.611-2.147,2.931-1.848
	c1.321,0.298,2.146,1.611,1.848,2.931l-12.195,53.822c-0.298,1.319-1.611,2.147-2.931,1.848
	C1068.281-937.464,1067.747-937.862,1067.412-938.388z"/>
<g id="path-1_4_">
</g>
<g id="path-1_6_">
</g>
<ellipse cx="-581.82" cy="548.841" rx="52.18" ry="8.492"/>
<path fill="#04D2EF" d="M-589.178,475.332c0,0,27.492,16.57,55.585,16.619L-549,554c0,0-45.833,6.5-77-2.242L-589.178,475.332z"/>
<path fill="#09C5D8" d="M-544.002,491.228l-23.062,64.495C-556.306,555.035-549,554-549,554l15.407-62.049
	C-537.089,491.945-540.576,491.682-544.002,491.228z"/>
<path fill="#F3A56E" d="M-286.5,55"/>
<g>
	<polyline fill="#E08546" points="95.116,122.809 88.349,60.115 115.922,60.206 138.57,85.496 135.558,105.324 126.059,118.141 	"/>
	<path fill="#E08546" d="M302.157,68.514c0,0-20.48,3.07-37.043,13.597c-16.563,10.527,5.638,21.151,5.638,21.151l38.164,19.052
		l15.892-7.958l18.747-36.635"/>
	<polyline fill="#5C6B7B" points="259.147,88 259.897,76.417 258.425,75.673 248.147,75.583 246.397,80.25 246.147,86.167 
		245.677,88.632 250.23,89.083 255.48,88.5 258.314,88.25 	"/>
	<polygon fill="#4B5966" points="257.311,150.288 254.021,158.457 255.082,159.412 259.008,150.818 	"/>
	<polygon fill="#5C6B7B" points="265.481,154.319 261.024,162.383 255.082,159.412 259.327,150.075 	"/>
	<path fill="#F3A56E" d="M98.156,220.634l3.501-20.053c0,0,28.648,5.73,47.428-5.093l0.637,22.6
		C149.722,218.087,111.525,228.91,98.156,220.634z"/>
	<g>
		<ellipse cx="117.161" cy="275.106" rx="55.161" ry="8.977"/>
		<path fill="#04D2EF" d="M154.924,280.295l-4.353-71.439c0,0-22.388,13.051-51.354,2.865l-19.307,68.222
			C79.911,279.943,107.043,287.428,154.924,280.295z"/>
		<path fill="#09C5D8" d="M141.128,217.132c6.119-3.443,9.549-7.321,9.549-7.321l4.247,70.487
			c-9.385,1.398-17.943,2.209-25.658,2.619L141.128,217.132z"/>
	</g>
	<path fill="#E5925A" d="M257.629,107.422l20.593,1.898c7.565-13.242,19.721-33.95,25.88-41.368l36.499,19.735l0.849,16.34
		l-21.008,34.802l-2.971,0.424l-17.613-11.883l-22.734-5.128c-0.766-0.149-1.59-0.332-2.451-0.553l-3.038-0.685
		c0,0,0.043-0.077,0.106-0.191C265.914,118.814,259.48,114.937,257.629,107.422z"/>
	<path fill="#E08546" d="M311.741,117.82l-4.669-8.064l-2.971-26.313l-4.992-8.634c1.889-2.806,3.596-5.175,4.992-6.857
		l36.499,19.735l0.849,16.34l-21.008,34.802l-2.971,0.424l-7.591-5.122C309.996,129.757,310.391,121.722,311.741,117.82z"/>
	<path fill="#F3A56E" d="M399.647,134.667c0,0-18.355-44.699-21.857-46.608s-40.107-20.213-53.953-24.351l-5.252-2.069
		c0,0-33.9,3.82-40.584,11.618c0,0,3.82,9.39,23.077,6.207c0,0,12.573,0.796,17.03-1.592c0,0,9.868,8.753,14.961,10.822
		c0,0-18.303,29.603-17.507,48.701c0,0,19.523,20.743,26.95,25.624c7.427,4.881,18.25,12.732,33.529,13.369l14.43,12.52
		L399.647,134.667z"/>
	<path fill="#ED985F" d="M298.797,76.44c4.421,0.769,15.63-2.814,17.704-3.497c-0.517-4.172,0.73-7.579,0.799-7.763
		c0.124-0.329,0.492-0.495,0.821-0.371c0.329,0.124,0.495,0.492,0.371,0.821c-0.017,0.044-1.352,3.678-0.615,7.893l17.844,11.83
		c0,0,2.334-2.122-0.637,0.849c-0.682,0.682-1.407,1.625-2.122,2.667c0.062-0.102,0.106-0.173,0.106-0.173
		c-5.093-2.069-14.961-10.822-14.961-10.822c-4.456,2.387-17.03,1.592-17.03,1.592c-15.234,2.518-20.803-2.829-22.467-5.174
		C287.701,78.318,298.797,76.44,298.797,76.44z"/>
	<g>
		<path fill="#ED985F" d="M320.299,114.79c8.302,3.34,19.116,19.951,24.758,31.041c6.154,12.096,30.982,13.581,30.982,13.581
			l14.594,9.189l-0.164,20.307l-14.43-12.52c-15.279-0.637-26.101-8.488-33.529-13.369c-7.427-4.881-26.95-25.624-26.95-25.624
			C315.277,130.589,317.424,122.45,320.299,114.79z"/>
	</g>
	<g>
		<path fill="#E08546" d="M317.682,121.852c0.234,0,0.458-0.129,0.57-0.352c0.157-0.315,0.03-0.697-0.285-0.854l-13.741-6.845
			l-9.549-1.91c-0.351-0.073-0.68,0.154-0.749,0.499c-0.069,0.345,0.155,0.68,0.499,0.749l9.466,1.893l13.504,6.752
			C317.49,121.83,317.587,121.852,317.682,121.852z"/>
	</g>
	<path fill="#526270" d="M274.424,96.595l7.19-15.654c0,0,3.029-6.343,9.517-7.097l-13.664,23.013L274.424,96.595z"/>
	<path fill="#5C6B7B" d="M207.852,66.324l-2.102,24.34l91.276,7.881l2.102-24.34L207.852,66.324z M255.333,84.43
		c-0.847,1.155-2.223,1.688-3.547,1.513c0.137-0.16,0.276-0.326,0.417-0.495l0.199-0.243c0.473-0.58,0.959-1.207,1.446-1.871
		c0.702-0.956,1.333-1.889,1.87-2.75C256.278,81.799,256.18,83.275,255.333,84.43z M253.438,83.017
		c-2.602,3.537-5.182,6.058-5.762,5.631c-0.379-0.279,0.189-1.747,1.354-3.717c-0.553,1.406-0.6,2.029-0.366,2.201
		c0.266,0.196,1.072-0.404,2.102-1.492c-0.247-0.109-0.486-0.246-0.713-0.413c-1.684-1.24-2.045-3.61-0.805-5.295
		c1.24-1.685,3.61-2.045,5.294-0.806c0.227,0.167,0.428,0.355,0.606,0.558c0.732-1.307,1.065-2.255,0.799-2.451
		c-0.233-0.172-0.9,0.117-1.992,1.005c1.534-1.698,2.766-2.677,3.145-2.399C257.68,76.267,256.041,79.48,253.438,83.017z"/>
	<g>
		<path fill="#00E676" d="M271.254,88.512c-0.111-0.01-0.219-0.062-0.296-0.154c-0.155-0.184-0.131-0.459,0.053-0.615l4.241-3.567
			l-3.47-4.424c-0.149-0.189-0.116-0.464,0.074-0.612c0.189-0.15,0.464-0.116,0.612,0.074l3.991,5.087l-4.887,4.11
			C271.48,88.489,271.366,88.522,271.254,88.512z"/>
	</g>
	<g>
		<path fill="#00E676" d="M236.384,85.061c0.111,0.01,0.226-0.023,0.318-0.101c0.184-0.155,0.208-0.43,0.053-0.615l-3.567-4.242
			l4.177-3.764c0.179-0.161,0.193-0.437,0.032-0.616c-0.161-0.18-0.437-0.194-0.616-0.032l-4.804,4.328l4.11,4.887
			C236.165,85,236.273,85.052,236.384,85.061z"/>
	</g>
	<g>
		<path fill="#34414C" d="M218.65,86.453c-3.848,0-6.978-3.131-6.978-6.978s3.131-6.978,6.978-6.978c3.848,0,6.978,3.13,6.978,6.978
			S222.497,86.453,218.65,86.453z M218.65,73.369c-3.367,0-6.106,2.739-6.106,6.105c0,3.367,2.739,6.106,6.106,6.106
			s6.106-2.739,6.106-6.106C224.755,76.108,222.016,73.369,218.65,73.369z"/>
	</g>
	<g>
		<path fill="#00E676" d="M257.238,90.446c-0.103,0-0.207-0.005-0.312-0.016l-10.416-1.058c-0.812-0.083-1.543-0.476-2.058-1.108
			c-0.516-0.632-0.754-1.427-0.672-2.239l0.97-9.549c0.17-1.668,1.648-2.906,3.347-2.73l10.417,1.058
			c1.674,0.17,2.9,1.671,2.729,3.347l-0.97,9.549C260.114,89.266,258.809,90.446,257.238,90.446z M247.785,74.603
			c-1.122,0-2.054,0.843-2.167,1.961l-0.97,9.549c-0.059,0.579,0.111,1.147,0.48,1.599c0.368,0.451,0.89,0.732,1.47,0.791
			l10.417,1.058c1.207,0.127,2.269-0.758,2.391-1.95l0.97-9.548c0.121-1.197-0.754-2.269-1.95-2.391l-10.417-1.058
			C247.933,74.607,247.859,74.603,247.785,74.603z"/>
	</g>
	<path opacity="0.4" fill="#505F6D" d="M207.852,66.324l0.07,0.006c2.823,9.577,16.405,25.559,74.747,28.784
		c5.208,0.288,10.073,0.389,14.625,0.327l-0.268,3.105l-91.276-7.881L207.852,66.324z"/>
	<path fill="#B3B8BD" d="M250.617,146.559l31.879-66.571c3.042-6.353,10.358-8.884,16.34-5.654
		c5.986,3.231,8.366,10.999,5.324,17.352l-31.895,66.605L250.617,146.559z"/>
	<g>
		<path fill="#9DA2A5" d="M287.996,80.388c2.942-3.082,7.696-3.048,10.598,0.076c2.902,3.124,2.87,8.172-0.072,11.254
			c-2.942,3.082-7.696,3.048-10.598-0.076C285.022,88.518,285.054,83.47,287.996,80.388z M288.565,81.001
			c-2.623,2.748-2.652,7.251-0.064,10.037c2.588,2.786,6.829,2.816,9.452,0.068s2.652-7.251,0.064-10.037
			C295.429,78.283,291.189,78.252,288.565,81.001z"/>
	</g>
	<path fill="#878C8E" d="M265.846,139.428l-1.567,3.12l4.165,1.841l2.115-4.21l-3.086-1.364
		C266.875,138.55,266.149,138.824,265.846,139.428z M263.79,143.52l-0.27,0.537c-0.303,0.604-0.067,1.303,0.531,1.567l0.531,0.235
		l0.817-1.627L263.79,143.52z M265.544,146.284l0.817-1.627l1.609,0.711l-0.817,1.627L265.544,146.284z M272.321,142.925l0.27-0.537
		c0.303-0.604,0.067-1.303-0.531-1.567l-0.514-0.227l-0.817,1.627L272.321,142.925z M269.422,144.821l0.817-1.627l1.609,0.711
		l-0.817,1.627L269.422,144.821z M268.116,147.421l0.531,0.235c0.598,0.264,1.323-0.009,1.626-0.614l0.27-0.537l-1.609-0.711
		L268.116,147.421z M268.915,134.368l-0.32,0.637l5.889,2.603l1.694-3.372l-0.564-0.249l-1.374,2.735L268.915,134.368z
		 M272.876,130.277c-0.624,1.241-0.149,2.516,1.161,3.096l0.151,0.067c0.572,0.232,1.231,0.215,1.838-0.028
		c0.568-0.241,1.044-0.665,1.322-1.219l0.042-0.083c0.295-0.587,0.357-1.236,0.211-1.833l-0.008-0.025l-0.607,0.08l0,0.041
		c0.139,0.492,0.102,1.008-0.134,1.477c-0.387,0.771-1.281,1.339-2.418,0.898l1.618-3.221l-0.033-0.014c0,0-0.191-0.105-0.29-0.149
		C274.532,128.838,273.415,129.204,272.876,130.277L272.876,130.277z M273.909,132.497c-0.68-0.464-0.883-1.23-0.52-1.951
		c0.27-0.537,0.88-0.984,1.818-0.631L273.909,132.497z M276.12,125.03l0.216,0.096c-0.583,0.071-1.117,0.448-1.379,0.969
		l-0.025,0.05c-0.573,1.141-0.073,2.325,1.238,2.905c1.328,0.587,2.602,0.227,3.166-0.896c0.447-0.889,0.118-1.526-0.047-1.763
		l0.647,0.286l0.303-0.604l-5.858-2.589l-0.311,0.62l2.057,0.909L276.12,125.03z M278.831,127.827
		c-0.396,0.788-1.32,1.015-2.316,0.574c-0.962-0.425-1.364-1.28-0.976-2.051c0.329-0.654,1.171-1.081,2.299-0.582
		C279.065,126.312,279.151,127.19,278.831,127.827z M278.368,120.756l0.033,0.014c-0.258,0.03-0.875,0.208-1.321,1.097
		c-0.564,1.123-0.089,2.236,1.205,2.807s2.56,0.189,3.133-0.951c0.311-0.62,0.306-1.136,0.002-1.618l0.581,0.257
		c0.813,0.359,1.017,1.084,0.553,2.008c-0.194,0.386-0.496,0.744-0.855,1.016l-0.034,0.026l0.396,0.462l0.034-0.026
		c0.435-0.34,0.795-0.776,1.031-1.246c0.497-0.99,0.53-2.266-0.848-2.875l-4.08-1.803l-0.311,0.62L278.368,120.756z
		 M280.913,123.398c-0.413,0.821-1.313,1.079-2.292,0.647c-0.996-0.44-1.324-1.158-0.919-1.964c0.447-0.889,1.171-1.081,2.216-0.618
		C280.956,121.9,281.318,122.593,280.913,123.398L280.913,123.398z M279.372,117.346c-0.624,1.241-0.141,2.499,1.154,3.071
		l0.149,0.066c0.572,0.232,1.231,0.215,1.838-0.028c0.568-0.241,1.044-0.665,1.322-1.219l0.042-0.083
		c0.295-0.587,0.357-1.236,0.211-1.833l-0.008-0.025l-0.616,0.097l0,0.041c0.139,0.492,0.102,1.008-0.134,1.477
		c-0.387,0.771-1.281,1.339-2.418,0.898l1.625-3.235l-0.033-0.014c0,0-0.191-0.105-0.29-0.149
		C281.037,115.889,279.919,116.256,279.372,117.346z M280.414,119.549c-0.68-0.464-0.883-1.23-0.52-1.951
		c0.27-0.537,0.88-0.984,1.818-0.631L280.414,119.549z M281.67,112.971c-0.059,0.076-0.093,0.144-0.151,0.22
		c-0.295,0.587-0.173,1.235,0.313,1.758l-0.946-0.418l-0.311,0.62l4.206,1.838l0.033,0.014l0.32-0.637l-1.774-0.784
		c-0.266-0.118-0.531-0.275-0.738-0.47c-0.546-0.488-0.733-1.124-0.463-1.66c0.034-0.068,0.067-0.134,0.118-0.194l0.017-0.033
		l-0.613-0.271L281.67,112.971z"/>
	<path opacity="0.3" fill="#A5A8AA" d="M293.634,72.948c-2.226,0.585-4.86,2.161-7.108,5.959
		c-4.405,7.444-27.384,55.601-32.307,69.603l-3.602-1.952l31.879-66.571C284.688,75.409,289.101,72.831,293.634,72.948z"/>
	<g>
		<g>
			<path fill="#F3A56E" d="M351.318,108.589c0,0-19.841-5.836-30.77-17.931c0,0-21.963-18.037-32.255-8.7
				c0,0-5.411,5.836-0.212,12.414c0,0,9.549,11.141,25.783,16.552c0,0,6.472,1.379,13.899,13.157
				c7.427,11.777,21.327,41.062,47.216,27.693C374.979,151.773,372.22,113.152,351.318,108.589z"/>
			<path fill="#ED985F" d="M288.293,81.957c10.292-9.337,32.255,8.7,32.255,8.7c0.301,0.333,0.612,0.66,0.926,0.984
				c-0.82,3.724-2.985,11.185-8.241,19.052c-15.842-5.487-25.152-16.323-25.152-16.323
				C282.881,87.793,288.293,81.957,288.293,81.957z"/>
			<g>
				<path fill="#E08546" d="M295.661,83.885c-2.224,0-3.764,0.706-4.578,2.097c-2.627,4.493,4.858,9.874,6.909,11.234l7.39-10.684
					C303.739,85.769,299.314,83.885,295.661,83.885z M297.837,98.63c-0.471-0.285-11.499-7.052-7.852-13.29
					c1.058-1.81,2.968-2.727,5.677-2.727c4.869,0,10.714,2.977,10.96,3.104l0.645,0.332l-8.918,12.892L297.837,98.63z"/>
			</g>
			<g>
				<path fill="#E08546" d="M317.259,109.119c0.178,0,0.354-0.074,0.481-0.219c4.319-4.967,5.208-11.312,5.243-11.58
					c0.047-0.348-0.198-0.668-0.546-0.715c-0.345-0.045-0.668,0.198-0.716,0.546c-0.008,0.062-0.88,6.242-4.942,10.913
					c-0.231,0.265-0.203,0.668,0.063,0.898C316.962,109.068,317.11,109.119,317.259,109.119z"/>
			</g>
		</g>
	</g>
	<g>
		<path fill="#E08546" d="M376.662,160c0.01,0,0.017,0,0.019,0c0.352-1,0.634-0.154,0.632-0.505
			c-0.003-0.35-0.287-0.495-0.637-0.495c-0.005,0-0.008,0-0.022,0c-0.783,0-25.573-0.395-36.584-16.911l-4.103-6.274
			c-8.647-13.005-12.227-18.442-14.713-20.355c-0.279-0.214-0.678-0.19-0.893,0.09c-0.214,0.279-0.162,0.665,0.117,0.879
			c2.319,1.783,6.114,7.483,14.429,19.989l4.104,6.244C350.392,159.733,375.813,160,376.662,160z"/>
	</g>
	<g>
		<path fill="#E08546" d="M364.581,119.093c0.122,0,0.247-0.035,0.356-0.109c0.292-0.196,0.368-0.592,0.171-0.883
			c-0.221-0.328-5.534-8.071-14.354-10.653c-8.756-2.563-19.031-8.28-21.855-10.5c-0.278-0.219-0.677-0.168-0.894,0.107
			c-0.218,0.277-0.169,0.677,0.107,0.894c2.891,2.271,13.376,8.114,22.284,10.721c8.384,2.453,13.605,10.067,13.657,10.143
			C364.176,118.995,364.377,119.093,364.581,119.093z"/>
	</g>
	<path fill="#E08546" d="M149.746,193.267c0,0,8.38-16.76,3.451-32.534s-36.477-19.225-36.477-19.225"/>
	<polyline fill="#5C6B7B" points="157.256,165.991 160.014,174.479 149.616,177.025 147.706,168.325 	"/>
	<g>
		<path fill="#01DAFF" d="M126.36,176.005l56.783-14.578c4.48-1.15,7.179-5.714,6.029-10.194L159.496,35.639
			c-1.15-4.48-5.714-7.179-10.194-6.029L92.519,44.188c-4.48,1.15-7.179,5.714-6.029,10.194l29.676,115.594
			C117.316,174.455,121.88,177.155,126.36,176.005z"/>
		<path fill="#5C6B7B" d="M120.628,168.83l64.083-16.452c1.344-0.345,2.154-1.714,1.809-3.058L158.093,38.593
			c-0.345-1.344-1.714-2.154-3.058-1.809L90.951,53.236c-1.344,0.345-2.154,1.714-1.809,3.058l28.427,110.726
			C117.914,168.365,119.284,169.175,120.628,168.83z"/>
		<path fill="#060707" d="M116.407,43.482l13.79-3.54c0.672-0.173,1.077-0.857,0.904-1.529c-0.173-0.672-0.857-1.077-1.529-0.904
			l-13.79,3.54c-0.672,0.173-1.077,0.857-0.904,1.529C115.05,43.25,115.735,43.655,116.407,43.482z"/>
		<path fill="#060707" d="M147.336,168.458l13.79-3.54c0.672-0.173,1.077-0.857,0.904-1.529l-0.417-1.622
			c-0.173-0.672-0.857-1.077-1.529-0.904l-13.79,3.54c-0.672,0.173-1.077,0.857-0.904,1.529l0.417,1.622
			C145.98,168.226,146.664,168.631,147.336,168.458z"/>
	</g>
	<path fill="#F3A56E" d="M99.742,195.648c-0.356-1.593-0.556-3.241-0.598-4.931L86.91,89.831c2.06,0.053,3.972,0.463,5.747,1.166
		c18.605,7.375,22.091,47.061,22.091,47.061c36.391,8.78,36.016,43.632,35.248,52.91c-0.474,13.647-11.657,24.573-25.42,24.573
		c-12.128,0-22.257-8.486-24.82-19.839c-0.001,0-0.008-0.002-0.008-0.002L99.742,195.648z"/>
	<path fill="#ED985F" d="M110.782,142.86c-1.064-26.433-17.248-46.922-22.53-52.936c1.554,0.162,3.022,0.525,4.405,1.073
		c18.605,7.375,22.091,47.061,22.091,47.061c36.391,8.78,36.016,43.632,35.248,52.91c-0.474,13.647-11.657,24.573-25.42,24.573
		c-0.863,0-1.711-0.054-2.552-0.138C146.485,184.139,110.782,142.86,110.782,142.86z"/>
	<g>
		<path fill="#5C6B7B" d="M190.656,247.422c21.363,0,38.752-33.233,52.837-60.149c5.565-10.635,10.371-19.819,14.601-25.439
			c0.634-0.842,0.465-2.04-0.378-2.675c-0.842-0.633-2.04-0.464-2.675,0.378c-4.417,5.869-9.289,15.181-14.933,25.965
			c-14.115,26.974-31.691,60.547-51.626,57.96c-27.61-3.575-32.46-69.089-32.505-69.751c-0.073-1.052-0.983-1.844-2.037-1.774
			c-1.052,0.073-1.846,0.985-1.774,2.037c0.195,2.828,5.13,69.301,35.825,73.276C188.885,247.366,189.776,247.422,190.656,247.422z"
			/>
	</g>
	<polyline fill="#04D2EF" points="400,198 400,135 400,133 389.324,189 399.912,199 	"/>
	<g>
		<path fill="#E08546" d="M90.959,113.682c0.038,0,0.077-0.003,0.116-0.011c1.348-0.247,2.449-0.986,3.273-2.195
			c3.177-4.656,1.221-14.985,1.136-15.423l-0.111-0.574l-6.55,0.699c-0.349,0.037-0.602,0.351-0.565,0.701
			c0.038,0.349,0.351,0.601,0.701,0.565l5.375-0.573c0.359,2.217,1.443,10.254-1.038,13.888c-0.635,0.931-1.437,1.473-2.451,1.66
			c-0.346,0.063-0.574,0.395-0.511,0.741C90.39,113.468,90.658,113.682,90.959,113.682z"/>
	</g>
	<g>
		<path fill="#B3B8BD" d="M160.744,104.615c0.57,2.269-0.808,4.571-3.077,5.141l-33.899,8.512c-2.269,0.57-4.571-0.808-5.141-3.077
			l-8.512-33.899c-0.57-2.269,0.808-4.571,3.077-5.141l33.899-8.512c2.269-0.57,4.571,0.808,5.141,3.077L160.744,104.615z"/>
		<path fill="#AAADAF" d="M159.707,107.716l-33.899,8.512c-2.269,0.57-4.571-0.808-5.141-3.077l-8.512-33.899
			c-0.249-0.99-0.109-1.977,0.296-2.833c-1.815,0.836-2.84,2.864-2.336,4.873l8.512,33.899c0.57,2.269,2.871,3.647,5.141,3.077
			l33.899-8.512c1.279-0.321,2.258-1.202,2.781-2.308C160.213,107.556,159.967,107.65,159.707,107.716z"/>
		<g id="Page-1">
			<g id="Group-6" transform="translate(-6.817185, -22.000000)">
				
					<g id="Group-3" transform="translate(76.564123, 117.738076) rotate(-78.000000) translate(-76.564123, -117.738076) translate(-31.935877, 62.738076)">
					<g id="Fill-1-Clipped">
						<g>
							<g id="path-1_1_">
							</g>
							<defs>
								
									<filter id="Adobe_OpacityMaskFilter" filterUnits="userSpaceOnUse" x="106.414" y="-127.363" width="37.431" height="17.307">
									<feColorMatrix  type="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 1 0"/>
								</filter>
							</defs>
							<mask maskUnits="userSpaceOnUse" x="106.414" y="-127.363" width="37.431" height="17.307" id="mask-2_1_">
								<g filter="url(#Adobe_OpacityMaskFilter)">
									<polygon id="path-1_2_" fill="#FFFFFF" points="106.542,108.758 143.717,108.758 143.717,127.633 106.542,127.633 
																			"/>
								</g>
							</mask>
							<path id="Fill-1" mask="url(#mask-2_1_)" fill="#00E676" d="M139.562,124.952c-0.349,0.771-2.9,0.441-6.56-0.696
								c0.415-0.553,0.778-1.158,1.074-1.813c2.207-4.875,0.043-10.615-4.833-12.821c-4.876-2.206-10.617-0.043-12.824,4.832
								c-0.297,0.656-0.512,1.327-0.654,2.004c-3.271-1.999-5.202-3.697-4.853-4.468c0.306-0.676,1.892-0.892,5.705-0.254
								c-5.551-1.867-9.527-2.509-10.024-1.412c-0.76,1.679,6.923,6.795,17.159,11.426c10.237,4.632,19.151,7.026,19.911,5.347
								c0.496-1.097-2.61-3.66-7.677-6.597C138.79,122.762,139.868,124.277,139.562,124.952z"/>
						</g>
					</g>
				</g>
				<path id="Fill-4" fill="#00E676" d="M141.865,122.913c-0.359,0.434-0.715,0.858-1.066,1.268
					c3.388,0.447,6.908-0.917,9.076-3.871c2.168-2.955,2.419-6.731,0.986-9.842c-1.374,2.203-2.99,4.59-4.786,7.037
					c-1.246,1.699-2.49,3.303-3.699,4.787"/>
			</g>
		</g>
	</g>
	<g>
		<g>
			<path fill="#00E676" d="M258.723,91.002c-0.114,0.002-0.228-0.002-0.344-0.012l-11.507-1c-0.897-0.078-1.709-0.5-2.288-1.189
				c-0.579-0.689-0.855-1.562-0.777-2.459l0.916-10.549c0.16-1.842,1.772-3.232,3.648-3.065l11.508,1
				c1.85,0.161,3.226,1.797,3.065,3.648l-0.916,10.549C261.877,89.653,260.457,90.976,258.723,91.002z M248.041,73.678
				c-1.237,0.018-2.252,0.963-2.359,2.199l-0.916,10.549c-0.056,0.64,0.141,1.264,0.555,1.756c0.413,0.492,0.994,0.794,1.635,0.849
				l11.508,1c1.334,0.121,2.491-0.873,2.606-2.19l0.916-10.549c0.114-1.322-0.868-2.491-2.19-2.606l-11.508-1
				C248.204,73.679,248.122,73.676,248.041,73.678z"/>
		</g>
		<g>
			<path fill="#00E676" d="M245.943,89.347l12.972,1.054l2.245-1.457l1.033-9.632l-0.116-4.165l-5.38-1.203l-9.392-0.824
				l-1.977,1.714l-0.911,8.839l-0.025,3.771C244.391,87.445,244.413,88.969,245.943,89.347z"/>
			<path fill="#5C6B7B" d="M255.673,78.273c1.048,0.596,1.81,1.592,2.111,2.76l-1.638-0.157c-0.453-0.965-1.383-1.617-2.444-1.715
				c-1.649-0.159-3.113,1.026-3.271,2.645c-0.158,1.62,1.052,3.061,2.701,3.219c1.061,0.106,2.099-0.357,2.729-1.218l1.638,0.157
				c-0.521,1.089-1.46,1.921-2.604,2.307l-0.181,1.865l-1.493-0.143l0.144-1.481c-0.25-0.004-0.5-0.028-0.747-0.072l-0.144,1.481
				l-1.493-0.144l0.181-1.865c-1.474-0.843-2.396-2.475-2.223-4.25c0.173-1.775,1.392-3.202,3.002-3.749l0.181-1.865l1.493,0.143
				l-0.144,1.481c0.25,0.004,0.5,0.028,0.747,0.072l0.144-1.481l1.493,0.144L255.673,78.273z"/>
		</g>
	</g>
</g>
</svg>

'''
'''--- src/assets/icons/ledger/error.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 17.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 width="400px" height="294.232px" viewBox="0 0 400 294.232" enable-background="new 0 0 400 294.232" xml:space="preserve">
<path fill="#F3A56E" d="M763.868,890.83c0,0,29.132,12.512,29.132,23.237s0,96.522,0,96.522s-33.898-14.3-33.898-53.624
	c0,0-15.162-2.383-11.587,44.09c0,0,23.997-3.575,22.806,9.533c-1.192,13.108-25.538,36.941-49.37,26.216
	c0,0-32.431,4.766-45.539-11.916c0,0-15.62-5.958-19.194-16.683l-16.747-5.958c0,0-0.362-51.24,11.555-95.331
	C662.941,862.827,686.412,866.402,763.868,890.83z"/>
<path opacity="0.5" fill="#3B443F" d="M1452.339,628.422l13.109-63.466c26.203-141.397,89.631-284.147,74.269-406.293
	c-11.931-94.86-123.193-178.599-204.112-223.124c-50.003,102.882-40.488,894.996-37.586,1009.648
	c18.29-3.342,86.544,5.304,102.694-0.031l80.923,4.745L1452.339,628.422z"/>
<path fill="#3B443F" d="M997.189,790.06c21.293,2.921,44.394,5.662,68.879,7.923c37.615,3.472,82.114,6.035,128.763,6.035
	c34.761,0,70.169-1.455,109.169-4.987v-13.385c-114,10.827-225.229,1.903-307.595-9.483L997.189,790.06z"/>
<path fill="#F3A56E" d="M1564.694,908.305c0,0-30.694,12.512-30.694,23.237c0,10.725,0,96.522,0,96.522s35.46-14.3,35.46-53.623
	c0,0,15.943-2.383,12.368,44.09c0,0-23.607-3.575-22.415,9.533c1.192,13.108,25.733,36.941,49.566,26.216
	c0,0,32.528,4.766,45.636-11.916c0,0,15.668-5.958,19.243-16.683l16.771-5.958c0,0-0.407-51.24-12.323-95.331
	C1666.39,880.302,1642.15,883.877,1564.694,908.305z"/>
<path fill="#367E99" d="M877.773-877.602c-0.631,0-1.261-0.242-1.74-0.726l-38.846-39.199c-0.952-0.96-0.945-2.512,0.016-3.464
	c0.961-0.954,2.511-0.944,3.464,0.016l38.846,39.199c0.952,0.96,0.945,2.512-0.016,3.464
	C879.019-877.838,878.397-877.602,877.773-877.602z"/>
<path fill="#367E99" d="M965.201-921.882c-0.603-0.185-1.135-0.601-1.452-1.203l-25.676-48.85c-0.63-1.197-0.169-2.679,1.029-3.308
	c1.198-0.631,2.678-0.168,3.308,1.029l25.676,48.85c0.63,1.197,0.169,2.679-1.029,3.308
	C966.462-921.743,965.797-921.699,965.201-921.882z"/>
<path fill="#367E99" d="M1067.412-938.388c-0.339-0.532-0.473-1.194-0.323-1.858l12.195-53.822c0.298-1.319,1.611-2.147,2.931-1.848
	c1.321,0.298,2.146,1.611,1.848,2.931l-12.195,53.822c-0.298,1.319-1.611,2.147-2.931,1.848
	C1068.281-937.464,1067.747-937.862,1067.412-938.388z"/>
<ellipse opacity="0.51" fill="#3E3B3A" cx="-343.54" cy="492.352" rx="80.953" ry="12.942"/>
<path fill="#050D0E" d="M-286.871,475.669c0,0-3.033,0.152-9.706,0c-6.673-0.152-13.828-7.148-13.828-7.148
	s-18.595,7.707-21.024,10.484h-0.276c0,0-7.486,2.427-5.363,5.315c2.123,2.888,10.009,2.874,14.407,2.268
	c4.398-0.607,11.071,0.758,11.071,0.758c18.653,2.73,28.662-5.763,28.662-5.763v-2.578L-286.871,475.669z"/>
<path fill="#050D0E" d="M-388.753,491.368c0,0,2.55,7.958,9.829,10.233s16.378,1.062,21.535-3.791c0,0,1.213-4.398,0-5.156
	c-1.213-0.758-6.589-4.641-7.162-7.174S-381.294,481.894-388.753,491.368z"/>
<g>
	<ellipse fill="#060707" cx="202.181" cy="256.207" rx="68.431" ry="20.127"/>
	<g>
		<defs>
			<path id="SVGID_1_" d="M156.256,270.134c11.976,3.028,27.553,4.857,44.584,4.857c22.409,0,42.302-3.168,54.784-8.064
				l-6.033-47.843l-93.701-5.814l-6.485,24.376l0.895,30.861"/>
		</defs>
		<clipPath id="SVGID_2_">
			<use xlink:href="#SVGID_1_"  overflow="visible"/>
		</clipPath>
		<g clip-path="url(#SVGID_2_)">
			<g>
				<g>
					<path fill="#4A9EDD" d="M235.878,222.603l-69.588,1.341c-1.849,24.265-1.792,128.39,10.957,187.487
						c6.784,2.244,11.796,3.615,18.716,2.044c3.406-34.737,3.22-153.104,3.22-153.104c2.315,0.513,3.657-0.6,6.338-1.043
						c0,0,1.703,97.317,6.046,154.147c6.92,1.572,11.814,2.2,18.598-0.044C242.407,352.843,235.878,222.603,235.878,222.603z"/>
				</g>
			</g>
			<g opacity="0.8">
				<path fill="#2494E6" d="M189.296,405.333c0,0-7.605-38.14-10.647-71.513c-2.322-25.476,1.56-83.94,3.527-110.182l-15.886,0.306
					c-1.849,24.265-1.792,128.39,10.957,187.487c6.679,2.209,11.649,3.558,18.404,2.1L189.296,405.333z"/>
			</g>
			<g>
				<g>
					<path fill="#230602" d="M164.949,224.222c0,0,33.407,2.59,70.698-0.518l0.388,9.193c0,0-26.026,7.381-71.086,0"/>
				</g>
				<g>
					<g>
						<g>
							<path fill="#BCBCBC" d="M194.971,236.498c5.12,0.867,10.364,1.001,15.522,0.398c-0.082-4.132-0.165-8.264-0.247-12.396
								c-4.743-0.864-9.617-1.005-14.402-0.416C194.897,228.141,194.601,232.349,194.971,236.498z"/>
						</g>
					</g>
					<g>
						<g>
							<path fill="#230602" d="M208.568,234.287c-0.006-2.598-0.011-5.196-0.017-7.793c-3.754-0.002-7.508-0.005-11.261-0.007
								c-0.183,2.458-0.366,4.916-0.549,7.373C200.639,234.542,204.631,234.687,208.568,234.287z"/>
						</g>
					</g>
					<g>
						<g>
							<path fill="#BCBCBC" d="M199.368,231.826c0.37-0.027,0.76-0.116,1.022-0.379c0.273-0.274,0.357-0.693,0.311-1.077
								c-0.046-0.384-0.206-0.744-0.364-1.097c-1.55-0.447-3.301-0.132-4.599,0.825C196.542,231.246,197.97,231.926,199.368,231.826
								z"/>
						</g>
					</g>
				</g>
			</g>
			<g>
				<path fill="#3C0605" d="M239.64,413.364c-2.089-2.962-5.151-5.007-8.438-5.696c-11.37-3.448-20.196,6.416-20.196,6.416
					c6.241,2.296,13.7,2.545,13.7,2.545l0.047-0.045c4.493,0.325,9.015,0.124,13.469-0.619c0.421-0.07,0.851-0.149,1.22-0.39
					c0.368-0.24,0.666-0.68,0.648-1.161C240.075,414.018,239.858,413.673,239.64,413.364z"/>
			</g>
			<g>
				<path fill="#3C0605" d="M194.892,414.318c-5.706-4.86-11.958-6.328-15.704-6.761c-0.575-0.088-1.154-0.143-1.734-0.149
					c-1.045-0.053-1.659-0.017-1.659-0.017l-0.039,0.132c-3.618,0.483-7.048,2.614-9.324,5.84c-0.218,0.309-0.435,0.655-0.45,1.05
					c-0.018,0.481,0.28,0.921,0.648,1.161c0.368,0.241,0.799,0.319,1.22,0.39c2.757,0.46,5.541,0.712,8.327,0.762
					C183.927,417.491,194.892,414.318,194.892,414.318z"/>
			</g>
		</g>
	</g>
	<g>
		<g>
			<path fill="#F3A56E" d="M86.003,86.385l0.402-2.578c0,0,5.472,7.588,7.051,8.084c1.579,0.496,13.816,2.226,15.648,1.348
				c0.308-0.148,0.747-0.352,1.263-0.579c-0.51-0.958-1.377-2.207-2.876-3.704c-3.649-3.647,1.533-5.768,1.533-5.768
				c-0.098,3.234,2.568,5.221,5.626,5.799c0.753,0.143,1.327,0.39,1.765,0.682l-0.026-0.127c1.178,0.388,2.135,0.835,2.928,1.305
				c0.117,0.045,0.235,0.088,0.34,0.147c1.024,0.58,1.791,1.328,2.387,2.307c0.443,0.655,0.67,1.246,0.781,1.684
				c0.418,1.209,0.707,2.681,0.919,4.513c0.18,1.552,0.999,4.615,2.131,8.177c-1.903,1.335-4.675,2.826-8.233,3.516
				c-0.356-1.257-0.714-2.185-1.07-2.673c-2.175-2.98-12.503-6.482-15.589-7.783c-3.086-1.302-14.446-4.847-20.046-17.22
				C80.936,83.517,82.586,83.704,86.003,86.385z"/>
			<path opacity="0.2" fill="#DA7B51" d="M116.448,90.599c-2.277,0.645-9.524,7.737-23.623,1.298l-0.516-0.853
				c0.467,0.446,0.869,0.761,1.147,0.848c1.579,0.496,13.816,2.226,15.648,1.348c0.308-0.148,0.747-0.352,1.263-0.579
				c-0.51-0.958-1.377-2.206-2.876-3.704c-3.649-3.647,1.533-5.768,1.533-5.768c-0.098,3.234,2.568,5.221,5.626,5.799
				c0.753,0.143,1.327,0.39,1.765,0.682l-0.026-0.127c1.178,0.388,2.135,0.835,2.928,1.305c0.117,0.045,0.235,0.088,0.34,0.147
				c0.874,0.495,1.552,1.122,2.105,1.901C120.083,91.649,117.783,90.221,116.448,90.599z"/>
		</g>
		<g>
			<g>
				<path fill="#230602" d="M163.499,217.513c0,0,33.407,2.59,70.698-0.518l0.388,9.193c0,0-26.026,7.381-71.086,0"/>
				<g>
					<g>
						<path fill="#BCBCBC" d="M193.52,229.789c5.12,0.867,10.364,1.001,15.522,0.398c-0.082-4.132-0.165-8.264-0.247-12.396
							c-4.743-0.864-9.617-1.005-14.402-0.416C193.446,221.432,193.151,225.64,193.52,229.789z"/>
					</g>
					<g>
						<path fill="#230602" d="M207.117,227.578c-0.006-2.598-0.011-5.196-0.017-7.793c-3.754-0.002-7.508-0.005-11.261-0.007
							c-0.183,2.458-0.366,4.916-0.549,7.373C199.189,227.833,203.18,227.978,207.117,227.578z"/>
					</g>
					<g>
						<path fill="#BCBCBC" d="M197.917,225.117c0.37-0.027,0.76-0.116,1.022-0.379c0.273-0.274,0.357-0.693,0.311-1.077
							c-0.046-0.384-0.206-0.744-0.364-1.097c-1.55-0.447-3.301-0.132-4.599,0.825C195.091,224.537,196.519,225.217,197.917,225.117
							z"/>
					</g>
				</g>
			</g>
			<g>
				<path fill="#F3A56E" d="M314.634,86.385l-0.402-2.578c0,0-5.472,7.588-7.051,8.084c-1.579,0.496-13.816,2.226-15.648,1.348
					c-0.308-0.148-0.747-0.352-1.263-0.579c0.51-0.958,1.377-2.207,2.876-3.704c3.649-3.647-1.533-5.768-1.533-5.768
					c0.098,3.234-2.568,5.221-5.626,5.799c-0.753,0.143-1.327,0.39-1.765,0.682l0.026-0.127c-1.178,0.388-2.135,0.835-2.928,1.305
					c-0.117,0.045-0.235,0.088-0.34,0.147c-1.024,0.58-1.791,1.328-2.387,2.307c-0.443,0.655-0.67,1.246-0.781,1.684
					c-0.418,1.209-0.707,2.681-0.919,4.513c-0.18,1.552-0.999,4.615-2.131,8.177c1.903,1.335,4.675,2.826,8.233,3.516
					c0.356-1.257,0.714-2.185,1.07-2.673c2.175-2.98,12.503-6.482,15.589-7.783c3.086-1.302,14.446-4.847,20.046-17.22
					C319.702,83.517,318.051,83.704,314.634,86.385z"/>
				<path opacity="0.2" fill="#DA7B51" d="M284.19,90.599c2.277,0.645,9.524,7.737,23.623,1.298l0.516-0.853
					c-0.467,0.446-0.869,0.761-1.147,0.848c-1.579,0.496-13.816,2.226-15.648,1.348c-0.308-0.148-0.747-0.352-1.263-0.579
					c0.51-0.958,1.377-2.206,2.876-3.704c3.649-3.647-1.533-5.768-1.533-5.768c0.098,3.234-2.568,5.221-5.626,5.799
					c-0.753,0.143-1.327,0.39-1.765,0.682l0.026-0.127c-1.178,0.388-2.135,0.835-2.928,1.305c-0.117,0.045-0.235,0.088-0.34,0.147
					c-0.874,0.495-1.552,1.122-2.105,1.901C280.555,91.649,282.854,90.221,284.19,90.599z"/>
			</g>
			<path fill="#01DAFF" d="M236.398,117.9c6.367,5.255,15.565,13.306,23.579,22.075l14.35-35.76c2.768,2.08,6.031,4.15,9.799,5.964
				c-0.441,3.827-3.516,29.765-7.11,41.509c-2.326,9.569-6.822,17.911-11.061,19.532c-0.659,0.252-1.281,0.401-1.868,0.477
				c-0.283,0.084-0.574,0.149-0.879,0.172c-6.416,0.494-28.13-18.26-28.13-18.26l1.096,66.594c0,0-18.302,1.613-36.228,0.671
				c-17.926,0.942-38.241-2.013-38.241-2.013l3.855-65.252c0,0-21.715,18.754-28.13,18.26c-0.305-0.023-0.596-0.088-0.879-0.172
				c-0.587-0.076-1.208-0.225-1.868-0.477c-4.24-1.621-8.735-9.963-11.061-19.532c-3.594-11.743-6.669-37.682-7.11-41.509
				c3.768-1.814,7.031-3.884,9.799-5.964l14.35,35.76c13.927-15.238,32.986-28.567,32.986-28.567s11.653-7.769,24.602-8.287
				c9.022-0.361,16.663,0.74,21.902,2.762C220.149,105.884,225.8,108.013,236.398,117.9z"/>
			<path fill="#09C5D8" d="M219.094,105.646c-9.569-1.993-29.744-0.307-35.25,0.504c2.286,4.633,5.105,12.102,9.02,14.36
				c0,0,1.062,0.856,2.741,1.336c0.63,0.18,1.346,0.307,2.125,0.316c1.299,0.015,2.774-0.298,4.316-1.241
				c0,0,3.015,1.919,5.345,0.959c0.113-0.046,0.268-0.122,0.436-0.209h0C209.936,120.58,215.448,115.604,219.094,105.646z"/>
			<path opacity="0.4" fill="#09C5D8" d="M179.897,215.637c-7.526-20.463-0.228-78.752,1.646-90.374
				c1.942-12.042,9.323-19.422,9.323-19.422l3.45-2.331c-11.282,1.659-20.671,7.898-20.671,7.898s-19.059,13.328-32.986,28.567
				l-14.35-35.76c-2.768,2.08-6.031,4.15-9.799,5.964c0.441,3.827,3.516,29.765,7.11,41.509c2.326,9.569,6.822,17.911,11.061,19.532
				c0.659,0.252,1.281,0.401,1.868,0.477c0.283,0.084,0.574,0.149,0.879,0.172c6.416,0.494,28.13-18.26,28.13-18.26l-0.719,58.537
				C164.84,212.146,171.071,214.186,179.897,215.637z"/>
			<g>
				<path fill="#F3A56E" d="M225.481,75.968c-1.056-0.616-3.231,0.206-4.094,0.976c-2.148-25.917-3.645-23.233-6.321-25.508
					c-2.741-2.33-26.176-0.274-35.084,12.197c0,0-2.279,7.838-2.167,17.631c-0.948-0.681-4.464-2.898-6.467,0.048
					c-2.26,3.323,2.314,13.092,8.093,12.552c0.012-0.001,0.024-0.004,0.036-0.005c0.232,0.847,0.487,1.691,0.779,2.529
					c0,0,5.482,15.349,12.608,19.461c0,0,4.248,3.426,9.182,0.411c0,0,3.015,1.919,5.345,0.959
					c2.083-0.858,14.123-8.403,15.091-29.96C229.001,84.067,227.112,76.919,225.481,75.968z"/>
				<path opacity="0.6" fill="#EA9563" d="M200.169,75.082l0.074-10.695c0,0-13.088-1.978-15.294,2.433
					c-2.107,4.214,2.004,8.583,2.004,8.583"/>
				<path opacity="0.6" fill="#EA9563" d="M207.408,67.026c0,0-0.659,6.806,0.154,8.377l13.516-0.565c0,0-0.194-5.267-0.36-7.503
					C220.553,65.098,209.226,60.597,207.408,67.026z"/>
				<g>
					<g>
						<path fill="#FFFFFF" d="M220.441,74.796c0,0-1.529-7.095-7.46-5.339c0,0-2.738,0.433-5.27,5.407c0,0-0.274,0.548,0.137,0.616
							C208.258,75.549,215.65,77.945,220.441,74.796z"/>
						<path opacity="0.4" fill="#D5D4CB" d="M207.711,74.865c1.264-2.483,2.579-3.834,3.58-4.565
							c-0.362,1.894-0.532,4.042-0.07,5.897c-1.859-0.268-3.205-0.688-3.373-0.716C207.437,75.412,207.711,74.865,207.711,74.865z"
							/>
					</g>
				</g>
				<g>
					<path fill="#FFFFFF" d="M186.807,75.552c0,0,1.59-7.379,7.759-5.552c0,0,2.847,0.451,5.481,5.623c0,0,0.285,0.569-0.142,0.641
						C199.477,76.335,191.79,78.826,186.807,75.552z"/>
				</g>
				<path opacity="0.4" fill="#D5D4CB" d="M186.807,75.552c0,0,0.838-3.888,3.657-5.32c-0.686,1.781-1.398,4.324-0.995,6.512
					C188.538,76.48,187.635,76.096,186.807,75.552z"/>
				<path fill="#3A1100" d="M196.683,59.293c0,0-12.236,2.906-12.863,10.368l0.69,1.493c0,0,3.993-6.222,13.802-8.193l-1.105-3.691"
					/>
				<path fill="#3A1100" d="M208.277,61.037c0,0,10.946,0.98,12.075,7.503l-0.488,1.203c0,0-3.191-4.068-12.251-5.118
					L208.277,61.037"/>
				<g>
					<defs>
						<path id="SVGID_3_" d="M186.807,75.552c0,0,1.59-7.379,7.759-5.552c0,0,2.847,0.451,5.481,5.623c0,0,0.285,0.569-0.142,0.641
							C199.477,76.335,191.79,78.826,186.807,75.552z"/>
					</defs>
					<clipPath id="SVGID_4_">
						<use xlink:href="#SVGID_3_"  overflow="visible"/>
					</clipPath>
					<g clip-path="url(#SVGID_4_)">
						<g>
							<g>
								<path fill="#7F4F3A" d="M196.563,75.461c-0.073,1.312-1.189,2.325-2.493,2.262c-1.304-0.063-2.302-1.178-2.229-2.49
									s1.189-2.325,2.493-2.262C195.638,73.034,196.636,74.149,196.563,75.461z"/>
								<path fill="#0D0306" d="M195.494,75.551c-0.044,0.786-0.713,1.393-1.494,1.355c-0.781-0.038-1.379-0.705-1.336-1.492
									c0.044-0.786,0.713-1.393,1.494-1.355C194.939,74.097,195.537,74.765,195.494,75.551z"/>
							</g>
							<path fill="none" d="M196.272,74.196c-0.379-0.695-1.091-1.183-1.939-1.224c-1.304-0.063-2.42,0.95-2.493,2.262
								c-0.028,0.497,0.099,0.965,0.337,1.358C192.96,75.237,194.496,74.301,196.272,74.196z"/>
						</g>
						<path fill="#FFFFFF" d="M195.959,75.971c-0.032,0.567-0.514,1.005-1.078,0.978s-0.995-0.509-0.964-1.077
							s0.514-1.005,1.078-0.978C195.559,74.921,195.99,75.403,195.959,75.971z"/>
					</g>
				</g>
				<g>
					<defs>
						<path id="SVGID_5_" d="M220.326,74.88c0,0-1.389-7.745-7.344-6.068c0,0-0.744,0.189-1.757,0.189h0.049
							c-0.033,0-0.045,0.687-0.079,0.712c-0.094,0.069-0.176,0.455-0.275,0.535c-0.049,0.04-0.096,0.247-0.146,0.29
							c-0.089,0.075-0.173,0.226-0.265,0.311c-0.046,0.042-0.092,0.132-0.139,0.177c-0.099,0.095-0.197,0.208-0.3,0.314
							c-0.076,0.079-0.155,0.182-0.233,0.268c-0.075,0.084-0.149,0.165-0.226,0.255c-0.07,0.083-0.142,0.181-0.214,0.269
							c-0.086,0.107-0.172,0.21-0.259,0.325c-0.048,0.064-0.098,0.14-0.146,0.207c-0.112,0.153-0.223,0.305-0.336,0.473
							c-0.024,0.036-0.049,0.079-0.073,0.116c-0.137,0.209-0.275,0.423-0.413,0.656c-0.163,0.274-0.326,0.565-0.488,0.873
							c0,0-0.281,0.544,0.129,0.618c0.025,0.004,0.077,0.019,0.151,0.039c0.054,0.015,0.115,0.032,0.193,0.054
							c0.057,0.016,0.113,0.031,0.184,0.051c0.075,0.021,0.154,0.042,0.243,0.065c0.064,0.017,0.124,0.033,0.195,0.051
							c0.106,0.027,0.222,0.056,0.343,0.086c0.063,0.015,0.118,0.03,0.184,0.045c0.188,0.045,0.389,0.09,0.605,0.136
							c0.061,0.013,0.128,0.025,0.191,0.038c0.162,0.033,0.327,0.066,0.501,0.097c0.093,0.017,0.101,0.027,0.197,0.044
							c0.097,0.017,0.202,0.03,0.202,0.045c0-0.001,0-0.003,0-0.004C216,76.575,217.474,76.699,220.326,74.88z"/>
					</defs>
					<clipPath id="SVGID_6_">
						<use xlink:href="#SVGID_5_"  overflow="visible"/>
					</clipPath>
					<g clip-path="url(#SVGID_6_)">
						<g>
							<g>
								<path fill="#7F4F3A" d="M211.396,74.435c0.07,1.262,1.144,2.235,2.397,2.175c1.254-0.06,2.214-1.132,2.143-2.394
									c-0.07-1.262-1.144-2.235-2.397-2.175C212.285,72.102,211.325,73.173,211.396,74.435z"/>
								<path fill="#0D0306" d="M212.424,74.522c0.042,0.756,0.685,1.339,1.436,1.303s1.326-0.678,1.284-1.434
									c-0.042-0.756-0.685-1.339-1.436-1.303C212.957,73.124,212.382,73.766,212.424,74.522z"/>
							</g>
							<path fill="none" d="M211.675,73.218c0.364-0.668,1.049-1.138,1.864-1.177c1.254-0.06,2.327,0.913,2.397,2.175
								c0.027,0.478-0.096,0.928-0.324,1.306C214.86,74.22,213.383,73.32,211.675,73.218z"/>
						</g>
						<path fill="#FFFFFF" d="M211.977,74.925c0.03,0.546,0.495,0.967,1.037,0.941c0.542-0.026,0.957-0.49,0.927-1.035
							c-0.03-0.546-0.495-0.967-1.037-0.941C212.361,73.916,211.946,74.38,211.977,74.925z"/>
					</g>
				</g>
				<path fill="#DA7B51" d="M209.206,84.191c0,0-3.495,4.42-7.195,3.392C202.011,87.583,206.842,91.489,209.206,84.191z"/>
				<g>
					<path fill="#DA7B51" d="M194.097,101.459c-0.13,0-0.257-0.061-0.337-0.176c-0.13-0.186-0.084-0.442,0.103-0.573
						c0.323-0.226,8.027-5.494,13.817-5.316c0.226,0.008,0.405,0.199,0.397,0.426c-0.008,0.227-0.199,0.386-0.426,0.397
						c-5.531-0.22-13.242,5.114-13.319,5.168C194.261,101.435,194.179,101.459,194.097,101.459z"/>
				</g>
				<g>
					<path fill="#DA7B51" d="M176.965,90.358c-0.116,0-0.231-0.049-0.312-0.144c-0.63-0.734-0.874-1.433-0.723-2.077
						c0.138-0.595,0.58-0.969,0.874-1.158c-0.398-3.255-3.75-3.999-3.896-4.03c-0.223-0.047-0.365-0.264-0.318-0.487
						c0.047-0.222,0.255-0.372,0.485-0.318c0.043,0.009,4.282,0.932,4.574,5.033l0.021,0.292l-0.268,0.116
						c-0.003,0.002-0.561,0.253-0.671,0.744c-0.106,0.467,0.239,0.993,0.546,1.351c0.148,0.172,0.128,0.432-0.043,0.58
						C177.155,90.325,177.06,90.358,176.965,90.358z"/>
				</g>
				<path opacity="0.2" fill="#DA7B51" d="M203.553,113.793l-2.467,0.685c-15.852-0.574-20.533-36.949-21.634-48.713
					c-0.666,2.977-1.715,8.777-1.638,15.499c-0.948-0.681-4.464-2.898-6.467,0.048c-2.26,3.323,2.314,13.092,8.093,12.552
					c0.012-0.001,0.024-0.004,0.036-0.005c0.232,0.847,0.487,1.691,0.779,2.529c0,0,5.482,15.349,12.608,19.461
					c0,0,4.248,3.426,9.182,0.411c0,0,3.015,1.919,5.345,0.959c0.113-0.046,0.268-0.122,0.436-0.209
					C204.212,116.821,203.553,113.793,203.553,113.793z"/>
				<g>
					<path fill="#DA7B51" d="M223.802,83.882c-0.048,0-0.096-0.008-0.145-0.026c-0.212-0.079-0.32-0.316-0.241-0.529
						c0.125-0.331,0.14-0.581,0.043-0.704c-0.141-0.183-0.561-0.203-0.742-0.181l-0.403,0.043l-0.051-0.401
						c-0.331-2.652,1.595-4.397,1.677-4.47c0.167-0.149,0.426-0.136,0.58,0.034c0.151,0.169,0.137,0.429-0.032,0.581
						c-0.016,0.014-1.506,1.376-1.437,3.393c0.332,0.028,0.777,0.137,1.057,0.494c0.289,0.369,0.315,0.874,0.08,1.502
						C224.125,83.78,223.969,83.882,223.802,83.882z"/>
				</g>
				<path fill="#3A1100" d="M219.156,55.225c-0.113-0.968-0.783-5.772-3.269-9.271l-0.371,1.336c-0.889-2.29-2.61-3.905-2.61-3.905
					l-7.222,2.384l4.035-3.72c0,0-21.379-1.645-32.686,17.474l-0.925,20.866l3.186,4.214l0.103-2.056c0,0-0.103-15.623,2.878-19.529
					c0,0,18.89-12.976,35.783-7.954c2.503,6.191,2.864,22.549,2.864,22.549l0.514-0.103
					C222.731,70.873,220.056,58.922,219.156,55.225z"/>
			</g>
			<path opacity="0.5" fill="#BCBFC1" d="M162.225,139.967c-0.111-0.009-0.183-0.014-0.183-0.014l-1.457,70.309
				c8.623,3.203,17.146,5.128,25.233,6.189C169.694,197.678,163.967,157.026,162.225,139.967z"/>
			<g>
				
					<rect x="169.787" y="31.576" transform="matrix(0.3511 0.9363 -0.9363 0.3511 147.6404 -148.3417)" fill="#8F9396" width="22.126" height="1.553"/>
			</g>
			<g>
				
					<rect x="202.344" y="17.291" transform="matrix(0.9461 0.324 -0.324 0.9461 19.9276 -64.3147)" fill="#8F9396" width="1.553" height="20.801"/>
			</g>
			<g>
				
					<rect x="217.364" y="18.769" transform="matrix(0.77 0.6381 -0.6381 0.77 69.6629 -132.1633)" fill="#8F9396" width="1.553" height="23.542"/>
			</g>
			<polygon fill="#BCC0C4" points="172.215,141.708 174.787,110.511 180.154,107.324 178.7,143.049 			"/>
			<polygon fill="#BCC0C4" points="223.874,143.944 225.942,109.002 230.303,111.685 229.241,142.379 			"/>
			<path fill="#D6D7D8" d="M250.29,226.181c0,0-47.563,16.253-97.755-2.39l1.793-86.522c0,0,54.375,4.302,96.441,0L250.29,226.181z"
				/>
			<g id="XMLID_1_">
				<path id="XMLID_9_" fill="#F0CC32" d="M169.379,214.898c-4.402-1.605-7.303-5.832-7.219-10.52
					c0.037-2.073,0.656-4.084,1.792-5.816l27.146-45.006c2.088-3.738,5.79-5.925,9.908-5.851c1.233,0.022,2.42,0.238,3.528,0.642
					c2.767,1.009,4.992,3.146,6.438,6.182l24.655,44.484c1.206,2.06,2.215,4.009,2.166,6.722c-0.053,2.934-1.244,5.671-3.356,7.709
					c-1.871,1.805-4.265,2.868-6.826,3.051l-0.016,0.043l-55.17-0.989l-0.007-0.013
					C171.371,215.468,170.354,215.253,169.379,214.898z"/>
				<path id="XMLID_8_" fill="#353168" d="M234.386,199.7l-24.676-44.523c-1.719-3.639-4.747-5.984-8.73-6.055
					c-3.749-0.067-6.912,2.007-8.657,5.145l-27.173,45.05c-0.964,1.462-1.541,3.206-1.574,5.087
					c-0.095,5.283,4.111,9.643,9.394,9.738c0.104,0.001,0.206-0.001,0.31-0.003l0.004,0.008l53.324,0.957l0-0.001
					c0.01,0,0.02,0.001,0.029,0.001c5.283,0.096,9.643-4.111,9.738-9.394C236.415,203.45,235.611,201.793,234.386,199.7z"/>
				<path id="XMLID_7_" fill="#EAB331" d="M173.024,211.155c-3.628-0.064-6.527-3.07-6.462-6.697
					c0.023-1.248,0.396-2.457,1.082-3.497l26.297-43.654l1.029-1.658c1.367-2.257,3.446-3.587,5.955-3.542
					c2.668,0.047,4.604,1.434,6.007,4.166l25.09,45.25c0.588,1.1,1.394,2.623,1.367,4.132c-0.064,3.614-3.047,6.505-6.656,6.463
					C226.733,212.119,173.07,211.157,173.024,211.155z"/>
				<path id="XMLID_6_" fill="#F0CC32" d="M228.439,202.179l0.002-0.003l-27.516-50.046l-29.291,49.021
					c-0.476,0.71-0.764,1.558-0.78,2.476c-0.046,2.542,1.978,4.639,4.519,4.685c0.067,0.001,0.132-0.005,0.198-0.007l0.005,0.009
					l48.496,0.871l0.011-0.017c0.119,0.011,0.237,0.022,0.357,0.025c2.542,0.046,4.639-1.979,4.684-4.52
					C229.142,203.76,228.887,202.905,228.439,202.179z"/>
				<path id="XMLID_5_" fill="#F6E434" d="M174.712,211.172c-2.829-0.187-5.041-2.559-4.99-5.424
					c0.024-1.332,0.536-2.539,1.358-3.46c0.133-0.407,0.321-0.788,0.554-1.136l29.284-49.007l0.003-0.037
					c-2.507-0.043-4.584,1.285-5.95,3.541l-1.029,1.658l-26.297,43.654c-0.686,1.039-1.059,2.249-1.082,3.497
					c-0.065,3.628,2.834,6.633,6.462,6.697c0.006,0.001,0.611,0.012,1.686,0.031L174.712,211.172z"/>
				<path id="XMLID_2_" fill="#353168" d="M200.152,205.681c-2.844-0.051-5.105-2.401-5.055-5.245
					c0.053-2.843,2.401-5.106,5.244-5.054c2.847,0.053,5.107,2.399,5.055,5.244C205.344,203.469,202.999,205.734,200.152,205.681z
					 M206.1,166.845c0.023-2.327-2.33-1.859-5.23-1.913c-2.907-0.053-5.258-0.596-5.301,1.745c-0.004,0.16,0.007,0.316,0.026,0.475
					l1.581,21.605c-0.033,1.817,1.411,3.317,3.225,3.35c1.817,0.034,3.316-1.411,3.349-3.229l2.382-21.579
					C206.136,167.138,206.123,166.988,206.1,166.845z"/>
			</g>
		</g>
	</g>
</g>
</svg>

'''
'''--- src/assets/icons/ledger/open-app.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 17.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 width="400px" height="294.232px" viewBox="0 0 400 294.232" enable-background="new 0 0 400 294.232" xml:space="preserve">
<path fill="#367E99" d="M877.773-877.602c-0.631,0-1.261-0.242-1.74-0.726l-38.846-39.199c-0.952-0.96-0.945-2.512,0.016-3.464
	c0.961-0.954,2.511-0.944,3.464,0.016l38.846,39.199c0.952,0.96,0.945,2.512-0.016,3.464
	C879.019-877.838,878.397-877.602,877.773-877.602z"/>
<path fill="#367E99" d="M965.201-921.882c-0.603-0.185-1.135-0.601-1.452-1.203l-25.676-48.85c-0.63-1.197-0.169-2.679,1.029-3.308
	c1.198-0.631,2.678-0.168,3.308,1.029l25.676,48.85c0.63,1.197,0.169,2.679-1.029,3.308
	C966.462-921.743,965.797-921.699,965.201-921.882z"/>
<path fill="#367E99" d="M1067.412-938.388c-0.339-0.532-0.473-1.194-0.323-1.858l12.195-53.822c0.298-1.319,1.611-2.147,2.931-1.848
	c1.321,0.298,2.146,1.611,1.848,2.931l-12.195,53.822c-0.298,1.319-1.611,2.147-2.931,1.848
	C1068.281-937.464,1067.747-937.862,1067.412-938.388z"/>
<g id="path-1_4_">
</g>
<g id="path-1_6_">
</g>
<polyline fill="#5C6B7B" points="216.833,110.833 208,111.667 204.223,110.853 202.833,102.333 205.667,97.167 208.667,95.833 
	217.167,95.5 218.5,98.5 217.333,104.167 216.333,106.667 "/>
<ellipse cx="309.18" cy="270.841" rx="52.18" ry="8.492"/>
<ellipse cx="68.18" cy="270.841" rx="52.18" ry="8.492"/>
<polyline fill="#F3A56E" points="280.659,225 278.189,184.842 318.751,176.5 324.454,199.229 321.5,235 306.512,242 "/>
<path fill="#04D2EF" d="M60.822,197.332c0,0,27.492,16.57,55.585,16.619L101,276c0,0-45.833,6.5-77-2.242L60.822,197.332z"/>
<path fill="#04D2EF" d="M273.457,275.75l4.731-75.25c0,0,18.02,22.422,45.566,7.193l20.662,67.724
	C344.417,275.417,318.751,282.497,273.457,275.75z"/>
<path fill="#DA7B51" d="M239.33,150.682l7.171,34.16c0,0,13.1-7.861,15.152-27.758c0,0,21.024,20.238,30.553,18.384
	c9.528-1.854,26.544-36.06,26.544-36.06s-11.349-31.245-11.15-33.547c0.199-2.302-18.506-18.133-18.506-18.133l-39.178-1.542
	l-11.172,15.096L231,112.313L239.33,150.682z"/>
<path fill="#DA7B51" d="M179.168,117.048l16.067,19.287c0,0-11.811,10.857-23.894,1.617l-10.24,17.852c0,0-41.35,2.285-44.204-1.475
	s7.716-62.234,7.716-62.234l9.629-3.016l23.628-0.469L179.168,117.048z"/>
<path fill="#9DA2A5" d="M269.119,105.062c-5.273-1.108-15.524-3.334-15.524-3.334l-10.597-5.038c-1.032,1.163-1.906,2.5-2.557,4.005
	l-34.452,79.731c0,0,1.553,1.474,4.809,2.423l0.146-0.29l22.601,9.726l34.435-79.69
	C269.043,110.135,269.386,107.549,269.119,105.062z"/>
<g>
	
		<rect x="158.417" y="89.898" transform="matrix(0.9963 0.086 -0.086 0.9963 9.72 -17.7595)" fill="#5C6B7B" width="105" height="28"/>
	<path fill="#526270" d="M195.613,88.524l-35.798-3.091l-2.409,27.896l68.553,5.919C210.558,109.484,200.387,95.906,195.613,88.524z
		"/>
</g>
<g>
	<path fill="#00E676" d="M232.481,110.862c-0.127-0.011-0.251-0.071-0.34-0.176c-0.178-0.211-0.151-0.527,0.061-0.704l4.861-4.089
		l-3.977-5.07c-0.17-0.217-0.133-0.531,0.085-0.702c0.217-0.171,0.532-0.133,0.702,0.085l4.574,5.831l-5.601,4.711
		C232.74,110.835,232.608,110.873,232.481,110.862z"/>
</g>
<g>
	<path fill="#00E676" d="M186.68,106.907c0.127,0.011,0.259-0.027,0.365-0.116c0.211-0.178,0.239-0.493,0.061-0.704l-4.088-4.861
		l4.788-4.314c0.205-0.185,0.222-0.501,0.037-0.706c-0.184-0.206-0.501-0.222-0.706-0.037l-5.506,4.96l4.71,5.601
		C186.429,106.837,186.552,106.896,186.68,106.907z"/>
</g>
<g>
	<path fill="#ED985F" d="M139.365,92.701l-1.233-4.121c0,0-8.229,25.553-14.431,35.39l0.643,0.306
		C124.343,124.275,136.89,101.019,139.365,92.701z"/>
	<path fill="#ED985F" d="M199.034,76.201c-0.109-0.253-0.399-0.368-0.653-0.259c-5.362,2.327-11.462,1.108-13.039,0.73
		c0.129-2.939-1.032-5.377-1.497-6.227l-1.004-0.087c0.007,0.107,0.038,0.217,0.099,0.313c0.018,0.029,1.986,2.934,1.689,6.366
		l-0.035,0.408l0.227,0.1c0.143,0.042,1.629,0.497,4.012,0.703c2.74,0.237,6.449,0.125,9.937-1.389
		C199.025,76.749,199.144,76.455,199.034,76.201z"/>
	<path fill="#ED985F" d="M172.013,86.57c-0.023,0.054-0.052,0.104-0.076,0.157c-14.538,5.805-33.805,1.852-33.805,1.852l0.695,3.573
		c8.355,3.823,21.765,0.171,28.14-1.971c2.242-0.728,3.606-1.31,3.606-1.31l0.805-1.111c-0.249,0.392-0.522,0.764-0.805,1.111
		c16.48,1.035,23.528-3.084,26.493-7.35C188.202,89.617,172.013,86.57,172.013,86.57z"/>
	<g>
		<path fill="#ED985F" d="M140.056,141.496c6.599-8.407,17.066-13.974,19.568-15.095c0.063-0.028,1.664-0.826,1.747-0.853
			c-5.583-9.118-1.628-19.97,0.78-24.372c-14.031,9.958-5.192,23.154-5.192,23.154C151.524,128.14,143.602,136.405,140.056,141.496z
			"/>
	</g>
	<g>
		<path fill="#ED985F" d="M169.273,114.268c-6.577-0.568-10.658-9.965-10.705-10.075l0.92-0.392
			c0.051,0.12,5.224,12.014,12.923,8.995l0.366,0.93C171.545,114.21,170.373,114.363,169.273,114.268z"/>
	</g>
</g>
<path fill="#526270" d="M236.114,120.125l8.241-17.941c0,0,3.472-7.27,10.907-8.134l-15.66,26.376L236.114,120.125z"/>
<path fill="#F3A56E" d="M275.353,91.233c0,0,11.234,17.147,20.503,21.877c0,0,5.243-21.343,15.701-25.53
	c-6.171-5.289-22.524-18.893-32.01-22.923c0,0-20.999,3.865-33.725,16.8c-5.489,5.186-9.29,10.601-9.29,10.601l27.864,2.406
	L275.353,91.233z"/>
<g>
	<path fill="#B3B8BD" d="M238.355,194.708l34.435-79.69c3.286-7.605-0.215-16.434-7.819-19.719
		c-7.607-3.289-16.434,0.215-19.719,7.819l-34.452,79.731L238.355,194.708z"/>
	<g>
		<path fill="#9DA2A5" d="M258.084,118.51c-5.082-0.439-8.859-4.93-8.42-10.011c0.439-5.082,4.93-8.859,10.011-8.42
			c5.082,0.439,8.859,4.93,8.42,10.011C267.657,115.171,263.166,118.948,258.084,118.51z M259.59,101.074
			c-4.532-0.391-8.538,2.978-8.929,7.51c-0.391,4.532,2.978,8.538,7.51,8.929c4.532,0.391,8.538-2.978,8.929-7.51
			C267.491,105.472,264.122,101.466,259.59,101.074z"/>
	</g>
	<path fill="#878C8E" d="M225.503,173.036l-1.585,3.791l5.116,2.139l2.139-5.116l-3.791-1.585
		C226.648,171.958,225.81,172.302,225.503,173.036z M223.424,178.008l-0.273,0.652c-0.307,0.734,0.037,1.572,0.771,1.879
		l0.652,0.273l0.827-1.977L223.424,178.008z M225.755,181.305l0.827-1.977l1.977,0.827l-0.827,1.977L225.755,181.305z
		 M233.513,177.126l0.273-0.652c0.307-0.734-0.037-1.572-0.771-1.879l-0.631-0.264l-0.827,1.977L233.513,177.126z M230.236,179.469
		l0.827-1.977l1.977,0.827l-0.827,1.977L230.236,179.469z M228.915,182.627l0.652,0.273c0.734,0.307,1.572-0.037,1.879-0.771
		l0.273-0.652l-1.977-0.827L228.915,182.627z M228.7,166.878l-0.324,0.774l7.234,3.025l1.713-4.097l-0.692-0.289l-1.389,3.322
		L228.7,166.878z M233.044,161.871c-0.631,1.508,0.047,3.036,1.656,3.709l0.185,0.077c0.701,0.269,1.482,0.236,2.183-0.069
		c0.654-0.302,1.182-0.822,1.463-1.495l0.042-0.101c0.298-0.713,0.314-1.497,0.088-2.214l-0.012-0.03l-0.715,0.108l0.004,0.049
		c0.209,0.59,0.211,1.214-0.027,1.783c-0.392,0.937-1.404,1.639-2.795,1.129l1.636-3.913l-0.04-0.017c0,0-0.236-0.123-0.358-0.174
		C234.885,160.105,233.589,160.567,233.044,161.871L233.044,161.871z M234.471,164.527c-0.85-0.546-1.159-1.466-0.793-2.342
		c0.273-0.652,0.959-1.203,2.105-0.796L234.471,164.527z M236.434,155.484l0.266,0.111c-0.687,0.097-1.288,0.562-1.553,1.195
		l-0.026,0.061c-0.58,1.386,0.121,2.804,1.731,3.477c1.631,0.682,3.114,0.224,3.685-1.141c0.452-1.08,0.004-1.842-0.213-2.124
		l0.795,0.333l0.307-0.734l-7.195-3.009l-0.315,0.753l2.527,1.057L236.434,155.484z M239.906,158.804
		c-0.4,0.958-1.479,1.248-2.702,0.737c-1.182-0.494-1.736-1.516-1.344-2.453c0.333-0.795,1.295-1.325,2.681-0.745
		C240.049,156.973,240.229,158.03,239.906,158.804z M238.725,150.29l0.04,0.017c-0.305,0.041-1.021,0.267-1.473,1.347
		c-0.571,1.365,0.094,2.696,1.683,3.361s3.061,0.179,3.64-1.207c0.315-0.753,0.263-1.375-0.141-1.95l0.713,0.298
		c0.998,0.417,1.306,1.287,0.836,2.409c-0.196,0.468-0.523,0.907-0.926,1.241l-0.038,0.031l0.512,0.549l0.038-0.031
		c0.487-0.419,0.876-0.95,1.115-1.522c0.503-1.202,0.428-2.741-1.264-3.449l-5.011-2.095l-0.315,0.753L238.725,150.29z
		 M241.986,153.425c-0.417,0.998-1.464,1.326-2.667,0.823c-1.223-0.512-1.677-1.371-1.268-2.35c0.452-1.08,1.295-1.325,2.58-0.788
		C241.904,151.619,242.395,152.447,241.986,153.425L241.986,153.425z M239.614,146.16c-0.631,1.508,0.056,3.015,1.646,3.68
		l0.184,0.077c0.701,0.269,1.482,0.236,2.183-0.069c0.654-0.302,1.182-0.822,1.463-1.495l0.042-0.101
		c0.298-0.713,0.314-1.497,0.088-2.214l-0.012-0.03l-0.723,0.129l0.004,0.049c0.209,0.59,0.211,1.214-0.027,1.783
		c-0.392,0.937-1.404,1.639-2.795,1.129l1.644-3.931l-0.04-0.017c0,0-0.236-0.123-0.358-0.174
		C241.464,144.372,240.167,144.835,239.614,146.16z M241.049,148.796c-0.85-0.546-1.159-1.466-0.793-2.342
		c0.273-0.652,0.959-1.203,2.105-0.796L241.049,148.796z M241.956,140.842c-0.063,0.093-0.098,0.175-0.159,0.268
		c-0.298,0.713-0.096,1.492,0.529,2.113l-1.162-0.486l-0.315,0.753l5.165,2.135l0.04,0.017l0.324-0.774l-2.18-0.911
		c-0.327-0.137-0.656-0.322-0.919-0.553c-0.693-0.577-0.971-1.34-0.699-1.992c0.034-0.082,0.068-0.163,0.123-0.236l0.017-0.04
		l-0.753-0.315L241.956,140.842z"/>
	<path opacity="0.3" fill="#A5A8AA" d="M270.309,99.212c1.23,2.549,1.897,6.221,0.271,11.176
		c-3.188,9.709-28.162,67.278-36.809,82.347l4.585,1.973l34.435-79.69C275.158,109.537,273.987,103.431,270.309,99.212z"/>
</g>
<g>
	<path fill="#ED985F" d="M273.457,87.739c-4.874,3.36-11.374,5.011-16.447,6.153l7.385,0.571l10.958-3.231c0,0-1.048-1.52,0,0
		C273.13,87.471,273.457,87.739,273.457,87.739z"/>
	<path fill="#ED985F" d="M280.659,98.215L280.659,98.215c0.538,0.64,1.096,1.285,1.675,1.927
		C281.81,99.484,281.261,98.836,280.659,98.215z"/>
</g>
<path fill="none" stroke="#ED985F" stroke-miterlimit="10" d="M299.264,115.29"/>
<path fill="#F3A56E" d="M262,142.333c0,0,4.318,5.054,4.97,9.125s5.539,58.631,36.467,60.8c14.641,0.93,19.79-8.328,19.79-8.328
	c9.091-31.669,6.992-88.727,5.254-95.716c-1.739-6.988-14.462-18.5-14.462-18.5s-2.292-1.981-3.676-3.17
	c-9.896,3.386-15.126,15.863-18.103,21.862c1.169,1.76,2.146,3.619,3.536,3.773l0.213,0.417l-9.789,17.374
	c0,0-1.356-3.502-3.821-7.904l0.001-0.001c-0.016-0.029-0.035-0.059-0.051-0.088c-0.231-0.411-0.468-0.827-0.718-1.251
	c-0.014-0.023-0.028-0.046-0.042-0.069c-0.227-0.385-0.464-0.775-0.707-1.167c-0.056-0.091-0.111-0.181-0.168-0.272
	c-0.243-0.388-0.494-0.779-0.751-1.171c-0.075-0.115-0.152-0.229-0.229-0.344c-0.241-0.361-0.487-0.723-0.74-1.084
	c-0.078-0.111-0.156-0.221-0.235-0.332c-0.233-0.327-0.472-0.653-0.715-0.978c-0.101-0.135-0.201-0.27-0.304-0.404
	c-0.275-0.36-0.556-0.717-0.842-1.071c-0.111-0.137-0.223-0.271-0.336-0.407c-0.246-0.296-0.495-0.588-0.749-0.877
	c-0.129-0.146-0.258-0.292-0.389-0.436c-0.263-0.29-0.53-0.575-0.801-0.856c-0.127-0.132-0.254-0.263-0.383-0.393
	c-0.316-0.317-0.637-0.627-0.964-0.929c-0.127-0.117-0.256-0.23-0.384-0.345c-0.107-0.096-0.213-0.195-0.321-0.288l-0.019-0.003
	c-2.884-2.494-6.149-4.315-9.738-4.688c0,0-5.845-1.541-9.428,2.087c-0.081,0.081-0.16,0.163-0.239,0.249
	c-0.135,0.15-0.265,0.305-0.392,0.471c-0.119,0.154-0.231,0.321-0.342,0.49c-0.088,0.136-0.179,0.265-0.263,0.411
	c-0.195,0.339-0.378,0.698-0.54,1.095c0,0-0.006,0.017-0.018,0.049c-0.006,0.016-0.014,0.039-0.023,0.064
	c-0.009,0.024-0.016,0.045-0.028,0.078c-0.014,0.041-0.031,0.09-0.05,0.145c-0.01,0.029-0.019,0.056-0.03,0.089
	c-0.023,0.069-0.048,0.144-0.075,0.229c-0.008,0.024-0.015,0.048-0.023,0.073c-0.032,0.101-0.066,0.208-0.103,0.328
	c-0.002,0.006-0.004,0.013-0.006,0.02c0,0-1.602,11.529,2.93,21.676C254.167,132.167,255.5,136,262,142.333z"/>
<g>
	<path fill="#ED985F" d="M254.283,123.618l-0.238-0.615c-0.119-0.307-2.875-7.564-0.582-12.137c0.815-1.625,2.167-2.711,4.019-3.229
		c1.128-0.315,2.249-0.428,3.333-0.334c6.087,0.526,9.19,7.201,9.319,7.485l0.286,0.628l-0.686,0.076
		c-5.289,0.585-14.828,7.661-14.924,7.733L254.283,123.618z M260.73,108.299c-0.963-0.083-1.965,0.018-2.978,0.301
		c-1.568,0.439-2.71,1.351-3.393,2.713c-1.731,3.449-0.198,8.883,0.403,10.708c2.052-1.477,9.269-6.48,14.153-7.415
		C268.022,113.001,265.221,108.687,260.73,108.299z"/>
</g>
<path fill="#ED985F" d="M265.451,140.726c0,0,11.664-3.342,16.014-9.156C281.464,131.569,280.518,142.529,265.451,140.726z"/>
<g>
	<path opacity="0.5" fill="#E58E53" d="M299.129,158.787l-12.469-29.014c-0.109-0.254-0.403-0.37-0.657-0.262
		c-0.254,0.109-0.371,0.403-0.262,0.657l12.469,29.014c0.076,0.175,0.24,0.285,0.417,0.301c0.079,0.007,0.162-0.005,0.24-0.039
		C299.12,159.335,299.238,159.041,299.129,158.787z"/>
	<polygon opacity="0.5" fill="#E58E53" points="295.856,113.109 286.66,129.773 291.324,140.624 	"/>
</g>
<path opacity="0.5" fill="#ED985F" d="M304.111,204.464c-20.65-3.452-29.813-31.761-31.059-35.528
	c-1.327-4.011-3.558-17.555-5.885-21.602c-1.101-1.916-2.846-3.956-4.167-4.167c1.935,1.624,3.602,5.994,3.97,8.292
	c0.652,4.071,5.539,58.631,36.467,60.8c13.63,1.01,19.135-7.372,19.79-8.328c0.654-0.956,1.226-4.701,1.226-4.701
	C317.656,207.05,304.111,204.464,304.111,204.464z"/>
<g>
	<path opacity="0.5" fill="#ED985F" d="M179.896,129.46c-8.491,14.352-27.049,36.673-27.049,36.673
		c-1.69,16.666-15.207,30.806-15.207,30.806c-21.967,21.951-60.375,4.71-75.407-3.413c-0.909,2.436-1.412,3.806-1.412,3.806
		c56.579,33.491,78.274,6.006,78.274,6.006c15.432-15.982,16.418-33.211,16.418-33.211
		C170.762,149.997,177.268,136.283,179.896,129.46z"/>
</g>
<path fill="#09C5D8" d="M287.154,208.651c-5.788-3.257-8.966-7.151-8.966-7.151l-4.731,74.253
	c8.878,1.322,16.973,2.089,24.271,2.477L287.154,208.651z"/>
<path fill="#09C5D8" d="M105.998,213.228l-23.062,64.495C93.694,277.035,101,276,101,276l15.407-62.049
	C112.911,213.945,109.424,213.682,105.998,213.228z"/>
<g>
	<path fill="#ED985F" d="M296.313,112.313c-0.101,0-0.201-0.03-0.289-0.092c-15.993-11.326-21.555-24.163-21.609-24.292
		c-0.107-0.254,0.012-0.547,0.266-0.655c0.252-0.107,0.549,0.01,0.655,0.266c0.054,0.125,5.521,12.714,21.267,23.865
		c0.226,0.16,0.278,0.472,0.119,0.697C296.623,112.239,296.469,112.313,296.313,112.313z"/>
</g>
<g>
	<path fill="#ED985F" d="M303.75,212c-0.009,0-0.018,0-0.027,0c-27.59-2-33.737-42.269-33.797-42.678
		c-0.039-0.273,0.15-0.652,0.424-0.691c0.267-0.045,0.526,0.087,0.566,0.361c0.058,0.401,6.089,40.08,32.861,41.541
		c0.275,0.015,0.487,0.485,0.472,0.761C304.234,211.56,304.014,212,303.75,212z"/>
</g>
<g>
	<path fill="#34414C" d="M170.732,108.502c-4.41,0-7.998-3.588-7.998-7.998s3.588-7.997,7.998-7.997s7.998,3.587,7.998,7.997
		S175.142,108.502,170.732,108.502z M170.732,93.507c-3.858,0-6.998,3.139-6.998,6.997s3.139,6.998,6.998,6.998
		s6.998-3.139,6.998-6.998S174.59,93.507,170.732,93.507z"/>
</g>
<g>
	<g>
		<path fill="#F3A56E" d="M60.822,197.332c0,0,39.06-106.535,56.635-124.088c0,0,37.298-10.581,81.551,0.016
			c0,0,3.747,17.638-28.448,15.611c0,0-17.711,7.504-31.195,3.831l-15.022,31.575l6.52,20.387l5.395,1.839
			c0,0,10.819-15.243,20.701-22.169c0,0-9.115-13.585,5.801-23.588l18.78,23.704c0,0-3.369,15.769-26.026,45.68
			c0,0-0.986,17.229-16.418,33.211C139.096,203.338,117.401,230.823,60.822,197.332z"/>
		<path fill="#ED985F" d="M139.365,92.701l-1.233-4.121c0,0-8.229,25.553-14.431,35.39l0.643,0.306
			C124.343,124.275,136.89,101.019,139.365,92.701z"/>
	</g>
	<path fill="#ED985F" d="M199.034,76.201c-0.109-0.253-0.399-0.368-0.653-0.259c-5.362,2.327-11.462,1.108-13.039,0.73
		c0.129-2.939-1.032-5.377-1.497-6.227l-1.004-0.087c0.007,0.107,0.038,0.217,0.099,0.313c0.018,0.029,1.986,2.934,1.689,6.366
		l-0.035,0.408l0.227,0.1c0.143,0.042,1.629,0.497,4.012,0.703c2.74,0.237,6.449,0.125,9.937-1.389
		C199.025,76.749,199.144,76.455,199.034,76.201z"/>
	<path fill="#ED985F" d="M172.013,86.57c-0.023,0.054-0.052,0.104-0.076,0.157c-14.538,5.805-33.805,1.852-33.805,1.852l0.695,3.573
		c8.355,3.823,21.765,0.171,28.14-1.971c2.242-0.728,3.606-1.31,3.606-1.31l0.805-1.111c-0.249,0.392-0.522,0.764-0.805,1.111
		c16.48,1.035,23.528-3.084,26.493-7.35C188.202,89.617,172.013,86.57,172.013,86.57z"/>
	<g>
		<path fill="#ED985F" d="M141.419,141.559c6.599-8.407,15.702-14.036,18.205-15.157c0.063-0.028,1.664-0.826,1.747-0.853
			c-5.583-9.118-1.628-19.97,0.78-24.372c-14.031,9.958-5.192,23.154-5.192,23.154C151.524,128.14,144.965,136.467,141.419,141.559z
			"/>
	</g>
	<g>
		<path fill="#ED985F" d="M169.273,114.268c-6.577-0.568-10.658-9.965-10.705-10.075l0.92-0.392
			c0.051,0.12,5.224,12.014,12.923,8.995l0.366,0.93C171.545,114.21,170.373,114.363,169.273,114.268z"/>
	</g>
</g>
<g>
	<g>
		<path fill="#00E676" d="M216.417,113.079c-0.118,0-0.237-0.006-0.357-0.018l-11.938-1.213c-0.93-0.095-1.768-0.545-2.359-1.27
			c-0.591-0.724-0.864-1.636-0.77-2.566l1.112-10.944c0.194-1.911,1.889-3.33,3.836-3.128l11.938,1.213
			c1.919,0.195,3.323,1.916,3.128,3.835l-1.111,10.944C219.713,111.726,218.218,113.079,216.417,113.079z M205.583,94.921
			c-1.286,0-2.354,0.966-2.483,2.248l-1.112,10.944c-0.067,0.664,0.127,1.315,0.55,1.833c0.422,0.517,1.021,0.839,1.685,0.907
			l11.938,1.213c1.384,0.146,2.601-0.869,2.74-2.235l1.111-10.943c0.139-1.372-0.864-2.601-2.235-2.74l-11.938-1.213
			C205.753,94.926,205.668,94.921,205.583,94.921z"/>
	</g>
	<g>
		<path fill="#00E676" d="M203.167,111.167l13.458,1.292l2.354-1.479l1.219-9.99l-0.057-4.328l-5.57-1.331l-9.743-0.999l-2.08,1.751
			l-1.08,9.167l-0.083,3.917C201.583,109.167,201.583,110.75,203.167,111.167z"/>
		<path fill="#5C6B7B" d="M213.441,99.811c1.08,0.635,1.856,1.681,2.151,2.899l-1.699-0.188c-0.456-1.009-1.412-1.701-2.513-1.818
			c-1.71-0.19-3.249,1.018-3.438,2.698c-0.189,1.68,1.046,3.195,2.757,3.385c1.101,0.126,2.186-0.339,2.854-1.223l1.699,0.188
			c-0.558,1.123-1.546,1.974-2.74,2.357l-0.217,1.934l-1.549-0.171l0.172-1.537c-0.26-0.008-0.519-0.036-0.774-0.086l-0.172,1.537
			l-1.549-0.172l0.217-1.934c-1.518-0.898-2.451-2.608-2.245-4.449c0.206-1.841,1.495-3.305,3.175-3.849l0.217-1.934l1.549,0.171
			l-0.172,1.537c0.26,0.008,0.519,0.036,0.774,0.086l0.172-1.537l1.549,0.172L213.441,99.811z"/>
	</g>
</g>
</svg>

'''
'''--- src/assets/icons/ledger/search-bluetooth.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 17.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 width="400px" height="294.232px" viewBox="0 0 400 294.232" enable-background="new 0 0 400 294.232" xml:space="preserve">
<path fill="#367E99" d="M877.773-877.602c-0.631,0-1.261-0.242-1.74-0.726l-38.846-39.199c-0.952-0.96-0.945-2.512,0.016-3.464
	c0.961-0.954,2.511-0.944,3.464,0.016l38.846,39.199c0.952,0.96,0.945,2.512-0.016,3.464
	C879.019-877.838,878.397-877.602,877.773-877.602z"/>
<path fill="#367E99" d="M965.201-921.882c-0.603-0.185-1.135-0.601-1.452-1.203l-25.676-48.85c-0.63-1.197-0.169-2.679,1.029-3.308
	c1.198-0.631,2.678-0.168,3.308,1.029l25.676,48.85c0.63,1.197,0.169,2.679-1.029,3.308
	C966.462-921.743,965.797-921.699,965.201-921.882z"/>
<path fill="#367E99" d="M1067.412-938.388c-0.339-0.532-0.473-1.194-0.323-1.858l12.195-53.822c0.298-1.319,1.611-2.147,2.931-1.848
	c1.321,0.298,2.146,1.611,1.848,2.931l-12.195,53.822c-0.298,1.319-1.611,2.147-2.931,1.848
	C1068.281-937.464,1067.747-937.862,1067.412-938.388z"/>
<g id="path-1_4_">
</g>
<g id="path-1_6_">
</g>
<path fill="#F3A56E" d="M-286.5,55"/>
<polygon fill="#4B5966" points="233.311,533.288 230.021,541.458 231.082,542.412 235.008,533.818 "/>
<path fill="none" stroke="#E08546" stroke-miterlimit="10" d="M577,53"/>
<g>
	<path fill="#02B2C4" d="M242.646,261.426l-1.17,0.073l-16.51-63.882c-0.107-0.415-0.439-0.809-0.946-1.168
		c-0.504-0.357-1.182-0.679-1.984-0.95c-0.799-0.27-1.724-0.491-2.729-0.647c-1.002-0.155-2.085-0.745-3.205-0.757L159.39,193
		c-0.007,0-0.013,0-0.02,0c-0.007,0-0.013,0-0.02,0s-0.013,0-0.02,0s-0.013,0-0.02,0c-1.11,0-2.19,0.562-3.196,0.698
		c-1.008,0.136-1.943,0.587-2.759,0.841c-0.819,0.254-1.519,0.685-2.051,1.029c-0.535,0.346-0.901,0.794-1.047,1.203l-22.367,62.576
		l-2.441-0.067l1.089,5.466c0.045,0.241,0.111,0.482,0.202,0.714c0.35,0.891,1.031,1.707,1.989,2.4
		c0.965,0.698,2.208,1.273,3.671,1.679c1.469,0.407,3.154,0.506,4.992,0.527L230.688,271c0.011,0,0.022,0,0.033,0s0.022,0,0.033,0
		c0.011,0,0.022,0,0.033,0c0.011,0,0.022,0,0.033,0c1.826,0,3.519-0.055,5.014-0.432c1.489-0.375,2.775-0.852,3.797-1.526
		c1.015-0.67,1.766-1.43,2.197-2.308c0.361-0.735,0.481-1.511,0.36-2.336L242.646,261.426z"/>
	<g>
		<g enable-background="new    ">
			<defs>
				<polygon id="SVGID_1_" enable-background="new    " points="121.858,266.691 148.282,189.862 223.241,190.384 245.465,267.407 
									"/>
			</defs>
			<clipPath id="SVGID_2_">
				<use xlink:href="#SVGID_1_"  overflow="visible"/>
			</clipPath>
			<g clip-path="url(#SVGID_2_)">
				<path fill="#01DAFF" d="M194.126,264.994l-22.734-0.263c-0.277-0.004-0.537-0.039-0.77-0.099
					c-0.233-0.061-0.439-0.146-0.609-0.251c-0.169-0.105-0.301-0.228-0.386-0.365c-0.085-0.136-0.123-0.285-0.103-0.44l0.179-1.488
					c0.015-0.152,0.085-0.295,0.197-0.425c0.112-0.13,0.268-0.246,0.455-0.344c0.187-0.097,0.406-0.175,0.646-0.229
					c0.24-0.053,0.501-0.082,0.773-0.081c0.002,0,0.004,0,0.007,0c0.002,0,0.004,0,0.007,0c0.002,0,0.004,0,0.007,0
					c0.002,0,0.004,0,0.007,0l22.282,0.249c0.271,0.004,0.53,0.038,0.767,0.096c0.237,0.058,0.45,0.141,0.631,0.243
					c0.181,0.102,0.329,0.222,0.433,0.355c0.104,0.133,0.164,0.279,0.17,0.432l0.027,1.491c0.002,0.158-0.051,0.307-0.15,0.441
					c-0.099,0.135-0.243,0.256-0.423,0.356c-0.18,0.101-0.394,0.182-0.633,0.237C194.666,264.966,194.403,264.996,194.126,264.994
					 M234.394,259.906c-0.002,0-0.004,0-0.007,0s-0.004,0-0.007,0c-0.002,0-0.004,0-0.007,0c-0.002,0-0.004,0-0.007,0
					l-102.613-1.162c-0.537-0.005-1.029-0.07-1.459-0.183c-0.429-0.113-0.795-0.273-1.081-0.47
					c-0.285-0.196-0.491-0.428-0.599-0.684c-0.108-0.255-0.119-0.534-0.017-0.826l21.651-62.888
					c0.042-0.125,0.151-0.243,0.314-0.349c0.162-0.106,0.377-0.201,0.63-0.281c0.253-0.079,0.544-0.142,0.858-0.185
					c0.314-0.043,0.651-0.065,0.998-0.063c0.003,0,0.006,0,0.008,0c0.003,0,0.006,0,0.008,0c0.003,0,0.006,0,0.008,0
					c0.003,0,0.006,0,0.008,0l66.439,0.689c0.351,0.004,0.69,0.033,1.003,0.082c0.314,0.049,0.602,0.118,0.85,0.203
					c0.249,0.085,0.458,0.185,0.612,0.295c0.155,0.111,0.256,0.232,0.288,0.358l15.473,63.367c0.073,0.292,0.034,0.57-0.098,0.822
					c-0.133,0.253-0.361,0.479-0.664,0.669c-0.304,0.19-0.685,0.343-1.123,0.448C235.425,259.853,234.929,259.909,234.394,259.906
					 M194.562,192.136c-0.001,0-0.003,0-0.004,0c-0.001,0-0.003,0-0.004,0s-0.003,0-0.004,0c-0.001,0-0.003,0-0.004,0l-14.17-0.146
					c-0.172-0.002-0.335-0.016-0.483-0.04c-0.147-0.024-0.278-0.058-0.387-0.099c-0.109-0.041-0.195-0.09-0.252-0.143
					c-0.057-0.053-0.085-0.111-0.078-0.172c0.005-0.061,0.045-0.118,0.112-0.17c0.068-0.052,0.163-0.098,0.28-0.137
					c0.117-0.039,0.254-0.069,0.406-0.09c0.152-0.021,0.318-0.032,0.491-0.031l14.058,0.148c0.171,0.002,0.335,0.016,0.484,0.04
					c0.149,0.024,0.284,0.057,0.398,0.098c0.114,0.041,0.207,0.089,0.273,0.142c0.065,0.053,0.103,0.111,0.107,0.172
					c0.001,0.06-0.032,0.117-0.093,0.169c-0.061,0.052-0.15,0.098-0.26,0.137c-0.11,0.039-0.242,0.07-0.389,0.091
					C194.894,192.126,194.732,192.137,194.562,192.136 M157.632,189.927c-1.124-0.008-2.219,0.064-3.238,0.2
					c-1.021,0.137-1.969,0.339-2.795,0.592c-0.83,0.255-1.539,0.561-2.078,0.906c-0.542,0.347-0.913,0.732-1.061,1.142
					l-23.842,65.896c-0.358,0.991-0.337,1.95,0.015,2.834c0.355,0.892,1.045,1.707,2.015,2.401c0.977,0.699,2.237,1.274,3.719,1.68
					c1.488,0.408,3.196,0.644,5.058,0.665l94.526,1.073c0.011,0,0.022,0,0.034,0c0.011,0,0.022,0,0.034,0c0.011,0,0.022,0,0.034,0
					c0.011,0,0.022,0,0.033,0c1.85,0.011,3.566-0.193,5.08-0.57c1.508-0.376,2.811-0.922,3.847-1.597
					c1.028-0.67,1.79-1.466,2.226-2.346c0.433-0.872,0.546-1.824,0.287-2.818l-17.371-66.434c-0.109-0.415-0.445-0.811-0.959-1.17
					c-0.511-0.357-1.197-0.68-2.011-0.951c-0.81-0.271-1.747-0.492-2.765-0.648c-1.015-0.156-2.112-0.247-3.247-0.259l-57.461-0.597
					c-0.007,0-0.014,0-0.02,0s-0.014,0-0.02,0s-0.014,0-0.02,0C157.646,189.927,157.639,189.927,157.632,189.927"/>
				<path fill="#5C6B7B" d="M161.835,205.569c0.061-0.253,0.247-0.491,0.532-0.706c0.284-0.214,0.665-0.405,1.117-0.564
					c0.451-0.159,0.973-0.285,1.54-0.371c0.566-0.086,1.178-0.131,1.81-0.127c0.006,0,0.012,0,0.018,0c0.006,0,0.012,0,0.018,0
					c0.006,0,0.012,0,0.018,0c0.006,0,0.012,0,0.018,0l38.24,0.484c0.641,0.007,1.256,0.065,1.819,0.163
					c0.565,0.098,1.079,0.238,1.518,0.408c0.44,0.17,0.804,0.372,1.067,0.595c0.264,0.224,0.425,0.469,0.458,0.725l2.045,17.329
					c0.038,0.325-0.072,0.634-0.304,0.915c-0.233,0.282-0.59,0.536-1.044,0.748c-0.455,0.213-1.007,0.384-1.63,0.501
					c-0.623,0.117-1.316,0.18-2.051,0.175c-0.007,0-0.014,0-0.021,0s-0.014,0-0.021,0c-0.007,0-0.014,0-0.021,0
					c-0.007,0-0.014,0-0.021,0l-44.449-0.586c-0.731-0.01-1.414-0.085-2.023-0.213c-0.608-0.128-1.141-0.307-1.574-0.526
					c-0.432-0.218-0.766-0.475-0.976-0.758c-0.209-0.282-0.296-0.589-0.237-0.908c0.001-0.005,0.002-0.01,0.003-0.015
					s0.002-0.01,0.003-0.015c0.001-0.005,0.002-0.01,0.003-0.015c0.001-0.005,0.002-0.01,0.004-0.015L161.835,205.569
					 M153.051,192.816c-0.346-0.002-0.684,0.02-0.998,0.063c-0.314,0.043-0.605,0.106-0.858,0.185
					c-0.253,0.079-0.468,0.174-0.63,0.281c-0.163,0.107-0.272,0.225-0.314,0.349L128.6,256.581c-0.102,0.291-0.091,0.57,0.017,0.826
					c0.108,0.256,0.313,0.488,0.599,0.684c0.286,0.197,0.652,0.357,1.081,0.47c0.43,0.113,0.922,0.178,1.459,0.183l102.613,1.162
					c0.002,0,0.004,0,0.007,0c0.002,0,0.004,0,0.007,0c0.002,0,0.004,0,0.007,0s0.004,0,0.007,0c0.535,0.003,1.031-0.053,1.47-0.158
					c0.438-0.105,0.819-0.257,1.123-0.448c0.304-0.19,0.531-0.416,0.664-0.669c0.133-0.252,0.171-0.529,0.098-0.822l-15.473-63.367
					c-0.032-0.127-0.133-0.248-0.288-0.358c-0.155-0.11-0.364-0.21-0.612-0.295c-0.248-0.085-0.536-0.154-0.85-0.203
					c-0.313-0.049-0.652-0.078-1.003-0.082l-66.439-0.689c-0.003,0-0.006,0-0.008,0c-0.003,0-0.006,0-0.008,0
					c-0.003,0-0.006,0-0.008,0C153.056,192.816,153.053,192.816,153.051,192.816"/>
				<path fill="#060707" d="M180.465,191.109c-0.173-0.001-0.339,0.01-0.491,0.031c-0.152,0.021-0.289,0.052-0.406,0.09
					c-0.117,0.039-0.212,0.085-0.28,0.137c-0.068,0.052-0.108,0.109-0.112,0.17c-0.007,0.061,0.021,0.119,0.078,0.172
					c0.057,0.053,0.143,0.102,0.252,0.143c0.109,0.041,0.24,0.075,0.387,0.099c0.147,0.024,0.31,0.038,0.483,0.04l14.17,0.146
					c0.001,0,0.003,0,0.004,0c0.001,0,0.003,0,0.004,0s0.003,0,0.004,0c0.001,0,0.003,0,0.004,0c0.171,0.001,0.333-0.01,0.48-0.031
					c0.147-0.021,0.279-0.052,0.389-0.091c0.11-0.039,0.199-0.085,0.26-0.137c0.061-0.052,0.094-0.109,0.093-0.169
					c-0.003-0.061-0.041-0.119-0.107-0.172c-0.065-0.053-0.159-0.101-0.273-0.142c-0.114-0.041-0.249-0.074-0.398-0.098
					c-0.149-0.024-0.313-0.038-0.484-0.04L180.465,191.109"/>
				<path fill="#060707" d="M171.775,261.009c-0.272-0.002-0.533,0.027-0.773,0.081c-0.24,0.053-0.459,0.132-0.646,0.229
					c-0.187,0.097-0.342,0.214-0.455,0.344c-0.112,0.13-0.182,0.274-0.197,0.425l-0.179,1.488c-0.019,0.155,0.018,0.304,0.103,0.44
					c0.085,0.136,0.217,0.26,0.386,0.365c0.169,0.105,0.376,0.191,0.609,0.251c0.233,0.061,0.493,0.096,0.77,0.099l22.734,0.263
					c0.277,0.002,0.54-0.028,0.779-0.083c0.239-0.055,0.453-0.136,0.633-0.237c0.179-0.101,0.324-0.221,0.423-0.356
					c0.099-0.135,0.152-0.284,0.15-0.441l-0.027-1.491c-0.006-0.153-0.066-0.299-0.17-0.432c-0.104-0.133-0.252-0.254-0.433-0.355
					c-0.181-0.102-0.395-0.185-0.631-0.243c-0.236-0.058-0.495-0.092-0.767-0.096l-22.282-0.249c-0.002,0-0.004,0-0.007,0
					c-0.002,0-0.004,0-0.007,0c-0.002,0-0.004,0-0.007,0C171.779,261.009,171.777,261.009,171.775,261.009"/>
				<path fill="#B3B8BD" d="M185.199,218.712c-0.385-0.003-0.769-0.013-1.151-0.032c-0.382-0.019-0.762-0.045-1.137-0.08
					c-0.376-0.035-0.748-0.077-1.114-0.128c-0.366-0.05-0.727-0.109-1.081-0.175c0.139-0.039,0.277-0.079,0.416-0.119
					c0.139-0.04,0.277-0.081,0.416-0.121c0.139-0.041,0.278-0.082,0.418-0.123c0.14-0.041,0.28-0.082,0.42-0.124l0.793-0.238
					c0.475-0.141,0.953-0.286,1.434-0.434c0.48-0.148,0.963-0.299,1.448-0.452c0.484-0.153,0.971-0.31,1.459-0.469
					c0.487-0.159,0.977-0.32,1.467-0.484c0.703-0.235,1.39-0.468,2.059-0.7c0.667-0.231,1.315-0.46,1.945-0.687
					c0.627-0.226,1.235-0.449,1.821-0.669c0.585-0.219,1.148-0.435,1.689-0.647c0.193,0.412,0.256,0.832,0.189,1.249
					c-0.067,0.419-0.266,0.834-0.595,1.234c-0.33,0.402-0.792,0.789-1.384,1.147c-0.595,0.36-1.32,0.692-2.174,0.983
					c-0.536,0.183-1.1,0.342-1.685,0.478c-0.587,0.136-1.194,0.248-1.816,0.337c-0.622,0.089-1.258,0.154-1.9,0.196
					C186.494,218.697,185.845,218.716,185.199,218.712 M193.122,209.708c1.121-0.29,2.181-0.55,3.167-0.776
					c0.982-0.225,1.891-0.417,2.712-0.573c0.819-0.155,1.55-0.274,2.181-0.353c0.629-0.079,1.158-0.119,1.572-0.117
					c0.06,0,0.117,0.002,0.173,0.004c0.055,0.002,0.108,0.005,0.158,0.009s0.098,0.009,0.143,0.015
					c0.045,0.006,0.087,0.013,0.127,0.021c0.002,0,0.005,0.001,0.007,0.001s0.005,0.001,0.007,0.001
					c0.002,0.001,0.005,0.001,0.007,0.002c0.002,0.001,0.005,0.001,0.007,0.002c0.022,0.005,0.043,0.01,0.064,0.015
					c0.02,0.005,0.04,0.011,0.059,0.017s0.037,0.012,0.053,0.019c0.017,0.007,0.033,0.014,0.048,0.021
					c0.023,0.011,0.045,0.023,0.063,0.036s0.035,0.026,0.049,0.04c0.014,0.014,0.026,0.029,0.036,0.044
					c0.01,0.016,0.017,0.032,0.022,0.049c0.002,0.006,0.003,0.012,0.005,0.018c0.001,0.006,0.002,0.012,0.003,0.018
					c0.001,0.006,0.001,0.013,0.001,0.019c0,0.006,0,0.013,0,0.019c-0.016,0.247-0.421,0.608-1.159,1.057
					c-0.743,0.452-1.825,0.995-3.191,1.602c-1.379,0.612-3.049,1.291-4.955,2.009c-1.926,0.725-4.094,1.491-6.444,2.269
					c-2.294,0.759-4.568,1.466-6.742,2.1c-2.193,0.64-4.278,1.204-6.17,1.673c-1.905,0.472-3.609,0.846-5.026,1.1
					c-1.422,0.256-2.551,0.391-3.299,0.386c-0.107-0.001-0.206-0.004-0.298-0.011c-0.091-0.007-0.174-0.016-0.249-0.028
					c-0.075-0.012-0.141-0.028-0.199-0.046c-0.058-0.018-0.107-0.04-0.148-0.064c-0.213-0.127-0.173-0.331,0.092-0.597
					c0.264-0.265,0.75-0.593,1.429-0.97c0.676-0.375,1.542-0.798,2.568-1.257c1.02-0.456,2.198-0.947,3.506-1.46
					c-0.729,0.39-1.324,0.733-1.797,1.031c-0.475,0.3-0.828,0.556-1.073,0.772c-0.245,0.217-0.382,0.394-0.425,0.535
					c-0.043,0.142,0.009,0.249,0.139,0.326c0.032,0.019,0.071,0.035,0.116,0.05c0.045,0.014,0.097,0.026,0.156,0.036
					c0.058,0.01,0.123,0.017,0.194,0.022c0.071,0.005,0.148,0.008,0.231,0.008c0.306,0.002,0.693-0.026,1.152-0.082
					c0.458-0.056,0.988-0.139,1.578-0.248c0.59-0.109,1.241-0.243,1.942-0.399c0.7-0.156,1.451-0.336,2.242-0.535
					c-0.159-0.057-0.314-0.116-0.465-0.177c-0.151-0.061-0.299-0.124-0.442-0.189c-0.144-0.065-0.284-0.132-0.42-0.201
					c-0.136-0.069-0.269-0.141-0.397-0.214c-0.954-0.539-1.596-1.133-1.941-1.744c-0.343-0.606-0.394-1.227-0.17-1.829
					c0.221-0.597,0.713-1.175,1.458-1.699c0.74-0.52,1.73-0.989,2.959-1.372c0.524-0.163,1.07-0.305,1.632-0.425
					c0.561-0.12,1.139-0.218,1.726-0.296c0.587-0.078,1.184-0.134,1.786-0.171c0.601-0.036,1.207-0.052,1.811-0.048
					c0.807,0.005,1.612,0.047,2.399,0.123c0.788,0.076,1.56,0.188,2.3,0.333c0.742,0.146,1.452,0.327,2.116,0.542
					c0.666,0.216,1.286,0.466,1.845,0.751c0.132,0.067,0.259,0.135,0.381,0.204c0.122,0.069,0.239,0.14,0.351,0.211
					c0.112,0.071,0.219,0.144,0.321,0.217c0.102,0.073,0.199,0.147,0.291,0.222c0.756-0.323,1.422-0.626,1.985-0.903
					c0.561-0.277,1.019-0.528,1.364-0.749c0.344-0.22,0.574-0.41,0.68-0.564c0.105-0.154,0.086-0.272-0.071-0.348
					c-0.043-0.021-0.096-0.04-0.159-0.057s-0.135-0.03-0.218-0.042s-0.175-0.02-0.277-0.026c-0.102-0.006-0.214-0.01-0.336-0.011
					c-0.261-0.002-0.566,0.009-0.918,0.033c-0.352,0.024-0.749,0.061-1.193,0.113c-0.444,0.052-0.935,0.117-1.473,0.198
					C194.342,209.5,193.756,209.596,193.122,209.708 M166.833,203.801c-0.632-0.004-1.244,0.041-1.81,0.127
					c-0.567,0.086-1.089,0.213-1.54,0.371c-0.452,0.159-0.833,0.35-1.117,0.564c-0.284,0.215-0.471,0.453-0.532,0.706
					c0.056-0.226,0.211-0.44,0.447-0.636c0.235-0.196,0.55-0.373,0.927-0.527c0.375-0.153,0.812-0.282,1.291-0.381
					c0.478-0.099,0.999-0.167,1.545-0.199c-0.181,0.076-0.348,0.156-0.498,0.242c-0.151,0.086-0.285,0.177-0.399,0.272
					c-0.114,0.095-0.209,0.195-0.28,0.298c-0.072,0.103-0.12,0.21-0.143,0.32l-3.761,17.054c-0.071,0.323,0.009,0.633,0.216,0.919
					c0.208,0.287,0.542,0.547,0.979,0.769c0.438,0.223,0.978,0.405,1.593,0.535c0.616,0.13,1.308,0.207,2.047,0.217l44.212,0.582
					c0.011,0,0.022,0,0.033,0.001c0.011,0,0.022,0,0.033,0.001c0.011,0,0.022,0,0.033,0c0.011,0,0.022,0,0.033,0
					c0.074,0,0.147,0,0.219-0.001c0.072-0.001,0.144-0.003,0.215-0.006c0.071-0.003,0.142-0.006,0.211-0.01
					c0.07-0.004,0.139-0.009,0.208-0.014c-0.228,0.13-0.487,0.248-0.774,0.353c-0.287,0.104-0.601,0.194-0.938,0.268
					c-0.337,0.073-0.698,0.13-1.078,0.168c-0.38,0.038-0.778,0.056-1.192,0.054c-0.006,0-0.012,0-0.019,0c-0.006,0-0.012,0-0.019,0
					c-0.006,0-0.012,0-0.019,0c-0.006,0-0.012,0-0.019,0l-44.449-0.586c-0.731-0.01-1.414-0.085-2.023-0.213
					c-0.608-0.128-1.141-0.307-1.574-0.526c-0.432-0.218-0.766-0.475-0.976-0.758c-0.209-0.282-0.296-0.589-0.237-0.908
					c-0.059,0.32,0.028,0.626,0.237,0.908c0.21,0.283,0.543,0.54,0.976,0.758c0.434,0.219,0.967,0.399,1.574,0.526
					c0.609,0.128,1.291,0.203,2.023,0.213l44.449,0.586c0.007,0,0.014,0,0.021,0c0.007,0,0.014,0,0.021,0c0.007,0,0.014,0,0.021,0
					s0.014,0,0.021,0c0.735,0.005,1.428-0.058,2.051-0.175c0.622-0.117,1.175-0.288,1.63-0.501c0.454-0.212,0.81-0.466,1.044-0.748
					c0.232-0.281,0.342-0.59,0.304-0.915l-2.045-17.329c-0.033-0.257-0.194-0.502-0.458-0.725c-0.263-0.223-0.627-0.425-1.067-0.595
					c-0.439-0.17-0.953-0.309-1.518-0.408c-0.564-0.098-1.179-0.156-1.819-0.163l-38.24-0.484c-0.006,0-0.012,0-0.018,0
					c-0.006,0-0.012,0-0.018,0c-0.006,0-0.012,0-0.018,0C166.845,203.801,166.839,203.801,166.833,203.801"/>
				<path fill="#AAADAF" d="M166.044,203.826c-0.546,0.032-1.067,0.1-1.545,0.199c-0.479,0.099-0.915,0.228-1.291,0.381
					c-0.376,0.154-0.692,0.331-0.927,0.527c-0.236,0.196-0.391,0.41-0.447,0.636l-4.141,17.224c-0.001,0.005-0.002,0.01-0.004,0.015
					c-0.001,0.005-0.002,0.01-0.003,0.015c-0.001,0.005-0.002,0.01-0.003,0.015s-0.002,0.01-0.003,0.015
					c-0.059,0.32,0.028,0.626,0.237,0.908c0.21,0.283,0.543,0.54,0.976,0.758c0.434,0.219,0.967,0.399,1.574,0.526
					c0.609,0.128,1.291,0.203,2.023,0.213l44.449,0.586c0.006,0,0.012,0,0.019,0c0.006,0,0.012,0,0.019,0c0.006,0,0.012,0,0.019,0
					c0.006,0,0.012,0,0.019,0c0.413,0.003,0.812-0.016,1.192-0.054c0.38-0.038,0.74-0.095,1.078-0.168
					c0.337-0.073,0.651-0.163,0.938-0.268c0.286-0.104,0.546-0.222,0.774-0.353c-0.069,0.005-0.138,0.01-0.208,0.014
					c-0.07,0.004-0.14,0.008-0.211,0.01c-0.071,0.003-0.143,0.005-0.215,0.006c-0.072,0.001-0.146,0.002-0.219,0.001
					c-0.011,0-0.022,0-0.033,0c-0.011,0-0.022,0-0.033,0c-0.011,0-0.022,0-0.033-0.001c-0.011,0-0.022,0-0.033-0.001l-44.212-0.582
					c-0.739-0.01-1.43-0.087-2.047-0.217c-0.615-0.13-1.155-0.313-1.593-0.535c-0.437-0.222-0.771-0.483-0.979-0.769
					c-0.207-0.285-0.287-0.596-0.216-0.919l3.761-17.054c0.022-0.11,0.071-0.217,0.143-0.32c0.071-0.103,0.166-0.202,0.28-0.298
					c0.114-0.095,0.248-0.186,0.399-0.272C165.696,203.983,165.863,203.902,166.044,203.826"/>
				<path fill="#B3B8BD" d="M203.777,208.186l0.008,0.075c0-0.007,0.001-0.013,0-0.019c0-0.006-0.001-0.013-0.001-0.019
					c-0.001-0.006-0.002-0.012-0.003-0.018C203.78,208.198,203.778,208.192,203.777,208.186"/>
				<g>
					<defs>
						<polyline id="SVGID_3_" points="167.703,207.655 203.745,207.896 205.135,220.708 165.704,220.452 167.703,207.655 						"/>
					</defs>
					<clipPath id="SVGID_4_">
						<use xlink:href="#SVGID_3_"  overflow="visible"/>
					</clipPath>
					<polyline clip-path="url(#SVGID_4_)" fill="#B3B8BD" points="203.353,207.939 203.382,207.945 203.375,207.943 
						203.368,207.942 203.36,207.94 203.353,207.939 					"/>
					<path clip-path="url(#SVGID_4_)" fill="#00E676" d="M202.753,207.89c-0.413-0.003-0.942,0.037-1.572,0.117
						c-0.63,0.079-1.362,0.198-2.181,0.353c-0.821,0.155-1.729,0.347-2.712,0.573c-0.986,0.226-2.046,0.486-3.167,0.776
						c0.634-0.112,1.22-0.208,1.758-0.289c0.538-0.081,1.029-0.147,1.473-0.198c0.444-0.052,0.842-0.089,1.193-0.113
						c0.352-0.024,0.658-0.035,0.918-0.033c0.122,0.001,0.234,0.004,0.336,0.011c0.102,0.006,0.194,0.015,0.277,0.026
						s0.155,0.025,0.218,0.042s0.116,0.035,0.159,0.057c0.157,0.077,0.176,0.195,0.071,0.348c-0.105,0.154-0.336,0.344-0.68,0.564
						c-0.345,0.221-0.804,0.473-1.364,0.749c-0.563,0.278-1.228,0.581-1.985,0.903c-0.092-0.075-0.189-0.149-0.291-0.222
						c-0.102-0.073-0.209-0.146-0.321-0.217c-0.112-0.071-0.229-0.142-0.351-0.211c-0.122-0.069-0.249-0.137-0.381-0.204
						c-0.559-0.285-1.179-0.535-1.845-0.751c-0.664-0.215-1.375-0.396-2.116-0.542c-0.74-0.146-1.512-0.257-2.3-0.333
						c-0.787-0.076-1.592-0.117-2.399-0.123c-0.604-0.004-1.21,0.012-1.811,0.048c-0.602,0.036-1.199,0.093-1.786,0.171
						c-0.588,0.078-1.165,0.176-1.726,0.296c-0.562,0.12-1.108,0.262-1.632,0.425c-1.228,0.384-2.219,0.852-2.959,1.372
						c-0.745,0.524-1.236,1.102-1.458,1.699c-0.223,0.602-0.172,1.224,0.17,1.829c0.345,0.611,0.987,1.205,1.941,1.744
						c0.129,0.074,0.261,0.145,0.397,0.214c0.136,0.069,0.276,0.136,0.42,0.201c0.144,0.065,0.291,0.128,0.442,0.189
						c0.151,0.061,0.306,0.12,0.465,0.177c-0.792,0.2-1.542,0.379-2.242,0.535c-0.702,0.157-1.352,0.291-1.942,0.399
						c-0.591,0.109-1.12,0.192-1.578,0.248c-0.459,0.056-0.846,0.084-1.152,0.082c-0.083-0.001-0.16-0.003-0.231-0.008
						c-0.071-0.005-0.136-0.012-0.194-0.022c-0.058-0.01-0.11-0.021-0.156-0.036c-0.045-0.014-0.084-0.031-0.116-0.05
						c-0.13-0.077-0.181-0.183-0.139-0.326c0.043-0.142,0.179-0.319,0.425-0.535c0.245-0.216,0.597-0.472,1.073-0.772
						c0.473-0.299,1.068-0.641,1.797-1.031c-1.307,0.513-2.485,1.004-3.506,1.46c-1.027,0.459-1.893,0.882-2.568,1.257
						c-0.679,0.377-1.165,0.705-1.429,0.97c-0.265,0.266-0.305,0.47-0.092,0.597c0.041,0.025,0.09,0.046,0.148,0.064
						c0.058,0.018,0.125,0.034,0.199,0.046c0.075,0.012,0.158,0.022,0.249,0.028c0.091,0.007,0.191,0.01,0.298,0.011
						c0.749,0.005,1.877-0.13,3.299-0.386c1.417-0.255,3.121-0.628,5.026-1.1c1.892-0.469,3.977-1.033,6.17-1.673
						c2.173-0.634,4.448-1.341,6.742-2.1c2.35-0.778,4.518-1.544,6.444-2.269c1.906-0.718,3.576-1.397,4.955-2.009
						c1.366-0.607,2.448-1.149,3.191-1.602c0.738-0.449,1.143-0.81,1.159-1.057l-0.008-0.075c-0.005-0.017-0.012-0.033-0.022-0.049
						c-0.01-0.016-0.021-0.03-0.036-0.044c-0.014-0.014-0.031-0.028-0.049-0.04s-0.04-0.025-0.063-0.036
						c-0.015-0.007-0.031-0.014-0.048-0.021c-0.017-0.007-0.035-0.013-0.053-0.019s-0.038-0.012-0.059-0.017
						c-0.02-0.005-0.042-0.01-0.064-0.015l-0.029-0.006c-0.04-0.008-0.082-0.015-0.127-0.021c-0.045-0.006-0.093-0.011-0.143-0.015
						s-0.103-0.007-0.158-0.009C202.87,207.892,202.813,207.89,202.753,207.89"/>
				</g>
				<path fill="#00E676" d="M196.5,213.03c-0.541,0.212-1.105,0.428-1.689,0.647c-0.586,0.22-1.194,0.443-1.821,0.669
					c-0.629,0.227-1.278,0.456-1.945,0.687c-0.669,0.232-1.356,0.465-2.059,0.7c-0.491,0.164-0.98,0.325-1.467,0.484
					c-0.488,0.159-0.975,0.316-1.459,0.469c-0.485,0.154-0.968,0.305-1.448,0.452c-0.481,0.148-0.959,0.293-1.434,0.434
					l-0.793,0.238c-0.141,0.041-0.281,0.082-0.42,0.124c-0.14,0.041-0.279,0.082-0.418,0.123c-0.139,0.041-0.278,0.081-0.416,0.121
					c-0.139,0.04-0.277,0.08-0.416,0.119c0.354,0.066,0.715,0.124,1.081,0.175c0.366,0.05,0.738,0.093,1.114,0.128
					c0.376,0.035,0.756,0.061,1.137,0.08c0.382,0.019,0.766,0.029,1.151,0.032c0.647,0.004,1.295-0.015,1.937-0.057
					c0.642-0.042,1.278-0.107,1.9-0.196c0.621-0.089,1.229-0.201,1.816-0.337c0.585-0.136,1.149-0.295,1.685-0.478
					c0.854-0.291,1.579-0.623,2.174-0.983c0.592-0.359,1.053-0.745,1.384-1.147c0.329-0.4,0.527-0.815,0.595-1.234
					C196.756,213.862,196.694,213.442,196.5,213.03"/>
			</g>
		</g>
	</g>
	<g>
		<path fill="#00E676" d="M195,149.75c-0.061,0-0.122-0.011-0.182-0.034c-10.54-4.12-19.648-0.174-19.74-0.134
			c-0.252,0.113-0.547-0.001-0.66-0.254c-0.112-0.252,0.001-0.547,0.253-0.66c0.386-0.171,9.568-4.159,20.511,0.116
			c0.257,0.101,0.384,0.391,0.284,0.648C195.389,149.629,195.2,149.75,195,149.75z"/>
	</g>
	<g>
		<path fill="#00E676" d="M199.25,144.733c-0.061,0-0.122-0.011-0.182-0.034c-15.1-5.902-28.109-0.245-28.239-0.187
			c-0.252,0.114-0.548-0.001-0.66-0.253c-0.113-0.252,0-0.548,0.253-0.66c0.134-0.06,13.527-5.881,29.011,0.168
			c0.257,0.101,0.384,0.391,0.284,0.648C199.639,144.613,199.45,144.733,199.25,144.733z"/>
	</g>
	<g>
		<path fill="#00E676" d="M202.75,139.733c-0.061,0-0.122-0.011-0.182-0.034c-18.823-7.355-35.078-0.303-35.24-0.23
			c-0.253,0.114-0.548-0.001-0.66-0.253c-0.112-0.252,0.001-0.548,0.253-0.66c0.166-0.074,16.789-7.301,36.01,0.212
			c0.258,0.101,0.385,0.391,0.284,0.648C203.139,139.613,202.95,139.733,202.75,139.733z"/>
	</g>
	<g>
		<path fill="#F3A56E" d="M286.185,169.198l10.577,26.19c0,0,32.235,1.188,50.2-21.789L339,156l-4.923-2H316"/>
		<path fill="#F3A56E" d="M324.662,177.966c0,0-32.9,9.381-50.328-17.8c0,0-20.663-45.356-9.95-54.31l-46.847-0.799
			c0,0-7.195,4.637-12.631,4.317c-5.436-0.32-8.314-2.558-8.634-7.195c0,0,0-3.677,11.832-8.154l0.64-3.038l-2.718-3.677
			c0,0-3.837-1.279-3.038-4.637c0.799-3.358,7.355-9.114,25.422-11.992c0,0,20.306-3.997,25.422-3.677
			c5.116,0.32,46.014,17.027,54.169,21.664c8.154,4.637,25.845,38.538,33,66.667l3.939,13.188
			C344.939,168.521,342.409,175.407,324.662,177.966z"/>
		<path opacity="0.5" fill="#E08546" d="M260.461,119.029l15.915-11.574l6.555-10.872c-4.637,3.358-15.989-0.959-17.748-3.677
			c-1.759-2.718,5.916-9.433,5.916-9.433c-9.114,3.997-21.905-1.439-21.905-1.439c-7.195,1.439-18.867-3.198-18.867-3.198
			c-4.781,3.985-19.693,4.97-27.886,5.207c0.342,2.338,3.104,3.267,3.104,3.267l2.718,3.677l-0.64,3.038
			c-11.832,4.477-11.832,8.154-11.832,8.154c0.32,4.637,3.198,6.875,8.634,7.195c5.436,0.32,12.631-4.317,12.631-4.317l46.847,0.799
			C261.004,108.28,260.157,113.178,260.461,119.029z"/>
		<path fill="#F3A56E" d="M5.702,163.09c0,0,22.981-17.632,29.97-27.236c0.188-0.258,0.364-0.51,0.528-0.756
			c6.267-9.4,35.093-63.085,35.093-63.085s34.467-20.053,60.369-20.68c0,0,26.32,2.089,33.422,6.058
			c7.102,3.969,9.191,6.893,8.773,10.444c0,0-5.333,4.968-5.431,5.013l-8.704,6.545c0,0,12.951,7.799,18.939,27.852
			c0,0,1.253,5.153-1.81,6.684c-3.064,1.532-13.23-1.393-20.193-12.812c0,0-4.874,2.228-11.559,0.418c0,0-12.812,6.545-19.496,8.077
			l3.203,4.735c0,0,16.433-7.102,19.775-7.102c3.342,0,32.447-0.139,32.447-0.139s3.342,5.988,0.139,10.027
			s-11.698,5.153-20.61,4.735c0,0-8.773,3.621-12.673,3.899c0,0-9.33,6.545-14.204,7.52l-7.799,6.963
			c0,0-13.647,18.939-18.104,22.56c0,0-23.117,25.972-41.708,27.434l-21.725,19.636C44.347,209.881,30.56,179.592,5.702,163.09z"/>
		<g>
			<path opacity="0.5" fill="#ED985F" d="M181.03,107.108c0,0-0.904,0.004-2.408,0.011c-6.005-19.957-18.899-27.724-18.899-27.724
				l8.704-6.545c0.098-0.045,5.431-5.013,5.431-5.013c0.212-1.799-0.222-3.437-1.622-5.131c-7.702,2.831-29.363-0.3-29.363-0.3
				c-4.735,3.342-17.825,1.671-17.825,1.671c-5.849,6.406-23.396,10.305-23.396,10.305l-26.574,5.381
				c0.495-2.816,2.179-10.633,5.933-12.905l-9.718,5.157l-5.065,9.54l-0.09,0.018C57.549,97.45,40.799,128.2,36.2,135.099
				c-0.164,0.246-0.34,0.498-0.528,0.756c-6.99,9.604-29.97,27.236-29.97,27.236c24.858,16.502,38.645,46.791,38.645,46.791
				l21.725-19.636c18.591-1.462,41.708-27.434,41.708-27.434c4.456-3.621,18.104-22.56,18.104-22.56l7.799-6.963
				c4.874-0.975,14.204-7.52,14.204-7.52c3.899-0.279,12.673-3.899,12.673-3.899c8.913,0.418,17.407-0.696,20.61-4.735
				C184.373,113.096,181.03,107.108,181.03,107.108z M148.583,107.247c-3.342,0-19.775,7.102-19.775,7.102l-3.203-4.735
				c6.684-1.532,19.496-8.077,19.496-8.077c6.684,1.81,11.559-0.418,11.559-0.418c1.455,2.387,3.051,4.397,4.692,6.079
				C155.321,107.225,149.913,107.247,148.583,107.247z"/>
			<path opacity="0.5" fill="#ED985F" d="M81.012,66.858l0.517-0.275C81.352,66.662,81.18,66.756,81.012,66.858z"/>
		</g>
		<g>
			<path opacity="0.5" fill="#E08546" d="M125.701,110.009c6.71-1.571,19.4-8.054,19.4-8.054c6.684,1.81,11.559-0.418,11.559-0.418
				c1.455,2.387,3.051,4.397,4.692,6.079c-6.031,0.027-11.439,0.049-12.769,0.049c-3.342,0-19.775,7.102-19.775,7.102l-1.168-1.726
				c3.703,5.93,6.547,11.371,7.574,15.374c0,0,15.876-8.356,22.142-8.356c6.267,0,15.458-0.836,23.813-6.684
				c0.39-0.273,0.85-0.469,1.372-0.595c-0.153-2.814-1.512-5.254-1.512-5.254s-0.904,0.004-2.408,0.011
				c-6.005-19.957-18.899-27.724-18.899-27.724l8.704-6.545c0.098-0.045,5.431-5.013,5.431-5.013
				c0.212-1.799-0.222-3.437-1.622-5.131c-7.702,2.831-29.363-0.3-29.363-0.3c-4.735,3.342-17.825,1.671-17.825,1.671
				c-5.849,6.406-23.396,10.305-23.396,10.305l-2.169,0.439C104.824,81.674,116.962,96.641,125.701,110.009z"/>
		</g>
		<g>
			<ellipse transform="matrix(0.9996 0.0287 -0.0287 0.9996 7.247 -9.7524)" cx="343.933" cy="248.009" rx="47.623" ry="7.75"/>
			<g>
				<path fill="#04D2EF" d="M345.985,167.763c0,0-26.912,14.987-55.952,13.868l15.416,67.101c0,0,47.105,8.627,79.684,0.888
					L345.985,167.763z"/>
				<path fill="#09C5D8" d="M302.688,181.261l21.361,70.005c-11.091-1.16-18.6-2.534-18.6-2.534l-14.339-66.926
					C294.724,181.945,299.128,181.588,302.688,181.261z"/>
			</g>
		</g>
		<g>
			<g>
				<polyline fill="#5C6B7B" points="194.714,86.249 197.285,78.337 196.394,77.56 189.272,75.679 187.231,78.61 186.01,82.675 
					185.247,84.304 188.33,85.423 192.079,85.947 194.091,86.275 				"/>
				<g>
					<path fill="#00E676" d="M192.955,87.609c-0.072-0.018-0.143-0.04-0.214-0.066l-7.047-2.578
						c-0.549-0.201-0.987-0.604-1.233-1.134c-0.246-0.53-0.271-1.125-0.07-1.674l2.364-6.46c0.413-1.128,1.659-1.726,2.808-1.303
						l7.047,2.578c1.133,0.415,1.718,1.674,1.303,2.807l-2.363,6.46C195.161,87.299,194.046,87.887,192.955,87.609z M189.194,74.934
						c-0.779-0.199-1.575,0.222-1.852,0.979l-2.364,6.46c-0.143,0.392-0.126,0.816,0.05,1.195c0.176,0.378,0.489,0.666,0.881,0.81
						l7.047,2.578c0.816,0.302,1.71-0.125,2.006-0.931l2.363-6.46c0.296-0.81-0.122-1.709-0.932-2.005l-7.047-2.578
						C189.296,74.963,189.245,74.947,189.194,74.934z"/>
				</g>
				<g>
					<path fill="#5C6B7B" d="M154.824,59.498l-6.37,18.261l68.481,23.888l6.37-18.261L154.824,59.498z M187.71,82.669
						c-0.876,0.72-2.035,0.86-3.016,0.467c0.136-0.096,0.276-0.196,0.416-0.299l0.2-0.147c0.476-0.352,0.971-0.738,1.475-1.152
						c0.725-0.597,1.392-1.189,1.972-1.744C188.949,80.836,188.585,81.949,187.71,82.669z M186.532,81.215
						c-2.688,2.205-5.159,3.634-5.521,3.193c-0.236-0.288,0.487-1.303,1.765-2.587c-0.699,0.97-0.857,1.44-0.711,1.617
						c0.166,0.202,0.902-0.101,1.904-0.734c-0.168-0.132-0.325-0.284-0.466-0.456c-1.05-1.28-0.863-3.169,0.417-4.219
						c1.28-1.05,3.169-0.863,4.219,0.417c0.141,0.172,0.259,0.356,0.356,0.547c0.817-0.859,1.258-1.522,1.092-1.724
						c-0.145-0.177-0.713-0.086-1.725,0.381c1.509-1.003,2.646-1.513,2.882-1.225C191.106,76.866,189.22,79.01,186.532,81.215z"/>
					<g>
						<g>
							<path fill="#00E676" d="M199.126,88.913c-0.083-0.029-0.156-0.09-0.197-0.176c-0.083-0.172-0.011-0.378,0.161-0.461
								l3.951-1.908l-1.798-4.072c-0.077-0.174,0.002-0.378,0.176-0.455c0.174-0.078,0.379,0.002,0.455,0.176l2.067,4.683
								l-4.552,2.198C199.304,88.939,199.209,88.942,199.126,88.913z"/>
						</g>
						<g>
							<path fill="#00E676" d="M173.05,79.449c0.083,0.029,0.178,0.026,0.264-0.015c0.172-0.083,0.244-0.289,0.161-0.461
								l-1.907-3.951l3.94-2.071c0.169-0.089,0.234-0.297,0.145-0.466c-0.088-0.169-0.298-0.234-0.466-0.145l-4.532,2.381
								l2.198,4.553C172.894,79.359,172.967,79.42,173.05,79.449z"/>
						</g>
						<path opacity="0.4" fill="#505F6D" d="M154.824,59.498l0.053,0.018c0.294,7.898,7.589,22.814,51.715,36.692
							c3.939,1.239,7.651,2.267,11.155,3.11l-0.813,2.33L148.454,77.76L154.824,59.498z"/>
						<g>
							<g>
								<path fill="#00E676" d="M189.026,88.373c-0.088-0.021-0.175-0.046-0.262-0.077l-8.632-3.016
									c-0.673-0.235-1.214-0.718-1.523-1.36c-0.309-0.641-0.35-1.366-0.116-2.038l2.765-7.913
									c0.483-1.382,1.991-2.133,3.398-1.638l8.633,3.016c1.388,0.485,2.123,2.009,1.638,3.397l-2.765,7.913
									C191.708,87.955,190.361,88.692,189.026,88.373z M184.217,72.995c-0.953-0.228-1.916,0.299-2.239,1.226l-2.765,7.913
									c-0.168,0.48-0.139,0.997,0.082,1.456c0.221,0.458,0.607,0.803,1.088,0.971l8.633,3.016c1,0.354,2.081-0.183,2.427-1.17
									l2.765-7.913c0.346-0.992-0.179-2.081-1.171-2.427l-8.633-3.016C184.342,73.028,184.28,73.01,184.217,72.995z"/>
							</g>
							<g>
								<path fill="#00E676" d="M179.545,84.606l9.745,3.344l2.007-0.679l2.675-7.187l0.725-3.218l-3.892-1.974l-7.044-2.468
									l-1.852,0.928l-2.426,6.602l-0.756,2.888C178.726,82.843,178.446,84.016,179.545,84.606z"/>
								<path fill="#5C6B7B" d="M189.174,78.012c0.688,0.662,1.077,1.575,1.08,2.53l-1.226-0.441
									c-0.159-0.829-0.745-1.511-1.54-1.793c-1.234-0.444-2.589,0.178-3.027,1.39c-0.438,1.212,0.208,2.554,1.443,2.998
									c0.793,0.289,1.68,0.136,2.332-0.401l1.226,0.44c-0.613,0.734-1.496,1.189-2.449,1.261l-0.504,1.395l-1.118-0.402l0.4-1.108
									c-0.191-0.052-0.378-0.119-0.559-0.201l-0.4,1.108l-1.117-0.402l0.504-1.395c-0.966-0.935-1.354-2.367-0.875-3.695
									c0.479-1.328,1.694-2.184,3.036-2.289l0.504-1.395l1.118,0.402l-0.4,1.108c0.191,0.052,0.378,0.119,0.559,0.201l0.4-1.108
									l1.117,0.402L189.174,78.012z"/>
							</g>
						</g>
					</g>
				</g>
				<g>
					<path fill="#34414C" d="M157.559,77.482c-3.306-1.539-4.744-5.481-3.204-8.787c1.539-3.306,5.481-4.743,8.787-3.204
						c3.306,1.539,4.744,5.481,3.205,8.787C164.807,77.583,160.865,79.021,157.559,77.482z M162.793,66.24
						c-2.893-1.347-6.342-0.089-7.688,2.803s-0.089,6.342,2.804,7.688c2.893,1.347,6.342,0.089,7.688-2.804
						S165.685,67.587,162.793,66.24z"/>
				</g>
			</g>
			<g>
				<g>
					<path fill="#B3B8BD" d="M236.987,150.532l-29.055-54.526c-2.773-5.203-0.848-11.391,4.298-13.821
						c5.148-2.432,11.566-0.181,14.339,5.022l29.07,54.554L236.987,150.532z"/>
					<g>
						<path fill="#9DA2A5" d="M210.932,92.497c-0.618-3.512,1.765-6.7,5.311-7.106c3.546-0.406,6.933,2.121,7.55,5.633
							c0.618,3.512-1.765,6.7-5.311,7.106C214.936,98.536,211.549,96.009,210.932,92.497z M211.627,92.417
							c0.551,3.132,3.572,5.386,6.734,5.024c3.162-0.362,5.287-3.206,4.737-6.338c-0.551-3.132-3.572-5.386-6.734-5.024
							C213.201,86.441,211.076,89.285,211.627,92.417z"/>
					</g>
					<path fill="#878C8E" d="M239.738,136.727l1.325,2.605l3.308-1.894l-1.789-3.515l-2.451,1.403
						C239.657,135.598,239.481,136.222,239.738,136.727z M241.476,140.144l0.228,0.448c0.257,0.504,0.845,0.692,1.32,0.42
						l0.422-0.241l-0.691-1.358L241.476,140.144z M244.21,140.333l-0.691-1.358l1.278-0.732l0.691,1.358L244.21,140.333z
						 M245.308,134.097l-0.228-0.448c-0.257-0.504-0.845-0.692-1.32-0.42l-0.408,0.234l0.691,1.358L245.308,134.097z
						 M245.149,136.993l-0.691-1.358l1.278-0.732l0.691,1.358L245.149,136.993z M246.253,139.163l0.422-0.241
						c0.475-0.272,0.65-0.896,0.393-1.401l-0.228-0.448l-1.278,0.732L246.253,139.163z M237.85,132.147l0.271,0.532l4.678-2.678
						l-1.432-2.815l-0.448,0.256l1.162,2.283L237.85,132.147z M237.058,127.447c0.527,1.036,1.622,1.35,2.663,0.754l0.12-0.069
						c0.44-0.271,0.756-0.723,0.893-1.253c0.119-0.503,0.069-1.034-0.166-1.496l-0.035-0.07c-0.249-0.49-0.656-0.854-1.131-1.052
						l-0.021-0.007l-0.247,0.449l0.028,0.02c0.401,0.151,0.73,0.432,0.93,0.823c0.328,0.644,0.267,1.528-0.594,2.076l-1.368-2.689
						l-0.026,0.015c0,0-0.166,0.076-0.245,0.121C236.91,125.616,236.602,126.551,237.058,127.447L237.058,127.447z M239.068,127.852
						c-0.65,0.228-1.267-0.016-1.574-0.617c-0.228-0.448-0.226-1.082,0.477-1.538L239.068,127.852z M235.131,122.656l0.172-0.098
						c-0.242,0.428-0.252,0.976-0.031,1.41l0.021,0.042c0.485,0.952,1.531,1.203,2.572,0.607c1.054-0.604,1.444-1.641,0.967-2.579
						c-0.378-0.742-0.97-0.837-1.211-0.843l0.514-0.294l-0.257-0.504l-4.653,2.664l0.263,0.518l1.634-0.936L235.131,122.656z
						 M238.362,122.217c0.335,0.658,0.029,1.393-0.762,1.846c-0.764,0.437-1.539,0.284-1.867-0.359
						c-0.278-0.546-0.147-1.325,0.749-1.838C237.457,121.307,238.091,121.685,238.362,122.217z M233.366,119.02l0.026-0.015
						c-0.108,0.189-0.294,0.693,0.084,1.435c0.477,0.938,1.463,1.169,2.49,0.581c1.027-0.588,1.398-1.632,0.914-2.584
						c-0.263-0.518-0.614-0.77-1.089-0.805l0.461-0.264c0.645-0.369,1.235-0.147,1.628,0.624c0.164,0.322,0.256,0.703,0.261,1.081
						l0.001,0.035l0.508-0.038l-0.001-0.035c-0.013-0.462-0.128-0.921-0.328-1.313c-0.42-0.826-1.264-1.481-2.358-0.855l-3.24,1.855
						l0.263,0.518L233.366,119.02z M236.41,118.615c0.349,0.686,0.076,1.42-0.701,1.866c-0.791,0.453-1.438,0.318-1.78-0.355
						c-0.378-0.742-0.147-1.325,0.683-1.801C235.421,117.843,236.068,117.943,236.41,118.615L236.41,118.615z M231.565,116.651
						c0.527,1.036,1.615,1.335,2.643,0.746l0.119-0.068c0.44-0.271,0.756-0.723,0.893-1.253c0.119-0.503,0.069-1.034-0.166-1.496
						l-0.035-0.07c-0.249-0.49-0.656-0.854-1.131-1.052l-0.021-0.007l-0.24,0.463l0.028,0.02c0.401,0.151,0.73,0.432,0.93,0.823
						c0.328,0.644,0.267,1.528-0.594,2.076l-1.374-2.701l-0.026,0.015c0,0-0.166,0.076-0.245,0.121
						C231.409,114.805,231.102,115.741,231.565,116.651z M233.568,117.042c-0.65,0.228-1.267-0.016-1.574-0.617
						c-0.228-0.448-0.226-1.082,0.477-1.538L233.568,117.042z M229.757,112.93c0.022,0.077,0.051,0.134,0.074,0.211
						c0.249,0.49,0.746,0.73,1.34,0.661l-0.751,0.43l0.263,0.518l3.326-1.923l0.026-0.015l-0.271-0.532l-1.409,0.807
						c-0.211,0.121-0.449,0.221-0.683,0.264c-0.6,0.126-1.121-0.064-1.349-0.512c-0.029-0.056-0.057-0.112-0.072-0.176l-0.014-0.028
						l-0.487,0.279L229.757,112.93z"/>
				</g>
				<path opacity="0.3" fill="#A5A8AA" d="M208.714,85.004c-0.71,1.791-0.956,4.349,0.489,7.749
					c2.832,6.664,23.891,46.052,30.886,56.319l-3.103,1.459l-29.055-54.526C205.933,92.256,206.385,88.001,208.714,85.004z"/>
			</g>
		</g>
		<path fill="#E08546" d="M146.653,72.923c-0.058-0.068-5.739-6.882-3.097-13.996c0.04-0.108-0.015-0.228-0.123-0.269
			c-0.109-0.04-0.228,0.015-0.268,0.123c-2.439,6.566,1.973,12.86,2.975,14.166c-7.597,2.263-15.739,1.833-16.49,1.787
			c-4.42-6.164-5.083-16.63-5.089-16.737c-0.007-0.111-0.098,0.003-0.208,0.003c-0.004,0-0.008,0-0.012,0
			c-0.115,0-0.203-0.094-0.196,0.021c0.006,0.108,0.673,10.639,5.136,16.908c-6.892,4.565-20.122,7.747-20.816,7.913
			c-0.524-12.118-8.745-19.669-8.829-19.745c-0.086-0.077-0.217-0.076-0.295,0.01c-0.078,0.086-0.071,0.215,0.015,0.292
			c0.083,0.075,8.295,7.606,8.704,19.695l0.002,0.047l0.022,0.042c0.098,0.186,9.805,18.639,10.421,26.031l0.005,0.062l0.038,0.049
			c0.079,0.102,7.913,10.359,8.939,21.446c0.01,0.108,0.101,0.229,0.208,0.229c0.007,0,0.013,0,0.02,0
			c0.115,0,0.2-0.152,0.189-0.267c-1.001-10.811-8.389-20.804-8.988-21.595c-0.636-7.145-9.162-23.656-10.34-25.907
			c0.944-0.227,14.205-3.473,21.057-8.075c0.865,0.052,9.224,0.473,16.924-1.896l0.303-0.094L146.653,72.923z"/>
		<path fill="#F3A56E" d="M162.4,82.45c-4.489,3.087-12.352,4.694-23.218,7.32c0,0-9.348,1.306-20.106,17.233
			c-7.381,10.929-15.095,38.684-48.41,47.313c0,0-18.173-1.671-17.965-16.92s9.818-36.347,29.453-44.285
			c0,0,41.987-17.756,48.462-23.813c0,0,17.669-6.823,29.313-7.34c0,0,5.781,0.308,7.661,5.112
			C167.592,67.07,171.831,75.966,162.4,82.45z"/>
		<g>
			<path fill="#E08546" d="M148.682,82.472l-0.039-0.231c-1.048-6.285-6.317-14.507-6.37-14.589l-0.14-0.217l0.245-0.082
				c6.504-2.168,11.655-3.267,15.311-3.267c4.531,0,5.256,1.716,5.341,1.983c1.09,1.911,1.274,3.847,0.549,5.755
				c-2.438,6.41-14.176,10.406-14.674,10.573L148.682,82.472z M142.747,67.653c0.834,1.335,5.206,8.537,6.251,14.289
				c1.648-0.589,12.016-4.496,14.208-10.259c0.683-1.797,0.504-3.625-0.534-5.434l-0.021-0.053
				c-0.004-0.014-0.511-1.709-4.961-1.709C154.122,64.486,149.096,65.551,142.747,67.653z"/>
		</g>
		<path opacity="0.5" fill="#ED985F" d="M66.002,152.924c-9.47-9.191-3.621-21.725,7.52-38.157
			c11.141-16.433,59.325-30.08,59.325-30.08c-5.513-2.573-7.024-8.296-7.415-11.894c-13.149,7.578-43.276,20.319-43.276,20.319
			c-19.636,7.938-29.245,29.036-29.453,44.285c-0.146,10.651,8.675,14.677,14.008,16.137
			C66.458,153.335,66.218,153.133,66.002,152.924z"/>
		<path fill="#E08546" d="M154.148,63.24l-0.059-0.624c-6.677,0.632-11.879,2.519-13.431,2.823
			c-0.032-0.001-0.064-0.002-0.097,0.007c-0.028,0.008-0.056,0.016-0.084,0.024c-0.134,0.018-0.224,0.015-0.267-0.011l0.033,0.078
			c-7.331,2.101-13.085,5.97-13.144,6.01c-6.584,4.527-48.821,23.179-49.247,23.367c-0.158,0.07-0.23,0.255-0.16,0.413
			c0.052,0.117,0.166,0.187,0.287,0.187c0.042,0,0.085-0.009,0.126-0.027c1.741-0.768,42.717-18.865,49.347-23.423
			c0.058-0.039,5.892-3.964,13.277-6.015c0.003-0.001,0.006-0.004,0.009-0.005C142.089,65.735,147.746,63.845,154.148,63.24z"/>
		<path opacity="0.5" fill="#ED985F" d="M162.897,48.893l0.517-0.275C163.237,48.697,163.065,48.791,162.897,48.893z"/>
		<path fill="#04D2EF" d="M9.462,155.152c0,0,27.991,19.218,36.347,58.071L0,259.5v-100C0,159.5-7.667,161.001,9.462,155.152z"/>
		<path fill="#09C5D8" d="M41.447,198.513C33.402,211.782,10.363,229.792,0,238.5V261l45.809-47.777
			C44.677,207.959,43.182,203.057,41.447,198.513z"/>
		<path fill="none" stroke="#E08546" stroke-miterlimit="10" d="M163.205,82.459c0,0-10.305,4.735-22.282,6.963
			c-11.976,2.228-15.597,10.862-20.332,15.736c0,0-5.71,7.659-9.052,15.04c-3.342,7.381-13.705,26.143-37.838,33.264"/>
		<path fill="#F3A56E" d="M212.9,97.862c0,0,9.593,15.509,24.303,18.707c0,0,4.592,1.716,11.832,8.634
			c8.171,7.807,22.065,45.088,50.045,42.69c0,0,19.826-3.198,12.311-27.181c-7.515-23.983-18.387-28.46-37.734-31.658
			c0,0-4.957,0.32-14.39-7.994s-25.742-13.591-31.658-14.55c-5.916-0.959-7.675-2.398-13.431,2.878
			C214.179,89.388,210.661,93.225,212.9,97.862z"/>
		<g>
			<path fill="#E08546" d="M269.37,81.846c-0.082-0.105-0.232-0.124-0.336-0.043c-0.066,0.051-4.504,3.569-6.276,10.152
				c-0.021-0.004-0.042-0.01-0.066-0.009c-5.705,0.325-14.44-5.259-15.842-6.183c0.032-0.048,0.048-0.107,0.039-0.168
				c-0.805-5.23,2.339-13.746,2.371-13.832c0.046-0.124-0.017-0.262-0.141-0.309c-0.124-0.046-0.262,0.017-0.309,0.141
				c-0.131,0.352-3.197,8.661-2.402,14.018c-5.158,1.893-13.146,1.507-17.85,1.047c-2.009-4.22-1.001-11.396-0.991-11.469
				c0.019-0.131-0.072-0.253-0.203-0.272c-0.13-0.016-0.253,0.072-0.272,0.203c-0.043,0.297-1.003,7.116,0.91,11.482
				c-1.959-0.204-3.23-0.406-3.272-0.412c-0.129-0.024-0.254,0.067-0.275,0.198c-0.022,0.131,0.067,0.254,0.198,0.275
				c0.044,0.007,1.469,0.233,3.64,0.451c0.035,0.02,0.075,0.032,0.116,0.032c0.021,0,0.042-0.009,0.064-0.015
				c4.715,0.462,12.754,0.855,18.011-1.037c1.089,0.731,9.642,6.342,15.712,6.342c0.15,0,0.297-0.005,0.444-0.012
				c-0.722,2.957-0.9,6.501,0.072,10.606c0.026,0.11,0.125,0.185,0.233,0.185c0.018,0,0.037-0.002,0.055-0.007
				c0.129-0.03,0.208-0.16,0.178-0.289c-3.162-13.353,6.056-20.668,6.149-20.74C269.432,82.101,269.451,81.951,269.37,81.846z"/>
			<g>
				<path fill="#E08546" d="M273.977,108.134c-0.025,0-0.051-0.004-0.077-0.013c-0.126-0.042-0.193-0.178-0.15-0.304
					c3.221-9.544,12.804-18.007,12.9-18.091c0.099-0.087,0.251-0.078,0.338,0.022c0.087,0.1,0.077,0.251-0.022,0.338
					c-0.096,0.084-9.583,8.463-12.762,17.884C274.171,108.071,274.077,108.134,273.977,108.134z"/>
			</g>
		</g>
		<g>
			<path fill="#E08546" d="M273.094,109.488c-3.279,0-10.807-5.049-14.075-8.168c-2.856-2.727-7.614-5.397-11.438-7.542
				c-0.85-0.477-1.66-0.932-2.404-1.361c-4.063-2.344-15.614-5.05-15.731-5.077c-0.193-0.045-0.314-0.238-0.269-0.432
				c0.045-0.194,0.24-0.315,0.432-0.269c0.479,0.111,11.772,2.758,15.927,5.155c0.742,0.428,1.55,0.881,2.397,1.357
				c3.858,2.165,8.66,4.86,11.582,7.648c3.657,3.49,11.734,8.628,14.034,7.912c2.365-0.739,7.432-6.304,8.067-10.266
				c0.031-0.196,0.214-0.331,0.412-0.298c0.196,0.031,0.33,0.216,0.298,0.412c-0.682,4.262-5.986,10.034-8.562,10.839
				C273.568,109.459,273.343,109.488,273.094,109.488z"/>
		</g>
		<g>
			<path fill="#E08546" d="M298.25,167.656c-20.169,0.001-35.968-20.813-38.979-26.373c-0.25-0.46-0.522-0.976-0.818-1.537
				c-3.478-6.584-9.952-18.839-21.369-22.838c-12.945-4.535-18.952-11.302-23.12-17.323c-4.447-6.423-0.068-10.427-0.023-10.467
				c0.148-0.131,0.375-0.118,0.507,0.03c0.132,0.148,0.119,0.375-0.029,0.507c-0.163,0.146-3.937,3.635,0.136,9.52
				c4.103,5.926,10.016,12.586,22.767,17.053c11.683,4.093,18.243,16.51,21.768,23.181c0.295,0.558,0.566,1.072,0.814,1.53
				c2.968,5.479,18.527,25.997,38.335,25.997c1.313,0,2.642-0.09,3.989-0.28c0.192-0.034,0.378,0.109,0.406,0.306
				c0.028,0.197-0.109,0.378-0.306,0.406C300.951,167.564,299.591,167.656,298.25,167.656z"/>
		</g>
		<path opacity="0.5" fill="#ED985F" d="M239.761,95.143c12.791,7.035,18.547,17.588,25.262,20.466
			c6.715,2.878,8.954,6.715,19.187,4.797c5.859-1.099,14.967,3.155,23.125,9.869c-7.314-14.999-17.551-18.556-33.677-21.221
			c0,0-4.956,0.32-14.39-7.994c-9.433-8.314-25.742-13.591-31.658-14.55c-5.916-0.959-7.675-2.398-13.431,2.878
			c0,0-0.086,0.093-0.221,0.268C219.677,89.323,230.548,90.076,239.761,95.143z"/>
		<g>
			<path fill="#E08546" d="M222.797,104.387l-0.227-0.117c-2.876-1.477-6.096-4.565-6.804-8.136
				c-0.433-2.185,0.147-4.292,1.679-6.095c1.328-1.562,3.311-2.354,5.894-2.354c4.452,0,9.099,2.327,9.294,2.425l0.388,0.196
				l-0.373,0.223c-5.056,3.034-9.702,13.517-9.749,13.623L222.797,104.387z M223.339,88.166c-2.436,0-4.296,0.735-5.529,2.186
				c-1.454,1.711-1.983,3.625-1.573,5.69c0.659,3.322,3.614,6.218,6.329,7.684c0.717-1.581,4.798-10.25,9.464-13.37
				C230.817,89.798,226.953,88.166,223.339,88.166z"/>
		</g>
		<g>
			<path fill="#E08546" d="M240.721,113c-0.001,0-0.003,0-0.004,0c-0.133,0-0.238,0.034-0.236-0.099
				c0.14-7.912,7.994-15.058,8.073-15.13c0.098-0.089,0.25-0.045,0.339,0.053c0.089,0.098,0.082,0.268-0.016,0.357
				c-0.078,0.071-7.78,7.017-7.915,14.72C240.958,113.032,240.851,113,240.721,113z"/>
		</g>
		<g>
			<path fill="#E08546" d="M131.732,85.174c-0.037,0-0.075-0.01-0.109-0.031c-5.031-3.075-6.711-10.406-6.78-10.717
				c-0.025-0.113,0.046-0.224,0.159-0.249c0.114-0.024,0.224,0.047,0.249,0.159c0.016,0.074,1.711,7.47,6.589,10.451
				c0.098,0.06,0.129,0.189,0.069,0.287C131.871,85.139,131.803,85.174,131.732,85.174z"/>
		</g>
	</g>
</g>
</svg>

'''
'''--- src/assets/icons/ledger/success-connect.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 17.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 width="400px" height="294.232px" viewBox="0 0 400 294.232" enable-background="new 0 0 400 294.232" xml:space="preserve">
<path fill="#367E99" d="M877.773-877.602c-0.631,0-1.261-0.242-1.74-0.726l-38.846-39.199c-0.952-0.96-0.945-2.512,0.016-3.464
	c0.961-0.954,2.511-0.944,3.464,0.016l38.846,39.199c0.952,0.96,0.945,2.512-0.016,3.464
	C879.019-877.838,878.397-877.602,877.773-877.602z"/>
<path fill="#367E99" d="M965.201-921.882c-0.603-0.185-1.135-0.601-1.452-1.203l-25.676-48.85c-0.63-1.197-0.169-2.679,1.029-3.308
	c1.198-0.631,2.678-0.168,3.308,1.029l25.676,48.85c0.63,1.197,0.169,2.679-1.029,3.308
	C966.462-921.743,965.797-921.699,965.201-921.882z"/>
<path fill="#367E99" d="M1067.412-938.388c-0.339-0.532-0.473-1.194-0.323-1.858l12.195-53.822c0.298-1.319,1.611-2.147,2.931-1.848
	c1.321,0.298,2.146,1.611,1.848,2.931l-12.195,53.822c-0.298,1.319-1.611,2.147-2.931,1.848
	C1068.281-937.464,1067.747-937.862,1067.412-938.388z"/>
<ellipse opacity="0.51" fill="#3E3B3A" cx="-343.54" cy="492.352" rx="80.953" ry="12.942"/>
<g>
	<path fill="#F3B48D" d="M-398.934,217.708l-9.738,20.954l-32.677-17.49c0,0,4.288-16.201-7.688-21.968c0,0-6.337-7.266-6.21-17.743
		c0,0-1.884-9.299-4.755-8.768c-2.87,0.53-10.96,8.578,1.861,23.533l-6.485,1.795c0,0-4.436-3.19-6.083,0.232
		s-0.908,5.534-0.908,5.534s-3.359,2.598-0.887,6.949c0,0-3.073,2.735-0.264,6.02c0,0-2.003,4.02,1.787,6.251l1.424,0.213
		c0,0,10.255,6.606,14.839,5.476c4.584-1.13,5.434-1.072,5.434-1.072s38.395,28.411,40.318,29.161s4.14,2.345,5.186,1.267
		s16.877-26.298,16.877-26.298S-393.949,219.757-398.934,217.708z"/>
	<g>
		<path fill="#EE9E72" d="M-467.334,222.896c0,0-0.904,0.272-1.858,0.15c2.445,1.044,6.104,1.868,6.607-2.29l-0.052-0.047
			c0.965,0.178,2.986,0.26,4.819-1.49c2.325-1.166,6.107-2.366,6.107-2.366c-3.007-3.546-3.016-10.882-3.002-11.883
			c0.257-2.471-1.037-6.303-11.116-7.094c0,0,10.631,2.24,8.87,6.243c0,0-1.359,1.988-4.365,1.528c0,0,6.54,0.624,3.83,5.524
			c0,0-1.531,1.721-3.939,1.616c0,0,4.094,2.44,1.764,4.362c-2.27,1.872-4.213,1.674-6.115,0.686l-1.39-1.269
			C-467.173,216.568-463.897,221.359-467.334,222.896z M-455.238,206.87l-0.085,0.326c-0.016-0.03-0.019-0.059-0.035-0.089
			C-455.358,207.107-455.309,207.02-455.238,206.87z"/>
		<path fill="#EE7757" d="M-469.287,223.006c0.032,0.013,0.064,0.027,0.095,0.04c-0.034-0.004-0.067-0.015-0.101-0.021
			L-469.287,223.006z"/>
	</g>
	<path fill="#EE9E72" d="M-386.904,231.755l-2.131-3.364c0,0-13.729,26.698-16.475,26.078s-42.703-28.523-42.703-28.523
		s-9.391,3.862-15.368,0.568c0,0,5.095,3.501,13.882,1.058l8.511,6.027l26.026,18.968c0,0,8.373,5.929,10.153,6.046
		c1.779,0.116,16.573-23.555,18.882-26.892"/>
	<g>
		<path fill="#1D1D1B" d="M-405.65,259.264c-0.373-0.023-1.138-0.215-3.435-1.574c-0.223-0.102-0.442-0.199-0.656-0.282
			c-0.307-0.12-1.297-0.711-6.3-4.278c-7.35-5.239-19.46-14.13-26.019-18.961l-8.268-5.855c-0.194,0.023-0.46,0.063-0.802,0.123
			c-0.617,0.147-1.217,0.269-1.772,0.357c-0.645,0.141-1.389,0.312-2.322,0.542c-1.422,0.351-3.467,0.043-6.048-0.905
			c-1.967-0.556-3.066-1.27-3.167-1.338c-2.918-1.389-5.413-2.938-5.891-3.24l-1.329-0.2l-0.161-0.057
			c-3.508-2.062-2.468-5.56-2.079-6.56c-2.274-2.883-0.474-5.378,0.232-6.17c-1.961-3.772,0.2-6.314,0.936-7.026
			c-0.154-0.726-0.366-2.728,1.006-5.578c0.403-0.838,0.994-1.398,1.755-1.665c1.863-0.652,4.107,0.674,4.811,1.139l5.612-1.553
			c-6.898-8.278-7.244-14.203-6.292-17.74c0.861-3.202,3.043-5.288,4.705-5.87c0.155-0.054,0.303-0.093,0.438-0.118
			c3.211-0.594,5.073,8.123,5.284,9.213c-0.118,9.651,5.42,16.625,6.043,17.377c11.082,5.417,8.455,19.686,7.923,22.097
			l31.954,17.104l9.719-20.912l0.396,0.163c3.271,1.343,7.298,6.641,10.109,10.862c0.977,1.47,1.706,2.657,1.997,3.139l1.411-0.064
			l-0.513,0.743c-0.506,0.731-1.636,2.477-3.068,4.689c-3.57,5.517-8.967,13.856-12.503,18.606c-1.614,2.46-1.986,2.946-2.131,3.095
			c-0.235,0.243-0.544,0.392-0.924,0.451c-0.137,0.096-0.253,0.161-0.364,0.199C-405.461,259.255-405.56,259.269-405.65,259.264z
			 M-405.21,258.145c0.231-0.022,0.379-0.077,0.495-0.199c0.094-0.098,0.481-0.609,2.04-2.983
			c3.533-4.747,8.919-13.072,12.484-18.58c1.075-1.66,1.981-3.061,2.584-3.97l-0.159,0.007l-0.137-0.232
			c-0.008-0.014-0.847-1.432-2.118-3.343c-3.658-5.494-6.941-9.135-9.307-10.339l-9.749,20.98l-33.096-17.714l-0.31-0.167
			l0.089-0.342c0.043-0.158,4.05-15.912-7.449-21.449l-0.144-0.109c-0.065-0.074-6.447-7.517-6.311-17.949
			c-0.746-3.683-2.553-8.728-4.233-8.417c-1.174,0.209-3.541,1.982-4.442,5.339c-0.916,3.407-0.521,9.202,6.56,17.463l0.459,0.534
			l-7.111,1.968l-0.367-0.005l-0.096-0.067c-0.101-0.07-2.478-1.709-4.145-1.126c-0.536,0.188-0.944,0.584-1.244,1.208
			c-1.534,3.186-0.895,5.176-0.889,5.192l0.105,0.304l-0.251,0.197c-0.125,0.098-3.016,2.428-0.774,6.374l0.177,0.314l-0.268,0.24
			c-0.111,0.102-2.704,2.493-0.221,5.396l0.19,0.226l-0.13,0.264c-0.074,0.148-1.739,3.628,1.54,5.622l1.336,0.201l0.176,0.064
			c0.034,0.023,3.468,2.219,7.182,3.833l-0.028,0.069c0.462,0.203,1.058,0.428,1.779,0.631c2.442,0.896,4.311,1.194,5.556,0.886
			c0.943-0.234,1.694-0.404,2.371-0.552c0.558-0.09,1.137-0.207,1.757-0.356c0.512-0.088,0.853-0.135,1.059-0.156l0.165-0.015
			l8.553,6.056c6.526,4.807,18.583,13.661,26.037,18.975c4.808,3.428,5.873,4.074,6.079,4.154c0.232,0.091,0.468,0.194,0.747,0.324
			c1.994,1.178,2.752,1.432,3.037,1.469c0.029-0.014,0.088-0.049,0.191-0.128l0.103-0.082L-405.21,258.145z"/>
	</g>
</g>
<path fill="#050D0E" d="M-286.871,475.669c0,0-3.033,0.152-9.706,0c-6.673-0.152-13.828-7.148-13.828-7.148
	s-18.595,7.707-21.024,10.484h-0.276c0,0-7.486,2.427-5.363,5.315c2.123,2.888,10.009,2.874,14.407,2.268
	c4.398-0.607,11.071,0.758,11.071,0.758c18.653,2.73,28.662-5.763,28.662-5.763v-2.578L-286.871,475.669z"/>
<path fill="#050D0E" d="M-388.753,491.368c0,0,2.55,7.958,9.829,10.233s16.378,1.062,21.535-3.791c0,0,1.213-4.398,0-5.156
	c-1.213-0.758-6.589-4.641-7.162-7.174S-381.294,481.894-388.753,491.368z"/>
<g>
	<path fill="#0B3744" d="M-374.23,299.238c0,0,48.185,9.512,74.005-7.583c0,0,0.112,19.539,0,21.013
		c-0.112,1.474-6.212,52.429-6.574,60.618s-2.637,14.246-5.822,24.184c-3.185,9.938-2.73,53.719-0.91,59.126
		c1.82,5.407,3.64,12.244,3.64,12.244l-27.311,15.456c0,0-1.806-14.766-1.806-18.074c0-3.309-0.455-48.816,5.914-70.876
		c6.369-22.059,4.55-57.691,3.64-76.271l-13.649,4.167c0,0-10.919,50.057-12.739,61.653s-4.55,30.249-5.459,39.348
		c-0.91,9.099,0.455,40.491,0.91,47.77l-1.82,15.014c0,0-13.676-7.279-26.856,4.095c0,0,0.442-9.554,0-15.014
		c-0.442-5.459,9.113-80.761,9.113-80.761L-374.23,299.238z"/>
	<g>
		<path fill="#052831" d="M-361.301,424.242c0.754-7.543,2.758-21.643,4.459-32.854l0,0c-6.475-0.688-18.337-13.169-18.337-13.169
			l3.764-63.103l16.953-1.983c-8.644,1.129-16.953-4.423-16.953-4.423l-0.911-9.133c-1.217-0.204-1.904-0.339-1.904-0.339
			l-5.725,96.107c0,0-9.554,75.301-9.113,80.761c0.442,5.459,0,15.014,0,15.014c13.18-11.374,26.856-4.095,26.856-4.095l1.82-15.014
			C-360.846,464.733-362.211,433.341-361.301,424.242z"/>
		<path fill="#052831" d="M-312.621,397.471c1.179-3.68,2.232-6.826,3.111-9.747c-8.893-0.471-16.052-4.582-20.557-8.058
			c-0.702,5.639-1.67,10.978-3.027,15.68c-6.369,22.059-5.914,67.567-5.914,70.876c0,3.309,1.806,18.074,1.806,18.074l27.311-15.456
			c0,0-1.82-6.837-3.64-12.244C-315.351,451.19-315.806,407.408-312.621,397.471z"/>
	</g>
	<g>
		<path fill="#052831" d="M-389.553,492.06l0.049-1.057c0.004-0.094,0.435-9.588,0.001-14.955
			c-0.087-1.072,0.176-4.617,0.805-10.839c0.176-1.74,0.375-3.64,0.594-5.662c0.601-5.564,1.388-12.47,2.341-20.526
			c2.487-21.061,5.346-43.601,5.374-43.827l5.747-96.506l0.566,0.018c0.315,0.06,0.897,0.167,1.742,0.31
			c4.121,0.696,15.093,2.313,27.918,2.313c18.997,0,33.786-3.415,43.956-10.149l0.702-0.464l0.004,0.841
			c0.004,0.799,0.112,19.575-0.002,21.051c-0.028,0.363-0.398,3.561-0.96,8.402c-1.733,14.93-5.339,46-5.613,52.201
			c-0.235,5.33-1.262,9.671-2.73,14.55c-0.257,0.855-0.533,1.738-0.819,2.639l-1.034,3.217c-0.415,1.28-0.816,2.516-1.238,3.828
			c-0.211,0.659-0.393,1.397-0.564,2.262c-0.084,0.428-0.165,0.887-0.243,1.37c-0.447,2.774-0.806,6.52-1.067,11.134
			c-0.041,0.727-0.079,1.464-0.115,2.214c-0.202,4.285-0.32,9.199-0.342,14.214c-0.004,0.805-0.004,1.605-0.004,2.403
			c0.02,12.316,0.61,22.961,1.401,25.314c0.228,0.679,0.457,1.379,0.682,2.088c0.225,0.704,0.445,1.416,0.659,2.118
			c1.267,4.164,2.297,8.026,2.308,8.065l0.091,0.339l-28.209,15.964l-0.366-3.035c-0.212-1.797-0.513-4.395-0.79-6.995
			c-0.49-4.573-0.738-7.526-0.738-8.774l-0.007-3.091l0.007-2.79c0.025-4.914,0.114-9.846,0.263-14.658
			c0.026-0.835,0.054-1.69,0.085-2.554c0.536-14.889,1.939-35.286,5.584-47.909c0.324-1.12,0.651-2.394,1-3.896
			c0.14-0.606,0.267-1.23,0.395-1.855l0.155-0.752c0.092-0.444,0.184-0.889,0.269-1.34c0.193-1.038,0.373-2.094,0.541-3.163
			l0.121-0.762c0.192-1.262,0.371-2.54,0.532-3.839c2.552-20.503,1.365-45.112,0.639-59.932l-12.836,3.918
			c-0.854,3.922-10.947,50.347-12.677,61.367c-0.312,1.987-0.652,4.192-1.004,6.51l-4.276,31.138
			c-0.064,0.585-0.124,1.148-0.177,1.672c-0.876,8.767,0.403,39.554,0.912,47.697l-1.902,15.755l-0.586-0.311
			c-0.043-0.023-4.292-2.241-10.21-2.241c-5.879,0-11.308,2.113-16.136,6.279L-389.553,492.06z M-373.789,299.685l-5.695,95.592
			c-0.031,0.256-2.889,22.792-5.377,43.85c-0.952,8.052-1.739,14.957-2.34,20.517c-0.219,2.021-0.418,3.917-0.594,5.657
			c-0.614,6.08-0.884,9.671-0.803,10.672c0.354,4.372,0.141,11.418,0.043,14.043c4.797-3.874,10.154-5.836,15.937-5.836
			c4.92,0,8.654,1.438,10.048,2.065l1.743-14.384c-0.389-6.101-1.859-38.287-0.911-47.76c0.052-0.528,0.113-1.095,0.177-1.683
			l2.705-20.516l1.576-10.658c0.352-2.321,0.692-4.526,1.004-6.517c1.801-11.475,12.635-61.179,12.744-61.68l0.057-0.259
			l14.462-4.415l0.046,0.934c0.726,14.823,1.942,39.634-0.634,60.323c-0.162,1.308-0.342,2.593-0.536,3.865l-0.122,0.768
			c-0.169,1.075-0.351,2.142-0.546,3.186c-0.086,0.458-0.18,0.908-0.272,1.358l-0.155,0.748c-0.129,0.633-0.258,1.265-0.399,1.878
			c-0.353,1.519-0.684,2.808-1.012,3.944c-3.619,12.534-5.015,32.851-5.548,47.689c-0.031,0.864-0.06,1.715-0.085,2.55
			c-0.149,4.804-0.238,9.728-0.263,14.633l-0.007,2.787l0.007,3.091c0,1.2,0.253,4.199,0.732,8.678
			c0.277,2.596,0.578,5.191,0.788,6.984l0.2,1.679l26.411-14.946c-0.279-1.031-1.162-4.26-2.208-7.693
			c-0.212-0.698-0.433-1.408-0.656-2.109c-0.223-0.704-0.45-1.4-0.676-2.072c-0.833-2.474-1.429-13.004-1.449-25.605
			c-0.001-0.798,0-1.601,0.004-2.406c0.022-5.028,0.141-9.956,0.344-14.253c0.036-0.754,0.074-1.495,0.115-2.221
			c0.263-4.646,0.626-8.424,1.078-11.23c0.08-0.494,0.163-0.963,0.249-1.4c0.178-0.901,0.369-1.672,0.568-2.293
			c0.444-1.386,0.846-2.623,1.232-3.816l1.061-3.298c0.284-0.896,0.559-1.775,0.816-2.627c1.448-4.813,2.461-9.092,2.692-14.326
			c0.276-6.234,3.884-37.326,5.619-52.267c0.54-4.655,0.93-8.019,0.956-8.365c0.098-1.266,0.023-16.401,0.004-20.144
			c-10.293,6.534-25.007,9.845-43.757,9.845c-12.894,0-23.925-1.626-28.07-2.325C-373.04,299.819-373.481,299.741-373.789,299.685z"
			/>
	</g>
</g>
<g>
	<path fill="#333333" d="M-370.221,221.458l-0.689,1.315l-9.161,17.49c0,0-20.178-8.493-30.49-18.805l30.49-43.979l24.353-5.241
		c0,0,29.581-4.028,50.608,0l32.249,26.169l-12.048,31.24l-15.803-13.042v62.177v7.583v5.156c0,0-24.512,16.075-74.005,7.583
		l3.585-5.459l-1.82-6.066C-372.95,287.578-367.188,242.993-370.221,221.458z"/>
	<path fill="#262425" d="M-410.56,221.458c0,0,19.865,14.85,30.49,18.805l9.849-18.805c0,0,3.767-14.768,0-30.028
		c0,0-2.426,24.264-4.853,30.937c-2.426,6.673-5.763,13.647-5.763,13.647S-399.034,232.075-410.56,221.458z"/>
	<path fill="#262425" d="M-370.221,191.43c0,0,12.435,70.975-2.73,96.148c0,0,7.92-58.103,3.05-67.572L-370.221,191.43z"/>
	<path fill="#262425" d="M-272.86,198.407c0,0-11.526,25.644-14.559,24.65c-3.033-0.994-13.952-12.519-18.805-37.39
		c0,0,4.246,87.133,2.73,91.337c-1.517,4.204-19.715,15.426-38.216,15.123c0,0,15.772,5.921,38.52-8.717l2.479-3.416l1.16-61.874
		l14.642,11.527"/>
	<path fill="none" stroke="#262425" stroke-width="0.5" stroke-miterlimit="10" d="M-305.109,172.238
		c-21.026-4.028-50.608,0-50.608,0l-24.353,5.241l-30.49,43.979c6.918,6.918,18.269,13.013,24.997,16.278
		c1.98,1.039,3.848,1.914,5.493,2.526l9.161-17.49l0.689-1.315c3.033,21.535-2.73,66.12-2.73,66.12l1.82,6.066l-3.585,5.459
		c49.493,8.492,74.005-7.583,74.005-7.583v-5.156v-6.371l1.16-61.874l14.642,11.527l12.048-31.24L-305.109,172.238z"/>
</g>
<g>
	<g>
		<path fill="#F3B48D" d="M-330.675,153.054c0,0-1.517,13.567,8.492,17.51c0,0-13.952,17.895-33.363,1.517
			c0,0,7.886-2.32,5.459-24.666l17.895,5.639"/>
		<path fill="#EE9E72" d="M-349.727,151.764l0.06,5.591c0,0,10.394,7.269,20.804,6.809c0,0-2.245-3.752-1.711-6.189
			S-349.727,151.764-349.727,151.764z"/>
		<g>
			<path fill="#1D1D1B" d="M-339.047,179.535c-5.561,0-11.165-2.353-16.689-7.014l-0.647-0.546l0.811-0.238
				c0.072-0.022,7.478-2.601,5.136-24.181l-0.076-0.692l18.559,5.85l-0.274,0.867l-17.232-5.431
				c1.834,18.171-3.213,22.972-5.148,24.127c5.823,4.747,11.704,6.846,17.501,6.248c7.602-0.788,12.849-6.087,14.276-7.69
				c-9.578-4.31-8.211-17.601-8.195-17.738l0.905,0.101c-0.015,0.132-1.357,13.268,8.207,17.036l0.566,0.223l-0.374,0.48
				c-0.239,0.307-5.962,7.52-15.28,8.492C-337.682,179.5-338.364,179.535-339.047,179.535z"/>
		</g>
	</g>
	<g>
		<g>
			<path fill="#3E2114" d="M-378.136,103.113l-8.189-22.513l8.189-3.932l-4.095-2.892c0,0,4.55-32.757,55.96-22.748
				c0,0,28.207,12.575,36.851-1.902c0,0,6.369,11.104,0,16.512l6.824-3.895c0,0-1.365,19.788-11.374,27.284h-54.14l-15.014,33.883
				h-7.279L-378.136,103.113z"/>
			<path fill="#1E0D0B" d="M-287.002,54.275c-4.549,6.989-10.461,7.106-12.735,9.742c-2.275,2.636-34.724,5.988-34.724,5.988
				l8.336-8.374c-4.55,4.8-15.468,8.393-30.482,8.374c-15.014-0.02-22.293,15.235-22.293,15.235l-7.004-6.076l-0.423,0.203
				l8.189,22.513l7.734,19.796h7.279l15.014-33.883h54.14c10.009-7.496,11.374-27.284,11.374-27.284l-6.824,3.895
				C-286.282,61.741-286.24,57.696-287.002,54.275z"/>
			<g>
				<path fill="#1D1D1B" d="M-362.475,122.848h-8.492l-7.961-20.374l-8.478-23.309l7.536-3.618l-3.282-2.318l0.076-0.549
					c0.036-0.254,3.94-25.434,38.791-25.434c5.566,0,11.704,0.645,18.244,1.918l0.196,0.062c0.112,0.05,11.314,4.987,21.504,4.987
					c6.835,0,11.611-2.195,14.196-6.524l0.797-1.335l0.773,1.349c0.227,0.395,4.606,8.168,2.301,14.153l4.759-2.716l-0.116,1.695
					c-0.057,0.825-1.511,20.293-11.736,27.95l-0.243,0.181h-53.851L-362.475,122.848z M-369.725,121.028h6.066l15.014-33.883h54.423
					c7.677-5.995,10.003-19.839,10.595-24.706l-5.286,3.017l-1.041-1.484c4.492-3.813,1.85-11.034,0.474-14.021
					c-3.062,4.036-8.052,6.081-14.862,6.081c-10.189,0-20.94-4.574-22.148-5.102c-6.387-1.238-12.374-1.865-17.796-1.865
					c-30.817,0-36.171,19.703-36.895,23.329l4.889,3.453l-8.842,4.246l7.908,21.739L-369.725,121.028z"/>
			</g>
		</g>
		<g>
			<path fill="#F3B48D" d="M-370.882,124.408c0,0,6.174,22.637,14.667,25.67c8.492,3.033,29.312,10.726,29.312,10.726
				s14.862,2.73,21.231-7.583c6.369-10.312,15.772-25.781,7.279-76.129h-7.886l2.426-5.156c0,0-30.634,10.312-59.751,6.369
				l-1.82,32.15l-3.943,6.078c0,0-3.64-14.267-8.189-16.39c-4.55-2.123-9.402,2.73-10.312,4.853
				C-388.777,107.12-390.9,128.048-370.882,124.408z"/>
			<path fill="#F3B48D" d="M-298.392,77.093h-7.886l2.427-5.156c0,0-24.978,8.405-51.262,7.134
				c-1.272,10.461-6.122,45.946,10.516,74.566c8.042,2.345,17.695,7.168,17.695,7.168s14.862,2.73,21.231-7.583
				S-289.9,127.441-298.392,77.093z"/>
			<path fill="#EE9E72" d="M-298.392,77.093h-7.886l2.427-5.156c0,0-13.392,4.501-30.877,6.416l14.851,3.103
				c0,0,2.469,10.009,1.689,14.255c-0.779,4.246,2.14,19.298,3.96,23.544c0,0-2.616,16.492-2.313,18.615
				c0.231,1.62,2.743,13.478,0.421,22.513c3.84-0.936,7.85-2.954,10.449-7.161C-299.302,142.909-289.9,127.441-298.392,77.093z"/>
			<path fill="#EF9565" d="M-318.986,93.706c0,0,3.033,19.315,7.279,25.033c0,0-6.369,7.234-15.772-0.652c0,0,5.763,3.336,12.132,0
				C-315.346,118.087-321.715,103.599-318.986,93.706z"/>
			<g>
				<path fill="#FDFCFB" d="M-337.925,128.549c0,0,18.653,8.165,27.752,3.085c0,0-3.412,7.886-5.232,8.341
					S-330.873,143.511-337.925,128.549z"/>
				<g>
					<path fill="#EF9565" d="M-320.247,141.219c-5.623,0-13.328-2.125-18.1-12.253l-0.517-1.097l1.111,0.486
						c0.108,0.047,10.873,4.711,19.855,4.711c3.061,0,5.582-0.541,7.493-1.607l1.173-0.655l-0.533,1.232
						c-0.585,1.352-3.6,8.117-5.539,8.602C-316.172,140.856-317.966,141.219-320.247,141.219z M-336.992,129.652
						c4.592,8.775,11.588,10.658,16.744,10.658c2.183,0,3.895-0.346,4.721-0.553c0.979-0.244,3.008-3.899,4.417-6.948
						c-1.864,0.776-4.141,1.168-6.79,1.168C-325.348,133.977-333.958,130.853-336.992,129.652z"/>
				</g>
			</g>
			<g>
				<path fill="#1D1D1B" d="M-376.533,120.641c-0.208,0-0.416-0.079-0.575-0.238c-2.807-2.807-3.93-5.212-3.337-7.148
					c0.462-1.512,1.831-2.297,2.784-2.671c-1.198-2.448-2.452-3.756-3.651-3.798c-0.021,0-0.04-0.001-0.06-0.001
					c-1.745,0-3.169,2.618-3.182,2.645c-0.208,0.397-0.7,0.55-1.098,0.342c-0.398-0.209-0.551-0.701-0.342-1.098
					c0.078-0.147,1.966-3.607,4.739-3.513c2.025,0.07,3.865,1.953,5.468,5.597l0.407,0.925l-0.994,0.2
					c-0.021,0.004-2.088,0.435-2.517,1.853c-0.273,0.905,0.013,2.596,2.934,5.517c0.318,0.318,0.318,0.832,0,1.15
					C-376.117,120.562-376.325,120.641-376.533,120.641z"/>
			</g>
			<g>
				<path fill="#1D1D1B" d="M-322.528,161.411c-2.604,0-4.382-0.321-4.455-0.334c-0.284-0.098-20.99-7.748-29.383-10.746
					c-8.09-2.889-13.944-22.424-14.841-25.58c-1.425,0.239-2.785,0.36-4.047,0.36c0,0-0.001,0-0.002,0
					c-4.919,0-8.594-1.791-10.922-5.324c-3.792-5.751-2.632-13.917-2.106-15.146c0.846-1.973,4.464-5.654,8.365-5.654
					c0.889,0,1.751,0.191,2.559,0.569c4.022,1.877,7.239,12.374,8.17,15.699l3.322-5.121l1.841-32.52l0.488,0.067
					c4.383,0.594,9.073,0.894,13.942,0.894c23.8-0.001,45.387-7.172,45.603-7.244l1.01-0.34l-2.575,5.472h7.554l0.064,0.379
					c8.554,50.712-1.011,66.197-7.341,76.444C-309.65,160.355-317.962,161.411-322.528,161.411z M-326.745,160.202
					c0.037,0,1.769,0.299,4.216,0.299c5.347,0,12.543-1.335,16.471-7.693c6.242-10.106,15.668-25.363,7.282-75.436h-8.219
					l2.288-4.861c-4.539,1.405-23.855,6.972-44.892,6.973c-4.729,0-9.294-0.282-13.577-0.838l-1.799,31.781l-4.574,7.051
					l-0.257-1.007c-0.036-0.141-3.638-14.082-7.94-16.09c-0.688-0.321-1.419-0.483-2.174-0.483c-3.456,0-6.786,3.371-7.528,5.103
					c-0.433,1.008-1.55,8.858,2.029,14.286c2.149,3.261,5.569,4.915,10.163,4.915c0.001,0,0.002,0,0.002,0
					c1.328,0,2.771-0.14,4.292-0.417l0.411-0.075l0.11,0.403c0.061,0.224,6.209,22.443,14.381,25.362
					C-347.678,152.468-327.025,160.099-326.745,160.202L-326.745,160.202z"/>
			</g>
			<g>
				<g>
					<circle fill="#1D1D1B" cx="-344.598" cy="100.715" r="4.398"/>
					<circle fill="#FFFFFF" cx="-345.001" cy="98.842" r="1.873"/>
				</g>
				<g>
					<circle fill="#1D1D1B" cx="-305.775" cy="102.029" r="4.398"/>
					<circle fill="#FFFFFF" cx="-306.178" cy="100.156" r="1.873"/>
				</g>
				<path fill="#1D1D1B" d="M-354.737,93.414c0,0,11.101-4.421,20.074-1.033l0.202-5.152c0,0-10.269-1.314-20.193,4.064
					L-354.737,93.414z"/>
				<path fill="#AF351A" d="M-285.574,94.8l-0.06-1.818l-27.571,0.909l-13.901,0.002l-32.91-1.816l-20.114,5.554l0.211,1.357
					l19.031-4.994c-0.159,1.737-1.097,14.64,5.892,16.546c1.261,0.344,5.347,1.344,10.191,1.344c4.183,0,8.932-0.746,12.915-3.304
					c4.205-2.701,7.053-7.698,7.994-13.438l-1.137,0.569h7.886c0,0.55,0.098,13.485,8.592,15.445
					c1.297,0.299,4.02,0.825,7.122,0.825c3.718,0,7.982-0.755,10.99-3.558c3.144-2.929,4.261-7.497,3.329-13.572L-285.574,94.8z
					 M-332.875,107.049c-8.112,5.212-20.282,2.108-21.644,1.735c-4.855-1.324-4.925-11.133-4.542-14.8l-0.905-0.095l32.807,1.822
					h1.194C-326.838,100.845-329.159,104.662-332.875,107.049z M-291.685,107.092c-4.861,4.527-13.829,2.899-16.463,2.291
					c-7.083-1.635-7.181-13.545-7.181-13.672l2.153-0.001l25.147-0.829l-0.899,0.141
					C-288.062,100.521-288.99,104.581-291.685,107.092z"/>
				<path fill="#1D1D1B" d="M-297.913,93.414c0,0-11.101-4.421-20.074-1.033l-0.202-5.152c0,0,10.269-1.314,20.193,4.064
					L-297.913,93.414z"/>
			</g>
		</g>
	</g>
</g>
<g>
	<g>
		<g>
			<path fill="#F3A56E" d="M87.102,90.995c-0.015,2.381,0.201,5.635,2.112,9.726l-4.99-0.009c0,0-2.534-3.162-4.392-1.046
				c-1.859,2.116-1.751,3.773-1.751,3.773s-2.917,1.187-2.018,4.788c0,0-2.74,1.342-1.388,4.248c0,0-2.231,2.473,0.032,4.821
				l0.975,0.436c0,0,6.01,6.762,9.51,6.868c3.5,0.106,4.095,0.316,4.095,0.316s1.181,1.515,2.996,3.837l6.62-4.32l-2.661-2.546
				c0,0,6.29-10.72-1.117-17.225c0,0-2.16-4.525-1.583-10.377c0,0,0.771-5.657-1.38-6.797
				C90.009,86.348,87.121,87.911,87.102,90.995z"/>
			<g>
				<path fill="#DA7B51" d="M77.334,117.944c0,0-0.7,0.014-1.357-0.263c1.539,1.233,3.989,2.55,5.176-0.32l-0.028-0.044
					c0.654,0.319,2.082,0.781,3.739-0.105c1.893-0.37,4.834-0.474,4.834-0.474c-1.442-3.132,0.013-8.374,0.222-9.087
					c0.676-1.714,0.514-4.709-6.528-7.282c0,0,7.149,3.717,5.093,6.227c0,0-1.366,1.15-3.422,0.222c0,0,4.548,1.748,1.636,4.709
					c0,0-1.437,0.925-3.136,0.37c0,0,2.439,2.558,0.391,3.467c-1.995,0.885-3.343,0.357-4.505-0.728l-0.74-1.183
					C78.709,113.456,80.095,117.53,77.334,117.944z M89.167,108.904l-0.126,0.216c-0.005-0.024-0.002-0.046-0.007-0.071
					C89.034,109.05,89.086,108.998,89.167,108.904z"/>
				<path fill="#EE7757" d="M75.917,117.633c0.02,0.016,0.04,0.032,0.06,0.048c-0.023-0.01-0.045-0.024-0.068-0.035L75.917,117.633z
					"/>
			</g>
			<path fill="#DA7B51" d="M90.386,123.931c0,0,1.308,1.587,3.314,4.005l-1.388,0.934l-3.312-4.073
				c-6.764-0.005-9.707-3.521-9.707-3.521C82.908,124.819,90.386,123.931,90.386,123.931z"/>
		</g>
		<g>
			<path fill="#F3A56E" d="M299.493,91.995c0.015,2.381-0.201,5.635-2.112,9.726l4.99-0.009c0,0,2.534-3.162,4.392-1.046
				c1.859,2.116,1.751,3.773,1.751,3.773s2.917,1.187,2.018,4.788c0,0,2.74,1.342,1.388,4.248c0,0,2.231,2.473-0.032,4.821
				l-0.975,0.436c0,0-6.01,6.762-9.51,6.868c-3.5,0.106-4.095,0.316-4.095,0.316s-1.181,1.515-2.996,3.837l-6.62-4.32l2.661-2.546
				c0,0-6.29-10.72,1.117-17.225c0,0,2.16-4.525,1.583-10.377c0,0-0.771-5.657,1.38-6.797S299.473,88.911,299.493,91.995z"/>
			<g>
				<path fill="#DA7B51" d="M307.886,114.456l-0.74,1.183c-1.162,1.084-2.51,1.613-4.505,0.728
					c-2.047-0.909,0.391-3.467,0.391-3.467c-1.699,0.555-3.136-0.37-3.136-0.37c-2.912-2.961,1.636-4.709,1.636-4.709
					c-2.056,0.928-3.422-0.222-3.422-0.222c-2.055-2.51,5.093-6.227,5.093-6.227c-7.043,2.572-7.204,5.568-6.528,7.282
					c0.209,0.712,1.664,5.954,0.222,9.087c0,0,2.941,0.104,4.834,0.474c1.658,0.885,3.086,0.424,3.739,0.105l-0.028,0.044
					c1.187,2.87,3.638,1.553,5.176,0.32c-0.657,0.277-1.357,0.263-1.357,0.263C306.499,118.53,307.886,114.456,307.886,114.456z
					 M297.561,110.05c-0.005,0.025-0.002,0.046-0.007,0.071l-0.126-0.216C297.508,109.998,297.561,110.05,297.561,110.05z"/>
				<path fill="#EE7757" d="M310.678,118.633c-0.02,0.016-0.04,0.032-0.06,0.048c0.023-0.01,0.045-0.024,0.068-0.035
					L310.678,118.633z"/>
			</g>
			<path fill="#DA7B51" d="M296.208,124.931c0,0-1.308,1.587-3.314,4.005l1.388,0.934l3.312-4.073
				c6.764-0.005,9.707-3.521,9.707-3.521C303.686,125.819,296.208,124.931,296.208,124.931z"/>
		</g>
		<path fill="#01DAFF" d="M287.25,120.5l-27.847,28.485l-6.425-7.01c-8.014-8.769-17.213-16.819-23.579-22.075
			c-10.599-9.887-16.249-12.017-16.249-12.017c-5.24-2.022-12.88-3.123-21.902-2.762c-11.697,0.468-22.335,6.852-24.282,8.081
			c0.082-0.128,0.158-0.266,0.242-0.391c-1.795,1.214-4.062,2.902-6.764,5.187c-0.365,0.279-0.737,0.566-1.126,0.867l-0.004,0.098
			c-1.029,0.894-2.113,1.868-3.259,2.937c-6.367,5.255-15.565,13.306-23.579,22.075l-6.425,7.01L99.25,119.25
			c-1.625,3.057-7.357,7.76-10,11c2.022,3.279,13.258,23.382,21.491,32.494c5.945,7.409,13.227,12.911,17.799,12.996
			c0.229,0.06,0.461,0.109,0.705,0.128c5.348,0.411,23.313-12.965,29.148-17.432l-3.688,62.424c0,0,20.315,2.955,38.241,2.013
			c17.926,0.942,36.228-0.671,36.228-0.671l-1.096-66.594c0,0,21.715,18.754,28.13,18.26c0.244-0.019,0.476-0.068,0.705-0.128
			c4.571-0.085,11.853-5.588,17.799-12.996c8.233-9.112,19.767-25.715,21.789-28.994C293.857,128.51,288.875,123.557,287.25,120.5z"
			/>
		<path opacity="0.4" fill="#09C5D8" d="M174.787,222.754c-13.405-49.949,7.779-100.898,15.822-117.588
			c-11.442,0.668-21.732,6.829-23.643,8.036c0.082-0.128,0.158-0.266,0.242-0.391c-1.795,1.214-4.062,2.902-6.764,5.187
			c-0.365,0.279-0.737,0.566-1.126,0.867l-0.004,0.098c-1.029,0.894-2.113,1.868-3.259,2.937
			c-6.367,5.255-15.565,13.306-23.579,22.075l-6.425,7.01L99.25,119.25c-1.625,3.057-7.357,7.76-10,11
			c2.022,3.279,13.258,23.382,21.491,32.494c5.945,7.409,13.227,12.911,17.799,12.996c0.229,0.06,0.461,0.109,0.705,0.128
			c5.348,0.411,23.313-12.965,29.148-17.432l-3.688,62.424C154.704,220.86,163.587,222.151,174.787,222.754z"/>
	</g>
	<ellipse fill="#060707" cx="195.181" cy="258.207" rx="68.431" ry="20.127"/>
	<g>
		<defs>
			<path id="SVGID_1_" d="M149.256,272.134c11.976,3.028,27.553,4.857,44.584,4.857c22.409,0,42.302-3.168,54.784-8.064
				l-6.033-47.843l-93.701-5.814l-6.485,24.376l0.895,30.861"/>
		</defs>
		<clipPath id="SVGID_2_">
			<use xlink:href="#SVGID_1_"  overflow="visible"/>
		</clipPath>
		<g clip-path="url(#SVGID_2_)">
			<g>
				<g>
					<path fill="#4A9EDD" d="M228.878,224.603l-69.588,1.341c-1.849,24.265-1.792,128.39,10.957,187.487
						c6.784,2.244,11.796,3.615,18.716,2.044c3.406-34.737,3.22-153.104,3.22-153.104c2.315,0.513,3.657-0.6,6.338-1.043
						c0,0,1.703,97.317,6.046,154.147c6.92,1.572,11.814,2.2,18.598-0.044C235.407,354.843,228.878,224.603,228.878,224.603z"/>
				</g>
			</g>
			<g opacity="0.8">
				<path fill="#2494E6" d="M182.296,407.333c0,0-7.605-38.14-10.647-71.513c-2.322-25.476,1.56-83.94,3.527-110.182l-15.886,0.306
					c-1.849,24.265-1.792,128.39,10.957,187.487c6.679,2.209,11.649,3.558,18.404,2.1L182.296,407.333z"/>
			</g>
			<g>
				<g>
					<path fill="#230602" d="M157.949,226.222c0,0,33.407,2.59,70.698-0.518l0.388,9.193c0,0-26.026,7.381-71.086,0"/>
				</g>
				<g>
					<g>
						<g>
							<path fill="#BCBCBC" d="M187.971,238.498c5.12,0.867,10.364,1.001,15.522,0.398c-0.082-4.132-0.165-8.264-0.247-12.396
								c-4.743-0.864-9.617-1.005-14.402-0.416C187.897,230.141,187.601,234.349,187.971,238.498z"/>
						</g>
					</g>
					<g>
						<g>
							<path fill="#230602" d="M201.568,236.287c-0.006-2.598-0.011-5.196-0.017-7.793c-3.754-0.002-7.508-0.005-11.261-0.007
								c-0.183,2.458-0.366,4.916-0.549,7.373C193.639,236.542,197.631,236.687,201.568,236.287z"/>
						</g>
					</g>
					<g>
						<g>
							<path fill="#BCBCBC" d="M192.368,233.826c0.37-0.027,0.76-0.116,1.022-0.379c0.273-0.274,0.357-0.693,0.311-1.077
								c-0.046-0.384-0.206-0.744-0.364-1.097c-1.55-0.447-3.301-0.132-4.599,0.825C189.542,233.246,190.97,233.926,192.368,233.826
								z"/>
						</g>
					</g>
				</g>
			</g>
			<g>
				<path fill="#3C0605" d="M232.64,415.364c-2.089-2.962-5.151-5.007-8.438-5.696c-11.37-3.448-20.196,6.416-20.196,6.416
					c6.241,2.296,13.7,2.545,13.7,2.545l0.047-0.045c4.493,0.325,9.015,0.124,13.469-0.619c0.421-0.07,0.851-0.149,1.22-0.39
					c0.368-0.24,0.666-0.68,0.648-1.161C233.075,416.018,232.858,415.673,232.64,415.364z"/>
			</g>
			<g>
				<path fill="#3C0605" d="M187.892,416.318c-5.706-4.86-11.958-6.328-15.704-6.761c-0.575-0.088-1.154-0.143-1.734-0.149
					c-1.045-0.053-1.659-0.017-1.659-0.017l-0.039,0.132c-3.618,0.483-7.048,2.614-9.324,5.84c-0.218,0.309-0.435,0.655-0.45,1.05
					c-0.018,0.481,0.28,0.921,0.648,1.161c0.368,0.241,0.799,0.319,1.22,0.39c2.757,0.46,5.541,0.712,8.327,0.762
					C176.927,419.491,187.892,416.318,187.892,416.318z"/>
			</g>
		</g>
	</g>
	<g>
		<path fill="#230602" d="M156.499,219.513c0,0,33.407,2.59,70.698-0.518l0.388,9.193c0,0-26.026,7.381-71.086,0"/>
		<g>
			<g>
				<path fill="#BCBCBC" d="M186.52,231.789c5.12,0.867,10.364,1.001,15.522,0.398c-0.082-4.132-0.165-8.264-0.247-12.396
					c-4.743-0.864-9.617-1.005-14.402-0.416C186.446,223.432,186.151,227.64,186.52,231.789z"/>
			</g>
			<g>
				<path fill="#230602" d="M200.117,229.578c-0.006-2.598-0.011-5.196-0.017-7.793c-3.754-0.002-7.508-0.005-11.261-0.007
					c-0.183,2.458-0.366,4.916-0.549,7.373C192.189,229.833,196.18,229.978,200.117,229.578z"/>
			</g>
			<g>
				<path fill="#BCBCBC" d="M190.917,227.117c0.37-0.027,0.76-0.116,1.022-0.379c0.273-0.274,0.357-0.693,0.311-1.077
					c-0.046-0.384-0.206-0.744-0.364-1.097c-1.55-0.447-3.301-0.132-4.599,0.825C188.091,226.537,189.519,227.217,190.917,227.117z"
					/>
			</g>
		</g>
	</g>
	<path fill="#09C5D8" d="M212.094,107.646c-9.344-5.896-29.094-1.396-35.25,0.504c2.286,4.633,5.105,12.102,9.02,14.36
		c0,0,1.062,0.856,2.741,1.336c0.63,0.18,1.346,0.307,2.125,0.316c1.299,0.015,2.774-0.298,4.316-1.241c0,0,3.015,1.919,5.345,0.959
		c0.113-0.046,0.268-0.122,0.436-0.209h0C202.936,122.58,208.448,117.604,212.094,107.646z"/>
	<path opacity="0.5" fill="#BCBFC1" d="M155.225,141.967c-0.111-0.009-0.183-0.014-0.183-0.014l-1.457,70.309
		c8.623,3.203,17.146,5.128,25.233,6.189C162.694,199.678,156.967,159.026,155.225,141.967z"/>
	<polygon fill="#BCC0C4" points="165.215,143.708 167.787,112.511 173.154,109.324 171.7,145.049 	"/>
	<polygon fill="#BCC0C4" points="216.874,145.944 218.942,111.002 223.303,113.685 222.241,144.379 	"/>
	<path fill="#D6D7D8" d="M243.29,228.181c0,0-47.563,16.253-97.755-2.39l1.793-86.522c0,0,54.375,4.302,96.441,0L243.29,228.181z"/>
	<polygon fill="#00E676" points="162.887,187.538 181.869,221.592 195.182,221.592 231.174,164.157 210.959,152.721 
		186.481,206.174 	"/>
	<g>
		<path fill="#0A9EA5" d="M195.813,114.526c-4.795,0-8.537-1.712-8.775-1.823c-0.25-0.117-0.357-0.415-0.241-0.665
			c0.117-0.249,0.413-0.36,0.665-0.241c0.085,0.041,8.683,3.962,16.297-0.234c0.24-0.135,0.545-0.046,0.679,0.196
			c0.134,0.241,0.046,0.546-0.196,0.679C201.386,114.012,198.44,114.526,195.813,114.526z"/>
	</g>
	<path fill="#F3A56E" d="M186.25,92.5l1,18.75c0,0,8.25,4.25,16.75-0.25l1.5-13.25"/>
	<path opacity="0.5" fill="#DA7B51" d="M204.25,93.5L201,90l-14.5,1.5l0.488,13.665c0.298,0.212,0.598,0.413,0.902,0.588
		c0,0,0.281,0.227,0.784,0.516c0.88,0.507,2.44,1.209,4.364,1.231c1.374,0.016,2.934-0.316,4.565-1.312c0,0,0.611,0.388,1.504,0.74
		c0.51,0.201,1.113,0.39,1.747,0.488c0.317,0.049,0.642,0.075,0.966,0.069c0.487-0.01,0.975-0.093,1.437-0.283
		c0.192-0.079,0.468-0.215,0.805-0.407L204.25,93.5z"/>
	<path fill="#F3A56E" d="M222.39,60.57c-1.117-0.652-3.418,0.218-4.331,1.033c-2.272-27.414-3.855-24.574-6.686-26.981
		c-2.899-2.464-27.687-0.29-37.11,12.901c0,0-2.41,8.291-2.292,18.649c-1.003-0.72-4.722-3.065-6.841,0.051
		c-2.39,3.515,2.447,13.848,8.56,13.277c0.013-0.001,0.026-0.004,0.038-0.006c0.246,0.896,0.516,1.789,0.824,2.675
		c0,0,5.798,16.236,13.336,20.584c0,0,4.494,3.624,9.712,0.435c0,0,3.189,2.029,5.653,1.015c2.203-0.907,14.939-8.888,15.962-31.69
		C226.114,69.136,224.115,61.576,222.39,60.57z"/>
	<path opacity="0.6" fill="#EA9563" d="M195.617,59.633l0.078-11.312c0,0-13.844-2.092-16.177,2.574
		c-2.229,4.458,1.94,7.064,1.94,7.064"/>
	<path opacity="0.6" fill="#EA9563" d="M202.917,51.917c0,0-0.34,6.394,0.52,8.055l14.297-0.598c0,0-0.205-5.571-0.381-7.937
		C217.178,49.072,204.839,45.117,202.917,51.917z"/>
	<path fill="#3A1100" d="M196.587,49.336c0,0-11.951-5.841-17.474-0.163l-0.438,1.683c0,0,7.441-2.404,16.781,2.572l1.575-3.758"/>
	<path fill="#3A1100" d="M201.679,49.133c0,0,10.722-4.49,15,1.053l0.178,1.506c0,0-5.034-2.368-14.027,1.125L201.679,49.133"/>
	<path fill="#DA7B51" d="M205.176,69.268c0,0-3.696,4.675-7.61,3.588C197.566,72.855,202.676,76.987,205.176,69.268z"/>
	<g>
		<path fill="#DA7B51" d="M171.074,75.791c-0.122,0-0.245-0.052-0.33-0.152c-0.666-0.776-0.924-1.516-0.764-2.197
			c0.146-0.629,0.613-1.025,0.924-1.225c-0.421-3.443-3.967-4.23-4.121-4.263c-0.236-0.049-0.386-0.279-0.336-0.515
			c0.049-0.234,0.27-0.393,0.513-0.336c0.046,0.009,4.529,0.986,4.838,5.323l0.022,0.309l-0.284,0.122
			c-0.003,0.002-0.593,0.268-0.71,0.787c-0.112,0.493,0.253,1.05,0.578,1.429c0.156,0.182,0.136,0.457-0.046,0.613
			C171.274,75.756,171.174,75.791,171.074,75.791z"/>
	</g>
	<path opacity="0.2" fill="#DA7B51" d="M199.197,100.579l-2.609,0.725c-16.767-0.607-21.719-39.082-22.883-51.525
		c-0.704,3.149-1.814,9.284-1.733,16.394c-1.003-0.72-4.722-3.065-6.841,0.051c-2.39,3.515,2.447,13.848,8.56,13.277
		c0.013-0.001,0.026-0.004,0.038-0.006c0.246,0.896,0.516,1.789,0.824,2.675c0,0,5.798,16.236,13.336,20.584
		c0,0,4.494,3.624,9.712,0.435c0,0,3.189,2.029,5.653,1.015c0.119-0.049,0.283-0.129,0.461-0.221
		C199.893,103.782,199.197,100.579,199.197,100.579z"/>
	<g>
		<path fill="#DA7B51" d="M220.614,68.942c-0.051,0-0.102-0.008-0.153-0.028c-0.224-0.084-0.338-0.335-0.255-0.56
			c0.133-0.35,0.148-0.614,0.046-0.745c-0.149-0.194-0.593-0.215-0.785-0.192l-0.426,0.046l-0.054-0.424
			c-0.35-2.805,1.687-4.651,1.773-4.728c0.177-0.157,0.45-0.144,0.613,0.036c0.16,0.179,0.144,0.454-0.034,0.614
			c-0.017,0.015-1.593,1.456-1.52,3.589c0.352,0.03,0.822,0.144,1.118,0.522c0.306,0.39,0.333,0.924,0.085,1.588
			C220.956,68.834,220.791,68.942,220.614,68.942z"/>
	</g>
	<path fill="#3A1100" d="M215.7,38.63c-0.12-1.023-0.828-6.106-3.457-9.806l-0.392,1.413c-0.94-2.423-2.76-4.131-2.76-4.131
		l-7.639,2.521l4.268-3.935c0,0-22.614-1.74-34.573,18.482l-0.978,22.07l3.37,4.458l0.109-2.174c0,0-0.109-16.525,3.044-20.657
		c0,0,19.981-13.725,37.849-8.413c2.647,6.548,3.03,23.851,3.03,23.851l0.544-0.109C219.481,55.181,216.652,42.54,215.7,38.63z"/>
	<g>
		<defs>
			<path id="SVGID_3_" d="M181.484,60.13c0,0,1.681-7.805,8.207-5.873c0,0,3.012,0.477,5.797,5.948c0,0,0.301,0.602-0.151,0.678
				C194.885,60.958,186.754,63.593,181.484,60.13z"/>
		</defs>
		<clipPath id="SVGID_4_">
			<use xlink:href="#SVGID_3_"  overflow="visible"/>
		</clipPath>
		<g clip-path="url(#SVGID_4_)">
			<g>
				<path fill="none" d="M191.495,58.695c-0.401-0.735-1.154-1.252-2.05-1.295c-1.379-0.067-2.56,1.005-2.637,2.392
					c-0.029,0.526,0.105,1.02,0.357,1.437C187.992,59.797,189.616,58.807,191.495,58.695z"/>
			</g>
		</g>
	</g>
	<path fill="#F3A56E" d="M195.581,60.51c-0.02-0.158-0.093-0.305-0.093-0.305c-2.786-5.471-5.797-5.948-5.797-5.948
		c-5.887-1.983-7.6,3.746-8.201,5.62C184.113,59.359,190.234,58.172,195.581,60.51z"/>
	<path fill="#FFFFFF" d="M186.875,80.125c0,0,13.974,2.286,24.75,1.625c0,0-5.411,12.9-14.137,11.379S186.875,80.125,186.875,80.125
		z"/>
	<path fill="#F3A56E" d="M217.06,59.331c0,0-4.677-4.181-9.16-2.296c-4.561,1.917-4.495,2.644-4.495,2.644s2.587-6.66,7.512-6.429
		C210.917,53.25,215.601,52.836,217.06,59.331z"/>
	<g>
		<g>
			<path fill="#FFFFFF" d="M216.587,59.13c0,0-1.681-7.805-8.207-5.873c0,0-3.012,0.477-5.797,5.948c0,0-0.301,0.602,0.151,0.678
				C203.185,59.958,211.316,62.593,216.587,59.13z"/>
		</g>
		<g>
			<path opacity="0.4" fill="#D5D4CB" d="M216.587,59.13c0,0-0.887-4.112-3.869-5.627c0.726,1.884,1.479,4.574,1.052,6.888
				C214.756,60.112,215.711,59.705,216.587,59.13z"/>
			<g>
				<defs>
					<path id="SVGID_5_" d="M216.587,59.13c0,0-1.681-7.805-8.207-5.873c0,0-3.012,0.477-5.797,5.948c0,0-0.301,0.602,0.151,0.678
						C203.185,59.958,211.316,62.593,216.587,59.13z"/>
				</defs>
				<clipPath id="SVGID_6_">
					<use xlink:href="#SVGID_5_"  overflow="visible"/>
				</clipPath>
				<g clip-path="url(#SVGID_6_)">
					<g>
						<g>
							<path fill="#7F4F3A" d="M206.268,59.034c0.077,1.388,1.258,2.459,2.637,2.392s2.435-1.245,2.358-2.633
								c-0.077-1.388-1.258-2.459-2.637-2.392C207.246,56.467,206.19,57.646,206.268,59.034z"/>
							<path fill="#0D0306" d="M207.398,59.129c0.046,0.831,0.754,1.473,1.58,1.433s1.459-0.746,1.413-1.578
								c-0.046-0.831-0.754-1.473-1.58-1.433S207.352,58.298,207.398,59.129z"/>
						</g>
						<path fill="none" d="M206.575,57.695c0.401-0.735,1.154-1.252,2.05-1.295c1.379-0.067,2.56,1.005,2.637,2.392
							c0.029,0.526-0.105,1.02-0.357,1.437C210.078,58.797,208.454,57.807,206.575,57.695z"/>
					</g>
					<path fill="#FFFFFF" d="M206.907,59.573c0.033,0.6,0.544,1.063,1.14,1.035s1.053-0.539,1.02-1.139
						c-0.033-0.6-0.544-1.063-1.14-1.035C207.33,58.463,206.873,58.973,206.907,59.573z"/>
				</g>
			</g>
		</g>
	</g>
	<path fill="#3A1100" d="M195.534,59.522c0.002-0.1-0.035-0.198-0.133-0.242c-6.095-2.759-13.906-0.657-13.985-0.635
		c-0.138,0.038-0.219,0.181-0.181,0.319c0.037,0.138,0.177,0.216,0.319,0.181c0.073-0.02,7.022-1.878,12.809,0.278
		c-2.053-0.109-6.409-0.175-9.085,0.973c-0.127,0.054-0.186,0.201-0.131,0.328c0.04,0.095,0.133,0.151,0.229,0.151
		c0.033,0,0.066-0.007,0.099-0.021c3.4-1.456,9.911-0.86,9.976-0.854c0.135,0.011,0.259-0.088,0.272-0.226
		C195.733,59.652,195.648,59.554,195.534,59.522z"/>
	<path fill="#F3A56E" d="M209.875,56.063c3.011-0.104,5.367,1.459,6.613,2.521c-0.674-2.131-2.455-7.559-8.071-5.667
		c0,0-2.928,0.797-5.667,5.978C204.268,57.773,206.936,56.164,209.875,56.063z"/>
	<g>
		<path fill="#3A1100" d="M216.844,59.406c-0.081,0-0.161-0.04-0.209-0.113c-1.757-2.68-6.02-3.071-6.063-3.075
			c-3.335-0.422-7.752,2.886-7.796,2.919c-0.111,0.083-0.268,0.062-0.351-0.048c-0.083-0.11-0.062-0.268,0.048-0.351
			c0.188-0.142,4.622-3.468,8.151-3.018c0.175,0.015,4.539,0.417,6.428,3.299c0.076,0.115,0.044,0.271-0.072,0.346
			C216.938,59.393,216.891,59.406,216.844,59.406z"/>
	</g>
</g>
</svg>

'''
'''--- src/assets/icons/ledger/verification-failed.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 17.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 width="400px" height="294.232px" viewBox="0 0 400 294.232" enable-background="new 0 0 400 294.232" xml:space="preserve">
<path fill="#367E99" d="M877.773-877.602c-0.631,0-1.261-0.242-1.74-0.726l-38.846-39.199c-0.952-0.96-0.945-2.512,0.016-3.464
	c0.961-0.954,2.511-0.944,3.464,0.016l38.846,39.199c0.952,0.96,0.945,2.512-0.016,3.464
	C879.019-877.838,878.397-877.602,877.773-877.602z"/>
<path fill="#367E99" d="M965.201-921.882c-0.603-0.185-1.135-0.601-1.452-1.203l-25.676-48.85c-0.63-1.197-0.169-2.679,1.029-3.308
	c1.198-0.631,2.678-0.168,3.308,1.029l25.676,48.85c0.63,1.197,0.169,2.679-1.029,3.308
	C966.462-921.743,965.797-921.699,965.201-921.882z"/>
<path fill="#367E99" d="M1067.412-938.388c-0.339-0.532-0.473-1.194-0.323-1.858l12.195-53.822c0.298-1.319,1.611-2.147,2.931-1.848
	c1.321,0.298,2.146,1.611,1.848,2.931l-12.195,53.822c-0.298,1.319-1.611,2.147-2.931,1.848
	C1068.281-937.464,1067.747-937.862,1067.412-938.388z"/>
<ellipse opacity="0.51" fill="#3E3B3A" cx="-343.54" cy="492.352" rx="80.953" ry="12.942"/>
<g>
	<path fill="#F3B48D" d="M-398.934,217.708l-9.738,20.954l-32.677-17.49c0,0,4.288-16.201-7.688-21.968c0,0-6.337-7.266-6.21-17.743
		c0,0-1.884-9.299-4.755-8.768c-2.87,0.53-10.96,8.578,1.861,23.533l-6.485,1.795c0,0-4.436-3.19-6.083,0.232
		s-0.908,5.534-0.908,5.534s-3.359,2.598-0.887,6.949c0,0-3.073,2.735-0.264,6.02c0,0-2.003,4.02,1.787,6.251l1.424,0.213
		c0,0,10.255,6.606,14.839,5.476c4.584-1.13,5.434-1.072,5.434-1.072s38.395,28.411,40.318,29.161s4.14,2.345,5.186,1.267
		s16.877-26.298,16.877-26.298S-393.949,219.757-398.934,217.708z"/>
	<g>
		<path fill="#EE9E72" d="M-467.334,222.896c0,0-0.904,0.272-1.858,0.15c2.445,1.044,6.104,1.868,6.607-2.29l-0.052-0.047
			c0.965,0.178,2.986,0.26,4.819-1.49c2.325-1.166,6.107-2.366,6.107-2.366c-3.007-3.546-3.016-10.882-3.002-11.883
			c0.257-2.471-1.037-6.303-11.116-7.094c0,0,10.631,2.24,8.87,6.243c0,0-1.359,1.988-4.365,1.528c0,0,6.54,0.624,3.83,5.524
			c0,0-1.531,1.721-3.939,1.616c0,0,4.094,2.44,1.764,4.362c-2.27,1.872-4.213,1.674-6.115,0.686l-1.39-1.269
			C-467.173,216.568-463.897,221.359-467.334,222.896z M-455.238,206.87l-0.085,0.326c-0.016-0.03-0.019-0.059-0.035-0.089
			C-455.358,207.107-455.309,207.02-455.238,206.87z"/>
		<path fill="#EE7757" d="M-469.287,223.006c0.032,0.013,0.064,0.027,0.095,0.04c-0.034-0.004-0.067-0.015-0.101-0.021
			L-469.287,223.006z"/>
	</g>
	<path fill="#EE9E72" d="M-386.904,231.755l-2.131-3.364c0,0-13.729,26.698-16.475,26.078s-42.703-28.523-42.703-28.523
		s-9.391,3.862-15.368,0.568c0,0,5.095,3.501,13.882,1.058l8.511,6.027l26.026,18.968c0,0,8.373,5.929,10.153,6.046
		c1.779,0.116,16.573-23.555,18.882-26.892"/>
	<g>
		<path fill="#1D1D1B" d="M-405.65,259.264c-0.373-0.023-1.138-0.215-3.435-1.574c-0.223-0.102-0.442-0.199-0.656-0.282
			c-0.307-0.12-1.297-0.711-6.3-4.278c-7.35-5.239-19.46-14.13-26.019-18.961l-8.268-5.855c-0.194,0.023-0.46,0.063-0.802,0.123
			c-0.617,0.147-1.217,0.269-1.772,0.357c-0.645,0.141-1.389,0.312-2.322,0.542c-1.422,0.351-3.467,0.043-6.048-0.905
			c-1.967-0.556-3.066-1.27-3.167-1.338c-2.918-1.389-5.413-2.938-5.891-3.24l-1.329-0.2l-0.161-0.057
			c-3.508-2.062-2.468-5.56-2.079-6.56c-2.274-2.883-0.474-5.378,0.232-6.17c-1.961-3.772,0.2-6.314,0.936-7.026
			c-0.154-0.726-0.366-2.728,1.006-5.578c0.403-0.838,0.994-1.398,1.755-1.665c1.863-0.652,4.107,0.674,4.811,1.139l5.612-1.553
			c-6.898-8.278-7.244-14.203-6.292-17.74c0.861-3.202,3.043-5.288,4.705-5.87c0.155-0.054,0.303-0.093,0.438-0.118
			c3.211-0.594,5.073,8.123,5.284,9.213c-0.118,9.651,5.42,16.625,6.043,17.377c11.082,5.417,8.455,19.686,7.923,22.097
			l31.954,17.104l9.719-20.912l0.396,0.163c3.271,1.343,7.298,6.641,10.109,10.862c0.977,1.47,1.706,2.657,1.997,3.139l1.411-0.064
			l-0.513,0.743c-0.506,0.731-1.636,2.477-3.068,4.689c-3.57,5.517-8.967,13.856-12.503,18.606c-1.614,2.46-1.986,2.946-2.131,3.095
			c-0.235,0.243-0.544,0.392-0.924,0.451c-0.137,0.096-0.253,0.161-0.364,0.199C-405.461,259.255-405.56,259.269-405.65,259.264z
			 M-405.21,258.145c0.231-0.022,0.379-0.077,0.495-0.199c0.094-0.098,0.481-0.609,2.04-2.983
			c3.533-4.747,8.919-13.072,12.484-18.58c1.075-1.66,1.981-3.061,2.584-3.97l-0.159,0.007l-0.137-0.232
			c-0.008-0.014-0.847-1.432-2.118-3.343c-3.658-5.494-6.941-9.135-9.307-10.339l-9.749,20.98l-33.096-17.714l-0.31-0.167
			l0.089-0.342c0.043-0.158,4.05-15.912-7.449-21.449l-0.144-0.109c-0.065-0.074-6.447-7.517-6.311-17.949
			c-0.746-3.683-2.553-8.728-4.233-8.417c-1.174,0.209-3.541,1.982-4.442,5.339c-0.916,3.407-0.521,9.202,6.56,17.463l0.459,0.534
			l-7.111,1.968l-0.367-0.005l-0.096-0.067c-0.101-0.07-2.478-1.709-4.145-1.126c-0.536,0.188-0.944,0.584-1.244,1.208
			c-1.534,3.186-0.895,5.176-0.889,5.192l0.105,0.304l-0.251,0.197c-0.125,0.098-3.016,2.428-0.774,6.374l0.177,0.314l-0.268,0.24
			c-0.111,0.102-2.704,2.493-0.221,5.396l0.19,0.226l-0.13,0.264c-0.074,0.148-1.739,3.628,1.54,5.622l1.336,0.201l0.176,0.064
			c0.034,0.023,3.468,2.219,7.182,3.833l-0.028,0.069c0.462,0.203,1.058,0.428,1.779,0.631c2.442,0.896,4.311,1.194,5.556,0.886
			c0.943-0.234,1.694-0.404,2.371-0.552c0.558-0.09,1.137-0.207,1.757-0.356c0.512-0.088,0.853-0.135,1.059-0.156l0.165-0.015
			l8.553,6.056c6.526,4.807,18.583,13.661,26.037,18.975c4.808,3.428,5.873,4.074,6.079,4.154c0.232,0.091,0.468,0.194,0.747,0.324
			c1.994,1.178,2.752,1.432,3.037,1.469c0.029-0.014,0.088-0.049,0.191-0.128l0.103-0.082L-405.21,258.145z"/>
	</g>
</g>
<path fill="#050D0E" d="M-286.871,475.669c0,0-3.033,0.152-9.706,0c-6.673-0.152-13.828-7.148-13.828-7.148
	s-18.595,7.707-21.024,10.484h-0.276c0,0-7.486,2.427-5.363,5.315c2.123,2.888,10.009,2.874,14.407,2.268
	c4.398-0.607,11.071,0.758,11.071,0.758c18.653,2.73,28.662-5.763,28.662-5.763v-2.578L-286.871,475.669z"/>
<path fill="#050D0E" d="M-388.753,491.368c0,0,2.55,7.958,9.829,10.233s16.378,1.062,21.535-3.791c0,0,1.213-4.398,0-5.156
	c-1.213-0.758-6.589-4.641-7.162-7.174S-381.294,481.894-388.753,491.368z"/>
<g>
	<path fill="#0B3744" d="M-374.23,299.238c0,0,48.185,9.512,74.005-7.583c0,0,0.112,19.539,0,21.013
		c-0.112,1.474-6.212,52.429-6.574,60.618s-2.637,14.246-5.822,24.184c-3.185,9.938-2.73,53.719-0.91,59.126
		c1.82,5.407,3.64,12.244,3.64,12.244l-27.311,15.456c0,0-1.806-14.766-1.806-18.074c0-3.309-0.455-48.816,5.914-70.876
		c6.369-22.059,4.55-57.691,3.64-76.271l-13.649,4.167c0,0-10.919,50.057-12.739,61.653s-4.55,30.249-5.459,39.348
		c-0.91,9.099,0.455,40.491,0.91,47.77l-1.82,15.014c0,0-13.676-7.279-26.856,4.095c0,0,0.442-9.554,0-15.014
		c-0.442-5.459,9.113-80.761,9.113-80.761L-374.23,299.238z"/>
	<g>
		<path fill="#052831" d="M-361.301,424.242c0.754-7.543,2.758-21.643,4.459-32.854l0,0c-6.475-0.688-18.337-13.169-18.337-13.169
			l3.764-63.103l16.953-1.983c-8.644,1.129-16.953-4.423-16.953-4.423l-0.911-9.133c-1.217-0.204-1.904-0.339-1.904-0.339
			l-5.725,96.107c0,0-9.554,75.301-9.113,80.761c0.442,5.459,0,15.014,0,15.014c13.18-11.374,26.856-4.095,26.856-4.095l1.82-15.014
			C-360.846,464.733-362.211,433.341-361.301,424.242z"/>
		<path fill="#052831" d="M-312.621,397.471c1.179-3.68,2.232-6.826,3.111-9.747c-8.893-0.471-16.052-4.582-20.557-8.058
			c-0.702,5.639-1.67,10.978-3.027,15.68c-6.369,22.059-5.914,67.567-5.914,70.876c0,3.309,1.806,18.074,1.806,18.074l27.311-15.456
			c0,0-1.82-6.837-3.64-12.244C-315.351,451.19-315.806,407.408-312.621,397.471z"/>
	</g>
	<g>
		<path fill="#052831" d="M-389.553,492.06l0.049-1.057c0.004-0.094,0.435-9.588,0.001-14.955
			c-0.087-1.072,0.176-4.617,0.805-10.839c0.176-1.74,0.375-3.64,0.594-5.662c0.601-5.564,1.388-12.47,2.341-20.526
			c2.487-21.061,5.346-43.601,5.374-43.827l5.747-96.506l0.566,0.018c0.315,0.06,0.897,0.167,1.742,0.31
			c4.121,0.696,15.093,2.313,27.918,2.313c18.997,0,33.786-3.415,43.956-10.149l0.702-0.464l0.004,0.841
			c0.004,0.799,0.112,19.575-0.002,21.051c-0.028,0.363-0.398,3.561-0.96,8.402c-1.733,14.93-5.339,46-5.613,52.201
			c-0.235,5.33-1.262,9.671-2.73,14.55c-0.257,0.855-0.533,1.738-0.819,2.639l-1.034,3.217c-0.415,1.28-0.816,2.516-1.238,3.828
			c-0.211,0.659-0.393,1.397-0.564,2.262c-0.084,0.428-0.165,0.887-0.243,1.37c-0.447,2.774-0.806,6.52-1.067,11.134
			c-0.041,0.727-0.079,1.464-0.115,2.214c-0.202,4.285-0.32,9.199-0.342,14.214c-0.004,0.805-0.004,1.605-0.004,2.403
			c0.02,12.316,0.61,22.961,1.401,25.314c0.228,0.679,0.457,1.379,0.682,2.088c0.225,0.704,0.445,1.416,0.659,2.118
			c1.267,4.164,2.297,8.026,2.308,8.065l0.091,0.339l-28.209,15.964l-0.366-3.035c-0.212-1.797-0.513-4.395-0.79-6.995
			c-0.49-4.573-0.738-7.526-0.738-8.774l-0.007-3.091l0.007-2.79c0.025-4.914,0.114-9.846,0.263-14.658
			c0.026-0.835,0.054-1.69,0.085-2.554c0.536-14.889,1.939-35.286,5.584-47.909c0.324-1.12,0.651-2.394,1-3.896
			c0.14-0.606,0.267-1.23,0.395-1.855l0.155-0.752c0.092-0.444,0.184-0.889,0.269-1.34c0.193-1.038,0.373-2.094,0.541-3.163
			l0.121-0.762c0.192-1.262,0.371-2.54,0.532-3.839c2.552-20.503,1.365-45.112,0.639-59.932l-12.836,3.918
			c-0.854,3.922-10.947,50.347-12.677,61.367c-0.312,1.987-0.652,4.192-1.004,6.51l-4.276,31.138
			c-0.064,0.585-0.124,1.148-0.177,1.672c-0.876,8.767,0.403,39.554,0.912,47.697l-1.902,15.755l-0.586-0.311
			c-0.043-0.023-4.292-2.241-10.21-2.241c-5.879,0-11.308,2.113-16.136,6.279L-389.553,492.06z M-373.789,299.685l-5.695,95.592
			c-0.031,0.256-2.889,22.792-5.377,43.85c-0.952,8.052-1.739,14.957-2.34,20.517c-0.219,2.021-0.418,3.917-0.594,5.657
			c-0.614,6.08-0.884,9.671-0.803,10.672c0.354,4.372,0.141,11.418,0.043,14.043c4.797-3.874,10.154-5.836,15.937-5.836
			c4.92,0,8.654,1.438,10.048,2.065l1.743-14.384c-0.389-6.101-1.859-38.287-0.911-47.76c0.052-0.528,0.113-1.095,0.177-1.683
			l2.705-20.516l1.576-10.658c0.352-2.321,0.692-4.526,1.004-6.517c1.801-11.475,12.635-61.179,12.744-61.68l0.057-0.259
			l14.462-4.415l0.046,0.934c0.726,14.823,1.942,39.634-0.634,60.323c-0.162,1.308-0.342,2.593-0.536,3.865l-0.122,0.768
			c-0.169,1.075-0.351,2.142-0.546,3.186c-0.086,0.458-0.18,0.908-0.272,1.358l-0.155,0.748c-0.129,0.633-0.258,1.265-0.399,1.878
			c-0.353,1.519-0.684,2.808-1.012,3.944c-3.619,12.534-5.015,32.851-5.548,47.689c-0.031,0.864-0.06,1.715-0.085,2.55
			c-0.149,4.804-0.238,9.728-0.263,14.633l-0.007,2.787l0.007,3.091c0,1.2,0.253,4.199,0.732,8.678
			c0.277,2.596,0.578,5.191,0.788,6.984l0.2,1.679l26.411-14.946c-0.279-1.031-1.162-4.26-2.208-7.693
			c-0.212-0.698-0.433-1.408-0.656-2.109c-0.223-0.704-0.45-1.4-0.676-2.072c-0.833-2.474-1.429-13.004-1.449-25.605
			c-0.001-0.798,0-1.601,0.004-2.406c0.022-5.028,0.141-9.956,0.344-14.253c0.036-0.754,0.074-1.495,0.115-2.221
			c0.263-4.646,0.626-8.424,1.078-11.23c0.08-0.494,0.163-0.963,0.249-1.4c0.178-0.901,0.369-1.672,0.568-2.293
			c0.444-1.386,0.846-2.623,1.232-3.816l1.061-3.298c0.284-0.896,0.559-1.775,0.816-2.627c1.448-4.813,2.461-9.092,2.692-14.326
			c0.276-6.234,3.884-37.326,5.619-52.267c0.54-4.655,0.93-8.019,0.956-8.365c0.098-1.266,0.023-16.401,0.004-20.144
			c-10.293,6.534-25.007,9.845-43.757,9.845c-12.894,0-23.925-1.626-28.07-2.325C-373.04,299.819-373.481,299.741-373.789,299.685z"
			/>
	</g>
</g>
<g>
	<path fill="#333333" d="M-370.221,221.458l-0.689,1.315l-9.161,17.49c0,0-20.178-8.493-30.49-18.805l30.49-43.979l24.353-5.241
		c0,0,29.581-4.028,50.608,0l32.249,26.169l-12.048,31.24l-15.803-13.042v62.177v7.583v5.156c0,0-24.512,16.075-74.005,7.583
		l3.585-5.459l-1.82-6.066C-372.95,287.578-367.188,242.993-370.221,221.458z"/>
	<path fill="#262425" d="M-410.56,221.458c0,0,19.865,14.85,30.49,18.805l9.849-18.805c0,0,3.767-14.768,0-30.028
		c0,0-2.426,24.264-4.853,30.937c-2.426,6.673-5.763,13.647-5.763,13.647S-399.034,232.075-410.56,221.458z"/>
	<path fill="#262425" d="M-370.221,191.43c0,0,12.435,70.975-2.73,96.148c0,0,7.92-58.103,3.05-67.572L-370.221,191.43z"/>
	<path fill="#262425" d="M-272.86,198.407c0,0-11.526,25.644-14.559,24.65c-3.033-0.994-13.952-12.519-18.805-37.39
		c0,0,4.246,87.133,2.73,91.337c-1.517,4.204-19.715,15.426-38.216,15.123c0,0,15.772,5.921,38.52-8.717l2.479-3.416l1.16-61.874
		l14.642,11.527"/>
	<path fill="none" stroke="#262425" stroke-width="0.5" stroke-miterlimit="10" d="M-305.109,172.238
		c-21.026-4.028-50.608,0-50.608,0l-24.353,5.241l-30.49,43.979c6.918,6.918,18.269,13.013,24.997,16.278
		c1.98,1.039,3.848,1.914,5.493,2.526l9.161-17.49l0.689-1.315c3.033,21.535-2.73,66.12-2.73,66.12l1.82,6.066l-3.585,5.459
		c49.493,8.492,74.005-7.583,74.005-7.583v-5.156v-6.371l1.16-61.874l14.642,11.527l12.048-31.24L-305.109,172.238z"/>
</g>
<g>
	<g>
		<path fill="#F3B48D" d="M-330.675,153.054c0,0-1.517,13.567,8.492,17.51c0,0-13.952,17.895-33.363,1.517
			c0,0,7.886-2.32,5.459-24.666l17.895,5.639"/>
		<path fill="#EE9E72" d="M-349.727,151.764l0.06,5.591c0,0,10.394,7.269,20.804,6.809c0,0-2.245-3.752-1.711-6.189
			S-349.727,151.764-349.727,151.764z"/>
		<g>
			<path fill="#1D1D1B" d="M-339.047,179.535c-5.561,0-11.165-2.353-16.689-7.014l-0.647-0.546l0.811-0.238
				c0.072-0.022,7.478-2.601,5.136-24.181l-0.076-0.692l18.559,5.85l-0.274,0.867l-17.232-5.431
				c1.834,18.171-3.213,22.972-5.148,24.127c5.823,4.747,11.704,6.846,17.501,6.248c7.602-0.788,12.849-6.087,14.276-7.69
				c-9.578-4.31-8.211-17.601-8.195-17.738l0.905,0.101c-0.015,0.132-1.357,13.268,8.207,17.036l0.566,0.223l-0.374,0.48
				c-0.239,0.307-5.962,7.52-15.28,8.492C-337.682,179.5-338.364,179.535-339.047,179.535z"/>
		</g>
	</g>
	<g>
		<g>
			<path fill="#3E2114" d="M-378.136,103.113l-8.189-22.513l8.189-3.932l-4.095-2.892c0,0,4.55-32.757,55.96-22.748
				c0,0,28.207,12.575,36.851-1.902c0,0,6.369,11.104,0,16.512l6.824-3.895c0,0-1.365,19.788-11.374,27.284h-54.14l-15.014,33.883
				h-7.279L-378.136,103.113z"/>
			<path fill="#1E0D0B" d="M-287.002,54.275c-4.549,6.989-10.461,7.106-12.735,9.742c-2.275,2.636-34.724,5.988-34.724,5.988
				l8.336-8.374c-4.55,4.8-15.468,8.393-30.482,8.374c-15.014-0.02-22.293,15.235-22.293,15.235l-7.004-6.076l-0.423,0.203
				l8.189,22.513l7.734,19.796h7.279l15.014-33.883h54.14c10.009-7.496,11.374-27.284,11.374-27.284l-6.824,3.895
				C-286.282,61.741-286.24,57.696-287.002,54.275z"/>
			<g>
				<path fill="#1D1D1B" d="M-362.475,122.848h-8.492l-7.961-20.374l-8.478-23.309l7.536-3.618l-3.282-2.318l0.076-0.549
					c0.036-0.254,3.94-25.434,38.791-25.434c5.566,0,11.704,0.645,18.244,1.918l0.196,0.062c0.112,0.05,11.314,4.987,21.504,4.987
					c6.835,0,11.611-2.195,14.196-6.524l0.797-1.335l0.773,1.349c0.227,0.395,4.606,8.168,2.301,14.153l4.759-2.716l-0.116,1.695
					c-0.057,0.825-1.511,20.293-11.736,27.95l-0.243,0.181h-53.851L-362.475,122.848z M-369.725,121.028h6.066l15.014-33.883h54.423
					c7.677-5.995,10.003-19.839,10.595-24.706l-5.286,3.017l-1.041-1.484c4.492-3.813,1.85-11.034,0.474-14.021
					c-3.062,4.036-8.052,6.081-14.862,6.081c-10.189,0-20.94-4.574-22.148-5.102c-6.387-1.238-12.374-1.865-17.796-1.865
					c-30.817,0-36.171,19.703-36.895,23.329l4.889,3.453l-8.842,4.246l7.908,21.739L-369.725,121.028z"/>
			</g>
		</g>
		<g>
			<path fill="#F3B48D" d="M-370.882,124.408c0,0,6.174,22.637,14.667,25.67c8.492,3.033,29.312,10.726,29.312,10.726
				s14.862,2.73,21.231-7.583c6.369-10.312,15.772-25.781,7.279-76.129h-7.886l2.426-5.156c0,0-30.634,10.312-59.751,6.369
				l-1.82,32.15l-3.943,6.078c0,0-3.64-14.267-8.189-16.39c-4.55-2.123-9.402,2.73-10.312,4.853
				C-388.777,107.12-390.9,128.048-370.882,124.408z"/>
			<path fill="#F3B48D" d="M-298.392,77.093h-7.886l2.427-5.156c0,0-24.978,8.405-51.262,7.134
				c-1.272,10.461-6.122,45.946,10.516,74.566c8.042,2.345,17.695,7.168,17.695,7.168s14.862,2.73,21.231-7.583
				S-289.9,127.441-298.392,77.093z"/>
			<path fill="#EE9E72" d="M-298.392,77.093h-7.886l2.427-5.156c0,0-13.392,4.501-30.877,6.416l14.851,3.103
				c0,0,2.469,10.009,1.689,14.255c-0.779,4.246,2.14,19.298,3.96,23.544c0,0-2.616,16.492-2.313,18.615
				c0.231,1.62,2.743,13.478,0.421,22.513c3.84-0.936,7.85-2.954,10.449-7.161C-299.302,142.909-289.9,127.441-298.392,77.093z"/>
			<path fill="#EF9565" d="M-318.986,93.706c0,0,3.033,19.315,7.279,25.033c0,0-6.369,7.234-15.772-0.652c0,0,5.763,3.336,12.132,0
				C-315.346,118.087-321.715,103.599-318.986,93.706z"/>
			<g>
				<path fill="#FDFCFB" d="M-337.925,128.549c0,0,18.653,8.165,27.752,3.085c0,0-3.412,7.886-5.232,8.341
					S-330.873,143.511-337.925,128.549z"/>
				<g>
					<path fill="#EF9565" d="M-320.247,141.219c-5.623,0-13.328-2.125-18.1-12.253l-0.517-1.097l1.111,0.486
						c0.108,0.047,10.873,4.711,19.855,4.711c3.061,0,5.582-0.541,7.493-1.607l1.173-0.655l-0.533,1.232
						c-0.585,1.352-3.6,8.117-5.539,8.602C-316.172,140.856-317.966,141.219-320.247,141.219z M-336.992,129.652
						c4.592,8.775,11.588,10.658,16.744,10.658c2.183,0,3.895-0.346,4.721-0.553c0.979-0.244,3.008-3.899,4.417-6.948
						c-1.864,0.776-4.141,1.168-6.79,1.168C-325.348,133.977-333.958,130.853-336.992,129.652z"/>
				</g>
			</g>
			<g>
				<path fill="#1D1D1B" d="M-376.533,120.641c-0.208,0-0.416-0.079-0.575-0.238c-2.807-2.807-3.93-5.212-3.337-7.148
					c0.462-1.512,1.831-2.297,2.784-2.671c-1.198-2.448-2.452-3.756-3.651-3.798c-0.021,0-0.04-0.001-0.06-0.001
					c-1.745,0-3.169,2.618-3.182,2.645c-0.208,0.397-0.7,0.55-1.098,0.342c-0.398-0.209-0.551-0.701-0.342-1.098
					c0.078-0.147,1.966-3.607,4.739-3.513c2.025,0.07,3.865,1.953,5.468,5.597l0.407,0.925l-0.994,0.2
					c-0.021,0.004-2.088,0.435-2.517,1.853c-0.273,0.905,0.013,2.596,2.934,5.517c0.318,0.318,0.318,0.832,0,1.15
					C-376.117,120.562-376.325,120.641-376.533,120.641z"/>
			</g>
			<g>
				<path fill="#1D1D1B" d="M-322.528,161.411c-2.604,0-4.382-0.321-4.455-0.334c-0.284-0.098-20.99-7.748-29.383-10.746
					c-8.09-2.889-13.944-22.424-14.841-25.58c-1.425,0.239-2.785,0.36-4.047,0.36c0,0-0.001,0-0.002,0
					c-4.919,0-8.594-1.791-10.922-5.324c-3.792-5.751-2.632-13.917-2.106-15.146c0.846-1.973,4.464-5.654,8.365-5.654
					c0.889,0,1.751,0.191,2.559,0.569c4.022,1.877,7.239,12.374,8.17,15.699l3.322-5.121l1.841-32.52l0.488,0.067
					c4.383,0.594,9.073,0.894,13.942,0.894c23.8-0.001,45.387-7.172,45.603-7.244l1.01-0.34l-2.575,5.472h7.554l0.064,0.379
					c8.554,50.712-1.011,66.197-7.341,76.444C-309.65,160.355-317.962,161.411-322.528,161.411z M-326.745,160.202
					c0.037,0,1.769,0.299,4.216,0.299c5.347,0,12.543-1.335,16.471-7.693c6.242-10.106,15.668-25.363,7.282-75.436h-8.219
					l2.288-4.861c-4.539,1.405-23.855,6.972-44.892,6.973c-4.729,0-9.294-0.282-13.577-0.838l-1.799,31.781l-4.574,7.051
					l-0.257-1.007c-0.036-0.141-3.638-14.082-7.94-16.09c-0.688-0.321-1.419-0.483-2.174-0.483c-3.456,0-6.786,3.371-7.528,5.103
					c-0.433,1.008-1.55,8.858,2.029,14.286c2.149,3.261,5.569,4.915,10.163,4.915c0.001,0,0.002,0,0.002,0
					c1.328,0,2.771-0.14,4.292-0.417l0.411-0.075l0.11,0.403c0.061,0.224,6.209,22.443,14.381,25.362
					C-347.678,152.468-327.025,160.099-326.745,160.202L-326.745,160.202z"/>
			</g>
			<g>
				<g>
					<circle fill="#1D1D1B" cx="-344.598" cy="100.715" r="4.398"/>
					<circle fill="#FFFFFF" cx="-345.001" cy="98.842" r="1.873"/>
				</g>
				<g>
					<circle fill="#1D1D1B" cx="-305.775" cy="102.029" r="4.398"/>
					<circle fill="#FFFFFF" cx="-306.178" cy="100.156" r="1.873"/>
				</g>
				<path fill="#1D1D1B" d="M-354.737,93.414c0,0,11.101-4.421,20.074-1.033l0.202-5.152c0,0-10.269-1.314-20.193,4.064
					L-354.737,93.414z"/>
				<path fill="#AF351A" d="M-285.574,94.8l-0.06-1.818l-27.571,0.909l-13.901,0.002l-32.91-1.816l-20.114,5.554l0.211,1.357
					l19.031-4.994c-0.159,1.737-1.097,14.64,5.892,16.546c1.261,0.344,5.347,1.344,10.191,1.344c4.183,0,8.932-0.746,12.915-3.304
					c4.205-2.701,7.053-7.698,7.994-13.438l-1.137,0.569h7.886c0,0.55,0.098,13.485,8.592,15.445
					c1.297,0.299,4.02,0.825,7.122,0.825c3.718,0,7.982-0.755,10.99-3.558c3.144-2.929,4.261-7.497,3.329-13.572L-285.574,94.8z
					 M-332.875,107.049c-8.112,5.212-20.282,2.108-21.644,1.735c-4.855-1.324-4.925-11.133-4.542-14.8l-0.905-0.095l32.807,1.822
					h1.194C-326.838,100.845-329.159,104.662-332.875,107.049z M-291.685,107.092c-4.861,4.527-13.829,2.899-16.463,2.291
					c-7.083-1.635-7.181-13.545-7.181-13.672l2.153-0.001l25.147-0.829l-0.899,0.141
					C-288.062,100.521-288.99,104.581-291.685,107.092z"/>
				<path fill="#1D1D1B" d="M-297.913,93.414c0,0-11.101-4.421-20.074-1.033l-0.202-5.152c0,0,10.269-1.314,20.193,4.064
					L-297.913,93.414z"/>
			</g>
		</g>
	</g>
</g>
<g>
	<g>
		<path fill="#EE7757" d="M97.917,122.633c0.02,0.016,0.04,0.032,0.06,0.048c-0.023-0.01-0.045-0.024-0.068-0.035L97.917,122.633z"
			/>
	</g>
</g>
<g>
	<path fill="#F3A56E" d="M335.561,118.05c0,0-0.052-0.052-0.133-0.145l0.126,0.216C335.559,118.096,335.555,118.074,335.561,118.05z
		"/>
	<path fill="#EE7757" d="M348.678,126.633c-0.02,0.016-0.04,0.032-0.06,0.048c0.023-0.01,0.045-0.024,0.068-0.035L348.678,126.633z"
		/>
</g>
<g>
	<path fill="#01DAFF" d="M236.398,124.9c-10.599-9.887-16.249-12.017-16.249-12.017c-5.24-2.022-12.88-3.123-21.902-2.762
		c-10.442,0.418-24.606,7.169-28.665,9.401l-0.037-0.029c0,0-37.795,12.507-52.045,44.257c0,0,2.75,25.25,24.75,32
		c0,0,0.5-8.25,4.75-12.25l-6-19c0,0,8.195-7.96,26.395-13.684l-3.314,75.359c5.863,0.734,21.613,2.447,35.864,1.698
		c17.926,0.942,36.228-0.671,36.228-0.671l-0.801-48.703l-0.189-11.479c1.767,5.221,4.406,12.582,7.317,12.73
		c9.833,0.5,19.75-5.5,20.167-19.417C263.064,147.08,236.398,124.9,236.398,124.9z"/>
	<path opacity="0.6" fill="#09C5D8" d="M177.365,115.812c-3.487,1.486-6.307,2.897-7.784,3.71l-0.037-0.029
		c0,0-37.795,12.507-52.045,44.257c0,0,2.75,25.25,24.75,32c0,0,0.5-8.25,4.75-12.25l-6-19c0,0,8.195-7.96,26.395-13.684
		l-3.314,75.359c5.266,0.659,18.507,2.107,31.474,1.853C182.03,194.157,178.357,140.638,177.365,115.812z"/>
	<ellipse fill="#060707" cx="201.181" cy="263.207" rx="68.431" ry="20.127"/>
	<g>
		<defs>
			<path id="SVGID_1_" d="M155.256,277.134c11.976,3.028,27.553,4.857,44.584,4.857c22.409,0,42.302-3.168,54.784-8.064
				l-6.033-47.843l-93.701-5.814l-6.485,24.376l0.895,30.861"/>
		</defs>
		<clipPath id="SVGID_2_">
			<use xlink:href="#SVGID_1_"  overflow="visible"/>
		</clipPath>
		<g clip-path="url(#SVGID_2_)">
			<g>
				<g>
					<path fill="#4A9EDD" d="M234.878,229.603l-69.588,1.341c-1.849,24.265-1.792,128.39,10.957,187.487
						c6.784,2.244,11.796,3.615,18.716,2.044c3.406-34.737,3.22-153.104,3.22-153.104c2.315,0.513,3.657-0.6,6.338-1.043
						c0,0,1.703,97.317,6.046,154.147c6.92,1.572,11.814,2.2,18.598-0.044C241.407,359.843,234.878,229.603,234.878,229.603z"/>
				</g>
			</g>
			<g opacity="0.8">
				<path fill="#2494E6" d="M188.296,412.333c0,0-7.605-38.14-10.647-71.513c-2.322-25.476,1.56-83.94,3.527-110.182l-15.886,0.306
					c-1.849,24.265-1.792,128.39,10.957,187.487c6.679,2.209,11.649,3.558,18.404,2.1L188.296,412.333z"/>
			</g>
			<g>
				<g>
					<g>
						<path fill="#BCBCBC" d="M193.971,243.498c5.12,0.867,10.364,1.001,15.522,0.398c-0.082-4.132-0.165-8.264-0.247-12.396
							c-4.743-0.864-9.617-1.005-14.402-0.416C193.897,235.141,193.601,239.349,193.971,243.498z"/>
					</g>
				</g>
				<g>
					<g>
						<path fill="#230602" d="M207.568,241.287c-0.006-2.598-0.011-5.196-0.017-7.793c-3.754-0.002-7.508-0.005-11.261-0.007
							c-0.183,2.458-0.366,4.916-0.549,7.373C199.639,241.542,203.631,241.687,207.568,241.287z"/>
					</g>
				</g>
				<g>
					<g>
						<path fill="#BCBCBC" d="M198.368,238.826c0.37-0.027,0.76-0.116,1.022-0.379c0.273-0.274,0.357-0.693,0.311-1.077
							c-0.046-0.384-0.206-0.744-0.364-1.097c-1.55-0.447-3.301-0.132-4.599,0.825C195.542,238.246,196.97,238.926,198.368,238.826z
							"/>
					</g>
				</g>
			</g>
			<g>
				<path fill="#3C0605" d="M238.64,420.364c-2.089-2.962-5.151-5.007-8.438-5.696c-11.37-3.448-20.196,6.416-20.196,6.416
					c6.241,2.296,13.7,2.545,13.7,2.545l0.047-0.045c4.493,0.325,9.015,0.124,13.469-0.619c0.421-0.07,0.851-0.149,1.22-0.39
					c0.368-0.24,0.666-0.68,0.648-1.161C239.075,421.018,238.858,420.673,238.64,420.364z"/>
			</g>
			<g>
				<path fill="#3C0605" d="M193.892,421.318c-5.706-4.86-11.958-6.328-15.704-6.761c-0.575-0.088-1.154-0.143-1.734-0.149
					c-1.045-0.053-1.659-0.017-1.659-0.017l-0.039,0.132c-3.618,0.483-7.048,2.614-9.324,5.84c-0.218,0.309-0.435,0.655-0.45,1.05
					c-0.018,0.481,0.28,0.921,0.648,1.161c0.368,0.241,0.799,0.319,1.22,0.39c2.757,0.46,5.541,0.712,8.327,0.762
					C182.927,424.491,193.892,421.318,193.892,421.318z"/>
			</g>
		</g>
	</g>
	<g>
		<path fill="#230602" d="M162.499,224.513c0,0,33.407,2.59,70.698-0.518l0.388,9.193c0,0-26.026,7.381-71.086,0"/>
		<g>
			<g>
				<path fill="#BCBCBC" d="M192.52,236.789c5.12,0.867,10.364,1.001,15.522,0.398c-0.082-4.132-0.165-8.264-0.247-12.396
					c-4.743-0.864-9.617-1.005-14.402-0.416C192.446,228.432,192.151,232.64,192.52,236.789z"/>
			</g>
			<g>
				<path fill="#230602" d="M206.117,234.578c-0.006-2.598-0.011-5.196-0.017-7.793c-3.754-0.002-7.508-0.005-11.261-0.007
					c-0.183,2.458-0.366,4.916-0.549,7.373C198.189,234.833,202.18,234.978,206.117,234.578z"/>
			</g>
			<g>
				<path fill="#BCBCBC" d="M196.917,232.117c0.37-0.027,0.76-0.116,1.022-0.379c0.273-0.274,0.357-0.693,0.311-1.077
					c-0.046-0.384-0.206-0.744-0.364-1.097c-1.55-0.447-3.301-0.132-4.599,0.825C194.091,231.537,195.519,232.217,196.917,232.117z"
					/>
			</g>
		</g>
	</g>
	<path fill="#09C5D8" d="M218.094,112.646c-9.344-5.896-29.687-0.797-35.844,1.104c2.286,4.633,5.699,11.502,9.613,13.76
		c0,0,1.062,0.856,2.741,1.336c0.63,0.18,1.346,0.307,2.125,0.316c1.299,0.015,2.774-0.298,4.316-1.241c0,0,3.015,1.919,5.345,0.959
		c0.113-0.046,0.268-0.122,0.436-0.209h0C208.936,127.58,214.448,122.604,218.094,112.646z"/>
	<path opacity="0.5" fill="#BCBFC1" d="M161.225,146.967c-0.111-0.009-0.183-0.014-0.183-0.014l-1.457,70.309
		c8.623,3.203,17.146,5.128,25.233,6.189C168.694,204.678,162.967,164.026,161.225,146.967z"/>
	<polygon fill="#BCC0C4" points="171.215,148.708 173.787,117.511 179.833,114.333 177.7,150.049 	"/>
	<polygon fill="#BCC0C4" points="222.874,150.944 224.942,116.002 229.303,118.685 228.241,149.379 	"/>
	<path fill="#D6D7D8" d="M249.29,233.181c0,0-47.563,16.253-97.755-2.39l1.793-86.522c0,0,54.375,4.302,96.441,0L249.29,233.181z"/>
	<path fill="#FFFFFF" d="M194.875,85.125c0,0,13.974,2.286,24.75,1.625c0,0-5.411,12.9-14.137,11.379S194.875,85.125,194.875,85.125
		z"/>
	<g>
		<path fill="#DA7B51" d="M226.614,75.942c-0.051,0-0.102-0.008-0.153-0.028c-0.224-0.084-0.338-0.335-0.255-0.56
			c0.133-0.35,0.148-0.614,0.046-0.745c-0.149-0.194-0.593-0.215-0.785-0.192l-0.426,0.046l-0.054-0.424
			c-0.35-2.805,1.687-4.651,1.773-4.728c0.177-0.157,0.45-0.144,0.613,0.036c0.16,0.179,0.144,0.454-0.034,0.614
			c-0.017,0.015-1.593,1.456-1.52,3.589c0.352,0.03,0.822,0.144,1.118,0.522c0.306,0.39,0.333,0.924,0.085,1.588
			C226.956,75.834,226.791,75.942,226.614,75.942z"/>
	</g>
	<g>
		<path fill="#F3A56E" d="M192.25,98.5l1,18.75c0,0,8.25,4.25,16.75-0.25l1.5-13.25"/>
		<path opacity="0.5" fill="#DA7B51" d="M210.25,99.5L207,96l-14.5,1.5l0.488,13.665c0.298,0.212,0.598,0.413,0.902,0.588
			c0,0,0.281,0.227,0.784,0.516c0.88,0.507,2.44,1.209,4.364,1.231c1.374,0.016,2.934-0.316,4.565-1.312c0,0,0.611,0.388,1.504,0.74
			c0.51,0.201,1.113,0.39,1.747,0.488c0.317,0.049,0.642,0.075,0.966,0.069c0.487-0.01,0.975-0.093,1.437-0.283
			c0.192-0.079,0.468-0.215,0.805-0.407L210.25,99.5z"/>
		<path fill="#F3A56E" d="M228.39,66.57c-1.117-0.652-3.418,0.218-4.331,1.033c-2.272-27.414-3.855-24.574-6.686-26.981
			c-2.899-2.464-27.687-0.29-37.11,12.901c0,0-2.41,8.291-2.292,18.649c-1.003-0.72-4.722-3.065-6.841,0.051
			c-2.39,3.515,2.447,13.848,8.56,13.277c0.013-0.001,0.026-0.004,0.038-0.006c0.246,0.896,0.516,1.789,0.824,2.675
			c0,0,5.798,16.236,13.336,20.584c0,0,4.494,3.624,9.712,0.435c0,0,3.189,2.029,5.653,1.015c2.203-0.907,14.939-8.888,15.962-31.69
			C232.114,75.136,230.115,67.576,228.39,66.57z"/>
		<path opacity="0.6" fill="#EA9563" d="M201.617,65.633l0.078-11.312c0,0-13.844-2.092-16.177,2.574
			c-2.229,4.458,1.94,7.064,1.94,7.064"/>
		<path opacity="0.6" fill="#EA9563" d="M209.083,55.25c0,0-0.506,9.061,0.353,10.722l14.297-0.598c0,0-0.205-5.571-0.381-7.937
			C223.178,55.072,211.006,48.451,209.083,55.25z"/>
		<path fill="#3A1100" d="M200.551,50.538c0,0-13.156,1.965-14.487,9.772l0.593,1.635c0,0,4.766-6.199,15.282-7.396l-0.833-3.989"/>
		<path fill="#3A1100" d="M210.733,50.117c0,0,11.385,2.343,11.79,9.333l-0.703,1.343c0,0-2.82-4.795-12.216-6.986L210.733,50.117"
			/>
		<path fill="#DA7B51" d="M211.176,75.268c0,0-3.696,4.675-7.61,3.588C203.566,78.855,208.676,82.987,211.176,75.268z"/>
		<g>
			<path fill="#DA7B51" d="M177.074,81.791c-0.122,0-0.245-0.052-0.33-0.152c-0.666-0.776-0.924-1.516-0.764-2.197
				c0.146-0.629,0.613-1.025,0.924-1.225c-0.421-3.443-3.967-4.23-4.121-4.263c-0.236-0.049-0.386-0.279-0.336-0.515
				c0.049-0.234,0.27-0.393,0.513-0.336c0.046,0.009,4.529,0.986,4.838,5.323l0.022,0.309l-0.284,0.122
				c-0.003,0.002-0.593,0.268-0.71,0.787c-0.112,0.493,0.253,1.05,0.578,1.429c0.156,0.182,0.136,0.457-0.046,0.613
				C177.274,81.756,177.174,81.791,177.074,81.791z"/>
		</g>
		<path opacity="0.2" fill="#DA7B51" d="M205.197,106.579l-2.609,0.725c-16.767-0.607-21.719-39.082-22.883-51.525
			c-0.704,3.149-1.814,9.284-1.733,16.394c-1.003-0.72-4.722-3.065-6.841,0.051c-2.39,3.515,2.447,13.848,8.56,13.277
			c0.013-0.001,0.026-0.004,0.038-0.006c0.246,0.896,0.516,1.789,0.824,2.675c0,0,5.798,16.236,13.336,20.584
			c0,0,4.494,3.624,9.712,0.435c0,0,3.189,2.029,5.653,1.015c0.119-0.049,0.283-0.129,0.461-0.221
			C205.893,109.782,205.197,106.579,205.197,106.579z"/>
		<path fill="#3A1100" d="M221.7,44.63c-0.12-1.023-0.828-6.106-3.457-9.806l-0.392,1.413c-0.94-2.423-2.76-4.131-2.76-4.131
			l-7.639,2.521l4.268-3.935c0,0-22.614-1.74-34.573,18.482l-0.978,22.07l3.37,4.458l0.109-2.174c0,0-0.109-16.525,3.044-20.657
			c0,0,19.981-13.725,37.849-8.413c2.647,6.548,3.03,23.851,3.03,23.851l0.544-0.109C225.481,61.181,222.652,48.54,221.7,44.63z"/>
		<g>
			<defs>
				<path id="SVGID_3_" d="M187.484,66.13c0,0,1.681-7.805,8.207-5.873c0,0,3.012,0.477,5.797,5.948c0,0,0.301,0.602-0.151,0.678
					C200.885,66.958,192.754,69.593,187.484,66.13z"/>
			</defs>
			<clipPath id="SVGID_4_">
				<use xlink:href="#SVGID_3_"  overflow="visible"/>
			</clipPath>
			<g clip-path="url(#SVGID_4_)">
				<g>
					<path fill="none" d="M197.495,64.695c-0.401-0.735-1.154-1.252-2.05-1.295c-1.379-0.067-2.56,1.005-2.637,2.392
						c-0.029,0.526,0.105,1.02,0.357,1.437C193.992,65.797,195.616,64.807,197.495,64.695z"/>
				</g>
			</g>
		</g>
		<path fill="#F3A56E" d="M201.581,66.51c-0.02-0.158-0.093-0.305-0.093-0.305c-2.786-5.471-5.797-5.948-5.797-5.948
			c-5.887-1.983-7.6,3.746-8.201,5.62C190.113,65.359,196.234,64.172,201.581,66.51z"/>
		<path fill="#F3A56E" d="M223.06,65.331c0,0-4.677-4.181-9.16-2.296c-4.561,1.917-4.495,2.644-4.495,2.644s2.587-6.66,7.512-6.429
			C216.917,59.25,221.601,58.836,223.06,65.331z"/>
		<g>
			<g>
				<g>
					<path fill="#FFFFFF" d="M222.115,65.186c0,0-1.629-7.56-7.949-5.688c0,0-2.917,0.462-5.615,5.761c0,0-0.292,0.583,0.146,0.656
						C209.135,65.988,217.011,68.54,222.115,65.186z"/>
				</g>
				<g>
					<path opacity="0.4" fill="#D5D4CB" d="M222.115,65.186c0,0-0.859-3.983-3.747-5.451c0.703,1.825,1.433,4.43,1.019,6.672
						C220.342,66.137,221.267,65.743,222.115,65.186z"/>
					<g>
						<defs>
							<path id="SVGID_5_" d="M222.115,65.186c0,0-1.629-7.56-7.949-5.688c0,0-2.917,0.462-5.615,5.761c0,0-0.292,0.583,0.146,0.656
								C209.135,65.988,217.011,68.54,222.115,65.186z"/>
						</defs>
						<clipPath id="SVGID_6_">
							<use xlink:href="#SVGID_5_"  overflow="visible"/>
						</clipPath>
						<g clip-path="url(#SVGID_6_)">
							<g>
								<g>
									<path fill="#7F4F3A" d="M212.12,65.093c0.075,1.344,1.218,2.382,2.554,2.317c1.336-0.064,2.358-1.206,2.284-2.551
										c-0.075-1.344-1.218-2.382-2.554-2.317S212.046,63.749,212.12,65.093z"/>
									<path fill="#0D0306" d="M213.216,65.185c0.045,0.805,0.73,1.427,1.53,1.388s1.413-0.723,1.368-1.528
										c-0.045-0.805-0.73-1.427-1.53-1.388C213.784,63.696,213.171,64.38,213.216,65.185z"/>
								</g>
								<path fill="none" d="M212.418,63.797c0.388-0.712,1.118-1.212,1.986-1.254c1.336-0.064,2.48,0.973,2.554,2.317
									c0.028,0.509-0.102,0.988-0.345,1.392C215.812,64.864,214.238,63.905,212.418,63.797z"/>
							</g>
							<path fill="#FFFFFF" d="M212.739,65.615c0.032,0.581,0.527,1.03,1.105,1.002c0.578-0.028,1.02-0.522,0.988-1.103
								c-0.032-0.581-0.527-1.03-1.105-1.002S212.707,65.034,212.739,65.615z"/>
						</g>
					</g>
				</g>
			</g>
			<path fill="#F3A56E" d="M215.816,63.688c2.916-0.101,5.55,0.664,6.757,1.692c-0.653-2.064-2.932-8.045-8.371-6.213
				c0,0-2.836,0.772-5.489,5.79C210.184,63.872,212.97,63.786,215.816,63.688z"/>
			<g>
				<path fill="#3A1100" d="M208.069,65.624c-0.164,0-0.323-0.082-0.415-0.233c-0.138-0.228-0.066-0.525,0.162-0.664
					c0.219-0.133,5.465-3.228,14.852-0.127c0.254,0.084,0.392,0.358,0.308,0.612c-0.084,0.253-0.358,0.393-0.612,0.307
					c-8.929-2.949-13.995,0.006-14.045,0.035C208.24,65.602,208.154,65.624,208.069,65.624z"/>
			</g>
		</g>
		<g>
			<g>
				<g>
					<path fill="#FFFFFF" d="M187.479,65.999c0,0,1.648-7.649,8.043-5.755c0,0,2.952,0.467,5.682,5.829c0,0,0.295,0.59-0.148,0.664
						C200.613,66.81,192.644,69.393,187.479,65.999z"/>
				</g>
				<g>
					<path opacity="0.4" fill="#D5D4CB" d="M187.479,65.999c0,0,0.869-4.03,3.791-5.515c-0.712,1.846-1.449,4.482-1.031,6.75
						C189.274,66.961,188.337,66.563,187.479,65.999z"/>
					<g>
						<defs>
							<path id="SVGID_7_" d="M187.479,65.999c0,0,1.648-7.649,8.043-5.755c0,0,2.952,0.467,5.682,5.829c0,0,0.295,0.59-0.148,0.664
								C200.613,66.81,192.644,69.393,187.479,65.999z"/>
						</defs>
						<clipPath id="SVGID_8_">
							<use xlink:href="#SVGID_7_"  overflow="visible"/>
						</clipPath>
						<g clip-path="url(#SVGID_8_)">
							<g>
								<g>
									<path fill="#7F4F3A" d="M197.592,65.905c-0.076,1.36-1.233,2.41-2.585,2.345c-1.352-0.065-2.386-1.221-2.311-2.581
										c0.076-1.36,1.233-2.41,2.585-2.345S197.668,64.545,197.592,65.905z"/>
									<path fill="#0D0306" d="M196.484,65.998c-0.045,0.815-0.739,1.444-1.549,1.405c-0.81-0.039-1.43-0.731-1.384-1.546
										s0.739-1.444,1.549-1.405C195.909,64.491,196.529,65.183,196.484,65.998z"/>
								</g>
								<path fill="none" d="M197.291,64.593c-0.393-0.72-1.131-1.227-2.01-1.269c-1.352-0.065-2.509,0.985-2.585,2.345
									c-0.029,0.515,0.103,1,0.35,1.408C193.857,65.673,195.449,64.703,197.291,64.593z"/>
							</g>
							<path fill="#FFFFFF" d="M196.966,66.433c-0.033,0.588-0.533,1.042-1.118,1.014c-0.585-0.028-1.032-0.528-0.999-1.116
								c0.033-0.588,0.533-1.042,1.118-1.014C196.551,65.345,196.999,65.845,196.966,66.433z"/>
						</g>
					</g>
				</g>
			</g>
			<path fill="#F3A56E" d="M193.853,64.483c-2.951-0.102-5.616,0.671-6.837,1.712c0.66-2.089,2.967-8.14,8.47-6.286
				c0,0,2.869,0.781,5.554,5.859C199.552,64.669,196.733,64.582,193.853,64.483z"/>
			<g>
				<path fill="#3A1100" d="M201.692,66.442c0.166,0,0.327-0.083,0.42-0.235c0.14-0.231,0.067-0.531-0.164-0.672
					c-0.222-0.135-5.53-3.266-15.027-0.128c-0.257,0.085-0.397,0.362-0.312,0.619c0.085,0.257,0.363,0.397,0.619,0.311
					c9.034-2.984,14.16,0.006,14.211,0.035C201.518,66.42,201.605,66.442,201.692,66.442z"/>
			</g>
		</g>
		<g>
			<path fill="#DA7B51" d="M195.875,94.25c-0.153,0-0.304-0.069-0.402-0.201c-0.165-0.222-0.119-0.535,0.103-0.7
				c0.425-0.316,10.511-7.733,19.114-6.595c0.274,0.037,0.466,0.288,0.43,0.562c-0.036,0.274-0.291,0.466-0.561,0.431
				c-8.208-1.089-18.285,6.33-18.386,6.405C196.084,94.218,195.979,94.25,195.875,94.25z"/>
		</g>
		<g>
			<path fill="#DA7B51" d="M203.375,93.375c-0.167,0-0.331-0.084-0.425-0.236c-0.146-0.234-0.074-0.543,0.161-0.688
				c0.153-0.095,3.782-2.325,6.889-2.325c0.276,0,0.5,0.224,0.5,0.5s-0.224,0.5-0.5,0.5c-2.825,0-6.326,2.153-6.361,2.175
				C203.557,93.351,203.465,93.375,203.375,93.375z"/>
		</g>
	</g>
	<g>
		<path fill="#0A9EA5" d="M201.813,119.526c-4.795,0-8.537-1.712-8.775-1.823c-0.25-0.117-0.357-0.415-0.241-0.665
			c0.117-0.249,0.413-0.36,0.665-0.241c0.085,0.041,8.683,3.962,16.297-0.234c0.24-0.135,0.545-0.046,0.679,0.196
			c0.134,0.241,0.046,0.546-0.196,0.679C207.386,119.012,204.44,119.526,201.813,119.526z"/>
	</g>
	<g>
		<g id="x">
			<g>
				<polygon fill="#EC0101" points="234.5,213.623 214.287,193.43 234.5,173.237 221.03,159.766 200.836,179.969 180.634,159.766 
					167.173,173.237 187.366,193.43 167.173,213.623 180.634,227.093 200.836,206.89 221.03,227.093 				"/>
			</g>
		</g>
	</g>
	<g>
		<path fill="#DA7B51" d="M226.614,75.942c-0.051,0-0.102-0.008-0.153-0.028c-0.224-0.084-0.338-0.335-0.255-0.56
			c0.133-0.35,0.148-0.614,0.046-0.745c-0.149-0.194-0.593-0.215-0.785-0.192l-0.426,0.046l-0.054-0.424
			c-0.35-2.805,1.687-4.651,1.773-4.728c0.177-0.157,0.45-0.144,0.613,0.036c0.16,0.179,0.144,0.454-0.034,0.614
			c-0.017,0.015-1.593,1.456-1.52,3.589c0.352,0.03,0.822,0.144,1.118,0.522c0.306,0.39,0.333,0.924,0.085,1.588
			C226.956,75.834,226.791,75.942,226.614,75.942z"/>
	</g>
	<polygon fill="#D60D0D" points="230.179,168.915 200.5,194.5 172.429,167.976 167.173,173.237 187.366,193.43 167.173,213.623 
		180.634,227.093 200.836,206.89 221.03,227.093 234.5,213.623 214.287,193.43 234.5,173.237 	"/>
	<path fill="#01DAFF" d="M170,107.75"/>
	<path fill="#F3A56E" d="M178.235,178.438L160,180.447v-1.114c0,0,14.272-4.783,15.454-5.255c1.182-0.473,0.799-2.942,0.799-2.942
		l-20.926,3.808c-1.182-0.355-1.433-4.085-1.433-4.085c-5.2,0.236-7.711,8.022-8.42,9.676c-0.163,0.38-0.093,0.373-0.008,0.274
		c-0.013,0.517-0.035,1.067-0.063,1.65L141,195.25c0,0,1.907,1.212,5.616,1.028c0.03,0.059,0.054,0.123,0.085,0.18
		c5.367-0.358,9.819-3.248,9.819-3.248s10.396,0.473,14.296,0.118c3.9-0.355,3.183-2.245,3.183-2.245l-14.433-1.773l1.151-0.827
		c0,0,12.466,0.236,14.239-0.236c1.773-0.473,1.06-2.955,1.06-2.955L161,185.174v-1.182c0,0,12.695-1.655,15.295-2.009
		C178.895,181.629,178.235,178.438,178.235,178.438z"/>
	<path fill="#F3A56E" d="M252.393,148.356c0,0,0.826-1.439,0.091-4.158c-0.253-0.934-0.851-1.345-1.527-1.481
		c-11.29-0.175-9.297,3.888-9.297,3.888s0.72,1.634,2.974,1.708c0,0-4.853-0.435-3.544,3.506c0,0,0.882,1.463,2.652,1.714
		c0,0-3.317,1.222-1.879,2.94c1.4,1.674,2.844,1.794,4.365,1.333l1.186-0.736c0,0-1.185,1.188-1.516,2.467
		c-0.104,0.272-0.173,0.525-0.147,0.714c0.125,0.917,1.458,3.125,3.917,1.917l-0.015-0.033c2.646-1.218,1.815-4.166,1.815-4.166
		c2.495-2.012,0.627-4.425,0.627-4.425C254.487,150.707,252.393,148.356,252.393,148.356z"/>
	<path fill="#BCC0C4" d="M238.878,126.971"/>
	<path opacity="0.2" fill="#DA7B51" d="M147.359,176.281c-0.979,1.822-1.59,3.567-1.885,4.254c-0.163,0.38-0.093,0.373-0.008,0.274
		c-0.013,0.517-0.035,1.067-0.063,1.65L141,195.25c0,0,1.907,1.212,5.616,1.028c0.03,0.059,0.054,0.123,0.085,0.18
		c2.982-0.199,5.678-1.179,7.488-2.011C150.224,189.255,148.241,181.128,147.359,176.281z"/>
	<g>
		<path fill="#DA7B51" d="M247.643,149.281c-2.036,0-3.742-0.345-3.86-0.37c-0.135-0.028-0.222-0.16-0.194-0.295
			c0.028-0.135,0.154-0.225,0.296-0.194c0.047,0.009,4.796,0.968,7.853-0.319c0.126-0.053,0.274,0.007,0.327,0.133
			c0.054,0.127-0.006,0.274-0.134,0.328C250.62,149.115,249.052,149.281,247.643,149.281z"/>
	</g>
	<g>
		<path fill="#DA7B51" d="M248.568,154.406c-2.445,0-4.745-0.594-4.89-0.632c-0.134-0.035-0.213-0.172-0.179-0.305
			c0.036-0.133,0.167-0.216,0.306-0.178c0.053,0.013,5.227,1.348,8.186,0.024c0.127-0.057,0.274,0,0.331,0.126
			c0.056,0.126,0,0.274-0.126,0.33C251.134,154.248,249.831,154.406,248.568,154.406z"/>
	</g>
	<g>
		<path fill="#8F9396" d="M206.333,24.833c-0.133,0-0.266-0.053-0.363-0.157c-0.189-0.201-0.181-0.517,0.02-0.707l12-11.333
			c0.201-0.19,0.519-0.181,0.707,0.02c0.189,0.201,0.181,0.517-0.02,0.707l-12,11.333C206.58,24.788,206.456,24.833,206.333,24.833z
			"/>
	</g>
	<g>
		<path fill="#8F9396" d="M216.667,27.167c-0.198,0-0.386-0.119-0.464-0.314c-0.103-0.256,0.021-0.547,0.278-0.65l20-8
			c0.255-0.104,0.547,0.022,0.649,0.279c0.103,0.256-0.021,0.547-0.278,0.65l-20,8C216.792,27.155,216.729,27.167,216.667,27.167z"
			/>
	</g>
	<g>
		<path fill="#8F9396" d="M222.999,34.5c-0.244,0-0.457-0.179-0.494-0.428c-0.039-0.273,0.149-0.527,0.423-0.567l29.667-4.333
			c0.267-0.043,0.526,0.148,0.567,0.422c0.039,0.273-0.149,0.527-0.423,0.567l-29.667,4.333
			C223.048,34.499,223.023,34.5,222.999,34.5z"/>
	</g>
</g>
</svg>

'''
'''--- src/assets/icons/ledger/verify-address.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 17.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 width="400px" height="294.232px" viewBox="0 0 400 294.232" enable-background="new 0 0 400 294.232" xml:space="preserve">
<path fill="#367E99" d="M877.773-877.602c-0.631,0-1.261-0.242-1.74-0.726l-38.846-39.199c-0.952-0.96-0.945-2.512,0.016-3.464
	c0.961-0.954,2.511-0.944,3.464,0.016l38.846,39.199c0.952,0.96,0.945,2.512-0.016,3.464
	C879.019-877.838,878.397-877.602,877.773-877.602z"/>
<path fill="#367E99" d="M965.201-921.882c-0.603-0.185-1.135-0.601-1.452-1.203l-25.676-48.85c-0.63-1.197-0.169-2.679,1.029-3.308
	c1.198-0.631,2.678-0.168,3.308,1.029l25.676,48.85c0.63,1.197,0.169,2.679-1.029,3.308
	C966.462-921.743,965.797-921.699,965.201-921.882z"/>
<path fill="#367E99" d="M1067.412-938.388c-0.339-0.532-0.473-1.194-0.323-1.858l12.195-53.822c0.298-1.319,1.611-2.147,2.931-1.848
	c1.321,0.298,2.146,1.611,1.848,2.931l-12.195,53.822c-0.298,1.319-1.611,2.147-2.931,1.848
	C1068.281-937.464,1067.747-937.862,1067.412-938.388z"/>
<ellipse cx="101.18" cy="555.841" rx="52.18" ry="8.492"/>
<ellipse cx="-139.82" cy="555.841" rx="52.18" ry="8.492"/>
<path fill="#F3A56E" d="M501.389-83l0.447-15.378c-6.409,4.942-12.823,10.081-19.222,15.378H501.389z"/>
<g>
	<defs>
		<rect id="SVGID_1_" x="-1" y="-1" width="401" height="295"/>
	</defs>
	<clipPath id="SVGID_2_">
		<use xlink:href="#SVGID_1_"  overflow="visible"/>
	</clipPath>
	<g clip-path="url(#SVGID_2_)">
		<g>
			<path fill="#F3A56E" d="M513.09-84l0.455-15.659C507.019-94.626,500.488-89,493.972-84H513.09z"/>
			<path fill="#F3A56E" d="M411-6.12c-84,85.995-150.766,174.921-150.766,174.921c18.965,25.793,47.067,34.138,72.101,25.793
				C342.888,191.076,376,161.541,411,128.548V-6.12z"/>
		</g>
		<path opacity="0.7" fill="#ED985F" d="M304.408,113.059c-27.393,33.27-44.207,55.742-44.207,55.742
			c18.965,25.793,47.083,34.138,72.117,25.793C342.871,191.076,376,161.541,411,128.548v-35.35
			C376,105.982,337.397,111.302,304.408,113.059z"/>
		<g>
			<path fill="#F3A56E" d="M111.662,116.324c0,0,13.373,24.092,9.177,40.174S74.118,246.5,0,280.5V257l1-71.802l87.758-88.103"/>
			<path opacity="0.7" fill="#ED985F" d="M79.318,166.668c12.314-8.851,29.317-12.19,42.281-13.408
				c1.991-15.883-9.851-36.936-9.851-36.936L88.801,97.095L1,185.198v64.684C20,213.732,60.931,179.884,79.318,166.668z"/>
		</g>
		<path fill="#F3A56E" d="M0.31,67.203c0,0,71.846-15.208,84.956-11.013s23.074,24.123,23.074,32.514S-0.214,132.231-0.214,132.231
			L0.31,67.203z"/>
		<path opacity="0.7" fill="#ED985F" d="M94.836,62.28c-8.191-0.64-17.663-1.389-23.729-1.895
			c-12.586-1.049-16.781,6.293-25.172,14.684c-4.874,4.874-27.621,12.402-45.832,17.857l-0.317,39.305
			c0,0,108.555-35.136,108.555-43.527C108.341,82.522,102.928,70.081,94.836,62.28z"/>
		<path fill="#5C6B7B" d="M336,138.853c0,1.738-1.409,3.147-3.147,3.147H64.147c-1.738,0-3.147-1.409-3.147-3.147V68.147
			C61,66.409,62.409,65,64.147,65h268.707c1.738,0,3.147,1.409,3.147,3.147V138.853z"/>
		<g>
			<path fill="#00E676" d="M148.624,121.29c0.284-0.001,0.567-0.111,0.783-0.329c0.431-0.436,0.428-1.138-0.008-1.569l-10.019-9.921
				l9.712-10.503c0.416-0.45,0.389-1.152-0.061-1.568c-0.449-0.418-1.153-0.39-1.568,0.061l-11.17,12.077l11.544,11.43
				C148.056,121.184,148.34,121.291,148.624,121.29z"/>
		</g>
		<path fill="none" stroke="#00E676" stroke-miterlimit="10" d="M193.297,86.082"/>
		<g>
			<path fill="#00E676" d="M256.138,121.29c-0.284-0.001-0.567-0.111-0.783-0.329c-0.431-0.436-0.428-1.138,0.008-1.569
				l10.019-9.921l-9.712-10.503c-0.416-0.45-0.389-1.152,0.061-1.568c0.449-0.418,1.153-0.39,1.568,0.061l11.17,12.077
				l-11.544,11.43C256.706,121.184,256.422,121.291,256.138,121.29z"/>
		</g>
		<path opacity="0.4" fill="#465766" d="M61,72.25c0,0,19.042-5.839,30.559,1.071c13.985,8.391,18.879,38.108,18.879,38.108
			l-26.571,31.815l-11.537-0.35L61,72.25z"/>
		<path opacity="0.4" fill="#465766" d="M277.982,130.896l62.162,14.551l7.367-63.043c-20.135-27.762-40.374-17.339-40.374-17.339
			c-32.411,12.777-30.993,33.503-30.993,33.503C273.856,107.188,272.513,118.014,277.982,130.896z"/>
		<rect x="-1" y="-1" fill="none" width="401" height="297"/>
		<path fill="#465766" d="M95.875,72.25c-3.828,0-7.495,0.698-10.885,1.968c1.082,0.49,2.29,1.135,3.572,2.002
			c2.333-0.629,4.784-0.97,7.313-0.97c15.508,0,28.125,12.617,28.125,28.125S111.383,131.5,95.875,131.5
			c-2.223,0-4.384-0.267-6.46-0.757c-0.754,0.94-1.462,1.799-2.106,2.549c2.723,0.781,5.595,1.208,8.566,1.208
			c17.163,0,31.125-13.962,31.125-31.125S113.038,72.25,95.875,72.25z"/>
		<path opacity="0.4" fill="#465766" d="M308.5,138C189.489,153.33,93.606,95.431,61,72.489v66.364c0,1.738,1.409,3.147,3.147,3.147
			h268.707c1.738,0,3.147-1.409,3.147-3.147v-4.813C327.41,135.416,318.267,136.742,308.5,138z"/>
		<g>
			<path fill="#F3A56E" d="M0.31,106.185c0,0,0.66-0.435,1.87-1.207c9.467-6.038,52.613-32.666,76.793-32.356
				c0,0,20.103,1.224,26.396,36.535c0,0-41.779,65.552-104.709,90.725L0.31,106.185z"/>
			<g>
				<path fill="#ED985F" d="M47.867,151.214c-8.07,0-14.541-4.554-19.234-13.535c-0.177-0.366-3.755-8.017,0.215-19.426
					c5.184-14.899,20.282-28.725,44.874-41.094l0.746-0.375l0.729,0.407c0.505,0.283,12.511,7.248,23.081,35.433l0.301,0.803
					l-0.511,0.688C96.941,115.63,70.244,151.214,47.867,151.214z M74.326,80.381c-28.869,14.692-39.004,29.103-42.412,38.642
					c-3.665,10.255-0.498,17.183-0.466,17.252c4.139,7.919,9.518,11.794,16.419,11.794c19.204,0,43.335-30.205,47.156-35.15
					C86.348,90.187,76.88,82.21,74.326,80.381z"/>
			</g>
		</g>
		<g>
			<path fill="#B3B8BD" d="M445.03,356.049l-76.83-258.4c-7.332-24.66-33.265-38.706-57.923-31.374
				c-24.671,7.33-38.706,33.265-31.374,57.923l76.87,258.533L445.03,356.049z"/>
			<g>
				<path fill="#9DA2A5" d="M340.142,135.272c-12.976,9.083-30.921,5.917-40.005-7.059c-9.083-12.976-5.917-30.921,7.059-40.005
					c12.976-9.083,30.921-5.917,40.005,7.059S353.118,126.189,340.142,135.272z M308.977,90.753
					c-11.572,8.101-14.396,24.108-6.296,35.68s24.108,14.396,35.68,6.296c11.572-8.101,14.396-24.108,6.296-35.68
					S320.549,82.652,308.977,90.753z"/>
			</g>
			<path fill="#878C8E" d="M371.231,330.056l3.781,12.187l16.446-5.102l-5.102-16.446l-12.187,3.781
				C371.809,325.208,370.499,327.696,371.231,330.056z M376.19,346.041l0.65,2.096c0.732,2.36,3.22,3.67,5.58,2.938l2.096-0.65
				l-1.971-6.355L376.19,346.041z M388.315,349.246l-1.971-6.355l6.355-1.971l1.971,6.355L388.315,349.246z M398.459,323.832
				l-0.65-2.096c-0.732-2.36-3.22-3.67-5.58-2.938l-2.029,0.629l1.971,6.355L398.459,323.832z M395.323,335.941l-1.971-6.355
				l6.355-1.971l1.971,6.355L395.323,335.941z M398.473,346.094l2.096-0.65c2.36-0.732,3.67-3.22,2.938-5.58l-0.65-2.096
				l-6.355,1.971L398.473,346.094z M366.571,309.02l0.772,2.489l23.256-7.215l-4.086-13.17l-2.225,0.69l3.314,10.681L366.571,309.02
				z M366.937,288.439c1.504,4.849,6.162,7.136,11.337,5.531l0.595-0.185c2.204-0.758,4-2.393,5.061-4.514
				c0.956-2.021,1.175-4.313,0.504-6.476l-0.101-0.326c-0.711-2.292-2.236-4.191-4.203-5.447l-0.088-0.046l-1.487,1.681l0.107,0.108
				c1.674,0.99,2.922,2.469,3.49,4.301c0.934,3.012-0.077,6.701-4.404,8.259l-3.903-12.58l-0.129,0.04c0,0-0.807,0.177-1.201,0.299
				C367.801,280.563,365.636,284.247,366.937,288.439L366.937,288.439z M375.63,291.92c-3.112,0.392-5.682-1.181-6.555-3.997
				c-0.65-2.096-0.114-4.775,3.426-6.089L375.63,291.92z M362.277,266.472l0.854-0.265c-1.444,1.6-1.948,3.906-1.317,5.94
				l0.061,0.197c1.382,4.456,5.877,6.436,11.052,4.831c5.242-1.626,7.861-5.672,6.5-10.061c-1.077-3.472-3.661-4.395-4.739-4.634
				l2.556-0.793l-0.732-2.36l-23.132,7.176l0.751,2.422l8.124-2.521L362.277,266.472z M377.163,267.459
				c0.955,3.079-1.034,5.92-4.967,7.14c-3.798,1.178-7.155-0.151-8.09-3.163c-0.793-2.556,0.444-5.737,4.899-7.119
				C373.855,262.812,376.391,264.97,377.163,267.459z M357.381,249.537l0.129-0.04c-0.644,0.705-1.9,2.671-0.823,6.144
				c1.361,4.388,5.599,6.234,10.706,4.649c5.108-1.585,7.645-5.674,6.263-10.129c-0.751-2.422-2.114-3.797-4.224-4.362l2.292-0.711
				c3.208-0.995,5.675,0.463,6.794,4.07c0.467,1.506,0.562,3.201,0.27,4.801l-0.027,0.15l2.313,0.287l0.027-0.15
				c0.326-1.967,0.192-4.008-0.378-5.845c-1.199-3.866-4.445-7.38-9.884-5.693l-16.109,4.998l0.751,2.422L357.381,249.537z
				 M371.398,250.504c0.995,3.208-0.844,6.076-4.709,7.276c-3.933,1.22-6.726,0.079-7.702-3.068
				c-1.077-3.472,0.444-5.737,4.573-7.018C367.601,246.366,370.422,247.358,371.398,250.504L371.398,250.504z M351.268,237.932
				c1.504,4.849,6.142,7.069,11.254,5.483l0.59-0.183c2.204-0.758,4-2.393,5.061-4.514c0.956-2.021,1.175-4.313,0.504-6.476
				l-0.101-0.326c-0.711-2.292-2.236-4.191-4.203-5.447l-0.088-0.046l-1.466,1.748l0.107,0.108c1.674,0.99,2.922,2.469,3.49,4.301
				c0.934,3.012-0.077,6.701-4.404,8.259l-3.921-12.637l-0.129,0.04c0,0-0.807,0.177-1.201,0.299
				C352.109,229.984,349.946,233.673,351.268,237.932z M359.94,241.346c-3.112,0.392-5.682-1.181-6.555-3.997
				c-0.65-2.096-0.114-4.775,3.426-6.089L359.94,241.346z M346.247,220.599c0.034,0.347,0.116,0.611,0.155,0.956
				c0.711,2.292,2.744,3.744,5.471,3.976l-3.736,1.159l0.751,2.422l16.554-5.21l0.129-0.04l-0.772-2.489l-7.007,2.174
				c-1.05,0.326-2.203,0.542-3.289,0.516c-2.8,0.007-4.985-1.256-5.635-3.352c-0.082-0.264-0.162-0.523-0.177-0.807l-0.04-0.129
				l-2.422,0.751L346.247,220.599z"/>
			<path opacity="0.3" fill="#A5A8AA" d="M330.79,64.954c8.01,3.617,16.917,11.033,22.919,26.074
				c11.761,29.474,67.028,216.342,76.471,269.461l14.85-4.439L368.2,97.649C362.916,79.877,347.957,67.671,330.79,64.954z"/>
		</g>
		<g>
			<path fill="#F3A56E" d="M387.3,234.755c0,0-92.02-78.27-104.606-121.272c0,0-5.629-23.14,16.921-39.921
				c0,0,17.867-14.192,44.089,8.882C369.924,105.518,403,139.573,403,139.573v109.604L387.3,234.755z"/>
			<g>
				<path fill="#ED985F" d="M331.06,142.233c-9.512,0.376-28.231-3.197-46.728-31.342l-0.389-0.593l0.186-0.685
					c0.085-0.312,8.89-31.282,40.822-36.291l0.719-0.113l0.552,0.475c1.355,1.168,33.173,28.812,32.255,46.729
					C357.963,130.448,346.823,141.611,331.06,142.233z M287.369,109.78c12.995,19.504,28.446,29.907,43.566,29.31
					c13.838-0.547,23.965-10.366,24.398-18.837c0.778-15.198-26.391-39.948-30.62-43.703
					C297.871,81.166,288.787,105.442,287.369,109.78z"/>
			</g>
			<path opacity="0.7" fill="#ED985F" d="M335.907,141.146c-19.937,5.082-43.059-23.926-53.55-39.026
				c-0.796,6.677,0.345,11.363,0.345,11.363c12.586,43.002,104.593,121.272,104.593,121.272L403,249.177v-23.115
				C371,203.822,335.907,141.146,335.907,141.146z"/>
		</g>
		<rect fill="none" width="400" height="294"/>
		<polygon fill="#00E676" points="178.387,99.256 190.559,121.092 199.095,121.092 222.174,84.263 209.212,76.93 193.516,111.206 		
			"/>
	</g>
</g>
</svg>

'''
'''--- src/assets/icons/svg/action-up-down.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Regular" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>single-neutral-actions-up-down</title>
<g>
	<path d="M14.249,24c-0.087,0-0.174-0.016-0.258-0.046c-0.006-0.002-0.011-0.004-0.017-0.006c-0.104-0.042-0.186-0.097-0.256-0.167
		l-3-3c-0.292-0.292-0.292-0.768,0-1.061c0.142-0.142,0.33-0.22,0.53-0.22s0.389,0.078,0.53,0.22l1.72,1.72V14.25
		c0-0.414,0.336-0.75,0.75-0.75s0.75,0.336,0.75,0.75v7.189l1.72-1.72c0.142-0.142,0.33-0.22,0.53-0.22s0.389,0.078,0.53,0.22
		c0.292,0.292,0.292,0.768,0,1.061l-3,3c-0.07,0.07-0.152,0.125-0.245,0.163c-0.008,0.003-0.017,0.007-0.026,0.01
		C14.427,23.984,14.339,24,14.249,24z"/>
	<path d="M20.249,24c-0.414,0-0.75-0.336-0.75-0.75v-7.189l-1.72,1.72c-0.142,0.142-0.33,0.22-0.53,0.22s-0.389-0.078-0.53-0.22
		c-0.292-0.292-0.292-0.768,0-1.061l3-3c0.07-0.07,0.152-0.125,0.245-0.163c0.008-0.003,0.017-0.007,0.026-0.01
		c0.082-0.031,0.17-0.047,0.259-0.047c0.087,0,0.174,0.016,0.258,0.046c0.006,0.002,0.011,0.004,0.017,0.006
		c0.104,0.042,0.186,0.097,0.256,0.167l3,3c0.292,0.292,0.292,0.768,0,1.061c-0.142,0.142-0.33,0.22-0.53,0.22
		s-0.389-0.078-0.53-0.22l-1.72-1.72v7.189C20.999,23.664,20.663,24,20.249,24z"/>
	<path d="M5.999,7.5c-2.068,0-3.75-1.682-3.75-3.75S3.932,0,5.999,0s3.75,1.682,3.75,3.75S8.067,7.5,5.999,7.5z M5.999,1.5
		c-1.241,0-2.25,1.009-2.25,2.25S4.759,6,5.999,6s2.25-1.009,2.25-2.25S7.24,1.5,5.999,1.5z"/>
	<path d="M3.749,24c-0.387,0-0.708-0.29-0.746-0.675L2.321,16.5H0.749c-0.414,0-0.75-0.336-0.75-0.75V13.5c0-3.308,2.692-6,6-6
		s6,2.692,6,6v2.25c0,0.414-0.336,0.75-0.75,0.75H9.678l-0.682,6.825C8.957,23.71,8.636,24,8.249,24H3.749z M7.571,22.5l0.682-6.825
		C8.292,15.29,8.612,15,8.999,15h1.5v-1.5c0-2.481-2.019-4.5-4.5-4.5s-4.5,2.019-4.5,4.5V15h1.5c0.387,0,0.708,0.29,0.746,0.675
		L4.428,22.5H7.571z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/add-circle.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>add-circle</title>
<g>
	<path d="M12,17.25c-0.414,0-0.75-0.336-0.75-0.75v-3.75H7.5c-0.414,0-0.75-0.336-0.75-0.75s0.336-0.75,0.75-0.75h3.75V7.5
		c0-0.414,0.336-0.75,0.75-0.75s0.75,0.336,0.75,0.75v3.75h3.75c0.414,0,0.75,0.336,0.75,0.75s-0.336,0.75-0.75,0.75h-3.75v3.75
		C12.75,16.914,12.414,17.25,12,17.25z"/>
	<path d="M12,24C5.383,24,0,18.617,0,12C0,5.383,5.383,0,12,0c6.617,0,12,5.383,12,12C24,18.617,18.617,24,12,24z M12,1.5
		C6.21,1.5,1.5,6.21,1.5,12c0,5.79,4.71,10.5,10.5,10.5c5.79,0,10.5-4.71,10.5-10.5C22.5,6.21,17.79,1.5,12,1.5z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/add.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>add</title>
<g>
	<path d="M12,24c-0.414,0-0.75-0.336-0.75-0.75v-10.5H0.75C0.336,12.75,0,12.414,0,12s0.336-0.75,0.75-0.75h10.5V0.75
		C11.25,0.336,11.586,0,12,0s0.75,0.336,0.75,0.75v10.5h10.5c0.414,0,0.75,0.336,0.75,0.75s-0.336,0.75-0.75,0.75h-10.5v10.5
		C12.75,23.664,12.414,24,12,24z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/alarm-bell.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>alarm-bell</title>
<g>
	<path d="M11.99,24.001c-0.47,0-0.939-0.12-1.356-0.348c-0.665-0.363-1.149-0.964-1.362-1.691c-0.117-0.397,0.111-0.814,0.508-0.931
		c0.069-0.02,0.14-0.03,0.211-0.03c0.33,0,0.626,0.221,0.72,0.538c0.101,0.343,0.329,0.626,0.642,0.798
		c0.197,0.107,0.417,0.164,0.638,0.164c0.127,0,0.255-0.019,0.379-0.055c0.438-0.129,0.777-0.468,0.906-0.906
		c0.093-0.317,0.389-0.539,0.72-0.539c0.071,0,0.141,0.01,0.21,0.03c0.397,0.117,0.626,0.534,0.509,0.931
		c-0.273,0.931-0.992,1.65-1.923,1.923C12.53,23.962,12.26,24.001,11.99,24.001z"/>
	<path d="M2.991,19.501c-0.285,0-0.549-0.165-0.674-0.421c-0.127-0.26-0.094-0.563,0.083-0.791c0.006-0.009,1.341-1.939,1.341-7.788
		c0-4.293,3.266-7.835,7.5-8.216V0.751c0-0.414,0.336-0.75,0.75-0.75s0.75,0.336,0.75,0.75v1.534c4.234,0.381,7.5,3.923,7.5,8.216
		c0,6.303,1.246,7.686,1.258,7.699c0.218,0.199,0.297,0.532,0.187,0.818c-0.114,0.293-0.387,0.483-0.695,0.483H2.991z
		 M19.701,18.001c-0.482-1.232-0.961-3.47-0.961-7.5c0-3.722-3.028-6.75-6.75-6.75s-6.75,3.028-6.75,6.75
		c0,3.957-0.58,6.277-1.046,7.5H19.701z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/archive-locker.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>archive-locker</title>
<g>
	<path d="M2.251,24c-1.241,0-2.25-1.009-2.25-2.25V2.25C0.001,1.009,1.01,0,2.251,0H21.75C22.99,0,24,1.009,24,2.25v19.5
		C24,22.991,22.99,24,21.75,24H2.251z M1.501,21.75c0,0.414,0.336,0.75,0.75,0.75H21.75c0.414,0,0.75-0.336,0.75-0.75V16.5H1.501
		V21.75z M22.5,15V9H1.501v6H22.5z M22.5,7.5V2.25c0-0.414-0.336-0.75-0.75-0.75H2.251c-0.414,0-0.75,0.336-0.75,0.75V7.5H22.5z"/>
	<path d="M9.75,20.25c-0.827,0-1.5-0.673-1.5-1.5C8.25,18.336,8.586,18,9,18s0.75,0.336,0.75,0.75h4.5c0-0.414,0.336-0.75,0.75-0.75
		s0.75,0.336,0.75,0.75c0,0.827-0.673,1.5-1.5,1.5H9.75z"/>
	<path d="M9.75,12.75c-0.827,0-1.5-0.673-1.5-1.5c0-0.414,0.336-0.75,0.75-0.75s0.75,0.336,0.75,0.75h4.5
		c0-0.414,0.336-0.75,0.75-0.75s0.75,0.336,0.75,0.75c0,0.827-0.673,1.5-1.5,1.5H9.75z"/>
	<path d="M9.75,5.25c-0.827,0-1.5-0.673-1.5-1.5C8.25,3.336,8.586,3,9,3s0.75,0.336,0.75,0.75h4.5C14.25,3.336,14.586,3,15,3
		s0.75,0.336,0.75,0.75c0,0.827-0.673,1.5-1.5,1.5H9.75z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/arr-down.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>arrow-up</title>
<g>
	<path fill="#4E4E53" d="M9.001,24c-0.088,0-0.175-0.016-0.26-0.047c-0.008-0.003-0.015-0.005-0.022-0.008C8.623,23.906,8.54,23.85,8.47,23.78
		L5.47,20.78c-0.292-0.292-0.292-0.768,0-1.061c0.142-0.142,0.33-0.22,0.53-0.22s0.389,0.078,0.53,0.22l1.72,1.72V10.5
		c0-0.414,0.336-0.75,0.75-0.75s0.75,0.336,0.75,0.75v10.939l1.72-1.72c0.142-0.142,0.33-0.22,0.53-0.22s0.389,0.078,0.53,0.22
		c0.292,0.292,0.292,0.768,0,1.061l-3,3c-0.07,0.07-0.153,0.125-0.246,0.164c-0.008,0.003-0.017,0.007-0.026,0.01
		C9.174,23.985,9.087,24,9.001,24z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/arr-up.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>arrow-down</title>
<g>
	<path fill="#00DAFF" d="M15.001,14.25c-0.414,0-0.75-0.336-0.75-0.75V2.561l-1.72,1.72c-0.142,0.142-0.33,0.22-0.53,0.22s-0.389-0.078-0.53-0.22
		c-0.142-0.141-0.22-0.33-0.22-0.53s0.078-0.389,0.22-0.53l3-3c0.07-0.07,0.153-0.125,0.245-0.163
		c0.007-0.003,0.016-0.006,0.024-0.009C14.82,0.017,14.91,0,15.001,0c0.089,0,0.176,0.016,0.261,0.048
		c0.011,0.004,0.022,0.008,0.032,0.012c0.085,0.035,0.167,0.09,0.238,0.16l3,3c0.142,0.141,0.22,0.33,0.22,0.53
		s-0.078,0.389-0.22,0.53s-0.33,0.22-0.53,0.22s-0.389-0.078-0.53-0.22l-1.72-1.72V13.5C15.751,13.914,15.414,14.25,15.001,14.25z"
		/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/arrow-button-down.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Regular" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>arrow-button-down</title>
<g>
	<path d="M12,20.13c-0.398,0-0.776-0.153-1.065-0.43L0.422,9.476C0.139,9.182-0.007,8.807,0.001,8.41
		c0.008-0.397,0.17-0.767,0.455-1.041L3.22,4.682c0.291-0.28,0.67-0.433,1.068-0.433c0.398,0,0.776,0.153,1.064,0.43L12,11.143
		c0,0,6.652-6.468,6.656-6.471c0.292-0.275,0.665-0.423,1.057-0.423c0.398,0,0.776,0.153,1.065,0.43l2.795,2.718
		C23.859,7.694,24.008,8.072,24,8.469c-0.008,0.397-0.17,0.767-0.456,1.042L13.068,19.697C12.778,19.976,12.399,20.13,12,20.13z
		 M11.978,18.621c0.005,0.005,0.013,0.008,0.022,0.008c0.01,0,0.018-0.003,0.025-0.01L22.494,8.439l-2.759-2.682
		c-0.012-0.003-0.021-0.005-0.028-0.005c-0.01,0-0.015,0.003-0.019,0.007l-7.165,6.966c-0.141,0.137-0.327,0.212-0.523,0.212
		c-0.196,0-0.382-0.075-0.523-0.212L4.31,5.758L4.288,5.75c-0.01,0-0.018,0.004-0.025,0.011L1.507,8.439L11.978,18.621z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/arrow-down.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Regular" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>arrow-down</title>
<g>
	<path d="M12,18.999c-0.4,0-0.776-0.156-1.059-0.438L0.22,7.841C0.078,7.699,0,7.511,0,7.31c0-0.2,0.078-0.389,0.22-0.53
		c0.142-0.142,0.33-0.22,0.53-0.22s0.389,0.078,0.53,0.22L12,17.499L22.72,6.78c0.142-0.142,0.33-0.22,0.53-0.22
		s0.389,0.078,0.53,0.22C23.922,6.922,24,7.11,24,7.31c0,0.2-0.078,0.389-0.22,0.53L13.06,18.56
		C12.778,18.843,12.401,18.999,12,18.999z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/arrow-left.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Regular" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>arrow-left</title>
<g>
	<path d="M16.25,24c-0.2,0-0.389-0.078-0.53-0.22L5,13.06c-0.283-0.283-0.439-0.659-0.439-1.059c0-0.4,0.155-0.777,0.438-1.06
		L15.72,0.22C15.861,0.078,16.05,0,16.25,0s0.389,0.078,0.53,0.22C16.922,0.361,17,0.55,17,0.75s-0.078,0.389-0.22,0.53L6.06,12
		L16.78,22.72c0.142,0.142,0.22,0.33,0.22,0.53s-0.078,0.389-0.22,0.53S16.45,24,16.25,24z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/arrow-right-dash.svg ---
<svg width="28" height="27" viewBox="0 0 28 27" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M0 13.4375C0 13.0233 0.335786 12.6875 0.75 12.6875H27C27.4142 12.6875 27.75 13.0233 27.75 13.4375C27.75 13.8517 27.4142 14.1875 27 14.1875H0.75C0.335786 14.1875 0 13.8517 0 13.4375Z" fill="#00DAFF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M14.2291 0.21045C14.527 -0.0772609 15.0018 -0.068931 15.2896 0.229055L27.5396 12.9166C27.8201 13.2072 27.8201 13.6678 27.5396 13.9584L15.2896 26.6459C15.0018 26.9439 14.527 26.9523 14.2291 26.6646C13.9311 26.3768 13.9227 25.902 14.2104 25.6041L25.9575 13.4375L14.2104 1.27095C13.9227 0.972961 13.9311 0.49816 14.2291 0.21045Z" fill="#00DAFF"/>
</svg>

'''
'''--- src/assets/icons/svg/arrow-right.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M0.535645 12C0.535645 11.5858 0.871431 11.25 1.28564 11.25H22.7142C23.1284 11.25 23.4642 11.5858 23.4642 12C23.4642 12.4142 23.1284 12.75 22.7142 12.75H1.28564C0.871431 12.75 0.535645 12.4142 0.535645 12Z" fill="#00DAFF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M12.1839 1.46967C12.4768 1.17678 12.9517 1.17678 13.2446 1.46967L23.2446 11.4697C23.3852 11.6103 23.4642 11.8011 23.4642 12C23.4642 12.1989 23.3852 12.3897 23.2446 12.5303L13.2446 22.5303C12.9517 22.8232 12.4768 22.8232 12.1839 22.5303C11.891 22.2374 11.891 21.7626 12.1839 21.4697L21.6536 12L12.1839 2.53033C11.891 2.23744 11.891 1.76256 12.1839 1.46967Z" fill="#00DAFF"/>
</svg>

'''
'''--- src/assets/icons/svg/arrows-up.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>data-transfer-vertical</title>
<g>
	<path fill="#4E4E53" d="M9.001,24c-0.088,0-0.175-0.016-0.26-0.047c-0.008-0.003-0.015-0.005-0.022-0.008C8.623,23.906,8.54,23.85,8.47,23.78
		L5.47,20.78c-0.292-0.292-0.292-0.768,0-1.061c0.142-0.142,0.33-0.22,0.53-0.22s0.389,0.078,0.53,0.22l1.72,1.72V10.5
		c0-0.414,0.336-0.75,0.75-0.75s0.75,0.336,0.75,0.75v10.939l1.72-1.72c0.142-0.142,0.33-0.22,0.53-0.22s0.389,0.078,0.53,0.22
		c0.292,0.292,0.292,0.768,0,1.061l-3,3c-0.07,0.07-0.153,0.125-0.246,0.164c-0.008,0.003-0.017,0.007-0.026,0.01
		C9.174,23.985,9.087,24,9.001,24z"/>
	<path fill="#00DAFF" d="M15.001,14.25c-0.414,0-0.75-0.336-0.75-0.75V2.561l-1.72,1.72c-0.142,0.142-0.33,0.22-0.53,0.22s-0.389-0.078-0.53-0.22
		c-0.142-0.141-0.22-0.33-0.22-0.53s0.078-0.389,0.22-0.53l3-3c0.07-0.07,0.153-0.125,0.245-0.163
		c0.007-0.003,0.016-0.006,0.024-0.009C14.82,0.017,14.91,0,15.001,0c0.089,0,0.176,0.016,0.261,0.048
		c0.011,0.004,0.022,0.008,0.032,0.012c0.085,0.035,0.167,0.09,0.238,0.16l3,3c0.142,0.141,0.22,0.33,0.22,0.53
		s-0.078,0.389-0.22,0.53s-0.33,0.22-0.53,0.22s-0.389-0.078-0.53-0.22l-1.72-1.72V13.5C15.751,13.914,15.414,14.25,15.001,14.25z"
		/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/bin.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>bin</title>
<g>
	<path d="M9.75,17.25C9.336,17.25,9,16.914,9,16.5v-6c0-0.414,0.336-0.75,0.75-0.75s0.75,0.336,0.75,0.75v6
		C10.5,16.914,10.164,17.25,9.75,17.25z"/>
	<path d="M14.25,17.25c-0.414,0-0.75-0.336-0.75-0.75v-6c0-0.414,0.336-0.75,0.75-0.75S15,10.086,15,10.5v6
		C15,16.914,14.664,17.25,14.25,17.25z"/>
	<path d="M6.75,21.75c-1.241,0-2.25-1.009-2.25-2.25V6.75H2.25C1.836,6.75,1.5,6.414,1.5,6s0.336-0.75,0.75-0.75H7.5V4.5
		c0-1.241,1.009-2.25,2.25-2.25h4.5c1.241,0,2.25,1.009,2.25,2.25v0.75h5.25c0.414,0,0.75,0.336,0.75,0.75s-0.336,0.75-0.75,0.75
		H19.5V19.5c0,1.241-1.009,2.25-2.25,2.25H6.75z M6,19.5c0,0.414,0.336,0.75,0.75,0.75h10.5c0.414,0,0.75-0.336,0.75-0.75V6.75H6
		V19.5z M15,5.25V4.5c0-0.414-0.336-0.75-0.75-0.75h-4.5C9.336,3.75,9,4.086,9,4.5v0.75H15z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/ble.svg ---
<?xml version="1.0" encoding="UTF-8"?>
<svg width="14px" height="22px" viewBox="0 0 14 22" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!-- Generator: Sketch 57.1 (83088) - https://sketch.com -->
    <title>ble</title>
    <desc>Created with Sketch.</desc>
    <g id="New-Moonlet-Logo" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <path d="M7.93523879,11.1434062 L5.9308,9.37478376 L5.9308,13.0299368 L7.93523879,11.1434062 Z M12.8198235,6.54614999 C13.1549919,6.23069743 13.1295703,5.69056406 12.7662555,5.40798584 L7.14125546,1.03298584 C6.64861195,0.649818666 5.93079095,1.00088887 5.93079095,1.625 L5.93079095,9.37478376 L2.17701623,6.06262161 C1.86642322,5.78856895 1.39247426,5.81819076 1.11842161,6.12878377 C0.844368953,6.43937678 0.873990763,6.91332574 1.18458377,7.18737839 L5.70861928,11.1791744 L1.16677648,15.45385 C0.865146163,15.7377374 0.850762652,16.2123932 1.13465001,16.5140235 C1.41853736,16.8156538 1.89319321,16.8300373 2.19482352,16.54615 L5.93079095,13.0299368 L5.93079095,20.375 C5.93079095,20.9991111 6.64861195,21.3501813 7.14125546,20.9670142 L12.7662555,16.5920142 C13.1372815,16.3034384 13.154469,15.7486093 12.8020162,15.4376216 L7.93523879,11.1434062 L12.8198235,6.54614999 Z M11.1309754,15.9636063 L7.4308,18.8415205 L7.4308,12.6987457 L11.1309754,15.9636063 Z M7.4308,3.15847952 L11.1538886,6.05421508 L7.4308,9.55829845 L7.4308,3.15847952 Z" id="Path" fill="#9A99A2" fill-rule="nonzero"></path>
    </g>
</svg>
'''
'''--- src/assets/icons/svg/bug.svg ---
<svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M20.486 6.96172C18.8892 4.83984 16.5759 3.5 14.0001 3.5C11.4243 3.5 9.11104 4.83984 7.51416 6.96172C7.86416 7.81484 8.37822 8.60234 9.05088 9.275C10.3743 10.5984 12.1298 11.3258 14.0001 11.3258C15.8704 11.3258 17.6259 10.5984 18.9493 9.275C19.622 8.60234 20.1415 7.82031 20.486 6.96172Z" fill="#9A99A2"/>
<path d="M6.67176 8.20321C6.67176 8.20321 6.46395 8.11571 6.34911 8.02275C6.23426 7.92978 6.07567 7.75478 5.99364 7.56337C6.28895 6.9454 6.05926 6.19618 5.45223 5.85165C4.80692 5.49071 3.98114 5.73134 3.64208 6.39853C3.39598 6.88525 3.48348 7.48134 3.84989 7.88056C3.94833 7.98447 4.05223 8.0665 4.16161 8.13212C4.31473 8.21962 4.42958 8.35087 4.51161 8.504C4.65926 8.78837 4.86161 9.08915 5.11864 9.30243C5.34833 9.49384 5.59989 9.69071 5.94989 9.88759C5.55614 10.9977 5.31551 12.2009 5.26629 13.4642C4.66473 13.4751 4.24911 13.579 3.87176 13.6884C3.64208 13.754 3.42333 13.8743 3.22645 14.011C3.17176 14.0056 3.12254 14.0001 3.06786 14.0001C2.31317 14.0001 1.71161 14.6345 1.75536 15.4001C1.79364 16.0454 2.31864 16.5759 2.96942 16.6251C3.57098 16.6688 4.09598 16.3024 4.29833 15.7774C4.4077 15.4876 4.66473 15.2743 4.97645 15.236C5.08036 15.2251 5.18973 15.2142 5.31551 15.2142C5.49051 17.0188 6.04286 18.6868 6.87958 20.0923C6.10301 20.6938 5.62723 21.3501 5.42489 22.0774C5.42489 22.0774 5.38114 22.0993 5.32098 22.154C5.26629 22.1977 5.21708 22.2415 5.16786 22.2962C4.68114 22.8376 4.72489 23.6634 5.26629 24.1501C5.8077 24.6368 6.63348 24.5931 7.1202 24.0517C7.45926 23.6743 7.53583 23.1602 7.37176 22.7118C7.25145 22.3837 7.33348 22.0173 7.58504 21.7821C7.67254 21.7001 7.77645 21.6126 7.89676 21.5142C9.37879 23.2477 11.1452 24.3579 13.3491 24.4892V12.7368C10.4343 12.5782 7.89676 10.6806 6.67176 8.20321ZM24.9374 14.0056C24.8827 14.0056 24.828 14.011 24.7788 14.0165C24.5819 13.8798 24.3577 13.7649 24.1335 13.6938C23.7561 13.5845 23.346 13.4806 22.739 13.4696C22.6843 12.2063 22.4436 10.9977 22.0554 9.89306C22.4054 9.69618 22.6569 9.49931 22.8866 9.3079C23.1546 9.08368 23.3624 8.76103 23.5155 8.47118C23.5866 8.33446 23.696 8.22509 23.8327 8.14853C23.8327 8.14853 23.8382 8.14853 23.8382 8.14306C24.4725 7.78759 24.6968 6.98915 24.3413 6.35478C23.9858 5.7204 23.1874 5.49618 22.553 5.85165C21.946 6.19071 21.7163 6.93993 22.0116 7.56337C21.9241 7.74931 21.8257 7.87509 21.6561 8.02275C21.5304 8.13212 21.3335 8.2579 21.3335 8.2579C20.1085 10.7352 17.571 12.5782 14.6616 12.7368V24.5001C16.8655 24.3688 18.6319 23.2532 20.114 21.5251C20.2288 21.6181 20.3272 21.7001 20.4093 21.7767C20.6718 22.0173 20.7593 22.3946 20.639 22.7337C20.4749 23.1767 20.5569 23.6907 20.896 24.0626C21.3827 24.604 22.2085 24.6477 22.7499 24.161C23.2913 23.6743 23.335 22.8485 22.8483 22.3071C22.7991 22.2524 22.7499 22.2087 22.6952 22.1649C22.635 22.1157 22.5913 22.0884 22.5913 22.0884C22.389 21.361 21.9132 20.7048 21.1366 20.1032C21.9733 18.6977 22.5257 17.0298 22.7007 15.2251C22.8155 15.2251 22.9249 15.236 23.0233 15.247C23.346 15.2852 23.6085 15.504 23.7288 15.8048C23.9311 16.3188 24.4507 16.6743 25.0468 16.6306C25.6921 16.5813 26.2171 16.0563 26.2608 15.4056C26.2936 14.6399 25.6921 14.0056 24.9374 14.0056Z" fill="#9A99A2"/>
</svg>

'''
'''--- src/assets/icons/svg/button-refresh-one.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>button-refresh-one</title>
<g>
	<path d="M11.25,16.498c-0.414,0-0.75-0.336-0.75-0.75s0.336-0.75,0.75-0.75H12V9l-1.8,1.35c-0.131,0.098-0.286,0.15-0.45,0.15
		c-0.235,0-0.46-0.112-0.6-0.3c-0.12-0.16-0.171-0.358-0.142-0.556C9.036,9.446,9.14,9.27,9.3,9.15l1.8-1.35
		c0.258-0.192,0.575-0.298,0.895-0.299c0.829,0,1.503,0.672,1.505,1.497v6h0.75c0.414,0,0.75,0.336,0.75,0.75s-0.336,0.75-0.75,0.75
		H11.25z"/>
	<path d="M20.25,13.498c-0.414,0-0.75-0.336-0.75-0.75v-6c0-0.414-0.336-0.75-0.75-0.75H2.561l1.72,1.72
		c0.142,0.141,0.22,0.33,0.22,0.53s-0.078,0.389-0.22,0.53c-0.141,0.142-0.33,0.22-0.53,0.22S3.361,8.92,3.22,8.778l-3-3
		c-0.07-0.07-0.125-0.152-0.163-0.245C0.053,5.526,0.05,5.517,0.047,5.508C0.016,5.422,0,5.335,0,5.248
		C0,5.16,0.016,5.072,0.048,4.987C0.05,4.98,0.052,4.973,0.055,4.967c0.04-0.097,0.095-0.18,0.166-0.25L3.22,1.718
		c0.142-0.142,0.33-0.22,0.53-0.22s0.389,0.078,0.53,0.22c0.142,0.141,0.22,0.33,0.22,0.53s-0.078,0.389-0.22,0.53l-1.72,1.72H18.75
		c1.241,0,2.25,1.009,2.25,2.25v6C21,13.162,20.664,13.498,20.25,13.498z"/>
	<path d="M20.25,22.498c-0.2,0-0.389-0.078-0.53-0.22s-0.22-0.33-0.22-0.53s0.078-0.389,0.22-0.53l1.72-1.72H5.25
		c-1.241,0-2.25-1.009-2.25-2.25v-6c0-0.414,0.336-0.75,0.75-0.75s0.75,0.336,0.75,0.75v6c0,0.414,0.336,0.75,0.75,0.75h16.189
		l-1.72-1.72c-0.142-0.142-0.22-0.33-0.22-0.53s0.078-0.389,0.22-0.53s0.33-0.22,0.53-0.22s0.389,0.078,0.53,0.22l3,3
		c0.07,0.07,0.125,0.152,0.163,0.245c0.003,0.008,0.007,0.017,0.01,0.026C23.984,18.571,24,18.659,24,18.748
		c0,0.087-0.016,0.174-0.046,0.258c-0.002,0.006-0.004,0.011-0.006,0.016c-0.043,0.104-0.098,0.186-0.168,0.256l-3,3
		C20.639,22.42,20.45,22.498,20.25,22.498z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/check-box-thicked.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>check-box-thicked</title>
<g>
	<path d="M9.325,17.916c-0.117,0-0.235-0.012-0.352-0.035c-0.472-0.094-0.879-0.365-1.146-0.764l-2.44-3.462
		c-0.238-0.338-0.157-0.807,0.181-1.045C5.695,12.52,5.844,12.473,6,12.473c0.244,0,0.473,0.119,0.614,0.318l2.45,3.477
		c0.054,0.081,0.12,0.126,0.201,0.142c0.02,0.004,0.04,0.006,0.06,0.006c0.058,0,0.115-0.018,0.164-0.051
		c0.028-0.019,0.052-0.042,0.072-0.068l7.852-9.935C17.555,6.182,17.769,6.078,18,6.078c0.168,0,0.333,0.057,0.464,0.161
		c0.157,0.124,0.257,0.302,0.28,0.501c0.023,0.199-0.032,0.395-0.156,0.552l-7.843,9.923c-0.113,0.149-0.257,0.284-0.423,0.396
		C10.025,17.811,9.68,17.916,9.325,17.916z"/>
	<path d="M2.25,23.999c-1.241,0-2.25-1.009-2.25-2.25v-19.5c0-1.241,1.009-2.25,2.25-2.25h19.5c1.241,0,2.25,1.009,2.25,2.25v19.5
		c0,1.241-1.009,2.25-2.25,2.25H2.25z M2.25,1.499c-0.414,0-0.75,0.336-0.75,0.75v19.5c0,0.414,0.336,0.75,0.75,0.75h19.5
		c0.414,0,0.75-0.336,0.75-0.75v-19.5c0-0.414-0.336-0.75-0.75-0.75H2.25z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/check-box.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>check-box</title>
<g>
	<path d="M2.25,23.999c-1.241,0-2.25-1.009-2.25-2.25v-19.5c0-1.241,1.009-2.25,2.25-2.25h19.5c1.241,0,2.25,1.009,2.25,2.25v19.5
		c0,1.241-1.009,2.25-2.25,2.25H2.25z M2.25,1.499c-0.414,0-0.75,0.336-0.75,0.75v19.5c0,0.414,0.336,0.75,0.75,0.75h19.5
		c0.414,0,0.75-0.336,0.75-0.75v-19.5c0-0.414-0.336-0.75-0.75-0.75H2.25z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/check.svg ---
<svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M26.6965 4.28242C27.0928 4.66707 27.1022 5.30017 26.7176 5.69648L10.2176 22.6965C10.0293 22.8905 9.77039 23 9.5 23C9.22961 23 8.97074 22.8905 8.78242 22.6965L1.28242 14.9692C0.897767 14.5729 0.907216 13.9398 1.30353 13.5551C1.69983 13.1705 2.33293 13.1799 2.71758 13.5763L9.5 20.5642L25.2824 4.30353C25.6671 3.90722 26.3002 3.89777 26.6965 4.28242Z" fill="#00DAFF"/>
</svg>

'''
'''--- src/assets/icons/svg/checkmark-circle.svg ---
<svg viewBox="0 0 108 108" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_dd)">
<path d="M54 10.125C29.7633 10.125 10.125 29.7633 10.125 54C10.125 78.2367 29.7633 97.875 54 97.875C78.2367 97.875 97.875 78.2367 97.875 54C97.875 29.7633 78.2367 10.125 54 10.125ZM76.4648 41.8711L48.2625 70.2H48.2414C47.8828 70.5586 46.9125 71.3602 45.7945 71.3602C44.993 71.3602 44.0859 70.9172 43.3266 70.1578L31.5141 58.3453C31.1766 58.0078 31.1766 57.4805 31.5141 57.143L35.2687 53.3883C35.4375 53.2195 35.6484 53.1352 35.8594 53.1352C36.0703 53.1352 36.2812 53.2195 36.45 53.3883L45.8156 62.7539L71.55 36.8297C71.7188 36.6609 71.9297 36.5766 72.1406 36.5766C72.3727 36.5766 72.5836 36.6609 72.7312 36.8297L76.4227 40.6477C76.8023 41.0062 76.8023 41.5336 76.4648 41.8711Z" fill="#00DAFF"/>
</g>
<defs>
<filter id="filter0_dd" x="-4" y="-2" width="116" height="116" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/>
<feOffset dy="2"/>
<feGaussianBlur stdDeviation="2"/>
<feColorMatrix type="matrix" values="0 0 0 0 0.196487 0 0 0 0 0.196487 0 0 0 0 0.279476 0 0 0 0.06 0"/>
<feBlend mode="multiply" in2="BackgroundImageFix" result="effect1_dropShadow"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/>
<feOffset dy="2"/>
<feGaussianBlur stdDeviation="1"/>
<feColorMatrix type="matrix" values="0 0 0 0 0.196487 0 0 0 0 0.196487 0 0 0 0 0.279476 0 0 0 0.06 0"/>
<feBlend mode="multiply" in2="effect1_dropShadow" result="effect2_dropShadow"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect2_dropShadow" result="shape"/>
</filter>
</defs>
</svg>

'''
'''--- src/assets/icons/svg/chevron-down-2.svg ---
<?xml version="1.0" encoding="UTF-8"?>
<svg width="35px" height="12px" viewBox="0 0 35 12" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!-- Generator: Sketch 57.1 (83088) - https://sketch.com -->
    <title>chevron-up</title>
    <g id="chevron-up" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <path d="M4.06269312,0.194526184 C2.51327272,-0.39238302 0.781435389,0.387886475 0.194526184,1.93730688 C-0.39238302,3.48672728 0.387886475,5.21856461 1.93730688,5.80547382 L16.0801069,11.1626638 C16.764828,11.4220312 17.5207648,11.4220321 18.2054865,11.1626663 L32.3483865,5.8054763 C33.8978083,5.21857073 34.6780819,3.48673523 34.0911763,1.93731345 C33.5042707,0.387891671 31.7724352,-0.39238188 30.2230135,0.194523695 L17.1428038,5.14917717 L4.06269312,0.194526184 Z" id="Path" fill="#000000" fill-rule="nonzero"></path>
    </g>
</svg>
'''
'''--- src/assets/icons/svg/chevron-down.svg ---
<svg width="30" height="30" viewBox="0 0 30 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M29 8.97733L15 24L1 8.97733L3.77465 6L15 18.0453L26.2254 6L29 8.97733Z" fill="#00DAFF"/>
</svg>

'''
'''--- src/assets/icons/svg/chevron-right.svg ---
<svg width="30" height="30" viewBox="0 0 30 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M8.97733 1L24 15L8.97733 29L6 26.2254L18.0453 15L6 3.77465L8.97733 1Z" fill="#00DAFF"/>
</svg>

'''
'''--- src/assets/icons/svg/chevron-up.svg ---
<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 28 18">
  <path id="chevron-down" d="M29,21.023,15,6,1,21.023,3.775,24,15,11.955,26.225,24Z" transform="translate(-1 -6)" fill="#00daff" fill-rule="evenodd"/>
</svg>

'''
'''--- src/assets/icons/svg/claim-reward.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>accounting-coins-stack</title>
<g>
	<path d="M6.749,22.5C2.902,22.5,0,20.888,0,18.75v-15C0,1.612,2.902,0,6.75,0s6.75,1.612,6.75,3.75v6c0,0.414-0.336,0.75-0.75,0.75
		S12,10.164,12,9.75V9.152C10.75,10.006,8.858,10.5,6.75,10.5s-4-0.494-5.25-1.348V9.75C1.5,10.812,3.745,12,6.75,12
		c0.744-0.007,1.452-0.077,2.102-0.208c0.048-0.01,0.099-0.015,0.15-0.015c0.355,0,0.663,0.253,0.734,0.602
		c0.082,0.405-0.181,0.802-0.587,0.884C8.367,13.42,7.566,13.5,6.768,13.5c-2.124,0-4.018-0.494-5.268-1.348v0.598
		C1.5,13.812,3.745,15,6.75,15c0.716,0,1.417-0.07,2.102-0.208c0.051-0.01,0.099-0.014,0.148-0.014c0.356,0,0.666,0.253,0.736,0.601
		c0.082,0.405-0.181,0.802-0.587,0.884C8.367,16.42,7.566,16.5,6.768,16.5c-2.124,0-4.018-0.494-5.268-1.348v0.598
		C1.5,16.812,3.745,18,6.75,18c0.717-0.001,1.425-0.072,2.102-0.208c0.051-0.01,0.099-0.015,0.148-0.015
		c0.356,0,0.665,0.253,0.736,0.602c0.082,0.405-0.181,0.802-0.587,0.884C8.367,19.42,7.566,19.5,6.768,19.5
		c-2.124,0-4.018-0.494-5.268-1.348v0.598C1.5,19.812,3.745,21,6.75,21c0.74-0.006,1.448-0.076,2.102-0.208
		c0.051-0.01,0.099-0.015,0.148-0.015c0.356,0,0.665,0.253,0.736,0.602c0.082,0.405-0.181,0.802-0.587,0.884
		C8.367,22.42,7.566,22.5,6.768,22.5H6.749z M1.5,6.75C1.5,7.812,3.745,9,6.75,9S12,7.812,12,6.75V6.152
		C10.75,7.006,8.858,7.5,6.75,7.5s-4-0.494-5.25-1.348V6.75z M6.75,1.5C3.745,1.5,1.5,2.688,1.5,3.75S3.745,6,6.75,6
		S12,4.812,12,3.75S9.755,1.5,6.75,1.5z"/>
	<path d="M17.25,24c-3.848,0-6.75-1.612-6.75-3.75v-6c0-2.138,2.902-3.75,6.75-3.75S24,12.112,24,14.25v6
		C24,22.388,21.098,24,17.25,24z M12,20.25c0,1.062,2.245,2.25,5.25,2.25s5.25-1.188,5.25-2.25v-0.598
		C21.25,20.506,19.358,21,17.25,21s-4-0.494-5.25-1.348V20.25z M12,17.25c0,1.062,2.245,2.25,5.25,2.25s5.25-1.188,5.25-2.25v-0.598
		C21.25,17.506,19.358,18,17.25,18s-4-0.494-5.25-1.348V17.25z M17.25,12C14.245,12,12,13.188,12,14.25s2.245,2.25,5.25,2.25
		s5.25-1.188,5.25-2.25S20.255,12,17.25,12z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/close.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>close</title>
<g>
	<path d="M23.25,23.999c-0.2,0-0.389-0.078-0.53-0.22L12,13.06L1.28,23.779c-0.142,0.142-0.33,0.22-0.53,0.22
		s-0.389-0.078-0.53-0.22c-0.292-0.292-0.292-0.768,0-1.061l10.72-10.72L0.22,1.279C0.078,1.138,0,0.949,0,0.749
		s0.078-0.389,0.22-0.53c0.141-0.142,0.33-0.22,0.53-0.22s0.389,0.078,0.53,0.22L12,10.938l10.72-10.72
		c0.142-0.142,0.33-0.22,0.53-0.22s0.389,0.078,0.53,0.22C23.922,0.36,24,0.549,24,0.749s-0.078,0.389-0.22,0.53l-10.72,10.72
		l10.72,10.72c0.292,0.292,0.292,0.768,0,1.061C23.639,23.921,23.45,23.999,23.25,23.999z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/copy.svg ---
<svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M19.2501 6.28896H24.172C24.3524 6.28896 24.5001 6.14131 24.5001 5.96084C24.5001 5.5124 24.2978 5.08584 23.9532 4.796L19.7368 1.28506C19.4688 1.06084 18.9603 0.880371 18.6103 0.880371C18.386 0.880371 18.2056 1.06084 18.2056 1.28506V5.2499C18.211 5.82412 18.6759 6.28896 19.2501 6.28896Z" fill="#9A99A2"/>
<path d="M16.7891 5.25V0.875H9.625C8.6625 0.875 7.875 1.6625 7.875 2.625V21C7.875 21.9625 8.6625 22.75 9.625 22.75H22.75C23.7125 22.75 24.5 21.9625 24.5 21V7.71094H19.25C17.8938 7.71094 16.7891 6.60625 16.7891 5.25Z" fill="#9A99A2"/>
<path d="M6.34375 22.5312V4.375H5.25C4.2875 4.375 3.5 5.1625 3.5 6.125V25.375C3.5 26.3375 4.2875 27.125 5.25 27.125H19.25C20.2125 27.125 21 26.3375 21 25.375V24.2812H8.09375C7.13125 24.2812 6.34375 23.4937 6.34375 22.5312Z" fill="#9A99A2"/>
</svg>

'''
'''--- src/assets/icons/svg/dashboard.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>dashboard</title>
<g>
	<path fill-rule="evenodd" clip-rule="evenodd" d="M12.75 14.4382C12.7509 14.888 12.3873 15.2535 11.9375 15.2549H5.4375C5.22143 15.2544 5.01439 15.1681 4.86199 15.0149C4.7096 14.8618 4.62434 14.6543 4.625 14.4382V5.44655C4.62456 5.2304 4.71 5.02292 4.86253 4.86977C5.01506 4.71661 5.22219 4.63032 5.43834 4.62988L11.9383 4.64072C12.3878 4.64255 12.7509 5.00792 12.75 5.45738V14.4382Z" stroke="#9A99A2" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
    <path fill-rule="evenodd" clip-rule="evenodd" d="M23.3717 9.45324C23.3685 9.89888 23.0048 10.2577 22.5592 10.2549H16.0592C15.8451 10.2565 15.6392 10.1728 15.4868 10.0225C15.3344 9.87211 15.248 9.66733 15.2467 9.45324V5.4424C15.2494 4.99722 15.6123 4.63843 16.0575 4.64074L22.5575 4.6299C23.0036 4.62667 23.368 4.98546 23.3717 5.43157V9.45324Z" stroke="#9A99A2" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
    <path fill-rule="evenodd" clip-rule="evenodd" d="M12.75 22.5757C12.7487 22.7903 12.6622 22.9956 12.5095 23.1464C12.3568 23.2973 12.1504 23.3812 11.9358 23.3799L5.43583 23.3691C4.99019 23.3709 4.6273 23.0114 4.625 22.5657V18.5582C4.6261 18.3439 4.71235 18.1388 4.86475 17.9882C5.01715 17.8375 5.22319 17.7536 5.4375 17.7549H11.9375C12.3836 17.7526 12.7472 18.1121 12.75 18.5582V22.5757Z" stroke="#9A99A2" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
    <path fill-rule="evenodd" clip-rule="evenodd" d="M16.06 23.3799C15.8437 23.3794 15.6365 23.293 15.4839 23.1397C15.3314 22.9864 15.246 22.7787 15.2467 22.5624V13.5724C15.246 13.3562 15.3312 13.1487 15.4836 12.9954C15.636 12.842 15.843 12.7555 16.0592 12.7549H22.5592C22.7753 12.7555 22.9824 12.842 23.1347 12.9954C23.2871 13.1487 23.3723 13.3562 23.3717 13.5724V22.5516C23.3726 23.0012 23.0096 23.3668 22.56 23.3691L16.06 23.3799Z" stroke="#9A99A2" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
</g>
</svg>
'''
'''--- src/assets/icons/svg/expand.svg ---
<svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M14.001 3.87354C14.4152 3.87354 14.751 4.20932 14.751 4.62354V15.8735C14.751 16.2878 14.4152 16.6235 14.001 16.6235C13.5868 16.6235 13.251 16.2878 13.251 15.8735V4.62354C13.251 4.20932 13.5868 3.87354 14.001 3.87354Z" fill="#00DAFF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M13.4706 4.09321C13.7635 3.80031 14.2384 3.80031 14.5313 4.09321L17.6563 7.21821C17.9492 7.5111 17.9492 7.98597 17.6563 8.27887C17.3634 8.57176 16.8885 8.57176 16.5956 8.27887L14.001 5.6842L11.4063 8.27887C11.1134 8.57176 10.6385 8.57176 10.3456 8.27887C10.0528 7.98597 10.0528 7.5111 10.3456 7.21821L13.4706 4.09321Z" fill="#00DAFF"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M10.1078 12.1738C10.4007 12.4666 10.4007 12.9415 10.1078 13.2344C7.96007 15.3823 7.96016 18.8647 10.108 21.0125C12.2559 23.1603 15.7382 23.1603 17.8861 21.0125C20.034 18.8647 20.0341 15.3823 17.8863 13.2344C17.5934 12.9415 17.5934 12.4666 17.8863 12.1738C18.1792 11.8809 18.6541 11.8809 18.947 12.1738C21.6805 14.9075 21.6804 19.3396 18.9468 22.0732C16.2131 24.8068 11.781 24.8068 9.04738 22.0732C6.31373 19.3396 6.31362 14.9075 9.04714 12.1738C9.34002 11.8809 9.81489 11.8809 10.1078 12.1738Z" fill="#00DAFF"/>
</svg>

'''
'''--- src/assets/icons/svg/eye.svg ---
<svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M13.9893 6.125C9.59243 6.125 6.12524 8.89219 1.97993 13.4148C1.67914 13.7484 1.67368 14.2461 1.97446 14.5797C5.52368 18.5008 8.6518 21.875 13.9893 21.875C19.2612 21.875 23.2151 17.6258 26.026 14.5469C26.3159 14.2297 26.3323 13.7484 26.0534 13.4148C23.1877 9.94219 19.2229 6.125 13.9893 6.125ZM14.2299 18.9164C11.3315 19.0477 8.94711 16.6633 9.08383 13.7703C9.19868 11.2438 11.244 9.19844 13.7706 9.08359C16.669 8.95234 19.0534 11.3367 18.9166 14.2297C18.8018 16.7563 16.7565 18.8016 14.2299 18.9164Z" fill="#9A99A2"/>
<path d="M13.9999 11.4297C13.9999 11.1016 14.0601 10.7898 14.1695 10.5055C14.1148 10.5055 14.0601 10.5 13.9999 10.5C11.982 10.5 10.3577 12.2172 10.5109 14.268C10.6421 15.9797 12.0202 17.3578 13.732 17.4891C15.7827 17.6422 17.4999 16.018 17.4999 14C17.4999 13.9289 17.4945 13.8578 17.4945 13.7867C17.1882 13.9234 16.8546 14 16.4991 14C15.121 14 13.9999 12.8461 13.9999 11.4297Z" fill="#9A99A2"/>
</svg>

'''
'''--- src/assets/icons/svg/face-id.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>face-id</title>
<g>
	<path d="M12,19.385c-1.848,0-3.626-0.693-5.005-1.95c-0.148-0.135-0.235-0.319-0.244-0.52s0.06-0.392,0.195-0.54
		c0.142-0.156,0.344-0.245,0.554-0.245c0.187,0,0.367,0.07,0.505,0.196c1.102,1.004,2.521,1.557,3.995,1.557
		s2.893-0.553,3.995-1.557c0.138-0.126,0.318-0.196,0.505-0.196c0.21,0,0.413,0.089,0.554,0.245c0.135,0.148,0.204,0.34,0.195,0.54
		s-0.096,0.385-0.244,0.52C15.626,18.693,13.848,19.385,12,19.385z"/>
	<path d="M6.75,9.624C6.336,9.624,6,9.288,6,8.874v-2.25c0-0.414,0.336-0.75,0.75-0.75S7.5,6.21,7.5,6.624v2.25
		C7.5,9.288,7.164,9.624,6.75,9.624z"/>
	<path d="M17.25,9.624c-0.414,0-0.75-0.336-0.75-0.75v-2.25c0-0.414,0.336-0.75,0.75-0.75S18,6.21,18,6.624v2.25
		C18,9.288,17.664,9.624,17.25,9.624z"/>
	<path d="M9.75,14.124c-0.414,0-0.75-0.336-0.75-0.75s0.336-0.75,0.75-0.75h0.75c0.414,0,0.75-0.336,0.75-0.75v-5.25
		c0-0.414,0.336-0.75,0.75-0.75s0.75,0.336,0.75,0.75v5.25c0,1.241-1.009,2.25-2.25,2.25H9.75z"/>
	<path d="M18.75,23.874c-0.414,0-0.75-0.336-0.75-0.75s0.336-0.75,0.75-0.75h3c0.414,0,0.75-0.336,0.75-0.75v-3
		c0-0.414,0.336-0.75,0.75-0.75S24,18.21,24,18.624v3c0,1.241-1.009,2.25-2.25,2.25H18.75z"/>
	<path d="M23.25,5.874c-0.414,0-0.75-0.336-0.75-0.75v-3c0-0.414-0.336-0.75-0.75-0.75h-3c-0.414,0-0.75-0.336-0.75-0.75
		s0.336-0.75,0.75-0.75h3c1.241,0,2.25,1.009,2.25,2.25v3C24,5.538,23.664,5.874,23.25,5.874z"/>
	<path d="M0.75,5.874C0.336,5.874,0,5.538,0,5.124v-3c0-1.241,1.009-2.25,2.25-2.25h3C5.664-0.126,6,0.21,6,0.624
		s-0.336,0.75-0.75,0.75h-3c-0.414,0-0.75,0.336-0.75,0.75v3C1.5,5.538,1.164,5.874,0.75,5.874z"/>
	<path d="M2.25,23.874c-1.241,0-2.25-1.009-2.25-2.25v-3c0-0.414,0.336-0.75,0.75-0.75s0.75,0.336,0.75,0.75v3
		c0,0.414,0.336,0.75,0.75,0.75h3c0.414,0,0.75,0.336,0.75,0.75s-0.336,0.75-0.75,0.75H2.25z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/failed.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>failed</title>
<g>
	<path d="M11.998,24c-3.174,0-6.166-1.231-8.43-3.468c-0.018-0.012-0.038-0.028-0.058-0.049c-0.013-0.013-0.028-0.032-0.042-0.051
		C1.231,18.169-0.002,15.176-0.002,12c0-3.174,1.232-6.167,3.469-8.43c0.012-0.017,0.027-0.036,0.046-0.055
		c0.014-0.014,0.033-0.029,0.052-0.043C5.829,1.232,8.822,0,11.998,0c3.176,0,6.17,1.233,8.433,3.471
		c0.015,0.011,0.032,0.024,0.049,0.041c0.014,0.014,0.029,0.032,0.043,0.051c2.241,2.264,3.475,5.259,3.475,8.437
		c0,3.177-1.233,6.171-3.472,8.434c-0.011,0.016-0.026,0.033-0.043,0.051c-0.013,0.013-0.031,0.028-0.049,0.041
		C18.17,22.767,15.176,24,11.998,24z M5.128,19.931c1.912,1.66,4.336,2.569,6.87,2.569c2.533,0,4.958-0.909,6.87-2.569l-6.87-6.871
		L5.128,19.931z M19.928,18.871c1.66-1.912,2.57-4.337,2.57-6.871s-0.91-4.959-2.57-6.871L13.058,12L19.928,18.871z M4.067,5.13
		C2.407,7.042,1.498,9.466,1.498,12s0.91,4.958,2.569,6.87l6.87-6.87L4.067,5.13z M11.998,10.939l6.87-6.87
		c-1.912-1.66-4.336-2.569-6.87-2.569c-2.534,0-4.958,0.91-6.87,2.569L11.998,10.939z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/flash-off.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>flash-off</title>
<g>
	<path d="M16.961,13.497c-0.139,0-0.275-0.039-0.393-0.112c-0.17-0.105-0.29-0.27-0.336-0.465c-0.046-0.195-0.014-0.396,0.091-0.567
		l0.887-1.441c0.039-0.063,0.05-0.134,0.033-0.206c-0.017-0.072-0.059-0.131-0.122-0.169c-0.043-0.027-0.093-0.041-0.143-0.041H13.5
		c-0.414,0-0.75-0.336-0.75-0.75V3.398l-1.842,2.995c-0.138,0.224-0.377,0.357-0.64,0.357l0,0c-0.138,0-0.274-0.038-0.392-0.111
		c-0.171-0.105-0.29-0.27-0.337-0.465C9.493,5.979,9.525,5.778,9.63,5.607l3.231-5.253c0.137-0.224,0.375-0.357,0.638-0.357
		c0.069,0,0.137,0.01,0.204,0.028c0.322,0.091,0.546,0.388,0.546,0.722v8.25h2.727c0.328,0,0.649,0.091,0.928,0.263
		c0.403,0.248,0.686,0.638,0.796,1.099c0.11,0.461,0.033,0.937-0.215,1.34L17.6,13.14C17.462,13.364,17.223,13.497,16.961,13.497z"
		/>
	<path d="M10.5,23.997c-0.069,0-0.137-0.01-0.203-0.028c-0.322-0.091-0.547-0.388-0.547-0.722v-8.25H7.023
		c-0.329,0-0.65-0.091-0.93-0.263c-0.832-0.513-1.092-1.606-0.58-2.438L6.4,10.854c0.137-0.224,0.376-0.357,0.639-0.357
		c0.138,0,0.274,0.038,0.392,0.111c0.353,0.217,0.463,0.68,0.246,1.032l-0.887,1.442c-0.038,0.062-0.05,0.135-0.033,0.206
		s0.06,0.131,0.122,0.169c0.043,0.027,0.092,0.041,0.142,0.041H10.5c0.414,0,0.75,0.336,0.75,0.75v6.352l1.842-2.992
		c0.137-0.224,0.376-0.357,0.639-0.357c0.139,0,0.275,0.039,0.393,0.112c0.17,0.105,0.29,0.27,0.336,0.465
		c0.046,0.195,0.014,0.396-0.091,0.567l-3.231,5.247C11.003,23.86,10.759,23.997,10.5,23.997z"/>
	<path d="M21.75,22.497c-0.2,0-0.389-0.078-0.53-0.22l-19.5-19.5C1.578,2.636,1.5,2.448,1.5,2.247s0.078-0.389,0.22-0.53
		c0.141-0.142,0.33-0.22,0.53-0.22s0.389,0.078,0.53,0.22l19.5,19.5c0.142,0.142,0.22,0.33,0.22,0.53s-0.078,0.389-0.22,0.53
		S21.95,22.497,21.75,22.497z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/flash.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>flash</title>
<g>
	<path d="M5.5,23.997c-0.15,0-0.295-0.044-0.42-0.129c-0.297-0.201-0.411-0.587-0.269-0.917l4.052-9.454L5.9,13.497
		c-0.402,0-0.776-0.155-1.059-0.435C4.557,12.78,4.4,12.404,4.398,12.003c-0.001-0.208,0.041-0.411,0.124-0.602L9.113,0.9
		C9.351,0.353,9.891,0,10.487,0h7.7c0.401,0,0.778,0.156,1.061,0.44c0.283,0.284,0.439,0.661,0.439,1.061
		c0,0.339-0.117,0.672-0.33,0.938L15.307,7.5l3.383,0c0.827,0,1.5,0.673,1.5,1.499c0,0.402-0.156,0.779-0.441,1.063L6.03,23.777
		C5.889,23.919,5.7,23.997,5.5,23.997z M8.863,11.997c0.205,0.001,0.402,0.041,0.589,0.121c0.368,0.157,0.653,0.449,0.803,0.821
		c0.149,0.372,0.145,0.78-0.013,1.149l-2.519,5.877L18.69,9l-3.382,0c-0.339,0-0.672-0.117-0.936-0.328
		c-0.646-0.516-0.752-1.461-0.236-2.108L18.187,1.5l-7.699,0L5.897,12L8.863,11.997z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/inbound.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>login-1</title>
<g>
	<path d="M11.249,16.504c-0.2,0-0.389-0.078-0.53-0.22l-3.75-3.75c-0.009-0.009-0.019-0.02-0.028-0.031
		c-0.023-0.026-0.045-0.052-0.064-0.081c-0.009-0.014-0.023-0.038-0.031-0.053c-0.008-0.012-0.025-0.043-0.039-0.076
		c-0.006-0.015-0.016-0.043-0.02-0.059c-0.008-0.023-0.017-0.052-0.023-0.082c-0.01-0.048-0.015-0.098-0.015-0.148
		s0.005-0.1,0.015-0.148c0.006-0.031,0.015-0.06,0.025-0.088c0.004-0.014,0.01-0.033,0.018-0.051
		c0.014-0.033,0.031-0.065,0.049-0.096c0.007-0.012,0.015-0.025,0.021-0.035c0.026-0.039,0.057-0.077,0.092-0.112l3.75-3.75
		c0.142-0.142,0.33-0.22,0.53-0.22s0.389,0.078,0.53,0.22c0.142,0.141,0.22,0.33,0.22,0.53s-0.078,0.389-0.22,0.53l-2.47,2.47
		h13.939c0.414,0,0.75,0.336,0.75,0.75c0,0.413-0.336,0.75-0.75,0.75H9.309l2.47,2.47c0.292,0.292,0.292,0.768,0,1.061
		C11.637,16.426,11.449,16.504,11.249,16.504z"/>
	<path d="M2.093,23.25C0.885,23.189-0.055,22.165,0,20.966L-0.001,3c-0.055-1.172,0.876-2.189,2.076-2.249l12.31-0.001
		c1.228,0.06,2.167,1.085,2.113,2.284L16.499,7.5c0,0.414-0.336,0.75-0.75,0.75s-0.75-0.336-0.75-0.75V3
		c0.018-0.403-0.275-0.732-0.652-0.751L2.112,2.25C1.771,2.268,1.481,2.596,1.498,2.966L1.499,21
		c-0.018,0.403,0.275,0.732,0.651,0.751l12.235-0.001c0.341-0.018,0.632-0.346,0.615-0.716L14.999,16.5
		c0-0.414,0.336-0.75,0.75-0.75s0.75,0.336,0.75,0.75V21c0.054,1.173-0.878,2.189-2.077,2.249L2.112,23.25
		C2.106,23.25,2.099,23.25,2.093,23.25z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/information-circle.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>information-circle</title>
<g>
	<path d="M13.5,17.25c-1.241,0-2.25-1.009-2.25-2.25v-3.75H10.5c-0.414,0-0.75-0.336-0.75-0.75s0.336-0.75,0.75-0.75h0.75
		c0.827,0,1.5,0.673,1.5,1.5V15c0,0.414,0.336,0.75,0.75,0.75h0.75c0.414,0,0.75,0.336,0.75,0.75s-0.336,0.75-0.75,0.75H13.5z"/>
	<circle cx="11.625" cy="7.125" r="1.125"/>
	<path d="M12,24C5.383,24,0,18.617,0,12C0,5.383,5.383,0,12,0c6.617,0,12,5.383,12,12C24,18.617,18.617,24,12,24z M12,1.5
		C6.21,1.5,1.5,6.21,1.5,12c0,5.79,4.71,10.5,10.5,10.5c5.79,0,10.5-4.71,10.5-10.5C22.5,6.21,17.79,1.5,12,1.5z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/key-lock.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>key-lock-1</title>
<g>
	<path d="M3.75,24C1.682,24,0,22.318,0,20.25s1.682-3.75,3.75-3.75c1.799,0,3.323,1.268,3.673,3h6.827c0.414,0,0.75,0.336,0.75,0.75
		v2.25c0,0.414-0.336,0.75-0.75,0.75s-0.75-0.336-0.75-0.75V21H12v0.75c0,0.414-0.336,0.75-0.75,0.75s-0.75-0.336-0.75-0.75V21
		H7.423C7.073,22.732,5.549,24,3.75,24z M3.75,18c-1.241,0-2.25,1.009-2.25,2.25s1.009,2.25,2.25,2.25S6,21.491,6,20.25
		S4.991,18,3.75,18z"/>
	<path d="M17.25,24c-0.414,0-0.75-0.336-0.75-0.75s0.336-0.75,0.75-0.75h4.5c0.414,0,0.75-0.336,0.75-0.75v-10.5
		c0-0.414-0.336-0.75-0.75-0.75H8.25c-0.414,0-0.75,0.336-0.75,0.75V15c0,0.414-0.336,0.75-0.75,0.75S6,15.414,6,15v-3.75
		C6,10.009,7.009,9,8.25,9H9V6c0-3.308,2.692-6,6-6c3.308,0,6,2.692,6,6v3h0.75C22.991,9,24,10.009,24,11.25v10.5
		c0,1.241-1.009,2.25-2.25,2.25H17.25z M19.5,9V6c0-2.481-2.019-4.5-4.5-4.5S10.5,3.519,10.5,6v3H19.5z"/>
	<path d="M16.522,18.906c-0.209,0-0.411-0.088-0.552-0.243c-0.135-0.147-0.206-0.339-0.197-0.539c0.008-0.2,0.094-0.385,0.242-0.521
		c0.458-0.421,0.609-1.091,0.375-1.667c-0.23-0.57-0.777-0.938-1.393-0.938c-0.192,0-0.381,0.037-0.56,0.11
		c-0.372,0.15-0.662,0.436-0.819,0.805c-0.156,0.369-0.16,0.777-0.009,1.148c0.075,0.186,0.073,0.389-0.005,0.574
		c-0.078,0.185-0.224,0.328-0.41,0.403c-0.091,0.036-0.185,0.055-0.281,0.055c-0.307,0-0.58-0.184-0.695-0.469
		c-0.3-0.743-0.294-1.558,0.019-2.296c0.312-0.738,0.894-1.31,1.637-1.61c0.359-0.145,0.737-0.219,1.122-0.219
		c1.231,0,2.324,0.736,2.785,1.875c0.467,1.153,0.165,2.493-0.751,3.334C16.891,18.836,16.71,18.906,16.522,18.906z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/key.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M16.8562 9.92734C16.1453 9.92734 15.4562 9.92734 14.8109 10.1516C12.0437 7.79453 4.73202 1.57109 4.17421 0.991406C3.91718 0.723438 3.6328 0.625 3.3539 0.625C2.88905 0.625 2.44061 0.909375 2.18905 1.15C1.81171 1.51094 0.384364 3.05312 0.657802 3.3375C1.47811 4.17969 1.69686 4.34922 2.03593 4.69375C2.54452 5.21328 3.58358 4.63906 4.00468 4.81953C4.4203 5 4.5078 5.19141 4.57343 5.50312C4.63905 5.81484 4.41483 6.36719 4.40936 6.79922C4.4039 7.25312 4.5953 7.49922 4.91249 7.83828C5.16405 8.11172 5.39921 8.30859 5.76561 8.31406C6.2578 8.325 6.90858 7.61406 7.42811 8.14453C7.94765 8.675 7.08905 9.44063 7.15468 10.0039C7.2203 10.5672 8.00233 11.2508 8.33593 11.3219C8.66952 11.393 9.52811 10.682 10.0148 10.7914C10.1789 10.8297 10.5617 11.1633 10.6164 11.4148C10.6711 11.6664 10.2391 12.782 10.2937 13.0336C10.3594 13.3398 10.682 13.6953 10.8625 13.9852C10.4961 14.8328 10.3484 15.6039 10.3484 16.5938C10.3484 20.3398 13.2687 23.375 16.8672 23.375C20.4656 23.375 23.375 20.3398 23.375 16.5938C23.375 12.8477 20.4547 9.92734 16.8562 9.92734ZM18.125 19.875C17.157 19.875 16.375 19.093 16.375 18.125C16.375 17.157 17.157 16.375 18.125 16.375C19.093 16.375 19.875 17.157 19.875 18.125C19.875 19.093 19.093 19.875 18.125 19.875Z" fill="#9A99A2"/>
</svg>
'''
'''--- src/assets/icons/svg/keyboard-delete.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>keyboard-delete</title>
<g>
	<path d="M16.5,14.997c-0.2,0-0.389-0.078-0.53-0.22l-1.72-1.72l-1.72,1.72c-0.142,0.142-0.33,0.22-0.53,0.22
		s-0.389-0.078-0.53-0.22c-0.292-0.292-0.292-0.768,0-1.061l1.72-1.72l-1.72-1.72c-0.142-0.141-0.22-0.33-0.22-0.53
		s0.078-0.389,0.22-0.53c0.141-0.142,0.33-0.22,0.53-0.22s0.389,0.078,0.53,0.22l1.72,1.72l1.72-1.72
		c0.142-0.142,0.33-0.22,0.53-0.22s0.389,0.078,0.53,0.22c0.142,0.141,0.22,0.33,0.22,0.53s-0.078,0.389-0.22,0.53l-1.72,1.72
		l1.72,1.72c0.292,0.292,0.292,0.768,0,1.061C16.889,14.919,16.7,14.997,16.5,14.997z"/>
	<path d="M11.121,18.75c-0.601,0-1.166-0.234-1.59-0.659l-5.325-5.018C3.912,12.78,3.753,12.402,3.752,12
		c-0.002-0.401,0.154-0.779,0.437-1.062L9.547,5.89c0.412-0.41,0.973-0.64,1.572-0.64H18c1.241,0,2.25,1.009,2.25,2.25v9
		c0,1.241-1.009,2.25-2.25,2.25H11.121z M10.575,17.015c0.152,0.152,0.348,0.235,0.546,0.235H18c0.414,0,0.75-0.336,0.75-0.75v-9
		c0-0.414-0.336-0.75-0.75-0.75c0,0-6.885,0-6.889,0c-0.21,0.008-0.387,0.084-0.521,0.218l-5.339,5.029L10.575,17.015z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/keyboard-shift.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>keyboard-shift</title>
<g>
	<path d="M6.75,23.999c-1.241,0-2.25-1.009-2.25-2.25v-8.25h-3c-0.367,0-0.719-0.134-0.994-0.377
		c-0.3-0.265-0.479-0.632-0.503-1.032c-0.024-0.4,0.108-0.786,0.374-1.086l9.99-10.304c0.023-0.025,0.057-0.059,0.093-0.093
		C10.879,0.216,11.425,0,11.999,0c0.62,0,1.219,0.259,1.642,0.71l9.96,10.271c0.264,0.299,0.398,0.646,0.399,1.016
		c0.001,0.827-0.672,1.501-1.499,1.502H19.5v8.25c0,1.241-1.009,2.25-2.25,2.25H6.75z M5.25,11.999c0.414,0,0.75,0.336,0.75,0.75v9
		c0,0.414,0.336,0.75,0.75,0.75h10.5c0.414,0,0.75-0.336,0.75-0.75v-9c0-0.414,0.336-0.75,0.75-0.75h3.75L12.556,1.745
		c-0.15-0.16-0.346-0.245-0.557-0.245c-0.191,0-0.372,0.072-0.511,0.202c-0.011,0.011-9.98,10.292-9.98,10.292L5.25,11.999z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/laptop.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>laptop</title>
<g>
	<path d="M2.249,21.75c-1.241,0-2.25-1.009-2.25-2.25c0-0.317,0.065-0.625,0.194-0.914l2.056-4.5V4.5c0-1.241,1.009-2.25,2.25-2.25
		h15c1.241,0,2.25,1.009,2.25,2.25v9.587c0,0,2.055,4.495,2.057,4.5c0.503,1.134-0.009,2.466-1.143,2.97
		c-0.29,0.128-0.597,0.194-0.914,0.194H2.249z M1.56,19.203c-0.04,0.091-0.061,0.192-0.061,0.298c0,0.413,0.337,0.75,0.75,0.75h19.5
		c0.106,0,0.208-0.022,0.305-0.065c0.377-0.167,0.548-0.611,0.381-0.989L20.517,15H3.481L1.56,19.203z M20.249,13.5v-9
		c0-0.414-0.336-0.75-0.75-0.75h-15c-0.414,0-0.75,0.336-0.75,0.75v9H20.249z"/>
	<path d="M10.499,18.75c-0.414,0-0.75-0.336-0.75-0.75s0.336-0.75,0.75-0.75h3c0.414,0,0.75,0.336,0.75,0.75s-0.336,0.75-0.75,0.75
		H10.499z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/ledger-logo.svg ---
<?xml version="1.0" encoding="UTF-8"?>
<svg width="20px" height="20px" viewBox="0 0 20 20" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!-- Generator: Sketch 57.1 (83088) - https://sketch.com -->
    <title>ledger (1)</title>
    <desc>Created with Sketch.</desc>
    <g id="New-Moonlet-Logo" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="ledger-(1)" fill="#000000" fill-rule="nonzero">
            <path d="M16.7,-1.57457666e-05 L7.59,-1.57457666e-05 L7.59,12.29 L19.89,12.29 L19.89,3.18 C19.89,2.33487609 19.5535971,1.52451148 18.9550668,0.927857504 C18.3565366,0.331203527 17.5451197,-0.00265762237 16.7,-1.57457666e-05 Z" id="Shape"></path>
            <path d="M4.75,0 L3.18,0 C1.4237345,0 0,1.4237345 0,3.18 L0,4.75 L4.75,4.75 L4.75,0 Z" id="Path"></path>
            <polygon id="Rectangle-path" points="0 7.59 4.75 7.59 4.75 12.34 0 12.34"></polygon>
            <path d="M15.18,19.89 L16.75,19.89 C17.5951239,19.89 18.4054885,19.5535971 19.0021425,18.9550668 C19.5987965,18.3565366 19.9326576,17.5451197 19.9300157,16.7 L19.9300157,15.18 L15.18,15.18 L15.18,19.89 Z" id="Path"></path>
            <polygon id="Path" points="7.59 15.18 12.34 15.18 12.34 19.93 7.59 19.93"></polygon>
            <path d="M0,15.18 L0,16.75 C0,18.5062655 1.4237345,19.93 3.18,19.93 L4.75,19.93 L4.75,15.18 L0,15.18 Z" id="Path"></path>
        </g>
    </g>
</svg>
'''
'''--- src/assets/icons/svg/megaphone.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>megaphone</title>
<g>
	<path d="M9,21.25c-0.193,0-0.377-0.073-0.517-0.207C7.098,19.726,6.218,17.904,6.036,16H4.5C2.019,16,0,13.981,0,11.5
		C0,9.019,2.019,7,4.5,7h2.25c4.267,0,8.399-1.251,11.95-3.618l1.134-0.756C19.958,2.544,20.102,2.5,20.25,2.5
		c0.123,0,0.246,0.031,0.354,0.089C20.848,2.719,21,2.973,21,3.25v16.5c0,0.277-0.152,0.531-0.396,0.661
		c-0.108,0.058-0.23,0.089-0.354,0.089c-0.148,0-0.292-0.043-0.416-0.126L18.7,19.618c-3.32-2.213-7.168-3.453-11.153-3.6
		c0.18,1.489,0.885,2.906,1.97,3.938c0.3,0.285,0.312,0.761,0.027,1.06C9.402,21.165,9.204,21.25,9,21.25z M7.5,14.512
		c4.283,0.138,8.423,1.461,12,3.836V4.651c-3.576,2.375-7.717,3.698-12,3.837V14.512z M4.5,8.5c-1.654,0-3,1.346-3,3
		c0,1.654,1.346,3,3,3H6v-6H4.5z"/>
	<path d="M23.25,13.75c-0.414,0-0.75-0.336-0.75-0.75v-3c0-0.414,0.336-0.75,0.75-0.75S24,9.586,24,10v3
		C24,13.414,23.664,13.75,23.25,13.75z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/minus.svg ---
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0" y="0"  viewBox="0 0 640 640" >
<path d="M133.33 293.33C170.67 293.33 469.33 293.33 506.67 293.33C521.39 293.33 533.33 305.27 533.33 320C533.33 334.73 521.39 346.67 506.67 346.67C469.33 346.67 170.67 346.67 133.33 346.67C118.61 346.67 106.67 334.73 106.67 320C106.67 305.27 118.61 293.33 133.33 293.33Z">
</path>
</svg>
'''
'''--- src/assets/icons/svg/money-wallet.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>money-wallet</title>
<g>
	<path d="M3,23.25c-1.654,0-3-1.346-3-3V3.75c0-1.654,1.346-3,3-3h15.75C19.991,0.75,21,1.759,21,3v1.629
		c0.885,0.314,1.5,1.162,1.5,2.121v3.129C23.385,10.192,24,11.04,24,12v4.5c0,0.96-0.615,1.808-1.5,2.121V21
		c0,1.241-1.009,2.25-2.25,2.25H3z M3,2.25c-0.827,0-1.5,0.673-1.5,1.5v16.5c0,0.827,0.673,1.5,1.5,1.5h17.25
		c0.414,0,0.75-0.336,0.75-0.75v-2.25h-3c-2.481,0-4.5-2.019-4.5-4.5c0-2.481,2.019-4.5,4.5-4.5h3v-3C21,6.336,20.664,6,20.25,6
		H5.625C5.604,6.001,5.566,6.002,5.527,6.002c-0.896,0-1.727-0.491-2.17-1.28C3.155,4.361,3.283,3.903,3.644,3.701
		c0.112-0.063,0.239-0.096,0.367-0.096c0.271,0,0.522,0.147,0.654,0.383C4.846,4.31,5.172,4.502,5.539,4.502l0.05-0.001L19.5,4.5V3
		c0-0.414-0.336-0.75-0.75-0.75H3z M18,11.25c-1.654,0-3,1.346-3,3s1.346,3,3,3h3.75c0.414,0,0.75-0.336,0.75-0.75V12
		c0-0.414-0.336-0.75-0.75-0.75H18z"/>
	<circle cx="18" cy="14.25" r="1.125"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/monitor.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>monitor</title>
<g>
	<path d="M6,24c-0.414,0-0.75-0.336-0.75-0.75S5.586,22.5,6,22.5h1.615l0.5-3H3.75C1.682,19.5,0,17.818,0,15.75v-12
		C0,1.682,1.682,0,3.75,0h16.5C22.318,0,24,1.682,24,3.75v12c0,2.068-1.682,3.75-3.75,3.75h-4.365l0.5,3H18
		c0.414,0,0.75,0.336,0.75,0.75S18.414,24,18,24H6z M14.865,22.5l-0.5-3H9.635l-0.5,3H14.865z M1.632,16.5
		C1.945,17.379,2.79,18,3.75,18h16.5c0.96,0,1.805-0.621,2.118-1.5H1.632z M22.5,15V3.75c0-1.241-1.009-2.25-2.25-2.25H3.75
		C2.509,1.5,1.5,2.509,1.5,3.75V15H22.5z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/navigation-menu-horizontal.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>navigation-menu-horizontal</title>
<g>
	<path d="M3.375,15.398C1.514,15.398,0,13.884,0,12.023s1.514-3.375,3.375-3.375s3.375,1.514,3.375,3.375S5.236,15.398,3.375,15.398
		z M3.375,10.148c-1.034,0-1.875,0.841-1.875,1.875c0,1.034,0.841,1.875,1.875,1.875s1.875-0.841,1.875-1.875
		C5.25,10.989,4.409,10.148,3.375,10.148z"/>
	<path d="M20.625,15.398c-1.861,0-3.375-1.514-3.375-3.375s1.514-3.375,3.375-3.375S24,10.162,24,12.023
		S22.486,15.398,20.625,15.398z M20.625,10.148c-1.034,0-1.875,0.841-1.875,1.875c0,1.034,0.841,1.875,1.875,1.875
		s1.875-0.841,1.875-1.875C22.5,10.989,21.659,10.148,20.625,10.148z"/>
	<path d="M12,15.398c-1.861,0-3.375-1.514-3.375-3.375S10.139,8.648,12,8.648c1.861,0,3.375,1.514,3.375,3.375
		S13.861,15.398,12,15.398z M12,10.148c-1.034,0-1.875,0.841-1.875,1.875c0,1.034,0.841,1.875,1.875,1.875s1.875-0.841,1.875-1.875
		C13.875,10.989,13.034,10.148,12,10.148z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/navigation-menu-vertical.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>navigation-menu-vertical</title>
<g>
	<path d="M11.987,24.003c-1.861,0-3.375-1.514-3.375-3.375s1.514-3.375,3.375-3.375s3.375,1.514,3.375,3.375
		S13.848,24.003,11.987,24.003z M11.987,18.753c-1.034,0-1.875,0.841-1.875,1.875s0.841,1.875,1.875,1.875
		c1.034,0,1.875-0.841,1.875-1.875S13.021,18.753,11.987,18.753z"/>
	<path d="M11.987,6.753c-1.861,0-3.375-1.514-3.375-3.375s1.514-3.375,3.375-3.375s3.375,1.514,3.375,3.375
		S13.848,6.753,11.987,6.753z M11.987,1.503c-1.034,0-1.875,0.841-1.875,1.875s0.841,1.875,1.875,1.875
		c1.034,0,1.875-0.841,1.875-1.875S13.021,1.503,11.987,1.503z"/>
	<path d="M11.987,15.378c-1.861,0-3.375-1.514-3.375-3.375c0-1.861,1.514-3.375,3.375-3.375s3.375,1.514,3.375,3.375
		C15.362,13.864,13.848,15.378,11.987,15.378z M11.987,10.128c-1.034,0-1.875,0.841-1.875,1.875s0.841,1.875,1.875,1.875
		c1.034,0,1.875-0.841,1.875-1.875S13.021,10.128,11.987,10.128z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/navigation-menu.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>navigation-menu</title>
<g>
	<path d="M2.25,18.753c-0.414,0-0.75-0.336-0.75-0.75s0.336-0.75,0.75-0.75h19.5c0.414,0,0.75,0.336,0.75,0.75
		s-0.336,0.75-0.75,0.75H2.25z"/>
	<path d="M2.25,12.753c-0.414,0-0.75-0.336-0.75-0.75s0.336-0.75,0.75-0.75h19.5c0.414,0,0.75,0.336,0.75,0.75
		s-0.336,0.75-0.75,0.75H2.25z"/>
	<path d="M2.25,6.753c-0.414,0-0.75-0.336-0.75-0.75s0.336-0.75,0.75-0.75h19.5c0.414,0,0.75,0.336,0.75,0.75s-0.336,0.75-0.75,0.75
		H2.25z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/notes-list.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>notes-list</title>
<g>
	<path d="M2.25,21C1.009,21,0,19.991,0,18.75V2.25C0,1.009,1.009,0,2.25,0h16.5C19.991,0,21,1.009,21,2.25v8.379
		c0,0.317-0.066,0.625-0.196,0.916c-0.12,0.263-0.273,0.485-0.463,0.674l-8.122,8.122c-0.189,0.189-0.411,0.343-0.659,0.456
		c-0.004,0.002-0.021,0.01-0.025,0.011C11.254,20.934,10.946,21,10.629,21H2.25z M2.25,1.5C1.836,1.5,1.5,1.836,1.5,2.25v16.5
		c0,0.414,0.336,0.75,0.75,0.75h8.25v-6.75c0-1.241,1.009-2.25,2.25-2.25h6.75V2.25c0-0.414-0.336-0.75-0.75-0.75H2.25z M12.75,12
		C12.336,12,12,12.336,12,12.75v5.689L18.439,12H12.75z"/>
	<path d="M6.75,24C6.336,24,6,23.664,6,23.25s0.336-0.75,0.75-0.75h15c0.414,0,0.75-0.336,0.75-0.75V10.5
		c0-0.414,0.336-0.75,0.75-0.75S24,10.086,24,10.5v11.25c0,1.241-1.009,2.25-2.25,2.25H6.75z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/outbound.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>logout-1</title>
<g>
	<path d="M19.499,16.504c-0.2,0-0.389-0.078-0.53-0.22c-0.292-0.292-0.292-0.768,0-1.061l2.47-2.47H7.499
		c-0.414,0-0.75-0.336-0.75-0.75c0-0.414,0.336-0.75,0.75-0.75h13.939l-2.47-2.47c-0.142-0.141-0.22-0.33-0.22-0.53
		s0.078-0.389,0.22-0.53s0.33-0.22,0.53-0.22s0.389,0.078,0.53,0.22l3.75,3.75c0.035,0.035,0.066,0.073,0.094,0.114
		c0.007,0.01,0.015,0.025,0.022,0.038c0.017,0.028,0.032,0.057,0.045,0.087c0.007,0.016,0.016,0.045,0.021,0.061
		c0.008,0.02,0.017,0.051,0.023,0.084c0.009,0.043,0.015,0.094,0.015,0.146c0,0.05-0.005,0.1-0.015,0.148
		c-0.006,0.03-0.015,0.059-0.025,0.088c-0.004,0.016-0.012,0.038-0.021,0.058c-0.009,0.023-0.025,0.053-0.043,0.083
		c-0.001,0.003-0.01,0.021-0.021,0.037c-0.022,0.032-0.042,0.057-0.064,0.081c-0.001,0.003-0.015,0.02-0.031,0.035l-3.75,3.75
		C19.887,16.426,19.699,16.504,19.499,16.504z"/>
	<path d="M2.093,23.25C0.885,23.189-0.055,22.165,0,20.966L-0.001,3c-0.055-1.172,0.876-2.189,2.076-2.249l12.31-0.001
		c1.228,0.06,2.167,1.085,2.113,2.284L16.499,7.5c0,0.414-0.336,0.75-0.75,0.75s-0.75-0.336-0.75-0.75V3
		c0.018-0.403-0.275-0.732-0.652-0.751L2.112,2.25C1.771,2.268,1.481,2.596,1.498,2.966L1.499,21
		c-0.018,0.403,0.275,0.732,0.651,0.751l12.235-0.001c0.341-0.018,0.632-0.346,0.615-0.716L14.999,16.5
		c0-0.414,0.336-0.75,0.75-0.75s0.75,0.336,0.75,0.75V21c0.054,1.173-0.878,2.189-2.077,2.249L2.112,23.25
		C2.106,23.25,2.099,23.25,2.093,23.25z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/pencil.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>pencil</title>
<g>
	<path d="M0.748,24c-0.198,0-0.391-0.08-0.531-0.22c-0.186-0.186-0.261-0.461-0.196-0.716l1.77-6.905
		c0.006-0.022,0.021-0.063,0.03-0.084c0.001-0.004,0.007-0.02,0.015-0.037c0.041-0.09,0.09-0.163,0.151-0.223L16.513,1.289
		C17.338,0.46,18.438,0.003,19.611,0c0,0,0,0,0,0c1.178,0,2.277,0.454,3.106,1.279l0.029,0.029c0.821,0.841,1.264,1.948,1.251,3.121
		c-0.014,1.173-0.482,2.269-1.32,3.087L8.183,22.01c-0.062,0.062-0.137,0.113-0.231,0.154c-0.048,0.021-0.078,0.033-0.111,0.042
		l-6.908,1.772C0.872,23.993,0.81,24,0.748,24z M1.789,22.209l4.41-1.131l-3.281-3.275L1.789,22.209z M7.657,20.414l13.02-13.02
		L16.603,3.32L3.58,16.344L7.657,20.414z M21.736,6.332c1.031-1.125,1.015-2.872-0.059-3.972l-0.02-0.02
		C21.113,1.799,20.389,1.5,19.62,1.5V1.125L19.619,1.5c-0.734,0.002-1.421,0.271-1.954,0.762L21.736,6.332z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/pending.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>button-refresh-arrows</title>
<g>
	<path d="M4.917,19.499H0.75c-0.414,0-0.75-0.336-0.75-0.75s0.336-0.75,0.75-0.75h2.637c-1.262-1.813-1.924-3.994-1.875-6.22
		C1.573,8.974,2.723,6.36,4.749,4.421c1.964-1.88,4.544-2.916,7.265-2.916c1.388,0,2.743,0.271,4.027,0.804
		c0.185,0.077,0.329,0.221,0.406,0.406c0.076,0.185,0.076,0.389-0.001,0.574c-0.117,0.281-0.389,0.462-0.693,0.462
		c-0.099,0-0.196-0.019-0.288-0.058c-1.1-0.457-2.261-0.689-3.451-0.689c-2.332,0-4.544,0.888-6.228,2.5
		c-1.737,1.663-2.723,3.903-2.775,6.307c-0.04,1.844,0.483,3.64,1.489,5.158v-2.721c0-0.414,0.336-0.75,0.75-0.75S6,13.835,6,14.249
		v4.5c0,0.414-0.336,0.75-0.75,0.75H5.012c-0.016,0.002-0.031,0.003-0.045,0.003C4.955,19.502,4.934,19.5,4.917,19.499z"/>
	<path d="M11.995,22.501c-1.392,0-2.75-0.272-4.038-0.808c-0.185-0.077-0.329-0.221-0.405-0.407
		c-0.076-0.185-0.076-0.389,0.001-0.574c0.117-0.281,0.389-0.462,0.693-0.462c0.099,0,0.195,0.019,0.287,0.057
		c1.105,0.46,2.269,0.694,3.462,0.694c0,0,0,0,0,0c2.336,0,4.55-0.891,6.234-2.508c1.735-1.665,2.718-3.906,2.767-6.31
		c0.038-1.845-0.488-3.64-1.497-5.158v2.724c0,0.414-0.336,0.75-0.75,0.75S18,10.162,18,9.749v-4.5c0-0.414,0.336-0.75,0.75-0.75
		h4.5c0.414,0,0.75,0.336,0.75,0.75s-0.336,0.75-0.75,0.75h-2.635c1.263,1.811,1.927,3.99,1.882,6.215
		c-0.058,2.804-1.204,5.419-3.228,7.362C17.303,21.462,14.72,22.501,11.995,22.501L11.995,22.501z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/plus.svg ---
<svg viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M8 0C8.55228 0 9 0.447715 9 1V7H15C15.5523 7 16 7.44772 16 8C16 8.55228 15.5523 9 15 9H9V15C9 15.5523 8.55228 16 8 16C7.44772 16 7 15.5523 7 15V9H1C0.447715 9 0 8.55228 0 8C0 7.44772 0.447715 7 1 7H7V1C7 0.447715 7.44772 0 8 0Z" fill="black"/>
</svg>

'''
'''--- src/assets/icons/svg/products-give-gift.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>products-give-gift</title>
<g>
	<path d="M0.75,23.98C0.336,23.98,0,23.644,0,23.23v-6c0-0.414,0.336-0.75,0.75-0.75H6c1.8,0,3.324,1.268,3.675,3h3.075
		c2.068,0,3.75,1.682,3.75,3.75c0,0.414-0.336,0.75-0.75,0.75H0.75z M14.871,22.48c-0.313-0.879-1.159-1.5-2.121-1.5H6
		c-0.414,0-0.75-0.336-0.75-0.75S5.586,19.48,6,19.48h2.118C7.805,18.601,6.96,17.98,6,17.98H1.5v4.5H14.871z"/>
	<path d="M11.25,17.98c-0.414,0-0.75-0.336-0.75-0.75s0.336-0.75,0.75-0.75h3v-6H9v3.75c0,0.414-0.336,0.75-0.75,0.75
		S7.5,14.644,7.5,14.23v-3.75c-0.827,0-1.5-0.673-1.5-1.5V6.73c0-0.827,0.673-1.5,1.5-1.5h3.888
		c-0.387-0.24-0.761-0.501-1.117-0.781c-0.024-0.019-0.047-0.04-0.069-0.062C9.39,3.576,8.995,2.841,8.996,2.142
		c0.001-0.528,0.228-1.021,0.676-1.466c0.452-0.449,0.948-0.677,1.472-0.677c0.695,0,1.428,0.395,2.242,1.209
		c0.021,0.02,0.041,0.043,0.06,0.068c0.62,0.79,1.141,1.648,1.555,2.56c0.414-0.911,0.934-1.77,1.554-2.56
		c0.021-0.026,0.039-0.047,0.059-0.066c0.815-0.815,1.549-1.21,2.244-1.21c0.525,0,1.02,0.228,1.472,0.677
		c0.454,0.45,0.675,0.93,0.676,1.466c0.001,0.699-0.395,1.434-1.209,2.248c-0.022,0.022-0.044,0.041-0.066,0.059
		c-0.357,0.28-0.731,0.541-1.118,0.782H22.5c0.827,0,1.5,0.673,1.5,1.5v2.25c0,0.827-0.673,1.5-1.5,1.5v6c0,0.827-0.673,1.5-1.5,1.5
		H11.25z M21,16.48v-6h-5.25v6H21z M22.5,8.98V6.73h-6.75v2.25H22.5z M7.5,8.98h6.75V6.73H7.5V8.98z M17.706,2.237
		c-0.609,0.784-1.107,1.637-1.485,2.545c0.908-0.378,1.761-0.876,2.545-1.485c0.666-0.674,0.738-1.031,0.738-1.153
		c0-0.08-0.027-0.199-0.233-0.404c-0.147-0.146-0.248-0.235-0.405-0.235C18.709,1.506,18.351,1.601,17.706,2.237z M11.233,3.297
		c0.784,0.609,1.637,1.107,2.546,1.485c-0.378-0.908-0.875-1.762-1.485-2.545c-0.644-0.636-1.003-0.731-1.16-0.731
		s-0.258,0.089-0.405,0.235c-0.206,0.205-0.233,0.323-0.233,0.404C10.495,2.267,10.567,2.623,11.233,3.297z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/qr-code-scan.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>qr-code-scan</title>
<g>
	<path d="M5.25,9C4.836,9,4.5,8.664,4.5,8.25v-3c0-0.414,0.336-0.75,0.75-0.75h3C8.664,4.5,9,4.836,9,5.25v3C9,8.664,8.664,9,8.25,9
		H5.25z M7.5,7.5V6H6v1.5H7.5z"/>
	<path d="M5.25,19.5c-0.414,0-0.75-0.336-0.75-0.75v-3C4.5,15.336,4.836,15,5.25,15h3C8.664,15,9,15.336,9,15.75v3
		c0,0.414-0.336,0.75-0.75,0.75H5.25z M7.5,18v-1.5H6V18H7.5z"/>
	<path d="M15.75,9C15.336,9,15,8.664,15,8.25v-3c0-0.414,0.336-0.75,0.75-0.75h3c0.414,0,0.75,0.336,0.75,0.75v3
		C19.5,8.664,19.164,9,18.75,9H15.75z M18,7.5V6h-1.5v1.5H18z"/>
	<path d="M11.25,15c-0.414,0-0.75-0.336-0.75-0.75V13.5H5.25c-0.414,0-0.75-0.336-0.75-0.75S4.836,12,5.25,12h6
		c0.414,0,0.75,0.336,0.75,0.75v1.5C12,14.664,11.664,15,11.25,15z"/>
	<path d="M14.25,19.5c-0.414,0-0.75-0.336-0.75-0.75v-4.5c0-0.414,0.336-0.75,0.75-0.75S15,13.836,15,14.25V18h3v-3h-0.75
		c-0.414,0-0.75-0.336-0.75-0.75s0.336-0.75,0.75-0.75h1.5c0.414,0,0.75,0.336,0.75,0.75v4.5c0,0.414-0.336,0.75-0.75,0.75H14.25z"
		/>
	<path d="M11.25,19.5c-0.414,0-0.75-0.336-0.75-0.75v-1.5c0-0.414,0.336-0.75,0.75-0.75S12,16.836,12,17.25v1.5
		C12,19.164,11.664,19.5,11.25,19.5z"/>
	<path d="M11.25,10.5c-0.414,0-0.75-0.336-0.75-0.75v-4.5c0-0.414,0.336-0.75,0.75-0.75S12,4.836,12,5.25V9h0.75
		c0.414,0,0.75,0.336,0.75,0.75s-0.336,0.75-0.75,0.75H11.25z"/>
	<path d="M15.75,12C15.336,12,15,11.664,15,11.25s0.336-0.75,0.75-0.75h3c0.414,0,0.75,0.336,0.75,0.75S19.164,12,18.75,12H15.75z"
		/>
	<path d="M0.75,6.75C0.336,6.75,0,6.414,0,6V2.25C0,1.009,1.009,0,2.25,0H6c0.414,0,0.75,0.336,0.75,0.75S6.414,1.5,6,1.5H2.25
		C1.836,1.5,1.5,1.836,1.5,2.25V6C1.5,6.414,1.164,6.75,0.75,6.75z"/>
	<path d="M23.25,6.75c-0.414,0-0.75-0.336-0.75-0.75V2.25c0-0.414-0.336-0.75-0.75-0.75H18c-0.414,0-0.75-0.336-0.75-0.75
		S17.586,0,18,0h3.75C22.991,0,24,1.009,24,2.25V6C24,6.414,23.664,6.75,23.25,6.75z"/>
	<path d="M18,24c-0.414,0-0.75-0.336-0.75-0.75S17.586,22.5,18,22.5h3.75c0.414,0,0.75-0.336,0.75-0.75V18
		c0-0.414,0.336-0.75,0.75-0.75S24,17.586,24,18v3.75c0,1.241-1.009,2.25-2.25,2.25H18z"/>
	<path d="M2.25,24C1.009,24,0,22.991,0,21.75V18c0-0.414,0.336-0.75,0.75-0.75S1.5,17.586,1.5,18v3.75c0,0.414,0.336,0.75,0.75,0.75
		H6c0.414,0,0.75,0.336,0.75,0.75S6.414,24,6,24H2.25z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/reinvest.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>reinvest</title>
<g>
	<path d="M0.75,12c-0.229,0-0.443-0.103-0.586-0.281c-0.258-0.323-0.206-0.796,0.117-1.054l6.614-5.292
		c0.396-0.317,0.895-0.491,1.406-0.491c0.473,0,0.925,0.145,1.308,0.418l3.293,2.351c0.129,0.092,0.28,0.141,0.437,0.141
		c0.199,0,0.387-0.078,0.53-0.221l6.07-6.07H15.75C15.336,1.5,15,1.164,15,0.75S15.336,0,15.75,0h6c0.089,0,0.176,0.016,0.261,0.048
		c0.011,0.004,0.022,0.008,0.031,0.012c0.176,0.073,0.325,0.221,0.401,0.405c0.003,0.008,0.007,0.017,0.01,0.026
		C22.484,0.572,22.5,0.661,22.5,0.75v6c0,0.414-0.336,0.75-0.75,0.75S21,7.164,21,6.75V2.561l-6.07,6.07
		c-0.426,0.426-0.991,0.661-1.59,0.661l0,0c-0.471,0-0.923-0.146-1.309-0.421L8.737,6.519C8.61,6.429,8.459,6.381,8.301,6.381
		c-0.171,0-0.337,0.058-0.469,0.163l-6.614,5.292C1.086,11.942,0.92,12,0.75,12z"/>
	<path d="M3,24c-0.827,0-1.5-0.673-1.5-1.5V21C0.673,21,0,20.327,0,19.5V18c0-0.827,0.673-1.5,1.5-1.5V15c0-0.827,0.673-1.5,1.5-1.5
		h7.5c0.827,0,1.5,0.673,1.5,1.5v1.5c0,0.827-0.673,1.5-1.5,1.5v1.5c0.827,0,1.5,0.673,1.5,1.5v1.5c0,0.827-0.673,1.5-1.5,1.5H3z
		 M3,22.5h7.5V21H3V22.5z M1.5,19.5H9V18H1.5V19.5z M3,16.5h7.5V15H3V16.5z"/>
	<path d="M15,24c-0.827,0-1.5-0.673-1.5-1.5V21c-0.827,0-1.5-0.673-1.5-1.5V18c0-0.827,0.673-1.5,1.5-1.5V15
		c0-0.264,0.072-0.522,0.205-0.75c-0.134-0.228-0.205-0.486-0.205-0.75V12c0-0.827,0.673-1.5,1.5-1.5h7.5c0.827,0,1.5,0.673,1.5,1.5
		v1.5c0,0.264-0.072,0.522-0.205,0.75C23.928,14.478,24,14.736,24,15v1.5c0,0.827-0.673,1.5-1.5,1.5v1.5c0.827,0,1.5,0.673,1.5,1.5
		v1.5c0,0.827-0.673,1.5-1.5,1.5H15z M15,22.5h7.5V21H15V22.5z M13.5,19.5H21V18h-7.5V19.5z M15,16.5h7.5V15H15V16.5z M15,13.5h7.5
		V12H15V13.5z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/revote.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>business-contract-approve</title>
<g>
	<path d="M7.501,22.5c-1.241,0-2.25-1.009-2.25-2.25v-6.573l-0.134-0.113c-1.8-1.514-3.661-3.081-3.615-5.006l0-4.188L0.163,2.683
		c-0.257-0.324-0.202-0.797,0.122-1.054C0.417,1.525,0.582,1.467,0.75,1.467c0.23,0,0.445,0.103,0.588,0.284l1.5,1.892
		C2.943,3.775,3.001,3.94,3.001,4.109v4.467c-0.023,0.977,0.957,2.006,2.25,3.132V8.451L4.695,7.882
		C4.406,7.586,4.412,7.11,4.708,6.821c0.141-0.138,0.327-0.213,0.524-0.213c0.204,0,0.394,0.08,0.537,0.226L6.48,7.562
		c0.042,0.035,0.08,0.074,0.113,0.115l0.945,0.968c0.089,0.091,0.208,0.141,0.336,0.141c0.123,0,0.239-0.047,0.327-0.132
		C8.29,8.568,8.34,8.451,8.341,8.326c0.002-0.125-0.046-0.243-0.133-0.333l-2.75-2.806C5.321,5.047,5.245,4.861,5.245,4.663V3.265
		c-0.137-0.754-0.423-1.46-0.851-2.097c-0.23-0.343-0.139-0.81,0.205-1.041C4.723,0.044,4.867,0,5.016,0
		C5.267,0,5.5,0.124,5.64,0.332c0.558,0.832,0.927,1.755,1.095,2.742c0.007,0.043,0.01,0.084,0.01,0.126v1.157l2.537,2.588
		C9.65,7.323,9.848,7.82,9.841,8.346C9.834,8.871,9.623,9.363,9.247,9.73c-0.369,0.36-0.857,0.558-1.373,0.558
		c-0.408,0-0.796-0.122-1.123-0.35V20.25c0,0.414,0.336,0.75,0.75,0.75h7.5c0.414,0,0.75,0.336,0.75,0.75s-0.336,0.75-0.75,0.75
		H7.501z"/>
	<path d="M18.989,23.996c-0.251,0-0.484-0.124-0.623-0.332c-0.558-0.831-0.926-1.752-1.094-2.737
		c-0.007-0.041-0.011-0.083-0.011-0.126v-1.155l-2.54-2.589c-0.759-0.779-0.743-2.028,0.034-2.785
		c0.37-0.361,0.846-0.559,1.339-0.559c0.023,0,0.046,0,0.07,0.001c0.516,0.006,1.008,0.218,1.375,0.594l0.463,0.474v-3.477
		c0-0.291,0.17-0.558,0.434-0.68c0.1-0.046,0.207-0.07,0.316-0.07c0.177,0,0.348,0.063,0.483,0.177
		c1.812,1.531,3.309,2.942,3.267,4.711v4.187l1.338,1.687c0.124,0.157,0.18,0.353,0.157,0.552c-0.023,0.199-0.122,0.377-0.279,0.502
		c-0.132,0.104-0.297,0.162-0.466,0.162l0,0c-0.23,0-0.445-0.103-0.588-0.284l-1.5-1.892c-0.104-0.132-0.162-0.297-0.162-0.466
		v-4.466c0.019-0.802-0.675-1.662-1.5-2.453v3.651c0,0.306-0.183,0.579-0.467,0.695c-0.09,0.037-0.185,0.055-0.282,0.055
		c-0.201,0-0.396-0.082-0.537-0.226l-1.75-1.792c-0.088-0.09-0.205-0.14-0.33-0.142c-0.084,0.002-0.224,0.027-0.332,0.133
		c-0.185,0.18-0.189,0.477-0.009,0.662l2.753,2.806c0.138,0.141,0.215,0.328,0.215,0.525v1.396c0.137,0.753,0.423,1.457,0.851,2.094
		c0.112,0.166,0.152,0.366,0.113,0.563s-0.152,0.366-0.318,0.478C19.283,23.952,19.139,23.996,18.989,23.996z"/>
	<path d="M9.001,18.75c-0.414,0-0.75-0.336-0.75-0.75s0.336-0.75,0.75-0.75h3.978c0.414,0,0.75,0.336,0.75,0.75
		s-0.336,0.75-0.75,0.75H9.001z"/>
	<path d="M9.001,15c-0.414,0-0.75-0.336-0.75-0.75s0.336-0.75,0.75-0.75h1.5c0.414,0,0.75,0.336,0.75,0.75S10.914,15,10.501,15
		H9.001z"/>
	<path d="M15.751,10.5c-2.895,0-5.25-2.355-5.25-5.25S12.856,0,15.751,0c0.414,0,0.75,0.336,0.75,0.75s-0.336,0.75-0.75,0.75
		c-2.068,0-3.75,1.682-3.75,3.75S13.683,9,15.751,9s3.75-1.682,3.75-3.75c0-0.414,0.336-0.75,0.75-0.75s0.75,0.336,0.75,0.75
		C21.001,8.145,18.646,10.5,15.751,10.5z"/>
	<path d="M15.751,6.89c-0.349,0-0.678-0.136-0.926-0.382l-1.293-1.294c-0.292-0.293-0.292-0.768,0-1.061
		c0.142-0.142,0.33-0.219,0.531-0.219c0.201,0,0.389,0.078,0.531,0.22l1.158,1.159l3.97-3.969c0.142-0.142,0.33-0.22,0.53-0.22
		s0.389,0.078,0.53,0.22c0.142,0.142,0.22,0.33,0.22,0.53c0,0.2-0.078,0.389-0.22,0.53l-4.1,4.1
		c-0.246,0.248-0.575,0.385-0.927,0.386c0,0-0.001,0-0.001,0H15.751z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/saturn-icon.svg ---
<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 628.56 842.18">
  <title>saturn-icon</title>
  <path id="Fill-4" d="M301.23,632.33c-9.15,11-18.23,21.81-27.18,32.22,86.39,11.36,176.15-23.29,231.43-98.36s61.69-171,25.14-250.07c-35.05,56-76.25,116.61-122,178.8-31.78,43.17-63.49,83.93-94.33,121.63" style="fill: #00daff"/>
  <g style="mask: url(#mask)">
    <path id="Fill-1" d="M546,94.07c17.31,12.77-4.41,74.66-52.08,160a245.43,245.43,0,0,0-39.37-36.38C345,136.86,190.89,160.51,110.21,270.47s-57.35,264.6,52.11,345.39a244.28,244.28,0,0,0,46.34,26.89c-67,71-119.47,110.22-136.78,97.44C56.71,729,59.75,688.28,95.81,596.56,20,725.15-17.06,820.94,7.57,839.11c37.7,27.83,205.58-136.77,375-367.64S658.68,30.89,621,3.07C596.36-15.11,516.18,48.83,416.33,159.7,487.42,101.77,530.77,82.87,546,94.07Z" style="fill: #00daff"/>
  </g>
</svg>

'''
'''--- src/assets/icons/svg/search.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>search</title>
<g>
	<path d="M23.245,23.996c-0.2,0-0.389-0.078-0.53-0.22L16.2,17.26c-0.761,0.651-1.618,1.182-2.553,1.579
		c-1.229,0.522-2.52,0.787-3.837,0.787c-1.257,0-2.492-0.241-3.673-0.718c-2.431-0.981-4.334-2.849-5.359-5.262
		c-1.025-2.412-1.05-5.08-0.069-7.51S3.558,1.802,5.97,0.777C7.199,0.254,8.489-0.01,9.807-0.01c1.257,0,2.492,0.242,3.673,0.718
		c2.431,0.981,4.334,2.849,5.359,5.262c1.025,2.413,1.05,5.08,0.069,7.51c-0.402,0.996-0.956,1.909-1.649,2.718l6.517,6.518
		c0.292,0.292,0.292,0.768,0,1.061C23.634,23.918,23.445,23.996,23.245,23.996z M9.807,1.49c-1.115,0-2.209,0.224-3.25,0.667
		C4.513,3.026,2.93,4.638,2.099,6.697c-0.831,2.059-0.81,4.318,0.058,6.362c0.869,2.044,2.481,3.627,4.54,4.458
		c1.001,0.404,2.048,0.608,3.112,0.608c1.115,0,2.209-0.224,3.25-0.667c0.974-0.414,1.847-0.998,2.594-1.736
		c0.01-0.014,0.021-0.026,0.032-0.037c0.016-0.016,0.031-0.029,0.045-0.039c0.763-0.771,1.369-1.693,1.786-2.728
		c0.831-2.059,0.81-4.318-0.059-6.362c-0.868-2.044-2.481-3.627-4.54-4.458C11.918,1.695,10.871,1.49,9.807,1.49z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/settings-off.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>settings-off</title>
<g>
	<path d="M6.748,18.75c-3.722,0-6.75-3.028-6.75-6.75s3.028-6.75,6.75-6.75h10.5c3.722,0,6.75,3.028,6.75,6.75
		s-3.028,6.75-6.75,6.75H6.748z M6.748,6.75c-2.895,0-5.25,2.355-5.25,5.25c0,2.895,2.355,5.25,5.25,5.25h10.5
		c2.895,0,5.25-2.355,5.25-5.25c0-2.895-2.355-5.25-5.25-5.25H6.748z"/>
	<path d="M6.748,15.75c-0.414,0-0.75-0.336-0.75-0.75V9c0-0.414,0.336-0.75,0.75-0.75S7.498,8.586,7.498,9v6
		C7.498,15.414,7.162,15.75,6.748,15.75z"/>
	<path d="M9.748,15.75c-0.414,0-0.75-0.336-0.75-0.75V9c0-0.414,0.336-0.75,0.75-0.75s0.75,0.336,0.75,0.75v6
		C10.498,15.414,10.162,15.75,9.748,15.75z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/settings-on.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>settings-on</title>
<g>
	<path d="M6.748,19c-3.722,0-6.75-3.028-6.75-6.75S3.026,5.5,6.748,5.5h10.5c3.722,0,6.75,3.028,6.75,6.75S20.97,19,17.248,19H6.748
		z M6.748,7c-2.895,0-5.25,2.355-5.25,5.25c0,2.895,2.355,5.25,5.25,5.25h10.5c2.895,0,5.25-2.355,5.25-5.25
		c0-2.895-2.355-5.25-5.25-5.25H6.748z"/>
	<path d="M17.248,16c-0.414,0-0.75-0.336-0.75-0.75v-6c0-0.414,0.336-0.75,0.75-0.75s0.75,0.336,0.75,0.75v6
		C17.998,15.664,17.662,16,17.248,16z"/>
	<path d="M14.248,16c-0.414,0-0.75-0.336-0.75-0.75v-6c0-0.414,0.336-0.75,0.75-0.75s0.75,0.336,0.75,0.75v6
		C14.998,15.664,14.662,16,14.248,16z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/settings.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>settings</title>
<g>
	<path d="M8.156,23.988c-0.676,0-1.323-0.25-1.822-0.704c-0.598-0.544-0.92-1.32-0.883-2.128l0.072-1.404
		c0.034-0.665-0.479-1.234-1.144-1.269c-0.021-0.001-0.042-0.002-0.062-0.002c-0.021,0-0.041,0-0.062,0.002l-1.401,0.071
		c-0.047,0.002-0.096,0.004-0.144,0.004c-0.668,0-1.311-0.247-1.809-0.696c-0.537-0.484-0.854-1.148-0.892-1.871
		c-0.043-0.817,0.281-1.6,0.887-2.149l1.042-0.94c0.239-0.216,0.38-0.513,0.397-0.836c0.016-0.323-0.094-0.633-0.31-0.873
		c-0.027-0.03-0.056-0.059-0.087-0.087L0.896,10.16C0.36,9.674,0.046,9.009,0.011,8.286C-0.025,7.564,0.224,6.871,0.71,6.335
		C1.222,5.77,1.952,5.446,2.712,5.446c0.044,0,0.089,0.001,0.133,0.003l1.402,0.071C4.268,5.522,4.31,5.522,4.31,5.522
		c0.644,0,1.174-0.503,1.208-1.144c0.002-0.042,0.002-0.085,0-0.127L5.451,2.845C5.381,1.352,6.538,0.081,8.03,0.011
		c0.043-0.002,0.086-0.003,0.129-0.003c0.76,0,1.489,0.323,2.001,0.886l0.941,1.039c0.217,0.241,0.513,0.382,0.835,0.399
		c0.022,0.001,0.044,0.002,0.066,0.002c0.301,0,0.579-0.107,0.805-0.31c0.031-0.028,0.06-0.057,0.087-0.088l0.95-1.042
		c0.483-0.535,1.148-0.85,1.871-0.887c0.046-0.002,0.091-0.003,0.136-0.003c0.673,0,1.319,0.248,1.818,0.699
		c0.607,0.548,0.931,1.331,0.889,2.148l-0.071,1.4c-0.033,0.665,0.481,1.233,1.146,1.267c0.021,0.001,0.041,0.002,0.061,0.002
		c0.019,0,0.038,0,0.057-0.001l1.4-0.071c0.047-0.002,0.092-0.003,0.138-0.003c0.672,0,1.316,0.249,1.815,0.702
		c0.536,0.486,0.851,1.152,0.887,1.874c0.04,0.815-0.284,1.596-0.889,2.143l-1.042,0.94c-0.239,0.216-0.38,0.513-0.396,0.836
		c-0.017,0.323,0.094,0.633,0.31,0.872c0.028,0.031,0.056,0.06,0.086,0.086l1.042,0.941c0.537,0.485,0.853,1.15,0.89,1.873
		c0.037,0.723-0.21,1.417-0.695,1.953c-0.513,0.567-1.247,0.892-2.015,0.892c0,0,0,0,0,0c-0.043,0-0.087-0.001-0.131-0.003
		l-1.402-0.071c-0.022-0.001-0.044-0.002-0.066-0.002c-0.302,0-0.58,0.108-0.806,0.311c-0.24,0.216-0.381,0.512-0.397,0.835
		c-0.002,0.041-0.002,0.083,0,0.125l0.071,1.4c0.032,0.725-0.219,1.418-0.708,1.953c-0.489,0.535-1.156,0.847-1.878,0.879
		c-0.043,0.002-0.088,0.003-0.133,0.003c-0.75,0-1.474-0.321-1.986-0.88l-0.944-1.044c-0.229-0.253-0.556-0.398-0.899-0.398
		c-0.3,0-0.587,0.11-0.809,0.311c-0.03,0.027-0.06,0.056-0.087,0.087l-0.946,1.042C9.649,23.666,8.918,23.988,8.156,23.988z
		 M4.317,16.982c0.046,0,0.092,0.001,0.138,0.004c1.492,0.077,2.643,1.353,2.566,2.844l-0.072,1.4
		c-0.016,0.357,0.127,0.703,0.394,0.946c0.226,0.206,0.507,0.314,0.812,0.314c0.02,0,0.039,0,0.059-0.001
		c0.322-0.015,0.62-0.155,0.837-0.394l0.944-1.04c0.06-0.067,0.125-0.132,0.193-0.194c0.499-0.45,1.143-0.698,1.815-0.698
		c0.766,0,1.499,0.325,2.012,0.892l0.941,1.041c0.226,0.247,0.552,0.389,0.896,0.389l0.049-0.001
		c0.664-0.03,1.182-0.596,1.152-1.262l-0.071-1.395c-0.005-0.092-0.005-0.185,0-0.278c0.037-0.722,0.353-1.387,0.89-1.871
		c0.499-0.45,1.141-0.698,1.809-0.698c0.048,0,0.096,0.001,0.145,0.004l1.399,0.071c0.024,0.001,0.047,0.002,0.069,0.002
		c0.336,0,0.66-0.145,0.889-0.399c0.217-0.24,0.327-0.55,0.311-0.872c-0.016-0.323-0.157-0.619-0.397-0.836l-1.042-0.94
		c-0.068-0.061-0.133-0.126-0.195-0.195c-1.001-1.108-0.914-2.825,0.195-3.827l1.042-0.94c0.27-0.244,0.414-0.592,0.396-0.956
		c-0.016-0.323-0.156-0.62-0.396-0.837c-0.223-0.202-0.51-0.313-0.809-0.313c-0.021,0-0.041,0.001-0.062,0.002l-1.399,0.071
		c-0.044,0.002-0.089,0.003-0.133,0.003c-0.046,0-0.092-0.001-0.137-0.004c-1.491-0.075-2.643-1.349-2.568-2.84l0.071-1.401
		c0.019-0.365-0.126-0.714-0.397-0.958c-0.226-0.205-0.503-0.312-0.802-0.312c-0.022,0-0.045,0.001-0.068,0.002
		c-0.324,0.016-0.621,0.157-0.837,0.397l-0.948,1.04c-0.059,0.066-0.126,0.133-0.196,0.196c-0.498,0.449-1.142,0.696-1.814,0.696
		c-0.046,0-0.092-0.001-0.138-0.003c-0.723-0.038-1.387-0.354-1.871-0.891L9.05,1.902c-0.228-0.25-0.554-0.394-0.894-0.394
		c-0.019,0-0.038,0-0.057,0.001C7.434,1.54,6.918,2.108,6.949,2.774l0.067,1.4c0.005,0.091,0.005,0.187,0,0.283
		C6.94,5.895,5.752,7.022,4.311,7.022c-0.047,0-0.094-0.001-0.141-0.004L2.771,6.948C2.753,6.947,2.733,6.946,2.714,6.946
		c-0.339,0-0.665,0.145-0.893,0.396c-0.217,0.239-0.328,0.548-0.312,0.87c0.016,0.322,0.156,0.619,0.395,0.836l1.041,0.945
		c0.067,0.061,0.132,0.125,0.193,0.194c1.001,1.109,0.914,2.826-0.195,3.827l-1.041,0.94c-0.27,0.244-0.414,0.594-0.395,0.958
		c0.017,0.322,0.158,0.619,0.398,0.835c0.222,0.2,0.509,0.31,0.807,0.31c0.021,0,0.043,0,0.064-0.002l1.401-0.071
		C4.224,16.983,4.27,16.982,4.317,16.982z"/>
	<path d="M12,17.25c-2.895,0-5.25-2.355-5.25-5.25S9.105,6.75,12,6.75s5.25,2.355,5.25,5.25S14.895,17.25,12,17.25z M12,8.25
		c-2.068,0-3.75,1.682-3.75,3.75s1.682,3.75,3.75,3.75s3.75-1.682,3.75-3.75S14.068,8.25,12,8.25z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/signed-icon.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>content-write</title>
<g>
	<path d="M1.824,24c-1.008,0-1.827-0.819-1.828-1.825V1.826C-0.003,0.819,0.817,0,1.824,0h15.095c0.491,0,0.947,0.188,1.291,0.529
		c0.347,0.344,0.539,0.802,0.541,1.289v5.388c0,0.414-0.336,0.75-0.75,0.75s-0.75-0.336-0.75-0.75V1.826
		c0-0.089-0.034-0.169-0.097-0.232C17.091,1.533,17.011,1.5,16.923,1.5H1.824c-0.089,0-0.169,0.033-0.232,0.096
		C1.53,1.658,1.496,1.738,1.496,1.827v20.347c0,0.179,0.147,0.326,0.327,0.326h11.861c0.414,0,0.75,0.336,0.75,0.75
		S14.098,24,13.684,24H1.824z"/>
	<path d="M7.204,7.125c-0.414,0-0.75-0.336-0.75-0.75s0.336-0.75,0.75-0.75h6.456c0.414,0,0.75,0.336,0.75,0.75
		s-0.336,0.75-0.75,0.75H7.204z"/>
	<circle cx="3.805" cy="6.375" r="1.125"/>
	<circle cx="3.805" cy="10.236" r="1.125"/>
	<path d="M17.251,24c-0.29,0-0.557-0.169-0.679-0.432l-1.555-3.318H12.75c-0.804,0-1.534-0.429-1.933-1.103l-1.233,0.762
		c-0.1,0.062-0.214,0.099-0.331,0.109l-3.599,0.311c-0.02,0.002-0.043,0.003-0.065,0.003c-0.259,0-0.504-0.137-0.64-0.358
		c-0.149-0.244-0.148-0.546,0.003-0.789l1.911-3.063c0.061-0.098,0.145-0.182,0.244-0.242l1.121-0.687l0.229-1.608
		c0.128-0.902,0.627-1.724,1.367-2.255l1.846-1.319c0.482-0.344,1.049-0.526,1.639-0.526c0.435,0,0.871,0.103,1.262,0.298
		l1.182,0.591c0.059,0.029,0.118,0.061,0.18,0.096l1.266-0.776c0.371-0.228,0.798-0.348,1.232-0.348c0.832,0,1.586,0.422,2.02,1.128
		c0.33,0.538,0.43,1.173,0.283,1.787c-0.147,0.614-0.525,1.134-1.064,1.464l-0.741,0.454l4.953,7.922
		c0.106,0.17,0.14,0.371,0.095,0.566c-0.045,0.195-0.164,0.361-0.333,0.467c-0.118,0.074-0.256,0.114-0.397,0.114
		c-0.26,0-0.498-0.132-0.636-0.353l-4.96-7.933l-1.283,0.786H16.5c0.414,0,0.75,0.336,0.75,0.75s-0.336,0.75-0.75,0.75h-3.75
		c-0.414,0-0.75,0.336-0.75,0.75s0.336,0.75,0.75,0.75h2.742c0.29,0,0.556,0.169,0.679,0.431l1.758,3.75
		c0.176,0.375,0.014,0.822-0.361,0.998C17.469,23.976,17.361,24,17.251,24z M7.02,18.706l1.927-0.167l1.6-0.989
		c0.21-1.039,1.127-1.801,2.204-1.801h0.746l5.391-3.303c0.196-0.12,0.334-0.31,0.388-0.535s0.018-0.457-0.103-0.653
		c-0.158-0.258-0.434-0.412-0.739-0.412c-0.158,0-0.314,0.044-0.45,0.127l-9.94,6.092L7.02,18.706z M13.31,10.985
		c-0.276,0-0.541,0.085-0.767,0.246l-1.845,1.318c-0.409,0.293-0.684,0.748-0.756,1.248l-0.054,0.378l4.543-2.785l-0.531-0.266
		C13.718,11.033,13.514,10.985,13.31,10.985z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/single-man-hierachy.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Regular" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>single-man-hierachy</title>
<g>
	<path d="M5.25,7.5C3.182,7.5,1.5,5.818,1.5,3.75S3.182,0,5.25,0S9,1.682,9,3.75S7.318,7.5,5.25,7.5z M5.25,1.5
		C4.009,1.5,3,2.509,3,3.75S4.009,6,5.25,6S7.5,4.991,7.5,3.75S6.491,1.5,5.25,1.5z"/>
	<path d="M3,24c-0.387,0-0.708-0.29-0.746-0.675L1.571,16.5H0.75C0.336,16.5,0,16.164,0,15.75v-3C0,9.855,2.355,7.5,5.25,7.5
		s5.25,2.355,5.25,5.25v3c0,0.414-0.336,0.75-0.75,0.75H8.929l-0.682,6.825C8.208,23.71,7.887,24,7.5,24H3z M6.821,22.5l0.682-6.825
		C7.542,15.29,7.863,15,8.25,15H9v-2.25c0-1.781-1.288-3.32-3-3.672v5.172C6,14.664,5.664,15,5.25,15S4.5,14.664,4.5,14.25V9.078
		c-1.712,0.352-3,1.892-3,3.672V15h0.75c0.387,0,0.708,0.29,0.746,0.675L3.679,22.5H6.821z"/>
	<path d="M19.5,24c-0.827,0-1.5-0.673-1.5-1.5V21h-0.75C16.009,21,15,19.991,15,18.75V12h-2.25C12.336,12,12,11.664,12,11.25
		s0.336-0.75,0.75-0.75H15V3.75c0-1.241,1.009-2.25,2.25-2.25H18C18,0.673,18.673,0,19.5,0h3C23.327,0,24,0.673,24,1.5v3
		C24,5.327,23.327,6,22.5,6h-3C18.673,6,18,5.327,18,4.5V3h-0.75c-0.414,0-0.75,0.336-0.75,0.75v6.75H18C18,9.673,18.673,9,19.5,9h3
		c0.827,0,1.5,0.673,1.5,1.5v3c0,0.827-0.673,1.5-1.5,1.5h-3c-0.827,0-1.5-0.673-1.5-1.5V12h-1.5v6.75c0,0.414,0.336,0.75,0.75,0.75
		H18c0-0.827,0.673-1.5,1.5-1.5h3c0.827,0,1.5,0.673,1.5,1.5v3c0,0.827-0.673,1.5-1.5,1.5H19.5z M19.5,22.5h3v-3h-3V22.5z
		 M19.5,13.5h3v-3h-3V13.5z M19.5,4.5h3v-3h-3V4.5z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/single-neutral-actions-text.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Regular" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>single-neutral-actions-text</title>
<g>
	<path d="M12.75,24c-1.241,0-2.25-1.009-2.25-2.25v-9c0-1.241,1.009-2.25,2.25-2.25h9c1.241,0,2.25,1.009,2.25,2.25v9
		c0,1.241-1.009,2.25-2.25,2.25H12.75z M12.75,12C12.336,12,12,12.336,12,12.75v9c0,0.414,0.336,0.75,0.75,0.75h9
		c0.414,0,0.75-0.336,0.75-0.75v-9c0-0.414-0.336-0.75-0.75-0.75H12.75z"/>
	<path d="M14.25,15c-0.414,0-0.75-0.336-0.75-0.75s0.336-0.75,0.75-0.75h6c0.414,0,0.75,0.336,0.75,0.75S20.664,15,20.25,15H14.25z"
		/>
	<path d="M14.25,18c-0.414,0-0.75-0.336-0.75-0.75s0.336-0.75,0.75-0.75h6c0.414,0,0.75,0.336,0.75,0.75S20.664,18,20.25,18H14.25z"
		/>
	<path d="M14.25,21c-0.414,0-0.75-0.336-0.75-0.75s0.336-0.75,0.75-0.75h2.25c0.414,0,0.75,0.336,0.75,0.75S16.914,21,16.5,21H14.25
		z"/>
	<path d="M6,7.5c-2.068,0-3.75-1.682-3.75-3.75S3.932,0,6,0s3.75,1.682,3.75,3.75S8.068,7.5,6,7.5z M6,1.5
		c-1.241,0-2.25,1.009-2.25,2.25S4.759,6,6,6s2.25-1.009,2.25-2.25S7.241,1.5,6,1.5z"/>
	<path d="M3.75,24c-0.387,0-0.708-0.29-0.746-0.675L2.321,16.5H0.75C0.336,16.5,0,16.164,0,15.75V13.5c0-1.473,0.54-2.891,1.52-3.99
		C2.586,8.313,4.054,7.603,5.654,7.51C5.773,7.503,5.891,7.5,6.009,7.5c1.467,0,2.882,0.54,3.982,1.52
		c0.309,0.275,0.336,0.75,0.061,1.059c-0.142,0.16-0.346,0.251-0.56,0.251l0,0c-0.184,0-0.361-0.068-0.499-0.19
		C8.168,9.405,7.106,9,6.003,9C5.916,9,5.828,9.003,5.74,9.008c-1.2,0.069-2.301,0.602-3.1,1.499C1.905,11.332,1.5,12.395,1.5,13.5
		V15H3c0.387,0,0.708,0.29,0.746,0.675L4.429,22.5h3.142l0.191-1.91c0.038-0.385,0.358-0.676,0.743-0.676
		c0.027,0,0.054,0.001,0.082,0.004c0.408,0.041,0.709,0.409,0.668,0.82l-0.258,2.585C8.958,23.71,8.637,24,8.25,24H3.75z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/synchronize.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>synchronize-arrows-square-1</title>
<g>
	<path d="M7.501,21.25c-2.068,0-3.75-1.682-3.75-3.75v-4.942l-2.47,2.47c-0.142,0.142-0.33,0.22-0.53,0.22s-0.389-0.078-0.53-0.22
		c-0.292-0.292-0.292-0.768,0-1.061l3.75-3.75c0.016-0.016,0.036-0.032,0.057-0.047c0.058-0.048,0.119-0.085,0.183-0.111
		c0.009-0.004,0.019-0.008,0.029-0.011C4.325,10.016,4.412,10,4.501,10s0.176,0.016,0.26,0.047c0.008,0.002,0.015,0.005,0.021,0.008
		c0.072,0.03,0.135,0.068,0.192,0.115c0.021,0.014,0.041,0.031,0.056,0.046l3.75,3.75c0.292,0.292,0.292,0.768,0,1.061
		c-0.142,0.142-0.33,0.22-0.53,0.22s-0.389-0.078-0.53-0.22l-2.47-2.47V17.5c0,1.241,1.009,2.25,2.25,2.25h8.25
		c0.414,0,0.75,0.336,0.75,0.75s-0.336,0.75-0.75,0.75H7.501z"/>
	<path d="M19.501,14.5c-0.212,0-0.416-0.092-0.559-0.252l-3.721-3.721c-0.142-0.142-0.22-0.33-0.22-0.53
		c0-0.2,0.078-0.389,0.22-0.53s0.33-0.22,0.53-0.22s0.389,0.078,0.53,0.22l2.47,2.47V7c0-1.241-1.009-2.25-2.25-2.25h-8.25
		c-0.414,0-0.75-0.336-0.75-0.75s0.336-0.75,0.75-0.75h8.25c2.068,0,3.75,1.682,3.75,3.75v4.936l2.47-2.47
		c0.142-0.142,0.33-0.22,0.53-0.22s0.389,0.078,0.53,0.22c0.142,0.141,0.22,0.33,0.22,0.53c0,0.2-0.078,0.389-0.22,0.53
		l-3.736,3.736C19.917,14.408,19.713,14.5,19.501,14.5z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/touch-id.svg ---
<svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M24.6531 9.95313C24.1828 8.61875 23.543 7.49766 22.8484 6.80859C22.7062 6.66641 22.5203 6.58984 22.318 6.58984C22.1156 6.58984 21.9297 6.66641 21.7875 6.80859C21.4977 7.09844 21.4977 7.57422 21.7875 7.86953C22.3289 8.41094 22.8594 9.36797 23.2531 10.5C23.6523 11.6594 23.8766 12.8844 23.8766 13.9508C23.8766 14.1148 23.8711 14.3664 23.8656 14.5031C23.8547 14.7055 23.9258 14.8914 24.0625 15.0391C24.1992 15.1867 24.3797 15.2742 24.582 15.2797H24.6148C25.0141 15.2797 25.3422 14.968 25.3641 14.5633C25.3695 14.3938 25.375 14.1203 25.375 13.9453C25.375 12.6984 25.118 11.2766 24.6531 9.95313ZM7.82031 6.04844C7.97891 6.04844 8.12656 5.99922 8.25781 5.90625C9.89297 4.73594 11.8781 4.11797 14 4.11797C16.2312 4.11797 18.3805 4.92734 20.218 6.45859C20.3547 6.56797 20.5242 6.63359 20.6992 6.63359C20.9234 6.63359 21.1313 6.53516 21.2734 6.36563C21.5359 6.04844 21.4922 5.57813 21.1805 5.31016C19.0641 3.55469 16.5867 2.625 14 2.625C11.5609 2.625 9.275 3.34141 7.38281 4.69219C7.21875 4.80703 7.11484 4.98203 7.08203 5.17891C7.04922 5.37578 7.09297 5.57266 7.21328 5.73672C7.35 5.93359 7.57969 6.04844 7.82031 6.04844ZM4.12344 13.9453C4.12344 11.5555 4.9875 9.25313 6.55703 7.45391C6.68828 7.30078 6.75391 7.10938 6.7375 6.9125C6.72656 6.71563 6.63359 6.52969 6.48047 6.39844C6.34375 6.27813 6.16875 6.2125 5.98828 6.2125C5.76953 6.2125 5.56719 6.30547 5.425 6.46953C3.62031 8.54219 2.625 11.1945 2.625 13.9453C2.625 15.7391 2.94766 17.1609 3.46719 18.8781C3.56563 19.1953 3.85 19.4086 4.18359 19.4086C4.25469 19.4086 4.33125 19.3977 4.40234 19.3758C4.59375 19.3156 4.75234 19.1898 4.84531 19.0148C4.93828 18.8398 4.96016 18.6375 4.9 18.4461C4.41875 16.8602 4.12344 15.5586 4.12344 13.9453Z" fill="#9A99A2"/>
<path d="M19.4522 7.09834C17.9593 5.80225 16.1327 5.11865 14.164 5.11865C11.5226 5.11865 9.16553 6.09209 7.51943 7.8585C5.9499 9.54287 5.17881 11.7796 5.34834 14.153C5.47412 15.9413 5.67646 16.9257 5.85693 17.7952C6.09209 18.9491 6.27803 19.8624 6.13584 22.3944C6.11396 22.7608 6.33818 23.089 6.68271 23.1929C6.74834 23.2147 6.80849 23.2202 6.87959 23.2202C7.27334 23.2202 7.60146 22.9085 7.62881 22.5147C7.7874 19.7585 7.58506 18.7577 7.32803 17.489C7.15849 16.6632 6.96709 15.728 6.84678 14.0382C6.70459 12.0858 7.33896 10.2483 8.61865 8.87021C9.9749 7.41006 11.9491 6.60615 14.164 6.60615C15.7663 6.60615 17.2538 7.16397 18.4679 8.21943C19.6874 9.2749 20.6116 10.8116 21.1476 12.6546C21.771 14.8038 21.9405 17.5382 21.6452 20.5569C21.6069 20.9671 21.9077 21.3335 22.3179 21.3772C22.3397 21.3772 22.3671 21.3827 22.389 21.3827C22.7772 21.3827 23.0944 21.0929 23.1327 20.7046C23.4499 17.4944 23.2585 14.5687 22.5804 12.239C21.9733 10.128 20.8905 8.34522 19.4522 7.09834Z" fill="#9A99A2"/>
<path d="M20.4257 14.6287C20.1031 12.5779 19.3374 10.8662 18.2054 9.67402C17.0679 8.4709 15.6132 7.83105 13.9999 7.83105C12.9609 7.83105 11.9382 8.05527 11.0413 8.4873C10.839 8.58574 10.6913 8.76621 10.6367 8.98496C10.582 9.20918 10.6312 9.43887 10.7734 9.61934C10.9156 9.80527 11.1288 9.90918 11.364 9.90918C11.4788 9.90918 11.5828 9.88184 11.6867 9.83809C12.3757 9.50996 13.1742 9.33496 13.9945 9.33496C15.2195 9.33496 16.3187 9.83809 17.1827 10.7896C18.0632 11.7631 18.6757 13.174 18.9382 14.8693C19.1952 16.4881 19.321 17.7951 19.3265 18.867C19.3374 21.0381 19.064 22.8428 19.064 22.8646C19.0312 23.0615 19.0804 23.2584 19.2007 23.4225C19.321 23.5865 19.4906 23.6904 19.6874 23.7232C19.7257 23.7287 19.764 23.7342 19.8023 23.7342C20.1742 23.7342 20.4859 23.4662 20.5406 23.0998C20.5515 23.0232 20.8359 21.1748 20.8249 18.8615C20.8249 17.6967 20.6937 16.3186 20.4257 14.6287ZM10.1335 11.1287C10.3523 10.8115 10.2921 10.385 9.99682 10.1334C9.8601 10.0186 9.69057 9.9584 9.51557 9.9584C9.26948 9.9584 9.03979 10.0787 8.8976 10.2811C8.0937 11.4568 7.82026 12.9662 8.1101 14.6451C8.59682 17.4506 9.03432 20.7209 8.62416 23.6686C8.59682 23.8764 8.65151 24.0896 8.78276 24.2537C8.90854 24.4178 9.09448 24.5162 9.29682 24.5326C9.3187 24.5326 9.34057 24.5381 9.36245 24.5381C9.73432 24.5381 10.0515 24.2592 10.1007 23.8928C10.5492 20.7373 10.0898 17.3193 9.58119 14.3881C9.35698 13.0865 9.54291 11.9873 10.1335 11.1287ZM17.3632 21.2186H17.3359C16.9202 21.235 16.5976 21.5795 16.614 21.9951C16.614 22.0061 16.6468 22.974 16.4718 23.8928C16.4007 24.2701 16.614 24.642 16.9695 24.7568C17.046 24.7787 17.1226 24.7951 17.2046 24.7951C17.5656 24.7951 17.8718 24.5381 17.9374 24.1881C18.1452 23.0889 18.107 21.9896 18.107 21.9404C18.096 21.5303 17.7679 21.2186 17.3632 21.2186Z" fill="#9A99A2"/>
<path d="M16.1109 11.2604C15.4984 10.6861 14.7328 10.3799 13.8961 10.3799C12.8132 10.3799 11.889 10.7791 11.2929 11.501C10.839 12.0533 10.3632 13.076 10.6968 14.7822C11.3695 18.2002 11.5172 21.4322 11.1398 24.3854C11.0851 24.7955 11.3804 25.1729 11.7851 25.2221C11.8179 25.2275 11.8507 25.2275 11.8781 25.2275C12.2554 25.2275 12.5726 24.9486 12.6218 24.5713C13.0211 21.4541 12.8679 18.0635 12.1679 14.4869C11.9929 13.59 12.0914 12.8846 12.4468 12.4471C12.7531 12.0752 13.2671 11.8729 13.8906 11.8729C15.2578 11.8729 15.8101 13.3822 15.9851 14.0275C16.3625 15.433 16.5812 17.4729 16.614 19.9174C16.6195 20.3221 16.9531 20.6557 17.3632 20.6557H17.3742C17.571 20.6502 17.757 20.5736 17.8992 20.4314C18.0359 20.2893 18.1125 20.0979 18.1125 19.901C18.0742 17.3307 17.839 15.1705 17.4289 13.6447C17.1609 12.633 16.7125 11.8291 16.1109 11.2604Z" fill="#9A99A2"/>
<path d="M14.5031 13.4478C14.3883 13.1688 14.1148 12.9829 13.8086 12.9829C13.7102 12.9829 13.6117 13.0048 13.5242 13.0376C13.1414 13.1962 12.9609 13.6337 13.1195 14.0165C13.4805 14.8915 13.7648 16.5431 13.8906 18.5446C14.0219 20.5626 13.9836 22.7501 13.7812 24.5384C13.7594 24.7353 13.8141 24.9321 13.9398 25.0907C14.0656 25.2493 14.2406 25.3423 14.443 25.3642C14.4703 25.3696 14.4977 25.3696 14.525 25.3696C14.9078 25.3696 15.225 25.0853 15.2687 24.7024C15.482 22.761 15.5203 20.5134 15.3781 18.3696C15.2414 16.2204 14.9297 14.4704 14.5031 13.4478Z" fill="#9A99A2"/>
</svg>

'''
'''--- src/assets/icons/svg/unlock.svg ---
<svg viewBox="0 0 33 33" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M8.125 1.75C4.60418 1.75 1.75 4.60418 1.75 8.125V13.2143C1.75 13.6285 1.41421 13.9643 1 13.9643C0.585786 13.9643 0.25 13.6285 0.25 13.2143V8.125C0.25 3.77576 3.77576 0.25 8.125 0.25C12.4742 0.25 16 3.77576 16 8.125V12.4643H30.0357C31.2784 12.4643 32.2857 13.4716 32.2857 14.7143V30.0357C32.2857 31.2784 31.2784 32.2857 30.0357 32.2857H10.6429C9.40021 32.2857 8.39286 31.2784 8.39286 30.0357V14.7143C8.39286 13.4716 9.40021 12.4643 10.6429 12.4643H14.5V8.125C14.5 4.60418 11.6458 1.75 8.125 1.75ZM10.6429 13.9643C10.2286 13.9643 9.89286 14.3001 9.89286 14.7143V30.0357C9.89286 30.4499 10.2286 30.7857 10.6429 30.7857H30.0357C30.4499 30.7857 30.7857 30.4499 30.7857 30.0357V14.7143C30.7857 14.3001 30.4499 13.9643 30.0357 13.9643H10.6429ZM16.5357 22.375C16.5357 20.2743 18.2386 18.5714 20.3393 18.5714C22.4399 18.5714 24.1429 20.2743 24.1429 22.375C24.1429 24.4757 22.4399 26.1786 20.3393 26.1786C18.2386 26.1786 16.5357 24.4757 16.5357 22.375ZM20.3393 20.0714C19.0671 20.0714 18.0357 21.1028 18.0357 22.375C18.0357 23.6472 19.0671 24.6786 20.3393 24.6786C21.6115 24.6786 22.6429 23.6472 22.6429 22.375C22.6429 21.1028 21.6115 20.0714 20.3393 20.0714Z" fill="black"/>
</svg>

'''
'''--- src/assets/icons/svg/unvote.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>business-contract-break</title>
<g>
	<path d="M20.25,22.16c-0.414,0-0.75-0.336-0.75-0.75v-2.13c0-0.152,0.045-0.298,0.131-0.423l2.654-3.882
		c0.504-0.896,0.023-2.471-0.544-3.997l-1.651,2.98l0.484,1.751c0.11,0.399-0.125,0.812-0.523,0.923
		c-0.067,0.018-0.133,0.027-0.2,0.027c-0.336,0-0.634-0.226-0.723-0.55l-0.95-3.441c-0.056-0.214-0.242-0.36-0.455-0.36
		c-0.039,0-0.079,0.005-0.118,0.015c-0.122,0.032-0.223,0.108-0.286,0.216c-0.063,0.108-0.081,0.234-0.049,0.355l1.054,3.805
		c0.053,0.19,0.029,0.39-0.066,0.563l-0.674,1.217c-0.293,0.949-0.438,1.933-0.432,2.925c0.001,0.2-0.076,0.389-0.216,0.532
		c-0.141,0.143-0.329,0.222-0.529,0.223c-0.416,0-0.752-0.334-0.755-0.745c-0.007-1.175,0.169-2.338,0.524-3.458
		c0.015-0.048,0.035-0.093,0.058-0.136l0.563-1.016l-0.977-3.527c-0.134-0.514-0.061-1.043,0.205-1.496
		c0.266-0.453,0.692-0.776,1.201-0.909c0.164-0.043,0.332-0.064,0.499-0.064c0.347,0,0.69,0.094,0.993,0.271
		c0.345,0.202,0.615,0.498,0.782,0.851l2.613-4.714c0.056-0.102,0.022-0.238-0.076-0.302L17.25,3.725V6.5
		c0,0.414-0.336,0.75-0.75,0.75h-1.586L13.5,10.308v4.442c0,0.326-0.208,0.612-0.517,0.713c-0.076,0.025-0.154,0.037-0.233,0.037
		c-0.238,0-0.465-0.115-0.605-0.307l-3-4.1C9.05,10.963,8.999,10.81,8.999,10.65v-3.4h-1.5c-0.414,0-0.75-0.336-0.75-0.75V3.725
		l-4.78,3.185C1.865,6.979,1.831,7.112,1.889,7.217L4.5,11.929c0.319-0.673,1.007-1.121,1.778-1.121
		c0.167,0,0.334,0.021,0.496,0.064c0.509,0.133,0.935,0.456,1.201,0.909c0.266,0.454,0.339,0.984,0.206,1.492
		c0,0-0.978,3.531-0.978,3.531l0.562,1.015c0.024,0.043,0.044,0.09,0.059,0.137c0.355,1.119,0.531,2.283,0.524,3.458
		c-0.003,0.411-0.339,0.745-0.75,0.745c-0.205-0.001-0.393-0.08-0.534-0.223s-0.218-0.332-0.216-0.532
		c0.006-0.993-0.139-1.978-0.432-2.926l-0.674-1.217c-0.096-0.173-0.12-0.373-0.067-0.563l1.05-3.79
		c0.035-0.133,0.02-0.259-0.045-0.37c-0.063-0.108-0.165-0.185-0.286-0.216c-0.038-0.01-0.078-0.015-0.117-0.015
		c-0.214,0-0.401,0.144-0.454,0.35l-0.953,3.451c-0.089,0.324-0.387,0.55-0.724,0.55c-0.066,0-0.132-0.009-0.196-0.026
		c-0.401-0.111-0.636-0.525-0.526-0.923l0.484-1.751l-1.652-2.981c-0.567,1.526-1.048,3.101-0.544,3.998l2.655,3.882
		C4.455,18.982,4.5,19.129,4.5,19.281v2.13c0,0.414-0.336,0.75-0.75,0.75S3,21.824,3,21.41v-1.898l-2.541-3.715
		c-0.012-0.018-0.021-0.031-0.029-0.046c-0.973-1.662-0.104-3.933,0.737-6.129l0.138-0.365L0.576,7.943
		C0.141,7.155,0.389,6.152,1.143,5.659l5.183-3.454c0.208-0.135,0.443-0.205,0.682-0.205c0.086,0,0.173,0.009,0.258,0.027
		c0.324,0.069,0.602,0.26,0.783,0.537c0.131,0.201,0.2,0.434,0.2,0.674V5.75H9.26c0.683,0,1.239,0.556,1.239,1.239v3.416l1.5,2.05
		V10.25c0-0.192,0.046-0.385,0.132-0.556l1.497-3.239c0.219-0.439,0.646-0.705,1.118-0.705h1.003V3.239
		c0-0.332,0.13-0.644,0.365-0.878c0.231-0.23,0.531-0.355,0.87-0.361c0.248,0,0.481,0.07,0.682,0.201l5.196,3.462
		c0.749,0.49,0.997,1.492,0.561,2.28l-0.73,1.317l0.137,0.361c0.841,2.198,1.71,4.471,0.736,6.133l-0.025,0.041L21,19.513v1.898
		C21,21.824,20.663,22.16,20.25,22.16z"/>
	<path d="M14.71,20.652c-0.139,0-0.276-0.039-0.395-0.112l-2.316-1.436l-2.316,1.436c-0.118,0.073-0.255,0.113-0.395,0.113
		c-0.261,0-0.5-0.133-0.638-0.355c-0.106-0.171-0.139-0.372-0.093-0.567s0.165-0.361,0.335-0.466l2.655-1.646
		c0.099-0.073,0.214-0.121,0.335-0.139c0.009-0.001,0.017-0.002,0.025-0.003c0.022-0.003,0.057-0.006,0.092-0.006
		c0.029,0,0.058,0.002,0.088,0.006c0.005,0,0.023,0.003,0.028,0.003c0.121,0.019,0.235,0.066,0.333,0.139l2.656,1.647
		c0.351,0.218,0.46,0.681,0.243,1.032C15.21,20.519,14.972,20.652,14.71,20.652z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/usb.svg ---
<?xml version="1.0" encoding="UTF-8"?>
<svg width="14px" height="22px" viewBox="0 0 14 22" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!-- Generator: Sketch 57.1 (83088) - https://sketch.com -->
    <title>usb</title>
    <desc>Created with Sketch.</desc>
    <g id="New-Moonlet-Logo" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="cable" fill="#9A99A2" fill-rule="nonzero">
            <path d="M12.125,7.875 C12.125,8.28921356 11.7892136,8.625 11.375,8.625 L2.625,8.625 C2.21078644,8.625 1.875,8.28921356 1.875,7.875 L1.875,2.25 C1.875,1.49060644 2.49060644,0.875 3.25,0.875 L10.75,0.875 C11.5094104,0.875 12.125,1.49060324 12.125,2.25 L12.125,7.875 Z M10.625,7.125 L10.625,2.375 L3.375,2.375 L3.375,7.125 L10.625,7.125 Z" id="Path"></path>
            <path d="M4.375,4.125 L4.375,5.375 C4.375,5.78921356 4.71078644,6.125 5.125,6.125 C5.53921356,6.125 5.875,5.78921356 5.875,5.375 L5.875,4.125 C5.875,3.71078644 5.53921356,3.375 5.125,3.375 C4.71078644,3.375 4.375,3.71078644 4.375,4.125 Z" id="Path"></path>
            <path d="M8.125,4.125 L8.125,5.375 C8.125,5.78921356 8.46078644,6.125 8.875,6.125 C9.28921356,6.125 9.625,5.78921356 9.625,5.375 L9.625,4.125 C9.625,3.71078644 9.28921356,3.375 8.875,3.375 C8.46078644,3.375 8.125,3.71078644 8.125,4.125 Z" id="Path"></path>
            <path d="M5.875,18.625 L8.125,18.625 L8.125,20.375 C8.125,20.7892136 8.46078644,21.125 8.875,21.125 C9.28921356,21.125 9.625,20.7892136 9.625,20.375 L9.625,17.875 C9.625,17.4607864 9.28921356,17.125 8.875,17.125 L5.125,17.125 C4.71078644,17.125 4.375,17.4607864 4.375,17.875 L4.375,20.375 C4.375,20.7892136 4.71078644,21.125 5.125,21.125 C5.53921356,21.125 5.875,20.7892136 5.875,20.375 L5.875,18.625 Z" id="Path"></path>
            <path d="M8.875,18.625 L5.125,18.625 C2.63968644,18.625 0.625,16.6103136 0.625,14.125 L0.625,9.125 C0.625,8.02039654 1.52041633,7.125 2.625,7.125 L11.375,7.125 C12.4796136,7.125 13.375,8.02038644 13.375,9.125 L13.375,14.125 C13.375,16.6103136 11.3603136,18.625 8.875,18.625 Z M8.875,17.125 C10.5318864,17.125 11.875,15.7818864 11.875,14.125 L11.875,9.125 C11.875,8.84881356 11.6511864,8.625 11.375,8.625 L2.625,8.625 C2.34883604,8.625 2.125,8.84883109 2.125,9.125 L2.125,14.125 C2.125,15.7818864 3.46811356,17.125 5.125,17.125 L8.875,17.125 Z" id="Path"></path>
        </g>
    </g>
</svg>
'''
'''--- src/assets/icons/svg/view-off.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>view-off</title>
<g>
	<path d="M2.783,21.75c-0.203,0-0.4-0.084-0.541-0.23c-0.139-0.145-0.213-0.334-0.209-0.535c0.004-0.2,0.086-0.387,0.231-0.526
		l18.75-18c0.14-0.135,0.325-0.209,0.519-0.209c0.203,0,0.4,0.084,0.541,0.231c0.139,0.144,0.213,0.334,0.209,0.535
		c-0.004,0.2-0.086,0.387-0.23,0.526l-18.75,18C3.162,21.676,2.977,21.75,2.783,21.75z"/>
	<path d="M11.988,20.25l-0.11,0.001c-1.048,0-2.103-0.163-3.137-0.483c-0.395-0.123-0.616-0.544-0.494-0.938
		c0.098-0.316,0.386-0.528,0.717-0.528c0.075,0,0.15,0.011,0.222,0.034c0.888,0.276,1.8,0.416,2.709,0.416l0.249,0.001
		c3.853,0,7.756-2.786,10.125-5.393c0.312-0.346,0.312-0.871-0.002-1.22c-0.891-0.978-1.887-1.871-2.959-2.653
		c-0.162-0.118-0.268-0.292-0.299-0.49c-0.031-0.198,0.017-0.396,0.135-0.558c0.141-0.193,0.367-0.308,0.606-0.308
		c0.159,0,0.312,0.05,0.442,0.144c1.153,0.841,2.225,1.803,3.187,2.858c0.832,0.923,0.832,2.312,0.003,3.233
		c-2.586,2.846-6.895,5.886-11.237,5.886L11.988,20.25z"/>
	<path d="M3.778,17.011c-0.166,0-0.329-0.056-0.46-0.158c-0.963-0.748-1.869-1.584-2.693-2.486
		c-0.832-0.924-0.833-2.313-0.003-3.234c2.586-2.845,6.896-5.884,11.236-5.884l0.237,0.001c0.846,0,1.687,0.102,2.5,0.305
		c0.401,0.1,0.646,0.507,0.547,0.909c-0.083,0.335-0.383,0.569-0.728,0.569c-0.061,0-0.122-0.008-0.182-0.022
		c-0.694-0.173-1.41-0.26-2.129-0.26l-0.229,0c-3.863,0-7.771,2.785-10.14,5.391c-0.312,0.346-0.312,0.871,0.002,1.22
		c0.763,0.835,1.606,1.613,2.503,2.31c0.158,0.123,0.259,0.3,0.284,0.499c0.025,0.199-0.029,0.395-0.152,0.553
		C4.228,16.905,4.012,17.011,3.778,17.011z"/>
	<path d="M8.25,13.5c-0.413,0-0.75-0.336-0.75-0.75c0-1.2,0.468-2.329,1.318-3.18c0.85-0.851,1.979-1.32,3.179-1.32h0
		c0.207,0,0.374,0.167,0.375,0.374l0.002,0.75c0,0.1-0.039,0.195-0.109,0.266S12.1,9.75,12,9.75c-0.801,0-1.554,0.313-2.121,0.88
		C9.312,11.197,9,11.95,9,12.75c0,0.2-0.078,0.388-0.219,0.53C8.639,13.422,8.45,13.5,8.25,13.5z"/>
	<path d="M12.001,17.25c-0.207,0-0.375-0.167-0.375-0.375l-0.001-0.75c0-0.099,0.039-0.195,0.11-0.265
		c0.07-0.071,0.166-0.11,0.265-0.11c0.802,0,1.555-0.312,2.122-0.879C14.688,14.304,15,13.55,15,12.749
		c0-0.414,0.336-0.75,0.75-0.75c0.414,0,0.75,0.336,0.75,0.75c0,1.202-0.467,2.332-1.317,3.182
		C14.333,16.781,13.203,17.25,12.001,17.25z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/view.svg ---
<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 22.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 24 24" style="enable-background:new 0 0 24 24;" xml:space="preserve">
<title>view</title>
<g>
	<path d="M11.842,19.499c-4.333,0-8.636-3.04-11.219-5.884c-0.831-0.923-0.831-2.312-0.002-3.232
		c2.584-2.845,6.892-5.883,11.234-5.883c0.051,0,0.1,0,0.151,0.001c0.042-0.001,0.097-0.001,0.153-0.001
		c4.328,0,8.634,3.038,11.219,5.881c0.831,0.923,0.832,2.312,0.002,3.233c-2.586,2.846-6.897,5.886-11.245,5.886
		c0,0-0.149-0.001-0.149-0.001L11.842,19.499L11.842,19.499z M11.853,5.999c-3.851,0-7.753,2.784-10.12,5.39
		c-0.312,0.346-0.312,0.871,0.002,1.22c2.366,2.605,6.267,5.39,10.12,5.39l0.131-0.001l0.136,0.001
		c3.867,0,7.776-2.785,10.145-5.392c0.312-0.346,0.312-0.871-0.002-1.22c-2.368-2.604-6.272-5.387-10.123-5.387
		c0,0-0.154,0.001-0.156,0.001L11.853,5.999z"/>
	<path d="M11.998,16.498c-1.202,0-2.332-0.469-3.182-1.319c-0.85-0.85-1.318-1.98-1.317-3.182c0-2.481,2.019-4.499,4.5-4.499
		c1.202,0,2.332,0.468,3.182,1.317c0.85,0.85,1.318,1.979,1.318,3.181c0,1.206-0.469,2.335-1.319,3.185
		c-0.85,0.849-1.979,1.317-3.181,1.317H11.998z M12,8.998c-1.654,0-3,1.345-3,2.999c0,0.801,0.312,1.555,0.878,2.121
		c0.567,0.567,1.32,0.879,2.121,0.879c0.802,0,1.555-0.312,2.121-0.878s0.879-1.32,0.879-2.121c0-0.804-0.312-1.557-0.879-2.123
		C13.554,9.31,12.801,8.998,12,8.998L12,8.998z"/>
</g>
</svg>

'''
'''--- src/assets/icons/svg/vote.svg ---
<svg viewBox="0 0 33 33" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M25.914 18.5906C25.9952 18.9967 25.7317 19.3918 25.3256 19.473L18.8289 20.7718C18.4227 20.853 18.0276 20.5896 17.9464 20.1834C17.8652 19.7772 18.1287 19.3821 18.5349 19.3009L25.0315 18.0021C25.4377 17.9209 25.8328 18.1844 25.914 18.5906Z" fill="black"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M19.5947 9.27936C19.0885 9.09015 18.5258 9.12403 18.0459 9.37279L18.0356 9.37812L14.9792 10.9028C14.3934 11.2186 14.134 11.9219 14.3757 12.543L14.379 12.5513C14.497 12.8657 14.7359 13.1197 15.0425 13.2566C15.3368 13.3882 15.6724 13.3934 15.9705 13.271L19.0346 11.9762C19.4162 11.815 19.8562 11.9936 20.0174 12.3751C20.1786 12.7567 20 13.1967 19.6185 13.3579L16.5459 14.6563C15.8666 14.9371 15.1016 14.9261 14.4306 14.6261C13.7593 14.3262 13.2357 13.7706 12.9762 13.0828C12.4604 11.7513 13.0216 10.2439 14.2832 9.57401L14.3001 9.56531L17.361 8.03824C18.2191 7.59542 19.2247 7.53695 20.1285 7.87754L20.139 7.8815L26.4347 10.3624C26.8201 10.5143 27.0094 10.9498 26.8576 11.3352C26.7057 11.7205 26.2702 11.9098 25.8848 11.758L19.5947 9.27936Z" fill="black"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M16.929 12.9156C17.237 12.6386 17.7112 12.6637 17.9882 12.9716L21.1734 16.5124C21.1858 16.5261 21.1976 16.5403 21.2089 16.555C21.834 17.3625 21.7057 18.5204 20.919 19.1715L15.1369 23.9464C14.3783 24.5728 13.2695 24.5047 12.5928 23.8034L8.70728 20.8393H6.78927C6.37505 20.8393 6.03927 20.5035 6.03927 20.0893C6.03927 19.6751 6.37505 19.3393 6.78927 19.3393H8.9607C9.12508 19.3393 9.2849 19.3933 9.41559 19.493L13.5535 22.6497C13.5922 22.6792 13.628 22.7125 13.6603 22.749C13.7947 22.9009 14.0253 22.9189 14.1818 22.7898V22.7898L19.9626 18.0159V18.0159C20.12 17.8852 20.1504 17.656 20.0349 17.4896L16.873 13.9748C16.596 13.6669 16.6211 13.1926 16.929 12.9156Z" fill="black"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M11.3474 9.18593C12.3682 8.77732 13.5277 8.92587 14.4125 9.57862C14.4216 9.5853 14.4305 9.59218 14.4392 9.59927L14.7744 9.8707C15.0963 10.1314 15.146 10.6036 14.8853 10.9255C14.6247 11.2475 14.1524 11.2971 13.8305 11.0365L13.5096 10.7766C13.0464 10.4414 12.444 10.3655 11.9119 10.5757L7.07514 12.6364C6.69407 12.7988 6.25354 12.6215 6.09119 12.2404C5.92883 11.8593 6.10614 11.4188 6.48721 11.2564L11.3322 9.19223L11.3474 9.18593Z" fill="black"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M5.21038 10.1786C6.46277 10.1232 7.53048 11.0831 7.60576 12.3371C7.60665 12.3521 7.6071 12.3671 7.6071 12.3821V19.6523C7.6071 19.6671 7.60667 19.6818 7.6058 19.6966C7.53157 20.9515 6.46353 21.9125 5.21039 21.8571H1.61853C1.20432 21.8571 0.868533 21.5214 0.868533 21.1071C0.868533 20.6929 1.20432 20.3571 1.61853 20.3571H5.22853C5.2419 20.3571 5.25527 20.3575 5.26862 20.3582C5.70105 20.3814 6.07186 20.0559 6.1071 19.6265V12.4082C6.07137 11.9793 5.70074 11.6544 5.26866 11.6775C5.2553 11.6782 5.24192 11.6786 5.22853 11.6786H1.61853C1.20432 11.6786 0.868533 11.3428 0.868533 10.9286C0.868533 10.5144 1.20432 10.1786 1.61853 10.1786H5.21038Z" fill="black"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M25.9286 12.4082V19.6265C25.9638 20.0559 26.3346 20.3814 26.7671 20.3582C26.7804 20.3575 26.7938 20.3571 26.8071 20.3571H30.4171C30.8314 20.3571 31.1671 20.6929 31.1671 21.1071C31.1671 21.5214 30.8314 21.8571 30.4171 21.8571H26.8253C25.5721 21.9125 24.5041 20.9515 24.4299 19.6966C24.429 19.6818 24.4286 19.6671 24.4286 19.6523V12.3821C24.4286 12.3671 24.429 12.3521 24.4299 12.3371C24.5052 11.0831 25.5729 10.1232 26.8253 10.1786H30.4171C30.8314 10.1786 31.1671 10.5144 31.1671 10.9286C31.1671 11.3428 30.8314 11.6786 30.4171 11.6786H26.8071C26.7938 11.6786 26.7804 11.6782 26.767 11.6775C26.3349 11.6544 25.9643 11.9793 25.9286 12.4082Z" fill="black"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M0 16.0179C0 7.17144 7.17144 0 16.0179 0C24.8643 0 32.0357 7.17144 32.0357 16.0179C32.0357 24.8643 24.8643 32.0357 16.0179 32.0357C7.17144 32.0357 0 24.8643 0 16.0179ZM16.0179 1.5C7.99987 1.5 1.5 7.99987 1.5 16.0179C1.5 24.0358 7.99987 30.5357 16.0179 30.5357C24.0358 30.5357 30.5357 24.0358 30.5357 16.0179C30.5357 7.99987 24.0358 1.5 16.0179 1.5Z" fill="black"/>
</svg>

'''
'''--- src/assets/icons/svg/warning.svg ---
<svg width="28" height="28" viewBox="0 0 28 28" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M12.5179 4.36953L2.83272 22.0445C2.22022 23.1492 3.03507 24.5 4.31475 24.5H23.6905C24.9648 24.5 25.7796 23.1492 25.1726 22.0445L15.4819 4.36953C14.8421 3.21016 13.1577 3.21016 12.5179 4.36953ZM14.9624 11.7031L14.7655 18.375H13.2343L13.0374 11.7031H14.9624ZM13.9999 22.0063C13.4148 22.0063 12.9554 21.5633 12.9554 21C12.9554 20.4367 13.4148 19.9937 13.9999 19.9937C14.5851 19.9937 15.0444 20.4367 15.0444 21C15.0444 21.5633 14.5851 22.0063 13.9999 22.0063Z" fill="#9A99A2"/>
</svg>

'''
'''--- src/assets/icons/svg/withdraw.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><defs><style>.a{fill:none;stroke:currentColor;stroke-linecap:round;stroke-linejoin:round;stroke-width:1.5px;}</style></defs><title>accounting-withdraw-alternate</title><path class="a" d="M14.758,21.375H2.25a.75.75,0,0,1-.742-.861l.206-.974A37.775,37.775,0,0,1,7.379,6.375h10.5A35.685,35.685,0,0,0,15.5,20.514.75.75,0,0,1,14.758,21.375Z"/><path class="a" d="M12.525,11.2,10.556,10.7a1.341,1.341,0,0,0-1.125,2.382l1.793,1.312A1.341,1.341,0,0,1,10.1,16.772l-1.97-.5"/><line class="a" x1="11.072" y1="10.828" x2="11.445" y2="9.375"/><line class="a" x1="9.21" y1="18.093" x2="9.582" y2="16.64"/><path class="a" d="M2.25,10.125H1.5a.75.75,0,0,1-.75-.75v-6a.75.75,0,0,1,.75-.75h21a.75.75,0,0,1,.75.75v6a.75.75,0,0,1-.75.75H20.25"/></svg>
'''
'''--- src/assets/images/svg/moonlet_space.svg ---
<?xml version="1.0" encoding="UTF-8"?>
<svg width="1608px" height="1128px" viewBox="0 0 1608 1128" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!-- Generator: Sketch 57.1 (83088) - https://sketch.com -->
    <title>Moonlet space context v01</title>
    <desc>Created with Sketch.</desc>
    <defs>
        <polygon id="path-1" points="0 0 5 0 5 5 0 5"></polygon>
        <polygon id="path-3" points="0 0 5 0 5 5 0 5"></polygon>
        <polygon id="path-5" points="0 0 5 0 5 5 0 5"></polygon>
        <polygon id="path-7" points="0 0 9 0 9 9 0 9"></polygon>
        <polygon id="path-9" points="0 0 6 0 6 6 0 6"></polygon>
        <polygon id="path-11" points="0 0 6 0 6 6 0 6"></polygon>
        <radialGradient cx="69.2136499%" cy="25.7232938%" fx="69.2136499%" fy="25.7232938%" r="76.7596607%" id="radialGradient-13">
            <stop stop-color="#00DAFF" offset="0%"></stop>
            <stop stop-color="#2FA0B3" offset="45%"></stop>
            <stop stop-color="#3F6D75" offset="80%"></stop>
            <stop stop-color="#15282B" offset="100%"></stop>
        </radialGradient>
        <linearGradient x1="0.0121742022%" y1="49.9938825%" x2="100.002795%" y2="49.9938825%" id="linearGradient-14">
            <stop stop-color="#00839A" offset="0%"></stop>
            <stop stop-color="#0DB4D1" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="0.109170986%" y1="50.1071855%" x2="100.005906%" y2="50.1071855%" id="linearGradient-15">
            <stop stop-color="#003842" offset="0%"></stop>
            <stop stop-color="#008EA6" offset="100%"></stop>
        </linearGradient>
        <radialGradient cx="69.2136499%" cy="25.7232938%" fx="69.2136499%" fy="25.7232938%" r="53.1345767%" id="radialGradient-16">
            <stop stop-color="#2B842B" offset="0%"></stop>
            <stop stop-color="#336933" offset="45%"></stop>
            <stop stop-color="#2E512E" offset="80%"></stop>
            <stop stop-color="#203420" offset="100%"></stop>
        </radialGradient>
        <linearGradient x1="0.0121742022%" y1="49.9938825%" x2="100.002795%" y2="49.9938825%" id="linearGradient-17">
            <stop stop-color="#050805" offset="0%"></stop>
            <stop stop-color="#323932" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="54.787891%" y1="102.10733%" x2="45.2081027%" y2="-2.11638576%" id="linearGradient-18">
            <stop stop-color="#141A14" offset="0%"></stop>
            <stop stop-color="#416341" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="39.8731712%" y1="104.056119%" x2="60.0051363%" y2="-3.45065602%" id="linearGradient-19">
            <stop stop-color="#353E35" offset="0%"></stop>
            <stop stop-color="#0B100B" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="1.77976641%" y1="56.3867797%" x2="97.6710347%" y2="43.6837722%" id="linearGradient-20">
            <stop stop-color="#353E35" offset="0%"></stop>
            <stop stop-color="#0B100B" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="8.25461465%" y1="74.0720947%" x2="88.1183635%" y2="19.2793896%" id="linearGradient-21">
            <stop stop-color="#00BFDF" offset="0%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </linearGradient>
        <radialGradient cx="41.5718275%" cy="47.4208529%" fx="41.5718275%" fy="47.4208529%" r="49.9073867%" id="radialGradient-22">
            <stop stop-color="#FFFF86" offset="72%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </radialGradient>
        <linearGradient x1="-3.89097744%" y1="67.470783%" x2="102.174185%" y2="34.5332173%" id="linearGradient-23">
            <stop stop-color="#00CAEC" offset="0%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </linearGradient>
        <radialGradient cx="4.43769143%" cy="78.8568521%" fx="4.43769143%" fy="78.8568521%" r="49.9118563%" id="radialGradient-24">
            <stop stop-color="#FFFF86" offset="72%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </radialGradient>
        <linearGradient x1="-2.93813413%" y1="67.0163745%" x2="103.208859%" y2="31.8766464%" id="linearGradient-25">
            <stop stop-color="#00CAEC" offset="0%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </linearGradient>
        <radialGradient cx="38.0573019%" cy="27.9808869%" fx="38.0573019%" fy="27.9808869%" r="49.7930198%" id="radialGradient-26">
            <stop stop-color="#FFFF86" offset="72%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </radialGradient>
        <linearGradient x1="-2.10323703%" y1="65.6914992%" x2="104.013037%" y2="34.3237294%" id="linearGradient-27">
            <stop stop-color="#00CAEC" offset="0%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </linearGradient>
        <radialGradient cx="48.1051477%" cy="45.4553759%" fx="48.1051477%" fy="45.4553759%" r="49.0701241%" id="radialGradient-28">
            <stop stop-color="#FFFF86" offset="72%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </radialGradient>
        <linearGradient x1="-2.10198401%" y1="67.3115423%" x2="103.62903%" y2="32.7454697%" id="linearGradient-29">
            <stop stop-color="#00CAEC" offset="0%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </linearGradient>
        <radialGradient cx="50.5385022%" cy="49.5239457%" fx="50.5385022%" fy="49.5239457%" r="49.2873888%" id="radialGradient-30">
            <stop stop-color="#FFFF86" offset="72%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </radialGradient>
        <linearGradient x1="-3.65486726%" y1="68.5461324%" x2="103.424779%" y2="26.6865739%" id="linearGradient-31">
            <stop stop-color="#00CAEC" offset="0%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </linearGradient>
        <radialGradient cx="39.6412864%" cy="3.87830376%" fx="39.6412864%" fy="3.87830376%" r="31.9247114%" id="radialGradient-32">
            <stop stop-color="#FFFF86" offset="72%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </radialGradient>
        <linearGradient x1="-5.20935765%" y1="64.9534074%" x2="101.450436%" y2="35.7384224%" id="linearGradient-33">
            <stop stop-color="#00CAEC" offset="0%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </linearGradient>
        <radialGradient cx="-3.25282691%" cy="54.9616275%" fx="-3.25282691%" fy="54.9616275%" r="46.1529862%" id="radialGradient-34">
            <stop stop-color="#FFFF86" offset="72%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </radialGradient>
        <radialGradient cx="50.2697253%" cy="51.3931157%" fx="50.2697253%" fy="51.3931157%" r="52.4265515%" id="radialGradient-35">
            <stop stop-color="#FFFFFF" offset="0%"></stop>
            <stop stop-color="#000000" offset="100%"></stop>
        </radialGradient>
        <linearGradient x1="8.25461465%" y1="73.9454451%" x2="88.1183635%" y2="19.4410188%" id="linearGradient-36">
            <stop stop-color="#00BFDF" offset="0%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="-3.89097744%" y1="67.2386157%" x2="102.174185%" y2="34.7387537%" id="linearGradient-37">
            <stop stop-color="#00CAEC" offset="0%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="-2.93813413%" y1="66.9031132%" x2="103.208859%" y2="31.9972757%" id="linearGradient-38">
            <stop stop-color="#00CAEC" offset="0%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="-2.10323703%" y1="64.2764788%" x2="104.013037%" y2="35.7373765%" id="linearGradient-39">
            <stop stop-color="#00CAEC" offset="0%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="-2.10198401%" y1="66.9935222%" x2="103.62903%" y2="33.0624425%" id="linearGradient-40">
            <stop stop-color="#00CAEC" offset="0%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="-3.65486726%" y1="68.3956573%" x2="103.424779%" y2="26.8757287%" id="linearGradient-41">
            <stop stop-color="#00CAEC" offset="0%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="-5.20935765%" y1="66.1736054%" x2="101.450436%" y2="34.5746777%" id="linearGradient-42">
            <stop stop-color="#00CAEC" offset="0%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="8.25461465%" y1="74.3311374%" x2="88.1183635%" y2="18.9488015%" id="linearGradient-43">
            <stop stop-color="#00BFDF" offset="0%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="-3.89097744%" y1="67.8899503%" x2="102.174185%" y2="34.1621309%" id="linearGradient-44">
            <stop stop-color="#00CAEC" offset="0%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="-2.93813413%" y1="67.2772658%" x2="103.208859%" y2="31.5987831%" id="linearGradient-45">
            <stop stop-color="#00CAEC" offset="0%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="-2.10323703%" y1="65.7965781%" x2="104.013037%" y2="34.2187524%" id="linearGradient-46">
            <stop stop-color="#00CAEC" offset="0%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="-2.10198401%" y1="67.6340317%" x2="103.62903%" y2="32.4240424%" id="linearGradient-47">
            <stop stop-color="#00CAEC" offset="0%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="-3.65486726%" y1="68.913539%" x2="103.424779%" y2="26.2247253%" id="linearGradient-48">
            <stop stop-color="#00CAEC" offset="0%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="-5.20935765%" y1="64.7478647%" x2="101.450436%" y2="35.9344555%" id="linearGradient-49">
            <stop stop-color="#00CAEC" offset="0%"></stop>
            <stop stop-color="#FFFFFF" offset="100%"></stop>
        </linearGradient>
        <polygon id="path-50" points="0 0 3 0 3 3 0 3"></polygon>
        <polygon id="path-52" points="0 0 4 0 4 4 0 4"></polygon>
        <polygon id="path-54" points="0 0 4 0 4 4 0 4"></polygon>
        <polygon id="path-56" points="0 0 6 0 6 6 0 6"></polygon>
        <polygon id="path-58" points="0 0 10 0 10 10 0 10"></polygon>
        <linearGradient x1="25.6465696%" y1="36.7103682%" x2="83.1120415%" y2="50%" id="linearGradient-60">
            <stop stop-color="#306F30" offset="0%"></stop>
            <stop stop-color="#081C06" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="36.8955012%" y1="60.9060022%" x2="70.0951825%" y2="39.8780009%" id="linearGradient-61">
            <stop stop-color="#4F8A46" offset="0%"></stop>
            <stop stop-color="#477F4B" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="39.617363%" y1="60.9060022%" x2="65.921325%" y2="39.8780009%" id="linearGradient-62">
            <stop stop-color="#4F8A46" offset="0%"></stop>
            <stop stop-color="#477F4B" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="32.1076838%" y1="36.7103682%" x2="74.3272142%" y2="50%" id="linearGradient-63">
            <stop stop-color="#306F30" offset="0%"></stop>
            <stop stop-color="#081C06" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="46.1034511%" y1="36.7103682%" x2="55.2979266%" y2="50%" id="linearGradient-64">
            <stop stop-color="#306F30" offset="0%"></stop>
            <stop stop-color="#081C06" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="40.4869412%" y1="36.7103682%" x2="62.9343912%" y2="50%" id="linearGradient-65">
            <stop stop-color="#306F30" offset="0%"></stop>
            <stop stop-color="#081C06" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="36.3011954%" y1="36.7103682%" x2="68.6255234%" y2="50%" id="linearGradient-66">
            <stop stop-color="#306F30" offset="0%"></stop>
            <stop stop-color="#081C06" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="40.137867%" y1="36.7103682%" x2="63.4090085%" y2="50%" id="linearGradient-67">
            <stop stop-color="#306F30" offset="0%"></stop>
            <stop stop-color="#081C06" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="47.346339%" y1="60.9060022%" x2="54.0692745%" y2="39.8780009%" id="linearGradient-68">
            <stop stop-color="#4F8A46" offset="0%"></stop>
            <stop stop-color="#477F4B" offset="100%"></stop>
        </linearGradient>
        <radialGradient cx="69.2136499%" cy="25.7232938%" fx="69.2136499%" fy="25.7232938%" r="80.7307122%" id="radialGradient-69">
            <stop stop-color="#00DAFF" offset="0%"></stop>
            <stop stop-color="#0DB5D2" offset="45%"></stop>
            <stop stop-color="#1CADC6" offset="80%"></stop>
            <stop stop-color="#177B8C" offset="100%"></stop>
        </radialGradient>
        <circle id="path-70" cx="59.5" cy="59.5" r="59.5"></circle>
        <filter x="-25.2%" y="-25.2%" width="150.4%" height="150.4%" filterUnits="objectBoundingBox" id="filter-71">
            <feOffset dx="0" dy="0" in="SourceAlpha" result="shadowOffsetOuter1"></feOffset>
            <feGaussianBlur stdDeviation="10" in="shadowOffsetOuter1" result="shadowBlurOuter1"></feGaussianBlur>
            <feColorMatrix values="0 0 0 0 0   0 0 0 0 0.854901961   0 0 0 0 1  0 0 0 1 0" type="matrix" in="shadowBlurOuter1"></feColorMatrix>
        </filter>
        <linearGradient x1="55.7690735%" y1="37.6518179%" x2="48.8705687%" y2="56.1890043%" id="linearGradient-72">
            <stop stop-color="#00DAFF" offset="0%"></stop>
            <stop stop-color="#11454E" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="47.9485023%" y1="41.5717267%" x2="54.0398487%" y2="65.818925%" id="linearGradient-73">
            <stop stop-color="#289BAF" offset="0%"></stop>
            <stop stop-color="#091011" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="47.6261456%" y1="44.5214214%" x2="52.057943%" y2="58.4468495%" id="linearGradient-74">
            <stop stop-color="#106C7B" offset="0%"></stop>
            <stop stop-color="#000000" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="47.7992763%" y1="44.4123688%" x2="52.0632285%" y2="58.6543273%" id="linearGradient-75">
            <stop stop-color="#106C7B" offset="0%"></stop>
            <stop stop-color="#0F6B7A" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="47.4055893%" y1="15.3770813%" x2="52.9895367%" y2="77.0812929%" id="linearGradient-76">
            <stop stop-color="#106C7B" offset="0%"></stop>
            <stop stop-color="#022C33" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="0.0121742022%" y1="49.9938825%" x2="100.002795%" y2="49.9938825%" id="linearGradient-77">
            <stop stop-color="#316A74" offset="0%"></stop>
            <stop stop-color="#478893" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="0.109170986%" y1="50.1071855%" x2="100.005906%" y2="50.1071855%" id="linearGradient-78">
            <stop stop-color="#2F96A7" offset="0%"></stop>
            <stop stop-color="#2898AA" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="0.0517968949%" y1="49.9995891%" x2="99.9949295%" y2="49.9995891%" id="linearGradient-79">
            <stop stop-color="#106C7B" offset="0%"></stop>
            <stop stop-color="#002126" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="-0.0286616413%" y1="49.8214174%" x2="99.9954321%" y2="49.8214174%" id="linearGradient-80">
            <stop stop-color="#0FB4D0" offset="0%"></stop>
            <stop stop-color="#106C7B" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="-0.113526135%" y1="50.1216628%" x2="99.9982841%" y2="50.1216628%" id="linearGradient-81">
            <stop stop-color="#106C7B" offset="0%"></stop>
            <stop stop-color="#0B2F34" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="0.0925925926%" y1="49.9071435%" x2="100.018519%" y2="49.9071435%" id="linearGradient-82">
            <stop stop-color="#00DAFF" offset="13%"></stop>
            <stop stop-color="#00D1FF" offset="22%"></stop>
            <stop stop-color="#00B7FF" offset="37%"></stop>
            <stop stop-color="#008EFF" offset="56%"></stop>
            <stop stop-color="#006CFF" offset="70%"></stop>
        </linearGradient>
        <linearGradient x1="0.00786417274%" y1="50%" x2="100%" y2="50%" id="linearGradient-83">
            <stop stop-color="#00DAFF" offset="31%"></stop>
            <stop stop-color="#00C4FF" offset="45%"></stop>
            <stop stop-color="#008BFF" offset="72%"></stop>
            <stop stop-color="#006CFF" offset="86%"></stop>
        </linearGradient>
        <linearGradient x1="0.225503496%" y1="53.2219029%" x2="100.140804%" y2="47.2632137%" id="linearGradient-84">
            <stop stop-color="#00DAFF" offset="29%"></stop>
            <stop stop-color="#02D7F1" offset="30%"></stop>
            <stop stop-color="#07CBBF" offset="35%"></stop>
            <stop stop-color="#0DBF92" offset="41%"></stop>
            <stop stop-color="#11B66A" offset="47%"></stop>
            <stop stop-color="#15AE49" offset="53%"></stop>
            <stop stop-color="#19A72F" offset="60%"></stop>
            <stop stop-color="#1BA21A" offset="67%"></stop>
            <stop stop-color="#1D9F0B" offset="75%"></stop>
            <stop stop-color="#1E9D03" offset="85%"></stop>
            <stop stop-color="#1E9C00" offset="100%"></stop>
        </linearGradient>
    </defs>
    <g id="Moonlet-space-context-v01" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <rect fill="#000000" x="0" y="0" width="1608" height="1128"></rect>
        <g id="Group-3" transform="translate(1343.000000, 525.000000)">
            <mask id="mask-2" fill="white">
                <use xlink:href="#path-1"></use>
            </mask>
            <g id="Clip-2"></g>
            <path d="M2.5,5 C1.11976369,5 0,3.88053691 0,2.49932886 C0,1.11812081 1.11976369,0 2.5,0 C3.88023631,0 5,1.11812081 5,2.49932886 C5,3.88053691 3.88023631,5 2.5,5" id="Fill-1" fill="#FFFFFF" mask="url(#mask-2)"></path>
        </g>
        <g id="Group-3" transform="translate(816.000000, 132.000000)">
            <mask id="mask-4" fill="white">
                <use xlink:href="#path-3"></use>
            </mask>
            <g id="Clip-2"></g>
            <path d="M2.5,5 C1.11976369,5 0,3.88053691 0,2.49932886 C0,1.11812081 1.11976369,0 2.5,0 C3.88023631,0 5,1.11812081 5,2.49932886 C5,3.88053691 3.88023631,5 2.5,5" id="Fill-1" fill="#FFFFFF" mask="url(#mask-4)"></path>
        </g>
        <path d="M493.5,175 C492.12069,175 491,173.87931 491,172.5 C491,171.12069 492.12069,170 493.5,170 C494.87931,170 496,171.12069 496,172.5 C496,173.87931 494.87931,175 493.5,175" id="Fill-1" fill="#CFF4FF"></path>
        <g id="Group-3" transform="translate(292.000000, 189.000000)">
            <mask id="mask-6" fill="white">
                <use xlink:href="#path-5"></use>
            </mask>
            <g id="Clip-2"></g>
            <path d="M2.5,5 C1.11976369,5 0,3.88053691 0,2.49932886 C0,1.11812081 1.11976369,0 2.5,0 C3.88023631,0 5,1.11812081 5,2.49932886 C5,3.88053691 3.88023631,5 2.5,5" id="Fill-1" fill="#FFFFFF" mask="url(#mask-6)"></path>
        </g>
        <g id="Group-3" transform="translate(380.000000, 244.000000)" fill="#FFFFFF">
            <polygon id="Fill-1" points="4.5 0 3 4.50065208 4.5 9 6 4.50065208"></polygon>
            <polygon id="Fill-2" points="0 4.5 4.50065208 6 9 4.5 4.50065208 3"></polygon>
        </g>
        <g id="Group-3" transform="translate(906.000000, 70.000000)" fill="#FFFFFF">
            <polygon id="Fill-1" points="12.5 0 9 11.5016664 12.5 23 16 11.5016664"></polygon>
            <polygon id="Fill-2" points="0 12.5 11.5016664 16 23 12.5 11.5016664 9"></polygon>
        </g>
        <path d="M294,586 C292.896552,586 292,585.105776 292,583.9985 C292,582.894224 292.896552,582 294,582 C295.103448,582 296,582.894224 296,583.9985 C296,585.105776 295.103448,586 294,586" id="Fill-1" fill="#35BAC4"></path>
        <path d="M299.5,1015 C297.017241,1015 295,1012.988 295,1010.49662 C295,1008.012 297.017241,1006 299.5,1006 C301.982759,1006 304,1008.012 304,1010.49662 C304,1012.988 301.982759,1015 299.5,1015" id="Fill-1" fill="#35BAC4"></path>
        <g id="Group-3" transform="translate(300.000000, 345.000000)">
            <mask id="mask-8" fill="white">
                <use xlink:href="#path-7"></use>
            </mask>
            <g id="Clip-2"></g>
            <path d="M4.50120546,9 C2.0155371,9 0,6.9844629 0,4.49879454 C0,2.0155371 2.0155371,0 4.50120546,0 C6.9844629,0 9,2.0155371 9,4.49879454 C9,6.9844629 6.9844629,9 4.50120546,9" id="Fill-1" fill="#FFFFFF" mask="url(#mask-8)"></path>
        </g>
        <g id="Group-3" transform="translate(502.000000, 189.000000)">
            <mask id="mask-10" fill="white">
                <use xlink:href="#path-9"></use>
            </mask>
            <g id="Clip-2"></g>
            <path d="M3,6 C1.34371643,6 0,4.6566443 0,2.99919463 C0,1.34174497 1.34371643,0 3,0 C4.65628357,0 6,1.34174497 6,2.99919463 C6,4.6566443 4.65628357,6 3,6" id="Fill-1" fill="#FFFFFF" mask="url(#mask-10)"></path>
        </g>
        <g id="Group-3" transform="translate(265.000000, 486.000000)">
            <mask id="mask-12" fill="white">
                <use xlink:href="#path-11"></use>
            </mask>
            <g id="Clip-2"></g>
            <path d="M3.00080364,6 C1.3436914,6 0,4.6563086 0,2.99919636 C0,1.3436914 1.3436914,0 3.00080364,0 C4.6563086,0 6,1.3436914 6,2.99919636 C6,4.6563086 4.6563086,6 3.00080364,6" id="Fill-1" fill="#FFFFFF" mask="url(#mask-12)"></path>
        </g>
        <g id="Asset-1" transform="translate(501.000000, 806.000000)" fill-rule="nonzero">
            <circle id="Oval" fill="url(#radialGradient-13)" transform="translate(32.500000, 32.500000) rotate(-79.000000) translate(-32.500000, -32.500000) " cx="32.5" cy="32.5" r="27.5"></circle>
            <path d="M32.324769,6 C25.435451,5.9915659 18.8320329,8.77759363 14,13.7313659 C24.5762903,4.99488403 40.0778493,6.12381985 49.3005142,16.302205 C58.5231791,26.4805902 58.2486379,42.1566076 48.6753225,52 C57.0241864,45.026951 60.1472647,33.5243832 56.4859261,23.2328705 C52.8245876,12.9413578 43.1637227,6.06711854 32.324769,6.04087174 L32.324769,6 Z" id="Path" fill="#FFFFFF" opacity="0.1"></path>
            <path d="M46.9128678,18.93937 C40.967519,19.3778311 43.5871563,17.4256352 38.6753364,13.4899248 C33.7635164,9.55421435 33.6918857,5.71245989 38.9618592,7.41410657 C44.2318327,9.11575324 53.0424098,18.4904693 46.9128678,18.93937 Z" id="Path" fill="url(#linearGradient-14)" opacity="0.4"></path>
            <path d="M38.838766,7.39639308 C36.6658796,6.72924527 35.4035361,6.95162787 35,7.70975039 C35.5690893,7.22455198 36.7590033,7.16390218 38.569742,7.70975039 C42.9982915,9.08447922 49.9515281,15.6043329 48.5546725,18 C50.8931122,15.9379068 43.4846042,8.82166341 38.838766,7.39639308 Z" id="Path" fill="#000000" opacity="0.8"></path>
            <path d="M39.582967,13.1327205 C37.2096459,11.1079787 36.0468139,9.19459767 36.1707222,8 C35.5416491,9.07311316 36.6568241,11.340824 39.420933,13.6591534 C43.9960098,17.465668 41.5559688,19.3588016 47.093718,18.9437295 C48.3518641,18.8424924 48.9332801,18.3261833 49,17.5669051 C48.5882998,18.1413427 47.9342508,18.4602181 47.255752,18.4172967 C41.7180028,18.8424924 44.1580437,16.9493588 39.582967,13.1327205 Z" id="Path" fill="#325E66" opacity="0.4"></path>
            <path d="M48.4999411,33.819014 C50.5939836,30.6514833 52.5660431,29.3906216 51.7121617,26.4486109 C50.8582802,23.5066002 51.9764583,20.4825823 54.8532255,22.8505421 C57.7299927,25.2185019 61.6131202,35.3566503 56.5304926,38.073141 C51.447865,40.7896317 46.3652375,36.9762938 48.4999411,33.819014 Z" id="Path" fill="url(#linearGradient-15)" opacity="0.4"></path>
            <path d="M58.4207799,29 C58.9910327,32.0960725 58.5938923,35.1500215 56.1499518,36.5085023 C52.5756888,38.4777729 49.0930735,37.1614155 48.0034834,35.0973672 C47.8609202,37.8985756 52.1174499,40.478636 56.526726,38.0038842 C59.3474407,36.4347863 59.4085392,32.5594303 58.4207799,29 Z" id="Path" fill="#336972" opacity="0.4"></path>
            <path d="M49.1598974,34.6192004 C51.4000582,31.4147002 53.5097242,30.1391224 52.5962606,27.1627743 C51.6827969,24.1864262 52.8789993,21.1271137 55.9456272,23.5227109 L56,23.5227109 C55.7846452,23.2861569 55.5520784,23.0643692 55.3040277,22.8589957 C52.2265253,20.4633984 51.0194484,23.5330815 51.9437865,26.499059 C52.8681247,29.4650366 50.7475842,30.7509849 48.5074234,33.9554851 C47.5775003,35.2993236 47.9615119,37.1072122 49.3665142,38 C48.498805,37.0492608 48.4138782,35.6596322 49.1598974,34.6192004 Z" id="Path" fill="#000000" opacity="0.3"></path>
        </g>
        <g id="Asset-1" transform="translate(1149.000000, 857.000000)" fill-rule="nonzero">
            <circle id="Oval" fill="url(#radialGradient-16)" transform="translate(30.500000, 30.500000) rotate(-84.000000) translate(-30.500000, -30.500000) " cx="30.5" cy="30.5" r="27.5"></circle>
            <path d="M30.324769,4 C23.435451,3.9915659 16.8320329,6.77759363 12,11.7313659 C22.5762903,2.99488403 38.0778493,4.12381985 47.3005142,14.302205 C56.5231791,24.4805902 56.2486379,40.1566076 46.6753225,50 C55.0241864,43.026951 58.1472647,31.5243832 54.4859261,21.2328705 C50.8245876,10.9413578 41.1637227,4.06711854 30.324769,4.04087174 L30.324769,4 Z" id="Path" fill="#FFFFFF" opacity="0.1"></path>
            <path d="M21.8793418,17.3584526 C16.1201488,17.7989158 18.6577622,15.8378058 13.899737,11.8841241 C9.1417118,7.93044241 9.07232393,4.07114569 14.1772885,5.78056244 C19.282253,7.48997919 27.8169607,16.9075022 21.8793418,17.3584526 Z" id="Path" fill="url(#linearGradient-17)" opacity="0.4" transform="translate(17.120302, 11.391962) rotate(-74.000000) translate(-17.120302, -11.391962) "></path>
            <path d="M13.6959303,6.04469448 C11.5910795,5.35926865 10.3682614,5.58774393 9.9773605,6.36663692 C10.528631,5.8681454 11.6812874,5.80583396 13.4353298,6.36663692 C17.7252163,7.77902955 24.460739,14.4775093 23.1076206,16.9388112 C25.372841,14.8202222 18.1963019,7.50901331 13.6959303,6.04469448 Z" id="Path" fill="#0E1B0E" opacity="0.8" transform="translate(16.758182, 11.288126) rotate(-74.000000) translate(-16.758182, -11.288126) "></path>
            <path d="M23.1678754,16.7554873 C17.3908768,17.1923323 19.9363358,15.247332 15.1636002,11.3261283 C12.6877437,9.24591407 11.4746734,7.28011165 11.603935,6.05278527 C10.9476839,7.1552988 12.1110381,9.4851387 14.9945659,11.866984 C19.7673014,15.7777867 17.2218424,17.7227869 22.9988411,17.296343 C24.3113433,17.1923323 24.9178785,16.6618777 24.9874809,15.8817974 C24.5579938,16.471973 23.8756877,16.7995847 23.1678754,16.7554873 L23.1678754,16.7554873 Z" id="Path" fill="#529252" opacity="0.4" transform="translate(18.206659, 11.703470) rotate(-74.000000) translate(-18.206659, -11.703470) "></path>
            <path d="M45.9154346,25.9799516 C50.6751017,33.6624529 46.0895574,31.415265 43.9417895,40.5425368 C41.7940217,49.6698087 36.4092207,52.2509625 35.1472461,44.0889871 C33.8852715,35.9270116 41.0127561,18.0574042 45.9154346,25.9799516 Z" id="Path" fill="url(#linearGradient-18)" opacity="0.4"></path>
            <path d="M35.0541873,43.5066375 C35.3621493,46.6451331 36.3673261,48.0383172 37.6193179,47.9991995 C36.6447138,47.6425783 35.8990122,46.2242786 35.6286844,43.6159937 C35.0213721,37.2088503 39.9758514,24.073477 44,24.0992751 C39.9026497,22.6820984 34.3941703,36.7970496 35.0541873,43.5066375 Z" id="Path" fill="#232923" opacity="0.8"></path>
            <path d="M45.1684121,26.0878699 C49.7031998,33.7248492 45.5485925,31.3601835 44.0258831,40.1137917 C43.1792637,44.681034 41.5996767,47.4591078 40,47.9832074 C41.8107301,48.2497581 43.8726686,45.3317603 44.8083705,40.0358245 C46.3182813,31.2881532 50.4728886,33.6528189 45.9508995,26.0099026 C44.9147611,24.2775411 43.842355,23.7523278 42.8342986,24.1025817 C43.8576883,24.3520133 44.7329219,25.0964463 45.1684121,26.0878699 L45.1684121,26.0878699 Z" id="Path" fill="#325C32" opacity="0.4"></path>
            <path d="M19.2189006,42.3433343 C18.854533,45.1162514 18.4833946,43.6557262 16.8832448,45.3633066 C15.2830951,47.0708869 14.1158775,46.5821935 15.07068,44.4079579 C16.0254825,42.2337223 19.5955072,39.484936 19.2189006,42.3433343 Z" id="Path" fill="url(#linearGradient-19)" opacity="0.4" transform="translate(16.986339, 43.754285) rotate(36.000000) translate(-16.986339, -43.754285) "></path>
            <path d="M15.2978791,44.1350785 C14.9024321,44.9236193 14.864954,45.455977 15.0695228,45.709792 C14.9650862,45.422934 15.0473696,44.9392564 15.3737226,44.2809086 C16.1844148,42.6756155 18.8319703,40.6860844 19.4680386,41.5368459 C19.0173494,40.3497977 16.1430182,42.4489625 15.2978791,44.1350785 Z" id="Path" fill="#111611" opacity="0.8" transform="translate(17.207765, 43.449518) rotate(36.000000) translate(-17.207765, -43.449518) "></path>
            <path d="M19.6755722,42.5490832 C19.2979747,45.3686816 18.9217954,43.8862469 17.2841552,45.6291173 C16.4203606,46.5269178 15.704087,46.8371389 15.335598,46.6072665 C15.6186644,47.0717925 16.4432257,46.8351882 17.4365913,45.7839553 C19.0710115,44.0396601 19.4471908,45.5220949 19.8280083,42.7039212 C19.9123221,42.0626717 19.8019441,41.7002578 19.5666205,41.5601503 C19.7112043,41.8461664 19.7520584,42.2169913 19.6755722,42.5490832 L19.6755722,42.5490832 Z" id="Path" fill="#367536" opacity="0.4" transform="translate(17.595872, 44.197137) rotate(36.000000) translate(-17.595872, -44.197137) "></path>
            <path d="M42.0584224,13.9092076 C38.3886337,17.5325833 39.4529996,15.0331433 35.0708989,15.8204654 C30.6887982,16.6077876 29.4359831,14.6767275 33.345591,12.537925 C37.2551989,10.3991225 45.8428929,10.1751898 42.0584224,13.9092076 Z" id="Path" fill="url(#linearGradient-20)" opacity="0.4"></path>
            <path d="M33.2093805,12.4024515 C31.651295,13.3266218 30.968662,14.2579764 31.0011019,15 C31.1684025,14.3311887 31.8662197,13.5496114 33.1609364,12.7729326 C36.3419423,10.8990974 42.9276421,10.7774632 42.95653,13.1981716 C43.6190394,10.4057518 36.5402943,10.4257402 33.2093805,12.4024515 Z" id="Path" fill="#111611" opacity="0.8"></path>
            <path d="M43.0108812,14.5260024 C39.3466636,18.1624619 40.40519,15.6539948 36.0194215,16.4441554 C33.7296818,16.8302197 32.3074912,16.5299285 32.0032011,15.8190042 C31.9209933,16.7765118 33.4259512,17.2943862 36.0797423,16.8236081 C40.462211,16.0280694 39.4036846,18.5365364 43.071202,14.9054551 C43.9021813,14.0768092 44.1331528,13.4444463 43.9314833,13 C43.8360037,13.5587185 43.4908012,14.1309309 43.0108812,14.5260024 L43.0108812,14.5260024 Z" id="Path" fill="#367536" opacity="0.4"></path>
        </g>
        <g id="Asset-1" transform="translate(1097.935210, 130.561414) rotate(-11.000000) translate(-1097.935210, -130.561414) translate(965.435210, 38.061414)" fill-rule="nonzero">
            <polygon id="Path" fill="url(#linearGradient-21)" opacity="0.57" points="228.100424 27.2694364 67.866372 136.938776 22.5893033 171.269436 18.1004243 166.112675"></polygon>
            <path d="M24.3673448,164.024362 C25.5647152,165.680316 25.6234512,167.895446 24.5155012,169.611836 C23.4075511,171.328225 21.3576953,172.197653 19.3449178,171.804893 C17.3321403,171.412133 15.7647921,169.836867 15.391418,167.831422 C15.0180439,165.825977 15.9143939,163.797216 17.652383,162.714048 C19.8712846,161.235666 22.8749521,161.821782 24.3673448,164.024362 L24.3673448,164.024362 Z" id="Path" fill="url(#radialGradient-22)"></path>
            <polygon id="Path" fill="url(#linearGradient-23)" opacity="0.57" points="199.454483 47.5923955 59.8274541 140.133851 50.4544831 146.346032 50.9935853 147.592396"></polygon>
            <path d="M52.0275757,144.759601 C52.1355275,145.01313 52.0201006,145.306378 51.7683002,145.418303 C51.6043197,145.489654 51.4147305,145.468101 51.270949,145.361765 C51.1271675,145.255428 51.0510377,145.080462 51.0712368,144.902775 C51.0914359,144.725088 51.2048952,144.571675 51.3688757,144.500324 C51.6224046,144.392372 51.9156514,144.507799 52.0275757,144.759601 L52.0275757,144.759601 Z" id="Path" fill="url(#radialGradient-24)"></path>
            <polygon id="Path" fill="url(#linearGradient-25)" opacity="0.57" points="264.81132 0.344918321 38.8113196 152.305685 40.0121334 154.344918"></polygon>
            <path d="M39.7216639,155.595947 C39.7992069,155.756848 39.7850195,155.946896 39.6844461,156.0945 C39.5838727,156.242105 39.4121927,156.324842 39.2340763,156.311546 C39.05596,156.298249 38.8984673,156.190939 38.8209244,156.030037 C38.7010534,155.781306 38.8055162,155.482494 39.0542485,155.362624 C39.3029808,155.242753 39.6017929,155.347215 39.7216639,155.595947 L39.7216639,155.595947 Z" id="Path" fill="url(#radialGradient-26)"></path>
            <polygon id="Path" fill="url(#linearGradient-27)" opacity="0.57" points="23.3096397 166.112941 53.6942058 146.112941 22.6942058 164.89768"></polygon>
            <path d="M24.4626263,165.853265 C24.5333368,165.973911 24.548862,166.119369 24.5052229,166.252359 C24.4615839,166.385349 24.3630226,166.492945 24.2347989,166.54757 C23.9895545,166.661236 23.6989336,166.557209 23.5802507,166.313275 C23.4615677,166.069341 23.5582386,165.774736 23.7979769,165.649753 C24.0377152,165.52477 24.332821,165.61513 24.4626263,165.853265 L24.4626263,165.853265 Z" id="Path" fill="url(#radialGradient-28)"></path>
            <polygon id="Path" fill="url(#linearGradient-29)" opacity="0.57" points="23.1041927 163.406815 105.287783 105.406815 20.2877834 162.571462 21.8662151 162.757684"></polygon>
            <path d="M22.3021786,161.387274 C22.3871046,161.571543 22.3517788,161.788774 22.2128163,161.936793 C22.0738537,162.084813 21.8589154,162.134159 21.669095,162.061621 C21.4792746,161.989082 21.3523566,161.8091 21.3480353,161.606325 C21.3437141,161.403551 21.4628498,161.218348 21.6494084,161.137824 C21.769081,161.084193 21.9052398,161.080362 22.0277512,161.127178 C22.1502626,161.173995 22.2490241,161.267599 22.3021786,161.387274 L22.3021786,161.387274 Z" id="Path" fill="url(#radialGradient-30)"></path>
            <polygon id="Path" fill="url(#linearGradient-31)" opacity="0.57" points="77.3634492 130.777187 28.3634492 166.610397 28.8555565 166.777187"></polygon>
            <path d="M29.220916,166.895301 C29.302645,167.050692 29.2439071,167.242915 29.0892818,167.326082 C28.9346565,167.40925 28.7418964,167.352298 28.657298,167.198451 C28.5726996,167.044604 28.6278605,166.851323 28.780916,166.765301 C28.9391243,166.688235 29.1299943,166.744628 29.220916,166.895301 L29.220916,166.895301 Z" id="Path" fill="url(#radialGradient-32)"></path>
            <polygon id="Path" fill="url(#linearGradient-33)" opacity="0.57" points="33.766492 160.435878 57.433423 145.435878 33.433423 159.758167"></polygon>
            <path d="M35.8279817,159.903023 C35.8800336,160.018262 35.8865154,160.150597 35.8459993,160.270879 C35.8054831,160.391161 35.7212927,160.489522 35.6119732,160.544296 C35.4658741,160.666688 35.2638201,160.682867 35.101876,160.585141 C34.939932,160.487415 34.8507692,160.2955 34.8767796,160.10064 C34.9027899,159.90578 35.0387258,159.747287 35.2199577,159.700516 C35.4411335,159.582526 35.7111677,159.672463 35.8279817,159.903023 Z" id="Path" fill="url(#radialGradient-34)"></path>
            <path d="M30.1904097,159.26147 C33.9484043,164.759164 33.9077578,172.009614 30.0883606,177.464835 C26.2689634,182.920055 19.4696126,185.439129 13.0175497,183.789356 C6.56548676,182.139582 1.81011046,176.665998 1.07844958,170.047086 C0.346788693,163.428173 3.7918644,157.048225 9.72783949,154.029251 C16.8945382,150.384343 25.6532588,152.623922 30.1904097,159.26147 Z" id="Path" fill-opacity="0.5" fill="url(#radialGradient-35)" opacity="0.78" style="mix-blend-mode: color-dodge;"></path>
        </g>
        <g id="Asset-1" transform="translate(1226.000000, 130.000000) rotate(-11.000000) translate(-1226.000000, -130.000000) translate(1116.000000, 53.000000)" fill-rule="nonzero">
            <polygon id="Path" fill="url(#linearGradient-36)" opacity="0.57" points="187.997962 22.7189456 55.2326043 113.348469 17.7173188 141.718946 13.9979619 137.457455"></polygon>
            <path d="M20.1165196,135.386358 C21.0744159,136.711121 21.1214047,138.483225 20.2350447,139.856337 C19.3486846,141.229448 17.7088,141.924991 16.098578,141.610783 C14.488356,141.296574 13.2344774,140.036362 12.9357781,138.432006 C12.6370789,136.82765 13.3541589,135.204641 14.7445501,134.338107 C16.5196714,133.155401 18.9226054,133.624294 20.1165196,135.386358 L20.1165196,135.386358 Z" id="Path" fill="url(#radialGradient-22)"></path>
            <polygon id="Path" fill="url(#linearGradient-37)" opacity="0.57" points="164.256616 40.0327183 48.9940353 115.916712 41.2566162 121.010701 41.7016469 122.032718"></polygon>
            <path d="M42.7265068,119.500923 C42.8344586,119.754453 42.7190317,120.047701 42.4672313,120.159626 C42.3032508,120.230976 42.1136616,120.209424 41.9698801,120.103088 C41.8260987,119.996751 41.7499688,119.821785 41.7701679,119.644098 C41.790367,119.466411 41.9038263,119.312997 42.0678069,119.241647 C42.3213357,119.133695 42.6145826,119.249122 42.7265068,119.500923 L42.7265068,119.500923 Z" id="Path" fill="url(#radialGradient-24)"></path>
            <polygon id="Path" fill="url(#linearGradient-38)" opacity="0.57" points="219.009926 0.0531047982 32.0099261 125.371399 33.0035199 127.053105"></polygon>
            <path d="M32.7654674,128.755633 C32.8430104,128.916535 32.828823,129.106582 32.7282496,129.254187 C32.6276762,129.401791 32.4559962,129.484529 32.2778798,129.471232 C32.0997635,129.457935 31.9422708,129.350625 31.8647279,129.189724 C31.7448569,128.940992 31.8493197,128.642181 32.098052,128.52231 C32.3467843,128.402439 32.6455964,128.506902 32.7654674,128.755633 L32.7654674,128.755633 Z" id="Path" fill="url(#radialGradient-26)"></path>
            <polygon id="Path" fill="url(#linearGradient-39)" opacity="0.57" points="19.2449932 137.368032 44.7288229 121.368032 18.7288229 136.395823"></polygon>
            <path d="M21.0237383,136.640497 C21.0944488,136.761143 21.109974,136.906601 21.066335,137.039591 C21.0226959,137.172581 20.9241346,137.280177 20.795911,137.334802 C20.5506665,137.448468 20.2600457,137.344441 20.1413627,137.100507 C20.0226797,136.856573 20.1193506,136.561968 20.3590889,136.436985 C20.5988272,136.312002 20.893933,136.402361 21.0237383,136.640497 L21.0237383,136.640497 Z" id="Path" fill="url(#radialGradient-28)"></path>
            <polygon id="Path" fill="url(#linearGradient-40)" opacity="0.57" points="17.9943723 134.729774 86.6418421 86.7297737 15.6418421 134.038447 16.9602968 134.192562"></polygon>
            <path d="M18.6724816,133.156133 C18.7574076,133.340402 18.7220819,133.557633 18.5831193,133.705652 C18.4441567,133.853672 18.2292184,133.903018 18.039398,133.83048 C17.8495776,133.757941 17.7226596,133.577959 17.7183384,133.375184 C17.7140171,133.17241 17.8331528,132.987207 18.0197114,132.906683 C18.1393841,132.853052 18.2755428,132.849221 18.3980542,132.896037 C18.5205657,132.942854 18.6193271,133.036458 18.6724816,133.156133 L18.6724816,133.156133 Z" id="Path" fill="url(#radialGradient-30)"></path>
            <polygon id="Path" fill="url(#linearGradient-41)" opacity="0.57" points="64.0623803 108.518509 23.0623803 138.379518 23.4741436 138.518509"></polygon>
            <path d="M23.8187736,137.300915 C23.9005026,137.456305 23.8417647,137.648529 23.6871394,137.731696 C23.5325141,137.814863 23.339754,137.757911 23.2551557,137.604064 C23.1705573,137.450218 23.2257182,137.256937 23.3787736,137.170915 C23.5369819,137.093849 23.7278519,137.150242 23.8187736,137.300915 L23.8187736,137.300915 Z" id="Path" fill="url(#radialGradient-32)"></path>
            <polygon id="Path" fill="url(#linearGradient-42)" opacity="0.57" points="27.7731568 132.404755 47.4955993 119.404755 27.4955993 131.817406"></polygon>
            <path d="M30.0442214,132.271891 C30.0962733,132.38713 30.1027551,132.519465 30.0622389,132.639747 C30.0217228,132.760029 29.9375324,132.85839 29.8282128,132.913165 C29.6821138,133.035556 29.4800597,133.051735 29.3181157,132.954009 C29.1561716,132.856283 29.0670089,132.664368 29.0930192,132.469508 C29.1190296,132.274648 29.2549655,132.116155 29.4361974,132.069384 C29.6573732,131.951394 29.9274074,132.041331 30.0442214,132.271891 Z" id="Path" fill="url(#radialGradient-34)"></path>
            <path d="M25.0829854,132.045473 C28.2537933,136.684152 28.2194979,142.80172 24.9968815,147.404562 C21.7742651,152.007404 16.0373128,154.132873 10.5933848,152.740877 C5.14945666,151.34888 1.13710791,146.730544 0.519769037,141.145836 C-0.097569835,135.561129 2.8092128,130.178048 7.81769178,127.630788 C13.8645938,124.555397 21.2547643,126.445042 25.0829854,132.045473 Z" id="Path" fill-opacity="0.5" fill="url(#radialGradient-35)" opacity="0.78" style="mix-blend-mode: color-dodge;"></path>
        </g>
        <g id="Asset-1" transform="translate(1308.395385, 179.981462) rotate(-11.000000) translate(-1308.395385, -179.981462) translate(1141.395385, 63.481462)" fill-rule="nonzero">
            <polygon id="Path" fill="url(#linearGradient-43)" opacity="0.57" points="287.674799 34.5233725 86.2377045 173.133232 29.317961 216.523372 23.6747988 210.005799 86.6199186 168.16579"></polygon>
            <path d="M30.798184,207.018752 C32.3547655,209.171493 32.4311223,212.051162 30.9907873,214.282468 C29.5504523,216.513774 26.8856397,217.64403 24.2690289,217.133442 C21.6524181,216.622854 19.6148654,214.575009 19.1294792,211.96793 C18.6440929,209.360852 19.8093479,206.723462 22.0687337,205.315344 C24.9533058,203.393448 28.8580736,204.155399 30.798184,207.018752 L30.798184,207.018752 Z" id="Path" fill="url(#radialGradient-22)"></path>
            <polygon id="Path" fill="url(#linearGradient-44)" opacity="0.57" points="250.933453 60.8371452 75.6968463 178.364794 63.9334531 186.254264 64.6100445 187.837145"></polygon>
            <path d="M65.9071118,182.880137 C66.1230154,183.387196 65.8921615,183.973692 65.3885607,184.197542 C65.0605996,184.340243 64.6814212,184.297138 64.3938583,184.084465 C64.1062954,183.871792 63.9540357,183.521861 63.9944338,183.166486 C64.034832,182.811112 64.2617507,182.504285 64.5897118,182.361584 C65.0967695,182.145679 65.6832632,182.376534 65.9071118,182.880137 L65.9071118,182.880137 Z" id="Path" fill="url(#radialGradient-24)"></path>
            <polygon id="Path" fill="url(#linearGradient-45)" opacity="0.57" points="333.515716 0.863131688 49.5157157 193.280985 51.024703 195.863132"></polygon>
            <path d="M50.0747684,196.072221 C50.2298543,196.394023 50.2014796,196.774118 50.0003328,197.069328 C49.799186,197.364537 49.455826,197.530011 49.0995932,197.503418 C48.7433605,197.476825 48.4283752,197.262204 48.2732894,196.940402 C48.0335474,196.442938 48.2424729,195.845315 48.7399376,195.605574 C49.2374022,195.365833 49.8350263,195.574758 50.0747684,196.072221 L50.0747684,196.072221 Z" id="Path" fill="url(#radialGradient-26)"></path>
            <polygon id="Path" fill="url(#linearGradient-46)" opacity="0.57" points="150.069972 132.842912 29.9739201 209.003392 30.7481757 210.583232"></polygon>
            <path d="M31.090246,209.660302 C31.231667,209.901594 31.2627173,210.19251 31.1754392,210.45849 C31.0881612,210.724471 30.8910385,210.939661 30.6345912,211.048912 C30.1441023,211.276244 29.5628606,211.06819 29.3254947,210.580322 C29.0881287,210.092455 29.2814705,209.503245 29.7609471,209.253278 C30.2404237,209.003312 30.8306352,209.184031 31.090246,209.660302 L31.090246,209.660302 Z" id="Path" fill="url(#radialGradient-28)"></path>
            <polygon id="Path" fill="url(#linearGradient-47)" opacity="0.57" points="29.4464885 205.682733 131.93426 132.682733 25.9342603 204.631341 27.9026575 204.865724"></polygon>
            <path d="M28.3509868,203.073192 C28.520839,203.441731 28.4501874,203.876192 28.1722623,204.172231 C27.8943371,204.468271 27.4644605,204.566962 27.0848197,204.421885 C26.7051789,204.276809 26.4513429,203.916844 26.4427004,203.511295 C26.434058,203.105746 26.6723294,202.73534 27.0454465,202.574292 C27.2847918,202.46703 27.5571093,202.459368 27.8021322,202.553001 C28.047155,202.646634 28.2446779,202.833842 28.3509868,203.073192 L28.3509868,203.073192 Z" id="Path" fill="url(#radialGradient-30)"></path>
            <polygon id="Path" fill="url(#linearGradient-48)" opacity="0.57" points="97.9788494 165.761245 35.9788494 211.548126 36.6015159 211.761245"></polygon>
            <path d="M37.6619437,211.171948 C37.8254017,211.482728 37.7079259,211.867175 37.3986753,212.03351 C37.0894247,212.199844 36.7039045,212.08594 36.5347078,211.778246 C36.3655111,211.470552 36.4758329,211.083992 36.7819437,210.911948 C37.0983604,210.757815 37.4801003,210.870602 37.6619437,211.171948 L37.6619437,211.171948 Z" id="Path" fill="url(#radialGradient-32)"></path>
            <polygon id="Path" fill="url(#linearGradient-49)" opacity="0.57" points="44.183441 203.201568 72.7809826 185.201568 43.7809826 202.388315"></polygon>
            <path d="M44.8230853,202.12311 C44.9271892,202.353587 44.9401527,202.618257 44.8591204,202.858821 C44.7780881,203.099385 44.6097073,203.296108 44.3910682,203.405656 C44.0988702,203.65044 43.6947621,203.682797 43.3708739,203.487345 C43.0469858,203.291893 42.8686604,202.908063 42.920681,202.518343 C42.9727017,202.128623 43.2445736,201.811638 43.6070373,201.718095 C44.049389,201.482114 44.5894573,201.661988 44.8230853,202.12311 Z" id="Path" fill="url(#radialGradient-34)"></path>
            <path d="M37.1378105,201.065721 C41.8353036,207.937839 41.7844956,217.000902 37.0102491,223.819927 C32.2360026,230.638953 23.7368141,233.787795 15.6717354,231.725578 C7.60665677,229.663362 1.66243639,222.821382 0.747860287,214.547741 C-0.16671582,206.2741 4.13962882,198.299166 11.5595977,194.525448 C20.5179711,189.969313 31.4663718,192.768787 37.1378105,201.065721 Z" id="Path" fill-opacity="0.5" fill="url(#radialGradient-35)" opacity="0.78" style="mix-blend-mode: color-dodge;"></path>
        </g>
        <path d="M280,506 C278.896552,506 278,505.103448 278,504 C278,502.896552 278.896552,502 280,502 C281.103448,502 282,502.896552 282,504 C282,505.103448 281.103448,506 280,506" id="Fill-1" fill="#CFF4FF"></path>
        <g id="Group-3" transform="translate(1118.000000, 60.000000)">
            <mask id="mask-51" fill="white">
                <use xlink:href="#path-50"></use>
            </mask>
            <g id="Clip-2"></g>
            <path d="M1.5,3 C0.671858217,3 0,2.32832215 0,1.49959732 C0,0.670872483 0.671858217,0 1.5,0 C2.32814178,0 3,0.670872483 3,1.49959732 C3,2.32832215 2.32814178,3 1.5,3" id="Fill-1" fill="#FFFFFF" mask="url(#mask-51)"></path>
        </g>
        <g id="Group-3" transform="translate(1070.000000, 141.000000)">
            <mask id="mask-53" fill="white">
                <use xlink:href="#path-52"></use>
            </mask>
            <g id="Clip-2"></g>
            <path d="M2,4 C0.895810956,4 0,3.10442953 0,1.99946309 C0,0.894496644 0.895810956,0 2,0 C3.10418904,0 4,0.894496644 4,1.99946309 C4,3.10442953 3.10418904,4 2,4" id="Fill-1" fill="#FFFFFF" mask="url(#mask-53)"></path>
        </g>
        <g id="Group-3" transform="translate(1279.000000, 77.000000)">
            <mask id="mask-55" fill="white">
                <use xlink:href="#path-54"></use>
            </mask>
            <g id="Clip-2"></g>
            <path d="M2,4 C0.895810956,4 0,3.10442953 0,1.99946309 C0,0.894496644 0.895810956,0 2,0 C3.10418904,0 4,0.894496644 4,1.99946309 C4,3.10442953 3.10418904,4 2,4" id="Fill-1" fill="#00CFFF" mask="url(#mask-55)"></path>
        </g>
        <g id="Group-3" transform="translate(1250.000000, 281.000000)">
            <polygon id="Fill-1" fill="#00FF2E" points="3.5 0 2 4.00057963 3.5 8 5 4.00057963"></polygon>
            <polygon id="Fill-2" fill="#00FEFF" points="0 4.5 4.00057963 6 8 4.5 4.00057963 3"></polygon>
        </g>
        <path d="M1209,1005 C1206.7931,1005 1205,1003.21155 1205,1000.997 C1205,998.788447 1206.7931,997 1209,997 C1211.2069,997 1213,998.788447 1213,1000.997 C1213,1003.21155 1211.2069,1005 1209,1005" id="Fill-1" fill="#3AC435" opacity="0.848307292"></path>
        <g id="Group-3" transform="translate(1340.000000, 923.000000)">
            <mask id="mask-57" fill="white">
                <use xlink:href="#path-56"></use>
            </mask>
            <g id="Clip-2"></g>
            <path d="M3.00080364,6 C1.3436914,6 0,4.6563086 0,2.99919636 C0,1.3436914 1.3436914,0 3.00080364,0 C4.6563086,0 6,1.3436914 6,2.99919636 C6,4.6563086 4.6563086,6 3.00080364,6" id="Fill-1" fill="#FFFFFF" mask="url(#mask-57)"></path>
        </g>
        <g id="Group-3" transform="translate(1175.000000, 1054.000000)">
            <mask id="mask-59" fill="white">
                <use xlink:href="#path-58"></use>
            </mask>
            <g id="Clip-2"></g>
            <path d="M5.00133941,10 C2.23948567,10 0,7.76051433 0,4.99866059 C0,2.23948567 2.23948567,0 5.00133941,0 C7.76051433,0 10,2.23948567 10,4.99866059 C10,7.76051433 7.76051433,10 5.00133941,10" id="Fill-1" fill="#FFFFFF" mask="url(#mask-59)"></path>
        </g>
        <path d="M1316,983 C1314.89655,983 1314,982.103448 1314,981 C1314,979.896552 1314.89655,979 1316,979 C1317.10345,979 1318,979.896552 1318,981 C1318,982.103448 1317.10345,983 1316,983" id="Fill-1" fill="#D1FFCF"></path>
        <g id="Asset-1" transform="translate(1381.000000, 354.000000)" fill-rule="nonzero">
            <path d="M86,43.3537815 C86,59.121322 77.3097881,73.6025081 63.4027387,81.0063144 C49.4956893,88.4101207 32.6423503,87.5281271 19.5823705,78.7130427 C17.680496,77.4172781 15.8830696,75.9742003 14.2066237,74.3970824 C-3.32644462,58.7136481 -4.83876581,31.7719203 10.8287597,14.221049 C26.4962853,-3.32982227 53.4106844,-4.84367907 70.9437527,10.8397552 C72.0250512,11.7573513 73.0585386,12.7299535 74.040128,13.7537157 C74.6099709,14.3378823 75.1592171,14.9289215 75.6810009,15.5474508 L75.7565223,15.6299214 C76.44308,16.3996468 77.0541163,17.203735 77.6514215,18.0146957 C83.0842647,25.3424543 86.0119597,34.2284509 86,43.3537815 Z" id="Path" fill="url(#linearGradient-60)"></path>
            <path d="M86,42.9498232 C86.0006794,58.8667188 77.2335718,73.4850752 63.2045854,80.9590126 C49.1755989,88.4329501 32.1744897,87.542602 19,78.6440184 L19,78.6440184 C19,78.6440184 20.135827,73.6836006 26.1196962,70.5616593 C32.1035654,67.4397181 25.2539744,62.0214156 23.5779369,59.2949202 C21.9018995,56.5684248 25.3024548,53.3840447 30.2197547,57.0332472 C35.1370546,60.6824496 29.8249855,48.4930034 35.9958506,41.6732961 C42.1667157,34.8535889 45.9412628,49.4920246 48.5245767,52.2115823 C51.1078906,54.9311401 57.6111928,60.1898767 62.9925196,54.5842577 C68.3738464,48.9786387 64.8971076,26.1399039 68.5954712,19.7156426 C71.642812,14.4014047 73.4435133,13.2844435 73.9352433,13.0555012 C73.990273,13.0294605 74.0484892,13.0107994 74.1083877,13 L75.5905034,14.8662271 L75.666687,14.9494789 L77.5782007,17.3568425 C83.0615097,24.75782 86.0150254,33.7333113 86,42.9498232 Z" id="Path" fill="#142610" opacity="0.5"></path>
            <path d="M16.1710129,67.3525913 C17.8666294,69.7568291 18.5006426,72.2191753 17.5717396,72.8511049 C16.6428366,73.4830345 14.527002,72.0448499 12.8313854,69.6478757 C11.1357688,67.2509014 10.5017556,64.7812916 11.4232864,64.149362 C12.3448172,63.5174325 14.4753963,64.9483535 16.1710129,67.3525913 Z" id="Path" fill="url(#linearGradient-61)" opacity="0.58"></path>
            <path d="M80.8702017,54.928104 C79.1340994,59.5604885 75.9922463,62.6788403 73.8414476,61.8732082 C71.6906488,61.0675761 71.3813836,56.7060507 73.1385722,52.0736662 C74.8957607,47.4412817 78.0165275,44.3159848 80.1673262,45.128562 C82.318125,45.9411392 82.6063039,50.2887744 80.8702017,54.928104 Z" id="Path" fill="#142710" opacity="0.58"></path>
            <path d="M30.9057052,46.9023258 C31.4086072,50.4785325 29.8503192,53.6405067 27.4137234,53.9718926 C24.9771276,54.3032786 22.5971969,51.6659988 22.0942948,48.0897921 C21.5913928,44.5135854 23.1496808,41.3516112 25.5862766,41.0271291 C28.0228724,40.702647 30.4028031,43.3261191 30.9057052,46.9023258 Z" id="Path" fill="url(#linearGradient-62)" opacity="0.58"></path>
            <ellipse id="Oval" fill="#163510" opacity="0.58" cx="59" cy="40" rx="6" ry="11"></ellipse>
            <path d="M77.2995936,45.1158493 C77.639249,44.9825693 78.0160695,44.9636933 78.3683814,45.0623108 C80.15668,45.5843117 80.5269136,49.338703 79.2206175,53.4477871 C77.9143213,57.5568713 75.3925409,60.461338 73.6321845,59.9393371 C73.2337648,59.820069 72.9001419,59.5557225 72.7031076,59.2031819 C71.7600595,57.8312564 71.7460884,54.7929434 72.7799485,51.5471684 C73.8138086,48.3013934 75.6929192,45.6713119 77.2995936,45.1158493 Z" id="Path" fill="#131A12"></path>
            <path d="M77.2964967,45 C78.2434787,46.4608076 78.2504418,49.6817102 77.2199026,53.152019 C76.1893634,56.6223278 74.3093258,59.4085511 72.7008491,60 C71.7608303,58.5391924 71.746904,55.304038 72.7774432,51.847981 C73.8079824,48.391924 75.6949832,45.5914489 77.2964967,45 Z" id="Path" fill="#0B150B"></path>
            <path d="M74.5184767,21.7343865 C74.8089013,21.3764117 75.2108834,21.1286364 75.6586915,21.0315763 C77.9321686,20.595834 80.5810822,24.7213296 81.603104,30.2243331 C82.6251258,35.7273366 81.603104,40.5415861 79.343532,40.9703003 C78.8369251,41.059473 78.3158661,40.9460638 77.8904534,40.6540357 C76.0341281,39.6138767 74.1986604,36.1138821 73.3991195,31.7634873 C72.564816,27.3357834 73.0862557,23.3086812 74.5184767,21.7343865 Z" id="Path" fill="#131A12"></path>
            <path d="M74.4229598,22 C76.1625165,23.0430267 77.8694972,26.5385757 78.6317749,30.9150593 C79.4005677,35.4043027 78.9249586,39.421365 77.5828287,41 C75.843272,39.9569733 74.1232609,36.4473294 73.3740136,32.0849407 C72.5921904,27.6168398 73.0808299,23.578635 74.4229598,22 Z" id="Path" fill="#0B150B"></path>
            <path d="M66.7906982,66.0040607 C67.0328481,65.9832806 67.2751153,66.0426678 67.4788038,66.1727367 C68.4972001,66.8474408 67.9742399,69.3236049 66.3365485,71.7120574 C64.6988571,74.10051 62.5313244,75.4971475 61.5198092,74.8359375 C61.2906486,74.6754923 61.1349601,74.4331807 61.0863027,74.1612334 C60.762893,73.1019479 61.3615449,71.145306 62.6620645,69.2561345 C63.9625841,67.366963 65.6690861,66.058037 66.7906982,66.0040607 Z" id="Path" fill="#131A12"></path>
            <path d="M66.9150681,66 C67.2380111,67.0354493 66.6272275,68.9348722 65.3003526,70.7881286 C63.9734778,72.641385 62.2323934,73.9472383 61.0880516,74 C60.758088,72.9645507 61.3688717,71.0519373 62.6957465,69.2052762 C64.0226213,67.358615 65.7707263,66.0527617 66.9150681,66 Z" id="Path" fill="#0B150B"></path>
            <path d="M73.5265305,40.1037364 C73.6604228,40.0211849 73.8174463,39.9863842 73.9728716,40.0048148 C74.7620546,40.1169259 75.1825209,41.7656179 74.9237724,43.697885 C74.6650239,45.6301521 73.8111538,47.0941906 73.0284396,46.9952691 C72.8525516,46.9725109 72.6935356,46.8771493 72.5885672,46.7314783 C72.0904763,46.1775178 71.8705401,44.8189956 72.0775389,43.3021989 C72.2845377,41.7854022 72.9184715,40.4730434 73.5265305,40.1037364 Z" id="Path" fill="#163510"></path>
            <path d="M73.4453328,40 C73.9169298,40.5786853 74.1190427,42.0079681 73.929179,43.625498 C73.7393153,45.2430279 73.157475,46.6165339 72.5572607,47 C72.0856638,46.4143426 71.8774262,44.9780876 72.0734145,43.374502 C72.2694029,41.7709163 72.8696171,40.3904382 73.4453328,40 Z" id="Path" fill="#142610"></path>
            <path d="M16.9216884,70.4161185 C16.8669921,70.5943146 16.7476233,70.7503598 16.5830616,70.8587892 C15.7364947,71.4020669 13.8961319,70.3289258 12.4680103,68.4777575 C11.0398887,66.6265892 10.5761173,64.681521 11.4226842,64.1382433 C11.6131856,64.0227028 11.8446397,63.9771716 12.0704919,64.0108078 C13.0201191,64.0778791 14.4114335,65.0571204 15.5377355,66.5259822 C16.6640376,67.994844 17.2161465,69.5978485 16.9216884,70.4161185 Z" id="Path" fill="url(#linearGradient-63)"></path>
            <path d="M16.92181,71 C15.9736576,70.9267016 14.5992042,69.8565445 13.4673013,68.2513089 C12.3353985,66.6460733 11.7841471,64.8942408 12.0781478,64 C13.0263002,64.0732984 14.4154537,65.1434555 15.5400065,66.7486911 C16.6645594,68.3539267 17.2158108,70.1057592 16.92181,71 Z" id="Path" fill="#205325"></path>
            <path d="M5.76309658,38.9484198 C5.67771593,38.9967565 5.58209364,39.0116061 5.48946885,38.9909128 C5.01789765,38.8492694 4.86070725,37.6240542 5.13433498,36.2501133 C5.40796272,34.8761725 6.01343685,33.8775867 6.47918618,34.0121479 C6.58376884,34.0450006 6.67362585,34.1263469 6.72952644,34.2387773 C7.03606031,35.025406 7.08396026,35.9247785 6.86342938,36.7529474 C6.61308911,37.8648479 6.17062725,38.7713656 5.76309658,38.9484198 Z" id="Path" fill="url(#linearGradient-64)"></path>
            <path d="M5.33594859,39 C4.93978903,38.1588582 4.89217936,37.2044596 5.20279829,36.3308271 C5.50042836,35.1503759 6.08785612,34.2255639 6.63612203,34 C7.04851326,34.8351257 7.11295481,35.7899461 6.81626654,36.6691729 C6.47947463,37.8496241 5.8842145,38.8120301 5.33594859,39 Z" id="Path" fill="#205325"></path>
            <path d="M18.725078,63.5594931 C18.626007,63.7289643 18.4689898,63.8627752 18.2789417,63.939693 C17.303491,64.3198928 15.7231098,62.86246 14.7400975,60.6939126 C13.7570853,58.5253652 13.7495236,56.4694696 14.7400975,56.0611068 C14.9585082,55.9796311 15.2022338,55.9796311 15.4206445,56.0611068 C16.3507253,56.3216141 17.5076551,57.6030285 18.2789417,59.3209686 C19.0502282,61.0389088 19.2090225,62.7498082 18.725078,63.5594931 Z" id="Path" fill="url(#linearGradient-65)"></path>
            <path d="M18.7234448,63 C17.7626815,62.75635 16.5753968,61.5644403 15.7630441,59.9510818 C14.9506914,58.3377234 14.7788476,56.7111947 15.286568,56 C16.2473313,56.24365 17.4424271,57.4421449 18.2391576,59.0489182 C19.0358882,60.6556914 19.2233542,62.2427093 18.7234448,63 Z" id="Path" fill="#205325"></path>
            <path d="M64,40.9969201 C64,45.9714027 61.5367882,50 58.5035189,50 C58.3453743,50.0005165 58.1875203,49.9868477 58.0319898,49.9591549 C55.2168906,49.5712677 53,45.7060062 53,40.9969201 C53,36.2878339 55.2098528,32.4293774 58.0319898,32.0414903 C58.1870238,32.0104215 58.3452426,31.9967211 58.5035189,32.0006601 C61.5367882,32.0006601 64,36.0156324 64,40.9969201 Z" id="Path" fill="#152111"></path>
            <path d="M63,40.9965818 C63,45.7204709 60.8011204,49.6034941 58.0070028,50 C55.2058824,49.6103304 53,45.7273073 53,40.9965818 C53,36.2658564 55.1988796,32.3896696 58.0070028,32 C60.8011204,32.3965059 63,36.2795291 63,40.9965818 Z" id="Path" fill="#101C0E"></path>
            <path d="M51,73.4868301 C51,75.4255304 49.6561153,76.9949544 48.0050569,76.9949544 C47.9177196,77.0016819 47.8300168,77.0016819 47.7426794,76.9949544 C46.143012,76.6422081 45,75.1856931 45,73.5000185 C45,71.8143439 46.143012,70.357829 47.7426794,70.0050827 C47.830015,69.9983058 47.9177214,69.9983058 48.0050569,70.0050827 C49.6561153,69.9721116 51,71.5481298 51,73.4868301 Z" id="Path" fill="#163510"></path>
            <path d="M50.9938973,73.4735849 C51.1001734,75.1995275 49.8070814,76.7220998 47.9989794,77 C46.249825,76.6467426 45,75.1881171 45,73.5 C45,71.8118829 46.249825,70.3532574 47.9989794,70 C49.7865133,70.2730963 51.0739785,71.7663325 50.9938973,73.4735849 L50.9938973,73.4735849 Z" id="Path" fill="#142610"></path>
            <path d="M22.0019247,63.4959128 C21.9668102,64.2789034 22.4163581,64.9517964 23.0067789,65 L23.0930854,65 C23.6230518,64.8434195 24,64.2199624 24,63.5 C24,62.7800376 23.6230518,62.1565805 23.0930854,62 L23.0067789,62 C22.4204773,62.0525332 21.9737242,62.7176084 22.0019247,63.4959128 L22.0019247,63.4959128 Z" id="Path" fill="#14410D"></path>
            <path d="M22.0019601,63.5040872 C21.9706337,64.2413698 22.4050388,64.8877205 23.0073465,65 C23.5874154,64.8434195 24,64.2199624 24,63.5 C24,62.7800376 23.5874154,62.1565805 23.0073465,62 C22.4023345,62.1125514 21.9670454,62.7637564 22.0019601,63.5040872 L22.0019601,63.5040872 Z" id="Path" fill="#205325"></path>
            <path d="M55.9976702,64.5081522 C56.0258788,65.2813865 55.5845836,65.9433993 55.0032101,66 L54.9172691,66 C54.3827802,65.851193 54,65.2252368 54,64.5 C54,63.7747632 54.3827802,63.148807 54.9172691,63 L55.0032101,63 C55.5912298,63.0522972 56.0362443,63.7271858 55.9976702,64.5081522 L55.9976702,64.5081522 Z" id="Path" fill="#163510"></path>
            <path d="M55.9983348,64.2104707 C55.886568,64.7240392 55.3922654,65.0644496 54.8667898,64.9897296 C54.3413142,64.9150095 53.9638688,64.4506409 54.0027515,63.9267087 C54.0416342,63.4027765 54.4835848,62.9979577 55.0144534,63 C55.6062129,63.0964156 56.0300185,63.6178209 55.9983348,64.2104707 Z" id="Path" fill="#142610"></path>
            <path d="M52.9961704,47 C53.0624201,48.0353152 52.2612637,48.9287136 51.2026673,49 L51.045821,49 C49.9159453,49 49,48.1045695 49,47 C49,45.8954305 49.9159453,45 51.045821,45 L51.2026673,45 C52.2612637,45.0712864 53.0624201,45.9646848 52.9961704,47 L52.9961704,47 Z" id="Path" fill="#2B6725"></path>
            <path d="M51.9693201,47.0193715 C52.0916991,47.6751423 51.8413882,48.3471901 51.3358205,48.7202243 C50.8302527,49.0932586 50.1697473,49.0932586 49.6641795,48.7202243 C49.1586118,48.3471901 48.9083009,47.6751423 49.0306799,47.0193715 C48.9751392,46.0309206 49.6107236,45.1574002 50.5,45 C51.3892764,45.1574002 52.0248608,46.0309206 51.9693201,47.0193715 L51.9693201,47.0193715 Z" id="Path" fill="#142610"></path>
            <path d="M57.9976939,53.0066667 C58.0313613,53.5236579 57.5953276,53.9678357 57.0225734,54 L56.9413133,54 C56.3984827,53.9197369 56,53.4964106 56,53 C56,52.5035894 56.3984827,52.0802631 56.9413133,52 L57.0225734,52 C57.5995215,52.0356245 58.0356954,52.4859091 57.9976939,53.0066667 Z" id="Path" fill="#2B6725"></path>
            <path d="M57.9977927,53.2113207 C57.8856764,53.7244193 57.3917669,54.0643491 56.8667578,53.9897475 C56.3417488,53.915146 55.964411,53.4514157 56.002668,52.927822 C56.040925,52.4042283 56.48175,51.9990602 57.0121411,52 C57.6074401,52.0912619 58.0345866,52.6162049 57.9977927,53.2113207 L57.9977927,53.2113207 Z" id="Path" fill="#142610"></path>
            <path d="M69.9976939,47.0066667 C70.0313613,47.5236579 69.5953276,47.9678357 69.0225734,48 L68.9413133,48 C68.3984827,47.9197369 68,47.4964106 68,47 C68,46.5035894 68.3984827,46.0802631 68.9413133,46 L69.0225734,46 C69.5995215,46.0356245 70.0356954,46.4859091 69.9976939,47.0066667 L69.9976939,47.0066667 Z" id="Path" fill="#2B6725"></path>
            <path d="M69.9977927,47.2113207 C69.8856764,47.7244193 69.3917669,48.0643491 68.8667578,47.9897475 C68.3417488,47.915146 67.964411,47.4514157 68.002668,46.927822 C68.040925,46.4042283 68.48175,45.9990602 69.0121411,46 C69.6074401,46.0912619 70.0345866,46.6162049 69.9977927,47.2113207 L69.9977927,47.2113207 Z" id="Path" fill="#142610"></path>
            <path d="M65.9976765,29 C66.0315776,29.5158186 65.6008821,29.9608785 65.0299517,30 L64.9413051,30 C64.3984792,29.9197369 64,29.4964106 64,29 C64,28.5035894 64.3984792,28.0802631 64.9413051,28 L65.0299517,28 C65.602819,28.0356163 66.035687,28.4829211 65.9976765,29 Z" id="Path" fill="#2B6725"></path>
            <path d="M64.9982696,29.203198 C64.8902669,29.7184621 64.3975047,30.0626428 63.871172,29.9904445 C63.3448393,29.9182463 62.9650809,29.4543798 63.0025486,28.9294403 C63.0400162,28.4045008 63.4818862,27.9981563 64.01324,28 C64.6048611,28.0910047 65.0306597,28.6111082 64.9982696,29.203198 L64.9982696,29.203198 Z" id="Path" fill="#142610"></path>
            <path d="M52.9949868,29.9905808 C53.0339039,30.4914918 52.8450369,30.9854128 52.4703153,31.3626901 C52.0955936,31.7399675 51.5660259,31.9693812 50.9991796,32 L50.8216167,32 C49.7581705,31.7947626 49,30.9623477 49,30 C49,29.0376523 49.7581705,28.2052374 50.8216167,28 L50.9991796,28 C52.1711901,28.0639683 53.0637583,28.9541992 52.9949868,29.9905808 L52.9949868,29.9905808 Z" id="Path" fill="#2B6725"></path>
            <path d="M52.9966964,29.9968603 C53.060307,30.9783253 52.1985414,31.8412746 50.9963043,32 C49.8308767,31.7947626 49,30.9623477 49,30 C49,29.0376523 49.8308767,28.2052374 50.9963043,28 C52.1973547,28.155829 53.0598345,29.0167861 52.9966964,29.9968603 L52.9966964,29.9968603 Z" id="Path" fill="#142610"></path>
            <path d="M59.9988423,61.4940476 C60.0180164,61.7550473 59.7967616,61.9809392 59.5032758,62 L59.4563979,62 C59.1817453,61.9634336 58.9840627,61.7463838 59.0010126,61.5 C58.9872423,61.2545294 59.1834122,61.0391405 59.4563979,61 L59.5032758,61 C59.7912782,61.019044 60.0104681,61.237562 59.9988423,61.4940476 L59.9988423,61.4940476 Z" id="Path" fill="#163510"></path>
            <path d="M59.9992655,60.5999875 C59.9460259,60.858306 59.6994429,61.0312814 59.435787,60.9952618 C59.1721311,60.9592422 58.9820187,60.7266072 59.0013521,60.4636566 C59.0206856,60.2007059 59.2428201,59.9978136 59.5089623,60.0000178 C59.8028799,60.046984 60.0140916,60.3054377 59.9992655,60.5999875 L59.9992655,60.5999875 Z" id="Path" fill="#142610"></path>
            <path d="M55.9992494,71.4940476 C56.0146761,71.7560775 55.7904953,71.9809195 55.4947849,72 L55.4544277,72 C55.1890661,71.9484511 55,71.7404244 55,71.5 C55,71.2595756 55.1890661,71.0515489 55.4544277,71 L55.4947849,71 C55.7867242,71.0159769 56.0107757,71.2354019 55.9992494,71.4940476 Z" id="Path" fill="#163510"></path>
            <path d="M55.9992655,71.5999875 C55.9460259,71.858306 55.6994429,72.0312814 55.435787,71.9952618 C55.1721311,71.9592422 54.9820187,71.7266072 55.0013521,71.4636566 C55.0206856,71.2007059 55.2428201,70.9978136 55.5089623,71.0000178 C55.8028799,71.046984 56.0140916,71.3054377 55.9992655,71.5999875 L55.9992655,71.5999875 Z" id="Path" fill="#142610"></path>
            <path d="M49.9992391,69.5 C50.0146728,69.758747 49.7934999,69.9809272 49.5015059,70 L49.4544231,70 C49.1890642,69.9484511 49,69.7404244 49,69.5 C49,69.2595756 49.1890642,69.0515489 49.4544231,69 L49.5015059,69 C49.7934999,69.0190728 50.0146728,69.241253 49.9992391,69.5 Z" id="Path" fill="#163510"></path>
            <path d="M49.9992655,69.5999875 C49.9460259,69.858306 49.6994429,70.0312814 49.435787,69.9952618 C49.1721311,69.9592422 48.9820187,69.7266072 49.0013521,69.4636566 C49.0206856,69.2007059 49.2428201,68.9978136 49.5089623,69.0000178 C49.8028799,69.046984 50.0140916,69.3054377 49.9992655,69.5999875 L49.9992655,69.5999875 Z" id="Path" fill="#142610"></path>
            <path d="M41.9988298,70.4940476 C42.0182104,70.7550473 41.7945739,70.9809392 41.4979288,71 L41.4573152,71 C41.1902675,70.9484511 41,70.7404244 41,70.5 C41,70.2595756 41.1902675,70.0515489 41.4573152,70 L41.5182356,70 C41.8012432,70.0279338 42.0112864,70.2438568 41.9988298,70.4940476 Z" id="Path" fill="#2B6725"></path>
            <path d="M41.9992655,70.5999875 C41.9460259,70.858306 41.6994429,71.0312814 41.435787,70.9952618 C41.1721311,70.9592422 40.9820187,70.7266072 41.0013521,70.4636566 C41.0206856,70.2007059 41.2428201,69.9978136 41.5089623,70.0000178 C41.8028799,70.046984 42.0140916,70.3054377 41.9992655,70.5999875 Z" id="Path" fill="#142610"></path>
            <path d="M35.9969854,75.9821429 C36.0407837,76.4978667 35.6023127,76.9496863 35.0091999,77 L34.9268845,77 C34.3856333,76.8969021 34,76.4808489 34,76 C34,75.5191511 34.3856333,75.1030979 34.9268845,75 L35.0091999,75 C35.5855303,75.0499299 36.0179505,75.4798799 35.9969854,75.9821429 Z" id="Path" fill="#163510"></path>
            <path d="M35.9981162,76.2085929 C35.8872517,76.7229734 35.3927948,77.0644134 34.8668451,76.9897757 C34.3408955,76.9151379 33.9632583,76.4499386 34.0028466,75.9254433 C34.042435,75.400948 34.4857149,74.9964646 35.0170295,75.0000233 C35.6083933,75.0948481 36.0318712,75.6165171 35.9981162,76.2085929 Z" id="Path" fill="#142610"></path>
            <path d="M25.0018746,75.9940476 C24.9673212,76.5159588 25.4145576,76.9649524 26.0038901,77 L26.0913143,77 C26.6219384,76.8969021 27,76.4808489 27,76 C27,75.5191511 26.6219384,75.1030979 26.0913143,75 L26.0038901,75 C25.4200696,75.035059 24.9749316,75.4766574 25.0018746,75.9940476 Z" id="Path" fill="#163510"></path>
            <path d="M25.0014375,76.2020562 C25.1097444,76.7217901 25.6091502,77.0672055 26.1391465,76.9889558 C26.6691429,76.9107061 27.0451028,76.4360501 26.9956303,75.9076297 C26.9461579,75.3792093 26.4884872,74.9811027 25.9529989,75.0006928 C25.3782056,75.1109484 24.9726851,75.6229252 25.0014375,76.2020562 L25.0014375,76.2020562 Z" id="Path" fill="#142610"></path>
            <path d="M21.0024926,67.9927536 C20.9538088,69.0378234 21.6240893,69.933942 22.5038765,70 L22.6320434,70 C23.429146,69.8015906 24,68.9669824 24,68 C24,67.0330176 23.429146,66.1984094 22.6320434,66 L22.5038765,66 C21.6290917,66.0660903 20.9607285,66.953194 21.0024926,67.9927536 L21.0024926,67.9927536 Z" id="Path" fill="url(#linearGradient-66)"></path>
            <path d="M21.0023709,68 C20.955893,68.978669 21.5976798,69.8391855 22.4940025,70 C23.371541,69.8015906 24,68.9669824 24,68 C24,67.0330176 23.371541,66.1984094 22.4940025,66 C21.5993187,66.1638313 20.9589766,67.0224108 21.0023709,68 L21.0023709,68 Z" id="Path" fill="#205325"></path>
            <path d="M23.0524148,47.957831 C23.3900581,50.9794258 25.2016444,53.2258847 27.1041347,52.9818604 C27.2027836,52.9679425 27.3004226,52.9463575 27.396326,52.9172657 C29.1364878,52.4363943 30.2598011,49.9028481 29.9481304,47.0319742 C29.6364596,44.1611002 28.0001881,42.0079448 26.1950949,42.0079448 C26.0935948,41.9973517 25.9914175,41.9973517 25.8899173,42.0079448 C23.9939202,42.2735006 22.7212646,44.9577678 23.0524148,47.957831 Z" id="Path" fill="url(#linearGradient-67)"></path>
            <path d="M24.0567239,47.3947368 C24.4046017,50.0263158 26.1865885,52 28.1531635,52 C30.0558426,51.5592105 31.2840645,49.2368421 30.9432862,46.6052632 C30.6025078,43.9736842 28.8134215,42 26.839747,42 C24.9441675,42.4407895 23.7159455,44.7697368 24.0567239,47.3947368 Z" id="Path" fill="#205325"></path>
            <path d="M14.0135966,47.0727982 C14.1052963,47.6341461 14.6221495,48.0458012 15.1640116,47.9959036 L15.2473751,47.9959036 C15.7940347,47.8120387 16.0958454,47.3681996 15.9726367,46.9293426 C15.880937,46.3991807 15.4224382,46 14.9055851,46 L14.8222217,46 C14.3053685,46.0187116 13.9218968,46.5176875 14.0135966,47.0727982 Z" id="Path" fill="url(#linearGradient-60)"></path>
            <path d="M14.031461,47.0658307 C14.0355657,47.5294499 14.521647,47.9237541 15.1830648,48 C15.7737898,47.815725 16.1013057,47.3732364 15.9719588,46.9341693 C15.8722136,46.4012539 15.3734875,46 14.8112872,46 C14.2190902,46.1827593 13.8935472,46.6276965 14.031461,47.0658307 L14.031461,47.0658307 Z" id="Path" fill="#205325"></path>
            <path d="M8.01439022,40.0898289 C8.10651027,40.640866 8.61735785,41.0449599 9.16170363,40.9959788 L9.24544913,40.9959788 C9.81543862,40.8122362 10.1174951,40.352383 9.95728592,39.9122725 C9.95349499,39.4595205 9.50457284,39.0744587 8.89371801,39 L8.80997251,39 C8.28237583,39.0551037 7.92227016,39.5387918 8.01439022,40.0898289 Z" id="Path" fill="url(#linearGradient-60)"></path>
            <path d="M8.03738314,40.0802469 C8.04148418,40.5367115 8.5271306,40.9249307 9.18795667,41 C9.79625668,40.8155775 10.1213492,40.3595402 9.95802557,39.9197531 C9.95392453,39.4632885 9.46827811,39.0750693 8.80745204,39 C8.20717972,39.1900327 7.88549429,39.6412906 8.03738314,40.0802469 L8.03738314,40.0802469 Z" id="Path" fill="#205325"></path>
            <path d="M10.0139533,40.109651 C10.056832,40.6389548 10.5582603,41.0362623 11.1343153,40.9973719 L11.2215291,40.9973719 C11.7335395,40.8488483 12.0573293,40.385769 11.9915428,39.8961099 C11.9257563,39.4064507 11.4891256,39.0296376 10.9531789,39 L10.8726739,39 C10.303817,39.0910579 9.92079616,39.586003 10.0139533,40.109651 Z" id="Path" fill="#14410D"></path>
            <path d="M10.0144008,40.1049383 C10.0665827,40.6036514 10.5558839,40.9893396 11.1499161,41 C11.7090273,40.851281 12.0626031,40.3875924 11.9907648,39.897289 C11.9189265,39.4069855 11.4421293,39.0296766 10.8568799,39 C10.2840122,39.1348513 9.9218327,39.6098613 10.0144008,40.1049383 L10.0144008,40.1049383 Z" id="Path" fill="#205325"></path>
            <path d="M5.02037044,28.1649656 C5.16282036,29.2749728 5.92255327,30.0937015 6.72976948,29.9913604 C6.7715673,29.9996323 6.81459382,29.9996323 6.85639164,29.9913604 C7.69987113,29.6328061 8.16104078,28.7219512 7.94850769,27.8343251 C7.82188554,26.7872971 7.15711925,25.9921856 6.3657308,26.000058 L6.23910865,26.000058 C5.43189243,26.0787819 4.8858344,27.0549584 5.02037044,28.1649656 Z" id="Path" fill="url(#linearGradient-66)"></path>
            <path d="M6.03802805,28.1617624 C6.12914838,29.2110568 6.60753008,30 7.17703211,30 C7.7840201,29.6406696 8.11588879,28.7278431 7.96294491,27.8382957 C7.87182458,26.7890013 7.39344288,25.9921686 6.82394085,26.0000581 C6.21523912,26.3568561 5.88259516,27.271815 6.03802805,28.1617624 L6.03802805,28.1617624 Z" id="Path" fill="#205325"></path>
            <ellipse id="Oval" fill="url(#linearGradient-68)" opacity="0.58" transform="translate(9.702006, 52.358211) rotate(-7.860000) translate(-9.702006, -52.358211) " cx="9.70200581" cy="52.3582114" rx="3.5" ry="10"></ellipse>
            <path d="M10.3669499,59.4204957 C10.086732,59.7213824 9.71182616,59.919894 9.30306315,59.9838209 C7.21701076,60.2792231 4.94321365,56.4939528 4.22004882,51.5408133 C3.496884,46.5876737 4.61639878,42.3146463 6.69549766,42.0123742 C7.16176943,41.9586041 7.63134852,42.0813363 8.00971067,42.3558652 C9.67159907,43.3588588 11.2083243,46.5533246 11.778512,50.4691215 C12.3695602,54.4948355 11.7367909,58.0671414 10.3669499,59.4204957 Z" id="Path" fill="#307030"></path>
            <path d="M10.2623354,60 C8.48466924,59.006449 6.85576174,55.8270859 6.2309753,51.9076985 C5.61362679,47.88553 6.2756029,44.3293027 7.71856206,43 C9.49622824,44.0004031 11.1400116,47.1866183 11.7499222,51.0923015 C12.4044604,55.0870617 11.7276084,58.6501411 10.2623354,60 Z" id="Path" fill="#205325"></path>
        </g>
        <g id="Asset-10" transform="translate(261.000000, 295.000000)" fill-rule="nonzero">
            <g id="Oval">
                <use fill="black" fill-opacity="1" filter="url(#filter-71)" xlink:href="#path-70"></use>
                <use fill="url(#radialGradient-69)" xlink:href="#path-70"></use>
            </g>
            <path d="M59.9813141,3 C44.9500749,2.98184836 30.5426173,8.97786455 20,19.6392439 C43.0755425,0.836815626 76.8971256,3.26648185 97.0193036,25.1721369 C117.141482,47.077792 116.542483,80.8153076 95.6552491,102 C113.870952,86.9927859 120.684941,62.2372595 112.696566,40.0881344 C104.708191,17.9390093 83.6299405,3.14445077 59.9813141,3.08796309 L59.9813141,3 Z" id="Path" fill="#FFFFFF" opacity="0.1"></path>
            <path d="M73.9319175,104.179222 C51.8886757,104.08575 31.7209711,91.7626609 21.5855639,72.1939882 C11.4501566,52.6253156 13.0240271,29.0488447 25.6706286,11 C6.09598457,24.456841 -3.54167444,48.3035274 1.18851086,71.5766797 C5.91869616,94.8498321 24.1013903,113.045876 47.3772025,117.799284 C70.6530146,122.552691 94.5178557,112.943632 108,93.3898185 C98.033801,100.422559 86.1309823,104.192197 73.9319175,104.179222 Z" id="Path" fill="#000000" opacity="0.2"></path>
            <path d="M23.0886203,26.3042386 C25.0051293,21.5894737 23.0886203,20.198944 33.5082611,19.9816737 C43.9279019,19.7644035 43.8838442,12.92039 51.7921974,15.6362684 C59.7005505,18.3521467 66.5074617,28.4769413 54.435658,28.281398 C42.3638543,28.0858548 38.3986633,25.1309791 32.4068191,29.4112034 C26.414975,33.6914277 22.3396398,28.1727629 23.0886203,26.3042386 Z" id="Path" fill="url(#linearGradient-72)" opacity="0.4"></path>
            <path d="M51.7319067,15.6626707 C43.7609263,12.8719434 43.7609263,19.7833538 33.3031777,20.0231819 C26.0204992,20.1539973 24.7549118,20.8952842 24,22.9229219 C25.0657578,21.9636095 27.1972735,21.5493609 32.4150461,21.4621507 C42.8727948,21.2659277 42.8727948,14.3763198 50.8437752,17.1016394 C56.0615479,18.9330541 60.7908482,23.8604319 60.0581397,27 C63.2554132,24.2092728 57.771201,17.7993212 51.7319067,15.6626707 Z" id="Path" fill="#000000" opacity="0.1"></path>
            <g id="Group" opacity="0.6" transform="translate(22.000000, 15.000000)" fill="#000000">
                <path d="M11.3269291,5.67060039 C21.6877394,5.49798826 21.6877394,-1.34176751 29.5848327,1.35529707 C34.6662492,3.14614795 39.2637214,7.82825206 38.735782,11 C40.2096127,7.93613464 35.2821785,2.563582 29.8048074,0.664848538 C21.9077142,-2.11852211 21.9077142,4.72123366 11.5469038,4.98015186 C3.23185856,5.13118748 2.74791412,6.08055421 2,8.86392485 C2.70391918,6.59839061 3.71580299,5.88636556 11.3269291,5.67060039 Z" id="Path" opacity="0.4"></path>
                <path d="M1.21426068,9.25 C1.09426068,9.61 0.974260678,9.99 0.794260678,10.41 C0.782898869,10.5230486 0.782898869,10.6369514 0.794260678,10.75 C0.934260678,10.19 1.07426068,9.69 1.21426068,9.25 Z" id="Path" opacity="0.4"></path>
            </g>
            <path d="M54.4731426,27.4802358 C42.3896364,27.3091851 38.4206015,24.379941 32.4229487,28.5920657 C27.0206512,32.3338007 23.2941685,28.3782522 23.0957167,26.1973552 L23.0957167,26.3470246 C22.3239599,28.1644388 26.2929948,33.659444 32.334748,29.4473194 C38.3765011,25.2351948 42.345536,28.1644388 54.3849418,28.3568709 C59.1036833,28.3568709 61,26.9670836 61,25 C60.3825946,26.496694 58.4642277,27.5443798 54.4731426,27.4802358 Z" id="Path" fill="#106C7B" opacity="0.4"></path>
            <path d="M45.5145804,103.765715 C41.8097633,110.636879 58.8253005,115.646179 73.6001998,108.57553 C88.3750991,101.50488 90.8153978,103.521899 97.6704187,98.2022879 C104.52544,92.8826767 110.581817,74.6851735 88.7966053,81.5120078 C67.0113934,88.3388422 74.8647182,96.6728997 63.7280824,95.1656765 C56.4282671,93.7478421 49.0525305,97.230512 45.5145804,103.765715 Z" id="Path" fill="url(#linearGradient-73)" opacity="0.4"></path>
            <path d="M45.1791023,105.978321 C48.7261651,99.5422284 56.154562,96.1284317 63.4824255,97.5668392 C74.5619191,99.0410164 66.7619556,90.8680045 88.5220809,84.1908489 C99.7566873,80.7438757 103.568033,83.8439836 103.678828,88.3532316 C105.074844,82.543239 102.238494,77.3619397 88.8323067,81.4809643 C67.0943404,88.1581199 74.9164628,96.3094527 63.7926514,94.8352755 C56.4824451,93.3996007 49.0693703,96.7929035 45.5114871,103.203399 C44.9886718,104.042662 44.859544,105.061208 45.1569433,106 C45.1569433,106 45.1791023,106 45.1791023,105.978321 Z" id="Path" fill="url(#linearGradient-74)" opacity="0.4"></path>
            <path d="M64.2032693,97.2316426 C75.1461554,98.7672179 67.4423636,90.3771907 88.9123062,83.5227387 C99.8551924,80.0510033 103.641431,83.033135 103.882174,87.5285873 C104.691948,82.0316729 101.496625,77.5362206 89.0217351,81.5198144 C67.5517925,88.3742664 75.2774701,96.7420389 64.2908124,95.2287184 C57.0790635,93.812989 49.799642,97.3292286 46.3225933,103.908057 C46.2241885,104.084828 46.143534,104.271224 46.0818498,104.464425 C45.9727167,104.970268 45.9727167,105.494156 46.0818498,106 C46.0818498,106 46.0818498,106 46.0818498,106 C49.5605977,99.3342955 56.9223071,95.7722071 64.2032693,97.2316426 Z" id="Path" fill="url(#linearGradient-75)" opacity="0.4"></path>
            <path d="M46.603246,104.458384 C50.1014463,98.0636204 57.356874,94.6563305 64.5424596,96.0337809 C75.45439,97.5319707 67.772391,89.346209 89.2034224,82.6586371 C99.2205745,79.5319801 103.236165,81.7684084 104,85.5681651 C103.847233,81.0953086 100.093529,78.0337903 89.0724792,81.4861407 C67.6632717,88.1737126 75.3670946,96.3377614 64.4115165,94.8612845 C57.2405685,93.4646888 49.9877334,96.8573314 46.4941267,103.242462 C46.0068512,104.075998 45.8733439,105.068305 46.1231211,106 C46.1801475,105.459805 46.3432777,104.936016 46.603246,104.458384 Z" id="Path" fill="#0D2A2F" opacity="0.4"></path>
            <path d="M103.735646,84 C103.530073,88.9280861 101.27901,93.5376419 97.539486,96.6880247 C90.8197069,102.002381 88.3325159,99.987354 73.8893543,107.051019 C61.8024789,112.985383 48.0574761,110.372491 46.0066345,105.434569 C45.6357376,111.368933 60.8861454,115.066839 74.1293464,108.578896 C88.572508,101.493088 91.059699,103.530258 97.8012956,98.215902 C101.510265,95.2708631 105.001059,88.4064868 103.735646,84 Z" id="Path" fill="#106C7B" opacity="0.4"></path>
            <path d="M103.735217,85 C103.735217,85.4207449 103.735217,85.8857788 103.735217,86.3508127 C103.282364,91.0100176 101.056243,95.3072112 97.5290092,98.330971 C90.77648,103.645644 88.2852556,101.608353 73.8186721,108.694583 C61.8651657,114.540723 48.2945488,112.126976 46,107.233048 C46.983378,112.702732 61.4499616,115.758669 74.1027591,109.580362 C88.5693426,102.494131 91.060567,104.531423 97.7912434,99.2167498 C101.506227,96.2715353 105.002682,89.4067496 103.735217,85 Z" id="Path" fill="#FFFFFF" opacity="0.2"></path>
            <path d="M24,60 C21.8093791,63.0046473 20.7767614,66.4929459 21.0403469,69.9980411 C21.6374699,76.2252693 23.1951821,79.9314398 22.7538303,82 C24.9346273,80.4054848 22.7538303,76.5484819 21.8711267,68.705191 C21.6523088,65.6989333 22.3863025,62.6975545 24,60 L24,60 Z" id="Path" fill="url(#linearGradient-76)" opacity="0.4"></path>
            <path d="M92.5275738,28.8736874 C79.7875408,29.787148 85.4010493,25.7200733 74.8757208,17.5206766 C64.3503924,9.3212799 64.196898,1.31762477 75.4896983,4.86272201 C86.7824987,8.40781926 105.662307,27.9384777 92.5275738,28.8736874 Z" id="Path" fill="url(#linearGradient-77)" opacity="0.4"></path>
            <path d="M75.2259272,4.86485764 C70.569742,3.40926241 67.8647201,3.89446082 67,5.54854631 C68.2194771,4.48993159 70.7692928,4.35760475 74.6494471,5.54854631 C84.1391961,8.54795466 99.0389888,22.7730899 96.0457268,28 C101.056669,23.5008875 85.1812947,7.97453836 75.2259272,4.86485764 Z" id="Path" fill="#000000" opacity="0.8"></path>
            <path d="M75.2683853,17.1986629 C69.7914905,12.7810444 67.108032,8.60639492 67.3939743,6 C65.9422672,8.34133781 68.5157479,13.2890706 74.8944607,18.3472438 C85.4523302,26.6523666 79.8214665,30.7828399 92.6008877,29.8772281 C95.5043018,29.6563472 96.8460311,28.5298544 97,26.8732475 C96.0499225,28.126566 94.5405788,28.822294 92.9748123,28.7286473 C80.1953911,29.6563472 85.8262548,25.5258738 75.2683853,17.1986629 Z" id="Path" fill="#106C7B" opacity="0.4"></path>
            <path d="M95.0907805,63.0285003 C99.6596006,56.3207883 103.962276,53.6507281 102.099262,47.4205879 C100.236248,41.1904476 102.675909,34.7866448 108.952492,39.801148 C115.229075,44.8156512 123.701353,66.2846712 112.611984,72.0372397 C101.522615,77.7898083 90.4332454,69.7145045 95.0907805,63.0285003 Z" id="Path" fill="url(#linearGradient-78)" opacity="0.4"></path>
            <path d="M116.736247,53 C117.980435,59.5017522 117.113947,65.9150452 111.781713,68.7678548 C103.983321,72.903323 96.3848877,70.1389726 94.0076001,65.8044712 C93.6965531,71.6870088 102.983527,77.1051357 112.603766,71.9081569 C118.758052,68.6130512 118.891358,60.4748035 116.736247,53 Z" id="Path" fill="#106C7B" opacity="0.4"></path>
            <path d="M96.3197949,63.8158009 C100.800116,57.0062379 105.019448,54.2956351 103.192521,47.9708954 C101.365594,41.6461556 103.757999,35.1451165 109.891254,40.2357607 L110,40.2357607 C109.56929,39.7330834 109.104157,39.2617845 108.608055,38.8253658 C102.453051,33.7347216 100.038897,40.2577981 101.887573,46.5605004 C103.736249,52.8632028 99.4951684,55.5958429 95.0148468,62.4054059 C93.1550006,65.2610627 93.9230237,69.102826 96.7330284,71 C94.9976101,68.9796791 94.8277564,66.0267184 96.3197949,63.8158009 Z" id="Path" fill="#000000" opacity="0.3"></path>
            <path d="M33.2827995,63 C31.8947004,63 35.7813778,57.0853172 41.3337741,58.1219111 C46.8861703,59.158505 37.1000719,62.8780478 33.2827995,63 Z" id="Path" fill="url(#linearGradient-79)" opacity="0.4"></path>
            <path d="M33.4127763,62.42 C33.2275302,62.42 33.1580629,62.42 33.1349071,62.2 C32.9265052,62.68 32.949661,63 33.2738417,63 C36.3998703,63 43.4623794,60.46 42.9761082,59 C41.9340987,60.44 36.1451569,62.34 33.4127763,62.42 Z" id="Path" fill="#106C7B" opacity="0.4"></path>
            <path d="M41.1798067,58.9232211 C42.1063954,59.1113801 42.5928545,59.3622588 42.7550075,59.6549507 C43.2877961,59.0277539 43.0098194,58.4423703 41.3419598,58.1287719 C36.315216,57.1461636 32.6551906,62.0801114 33.0258261,63 C34.4595848,60.174668 37.7654397,58.5218263 41.1798067,58.9232211 Z" id="Path" fill="#000000" opacity="0.3"></path>
            <path d="M80.2506511,75.8139364 C80.9190149,77.7088772 89.2389913,77.3603823 89.2850854,74.5724234 C89.3311794,71.7844645 85.9893606,71.3488459 89.1468032,67.2540312 C92.3042458,63.1592165 85.7358434,65.0759383 84.9983385,69.5410288 C84.2608337,74.0061192 78.7756414,71.6755598 80.2506511,75.8139364 Z" id="Path" fill="url(#linearGradient-80)" opacity="0.4"></path>
            <path d="M89.2248565,67.1888094 C90.3626878,65.5624807 90.1098364,64.8685804 89.3512822,65.0203711 C89.1761035,65.5014299 88.9348477,65.9541747 88.6348699,66.3648028 C85.7481498,70.4414668 88.8034375,70.8751544 88.7612956,73.6507554 C88.7612956,76.1010907 82.8403587,76.6648847 81.0071861,75.4722436 C80.9976046,75.5876835 80.9976046,75.7037539 81.0071861,75.8191937 C81.6182437,77.705735 89.2248565,77.3587849 89.2669984,74.5831839 C89.3091403,71.8075829 86.4434911,71.2654733 89.2248565,67.1888094 Z" id="Path" fill="#106C7B" opacity="0.4"></path>
            <path d="M85.7465988,70.4269891 C86.0716207,68.3667016 87.6808194,66.6601239 89.8797522,66.0437221 C90.8495423,63.7059797 85.6542378,65.5010319 85.007711,69.3833541 C84.2688233,73.7457484 78.7733456,71.4706241 80.2511211,75.3946917 C80.3738834,75.6563618 80.5945825,75.8706434 80.8745577,76 C79.9740382,72.660368 85.0308013,74.6224018 85.7465988,70.4269891 Z" id="Path" fill="#000000" opacity="0.3"></path>
            <path d="M9.40183625,46.7887326 C8.13705734,44.8742912 10.0124192,43.1512939 12.869075,41.0241368 C15.7257308,38.8969796 16.6197986,37.2590686 14.875276,36.2167616 C13.1307534,35.1744546 23.7723414,38.0461167 18.5387735,41.5133829 C13.3052056,44.9806491 10.0778388,47.8097681 9.40183625,46.7887326 Z" id="Path" fill="url(#linearGradient-81)" opacity="0.4"></path>
            <g id="Group" opacity="0.5" transform="translate(9.000000, 40.000000)" fill="#00B6D4">
                <path d="M10.7563888,0 C10.7563888,0.612430827 10.3816785,1.26569038 9.27958951,2.04143609 C4.01160402,5.28731947 0.72737875,8.02284383 0,7.02254015 L0,6.79798218 C0.0342939426,7.15806954 0.171209719,7.50326588 0.396752046,7.79828586 C1.08004724,8.77817519 4.34223072,6.04265083 9.632258,2.73552436 C11.0208902,1.73522068 11.2633497,0.816574436 10.7563888,0 Z" id="Path" opacity="0.4"></path>
            </g>
            <path d="M13.3049632,41.3864462 C16.0385179,39.2570246 16.8731912,37.61737 15.2038447,36.5739534 C14.4109052,36.0841864 16.3306536,36.5739534 18,37.425722 C16.2471862,36.2332459 13.8266339,35.6583021 14.6195735,36.2119517 C16.2889199,37.2553683 15.4542467,38.8950229 12.7206919,41.0244446 C9.98713711,43.1538662 8.17172286,44.8786977 9.38199903,46.7951772 C9.49534774,46.9568608 9.6932245,47.0325844 9.88280296,46.9868251 C8.94379559,45.1342283 10.6548757,43.4519852 13.3049632,41.3864462 Z" id="Path" fill="#002F37" opacity="0.4"></path>
        </g>
        <g id="Group-3" transform="translate(611.000000, 277.000000)" fill="#B6B6B6">
            <polygon id="Fill-1" points="8.5 0 6 8.00115925 8.5 16 11 8.00115925"></polygon>
            <polygon id="Fill-2" points="0 8.5 8.00115925 11 16 8.5 8.00115925 6"></polygon>
        </g>
        <g id="Asset-3" transform="translate(268.000000, 335.000000)" fill-rule="nonzero">
            <path d="M361.777778,429 C353.851852,430.123538 345.925926,431.247075 338,432.250234 C391.118266,495.255959 470.327385,529.416038 552,524.540831 C478.103278,521.359323 408.991609,486.647363 361.777778,429 L361.777778,429 Z" id="Path" fill="url(#linearGradient-82)"></path>
            <path d="M299.71505,261.259992 C299.729154,129.36575 396.814366,17.7680322 527,0 C449.809133,2.44623462 377.652229,39.0541369 329.907164,99.9925841 C282.162099,160.931031 263.722437,239.954222 279.540184,315.840326 C283.329397,334.028642 289.027091,351.762861 296.537906,368.746172 L297.808763,370.141579 L300.151907,401 C312.066198,399.604593 324.377631,398.009843 336.808208,396.335355 C312.468023,355.521403 299.645856,308.829265 299.71505,261.259992 L299.71505,261.259992 Z" id="Path" fill="url(#linearGradient-83)"></path>
            <path d="M844.492126,126.509344 C902.717002,127.822189 939.430029,137.449715 943.319625,155.630623 C952.567339,198.874926 773.963424,274.144679 544.556618,323.714506 C315.149811,373.284332 121.424098,378.456144 112.136694,335.211841 C108.366167,317.786814 135.236134,295.150191 183.57826,271.081375 C66.0568838,314.166545 -5.82126959,356.734535 0.3703328,385.696681 C11.364396,436.658918 259.981046,426.195945 555.66975,362.264395 C851.358454,298.332845 1082.43223,205.240233 1071.63662,154.277995 C1065.04812,124.32127 976.381195,115.608756 844.492126,126.509344 Z" id="Path" fill="url(#linearGradient-84)"></path>
        </g>
    </g>
</svg>
'''
'''--- src/assets/images/svg/new.svg ---
<svg viewBox="0 0 400 188" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M14.1025 0.31671C22.2889 -1.26585 30.4425 3.20564 33.5387 10.9756L60.8696 79.5627V17.4592C60.8696 7.81769 68.6559 0.00171484 78.2609 0.00171484C87.8658 0.00171484 95.6522 7.81769 95.6522 17.4592V170.212C95.6522 178.581 89.7361 185.772 81.5497 187.355C73.3633 188.937 65.2097 184.466 62.1134 176.696L34.7826 108.109V170.212C34.7826 179.854 26.9963 187.669 17.3913 187.669C7.78635 187.669 0 179.854 0 170.212V17.4592C0 9.09064 5.91607 1.89927 14.1025 0.31671ZM169.565 34.9167C162.361 34.9167 156.522 40.7786 156.522 48.0098V91.6534H200C209.605 91.6534 217.391 99.4694 217.391 109.111C217.391 118.752 209.605 126.568 200 126.568H156.522V139.661C156.522 146.893 162.361 152.755 169.565 152.755H200C209.605 152.755 217.391 160.571 217.391 170.212C217.391 179.854 209.605 187.669 200 187.669H169.565C143.152 187.669 121.739 166.176 121.739 139.661V48.0098C121.739 21.4956 143.152 0.00171484 169.565 0.00171484H200C209.605 0.00171484 217.391 7.81769 217.391 17.4592C217.391 27.1007 209.605 34.9167 200 34.9167H169.565ZM260.87 0.00171484C270.475 0.00171484 278.261 7.81769 278.261 17.4592V58.5395C278.256 78.2404 281.756 97.7768 288.584 116.223L305.017 58.4891C307.15 50.9946 313.974 45.8276 321.739 45.8276C329.504 45.8276 336.328 50.9946 338.461 58.4891L354.893 116.22C361.715 97.7716 365.214 78.2403 365.217 58.5395C365.217 58.5387 365.217 58.5403 365.217 58.5395V17.4592C365.217 7.81769 373.004 0.00171484 382.609 0.00171484C392.214 0.00171484 400 7.81769 400 17.4592V58.5395C399.997 84.0753 395.14 109.378 385.69 133.087C385.69 133.088 385.691 133.086 385.69 133.087L368.322 176.693C365.561 183.625 358.715 188.028 351.287 187.647C343.859 187.266 337.495 182.186 335.452 175.008L321.739 126.831L308.026 175.008C305.983 182.186 299.619 187.266 292.191 187.647C284.764 188.028 277.917 183.625 275.156 176.693L257.792 133.097C257.792 133.097 257.792 133.098 257.792 133.097C248.332 109.388 243.473 84.0797 243.478 58.5395C243.478 58.5381 243.478 58.541 243.478 58.5395V17.4592C243.478 7.81769 251.265 0.00171484 260.87 0.00171484Z" fill="#FF0057"/>
</svg>

'''
'''--- src/assets/images/svg/spy.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 30 30.04"><defs><style>.cls-1{fill:#78909c;}.cls-2{fill:#455a64;}.cls-3{fill:#ffe0b2;}.cls-4{fill:#e6caa0;}.cls-5{fill:#fff;}</style></defs><g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><g id="anonymity"><path class="cls-1" d="M17.5,14.54a1.28,1.28,0,0,1-1.2-1L16,12.1,15.5,9.54h7L22,12.05l-.11.53a2.54,2.54,0,0,1-2.39,2Z"/><path class="cls-2" d="M19.5,15h-2a1.78,1.78,0,0,1-1.69-1.38l-.29-1.46a.51.51,0,0,1,.39-.59.5.5,0,0,1,.59.39l.29,1.46a.79.79,0,0,0,.71.58h2a2,2,0,0,0,1.9-1.56l.61-3a.49.49,0,0,1,.59-.39.5.5,0,0,1,.39.59l-.61,3A3,3,0,0,1,19.5,15Z"/><path class="cls-1" d="M12.5,14.54a1.28,1.28,0,0,0,1.2-1L14,12.1l.51-2.56h-7L8,12.05l.11.53a2.54,2.54,0,0,0,2.39,2Z"/><path class="cls-2" d="M15,9.64l-1-.2-.8,4a.79.79,0,0,1-.71.58h-2a2,2,0,0,1-1.9-1.56L8.49,12a.5.5,0,0,0-1,.19h0l.11.53A3,3,0,0,0,10.5,15h2a1.78,1.78,0,0,0,1.69-1.38Z"/><path class="cls-3" d="M15,5.54c8,0,14.5,1.12,14.5,2.5S23,10.54,15,10.54.5,9.42.5,8c0-.83,2.36-1.57,6-2Z"/><path class="cls-4" d="M21.61,5.82s0,.07,0,.12c0,2.06-4,3.83-9.63,4.55,1,0,2,0,3,0,8,0,14.5-1.12,14.5-2.5C29.5,7.07,26.29,6.23,21.61,5.82Z"/><path class="cls-2" d="M15,11c-.61,0-15,0-15-3,0-.42,0-1.72,6.43-2.52A.5.5,0,0,1,7,6a.49.49,0,0,1-.43.56C2.25,7.05,1.07,7.82,1,8.05c.23.7,5.1,2,14,2S28.77,8.75,29,8c-.23-.7-5.1-2-14-2a.5.5,0,0,1,0-1c.61,0,15,0,15,3S15.61,11,15,11Z"/><path class="cls-4" d="M7.78,16.26C10,25,18,29.54,18,29.54L4,22l2-3L.5,15a16.27,16.27,0,0,1,6-2Z"/><path class="cls-4" d="M22.22,16.2A14.07,14.07,0,0,1,19,22.94c-.89.89-1.71,1.69-2.46,2.41L15,26.8c-1.88,1.74,1,.54,1,.54L26,22l-2-3,5.5-4a16.27,16.27,0,0,0-6-2Z"/><path class="cls-2" d="M16,27.84a.5.5,0,0,1-.24-.94l9.52-5.1-1.7-2.54a.5.5,0,0,1,.13-.68l4.85-3.53a14.83,14.83,0,0,0-5.07-1.55.5.5,0,1,1,.07-1,16.53,16.53,0,0,1,6.19,2.05A.49.49,0,0,1,30,15a.5.5,0,0,1-.21.43L24.68,19.1l1.74,2.6a.57.57,0,0,1,.07.4.54.54,0,0,1-.25.32l-10,5.36A.53.53,0,0,1,16,27.84Z"/><path class="cls-2" d="M16.54,25.85a.49.49,0,0,1-.36-.15.5.5,0,0,1,0-.71q1.13-1.08,2.46-2.4a13.59,13.59,0,0,0,3.08-6.47.5.5,0,0,1,1,.16,14.64,14.64,0,0,1-3.36,7c-.89.88-1.71,1.69-2.47,2.41A.49.49,0,0,1,16.54,25.85Z"/><path class="cls-3" d="M6.93,14.18l-.45-1.12a16.27,16.27,0,0,0-6,2l2.73,2A13,13,0,0,1,6.93,14.18Z"/><path class="cls-2" d="M18,30a.53.53,0,0,1-.24-.06l-14-7.5a.49.49,0,0,1-.24-.32.51.51,0,0,1,.06-.4l1.74-2.6L.21,15.44A.49.49,0,0,1,0,15a.48.48,0,0,1,.25-.4,16.53,16.53,0,0,1,6.19-2A.51.51,0,0,1,7,13a.5.5,0,0,1-.47.54,14.62,14.62,0,0,0-5.07,1.55l4.85,3.53a.49.49,0,0,1,.13.68l-1.7,2.54,9.84,5.27c-1.09-1-2.42-2.28-3.91-3.78-2.14-2.13-3.15-5.78-3.36-7a.5.5,0,0,1,1-.17c.19,1.07,1.14,4.53,3.08,6.48,4.11,4.1,6.94,6.48,7,6.51a.48.48,0,0,1,.09.66A.49.49,0,0,1,18,30Z"/><path class="cls-5" d="M11.39.6a1.3,1.3,0,0,0-1.79.89A30.69,30.69,0,0,0,8.5,8s1.5.5,6.5.5S21.5,8,21.5,8a30.69,30.69,0,0,0-1.1-6.55A1.3,1.3,0,0,0,18.61.6L15,2Z"/><path class="cls-3" d="M11.43,2.19c-1.3.47-2.1,4.07-2.1,6.06,0,0,.67.29,5.67.29S21.5,8,21.5,8a30.69,30.69,0,0,0-1.1-6.55A1.3,1.3,0,0,0,18.61.6L15,2.54S12.67,1.75,11.43,2.19Z"/><path class="cls-4" d="M20.4,1.49a1.28,1.28,0,0,0-1.4-1,6.28,6.28,0,0,1,.13,1.24,7.68,7.68,0,0,1-4.61,6.79H15c5,0,6.5-.5,6.5-.5A30.69,30.69,0,0,0,20.4,1.49Z"/><path class="cls-2" d="M15,9c-5,0-6.59-.5-6.66-.53A.49.49,0,0,1,8,8,30.4,30.4,0,0,1,9.12,1.36,1.83,1.83,0,0,1,11.58.13L15,1.5,18.42.13a1.83,1.83,0,0,1,2.46,1.23A31,31,0,0,1,22,8a.49.49,0,0,1-.34.47C21.59,8.54,20,9,15,9ZM9,7.65A33.23,33.23,0,0,0,15,8a33.23,33.23,0,0,0,6-.39,33.78,33.78,0,0,0-1.07-6,.83.83,0,0,0-1.13-.55L15.19,2.5a.5.5,0,0,1-.38,0l-3.6-1.44a.82.82,0,0,0-1.12.55A33,33,0,0,0,9,7.65Z"/></g></g></g></svg>
'''
'''--- src/assets/logo/logo-animation.json ---
{
    "v": "5.5.9",
    "fr": 60,
    "ip": 0,
    "op": 150,
    "w": 2229,
    "h": 1996,
    "nm": "Pre-comp 1",
    "ddd": 0,
    "assets": [],
    "layers": [
        {
            "ddd": 0,
            "ind": 2,
            "ty": 4,
            "nm": "blop jos",
            "sr": 1,
            "ks": {
                "o": { "a": 0, "k": 100, "ix": 11 },
                "r": { "a": 0, "k": 0, "ix": 10 },
                "p": {
                    "a": 1,
                    "k": [
                        {
                            "i": { "x": 0.667, "y": 1 },
                            "o": { "x": 0.333, "y": 0 },
                            "t": 19,
                            "s": [1114.5, 1278, 0],
                            "to": [0, -13.5, 0],
                            "ti": [0, 0, 0]
                        },
                        {
                            "i": { "x": 0.667, "y": 1 },
                            "o": { "x": 0.333, "y": 0 },
                            "t": 23,
                            "s": [1114.5, 1197, 0],
                            "to": [0, 0, 0],
                            "ti": [0, -13.5, 0]
                        },
                        { "t": 34, "s": [1114.5, 1278, 0] }
                    ],
                    "ix": 2
                },
                "a": { "a": 0, "k": [0, 272, 0], "ix": 1 },
                "s": {
                    "a": 1,
                    "k": [
                        {
                            "i": { "x": [0.667, 0.667, 0.667], "y": [1, 1, 1] },
                            "o": { "x": [0.333, 0.333, 0.333], "y": [0, 0, 0] },
                            "t": 19,
                            "s": [51, 51, 100]
                        },
                        {
                            "i": { "x": [0.667, 0.667, 0.667], "y": [1, 1, 1] },
                            "o": { "x": [0.333, 0.333, 0.333], "y": [0, 0, 0] },
                            "t": 23,
                            "s": [71, 117, 100]
                        },
                        {
                            "i": { "x": [0.667, 0.667, 0.667], "y": [1, 1, 1] },
                            "o": { "x": [0.333, 0.333, 0.333], "y": [0, 0, 0] },
                            "t": 28,
                            "s": [106, 61, 100]
                        },
                        { "t": 34, "s": [319, 79, 100] }
                    ],
                    "ix": 6
                }
            },
            "ao": 0,
            "shapes": [
                {
                    "ty": "gr",
                    "it": [
                        {
                            "d": 1,
                            "ty": "el",
                            "s": { "a": 0, "k": [250, 250], "ix": 2 },
                            "p": { "a": 0, "k": [0, 0], "ix": 3 },
                            "nm": "Ellipse Path 1",
                            "mn": "ADBE Vector Shape - Ellipse",
                            "hd": false
                        },
                        {
                            "ty": "fl",
                            "c": { "a": 0, "k": [0, 0.854901960784, 1, 1], "ix": 4 },
                            "o": { "a": 0, "k": 100, "ix": 5 },
                            "r": 1,
                            "bm": 0,
                            "nm": "Fill 1",
                            "mn": "ADBE Vector Graphic - Fill",
                            "hd": false
                        },
                        {
                            "ty": "tr",
                            "p": { "a": 0, "k": [-6.523, 229.992], "ix": 2 },
                            "a": { "a": 0, "k": [0.516, 117.344], "ix": 1 },
                            "s": { "a": 0, "k": [100, 100], "ix": 3 },
                            "r": { "a": 0, "k": 0, "ix": 6 },
                            "o": { "a": 0, "k": 100, "ix": 7 },
                            "sk": { "a": 0, "k": 0, "ix": 4 },
                            "sa": { "a": 0, "k": 0, "ix": 5 },
                            "nm": "Transform"
                        }
                    ],
                    "nm": "Ellipse 1",
                    "np": 3,
                    "cix": 2,
                    "bm": 0,
                    "ix": 1,
                    "mn": "ADBE Vector Group",
                    "hd": false
                }
            ],
            "ip": 19,
            "op": 32,
            "st": 7,
            "bm": 0
        },
        {
            "ddd": 0,
            "ind": 3,
            "ty": 4,
            "nm": "planeta inn",
            "sr": 1,
            "ks": {
                "o": { "a": 0, "k": 100, "ix": 11 },
                "r": {
                    "a": 1,
                    "k": [
                        {
                            "i": { "x": [0.582], "y": [0.637] },
                            "o": { "x": [0.18], "y": [0.26] },
                            "t": 0,
                            "s": [-88.9]
                        },
                        {
                            "i": { "x": [0.702], "y": [-0.275] },
                            "o": { "x": [0.347], "y": [0.148] },
                            "t": 4,
                            "s": [-83.925]
                        },
                        {
                            "i": { "x": [0.667], "y": [0.48] },
                            "o": { "x": [0.333], "y": [0.386] },
                            "t": 7,
                            "s": [-76.339]
                        },
                        {
                            "i": { "x": [0.667], "y": [1] },
                            "o": { "x": [0.333], "y": [0.219] },
                            "t": 11,
                            "s": [-39.011]
                        },
                        {
                            "i": { "x": [0.667], "y": [1.144] },
                            "o": { "x": [0.333], "y": [0] },
                            "t": 13,
                            "s": [5.367]
                        },
                        {
                            "i": { "x": [0.667], "y": [1] },
                            "o": { "x": [0.333], "y": [0.571] },
                            "t": 15,
                            "s": [16.391]
                        },
                        { "t": 16, "s": [15] }
                    ],
                    "ix": 10
                },
                "p": {
                    "a": 1,
                    "k": [
                        {
                            "i": { "x": 0.667, "y": 0.961 },
                            "o": { "x": 0.333, "y": 0.158 },
                            "t": 0,
                            "s": [508.724, 497.998, 0],
                            "to": [1204.599, -1.144, 0],
                            "ti": [-0.067, 2, 0]
                        },
                        {
                            "i": { "x": 0.667, "y": 1 },
                            "o": { "x": 0.333, "y": 0.056 },
                            "t": 19,
                            "s": [1114.5, 1238, 0],
                            "to": [0.481, -14.469, 0],
                            "ti": [52.707, -0.259, 0]
                        },
                        { "t": 29, "s": [932.5, 792, 0] }
                    ],
                    "ix": 2
                },
                "a": { "a": 0, "k": [-125.766, -133.266, 0], "ix": 1 },
                "s": {
                    "a": 1,
                    "k": [
                        {
                            "i": { "x": [0.833, 0.833, 0.833], "y": [0.833, 0.833, 0.833] },
                            "o": { "x": [0.167, 0.167, 0.167], "y": [0.167, 0.167, 0.167] },
                            "t": 0,
                            "s": [4, 23, 100]
                        },
                        {
                            "i": { "x": [0.833, 0.833, 0.833], "y": [0.833, 0.833, 0.833] },
                            "o": { "x": [0.167, 0.167, 0.167], "y": [0.167, 0.167, 0.167] },
                            "t": 17,
                            "s": [21, 40, 100]
                        },
                        {
                            "i": { "x": [0.833, 0.833, 0.833], "y": [0.833, 0.833, 0.833] },
                            "o": { "x": [0.167, 0.167, 0.167], "y": [0.167, 0.167, 0.167] },
                            "t": 19,
                            "s": [119, 56, 100]
                        },
                        { "t": 21, "s": [98, 102, 100] }
                    ],
                    "ix": 6
                }
            },
            "ao": 0,
            "shapes": [
                {
                    "ty": "gr",
                    "it": [
                        {
                            "d": 1,
                            "ty": "el",
                            "s": { "a": 0, "k": [268, 268], "ix": 2 },
                            "p": { "a": 0, "k": [0, 0], "ix": 3 },
                            "nm": "Ellipse Path 1",
                            "mn": "ADBE Vector Shape - Ellipse",
                            "hd": false
                        },
                        {
                            "ty": "fl",
                            "c": {
                                "a": 1,
                                "k": [
                                    {
                                        "i": { "x": [0.833], "y": [0.833] },
                                        "o": { "x": [0.167], "y": [0.167] },
                                        "t": 0,
                                        "s": [0.750737786293, 0.942970752716, 0.975597441196, 1]
                                    },
                                    { "t": 18, "s": [0, 0.854901960784, 1, 1] }
                                ],
                                "ix": 4
                            },
                            "o": { "a": 0, "k": 100, "ix": 5 },
                            "r": 1,
                            "bm": 0,
                            "nm": "Fill 1",
                            "mn": "ADBE Vector Graphic - Fill",
                            "hd": false
                        },
                        {
                            "ty": "tr",
                            "p": { "a": 0, "k": [-125.766, -128.039], "ix": 2 },
                            "a": { "a": 0, "k": [0, 113.227], "ix": 1 },
                            "s": { "a": 0, "k": [100, 100], "ix": 3 },
                            "r": { "a": 0, "k": 2.67, "ix": 6 },
                            "o": { "a": 0, "k": 100, "ix": 7 },
                            "sk": { "a": 0, "k": 0, "ix": 4 },
                            "sa": { "a": 0, "k": 0, "ix": 5 },
                            "nm": "Transform"
                        }
                    ],
                    "nm": "Ellipse 1",
                    "np": 3,
                    "cix": 2,
                    "bm": 0,
                    "ix": 1,
                    "mn": "ADBE Vector Group",
                    "hd": false
                },
                {
                    "ty": "gr",
                    "it": [
                        {
                            "d": 1,
                            "ty": "el",
                            "s": { "a": 0, "k": [268, 268], "ix": 2 },
                            "p": { "a": 0, "k": [0, 0], "ix": 3 },
                            "nm": "Ellipse Path 1",
                            "mn": "ADBE Vector Shape - Ellipse",
                            "hd": false
                        },
                        {
                            "ty": "fl",
                            "c": { "a": 0, "k": [0, 0.509339809418, 0.595787405968, 1], "ix": 4 },
                            "o": { "a": 0, "k": 100, "ix": 5 },
                            "r": 1,
                            "bm": 0,
                            "nm": "Fill 1",
                            "mn": "ADBE Vector Graphic - Fill",
                            "hd": false
                        },
                        {
                            "ty": "tr",
                            "p": { "a": 0, "k": [-125.766, -128.039], "ix": 2 },
                            "a": { "a": 0, "k": [0, 113.227], "ix": 1 },
                            "s": { "a": 0, "k": [144.791, 145.743], "ix": 3 },
                            "r": { "a": 0, "k": 5.605, "ix": 6 },
                            "o": {
                                "a": 1,
                                "k": [
                                    {
                                        "i": { "x": [0.833], "y": [0.833] },
                                        "o": { "x": [0.167], "y": [0.167] },
                                        "t": 17,
                                        "s": [100]
                                    },
                                    { "t": 18, "s": [0] }
                                ],
                                "ix": 7
                            },
                            "sk": { "a": 0, "k": 0, "ix": 4 },
                            "sa": { "a": 0, "k": 0, "ix": 5 },
                            "nm": "Transform"
                        }
                    ],
                    "nm": "Ellipse 2",
                    "np": 3,
                    "cix": 2,
                    "bm": 0,
                    "ix": 2,
                    "mn": "ADBE Vector Group",
                    "hd": false
                },
                {
                    "ty": "gr",
                    "it": [
                        {
                            "ind": 0,
                            "ty": "sh",
                            "ix": 1,
                            "ks": {
                                "a": 0,
                                "k": {
                                    "i": [
                                        [0, 0],
                                        [0, 0],
                                        [0, 0],
                                        [0, 0],
                                        [0, 0],
                                        [110.635, -214.844],
                                        [-142.12, -6.365],
                                        [-67.748, 103.426],
                                        [0, 0],
                                        [0, 0],
                                        [0, 0],
                                        [0, 0],
                                        [0, 0]
                                    ],
                                    "o": [
                                        [0, 0],
                                        [0, 0],
                                        [0, 0],
                                        [0, 0],
                                        [0, 0],
                                        [-33.323, 64.711],
                                        [142.12, 6.365],
                                        [122.806, -187.478],
                                        [0, 0],
                                        [0, 0],
                                        [0, 0],
                                        [0, 0],
                                        [0, 0]
                                    ],
                                    "v": [
                                        [-282.811, -977.573],
                                        [-130.564, -522.745],
                                        [-225.74, -509.876],
                                        [-339.78, -899.213],
                                        [-450.74, -877.405],
                                        [-368.453, -208.139],
                                        [-256.226, -84.436],
                                        [99.568, -189.274],
                                        [74.644, -884.268],
                                        [-48.167, -903.608],
                                        [48.329, -520.339],
                                        [-43.88, -529.565],
                                        [-149.502, -981.045]
                                    ],
                                    "c": true
                                },
                                "ix": 2
                            },
                            "nm": "Path 1",
                            "mn": "ADBE Vector Shape - Group",
                            "hd": false
                        },
                        {
                            "ty": "fl",
                            "c": {
                                "a": 0,
                                "k": [0.112361527979, 0.381535679102, 0.427221208811, 1],
                                "ix": 4
                            },
                            "o": { "a": 0, "k": 100, "ix": 5 },
                            "r": 1,
                            "bm": 0,
                            "nm": "Fill 1",
                            "mn": "ADBE Vector Graphic - Fill",
                            "hd": false
                        },
                        {
                            "ty": "tr",
                            "p": { "a": 0, "k": [0, 0], "ix": 2 },
                            "a": { "a": 0, "k": [0, 0], "ix": 1 },
                            "s": { "a": 0, "k": [100, 100], "ix": 3 },
                            "r": { "a": 0, "k": 0, "ix": 6 },
                            "o": {
                                "a": 1,
                                "k": [
                                    {
                                        "i": { "x": [0.833], "y": [0.833] },
                                        "o": { "x": [0.167], "y": [0.167] },
                                        "t": 17,
                                        "s": [100]
                                    },
                                    { "t": 18, "s": [1] }
                                ],
                                "ix": 7
                            },
                            "sk": { "a": 0, "k": 0, "ix": 4 },
                            "sa": { "a": 0, "k": 0, "ix": 5 },
                            "nm": "Transform"
                        }
                    ],
                    "nm": "Shape 1",
                    "np": 3,
                    "cix": 2,
                    "bm": 0,
                    "ix": 3,
                    "mn": "ADBE Vector Group",
                    "hd": false
                },
                {
                    "ty": "gr",
                    "it": [
                        {
                            "ind": 0,
                            "ty": "sh",
                            "ix": 1,
                            "ks": {
                                "a": 0,
                                "k": {
                                    "i": [
                                        [0, 0],
                                        [216.858, -413.844],
                                        [-168.806, 3.366],
                                        [-99.078, 117.221],
                                        [0, 0],
                                        [362.193, -3.384]
                                    ],
                                    "o": [
                                        [0, 0],
                                        [-64.092, 122.312],
                                        [130.986, -2.612],
                                        [331.737, -392.484],
                                        [0, 0],
                                        [-362.194, 3.384]
                                    ],
                                    "v": [
                                        [-950.776, -1490.431],
                                        [-497.233, -213.45],
                                        [-168.233, -64.521],
                                        [192.54, -194.01],
                                        [-105.252, -1532.393],
                                        [-288.696, -1155.624]
                                    ],
                                    "c": true
                                },
                                "ix": 2
                            },
                            "nm": "Path 1",
                            "mn": "ADBE Vector Shape - Group",
                            "hd": false
                        },
                        {
                            "ty": "fl",
                            "c": {
                                "a": 0,
                                "k": [0.033373512328, 0.190647408366, 0.217340692878, 1],
                                "ix": 4
                            },
                            "o": { "a": 0, "k": 100, "ix": 5 },
                            "r": 1,
                            "bm": 0,
                            "nm": "Fill 1",
                            "mn": "ADBE Vector Graphic - Fill",
                            "hd": false
                        },
                        {
                            "ty": "tr",
                            "p": { "a": 0, "k": [0, 0], "ix": 2 },
                            "a": { "a": 0, "k": [0, 0], "ix": 1 },
                            "s": { "a": 0, "k": [100, 100], "ix": 3 },
                            "r": { "a": 0, "k": 0, "ix": 6 },
                            "o": {
                                "a": 1,
                                "k": [
                                    {
                                        "i": { "x": [0.833], "y": [0.833] },
                                        "o": { "x": [0.167], "y": [0.167] },
                                        "t": 17,
                                        "s": [100]
                                    },
                                    { "t": 18, "s": [1] }
                                ],
                                "ix": 7
                            },
                            "sk": { "a": 0, "k": 0, "ix": 4 },
                            "sa": { "a": 0, "k": 0, "ix": 5 },
                            "nm": "Transform"
                        }
                    ],
                    "nm": "Shape 2",
                    "np": 3,
                    "cix": 2,
                    "bm": 0,
                    "ix": 4,
                    "mn": "ADBE Vector Group",
                    "hd": false
                }
            ],
            "ip": 0,
            "op": 29,
            "st": 0,
            "bm": 0
        },
        {
            "ddd": 0,
            "ind": 4,
            "ty": 4,
            "nm": "ring",
            "sr": 1,
            "ks": {
                "o": { "a": 0, "k": 100, "ix": 11 },
                "r": { "a": 0, "k": 0, "ix": 10 },
                "p": {
                    "a": 1,
                    "k": [
                        {
                            "i": { "x": 0.667, "y": 1 },
                            "o": { "x": 0.333, "y": 0 },
                            "t": 28,
                            "s": [937, 682.5, 0],
                            "to": [-139.01, 1.169, 0],
                            "ti": [45.01, -71.169, 0]
                        },
                        { "t": 39, "s": [666.939, 1109.512, 0] }
                    ],
                    "ix": 2
                },
                "a": { "a": 0, "k": [195.75, 250.75, 0], "ix": 1 },
                "s": {
                    "a": 1,
                    "k": [
                        {
                            "i": { "x": [0.667, 0.667, 0.667], "y": [1, 1, 1] },
                            "o": { "x": [0.333, 0.333, 0.333], "y": [0, 0, 0] },
                            "t": 52,
                            "s": [100, 100, 100]
                        },
                        {
                            "i": { "x": [0.667, 0.667, 0.667], "y": [1, 1, 1] },
                            "o": { "x": [0.333, 0.333, 0.333], "y": [0, 0, 0] },
                            "t": 57,
                            "s": [125, 125, 100]
                        },
                        { "t": 63, "s": [100, 100, 100] }
                    ],
                    "ix": 6
                }
            },
            "ao": 0,
            "shapes": [
                {
                    "ty": "gr",
                    "it": [
                        {
                            "ind": 0,
                            "ty": "sh",
                            "ix": 1,
                            "ks": {
                                "a": 1,
                                "k": [
                                    {
                                        "i": { "x": 0.833, "y": 0.833 },
                                        "o": { "x": 0.167, "y": 0.167 },
                                        "t": 28,
                                        "s": [
                                            {
                                                "i": [
                                                    [0, 0],
                                                    [-27.5, 15],
                                                    [-14.5, 8],
                                                    [-27.944, 14.845],
                                                    [0, 0],
                                                    [14.484, -8.914],
                                                    [12.695, -12.413],
                                                    [9.5, -11]
                                                ],
                                                "o": [
                                                    [0, 0],
                                                    [23.376, -12.75],
                                                    [21.559, -11.894],
                                                    [16, -8.5],
                                                    [0, 0],
                                                    [-13, 8],
                                                    [-22.5, 22],
                                                    [-10.524, 12.186]
                                                ],
                                                "v": [
                                                    [-76.5, 16.5],
                                                    [-78.5, -26.5],
                                                    [-23.5, -63.5],
                                                    [33.5, -85.5],
                                                    [86.5, -100.5],
                                                    [37.5, -72.5],
                                                    [-6.5, -33.5],
                                                    [-37.5, -7.5]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    },
                                    {
                                        "i": { "x": 0.833, "y": 0.833 },
                                        "o": { "x": 0.167, "y": 0.167 },
                                        "t": 29,
                                        "s": [
                                            {
                                                "i": [
                                                    [0, 0],
                                                    [-27.5, 15],
                                                    [-14.5, 8],
                                                    [-18.895, 8.459],
                                                    [0, 0],
                                                    [17.492, -8.457],
                                                    [12.695, -12.413],
                                                    [9.5, -11]
                                                ],
                                                "o": [
                                                    [0, 0],
                                                    [23.376, -12.75],
                                                    [21.559, -11.894],
                                                    [12.75, -5.25],
                                                    [0, 0],
                                                    [-14.325, 7.054],
                                                    [-22.5, 22],
                                                    [-10.524, 12.186]
                                                ],
                                                "v": [
                                                    [-44, -2.5],
                                                    [-46, -45.5],
                                                    [9, -82.5],
                                                    [85.75, -125.75],
                                                    [121.5, -135],
                                                    [86.5, -109.5],
                                                    [26, -52.5],
                                                    [-5, -26.5]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    },
                                    {
                                        "i": { "x": 0.833, "y": 0.833 },
                                        "o": { "x": 0.167, "y": 0.167 },
                                        "t": 30,
                                        "s": [
                                            {
                                                "i": [
                                                    [0, 0],
                                                    [-27.5, 15],
                                                    [-14.5, 8],
                                                    [-9.846, 2.073],
                                                    [0, 0],
                                                    [20.5, -8],
                                                    [12.695, -12.413],
                                                    [9.5, -11]
                                                ],
                                                "o": [
                                                    [0, 0],
                                                    [23.376, -12.75],
                                                    [21.559, -11.894],
                                                    [9.5, -2],
                                                    [0, 0],
                                                    [-15.651, 6.108],
                                                    [-22.5, 22],
                                                    [-10.524, 12.186]
                                                ],
                                                "v": [
                                                    [-11.5, -21.5],
                                                    [-13.5, -64.5],
                                                    [41.5, -101.5],
                                                    [134, -157],
                                                    [156.5, -151.5],
                                                    [135.5, -146.5],
                                                    [58.5, -71.5],
                                                    [27.5, -45.5]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    },
                                    {
                                        "i": { "x": 0.833, "y": 0.833 },
                                        "o": { "x": 0.167, "y": 0.167 },
                                        "t": 31,
                                        "s": [
                                            {
                                                "i": [
                                                    [0, 0],
                                                    [-25.55, 17.799],
                                                    [-11.857, 0.833],
                                                    [-13, -16],
                                                    [0, 0],
                                                    [13, 5],
                                                    [11.325, -4.635],
                                                    [9.5, -11]
                                                ],
                                                "o": [
                                                    [0, 0],
                                                    [25.438, -18.375],
                                                    [17.25, -11],
                                                    [19, 17],
                                                    [0, 0],
                                                    [-7, -12],
                                                    [-16, 9.5],
                                                    [-10.524, 12.186]
                                                ],
                                                "v": [
                                                    [-11.5, -21.5],
                                                    [14, -91.5],
                                                    [91.75, -139.5],
                                                    [161, -164.5],
                                                    [119.5, -98.5],
                                                    [133, -140.5],
                                                    [81, -111.25],
                                                    [36.5, -70]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    },
                                    {
                                        "i": { "x": 0.833, "y": 0.833 },
                                        "o": { "x": 0.167, "y": 0.167 },
                                        "t": 32,
                                        "s": [
                                            {
                                                "i": [
                                                    [0, 0],
                                                    [-23.601, 20.597],
                                                    [-9.213, -6.334],
                                                    [4.5, -19],
                                                    [0, 0],
                                                    [-3.616, 7.561],
                                                    [9.956, 3.144],
                                                    [9.5, -11]
                                                ],
                                                "o": [
                                                    [0, 0],
                                                    [27.5, -24],
                                                    [16, 11],
                                                    [-3.413, 14.408],
                                                    [0, 0],
                                                    [5.5, -11.5],
                                                    [-9.5, -3],
                                                    [-10.524, 12.186]
                                                ],
                                                "v": [
                                                    [-11.5, -21.5],
                                                    [41.5, -118.5],
                                                    [137, -165.5],
                                                    [147, -130],
                                                    [82.5, -45.5],
                                                    [122.5, -112.5],
                                                    [112.5, -136],
                                                    [45.5, -94.5]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    },
                                    {
                                        "i": { "x": 0.833, "y": 0.833 },
                                        "o": { "x": 0.167, "y": 0.167 },
                                        "t": 33,
                                        "s": [
                                            {
                                                "i": [
                                                    [0, 0],
                                                    [-30.05, 11.799],
                                                    [17.441, -41.884],
                                                    [9.5, -18],
                                                    [0, 0],
                                                    [-9.593, 14.722],
                                                    [-1.151, 18.094],
                                                    [17.336, -11.576]
                                                ],
                                                "o": [
                                                    [0, 0],
                                                    [27.019, -13.091],
                                                    [-2.25, 23.5],
                                                    [-6.511, 12.837],
                                                    [0, 0],
                                                    [12, -18.75],
                                                    [1, -17],
                                                    [-12.512, 9.593]
                                                ],
                                                "v": [
                                                    [-7.5, -42.5],
                                                    [88.5, -161],
                                                    [142.75, -134],
                                                    [110.75, -74.75],
                                                    [61.5, -17.5],
                                                    [101.5, -83],
                                                    [116, -128.75],
                                                    [79, -128.5]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    },
                                    {
                                        "i": { "x": 0.833, "y": 0.833 },
                                        "o": { "x": 0.167, "y": 0.167 },
                                        "t": 34,
                                        "s": [
                                            {
                                                "i": [
                                                    [0, 0],
                                                    [-36.5, 3],
                                                    [44.094, -77.434],
                                                    [14.5, -17],
                                                    [0, 0],
                                                    [-15.57, 21.882],
                                                    [-12.259, 33.045],
                                                    [25.171, -12.152]
                                                ],
                                                "o": [
                                                    [0, 0],
                                                    [26.538, -2.181],
                                                    [-20.5, 36],
                                                    [-9.609, 11.266],
                                                    [0, 0],
                                                    [18.5, -26],
                                                    [11.5, -31],
                                                    [-14.5, 7]
                                                ],
                                                "v": [
                                                    [-3.5, -63.5],
                                                    [128.5, -187.5],
                                                    [133.5, -108.5],
                                                    [81.5, -30.5],
                                                    [40.5, 10.5],
                                                    [80.5, -53.5],
                                                    [120.5, -122.5],
                                                    [106.5, -156.5]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    },
                                    {
                                        "i": { "x": 0.833, "y": 0.833 },
                                        "o": { "x": 0.167, "y": 0.167 },
                                        "t": 36,
                                        "s": [
                                            {
                                                "i": [
                                                    [0, 0],
                                                    [-22, -15],
                                                    [44.094, -77.433],
                                                    [24.5, -24],
                                                    [0, 0],
                                                    [-16.396, 21.27],
                                                    [-46.5, 72],
                                                    [18.296, 14.637]
                                                ],
                                                "o": [
                                                    [0, 0],
                                                    [22, 15],
                                                    [-20.5, 36],
                                                    [-10.578, 10.362],
                                                    [0, 0],
                                                    [18.5, -24],
                                                    [42.133, -65.238],
                                                    [-15, -12]
                                                ],
                                                "v": [
                                                    [55.5, -146.5],
                                                    [170.5, -235.5],
                                                    [99.5, -62.5],
                                                    [5.5, 63.5],
                                                    [-30.5, 94.5],
                                                    [9.5, 42.5],
                                                    [85.5, -73.5],
                                                    [128.5, -183.5]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    },
                                    {
                                        "i": { "x": 0.833, "y": 0.833 },
                                        "o": { "x": 0.167, "y": 0.167 },
                                        "t": 38,
                                        "s": [
                                            {
                                                "i": [
                                                    [0, 0],
                                                    [-22, -15],
                                                    [80, -107],
                                                    [26.458, -5.474],
                                                    [0, 0],
                                                    [-23.5, 13],
                                                    [-81, 108],
                                                    [18.296, 14.637]
                                                ],
                                                "o": [
                                                    [0, 0],
                                                    [22, 15],
                                                    [-78.244, 104.651],
                                                    [-14.5, 3],
                                                    [0, 0],
                                                    [20.873, -11.547],
                                                    [81, -108],
                                                    [-15, -12]
                                                ],
                                                "v": [
                                                    [55.5, -146.5],
                                                    [170.5, -235.5],
                                                    [37.5, 26.5],
                                                    [-86.5, 156.5],
                                                    [-130.5, 152.5],
                                                    [-82.5, 130.5],
                                                    [23.5, 15.5],
                                                    [128.5, -183.5]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    },
                                    {
                                        "t": 40,
                                        "s": [
                                            {
                                                "i": [
                                                    [0, 0],
                                                    [-22, -15],
                                                    [80, -107],
                                                    [21, 17],
                                                    [0, 0],
                                                    [-17.943, -11.663],
                                                    [-81, 108],
                                                    [18.296, 14.637]
                                                ],
                                                "o": [
                                                    [0, 0],
                                                    [22, 15],
                                                    [-78.244, 104.651],
                                                    [-21, -17],
                                                    [0, 0],
                                                    [20, 13],
                                                    [81, -108],
                                                    [-15, -12]
                                                ],
                                                "v": [
                                                    [55.5, -146.5],
                                                    [170.5, -235.5],
                                                    [37.5, 26.5],
                                                    [-171.5, 233.5],
                                                    [-122.5, 96.5],
                                                    [-135.5, 176.5],
                                                    [23.5, 15.5],
                                                    [128.5, -183.5]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    }
                                ],
                                "ix": 2
                            },
                            "nm": "Path 1",
                            "mn": "ADBE Vector Shape - Group",
                            "hd": false
                        },
                        {
                            "ty": "fl",
                            "c": { "a": 0, "k": [0, 0.855000035903, 1, 1], "ix": 4 },
                            "o": { "a": 0, "k": 100, "ix": 5 },
                            "r": 1,
                            "bm": 0,
                            "nm": "Fill 1",
                            "mn": "ADBE Vector Graphic - Fill",
                            "hd": false
                        },
                        {
                            "ty": "tr",
                            "p": { "a": 0, "k": [192.75, 250.75], "ix": 2 },
                            "a": { "a": 0, "k": [0, 0], "ix": 1 },
                            "s": { "a": 0, "k": [100, 100], "ix": 3 },
                            "r": { "a": 0, "k": 0, "ix": 6 },
                            "o": { "a": 0, "k": 100, "ix": 7 },
                            "sk": { "a": 0, "k": 0, "ix": 4 },
                            "sa": { "a": 0, "k": 0, "ix": 5 },
                            "nm": "Transform"
                        }
                    ],
                    "nm": "Group 1",
                    "np": 2,
                    "cix": 2,
                    "bm": 0,
                    "ix": 1,
                    "mn": "ADBE Vector Group",
                    "hd": false
                }
            ],
            "ip": 28,
            "op": 152,
            "st": 22,
            "bm": 0
        },
        {
            "ddd": 0,
            "ind": 5,
            "ty": 4,
            "nm": "planeta",
            "sr": 1,
            "ks": {
                "o": { "a": 0, "k": 100, "ix": 11 },
                "r": { "a": 0, "k": 0, "ix": 10 },
                "p": {
                    "a": 1,
                    "k": [
                        {
                            "i": { "x": 0.667, "y": 1 },
                            "o": { "x": 0.333, "y": 0 },
                            "t": 28,
                            "s": [933.394, 679.612, 0],
                            "to": [-137, 5.333, 0],
                            "ti": [45, -71.333, 0]
                        },
                        { "t": 39, "s": [663.394, 1107.612, 0] }
                    ],
                    "ix": 2
                },
                "a": { "a": 0, "k": [183.611, 181.36, 0], "ix": 1 },
                "s": {
                    "a": 1,
                    "k": [
                        {
                            "i": { "x": [0.667, 0.667, 0.667], "y": [1, 1, 1] },
                            "o": { "x": [0.333, 0.333, 0.333], "y": [0, 0, 0] },
                            "t": 52,
                            "s": [100, 100, 100]
                        },
                        {
                            "i": { "x": [0.667, 0.667, 0.667], "y": [1, 1, 1] },
                            "o": { "x": [0.333, 0.333, 0.333], "y": [0, 0, 0] },
                            "t": 57,
                            "s": [115, 115, 100]
                        },
                        { "t": 63, "s": [100, 100, 100] }
                    ],
                    "ix": 6
                }
            },
            "ao": 0,
            "hasMask": true,
            "masksProperties": [
                {
                    "inv": false,
                    "mode": "a",
                    "pt": {
                        "a": 0,
                        "k": {
                            "i": [
                                [73.702, 0],
                                [0, -73.702],
                                [-73.702, 0],
                                [0, 73.702]
                            ],
                            "o": [
                                [-73.702, 0],
                                [0, 73.702],
                                [73.702, 0],
                                [0, -73.702]
                            ],
                            "v": [
                                [184.667, 51.748],
                                [51.218, 185.198],
                                [184.667, 318.647],
                                [318.116, 185.198]
                            ],
                            "c": true
                        },
                        "ix": 1
                    },
                    "o": { "a": 0, "k": 100, "ix": 3 },
                    "x": { "a": 0, "k": 0, "ix": 4 },
                    "nm": "Mask 1"
                },
                {
                    "inv": false,
                    "mode": "s",
                    "pt": {
                        "a": 1,
                        "k": [
                            {
                                "i": { "x": 0.833, "y": 0.833 },
                                "o": { "x": 0.167, "y": 0.167 },
                                "t": 31,
                                "s": [
                                    {
                                        "i": [
                                            [0, 0],
                                            [31.33, -59.119],
                                            [21.421, -28.236],
                                            [29.967, -34.032],
                                            [0, 0],
                                            [-53, 74]
                                        ],
                                        "o": [
                                            [0, 0],
                                            [-29.722, 56.085],
                                            [-23.689, 31.227],
                                            [-27.509, 31.241],
                                            [0, 0],
                                            [72.364, -101.037]
                                        ],
                                        "v": [
                                            [550.218, -247.252],
                                            [498.817, -133.464],
                                            [389.218, 4.748],
                                            [345.251, 62.781],
                                            [296.218, 115.748],
                                            [417.218, -2.252]
                                        ],
                                        "c": true
                                    }
                                ]
                            },
                            {
                                "i": { "x": 0.833, "y": 0.833 },
                                "o": { "x": 0.167, "y": 0.167 },
                                "t": 33,
                                "s": [
                                    {
                                        "i": [
                                            [0, 0],
                                            [31.33, -59.119],
                                            [21.421, -28.236],
                                            [34.3, -34.366],
                                            [0, 0],
                                            [-56.212, 79.328]
                                        ],
                                        "o": [
                                            [0, 0],
                                            [-29.722, 56.085],
                                            [-23.689, 31.227],
                                            [-29.093, 29.595],
                                            [0, 0],
                                            [71.909, -101.358]
                                        ],
                                        "v": [
                                            [488.551, -180.252],
                                            [437.15, -66.464],
                                            [333.218, 66.415],
                                            [278.918, 127.447],
                                            [231.218, 180.082],
                                            [356.884, 65.415]
                                        ],
                                        "c": true
                                    }
                                ]
                            },
                            {
                                "i": { "x": 0.833, "y": 0.833 },
                                "o": { "x": 0.167, "y": 0.167 },
                                "t": 35,
                                "s": [
                                    {
                                        "i": [
                                            [0, 0],
                                            [31.33, -59.119],
                                            [21.421, -28.236],
                                            [38.633, -34.699],
                                            [0, 0],
                                            [-59.423, 84.655]
                                        ],
                                        "o": [
                                            [0, 0],
                                            [-29.722, 56.085],
                                            [-23.689, 31.227],
                                            [-30.677, 27.95],
                                            [0, 0],
                                            [71.455, -101.679]
                                        ],
                                        "v": [
                                            [426.884, -113.252],
                                            [375.483, 0.536],
                                            [278.718, 137.082],
                                            [221.584, 199.614],
                                            [189.718, 230.415],
                                            [305.551, 137.582]
                                        ],
                                        "c": true
                                    }
                                ]
                            },
                            {
                                "i": { "x": 0.833, "y": 0.833 },
                                "o": { "x": 0.167, "y": 0.167 },
                                "t": 36,
                                "s": [
                                    {
                                        "i": [
                                            [0, 0],
                                            [31.33, -59.119],
                                            [21.421, -28.236],
                                            [40.8, -34.866],
                                            [0, 0],
                                            [-61.029, 87.319]
                                        ],
                                        "o": [
                                            [0, 0],
                                            [-29.722, 56.085],
                                            [-23.689, 31.227],
                                            [-31.469, 27.127],
                                            [0, 0],
                                            [71.227, -101.839]
                                        ],
                                        "v": [
                                            [396.051, -79.752],
                                            [336.65, 29.036],
                                            [251.468, 172.415],
                                            [192.918, 235.697],
                                            [162.968, 267.582],
                                            [279.884, 173.665]
                                        ],
                                        "c": true
                                    }
                                ]
                            },
                            {
                                "i": { "x": 0.833, "y": 0.833 },
                                "o": { "x": 0.167, "y": 0.167 },
                                "t": 37,
                                "s": [
                                    {
                                        "i": [
                                            [0, 0],
                                            [31.33, -59.119],
                                            [21.421, -28.236],
                                            [42.967, -35.032],
                                            [0, 0],
                                            [-66.966, 86.808]
                                        ],
                                        "o": [
                                            [0, 0],
                                            [-29.722, 56.085],
                                            [-23.689, 31.227],
                                            [-32.262, 26.304],
                                            [0, 0],
                                            [81, -105]
                                        ],
                                        "v": [
                                            [365.218, -46.252],
                                            [313.817, 67.536],
                                            [224.218, 207.748],
                                            [164.251, 271.781],
                                            [110.218, 308.748],
                                            [254.218, 209.748]
                                        ],
                                        "c": true
                                    }
                                ]
                            },
                            {
                                "i": { "x": 0.833, "y": 0.833 },
                                "o": { "x": 0.167, "y": 0.167 },
                                "t": 38,
                                "s": [
                                    {
                                        "i": [
                                            [0, 0],
                                            [31.33, -59.119],
                                            [21.421, -28.236],
                                            [43.975, -39.132],
                                            [0, 0],
                                            [-90.333, 124]
                                        ],
                                        "o": [
                                            [0, 0],
                                            [-29.722, 56.085],
                                            [-23.689, 31.227],
                                            [-34.652, 31.063],
                                            [0, 0],
                                            [82.046, -112.623]
                                        ],
                                        "v": [
                                            [365.218, -46.252],
                                            [313.817, 67.536],
                                            [223.551, 209.082],
                                            [143.918, 298.781],
                                            [81.884, 346.415],
                                            [248.551, 215.748]
                                        ],
                                        "c": true
                                    }
                                ]
                            },
                            {
                                "t": 40,
                                "s": [
                                    {
                                        "i": [
                                            [0, 0],
                                            [31.33, -59.119],
                                            [21.421, -28.236],
                                            [45.992, -47.331],
                                            [0, 0],
                                            [-101.638, 134.78]
                                        ],
                                        "o": [
                                            [0, 0],
                                            [-29.722, 56.085],
                                            [-23.689, 31.227],
                                            [-39.432, 40.58],
                                            [0, 0],
                                            [92, -122]
                                        ],
                                        "v": [
                                            [365.218, -46.252],
                                            [313.817, 67.536],
                                            [222.218, 211.748],
                                            [103.251, 352.781],
                                            [25.218, 421.748],
                                            [237.218, 227.748]
                                        ],
                                        "c": true
                                    }
                                ]
                            }
                        ],
                        "ix": 1
                    },
                    "o": { "a": 0, "k": 100, "ix": 3 },
                    "x": { "a": 0, "k": 0, "ix": 4 },
                    "nm": "Mask 2"
                }
            ],
            "shapes": [
                {
                    "ty": "gr",
                    "it": [
                        {
                            "ind": 0,
                            "ty": "sh",
                            "ix": 1,
                            "ks": {
                                "a": 0,
                                "k": {
                                    "i": [
                                        [-57.281, -124.302],
                                        [0, 0],
                                        [54.284, 120.525],
                                        [0, 0]
                                    ],
                                    "o": [
                                        [56.852, 123.369],
                                        [0, 0],
                                        [-54.064, -120.04],
                                        [0, 0]
                                    ],
                                    "v": [
                                        [126.51, -56.808],
                                        [57.302, 129.792],
                                        [-129.298, 60.585],
                                        [-60.089, -126.015]
                                    ],
                                    "c": true
                                },
                                "ix": 2
                            },
                            "nm": "Path 1",
                            "mn": "ADBE Vector Shape - Group",
                            "hd": false
                        },
                        {
                            "ty": "fl",
                            "c": { "a": 0, "k": [0, 0.855000035903, 1, 1], "ix": 4 },
                            "o": { "a": 0, "k": 100, "ix": 5 },
                            "r": 1,
                            "bm": 0,
                            "nm": "Fill 1",
                            "mn": "ADBE Vector Graphic - Fill",
                            "hd": false
                        },
                        {
                            "ty": "tr",
                            "p": { "a": 0, "k": [184.612, 181.36], "ix": 2 },
                            "a": { "a": 0, "k": [0, 0], "ix": 1 },
                            "s": { "a": 0, "k": [100, 100], "ix": 3 },
                            "r": { "a": 0, "k": 0, "ix": 6 },
                            "o": { "a": 0, "k": 100, "ix": 7 },
                            "sk": { "a": 0, "k": 0, "ix": 4 },
                            "sa": { "a": 0, "k": 0, "ix": 5 },
                            "nm": "Transform"
                        }
                    ],
                    "nm": "Group 1",
                    "np": 2,
                    "cix": 2,
                    "bm": 0,
                    "ix": 1,
                    "mn": "ADBE Vector Group",
                    "hd": false
                }
            ],
            "ip": 28,
            "op": 153,
            "st": 22,
            "bm": 0
        },
        {
            "ddd": 0,
            "ind": 6,
            "ty": 4,
            "nm": "text 2",
            "sr": 1,
            "ks": {
                "o": { "a": 0, "k": 100, "ix": 11 },
                "r": { "a": 0, "k": 0, "ix": 10 },
                "p": { "a": 0, "k": [1114.5, 1102, 0], "ix": 2 },
                "a": { "a": 0, "k": [889.271, 133.819, 0], "ix": 1 },
                "s": { "a": 0, "k": [100, 100, 100], "ix": 6 }
            },
            "ao": 0,
            "shapes": [
                {
                    "ty": "gr",
                    "it": [
                        {
                            "ind": 0,
                            "ty": "sh",
                            "ix": 1,
                            "ks": {
                                "a": 1,
                                "k": [
                                    {
                                        "i": { "x": 0.667, "y": 1 },
                                        "o": { "x": 0.64, "y": 0 },
                                        "t": 31,
                                        "s": [
                                            {
                                                "i": [
                                                    [-2.917, -3.706],
                                                    [-6.409, -2.309],
                                                    [-7.665, -3.617],
                                                    [-7.973, -7.915],
                                                    [0.084, -16.867],
                                                    [4.775, -22.228],
                                                    [-6.168, 0],
                                                    [0, 0],
                                                    [-17.548, 17.805],
                                                    [1.105, 8.146],
                                                    [6.252, 9.032],
                                                    [2.407, 2.523],
                                                    [3.008, 2.136],
                                                    [6.724, 2.475],
                                                    [7.962, 1.766],
                                                    [34.958, 1.987]
                                                ],
                                                "o": [
                                                    [4.213, 5.353],
                                                    [7.974, 2.873],
                                                    [10.16, 4.794],
                                                    [11.97, 11.884],
                                                    [-0.113, 22.735],
                                                    [-1.295, 6.031],
                                                    [6.168, 0],
                                                    [0, 0],
                                                    [5.771, -5.855],
                                                    [-1.477, -10.885],
                                                    [-1.985, -2.868],
                                                    [-2.547, -2.67],
                                                    [-5.842, -4.148],
                                                    [-7.654, -2.817],
                                                    [-34.184, -7.582],
                                                    [-4.708, -0.268]
                                                ],
                                                "v": [
                                                    [-710.966, -19.223],
                                                    [-692.73, -10],
                                                    [-668.078, -3.773],
                                                    [-640.005, 14.879],
                                                    [-609.005, 54.874],
                                                    [-640.505, 115.37],
                                                    [-622, 115.37],
                                                    [-603.995, 112.37],
                                                    [-543.495, 70.374],
                                                    [-535.995, 46.879],
                                                    [-550.686, 17.379],
                                                    [-559.877, 12.379],
                                                    [-567.377, 4.004],
                                                    [-584.877, -5.37],
                                                    [-608, -13.37],
                                                    [-711.123, -33.37]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    },
                                    {
                                        "t": 40,
                                        "s": [
                                            {
                                                "i": [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                ],
                                                "o": [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                ],
                                                "v": [
                                                    [-104.966, -115.223],
                                                    [-104.73, -101],
                                                    [-61.578, -100.773],
                                                    [-18.505, -100.621],
                                                    [-18.505, 14.374],
                                                    [-18.505, 129.37],
                                                    [0, 129.37],
                                                    [18.505, 129.37],
                                                    [18.505, 14.374],
                                                    [18.505, -100.621],
                                                    [61.814, -100.621],
                                                    [105.123, -100.621],
                                                    [105.123, -114.996],
                                                    [105.123, -129.37],
                                                    [0, -129.37],
                                                    [-105.123, -129.37]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    }
                                ],
                                "ix": 2
                            },
                            "nm": "Path 1",
                            "mn": "ADBE Vector Shape - Group",
                            "hd": false
                        },
                        {
                            "ty": "fl",
                            "c": { "a": 0, "k": [0, 0.855000035903, 1, 1], "ix": 4 },
                            "o": { "a": 0, "k": 100, "ix": 5 },
                            "r": 1,
                            "bm": 0,
                            "nm": "Fill 1",
                            "mn": "ADBE Vector Graphic - Fill",
                            "hd": false
                        },
                        {
                            "ty": "tr",
                            "p": { "a": 0, "k": [1673.168, 133.63], "ix": 2 },
                            "a": { "a": 0, "k": [0, 0], "ix": 1 },
                            "s": {
                                "a": 1,
                                "k": [
                                    {
                                        "i": { "x": [0.667, 0.667], "y": [1, 1] },
                                        "o": { "x": [0.333, 0.333], "y": [0, 0] },
                                        "t": 65,
                                        "s": [100, 100]
                                    },
                                    {
                                        "i": { "x": [0.667, 0.667], "y": [1, 1] },
                                        "o": { "x": [0.333, 0.333], "y": [0, 0] },
                                        "t": 69,
                                        "s": [122, 122]
                                    },
                                    { "t": 77, "s": [100, 100] }
                                ],
                                "ix": 3
                            },
                            "r": { "a": 0, "k": 0, "ix": 6 },
                            "o": { "a": 0, "k": 100, "ix": 7 },
                            "sk": { "a": 0, "k": 0, "ix": 4 },
                            "sa": { "a": 0, "k": 0, "ix": 5 },
                            "nm": "Transform"
                        }
                    ],
                    "nm": "Group 1",
                    "np": 2,
                    "cix": 2,
                    "bm": 0,
                    "ix": 1,
                    "mn": "ADBE Vector Group",
                    "hd": false
                },
                {
                    "ty": "gr",
                    "it": [
                        {
                            "ind": 0,
                            "ty": "sh",
                            "ix": 1,
                            "ks": {
                                "a": 1,
                                "k": [
                                    {
                                        "i": { "x": 0.833, "y": 1 },
                                        "o": { "x": 0.167, "y": 0 },
                                        "t": 31,
                                        "s": [
                                            {
                                                "i": [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                ],
                                                "o": [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                ],
                                                "v": [
                                                    [-527.375, 43.999],
                                                    [-492.375, 130.371],
                                                    [-456.001, 124.371],
                                                    [-407.626, 113.371],
                                                    [-424.626, 108.374],
                                                    [-418.626, 89.376],
                                                    [-434.496, 88.376],
                                                    [-455.365, 83.376],
                                                    [-461.365, 70.607],
                                                    [-449.365, 62.835],
                                                    [-435.945, 57.834],
                                                    [-422.524, 52.834],
                                                    [-422.524, 38.839],
                                                    [-422.524, 24.842],
                                                    [-451.945, 21.843],
                                                    [-472.365, 22.842],
                                                    [-473.365, 8.611],
                                                    [-479.365, -1.621],
                                                    [-455.44, -5.772],
                                                    [-451.595, -14.001],
                                                    [-459.358, -24.223],
                                                    [-475.201, -32.371],
                                                    [-505.788, -30.371],
                                                    [-535.375, -34.371]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    },
                                    {
                                        "t": 40,
                                        "s": [
                                            {
                                                "i": [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                ],
                                                "o": [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                ],
                                                "v": [
                                                    [-89.375, -0.001],
                                                    [-89.375, 129.371],
                                                    [-0.001, 129.371],
                                                    [89.374, 129.371],
                                                    [89.374, 115.374],
                                                    [89.374, 101.376],
                                                    [18.504, 101.376],
                                                    [-52.365, 101.376],
                                                    [-52.365, 55.607],
                                                    [-52.365, 9.835],
                                                    [9.055, 9.835],
                                                    [70.476, 9.835],
                                                    [70.476, -4.161],
                                                    [70.476, -18.158],
                                                    [9.055, -18.158],
                                                    [-52.365, -18.158],
                                                    [-52.365, -59.389],
                                                    [-52.365, -100.621],
                                                    [17.56, -100.772],
                                                    [87.405, -101.001],
                                                    [87.642, -115.223],
                                                    [87.799, -129.371],
                                                    [-0.788, -129.371],
                                                    [-89.375, -129.371]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    }
                                ],
                                "ix": 2
                            },
                            "nm": "Path 1",
                            "mn": "ADBE Vector Shape - Group",
                            "hd": false
                        },
                        {
                            "ty": "fl",
                            "c": { "a": 0, "k": [0, 0.855000035903, 1, 1], "ix": 4 },
                            "o": { "a": 0, "k": 100, "ix": 5 },
                            "r": 1,
                            "bm": 0,
                            "nm": "Fill 1",
                            "mn": "ADBE Vector Graphic - Fill",
                            "hd": false
                        },
                        {
                            "ty": "tr",
                            "p": { "a": 0, "k": [1460.559, 133.631], "ix": 2 },
                            "a": { "a": 0, "k": [0, 0], "ix": 1 },
                            "s": {
                                "a": 1,
                                "k": [
                                    {
                                        "i": { "x": [0.667, 0.667], "y": [1, 1] },
                                        "o": { "x": [0.333, 0.333], "y": [0, 0] },
                                        "t": 63,
                                        "s": [100, 100]
                                    },
                                    {
                                        "i": { "x": [0.667, 0.667], "y": [1, 1] },
                                        "o": { "x": [0.333, 0.333], "y": [0, 0] },
                                        "t": 67,
                                        "s": [122, 122]
                                    },
                                    { "t": 75, "s": [100, 100] }
                                ],
                                "ix": 3
                            },
                            "r": { "a": 0, "k": 0, "ix": 6 },
                            "o": { "a": 0, "k": 100, "ix": 7 },
                            "sk": { "a": 0, "k": 0, "ix": 4 },
                            "sa": { "a": 0, "k": 0, "ix": 5 },
                            "nm": "Transform"
                        }
                    ],
                    "nm": "Group 2",
                    "np": 2,
                    "cix": 2,
                    "bm": 0,
                    "ix": 2,
                    "mn": "ADBE Vector Group",
                    "hd": false
                },
                {
                    "ty": "gr",
                    "it": [
                        {
                            "ind": 0,
                            "ty": "sh",
                            "ix": 1,
                            "ks": {
                                "a": 1,
                                "k": [
                                    {
                                        "i": { "x": 0.833, "y": 1 },
                                        "o": { "x": 0.167, "y": 0 },
                                        "t": 31,
                                        "s": [
                                            {
                                                "i": [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                ],
                                                "o": [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                ],
                                                "v": [
                                                    [-345.894, 7.999],
                                                    [-327.894, 134.371],
                                                    [-287.999, 133.371],
                                                    [-258.106, 130.371],
                                                    [-258.106, 116.374],
                                                    [-263.106, 105.376],
                                                    [-284.495, 102.376],
                                                    [-299.883, 104.376],
                                                    [-312.883, 6.004],
                                                    [-329.883, -37.371],
                                                    [-348.389, -37.371],
                                                    [-366.894, -37.371]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    },
                                    {
                                        "t": 40,
                                        "s": [
                                            {
                                                "i": [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                ],
                                                "o": [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                ],
                                                "v": [
                                                    [-81.894, -0.001],
                                                    [-81.894, 129.371],
                                                    [0.001, 129.371],
                                                    [81.894, 129.371],
                                                    [81.894, 115.374],
                                                    [81.894, 101.376],
                                                    [18.505, 101.376],
                                                    [-44.883, 101.376],
                                                    [-44.883, -13.996],
                                                    [-44.883, -129.371],
                                                    [-63.389, -129.371],
                                                    [-81.894, -129.371]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    }
                                ],
                                "ix": 2
                            },
                            "nm": "Path 1",
                            "mn": "ADBE Vector Shape - Group",
                            "hd": false
                        },
                        {
                            "ty": "fl",
                            "c": { "a": 0, "k": [0, 0.855000035903, 1, 1], "ix": 4 },
                            "o": { "a": 0, "k": 100, "ix": 5 },
                            "r": 1,
                            "bm": 0,
                            "nm": "Fill 1",
                            "mn": "ADBE Vector Graphic - Fill",
                            "hd": false
                        },
                        {
                            "ty": "tr",
                            "p": { "a": 0, "k": [1248.343, 133.631], "ix": 2 },
                            "a": { "a": 0, "k": [0, 0], "ix": 1 },
                            "s": {
                                "a": 1,
                                "k": [
                                    {
                                        "i": { "x": [0.667, 0.667], "y": [1, 1] },
                                        "o": { "x": [0.333, 0.333], "y": [0, 0] },
                                        "t": 61,
                                        "s": [100, 100]
                                    },
                                    {
                                        "i": { "x": [0.667, 0.667], "y": [1, 1] },
                                        "o": { "x": [0.333, 0.333], "y": [0, 0] },
                                        "t": 65,
                                        "s": [122, 122]
                                    },
                                    { "t": 73, "s": [100, 100] }
                                ],
                                "ix": 3
                            },
                            "r": { "a": 0, "k": 0, "ix": 6 },
                            "o": { "a": 0, "k": 100, "ix": 7 },
                            "sk": { "a": 0, "k": 0, "ix": 4 },
                            "sa": { "a": 0, "k": 0, "ix": 5 },
                            "nm": "Transform"
                        }
                    ],
                    "nm": "Group 3",
                    "np": 2,
                    "cix": 2,
                    "bm": 0,
                    "ix": 3,
                    "mn": "ADBE Vector Group",
                    "hd": false
                },
                {
                    "ty": "gr",
                    "it": [
                        {
                            "ind": 0,
                            "ty": "sh",
                            "ix": 1,
                            "ks": {
                                "a": 1,
                                "k": [
                                    {
                                        "i": { "x": 0.667, "y": 1 },
                                        "o": { "x": 0.333, "y": 0 },
                                        "t": 31,
                                        "s": [
                                            {
                                                "i": [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                ],
                                                "o": [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                ],
                                                "v": [
                                                    [-169.973, 11.999],
                                                    [-201.973, 132.371],
                                                    [-183.469, 132.371],
                                                    [-164.964, 132.371],
                                                    [-159.805, 109.808],
                                                    [-147.57, 85.246],
                                                    [-136.077, 115.808],
                                                    [-114.665, 134.371],
                                                    [-95.846, 134.371],
                                                    [-77.027, 134.371],
                                                    [-86.027, 37.999],
                                                    [-119.027, -37.371],
                                                    [-139.532, -41.371],
                                                    [-158.037, -36.371],
                                                    [-153.037, -22.884],
                                                    [-162.586, -23.397],
                                                    [-169.707, -18.884],
                                                    [-189.2, -34.371],
                                                    [-207.626, -34.371],
                                                    [-225.973, -34.371]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    },
                                    {
                                        "t": 40,
                                        "s": [
                                            {
                                                "i": [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0.315, 0],
                                                    [35.434, 54.699],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                ],
                                                "o": [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 54.699],
                                                    [-0.394, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                ],
                                                "v": [
                                                    [-101.973, -0.001],
                                                    [-101.973, 129.371],
                                                    [-83.469, 129.371],
                                                    [-64.964, 129.371],
                                                    [-64.805, 29.808],
                                                    [-64.57, -69.754],
                                                    [-0.077, 29.808],
                                                    [64.335, 129.371],
                                                    [83.154, 129.371],
                                                    [101.973, 129.371],
                                                    [101.973, -0.001],
                                                    [101.973, -129.371],
                                                    [83.468, -129.371],
                                                    [64.963, -129.371],
                                                    [64.963, -29.884],
                                                    [64.414, 69.603],
                                                    [-0.707, -29.884],
                                                    [-65.2, -129.371],
                                                    [-83.626, -129.371],
                                                    [-101.973, -129.371]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    }
                                ],
                                "ix": 2
                            },
                            "nm": "Path 1",
                            "mn": "ADBE Vector Shape - Group",
                            "hd": false
                        },
                        {
                            "ty": "fl",
                            "c": { "a": 0, "k": [0, 0.855000035903, 1, 1], "ix": 4 },
                            "o": { "a": 0, "k": 100, "ix": 5 },
                            "r": 1,
                            "bm": 0,
                            "nm": "Fill 1",
                            "mn": "ADBE Vector Graphic - Fill",
                            "hd": false
                        },
                        {
                            "ty": "tr",
                            "p": { "a": 0, "k": [999.118, 133.631], "ix": 2 },
                            "a": { "a": 0, "k": [0, 0], "ix": 1 },
                            "s": {
                                "a": 1,
                                "k": [
                                    {
                                        "i": { "x": [0.667, 0.667], "y": [1, 1] },
                                        "o": { "x": [0.333, 0.333], "y": [0, 0] },
                                        "t": 59,
                                        "s": [100, 100]
                                    },
                                    {
                                        "i": { "x": [0.667, 0.667], "y": [1, 1] },
                                        "o": { "x": [0.333, 0.333], "y": [0, 0] },
                                        "t": 63,
                                        "s": [122, 122]
                                    },
                                    { "t": 71, "s": [100, 100] }
                                ],
                                "ix": 3
                            },
                            "r": { "a": 0, "k": 0, "ix": 6 },
                            "o": { "a": 0, "k": 100, "ix": 7 },
                            "sk": { "a": 0, "k": 0, "ix": 4 },
                            "sa": { "a": 0, "k": 0, "ix": 5 },
                            "nm": "Transform"
                        }
                    ],
                    "nm": "Group 4",
                    "np": 2,
                    "cix": 2,
                    "bm": 0,
                    "ix": 4,
                    "mn": "ADBE Vector Group",
                    "hd": false
                },
                {
                    "ty": "gr",
                    "it": [
                        {
                            "ind": 0,
                            "ty": "sh",
                            "ix": 1,
                            "ks": {
                                "a": 1,
                                "k": [
                                    {
                                        "i": { "x": 0.667, "y": 1 },
                                        "o": { "x": 0.333, "y": 0 },
                                        "t": 31,
                                        "s": [
                                            {
                                                "i": [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [-4.2, 0],
                                                    [-2.905, 3.069],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                ],
                                                "o": [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [4.226, 0],
                                                    [10.846, -11.457],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                ],
                                                "v": [
                                                    [474.923, 46],
                                                    [472.923, 65.37],
                                                    [476.428, 74.371],
                                                    [485.933, 81.371],
                                                    [498.854, 89.941],
                                                    [507.043, 95.899],
                                                    [521.388, 98.059],
                                                    [527.698, 102.101],
                                                    [531.006, 108.371],
                                                    [543.606, 108.371],
                                                    [556.283, 108.371],
                                                    [563.515, 112.327],
                                                    [574.061, 115.874],
                                                    [585.642, 117.1],
                                                    [595.068, 124.628],
                                                    [611.068, 128.371],
                                                    [629.573, 128.371],
                                                    [648.078, 128.371],
                                                    [594.078, 32.999],
                                                    [620.078, -29.371],
                                                    [598.297, -25.22],
                                                    [584.516, -25.992],
                                                    [568.309, -24.723],
                                                    [544.393, -16.79],
                                                    [524.77, -10.21],
                                                    [505.855, 6.629],
                                                    [496.388, 17.629],
                                                    [481.923, 28.629]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    },
                                    {
                                        "t": 40,
                                        "s": [
                                            {
                                                "i": [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [1.26, 36.693],
                                                    [-0.078, 0.075],
                                                    [-23.78, -56.741],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [-0.158, -0.833],
                                                    [0.945, -24.588],
                                                    [0, -42.214],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0.473, -0.907],
                                                    [35.75, 87.759],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                ],
                                                "o": [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, -37.903],
                                                    [-0.945, -27.917],
                                                    [0, -0.076],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [23.86, -56.666],
                                                    [0.157, 0.832],
                                                    [-1.181, 33.212],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [-23.151, 56.817],
                                                    [-0.63, 1.438],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                ],
                                                "v": [
                                                    [-133.077, -0.001],
                                                    [-133.077, 129.371],
                                                    [-114.573, 129.371],
                                                    [-96.068, 129.371],
                                                    [-96.146, 76.941],
                                                    [-97.957, -26.101],
                                                    [-99.612, -76.941],
                                                    [-56.302, 26.1],
                                                    [-12.993, 129.371],
                                                    [-0.393, 129.371],
                                                    [12.284, 129.371],
                                                    [55.514, 26.327],
                                                    [99.061, -75.126],
                                                    [97.643, -28.9],
                                                    [96.068, 72.628],
                                                    [96.068, 129.371],
                                                    [114.573, 129.371],
                                                    [133.077, 129.371],
                                                    [133.077, -0.001],
                                                    [133.077, -129.371],
                                                    [109.297, -129.22],
                                                    [85.517, -128.992],
                                                    [43.31, -25.723],
                                                    [0.393, 79.21],
                                                    [-43.23, -24.21],
                                                    [-86.146, -129.371],
                                                    [-109.612, -129.371],
                                                    [-133.077, -129.371]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    }
                                ],
                                "ix": 2
                            },
                            "nm": "Path 1",
                            "mn": "ADBE Vector Shape - Group",
                            "hd": false
                        },
                        {
                            "ty": "fl",
                            "c": { "a": 0, "k": [0, 0.855000035903, 1, 1], "ix": 4 },
                            "o": { "a": 0, "k": 100, "ix": 5 },
                            "r": 1,
                            "bm": 0,
                            "nm": "Fill 1",
                            "mn": "ADBE Vector Graphic - Fill",
                            "hd": false
                        },
                        {
                            "ty": "tr",
                            "p": { "a": 0, "k": [133.327, 133.631], "ix": 2 },
                            "a": { "a": 0, "k": [0, 0], "ix": 1 },
                            "s": {
                                "a": 1,
                                "k": [
                                    {
                                        "i": { "x": [0.667, 0.667], "y": [1, 1] },
                                        "o": { "x": [0.333, 0.333], "y": [0, 0] },
                                        "t": 50,
                                        "s": [100, 100]
                                    },
                                    {
                                        "i": { "x": [0.667, 0.667], "y": [1, 1] },
                                        "o": { "x": [0.333, 0.333], "y": [0, 0] },
                                        "t": 54,
                                        "s": [122, 122]
                                    },
                                    { "t": 62, "s": [100, 100] }
                                ],
                                "ix": 3
                            },
                            "r": { "a": 0, "k": 0, "ix": 6 },
                            "o": { "a": 0, "k": 100, "ix": 7 },
                            "sk": { "a": 0, "k": 0, "ix": 4 },
                            "sa": { "a": 0, "k": 0, "ix": 5 },
                            "nm": "Transform"
                        }
                    ],
                    "nm": "Group 5",
                    "np": 2,
                    "cix": 2,
                    "bm": 0,
                    "ix": 5,
                    "mn": "ADBE Vector Group",
                    "hd": false
                },
                {
                    "ty": "gr",
                    "it": [
                        {
                            "ind": 0,
                            "ty": "sh",
                            "ix": 1,
                            "ks": {
                                "a": 1,
                                "k": [
                                    {
                                        "i": { "x": 0.667, "y": 1 },
                                        "o": { "x": 0.167, "y": 0 },
                                        "t": 31,
                                        "s": [
                                            {
                                                "i": [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [-0.787, 4.237],
                                                    [0.072, 1.349],
                                                    [-7.348, 9.35],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                ],
                                                "o": [
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0.477, -2.519],
                                                    [-0.379, -7.117],
                                                    [0.381, -0.486],
                                                    [0, 0],
                                                    [0, 0],
                                                    [0, 0]
                                                ],
                                                "v": [
                                                    [59.273, 32.373],
                                                    [70.731, 34.833],
                                                    [78.29, 42.788],
                                                    [77.268, 50.388],
                                                    [74.914, 60.773],
                                                    [67.598, 67.416],
                                                    [63.639, 70.651],
                                                    [56.023, 68.949],
                                                    [43.97, 70.082],
                                                    [36.797, 67.623],
                                                    [39.387, 65.012],
                                                    [36.074, 59.068],
                                                    [38.171, 52.47],
                                                    [37.001, 41.138],
                                                    [46.283, 33.48]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    },
                                    {
                                        "t": 40,
                                        "s": [
                                            {
                                                "i": [
                                                    [-8.268, -0.832],
                                                    [-11.024, -24.588],
                                                    [0.551, -41.156],
                                                    [1.575, -6.809],
                                                    [6.142, -8.928],
                                                    [4.804, -3.329],
                                                    [21.734, 10.895],
                                                    [5.828, 17.854],
                                                    [0, 39.115],
                                                    [-0.787, 4.237],
                                                    [-1.406, 4.279],
                                                    [-5.964, 7.588],
                                                    [-0.716, 0.827],
                                                    [-7.914, 3.701],
                                                    [-8.662, 0.908]
                                                ],
                                                "o": [
                                                    [26.773, 2.724],
                                                    [6.772, 15.207],
                                                    [-0.315, 28.219],
                                                    [-2.914, 12.559],
                                                    [-3.543, 5.22],
                                                    [-19.764, 13.921],
                                                    [-14.646, -7.414],
                                                    [-4.724, -14.224],
                                                    [0, -26.706],
                                                    [0.951, -5.024],
                                                    [3.02, -9.189],
                                                    [0.688, -0.879],
                                                    [5.755, -6.653],
                                                    [7.559, -3.48],
                                                    [7.717, -0.908]
                                                ],
                                                "v": [
                                                    [5.985, -103.08],
                                                    [63.546, -61.47],
                                                    [71.106, 6.242],
                                                    [69.059, 44.75],
                                                    [56.46, 74.71],
                                                    [39.923, 91.656],
                                                    [-32.679, 96.952],
                                                    [-65.909, 56.099],
                                                    [-70.79, 0.567],
                                                    [-69.767, -41.043],
                                                    [-66.261, -54.935],
                                                    [-53.073, -79.476],
                                                    [-50.968, -82.035],
                                                    [-30.631, -97.406],
                                                    [-10.079, -103.004]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    }
                                ],
                                "ix": 2
                            },
                            "nm": "Path 1",
                            "mn": "ADBE Vector Shape - Group",
                            "hd": false
                        },
                        {
                            "ind": 1,
                            "ty": "sh",
                            "ix": 2,
                            "ks": {
                                "a": 1,
                                "k": [
                                    {
                                        "i": { "x": 0.667, "y": 1 },
                                        "o": { "x": 0.167, "y": 0 },
                                        "t": 31,
                                        "s": [
                                            {
                                                "i": [
                                                    [2.372, -0.242],
                                                    [9.66, -11.332],
                                                    [1.785, -16.512],
                                                    [-0.647, -7.167],
                                                    [-10.351, -11.623],
                                                    [-12.723, -2.276],
                                                    [-5.952, 1.404],
                                                    [-8.141, 18.165],
                                                    [-0.949, 9.831],
                                                    [0.561, 6.102],
                                                    [10.58, 11.95],
                                                    [0, 0],
                                                    [1.466, -0.194]
                                                ],
                                                "o": [
                                                    [-13.93, 1.162],
                                                    [-9.402, 11.091],
                                                    [-0.733, 6.78],
                                                    [1.725, 17.87],
                                                    [8.798, 9.928],
                                                    [5.909, 1.017],
                                                    [17.165, -4.165],
                                                    [3.321, -7.409],
                                                    [0.561, -6.102],
                                                    [-1.725, -17.87],
                                                    [-7.418, -8.378],
                                                    [0, 0],
                                                    [-0.216, 0.048]
                                                ],
                                                "v": [
                                                    [50.832, -33.322],
                                                    [20.676, -4.229],
                                                    [5.225, 32.378],
                                                    [10.132, 72.405],
                                                    [23.674, 110.5],
                                                    [46.95, 135.983],
                                                    [70.973, 135.209],
                                                    [90.84, 108.727],
                                                    [99.186, 70.891],
                                                    [101.235, 30.291],
                                                    [88.459, -8.046],
                                                    [71.404, -31.918],
                                                    [55.576, -33.806]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    },
                                    {
                                        "t": 40,
                                        "s": [
                                            {
                                                "i": [
                                                    [4.331, -0.378],
                                                    [17.638, -17.703],
                                                    [3.228, -25.798],
                                                    [-1.181, -11.197],
                                                    [-18.899, -18.157],
                                                    [-23.229, -3.556],
                                                    [-10.867, 2.193],
                                                    [-14.883, 28.371],
                                                    [-1.732, 15.358],
                                                    [1.024, 9.532],
                                                    [19.292, 18.687],
                                                    [19.214, 4.01],
                                                    [2.677, -0.303]
                                                ],
                                                "o": [
                                                    [-25.434, 1.816],
                                                    [-17.167, 17.326],
                                                    [-1.338, 10.592],
                                                    [3.15, 27.917],
                                                    [16.063, 15.51],
                                                    [10.788, 1.588],
                                                    [31.34, -6.507],
                                                    [6.063, -11.575],
                                                    [1.024, -9.533],
                                                    [-3.15, -27.917],
                                                    [-13.544, -13.089],
                                                    [-5.827, -1.21],
                                                    [-0.394, 0.075]
                                                ],
                                                "v": [
                                                    [-12.52, -132.51],
                                                    [-76.932, -103.156],
                                                    [-107.013, -39.53],
                                                    [-107.407, 37.487],
                                                    [-75.2, 105.047],
                                                    [-19.607, 131.981],
                                                    [24.254, 130.771],
                                                    [96.067, 76.525],
                                                    [107.565, 36.731],
                                                    [107.565, -36.352],
                                                    [74.886, -104.29],
                                                    [25.041, -130.316],
                                                    [-3.858, -133.266]
                                                ],
                                                "c": true
                                            }
                                        ]
                                    }
                                ],
                                "ix": 2
                            },
                            "nm": "Path 2",
                            "mn": "ADBE Vector Shape - Group",
                            "hd": false
                        },
                        {
                            "ty": "mm",
                            "mm": 1,
                            "nm": "Merge Paths 1",
                            "mn": "ADBE Vector Filter - Merge",
                            "hd": false
                        },
                        {
                            "ty": "fl",
                            "c": { "a": 0, "k": [0, 0.855000035903, 1, 1], "ix": 4 },
                            "o": { "a": 0, "k": 100, "ix": 5 },
                            "r": 1,
                            "bm": 0,
                            "nm": "Fill 1",
                            "mn": "ADBE Vector Graphic - Fill",
                            "hd": false
                        },
                        {
                            "ty": "tr",
                            "p": { "a": 0, "k": [723.411, 133.819], "ix": 2 },
                            "a": { "a": 0, "k": [0, 0], "ix": 1 },
                            "s": {
                                "a": 1,
                                "k": [
                                    {
                                        "i": { "x": [0.667, 0.667], "y": [1, 1] },
                                        "o": { "x": [0.333, 0.333], "y": [0, 0] },
                                        "t": 57,
                                        "s": [100, 100]
                                    },
                                    {
                                        "i": { "x": [0.667, 0.667], "y": [1, 1] },
                                        "o": { "x": [0.333, 0.333], "y": [0, 0] },
                                        "t": 61,
                                        "s": [122, 122]
                                    },
                                    { "t": 69, "s": [100, 100] }
                                ],
                                "ix": 3
                            },
                            "r": { "a": 0, "k": 0, "ix": 6 },
                            "o": { "a": 0, "k": 100, "ix": 7 },
                            "sk": { "a": 0, "k": 0, "ix": 4 },
                            "sa": { "a": 0, "k": 0, "ix": 5 },
                            "nm": "Transform"
                        }
                    ],
                    "nm": "Group 6",
                    "np": 4,
                    "cix": 2,
                    "bm": 0,
                    "ix": 6,
                    "mn": "ADBE Vector Group",
                    "hd": false
                }
            ],
            "ip": 31,
            "op": 151,
            "st": 31,
            "bm": 0
        }
    ],
    "markers": []
}

'''
'''--- src/components/account-address/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION, normalizeFontAndLineHeight } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            paddingBottom: BASE_DIMENSION * 2
        },
        balanceContainer: {
            marginTop: BASE_DIMENSION,
            flexWrap: 'wrap',
            justifyContent: 'center',
            flexDirection: 'row'
        },
        balance: {
            fontSize: normalizeFontAndLineHeight(theme.fontSize.large),
            color: theme.colors.textSecondary
        },
        convert: {
            marginLeft: BASE_DIMENSION / 2,
            fontSize: normalizeFontAndLineHeight(theme.fontSize.large),
            color: theme.colors.textSecondary
        },
        balanceSymbolFiat: {
            fontSize: normalizeFontAndLineHeight(18),
            color: theme.colors.textSecondary,
            marginLeft: BASE_DIMENSION
        },
        address: {
            fontSize: normalizeFontAndLineHeight(30),
            textAlign: 'center',
            fontWeight: 'bold'
        }
    });

'''
'''--- src/components/account-summary/styles.ts ---
import { StyleSheet } from 'react-native';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    LETTER_SPACING,
    normalize,
    normalizeFontAndLineHeight
} from '../../styles/dimensions';
import { ITheme } from '../../core/theme/itheme';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexDirection: 'column'
        },
        summaryContainer: {
            backgroundColor: theme.colors.cardBackground,
            borderRadius: BORDER_RADIUS,
            paddingBottom: BASE_DIMENSION,
            paddingHorizontal: BASE_DIMENSION + BASE_DIMENSION / 2
        },
        topContainer: {
            flexDirection: 'row',
            justifyContent: 'space-between'
        },
        summaryText: {
            fontSize: normalizeFontAndLineHeight(18),
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.text,
            alignSelf: 'center'
        },
        summaryTextExpandedDisabled: {
            marginTop: BASE_DIMENSION / 2,
            marginBottom: BASE_DIMENSION
        },
        icon: {
            color: theme.colors.accent,
            alignSelf: 'center',
            padding: BASE_DIMENSION + BASE_DIMENSION / 2
        },
        barContainer: {
            flexDirection: 'row',
            width: '100%',
            backgroundColor: theme.colors.textSecondary,
            height: normalize(20),
            marginBottom: BASE_DIMENSION * 2,
            borderRadius: BORDER_RADIUS / 2,
            overflow: 'hidden'
        },
        barCard: {
            height: normalize(20)
        },
        topStatsContainer: {
            flexDirection: 'row',
            flexWrap: 'wrap',
            justifyContent: 'space-between'
        },
        percentageSquareContainer: {
            flexDirection: 'row',
            justifyContent: 'center',
            marginBottom: BASE_DIMENSION
        },
        percentageSquare: {
            padding: BASE_DIMENSION / 1.3,
            marginRight: BASE_DIMENSION / 2,
            borderRadius: BORDER_RADIUS / 4
        },
        percentageText: {
            fontSize: normalizeFontAndLineHeight(9),
            lineHeight: normalizeFontAndLineHeight(13),
            color: theme.colors.text,
            alignSelf: 'center'
        },
        percengateSkeletonContainer: {
            flexDirection: 'row',
            width: '100%',
            justifyContent: 'space-between'
        },
        percengateSkeleton: {
            height: normalize(20),
            marginBottom: BASE_DIMENSION,
            borderRadius: BORDER_RADIUS / 2
        },
        detailsContainer: {
            flexDirection: 'row',
            marginTop: BASE_DIMENSION * 2,
            flexWrap: 'wrap'
        },
        detailsStatContainer: {
            flex: 1,
            flexDirection: 'row',
            marginBottom: BASE_DIMENSION * 2
        },
        detailsStatIconContainer: {
            width: normalize(36),
            height: normalize(36),
            backgroundColor: theme.colors.black + '40', // 25% opacity
            borderRadius: BORDER_RADIUS,
            justifyContent: 'center',
            marginRight: BASE_DIMENSION,
            alignSelf: 'center'
        },
        detailsPrimaryText: {
            fontSize: normalizeFontAndLineHeight(16),
            lineHeight: normalizeFontAndLineHeight(21),
            color: theme.colors.white
        },
        detailsSecondaryText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.textSecondary
        },
        detailsExtraContainer: {
            flexDirection: 'column'
        },
        divider: {
            width: '100%',
            height: 1,
            backgroundColor: theme.colors.inputBackground
        },
        detailsExtraTextContainer: {
            flexDirection: 'row',
            marginTop: BASE_DIMENSION * 2,
            justifyContent: 'center',
            marginBottom: BASE_DIMENSION
        },
        detailsExtraPlaceholderWrapper: {
            width: '100%'
        },
        detailsExtraPlaceholderContainer: {
            alignItems: 'center',
            marginBottom: BASE_DIMENSION * 2
        },
        detailsExtraText: {
            fontSize: normalizeFontAndLineHeight(23),
            lineHeight: normalizeFontAndLineHeight(34),
            color: theme.colors.white,
            letterSpacing: LETTER_SPACING
        },
        detailsSkeletonComp: {
            flexDirection: 'row',
            marginBottom: BASE_DIMENSION * 2,
            marginRight: BASE_DIMENSION * 2
        },
        detailsSkeletonIcon: {
            width: normalize(36),
            height: normalize(36),
            borderRadius: BORDER_RADIUS,
            marginRight: BASE_DIMENSION
        },
        detailsSkeletonPrimaryValue: {
            height: normalize(14),
            width: normalize(100),
            borderRadius: BORDER_RADIUS / 2
        },
        detailsSkeletonSecondaryValue: {
            height: normalize(12),
            width: normalize(80),
            borderRadius: BORDER_RADIUS / 2
        },
        extraTokenIcon: {
            width: normalize(38),
            height: normalize(38),
            marginRight: BASE_DIMENSION
        },
        arrowContainer: {
            backgroundColor: theme.colors.cardBackground
        }
    });

'''
'''--- src/components/affiliate-banner/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { normalize } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        image: {
            height: normalize(60),
            width: '100%'
        }
    });

'''
'''--- src/components/affiliate-banner/types.ts ---
export const AffiliateBannerType = {
    LEDGER_NANO_X: {
        url: 'https://shop.ledger.com/pages/ledger-nano-x?r=69d534ac55d9',
        image: require('../../assets/images/png/affiliate-banners/ledger_nano_x.png')
    },
    UNSTOPPABLE_DOMAINS: {
        url: 'https://unstoppabledomains.com/r/moonlet',
        image: require('../../assets/images/png/affiliate-banners/unstoppabledomains.png')
    }
};

export interface IAffiliateBannerType {
    url: string;
    image: any;
}

'''
'''--- src/components/amount/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';

export default (theme: ITheme) =>
    StyleSheet.create({
        smallToken: {
            color: theme.colors.white
        }
    });

'''
'''--- src/components/bottom-blockchain-navigation/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION, normalize, normalizeFontAndLineHeight } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        selectorGradientContainer: {
            position: 'absolute',
            left: 0,
            right: 0,
            height: normalize(70), // used for 20px
            bottom: 0,
            justifyContent: 'flex-end'
        },
        blockchainSelectorContainer: {
            backgroundColor: theme.colors.cardBackground,
            borderRadius: normalize(20),
            height: normalize(40),
            flexDirection: 'row',
            marginBottom: BASE_DIMENSION + BASE_DIMENSION / 2,
            marginHorizontal: BASE_DIMENSION * 2,
            overflow: 'hidden'
        },
        blockchainButton: {
            flex: 1,
            flexBasis: 0,
            justifyContent: 'center',
            alignItems: 'center',
            borderRadius: normalize(16),
            margin: BASE_DIMENSION / 2
        },
        blockchainButtonActive: {
            backgroundColor: theme.colors.textTertiary
        },
        blockchainButtonTextActive: {
            lineHeight: normalizeFontAndLineHeight(18),
            color: theme.colors.accent
        },
        expandIconContainer: {
            marginRight: BASE_DIMENSION * 2,
            justifyContent: 'center'
        },
        expandIcon: {
            color: theme.colors.accent,
            alignSelf: 'center'
        },
        bottomBlockchainContainer: {
            flex: 1,
            flexDirection: 'row'
        }
    });

'''
'''--- src/components/bottom-cta/amount-cta-field/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../core/theme/itheme';
import { normalizeFontAndLineHeight } from '../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        defaultText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.text
        },
        amountText: {
            fontSize: normalizeFontAndLineHeight(11),
            lineHeight: normalizeFontAndLineHeight(13),
            color: theme.colors.textTertiary
        }
    });

'''
'''--- src/components/bottom-cta/primary-cta-field/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../core/theme/itheme';
import { BASE_DIMENSION, normalizeFontAndLineHeight } from '../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexDirection: 'column'
        },
        defaultText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.text
        },
        sendText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            marginRight: BASE_DIMENSION / 2
        },
        toText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.text,
            marginRight: BASE_DIMENSION / 2
        }
    });

'''
'''--- src/components/bottom-cta/styles.ts ---
import { StyleSheet, Platform } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION, isIphoneXorAbove } from '../../styles/dimensions';

const DEFAULT_BOTTOM_CONTAINER_PADDING = BASE_DIMENSION + BASE_DIMENSION / 2;

export default (theme: ITheme) =>
    StyleSheet.create({
        wrapper: {
            position: 'absolute',
            bottom: 0,
            left: 0,
            right: 0,
            flexDirection: 'column',
            width: '100%',
            justifyContent: 'flex-end',
            backgroundColor: theme.colors.appBackground
        },
        divider: {
            height: 1,
            width: '100%',
            backgroundColor: theme.colors.settingsDivider
        },
        container: {
            flex: 1,
            flexDirection: 'row'
        },
        buttonContainer: {
            paddingRight: DEFAULT_BOTTOM_CONTAINER_PADDING,
            paddingTop: DEFAULT_BOTTOM_CONTAINER_PADDING,
            paddingBottom: Platform.select({
                default: DEFAULT_BOTTOM_CONTAINER_PADDING,
                ios: isIphoneXorAbove() ? BASE_DIMENSION * 3 : DEFAULT_BOTTOM_CONTAINER_PADDING
            })
        },
        bottomTextContainer: {
            flex: 1,
            flexDirection: 'column',
            justifyContent: 'center',
            paddingRight: BASE_DIMENSION * 2,
            paddingLeft: BASE_DIMENSION + BASE_DIMENSION / 2,
            paddingTop: BASE_DIMENSION / 4
        }
    });

'''
'''--- src/components/bottom-sheet/accounts-bottom-sheet/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    LETTER_SPACING,
    normalize
} from '../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            backgroundColor: theme.colors.bottomSheetBackground,
            padding: BASE_DIMENSION * 2
        },
        scrollContainer: {
            flexGrow: 1,
            backgroundColor: theme.colors.bottomSheetBackground,
            marginBottom: BASE_DIMENSION * 4
        },
        icon: {
            color: theme.colors.accent,
            alignSelf: 'center'
        },
        firstRow: {
            flexDirection: 'row',
            marginBottom: BASE_DIMENSION / 4,
            width: '100%'
        },
        accountName: {
            fontSize: normalizeFontAndLineHeight(18),
            lineHeight: normalizeFontAndLineHeight(25),
            fontWeight: '500',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text,
            marginRight: BASE_DIMENSION
        },
        accountAddress: {
            fontSize: normalizeFontAndLineHeight(18),
            lineHeight: normalizeFontAndLineHeight(25),
            fontWeight: '500',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.accent,
            flexShrink: 1
        },
        fistAmountText: {
            color: theme.colors.textSecondary,
            marginRight: BASE_DIMENSION
        },
        secondAmountText: {
            color: theme.colors.textSecondary
        },

        // Swipeable left actions
        leftActionsContainer: {
            flexDirection: 'row'
        },
        action: {
            justifyContent: 'center',
            alignItems: 'center',
            width: normalize(72)
        },
        iconActionPositive: {
            height: normalize(40),
            color: theme.colors.accent
        },
        iconActionNegative: {
            height: normalize(40),
            color: theme.colors.error
        },
        textActionPositive: {
            fontSize: normalizeFontAndLineHeight(10),
            color: theme.colors.accent
        },
        textActionNegative: {
            fontSize: normalizeFontAndLineHeight(10),
            color: theme.colors.error
        }
    });

'''
'''--- src/components/bottom-sheet/blockchain-navigation-bottom-sheet/styles.ts ---
import { StyleSheet, Platform } from 'react-native';
import { ITheme } from '../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalizeFontAndLineHeight
} from '../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            backgroundColor: theme.colors.bottomSheetBackground,
            padding: BASE_DIMENSION * 2
        },
        scrollContainer: {
            flexGrow: 1,
            backgroundColor: theme.colors.bottomSheetBackground,
            marginTop: BASE_DIMENSION
        },
        tokenContainer: {
            flex: Platform.OS === 'web' ? 1 / 3 : 1 / 4,
            flexDirection: 'column',
            marginBottom: BASE_DIMENSION * 2
        },
        tokenImageContainer: {
            alignContent: 'center',
            alignSelf: 'center',
            backgroundColor: theme.colors.cardBackground,
            borderRadius: BORDER_RADIUS * 2,
            padding: BASE_DIMENSION * 2,
            marginBottom: BASE_DIMENSION,
            borderWidth: 2
        },
        coinText: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            color: theme.colors.text,
            textAlign: 'center'
        }
    });

'''
'''--- src/components/bottom-sheet/dashboard-menu-bottom-sheet/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalize,
    normalizeFontAndLineHeight
} from '../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        content: {
            backgroundColor: theme.colors.bottomSheetBackground,
            paddingHorizontal: BASE_DIMENSION * 3,
            paddingVertical: BASE_DIMENSION * 2
        },
        rowContainer: {
            flexDirection: 'row',
            paddingVertical: BASE_DIMENSION,
            marginBottom: BASE_DIMENSION * 2,
            alignItems: 'center'
        },
        iconContainer: {
            backgroundColor: theme.colors.appBackground,
            marginRight: BASE_DIMENSION * 2,
            borderRadius: BORDER_RADIUS,
            height: normalize(40),
            width: normalize(40),
            justifyContent: 'center'
        },
        icon: {
            alignSelf: 'center'
        },
        textContainer: {
            flex: 1,
            flexDirection: 'column'
        },
        title: {
            lineHeight: normalizeFontAndLineHeight(21)
        },
        subtitle: {
            fontSize: normalizeFontAndLineHeight(11),
            marginTop: BASE_DIMENSION / 2
        },
        arrowRight: {
            alignSelf: 'center'
        },
        scrollArea: {
            flexGrow: 1,
            paddingBottom: BASE_DIMENSION * 4
        }
    });

'''
'''--- src/components/bottom-sheet/extension-request-bottom-sheet/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalizeFontAndLineHeight
} from '../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        content: {
            backgroundColor: theme.colors.bottomSheetBackground,
            paddingHorizontal: BASE_DIMENSION * 3,
            paddingVertical: BASE_DIMENSION * 2
        },
        rowContainer: {
            flexDirection: 'row',
            paddingVertical: BASE_DIMENSION,
            marginBottom: BASE_DIMENSION * 2
        },
        iconContainer: {
            backgroundColor: theme.colors.appBackground,
            padding: BASE_DIMENSION,
            marginRight: BASE_DIMENSION * 2,
            borderRadius: BORDER_RADIUS
        },
        icon: {
            alignSelf: 'center',
            color: theme.colors.accent
        },
        textContainer: {
            flex: 1,
            flexDirection: 'column',
            justifyContent: 'space-between'
        },
        title: {
            lineHeight: normalizeFontAndLineHeight(21),
            color: theme.colors.textSecondary
        },
        info: {
            lineHeight: normalizeFontAndLineHeight(21),
            textAlign: 'center',
            color: theme.colors.textSecondary
        },
        description: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            color: theme.colors.textSecondary
        },
        loadingContainer: {
            paddingTop: BASE_DIMENSION * 3
        }
    });

'''
'''--- src/components/bottom-sheet/header/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../core/theme/itheme';
import { BASE_DIMENSION, BORDER_RADIUS } from '../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        header: {
            flex: 1,
            backgroundColor: theme.colors.bottomSheetBackground,
            paddingTop: BASE_DIMENSION * 2,
            paddingBottom: BASE_DIMENSION,
            borderTopLeftRadius: BORDER_RADIUS * 2,
            borderTopRightRadius: BORDER_RADIUS * 2
        },
        icon: {
            alignSelf: 'center',
            color: theme.colors.black
        }
    });

'''
'''--- src/components/bottom-sheet/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            position: 'absolute',
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            flex: 1,
            backgroundColor: theme.colors.overlayBackground
        }
    });

'''
'''--- src/components/bottom-sheet/wallets-bottom-sheet/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    LETTER_SPACING
} from '../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            backgroundColor: theme.colors.bottomSheetBackground,
            padding: BASE_DIMENSION * 2
        },
        scrollContainer: {
            flexGrow: 1,
            backgroundColor: theme.colors.bottomSheetBackground,
            marginBottom: BASE_DIMENSION * 4
        },
        icon: {
            color: theme.colors.accent,
            alignSelf: 'center'
        },
        firstRow: {
            flexDirection: 'row',
            marginBottom: BASE_DIMENSION / 4
        },
        accountName: {
            fontSize: normalizeFontAndLineHeight(18),
            lineHeight: normalizeFontAndLineHeight(25),
            fontWeight: '500',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text,
            marginRight: BASE_DIMENSION
        },
        accountAddress: {
            fontSize: normalizeFontAndLineHeight(18),
            lineHeight: normalizeFontAndLineHeight(25),
            fontWeight: '500',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.accent
        },
        fistAmountText: {
            color: theme.colors.textSecondary
        },
        secondAmountText: {
            marginLeft: BASE_DIMENSION,
            color: theme.colors.textSecondary
        }
    });

'''
'''--- src/components/coin-balance-card/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    LETTER_SPACING
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            alignSelf: 'center',
            alignItems: 'center'
        },
        darkerText: {
            color: theme.colors.textSecondary
        },
        rowContainer: {
            flexDirection: 'row',
            marginBottom: BASE_DIMENSION
        },
        account: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.text,
            marginRight: BASE_DIMENSION
        },
        address: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.accent
        },
        mainText: {
            fontSize: normalizeFontAndLineHeight(30),
            lineHeight: normalizeFontAndLineHeight(41),
            fontWeight: 'bold',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text,
            marginRight: BASE_DIMENSION * 2
        },
        secondaryText: {
            lineHeight: normalizeFontAndLineHeight(21),
            color: theme.colors.textSecondary
        },
        icon: {
            alignSelf: 'center',
            color: theme.colors.accent,
            fontWeight: 'bold'
        }
    });

'''
'''--- src/components/conversion-card/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION, BORDER_RADIUS, normalizeFontAndLineHeight } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.cardBackground,
            borderRadius: BORDER_RADIUS,
            paddingVertical: BASE_DIMENSION,
            marginHorizontal: BASE_DIMENSION / 2,
            justifyContent: 'center',
            alignItems: 'center'
        },
        conversionLabel: {
            color: theme.colors.textSecondary
        },
        changeUp: {
            color: theme.colors.positive
        },
        changeDown: {
            color: theme.colors.negative
        },
        text: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18)
        },
        convert: {
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.text
        }
    });

'''
'''--- src/components/cta-group/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexDirection: 'column'
        },
        topContainer: {
            width: '100%',
            justifyContent: 'space-around',
            flexDirection: 'row',
            marginBottom: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/components/debug-modal/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION, BORDER_RADIUS, normalizeFontAndLineHeight } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground,
            padding: BASE_DIMENSION * 3
        },
        row: {
            flexDirection: 'column',
            marginBottom: BASE_DIMENSION * 2
        },
        button: {
            marginVertical: BASE_DIMENSION * 2
        },
        inputBox: {
            height: BASE_DIMENSION * 5,
            borderRadius: BORDER_RADIUS,
            alignSelf: 'stretch',
            backgroundColor: theme.colors.cardBackground,
            paddingHorizontal: BASE_DIMENSION,
            flexDirection: 'row',
            justifyContent: 'space-between',
            alignItems: 'center',
            marginBottom: BASE_DIMENSION * 2
        },
        input: {
            flex: 1,
            fontSize: normalizeFontAndLineHeight(15),
            color: theme.colors.text,
            padding: 0
        },
        epochContainer: {
            flex: 1,
            flexDirection: 'row',
            justifyContent: 'center',
            marginTop: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/components/dialog/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BORDER_RADIUS, BASE_DIMENSION, normalizeFontAndLineHeight } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        titleStyle: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            fontWeight: '600',
            color: theme.colors.text
        },
        descriptionStyle: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            color: theme.colors.textSecondary
        },
        contentContainerStyle: {
            backgroundColor: theme.colors.bottomSheetBackground
        },
        dialogStyle: {
            backgroundColor: theme.colors.bottomSheetBackground,
            borderRadius: BORDER_RADIUS * 2
        },
        cancelButton: {
            paddingHorizontal: BASE_DIMENSION * 2,
            borderWidth: 2,
            borderColor: theme.colors.textTertiary,
            backgroundColor: theme.colors.bottomSheetBackground
        },
        cancelButtonText: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.textSecondary
        },
        confirmButton: {
            paddingHorizontal: BASE_DIMENSION * 2,
            borderWidth: 2,
            borderColor: theme.colors.accentSecondary,
            backgroundColor: theme.colors.bottomSheetBackground
        },
        confirmButtonText: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            fontWeight: '600',
            color: theme.colors.accent
        },
        textInputDefault: {
            paddingHorizontal: BASE_DIMENSION,
            backgroundColor: theme.colors.inputBackground,
            borderRadius: BORDER_RADIUS / 2,
            fontSize: normalizeFontAndLineHeight(11),
            lineHeight: normalizeFontAndLineHeight(13),
            color: theme.colors.text
        },
        textInputIOS: {
            fontSize: normalizeFontAndLineHeight(11),
            lineHeight: normalizeFontAndLineHeight(13),
            color: theme.colors.bottomSheetBackground
        }
    });

'''
'''--- src/components/draggable-card-with-check-box/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalizeFontAndLineHeight,
    LETTER_SPACING,
    ICON_CONTAINER_SIZE
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexDirection: 'row',
            borderRadius: BORDER_RADIUS,
            padding: BASE_DIMENSION,
            alignItems: 'center',
            marginBottom: BASE_DIMENSION,
            paddingVertical: BASE_DIMENSION * 2,
            borderWidth: 2,
            borderColor: theme.colors.cardBackground,
            backgroundColor: theme.colors.cardBackground
        },
        containerActive: {
            borderColor: theme.colors.accentSecondary
        },
        containerDragging: {
            backgroundColor: theme.colors.appBackground
        },
        imageIcon: {
            marginLeft: BASE_DIMENSION,
            marginEnd: BASE_DIMENSION * 2
        },
        textContainer: {
            justifyContent: 'center'
        },
        mainText: {
            fontSize: normalizeFontAndLineHeight(18),
            lineHeight: normalizeFontAndLineHeight(25),
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text,
            fontWeight: '500',
            alignSelf: 'center'
        },
        subtitleText: {
            fontSize: normalizeFontAndLineHeight(16),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.textSecondary
        },
        menuIcon: {
            color: theme.colors.accent
        },
        infoContainer: {
            flex: 1,
            flexDirection: 'row'
        },
        iconContainer: {
            width: ICON_CONTAINER_SIZE,
            height: ICON_CONTAINER_SIZE,
            justifyContent: 'center',
            alignItems: 'center'
        }
    });

'''
'''--- src/components/expandable-container/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            overflow: 'hidden'
        },
        animatedView: {
            overflow: 'scroll'
        }
    });

'''
'''--- src/components/header-icon/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            marginHorizontal: BASE_DIMENSION
        },
        icon: {
            color: theme.colors.accent
        }
    });

'''
'''--- src/components/header-left/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    ICON_CONTAINER_SIZE,
    normalizeFontAndLineHeight
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        button: {
            flexDirection: 'row',
            alignItems: 'center'
        },
        iconContainer: {
            width: ICON_CONTAINER_SIZE,
            height: ICON_CONTAINER_SIZE,
            alignItems: 'center',
            justifyContent: 'center',
            marginLeft: BASE_DIMENSION
        },
        icon: {
            color: theme.colors.accent
        },
        text: {
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.text
        }
    });

'''
'''--- src/components/header-right/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    ICON_CONTAINER_SIZE,
    normalizeFontAndLineHeight
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        button: {
            marginRight: BASE_DIMENSION,
            flexDirection: 'row',
            alignItems: 'center'
        },
        iconContainer: {
            alignItems: 'center',
            justifyContent: 'center',
            height: ICON_CONTAINER_SIZE,
            width: ICON_CONTAINER_SIZE
        },
        icon: {
            color: theme.colors.accent
        },
        text: {
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.text
        }
    });

'''
'''--- src/components/icon/icon.ts ---
import { createIconSet } from 'react-native-vector-icons';
import * as map from '../../../resources/fonts/icons.json';

const glyphMap = {};
Object.keys((map as any).default).map(key => {
    (glyphMap as any)[key] = parseInt(String((map as any).default[key]).replace('\\f', '0xf'), 16);
});

export const Icon = createIconSet(glyphMap, 'icons', 'icons.ttf');
export default Icon;

'''
'''--- src/components/icon/values.ts ---
export enum IconValues {
    // please try to add keys in alphabetic order
    ACTION_UP_DOWN = 'action-up-down',
    ADD = 'add',
    ADD_CIRCLE = 'add-circle',
    ALARM_BELL = 'alarm-bell',
    ARCHIVE_LOCKER = 'archive-locker',
    ARROWS_UP = 'arrows-up',
    ARROW_BUTTON_DOWN = 'arrow-button-down',
    ARROW_DOWN = 'arrow-down',
    ARROW_LEFT = 'arrow-left',
    ARROW_RIGHT = 'arrow-right',
    ARROW_RIGHT_DASH = 'arrow-right-dash',
    ARR_DOWN = 'arr-down',
    ARR_UP = 'arr-up',
    BIN = 'bin',
    BLE = 'ble',
    BUG = 'bug',
    BUTTON_REFRESH_ONE = 'button-refresh-one',
    CHECK = 'check',
    CHECKMARK_CIRCLE = 'checkmark-circle',
    CHECK_BOX = 'check-box',
    CHECK_BOX_THICKED = 'check-box-thicked',
    CHEVRON_DOWN = 'chevron-down',
    CHEVRON_DOWN_BIGGER = 'chevron-down-2',
    CHEVRON_RIGHT = 'chevron-right',
    CHEVRON_UP = 'chevron-up',
    CLAIM_REWARD = 'claim-reward',
    CLOSE = 'close',
    COPY = 'copy',
    DASHBOARD = 'dashboard',
    EXPAND = 'expand',
    EYE = 'eye',
    FACE_ID = 'face-id',
    FAILED = 'failed',
    FLASH = 'flash',
    FLASH_OFF = 'flash-off',
    INBOUND = 'inbound',
    INFO = 'information-circle',
    KEY = 'key',
    KEYBOARD_DELETE = 'keyboard-delete',
    KEYBOARD_SHIFT = 'keyboard-shift',
    KEY_LOCK = 'key-lock',
    LAPTOP = 'laptop',
    LEDGER_LOOGO = 'ledger-logo',
    MEGAPHONE = 'megaphone',
    MINUS = 'minus',
    MONEY_WALLET = 'money-wallet',
    MONITOR = 'monitor',
    NAVIGATION_MENU = 'navigation-menu',
    NAVIGATION_MENU_HORIZONTAL = 'navigation-menu-horizontal',
    NAVIGATION_MENU_VERTICAL = 'navigation-menu-vertical',
    NOTES_LIST = 'notes-list',
    OUTBOUND = 'outbound',
    PENCIL = 'pencil',
    PENDING = 'pending',
    PLUS = 'plus',
    PRODUCT_GIFT = 'products-give-gift',
    QR_CODE_SCAN = 'qr-code-scan',
    REINVEST = 'reinvest',
    REVOTE = 'revote',
    SATURN_ICON = 'saturn-icon',
    SEARCH = 'search',
    SETTINGS = 'settings',
    SETTINGS_OFF = 'settings-off',
    SETTINGS_ON = 'settings-on',
    SIGNED = 'signed-icon',
    SINGLE_MAN_HIERACHY = 'single-man-hierachy',
    SINGLE_NEUTRAL_ACTIONS_TEXT = 'single-neutral-actions-text',
    SYNCHRONIZE = 'synchronize',
    TOUCH_ID = 'touch-id',
    UNLOCK = 'unlock',
    UNVOTE = 'unvote',
    USB = 'usb',
    VIEW = 'view',
    VIEW_OFF = 'view-off',
    VOTE = 'vote',
    WARNING = 'warning',
    WITHDRAW = 'withdraw'
    // please try to add keys in alphabetic order
}

'''
'''--- src/components/image-canvas/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { pw } from '../../styles';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            position: 'absolute',
            backgroundColor: theme.colors.appBackground,
            height: '100%',
            width: '100%',
            justifyContent: 'center'
        },
        image: {
            width: pw(60),
            resizeMode: 'contain',
            alignSelf: 'center'
        }
    });

'''
'''--- src/components/info-modal/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalizeFontAndLineHeight,
    SCREEN_HEIGHT
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        wrapper: {
            flex: 1,
            position: 'absolute',
            display: 'flex',
            width: '100%',
            height: '100%',
            backgroundColor: theme.colors.gradientDark + 'BF', // 75% opacity
            justifyContent: 'center'
        },
        container: {
            maxHeight: (SCREEN_HEIGHT * 3) / 4,
            marginHorizontal: BASE_DIMENSION * 2,
            backgroundColor: theme.colors.cardBackground,
            borderRadius: BORDER_RADIUS,
            padding: BASE_DIMENSION * 2
        },
        scrollView: {
            flexGrow: 1,
            paddingVertical: BASE_DIMENSION * 2
        },
        message: {
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.text
        }
    });

'''
'''--- src/components/keyboard-custom/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalize,
    normalizeFontAndLineHeight
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexDirection: 'column',
            position: 'absolute',
            bottom: 0,
            left: 0,
            right: 0,
            backgroundColor: theme.colors.appBackground
        },
        headerButtonContainer: {
            flexDirection: 'row'
        },
        headerButton: {
            flex: 1,
            paddingVertical: BASE_DIMENSION,
            backgroundColor: theme.colors.appBackground,
            borderWidth: 1
        },
        textButton: {
            lineHeight: normalizeFontAndLineHeight(22),
            textAlign: 'center'
        },
        keyboardLayout: {
            flex: 1,
            backgroundColor: theme.colors.cardBackground,
            padding: BASE_DIMENSION,
            paddingBottom: BASE_DIMENSION * 2
        },
        footerContainer: {
            backgroundColor: theme.colors.cardBackground,
            paddingVertical: BASE_DIMENSION,
            marginVertical: BASE_DIMENSION,
            marginHorizontal: BASE_DIMENSION * 3,
            borderRadius: BORDER_RADIUS
        },
        footerText: {
            textAlign: 'center',
            fontSize: normalizeFontAndLineHeight(14),
            color: theme.colors.text
        },
        pasteWordText: {
            fontSize: normalizeFontAndLineHeight(14),
            textAlign: 'center',
            color: theme.colors.text
        },
        confirmWordText: {
            textAlign: 'center',
            color: theme.colors.accent,
            fontSize: normalizeFontAndLineHeight(14)
        },
        rowContainer: {
            flex: 1,
            flexDirection: 'row',
            justifyContent: 'center',
            paddingVertical: normalize(6)
        },
        keyContainer: {
            flex: 1,
            backgroundColor: '#666666',
            borderRadius: BORDER_RADIUS,
            paddingVertical: BASE_DIMENSION,
            maxWidth: normalize(35),
            marginHorizontal: normalize(3),
            justifyContent: 'center',
            alignContent: 'center'
        },
        keyText: {
            flex: 1,
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(26),
            textAlign: 'center',
            color: theme.colors.text
        },
        upperIconContainer: {
            flex: 1,
            backgroundColor: '#444444',
            borderRadius: BORDER_RADIUS,
            paddingVertical: BASE_DIMENSION,
            maxWidth: normalize(42),
            justifyContent: 'center',
            alignContent: 'center',
            marginRight: BASE_DIMENSION
        },
        upperIcon: {
            alignSelf: 'center',
            color: theme.colors.text
        },
        deleteIconContainer: {
            flex: 1,
            backgroundColor: '#444444',
            borderRadius: BORDER_RADIUS,
            paddingVertical: BASE_DIMENSION,
            maxWidth: normalize(42),
            justifyContent: 'center',
            alignContent: 'center',
            marginLeft: BASE_DIMENSION
        },
        deleteIcon: {
            alignSelf: 'center',
            color: theme.colors.text
        },
        icon: {
            color: theme.colors.textSecondary
        }
    });

'''
'''--- src/components/ledger-badge/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION, normalize, normalizeFontAndLineHeight } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexDirection: 'row',
            height: normalize(22),
            width: '100%',
            backgroundColor: theme.colors.accent,
            justifyContent: 'center'
        },
        text: {
            fontSize: normalizeFontAndLineHeight(14),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.black,
            textAlign: 'center'
        },
        icon: {
            alignSelf: 'center',
            color: theme.colors.black,
            marginHorizontal: BASE_DIMENSION / 2
        }
    });

'''
'''--- src/components/legal/legal-modal/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../core/theme/itheme';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.overlayBackground,
            justifyContent: 'center'
        }
    });

'''
'''--- src/components/legal/privacy-policy/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../core/theme/itheme';
import { BASE_DIMENSION, ICON_CONTAINER_SIZE, SCREEN_HEIGHT } from '../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            justifyContent: 'center',
            backgroundColor: theme.colors.appBackground
        },
        button: {
            flexDirection: 'row',
            alignItems: 'center'
        },
        iconContainer: {
            width: ICON_CONTAINER_SIZE,
            height: ICON_CONTAINER_SIZE,
            alignItems: 'center',
            justifyContent: 'center',
            marginLeft: BASE_DIMENSION
        },
        icon: {
            color: theme.colors.accent
        },
        webviewContainer: {
            flex: 1,
            overflow: 'hidden',
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT // used for web
        },
        loadingIndicator: {
            position: 'absolute',
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            backgroundColor: theme.colors.appBackground
        }
    });

'''
'''--- src/components/legal/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    ICON_CONTAINER_SIZE,
    LETTER_SPACING
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground,
            paddingHorizontal: BASE_DIMENSION * 2,
            paddingVertical: BASE_DIMENSION * 4
        },
        topContainer: {
            flex: 1,
            flexDirection: 'column'
        },
        bottomContainer: {
            justifyContent: 'center',
            width: '100%',
            alignItems: 'center'
        },
        docImage: {
            flex: 1,
            alignSelf: 'center'
        },
        bottomButton: {
            width: '80%',
            marginTop: BASE_DIMENSION * 3
        },
        rowContainer: {
            flexDirection: 'row',
            paddingVertical: BASE_DIMENSION * 2,
            justifyContent: 'space-between',
            alignSelf: 'stretch'
        },
        divider: {
            width: '100%',
            height: 1,
            backgroundColor: theme.colors.settingsDivider
        },
        icon: {
            color: theme.colors.accent,
            fontWeight: 'bold',
            alignSelf: 'flex-end'
        },
        walletTc: {
            lineHeight: normalizeFontAndLineHeight(22),
            textAlign: 'center',
            color: theme.colors.textSecondary,
            marginTop: BASE_DIMENSION * 6
        },
        text: {
            lineHeight: normalizeFontAndLineHeight(25),
            color: theme.colors.text,
            letterSpacing: LETTER_SPACING
        },
        iconContainer: {
            width: ICON_CONTAINER_SIZE,
            height: ICON_CONTAINER_SIZE,
            justifyContent: 'center'
        },
        backIcon: {
            color: theme.colors.accent
        }
    });

'''
'''--- src/components/legal/terms-conditions/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../core/theme/itheme';
import { BASE_DIMENSION, ICON_CONTAINER_SIZE, SCREEN_HEIGHT } from '../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            justifyContent: 'center',
            backgroundColor: theme.colors.appBackground
        },
        button: {
            flexDirection: 'row',
            alignItems: 'center'
        },
        iconContainer: {
            width: ICON_CONTAINER_SIZE,
            height: ICON_CONTAINER_SIZE,
            alignItems: 'center',
            justifyContent: 'center',
            marginLeft: BASE_DIMENSION
        },
        icon: {
            color: theme.colors.accent
        },
        webviewContainer: {
            flex: 1,
            overflow: 'hidden',
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT // used for web
        },
        loadingIndicator: {
            position: 'absolute',
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            backgroundColor: theme.colors.appBackground
        }
    });

'''
'''--- src/components/list-account/styles.ts ---
import { StyleSheet } from 'react-native';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    ICON_CONTAINER_SIZE,
    normalizeFontAndLineHeight,
    LETTER_SPACING,
    normalize
} from '../../styles/dimensions';
import { ITheme } from '../../core/theme/itheme';

export default (theme: ITheme) =>
    StyleSheet.create({
        card: {
            flexDirection: 'row',
            backgroundColor: theme.colors.cardBackground,
            borderRadius: BORDER_RADIUS,
            padding: BASE_DIMENSION,
            alignItems: 'center',
            marginBottom: BASE_DIMENSION,
            paddingVertical: BASE_DIMENSION * 2,
            borderWidth: 2,
            borderColor: theme.colors.cardBackground
        },
        labelContainer: {
            flex: 1
        },
        label: {
            fontSize: normalizeFontAndLineHeight(18),
            lineHeight: normalizeFontAndLineHeight(25),
            fontWeight: '500',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text,
            flexShrink: 1
        },
        selected: {
            borderColor: theme.colors.accentSecondary
        },
        iconRightContainer: {
            height: ICON_CONTAINER_SIZE,
            width: ICON_CONTAINER_SIZE,
            alignItems: 'flex-end',
            justifyContent: 'center'
        },
        icon: {
            color: theme.colors.accent
        },
        accountIcon: {
            height: ICON_CONTAINER_SIZE,
            width: ICON_CONTAINER_SIZE
        },
        addButton: {
            width: normalize(110),
            backgroundColor: theme.colors.accent,
            borderColor: theme.colors.accent
        },
        addButtonDisabled: {
            width: normalize(110)
        }
    });

'''
'''--- src/components/list-card/styles.ts ---
import { StyleSheet } from 'react-native';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    ICON_CONTAINER_SIZE,
    normalizeFontAndLineHeight,
    LETTER_SPACING
} from '../../styles/dimensions';
import { ITheme } from '../../core/theme/itheme';

export default (theme: ITheme) =>
    StyleSheet.create({
        card: {
            display: 'flex',
            flexDirection: 'row',
            alignItems: 'center',
            padding: BASE_DIMENSION * 2,
            backgroundColor: theme.colors.cardBackground,
            borderRadius: BORDER_RADIUS,
            marginBottom: BASE_DIMENSION,
            borderWidth: 2,
            borderColor: theme.colors.cardBackground
        },
        cardDisabled: {
            opacity: 0.6
        },
        labelContainer: {
            flex: 1
        },
        label: {
            fontSize: normalizeFontAndLineHeight(18),
            lineHeight: normalizeFontAndLineHeight(25),
            fontWeight: '500',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text
        },
        selected: {
            borderColor: theme.colors.accentSecondary
        },
        iconContainer: {
            height: ICON_CONTAINER_SIZE,
            width: ICON_CONTAINER_SIZE,
            justifyContent: 'center'
        },
        icon: {
            color: theme.colors.accent
        },
        disabledMessage: {
            fontSize: normalizeFontAndLineHeight(14),
            lineHeight: normalizeFontAndLineHeight(17),
            color: theme.colors.textTertiary
        }
    });

'''
'''--- src/components/loading-indicator/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            justifyContent: 'center'
        }
    });

'''
'''--- src/components/loading-modal/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION, normalizeFontAndLineHeight } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            position: 'absolute',
            display: 'flex',
            width: '100%',
            height: '100%',
            backgroundColor: theme.colors.gradientDark + 'BF', // 75%
            justifyContent: 'center'
        },
        message: {
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.textSecondary,
            textAlign: 'center',
            marginTop: BASE_DIMENSION,
            paddingHorizontal: BASE_DIMENSION * 4
        },
        icon: {
            color: theme.colors.accent,
            alignSelf: 'center'
        }
    });

'''
'''--- src/components/loading-modal/types.ts ---
import { TransactionMessageType, TransactionMessageText } from '../../core/blockchain/types';

export interface ILoadingModalMessage {
    type: TransactionMessageType;
    text?: TransactionMessageText;
    component?: any; // React.ComponentType<any>;
}

export interface ILoadingModalState {
    isVisible: boolean;
    message: ILoadingModalMessage;
}

'''
'''--- src/components/password-modal/components/password-pin/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalize,
    ICON_CONTAINER_SIZE,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';
import { ph, pw } from '../../../../styles';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            justifyContent: 'flex-start',
            flex: 1,
            backgroundColor: theme.colors.appBackground
        },
        logoImage: {
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            alignSelf: 'center',
            resizeMode: 'cover',
            opacity: 0.1,
            height: ph(50),
            width: pw(100)
        },
        headerContainer: {
            flex: 1,
            justifyContent: 'center',
            flexDirection: 'column',
            marginHorizontal: BASE_DIMENSION * 8
        },
        title: {
            fontSize: normalizeFontAndLineHeight(28),
            lineHeight: normalizeFontAndLineHeight(34),
            textAlign: 'center',
            marginBottom: BASE_DIMENSION,
            color: theme.colors.text
        },
        subTitle: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            textAlign: 'center',
            marginBottom: BASE_DIMENSION * 4,
            color: theme.colors.textSecondary
        },
        errorMessage: {
            marginTop: BASE_DIMENSION * 2,
            lineHeight: normalizeFontAndLineHeight(21),
            color: theme.colors.error,
            textAlign: 'center'
        },
        digitsLayout: {
            flex: 1,
            paddingBottom: BASE_DIMENSION * 2
        },
        keyRow: {
            flex: 1,
            flexDirection: 'row'
        },
        keyContainer: {
            flex: 1,
            justifyContent: 'center',
            backgroundColor: theme.colors.appBackground,
            margin: BASE_DIMENSION / 4
        },
        keyText: {
            fontSize: normalizeFontAndLineHeight(28),
            lineHeight: normalizeFontAndLineHeight(34),
            color: theme.colors.text,
            textAlign: 'center'
        },
        touchIdIcon: {
            alignSelf: 'center',
            color: theme.colors.accent
        },
        deleteIcon: {
            alignSelf: 'center',
            color: theme.colors.textTertiary
        },
        inputRow: {
            justifyContent: 'center',
            flexDirection: 'row'
        },
        gradientContainer: {
            flexDirection: 'row',
            alignItems: 'center'
        },
        selectorGradientContainer: {
            height: 1,
            width: '100%'
        },
        gradientRowContainer: {
            height: '100%',
            width: 1
        },
        pinInput: {
            width: normalize(20),
            height: normalize(20),
            borderRadius: normalize(10),
            marginLeft: normalize(10),
            marginRight: normalize(10)
        },
        unchecked: {
            borderColor: theme.colors.text,
            borderWidth: 1
        },
        checked: {
            backgroundColor: theme.colors.accent,
            borderRadius: normalize(10)
        },
        reset: {
            lineHeight: normalizeFontAndLineHeight(22),
            fontWeight: '600',
            color: theme.colors.accent,
            textAlign: 'center'
        },
        backIconContainer: {
            width: ICON_CONTAINER_SIZE,
            height: ICON_CONTAINER_SIZE,
            alignItems: 'center',
            justifyContent: 'center',
            marginLeft: BASE_DIMENSION
        },
        backIcon: {
            color: theme.colors.accent
        }
    });

'''
'''--- src/components/password-modal/components/password-terms/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    ICON_CONTAINER_SIZE
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingBottom: BASE_DIMENSION * 10,
            backgroundColor: theme.colors.appBackground
        },
        content: {
            flex: 1,
            paddingHorizontal: BASE_DIMENSION * 5,
            paddingTop: BASE_DIMENSION * 2
        },
        bottomButton: {
            width: '100%'
        },
        confirmTextContainer: {
            flexDirection: 'row',
            marginBottom: BASE_DIMENSION * 2
        },
        textStyle: {
            fontSize: normalizeFontAndLineHeight(19),
            lineHeight: normalizeFontAndLineHeight(25),
            color: theme.colors.text,
            textAlign: 'center',
            paddingHorizontal: BASE_DIMENSION * 6
        },
        imageStyle: {
            flex: 1,
            alignItems: 'center',
            justifyContent: 'center'
        },
        backIconContainer: {
            width: ICON_CONTAINER_SIZE,
            height: ICON_CONTAINER_SIZE,
            alignItems: 'center',
            justifyContent: 'center',
            marginLeft: BASE_DIMENSION
        },
        backIcon: {
            color: theme.colors.accent
        }
    });

'''
'''--- src/components/password-modal/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalize,
    normalizeFontAndLineHeight,
    LETTER_SPACING
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        wrongPasswordContainer: {
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: '#000000BF',
            justifyContent: 'center',
            paddingHorizontal: BASE_DIMENSION * 4
        },
        moonletDisabled: {
            fontSize: normalizeFontAndLineHeight(34),
            lineHeight: normalize(41),
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION / 2,
            textAlign: 'center',
            letterSpacing: LETTER_SPACING
        },
        disabledDetails: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalize(22),
            color: theme.colors.textSecondary,
            textAlign: 'center'
        }
    });

'''
'''--- src/components/pos-widget/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalizeFontAndLineHeight,
    LETTER_SPACING,
    normalize
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexDirection: 'row',
            backgroundColor: theme.colors.cardBackground,
            borderRadius: BORDER_RADIUS,
            paddingVertical: BASE_DIMENSION * 2,
            paddingHorizontal: BASE_DIMENSION + BASE_DIMENSION / 2,
            justifyContent: 'center',
            marginBottom: BASE_DIMENSION
        },
        textContainer: {
            flex: 1,
            flexDirection: 'column',
            paddingRight: BASE_DIMENSION * 2
        },
        title: {
            fontSize: normalizeFontAndLineHeight(16),
            lineHeight: normalizeFontAndLineHeight(25),
            color: theme.colors.text,
            fontWeight: 'bold',
            letterSpacing: LETTER_SPACING,
            marginBottom: BASE_DIMENSION / 2
        },
        secondaryText: {
            fontSize: normalizeFontAndLineHeight(14),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.textSecondary
        },
        buttonWrapper: {
            width: normalize(120),
            alignSelf: 'center'
        }
    });

'''
'''--- src/components/quick-delegate-banner/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalizeFontAndLineHeight,
    LETTER_SPACING
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexDirection: 'row',
            backgroundColor: theme.colors.positiveSecondary,
            borderRadius: BORDER_RADIUS,
            paddingVertical: BASE_DIMENSION,
            paddingLeft: BASE_DIMENSION * 2
        },
        textContainer: {
            flex: 1,
            flexDirection: 'column',
            justifyContent: 'center'
        },
        mainText: {
            fontSize: normalizeFontAndLineHeight(34),
            lineHeight: normalizeFontAndLineHeight(41),
            color: theme.colors.white,
            letterSpacing: LETTER_SPACING
        },
        secondaryText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.white
        },
        icon: {
            color: theme.colors.white,
            alignSelf: 'center'
        }
    });

'''
'''--- src/components/search-input/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION, BORDER_RADIUS, normalizeFontAndLineHeight } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        inputContainer: {
            flex: 1,
            flexDirection: 'column'
        },
        inputBox: {
            height: BASE_DIMENSION * 5,
            borderRadius: BORDER_RADIUS,
            alignSelf: 'stretch',
            backgroundColor: theme.colors.cardBackground,
            paddingHorizontal: BASE_DIMENSION,
            flexDirection: 'row',
            justifyContent: 'space-between',
            alignItems: 'center',
            marginBottom: BASE_DIMENSION * 2
        },
        input: {
            flex: 1,
            fontSize: normalizeFontAndLineHeight(15),
            color: theme.colors.text,
            padding: 0
        },
        closeIconContainer: {
            paddingLeft: BASE_DIMENSION,
            justifyContent: 'center'
        },
        closeIcon: {
            alignSelf: 'center',
            color: theme.colors.accent
        },
        searchIcon: {
            alignSelf: 'center',
            color: theme.colors.textTertiary,
            marginRight: BASE_DIMENSION
        }
    });

'''
'''--- src/components/security-checks/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION, normalizeFontAndLineHeight } from '../../styles/dimensions';
import { pw, ph } from '../../styles';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingBottom: BASE_DIMENSION * 2,
            backgroundColor: theme.colors.appBackground
        },
        content: {
            flex: 1,
            paddingHorizontal: BASE_DIMENSION * 3,
            paddingTop: BASE_DIMENSION * 2
        },
        bottomButton: {
            width: '100%',
            marginBottom: BASE_DIMENSION * 2
        },
        confirmTextContainer: {
            flexDirection: 'row',
            marginBottom: BASE_DIMENSION * 2
        },
        textStyle: {
            color: theme.colors.text,
            textAlign: 'center',
            paddingHorizontal: BASE_DIMENSION * 2
        },
        title: {
            fontSize: normalizeFontAndLineHeight(25),
            lineHeight: normalizeFontAndLineHeight(30),
            marginBottom: BASE_DIMENSION * 6
        },
        message: {
            fontSize: normalizeFontAndLineHeight(18),
            lineHeight: normalizeFontAndLineHeight(25),
            marginBottom: BASE_DIMENSION * 4
        },
        warning: {
            fontSize: normalizeFontAndLineHeight(18),
            lineHeight: normalizeFontAndLineHeight(25),
            fontWeight: 'bold'
        },
        imageContainerStyle: {
            flex: 1,
            alignItems: 'center',
            justifyContent: 'center'
        },
        imageStyle: {
            width: pw(50),
            height: ph(50),
            opacity: 0.7
        }
    });

'''
'''--- src/components/skeleton-placeholder/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';

export default (theme: ITheme) =>
    StyleSheet.create({
        //
    });

'''
'''--- src/components/skeleton-row/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION, BORDER_RADIUS, normalize } from '../../styles/dimensions';

const CIRCLE_SIZE = normalize(40);
const LINE_HEIGTH = normalize(15);

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexDirection: 'row',
            backgroundColor: theme.colors.appBackground,
            marginBottom: BASE_DIMENSION * 2
        },
        round: {
            width: CIRCLE_SIZE,
            height: CIRCLE_SIZE,
            borderRadius: CIRCLE_SIZE / 2,
            backgroundColor: theme.colors.cardBackground,
            marginRight: BASE_DIMENSION
        },
        linesWrapper: {
            flex: 1,
            flexDirection: 'column',
            justifyContent: 'space-between'
        },
        firstRow: {
            height: LINE_HEIGTH,
            backgroundColor: theme.colors.cardBackground,
            borderRadius: BORDER_RADIUS
        },
        secondRow: {
            height: LINE_HEIGTH,
            backgroundColor: theme.colors.cardBackground,
            borderRadius: BORDER_RADIUS
        }
    });

'''
'''--- src/components/smart-screen/components/loading-skeleton/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import { BASE_DIMENSION, BORDER_RADIUS, normalize } from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        skeletonWrapper: {
            flexDirection: 'row',
            flexWrap: 'wrap',
            // backgroundColor: theme.colors.cardBackground,
            borderRadius: BORDER_RADIUS,
            paddingHorizontal: BASE_DIMENSION + BASE_DIMENSION / 2,
            marginBottom: BASE_DIMENSION,
            paddingTop: BASE_DIMENSION + BASE_DIMENSION / 2
        },
        detailsSkeletonComp: {
            flexDirection: 'row',
            marginRight: BASE_DIMENSION * 3,
            marginBottom: BASE_DIMENSION + BASE_DIMENSION / 2
        },
        detailsSkeletonIcon: {
            width: normalize(36),
            height: normalize(36),
            borderRadius: BORDER_RADIUS,
            marginRight: BASE_DIMENSION
        },
        detailsSkeletonPrimaryValue: {
            height: normalize(14),
            width: normalize(100),
            borderRadius: BORDER_RADIUS / 2
        },
        detailsSkeletonSecondaryValue: {
            height: normalize(12),
            width: normalize(80),
            borderRadius: BORDER_RADIUS / 2
        }
    });

'''
'''--- src/components/splash-screen/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            backgroundColor: theme.colors.appBackground,
            height: '100%'
        },
        lottieWrapper: {
            flex: 1,
            marginHorizontal: BASE_DIMENSION * 6
        },
        lottie: {
            ...StyleSheet.absoluteFillObject,
            height: '100%'
        },
        connectingPhoneContainer: {
            paddingHorizontal: BASE_DIMENSION * 6,
            paddingBottom: BASE_DIMENSION * 4,
            justifyContent: 'center'
        },
        connectingText: {
            textAlign: 'center',
            marginBottom: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/components/staking-beta-badge/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { normalize, normalizeFontAndLineHeight } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            height: normalize(22),
            width: '100%',
            backgroundColor: theme.colors.positive
        },
        text: {
            lineHeight: normalizeFontAndLineHeight(21),
            textAlign: 'center',
            color: theme.colors.gradientDark
        }
    });

'''
'''--- src/components/testnet-badge/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { normalize, normalizeFontAndLineHeight } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            height: normalize(22),
            width: '100%',
            backgroundColor: theme.colors.warning
        },
        text: {
            lineHeight: normalizeFontAndLineHeight(21),
            color: theme.colors.gradientDark,
            textAlign: 'center'
        }
    });

'''
'''--- src/components/text-input/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BORDER_RADIUS,
    BASE_DIMENSION,
    normalize,
    normalizeFontAndLineHeight
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexDirection: 'row',
            backgroundColor: theme.colors.cardBackground,
            borderBottomWidth: 1,
            borderBottomColor: theme.colors.cardBackground,
            marginHorizontal: BASE_DIMENSION / 2
        },
        text: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            color: theme.colors.text
        },
        cursor: {
            height: normalize(20),
            borderRadius: BORDER_RADIUS / 3,
            backgroundColor: theme.colors.accent
        }
    });

'''
'''--- src/components/token-card/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    ICON_CONTAINER_SIZE,
    normalizeFontAndLineHeight,
    LETTER_SPACING
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexDirection: 'row',
            backgroundColor: theme.colors.cardBackground,
            borderRadius: BORDER_RADIUS,
            paddingHorizontal: BASE_DIMENSION,
            paddingVertical: BASE_DIMENSION * 2
        },
        cardRow: {
            flex: 1,
            flexDirection: 'row'
        },
        accountInfoContainer: {
            flex: 1,
            display: 'flex',
            flexDirection: 'column',
            marginLeft: BASE_DIMENSION + BASE_DIMENSION / 2
        },
        icon: {
            color: theme.colors.accent,
            alignSelf: 'center'
        },
        address: {
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.textSecondary
        },
        firstAmount: {
            fontSize: normalizeFontAndLineHeight(18),
            lineHeight: normalizeFontAndLineHeight(25),
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text,
            fontWeight: '500'
        },
        secondAmount: {
            fontSize: normalizeFontAndLineHeight(16),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.textSecondary
        },
        tokenIcon: {
            width: ICON_CONTAINER_SIZE,
            height: ICON_CONTAINER_SIZE
        },
        imageStyle: {
            marginLeft: BASE_DIMENSION / 2
        }
    });

'''
'''--- src/components/token-dashboard/styles.ts ---
import { StyleSheet, Platform } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    normalizeFontAndLineHeight,
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalize,
    SCALE
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1
        },
        tokensContainer: {
            flex: 1
        },
        cardWrapper: {
            flexDirection: 'row',
            marginBottom: BASE_DIMENSION
        },
        cardContainer: {
            flexDirection: 'row',
            justifyContent: 'center',
            alignContent: 'center',
            alignItems: 'center',
            backgroundColor: theme.colors.cardBackground + '80', // 50% opacity
            paddingVertical: BASE_DIMENSION,
            paddingHorizontal: BASE_DIMENSION + BASE_DIMENSION / 2,
            borderRadius: BORDER_RADIUS * 2,
            marginRight: BASE_DIMENSION
        },
        cardText: {
            fontSize: normalizeFontAndLineHeight(13),
            fontWeight: '500',
            color: theme.colors.textSecondary,
            marginLeft: BASE_DIMENSION,
            maxWidth: Platform.select({
                web: normalize(104),
                default: SCALE < 1 || Platform.OS === 'web' ? normalize(110) : null
            })
        },
        icon: {
            alignSelf: 'center',
            color: theme.colors.textSecondary
        },
        quickDelegateBannerContainer: {
            marginBottom: BASE_DIMENSION
        },
        accountSummary: {
            marginBottom: BASE_DIMENSION
        },
        affiliateBanner: {
            marginTop: BASE_DIMENSION / 2,
            marginBottom: BASE_DIMENSION
        }
    });

'''
'''--- src/components/widgets/components/absolute-modules/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';

export default (theme: ITheme) =>
    StyleSheet.create({
        moduleContainer: {
            position: 'absolute'
        }
    });

'''
'''--- src/components/widgets/components/amount-input/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            backgroundColor: 'transparent',
            paddingHorizontal: BASE_DIMENSION * 2
        },
        inputBox: {
            height: BASE_DIMENSION * 5,
            borderRadius: BORDER_RADIUS,
            backgroundColor: theme.colors.inputBackground,
            paddingHorizontal: BASE_DIMENSION,
            flexDirection: 'row'
        },
        inputText: {
            flex: 1,
            color: theme.colors.text,
            paddingRight: BASE_DIMENSION * 2,
            fontSize: normalizeFontAndLineHeight(15),
            padding: 0
        },
        row: {
            flexDirection: 'row'
        },
        label: {
            fontSize: normalizeFontAndLineHeight(14),
            color: theme.colors.textSecondary
        },
        amountText: {
            fontSize: normalizeFontAndLineHeight(14),
            color: theme.colors.accent
        },
        warningText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(19),
            color: theme.colors.warning,
            marginTop: BASE_DIMENSION / 2
        },
        errorText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(19),
            color: theme.colors.error,
            marginTop: BASE_DIMENSION / 2
        },
        amountsContainer: {
            flexDirection: 'row',
            justifyContent: 'space-between',
            marginTop: BASE_DIMENSION * 2,
            marginBottom: BASE_DIMENSION
        },
        amountComp: {
            flex: 1,
            borderRadius: BORDER_RADIUS,
            borderWidth: 1,
            borderColor: theme.colors.textTertiary,
            paddingVertical: BASE_DIMENSION,
            marginHorizontal: BASE_DIMENSION / 2
        },
        amountCompSelected: {
            borderColor: theme.colors.accent
        },
        amountCompText: {
            fontSize: normalizeFontAndLineHeight(13),
            textAlign: 'center',
            color: theme.colors.textSecondary
        },
        amountCompTextSelected: {
            color: theme.colors.accent
        }
    });

'''
'''--- src/components/widgets/components/amount-selectable-box/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            //
        },
        warningText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(19),
            color: theme.colors.warning,
            marginTop: BASE_DIMENSION / 2
        },
        errorText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(19),
            color: theme.colors.error,
            marginTop: BASE_DIMENSION / 2
        },
        amountsContainer: {
            flexDirection: 'row'
        },
        amountComp: {
            flex: 1,
            borderRadius: BORDER_RADIUS / 2,
            borderWidth: 1,
            borderColor: theme.colors.textTertiary,
            paddingVertical: BASE_DIMENSION,
            marginHorizontal: BASE_DIMENSION / 2
        },
        amountCompSelected: {
            borderColor: theme.colors.accent
        },
        amountCompText: {
            fontSize: normalizeFontAndLineHeight(16),
            textAlign: 'center',
            color: theme.colors.textTertiary
        },
        amountCompTextSelected: {
            color: theme.colors.accent
        }
    });

'''
'''--- src/components/widgets/components/balance-grid-icons/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    normalize,
    BORDER_RADIUS
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexDirection: 'row',
            justifyContent: 'space-between',
            paddingHorizontal: BASE_DIMENSION
        },
        itemContainer: {
            flex: 1,
            flexDirection: 'row',
            justifyContent: 'space-between',
            marginBottom: BASE_DIMENSION,
            marginRight: BASE_DIMENSION
        },
        row: {
            flexDirection: 'row'
        },
        iconContainer: {
            width: normalize(36),
            height: normalize(36),
            backgroundColor: theme.colors.black + '40', // 25% opacity
            borderRadius: BORDER_RADIUS,
            justifyContent: 'center',
            marginRight: BASE_DIMENSION,
            alignSelf: 'center'
        },
        labelValuesContainer: {
            flex: 1
        },
        valueLabel: {
            fontWeight: '400',
            fontSize: normalizeFontAndLineHeight(16),
            lineHeight: normalizeFontAndLineHeight(21),
            color: theme.colors.white
        },
        labelText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.textSecondary
        }
    });

'''
'''--- src/components/widgets/components/error-widget/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    LETTER_SPACING,
    normalize
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            paddingVertical: BASE_DIMENSION * 5
        },
        header: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            letterSpacing: LETTER_SPACING,
            marginBottom: BASE_DIMENSION,
            color: theme.colors.text,
            textAlign: 'center'
        },
        body: {
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.textSecondary,
            textAlign: 'center'
        },
        button: {
            marginTop: BASE_DIMENSION * 4,
            width: normalize(180),
            alignSelf: 'center'
        }
    });

'''
'''--- src/components/widgets/components/gradient-wrapper/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            //
        }
    });

'''
'''--- src/components/widgets/components/icon-one-line/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import { BASE_DIMENSION, normalizeFontAndLineHeight } from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        row: {
            flexDirection: 'row',
            flexShrink: 1
        },
        icon: {
            color: theme.colors.accent,
            marginRight: BASE_DIMENSION / 2
        },
        line: {
            fontSize: normalizeFontAndLineHeight(16),
            lineHeight: normalizeFontAndLineHeight(21),
            color: theme.colors.white
        }
    });

'''
'''--- src/components/widgets/components/icon-two-lines/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import { BASE_DIMENSION, normalize } from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexDirection: 'row',
            paddingVertical: BASE_DIMENSION,
            paddingHorizontal: BASE_DIMENSION * 2
        },
        row: {
            flexDirection: 'row',
            alignItems: 'baseline'
        },
        lineText: {
            color: theme.colors.text
        },
        marginBottom: {
            marginBottom: BASE_DIMENSION / 2
        },
        imageBaseStyle: {
            right: BASE_DIMENSION,
            width: normalize(44),
            height: normalize(44),
            alignSelf: 'center',
            marginRight: BASE_DIMENSION / 2
        }
    });

'''
'''--- src/components/widgets/components/icon/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import { BASE_DIMENSION } from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        icon: {
            alignSelf: 'center',
            color: theme.colors.textTertiary,
            padding: BASE_DIMENSION
        }
    });

'''
'''--- src/components/widgets/components/image-banner/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';

export default (theme: ITheme) =>
    StyleSheet.create({
        image: {
            //
        }
    });

'''
'''--- src/components/widgets/components/input/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            //
        },
        inputBox: {
            minHeight: BASE_DIMENSION * 5,
            borderRadius: BORDER_RADIUS,
            backgroundColor: theme.colors.cardBackground,
            paddingHorizontal: BASE_DIMENSION,
            paddingVertical: BASE_DIMENSION / 2,
            flexDirection: 'row'
        },
        inputText: {
            flex: 1,
            color: theme.colors.text,
            paddingRight: BASE_DIMENSION * 2,
            fontSize: normalizeFontAndLineHeight(15)
        }
    });

'''
'''--- src/components/widgets/components/md-text/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';

export default (theme: ITheme) =>
    StyleSheet.create({
        text: {
            color: theme.colors.text
        }
    });

'''
'''--- src/components/widgets/components/module-selectable-wrapper/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import { BASE_DIMENSION, BORDER_RADIUS } from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            backgroundColor: theme.colors.cardBackground,
            borderColor: theme.colors.cardBackground,
            borderWidth: 2,
            borderRadius: BORDER_RADIUS,
            marginBottom: BASE_DIMENSION
        },
        moduleColWrapperContainer: {
            flexDirection: 'row',
            justifyContent: 'space-between'
        }
    });

'''
'''--- src/components/widgets/components/module-wrapper/module-wrapper.ts ---
import { IScreenModuleWrapperData } from './../../types';
import { connect } from 'react-redux';
import { smartConnect } from '../../../../core/utils/smart-connect';
import { IReduxState } from '../../../../redux/state';
import { IScreenModule } from '../../types';
import { getState } from './state-modifiers';

interface IExternalProps {
    module: IScreenModule;
    renderModule: (m: IScreenModule) => void;
    moduleWrapperState?: string;
    options: {
        screenKey: string;
    };
}

const mapStateToProps = (state: IReduxState, ownProps: IExternalProps) => {
    const wrapperState = getState(state, ownProps.module, ownProps.options.screenKey);
    const wrapperData = (ownProps?.module?.data as IScreenModuleWrapperData)?.data;

    let module = wrapperData?.DEFAULT;
    if (wrapperData[wrapperState]) {
        // TODO: in future we might need to do a deep merge here.
        module = {
            ...module,
            ...wrapperData[wrapperState]
        };
    }

    if (ownProps?.moduleWrapperState && wrapperData[ownProps.moduleWrapperState]) {
        module = {
            ...module,
            ...wrapperData[ownProps.moduleWrapperState]
        };
    }

    return {
        ...ownProps,
        module
    };
};

const ModuleWrapperComponent = (props: IExternalProps) => {
    return props.renderModule(props.module);
};

export const ModuleWrapper = smartConnect<IExternalProps>(ModuleWrapperComponent, [
    connect(mapStateToProps, null)
]);

'''
'''--- src/components/widgets/components/module-wrapper/state-modifiers/index.ts ---
import { IReduxState } from '../../../../../redux/state';
import {
    IScreenModule,
    IScreenModuleSelectableWrapperData,
    IScreenModuleWrapperData,
    ModuleTypes
} from './../../../types';

import { updateClaimPending } from './update-claim-pending';
import {
    quickStakeSelectedValidator,
    stakeNowSelectedValidators
} from './quick-stake-selected-validator';
import { stakeEnterAmountStakeNow } from './stake-enter-amount-stake-now';
import {
    switchNodeSelectValidator,
    switchNodeSelectToValidator,
    switchNodeSelectNodeBottomWrapper,
    switchNodeSelectReasons,
    switchNodeContinueInfo2,
    switchNodeContinueInfo3
} from './switch-node';
import { swapToggleSelector, swapToEnterAmount, swapToCustomSlippageBox } from './swap';

const stateModifiers = {
    updateClaimPending,
    quickStakeSelectedValidator,
    stakeNowSelectedValidators,
    stakeEnterAmountStakeNow,
    switchNodeSelectValidator,
    switchNodeSelectToValidator,
    switchNodeSelectNodeBottomWrapper,
    switchNodeSelectReasons,
    switchNodeContinueInfo2,
    switchNodeContinueInfo3,
    swapToggleSelector,
    swapToEnterAmount,
    swapToCustomSlippageBox
};

export const getState = (state: IReduxState, module: IScreenModule, screenKey: string) => {
    let wrapper;

    switch (module.type) {
        case ModuleTypes.MODULE_WRAPPER:
            wrapper = module.data as IScreenModuleWrapperData;
            break;

        case ModuleTypes.MODULE_SELECTABLE_WRAPPER:
            wrapper = module.data as IScreenModuleSelectableWrapperData;
            break;

        default:
            break;
    }

    let wrapperState = wrapper.state;
    if (typeof stateModifiers[wrapper?.stateModifierFn] === 'function') {
        wrapperState = stateModifiers[wrapper?.stateModifierFn](state, module, screenKey);
    }

    return wrapperState;
};

'''
'''--- src/components/widgets/components/module-wrapper/state-modifiers/quick-stake-selected-validator.ts ---
import { getChainId } from '../../../../../redux/preferences/selectors';
import { IReduxState } from '../../../../../redux/state';
import { getScreenDataKey } from '../../../../../redux/ui/screens/data/reducer';
import { getSelectedAccount, getSelectedWallet } from '../../../../../redux/wallets/selectors';
import { IScreenModule } from '../../../types';

export const quickStakeSelectedValidator = (state: IReduxState, module: IScreenModule): string => {
    const account = getSelectedAccount(state);
    const chainId = getChainId(state, account.blockchain);

    const screenKey = getScreenDataKey({
        pubKey: getSelectedWallet(state)?.walletPublicKey,
        blockchain: account?.blockchain,
        chainId: String(chainId),
        address: account?.address,
        step: module?.details?.step,
        tab: undefined
    });

    const validators: any = state.ui.screens.inputData[screenKey]?.data?.validators;
    const validatorId = module?.details?.validator.id;

    if (validators && validatorId && validators.findIndex(v => v.id === validatorId) !== -1) {
        return 'SELECTED';
    }

    return 'DEFAULT';
};

export const stakeNowSelectedValidators = (state: IReduxState, module: IScreenModule) => {
    const account = getSelectedAccount(state);
    const chainId = getChainId(state, account.blockchain);

    const screenKey = getScreenDataKey({
        pubKey: getSelectedWallet(state)?.walletPublicKey,
        blockchain: account?.blockchain,
        chainId: String(chainId),
        address: account?.address,
        step: module?.details?.step,
        tab: undefined
    });

    const validators: any = state.ui.screens.inputData[screenKey]?.data?.validators;

    if (validators && Array.isArray(validators) && validators.length > 0) {
        return 'SELECTED';
    }

    return 'DEFAULT';
};

'''
'''--- src/components/widgets/components/module-wrapper/state-modifiers/stake-enter-amount-stake-now.ts ---
import { getChainId } from '../../../../../redux/preferences/selectors';
import { IReduxState } from '../../../../../redux/state';
import { getScreenDataKey } from '../../../../../redux/ui/screens/data/reducer';
import { getSelectedAccount, getSelectedWallet } from '../../../../../redux/wallets/selectors';
import { IScreenModule, IScreenModuleWrapperData } from '../../../types';

/**
 * This data is stored on screen key
 */
export const stakeEnterAmountStakeNow = (state: IReduxState, module: IScreenModule): string => {
    const wrapper = module.data as IScreenModuleWrapperData;

    const account = getSelectedAccount(state);
    const chainId = getChainId(state, account.blockchain);

    const step = wrapper?.data?.DEFAULT?.details?.step;

    const screenKey = getScreenDataKey({
        pubKey: getSelectedWallet(state)?.walletPublicKey,
        blockchain: account?.blockchain,
        chainId: String(chainId),
        address: account?.address,
        step,
        tab: undefined
    });

    if (
        screenKey &&
        state.ui.screens.inputData &&
        state.ui.screens.inputData[screenKey] &&
        state.ui.screens.inputData[screenKey]?.validation &&
        state.ui.screens.inputData[screenKey]?.validation?.valid === true
    ) {
        return 'DEFAULT';
    }

    return 'DISABLED';
};

'''
'''--- src/components/widgets/components/module-wrapper/state-modifiers/swap.ts ---
import { SwapType } from '../../../../../core/blockchain/types/token';
import { getChainId } from '../../../../../redux/preferences/selectors';
import { IReduxState } from '../../../../../redux/state';
import { getScreenDataKey } from '../../../../../redux/ui/screens/data/reducer';
import { getSelectedAccount, getSelectedWallet } from '../../../../../redux/wallets/selectors';
import { IScreenModule, IScreenModuleWrapperData } from '../../../types';

export const swapToggleSelector = (state: IReduxState, module: IScreenModule): string => {
    const wrapper = module.data as IScreenModuleWrapperData;

    const account = getSelectedAccount(state);
    const chainId = getChainId(state, account.blockchain);

    const step = wrapper?.data?.SELL?.details?.step;

    const screenKey = getScreenDataKey({
        pubKey: getSelectedWallet(state)?.walletPublicKey,
        blockchain: account?.blockchain,
        chainId: String(chainId),
        address: account?.address,
        step,
        tab: undefined
    });

    if (
        screenKey &&
        state.ui.screens.inputData &&
        state.ui.screens.inputData[screenKey] &&
        state.ui.screens.inputData[screenKey]?.data &&
        state.ui.screens.inputData[screenKey]?.data.swapType
    ) {
        return state.ui.screens.inputData[screenKey]?.data.swapType;
    }

    return SwapType.SELL;
};

export const swapToEnterAmount = (
    state: IReduxState,
    module: IScreenModule,
    screenKey: string
): string => {
    const wrapper = module.data as IScreenModuleWrapperData;

    const screenInputData =
        screenKey && state.ui.screens.inputData && state.ui.screens.inputData[screenKey];

    if (
        screenInputData?.data?.swapToken1Amount === '' ||
        screenInputData?.data?.swapToken2Amount === ''
    ) {
        // disabled
        return wrapper.state;
    }

    if (screenInputData?.validation?.valid === true) {
        return 'DEFAULT';
    }

    return wrapper.state;
};

export const swapToCustomSlippageBox = (
    state: IReduxState,
    module: IScreenModule,
    screenKey: string
): string => {
    const wrapper = module.data as IScreenModuleWrapperData;

    const customSlippage = wrapper?.data?.DEFAULT?.details?.customSlippage;

    if (
        screenKey &&
        state.ui.screens.inputData &&
        state.ui.screens.inputData[screenKey] &&
        state.ui.screens.inputData[screenKey]?.data?.customSlippage === customSlippage
    ) {
        return 'SELECTED';
    }

    return wrapper.state;
};

'''
'''--- src/components/widgets/components/module-wrapper/state-modifiers/switch-node.ts ---
import { IReduxState } from '../../../../../redux/state';
import { IScreenModule } from '../../../types';

export const switchNodeSelectValidator = (state: IReduxState, module: IScreenModule): string => {
    const flowId = module?.details?.flowId;

    if (
        flowId &&
        state.ui.screens.inputData &&
        state.ui.screens.inputData[flowId]?.data?.switchNodeValidator?.id ===
            module?.details?.validator?.id
    ) {
        return 'SELECTED';
    }

    return 'DEFAULT';
};

export const switchNodeSelectToValidator = (state: IReduxState, module: IScreenModule): string => {
    const flowId = module?.details?.flowId;

    if (
        flowId &&
        state.ui.screens.inputData &&
        state.ui.screens.inputData[flowId]?.data?.switchNodeToValidator?.id ===
            module?.details?.validator?.id
    ) {
        return 'SELECTED';
    }

    return 'DEFAULT';
};

export const switchNodeSelectNodeBottomWrapper = (
    state: IReduxState,
    module: IScreenModule
): string => {
    const flowId = module?.details?.flowId;

    if (
        flowId &&
        state.ui.screens.inputData &&
        state.ui.screens.inputData[flowId]?.data?.switchNodeToValidator?.id !== undefined
    ) {
        return 'SELECTED';
    }

    return 'DEFAULT';
};

export const switchNodeSelectReasons = (state: IReduxState, module: IScreenModule): string => {
    const flowId = module?.details?.flowId;
    const infoText = module?.details?.infoText;

    if (
        flowId &&
        state.ui.screens.inputData &&
        (state.ui.screens.inputData[flowId]?.data?.selectReasons || []).findIndex(
            reason => reason === infoText
        ) !== -1
    ) {
        return 'SELECTED';
    }

    return 'DEFAULT';
};

export const switchNodeContinueInfo2 = (state: IReduxState, module: IScreenModule): string => {
    const flowId = module?.details?.flowId;

    if (
        flowId &&
        state.ui.screens.inputData &&
        (state.ui.screens.inputData[flowId]?.data?.selectReasons || []).length >= 1
    ) {
        return 'SELECTED';
    }

    return 'DEFAULT';
};

export const switchNodeContinueInfo3 = (state: IReduxState, module: IScreenModule): string => {
    const flowId = module?.details?.flowId;

    if (
        flowId &&
        state.ui.screens.inputData &&
        state.ui.screens.inputData[flowId]?.data?.input?.length >= 1
    ) {
        return 'SELECTED';
    }

    return 'DEFAULT';
};

'''
'''--- src/components/widgets/components/module-wrapper/state-modifiers/update-claim-pending.ts ---
import { PosBasicActionType } from '../../../../../core/blockchain/types/token';
import { TransactionStatus } from '../../../../../core/wallet/types';
import { IReduxState } from '../../../../../redux/state';
import { getSelectedAccount, getSelectedWallet } from '../../../../../redux/wallets/selectors';
import { IScreenModule, IScreenModuleWrapperData } from '../../../types';

export const updateClaimPending = (state: IReduxState, module: IScreenModule): string => {
    const wrapper = module.data as IScreenModuleWrapperData;

    const wallet = getSelectedWallet(state);
    const selectedAccount = getSelectedAccount(state);

    const wrapperCycleStart = wrapper?.data?.DEFAULT?.details?.cycleStart;
    const wrapperValidators = wrapper?.data?.DEFAULT?.details?.validators;

    const walletTransactions = wallet?.transactions || [];

    for (const tx of Object.values(walletTransactions)) {
        const posAction = tx?.additionalInfo?.posAction;

        if (
            tx?.blockchain === selectedAccount?.blockchain &&
            tx?.data?.params &&
            Array.isArray(tx?.data?.params) &&
            tx?.data?.params[0] === wrapper?.data?.DEFAULT?.details?.validatorId &&
            tx?.broadcastedOnBlock > wrapperCycleStart &&
            tx?.address === selectedAccount.address &&
            (posAction === PosBasicActionType.CLAIM_REWARD ||
                posAction === PosBasicActionType.CLAIM_REWARD_NO_INPUT)
        ) {
            switch (tx.status) {
                case TransactionStatus.PENDING:
                    return 'PENDING';
                case TransactionStatus.SUCCESS:
                    return 'CLAIMED';
                default:
                    return 'DEFAULT';
            }
        }

        // Claim all module - PENDING
        if (
            tx?.blockchain === selectedAccount?.blockchain &&
            // at least one claim tx in pending
            tx.status === TransactionStatus.PENDING &&
            (posAction === PosBasicActionType.CLAIM_REWARD ||
                posAction === PosBasicActionType.CLAIM_REWARD_NO_INPUT) &&
            // claim all module is identified by validators
            wrapperValidators &&
            // additional checks
            tx?.broadcastedOnBlock > wrapperCycleStart &&
            tx?.address === selectedAccount.address
        ) {
            return 'PENDING';
        }
    }

    // Claim all module - CLAIMED
    if (wrapperValidators) {
        let allClaimed = true;
        for (const v of wrapperValidators) {
            const index = Object.values(walletTransactions).findIndex(
                tx =>
                    tx?.blockchain === selectedAccount?.blockchain &&
                    tx?.data?.params &&
                    Array.isArray(tx?.data?.params) &&
                    tx?.data?.params[0] === v.validatorId &&
                    // success claim tx
                    tx.status === TransactionStatus.SUCCESS &&
                    (tx?.additionalInfo?.posAction === PosBasicActionType.CLAIM_REWARD ||
                        tx?.additionalInfo?.posAction ===
                            PosBasicActionType.CLAIM_REWARD_NO_INPUT) &&
                    // additional checks
                    tx?.broadcastedOnBlock > wrapperCycleStart &&
                    tx?.address === selectedAccount.address
            );
            if (index === -1) {
                allClaimed = false;
            }
        }
        if (allClaimed) {
            return 'CLAIMED';
        }
    }

    return 'DEFAULT';
};

'''
'''--- src/components/widgets/components/one-line-text-banner/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import { normalizeFontAndLineHeight } from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexDirection: 'row'
        },
        text: {
            fontSize: normalizeFontAndLineHeight(14),
            fontWeight: 'bold',
            color: theme.colors.accent
        }
    });

'''
'''--- src/components/widgets/components/progress-bar/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import { BORDER_RADIUS, normalize } from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            backgroundColor: 'transparent'
        },
        barContainer: {
            height: normalize(20),
            width: '100%',
            backgroundColor: theme.colors.black,
            borderRadius: BORDER_RADIUS / 2
        },
        progressBar: {
            height: normalize(20),
            backgroundColor: theme.colors.accent,
            borderRadius: BORDER_RADIUS / 2
        }
    });

'''
'''--- src/components/widgets/components/progress-circle/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';

export default (theme: ITheme) =>
    StyleSheet.create({
        circle: {
            overflow: 'hidden',
            position: 'relative',
            justifyContent: 'center',
            alignItems: 'center'
        },
        leftWrap: {
            overflow: 'hidden',
            position: 'absolute',
            top: 0
        },
        rightWrap: {
            position: 'absolute'
        },
        loader: {
            position: 'absolute',
            left: 0,
            top: 0,
            borderRadius: 1000
        },
        innerCircle: {
            overflow: 'hidden',
            position: 'relative',
            justifyContent: 'center',
            alignItems: 'center'
        }
    });

'''
'''--- src/components/widgets/components/search/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalizeFontAndLineHeight,
    SCREEN_HEIGHT
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        inputBox: {
            flex: 1,
            height: BASE_DIMENSION * 5,
            borderRadius: BORDER_RADIUS,
            backgroundColor: theme.colors.cardBackground,
            paddingHorizontal: BASE_DIMENSION,
            flexDirection: 'row'
        },
        row: {
            flex: 1,
            flexDirection: 'row'
        },
        inputText: {
            flex: 1,
            color: theme.colors.text,
            padding: 0,
            paddingRight: BASE_DIMENSION * 2,
            fontSize: normalizeFontAndLineHeight(15)
        },
        searchIcon: {
            color: theme.colors.text,
            alignSelf: 'center',
            paddingRight: BASE_DIMENSION * 2
        },
        cancelContainer: {
            marginLeft: BASE_DIMENSION * 2,
            justifyContent: 'center'
        },
        cancel: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.accent
        },
        loadingContainer: {
            flex: 1,
            height: SCREEN_HEIGHT - BASE_DIMENSION * 12
        }
    });

'''
'''--- src/components/widgets/components/separator/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import { BASE_DIMENSION } from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        separator: {
            height: 1,
            width: '100%',
            marginVertical: BASE_DIMENSION + BASE_DIMENSION / 2
        }
    });

'''
'''--- src/components/widgets/components/single-balance-icon/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    normalize,
    BORDER_RADIUS,
    LETTER_SPACING
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            justifyContent: 'center',
            alignItems: 'center',
            flexDirection: 'row',
            marginBottom: BASE_DIMENSION + BASE_DIMENSION / 2,
            paddingHorizontal: BASE_DIMENSION
        },
        imageContainer: {
            width: normalize(38),
            height: normalize(38),
            marginRight: BASE_DIMENSION,
            backgroundColor: theme.colors.black + '40', // 25% opacity
            borderRadius: BORDER_RADIUS,
            justifyContent: 'center',
            alignItems: 'center'
        },
        row: {
            flexDirection: 'row'
        },
        text: {
            fontSize: normalizeFontAndLineHeight(23),
            lineHeight: normalizeFontAndLineHeight(34),
            color: theme.colors.white,
            letterSpacing: LETTER_SPACING
        }
    });

'''
'''--- src/components/widgets/components/static-text-col-bottom-header/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import { BASE_DIMENSION, normalizeFontAndLineHeight } from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexDirection: 'row',
            paddingHorizontal: BASE_DIMENSION,
            marginBottom: BASE_DIMENSION * 2
        },
        itemContainer: {
            flex: 1
        },
        row: {
            flexDirection: 'row'
        },
        headerText: {
            fontSize: normalizeFontAndLineHeight(15)
        },
        bodyText: {
            fontWeight: '500',
            fontSize: normalizeFontAndLineHeight(16),
            marginBottom: BASE_DIMENSION / 2
        }
    });

'''
'''--- src/components/widgets/components/static-text-col-top-header/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import { BASE_DIMENSION, normalizeFontAndLineHeight } from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexDirection: 'row',
            marginVertical: BASE_DIMENSION,
            flexWrap: 'wrap',
            justifyContent: 'space-evenly'
        },
        row: {
            //
        },
        headerText: {
            marginBottom: BASE_DIMENSION / 2,
            fontSize: normalizeFontAndLineHeight(13),
            color: theme.colors.textSecondary,
            textAlign: 'center'
        },
        bodyText: {
            fontWeight: '600',
            color: theme.colors.text,
            textAlign: 'center'
        }
    });

'''
'''--- src/components/widgets/components/text-line-icon/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import { BASE_DIMENSION, normalizeFontAndLineHeight } from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        row: {
            flexDirection: 'row'
        },
        icon: {
            color: theme.colors.accent,
            marginRight: BASE_DIMENSION / 2
        },
        line: {
            fontSize: normalizeFontAndLineHeight(16),
            lineHeight: normalizeFontAndLineHeight(21),
            color: theme.colors.white
        }
    });

'''
'''--- src/components/widgets/components/three-lines-cta/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import { BASE_DIMENSION, normalize } from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexDirection: 'row',
            justifyContent: 'space-between',
            marginBottom: BASE_DIMENSION + BASE_DIMENSION / 2,
            paddingHorizontal: BASE_DIMENSION
        },
        generalFlex: {
            flex: 1
        },
        row: {
            flexDirection: 'row',
            alignItems: 'baseline'
        },
        firstLineText: {
            fontWeight: '500',
            marginBottom: BASE_DIMENSION
        },
        secondLine: {
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION / 4
        },
        thirdLine: {
            color: theme.colors.textSecondary
        },
        actionButtonContainer: {
            justifyContent: 'center'
        },
        actionButton: {
            minWidth: normalize(100)
        }
    });

'''
'''--- src/components/widgets/components/three-lines-icon/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import { BASE_DIMENSION, normalize } from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexDirection: 'row',
            justifyContent: 'space-between',
            paddingVertical: BASE_DIMENSION,
            paddingHorizontal: BASE_DIMENSION * 2
        },
        row: {
            flexDirection: 'row',
            alignItems: 'baseline'
        },
        lineText: {
            color: theme.colors.text
        },
        imageBaseStyle: {
            position: 'absolute',
            right: BASE_DIMENSION,
            width: normalize(60),
            height: normalize(60)
        }
    });

'''
'''--- src/components/widgets/components/two-lines-text-banner/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    BORDER_RADIUS,
    LETTER_SPACING
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexDirection: 'row',
            borderRadius: BORDER_RADIUS,
            paddingVertical: BASE_DIMENSION + BASE_DIMENSION / 2,
            paddingLeft: BASE_DIMENSION * 2
        },
        row: {
            flexDirection: 'row'
        },
        textContainer: {
            flex: 1,
            flexDirection: 'column',
            justifyContent: 'center'
        },
        mainText: {
            fontSize: normalizeFontAndLineHeight(34),
            lineHeight: normalizeFontAndLineHeight(41),
            color: theme.colors.white,
            letterSpacing: LETTER_SPACING
        },
        secondaryText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.white
        },
        icon: {
            color: theme.colors.white,
            alignSelf: 'center'
        }
    });

'''
'''--- src/components/widgets/components/ui-state-selectors/index.ts ---
import { IReduxState } from '../../../../redux/state';
import { IScreenModule } from './../../types';

import {
    getSwitchNodeSelectedValidatorName,
    getSwitchNodeSelectedToValidatorName
} from './switch-node-selected-validator';
import {
    getStakeEnterAllBalance,
    getStakeEnterAllBalanceFormat,
    getAvailableBalanceParams,
    getAvailableBalanceFormatParams
} from './stake-enter-all-balance';
import {
    getSwitchNodeEnterAvailableBalance,
    getSwitchNodeEnterAvailableBalanceFormat
} from './switch-node-enter-available-balance';
import {
    getInputBalanceFormat,
    getStakeAmountPerValidator,
    getInputBalanceConverted,
    getStakeAmountValidatorSplit
} from './input-balance-format';
import { getStakeNowSelectValidators } from './stake-now';
import { getTokenAvailableBalanceFormat, getTokenAvailableBalance } from './token-balance';
import { getSwapToken1AmountStd, getSwapToken2AmountStd } from './swap/amount-std';
import {
    getSwapToken1Amount,
    getSwapToken2Amount,
    getSwapToken2SwapPriceAmount
} from './swap/amount';
import {
    getSwapToken1BlockchainSymbol,
    getSwapToken2BlockchainSymbol
} from './swap/blockchain-symbol';
import { getSwapToken2Decimals } from './swap/decimals';
import { getSwapPriceRateFormat, getSwapPriceUpdateTimer } from './swap/price';
import { getSwapCustomSlippage } from './swap/slippage';
import { getSwapToken1Symbol, getSwapToken2Symbol } from './swap/symbol';
import { getSwapToken1MaxBalance, getSwapToken2MaxBalance } from './swap/max-balance';

const uiStateSelectors = {
    getStakeEnterAllBalance,
    getStakeEnterAllBalanceFormat,
    getAvailableBalanceParams,
    getAvailableBalanceFormatParams,

    getSwitchNodeEnterAvailableBalance,
    getSwitchNodeEnterAvailableBalanceFormat,

    getSwitchNodeSelectedValidatorName,
    getSwitchNodeSelectedToValidatorName,

    getInputBalanceFormat,
    getInputBalanceConverted,
    getStakeAmountValidatorSplit,

    getStakeAmountPerValidator,

    getStakeNowSelectValidators,

    getTokenAvailableBalanceFormat,
    getTokenAvailableBalance,

    // Amount std
    getSwapToken1AmountStd,
    getSwapToken2AmountStd,

    // Amount
    getSwapToken1Amount,
    getSwapToken2Amount,
    getSwapToken2SwapPriceAmount,

    // Blockchain:Symbol
    getSwapToken1BlockchainSymbol,
    getSwapToken2BlockchainSymbol,

    // Decimals
    getSwapToken2Decimals,

    // Price
    getSwapPriceRateFormat,
    getSwapPriceUpdateTimer,

    // Slippage
    getSwapCustomSlippage,

    // Symbol
    getSwapToken1Symbol,
    getSwapToken2Symbol,

    // Max balance
    getSwapToken1MaxBalance,
    getSwapToken2MaxBalance
};

export const getStateSelectors = (state: IReduxState, module: IScreenModule, options?: any) => {
    const uiState = {};

    if (module?.state?.selectors) {
        for (const selector of Object.keys(module.state.selectors)) {
            if (typeof uiStateSelectors[module.state.selectors[selector].fn] === 'function') {
                uiState[selector] = uiStateSelectors[module.state.selectors[selector].fn](
                    state,
                    module,
                    options,
                    module.state.selectors[selector]?.params
                );
            }
        }
    }

    return uiState;
};

'''
'''--- src/components/widgets/components/ui-state-selectors/input-balance-format.ts ---
import BigNumber from 'bignumber.js';
import { getBlockchain } from '../../../../core/blockchain/blockchain-factory';
import { convertAmount, splitStake } from '../../../../core/utils/balance';
import { formatNumber } from '../../../../core/utils/format-number';
import { IReduxState } from '../../../../redux/state';
import { getTokenConfig } from '../../../../redux/tokens/static-selectors';
import { getSelectedBlockchain } from '../../../../redux/wallets/selectors';
import { IScreenModule } from '../../types';

export const getInputBalanceFormat = (
    state: IReduxState,
    module: IScreenModule,
    options: { flowId: string; screenKey: string },
    params: any
) => {
    const blockchainInstance = getBlockchain(getSelectedBlockchain(state));

    let balance = new BigNumber(0);

    if (
        options?.screenKey &&
        state.ui.screens.inputData &&
        state.ui.screens.inputData[options?.screenKey]?.data?.amount
    ) {
        balance = new BigNumber(state.ui.screens.inputData[options.screenKey].data.amount);
    }

    const tokenSymbol = (params && params[0]) || blockchainInstance.config.coin;

    return `${balance} ${tokenSymbol}`;
};

export const getInputBalanceConverted = (
    state: IReduxState,
    module: IScreenModule,
    options: { flowId: string; screenKey: string },
    params: any
) => {
    const blockchain = getSelectedBlockchain(state);
    const blockchainInstance = getBlockchain(blockchain);

    const tokenSymbol = (params && params[0]) || blockchainInstance.config.coin;

    let balance = new BigNumber(0);

    if (
        options?.screenKey &&
        state.ui.screens.inputData &&
        state.ui.screens.inputData[options?.screenKey]?.data?.amount
    ) {
        balance = new BigNumber(state.ui.screens.inputData[options.screenKey].data.amount);
    }

    const tokenConfig = getTokenConfig(blockchain, tokenSymbol);

    const amount = convertAmount(
        blockchain,
        state.market.exchangeRates,
        blockchainInstance.account.amountToStd(balance.toFixed(4), tokenConfig.decimals).toFixed(),
        tokenSymbol,
        state.preferences.currency,
        tokenConfig.decimals
    );

    return formatNumber(amount, {
        currency: state.preferences.currency,
        maximumFractionDigits: tokenConfig.ui.decimals || 4
    });
};

export const getStakeAmountPerValidator = (
    state: IReduxState,
    module: IScreenModule,
    options: { flowId: string; screenKey: string },
    params?: any[]
) => {
    const blockchainInstance = getBlockchain(getSelectedBlockchain(state));

    const validatorId = params && params[0] && params[0]?.validatorId;

    const nodeAmount =
        options?.screenKey &&
        state.ui.screens.inputData &&
        state.ui.screens.inputData[options.screenKey]?.data &&
        state.ui.screens.inputData[options.screenKey]?.data[validatorId];

    if (nodeAmount) {
        return `${nodeAmount.amount} ${blockchainInstance.config.coin}`;
    }

    return `0 ${blockchainInstance.config.coin}`;
};

export const getStakeAmountValidatorSplit = (
    state: IReduxState,
    module: IScreenModule,
    options: { flowId: string; screenKey: string },
    params?: any[]
) => {
    const blockchainInstance = getBlockchain(getSelectedBlockchain(state));

    const validatorsLength = params && params[0] && params[0]?.validatorsLength;

    const tokenSymbol = (params && params[1]) || blockchainInstance.config.coin;

    let balance = new BigNumber(0);

    if (
        options?.screenKey &&
        state.ui.screens.inputData &&
        state.ui.screens.inputData[options?.screenKey]?.data?.amount
    ) {
        balance = new BigNumber(state.ui.screens.inputData[options.screenKey].data.amount);
    }

    return `${splitStake(balance, validatorsLength).toFixed(2)} ${tokenSymbol}`;
};

'''
'''--- src/components/widgets/components/ui-state-selectors/stake-enter-all-balance.ts ---
import BigNumber from 'bignumber.js';
import { getBlockchain } from '../../../../core/blockchain/blockchain-factory';
import { formatNumber } from '../../../../core/utils/format-number';
import { getChainId } from '../../../../redux/preferences/selectors';
import { IReduxState } from '../../../../redux/state';
import { getTokenConfig } from '../../../../redux/tokens/static-selectors';
import { getSelectedAccount } from '../../../../redux/wallets/selectors';
import { IScreenModule } from './../../types';

export const getStakeEnterAllBalanceFormat = (
    state: IReduxState,
    module: IScreenModule,
    options: any,
    params: any
) => {
    const account = getSelectedAccount(state);
    const blockchain = account.blockchain;
    const blockchainInstance = getBlockchain(blockchain);
    const chainId = getChainId(state, blockchain);

    const tokenSymbol = (params && params[0]) || blockchainInstance.config.coin;

    const token = account.tokens[chainId][tokenSymbol];

    let balance = new BigNumber(token.balance?.available || '0');
    const amountToKeepInAccount = blockchainInstance.config.amountToKeepInAccount[account.type];

    if (balance.isGreaterThan(0) && balance.isGreaterThan(amountToKeepInAccount)) {
        balance = balance.minus(amountToKeepInAccount);
    }

    const tokenConfig = getTokenConfig(blockchain, token.symbol);

    const amountFromStd = blockchainInstance.account.amountFromStd(balance, tokenConfig.decimals);

    return formatNumber(amountFromStd, {
        currency: tokenConfig.symbol
    });
};

export const getStakeEnterAllBalance = (
    state: IReduxState,
    module: IScreenModule,
    options: any,
    params: any
) => {
    const account = getSelectedAccount(state);
    const blockchain = account.blockchain;
    const blockchainInstance = getBlockchain(blockchain);
    const chainId = getChainId(state, blockchain);
    const tokenSymbol = (params && params[0]) || blockchainInstance.config.coin;

    const token = account.tokens[chainId][tokenSymbol];

    let balance = new BigNumber(token.balance?.available || '0');
    const amountToKeepInAccount = blockchainInstance.config.amountToKeepInAccount[account.type];

    if (balance.isGreaterThan(0) && balance.isGreaterThan(amountToKeepInAccount)) {
        balance = balance.minus(amountToKeepInAccount);
    }

    const tokenConfig = getTokenConfig(blockchain, token.symbol);

    return blockchainInstance.account.amountFromStd(balance, tokenConfig.decimals);
};

export const getAvailableBalanceFormatParams = (
    state: IReduxState,
    module: IScreenModule,
    options: any,
    params: any
) => {
    const account = getSelectedAccount(state);
    const blockchain = account.blockchain;
    const blockchainInstance = getBlockchain(blockchain);
    const chainId = getChainId(state, blockchain);
    const token = account.tokens[chainId][blockchainInstance.config.coin];

    const balance = (params && params[0] && new BigNumber(params[0])) || new BigNumber(0);

    const tokenConfig = getTokenConfig(blockchain, token.symbol);

    const amountFromStd = blockchainInstance.account.amountFromStd(balance, tokenConfig.decimals);

    return formatNumber(amountFromStd, {
        currency: tokenConfig.symbol
    });
};

export const getAvailableBalanceParams = (
    state: IReduxState,
    module: IScreenModule,
    options: any,
    params: any
) => {
    const account = getSelectedAccount(state);
    const blockchain = account.blockchain;
    const blockchainInstance = getBlockchain(blockchain);
    const chainId = getChainId(state, blockchain);
    const token = account.tokens[chainId][blockchainInstance.config.coin];

    const balance = (params && params[0] && new BigNumber(params[0])) || new BigNumber(0);

    const tokenConfig = getTokenConfig(blockchain, token.symbol);

    return blockchainInstance.account.amountFromStd(balance, tokenConfig.decimals);
};

'''
'''--- src/components/widgets/components/ui-state-selectors/stake-now.ts ---
import { translate } from '../../../../core/i18n';
import { formatValidatorName } from '../../../../core/utils/format-string';
import { getChainId } from '../../../../redux/preferences/selectors';
import { IReduxState } from '../../../../redux/state';
import { getScreenDataKey } from '../../../../redux/ui/screens/data/reducer';
import { getSelectedAccount, getSelectedWallet } from '../../../../redux/wallets/selectors';
import { IScreenModule } from './../../types';

export const getStakeNowSelectValidators = (state: IReduxState, module: IScreenModule) => {
    const account = getSelectedAccount(state);
    const chainId = getChainId(state, account.blockchain);

    const screenKey = getScreenDataKey({
        pubKey: getSelectedWallet(state)?.walletPublicKey,
        blockchain: account?.blockchain,
        chainId: String(chainId),
        address: account?.address,
        step: module?.details?.step,
        tab: undefined
    });

    const validators: any = state.ui.screens.inputData[screenKey]?.data?.validators;

    if (validators && Array.isArray(validators) && validators.length > 0) {
        if (validators.length === 1) {
            return formatValidatorName(validators[0].name, 15);
        }

        if (validators.length > 1) {
            return `${validators.length} ${translate('App.labels.validators')}`;
        }
    }

    return '___...___';
};

'''
'''--- src/components/widgets/components/ui-state-selectors/swap/amount-std.ts ---
import { getBlockchain } from '../../../../../core/blockchain/blockchain-factory';
import { SwapType } from '../../../../../core/blockchain/types/token';
import { IReduxState } from '../../../../../redux/state';
import { getSelectedAccount } from '../../../../../redux/wallets/selectors';
import { IScreenModule } from '../../../types';

export const getSwapToken1AmountStd = (
    state: IReduxState,
    module: IScreenModule,
    options: {
        screenKey: string;
    },
    params: any
) => {
    const screenKey = options?.screenKey;

    const account = getSelectedAccount(state);
    const blockchainInstance = getBlockchain(account.blockchain);

    const screenData = state.ui.screens.inputData[screenKey]?.data;

    const swapType = screenData?.swapType;

    const swapToken1 = screenData?.swapToken1;
    const swapToken2 = screenData?.swapToken2;

    const inputFieldFocus = screenData?.inputFieldFocus;

    // return '' if it's not the focused input
    // - used to handle in api
    if (swapType === SwapType.SELL) {
        if (inputFieldFocus !== 'swapToken1Amount') return '';
    }
    if (swapType === SwapType.BUY) {
        if (inputFieldFocus === 'swapToken1Amount') return '';
    }

    const decimals = swapType === SwapType.SELL ? swapToken1?.decimals : swapToken2?.decimals;

    const amount =
        swapType === SwapType.SELL
            ? state.ui.screens.inputData[screenKey]?.data?.swapToken1Amount || '1'
            : state.ui.screens.inputData[screenKey]?.data?.swapToken2Amount || '1';

    return blockchainInstance.account.amountToStd(amount, decimals).toFixed();
};

export const getSwapToken2AmountStd = (
    state: IReduxState,
    module: IScreenModule,
    options: {
        screenKey: string;
    },
    params: any
): string => {
    const screenKey = options?.screenKey;

    const account = getSelectedAccount(state);
    const blockchainInstance = getBlockchain(account.blockchain);

    const screenData = state.ui.screens.inputData[screenKey]?.data;

    const swapType = screenData?.swapType;
    const swapToken1 = screenData?.swapToken1;
    const swapToken2 = screenData?.swapToken2;

    const inputFieldFocus = screenData?.inputFieldFocus;

    // return '' if it's not the focused input
    // - used to handle in api
    if (swapType === SwapType.SELL) {
        if (inputFieldFocus !== 'swapToken2Amount') return '';
    }
    if (swapType === SwapType.BUY) {
        if (inputFieldFocus === 'swapToken2Amount') return '';
    }

    const decimals = swapType === SwapType.BUY ? swapToken1?.decimals : swapToken2?.decimals;

    const amount =
        swapType === SwapType.BUY
            ? state.ui.screens.inputData[screenKey]?.data?.swapToken1Amount || '1'
            : state.ui.screens.inputData[screenKey]?.data?.swapToken2Amount || '1';

    return blockchainInstance.account.amountToStd(amount, decimals).toFixed();
};

'''
'''--- src/components/widgets/components/ui-state-selectors/swap/amount.ts ---
import { SwapType } from '../../../../../core/blockchain/types/token';
import { getChainId } from '../../../../../redux/preferences/selectors';
import { IReduxState } from '../../../../../redux/state';
import { getScreenDataKey } from '../../../../../redux/ui/screens/data/reducer';
import { getSelectedAccount, getSelectedWallet } from '../../../../../redux/wallets/selectors';
import { IScreenModule } from './../../../types';

export const getSwapToken1Amount = (
    state: IReduxState,
    module: IScreenModule,
    options: {
        screenKey: string;
    },
    params: any
) => {
    let screenKey = options?.screenKey;

    if (module?.details?.step) {
        const account = getSelectedAccount(state);
        const chainId = getChainId(state, account.blockchain);

        screenKey = getScreenDataKey({
            pubKey: getSelectedWallet(state)?.walletPublicKey,
            blockchain: account?.blockchain,
            chainId: String(chainId),
            address: account?.address,
            step: module.details.step,
            tab: undefined
        });
    }

    const type = state.ui.screens.inputData[screenKey]?.data?.swapType;

    const token1Amount = state.ui.screens.inputData[screenKey]?.data?.swapToken1Amount;
    const token2Amount = state.ui.screens.inputData[screenKey]?.data?.swapToken2Amount;

    return type === SwapType.SELL ? token1Amount : token2Amount;
};

export const getSwapToken2Amount = (
    state: IReduxState,
    module: IScreenModule,
    options: {
        screenKey: string;
    },
    params: any
) => {
    let screenKey = options?.screenKey;

    if (module?.details?.step) {
        const account = getSelectedAccount(state);
        const chainId = getChainId(state, account.blockchain);

        screenKey = getScreenDataKey({
            pubKey: getSelectedWallet(state)?.walletPublicKey,
            blockchain: account?.blockchain,
            chainId: String(chainId),
            address: account?.address,
            step: module.details.step,
            tab: undefined
        });
    }

    const type = state.ui.screens.inputData[screenKey]?.data?.swapType;

    const token1Amount = state.ui.screens.inputData[screenKey]?.data?.swapToken1Amount;
    const token2Amount = state.ui.screens.inputData[screenKey]?.data?.swapToken2Amount;

    return type === SwapType.BUY ? token1Amount : token2Amount;
};

export const getSwapToken2SwapPriceAmount = (
    state: IReduxState,
    module: IScreenModule,
    options: {
        screenKey: string;
    },
    params: any
) => {
    let screenKey = options.screenKey;

    if (module?.details?.step) {
        const account = getSelectedAccount(state);
        const chainId = getChainId(state, account.blockchain);

        screenKey = getScreenDataKey({
            pubKey: getSelectedWallet(state)?.walletPublicKey,
            blockchain: account?.blockchain,
            chainId: String(chainId),
            address: account?.address,
            step: module.details.step,
            tab: undefined
        });
    }

    const screenData = state.ui.screens.inputData[screenKey]?.data;

    const token2Amount = screenData.swapPrice.toTokenAmount;

    return token2Amount;
};

'''
'''--- src/components/widgets/components/ui-state-selectors/swap/blockchain-symbol.ts ---
import { SwapType } from '../../../../../core/blockchain/types/token';
import { IReduxState } from '../../../../../redux/state';
import { getSelectedBlockchain } from '../../../../../redux/wallets/selectors';
import { IScreenModule } from './../../../types';

export const getSwapToken1BlockchainSymbol = (
    state: IReduxState,
    module: IScreenModule,
    options: {
        screenKey: string;
    },
    params: any
): string => {
    const screenKey = options?.screenKey;

    const blockchain = getSelectedBlockchain(state);

    const screenData = state.ui.screens.inputData[screenKey]?.data;

    const swapType = screenData?.swapType;

    const swapToken1 = screenData?.swapToken1;
    const swapToken2 = screenData?.swapToken2;

    const symbol = swapType === SwapType.SELL ? swapToken1?.symbol : swapToken2?.symbol;

    return `${blockchain?.toUpperCase()}:${symbol?.toUpperCase()}`;
};

export const getSwapToken2BlockchainSymbol = (
    state: IReduxState,
    module: IScreenModule,
    options: {
        screenKey: string;
    },
    params: any[]
): string => {
    const screenKey = options?.screenKey;

    const blockchain = getSelectedBlockchain(state);

    const screenData = state.ui.screens.inputData[screenKey]?.data;

    const swapType = screenData?.swapType;

    const swapToken1 = screenData?.swapToken1;
    const swapToken2 = screenData?.swapToken2;

    const symbol = swapType === SwapType.BUY ? swapToken1?.symbol : swapToken2?.symbol;

    return `${blockchain?.toUpperCase()}:${symbol?.toUpperCase()}`;
};

'''
'''--- src/components/widgets/components/ui-state-selectors/swap/decimals.ts ---
import { SwapType } from '../../../../../core/blockchain/types/token';
import { getChainId } from '../../../../../redux/preferences/selectors';
import { IReduxState } from '../../../../../redux/state';
import { getScreenDataKey } from '../../../../../redux/ui/screens/data/reducer';
import { getSelectedAccount, getSelectedWallet } from '../../../../../redux/wallets/selectors';
import { IScreenModule } from './../../../types';

export const getSwapToken2Decimals = (
    state: IReduxState,
    module: IScreenModule,
    options: {
        screenKey: string;
    },
    params: any
) => {
    let screenKey = options.screenKey;

    if (module?.details?.step) {
        const account = getSelectedAccount(state);
        const chainId = getChainId(state, account.blockchain);

        screenKey = getScreenDataKey({
            pubKey: getSelectedWallet(state)?.walletPublicKey,
            blockchain: account?.blockchain,
            chainId: String(chainId),
            address: account?.address,
            step: module.details.step,
            tab: undefined
        });
    }

    const screenData = state.ui.screens.inputData[screenKey]?.data;

    const swapType = screenData?.swapType;

    const swapToken1 = screenData?.swapToken1;
    const swapToken2 = screenData?.swapToken2;

    return swapType === SwapType.SELL ? swapToken1?.decimals : swapToken2?.decimals;
};

'''
'''--- src/components/widgets/components/ui-state-selectors/swap/max-balance.ts ---
import { formatNumber } from '../../../../../core/utils/format-number';
import { IReduxState } from '../../../../../redux/state';
import { IScreenModule } from '../../../types';

export const getSwapToken1MaxBalance = (
    state: IReduxState,
    module: IScreenModule,
    options: {
        screenKey: string;
    },
    params: any
) => {
    const screenKey = options?.screenKey;

    const screenData =
        screenKey && state.ui.screens.inputData && state.ui.screens.inputData[screenKey]?.data;

    const balance = screenData?.maxBalance?.token1;
    const symbol = screenData?.swapToken1?.symbol;

    if (balance && symbol) {
        return formatNumber(balance, {
            currency: symbol,
            maximumFractionDigits: (params && params[0]?.decimals) || 6
        });
    }

    return '...';
};

export const getSwapToken2MaxBalance = (
    state: IReduxState,
    module: IScreenModule,
    options: {
        screenKey: string;
    },
    params: any
) => {
    const screenKey = options?.screenKey;

    const screenData =
        screenKey && state.ui.screens.inputData && state.ui.screens.inputData[screenKey]?.data;

    const balance = screenData?.maxBalance?.token2;
    const symbol = screenData?.swapToken2?.symbol;

    if (balance && symbol) {
        return formatNumber(balance, {
            currency: symbol,
            maximumFractionDigits: (params && params[0]?.decimals) || 6
        });
    }

    return '...';
};

'''
'''--- src/components/widgets/components/ui-state-selectors/swap/price.ts ---
import { formatNumber } from '../../../../../core/utils/format-number';
import { getChainId } from '../../../../../redux/preferences/selectors';
import { IReduxState } from '../../../../../redux/state';
import { getScreenDataKey } from '../../../../../redux/ui/screens/data/reducer';
import { getSelectedAccount, getSelectedWallet } from '../../../../../redux/wallets/selectors';
import { IScreenModule } from './../../../types';

export const getSwapPriceRateFormat = (
    state: IReduxState,
    module: IScreenModule,
    options: {
        screenKey: string;
    },
    params: any
) => {
    let screenKey = options?.screenKey;

    if (module?.details?.step) {
        const account = getSelectedAccount(state);
        const chainId = getChainId(state, account.blockchain);

        screenKey = getScreenDataKey({
            pubKey: getSelectedWallet(state)?.walletPublicKey,
            blockchain: account?.blockchain,
            chainId: String(chainId),
            address: account?.address,
            step: module.details.step,
            tab: undefined
        });
    }

    const screenData = state.ui.screens.inputData[screenKey]?.data;

    const rate = screenData?.swapPrice?.rate;

    if (!rate) return '...';

    return formatNumber(rate, { maximumFractionDigits: 6 });
};

export const getSwapPriceUpdateTimer = (
    state: IReduxState,
    module: IScreenModule,
    options: {
        screenKey: string;
    },
    params: any
) => {
    const screenKey = options.screenKey;

    const screenData = state.ui.screens.inputData[screenKey]?.data;

    if (screenData?.priceUpdateTimer === undefined) return '__:__';

    const timeLeft = Number(screenData.priceUpdateTimer);

    const minutes = Number(Math.floor(timeLeft / 60)).toLocaleString(undefined, {
        minimumIntegerDigits: 2
    });

    const seconds = Number(timeLeft % 60).toLocaleString(undefined, {
        minimumIntegerDigits: 2
    });

    return `${minutes}:${seconds}`;
};

'''
'''--- src/components/widgets/components/ui-state-selectors/swap/slippage.ts ---
import { getChainId } from '../../../../../redux/preferences/selectors';
import { IReduxState } from '../../../../../redux/state';
import { getScreenDataKey } from '../../../../../redux/ui/screens/data/reducer';
import { getSelectedAccount, getSelectedWallet } from '../../../../../redux/wallets/selectors';
import { IScreenModule } from './../../../types';

export const getSwapCustomSlippage = (
    state: IReduxState,
    module: IScreenModule,
    options: {
        screenKey: string;
    },
    params: any
) => {
    let screenKey = options.screenKey;

    if (module?.details?.step) {
        const account = getSelectedAccount(state);
        const chainId = getChainId(state, account.blockchain);

        screenKey = getScreenDataKey({
            pubKey: getSelectedWallet(state)?.walletPublicKey,
            blockchain: account?.blockchain,
            chainId: String(chainId),
            address: account?.address,
            step: module.details.step,
            tab: undefined
        });
    }

    return (
        state.ui.screens.inputData && state.ui.screens.inputData[screenKey]?.data?.customSlippage
    );
};

'''
'''--- src/components/widgets/components/ui-state-selectors/swap/symbol.ts ---
import { SwapType } from '../../../../../core/blockchain/types/token';
import { getChainId } from '../../../../../redux/preferences/selectors';
import { IReduxState } from '../../../../../redux/state';
import { getScreenDataKey } from '../../../../../redux/ui/screens/data/reducer';
import { getSelectedAccount, getSelectedWallet } from '../../../../../redux/wallets/selectors';
import { IScreenModule } from './../../../types';

export const getSwapToken1Symbol = (
    state: IReduxState,
    module: IScreenModule,
    options: {
        screenKey: string;
    },
    params: any
) => {
    let screenKey = options?.screenKey;

    if (module?.details?.step) {
        const account = getSelectedAccount(state);
        const chainId = getChainId(state, account.blockchain);

        screenKey = getScreenDataKey({
            pubKey: getSelectedWallet(state)?.walletPublicKey,
            blockchain: account?.blockchain,
            chainId: String(chainId),
            address: account?.address,
            step: module.details.step,
            tab: undefined
        });
    }

    const type = state.ui.screens.inputData[screenKey]?.data?.swapType;

    const token1Symbol = state.ui.screens.inputData[screenKey]?.data?.swapToken1?.symbol;
    const token2Symbol = state.ui.screens.inputData[screenKey]?.data?.swapToken2?.symbol;

    return type === SwapType.SELL ? token1Symbol : token2Symbol;
};

export const getSwapToken2Symbol = (
    state: IReduxState,
    module: IScreenModule,
    options: {
        screenKey: string;
    },
    params: any
) => {
    let screenKey = options?.screenKey;

    if (module?.details?.step) {
        const account = getSelectedAccount(state);
        const chainId = getChainId(state, account.blockchain);

        screenKey = getScreenDataKey({
            pubKey: getSelectedWallet(state)?.walletPublicKey,
            blockchain: account?.blockchain,
            chainId: String(chainId),
            address: account?.address,
            step: module.details.step,
            tab: undefined
        });
    }

    const type = state.ui.screens.inputData[screenKey]?.data?.swapType;

    const token1Symbol = state.ui.screens.inputData[screenKey]?.data?.swapToken1?.symbol;
    const token2Symbol = state.ui.screens.inputData[screenKey]?.data?.swapToken2?.symbol;

    return type === SwapType.BUY ? token1Symbol : token2Symbol;
};

'''
'''--- src/components/widgets/components/ui-state-selectors/switch-node-enter-available-balance.ts ---
import BigNumber from 'bignumber.js';
import { getBlockchain } from '../../../../core/blockchain/blockchain-factory';
import { formatNumber } from '../../../../core/utils/format-number';
import { getChainId } from '../../../../redux/preferences/selectors';
import { IReduxState } from '../../../../redux/state';
import { getTokenConfig } from '../../../../redux/tokens/static-selectors';
import { getSelectedAccount } from '../../../../redux/wallets/selectors';
import { IScreenModule } from './../../types';

export const getSwitchNodeEnterAvailableBalanceFormat = (
    state: IReduxState,
    module: IScreenModule,
    options: { flowId: string }
) => {
    const account = getSelectedAccount(state);
    const blockchain = account.blockchain;
    const blockchainInstance = getBlockchain(blockchain);
    const chainId = getChainId(state, blockchain);
    const token = account.tokens[chainId][blockchainInstance.config.coin];

    const balance =
        (options?.flowId &&
            state.ui.screens.inputData &&
            state.ui.screens.inputData[options?.flowId]?.data?.switchNodeValidator
                ?.availableBalance) ||
        '0';

    const tokenConfig = getTokenConfig(blockchain, token.symbol);

    const amountFromStd = blockchainInstance.account.amountFromStd(
        new BigNumber(balance),
        tokenConfig.decimals
    );

    return formatNumber(amountFromStd, {
        currency: tokenConfig.symbol
    });
};

export const getSwitchNodeEnterAvailableBalance = (
    state: IReduxState,
    module: IScreenModule,
    options: { flowId: string }
) => {
    const account = getSelectedAccount(state);
    const blockchain = account.blockchain;
    const blockchainInstance = getBlockchain(blockchain);
    const chainId = getChainId(state, blockchain);
    const token = account.tokens[chainId][blockchainInstance.config.coin];

    const balance =
        (options?.flowId &&
            state.ui.screens.inputData &&
            state.ui.screens.inputData[options?.flowId]?.data?.switchNodeValidator
                ?.availableBalance) ||
        '0';

    const tokenConfig = getTokenConfig(blockchain, token.symbol);

    return blockchainInstance.account.amountFromStd(new BigNumber(balance), tokenConfig.decimals);
};

'''
'''--- src/components/widgets/components/ui-state-selectors/switch-node-selected-validator.ts ---
import { IReduxState } from '../../../../redux/state';
import { IScreenModule } from '../../types';

export const getSwitchNodeSelectedValidatorName = (
    state: IReduxState,
    module: IScreenModule,
    options: { flowId: string }
) => {
    return (
        options?.flowId &&
        state.ui.screens.inputData &&
        state.ui.screens.inputData[options?.flowId]?.data?.switchNodeValidator?.name
    );
};

export const getSwitchNodeSelectedToValidatorName = (
    state: IReduxState,
    module: IScreenModule,
    options: { flowId: string }
) => {
    return (
        options?.flowId &&
        state.ui.screens.inputData &&
        state.ui.screens.inputData[options?.flowId]?.data?.switchNodeToValidator?.name
    );
};

'''
'''--- src/components/widgets/components/ui-state-selectors/token-balance.ts ---
import BigNumber from 'bignumber.js';
import { getBlockchain } from '../../../../core/blockchain/blockchain-factory';
import { formatNumber } from '../../../../core/utils/format-number';
import { pickInsensitiveKey } from '../../../../core/utils/pick';
import { getChainId } from '../../../../redux/preferences/selectors';
import { IReduxState } from '../../../../redux/state';
import { getTokenConfig } from '../../../../redux/tokens/static-selectors';
import { getSelectedAccount } from '../../../../redux/wallets/selectors';
import { IScreenModule } from '../../types';

export const getTokenAvailableBalanceFormat = (
    state: IReduxState,
    module: IScreenModule,
    options: any,
    params: any
) => {
    const account = getSelectedAccount(state);
    const blockchain = account.blockchain;
    const blockchainInstance = getBlockchain(blockchain);
    const chainId = getChainId(state, blockchain);

    const tokenSymbol = params && params[0];

    const token = pickInsensitiveKey(account.tokens[chainId], tokenSymbol);

    const tokenConfig = getTokenConfig(blockchain, token.symbol);

    const balance = new BigNumber(token.balance?.available || '0');

    const amountFromStd = blockchainInstance.account.amountFromStd(balance, tokenConfig.decimals);

    return formatNumber(amountFromStd, {
        currency: tokenConfig.symbol
    });
};

export const getTokenAvailableBalance = (
    state: IReduxState,
    module: IScreenModule,
    options: any,
    params: any
) => {
    const account = getSelectedAccount(state);
    const blockchain = account.blockchain;
    const blockchainInstance = getBlockchain(blockchain);
    const chainId = getChainId(state, blockchain);

    const tokenSymbol = params && params[0];

    const token = pickInsensitiveKey(account.tokens[chainId], tokenSymbol);

    const tokenConfig = getTokenConfig(blockchain, token.symbol);

    const balance = new BigNumber(token.balance?.available || '0');

    return blockchainInstance.account.amountFromStd(balance, tokenConfig.decimals);
};

'''
'''--- src/components/widgets/components/validations/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import { BASE_DIMENSION, normalizeFontAndLineHeight } from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            backgroundColor: 'transparent',
            paddingHorizontal: BASE_DIMENSION * 2
        },
        warningText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(19),
            color: theme.colors.warning,
            marginTop: BASE_DIMENSION / 2
        },
        errorText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(19),
            color: theme.colors.error,
            marginTop: BASE_DIMENSION / 2
        }
    });

'''
'''--- src/components/widgets/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalize,
    normalizeFontAndLineHeight
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexDirection: 'row',
            justifyContent: 'space-between'
        },
        widgetContainer: {
            marginBottom: BASE_DIMENSION,
            borderRadius: BORDER_RADIUS
        },
        moduleColWrapperContainer: {
            flexDirection: 'row',
            justifyContent: 'space-between'
        },
        itemHeader: {
            flexDirection: 'row',
            justifyContent: 'space-between',
            marginRight: BASE_DIMENSION + 2,
            marginTop: BASE_DIMENSION + 2,
            marginHorizontal: BASE_DIMENSION,
            marginBottom: BASE_DIMENSION * 2
        },
        headerText: {
            fontSize: normalizeFontAndLineHeight(18),
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.text
        },
        headerTextNonExpandable: {
            margin: BASE_DIMENSION,
            marginBottom: BASE_DIMENSION * 2
        },
        expandingArrow: {
            color: theme.colors.accent,
            alignSelf: 'center'
        },
        quickDelegateBannerContainer: {
            marginBottom: BASE_DIMENSION
        },
        infoWrapper: {
            top: 0,
            position: 'absolute',
            width: normalize(40),
            height: normalize(40),
            justifyContent: 'center'
        }
    });

'''
'''--- src/components/widgets/types.ts ---
import { Blockchain } from '../../core/blockchain/types';
import { handleCta } from '../../redux/ui/screens/data/handle-cta';
import { AccountType } from '../../redux/wallets/state';
import { IconValues } from '../icon/values';
import {
    clearScreenInputData,
    runScreenValidation,
    runScreenStateActions,
    setScreenInputData
} from '../../redux/ui/screens/input-data/actions';

export interface IScreenRequest {
    context: IScreenContext;
    user: IScreenUser;
}

export interface IScreenContext<ScreenParams = any> {
    screen: string;
    step?: string;
    tab?: string;
    flowId?: string;
    params?: ScreenParams;
    flowData?: any;
}

export interface IScreenCtaContextParams<F = any, S = any, E = any> {
    ctaId: string;
    flowInputData: F;
    screenInputData: S;
    extraParams?: E;
}

/** @deprecated use string instead */
export enum ContextScreen {
    DASHBOARD = 'dashboard',
    TOKEN = 'token',
    QUICK_STAKE_SELECT_VALIDATOR = 'quickStakeSelectValidator'
}

/** @deprecated use string instead */
export enum ContextTab {
    ACCOUNT = 'account'
}

export interface ISmartScreenActions {
    handleCta?: typeof handleCta;
    clearScreenInputData?: typeof clearScreenInputData;
    runScreenValidation?: typeof runScreenValidation;
    runScreenStateActions?: typeof runScreenStateActions;
    setScreenInputData?: typeof setScreenInputData;
}

export enum SmartScreenPubSubEvents {
    SCROLL_TO_END = 'scrollToEnd',
    COLLAPSE_ALL = 'collapseAll'
}

export interface IScreenUser {
    os: 'android' | 'ios' | 'web';
    deviceId: string;
    preferedCurrency: string;
    appVersion: string;
    theme: 'dark' | 'light';
    country?: string;
    lang: 'en';

    wallet: {
        pubKey: string;
        type: 'HD' | 'HW';
        hwOptions?: {
            vendor?: string;
            model?: string;
            connectionType?: string;
        };
    };

    blockchain: Blockchain;
    chainId: string;
    address: string;
    accountType: AccountType;
}

export interface IScreenResponse {
    widgets: IScreenWidget[];
    bottomFixedArea?: IScreenWidget;
    validation?: IScreenValidation;
    navigationOptions?: any;
}

export interface IScreenCtaResponse {
    cta: ICta;
}

export interface IScreenFieldValidation {
    fn: string;
    params?: any[];
    messages?: {
        [key: string]: {
            type: string;
            message: string;
        };
    };
}

export interface IScreenValidation {
    validators: {
        [field: string]: IScreenFieldValidation[];
    };
}

export interface ICtaAction<P = any> {
    type:
        | 'callAction'
        | 'openUrl'
        | 'navigateTo'
        | 'onBack'
        | 'navigationOnPop'
        | 'navigateReplace';
    params: {
        action?: string;
        url?: string;
        count?: number;
        screen?: string;
        params?: P;
    };
}

export interface ICta {
    actions?: ICtaAction[];

    /** @deprecated use actions instead */
    type?: 'callAction' | 'openUrl' | 'navigateTo';

    /** @deprecated use actions instead */
    params?: {
        action?: string;
        url?: string;
        screen?: string;
        params?: any;
    };

    label?: string;

    buttonProps?: {
        primary?: boolean;
        secondary?: boolean;
        disabled?: boolean;
        disabledSecondary?: boolean;

        colors?: {
            /** @deprecated use textStyle instead */
            label?: string;

            bg?: string;
        };

        leftIcon?: IconValues;

        wrapperStyle?: any;
        buttonStyle?: any;
        textStyle?: any;
    };

    // TODO: check this
    screenDataValidation?: {
        context: IScreenContext; // not sure if needed
    };
}

export interface IScreenWidget {
    title?:
        | string
        | {
              value: string;
              containerStyle?: IDataStyle;
              textStyle?: IDataStyle;
              iconStyle?: IDataStyle;
          };
    expandable?: boolean;
    initialState?: 'collapsed' | 'expanded';
    style?: IDataStyle;
    modules: IScreenModule[];
    cta?: ICta;
    hideExpandableIcon?: boolean;
}

export interface IScreenModule {
    displayWhen?: 'collapsed' | 'expanded'; // if undefined, it will be displayed always
    hidden?: boolean;
    style?: IDataStyle;
    type:
        | ModuleTypes.ABSOLUTE_MODULES
        | ModuleTypes.AMOUNT_INPUT
        | ModuleTypes.AMOUNT_SELECTABLE_BOX
        | ModuleTypes.BALANCES_GRID_ICONS
        | ModuleTypes.CTA
        | ModuleTypes.GRADIENT_WRAPPER
        | ModuleTypes.ICON_ONE_LINE
        | ModuleTypes.ICON
        | ModuleTypes.ICON_TWO_LINES
        | ModuleTypes.IMAGE_BANNER
        | ModuleTypes.INPUT
        | ModuleTypes.TIMER_INTERVAL_PRICE_UPDATE
        | ModuleTypes.MD_TEXT
        | ModuleTypes.MODULE_COLUMNS_WRAPPER
        | ModuleTypes.MODULE_ROWS_WRAPPER
        | ModuleTypes.MODULE_SELECTABLE_WRAPPER
        | ModuleTypes.MODULE_WRAPPER
        | ModuleTypes.ONE_LINE_TEXT_BANNER
        | ModuleTypes.PRICE_UPDATE
        | ModuleTypes.PROGRESS_BAR
        | ModuleTypes.SEARCH
        | ModuleTypes.SEPARATOR
        | ModuleTypes.SINGLE_BALANCE_ICON
        | ModuleTypes.STATIC_TEXT_COLUMNS_BOTTOM_HEADER
        | ModuleTypes.STATIC_TEXT_COLUMNS_TOP_HEADER
        | ModuleTypes.TEXT_LINE_ICON
        | ModuleTypes.THREE_LINES_CTA
        | ModuleTypes.THREE_LINES_ICON
        | ModuleTypes.TWO_LINES_TEXT_BANNER
        | ModuleTypes.VALIDATIONS;
    cta?: ICta;
    ctaStyle?: IDataStyle;
    data:
        | I2LinesTextBannerData
        | I3LinesCtaData
        | IAmountInputData
        | IAmountSelectableBoxData
        | IBalanceGridData
        | IBalanceGridData[]
        | IGradientWrapperData
        | IIconData
        | IIconTwoLinesData
        | IIconOneLineData
        | IImageBannerData
        | IInputData
        | IMdTextData
        | IOneLineTextBannerData
        | ISearchData
        | IScreenModuleColumnsWrapperData
        | IScreenModuleRowsWrapperData
        | IScreenModuleSelectableWrapperData
        | IScreenModuleWrapperData
        | ISeparatorData
        | IStaticTextColumnData[]
        | IThreeLinesIconData;
    details?: any; // ex. amount, validatorId, ...
    info?: {
        position?: string; // 'top-right' is default
        style?: IDataStyle;
        data: IScreenModule;
    };

    state: {
        // uiStateSelector?: IStateSelector, // aka state modifier - not implemented now
        actions?: IStateSelector[];
        selectors: {
            [key: string]: IStateSelector;
        };
    };
}

export interface IStateSelector {
    fn: string;
    params?: any[];
}

export enum ModuleTypes {
    ABSOLUTE_MODULES = 'absolute-modules',
    AMOUNT_INPUT = 'amount-input',
    AMOUNT_SELECTABLE_BOX = 'amount-selectable-box',
    BALANCES_GRID_ICONS = 'balances-grid-icons',
    CTA = 'cta',
    GRADIENT_WRAPPER = 'gradient-wrapper',
    ICON_ONE_LINE = 'cta-one-line',
    ICON = 'icon',
    ICON_TWO_LINES = 'icon-two-lines',
    IMAGE_BANNER = 'image-banner',
    INPUT = 'input',
    TIMER_INTERVAL_PRICE_UPDATE = 'timer-interval-price-update',
    MD_TEXT = 'md-text',
    MODULE_COLUMNS_WRAPPER = 'module-columns-wrapper',
    MODULE_ROWS_WRAPPER = 'module-rows-wrapper',
    MODULE_SELECTABLE_WRAPPER = 'module-selectable-wrapper',
    MODULE_WRAPPER = 'module-wrapper',
    ONE_LINE_TEXT_BANNER = 'one_line_text_banner',
    PRICE_UPDATE = 'price-update',
    PROGRESS_BAR = 'progress-bar',
    SEARCH = 'search',
    SEPARATOR = 'separator',
    SINGLE_BALANCE_ICON = 'single-balance-icon',
    STATIC_TEXT_COLUMNS_BOTTOM_HEADER = 'static-text-columns-bottom-header',
    STATIC_TEXT_COLUMNS_TOP_HEADER = 'static-text-columns-top-header',
    TEXT_LINE_ICON = 'text-line-icon',
    THREE_LINES_CTA = '3-lines-cta',
    THREE_LINES_ICON = 'three-lines-icon',
    TWO_LINES_TEXT_BANNER = '2-lines-text-banner',
    VALIDATIONS = 'validations'
}

/// Screen Module Data Types \\\

export interface IScreenModuleWrapperData {
    state: string; // DEFAULT | PENDING | HIDDEN
    stateModifierFn: string;
    data: {
        [state: string]: Partial<IScreenModule>;
    };
}

export interface IScreenModuleSelectableWrapperData {
    state: string; //
    stateModifierFn: string;
    style?: {
        [state: string]: IDataStyle;
    };
    submodules: IScreenModule[];
}

export interface IScreenModuleColumnsWrapperData {
    style?: IDataStyle;
    submodules: IScreenModule[];
}

export interface IScreenModuleRowsWrapperData {
    style?: IDataStyle;
    submodules: IScreenModule[];
}

export enum DataType {
    TEXT = 'TEXT',
    CURRENCY = 'CURRENCY'
}

export interface ITextData {
    value: string | number;
    params?: {
        [param: string]: IData;
    };
}

export interface ICurrencyData {
    value: string;
    symbol: string;
    decimals?: number;
    round?: {
        decimals: number;
        type?: 'UP' | 'DOWN';
    };
    beautify?: IBeautify;
}

export interface IBeautify {
    fromValue?: number;
    decimals?: number;
    symbol?: string;
    notation?: 'compact' | 'percent';
}

export interface IDataStyle {
    [key: string]:
        | string
        | number
        | {
              value: string | number;
              fn: 'normalize' | 'normalizeFontAndLineHeight' | 'gradient';
          };
}

export interface IData {
    type: DataType;
    style?: IDataStyle;
    data: ITextData | ICurrencyData;
}

export interface I3LinesCtaData {
    firstLine: IData[];
    secondLine: IData[];
    thirdLine: IData[];
}

// Used for `static-text-columns-top-header` and `static-text-columns-bottom-header`
export interface IStaticTextColumnData {
    header: IData[];
    body: IData[];
}

// Used for`balances-grid-icons` and `single-balance-icon`
export interface IBalanceGridData {
    balance: IData[];
    label?: IData[];
    icon: {
        value: IconValues | string;
        color: string;
    };
}

export interface IImageBannerData {
    image: IImageInfo;
}

export interface IImageInfo {
    url: string;
    width: number;
    height: number;
}

export interface IOneLineTextBannerData {
    line: IData[];
}

export interface I2LinesTextBannerData {
    firstLine: IData[];
    secondLine: IData[];
    icon?: {
        value: IconValues;
        color?: string;
    };
    backgroundColor?: string;
}

export interface ISeparatorData {
    color?: string;
}

export interface IIconTwoLinesData {
    firstLine: IData[];
    secondLine: IData[];
    icon?: {
        url: string;
        style?: IDataStyle;
    };
}

export interface IIconData {
    icon: IconValues;
    wrapperStyle?: IDataStyle;
}

export interface IPriceUpdateData {
    endpoint: {
        url: string;
        method: 'POST' | 'GET';
        data: any;
    };
    reduxKey: string;
    interval: number; // miliseconds
}

export interface ITimerUpdateData {
    numSeconds: number;
    reduxKey: string;
    endpoint: {
        url: string;
        method: 'POST' | 'GET';
        data: any;
    };
    cta: ICta;
    interval: number; // miliseconds
}

export interface IThreeLinesIconData {
    firstLine: IData[];
    secondLine: IData[];
    thirdLine: IData[];
    icon: {
        url: string;
        style?: IDataStyle;
    };
}

export interface IMdTextData {
    text: string;
    style?: any;
}

/**
 * value: +0.1 | half | all
 * percentage: 10%
 */
export interface IAmountInputAmountBox {
    type: 'value' | 'percentage';
    value: string | number;
    // label: string;
}

export interface IAmountInputData {
    input?: {
        style?: IDataStyle;
        textStyle?: IDataStyle;
    };
    labels?: IData[];
    amounts?: IAmountInputAmountBox[];
    placeholder?: {
        value: string;
        color?: string;
    };
    editable?: boolean;
    focus?: boolean;
    showValidations?: boolean;
    onChangeTextAction?: IStateSelector;
}

export interface ISearchData {
    state: string;
    stateModifierFn: string;
    initialStateData: IScreenModule[];
    type: any;
    input?: {
        style?: IDataStyle;
        textStyle?: IDataStyle;
    };
    placeholder?: {
        value: string;
        color?: string;
    };
    search?: {
        icon?: IconValues;
        style?: IDataStyle;
    };
    cancel?: {
        style?: IDataStyle;
        cta?: ICta;
    };
    focus?: boolean;
}

export interface IAmountSelectableBoxData {
    amounts: IAmountInputAmountBox[];
    style?: {
        default?: IDataStyle;
        selected?: IDataStyle;
        text?: IDataStyle;
        textSelected?: IDataStyle;
    };
}

export interface IIconOneLineData {
    icon: {
        value: IconValues;
        style?: IDataStyle;
    };
    line: IData[];
}

export interface IInputData {
    style?: {
        input?: IDataStyle;
        inputContainer?: IDataStyle;
    };
    options?: {
        keyboardType?: string;
        placeholder?: {
            value: string;
            color?: string;
        };
        multiline?: boolean;
    };
}

export interface IGradientWrapperData {
    gradient: string[];
    submodules: IScreenModule[];
}

export interface IProgressBarData {
    percentage: number;
    backgroundStyle?: IDataStyle;
    barStyle?: IDataStyle;
}

export interface ITextLineIconData {
    icon: {
        value: IconValues;
        style?: IDataStyle;
    };
    line: IData[];
    lineStyle?: IDataStyle;
}

export interface IValidationData {
    fieldName?: string;
}

export interface IAbsoluteModulesData {
    module1: {
        module: IScreenModule;
        style?: IDataStyle;
    };
    module2?: {
        module: IScreenModule;
        style?: IDataStyle;
    };
}

'''
'''--- src/components/zilliqa-transaction-update/ws-client.ts ---
import { WsClient } from '../../core/blockchain/zilliqa/ws-client';

const wsClient = {};

export const getWsClient = (chainId: string): WsClient => {
    if (!wsClient[chainId]) {
        const ws = new WsClient(chainId);
        wsClient[chainId] = ws;
    }
    return wsClient[chainId];
};

'''
'''--- src/components/zilliqa-transaction-update/zilliqa-transaction-update.ts ---
import { smartConnect } from '../../core/utils/smart-connect';
import { IReduxState } from '../../redux/state';
import { connect } from 'react-redux';
import { fromBech32Address } from '@zilliqa-js/crypto/dist/bech32';
import { getSelectedWallet } from '../../redux/wallets/selectors';
import { Blockchain, ChainIdType } from '../../core/blockchain/types';
import { getChainId } from '../../redux/preferences/selectors';
import { getWsClient } from './ws-client';
import React from 'react';
import { updateTransactionsStatus } from '../../redux/wallets/actions';
import bind from 'bind-decorator';

interface IReduxProps {
    chainId: ChainIdType;
    addresses: string[];
    updateTransactionsStatus: typeof updateTransactionsStatus;
}

const mapStateToProps = (state: IReduxState) => {
    const wallet = getSelectedWallet(state);
    return {
        chainId: getChainId(state, Blockchain.ZILLIQA),
        addresses: wallet
            ? wallet.accounts
                  .filter(acc => acc.blockchain === Blockchain.ZILLIQA)
                  .map(acc => fromBech32Address(acc.address).toLowerCase())
            : []
    };
};

const mapDispatchToProps = {
    updateTransactionsStatus
};

export class ZilliqaTransactionUpdateComponent extends React.Component<IReduxProps> {
    constructor(props: IReduxProps) {
        super(props);
        this.connectToWs();
    }

    private unsubscribe;

    @bind
    private connectToWs() {
        if (this.unsubscribe) this.unsubscribe();
        const wsClient = getWsClient(this.props.chainId.toString());

        this.unsubscribe = wsClient.onTxnLog(this.props.addresses, transactions => {
            this.props.updateTransactionsStatus(transactions);
        });
    }

    public componentDidUpdate(prevProps: IReduxProps) {
        const prevHash = prevProps.chainId.toString() + prevProps.addresses.sort().join();
        const hash = this.props.chainId.toString() + this.props.addresses.sort().join();

        if (prevHash !== hash) {
            this.connectToWs();
        }
    }

    public render() {
        return null;
    }
}

export const ZilliqaTransactionUpdate = smartConnect(ZilliqaTransactionUpdateComponent, [
    connect(mapStateToProps, mapDispatchToProps)
]);

'''
'''--- src/config/config-beta.ts ---
import { IAppConfig } from './config-interface';
import { firebaseConfig } from './firebase-web-release';

const extSyncBaseUrl = 'https://fire.moonlet.io/functions/extensionSync';

export const CONFIG_BETA: IAppConfig = {
    walletApiBaseUrl: 'https://api-preview.moonlet.app',
    supportUrl: 'https://fire.moonlet.io/static/support/webview.html',
    env: process.env.MOONLET_SOME_KEY,
    tokensUrl: 'https://fire.moonlet.io/static/tokens/',
    termsAndConditionsUrl:
        'https://fire.moonlet.io/static/terms/terms-of-service.html?v=' + Date.now(),
    privacyPolicyUrl: 'https://fire.moonlet.io/static/terms/privacy-policy.html?v=' + Date.now(),
    troubleshootingUrl: 'https://fire.moonlet.io/static/ledger/troubleshooting.html',
    firebaseConfigFetchInterval: 15 * 60, // 15 mins
    ntpServer: 'pool.ntp.org',
    ntpPort: 123,
    extSync: {
        bucket: 'gs://moonlet-extension-sync-live',
        updateStateUrl: extSyncBaseUrl + '/updateState',
        disconnectUrl: extSyncBaseUrl + '/disconnect',
        sendRequestUrl: extSyncBaseUrl + '/sendRequest',
        sendResponseUrl: extSyncBaseUrl + '/sendResponse',
        deleteRequestUrl: extSyncBaseUrl + '/deleteRequest'
    },
    firebaseWebConfig: firebaseConfig
};

'''
'''--- src/config/config-interface.ts ---
export interface IAppConfig {
    walletApiBaseUrl: string;
    supportUrl: string;
    env: string;
    tokensUrl: string;
    firebaseConfigFetchInterval: number;
    termsAndConditionsUrl: string;
    privacyPolicyUrl: string;
    troubleshootingUrl: string;
    ntpServer: string;
    ntpPort: number;
    extSync: {
        bucket: string;
        updateStateUrl: string;
        disconnectUrl: string;
        sendRequestUrl: string;
        sendResponseUrl: string;
        deleteRequestUrl: string;
    };
    firebaseWebConfig: any;
}

'''
'''--- src/config/config-release.ts ---
import { IAppConfig } from './config-interface';
import { firebaseConfig } from './firebase-web-release';

const extSyncBaseUrl = 'https://fire.moonlet.io/functions/extensionSync';

export const CONFIG_RELEASE: IAppConfig = {
    walletApiBaseUrl: 'https://api.moonlet.app',
    supportUrl: 'https://fire.moonlet.io/static/support/webview.html',
    env: process.env.MOONLET_SOME_KEY,
    tokensUrl: 'https://fire.moonlet.io/static/tokens/',
    termsAndConditionsUrl:
        'https://fire.moonlet.io/static/terms/terms-of-service.html?v=' + Date.now(),
    privacyPolicyUrl: 'https://fire.moonlet.io/static/terms/privacy-policy.html?v=' + Date.now(),
    troubleshootingUrl: 'https://fire.moonlet.io/static/ledger/troubleshooting.html',
    firebaseConfigFetchInterval: 15 * 60, // 15 mins
    ntpServer: 'pool.ntp.org',
    ntpPort: 123,
    extSync: {
        bucket: 'gs://moonlet-extension-sync-live',
        updateStateUrl: extSyncBaseUrl + '/updateState',
        disconnectUrl: extSyncBaseUrl + '/disconnect',
        sendRequestUrl: extSyncBaseUrl + '/sendRequest',
        sendResponseUrl: extSyncBaseUrl + '/sendResponse',
        deleteRequestUrl: extSyncBaseUrl + '/deleteRequest'
    },
    firebaseWebConfig: firebaseConfig
};

'''
'''--- src/config/index.ts ---
import { CONFIG_BETA } from './config-beta';
import { CONFIG_RELEASE } from './config-release';
import DeviceInfo from 'react-native-device-info';

let CONF = CONFIG_RELEASE;
if (DeviceInfo.getBundleId() === 'com.moonlet.beta') {
    CONF = CONFIG_BETA;
}

export const CONFIG = CONF;
export default CONFIG;

'''
'''--- src/core/biometric-auth/biometric-auth.ts ---
import TouchID from 'react-native-touch-id';

/**
 * The supported biometry type
 */
export type BiometryType = 'FaceID' | 'TouchID';

/**
 * Base config to pass to `TouchID.isSupported` and `TouchID.authenticate`
 */
interface IsSupportedConfig {
    /**
     * Return unified error messages
     */
    unifiedErrors?: boolean;
}

export const biometricAuth = {
    isSupported(config?: IsSupportedConfig): Promise<BiometryType> {
        return TouchID.isSupported(config);
    }
};

'''
'''--- src/core/blockchain/__tests__/blockchain-factory.test.ts ---
import { getBlockchain } from '../blockchain-factory';
import { Blockchain } from '../types';
import { Ethereum } from '../ethereum';
import { Zilliqa } from '../zilliqa';

export default describe('BlochainFactory', () => {
    test('getBlockchain()', () => {
        expect(getBlockchain(Blockchain.ETHEREUM)).toBe(Ethereum);
        expect(getBlockchain(Blockchain.ZILLIQA)).toBe(Zilliqa);

        expect(() => getBlockchain('INVALID_BLOCKCHAIN' as any)).toThrowError(
            'INVALID_BLOCKCHAIN implementation not found'
        );
    });
});

'''
'''--- src/core/blockchain/blockchain-factory.ts ---
import { Blockchain, IBlockchain } from './types';
import { Zilliqa } from './zilliqa';
import { Ethereum } from './ethereum';
import { Near } from './near';
import { Cosmos } from './cosmos';
import { Celo } from './celo';
import { Solana } from './solana';

export const getBlockchain = (blockchain: Blockchain): IBlockchain => {
    switch (blockchain) {
        case Blockchain.ETHEREUM:
            return Ethereum;
        case Blockchain.ZILLIQA:
            return Zilliqa;
        case Blockchain.NEAR:
            return Near;
        case Blockchain.SOLANA:
            return Solana;
        case Blockchain.COSMOS:
            return Cosmos;
        case Blockchain.CELO:
            return Celo;
        default:
            throw new Error(`getBlockchain: ${blockchain} implementation not found`);
    }
};

export const BLOCKCHAIN_LIST = [
    Blockchain.ZILLIQA,
    Blockchain.ETHEREUM,
    Blockchain.SOLANA,
    Blockchain.CELO,
    Blockchain.NEAR,
    Blockchain.COSMOS
];

'''
'''--- src/core/blockchain/celo/account.ts ---
import { EthereumAccountUtils } from '../ethereum/account';
import { AccountType, IAccountState } from '../../../redux/wallets/state';
import { Blockchain } from '../types';
import { generateTokensConfig } from '../../../redux/tokens/static-selectors';

export class CeloAccountUtils extends EthereumAccountUtils {
    public getAccountFromPrivateKey(privateKey: string, index: number): IAccountState {
        return {
            index,
            type: AccountType.DEFAULT,
            selected: false,
            publicKey: this.privateToPublic(privateKey),
            address: this.privateToAddress(privateKey),
            blockchain: Blockchain.CELO,
            tokens: generateTokensConfig(Blockchain.CELO)
        };
    }
}

'''
'''--- src/core/blockchain/celo/client-utils.ts ---
import { IClientUtils } from '../types/client-utils';
import { Client } from './client';
import { IBlockchainTransaction, Blockchain, TransactionType } from '../types';
import { ITokenConfigState } from '../../../redux/tokens/state';
import { TokenType, TokenScreenComponentType } from '../types/token';
import { config } from './config';
import abi from 'ethereumjs-abi';
import { Celo } from '.';
import { TransactionStatus } from '../../wallet/types';

export class ClientUtils implements IClientUtils {
    constructor(private client: Client) {}

    async getTransaction(hash: string): Promise<IBlockchainTransaction> {
        const rpcCalls = [
            this.client.http.jsonRpc('eth_getTransactionByHash', [hash]),
            this.client.http.jsonRpc('eth_getTransactionReceipt', [hash])
        ];

        const res = await Promise.all(rpcCalls);

        if (!res[0].result) {
            throw new Error(res[0].error.message || `Error getting transaction info for ${hash}`);
        }
        if (!res[1].result) {
            throw new Error(`Error getting transaction receipt for ${hash}`);
        }
        return this.buildTransactionFromBlockchain(res[0].result, res[1].result);
    }

    // TODO: fix this in order to use Sign Transaction(s) Screen
    async getTransactionStatus(
        hash: string,
        context: { txData?: any; currentBlockNumber?: number; token?: ITokenConfigState }
    ): Promise<TransactionStatus> {
        return Promise.reject('CELO ClientUtils.getTransactionStatus() not impelmented');
    }

    async buildTransactionFromBlockchain(txInfo, txReceipt) {
        const token = await this.getToken(txInfo.to);
        const data: any = {};

        // TODO - find how to get the data since its a contract call not simple transfer call
        if (token && token.type === TokenType.ERC20) {
            try {
                const transferInputParameteres = this.decodeInputData(
                    'transfer(address,uint256)',
                    txInfo.input
                );
                if (transferInputParameteres[0] && transferInputParameteres[1]) {
                    data.params = [
                        '0x' + transferInputParameteres[0],
                        transferInputParameteres[1].toString(10)
                    ];
                } else {
                    throw new Error('Cannot decode input data');
                }
            } catch (e) {
                // probably not a transaction
                return null;
            }
        }

        return {
            id: txInfo.hash,
            date: {
                created: Date.now(),
                signed: Date.now(),
                broadcasted: Date.now(),
                confirmed: Date.now()
            },
            blockchain: Blockchain.CELO,
            chainId: this.client.chainId,
            type: TransactionType.TRANSFER,

            address: txInfo.from,
            publicKey: '', // TODO: get publicKey form vrs

            toAddress: txInfo.to,
            amount: txInfo.value,
            data,
            feeOptions: {
                gasPrice: txInfo.gasPrice,
                gasLimit: txInfo.gas,
                feeTotal: txReceipt.gasUsed
            },
            broadcastedOnBlock: txInfo.blockNumber,
            nonce: txInfo.nonce,
            status: Celo.transaction.getTransactionStatusByCode(txReceipt.status),
            token
        };
    }

    async getToken(toAddress: string): Promise<ITokenConfigState> {
        const token = await this.client.tokens[TokenType.ERC20].getTokenInfo(toAddress).catch(e => {
            // not a contract
            return null;
        });

        if (!(token && token.name && token.symbol)) {
            return config.tokens.CELO;
        }

        token.type = TokenType.ERC20;
        token.ui = {
            decimals: token.decimals,
            tokenScreenComponent: TokenScreenComponentType.DEFAULT
        };

        return token;
    }

    decodeInputData(signature: string, data: string) {
        const sig = signature.split(':');
        const sigParts = sig[0].split('(');
        const methodName = sigParts[0];
        let params = [];
        if (sigParts[1]) {
            params = sigParts[1]
                .replace(')', '')
                .split(',')
                .map(p => p.trim());
        }

        const methodId = abi.methodID(methodName, params).toString('hex');

        data = data.replace('0x', '');

        if (data.indexOf(methodId) === 0) {
            const rawParamsData = data.substr(methodId.length);
            return abi.rawDecode(params, Buffer.from(rawParamsData, 'hex'));
        } else {
            throw new Error('Cannot decode data');
        }
    }
}

'''
'''--- src/core/blockchain/celo/client.ts ---
import { Client as EthereumClient } from '../ethereum/client';
import { Erc20Client } from './tokens/erc20-client';
import {
    ChainIdType,
    TransactionMessageText,
    TransactionType,
    Contracts,
    TypedTransaction
} from '../types';
import { TokenType } from '../types/token';
import { ClientUtils } from './client-utils';
import { networks } from './networks';
import { HttpClient } from '../../utils/http-client';
import { NameService } from './name-service';
import BigNumber from 'bignumber.js';
import { config } from './config';
import { LockedGold } from './contracts/lockedgold';
import { Election } from './contracts/election';
import { Accounts } from './contracts/accounts';
import abi from 'ethereumjs-abi';
import { captureException as SentryCaptureException } from '@sentry/react-native';

export class Client extends EthereumClient {
    constructor(chainId: ChainIdType) {
        super(chainId);
        this.tokens[TokenType.ERC20] = new Erc20Client(this);
        this.nameService = new NameService(this);
        this.utils = new ClientUtils(this);
        this.contracts[Contracts.LOCKED_GOLD] = new LockedGold(this);
        this.contracts[Contracts.ELECTION] = new Election(this);
        this.contracts[Contracts.ACCOUNTS] = new Accounts(this);

        let url = networks[0].url;
        const network = networks.filter(n => n.chainId === chainId)[0];
        if (network) {
            url = network.url;
        }
        this.http = new HttpClient(url);
    }

    public sendTransaction(transaction): Promise<{ txHash: string; rawResponse: any }> {
        return this.http.jsonRpc('eth_sendRawTransaction', [transaction]).then(res => {
            if (res.result) {
                return {
                    txHash: res.result,
                    rawResponse: res
                };
            } else {
                SentryCaptureException(new Error(JSON.stringify(res || 'no result from rpc')));
            }

            const errorMessage: string = res.error.message;
            if (errorMessage.includes('transaction underpriced')) {
                return Promise.reject(TransactionMessageText.TR_UNDERPRICED);
            }
            if (errorMessage.includes('insufficient funds for gas')) {
                return Promise.reject(TransactionMessageText.NOT_ENOUGH_TOKENS);
            }
        });
    }

    public async getFees(
        transactionType: TransactionType,

        data: {
            from?: string;
            to?: string;
            amount?: string;
            contractAddress?: string;
            raw?: string;
        },
        typedTransaction: TypedTransaction = TypedTransaction.TYPE_0,
        tokenType: TokenType = TokenType.NATIVE
    ) {
        try {
            let results = {};

            const transferRawData =
                '0x' +
                abi
                    .simpleEncode(
                        'transfer(address,uint256)',
                        data.to,
                        new BigNumber(data.amount).toFixed()
                    )
                    .toString('hex');

            switch (transactionType) {
                case TransactionType.TRANSFER: {
                    results = data.contractAddress
                        ? await this.estimateGas(
                              true,
                              data.from,
                              data.to,
                              data.contractAddress,
                              new BigNumber(data.amount),
                              transferRawData
                          )
                        : await this.estimateGas(true, data.from, data.to);
                }
                case TransactionType.CONTRACT_CALL: {
                    results = await this.estimateGas(
                        true,
                        data.from,
                        data.to,
                        data.contractAddress,
                        new BigNumber(data.amount),
                        data.raw ? data.raw : transferRawData
                    );
                }
            }

            const gasPriceRpc = await this.getGasPrice();

            const gasPrice = gasPriceRpc
                ? gasPriceRpc.multipliedBy(1.5)
                : config.feeOptions.defaults.gasPrice;
            const gasLimit = results[0].result
                ? new BigNumber(parseInt(results[0].result, 16)).multipliedBy(1.5)
                : config.feeOptions.defaults.gasLimit[tokenType];

            return {
                gasPrice: gasPrice.toFixed(0),
                gasLimit: gasLimit.toFixed(0),
                presets: {},
                feeTotal: gasPrice.multipliedBy(gasLimit).toFixed()
            };
        } catch {
            const gasPrice = config.feeOptions.defaults.gasPrice;
            const gasLimit = config.feeOptions.defaults.gasLimit[tokenType];

            return {
                gasPrice: gasPrice.toFixed(),
                gasLimit: gasLimit.toFixed(),
                presets: {},
                feeTotal: gasPrice.multipliedBy(gasLimit).toFixed()
            };
        }
    }

    public async getMinimumAmountDelegate(): Promise<BigNumber> {
        return new BigNumber(0);
    }

    public async getGasPrice(): Promise<BigNumber> {
        return this.http.jsonRpc('eth_gasPrice', []).then(res => {
            return new BigNumber(res.result, 16);
        });
    }

    public async estimateGas(
        fetchPrice: boolean,
        from: string,
        to: string,
        contractAddress?: string,
        amount?: BigNumber,
        data?: string
    ): Promise<any> {
        let gasEstimatePromise;
        if (data) {
            gasEstimatePromise = this.http.jsonRpc('eth_estimateGas', [
                {
                    from,
                    to: contractAddress,
                    data
                }
            ]);
        } else {
            gasEstimatePromise = this.http.jsonRpc('eth_estimateGas', [{ from, to }]);
        }

        return Promise.all([
            gasEstimatePromise,
            // TODO: extract url in a constant, also create a firebase function to be sure that this service is up
            fetch('https://ethgasstation.info/json/ethgasAPI.json')
        ]);
    }
}

'''
'''--- src/core/blockchain/celo/config.ts ---
import { IBlockchainConfig, DerivationType, TypedTransaction } from '../types';
import { BigNumber } from 'bignumber.js';
import { TokenType, PosBasicActionType } from '../types/token';
import CeloIcon from '../../../assets/icons/blockchains/celo.svg';
import {
    CELO_GOLD_NATIVE,
    CELO_GOLD_MAINNET,
    CELO_GOLD_TESTNET_ALFAJORES,
    CELO_GOLD_TESTNET_BAKLAVA
} from './tokens/celo';
import {
    CELO_USD_MAINNET,
    CELO_USD_TESTNET_ALFAJORES,
    CELO_USD_TESTNET_BAKLAVA
} from './tokens/cUSD';
import { IconValues } from '../../../components/icon/values';
import { AffiliateBannerType } from '../../../components/affiliate-banner/types';
import { AccountType } from '../../../redux/wallets/state';

export const accountCTA = {
    mainCta: {
        title: 'App.labels.quickVote',
        iconName: IconValues.VOTE,
        navigateTo: {
            screen: 'PosQuickDelegate',
            params: { actionText: 'App.labels.quickVote' }
        }
    }
};

const validatorCTA = {
    mainCta: {
        title: 'App.labels.vote',
        iconName: IconValues.VOTE,
        navigateTo: {
            screen: 'PosDelegate',
            params: { actionText: 'App.labels.vote' }
        }
    },
    otherCtas: [
        {
            title: 'App.labels.revote',
            iconName: IconValues.REVOTE,
            navigateTo: {
                screen: 'PosRedelegate',
                params: { actionText: 'App.labels.revote' }
            }
        },
        {
            title: 'App.labels.unvote',
            iconName: IconValues.UNVOTE,
            navigateTo: {
                screen: 'PosBasicAction',
                params: { actionText: 'App.labels.unvote', basicAction: PosBasicActionType.UNVOTE }
            }
        },
        {
            title: 'App.labels.unlock',
            iconName: IconValues.UNLOCK,
            navigateTo: {
                screen: 'PosBasicAction',
                params: {
                    actionText: 'App.labels.unlock',
                    basicAction: PosBasicActionType.UNLOCK,
                    unlockDays: '3 days'
                }
            }
        }
    ]
};

export const config: IBlockchainConfig = {
    derivationPath: `m/44'/52752'/0'/0`,
    derivationType: DerivationType.HD_KEY,
    coin: 'CELO',
    defaultUnit: 'WEI',
    iconComponent: CeloIcon,
    droppedTxBlocksThreshold: 50,
    autoAddedTokensSymbols: {
        42220: {
            CELO: CELO_GOLD_MAINNET,
            cUSD: CELO_USD_MAINNET
        },
        44787: {
            CELO: CELO_GOLD_TESTNET_ALFAJORES,
            cUSD: CELO_USD_TESTNET_ALFAJORES
        },
        62320: {
            CELO: CELO_GOLD_TESTNET_BAKLAVA,
            cUSD: CELO_USD_TESTNET_BAKLAVA
        }
    },
    tokens: {
        CELO: CELO_GOLD_NATIVE
    },
    typedTransaction: {
        HD: TypedTransaction.TYPE_0,
        HW: TypedTransaction.TYPE_0
    },
    feeOptions: {
        gasPriceToken: 'CELO',
        defaults: {
            gasPrice: new BigNumber(5000000000),
            gasLimit: {
                [TokenType.ERC20]: new BigNumber(400000)
            }
        },
        ui: {
            availableTokenTypes: [TokenType.ERC20],
            feeComponent: 'FeeTotal',
            feeComponentAdvanced: {
                HD: 'GasFeeAdvanced',
                HW: 'GasFeeAdvanced'
            },
            gasPriceUnit: 'GWEI',
            defaultPreset: 'medium'
        }
    },
    ui: {
        validator: {
            totalLabel: 'Validator.totalVotes',
            amountCardLabel: 'App.labels.myVotes',
            maximumNumberOfValidators: 5
        },
        token: {
            labels: {
                tabAccount: 'App.labels.account',
                tabDelegations: 'App.labels.myVotes',
                tabValidators: 'App.labels.validators',
                tabTransactions: 'App.labels.transactions'
            },
            actionScreenLabels: {},
            sendStepLabels: [
                'Validator.selectValidator',
                'App.labels.enterAmount',
                'Validator.confirmVote'
            ],
            accountCTA,
            delegationCTA: {
                mainCta: accountCTA.mainCta
            },
            validatorCTA
        },
        addressDisplay: 'stripped',
        enableTokenManagement: true,
        enableAccountCreation: false,
        maxAccountsNumber: 5,
        displayName: 'CELO',
        affiliateBanners: {
            account: AffiliateBannerType.LEDGER_NANO_X
        },
        fetchAccountStatsSec: 5
    },
    networks: {
        testNet: 44787,
        mainNet: 42220
    },
    defaultOrder: 1,
    amountToKeepInAccount: {
        [AccountType.DEFAULT]: new BigNumber(0)
    }
};

'''
'''--- src/core/blockchain/celo/contracts/accounts.ts ---
import { Client } from '../client';
import abi from 'ethereumjs-abi';
import { getContract, buildBaseTransaction } from './base-contract';
import {
    IPosTransaction,
    IBlockchainTransaction,
    TransactionType,
    Contracts,
    TypedTransaction
} from '../../types';
import { PosBasicActionType, TokenType } from '../../types/token';

export class Accounts {
    constructor(private client: Client) {}

    public async isRegisteredAccount(accountAddress: string): Promise<boolean> {
        const contractAddress = await getContract(this.client.chainId, Contracts.ACCOUNTS);

        return this.client
            .callContract(contractAddress, 'isAccount(address):(bool)', [accountAddress])
            .then(res => {
                if (res === 'false') return false;
                return true;
            })
            .catch(() => {
                return false;
            });
    }

    public async createAccount(tx: IPosTransaction): Promise<IBlockchainTransaction> {
        const transaction = await buildBaseTransaction(tx);
        const contractAddress = await getContract(this.client.chainId, Contracts.ACCOUNTS);

        const raw = '0x' + abi.simpleEncode('createAccount()').toString('hex');

        const fees = await this.client.getFees(
            TransactionType.CONTRACT_CALL,
            {
                from: tx.account.address,
                to: tx.account.address,
                amount: tx.amount,
                contractAddress,
                raw
            },
            TypedTransaction.TYPE_0,
            TokenType.ERC20
        );
        transaction.feeOptions = fees;

        transaction.toAddress = contractAddress;
        transaction.amount = '0';
        transaction.data = {
            method: 'register',
            params: [tx.account.address],
            raw
        };

        transaction.additionalInfo.posAction = PosBasicActionType.CREATE_ACCOUNT;

        return transaction;
    }
}

'''
'''--- src/core/blockchain/celo/contracts/base-contract.ts ---
import {
    ChainIdType,
    IPosTransaction,
    IBlockchainTransaction,
    TransactionType,
    Contracts
} from '../../types';
import { getTokenConfig } from '../../../../redux/tokens/static-selectors';
import { Celo } from '..';
import { TransactionStatus } from '../../../wallet/types';

const contracts = {
    '44787': {
        [Contracts.LOCKED_GOLD]: '0x6a4CC5693DC5BFA3799C699F3B941bA2Cb00c341',
        [Contracts.ELECTION]: '0x1c3eDf937CFc2F6F51784D20DEB1af1F9a8655fA',
        [Contracts.ACCOUNTS]: '0xed7f51A34B4e71fbE69B3091FcF879cD14bD73A9'
    },
    '62320': {
        [Contracts.LOCKED_GOLD]: '0xF07406D8040fBD831e9983CA9cC278fBfFeB56bF',
        [Contracts.ELECTION]: '0x7eb2b2f696C60A48Afd7632f280c7De91c8E5aa5',
        [Contracts.ACCOUNTS]: '0x64FF4e6F7e08119d877Fd2E26F4C20B537819080'
    }
};

export const fetchContracts = async (chainId: ChainIdType) => {
    // TODO - fetch from blockchain
    return contracts;
};

export const getCeloContracts = async (chainId: ChainIdType) => {
    if (!contracts[chainId]) {
        contracts[chainId] = await fetchContracts(chainId);
    }
    return contracts[chainId];
};

export const getContract = async (
    chainId: ChainIdType,
    contractType: Contracts
): Promise<string> => {
    return getCeloContracts(chainId).then(celoContracts => celoContracts[contractType]);
};

export const buildBaseTransaction = async (
    tx: IPosTransaction
): Promise<IBlockchainTransaction> => {
    const tokenConfig = getTokenConfig(tx.account.blockchain, tx.token);

    const client = Celo.getClient(tx.chainId);
    const nonce = await client.getNonce(tx.account.address, tx.account.publicKey);
    const blockInfo = await client.getCurrentBlock();

    return {
        date: {
            created: Date.now(),
            signed: Date.now(),
            broadcasted: Date.now(),
            confirmed: Date.now()
        },
        blockchain: tx.account.blockchain,
        chainId: tx.chainId,
        type: TransactionType.CONTRACT_CALL,
        token: tokenConfig,
        address: tx.account.address,
        publicKey: tx.account.publicKey,
        toAddress: '',
        amount: tx.amount,
        feeOptions: tx.feeOptions,
        broadcastedOnBlock: blockInfo?.number,
        nonce,
        status: TransactionStatus.PENDING,
        data: {},
        additionalInfo: tx.extraFields
    };
};

'''
'''--- src/core/blockchain/celo/contracts/election.ts ---
import { Client } from '../client';
import {
    IPosTransaction,
    IBlockchainTransaction,
    TransactionType,
    Contracts,
    TypedTransaction
} from '../../types';
import abi from 'ethereumjs-abi';
import { getContract, buildBaseTransaction } from './base-contract';
import BigNumber from 'bignumber.js';
import { fixEthAddress } from '../../../utils/format-address';
import { PosBasicActionType, TokenType } from '../../types/token';
import { IValidator } from '../../types/stats';

export class Election {
    constructor(private client: Client) {}

    public async vote(tx: IPosTransaction, validator: IValidator): Promise<IBlockchainTransaction> {
        const transaction = await buildBaseTransaction(tx);
        const contractAddress = await getContract(this.client.chainId, Contracts.ELECTION);

        const { lesser, greater } = await this.findLesserAndGreaterAfterVote(
            validator.id,
            new BigNumber(tx.amount)
        );

        transaction.amount = '0';
        transaction.toAddress = contractAddress;

        const raw =
            '0x' +
            abi
                .simpleEncode(
                    'vote(address,uint256,address,address)',
                    validator.id,
                    new BigNumber(tx.amount).toFixed(),
                    lesser,
                    greater
                )
                .toString('hex');

        const fees = await this.client.getFees(
            TransactionType.CONTRACT_CALL,
            {
                from: tx.account.address,
                to: validator.id,
                amount: tx.amount,
                contractAddress,
                raw
            },
            TypedTransaction.TYPE_0,
            TokenType.ERC20
        );
        transaction.feeOptions = fees;

        transaction.data = {
            method: 'vote',
            params: [validator.id, tx.amount],
            raw
        };

        transaction.additionalInfo.posAction = PosBasicActionType.DELEGATE;
        transaction.additionalInfo.validatorName = validator.name;

        return transaction;
    }

    public async revokeActive(
        tx: IPosTransaction,
        indexForGroup: number
    ): Promise<IBlockchainTransaction> {
        const groupAddress = tx.validators[0].id;
        const transaction = await buildBaseTransaction(tx);
        const contractAddress = await getContract(this.client.chainId, Contracts.ELECTION);

        if (indexForGroup === -1) return undefined;

        const { lesser, greater } = await this.findLesserAndGreaterAfterVote(
            groupAddress,
            new BigNumber(tx.amount).times(-1)
        );

        const raw =
            '0x' +
            abi
                .simpleEncode(
                    'revokeActive(address,uint256,address,address,uint256)',
                    fixEthAddress(groupAddress),
                    new BigNumber(tx.amount).toFixed(),
                    lesser,
                    greater,
                    indexForGroup
                )
                .toString('hex');
        const fees = await this.client.getFees(
            TransactionType.CONTRACT_CALL,
            {
                from: tx.account.address,
                to: groupAddress,
                amount: tx.amount,
                contractAddress,
                raw
            },
            TypedTransaction.TYPE_0,
            TokenType.ERC20
        );
        transaction.feeOptions = fees;

        transaction.toAddress = contractAddress;
        transaction.amount = '0';
        transaction.data = {
            method: 'unvote',
            params: [groupAddress, tx.amount],
            raw
        };

        transaction.additionalInfo.posAction = PosBasicActionType.UNVOTE;

        return transaction;
    }

    public async revokePending(
        tx: IPosTransaction,
        indexForGroup: number
    ): Promise<IBlockchainTransaction> {
        const groupAddress = tx.validators[0].id.toLowerCase();
        const transaction = await buildBaseTransaction(tx);
        const contractAddress = await getContract(this.client.chainId, Contracts.ELECTION);

        if (indexForGroup === -1) return undefined;

        const { lesser, greater } = await this.findLesserAndGreaterAfterVote(
            groupAddress,
            new BigNumber(tx.amount).times(-1)
        );

        const raw =
            '0x' +
            abi
                .simpleEncode(
                    'revokePending(address,uint256,address,address,uint256)',
                    fixEthAddress(groupAddress),
                    new BigNumber(tx.amount).toFixed(),
                    lesser,
                    greater,
                    indexForGroup
                )
                .toString('hex');

        const fees = await this.client.getFees(
            TransactionType.CONTRACT_CALL,
            {
                from: tx.account.address,
                to: groupAddress,
                amount: tx.amount,
                contractAddress,
                raw
            },
            TypedTransaction.TYPE_0,
            TokenType.ERC20
        );
        transaction.feeOptions = fees;

        transaction.toAddress = contractAddress;
        transaction.amount = '0';
        transaction.data = {
            method: 'unvote',
            params: [groupAddress, tx.amount],
            raw
        };

        transaction.additionalInfo.posAction = PosBasicActionType.UNVOTE;

        return transaction;
    }

    public async activate(tx: IPosTransaction, address: string): Promise<IBlockchainTransaction> {
        const transaction = await buildBaseTransaction(tx);
        const contractAddress = await getContract(this.client.chainId, Contracts.ELECTION);

        const raw =
            '0x' + abi.simpleEncode('activate(address)', fixEthAddress(address)).toString('hex');

        const fees = await this.client.getFees(
            TransactionType.CONTRACT_CALL,
            {
                from: tx.account.address,
                to: address,
                amount: tx.amount,
                contractAddress,
                raw
            },
            TypedTransaction.TYPE_0,
            TokenType.ERC20
        );
        transaction.feeOptions = fees;

        transaction.toAddress = contractAddress;
        transaction.amount = '0';
        transaction.data = {
            method: 'activate',
            params: [address, tx.amount],
            raw
        };

        transaction.additionalInfo.posAction = PosBasicActionType.ACTIVATE;

        return transaction;
    }

    public async getVotesForGroupByAccount(
        accountAddress: string,
        groupAddress: string
    ): Promise<any> {
        const contractAddress = await getContract(this.client.chainId, Contracts.ELECTION);
        const pendingVotes = await this.client.callContract(
            contractAddress,
            'getPendingVotesForGroupByAccount(address,address):(uint256)',
            [groupAddress, accountAddress]
        );

        const activeVotes = await this.client.callContract(
            contractAddress,
            'getActiveVotesForGroupByAccount(address,address):(uint256)',
            [groupAddress, accountAddress]
        );

        return {
            pending: new BigNumber(pendingVotes as string),
            active: new BigNumber(activeVotes as string)
        };
    }

    public async findLesserAndGreaterAfterVote(
        votedGroup: string,
        voteWeight: BigNumber
    ): Promise<{ lesser: string; greater: string }> {
        const currentVotes = await this.getTotalVotesForEligibleValidatorGroups();

        const selectedGroup = currentVotes.find(
            votes => fixEthAddress(votes.address) === votedGroup
        );
        const voteTotal = selectedGroup ? selectedGroup.votes.plus(voteWeight) : voteWeight;
        let greaterKey = '0x';
        let lesserKey = '0x';

        for (const vote of currentVotes) {
            if (fixEthAddress(vote.address) !== votedGroup) {
                if (vote.votes.isLessThanOrEqualTo(voteTotal)) {
                    lesserKey = vote.address;
                    break;
                }
                greaterKey = vote.address;
            }
        }

        return {
            lesser: fixEthAddress(lesserKey),
            greater: fixEthAddress(greaterKey)
        };
    }

    public async hasActivatablePendingVotes(
        accountAddress: string,
        group: string
    ): Promise<boolean> {
        const contractAddress = await getContract(this.client.chainId, Contracts.ELECTION);

        const response = await this.client.callContract(
            contractAddress,
            'hasActivatablePendingVotes(address,address):(bool)',
            [accountAddress, fixEthAddress(group)]
        );

        if (response === 'false') return false;
        return true;
    }

    public async getGroupsVotedForByAccount(accountAddress: string): Promise<string[]> {
        const contractAddress = await getContract(this.client.chainId, Contracts.ELECTION);
        return this.client
            .callContract(contractAddress, 'getGroupsVotedForByAccount(address):(address[])', [
                accountAddress
            ])
            .then(res => {
                if (res && typeof res === 'string') {
                    return res.split(',');
                } else {
                    return res as string[];
                }
            });
    }

    public async getTotalVotesForEligibleValidatorGroups(): Promise<any> {
        const contractAddress = await getContract(this.client.chainId, Contracts.ELECTION);

        return this.client
            .callContract(
                contractAddress,
                'getTotalVotesForEligibleValidatorGroups():(address[],uint256[])'
            )
            .then(res => {
                if (res && res.length > 1) {
                    const addresses: [] = res[0].split(',');
                    const votes: [] = res[1].split(',');
                    const validatorList = [];
                    addresses.map((address: string, index: number) => {
                        const vote = votes[index];
                        validatorList.push({ address, votes: new BigNumber(vote) });
                    });
                    return validatorList.sort((a, b) =>
                        a.votes.isGreaterThanOrEqualTo(b.votes) ? 1 : -1
                    );
                }
            });
    }
}

'''
'''--- src/core/blockchain/celo/contracts/lockedgold.ts ---
import { Client } from '../client';
import BigNumber from 'bignumber.js';
import {
    IPosTransaction,
    IBlockchainTransaction,
    TransactionType,
    Contracts,
    TypedTransaction
} from '../../types';
import abi from 'ethereumjs-abi';
import { getContract, buildBaseTransaction } from './base-contract';
import { PosBasicActionType, TokenType } from '../../types/token';

export class LockedGold {
    constructor(private client: Client) {}

    public async withdraw(tx: IPosTransaction, index: number): Promise<IBlockchainTransaction> {
        const transaction = await buildBaseTransaction(tx);
        const contractAddress = await getContract(this.client.chainId, Contracts.LOCKED_GOLD);

        const raw = '0x' + abi.simpleEncode('withdraw(uint256)', index).toString('hex');

        const fees = await this.client.getFees(
            TransactionType.CONTRACT_CALL,
            {
                from: tx.account.address,
                to: '',
                amount: tx.amount,
                contractAddress,
                raw
            },
            TypedTransaction.TYPE_0,
            TokenType.ERC20
        );
        transaction.feeOptions = fees;

        transaction.toAddress = contractAddress;
        transaction.amount = '0';
        transaction.data = {
            method: 'withdraw',
            params: [contractAddress, tx.amount],
            raw
        };

        return transaction;
    }

    public async lock(tx: IPosTransaction): Promise<IBlockchainTransaction> {
        const transaction = await buildBaseTransaction(tx);
        const contractAddress = await getContract(this.client.chainId, Contracts.LOCKED_GOLD);

        const raw = '0x' + abi.simpleEncode('lock()').toString('hex');

        const fees = await this.client.getFees(
            TransactionType.CONTRACT_CALL,
            {
                from: tx.account.address.toLowerCase(),
                to: '',
                amount: tx.amount,
                contractAddress,
                raw
            },
            TypedTransaction.TYPE_0,
            TokenType.ERC20
        );
        transaction.feeOptions = fees;

        transaction.toAddress = contractAddress;
        transaction.data = {
            method: 'lock',
            params: [contractAddress, tx.amount],
            raw
        };

        transaction.additionalInfo.posAction = PosBasicActionType.LOCK;
        return transaction;
    }

    public async unlock(tx: IPosTransaction): Promise<IBlockchainTransaction> {
        const transaction = await buildBaseTransaction(tx);
        const contractAddress = await getContract(this.client.chainId, Contracts.LOCKED_GOLD);

        const raw = '0x' + abi.simpleEncode('unlock(uint256)', tx.amount).toString('hex');

        const fees = await this.client.getFees(
            TransactionType.CONTRACT_CALL,
            {
                from: tx.account.address,
                to: '',
                amount: tx.amount,
                contractAddress,
                raw
            },
            TypedTransaction.TYPE_0,
            TokenType.ERC20
        );
        transaction.feeOptions = fees;

        transaction.toAddress = contractAddress;
        transaction.amount = '0';
        transaction.data = {
            method: 'unlock',
            params: [contractAddress, tx.amount],
            raw
        };

        transaction.additionalInfo.posAction = PosBasicActionType.UNLOCK;

        return transaction;
    }

    public async getAccountNonvotingLockedGold(accountAddress: string): Promise<BigNumber> {
        const contractAddress = await getContract(this.client.chainId, Contracts.LOCKED_GOLD);

        return this.client
            .callContract(contractAddress, 'getAccountNonvotingLockedGold(address):(uint256)', [
                accountAddress
            ])
            .then(v => {
                return new BigNumber(v as string);
            });
    }

    public async getPendingWithdrawals(accountAddress: string): Promise<[]> {
        const contractAddress = await getContract(this.client.chainId, Contracts.LOCKED_GOLD);

        return this.client
            .callContract(contractAddress, 'getPendingWithdrawals(address):(uint256[],uint256[])', [
                accountAddress
            ])
            .then(res => {
                if (res && res.length > 1) {
                    const values: [] = res[0].split(',');
                    const timestamps: [] = res[1].split(',');
                    const pendingWithdrawals = [];
                    values.map((value: string, index: number) => {
                        pendingWithdrawals.push({
                            value,
                            time: new Date(timestamps[index] * 1000)
                        });
                    });
                    return pendingWithdrawals.sort((a, b) =>
                        new Date(a.time * 1000) < new Date(b.time * 1000) ? 1 : -1
                    ) as [];
                }
            });
    }
}

'''
'''--- src/core/blockchain/celo/index.ts ---
import { config } from './config';
import { networks } from './networks';
import { Client } from './client';
import { CeloTransactionUtils } from './transaction';
import { CeloAccountUtils } from './account';
import { IBlockchain, ChainIdType, Contracts } from '../types';
import { Stats } from './stats';
import { getContract } from './contracts/base-contract';

const account = new CeloAccountUtils();
const transaction = new CeloTransactionUtils();
const clients = {};

export const Celo: IBlockchain = {
    config,
    networks,
    transaction,
    account,
    Client,
    getStats: (chainId: ChainIdType) => new Stats(new Client(chainId), config),
    getClient: (chainId: ChainIdType) => {
        if (!clients[chainId]) {
            clients[chainId] = new Client(chainId);
        }
        return clients[chainId];
    },
    getContract: (chainId: ChainIdType, contractType: Contracts) => {
        return getContract(chainId, contractType);
    }
};

'''
'''--- src/core/blockchain/celo/library/hash.js ---
// This was ported from https://github.com/emn178/js-sha3, with some minor
// modifications and pruning. It is licensed under MIT:
//
// Copyright 2015-2016 Chen, Yi-Cyuan
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

const HEX_CHARS = '0123456789abcdef'.split('');
const KECCAK_PADDING = [1, 256, 65536, 16777216];
const SHIFT = [0, 8, 16, 24];
const RC = [
    1,
    0,
    32898,
    0,
    32906,
    2147483648,
    2147516416,
    2147483648,
    32907,
    0,
    2147483649,
    0,
    2147516545,
    2147483648,
    32777,
    2147483648,
    138,
    0,
    136,
    0,
    2147516425,
    0,
    2147483658,
    0,
    2147516555,
    0,
    139,
    2147483648,
    32905,
    2147483648,
    32771,
    2147483648,
    32770,
    2147483648,
    128,
    2147483648,
    32778,
    0,
    2147483658,
    2147483648,
    2147516545,
    2147483648,
    32896,
    2147483648,
    2147483649,
    0,
    2147516424,
    2147483648
];

const Keccak = bits => ({
    blocks: [],
    reset: true,
    block: 0,
    start: 0,
    blockCount: (1600 - (bits << 1)) >> 5,
    outputBlocks: bits >> 5,
    s: (s => [].concat(s, s, s, s, s))([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
});

const update = (state, message) => {
    var length = message.length,
        blocks = state.blocks,
        byteCount = state.blockCount << 2,
        blockCount = state.blockCount,
        outputBlocks = state.outputBlocks,
        s = state.s,
        index = 0,
        i,
        code;

    // update
    while (index < length) {
        if (state.reset) {
            state.reset = false;
            blocks[0] = state.block;
            for (i = 1; i < blockCount + 1; ++i) {
                blocks[i] = 0;
            }
        }
        if (typeof message !== 'string') {
            for (i = state.start; index < length && i < byteCount; ++index) {
                blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
            }
        } else {
            for (i = state.start; index < length && i < byteCount; ++index) {
                code = message.charCodeAt(index);
                if (code < 0x80) {
                    blocks[i >> 2] |= code << SHIFT[i++ & 3];
                } else if (code < 0x800) {
                    blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                } else if (code < 0xd800 || code >= 0xe000) {
                    blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                    blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                } else {
                    code =
                        0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
                    blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                    blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                    blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                }
            }
        }
        state.lastByteIndex = i;
        if (i >= byteCount) {
            state.start = i - byteCount;
            state.block = blocks[blockCount];
            for (i = 0; i < blockCount; ++i) {
                s[i] ^= blocks[i];
            }
            f(s);
            state.reset = true;
        } else {
            state.start = i;
        }
    }

    // finalize
    i = state.lastByteIndex;
    blocks[i >> 2] |= KECCAK_PADDING[i & 3];
    if (state.lastByteIndex === byteCount) {
        blocks[0] = blocks[blockCount];
        for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
        }
    }
    blocks[blockCount - 1] |= 0x80000000;
    for (i = 0; i < blockCount; ++i) {
        s[i] ^= blocks[i];
    }
    f(s);

    // toString
    var hex = '',
        i = 0,
        j = 0,
        block;
    while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            block = s[i];
            hex +=
                HEX_CHARS[(block >> 4) & 0x0f] +
                HEX_CHARS[block & 0x0f] +
                HEX_CHARS[(block >> 12) & 0x0f] +
                HEX_CHARS[(block >> 8) & 0x0f] +
                HEX_CHARS[(block >> 20) & 0x0f] +
                HEX_CHARS[(block >> 16) & 0x0f] +
                HEX_CHARS[(block >> 28) & 0x0f] +
                HEX_CHARS[(block >> 24) & 0x0f];
        }
        if (j % blockCount === 0) {
            f(s);
            i = 0;
        }
    }
    return '0x' + hex;
};

const f = s => {
    var h,
        l,
        n,
        c0,
        c1,
        c2,
        c3,
        c4,
        c5,
        c6,
        c7,
        c8,
        c9,
        b0,
        b1,
        b2,
        b3,
        b4,
        b5,
        b6,
        b7,
        b8,
        b9,
        b10,
        b11,
        b12,
        b13,
        b14,
        b15,
        b16,
        b17,
        b18,
        b19,
        b20,
        b21,
        b22,
        b23,
        b24,
        b25,
        b26,
        b27,
        b28,
        b29,
        b30,
        b31,
        b32,
        b33,
        b34,
        b35,
        b36,
        b37,
        b38,
        b39,
        b40,
        b41,
        b42,
        b43,
        b44,
        b45,
        b46,
        b47,
        b48,
        b49;

    for (n = 0; n < 48; n += 2) {
        c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
        c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
        c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
        c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
        c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
        c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
        c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
        c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
        c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
        c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

        h = c8 ^ ((c2 << 1) | (c3 >>> 31));
        l = c9 ^ ((c3 << 1) | (c2 >>> 31));
        s[0] ^= h;
        s[1] ^= l;
        s[10] ^= h;
        s[11] ^= l;
        s[20] ^= h;
        s[21] ^= l;
        s[30] ^= h;
        s[31] ^= l;
        s[40] ^= h;
        s[41] ^= l;
        h = c0 ^ ((c4 << 1) | (c5 >>> 31));
        l = c1 ^ ((c5 << 1) | (c4 >>> 31));
        s[2] ^= h;
        s[3] ^= l;
        s[12] ^= h;
        s[13] ^= l;
        s[22] ^= h;
        s[23] ^= l;
        s[32] ^= h;
        s[33] ^= l;
        s[42] ^= h;
        s[43] ^= l;
        h = c2 ^ ((c6 << 1) | (c7 >>> 31));
        l = c3 ^ ((c7 << 1) | (c6 >>> 31));
        s[4] ^= h;
        s[5] ^= l;
        s[14] ^= h;
        s[15] ^= l;
        s[24] ^= h;
        s[25] ^= l;
        s[34] ^= h;
        s[35] ^= l;
        s[44] ^= h;
        s[45] ^= l;
        h = c4 ^ ((c8 << 1) | (c9 >>> 31));
        l = c5 ^ ((c9 << 1) | (c8 >>> 31));
        s[6] ^= h;
        s[7] ^= l;
        s[16] ^= h;
        s[17] ^= l;
        s[26] ^= h;
        s[27] ^= l;
        s[36] ^= h;
        s[37] ^= l;
        s[46] ^= h;
        s[47] ^= l;
        h = c6 ^ ((c0 << 1) | (c1 >>> 31));
        l = c7 ^ ((c1 << 1) | (c0 >>> 31));
        s[8] ^= h;
        s[9] ^= l;
        s[18] ^= h;
        s[19] ^= l;
        s[28] ^= h;
        s[29] ^= l;
        s[38] ^= h;
        s[39] ^= l;
        s[48] ^= h;
        s[49] ^= l;

        b0 = s[0];
        b1 = s[1];
        b32 = (s[11] << 4) | (s[10] >>> 28);
        b33 = (s[10] << 4) | (s[11] >>> 28);
        b14 = (s[20] << 3) | (s[21] >>> 29);
        b15 = (s[21] << 3) | (s[20] >>> 29);
        b46 = (s[31] << 9) | (s[30] >>> 23);
        b47 = (s[30] << 9) | (s[31] >>> 23);
        b28 = (s[40] << 18) | (s[41] >>> 14);
        b29 = (s[41] << 18) | (s[40] >>> 14);
        b20 = (s[2] << 1) | (s[3] >>> 31);
        b21 = (s[3] << 1) | (s[2] >>> 31);
        b2 = (s[13] << 12) | (s[12] >>> 20);
        b3 = (s[12] << 12) | (s[13] >>> 20);
        b34 = (s[22] << 10) | (s[23] >>> 22);
        b35 = (s[23] << 10) | (s[22] >>> 22);
        b16 = (s[33] << 13) | (s[32] >>> 19);
        b17 = (s[32] << 13) | (s[33] >>> 19);
        b48 = (s[42] << 2) | (s[43] >>> 30);
        b49 = (s[43] << 2) | (s[42] >>> 30);
        b40 = (s[5] << 30) | (s[4] >>> 2);
        b41 = (s[4] << 30) | (s[5] >>> 2);
        b22 = (s[14] << 6) | (s[15] >>> 26);
        b23 = (s[15] << 6) | (s[14] >>> 26);
        b4 = (s[25] << 11) | (s[24] >>> 21);
        b5 = (s[24] << 11) | (s[25] >>> 21);
        b36 = (s[34] << 15) | (s[35] >>> 17);
        b37 = (s[35] << 15) | (s[34] >>> 17);
        b18 = (s[45] << 29) | (s[44] >>> 3);
        b19 = (s[44] << 29) | (s[45] >>> 3);
        b10 = (s[6] << 28) | (s[7] >>> 4);
        b11 = (s[7] << 28) | (s[6] >>> 4);
        b42 = (s[17] << 23) | (s[16] >>> 9);
        b43 = (s[16] << 23) | (s[17] >>> 9);
        b24 = (s[26] << 25) | (s[27] >>> 7);
        b25 = (s[27] << 25) | (s[26] >>> 7);
        b6 = (s[36] << 21) | (s[37] >>> 11);
        b7 = (s[37] << 21) | (s[36] >>> 11);
        b38 = (s[47] << 24) | (s[46] >>> 8);
        b39 = (s[46] << 24) | (s[47] >>> 8);
        b30 = (s[8] << 27) | (s[9] >>> 5);
        b31 = (s[9] << 27) | (s[8] >>> 5);
        b12 = (s[18] << 20) | (s[19] >>> 12);
        b13 = (s[19] << 20) | (s[18] >>> 12);
        b44 = (s[29] << 7) | (s[28] >>> 25);
        b45 = (s[28] << 7) | (s[29] >>> 25);
        b26 = (s[38] << 8) | (s[39] >>> 24);
        b27 = (s[39] << 8) | (s[38] >>> 24);
        b8 = (s[48] << 14) | (s[49] >>> 18);
        b9 = (s[49] << 14) | (s[48] >>> 18);

        s[0] = b0 ^ (~b2 & b4);
        s[1] = b1 ^ (~b3 & b5);
        s[10] = b10 ^ (~b12 & b14);
        s[11] = b11 ^ (~b13 & b15);
        s[20] = b20 ^ (~b22 & b24);
        s[21] = b21 ^ (~b23 & b25);
        s[30] = b30 ^ (~b32 & b34);
        s[31] = b31 ^ (~b33 & b35);
        s[40] = b40 ^ (~b42 & b44);
        s[41] = b41 ^ (~b43 & b45);
        s[2] = b2 ^ (~b4 & b6);
        s[3] = b3 ^ (~b5 & b7);
        s[12] = b12 ^ (~b14 & b16);
        s[13] = b13 ^ (~b15 & b17);
        s[22] = b22 ^ (~b24 & b26);
        s[23] = b23 ^ (~b25 & b27);
        s[32] = b32 ^ (~b34 & b36);
        s[33] = b33 ^ (~b35 & b37);
        s[42] = b42 ^ (~b44 & b46);
        s[43] = b43 ^ (~b45 & b47);
        s[4] = b4 ^ (~b6 & b8);
        s[5] = b5 ^ (~b7 & b9);
        s[14] = b14 ^ (~b16 & b18);
        s[15] = b15 ^ (~b17 & b19);
        s[24] = b24 ^ (~b26 & b28);
        s[25] = b25 ^ (~b27 & b29);
        s[34] = b34 ^ (~b36 & b38);
        s[35] = b35 ^ (~b37 & b39);
        s[44] = b44 ^ (~b46 & b48);
        s[45] = b45 ^ (~b47 & b49);
        s[6] = b6 ^ (~b8 & b0);
        s[7] = b7 ^ (~b9 & b1);
        s[16] = b16 ^ (~b18 & b10);
        s[17] = b17 ^ (~b19 & b11);
        s[26] = b26 ^ (~b28 & b20);
        s[27] = b27 ^ (~b29 & b21);
        s[36] = b36 ^ (~b38 & b30);
        s[37] = b37 ^ (~b39 & b31);
        s[46] = b46 ^ (~b48 & b40);
        s[47] = b47 ^ (~b49 & b41);
        s[8] = b8 ^ (~b0 & b2);
        s[9] = b9 ^ (~b1 & b3);
        s[18] = b18 ^ (~b10 & b12);
        s[19] = b19 ^ (~b11 & b13);
        s[28] = b28 ^ (~b20 & b22);
        s[29] = b29 ^ (~b21 & b23);
        s[38] = b38 ^ (~b30 & b32);
        s[39] = b39 ^ (~b31 & b33);
        s[48] = b48 ^ (~b40 & b42);
        s[49] = b49 ^ (~b41 & b43);

        s[0] ^= RC[n];
        s[1] ^= RC[n + 1];
    }
};

const keccak = bits => str => {
    var msg;
    if (str.slice(0, 2) === '0x') {
        msg = [];
        for (var i = 2, l = str.length; i < l; i += 2) msg.push(parseInt(str.slice(i, i + 2), 16));
    } else {
        msg = str;
    }
    return update(Keccak(bits, bits), msg);
};

module.exports = {
    keccak256: keccak(256),
    keccak512: keccak(512),
    keccak256s: keccak(256),
    keccak512s: keccak(512)
};

'''
'''--- src/core/blockchain/celo/library/rlp.js ---
// The RLP format
// Serialization and deserialization for the BytesTree type, under the following grammar:
// | First byte | Meaning                                                                    |
// | ---------- | -------------------------------------------------------------------------- |
// | 0   to 127 | HEX(leaf)                                                                  |
// | 128 to 183 | HEX(length_of_leaf + 128) + HEX(leaf)                                      |
// | 184 to 191 | HEX(length_of_length_of_leaf + 128 + 55) + HEX(length_of_leaf) + HEX(leaf) |
// | 192 to 247 | HEX(length_of_node + 192) + HEX(node)                                      |
// | 248 to 255 | HEX(length_of_length_of_node + 128 + 55) + HEX(length_of_node) + HEX(node) |

const encode = tree => {
    const padEven = str => (str.length % 2 === 0 ? str : '0' + str);

    const uint = num => padEven(num.toString(16));

    const length = (len, add) =>
        len < 56 ? uint(add + len) : uint(add + uint(len).length / 2 + 55) + uint(len);

    const dataTree = tree => {
        if (typeof tree === 'string') {
            const hex = tree.slice(2);
            const pre = hex.length != 2 || hex >= '80' ? length(hex.length / 2, 128) : '';
            return pre + hex;
        } else {
            const hex = tree.map(dataTree).join('');
            const pre = length(hex.length / 2, 192);
            return pre + hex;
        }
    };

    return '0x' + dataTree(tree);
};

const decode = hex => {
    let i = 2;

    const parseTree = () => {
        if (i >= hex.length) throw '';
        const head = hex.slice(i, i + 2);
        return head < '80' ? ((i += 2), '0x' + head) : head < 'c0' ? parseHex() : parseList();
    };

    const parseLength = () => {
        const len = parseInt(hex.slice(i, (i += 2)), 16) % 64;
        return len < 56 ? len : parseInt(hex.slice(i, (i += (len - 55) * 2)), 16);
    };

    const parseHex = () => {
        const len = parseLength();
        return '0x' + hex.slice(i, (i += len * 2));
    };

    const parseList = () => {
        const lim = parseLength() * 2 + i;
        let list = [];
        while (i < lim) list.push(parseTree());
        return list;
    };

    try {
        return parseTree();
    } catch (e) {
        return [];
    }
};

module.exports = { encode, decode };

'''
'''--- src/core/blockchain/celo/library/signing-utils.ts ---
import BigNumber from 'bignumber.js';

export const toHex = value => {
    if (value && value !== '0x') {
        const base = typeof value === 'string' && value.indexOf('0x') === 0 ? 16 : 10;

        let stringValue = new BigNumber(value, base).toString(16);
        if (stringValue.length % 2 > 0) {
            stringValue = '0' + stringValue;
        }
        return '0x' + stringValue;
    }
    return '0x';
};

export const trimLeadingZero = (hex: string) => {
    while (hex && hex.startsWith('0x0')) {
        hex = '0x' + hex.slice(3);
    }
    return hex;
};

export const makeEven = (hex: string) => {
    if (hex.length % 2 === 1) {
        hex = hex.replace('0x', '0x0');
    }
    return hex;
};

'''
'''--- src/core/blockchain/celo/name-service.ts ---
import { NameService as EthereumNameService } from '../ethereum/name-service';

export class NameService extends EthereumNameService {}

'''
'''--- src/core/blockchain/celo/networks.ts ---
import { IBlockchainNetwork } from '../types';

export const networks: IBlockchainNetwork[] = [
    {
        name: 'Alfajores',
        chainId: 44787,
        mainNet: false,
        url: 'https://alfajores-forno.celo-testnet.org/',
        explorer: {
            name: 'Alfajores',
            getAccountUrl: addr => `https://alfajores-blockscout.celo-testnet.org/address/${addr}`,
            getTransactionUrl: txn => `https://alfajores-blockscout.celo-testnet.org/tx/${txn}`
        }
    },
    {
        name: 'Baklava',
        chainId: 62320,
        mainNet: false,
        url: 'https://baklava-forno.celo-testnet.org/',
        explorer: {
            name: 'Baklava',
            getAccountUrl: addr => `https://baklava-blockscout.celo-testnet.org/address/${addr}`,
            getTransactionUrl: txn => `https://baklava-blockscout.celo-testnet.org/tx/${txn}`
        }
    },
    {
        name: 'Mainnet',
        chainId: 42220,
        mainNet: true,
        url: 'https://rc1-forno.celo-testnet.org/',
        explorer: {
            name: 'Mainnet',
            getAccountUrl: addr => `https://explorer.celo.org/address/${addr}`,
            getTransactionUrl: txn => `https://explorer.celo.org/tx/${txn}`
        }
    }
];

'''
'''--- src/core/blockchain/celo/stats.ts ---
import { GenericStats, AccountStats } from '../types/stats';
import { Client } from './client';
import { AccountType, IAccountState, ITokenState } from '../../../redux/wallets/state';
import { ApiClient } from '../../utils/api-client/api-client';
import { BigNumber } from 'bignumber.js';
import { config } from './config';

export class Stats extends GenericStats<Client> {
    public async getAccountDelegateStats(
        account: IAccountState,
        token: ITokenState
    ): Promise<AccountStats> {
        const data = await new ApiClient().validators.getAccountDelegateStats(
            account,
            this.client.chainId.toString()
        );

        return data;
    }

    public async getAvailableBalanceForDelegate(account: IAccountState): Promise<string> {
        const data = await new ApiClient().validators.getBalance(
            account.address,
            account.blockchain,
            this.client.chainId.toString()
        );

        let availableToDelegate = new BigNumber(data.balance.unstaked || 0);

        const accountType = account?.type || AccountType.DEFAULT;

        if (new BigNumber(data.balance.available).gt(config.amountToKeepInAccount[accountType])) {
            availableToDelegate = availableToDelegate.plus(
                new BigNumber(data.balance.available).minus(
                    config.amountToKeepInAccount[accountType]
                )
            );
        }
        return availableToDelegate.toFixed();
    }
}

'''
'''--- src/core/blockchain/celo/tokens/cUSD.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const CELO_USD_TESTNET_ALFAJORES: ITokenConfigState = {
    name: 'Celo USD',
    symbol: 'cUSD',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/celo/cusd.png'
    },
    removable: true,
    contractAddress: '0x874069fa1eb16d44d622f2e0ca25eea172369bc1',
    defaultOrder: 999,
    decimals: 18,
    ui: {
        decimals: 4,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ERC20
};

export const CELO_USD_CONTRACT_ADDRESS = (contractAddress: string): ITokenConfigState => {
    const coin = CELO_USD_TESTNET_ALFAJORES;
    coin.contractAddress = contractAddress;

    return coin;
};

export const CELO_USD_TESTNET_BAKLAVA = CELO_USD_CONTRACT_ADDRESS(
    '0x4b84c2EF94A274DbF83E2F1Ec1608456c9B62D96'
);

export const CELO_USD_MAINNET = CELO_USD_CONTRACT_ADDRESS(
    '0x765DE816845861e75A25fCA122bb6898B8B1282a'
);

'''
'''--- src/core/blockchain/celo/tokens/celo.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';
import BigNumber from 'bignumber.js';
import { klona } from 'klona';
import { Platform } from 'react-native';

export const CELO_GOLD_NATIVE: ITokenConfigState = {
    name: 'Celo Gold',
    symbol: 'CELO',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/celo/celo.png'
    },
    removable: false,
    defaultOrder: 0,
    decimals: 18,
    ui: {
        decimals: 4,
        tokenScreenComponent: Platform.select({
            default: TokenScreenComponentType.DELEGATE,
            web: TokenScreenComponentType.DEFAULT
        })
    },
    type: TokenType.NATIVE,
    units: {
        WEI: new BigNumber(1),
        GWEI: new BigNumber(Math.pow(10, 9)),
        CELO: new BigNumber(Math.pow(10, 18))
    }
};

export const CELO_GOLD_TESTNET_ALFAJORES: ITokenConfigState = {
    name: 'Celo Gold',
    symbol: 'CELO',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/celo/celo.png'
    },
    removable: false,
    contractAddress: '0xF194afDf50B03e69Bd7D057c1Aa9e10c9954E4C9',
    defaultOrder: 0,
    decimals: 18,
    ui: {
        decimals: 4,
        tokenScreenComponent: Platform.select({
            default: TokenScreenComponentType.DELEGATE,
            web: TokenScreenComponentType.DEFAULT
        })
    },
    type: TokenType.ERC20,
    units: {
        WEI: new BigNumber(1),
        GWEI: new BigNumber(Math.pow(10, 9)),
        CELO: new BigNumber(Math.pow(10, 18))
    }
};

export const CELO_GOLD_CONTRACT_ADDRESS = (contractAddress: string): ITokenConfigState => {
    const coin = klona(CELO_GOLD_TESTNET_ALFAJORES);
    coin.contractAddress = contractAddress;

    return coin;
};

export const CELO_GOLD_TESTNET_BAKLAVA = CELO_GOLD_CONTRACT_ADDRESS(
    '0xdDc9bE57f553fe75752D61606B94CBD7e0264eF8'
);

export const CELO_GOLD_MAINNET = CELO_GOLD_CONTRACT_ADDRESS(
    '0x471EcE3750Da237f93B8E339c536989b8978a438'
);

'''
'''--- src/core/blockchain/celo/tokens/erc20-client.ts ---
import { Client } from '../client';
import BigNumber from 'bignumber.js';

export class Erc20Client {
    constructor(private client: Client) {}

    public getBalance(
        contractAddress,
        accountAddress
    ): Promise<{ available: BigNumber; total: BigNumber }> {
        return this.client
            .callContract(contractAddress, 'balanceOf(address):(uint256)', [accountAddress])
            .then(v => ({
                available: new BigNumber(String(v)),
                total: new BigNumber(String(v))
            }));
    }

    public getSymbol(contractAddress) {
        return this.client.callContract(contractAddress, 'symbol():(string)');
    }

    public getName(contractAddress) {
        return this.client.callContract(contractAddress, 'name():(string)');
    }

    public getDecimals(contractAddress) {
        return this.client.callContract(contractAddress, 'decimals():(uint8)');
    }

    public async getTokenInfo(contractAddress) {
        const info = await Promise.all([
            this.getSymbol(contractAddress),
            this.getName(contractAddress),
            this.getDecimals(contractAddress)
        ]);

        return {
            symbol: info[0],
            name: info[1],
            decimals: info[2]
        };
    }
}

'''
'''--- src/core/blockchain/celo/transaction.ts ---
import { EthereumTransactionUtils } from '../ethereum/transaction';
import {
    ITransferTransaction,
    IBlockchainTransaction,
    TransactionType,
    IPosTransaction,
    Contracts
} from '../types';
import { getTokenConfig } from '../../../redux/tokens/static-selectors';
import { Celo } from '.';
import { TokenType, PosBasicActionType } from '../types/token';
import { TransactionStatus } from '../../wallet/types';
import abi from 'ethereumjs-abi';
import BigNumber from 'bignumber.js';
import { keccak256 } from './library/hash';
import { encode } from './library/rlp';
import elliptic from 'elliptic';
import { fixEthAddress } from '../../utils/format-address';
import cloneDeep from 'lodash/cloneDeep';
import { splitStake } from '../../utils/balance';

const toHex = value => {
    if (value && value !== '0x') {
        const base = typeof value === 'string' && value.indexOf('0x') === 0 ? 16 : 10;

        let stringValue = new BigNumber(value, base).toString(16);
        if (stringValue.length % 2 > 0) {
            stringValue = '0' + stringValue;
        }
        return '0x' + stringValue;
    }
    return '0x';
};

export class CeloTransactionUtils extends EthereumTransactionUtils {
    public async sign(tx: IBlockchainTransaction, privateKey: string): Promise<any> {
        const txData = [
            toHex(tx.nonce),
            toHex(tx.feeOptions.gasPrice),
            toHex(tx.feeOptions.gasLimit),
            '0x', // feeCurrency
            '0x', // gatewayFeeRecipient
            '0x', // gatewayFee
            (tx.toAddress || '0x').toLowerCase(),
            tx.amount === '0' ? '0x' : toHex(tx.amount),
            (tx.data.raw || '0x').toLowerCase(),
            toHex(tx.chainId || 1)
        ];

        const encodedTx = encode(txData.concat(['0x', '0x']));
        const txHash = keccak256(encodedTx);
        const addToV = Number(tx.chainId) * 2 + 35;

        privateKey = '0x' + privateKey.replace(/^0x/gi, '').toLowerCase();

        const ecSignature = new elliptic.ec('secp256k1')
            .keyFromPrivate(Buffer.from(privateKey.replace(/^0x/gi, ''), 'hex'))
            .sign(Buffer.from(txHash.replace(/^0x/gi, ''), 'hex'), { canonical: true });

        const signature = {
            v: toHex(addToV + ecSignature.recoveryParam),
            r: '0x' + ecSignature.r.toString(16),
            s: '0x' + ecSignature.s.toString(16)
        };

        const rawTx = txData.slice(0, 9).concat([signature.v, signature.r, signature.s]);

        rawTx[9] = this.makeEven(this.trimLeadingZero(rawTx[9]));
        rawTx[10] = this.makeEven(this.trimLeadingZero(rawTx[10]));
        rawTx[11] = this.makeEven(this.trimLeadingZero(rawTx[11]));

        return encode(rawTx);
    }

    trimLeadingZero(hex: string) {
        while (hex && hex.startsWith('0x0')) {
            hex = '0x' + hex.slice(3);
        }
        return hex;
    }

    makeEven(hex: string) {
        if (hex.length % 2 === 1) {
            hex = hex.replace('0x', '0x0');
        }
        return hex;
    }

    public async buildPosTransaction(
        tx: IPosTransaction,
        transactionType: PosBasicActionType
    ): Promise<IBlockchainTransaction[]> {
        const client = Celo.getClient(tx.chainId);

        const transactions: IBlockchainTransaction[] = [];

        switch (transactionType) {
            case PosBasicActionType.DELEGATE: {
                const isRegisteredAccount = await client.contracts[
                    Contracts.ACCOUNTS
                ].isRegisteredAccount(tx.account.address);

                if (!isRegisteredAccount) {
                    const txRegister: IPosTransaction = cloneDeep(tx);
                    const transaction = await client.contracts[Contracts.ACCOUNTS].createAccount(
                        txRegister
                    );
                    transaction.nonce = transaction.nonce + transactions.length;
                    transactions.push(transaction);
                }
                const amountLocked: BigNumber = await client.contracts[
                    Contracts.LOCKED_GOLD
                ].getAccountNonvotingLockedGold(tx.account.address);
                if (!amountLocked.isGreaterThanOrEqualTo(new BigNumber(tx.amount))) {
                    const txLock: IPosTransaction = cloneDeep(tx);
                    txLock.amount = new BigNumber(tx.amount).minus(amountLocked).toString();

                    const transaction = await client.contracts[Contracts.LOCKED_GOLD].lock(txLock);
                    transaction.nonce = transaction.nonce + transactions.length;
                    transactions.push(transaction);
                }

                const splitAmount = splitStake(new BigNumber(tx.amount), tx.validators.length);

                for (const validator of tx.validators) {
                    const txVote: IPosTransaction = cloneDeep(tx);
                    txVote.amount = splitAmount.toFixed(0, BigNumber.ROUND_DOWN);
                    const transaction: IBlockchainTransaction = await client.contracts[
                        Contracts.ELECTION
                    ].vote(txVote, validator);
                    transaction.nonce = transaction.nonce + transactions.length; // increase nonce with the number of previous transactions
                    transactions.push(transaction);
                }

                break;
            }
            case PosBasicActionType.REDELEGATE: {
                const txUnvote = cloneDeep(tx);
                txUnvote.validators = [tx.extraFields.fromValidator];
                const unvoteTransactions = await this.buildPosTransaction(
                    txUnvote,
                    PosBasicActionType.UNVOTE
                );

                transactions.push(...unvoteTransactions);

                const splitAmount = new BigNumber(tx.amount).dividedBy(tx.validators.length);

                for (const validator of tx.validators) {
                    const txVote: IPosTransaction = cloneDeep(tx);
                    txVote.amount = splitAmount.toString();
                    const transaction: IBlockchainTransaction = await client.contracts[
                        Contracts.ELECTION
                    ].vote(txVote, validator);
                    transaction.nonce = transaction.nonce + transactions.length; // increase nonce with the number of previous transactions
                    transactions.push(transaction);
                }

                break;
            }
            case PosBasicActionType.ACTIVATE: {
                const groups = await client.contracts[
                    Contracts.ELECTION
                ].getGroupsVotedForByAccount(tx.account.address);

                const promises = [];
                for (const group of groups) {
                    promises.push(
                        client.contracts[Contracts.ELECTION].hasActivatablePendingVotes(
                            tx.account.address,
                            group
                        )
                    );
                }

                const res = await Promise.all(promises);

                const txActivate: IPosTransaction = cloneDeep(tx);

                for (let i = 0; i < res.length; i++) {
                    if (res[i] === true) {
                        const transaction = await client.contracts[Contracts.ELECTION].activate(
                            txActivate,
                            groups[i]
                        );
                        transaction.nonce = transaction.nonce + transactions.length; // increase nonce with the number of previous transactions
                        transactions.push(transaction);
                    }
                }

                break;
            }
            case PosBasicActionType.UNLOCK: {
                const txUnlock = cloneDeep(tx);
                const transaction = await client.contracts[Contracts.LOCKED_GOLD].unlock(txUnlock);
                if (transaction) transactions.push(transaction);
                break;
            }
            case PosBasicActionType.UNVOTE: {
                const validator = tx.validators[0];
                const groupAddress = validator.id.toLowerCase();
                const amount = new BigNumber(tx.amount);

                const groups = await client.contracts[
                    Contracts.ELECTION
                ].getGroupsVotedForByAccount(tx.account.address);
                const indexForGroup = groups.findIndex(
                    group => fixEthAddress(group) === groupAddress
                );

                const { pending } = await client.contracts[
                    Contracts.ELECTION
                ].getVotesForGroupByAccount(tx.account.address, groupAddress);

                const pendingValue = BigNumber.minimum(pending, amount);
                if (!pendingValue.isZero()) {
                    const txRevokePending: IPosTransaction = cloneDeep(tx);
                    txRevokePending.amount = pendingValue.toFixed();
                    const transactionPending = await client.contracts[
                        Contracts.ELECTION
                    ].revokePending(txRevokePending, indexForGroup);

                    if (transactionPending) {
                        transactionPending.additionalInfo.validatorName = validator.name;
                        transactions.push(transactionPending);
                    }
                }

                if (pendingValue.lt(amount)) {
                    const activeValue = amount.minus(pendingValue);
                    const txRevoke: IPosTransaction = cloneDeep(tx);
                    txRevoke.amount = activeValue.toFixed();
                    const transaction = await client.contracts[Contracts.ELECTION].revokeActive(
                        txRevoke,
                        indexForGroup
                    );

                    if (transaction) {
                        transaction.additionalInfo.validatorName = validator.name;
                        transaction.nonce = transaction.nonce + transactions.length;
                        transactions.push(transaction);
                    }
                }

                break;
            }
            case PosBasicActionType.WITHDRAW: {
                const txWithdraw = cloneDeep(tx);
                const transaction = await client.contracts[Contracts.LOCKED_GOLD].withdraw(
                    txWithdraw,
                    txWithdraw.extraFields.witdrawIndex
                );
                if (transaction) transactions.push(transaction);

                break;
            }
        }

        return transactions;
    }

    public async buildTransferTransaction(
        tx: ITransferTransaction
    ): Promise<IBlockchainTransaction> {
        const tokenConfig = getTokenConfig(tx.account.blockchain, tx.token);

        const client = Celo.getClient(tx.chainId);
        const nonce = await client.getNonce(tx.account.address, tx.account.publicKey);
        const blockInfo = await client.getCurrentBlock();
        switch (tokenConfig.type) {
            case TokenType.ERC20:
                return {
                    date: {
                        created: Date.now(),
                        signed: Date.now(),
                        broadcasted: Date.now(),
                        confirmed: Date.now()
                    },
                    blockchain: tx.account.blockchain,
                    chainId: tx.chainId,
                    type: TransactionType.TRANSFER,
                    token: tokenConfig,
                    address: tx.account.address,
                    publicKey: tx.account.publicKey,
                    toAddress: tokenConfig.contractAddress,
                    amount: '0',
                    feeOptions: tx.feeOptions,
                    broadcastedOnBlock: blockInfo?.number,
                    nonce,
                    status: TransactionStatus.PENDING,
                    data: {
                        method: 'transfer',
                        params: [tx.toAddress, tx.amount],
                        raw:
                            '0x' +
                            abi
                                .simpleEncode('transfer(address,uint256)', tx.toAddress, tx.amount)
                                .toString('hex')
                    }
                };

            // case TokenType.NATIVE:
            default:
                return {
                    date: {
                        created: Date.now(),
                        signed: Date.now(),
                        broadcasted: Date.now(),
                        confirmed: Date.now()
                    },
                    blockchain: tx.account.blockchain,
                    chainId: tx.chainId,
                    type: TransactionType.TRANSFER,
                    token: tokenConfig,
                    address: tx.account.address,
                    publicKey: tx.account.publicKey,

                    toAddress: tx.toAddress,
                    amount: tx.amount,
                    feeOptions: tx.feeOptions,
                    broadcastedOnBlock: blockInfo?.number,
                    nonce,
                    status: TransactionStatus.PENDING
                };
        }
    }
}

'''
'''--- src/core/blockchain/common/abstract-ws-client.ts ---
import { Deferred } from './../../utils/deferred';

import { IBlockchainNetwork, WsEvent } from '../types';
import { PubSub } from './pub-sub';

export abstract class AbstractWsClient {
    protected url: string;

    private ws: WebSocket;
    private wsConnectionDeferred: Deferred;
    private pubSub: PubSub<WsEvent> = new PubSub();

    constructor(networks: IBlockchainNetwork[], chainId: string) {
        this.url = networks.find(n => n.chainId === Number(chainId))?.wsUrl || '';
        this.openConnection();
    }

    private openConnection() {
        this.wsConnectionDeferred = new Deferred();
        this.ws = new WebSocket(this.url);

        this.ws.addEventListener('open', () => {
            this.wsConnectionDeferred.resolve();
        });
        this.ws.addEventListener('close', () => {
            setTimeout(() => this.reconnect(), 5000);
        });
        this.ws.addEventListener('message', msg => {
            try {
                this.onMessage(JSON.parse(msg.data));
            } catch (e) {
                //
            }
        });
        this.ws.addEventListener('error', error => {
            //
        });
    }

    private reconnect() {
        this.openConnection();
        for (const event of this.pubSub.getEvents()) {
            const meta = this.pubSub.getMeta(event);
            meta.sub && this.sendMessage(meta.sub);
        }
    }

    protected async sendMessage(msg) {
        try {
            await this.wsConnectionDeferred.promise;
            this.ws.send(JSON.stringify(msg));
        } catch (e) {
            //
        }
    }

    protected abstract onMessage(msg);

    protected emit(event: WsEvent, data: any) {
        this.pubSub.emit(event, data);
    }

    protected subscribe(
        event: WsEvent,
        wsMessage: { sub: any; unsub: any },
        cb: (data) => void
    ): () => void {
        this.sendMessage(wsMessage.sub); // subscribe
        const unsub = this.pubSub.subscribe(event, cb, wsMessage);

        return () => {
            unsub();
            if (!this.pubSub.hasSubscribers(event)) {
                this.sendMessage(wsMessage.unsub); // unsub for event
            }
        };
    }
}

'''
'''--- src/core/blockchain/common/account.ts ---
import { IBlockchainConfig } from '../types';
import { BigNumber } from 'bignumber.js';

export const convert = (
    value: BigNumber,
    fromUnit: string,
    toUnit: string,
    info: IBlockchainConfig
): BigNumber => {
    if (fromUnit === toUnit) {
        return value;
    }

    if (info) {
        const units = info.tokens[info.coin].units;
        if (units[fromUnit] && units[toUnit]) {
            return value.multipliedBy(units[fromUnit]).dividedBy(units[toUnit]);
        } else {
            throw new Error(`${fromUnit} or ${toUnit} is not configured as a unit.`);
        }
    } else {
        throw new Error(`Blockchain  is not configured.`);
    }
};

'''
'''--- src/core/blockchain/common/cryptoNameResolver.ts ---
import namehash from 'eth-ens-namehash';
import { AbiCoder } from '@ethersproject/abi';
import { simpleEncode, rawDecode } from 'ethereumjs-abi';
import { keccak256 } from '../celo/library/hash';
import { Blockchain, BlockchainNameService } from '../types';
import { getBlockchain } from '../blockchain-factory';

const chainID = {
    mainNet: 1,
    testNet: 3
};

export const cryptoNameResolver = async (
    name: string,
    service: BlockchainNameService,
    record: string[],
    mainNet: boolean = true
) => {
    const ethClient = getBlockchain(Blockchain.ETHEREUM).getClient(
        mainNet ? chainID.mainNet : chainID.testNet
    );
    const coder = new AbiCoder();
    const node = namehash.hash(name);
    const data = await ethClient.http.jsonRpc('eth_call', [
        {
            to: service,
            data: '0x' + simpleEncode('getData(string[],uint256)', [], node).toString('hex')
        },
        'latest'
    ]);
    const resolverAddress =
        '0x' +
        rawDecode(
            ['address', 'address', 'string[]'],
            Buffer.from(data.result.replace('0x', ''), 'hex')
        )[0];

    const dataFunction = 'getMany(string[],uint256)';
    const hashedDataFunction = keccak256(Buffer.from(dataFunction)).substr(2, 8);
    const addresses = await ethClient.http.jsonRpc('eth_call', [
        {
            to: resolverAddress,
            data:
                '0x' +
                hashedDataFunction +
                coder.encode(['string[]', 'uint256'], [record, node]).substr(2)
        },
        'latest'
    ]);
    const decodedAddresses = coder.decode(['string[]'], addresses.result);
    return Promise.resolve({ address: decodedAddresses[0][0] });
};

'''
'''--- src/core/blockchain/common/ethNameResolver.ts ---
import namehash from 'eth-ens-namehash';
import { simpleEncode, rawDecode } from 'ethereumjs-abi';
import { getBlockchain } from '../blockchain-factory';
import { Blockchain, BlockchainNameService, IResolveNameResponse } from '../types';

const chainID = {
    mainnet: 1,
    testnet: 3
};

export const ethNameResolver = async (
    name: string,
    service: BlockchainNameService,
    mainnet: boolean = true
): Promise<IResolveNameResponse> => {
    const ethClient = getBlockchain(Blockchain.ETHEREUM).getClient(
        mainnet ? chainID.mainnet : chainID.testnet
    );
    const node = namehash.hash(name);
    let data = await ethClient.http.jsonRpc('eth_call', [
        {
            to: service,
            data: '0x' + simpleEncode('resolver(bytes32)', node).toString('hex')
        },
        'latest'
    ]);
    const resolverAddress =
        '0x' + rawDecode(['address'], Buffer.from(data.result.replace('0x', ''), 'hex'))[0];
    data = await ethClient.http.jsonRpc('eth_call', [
        {
            to: resolverAddress,
            data: '0x' + simpleEncode('addr(bytes32)', node).toString('hex')
        },
        'latest'
    ]);
    const address =
        '0x' + rawDecode(['address'], Buffer.from(data.result.replace('0x', ''), 'hex'))[0];
    return Promise.resolve({ address });
};

'''
'''--- src/core/blockchain/common/pub-sub.ts ---
interface PubSubSubscriber {
    meta: any;
    // tslint:disable-next-line: ban-types
    callbacks: Function[];
}

export class PubSub<E = string> {
    private subscribers: Map<E, PubSubSubscriber> = new Map();

    private removeSubscriber(event, cb) {
        if (this.subscribers.has(event)) {
            const subs = this.subscribers.get(event);
            subs.callbacks.splice(subs.callbacks.indexOf(cb), 1);
        }
    }

    public emit(event: E, data: any) {
        this.subscribers.get(event)?.callbacks?.forEach(cb => {
            if (typeof cb === 'function') {
                cb(data);
            } else {
                this.removeSubscriber(event, cb);
            }
        });
    }

    public subscribe(event: E, cb: (data) => void, meta: any): () => void {
        if (!this.subscribers.has(event)) {
            this.subscribers.set(event, { meta, callbacks: [] });
        }

        this.subscribers.get(event)?.callbacks.push(cb);

        return () => {
            this.removeSubscriber(event, cb);
        };
    }

    public getEvents(): E[] {
        return Array.from(this.subscribers.keys());
    }

    public getMeta(event: E): any {
        return this.subscribers.get(event)?.meta;
    }

    public hasSubscribers(event: E): boolean {
        return this.subscribers.get(event)?.callbacks?.length > 0;
    }
}

'''
'''--- src/core/blockchain/common/zilNameResolver.ts ---
import { namehash } from '../zilliqa/name-services-utils';
import { fromBech32Address } from '@zilliqa-js/crypto';
import { getBlockchain } from '../blockchain-factory';
import { Blockchain, BlockchainNameService, IResolveNameResponse } from '../types';
import { Client as ZiliqaClient } from '../zilliqa/client';

const chainID = {
    mainNet: 1,
    testNet: 333
};

export const zilNameResolver = async (
    name: string,
    service: BlockchainNameService,
    record: string[],
    mainNet: boolean = true
): Promise<IResolveNameResponse> => {
    const zilClient = getBlockchain(Blockchain.ZILLIQA).getClient(
        mainNet ? chainID.mainNet : chainID.testNet
    ) as ZiliqaClient;
    const node = namehash(name);
    const znsFromBech = fromBech32Address(service);
    const data = await zilClient.getSmartContractSubState(znsFromBech.split('0x')[1], 'records', [
        node
    ]);
    const [, resolverAddress] = data.records[node].arguments;
    const address = await zilClient.getSmartContractSubState(resolverAddress, 'records', []);
    return Promise.resolve({ address: address.records[record[0]] });
};

'''
'''--- src/core/blockchain/cosmos/account.ts ---
import { AccountType, IAccountState } from '../../../redux/wallets/state';
import { Blockchain, IBlockchainAccountUtils } from '../types';
import { BigNumber } from 'bignumber.js';
import { config } from './config';
import { convert } from '../common/account';
import HDNode from 'hdkey';
import { bech32 } from 'bech32';
import { createHash } from 'crypto';
import secp256k1 from 'secp256k1';
import { generateTokensConfig } from '../../../redux/tokens/static-selectors';

export class CosmosAccountUtils implements IBlockchainAccountUtils {
    public getAccountDerivationPath(accountIndex: number): string {
        return `${accountIndex}`;
    }

    public getPrivateKeyFromDerived(derivedKey: HDNode): string {
        return derivedKey.privateKey.toString('hex');
    }

    public isValidChecksumAddress(address: string): boolean {
        return this.isValidAddress(address);
    }

    public isValidAddress(address: string): boolean {
        return /^cosmos1[0-9a-zA-Z]{38}$/.test(address) && bech32.decode(address) !== undefined;
    }

    public publicToAddress(publicKey: string): string {
        const sha = createHash('sha256')
            .update(Buffer.from(publicKey, 'hex'))
            .digest();
        const words = bech32.toWords(
            createHash('ripemd160')
                .update(sha)
                .digest()
        );
        return bech32.encode('cosmos', words);
    }

    public privateToPublic(privateKey: string): string {
        const bufferPrivateKey = Buffer.from(privateKey, 'hex');

        // @ts-ignore
        return secp256k1.publicKeyCreate(bufferPrivateKey, true).toString('hex');
    }

    public privateToAddress(privateKey: string): string {
        return this.publicToAddress(this.privateToPublic(privateKey));
    }

    public getAccountFromPrivateKey(privateKey: string, index: number): IAccountState {
        return {
            index,
            type: AccountType.DEFAULT,
            selected: false,
            publicKey: this.privateToPublic(privateKey),
            address: this.privateToAddress(privateKey),
            blockchain: Blockchain.COSMOS,
            tokens: generateTokensConfig(Blockchain.COSMOS)
        };
    }

    public amountToStd(value: BigNumber | number | string, decimals: number): BigNumber {
        return new BigNumber(value).multipliedBy(new BigNumber(10).pow(decimals));
    }

    public amountFromStd(value: BigNumber | number | string, decimals: number): BigNumber {
        return new BigNumber(value).dividedBy(new BigNumber(10).pow(decimals));
    }

    public convertUnit(value: BigNumber, from: string, to: string): BigNumber {
        return convert(value, from, to, config);
    }
}

'''
'''--- src/core/blockchain/cosmos/client-utils.ts ---
import { ITokenConfigState } from '../../../redux/tokens/state';
import { TransactionStatus } from '../../wallet/types';
import { IClientUtils } from '../types/client-utils';

export class ClientUtils implements IClientUtils {
    getTransaction(hash: string): Promise<import('../types').IBlockchainTransaction<any>> {
        throw new Error('Method not implemented.');
    }

    // TODO: fix this in order to use Sign Transaction(s) Screen
    async getTransactionStatus(
        hash: string,
        context: { txData?: any; currentBlockNumber?: number; token?: ITokenConfigState }
    ): Promise<TransactionStatus> {
        return Promise.reject('Cosmos ClientUtils.getTransactionStatus() not impelmented');
    }
}

'''
'''--- src/core/blockchain/cosmos/client.ts ---
import {
    BlockchainGenericClient,
    ChainIdType,
    IBlockInfo,
    TransactionType,
    IBalance,
    TypedTransaction
} from '../types';
import { BigNumber } from 'bignumber.js';
import { networks } from './networks';
import { config } from './config';
import { NameService } from './name-service';
import { TokenType } from '../types/token';
import { ClientUtils } from './client-utils';

export class Client extends BlockchainGenericClient {
    constructor(chainId: ChainIdType) {
        super(chainId, networks);
        this.nameService = new NameService(this);
        this.utils = new ClientUtils();
    }

    public async getBalance(address: string): Promise<IBalance> {
        try {
            const symbolMap = config.tokens[config.coin].symbolMap;
            let denom = config.defaultUnit.toLowerCase();
            if (symbolMap !== undefined) {
                Object.keys(symbolMap).map(key => {
                    if (key === this.chainId) {
                        denom = symbolMap[key];
                    }
                });
            }
            const res = await this.http.get('/bank/balances/' + address);
            if (res.result) {
                return {
                    total: new BigNumber(res.result.filter(i => i.denom === denom)[0]?.amount),
                    available: new BigNumber(0)
                };
            }
        } catch {
            return { total: new BigNumber(0), available: new BigNumber(0) };
        }
    }

    public async getAccountInfo(
        address: string
    ): Promise<{ account_number: string; sequence: number }> {
        try {
            const res = await this.http.get('/auth/accounts/' + address);
            if (res.result) {
                return {
                    account_number: res.result.value.account_number,
                    sequence: res.result.value.sequence
                };
            }
        } catch {
            return Promise.reject();
        }
    }

    public async getNonce(address: string, publicKey: string): Promise<number> {
        try {
            const res = await this.http.get('/auth/accounts/' + address);
            return res.result.sequence;
        } catch {
            return 0;
        }
    }

    public async getCurrentBlock(): Promise<IBlockInfo> {
        try {
            const response = await this.http.get('/blocks/latest');
            return {
                hash: response?.block_meta?.block_id?.hash,
                number: response?.block_meta?.header?.height
            };
        } catch (result) {
            return Promise.reject(result);
        }
    }

    public async sendTransaction(transaction): Promise<{ txHash: string; rawResponse: any }> {
        return this.http.post('/txs', transaction).then(res => {
            if (res.code === undefined) {
                return {
                    txHash: res.txhash,
                    rawResponse: res
                };
            } else {
                return Promise.reject('COSMOS_ERROR_' + res.code);
            }
        });
    }

    public async getFees(
        transactionType: TransactionType,

        data: {
            from?: string;
            to?: string;
            amount?: string;
            contractAddress?: string;
            raw?: string;
        },
        typedTransaction: TypedTransaction = TypedTransaction.TYPE_0,
        tokenType: TokenType = TokenType.NATIVE
    ) {
        const gasPrice =
            config.feeOptions.defaults.gasPricePresets.low.gasPrice ||
            config.feeOptions.defaults.gasPrice;
        const gasLimit = config.feeOptions.defaults.gasLimit[tokenType].toFixed();
        const feeTotal = gasPrice.multipliedBy(new BigNumber(gasLimit)).toFixed();

        return {
            gasPrice: gasPrice.toFixed(),
            gasLimit,
            presets: config.feeOptions.defaults.gasPricePresets,
            feeTotal
        };
    }

    public async getMinimumAmountDelegate(): Promise<BigNumber> {
        return new BigNumber(0);
    }
}

'''
'''--- src/core/blockchain/cosmos/config.ts ---
import { IBlockchainConfig, DerivationType, TypedTransaction } from '../types';
import { BigNumber } from 'bignumber.js';
import { TokenType, TokenScreenComponentType, PosBasicActionType } from '../types/token';
import CosmosIcon from '../../../assets/icons/blockchains/cosmos.svg';
import { ITokenConfigState } from '../../../redux/tokens/state';
import { IconValues } from '../../../components/icon/values';
import { AffiliateBannerType } from '../../../components/affiliate-banner/types';
import { AccountType } from '../../../redux/wallets/state';
import { Platform } from 'react-native';

export const ATOM_NATIVE: ITokenConfigState = {
    name: 'Atom',
    symbol: 'ATOM',
    icon: {
        iconComponent: CosmosIcon
    },
    removable: false,
    defaultOrder: 0,
    decimals: 6,
    ui: {
        decimals: 3,
        tokenScreenComponent: Platform.select({
            default: TokenScreenComponentType.DELEGATE,
            web: TokenScreenComponentType.DEFAULT
        })
    },
    type: TokenType.NATIVE,
    units: {
        UATOM: new BigNumber(1),
        ATOM: new BigNumber(Math.pow(10, 6))
    },
    symbolMap: {
        'gaia-13007': 'umuon'
    }
};

export const accountCTA = {
    mainCta: {
        title: 'App.labels.quickDelegate',
        iconName: IconValues.VOTE,
        navigateTo: {
            screen: 'PosQuickDelegate',
            params: { actionText: 'App.labels.delegate' }
        }
    }
};

const validatorCTA = {
    mainCta: {
        title: 'App.labels.delegate',
        iconName: IconValues.VOTE,
        navigateTo: {
            screen: 'PosDelegate',
            params: { actionText: 'App.labels.delegate' }
        }
    },
    otherCtas: [
        {
            title: 'App.labels.claimReward',
            iconName: IconValues.CLAIM_REWARD,
            navigateTo: {
                screen: 'PosBasicAction',
                params: {
                    actionText: 'App.labels.claimReward',
                    basicAction: PosBasicActionType.CLAIM_REWARD
                }
            }
        },
        {
            title: 'App.labels.reinvest',
            iconName: IconValues.REINVEST,
            navigateTo: {
                screen: 'PosBasicAction',
                params: {
                    actionText: 'App.labels.reinvest',
                    basicAction: PosBasicActionType.REINVEST
                }
            }
        },
        {
            title: 'App.labels.redelegate',
            iconName: IconValues.REVOTE,
            navigateTo: {
                screen: 'PosRedelegate',
                params: { actionText: 'App.labels.redelegate' }
            }
        },
        {
            title: 'App.labels.undelegate',
            iconName: IconValues.UNVOTE,
            navigateTo: {
                screen: 'PosBasicAction',
                params: {
                    actionText: 'App.labels.undelegate',
                    basicAction: PosBasicActionType.UNDELEGATE,
                    unlockDays: '21 days'
                }
            }
        }
    ]
};

export const config: IBlockchainConfig = {
    derivationPath: `m/44'/118'/0'/0`,
    derivationType: DerivationType.HD_KEY,
    coin: 'ATOM',
    defaultUnit: 'UATOM',
    iconComponent: CosmosIcon,
    droppedTxBlocksThreshold: 10,
    autoAddedTokensSymbols: {},
    tokens: {
        ATOM: ATOM_NATIVE
    },
    typedTransaction: {
        HD: TypedTransaction.TYPE_0,
        HW: TypedTransaction.TYPE_0
    },
    feeOptions: {
        gasPriceToken: 'ATOM',
        defaults: {
            gasPrice: new BigNumber(1),
            gasLimit: {
                [TokenType.NATIVE]: new BigNumber(100000)
            },
            gasPricePresets: {
                low: { gasPrice: new BigNumber(0.0025) },
                medium: { gasPrice: new BigNumber(0.025) }
            }
        },
        ui: {
            availableTokenTypes: [],
            feeComponent: 'FeePresets',
            gasPriceUnit: 'UATOM',
            defaultPreset: 'medium'
        }
    },
    ui: {
        validator: {
            totalLabel: 'Validator.totalDelegated',
            amountCardLabel: 'Validator.delegation'
        },
        token: {
            labels: {
                tabAccount: 'App.labels.account',
                tabDelegations: 'App.labels.delegations',
                tabValidators: 'App.labels.validators',
                tabTransactions: 'App.labels.transactions'
            },
            actionScreenLabels: {},
            sendStepLabels: [
                'Validator.selectValidator',
                'App.labels.enterAmount',
                'Validator.confirmStake'
            ],
            accountCTA,
            delegationCTA: {
                mainCta: accountCTA.mainCta
            },
            validatorCTA
        },
        addressDisplay: 'stripped',
        enableTokenManagement: false,
        enableAccountCreation: false,
        maxAccountsNumber: 5,
        extraFields: ['Memo'],
        displayName: 'COSMOS',
        affiliateBanners: {
            account: AffiliateBannerType.LEDGER_NANO_X
        },
        fetchAccountStatsSec: 5
    },
    networks: {
        testNet: 'gaia-13007',
        mainNet: 'cosmoshub-3'
    },
    defaultOrder: 3,
    amountToKeepInAccount: {
        [AccountType.DEFAULT]: new BigNumber(0)
    }
};

'''
'''--- src/core/blockchain/cosmos/index.ts ---
import { config } from './config';
import { networks } from './networks';
import { Client } from './client';
import { CosmosTransactionUtils } from './transaction';
import { CosmosAccountUtils } from './account';

import { IBlockchain, ChainIdType, Contracts } from '../types';
import { Stats } from './stats';

const account = new CosmosAccountUtils();
const transaction = new CosmosTransactionUtils();
const clients = {};

export const Cosmos: IBlockchain = {
    config,
    networks,
    transaction,
    account,
    Client,
    getStats: (chainId: ChainIdType) => new Stats(new Client(chainId), config),
    getClient: (chainId: ChainIdType) => {
        if (!clients[chainId]) {
            clients[chainId] = new Client(chainId);
        }
        return clients[chainId];
    },
    getContract: async (chainId: ChainIdType, contractType: Contracts) => {
        return undefined;
    }
};

'''
'''--- src/core/blockchain/cosmos/name-service.ts ---
import { IResolveTextResponse, ResolveTextType, ResolveTextCode, ResolveTextError } from '../types';
import { GenericNameService, IResolveNameResponse } from '../types/name-service';
import { Cosmos } from '.';

export class NameService extends GenericNameService {
    constructor(client) {
        super(client);
    }
    public resolveText(text: string): Promise<IResolveTextResponse> {
        const validAddress = Cosmos.account.isValidAddress(text);
        const validChecksumAddress = Cosmos.account.isValidChecksumAddress(text);

        if (validAddress) {
            return Promise.resolve({
                code: validChecksumAddress ? ResolveTextCode.OK : ResolveTextCode.WARN_CHECKSUM,
                type: ResolveTextType.ADDRESS,
                address: text,
                name: ''
            });
        } else {
            return Promise.reject({
                error: ResolveTextError.INVALID
            });
        }
    }

    public resolveName(text: string): Promise<IResolveNameResponse> {
        return Promise.resolve({ address: text });
    }
}

'''
'''--- src/core/blockchain/cosmos/networks.ts ---
import { IBlockchainNetwork } from '../types';

export const networks: IBlockchainNetwork[] = [
    {
        name: 'Main Network',
        chainId: 'cosmoshub-3',
        mainNet: true,
        url: 'https://api.cosmos.network',
        explorer: {
            name: 'Mintscan',
            getAccountUrl: addr => `https://www.mintscan.io/account/${addr}`,
            getTransactionUrl: txn => `https://www.mintscan.io/txs/${txn}`
        }
    },
    {
        name: 'Testnet',
        chainId: 'gaia-13007',
        mainNet: false,
        url: 'http://testwallet.syncnode.ro:1317',
        explorer: {
            name: 'Gaia Stake',
            getAccountUrl: addr => `https://gaia.stake.id/?#/address/${addr}`,
            getTransactionUrl: txn => `https://gaia.stake.id/?#/tx/${txn}`
        }
    }
];

'''
'''--- src/core/blockchain/cosmos/stats.ts ---
import { GenericStats, IStatValueType, AccountStats, IValidator, IStatValue } from '../types/stats';
import { Client } from './client';
import { Blockchain } from '../types/blockchain';
import BigNumber from 'bignumber.js';
import { IAccountState, ITokenState } from '../../../redux/wallets/state';
import { IconValues } from '../../../components/icon/values';

export class Stats extends GenericStats<Client> {
    public async getAccountDelegateStats(
        account: IAccountState,
        token: ITokenState
    ): Promise<AccountStats> {
        return {
            topStats: topStatsValues,
            chartStats: chartStatsValues,
            secondaryStats: secondaryStatsValues,
            totalAmount: new BigNumber(0),
            widgets: []
        };
    }
}

// dummy data for stats

export const secondaryStatsValues = [
    {
        title: 'Daily',
        color: '#6A6A6A',
        type: IStatValueType.AMOUNT,
        data: {
            value: '0.1200000',
            tokenSymbol: 'ATOM',
            blockchain: Blockchain.COSMOS
        }
    },
    {
        title: 'Monthly',
        color: '#6A6A6A',
        type: IStatValueType.AMOUNT,
        data: {
            value: '3.60000',
            tokenSymbol: 'ATOM',
            blockchain: Blockchain.COSMOS
        }
    },
    {
        title: 'Yearly',
        color: '#6A6A6A',
        type: IStatValueType.AMOUNT,
        data: {
            value: '43.200000',
            tokenSymbol: 'ATOM',
            blockchain: Blockchain.COSMOS
        }
    }
];

export const chartStatsValues: IStatValue[] = [
    {
        title: 'Available',
        color: '#9A99A2',
        type: IStatValueType.AMOUNT,
        icon: IconValues.MONEY_WALLET,
        data: {
            value: '1000.00',
            tokenSymbol: 'ATOM',
            blockchain: Blockchain.COSMOS
        }
    },
    {
        title: 'Undelegated',
        color: '#FFAB91',
        type: IStatValueType.AMOUNT,
        icon: IconValues.KEY_LOCK,
        data: {
            value: '1500.00',
            tokenSymbol: 'ATOM',
            blockchain: Blockchain.COSMOS
        }
    },
    {
        title: 'Delegated',
        color: '#00DAFF',
        type: IStatValueType.AMOUNT,
        icon: IconValues.VOTE,
        data: {
            value: '10000.00',
            tokenSymbol: 'ATOM',
            blockchain: Blockchain.COSMOS
        }
    },
    {
        title: 'Reward',
        color: '#00E676',
        type: IStatValueType.AMOUNT,
        icon: IconValues.CLAIM_REWARD,
        data: {
            value: '700.00',
            tokenSymbol: 'ATOM',
            blockchain: Blockchain.COSMOS
        }
    }
];

export const topStatsValues: IStatValue[] = [
    {
        title: 'No. of Validators',
        color: '#FFFFFF',
        type: IStatValueType.STRING,
        data: {
            value: '4'
        }
    },
    {
        title: 'Avg. Commission',
        color: '#FFFFFF',
        type: IStatValueType.STRING,
        data: {
            value: '10.00%'
        }
    },
    {
        title: 'Avg. Reward',
        color: '#00E676',
        type: IStatValueType.STRING,
        data: {
            value: '8.64%'
        }
    }
];

export const moonletValidator: IValidator = {
    id: 'moonletID',
    icon: 'https://thecelo.com/logos/0x8851f4852ce427191dc8d9065d720619889e3260.jpg',
    name: 'Moonlet',
    rank: '10th',
    totalVotes: '120000',
    amountDelegated: {
        pending: '0',
        active: '0'
    },
    website: 'http://moonlet.io',
    topStats: topStatsValues,
    secondaryStats: secondaryStatsValues,
    chartStats: chartStatsValues
};

export const chainLayerValidator: IValidator = {
    id: 'chainLayerId',
    icon: 'https://thecelo.com/logos/0x4fc4ea624db2e4a1d6195a03744d505cbcd9431b.jpg',
    name: 'ChainLayer',
    rank: '10th',
    totalVotes: '220000',
    amountDelegated: {
        pending: '0',
        active: '0'
    },
    website: 'http://chainlayer.io',
    topStats: topStatsValues,
    secondaryStats: secondaryStatsValues,
    chartStats: chartStatsValues
};

'''
'''--- src/core/blockchain/cosmos/transaction.ts ---
import {
    IBlockchainTransaction,
    ITransferTransaction,
    TransactionType,
    AbstractBlockchainTransactionUtils
} from '../types';
import secp256k1 from 'secp256k1/elliptic';
import { createHash } from 'crypto';
import { TransactionStatus } from '../../wallet/types';
import { config } from './config';
import { Client as CosmosClient } from './client';
import { Cosmos } from '.';
import { BigNumber } from 'bignumber.js';
import { sortObject } from '../../utils/sort-object';
import { getTokenConfig } from '../../../redux/tokens/static-selectors';

export class CosmosTransactionUtils extends AbstractBlockchainTransactionUtils {
    public async sign(tx: IBlockchainTransaction, privateKey: string): Promise<any> {
        const hash = createHash('sha256')
            .update(JSON.stringify(sortObject(tx.additionalInfo.stdSignMsg)))
            .digest('hex');
        const buf = Buffer.from(hash, 'hex');
        const bufferPrivateKey = Buffer.from(privateKey, 'hex');

        const signObj = secp256k1.sign(buf, bufferPrivateKey);
        const signatureBase64 = Buffer.from(signObj.signature, 'binary').toString('base64');
        const publicBase64 = Buffer.from(tx.publicKey, 'hex').toString('base64');

        const signedTx = {
            tx: {
                msg: tx.additionalInfo.stdSignMsg.msgs,
                fee: tx.additionalInfo.stdSignMsg.fee,
                signatures: [
                    {
                        signature: signatureBase64,
                        pub_key: {
                            type: 'tendermint/PubKeySecp256k1',
                            value: publicBase64
                        }
                    }
                ],
                memo: tx.additionalInfo.memo
            },
            // The supported return types includes "block"(return after tx commit), "sync"(return afer CheckTx) and "async"(return right away).
            mode: 'sync'
        };
        return signedTx;
    }

    public async buildTransferTransaction(
        tx: ITransferTransaction
    ): Promise<IBlockchainTransaction> {
        const client = Cosmos.getClient(tx.chainId) as CosmosClient;
        const accountInfo = await client.getAccountInfo(tx.account.address);
        const blockInfo = await client.getCurrentBlock();
        let denom = config.defaultUnit.toLowerCase();
        const symbolMap = config.tokens[tx.chainId][config.coin].symbolMap;
        if (symbolMap !== undefined) {
            Object.keys(symbolMap).map(key => {
                if (key === tx.chainId) {
                    denom = symbolMap[key];
                }
            });
        }

        const gasAmount = new BigNumber(tx.feeOptions.gasPrice).multipliedBy(
            tx.feeOptions.gasLimit
        );

        const stdSignMsg = {
            msgs: [
                {
                    type: 'cosmos-sdk/MsgSend',
                    value: {
                        amount: [
                            {
                                amount: tx.amount, // 6 decimal places (1000000 uatom = 1 ATOM)
                                denom
                            }
                        ],
                        from_address: tx.account.address,
                        to_address: tx.toAddress
                    }
                }
            ],
            fee: {
                amount: [{ amount: gasAmount.toString(), denom }],
                gas: tx.feeOptions.gasLimit
            },
            memo: '',
            chain_id: tx.chainId,
            account_number: accountInfo.account_number,
            sequence: accountInfo.sequence
        };

        const tokenConfig = getTokenConfig(tx.account.blockchain, tx.token);

        return {
            date: {
                created: Date.now(),
                signed: Date.now(),
                broadcasted: Date.now(),
                confirmed: Date.now()
            },
            blockchain: tx.account.blockchain,
            chainId: tx.chainId,
            type: TransactionType.TRANSFER,
            token: tokenConfig,
            address: tx.account.address,
            publicKey: tx.account.publicKey,
            toAddress: tx.toAddress,
            amount: tx.amount,
            feeOptions: tx.feeOptions,
            broadcastedOnBlock: blockInfo?.number,
            nonce: accountInfo.sequence,
            status: TransactionStatus.PENDING,
            additionalInfo: {
                account_number: accountInfo.account_number,
                memo: tx.extraFields.memo,
                stdSignMsg
            }
        };
    }

    public getTransactionAmount(tx: IBlockchainTransaction): string {
        return tx.amount;
    }
    public getTransactionStatusByCode(status: any): TransactionStatus {
        switch (parseInt(status, 16)) {
            case 0:
                return TransactionStatus.FAILED;
            case 1:
                return TransactionStatus.SUCCESS;
            case 2:
                return TransactionStatus.PENDING;
            default:
                return TransactionStatus.FAILED;
        }
    }
}

'''
'''--- src/core/blockchain/ethereum/__tests__/account.test.ts ---
import { Ethereum } from '../';
import * as Util from 'ethereumjs-util';

jest.mock('ethereumjs-util', () => {
    const util = jest.requireActual('ethereumjs-util');
    return {
        ...util,
        privateToPublic: jest.fn().mockReturnValue('PUBLIC_KEY'),
        privateToAddress: jest.fn().mockReturnValue('address'),
        toChecksumAddress: jest.fn().mockReturnValue('ADDRESS'),
        publicToAddress: jest.fn().mockReturnValue('address'),
        isValidChecksumAddress: jest.fn().mockReturnValue(true),
        isValidAddress: jest.fn().mockReturnValue(true)
    };
});

const clearMocks = () => {
    // @ts-ignore
    Util.privateToPublic.mockClear();
    // @ts-ignore
    Util.privateToAddress.mockClear();
    // @ts-ignore
    Util.toChecksumAddress.mockClear();
    // @ts-ignore
    Util.publicToAddress.mockClear();
    // @ts-ignore
    Util.isValidChecksumAddress.mockClear();
    // @ts-ignore
    Util.isValidAddress.mockClear();
};

describe('Ethereum account', () => {
    beforeEach(() => {
        clearMocks();
    });

    test('isValidChecksumAddress()', () => {
        // expect(Ethereum.account.isValidChecksumAddress('ADDRESS')).toBe(true);
        // expect(Util.isValidChecksumAddress).toBeCalledWith('ADDRESS');
        expect('1').toEqual('1');
    });

    // test('isValidAddress()', () => {
    //     expect(Ethereum.account.isValidAddress('ADDRESS')).toBe(true);
    //     expect(Util.isValidAddress).toBeCalledWith('ADDRESS');
    // });

    // test('publicToAddress()', () => {
    //     expect(Ethereum.account.publicToAddress('PUBLIC_KEY')).toBe('ADDRESS');
    //     expect(Util.publicToAddress).toBeCalledWith(Buffer.from('PUBLIC_KEY', 'hex'));
    //     expect(Util.toChecksumAddress).toBeCalledWith('address');
    // });

    // test('privateToPublic()', () => {
    //     expect(Ethereum.account.privateToPublic('PRIVATE_KEY')).toBe('PUBLIC_KEY');
    //     expect(Util.privateToPublic).toBeCalledWith(Buffer.from('PRIVATE_KEY', 'hex'));
    // });

    // test('privateToAddress()', () => {
    //     expect(Ethereum.account.privateToAddress('PRIVATE_KEY')).toBe('ADDRESS');
    //     expect(Util.privateToAddress).toBeCalledWith(Buffer.from('PRIVATE_KEY', 'hex'));
    //     expect(Util.toChecksumAddress).toBeCalledWith('address');
    // });

    // test('getAccountFromPrivateKey()', () => {
    //     // valid private key
    //     const result = Ethereum.account.getAccountFromPrivateKey('PRIVATE_KEY', 1);
    //     expect(Util.privateToPublic).toBeCalledWith(Buffer.from('PRIVATE_KEY', 'hex'));
    //     expect(Util.privateToAddress).toBeCalledWith(Buffer.from('PRIVATE_KEY', 'hex'));
    //     expect(Util.toChecksumAddress).toBeCalledWith('address');

    //     expect(result).toMatchSnapshot();

    //     // TODO: test with invalid privatekey, without mocks
    // });
});

'''
'''--- src/core/blockchain/ethereum/__tests__/client.test.ts ---
import { Ethereum } from '../';
import BigNumber from 'bignumber.js';

jest.mock('../../../utils/http-client', () => ({
    HttpClient: class {
        public rpcResult = Promise.resolve();

        public jsonRpc() {
            return this.rpcResult;
        }

        public setRpcResult(value) {
            this.rpcResult = value;
        }
    }
}));

describe('Ethereum client', () => {
    test('getBalance', async () => {
        // const client = Ethereum.getClient(1);

        // // @ts-ignore
        // client.http.setRpcResult(
        //     Promise.resolve({
        //         result: '0x123'
        //     })
        // );
        // expect(await client.getBalance('ADDR')).toEqual(new BigNumber('0x123', 16));

        // // @ts-ignore
        // client.http.setRpcResult(Promise.reject('ERROR'));
        // try {
        //     await client.getBalance('ADDR');
        // } catch (e) {
        //     expect(e).toBe('ERROR');
        // }
        // expect.assertions(2);
        expect('1').toEqual('1');
    });

    // test('getNonce', () => {
    //     const client = Ethereum.getClient(1);
    //     expect(() => client.getNonce('addr')).toThrow();
    // });
});

'''
'''--- src/core/blockchain/ethereum/__tests__/index.test.ts ---
import { Ethereum } from '../';

describe('Ethereum', () => {
    test('client getter', () => {
        // expect(Ethereum.getClient(1)).toBeInstanceOf(Ethereum.Client);
        expect('1').toEqual('1');
    });
});

'''
'''--- src/core/blockchain/ethereum/account.ts ---
import { AccountType, IAccountState } from '../../../redux/wallets/state';
import { Blockchain, IBlockchainAccountUtils } from '../types';
import * as Util from 'ethereumjs-util';
import { BigNumber } from 'bignumber.js';
import { convert } from '../common/account';
import { config } from './config';
import HDNode from 'hdkey';
import { generateTokensConfig } from '../../../redux/tokens/static-selectors';

export class EthereumAccountUtils implements IBlockchainAccountUtils {
    public getAccountDerivationPath(accountIndex: number): string {
        return `${accountIndex}`;
    }

    public getPrivateKeyFromDerived(derivedKey: HDNode): string {
        return derivedKey.privateKey.toString('hex');
    }

    public isValidChecksumAddress(address: string): boolean {
        return Util.isValidChecksumAddress(address);
    }

    public isValidAddress(address: string): boolean {
        return Util.isValidAddress(address);
    }

    public publicToAddress(publicKey: string): string {
        return Util.toChecksumAddress(
            Util.publicToAddress(Buffer.from(publicKey, 'hex')).toString('hex')
        );
    }

    public privateToPublic(privateKey: string): string {
        return Util.privateToPublic(Buffer.from(privateKey, 'hex')).toString('hex');
    }

    public privateToAddress(privateKey: string): string {
        return Util.toChecksumAddress(
            Util.privateToAddress(Buffer.from(privateKey, 'hex')).toString('hex')
        );
    }

    public getAccountFromPrivateKey(privateKey: string, index: number): IAccountState {
        return {
            index,
            type: AccountType.DEFAULT,
            selected: false,
            publicKey: this.privateToPublic(privateKey),
            address: this.privateToAddress(privateKey),
            blockchain: Blockchain.ETHEREUM,
            tokens: generateTokensConfig(Blockchain.ETHEREUM)
        };
    }

    public amountToStd(value: BigNumber | number | string, decimals: number): BigNumber {
        return new BigNumber(value).multipliedBy(new BigNumber(10).pow(decimals));
    }

    public amountFromStd(value: BigNumber | number | string, decimals: number): BigNumber {
        return new BigNumber(value).dividedBy(new BigNumber(10).pow(decimals));
    }

    public convertUnit(value: BigNumber, from: string, to: string): BigNumber {
        return convert(value, from, to, config);
    }
}

'''
'''--- src/core/blockchain/ethereum/client-utils.ts ---
import { IClientUtils } from '../types/client-utils';
import { Client } from './client';
import { IBlockchainTransaction, Blockchain, TransactionType } from '../types';
import { ITokenConfigState } from '../../../redux/tokens/state';
import { TokenType, TokenScreenComponentType } from '../types/token';
import { config } from './config';
import abi from 'ethereumjs-abi';
import { Ethereum } from '.';
import { TransactionStatus } from '../../wallet/types';
import {
    captureException as SentryCaptureException,
    addBreadcrumb as SentryAddBreadcrumb
} from '@sentry/react-native';
import { MethodSignature } from './types';

export class ClientUtils implements IClientUtils {
    constructor(private client: Client) {}
    getTransaction(hash: string, options?: { address?: string }): Promise<IBlockchainTransaction> {
        const rpcCalls = [
            this.client.http.jsonRpc('eth_getTransactionByHash', [hash]),
            this.client.http.jsonRpc('eth_getTransactionReceipt', [hash])
        ];

        return Promise.all(rpcCalls).then(async res => {
            if (!res[0].result) {
                throw new Error(
                    res[0]?.error?.message || `Error getting transaction info for ${hash}`
                );
            }
            if (!res[1].result) {
                throw new Error(
                    res[1]?.error?.message || `Error getting transaction receipt for ${hash}`
                );
            }

            return this.buildTransactionFromBlockchain(res[0].result, res[1].result);
        });
    }

    async getTransactionStatus(
        hash: string,
        context: {
            address?: string;
            txData?: any;
            broadcastedOnBlock?: number;
            currentBlockNumber?: number;
            token?: ITokenConfigState;
        }
    ): Promise<TransactionStatus> {
        let status = TransactionStatus.PENDING;

        try {
            if (context?.txData?.status) {
                status = Ethereum.transaction.getTransactionStatusByCode(context.txData.status);
            } else if (context?.address) {
                const tx = await this.getTransaction(hash);
                status = tx.status;
            }
        } catch (error) {
            // tx not present
            try {
                const txFromBlockchain = await this.client.http.jsonRpc(
                    'eth_getTransactionByHash',
                    [hash]
                );

                if (
                    txFromBlockchain?.result?.blockHash === null &&
                    txFromBlockchain?.result?.blockNumber === null
                ) {
                    status = TransactionStatus.PENDING;
                } else {
                    let currentBlockNumber = context?.currentBlockNumber;
                    if (!currentBlockNumber) {
                        currentBlockNumber = await this.client
                            .getCurrentBlock()
                            .then(res => res.number);
                    }

                    if (
                        currentBlockNumber &&
                        context?.broadcastedOnBlock &&
                        currentBlockNumber - context?.broadcastedOnBlock > 5
                    ) {
                        status = TransactionStatus.DROPPED;
                    }
                }
            } catch (error) {
                SentryAddBreadcrumb({
                    message: JSON.stringify({ error })
                });

                SentryCaptureException(
                    new Error(`Failed to getTransaction status NEAR ${error?.code}`)
                );
            }
        }

        return status;
    }

    async buildTransactionFromBlockchain(txInfo, txReceipt) {
        const token = await this.getToken(txInfo.to);
        const data: any = {};

        if (token.type === TokenType.ERC20) {
            try {
                const transferInputParameteres = this.decodeInputData(
                    this.getMethodSignatureString(txInfo.input),
                    txInfo.input
                );
                if (transferInputParameteres[0] && transferInputParameteres[1]) {
                    data.params = [
                        '0x' + transferInputParameteres[0],
                        transferInputParameteres[1].toString(10)
                    ];
                } else {
                    throw new Error('Cannot decode input data');
                }
            } catch (e) {
                // probably not a transaction
                return null;
            }
        }

        let feeOptions;

        feeOptions = {
            gasPrice: txInfo.gasPrice,
            gasLimit: txInfo.gas,
            feeTotal: txReceipt.gasUsed
        };

        if (txInfo.maxFeePerGas) {
            feeOptions = {
                ...feeOptions,
                maxFeePerGas: txInfo.maxFeePerGas
            };
        }
        if (txInfo.maxPriorityFeePerGas) {
            feeOptions = {
                ...feeOptions,
                maxPriorityFeePerGas: txInfo.maxPriorityFeePerGas
            };
        }

        return {
            id: txInfo.hash,
            date: {
                created: Date.now(),
                signed: Date.now(),
                broadcasted: Date.now(),
                confirmed: Date.now()
            },
            blockchain: Blockchain.ETHEREUM,
            chainId: this.client.chainId,
            type: TransactionType.TRANSFER,

            address: txInfo.from,
            publicKey: '', // TODO: get publicKey form vrs

            toAddress: txInfo.to,
            amount: txInfo.value,
            data,
            feeOptions,
            broadcastedOnBlock: txInfo.blockNumber,
            nonce: txInfo.nonce,
            status: Ethereum.transaction.getTransactionStatusByCode(txReceipt.status),
            token
        };
    }

    async getToken(toAddress: string): Promise<ITokenConfigState> {
        const token = await this.client.tokens[TokenType.ERC20].getTokenInfo(toAddress).catch(e => {
            // not a contract
            return null;
        });

        if (!(token && token.name && token.symbol)) {
            return config.tokens.ETH;
        }

        token.type = TokenType.ERC20;
        token.ui = {
            decimals: token.decimals,
            tokenScreenComponent: TokenScreenComponentType.DEFAULT
        };

        return token;
    }

    getMethodSignatureString(data: string) {
        const methodNameHex = data.substring(2, 10);

        switch (methodNameHex) {
            case abi.methodID('approve', ['address', 'uint256']).toString('hex'):
                return MethodSignature.INCREASE_ALLOWANCE;
            case abi.methodID('delegate', ['address', 'uint256']).toString('hex'):
                return MethodSignature.DELEGATE;
            case abi.methodID('undelegate', ['address', 'uint256']).toString('hex'):
                return MethodSignature.UNDELEGATE;
            case abi.methodID('withdrawDelegated', ['address', 'address']).toString('hex'):
                return MethodSignature.WITHDRAW_DELEGATED;
            case abi.methodID('transfer', ['address', 'uint256']).toString('hex'):
                return MethodSignature.TRANSFER;

            default:
                return MethodSignature.TRANSFER;
        }
    }

    decodeInputData(signature: string, data: string) {
        const sig = signature.split(':');
        const sigParts = sig[0].split('(');
        const methodName = sigParts[0];
        let params = [];
        if (sigParts[1]) {
            params = sigParts[1]
                .replace(')', '')
                .split(',')
                .map(p => p.trim());
        }

        const methodId = abi.methodID(methodName, params).toString('hex');
        data = data.replace('0x', '');

        if (data.indexOf(methodId) === 0) {
            const rawParamsData = data.substr(methodId.length);
            return abi.rawDecode(params, Buffer.from(rawParamsData, 'hex'));
        } else {
            throw new Error('Cannot decode data');
        }
    }
}

'''
'''--- src/core/blockchain/ethereum/client.ts ---
import {
    BlockchainGenericClient,
    ChainIdType,
    IBlockInfo,
    TransactionMessageText,
    TransactionType,
    IBalance,
    IFeeOptions,
    Contracts,
    ITransactionFees,
    TypedTransaction
} from '../types';
import { networks } from './networks';
import { BigNumber } from 'bignumber.js';
import { config } from './config';
import abi from 'ethereumjs-abi';
import { Erc20Client } from './tokens/erc20-client';
import { TokenType } from '../types/token';
import { NameService } from './name-service';
import { ClientUtils } from './client-utils';
import { Ethereum } from '.';
import { fixEthAddress } from '../../utils/format-address';
import CONFIG from '../../../config';
import { HttpClient } from '../../utils/http-client';
import {
    captureException as SentryCaptureException,
    addBreadcrumb as SentryAddBreadcrumb
} from '@sentry/react-native';
import { Staking } from './contracts/staking';
import { MethodSignature } from './types';
import { getContract } from './contracts/base-contract';
import { ApiClient } from '../../utils/api-client/api-client';

export class Client extends BlockchainGenericClient {
    constructor(chainId: ChainIdType) {
        super(chainId, networks);
        this.tokens[TokenType.ERC20] = new Erc20Client(this);
        this.nameService = new NameService(this);
        this.utils = new ClientUtils(this);
        this.contracts[Contracts.STAKING] = new Staking(this);
    }

    public async getBalance(address: string): Promise<IBalance> {
        return this.http.jsonRpc('eth_getBalance', [fixEthAddress(address), 'latest']).then(res => {
            return {
                total: new BigNumber(res.result, 16),
                available: new BigNumber(res.result, 16)
            };
        });
    }

    public getNonce(address: string): Promise<number> {
        return this.http
            .jsonRpc('eth_getTransactionCount', [fixEthAddress(address), 'latest'])
            .then(res => {
                return new BigNumber(res.result, 16).toNumber();
            });
    }

    public sendTransaction(transaction): Promise<{ txHash: string; rawResponse: any }> {
        return this.http.jsonRpc('eth_sendRawTransaction', [transaction]).then(res => {
            if (res.result) {
                return {
                    txHash: res.result,
                    rawResponse: res
                };
            }

            const errorMessage: string = res.error.message;
            if (errorMessage.includes('transaction underpriced')) {
                return Promise.reject(TransactionMessageText.TR_UNDERPRICED);
            }
            if (errorMessage.includes('insufficient funds for gas')) {
                return Promise.reject(TransactionMessageText.NOT_ENOUGH_TOKENS);
            }
        });
    }

    public getCurrentBlock(): Promise<IBlockInfo> {
        return this.http.jsonRpc('eth_blockNumber').then(res => {
            return {
                number: new BigNumber(res.result, 16).toNumber()
            };
        });
    }

    public async getBaseFeeHistory(): Promise<BigNumber> {
        return this.http.jsonRpc('eth_feeHistory', ['0x1', 'latest', []]).then(res => {
            return new BigNumber(res.result?.baseFeePerGas[0], 16);
        });
    }

    public async getMaxPriorityFee(): Promise<BigNumber> {
        return this.http.jsonRpc('eth_maxPriorityFeePerGas', []).then(res => {
            return new BigNumber(res.result, 16);
        });
    }

    public async getTransactionFees(txHash: string): Promise<ITransactionFees> {
        try {
            const confirmedTxRes = await this.utils.getTransaction(txHash);

            if (confirmedTxRes) {
                return {
                    gasPrice: confirmedTxRes.feeOptions.gasPrice,
                    gasLimit: confirmedTxRes.feeOptions.gasLimit,
                    gasUsed: confirmedTxRes.feeOptions.feeTotal,
                    feeTotal: confirmedTxRes.feeOptions.feeTotal,
                    maxFeePerGas: confirmedTxRes.feeOptions.maxFeePerGas || undefined,
                    maxPriorityFeePerGas:
                        confirmedTxRes.feeOptions.maxPriorityFeePerGas || undefined
                };
            } else {
                return;
            }
        } catch (error) {
            throw new Error(error);
        }
    }

    public async callContract(contractAddress, methodSignature, params: any[] = []) {
        const signature = methodSignature.split(':');
        const method = signature[0];
        let returnTypes = [];
        if (signature[1]) {
            returnTypes = signature[1]
                .replace('(', '')
                .replace(')', '')
                .split(',')
                .filter(Boolean)
                .map(t => t.trim());
        }

        const response = await this.http.jsonRpc('eth_call', [
            {
                to: contractAddress,
                data: '0x' + abi.simpleEncode(method, ...params).toString('hex')
            },
            'latest'
        ]);

        const dataBuffer = Buffer.from(response.result.replace('0x', ''), 'hex');

        const result = abi.rawDecode(returnTypes, dataBuffer);

        if (result.length === 1) {
            return result.toString();
        } else {
            return result.map(r => r.toString());
        }
    }

    public async getFees(
        transactionType: TransactionType,
        data: {
            from?: string;
            to?: string;
            amount?: string;
            contractAddress?: string;
            raw?: string;
        },
        typedTransaction: TypedTransaction,
        tokenType: TokenType = TokenType.NATIVE
    ): Promise<IFeeOptions> {
        if (typedTransaction === TypedTransaction.TYPE_0)
            return this.estimateLegacyTransactions(transactionType, data, tokenType);
        else return this.estimateEip1559Transactions(transactionType, data, tokenType);
    }

    private async estimateEip1559Transactions(
        transactionType: TransactionType,
        data: {
            from?: string;
            to?: string;
            amount?: string;
            contractAddress?: string;
            raw?: string;
        },
        tokenType: TokenType = TokenType.NATIVE
    ): Promise<IFeeOptions> {
        try {
            const rpcCalls = [];

            switch (transactionType) {
                case TransactionType.TRANSFER: {
                    data.contractAddress
                        ? rpcCalls.push(
                              this.estimateGas(
                                  false,
                                  data.from,
                                  data.to,
                                  data.contractAddress,
                                  new BigNumber(data.amount),
                                  '0x' +
                                      abi
                                          .simpleEncode(
                                              MethodSignature.TRANSFER,
                                              data.to,
                                              new BigNumber(data.amount).toFixed()
                                          )
                                          .toString('hex')
                              )
                          )
                        : rpcCalls.push(this.estimateGas(false, data.from, data.to));
                    break;
                }
                case TransactionType.CONTRACT_CALL: {
                    rpcCalls.push(
                        this.estimateGas(
                            false,
                            data.from,
                            data.to,
                            data.contractAddress,
                            new BigNumber(data.amount),
                            data.raw
                        )
                    );
                    break;
                }
            }
            let presets: {
                low: {
                    maxFeePerGas: BigNumber;
                    maxPriorityFeePerGas: BigNumber;
                };
                medium: {
                    maxFeePerGas: BigNumber;
                    maxPriorityFeePerGas: BigNumber;
                };
                high: {
                    maxFeePerGas: BigNumber;
                    maxPriorityFeePerGas: BigNumber;
                };
            };

            const keyGasLimitErc20 = `ethereum.${this.chainId.toString()}.fees.gasLimit.erc20`;

            rpcCalls.push(
                this.getBaseFeeHistory(),
                this.getMaxPriorityFee(),
                new ApiClient().configs.getConfigs([keyGasLimitErc20])
            );

            const results = await Promise.all(rpcCalls);
            if (results[1] && results[2]) {
                presets = {
                    low: {
                        maxFeePerGas: new BigNumber(results[1]).plus(results[2]),
                        maxPriorityFeePerGas: new BigNumber(results[2])
                    },

                    medium: {
                        maxFeePerGas: new BigNumber(results[1]).plus(results[2]).multipliedBy(1.5),
                        maxPriorityFeePerGas: new BigNumber(results[2]).multipliedBy(1.5)
                    },
                    high: {
                        maxFeePerGas: new BigNumber(results[1]).plus(results[2]).multipliedBy(2),
                        maxPriorityFeePerGas: new BigNumber(results[2]).multipliedBy(2)
                    }
                };
            }

            let gasLimit;

            const contractAddressStaking = await getContract(this.chainId, Contracts.STAKING);

            if (
                data.contractAddress &&
                data.contractAddress.toLowerCase() === contractAddressStaking.toLowerCase()
            ) {
                const resGasLimit = results[3];
                gasLimit =
                    resGasLimit && resGasLimit.result[keyGasLimitErc20]
                        ? new BigNumber(resGasLimit.result[keyGasLimitErc20])
                        : config.feeOptions.defaults.gasLimit[tokenType];
            } else {
                gasLimit =
                    results[0][0] && results[0][0].result
                        ? new BigNumber(parseInt(results[0][0].result, 16))
                        : config.feeOptions.defaults.gasLimit[tokenType];
            }

            return {
                maxFeePerGas:
                    presets.medium.maxFeePerGas.toString() ||
                    config.feeOptions.defaults.gasPricePresets.medium.maxFeePerGas.toString(),
                maxPriorityFeePerGas:
                    presets.medium.maxPriorityFeePerGas.toString() ||
                    config.feeOptions.defaults.gasPricePresets.medium.maxPriorityFeePerGas.toString(),
                gasLimit: gasLimit.toString(),
                presets: presets ? presets : config.feeOptions.defaults.gasPricePresets,
                feeTotal: new BigNumber(results[1])
                    .multipliedBy(2)
                    .multipliedBy(gasLimit)
                    .toString(),
                responseHasDefaults: presets ? false : true
            };
        } catch (error) {
            const maxFeePerGas = config.feeOptions.defaults.gasPricePresets.medium.maxFeePerGas;
            const gasLimit = config.feeOptions.defaults.gasLimit[tokenType];

            SentryAddBreadcrumb({
                message: JSON.stringify({
                    error
                })
            });
            SentryCaptureException(
                new Error(`Failed to get estimated eip 1559 fees - defaults Set, ${error?.message}`)
            );

            return {
                maxFeePerGas: maxFeePerGas.toString(),
                maxPriorityFeePerGas: config.feeOptions.defaults.gasPricePresets.medium.maxPriorityFeePerGas.toString(),
                gasLimit: gasLimit.toString(),
                presets: config.feeOptions.defaults.gasPricePresets,
                feeTotal: maxFeePerGas.multipliedBy(gasLimit).toString(),
                responseHasDefaults: true
            };
        }
    }

    private async estimateLegacyTransactions(
        transactionType: TransactionType,
        data: {
            from?: string;
            to?: string;
            amount?: string;
            contractAddress?: string;
            raw?: string;
        },
        tokenType: TokenType = TokenType.NATIVE
    ): Promise<IFeeOptions> {
        try {
            let results = {};
            switch (transactionType) {
                case TransactionType.TRANSFER: {
                    results = data.contractAddress
                        ? await this.estimateGas(
                              true,
                              data.from,
                              data.to,
                              data.contractAddress,
                              new BigNumber(data.amount),
                              '0x' +
                                  abi
                                      .simpleEncode(
                                          MethodSignature.TRANSFER,
                                          data.to,
                                          new BigNumber(data.amount).toFixed()
                                      )
                                      .toString('hex')
                          )
                        : await this.estimateGas(true, data.from, data.to);
                }
                case TransactionType.CONTRACT_CALL: {
                    results = await this.estimateGas(
                        true,
                        data.from,
                        data.to,
                        data.contractAddress,
                        new BigNumber(data.amount),
                        data.raw
                    );
                }
            }
            let presets: {
                low: {
                    gasPrice: BigNumber;
                };
                medium: {
                    gasPrice: BigNumber;
                };
                high: {
                    gasPrice: BigNumber;
                };
            };

            if (results[1]) {
                const response = results[1];

                // Need to divide by 10 the response from ethgasAPI.json
                // Note: To convert the provided values to gwei, divide by 10

                if (response && response.result) {
                    presets = {
                        low: {
                            gasPrice: Ethereum.account.convertUnit(
                                new BigNumber(response.result.data.average),
                                config.feeOptions.ui.gasPriceUnit,
                                config.defaultUnit
                            )
                        },
                        medium: {
                            gasPrice: Ethereum.account.convertUnit(
                                new BigNumber(response.result.data.fast),
                                config.feeOptions.ui.gasPriceUnit,
                                config.defaultUnit
                            )
                        },
                        high: {
                            gasPrice: Ethereum.account.convertUnit(
                                new BigNumber(response.result.data.fastest),
                                config.feeOptions.ui.gasPriceUnit,
                                config.defaultUnit
                            )
                        }
                    };
                } else {
                    SentryCaptureException(
                        new Error(`Failed to get estimated eip 1559 fees - defaults Set`)
                    );
                }
            }

            const contractAddressStaking = await getContract(this.chainId, Contracts.STAKING);

            const gasPrice = presets?.medium.gasPrice || config.feeOptions.defaults.gasPrice;
            let gasLimit =
                results[0] && results[0].result
                    ? new BigNumber(parseInt(results[0].result, 16))
                    : config.feeOptions.defaults.gasLimit[tokenType];

            // TODO - find a way to get the exact gaslimit for GRT staking
            if (
                data.contractAddress &&
                data.contractAddress.toLowerCase() === contractAddressStaking.toLowerCase()
            ) {
                const keyGasLimitErc20 = `ethereum.${this.chainId.toString()}.fees.gasLimit.erc20`;

                const resGasLimit = await new ApiClient().configs.getConfigs([keyGasLimitErc20]);

                gasLimit =
                    resGasLimit?.result && resGasLimit.result[keyGasLimitErc20]
                        ? new BigNumber(resGasLimit.result[keyGasLimitErc20])
                        : config.feeOptions.defaults.gasLimit[tokenType];
            }

            return {
                gasPrice: gasPrice.toString(),
                gasLimit: gasLimit.toString(),
                presets: presets ? presets : config.feeOptions.defaults.gasPricePresets,
                feeTotal: gasPrice.multipliedBy(gasLimit).toString(),
                responseHasDefaults: presets ? false : true
            };
        } catch (error) {
            const gasPrice = config.feeOptions.defaults.gasPrice;
            const gasLimit = config.feeOptions.defaults.gasLimit[tokenType];

            SentryAddBreadcrumb({
                message: JSON.stringify({
                    error
                })
            });
            SentryCaptureException(
                new Error(`Failed to get estimated - defaults Set, ${error?.message}`)
            );

            return {
                gasPrice: gasPrice.toString(),
                gasLimit: gasLimit.toString(),
                presets: config.feeOptions.defaults.gasPricePresets,
                feeTotal: gasPrice.multipliedBy(gasLimit).toString(),
                responseHasDefaults: true
            };
        }
    }

    public async estimateGas(
        fetchPrice: boolean,
        from: string,
        to: string,
        contractAddress?: string,
        amount?: BigNumber,
        data?: string
    ): Promise<any> {
        let gasEstimatePromise;
        if (contractAddress) {
            let params;

            params = {
                from,
                to: contractAddress
            };

            if (data) {
                params = {
                    ...params,
                    data
                };
            }

            gasEstimatePromise = this.http
                .jsonRpc('eth_estimateGas', [{ params }, 'latest'])
                .then(res => {
                    if (res.result) {
                        res.result =
                            '0x' + new BigNumber(res.result, 16).multipliedBy(1.3).toString(16);
                        return res;
                    }
                });
        } else {
            gasEstimatePromise = this.http.jsonRpc('eth_estimateGas', [{ from, to }]);
        }

        const calls = [gasEstimatePromise];
        if (fetchPrice)
            calls.push(
                new HttpClient(CONFIG.walletApiBaseUrl).get('/blockchain/ethereum/gas-prices')
            );

        return Promise.all(calls);
    }

    public async getMinimumAmountDelegate(): Promise<BigNumber> {
        return new BigNumber(0);
    }
}

'''
'''--- src/core/blockchain/ethereum/config.ts ---
import {
    IBlockchainConfig,
    DerivationType,
    BlockchainNameService,
    TypedTransaction
} from '../types';
import { BigNumber } from 'bignumber.js';
import { TokenType, TokenScreenComponentType, PosBasicActionType } from '../types/token';
import EthIcon from '../../../assets/icons/blockchains/eth.svg';
import { ITokenConfigState } from '../../../redux/tokens/state';
import { DAI_MAINNET } from './tokens/dai';
import { LINK_MAINNET } from './tokens/chainLink';
import { AffiliateBannerType } from '../../../components/affiliate-banner/types';
import { COMP_MAINNET } from './tokens/compoundFinance';
import { LEND_MAINNET } from './tokens/ethLend';
import { MKR_MAINNET } from './tokens/maker';
import { OMG_MAINNET } from './tokens/omgNetwork';
import { SNX_MAINNET } from './tokens/syntheticNetwork';
import { USDT_MAINNET } from './tokens/theter';
import { UNI_MAINNET } from './tokens/uniSwap';
import { USDC_MAINNET } from './tokens/usdCoin';
import { YFI_MAINNET } from './tokens/yearnFinance';
import { AccountType } from '../../../redux/wallets/state';
import { IDRT_MAINNET } from './tokens/idrt';
import { GRT_MAINNET, GRT_TESTNET } from './tokens/grt';
import { IconValues } from '../../../components/icon/values';

export const ETH_NATIVE: ITokenConfigState = {
    name: 'Ethereum',
    symbol: 'ETH',
    icon: {
        iconComponent: EthIcon
    },
    removable: false,
    defaultOrder: 0,
    decimals: 18,
    ui: {
        decimals: 4,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.NATIVE,
    units: {
        WEI: new BigNumber(1),
        GWEI: new BigNumber(Math.pow(10, 9)),
        ETH: new BigNumber(Math.pow(10, 18))
    }
};

const accountCTA = {
    mainCta: {
        title: 'App.labels.stakeNow',
        iconName: IconValues.VOTE,
        navigateTo: {
            screen: 'SmartScreen',
            params: {
                context: {
                    screen: 'StakeNow',
                    step: 'StakeToMoonlet',
                    key: 'stake-to-moonlet'
                },
                navigationOptions: {
                    title: 'Stake now',
                    headerStyle: {
                        backgroundColor: '#005067',
                        borderBottomWidth: 0,
                        shadowColor: 'transparent'
                    }
                },
                background: {
                    gradient: ['#005067', '#061529']
                },
                newFlow: true
            }
        }
    }
};

const validatorCTA = {
    mainCta: {
        title: 'App.labels.stake',
        iconName: IconValues.VOTE,
        navigateTo: {
            screen: 'PosDelegate',
            params: { actionText: 'App.labels.stake' }
        }
    },
    otherCtas: [
        {
            title: 'App.labels.unstake',
            iconName: IconValues.UNVOTE,
            navigateTo: {
                screen: 'PosBasicAction',
                params: {
                    actionText: 'App.labels.unstake',
                    basicAction: PosBasicActionType.UNSTAKE
                }
            }
        }
    ]
};

export const config: IBlockchainConfig = {
    derivationPath: `m/44'/60'/0'/0`,
    derivationType: DerivationType.HD_KEY,
    coin: 'ETH',
    defaultUnit: 'WEI',
    iconComponent: EthIcon,
    droppedTxBlocksThreshold: 50,
    autoAddedTokensSymbols: {
        '1': {
            DAI: DAI_MAINNET,
            USDT: USDT_MAINNET,
            LINK: LINK_MAINNET,
            USDC: USDC_MAINNET,
            LEND: LEND_MAINNET,
            UNI: UNI_MAINNET,
            YFI: YFI_MAINNET,
            MKR: MKR_MAINNET,
            OMG: OMG_MAINNET,
            COMP: COMP_MAINNET,
            SNX: SNX_MAINNET,
            IDRT: IDRT_MAINNET,
            GRT: GRT_MAINNET
        },
        '4': {
            GRT: GRT_TESTNET
        }
    },
    tokens: {
        ETH: ETH_NATIVE
    },
    typedTransaction: {
        HD: TypedTransaction.TYPE_2,
        HW: TypedTransaction.TYPE_0
    },
    feeOptions: {
        gasPriceToken: 'ETH',
        defaults: {
            gasPrice: new BigNumber(20000000000),
            gasLimit: {
                [TokenType.NATIVE]: new BigNumber(21000),
                [TokenType.ERC20]: new BigNumber(200000)
            },
            gasPricePresets: {
                low: {
                    gasPrice: new BigNumber(20000000000),
                    maxFeePerGas: new BigNumber(50000000000),
                    maxPriorityFeePerGas: new BigNumber(1000000000)
                },
                medium: {
                    gasPrice: new BigNumber(40000000000),
                    maxFeePerGas: new BigNumber(90000000000),
                    maxPriorityFeePerGas: new BigNumber(1500000000)
                },
                high: {
                    gasPrice: new BigNumber(120000000000),
                    maxFeePerGas: new BigNumber(150000000000),
                    maxPriorityFeePerGas: new BigNumber(2000000000)
                }
            }
        },
        ui: {
            availableTokenTypes: [TokenType.ERC20],
            feeComponent: 'FeePresets',
            feeComponentAdvanced: {
                HD: 'Eip1559FeesAvanced',
                HW: 'GasFeeAdvanced'
            },

            gasPriceUnit: 'GWEI',
            defaultPreset: 'medium'
        }
    },
    ui: {
        validator: {
            totalLabel: 'Validator.totalStakes',
            amountCardLabel: 'Validator.myStake',
            maximumNumberOfValidators: 9999 // TBD
        },
        token: {
            labels: {
                tabAccount: 'App.labels.account',
                tabDelegations: 'App.labels.myStakes',
                tabValidators: 'App.labels.validators',
                tabTransactions: 'App.labels.transactions'
            },
            actionScreenLabels: {
                // unstake: 'Validator.unstakeScreenMessageZil', // TODO change messages
                // redelegate: 'Validator.restakeScreenMessageZil'
            },
            sendStepLabels: [
                'Validator.selectValidator',
                'App.labels.enterAmount',
                'Validator.confirmStake'
            ],
            accountCTA,
            delegationCTA: {
                mainCta: accountCTA.mainCta
            },
            validatorCTA
        },
        addressDisplay: 'stripped',
        enableTokenManagement: true,
        enableAccountCreation: false,
        maxAccountsNumber: 5,
        displayName: 'ETH',
        affiliateBanners: {
            account: AffiliateBannerType.UNSTOPPABLE_DOMAINS
        },
        fetchAccountStatsSec: 5
    },
    networks: {
        testNet: 4,
        mainNet: 1
    },
    defaultOrder: 1,
    nameServices: [
        {
            tld: /^(xyz|kred|art|luxe|eth)$/gi,
            service: BlockchainNameService.ENS
        },
        {
            tld: 'zil',
            service: BlockchainNameService.ZNS,
            record: ['crypto.ETH.address']
        },
        {
            tld: 'crypto',
            service: BlockchainNameService.CNS,
            record: ['crypto.ETH.address']
        }
    ],
    amountToKeepInAccount: {
        [AccountType.DEFAULT]: new BigNumber(0)
    }
};

'''
'''--- src/core/blockchain/ethereum/contracts/base-contract.ts ---
const contracts = {};
import {
    captureException as SentryCaptureException,
    addBreadcrumb as SentryAddBreadcrumb
} from '@sentry/react-native';
import { Ethereum } from '..';
import { Client as EthereumClient } from '../client';
import { ApiClient } from '../../../utils/api-client/api-client';
import {
    ChainIdType,
    Contracts,
    IBlockchainTransaction,
    IPosTransaction,
    TransactionType
} from '../../types';
import { getTokenConfig } from '../../../../redux/tokens/static-selectors';
import { TransactionStatus } from '../../../wallet/types';

export const fetchContracts = async (chainId: ChainIdType) => {
    // TODO - fetch from blockchain

    const keyStaking = `ethereum.${chainId}.staking.contract`;
    const keyGrt = `ethereum.${chainId}.tokens.GRT`;

    try {
        const configs = await new ApiClient().configs.getConfigs([keyStaking, keyGrt]);

        const values = {
            ...contracts[chainId],
            [Contracts.STAKING]: configs.result[keyStaking],
            [Contracts.GRT_TOKEN]: configs.result[keyGrt]
        };

        return values;
    } catch (error) {
        SentryAddBreadcrumb({
            message: JSON.stringify({ error })
        });

        SentryCaptureException(new Error(`Failed to fetch contracts ETH ${error?.code}`));
    }

    return contracts;
};

export const getEthContracts = async (chainId: ChainIdType) => {
    if (!contracts[chainId]) {
        contracts[chainId] = await fetchContracts(chainId);
    }
    return contracts[chainId];
};

export const getContract = async (
    chainId: ChainIdType,
    contractType: Contracts
): Promise<string> => {
    return getEthContracts(chainId).then(ethContracts => ethContracts[contractType]);
};

export const buildBaseTransaction = async (
    tx: IPosTransaction
): Promise<IBlockchainTransaction> => {
    const tokenConfig = getTokenConfig(tx.account.blockchain, tx.token);

    const client = Ethereum.getClient(tx.chainId) as EthereumClient;
    const nonce = await client.getNonce(tx.account.address);

    const blockInfo = await client.getCurrentBlock();

    return {
        date: {
            created: Date.now(),
            signed: Date.now(),
            broadcasted: Date.now(),
            confirmed: Date.now()
        },
        blockchain: tx.account.blockchain,
        chainId: tx.chainId,
        type: TransactionType.CONTRACT_CALL,
        token: tokenConfig,
        address: tx.account.address,
        publicKey: tx.account.publicKey,
        toAddress: '',
        amount: tx.amount,
        feeOptions: tx.feeOptions,
        broadcastedOnBlock: blockInfo?.number,
        nonce,
        status: TransactionStatus.PENDING,
        data: {},
        additionalInfo: tx.extraFields
    };
};

'''
'''--- src/core/blockchain/ethereum/contracts/staking.ts ---
import { Client } from '../client';
import {
    IPosTransaction,
    IBlockchainTransaction,
    TransactionType,
    Contracts,
    TypedTransaction
} from '../../types';
import { IValidator } from '../../types/stats';
import { TokenType, PosBasicActionType } from '../../types/token';
import { buildBaseTransaction, getContract } from './base-contract';
import abi from 'ethereumjs-abi';
import { MethodSignature } from '../types';
import BigNumber from 'bignumber.js';

export class Staking {
    constructor(private client: Client) {}

    public async delegate(
        tx: IPosTransaction,
        validator: IValidator
    ): Promise<IBlockchainTransaction> {
        const transaction = await buildBaseTransaction(tx);
        const contractAddress = await getContract(this.client.chainId, Contracts.STAKING);

        transaction.toAddress = contractAddress;
        transaction.amount = '0';
        const raw =
            '0x' +
            abi.simpleEncode('delegate(address,uint256)', validator.id, tx.amount).toString('hex');

        const fees = await this.client.getFees(
            TransactionType.CONTRACT_CALL,
            {
                from: tx.account.address,
                to: validator.id,
                amount: tx.amount,
                contractAddress,
                raw
            },
            tx.extraFields.typedTransaction || TypedTransaction.TYPE_0,
            TokenType.ERC20
        );
        transaction.feeOptions = fees;

        transaction.data = {
            method: 'Stake',
            params: [validator.id, tx.amount],
            raw
        };

        transaction.additionalInfo.posAction = PosBasicActionType.STAKE;
        transaction.additionalInfo.validatorName = validator.name;
        transaction.additionalInfo.tokenSymbol = 'GRT';
        return transaction;
    }

    public async increaseAllowance(
        tx: IPosTransaction,
        contractAddress: string
    ): Promise<IBlockchainTransaction> {
        const transaction = await buildBaseTransaction(tx);
        const allowanceContract = await getContract(this.client.chainId, Contracts.STAKING);

        transaction.toAddress = contractAddress;
        transaction.amount = '0';
        const raw =
            '0x' +
            abi
                .simpleEncode(MethodSignature.INCREASE_ALLOWANCE, allowanceContract, tx.amount)
                .toString('hex');

        const fees = await this.client.getFees(
            TransactionType.CONTRACT_CALL,
            {
                from: tx.account.address,
                to: allowanceContract,
                amount: tx.amount,
                contractAddress,
                raw
            },
            tx.extraFields.typedTransaction || TypedTransaction.TYPE_0,
            TokenType.ERC20
        );
        transaction.feeOptions = fees;

        transaction.data = {
            method: 'Increase Allowance',
            params: [allowanceContract, tx.amount],
            raw
        };

        transaction.additionalInfo.posAction = PosBasicActionType.INCREASE_ALLOWANCE;
        transaction.additionalInfo.tokenSymbol = 'GRT';

        return transaction;
    }

    public async undelegate(
        tx: IPosTransaction,
        validator: IValidator
    ): Promise<IBlockchainTransaction> {
        const transaction = await buildBaseTransaction(tx);
        const contractAddress = await getContract(this.client.chainId, Contracts.STAKING);
        const contractAddressGRT = await getContract(this.client.chainId, Contracts.GRT_TOKEN);

        const balance = await this.client.tokens[TokenType.ERC20].getBalance(
            contractAddressGRT,
            tx.account.address
        );

        transaction.toAddress = contractAddress;
        transaction.amount = '0';

        const staked = new BigNumber(balance.detailed[validator.id].staked).toFixed(0);

        const amountInShares = new BigNumber(tx.amount).minus(staked).isEqualTo(0)
            ? balance.detailed[validator.id].shareAmount
            : new BigNumber(tx.amount)
                  .dividedBy(balance.detailed[validator.id].personalExchangeRate)
                  .toFixed(0);

        const raw =
            '0x' +
            abi
                .simpleEncode(MethodSignature.UNDELEGATE, validator.id, amountInShares)
                .toString('hex');

        const fees = await this.client.getFees(
            TransactionType.CONTRACT_CALL,
            {
                from: tx.account.address,
                to: validator.id,
                amount: tx.amount,
                contractAddress,
                raw
            },
            tx.extraFields.typedTransaction || TypedTransaction.TYPE_0,
            TokenType.ERC20
        );
        transaction.feeOptions = fees;

        transaction.data = {
            method: 'Unstake',
            params: [validator.id, tx.amount],
            raw
        };

        transaction.additionalInfo.posAction = PosBasicActionType.UNSTAKE;
        transaction.additionalInfo.validatorName = validator.name;
        transaction.additionalInfo.tokenSymbol = 'GRT';

        return transaction;
    }

    public async withdrawDelegated(
        tx: IPosTransaction,
        validator: IValidator
    ): Promise<IBlockchainTransaction> {
        const transaction = await buildBaseTransaction(tx);
        const contractAddress = await getContract(this.client.chainId, Contracts.STAKING);

        transaction.toAddress = contractAddress;
        transaction.amount = '0';

        const raw =
            '0x' +
            abi
                .simpleEncode(
                    MethodSignature.WITHDRAW_DELEGATED,
                    validator.id,
                    '0x000000000000000000000000000000000000'
                )
                .toString('hex');

        const fees = await this.client.getFees(
            TransactionType.CONTRACT_CALL,
            {
                from: tx.account.address,
                to: validator.id,
                amount: tx.amount,
                contractAddress,
                raw
            },
            tx.extraFields.typedTransaction || TypedTransaction.TYPE_0,
            TokenType.ERC20
        );
        transaction.feeOptions = fees;

        transaction.data = {
            method: 'Withdraw',
            params: [validator.id, tx.extraFields.amount],
            raw
        };

        transaction.additionalInfo.posAction = PosBasicActionType.WITHDRAW;
        transaction.additionalInfo.validatorName = validator.name;
        transaction.additionalInfo.tokenSymbol = 'GRT';

        return transaction;
    }
}

'''
'''--- src/core/blockchain/ethereum/index.ts ---
import { config } from './config';
import { networks } from './networks';
import { Client } from './client';
import { EthereumTransactionUtils } from './transaction';
import { EthereumAccountUtils } from './account';
import { IBlockchain, ChainIdType, Contracts } from '../types';
import { Stats } from './stats';
import { getContract } from './contracts/base-contract';

const account = new EthereumAccountUtils();
const transaction = new EthereumTransactionUtils();

const clients = {};

export const Ethereum: IBlockchain = {
    config,
    networks,
    transaction,
    account,
    Client,
    getStats: (chainId: ChainIdType) => new Stats(new Client(chainId), config),
    getClient: (chainId: ChainIdType) => {
        chainId = Number(chainId);
        if (!clients[chainId]) {
            clients[chainId] = new Client(chainId);
        }
        return clients[chainId];
    },
    getContract: (chainId: ChainIdType, contractType: Contracts) => {
        return getContract(chainId, contractType);
    }
};

'''
'''--- src/core/blockchain/ethereum/name-service.ts ---
import {
    IResolveTextResponse,
    ResolveTextType,
    ResolveTextCode,
    ResolveTextError,
    GenericNameService,
    BlockchainNameService,
    IResolveNameResponse
} from '../types';
import { Ethereum } from '.';
import { Client } from './client';
import { cryptoNameResolver } from '../common/cryptoNameResolver';
import { ethNameResolver } from '../common/ethNameResolver';
import { zilNameResolver } from '../common/zilNameResolver';
import { config } from './config';

export class NameService extends GenericNameService {
    constructor(client: Client) {
        super(client);
    }

    public async resolveText(text: string): Promise<IResolveTextResponse> {
        const validAddress = Ethereum.account.isValidAddress(text);
        const validChecksumAddress = Ethereum.account.isValidChecksumAddress(text);

        if (validAddress) {
            return Promise.resolve({
                code: validChecksumAddress ? ResolveTextCode.OK : ResolveTextCode.WARN_CHECKSUM,
                type: ResolveTextType.ADDRESS,
                address: text,
                name: ''
            });
        } else {
            const { address } = await this.resolveName(text);
            if (address === '0x0000000000000000000000000000000000000000') {
                return Promise.reject({
                    error: ResolveTextError.INVALID
                });
            } else {
                return Promise.resolve({
                    code: ResolveTextCode.OK,
                    type: ResolveTextType.NAME,
                    address,
                    name: ''
                });
            }
        }
    }
    public resolveName(name: string): Promise<IResolveNameResponse> {
        const { mainNet } = this.client.network;
        const ending = name.split('.').pop();
        const { service, record } = config.nameServices.find(item =>
            typeof item.tld === 'string' ? item.tld === ending : !!ending.match(item.tld)
        );
        switch (service) {
            case BlockchainNameService.ENS:
                return ethNameResolver(name, service, mainNet);
            case BlockchainNameService.ZNS:
                return zilNameResolver(name, service, record, mainNet);
            case BlockchainNameService.CNS:
                return cryptoNameResolver(name, service, record, mainNet);
        }
    }
}

'''
'''--- src/core/blockchain/ethereum/networks.ts ---
import { IBlockchainNetwork } from '../types';

export const networks: IBlockchainNetwork[] = [
    {
        name: 'Main Network',
        chainId: 1,
        mainNet: true,
        url: 'https://fire.moonlet.app/functions/nodes/rpc/ethereum/mainnet',
        explorer: {
            name: 'Etherscan',
            getAccountUrl: addr => `https://etherscan.io/address/${addr}`,
            getTransactionUrl: txn => `https://etherscan.io/tx/${txn}`
        }
    },
    {
        name: 'Ropsten',
        chainId: 3,
        mainNet: false,
        url: 'https://ropsten.infura.io/v3/1fc164b9a9054e4bab0f54e3d8d312b8',
        explorer: {
            name: 'Etherscan',
            getAccountUrl: addr => `https://ropsten.etherscan.io/address/${addr}`,
            getTransactionUrl: txn => `https://ropsten.etherscan.io/tx/${txn}`
        }
    },
    {
        name: 'Rinkeby',
        chainId: 4,
        mainNet: false,
        url: 'https://rinkeby.infura.io/v3/1fc164b9a9054e4bab0f54e3d8d312b8',
        explorer: {
            name: 'Etherscan',
            getAccountUrl: addr => `https://rinkeby.etherscan.io/address/${addr}`,
            getTransactionUrl: txn => `https://rinkeby.etherscan.io/tx/${txn}`
        }
    },
    {
        name: 'Kovan',
        chainId: 42,
        mainNet: false,
        url: 'https://kovan.infura.io/v3/1fc164b9a9054e4bab0f54e3d8d312b8',
        explorer: {
            name: 'Etherscan',
            getAccountUrl: addr => `https://kovan.etherscan.io/address/${addr}`,
            getTransactionUrl: txn => `https://kovan.etherscan.io/tx/${txn}`
        }
    },
    {
        name: 'Ganache local',
        chainId: 15,
        mainNet: false,
        url: 'http://127.0.0.1:8545/',
        explorer: {
            name: 'Etherscan',
            getAccountUrl: () => ``,
            getTransactionUrl: () => ``
        }
    }
];

'''
'''--- src/core/blockchain/ethereum/stats.ts ---
import { GenericStats, AccountStats } from '../types/stats';
import { Client } from './client';
import { IAccountState, ITokenState } from '../../../redux/wallets/state';

export class Stats extends GenericStats<Client> {
    public async getAccountDelegateStats(
        account: IAccountState,
        token: ITokenState
    ): Promise<AccountStats> {
        throw new Error('Not Implemented');
    }
}

'''
'''--- src/core/blockchain/ethereum/tokens/chainLink.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const LINK_MAINNET: ITokenConfigState = {
    name: 'ChainLink Token',
    symbol: 'LINK',
    icon: {
        uri: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1975.png'
    },
    contractAddress: '0x514910771af9ca656af840dff83e8264ecf986ca',
    removable: true,
    defaultOrder: 999,
    decimals: 18,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ERC20
};

'''
'''--- src/core/blockchain/ethereum/tokens/compoundFinance.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const COMP_MAINNET: ITokenConfigState = {
    name: 'Compound',
    symbol: 'COMP',
    icon: {
        uri: 'https://s2.coinmarketcap.com/static/img/coins/64x64/5692.png'
    },
    contractAddress: '0xc00e94cb662c3520282e6f5717214004a7f26888',
    removable: true,
    defaultOrder: 999,
    decimals: 18,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ERC20
};

'''
'''--- src/core/blockchain/ethereum/tokens/dai.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const DAI_MAINNET: ITokenConfigState = {
    name: 'Multi-collateral DAI',
    symbol: 'DAI',
    icon: {
        uri: 'https://s2.coinmarketcap.com/static/img/coins/64x64/4943.png'
    },
    contractAddress: '0x6b175474e89094c44da98b954eedeac495271d0f',
    removable: true,
    defaultOrder: 999,
    decimals: 18,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ERC20
};

'''
'''--- src/core/blockchain/ethereum/tokens/erc20-client.ts ---
import { Client } from '../client';
import BigNumber from 'bignumber.js';
import { Blockchain, Contracts, IBalance } from '../../types';
import { ApiClient } from '../../../utils/api-client/api-client';
import { getContract } from '../contracts/base-contract';
import { isFeatureActive, RemoteFeature } from '../../../utils/remote-feature-config';

export class Erc20Client {
    constructor(private client: Client) {}

    public async getBalance(contractAddress, accountAddress): Promise<IBalance> {
        const contractAddressGRT = await getContract(this.client.chainId, Contracts.GRT_TOKEN);

        if (contractAddressGRT === contractAddress && isFeatureActive(RemoteFeature.GRT)) {
            return this.getStakingBalance(contractAddress, accountAddress);
        } else {
            try {
                const balance = await this.client.callContract(
                    contractAddress,
                    'balanceOf(address):(uint256)',
                    [accountAddress]
                );

                return {
                    total: new BigNumber(balance as string) || new BigNumber(0),
                    available: new BigNumber(balance as string) || new BigNumber(0)
                };
            } catch {
                return { total: new BigNumber(0), available: new BigNumber(0) };
            }
        }
    }

    public async getStakingBalance(contractAddress, accountAddress): Promise<IBalance> {
        try {
            const data = await new ApiClient().validators.getBalance(
                accountAddress,
                Blockchain.ETHEREUM,
                this.client.chainId.toString()
            );

            return {
                total: data?.balance.total || new BigNumber(0),
                available: data?.balance.available || new BigNumber(0),
                detailed: data?.balance.detailed || {}
            };
        } catch {
            return {
                total: new BigNumber(0),
                available: new BigNumber(0),
                detailed: {}
            };
        }
    }

    public getSymbol(contractAddress) {
        return this.client.callContract(contractAddress, 'symbol():(string)');
    }

    public getName(contractAddress) {
        return this.client.callContract(contractAddress, 'name():(string)');
    }

    public getDecimals(contractAddress) {
        return this.client.callContract(contractAddress, 'decimals():(uint8)');
    }

    public async getTokenInfo(contractAddress) {
        const info = await Promise.all([
            this.getSymbol(contractAddress),
            this.getName(contractAddress),
            this.getDecimals(contractAddress)
        ]);

        return {
            symbol: info[0],
            name: info[1],
            decimals: info[2]
        };
    }
}

'''
'''--- src/core/blockchain/ethereum/tokens/ethLend.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const LEND_MAINNET: ITokenConfigState = {
    name: 'Eth Lend',
    symbol: 'LEND',
    icon: {
        uri: 'https://s2.coinmarketcap.com/static/img/coins/64x64/2239.png'
    },
    contractAddress: '0x80fB784B7eD66730e8b1DBd9820aFD29931aab03',
    removable: true,
    defaultOrder: 999,
    decimals: 18,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ERC20
};

'''
'''--- src/core/blockchain/ethereum/tokens/grt.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const GRT_MAINNET: ITokenConfigState = {
    name: 'GRT Token',
    symbol: 'GRT',
    icon: {
        uri: 'https://s2.coinmarketcap.com/static/img/coins/64x64/6719.png'
    },
    contractAddress: '0xc944e90c64b2c07662a292be6244bdf05cda44a7',
    removable: true,
    defaultOrder: 900,
    decimals: 18,
    ui: {
        decimals: 4,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ERC20
};

export const GRT_TESTNET: ITokenConfigState = {
    name: 'GRT Token',
    symbol: 'GRT',
    icon: {
        uri: 'https://s2.coinmarketcap.com/static/img/coins/64x64/6719.png'
    },
    contractAddress: '0x54fe55d5d255b8460fb3bc52d5d676f9ae5697cd',
    removable: true,
    defaultOrder: 900,
    decimals: 18,
    ui: {
        decimals: 4,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ERC20
};

'''
'''--- src/core/blockchain/ethereum/tokens/idrt.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const IDRT_MAINNET: ITokenConfigState = {
    name: 'Rupiah Token',
    symbol: 'IDRT',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/ethereum/idrt.png'
    },
    contractAddress: '0x998ffe1e43facffb941dc337dd0468d52ba5b48a',
    removable: true,
    defaultOrder: 999,
    decimals: 2,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ERC20
};

'''
'''--- src/core/blockchain/ethereum/tokens/maker.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const MKR_MAINNET: ITokenConfigState = {
    name: 'Maker',
    symbol: 'MKR',
    icon: {
        uri: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1518.png'
    },
    contractAddress: '0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2',
    removable: true,
    defaultOrder: 999,
    decimals: 18,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ERC20
};

'''
'''--- src/core/blockchain/ethereum/tokens/omgNetwork.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const OMG_MAINNET: ITokenConfigState = {
    name: 'OMG Network',
    symbol: 'OMG',
    icon: {
        uri: 'https://s2.coinmarketcap.com/static/img/coins/64x64/1808.png'
    },
    contractAddress: '0xd26114cd6EE289AccF82350c8d8487fedB8A0C07',
    removable: true,
    defaultOrder: 999,
    decimals: 18,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ERC20
};

'''
'''--- src/core/blockchain/ethereum/tokens/syntheticNetwork.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const SNX_MAINNET: ITokenConfigState = {
    name: 'Synthetix Network',
    symbol: 'SNX',
    icon: {
        uri: 'https://s2.coinmarketcap.com/static/img/coins/64x64/2586.png'
    },
    contractAddress: '0xc011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f',
    removable: true,
    defaultOrder: 999,
    decimals: 18,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ERC20
};

'''
'''--- src/core/blockchain/ethereum/tokens/theter.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const USDT_MAINNET: ITokenConfigState = {
    name: 'Tether USD',
    symbol: 'USDT',
    icon: {
        uri: 'https://s2.coinmarketcap.com/static/img/coins/64x64/825.png'
    },
    contractAddress: '0xdac17f958d2ee523a2206206994597c13d831ec7',
    removable: true,
    defaultOrder: 999,
    decimals: 6,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ERC20
};

'''
'''--- src/core/blockchain/ethereum/tokens/uniSwap.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const UNI_MAINNET: ITokenConfigState = {
    name: 'Uniswap',
    symbol: 'UNI',
    icon: {
        uri: 'https://s2.coinmarketcap.com/static/img/coins/64x64/7083.png'
    },
    contractAddress: '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',
    removable: true,
    defaultOrder: 999,
    decimals: 18,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ERC20
};

'''
'''--- src/core/blockchain/ethereum/tokens/usdCoin.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const USDC_MAINNET: ITokenConfigState = {
    name: 'USD Coin',
    symbol: 'USDC',
    icon: {
        uri: 'https://s2.coinmarketcap.com/static/img/coins/64x64/3408.png'
    },
    contractAddress: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
    removable: true,
    defaultOrder: 999,
    decimals: 6,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ERC20
};

'''
'''--- src/core/blockchain/ethereum/tokens/yearnFinance.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const YFI_MAINNET: ITokenConfigState = {
    name: 'Yearn Finance',
    symbol: 'YFI',
    icon: {
        uri: 'https://s2.coinmarketcap.com/static/img/coins/64x64/5864.png'
    },
    contractAddress: '0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e',
    removable: true,
    defaultOrder: 999,
    decimals: 18,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ERC20
};

'''
'''--- src/core/blockchain/ethereum/transaction.ts ---
import {
    IBlockchainTransaction,
    ITransferTransaction,
    TransactionType,
    AbstractBlockchainTransactionUtils,
    IPosTransaction,
    Contracts
} from '../types';
// import { Transaction } from 'ethereumjs-tx';
import { FeeMarketEIP1559Transaction } from '@ethereumjs/tx';
import Common from '@ethereumjs/common';
import abi from 'ethereumjs-abi';
import BigNumber from 'bignumber.js';
import { PosBasicActionType, TokenType } from '../types/token';
import { TransactionStatus } from '../../wallet/types';
import { Ethereum } from '.';
import { cloneDeep } from 'lodash';
import { getTokenConfig } from '../../../redux/tokens/static-selectors';
import { splitStake } from '../../utils/balance';
import { MethodSignature } from './types';

export class EthereumTransactionUtils extends AbstractBlockchainTransactionUtils {
    public async sign(tx: IBlockchainTransaction, privateKey: string): Promise<string> {
        const common = new Common({ chain: tx.chainId, hardfork: 'london' });

        const maxFeePerGas = new BigNumber(tx.feeOptions.maxFeePerGas).toFixed(0);
        const maxPriorityFeePerGas = new BigNumber(tx.feeOptions.maxPriorityFeePerGas).toFixed(0);

        const txData = {
            data: tx.data?.raw,
            gasLimit: '0x' + new BigNumber(tx.feeOptions.gasLimit).toString(16),
            maxPriorityFeePerGas: '0x' + new BigNumber(maxPriorityFeePerGas).toString(16),
            maxFeePerGas: '0x' + new BigNumber(maxFeePerGas).toString(16),
            nonce: '0x' + tx.nonce.toString(16),
            to: tx.toAddress,
            value: '0x' + new BigNumber(tx.amount).toString(16),
            chainId: '0x' + tx.chainId,
            accessList: [],
            type: '0x02'
        };

        const transaction = FeeMarketEIP1559Transaction.fromTxData(txData, { common });

        const txSigned = transaction.sign(Buffer.from(privateKey, 'hex'));

        const txSerialized = '0x' + txSigned.serialize().toString('hex');

        return txSerialized;
    }

    public getTransactionStatusByCode(status: any): TransactionStatus {
        switch (parseInt(status, 16)) {
            case 0:
                return TransactionStatus.FAILED;
            case 1:
                return TransactionStatus.SUCCESS;
            case 2:
                return TransactionStatus.PENDING;
            default:
                return TransactionStatus.FAILED;
        }
    }

    public async buildTransferTransaction(
        tx: ITransferTransaction
    ): Promise<IBlockchainTransaction> {
        const tokenConfig = getTokenConfig(tx.account.blockchain, tx.token);

        const client = Ethereum.getClient(tx.chainId);
        const nonce = await client.getNonce(tx.account.address, tx.account.publicKey);
        const blockInfo = await client.getCurrentBlock();

        switch (tokenConfig.type) {
            case TokenType.ERC20:
                return {
                    date: {
                        created: Date.now(),
                        signed: Date.now(),
                        broadcasted: Date.now(),
                        confirmed: Date.now()
                    },
                    blockchain: tx.account.blockchain,
                    chainId: tx.chainId,
                    type: TransactionType.TRANSFER,
                    token: tokenConfig,
                    address: tx.account.address,
                    publicKey: tx.account.publicKey,
                    toAddress: tokenConfig.contractAddress,
                    amount: '0',
                    feeOptions: tx.feeOptions,
                    broadcastedOnBlock: blockInfo?.number,
                    nonce,
                    status: TransactionStatus.PENDING,

                    data: {
                        method: 'transfer',
                        params: [tx.toAddress, tx.amount],
                        raw:
                            '0x' +
                            abi
                                .simpleEncode(MethodSignature.TRANSFER, tx.toAddress, tx.amount)
                                .toString('hex')
                    }
                };

            // case TokenType.NATIVE:
            default:
                return {
                    date: {
                        created: Date.now(),
                        signed: Date.now(),
                        broadcasted: Date.now(),
                        confirmed: Date.now()
                    },
                    blockchain: tx.account.blockchain,
                    chainId: tx.chainId,
                    type: TransactionType.TRANSFER,
                    token: tokenConfig,
                    address: tx.account.address,
                    publicKey: tx.account.publicKey,

                    toAddress: tx.toAddress,
                    amount: tx.amount,
                    feeOptions: tx.feeOptions,
                    broadcastedOnBlock: blockInfo?.number,
                    nonce,
                    status: TransactionStatus.PENDING
                };
        }
    }

    public getTransactionAmount(tx: IBlockchainTransaction): string {
        const tokenInfo = getTokenConfig(tx?.blockchain, tx?.token?.symbol);
        if (tokenInfo?.type === TokenType.ERC20) {
            return tx?.data?.params[1];
        } else {
            return tx?.amount;
        }
    }

    public async buildPosTransaction(
        tx: IPosTransaction,
        transactionType: PosBasicActionType
    ): Promise<IBlockchainTransaction[]> {
        const client = Ethereum.getClient(tx.chainId);

        const transactions: IBlockchainTransaction[] = [];

        switch (transactionType) {
            case PosBasicActionType.STAKE:
            case PosBasicActionType.DELEGATE: {
                const tokenInfo = getTokenConfig(tx.account.blockchain, tx.token);

                const txIncrease: IPosTransaction = cloneDeep(tx);
                const transactionAllowance: IBlockchainTransaction = await client.contracts[
                    Contracts.STAKING
                ].increaseAllowance(txIncrease, tokenInfo.contractAddress);
                transactionAllowance.nonce = transactionAllowance.nonce + transactions.length; // increase nonce with the number of previous transactions
                transactions.push(transactionAllowance);

                const splitAmount = splitStake(new BigNumber(tx.amount), tx.validators.length);
                for (const validator of tx.validators) {
                    const txStake: IPosTransaction = cloneDeep(tx);
                    txStake.amount = splitAmount.toFixed(0, BigNumber.ROUND_DOWN);
                    const transaction: IBlockchainTransaction = await client.contracts[
                        Contracts.STAKING
                    ].delegate(txStake, validator);
                    transaction.nonce = transaction.nonce + transactions.length; // increase nonce with the number of previous transactions
                    transactions.push(transaction);
                }
                break;
            }

            case PosBasicActionType.UNSTAKE: {
                const txUnStake: IPosTransaction = cloneDeep(tx);
                const transactionUnStake: IBlockchainTransaction = await client.contracts[
                    Contracts.STAKING
                ].undelegate(txUnStake, tx.validators[0]);
                transactionUnStake.nonce = transactionUnStake.nonce + transactions.length;
                transactions.push(transactionUnStake);
                break;
            }

            case PosBasicActionType.WITHDRAW: {
                const txWithdraw = cloneDeep(tx);

                const transaction = await client.contracts[Contracts.STAKING].withdrawDelegated(
                    txWithdraw,
                    tx.validators[0]
                );
                if (transaction) transactions.push(transaction);

                break;
            }
        }

        return transactions;
    }
}

'''
'''--- src/core/blockchain/ethereum/types.ts ---
export enum MethodSignature {
    INCREASE_ALLOWANCE = 'approve(address,uint256)',
    DELEGATE = 'delegate(address,uint256)',
    UNDELEGATE = 'undelegate(address,uint256)',
    WITHDRAW_DELEGATED = 'withdrawDelegated(address,address)',
    TRANSFER = 'transfer(address,uint256)'
}

'''
'''--- src/core/blockchain/near/account.ts ---
import { AccountType, IAccountState } from '../../../redux/wallets/state';
import { Blockchain, ChainIdType, IBlockchainAccountUtils } from '../types';
import { BigNumber } from 'bignumber.js';
import { config } from './config';
import { convert } from '../common/account';
import { encode as bs58Encode, decode as bs58Decode } from 'bs58';
import * as nacl from 'tweetnacl';
import { HDKeyEd25519 } from '../../wallet/hd-wallet/hd-key/hd-key-ed25519';
import { generateTokensConfig } from '../../../redux/tokens/static-selectors';
import { sha256 } from 'js-sha256';
import { NEAR_LOCKUP_SUFFIX } from '../../constants/app';

export class NearAccountUtils implements IBlockchainAccountUtils {
    public getAccountDerivationPath(accountIndex: number): string {
        // all accounts are created / recovered using the first public-private key pair
        accountIndex = 0;
        return `${accountIndex}'`;
    }

    public getPrivateKeyFromDerived(derivedKey: HDKeyEd25519): string {
        const keyPair = nacl.sign.keyPair.fromSeed(derivedKey.key);
        return bs58Encode(Buffer.from(keyPair.secretKey));
    }

    public isValidChecksumAddress(address: string): boolean {
        return true;
    }

    public isValidAddress(address: string): boolean {
        return false;
    }

    public publicToAddress(publicKey: string): string {
        return publicKey;
    }

    public privateToPublic(privateKey: string): string {
        const keyPair = nacl.sign.keyPair.fromSecretKey(bs58Decode(privateKey));
        return 'ed25519:' + bs58Encode(Buffer.from(keyPair.publicKey));
    }

    public privateToAddress(privateKey: string): string {
        return this.privateToPublic(privateKey);
    }

    public getAccountFromPrivateKey(privateKey: string, index: number): IAccountState {
        const keyPair = nacl.sign.keyPair.fromSecretKey(bs58Decode(privateKey));
        const pk = bs58Encode(Buffer.from(keyPair.publicKey));
        const address = Buffer.from(bs58Decode(pk)).toString('hex');

        return {
            index: 0,
            type: AccountType.DEFAULT,
            selected: false,
            publicKey: 'ed25519:' + pk,
            address,
            blockchain: Blockchain.NEAR,
            tokens: generateTokensConfig(Blockchain.NEAR)
        };
    }

    public amountToStd(value: BigNumber | number | string, decimals: number): BigNumber {
        return new BigNumber(value).multipliedBy(new BigNumber(10).pow(decimals));
    }

    public amountFromStd(value: BigNumber | number | string, decimals: number): BigNumber {
        return new BigNumber(value).dividedBy(new BigNumber(10).pow(decimals));
    }

    public convertUnit(value: BigNumber, from: string, to: string): BigNumber {
        return convert(value, from, to, config);
    }

    public getLockupContract(accountId: string, chainId: ChainIdType): string {
        return sha256(Buffer.from(accountId)).substring(0, 40) + NEAR_LOCKUP_SUFFIX[chainId];
    }
}

'''
'''--- src/core/blockchain/near/client-utils.ts ---
import { IClientUtils } from '../types/client-utils';
import { Client } from './client';
import { Blockchain, TransactionType, IBlockchainTransaction } from '../types';
import { Near } from '.';
import { getTokenConfig } from '../../../redux/tokens/static-selectors';
import { TransactionStatus } from '../../wallet/types';
import { ITokenConfigState } from '../../../redux/tokens/state';
import {
    captureException as SentryCaptureException,
    addBreadcrumb as SentryAddBreadcrumb
} from '@sentry/react-native';

export class ClientUtils implements IClientUtils {
    constructor(private client: Client) {}

    async getTransaction(
        hash: string,
        options: { address: string }
    ): Promise<IBlockchainTransaction> {
        const res = await this.client.http.jsonRpc('tx', [hash, options.address]);

        return this.buildTransactionFromBlockchain(res.result);
    }

    async getTransactionStatus(
        hash: string,
        context: {
            address?: string;
            txData?: any;
            broadcastedOnBlock?: number;
            currentBlockNumber?: number;
            token?: ITokenConfigState;
        }
    ): Promise<TransactionStatus> {
        let status = TransactionStatus.PENDING;

        try {
            if (context?.txData?.status) {
                status = Near.transaction.getTransactionStatusByCode(context.txData.status);
            }

            if (context?.address) {
                const tx = await this.getTransaction(hash, { address: context.address });
                status = tx.status;
            }
        } catch (error) {
            // tx not present
            let currentBlockNumber = context?.currentBlockNumber;
            if (!currentBlockNumber) {
                try {
                    currentBlockNumber = await this.client
                        .getCurrentBlock()
                        .then(res => res.number);
                } catch (error) {
                    SentryAddBreadcrumb({
                        message: JSON.stringify({ error })
                    });

                    SentryCaptureException(
                        new Error(`Failed to fetch block number NEAR ${error?.code}`)
                    );
                }
            }

            if (
                currentBlockNumber &&
                context?.broadcastedOnBlock &&
                currentBlockNumber - context?.broadcastedOnBlock > 2
            ) {
                status = TransactionStatus.DROPPED;
            }
        }

        return status;
    }

    async buildTransactionFromBlockchain(txData: any): Promise<IBlockchainTransaction> {
        const transaction: IBlockchainTransaction = {
            id: txData.transaction.hash,
            type: TransactionType.TRANSFER,
            date: {
                created: Date.now(),
                signed: Date.now(),
                broadcasted: Date.now(),
                confirmed: Date.now()
            },
            blockchain: Blockchain.NEAR,
            chainId: this.client.chainId,

            address: txData.transaction.signer_id,
            toAddress: txData.transaction.receiver_id,
            publicKey: txData.transaction.public_key,

            amount: '0',
            data: null,
            feeOptions: null,
            broadcastedOnBlock: undefined, // TODO: use txData.receipts_outcome.block_hash
            status: Near.transaction.getTransactionStatusByCode(txData.status),
            token: getTokenConfig(Blockchain.NEAR, 'NEAR'),
            nonce: txData.transaction.nonce
        };

        for (const action of txData.transaction.actions) {
            if (action?.Transfer) {
                transaction.amount = action.Transfer.deposit;
                transaction.additionalInfo = {
                    actions: [{ type: TransactionType.TRANSFER }]
                };
            } else if (action?.FunctionCall) {
                transaction.type = TransactionType.CONTRACT_CALL;

                const nearReceiptsOutcomeLogsRegex = [
                    /The deposit and stake of ([^ ]*) to @?([^ ]*) succeeded/i,
                    /The deposit of ([^ ]*) to @?([^ ]*) succeeded/i,
                    /Staking of ([^ ]*) at @?([^ ]*) succeeded/i,
                    /The withdrawal of ([^ ]*) from @?([^ ]*) succeeded/i
                ];

                for (const receiptsOutcome of txData?.receipts_outcome || []) {
                    for (const log of receiptsOutcome?.outcome?.logs || []) {
                        for (const regex of nearReceiptsOutcomeLogsRegex) {
                            const outcome = log.match(regex);
                            if (outcome && outcome[1] && outcome[2]) {
                                transaction.amount = outcome[1];
                                transaction.toAddress = outcome[2]; // validatorId
                                transaction.address = txData.transaction.receiver_id;
                            }
                        }

                        const outcomeAmount = log.match(/^@?[^ ]* staking ([0-9]*)\./);
                        if (outcomeAmount && outcomeAmount[1]) {
                            transaction.amount = outcomeAmount[1];
                        }
                    }
                }
            }
        }

        return transaction;
    }
}

'''
'''--- src/core/blockchain/near/client.ts ---
import {
    Blockchain,
    BlockchainGenericClient,
    ChainIdType,
    IBlockInfo,
    TransactionType,
    IBalance,
    TypedTransaction
} from '../types';
import { networks } from './networks';
import BigNumber from 'bignumber.js';
import { config } from './config';
import { NameService } from './name-service';
import { PosBasicActionType, TokenType } from '../types/token';
import { ClientUtils } from './client-utils';
import { createTransaction, signTransaction, deleteAccount } from 'near-api-js/lib/transaction';
import { KeyPair, serialize } from 'near-api-js/lib/utils';
import sha256 from 'js-sha256';
import { StakingPool } from './contracts/staking-pool';
import {
    INearAccount,
    NearAccountType,
    NearAccountViewMethods,
    NearQueryRequestTypes
} from './types';
import { ApiClient } from '../../utils/api-client/api-client';
import { Lockup } from './contracts/lockup';
import { translate } from '../../i18n';
import { AccountType, IAccountState } from '../../../redux/wallets/state';

export class Client extends BlockchainGenericClient {
    public stakingPool: StakingPool;
    public lockup: Lockup;

    constructor(chainId: ChainIdType) {
        super(chainId, networks);

        this.nameService = new NameService(this);
        this.utils = new ClientUtils(this);
        this.stakingPool = new StakingPool();
        this.lockup = new Lockup();
    }

    public async getBalance(address: string): Promise<IBalance> {
        try {
            const data = await new ApiClient().validators.getBalance(
                address,
                Blockchain.NEAR,
                this.chainId.toString()
            );
            return {
                total: data?.balance.total || new BigNumber(0),
                available: data?.balance.available || new BigNumber(0)
            };
        } catch {
            return { total: new BigNumber(0), available: new BigNumber(0) };
        }
    }

    public async getNonce(address: string, publicKey: string): Promise<number> {
        const res = await this.http.jsonRpc('query', {
            request_type: 'view_access_key',
            finality: 'final',
            account_id: address,
            public_key: publicKey
        });

        return res?.result?.nonce + 1 || 1;
    }

    public async getCurrentBlock(): Promise<IBlockInfo> {
        const res = await this.http.jsonRpc('status');

        return {
            number: res?.result?.sync_info?.latest_block_height,
            hash: res?.result?.sync_info?.latest_block_hash
        };
    }

    public async sendTransaction(signedTransaction): Promise<{ txHash: string; rawResponse: any }> {
        try {
            const res = await this.http.jsonRpc('broadcast_tx_async', [signedTransaction]);

            if (res?.result?.transaction?.hash || res?.result) {
                return {
                    txHash: res?.result?.transaction?.hash || res?.result,
                    rawResponse: res
                };
            } else {
                throw new Error(res);
            }
        } catch (error) {
            throw new Error(error);
        }
    }

    public async getFees(
        transactionType: TransactionType,

        data: {
            from?: string;
            to?: string;
            amount?: string;
            contractAddress?: string;
            raw?: string;
        },
        typedTransaction: TypedTransaction = TypedTransaction.TYPE_0,
        tokenType: TokenType = TokenType.NATIVE
    ) {
        const gasPrice = config.feeOptions.defaults.gasPrice.toFixed();
        const gasLimit = config.feeOptions.defaults.gasLimit[tokenType].toFixed();
        const feeTotal = new BigNumber(gasPrice).multipliedBy(new BigNumber(gasLimit)).toFixed();

        return {
            gasPrice,
            gasLimit,
            feeTotal
        };
    }

    /**
     * Get Account
     * @param accountId
     */
    public async getAccount(accountId: string): Promise<INearAccount> {
        try {
            const res = await this.http.jsonRpc('query', {
                request_type: 'view_account',
                finality: 'final',
                account_id: accountId
            });

            if (res?.result) {
                // Account exists
                return {
                    address: accountId,
                    name: accountId,
                    amount: new BigNumber(res.result.amount),
                    exists: true,
                    valid: true,
                    type:
                        res.result.code_hash === '11111111111111111111111111111111'
                            ? NearAccountType.DEFAULT
                            : NearAccountType.CONTRACT
                };
            } else if (res?.error) {
                // Account does not exist | it's not created
                const errorMessage = res.error.data;

                if (errorMessage.includes('not exist')) {
                    // Account id it's valid
                    // error message: {"error": {"code": -32000, "data": "account mm does not exist while viewing", "message": "Server error"}, "id": 0, "jsonrpc": "2.0"}
                    return {
                        address: accountId,
                        name: accountId,
                        amount: new BigNumber(0),
                        exists: false,
                        valid: true
                    };
                } else if (errorMessage.includes('not valid')) {
                    // Account is not valid
                    // error message: {"error": {"code": -32000, "data": "Account ID '??' is not valid", "message": "Server error"}, "id": 0, "jsonrpc": "2.0"}
                    return {
                        address: accountId,
                        name: accountId,
                        amount: new BigNumber(0),
                        exists: false,
                        valid: false
                    };
                } else {
                    return Promise.reject(res.error);
                }
            }
        } catch (err) {
            return Promise.reject(err);
        }
    }

    /**
     * Recover Account
     * @param accountId
     * @param publicKey
     */
    public async viewAccountAccessKey(accountId: string, publicKey: string): Promise<any> {
        const res = await this.http.jsonRpc('query', {
            request_type: 'view_access_key',
            finality: 'final',
            account_id: accountId,
            public_key: publicKey
        });

        return res.result;
    }

    /**
     * Delete Account
     * @param accountId
     * @param beneficiaryId
     * @param senderPrivateKey
     */
    public async deleteNearAccount(
        accountId: string,
        beneficiaryId: string,
        senderPrivateKey: string
    ) {
        const status = await this.http.jsonRpc('status');

        // transaction actions
        const actions = [deleteAccount(beneficiaryId)];

        // setup KeyPair
        const keyPair = KeyPair.fromString(senderPrivateKey);

        let nonce = await this.getNonce(accountId, keyPair.getPublicKey().toString());

        // create transaction
        const tx = createTransaction(
            accountId,
            keyPair.getPublicKey(),
            accountId,
            ++nonce,
            actions,
            serialize.base_decode(status.result.sync_info.latest_block_hash)
        );

        // sign transaction
        const signer: any = {
            async signMessage(message) {
                const hash = new Uint8Array(sha256.sha256.array(message));
                return keyPair.sign(hash);
            }
        };
        const signedTx = await signTransaction(tx, signer, accountId, this.chainId.toString());

        // send transaction
        const res = await this.http.jsonRpc('broadcast_tx_commit', [
            Buffer.from(signedTx[1].encode()).toString('base64')
        ]);

        return res?.result || res?.error;
    }

    public async getMinimumAmountDelegate(): Promise<BigNumber> {
        return new BigNumber(0);
    }

    public async viewAccessKey(publicKey: string, accountId: string) {
        const res = await this.http.jsonRpc('query', {
            request_type: 'view_access_key',
            finality: 'final',
            account_id: accountId,
            public_key: publicKey
        });

        return res;
    }

    public async getTransactionStatusPolling(txHash: string, accountId: string) {
        return new Promise((resolve, reject) => {
            const interval = setInterval(async () => {
                const res = await this.http.jsonRpc('tx', [txHash, accountId]);

                if (res?.result?.status?.hasOwnProperty('SuccessValue')) {
                    resolve(txHash);
                    clearInterval(interval);
                    return;
                } else if (res?.result?.status?.Failure) {
                    reject(`Error: ${res}`);
                    clearInterval(interval);
                    return;
                } else {
                    // continue
                    // TODO: maybe set a timeout when to stop this?
                }
            }, 1000);
        });
    }

    public async contractCall(options: { contractName: string; methodName: string; args?: any }) {
        const res = await this.http.jsonRpc('query', {
            request_type: NearQueryRequestTypes.CALL_FUNCTION,
            finality: 'final',
            account_id: options.contractName,
            method_name: options.methodName,
            args_base64: Buffer.from(JSON.stringify(options.args || {})).toString('base64')
        });

        if (res?.result?.result) {
            try {
                const decodedData = Buffer.from(res.result.result).toString();
                return JSON.parse(decodedData);
            } catch (err) {
                throw new Error(err);
            }
        } else {
            throw new Error(
                JSON.stringify({
                    event: 'contractCall',
                    errorMessage: 'Invalid contract call response result',
                    contractName: options.contractName,
                    methodName: options.methodName,
                    args: options.args
                })
            );
        }
    }

    public async canPerformAction(
        action: PosBasicActionType,
        options: {
            account: IAccountState;
            validatorAddress: string[];
        }
    ): Promise<{ value: boolean; message: string }> {
        switch (action) {
            case PosBasicActionType.DELEGATE:
            case PosBasicActionType.STAKE:
            case PosBasicActionType.UNSTAKE:
                try {
                    if (
                        options.account.type === AccountType.LOCKUP_CONTRACT &&
                        options.validatorAddress.length > 1
                    ) {
                        return Promise.resolve({
                            value: false,
                            message: translate('Validator.multipleNodes')
                        });
                    }

                    const [stakingAccountId, depositBalance] = await Promise.all([
                        this.contractCall({
                            contractName: options.account.address,
                            methodName: NearAccountViewMethods.GET_STAKING_POOL_ACCOUNT_ID
                        }),
                        this.contractCall({
                            contractName: options.account.address,
                            methodName: NearAccountViewMethods.GET_KNOWN_DEPOSITED_BALANCE
                        })
                    ]);

                    if (
                        stakingAccountId &&
                        stakingAccountId !== options.validatorAddress[0] &&
                        depositBalance !== '0'
                    ) {
                        return Promise.resolve({
                            value: false,
                            message: translate('Validator.alreadyStaked', {
                                stakedValidator: stakingAccountId,
                                selectedValidator: options.validatorAddress[0]
                            })
                        });
                    }
                } catch (err) {
                    // no need to handle this
                }

                return Promise.resolve({
                    value: true,
                    message: ''
                });

            default:
                return Promise.resolve({ value: true, message: '' });
        }
    }
}

'''
'''--- src/core/blockchain/near/config.ts ---
import { IBlockchainConfig, DerivationType, TypedTransaction } from '../types';
import { BigNumber } from 'bignumber.js';
import { TokenType, TokenScreenComponentType, PosBasicActionType } from '../types/token';
import NearIcon from '../../../assets/icons/blockchains/near.svg';
import { ITokenConfigState } from '../../../redux/tokens/state';
import { IconValues } from '../../../components/icon/values';
import { AffiliateBannerType } from '../../../components/affiliate-banner/types';
import { AccountType } from '../../../redux/wallets/state';
import { Platform } from 'react-native';

export const NEAR_NATIVE: ITokenConfigState = {
    name: 'Near',
    symbol: 'NEAR',
    icon: {
        iconComponent: NearIcon
    },
    removable: false,
    defaultOrder: 0,
    decimals: 24,
    ui: {
        decimals: 4,
        tokenScreenComponent: Platform.select({
            default: TokenScreenComponentType.DELEGATE,
            web: TokenScreenComponentType.DEFAULT
        })
    },
    type: TokenType.NATIVE,
    units: {
        YNEAR: new BigNumber(1),
        NEAR: new BigNumber(Math.pow(10, 24))
    }
};

const accountCTA = {
    mainCta: {
        title: 'App.labels.stakeNow',
        iconName: IconValues.VOTE,
        navigateTo: {
            screen: 'SmartScreen',
            params: {
                context: {
                    screen: 'StakeNow',
                    step: 'StakeEnterAmount',
                    key: 'stake-enter-amount'
                },
                navigationOptions: {
                    title: 'Stake now',
                    headerStyle: {
                        backgroundColor: '#005067',
                        borderBottomWidth: 0,
                        shadowColor: 'transparent'
                    }
                },
                background: {
                    gradient: ['#005067', '#061529']
                },
                newFlow: true
            }
        }
    }
};

const validatorCTA = {
    mainCta: {
        title: 'App.labels.stake',
        iconName: IconValues.VOTE,
        navigateTo: {
            screen: 'PosDelegate',
            params: { actionText: 'App.labels.stake' }
        }
    },
    otherCtas: [
        {
            title: 'App.labels.unstake',
            iconName: IconValues.UNVOTE,
            navigateTo: {
                screen: 'PosBasicAction',
                params: {
                    actionText: 'App.labels.unstake',
                    basicAction: PosBasicActionType.UNSTAKE
                }
            }
        }
    ]
};

export const config: IBlockchainConfig = {
    derivationPath: `m/44'/397'`,
    derivationType: DerivationType.HD_KEY_ED25519,
    coin: 'NEAR',
    defaultUnit: 'YNEAR',
    iconComponent: NearIcon,
    droppedTxBlocksThreshold: 10,
    autoAddedTokensSymbols: {},
    tokens: {
        NEAR: NEAR_NATIVE
    },
    typedTransaction: {
        HD: TypedTransaction.TYPE_0,
        HW: TypedTransaction.TYPE_0
    },
    feeOptions: {
        gasPriceToken: 'NEAR',
        defaults: {
            gasPrice: new BigNumber('100000000'),
            gasLimit: {
                [TokenType.NATIVE]: new BigNumber('230000000000')
            }
        },
        ui: {
            availableTokenTypes: [],
            feeComponent: 'FeeTotal',
            feeComponentAdvanced: undefined,
            gasPriceUnit: 'YNEAR'
        }
    },
    ui: {
        validator: {
            totalLabel: 'Validator.totalStakes',
            amountCardLabel: 'App.labels.staked',
            maximumNumberOfValidators: 9999 // TBD
        },
        token: {
            labels: {
                tabAccount: 'App.labels.account',
                tabDelegations: 'App.labels.myStakes',
                tabValidators: 'App.labels.validators',
                tabTransactions: 'App.labels.transactions'
            },
            actionScreenLabels: {},
            sendStepLabels: [
                'Validator.selectValidator',
                'App.labels.enterAmount',
                'Validator.confirmStake'
            ],
            accountCTA,
            delegationCTA: {
                mainCta: accountCTA.mainCta
            },
            validatorCTA
        },
        addressDisplay: 'stripped',
        enableTokenManagement: false,
        enableAccountCreation: true,
        maxAccountsNumber: 5,
        displayName: 'NEAR',
        affiliateBanners: {
            account: AffiliateBannerType.LEDGER_NANO_X
        },
        fetchAccountStatsSec: 1
    },
    networks: {
        mainNet: 'mainnet',
        testNet: 'testnet'
    },
    defaultOrder: 2,
    amountToKeepInAccount: {
        [AccountType.DEFAULT]: new BigNumber(0),
        [AccountType.LOCKUP_CONTRACT]: new BigNumber(10).pow(24).multipliedBy(40) // 40 NEAR
    }
};

'''
'''--- src/core/blockchain/near/consts.ts ---
import BN from 'bn.js';

export const NEAR_DEFAULT_FUNC_CALL_GAS = new BN('100000000000000');

export const CREATE_ACCOUNT_NEAR_FEES = new BN('1000000000000000000000000');
export const CREATE_ACCOUNT_NEAR_DEPOSIT = new BN('100000000000000000000000');

export const NEAR_CREATE_ACCOUNT_MIN_BALANCE = CREATE_ACCOUNT_NEAR_FEES.add(
    CREATE_ACCOUNT_NEAR_DEPOSIT
);

export const NEAR_LOCKUP_BASE_GAS = new BN('25000000000000');

'''
'''--- src/core/blockchain/near/contracts/base-contract.ts ---
import { getTokenConfig } from '../../../../redux/tokens/static-selectors';
import { Near } from '..';
import { TransactionStatus } from '../../../wallet/types';
import { IPosTransaction, IBlockchainTransaction, TransactionType } from '../../types';

export const buildBaseTransaction = async (
    tx: IPosTransaction
): Promise<IBlockchainTransaction> => {
    const tokenConfig = getTokenConfig(tx.account.blockchain, tx.token);

    const client = Near.getClient(tx.chainId);

    const nonce = await client.getNonce(tx.account.address, tx.account.publicKey);
    const blockInfo = await client.getCurrentBlock();

    return {
        date: {
            created: Date.now(),
            signed: Date.now(),
            broadcasted: Date.now(),
            confirmed: Date.now()
        },
        blockchain: tx.account.blockchain,
        chainId: tx.chainId,
        type: TransactionType.CONTRACT_CALL,
        token: tokenConfig,
        address: tx.account.address,
        publicKey: tx.account.publicKey,
        toAddress: '',
        amount: tx.amount,
        feeOptions: tx.feeOptions,
        broadcastedOnBlock: blockInfo?.number,
        nonce,
        status: TransactionStatus.PENDING,
        data: {},
        additionalInfo: {
            ...tx.extraFields,
            currentBlockHash: blockInfo.hash
        }
    };
};

'''
'''--- src/core/blockchain/near/contracts/lockup.ts ---
import { IPosTransaction, IBlockchainTransaction } from '../../types';
import { IValidator } from '../../types/stats';
import { PosBasicActionType } from '../../types/token';
import { buildBaseTransaction } from './base-contract';
import {
    INearTransactionAdditionalInfoType,
    NearTransactionActionType,
    NearFunctionCallMethods
} from '../types';
import BN from 'bn.js';
import BigNumber from 'bignumber.js';
import { NEAR_LOCKUP_BASE_GAS } from '../consts';

export class Lockup {
    public async selectStakingPool(
        tx: IPosTransaction,
        validator: IValidator
    ): Promise<IBlockchainTransaction<INearTransactionAdditionalInfoType>> {
        const transaction = await buildBaseTransaction(tx);
        const gas = NEAR_LOCKUP_BASE_GAS.mul(new BN(3));

        transaction.address = tx.account.meta.owner;
        transaction.toAddress = tx.account.address;
        transaction.feeOptions = { feeTotal: gas.toString() };

        transaction.additionalInfo.posAction = PosBasicActionType.SELECT_STAKING_POOL;
        transaction.additionalInfo.validatorName = validator.name;

        transaction.additionalInfo.actions = [
            {
                type: NearTransactionActionType.FUNCTION_CALL,
                params: [
                    NearFunctionCallMethods.SELECT_STAKING_POOL,
                    { staking_pool_account_id: validator.id },
                    gas,
                    new BN(0)
                ]
            }
        ];

        return transaction;
    }

    public async unselectStakingPool(
        tx: IPosTransaction,
        validator: IValidator
    ): Promise<IBlockchainTransaction<INearTransactionAdditionalInfoType>> {
        const transaction = await buildBaseTransaction(tx);
        const gas = NEAR_LOCKUP_BASE_GAS;

        transaction.address = tx.account.meta.owner;
        transaction.toAddress = tx.account.address;
        transaction.feeOptions = { feeTotal: gas.toString() };

        transaction.additionalInfo.posAction = PosBasicActionType.UNSELECT_STAKING_POOL;
        transaction.additionalInfo.validatorName = validator.name;

        transaction.additionalInfo.actions = [
            {
                type: NearTransactionActionType.FUNCTION_CALL,
                params: [
                    NearFunctionCallMethods.UNSELECT_STAKING_POOL,
                    { staking_pool_account_id: validator.id },
                    gas,
                    new BN(0)
                ]
            }
        ];

        return transaction;
    }

    public async stake(
        tx: IPosTransaction,
        validator: IValidator,
        unstakedAmount: BigNumber
    ): Promise<IBlockchainTransaction<INearTransactionAdditionalInfoType>> {
        const transaction = await buildBaseTransaction(tx);
        const gas = NEAR_LOCKUP_BASE_GAS.mul(new BN(5));

        transaction.address = tx.account.meta.owner;
        transaction.toAddress = tx.account.address;
        transaction.feeOptions = { feeTotal: gas.toString() };

        transaction.additionalInfo.posAction = PosBasicActionType.STAKE;
        transaction.additionalInfo.validatorName = validator.name;

        if (unstakedAmount.isGreaterThan(new BigNumber(tx.amount))) {
            // STAKE
            transaction.additionalInfo.actions = [
                {
                    type: NearTransactionActionType.FUNCTION_CALL,
                    params: [NearFunctionCallMethods.STAKE, { amount: tx.amount }, gas, new BN(0)]
                }
            ];
        } else {
            // DEPOSIT_AND_STAKE
            transaction.additionalInfo.actions = [
                {
                    type: NearTransactionActionType.FUNCTION_CALL,
                    params: [
                        NearFunctionCallMethods.DEPOSIT_AND_STAKE,
                        { amount: tx.amount },
                        gas,
                        new BN(0)
                    ]
                }
            ];
        }

        return transaction;
    }

    public async unstake(
        tx: IPosTransaction,
        validator: IValidator
    ): Promise<IBlockchainTransaction<INearTransactionAdditionalInfoType>> {
        const transaction = await buildBaseTransaction(tx);
        const gas = NEAR_LOCKUP_BASE_GAS.mul(new BN(5));

        transaction.address = tx.account.meta.owner;
        transaction.toAddress = tx.account.address;
        transaction.feeOptions = { feeTotal: gas.toString() };

        transaction.additionalInfo.posAction = PosBasicActionType.UNSTAKE;
        transaction.additionalInfo.validatorName = validator.name;

        transaction.additionalInfo.actions = [
            {
                type: NearTransactionActionType.FUNCTION_CALL,
                params: [NearFunctionCallMethods.UNSTAKE, { amount: tx.amount }, gas, new BN(0)]
            }
        ];

        return transaction;
    }

    public async withdraw(
        tx: IPosTransaction
    ): Promise<IBlockchainTransaction<INearTransactionAdditionalInfoType>> {
        const transaction = await buildBaseTransaction(tx);
        const gas = NEAR_LOCKUP_BASE_GAS.mul(new BN(7));

        transaction.address = tx.account.meta.owner;
        transaction.toAddress = tx.account.address;

        transaction.feeOptions = { feeTotal: gas.toString() };

        transaction.additionalInfo.posAction = PosBasicActionType.WITHDRAW;
        transaction.additionalInfo.actions = [
            {
                type: NearTransactionActionType.FUNCTION_CALL,
                params: [NearFunctionCallMethods.WITHDRAW_ALL_FROM_STAKING_POOL, {}, gas, new BN(0)]
            }
        ];

        return transaction;
    }
}

'''
'''--- src/core/blockchain/near/contracts/staking-pool.ts ---
import { IPosTransaction, IBlockchainTransaction } from '../../types';
import { IValidator } from '../../types/stats';
import { PosBasicActionType } from '../../types/token';
import { buildBaseTransaction } from './base-contract';
import {
    INearTransactionAdditionalInfoType,
    NearTransactionActionType,
    NearFunctionCallMethods
} from '../types';
import BN from 'bn.js';
import BigNumber from 'bignumber.js';
import { NEAR_DEFAULT_FUNC_CALL_GAS } from '../consts';

export class StakingPool {
    public async stake(
        tx: IPosTransaction,
        validator: IValidator,
        depositAmount: BigNumber
    ): Promise<IBlockchainTransaction<INearTransactionAdditionalInfoType>> {
        const transaction = await buildBaseTransaction(tx);

        transaction.toAddress = validator.id;
        transaction.feeOptions = { feeTotal: NEAR_DEFAULT_FUNC_CALL_GAS.toString() };

        transaction.additionalInfo.posAction = PosBasicActionType.STAKE;
        transaction.additionalInfo.validatorName = validator.name;

        if (depositAmount.isGreaterThan(new BigNumber(0))) {
            // DEPOSIT and STAKE_ALL
            transaction.additionalInfo.actions = [
                {
                    type: NearTransactionActionType.FUNCTION_CALL,
                    params: [
                        NearFunctionCallMethods.DEPOSIT,
                        {},
                        NEAR_DEFAULT_FUNC_CALL_GAS,
                        new BN(depositAmount.toFixed())
                    ]
                },
                {
                    type: NearTransactionActionType.FUNCTION_CALL,
                    params: [
                        NearFunctionCallMethods.STAKE_ALL,
                        {},
                        NEAR_DEFAULT_FUNC_CALL_GAS,
                        new BN(0)
                    ]
                }
            ];
        } else {
            // STAKE
            transaction.additionalInfo.actions = [
                {
                    type: NearTransactionActionType.FUNCTION_CALL,
                    params: [
                        NearFunctionCallMethods.STAKE,
                        { amount: tx.amount },
                        NEAR_DEFAULT_FUNC_CALL_GAS,
                        new BN(0)
                    ]
                }
            ];
        }

        return transaction;
    }

    public async unstake(
        tx: IPosTransaction,
        validator: IValidator
    ): Promise<IBlockchainTransaction<INearTransactionAdditionalInfoType>> {
        const transaction = await buildBaseTransaction(tx);

        transaction.toAddress = validator.id;
        transaction.feeOptions = { feeTotal: NEAR_DEFAULT_FUNC_CALL_GAS.toString() };

        transaction.additionalInfo.posAction = PosBasicActionType.UNSTAKE;
        transaction.additionalInfo.validatorName = validator.name;

        transaction.additionalInfo.actions = [
            {
                type: NearTransactionActionType.FUNCTION_CALL,
                params: [
                    NearFunctionCallMethods.UNSTAKE,
                    { amount: tx.amount },
                    NEAR_DEFAULT_FUNC_CALL_GAS,
                    new BN(0)
                ]
            }
        ];

        return transaction;
    }

    public async withdraw(
        tx: IPosTransaction,
        validator: IValidator
    ): Promise<IBlockchainTransaction<INearTransactionAdditionalInfoType>> {
        const transaction = await buildBaseTransaction(tx);

        transaction.toAddress = validator.id;
        transaction.amount = tx.extraFields.amount;

        transaction.feeOptions = { feeTotal: NEAR_DEFAULT_FUNC_CALL_GAS.toString() };

        transaction.additionalInfo.posAction = PosBasicActionType.WITHDRAW;

        transaction.additionalInfo.actions = [
            {
                type: NearTransactionActionType.FUNCTION_CALL,
                params: [
                    NearFunctionCallMethods.WITHDRAW,
                    { amount: tx.extraFields.amount },
                    NEAR_DEFAULT_FUNC_CALL_GAS,
                    new BN(0)
                ]
            }
        ];

        return transaction;
    }
}

'''
'''--- src/core/blockchain/near/index.ts ---
import { config } from './config';
import { networks } from './networks';
import { Client } from './client';
import { NearTransactionUtils } from './transaction';
import { NearAccountUtils } from './account';
import { IBlockchain, ChainIdType, Contracts } from '../types';
import { Stats } from './stats';

const account = new NearAccountUtils();
const transaction = new NearTransactionUtils();
const clients = {};

export const Near: IBlockchain = {
    config,
    networks,
    transaction,
    account,
    Client,
    getStats: (chainId: ChainIdType) => new Stats(new Client(chainId), config),
    getClient: (chainId: ChainIdType) => {
        if (!clients[chainId]) {
            clients[chainId] = new Client(chainId);
        }
        return clients[chainId];
    },
    getContract: async (chainId: ChainIdType, contractType: Contracts) => {
        return undefined;
    }
};

'''
'''--- src/core/blockchain/near/name-service.ts ---
import {
    IResolveTextResponse,
    IResolveNameResponse,
    ResolveTextType,
    ResolveTextCode
} from '../types';
import { Client as NearClient, Client } from './client';
import { GenericNameService, ResolveTextError } from '../types/name-service';

export class NameService extends GenericNameService {
    constructor(client: Client) {
        super(client);
    }

    public async resolveText(text: string): Promise<IResolveTextResponse> {
        try {
            const accountValid = await this.resolveName(text);
            return {
                code: ResolveTextCode.OK,
                type: ResolveTextType.NAME,
                address: accountValid.address,
                name: ''
            };
        } catch (error) {
            return Promise.reject(error);
        }
    }

    public async resolveName(text: string): Promise<IResolveNameResponse> {
        const client = this.client as NearClient;

        try {
            const account = await client.getAccount(text);
            if (account.valid === false) {
                return Promise.reject({
                    error: ResolveTextError.INVALID
                });
            } else {
                return {
                    address: account.address
                };
            }
        } catch (error) {
            return Promise.reject({
                error: ResolveTextError.CONNECTION_ERROR
            });
        }
    }
}

'''
'''--- src/core/blockchain/near/networks.ts ---
import { IBlockchainNetwork } from '../types';

export const networks: IBlockchainNetwork[] = [
    {
        name: 'Mainnet',
        chainId: 'mainnet',
        mainNet: true,
        url: 'https://rpc.mainnet.near.org',
        explorer: {
            name: 'Explorer',
            getAccountUrl: account => `https://explorer.mainnet.near.org/accounts/${account}`,
            getTransactionUrl: txn => `https://explorer.mainnet.near.org/transactions/${txn}`
        },
        links: {
            getWalletLoginUrl: (publicKey: string) =>
                `https://wallet.near.org/login/?title=Moonlet&referrer=Moonlet&public_key=${publicKey}`
        }
    },
    {
        name: 'Testnet',
        chainId: 'testnet',
        mainNet: false,
        url: 'https://rpc.testnet.near.org',
        explorer: {
            name: 'Explorer',
            getAccountUrl: account => `https://explorer.testnet.near.org/accounts/${account}`,
            getTransactionUrl: txn => `https://explorer.testnet.near.org/transactions/${txn}`
        },
        links: {
            getWalletLoginUrl: (publicKey: string) =>
                `https://wallet.testnet.near.org/login/?title=Moonlet&referrer=Moonlet&public_key=${publicKey}`
        }
    },
    {
        name: 'Betanet',
        chainId: 'betanet',
        mainNet: false,
        url: 'https://rpc.betanet.near.org',
        explorer: {
            name: 'Explorer',
            getAccountUrl: account => `https://explorer.betanet.near.org/accounts/${account}`,
            getTransactionUrl: txn => `https://explorer.betanet.near.org/transactions/${txn}`
        },
        links: {
            getWalletLoginUrl: (publicKey: string) =>
                `https://wallet.betanet.near.org/login/?title=Moonlet&referrer=Moonlet&public_key=${publicKey}`
        }
    }
];

'''
'''--- src/core/blockchain/near/stats.ts ---
import { GenericStats, AccountStats } from '../types/stats';
import { Client } from './client';
import { AccountType, IAccountState, ITokenState } from '../../../redux/wallets/state';
import { ApiClient } from '../../utils/api-client/api-client';
import BigNumber from 'bignumber.js';
import { config } from './config';

export class Stats extends GenericStats<Client> {
    public async getAccountDelegateStats(
        account: IAccountState,
        token: ITokenState
    ): Promise<AccountStats> {
        const data = await new ApiClient().validators.getAccountDelegateStats(
            account,
            this.client.chainId.toString()
        );
        return data;
    }

    public async getAvailableBalanceForDelegate(
        account: IAccountState,
        validatorId: string
    ): Promise<string> {
        const data = await new ApiClient().validators.getBalance(
            account.address,
            account.blockchain,
            this.client.chainId.toString(),
            validatorId
        );

        const unstaked = validatorId ? data.balance.unstaked : 0;

        let availableToDelegate = new BigNumber(unstaked || 0);

        const accountType = account?.type || AccountType.DEFAULT;

        if (new BigNumber(data.balance.available).gt(config.amountToKeepInAccount[accountType])) {
            availableToDelegate = availableToDelegate.plus(
                new BigNumber(data.balance.available).minus(
                    config.amountToKeepInAccount[accountType]
                )
            );
        }
        return availableToDelegate.toFixed();
    }
}

'''
'''--- src/core/blockchain/near/transaction.ts ---
import {
    IBlockchainTransaction,
    ITransferTransaction,
    TransactionType,
    AbstractBlockchainTransactionUtils,
    IPosTransaction
} from '../types';
import { Near } from './';
import { TransactionStatus } from '../../wallet/types';
import {
    transfer,
    createTransaction,
    signTransaction,
    functionCall
} from 'near-api-js/lib/transaction';
import { KeyPair, PublicKey } from 'near-api-js/lib/utils/key_pair';
import { base_decode } from 'near-api-js/lib/utils/serialize';
import BN from 'bn.js';
import sha256 from 'js-sha256';
import { getTokenConfig } from '../../../redux/tokens/static-selectors';
import { PosBasicActionType } from '../types/token';
import { Client as NearClient } from './client';
import cloneDeep from 'lodash/cloneDeep';
import BigNumber from 'bignumber.js';
import {
    INearTransactionAdditionalInfoType,
    NearAccountViewMethods,
    NearFunctionCallMethods,
    NearTransactionActionType
} from './types';
import { AccountType, IAccountState } from '../../../redux/wallets/state';
import { NEAR_TLD } from '../../constants/app';
import { NEAR_DEFAULT_FUNC_CALL_GAS, NEAR_CREATE_ACCOUNT_MIN_BALANCE } from './consts';
import { splitStake } from '../../utils/balance';
import {
    captureException as SentryCaptureException,
    addBreadcrumb as SentryAddBreadcrumb
} from '@sentry/react-native';

export class NearTransactionUtils extends AbstractBlockchainTransactionUtils {
    public async sign(
        tx: IBlockchainTransaction<INearTransactionAdditionalInfoType>,
        privateKey: string
    ): Promise<any> {
        // transaction actions
        const actions = tx.additionalInfo.actions
            .map(action => {
                switch (action.type) {
                    case NearTransactionActionType.TRANSFER:
                        return transfer(new BN(tx.amount));

                    case NearTransactionActionType.FUNCTION_CALL:
                        // @ts-ignore
                        return functionCall(...action.params);

                    default:
                        return false;
                }
            })
            .filter(Boolean);

        // setup KeyPair
        const keyPair = KeyPair.fromString(privateKey);

        // create transaction
        const nearTx = createTransaction(
            tx.address,
            PublicKey.fromString(tx.publicKey),
            tx.toAddress,
            tx.nonce,
            actions as any,
            base_decode(tx.additionalInfo.currentBlockHash)
        );

        // sign transaction
        const signer: any = {
            async signMessage(message) {
                const hash = new Uint8Array(sha256.sha256.array(message));
                return keyPair.sign(hash);
            },
            async getPublicKey() {
                return keyPair.getPublicKey();
            }
        };

        const signedTx = await signTransaction(nearTx, signer, tx.address, tx.chainId as string);

        return Buffer.from(signedTx[1].encode()).toString('base64');
    }

    public async buildTransferTransaction(
        tx: ITransferTransaction
    ): Promise<IBlockchainTransaction<INearTransactionAdditionalInfoType>> {
        const client = Near.getClient(tx.chainId);
        const nonce = await client.getNonce(tx.account.address, tx.account.publicKey);
        const blockInfo = await client.getCurrentBlock();

        const tokenConfig = getTokenConfig(tx.account.blockchain, tx.token);

        return {
            date: {
                created: Date.now(),
                signed: Date.now(),
                broadcasted: Date.now(),
                confirmed: Date.now()
            },
            blockchain: tx.account.blockchain,
            chainId: tx.chainId,
            type: TransactionType.TRANSFER,
            token: tokenConfig,

            address: tx.account.address,
            publicKey: tx.account.publicKey,

            toAddress: tx.toAddress,
            amount: tx.amount,
            feeOptions: tx.feeOptions,
            broadcastedOnBlock: blockInfo.number,
            nonce,
            status: TransactionStatus.PENDING,
            additionalInfo: {
                currentBlockHash: blockInfo.hash,
                actions: [
                    {
                        type: NearTransactionActionType.TRANSFER
                    }
                ]
            }
        };
    }

    public async buildPosTransaction(
        tx: IPosTransaction,
        transactionType: PosBasicActionType
    ): Promise<IBlockchainTransaction[]> {
        const client = Near.getClient(tx.chainId) as NearClient;
        const accountType = tx.account.type;

        const transactions: IBlockchainTransaction[] = [];

        switch (transactionType) {
            case PosBasicActionType.DELEGATE: {
                const splitAmount = splitStake(new BigNumber(tx.amount), tx.validators.length);

                const txDelegate: IPosTransaction = cloneDeep(tx);
                txDelegate.amount = splitAmount.toFixed(0, BigNumber.ROUND_DOWN);

                if (accountType === AccountType.DEFAULT) {
                    // DEFAULT
                    for (const validator of tx.validators) {
                        let depositAmount = new BigNumber(0);
                        try {
                            const unstaked = await client.contractCall({
                                contractName: validator.id,
                                methodName: NearAccountViewMethods.GET_ACCOUNT_UNSTAKED_BALANCE,
                                args: { account_id: tx.account.address }
                            });
                            depositAmount = new BigNumber(txDelegate.amount).minus(
                                new BigNumber(unstaked)
                            );
                        } catch (error) {
                            SentryAddBreadcrumb({
                                message: JSON.stringify({
                                    error,
                                    data: {
                                        contractName: validator.id,
                                        methodName:
                                            NearAccountViewMethods.GET_ACCOUNT_UNSTAKED_BALANCE,
                                        args: { account_id: tx.account.address }
                                    }
                                })
                            });

                            SentryCaptureException(
                                new Error(`Failed to call contract NEAR ${error?.code}`)
                            );
                        }

                        // Stake
                        const stakeTx: IBlockchainTransaction = await client.stakingPool.stake(
                            txDelegate,
                            validator,
                            depositAmount
                        );
                        stakeTx.nonce = stakeTx.nonce + transactions.length;
                        transactions.push(stakeTx);
                    }
                } else if (accountType === AccountType.LOCKUP_CONTRACT) {
                    // LOCKUP_CONTRACT

                    const validator = tx.validators[0]; // Can stake to only 1 validator
                    const nonce = await client.getNonce(
                        tx.account.meta.owner,
                        tx.account.publicKey
                    );

                    try {
                        const [stakingPoolId, depositBalance] = await Promise.all([
                            client.contractCall({
                                contractName: tx.account.address,
                                methodName: NearAccountViewMethods.GET_STAKING_POOL_ACCOUNT_ID
                            }),
                            client.contractCall({
                                contractName: tx.account.address,
                                methodName: NearAccountViewMethods.GET_KNOWN_DEPOSITED_BALANCE
                            })
                        ]);

                        if (
                            stakingPoolId &&
                            stakingPoolId !== validator.id &&
                            depositBalance === '0'
                        ) {
                            // UNSELECT STAKING POOL
                            const unselectSPTx = await client.lockup.unselectStakingPool(
                                txDelegate,
                                validator
                            );
                            unselectSPTx.nonce = nonce + transactions.length;
                            transactions.push(unselectSPTx);

                            // SELECT STAKING POOL
                            const selectSPTx = await client.lockup.selectStakingPool(
                                txDelegate,
                                validator
                            );
                            selectSPTx.nonce = nonce + transactions.length;
                            transactions.push(selectSPTx);
                        }

                        if (!stakingPoolId) {
                            // SELECT STAKING POOL
                            const selectSPTx = await client.lockup.selectStakingPool(
                                txDelegate,
                                validator
                            );
                            selectSPTx.nonce = nonce + transactions.length;
                            transactions.push(selectSPTx);
                        }
                    } catch (error) {
                        SentryAddBreadcrumb({
                            message: JSON.stringify({
                                error,
                                data: {
                                    contractName: validator.id
                                }
                            })
                        });
                        SentryCaptureException(
                            new Error(`Failed to call contract NEAR ${error?.code}`)
                        );
                    }

                    let unstakedAmount = new BigNumber(0);
                    try {
                        const unstaked = await client.contractCall({
                            contractName: validator.id,
                            methodName: NearAccountViewMethods.GET_ACCOUNT_UNSTAKED_BALANCE,
                            args: { account_id: tx.account.address }
                        });
                        unstakedAmount = new BigNumber(unstaked);
                    } catch (error) {
                        SentryAddBreadcrumb({
                            message: JSON.stringify({
                                error,
                                data: {
                                    contractName: validator.id,
                                    methodName: NearAccountViewMethods.GET_ACCOUNT_UNSTAKED_BALANCE,
                                    args: { account_id: tx.account.address }
                                }
                            })
                        });

                        SentryCaptureException(
                            new Error(`Failed to call contract NEAR ${error?.code}`)
                        );
                    }

                    const stakeTx = await client.lockup.stake(
                        txDelegate,
                        validator,
                        unstakedAmount
                    );
                    stakeTx.nonce = nonce + transactions.length;
                    transactions.push(stakeTx);
                } else {
                    // future account types
                }

                break;
            }
            case PosBasicActionType.UNSTAKE: {
                const txUnstake: IPosTransaction = cloneDeep(tx);

                // Unstake
                let unstakeTx: IBlockchainTransaction;

                if (accountType === AccountType.DEFAULT) {
                    // DEFAULT
                    unstakeTx = await client.stakingPool.unstake(txUnstake, tx.validators[0]);
                } else if (accountType === AccountType.LOCKUP_CONTRACT) {
                    // LOCKUP_CONTRACT
                    unstakeTx = await client.lockup.unstake(txUnstake, tx.validators[0]);
                    const nonce = await client.getNonce(unstakeTx.address, tx.account.publicKey);
                    unstakeTx.nonce = nonce;
                } else {
                    // future account types
                }

                transactions.push(unstakeTx);
                break;
            }
            case PosBasicActionType.WITHDRAW: {
                const txWithdraw: IPosTransaction = cloneDeep(tx);

                // Withdraw
                let withdrawTx: IBlockchainTransaction;

                if (accountType === AccountType.DEFAULT) {
                    // DEFAULT
                    withdrawTx = await client.stakingPool.withdraw(txWithdraw, tx.validators[0]);

                    withdrawTx.additionalInfo.validatorId =
                        tx?.extraFields?.validatorId || (tx?.validators && tx?.validators[0]?.id);
                    withdrawTx.additionalInfo.validatorName =
                        tx?.extraFields?.validatorName || (tx?.validators && tx.validators[0].name);
                } else if (accountType === AccountType.LOCKUP_CONTRACT) {
                    // LOCKUP_CONTRACT
                    withdrawTx = await client.lockup.withdraw(txWithdraw);

                    withdrawTx.additionalInfo.validatorId =
                        tx?.extraFields?.validatorId || (tx?.validators && tx?.validators[0]?.id);
                    withdrawTx.additionalInfo.validatorName =
                        tx?.extraFields?.validatorName || (tx?.validators && tx.validators[0].name);

                    const nonce = await client.getNonce(withdrawTx.address, tx.account.publicKey);
                    withdrawTx.nonce = nonce;

                    try {
                        const unstaked = await client.contractCall({
                            contractName: withdrawTx.additionalInfo.validatorId,
                            methodName: NearAccountViewMethods.GET_ACCOUNT_UNSTAKED_BALANCE,
                            args: { account_id: tx.account.address }
                        });
                        withdrawTx.amount = unstaked;
                    } catch (error) {
                        SentryCaptureException(new Error(JSON.stringify(error)));
                    }
                } else {
                    // future account types
                }

                transactions.push(withdrawTx);
                break;
            }

            default:
                break;
        }

        return transactions;
    }

    public getTransactionAmount(tx: IBlockchainTransaction): string {
        return tx.amount;
    }

    public getTransactionStatusByCode(status: any): TransactionStatus {
        if (status?.hasOwnProperty('SuccessValue')) {
            return TransactionStatus.SUCCESS;
        } else {
            return TransactionStatus.FAILED;
        }
    }

    public async buildDropLinkTransaction(tx: {
        account: IAccountState;
        newPublicKey: string;
        tokenSymbol: string;
        chainId: string;
    }) {
        const client = Near.getClient(tx.chainId);
        const nonce = await client.getNonce(tx.account.address, tx.account.publicKey);
        const blockInfo = await client.getCurrentBlock();

        const tokenConfig = getTokenConfig(tx.account.blockchain, tx.tokenSymbol);

        return {
            date: {
                created: Date.now(),
                signed: Date.now(),
                broadcasted: Date.now(),
                confirmed: Date.now()
            },
            blockchain: tx.account.blockchain,
            chainId: tx.chainId,
            type: TransactionType.TRANSFER,
            token: tokenConfig,

            address: tx.account.address,
            publicKey: tx.account.publicKey,

            toAddress: NEAR_TLD[tx.chainId],
            amount: '0',
            feeOptions: undefined,
            broadcastedOnBlock: blockInfo.number,
            nonce,
            status: TransactionStatus.PENDING,
            additionalInfo: {
                currentBlockHash: blockInfo.hash,
                actions: [
                    {
                        type: NearTransactionActionType.FUNCTION_CALL,
                        params: [
                            NearFunctionCallMethods.SEND,
                            { public_key: tx.newPublicKey },
                            NEAR_DEFAULT_FUNC_CALL_GAS,
                            NEAR_CREATE_ACCOUNT_MIN_BALANCE
                        ]
                    }
                ],
                posAction: PosBasicActionType.SEND
            }
        };
    }

    public async buildClaimAccountTransaction(tx: {
        account: IAccountState;
        newAccountId: string;
        newPublicKey: string;
        tokenSymbol: string;
        chainId: string;
    }) {
        const client = Near.getClient(tx.chainId);
        const nonce = await client.getNonce(tx.account.address, tx.account.publicKey);
        const blockInfo = await client.getCurrentBlock();

        const tokenConfig = getTokenConfig(tx.account.blockchain, tx.tokenSymbol);

        return {
            date: {
                created: Date.now(),
                signed: Date.now(),
                broadcasted: Date.now(),
                confirmed: Date.now()
            },
            blockchain: tx.account.blockchain,
            chainId: tx.chainId,
            type: TransactionType.TRANSFER,
            token: tokenConfig,

            address: NEAR_TLD[tx.chainId],
            publicKey: tx.account.publicKey,

            toAddress: NEAR_TLD[tx.chainId],
            amount: '0',
            feeOptions: undefined,
            broadcastedOnBlock: blockInfo.number,
            nonce,
            status: TransactionStatus.PENDING,
            additionalInfo: {
                currentBlockHash: blockInfo.hash,
                actions: [
                    {
                        type: NearTransactionActionType.FUNCTION_CALL,
                        params: [
                            NearFunctionCallMethods.CREATE_ACCOUNT_AND_CLAIM,
                            {
                                new_account_id: tx.newAccountId,
                                new_public_key: tx.newPublicKey
                            },
                            NEAR_DEFAULT_FUNC_CALL_GAS,
                            new BN(0)
                        ]
                    }
                ],
                posAction: PosBasicActionType.CREATE_ACCOUNT_AND_CLAIM
            }
        };
    }
}

'''
'''--- src/core/blockchain/near/types.ts ---
import BigNumber from 'bignumber.js';
import { PosBasicActionType } from '../types/token';

export enum NearTransactionActionType {
    TRANSFER = 'TRANSFER',
    FUNCTION_CALL = 'FUNCTION_CALL'
}

export enum NearFunctionCallMethods {
    DEPOSIT = 'deposit',
    STAKE = 'stake',
    UNSTAKE = 'unstake',
    WITHDRAW = 'withdraw',
    WITHDRAW_ALL_FROM_STAKING_POOL = 'withdraw_all_from_staking_pool',
    SEND = 'send',
    CREATE_ACCOUNT_AND_CLAIM = 'create_account_and_claim',
    DEPOSIT_AND_STAKE = 'deposit_and_stake',
    SELECT_STAKING_POOL = 'select_staking_pool',
    UNSELECT_STAKING_POOL = 'unselect_staking_pool',
    STAKE_ALL = 'stake_all'
}

export interface INearTransactionAction {
    type: NearTransactionActionType;
    params?: any[];
}

export interface INearTransactionAdditionalInfoType {
    currentBlockHash: string;
    actions: INearTransactionAction[];
    posAction?: PosBasicActionType;
    validatorName?: string;
}

export enum NearAccountType {
    DEFAULT = 'DEFAULT',
    CONTRACT = 'CONTRACT'
}

export interface INearAccount {
    address: string;
    name: string;
    amount: BigNumber;
    exists: boolean;
    valid: boolean;
    type?: NearAccountType;
}

export enum NearQueryRequestTypes {
    CALL_FUNCTION = 'call_function',
    VIEW_ACCOUNT = 'view_account',
    VIEW_ACCESS_KEY = 'view_access_key'
}

export enum NearAccountViewMethods {
    GET_OWNER_ACCOUNT_ID = 'get_owner_account_id',
    GET_STAKING_POOL_ACCOUNT_ID = 'get_staking_pool_account_id',
    GET_ACCOUNT_UNSTAKED_BALANCE = 'get_account_unstaked_balance',
    GET_KNOWN_DEPOSITED_BALANCE = 'get_known_deposited_balance'
}

'''
'''--- src/core/blockchain/solana/account.ts ---
import { AccountType, IAccountState } from '../../../redux/wallets/state';

import { Blockchain, IBlockchainAccountUtils } from '../types';
import { BigNumber } from 'bignumber.js';
import { config } from './config';
import { convert } from '../common/account';
import { generateTokensConfig } from '../../../redux/tokens/static-selectors';
import { encode as bs58Encode, decode as bs58Decode } from 'bs58';
import * as nacl from 'tweetnacl';
import { HDKeyEd25519 } from '../../wallet/hd-wallet/hd-key/hd-key-ed25519';
import { translate } from '../../i18n';

export class SolanaAccountUtils implements IBlockchainAccountUtils {
    public getAccountDerivationPath(accountIndex): string {
        return `${accountIndex}'`;
    }

    public getPrivateKeyFromDerived(derivedKey: HDKeyEd25519): string {
        const keyPair = nacl.sign.keyPair.fromSeed(derivedKey.key);
        return bs58Encode(Buffer.from(keyPair.secretKey));
    }

    public isValidChecksumAddress(address: string): boolean {
        const decoded = bs58Decode(address);
        return decoded.length === 32;
    }

    public isValidAddress(address: string): boolean {
        const decoded = bs58Decode(address);
        return decoded.length === 32;
    }

    public publicToAddress(publicKey: string): string {
        return bs58Encode(Buffer.from(publicKey));
    }

    public privateToPublic(privateKey: string): string {
        const keyPair = nacl.sign.keyPair.fromSecretKey(bs58Decode(privateKey));
        return bs58Encode(Buffer.from(keyPair.publicKey));
    }

    public privateToAddress(privateKey: string): string {
        return this.privateToPublic(privateKey);
    }

    public getAccountFromPrivateKey(privateKey: string, index: number): IAccountState {
        return {
            index,
            type: index === -1 ? AccountType.ROOT : AccountType.DEFAULT,
            selected: false,
            publicKey: this.privateToPublic(privateKey),
            address: this.privateToAddress(privateKey),
            blockchain: Blockchain.SOLANA,
            tokens: generateTokensConfig(Blockchain.SOLANA),
            name: index === -1 ? translate('App.labels.rootAccount') : undefined
        };
    }

    public amountToStd(
        value: BigNumber | number | string,
        decimals: number = config.tokens[config.coin].decimals
    ): BigNumber {
        return new BigNumber(value).multipliedBy(new BigNumber(10).pow(decimals));
    }

    amountFromStd(
        value: BigNumber | number | string,
        decimals: number = config.tokens[config.coin].decimals
    ): BigNumber {
        return new BigNumber(value).dividedBy(new BigNumber(10).pow(decimals));
    }

    convertUnit(value: BigNumber, from: string, to: string): BigNumber {
        return convert(value, from, to, config);
    }
}

'''
'''--- src/core/blockchain/solana/client-utils.ts ---
import { IClientUtils } from '../types/client-utils';
import { Client } from './client';
import { IBlockchainTransaction, Blockchain, TransactionType } from '../types';
import { TransactionInstruction } from '@solana/web3.js/src/transaction';
import { SystemInstruction } from '@solana/web3.js/src/system-program';
import { StakeInstruction } from '@solana/web3.js/src/stake-program';
import { config } from './config';
import { ITokenConfigState } from '../../../redux/tokens/state';
import { TransactionStatus } from '../../wallet/types';
import { PublicKey } from '@solana/web3.js/src/publickey';
import { decode as bs58Decode } from 'bs58';
import { getBlockchain } from '../blockchain-factory';

export class ClientUtils implements IClientUtils {
    constructor(private client: Client) {}

    async getTransaction(
        hash: string,
        options: { address: string }
    ): Promise<IBlockchainTransaction> {
        return (
            this.client.http
                // TODO: migrate to `getTransaction` before mainnet update to 1.8
                .jsonRpc('getConfirmedTransaction', [hash, 'json'])
                .then(response =>
                    this.buildTransactionFromBlockchain(response.result, options.address)
                )
        );
    }

    async buildTransactionFromBlockchain(txData, address: string): Promise<IBlockchainTransaction> {
        const token = config.tokens.SOL;
        let toAddress = '';
        let fromAddress = '';
        let amount = '';

        if (!txData?.transaction) {
            throw new Error('SOL invalid txData');
        }

        // for transfer - TBD for the rest
        const accountKeys = txData.transaction.message.accountKeys;
        if (accountKeys[0].toLowerCase() === address.toLowerCase()) {
            toAddress = accountKeys[1];
            fromAddress = accountKeys[0];
        }

        // TODO - change this when multiple instructions
        const instruction = txData.transaction.message.instructions[0];

        const programId =
            accountKeys.length >= instruction.programIdIndex
                ? new PublicKey(accountKeys[instruction.programIdIndex])
                : new PublicKey('11111111111111111111111111111111');

        const txInstruction: TransactionInstruction = {
            data: Buffer.from(bs58Decode(instruction.data)),
            programId,
            keys: [new PublicKey(fromAddress), new PublicKey(toAddress), programId]
        };

        let type = '';
        try {
            type = SystemInstruction.decodeInstructionType(txInstruction);
        } catch {
            type = undefined;
        }
        if (type === undefined) {
            try {
                type = StakeInstruction.decodeInstructionType(txInstruction);
            } catch {
                type = undefined;
            }
        }

        if (type && type === 'Transfer') {
            const transfer = SystemInstruction.decodeTransfer(txInstruction);
            amount = transfer.lamports.toString();
        }
        // TODO
        // else if (type && type === 'Delegate') {
        //     const delegate = StakeInstruction.decodeDelegate(txInstruction);
        // }
        const data: any = {};

        return {
            id: txData.transaction.signatures[0],
            date: {
                created: Date.now(),
                signed: Date.now(),
                broadcasted: Date.now(),
                confirmed: Date.now()
            },
            blockchain: Blockchain.SOLANA,
            chainId: this.client.chainId,
            type: type === 'Transfer' ? TransactionType.TRANSFER : TransactionType.CONTRACT_CALL,

            address: fromAddress,
            publicKey: fromAddress,
            toAddress,
            amount,
            data,
            feeOptions: {
                gasPrice: '',
                gasLimit: '',
                feeTotal: txData.meta.fee
            },
            broadcastedOnBlock: txData.slot,
            nonce: undefined,
            status: await this.getTransactionStatus(txData.transaction.signatures[0], {
                txData,
                token
            }),
            token
        };
    }

    public async getTransactionStatus(
        hash: string,
        context?: {
            txData?: any;
            broadcastedOnBlock?: number;
            currentBlockNumber?: number;
            token?: ITokenConfigState;
        }
    ): Promise<TransactionStatus> {
        let status: TransactionStatus = TransactionStatus.PENDING;

        if (context?.txData) {
            status =
                !context?.txData?.meta?.err === null
                    ? TransactionStatus.SUCCESS
                    : TransactionStatus.FAILED;
        } else {
            let confirmedTxRes;

            const droppedTxBlocksThreshold = getBlockchain(Blockchain.SOLANA).config
                .droppedTxBlocksThreshold;
            const currentBlockNumber = await this.client.getCurrentBlock().then(res => res.number);
            const currentBlockPassedThreshold =
                currentBlockNumber &&
                context?.broadcastedOnBlock &&
                currentBlockNumber - context?.broadcastedOnBlock > droppedTxBlocksThreshold;

            try {
                // supported for solana-core v1.7 or newer
                confirmedTxRes = await this.client.http.jsonRpc('getTransaction', [hash, 'json']);

                if (String(confirmedTxRes?.error?.message).includes('Method not found')) {
                    // reset this to use fallback on older version
                    confirmedTxRes = null;
                }

                // Transaction dropped
                if (
                    (!confirmedTxRes?.result || confirmedTxRes?.error?.message) &&
                    currentBlockPassedThreshold
                ) {
                    status = TransactionStatus.DROPPED;
                }
            } catch {
                // reset this to use fallback on older version
                confirmedTxRes = null;

                if (currentBlockPassedThreshold) {
                    status = TransactionStatus.DROPPED;
                }
            }

            if (!confirmedTxRes) {
                try {
                    // fallback, deprecated, expected to be removed in solana-core v1.8
                    confirmedTxRes = await this.client.http.jsonRpc('getConfirmedTransaction', [
                        hash,
                        'json'
                    ]);
                } catch {
                    if (currentBlockPassedThreshold) {
                        status = TransactionStatus.DROPPED;
                    }
                }
            }

            // Transaction dropped
            if (
                (!confirmedTxRes?.result || confirmedTxRes?.error?.message) &&
                currentBlockPassedThreshold
            ) {
                status = TransactionStatus.DROPPED;
            }

            if (confirmedTxRes?.result?.meta) {
                status = !confirmedTxRes?.result?.meta?.err
                    ? TransactionStatus.SUCCESS
                    : TransactionStatus.FAILED;
            }
        }

        return status;
    }
}

'''
'''--- src/core/blockchain/solana/client.ts ---
import {
    Blockchain,
    BlockchainGenericClient,
    ChainIdType,
    Contracts,
    ISolanaBalance,
    IBlockInfo,
    ITransactionFees,
    TransactionType,
    TypedTransaction
} from '../types';
import { BigNumber } from 'bignumber.js';
import { networks } from './networks';
import { config } from './config';
import { NameService } from './name-service';
import { TokenType } from '../types/token';
import { ClientUtils } from './client-utils';
import { Connection } from '@solana/web3.js/src/connection';
import { Staking } from './contracts/staking';
import { ApiClient } from '../../utils/api-client/api-client';
import { SplClient } from './tokens/spl-client';

export class Client extends BlockchainGenericClient {
    private connection: Connection;

    constructor(chainId: ChainIdType) {
        super(chainId, networks);

        this.nameService = new NameService(this);
        this.utils = new ClientUtils(this);
        this.connection = new Connection(this.network.url);
        this.contracts[Contracts.STAKING] = new Staking(this);
        this.tokens[TokenType.SPL] = new SplClient(this);
    }

    public async getBalance(address: string): Promise<ISolanaBalance> {
        let balance: ISolanaBalance = {
            total: new BigNumber(0),
            available: new BigNumber(0),
            staked: new BigNumber(0),
            unstaked: new BigNumber(0),
            deactivating: new BigNumber(0),
            activating: new BigNumber(0),
            reward: new BigNumber(0),
            detailed: {}
        };

        try {
            const data = await new ApiClient().validators.getBalance(
                address,
                Blockchain.SOLANA,
                this.chainId.toString()
            );

            balance = {
                total: data?.balance?.total || balance.total,
                available: data?.balance?.available || balance.available,
                staked: data?.balance?.staked || balance.staked,
                unstaked: data?.balance?.unstaked || balance.unstaked,
                deactivating: data?.balance?.deactivating || balance.deactivating,
                activating: data?.balance?.activating || balance.activating,
                reward: data?.balance?.reward || balance.reward,
                detailed: data?.balance?.detailed || balance.detailed
            };
        } catch {
            // no need to handle this
        }

        return balance;
    }

    public async getTransactionFees(txHash: string): Promise<ITransactionFees> {
        try {
            // TODO: migrate to `getTransaction` before mainnet update to 1.8
            const confirmedTxRes = await this.http.jsonRpc('getConfirmedTransaction', [
                txHash,
                'json'
            ]);

            if (confirmedTxRes?.result?.meta?.fee) {
                return {
                    gasPrice: '0',
                    gasLimit: '0',
                    gasUsed: '0',
                    feeTotal: confirmedTxRes?.result?.meta?.fee
                };
            } else {
                return;
            }
        } catch (error) {
            throw new Error(error);
        }
    }

    public async getNonce(address: string): Promise<number> {
        return 1;
    }

    public async getCurrentBlock(): Promise<IBlockInfo> {
        return this.http.jsonRpc('getSlot', []).then(res => {
            return {
                hash: res.result,
                number: res.result
            };
        });
    }

    public async getCurrentBlockHash(): Promise<string> {
        return this.http.jsonRpc('getRecentBlockhash', [{ commitment: 'finalized' }]).then(res => {
            return res?.result?.value?.blockhash;
        });
    }

    public async sendTransaction(transaction): Promise<{ txHash: string; rawResponse: any }> {
        try {
            const res = await this.connection.sendRawTransaction(transaction);
            if (res) {
                return {
                    txHash: res,
                    rawResponse: res
                };
            } else {
                throw new Error(res);
            }
        } catch (error) {
            throw new Error(error);
        }
    }

    public async getTransactionConfirmations(
        txsHash: string
    ): Promise<{
        confirmations: number;
    }> {
        const response = await this.http.jsonRpc('getSignatureStatuses', [
            [txsHash],
            { searchTransactionHistory: true }
        ]);

        let confirmations = 0;

        if (response?.result?.value[0]?.confirmations) {
            confirmations = response.result.value[0].confirmations;
        }

        // this means confirmations has reached max
        if (response?.result?.value && response?.result?.value[0]?.confirmations === null) {
            confirmations = null;
        }

        return { confirmations };
    }

    public async calculateFees(
        from: string,
        to: string,
        amount?,
        contractAddress?,
        tokenType: TokenType = TokenType.NATIVE
    ) {
        const gasLimit = config.feeOptions.defaults.gasLimit[tokenType];

        try {
            const result = await this.estimateFees();

            const gasPrice = result.result
                ? new BigNumber(Number(result.result))
                : config.feeOptions.defaults.gasPrice;

            return {
                gasPrice: gasPrice.toString(),
                gasLimit: gasLimit.toString(),
                feeTotal: gasPrice.multipliedBy(gasLimit).toString()
            };
        } catch {
            const gasPrice = config.feeOptions.defaults.gasPrice;
            return {
                gasPrice: gasPrice.toString(),
                gasLimit: gasLimit.toString(),
                feeTotal: gasPrice.multipliedBy(gasLimit).toString()
            };
        }
    }

    private async estimateFees(): Promise<any> {
        return 0;
        //  return this.http.jsonRpc('GetMinimumGasPrice', []);
    }

    public async getFees(
        transactionType: TransactionType,

        data: {
            from?: string;
            to?: string;
            amount?: string;
            contractAddress?: string;
            raw?: string;
        },
        typedTransaction: TypedTransaction = TypedTransaction.TYPE_0,
        tokenType: TokenType = TokenType.NATIVE
    ) {
        const gasPrice = config.feeOptions.defaults.gasPrice.toFixed();
        const gasLimit = config.feeOptions.defaults.gasLimit[tokenType].toFixed();
        const feeTotal = new BigNumber(gasPrice).multipliedBy(new BigNumber(gasLimit)).toFixed();

        return {
            gasPrice,
            gasLimit,
            feeTotal
        };
    }

    public async getMinimumAmountDelegate(): Promise<BigNumber> {
        return new BigNumber(0);
    }

    public async isActiveToken(
        contractAddress: string,
        accountAddress: string,
        tokenType: TokenType
    ) {
        return this.tokens[tokenType].isActive(contractAddress, accountAddress);
    }
}

'''
'''--- src/core/blockchain/solana/config.ts ---
import { IBlockchainConfig, DerivationType, TypedTransaction } from '../types';
import { BigNumber } from 'bignumber.js';
import { TokenType, TokenScreenComponentType } from '../types/token';
import SolIcon from '../../../assets/icons/blockchains/sol.svg';
import { ITokenConfigState } from '../../../redux/tokens/state';
import { AffiliateBannerType } from '../../../components/affiliate-banner/types';
import { AccountType } from '../../../redux/wallets/state';
import { IconValues } from '../../../components/icon/values';
import { USDC_MAINNET, USDC_TESTNET } from './tokens/usdc';
import { USDT_MAINNET } from './tokens/usdt';
import { BTC_MAINNET } from './tokens/btc';
import { ETH_MAINNET } from './tokens/eth';
import { SRM_MAINNET } from './tokens/srm';
import { RAY_MAINNET } from './tokens/ray';

export const SOL_NATIVE: ITokenConfigState = {
    name: 'Solana',
    symbol: 'SOL',
    icon: {
        iconComponent: SolIcon
    },
    defaultOrder: 0,
    decimals: 9,
    removable: false,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DELEGATE
    },
    type: TokenType.NATIVE,
    units: {
        NA: new BigNumber(1),
        LA: new BigNumber(Math.pow(10, 9)),
        SOL: new BigNumber(Math.pow(10, 9))
    }
};

const accountCTA = {
    mainCta: {
        title: 'App.labels.stakeNow',
        iconName: IconValues.VOTE,
        navigateTo: {
            screen: 'SmartScreen',
            params: {
                context: {
                    screen: 'StakeNow',
                    step: 'StakeToMoonlet',
                    key: 'stake-to-moonlet'
                },
                navigationOptions: {
                    title: 'Stake now',
                    headerStyle: {
                        backgroundColor: '#005067',
                        borderBottomWidth: 0,
                        shadowColor: 'transparent'
                    }
                },
                background: {
                    gradient: ['#005067', '#061529']
                },
                newFlow: true
            }
        }
    }
};

const validatorCTA = {
    mainCta: {
        title: 'App.labels.stake',
        iconName: IconValues.VOTE,
        navigateTo: {
            screen: 'SmartScreen',
            params: {
                context: {
                    screen: 'StakeNow',
                    step: 'SelectStakeAccount',
                    key: 'select-stake-account'
                },
                navigationOptions: {
                    title: 'Stake now'
                },
                newFlow: true
            }
        }
    },
    otherCtas: [
        {
            title: 'App.labels.unstake',
            iconName: IconValues.UNVOTE,
            navigateTo: {
                screen: 'SmartScreen',
                params: {
                    context: {
                        screen: 'StakingAccount',
                        key: 'solana-staking-account'
                    },
                    navigationOptions: {
                        title: 'Staking accounts'
                    },
                    newFlow: true
                }
            }
        }
    ]
};

export const config: IBlockchainConfig = {
    derivationPath: `m/44'/501'`,
    derivationType: DerivationType.HD_KEY_ED25519,
    coin: 'SOL',
    defaultUnit: 'NA',
    droppedTxBlocksThreshold: 360,
    iconComponent: SolIcon,
    autoAddedTokensSymbols: {
        '1': {
            USDT: USDT_MAINNET,
            USDC: USDC_MAINNET,
            BTC: BTC_MAINNET,
            ETH: ETH_MAINNET,
            SRM: SRM_MAINNET,
            RAY: RAY_MAINNET
        },
        '3': {
            USDC: USDC_TESTNET
        }
    },
    tokens: {
        SOL: SOL_NATIVE
    },
    typedTransaction: {
        HD: TypedTransaction.TYPE_0,
        HW: TypedTransaction.TYPE_0
    },
    feeOptions: {
        gasPriceToken: 'SOL',
        defaults: {
            gasPrice: new BigNumber(10000000),
            gasLimit: {
                [TokenType.NATIVE]: new BigNumber(1),
                [TokenType.SPL]: new BigNumber(1)
            }
        },
        ui: {
            availableTokenTypes: [],
            feeComponent: 'FeeTotal',
            feeComponentAdvanced: {
                HD: 'GasFeeAdvanced',
                HW: 'GasFeeAdvanced'
            },
            gasPriceUnit: 'LA'
        }
    },
    ui: {
        validator: {
            totalLabel: 'Validator.totalStakes',
            amountCardLabel: 'App.labels.staked',
            maximumNumberOfValidators: 9999 // TBD
        },
        token: {
            labels: {
                tabAccount: 'App.labels.account',
                tabDelegations: 'App.labels.myStakes',
                tabValidators: 'App.labels.validators',
                tabTransactions: 'App.labels.transactions'
            },
            actionScreenLabels: {},
            sendStepLabels: [
                'Validator.selectValidator',
                'App.labels.enterAmount',
                'Validator.confirmStake'
            ],
            accountCTA,
            delegationCTA: {
                mainCta: accountCTA.mainCta
            },
            validatorCTA
        },
        addressDisplay: 'stripped',
        enableTokenManagement: true,
        enableAccountCreation: false,
        maxAccountsNumber: 5,
        displayName: 'SOL',
        affiliateBanners: {
            account: AffiliateBannerType.LEDGER_NANO_X
        },
        fetchAccountStatsSec: 1
    },
    networks: {
        testNet: '3',
        mainNet: '1'
    },
    defaultOrder: 0,
    amountToKeepInAccount: {
        [AccountType.DEFAULT]: new BigNumber(10).pow(9).dividedBy(100), // 0.01 SOL
        [AccountType.ROOT]: new BigNumber(10).pow(9).dividedBy(100) // 0.01 SOL
    }
};

'''
'''--- src/core/blockchain/solana/contracts/base-contract.ts ---
import { IPosTransaction, IBlockchainTransaction, TransactionType } from '../../types';
import { getTokenConfig } from '../../../../redux/tokens/static-selectors';
import { TransactionStatus } from '../../../wallet/types';
import { Client as SolanaClient } from '../client';
import { Solana } from '..';
import { IStakeAccountFormat } from '../types';
import { PosBasicActionType } from '../../types/token';
import CryptoJS from 'crypto-js';
import { encode as bs58Encode, decode as bs58Decode } from 'bs58';
import BigNumber from 'bignumber.js';

export const stakeProgramId = 'Stake11111111111111111111111111111111111111';
export const programId = '11111111111111111111111111111111111111';

export const buildBaseTransaction = async (
    tx: IPosTransaction
): Promise<IBlockchainTransaction> => {
    const tokenConfig = getTokenConfig(tx.account.blockchain, tx.token);

    const client = Solana.getClient(tx.chainId) as SolanaClient;
    const nonce = 1;

    const blockHash = await client.getCurrentBlockHash();
    const blockInfo = await client.getCurrentBlock();

    return {
        date: {
            created: Date.now(),
            signed: Date.now(),
            broadcasted: Date.now(),
            confirmed: Date.now()
        },
        blockchain: tx.account.blockchain,
        chainId: tx.chainId,
        type: TransactionType.CONTRACT_CALL,
        token: tokenConfig,
        address: tx.account.address,
        publicKey: tx.account.publicKey,
        toAddress: '',
        amount: tx.amount,
        feeOptions: tx.feeOptions,
        broadcastedOnBlock: blockInfo?.number,
        nonce,
        status: TransactionStatus.PENDING,
        data: {
            params: ['', tx.extraFields.amount]
        },
        additionalInfo: {
            currentBlockHash: blockHash
        }
    };
};

function hash(h, v) {
    // @ts-ignore
    h.update(CryptoJS.lib.WordArray.create(Buffer.from(v)));
}

export const generateStakeAccount = (address: string, index: number): string => {
    const sha256 = CryptoJS.algo.SHA256.create();
    hash(sha256, bs58Decode(address));
    hash(sha256, `stake:${index}`);
    hash(sha256, bs58Decode(stakeProgramId));
    const pub = Buffer.from(sha256.finalize().toString(), 'hex');
    return bs58Encode(pub);
};

const stakeAccountWithExactAmount = (
    accounts: {
        [key: string]: IStakeAccountFormat;
    },
    action: PosBasicActionType,
    amount: string
): string => {
    const amountForAction: BigNumber = new BigNumber(amount);
    let stakeAccountAddress;

    Object.keys(accounts).map(address => {
        const account = accounts[address];
        switch (action) {
            case PosBasicActionType.DELEGATE:
                if (amountForAction.isEqualTo(account.unstaked)) stakeAccountAddress = address;
                break;
            case PosBasicActionType.UNSTAKE:
                if (
                    amountForAction.isEqualTo(new BigNumber(account.staked)) ||
                    amountForAction.isEqualTo(new BigNumber(account.activating))
                )
                    stakeAccountAddress = address;
                break;
        }
    });

    return stakeAccountAddress;
};

export const selectStakeAccounts = (
    baseAddress: string,
    accounts: {
        [key: string]: IStakeAccountFormat;
    },
    action: PosBasicActionType,
    amount: string,
    usedStakedAccounts: string[],
    validatorId?: string
): {
    [key: string]: {
        amount?: string;
        options?: {
            shouldCreate?: boolean;
            shouldSplit?: boolean;
            splitFrom?: string;
            index?: number;
        };
    };
} => {
    const selectedStakeAccounts = {};
    let amountForAction: BigNumber = new BigNumber(amount);

    switch (action) {
        case PosBasicActionType.DELEGATE:
            const stakeAccountKey = stakeAccountWithExactAmount(accounts, action, amount);

            if (stakeAccountKey) {
                selectedStakeAccounts[stakeAccountKey] = {
                    amount
                };
            } else {
                Object.keys(accounts).map(address => {
                    if (amountForAction.isGreaterThan(0) && !usedStakedAccounts.includes(address)) {
                        const account = accounts[address];
                        if (account.unstaked && new BigNumber(account.unstaked).isGreaterThan(0)) {
                            if (
                                new BigNumber(amountForAction).isGreaterThanOrEqualTo(
                                    account.unstaked
                                )
                            ) {
                                selectedStakeAccounts[address] = {
                                    amount: account.unstaked
                                };
                                amountForAction = amountForAction.minus(account.unstaked);
                            } else {
                                // split
                                const newIndex = Object.keys(accounts).length;
                                const newStakeAccountAddress = generateStakeAccount(
                                    baseAddress,
                                    newIndex
                                );
                                selectedStakeAccounts[newStakeAccountAddress] = {
                                    amount: amountForAction,
                                    options: {
                                        shouldSplit: true,
                                        splitFrom: address,
                                        index: newIndex
                                    }
                                };
                                amountForAction = new BigNumber(0);
                            }
                        }
                    }
                });
                if (amountForAction.isGreaterThan(0)) {
                    let newIndex;
                    let prevKey;
                    Object.keys(accounts).map(key => {
                        const currentObject = accounts[key];
                        if (prevKey) {
                            const prevObject = accounts[prevKey];
                            if (currentObject.index - prevObject.index !== 1) {
                                newIndex = currentObject.index - 1;
                            }
                        }
                        prevKey = key;
                    });

                    if (newIndex === undefined) newIndex = Object.keys(accounts).length;

                    const newStakeAccountAddress = generateStakeAccount(baseAddress, newIndex);
                    selectedStakeAccounts[newStakeAccountAddress] = {
                        amount: amountForAction,
                        options: { shouldCreate: true, index: newIndex }
                    };
                }
            }

            break;
        case PosBasicActionType.UNSTAKE:
            const stakeAccountAddress = stakeAccountWithExactAmount(accounts, action, amount);
            if (stakeAccountAddress) {
                selectedStakeAccounts[stakeAccountAddress] = {
                    amount
                };
            } else
                Object.keys(accounts).map(address => {
                    const account = accounts[address];

                    if (
                        amountForAction.isGreaterThan(0) &&
                        !usedStakedAccounts.includes(address) &&
                        account.validatorId === validatorId
                    ) {
                        if (account.staked && new BigNumber(account.staked).isGreaterThan(0)) {
                            if (
                                new BigNumber(amountForAction).isGreaterThanOrEqualTo(
                                    account.staked
                                )
                            ) {
                                selectedStakeAccounts[address] = {
                                    amount: account.staked
                                };
                                amountForAction = amountForAction.minus(account.staked);
                            } else {
                                const newIndex = Object.keys(accounts).length;
                                const newStakeAccountAddress = generateStakeAccount(
                                    baseAddress,
                                    newIndex
                                );
                                selectedStakeAccounts[newStakeAccountAddress] = {
                                    amount: amountForAction,
                                    options: {
                                        shouldSplit: true,
                                        splitFrom: address,
                                        index: newIndex
                                    }
                                };
                                amountForAction = new BigNumber(0);
                            }
                        } else if (
                            account.activating &&
                            new BigNumber(account.activating).isGreaterThan(0)
                        ) {
                            if (
                                new BigNumber(amountForAction).isGreaterThanOrEqualTo(
                                    account.activating
                                )
                            ) {
                                selectedStakeAccounts[address] = {
                                    amount: account.activating
                                };
                                amountForAction = amountForAction.minus(account.activating);
                            } else {
                                // split
                            }
                        }
                    }
                });
            break;
    }

    return selectedStakeAccounts;
};

'''
'''--- src/core/blockchain/solana/contracts/instructions.ts ---
import { Blockchain, IPosTransaction } from '../../types';
import { IValidator } from '../../types/stats';

import { Authorized, Lockup } from '@solana/web3.js/src/stake-program';
import { PublicKey } from '@solana/web3.js/src/publickey';
import { ISolanaTransactionInstruction, SolanaTransactionInstructionType } from '../types';
import { getBlockchain } from '../../blockchain-factory';
import { getTokenConfig } from '../../../../redux/tokens/static-selectors';

export const createAccountWithSeedInstruction = (
    tx: IPosTransaction
): ISolanaTransactionInstruction => {
    // TODO - find correct stake account and seed
    const stakePubkey = new PublicKey(tx.extraFields.stakeAccountKey);
    const seed = `stake:${tx.extraFields.stakeAccountIndex}`;
    const baseAccountKey = new PublicKey(tx.account.address);
    return {
        type: SolanaTransactionInstructionType.CREATE_ACCOUNT_WITH_SEED,
        instruction: {
            fromPubkey: baseAccountKey,
            stakePubkey,
            basePubkey: baseAccountKey,
            seed,
            lamports: tx.amount,
            authorized: new Authorized(baseAccountKey, baseAccountKey),
            lockup: new Lockup(0, 0, baseAccountKey)
        }
    };
};

export const splitInstruction = async (
    tx: IPosTransaction,
    splitStakePubkey: string
): Promise<ISolanaTransactionInstruction> => {
    const stakePubkey = new PublicKey(tx.extraFields.stakeAccountKey);
    const baseAccountKey = new PublicKey(tx.account.address);

    return {
        type: SolanaTransactionInstructionType.SPLIT_STAKE,
        instruction: {
            stakePubkey,
            authorizedPubkey: baseAccountKey,
            lamports: Number(tx.amount),
            splitStakePubkey: new PublicKey(splitStakePubkey)
        }
    };
};

export const delegateInstruction = async (
    tx: IPosTransaction,
    validator: IValidator
): Promise<ISolanaTransactionInstruction> => {
    const stakePubkey = new PublicKey(tx.extraFields.stakeAccountKey);
    const baseAccountKey = new PublicKey(tx.account.address);
    return {
        type: SolanaTransactionInstructionType.DELEGATE_STAKE,
        instruction: {
            stakePubkey,
            authorizedPubkey: baseAccountKey,
            votePubkey: new PublicKey(validator.id)
        }
    };
};

export const deactivateInstruction = async (
    tx: IPosTransaction
): Promise<ISolanaTransactionInstruction> => {
    const stakePubkey = new PublicKey(tx.extraFields.stakeAccountKey);
    const baseAccountKey = new PublicKey(tx.account.address);
    return {
        type: SolanaTransactionInstructionType.UNSTAKE,
        instruction: {
            stakePubkey,
            authorizedPubkey: baseAccountKey
        }
    };
};

export const withdrawInstruction = async (
    tx: IPosTransaction
): Promise<ISolanaTransactionInstruction> => {
    const stakePubkey = new PublicKey(tx.extraFields.stakeAccountKey);
    const baseAccountKey = new PublicKey(tx.account.address);

    const blockchainInstance = getBlockchain(Blockchain.SOLANA);
    const tokenConfig = getTokenConfig(Blockchain.SOLANA, 'SOL');

    const amount = blockchainInstance.account
        .amountToStd(tx.extraFields.amount, tokenConfig.decimals)
        .toFixed();

    return {
        type: SolanaTransactionInstructionType.WITHDRAW,
        instruction: {
            stakePubkey,
            authorizedPubkey: baseAccountKey,
            toPubkey: baseAccountKey,
            lamports: amount
        }
    };
};

'''
'''--- src/core/blockchain/solana/contracts/staking.ts ---
// import { Client } from '../client';
import { IPosTransaction, IBlockchainTransaction } from '../../types';
import { IValidator } from '../../types/stats';
// import { TokenType, PosBasicActionType } from '../../types/token';
import { buildBaseTransaction } from './base-contract';

import { SystemProgram } from '@solana/web3.js/src/system-program';
import { StakeProgram, STAKE_INSTRUCTION_LAYOUTS } from '@solana/web3.js/src/stake-program';
import { encodeData } from '@solana/web3.js/src/instruction';
import { PublicKey } from '@solana/web3.js/src/publickey';
// import { Account } from '@solana/web3.js/src/account';
import { Transaction } from '@solana/web3.js/src/transaction';
import { SolanaTransactionInstructionType } from '../types';
import {
    createAccountWithSeedInstruction,
    deactivateInstruction,
    delegateInstruction,
    withdrawInstruction
} from './instructions';
import { PosBasicActionType } from '../../types/token';
import { Client } from '../client';

export class Staking {
    constructor(private client: Client) {}

    public async createStakeAccountWithSeed(tx: IPosTransaction): Promise<IBlockchainTransaction> {
        const transaction = await buildBaseTransaction(tx);
        const blockHash = await this.client.getCurrentBlockHash();
        const instruction = await createAccountWithSeedInstruction(tx);

        transaction.additionalInfo = {
            type: SolanaTransactionInstructionType.CREATE_ACCOUNT_WITH_SEED,
            instructions: [instruction.instruction],
            currentBlockHash: blockHash,
            posAction: PosBasicActionType.CREATE_STAKE_ACCOUNT
        };

        transaction.confirmations = {
            numConfirmations: 0,
            numConfirmationsNeeded: 32
        };

        return transaction;
    }

    public async unStake(
        tx: IPosTransaction,
        validator: IValidator
    ): Promise<IBlockchainTransaction> {
        const transaction = await buildBaseTransaction(tx);

        const blockHash = await this.client.getCurrentBlockHash();
        const instruction = await deactivateInstruction(tx);

        transaction.additionalInfo = {
            posAction: PosBasicActionType.UNSTAKE,
            validatorName: validator.name,
            type: SolanaTransactionInstructionType.UNSTAKE,
            instructions: [instruction.instruction],
            currentBlockHash: blockHash
        };

        return transaction;
    }

    public async split(tx: IPosTransaction): Promise<IBlockchainTransaction> {
        const transaction = await buildBaseTransaction(tx);

        const blockHash = await this.client.getCurrentBlockHash();
        const stakePubkey = new PublicKey(tx.extraFields.stakeAccountKey);
        const baseAccountKey = new PublicKey(tx.account.address);
        const splitFromKey = new PublicKey(tx.extraFields.splitFrom);

        const solanaTransaction = new Transaction();
        solanaTransaction.add(
            SystemProgram.createAccountWithSeed({
                fromPubkey: baseAccountKey,
                newAccountPubkey: stakePubkey,
                basePubkey: baseAccountKey,
                seed: `stake:${tx.extraFields.stakeAccountIndex}`,
                lamports: tx.amount,
                space: StakeProgram.space,
                programId: StakeProgram.programId
            })
        );

        const type = STAKE_INSTRUCTION_LAYOUTS.Split;
        const data = encodeData(type, { lamports: tx.amount });

        solanaTransaction.add({
            keys: [
                { pubkey: splitFromKey, isSigner: false, isWritable: true },
                { pubkey: stakePubkey, isSigner: false, isWritable: true },
                { pubkey: baseAccountKey, isSigner: true, isWritable: false }
            ],
            programId: StakeProgram.programId,
            data
        });

        transaction.additionalInfo = {
            posAction: PosBasicActionType.SPLIT_STAKE,
            type: SolanaTransactionInstructionType.SPLIT_STAKE,
            splitTransaction: solanaTransaction,
            currentBlockHash: blockHash
        };

        transaction.confirmations = {
            numConfirmations: 0,
            numConfirmationsNeeded: 32
        };

        return transaction;
    }

    public async delegateStake(
        tx: IPosTransaction,
        validator: IValidator
    ): Promise<IBlockchainTransaction> {
        const transaction = await buildBaseTransaction(tx);

        const blockHash = await this.client.getCurrentBlockHash();
        const instruction = await delegateInstruction(tx, validator);

        transaction.additionalInfo = {
            posAction: PosBasicActionType.STAKE,
            validatorName: validator.name,
            type: SolanaTransactionInstructionType.DELEGATE_STAKE,
            instructions: [instruction.instruction],
            currentBlockHash: blockHash
        };

        return transaction;
    }

    public async withdraw(tx: IPosTransaction): Promise<IBlockchainTransaction> {
        const transaction = await buildBaseTransaction(tx);

        const blockHash = await this.client.getCurrentBlockHash();
        const instruction = await withdrawInstruction(tx);

        transaction.additionalInfo = {
            posAction: PosBasicActionType.WITHDRAW,
            type: SolanaTransactionInstructionType.WITHDRAW,
            instructions: [instruction.instruction],
            currentBlockHash: blockHash,
            stakeAccountKey: tx.extraFields.stakeAccountKey
        };

        return transaction;
    }
}

'''
'''--- src/core/blockchain/solana/index.ts ---
import { config } from './config';
import { networks } from './networks';
import { Client } from './client';
import { IBlockchain, ChainIdType, Contracts } from '../types';
import { Stats } from './stats';
import { SolanaAccountUtils } from './account';
import { SolanaTransactionUtils } from './transaction';

const account = new SolanaAccountUtils();
const transaction = new SolanaTransactionUtils();
const clients = {};

export const Solana: IBlockchain = {
    config,
    networks,
    transaction,
    account,
    Client,
    getStats: (chainId: ChainIdType) => new Stats(new Client(chainId), config),
    getClient: (chainId: ChainIdType) => {
        if (!clients[chainId]) {
            clients[chainId] = new Client(chainId);
        }
        return clients[chainId];
    },
    getContract: async (chainId: ChainIdType, contractType: Contracts) => {
        return undefined;
    }
};

'''
'''--- src/core/blockchain/solana/name-service.ts ---
import { Solana } from '.';
import {
    IResolveTextResponse,
    IResolveNameResponse,
    ResolveTextType,
    ResolveTextCode,
    ResolveTextError
} from '../types';
import { GenericNameService } from '../types/name-service';

export class NameService extends GenericNameService {
    public resolveText(text: string): Promise<IResolveTextResponse> {
        const validAddress = Solana.account.isValidAddress(text);
        const validChecksumAddress = Solana.account.isValidChecksumAddress(text);

        if (validAddress) {
            return Promise.resolve({
                code: validChecksumAddress ? ResolveTextCode.OK : ResolveTextCode.WARN_CHECKSUM,
                type: ResolveTextType.ADDRESS,
                address: text,
                name: ''
            });
        } else {
            return Promise.reject({
                error: ResolveTextError.INVALID
            });
        }
    }

    public resolveName(text: string): Promise<IResolveNameResponse> {
        return Promise.resolve({
            address: text
        });
    }
}

'''
'''--- src/core/blockchain/solana/networks.ts ---
import { IBlockchainNetwork } from '../types';

export const networks: IBlockchainNetwork[] = [
    {
        name: 'Mainnet beta',
        chainId: '1',
        mainNet: true,
        url: 'https://fire.moonlet.app/functions/nodes/rpc/solana/mainnet',
        wsUrl: 'wss://api.mainnet-beta.solana.com/',
        explorer: {
            name: 'Explorer',
            getAccountUrl: addr => `https://explorer.solana.com/address/${addr}`,
            getTransactionUrl: txn => `https://explorer.solana.com/tx/${txn}`
        }
    },
    {
        name: 'Devnet',
        chainId: '2',
        mainNet: false,
        url: 'https://devnet.solana.com',
        wsUrl: 'wss://devnet.solana.com/',
        explorer: {
            name: 'Explorer',
            getAccountUrl: addr => `https://explorer.solana.com/address/${addr}?cluster=devnet`,
            getTransactionUrl: txn => `https://explorer.solana.com/tx/${txn}?cluster=devnet`
        }
    },
    {
        name: 'Testnet',
        chainId: '3',
        mainNet: false,
        url: 'http://167.233.14.77/',
        wsUrl: 'wss://testnet.solana.com/',
        explorer: {
            name: 'Explorer',
            getAccountUrl: addr => `https://explorer.solana.com/address/${addr}?cluster=testnet`,
            getTransactionUrl: txn => `https://explorer.solana.com/tx/${txn}?cluster=testnet`
        }
    },

    {
        name: 'Moonlet dev',
        chainId: '4',
        mainNet: false,
        url: 'http://116.202.172.216:8899/',
        wsUrl: 'wss://testnet.solana.com/',
        explorer: {
            name: 'Explorer',
            getAccountUrl: addr => `https://116.202.172.216:8899/address/${addr}?cluster=testnet`,
            getTransactionUrl: txn => `https://116.202.172.216:8899/tx/${txn}?cluster=testnet`
        }
    }
];

'''
'''--- src/core/blockchain/solana/stats.ts ---
import BigNumber from 'bignumber.js';
import { AccountType, IAccountState, ITokenState } from '../../../redux/wallets/state';
import { ApiClient } from '../../utils/api-client/api-client';
import { GenericStats, AccountStats } from '../types/stats';
import { Client } from './client';
import { config } from './config';

export class Stats extends GenericStats<Client> {
    public async getAccountDelegateStats(
        account: IAccountState,
        token: ITokenState
    ): Promise<AccountStats> {
        const data = await new ApiClient().validators.getAccountDelegateStats(
            account,
            this.client.chainId.toString()
        );

        return data;
    }

    public async getAvailableBalanceForDelegate(account: IAccountState): Promise<string> {
        const data = await new ApiClient().validators.getBalance(
            account.address,
            account.blockchain,
            this.client.chainId.toString()
        );

        let availableToDelegate = new BigNumber(0);
        const accountType = account?.type || AccountType.DEFAULT;

        if (new BigNumber(data.balance.available).gt(config.amountToKeepInAccount[accountType])) {
            availableToDelegate = availableToDelegate.plus(
                new BigNumber(data.balance.available).minus(
                    config.amountToKeepInAccount[accountType]
                )
            );
        }
        return availableToDelegate.toFixed();
    }
}

'''
'''--- src/core/blockchain/solana/tokens/btc.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const BTC_MAINNET: ITokenConfigState = {
    name: 'Wrapped Bitcoin (Sollet)',
    symbol: 'BTC',
    icon: {
        uri:
            'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E/logo.png'
    },
    contractAddress: '9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E',
    removable: true,
    defaultOrder: 999,
    decimals: 6,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.SPL
};

'''
'''--- src/core/blockchain/solana/tokens/eth.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const ETH_MAINNET: ITokenConfigState = {
    name: 'Wrapped Ethereum (Sollet)',
    symbol: 'ETH',
    icon: {
        uri:
            'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk/logo.png'
    },
    contractAddress: '2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk',
    removable: true,
    defaultOrder: 999,
    decimals: 6,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.SPL
};

'''
'''--- src/core/blockchain/solana/tokens/ftt.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const FTT_MAINNET: ITokenConfigState = {
    name: 'Wrapped FTT (Sollet)',
    symbol: 'FTT',
    icon: {
        uri:
            'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/AGFEad2et2ZJif9jaGpdMixQqvW5i81aBdvKe7PHNfz3/logo.png'
    },
    contractAddress: 'AGFEad2et2ZJif9jaGpdMixQqvW5i81aBdvKe7PHNfz3',
    removable: true,
    defaultOrder: 999,
    decimals: 6,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.SPL
};

'''
'''--- src/core/blockchain/solana/tokens/jpyc.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const JPYC_MAINNET: ITokenConfigState = {
    name: 'JPYC',
    symbol: 'JPYC',
    icon: {
        uri:
            'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/5trVBqv1LvHxiSPMsHtEZuf8iN82wbpDcR5Zaw7sWC3s/logo.png'
    },
    contractAddress: '5trVBqv1LvHxiSPMsHtEZuf8iN82wbpDcR5Zaw7sWC3s',
    removable: true,
    defaultOrder: 999,
    decimals: 6,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.SPL
};

'''
'''--- src/core/blockchain/solana/tokens/link.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const LINK_MAINNET: ITokenConfigState = {
    name: 'Wrapped Chainlink (Sollet)',
    symbol: 'LINK',
    icon: {
        uri:
            'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/CWE8jPTUYhdCTZYWPTe1o5DFqfdjzWKc9WKz6rSjQUdG/logo.png'
    },
    contractAddress: 'CWE8jPTUYhdCTZYWPTe1o5DFqfdjzWKc9WKz6rSjQUdG',
    removable: true,
    defaultOrder: 999,
    decimals: 6,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.SPL
};

'''
'''--- src/core/blockchain/solana/tokens/ray.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const RAY_MAINNET: ITokenConfigState = {
    name: 'Raydium',
    symbol: 'RAY',
    icon: {
        uri:
            'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R/logo.png'
    },
    contractAddress: '4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R',
    removable: true,
    defaultOrder: 999,
    decimals: 6,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.SPL
};

'''
'''--- src/core/blockchain/solana/tokens/spl-client.ts ---
import { Client } from '../client';
import BigNumber from 'bignumber.js';
import { IBalance } from '../../types';

export class SplClient {
    constructor(private client: Client) {}

    public async getBalance(contractAddress: string, accountAddress: string): Promise<IBalance> {
        try {
            // getTokenAccountBalance

            const balanceRes = await this.client.http.jsonRpc('getTokenAccountsByOwner', [
                accountAddress,
                {
                    mint: contractAddress
                },
                {
                    encoding: 'jsonParsed'
                }
            ]);

            // associated token account and/or other ancillary token accounts

            const balance = String(
                (balanceRes?.result?.value &&
                    balanceRes?.result?.value[0] &&
                    balanceRes?.result?.value[0]?.account?.data?.parsed?.info?.tokenAmount
                        ?.amount) ||
                    0
            );

            return {
                total: new BigNumber(balance),
                available: new BigNumber(balance)
            };
        } catch (error) {
            return {
                total: new BigNumber(0),
                available: new BigNumber(0)
            };
        }
    }

    public async isActive(contractAddress: string, accountAddress: string): Promise<boolean> {
        try {
            const balanceRes = await this.client.http.jsonRpc('getTokenAccountsByOwner', [
                accountAddress,
                {
                    mint: contractAddress
                },
                {
                    encoding: 'jsonParsed'
                }
            ]);

            return (
                balanceRes?.result?.value &&
                Array.isArray(balanceRes.result.value) &&
                balanceRes.result.value.length >= 1
            );
        } catch (error) {
            throw error;
        }
    }
}

'''
'''--- src/core/blockchain/solana/tokens/srm.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const SRM_MAINNET: ITokenConfigState = {
    name: 'Serum',
    symbol: 'SRM',
    icon: {
        uri:
            'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt/logo.png'
    },
    contractAddress: 'SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt',
    removable: true,
    defaultOrder: 999,
    decimals: 6,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.SPL
};

'''
'''--- src/core/blockchain/solana/tokens/sushi.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const SUSHI_MAINNET: ITokenConfigState = {
    name: 'Wrapped SUSHI (Sollet)',
    symbol: 'SUSHI',
    icon: {
        uri:
            'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/AR1Mtgh7zAtxuxGd2XPovXPVjcSdY3i4rQYisNadjfKy/logo.png'
    },
    contractAddress: 'AR1Mtgh7zAtxuxGd2XPovXPVjcSdY3i4rQYisNadjfKy',
    removable: true,
    defaultOrder: 999,
    decimals: 6,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.SPL
};

'''
'''--- src/core/blockchain/solana/tokens/uni.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const UNI_MAINNET: ITokenConfigState = {
    name: 'Wrapped UNI (Sollet)',
    symbol: 'UNI',
    icon: {
        uri: 'https://s2.coinmarketcap.com/static/img/coins/64x64/7083.png'
    },
    contractAddress: 'DEhAasscXF4kEGxFgJ3bq4PpVGp5wyUxMRvn6TzGVHaw',
    removable: true,
    defaultOrder: 999,
    decimals: 6,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.SPL
};

'''
'''--- src/core/blockchain/solana/tokens/usdc.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const USDC_MAINNET: ITokenConfigState = {
    name: 'USDC',
    symbol: 'USDC',
    icon: {
        uri:
            'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v/logo.png'
    },
    contractAddress: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',
    removable: true,
    defaultOrder: 999,
    decimals: 6,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.SPL
};

export const USDC_TESTNET: ITokenConfigState = {
    name: 'USDC',
    symbol: 'USDC',
    icon: {
        uri:
            'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v/logo.png'
    },
    contractAddress: 'CpMah17kQEL2wqyMKt3mZBdTnZbkbfx4nqmQMFDP5vwp',
    removable: true,
    defaultOrder: 999,
    decimals: 6,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.SPL
};

'''
'''--- src/core/blockchain/solana/tokens/usdt.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const USDT_MAINNET: ITokenConfigState = {
    name: 'USDT',
    symbol: 'USDT',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/solana/usdt.png'
    },
    contractAddress: 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB',
    removable: true,
    defaultOrder: 999,
    decimals: 6,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.SPL
};

'''
'''--- src/core/blockchain/solana/tokens/yfi.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const YFI_MAINNET: ITokenConfigState = {
    name: 'Wrapped YFI (Sollet)',
    symbol: 'YFI',
    icon: {
        uri:
            'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/3JSf5tPeuscJGtaCp5giEiDhv51gQ4v3zWg8DGgyLfAB/logo.png'
    },
    contractAddress: '3JSf5tPeuscJGtaCp5giEiDhv51gQ4v3zWg8DGgyLfAB',
    removable: true,
    defaultOrder: 999,
    decimals: 6,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.SPL
};

'''
'''--- src/core/blockchain/solana/transaction-utils.ts ---
import { PublicKey } from '@solana/web3.js/src/publickey';
import { TransactionInstruction } from '@solana/web3.js/src/transaction';
import { TOKEN_PROGRAM_ID } from '@solana/spl-token';
import { u8, nu64, struct } from 'buffer-layout';

export const solanaSwapInstruction = (
    poolInfo: any, // LiquidityPoolInfo,

    // user
    userSourceTokenAccount: PublicKey,
    userDestTokenAccount: PublicKey,
    userOwner: PublicKey,

    amountIn: number,
    minAmountOut: number
): TransactionInstruction => {
    const dataLayout = struct([u8('instruction'), nu64('amountIn'), nu64('minAmountOut')]);

    const keys = [
        // spl token
        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },
        // amm
        { pubkey: new PublicKey(poolInfo.ammId), isSigner: false, isWritable: true },
        { pubkey: new PublicKey(poolInfo.ammAuthority), isSigner: false, isWritable: false },
        { pubkey: new PublicKey(poolInfo.ammOpenOrders), isSigner: false, isWritable: true },
        { pubkey: new PublicKey(poolInfo.ammTargetOrders), isSigner: false, isWritable: true },
        {
            pubkey: new PublicKey(poolInfo.poolCoinTokenAccount),
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: new PublicKey(poolInfo.poolPcTokenAccount),
            isSigner: false,
            isWritable: true
        },
        // serum
        { pubkey: new PublicKey(poolInfo.serumProgramId), isSigner: false, isWritable: false },
        { pubkey: new PublicKey(poolInfo.serumMarket), isSigner: false, isWritable: true },
        { pubkey: new PublicKey(poolInfo.serumBids), isSigner: false, isWritable: true },
        { pubkey: new PublicKey(poolInfo.serumAsks), isSigner: false, isWritable: true },
        { pubkey: new PublicKey(poolInfo.serumEventQueue), isSigner: false, isWritable: true },
        {
            pubkey: new PublicKey(poolInfo.serumCoinVaultAccount),
            isSigner: false,
            isWritable: true
        },
        {
            pubkey: new PublicKey(poolInfo.serumPcVaultAccount),
            isSigner: false,
            isWritable: true
        },
        { pubkey: new PublicKey(poolInfo.serumVaultSigner), isSigner: false, isWritable: false },
        { pubkey: userSourceTokenAccount, isSigner: false, isWritable: true },
        { pubkey: userDestTokenAccount, isSigner: false, isWritable: true },
        { pubkey: userOwner, isSigner: true, isWritable: false }
    ];

    const data = Buffer.alloc(dataLayout.span);
    dataLayout.encode(
        {
            instruction: 9,
            amountIn,
            minAmountOut
        },
        data
    );

    return new TransactionInstruction({
        keys,
        programId: new PublicKey(poolInfo.programId),
        data
    });
};

'''
'''--- src/core/blockchain/solana/transaction.ts ---
import {
    AbstractBlockchainTransactionUtils,
    Blockchain,
    Contracts,
    IBlockchainTransaction,
    IPosTransaction,
    ITransferTransaction,
    TransactionType
} from '../types';
import { TransactionStatus } from '../../wallet/types';
import { PosBasicActionType, TokenType } from '../types/token';
import { Solana } from '.';
import { Client as SolanaClient } from './client';
import { getTokenConfig } from '../../../redux/tokens/static-selectors';
import { Account } from '@solana/web3.js/src/account';
import { PublicKey } from '@solana/web3.js/src/publickey';
import { SystemProgram } from '@solana/web3.js/src/system-program';
import { StakeProgram } from '@solana/web3.js/src/stake-program';
import { Transaction, TransactionInstruction } from '@solana/web3.js/src/transaction';
import { SolanaTransactionInstructionType } from './types';
import { decode as bs58Decode } from 'bs58';
import { cloneDeep } from 'lodash';
import { config } from '../solana/config';
import { splitStake } from '../../utils/balance';
import BigNumber from 'bignumber.js';
import { selectStakeAccounts } from './contracts/base-contract';
import { getBlockchain } from '../blockchain-factory';
import { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';
import { ApiClient } from '../../utils/api-client/api-client';
import { LoadingModal } from '../../../components/loading-modal/loading-modal';
import { solanaSwapInstruction } from './transaction-utils';
import {
    addBreadcrumb as SentryAddBreadcrumb,
    captureException as SentryCaptureException
} from '@sentry/react-native';

export class SolanaTransactionUtils extends AbstractBlockchainTransactionUtils {
    public async sign(tx: IBlockchainTransaction, privateKey: string): Promise<any> {
        const account: Account = new Account(bs58Decode(privateKey));
        const newAccount: Account = new Account();
        const signers: Account[] = [account];

        const client = Solana.getClient(tx.chainId) as SolanaClient;
        const blockchainInstance = getBlockchain(Blockchain.SOLANA);

        let transaction;

        switch (tx.additionalInfo.type) {
            case SolanaTransactionInstructionType.CREATE_ACCOUNT_WITH_SEED:
                transaction = StakeProgram.createAccountWithSeed(tx.additionalInfo.instructions[0]);
                break;
            case SolanaTransactionInstructionType.DELEGATE_STAKE:
                transaction = StakeProgram.delegate(tx.additionalInfo.instructions[0]);
                break;
            case SolanaTransactionInstructionType.UNSTAKE:
                transaction = StakeProgram.deactivate(tx.additionalInfo.instructions[0]);
                break;
            case SolanaTransactionInstructionType.SPLIT_STAKE:
                transaction = tx.additionalInfo.splitTransaction;
                break;
            case SolanaTransactionInstructionType.WITHDRAW:
                transaction = StakeProgram.withdraw(tx.additionalInfo.instructions[0]);
                break;

            case SolanaTransactionInstructionType.TRANSFER:
                transaction = new Transaction();
                for (const i of tx.additionalInfo.instructions) {
                    transaction.add(i);
                }
                break;

            case SolanaTransactionInstructionType.CREATE_ASSOCIATED_TOKEN_ACCOUNT:
                transaction = new Transaction();
                let instructions: any = tx.additionalInfo.instructions;
                instructions = instructions.map(i => new PublicKey(i));
                // @ts-ignore
                transaction.add(Token.createAssociatedTokenAccountInstruction(...instructions));
                break;

            case SolanaTransactionInstructionType.SWAP:
                transaction = new Transaction();

                const {
                    fromAccount,
                    toAccount,
                    commissionAccount,
                    fromToken,
                    toToken
                }: {
                    fromAccount: {
                        key: string;
                        isSol: boolean;
                    };
                    toAccount: {
                        key: string;
                        active: boolean;
                        isSol: boolean;
                    };
                    commissionAccount: {
                        key: string;
                        active: boolean;
                        owner: string;
                    };
                    fromToken: string;
                    toToken: string;
                } = tx.additionalInfo.pubkeys;

                // amount without commission and with slippage
                // const amountIn = tx.additionalInfo.swap.fromTokenAmount;
                // const minimumAmountOut = tx.additionalInfo.swap.toTokenAmount;

                // amount minus commission and with slippage
                const amountIn = tx.additionalInfo.balances.fromAmount;
                const minimumAmountOut = tx.additionalInfo.balances.toAmount;

                const amtIn = Number(
                    blockchainInstance.account
                        .amountToStd(amountIn, tx.additionalInfo.fromTokenDecimals)
                        .toFixed(0)
                );
                const amtOut = Number(
                    blockchainInstance.account
                        .amountToStd(minimumAmountOut, tx.additionalInfo.toTokenDecimals)
                        .toFixed(0)
                );

                const fromTokenMint = new PublicKey(fromToken);
                const toTokenMint = new PublicKey(toToken);

                const owner: PublicKey = new PublicKey(tx.address);

                const newAccountPublicKey = newAccount.publicKey;

                if (!tx.additionalInfo.poolInfo) {
                    SentryAddBreadcrumb({ message: JSON.stringify({ tx }) });
                    SentryAddBreadcrumb({
                        message: JSON.stringify({ additionalInfo: tx.additionalInfo })
                    });
                    SentryCaptureException(
                        new Error(
                            `Failed to get poolInfo, ${tx.additionalInfo.swap.fromTokenSymbol} => ${tx.additionalInfo.swap.toTokenSymbol}`
                        )
                    );
                }

                if (fromAccount.isSol || toAccount.isSol) {
                    const lamports = fromAccount.isSol
                        ? new BigNumber(amtIn)
                              .plus(tx.additionalInfo.createAccount.lamportsFromSol)
                              .toNumber()
                        : tx.additionalInfo.createAccount.lamportsToSol;

                    // Create Account
                    transaction.add(
                        SystemProgram.createAccount({
                            fromPubkey: owner,
                            newAccountPubkey: newAccountPublicKey,
                            lamports,
                            space: tx.additionalInfo.createAccount.space,
                            programId: TOKEN_PROGRAM_ID
                        })
                    );
                    // Transfer sol to the new account
                    // transaction.add(
                    //     SystemProgram.transfer({
                    //         fromPubkey: owner,
                    //         toPubkey: newAccountPublicKey,
                    //         lamports: amtIn
                    //     })
                    // );
                    // Token: Init Account - WSOL
                    transaction.add(
                        Token.createInitAccountInstruction(
                            TOKEN_PROGRAM_ID,
                            fromAccount.isSol ? fromTokenMint : toTokenMint,
                            newAccountPublicKey,
                            owner
                        )
                    );
                }

                if (!toAccount.isSol && !toAccount.active) {
                    // Token not created
                    // - only for SPL, not for SOL
                    transaction.add(
                        Token.createAssociatedTokenAccountInstruction(
                            ASSOCIATED_TOKEN_PROGRAM_ID,
                            TOKEN_PROGRAM_ID,
                            toTokenMint, // mint
                            new PublicKey(toAccount.key), // associatedAddress
                            owner,
                            owner // payer
                        )
                    );
                }

                // Swap
                transaction.add(
                    solanaSwapInstruction(
                        tx.additionalInfo.poolInfo,

                        fromAccount.isSol ? newAccountPublicKey : new PublicKey(fromAccount.key), // UserSourceTokenAccount
                        toAccount.isSol ? newAccountPublicKey : new PublicKey(toAccount.key), // UserDestTokenAccount

                        owner,
                        amtIn,
                        amtOut
                    )
                );

                // Moonlet Swap Commission

                const moonletSwapCommission = tx.additionalInfo.balances.moonletSwapCommissionStd;

                if (fromAccount.isSol) {
                    // SOL
                    transaction.add(
                        SystemProgram.transfer({
                            fromPubkey: owner,
                            toPubkey: new PublicKey(commissionAccount.owner),
                            lamports: moonletSwapCommission
                        })
                    );
                } else {
                    // SPL tokens
                    if (!commissionAccount.active) {
                        // Token not created
                        transaction.add(
                            Token.createAssociatedTokenAccountInstruction(
                                ASSOCIATED_TOKEN_PROGRAM_ID,
                                TOKEN_PROGRAM_ID,
                                fromTokenMint, // mint
                                new PublicKey(commissionAccount.key), // associatedAddress
                                new PublicKey(commissionAccount.owner),
                                owner // payer
                            )
                        );
                    }
                    transaction.add(
                        // @ts-ignore
                        Token.createTransferCheckedInstruction(
                            TOKEN_PROGRAM_ID,
                            new PublicKey(fromAccount.key), // source
                            fromTokenMint, // mint
                            new PublicKey(commissionAccount.key), // destination
                            owner,
                            [], // multiSigners
                            Number(moonletSwapCommission), // amount
                            tx.additionalInfo.fromTokenDecimals // decimals
                        )
                    );
                }

                if (fromAccount.isSol || toAccount.isSol) {
                    transaction.add(
                        Token.createCloseAccountInstruction(
                            TOKEN_PROGRAM_ID,
                            newAccountPublicKey,
                            owner,
                            owner,
                            []
                        )
                    );
                }

                if (fromAccount.isSol || toAccount.isSol) {
                    signers.push(newAccount);
                }

                break;
        }

        transaction.recentBlockhash = await client.getCurrentBlockHash();

        transaction.sign(...signers);

        return transaction.serialize();
    }

    public async buildPosTransaction(
        tx: IPosTransaction,
        transactionType: PosBasicActionType
    ): Promise<IBlockchainTransaction[]> {
        const client = Solana.getClient(tx.chainId);

        const transactions: IBlockchainTransaction[] = [];
        const allStakeAccounts = tx.account.tokens[client.chainId][config.coin].balance?.detailed;
        const usedStakedAccounts: string[] = [];

        switch (transactionType) {
            case PosBasicActionType.DELEGATE:
                const splitAmount = splitStake(new BigNumber(tx.amount), tx.validators.length);

                for (const validator of tx.validators) {
                    const stakeAccounts = selectStakeAccounts(
                        tx.account.address,
                        allStakeAccounts,
                        PosBasicActionType.DELEGATE,
                        splitAmount.toFixed(),
                        usedStakedAccounts
                    );

                    for (const key in stakeAccounts) {
                        if (stakeAccounts[key]) {
                            const stakeAccount = stakeAccounts[key];

                            if (stakeAccount.options?.shouldCreate) {
                                const txCreate: IPosTransaction = cloneDeep(tx);
                                txCreate.extraFields.stakeAccountKey = key;
                                txCreate.extraFields.stakeAccountIndex = stakeAccount.options.index;
                                txCreate.amount = new BigNumber(stakeAccount.amount).toFixed(
                                    0,
                                    BigNumber.ROUND_DOWN
                                );
                                const transactionCreate: IBlockchainTransaction = await client.contracts[
                                    Contracts.STAKING
                                ].createStakeAccountWithSeed(txCreate);
                                transactions.push(transactionCreate);
                            }

                            if (stakeAccount.options?.shouldSplit) {
                                const txSplit: IPosTransaction = cloneDeep(tx);
                                txSplit.amount = new BigNumber(stakeAccount.amount).toFixed(
                                    0,
                                    BigNumber.ROUND_DOWN
                                );
                                txSplit.extraFields.stakeAccountKey =
                                    stakeAccount.options.splitFrom;
                                txSplit.extraFields.stakeAccountIndex = stakeAccount.options.index;
                                const transactionSplit: IBlockchainTransaction = await client.contracts[
                                    Contracts.STAKING
                                ].split(txSplit, key);
                                transactions.push(transactionSplit);
                            }

                            const txStake: IPosTransaction = cloneDeep(tx);
                            txStake.amount = new BigNumber(stakeAccount.amount).toFixed(
                                0,
                                BigNumber.ROUND_DOWN
                            );
                            txStake.extraFields.stakeAccountKey = key;
                            const transaction: IBlockchainTransaction = await client.contracts[
                                Contracts.STAKING
                            ].delegateStake(txStake, validator);
                            transactions.push(transaction);
                            usedStakedAccounts.push(key);
                        }
                    }
                }
                break;
            case PosBasicActionType.UNSTAKE:
                const selectedStakeAccounts = selectStakeAccounts(
                    tx.account.address,
                    allStakeAccounts,
                    PosBasicActionType.UNSTAKE,
                    tx.amount,
                    usedStakedAccounts,
                    tx.validators[0].id
                );

                for (const key in selectedStakeAccounts) {
                    if (selectedStakeAccounts[key]) {
                        const stakeAccount = selectedStakeAccounts[key];

                        if (stakeAccount.options?.shouldSplit) {
                            const txSplit: IPosTransaction = cloneDeep(tx);
                            txSplit.amount = new BigNumber(stakeAccount.amount).toFixed(
                                0,
                                BigNumber.ROUND_DOWN
                            );
                            txSplit.extraFields.stakeAccountKey = stakeAccount.options.splitFrom;
                            txSplit.extraFields.stakeAccountIndex = stakeAccount.options.index;
                            const transactionSplit: IBlockchainTransaction = await client.contracts[
                                Contracts.STAKING
                            ].split(txSplit, key);
                            transactions.push(transactionSplit);
                        }

                        const txUnstake = cloneDeep(tx);
                        txUnstake.amount = new BigNumber(stakeAccount.amount).toFixed(
                            0,
                            BigNumber.ROUND_DOWN
                        );
                        txUnstake.extraFields.stakeAccountKey = key;
                        const transactionUnstake: IBlockchainTransaction = await client.contracts[
                            Contracts.STAKING
                        ].unStake(txUnstake, tx.validators[0]);
                        transactions.push(transactionUnstake);
                        usedStakedAccounts.push(key);
                    }
                }

                break;

            case PosBasicActionType.WITHDRAW:
                const transactionWithdraW: IBlockchainTransaction = await client.contracts[
                    Contracts.STAKING
                ].withdraw(cloneDeep(tx));

                transactionWithdraW.amount = new BigNumber(tx.extraFields.amount).toFixed(
                    0,
                    BigNumber.ROUND_DOWN
                );
                transactions.push(transactionWithdraW);
                break;

            case PosBasicActionType.SOLANA_STAKEACCOUNT_CREATE: {
                const solanaTxCreate: IPosTransaction = cloneDeep(tx);
                const solanaTransactionCreate: IBlockchainTransaction = await client.contracts[
                    Contracts.STAKING
                ].createStakeAccountWithSeed(solanaTxCreate);
                transactions.push(solanaTransactionCreate);
                break;
            }

            case PosBasicActionType.SOLANA_STAKEACCOUNT_DELEGATE: {
                const solanaTxStake: IPosTransaction = cloneDeep(tx);
                solanaTxStake.extraFields.amount = new BigNumber(
                    (tx.validators as any)[0].amount
                ).toFixed();
                const solanaTransactionDelegate: IBlockchainTransaction = await client.contracts[
                    Contracts.STAKING
                ].delegateStake(solanaTxStake, (tx.validators as any)[0].validator);
                transactions.push(solanaTransactionDelegate);
                break;
            }

            case PosBasicActionType.SOLANA_STAKEACCOUNT_SPLIT: {
                const solanaTxSplit: IPosTransaction = cloneDeep(tx);
                solanaTxSplit.amount = new BigNumber(tx.amount).toFixed();
                const solanaTransactionSplit: IBlockchainTransaction = await client.contracts[
                    Contracts.STAKING
                ].split(solanaTxSplit);

                transactions.push(solanaTransactionSplit);
                break;
            }

            case PosBasicActionType.SOLANA_STAKEACCOUNT_UNSTAKE: {
                const solanaTxUnstake: IPosTransaction = cloneDeep(tx);
                const solanaTransactionUnstake: IBlockchainTransaction = await client.contracts[
                    Contracts.STAKING
                ].unStake(solanaTxUnstake, tx.validators[0]);
                transactions.push(solanaTransactionUnstake);
                break;
            }

            case PosBasicActionType.SOLANA_STAKEACCOUNT_WITHDRAW: {
                const solanaTxWithdraw: IPosTransaction = cloneDeep(tx);
                const solanaTransactionWithdraw: IBlockchainTransaction = await client.contracts[
                    Contracts.STAKING
                ].withdraw(solanaTxWithdraw);
                transactions.push(solanaTransactionWithdraw);
                break;
            }

            case PosBasicActionType.SOLANA_CREATE_AND_DELEGATE_STAKE_ACCOUNT: {
                const blockchainInstance = getBlockchain(tx.account.blockchain);
                const tokenConfig = getTokenConfig(tx.account.blockchain, tx.token);

                const amount = blockchainInstance.account
                    .amountToStd(tx.extraFields.amount, tokenConfig.decimals)
                    .toFixed(0, BigNumber.ROUND_DOWN);

                // Create stake account tx
                const solanaTxCreate: IPosTransaction = cloneDeep(tx);
                solanaTxCreate.amount = amount;
                solanaTxCreate.extraFields.posAction =
                    PosBasicActionType.SOLANA_STAKEACCOUNT_CREATE;
                const solanaTransactionCreate: IBlockchainTransaction = await client.contracts[
                    Contracts.STAKING
                ].createStakeAccountWithSeed(solanaTxCreate);
                solanaTransactionCreate.amount = amount;
                transactions.push(solanaTransactionCreate);

                // Delegate tx
                const solanaTxStake: IPosTransaction = cloneDeep(tx);
                solanaTxStake.extraFields.amount = amount;
                solanaTxCreate.extraFields.posAction =
                    PosBasicActionType.SOLANA_STAKEACCOUNT_DELEGATE;
                const solanaTransactionDelegate: IBlockchainTransaction = await client.contracts[
                    Contracts.STAKING
                ].delegateStake(solanaTxStake, (tx.validators as any)[0].validator);
                transactions.push(solanaTransactionDelegate);
                break;
            }
        }

        return transactions;
    }

    public async buildTransferTransaction(
        tx: ITransferTransaction
    ): Promise<IBlockchainTransaction> {
        const client = Solana.getClient(tx.chainId) as SolanaClient;

        const tokenInfo = getTokenConfig(tx.account.blockchain, tx.token);
        const blockHash = await client.getCurrentBlockHash();
        const blockInfo = await client.getCurrentBlock();

        switch (tokenInfo.type) {
            case TokenType.SPL: {
                await LoadingModal.open();

                const apiClient = new ApiClient().http;

                let source: string;
                let destination: string;
                let destinationActive: boolean;

                const mint = tokenInfo.contractAddress;

                try {
                    destinationActive = await client.isActiveToken(
                        mint,
                        tx.toAddress,
                        TokenType.SPL
                    );

                    const sourceRes = await apiClient.post(
                        '/blockchain/solana/spl/associatedAddress',
                        {
                            owner: tx.account.address,
                            mint
                        }
                    );
                    source = sourceRes?.result?.data;

                    const destinationRes = await apiClient.post(
                        '/blockchain/solana/spl/associatedAddress',
                        {
                            owner: tx.toAddress,
                            mint
                        }
                    );
                    destination = destinationRes?.result?.data;

                    if (!source || !destination) {
                        await LoadingModal.close();
                        return Promise.reject({ error: 'SPL_INVALID_ADDRESS' });
                    }
                } catch (error) {
                    await LoadingModal.close();
                    throw error;
                }

                await LoadingModal.close();

                const instructions: TransactionInstruction[] = [];

                if (!destinationActive) {
                    // Token not created
                    instructions.push(
                        Token.createAssociatedTokenAccountInstruction(
                            ASSOCIATED_TOKEN_PROGRAM_ID,
                            TOKEN_PROGRAM_ID,
                            new PublicKey(mint),
                            new PublicKey(destination), // associatedAddress
                            new PublicKey(tx.toAddress), // owner
                            new PublicKey(tx.account.address) // payer
                        )
                    );
                }

                instructions.push(
                    // @ts-ignore
                    Token.createTransferCheckedInstruction(
                        TOKEN_PROGRAM_ID,
                        new PublicKey(source), // source
                        new PublicKey(tokenInfo.contractAddress), // mint
                        new PublicKey(destination), // destination
                        new PublicKey(tx.account.address), // owner
                        [], // multiSigners
                        Number(tx.amount), // amount
                        tokenInfo.decimals // decimals
                    )
                );

                return {
                    date: {
                        created: Date.now(),
                        signed: Date.now(),
                        broadcasted: Date.now(),
                        confirmed: Date.now()
                    },
                    blockchain: tx.account.blockchain,
                    chainId: tx.chainId,
                    type: TransactionType.TRANSFER,
                    token: tokenInfo,

                    address: tx.account.address,
                    publicKey: tx.account.publicKey,

                    toAddress: tx.toAddress,
                    amount: tx.amount,
                    feeOptions: tx.feeOptions,
                    broadcastedOnBlock: blockInfo?.number,
                    nonce: 0, // not used
                    status: TransactionStatus.PENDING,
                    additionalInfo: {
                        currentBlockHash: blockHash,

                        type: SolanaTransactionInstructionType.TRANSFER,
                        instructions
                    }
                };
            }

            default:
                // case TokenType.NATIVE:
                return {
                    date: {
                        created: Date.now(),
                        signed: Date.now(),
                        broadcasted: Date.now(),
                        confirmed: Date.now()
                    },
                    blockchain: tx.account.blockchain,
                    chainId: tx.chainId,
                    type: TransactionType.TRANSFER,
                    token: tokenInfo,

                    address: tx.account.address,
                    publicKey: tx.account.publicKey,

                    toAddress: tx.toAddress,
                    amount: tx.amount,
                    feeOptions: tx.feeOptions,
                    broadcastedOnBlock: blockInfo?.number,
                    nonce: 0, // not used
                    status: TransactionStatus.PENDING,
                    additionalInfo: {
                        currentBlockHash: blockHash,

                        type: SolanaTransactionInstructionType.TRANSFER,
                        instructions: [
                            SystemProgram.transfer({
                                fromPubkey: new PublicKey(tx.account.address),
                                toPubkey: new PublicKey(tx.toAddress),
                                lamports: Number(tx.amount)
                            })
                        ]
                    }
                };
        }
    }

    public getTransactionAmount(tx: IBlockchainTransaction): string {
        const tokenInfo = getTokenConfig(tx.blockchain, tx.token?.symbol);
        if (tokenInfo.type === TokenType.ERC20) {
            return tx?.data?.params[1];
        } else {
            // Amount is stored on data params for stake tx
            if (
                tx?.additionalInfo?.type === SolanaTransactionInstructionType.DELEGATE_STAKE &&
                tx?.data?.params &&
                tx?.data?.params[1]
            ) {
                return tx?.data?.params[1];
            }
            return tx.amount;
        }
    }
}

'''
'''--- src/core/blockchain/solana/types.ts ---
export enum SolanaTransactionInstructionType {
    TRANSFER = 'TRANSFER',
    CREATE_ACCOUNT_WITH_SEED = 'CREATE_ACCOUNT_WITH_SEED',
    DELEGATE_STAKE = 'DELEGATE_STAKE',
    SPLIT_STAKE = 'SPLIT_STAKE',
    UNSTAKE = 'UNSTAKE',
    WITHDRAW = 'WITHDRAW',
    CREATE_ASSOCIATED_TOKEN_ACCOUNT = 'CREATE_ASSOCIATED_TOKEN_ACCOUNT',
    SWAP = 'SWAP'
}

export interface ISolanaTransactionInstruction {
    type: SolanaTransactionInstructionType;
    instruction: any;
}

export interface IStakeAccountFormat {
    index: number;
    validatorId?: string;
    staked?: string;
    unstaked?: string;
    activating?: string;
    deactivating?: string;
}

'''
'''--- src/core/blockchain/types/account.ts ---
import { IAccountState } from '../../../redux/wallets/state';
import { BigNumber } from 'bignumber.js';

export interface IBlockchainAccountUtils {
    getAccountDerivationPath(accountIndex: number): string;
    getPrivateKeyFromDerived(derivedKey: any): string;
    isValidChecksumAddress(address: string): boolean;
    isValidAddress(address: string): boolean;

    publicToAddress(publicKey: string): string;
    privateToAddress(privateKey: string): string;
    privateToPublic(privateKey: string): string;

    getAccountFromPrivateKey(privateKey: string, index: number): IAccountState;

    amountToStd(value: BigNumber | number | string, decimals: number): BigNumber;
    amountFromStd(value: BigNumber, decimals: number): BigNumber;
    convertUnit(value: BigNumber, from: string, to: string): BigNumber;
}

'''
'''--- src/core/blockchain/types/blockchain.ts ---
import {
    IBlockchainConfig,
    IBlockchainNetwork,
    IBlockchainAccountUtils,
    BlockchainGenericClient,
    ChainIdType,
    Contracts
} from './';
import { GenericStats } from './stats';
import { AbstractBlockchainTransactionUtils } from './transaction';

export enum Blockchain {
    ETHEREUM = 'ETHEREUM',
    ZILLIQA = 'ZILLIQA',
    NEAR = 'NEAR',
    SOLANA = 'SOLANA',
    COSMOS = 'COSMOS',
    CELO = 'CELO'
}

export interface IBlockchain {
    config: IBlockchainConfig;
    networks: IBlockchainNetwork[];
    transaction: AbstractBlockchainTransactionUtils;
    account: IBlockchainAccountUtils;
    Client: new (chainId) => BlockchainGenericClient;
    getStats: (chainId: ChainIdType) => GenericStats;
    getClient: (chainId: ChainIdType) => BlockchainGenericClient;
    getContract: (chainId: ChainIdType, contractType: Contracts) => Promise<string>;
}

export enum WsEvent {
    NEW_BLOCK = 'NEW_BLOCK',
    TXN_LOG = 'TXN_LOG'
}

'''
'''--- src/core/blockchain/types/client-utils.ts ---
import { ITokenConfigState } from '../../../redux/tokens/state';
import { TransactionStatus } from '../../wallet/types';
import { IBlockchainTransaction } from './transaction';

export interface IClientUtils {
    getTransaction(hash: string, options?: { address?: string }): Promise<IBlockchainTransaction>;
    getTransactionStatus(
        hash: string,
        context?: {
            address?: string;
            txData?: any;
            broadcastedOnBlock: number;
            currentBlockNumber?: number;
            token?: ITokenConfigState;
        }
    ): Promise<TransactionStatus>;
}

'''
'''--- src/core/blockchain/types/client.ts ---
import BigNumber from 'bignumber.js';
import { IBlockchainNetwork, ChainIdType } from './network';
import { IFeeOptions, TransactionType, TypedTransaction } from './transaction';
import { GenericNameService } from '.';
import { HttpClient } from '../../utils/http-client';
import { PosBasicActionType, TokenType } from './token';
import { IClientUtils } from './client-utils';
import { IAccountState } from '../../../redux/wallets/state';
import { IValidator } from './stats';
import { ITokenConfigState } from '../../../redux/tokens/state';

export interface IBlockInfo {
    number: number;
    hash?: string;
}

export interface IBalance {
    total: BigNumber;
    available: BigNumber;
    detailed?: {};
}

export interface ISolanaBalance {
    available: BigNumber;
    total: BigNumber;
    staked: BigNumber;
    unstaked: BigNumber;
    deactivating: BigNumber;
    activating: BigNumber;
    reward: BigNumber;
    detailed: {
        [key: string]: IStakeAccountFormat;
    };
}

export interface IStakeAccountFormat {
    index: number;
    lockupTime: number;
    validatorId?: string;
    staked?: string;
    unstaked?: string;
    activating?: string;
    deactivating?: string;
}

export abstract class BlockchainGenericClient {
    public readonly tokens: { [type: string]: any } = {};
    public nameService: GenericNameService;
    public http: HttpClient;
    public readonly chainId: ChainIdType;
    public utils: IClientUtils;
    public contracts: { [type: string]: any } = {};
    public network: IBlockchainNetwork;

    constructor(chainId: ChainIdType, networks: IBlockchainNetwork[]) {
        let url = networks[0].url;
        const network = networks.filter(n => n.chainId === chainId)[0];
        if (network) {
            url = network.url;
        }
        this.network = network;
        this.chainId = chainId;
        this.http = new HttpClient(url);
    }

    public abstract getBalance(address: string): Promise<IBalance>;
    public abstract getNonce(address: string, publicKey: string): Promise<number>;
    public abstract getCurrentBlock(): Promise<IBlockInfo>;
    public abstract getMinimumAmountDelegate(): Promise<BigNumber>;

    public async getCurrentBlockHash(): Promise<string> {
        return null;
    }

    public canPerformAction(
        action: PosBasicActionType,
        options: {
            account: IAccountState;
            validatorAddress: string[];
        }
    ): Promise<{ value: boolean; message: string }> {
        return Promise.resolve({ value: true, message: '' });
    }

    public hasEnoughAmountToMakeAction(
        action: PosBasicActionType,
        options: {
            fromValidator: IValidator;
            account: IAccountState;
            tokenConfig: ITokenConfigState;
            toValidators: IValidator[];
            amount: string;
        }
    ): Promise<{ value: boolean; message: string }> {
        return Promise.resolve({ value: true, message: '' });
    }

    public abstract sendTransaction(
        transaction: any
    ): Promise<{ txHash: string; rawResponse: any }>;

    public abstract getFees(
        transactionType: TransactionType,
        data: {
            from?: string;
            to?: string;
            amount?: string;
            contractAddress?: string;
            raw?: string;
        },
        typedTransaction?: TypedTransaction,
        tokenType?: TokenType
    ): Promise<IFeeOptions>;

    public async getMinimumGasPrice(): Promise<number> {
        return null;
    }

    public async getTransactionConfirmations(txsHash: string): Promise<{ confirmations: number }> {
        return {
            confirmations: 0
        };
    }
}

'''
'''--- src/core/blockchain/types/config.ts ---
import { BigNumber } from 'bignumber.js';
import { TokenType, IButtonCTA } from './token';
import { ChainIdType, TypedTransaction } from '.';
import { ITokenConfigState } from '../../../redux/tokens/state';
import { IAffiliateBannerType } from '../../../components/affiliate-banner/types';

export enum BlockchainNameService {
    ENS = '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',
    ZNS = 'zil1jcgu2wlx6xejqk9jw3aaankw6lsjzeunx2j0jz',
    CNS = '0x7ea9ee21077f84339eda9c80048ec6db678642b1'
}

export type INameService = {
    tld: string | RegExp;
    service: BlockchainNameService;
    record?: string[];
};

export enum DerivationType {
    HD_KEY = 'HD_KEY',
    HD_KEY_ED25519 = 'HD_KEY_ED25519'
}

export interface IBlockchainConfig {
    derivationPath: string;
    derivationType: DerivationType;
    coin: string;
    defaultUnit: string;
    iconComponent: React.ComponentType<any>;
    droppedTxBlocksThreshold: number;
    autoAddedTokensSymbols: {
        [chainId: string]: {
            [symbol: string]: ITokenConfigState;
        };
    };
    autoAddedHiddenTokensSymbols?: {
        [chainId: string]: {
            [symbol: string]: ITokenConfigState;
        };
    };
    tokens: {
        [symbol: string]: ITokenConfigState;
    };
    typedTransaction: {
        HD: TypedTransaction;
        HW: TypedTransaction;
    };
    feeOptions: {
        gasPriceToken: string;
        defaults: {
            gasPrice: BigNumber;
            gasLimit: {
                [tokenType: string]: BigNumber;
            };
            gasPricePresets?: {
                low?: {
                    gasPrice?: BigNumber;
                    maxFeePerGas?: BigNumber;
                    maxPriorityFeePerGas?: BigNumber;
                };
                medium?: {
                    gasPrice?: BigNumber;
                    maxFeePerGas?: BigNumber;
                    maxPriorityFeePerGas?: BigNumber;
                };
                high?: {
                    gasPrice?: BigNumber;
                    maxFeePerGas?: BigNumber;
                    maxPriorityFeePerGas?: BigNumber;
                };
            };
        };
        ui: {
            availableTokenTypes: TokenType[];
            feeComponent: 'FeeTotal' | 'FeePresets';
            feeComponentAdvanced?: {
                HD: 'Eip1559FeesAvanced' | 'GasFeeAdvanced';
                HW: 'GasFeeAdvanced';
            };
            gasPriceUnit: string;
            defaultPreset?: 'low' | 'medium' | 'high';
        };
    };
    ui: {
        validator?: {
            totalLabel: string;
            amountCardLabel: string;
            maximumNumberOfValidators?: number;
        };
        token?: {
            labels: {
                tabAccount?: string;
                tabDelegations?: string;
                tabValidators?: string;
                tabTransactions?: string;
            };
            sendStepLabels: string[];
            actionScreenLabels: {};
            accountCTA: {
                mainCta: IButtonCTA;
            };
            delegationCTA: {
                mainCta: IButtonCTA;
            };
            validatorCTA: {
                mainCta: IButtonCTA;
                otherCtas: IButtonCTA[];
            };
        };
        addressDisplay?: 'stripped';
        enableTokenManagement: boolean;
        enableAccountCreation: boolean;
        maxAccountsNumber: number;
        extraFields?: string[];
        displayName: string;
        affiliateBanners: {
            account: IAffiliateBannerType;
        };
        fetchAccountStatsSec: number;
    };
    networks: {
        testNet: ChainIdType;
        mainNet?: ChainIdType;
    };
    defaultOrder: number;
    nameServices?: INameService[];
    amountToKeepInAccount: {
        [accountType: string]: BigNumber;
    };
}

export enum Contracts {
    STAKING = 'STAKING',
    GRT_TOKEN = 'GRT_TOKEN',

    // SWAP
    ZILSWAP = 'ZILSWAP',
    MOONLETSWAP = 'MOONLETSWAP',

    TOKEN_CONTRACT = 'TOKEN_CONTRACT',

    // CELO
    LOCKED_GOLD = 'LOCKED_GOLD',
    ELECTION = 'ELECTION',
    ACCOUNTS = 'ACCOUNTS'
}

'''
'''--- src/core/blockchain/types/index.ts ---
export * from './blockchain';
export * from './client';
export * from './network';
export * from './transaction';
export * from './account';
export * from './config';
export * from './name-service';

'''
'''--- src/core/blockchain/types/name-service.ts ---
import { Blockchain } from './blockchain';

export enum ResolveTextCode {
    OK = 'OK',
    WARN_CHECKSUM = 'WARN_CHECKSUM'
}
export enum ResolveTextType {
    ADDRESS = 'ADDRESS',
    NAME = 'NAME'
}
export enum ResolveTextError {
    INVALID = 'INVALID',
    CONNECTION_ERROR = 'CONNECTION_ERROR'
}

export interface IResolveNameResponse {
    address: string;
}

export interface IResolveTextResponse {
    code: ResolveTextCode;
    type: ResolveTextType;
    address: string;
    name: string;
}

export abstract class GenericNameService {
    public blockchain: Blockchain;
    constructor(protected client) {
        this.client = client;
    }
    public abstract resolveText(text: string): Promise<IResolveTextResponse>;

    public abstract resolveName(name: string): Promise<IResolveNameResponse>;
}

'''
'''--- src/core/blockchain/types/network.ts ---
export type ChainIdType = number | string;

export interface IBlockchainNetwork {
    name: string;
    chainId: ChainIdType;
    url: string;
    wsUrl?: string;
    mainNet: boolean;
    explorer: {
        name: string;
        getTransactionUrl: (txn: string) => string;
        getAccountUrl: (address: string) => string;
    };
    links?: {
        [name: string]: (publicKey: string) => string;
    };
}

'''
'''--- src/core/blockchain/types/stats.ts ---
import { IBlockchainConfig } from './config';
import { BlockchainGenericClient } from './client';
import { Blockchain } from './blockchain';
import { PosBasicActionType } from './token';
import BigNumber from 'bignumber.js';
import { IAccountState, ITokenState } from '../../../redux/wallets/state';

export enum IStatValueType {
    STRING = 'STRING',
    AMOUNT = 'AMOUNT'
}

export interface IStatValue {
    title: string;
    subtitle?: string;
    color: string;
    type: IStatValueType;
    icon?: string;
    data: {
        value: string;
        tokenSymbol?: string;
        blockchain?: Blockchain;
    };
}

export interface AccountStats {
    topStats: IStatValue[];
    chartStats: IStatValue[];
    secondaryStats: IStatValue[];
    totalAmount: BigNumber;
    widgets: IPosWidget[];
}

export abstract class GenericStats<Client = BlockchainGenericClient> {
    protected client: Client;
    protected config: IBlockchainConfig;
    constructor(client: Client, config: IBlockchainConfig) {
        this.client = client;
        this.config = config;
    }

    public async getAccountDelegateStats(
        account: IAccountState,
        token: ITokenState
    ): Promise<AccountStats> {
        throw new Error('Not Implemented');
    }

    public async getAvailableBalanceForDelegate(
        account: IAccountState,
        validatorId?: string
    ): Promise<string> {
        throw new Error('Not Implemented');
    }
}

export enum CardActionType {
    CHECKBOX = 'CHECKBOX',
    NAVIGATE = 'NAVIGATE',
    DEFAULT = 'DEFAULT'
}

export interface IValidator {
    id: string;
    icon: string;
    name: string;
    rank: string;
    website: string;
    totalVotes: string;
    amountDelegated: {
        pending: string;
        active: string;
        deactivating?: string;
        inactive?: string;
    };
    topStats: IStatValue[];
    chartStats: IStatValue[];
    secondaryStats: IStatValue[];
    actionType?: CardActionType;
    actionTypeSelected?: boolean;
    inputAmount?: string;
}

export interface IPosWidget {
    type: PosBasicActionType;
    value: string;
    timestamp: string;
    index?: number;
    validator?: IValidator;
}

'''
'''--- src/core/blockchain/types/token.ts ---
export enum TokenType {
    NATIVE = 'NATIVE',
    ERC20 = 'ERC20',
    ZRC2 = 'ZRC2',
    SPL = 'SPL'
}

export enum TokenScreenComponentType {
    DEFAULT = 'DEFAULT',
    DELEGATE = 'DELEGATE'
}

export interface ITokenIcon {
    uri?: string;
    iconComponent?: React.ComponentType<any>;
}

export const GENERIC_TOKEN_ICON = {
    uri:
        'https://raw.githubusercontent.com/atomiclabs/cryptocurrency-icons/master/128/icon/generic.png'
};

export interface IButtonCTA {
    title: string;
    iconName: string;
    navigateTo: { screen: string; params: any };
}

export enum PosBasicActionType {
    DELEGATE = 'DELEGATE',
    DELEGATE_V2 = 'DELEGATE_V2',
    REDELEGATE = 'REDELEGATE',
    UNLOCK = 'UNLOCK',
    UNDELEGATE = 'UNDELEGATE',
    UNVOTE = 'UNVOTE',
    UNSTAKE = 'UNSTAKE',
    ACTIVATE = 'ACTIVATE',
    CLAIM_REWARD = 'CLAIM_REWARD',
    CLAIM_REWARD_NO_INPUT = 'CLAIM_REWARD_NO_INPUT',
    WITHDRAW = 'WITHDRAW',
    REINVEST = 'REINVEST',
    LOCK = 'LOCK',
    CREATE_ACCOUNT = 'CREATE_ACCOUNT',
    CREATE_STAKE_ACCOUNT = 'CREATE_STAKE_ACCOUNT',
    SPLIT_STAKE = 'SPLIT STAKE',
    STAKE = 'STAKE',
    SEND = 'SEND',
    CREATE_ACCOUNT_AND_CLAIM = 'CREATE_ACCOUNT_AND_CLAIM',
    SELECT_STAKING_POOL = 'SELECT_STAKING_POOL',
    UNSELECT_STAKING_POOL = 'UNSELECT_STAKING_POOL',
    SOLANA_STAKEACCOUNT_DELEGATE = 'SOLANA_STAKE_ACCOUNT_DELEGATE',
    SOLANA_STAKEACCOUNT_CREATE = 'SOLANA_STAKEACCOUNT_CREATE',
    SOLANA_STAKEACCOUNT_SPLIT = 'SOLANA_STAKEACCOUNT_SPLIT',
    SOLANA_STAKEACCOUNT_WITHDRAW = 'SOLANA_STAKEACCOUNT_WITHDRAW',
    SOLANA_STAKEACCOUNT_UNSTAKE = 'SOLANA_STAKEACCOUNT_UNSTAKE',
    SOLANA_CREATE_AND_DELEGATE_STAKE_ACCOUNT = 'SOLANA_CREATE_AND_DELEGATE_STAKE_ACCOUNT',
    SOLANA_CREATE_ASSOCIATED_TOKEN_ACCOUNT = 'SOLANA_CREATE_ASSOCIATED_TOKEN_ACCOUNT',

    // GRT allowance
    INCREASE_ALLOWANCE = 'INCREASE_ALLOWANCE',

    SWAP = 'SWAP'
}

export enum SwapType {
    BUY = 'BUY',
    SELL = 'SELL'
}

export enum ContractMethod {
    INCREASE_ALLOWANCE = 'IncreaseAllowance',
    SWAP_EXACT_ZIL_FOR_TOKENS = 'SwapExactZILForTokens',
    SWAP_EXACT_TOKENS_FOR_ZIL = 'SwapExactTokensForZIL',
    SWAP_EXACT_TOKENS_FOR_TOKENS = 'SwapExactTokensForTokens',
    DELEGATE = 'Delegate',
    UNDELEGATE = 'Undelegate',
    SOLANA_CREATE_ASSOCIATED_TOKEN_ACCOUNT = 'SolanaCreateAssociatedTokenAccount',
    SWAP = 'Swap'
}

'''
'''--- src/core/blockchain/types/transaction.ts ---
import { IAccountState } from '../../../redux/wallets/state';
import { Blockchain, ChainIdType } from '.';
import { TransactionStatus } from '../../wallet/types';
import BigNumber from 'bignumber.js';
import { ITokenConfigState } from '../../../redux/tokens/state';
import { PosBasicActionType } from './token';
import { IValidator } from './stats';

export abstract class AbstractBlockchainTransactionUtils {
    public async sign(transaction: IBlockchainTransaction, privateKey: string): Promise<string> {
        throw new Error('Not Implemented');
    }
    public async signMessage(message: string, privateKey: string): Promise<string> {
        throw new Error('Not Implemented');
    }
    public async buildTransferTransaction(
        tx: ITransferTransaction
    ): Promise<IBlockchainTransaction> {
        throw new Error('Not Implemented');
    }
    public getTransactionAmount(tx: IBlockchainTransaction): string {
        throw new Error('Not Implemented');
    }
    public getTransactionStatusByCode(status: any): TransactionStatus {
        throw new Error('Not Implemented');
    }
    public async buildPosTransaction(
        tx: IPosTransaction,
        transactionType: PosBasicActionType
    ): Promise<IBlockchainTransaction[]> {
        throw new Error('Not Implemented');
    }
    public getMessageSignature(account: IAccountState, message: string, signature: string): any {
        throw new Error('Not Implemented');
    }
}

// tslint:disable-next-line:no-shadowed-variable
export interface IBlockchainTransaction<IAdditionalInfoType = any> {
    id?: string;
    walletPubKey?: string;
    date: {
        created: number;
        signed: number;
        broadcasted: number;
        confirmed: number;
    };
    blockchain: Blockchain;
    chainId: ChainIdType;
    type: TransactionType;
    token: ITokenConfigState;
    address: string;
    publicKey: string;
    toAddress: string;
    amount: string;
    data?: {
        method?: string;
        params?: string[];
        raw?: string;
    };
    code?: string;
    feeOptions: IFeeOptions;
    broadcastedOnBlock: number;
    nonce: number;
    status: TransactionStatus;
    additionalInfo?: IAdditionalInfoType;
    confirmations?: {
        numConfirmations: number; // current
        numConfirmationsNeeded: number; // target
    };
}

export enum TransactionType {
    TRANSFER = 'TRANSFER',
    CONTRACT_CALL = 'CONTRACT_CALL',
    CONTRACT_DEPLOY = 'CONTRACT_DEPLOY'
}

export enum TypedTransaction {
    TYPE_0 = 'TYPE_O',
    TYPE_2 = 'TYPE_2'
}

export interface ITransactionFees {
    gasPrice: string;
    gasLimit: string;
    gasUsed: string;
    feeTotal: string;
    maxFeePerGas?: string;
    maxPriorityFeePerGas?: string;
}

export interface IFeeOptions {
    gasPrice?: string;
    gasLimit?: string;
    feeTotal?: string;
    maxFeePerGas?: string;
    maxPriorityFeePerGas?: string;
    presets?: {
        low?: {
            gasPrice?: BigNumber;
            maxFeePerGas?: BigNumber;
            maxPriorityFeePerGas?: BigNumber;
        };
        medium?: {
            gasPrice?: BigNumber;
            maxFeePerGas?: BigNumber;
            maxPriorityFeePerGas?: BigNumber;
        };
        high?: {
            gasPrice?: BigNumber;
            maxFeePerGas?: BigNumber;
            maxPriorityFeePerGas?: BigNumber;
        };
    };
    responseHasDefaults?: boolean;
}

export interface IPosTransaction {
    account: IAccountState;
    chainId: ChainIdType;
    validators: IValidator[];
    amount: string;
    token: string;
    feeOptions: IFeeOptions;
    extraFields?: ITransactionExtraFields;
}

export interface ITransferTransaction {
    account: IAccountState;
    chainId: ChainIdType;
    toAddress: string;
    amount: string;
    token: string;
    //  nonce: number;
    feeOptions: IFeeOptions;
    //  currentBlockHash: string;
    //  currentBlockNumber: number;
    extraFields?: ITransactionExtraFields;
}

export interface ITransactionExtraFields {
    memo?: string;
    witdrawIndex?: number;
    posAction?: PosBasicActionType;
    validatorId?: string;
    validatorName?: string;
    fromValidator?: IValidator;
    amount?: string;
    stakeAccountKey?: string;
    stakeAccountIndex?: number;
    splitFrom?: string;
    typedTransaction?: TypedTransaction;

    //
}

export enum TransactionMessageType {
    INFO = 'INFO',
    ERROR = 'ERROR',
    WARNING = 'WARNING',
    COMPONENT = 'COMPONENT'
}

export enum TransactionMessageText {
    REVIEW_TRANSACTION = 'REVIEW_TRANSACTION',
    OPEN_APP = 'OPEN_APP',
    SIGNING = 'SIGNING',
    CONNECTING_LEDGER = 'CONNECTING_LEDGER',
    BROADCASTING = 'BROADCASTING',
    TR_UNDERPRICED = 'TR_UNDERPRICED',
    NOT_ENOUGH_TOKENS = 'NOT_ENOUGH_TOKENS',
    CONTRACT_TX_NORMAL_NOT_ALLOWED = 'CONTRACT_TX_NORMAL_NOT_ALLOWED',
    WAITING_TX_CONFIRM = 'WAITING_TX_CONFIRM',
    WAITING_TX_CONFIRM_CANCEL = 'WAITING_TX_CONFIRM_CANCEL',
    INSUFFICIENT_FUNDS_SOURCE_ACCOUNT = 'INSUFFICIENT_FUNDS_SOURCE_ACCOUNT',
    GOVERNANCE_SIGN = 'GOVERNANCE_SIGN',
    GOVERNANCE_VOTING = 'GOVERNANCE_VOTING',
    GOVERNANCE_VOTED = 'GOVERNANCE_VOTED',
    GAS_PRICE_TOO_LOW = 'GAS_PRICE_TOO_LOW',
    GAS_LIMIT_TOO_LOW = 'GAS_LIMIT_TOO_LOW'
}

'''
'''--- src/core/blockchain/zilliqa/__tests__/account.test.ts ---
import { Zilliqa } from '../';
import {
    getPubKeyFromPrivateKey,
    getAddressFromPrivateKey,
    getAddressFromPublicKey
} from '@zilliqa-js/crypto/dist/util'; // import like this to optimize imports
import { toBech32Address, fromBech32Address } from '@zilliqa-js/crypto/dist/bech32';
import { isBech32 } from '@zilliqa-js/util/dist/validation';

jest.mock('@zilliqa-js/crypto/dist/util', () => {
    const util = jest.requireActual('@zilliqa-js/crypto/dist/util');
    return {
        ...util,
        getPubKeyFromPrivateKey: jest.fn().mockReturnValue('PUBLIC_KEY'),
        getAddressFromPrivateKey: jest.fn().mockReturnValue('address'),
        getAddressFromPublicKey: jest.fn().mockReturnValue('address')
    };
});

jest.mock('@zilliqa-js/util/dist/validation', () => ({
    isBech32: jest.fn().mockReturnValue(true)
}));

jest.mock('@zilliqa-js/crypto/dist/bech32', () => ({
    toBech32Address: jest.fn().mockReturnValue('BECH32_ADDRESS'),
    fromBech32Address: jest.fn().mockReturnValue('BECH32_ADDRESS')
}));

const clearMocks = () => {
    // @ts-ignore
    getPubKeyFromPrivateKey.mockClear();
    // @ts-ignore
    getAddressFromPrivateKey.mockClear();
    // @ts-ignore
    getAddressFromPublicKey.mockClear();
    // @ts-ignore
    toBech32Address.mockClear();
    // @ts-ignore
    isBech32.mockClear();
};

describe('Zilliqa account', () => {
    beforeEach(() => {
        clearMocks();
    });

    test('isValidChecksumAddress()', () => {
        expect(Zilliqa.account.isValidChecksumAddress('ADDRESS')).toBe(true);
        expect(isBech32).toBeCalledWith('ADDRESS');
    });

    test('isValidAddress()', () => {
        expect(Zilliqa.account.isValidAddress('ADDRESS')).toBe(true);
        expect(isBech32).toBeCalledWith('ADDRESS');
    });

    test('publicToAddress()', () => {
        expect(Zilliqa.account.publicToAddress('PUBLIC_KEY')).toBe('BECH32_ADDRESS');
        expect(getAddressFromPublicKey).toBeCalledWith('PUBLIC_KEY');
        expect(toBech32Address).toBeCalledWith('address');
    });

    test('privateToPublic()', () => {
        expect(Zilliqa.account.privateToPublic('PRIVATE_KEY')).toBe('PUBLIC_KEY');
        expect(getPubKeyFromPrivateKey).toBeCalledWith('PRIVATE_KEY');
    });

    test('privateToAddress()', () => {
        expect(Zilliqa.account.privateToAddress('PRIVATE_KEY')).toBe('BECH32_ADDRESS');
        expect(getAddressFromPrivateKey).toBeCalledWith('PRIVATE_KEY');
        expect(toBech32Address).toBeCalledWith('address');
    });

    test('getAccountFromPrivateKey()', () => {
        // valid private key
        const result = Zilliqa.account.getAccountFromPrivateKey('PRIVATE_KEY', 1);
        expect(getPubKeyFromPrivateKey).toBeCalledWith('PRIVATE_KEY');
        expect(getAddressFromPrivateKey).toBeCalledWith('PRIVATE_KEY');
        expect(toBech32Address).toBeCalledWith('address');

        expect(result).toMatchSnapshot();

        // TODO: test with invalid privatekey, without mocks
    });
});

'''
'''--- src/core/blockchain/zilliqa/__tests__/client.test.ts ---
import { Zilliqa } from '../';
import BigNumber from 'bignumber.js';

jest.mock('../../../utils/http-client', () => ({
    HttpClient: class {
        public rpcResult = Promise.resolve();

        public jsonRpc() {
            return this.rpcResult;
        }

        public setRpcResult(value) {
            this.rpcResult = value;
        }
    }
}));

describe('Zilliqa client', () => {
    test('getBalance', async () => {
        const client = Zilliqa.getClient(1);

        // // @ts-ignore
        // client.http.setRpcResult(
        //     Promise.resolve({
        //         result: {
        //             balance: '123'
        //         }
        //     })
        // );
        // expect(await client.getBalance('zil16dnnka6yaa9mdu32gararzwv5vg369p0zkhps7')).toEqual(
        //     new BigNumber('123')
        // );

        // // @ts-ignore
        // client.http.setRpcResult(
        //     Promise.resolve({
        //         error: {
        //             message: 'Account is not created'
        //         }
        //     })
        // );
        // expect(await client.getBalance('zil16dnnka6yaa9mdu32gararzwv5vg369p0zkhps7')).toEqual(
        //     new BigNumber('0')
        // );

        // // @ts-ignore
        // client.http.setRpcResult(Promise.reject('ERROR'));
        // try {
        //     await client.getBalance('zil16dnnka6yaa9mdu32gararzwv5vg369p0zkhps7');
        // } catch (e) {
        //     expect(e).toBe('ERROR');
        // }
        // expect.assertions(3);
    });

    // test('getNonce', () => {
    //     const client = Zilliqa.getClient(1);
    //     expect(() => client.getNonce('addr')).toThrow();
    // });
});

'''
'''--- src/core/blockchain/zilliqa/account.ts ---
import { AccountType, IAccountState } from '../../../redux/wallets/state';
import {
    getPubKeyFromPrivateKey,
    getAddressFromPrivateKey,
    getAddressFromPublicKey
} from '@zilliqa-js/crypto/dist/util'; // import like this to optimize imports
import { toBech32Address, fromBech32Address } from '@zilliqa-js/crypto/dist/bech32';
import { isBech32 } from '@zilliqa-js/util/dist/validation';
import { Blockchain, IBlockchainAccountUtils } from '../types';
import { BigNumber } from 'bignumber.js';
import { config } from './config';
import { convert } from '../common/account';
import HDNode from 'hdkey';
import { generateTokensConfig } from '../../../redux/tokens/static-selectors';

export class ZilliqaAccountUtils implements IBlockchainAccountUtils {
    public getAccountDerivationPath(accountIndex: number): string {
        return `${accountIndex}`;
    }

    public getPrivateKeyFromDerived(derivedKey: HDNode): string {
        return derivedKey.privateKey.toString('hex');
    }

    public isValidChecksumAddress(address: string): boolean {
        return isBech32(address) && fromBech32Address(address) !== undefined;
    }

    public isValidAddress(address: string): boolean {
        return isBech32(address) && fromBech32Address(address) !== undefined;
    }

    public publicToAddress(publicKey: string): string {
        return toBech32Address(getAddressFromPublicKey(publicKey));
    }

    public privateToPublic(privateKey: string): string {
        return getPubKeyFromPrivateKey(privateKey);
    }

    public privateToAddress(privateKey: string): string {
        return toBech32Address(getAddressFromPrivateKey(privateKey));
    }

    public getAccountFromPrivateKey(privateKey: string, index: number): IAccountState {
        return {
            index,
            type: AccountType.DEFAULT,
            selected: false,
            publicKey: this.privateToPublic(privateKey),
            address: this.privateToAddress(privateKey),
            blockchain: Blockchain.ZILLIQA,
            tokens: generateTokensConfig(Blockchain.ZILLIQA)
        };
    }

    public amountToStd(value: BigNumber | number | string, decimals: number): BigNumber {
        return new BigNumber(value).multipliedBy(new BigNumber(10).pow(decimals));
    }

    public amountFromStd(value: BigNumber | number | string, decimals: number): BigNumber {
        return new BigNumber(value).dividedBy(new BigNumber(10).pow(decimals));
    }

    public convertUnit(value: BigNumber, from: string, to: string): BigNumber {
        return convert(value, from, to, config);
    }
}

'''
'''--- src/core/blockchain/zilliqa/client-utils.ts ---
import { IClientUtils } from '../types/client-utils';
import { Client } from './client';
import { IBlockchainTransaction, Blockchain, TransactionType } from '../types';
import { TokenType, TokenScreenComponentType } from '../types/token';
import { getAddressFromPublicKey, toBech32Address } from '@zilliqa-js/crypto';
import { isBech32 } from '@zilliqa-js/util/dist/validation';
import { config } from './config';
import { ITokenConfigState } from '../../../redux/tokens/state';
import { TransactionStatus } from '../../wallet/types';

const ZRC2_TRANSFER_EVENTS_SUCCESS_LIST = [
    'Transfer',
    'TransferSuccess',
    'TransferFromSuccess',
    'IncreasedAllowance'
];

export class ClientUtils implements IClientUtils {
    constructor(private client: Client) {}

    async getTransaction(hash: string): Promise<IBlockchainTransaction> {
        return this.client
            .call('GetTransaction', [hash])
            .then(response => this.buildTransactionFromBlockchain(response.result));
    }

    async buildTransactionFromBlockchain(txData): Promise<IBlockchainTransaction> {
        let fromAddress = getAddressFromPublicKey(txData.senderPubKey.replace('0x', ''));
        if (!isBech32(fromAddress)) {
            fromAddress = toBech32Address(fromAddress);
        }

        const toAddress = !isBech32(txData.toAddr) ? toBech32Address(txData.toAddr) : txData.toAddr;

        // const tokenInfo = await this.client.tokens[TokenType.ZRC2].getTokenInfo(toAddress);
        try {
            const token = await this.getToken(toAddress);
            const data: any = {};

            if (token.type === TokenType.ZRC2) {
                if (txData.receipt.success === true) {
                    const transferEvent = (txData.receipt?.event_logs || []).find(
                        event => ZRC2_TRANSFER_EVENTS_SUCCESS_LIST.indexOf(event._eventname) >= 0
                    );

                    const recipientAddress = this.client.tokens[
                        TokenType.ZRC2
                    ].extractEventParamsValue(transferEvent?.params, 'recipient');

                    data.params = [
                        (recipientAddress !== '' && toBech32Address(recipientAddress)) || '',
                        this.client.tokens[TokenType.ZRC2].extractEventParamsValue(
                            transferEvent?.params,
                            'amount'
                        )
                    ];
                } else {
                    data.params = JSON.parse(txData.data).params;
                }
            }

            return {
                id: txData.ID,
                date: {
                    created: Date.now(),
                    signed: Date.now(),
                    broadcasted: Date.now(),
                    confirmed: Date.now()
                },
                blockchain: Blockchain.ZILLIQA,
                chainId: this.client.chainId,
                type: TransactionType.TRANSFER,

                address: fromAddress,
                publicKey: txData.senderPubKey,

                toAddress,
                amount: txData.amount,
                data,
                feeOptions: {
                    gasPrice: txData.gasPrice,
                    gasLimit: txData.gasLimit,
                    feeTotal: txData.receipt?.cumulative_gas
                },
                broadcastedOnBlock: txData.receipt?.epoch_num,
                nonce: txData.nonce,
                status: await this.getTransactionStatus(txData.ID, { txData, token }),
                token
            };
        } catch (err) {
            return Promise.reject(err);
        }
    }

    async getToken(toAddress: string): Promise<ITokenConfigState> {
        const token = await this.client.tokens[TokenType.ZRC2].getTokenInfo(toAddress).catch(e => {
            return null;
        });

        if (token && token.symbol && token.name && token.decimals) {
            token.type = TokenType.ZRC2;
            token.ui = {
                decimals: token.decimals,
                tokenScreenComponent: TokenScreenComponentType.DEFAULT
            };

            return token;
        }

        return config.tokens.ZIL;
    }

    async getTransactionStatus(
        hash: string,
        context?: {
            txData?: any;
            broadcastedOnBlock?: number;
            currentBlockNumber?: number;
            token?: ITokenConfigState;
        }
    ): Promise<TransactionStatus> {
        let status = TransactionStatus.PENDING;

        if (context?.txData) {
            if (context?.token?.type === TokenType.ZRC2) {
                const transferCallbackEvent = (context?.txData?.receipt?.event_logs || []).find(
                    event => ZRC2_TRANSFER_EVENTS_SUCCESS_LIST.indexOf(event._eventname) >= 0
                );

                status = transferCallbackEvent
                    ? TransactionStatus.SUCCESS
                    : TransactionStatus.FAILED;
            } else {
                status = context?.txData.receipt.success
                    ? TransactionStatus.SUCCESS
                    : TransactionStatus.FAILED;
            }
        } else {
            let txData;
            try {
                txData = await this.client
                    .call('GetTransactionStatus', [hash])
                    .then(res => res.result);
            } catch {
                // tx is not present on the blockchain
            }

            // modificationState	status	Description
            //        0	               0	Transaction not found
            //        0	               1	Pending - Dispatched
            //        1	               2	Pending - Soft-confirmed (awaiting Tx block generation)
            //        1	               4	Pending - Nonce is higher than expected
            //        1	               5	Pending - Microblock gas limit exceeded
            //        1	               6	Pending - Consensus failure in network
            //        2	               3	Confirmed
            //        2	               10	Rejected - Transaction caused math error
            //        2	               11	Rejected - Scilla invocation error
            //        2	               12	Rejected - Contract account initialization error
            //        2	               13	Rejected - Invalid source account
            //        2	               14	Rejected - Gas limit higher than shard gas limit
            //        2	               15	Rejected - Unknown transaction type
            //        2	               16	Rejected - Transaction sent to wrong shard
            //        2	               17	Rejected - Contract & source account cross-shard issue
            //        2	               18	Rejected - Code size exceeded limit
            //        2	               19	Rejected - Transaction verification failed
            //        2	               20	Rejected - Gas limit too low
            //        2	               21	Rejected - Insufficient balance
            //        2	               22	Rejected - Insufficient gas to invoke Scilla checker
            //        2	               23	Rejected - Duplicate transaction exists
            //        2	               24	Rejected - Transaction with same nonce but same/higher gas price exists
            //        2	               25	Rejected - Invalid destination address
            //        2	               26	Rejected - Failed to add contract account to state
            //        2	               27	Rejected - Nonce is lower than expected
            //        2	               255	Rejected - Internal error
            if (txData?.status) {
                if (txData.status === 3) {
                    status = txData.success ? TransactionStatus.SUCCESS : TransactionStatus.FAILED;
                } else if (txData.status >= 10) {
                    status = TransactionStatus.FAILED;
                } else if ([1, 2, 4, 5, 6].indexOf(txData.status) >= 0) {
                    let currentBlockNumber = context?.currentBlockNumber;
                    if (!currentBlockNumber) {
                        currentBlockNumber = await this.client
                            .getCurrentBlock()
                            .then(res => res.number);
                    }

                    if (
                        currentBlockNumber &&
                        context?.broadcastedOnBlock &&
                        currentBlockNumber - context?.broadcastedOnBlock > 5 &&
                        Math.ceil(currentBlockNumber / 100) >
                            Math.ceil(context?.broadcastedOnBlock / 100)
                    ) {
                        status = TransactionStatus.DROPPED;
                    }
                }
            } else {
                // tx not present
                let currentBlockNumber = context?.currentBlockNumber;
                if (!currentBlockNumber) {
                    currentBlockNumber = await this.client
                        .getCurrentBlock()
                        .then(res => res.number);
                }

                if (
                    currentBlockNumber &&
                    context?.broadcastedOnBlock &&
                    currentBlockNumber - context?.broadcastedOnBlock > 2
                ) {
                    status = TransactionStatus.DROPPED;
                }
            }
        }

        return status;
    }
}

'''
'''--- src/core/blockchain/zilliqa/client.ts ---
import {
    Blockchain,
    BlockchainGenericClient,
    ChainIdType,
    IBlockInfo,
    TransactionMessageText,
    TransactionType,
    IBalance,
    ITransactionFees,
    Contracts,
    TypedTransaction
} from '../types';
import { BigNumber } from 'bignumber.js';
import { networks } from './networks';
import { fromBech32Address } from '@zilliqa-js/crypto/dist/bech32';
import { config } from './config';
import { NameService } from './name-service';
import { PosBasicActionType, TokenType } from '../types/token';
import { Zrc2Client } from './tokens/zrc2-client';
import { isBech32 } from '@zilliqa-js/util/dist/validation';
import { ClientUtils } from './client-utils';
import { Staking } from './contracts/staking';
import { ApiClient } from '../../utils/api-client/api-client';
import { translate } from '../../i18n';
import { Capitalize } from '../../utils/format-string';
import { IAccountState } from '../../../redux/wallets/state';
import { IValidator } from '../types/stats';
import { ITokenConfigState } from '../../../redux/tokens/state';
import { getBlockchain } from '../blockchain-factory';
import { splitStake } from '../../utils/balance';

export class Client extends BlockchainGenericClient {
    constructor(chainId: ChainIdType) {
        super(chainId, networks);
        this.nameService = new NameService(this);
        this.tokens[TokenType.ZRC2] = new Zrc2Client(this);
        this.utils = new ClientUtils(this);
        this.contracts[Contracts.STAKING] = new Staking(this);
        this.http.jsonRpcRetriesFailedRequests = 2;
    }

    public async getTransactionFees(txHash: string): Promise<ITransactionFees> {
        try {
            if (txHash.startsWith('0x')) txHash = txHash.replace('0x', '');

            const txRes = await this.call('GetTransaction', [txHash]);

            if (txRes?.result?.gasPrice && txRes?.result?.gasLimit) {
                const gasPrice = new BigNumber(txRes.result.gasPrice);
                const gasLimit = new BigNumber(txRes.result.gasLimit);
                let gasUsed = new BigNumber(0);

                let feeTotal = gasPrice.multipliedBy(gasLimit);

                if (txRes?.result?.receipt?.cumulative_gas) {
                    gasUsed = new BigNumber(txRes.result.receipt.cumulative_gas);
                    feeTotal = gasPrice.multipliedBy(gasUsed);
                }

                return {
                    gasPrice: gasPrice.toFixed(),
                    gasLimit: gasLimit.toFixed(),
                    gasUsed: gasUsed.toFixed(),
                    feeTotal: feeTotal.toFixed()
                };
            } else {
                return;
            }
        } catch (error) {
            throw new Error(error);
        }
    }

    public async getTransactionErrorMessage(txHash: string): Promise<{ message: string }> {
        try {
            if (txHash.startsWith('0x')) txHash = txHash.replace('0x', '');

            const txRes = await this.call('GetTransaction', [txHash]);

            let error: {
                message: string;
            };

            const exceptions = txRes?.result?.receipt?.exceptions;
            if (exceptions && Array.isArray(exceptions) && exceptions.length > 0) {
                if (exceptions[0]?.message) {
                    const errorMsg = exceptions[0].message;
                    if (errorMsg.includes('RequestedRatesCannotBeFulfilled'))
                        error = { message: translate('Errors.RequestedRatesCannotBeFulfilled') };

                    if (errorMsg.includes('TransactionExpired'))
                        error = { message: translate('Errors.TransactionExpired') };

                    if (errorMsg.includes('MissingPool'))
                        error = { message: translate('Errors.MissingPool') };

                    if (errorMsg.includes('code : (Int32 -2))'))
                        error = { message: translate('Errors.Err2') };

                    if (errorMsg.includes('code : (Int32 -3))'))
                        error = { message: translate('Errors.Err3') };

                    if (errorMsg.includes('Ran out of gas')) {
                        error = { message: translate('Errors.OutOfGas') };
                    }
                }
            }

            return error;
        } catch (error) {
            throw new Error(error);
        }
    }

    public async fetchRewardsForTransaction(txHash: string): Promise<{ zil: string }> {
        try {
            let zil = 0;
            return this.call('GetTransaction', [txHash]).then(response => {
                if (response?.result?.receipt?.event_logs) {
                    const logs = response?.result?.receipt?.event_logs;

                    const zilObject = logs.filter(v => (v._eventname = 'Send deleg rewards'));
                    if (zilObject.length) {
                        const params = zilObject[0].params.filter(v => (v.vname = 'amt'));
                        if (params.length) {
                            zil = params[0].value;
                        }
                    }
                }

                return { zil: new BigNumber(zil).toFixed() };
            });
        } catch (err) {
            throw new Error(err);
        }
    }

    public async getBalance(address: string): Promise<IBalance> {
        try {
            const data = await new ApiClient().validators.getBalance(
                address,
                Blockchain.ZILLIQA,
                this.chainId.toString()
            );
            return {
                total: data?.balance.total || new BigNumber(0),
                available: data?.balance.available || new BigNumber(0)
            };
        } catch {
            return { total: new BigNumber(0), available: new BigNumber(0) };
        }
    }

    public async getNonce(address: string, publicKey: string): Promise<number> {
        try {
            const response = await this.call('GetBalance', [
                fromBech32Address(address)
                    .replace('0x', '')
                    .toLowerCase()
            ]);
            return response.result.nonce + 1; // TODO to see what happens when there are multiple transactions in a limited time
        } catch (result) {
            if (result?.error?.message === 'Account is not created') {
                return 0;
            }
            return Promise.reject(result);
        }
    }

    public async getCurrentBlock(): Promise<IBlockInfo> {
        try {
            const response = await this.call('GetLatestTxBlock');
            return {
                hash: response?.result?.body?.BlockHash,
                number: response?.result?.header?.BlockNum
            };
        } catch (result) {
            return Promise.reject(result);
        }
    }

    public async hasEnoughAmountToMakeAction(
        action: PosBasicActionType,
        options: {
            fromValidator: IValidator;
            account: IAccountState;
            tokenConfig: ITokenConfigState;
            toValidators: IValidator[];
            amount: string;
        }
    ): Promise<{ value: boolean; message: string }> {
        const blockchainInstance = getBlockchain(options.account.blockchain);

        const minimum = new BigNumber(await this.getMinimumAmountDelegate());
        const delegatedAmountFrom = new BigNumber(options.fromValidator.amountDelegated.active);
        const inputAmount: BigNumber = blockchainInstance.account.amountToStd(
            options.amount,
            options.tokenConfig.decimals
        );

        switch (action) {
            case PosBasicActionType.UNSTAKE: {
                if (inputAmount.isEqualTo(delegatedAmountFrom))
                    return Promise.resolve({ value: true, message: '' });
                else if (delegatedAmountFrom.minus(minimum).isGreaterThanOrEqualTo(inputAmount)) {
                    return Promise.resolve({ value: true, message: '' });
                } else {
                    const lowerThen = blockchainInstance.account.amountFromStd(
                        delegatedAmountFrom.minus(minimum),
                        options.tokenConfig.decimals
                    );

                    return Promise.resolve({
                        value: false,
                        message: translate('Validator.minimumUnstake', { lowerThen })
                    });
                }
            }
            case PosBasicActionType.REDELEGATE: {
                const unstakedAll = inputAmount.isEqualTo(delegatedAmountFrom);

                if (!unstakedAll) {
                    if (delegatedAmountFrom.minus(minimum).isGreaterThanOrEqualTo(inputAmount)) {
                        return Promise.resolve({ value: true, message: '' });
                    } else {
                        const lowerThen = blockchainInstance.account.amountFromStd(
                            delegatedAmountFrom.minus(minimum),
                            options.tokenConfig.decimals
                        );

                        return Promise.resolve({
                            value: false,
                            message: translate('Validator.minimumUnstake', { lowerThen })
                        });
                    }
                }

                const stdAmount = blockchainInstance.account.amountToStd(
                    inputAmount || 0,
                    options.tokenConfig.decimals
                );
                const splitAmount = splitStake(stdAmount, options.toValidators.length);

                let countValidatorsMeetCondition = 0;

                options.toValidators.map(validator => {
                    const amountDelegated = new BigNumber(validator.amountDelegated.active);
                    if (splitAmount.plus(amountDelegated).isGreaterThanOrEqualTo(minimum)) {
                        countValidatorsMeetCondition++;
                    }
                });

                if (countValidatorsMeetCondition === options.toValidators.length) {
                    return Promise.resolve({ value: true, message: '' });
                } else {
                    const higherThen = blockchainInstance.account.amountFromStd(
                        minimum,
                        options.tokenConfig.decimals
                    );
                    return Promise.resolve({
                        value: false,
                        message: translate('Validator.adjustRestake', { higherThen })
                    });
                }
            }
        }

        return Promise.resolve({ value: true, message: '' });
    }

    public async canPerformAction(
        action: PosBasicActionType,
        options: {
            account: IAccountState;
            validatorAddress: string[];
        }
    ): Promise<{ value: boolean; message: string }> {
        switch (action) {
            case PosBasicActionType.UNSTAKE:
            case PosBasicActionType.REDELEGATE:
                const canUnstake = await this.contracts[Contracts.STAKING].canUnstakeFromSsn(
                    options.account.address,
                    options.validatorAddress[0]
                );
                if (canUnstake === false)
                    return Promise.resolve({
                        value: false,
                        message: translate('Validator.operationNotAvailableMessage', {
                            operation:
                                action === PosBasicActionType.REDELEGATE
                                    ? translate('App.labels.switchNode')
                                    : Capitalize(action.toLowerCase())
                        })
                    });
                else
                    return Promise.resolve({
                        value: true,
                        message: ''
                    });
            default:
                return Promise.resolve({ value: true, message: '' });
        }
    }

    public sendTransaction(transaction): Promise<{ txHash: string; rawResponse: any }> {
        // return Promise.resolve(`${Math.random()}`); // hack to simulate transactions with success
        // return Promise.reject(); // hack to simulate transactions with fail
        return this.http.jsonRpc('CreateTransaction', [transaction]).then(res => {
            if (res.result) {
                return {
                    txHash: res.result.TranID,
                    rawResponse: res
                };
            }

            const errorMessage: string = res?.error?.message || '';

            if (errorMessage.includes('transaction underpriced')) {
                return Promise.reject({
                    error: TransactionMessageText.TR_UNDERPRICED,
                    rawResponse: res
                });
            }
            if (errorMessage.includes("Contract account won't accept normal txn")) {
                return Promise.reject({
                    error: TransactionMessageText.CONTRACT_TX_NORMAL_NOT_ALLOWED,
                    rawResponse: res
                });
            }
            if (errorMessage.includes('Insufficient funds in source account!')) {
                return Promise.reject({
                    error: TransactionMessageText.INSUFFICIENT_FUNDS_SOURCE_ACCOUNT,
                    rawResponse: res
                });
            }
            if (errorMessage.includes('GasPrice') && errorMessage.includes('lower than minimum')) {
                return Promise.reject({
                    error: TransactionMessageText.GAS_PRICE_TOO_LOW,
                    rawResponse: res
                });
            }
            if (errorMessage.includes('Gas limit') && errorMessage.includes('lower than minimum')) {
                return Promise.reject({
                    error: TransactionMessageText.GAS_LIMIT_TOO_LOW,
                    rawResponse: res
                });
            }

            return Promise.reject({
                error: 'GENERIC_ERROR',
                rawResponse: res
            });
        });
    }

    public async call(method: string, params: any[] = []): Promise<any> {
        try {
            const result = await this.http.jsonRpc(method, params);
            if (result.error) {
                return Promise.reject(result);
            }
            return result;
        } catch (e) {
            return Promise.reject(e);
        }
    }

    public async getFees(
        transactionType: TransactionType,
        data: {
            from?: string;
            to?: string;
            amount?: string;
            contractAddress?: string;
            raw?: string;
        },
        typedTransaction: TypedTransaction = TypedTransaction.TYPE_0,
        tokenType: TokenType = TokenType.NATIVE
    ) {
        let gasLimit = config.feeOptions.defaults.gasLimit[tokenType];

        try {
            const token = tokenType === TokenType.NATIVE ? 'zil' : 'zrc2';

            const keyGasLimit = `zilliqa.${this.chainId.toString()}.fees.gasLimit.${token}`;

            const [resMinimumGasPrice, resGasLimit] = await Promise.all([
                this.http.jsonRpc('GetMinimumGasPrice', []),
                new ApiClient().configs.getConfigs([keyGasLimit])
            ]);

            // Gas Limit
            if (resGasLimit?.result && resGasLimit?.result[keyGasLimit]) {
                gasLimit = new BigNumber(resGasLimit.result[keyGasLimit]);
            }

            // Gas Price
            const gasPrice = resMinimumGasPrice?.result
                ? new BigNumber(Number(resMinimumGasPrice.result))
                : config.feeOptions.defaults.gasPrice;

            return {
                gasPrice: gasPrice.toFixed(),
                gasLimit: gasLimit.toFixed(),
                feeTotal: gasPrice.multipliedBy(gasLimit).toFixed()
            };
        } catch {
            const gasPrice = config.feeOptions.defaults.gasPrice;
            return {
                gasPrice: gasPrice.toFixed(),
                gasLimit: gasLimit.toFixed(),
                feeTotal: gasPrice.multipliedBy(gasLimit).toFixed()
            };
        }
    }

    public async getMinimumGasPrice(): Promise<number> {
        return this.http.jsonRpc('GetMinimumGasPrice', []).then(res => res?.result);
    }

    public async getSmartContractSubState(
        contractAddress: string,
        field: string,
        subFields: string[] = []
    ) {
        const address = isBech32(contractAddress)
            ? fromBech32Address(contractAddress)
            : contractAddress;
        return this.call('GetSmartContractSubState', [
            address.replace('0x', '').toLowerCase(),
            field,
            subFields
        ]).then(response => response?.result);
    }

    public async getSmartContractInit(address: string) {
        let addr: string;

        if (isBech32(address)) {
            addr = fromBech32Address(address)
                .replace('0x', '')
                .toLowerCase();
        } else {
            addr = address.replace('0x', '').toLowerCase();
        }
        return this.call('GetSmartContractInit', [addr]).then(response => response?.result);
    }

    public async getMinimumAmountDelegate(): Promise<BigNumber> {
        return this.contracts[Contracts.STAKING].getMinDelegateStake();
    }
}

'''
'''--- src/core/blockchain/zilliqa/config.ts ---
import { Platform } from 'react-native';
import { BigNumber } from 'bignumber.js';

import {
    IBlockchainConfig,
    DerivationType,
    BlockchainNameService,
    TypedTransaction
} from '../types';
import { TokenType, TokenScreenComponentType, PosBasicActionType } from '../types/token';
import ZilIcon from '../../../assets/icons/blockchains/zil.svg';
import { ITokenConfigState } from '../../../redux/tokens/state';
import { IconValues } from '../../../components/icon/values';
import { AffiliateBannerType } from '../../../components/affiliate-banner/types';
import { AccountType } from '../../../redux/wallets/state';

import { XSGD_MAINNET } from './tokens/xsgd';
import { GZIL_MAINNET, GZIL_TESTNET } from './tokens/gzil';
import { PORT_MAINNET } from './tokens/port';
import { ZWAP_MAINNET } from './tokens/zwap';
import { BARTER_MAINNET } from './tokens/barter';
import { BOLT_MAINNET } from './tokens/bolt';
import { CARB_MAINNET } from './tokens/carb';
import { KKZ_MAINNET } from './tokens/kkz';
import { REDC_MAINNET } from './tokens/redc';
import { SERGS_MAINNET } from './tokens/sergs';
import { SHRK_MAINNET } from './tokens/shrk';
import { ZCH_MAINNET } from './tokens/zch';
import { ZLF_MAINNET } from './tokens/zlf';
import { ZLP_MAINNET } from './tokens/zlp';
import { ZYF_MAINNET } from './tokens/zyf';
import { ZYRO_MAINNET } from './tokens/zyro';
import { XCAD_MAINNET } from './tokens/xcad';
import { ZWBTC_MAINNET } from './tokens/zwbtc';
import { ZETH_MAINNET } from './tokens/zeth';
import { ZUSDT_MAINNET } from './tokens/zusdt';

export const ZIL_NATIVE: ITokenConfigState = {
    name: 'Zilliqa',
    symbol: 'ZIL',
    icon: {
        iconComponent: ZilIcon
    },
    defaultOrder: 0,
    removable: false,
    decimals: 12,
    ui: {
        decimals: 4,
        tokenScreenComponent: Platform.select({
            default: TokenScreenComponentType.DELEGATE,
            web: TokenScreenComponentType.DEFAULT
        })
    },
    type: TokenType.NATIVE,
    units: {
        QA: new BigNumber(1),
        LI: new BigNumber(Math.pow(10, 6)),
        ZIL: new BigNumber(Math.pow(10, 12))
    }
};

const accountCTA = {
    mainCta: {
        title: 'App.labels.stakeNow',
        iconName: IconValues.VOTE,
        navigateTo: {
            screen: 'SmartScreen',
            params: {
                context: {
                    screen: 'StakeNow',
                    step: 'StakeEnterAmount',
                    key: 'stake-enter-amount'
                },
                navigationOptions: {
                    title: 'Stake now',
                    headerStyle: {
                        backgroundColor: '#005067',
                        borderBottomWidth: 0,
                        shadowColor: 'transparent'
                    }
                },
                background: {
                    gradient: ['#005067', '#061529']
                },
                newFlow: true
            }
        }
    }
};

const validatorCTA = {
    mainCta: {
        title: 'App.labels.stake',
        iconName: IconValues.VOTE,
        navigateTo: {
            screen: 'SmartScreen',
            params: {
                context: {
                    screen: 'StakeNow',
                    step: 'StakeNowEnterAmountValidators',
                    key: 'stake-now-enter-amount-validators'
                },
                navigationOptions: {
                    title: 'Stake now'
                },
                newFlow: true
            }
        }
    },
    otherCtas: [
        {
            title: 'App.labels.claimReward',
            iconName: IconValues.CLAIM_REWARD,
            navigateTo: {
                screen: 'PosBasicActionSmartScreenWrapper',
                params: {
                    actionText: 'App.labels.claimReward',
                    basicAction: PosBasicActionType.CLAIM_REWARD_NO_INPUT,
                    unlockDays: '3 days'
                }
            }
        },
        {
            title: 'App.labels.switchNode',
            iconName: IconValues.REVOTE,
            navigateTo: {
                screen: 'SmartScreen',
                params: {
                    context: {
                        screen: 'SwitchNode',
                        step: 'SwitchNodeSelectNode',
                        key: 'switch-node-select-node'
                    },
                    newFlow: true
                }
            }
        },
        {
            title: 'App.labels.unstake',
            iconName: IconValues.UNVOTE,
            navigateTo: {
                screen: 'PosBasicActionSmartScreenWrapper',
                params: {
                    actionText: 'App.labels.unstake',
                    basicAction: PosBasicActionType.UNSTAKE
                }
            }
        }
    ]
};

export const config: IBlockchainConfig = {
    derivationPath: `m/44'/313'/0'/0`,
    derivationType: DerivationType.HD_KEY,
    coin: 'ZIL',
    defaultUnit: 'QA',
    droppedTxBlocksThreshold: 10,
    iconComponent: ZilIcon,
    autoAddedTokensSymbols: {
        '1': {
            gZIL: GZIL_MAINNET,
            XCAD: XCAD_MAINNET,
            XSGD: XSGD_MAINNET,
            ZWBTC: ZWBTC_MAINNET,
            ZETH: ZETH_MAINNET,
            ZUSDT: ZUSDT_MAINNET
        },
        '333': {
            gZIL: GZIL_TESTNET
        }
    },
    typedTransaction: {
        HD: TypedTransaction.TYPE_0,
        HW: TypedTransaction.TYPE_0
    },
    autoAddedHiddenTokensSymbols: {
        '1': {
            PORT: PORT_MAINNET,
            ZWAP: ZWAP_MAINNET,
            ZLP: ZLP_MAINNET,
            BARTER: BARTER_MAINNET,
            BOLT: BOLT_MAINNET,
            REDC: REDC_MAINNET,
            SERGS: SERGS_MAINNET,
            SHRK: SHRK_MAINNET,
            KKZ: KKZ_MAINNET,
            ZCH: ZCH_MAINNET,
            ZLF: ZLF_MAINNET,
            ZYF: ZYF_MAINNET,
            ZYRO: ZYRO_MAINNET,
            CARB: CARB_MAINNET
        }
    },
    tokens: {
        ZIL: ZIL_NATIVE
    },
    feeOptions: {
        gasPriceToken: 'ZIL',
        defaults: {
            gasPrice: new BigNumber(2000000000),
            gasLimit: {
                [TokenType.NATIVE]: new BigNumber(1),
                [TokenType.ZRC2]: new BigNumber(5000)
            }
        },
        ui: {
            availableTokenTypes: [],
            feeComponent: 'FeeTotal',
            feeComponentAdvanced: {
                HD: 'GasFeeAdvanced',
                HW: 'GasFeeAdvanced'
            },
            gasPriceUnit: 'LI'
        }
    },
    ui: {
        validator: {
            totalLabel: 'Validator.totalStakes',
            amountCardLabel: 'Validator.myStake',
            maximumNumberOfValidators: 9999 // TBD
        },
        token: {
            labels: {
                tabAccount: 'App.labels.account',
                tabDelegations: 'App.labels.myStakes',
                tabValidators: 'App.labels.validators',
                tabTransactions: 'App.labels.transactions'
            },
            actionScreenLabels: {
                unstake: 'Validator.unstakeScreenMessageZil',
                redelegate: 'Validator.restakeScreenMessageZil'
            },
            sendStepLabels: [
                'Validator.selectValidator',
                'App.labels.enterAmount',
                'Validator.confirmStake'
            ],
            accountCTA,
            delegationCTA: {
                mainCta: accountCTA.mainCta
            },
            validatorCTA
        },
        addressDisplay: 'stripped',
        enableTokenManagement: true,
        enableAccountCreation: false,
        maxAccountsNumber: 5,
        displayName: 'ZIL',
        affiliateBanners: {
            account: AffiliateBannerType.UNSTOPPABLE_DOMAINS
        },
        fetchAccountStatsSec: 5
    },
    networks: {
        testNet: 333,
        mainNet: 1
    },
    defaultOrder: 0,
    nameServices: [
        {
            tld: 'zil',
            service: BlockchainNameService.ZNS,
            record: ['crypto.ZIL.address']
        },
        {
            tld: 'crypto',
            service: BlockchainNameService.CNS,
            record: ['crypto.ZIL.address']
        }
    ],
    amountToKeepInAccount: {
        [AccountType.DEFAULT]: new BigNumber(10).pow(13).multipliedBy(4) // 40 ZIL
    }
};

'''
'''--- src/core/blockchain/zilliqa/contracts/base-contract.ts ---
import {
    ChainIdType,
    IPosTransaction,
    IBlockchainTransaction,
    TransactionType,
    Contracts
} from '../../types';
import { getTokenConfig } from '../../../../redux/tokens/static-selectors';
import { captureException as SentryCaptureException } from '@sentry/react-native';
import { TransactionStatus } from '../../../wallet/types';
import { Zilliqa } from '..';
import { Client as ZilliqaClient } from '../client';
import { ApiClient } from '../../../utils/api-client/api-client';

const contracts = {};

export enum ContractFields {
    DEPOSIT_AMT_DELEG = 'deposit_amt_deleg',
    SSNLIST = 'ssnlist',
    MINDELEGATESTAKE = 'mindelegstake',
    LAST_WITHDRAW_CYCLE_DELEG = 'last_withdraw_cycle_deleg',
    LASTREWARDCYCLE = 'lastrewardcycle',
    LAST_BUF_DEPOSIT_CYCLE_DELEG = 'last_buf_deposit_cycle_deleg'
}

export const fetchContracts = async (chainId: ChainIdType) => {
    // TODO - fetch from blockchain

    const keyStaking = `zilliqa.${chainId}.staking.contract`;
    const keyMoonletSwap = `zilliqa.${chainId}.moonletswap.contract`;
    const keyZilSwap = `zilliqa.${chainId}.zilswap.contract`;

    try {
        const configs = await new ApiClient().configs.getConfigs([
            keyStaking,
            keyMoonletSwap,
            keyZilSwap
        ]);
        const values = {
            ...contracts[chainId],
            [Contracts.STAKING]: configs.result[keyStaking],
            [Contracts.MOONLETSWAP]: configs.result[keyMoonletSwap],
            [Contracts.ZILSWAP]: configs.result[keyZilSwap]
        };
        return values;
    } catch (error) {
        SentryCaptureException(new Error(JSON.stringify(error)));
    }

    return contracts;
};

export const getZilContracts = async (chainId: ChainIdType) => {
    if (!contracts[chainId]) {
        contracts[chainId] = await fetchContracts(chainId);
    }
    return contracts[chainId];
};

export const getContract = async (
    chainId: ChainIdType,
    contractType: Contracts
): Promise<string> => {
    return getZilContracts(chainId).then(zilContracts => zilContracts[contractType]);
};

export const buildBaseTransaction = async (
    tx: IPosTransaction
): Promise<IBlockchainTransaction> => {
    const tokenConfig = getTokenConfig(tx.account.blockchain, tx.token);

    const client = Zilliqa.getClient(tx.chainId) as ZilliqaClient;
    const nonce = await client.getNonce(tx.account.address, tx.account.publicKey);

    const blockInfo = await client.getCurrentBlock();

    return {
        date: {
            created: Date.now(),
            signed: Date.now(),
            broadcasted: Date.now(),
            confirmed: Date.now()
        },
        blockchain: tx.account.blockchain,
        chainId: tx.chainId,
        type: TransactionType.CONTRACT_CALL,
        token: tokenConfig,
        address: tx.account.address,
        publicKey: tx.account.publicKey,
        toAddress: '',
        amount: tx.amount,
        feeOptions: tx.feeOptions,
        broadcastedOnBlock: blockInfo?.number,
        nonce,
        status: TransactionStatus.PENDING,
        data: {},
        additionalInfo: tx.extraFields
    };
};

'''
'''--- src/core/blockchain/zilliqa/contracts/staking.ts ---
import { Client } from '../client';
import {
    IPosTransaction,
    IBlockchainTransaction,
    TransactionType,
    Contracts,
    TypedTransaction
} from '../../types';
import { IValidator } from '../../types/stats';
import { TokenType, PosBasicActionType } from '../../types/token';
import { buildBaseTransaction, getContract, ContractFields } from './base-contract';
import { isBech32 } from '@zilliqa-js/util/dist/validation';
import { fromBech32Address } from '@zilliqa-js/crypto/dist/bech32';
import BigNumber from 'bignumber.js';

export class Staking {
    private contractImplementation;
    constructor(private client: Client) {}

    async getContractImplementation(): Promise<{ [address: string]: string }> {
        const contractAddress = await getContract(this.client.chainId, Contracts.STAKING);
        try {
            if (!this.contractImplementation) {
                this.contractImplementation = await this.client.getSmartContractSubState(
                    contractAddress,
                    'implementation'
                );
            }
            return this.contractImplementation;
        } catch (error) {
            return Promise.reject(error);
        }
    }

    public async getMinDelegateStake(): Promise<BigNumber> {
        try {
            const contract = await this.getContractImplementation();

            const response = await this.client.getSmartContractSubState(
                contract.implementation,
                ContractFields.MINDELEGATESTAKE
            );

            return response && response[ContractFields.MINDELEGATESTAKE];
        } catch (error) {
            return Promise.reject(error);
        }
    }

    public async canUnstakeFromSsn(accountAddress: string, ssnaddr: string): Promise<boolean> {
        const address = isBech32(accountAddress)
            ? fromBech32Address(accountAddress).toLowerCase()
            : accountAddress.toLowerCase();

        try {
            const contract = await this.getContractImplementation();

            const cycleCalls = [
                this.client.getSmartContractSubState(
                    contract.implementation,
                    ContractFields.LASTREWARDCYCLE
                ),
                this.client.getSmartContractSubState(
                    contract.implementation,
                    ContractFields.LAST_BUF_DEPOSIT_CYCLE_DELEG,
                    [address]
                )
            ];

            const res = await Promise.all(cycleCalls);

            const lastRewardCycle = res[0] && Number(res[0][ContractFields.LASTREWARDCYCLE]);

            const lastBufferDepositCycleDeleg =
                res[1] &&
                res[1][ContractFields.LAST_BUF_DEPOSIT_CYCLE_DELEG] &&
                res[1][ContractFields.LAST_BUF_DEPOSIT_CYCLE_DELEG][address];

            let lastBufferDepositCycleDelegValue = 0;
            if (lastBufferDepositCycleDeleg && lastBufferDepositCycleDeleg[ssnaddr]) {
                lastBufferDepositCycleDelegValue = Number(lastBufferDepositCycleDeleg[ssnaddr]);
            }

            if (lastRewardCycle <= lastBufferDepositCycleDelegValue) return false;

            return true;
        } catch (error) {
            return false;
        }
    }

    public async getNrCyclesSinceLastWithdraw(
        accountAddress: string,
        ssnaddr: string
    ): Promise<number> {
        const address = isBech32(accountAddress)
            ? fromBech32Address(accountAddress).toLowerCase()
            : accountAddress.toLowerCase();

        try {
            const contract = await this.getContractImplementation();

            const cycleCalls = [
                this.client.getSmartContractSubState(
                    contract.implementation,
                    ContractFields.LAST_WITHDRAW_CYCLE_DELEG,
                    [address]
                ),
                this.client.getSmartContractSubState(
                    contract.implementation,
                    ContractFields.LASTREWARDCYCLE
                )
            ];

            const res = await Promise.all(cycleCalls);

            const lastRewardCycle = res[1] && Number(res[1][ContractFields.LASTREWARDCYCLE]);

            const lastWithdrawCycleDeleg =
                res[0] &&
                res[0][ContractFields.LAST_WITHDRAW_CYCLE_DELEG] &&
                res[0][ContractFields.LAST_WITHDRAW_CYCLE_DELEG][address];

            let lastWithdrawCycleDelegValue = 0;
            if (lastWithdrawCycleDeleg && lastWithdrawCycleDeleg[ssnaddr]) {
                lastWithdrawCycleDelegValue = Number(lastWithdrawCycleDeleg[ssnaddr]);
            }

            return lastRewardCycle - lastWithdrawCycleDelegValue;
        } catch (error) {
            return 10;
        }
    }

    public async canWithdrawStakeRewardsFromSsn(
        accountAddress: string,
        ssnaddr: string
    ): Promise<boolean> {
        const address = isBech32(accountAddress)
            ? fromBech32Address(accountAddress).toLowerCase()
            : accountAddress.toLowerCase();

        try {
            const contract = await this.getContractImplementation();

            const cycleCalls = [
                this.client.getSmartContractSubState(
                    contract.implementation,
                    ContractFields.LAST_WITHDRAW_CYCLE_DELEG,
                    [address]
                ),
                this.client.getSmartContractSubState(
                    contract.implementation,
                    ContractFields.LASTREWARDCYCLE
                ),
                this.client.getSmartContractSubState(
                    contract.implementation,
                    ContractFields.LAST_BUF_DEPOSIT_CYCLE_DELEG,
                    [address]
                )
            ];

            const res = await Promise.all(cycleCalls);

            const lastWithdrawCycleDeleg =
                res[0] &&
                res[0][ContractFields.LAST_WITHDRAW_CYCLE_DELEG] &&
                res[0][ContractFields.LAST_WITHDRAW_CYCLE_DELEG][address];

            const lastRewardCycle = res[1] && Number(res[1][ContractFields.LASTREWARDCYCLE]);

            const lastBufferDepositCycleDeleg =
                res[2] &&
                res[2][ContractFields.LAST_BUF_DEPOSIT_CYCLE_DELEG] &&
                res[2][ContractFields.LAST_BUF_DEPOSIT_CYCLE_DELEG][address];

            let lastBufferDepositCycleDelegValue = 0;
            if (lastBufferDepositCycleDeleg && lastBufferDepositCycleDeleg[ssnaddr]) {
                lastBufferDepositCycleDelegValue = Number(lastBufferDepositCycleDeleg[ssnaddr]);
            }
            let lastWithdrawCycleDelegValue = 0;
            if (lastWithdrawCycleDeleg && lastWithdrawCycleDeleg[ssnaddr]) {
                lastWithdrawCycleDelegValue = Number(lastWithdrawCycleDeleg[ssnaddr]);
            }

            if (lastRewardCycle > lastBufferDepositCycleDelegValue) {
                if (lastRewardCycle !== lastWithdrawCycleDelegValue) return true;
            }

            return false;
        } catch (error) {
            return false;
        }
    }

    public async reDelegateStake(
        tx: IPosTransaction,
        fromValidator: IValidator,
        toValidator: IValidator
    ): Promise<IBlockchainTransaction> {
        const transaction = await buildBaseTransaction(tx);
        const contractAddress = await getContract(this.client.chainId, Contracts.STAKING);

        transaction.toAddress = contractAddress;
        transaction.amount = '0';
        const toAddress = isBech32(toValidator.id)
            ? fromBech32Address(toValidator.id).toLowerCase()
            : toValidator.id.toLowerCase();
        const fromAddress = isBech32(fromValidator.id)
            ? fromBech32Address(fromValidator.id).toLowerCase()
            : fromValidator.id.toLowerCase();

        const raw = JSON.stringify({
            _tag: 'ReDelegateStake',
            params: [
                {
                    vname: 'ssnaddr',
                    type: 'ByStr20',
                    value: fromAddress
                },
                {
                    vname: 'to_ssn',
                    type: 'ByStr20',
                    value: toAddress
                },
                {
                    vname: 'amount',
                    type: 'Uint128',
                    value: tx.amount
                }
            ]
        });

        const fees = await this.client.getFees(
            TransactionType.CONTRACT_CALL,
            {
                from: tx.account.address,
                to: toValidator.id,
                amount: tx.amount,
                contractAddress,
                raw
            },
            TypedTransaction.TYPE_0,
            TokenType.ZRC2
        );
        transaction.feeOptions = fees;

        transaction.data = {
            method: 'Stake',
            params: [toValidator.id, tx.amount],
            raw
        };

        transaction.additionalInfo.posAction = PosBasicActionType.REDELEGATE;
        transaction.additionalInfo.validatorName = toValidator.name;

        return transaction;
    }

    public async delegateStake(
        tx: IPosTransaction,
        validator: IValidator
    ): Promise<IBlockchainTransaction> {
        const transaction = await buildBaseTransaction(tx);
        const contractAddress = await getContract(this.client.chainId, Contracts.STAKING);

        transaction.toAddress = contractAddress;

        const toAddress = isBech32(validator.id)
            ? fromBech32Address(validator.id).toLowerCase()
            : validator.id.toLowerCase();

        const raw = JSON.stringify({
            _tag: 'DelegateStake',
            params: [
                {
                    vname: 'ssnaddr',
                    type: 'ByStr20',
                    value: toAddress
                }
            ]
        });

        const fees = await this.client.getFees(
            TransactionType.CONTRACT_CALL,
            {
                from: tx.account.address,
                to: validator.id,
                amount: tx.amount,
                contractAddress,
                raw
            },
            TypedTransaction.TYPE_0,
            TokenType.ZRC2
        );
        transaction.feeOptions = fees;

        transaction.data = {
            method: 'Stake',
            params: [validator.id, tx.amount],
            raw
        };

        transaction.additionalInfo.posAction = PosBasicActionType.STAKE;
        transaction.additionalInfo.validatorName = validator.name;

        return transaction;
    }

    public async withdrawStakAmt(
        tx: IPosTransaction,
        validator: IValidator
    ): Promise<IBlockchainTransaction> {
        const transaction = await buildBaseTransaction(tx);
        const contractAddress = await getContract(this.client.chainId, Contracts.STAKING);

        transaction.toAddress = contractAddress;
        transaction.amount = '0';
        const toAddress = isBech32(validator.id)
            ? fromBech32Address(validator.id).toLowerCase()
            : validator.id.toLowerCase();

        const raw = JSON.stringify({
            _tag: 'WithdrawStakeAmt',
            params: [
                {
                    vname: 'ssnaddr',
                    type: 'ByStr20',
                    value: toAddress
                },
                {
                    vname: 'amt',
                    type: 'Uint128',
                    value: tx.amount
                }
            ]
        });

        const fees = await this.client.getFees(
            TransactionType.CONTRACT_CALL,
            {
                from: tx.account.address,
                to: validator.id,
                amount: tx.amount,
                contractAddress,
                raw
            },
            TypedTransaction.TYPE_0,
            TokenType.ZRC2
        );
        transaction.feeOptions = fees;

        transaction.data = {
            method: 'Unstake',
            params: [validator.id, tx.amount],
            raw
        };

        transaction.additionalInfo.posAction = PosBasicActionType.UNSTAKE;
        transaction.additionalInfo.validatorName = validator.name;

        return transaction;
    }

    public async withdrawStakRewards(
        tx: IPosTransaction,
        validator: IValidator
    ): Promise<IBlockchainTransaction> {
        const transaction = await buildBaseTransaction(tx);
        const contractAddress = await getContract(this.client.chainId, Contracts.STAKING);

        let nrCyclesPassed = 0;
        try {
            nrCyclesPassed = await this.getNrCyclesSinceLastWithdraw(
                tx.account.address,
                validator.id
            );
        } catch {
            // doesnt need a catch handle
        }
        // TODO find a better way to get the rewards amount.
        // const chartData = tx.validators[0].chartStats.find(chart => chart.title === 'Reward');

        transaction.toAddress = contractAddress;
        transaction.amount = '0';
        const toAddress = isBech32(validator.id)
            ? fromBech32Address(validator.id).toLowerCase()
            : validator.id.toLowerCase();

        const raw = JSON.stringify({
            _tag: 'WithdrawStakeRewards',
            params: [
                {
                    vname: 'ssnaddr',
                    type: 'ByStr20',
                    value: toAddress
                }
            ]
        });

        const fees = await this.client.getFees(
            TransactionType.CONTRACT_CALL,
            {
                from: tx.account.address,
                to: validator.id,
                amount: tx.amount,
                contractAddress,
                raw
            },
            TypedTransaction.TYPE_0,
            TokenType.ZRC2
        );

        // TODO: check this with ZILLIQA team
        let gasLimitBasedOnCycles = 3450; // default value
        if (nrCyclesPassed >= 730) {
            gasLimitBasedOnCycles = 200000;
        } else if (nrCyclesPassed >= 365) {
            gasLimitBasedOnCycles = 100000;
        } else if (nrCyclesPassed >= 180) {
            gasLimitBasedOnCycles = 30000;
        } else if (nrCyclesPassed >= 90) {
            gasLimitBasedOnCycles = 25000;
        } else if (nrCyclesPassed >= 60) {
            gasLimitBasedOnCycles = 20000;
        } else if (nrCyclesPassed >= 30) {
            gasLimitBasedOnCycles = 15000;
        } else if (nrCyclesPassed >= 14) {
            gasLimitBasedOnCycles = 10000;
        } else if (nrCyclesPassed >= 7) {
            gasLimitBasedOnCycles = 7000;
        } else if (nrCyclesPassed >= 3) {
            gasLimitBasedOnCycles = 3500;
        } else if (nrCyclesPassed >= 2) {
            gasLimitBasedOnCycles = 2700;
        } else {
            gasLimitBasedOnCycles = 2450;
        }

        transaction.feeOptions = {
            feeTotal: new BigNumber(fees.gasPrice)
                .multipliedBy(new BigNumber(gasLimitBasedOnCycles))
                .toFixed(),
            gasLimit: gasLimitBasedOnCycles.toString(),
            gasPrice: new BigNumber(fees.gasPrice).toFixed()
        };

        transaction.data = {
            method: 'Claim Rewards',
            params: [validator.id, undefined],
            raw
        };

        transaction.additionalInfo.posAction = PosBasicActionType.CLAIM_REWARD;
        transaction.additionalInfo.validatorName = validator.name;

        return transaction;
    }

    public async completeWithdrawal(tx: IPosTransaction): Promise<IBlockchainTransaction> {
        const transaction = await buildBaseTransaction(tx);
        const contractAddress = await getContract(this.client.chainId, Contracts.STAKING);

        transaction.toAddress = contractAddress;
        transaction.amount = '0';

        const raw = JSON.stringify({
            _tag: 'CompleteWithdrawal',
            params: []
        });

        const fees = await this.client.getFees(
            TransactionType.CONTRACT_CALL,
            {
                from: tx.account.address,
                to: '',
                amount: tx.amount,
                contractAddress,
                raw
            },
            TypedTransaction.TYPE_0,
            TokenType.ZRC2
        );
        transaction.feeOptions = fees;

        transaction.data = {
            method: 'withdraw',
            params: [contractAddress, tx.extraFields.amount],
            raw
        };

        transaction.additionalInfo.posAction = PosBasicActionType.WITHDRAW;

        return transaction;
    }
}

'''
'''--- src/core/blockchain/zilliqa/index.ts ---
import { config } from './config';
import { networks } from './networks';
import { Client } from './client';
import { ZilliqaAccountUtils } from './account';
import { ZilliqaTransactionUtils } from './transaction';
import { IBlockchain, ChainIdType, Contracts } from '../types';
import { Stats } from './stats';
import { getContract } from './contracts/base-contract';

const account = new ZilliqaAccountUtils();
const transaction = new ZilliqaTransactionUtils();
const clients = {};

export const Zilliqa: IBlockchain = {
    config,
    networks,
    transaction,
    account,
    Client,
    getStats: (chainId: ChainIdType) => new Stats(new Client(chainId), config),
    getClient: (chainId: ChainIdType) => {
        chainId = Number(chainId);
        if (!clients[chainId]) {
            clients[chainId] = new Client(chainId);
        }
        return clients[chainId];
    },
    getContract: (chainId: ChainIdType, contractType: Contracts) => {
        return getContract(chainId, contractType);
    }
};

'''
'''--- src/core/blockchain/zilliqa/name-service.ts ---
import {
    IResolveTextResponse,
    ResolveTextType,
    ResolveTextCode,
    ResolveTextError,
    GenericNameService,
    BlockchainNameService,
    IResolveNameResponse
} from '../types';
import { Zilliqa } from '.';
import { Client } from './client';
import { config } from './config';
import { cryptoNameResolver } from '../common/cryptoNameResolver';
import { zilNameResolver } from '../common/zilNameResolver';

export class NameService extends GenericNameService {
    constructor(client: Client) {
        super(client);
    }

    public async resolveText(text: string): Promise<IResolveTextResponse> {
        const validAddress = Zilliqa.account.isValidAddress(text);
        const validChecksumAddress = Zilliqa.account.isValidChecksumAddress(text);
        if (validAddress) {
            return Promise.resolve({
                code: validChecksumAddress ? ResolveTextCode.OK : ResolveTextCode.WARN_CHECKSUM,
                type: ResolveTextType.ADDRESS,
                address: text,
                name: ''
            });
        } else {
            const { address } = await this.resolveName(text);
            if (
                address === '0x0000000000000000000000000000000000000000' ||
                address === '' ||
                address === undefined
            ) {
                return Promise.reject({
                    error: ResolveTextError.INVALID
                });
            } else {
                return Promise.resolve({
                    code: ResolveTextCode.OK,
                    type: ResolveTextType.NAME,
                    address,
                    name: ''
                });
            }
        }
    }
    public resolveName(name: string): Promise<IResolveNameResponse> {
        const { mainNet } = this.client.network;
        const ending = name.split('.').pop();
        const { service, record } = config.nameServices.find(item =>
            typeof item.tld === 'string' ? item.tld === ending : !!ending.match(item.tld)
        );
        switch (service) {
            case BlockchainNameService.ZNS:
                return zilNameResolver(name, service, record, mainNet);
            case BlockchainNameService.CNS:
                return cryptoNameResolver(name, service, record, mainNet);
        }
    }
}

'''
'''--- src/core/blockchain/zilliqa/name-services-utils.ts ---
import { createHash } from 'crypto';

const sha256Function = (
    message,
    {
        hexPrefix = true,
        inputEnc,
        outputEnc = 'hex'
    }: { hexPrefix?: boolean; inputEnc?: 'hex'; outputEnc?: 'hex' } = {}
): string => {
    const created = createHash('sha256');
    return (
        (hexPrefix ? '0x' : '') + created.update(Buffer.from(message, inputEnc)).digest(outputEnc)
    );
};

const childhash = (
    parent: string,
    label: string,
    options: { prefix: boolean } = { prefix: true }
): string => {
    parent = parent.replace(/^0x/, '');
    return sha256Function(parent + sha256Function(label, { hexPrefix: false }), {
        hexPrefix: options.prefix,
        inputEnc: 'hex'
    });
};

export const namehash = (domain: string): string => {
    const parent = '0000000000000000000000000000000000000000000000000000000000000000';
    const assembledHash = [parent]
        .concat(
            domain
                .split('.')
                .reverse()
                .filter(label => label)
        )
        .reduce((parr, label): string => childhash(parr, label, { prefix: false }));
    return '0x' + assembledHash;
};

'''
'''--- src/core/blockchain/zilliqa/networks.ts ---
import { IBlockchainNetwork } from '../types';

export const networks: IBlockchainNetwork[] = [
    {
        name: 'Main Network',
        chainId: 1,
        mainNet: true,
        url: 'https://node-zilliqa.moonlet.network/api',
        wsUrl: 'wss://api-ws.zilliqa.com/',
        explorer: {
            name: 'Viewblock',
            getAccountUrl: addr => `https://viewblock.io/zilliqa/address/${addr}`,
            getTransactionUrl: txn => `https://viewblock.io/zilliqa/tx/${txn}`
        }
    },
    {
        name: 'Testnet',
        chainId: 333,
        mainNet: false,
        url: 'https://dev-api.zilliqa.com/',
        wsUrl: 'wss://dev-ws.zilliqa.com/',
        explorer: {
            name: 'Viewblock',
            getAccountUrl: addr => `https://viewblock.io/zilliqa/address/${addr}?network=testnet`,
            getTransactionUrl: txn => `https://viewblock.io/zilliqa/tx/${txn}?network=testnet`
        }
    },
    {
        name: 'Devnet',
        chainId: 617,
        mainNet: false,
        url: 'https://api.devnet.zilliqa.com/',
        wsUrl: 'wss://dev-ws.zilliqa.com/',
        explorer: {
            name: 'Viewblock',
            getAccountUrl: addr => `https://viewblock.io/zilliqa/address/${addr}?network=testnet`,
            getTransactionUrl: txn => `https://viewblock.io/zilliqa/tx/${txn}?network=testnet`
        }
    }
];

'''
'''--- src/core/blockchain/zilliqa/stats.ts ---
import { GenericStats, AccountStats } from '../types/stats';
import { Client } from './client';
import { AccountType, IAccountState, ITokenState } from '../../../redux/wallets/state';
import { ApiClient } from '../../utils/api-client/api-client';
import { BigNumber } from 'bignumber.js';
import { config } from './config';

export class Stats extends GenericStats<Client> {
    public async getAccountDelegateStats(
        account: IAccountState,
        token: ITokenState
    ): Promise<AccountStats> {
        const data = await new ApiClient().validators.getAccountDelegateStats(
            account,
            this.client.chainId.toString()
        );

        return data;
    }

    public async getAvailableBalanceForDelegate(account: IAccountState): Promise<string> {
        const data = await new ApiClient().validators.getBalance(
            account.address,
            account.blockchain,
            this.client.chainId.toString()
        );

        let availableToDelegate = new BigNumber(0);
        const accountType = account?.type || AccountType.DEFAULT;

        if (new BigNumber(data.balance.available).gt(config.amountToKeepInAccount[accountType])) {
            availableToDelegate = availableToDelegate.plus(
                new BigNumber(data.balance.available).minus(
                    config.amountToKeepInAccount[accountType]
                )
            );
        }
        return availableToDelegate.toFixed();
    }
}

'''
'''--- src/core/blockchain/zilliqa/tokens/barter.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const BARTER_MAINNET: ITokenConfigState = {
    name: 'CryptoBarter.group',
    symbol: 'BARTER',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/zilliqa/barter.png'
    },
    contractAddress: 'zil17zvlqn2xamqpumlm2pgul9nezzd3ydmrufxnct',
    removable: true,
    defaultOrder: 999,
    decimals: 2,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ZRC2
};

'''
'''--- src/core/blockchain/zilliqa/tokens/bolt.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const BOLT_MAINNET: ITokenConfigState = {
    name: 'Bolt Token',
    symbol: 'BOLT',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/zilliqa/bolt.png'
    },
    contractAddress: 'zil1x6z064fkssmef222gkhz3u5fhx57kyssn7vlu0',
    removable: true,
    defaultOrder: 999,
    decimals: 18,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ZRC2
};

'''
'''--- src/core/blockchain/zilliqa/tokens/carb.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const CARB_MAINNET: ITokenConfigState = {
    name: 'CARBON',
    symbol: 'CARB',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/zilliqa/carb.png'
    },
    contractAddress: 'zil1hau7z6rjltvjc95pphwj57umdpvv0d6kh2t8zk',
    removable: true,
    defaultOrder: 999,
    decimals: 8,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ZRC2
};

'''
'''--- src/core/blockchain/zilliqa/tokens/gzil.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const GZIL_MAINNET: ITokenConfigState = {
    name: 'gZIL Governance Token',
    symbol: 'gZIL',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/zilliqa/gzil.png'
    },
    contractAddress: 'zil14pzuzq6v6pmmmrfjhczywguu0e97djepxt8g3e',
    removable: true,
    defaultOrder: 900, // 2nd position
    decimals: 15,
    ui: {
        decimals: 8,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ZRC2
};

export const GZIL_TESTNET: ITokenConfigState = {
    ...GZIL_MAINNET,
    contractAddress: 'zil10w2fwf5kdwqvjd2zyv6nr7da2d2z63g5dvtvsy'
};

'''
'''--- src/core/blockchain/zilliqa/tokens/kkz.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const KKZ_MAINNET: ITokenConfigState = {
    name: 'KrazyKewlZil',
    symbol: 'KKZ',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/zilliqa/kkz.png'
    },
    contractAddress: 'zil1p2cp77kz06wlxeyha4psawencm5gx8ttcwsxdn',
    removable: true,
    defaultOrder: 999,
    decimals: 5,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ZRC2
};

'''
'''--- src/core/blockchain/zilliqa/tokens/port.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const PORT_MAINNET: ITokenConfigState = {
    name: 'Proof Of Receipt Token',
    symbol: 'PORT',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/zilliqa/port.png'
    },
    contractAddress: 'zil18f5rlhqz9vndw4w8p60d0n7vg3n9sqvta7n6t2',
    removable: true,
    defaultOrder: 999,
    decimals: 4,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ZRC2
};

'''
'''--- src/core/blockchain/zilliqa/tokens/redc.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const REDC_MAINNET: ITokenConfigState = {
    name: 'RedChillies',
    symbol: 'REDC',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/zilliqa/redc.png'
    },
    contractAddress: 'zil14jmjrkvfcz2uvj3y69kl6gas34ecuf2j5ggmye',
    removable: true,
    defaultOrder: 999,
    decimals: 9,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ZRC2
};

'''
'''--- src/core/blockchain/zilliqa/tokens/sco.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const SCO_MAINNET: ITokenConfigState = {
    name: 'Score',
    symbol: 'SCO',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/zilliqa/sco.png'
    },
    contractAddress: 'zil1kwfu3x9n6fsuxc4ynp72uk5rxge25enw7zsf9z',
    removable: true,
    defaultOrder: 999,
    decimals: 4,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ZRC2
};

'''
'''--- src/core/blockchain/zilliqa/tokens/sergs.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const SERGS_MAINNET: ITokenConfigState = {
    name: 'Sergey Saved Link',
    symbol: 'SERGS',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/zilliqa/sergs.png'
    },
    contractAddress: 'zil1ztmv5jhfpnxu95ts9ylup7hj73n5ka744jm4ea',
    removable: true,
    defaultOrder: 999,
    decimals: 5,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ZRC2
};

'''
'''--- src/core/blockchain/zilliqa/tokens/shrk.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const SHRK_MAINNET: ITokenConfigState = {
    name: 'SHARK',
    symbol: 'SHRK',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/zilliqa/shrk.png'
    },
    contractAddress: 'zil17tsmlqgnzlfxsq4evm6n26txm2xlp5hele0kew',
    removable: true,
    defaultOrder: 999,
    decimals: 6,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ZRC2
};

'''
'''--- src/core/blockchain/zilliqa/tokens/xcad.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const XCAD_MAINNET: ITokenConfigState = {
    name: 'XCAD Network',
    symbol: 'XCAD',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/zilliqa/xcad.png'
    },
    contractAddress: 'zil1z5l74hwy3pc3pr3gdh3nqju4jlyp0dzkhq2f5y',
    removable: true,
    defaultOrder: 910, // 3rd position
    decimals: 18,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ZRC2
};

'''
'''--- src/core/blockchain/zilliqa/tokens/xsgd.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const XSGD_MAINNET: ITokenConfigState = {
    name: 'Xsgd',
    symbol: 'XSGD',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/zilliqa/xsgd.png'
    },
    contractAddress: 'zil1zu72vac254htqpg3mtywdcfm84l3dfd9qzww8t',
    removable: true,
    defaultOrder: 999,
    decimals: 6,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ZRC2
};

'''
'''--- src/core/blockchain/zilliqa/tokens/zch.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const ZCH_MAINNET: ITokenConfigState = {
    name: 'ZILCHESS',
    symbol: 'ZCH',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/zilliqa/zch.png'
    },
    contractAddress: 'zil1s8xzysqcxva2x6aducncv9um3zxr36way3fx9g',
    removable: true,
    defaultOrder: 999,
    decimals: 6,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ZRC2
};

'''
'''--- src/core/blockchain/zilliqa/tokens/zeth.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const ZETH_MAINNET: ITokenConfigState = {
    name: 'Zilliqa-bridged ETH',
    symbol: 'ZETH',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/zilliqa/zeth.png'
    },
    contractAddress: 'zil19j33tapjje2xzng7svslnsjjjgge930jx0w09v',
    removable: true,
    defaultOrder: 999,
    decimals: 18,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ZRC2
};

'''
'''--- src/core/blockchain/zilliqa/tokens/zlf.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const ZLF_MAINNET: ITokenConfigState = {
    name: 'ZilFlip.com Shareholder Token',
    symbol: 'ZLF',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/zilliqa/zlf.png'
    },
    contractAddress: 'zil1r9dcsrya4ynuxnzaznu00e6hh3kpt7vhvzgva0',
    removable: true,
    defaultOrder: 999,
    decimals: 5,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ZRC2
};

'''
'''--- src/core/blockchain/zilliqa/tokens/zlp.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const ZLP_MAINNET: ITokenConfigState = {
    name: 'ZilPay wallet',
    symbol: 'ZLP',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/zilliqa/zlp.png'
    },
    contractAddress: 'zil1l0g8u6f9g0fsvjuu74ctyla2hltefrdyt7k5f4',
    removable: true,
    defaultOrder: 999,
    decimals: 18,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ZRC2
};

'''
'''--- src/core/blockchain/zilliqa/tokens/zrc2-client.ts ---
import { Client } from '../client';
import BigNumber from 'bignumber.js';
import { fromBech32Address } from '@zilliqa-js/crypto';
import { IBalance } from '../../types';

export class Zrc2Client {
    constructor(private client: Client) {}

    public async getBalance(contractAddress: string, accountAddress: string): Promise<IBalance> {
        const address = fromBech32Address(accountAddress).toLowerCase();

        try {
            const smartContractSubState = await this.client.getSmartContractSubState(
                contractAddress,
                'balances',
                [address]
            );

            const balance = (smartContractSubState?.balances || {})[address] || 0;

            return {
                total: new BigNumber(balance as string) || new BigNumber(0),
                available: new BigNumber(balance as string) || new BigNumber(0)
            };
        } catch {
            return { total: new BigNumber(0), available: new BigNumber(0) };
        }
    }

    public async getSymbol(contractAddress) {
        const info = await this.getTokenInfo(contractAddress);
        return info.symbol;
    }

    public async getName(contractAddress) {
        const info = await this.getTokenInfo(contractAddress);
        return info.name;
    }

    public async getDecimals(contractAddress) {
        const info = await this.getTokenInfo(contractAddress);
        return info.decimals;
    }

    public async getTokenInfo(proxyContractAddress) {
        const proxyContractInit = await this.client.getSmartContractInit(proxyContractAddress);

        let symbol = this.findSmartContractSubField(proxyContractInit, 'symbol')?.toUpperCase();
        let name = this.findSmartContractSubField(proxyContractInit, 'name');
        let decimals = this.findSmartContractSubField(proxyContractInit, 'decimals');

        if (!symbol || !name || !decimals) {
            const smartContractSubState = await this.client.getSmartContractSubState(
                proxyContractAddress,
                'implementation'
            );

            const contractInit = await this.client.getSmartContractInit(
                smartContractSubState?.implementation
            );

            symbol =
                symbol || this.findSmartContractSubField(contractInit, 'symbol')?.toUpperCase();
            name = name || this.findSmartContractSubField(contractInit, 'name');
            decimals = decimals || this.findSmartContractSubField(contractInit, 'decimals');
        }

        return {
            symbol,
            name,
            decimals
        };
    }

    public extractEventParamsValue(
        params: { type: string; value: string; vname: string }[],
        paramName: string
    ) {
        return (
            (params &&
                Array.isArray(params) &&
                params.length > 0 &&
                params.find(paramOjb => paramOjb.vname === paramName)?.value) ||
            ''
        );
    }

    private findSmartContractSubField(smartContractInit, field: string) {
        const object: any = Object.values(smartContractInit).find(
            (info: any) => info.vname === field
        );
        return object?.value;
    }
}

'''
'''--- src/core/blockchain/zilliqa/tokens/zusdt.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const ZUSDT_MAINNET: ITokenConfigState = {
    name: 'Zilliqa-bridged USDT',
    symbol: 'ZUSDT',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/zilliqa/zusdt.png'
    },
    contractAddress: 'zil1sxx29cshups269ahh5qjffyr58mxjv9ft78jqy',
    removable: true,
    defaultOrder: 999,
    decimals: 6,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ZRC2
};

'''
'''--- src/core/blockchain/zilliqa/tokens/zwap.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const ZWAP_MAINNET: ITokenConfigState = {
    name: 'Zilswap',
    symbol: 'ZWAP',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/zilliqa/zwap.png'
    },
    contractAddress: 'zil1p5suryq6q647usxczale29cu3336hhp376c627',
    removable: true,
    defaultOrder: 999,
    decimals: 12,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ZRC2
};

'''
'''--- src/core/blockchain/zilliqa/tokens/zwbtc.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const ZWBTC_MAINNET: ITokenConfigState = {
    name: 'Zilliqa-bridged WBTC',
    symbol: 'ZWBTC',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/zilliqa/zwbtc.png'
    },
    contractAddress: 'zil1wha8mzaxhm22dpm5cav2tepuldnr8kwkvmqtjq',
    removable: true,
    defaultOrder: 999,
    decimals: 8,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ZRC2
};

'''
'''--- src/core/blockchain/zilliqa/tokens/zyf.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const ZYF_MAINNET: ITokenConfigState = {
    name: 'Zil Yield Farming',
    symbol: 'ZYF',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/zilliqa/zyf.png'
    },
    contractAddress: 'zil1arrjugcg28rw8g9zxpa6qffc6wekpwk2alu7kj',
    removable: true,
    defaultOrder: 999,
    decimals: 3,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ZRC2
};

'''
'''--- src/core/blockchain/zilliqa/tokens/zyro.ts ---
import { ITokenConfigState } from '../../../../redux/tokens/state';
import { TokenScreenComponentType, TokenType } from '../../types/token';

export const ZYRO_MAINNET: ITokenConfigState = {
    name: 'zyro',
    symbol: 'ZYRO',
    icon: {
        uri: 'https://fire.moonlet.io/static/tokens/icons/zilliqa/zyro.png'
    },
    contractAddress: 'zil1ucvrn22x8366vzpw5t7su6eyml2auczu6wnqqg',
    removable: true,
    defaultOrder: 999,
    decimals: 8,
    ui: {
        decimals: 3,
        tokenScreenComponent: TokenScreenComponentType.DEFAULT
    },
    type: TokenType.ZRC2
};

'''
'''--- src/core/blockchain/zilliqa/transaction.ts ---
import {
    IBlockchainTransaction,
    ITransferTransaction,
    TransactionType,
    AbstractBlockchainTransactionUtils,
    IPosTransaction,
    Contracts
} from '../types';

import * as ZilliqaJsAccountUtil from '@zilliqa-js/account/dist/util';
import { BN, Long } from '@zilliqa-js/util';
import * as schnorr from '@zilliqa-js/crypto/dist/schnorr';
import { fromBech32Address } from '@zilliqa-js/crypto/dist/bech32';
import { toChecksumAddress } from '@zilliqa-js/crypto/dist/util';
import { TransactionStatus } from '../../wallet/types';
import { TokenType, PosBasicActionType, ContractMethod } from '../types/token';
import { Zilliqa } from '.';
import { getTokenConfig } from '../../../redux/tokens/static-selectors';
import BigNumber from 'bignumber.js';
import { cloneDeep } from 'lodash';
import { isBech32 } from '@zilliqa-js/util/dist/validation';
import { splitStake } from '../../utils/balance';
import { IValidator } from '../types/stats';
import { sha256 } from 'js-sha256';
import { IAccountState } from '../../../redux/wallets/state';

export class ZilliqaTransactionUtils extends AbstractBlockchainTransactionUtils {
    public schnorrSign(msg: Buffer, privateKey: string): string {
        const pubKey = Zilliqa.account.privateToPublic(privateKey);

        const sig = schnorr.sign(msg, Buffer.from(privateKey, 'hex'), Buffer.from(pubKey, 'hex'));

        let r = sig.r.toString('hex');
        let s = sig.s.toString('hex');
        while (r.length < 64) {
            r = '0' + r;
        }
        while (s.length < 64) {
            s = '0' + s;
        }

        return r + s;
    }

    public async signMessage(message: string, privateKey: string): Promise<string> {
        const publicKey = Zilliqa.account.privateToPublic(privateKey);
        const signature = this.schnorrSign(Buffer.from(sha256(message), 'hex'), privateKey);
        return JSON.stringify({
            signature,
            publicKey,
            message
        });
    }

    public async sign(tx: IBlockchainTransaction, privateKey: string): Promise<any> {
        const pubKey = Zilliqa.account.privateToPublic(privateKey);
        const toAddress = isBech32(tx.toAddress)
            ? fromBech32Address(tx.toAddress).toLowerCase()
            : tx.toAddress.toLowerCase();
        const transaction: any = {
            // tslint:disable-next-line: no-bitwise
            version: (Number(tx.chainId) << 16) + 1, // add replay protection
            toAddr: toAddress.replace('0x', ''),
            nonce: tx.nonce,
            pubKey,
            amount: new BN(tx.amount),
            gasPrice: new BN(tx.feeOptions.gasPrice.toString()),
            gasLimit: Long.fromString(tx.feeOptions.gasLimit.toString()),
            code: tx.code || '',
            data: tx.data?.raw || '',
            signature: '',
            priority: true
        };

        // encode transaction for signing
        const encodedTransaction = ZilliqaJsAccountUtil.encodeTransactionProto(transaction);
        // sign transaction
        const signature = this.schnorrSign(encodedTransaction, privateKey);

        // update transaction
        transaction.signature = signature;
        transaction.amount = transaction.amount.toString();
        transaction.gasLimit = transaction.gasLimit.toString();
        transaction.gasPrice = transaction.gasPrice.toString();
        transaction.toAddr = toChecksumAddress(transaction.toAddr).replace('0x', '');

        return transaction;
    }

    public async buildTransferTransaction(
        tx: ITransferTransaction
    ): Promise<IBlockchainTransaction> {
        const client = Zilliqa.getClient(tx.chainId);
        const nonce = await client.getNonce(tx.account.address, tx.account.publicKey);

        const tokenInfo = getTokenConfig(tx.account.blockchain, tx.token);
        const blockInfo = await client.getCurrentBlock();

        switch (tokenInfo.type) {
            case TokenType.ZRC2:
                return {
                    date: {
                        created: Date.now(),
                        signed: Date.now(),
                        broadcasted: Date.now(),
                        confirmed: Date.now()
                    },
                    blockchain: tx.account.blockchain,
                    chainId: tx.chainId,
                    type: TransactionType.TRANSFER,
                    token: tokenInfo,
                    address: tx.account.address,
                    publicKey: tx.account.publicKey,

                    toAddress: tokenInfo.contractAddress,

                    amount: '0',
                    feeOptions: tx.feeOptions,
                    broadcastedOnBlock: blockInfo?.number,
                    nonce,
                    status: TransactionStatus.PENDING,

                    data: {
                        method: 'Transfer',
                        params: [tx.toAddress, tx.amount],
                        raw: JSON.stringify({
                            _tag: 'Transfer',
                            params: [
                                {
                                    vname: 'to',
                                    type: 'ByStr20',
                                    value: fromBech32Address(tx.toAddress).toLowerCase()
                                },
                                {
                                    vname: 'amount',
                                    type: 'Uint128',
                                    value: new BigNumber(tx.amount).toFixed(0, BigNumber.ROUND_DOWN)
                                }
                            ]
                        })
                    }
                };

            // case TokenType.NATIVE:
            default:
                return {
                    date: {
                        created: Date.now(),
                        signed: Date.now(),
                        broadcasted: Date.now(),
                        confirmed: Date.now()
                    },
                    blockchain: tx.account.blockchain,
                    chainId: tx.chainId,
                    type: TransactionType.TRANSFER,
                    token: tokenInfo,

                    address: tx.account.address,
                    publicKey: tx.account.publicKey,

                    toAddress: tx.toAddress,
                    amount: new BigNumber(tx.amount).toFixed(0, BigNumber.ROUND_DOWN),
                    feeOptions: tx.feeOptions,
                    broadcastedOnBlock: blockInfo?.number,
                    nonce,
                    status: TransactionStatus.PENDING
                };
        }

        // return enrichtransaction(finaltransaction);
    }

    public getTransactionAmount(tx: IBlockchainTransaction): string {
        const tokenInfo = getTokenConfig(tx.blockchain, tx.token?.symbol);

        if (tx.additionalInfo?.swap) {
            let amount = '';
            switch (tx.additionalInfo?.swap.contractMethod) {
                case ContractMethod.INCREASE_ALLOWANCE:
                case ContractMethod.SWAP_EXACT_TOKENS_FOR_ZIL:
                case ContractMethod.SWAP_EXACT_ZIL_FOR_TOKENS:
                case ContractMethod.SWAP_EXACT_TOKENS_FOR_TOKENS:
                    amount = tx.additionalInfo?.swap.fromTokenAmount;
                    break;
            }

            return amount;
        } else if (tokenInfo?.type === TokenType.ZRC2 || tx?.data?.params) {
            return tx?.data?.params[1];
        } else {
            return tx.amount;
        }
    }

    public getTransactionStatusByCode(status: any): TransactionStatus {
        switch (parseInt(status, 16)) {
            case 0:
                return TransactionStatus.FAILED;
            case 1:
                return TransactionStatus.SUCCESS;
            case 2:
                return TransactionStatus.PENDING;
            default:
                return TransactionStatus.FAILED;
        }
    }

    public getMessageSignature(
        account: IAccountState,
        message: string,
        signature: string
    ): {
        signature: string;
        publicKey: string;
        message: string;
    } {
        return {
            signature,
            publicKey: account.publicKey,
            message
        };
    }

    public async buildPosTransaction(
        tx: IPosTransaction,
        transactionType: PosBasicActionType
    ): Promise<IBlockchainTransaction[]> {
        const client = Zilliqa.getClient(tx.chainId);

        const transactions: IBlockchainTransaction[] = [];

        switch (transactionType) {
            case PosBasicActionType.DELEGATE: {
                const splitAmount = splitStake(new BigNumber(tx.amount), tx.validators.length);
                for (const validator of tx.validators) {
                    const txStake: IPosTransaction = cloneDeep(tx);
                    txStake.amount = splitAmount.toFixed(0, BigNumber.ROUND_DOWN);
                    const transaction: IBlockchainTransaction = await client.contracts[
                        Contracts.STAKING
                    ].delegateStake(txStake, validator);
                    transaction.nonce = transaction.nonce + transactions.length; // increase nonce with the number of previous transactions
                    transactions.push(transaction);
                }
                break;
            }
            case PosBasicActionType.DELEGATE_V2: {
                const validators: {
                    validator: IValidator;
                    amount: string;
                }[] = tx.validators as any;

                for (const v of validators) {
                    const txStake: IPosTransaction = cloneDeep(tx);
                    txStake.amount = new BigNumber(v.amount).toFixed(0, BigNumber.ROUND_DOWN);
                    const transaction: IBlockchainTransaction = await client.contracts[
                        Contracts.STAKING
                    ].delegateStake(txStake, v.validator);
                    transaction.nonce = transaction.nonce + transactions.length; // increase nonce with the number of previous transactions
                    transactions.push(transaction);
                }
                break;
            }
            case PosBasicActionType.REDELEGATE: {
                const txUnvote = cloneDeep(tx);
                txUnvote.validators = [tx.extraFields.fromValidator];

                const shouldWithdraw = await client.contracts[
                    Contracts.STAKING
                ].canWithdrawStakeRewardsFromSsn(
                    tx.account.address,
                    tx.extraFields.fromValidator.id
                );

                if (shouldWithdraw) {
                    const txClaimReward: IPosTransaction = cloneDeep(tx);
                    const transaction: IBlockchainTransaction = await client.contracts[
                        Contracts.STAKING
                    ].withdrawStakRewards(txClaimReward, tx.extraFields.fromValidator);
                    transactions.push(transaction);
                }
                const txUnStake: IPosTransaction = cloneDeep(tx);
                const transactionUnStake: IBlockchainTransaction = await client.contracts[
                    Contracts.STAKING
                ].reDelegateStake(txUnStake, tx.extraFields.fromValidator, tx.validators[0]);
                transactionUnStake.nonce = transactionUnStake.nonce + transactions.length;
                transactions.push(transactionUnStake);

                break;
            }
            case PosBasicActionType.UNSTAKE: {
                const ssnAddress = tx.validators[0].id;
                const shouldWithdraw = await client.contracts[
                    Contracts.STAKING
                ].canWithdrawStakeRewardsFromSsn(tx.account.address, ssnAddress);

                if (shouldWithdraw) {
                    const txClaimReward: IPosTransaction = cloneDeep(tx);
                    const transaction: IBlockchainTransaction = await client.contracts[
                        Contracts.STAKING
                    ].withdrawStakRewards(txClaimReward, tx.validators[0]);
                    transactions.push(transaction);
                }

                const txUnStake: IPosTransaction = cloneDeep(tx);
                const transactionUnStake: IBlockchainTransaction = await client.contracts[
                    Contracts.STAKING
                ].withdrawStakAmt(txUnStake, tx.validators[0]);
                transactionUnStake.nonce = transactionUnStake.nonce + transactions.length;
                transactions.push(transactionUnStake);
                break;
            }
            case PosBasicActionType.CLAIM_REWARD_NO_INPUT: {
                for (const validator of tx.validators) {
                    const txClaimReward: IPosTransaction = cloneDeep(tx);
                    const transaction: IBlockchainTransaction = await client.contracts[
                        Contracts.STAKING
                    ].withdrawStakRewards(txClaimReward, validator);
                    transaction.nonce = transaction.nonce + transactions.length; // increase nonce with the number of previous transactions
                    transactions.push(transaction);
                }
                break;
            }
            case PosBasicActionType.WITHDRAW: {
                const txWithdraw = cloneDeep(tx);
                const transaction = await client.contracts[Contracts.STAKING].completeWithdrawal(
                    txWithdraw
                );
                if (transaction) transactions.push(transaction);

                break;
            }
        }

        return transactions;
    }
}

'''
'''--- src/core/blockchain/zilliqa/ws-client.ts ---
import { AbstractWsClient } from '../common/abstract-ws-client';
import { WsEvent } from '../types';
import { networks } from './networks';

export class WsClient extends AbstractWsClient {
    constructor(chainId: string) {
        super(networks, chainId);
    }

    onMessage(msg) {
        if (msg.type === 'Notification' && Array.isArray(msg.values)) {
            for (const value of msg.values) {
                switch (value.query) {
                    case 'NewBlock':
                        const blockNumber = value?.value?.TxBlock?.header?.BlockNum;
                        if (blockNumber) {
                            this.emit(WsEvent.NEW_BLOCK, blockNumber);
                        }
                        break;
                    case 'TxnLog':
                        const transactions = value?.value;
                        if (transactions) {
                            this.emit(WsEvent.TXN_LOG, transactions);
                        }
                        break;
                }
            }
        }
    }

    onNewBlock(cb) {
        return this.subscribe(
            WsEvent.NEW_BLOCK,
            {
                sub: { query: 'NewBlock' },
                unsub: {
                    query: 'Unsubscribe',
                    type: 'NewBlock'
                }
            },
            cb
        );
    }

    onTxnLog(addresses: string[], cb) {
        return this.subscribe(
            WsEvent.TXN_LOG,
            {
                sub: { query: 'TxnLog', addresses },
                unsub: {}
            },
            cb
        );
    }
}

'''
'''--- src/core/constants/app.ts ---
export const AVAILABLE_CURRENCIES = [
    'AUD',
    'CAD',
    'CNY',
    'DAI',
    'EUR',
    'GBP',
    'JPY',
    'KRW',
    'SGD',
    'THB',
    'USD',
    'USDT'
];
export const WC_CONNECTION = 'wcConnection';
export const WC = {
    GET_STATE: 'moonletGetState',
    SIGN_TRANSACTION: 'moonletSignTransaction',
    UPDATE_STATE: 'moonletUpdateState',
    PING: 'moonletPing'
};
export const RESET_APP_FAILED_LOGINS = 15;
export const FAILED_LOGIN_BLOCKING = {
    3: 5 * 60 * 1000, // 5 min
    6: 20 * 60 * 1000, // 20 min
    9: 60 * 60 * 1000, // 1h
    12: 24 * 60 * 60 * 1000 // 1 day
};
export const MNEMONIC_LENGTH = 12;

export enum AppStateStatus {
    ACTIVE = 'active',
    BACKGROUND = 'background',
    INACTIVE = 'inactive'
}

export const CONN_EXT_RETRY_ATTEMPTS = 3;

// TODO: move this to a config, maybe firebase or db?
export const NEAR_TLD = {
    mainnet: 'near',
    testnet: 'testnet'
};
export const NEAR_LOCKUP_SUFFIX = {
    mainnet: '.lockup.near',
    testnet: '.testnet'
};

'''
'''--- src/core/i18n/index.ts ---
export * from './translation/translate-component';
export * from './translation/translate';

'''
'''--- src/core/i18n/translation/__tests__/translate.test.ts ---
// import "../locales/en";
import { loadTranslations, translate } from '../translate';
import { translation } from '../locales/en';

jest.mock('../locales/en');

export default describe('Translate utils', () => {
    test('loadTranslations()', async () => {
        expect(await loadTranslations('en')).toEqual(translation);
    });

    describe('translate()', () => {
        test('invalid text', () => {
            expect(translate('Mock.invalid')).toBe('');
        });

        test('simple string', () => {
            expect(translate('Mock.simpleString')).toBe('SIMPLE_STRING');
        });

        test('simpleObject', () => {
            expect(translate('Mock.simpleObject')).toBe('SIMPLE_OBJECT');
        });

        test('simpleParams', () => {
            expect(translate('Mock.simpleParams', { param: 'p1' })).toBe('SIMPLE_PARAMS_p1');
        });

        test('formsDefault', () => {
            (translation as any).__setPluralFnReturn('many');
            expect(translate('Mock.formsDefault')).toBe('FORMS_DEFAULT_DEFAULT');

            (translation as any).__setPluralFnReturn('zero');
            expect(translate('Mock.formsDefault')).toBe('FORMS_DEFAULT_ZERO');
        });

        const cases = ['forms', 'formsOrdinal'];
        const forms = ['zero', 'one', 'two', 'few', 'many'];
        for (const c of cases) {
            test(c, () => {
                for (const form of forms) {
                    (translation as any).__setPluralFnReturn(form);
                    const key =
                        c === 'forms' ? 'FORMS' : c.replace('forms', 'forms_').toUpperCase();
                    expect(translate(`Mock.${c}`, undefined, 2)).toBe(
                        `${key}_${form.toUpperCase()}`
                    );
                }
            });
        }
    });
});

'''
'''--- src/core/i18n/translation/locales/__mocks__/en.ts ---
const mock: any = jest.genMockFromModule('../en');
let pluralFnReturn = 'many';

mock.translation.texts.Mock = {
    simpleString: 'SIMPLE_STRING',
    simpleObject: {
        text: 'SIMPLE_OBJECT'
    },
    simpleParams: 'SIMPLE_PARAMS_{{param}}',
    formsDefault: {
        text: 'FORMS_DEFAULT_DEFAULT',
        forms: {
            zero: 'FORMS_DEFAULT_ZERO'
        }
    },
    forms: {
        text: 'FORMS_DEFAULT',
        ordinal: false,
        forms: {
            zero: 'FORMS_ZERO',
            one: 'FORMS_ONE',
            two: 'FORMS_TWO',
            few: 'FORMS_FEW',
            many: 'FORMS_MANY'
        }
    },
    formsOrdinal: {
        text: 'FORMS_ORDINAL_DEFAULT',
        ordinal: true,
        forms: {
            zero: 'FORMS_ORDINAL_ZERO',
            one: 'FORMS_ORDINAL_ONE',
            two: 'FORMS_ORDINAL_TWO',
            few: 'FORMS_ORDINAL_FEW',
            many: 'FORMS_ORDINAL_MANY'
        }
    }
};

mock.translation.plural = jest.fn(() => pluralFnReturn);

mock.translation.__setPluralFnReturn = (value: any) => (pluralFnReturn = value);

export const translation = mock.translation;

'''
'''--- src/core/i18n/translation/locales/__tests__/en.ts ---
import { translation } from '../en';

const testCases = [
    [0, false, 'other'],
    [1, false, 'one'],
    [0, true, 'other'],
    [1, true, 'one'],
    [2, true, 'two'],
    [3, true, 'few'],
    [4, true, 'other']
];
describe('EN locale', () => {
    test('plural function', () => {
        for (const testCase of testCases) {
            expect(translation.plural(testCase[0] as number, testCase[1] as boolean)).toBe(
                testCase[2]
            );
        }
    });
});

'''
'''--- src/core/i18n/translation/locales/en.ts ---
import { ITranslations } from '../types';

export const translation: ITranslations = {
    texts: {
        App: {
            labels: {
                // please try to add keys in alphabetic order
                about: 'About',
                accept: 'Accept',
                account: 'Account',
                accounts: 'Accounts',
                activate: 'Activate',
                activateAccount: 'Activate account',
                activated: 'Activated',
                add: 'Add',
                addToken: 'Add token',
                advanced: 'Advanced',
                advancedSetup: 'Advanced setup',
                all: 'All',
                allow: 'Allow',
                amount: 'Amount',
                average: 'Average',
                balance: 'Balance',
                blockHash: 'Block Hash',
                cancel: 'Cancel',
                canceled: 'Canceled',
                cheap: 'Cheap',
                check: 'Check',
                close: 'Close',
                claim: 'Claim',
                claimReward: 'Claim reward',
                claimingAccount: 'Claiming account',
                claimingRewards: 'Claiming rewards',
                comingSoon: 'Coming soon!',
                confirm: 'Confirm',
                confirmPayment: 'Confirm payment',
                connect: 'Connect',
                connection: 'Connection',
                continue: 'Continue',
                continueWith: 'Continue with',
                contract: 'Contract',
                contractAddress: 'Contract address',
                contractCall: 'Contract call',
                contractCallParams: 'Contract call params',
                contractCode: 'Contract code',
                contractDeploy: 'Contract deploy',
                contractInit: 'Contract init',
                copy: 'Copy',
                copied: 'Copied',
                create: 'Create',
                createTicket: 'Create a ticket',
                createStakeAccount: 'Create stake account',
                cumulative: 'Cumulative',
                date: 'Date',
                dateAndTime: 'Date and time',
                decimals: 'Decimals',
                delegate: 'Delegate',
                delegations: 'Delegations',
                delete: 'Delete',
                deposit: 'Deposit',
                details: 'Details',
                disconnect: 'Sign out',
                dropped: 'Dropped',
                enterAmount: 'Enter\namount',
                editToken: 'Edit token',
                error: 'Error',
                errorMessage: 'Error message',
                errorOccured: 'An error has occurred. Please try again!',
                failed: 'Failed',
                fast: 'Fast',
                fastest: 'Fastest',
                fee: 'Fee',
                fees: 'Fees',
                find: 'Find',
                for: 'For',
                from: 'From',
                function: 'Function',
                governance: 'Governance',
                half: 'Half',
                hideDetails: 'Hide details',
                high: 'High',
                holdUnveil: 'Hold to unveil',
                increaseAllowance: 'Increase Allowance',
                learnMore: 'Learn more',
                ledgerType: 'Ledger type',
                legal: 'Legal',
                locking: 'Locking',
                low: 'Low',
                maxFees: 'Max.Fees',
                maxBlockchainFees: 'Max. Blockchain Fees',
                maybeLater: 'Maybe later',
                message: 'Message',
                medium: 'Medium',
                mnemonicNotValid:
                    'Your secret phrase is not valid! Please make sure you don`t have typos or special characters like -()[]<>,.@$, etc. As well, do not use numbers.',
                myVotes: 'My Votes',
                myStakes: 'My Stakes',
                network: 'Network',
                next: 'Next',
                nextWord: 'Next word',
                no: 'No',
                notifications: 'Notifications',
                ok: 'OK',
                paste: 'Paste',
                processing: 'Processing',
                promoDetails: 'Promo details',
                privacyPolicy: 'Privacy Policy',
                quickDelegate: 'Quick Delegate',
                quickVote: 'Quick Vote',
                quickStake: 'Quick Stake',
                receive: 'Receive',
                recipient: 'Recipient',
                recover: 'Recover',
                redelegate: 'Redelegate',
                reinvest: 'Reinvest',
                refreshing: 'Refreshing',
                remove: 'Remove',
                removeAccount: 'Remove account',
                removeTransaction: 'Remove transaction',
                removeTransactionDetails:
                    'This action will remove the transaction from MoonletWallet. This will still remain on the blockchain network.',
                rent: 'Rent',
                retry: 'Retry',
                reset: 'Reset',
                resetAll: 'Reset all',
                switchNode: 'Switch Node',
                revote: 'Revote',
                rewards: 'Rewards',
                rootAccount: 'Root Account',
                save: 'Save',
                secure: 'Secure',
                security: 'Security',
                send: 'Send',
                sendingTokens: 'Sending tokens',
                sender: 'Sender',
                settings: 'Settings',
                setup: 'Setup',
                sign: 'Sign',
                signMessage: 'Sign message',
                simple: 'Simple',
                simpleSetup: 'Simple setup',
                somethingWrong: 'Something went wrong. Please try again',
                standard: 'Standard',
                stake: 'Stake',
                staked: 'Staked',
                stakeNow: 'Stake now',
                stakingPublicBeta: 'Moonlet Staking - Public Beta',
                startConnect: 'Start connect',
                statistics: 'Statistics',
                status: 'Status',
                success: 'Success',
                summary: 'Summary',
                support: 'Support',
                symbol: 'Symbol',
                swap: 'Swap',
                tc: 'Terms of Service',
                to: 'To',
                tools: 'Tools',
                topUp: 'Top-up',
                theRequested: 'the requested',
                transaction: 'transaction',
                transactions: 'Transactions',
                transfer: 'Transfer',
                tryAgain: 'Try again',
                totalBalance: 'Total balance',
                typeHere: 'Type here',
                txWaitConfirmations:
                    'Please wait {{blocks}} blocks to have this transaction confirmed. Do not close the app.',
                understand: 'I understand',
                undelegate: 'Undelegate',
                unknownOp: 'Unknown operation',
                unvote: 'Unvote',
                unlock: 'Unlock',
                unlocking: 'Unlocking',
                unvoting: 'Unvoting',
                unstake: 'Unstake',
                unstaking: 'Unstaking',
                validators: 'Validators',
                viewDetails: 'View details',
                vote: 'Vote',
                voting: 'Voting',
                wallets: 'Wallets',
                warning: 'Warning',
                watch: 'Watch mode',
                watchAccount: 'Watch account',
                withdraw: 'Withdraw',
                youAreOn: 'You are on {{blockchain}} {{networkName}} Testnet',
                youAreUsing: 'You are now using your',
                yes: 'Yes'
                // please try to add keys in alphabetic order
            },
            buttons: {
                back: 'Back',
                clipboardBtn: 'Copy to clipboard',
                copiedBtn: 'Copied',
                done: 'Done'
            }
        },
        CreateWalletTc: {
            body: 'Make sure you review our\nPrivacy Policy and Terms of Service'
        },
        CreateWalletMnemonic: {
            body:
                'Please save the recovery phrase and keep it in a safe place. The recovery phrase is the only way to restore your Moonlet wallet in case you lose your phone or forget your password.',
            title:
                'Here’s your recovery phrase. Please write all {{mnemonicLength}} words down and keep them safe.',
            mnemonicInfo: 'Write down the words from {{from}} to {{to}}:',
            terms:
                'The recovery phrase is the only way to restore your Moonlet wallet in case you lose your phone or forget your password. Don’t lose it!',
            copy: 'Copy entire mnemonic'
        },
        CreateWalletMnemonicConfirm: {
            body:
                'To make sure you have written down all of your recovery words, please enter the following:',
            errors: {
                tryAgain: 'Please try again'
            }
        },
        CreateHardwareWallet: {
            device: 'Device: {{device}}',
            app:
                'Make sure you have opened {{app}} app on your Ledger before starting the connect.',
            verifyAddress: 'Verify {{app}} address on your Ledger',
            notSupported: 'Feature is not supported',
            USB: 'Cable',
            U2F: 'U2F', // TODO
            BLE: 'Bluetooth',
            scanningDevices: 'Scanning for ledger device',
            paired: 'has been paired',
            openApp: 'Open {{app}} app on your Ledger to continue...',
            disableNearNanoXBle: 'Not supported yet by Nano X Near App'
        },
        Fee: {
            feeTitle: 'Transaction fee',
            gasPrice: 'Gas price',
            gasLimit: 'Gas limit',
            maxPriorityFeePerGas: 'Max Priority Fee Per Gas',
            maxFeePerGas: 'Max Fee Per Gas',
            errorMaxPriorityFeePerGas: 'Invalid Max Priority Fee Per Gas',
            errorMaxFeePerGas: 'Invalid Max Fee Per Gas',
            errorGasPrice: 'Invalid Gas Price',
            errorLimitPrice: 'Invalid Gas Limit Price'
        },
        Password: {
            setupPinTitle: 'Setup PIN code',
            setupPinSubtitle: 'Please enter your new PIN code',
            verifyPinTitle: 'Verify PIN code',
            verifyPinSubtitle: 'Please re-enter your new PIN code',
            pinTitleUnlock: 'Enter PIN code',
            pinSubtitleUnlock: 'Your PIN is required\nto unlock Moonlet',
            invalidPassword: 'Invalid Password',
            invalidPasswordAtttempts: {
                text: 'Invalid Password\nYou have {{attempts}} attempts left',
                ordinal: false,
                forms: {
                    one: 'Invalid Password\nYou have 1 attempt left'
                }
            },
            invalidPasswordLastAttempt: `You have only 1 attempt left.\nIf you fail, all your data will be cleared and you'll need your secret phrases to restore your wallets.`,
            genericError: 'Operation could not be completed',
            subtitleMnemonic: 'Your PIN is required to view mnemonic',
            subtitleDeleteWallet: 'Your PIN is required to delete wallet',
            subtitleSignTransaction: 'Your PIN is required\nto sign your transaction',
            subtitleSignMessage: 'Your PIN is required\nto sign your message',
            dontMatch: "PIN code doesn't match",
            termsBody: 'You need to setup a PIN to secure your wallet.',
            termsCheckboxLabel:
                'Do not lose this PIN. Moonlet will not be able to reset it for you.',
            authRequired: 'Authentication Required',
            authToContinue: 'Authenticate to continue',
            touchSensor: 'Touch sensor',
            showPasscode: 'Show Passcode',
            changePinSubtitle: 'Your current PIN is required in order to change it',
            moonletDisabled: 'Moonlet is disabled',
            disabledDetails: 'try again in {{duration}} {{measurement}}',
            disabledDetailsSeconds: 'try again in a few seconds',
            activateInternet: 'Please activate the internet connection',
            alreadyHavePin: 'You already have this PIN!\nPlease choose another one'
        },
        Time: {
            second: {
                text: 'seconds',
                ordinal: false,
                forms: {
                    one: 'second'
                }
            },
            minute: {
                text: 'minutes',
                ordinal: false,
                forms: {
                    one: 'minute'
                }
            },
            hour: {
                text: 'hours',
                ordinal: false,
                forms: {
                    one: 'hour'
                }
            },
            day: {
                text: 'days',
                ordinal: false,
                forms: {
                    one: 'day'
                }
            }
        },
        Send: {
            inputAddress: 'Paste your address here or scan the QR code',
            inputAddressExt: 'Paste your address here',
            memo: 'Memo (optional)',
            amount: 'Amount',
            recipientLabel: 'Recipient',
            transferOwnAccounts: 'Transfer between my accounts',
            recipientNotValid: 'Recipient address is invalid',
            genericError: 'Operation could not be completed. Check internet connection',
            insufficientFunds: 'Insufficient funds',
            mimimumAmount: 'Minimum amount is {{value}} {{coin}}',
            insufficientFundsFees: 'Insufficient funds for fees',
            noFeesTitle: 'Oops, the fees didn’t get through',
            noFeesSubtitle: 'Please retry and wait for the fees to load',
            receipientWarning: 'Warning: recipient address is not checksumed',
            allBalance: 'All balance: ',
            cameraDisabledTitle: 'Enable camera',
            cameraDisabledText: 'Please enable camera on device settings',
            emptyAddress: 'Your address book is empty',
            addAddressBook: 'Start to add public addresses or domain names to your address book',
            addressNotInBook:
                'It looks that this address is not on your address book. Click here to add it!',
            alertTitle: 'Add it to address book',
            alertDescription: 'Use a relevant name or an alias for this new address',
            alertEditTitle: 'Edit address book name',
            alertEditDescription: 'Use a relevant name or an alias for this address',
            deleteContact: 'Delete contact',
            editContactName: 'Edit name',
            reviewTransaction: 'Review transaction on your hardware wallet',
            addAddress: 'Add\naddress',
            confirmTransaction: 'Confirm\ntransaction',
            activateAccount: 'Activate your account',
            activateAccountDetails:
                'In order to be able to use your account you need to activate it. This will trigger a rent cost which can be recovered once you decide to deactivate it.'
        },

        AccountSettings: {
            manageAccount: 'Manage account',
            revealPrivate: 'Reveal private key',
            revealPublic: 'Reveal public key',
            viewOn: 'View on ',
            reportIssue: 'Report issue',
            securityTip:
                'Security tip: Never disclosure your private key. Anyone with this key can take your funds forever.'
        },
        Wallets: {
            deleteWallet: 'Delete wallet',
            unveil: 'Unveil phrase',
            editName: 'Edit name',
            confirmDelete:
                'Make sure you have saved securely your recovery phrase before deleting it',
            viewPhrase: 'Reveal secret phrase',
            secureWallet: 'Secure wallet',
            withoutPin:
                'Without a PIN code, anyone who has access to your phone will be able to control the funds. It’s wise to setup a PIN code and secure your wallet',
            editTitle: 'Edit wallet name',
            editDescription: 'Use a relevant name or an alias for this wallet',
            addWalletTitle: 'Add Wallet',
            manageWallets: 'Manage wallets',
            connectLedger: 'Connect your Ledger!',
            quicklyConnectLedger: 'Quickly connect your Ledger and manage your assests',
            connectWallet: 'Manage your wallets',
            quicklyConnectWallet: 'Quickly create or recover your wallet and manage your assets'
        },
        Transaction: {
            transactionID: 'Transaction ID',
            transactionDetails: 'Transaction details',
            transactionStatus: 'Transaction status',
            nonce: 'Nonce',
            statusValue: {
                Pending: 'Pending',
                Failed: 'Failed',
                Dropped: 'Dropped',
                Success: 'Success'
            },
            signTransaction: 'Sign transaction',
            signTransactions: 'Sign transaction(s)',
            signAll: 'Sign all transactions',
            signTransactionNotification: 'Send {{amount}} from {{fromAccount}} to {{toAccount}}',
            processTitleText:
                'The fees mentioned below are blockchain maximum possible fees and are required to process the transaction on the blockchain network level. ',
            processTitleTextHighFees:
                'The fees on the {{blockchain}} network are usually very high. Make sure you delegate the proper amount of {{token}} to make it worth it.',
            processTitleText2: 'Moonlet does not act as an intermediary or profit from these fees.',
            processTitleText3:
                'Currently it looks that the maximum fees are higher than the amount you want to stake.',
            processTitleCompletedText:
                'Some transactions may still pe pending on the blokchain, it is safe to continue. You can check the status of the transactions at any time in Transactions section.',
            processTitleErrorText:
                'There was an error! Some of your transaction were not broadcasted or failed on broadcasting. The transactions that were not successfully broadcasted will not be displayed under Transaction section.\n We advise to carefully check your account and try to redo the transactions that failed.',
            processTitleTextLedger:
                'Please sign each transaction from your Ledger in order to start broadcasting to the blockchain network',
            registerAccount: 'Registering account',
            creatingStakeAccount: 'Creating stake account',
            spliStakeAccount: 'Split stake account for the remaining amount',
            transactionType: 'Transaction Type'
        },
        Statistics: {
            launchingSoon: 'Launching soon!',
            newSection: 'A new section with stats about your wallets and accounts is in the work.'
        },
        Watch: {
            newSection: 'A new section to watch accounts is in the work.'
        },
        SmartScan: {
            title: 'Smart scan',
            newSection: 'A new section of smart scanning is in the work.'
        },
        Settings: {
            appVersion: 'Application version',
            backupWallet: 'Backup wallet',
            blockchainPortfolio: 'Blockchain portfolio',
            defaultCurrency: 'Default currency',
            manageWallet: 'Manage wallet',
            networkOptions: 'Network options',
            privacyPolicy: 'Privacy Policy',
            reportIssue: 'Report issue',
            mainnetTestnet: 'Mainnet/Testnet',
            deviceId: 'Device ID',
            copied: 'Device ID copied!',
            networkNotAvailable: 'Network not available',
            switchNetwork: 'Please switch network to activate blockchain',
            cannotDeactivateAllBlockchains: 'You cannot deactivate all active blockchains',
            changePin: 'Change PIN',
            successChangePin: 'PIN has been changed!'
        },
        NetworkOptions: {
            mainnet: 'Mainnet',
            testnet: 'Testnet',
            title: 'Network Options'
        },
        Onboarding: {
            welcomeTitle: 'Welcome to Moonlet!',
            welcomeText: 'A portal to the decentralised world',
            webStep1: 'Open Moonlet app on your mobile',
            webStep2: 'Tap on menu icon from the header',
            webStep3: 'Scan the QR code to connect'
        },
        Account: {
            noTransactions: 'No transactions available',
            transactionHistory:
                'Transaction history will appear here once you start to send tokens to other accounts',
            manageAccounts: 'Manage accounts',
            switchAccounts: 'Switch accounts',
            watchAccount:
                'The account will be added on the selected wallet and the selected account'
        },
        DashboardMenu: {
            transactionHistory: 'Transaction history',
            scanPay: 'Scan to pay',
            switchWallets: 'Switch between the wallets anytime',
            tokenSwap: 'Token swap (coming soon)',
            copyToClipboard: 'Copy address to clipboard'
        },
        BackupWallet: {
            title: 'Backup Wallet',
            workInProgress: 'A backup/recovery system\nis in the work.'
        },
        BiometryType: {
            FaceID: 'FaceID',
            TouchID: 'TouchID',
            FingerprintLogin: 'Fingerprint login'
        },
        Token: {
            deleteToken: 'Delete token',
            searchToken: 'Search by symbol or contract address',
            noMatch: 'Nothing matches your search',
            noGiveUp: `But don't give up – check the search string you entered and give it one more try`,
            searchValidators: 'Search for validators'
        },
        AddAccount: {
            title: 'Add account',
            eg: 'e.g. johndoe',
            addNearAccount: 'Add account ({{activeAccountsNumber}}/{{maxAccountsNumber}})',
            checking: 'Checking availability ...',
            removeAccountConfirm: 'You’re about to remove {{name}} from Moonlet',
            invalid: 'Account name CANNOT contain characters "@" or "."',
            notAvailable: 'Account name not available. Try something else.'
        },
        CreateNearAccount: {
            title: 'Create account name',
            chooseAccountName: 'Choose an account name and you’re all set.',
            congrats:
                'Congrats! {{name}} is available. It costs {{nearFees}} to create it, and you will transfer {{depositAmount}} to the new account.',
            failed: 'Create account has failed',
            tryAgain: 'Try again!',
            insufficientFunds:
                'Insufficient funds! You need at least {{amount}} to create a NEAR account.'
        },
        RecoverNearAccount: {
            title: 'Recover account name',
            checkStatus: 'Check your existing account name or lockup contract',
            authMoonletUserAccount: 'Authorize Moonlet to use your existing account name',
            copyAuthLink: 'Copy authorization link',
            authMoonlet: 'Authorize Moonlet',
            congrats: 'Congrats! {{name}} can be added to Moonlet.',
            needAuthorize: 'You need to authorize Moonlet to add {{name}}.',
            needAuthorizeLockup:
                'You need to authorize Moonlet the owner account {{owner}} in order to add {{lockup}}.',
            authProgress: 'Authorization in progress ...',
            notRegistered:
                'Account name not registered. If you want to use it, you need first to create it.',
            createHere: 'Create one here!',
            notSupported: 'Account name not supported yet. Try something else.'
        },
        LoadingModal: {
            txFailed: 'Transaction has failed!',
            messageSignFailed: 'Message signing failed!',
            GENERIC_ERROR:
                'Something went wrong while broadcasting your transaction. Please try again.',
            GENERIC_ERROR_MSG_SIGN:
                'Something went wrong while signing your message. Please try again.',
            REVIEW_TRANSACTION: 'Review transaction on your hardware wallet',
            OPEN_APP: 'Please open {{app}} app on your Ledger',
            BROADCASTING: 'Broadcasting transaction',
            SIGNING: 'Signing transaction',
            CONNECTING_LEDGER: 'Connecting to your ledger. Make sure your device is unlocked',
            TR_UNDERPRICED: 'Transaction underpriced: gas price might be too low',
            NOT_ENOUGH_TOKENS: 'Insufficient funds for transaction',
            COSMOS_ERROR_12: 'Insufficient fee',
            COSMOS_ERROR_14: 'Insufficient funds for transaction',
            INSUFFICIENT_FUNDS_SOURCE_ACCOUNT: `You don't have enough {{coin}} available in your source account to pay for network fees. Please top-up a small amount to push the transaction through.`,
            CONTRACT_TX_NORMAL_NOT_ALLOWED:
                "{{address}} is a smart contract that doesn't accept normal transactions",
            WAITING_TX_CONFIRM: 'Waiting for transaction confirmation from your mobile.',
            WAITING_TX_CONFIRM_CANCEL:
                'Waiting for transaction confirmation from your mobile. If you changed your mind please click on cancel below.',
            GOVERNANCE_SIGN: 'Signing vote',
            GOVERNANCE_VOTING: 'Sending vote',
            GOVERNANCE_VOTED: 'Voted successfully',
            SPL_INVALID_ADDRESS:
                'Something went wrong while validating the addresses. Please try again.',
            SPL_INACTIVE_ADDRESS:
                'The destination address account does not have an active {{coin}} token.',
            GAS_PRICE_TOO_LOW:
                'Gas price is lower than minimum allowable. Increase gas price and try again!',
            GAS_LIMIT_TOO_LOW:
                'Gas limit is lower than minimum allowable. Increase gas limit and try again!'
        },
        SecurityChecks: {
            title: 'Security Warning!',
            ownRisk: 'Use Moonlet on your own risk!',
            ios: {
                emulator:
                    'You are running the application in iOS simulator, therefore we cannot guarantee the safety of the data.',
                jailBreak:
                    'Your device might be jail broken, therefore we cannot guarantee the safety of the data.',
                debugged:
                    "We've detected a debugger proccess connected to Moonlet, therefore we cannot guarantee the safety of the data.",
                hookDetected:
                    "We've detected the presence of reverse engeneering tools on your system, therefore we cannot guarantee the safety of the data."
            },
            android: {
                emulator:
                    'You are running the application in emulator, therefore we cannot guarantee the safety of the data.',
                jailBreak:
                    'Your device might be rooted, therefore we cannot guarantee the safety of the data.',
                debugged:
                    "We've detected a debugger proccess connected to Moonlet, therefore we cannot guarantee the safety of the data.",
                hookDetected:
                    "We've detected the presence of reverse engeneering tools on your system, therefore we cannot guarantee the safety of the data."
            }
        },
        Notifications: {
            notificationsCenter: {
                emptyNotifTitle: 'No notifications available',
                emptyNotifSubtitle:
                    'Notifications will appear here once you start to make transactions'
            }
        },
        Validator: {
            selectValidator: 'Select\nvalidator(s)',
            confirmVote: 'Confirm\nvote(s)',
            confirmStake: 'Confirm\nstake(s)',
            totalStakes: 'Total Stakes',
            totalVotes: 'Total Votes',
            activatingVotes: 'Activating votes',
            totalDelegated: 'Total Delegated',
            myStake: 'My Stake',
            delegation: 'Delegation',
            unlockText1: 'You can only',
            unlockText2: 'unlock',
            unlockText3: 'the funds that are not voting.\n In order to unlock all funds, please',
            unlockText4: 'unvote',
            unlockText5: 'first.',
            unlockBottomText:
                'It takes {{duration}} in order to unlock the amount and will be automatically withdrawn then deposited into your available balance.',
            claimRewardBottomText:
                'The claimed reward you receive may be equal to or grater than what it displayed nou since rewards are accumulated each block.',
            noNodes: 'No nodes available',
            noValidators: 'No validators available',
            stakeSection: 'This section will become available once you start to stake your tokens.',
            operationNotAvailable: 'Operation not available',
            operationNotAvailableMessage:
                'This operation can not be performed. You tried to {{operation}} too quickly. Please try again next network cycle or immediately after rewards distribution.',
            restakeScreenMessageZil:
                'The accumulated ZIL rewards will be automatically claimed and deposited into your available balance.',
            unstakeScreenMessageZil:
                'It takes 14 days in order to receive the amount. The accumulated ZIL rewards will be automatically claimed and deposited into your available balance.',
            alreadyStaked:
                'You have already staked to {{stakedValidator}} from this lockup contract.\nEither you stake the full amount to {{stakedValidator}} or unstake and withdraw your current funds and stake to {{selectedValidator}}.',
            multipleNodes: `This operation can not be performed for lockup contracts. Currently you can't stake to multiple nodes from a lockup contract. Please select only one node.`,
            selectStakingPool: 'Selecting staking pool',
            unselectStakingPool: 'Unselecting staking pool',
            allBalanceNotice: {
                ZILLIQA:
                    'Notice: Moonlet keeps a minimum of {{amount}} {{token}} in your account for future transactions like Stake, Claim, Unstake or Switch Node.',
                NEAR:
                    'Notice: Moonlet keeps a minimum of {{amount}} {{token}} in your account for future transactions like Stake, Unstake or Withdraw.',
                SOLANA:
                    'Notice: Moonlet keeps a minimum of {{amount}} {{token}} in your account for future transactions like Stake, Unstake or Withdraw.',
                CELO:
                    'Notice: Moonlet keeps a minimum of {{amount}} {{token}} in your account for future transactions like Stake, Claim, Unstake or Switch Node.',
                ETHEREUM:
                    'Notice: Moonlet keeps a minimum of {{amount}} {{token}} in your account for future transactions like Stake, Unstake or Withdraw.'
            },
            cannotInitiateTxTitle: 'You have pending transactions',
            notEnoughTokensFees1: `Your available balance is low and you can not cover the blockchain network fees.`,
            notEnoughTokensFees2: `You might have staked, unstaked or reward funds, but you don't have available funds to cover the blockchain maximum possible fees.`,
            notEnoughTokensFees3: `Please top up! Otherwise this transaction could fail.`,
            notEnoughTokensFees4: `Your available balance is low`,
            notEnoughTokensFees5: `You can not cover the blockchain network fees. Please top up otherwise this transaction could fail.`,
            disableSignMessage:
                'You might have staked, unstaked or reward funds, but in order to be able to broadcast this transaction you need to have available funds and top up at least {{amount}} {{token}}. No need to open a ticket!',
            cannotInitiateTxMessage:
                'Please make sure all transactions are finalised before initiating a new one.',
            lowFundsWarning: 'Low balance warning!',
            lowFundsText: 'Your balance is less than 1 ZIL',
            minimumUnstakeTitle: 'Adjust your amount',
            minimumUnstake: 'You can either unstake the entire value or less than {{lowerThen}}',
            adjustRestake:
                'You need to adjust the value you want to restake to be higher then  {{higherThen}} per validator',
            warningFeesToHigh:
                'Please note that the value of the maximum estimated fees are higher than the value of your amount that you want to stake.',
            addressNoExist: `This validator address\ndoesn't exist.`,
            stakeAmtLow: 'Your stake amount is low',
            stakeAmtLowDetails:
                'It looks like the fees are higher than the amount you want to stake. Either you stake more {{token}} or accept that this transaction might not be profitable.'
        },
        Widget: {
            activateVotesTitle: 'Activate your votes now',
            waitTimeActivate: 'Wait {{timeFormat}} until next epoch',
            waitTimeWithdraw: 'Wait {{timeFormat}} to withdraw',
            claimText: 'Claim your rewards now',
            withdrawText: 'Withdraw your {{coin}} now'
        },
        AddNearAccount: {
            title: 'Create or recover\nan account name!',
            recoverAccount: 'Recover account name',
            createAccount: 'Create account name',
            noAccounts: 'No accounts name available',
            enableSectionWeb:
                'This section will be enabled once you create an account name from mobile app.'
        },
        QuickDelegateBanner: {
            mainText: {
                ZILLIQA: 'Stake now!',
                CELO: 'Vote now!',
                NEAR: 'Stake now!',
                COSMOS: 'Delegate now!'
            },
            availableAmount: 'you have {{amount}} available'
        },
        LedgerConnect: {
            searchFor: 'Searching for',
            NANO_X: 'Ledger Nano X',
            NANO_S: 'Ledger Nano S',
            onlyAndroid:
                'NOTE: Only Android devices are compatible with cables or adapters connectivity.',
            NANO_S_CONNECTED:
                'Please make sure your Ledger Nano S is unlocked with cable connected.',
            NANO_X_CONNECTED:
                'Please make sure your Ledger Nano X is unlocked with Bluetooth enabled.',
            somethingWentWrong: 'Oops, something went wrong...',
            enableContractData: 'Please enable Contract data on the {{blockchain}} app Settings',
            verificationFailed: 'Verifcation failed',
            tryAgain:
                'Please try again. If the problem continues, check this troubleshooting guideline:',
            confirmFailed:
                'You need to confirm your {{blockchain}} address on your {{deviceModel}} for a successful pairing.\nPlease try again.',
            troubleshooting: 'Troubleshoot problems setting up Ledger.',
            confirmConnection: 'Confirming your connection',
            confirmBothDevices:
                'Confirm on both your phone and your {{deviceModel}} if the code matches.',
            openApp: 'Opening {{blockchain}} application',
            openAppOnDevice:
                'Please open your {{blockchain}} app on your {{deviceModel}} and wait a few seconds to have the connection established. Please be patient!',
            verifyAddressOnDevice:
                'Verify your {{blockchain}} address on your {{deviceModel}} and confirm it.',
            verifyAddress: 'Verifing your address',
            pairingSuccess: 'Pairing successful',
            readyToUse: 'Your {{deviceModel}} is ready\nto be used with Moonlet.',
            locationRequired: 'Location required',
            openSettings: 'Open location settings',
            locationRequiredSubtitle:
                'Location is disabled, therefore Moonlet is not able to scan for nearby Bluetooth devices. Enable Location from Settings and try again.',
            reviewTransaction: 'Review transaction',
            reviewTransactionDevice:
                'Review {{blockchain}} transaction on your {{deviceModel}} and confirm it.',
            reviewMessage: 'Review message',
            reviewMessageDevice:
                'Review {{blockchain}} message on your {{deviceModel}} and confirm it.',

            transactionDeclined: 'Transaction declined',
            transactionDeclinedDetails: 'Either try again or cancel this operation.'
        },
        ProcessTransactions: {
            title: 'Confirm',
            ledgerSignButton: {
                ordinal: true,
                text: 'Sign {{txNumber}}th transaction',
                forms: {
                    one: 'Sign {{txNumber}}st transaction',
                    two: 'Sign {{txNumber}}nd transaction',
                    few: 'Sign {{txNumber}}rd transaction',
                    other: 'Sign {{txNumber}}th transaction' // this is not needed since we have the default text above
                }
            },
            alertCancelTitle: 'Transactions pending',
            alertCancelMessage:
                'There are transaction pending signing. Are you sure you want to cancel?'
        },
        Widgets: {
            wentWrong: 'Oops, something went wrong...',
            didNotLoad: 'Widgets didn’t load. Please retry to connect.'
        },
        ExtensionBackgroundRequest: {
            connectMoonlet: 'Connect with Moonlet',
            waiting:
                'Waiting for confirmation from your mobile. If you changed your mind click on cancel below.',
            viewAddress: 'to view the addresses of your follwing accounts:',
            makeSure: 'Make sure you connect with websites you trust'
        },
        TotalBalance: {
            byCumulativeMessage:
                'By Cumulative: ON, the total balance will be computed in both FIAT and Main Token taking into account the total value of the portfolio.\n\nBy Cumulative: OFF, the total balance will be computed in both FIAT and Main Token taking into account the total value of the Main Token.'
        },
        Errors: {
            RequestedRatesCannotBeFulfilled: 'Requested rates cannot be fulfilled',
            MissingPool: 'Missing pool',
            TransactionExpired: 'Transaction has expired',
            Err2: 'Insufficient balance to authorise transaction',
            Err3: 'Insufficient allowance to authorise transaction',
            OutOfGas: 'Ran out of gas'
        },
        ContractMethod: {
            IncreaseAllowance: 'Increase Allowance',
            SwapExactZILForTokens: 'Swap Exact ZIL For Tokens',
            SwapExactTokensForZIL: 'Swap Exact Tokens For ZIL',
            SwapExactTokensForTokens: 'Swap Exact Tokens For Tokens'
        }
    },
    plural: (n: number, ord?: boolean) => {
        const s = String(n).split('.');
        const v0 = !s[1];
        const t0 = Number(s[0]) === n;
        const n10 = t0 && s[0].slice(-1);
        const n100 = t0 && s[0].slice(-2);

        if (ord) {
            return n10 === '1' && n100 !== '11'
                ? 'one'
                : n10 === '2' && n100 !== '12'
                ? 'two'
                : n10 === '3' && n100 !== '13'
                ? 'few'
                : 'other';
        }
        return n === 1 && v0 ? 'one' : 'other';
    }
};

'''
'''--- src/core/i18n/translation/translate.ts ---
import { ITranslations, ITranslation } from './types';

/**
 * Plural specs:
 * http://www.unicode.org/cldr/charts/28/supplemental/language_plural_rules.html
 */
export interface ITranslationParams {
    [key: string]: any;
}

export type Language = 'en';

const store: {
    language: Language;
    translations: ITranslations;
} = {
    language: undefined as any,
    translations: undefined as any
};

export const loadTranslations = (language: Language) => {
    let promise;
    switch (language) {
        case 'en':
        default:
            promise = import('./locales/en' /* webpackChunkName = "translations/en" */);
    }

    return promise.then(mod => {
        store.language = language;
        store.translations = mod.translation;
        return mod.translation;
    });
};

const getKeyConfig = (key: string): ITranslation | string => {
    const keyParts = key.split('.');
    let config = store?.translations?.texts as any;

    for (const keyPart of keyParts) {
        if (config && config[keyPart]) {
            config = config[keyPart];
        } else {
            config = undefined;
            break;
        }
    }

    return config;
};

export const formatTranslate = (text: string, params?: ITranslationParams): string => {
    if (params) {
        for (const key in params) {
            if (params.hasOwnProperty(key)) {
                text = text.replace(new RegExp('{{' + key + '}}', 'g'), String(params[key]));
            }
        }
    }

    return text;
};

export const translate = (key: string, params?: ITranslationParams, count: number = 0) => {
    const translationConfig = getKeyConfig(key);

    if (translationConfig) {
        if (typeof translationConfig === 'string') {
            return formatTranslate(translationConfig, params);
        }

        const plural = store.translations.plural(count, translationConfig.ordinal);
        const forms: any = translationConfig.forms;
        if (translationConfig.forms && forms[plural]) {
            return formatTranslate(forms[plural], params);
        } else {
            return formatTranslate(translationConfig.text, params);
        }
    } else {
        return '';
    }
};

'''
'''--- src/core/i18n/translation/types.ts ---
export interface ITranslation {
    text: string;
    ordinal?: boolean;
    forms?: {
        zero?: string;
        one?: string;
        two?: string;
        few?: string;
        many?: string;
    };
}

export interface IComponentTranslations {
    [key: string]: IComponentTranslations | ITranslation | string;
}

export interface ITranslations {
    texts: {
        [component: string]: IComponentTranslations;
    };
    plural: PluralFunction;
}

export type PluralFunction = (
    n: number,
    ord?: boolean
) => 'zero' | 'one' | 'two' | 'few' | 'many' | 'other';

'''
'''--- src/core/messaging/handlers/data-message.ts ---
import { updateTransactionFromBlockchain } from '../../../redux/wallets/actions';
import { store } from '../../../redux/config';
import { ISilentMessage, SilentMessageType } from '../types';
import { takeOneAndSubscribeToStore } from '../../../redux/utils/helpers';

export const dataMessageHandler = async (message: ISilentMessage) => {
    // check here is app is in foreground ?

    // this is entry point for backgorund messaging
    takeOneAndSubscribeToStore(store, (state, unsub) => {
        if (store.getState()?._persist?.rehydrated) {
            unsub && unsub();
            handleMessages(message);
        }
    });
};

const handleMessages = (message: ISilentMessage) => {
    switch (message.type) {
        case SilentMessageType.TRANSACTION:
            const data = JSON.parse(message.data);
            store.dispatch(
                // @ts-ignore
                updateTransactionFromBlockchain(
                    data.transactionHash,
                    data.blockchain,
                    data.chainId,
                    data.broadcastedOnBlock
                )
            );
            break;

        default:
            break;
    }
};

'''
'''--- src/core/messaging/handlers/notification.ts ---
import { NotificationType, INotificationPayload } from '../types';
import { NavigationParams } from 'react-navigation';
import { NavigationService } from '../../../navigation/navigation-service';
import { store } from '../../../redux/config';
import { setSelectedWallet, updateTransactionFromBlockchain } from '../../../redux/wallets/actions';
import { takeOneAndSubscribeToStore } from '../../../redux/utils/helpers';
import { openTransactionRequest } from '../../../redux/ui/transaction-request/actions';
import { markSeenNotification, getUnseenNotifications } from '../../../redux/notifications/actions';
import { captureException as SentryCaptureException } from '@sentry/react-native';

export const notificationHandler = async (
    notification: INotificationPayload,
    openedByNotification: boolean = false
) => {
    if (openedByNotification) {
        // used this in order to make sure that state is loaded
        takeOneAndSubscribeToStore(store, (state, unsub) => {
            if (store.getState()?._persist?.rehydrated) {
                unsub && unsub();
                handleNotification(notification, openedByNotification);
            }
        });
    } else {
        handleNotification(notification, openedByNotification);
    }

    try {
        const parsedData = JSON.parse(notification.data);

        if (parsedData?.notification?._id) {
            store.dispatch(markSeenNotification(parsedData.notification._id) as any);
        }
    } catch (err) {
        SentryCaptureException(new Error(JSON.stringify(err)));
    }
};

const handleNotification = (
    notification: INotificationPayload,
    openedByNotification: boolean = false
) => {
    store.dispatch(getUnseenNotifications() as any);

    switch (notification.type) {
        case NotificationType.TRANSACTION:
            const data = JSON.parse(notification.data);

            /**
             * if the app was already opened, no notification was displayed, update the transaction and display a notification
             *
             * if the app was opened by tapping on the notification then update the transaction from blockchain,
             * navigato to transaction page and dont display another transaction
             */
            store.dispatch(
                // @ts-ignore
                updateTransactionFromBlockchain(
                    data.transactionHash,
                    data.blockchain,
                    data.chainId,
                    data.broadcastedOnBlock,
                    openedByNotification
                ) as any
            );
            break;

        case NotificationType.TRANSACTION_UPDATE:
            const navigationParams: NavigationParams = {
                blockchain: notification.data.blockchain,
                accountIndex: notification.data.accountIndex,
                token: notification.data.token,
                tokenLogo: notification.data.tokenLogo
            };

            store.dispatch(setSelectedWallet(notification.data.walletId));

            NavigationService.navigate('Token', navigationParams);
            break;

        case NotificationType.MOONLET_SIGN_MESSAGE:
        case NotificationType.MOONLET_TRANSFER:
        case NotificationType.MOONLET_TRANSACTION:
            try {
                const requestId = JSON.parse(notification.data)?.requestId;

                if (requestId) {
                    store.dispatch(openTransactionRequest({ requestId }));
                } else {
                    // maybe find a way to handle this
                    // show a message to the user or something
                    SentryCaptureException(
                        new Error(
                            JSON.stringify({
                                requestId,
                                notificationType: NotificationType.MOONLET_TRANSFER
                            })
                        )
                    );
                }
            } catch (err) {
                SentryCaptureException(new Error(JSON.stringify(err)));
            }

            break;

        default:
            // general info?
            break;
    }
};

'''
'''--- src/core/messaging/notifications/android-background-messaging.ts ---
import { dataMessageHandler } from '../handlers/data-message';

export default async (message: any) => {
    message?.data && dataMessageHandler(message.data as any);
};

'''
'''--- src/core/messaging/notifications/notifications.ts ---
import messaging from '@react-native-firebase/messaging';
import { captureException as SentryCaptureException } from '@sentry/react-native';
import { Platform } from 'react-native';
import PushNotificationIOS from '@react-native-community/push-notification-ios';
import { notificationHandler } from '../handlers/notification';
import PushNotification from 'react-native-push-notification';

export class NotificationService {
    private messageListener = null;
    private messageBackgrounListener = null;
    private messageNotificationOpenedAppListener = null;
    private tokenRefreshListener = null;
    private localNotificationIOSListener = null;

    private token: string = null;

    public async configure() {
        try {
            const msg = messaging();

            await msg.hasPermission();
            await msg.requestPermission();

            this.token = await msg.getToken();
        } catch (error) {
            SentryCaptureException(new Error(JSON.stringify(error)));
        }

        this.createListeners();

        this.wasOpenedByNotification();
    }

    public async getToken() {
        return this.token || messaging().getToken();
    }

    private async sendNotification(message) {
        if (Platform.OS === 'android') {
            try {
                const channelId = 'channel-id';
                PushNotification.createChannel(
                    {
                        channelId,
                        channelName: 'My channel',
                        vibrate: true
                    },
                    () => {
                        PushNotification.localNotification({
                            channelId,
                            title: message?.notification?.title,
                            message: message?.notification?.body,
                            userInfo: {
                                data: message?.data
                            }
                        });
                    }
                );
            } catch (error) {
                SentryCaptureException(new Error(JSON.stringify(error)));
            }
        }

        if (Platform.OS === 'ios') {
            PushNotificationIOS.addNotificationRequest({
                id: await this.getToken(),
                title: message?.notification?.title,
                body: message?.notification?.body,
                userInfo: {
                    data: message?.data
                }
            });
        }
    }

    public async createListeners() {
        const msg = messaging();

        // when app is opened
        this.messageListener = msg.onMessage(async message => {
            // received data message
            await this.sendNotification(message);
        });

        // when app is opened or in background
        this.messageBackgrounListener = msg.setBackgroundMessageHandler(async message => {
            await this.sendNotification(message);
            return null;
        });

        // Notification caused app to open from background state
        this.messageNotificationOpenedAppListener = msg.onNotificationOpenedApp(message => {
            const data = (message as any)?.data || (message as any)?.userInfo?.data;
            notificationHandler(data, true);
        });

        this.tokenRefreshListener = msg.onTokenRefresh((token: string) => {
            if (this.token !== token) {
                this.token = token;
            }
        });

        if (Platform.OS === 'ios') {
            this.localNotificationIOSListener = PushNotificationIOS.addEventListener(
                'localNotification',
                notification => {
                    const data = notification.getData();
                    const isClicked = data.userInteraction === 1;

                    if (isClicked) {
                        notificationHandler(data?.data, true);
                    }
                }
            );
        }

        // TODO: store.dispatch(getUnseenNotifications() as any);
    }

    // Check whether an initial notification is available
    public wasOpenedByNotification() {
        messaging()
            .getInitialNotification()
            .then(message => {
                // app was opened by a notification
                if (message) {
                    notificationHandler((message as any).data, true);
                }
            });
    }

    public removeListeners() {
        typeof this.messageListener === 'function' && this.messageListener();

        typeof this.messageBackgrounListener === 'function' && this.messageBackgrounListener();

        typeof this.messageNotificationOpenedAppListener === 'function' &&
            this.messageNotificationOpenedAppListener();

        typeof this.tokenRefreshListener === 'function' && this.tokenRefreshListener();

        typeof this.localNotificationIOSListener === 'function' &&
            this.localNotificationIOSListener();
    }
}

export const Notifications = new NotificationService();

'''
'''--- src/core/messaging/types.ts ---
// TODO: refactor this, too many types
export enum NotificationType {
    TRANSACTION_UPDATE = 'TRANSACTION_UPDATE',
    TRANSACTION = 'TRANSACTION',
    INFO = 'INFO',

    MOONLET_TRANSACTION = 'MOONLET_TRANSACTION',
    MOONLET_SIGN_MESSAGE = 'MOONLET_SIGN_MESSAGE',
    MOONLET_TRANSFER = 'MOONLET_TRANSFER'
}

export enum SilentMessageType {
    WALLET_CONNECT = 'WALLET_CONNECT',
    TRANSACTION = 'TRANSACTION'
}

export interface INotificationPayload {
    type: NotificationType;
    data: any;
}

export interface INotificationInfo extends INotificationPayload {
    openedByNotification: boolean;
}

export interface ISilentMessage {
    type: SilentMessageType;
    data: any;
}

export enum PushNotifTokenType {
    FCM = 'FCM',
    APN = 'APN'
}

'''
'''--- src/core/secure/encrypt/__tests__/encrypt.test.ts ---
import { hash, encrypt, decrypt } from '../encrypt';

describe('encrypt', () => {
    test('generate hash', async () => {
        expect(await hash('some password')).toBe('hashedkey');
    });
    test('encrypt', async () => {
        expect(await encrypt('data', 'hash')).toBe('randomKey!encrypted');
    });
    test('decrypt', async () => {
        expect(await decrypt('randomKey!encrypted', 'hash')).toBe('data');
    });
});

'''
'''--- src/core/secure/encrypt/consts.ts ---
export const SALT = 'moonlet-app';
export const HASH_LENGTH = 256;
export const HASH_COST = 5000;
export const IV_LENGTH = 16;
export const SEPARATOR = '!';
export const ITERATIONS = 1000;

'''
'''--- src/core/secure/encrypt/encrypt.ts ---
import { NativeModules } from 'react-native';
import { SALT, HASH_COST, HASH_LENGTH, SEPARATOR, ITERATIONS, IV_LENGTH } from './consts';
import { captureException } from '@sentry/react-native';
import pbkdf2 from 'crypto-js/pbkdf2';
import { v4 as uuidv4 } from 'uuid';
import CryptoJS from 'crypto-js';
const Aes = NativeModules.Aes;

export const hash = async (text: string, salt: string = SALT): Promise<string> =>
    Aes.pbkdf2(text, salt, HASH_COST, HASH_LENGTH);

export const generateRandomEncryptionKey = async (): Promise<string> => {
    try {
        const randomKey = await Aes.randomKey(IV_LENGTH);
        const encryptionKey = await Aes.pbkdf2(randomKey, SALT, HASH_COST, HASH_LENGTH);

        if (encryptionKey) {
            return encryptionKey;
        } else {
            throw new Error(
                'generateRandomEncryptionKey: generated encryption key evaluates to falsy. (fallback to js implementation to avoid crash)'
            );
        }
    } catch (err) {
        captureException(err);

        return pbkdf2(
            uuidv4(),
            SALT,
            { keySize: 512 / 32, iterations: ITERATIONS },
            HASH_LENGTH
        ).toString(CryptoJS.enc.Base64);
    }
};

// aes encrypt
export const encrypt = async (data: string, key: string): Promise<string> => {
    return Aes.randomKey(IV_LENGTH).then((iv: string) =>
        Aes.encrypt(data, key, iv).then((cipher: string) => `${iv}${SEPARATOR}${cipher}`)
    );
};

// aes decrypt
export const decrypt = async (input: string, key: string): Promise<string> => {
    const [iv, encryptedData] = input.split(SEPARATOR);
    return Aes.decrypt(encryptedData, key, iv);
};

'''
'''--- src/core/secure/encrypt/encrypt.web.ts ---
import AES from 'crypto-js/aes';
import pbkdf2 from 'crypto-js/pbkdf2';
import { v4 as uuidv4 } from 'uuid';
import CryptoJS from 'crypto-js';
import { SALT, HASH_COST, HASH_LENGTH, ITERATIONS, IV_LENGTH } from './consts';

export const hash = async (text: string, salt: string = SALT): Promise<string> => {
    return pbkdf2(text, salt, HASH_COST, HASH_LENGTH).toString(CryptoJS.enc.Utf8);
};

export const generateRandomEncryptionKey = async (): Promise<string> => {
    return pbkdf2(
        uuidv4(),
        SALT,
        { keySize: 512 / 32, iterations: ITERATIONS },
        HASH_LENGTH
    ).toString(CryptoJS.enc.Base64);
};

// AES Encrypt
export const encrypt = async (data: string, key: string): Promise<string> => {
    return AES.encrypt(data, key, { IV_LENGTH }).toString();
};

// AES Decrypt
export const decrypt = async (input: string, key: string): Promise<string> => {
    return AES.decrypt(input, key).toString(CryptoJS.enc.Utf8);
};

'''
'''--- src/core/secure/keychain/__tests__/keychain.test.ts ---
import { setPinCode, getPinCode, generateEncryptionKey, getEncryptionKey } from '../keychain';
import { NativeModules } from 'react-native';

jest.mock('@react-native-community/async-storage', () => ({
    setItem: jest.fn(() => {
        return new Promise((resolve, reject) => {
            resolve(null);
        });
    }),

    getItem: jest.fn(() => {
        return new Promise((resolve, reject) => {
            resolve(JSON.stringify(''));
        });
    })
}));

describe('keychain', () => {
    test('set password', async () => {
        // await generateEncryptionKey('000000');
        // const keychainPassword = await getEncryptionKey('000000');
        expect('000000').toBe('000000');
    });
});

'''
'''--- src/core/secure/keychain/keychain.ts ---
import * as Keychain from 'react-native-keychain';
import { generateRandomEncryptionKey, hash } from '../encrypt/encrypt';
import { storeEncrypted, readEncrypted, deleteFromStorage } from '../storage/storage';
import DeviceInfo from 'react-native-device-info';
import { v4 as uuidv4 } from 'uuid';
import { Platform } from 'react-native';
import {
    addBreadcrumb as SentryAddBreadcrumb,
    captureException as SentryCaptureException
} from '@sentry/react-native';

const defaultOptions = {
    serviceEncryption: 'com.moonlet.encryption',
    usernameEncryption: 'moonlet-encryption-key',
    usernamePin: 'moonlet-pin',
    servicePin: 'com.moonlet.pin'
};

export const KEY_PIN_SAMPLE = 'moonletPinSample';

export const iosClearKeychainOnInstall = async (options?: { walletPublicKey?: string }) => {
    if (Platform.OS === 'ios') {
        const Settings = require('react-native').Settings;
        if (!Settings.get('appIsInstalled')) {
            if (options?.walletPublicKey) {
                await clearWalletCredentialsKey(options.walletPublicKey);
            }
            clearPinCode();
            await clearEncryptionKey();
            Settings.set({
                appIsInstalled: true
            });
        }
    }
};

export const generateEncryptionKey = async (pinCode: string): Promise<string> => {
    await setBaseEncryptionKey();
    const encryptionKey = await getEncryptionKey(pinCode);
    await storeEncrypted(uuidv4(), KEY_PIN_SAMPLE, encryptionKey);
    return encryptionKey;
};

export const setBaseEncryptionKey = async () => {
    try {
        const encryptionKey = await generateRandomEncryptionKey();
        await Keychain.setGenericPassword(defaultOptions.usernameEncryption, encryptionKey, {
            service: defaultOptions.serviceEncryption,
            storage: Keychain.STORAGE_TYPE.AES,
            accessible: Keychain.ACCESSIBLE.WHEN_UNLOCKED_THIS_DEVICE_ONLY,
            securityLevel: Keychain.SECURITY_LEVEL.SECURE_HARDWARE,
            rules: Keychain.SECURITY_RULES.AUTOMATIC_UPGRADE
        });
    } catch (error) {
        SentryAddBreadcrumb({
            message: JSON.stringify({
                error
            })
        });

        SentryCaptureException(new Error(`Failed to set base encryption key, ${error?.message}`));
    }
};

export const getBaseEncryptionKey = async () => {
    await iosClearKeychainOnInstall();
    let password = null;
    try {
        // Retrieve the credentials
        const credentials = await Keychain.getGenericPassword({
            service: defaultOptions.serviceEncryption
        });
        if (credentials) {
            password = credentials.password;
        } else {
            throw new Error(
                'getBaseEncryptionKey: Keychain.getGenericPassword returns falsy value'
            );
        }
    } catch (error) {
        SentryAddBreadcrumb({
            message: JSON.stringify({
                error
            })
        });

        SentryCaptureException(new Error(`Failed to get base encryption key, ${error?.message}`));
    }

    return password;
};

export const clearEncryptionKey = async () => {
    try {
        deleteFromStorage(KEY_PIN_SAMPLE);
        await Keychain.resetGenericPassword({ service: defaultOptions.serviceEncryption });
    } catch (error) {
        SentryAddBreadcrumb({
            message: JSON.stringify({
                error
            })
        });

        SentryCaptureException(new Error(`Failed to clear encryption key, ${error?.message}`));
    }
};

export const getEncryptionKey = async (pinCode: string) => {
    let password = await getBaseEncryptionKey();
    password = await hash(password || '', pinCode);
    return password;
};

export const verifyPinCode = async (pinCode: string): Promise<boolean> => {
    try {
        const encryptionKey = await getEncryptionKey(pinCode);
        await readEncrypted(KEY_PIN_SAMPLE, encryptionKey);
        return true;
    } catch (err) {
        return false;
    }
};

export const setPinCode = async (pinCode: string) => {
    try {
        await clearPinCode();
        await Keychain.setGenericPassword(defaultOptions.usernamePin, pinCode, {
            service: defaultOptions.servicePin,
            accessible: Keychain.ACCESSIBLE.WHEN_UNLOCKED_THIS_DEVICE_ONLY,
            securityLevel: Keychain.SECURITY_LEVEL.SECURE_HARDWARE,
            authenticationType: Keychain.AUTHENTICATION_TYPE.BIOMETRICS,
            storage: Keychain.STORAGE_TYPE.RSA,
            accessControl: Keychain.ACCESS_CONTROL.BIOMETRY_CURRENT_SET,
            rules: Keychain.SECURITY_RULES.AUTOMATIC_UPGRADE
        });
    } catch (error) {
        SentryAddBreadcrumb({
            message: JSON.stringify({
                error
            })
        });

        SentryCaptureException(new Error(`Failed to set pin, ${error?.message}`));
    }
};

export const getPinCode = async () => {
    await iosClearKeychainOnInstall();
    let password = null;
    try {
        // Retrieve the credentials
        const credentials = await Keychain.getGenericPassword({
            service: defaultOptions.servicePin,
            storage: Keychain.STORAGE_TYPE.RSA
        });
        if (credentials) {
            password = credentials.password;
        }
    } catch (error) {
        if (error.message.indexOf('Authentication failed') >= 0) {
            if (DeviceInfo.getManufacturerSync() === 'OnePlus') {
                return Promise.reject('FAILED');
            }
            return getPinCode();
        } else if (
            error.message.indexOf('Cancel') >= 0 ||
            error.message.indexOf('User canceled the operation.') >= 0
        ) {
            return Promise.reject('CANCELED');
        } else if (error.message.indexOf('Too many attempts') >= 0) {
            return Promise.reject('TOO_MANY_ATTEMPTS');
        } else {
            SentryCaptureException(new Error(JSON.stringify(error)));
            return Promise.reject(error.message);
        }
    }

    return password;
};

export const clearPinCode = async () => {
    try {
        await Keychain.resetGenericPassword({ service: defaultOptions.servicePin });
    } catch (error) {
        SentryAddBreadcrumb({
            message: JSON.stringify({
                error
            })
        });

        SentryCaptureException(new Error(`Failed to clean pin code, ${error?.message}`));
    }
};

export const setWalletCredentialsKey = async (
    walletPublicKey: string,
    privateKey: string
): Promise<void> => {
    try {
        await Keychain.setGenericPassword(`${walletPublicKey}-username`, privateKey, {
            service: walletPublicKey,
            storage: Keychain.STORAGE_TYPE.AES,
            accessible: Keychain.ACCESSIBLE.WHEN_UNLOCKED_THIS_DEVICE_ONLY,
            securityLevel: Keychain.SECURITY_LEVEL.SECURE_HARDWARE,
            rules: Keychain.SECURITY_RULES.AUTOMATIC_UPGRADE
        });
    } catch (error) {
        SentryAddBreadcrumb({
            message: JSON.stringify({
                error
            })
        });

        SentryCaptureException(
            new Error(`Failed to set wallet credentials key, ${error?.message}`)
        );

        throw new Error(error);
    }
};

export const getWalletCredentialsKey = async (walletPublicKey: string): Promise<string> => {
    await iosClearKeychainOnInstall({ walletPublicKey });
    let password = null;
    try {
        // Retrieve the credentials
        const credentials = await Keychain.getGenericPassword({
            service: walletPublicKey
        });

        if (credentials) {
            password = credentials.password;
        } else {
            throw new Error(
                'getWalletCredentialsKey: Keychain.getGenericPassword returns falsy value'
            );
        }
    } catch (error) {
        SentryAddBreadcrumb({
            message: JSON.stringify({
                error
            })
        });

        SentryCaptureException(
            new Error(`Failed to get wallet credentials key, ${error?.message}`)
        );
    }

    return password;
};

export const clearWalletCredentialsKey = async (walletPublicKey: string) => {
    try {
        await Keychain.resetGenericPassword({ service: walletPublicKey });
    } catch (error) {
        SentryAddBreadcrumb({
            message: JSON.stringify({
                error
            })
        });

        SentryCaptureException(
            new Error(`Failed to clear wallet credentials key, ${error?.message}`)
        );
    }
};

'''
'''--- src/core/secure/keychain/keychain.web.ts ---
export const setBaseEncryptionKey = async (password: string, shouldEncrypt: boolean = true) => {
    return Promise.resolve('');
};

export const generateEncryptionKey = async (pinCode: string): Promise<string> => {
    return Promise.resolve('');
};

export const getEncryptionKey = async (pinCode: string) => {
    return Promise.resolve('');
};

export const clearPinCode = async () => {
    return Promise.resolve('');
};

export const getBaseEncryptionKey = async () => {
    return Promise.resolve('');
};

export const clearEncryptionKey = async () => {
    //
};

export const verifyPinCode = async (pinCode: string): Promise<boolean> => {
    return true;
};

export const getPinCode = async () => {
    return Promise.resolve('');
};

export const setPinCode = async (pinCode: string) => {
    //
};

export const setWalletCredentialsKey = async (
    walletPublicKey: string,
    privateKey: string
): Promise<void> => {
    //
};

export const getWalletCredentialsKey = async (walletPublicKey: string): Promise<string> => {
    return Promise.resolve('');
};

'''
'''--- src/core/secure/storage/consts.ts ---
export const KEY_PREFIX = 'mw-';

'''
'''--- src/core/secure/storage/storage.ts ---
import AsyncStorage from '@react-native-community/async-storage';
import { encrypt, decrypt } from '../encrypt/encrypt';
import { KEY_PREFIX } from './consts';
import { captureException as SentryCaptureException } from '@sentry/react-native';

export const storeEncrypted = async (data: string, key: string, hash: string): Promise<void> => {
    const encryptedData = await encrypt(data, hash);
    try {
        await AsyncStorage.setItem(`${KEY_PREFIX}${key}`, encryptedData);
    } catch (err) {
        SentryCaptureException(new Error(JSON.stringify(err)));
        return Promise.reject(err);
    }
};

export const readEncrypted = async (key: string, hash: string): Promise<string> => {
    try {
        const encryptedData = await AsyncStorage.getItem(`${KEY_PREFIX}${key}`);
        if (encryptedData !== null) {
            const data = await decrypt(encryptedData, hash);
            return data;
        }
        return Promise.reject(`No data in storage for key ${KEY_PREFIX}${key}`);
    } catch (err) {
        SentryCaptureException(new Error(JSON.stringify(err)));
        return Promise.reject(err);
    }
};

export const deleteFromStorage = async (key: string): Promise<void> => {
    try {
        await AsyncStorage.removeItem(`${KEY_PREFIX}${key}`);
    } catch (err) {
        SentryCaptureException(new Error(JSON.stringify(err)));
        return Promise.reject(err);
    }
};

export const storeItemToStorage = async (data: string, key: string): Promise<void> => {
    try {
        await AsyncStorage.setItem(`${KEY_PREFIX}${key}`, data);
    } catch (err) {
        SentryCaptureException(new Error(JSON.stringify(err)));
        return Promise.reject(err);
    }
};

export const getItemFromStorage = async (key: string): Promise<string> => {
    try {
        return Promise.resolve(await AsyncStorage.getItem(`${KEY_PREFIX}${key}`));
    } catch (err) {
        SentryCaptureException(new Error(JSON.stringify(err)));
        return Promise.reject(err);
    }
};

'''
'''--- src/core/secure/storage/storage.web-wallet.ts ---
import { KEY_PREFIX } from './consts';
import * as Sentry from '@sentry/browser';

// TODO: encrypt this
export const storeEncrypted = async (data: string, key: string, hash: string): Promise<void> => {
    try {
        localStorage.setItem(`${KEY_PREFIX}${key}`, data);
    } catch (err) {
        Sentry.captureException(new Error(JSON.stringify(err)));
        return Promise.reject(err);
    }
};

// TODO: decrypt this
export const readEncrypted = async (key: string, hash: string): Promise<string> => {
    try {
        const fullKey = `${KEY_PREFIX}${key}`;
        const encryptedData = localStorage.getItem(fullKey);
        if (encryptedData) {
            return encryptedData;
        } else {
            Promise.reject(`No data in storage for key ${KEY_PREFIX}${key}`);
        }
    } catch (err) {
        Sentry.captureException(new Error(JSON.stringify(err)));
        return Promise.reject(err);
    }
};

export const deleteFromStorage = async (key: string): Promise<void> => {
    try {
        localStorage.removeItem(`${KEY_PREFIX}${key}`);
    } catch (err) {
        Sentry.captureException(new Error(JSON.stringify(err)));
        return Promise.reject(err);
    }
};

export const storeItemToStorage = async (data: string, key: string): Promise<void> => {
    try {
        localStorage.setItem(`${KEY_PREFIX}${key}`, data);
    } catch (err) {
        Sentry.captureException(new Error(JSON.stringify(err)));
        return Promise.reject(err);
    }
};

export const getItemFromStorage = async (key: string): Promise<string> => {
    try {
        const fullKey = `${KEY_PREFIX}${key}`;
        const data = localStorage.getItem(fullKey);
        if (data) {
            return Promise.resolve(data);
        } else {
            Promise.reject(`No data in storage for key ${KEY_PREFIX}${key}`);
        }
    } catch (err) {
        Sentry.captureException(new Error(JSON.stringify(err)));
        return Promise.reject(err);
    }
};

'''
'''--- src/core/theme/itheme.ts ---
export interface ITheme {
    dark: boolean;
    shadowGradient: string[];

    fontSize: {
        small: number;
        regular: number;
        large: number;
    };

    colors: {
        accent: string;
        accentSecondary: string;

        text: string;
        textSecondary: string;
        textTertiary: string;

        positive: string;
        positiveSecondary: string;

        negative: string;
        error: string;
        warning: string;

        cardBackground: string;
        appBackground: string;
        bottomSheetBackground: string;
        overlayBackground: string;

        settingsDivider: string;
        inputBackground: string;
        disabledButton: string;

        gradientLight: string;
        gradientDark: string;

        labelUndelegate: string;
        labelRedelegate: string;
        labelReward: string;

        black: string;
        white: string;
    };
}

'''
'''--- src/core/theme/theme-contex.ts ---
import React from 'react';
import { ITheme } from './itheme';
import { darkTheme } from '../../styles/themes/dark-theme';

export const ThemeContext = React.createContext<ITheme>(darkTheme);

'''
'''--- src/core/theme/themes.ts ---
export enum Theme {
    dark = 'dark',
    light = 'light'
}

'''
'''--- src/core/universal-links/index.ts ---
import { Linking } from 'react-native';
import { URL, URLSearchParams } from 'react-native-url-polyfill';
import { captureException as SentryCaptureException } from '@sentry/react-native';
import { IReduxState } from '../../redux/state';
import { NavigationService } from '../../navigation/navigation-service';
import { getChainId } from '../../redux/preferences/selectors';
import { setSelectedBlockchain } from '../../redux/wallets/actions';
import { Blockchain } from '../blockchain/types';
import { getNrPendingTransactions, getSelectedAccount } from '../../redux/wallets/selectors';
import { ITokenState } from '../../redux/wallets/state';
import { store } from '../../redux/config';

export class UniversalLinksService {
    private onLinkListener = null;
    private getState: () => IReduxState = () => ({} as any);

    private handlers = {
        '/stake': params => {
            // TODO: implement later on
        },
        '/:blockchain/stake': params => {
            this.blockchainStake(params);
        },
        '/:blockchain/:token/validator/:validatorAddress': params => {
            this.navigateValidatorAddress(params);
        },
        '/:blockchain/:token/stake': params => {
            this.blockchainStake(params);
        },
        '/:blockchain/:token/stake/:validatorAddress': params => {
            this.stakeValidatorAddress(params);
        }
    };

    private navigateValidatorAddress(params: any) {
        const blockchain = String(params?.blockchain)?.toUpperCase() as Blockchain;
        const validatorAddress = params?.validatorAddress;
        const tokenSymbol = String(params?.token)?.toUpperCase();

        if (blockchain && validatorAddress && tokenSymbol) {
            // make sure `blockchain` is selected
            store.dispatch(setSelectedBlockchain(blockchain));

            const chainId = getChainId(this.getState(), blockchain);

            const selectedAccount = getSelectedAccount(this.getState());

            if (!selectedAccount) {
                SentryCaptureException(
                    new Error(
                        `Dynamic Links - no selected account, no wallet, blockchain: ${blockchain}, tokenSymbol: ${tokenSymbol}, validatorAddress: ${validatorAddress}`
                    )
                );
                return;
            }

            const token: ITokenState = selectedAccount.tokens[chainId][tokenSymbol];

            NavigationService.popToTop();
            NavigationService.navigate('Validator', {
                blockchain,
                undefined, // validator
                accountIndex: selectedAccount.index,
                token,
                canPerformAction: !getNrPendingTransactions(this.getState()), // hasPendingTransactions
                options: {
                    validatorAddress,
                    tokenSymbol
                }
            });
        } else {
            SentryCaptureException(
                new Error(`Dynamic Links - navigateValidatorAddress, invalid params: ${params}`)
            );
        }
    }

    private stakeValidatorAddress(params: any) {
        const blockchain = String(params?.blockchain)?.toUpperCase() as Blockchain;
        const validatorAddress = params?.validatorAddress;

        if (blockchain && validatorAddress) {
            // make sure `blockchain` is selected
            store.dispatch(setSelectedBlockchain(blockchain));

            NavigationService.popToTop();
            NavigationService.navigate('SmartScreen', {
                context: {
                    screen: 'StakeNow',
                    step:
                        blockchain === Blockchain.SOLANA
                            ? 'SelectStakeAccount'
                            : 'StakeNowEnterAmountValidators',
                    key:
                        blockchain === Blockchain.SOLANA
                            ? 'select-stake-account'
                            : 'stake-now-enter-amount-validators',
                    params: {
                        validatorId: validatorAddress
                    }
                },
                navigationOptions: {
                    title: 'Stake now'
                },
                newFlow: true
            });
        } else {
            SentryCaptureException(
                new Error(`Dynamic Links - stakeValidatorAddress, invalid params: ${params}`)
            );
        }
    }

    private blockchainStake(params: any) {
        const blockchain = String(params?.blockchain)?.toUpperCase() as Blockchain;

        if (blockchain) {
            // make sure `blockchain` is selected
            store.dispatch(setSelectedBlockchain(blockchain));

            NavigationService.popToTop();
            NavigationService.navigate('SmartScreen', {
                context: {
                    screen: 'StakeNow',
                    step: 'StakeSelectValidator',
                    key: 'stake-now-select-validator'
                },
                navigationOptions: {
                    title: 'Stake now'
                },
                newFlow: true
            });
        } else {
            SentryCaptureException(
                new Error(`Dynamic Links - blockchainStake, invalid params: ${params}`)
            );
        }
    }

    public async configure(getState: () => IReduxState) {
        this.getState = getState;

        this.onLinkListener = Linking.addEventListener('url', ({ url }) => {
            this.handleDynamicLink(url);
        });

        Linking.getInitialURL().then(url => {
            this.handleDynamicLink(url);
        });
    }

    public async handleDynamicLink(url: string) {
        url &&
            this.processUrl(url, this.handlers, {
                protocol: ['https:'],
                host: [
                    'wallet.moonlet.app',
                    'wallet.moonlet.dev',

                    'moonlet.io',
                    'moonlet.xyz',
                    'moonletwallet.com',
                    'moonlet.app',
                    'moonlet.link',

                    'fire.moonlet.dev'
                ]
            });
    }

    public removeListeners() {
        typeof this.onLinkListener === 'function' && this.onLinkListener();
    }

    private pathPatternToRegexp(pathPattern: string) {
        let exp = '^';

        const pathParts = pathPattern.split('/').filter(Boolean);
        const capturingGroups = [];
        for (const part of pathParts) {
            exp += '\\/';
            if (part.indexOf(':') === 0) {
                exp += '([^\\/]*)';
                capturingGroups.push(part.replace(/^:/, ''));
            } else {
                exp += part;
            }
        }

        exp += '$';
        return {
            regexp: new RegExp(exp),
            capturingGroups
        };
    }

    private parsePath(path: string, pathPatternString: string) {
        const pathPattern = this.pathPatternToRegexp(pathPatternString);
        const match = path.match(pathPattern.regexp);

        if (match) {
            const params = {};
            for (let i = 0; i < pathPattern.capturingGroups.length; i++) {
                params[pathPattern.capturingGroups[i]] = match[i + 1];
            }
            return params;
        }

        return null;
    }

    private processPath(path: string, handlers: any, urlParams = {}) {
        const pathsPatterns = Object.keys(handlers);
        for (const pathPattern of pathsPatterns) {
            if (typeof handlers[pathPattern] === 'function') {
                const params = this.parsePath(path, pathPattern);
                if (params) {
                    return handlers[pathPattern]({
                        ...urlParams,
                        ...params
                    });
                }
            }
        }
    }

    private paramsToObject(entries: any) {
        const result = {};
        for (const [key, value] of entries) {
            // each 'entry' is a [key, value] tupple
            result[key] = value;
        }
        return result;
    }

    private processUrl(url: string, pathHandlers: any = this.handlers, whitelist = {}) {
        const u = new URL(url);

        for (const key of Object.keys(whitelist)) {
            if (u && typeof u[key] === 'string' && whitelist[key].indexOf(u[key]) < 0) {
                SentryCaptureException(
                    new Error(
                        JSON.stringify(
                            `whitelist not matched ${key}=${u[key]} not in whitelist: ${
                                typeof whitelist[key] === 'string'
                                    ? whitelist[key]
                                    : whitelist[key].join(', ')
                            }`
                        )
                    )
                );
                return null;
            }
        }

        const path = u?.pathname;

        const searchParams = new URLSearchParams(url);

        return this.processPath(path, pathHandlers, this.paramsToObject(searchParams.entries()));
    }
}

export const UniversalLinks = new UniversalLinksService();

'''
'''--- src/core/utils/__tests__/format-number.test.ts ---
import { formatNumber } from '../format-number';
import { Platform } from 'react-native';

const tests = [
    {
        amount: 1000.3243132,
        result: '1,000.32'
    },
    {
        amount: 0.16,
        result: '$0.16',
        options: {
            currency: 'USD'
        }
    },
    {
        amount: 0.00000016312332,
        result: '0.00000016 ATOM',
        options: {
            currency: 'ATOM'
        }
    },
    {
        amount: 0.1,
        result: '0.100 ETH',
        options: {
            minimumFractionDigits: 3,
            maximumFractionDigits: 3,
            currency: 'ETH'
        }
    }
];

describe('format number function', () => {
    tests.forEach(t => {
        it('should format number correctly on iOS', () => {
            expect(formatNumber(t.amount, t.options)).toBe(t.result);
        });

        it('should format number correctly on Android', () => {
            Platform.OS = 'android';
            expect(formatNumber(t.amount, t.options)).toBe(t.result);
        });

        it('should format number correctly on web', () => {
            Platform.OS = 'web';
            expect(formatNumber(t.amount, t.options)).toBe(t.result);
        });
    });
});

'''
'''--- src/core/utils/__tests__/http-client.test.ts ---
import { HttpClient } from '../http-client';

describe('RPC Client', () => {
    describe('call()', () => {
        test('all params ok', async () => {
            const http = new HttpClient('URL');

            // @ts-ignore
            global.fetch = jest.fn(() =>
                Promise.resolve({
                    json: () => Promise.resolve({ data: 'data' })
                })
            );
            expect(await http.jsonRpc('METHOD', ['P1', 'P2'])).toEqual({
                data: 'data'
            });

            // @ts-ignore
            expect(global.fetch).toHaveBeenCalledWith('URL', {
                method: 'POST',
                headers: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json'
                },
                body: '{"jsonrpc":"2.0","id":0,"method":"METHOD","params":["P1","P2"]}'
            });
        });

        test('no params', async () => {
            const http = new HttpClient('URL');

            // @ts-ignore
            global.fetch = jest.fn(() =>
                Promise.resolve({
                    json: () => Promise.resolve({ data: 'data' })
                })
            );
            expect(await http.jsonRpc('METHOD')).toEqual({
                data: 'data'
            });

            // @ts-ignore
            expect(global.fetch).toHaveBeenCalledWith('URL', {
                method: 'POST',
                headers: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json'
                },
                body: '{"jsonrpc":"2.0","id":0,"method":"METHOD","params":[]}'
            });
        });

        test('error', async () => {
            const http = new HttpClient('URL');

            // @ts-ignore
            global.fetch = jest.fn(() => Promise.reject('ERROR'));
            try {
                // @ts-ignore
                await http.jsonRpc('METHOD', 'P1');
            } catch (e) {
                expect(e).toBe('ERROR');
            }

            // @ts-ignore
            expect(global.fetch).toHaveBeenCalledWith('URL', {
                method: 'POST',
                headers: {
                    Accept: 'application/json',
                    'Content-Type': 'application/json'
                },
                body: '{"jsonrpc":"2.0","id":0,"method":"METHOD","params":["P1"]}'
            });
            expect.assertions(2);
        });
    });
});

'''
'''--- src/core/utils/__tests__/smart-connect.ts ---
import { smartConnect } from '../smart-connect';

export default describe('Core Util Smart connect', () => {
    test('works corectly', () => {
        const mocks = [jest.fn(a => a + '0'), jest.fn(a => a + '1'), jest.fn(a => a + '2')];
        expect(smartConnect('C', mocks)).toBe('C012');
        expect(smartConnect('C')).toBe('C');
    });
});

'''
'''--- src/core/utils/api-client/api-client.ts ---
import { HttpClient } from '../http-client';
import CONFIG from '../../../config';
import { NotificationsApiClient } from './notifications';
import { ValidatorsApiClient } from './validators';
import { ConfigsApiClient } from './configs';
import { GovernanceApiClient } from './governance';

export class ApiClient {
    public http: HttpClient;
    public notifications: NotificationsApiClient;
    public validators: ValidatorsApiClient;
    public configs: ConfigsApiClient;
    public governance: GovernanceApiClient;

    constructor() {
        this.http = new HttpClient(CONFIG.walletApiBaseUrl);
        this.notifications = new NotificationsApiClient(this);
        this.validators = new ValidatorsApiClient(this);
        this.configs = new ConfigsApiClient(this);
        this.governance = new GovernanceApiClient(this);
    }
}

'''
'''--- src/core/utils/api-client/configs.ts ---
import { ApiClient } from './api-client';
import {
    addBreadcrumb as SentryAddBreadcrumb,
    captureException as SentryCaptureException
} from '@sentry/react-native';

export class ConfigsApiClient {
    constructor(private apiClient: ApiClient) {}

    public async getConfigs(keys: string[]) {
        try {
            return this.apiClient.http.post('/configs', {
                keys
            });
        } catch (error) {
            SentryAddBreadcrumb({
                message: JSON.stringify({
                    data: {
                        keys
                    },
                    error,
                    code: error?.code
                })
            });

            SentryCaptureException(new Error(`Cannot get api configs, ${error?.message}`));

            return error;
        }
    }
}

'''
'''--- src/core/utils/api-client/governance.ts ---
import {
    addBreadcrumb as SentryAddBreadcrumb,
    captureException as SentryCaptureException
} from '@sentry/react-native';
import { Blockchain } from '../../blockchain/types';
import { ApiClient } from './api-client';

export class GovernanceApiClient {
    constructor(private apiClient: ApiClient) {}

    public async sendVote(
        payload: {
            address: string;
            msg: string;
            sig: {
                signature: string;
                publicKey: string;
                message: string;
            };
        },
        authorIpfsHash: string,
        user: {
            blockchain: Blockchain;
            chainId: string;
        }
    ) {
        try {
            const response = await this.apiClient.http.post('/governance/sendVote', {
                ...payload,
                authorIpfsHash,
                user
            });

            return response?.result;
        } catch (error) {
            SentryAddBreadcrumb({
                message: JSON.stringify({
                    data: {
                        ...payload,
                        authorIpfsHash,
                        user
                    },
                    error
                })
            });

            SentryCaptureException(new Error(`Cannot send governance vote, ${error?.message}`));
        }
    }
}

'''
'''--- src/core/utils/api-client/notifications.ts ---
import {
    captureException as SentryCaptureException,
    addBreadcrumb as SentryAddBreadcrumb
} from '@sentry/react-native';
import { getWalletCredentialsKey } from '../../secure/keychain/keychain';
import {
    getCurrentTimestampNTP,
    getWalletApiDomain,
    getSignature,
    removeDuplicateObjectsFromArray
} from './utils';
import { PushNotifTokenType } from '../../messaging/types';
import { Notifications } from '../../messaging/notifications/notifications';
import { IWalletState } from '../../../redux/wallets/state';
import { getTokenConfig } from '../../../redux/tokens/static-selectors';
import { ApiClient } from './api-client';
import { Blockchain } from '../../blockchain/types';

export class NotificationsApiClient {
    constructor(private apiClient: ApiClient) {}

    /**
     * Fetch notifications
     * @param page
     *
     * TODO: When fetching multiple pages of notifications, maybe we should find a way to cache those notifications
     *       in order to minimise the calls to our api
     */
    public async fetchNotifications(
        walletPublicKeys: string[],
        blockchainNetworks: { blockchain: Blockchain; chainId: string }[],
        page?: number
    ) {
        try {
            const data = {
                walletPublicKeys: [],
                blockchainNetworks,
                page: page || 1
            };

            const timestamp = await getCurrentTimestampNTP();
            const domain = getWalletApiDomain();

            for (const walletPublicKey of walletPublicKeys) {
                const walletPrivateKey = await getWalletCredentialsKey(walletPublicKey);

                const walletData: any = {
                    walletPublicKey,
                    timestamp,
                    domain
                };

                const signature = getSignature(walletData, walletPrivateKey, walletPublicKey);
                walletData.signature = signature;

                data.walletPublicKeys.push(walletData);
            }

            const response = await this.apiClient.http.post('/notifications', data);

            if (response?.result?.notifications) {
                return response.result.notifications;
            }
        } catch (err) {
            SentryAddBreadcrumb({
                message: JSON.stringify({
                    data: {
                        blockchainNetworks
                    },
                    err
                })
            });

            SentryCaptureException(new Error(JSON.stringify(err)));
        }
    }

    /**
     * Register Push Notification Token
     * @param walletPublicKey
     * @param deviceId
     */
    public async registerPushNotifToken(walletPublicKey: string, deviceId: string) {
        try {
            const walletPrivateKey = await getWalletCredentialsKey(walletPublicKey);
            if (walletPrivateKey) {
                const data: any = {
                    walletPublicKey,
                    timestamp: await getCurrentTimestampNTP(),
                    domain: getWalletApiDomain(),

                    deviceId,
                    token: {
                        type: PushNotifTokenType.FCM,
                        token: await Notifications.getToken()
                    }
                };

                const signature = getSignature(data, walletPrivateKey, walletPublicKey);
                data.signature = signature;

                const response = await this.apiClient.http.post(
                    '/notifications/registerToken',
                    data
                );

                if (response?.result?.pushNotifToken) {
                    return response.result.pushNotifToken;
                }
            }
        } catch (err) {
            SentryCaptureException(new Error(JSON.stringify(err)));
        }
    }

    /**
     * Register Notification Settings
     * @param walletPublicKey
     * @param wallet
     * @param deviceId
     */
    public async registerNotificationSettings(wallet: IWalletState, deviceId: string) {
        let errorHandling;
        try {
            const walletPublicKey = wallet.walletPublicKey;
            const walletPrivateKey = await getWalletCredentialsKey(walletPublicKey);

            errorHandling = {
                ...errorHandling,
                deviceId
            };

            if (!walletPublicKey)
                errorHandling = {
                    ...errorHandling,
                    walletPublicKey: 'not available'
                };

            if (walletPrivateKey) {
                const myAccounts = [];

                for (const account of wallet.accounts) {
                    const myTokens = [];

                    for (const chainId of Object.keys(account.tokens)) {
                        for (const symbol of Object.keys(account.tokens[chainId])) {
                            const isTokenActive = account.tokens[chainId][symbol]?.active === true;

                            if (isTokenActive) {
                                const tokenConfig = getTokenConfig(account.blockchain, symbol);

                                myTokens.push({
                                    symbol,
                                    contractAddress: tokenConfig?.contractAddress
                                });
                            }
                        }
                    }

                    myAccounts.push({
                        blockchain: account.blockchain,
                        address: account.address.toLocaleLowerCase(),
                        tokens: removeDuplicateObjectsFromArray(myTokens)
                    });
                }

                if (myAccounts.length === 0)
                    errorHandling = {
                        ...errorHandling,
                        myAccounts: 'no accounts'
                    };

                const data: any = {
                    walletPublicKey,
                    timestamp: await getCurrentTimestampNTP(),
                    domain: getWalletApiDomain(),

                    deviceId,
                    accounts: myAccounts
                };

                const signature = getSignature(data, walletPrivateKey, walletPublicKey);
                data.signature = signature;

                if (!signature)
                    errorHandling = {
                        ...errorHandling,
                        signature: 'not available'
                    };

                await this.apiClient.http.post('/notifications/registerSettings', data);
            } else
                errorHandling = {
                    ...errorHandling,
                    walletPrivateKey: 'not available'
                };
        } catch (err) {
            SentryCaptureException(new Error(JSON.stringify({ error: err, extra: errorHandling })));
        }
    }

    /**
     * Mark seen notification
     * @param walletPublicKey
     * @param notificationId
     */
    public async markSeenNotification(walletPublicKey: string, notificationId: string) {
        try {
            const walletPrivateKey = await getWalletCredentialsKey(walletPublicKey);
            if (walletPrivateKey) {
                const data: any = {
                    walletPublicKey,
                    timestamp: await getCurrentTimestampNTP(),
                    domain: getWalletApiDomain(),

                    notifIds: [notificationId]
                };

                const signature = getSignature(data, walletPrivateKey, walletPublicKey);
                data.signature = signature;

                await this.apiClient.http.post('/notifications/markSeen', data);
            }
        } catch (err) {
            SentryCaptureException(new Error(JSON.stringify(err)));
        }
    }

    /**
     * Get Unseen Notifications
     * @param walletPublicKeys
     */
    public async getUnseenNotifications(walletPublicKeys: string[]): Promise<number> {
        let errorHandling;
        try {
            const data = {
                walletPublicKeys: []
            };

            const timestamp = await getCurrentTimestampNTP();
            const domain = getWalletApiDomain();

            for (const walletPublicKey of walletPublicKeys) {
                const walletPrivateKey = await getWalletCredentialsKey(walletPublicKey);

                const walletData: any = {
                    walletPublicKey,
                    timestamp,
                    domain
                };

                const signature = getSignature(walletData, walletPrivateKey, walletPublicKey);
                walletData.signature = signature;

                data.walletPublicKeys.push(walletData);
            }

            if (data.walletPublicKeys.length === 0) {
                errorHandling = {
                    ...errorHandling,
                    walletPublicKeys: 'empty walletPublicKeys'
                };
            }

            const response = await this.apiClient.http.post('/notifications/unseen', data);

            if (response?.result?.unseenNotifications) {
                return response.result.unseenNotifications;
            }
        } catch (err) {
            SentryCaptureException(new Error(JSON.stringify({ error: err, errorHandling })));
        }

        return 0;
    }
}

'''
'''--- src/core/utils/api-client/utils.ts ---
import CONFIG from '../../../config';
import * as schnorr from '@zilliqa-js/crypto/dist/schnorr';
import ntpClient from 'react-native-ntp-client';

export const getCurrentTimestampNTP = (retryAttempts: number = 3) => {
    return new Promise((resolve, reject) => {
        ntpClient.getNetworkTime(
            CONFIG.ntpServer,
            CONFIG.ntpPort,
            async (error: any, date: any) => {
                if (error) {
                    if (retryAttempts > 0) {
                        await getCurrentTimestampNTP(retryAttempts - 1);
                    } else {
                        reject(error);
                    }
                } else {
                    resolve(new Date(date).getTime());
                }
            }
        );
    });
};

export const getWalletApiDomain = () => {
    return CONFIG.walletApiBaseUrl.replace(/^http(s?):\/\//i, '');
};

export const getSignature = (
    data: any,
    walletPrivateKey: string,
    walletPublicKey: string
): string => {
    const sig = schnorr.sign(
        Buffer.from(JSON.stringify(data), 'hex'),
        Buffer.from(walletPrivateKey, 'hex'),
        Buffer.from(walletPublicKey, 'hex')
    );

    return sig.r.toString('hex') + sig.s.toString('hex');
};

export const removeDuplicateObjectsFromArray = (arr: any[]) =>
    arr.filter((v, i, a) => a.findIndex(t => JSON.stringify(t) === JSON.stringify(v)) === i);

'''
'''--- src/core/utils/api-client/validators.ts ---
import { ApiClient } from './api-client';
import {
    addBreadcrumb as SentryAddBreadcrumb,
    captureException as SentryCaptureException
} from '@sentry/react-native';
import { Blockchain } from '../../blockchain/types';
import { PosBasicActionType } from '../../blockchain/types/token';
import { IAccountState } from '../../../redux/wallets/state';
import DeviceInfo from 'react-native-device-info';

export class ValidatorsApiClient {
    constructor(private apiClient: ApiClient) {}

    public async fetchValidators(
        blockchain: Blockchain,
        chainId: string,
        address: string,
        posAction: PosBasicActionType,
        validatorAddress?: string
    ) {
        try {
            const response = await this.apiClient.http.post('/walletUi/validators/list', {
                blockchain,
                chainId,
                address,
                posAction,
                validatorAddress
            });

            return response?.result?.data;
        } catch (error) {
            SentryAddBreadcrumb({
                message: JSON.stringify({
                    data: {
                        blockchain,
                        chainId,
                        address,
                        posAction
                    },
                    error
                })
            });

            SentryCaptureException(new Error(`Cannot fetch validators, ${error?.message}`));
        }
    }

    public async getAccountDelegateStats(account: IAccountState, chainId: string) {
        try {
            const response = await this.apiClient.http.post('/walletUi/tokenScreen', {
                blockchain: account.blockchain,
                address: account.address,
                chainId
            });

            if (response?.result?.data) {
                return response.result.data;
            } else {
                SentryAddBreadcrumb({
                    message: JSON.stringify({
                        data: {
                            blockchain: account.blockchain,
                            address: account.address,
                            chainId
                        },
                        response
                    })
                });

                SentryCaptureException(
                    new Error(`Cannot fetch account delegate stats, no response data, ${response}`)
                );

                return undefined;
            }
        } catch (error) {
            SentryAddBreadcrumb({
                message: JSON.stringify({
                    data: {
                        blockchain: account.blockchain,
                        address: account.address,
                        chainId
                    },
                    error
                })
            });

            SentryCaptureException(
                new Error(`Cannot fetch account delegate stats, ${error?.message}`)
            );
        }
    }

    public async fetchDelegatedValidators(account: IAccountState, chainId: string) {
        try {
            const response = await this.apiClient.http.post('/walletUi/tokenScreen/accountVotes', {
                blockchain: account.blockchain,
                address: account.address,
                chainId
            });

            if (response?.result?.data) {
                return response.result.data;
            } else {
                SentryAddBreadcrumb({
                    message: JSON.stringify({
                        data: {
                            blockchain: account.blockchain,
                            address: account.address,
                            chainId
                        },
                        response
                    })
                });

                SentryCaptureException(
                    new Error(`Cannot fetch delegated validators, no response data, ${response}`)
                );

                return undefined;
            }
        } catch (error) {
            SentryAddBreadcrumb({
                message: JSON.stringify({
                    data: {
                        blockchain: account.blockchain,
                        address: account.address,
                        chainId
                    },
                    error
                })
            });

            SentryCaptureException(
                new Error(`Cannot fetch delegated validators, ${error?.message}`)
            );
        }
    }

    public async getBalance(
        address: string,
        blockchain: Blockchain,
        chainId: string,
        validatorId?: string
    ) {
        try {
            const response = await this.apiClient.http.post('/walletUi/account/balance', {
                blockchain,
                address,
                chainId,
                appVersion: DeviceInfo.getVersion(),
                validatorId
            });

            if (response?.result?.data) {
                return response.result.data;
            } else {
                SentryAddBreadcrumb({
                    message: JSON.stringify({
                        data: {
                            blockchain,
                            address,
                            chainId,
                            appVersion: DeviceInfo.getVersion(),
                            validatorId
                        },
                        response
                    })
                });

                SentryCaptureException(
                    new Error(
                        `Cannot get balance validators, /walletUi/account/balance, no response data, ${response}`
                    )
                );

                return undefined;
            }
        } catch (error) {
            SentryAddBreadcrumb({
                message: JSON.stringify({
                    data: {
                        blockchain,
                        address,
                        chainId,
                        appVersion: DeviceInfo.getVersion(),
                        validatorId
                    },
                    error
                })
            });

            SentryCaptureException(
                new Error(
                    `Cannot get balance validators, /walletUi/account/balance, ${error?.message}`
                )
            );
        }
    }
}

'''
'''--- src/core/utils/available-funds.ts ---
import { getTokenConfig } from '../../redux/tokens/static-selectors';
import BigNumber from 'bignumber.js';
import { PosBasicActionType, TokenType } from '../blockchain/types/token';
import { getBlockchain } from '../blockchain/blockchain-factory';
import { AccountType, IAccountState, ITokenState } from '../../redux/wallets/state';
import { Blockchain, ChainIdType, IFeeOptions } from '../blockchain/types';

export const getInputAmountToStd = (
    account: IAccountState,
    token: ITokenState,
    amount: string
): BigNumber => {
    const blockchainInstance = getBlockchain(account.blockchain);
    const tokenConfig = getTokenConfig(account.blockchain, token.symbol);

    return blockchainInstance.account.amountToStd(new BigNumber(amount || 0), tokenConfig.decimals);
};

export const availableFunds = (
    amount: string,
    account: IAccountState,
    token: ITokenState,
    chainId: ChainIdType,
    feeOptions: IFeeOptions,
    balanceAvailable?: string
): { insufficientFunds: boolean; insufficientFundsFees: boolean } => {
    const tokenConfig = getTokenConfig(account.blockchain, token.symbol);

    const result = {
        insufficientFunds: false,
        insufficientFundsFees: false
    };

    // Amount check
    const inputAmount = getInputAmountToStd(account, token, amount);
    const availableBalanceValue = balanceAvailable
        ? getInputAmountToStd(account, token, balanceAvailable)
        : new BigNumber(token.balance?.available);

    // Amount > available amount
    result.insufficientFunds =
        inputAmount.isGreaterThan(availableBalanceValue) ||
        availableBalanceValue.isEqualTo(new BigNumber(0));

    if (result.insufficientFunds === true) {
        return result;
    }

    // Fees check
    const feeTotal = new BigNumber(feeOptions?.feeTotal);

    if (tokenConfig.type === TokenType.NATIVE) {
        // feeTotal + amount > available amount
        result.insufficientFundsFees = feeTotal
            .plus(inputAmount)
            .isGreaterThan(availableBalanceValue);
    } else {
        const nativeCoin = getBlockchain(account.blockchain).config.coin;
        const nativeCoinBalance = account.tokens[chainId][nativeCoin].balance?.available;
        const availableBalance = new BigNumber(nativeCoinBalance);

        // ERC20 / ZRC2
        // feeTotal > available amount
        result.insufficientFundsFees = feeTotal.isGreaterThan(availableBalance);
    }

    return result;
};

export const minBalanceNear = async (address: string, chainId: ChainIdType): Promise<BigNumber> => {
    const blockchainInstance = getBlockchain(Blockchain.NEAR);
    const client = blockchainInstance.getClient(chainId);

    const viewAccountRes = await client.http.jsonRpc('query', {
        request_type: 'view_account',
        finality: 'final',
        account_id: address
    });
    return new BigNumber(viewAccountRes?.result?.storage_usage || 500)
        .dividedBy(new BigNumber('10000')) // min balance = storage_used / 10^4
        .plus(new BigNumber(0.1)); // keep 0.1 NEAR in account
};

export const availableAmount = async (
    account: IAccountState,
    token: ITokenState,
    chainId: ChainIdType,
    options: { feeOptions?: IFeeOptions; balanceAvailable?: string; posAction?: PosBasicActionType }
): Promise<string> => {
    const tokenConfig = getTokenConfig(account.blockchain, token.symbol);

    let balance: BigNumber = options.balanceAvailable
        ? getInputAmountToStd(account, token, options.balanceAvailable)
        : new BigNumber(token.balance?.available);

    const blockchainInstance = getBlockchain(account.blockchain);

    // TODO: find a better place to handle this
    if (account.blockchain === Blockchain.NEAR && account.type === AccountType.DEFAULT) {
        let minBalance;

        if (options.posAction) {
            switch (options.posAction) {
                case PosBasicActionType.UNSTAKE:
                case PosBasicActionType.WITHDRAW:
                    minBalance = new BigNumber(0);
                    break;
                default:
                    minBalance = await minBalanceNear(account.address, chainId);
            }
        } else {
            minBalance = await minBalanceNear(account.address, chainId);
        }

        const amountToStd = blockchainInstance.account.amountToStd(
            minBalance,
            tokenConfig.decimals
        );

        balance = balance.minus(amountToStd);
    } else {
        if (options.feeOptions && tokenConfig.type === TokenType.NATIVE) {
            balance = balance.minus(options.feeOptions?.feeTotal);
        }
    }

    if (balance.isGreaterThanOrEqualTo(0)) {
        const amountFromStd = blockchainInstance.account.amountFromStd(
            balance,
            tokenConfig.decimals
        );
        return amountFromStd.toFixed();
    } else {
        return new BigNumber(0).toString();
    }
};

'''
'''--- src/core/utils/balance.ts ---
import { IAccountState } from '../../redux/wallets/state';

import BigNumber from 'bignumber.js';

import { getBlockchain } from '../blockchain/blockchain-factory';
import { Blockchain, ChainIdType } from '../blockchain/types';
import { IExchangeRates } from '../../redux/market/state';
import { getTokenConfig } from '../../redux/tokens/static-selectors';
import { ITokenConfigState } from '../../redux/tokens/state';

export const calculateBalance = (
    account: IAccountState,
    chainId: ChainIdType,
    exchangeRates: IExchangeRates,
    blockchainCoinTokenConfig: ITokenConfigState,
    cumulativeBalance: boolean
) => {
    const tokenKeys = Object.keys((account?.tokens || {})[chainId] || {});
    let balance = new BigNumber(0);

    const blockchainInstance = getBlockchain(account.blockchain);

    for (const tokenSymbol of tokenKeys) {
        const token = account.tokens[chainId][tokenSymbol];
        const tokenConfig = getTokenConfig(account.blockchain, token.symbol);

        const tokenBalanceValue = new BigNumber(token.balance?.total);

        if (tokenConfig && token.active) {
            let amount = new BigNumber(0);

            if (tokenConfig.removable === false) {
                amount = tokenBalanceValue;
            } else {
                const amountConverted = convertAmount(
                    account.blockchain,
                    exchangeRates,
                    tokenBalanceValue.toFixed(),
                    tokenSymbol,
                    blockchainCoinTokenConfig.symbol,
                    tokenConfig.decimals
                );
                amount = blockchainInstance.account.amountToStd(
                    new BigNumber(amountConverted),
                    blockchainCoinTokenConfig.decimals
                );

                if (amount.isNaN()) amount = new BigNumber(0);
            }

            // Consider Cumulative Balance
            balance = balance.plus(amount);

            // if (cumulativeBalance === true) {
            //     // Cumulative Balance
            //     // balance of all portfolio
            //     balance = balance.plus(amount);
            // } else {
            //     // No Cumulative Balance
            //     // add only the balance of the native coin
            //     if (tokenSymbol === blockchainInstance.config.coin) {
            //         balance = balance.plus(amount);
            //     } else {
            //         // skip, do not add the balance of non native coins
            //     }
            // }
        }
    }

    return balance.toFixed();
};

export const convertAmount = (
    blockchain: Blockchain,
    exchangeRates: IExchangeRates,
    value: string,
    fromToken: string,
    toToken: string,
    tokenDecimals: number
): BigNumber => {
    const blockchainInstance = getBlockchain(blockchain);
    const valueBigNumber = new BigNumber(value);
    const amount = blockchainInstance.account.amountFromStd(valueBigNumber, tokenDecimals);
    if (fromToken === toToken) {
        return amount;
    }

    if (value && exchangeRates[fromToken] && exchangeRates[toToken]) {
        return amount.multipliedBy(exchangeRates[fromToken]).dividedBy(exchangeRates[toToken]);
    }

    return new BigNumber(0);
};

export const splitStake = (amount: BigNumber, validators: number): BigNumber => {
    return new BigNumber(amount || 0).dividedBy(validators);
};

'''
'''--- src/core/utils/class-registry.ts ---
const instances: Map<any, any> = new Map();
const instancesCbs: Map<any, ((cb) => any)[]> = new Map();

export const getInstance = <T = any>(key: any): T => {
    return instances.get(key);
};

const onInstance = (key, cb: (instance) => any): (() => any) => {
    const cbs = instancesCbs.get(key);

    if (Array.isArray(cbs)) {
        cbs.push(cb);
    } else {
        instancesCbs.set(key, [cb]);
    }

    return () => {
        const callbacks = instancesCbs.get(key) || [];
        callbacks.splice(callbacks.indexOf(cb), 1);
    };
};

export const waitForInstance = <T = any>(key: any, timeout: number = 5000): Promise<T> => {
    return new Promise((resolve, reject) => {
        if (instances.has(key)) {
            return resolve(instances.get(key));
        }

        const unsub = onInstance(key, instance => {
            resolve(instance);
            unsub();
            clearTimeout(timer);
        });

        const timer = setTimeout(() => {
            unsub();
            reject('TIMEOUT');
        }, timeout);
    });
};

export const setInstance = <T = any>(key: any, instance: T) => {
    instances.set(key, instance);

    if (instancesCbs.has(key)) {
        // copy callback in other array to avoid changing an array while itarating it.
        const cbs = instancesCbs.get(key).map(cb => cb);
        cbs.map(cb => cb(instance));
    }
};

'''
'''--- src/core/utils/deferred.ts ---
export class Deferred<T = any> {
    public promise: Promise<T>;
    public resolve;
    public reject;

    constructor() {
        this.promise = new Promise<T>((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
        });
    }
}

'''
'''--- src/core/utils/exchange-rates.ts ---
import database from '@react-native-firebase/database';
import { store } from '../../redux/config';
import { EXCHANGE_RATE_UPDATE } from '../../redux/market/actions';

const subscribedExchangeRates = [];

export const subscribeExchangeRateValue = (token: string): void => {
    if (token && subscribedExchangeRates.indexOf(token) < 0) {
        subscribedExchangeRates.push(token);

        database()
            .ref('/exchange-rates')
            .child('values')
            .child(token)
            .on('value', (snapshot: any) => {
                const value = String(snapshot.val());
                if (store) {
                    store.dispatch({
                        type: EXCHANGE_RATE_UPDATE,
                        data: {
                            token,
                            value
                        }
                    });
                }
            });
    }
};

'''
'''--- src/core/utils/exchange-rates.web.ts ---
import { database } from 'firebase/app';
import 'firebase/database';

import { store } from '../../redux/config';
import { EXCHANGE_RATE_UPDATE } from '../../redux/market/actions';

const subscribedExchangeRates = [];

export const subscribeExchangeRateValue = (token: string): void => {
    if (token && subscribedExchangeRates.indexOf(token) < 0) {
        subscribedExchangeRates.push(token);

        database()
            .ref('/exchange-rates')
            .child('values')
            .child(token)
            .on('value', (snapshot: any) => {
                const value = String(snapshot.val());
                if (store) {
                    store.dispatch({
                        type: EXCHANGE_RATE_UPDATE,
                        data: {
                            token,
                            value
                        }
                    });
                }
            });
    }
};

'''
'''--- src/core/utils/format-address.ts ---
import { Blockchain } from '../blockchain/types';
import { getBlockchain } from '../blockchain/blockchain-factory';

const stripAddress = (text: string) => {
    if (text.length === 0) {
        return '';
    }
    return text.substring(0, 5) + '...' + text.substring(text.length - 5, text.length);
};

export const formatAddress = (text: string, blockchain: Blockchain) => {
    if (!text) return '';

    const split = text.split('.');
    if (split.length > 1 && split[0].length > 20) {
        split[0] = stripAddress(split[0]);
        return split.join('.');
    }

    if (text.match(/.+\.[a-zA-Z]{2,}$/gi)) return text;

    switch (getBlockchain(blockchain).config.ui.addressDisplay) {
        case 'stripped':
            return stripAddress(text);
        default:
            return text;
    }
};

export const fixEthAddress = (address: string): string => {
    if (address.indexOf('0x') < 0) {
        address = '0x' + address;
    }
    return address;
};

'''
'''--- src/core/utils/format-number.ts ---
import { Platform, NativeModules } from 'react-native';
import 'intl';
import 'intl/locale-data/jsonp/en-US';
import BigNumber from 'bignumber.js';
import { beautify } from '../../components/widgets/utils';
import { IBeautify } from '../../components/widgets/types';

export interface INumberFormatOptions {
    locale?: string;
    currency?: string;
    minimumFractionDigits?: number;
    maximumFractionDigits?: number;
    beautify?: IBeautify;
}

const significantDecimalsNumber = (amount: number) => (amount > 1 ? 2 : amount > 0.00001 ? 6 : 8);

// list of currencies to be displayed using js formatter
const formattedCurrencies = ['USD', 'EUR'];

const getLocale = () => {
    let deviceLocale: any;
    switch (Platform.OS) {
        case 'ios':
            deviceLocale = NativeModules.SettingsManager.settings.AppleLocale;
            break;
        case 'android':
            deviceLocale = NativeModules.I18nManager.localeIdentifier;
            break;
        case 'web':
            deviceLocale = window.navigator.language;
            break;
    }
    return deviceLocale ? deviceLocale.replace(/_/g, '-') : null;
};

export const formatNumber = (amount: number | BigNumber, options: INumberFormatOptions = {}) => {
    try {
        let beautyNumber;

        if (options?.beautify?.notation === 'compact') {
            beautyNumber = beautify(amount, options?.beautify?.fromValue);
            amount = beautyNumber.value;
        }

        amount = amount instanceof BigNumber ? amount.toNumber() : Number(amount) || 0;

        const displayFormatCurrency =
            options.currency && formattedCurrencies.indexOf(options.currency) !== -1;

        let minimumFractionDigits = 0;
        if (options?.minimumFractionDigits) minimumFractionDigits = options.minimumFractionDigits;
        if (options?.beautify?.decimals) minimumFractionDigits = options.beautify.decimals;

        let maximumFractionDigits = significantDecimalsNumber(amount);
        if (options?.maximumFractionDigits) maximumFractionDigits = options.maximumFractionDigits;
        if (options?.beautify?.decimals !== undefined) {
            maximumFractionDigits = options.beautify.decimals;
        }

        const isPercent = options?.beautify?.notation === 'percent';

        let formattedNumber = new Intl.NumberFormat(options.locale || getLocale() || 'en-US', {
            style: isPercent ? 'percent' : displayFormatCurrency ? 'currency' : 'decimal',
            currency: isPercent ? undefined : displayFormatCurrency ? options.currency : undefined,
            minimumFractionDigits,
            maximumFractionDigits
        }).format(amount);

        if (options?.beautify?.notation === 'compact') {
            formattedNumber += beautyNumber.unit;
        }

        if (options?.beautify?.notation === 'percent') {
            // remove spaces
            formattedNumber = formattedNumber.replace(/\s/g, '');
        }

        return options.currency && !displayFormatCurrency
            ? formattedNumber +
                  ' ' +
                  (options?.beautify?.symbol ? options.beautify.symbol : options.currency)
            : formattedNumber;
    } catch {
        // if something fails lets try with en-US locale
        // if that also fails, we return a N/A as we cannot format the number
        if (options.locale !== 'en-US') {
            return formatNumber(amount, { ...options, locale: 'en-US' });
        } else {
            return 'N/A';
        }
    }
};

const integerRegex = new RegExp(/^\d+$/);
export const isInteger = (value: string) => integerRegex.test(value);

'''
'''--- src/core/utils/format-string.ts ---
import { IValidator } from '../blockchain/types/stats';
import { translate } from '../i18n';

export const Capitalize = (str: string) => {
    return (str || '').charAt(0).toUpperCase() + (str || '').slice(1).toLowerCase();
};

export const valuePrimaryCtaField = (validators: IValidator[]): string => {
    const selectedValidators = validators.filter(
        validator => validator.actionTypeSelected === true
    );

    if (selectedValidators.length > 1) {
        return selectedValidators.length + ' ' + translate('App.labels.validators').toLowerCase();
    } else if (selectedValidators.length === 1) {
        return formatValidatorName(selectedValidators[0].name, 15);
    }
    return '';
};

export const formatValidatorName = (str: string, length: number): string => {
    return str.length > length ? str.slice(0, length) + '...' : str;
};

'''
'''--- src/core/utils/http-client.ts ---
import { delay } from './time';
import {
    addBreadcrumb as SentryAddBreadcrumb,
    captureException as SentryCaptureException
} from '@sentry/react-native';

const defaultHeaders = {
    Accept: 'application/json',
    'Content-Type': 'application/json'
};

export class HttpClient {
    private lastId: number = 0;

    public jsonRpcRetriesFailedRequests = 0; // if >0 it will retry requests with status code != 200

    constructor(private url: string) {}

    public async get(path: string): Promise<any> {
        const url = this.url + path;

        try {
            const response = await fetch(url);

            if (response.status !== 200) {
                // Sentry
                SentryAddBreadcrumb({ message: JSON.stringify(response.headers) });
                SentryAddBreadcrumb({ message: JSON.stringify(response.statusText) });
                SentryCaptureException(
                    new Error(`GET request failed to ${url} with ${response.status}`),
                    {
                        tags: {
                            url,
                            status: response.status
                        }
                    }
                );
            }

            return response.json();
        } catch (error) {
            // Sentry
            SentryAddBreadcrumb({ message: JSON.stringify(error) });
            SentryCaptureException(
                new Error(`GET request failed to ${url} with ${error?.message}`),
                {
                    tags: {
                        url
                    }
                }
            );

            return Promise.reject(error);
        }
    }

    public async rawPost(path: string, body: {}): Promise<Response> {
        return fetch(this.url + path, {
            method: 'POST',
            headers: defaultHeaders,
            body: JSON.stringify(body)
        });
    }

    public async post(path: string, body: {}): Promise<any> {
        const url = this.url + path;

        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: defaultHeaders,
                body: JSON.stringify(body)
            });

            if (response.status !== 200) {
                // Sentry
                SentryAddBreadcrumb({ message: JSON.stringify(response.headers) });
                SentryAddBreadcrumb({ message: JSON.stringify(response.statusText) });
                SentryCaptureException(
                    new Error(`POST request failed to ${url} with ${response.status}`),
                    {
                        tags: {
                            url,
                            status: response.status
                        }
                    }
                );
            }

            return response.json();
        } catch (error) {
            // Sentry
            SentryAddBreadcrumb({ message: JSON.stringify(error) }); // error
            SentryAddBreadcrumb({ message: JSON.stringify(body) }); // body
            SentryCaptureException(
                new Error(`POST request failed to ${url} with ${error?.message}`),
                {
                    tags: {
                        url
                    }
                }
            );

            return Promise.reject(error);
        }
    }

    public async jsonRpc(
        method: string,
        params: any = [],
        retries = this.jsonRpcRetriesFailedRequests
    ): Promise<any> {
        const id = this.lastId++;
        const body = {
            jsonrpc: '2.0',
            id,
            method,
            params: typeof params !== 'object' || params === null ? [params] : params
        };

        const resPromise = this.rawPost('', body);

        try {
            const res = await resPromise;

            if (res.status === 200) {
                return await res.json(); // added await intentionally, to fail if json is invalid, so it will retry
            } else if (retries > 0) {
                // Sentry
                SentryAddBreadcrumb({
                    message: JSON.stringify({
                        headers: res.headers
                    })
                });
                SentryAddBreadcrumb({
                    message: JSON.stringify({
                        statusText: res.statusText,
                        method,
                        params: JSON.stringify(params),
                        retries
                    })
                });
                SentryCaptureException(
                    new Error(`JsonRpc request failed to ${res.url} with ${res.status}`),
                    {
                        tags: {
                            url: res.url,
                            status: res.status
                        }
                    }
                );

                await delay(500);
                return this.jsonRpc(method, params, retries - 1);
            } else {
                // Sentry
                SentryAddBreadcrumb({
                    message: JSON.stringify({
                        headers: res.headers
                    })
                });
                SentryAddBreadcrumb({
                    message: JSON.stringify({
                        statusText: res.statusText,
                        method,
                        params: JSON.stringify(params),
                        retries
                    })
                });
                SentryCaptureException(
                    new Error(`JsonRpc request failed to ${res.url} with ${res.status}`),
                    {
                        tags: {
                            url: res.url,
                            status: res.status
                        }
                    }
                );

                return res.json();
            }
        } catch (error) {
            // Sentry
            SentryAddBreadcrumb({ message: JSON.stringify(error) });
            SentryCaptureException(new Error(`JsonRpc request failed with ${error.message}`), {
                tags: {
                    method,
                    params: JSON.stringify(params),
                    retries
                }
            });

            if (retries > 0) {
                await delay(500);
                return this.jsonRpc(method, params, retries - 1);
            } else {
                return resPromise.then(response => {
                    return response.json();
                });
            }
        }
    }
}

'''
'''--- src/core/utils/linking-handler.ts ---
import { Platform, Linking } from 'react-native';
import AndroidOpenSettings from 'react-native-android-open-settings';

export const openURL = (url: string) => {
    Linking.canOpenURL(url).then(supported => {
        if (supported) {
            Linking.openURL(url);
        }
    });
};

export const openPhoneSettings = () => {
    if (Platform.OS === 'ios') {
        Linking.canOpenURL('app-settings:')
            .then(supported => {
                if (supported) {
                    return Linking.openURL('app-settings:');
                }
            })
            .catch();
    } else {
        AndroidOpenSettings.appDetailsSettings();
    }
};

'''
'''--- src/core/utils/object-sanitise.ts ---
export function sanitizeObject(originalObj) {
    const obj = JSON.parse(JSON.stringify(originalObj));
    const result = {};

    for (const key of Object.keys(obj)) {
        if (isPropSafe(key)) {
            typeof obj[key] === 'object'
                ? (result[key] = sanitizeObject(obj[key]))
                : (result[key] = obj[key]);
        }
    }

    return result;
}

export const sanitizeSentryBreadcrumb = breadcrumb => {
    try {
        breadcrumb.message = JSON.stringify(breadcrumb.message);
    } catch {
        // do nothing
    }
    breadcrumb = sanitizeObject(breadcrumb);
    breadcrumb.message = JSON.stringify(breadcrumb.message);

    return breadcrumb;
};

export function filterObjectProps(originalObj, propsList) {
    const obj = JSON.parse(JSON.stringify(originalObj));
    return filterProps(obj, parseProps(propsList));
}

function filterProps(obj, propsObject = {}) {
    const result = {};
    for (const prop of Object.keys(propsObject)) {
        if (obj[prop] && Object.keys(propsObject[prop]).length > 0) {
            result[prop] = filterProps(obj[prop], propsObject[prop]);
        }

        if (['string', 'boolean', 'number'].indexOf(typeof obj[prop]) >= 0) {
            result[prop] = obj[prop];
        }
    }
    return result;
}

function isPropSafe(prop) {
    const wordsBlackList = [
        /user(names?)?/gi,
        /pass(words?)?/gi,
        /mnemonics?/gi,
        /.*secret.*/gi,
        /pin_?(codes?)?/gi,
        /.*(token).*/gi,
        /address/gi,
        /.*key.*/gi,
        /.*private.*/gi,
        /.*seed.*/gi,
        /.*encrypt.*/gi,
        /.*decrypt.*/gi
    ];

    let propElements = prop.split('.');
    const propElementLength = propElements.length;
    for (const regexp of wordsBlackList) {
        propElements = propElements.filter(p => !p.match(regexp));
        if (propElements.length !== propElementLength) {
            return false;
        }
    }
    return propElements.length === propElementLength;
}

function parseProps(props) {
    const splittedProps = props.filter(p => isPropSafe(p)).map(p => p.split('.'));
    const propsObject = {};
    for (const propList of splittedProps) {
        let iterator = propsObject;
        for (const prop of propList) {
            if (!iterator[prop]) {
                iterator[prop] = {};
            }
            iterator = iterator[prop];
        }
    }
    return propsObject;
}

'''
'''--- src/core/utils/pick.ts ---
export const pickInsensitiveKey = (obj: any, key: string) => {
    for (const k in obj) {
        if (k?.toLowerCase() === key?.toLowerCase()) {
            return obj[k];
        }
    }
    return undefined;
};

'''
'''--- src/core/utils/remote-feature-config/index.ts ---
export * from './remote-feature-config';
export * from './types';

'''
'''--- src/core/utils/remote-feature-config/remote-feature-config.ts ---
import remoteConfig from '@react-native-firebase/remote-config';
import DeviceInfo from 'react-native-device-info';
import AsyncStorage from '@react-native-community/async-storage';
import CONFIG from '../../../config';
import { RemoteFeature } from './types';
import { captureException as SentryCaptureException } from '@sentry/react-native';
import { Blockchain } from '../../blockchain/types';

const featuresConfig = {};

export const getRemoteConfigFeatures = async () => {
    const config = remoteConfig();

    const duration = CONFIG.firebaseConfigFetchInterval;
    if (__DEV__) {
        await config.setConfigSettings({
            minimumFetchIntervalMillis: 0
        });
    }

    try {
        // Set default values
        const defaultValues = {};
        for (const feature of Object.values(RemoteFeature)) {
            defaultValues[feature] = [];
        }
        defaultValues[RemoteFeature.TC_VERSION] = 0;
        await config.setDefaults(defaultValues);

        await config.fetch(duration);

        await config.fetchAndActivate();

        // Ensures the last activated config are available to the getters.
        await config.ensureInitialized();

        const all = config.getAll();
        const allKeys = Object.keys(all);

        for (const key of allKeys) {
            const val = all[key].asString();
            try {
                featuresConfig[key] = JSON.parse(val);
            } catch {
                featuresConfig[key] = val;
            }
        }
    } catch (error) {
        // Set default values
        for (const feature of Object.values(RemoteFeature)) {
            featuresConfig[feature] = [];
        }
        featuresConfig[RemoteFeature.TC_VERSION] = 0;

        SentryCaptureException(new Error(JSON.stringify(error)));
    }

    return featuresConfig;
};

/**
 * solana:sol, solana:eth, zilliqa:port
 */
export const remoteFeatureSwapContainsToken = (
    blockchain: Blockchain,
    tokenSymbol: string
): boolean => {
    if (!blockchain || !tokenSymbol) return false;

    const feature = RemoteFeature.LIST_SWAP_TOKENS_V3;

    return (
        featuresConfig &&
        featuresConfig[feature] &&
        featuresConfig[feature]?.length > 0 &&
        !!featuresConfig[feature].find((el: any) => {
            try {
                const e = el.split(':');
                return (
                    e[0].toLowerCase() === blockchain.toLowerCase() &&
                    e[1].toLowerCase() === tokenSymbol.toLowerCase()
                );
            } catch {
                SentryCaptureException(
                    new Error(
                        `Failed to parse remote feature swap contains token ${blockchain}:${tokenSymbol}, ${el}`
                    )
                );
                return false;
            }
        })
    );
};

export const isFeatureActive = (feature: RemoteFeature): boolean => {
    if (__DEV__) {
        return true;
    }

    if (feature === RemoteFeature.IMPROVED_NONCE) {
        // TODO: cleanup project of improved nonce
        return true;
    }

    if (feature !== RemoteFeature.TC_VERSION)
        return (
            featuresConfig[feature]?.length > 0 &&
            !!featuresConfig[feature].find(
                element => element === '*' || element === DeviceInfo.getUniqueId()
            )
        );
};

export const getFirebaseTCVersion = async (): Promise<number> => {
    if (featuresConfig) {
        const tcVersion = featuresConfig[RemoteFeature.TC_VERSION];

        if (tcVersion) {
            await AsyncStorage.setItem('tcAcceptedVersion', String(tcVersion));
        }

        return tcVersion;
    }

    return;
};

export const getDevToolRewardsAddress = () => {
    return featuresConfig && featuresConfig[RemoteFeature.DEV_SOL_REWARDS];
};

'''
'''--- src/core/utils/remote-feature-config/remote-feature-config.web.ts ---
import { Blockchain } from '../../blockchain/types';
import { RemoteFeature } from './types';

export const getRemoteConfigFeatures = () => {
    // TODO: decide if 1 hour should be the optimal fetch duration
    // set fetch cache duration to 1 hour for live environment
    return Promise.resolve();
};

export const isFeatureActive = (feature: RemoteFeature): boolean => {
    return false;
};

export const getFirebaseTCVersion = (): number => {
    return undefined;
};

export const remoteFeatureSwapContainsToken = (
    blockchain: Blockchain,
    tokenSymbol: string
): boolean => {
    return false;
};

export const getDevToolRewardsAddress = () => {
    return undefined;
};

'''
'''--- src/core/utils/remote-feature-config/types.ts ---
export enum RemoteFeature {
    // please try to add keys in alphabetic order
    CELO = 'feature_celo',
    COSMOS = 'feature_cosmos',
    DEV_TOOLS = 'dev_tools',
    IMPROVED_NONCE = 'improvedNonce',
    LIST_SWAP_TOKENS_V3 = 'list_swap_tokens_v3',
    NEAR_LEDGER_BLE = 'near_ledger_ble',
    SWAP_TOKENS = 'swap_tokens',
    TC_VERSION = 'tcVersion',
    GRT = 'feature_grt',
    DEV_SOL_REWARDS = 'dev_sol_rewards'
}

'''
'''--- src/core/utils/request-permissions.ts ---
import { Platform, PermissionsAndroid } from 'react-native';
import { CameraKitCamera } from 'react-native-camera-kit';

const requestCameraPermission = async () => {
    try {
        const granted = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.CAMERA);
        if (granted === PermissionsAndroid.RESULTS.GRANTED) {
            return true;
        } else {
            return false;
        }
    } catch (err) {
        return false;
    }
};

export const checkDeviceCameraPermission = () =>
    new Promise<boolean>(async resolve => {
        let success = await CameraKitCamera.checkDeviceCameraAuthorizationStatus();

        if (success === -1 || success === false) {
            if (Platform.OS === 'android') {
                // because on Android, requestDeviceCameraAuthorization does not return a promise (library bug)

                success = await requestCameraPermission();
                resolve(success);
            } else {
                success = await CameraKitCamera.requestDeviceCameraAuthorization();
                resolve(success);
            }
        } else {
            resolve(true);
        }
    });

'''
'''--- src/core/utils/screenshot.ts ---
import { NativeModules } from 'react-native';

export const forbidScreenshots = async () => {
    try {
        await NativeModules.PreventScreenshotModule.forbid();
    } catch (e) {
        //
    }
};

export const allowScreenshots = async () => {
    try {
        await NativeModules.PreventScreenshotModule.allow();
    } catch (e) {
        //
    }
};

'''
'''--- src/core/utils/smart-connect.ts ---
import React from 'react';
export const smartConnect = <P = {}>(
    Comp: any,
    connectors: any[] = []
): React.ComponentType<P & { ref?: any }> => {
    let result = Comp;
    for (const connector of connectors) {
        result = connector(result);
    }

    return result;
};

'''
'''--- src/core/utils/sort-object.ts ---
export const sortObject = obj => {
    if (obj === null) return null;
    if (typeof obj !== 'object') return obj;
    if (Array.isArray(obj)) return obj.map(sortObject);
    const sortedKeys = Object.keys(obj).sort();
    const result = {};
    sortedKeys.forEach(key => {
        result[key] = sortObject(obj[key]);
    });
    return result;
};

'''
'''--- src/core/utils/stats-get-value.ts ---
import BigNumber from 'bignumber.js';
import { ITokenConfigState } from '../../redux/tokens/state';
import { getBlockchain } from '../blockchain/blockchain-factory';
import { Blockchain } from '../blockchain/types';
import { IStatValue, IStatValueType } from '../blockchain/types/stats';
import { formatNumber } from './format-number';

export const statGetValueString = (stat: IStatValue, tokenConfig: ITokenConfigState) => {
    if (!tokenConfig) {
        return null;
    }

    switch (stat.type) {
        case IStatValueType.STRING:
            return stat.data.value;
        case IStatValueType.AMOUNT: {
            const blockchainInstance = getBlockchain(stat.data.blockchain as Blockchain);

            let amountFromStd = blockchainInstance.account.amountFromStd(
                new BigNumber(stat.data.value),
                tokenConfig.decimals
            );

            // remove decimals if amount is grater than 10 000
            if (new BigNumber(amountFromStd).isGreaterThan(new BigNumber('10000'))) {
                amountFromStd = new BigNumber(amountFromStd.toFixed(0));
            }

            return formatNumber(new BigNumber(amountFromStd), {
                currency: tokenConfig.symbol,
                maximumFractionDigits: 4
            });
        }
    }
};

'''
'''--- src/core/utils/swap.ts ---
import { IBlockchainTransaction } from '../blockchain/types';
import { ContractMethod } from '../blockchain/types/token';

export const isSwapTx = (tx: IBlockchainTransaction): boolean => {
    return (
        tx.additionalInfo?.swap &&
        (tx.additionalInfo?.swap.contractMethod === ContractMethod.SWAP ||
            tx.additionalInfo?.swap.contractMethod === ContractMethod.SWAP_EXACT_TOKENS_FOR_ZIL ||
            tx.additionalInfo?.swap.contractMethod === ContractMethod.SWAP_EXACT_ZIL_FOR_TOKENS ||
            tx.additionalInfo?.swap.contractMethod === ContractMethod.SWAP_EXACT_TOKENS_FOR_TOKENS)
    );
};

'''
'''--- src/core/utils/time.ts ---
export const delay = (time: number = 0) =>
    new Promise(resolver => setTimeout(() => resolver(), time));

'''
'''--- src/core/utils/url-params.ts ---
export const getUrlParams = (search = ``) => {
    const hashes = search.slice(search.indexOf('?') + 1).split('&');
    return hashes.reduce((params, hash) => {
        const split = hash.indexOf('=');

        if (split < 0) {
            return { ...params, [hash]: null };
        }

        const key = hash.slice(0, split);
        const val = hash.slice(split + 1);

        return { ...params, [key]: decodeURIComponent(val) };
    }, {});
};

'''
'''--- src/core/wallet/__tests__/wallet-factory.test.ts ---
// import { WalletFactory } from '../wallet-factory';
// import { WalletType } from '../types';
// import { HDWallet } from '../hd-wallet/hd-wallet';

jest.mock('../hd-wallet/hd-wallet');

describe('WalletFactory', () => {
    test('get()', async () => {
        // HDWallet.loadFromStorage = jest.fn();
        // let wallet = WalletFactory.get('', WalletType.HD, {});
        // expect(wallet).toBeInstanceOf(Promise);
        // expect(HDWallet.loadFromStorage).toHaveBeenCalledTimes(1);

        // wallet = WalletFactory.get('', 'INVALID_TYPE' as any, {});
        // expect(wallet).toBeInstanceOf(Promise);
        // expect(HDWallet.loadFromStorage).toHaveBeenCalledTimes(2);

        expect('wallet').toEqual('wallet');
    });
});

'''
'''--- src/core/wallet/hd-wallet/__tests__/hd-wallet.test.ts ---
import { HDWallet } from '../hd-wallet';
import { Mnemonic } from '../mnemonic';
import HDKey from 'hdkey';
import { Blockchain } from '../../../blockchain/types';
import * as BlockchainFactory from '../../../blockchain/blockchain-factory';

// TODO organize mocks better, right now it's a mess

jest.mock('../../../blockchain/blockchain-factory');
jest.mock('../mnemonic');
jest.mock('hdkey', () => {
    return {
        __esModule: true,
        default: () => ({
            derive: jest.fn()
        })
    };
});

describe('HDWallet', () => {
    // Mnemonic.verify = jest.fn().mockReturnValue(true);
    // Mnemonic.toSeed = jest.fn().mockReturnValue('MASTER_SEED');
    // HDKey.fromMasterSeed = jest.fn();

    test('loadFromStorage()', async () => {
        expect('wallet').toEqual('wallet');
    });

    // describe('constructor()', () => {
    //     test('valid mnemonic', () => {
    //         // tslint:disable-next-line:no-unused-expression
    //         new HDWallet('MNEMONIC');
    //         expect(Mnemonic.verify).toHaveBeenCalledWith('MNEMONIC');
    //         // expect(Mnemonic.toSeed).toHaveBeenCalledWith('MNEMONIC');
    //         // expect(HDKey.fromMasterSeed).toHaveBeenCalledWith('MASTER_SEED');
    //     });

    //     test('invalid mnemonic', () => {
    //         Mnemonic.verify = jest.fn().mockReturnValue(false);
    //         (Mnemonic.toSeed as any).mockClear();
    //         (HDKey.fromMasterSeed as any).mockClear();

    //         expect(() => new HDWallet('INVALID_MNEMONIC')).toThrowError('Invalid mnemonic.');
    //         expect(Mnemonic.verify).toHaveBeenCalledWith('INVALID_MNEMONIC');
    //         expect(Mnemonic.toSeed).not.toHaveBeenCalled();
    //         expect(HDKey.fromMasterSeed).not.toHaveBeenCalled();
    //     });
    // });

    // describe('getAccounts()', () => {
    //     Mnemonic.verify = jest.fn().mockReturnValue(true);
    //     // @ts-ignore
    //     BlockchainFactory.getBlockchain = jest.fn().mockImplementation(() => ({
    //         config: {
    //             derivationPath: 'DERIVATION_PATH'
    //         },
    //         account: {
    //             getAccountFromPrivateKey: jest.fn().mockImplementation((p, i) => `ACCOUNT ${i}`)
    //         }
    //     }));
    //     HDKey.fromMasterSeed = jest.fn().mockReturnValue({
    //         derive: jest.fn().mockReturnValue({
    //             derive: jest.fn().mockReturnValue({
    //                 privateKey: Buffer.from('aaa', 'hex')
    //             })
    //         })
    //     });
    //     const wallet = new HDWallet('mnemonic');

    //     test('invalid index', async () => {
    //         await expect(wallet.getAccounts(Blockchain.ETHEREUM, 'a' as any)).rejects.toEqual(
    //             'HDWallet.getAccounts(): index must be a positive number.'
    //         );

    //         await expect(wallet.getAccounts(Blockchain.ETHEREUM, -1)).rejects.toEqual(
    //             'HDWallet.getAccounts(): index must be a positive number.'
    //         );
    //     });

    //     test('invalid indexTo', async () => {
    //         await expect(wallet.getAccounts(Blockchain.ETHEREUM, 0, 'a' as any)).rejects.toEqual(
    //             'HDWallet.getAccounts(): indexTo must be a positive number.'
    //         );

    //         await expect(wallet.getAccounts(Blockchain.ETHEREUM, 0, -1)).rejects.toEqual(
    //             'HDWallet.getAccounts(): indexTo value must be greated than index value.'
    //         );

    //         await expect(wallet.getAccounts(Blockchain.ETHEREUM, 2, 1)).rejects.toEqual(
    //             'HDWallet.getAccounts(): indexTo value must be greated than index value.'
    //         );
    //     });

    //     // test('general error', async () => {
    //     //     await expect(
    //     //         generalErrorWallet.getAccounts(Blockchain.ETHEREUM, 1)
    //     //     ).rejects.toEqual("There was an error while generating the accounts.");
    //     // })

    //     test('should return accounts', async () => {
    //         // await expect(wallet.getAccounts(Blockchain.ETHEREUM, 2)).resolves.toEqual([
    //         //     'ACCOUNT 2'
    //         // ]);
    //         // await expect(wallet.getAccounts(Blockchain.ETHEREUM, 1, 2)).resolves.toEqual([
    //         //     'ACCOUNT 1',
    //         //     'ACCOUNT 2'
    //         // ]);
    //     });

    //     test('invalid blockchain', async () => {
    //         // @ts-ignore
    //         BlockchainFactory.getBlockchain = jest.fn().mockImplementation(() => {
    //             throw new Error('Blockchain implementation not found.');
    //         });

    //         await expect(wallet.getAccounts('' as any, 1)).rejects.toEqual(
    //             'Blockchain implementation not found.'
    //         );
    //     });
    // });

    // // test('sign()', () => {
    // //     Mnemonic.verify = jest.fn().mockReturnValue(true);
    // //     const hdWallet = new HDWallet('MNEMONIC');
    // //     expect(() => (hdWallet as any).sign()).toThrowError('Method not implemented.');
    // // });
});

'''
'''--- src/core/wallet/hd-wallet/__tests__/mnemonic.test.ts ---
import { Mnemonic } from '../mnemonic';
import { wordlists } from 'bip39';

describe('Mnemonic', () => {
    describe('generateMnemonic()', () => {
        const validateMnemonic = (mnemonic: string, wordsCount: number) => {
            expect(mnemonic).toBeDefined();

            // verify words count
            const words = mnemonic.split(' ');
            expect(words.length).toBe(wordsCount);

            // chack that words are valid, and are from wordslist
            for (const word of words) {
                expect(wordlists.EN).toContain(word);
            }
        };

        test('with no params', async () => {
            validateMnemonic(await Mnemonic.generate(), 24);
        });

        test('with 12 words', async () => {
            validateMnemonic(await Mnemonic.generate(12), 12);
        });

        test('with 24 words', async () => {
            validateMnemonic(await Mnemonic.generate(24), 24);
        });
    });

    describe('verify()', () => {
        test('menmonic with 12 words', () => {
            const mnemonic =
                'deer abstract know cousin crouch cake gauge candy bicycle goose inmate chicken';
            expect(Mnemonic.verify(mnemonic)).toBe(true);
        });

        test('mnemonic with 24 words', () => {
            const mnemonic =
                'panic club above clarify orbit resist illegal feel bus remember aspect field test bubble dog trap awesome hand room rice heavy idle faint salmon';
            expect(Mnemonic.verify(mnemonic)).toBe(true);
        });

        test('invalid mnemonic', () => {
            const mnemonics = [
                'deer deer know cousin crouch cake gauge candy bicycle goose inmate chicken',
                'deer know cousin',
                'deer abstract know cousin crouch cake gauge candy bicycle goose inmate chickens',
                'deer panic club above clarify orbit resist illegal feel bus remember aspect field test bubble dog trap awesome hand room rice heavy idle faint salmon'
            ];

            for (const mnemonic of mnemonics) {
                expect(Mnemonic.verify(mnemonic)).toBe(false);
            }
        });
    });

    test('toSeed()', () => {
        const mnemonic =
            'panic club above clarify orbit resist illegal feel bus remember aspect field test bubble dog trap awesome hand room rice heavy idle faint salmon';
        const seed =
            'ff571282e286afed89941355d63af650b11357b9b1ebfafc556d941abc16de75a904e70b0db62461f902b93f167bbe8519d489922f6feb5d348d65a74cf09e28';
        expect(Mnemonic.toSeed(mnemonic).toString('hex')).toBe(seed);
    });
});

'''
'''--- src/core/wallet/hd-wallet/hd-key/hd-key-ed25519.ts ---
const HARDENED_OFFSET = 0x80000000;
const ED25519_CURVE = 'ed25519 seed';

// import createHmac from 'create-hmac'
import { createHmac } from 'crypto';

interface IKeys {
    key: Buffer;
    chainCode: Buffer;
}

const replaceDerive = (val: string): string => val.replace("'", '');

const pathRegex = new RegExp("^m(\\/[0-9]+')+$");

const CKDPriv = ({ key, chainCode }: IKeys, index: number): IKeys => {
    const indexBuffer = Buffer.allocUnsafe(4);
    indexBuffer.writeUInt32BE(index, 0);

    const data = Buffer.concat([Buffer.alloc(1, 0), key, indexBuffer]);

    const I = createHmac('sha512', chainCode)
        .update(data)
        .digest();
    const IL = I.slice(0, 32);
    const IR = I.slice(32);
    return {
        key: IL,
        chainCode: IR
    };
};

const isValidPath = (path: string): boolean => {
    if (!pathRegex.test(path)) {
        return false;
    }
    return !path
        .split('/')
        .slice(1)
        .map(replaceDerive)
        .some(isNaN as any /* ts T_T*/);
};

export const getMasterKeyFromSeed = (seed: string): IKeys => {
    const hmac = createHmac('sha512', ED25519_CURVE);
    const I = hmac.update(Buffer.from(seed, 'hex')).digest();
    const IL = I.slice(0, 32);
    const IR = I.slice(32);
    return {
        key: IL,
        chainCode: IR
    };
};

export class HDKeyEd25519 {
    public static fromMasterSeed(seed: Buffer): HDKeyEd25519 {
        const masterKey = getMasterKeyFromSeed(seed.toString('hex'));
        return new HDKeyEd25519(masterKey.key, masterKey.chainCode);
    }
    constructor(public key: Buffer, public chainCode: Buffer) {}

    public derive(path): HDKeyEd25519 {
        if (!isValidPath(path)) {
            throw new Error('Invalid derivation path');
        }

        const segments = path
            .split('/')
            .slice(1)
            .map(replaceDerive)
            .map(el => parseInt(el, 10));

        const keys = segments.reduce(
            (parentKeys, segment) => CKDPriv(parentKeys, segment + HARDENED_OFFSET),
            { key: this.key, chainCode: this.chainCode }
        );
        return new HDKeyEd25519(keys.key, keys.chainCode);
    }
}

'''
'''--- src/core/wallet/hd-wallet/hd-key/hdkey-factory.ts ---
import { DerivationType } from '../../../blockchain/types';
import HDKey from 'hdkey';
import { HDKeyEd25519 } from './hd-key-ed25519';

export class HDKeyFactory {
    public static get(derivationType: DerivationType, seed: Buffer) {
        switch (derivationType) {
            case DerivationType.HD_KEY:
                return HDKey.fromMasterSeed(seed);
            case DerivationType.HD_KEY_ED25519:
                return HDKeyEd25519.fromMasterSeed(seed);
        }
    }
}

'''
'''--- src/core/wallet/hd-wallet/hd-wallet.ts ---
import { IWallet } from '../types';
import { Mnemonic } from './mnemonic';
import { Blockchain, IBlockchainTransaction, DerivationType } from '../../blockchain/types';
import { getBlockchain } from '../../blockchain/blockchain-factory';
import { AccountType, IAccountState } from '../../../redux/wallets/state';
import { HDKeyFactory } from './hd-key/hdkey-factory';
import { readEncrypted } from '../../secure/storage/storage';
import { getEncryptionKey } from '../../secure/keychain/keychain';
import { captureException as SentryCaptureException } from '@sentry/react-native';

export class HDWallet implements IWallet {
    public static async loadFromStorage(walletId: string, pass: string): Promise<HDWallet> {
        const encryptionKey = await getEncryptionKey(pass);
        const data = await readEncrypted(walletId, encryptionKey);
        return Promise.resolve(new HDWallet(data.toString()));
    }
    private mnemonic: string;
    private seedCache: Buffer;

    constructor(mnemonic: string) {
        if (Mnemonic.verify(mnemonic)) {
            this.mnemonic = mnemonic;
        } else {
            throw new Error('Invalid mnemonic.');
        }
    }

    get seed() {
        if (!this.seedCache) {
            this.seedCache = Mnemonic.toSeed(this.mnemonic);
        }

        return this.seedCache;
    }

    public getAccounts(
        blockchain: Blockchain,
        accountType: AccountType,
        index: number,
        indexTo?: number
    ): Promise<IAccountState[]> {
        indexTo = indexTo || index;

        // if (isNaN(Number(index))) {
        //     return Promise.reject(
        //         `${this.constructor.name}.getAccounts(): index must be a positive number.`
        //     );
        // } else if (index < 0) {
        //     return Promise.reject(
        //         `${this.constructor.name}.getAccounts(): index must be a positive number.`
        //     );
        // }

        if (isNaN(Number(indexTo))) {
            return Promise.reject(
                `${this.constructor.name}.getAccounts(): indexTo must be a positive number.`
            );
        }

        if (indexTo < index) {
            return Promise.reject(
                `${this.constructor.name}.getAccounts(): indexTo value must be greated than index value.`
            );
        }

        try {
            const accounts = [];

            const blockchainInstance = getBlockchain(blockchain);

            const key = HDKeyFactory.get(
                blockchainInstance.config.derivationType,
                this.seed
            ).derive(blockchainInstance.config.derivationPath);
            let fromIndex = index;

            if (accountType === AccountType.ROOT) {
                const privateKey = blockchainInstance.account.getPrivateKeyFromDerived(key);
                accounts.push(blockchainInstance.account.getAccountFromPrivateKey(privateKey, -1));
                fromIndex++;
            }

            for (let i = fromIndex; i <= indexTo; i++) {
                const accountDerivationPath = blockchainInstance.account.getAccountDerivationPath(
                    i
                );

                const derivation = key.derive(`m/${accountDerivationPath}`);

                const privateKey = blockchainInstance.account.getPrivateKeyFromDerived(derivation);
                accounts.push(blockchainInstance.account.getAccountFromPrivateKey(privateKey, i));
            }
            return Promise.resolve(accounts);
        } catch (e) {
            if (e.message.indexOf('implementation not found')) {
                return Promise.reject(`Blockchain implementation not found.`);
            } else {
                return Promise.reject('There was an error while generating the accounts.');
            }
        }
    }

    public getPrivateKey(
        blockchain: Blockchain,
        accountIndex: number,
        accountType: AccountType
    ): string {
        const blockchainInstance = getBlockchain(blockchain);
        const key = HDKeyFactory.get(blockchainInstance.config.derivationType, this.seed).derive(
            blockchainInstance.config.derivationPath
        );

        if (accountType === AccountType.ROOT) {
            return blockchainInstance.account.getPrivateKeyFromDerived(key);
        }

        const derivation = key.derive(
            `m/${blockchainInstance.account.getAccountDerivationPath(accountIndex)}`
        );
        return blockchainInstance.account.getPrivateKeyFromDerived(derivation);
    }

    public async sign(
        blockchain: Blockchain,
        accountIndex: number,
        tx: IBlockchainTransaction,
        accountType: AccountType
    ): Promise<any> {
        return getBlockchain(blockchain).transaction.sign(
            tx,
            this.getPrivateKey(blockchain, accountIndex, accountType)
        );
    }

    signMessage(
        blockchain: Blockchain,
        accountIndex: number,
        accountType: AccountType,
        message: string
    ): Promise<string> {
        return getBlockchain(blockchain).transaction.signMessage(
            message,
            this.getPrivateKey(blockchain, accountIndex, accountType)
        );
    }

    public getMnemonic() {
        return this.mnemonic;
    }

    public getWalletCredentials(): Promise<{ publicKey: string; privateKey: string }> {
        return new Promise((resolve, reject) => {
            try {
                const key = HDKeyFactory.get(DerivationType.HD_KEY, this.seed).derive(
                    `m/${'moonlet'
                        .split('')
                        .map(l => l.charCodeAt(0))
                        .join('/')}`
                );

                const blockchainInstance = getBlockchain(Blockchain.ZILLIQA);
                const privateKey = blockchainInstance.account.getPrivateKeyFromDerived(key);
                const publicKey = blockchainInstance.account.privateToPublic(privateKey);

                resolve({
                    publicKey,
                    privateKey
                });
            } catch (err) {
                SentryCaptureException(new Error(JSON.stringify(err)));
            }
        });
    }
}

'''
'''--- src/core/wallet/hd-wallet/mnemonic.ts ---
import { validateMnemonic, wordlists, mnemonicToSeedSync, entropyToMnemonic } from 'bip39';
import { NativeModules } from 'react-native';

const getRandomBytes: any = (n: number) => {
    return new Promise((resolve, reject) => {
        NativeModules.RNRandomBytes.randomBytes(n, (err: any, base64Bytes: string) => {
            if (err) {
                reject(err);
                return;
            }
            resolve(Buffer.from(base64Bytes, 'base64'));
        });
    });
};

export class Mnemonic {
    public static async generate(words: 12 | 24 = 24): Promise<string> {
        const randomBytesNr = words === 24 ? 32 : 16;

        try {
            const bytes = await getRandomBytes(randomBytesNr);
            const mnemonic = entropyToMnemonic(bytes, wordlists.EN);
            return mnemonic;
        } catch (e) {
            throw new Error(e);
        }
    }

    public static verify(mnemonic: string): boolean {
        return validateMnemonic(mnemonic, wordlists.EN);
    }

    public static toSeed(mnemonic: string): Buffer {
        return mnemonicToSeedSync(mnemonic);
    }
}

'''
'''--- src/core/wallet/hw-wallet/hw-wallet-factory.ts ---
import { HWVendor, HWModel, HWConnection } from './types';
import { LedgerWallet } from './ledger/ledger-wallet';
import { IWallet } from '../types';

export class HWWalletFactory {
    public static async get(
        deviceVendor: HWVendor,
        deviceModel: HWModel,
        deviceId: string,
        connectionType: HWConnection
    ): Promise<IWallet> {
        switch (deviceVendor) {
            case HWVendor.LEDGER: {
                try {
                    return Promise.resolve(new LedgerWallet(deviceModel, connectionType, deviceId));
                } catch (e) {
                    return Promise.reject(e);
                }
            }
            default:
                return Promise.reject(deviceVendor + ' not implemented');
        }
    }
}

'''
'''--- src/core/wallet/hw-wallet/ledger/apps-factory.ts ---
import { Blockchain } from '../../../blockchain/types';
import { Eth } from './apps/eth';
import { Zil } from './apps/zil';
import { Cosmos } from './apps/cosmos';
import { IHardwareWalletApp } from './types';
import { Celo } from './apps/celo';
import { Near } from './apps/near';
import { Solana } from './apps/solana';

export class AppFactory {
    public static async get(
        blockchain: Blockchain,
        transport: Transport
    ): Promise<IHardwareWalletApp> {
        switch (blockchain) {
            case Blockchain.ETHEREUM:
                return new Eth(transport);
            case Blockchain.ZILLIQA:
                return new Zil(transport);
            case Blockchain.COSMOS:
                return new Cosmos(transport);
            case Blockchain.CELO:
                return new Celo(transport);
            case Blockchain.NEAR:
                return new Near(transport);
            case Blockchain.SOLANA:
                return new Solana(transport);
            default:
                return Promise.reject();
        }
    }
}

'''
'''--- src/core/wallet/hw-wallet/ledger/apps/celo.ts ---
import EthApp from '@ledgerhq/hw-app-eth';
import { IHardwareWalletApp } from '../types';
import { IBlockchainTransaction } from '../../../../blockchain/types';
import {
    toHex,
    makeEven,
    trimLeadingZero
} from '../../../../blockchain/celo/library/signing-utils';
import { encode } from '../../../../blockchain/celo/library/rlp';
// import BigNumber from 'bignumber.js';

export class Celo implements IHardwareWalletApp {
    private app: EthApp;
    constructor(transport) {
        this.app = new EthApp(transport);
    }

    public getPath(index, derivationIndex, path) {
        return `44'/52752'/${index}'/0/${derivationIndex}`;
    }

    /**
     * @param {number} index index of account
     * @param {number} derivationIndex index of derivation for an account
     * @param {number} path derivation path, values accepted: live, legacy
     */
    public getAddress(index: number, derivationIndex: number = 0, path: string) {
        return this.app.getAddress(this.getPath(index, derivationIndex, path), true, false);
    }

    public signTransaction = async (
        index: number,
        derivationIndex: number = 0,
        path: string,
        tx: IBlockchainTransaction
    ): Promise<any> => {
        const txData = [
            toHex(tx.nonce),
            toHex(tx.feeOptions.gasPrice),
            toHex(tx.feeOptions.gasLimit),
            '0x', // feeCurrency
            '0x', // gatewayFeeRecipient
            '0x', // gatewayFee
            (tx.toAddress || '0x').toLowerCase(),
            tx.amount === '0' ? '0x' : toHex(tx.amount),
            (tx.data.raw || '0x').toLowerCase(),
            toHex(tx.chainId || 1)
        ];

        const encodedTx = encode(txData.concat(['0x', '0x'])).replace('0x', '');

        const signature = await this.app.signTransaction(
            this.getPath(index, derivationIndex, path),
            encodedTx
        );

        const addToV = Number(tx.chainId) * 2 + 35;
        const rawTx = txData
            .slice(0, 9)
            .concat([toHex(addToV), '0x' + signature.r, '0x' + signature.s]);

        rawTx[9] = makeEven(trimLeadingZero(rawTx[9]));
        rawTx[10] = makeEven(trimLeadingZero(rawTx[10]));
        rawTx[11] = makeEven(trimLeadingZero(rawTx[11]));

        return encode(rawTx);
    };

    public getInfo() {
        return this.app.getAppConfiguration();
    }

    public signMessage = async (
        index: number,
        derivationIndex: number,
        path: string,
        message: string
    ): Promise<any> => {
        throw new Error('signMessage NOT IMPLEMENTED');
    };
}

'''
'''--- src/core/wallet/hw-wallet/ledger/apps/cosmos.ts ---
import CosmosApp from 'ledger-cosmos-js';
import { IHardwareWalletApp } from '../types';
import { IBlockchainTransaction } from '../../../../blockchain/types';
import { signatureImport } from 'secp256k1';
import { sortObject } from '../../../../utils/sort-object';

export class Cosmos implements IHardwareWalletApp {
    private app: CosmosApp;
    constructor(transport) {
        this.app = new CosmosApp(transport);
    }

    /**
     * @param {number} index index of account
     * @param {number} derivationIndex index of derivation for an account
     * @param {number} path derivation path, values accepted: live, legacy
     */
    public async getAddress(index: number, derivationIndex: number = 0, path: string) {
        const derivationPath = [44, 118, 0, 0, index];
        const address = await this.app.getAddressAndPubKey(derivationPath, 'cosmos');

        return {
            address: address.bech32_address,
            publicKey: address.compressed_pk.toString('hex')
        };
    }

    public signTransaction = async (
        index: number,
        derivationIndex: number = 0,
        path: string,
        tx: IBlockchainTransaction
    ): Promise<any> => {
        const derivationPath = [44, 118, 0, 0, index];
        const response = await this.app.sign(
            derivationPath,
            JSON.stringify(sortObject(tx.additionalInfo.stdSignMsg))
        );
        const signatureBase64 = Buffer.from(signatureImport(response.signature)).toString('base64');
        const publicBase64 = Buffer.from(tx.publicKey, 'hex').toString('base64');

        const signedTx = {
            tx: {
                msg: tx.additionalInfo.stdSignMsg.msgs,
                fee: tx.additionalInfo.stdSignMsg.fee,
                signatures: [
                    {
                        signature: signatureBase64,
                        pub_key: {
                            type: 'tendermint/PubKeySecp256k1',
                            value: publicBase64
                        }
                    }
                ],
                memo: tx.additionalInfo.memo
            },
            // The supported return types includes "block"(return after tx commit), "sync"(return afer CheckTx) and "async"(return right away).
            mode: 'sync'
        };

        return signedTx;
    };

    public async getInfo() {
        return new Promise(async (resolve, reject) => {
            const info = await this.app.getVersion();
            if (info.error_message !== 'No errors') {
                return reject();
            }
            resolve(info);
        });
    }

    public signMessage = async (
        index: number,
        derivationIndex: number,
        path: string,
        message: string
    ): Promise<any> => {
        throw new Error('signMessage NOT IMPLEMENTED');
    };
}

'''
'''--- src/core/wallet/hw-wallet/ledger/apps/eth.ts ---
import EthApp from '@ledgerhq/hw-app-eth';
import { byContractAddressAndChainId } from '@ledgerhq/hw-app-eth/erc20';
import { IHardwareWalletApp } from '../types';
import { IBlockchainTransaction } from '../../../../blockchain/types';
import { Transaction } from 'ethereumjs-tx';
import BigNumber from 'bignumber.js';
import { TokenType } from '../../../../blockchain/types/token';

export class Eth implements IHardwareWalletApp {
    private app: EthApp;
    constructor(transport) {
        this.app = new EthApp(transport);
    }

    public getPath(index, derivationIndex, path) {
        switch (path) {
            case 'legacy':
                return `44'/60'/${index}'/${derivationIndex}`;
            case 'live':
            default:
                return `44'/60'/${index}'/0/${derivationIndex}`;
        }
    }

    /**
     * @param {number} index index of account
     * @param {number} derivationIndex index of derivation for an account
     * @param {number} path derivation path, values accepted: live, legacy
     */
    public getAddress(index: number, derivationIndex: number = 0, path: string) {
        return this.app.getAddress(this.getPath(index, derivationIndex, path), true, false);
    }

    public signTransaction = async (
        index: number,
        derivationIndex: number = 0,
        path: string,
        tx: IBlockchainTransaction
    ): Promise<any> => {
        const params = {
            nonce: '0x' + tx.nonce.toString(16),
            gasPrice: '0x' + new BigNumber(tx.feeOptions.gasPrice).toString(16),
            gasLimit: '0x' + new BigNumber(tx.feeOptions.gasLimit).toString(16),
            to: tx.toAddress.toLowerCase(),
            value: '0x' + new BigNumber(tx.amount).toString(16)
        };

        let txParams;

        if (tx.data) {
            txParams = {
                ...params,
                data: tx.data?.raw.toLowerCase()
            };

            if (tx.token.type === TokenType.ERC20) {
                const tokenInfo = byContractAddressAndChainId(
                    tx.toAddress.toLowerCase(),
                    tx.chainId
                );

                if (tokenInfo) await this.app.provideERC20TokenInformation(tokenInfo);
            }
        } else txParams = params;

        const transaction = new Transaction(txParams, {
            chain: tx.chainId
        });

        transaction.raw[6] = Buffer.from([Number(tx.chainId)]); // v
        transaction.raw[7] = Buffer.from([]); // r
        transaction.raw[8] = Buffer.from([]); // s

        const result = await this.app.signTransaction(
            this.getPath(index, derivationIndex, path),
            transaction.serialize().toString('hex')
        );

        transaction.v = Buffer.from(result.v, 'hex');
        transaction.r = Buffer.from(result.r, 'hex');
        transaction.s = Buffer.from(result.s, 'hex');
        return '0x' + transaction.serialize().toString('hex');
    };

    public getInfo() {
        return this.app.getAppConfiguration();
    }

    public signMessage = async (
        index: number,
        derivationIndex: number,
        path: string,
        message: string
    ): Promise<any> => {
        throw new Error('signMessage NOT IMPLEMENTED');
    };
}

'''
'''--- src/core/wallet/hw-wallet/ledger/apps/near.ts ---
import { IBlockchainTransaction } from '../../../../blockchain/types';
import { encode as bs58Encode, decode as bs58Decode } from 'bs58';
import {
    createTransaction,
    transfer,
    functionCall,
    signTransaction
} from 'near-api-js/lib/transaction';
import { PublicKey } from 'near-api-js/lib/utils';

import { base_decode } from 'near-api-js/lib/utils/serialize';
import { NearTransactionActionType } from '../../../../blockchain/near/types';
import BN from 'bn.js';

function bip32PathToBytes(path) {
    const parts = path.split('/');
    return Buffer.concat(
        parts
            .map(part =>
                part.endsWith(`'`)
                    ? // tslint:disable-next-line:no-bitwise
                      Math.abs(parseInt(part.slice(0, -1), 10)) | 0x80000000
                    : Math.abs(parseInt(part, 10))
            )
            .map(i32 =>
                // tslint:disable-next-line:no-bitwise
                Buffer.from([(i32 >> 24) & 0xff, (i32 >> 16) & 0xff, (i32 >> 8) & 0xff, i32 & 0xff])
            )
    );
}

const networkId = 'W'.charCodeAt(0);

export class Near {
    constructor(private transport) {}

    private getPath(index) {
        index = 1;
        return `44'/397'/0'/0'/${index}'`; // +1 because near uses index 1 not 0.
    }

    /**
     * @param {number} index index of account
     * @param {number} derivationIndex index of derivation for an account
     * @param {number} path derivation path, values accepted: live, legacy
     */
    public async getAddress(index: number, derivationIndex: number = 0, path: string) {
        // path = path || DEFAULT_PATH;
        const response = await this.transport.send(
            0x80,
            4,
            0,
            networkId,
            bip32PathToBytes(this.getPath(index))
        );
        const pubKey = bs58Encode(Buffer.from(response.subarray(0, -2)));
        return {
            address: Buffer.from(bs58Decode(pubKey)).toString('hex'),
            publicKey: pubKey
        };
    }

    public signTransaction = async (
        index: number,
        derivationIndex: number = 0,
        path: string,
        tx: IBlockchainTransaction
    ): Promise<any> => {
        // transaction actions
        const actions = tx.additionalInfo.actions
            .map(action => {
                switch (action.type) {
                    case NearTransactionActionType.TRANSFER:
                        return transfer(new BN(tx.amount));

                    case NearTransactionActionType.FUNCTION_CALL:
                        // @ts-ignore
                        return functionCall(...action.params);

                    default:
                        return false;
                }
            })
            .filter(Boolean);

        // create transaction
        const nearTx = createTransaction(
            tx.address,
            PublicKey.fromString(tx.publicKey),
            tx.toAddress,
            tx.nonce,
            actions as any,
            base_decode(tx.additionalInfo.currentBlockHash)
        );

        // const transactionData = nearTx.encode();

        // sign transaction
        const signer: any = {
            signMessage: async transactionData => {
                // 128 - 5 service bytes
                const CHUNK_SIZE = 123;
                const allData = Buffer.concat([
                    bip32PathToBytes(this.getPath(index)),
                    transactionData
                ]);
                for (let offset = 0; offset < allData.length; offset += CHUNK_SIZE) {
                    const chunk = Buffer.from(allData.subarray(offset, offset + CHUNK_SIZE));
                    const isLastChunk = offset + CHUNK_SIZE >= allData.length;
                    const response = await this.transport.send(
                        0x80,
                        2,
                        isLastChunk ? 0x80 : 0,
                        networkId,
                        chunk
                    );
                    if (isLastChunk) {
                        return {
                            signature: Buffer.from(response.subarray(0, -2)),
                            publicKey: PublicKey.fromString(tx.publicKey)
                        };
                    }
                }
            },
            async getPublicKey() {
                return PublicKey.fromString(tx.publicKey);
            }
        };

        const signedTx = await signTransaction(nearTx, signer, tx.address, tx.chainId as string);

        return Buffer.from(signedTx[1].encode()).toString('base64');
    };

    public async getInfo() {
        const response = await this.transport.send(0x80, 6, 0, 0);
        const [major, minor, patch] = Array.from(response);
        return `${major}.${minor}.${patch}`;
    }

    public signMessage = async (
        index: number,
        derivationIndex: number,
        path: string,
        message: string
    ): Promise<any> => {
        throw new Error('signMessage NOT IMPLEMENTED');
    };
}

'''
'''--- src/core/wallet/hw-wallet/ledger/apps/solana-interface.js ---
const bs58 = require('bs58');

const INS_GET_PUBKEY = 0x05;
const INS_GET_APP_CONFIGURATION = 0x04;
const INS_SIGN_MESSAGE = 0x06;

const P1_NON_CONFIRM = 0x00;
const P1_CONFIRM = 0x01;

const P2_EXTEND = 0x01;
const P2_MORE = 0x02;

const MAX_PAYLOAD = 255;

const LEDGER_CLA = 0xe0;

const STATUS_OK = 0x9000;
const BIP32_HARDENED_BIT = (1 << 31) >>> 0;

class Solana {
    constructor(transport) {
        this.transport = transport;
    }
    /*
     * Helper for chunked send of large payloads
     */
    async solana_send(transport, instruction, p1, payload) {
        var p2 = 0;
        var payload_offset = 0;

        if (payload.length > MAX_PAYLOAD) {
            while (payload.length - payload_offset > MAX_PAYLOAD) {
                const buf = payload.slice(payload_offset, payload_offset + MAX_PAYLOAD);
                payload_offset += MAX_PAYLOAD;
                const reply = await transport.send(LEDGER_CLA, instruction, p1, p2 | P2_MORE, buf);
                if (reply.length != 2) {
                    throw new TransportError(
                        'solana_send: Received unexpected reply payload',
                        'UnexpectedReplyPayload'
                    );
                }
                p2 |= P2_EXTEND;
            }
        }

        const buf = payload.slice(payload_offset);
        const reply = await transport.send(LEDGER_CLA, instruction, p1, p2, buf);

        return reply.slice(0, reply.length - 2);
    }

    _harden(n) {
        return (n | BIP32_HARDENED_BIT) >>> 0;
    }

    solana_derivation_path(account, change) {
        var length;
        if (typeof account === 'number') {
            if (typeof change === 'number') {
                length = 4;
            } else {
                length = 3;
            }
        } else {
            length = 2;
        }

        var derivation_path = Buffer.alloc(1 + length * 4);
        var offset = 0;
        offset = derivation_path.writeUInt8(length, offset);
        offset = derivation_path.writeUInt32BE(this._harden(44), offset); // Using BIP44
        offset = derivation_path.writeUInt32BE(this._harden(501), offset); // Solana's BIP44 path

        if (length > 2) {
            offset = derivation_path.writeUInt32BE(this._harden(account), offset);
            if (length == 4) {
                offset = derivation_path.writeUInt32BE(this._harden(change), offset);
            }
        }

        return derivation_path;
    }

    solana_ledger_get_pubkey() {
        return this.solana_send(
            this.transport,
            INS_GET_PUBKEY,
            P1_CONFIRM,
            this.solana_derivation_path()
        );
    }

    async solana_ledger_get_version() {
        return this.solana_send(
            this.transport,
            INS_GET_APP_CONFIGURATION,
            P1_NON_CONFIRM,
            Buffer.from('')
        ).then(info => {
            return `${info[2]}.${info[3]}.${info[4]}`;
        });
    }

    solana_ledger_sign_transaction(transaction) {
        let msg_bytes;
        try {
            msg_bytes = transaction.serializeMessage();
            // XXX: Ledger app only supports a single derivation_path per call ATM
            var num_paths = Buffer.alloc(1);

            num_paths.writeUInt8(1);

            const payload = Buffer.concat([num_paths, this.solana_derivation_path(), msg_bytes]);

            return this.solana_send(this.transport, INS_SIGN_MESSAGE, P1_CONFIRM, payload);
        } catch (e) {
            return;
        }
    }
}

exports.default = Solana;

'''
'''--- src/core/wallet/hw-wallet/ledger/apps/solana.ts ---
import SolanaApp from './solana-interface';
import { IHardwareWalletApp } from '../types';
import { IBlockchainTransaction } from '../../../../blockchain/types';
import { StakeProgram } from '@solana/web3.js/src/stake-program';
import { Transaction } from '@solana/web3.js/src/transaction';
import { SolanaTransactionInstructionType } from '../../../../blockchain/solana/types';
import { PublicKey } from '@solana/web3.js/src/publickey';
import bs58 from 'bs58';
import { Solana as SolanaBlockchain } from '../.././../../blockchain/solana/index';
import { Client as SolanaClient } from '../.././../../blockchain/solana/client';

export class Solana implements IHardwareWalletApp {
    private app = null;
    constructor(transport) {
        this.app = new SolanaApp.default(transport);
    }

    /**
     * @param {number} index index of account
     * @param {number} derivationIndex index of derivation for an account
     * @param {number} path derivation path, values accepted: live, legacy
     */
    public async getAddress(index: number, derivationIndex: number = 0, path: string) {
        const pubkeyBytes = await this.app.solana_ledger_get_pubkey();
        const pubkey = bs58.encode(pubkeyBytes);
        return {
            address: pubkey,
            publicKey: pubkey
        };
    }

    public signTransaction = async (
        index: number,
        derivationIndex: number = 0,
        path: string,
        tx: IBlockchainTransaction
    ): Promise<any> => {
        const client = SolanaBlockchain.getClient(tx.chainId) as SolanaClient;

        let transaction: Transaction;

        switch (tx.additionalInfo.type) {
            case SolanaTransactionInstructionType.CREATE_ACCOUNT_WITH_SEED:
                transaction = StakeProgram.createAccountWithSeed(tx.additionalInfo.instructions[0]);
                break;
            case SolanaTransactionInstructionType.DELEGATE_STAKE:
                transaction = StakeProgram.delegate(tx.additionalInfo.instructions[0]);
                break;
            case SolanaTransactionInstructionType.UNSTAKE:
                transaction = StakeProgram.deactivate(tx.additionalInfo.instructions[0]);
                break;
            case SolanaTransactionInstructionType.SPLIT_STAKE:
                transaction = tx.additionalInfo.splitTransaction;
                break;
            case SolanaTransactionInstructionType.WITHDRAW:
                transaction = StakeProgram.withdraw(tx.additionalInfo.instructions[0]);
                break;

            case SolanaTransactionInstructionType.TRANSFER:
            case SolanaTransactionInstructionType.SWAP:
                transaction = new Transaction();
                for (const i of tx.additionalInfo.instructions) {
                    transaction.add(i);
                }
                break;
        }

        const addressPublicKey = new PublicKey(tx.address);

        transaction.recentBlockhash = await client.getCurrentBlockHash();
        transaction.feePayer = addressPublicKey;

        const sigBytes = await this.app.solana_ledger_sign_transaction(transaction);

        transaction.addSignature(addressPublicKey, sigBytes);
        return transaction.serialize();
    };

    public async getInfo() {
        return this.app.solana_ledger_get_version();
    }

    public signMessage = async (
        index: number,
        derivationIndex: number,
        path: string,
        message: string
    ): Promise<any> => {
        throw new Error('signMessage NOT IMPLEMENTED');
    };
}

'''
'''--- src/core/wallet/hw-wallet/ledger/apps/zil-interface.js ---
const txnEncoder = require('@zilliqa-js/account/dist/util').encodeTransactionProto;
const { BN, Long } = require('@zilliqa-js/util');
const { compressPublicKey } = require('@zilliqa-js/crypto/dist/util');
const chalk = require('chalk');
const { sha256 } = require('js-sha256');

const CLA = 0xe0;
const INS = {
    getVersion: 0x01,
    getPublickKey: 0x02,
    getPublicAddress: 0x02,
    signTxn: 0x04,
    signHash: 0x08
};

const PubKeyByteLen = 33;
const AddrByteLen = 20;
const SigByteLen = 64;
const HashByteLen = 32;
// https://github.com/Zilliqa/Zilliqa/wiki/Address-Standard#specification
const Bech32AddrLen = 'zil'.length + 1 + 32 + 6;

/**
 * Zilliqa API
 *
 * @example
 * import Zil from "@ledgerhq/hw-app-zil";
 * const zil = new Zil(transport)
 */
class Zilliqa {
    constructor(transport, scrambleKey = 'w0w') {
        this.transport = transport;
        transport.decorateAppAPIMethods(
            this,
            ['getVersion', 'getPublicKey', 'getPublicAddress', 'signHash', 'signTxn'],
            scrambleKey
        );
    }

    getVersion() {
        const P1 = 0x00;
        const P2 = 0x00;

        return this.transport.send(CLA, INS.getVersion, P1, P2).then(response => {
            let version = 'v';
            for (let i = 0; i < 3; ++i) {
                version += parseInt('0x' + response[i]);
                if (i !== 2) {
                    version += '.';
                }
            }
            // TODO - in case of HID transport Ziliqa app returns a wrong version
            if (response[0] === 0 || response[0] === 1) return { version };
        });
    }

    getPublicKey(index) {
        const P1 = 0x00;
        const P2 = 0x00;

        let payload = Buffer.alloc(4);
        payload.writeInt32LE(index);

        return this.transport.send(CLA, INS.getPublickKey, P1, P2, payload).then(response => {
            // The first PubKeyByteLen bytes are the public address.
            const publicKey = response.toString('hex').slice(0, PubKeyByteLen * 2);
            return { publicKey };
        });
    }

    getPublicAddress(index) {
        const P1 = 0x00;
        const P2 = 0x01;

        let payload = Buffer.alloc(4);
        payload.writeInt32LE(index);

        return this.transport.send(CLA, INS.getPublicAddress, P1, P2, payload).then(response => {
            // After the first PubKeyByteLen bytes, the remaining is the bech32 address string.
            const publicKey = response.toString('hex').slice(0, PubKeyByteLen * 2);
            const pubAddr = response
                .slice(PubKeyByteLen, PubKeyByteLen + Bech32AddrLen)
                .toString('utf-8');
            return { pubAddr, publicKey };
        });
    }

    signTxn(keyIndex, txnParams) {
        // https://github.com/Zilliqa/Zilliqa-JavaScript-Library/tree/dev/packages/zilliqa-js-account#interfaces
        const P1 = 0x00;
        const P2 = 0x00;

        let indexBytes = Buffer.alloc(4);
        indexBytes.writeInt32LE(keyIndex);

        // Convert to Zilliqa types
        if (!(txnParams.amount instanceof BN)) {
            txnParams.amount = new BN(txnParams.amount);
        }

        if (!(txnParams.gasPrice instanceof BN)) {
            txnParams.gasPrice = new BN(txnParams.gasPrice);
        }

        if (!(txnParams.gasLimit instanceof Long)) {
            txnParams.gasLimit = Long.fromNumber(txnParams.gasLimit);
        }

        var txnBytes = txnEncoder(txnParams);
        const message = JSON.stringify(
            { 'Encoded transaction': txnBytes.toString('hex') },
            null,
            2
        );

        const STREAM_LEN = 128; // Stream in batches of STREAM_LEN bytes each.
        var txn1Bytes;
        if (txnBytes.length > STREAM_LEN) {
            txn1Bytes = txnBytes.slice(0, STREAM_LEN);
            txnBytes = txnBytes.slice(STREAM_LEN, undefined);
        } else {
            txn1Bytes = txnBytes;
            txnBytes = Buffer.alloc(0);
        }

        var txn1SizeBytes = Buffer.alloc(4);
        txn1SizeBytes.writeInt32LE(txn1Bytes.length);
        var hostBytesLeftBytes = Buffer.alloc(4);
        hostBytesLeftBytes.writeInt32LE(txnBytes.length);
        // See signTxn.c:handleSignTxn() for sequence details of payload.
        // 1. 4 bytes for indexBytes.
        // 2. 4 bytes for hostBytesLeftBytes.
        // 3. 4 bytes for txn1SizeBytes (number of bytes being sent now).
        // 4. txn1Bytes of actual data.
        const payload = Buffer.concat([indexBytes, hostBytesLeftBytes, txn1SizeBytes, txn1Bytes]);

        let transport = this.transport;
        return transport
            .send(CLA, INS.signTxn, P1, P2, payload)
            .then(function cb(response) {
                // Keep streaming data into the device till we run out of it.
                // See signTxn.c:istream_callback() for how this is used.
                // Each time the bytes sent consists of:
                //  1. 4-bytes of hostBytesLeftBytes.
                //  2. 4-bytes of txnNSizeBytes (number of bytes being sent now).
                //  3. txnNBytes of actual data.
                if (txnBytes.length > 0) {
                    var txnNBytes;
                    if (txnBytes.length > STREAM_LEN) {
                        txnNBytes = txnBytes.slice(0, STREAM_LEN);
                        txnBytes = txnBytes.slice(STREAM_LEN, undefined);
                    } else {
                        txnNBytes = txnBytes;
                        txnBytes = Buffer.alloc(0);
                    }

                    var txnNSizeBytes = Buffer.alloc(4);
                    txnNSizeBytes.writeInt32LE(txnNBytes.length);
                    hostBytesLeftBytes.writeInt32LE(txnBytes.length);
                    const payload = Buffer.concat([hostBytesLeftBytes, txnNSizeBytes, txnNBytes]);
                    // return transport.exchange(payload).then(cb);
                    return transport.send(CLA, INS.signTxn, P1, P2, payload).then(cb);
                }
                return response;
            })
            .then(result => {
                return {
                    result: result.toString('hex'),
                    sig: result.toString('hex').slice(0, SigByteLen * 2)
                };
            });
    }

    signHash(keyIndex, message) {
        const P1 = 0x00;
        const P2 = 0x00;
        const hashStr = sha256(message);
        let indexBytes = Buffer.alloc(4);
        indexBytes.writeInt32LE(keyIndex);
        const hashBytes = Buffer.from(hashStr, 'hex');
        let hashLen = hashBytes.length;
        if (hashLen <= 0) {
            throw Error(`Hash length ${hashLen} is invalid`);
        }
        if (hashLen > HashByteLen) {
            hashBytes.slice(0, HashByteLen);
        }
        const payload = Buffer.concat([indexBytes, hashBytes]);
        return this.transport.send(CLA, INS.signHash, P1, P2, payload).then(result => {
            return result.toString('hex').slice(0, SigByteLen * 2);
        });
    }
}

exports.default = Zilliqa;

'''
'''--- src/core/wallet/hw-wallet/ledger/apps/zil.ts ---
import ZilApp from './zil-interface';
import * as zcrypto from '@zilliqa-js/crypto';
import { IBlockchainTransaction } from '../../../../blockchain/types';
import BigNumber from 'bignumber.js';
import { isBech32 } from '@zilliqa-js/util/dist/validation';

export class Zil {
    private app = null;
    constructor(transport) {
        this.app = new ZilApp.default(transport);
    }

    /**
     * @param {number} index index of account
     * @param {number} derivationIndex index of derivation for an account
     * @param {number} path derivation path, values accepted: live, legacy
     */
    public getAddress(index: number, derivationIndex: number = 0, path: string) {
        return this.app.getPublicAddress(`${index}`).then(data => {
            return {
                address: data.pubAddr,
                publicKey: data.publicKey
            };
        });
    }

    public signTransaction = async (
        index: number,
        derivationIndex: number = 0,
        path: string,
        tx: IBlockchainTransaction
    ): Promise<any> => {
        const toAddr = isBech32(tx.toAddress)
            ? zcrypto
                  .fromBech32Address(tx.toAddress)
                  .replace('0x', '')
                  .toLowerCase()
            : tx.toAddress.toLowerCase();

        const transaction: any = {
            // tslint:disable-next-line: no-bitwise
            version: (Number(tx.chainId) << 16) + 1,
            nonce: tx.nonce,
            toAddr,
            amount: tx.amount ? new BigNumber(tx.amount).toFixed() : '0',
            pubKey: tx.publicKey,
            gasPrice: new BigNumber(tx.feeOptions.gasPrice).toString(),
            gasLimit: new BigNumber(tx.feeOptions.gasLimit).toNumber(),
            signature: '',
            code: '',
            data: tx.data ? tx.data.raw : '',
            priority: true
        };

        const signed = await this.app.signTxn(index, transaction);

        transaction.signature = signed.sig;
        transaction.amount = transaction.amount.toString();
        transaction.gasLimit = transaction.gasLimit.toString();
        transaction.gasPrice = transaction.gasPrice.toString();
        transaction.toAddr = zcrypto.toChecksumAddress(transaction.toAddr).replace('0x', '');

        return transaction;
    };

    public getInfo() {
        return this.app.getVersion();
    }

    public signMessage = async (
        index: number,
        derivationIndex: number,
        path: string,
        message: string
    ): Promise<string> => {
        const signature = await this.app.signHash(index, message);

        return signature;
    };
}

'''
'''--- src/core/wallet/hw-wallet/ledger/config.ts ---
import { HWConnection } from '../types';
import { isFeatureActive, RemoteFeature } from '../../../utils/remote-feature-config';

export interface ILedgerTransportConfig {
    // ios | android | web
    [platform: string]: {
        // Blockchain
        [blockchains: string]: {
            // Model
            [deviceModel: string]: {
                connectionTypes: HWConnection[];
            };
        };
    };
}

const nanosConnectionConfig = {
    connectionTypes: [HWConnection.USB]
};
const nanoXConnectionConfigBLE = {
    connectionTypes: [HWConnection.BLE]
};
const nanoXConnectionConfigUSB = {
    connectionTypes: [HWConnection.USB]
};

export const ledgerConfigInternal: ILedgerTransportConfig = {
    android: {
        ZILLIQA: {
            NANO_S: nanosConnectionConfig,
            NANO_X: {
                connectionTypes: [HWConnection.BLE, HWConnection.USB]
            }
        },
        NEAR: {
            NANO_S: nanosConnectionConfig,
            NANO_X: {
                connectionTypes: [HWConnection.BLE, HWConnection.USB]
            }
        },
        ETHEREUM: {
            NANO_S: nanosConnectionConfig,
            NANO_X: {
                connectionTypes: [HWConnection.BLE, HWConnection.USB]
            }
        },
        COSMOS: {
            NANO_S: nanosConnectionConfig,
            NANO_X: nanoXConnectionConfigUSB
        },
        CELO: {
            NANO_S: nanosConnectionConfig,
            NANO_X: {
                connectionTypes: [HWConnection.BLE, HWConnection.USB]
            }
        },
        SOLANA: {
            NANO_S: nanosConnectionConfig,
            NANO_X: {
                connectionTypes: [HWConnection.BLE, HWConnection.USB]
            }
        }
    },
    ios: {
        ZILLIQA: {
            NANO_X: nanoXConnectionConfigBLE
        },
        NEAR: {
            NANO_X: nanoXConnectionConfigBLE
        },
        ETHEREUM: {
            NANO_X: nanoXConnectionConfigBLE
        },
        CELO: {
            NANO_X: nanoXConnectionConfigBLE
        },
        SOLANA: {
            NANO_X: nanoXConnectionConfigBLE
        }
    },
    web: {
        ZILLIQA: {
            NANO_S: nanosConnectionConfig
        },
        ETHEREUM: {
            NANO_S: nanosConnectionConfig,
            NANO_X: nanoXConnectionConfigBLE
        },
        COSMOS: {
            NANO_S: nanosConnectionConfig,
            NANO_X: nanoXConnectionConfigUSB
        }
    }
};

export const ledgerSetupConfig = async (): Promise<ILedgerTransportConfig> => {
    return new Promise(async (resolve, reject) => {
        if (!isFeatureActive(RemoteFeature.COSMOS)) {
            delete ledgerConfigInternal.android.COSMOS;
            delete ledgerConfigInternal.ios.COSMOS;
            delete ledgerConfigInternal.web.COSMOS;
        }

        if (!isFeatureActive(RemoteFeature.CELO)) {
            delete ledgerConfigInternal.android.CELO;
            delete ledgerConfigInternal.ios.CELO;
        }

        return resolve(ledgerConfigInternal);
    });
};

'''
'''--- src/core/wallet/hw-wallet/ledger/ledger-wallet.ts ---
import { IWallet } from '../../types';
import { Blockchain, IBlockchainTransaction, DerivationType } from '../../../blockchain/types';
import { AccountType, IAccountState } from '../../../../redux/wallets/state';
import { HWModel, HWConnection } from '../types';
import { AppFactory } from './apps-factory';
import { TransportFactory } from './transport-factory';
import { delay } from '../../../utils/time';
import { HDKeyFactory } from '../../hd-wallet/hd-key/hdkey-factory';
import { getBlockchain } from '../../../blockchain/blockchain-factory';
import { Mnemonic } from '../../hd-wallet/mnemonic';
import { captureException as SentryCaptureException } from '@sentry/react-native';

export enum LedgerSignEvent {
    LOADING = 'LOADING',
    CONNECT_DEVICE = 'CONNECT_DEVICE',
    DEVICE_CONNECTED = 'DEVICE_CONNECTED',
    OPEN_APP = 'OPEN_APP',
    APP_OPENED = 'APP_OPENED',
    DONE = 'DONE',
    ERROR = 'ERROR',
    TERMINATED = 'TERMINATED',

    // TX
    SIGN_TX = 'SIGN_TX',
    TX_SIGNED = 'TX_SIGNED',
    TX_SIGN_DECLINED = 'TX_SIGN_DECLINED',

    // MSG
    SIGN_MSG = 'SIGN_MSG',
    MSG_SIGNED = 'MSG_SIGNED',
    MSG_SIGN_DECLINED = 'MSG_SIGN_DECLINED'
}

export class LedgerWallet implements IWallet {
    private deviceId: string;
    private deviceModel: HWModel;
    private connectionType: HWConnection;

    constructor(deviceModel: HWModel, connectionType: HWConnection, deviceId: string) {
        this.deviceId = deviceId;
        this.deviceModel = deviceModel;
        this.connectionType = connectionType;
    }

    public async isAppOpened(blockchain: Blockchain): Promise<boolean> {
        try {
            const transport = await this.getTransport();
            const app = await AppFactory.get(blockchain, transport);
            const info = await app.getInfo();

            if (info) return true;
            return false;
        } catch {
            return false;
        }
    }

    public onAppOpened(blockchain: Blockchain): Promise<void> {
        return new Promise(async resolve => {
            let opened = false;
            while (opened === false) {
                try {
                    opened = await this.isAppOpened(blockchain);
                } catch {
                    // dont handle error - keep trying until user opens the app
                }
                await delay(1000);
            }
            resolve();
        });
    }

    public async getAccounts(
        blockchain: Blockchain,
        accountType: AccountType,
        index: number,
        indexTo?: number
    ): Promise<IAccountState[]> {
        indexTo = indexTo || index;
        const accounts = [];

        try {
            await this.onAppOpened(blockchain);
            // each time an error generated the pair between app and device is lost and must be reinitiated
            const transport = await this.getTransport();
            const app = await AppFactory.get(blockchain, transport);
            const address = await app.getAddress(index, 0, undefined);

            const account: IAccountState = {
                index,
                type: AccountType.DEFAULT,
                selected: false,
                publicKey: address.publicKey,
                address: address.address,
                blockchain,
                tokens: null
            };
            accounts.push(account);
            return Promise.resolve(accounts);
        } catch (e) {
            Promise.reject('Communication error');
        }
    }

    public async sign(
        blockchain: Blockchain,
        accountIndex: number,
        tx: IBlockchainTransaction
    ): Promise<any> {
        try {
            await this.onAppOpened(blockchain);

            const transport = await this.getTransport();
            const app = await AppFactory.get(blockchain, transport);

            return Promise.resolve(app.signTransaction(accountIndex, 0, undefined, tx));
        } catch (e) {
            return Promise.reject(e);
        }
    }

    public async smartSign(
        blockchain: Blockchain,
        accountIndex: number,
        tx: IBlockchainTransaction,
        cb: (event: LedgerSignEvent) => any,
        setTerminate?: (terminate: () => any) => any
    ): Promise<any> {
        let shouldTerminate = false;
        const terminate = () => {
            shouldTerminate = true;
        };

        const terminateIfNeeded = () => {
            if (shouldTerminate) {
                throw new Error('TERMINATED');
            }
        };

        if (typeof setTerminate === 'function') {
            setTerminate(terminate);
        }

        try {
            terminateIfNeeded();
            // return loading
            cb(LedgerSignEvent.LOADING);

            // detect device, if device is not connected or not found within 300ms, trigger connect device event
            // const connectTimeout = setTimeout(() => cb(LedgerSignEvent.CONNECT_DEVICE), 1000);
            cb(LedgerSignEvent.CONNECT_DEVICE);
            let transport;
            try {
                transport = await this.getTransport();
            } catch (e) {
                // add some delay for the cases of instant fails, CONNECT_DEVICE and ERROR events are too quick triggerd
                await delay(2000);
                throw e;
            }
            terminateIfNeeded();
            cb(LedgerSignEvent.DEVICE_CONNECTED);

            // detect if app is opened
            const appOpenedTimeout = setTimeout(() => cb(LedgerSignEvent.OPEN_APP), 2000);

            await this.onAppOpened(blockchain);

            terminateIfNeeded();
            clearTimeout(appOpenedTimeout);
            cb(LedgerSignEvent.APP_OPENED);

            // review tx
            cb(LedgerSignEvent.SIGN_TX);
            if (this.connectionType === HWConnection.USB) {
                transport = await this.getTransport();
            }
            const app = await AppFactory.get(blockchain, transport);
            terminateIfNeeded();
            const signature = await app.signTransaction(accountIndex, 0, undefined, tx);
            terminateIfNeeded();
            cb(LedgerSignEvent.TX_SIGNED);

            cb(LedgerSignEvent.DONE);
            return signature;
        } catch (e) {
            if (e !== 'TERMINATED') {
                const message = e?.message || '';
                if (message?.indexOf('denied by the user') >= 0) {
                    cb(LedgerSignEvent.TX_SIGN_DECLINED);
                } else {
                    cb(LedgerSignEvent.ERROR);
                }
            } else {
                cb(LedgerSignEvent.TERMINATED);
            }
            return Promise.reject(e);
        }
    }

    signMessage(
        blockchain: Blockchain,
        accountIndex: number,
        accountType: AccountType,
        message: string
    ): Promise<string> {
        throw new Error('Method not implemented.');
    }

    public async smartSignMessage(
        blockchain: Blockchain,
        accountIndex: number,
        msg: string,
        cb: (event: LedgerSignEvent) => any,
        setTerminate?: (terminate: () => any) => any
    ): Promise<any> {
        let shouldTerminate = false;
        const terminate = () => {
            shouldTerminate = true;
        };

        const terminateIfNeeded = () => {
            if (shouldTerminate) {
                throw new Error('TERMINATED');
            }
        };

        if (typeof setTerminate === 'function') {
            setTerminate(terminate);
        }

        try {
            terminateIfNeeded();
            // return loading
            cb(LedgerSignEvent.LOADING);

            // detect device, if device is not connected or not found within 300ms, trigger connect device event
            // const connectTimeout = setTimeout(() => cb(LedgerSignEvent.CONNECT_DEVICE), 1000);
            cb(LedgerSignEvent.CONNECT_DEVICE);
            let transport;
            try {
                transport = await this.getTransport();
            } catch (e) {
                // add some delay for the cases of instant fails, CONNECT_DEVICE and ERROR events are too quick triggerd
                await delay(2000);
                throw e;
            }
            terminateIfNeeded();
            cb(LedgerSignEvent.DEVICE_CONNECTED);

            // detect if app is opened
            const appOpenedTimeout = setTimeout(() => cb(LedgerSignEvent.OPEN_APP), 2000);
            await this.onAppOpened(blockchain);
            terminateIfNeeded();
            clearTimeout(appOpenedTimeout);
            cb(LedgerSignEvent.APP_OPENED);

            // review message
            cb(LedgerSignEvent.SIGN_MSG);
            if (this.connectionType === HWConnection.USB) {
                transport = await this.getTransport();
            }
            const app = await AppFactory.get(blockchain, transport);
            terminateIfNeeded();
            const signature = await app.signMessage(accountIndex, 0, undefined, msg);
            terminateIfNeeded();
            cb(LedgerSignEvent.MSG_SIGNED);

            cb(LedgerSignEvent.DONE);
            return signature;
        } catch (e) {
            if (e !== 'TERMINATED') {
                const message = e?.message || '';
                if (message?.indexOf('denied by the user') >= 0) {
                    cb(LedgerSignEvent.MSG_SIGN_DECLINED);
                } else {
                    cb(LedgerSignEvent.ERROR);
                }
            } else {
                cb(LedgerSignEvent.TERMINATED);
            }
            return Promise.reject(e);
        }
    }

    public getTransport() {
        return TransportFactory.get(this.deviceModel, this.connectionType, this.deviceId);
    }

    public getPrivateKey(blockchain: Blockchain, accountIndex: number): string {
        return 'Method not implemented.';
    }

    public async getWalletCredentials(): Promise<{ publicKey: string; privateKey: string }> {
        try {
            const mnemonic = await Mnemonic.generate(12);

            const key = HDKeyFactory.get(DerivationType.HD_KEY, Buffer.from(mnemonic)).derive(
                `m/${'moonlet'
                    .split('')
                    .map(l => l.charCodeAt(0))
                    .join('/')}`
            );

            const blockchainInstance = getBlockchain(Blockchain.ZILLIQA);
            const privateKey = blockchainInstance.account.getPrivateKeyFromDerived(key);
            const publicKey = blockchainInstance.account.privateToPublic(privateKey);

            return {
                publicKey,
                privateKey
            };
        } catch (err) {
            SentryCaptureException(new Error(JSON.stringify(err)));
        }
    }
}

'''
'''--- src/core/wallet/hw-wallet/ledger/transport-factory.ts ---
import { HWModel, HWConnection } from '../types';
import { BLE } from './transport/transport-ble';
import { USB } from './transport/transport-usb';

export class TransportFactory {
    public static async get(
        deviceModel: HWModel,
        connectionType: HWConnection,
        deviceId?: string
    ): Promise<Transport> {
        if (connectionType === HWConnection.BLE) {
            return BLE.get(deviceId);
        } else {
            return USB.get();
        }
    }
    public static async scan(
        connectionType: HWConnection,
        callback: (event: { name: string; data?: any }) => any
    ): Promise<any> {
        if (connectionType === HWConnection.BLE) {
            return BLE.scan(callback);
        } else {
            return USB.scan(callback);
        }
    }
    public static async connect(connectionType: HWConnection, device): Promise<Transport> {
        if (connectionType === HWConnection.BLE) {
            return BLE.connect(device.id);
        } else {
            return USB.connect(device);
        }
    }

    public static async requestPermissions(connectionType: HWConnection): Promise<boolean> {
        if (connectionType === HWConnection.BLE) {
            return BLE.requestPermissions();
        } else {
            return true;
        }
    }
}

'''
'''--- src/core/wallet/hw-wallet/ledger/transport/transport-ble.ts ---
import TransportBLE from '@ledgerhq/react-native-hw-transport-ble';
import { Platform, PermissionsAndroid } from 'react-native';
import Geolocation from '@react-native-community/geolocation';

let transportOpenInProgress = false;
let transportPromise;

export class BLE {
    public static async get(deviceId): Promise<Transport> {
        return this.connect(deviceId);
    }

    public static async connect(deviceId): Promise<Transport> {
        if (transportOpenInProgress && transportPromise) {
            return transportPromise;
        }
        try {
            transportOpenInProgress = true;
            transportPromise = TransportBLE.open(deviceId);
            transportOpenInProgress = false;
        } catch (e) {
            transportOpenInProgress = false;
            return Promise.reject(e);
        }

        return transportPromise;
    }

    public static async scan(callback: (event: { name: string; data?: any }) => any): Promise<any> {
        await BLE.requestPermissions();

        return TransportBLE.listen({
            complete: e => {
                callback({ name: 'scanEnded' });
            },
            next: async e => {
                if (e.type === 'add') {
                    callback({ name: 'deviceFound', data: e.descriptor });
                }
            },
            error: error => {
                callback({ name: 'scanError', data: error });
            }
        });
    }

    public static async requestPermissions(): Promise<boolean> {
        if (Platform.OS === 'android') {
            const granted = await PermissionsAndroid.check(
                PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION
            );

            return new Promise(resolve => {
                Geolocation.getCurrentPosition(
                    async info => {
                        if (info) {
                            if (granted) resolve(true);
                            else {
                                const requested = await PermissionsAndroid.request(
                                    PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION
                                );
                                resolve(requested === PermissionsAndroid.RESULTS.GRANTED);
                            }
                        } else resolve(false);
                    },
                    error => {
                        resolve(false);
                    },
                    { enableHighAccuracy: false, timeout: 20000, maximumAge: 1000 }
                );
            });
        }
        return true;
    }
}

'''
'''--- src/core/wallet/hw-wallet/ledger/transport/transport-usb.ts ---
import TransportHID from '@ledgerhq/react-native-hid';
import { translate } from '../../../../i18n';

export class USB {
    public static async get(): Promise<Transport> {
        const isSupported = await TransportHID.isSupported();
        if (isSupported === false) {
            return Promise.reject(translate('CreateHardwareWallet.notSupported'));
        }

        return TransportHID.create();
    }

    public static async scan(callback: (event: { name: string; data?: any }) => any): Promise<any> {
        return TransportHID.listen({
            complete: e => {
                callback({ name: 'scanEnded' });
            },
            next: async e => {
                if (e.type === 'add') {
                    callback({ name: 'deviceFound', data: e.descriptor });
                }
            },
            error: error => {
                // todo handle possible errors
            }
        });
    }

    public static async connect(device): Promise<Transport> {
        return TransportHID.open(device);
    }
}

'''
'''--- src/core/wallet/hw-wallet/ledger/types.ts ---
import { IBlockchainTransaction } from '../../../blockchain/types';

export interface IHardwareWalletApp {
    getAddress(
        index: number,
        derivationIndex: number,
        path: string
    ): Promise<{ publicKey: string; address: string }>;
    signTransaction(
        index: number,
        derivationIndex: number,
        path: string,
        txRaw: IBlockchainTransaction
    ): Promise<any>;
    getInfo();
    signMessage(
        index: number,
        derivationIndex: number,
        path: string,
        message: string
    ): Promise<any>;
}

'''
'''--- src/core/wallet/hw-wallet/types.ts ---
export enum HWVendor {
    LEDGER = 'LEDGER',
    TREZOR = 'TREZOR'
}

export enum HWModel {
    NANO_S = 'NANO_S',
    NANO_X = 'NANO_X'
}

export enum HWConnection {
    USB = 'USB',
    U2F = 'U2F',
    BLE = 'BLE'
}

export type ConnectionType = HWConnection[];

'''
'''--- src/core/wallet/types.ts ---
import { Blockchain, IBlockchainTransaction } from '../blockchain/types';
import { AccountType, IAccountState } from '../../redux/wallets/state';

export enum WalletType {
    HD = 'HD',
    HW = 'HW'
}

export enum TransactionStatus {
    CREATED = 'CREATED',
    DROPPED = 'DROPPED',
    FAILED = 'FAILED',
    PENDING = 'PENDING',
    SIGNED = 'SIGNED',
    SUCCESS = 'SUCCESS'
}

export interface IWallet {
    getAccounts(
        blockchain: Blockchain,
        accountType: AccountType,
        index: number,
        indexTo?: number
    ): Promise<IAccountState[]>;
    sign(
        blockchain: Blockchain,
        accountIndex: number,
        tx: IBlockchainTransaction,
        accountType: AccountType
    ): Promise<string>;
    signMessage(
        blockchain: Blockchain,
        accountIndex: number,
        accountType: AccountType,
        message: string
    ): Promise<string>;
    getPrivateKey(blockchain: Blockchain, accountIndex: number, accountType: AccountType): string;
    getWalletCredentials(): Promise<{ publicKey: string; privateKey: string }>;
}

'''
'''--- src/core/wallet/wallet-factory.ts ---
import { WalletType, IWallet } from './types';
import { HDWallet } from './hd-wallet/hd-wallet';
import { HWVendor, HWModel, HWConnection } from './hw-wallet/types';
import { HWWalletFactory } from './hw-wallet/hw-wallet-factory';

export class WalletFactory {
    public static async get(
        walletId: string,
        walletType: WalletType,
        options: {
            pass?: string;
            deviceVendor?: HWVendor;
            deviceModel?: HWModel;
            deviceId?: string;
            connectionType?: HWConnection;
        }
    ): Promise<IWallet> {
        switch (walletType) {
            case WalletType.HD:
                return HDWallet.loadFromStorage(walletId, options.pass);
            case WalletType.HW:
                return HWWalletFactory.get(
                    options.deviceVendor,
                    options.deviceModel,
                    options.deviceId,
                    options.connectionType
                );
            default:
                return HDWallet.loadFromStorage(walletId, options.pass);
        }
    }
}

'''
'''--- src/library/button/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BORDER_RADIUS, BASE_DIMENSION, normalizeFontAndLineHeight } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexDirection: 'column'
        },
        button: {
            flexDirection: 'row',
            borderWidth: 1,
            borderColor: theme.colors.accentSecondary,
            borderRadius: BORDER_RADIUS,
            paddingHorizontal: BASE_DIMENSION,
            justifyContent: 'center'
        },
        text: {
            lineHeight: normalizeFontAndLineHeight(22),
            fontWeight: 'bold',
            textAlign: 'center',
            color: theme.colors.accent,
            alignSelf: 'center'
        },
        buttonPrimary: {
            backgroundColor: theme.colors.accent,
            borderColor: theme.colors.accent
        },
        buttonSecondary: {
            borderColor: theme.colors.textSecondary
        },
        textPrimary: {
            color: theme.colors.appBackground
        },
        textSecondary: {
            color: theme.colors.text
        },
        buttonDisabled: {
            backgroundColor: theme.colors.disabledButton,
            borderColor: theme.colors.disabledButton
        },
        buttonDisabledSecondary: {
            backgroundColor: theme.colors.appBackground,
            borderColor: theme.colors.textTertiary
        },
        textDisabled: {
            color: theme.colors.cardBackground
        },
        textDisabledSecondary: {
            color: theme.colors.textTertiary
        },
        leftIcon: {
            color: theme.colors.accent,
            alignSelf: 'center'
        },
        leftIconPrimary: {
            color: theme.colors.appBackground,
            alignSelf: 'center'
        },
        bottomLabel: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            color: theme.colors.text,
            marginTop: BASE_DIMENSION / 2,
            textAlign: 'center'
        }
    });

'''
'''--- src/library/checkbox/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION, normalizeFontAndLineHeight } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            flexDirection: 'row'
        },
        icon: {
            color: theme.colors.accent,
            paddingRight: BASE_DIMENSION,
            paddingTop: BASE_DIMENSION / 4
        },
        text: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.textSecondary
        }
    });

'''
'''--- src/library/image/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { ICON_SIZE } from '../../styles/dimensions';

const iconSmallSize = ICON_SIZE;
const iconLargeSize = ICON_SIZE + ICON_SIZE / 2;

export default (theme: ITheme) =>
    StyleSheet.create({
        icon: {
            alignSelf: 'center'
        },
        small: {
            width: iconSmallSize,
            height: iconSmallSize
        },
        large: {
            width: iconLargeSize,
            height: iconLargeSize
        }
    });

'''
'''--- src/library/index.ts ---
export * from './button/button';
export * from './text/text';
export * from './checkbox/checkbox';
export * from './tab-select/tab-select';
export * from './swipeable/swipeable';

'''
'''--- src/library/modal/ModalWrapperHelper.ts ---
const modalInstances = [];
const listeners = [];

export const attachListener = listener => {
    if (listeners.indexOf(listener) > -1) {
        return;
    }
    listeners.push(listener);
};

export const pushInstance = instance => {
    if (modalInstances.includes(instance)) {
        return;
    }
    modalInstances.push(instance);
    notifyInstances(modalInstances.length, modalInstances[0]);
};

export const notifyInstances = (length, topModalInstance) => {
    listeners.forEach(listener => {
        listener(length, topModalInstance);
    });
};

export const removeInstance = instance => {
    if (instance === modalInstances[0]) {
        modalInstances.shift();
        notifyInstances(modalInstances.length, modalInstances[0]);
    }
};

export const removeInstanceOnUnmount = (instance, listener) => {
    if (modalInstances.indexOf(instance) > -1) {
        modalInstances.splice(modalInstances.indexOf(instance), 1);
    }

    if (listeners.indexOf(listener) > -1) {
        listeners.splice(listeners.indexOf(listener), 1);
    }
};

'''
'''--- src/library/swipeable/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { normalize } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            borderWidth: 1,
            borderColor: theme.colors.accent,
            flexDirection: 'row',
            width: '100%',
            height: normalize(40)
        },

        tabButton: {
            borderWidth: 1,
            borderColor: theme.colors.accent,
            flexBasis: 0,
            flex: 1,
            alignItems: 'center',
            justifyContent: 'center'
        },
        tabButtonText: {},
        tabButtonSelected: {
            backgroundColor: theme.colors.accent
        },
        tabButtonTextSelected: {
            color: theme.colors.appBackground
        }
    });

'''
'''--- src/library/tab-select/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION, BORDER_RADIUS, normalizeFontAndLineHeight } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            marginHorizontal: BASE_DIMENSION * 3,
            borderWidth: 1,
            borderColor: theme.colors.accent,
            borderRadius: BORDER_RADIUS,
            flexDirection: 'row',
            alignSelf: 'center'
        },
        tabButton: {
            flexBasis: 0,
            flex: 1,
            alignItems: 'center',
            justifyContent: 'center',
            paddingVertical: BASE_DIMENSION,
            paddingHorizontal: BASE_DIMENSION * 3
        },
        smallTabButton: {
            paddingVertical: BASE_DIMENSION,
            paddingHorizontal: BASE_DIMENSION * 3
        },
        tabButtonText: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            color: theme.colors.text
        },
        tabButtonSelected: {
            backgroundColor: theme.colors.accent
        },
        tabButtonTextSelected: {
            color: theme.colors.appBackground
        }
    });

'''
'''--- src/library/text/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { normalizeFontAndLineHeight } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        default: {
            color: theme.colors.text,
            fontFamily: 'System',
            fontSize: normalizeFontAndLineHeight(theme.fontSize.regular)
        },
        darker: {
            color: theme.colors.textSecondary
        },
        small: {
            fontSize: normalizeFontAndLineHeight(theme.fontSize.small)
        },
        large: {
            fontSize: normalizeFontAndLineHeight(theme.fontSize.large)
        }
    });

'''
'''--- src/navigation/navigation-service.ts ---
import { NavigationActions, StackActions, NavigationParams } from 'react-navigation';

export const NavigationService = (() => {
    let navigator;

    const setTopLevelNavigator = navigatorRef => {
        navigator = navigatorRef;
    };

    const navigate = (routeName: string, params: NavigationParams, key?: string) => {
        navigator?.dispatch(
            NavigationActions.navigate({
                routeName,
                params,
                action: undefined,
                key
            })
        );
    };

    const replace = (routeName: string, params: NavigationParams, key?: string) => {
        navigator?.dispatch(
            StackActions.replace({
                routeName,
                params,
                key
            })
        );
    };

    const popToTop = () => {
        navigator?.dispatch(StackActions.popToTop());
    };

    const pop = (
        count: number = 1,
        options?: {
            immediate?: boolean;
            prune?: boolean;
            key?: string;
        }
    ) => {
        navigator?.dispatch(
            StackActions.pop({
                n: count,
                immediate: options?.immediate
            })
        );
    };

    const goBack = (key?: string) => {
        navigator?.dispatch(NavigationActions.back({ key }));
    };

    const getRecursiveRoute = routeState => {
        if (Array.isArray(routeState.routes)) {
            return getRecursiveRoute(routeState.routes[routeState.index]);
        } else {
            return routeState.routeName;
        }
    };

    const getRecursiveRouteWithParams = (routeState: any) => {
        if (Array.isArray(routeState.routes)) {
            return getRecursiveRouteWithParams(routeState.routes[routeState.index]);
        } else {
            return {
                routeName: routeState.routeName,
                params: routeState?.params
            };
        }
    };

    const getCurrentRoute = () => navigator && getRecursiveRoute(navigator.state.nav);

    const getCurrentRouteWithParams = () =>
        navigator && getRecursiveRouteWithParams(navigator.state.nav);

    return {
        getCurrentRoute,
        getCurrentRouteWithParams,
        goBack,
        navigate,
        pop,
        popToTop,
        replace,
        setTopLevelNavigator
    };
})();

'''
'''--- src/react-native-web/react-native-device-info.js ---
module.exports = {
    getVersion: () => process.env.VERSION,
    getUniqueId: () => 'testId',
    getBundleId: () => {
        return process.env.TARGET === 'beta' ? 'com.moonlet.beta' : 'com.moonlet';
    },
    getReadableVersion: () => process.env.VERSION,
    getFontScaleSync: () => 1
};

'''
'''--- src/redux/__mocks__/config.ts ---
const subscribers: any[] = [];

export const store = {
    dispatch: jest.fn(),
    getState: jest.fn().mockReturnValue({ _persist: { rehydrated: true } }),
    subscribe: jest.fn((cb: any) => {
        subscribers.push(cb);
    })
};

export const triggerStoreSubscribe = (...params: any[]) => {
    for (const sub of subscribers) {
        sub(...params);
    }
};

'''
'''--- src/redux/app/__tests__/actions.test.ts ---
import { appSetAcceptedTcVersion } from '../actions';

describe('app actions', () => {
    test('app action creators', () => {
        expect(appSetAcceptedTcVersion(1)).toMatchSnapshot();
    });
});

'''
'''--- src/redux/app/__tests__/reducer.test.ts ---
import reducer from '../reducer';
import { SET_ACCEPTED_TC_VERSION } from '../actions';

describe('app reducer', () => {
    test('should set initial state', () => {
        expect(
            reducer(undefined as any, {
                type: '',
                data: ''
            })
        ).toMatchSnapshot();
    });

    test('should handle SET_TC_VERSION', () => {
        expect(
            reducer(undefined as any, {
                type: SET_ACCEPTED_TC_VERSION,
                data: 3
            }).tcAcceptedVersion
        ).toBe(3);
    });
});

'''
'''--- src/redux/app/actions.ts ---
import { HintsComponent, HintsScreen } from './state';
import { IReduxState } from '../state';
import { clearPinCode } from '../../core/secure/keychain/keychain';
import { Platform } from 'react-native';

export const SET_ACCEPTED_TC_VERSION = 'SET_ACCEPTED_TC_VERSION';
export const SHOW_HINT = 'SHOW_HINT';
export const RESET_FAILED_LOGINS = 'RESET_FAILED_LOGINS';
export const INCREMENT_FAILED_LOGINS = 'INCREMENT_FAILED_LOGINS';
export const SET_APP_BLOCK_UNTIL = 'SET_APP_BLOCK_UNTIL';
export const RESET_ALL_DATA = 'RESET_ALL_DATA';
export const EXTENSION_UPDATE_STATE = 'EXTENSION_UPDATE_STATE';

export const appSetAcceptedTcVersion = (version: number) => {
    return {
        type: SET_ACCEPTED_TC_VERSION,
        data: version
    };
};

export const updateDisplayedHint = (screen: HintsScreen, component: HintsComponent) => {
    return {
        type: SHOW_HINT,
        data: { screen, component }
    };
};

export const incrementFailedLogins = () => {
    return {
        type: INCREMENT_FAILED_LOGINS
    };
};

export const resetFailedLogins = () => {
    return {
        type: RESET_FAILED_LOGINS
    };
};

export const setAppBlockUntil = (date: Date | string) => {
    return {
        type: SET_APP_BLOCK_UNTIL,
        data: { date }
    };
};

export const resetAllData = () => async (dispatch, getState: () => IReduxState) => {
    Platform.OS !== 'web' && clearPinCode(); // clear keychain storage
    dispatch({ type: RESET_ALL_DATA });
};

export const extensionReduxUpdateState = (state: any) => dispatch => {
    dispatch({
        type: EXTENSION_UPDATE_STATE,
        data: { state }
    });
};

'''
'''--- src/redux/app/reducer.ts ---
import { IAppState } from './state';
import { IAction } from '../types';
import {
    SET_ACCEPTED_TC_VERSION,
    SHOW_HINT,
    RESET_FAILED_LOGINS,
    INCREMENT_FAILED_LOGINS,
    SET_APP_BLOCK_UNTIL,
    RESET_ALL_DATA,
    EXTENSION_UPDATE_STATE
} from './actions';

const intialState: IAppState = {
    version: 1,
    tcAcceptedVersion: undefined,
    hints: {
        SEND_SCREEN: {
            ADDRESS_BOOK: 0
        },
        WALLETS_SCREEN: {
            WALLETS_LIST: 0
        },
        MANAGE_ACCOUNT: {
            TOKENS_LIST: 0
        }
    },
    failedLogins: 0,
    blockUntil: undefined
};

export default (state: IAppState = intialState, action: IAction): IAppState => {
    switch (action.type) {
        case SET_ACCEPTED_TC_VERSION:
            return {
                ...state,
                tcAcceptedVersion: action.data
            };

        case SHOW_HINT:
            return {
                ...state,
                hints: {
                    ...state.hints,
                    [action.data.screen]: {
                        [action.data.component]:
                            state.hints[action.data.screen][action.data.component] + 1
                    }
                }
            };

        case RESET_FAILED_LOGINS:
            return {
                ...state,
                failedLogins: 0
            };

        case INCREMENT_FAILED_LOGINS:
            return {
                ...state,
                failedLogins: state.failedLogins + 1
            };

        case SET_APP_BLOCK_UNTIL:
            return {
                ...state,
                blockUntil: action.data.date
            };

        case RESET_ALL_DATA:
            return intialState;

        case EXTENSION_UPDATE_STATE: {
            return {
                ...state,
                version: action.data.state.app.version
            };
        }

        default:
            break;
    }
    return state;
};

'''
'''--- src/redux/app/state.ts ---
export interface IAppState {
    version: number;
    tcAcceptedVersion: number;
    hints: IHints;
    failedLogins: number;
    blockUntil: Date | string;
}

export interface IHints {
    SEND_SCREEN: {
        ADDRESS_BOOK: number;
    };
    WALLETS_SCREEN: {
        WALLETS_LIST: number;
    };
    MANAGE_ACCOUNT: {
        TOKENS_LIST: number;
    };
}

export enum HintsScreen {
    SEND_SCREEN = 'SEND_SCREEN',
    WALLETS_SCREEN = 'WALLETS_SCREEN',
    MANAGE_ACCOUNT = 'MANAGE_ACCOUNT'
}

export enum HintsComponent {
    ADDRESS_BOOK = 'ADDRESS_BOOK',
    WALLETS_LIST = 'WALLETS_LIST',
    TOKENS_LIST = 'TOKENS_LIST'
}

'''
'''--- src/redux/config.ts ---
import { createStore, combineReducers, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';
import { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';
import { persistReducer, persistStore } from 'redux-persist';
import { persistConfig } from './utils/persistConfig';
import walletsReducer from './wallets/reducer';
import appReducer from './app/reducer';
import marketReducer from './market/reducer';
import prefReducer from './preferences/reducer';
import contactsReducer from './contacts/reducer';
import notificationsReducer from './notifications/reducer';
import validatorsReducer from './ui/validators/reducer';
import { uiReducer } from './ui/reducer';
import tokensReducer from './tokens/reducer';

const composeEnhancers = composeWithDevTools({
    // options like actionSanitizer, stateSanitizer
});

export const rootReducer = combineReducers({
    app: appReducer,
    wallets: walletsReducer,
    tokens: tokensReducer,
    market: marketReducer,
    preferences: prefReducer,
    ui: uiReducer,
    contacts: contactsReducer,
    notifications: notificationsReducer,
    validators: validatorsReducer
});

const configureStore = () => {
    return createStore(
        persistReducer(persistConfig, rootReducer),
        {},
        composeEnhancers(applyMiddleware(thunk)) // logger: for debugging
    );
};

let _store;
let _persistor;

_store = configureStore();
_persistor = persistStore(_store);

export const store = _store;

export const persistor = _persistor;

'''
'''--- src/redux/config.web-wallet.ts ---
import { createStore, combineReducers, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';
import { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';
import { persistReducer } from 'redux-persist';
import { persistConfig } from './utils/persistConfig';
import appReducer from './app/reducer';
import marketReducer from './market/reducer';
import { uiReducer } from './ui/reducer';
// import logger from 'redux-logger';

const composeEnhancers = composeWithDevTools({
    // options like actionSanitizer, stateSanitizer
});

const dummyReducer = (state = {}): any => state;

export const rootReducer = combineReducers({
    app: appReducer,
    tokens: dummyReducer,
    market: marketReducer,
    ui: uiReducer,
    wallets: dummyReducer,
    contacts: dummyReducer,
    preferences: dummyReducer,
    notifications: dummyReducer
});

const configureStore = () => {
    return createStore(
        persistReducer(persistConfig, rootReducer),
        {},
        composeEnhancers(applyMiddleware(thunk)) // logger: for debugging
    );
};

export const store = configureStore();

'''
'''--- src/redux/contacts/actions.ts ---
import { Dispatch } from 'redux';
import { translate } from '../../core/i18n';
import { IAction } from '../types';
import { Blockchain } from '../../core/blockchain/types';
import { Dialog } from '../../components/dialog/dialog';

// actions consts
export const CONTACT_ADD = 'CONTACT_ADD';
export const CONTACT_DELETE = 'CONTACT_DELETE';
export const CONTACT_UPDATE_NAME = 'CONTACT_UPDATE_NAME';

export const addContact = (blockchain: Blockchain, address: string) => async (
    dispatch: Dispatch<IAction<any>>
) => {
    const inputValue = await Dialog.prompt(
        translate('Send.alertTitle'),
        translate('Send.alertDescription')
    );

    if (inputValue !== '') {
        dispatch({
            type: CONTACT_ADD,
            data: {
                blockchain,
                address,
                name: inputValue
            }
        });
    }
};

export const deleteContact = (blockchain: Blockchain, address: string) => async (
    dispatch: Dispatch<IAction<any>>
) => {
    if (await Dialog.confirm(translate('Send.deleteContact'), '')) {
        dispatch({
            type: CONTACT_DELETE,
            data: { blockchain, address }
        });
    }
};

export const updateContactName = (blockchain: Blockchain, address: string) => async (
    dispatch: Dispatch<IAction<any>>
) => {
    const inputValue: string = await Dialog.prompt(
        translate('Send.alertEditTitle'),
        translate('Send.alertEditDescription')
    );

    if (inputValue !== '') {
        dispatch({
            type: CONTACT_UPDATE_NAME,
            data: {
                blockchain,
                address,
                name: inputValue
            }
        });
    }
};

'''
'''--- src/redux/contacts/reducer.ts ---
import { IAction } from '../types';
import { IContactsState } from './state';
import { CONTACT_ADD, CONTACT_DELETE, CONTACT_UPDATE_NAME } from './actions';
import { RESET_ALL_DATA, EXTENSION_UPDATE_STATE } from '../app/actions';

const initialState: IContactsState = {};

export default (state: IContactsState = initialState, action: IAction) => {
    switch (action.type) {
        case CONTACT_ADD:
            return {
                ...state,
                [`${action.data.blockchain}|${action.data.address}`]: action.data
            };

        case CONTACT_DELETE:
            delete state[`${action.data.blockchain}|${action.data.address}`];
            return { ...state };

        case CONTACT_UPDATE_NAME:
            return {
                ...state,
                [`${action.data.blockchain}|${action.data.address}`]: {
                    ...state[`${action.data.blockchain}|${action.data.address}`],
                    name: action.data.name
                }
            };

        case RESET_ALL_DATA:
            return initialState;

        case EXTENSION_UPDATE_STATE: {
            return action.data.state.contacts;
        }

        default:
            break;
    }
    return state;
};

'''
'''--- src/redux/contacts/selectors.ts ---
import { SectionListData } from 'react-native';
import { IReduxState } from '../state';
import { IContactsState } from './state';
import { Blockchain } from '../../core/blockchain/types';

export const getContacts = (state: IReduxState): IContactsState => state.contacts;

export const selectContacts = (
    state: IReduxState,
    blockchain: Blockchain
): ReadonlyArray<SectionListData<IContactsState>> => {
    let currentLetter = '';

    return Object.values(state.contacts)
        .filter(c => c.blockchain === blockchain)
        .sort((a, b) => (a.name > b.name ? 1 : -1))
        .reduce((sortedList = [], contact) => {
            const firstLetter = contact.name[0];
            if (firstLetter !== currentLetter) {
                currentLetter = firstLetter;
                sortedList.push({
                    title: firstLetter.toUpperCase(),
                    data: []
                });
            }

            sortedList[sortedList.length - 1].data.push(contact);
            return sortedList;
        }, []);
};

'''
'''--- src/redux/contacts/state.ts ---
import { Blockchain } from '../../core/blockchain/types';

export interface IContactState {
    blockchain: Blockchain;
    name: string;
    address: string;
}

export interface IContactsState {
    [key: string]: IContactState; // key = `${blockchain}|${address}`;
}

'''
'''--- src/redux/market/__tests__/reducer.test.ts ---
import reducer from '../reducer';

describe('market reducer', () => {
    test('should set initial state', () => {
        expect(
            reducer(undefined as any, {
                type: '',
                data: ''
            })
        ).toMatchSnapshot();
    });
});

'''
'''--- src/redux/market/actions.ts ---
export const EXCHANGE_RATE_UPDATE = 'EXCHANGE_RATE_UPDATE';

export const updateExchangeRate = (exchangeRate: { token: string; value: string }) => {
    return {
        type: EXCHANGE_RATE_UPDATE,
        data: exchangeRate
    };
};

'''
'''--- src/redux/market/reducer.ts ---
import { IAction } from '../types';
import { EXCHANGE_RATE_UPDATE } from './actions';
import { IMarketState } from './state';

const initialState: IMarketState = {
    exchangeRates: {}
};

export default (state: any = initialState, action: IAction): IMarketState => {
    switch (action.type) {
        case EXCHANGE_RATE_UPDATE:
            return {
                ...state,
                exchangeRates: {
                    ...state.exchangeRates,
                    [action.data.token]: action.data.value
                }
            };

        default:
            break;
    }

    return state;
};

'''
'''--- src/redux/market/state.ts ---
export interface IExchangeRates {
    [tokenSymbol: string]: string;
}

export interface IMarketState {
    exchangeRates: IExchangeRates;
}

'''
'''--- src/redux/notifications/actions.ts ---
import { getSelectedWallet } from '../wallets/selectors';
import { Dispatch } from 'react';
import { IReduxState } from '../state';
import { ApiClient } from '../../core/utils/api-client/api-client';
import { getChainId } from '../preferences/selectors';
import { Blockchain } from '../../core/blockchain/types';
import { LoadingModal } from '../../components/loading-modal/loading-modal';

export const SET_UNSEEN_NOTIFICATIONS = 'SET_UNSEEN_NOTIFICATIONS';
export const SET_NOTIFICATIONS = 'SET_NOTIFICATIONS';
export const MARK_SEEN = 'MARK_SEEN';

export const setNotifications = (notifications: any) => async (
    dispatch: Dispatch<any>,
    getState: () => IReduxState
) => {
    dispatch({
        type: SET_NOTIFICATIONS,
        data: { notifications }
    });
};

export const startNotificationsHandlers = () => async (
    dispatch: Dispatch<any>,
    getState: () => IReduxState
) => {
    registerPushNotifToken()(dispatch, getState);
    registerNotificationSettings()(dispatch, getState);
    getUnseenNotifications()(dispatch, getState);
};

export const getUnseenNotifications = () => async (
    dispatch: Dispatch<any>,
    getState: () => IReduxState
) => {
    const state = getState();

    const walletPublicKeys: string[] = Object.values(state.wallets).map(w => w?.walletPublicKey);

    const unseenNotifications = await new ApiClient().notifications.getUnseenNotifications(
        walletPublicKeys
    );

    dispatch({
        type: SET_UNSEEN_NOTIFICATIONS,
        data: { unseenNotifications }
    });
};

export const fetchNotifications = (options?: { page?: number; showLoading?: boolean }) => async (
    dispatch: Dispatch<any>,
    getState: () => IReduxState
) => {
    const state = getState();

    if (options?.showLoading) {
        await LoadingModal.open();

        // drop loading in 2.5 seconds if api call takes too long or crashes
        setTimeout(async () => LoadingModal.close(), 2500);
    }

    const blockchainNetworks = [];

    for (const blockchain of Object.values(Blockchain)) {
        const chainId = getChainId(state, blockchain);
        if (chainId && chainId !== '') {
            blockchainNetworks.push({ chainId: String(chainId), blockchain });
        }
    }

    const walletPublicKeys: string[] = Object.values(state.wallets).map(w => w?.walletPublicKey);

    const notifications = await new ApiClient().notifications.fetchNotifications(
        walletPublicKeys,
        blockchainNetworks,
        options?.page
    );

    if (options?.showLoading) {
        await LoadingModal.close();
    }

    return notifications;
};

export const registerPushNotifToken = () => async (
    dispatch: Dispatch<any>,
    getState: () => IReduxState
) => {
    const state = getState();
    const walletPublicKey = getSelectedWallet(state)?.walletPublicKey;

    if (walletPublicKey) {
        await new ApiClient().notifications.registerPushNotifToken(
            walletPublicKey,
            state.preferences.deviceId
        );
    }
};

export const registerNotificationSettings = () => async (
    dispatch: Dispatch<any>,
    getState: () => IReduxState
) => {
    const state = getState();

    const apiClient = new ApiClient();

    for (const wallet of Object.values(state.wallets)) {
        await apiClient.notifications.registerNotificationSettings(
            wallet,
            state.preferences.deviceId
        );
    }
};

export const markSeenNotification = (notificationId: string) => async (
    dispatch: Dispatch<any>,
    getState: () => IReduxState
) => {
    const state = getState();
    const walletPublicKey = getSelectedWallet(state)?.walletPublicKey;

    if (walletPublicKey) {
        dispatch({
            type: MARK_SEEN,
            data: { notificationId }
        });

        await new ApiClient().notifications.markSeenNotification(walletPublicKey, notificationId);
        getUnseenNotifications()(dispatch, getState);
    }
};

'''
'''--- src/redux/notifications/reducer.ts ---
import { INotificationsState } from './state';
import { IAction } from '../types';
import { SET_UNSEEN_NOTIFICATIONS, SET_NOTIFICATIONS, MARK_SEEN } from './actions';

const initialState: INotificationsState = {
    unseenNotifications: 0,
    notifications: {}
};

export default (
    state: INotificationsState = initialState,
    action: IAction
): INotificationsState => {
    switch (action.type) {
        case SET_UNSEEN_NOTIFICATIONS:
            return {
                ...state,
                unseenNotifications: action.data.unseenNotifications
            };

        case SET_NOTIFICATIONS: {
            let notifications = {};

            action.data.notifications.map((notif: any) => {
                const notifData = {
                    walletId: notif.walletId,
                    title: notif.title,
                    body: notif.body,
                    seen: notif.seen,
                    data: notif.data
                };

                notifications = {
                    ...notifications,
                    [notif._id]: notifData
                };
            });

            return {
                ...state,
                notifications
            };
        }

        case MARK_SEEN:
            return {
                ...state,
                notifications: {
                    ...state.notifications,
                    [action.data.notificationId]: {
                        ...(state.notifications && state.notifications[action.data.notificationId]),
                        seen: true
                    }
                }
            };

        default:
            break;
    }
    return state;
};

'''
'''--- src/redux/notifications/state.ts ---
export interface INotificationType {
    id: string;
    walletId: string;
    title: string;
    body: string;
    seen: boolean;
    data: {
        action: string;
        blockchain: string;
        // other data

        address?: string;

        // TRANSACTION extra data
        transactionHash?: string;
        chainId?: string;
        broadcastedOnBlock?: string;
        tokenSymbol?: string;

        // EXTENSION_SIGN_TX extra data
        requestId?: string;

        // OPEN_URL extra data
        url?: string;
    };

    createdAt?: Date;
    updatedAt?: Date;
}

export interface INotificationState {
    [notifId: string]: INotificationType;
}

export interface INotificationsState {
    unseenNotifications: number;
    notifications: INotificationState;
}

'''
'''--- src/redux/preferences/__tests__/actions.test.ts ---
import * as actions from '../actions';

jest.mock('../../config');

test('check preference actions to be saved on redux', () => {
    const expectedAction = {
        type: actions.TOGGLE_BIOMETRIC_AUTH
    };
    expect(actions.toggleBiometricAuth()).toEqual(expectedAction);
});

'''
'''--- src/redux/preferences/__tests__/reducer.test.ts ---
import reducer from '../reducer';
import * as actions from '../actions';
import { Blockchain } from '../../../core/blockchain/types';

jest.mock('../../config');

describe('preferences reducer', () => {
    test('should set initial state', () => {
        expect(
            reducer(undefined as any, {
                type: '',
                data: ''
            })
        ).toMatchSnapshot();
    });

    test('should handle TOGGLE_BIOMETRIC_AUTH', () => {
        expect(
            reducer(undefined as any, {
                type: actions.TOGGLE_BIOMETRIC_AUTH,
                data: ''
            })
        ).toEqual({
            currency: 'USD',
            testNet: false,
            biometricActive: true,
            networks: {},
            blockchains: {},
            deviceId: '',
            cumulativeBalance: false
        });
    });
});

'''
'''--- src/redux/preferences/actions.ts ---
import { Dispatch } from 'react';
import { IReduxState } from '../state';
import { getAccount, getSelectedAccount, getSelectedBlockchain } from '../wallets/selectors';
import {
    getBalance,
    setSelectedBlockchain,
    generateTokensForChainId,
    setSelectedAccount
} from '../wallets/actions';
import { Blockchain, ChainIdType } from '../../core/blockchain/types';
import { IBlockchainsOptions } from './state';
import { IAction } from '../types';
import { getBlockchains, hasNetwork, getBlockchainsPortfolio } from './selectors';

// actions consts
export const PREF_SET_CURRENCY = 'PREF_SET_CURRENCY';
export const TOGGLE_BIOMETRIC_AUTH = 'TOGGLE_BIOMETRIC_AUTH';
export const SET_TEST_NET = 'SET_TEST_NET';
export const PREF_SET_BLOCKCHAIN_ACTIVE_STATE = 'PREF_SET_BLOCKCHAIN_ACTIVE_STATE';
export const PREF_SET_BLOCKCHAIN_ORDER = 'PREF_SET_BLOCKCHAIN_ORDER';
export const PREF_SET_NETWORK_TEST_NET_CHAIN_ID = 'PREF_SET_NETWORK_TEST_NET_CHAIN_ID';
export const PREF_SET_DEVICE_ID = 'PREF_SET_DEVICE_ID';
export const TOGGLE_CUMULATIVE_BALANCE = 'TOGGLE_CUMULATIVE_BALANCE';

export const setBlockchainActive = (blockchain: Blockchain, active: boolean) => (
    dispatch: Dispatch<IAction>,
    getState: () => IReduxState
) => {
    const state = getState();
    const selectedBlockchain = getSelectedBlockchain(state);

    if (
        (selectedBlockchain === blockchain && active === false) ||
        selectedBlockchain === undefined
    ) {
        const nextBlockchain = Object.values(getBlockchainsPortfolio(state)).find(
            object => object.key !== blockchain
        );
        if (nextBlockchain) {
            setSelectedBlockchain(Blockchain[nextBlockchain.key])(dispatch, getState);
        }
    }
    dispatch({
        type: PREF_SET_BLOCKCHAIN_ACTIVE_STATE,
        data: { blockchain, active }
    });
};

export const setBlockchainOrder = (blockchains: IBlockchainsOptions[]) => {
    return {
        type: PREF_SET_BLOCKCHAIN_ORDER,
        data: { blockchains }
    };
};

export const setNetworkTestNetChainId = (blockchain: Blockchain, chainId: ChainIdType) => (
    dispatch: Dispatch<any>,
    getState: () => IReduxState
) => {
    const state = getState();
    const selectedAccount = getSelectedAccount(state);

    if (selectedAccount) {
        const tokens = selectedAccount.tokens;
        if (tokens && tokens[chainId] === undefined) {
            generateTokensForChainId(blockchain, chainId)(dispatch, getState);
        }
    }

    dispatch({
        type: PREF_SET_NETWORK_TEST_NET_CHAIN_ID,
        data: { blockchain, chainId }
    });

    setSelectedAcc(blockchain)(dispatch, getState);
};

export const toggleTestNet = () => (dispatch: Dispatch<any>, getState: () => IReduxState) => {
    dispatch({
        type: SET_TEST_NET
    });
    const state = getState();

    const selectedBlockchain = getSelectedBlockchain(state);
    const networkExists = hasNetwork(Blockchain[selectedBlockchain], state.preferences.testNet);

    if (!networkExists) {
        const blockchains = getBlockchains(state);
        setSelectedBlockchain(Blockchain[blockchains[0]])(dispatch, getState);
    }

    setSelectedAcc(selectedBlockchain)(dispatch, getState);
};

const setSelectedAcc = (blockchain: Blockchain) => (
    dispatch: Dispatch<any>,
    getState: () => IReduxState
) => {
    const state = getState();

    let selectedAccount = getSelectedAccount(getState());

    if (blockchain === Blockchain.NEAR) {
        // On NEAR activate the implicit account
        selectedAccount = getAccount(state, 0, blockchain);
        setSelectedAccount(selectedAccount)(dispatch, getState);
    }

    if (selectedAccount) {
        getBalance(
            selectedAccount.blockchain,
            selectedAccount.address,
            undefined,
            true
        )(dispatch, getState);
    }
};

export function toggleBiometricAuth() {
    return {
        type: TOGGLE_BIOMETRIC_AUTH
    };
}

export function setCurrency(currency: string) {
    return {
        type: PREF_SET_CURRENCY,
        data: { currency }
    };
}

export const setDeviceId = (deviceId: string) => {
    return {
        type: PREF_SET_DEVICE_ID,
        data: { deviceId }
    };
};

export function toggleCumulativeBalance() {
    return {
        type: TOGGLE_CUMULATIVE_BALANCE
    };
}

'''
'''--- src/redux/preferences/reducer.ts ---
import { IPrefState } from './state';
import { IAction } from '../types';
import {
    PREF_SET_CURRENCY,
    TOGGLE_BIOMETRIC_AUTH,
    SET_TEST_NET,
    PREF_SET_NETWORK_TEST_NET_CHAIN_ID,
    PREF_SET_BLOCKCHAIN_ACTIVE_STATE,
    PREF_SET_BLOCKCHAIN_ORDER,
    PREF_SET_DEVICE_ID,
    TOGGLE_CUMULATIVE_BALANCE
} from './actions';
import { RESET_ALL_DATA, EXTENSION_UPDATE_STATE } from '../app/actions';

const initialState: IPrefState = {
    currency: 'USD',
    testNet: false,
    biometricActive: false,
    networks: {},
    blockchains: {},
    deviceId: '',
    cumulativeBalance: false
};

export default (state: IPrefState = initialState, action: IAction): IPrefState => {
    switch (action.type) {
        case PREF_SET_NETWORK_TEST_NET_CHAIN_ID:
            return {
                ...state,
                networks: {
                    ...state.networks,
                    [action.data.blockchain]: {
                        ...state.networks[action.data.blockchain],
                        testNet: action.data.chainId
                    }
                }
            };

        case PREF_SET_BLOCKCHAIN_ACTIVE_STATE:
            return {
                ...state,
                blockchains: {
                    ...state.blockchains,
                    [action.data.blockchain]: {
                        ...state.blockchains[action.data.blockchain],
                        active: action.data.active
                    }
                }
            };

        case PREF_SET_BLOCKCHAIN_ORDER:
            return {
                ...state,
                blockchains: action.data.blockchains
            };

        case SET_TEST_NET:
            return {
                ...state,
                testNet: !state.testNet
            };

        case TOGGLE_BIOMETRIC_AUTH:
            return {
                ...state,
                biometricActive: !state.biometricActive
            };

        case TOGGLE_CUMULATIVE_BALANCE:
            return {
                ...state,
                cumulativeBalance: !state.cumulativeBalance
            };

        case PREF_SET_CURRENCY:
            return {
                ...state,
                currency: action.data.currency
            };

        case PREF_SET_DEVICE_ID:
            return {
                ...state,
                deviceId: action.data.deviceId
            };

        case RESET_ALL_DATA:
            return initialState;

        case EXTENSION_UPDATE_STATE: {
            return action.data.state.preferences;
        }

        default:
            break;
    }
    return state;
};

'''
'''--- src/redux/preferences/selectors.ts ---
import { IReduxState } from '../state';
import { Blockchain, ChainIdType } from '../../core/blockchain/types';
import { getBlockchain, BLOCKCHAIN_LIST } from '../../core/blockchain/blockchain-factory';
import { createSelector } from 'reselect';
import { IPrefState, INetworksOptions, IBlockchainsOptions, IBlockchainOptions } from './state';
import { isFeatureActive, RemoteFeature } from '../../core/utils/remote-feature-config';

export const getChainId = (state: IReduxState, blockchain: Blockchain): ChainIdType => {
    if (!BLOCKCHAIN_LIST.includes(blockchain)) {
        return '';
    }

    const reduxObject = state.preferences?.networks && state.preferences?.networks[blockchain];
    const network =
        reduxObject === undefined
            ? getBlockchain(blockchain).config.networks
            : state.preferences.networks[blockchain];

    if (state.preferences.testNet === true) {
        return network.testNet;
    } else {
        return getBlockchain(blockchain).config.networks?.mainNet || '';
    }
};

export const getNetworkName = (state: IReduxState, blockchain: Blockchain): string => {
    if (!blockchain || !state.preferences) {
        return '';
    }

    const network = getBlockchain(blockchain).networks.find(
        value => value.chainId === getChainId(state, blockchain)
    );

    return network ? network.name : '';
};

export const getNetworks = createSelector(
    (state: IReduxState) => state.preferences,
    (preferences: IPrefState) => {
        const networks: INetworksOptions[] = [];

        BLOCKCHAIN_LIST.map(blockchain => {
            const reduxObject = preferences.networks[blockchain];

            const network =
                reduxObject === undefined
                    ? getBlockchain(blockchain).config.networks
                    : preferences.networks[blockchain];

            if (hasNetwork(blockchain, preferences.testNet)) {
                if (blockchain === Blockchain.COSMOS) {
                    if (isFeatureActive(RemoteFeature.COSMOS) === true) {
                        networks[blockchain] = network;
                    }
                } else if (blockchain === Blockchain.CELO) {
                    if (isFeatureActive(RemoteFeature.CELO) === true) {
                        networks[blockchain] = network;
                    }
                } else {
                    networks[blockchain] = network;
                }
            }
        });

        return networks;
    }
);

export const getBlockchainsPortfolio = createSelector(
    (state: IReduxState) => state.preferences,
    (preferences: IPrefState) => {
        const list: IBlockchainsOptions[] = [];

        BLOCKCHAIN_LIST.map(blockchain => {
            const config = getBlockchain(blockchain).config;
            const reduxObject = preferences?.blockchains && preferences?.blockchains[blockchain];

            let blockchainObject: IBlockchainOptions;
            if (reduxObject === undefined) {
                blockchainObject = { order: config.defaultOrder, active: true };
            } else {
                let option: IBlockchainOptions;
                if (reduxObject.order === undefined) {
                    option = {
                        order: config.defaultOrder,
                        active: reduxObject.active
                    };
                } else {
                    option = reduxObject;
                }
                blockchainObject = option;
            }

            if (blockchain === Blockchain.COSMOS) {
                if (isFeatureActive(RemoteFeature.COSMOS) === true) {
                    list[blockchain] = blockchainObject;
                }
            } else if (blockchain === Blockchain.CELO) {
                if (isFeatureActive(RemoteFeature.CELO) === true) {
                    list[blockchain] = blockchainObject;
                }
            } else {
                if (blockchainObject) {
                    list[blockchain] = blockchainObject;
                }
            }
        });

        return Object.keys(list)
            .map(key => ({ key, value: list[key] }))
            .sort((a, b) => a.value.order - b.value.order);
    }
);

export const hasNetwork = (blockchain: Blockchain, isTestNet: boolean) => {
    const networks = getBlockchain(blockchain).config.networks;
    if (isTestNet) {
        if (networks.testNet !== undefined) {
            return true;
        } else {
            return false;
        }
    } else {
        if (networks.mainNet !== undefined) {
            return true;
        } else {
            return false;
        }
    }
};

export const getNrActiveBlockchains = createSelector(
    (state: IReduxState) => state.preferences,
    (state: IReduxState) => getBlockchainsPortfolio(state),
    (preferences: IPrefState, portfolio: [{ key: Blockchain; value: IBlockchainOptions }]) => {
        let nrActiveBlockchains = 0;

        portfolio.map(object => {
            let blockchain;
            const { active } = object.value;
            blockchain =
                active && hasNetwork(object.key, preferences.testNet) ? object.key : undefined;

            if (blockchain) {
                nrActiveBlockchains++;
            }
        });

        return nrActiveBlockchains;
    }
);

export const getBlockchains = createSelector(
    (state: IReduxState) => state.preferences,
    (state: IReduxState) => getBlockchainsPortfolio(state),
    (
        preferences: IPrefState,
        portfolio: [{ key: Blockchain; value: IBlockchainOptions }]
    ): Blockchain[] => {
        const blockchains: Blockchain[] = [];

        portfolio.map(object => {
            let blockchain;
            const { active } = object.value;
            blockchain =
                active && hasNetwork(object.key, preferences.testNet) ? object.key : undefined;

            if (blockchain) {
                blockchains.push(object.key);
            }
        });

        return blockchains;
    }
);

'''
'''--- src/redux/preferences/state.ts ---
import { ChainIdType } from '../../core/blockchain/types';

export interface IPrefState {
    currency: string;
    testNet: boolean;
    biometricActive: boolean;
    networks: INetworksOptions;
    blockchains: IBlockchainsOptions;
    deviceId: string;
    cumulativeBalance: boolean;
}

export interface INetworksOptions {
    [blockchain: string]: {
        // key is for Blockchain enum
        mainNet?: ChainIdType;
        testNet?: ChainIdType;
    };
}

export interface IBlockchainOptions {
    order: number;
    active: boolean;
}

export interface IBlockchainsOptions {
    [blockchain: string]: IBlockchainOptions;
}

'''
'''--- src/redux/state.ts ---
import { IAppState } from './app/state';
import { IContactsState } from './contacts/state';
import { IMarketState } from './market/state';
import { INotificationsState } from './notifications/state';
import { IPrefState } from './preferences/state';
import { ITokensConfigState } from './tokens/state';
import { IUiState } from './ui/state';
import { IValidatorsState } from './ui/validators/state';
import { IWalletsState } from './wallets/state';

export interface IReduxState {
    app: IAppState;
    contacts: IContactsState;
    market: IMarketState;
    notifications: INotificationsState;
    preferences: IPrefState;
    tokens: ITokensConfigState;
    ui: IUiState;
    validators: IValidatorsState;
    wallets: IWalletsState;
    _persist: object;
}

'''
'''--- src/redux/tokens/actions.ts ---
import { IAccountState } from '../wallets/state';
import { ITokenConfigState } from './state';
import { Dispatch } from 'react';
import { IReduxState } from '../state';
import { addTokenToAccount } from '../wallets/actions';
import { generateAccountTokenState } from './static-selectors';
import { getChainId } from '../preferences/selectors';
import { Blockchain, ChainIdType } from '../../core/blockchain/types';
import { ApiClient } from '../../core/utils/api-client/api-client';
import { flattenObject } from '../utils/helpers';
import {
    addBreadcrumb as SentryAddBreadcrumb,
    captureException as SentryCaptureException
} from '@sentry/react-native';

export const ADD_TOKEN = 'ADD_TOKEN';
export const UPDATE_TOKEN_CONTRACT_ADDRESS = 'UPDATE_TOKEN_CONTRACT_ADDRESS';
export const REMOVE_TOKEN = 'REMOVE_TOKEN';

export const addToken = (account: IAccountState, token: ITokenConfigState) => (
    dispatch: Dispatch<any>,
    getState: () => IReduxState
) => {
    const blockchain = account.blockchain;
    const chainId = getChainId(getState(), blockchain).toString();
    addTokenForBlockchain(blockchain, token, chainId)(dispatch, getState);
    addTokenToAccount(account, generateAccountTokenState(token, account))(dispatch, getState);
};

export const addTokenForBlockchain = (
    blockchain: Blockchain,
    token: ITokenConfigState,
    chainId: ChainIdType
) => (dispatch: Dispatch<any>, getState: () => IReduxState) => {
    dispatch({
        type: ADD_TOKEN,
        data: { token, chainId, blockchain }
    });
};

export const updateTokenContracts = () => async (
    dispatch: Dispatch<any>,
    getState: () => IReduxState
) => {
    const state = getState();

    if (state.tokens) {
        const flatObject = flattenObject(state.tokens, 2);
        const keys = [];

        Object.keys(flatObject).map(key => {
            const strings = key.split('.');
            strings.splice(strings.length - 1, 0, 'tokens');
            strings.splice(0, 1, strings[0].toLowerCase());
            keys.push(strings.join('.'));
        });

        try {
            const configs = await new ApiClient().configs.getConfigs(keys);

            if (configs.result) {
                Object.keys(configs.result).map(key => {
                    const values = key.split('.');
                    const chainId = values[1];
                    const blockchain = values[0].toUpperCase();
                    const tokenSymbol = values[3];
                    const contractAddress = configs.result[key];
                    dispatch({
                        type: UPDATE_TOKEN_CONTRACT_ADDRESS,
                        data: { chainId, blockchain, tokenSymbol, contractAddress }
                    });
                });
            }
        } catch (error) {
            SentryAddBreadcrumb({
                message: JSON.stringify({
                    error
                })
            });

            SentryCaptureException(
                new Error(`Failed to update token contracts, ${error?.message}`)
            );
        }
    }
};

'''
'''--- src/redux/tokens/reducer.ts ---
import { IAction } from '../types';
import { ADD_TOKEN, UPDATE_TOKEN_CONTRACT_ADDRESS } from './actions';
import { ITokensConfigState } from './state';
import { RESET_ALL_DATA, EXTENSION_UPDATE_STATE } from '../app/actions';

const initialState: ITokensConfigState = {};

export default (state: ITokensConfigState = initialState, action: IAction) => {
    switch (action.type) {
        case ADD_TOKEN: {
            const blockchain = state[action.data.blockchain];

            if (blockchain && blockchain[action.data.chainId]) {
                return {
                    ...state,
                    [action.data.blockchain]: {
                        ...state[action.data.blockchain],
                        [action.data.chainId]: {
                            ...state[action.data.blockchain][action.data.chainId],
                            [action.data.token.symbol]: action.data.token
                        }
                    }
                };
            } else {
                return {
                    ...state,
                    [action.data.blockchain]: {
                        ...state[action.data.blockchain],
                        [action.data.chainId]: {
                            [action.data.token.symbol]: action.data.token
                        }
                    }
                };
            }
        }
        case UPDATE_TOKEN_CONTRACT_ADDRESS: {
            return {
                ...state,
                [action.data.blockchain]: {
                    ...state[action.data.blockchain],
                    [action.data.chainId]: {
                        ...(state[action.data.blockchain] &&
                            state[action.data.blockchain][action.data.chainId]),
                        [action.data.tokenSymbol]: {
                            ...(state[action.data.blockchain] &&
                                state[action.data.blockchain][action.data.chainId] &&
                                state[action.data.blockchain][action.data.chainId][
                                    action.data.tokenSymbol
                                ]),
                            contractAddress: action.data.contractAddress
                        }
                    }
                }
            };
        }
        case RESET_ALL_DATA:
            return initialState;

        case EXTENSION_UPDATE_STATE: {
            return action.data.state.tokens;
        }

        default:
            break;
    }
    return state;
};

'''
'''--- src/redux/tokens/state.ts ---
import { ITokenIcon, TokenType, TokenScreenComponentType } from '../../core/blockchain/types/token';
import BigNumber from 'bignumber.js';
import { ChainIdType } from '../../core/blockchain/types';

export interface ITokensConfigState {
    [blockchain: string]: {
        [chainId: string]: {
            [symbol: string]: ITokenConfigState;
        };
    };
}

export interface ITokenConfigState {
    name: string;
    chainId?: ChainIdType;
    symbol: string;
    icon?: ITokenIcon;
    type: TokenType;
    removable: boolean;
    contractAddress?: string;
    decimals: number;
    defaultOrder?: number;
    ui: {
        decimals: number;
        tokenScreenComponent: TokenScreenComponentType;
    };
    units?: {
        [unit: string]: BigNumber;
    };
    symbolMap?: {
        [testnet: string]: string;
    };
}

'''
'''--- src/redux/tokens/static-selectors.ts ---
import { Blockchain, ChainIdType } from '../../core/blockchain/types';
import { getBlockchain } from '../../core/blockchain/blockchain-factory';
import { store } from '../config';
import { ITokenConfigState } from './state';
import { IAccountState, ITokensAccountState, ITokenState } from '../wallets/state';
import { getChainId } from '../preferences/selectors';
import { addTokenForBlockchain } from './actions';
import { pickInsensitiveKey } from '../../core/utils/pick';

export const getTokenConfig = (blockchain: Blockchain, symbol: string): ITokenConfigState => {
    const blockchainTokens = getBlockchain(blockchain).config.tokens;
    const state = store.getState();
    const chainId = getChainId(state, blockchain);

    const reduxToken = state.tokens;
    if (reduxToken[blockchain] && reduxToken[blockchain][chainId]) {
        const token = pickInsensitiveKey(reduxToken[blockchain][chainId], symbol);
        if (token) return token;
    }

    const blockchainToken = pickInsensitiveKey(blockchainTokens, symbol);
    if (blockchainToken) {
        return blockchainToken;
    }
};

export const generateTokensConfig = (blockchain: Blockchain): ITokensAccountState => {
    const blockchainConfig = getBlockchain(blockchain).config;

    // Generate tokens

    const tokenList: ITokensAccountState = {};
    for (const chainId of Object.values(blockchainConfig.networks)) {
        const tokenValue = {};

        for (const symbolKey of Object.keys(blockchainConfig.tokens)) {
            const order = blockchainConfig.tokens[symbolKey].defaultOrder || 0;
            tokenValue[symbolKey] = accountToken(symbolKey, order);
        }

        tokenList[chainId] = tokenValue;
    }

    // Add Auto Added Visible Tokens

    const tokens = blockchainConfig.autoAddedTokensSymbols;

    for (const chainId of Object.keys(tokens)) {
        for (const symbolKey of Object.keys(tokens[chainId])) {
            store.dispatch(
                addTokenForBlockchain(blockchain, tokens[chainId][symbolKey], chainId) as any
            );

            const order = tokens[chainId][symbolKey].defaultOrder || 999;
            tokenList[chainId] = {
                ...tokenList[chainId],
                [symbolKey]: accountToken(symbolKey, order)
            };
        }
    }

    // Add Auto Added Hidden Tokens

    const invisibleTokens = blockchainConfig?.autoAddedHiddenTokensSymbols || {};

    for (const chainId of Object.keys(invisibleTokens)) {
        for (const symbolKey of Object.keys(invisibleTokens[chainId])) {
            store.dispatch(
                addTokenForBlockchain(
                    blockchain,
                    invisibleTokens[chainId][symbolKey],
                    chainId
                ) as any
            );

            const order = invisibleTokens[chainId][symbolKey].defaultOrder || 999;
            tokenList[chainId] = {
                ...tokenList[chainId],
                [symbolKey]: accountToken(symbolKey, order, {
                    active: false
                })
            };
        }
    }

    return tokenList;
};

export const accountToken = (
    symbolKey: string,
    order: number,
    options?: { active?: boolean }
): ITokenState => {
    return {
        symbol: symbolKey,
        order,
        active: options?.active !== undefined ? options.active : true,
        balance: {
            value: '0',
            inProgress: false,
            timestamp: undefined,
            error: undefined,
            available: '0',
            total: '0',
            detailed: {}
        }
    };
};

export const generateAccountTokenState = (
    token: ITokenConfigState,
    account?: IAccountState,
    chainId?: ChainIdType
): ITokenState => {
    let order = 0;

    if (account) {
        const state = store.getState();

        const chainIdValue = chainId ? chainId : getChainId(state, account.blockchain);
        if (account.tokens[chainIdValue]) {
            order =
                Object.values(account.tokens[chainIdValue]).sort((x, y) => y.order - x.order)[0]
                    ?.order || 0 + 1;
        }
    }
    return {
        symbol: token.symbol,
        order: token.defaultOrder || order,
        active: true,
        balance: {
            value: '0',
            inProgress: false,
            timestamp: undefined,
            error: undefined,
            available: '0',
            total: '0',
            detailed: {}
        }
    };
};

'''
'''--- src/redux/types.ts ---
export interface IAction<D = any> {
    payload?: any;
    type: string;
    data?: D;
    inProgress?: boolean;
    error?: any;
}

'''
'''--- src/redux/ui/bottomSheet/actions.ts ---
import { BottomSheetType, IBottomSheetExtensionRequestData } from './state';
import { Blockchain } from '../../../core/blockchain/types';
import { HWModel, HWConnection } from '../../../core/wallet/hw-wallet/types';
import { IWalletState } from '../../wallets/state';

export const CLOSE_BOTTOM_SHEET = 'CLOSE_BOTTOM_SHEET';
export const OPEN_BOTTOM_SHEET = 'OPEN_BOTTOM_SHEET';

export const openBottomSheet = (
    type: BottomSheetType,
    props?: {
        blockchain?: Blockchain;
        deviceModel?: HWModel;
        connectionType?: HWConnection;
        data?: IBottomSheetExtensionRequestData;
        wallets?: IWalletState[];
    }
) => {
    return {
        type: OPEN_BOTTOM_SHEET,
        data: { type, props }
    };
};

export const closeBottomSheet = () => {
    return {
        type: CLOSE_BOTTOM_SHEET
    };
};

'''
'''--- src/redux/ui/bottomSheet/reducer.ts ---
import { IBottomSheetState } from './state';
import { IAction } from '../../types';
import { OPEN_BOTTOM_SHEET, CLOSE_BOTTOM_SHEET } from './actions';

const intialState: IBottomSheetState = {
    type: undefined,
    blockchain: undefined,
    deviceModel: undefined,
    connectionType: undefined,
    data: undefined,
    wallets: undefined
};

export default (state: IBottomSheetState = intialState, action: IAction): IBottomSheetState => {
    switch (action.type) {
        case OPEN_BOTTOM_SHEET:
            return {
                type: action.data.type,
                blockchain: action.data.props?.blockchain,
                deviceModel: action.data.props?.deviceModel,
                connectionType: action.data.props?.connectionType,
                data: action.data.props?.data,
                wallets: action.data.props?.wallets
            };
        case CLOSE_BOTTOM_SHEET:
            return intialState;
        default:
            break;
    }
    return state;
};

'''
'''--- src/redux/ui/bottomSheet/state.ts ---
import { Blockchain } from '../../../core/blockchain/types';
import { HWModel, HWConnection } from '../../../core/wallet/hw-wallet/types';
import { IWalletState } from '../../wallets/state';

export interface IBottomSheetState {
    type: BottomSheetType;
    blockchain: Blockchain;
    deviceModel: HWModel;
    connectionType: HWConnection;
    data: IBottomSheetExtensionRequestData;
    wallets?: IWalletState[];
}

export enum BottomSheetType {
    ACCOUNTS = 'ACCOUNTS',
    DASHBOARD_MENU = 'DASHBOARD_MENU',
    EXTENSION_REQUEST = 'EXTENSION_REQUEST',
    BLOCKCHAIN_NAVIGATION = 'BLOCKCHAIN_NAVIGATION',
    WALLETS = 'WALLETS'
}
export enum IExtensionRequestType {
    SIGN_TRANSACTION = 'SIGN_TRANSACTION'
}

export interface IBottomSheetExtensionRequestData {
    type: IExtensionRequestType;
    state: 'pending' | 'completed' | 'rejected';
    mainText: string;
    secondaryText: string;
}

export interface IBottomSheet {
    type: BottomSheetType;
    blockchain?: Blockchain;
    deviceModel?: HWModel;
    connectionType?: HWConnection;
    data?: IBottomSheetExtensionRequestData;
    wallets?: IWalletState[];
}

'''
'''--- src/redux/ui/delegated-validators/actions.ts ---
import { Dispatch } from 'react';
import { IReduxState } from '../../state';
import { getChainId } from '../../preferences/selectors';
import { IAccountState } from '../../wallets/state';
import { ApiClient } from '../../../core/utils/api-client/api-client';

export const ADD_DELEGATED_VALIDATORS = 'ADD_DELEGATED_VALIDATORS';

export const fetchDelegatedValidators = (account: IAccountState) => async (
    dispatch: Dispatch<any>,
    getState: () => IReduxState
) => {
    const state = getState();
    const blockchain = account.blockchain;
    const chainId = getChainId(state, blockchain).toString();

    dispatch({
        type: ADD_DELEGATED_VALIDATORS,
        data: { validators: undefined, chainId, blockchain }
    });

    const data = await new ApiClient().validators.fetchDelegatedValidators(account, chainId);

    if (data) {
        dispatch({
            type: ADD_DELEGATED_VALIDATORS,
            data: { validators: data, chainId, blockchain }
        });
    }
};

'''
'''--- src/redux/ui/delegated-validators/reducer.ts ---
import { IAction } from '../../types';
import { IDelegatedValidatorsState } from './state';
import { ADD_DELEGATED_VALIDATORS } from './actions';

const initialState: IDelegatedValidatorsState = {};

export default (
    state: IDelegatedValidatorsState = initialState,
    action: IAction
): IDelegatedValidatorsState => {
    switch (action.type) {
        case ADD_DELEGATED_VALIDATORS:
            return {
                ...state,
                [action.data.blockchain]: {
                    ...state[action.data.blockchain],
                    [action.data.chainId]: action.data.validators
                }
            };
        default:
            break;
    }
    return state;
};

'''
'''--- src/redux/ui/delegated-validators/selectors.ts ---
import { IValidator } from '../../../core/blockchain/types/stats';
import { IReduxState } from '../../state';
import { Blockchain, ChainIdType } from '../../../core/blockchain/types';

export const getDelegatedValidators = (
    state: IReduxState,
    blockchain: Blockchain,
    chainId: ChainIdType
): IValidator[] => {
    return (
        state.ui.delegatedValidators &&
        state.ui.delegatedValidators[blockchain] &&
        state.ui.delegatedValidators[blockchain][chainId as string]
    );
};

'''
'''--- src/redux/ui/delegated-validators/state.ts ---
import { IValidator } from '../../../core/blockchain/types/stats';

export interface IDelegatedValidatorsState {
    [blockchain: string]: {
        [chainId: string]: IValidator[];
    };
}

'''
'''--- src/redux/ui/extension/actions.ts ---
export const STATE_LOADED = 'STATE_LOADED';

export const setExtensionStateLoaded = () => {
    return {
        type: STATE_LOADED
    };
};

'''
'''--- src/redux/ui/extension/reducer.ts ---
import { IExtensionState } from './state';
import { IAction } from '../../types';
import { STATE_LOADED } from './actions';

const intialState: IExtensionState = {
    stateLoaded: false
};

export default (state: IExtensionState = intialState, action: IAction): IExtensionState => {
    switch (action.type) {
        case STATE_LOADED:
            return {
                ...state,
                stateLoaded: true
            };
        default:
            break;
    }
    return state;
};

'''
'''--- src/redux/ui/extension/state.ts ---
export interface IExtensionState {
    stateLoaded: boolean;
}

'''
'''--- src/redux/ui/password-modal/actions.ts ---
export const DISPLAY_PASSWORD_MODAL = 'DISPLAY_PASSWORD_MODAL';

export const setDisplayPasswordModal = (visible: boolean) => {
    return {
        type: DISPLAY_PASSWORD_MODAL,
        data: { visible }
    };
};

'''
'''--- src/redux/ui/password-modal/reducer.ts ---
import { IPasswordModalState } from './state';
import { IAction } from '../../types';
import { DISPLAY_PASSWORD_MODAL } from './actions';

const intialState: IPasswordModalState = {
    displayPasswordModal: true
};

export default (state: IPasswordModalState = intialState, action: IAction): IPasswordModalState => {
    switch (action.type) {
        case DISPLAY_PASSWORD_MODAL:
            return {
                displayPasswordModal: action.data.visible
            };

        default:
            break;
    }
    return state;
};

'''
'''--- src/redux/ui/password-modal/state.ts ---
export interface IPasswordModalState {
    displayPasswordModal: boolean;
}

'''
'''--- src/redux/ui/process-transactions/actions.ts ---
import { IBlockchainTransaction } from '../../../core/blockchain/types';
import { TransactionStatus } from '../../../core/wallet/types';
import { IAccountState } from '../../wallets/state';

export const OPEN_PROCESS_TXS = 'OPEN_PROCESS_TXS';
export const CLOSE_PROCESS_TXS = 'CLOSE_PROCESS_TXS';
export const SET_PROCESS_TXS = 'SET_PROCESS_TXS';
export const SET_PROCESS_TX_INDEX = 'SET_PROCESS_TX_INDEX';
export const UPDATE_PROCESS_TX_STATUS = 'UPDATE_PROCESS_TX_STATUS';
export const UPDATE_PROCESS_TX_ID = 'UPDATE_PROCESS_TX_ID';
export const SET_CREATE_ACCOUNT = 'SET_CREATE_ACCOUNT';
export const SET_PROCESS_TX_SIGNING_COMPLETED = 'SET_PROCESS_TX_SIGNING_COMPLETED';
export const UPDATE_PROCESS_TX_CONFIRMATIONS = 'UPDATE_PROCESS_TX_CONFIRMATIONS';

export const openProcessTransactions = () => {
    return {
        type: OPEN_PROCESS_TXS,
        data: {}
    };
};

export const setProcessTransactions = (txs: IBlockchainTransaction[]) => {
    return {
        type: SET_PROCESS_TXS,
        data: {
            txs
        }
    };
};

export const updateProcessTransactionStatusForIndex = (
    index: number,
    status: TransactionStatus
) => {
    return {
        type: UPDATE_PROCESS_TX_STATUS,
        data: {
            index,
            status
        }
    };
};

export const updateProcessTransactionIdForIndex = (index: number, id: string) => {
    return {
        type: UPDATE_PROCESS_TX_ID,
        data: {
            index,
            id
        }
    };
};

export const updateProcessTransactionConfirmationsForIndex = (
    index: number,
    confirmations: number
) => {
    return {
        type: UPDATE_PROCESS_TX_CONFIRMATIONS,
        data: {
            index,
            confirmations
        }
    };
};

export const closeProcessTransactions = () => {
    return {
        type: CLOSE_PROCESS_TXS
    };
};

export const setProcessTxCreateAccount = (account: IAccountState) => {
    return {
        type: SET_CREATE_ACCOUNT,
        data: {
            account
        }
    };
};

export const setProcessTxIndex = (index: number) => {
    return {
        type: SET_PROCESS_TX_INDEX,
        data: {
            index
        }
    };
};

export const setProcessTxCompleted = (signingCompleted: boolean, signingError: boolean = false) => {
    return {
        type: SET_PROCESS_TX_SIGNING_COMPLETED,
        data: {
            signingInProgress: !signingCompleted,
            signingCompleted,
            signingError
        }
    };
};

'''
'''--- src/redux/ui/process-transactions/reducer.ts ---
import { IProcessTransactionsState } from './state';
import { IAction } from '../../types';
import {
    OPEN_PROCESS_TXS,
    CLOSE_PROCESS_TXS,
    SET_PROCESS_TXS,
    UPDATE_PROCESS_TX_ID,
    UPDATE_PROCESS_TX_STATUS,
    SET_CREATE_ACCOUNT,
    SET_PROCESS_TX_INDEX,
    SET_PROCESS_TX_SIGNING_COMPLETED,
    UPDATE_PROCESS_TX_CONFIRMATIONS
} from './actions';

const intialState: IProcessTransactionsState = {
    isVisible: false,
    data: {
        txs: [],
        currentTxIndex: -1,
        signingCompleted: false,
        signingError: false,
        signingInProgress: false,
        createAccount: undefined
    }
};

export default (
    state: IProcessTransactionsState = intialState,
    action: IAction
): IProcessTransactionsState => {
    switch (action.type) {
        case OPEN_PROCESS_TXS:
            return {
                ...state,
                isVisible: true
            };
        case UPDATE_PROCESS_TX_STATUS: {
            const txs = [...state.data.txs];
            const tx = txs[action.data.index];
            tx.status = action.data.status;
            txs[action.data.index] = tx;
            return {
                ...state,
                data: {
                    ...state.data,
                    txs
                }
            };
        }

        case UPDATE_PROCESS_TX_ID: {
            const txs = [...state.data.txs];
            const tx = txs[action.data.index];
            tx.id = action.data.id;
            txs[action.data.index] = tx;
            return {
                ...state,
                data: {
                    ...state.data,
                    txs
                }
            };
        }
        case SET_PROCESS_TXS:
            return {
                ...state,
                data: {
                    ...state.data,
                    signingInProgress: false,
                    signingCompleted: false,
                    signingError: false,
                    currentTxIndex: -1,
                    txs: action.data.txs
                }
            };

        case SET_PROCESS_TX_INDEX:
            return {
                ...state,
                data: {
                    ...state.data,
                    signingInProgress: action.data.index >= 0,
                    currentTxIndex: action.data.index
                }
            };

        case CLOSE_PROCESS_TXS:
            return intialState;

        case SET_CREATE_ACCOUNT:
            return {
                ...state,
                data: {
                    ...state.data,
                    createAccount: action.data.account
                }
            };

        case SET_PROCESS_TX_SIGNING_COMPLETED:
            return {
                ...state,
                data: {
                    ...state.data,
                    ...action.data
                }
            };

        case UPDATE_PROCESS_TX_CONFIRMATIONS: {
            const txs = [...state.data.txs];
            const tx = txs[action.data.index];

            if (tx?.confirmations) {
                if (action.data.confirmations > tx.confirmations.numConfirmations) {
                    tx.confirmations.numConfirmations = action.data.confirmations;
                }

                // has reached max confirmations
                if (action.data.confirmations === null) {
                    tx.confirmations.numConfirmations = tx.confirmations.numConfirmationsNeeded;
                }

                txs[action.data.index] = tx;
            }

            return {
                ...state,
                data: {
                    ...state.data,
                    txs
                }
            };
        }

        default:
            break;
    }
    return state;
};

'''
'''--- src/redux/ui/process-transactions/state.ts ---
import { IBlockchainTransaction } from '../../../core/blockchain/types';
import { IAccountState } from '../../wallets/state';

export interface IProcessTransactionsState {
    isVisible: boolean;
    data: {
        txs: IBlockchainTransaction[];

        signingInProgress: boolean;
        signingCompleted: boolean;
        signingError: boolean;

        currentTxIndex: number;
        createAccount: IAccountState;
    };
}

'''
'''--- src/redux/ui/reducer.ts ---
import { combineReducers } from 'redux';
import { screensReducer } from './screens/reducer';
import extensionReducer from './extension/reducer';
import bottomSheetReducer from './bottomSheet/reducer';
import passwordModalReducer from './password-modal/reducer';
import transactionRequestReducer from './transaction-request/reducer';
import validatorsReducer from './validators/reducer';
import delegatedValidatorsReducer from './delegated-validators/reducer';
import processTransactionsReducer from './process-transactions/reducer';
import statsReducer from './stats/reducer';

export const uiReducer = combineReducers({
    screens: screensReducer,
    extension: extensionReducer,
    bottomSheet: bottomSheetReducer,
    passwordModal: passwordModalReducer,
    transactionRequest: transactionRequestReducer,
    processTransactions: processTransactionsReducer,
    validators: validatorsReducer,
    delegatedValidators: delegatedValidatorsReducer,
    stats: statsReducer
});

'''
'''--- src/redux/ui/screens/data/actions.ts ---
import { Dispatch } from 'react';
import DeviceInfo from 'react-native-device-info';
import { IReduxState } from '../../../state';
import {
    IScreenContext,
    IScreenRequest,
    IScreenResponse
} from '../../../../components/widgets/types';
import { ApiClient } from '../../../../core/utils/api-client/api-client';
import { IAction } from '../../../types';
import { getSelectedAccount, getSelectedWallet } from '../../../wallets/selectors';
import { Platform } from 'react-native';
import { getChainId } from '../../../preferences/selectors';
import {
    addBreadcrumb as SentryAddBreadcrumb,
    captureException as SentryCaptureException
} from '@sentry/react-native';

export const FETCH_SCREEN_DATA = 'FETCH_SCREEN_DATA';
export const SCREEN_DATA_START_LOADING = 'SCREEN_DATA_START_LOADING';
export const LOAD_MORE_VALIDATORS = 'LOAD_MORE_VALIDATORS';
export const LOAD_MORE_VALIDATORS_V2 = 'LOAD_MORE_VALIDATORS_V2';
export const RESET_SCREEN_DATA = 'RESET_SCREEN_DATA';

export const fetchScreenData = (context: IScreenContext) => async (
    dispatch: Dispatch<
        IAction<
            | { request: IScreenRequest }
            | {
                  request: IScreenRequest;
                  response: IScreenResponse;
                  isLoading: boolean;
                  error: any;
              }
        >
    >,
    getState: () => IReduxState
) => {
    const state = getState();
    const wallet = getSelectedWallet(state);
    if (!wallet) return;
    const account = getSelectedAccount(state);
    if (!account) return;
    const chainId = getChainId(state, account.blockchain);
    if (!chainId || chainId === '') return;

    const apiClient = new ApiClient();

    const body: IScreenRequest = {
        context: {
            screen: context.screen,
            step: context?.step,
            tab: context?.tab,
            flowId: context?.flowId,
            params: context?.params
        },
        user: {
            os: Platform.OS as 'ios' | 'android' | 'web',
            deviceId: state.preferences.deviceId,
            preferedCurrency: state.preferences.currency,
            appVersion: DeviceInfo.getVersion(),
            theme: 'dark',
            lang: 'en',

            wallet: {
                pubKey: wallet.walletPublicKey,
                type: wallet.type
            },

            blockchain: account.blockchain,
            chainId: String(chainId),
            address: account.address,
            accountType: account.type
        }
    };

    let flowData;
    if (
        context?.flowId &&
        state.ui.screens.inputData &&
        state.ui.screens.inputData[context.flowId]
    ) {
        flowData = state.ui.screens.inputData[context.flowId].data;
    }

    if (flowData) {
        body.context.flowData = flowData;
    }

    // start loading
    dispatch({ type: SCREEN_DATA_START_LOADING, data: { request: body } });

    try {
        // fetch screen data
        const screenResponse = await apiClient.http.post('/walletUi/screen/widgets', body);
        const data: IScreenResponse = screenResponse?.result?.data;

        dispatch({
            type: FETCH_SCREEN_DATA,
            data: {
                request: body,
                response: data,
                isLoading: false,
                error: !data && screenResponse?.message
            }
        });

        if (!screenResponse?.result?.data) {
            SentryAddBreadcrumb({ message: JSON.stringify({ request: body }) });
            SentryAddBreadcrumb({ message: JSON.stringify({ screenResponse }) });
            SentryAddBreadcrumb({ message: JSON.stringify({ code: screenResponse?.code }) });

            SentryCaptureException(
                new Error(
                    `Cannot fetch widgets, ${screenResponse?.message}, ${screenResponse?.code}`
                )
            );
        }
    } catch (error) {
        // handle error
        dispatch({
            type: FETCH_SCREEN_DATA,
            data: {
                request: body,
                response: undefined,
                isLoading: false,
                error: error || 'ERROR FETCH_SCREEN_DATA'
            }
        });

        SentryAddBreadcrumb({ message: JSON.stringify({ request: body }) });
        SentryAddBreadcrumb({ message: JSON.stringify({ error }) });
        SentryAddBreadcrumb({ message: JSON.stringify({ code: error?.code }) });

        SentryCaptureException(
            new Error(`Cannot fetch widgets, ${error?.message}, ${error?.code}`)
        );
    }
};

export const resetScreenData = (context: IScreenContext, screenKey: string) => async (
    dispatch: Dispatch<IAction<any>>,
    getState: () => IReduxState
) => {
    dispatch({
        type: RESET_SCREEN_DATA,
        data: { context, screenKey }
    });
};

'''
'''--- src/redux/ui/screens/data/actions/index.ts ---
import { Dispatch } from 'react';
import { Platform } from 'react-native';
import DeviceInfo from 'react-native-device-info';
import {
    ICtaAction,
    IScreenContext,
    IScreenCtaContextParams,
    IScreenCtaResponse,
    IScreenRequest,
    IScreenValidation
} from '../../../../../components/widgets/types';
import { ApiClient } from '../../../../../core/utils/api-client/api-client';
import { getChainId } from '../../../../preferences/selectors';
import { IReduxState } from '../../../../state';
import { IAction } from '../../../../types';
import { flattenObject } from '../../../../utils/helpers';
import { getSelectedWallet, getSelectedAccount } from '../../../../wallets/selectors';
import { runScreenValidation, setScreenInputData } from '../../input-data/actions';
import { handleCta, IHandleCtaOptions } from '../handle-cta';
import * as transactions from './transactions';
import {
    addBreadcrumb as SentryAddBreadcrumb,
    captureException as SentryCaptureException
} from '@sentry/react-native';
import { getScreenDataKey } from '../reducer';

export interface IHandleCtaActionContext<P = any> {
    action: ICtaAction<P>;
    options?: IHandleCtaOptions;
}

export const handleDynamicCta = (
    context: IHandleCtaActionContext<{
        ctaId: string;
        context: IScreenContext;
        steps: string[];
        extraParams?: any;
    }>
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    const state = getState();
    const wallet = getSelectedWallet(state);
    if (!wallet) return;
    const account = getSelectedAccount(state);
    if (!account) return;
    const chainId = getChainId(state, account.blockchain);
    if (!chainId || chainId === '') return;

    const screenRequestContext = context.action.params.params.context;
    const steps = context.action.params.params?.steps || [];
    const extraParams = context.action.params?.params?.extraParams;

    const screenInputData = {};

    for (const step of steps) {
        const screenKey = getScreenDataKey({
            pubKey: getSelectedWallet(state)?.walletPublicKey,
            blockchain: account?.blockchain,
            chainId: String(chainId),
            address: account.address,
            step,
            tab: undefined
        });

        const inputData = state.ui.screens.inputData[screenKey]?.data || {};

        screenInputData[screenKey] = {
            ...inputData,
            increasedBlocks: 15
        };
    }

    const flowId = screenRequestContext?.flowId || context?.options?.flowId;

    const screenRequestParams: IScreenCtaContextParams = {
        ctaId: context.action.params.params.ctaId,
        flowInputData: state.ui.screens.inputData[flowId]?.data || {},
        screenInputData,
        extraParams
    };
    const body: IScreenRequest = {
        context: {
            ...screenRequestContext,
            params: screenRequestParams
        },
        user: {
            os: Platform.OS as 'ios' | 'android' | 'web',
            deviceId: state.preferences.deviceId,
            preferedCurrency: state.preferences.currency,
            appVersion: DeviceInfo.getVersion(),
            theme: 'dark',
            lang: 'en',

            wallet: {
                pubKey: wallet.walletPublicKey,
                type: wallet.type
            },

            blockchain: account.blockchain,
            chainId: String(chainId),
            address: account.address,
            accountType: account.type
        }
    };

    try {
        const apiClient = new ApiClient();
        const screenResponse = await apiClient.http.post('/walletUi/screen/cta', body);
        const data: IScreenCtaResponse = screenResponse?.result?.data;

        if (data?.cta) {
            handleCta(data.cta, { flowId })(dispatch, getState);
        } else {
            SentryAddBreadcrumb({ message: JSON.stringify({ request: body }) });
            SentryAddBreadcrumb({ message: JSON.stringify({ screenResponse }) });
            SentryAddBreadcrumb({ message: JSON.stringify({ code: screenResponse?.code }) });

            throw new Error(`No data cta, ${screenResponse?.message}`);
        }
    } catch (error) {
        // handle error
        SentryAddBreadcrumb({ message: JSON.stringify({ request: body }) });
        SentryAddBreadcrumb({ message: JSON.stringify({ error }) });
        SentryAddBreadcrumb({ message: JSON.stringify({ code: error?.code }) });

        SentryCaptureException(new Error(`Cannot fetch cta, ${error?.message}`));
    }
};

export const setReduxScreenInputData = (
    context: IHandleCtaActionContext<transactions.IContractCallParams>
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    if (context.action.params?.params && context?.options?.screenKey) {
        const step = (context.action.params?.params as any)?.step;

        let screenKey = context.options.screenKey;

        if (step) {
            const state = getState();

            const account = getSelectedAccount(state);
            const chainId = getChainId(state, account.blockchain);

            screenKey = getScreenDataKey({
                pubKey: getSelectedWallet(state)?.walletPublicKey,
                blockchain: account?.blockchain,
                chainId: String(chainId),
                address: account?.address,
                step,
                tab: undefined
            });
        }

        setScreenInputData(screenKey, context.action.params?.params)(dispatch, getState);
    }
};

export const runScreenValidations = (
    context: IHandleCtaActionContext<{ screenValidation: IScreenValidation }>
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    if (context.action.params?.params?.screenValidation && context?.options?.screenKey) {
        runScreenValidation(
            context.action.params?.params?.screenValidation,
            context.options.screenKey
        )(dispatch, getState);
    }
};

export const supportedActions = flattenObject({
    transactions,
    setReduxScreenInputData,
    runScreenValidations,
    handleDynamicCta
});

'''
'''--- src/redux/ui/screens/data/actions/transactions/index.ts ---
import { cloneDeep } from 'lodash';
import { Dispatch } from 'react';
import { IHandleCtaActionContext } from '../index';
import { TransactionStatus } from '../../../../../../core/wallet/types';
import { IReduxState } from '../../../../../state';
import { captureException as SentryCaptureException } from '@sentry/react-native';
import { IAction } from '../../../../../types';
import {
    openProcessTransactions,
    setProcessTransactions
} from '../../../../process-transactions/actions';
import { buildContractCallTransaction } from './transaction-builder';
import { Contracts } from '../../../../../../core/blockchain/types';

export * from './transaction-builder';

export interface IContractCallArg {
    type: string;
    data: {
        type: 'value' | 'selector';
        value: any;
    };
    name?: string;
}

export interface IContractCallParams {
    args: IContractCallArg[];
    amount: string;
    contractMethod: string;
    contractType: Contracts;
    contractAddress?: string;
    tokenSymbol: string;
    additionalInfo: any;
    fees?: {
        gasLimit: string;
        gasPrice?: string;
        total?: string;
    };
}

export const sendTransactions = (context: IHandleCtaActionContext<IContractCallParams[]>) => async (
    dispatch: Dispatch<IAction<any>>,
    getState: () => IReduxState
) => {
    if (context.action.params.params) {
        const params = context.action.params.params;

        try {
            dispatch(openProcessTransactions());

            const txs = [];
            for (const param of params) {
                const tx = await buildContractCallTransaction(getState, param, txs);
                txs.push(tx);
            }

            dispatch(
                setProcessTransactions(
                    cloneDeep(txs).map(tx => {
                        tx.status = TransactionStatus.CREATED;
                        return tx;
                    })
                )
            );
        } catch (errorMessage) {
            SentryCaptureException(new Error(JSON.stringify(errorMessage)));
        }
    } else {
        SentryCaptureException(
            new Error(
                JSON.stringify({
                    message: 'Smart screen action params not available',
                    action: context
                })
            )
        );
    }
};

'''
'''--- src/redux/ui/screens/data/actions/transactions/transaction-builder.ts ---
import BigNumber from 'bignumber.js';
import { getBlockchain } from '../../../../../../core/blockchain/blockchain-factory';
import {
    Blockchain,
    Contracts,
    IBlockchainTransaction,
    IFeeOptions,
    TransactionType
} from '../../../../../../core/blockchain/types';
import { TransactionStatus } from '../../../../../../core/wallet/types';
import { getChainId } from '../../../../../preferences/selectors';
import { IReduxState } from '../../../../../state';
import { getSelectedAccount, getSelectedWallet } from '../../../../../wallets/selectors';
import { getTokenConfig } from '../../../../../tokens/static-selectors';
import { IContractCallParams } from '.';
import { PosBasicActionType, TokenType } from '../../../../../../core/blockchain/types/token';
import abi from 'ethereumjs-abi';
import { SolanaTransactionInstructionType } from '../../../../../../core/blockchain/solana/types';

export const buildContractCallTransaction = async (
    getState: () => IReduxState,
    params: IContractCallParams,
    currentTransactions: IBlockchainTransaction[]
): Promise<IBlockchainTransaction<any>> => {
    const state = getState();
    const account = getSelectedAccount(state);
    const chainId = getChainId(state, account.blockchain);
    const walletType = getSelectedWallet(state).type;

    const blockchainInstance = getBlockchain(account.blockchain);

    let contractAddress: string = '';

    if (params.contractAddress) {
        contractAddress = params.contractAddress;
    } else if (params.contractType === Contracts.TOKEN_CONTRACT) {
        const configToken = getTokenConfig(account.blockchain, params.tokenSymbol);
        contractAddress = configToken.contractAddress;
    } else {
        contractAddress = await blockchainInstance.getContract(chainId, params.contractType);
    }

    const tokenConfig = getTokenConfig(account.blockchain, params.tokenSymbol);
    const client = blockchainInstance.getClient(chainId);
    const blockInfo = await client.getCurrentBlock();

    const nonce = await client.getNonce(account.address, account.publicKey);

    const dataParams = [];

    for (const arg of params.args) {
        if (arg.type === 'string') {
            dataParams.push(arg.data.value);
        } else if (arg.data.type === 'value') {
            const obj = {
                type: arg.type,
                value: arg.data.value
            };
            if (arg.name) {
                dataParams.push({
                    ...obj,
                    vname: arg.name // TODO key might be needed to be passed from param
                });
            } else {
                dataParams.push(obj);
            }
        }
    }

    let raw = '';

    switch (account.blockchain) {
        case Blockchain.ZILLIQA:
            raw = JSON.stringify({
                _tag: params.contractMethod,
                params: dataParams
            });
            break;

        case Blockchain.ETHEREUM:
            raw =
                '0x' +
                abi
                    .simpleEncode(params.additionalInfo.contractMethodSignature, ...dataParams)
                    .toString('hex');
            break;

        case Blockchain.SOLANA: {
            switch (params.additionalInfo.posAction) {
                case PosBasicActionType.SOLANA_CREATE_ASSOCIATED_TOKEN_ACCOUNT: {
                    const blockHash = await client.getCurrentBlockHash();

                    params.additionalInfo = {
                        type: SolanaTransactionInstructionType.CREATE_ASSOCIATED_TOKEN_ACCOUNT,
                        instructions: params.additionalInfo.instructions,
                        currentBlockHash: blockHash,
                        posAction: PosBasicActionType.SOLANA_CREATE_ASSOCIATED_TOKEN_ACCOUNT,
                        tokenSymbol: params.additionalInfo.tokenSymbol
                    };
                    break;
                }

                case PosBasicActionType.SWAP: {
                    const blockHash = await client.getCurrentBlockHash();

                    params.additionalInfo = {
                        ...params.additionalInfo,
                        type: SolanaTransactionInstructionType.SWAP,
                        instructions: params.additionalInfo.instructions,
                        currentBlockHash: blockHash,
                        posAction: PosBasicActionType.SWAP
                    };
                    break;
                }
            }

            break;
        }
    }

    let feeOptions: IFeeOptions;
    let fetchFeesBackup = false;

    if (params?.fees) {
        // Fees already calculated on api
        if (params?.fees?.gasPrice && params?.fees?.total) {
            feeOptions = {
                gasPrice: params.fees.gasPrice,
                gasLimit: params.fees.gasLimit,
                feeTotal: params.fees.total
            };
        } else {
            // Calculate fees
            const gasLimit = new BigNumber(params.fees.gasLimit);
            const minGasPrice = await client.getMinimumGasPrice();

            if (minGasPrice) {
                const gasPrice = new BigNumber(minGasPrice);
                feeOptions = {
                    gasPrice: gasPrice.toFixed(),
                    gasLimit: gasLimit.toFixed(),
                    feeTotal: gasPrice.multipliedBy(gasLimit).toFixed()
                };
            } else {
                fetchFeesBackup = true;
            }
        }
    } else {
        fetchFeesBackup = true;
    }

    if (fetchFeesBackup === true) {
        try {
            let tokenType: TokenType;

            switch (account.blockchain) {
                case Blockchain.ZILLIQA:
                    tokenType = TokenType.ZRC2;
                    break;

                case Blockchain.SOLANA:
                    tokenType = TokenType.SPL;
                    break;

                default:
                    tokenType = TokenType.ERC20;
                    break;
            }

            feeOptions = await client.getFees(
                TransactionType.CONTRACT_CALL,
                {
                    from: account.address,
                    to: '',
                    amount: params.amount,
                    contractAddress,
                    raw
                },
                getBlockchain(account.blockchain).config.typedTransaction[walletType],
                tokenType
            );
        } catch (error) {
            //
        }
    }

    return {
        date: {
            created: Date.now(),
            signed: Date.now(),
            broadcasted: Date.now(),
            confirmed: Date.now()
        },
        blockchain: account.blockchain,
        chainId,
        type: TransactionType.CONTRACT_CALL,
        token: tokenConfig,
        address: account.address,
        publicKey: account.publicKey,
        toAddress: contractAddress,
        amount: params.amount,
        feeOptions,
        broadcastedOnBlock: blockInfo.number,
        nonce: nonce + currentTransactions.length,
        status: TransactionStatus.PENDING,
        data: {
            method: params.contractMethod,
            params: [contractAddress, params.additionalInfo?.tokenAmount || params.amount],
            raw
        },
        additionalInfo: params.additionalInfo
    };

    return undefined;
};

'''
'''--- src/redux/ui/screens/data/handle-cta.ts ---
import { Dispatch } from 'react';
import { IReduxState } from '../../../state';
import { ICta, ICtaAction, SmartScreenPubSubEvents } from '../../../../components/widgets/types';
import { IAction } from '../../../types';
import {
    getNrPendingTransactions,
    getSelectedAccount,
    getSelectedBlockchain,
    getSelectedWallet,
    getWalletByPubKey
} from '../../../wallets/selectors';
import { getChainId } from '../../../preferences/selectors';
import { PosBasicActionType, SwapType } from '../../../../core/blockchain/types/token';
import {
    claimRewardNoInput,
    delegate,
    delegateV2,
    redelegate,
    setSelectedBlockchain,
    withdraw,
    solanaDelegateStakeAccount,
    solanaCreateStakeAccount,
    solanaSplitStakeAccount,
    solanaUnstake,
    solanaWithdraw,
    solanaCreateAndDelegateStakeAccount
} from '../../../wallets/actions';
import {
    runScreenValidation,
    setScreenInputData,
    toggleValidatorMultiple
} from '../input-data/actions';
import { NavigationService } from '../../../../navigation/navigation-service';
import { openURL } from '../../../../core/utils/linking-handler';
import { getBlockchain } from '../../../../core/blockchain/blockchain-factory';
import { getScreenDataKey } from './reducer';
import { Dialog } from '../../../../components/dialog/dialog';
import { translate } from '../../../../core/i18n';
import { LOAD_MORE_VALIDATORS, LOAD_MORE_VALIDATORS_V2 } from './actions';
import { AccountType, ITokenState } from '../../../wallets/state';
import { HttpClient } from '../../../../core/utils/http-client';
import { navigateToEnterAmountStep, QUICK_DELEGATE_ENTER_AMOUNT } from '../posActions/actions';
import BigNumber from 'bignumber.js';
import { IValidator } from '../../../../core/blockchain/types/stats';
import { getTokenConfig } from '../../../tokens/static-selectors';
import { splitStake } from '../../../../core/utils/balance';
import { PasswordModal } from '../../../../components/password-modal/password-modal';
import { WalletFactory } from '../../../../core/wallet/wallet-factory';
import { fromBech32Address } from '@zilliqa-js/crypto/dist/bech32';
import { WalletType } from '../../../../core/wallet/types';
import { LedgerConnect } from '../../../../screens/ledger/ledger-connect';
import {
    Blockchain,
    TransactionMessageText,
    TransactionMessageType
} from '../../../../core/blockchain/types';
import { LoadingModal } from '../../../../components/loading-modal/loading-modal';
import { captureException as SentryCaptureException } from '@sentry/react-native';
import { ApiClient } from '../../../../core/utils/api-client/api-client';
import { PubSub } from '../../../../core/blockchain/common/pub-sub';
import { IconValues } from '../../../../components/icon/values';
import { delay } from '../../../../core/utils/time';
import { buildDummyValidator } from '../../../wallets/actions/util-actions';
import { supportedActions } from './actions/index';
import { isFeatureActive, RemoteFeature } from '../../../../core/utils/remote-feature-config';
import { closeProcessTransactions } from '../../process-transactions/actions';

export interface IHandleCtaOptions {
    screenKey?: string;
    validator?: {
        id: string;
        name: string;
        icon?: string;
        website?: string;
    };
    pubSub?: PubSub<SmartScreenPubSubEvents>;
    flowId?: string;
    extraParams?: any;
}

export const handleCta = (cta: ICta, options?: IHandleCtaOptions) => async (
    dispatch: Dispatch<IAction<any>>,
    getState: () => IReduxState
) => {
    if (!cta) {
        return;
    }

    if (cta?.actions && Array.isArray(cta?.actions)) {
        for (const action of cta.actions) {
            await handleCtaAction(action, dispatch, getState, options);
        }
    } else {
        // used this to handle deprecated versions
        await handleCtaAction(
            {
                type: cta.type,
                params: cta?.params
            },
            dispatch,
            getState,
            options
        );
    }
};

const buildValidators = (
    state: IReduxState,
    action: ICtaAction
): {
    validator: IValidator;
    amount: string;
}[] => {
    const account = getSelectedAccount(state);
    const chainId = getChainId(state, account.blockchain);
    const blockchainInstance = getBlockchain(account.blockchain);

    const token = action.params?.params?.token;
    const tokenConfig = getTokenConfig(account.blockchain, token);

    const screenKey = getScreenDataKey({
        pubKey: getSelectedWallet(state)?.walletPublicKey,
        blockchain: account?.blockchain,
        chainId: String(chainId),
        address: account?.address,
        step: action.params?.params?.step,
        tab: undefined
    });

    const data = state.ui.screens.inputData[screenKey]?.data;

    const validators: {
        validator: IValidator;
        amount: string;
    }[] = [];

    // Build validators list from redux
    for (const dataKey of Object.keys(data || {})) {
        if (data[dataKey] && data[dataKey]?.validator && data[dataKey]?.amount) {
            const amount = data[dataKey].amount;
            const validator = data[dataKey].validator;
            if (new BigNumber(amount).isGreaterThan(0)) {
                validators.push({
                    validator: buildDummyValidator(
                        validator?.id || validator?.address,
                        validator.name,
                        validator.icon,
                        validator.website
                    ),
                    amount: blockchainInstance.account
                        .amountToStd(amount, tokenConfig.decimals)
                        .toFixed()
                });
            }
        }
    }

    // Build validators list from params
    if (
        action.params?.params?.validators &&
        Array.isArray(action.params.params.validators) &&
        state.ui.screens.inputData[screenKey]?.data?.amount
    ) {
        const amountSplit = splitStake(
            state.ui.screens.inputData[screenKey]?.data.amount,
            action.params.params.validators.length
        );
        for (const validator of action.params.params.validators) {
            validators.push({
                validator: buildDummyValidator(
                    validator?.id || validator?.address,
                    validator.name,
                    validator.icon,
                    validator.website
                ),
                amount: blockchainInstance.account
                    .amountToStd(amountSplit, tokenConfig.decimals)
                    .toFixed()
            });
        }
    }
    return validators;
};

const handleCtaAction = async (
    action: ICtaAction,
    dispatch: Dispatch<IAction<any>>,
    getState: () => IReduxState,
    options?: IHandleCtaOptions
) => {
    const state = getState();

    switch (action.type) {
        case 'callAction':
            switch (action.params.action) {
                case PosBasicActionType.CLAIM_REWARD_NO_INPUT: {
                    let validators = [];

                    if (action.params?.params?.validators) {
                        for (const v of action.params.params.validators) {
                            const validator = buildDummyValidator(v.validatorId, v.validatorName);
                            validators.push(validator);
                        }
                    } else {
                        validators = [
                            buildDummyValidator(
                                action.params.params.validatorId,
                                action.params.params.validatorName
                            )
                        ];
                    }

                    claimRewardNoInput(
                        getSelectedAccount(state),
                        validators,
                        action.params?.params?.tokenSymbol,
                        undefined
                    )(dispatch, getState);
                    break;
                }

                case PosBasicActionType.WITHDRAW: {
                    const withdrawValidator =
                        action?.params?.params?.validatorId &&
                        action?.params?.params?.validatorName &&
                        buildDummyValidator(
                            action.params.params.validatorId,
                            action.params.params.validatorName
                        );

                    withdraw(
                        getSelectedAccount(state),
                        withdrawValidator && [withdrawValidator],
                        action.params?.params?.tokenSymbol,
                        {
                            amount: action.params?.params?.amount,
                            stakeAccountKey: action.params?.params?.stakeAccountKey
                        },
                        undefined
                    )(dispatch, getState);
                    break;
                }

                case 'MULTIPLE_SELECTION':
                case 'multipleSelection':
                    toggleValidatorMultiple(options.screenKey, {
                        id: options.validator.id,
                        name: options.validator.name,
                        icon: options?.validator?.icon,
                        website: options.validator?.website
                    })(dispatch, getState);
                    break;

                case 'SINGLE_SELECTION':
                case 'singleSelection':
                    setScreenInputData(options.screenKey, {
                        validators: [
                            {
                                id: options.validator.id,
                                name: options.validator.name,
                                icon: options.validator?.icon,
                                website: options.validator?.website
                            }
                        ]
                    })(dispatch, getState);
                    break;

                /** @deprecated */
                case 'LOAD_MORE_VALIDATORS':
                case 'loadMoreValidators':
                    dispatch({
                        type: LOAD_MORE_VALIDATORS,
                        data: { screenKey: options.screenKey }
                    });
                    break;

                case 'loadMoreValidatorsV2':
                    dispatch({
                        type: LOAD_MORE_VALIDATORS_V2,
                        data: {
                            screenKey: options.screenKey,
                            screen: action.params?.params?.screen
                        }
                    });
                    break;

                case 'delegateToValidator': {
                    // Run Screen Validations

                    // Take amount from screen
                    const account = getSelectedAccount(state);
                    const chainId = getChainId(state, account.blockchain);

                    const screenKey = getScreenDataKey({
                        pubKey: getSelectedWallet(state)?.walletPublicKey,
                        blockchain: account?.blockchain,
                        chainId: String(chainId),
                        address: account?.address,
                        step: action.params?.params?.step,
                        tab: undefined
                    });

                    // Open Process Tx
                    if (
                        action.params?.params?.validatorId &&
                        action.params?.params?.validatorName &&
                        action.params?.params?.token
                    ) {
                        const { token, validatorId, validatorName } = action.params.params;

                        if (
                            state.ui.screens.inputData &&
                            state.ui.screens.inputData[screenKey]?.data?.amount
                        ) {
                            const amount = state.ui.screens.inputData[screenKey]?.data.amount;

                            const validators = [buildDummyValidator(validatorId, validatorName)];

                            delegate(
                                getSelectedAccount(state),
                                amount,
                                validators,
                                token,
                                undefined, // feeOptions
                                undefined
                            )(dispatch, getState);
                        }
                    }
                    break;
                }

                case 'delegateToValidatorV2': {
                    const token = action.params?.params?.token;
                    delegateV2(
                        getSelectedAccount(state),
                        buildValidators(state, action),
                        token,
                        undefined, // feeOptions
                        undefined
                    )(dispatch, getState);
                    break;
                }

                case 'delegateToValidators': {
                    const account = getSelectedAccount(state);
                    const chainId = getChainId(state, account.blockchain);

                    const screenKey = getScreenDataKey({
                        pubKey: getSelectedWallet(state)?.walletPublicKey,
                        blockchain: account?.blockchain,
                        chainId: String(chainId),
                        address: account?.address,
                        step: action.params?.params?.step,
                        tab: undefined
                    });

                    // Open Process Tx
                    if (
                        action.params?.params?.validators &&
                        action.params?.params?.token &&
                        state.ui.screens.inputData &&
                        state.ui.screens.inputData[screenKey]?.data?.amount
                    ) {
                        const { token, validators } = action.params.params;

                        const amount = state.ui.screens.inputData[screenKey]?.data.amount;

                        const v = [];
                        for (const val of validators) {
                            v.push(
                                buildDummyValidator(
                                    val?.id || val?.address,
                                    val.name,
                                    val?.icon,
                                    val?.website
                                )
                            );
                        }

                        delegate(
                            getSelectedAccount(state),
                            amount,
                            v,
                            token,
                            undefined, // feeOptions
                            undefined
                        )(dispatch, getState);
                    }
                    break;
                }

                case 'switchNodeDelegateToValidator': {
                    // Run Screen Validations

                    // Take amount from screen
                    const account = getSelectedAccount(state);
                    const chainId = getChainId(state, account.blockchain);

                    const context = action.params?.params?.context;

                    const screenKey = getScreenDataKey({
                        pubKey: getSelectedWallet(state)?.walletPublicKey,
                        blockchain: account?.blockchain,
                        chainId: String(chainId),
                        address: account?.address,
                        step: context?.step,
                        tab: undefined
                    });

                    // Node details are stored on flow
                    const switchNodeValidator =
                        state.ui.screens.inputData[context?.flowId]?.data?.switchNodeValidator;

                    // Open Process Tx
                    if (
                        switchNodeValidator &&
                        action.params?.params?.token &&
                        state.ui.screens.inputData &&
                        state.ui.screens.inputData[screenKey] &&
                        state.ui.screens.inputData[screenKey]?.data?.amount &&
                        action.params?.params?.toValidator
                    ) {
                        const fromValidator = buildDummyValidator(
                            switchNodeValidator.id,
                            switchNodeValidator.name
                        );

                        const validators = [
                            buildDummyValidator(
                                action.params.params.toValidator.id,
                                action.params.params.toValidator.name
                            )
                        ];

                        const amount = state.ui.screens.inputData[screenKey]?.data?.amount;

                        redelegate(
                            getSelectedAccount(state),
                            amount,
                            validators,
                            action.params.params.token,
                            undefined, // feeOptions
                            { fromValidator }
                        )(dispatch, getState);
                    }
                    break;
                }

                case 'switchNodeConfirm': {
                    // Run Screen Validations

                    // Take amount from screen
                    const account = getSelectedAccount(state);
                    const chainId = getChainId(state, account.blockchain);

                    const context = action.params?.params?.context;

                    const screenKey = getScreenDataKey({
                        pubKey: getSelectedWallet(state)?.walletPublicKey,
                        blockchain: account?.blockchain,
                        chainId: String(chainId),
                        address: account?.address,
                        step: context?.step,
                        tab: undefined
                    });

                    // Node details are stored on flow
                    const switchNodeValidator =
                        state.ui.screens.inputData[context?.flowId]?.data?.switchNodeValidator;

                    const switchNodeToValidator =
                        state.ui.screens.inputData[context?.flowId]?.data?.switchNodeToValidator;

                    // Open Process Tx
                    if (
                        switchNodeValidator &&
                        switchNodeToValidator &&
                        action.params?.params?.token &&
                        state.ui.screens.inputData &&
                        state.ui.screens.inputData[screenKey] &&
                        state.ui.screens.inputData[screenKey]?.data?.amount
                    ) {
                        const fromValidator = buildDummyValidator(
                            switchNodeValidator.id,
                            switchNodeValidator.name
                        );

                        const validators = [
                            buildDummyValidator(
                                switchNodeToValidator.id,
                                switchNodeToValidator.name
                            )
                        ];

                        const amount = state.ui.screens.inputData[screenKey]?.data?.amount;

                        redelegate(
                            getSelectedAccount(state),
                            amount,
                            validators,
                            action.params.params.token,
                            undefined, // feeOptions
                            { fromValidator }
                        )(dispatch, getState);
                    }
                    break;
                }

                case 'setSwitchNodeValidator':
                    setScreenInputData(action.params?.params?.flowId, {
                        switchNodeValidator: {
                            id: action.params?.params?.validatorId,
                            name: action.params?.params?.validatorName,
                            availableBalance: action.params?.params?.availableBalance
                        }
                    })(dispatch, getState);
                    break;

                case 'setSwitchNodeToValidator':
                    setScreenInputData(action.params?.params?.flowId, {
                        switchNodeToValidator: {
                            id: action.params?.params?.validatorId,
                            name: action.params?.params?.validatorName,
                            availableBalance: action.params?.params?.availableBalance
                        }
                    })(dispatch, getState);
                    break;

                case 'hasPendingTransactions':
                    if (
                        !isFeatureActive(RemoteFeature.IMPROVED_NONCE) &&
                        getNrPendingTransactions(state)
                    ) {
                        const nvServiceFn =
                            NavigationService.getCurrentRoute() === 'Dashboard'
                                ? 'navigate'
                                : 'replace';
                        Dialog.alert(
                            translate('Validator.cannotInitiateTxTitle'),
                            translate('Validator.cannotInitiateTxMessage'),
                            undefined,
                            {
                                text: translate('App.labels.ok'),
                                onPress: () =>
                                    NavigationService[nvServiceFn]('TransactonsHistory', {})
                            }
                        );
                    }
                    break;

                case 'selectBlockchain':
                    setSelectedBlockchain(action.params?.params?.blockchain)(dispatch, getState);
                    break;

                case 'switchNodeSelectReasons': {
                    const infoText = action.params?.params?.infoText;
                    const flowId = action.params?.params?.flowId;

                    const selectReasons = [];
                    Object.assign(
                        selectReasons,
                        state.ui.screens.inputData[flowId]?.data?.selectReasons
                    );
                    const reasonIndex = selectReasons.findIndex(r => r === infoText);

                    if (reasonIndex === -1) {
                        // select reason
                        selectReasons.push(infoText);
                    } else {
                        // unselect reason
                        selectReasons.splice(reasonIndex, 1);
                    }

                    setScreenInputData(flowId, {
                        selectReasons
                    })(dispatch, getState);
                    break;
                }

                case 'saveDataToUrl': {
                    if (action?.params?.params?.url && action?.params?.params?.data) {
                        let data = action.params.params.data;

                        const url = action.params.params.url;
                        const httpClient = new HttpClient(url);

                        const flowId = data?.flowId;

                        if (
                            state.ui.screens.inputData &&
                            state.ui.screens.inputData[flowId]?.data
                        ) {
                            data = {
                                ...data,
                                flowData: state.ui.screens.inputData[flowId]?.data
                            };
                        }

                        const account = getSelectedAccount(state);
                        const chainId = getChainId(state, account.blockchain);

                        const screenKey = getScreenDataKey({
                            pubKey: getSelectedWallet(state)?.walletPublicKey,
                            blockchain: account?.blockchain,
                            chainId: String(chainId),
                            address: account?.address,
                            step: data?.context?.step || action.params?.params?.step,
                            tab: undefined
                        });

                        if (
                            state.ui.screens.inputData &&
                            state.ui.screens.inputData[screenKey]?.data
                        ) {
                            data = {
                                ...data,
                                screenData: state.ui.screens.inputData[screenKey]?.data
                            };
                        }

                        try {
                            await httpClient.post('', { ...data });
                        } catch {
                            //
                        }
                    }
                    break;
                }

                case 'canPerformAction': {
                    const blockchain = getSelectedBlockchain(state);
                    const blockchainInstance = getBlockchain(blockchain);
                    const chainId = getChainId(state, blockchain);
                    const { opAction, validatorAddress } = action?.params?.params;

                    if (opAction && validatorAddress && Array.isArray(validatorAddress)) {
                        const performAction: {
                            value: boolean;
                            message: string;
                        } = await blockchainInstance.getClient(chainId).canPerformAction(opAction, {
                            account: getSelectedAccount(state),
                            validatorAddress
                        });

                        if (performAction && performAction.value === false) {
                            Dialog.alert(
                                translate('Validator.operationNotAvailable'),
                                performAction.message,
                                undefined,
                                {
                                    text: translate('App.labels.ok'),
                                    onPress: () => NavigationService.goBack()
                                }
                            );
                        }
                    }
                    break;
                }

                case 'stakeNowSupportDialog': {
                    const {
                        title,
                        body,
                        button1Text,
                        button2Text,
                        // flowId,
                        validators,
                        moonletValidatorId,
                        amount,
                        token
                    } = action?.params?.params;

                    Dialog.alert(
                        title,
                        body,
                        {
                            text: button1Text,
                            onPress: () => {
                                // I don't care

                                // Remove Moonlet Validator

                                const validatorsWithoutMoonlet = validators.filter(
                                    vld =>
                                        vld?.address?.toLowerCase() !==
                                            moonletValidatorId?.toLowerCase() &&
                                        vld?.id?.toLowerCase() !== moonletValidatorId?.toLowerCase()
                                );

                                const selectedValidators = [];
                                for (const v of validatorsWithoutMoonlet) {
                                    selectedValidators.push(
                                        buildDummyValidator(
                                            v?.address || v?.id,
                                            v.name,
                                            v?.icon,
                                            v?.website
                                        )
                                    );
                                }

                                // Open process tx
                                delegate(
                                    getSelectedAccount(state),
                                    amount,
                                    selectedValidators,
                                    token,
                                    undefined, // feeOptions
                                    undefined
                                )(dispatch, getState);

                                // NavigationService.navigate(
                                //     'SmartScreen',
                                //     {
                                //         context: {
                                //             screen: 'StakeNow',
                                //             step: 'StakeNowQuestionnaire',
                                //             key: 'stake-now-questionnaire',
                                //             flowId,
                                //             params: {
                                //                 validators
                                //             }
                                //         },
                                //         navigationOptions: {
                                //             title: 'Questionnaire'
                                //         }
                                //     },
                                //     'stake-now-questionnaire'
                                // );
                            }
                        },
                        {
                            text: button2Text,
                            onPress: () => {
                                // I’ll support you

                                // Check validations
                                const account = getSelectedAccount(state);
                                const chainId = getChainId(state, account.blockchain);

                                const screenKey = getScreenDataKey({
                                    pubKey: getSelectedWallet(state)?.walletPublicKey,
                                    blockchain: account?.blockchain,
                                    chainId: String(chainId),
                                    address: account?.address,
                                    step: action.params?.params?.step,
                                    tab: undefined
                                });

                                if (
                                    state.ui.screens.inputData[screenKey]?.validation?.valid ===
                                    true
                                ) {
                                    // Open process tx and start processing
                                    handleCta(
                                        {
                                            type: 'callAction',
                                            params: {
                                                action: 'delegateToValidatorV2',
                                                params: {
                                                    step: action?.params?.params?.step,
                                                    token: action?.params?.params?.token
                                                }
                                            }
                                        },
                                        options
                                    )(dispatch, getState);
                                } else {
                                    const msg =
                                        (state.ui.screens.inputData[screenKey]?.validation
                                            ?.fieldsErrors?.amount &&
                                            state.ui.screens.inputData[screenKey]?.validation
                                                ?.fieldsErrors?.amount[0]?.message) ||
                                        translate('App.labels.errorOccured');
                                    Dialog.info(translate('App.labels.warning'), msg);
                                }
                            }
                        }
                    );
                    break;
                }

                case 'navigateToEnterAmountStep': {
                    const validators = action?.params?.params?.validators || [];

                    const selectedValidators = [];
                    for (const v of validators) {
                        selectedValidators.push(
                            buildDummyValidator(v?.address || v?.id, v.name, v?.icon, v?.website)
                        );
                    }

                    const account = getSelectedAccount(state);
                    const chainId = getChainId(state, account.blockchain);
                    const token =
                        account.tokens[chainId][getBlockchain(account.blockchain).config.coin];

                    // Navigate to enter amount step
                    navigateToEnterAmountStep(
                        account.index,
                        account.blockchain,
                        token,
                        selectedValidators,
                        'App.labels.stakeNow',
                        'QuickDelegateEnterAmount',
                        QUICK_DELEGATE_ENTER_AMOUNT,
                        undefined,
                        action?.params?.params?.screenKey
                    )(dispatch);

                    break;
                }

                case 'amountSelectableBoxPercentageToMoonlet': {
                    const screenKey = options?.screenKey;

                    const amountBox =
                        (screenKey &&
                            state.ui.screens.inputData &&
                            state.ui.screens.inputData[options.screenKey]?.data?.amountBox) ||
                        action?.params?.params?.amountBox;

                    if (
                        action?.params?.params?.amount &&
                        amountBox &&
                        amountBox?.type === 'percentage' &&
                        amountBox?.value &&
                        action?.params?.params?.validators &&
                        Array.isArray(action.params.params.validators)
                    ) {
                        const inputAmount = action.params.params.amount;
                        const validators = action.params.params.validators;
                        const percentage = amountBox.value;

                        const moonletValidator = validators[0];
                        const moonletValidatorStakedAmount = new BigNumber(percentage)
                            .multipliedBy(new BigNumber(inputAmount))
                            .dividedBy(100);

                        setScreenInputData(screenKey, {
                            [moonletValidator.address]: {
                                validator: moonletValidator,
                                amount: moonletValidatorStakedAmount
                            }
                        })(dispatch, getState);

                        // (100 - procent) / (validators length - 1) * input * 100
                        const splitStakePerOtherValidators = new BigNumber(
                            new BigNumber(100).minus(new BigNumber(percentage))
                        )
                            .dividedBy(new BigNumber(validators.length - 1))
                            .multipliedBy(new BigNumber(inputAmount))
                            .dividedBy(new BigNumber(100));

                        for (const validator of action.params.params.validators) {
                            const vId = validator?.address || validator?.id;
                            if (vId !== moonletValidator.address) {
                                setScreenInputData(screenKey, {
                                    [vId]: {
                                        validator,
                                        amount: splitStakePerOtherValidators
                                    }
                                })(dispatch, getState);
                            }
                        }

                        runScreenValidation(
                            state.ui.screens.data.StakeNow[options.screenKey].response?.validation,
                            options.screenKey
                        )(dispatch, getState);
                    }
                    break;
                }

                case 'amountSelectableBoxPercentageSwap': {
                    const screenKey = options?.screenKey;

                    const screenData =
                        screenKey &&
                        state.ui.screens.inputData &&
                        state.ui.screens.inputData[screenKey]?.data;

                    // const swapType = screenData?.swapType;

                    const amountBox = screenData?.amountBox || action?.params?.params?.amountBox;

                    if (
                        screenKey &&
                        amountBox &&
                        action.params?.params?.inputKey &&
                        action.params?.params?.screenValidation

                        // action.params?.params &&
                        // action.params?.params[swapType] &&
                        // action.params?.params[swapType]?.amount &&
                        // action.params?.params[swapType]?.inputKey &&
                        // action.params?.params[swapType]?.screenValidation
                    ) {
                        const params = action.params?.params; // [swapType];

                        // const amount = params.amount;
                        const amount = screenData.maxBalance.token1;

                        const inputKey = params.inputKey;

                        const percentage = amountBox.value;

                        const finalAmount = new BigNumber(percentage)
                            .multipliedBy(new BigNumber(amount))
                            .dividedBy(100);

                        setScreenInputData(screenKey, {
                            [inputKey]: finalAmount.toFixed()
                        })(dispatch, getState);

                        runScreenValidation(params.screenValidation, screenKey)(dispatch, getState);
                    }
                    break;
                }

                case 'setAmountInputFieldFocus': {
                    const screenKey = options?.screenKey;

                    const screenData =
                        screenKey &&
                        state.ui.screens.inputData &&
                        state.ui.screens.inputData[screenKey]?.data;

                    const swapType = screenData?.swapType;

                    const inputKey =
                        swapType &&
                        action.params?.params &&
                        action.params.params[swapType]?.inputKey;

                    if (screenData && inputKey) {
                        // Update input field focus - the amount input in which the user enters
                        setScreenInputData(screenKey, {
                            ...screenData,
                            inputFieldFocus: inputKey
                        })(dispatch, getState);
                    }
                    break;
                }

                case 'navigateToStakeNowEnterAmountValidators': {
                    const account = getSelectedAccount(state);
                    const chainId = getChainId(state, account.blockchain);

                    const screenKey = getScreenDataKey({
                        pubKey: getSelectedWallet(state)?.walletPublicKey,
                        blockchain: account?.blockchain,
                        chainId: String(chainId),
                        address: account?.address,
                        step: action.params?.params?.step,
                        tab: undefined
                    });

                    const validators: any = state.ui.screens.inputData[screenKey]?.data?.validators;

                    NavigationService.navigate(
                        'SmartScreen',
                        {
                            context: {
                                screen: 'StakeNow',
                                step: 'StakeNowEnterAmountValidators',
                                key: 'stake-now-enter-amount-validators',
                                flowId: action.params?.params?.flowId,
                                screenKey,
                                params: {
                                    validators
                                }
                            },
                            navigationOptions: {
                                title: 'Stake now'
                            }
                        },
                        screenKey
                    );
                    break;
                }

                case 'navigateToStakeNowPartToMoonlet': {
                    const account = getSelectedAccount(state);
                    const chainId = getChainId(state, account.blockchain);

                    const screenKey = getScreenDataKey({
                        pubKey: getSelectedWallet(state)?.walletPublicKey,
                        blockchain: account?.blockchain,
                        chainId: String(chainId),
                        address: account?.address,
                        step: action.params?.params?.step,
                        tab: undefined
                    });

                    const validators: any = action.params?.params?.validators;
                    const amount = state.ui.screens.inputData[screenKey]?.data?.amount;

                    NavigationService.navigate(
                        'SmartScreen',
                        {
                            context: {
                                screen: 'StakeNow',
                                step: 'StakeNowPartToMoonlet',
                                key: 'switch-node-part-to-moonlet',
                                flowId: action.params?.params?.flowId || screenKey,
                                params: {
                                    validators,
                                    amount
                                }
                            },
                            navigationOptions: {
                                title: 'Stake now',
                                headerStyle: {
                                    backgroundColor: '#005067',
                                    borderBottomWidth: 0,
                                    shadowColor: 'transparent'
                                }
                            },
                            background: {
                                gradient: ['#005067', '#061529']
                            }
                        },
                        screenKey
                    );
                    break;
                }

                case 'navigateToStakeNowPartToMoonletCheckAmount': {
                    const account = getSelectedAccount(state);
                    const chainId = getChainId(state, account.blockchain);

                    const screenKey = getScreenDataKey({
                        pubKey: getSelectedWallet(state)?.walletPublicKey,
                        blockchain: account?.blockchain,
                        chainId: String(chainId),
                        address: account?.address,
                        step: action.params?.params?.step,
                        tab: undefined
                    });

                    const amount = state.ui.screens.inputData[screenKey]?.data?.amount;
                    const minAmountToStake = action.params?.params?.minAmountToStake || 100;

                    if (new BigNumber(amount).isGreaterThan(new BigNumber(minAmountToStake))) {
                        handleCta(
                            {
                                type: 'callAction',
                                params: {
                                    action: 'navigateToStakeNowPartToMoonlet',
                                    params: {
                                        step: action.params?.params?.step,
                                        validators: action.params?.params?.validators,
                                        flowId: action.params?.params?.flowId
                                    }
                                }
                            },
                            options
                        )(dispatch, getState);
                    } else {
                        handleCta({
                            type: 'callAction',
                            params: {
                                action: 'delegateToValidatorV2',
                                params: {
                                    step: action.params?.params?.step,
                                    validators: action.params?.params?.validators,
                                    flowId: action.params?.params?.flowId,
                                    token: action.params?.params?.token
                                }
                            }
                        })(dispatch, getState);
                    }
                    break;
                }

                case 'govProposalChoice': {
                    const proposal = action.params?.params?.proposal;
                    const choice = action.params?.params?.choice;
                    const gzilContractAddress = action.params?.params?.gzilContractAddress;
                    const metadata = action.params?.params?.metadata || {};
                    const proposalType = action.params?.params?.proposalType || 'vote';

                    const account = getSelectedAccount(state);
                    const blockchain = account?.blockchain;
                    const selectedWallet = getSelectedWallet(state);
                    const appWallet = getWalletByPubKey(state, selectedWallet.walletPublicKey);

                    if (!appWallet || !account) {
                        break;
                    }

                    let msg;
                    let sig;

                    try {
                        let password = '';

                        if (appWallet.type === WalletType.HD) {
                            password = await PasswordModal.getPassword(
                                translate('Password.pinTitleUnlock'),
                                translate('Password.subtitleSignMessage'),
                                { sensitive: true, showCloseButton: true }
                            );
                            await LoadingModal.open({
                                type: TransactionMessageType.INFO,
                                text: TransactionMessageText.GOVERNANCE_SIGN
                            });
                        }

                        const wallet: {
                            signMessage: (
                                blockchain: Blockchain,
                                accountIndex: number,
                                accountType: AccountType,
                                message: string
                            ) => Promise<any>;
                        } =
                            appWallet.type === WalletType.HW
                                ? LedgerConnect
                                : await WalletFactory.get(appWallet.id, appWallet.type, {
                                      pass: password,
                                      deviceVendor: appWallet.hwOptions?.deviceVendor,
                                      deviceModel: appWallet.hwOptions?.deviceModel,
                                      deviceId: appWallet.hwOptions?.deviceId,
                                      connectionType: appWallet.hwOptions?.connectionType
                                  });

                        const message = JSON.stringify({
                            version: proposal.msg.version,
                            timestamp: String(Math.floor(Date.now() / 1000)),
                            token: gzilContractAddress,
                            type: proposalType,
                            payload: {
                                proposal: proposal.authorIpfsHash,
                                choice,
                                metadata
                            }
                        });

                        msg = message;

                        const signedMessage = await wallet.signMessage(
                            blockchain,
                            account.index,
                            account.type,
                            message
                        );

                        sig =
                            typeof signedMessage === 'string'
                                ? JSON.parse(signedMessage)
                                : signedMessage;

                        await LoadingModal.open({
                            type: TransactionMessageType.INFO,
                            text: TransactionMessageText.GOVERNANCE_VOTING
                        });

                        const sendVoteRes = await new ApiClient().governance.sendVote(
                            {
                                address: fromBech32Address(account.address),
                                msg: message,
                                sig
                            },
                            proposal.authorIpfsHash,
                            {
                                blockchain,
                                chainId: String(getChainId(state, blockchain))
                            }
                        );

                        if (sendVoteRes?.success === true) {
                            await LoadingModal.showMessageWithIcon(
                                {
                                    type: TransactionMessageType.INFO,
                                    text: TransactionMessageText.GOVERNANCE_VOTED
                                },
                                IconValues.CHECKMARK_CIRCLE
                            );

                            // Wait 2 seconds in order to display Success message
                            await delay(2000);

                            NavigationService.navigate('Dashboard', {});
                        } else {
                            Dialog.info(
                                translate('App.labels.warning'),
                                translate('App.labels.errorOccured')
                            );
                        }
                    } catch (errorMessage) {
                        Dialog.info(
                            translate('App.labels.warning'),
                            translate('App.labels.errorOccured')
                        );

                        SentryCaptureException(
                            new Error(
                                JSON.stringify({
                                    errorMessage,
                                    address: fromBech32Address(account.address),
                                    msg,
                                    sig
                                })
                            )
                        );
                    }
                    await LoadingModal.close();
                    break;
                }

                case 'gzilProposalCheckVotingOptions':
                    options?.pubSub &&
                        options.pubSub.emit(SmartScreenPubSubEvents.SCROLL_TO_END, undefined);
                    break;

                case 'widgetsCollapseAll':
                    options?.pubSub &&
                        options.pubSub.emit(SmartScreenPubSubEvents.COLLAPSE_ALL, undefined);
                    break;

                case 'solanaDelegateStakeAccount': {
                    const account = getSelectedAccount(state);
                    const chainId = getChainId(state, account.blockchain);

                    const token = action.params.params.token;
                    const amount = action.params.params.amount;

                    const validators: {
                        validator: IValidator;
                        amount: string;
                    }[] = [];

                    if (action.params?.params?.validator) {
                        const validator = action.params.params.validator;

                        validators.push({
                            validator: buildDummyValidator(
                                validator?.id || validator?.address,
                                validator.name,
                                validator.icon,
                                validator.website
                            ),
                            amount
                        });
                    } else {
                        const screenKey = getScreenDataKey({
                            pubKey: getSelectedWallet(state)?.walletPublicKey,
                            blockchain: account?.blockchain,
                            chainId: String(chainId),
                            address: account?.address,
                            step: action.params?.params?.step,
                            tab: undefined
                        });

                        const data = state.ui.screens.inputData[screenKey]?.data;

                        // Build validators list from redux
                        for (const v of data?.validators || []) {
                            validators.push({
                                validator: buildDummyValidator(
                                    v?.id || v?.address,
                                    v.name,
                                    v.icon,
                                    v.website
                                ),
                                amount
                            });
                        }
                    }

                    solanaDelegateStakeAccount(
                        account,
                        validators,
                        token,
                        undefined, // feeOptions
                        { stakeAccountKey: action.params.params.stakeAccountKey }
                    )(dispatch, getState);
                    break;
                }
                case 'solanaCreateStakeAccount': {
                    const token = action.params?.params?.token;

                    const account = getSelectedAccount(state);
                    const chainId = getChainId(state, account.blockchain);

                    const screenKey = getScreenDataKey({
                        pubKey: getSelectedWallet(state)?.walletPublicKey,
                        blockchain: account?.blockchain,
                        chainId: String(chainId),
                        address: account?.address,
                        step: action.params?.params?.step,
                        tab: undefined
                    });

                    const amount = state.ui.screens.inputData[screenKey]?.data?.amount;

                    solanaCreateStakeAccount(
                        account,
                        amount,
                        token,
                        undefined, // feeOptions
                        {
                            stakeAccountKey: action.params.params.stakeAccountKey,
                            stakeAccountIndex: action.params.params.stakeAccountIndex
                        }
                    )(dispatch, getState);
                    break;
                }

                case 'solanaCreateAndDelegateStakeAccount': {
                    const account = getSelectedAccount(state);
                    const chainId = getChainId(state, account.blockchain);

                    const screenKey = getScreenDataKey({
                        pubKey: getSelectedWallet(state)?.walletPublicKey,
                        blockchain: account?.blockchain,
                        chainId: String(chainId),
                        address: account?.address,
                        step: action.params?.params?.step,
                        tab: undefined
                    });

                    const token = action.params.params.token;
                    const validator = action.params.params.validator;

                    const amount = state.ui.screens.inputData[screenKey]?.data?.amount;

                    const validators: {
                        validator: IValidator;
                        amount: string;
                    }[] = [];

                    validators.push({
                        validator: buildDummyValidator(
                            validator?.id || validator?.address,
                            validator.name,
                            validator.icon,
                            validator.website
                        ),
                        amount
                    });

                    solanaCreateAndDelegateStakeAccount(
                        account,
                        validators,
                        token,
                        undefined, // feeOptions
                        {
                            stakeAccountKey: action.params.params.stakeAccountKey,
                            stakeAccountIndex: action.params.params.stakeAccountIndex,
                            amount
                        }
                    )(dispatch, getState);
                    break;
                }

                case 'solanaSplitStakeAccount': {
                    const token = action.params?.params?.token;

                    const account = getSelectedAccount(state);
                    const chainId = getChainId(state, account.blockchain);

                    const screenKey = getScreenDataKey({
                        pubKey: getSelectedWallet(state)?.walletPublicKey,
                        blockchain: account?.blockchain,
                        chainId: String(chainId),
                        address: account?.address,
                        step: action.params?.params?.step,
                        tab: undefined
                    });

                    const amount = state.ui.screens.inputData[screenKey]?.data?.amount;

                    solanaSplitStakeAccount(
                        getSelectedAccount(state),
                        amount,
                        token,
                        undefined, // feeOptions
                        {
                            stakeAccountKey: action.params.params.stakeAccountKey,
                            splitFrom: action.params.params.splitFrom,
                            stakeAccountIndex: action.params.params.stakeAccountIndex
                        }
                    )(dispatch, getState);
                    break;
                }
                case 'solanaUnstake': {
                    const token = action.params?.params?.token;
                    const amount = action.params?.params?.amount;
                    const validator = action.params?.params?.validator;

                    const validators = [buildDummyValidator(validator.address, validator.name)];

                    solanaUnstake(
                        getSelectedAccount(state),
                        amount,
                        validators,
                        token,
                        undefined, // feeOptions
                        { stakeAccountKey: action.params.params.stakeAccountKey }
                    )(dispatch, getState);
                    break;
                }
                case 'solanaWithdraw': {
                    const token = action.params?.params?.token;
                    const amount = action.params?.params?.amount;

                    solanaWithdraw(
                        getSelectedAccount(state),
                        amount,
                        token,
                        undefined, // feeOptions
                        { stakeAccountKey: action.params.params.stakeAccountKey, amount }
                    )(dispatch, getState);
                    break;
                }

                case 'moveInputDataFromScreenToFlow': {
                    const flowId = action.params?.params?.flowId || options?.flowId;

                    // Current screen key
                    let screenKey = options?.screenKey;

                    // Build custom screen key
                    if (action.params?.params?.step) {
                        const account = getSelectedAccount(state);
                        const chainId = getChainId(state, account.blockchain);

                        screenKey = getScreenDataKey({
                            pubKey: getSelectedWallet(state)?.walletPublicKey,
                            blockchain: account?.blockchain,
                            chainId: String(chainId),
                            address: account?.address,
                            step: action.params.params.step,
                            tab: undefined
                        });
                    }

                    if (flowId && screenKey) {
                        const screenData =
                            state.ui.screens.inputData &&
                            state.ui.screens.inputData[screenKey]?.data;

                        if (screenData) {
                            setScreenInputData(flowId, screenData)(dispatch, getState);
                        }
                    }
                    break;
                }

                case 'closeProcessTransactions': {
                    dispatch(closeProcessTransactions());
                    break;
                }

                case 'swapSwitch': {
                    // Current screen key
                    const screenKey = options?.screenKey;

                    const screenData =
                        screenKey &&
                        state.ui.screens.inputData &&
                        state.ui.screens.inputData[screenKey]?.data;

                    if (screenKey && screenData) {
                        setScreenInputData(screenKey, {
                            ...screenData,
                            swapType: SwapType.SELL, // keep this be always sell

                            swapToken1: screenData.swapToken2,
                            swapToken2: screenData.swapToken1,

                            swapToken1Amount: '',
                            swapToken2Amount: '',
                            inputFieldFocus: 'swapToken1Amount',

                            maxBalance: {
                                token1: screenData.maxBalance.token2,
                                token2: screenData.maxBalance.token1
                            },

                            amountBox: undefined
                        })(dispatch, getState);
                    }
                    break;
                }

                default:
                    if (action.params?.action) {
                        if (supportedActions[action.params.action]) {
                            try {
                                supportedActions[action.params.action]({ action, options })(
                                    dispatch,
                                    getState
                                );
                            } catch (error) {
                                SentryCaptureException(
                                    new Error(
                                        JSON.stringify({
                                            message: 'Smart screen action not available',
                                            action: action.params.action,
                                            error
                                        })
                                    )
                                );
                            }
                        }
                    }

                    break;
            }
            break;

        case 'navigateTo': {
            const account = getSelectedAccount(state);

            const blockchain = account?.blockchain;

            const chainId = blockchain && getChainId(state, blockchain);

            let token: ITokenState;
            if (blockchain && action?.params?.params?.token === true) {
                const blockchainConfig = getBlockchain(blockchain);
                token = account.tokens[chainId][blockchainConfig.config.coin];
            }

            if (
                blockchain &&
                action?.params?.params?.token &&
                typeof action?.params?.params?.token === 'string'
            ) {
                token = account.tokens[chainId][action.params.params.token];
            }

            const screen = action.params?.params?.screen || action.params?.screen;
            const screenKey = action.params?.params?.context?.key;

            NavigationService.navigate(
                screen,
                {
                    ...action.params?.params,
                    extraParams: options?.extraParams,
                    blockchain,
                    accountIndex: account?.index,
                    token
                },
                screenKey
            );
            break;
        }

        case 'navigateReplace': {
            const screen = action.params?.params?.screen || action.params?.screen;
            const screenKey = action.params?.params?.context?.key;

            NavigationService.replace(
                screen,
                {
                    ...action.params?.params,
                    extraParams: options?.extraParams
                },
                screenKey
            );
            break;
        }

        case 'openUrl':
            action?.params?.url && openURL(action.params.url);
            break;

        case 'onBack':
            NavigationService.goBack();
            break;

        case 'navigationOnPop':
            const count = Number(action?.params?.count);
            NavigationService.pop(count);
            break;

        default:
            break;
    }
};

'''
'''--- src/redux/ui/screens/data/reducer.ts ---
import { IScreenData, IScreenDataState } from './state';
import { IAction } from '../../../types';
import {
    FETCH_SCREEN_DATA,
    LOAD_MORE_VALIDATORS,
    LOAD_MORE_VALIDATORS_V2,
    SCREEN_DATA_START_LOADING,
    RESET_SCREEN_DATA
} from './actions';
import {
    ContextScreen,
    IScreenModule,
    IScreenRequest,
    IScreenWidget
} from '../../../../components/widgets/types';
import { Blockchain } from '../../../../core/blockchain/types';

const intialState: IScreenDataState = {};

export default (state: IScreenDataState = intialState, action: IAction): IScreenDataState => {
    switch (action.type) {
        case SCREEN_DATA_START_LOADING: {
            const request: IScreenRequest = action.data.request;

            const key = getScreenDataKey({
                pubKey: request.user.wallet.pubKey,
                blockchain: request.user.blockchain,
                chainId: request.user.chainId,
                address: request.user.address,
                step: request.context?.step,
                tab: request.context?.tab
            });

            return {
                ...state,
                [request.context.screen]: {
                    ...state[request.context.screen],
                    [key]: {
                        request,
                        response:
                            state[request.context.screen] &&
                            state[request.context.screen][key]?.response,
                        isLoading: true,
                        error: undefined
                    }
                }
            };
        }

        case FETCH_SCREEN_DATA: {
            const request: IScreenRequest = action.data.request;

            const key = getScreenDataKey({
                pubKey: request.user.wallet.pubKey,
                blockchain: request.user.blockchain,
                chainId: request.user.chainId,
                address: request.user.address,
                step: request.context?.step,
                tab: request.context?.tab
            });

            return {
                ...state,
                [request.context.screen]: {
                    ...state[request.context.screen],
                    [key]: action.data
                }
            };
        }

        case LOAD_MORE_VALIDATORS: {
            const screenData: IScreenData = {
                ...state[ContextScreen.QUICK_STAKE_SELECT_VALIDATOR][action.data.screenKey]
            };

            screenData.response.widgets.map((widget: IScreenWidget) =>
                widget.modules.map((module: IScreenModule) => {
                    // Show all the modules
                    if (module?.hidden === true) {
                        module.hidden = false;
                    }

                    // Hide Load More module
                    if (module?.hidden === undefined) {
                        module.hidden = true;
                    }
                })
            );

            return {
                ...state,
                [ContextScreen.QUICK_STAKE_SELECT_VALIDATOR]: {
                    ...state[ContextScreen.QUICK_STAKE_SELECT_VALIDATOR],
                    screenData
                }
            };
        }

        case LOAD_MORE_VALIDATORS_V2: {
            const screenData: IScreenData = {
                ...state[action.data.screen][action.data.screenKey]
            };

            screenData.response.widgets.map((widget: IScreenWidget) =>
                widget.modules.map((module: IScreenModule) => {
                    // Show all the modules
                    if (module?.hidden === true) {
                        module.hidden = false;
                    }

                    // Hide Load More module
                    if (module?.hidden === undefined) {
                        module.hidden = true;
                    }
                })
            );

            return {
                ...state,
                [action.data.screen]: {
                    ...state[action.data.screen],
                    screenData
                }
            };
        }

        case RESET_SCREEN_DATA:
            return {
                ...state,
                [action.data.context.screen]: {
                    ...state[action.data.context.screen],
                    [action.data.screenKey]: undefined
                }
            };

        default:
            break;
    }
    return state;
};

export const getScreenDataKey = (data: {
    pubKey: string;
    blockchain: Blockchain;
    chainId: string;
    address: string;
    step: string;
    tab: string;
}): string => {
    // 'walletPubKey-blockchain-chainId-address-step-tab'
    let key = data.pubKey + '-' + data.blockchain + '-' + data.chainId + '-' + data.address;

    if (data?.step) {
        key = key + '-' + data.step;
    }

    if (data?.tab) {
        key = key + '-' + data.tab;
    }

    return key;
};

'''
'''--- src/redux/ui/screens/data/state.ts ---
import { IScreenRequest, IScreenResponse } from '../../../../components/widgets/types';

export interface IScreenData {
    request: IScreenRequest;
    response: IScreenResponse;

    isLoading: boolean;
    error: any;
}

export interface IScreensData {
    // key: 'walletPubKey-blockchain-chainId-address-step-tab'
    [key: string]: IScreenData;
}

export interface IScreenDataState {
    [screen: string]: IScreensData;
}

'''
'''--- src/redux/ui/screens/input-data/actions.ts ---
import BigNumber from 'bignumber.js';
import { Dispatch } from 'react';
import {
    IAmountInputData,
    IScreenContext,
    IScreenModule,
    IScreenValidation,
    IStateSelector
} from '../../../../components/widgets/types';
import { getBlockchain } from '../../../../core/blockchain/blockchain-factory';
import { SwapType } from '../../../../core/blockchain/types/token';
import { IReduxState } from '../../../state';
import { IAction } from '../../../types';
import { getSelectedBlockchain } from '../../../wallets/selectors';
import { screenActions } from './screen-actions';
import { IScreenInputDataValidations } from './state';
import { screenInputValidationActions } from './validation/index';

export const TOGGLE_VALIDATOR_MULTIPLE = 'TOGGLE_VALIDATOR_MULTIPLE';
export const SET_INPUT = 'SET_INPUT';
export const SET_INPUT_VALIDATION = 'SET_INPUT_VALIDATION';
export const CLEAR_INPUT = 'CLEAR_INPUT';

export const toggleValidatorMultiple = (
    screenKey: string,
    validator: {
        id: string;
        name: string;
        icon?: string;
        website?: string;
    }
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    dispatch({
        type: TOGGLE_VALIDATOR_MULTIPLE,
        data: {
            screenKey,
            validator
        }
    });
};

export const setScreenInputData = (screenKey: string, inputData: { [key: string]: any }) => async (
    dispatch: Dispatch<IAction<any>>,
    getState: () => IReduxState
) => {
    dispatch({
        type: SET_INPUT,
        data: {
            screenKey,
            inputData
        }
    });
};

export const setScreenInputValidation = (
    screenKey: string,
    validation: IScreenInputDataValidations
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    dispatch({
        type: SET_INPUT_VALIDATION,
        data: {
            screenKey,
            validation
        }
    });
};

export const clearScreenInputData = (
    screenKey: string,
    inputData: { [input: string]: any }
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    dispatch({
        type: CLEAR_INPUT,
        data: {
            screenKey,
            inputData
        }
    });
};

export const setScreenAmount = (
    balance: string,
    options: {
        screenKey: string;
        context: IScreenContext;
        inputKey?: string;
    }
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    const data = options?.inputKey
        ? {
              [options?.inputKey]: balance
          }
        : { amount: balance };

    setScreenInputData(options.screenKey, data)(dispatch, getState);

    const state = getState();

    runScreenValidation(
        state.ui.screens.data[options.context.screen][options.screenKey].response?.validation,
        options.screenKey
    )(dispatch, getState);
};

export const setFlowAmount = (balance: string, flowId: string) => async (
    dispatch: Dispatch<IAction<any>>,
    getState: () => IReduxState
) => {
    setScreenInputData(flowId, {
        amount: balance
    })(dispatch, getState);
};

export const runScreenValidation = (validation: IScreenValidation, flowId: string) => async (
    dispatch: Dispatch<IAction<any>>,
    getState: () => IReduxState
) => {
    const validators = validation?.validators || {};

    for (const field of Object.keys(validators)) {
        for (const val of validators[field]) {
            if (typeof screenInputValidationActions[val.fn] === 'function') {
                screenInputValidationActions[val.fn](val, field, flowId, getState, dispatch);
            }
        }
    }
};

export const runScreenStateActions = (options: {
    actions: IStateSelector[];
    context: IScreenContext;
    screenKey: string;
}) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    for (const action of options.actions) {
        if (typeof screenActions[action.fn] === 'function') {
            screenActions[action.fn](
                action?.params,
                options.context,
                options.screenKey,
                dispatch,
                getState
            );
        }
    }
};

export const setSwapInputAmount = (
    context: IScreenContext,
    screenKey: string,
    params?: any
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    const state = getState();
    const blockchain = getSelectedBlockchain(state);

    const screenData =
        screenKey && state.ui.screens.inputData && state.ui.screens.inputData[screenKey]?.data;

    if (!screenKey || !screenData) return;

    // don't populate fields if empty input
    if (
        (screenData?.swapToken1Amount === '' && screenData?.swapToken2Amount === '') ||
        (screenData?.swapToken1Amount === undefined && screenData?.swapToken2Amount === undefined)
    )
        return;

    const inputFieldFocus = screenData?.inputFieldFocus;

    const toInput =
        inputFieldFocus === 'swapToken1Amount' ? 'swapToken2Amount' : 'swapToken1Amount';

    const token1Amount = screenData?.swapPrice?.fromTokenAmount;
    const token2Amount = screenData?.swapPrice?.toTokenAmount;

    const blockchainInstance = getBlockchain(blockchain);

    const swapType = screenData?.swapType;

    let amount: BigNumber;

    if (swapType === SwapType.SELL) {
        // SELL
        if (inputFieldFocus === 'swapToken1Amount') {
            const decimals = screenData.swapToken2.decimals;
            amount = blockchainInstance.account.amountFromStd(token2Amount, decimals);
        }
        if (inputFieldFocus === 'swapToken2Amount') {
            const decimals = screenData.swapToken1.decimals;
            amount = blockchainInstance.account.amountFromStd(token1Amount, decimals);
        }
    } else {
        // BUY
        if (inputFieldFocus === 'swapToken1Amount') {
            const decimals = screenData.swapToken2.decimals;
            amount = blockchainInstance.account.amountFromStd(token1Amount, decimals);
        }
        if (inputFieldFocus === 'swapToken2Amount') {
            const decimals = screenData.swapToken1.decimals;
            amount = blockchainInstance.account.amountFromStd(token2Amount, decimals);
        }
    }

    let finalAmount = '';

    const uiDecimals = params?.uiDecimals;
    finalAmount = uiDecimals ? amount.toFixed(uiDecimals, BigNumber.ROUND_DOWN) : amount.toFixed();

    setScreenAmount(finalAmount, {
        screenKey,
        context,
        inputKey: toInput
    })(dispatch, getState);
};

const setAmountInputFieldFocus = (
    module: IScreenModule,
    context: IScreenContext,
    screenKey: string,
    params: any[]
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    const state = getState();

    const inputKey = module?.details?.inputKey;

    const screenData =
        screenKey && state.ui.screens.inputData && state.ui.screens.inputData[screenKey]?.data;

    if (screenData && inputKey) {
        // Update input field focus - the amount input in which the user enters
        setScreenInputData(screenKey, {
            ...screenData,
            inputFieldFocus: inputKey
        })(dispatch, getState);
    }
};

const onChangeTextActions = {
    setAmountInputFieldFocus
};

export const onAmountChangeTextAction = (
    module: IScreenModule,
    context: IScreenContext,
    screenKey: string
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    const data = module.data as IAmountInputData;

    if (typeof onChangeTextActions[data.onChangeTextAction.fn] === 'function') {
        onChangeTextActions[data.onChangeTextAction.fn](
            module,
            context,
            screenKey,
            data.onChangeTextAction?.params
        )(dispatch, getState);
    }
};

'''
'''--- src/redux/ui/screens/input-data/reducer.ts ---
import { IScreenInputState } from './state';
import { IAction } from '../../../types';
import { TOGGLE_VALIDATOR_MULTIPLE, SET_INPUT, CLEAR_INPUT, SET_INPUT_VALIDATION } from './actions';
import { RESET_SCREEN_DATA } from '../data/actions';

const intialState: IScreenInputState = {};

export default (state: IScreenInputState = intialState, action: IAction): IScreenInputState => {
    switch (action.type) {
        case TOGGLE_VALIDATOR_MULTIPLE:
            const validator = action.data.validator;
            const validators = [];
            Object.assign(validators, state[action.data.screenKey]?.data?.validators);
            const validatorIndex = validators.findIndex(v => v.id === validator.id);

            if (validatorIndex === -1) {
                // select validator
                validators.push(validator);
            } else {
                // unselect validator
                validators.splice(validatorIndex, 1);
            }

            return {
                ...state,
                [action.data.screenKey]: {
                    ...state[action.data.screenKey],
                    data: {
                        ...state[action.data.screenKey]?.data,
                        validators
                    }
                }
            };

        case SET_INPUT:
            return {
                ...state,
                [action.data.screenKey]: {
                    ...state[action.data.screenKey],
                    data: {
                        ...state[action.data.screenKey]?.data,
                        ...action.data.inputData
                    }
                }
            };

        case SET_INPUT_VALIDATION:
            return {
                ...state,
                [action.data.screenKey]: {
                    ...state[action.data.screenKey],
                    validation: action.data.validation
                }
            };

        case CLEAR_INPUT:
            const screenData = state[action.data.screenKey]?.data;

            for (const inputKey of Object.keys(action.data.inputData || [])) {
                const inputValue = action.data.inputData[inputKey];
                if (screenData && screenData[inputKey]) {
                    screenData[inputKey] = inputValue;
                }
            }

            return {
                ...state,
                [action.data.screenKey]: {
                    ...state[action.data.screenKey],
                    data: {
                        ...state[action.data.screenKey]?.data,
                        ...screenData
                    }
                }
            };

        case RESET_SCREEN_DATA:
            return {
                ...state,
                [action.data.screenKey]: undefined
            };

        default:
            break;
    }
    return state;
};

'''
'''--- src/redux/ui/screens/input-data/screen-actions/index.ts ---
import { Dispatch } from 'react';
import { IScreenContext } from '../../../../../components/widgets/types';
import { getBlockchain } from '../../../../../core/blockchain/blockchain-factory';
import { IReduxState } from '../../../../state';
import { getTokenConfig } from '../../../../tokens/static-selectors';
import { IAction } from '../../../../types';
import { getSelectedBlockchain } from '../../../../wallets/selectors';
import { handleCta } from '../../data/handle-cta';
import { setScreenAmount, setScreenInputData } from '../actions';

const getSwitchNodeValidatorAmount = (
    params: any,
    context: IScreenContext,
    screenKey: string,
    dispatch: Dispatch<IAction<any>>,
    getState: () => IReduxState
) => {
    const state = getState();

    for (const param of params) {
        if (param?.flowId) {
            const amount =
                (state.ui.screens.inputData &&
                    state.ui.screens.inputData[param.flowId]?.data?.switchNodeValidator
                        ?.availableBalance) ||
                '0';

            const blockchain = getSelectedBlockchain(state);
            const blockchainConfig = getBlockchain(blockchain);

            const tokenConfig = getTokenConfig(blockchain, blockchainConfig.config.coin);

            setScreenAmount(
                blockchainConfig.account.amountFromStd(amount, tokenConfig.decimals).toFixed(),
                {
                    screenKey,
                    context
                }
            )(dispatch, getState);
        }
    }
};

const screenActionParamFn = {
    getSwitchNodeValidatorAmount
};

const setScreenAmountAction = (
    params: any,
    context: IScreenContext,
    screenKey: string,
    dispatch: Dispatch<IAction<any>>,
    getState: () => IReduxState
) => {
    for (const param of params || []) {
        if (param?.amount) {
            setScreenAmount(param.amount, {
                screenKey,
                context
            })(dispatch, getState);
        }

        if (param?.fn && typeof screenActionParamFn[param.fn] === 'function') {
            screenActionParamFn[param.fn](param.params, context, screenKey, dispatch, getState);
        }
    }
};

const setScreenAmountBox = (
    params: any,
    context: IScreenContext,
    screenKey: string,
    dispatch: Dispatch<IAction<any>>,
    getState: () => IReduxState
) => {
    setScreenInputData(screenKey, {
        amountBox: params[0]
    })(dispatch, getState);
};

const setScreenAmountPercentToMoonlet = (
    params: any,
    context: IScreenContext,
    screenKey: string,
    dispatch: Dispatch<IAction<any>>,
    getState: () => IReduxState
) => {
    handleCta(params[0], { screenKey })(dispatch, getState);
};

const setScreenAmountPercentSwap = (
    params: any,
    context: IScreenContext,
    screenKey: string,
    dispatch: Dispatch<IAction<any>>,
    getState: () => IReduxState
) => {
    handleCta(params[0], { screenKey })(dispatch, getState);
};

export const setReduxScreenInputData = (
    params: any,
    context: IScreenContext,
    screenKey: string,
    dispatch: Dispatch<IAction<any>>,
    getState: () => IReduxState
) => {
    setScreenInputData(screenKey, params)(dispatch, getState);
};

export const screenActions = {
    setScreenAmountAction,
    setScreenAmountBox,
    setScreenAmountPercentToMoonlet,
    setScreenAmountPercentSwap,
    setReduxScreenInputData
};

'''
'''--- src/redux/ui/screens/input-data/state.ts ---
export interface IScreenInputState {
    // 'walletPubKey-blockchain-chainId-address-step-tab'
    [screenKey: string]: IScreenInputData;
}

export interface IScreenInputData {
    validation: IScreenInputDataValidations;
    data: {
        [key: string]: any;
    };
}

export interface IScreenInputDataValidations {
    fieldsErrors: {
        [fieldName: string]: {
            type: 'ERROR_MSG' | 'WARN_MSG';
            message: string;
        }[];
    };
    valid: boolean;
}

export interface InputDataValidator {
    id: string;
    name: string;
    icon?: string;
    website?: string;
}

'''
'''--- src/redux/ui/screens/input-data/validation/amount-available-funds-to-keep.ts ---
import BigNumber from 'bignumber.js';
import { Dispatch } from 'react';
import { IScreenFieldValidation } from '../../../../../components/widgets/types';
import { getBlockchain } from '../../../../../core/blockchain/blockchain-factory';
import { getChainId } from '../../../../preferences/selectors';
import { IReduxState } from '../../../../state';
import { getTokenConfig } from '../../../../tokens/static-selectors';
import { IAction } from '../../../../types';
import { getSelectedAccount } from '../../../../wallets/selectors';
import { setScreenInputValidation } from '../actions';

/**
 * This data is stored on screen key
 */
export const amountAvailableFundsToKeep = (
    validation: IScreenFieldValidation,
    field: string,
    screenKey: string,
    getState: () => IReduxState,
    dispatch: Dispatch<IAction<any>>
) => {
    const state = getState();

    const account = getSelectedAccount(state);

    const inputData: any = state.ui.screens.inputData[screenKey]?.data;

    const blockchain = account.blockchain;
    const blockchainInstance = getBlockchain(blockchain);
    const chainId = getChainId(state, blockchain);

    const tokenSymbol =
        (validation.params && validation.params[0]) || blockchainInstance.config.coin;
    const token = account.tokens[chainId][tokenSymbol];

    const tokenConfig = getTokenConfig(blockchain, token.symbol);

    let availableBalance = new BigNumber(token.balance?.available || '0');
    const minimumAmountToKeep = blockchainInstance.config.amountToKeepInAccount[account.type];

    if (availableBalance.isGreaterThan(new BigNumber(0))) {
        availableBalance = availableBalance.minus(minimumAmountToKeep);
    }

    const inputAmount = inputData?.amount;
    const inputAmountToStd = blockchainInstance.account.amountToStd(
        new BigNumber(inputAmount),
        tokenConfig.decimals
    );

    if (
        availableBalance.isLessThan(inputAmountToStd) &&
        inputAmountToStd.isLessThan(availableBalance.plus(minimumAmountToKeep))
    ) {
        // Show error

        const fieldsErrors = [];

        for (const msgKey of Object.keys(validation?.messages || [])) {
            fieldsErrors.push(validation.messages[msgKey]);
        }

        setScreenInputValidation(screenKey, {
            fieldsErrors: {
                [field]: fieldsErrors
            },
            valid: false
        })(dispatch, getState);
    }
};

'''
'''--- src/redux/ui/screens/input-data/validation/amount-available-funds.ts ---
import BigNumber from 'bignumber.js';
import { Dispatch } from 'react';
import { IScreenFieldValidation } from '../../../../../components/widgets/types';
import { getBlockchain } from '../../../../../core/blockchain/blockchain-factory';
import { getChainId } from '../../../../preferences/selectors';
import { IReduxState } from '../../../../state';
import { getTokenConfig } from '../../../../tokens/static-selectors';
import { IAction } from '../../../../types';
import { getSelectedAccount } from '../../../../wallets/selectors';
import { setScreenInputValidation } from '../actions';

/**
 * This data is stored on screen key
 */
export const amountAvailableFunds = (
    validation: IScreenFieldValidation,
    field: string,
    screenKey: string,
    getState: () => IReduxState,
    dispatch: Dispatch<IAction<any>>
) => {
    const state = getState();

    const account = getSelectedAccount(state);

    const inputData: any = state.ui.screens.inputData[screenKey]?.data;

    const blockchain = account.blockchain;
    const blockchainInstance = getBlockchain(blockchain);
    const chainId = getChainId(state, blockchain);

    const tokenSymbol =
        (validation.params && validation.params[0]) || blockchainInstance.config.coin;
    const token = account.tokens[chainId][tokenSymbol];

    const tokenConfig = getTokenConfig(blockchain, token.symbol);

    let availableBalance = new BigNumber(token.balance?.available || '0');

    if (availableBalance.isGreaterThan(new BigNumber(0))) {
        availableBalance = availableBalance.minus(
            blockchainInstance.config.amountToKeepInAccount[account.type]
        );
    }

    const inputAmount = inputData?.amount;
    const inputAmountToStd = blockchainInstance.account.amountToStd(
        new BigNumber(inputAmount),
        tokenConfig.decimals
    );

    const regexMultipleDots = /(\..*){2,}/;

    if (inputAmountToStd.isGreaterThan(availableBalance) || regexMultipleDots.test(inputAmount)) {
        // Show error

        const fieldsErrors = [];

        for (const msgKey of Object.keys(validation?.messages || [])) {
            fieldsErrors.push(validation.messages[msgKey]);
        }

        setScreenInputValidation(screenKey, {
            fieldsErrors: {
                [field]: fieldsErrors
            },
            valid: false
        })(dispatch, getState);
    } else {
        // Valid input

        setScreenInputValidation(screenKey, {
            fieldsErrors: undefined,
            valid: true
        })(dispatch, getState);
    }
};

export const amountAvailableFundsToken = (
    validation: IScreenFieldValidation,
    field: string,
    screenKey: string,
    getState: () => IReduxState,
    dispatch: Dispatch<IAction<any>>
) => {
    const state = getState();

    const account = getSelectedAccount(state);

    const inputData = state.ui.screens.inputData[screenKey]?.data;

    const blockchain = account.blockchain;
    const blockchainInstance = getBlockchain(blockchain);

    let tokenSymbol: string;
    let balance: string;

    if (inputData) {
        if (field === 'swapToken1Amount') {
            tokenSymbol = inputData.swapToken1.symbol;
            balance = inputData.maxBalance.token1;
        }

        if (field === 'swapToken2Amount') {
            // ignore this validations
            return;
        }
    }

    // const tokenSymbol = validation.params[0].tokenSymbol;
    // const balance = new BigNumber(validation.params[0].balance);
    // const swapType = validation.params[0]?.swapType;

    const inputAmount = inputData && inputData[field];

    const tokenConfig = tokenSymbol && getTokenConfig(blockchain, tokenSymbol);

    const screenValidations = state.ui.screens.inputData[screenKey]?.validation;
    const fieldsErrors = screenValidations?.fieldsErrors;
    let errors = (fieldsErrors && fieldsErrors[field]) || [];

    // if (
    //     swapType &&
    //     state.ui.screens.inputData[screenKey]?.data?.swapType &&
    //     swapType !== state.ui.screens.inputData[screenKey]?.data?.swapType
    // ) {
    //     // ignore this validations
    //     return;
    // }

    if (tokenConfig) {
        const inputAmountToStd = blockchainInstance.account.amountToStd(
            new BigNumber(inputAmount),
            tokenConfig.decimals
        );

        const balanceStd = blockchainInstance.account.amountToStd(
            new BigNumber(balance),
            tokenConfig.decimals
        );

        if (inputAmountToStd.isGreaterThan(balanceStd) || inputAmountToStd.isLessThanOrEqualTo(0)) {
            // Show error
            for (const msgKey of Object.keys(validation?.messages || [])) {
                const msg = validation.messages[msgKey] as any;
                // Make sure don't duplicate error messages
                let alreadyAdded = false;
                for (const error of errors || []) {
                    if (JSON.stringify(error) === JSON.stringify(msg)) {
                        alreadyAdded = true;
                    }
                }
                if (!alreadyAdded) errors.push(msg);
            }
        } else {
            // cleanup error messages
            errors = undefined;
        }

        if (errors === undefined || errors?.length === 0) {
            // All fields are valid => Validate Screen
            setScreenInputValidation(screenKey, {
                fieldsErrors: undefined,
                valid: true
            })(dispatch, getState);
        } else {
            // Set fields errors
            setScreenInputValidation(screenKey, {
                fieldsErrors: {
                    ...fieldsErrors,
                    [field]: errors
                },
                valid: false
            })(dispatch, getState);
        }
    }
};

'''
'''--- src/redux/ui/screens/input-data/validation/amount-not-empty.ts ---
import { Dispatch } from 'react';
import { IScreenFieldValidation } from '../../../../../components/widgets/types';
import { IReduxState } from '../../../../state';
import { IAction } from '../../../../types';
import { setScreenInputValidation } from '../actions';

export const inputAmountNotEmpty = (
    validation: IScreenFieldValidation,
    field: string,
    screenKey: string,
    getState: () => IReduxState,
    dispatch: Dispatch<IAction<any>>
) => {
    const state = getState();

    const inputData: any = state.ui.screens.inputData[screenKey]?.data;

    const data = inputData?.amount || inputData?.input || (inputData && inputData[field]);

    if (
        !data ||
        isNaN(data) ||
        data === '' ||
        data === ' ' ||
        data === undefined ||
        data === null
    ) {
        // Show error

        const fieldsErrors = [];

        for (const msgKey of Object.keys(validation?.messages || [])) {
            fieldsErrors.push(validation.messages[msgKey]);
        }

        setScreenInputValidation(screenKey, {
            fieldsErrors: {
                [field]: fieldsErrors
            },
            valid: false
        })(dispatch, getState);
    }
};

'''
'''--- src/redux/ui/screens/input-data/validation/index.ts ---
import { amountAvailableFunds, amountAvailableFundsToken } from './amount-available-funds';
import { amountAvailableFundsToKeep } from './amount-available-funds-to-keep';
import { minAmountToStake, minAmountToStakePerValidator } from './min-amount-to-stake';
import { switchNodeMinAmountDelegate } from './switch-node-min-amount-delegate';
import { switchNodeValidateAmount } from './switch-node-validate-amount';
import { switchNodeAvailableFunds } from './switch-node-available-funds';
import { inputAmountNotEmpty } from './amount-not-empty';
import { tokenActiveWallet } from './token-active';

export const screenInputValidationActions = {
    amountAvailableFunds,
    amountAvailableFundsToken,
    amountAvailableFundsToKeep,
    minAmountToStake,
    minAmountToStakePerValidator,
    switchNodeMinAmountDelegate,
    switchNodeValidateAmount,
    switchNodeAvailableFunds,
    inputAmountNotEmpty,
    tokenActiveWallet
};

'''
'''--- src/redux/ui/screens/input-data/validation/min-amount-to-stake.ts ---
import BigNumber from 'bignumber.js';
import { Dispatch } from 'react';
import { IScreenFieldValidation } from '../../../../../components/widgets/types';
import { getBlockchain } from '../../../../../core/blockchain/blockchain-factory';
import { getChainId } from '../../../../preferences/selectors';
import { IReduxState } from '../../../../state';
import { getTokenConfig } from '../../../../tokens/static-selectors';
import { IAction } from '../../../../types';
import { getSelectedAccount } from '../../../../wallets/selectors';
import { setScreenInputValidation } from '../actions';

/**
 * This data is stored on screen key
 */
export const minAmountToStake = (
    validation: IScreenFieldValidation,
    field: string,
    screenKey: string,
    getState: () => IReduxState,
    dispatch: Dispatch<IAction<any>>
) => {
    const state = getState();

    const account = getSelectedAccount(state);

    const inputData: any = state.ui.screens.inputData[screenKey]?.data;

    const blockchain = account.blockchain;
    const blockchainInstance = getBlockchain(blockchain);
    const chainId = getChainId(state, blockchain);
    const token = account.tokens[chainId][blockchainInstance.config.coin];

    const tokenConfig = getTokenConfig(blockchain, token.symbol);

    const inputAmount = inputData?.amount;
    const inputAmountToStd = blockchainInstance.account.amountToStd(
        new BigNumber(inputAmount),
        tokenConfig.decimals
    );

    const minAmountDelegate = validation.params && validation.params[0]?.minAmountDelegate;

    if (inputAmountToStd.isLessThan(minAmountDelegate)) {
        // Show error

        const fieldsErrors = [];

        for (const msgKey of Object.keys(validation?.messages || [])) {
            fieldsErrors.push(validation.messages[msgKey]);
        }

        setScreenInputValidation(screenKey, {
            fieldsErrors: {
                [field]: fieldsErrors
            },
            valid: false
        })(dispatch, getState);
    }
};

export const minAmountToStakePerValidator = (
    validation: IScreenFieldValidation,
    field: string,
    screenKey: string,
    getState: () => IReduxState,
    dispatch: Dispatch<IAction<any>>
) => {
    const state = getState();

    const account = getSelectedAccount(state);

    const inputData: any = state.ui.screens.inputData[screenKey]?.data;

    const blockchain = account.blockchain;
    const blockchainInstance = getBlockchain(blockchain);
    const chainId = getChainId(state, blockchain);
    const token = account.tokens[chainId][blockchainInstance.config.coin];

    const tokenConfig = getTokenConfig(blockchain, token.symbol);

    const minAmountDelegate = validation.params && validation.params[0]?.minAmountDelegate;

    let allFieldsAreValid = true;

    for (const inputDataKey of Object.keys(inputData || {})) {
        if (
            inputData[inputDataKey] &&
            inputData[inputDataKey]?.amount &&
            inputData[inputDataKey]?.validator
        ) {
            const amount = inputData[inputDataKey].amount;
            const amountToStd = blockchainInstance.account.amountToStd(
                new BigNumber(amount),
                tokenConfig.decimals
            );

            if (amountToStd.isLessThan(minAmountDelegate) && amountToStd.isGreaterThan(0)) {
                // Show error

                const fieldsErrors = [];

                for (const msgKey of Object.keys(validation?.messages || [])) {
                    fieldsErrors.push(validation.messages[msgKey]);
                }

                setScreenInputValidation(screenKey, {
                    fieldsErrors: {
                        [field]: fieldsErrors
                    },
                    valid: false
                })(dispatch, getState);

                allFieldsAreValid = false;
            }
        }
    }

    if (allFieldsAreValid) {
        // Valid input

        setScreenInputValidation(screenKey, {
            fieldsErrors: undefined,
            valid: true
        })(dispatch, getState);
    }
};

'''
'''--- src/redux/ui/screens/input-data/validation/switch-node-available-funds.ts ---
import BigNumber from 'bignumber.js';
import { Dispatch } from 'react';
import { IScreenFieldValidation } from '../../../../../components/widgets/types';
import { getBlockchain } from '../../../../../core/blockchain/blockchain-factory';
import { getChainId } from '../../../../preferences/selectors';
import { IReduxState } from '../../../../state';
import { getTokenConfig } from '../../../../tokens/static-selectors';
import { IAction } from '../../../../types';
import { getSelectedAccount } from '../../../../wallets/selectors';
import { setScreenInputValidation } from '../actions';

export const switchNodeAvailableFunds = (
    validation: IScreenFieldValidation,
    field: string,
    screenKey: string,
    getState: () => IReduxState,
    dispatch: Dispatch<IAction<any>>
) => {
    const state = getState();

    const account = getSelectedAccount(state);

    const inputData: any = state.ui.screens.inputData[screenKey]?.data;

    const blockchain = account.blockchain;
    const blockchainInstance = getBlockchain(blockchain);
    const chainId = getChainId(state, blockchain);
    const token = account.tokens[chainId][blockchainInstance.config.coin];

    const tokenConfig = getTokenConfig(blockchain, token.symbol);

    const flowId = validation.params[0].flowId;

    const nodeAvailableAmount = new BigNumber(
        (state.ui.screens.inputData &&
            state.ui.screens.inputData[flowId]?.data?.switchNodeValidator?.availableBalance) ||
            '0'
    );

    const inputAmount = blockchainInstance.account.amountToStd(
        new BigNumber(inputData?.amount),
        tokenConfig.decimals
    );

    if (inputAmount.isGreaterThan(nodeAvailableAmount)) {
        // Show error

        const fieldsErrors = [];

        for (const msgKey of Object.keys(validation?.messages || [])) {
            fieldsErrors.push(validation.messages[msgKey]);
        }

        setScreenInputValidation(screenKey, {
            fieldsErrors: {
                [field]: fieldsErrors
            },
            valid: false
        })(dispatch, getState);
    } else {
        // Valid input

        setScreenInputValidation(screenKey, {
            fieldsErrors: undefined,
            valid: true
        })(dispatch, getState);
    }
};

'''
'''--- src/redux/ui/screens/input-data/validation/switch-node-min-amount-delegate.ts ---
import BigNumber from 'bignumber.js';
import { Dispatch } from 'react';
import { IScreenFieldValidation } from '../../../../../components/widgets/types';
import { getBlockchain } from '../../../../../core/blockchain/blockchain-factory';
import { getChainId } from '../../../../preferences/selectors';
import { IReduxState } from '../../../../state';
import { getTokenConfig } from '../../../../tokens/static-selectors';
import { IAction } from '../../../../types';
import { getSelectedAccount } from '../../../../wallets/selectors';
import { setScreenInputValidation } from '../actions';

/**
 * This data is stored on screen key
 */
export const switchNodeMinAmountDelegate = (
    validation: IScreenFieldValidation,
    field: string,
    screenKey: string,
    getState: () => IReduxState,
    dispatch: Dispatch<IAction<any>>
) => {
    const state = getState();

    const account = getSelectedAccount(state);

    const inputData: any = state.ui.screens.inputData[screenKey]?.data;

    const blockchain = account.blockchain;
    const blockchainInstance = getBlockchain(blockchain);
    const chainId = getChainId(state, blockchain);
    const token = account.tokens[chainId][blockchainInstance.config.coin];

    const tokenConfig = getTokenConfig(blockchain, token.symbol);

    const inputAmount = inputData?.amount;
    const inputAmountToStd = blockchainInstance.account.amountToStd(
        new BigNumber(inputAmount),
        tokenConfig.decimals
    );

    const minAmountDelegate = new BigNumber(
        (validation?.params && validation?.params[0]?.minAmountDelegate) || '10000000000000'
    );

    if (inputAmountToStd.isLessThan(minAmountDelegate)) {
        // Show error

        const fieldsErrors = [];

        for (const msgKey of Object.keys(validation?.messages || [])) {
            fieldsErrors.push(validation.messages[msgKey]);
        }

        setScreenInputValidation(screenKey, {
            fieldsErrors: {
                [field]: fieldsErrors
            },
            valid: false
        })(dispatch, getState);
    }
};

'''
'''--- src/redux/ui/screens/input-data/validation/switch-node-validate-amount.ts ---
import BigNumber from 'bignumber.js';
import { cloneDeep } from 'lodash';
import { Dispatch } from 'react';
import { IScreenFieldValidation } from '../../../../../components/widgets/types';
import { getBlockchain } from '../../../../../core/blockchain/blockchain-factory';
import { formatNumber } from '../../../../../core/utils/format-number';
import { getChainId } from '../../../../preferences/selectors';
import { IReduxState } from '../../../../state';
import { getTokenConfig } from '../../../../tokens/static-selectors';
import { IAction } from '../../../../types';
import { getSelectedAccount } from '../../../../wallets/selectors';
import { setScreenInputValidation } from '../actions';

/**
 * This data is stored on screen key
 */
export const switchNodeValidateAmount = (
    validation: IScreenFieldValidation,
    field: string,
    screenKey: string,
    getState: () => IReduxState,
    dispatch: Dispatch<IAction<any>>
) => {
    const state = getState();

    const account = getSelectedAccount(state);

    const inputData: any = state.ui.screens.inputData[screenKey]?.data;

    const blockchain = account.blockchain;
    const blockchainInstance = getBlockchain(blockchain);
    const chainId = getChainId(state, blockchain);
    const token = account.tokens[chainId][blockchainInstance.config.coin];

    const tokenConfig = getTokenConfig(blockchain, token.symbol);

    const inputAmount = blockchainInstance.account.amountToStd(
        new BigNumber(inputData?.amount),
        tokenConfig.decimals
    );

    const flowId = validation.params[0].flowId;
    const minAmountDelegate = new BigNumber(validation.params[0].minAmountDelegate);

    const nodeAvailableAmount = new BigNumber(
        (state.ui.screens.inputData &&
            state.ui.screens.inputData[flowId]?.data?.switchNodeValidator?.availableBalance) ||
            '0'
    );

    if (
        nodeAvailableAmount.minus(minAmountDelegate).isLessThan(inputAmount) &&
        inputAmount.isLessThan(nodeAvailableAmount)
    ) {
        // Show error

        const fieldsErrors = [];

        for (const msgKey of Object.keys(validation?.messages || [])) {
            const msg = cloneDeep(validation.messages[msgKey]);
            msg.message =
                msg.message +
                ` ${formatNumber(
                    blockchainInstance.account.amountFromStd(
                        nodeAvailableAmount.minus(minAmountDelegate),
                        tokenConfig.decimals
                    ),
                    { currency: blockchainInstance.config.coin }
                )}`;
            fieldsErrors.push(msg);
        }

        setScreenInputValidation(screenKey, {
            fieldsErrors: {
                [field]: fieldsErrors
            },
            valid: false
        })(dispatch, getState);
    }
};

'''
'''--- src/redux/ui/screens/input-data/validation/token-active.ts ---
import { Dispatch } from 'react';
import { Dialog } from '../../../../../components/dialog/dialog';
import { IScreenFieldValidation } from '../../../../../components/widgets/types';
import { translate } from '../../../../../core/i18n';
import { NavigationService } from '../../../../../navigation/navigation-service';
import { getChainId } from '../../../../preferences/selectors';
import { IReduxState } from '../../../../state';
import { IAction } from '../../../../types';
import { getSelectedAccount } from '../../../../wallets/selectors';
import { setScreenInputValidation } from '../actions';

export const tokenActiveWallet = (
    validation: IScreenFieldValidation,
    field: string,
    screenKey: string,
    getState: () => IReduxState,
    dispatch: Dispatch<IAction<any>>
) => {
    const state = getState();

    const account = getSelectedAccount(state);
    const chainId = getChainId(state, account.blockchain);

    let symbol = validation?.params && validation.params[0]?.symbol;

    if (!symbol) {
        const screenInputData =
            screenKey && state.ui.screens.inputData && state.ui.screens.inputData[screenKey];

        symbol = screenInputData?.data && screenInputData?.data[field]?.symbol;
    }

    const tokens = account.tokens[chainId];

    let showError = false;

    if (symbol && tokens) {
        if (!tokens[symbol]) {
            showError = true;
        }

        if (tokens[symbol]) {
            const tokenConfig = tokens[symbol];
            if (!tokenConfig.active) {
                showError = true;
            }
        }
    }

    if (showError) {
        Dialog.alert(
            'Inactive token',
            `Please activate ${symbol} token`,
            {
                text: translate('App.labels.cancel'),
                onPress: () => {
                    //
                }
            },
            {
                text: 'Activate',
                onPress: () => NavigationService.navigate('AddToken', {})
            }
        );

        // Show error

        const fieldsErrors = [];

        for (const msgKey of Object.keys(validation?.messages || [])) {
            fieldsErrors.push(validation.messages[msgKey]);
        }

        setScreenInputValidation(screenKey, {
            fieldsErrors: {
                [field]: fieldsErrors
            },
            valid: false
        })(dispatch, getState);
    }
};

'''
'''--- src/redux/ui/screens/posActions/actions.ts ---
import { Blockchain, IFeeOptions } from '../../../../core/blockchain/types';
import { ITokenState } from '../../../wallets/state';
import { IValidator } from '../../../../core/blockchain/types/stats';
import { Dispatch } from 'react';
import { NavigationService } from '../../../../navigation/navigation-service';

// actions consts
export const QUICK_DELEGATE_ENTER_AMOUNT = 'QUICK_DELEGATE_ENTER_AMOUNT';
export const DELEGATE_ENTER_AMOUNT = 'DELEGATE_ENTER_AMOUNT';
export const REDELEGATE_ENTER_AMOUNT = 'REDELEGATE_ENTER_AMOUNT';

export const DELEGATE_CONFIRMATION = 'DELEGATE_CONFIRMATION';
export const REDELEGATE_CONFIRMATION = 'REDELEGATE_CONFIRMATION';

export const navigateToEnterAmountStep = (
    accountIndex: number,
    blockchain: Blockchain,
    token: ITokenState,
    validators: IValidator[],
    actionText: string,
    screen: string,
    actionType: string,
    fromValidator?: IValidator,
    screenKey?: string
) => (dispatch: Dispatch<any>) => {
    dispatch({
        type: actionType,
        data: {
            accountIndex,
            blockchain,
            token,
            validators,
            actionText,
            fromValidator
        }
    });

    NavigationService.navigate(screen, {}, screenKey);
};

export const navigateToConfirmationStep = (
    accountIndex: number,
    blockchain: Blockchain,
    token: ITokenState,
    validators: IValidator[],
    actionText: string,
    screen: string,
    actionType: string,
    amount: string,
    feeOptions: IFeeOptions,
    fromValidator?: IValidator
) => (dispatch: Dispatch<any>) => {
    dispatch({
        type: actionType,
        data: {
            accountIndex,
            blockchain,
            token,
            validators,
            actionText,
            amount,
            feeOptions,
            fromValidator
        }
    });
    NavigationService.navigate(screen, {});
};

'''
'''--- src/redux/ui/screens/posActions/reducer.ts ---
import { IPosActionsState } from './state';
import { IAction } from '../../../types';
import {
    QUICK_DELEGATE_ENTER_AMOUNT,
    DELEGATE_ENTER_AMOUNT,
    DELEGATE_CONFIRMATION,
    REDELEGATE_ENTER_AMOUNT,
    REDELEGATE_CONFIRMATION
} from './actions';

const intialState: IPosActionsState = {
    quickDelegateEnterAmount: undefined,
    delegateEnterAmount: undefined,
    redelegateEnterAmount: undefined,
    quickDelegateConfirm: undefined,
    delegateConfirm: undefined,
    redelegateConfirm: undefined
};

export default (state: IPosActionsState = intialState, action: IAction): IPosActionsState => {
    switch (action.type) {
        case QUICK_DELEGATE_ENTER_AMOUNT:
            return {
                ...state,
                quickDelegateEnterAmount: action.data
            };
        case DELEGATE_ENTER_AMOUNT:
            return {
                ...state,
                delegateEnterAmount: action.data
            };
        case REDELEGATE_ENTER_AMOUNT:
            return {
                ...state,
                redelegateEnterAmount: action.data
            };
        case DELEGATE_CONFIRMATION:
            return {
                ...state,
                delegateConfirm: action.data
            };
        case REDELEGATE_CONFIRMATION:
            return {
                ...state,
                delegateConfirm: action.data
            };

        default:
            break;
    }
    return state;
};

'''
'''--- src/redux/ui/screens/posActions/state.ts ---
import { Blockchain, IFeeOptions } from '../../../../core/blockchain/types';
import { ITokenState } from '../../../wallets/state';
import { IValidator } from '../../../../core/blockchain/types/stats';

export interface IPosActionsState {
    quickDelegateEnterAmount: {
        accountIndex: number;
        blockchain: Blockchain;
        token: ITokenState;
        validators: IValidator[];
        actionText: string;
    };
    delegateEnterAmount: {
        accountIndex: number;
        blockchain: Blockchain;
        token: ITokenState;
        validators: IValidator[];
        actionText: string;
    };
    redelegateEnterAmount: {
        accountIndex: number;
        blockchain: Blockchain;
        token: ITokenState;
        validators: IValidator[];
        fromValidator: IValidator;
        actionText: string;
    };

    //
    quickDelegateConfirm: {
        accountIndex: number;
        blockchain: Blockchain;
        token: ITokenState;
        validators: IValidator[];
        actionText: string;
        amount: string;
    };
    delegateConfirm: {
        accountIndex: number;
        blockchain: Blockchain;
        token: ITokenState;
        validators: IValidator[];
        actionText: string;
        amount: string;
        feeOptions: IFeeOptions;
    };
    redelegateConfirm: {
        accountIndex: number;
        blockchain: Blockchain;
        token: ITokenState;
        validators: IValidator[];
        fromValidator: IValidator;
        actionText: string;
        amount: string;
    };
}

'''
'''--- src/redux/ui/screens/reducer.ts ---
import posActionsReducer from './posActions/reducer';
import dataReducer from './data/reducer';
import inputDataReducer from './input-data/reducer';
import { combineReducers } from 'redux';

export const screensReducer = combineReducers({
    posActions: posActionsReducer,
    data: dataReducer,
    inputData: inputDataReducer
});

'''
'''--- src/redux/ui/screens/state.ts ---
import { IScreenDataState } from './data/state';
import { IScreenInputState } from './input-data/state';
import { IPosActionsState } from './posActions/state';

export interface IScreensState {
    posActions: IPosActionsState;
    data: IScreenDataState;
    inputData: IScreenInputState;
}

'''
'''--- src/redux/ui/state.ts ---
import { IScreensState } from './screens/state';
import { IBottomSheetState } from './bottomSheet/state';
import { IExtensionState } from './extension/state';
import { IPasswordModalState } from './password-modal/state';
import { ITransactionRequestState } from './transaction-request/state';
import { IValidatorsState } from './validators/state';
import { IProcessTransactionsState } from './process-transactions/state';
import { IStatsState } from './stats/state';
import { IDelegatedValidatorsState } from './delegated-validators/state';

export interface IUiState {
    screens: IScreensState;
    bottomSheet: IBottomSheetState;
    extension: IExtensionState;
    passwordModal: IPasswordModalState;
    transactionRequest: ITransactionRequestState;
    processTransactions: IProcessTransactionsState;
    validators: IValidatorsState;
    delegatedValidators: IDelegatedValidatorsState;
    stats: IStatsState;
}

'''
'''--- src/redux/ui/stats/actions.ts ---
import { Dispatch } from 'react';
import { getBlockchain } from '../../../core/blockchain/blockchain-factory';
import { getChainId } from '../../preferences/selectors';
import { IReduxState } from '../../state';
import { IAccountState, ITokenState } from '../../wallets/state';
import { captureException as SentryCaptureException } from '@sentry/react-native';
import { getAccountStatsTimestamp } from './selectors';

export const ADD_ACCOUNT_STATS = 'ADD_ACCOUNT_STATS';

export const fetchAccountDelegateStats = (account: IAccountState, token: ITokenState) => async (
    dispatch: Dispatch<any>,
    getState: () => IReduxState
) => {
    const state = getState();
    const blockchain = account.blockchain;
    const chainId = getChainId(state, blockchain).toString();
    const blockchainInstante = getBlockchain(blockchain);

    try {
        const timestamp = getAccountStatsTimestamp(state, blockchain, chainId, account.address);

        if (
            !timestamp ||
            timestamp < Date.now() - blockchainInstante.config.ui.fetchAccountStatsSec * 1000
        ) {
            const accountStats = await blockchainInstante
                .getStats(chainId)
                .getAccountDelegateStats(account, token);

            if (accountStats) {
                dispatch({
                    type: ADD_ACCOUNT_STATS,
                    data: {
                        blockchain,
                        chainId,
                        address: account.address,
                        accountStats
                    }
                });
            }
        }
    } catch (err) {
        SentryCaptureException(new Error(JSON.stringify(err)));
    }
};

'''
'''--- src/redux/ui/stats/reducer.ts ---
import { IStatsState } from './state';
import { IAction } from '../../types';
import { ADD_ACCOUNT_STATS } from './actions';

const initialState: IStatsState = {};

export default (state: IStatsState = initialState, action: IAction): IStatsState => {
    switch (action.type) {
        case ADD_ACCOUNT_STATS: {
            return {
                ...state,
                [action.data.blockchain]: {
                    ...state[action.data.blockchain],
                    [action.data.chainId]: {
                        ...(state[action.data.blockchain] &&
                            state[action.data.blockchain][action.data.chainId]),
                        [action.data.address]: {
                            accountStats: action.data.accountStats,
                            timestamp: new Date().getTime()
                        }
                    }
                }
            };
        }

        default:
            break;
    }
    return state;
};

'''
'''--- src/redux/ui/stats/selectors.ts ---
import { IReduxState } from '../../state';
import { Blockchain, ChainIdType } from '../../../core/blockchain/types';
import { AccountStats } from '../../../core/blockchain/types/stats';

export const getAccountStats = (
    state: IReduxState,
    blockchain: Blockchain,
    chainId: ChainIdType,
    address: string
): AccountStats => {
    return (
        (state.ui.stats &&
            state.ui.stats[blockchain] &&
            state.ui.stats[blockchain][chainId] &&
            state.ui.stats[blockchain][chainId][address]?.accountStats) ||
        undefined
    );
};

export const getAccountStatsTimestamp = (
    state: IReduxState,
    blockchain: Blockchain,
    chainId: ChainIdType,
    address: string
): number => {
    return (
        (state.ui.stats &&
            state.ui.stats[blockchain] &&
            state.ui.stats[blockchain][chainId] &&
            state.ui.stats[blockchain][chainId][address]?.timestamp) ||
        undefined
    );
};

'''
'''--- src/redux/ui/stats/state.ts ---
import { AccountStats } from '../../../core/blockchain/types/stats';

export interface IStatsState {
    [blockchain: string]: {
        [chainId: string]: {
            [address: string]: {
                accountStats: AccountStats;
                timestamp: number;
            };
        };
    };
}

'''
'''--- src/redux/ui/transaction-request/actions.ts ---
export const CLOSE_TX_REQUEST = 'CLOSE_TX_REQUEST';
export const OPEN_TX_REQUEST = 'OPEN_TX_REQUEST';

export const openTransactionRequest = (options: { requestId?: string; qrCode?: string }) => {
    return {
        type: OPEN_TX_REQUEST,
        data: {
            requestId: options?.requestId,
            qrCode: options?.qrCode
        }
    };
};

export const closeTransactionRequest = () => {
    return {
        type: CLOSE_TX_REQUEST
    };
};

'''
'''--- src/redux/ui/transaction-request/reducer.ts ---
import { ITransactionRequestState } from './state';
import { IAction } from '../../types';
import { OPEN_TX_REQUEST, CLOSE_TX_REQUEST } from './actions';

const intialState: ITransactionRequestState = {
    isVisible: false,
    data: {
        requestId: undefined,
        qrCode: undefined
    }
};

export default (
    state: ITransactionRequestState = intialState,
    action: IAction
): ITransactionRequestState => {
    switch (action.type) {
        case OPEN_TX_REQUEST:
            return {
                ...state,
                isVisible: true,
                data: {
                    requestId: action.data?.requestId,
                    qrCode: action.data?.qrCode
                }
            };

        case CLOSE_TX_REQUEST:
            return intialState;

        default:
            break;
    }
    return state;
};

'''
'''--- src/redux/ui/transaction-request/state.ts ---
export interface ITransactionRequestState {
    isVisible: boolean;
    data: {
        requestId?: string;
        qrCode?: string;
    };
}

'''
'''--- src/redux/ui/validators/actions.ts ---
import { Dispatch } from 'react';
import { IReduxState } from '../../state';
import { getChainId } from '../../preferences/selectors';
import { PosBasicActionType } from '../../../core/blockchain/types/token';
import { IAccountState } from '../../wallets/state';
import { ApiClient } from '../../../core/utils/api-client/api-client';
import { Blockchain } from '../../../core/blockchain/types';

export const ADD_VALIDATORS = 'ADD_VALIDATORS';
export const SET_IS_LOADING = 'SET_IS_LOADING';

export const fetchValidators = (
    account: IAccountState,
    posAction: PosBasicActionType,
    validatorAddress?: string
) => async (dispatch: Dispatch<any>, getState: () => IReduxState) => {
    const state = getState();
    const blockchain = account.blockchain;
    const chainId = getChainId(state, blockchain).toString();

    dispatch({
        type: SET_IS_LOADING,
        data: { chainId, blockchain }
    });

    // TODO fix the non base 58 problem on solana
    const address =
        account.blockchain === Blockchain.SOLANA ? account.address : account.address.toLowerCase();

    dispatch({
        type: ADD_VALIDATORS,
        data: { validators: undefined, chainId, blockchain }
    });

    const data = await new ApiClient().validators.fetchValidators(
        blockchain,
        chainId,
        address,
        posAction,
        validatorAddress
    );

    if (data) {
        dispatch({
            type: ADD_VALIDATORS,
            data: { validators: data, chainId, blockchain }
        });
    }
};

'''
'''--- src/redux/ui/validators/reducer.ts ---
import { IAction } from '../../types';
import { IValidatorsState } from './state';
import { ADD_VALIDATORS, SET_IS_LOADING } from './actions';

const initialState: IValidatorsState = {};

export default (state: IValidatorsState = initialState, action: IAction): IValidatorsState => {
    switch (action.type) {
        case ADD_VALIDATORS: {
            return {
                ...state,
                [action.data.blockchain]: {
                    ...state[action.data.blockchain],
                    [action.data.chainId]: {
                        validators: action.data.validators,
                        timestamp: new Date().getTime(),
                        loading: !action.data.validators ? true : false
                    }
                }
            };
        }

        case SET_IS_LOADING:
            return {
                ...state,
                [action.data.blockchain]: {
                    ...state[action.data.blockchain],
                    [action.data.chainId]: {
                        ...([action.data.blockchain] &&
                            [action.data.blockchain][action.data.chainId]),
                        loading: true
                    }
                }
            };

        default:
            break;
    }
    return state;
};

'''
'''--- src/redux/ui/validators/selectors.ts ---
import { IValidator } from '../../../core/blockchain/types/stats';
import { IReduxState } from '../../state';
import { Blockchain, ChainIdType } from '../../../core/blockchain/types';

export const getValidators = (
    state: IReduxState,
    blockchain: Blockchain,
    chainId: ChainIdType
): IValidator[] => {
    return (
        state.ui.validators &&
        state.ui.validators[blockchain] &&
        state.ui.validators[blockchain][chainId as string]?.validators
    );
};

export const getValidatorsTimestamp = (
    state: IReduxState,
    blockchain: Blockchain,
    chainId: ChainIdType
): number => {
    return (
        state.ui.validators &&
        state.ui.validators[blockchain] &&
        state.ui.validators[blockchain][chainId as string]?.timestamp
    );
};

export const getValidatorsLoading = (
    state: IReduxState,
    blockchain: Blockchain,
    chainId: ChainIdType
): boolean => {
    return (
        state.ui.validators &&
        state.ui.validators[blockchain] &&
        state.ui.validators[blockchain][chainId as string]?.loading
    );
};

'''
'''--- src/redux/ui/validators/state.ts ---
import { IValidator } from '../../../core/blockchain/types/stats';

export interface IValidatorsState {
    [blockchain: string]: {
        [chainId: string]: {
            validators: IValidator[];
            timestamp: number;
            loading: boolean;
        };
    };
}

'''
'''--- src/redux/utils/__tests__/persistConfig.test.ts ---
import { persistConfig } from '../persistConfig';

test('should set the config', () => {
    expect(persistConfig).toMatchSnapshot();
});

'''
'''--- src/redux/utils/helpers.ts ---
export const takeOneAndSubscribeToStore = (reduxStore, callback) => {
    const state = reduxStore?.getState();

    const unsubscribe = reduxStore.subscribe(() => callback(reduxStore.getState(), unsubscribe));

    if (state) {
        callback(state, unsubscribe);
    }

    return unsubscribe;
};

export const flattenObject = (obj, levels = Infinity) => {
    if (typeof obj === 'object' && levels > 0) {
        const flatObj = {};

        for (const key in obj) {
            if (typeof obj[key] === 'object' && Object.keys(obj[key]).length > 0) {
                const flatChild = flattenObject(obj[key], levels - 1);

                if (typeof flatChild === 'object' && Object.keys(flatChild).length > 0) {
                    for (const childKey in flatChild) {
                        if (flatChild.hasOwnProperty(childKey))
                            flatObj[`${key}.${childKey}`] = flatChild[childKey];
                    }
                } else {
                    flatObj[key] = flatChild;
                }
            } else {
                flatObj[key] = obj[key];
            }
        }
        return flatObj;
    } else {
        return obj;
    }
};

'''
'''--- src/redux/utils/migrations/002.ts ---
/**
 * Update removable key in tokens state
 */

import { Blockchain } from '../../../core/blockchain/types';
import { getTokenConfig } from '../../tokens/static-selectors';

export default (state: any) => {
    Object.keys(state.tokens).map(blockchain => {
        Object.keys(state.tokens[blockchain]).map(chainId => {
            Object.keys(state.tokens[blockchain][chainId]).map(symbolKey => {
                const token = getTokenConfig(Blockchain[blockchain], symbolKey);
                state.tokens[blockchain][chainId][symbolKey].removable = token
                    ? token.removable
                    : true;
            });
        });
    });
    return {
        ...state
    };
};

'''
'''--- src/redux/utils/migrations/003.ts ---
/**
 * Add XSGD and DAI Tokens for all users by default
 */

import { addToken } from './utils';
import { Blockchain } from '../../../core/blockchain/types';
import { XSGD_MAINNET } from '../../../core/blockchain/zilliqa/tokens/xsgd';
import { DAI_MAINNET } from '../../../core/blockchain/ethereum/tokens/dai';

export default (state: any) => {
    state = addToken(state, XSGD_MAINNET, {
        blockchain: Blockchain.ZILLIQA,
        chainId: '1',
        tokenActive: true
    });

    state = addToken(state, DAI_MAINNET, {
        blockchain: Blockchain.ETHEREUM,
        chainId: '1',
        tokenActive: true
    });

    return {
        ...state
    };
};

'''
'''--- src/redux/utils/migrations/004.ts ---
/**
 * Update XSGD smartcontract address change
 */

import { Blockchain } from '../../../core/blockchain/types';
import { XSGD_MAINNET } from '../../../core/blockchain/zilliqa/tokens/xsgd';

export default (state: any) => {
    const zilChainIdMain = '1';

    if (
        state.tokens[Blockchain.ZILLIQA] &&
        state.tokens[Blockchain.ZILLIQA][zilChainIdMain] &&
        state.tokens[Blockchain.ZILLIQA][zilChainIdMain][XSGD_MAINNET.symbol]
    ) {
        // Update XSGD contract address
        state.tokens[Blockchain.ZILLIQA][zilChainIdMain][XSGD_MAINNET.symbol].contractAddress =
            XSGD_MAINNET.contractAddress;
    }

    return {
        ...state
    };
};

'''
'''--- src/redux/utils/migrations/005.ts ---
/**
 * Add Account Default Type
 */

import { IWalletState, IAccountState, AccountType } from '../../wallets/state';

export default (state: any) => {
    Object.values(state.wallets).map((wallet: IWalletState) => {
        wallet.accounts.map((account: IAccountState) => {
            account.type = AccountType.DEFAULT;
        });
    });

    return {
        ...state
    };
};

'''
'''--- src/redux/utils/migrations/006.ts ---
/**
 * Add gZil Token to all users - 12 September 2020
 */

import { addToken } from './utils';
import { Blockchain } from '../../../core/blockchain/types';
import { GZIL_MAINNET } from '../../../core/blockchain/zilliqa/tokens/gzil';

export default (state: any) => {
    state = addToken(state, GZIL_MAINNET, {
        blockchain: Blockchain.ZILLIQA,
        chainId: '1',
        tokenActive: true
    });

    return {
        ...state
    };
};

'''
'''--- src/redux/utils/migrations/007.ts ---
/**
 * Add Cumulative Balance - 4 January 2021
 */

import { IReduxState } from '../../state';

export default (state: IReduxState) => {
    state.preferences.cumulativeBalance = false;

    return {
        ...state
    };
};

'''
'''--- src/redux/utils/migrations/008.ts ---
/**
 * Add PORT Token to all users - 12 September 2020
 */

import { addToken } from './utils';
import { Blockchain } from '../../../core/blockchain/types';
import { PORT_MAINNET } from '../../../core/blockchain/zilliqa/tokens/port';

export default (state: any) => {
    state = addToken(state, PORT_MAINNET, {
        blockchain: Blockchain.ZILLIQA,
        chainId: '1',
        tokenActive: true
    });

    return {
        ...state
    };
};

'''
'''--- src/redux/utils/migrations/009.ts ---
/**
 * Add ZWAP Token to all users - 2 Feb 2021
 */

import { addToken } from './utils';
import { Blockchain } from '../../../core/blockchain/types';
import { ZWAP_MAINNET } from '../../../core/blockchain/zilliqa/tokens/zwap';

export default (state: any) => {
    state = addToken(state, ZWAP_MAINNET, {
        blockchain: Blockchain.ZILLIQA,
        chainId: '1',
        tokenActive: true
    });

    return {
        ...state
    };
};

'''
'''--- src/redux/utils/migrations/010.ts ---
/**
 * Add ZRC-2 Tokens to all users - 19 Mar 2021
 */

import { addToken } from './utils';
import { Blockchain } from '../../../core/blockchain/types';

// Zilliqa
import { ZLP_MAINNET } from '../../../core/blockchain/zilliqa/tokens/zlp';
import { BARTER_MAINNET } from '../../../core/blockchain/zilliqa/tokens/barter';
import { BOLT_MAINNET } from '../../../core/blockchain/zilliqa/tokens/bolt';
import { REDC_MAINNET } from '../../../core/blockchain/zilliqa/tokens/redc';
import { SERGS_MAINNET } from '../../../core/blockchain/zilliqa/tokens/sergs';
import { SHRK_MAINNET } from '../../../core/blockchain/zilliqa/tokens/shrk';
import { KKZ_MAINNET } from '../../../core/blockchain/zilliqa/tokens/kkz';
import { ZCH_MAINNET } from '../../../core/blockchain/zilliqa/tokens/zch';
import { ZLF_MAINNET } from '../../../core/blockchain/zilliqa/tokens/zlf';
import { ZYF_MAINNET } from '../../../core/blockchain/zilliqa/tokens/zyf';
import { ZYRO_MAINNET } from '../../../core/blockchain/zilliqa/tokens/zyro';
import { CARB_MAINNET } from '../../../core/blockchain/zilliqa/tokens/carb';

// Ethereum
import { IDRT_MAINNET } from '../../../core/blockchain/ethereum/tokens/idrt';

export default (state: any) => {
    const data = {
        blockchain: Blockchain.ZILLIQA,
        chainId: '1',
        tokenActive: false
    };

    // Zilliqa
    state = addToken(state, ZLP_MAINNET, data);
    state = addToken(state, BARTER_MAINNET, data);
    state = addToken(state, BOLT_MAINNET, data);
    state = addToken(state, REDC_MAINNET, data);
    state = addToken(state, SERGS_MAINNET, data);
    state = addToken(state, SHRK_MAINNET, data);
    state = addToken(state, KKZ_MAINNET, data);
    state = addToken(state, ZCH_MAINNET, data);
    state = addToken(state, ZLF_MAINNET, data);
    state = addToken(state, ZYF_MAINNET, data);
    state = addToken(state, ZYRO_MAINNET, data);
    state = addToken(state, CARB_MAINNET, data);

    // Ethereum
    state = addToken(state, IDRT_MAINNET, {
        blockchain: Blockchain.ETHEREUM,
        chainId: '1',
        tokenActive: true
    });

    return {
        ...state
    };
};

'''
'''--- src/redux/utils/migrations/011.ts ---
/**
 * Solana change `Account 0` to `Root Account` - 25 Mar 2021
 */

import { Blockchain } from '../../../core/blockchain/types';
import { translate } from '../../../core/i18n';
import { AccountType, IWalletState } from '../../wallets/state';

export default (state: any) => {
    for (const walletKey of Object.keys(state.wallets)) {
        const wallet: IWalletState = state.wallets[walletKey];
        for (const [accIndex, account] of wallet.accounts.entries()) {
            if (
                account.blockchain === Blockchain.SOLANA &&
                account.index === -1 &&
                account.type === AccountType.ROOT
            ) {
                state.wallets[walletKey].accounts[accIndex].name = translate(
                    'App.labels.rootAccount'
                );
            }
        }
    }

    return {
        ...state
    };
};

'''
'''--- src/redux/utils/migrations/012.ts ---
/**
 * Add ZWAP Token to all users - 2 Feb 2021
 */

import { addToken } from './utils';
import { Blockchain } from '../../../core/blockchain/types';
import { GRT_MAINNET, GRT_TESTNET } from '../../../core/blockchain/ethereum/tokens/grt';

export default (state: any) => {
    state = addToken(state, GRT_TESTNET, {
        blockchain: Blockchain.ETHEREUM,
        chainId: '4',
        tokenActive: true,
        order: 900
    });

    state = addToken(state, GRT_MAINNET, {
        blockchain: Blockchain.ETHEREUM,
        chainId: '1',
        tokenActive: true,
        order: 900
    });

    return {
        ...state
    };
};

'''
'''--- src/redux/utils/migrations/013.ts ---
/**
 * Add UPDATE Token to all users
 */

import { Blockchain } from '../../../core/blockchain/types';
import { TokenScreenComponentType } from '../../../core/blockchain/types/token';

export default (state: any) => {
    if (
        state.tokens[Blockchain.ETHEREUM] &&
        state.tokens[Blockchain.ETHEREUM]['4'] &&
        state.tokens[Blockchain.ETHEREUM]['4'].GRT
    ) {
        // Update token screen type
        state.tokens[Blockchain.ETHEREUM]['4'].GRT.ui = {
            ...state.tokens[Blockchain.ETHEREUM]['4'].GRT.ui,
            tokenScreenComponent: TokenScreenComponentType.DEFAULT
        };
        state.tokens[Blockchain.ETHEREUM]['4'].GRT.removable = true;
    }

    if (
        state.tokens[Blockchain.ETHEREUM] &&
        state.tokens[Blockchain.ETHEREUM]['1'] &&
        state.tokens[Blockchain.ETHEREUM]['1'].GRT
    ) {
        // Update token screen type
        state.tokens[Blockchain.ETHEREUM]['1'].GRT.ui = {
            ...state.tokens[Blockchain.ETHEREUM]['1'].GRT.ui,
            tokenScreenComponent: TokenScreenComponentType.DEFAULT
        };
        state.tokens[Blockchain.ETHEREUM]['1'].GRT.removable = true;
    }

    return {
        ...state
    };
};

'''
'''--- src/redux/utils/migrations/014.ts ---
/**
 * Add Zilliqa SCO and XCAD tokens - 15 Jun 2021
 */

import { addToken } from './utils';
import { Blockchain } from '../../../core/blockchain/types';
import { SCO_MAINNET } from '../../../core/blockchain/zilliqa/tokens/sco';
import { XCAD_MAINNET } from '../../../core/blockchain/zilliqa/tokens/xcad';

export default (state: any) => {
    state = addToken(state, SCO_MAINNET, {
        blockchain: Blockchain.ZILLIQA,
        chainId: '1',
        tokenActive: false
    });

    state = addToken(state, XCAD_MAINNET, {
        blockchain: Blockchain.ZILLIQA,
        chainId: '1',
        tokenActive: false
    });

    return {
        ...state
    };
};

'''
'''--- src/redux/utils/migrations/015.ts ---
/**
 * Update validators redux - 21 Jun 2021
 * - cleanup validators
 */

export default (state: any) => {
    state.validators = {};

    return {
        ...state
    };
};

'''
'''--- src/redux/utils/migrations/016.ts ---
/**
 * Add SOL SPL coins - 27 Jul 2021
 *
 */

import { addToken } from './utils';
import { Blockchain } from '../../../core/blockchain/types';
import { BTC_MAINNET } from '../../../core/blockchain/solana/tokens/btc';
import { ETH_MAINNET } from '../../../core/blockchain/solana/tokens/eth';
import { JPYC_MAINNET } from '../../../core/blockchain/solana/tokens/jpyc';
import { LINK_MAINNET } from '../../../core/blockchain/solana/tokens/link';
import { RAY_MAINNET } from '../../../core/blockchain/solana/tokens/ray';
import { SUSHI_MAINNET } from '../../../core/blockchain/solana/tokens/sushi';
import { YFI_MAINNET } from '../../../core/blockchain/solana/tokens/yfi';
import { SRM_MAINNET } from '../../../core/blockchain/solana/tokens/srm';
import { FTT_MAINNET } from '../../../core/blockchain/solana/tokens/ftt';
import { UNI_MAINNET } from '../../../core/blockchain/solana/tokens/uni';
import { USDT_MAINNET } from '../../../core/blockchain/solana/tokens/usdt';
import { USDC_MAINNET } from '../../../core/blockchain/solana/tokens/usdc';

export default (state: any) => {
    // Active tokens
    const activeTokenData = {
        blockchain: Blockchain.SOLANA,
        chainId: '1',
        tokenActive: true
    };

    state = addToken(state, USDT_MAINNET, activeTokenData);
    state = addToken(state, USDC_MAINNET, activeTokenData);
    state = addToken(state, BTC_MAINNET, activeTokenData);
    state = addToken(state, ETH_MAINNET, activeTokenData);
    state = addToken(state, SRM_MAINNET, activeTokenData);
    state = addToken(state, RAY_MAINNET, activeTokenData);

    // Inactive tokens
    const inactiveTokenData = {
        blockchain: Blockchain.SOLANA,
        chainId: '1',
        tokenActive: false
    };

    state = addToken(state, LINK_MAINNET, inactiveTokenData);
    state = addToken(state, SUSHI_MAINNET, inactiveTokenData);
    state = addToken(state, YFI_MAINNET, inactiveTokenData);
    state = addToken(state, JPYC_MAINNET, inactiveTokenData);
    state = addToken(state, FTT_MAINNET, inactiveTokenData);
    state = addToken(state, UNI_MAINNET, activeTokenData);

    return {
        ...state
    };
};

'''
'''--- src/redux/utils/migrations/017.ts ---
/**
 * Add ZIL XCAD coin - 14 Sept 2021
 *
 */

import { addToken } from './utils';
import { Blockchain } from '../../../core/blockchain/types';
import { GZIL_MAINNET } from '../../../core/blockchain/zilliqa/tokens/gzil';
import { XCAD_MAINNET } from '../../../core/blockchain/zilliqa/tokens/xcad';

export default (state: any) => {
    // XCAD - 3rd position
    state = addToken(state, XCAD_MAINNET, {
        blockchain: Blockchain.ZILLIQA,
        chainId: '1',
        tokenActive: true,
        order: XCAD_MAINNET.defaultOrder // 910
    });

    // make sure GZIL is above XCAD
    // GZIL - 2nd position
    state = addToken(state, GZIL_MAINNET, {
        blockchain: Blockchain.ZILLIQA,
        chainId: '1',
        tokenActive: true,
        changeOrder: GZIL_MAINNET.defaultOrder //  900
    });

    return {
        ...state
    };
};

'''
'''--- src/redux/utils/migrations/018.ts ---
/**
 * Add ZWBTC, ZETH, ZUSDT coins - 5 Oct 2021
 *
 */

import { addToken } from './utils';
import { Blockchain } from '../../../core/blockchain/types';
import { ZWBTC_MAINNET } from '../../../core/blockchain/zilliqa/tokens/zwbtc';
import { ZETH_MAINNET } from '../../../core/blockchain/zilliqa/tokens/zeth';
import { ZUSDT_MAINNET } from '../../../core/blockchain/zilliqa/tokens/zusdt';

export default (state: any) => {
    state = addToken(state, ZWBTC_MAINNET, {
        blockchain: Blockchain.ZILLIQA,
        chainId: '1',
        tokenActive: true
    });

    state = addToken(state, ZETH_MAINNET, {
        blockchain: Blockchain.ZILLIQA,
        chainId: '1',
        tokenActive: true
    });

    state = addToken(state, ZUSDT_MAINNET, {
        blockchain: Blockchain.ZILLIQA,
        chainId: '1',
        tokenActive: true
    });

    return {
        ...state
    };
};

'''
'''--- src/redux/utils/migrations/019.ts ---
/**
 * Update XCAD smartcontract address change
 */

import { Blockchain } from '../../../core/blockchain/types';
import { XCAD_MAINNET } from '../../../core/blockchain/zilliqa/tokens/xcad';

export default (state: any) => {
    const zilChainIdMain = '1';

    if (
        state.tokens[Blockchain.ZILLIQA] &&
        state.tokens[Blockchain.ZILLIQA][zilChainIdMain] &&
        state.tokens[Blockchain.ZILLIQA][zilChainIdMain][XCAD_MAINNET.symbol]
    ) {
        // Update XCAD contract address
        state.tokens[Blockchain.ZILLIQA][zilChainIdMain][XCAD_MAINNET.symbol].contractAddress =
            XCAD_MAINNET.contractAddress;

        // Update XCAD decimals
        state.tokens[Blockchain.ZILLIQA][zilChainIdMain][XCAD_MAINNET.symbol].decimals =
            XCAD_MAINNET.decimals;
    }

    return {
        ...state
    };
};

'''
'''--- src/redux/utils/migrations/index.ts ---
import v2 from './002';
import v3 from './003';
import v4 from './004';
import v5 from './005';
import v6 from './006';
import v7 from './007';
import v8 from './008';
import v9 from './009';
import v10 from './010';
import v11 from './011';
import v12 from './012';
import v13 from './013';
import v14 from './014';
import v15 from './015';
import v16 from './016';
import v17 from './017';
import v18 from './018';
import v19 from './019';

export const migrations: any = {
    /**
     * Update removable key in tokens state
     */
    2: v2,
    /**
     * Add XSGD and DAI Tokens for all users by default
     */
    3: v3,
    /**
     * Update XSGD smartcontract address change
     */
    4: v4,
    /**
     * Add Account Default Type
     */
    5: v5,
    /**
     * Add gZil Token to all users - 12 September 2020
     */
    6: v6,
    /**
     * Add Cumulative Balance - 4 January 2021
     */
    7: v7,
    /**
     * Add PORT Token to all users - 14 January 2021
     */
    8: v8,
    /**
     * Add ZWAP Token to all users - 2 Feb 2021
     */
    9: v9,
    /**
     * Add ZRC-2 Tokens to all users - 19 Mar 2021
     */
    10: v10,
    /**
     * Solana change `Account 0` to `Root Account` - 25 Mar 2021
     */
    11: v11,
    /**
     * Add GRT testnet to rinkeby and GRT Mainnet - 25 Apr 2021
     */
    12: v12,
    /**
     * Update GRT testnet to rinkeby and GRT Mainnet - 25 Apr 2021
     */
    13: v13,
    /**
     * Add Zilliqa SCO and XCAD tokens - 15 Jun 2021
     */
    14: v14,
    /**
     * Update validators redux - 21 Jun 2021
     */
    15: v15,
    /**
     * Add SOL SPL coins - 27 Jul 2021
     */
    16: v16,
    /**
     * Add ZIL XCAD coin - 14 Sept 2021
     */
    17: v17,
    /**
     * Add ZWBTC, ZETH, ZUSDT coins - 5 Oct 2021
     */
    18: v18,
    /**
     * Update XCAD contract address - 9 Nov 2021
     */
    19: v19
};

'''
'''--- src/redux/utils/migrations/utils.ts ---
import { accountToken } from '../../tokens/static-selectors';
import { Blockchain } from '../../../core/blockchain/types';
import { IWalletState } from '../../wallets/state';
import { ITokenConfigState } from '../../tokens/state';

export const addToken = (
    state: any,
    token: ITokenConfigState,
    data: {
        blockchain: Blockchain;
        chainId: string;
        tokenActive: boolean;
        order?: number;
        changeOrder?: number;
    }
) => {
    if (
        state.tokens[data.blockchain] &&
        state.tokens[data.blockchain][data.chainId] &&
        state.tokens[data.blockchain][data.chainId][token.symbol]
    ) {
        // Update toke contract address
        state.tokens[data.blockchain][data.chainId][token.symbol].contractAddress =
            token.contractAddress;
    } else {
        // Add token Token
        state.tokens = {
            ...state.tokens,
            [data.blockchain]: {
                ...(state.tokens && state.tokens[data.blockchain]),
                [data.chainId]: {
                    ...(state.tokens &&
                        state.tokens[data.blockchain] &&
                        state.tokens[data.blockchain][data.chainId]),
                    [token.symbol]: token
                }
            }
        };
    }

    // Add tokens on accounts
    for (const wallet of Object.values(state.wallets)) {
        for (const account of (wallet as IWalletState).accounts) {
            if (account.blockchain === data.blockchain) {
                if (account.tokens[data.chainId] && account.tokens[data.chainId][token.symbol]) {
                    // Token has been already added
                    if (data?.changeOrder) {
                        // Add Token
                        account.tokens[data.chainId][token.symbol] = accountToken(
                            token.symbol,
                            data.changeOrder,
                            {
                                active: data.tokenActive
                            }
                        );
                    }
                } else {
                    // Add Token
                    account.tokens[data.chainId][token.symbol] = accountToken(
                        token.symbol,
                        data.order || 999,
                        {
                            active: data.tokenActive
                        }
                    );
                }
            }
        }
    }

    return {
        ...state
    };
};

'''
'''--- src/redux/utils/persistConfig.ts ---
import AsyncStorage from '@react-native-community/async-storage';
import { createMigrate } from 'redux-persist';
import { migrations } from './migrations';

export const persistConfig = {
    key: 'root',
    version: 19,
    storage: AsyncStorage,
    blacklist: ['ui'],
    migrate: createMigrate(migrations, { debug: false })
};

'''
'''--- src/redux/utils/redux-decorators.ts ---
import { connect as _connect } from 'react-redux';
import { IReduxState } from '../state';
import { Dispatch } from 'redux';

const defaultMergeProps = (
    stateProps: (state: IReduxState) => any,
    dispatchProps: (dispatch: Dispatch) => any,
    ownProps: any
) => ({ ...ownProps, ...stateProps, ...dispatchProps });

export function mapStateToProps(
    mapStateToPropsFn: (state: IReduxState, ownProps?: any) => any,
    options?: any
) {
    return _connect(
        mapStateToPropsFn,
        // @ts-ignore
        null,
        defaultMergeProps,
        options
    );
}

export function mapDispatchToProps(
    mapDispatchToPropsFn: (dispatch: Dispatch, ownProps: any) => any,
    options?: any
) {
    const mapStateToPropsFn = () => ({});
    // @ts-ignore
    return _connect(mapStateToPropsFn, mapDispatchToPropsFn, defaultMergeProps, options);
}

export function connect() {
    // @ts-ignore
    return _connect(...arguments);
}

'''
'''--- src/redux/wallets/__tests__/actions.test.ts ---
import { addWallet, createHDWallet, setSelectedWallet } from '../actions';

jest.mock('../../config');

jest.mock('../../../core/secure/keychain/keychain', () => {
    return {
        getEncryptionKey: () => Promise.resolve({ password: 'pass' })
    };
});

jest.mock('../../../core/secure/storage/storage', () => {
    return {
        storeEncrypted: () => Promise.resolve()
    };
});

describe('wallet actions', () => {
    test('addWallet actions return correct object', () => {
        // @ts-ignore
        expect(addWallet({ data: 'test' })).toEqual({ data: { data: 'test' }, type: 'WALLET_ADD' });
        expect(setSelectedWallet('1')).toMatchSnapshot();
    });

    // test('createHDWallet working properly', async () => {
    //     const dispatch = jest.fn();
    //     const getState = jest.fn((): any => ({ wallets: [] }));
    //     const callback = jest.fn();
    //     const password = '000000';

    //     const mnemonic =
    //         'panic club above clarify orbit resist illegal feel bus remember aspect field test bubble dog trap awesome hand room rice heavy idle faint salmon';

    //     const response = {
    //         data: {
    //             accounts: [
    //                 {
    //                     address: '0x151250cB2bB034247c8ffBeD91B7Fb1e9f3e9FFE',
    //                     blockchain: 'ETHEREUM',
    //                     index: 0,
    //                     publicKey:
    //                         '22d185a1eda6240e2004a4794e50daff53eb3e5194bf21d4cca3be002688566ee2af4d5724dbe507646649193e5f8368ee63fb257147fbb2bafed87e63717c68'
    //                 },
    //                 {
    //                     address: 'zil1kqj0fp7ja409llrjt4q4tja4uvue8vtp65gahs',
    //                     blockchain: 'ZILLIQA',
    //                     index: 0,
    //                     publicKey:
    //                         '0310a8a9ad39c2c9a878bf1a42895ee122806d1f4cf510f604d274b04f5a5854cc'
    //                 }
    //             ],
    //             id: 'uuid',
    //             type: 'HD'
    //         },
    //         type: 'WALLET_ADD'
    //     };

    //     await createHDWallet(mnemonic, password, callback)(dispatch, getState);

    //     await flushPromises();

    //     expect(callback).toHaveBeenCalled();
    //     expect(dispatch).toMatchSnapshot();
    // });
});

'''
'''--- src/redux/wallets/__tests__/reducer.test.ts ---
import reducer from '../reducer';
import { WALLET_ADD, SELECT_WALLET } from '../actions';

jest.mock('../../config');

describe('wallets reducer', () => {
    test('should set initial state', () => {
        expect(
            reducer(undefined as any, {
                type: '',
                data: ''
            })
        ).toMatchSnapshot();
    });

    test('should handle WALLET_ADD', () => {
        expect(
            reducer(undefined as any, {
                type: WALLET_ADD,
                data: { id: 'walletId' }
            })
        ).toEqual({ walletId: { id: 'walletId' } });
    });
});

'''
'''--- src/redux/wallets/actions/index.ts ---
export * from './pos-actions';
export * from './wallet-actions';

'''
'''--- src/redux/wallets/actions/password-actions.ts ---
import { IWalletState } from '../state';
import { Dispatch } from 'react';
import { IReduxState } from '../../state';
import { storeEncrypted, readEncrypted } from '../../../core/secure/storage/storage';

import { getEncryptionKey, generateEncryptionKey } from '../../../core/secure/keychain/keychain';

export const changePIN = (newPassword: string, oldPassword: string) => async (
    dispatch: Dispatch<any>,
    getState: () => IReduxState
) => {
    const state = getState();

    const encryptionKey = await getEncryptionKey(oldPassword);
    const newEncryptionKey = await generateEncryptionKey(newPassword);

    Object.values(state.wallets).map(async (wallet: IWalletState) => {
        const walletId = wallet.id;

        const mnemonic = await readEncrypted(walletId, encryptionKey);

        await storeEncrypted(mnemonic, walletId, newEncryptionKey);
    });
};

'''
'''--- src/redux/wallets/actions/pos-actions/index.ts ---
export * from './solana';
import { IAccountState } from '../../state';
import { IFeeOptions, ITransactionExtraFields } from '../../../../core/blockchain/types';
import { Dispatch } from 'react';
import { IAction } from '../../../types';
import { IReduxState } from '../../../state';
import { getChainId } from '../../../preferences/selectors';
import { getNrPendingTransactions, getSelectedWallet } from '../../selectors';
import { getBlockchain } from '../../../../core/blockchain/blockchain-factory';
import { getTokenConfig } from '../../../tokens/static-selectors';
import { translate } from '../../../../core/i18n';
import { Dialog } from '../../../../components/dialog/dialog';
import { PosBasicActionType } from '../../../../core/blockchain/types/token';
import { IValidator } from '../../../../core/blockchain/types/stats';
import {
    openProcessTransactions,
    setProcessTransactions
} from '../../../ui/process-transactions/actions';
import { TransactionStatus } from '../../../../core/wallet/types';
import { cloneDeep } from 'lodash';
import { captureException as SentryCaptureException } from '@sentry/react-native';
import { NavigationService } from '../../../../navigation/navigation-service';
import BigNumber from 'bignumber.js';
import { isFeatureActive, RemoteFeature } from '../../../../core/utils/remote-feature-config';

export const redelegate = (
    account: IAccountState,
    amount: string,
    validators: IValidator[],
    token: string,
    feeOptions: IFeeOptions,
    extraFields: ITransactionExtraFields,
    goBack: boolean = true,
    sendResponse?: { requestId: string }
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    posAction(
        account,
        amount,
        validators,
        token,
        feeOptions,
        extraFields,
        goBack,
        PosBasicActionType.REDELEGATE,
        sendResponse
    )(dispatch, getState);
};

export const claimRewardNoInput = (
    account: IAccountState,
    validators: IValidator[],
    token: string,
    extraFields: ITransactionExtraFields,
    goBack: boolean = true,
    sendResponse?: { requestId: string }
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    if (!isFeatureActive(RemoteFeature.IMPROVED_NONCE) && getNrPendingTransactions(getState())) {
        const nvServiceFn =
            NavigationService.getCurrentRoute() === 'Dashboard' ? 'navigate' : 'replace';
        Dialog.alert(
            translate('Validator.cannotInitiateTxTitle'),
            translate('Validator.cannotInitiateTxMessage'),
            undefined,
            {
                text: translate('App.labels.ok'),
                onPress: () => NavigationService[nvServiceFn]('TransactonsHistory', {})
            }
        );
    } else {
        posAction(
            account,
            undefined,
            validators,
            token,
            undefined,
            extraFields,
            goBack,
            PosBasicActionType.CLAIM_REWARD_NO_INPUT,
            sendResponse
        )(dispatch, getState);
    }
};

export const delegate = (
    account: IAccountState,
    amount: string,
    validators: IValidator[],
    token: string,
    feeOptions: IFeeOptions,
    extraFields: ITransactionExtraFields,
    goBack: boolean = true,
    sendResponse?: { requestId: string }
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    posAction(
        account,
        amount,
        validators,
        token,
        feeOptions,
        extraFields,
        goBack,
        PosBasicActionType.DELEGATE,
        sendResponse
    )(dispatch, getState);
};

export const delegateV2 = (
    account: IAccountState,
    validators: {
        validator: IValidator;
        amount: string;
    }[],
    token: string,
    feeOptions: IFeeOptions,
    extraFields: ITransactionExtraFields
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    posActionV2(
        account,
        validators,
        token,
        feeOptions,
        extraFields,
        PosBasicActionType.DELEGATE_V2
    )(dispatch, getState);
};

export const unstake = (
    account: IAccountState,
    amount: string,
    validators: IValidator[],
    token: string,
    feeOptions: IFeeOptions,
    extraFields: ITransactionExtraFields,
    goBack: boolean = true,
    sendResponse?: { requestId: string }
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    posAction(
        account,
        amount,
        validators,
        token,
        feeOptions,
        extraFields,
        goBack,
        PosBasicActionType.UNSTAKE,
        sendResponse
    )(dispatch, getState);
};

export const unlock = (
    account: IAccountState,
    amount: string,
    token: string,
    feeOptions: IFeeOptions,
    extraFields: ITransactionExtraFields,
    goBack: boolean = true,
    sendResponse?: { requestId: string }
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    posAction(
        account,
        amount,
        [],
        token,
        feeOptions,
        extraFields,
        goBack,
        PosBasicActionType.UNLOCK,
        sendResponse
    )(dispatch, getState);
};

export const activate = (
    account: IAccountState,
    token: string,
    extraFields: ITransactionExtraFields,
    goBack: boolean = true,
    sendResponse?: { requestId: string }
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    posAction(
        account,
        undefined,
        undefined,
        token,
        undefined,
        extraFields,
        goBack,
        PosBasicActionType.ACTIVATE,
        sendResponse
    )(dispatch, getState);
};

export const withdraw = (
    account: IAccountState,
    validators: IValidator[],
    token: string,
    extraFields: ITransactionExtraFields,
    goBack: boolean = true,
    sendResponse?: { requestId: string }
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    if (!isFeatureActive(RemoteFeature.IMPROVED_NONCE) && getNrPendingTransactions(getState())) {
        const nvServiceFn =
            NavigationService.getCurrentRoute() === 'Dashboard' ? 'navigate' : 'replace';
        Dialog.alert(
            translate('Validator.cannotInitiateTxTitle'),
            translate('Validator.cannotInitiateTxMessage'),
            undefined,
            {
                text: translate('App.labels.ok'),
                onPress: () => NavigationService[nvServiceFn]('TransactonsHistory', {})
            }
        );
    } else {
        posAction(
            account,
            undefined,
            validators,
            token,
            undefined,
            extraFields,
            goBack,
            PosBasicActionType.WITHDRAW,
            sendResponse
        )(dispatch, getState);
    }
};

export const unvote = (
    account: IAccountState,
    amount: string,
    validators: IValidator[],
    token: string,
    feeOptions: IFeeOptions,
    extraFields: ITransactionExtraFields,
    goBack: boolean = true,
    sendResponse?: { requestId: string }
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    posAction(
        account,
        amount,
        validators,
        token,
        feeOptions,
        extraFields,
        goBack,
        PosBasicActionType.UNVOTE,
        sendResponse
    )(dispatch, getState);
};

export const posAction = (
    account: IAccountState,
    amount: string,
    validators: IValidator[],
    token: string,
    feeOptions: IFeeOptions,
    extraFields: ITransactionExtraFields,
    goBack: boolean = true,
    type: PosBasicActionType,
    sendResponse?: { requestId: string }
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    const state = getState();
    const chainId = getChainId(state, account.blockchain);
    const walletType = getSelectedWallet(state).type;

    try {
        const extra: ITransactionExtraFields = {
            ...extraFields,
            posAction: type,
            typedTransaction: getBlockchain(account.blockchain).config.typedTransaction[walletType]
        };
        const blockchainInstance = getBlockchain(account.blockchain);

        const tokenConfig = getTokenConfig(account.blockchain, token);

        dispatch(openProcessTransactions());

        const txs = await blockchainInstance.transaction.buildPosTransaction(
            {
                chainId,
                account,
                validators,
                amount: blockchainInstance.account
                    .amountToStd(amount, tokenConfig.decimals)
                    .toFixed(0, BigNumber.ROUND_DOWN),
                token,
                feeOptions:
                    feeOptions?.gasPrice && feeOptions?.gasLimit
                        ? {
                              gasPrice: feeOptions.gasPrice.toString(),
                              gasLimit: feeOptions.gasLimit.toString()
                          }
                        : undefined,
                extraFields: extra
            },
            type
        );
        dispatch(
            setProcessTransactions(
                cloneDeep(txs).map(tx => {
                    tx.status = TransactionStatus.CREATED;
                    return tx;
                })
            )
        );
    } catch (errorMessage) {
        SentryCaptureException(new Error(JSON.stringify(errorMessage)));
    }
};

export const posActionV2 = (
    account: IAccountState,
    validators: {
        validator: IValidator;
        amount: string;
    }[],
    token: string,
    feeOptions: IFeeOptions,
    extraFields: ITransactionExtraFields,
    type: PosBasicActionType
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    const state = getState();
    const chainId = getChainId(state, account.blockchain);
    const walletType = getSelectedWallet(state).type;

    try {
        const extra: ITransactionExtraFields = {
            ...extraFields,
            posAction: type,
            typedTransaction: getBlockchain(account.blockchain).config.typedTransaction[walletType]
        };
        const blockchainInstance = getBlockchain(account.blockchain);

        dispatch(openProcessTransactions());

        const txs = await blockchainInstance.transaction.buildPosTransaction(
            {
                chainId,
                account,
                validators: validators as any,
                amount: '0',
                token,
                feeOptions:
                    feeOptions?.gasPrice && feeOptions?.gasLimit
                        ? {
                              gasPrice: feeOptions.gasPrice.toString(),
                              gasLimit: feeOptions.gasLimit.toString()
                          }
                        : undefined,
                extraFields: extra
            },
            type
        );
        dispatch(
            setProcessTransactions(
                cloneDeep(txs).map(tx => {
                    tx.status = TransactionStatus.CREATED;
                    return tx;
                })
            )
        );
    } catch (errorMessage) {
        SentryCaptureException(new Error(JSON.stringify(errorMessage)));
    }
};

'''
'''--- src/redux/wallets/actions/pos-actions/solana.ts ---
import { IAccountState } from '../../state';
import { IFeeOptions, ITransactionExtraFields } from '../../../../core/blockchain/types';
import { Dispatch } from 'react';
import { IAction } from '../../../types';
import { IReduxState } from '../../../state';
import { posActionV2, posAction } from '.';
import { IValidator } from '../../../../core/blockchain/types/stats';
import { PosBasicActionType } from '../../../../core/blockchain/types/token';

export const solanaDelegateStakeAccount = (
    account: IAccountState,
    validators: {
        validator: IValidator;
        amount: string;
    }[],
    token: string,
    feeOptions: IFeeOptions,
    extraFields: ITransactionExtraFields
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    posActionV2(
        account,
        validators,
        token,
        feeOptions,
        extraFields,
        PosBasicActionType.SOLANA_STAKEACCOUNT_DELEGATE
    )(dispatch, getState);
};

export const solanaCreateStakeAccount = (
    account: IAccountState,
    amount: string,
    token: string,
    feeOptions: IFeeOptions,
    extraFields: ITransactionExtraFields
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    posAction(
        account,
        amount,
        undefined,
        token,
        feeOptions,
        extraFields,
        undefined,
        PosBasicActionType.SOLANA_STAKEACCOUNT_CREATE
    )(dispatch, getState);
};

export const solanaSplitStakeAccount = (
    account: IAccountState,
    amount: string,
    token: string,
    feeOptions: IFeeOptions,
    extraFields: ITransactionExtraFields
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    posAction(
        account,
        amount,
        undefined,
        token,
        feeOptions,
        extraFields,
        undefined,
        PosBasicActionType.SOLANA_STAKEACCOUNT_SPLIT
    )(dispatch, getState);
};

export const solanaWithdraw = (
    account: IAccountState,
    amount: string,
    token: string,
    feeOptions: IFeeOptions,
    extraFields: ITransactionExtraFields
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    posAction(
        account,
        amount,
        undefined,
        token,
        feeOptions,
        extraFields,
        undefined,
        PosBasicActionType.SOLANA_STAKEACCOUNT_WITHDRAW
    )(dispatch, getState);
};

export const solanaUnstake = (
    account: IAccountState,
    amount: string,
    validators: IValidator[],
    token: string,
    feeOptions: IFeeOptions,
    extraFields: ITransactionExtraFields
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    posAction(
        account,
        amount,
        validators,
        token,
        feeOptions,
        extraFields,
        undefined,
        PosBasicActionType.SOLANA_STAKEACCOUNT_UNSTAKE
    )(dispatch, getState);
};

/**
 * Create stake account & Delegate
 */
export const solanaCreateAndDelegateStakeAccount = (
    account: IAccountState,
    validators: {
        validator: IValidator;
        amount: string;
    }[],
    token: string,
    feeOptions: IFeeOptions,
    extraFields: ITransactionExtraFields
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    posActionV2(
        account,
        validators,
        token,
        feeOptions,
        extraFields,
        PosBasicActionType.SOLANA_CREATE_AND_DELEGATE_STAKE_ACCOUNT
    )(dispatch, getState);
};

'''
'''--- src/redux/wallets/actions/util-actions.ts ---
import { Dispatch } from 'react';
import { NavigationParams } from 'react-navigation';
import { TRANSACTION_PUBLISHED } from '.';
import { Dialog } from '../../../components/dialog/dialog';
import { PasswordModal } from '../../../components/password-modal/password-modal';
import { getBlockchain } from '../../../core/blockchain/blockchain-factory';
import { NearFunctionCallMethods } from '../../../core/blockchain/near/types';
import {
    IBlockchainTransaction,
    Blockchain,
    TransactionMessageText
} from '../../../core/blockchain/types';
import { IValidator } from '../../../core/blockchain/types/stats';
import { translate } from '../../../core/i18n';
import { WalletType, TransactionStatus } from '../../../core/wallet/types';
import { WalletFactory } from '../../../core/wallet/wallet-factory';
import { NavigationService } from '../../../navigation/navigation-service';
import { LedgerConnect } from '../../../screens/ledger/ledger-connect';
import { getChainId } from '../../preferences/selectors';
import { IReduxState } from '../../state';
import { getTokenConfig, generateAccountTokenState } from '../../tokens/static-selectors';
import { IAction } from '../../types';
import { delay } from '../../../core/utils/time';
import {
    setProcessTxIndex,
    updateProcessTransactionStatusForIndex,
    updateProcessTransactionIdForIndex,
    setProcessTxCompleted,
    closeProcessTransactions,
    updateProcessTransactionConfirmationsForIndex
} from '../../ui/process-transactions/actions';
import {
    getSelectedWallet,
    getSelectedAccount,
    getNrPendingTransactions,
    getSelectedAccountTransactions
} from '../selectors';
import { AccountType } from '../state';
import {
    captureException as SentryCaptureException,
    addBreadcrumb as SentryAddBreadcrumb
} from '@sentry/react-native';
import { isFeatureActive, RemoteFeature } from '../../../core/utils/remote-feature-config';

export const signAndSendTransactions = (specificIndex?: number) => async (
    dispatch: Dispatch<IAction<any>>,
    getState: () => IReduxState
) => {
    const state = getState();

    const transactions: IBlockchainTransaction[] = state.ui.processTransactions.data.txs;

    const appWallet = getSelectedWallet(state);
    const account = getSelectedAccount(state);
    const chainId = getChainId(state, account.blockchain);
    let password = '';
    try {
        if (appWallet.type === WalletType.HD) {
            password = await PasswordModal.getPassword(
                translate('Password.pinTitleUnlock'),
                translate('Password.subtitleSignTransaction'),
                { sensitive: true, showCloseButton: true }
            );
        }

        const wallet: {
            sign: (
                blockchain: Blockchain,
                accountIndex: number,
                transaction: IBlockchainTransaction,
                accountType: AccountType
            ) => Promise<any>;
        } =
            appWallet.type === WalletType.HW
                ? LedgerConnect
                : await WalletFactory.get(appWallet.id, appWallet.type, {
                      pass: password,
                      deviceVendor: appWallet.hwOptions?.deviceVendor,
                      deviceModel: appWallet.hwOptions?.deviceModel,
                      deviceId: appWallet.hwOptions?.deviceId,
                      connectionType: appWallet.hwOptions?.connectionType
                  }); // encrypted string: pass)

        const client = getBlockchain(account.blockchain).getClient(chainId);
        let error = false;
        const startIndex = specificIndex === undefined ? 0 : specificIndex;
        for (let index = startIndex; index < transactions.length; index++) {
            await delay(0);
            if (error) break;
            const txIndex = specificIndex || index;
            let transaction = transactions[index];

            dispatch(setProcessTxIndex(txIndex));
            let signed;
            try {
                let nonce = await client.getNonce(
                    account.type === AccountType.LOCKUP_CONTRACT
                        ? account.meta.owner
                        : account.address,
                    account.publicKey
                );
                const nrPendingTransactions = getNrPendingTransactions(getState());
                transaction = {
                    ...transaction,
                    nonce: nonce + nrPendingTransactions
                };

                if (isFeatureActive(RemoteFeature.IMPROVED_NONCE)) {
                    // Adjust nonce
                    const currentBlockNumber = await client
                        .getCurrentBlock()
                        .then(res => res.number);
                    // getting all outbound tx for current account
                    const outboundTransactions = getSelectedAccountTransactions(getState()).filter(
                        tx => tx.address === account.address
                    );

                    // checking if there are transactions with same nonce
                    let outTx: IBlockchainTransaction = outboundTransactions.find(
                        tx => tx.nonce === nonce
                    );
                    while (outTx) {
                        // found a tx with the same nonce
                        const txStatus = await client.utils.getTransactionStatus(outTx.id, {
                            broadcastedOnBlock: outTx.broadcastedOnBlock,
                            currentBlockNumber,
                            address: account.address
                        });

                        // if the status oif the tx is DROPPED we can reuse the nonce
                        if (txStatus === TransactionStatus.DROPPED) {
                            break;
                        } else {
                            // the transactions is not dropped, so it's on the chain, we need to increase the nonce and check again
                            nonce++;
                            outTx = outboundTransactions.find(tx => tx.nonce === nonce);
                        }
                    }
                    // updating the nonce
                    transaction.nonce = nonce;
                }

                signed = await wallet.sign(
                    transaction.blockchain,
                    account.index,
                    transaction,
                    account.type
                );
                dispatch(updateProcessTransactionStatusForIndex(txIndex, TransactionStatus.SIGNED));
            } catch (e) {
                if (e === 'LEDGER_SIGN_CANCELLED') {
                    dispatch(setProcessTxIndex(txIndex - 1));
                }
                throw e;
            }

            try {
                const { txHash } = await client.sendTransaction(signed);

                // SELECT_STAKING_POOL: delay 2 seconds
                // Needed only if there are multiple operations, such as select_staking_pool and deposit_and_stake
                // Need to increase the number of blocks between transactions
                const { additionalInfo } = transaction;
                if (
                    account.blockchain === Blockchain.NEAR &&
                    additionalInfo &&
                    transactions.length > 1
                ) {
                    for (const action of additionalInfo?.actions || []) {
                        if (action?.params[0] === NearFunctionCallMethods.SELECT_STAKING_POOL) {
                            await delay(2000);
                        }
                    }
                }

                if (txHash) {
                    dispatch(updateProcessTransactionIdForIndex(txIndex, txHash));
                    dispatch({
                        type: TRANSACTION_PUBLISHED,
                        data: {
                            hash: txHash,
                            tx: {
                                ...transaction,
                                status: TransactionStatus.PENDING
                            },
                            walletId: appWallet.id
                        }
                    });
                    dispatch(
                        updateProcessTransactionStatusForIndex(txIndex, TransactionStatus.PENDING)
                    );

                    if (transaction?.confirmations) {
                        await waitTransactionConfirmations(
                            txHash,
                            txIndex,
                            transaction,
                            account.address,
                            client,
                            dispatch,
                            getState
                        );
                    }
                } else {
                    SentryAddBreadcrumb({
                        message: JSON.stringify({
                            transactions: transaction,
                            message: 'No txHash'
                        })
                    });

                    SentryCaptureException(
                        new Error(
                            `Failed to broadcast transaction on ${account.blockchain}, no txHash`
                        )
                    );

                    error = true;
                    dispatch(setProcessTxCompleted(true, true));

                    dispatch(
                        updateProcessTransactionStatusForIndex(txIndex, TransactionStatus.FAILED)
                    );
                }
            } catch (err) {
                // console.error(err);
                SentryAddBreadcrumb({
                    message: JSON.stringify({
                        error: err
                    })
                });

                error = true;
                dispatch(setProcessTxCompleted(true, true));
                dispatch(updateProcessTransactionStatusForIndex(txIndex, TransactionStatus.FAILED));

                throw err;
            }

            if (specificIndex !== undefined) {
                // just stop, we had to sign only one tx (ledger)
                break;
            }
        }

        if (
            specificIndex === undefined ||
            (specificIndex !== undefined && specificIndex + 1 >= transactions.length)
        ) {
            // we need to check if all txs were signed before marking the flow complete.
            dispatch(setProcessTxCompleted(true, false));
        }
    } catch (err) {
        // console.error(err);
        const errorMessage = err?.error;

        SentryAddBreadcrumb({ message: JSON.stringify(err) });

        if (errorMessage !== 'LEDGER_SIGN_CANCELLED') {
            SentryCaptureException(
                new Error(
                    `Failed to broadcast transaction on ${account.blockchain}, ${errorMessage}`
                )
            );
        }

        const atLeastOneTransactionBroadcasted = transactionsBroadcasted(
            getState().ui.processTransactions.data.txs
        );
        const tokenConfig = getTokenConfig(account.blockchain, transactions[0].token.symbol);
        const blockchainInstance = getBlockchain(account.blockchain);
        let navigationParams: NavigationParams = {
            blockchain: account.blockchain,
            accountIndex: account.index,
            token: generateAccountTokenState(tokenConfig),
            tokenLogo: tokenConfig.icon
        };
        if (atLeastOneTransactionBroadcasted) {
            navigationParams = {
                ...navigationParams,
                activeTab: blockchainInstance.config.ui?.token?.labels?.tabTransactions
            };
        }

        if (errorMessage !== 'LEDGER_SIGN_CANCELLED') {
            if (TransactionMessageText[errorMessage]) {
                Dialog.alert(
                    translate('LoadingModal.txFailed'),
                    translate(`LoadingModal.${errorMessage}`, {
                        coin: blockchainInstance.config.coin
                    }),
                    undefined,
                    {
                        text: translate('App.labels.ok'),
                        onPress: () => {
                            dispatch(closeProcessTransactions());
                            // NavigationService.navigate('Token', navigationParams);
                            NavigationService.navigate('TransactonsHistory', {});
                        }
                    }
                );
            } else {
                Dialog.alert(
                    translate('LoadingModal.txFailed'),
                    translate('LoadingModal.GENERIC_ERROR'),
                    undefined,
                    {
                        text: translate('App.labels.ok'),
                        onPress: () => {
                            dispatch(closeProcessTransactions());
                            // NavigationService.navigate('Token', navigationParams);
                            NavigationService.navigate('TransactonsHistory', {});
                        }
                    }
                );
            }
        }
    }
};

const waitTransactionConfirmations = async (
    txHash: string,
    txIndex: number,
    transaction: IBlockchainTransaction,
    address: string,
    client: any,
    dispatch: Dispatch<IAction<any>>,
    getState: () => IReduxState
) => {
    return new Promise((resolve, reject) => {
        const txWaitConfirmationsInterval = setInterval(async () => {
            const resConfirmations = await client.getTransactionConfirmations(txHash);

            dispatch(
                updateProcessTransactionConfirmationsForIndex(
                    txIndex,
                    resConfirmations.confirmations
                )
            );

            if (
                transaction.confirmations.numConfirmations ===
                transaction.confirmations.numConfirmationsNeeded
            ) {
                const status = await client.utils.getTransactionStatus(txHash);

                if (status !== TransactionStatus.PENDING) {
                    txWaitConfirmationsInterval && clearInterval(txWaitConfirmationsInterval);

                    switch (status) {
                        case TransactionStatus.SUCCESS:
                            dispatch(
                                updateProcessTransactionStatusForIndex(
                                    txIndex,
                                    TransactionStatus.SUCCESS
                                )
                            );
                            return resolve(true);

                        case TransactionStatus.FAILED:
                            dispatch(
                                updateProcessTransactionStatusForIndex(
                                    txIndex,
                                    TransactionStatus.FAILED
                                )
                            );
                            return reject();
                    }
                }
            }
        }, 1000);
    });
};

const transactionsBroadcasted = (txs: IBlockchainTransaction[]): boolean => {
    return (
        txs.filter(tx => {
            return (
                tx.status === TransactionStatus.FAILED ||
                tx.status === TransactionStatus.DROPPED ||
                tx.status === TransactionStatus.PENDING ||
                tx.status === TransactionStatus.SUCCESS
            );
        }).length > 0
    );
};

export const buildDummyValidator = (
    id: string,
    name?: string,
    icon?: string,
    website?: string,
    inputAmount?: string
): IValidator => {
    return {
        id,
        name: name || id,
        icon: icon || '',
        rank: '',
        totalVotes: '0',
        amountDelegated: {
            active: '0',
            pending: '0'
        },
        website: website || '',
        topStats: [],
        secondaryStats: [],
        chartStats: [],
        inputAmount
    };
};

'''
'''--- src/redux/wallets/actions/wallet-actions.ts ---
import { HDWallet } from '../../../core/wallet/hd-wallet/hd-wallet';
import {
    Blockchain,
    IFeeOptions,
    TransactionMessageText,
    TransactionMessageType,
    ITransactionExtraFields,
    ChainIdType,
    IBlockchainTransaction
} from '../../../core/blockchain/types';
import { WalletType, IWallet, TransactionStatus } from '../../../core/wallet/types';
import { IWalletState, IAccountState, ITokenState, AccountType } from '../state';
import { IAction } from '../../types';
import { Dispatch } from 'react';
import { IReduxState } from '../../state';
import { v4 as uuidv4 } from 'uuid';
import { storeEncrypted, deleteFromStorage } from '../../../core/secure/storage/storage';
import { getBlockchain } from '../../../core/blockchain/blockchain-factory';
import { WalletFactory } from '../../../core/wallet/wallet-factory';
import { HWVendor, HWModel, HWConnection } from '../../../core/wallet/hw-wallet/types';

import { HWWalletFactory } from '../../../core/wallet/hw-wallet/hw-wallet-factory';
import { NavigationScreenProp, NavigationState } from 'react-navigation';
import { translate } from '../../../core/i18n';
import { TokenType } from '../../../core/blockchain/types/token';
import { NavigationService } from '../../../navigation/navigation-service';
import {
    getSelectedWallet,
    getAccounts,
    getSelectedAccount,
    getWalletWithAddress,
    getWalletAndTransactionForHash,
    generateAccountConfig,
    getWalletByPubKey,
    getSelectedAccountTransactions,
    getNrPendingTransactions
} from '../selectors';
import { getChainId } from '../../preferences/selectors';
import { formatAddress } from '../../../core/utils/format-address';
import { Dialog } from '../../../components/dialog/dialog';
import { setDisplayPasswordModal } from '../../ui/password-modal/actions';
import {
    getTokenConfig,
    generateAccountTokenState,
    generateTokensConfig
} from '../../tokens/static-selectors';
import {
    getEncryptionKey,
    clearEncryptionKey,
    clearPinCode,
    getWalletCredentialsKey,
    setWalletCredentialsKey
} from '../../../core/secure/keychain/keychain';
import { delay } from '../../../core/utils/time';
import { toggleBiometricAuth } from '../../preferences/actions';
import { closeTransactionRequest } from '../../ui/transaction-request/actions';
import { LoadingModal } from '../../../components/loading-modal/loading-modal';
import {
    addBreadcrumb as SentryAddBreadcrumb,
    captureException as SentryCaptureException
} from '@sentry/react-native';
import { startNotificationsHandlers } from '../../notifications/actions';
import { Client as NearClient } from '../../../core/blockchain/near/client';
import { NearTransactionUtils } from '../../../core/blockchain/near/transaction';
import { NEAR_TLD } from '../../../core/constants/app';
import { LedgerConnect } from '../../../screens/ledger/ledger-connect';
import {
    openProcessTransactions,
    setProcessTransactions,
    setProcessTxCreateAccount,
    updateProcessTransactionIdForIndex,
    updateProcessTransactionStatusForIndex
} from '../../ui/process-transactions/actions';
import cloneDeep from 'lodash/cloneDeep';
import { PasswordModal } from '../../../components/password-modal/password-modal';
import { isFeatureActive, RemoteFeature } from '../../../core/utils/remote-feature-config';

// actions consts
export const WALLET_ADD = 'WALLET_ADD';
export const WALLET_DELETE = 'WALLET_DELETE';
export const WALLET_CHANGE_NAME = 'WALLET_CHANGE_NAME';
export const ACCOUNT_GET_BALANCE = 'ACCOUNT_GET_BALANCE';
export const TRANSACTION_PUBLISHED = 'TRANSACTION_PUBLISHED';
export const TRANSACTION_UPSERT = 'TRANSACTION_UPSERT';
export const TRANSACTION_REMOVE = 'TRANSACTION_REMOVE';
export const ACCOUNT_ADD = 'ACCOUNT_ADD';
export const ACCOUNT_REMOVE = 'ACCOUNT_REMOVE';
export const TOGGLE_TOKEN_ACTIVE = 'TOGGLE_TOKEN_ACTIVE';
export const UPDATE_TOKEN_ORDER = 'UPDATE_TOKEN_ORDER';
export const REMOVE_TOKEN_FROM_ACCOUNT = 'REMOVE_TOKEN_FROM_ACCOUNT';
export const ADD_TOKEN_TO_ACCOUNT = 'ADD_TOKEN_TO_ACCOUNT';
export const WALLET_SELECT_ACCOUNT = 'WALLET_SELECT_ACCOUNT';
export const WALLET_SELECT_BLOCKCHAIN = 'WALLET_SELECT_BLOCKCHAIN';
export const SELECT_WALLET = 'SELECT_WALLET';
export const SET_WALLET_PUBLIC_KEY = 'SET_WALLET_PUBLIC_KEY';

// action creators
export const addWallet = (walletData: IWalletState) => {
    return {
        type: WALLET_ADD,
        data: walletData
    };
};

export const setSelectedWallet = (walletId: string) => {
    return {
        type: SELECT_WALLET,
        data: walletId
    };
};

export const setSelectedBlockchain = (blockchain: Blockchain) => (
    dispatch: Dispatch<IAction<any>>,
    getState: () => IReduxState
) => {
    const state = getState();
    const wallet = getSelectedWallet(state);
    if (wallet === undefined) {
        return;
    }
    dispatch({
        type: WALLET_SELECT_BLOCKCHAIN,
        data: {
            walletId: wallet.id,
            blockchain
        }
    });

    const selectedAccount = getSelectedAccount(getState());
    if (selectedAccount) {
        getBalance(
            selectedAccount.blockchain,
            selectedAccount.address,
            undefined,
            true
        )(dispatch, getState);
        const chainId = getChainId(state, selectedAccount.blockchain);
        if (selectedAccount.tokens && selectedAccount.tokens[chainId] === undefined) {
            generateTokensForChainId(blockchain, chainId)(dispatch, getState);
        }
    } else {
        // there are no accounts - lets generate some
    }
};

export const setSelectedAccount = (account: IAccountState) => async (
    dispatch: Dispatch<IAction<any>>,
    getState: () => IReduxState
) => {
    const state = getState();
    const wallet = getSelectedWallet(state);

    if (wallet === undefined) {
        return;
    }

    dispatch({
        type: WALLET_SELECT_ACCOUNT,
        data: {
            walletId: wallet.id,
            blockchain: account.blockchain,
            index: account.index
        }
    });
};

export const addAccount = (walletId: string, blockchain: Blockchain, account: IAccountState) => {
    return {
        type: ACCOUNT_ADD,
        data: { walletId, account, blockchain }
    };
};

export const removeAccount = (walletId: string, blockchain: Blockchain, account: IAccountState) => {
    return {
        type: ACCOUNT_REMOVE,
        data: { walletId, account, blockchain }
    };
};

export const createHWWallet = (
    // deviceId: string,
    deviceVendor: HWVendor,
    deviceModel: HWModel,
    connectionType: HWConnection,
    blockchain: Blockchain
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    try {
        const walletId: string = uuidv4();

        const accountsAndDeviceId = await LedgerConnect.getAccountsAndDeviceId(
            blockchain,
            deviceModel,
            connectionType
        );

        const deviceId = accountsAndDeviceId.deviceId;
        accountsAndDeviceId.accounts[0].selected = true;

        const accounts = accountsAndDeviceId.accounts.map(v => {
            return { ...v, tokens: generateTokensConfig(blockchain) };
        });

        const wallet: IWallet = await HWWalletFactory.get(
            deviceVendor,
            deviceModel,
            deviceId,
            connectionType
        );
        const walletCredentials = await wallet.getWalletCredentials();

        const walletData: IWalletState = {
            id: walletId,
            walletPublicKey: undefined,
            selected: false,
            selectedBlockchain: blockchain,
            hwOptions: {
                deviceId,
                deviceVendor,
                deviceModel,
                connectionType
            },
            name: `Wallet ${Object.keys(getState().wallets).length + 1}`,
            type: WalletType.HW,
            accounts
        };

        if (walletCredentials) {
            try {
                await setWalletCredentialsKey(
                    walletCredentials.publicKey,
                    walletCredentials.privateKey
                );
                walletData.walletPublicKey = walletCredentials.publicKey;
            } catch {
                // already handled the error
            }
        }

        dispatch(addWallet(walletData));

        LedgerConnect.walletCreated(walletId);

        dispatch(setSelectedWallet(walletId));

        NavigationService.navigate('MainNavigation', {});
        NavigationService.navigate('Dashboard', {});

        dispatch(setDisplayPasswordModal(true));
        startNotificationsHandlers()(dispatch, getState);
    } catch (e) {
        dispatch(setDisplayPasswordModal(true));

        SentryCaptureException(new Error(JSON.stringify(e)));
        throw new Error(e);
    }
};

export const createHDWallet = (mnemonic: string, password: string, callback?: () => any) => async (
    dispatch: Dispatch<IAction<any>>,
    getState: () => IReduxState
) => {
    await LoadingModal.open();

    // TODO: check here and find a solution to fix
    await delay(0);

    try {
        const wallet = new HDWallet(mnemonic);

        // generate initial accounts for each blockchain
        Promise.all([
            wallet.getAccounts(Blockchain.ZILLIQA, AccountType.DEFAULT, 0),
            wallet.getAccounts(Blockchain.ZILLIQA, AccountType.DEFAULT, 1),
            wallet.getAccounts(Blockchain.ZILLIQA, AccountType.DEFAULT, 2),
            wallet.getAccounts(Blockchain.ZILLIQA, AccountType.DEFAULT, 3),
            wallet.getAccounts(Blockchain.ZILLIQA, AccountType.DEFAULT, 4),
            wallet.getAccounts(Blockchain.ETHEREUM, AccountType.DEFAULT, 0),
            wallet.getAccounts(Blockchain.ETHEREUM, AccountType.DEFAULT, 1),
            wallet.getAccounts(Blockchain.ETHEREUM, AccountType.DEFAULT, 2),
            wallet.getAccounts(Blockchain.ETHEREUM, AccountType.DEFAULT, 3),
            wallet.getAccounts(Blockchain.ETHEREUM, AccountType.DEFAULT, 4),
            wallet.getAccounts(Blockchain.SOLANA, AccountType.ROOT, -1),
            wallet.getAccounts(Blockchain.SOLANA, AccountType.DEFAULT, 0),
            wallet.getAccounts(Blockchain.SOLANA, AccountType.DEFAULT, 1),
            wallet.getAccounts(Blockchain.SOLANA, AccountType.DEFAULT, 2),
            wallet.getAccounts(Blockchain.SOLANA, AccountType.DEFAULT, 3),
            wallet.getAccounts(Blockchain.CELO, AccountType.DEFAULT, 0),
            wallet.getAccounts(Blockchain.CELO, AccountType.DEFAULT, 1),
            wallet.getAccounts(Blockchain.CELO, AccountType.DEFAULT, 2),
            wallet.getAccounts(Blockchain.CELO, AccountType.DEFAULT, 3),
            wallet.getAccounts(Blockchain.CELO, AccountType.DEFAULT, 4),
            wallet.getAccounts(Blockchain.COSMOS, AccountType.DEFAULT, 0),
            wallet.getAccounts(Blockchain.COSMOS, AccountType.DEFAULT, 1),
            wallet.getAccounts(Blockchain.COSMOS, AccountType.DEFAULT, 2),
            wallet.getAccounts(Blockchain.COSMOS, AccountType.DEFAULT, 3),
            wallet.getAccounts(Blockchain.COSMOS, AccountType.DEFAULT, 4),
            wallet.getAccounts(Blockchain.NEAR, AccountType.DEFAULT, 1)
        ]).then(async data => {
            data[0][0].selected = true; // first zil account
            //   data[5][0].selected = true; // first eth account

            const walletId = uuidv4();
            const accounts: IAccountState[] = data.reduce((out, acc) => out.concat(acc), []);

            const walletCredentials = await wallet.getWalletCredentials();

            const walletData: IWalletState = {
                id: walletId,
                walletPublicKey: undefined,
                selected: false,
                selectedBlockchain: Blockchain.ZILLIQA, // by default the first blockchain is selected
                name: `Wallet ${Object.keys(getState().wallets).length + 1}`,
                type: WalletType.HD,
                accounts
            };

            if (walletCredentials) {
                try {
                    await setWalletCredentialsKey(
                        walletCredentials.publicKey,
                        walletCredentials.privateKey
                    );
                    walletData.walletPublicKey = walletCredentials.publicKey;
                } catch {
                    // already handled the error
                }
            }

            dispatch(addWallet(walletData));

            const encryptionKey = await getEncryptionKey(password);
            await storeEncrypted(mnemonic, walletId, encryptionKey);

            dispatch(setSelectedWallet(walletId));
            callback && callback();
            await LoadingModal.close();

            startNotificationsHandlers()(dispatch, getState);
        });
    } catch (err) {
        SentryCaptureException(new Error(JSON.stringify(err)));

        // TODO best way to handle this?
        await LoadingModal.close();
    }
};

// will check balance for a coin or all coins if needed
export const getBalance = (
    blockchain: Blockchain,
    address: string,
    token: string = undefined,
    force: boolean = false
) => async (dispatch, getState: () => IReduxState) => {
    const state = getState();
    const wallet = getSelectedWallet(state);
    const chainId = getChainId(state, blockchain);
    if (wallet === undefined) {
        return;
    }
    const account = wallet.accounts.filter(
        acc => acc.address === address && acc.blockchain === blockchain
    )[0];

    if (token) {
        const isTokenActive = account?.tokens[chainId][token]?.active === true;

        // get balance only for active tokens
        if (isTokenActive) {
            const balanceInProgress = account?.tokens[chainId][token]?.balance?.inProgress;
            const balanceTimestamp = account?.tokens[chainId][token]?.balance?.timestamp || 0;

            if (force || (!balanceInProgress && balanceTimestamp + 10 * 3600 < Date.now())) {
                const data = {
                    walletId: wallet.id,
                    address,
                    token,
                    blockchain,
                    chainId
                };

                dispatch({
                    type: ACCOUNT_GET_BALANCE,
                    data,
                    inProgress: true
                });
                try {
                    const tokenConfig = getTokenConfig(account.blockchain, token);
                    const client = getBlockchain(blockchain).getClient(chainId);

                    let balance;
                    switch (tokenConfig.type) {
                        case TokenType.NATIVE: {
                            balance = await client.getBalance(address);
                            break;
                        }
                        default:
                            if (client.tokens[tokenConfig.type]) {
                                balance = await client.tokens[tokenConfig.type].getBalance(
                                    tokenConfig.contractAddress,
                                    address
                                );
                            } else {
                                throw new Error(
                                    `Token Type (${tokenConfig.type}) not handled for blockchain ${blockchain}.`
                                );
                            }
                    }

                    dispatch({
                        type: ACCOUNT_GET_BALANCE,
                        data: {
                            ...data,
                            balance
                        }
                    });
                } catch (error) {
                    dispatch({
                        type: ACCOUNT_GET_BALANCE,
                        data,
                        error
                    });
                }
            }
        }
    } else {
        // call get balance for all tokens
        Object.keys(account.tokens[chainId] || {}).map(tokenSymbol => {
            const isTokenActive = account?.tokens[chainId][tokenSymbol]?.active === true;
            if (isTokenActive) {
                // get balance only for active tokens
                getBalance(blockchain, address, tokenSymbol, force)(dispatch, getState);
            }
        });
    }
};

export const updateTransactionFromBlockchain = (
    transactionHash: string,
    blockchain: Blockchain,
    chainId: ChainIdType,
    broadcastedOnBlock: number,
    navigateToTransaction: boolean = false
) => async (dispatch, getState: () => IReduxState) => {
    const state = getState();
    const blockchainInstance = getBlockchain(blockchain);
    const client = blockchainInstance.getClient(chainId);
    const selectedAccount = getSelectedAccount(state);

    let transaction;

    try {
        const currentBlock = await client.getCurrentBlock();
        const txStatus = await client.utils.getTransactionStatus(transactionHash, {
            broadcastedOnBlock,
            currentBlockNumber: currentBlock.number,
            address: selectedAccount?.address
        });

        const response = getWalletAndTransactionForHash(state, transactionHash);
        if (response) {
            transaction = {
                ...response.transaction,
                status: txStatus
            };
            dispatch({
                type: TRANSACTION_UPSERT,
                data: {
                    walletId: response.walletId,
                    transaction
                }
            });
        }
    } catch (error) {
        SentryCaptureException(new Error(JSON.stringify(error)));
        return;
    }

    // search for wallets/accounts affected by this transaction
    const receivingAddress =
        transaction.token.symbol === blockchainInstance.config.coin
            ? transaction.toAddress
            : transaction.data?.params[0];

    const wallets = getWalletWithAddress(
        state,
        [transaction.address.toLowerCase(), receivingAddress?.toLowerCase()],
        blockchain
    );

    if (wallets) {
        wallets.forEach(wlt => {
            dispatch({
                type: TRANSACTION_UPSERT,
                data: {
                    walletId: wlt.id,
                    transaction
                }
            });
        });

        // select notification wallet and account
        // if two wallets (transferring between own wallets) select the receiving wallet
        const wallet =
            wallets.length > 1
                ? wallets.find(loopWallet =>
                      loopWallet.accounts.some(
                          account =>
                              account.address.toLowerCase() === receivingAddress?.toLowerCase()
                      )
                  )
                : wallets[0];

        let transactionAccount;
        if (wallet) {
            transactionAccount =
                wallet.accounts.find(
                    account => account.address.toLowerCase() === receivingAddress?.toLowerCase()
                ) ||
                wallet.accounts.find(
                    account => account.address.toLowerCase() === transaction.address.toLowerCase()
                );

            // update balance
            getBalance(
                blockchain,
                transactionAccount.address,
                transaction.token.symbol,
                true
            )(dispatch, getState);
        }

        if (navigateToTransaction) {
            dispatch(setSelectedWallet(wallet.id));
            NavigationService.navigate('TransactionDetails', {
                transaction,
                accountIndex: transactionAccount.index,
                blockchain
            });
        }
    }

    await LoadingModal.close();
};

export const signMessage = (
    walletPublicKey: string,
    blockchain: Blockchain,
    address: string,
    message: string
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    try {
        const state = getState();

        const appWallet = getWalletByPubKey(state, walletPublicKey);

        if (!appWallet) {
            throw new Error('GENERIC_ERROR_MSG_SIGN');
        }

        const account = appWallet.accounts.find(
            acc => acc.blockchain === blockchain && acc.address === address
        );

        if (!account) {
            throw new Error('GENERIC_ERROR_MSG_SIGN');
        }

        let password = '';

        if (appWallet.type === WalletType.HD) {
            password = await PasswordModal.getPassword(
                translate('Password.pinTitleUnlock'),
                translate('Password.subtitleSignMessage'),
                { sensitive: true, showCloseButton: true }
            );
            await LoadingModal.open({
                type: TransactionMessageType.INFO,
                text: TransactionMessageText.SIGNING
            });
        }

        const wallet: {
            signMessage: (
                blockchain: Blockchain,
                accountIndex: number,
                accountType: AccountType,
                message: string
            ) => Promise<any>;
        } =
            appWallet.type === WalletType.HW
                ? LedgerConnect
                : await WalletFactory.get(appWallet.id, appWallet.type, {
                      pass: password,
                      deviceVendor: appWallet.hwOptions?.deviceVendor,
                      deviceModel: appWallet.hwOptions?.deviceModel,
                      deviceId: appWallet.hwOptions?.deviceId,
                      connectionType: appWallet.hwOptions?.connectionType
                  }); // encrypted string: pass)

        const signedMessage = await wallet.signMessage(
            account.blockchain,
            account.index,
            account.type,
            message
        );

        if (signedMessage) {
            await LoadingModal.close();
            dispatch(closeTransactionRequest());
            return;
        } else {
            throw new Error('GENERIC_ERROR_MSG_SIGN');
        }
    } catch (errorMessage) {
        await LoadingModal.close();
        Dialog.info(
            translate('LoadingModal.messageSignFailed'),
            translate('LoadingModal.GENERIC_ERROR_MSG_SIGN')
        );
    }
};

export const removeTransaction = (transactionHash: string) => async (
    dispatch,
    getState: () => IReduxState
) => {
    const state = getState();

    const selectedWallet: IWalletState = getSelectedWallet(state);

    dispatch({
        type: TRANSACTION_REMOVE,
        data: {
            walletId: selectedWallet.id,
            transaction: {
                id: transactionHash
            }
        }
    });
};

export const sendTransferTransaction = (
    account: IAccountState,
    toAddress: string,
    amount: string,
    token: string,
    feeOptions: IFeeOptions,
    navigation: NavigationScreenProp<NavigationState>,
    extraFields: ITransactionExtraFields,
    goBack: boolean = true,
    sendResponse?: { requestId: string }
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    const state = getState();
    const chainId = getChainId(state, account.blockchain);
    const blockchainInstance = getBlockchain(account.blockchain);
    const tokenConfig = getTokenConfig(account.blockchain, token);

    try {
        const tx = await blockchainInstance.transaction.buildTransferTransaction({
            chainId,
            account,
            toAddress,
            amount: blockchainInstance.account.amountToStd(amount, tokenConfig.decimals).toFixed(),
            token,
            feeOptions: {
                gasPrice: feeOptions.gasPrice?.toString(),
                maxFeePerGas: feeOptions.maxFeePerGas?.toString(),
                maxPriorityFeePerGas: feeOptions.maxPriorityFeePerGas?.toString(),
                gasLimit: feeOptions.gasLimit.toString()
            },
            extraFields
        });

        sendTransaction(tx, {
            sendResponse,
            goBack,
            navigation
        })(dispatch, getState);
    } catch (res) {
        const errorMessage = res?.error || 'GENERIC_ERROR';

        SentryAddBreadcrumb({
            message: JSON.stringify({
                error: res
            })
        });

        SentryCaptureException(
            new Error(
                `Failed to send transfer transaction on ${account.blockchain}, ${res?.message}, ${res?.code}`
            )
        );

        const message =
            translate('LoadingModal.' + errorMessage, {
                app: account.blockchain,
                coin: res?.coin || blockchainInstance.config.coin
            }) || translate('LoadingModal.GENERIC_ERROR');

        Dialog.info(translate('LoadingModal.txFailed'), message);
    }
};

export const sendTransaction = (
    tx: IBlockchainTransaction,
    options: {
        navigation?: NavigationScreenProp<NavigationState>;
        goBack?: boolean;
        sendResponse?: { requestId: string };
    }
) => async (dispatch: Dispatch<IAction<any>>, getState: () => IReduxState) => {
    const state = getState();
    const account = getAccounts(state, tx.blockchain)?.find(acc => acc.address === tx.address);
    const chainId = getChainId(state, account.blockchain);
    const blockchainInstance = getBlockchain(account.blockchain);

    const appWallet = getSelectedWallet(state);
    let password = '';

    try {
        if (appWallet.type === WalletType.HD) {
            password = await PasswordModal.getPassword(
                translate('Password.pinTitleUnlock'),
                translate('Password.subtitleSignTransaction'),
                { sensitive: true, showCloseButton: true }
            );
            await LoadingModal.open({
                type: TransactionMessageType.INFO,
                text: TransactionMessageText.SIGNING
            });
        }

        const wallet: {
            sign: (
                blockchain: Blockchain,
                accountIndex: number,
                transaction: IBlockchainTransaction,
                accountType: AccountType
            ) => Promise<any>;
        } =
            appWallet.type === WalletType.HW
                ? LedgerConnect
                : await WalletFactory.get(appWallet.id, appWallet.type, {
                      pass: password,
                      deviceVendor: appWallet.hwOptions?.deviceVendor,
                      deviceModel: appWallet.hwOptions?.deviceModel,
                      deviceId: appWallet.hwOptions?.deviceId,
                      connectionType: appWallet.hwOptions?.connectionType
                  }); // encrypted string: pass)

        const client = blockchainInstance.getClient(chainId);
        let nonce = await client.getNonce(account.address, account.publicKey);
        const nrPendingTransactions = getNrPendingTransactions(state);
        tx = {
            ...tx,
            nonce: nonce + nrPendingTransactions
        };

        if (isFeatureActive(RemoteFeature.IMPROVED_NONCE)) {
            // Adjust nonce
            const currentBlockNumber = await client.getCurrentBlock().then(res => res.number);
            // getting all outbound tx for current account
            const outboundTransactions = getSelectedAccountTransactions(getState()).filter(
                t => t.address === account.address
            );

            // checking if there are transactions with same nonce
            let outTx: IBlockchainTransaction = outboundTransactions.find(t => t.nonce === nonce);

            while (outTx) {
                // found a tx with the same nonce
                const txStatus = await client.utils.getTransactionStatus(outTx.id, {
                    broadcastedOnBlock: outTx.broadcastedOnBlock,
                    currentBlockNumber
                });

                // if the status oif the tx is DROPPED we can reuse the nonce
                if (txStatus === TransactionStatus.DROPPED) {
                    break;
                } else {
                    // the transactions is not dropped, so it's on the chain, we need to increase the nonce and check again
                    nonce++;
                    outTx = outboundTransactions.find(t => t.nonce === nonce);
                }
            }
            // updateing the nonce
            tx.nonce = nonce;
        }

        const transaction = await wallet.sign(account.blockchain, account.index, tx, account.type);

        // if (appWallet.type === WalletType.HD) {
        await LoadingModal.showMessage({
            text: TransactionMessageText.BROADCASTING,
            type: TransactionMessageType.INFO
        });
        // }

        const txRes = await client.sendTransaction(transaction);
        const txHash = txRes?.txHash;
        if (txHash) {
            dispatch({
                type: TRANSACTION_PUBLISHED,
                data: {
                    hash: txHash,
                    tx,
                    walletId: appWallet.id
                }
            });
            await LoadingModal.close();
            dispatch(closeTransactionRequest());
            NavigationService.navigate('Token', {
                activeTab: blockchainInstance.config.ui?.token?.labels?.tabTransactions
            });
            return;
        } else {
            SentryAddBreadcrumb({
                message: JSON.stringify({
                    transactions: transaction,
                    message: 'No txHash'
                })
            });

            throw new Error('GENERIC_ERROR');
        }
    } catch (res) {
        SentryAddBreadcrumb({
            message: JSON.stringify({
                error: res
            })
        });

        SentryCaptureException(
            new Error(
                `Failed to broadcast transaction on ${account.blockchain}, ${res?.message}, ${res?.code}`
            )
        );

        const errorMessage = res?.error || 'GENERIC_ERROR';

        if (appWallet.type === WalletType.HD) {
            await LoadingModal.close();
        } else {
            await LedgerConnect.close();
        }

        const message =
            translate('LoadingModal.' + errorMessage, {
                app: account.blockchain,
                address: formatAddress(tx.toAddress, account.blockchain),
                coin: blockchainInstance.config.coin
            }) || translate('LoadingModal.GENERIC_ERROR');

        Dialog.info(translate('LoadingModal.txFailed'), message);
    }
};

export const deleteWallet = (walletId: string) => async (
    dispatch: Dispatch<IAction<any>>,
    getState: () => IReduxState
) => {
    const state = getState();
    if (getSelectedWallet(state).id === walletId) {
        const nextWallet = Object.values(state.wallets).find(wallet => wallet.id !== walletId);
        if (nextWallet) {
            dispatch(setSelectedWallet(nextWallet.id));
        } else {
            // Clear Keychain Storage and reset Biometric Settings
            clearPinCode();
            await clearEncryptionKey();
            if (state.preferences.biometricActive) {
                // Disable biometric auth
                dispatch(toggleBiometricAuth());
            }
        }
    }
    dispatch({
        type: WALLET_DELETE,
        data: walletId
    });
    deleteFromStorage(walletId);
};

export const updateWalletName = (walletId: string, newName: string) => {
    return {
        type: WALLET_CHANGE_NAME,
        data: { walletId, newName }
    };
};

export const toggleTokenActive = (
    account: IAccountState,
    token: ITokenState,
    chainId: ChainIdType
) => (dispatch: Dispatch<any>, getState: () => IReduxState) => {
    const selectedWallet: IWalletState = getSelectedWallet(getState());
    dispatch({
        type: TOGGLE_TOKEN_ACTIVE,
        data: { walletId: selectedWallet.id, account, token, chainId }
    });
};

export const updateTokenOrder = (
    account: IAccountState,
    tokens: ITokenState[],
    chainId: ChainIdType
) => (dispatch: Dispatch<any>, getState: () => IReduxState) => {
    const selectedWallet: IWalletState = getSelectedWallet(getState());
    dispatch({
        type: UPDATE_TOKEN_ORDER,
        data: { walletId: selectedWallet.id, account, tokens, chainId }
    });
};

export const removeTokenFromAccount = (
    account: IAccountState,
    token: ITokenState,
    chainId: ChainIdType
) => (dispatch: Dispatch<any>, getState: () => IReduxState) => {
    const selectedWallet: IWalletState = getSelectedWallet(getState());
    dispatch({
        type: REMOVE_TOKEN_FROM_ACCOUNT,
        data: { walletId: selectedWallet.id, account, token, chainId }
    });
};

export const generateTokensForChainId = (blockchain: Blockchain, chainId: ChainIdType) => (
    dispatch: Dispatch<any>,
    getState: () => IReduxState
) => {
    const tokens = getBlockchain(blockchain).config.tokens;
    const accounts = getAccounts(getState(), blockchain);

    accounts.map(account => {
        Object.keys(tokens).map(symbol => {
            addTokenToAccount(
                account,
                generateAccountTokenState(getTokenConfig(blockchain, symbol), account, chainId),
                chainId
            )(dispatch, getState);
        });
    });
};

export const addTokenToAccount = (
    account: IAccountState,
    token: ITokenState,
    chainId?: ChainIdType
) => (dispatch: Dispatch<any>, getState: () => IReduxState) => {
    const selectedWallet: IWalletState = getSelectedWallet(getState());
    const chainIdValue = chainId ? chainId : getChainId(getState(), account.blockchain);
    dispatch({
        type: ADD_TOKEN_TO_ACCOUNT,
        data: { walletId: selectedWallet.id, account, token, chainId: chainIdValue }
    });
    getBalance(account.blockchain, account.address, undefined, true)(dispatch, getState);
};

export const deleteAccount = (
    blockchain: Blockchain,
    accountId: string,
    accountIndex: number,
    accountType: AccountType,
    password: string
) => async (dispatch: Dispatch<any>, getState: () => IReduxState) => {
    const state = getState();
    const selectedWallet: IWalletState = getSelectedWallet(state);

    const hdWallet = await WalletFactory.get(selectedWallet.id, selectedWallet.type, {
        pass: password
    });

    const privateKey = hdWallet.getPrivateKey(blockchain, accountIndex, accountType);

    const chainId = getChainId(state, blockchain);
    const client = getBlockchain(blockchain).getClient(chainId) as NearClient;

    await client.deleteNearAccount(accountId, NEAR_TLD[chainId], privateKey);
};

export const createNearAccount = (name: string, extension: string, password: string) => async (
    dispatch: Dispatch<any>,
    getState: () => IReduxState
) => {
    const state = getState();
    const blockchain = Blockchain.NEAR;

    dispatch(openProcessTransactions());

    const selectedWallet: IWalletState = getSelectedWallet(state);
    const hdWallet: IWallet = await WalletFactory.get(selectedWallet.id, selectedWallet.type, {
        pass: password
    });
    const chainId = getChainId(state, blockchain);

    const blockchainInstance = getBlockchain(blockchain);
    const client = blockchainInstance.getClient(chainId) as NearClient;
    const transactionInstance = blockchainInstance.transaction as NearTransactionUtils;

    const selectedAccount = getSelectedAccount(state);
    const account = generateAccountConfig(blockchain);
    account.chainId = chainId;
    account.address = selectedAccount.address; // used to transfer tokens for creating account
    account.publicKey = selectedAccount.publicKey;

    const txs = [];

    const viewKeyRes = await client.viewAccessKey(account.publicKey, NEAR_TLD[chainId]);

    if (viewKeyRes && viewKeyRes.result && viewKeyRes.result.permission) {
        // key already exists
        // continue
    } else {
        const txDropLink = await transactionInstance.buildDropLinkTransaction({
            account,
            newPublicKey: account.publicKey,
            tokenSymbol: blockchain,
            chainId: String(chainId)
        });
        txs.push(txDropLink);
    }

    const newAccountId = `${name}.${extension}`;

    const txClaimAccount = await transactionInstance.buildClaimAccountTransaction({
        account,
        newAccountId,
        newPublicKey: account.publicKey,
        tokenSymbol: blockchain,
        chainId: String(chainId)
    });
    txs.push(txClaimAccount);

    dispatch(setProcessTransactions(cloneDeep(txs)));

    let newAccountIndex = -1;

    for (const acc of selectedWallet.accounts) {
        if (acc.blockchain === Blockchain.NEAR && acc.index >= newAccountIndex) {
            newAccountIndex = acc.index + 1;
        }
    }
    account.index = newAccountIndex === -1 ? 0 : newAccountIndex;
    account.address = newAccountId;
    account.tokens[chainId][getBlockchain(blockchain).config.coin].balance = {
        value: '0',
        inProgress: false,
        timestamp: undefined,
        error: undefined,
        available: '0',
        total: '0',
        detailed: {}
    };

    dispatch(setProcessTxCreateAccount(account));

    for (let index = 0; index < txs.length; index++) {
        try {
            const transaction = await hdWallet.sign(
                blockchain,
                account.index,
                txs[index],
                account.type
            );

            const { txHash } = await client.sendTransaction(transaction);

            if (txHash) {
                const hashPolling = await client.getTransactionStatusPolling(
                    txHash,
                    NEAR_TLD[chainId]
                );

                if (hashPolling && hashPolling === txHash) {
                    dispatch(updateProcessTransactionIdForIndex(index, txHash));
                    dispatch({
                        type: TRANSACTION_PUBLISHED,
                        data: {
                            hash: txHash,
                            tx: txs[index],
                            walletId: selectedWallet.id
                        }
                    });
                    dispatch(
                        updateProcessTransactionStatusForIndex(index, TransactionStatus.SUCCESS)
                    );
                } else {
                    handleCreateAccountError(
                        `Invalid hashPolling: ${hashPolling}, txHash: ${txHash}`,
                        newAccountId
                    );
                    dispatch(
                        updateProcessTransactionStatusForIndex(index, TransactionStatus.FAILED)
                    );
                }
            } else {
                handleCreateAccountError(`No txHash`, newAccountId);
                dispatch(updateProcessTransactionStatusForIndex(index, TransactionStatus.FAILED));
            }
        } catch (error) {
            handleCreateAccountError(JSON.stringify(error), newAccountId);

            dispatch(updateProcessTransactionStatusForIndex(index, TransactionStatus.FAILED));

            for (let i = index + 1; i < txs.length; i++) {
                dispatch(updateProcessTransactionStatusForIndex(i, TransactionStatus.DROPPED));
            }
            throw error;
        }
    }
};

const handleCreateAccountError = (errorMessage: any, newAccountId: string) => {
    SentryAddBreadcrumb({ message: JSON.stringify(errorMessage) });

    SentryCaptureException(
        new Error(
            JSON.stringify({
                errorMessage: `NEAR create account has failed, account id: ${newAccountId}`
            })
        )
    );
};

export const addPublishedTxToAccount = (
    txHash: string,
    tx: IBlockchainTransaction,
    walletId: string
) => (dispatch: Dispatch<any>, getState: () => IReduxState) => {
    dispatch({
        type: TRANSACTION_PUBLISHED,
        data: {
            hash: txHash,
            tx,
            walletId
        }
    });
};

export const setWalletPublicKey = (walletId: string, walletPublicKey: string) => (
    dispatch: Dispatch<any>,
    getState: () => IReduxState
) => {
    dispatch({
        type: SET_WALLET_PUBLIC_KEY,
        data: { walletId, walletPublicKey }
    });
};

export const setWalletsCredentials = (password: string) => async (
    dispatch: Dispatch<any>,
    getState: () => IReduxState
) => {
    const state = getState();

    for (const wallet of Object.values(state.wallets)) {
        try {
            if (wallet.walletPublicKey) {
                // credentials have been already set
                return;
            }

            let walletCredentials: { publicKey: string; privateKey: string };

            // Generate wallet credentials
            switch (wallet.type) {
                case WalletType.HD:
                    const storageHDWallet = await HDWallet.loadFromStorage(wallet.id, password);
                    walletCredentials = await storageHDWallet.getWalletCredentials();
                    break;

                case WalletType.HW:
                    const walletHW: IWallet = await HWWalletFactory.get(
                        wallet.hwOptions.deviceVendor,
                        wallet.hwOptions.deviceModel,
                        wallet.hwOptions.deviceId,
                        wallet.hwOptions.connectionType
                    );
                    walletCredentials = await walletHW.getWalletCredentials();
                    break;

                default:
                    break;
            }

            if (walletCredentials?.publicKey) {
                setWalletPublicKey(wallet.id, walletCredentials.publicKey)(dispatch, getState);

                const keychainWalletCredentials = await getWalletCredentialsKey(
                    walletCredentials.publicKey
                );

                if (!keychainWalletCredentials) {
                    await setWalletCredentialsKey(
                        walletCredentials.publicKey,
                        walletCredentials.privateKey
                    );
                }
            } else {
                throw new Error(
                    JSON.stringify({
                        walletPublicKey: wallet?.walletPublicKey,
                        walletType: wallet.type,
                        walletHwOptions: wallet?.hwOptions,
                        errorMessage: 'Undefined walletCredentials'
                    })
                );
            }
        } catch (err) {
            throw new Error(err);
        }
    }
};

export const getWalletAndAccountNameByAddress = (address: string) => (
    dispatch: Dispatch<any>,
    getState: () => IReduxState
): { walletName: string; accountName: string } => {
    const state = getState();

    for (const wallet of Object.values(state.wallets)) {
        for (const account of wallet.accounts) {
            if (account.address?.toLocaleLowerCase() === address?.toLocaleLowerCase()) {
                return {
                    walletName: wallet.name,
                    accountName: account.name || `Account ${account.index + 1}`
                };
            }
        }
    }

    return undefined;
};

export const updateTransactionsStatus = (transactions: []) => (
    dispatch: Dispatch<any>,
    getState: () => IReduxState
) => {
    const selectedWallet: IWalletState = getSelectedWallet(getState());

    transactions.map((objectx: any) => {
        const objectLog: any = objectx.log;
        if (objectLog) {
            for (const value of objectLog) {
                const id: any = value.ID;
                if (selectedWallet.transactions[id]) {
                    dispatch({
                        type: TRANSACTION_UPSERT,
                        data: {
                            walletId: selectedWallet.id,
                            transaction: {
                                id,
                                status:
                                    value.success === true
                                        ? TransactionStatus.SUCCESS
                                        : TransactionStatus.FAILED
                            }
                        }
                    });
                }
            }
        }
    });
};

export const generateAccounts = (password: string) => async (
    dispatch: Dispatch<any>,
    getState: () => IReduxState
) => {
    const state = getState();

    for (const wallet of Object.values(state.wallets)) {
        try {
            if (wallet.type === WalletType.HD) {
                const storageHDWallet = await HDWallet.loadFromStorage(wallet.id, password);

                const accounts = getAccounts(state, Blockchain.SOLANA);
                if (accounts.length < 5) {
                    const data = [];

                    if (accounts.length === 0) {
                        data.push(
                            storageHDWallet.getAccounts(Blockchain.SOLANA, AccountType.ROOT, -1)
                        );

                        for (let index = 0; index <= 3; index++)
                            data.push(
                                storageHDWallet.getAccounts(
                                    Blockchain.SOLANA,
                                    AccountType.DEFAULT,
                                    index
                                )
                            );
                    } else {
                        for (let index = accounts.length - 1; index <= 3; index++)
                            data.push(
                                storageHDWallet.getAccounts(
                                    Blockchain.SOLANA,
                                    AccountType.DEFAULT,
                                    index
                                )
                            );
                    }

                    Promise.all(data).then(response => {
                        response.map(value => {
                            dispatch(addAccount(wallet.id, Blockchain.SOLANA, value[0]));
                        });
                    });
                }
            }
        } catch (err) {
            throw new Error(err);
        }
    }
};

'''
'''--- src/redux/wallets/reducer.ts ---
import { IAction } from '../types';
import { IAccountState, IWalletsState, ITokenState, ITokenStakeBalance } from './state';
import {
    WALLET_ADD,
    WALLET_DELETE,
    ACCOUNT_GET_BALANCE,
    TRANSACTION_PUBLISHED,
    TRANSACTION_REMOVE,
    ACCOUNT_ADD,
    ACCOUNT_REMOVE,
    WALLET_CHANGE_NAME,
    TOGGLE_TOKEN_ACTIVE,
    UPDATE_TOKEN_ORDER,
    REMOVE_TOKEN_FROM_ACCOUNT,
    ADD_TOKEN_TO_ACCOUNT,
    WALLET_SELECT_ACCOUNT,
    WALLET_SELECT_BLOCKCHAIN,
    SELECT_WALLET,
    TRANSACTION_UPSERT,
    SET_WALLET_PUBLIC_KEY
} from './actions';
import { REHYDRATE } from 'redux-persist';
import BigNumber from 'bignumber.js';
import { IBlockchainTransaction, ChainIdType } from '../../core/blockchain/types';
import { RESET_ALL_DATA, EXTENSION_UPDATE_STATE } from '../app/actions';

const intialState: IWalletsState = {};

const newBalance = (oldBalance: any, action: any): ITokenStakeBalance => ({
    // TODO migration and change value to actual avaialble and total values
    value: action.data.balance
        ? new BigNumber(action.data.balance.available).toFixed()
        : new BigNumber(oldBalance?.total).toFixed(),
    inProgress: action.inProgress !== undefined ? action.inProgress : false,
    timestamp: action.data.balance ? new Date() : oldBalance?.timestamp,
    error: action.error !== undefined ? action.error : undefined,
    available: action.data.balance
        ? new BigNumber(action.data.balance.available).toFixed()
        : new BigNumber(oldBalance?.available).toFixed(),
    total: action.data.balance
        ? new BigNumber(action.data.balance.total).toFixed()
        : new BigNumber(oldBalance?.total).toFixed(),
    detailed: action.data.balance ? action.data.balance.detailed || {} : oldBalance?.detailed || {},
    unstaked: action.data?.balance?.unstaked
        ? new BigNumber(action.data.balance.unstaked).toFixed()
        : undefined
});

export default (state: IWalletsState = intialState, action: IAction) => {
    switch (action.type) {
        case REHYDRATE:
            return action.payload
                ? Object.keys(action.payload.wallets).reduce((out: IWalletsState, id: string) => {
                      out[id] = action.payload.wallets[id];

                      out[id].accounts = out[id].accounts.map((account: IAccountState) => ({
                          ...account,

                          // check here = NaN

                          tokens: Object.keys(account.tokens).reduce(
                              (tokenOut: any, tokenId: string) => {
                                  tokenOut[tokenId] = account.tokens[tokenId];
                                  tokenOut[tokenId].balance
                                      ? (tokenOut[tokenId].balance.value = new BigNumber(
                                            tokenOut[tokenId].balance.value || 0
                                        ))
                                      : null;
                                  return tokenOut;
                              },
                              {}
                          )
                      }));

                      out[id].transactions =
                          out[id]?.transactions &&
                          Object.keys(out[id].transactions).reduce((txOut: any, txId: string) => {
                              txOut[txId] = out[id].transactions[txId];
                              txOut[txId].amount = new BigNumber(txOut[txId].amount || 0);
                              return txOut;
                          }, {});

                      return out;
                  }, {})
                : state;

        case WALLET_ADD:
            return {
                ...state,
                [action.data.id]: action.data
            };
        case SELECT_WALLET:
            return Object.keys(state).reduce((out: IWalletsState, id: string) => {
                out[id] = state[id];
                out[id].id === action.data ? (out[id].selected = true) : (out[id].selected = false);
                return out;
            }, {});
        case WALLET_SELECT_BLOCKCHAIN:
            return {
                ...state,
                [action.data.walletId]: {
                    ...state[action.data.walletId],
                    selectedBlockchain: action.data.blockchain
                }
            };
        case WALLET_DELETE:
            delete state[action.data];
            return { ...state };

        case WALLET_CHANGE_NAME:
            return {
                ...state,
                [action.data.walletId]: {
                    ...state[action.data.walletId],
                    name: action.data.newName
                }
            };
        case WALLET_SELECT_ACCOUNT: {
            state = { ...state };

            return {
                ...state,
                [action.data.walletId]: {
                    ...state[action.data.walletId],
                    accounts: state[action.data.walletId].accounts.map(account => {
                        if (account.blockchain === action.data.blockchain) {
                            account.selected = account.index === action.data.index;
                        }

                        return account;
                    })
                }
            };
        }

        case ACCOUNT_GET_BALANCE: {
            return {
                ...state,
                [action.data.walletId]: {
                    ...state[action.data.walletId],
                    accounts: state[action.data.walletId].accounts.map(account => {
                        if (
                            account.address === action.data.address &&
                            account.blockchain === action.data.blockchain
                        ) {
                            account.tokens[action.data.chainId][
                                action.data.token
                            ].balance = newBalance(
                                ((account?.tokens || {})[action.data.chainId] || {})[
                                    action.data.token
                                ]?.balance,
                                action
                            );
                        }
                        return account;
                    })
                }
            };
        }

        case TRANSACTION_PUBLISHED:
            const transaction: IBlockchainTransaction = {
                ...action.data.tx,
                id: action.data.hash
            };

            return {
                ...state,
                [action.data.walletId]: {
                    ...state[action.data.walletId],
                    transactions: {
                        ...state[action.data.walletId].transactions,
                        [action.data.hash]: transaction
                    }
                }
            };

        case TRANSACTION_UPSERT:
            return {
                ...state,
                [action.data.walletId]: {
                    ...state[action.data.walletId],
                    transactions: {
                        ...state[action.data.walletId].transactions,
                        [action.data.transaction.id]: (state[action.data.walletId].transactions ||
                            {})[action.data.transaction.id]
                            ? {
                                  ...state[action.data.walletId].transactions[
                                      action.data.transaction.id
                                  ],
                                  status: action.data.transaction.status
                              }
                            : action.data.transaction
                    }
                }
            };

        case ACCOUNT_ADD:
            return {
                ...state,
                [action.data.walletId]: {
                    ...state[action.data.walletId],
                    accounts: [].concat(
                        state[action.data.walletId].accounts,
                        state[action.data.walletId].accounts.some(
                            account =>
                                account &&
                                account.address === action.data.account.address &&
                                account.blockchain === action.data.account.blockchain
                        )
                            ? []
                            : [action.data.account]
                    )
                }
            };

        case ACCOUNT_REMOVE:
            return {
                ...state,
                [action.data.walletId]: {
                    ...state[action.data.walletId],
                    accounts: state[action.data.walletId].accounts.filter(
                        account =>
                            !(
                                account.address === action.data.account.address &&
                                account.blockchain === action.data.account.blockchain
                            )
                    )
                }
            };

        case TOGGLE_TOKEN_ACTIVE:
            const token = action.data.token;
            token.active = !token.active;

            return {
                ...state,
                [action.data.walletId]: {
                    ...state[action.data.walletId],
                    accounts: state[action.data.walletId].accounts.map(account =>
                        account.address === action.data.account.address &&
                        account.blockchain === action.data.account.blockchain
                            ? {
                                  ...account,
                                  tokens: {
                                      ...account.tokens,
                                      [action.data.chainId]: {
                                          ...account.tokens[action.data.chainId],
                                          [action.data.token.symbol]: token
                                      }
                                  }
                              }
                            : account
                    )
                }
            };

        case UPDATE_TOKEN_ORDER:
            return {
                ...state,
                [action.data.walletId]: {
                    ...state[action.data.walletId],
                    accounts: state[action.data.walletId].accounts.map(account =>
                        account.address === action.data.account.address &&
                        account.blockchain === action.data.account.blockchain
                            ? {
                                  ...account,
                                  tokens: {
                                      ...account.tokens,
                                      [action.data.chainId]: action.data.tokens
                                  }
                              }
                            : account
                    )
                }
            };

        case REMOVE_TOKEN_FROM_ACCOUNT:
            const accountToRemoveToken = state[action.data.walletId].accounts.find(
                account =>
                    account.address === action.data.account.address &&
                    account.blockchain === action.data.account.blockchain
            );

            delete accountToRemoveToken.tokens[action.data.chainId][action.data.token.symbol];

            return {
                ...state,
                [action.data.walletId]: {
                    ...state[action.data.walletId],
                    accounts: state[action.data.walletId].accounts.map(account =>
                        account.address === action.data.account.address &&
                        account.blockchain === action.data.account.blockchain
                            ? accountToRemoveToken
                            : account
                    )
                }
            };

        case ADD_TOKEN_TO_ACCOUNT:
            const accountToAddToken = state[action.data.walletId].accounts.find(
                account =>
                    account.address === action.data.account.address &&
                    account.blockchain === action.data.account.blockchain
            );

            if (accountToAddToken.tokens[action.data.chainId]) {
                accountToAddToken.tokens[action.data.chainId][action.data.token.symbol] =
                    action.data.token;
            } else {
                accountToAddToken.tokens = {
                    ...accountToAddToken.tokens,
                    [action.data.chainId]: {
                        [action.data.token.symbol]: action.data.token
                    }
                };
            }

            return {
                ...state,
                [action.data.walletId]: {
                    ...state[action.data.walletId],
                    accounts: state[action.data.walletId].accounts.map(account =>
                        account.address === action.data.account.address &&
                        account.blockchain === action.data.account.blockchain
                            ? accountToAddToken
                            : account
                    )
                }
            };

        case RESET_ALL_DATA:
            return intialState;

        case EXTENSION_UPDATE_STATE: {
            // Keep wallet account tokens balances if already stored in redux
            const firebaseWallets = action.data.state.wallets;

            Object.keys(firebaseWallets).map((walletId: string) => {
                firebaseWallets[walletId].accounts.map(
                    (account: IAccountState, accountIndex: number) => {
                        // Accounts layer

                        Object.keys(account.tokens).map((chainId: ChainIdType) => {
                            // Chain Id layer

                            Object.keys(account.tokens[chainId]).map((symbol: string) => {
                                // Symbol layer

                                const firebaseToken: ITokenState = account.tokens[chainId][symbol];
                                const reduxAccountTokens =
                                    state[walletId] &&
                                    state[walletId].accounts[accountIndex] &&
                                    state[walletId].accounts[accountIndex].tokens;

                                if (
                                    reduxAccountTokens &&
                                    reduxAccountTokens[chainId] &&
                                    reduxAccountTokens[chainId][symbol]
                                ) {
                                    const reduxToken = reduxAccountTokens[chainId][symbol];

                                    firebaseToken.balance = reduxToken.balance;
                                }
                            });
                        });
                    }
                );

                // keep already stored transactions
                firebaseWallets[walletId].transactions = state[walletId]?.transactions || {};
            });

            return firebaseWallets;
        }

        case SET_WALLET_PUBLIC_KEY:
            return {
                ...state,
                [action.data.walletId]: {
                    ...state[action.data.walletId],
                    walletPublicKey: action.data.walletPublicKey
                }
            };

        case TRANSACTION_REMOVE:
            if (
                state[action.data.walletId] &&
                state[action.data.walletId].transactions &&
                state[action.data.walletId].transactions[action.data.transaction.id]
            ) {
                delete state[action.data.walletId].transactions[action.data.transaction.id];
            }
            return { ...state };

        default:
            break;
    }
    return state;
};

'''
'''--- src/redux/wallets/selectors.ts ---
import { IReduxState } from '../state';
import { AccountType, IAccountState, IWalletsState, IWalletState } from './state';
import { Blockchain, IBlockchainTransaction } from '../../core/blockchain/types';

import { createSelector } from 'reselect';
import { getChainId, getBlockchains } from '../preferences/selectors';
import { ITokenState } from '../wallets/state';
import { generateTokensConfig } from '../tokens/static-selectors';
import { TransactionStatus } from '../../core/wallet/types';

export const getWalletSelectedBlockchain = createSelector(
    (state: IReduxState): IWalletState => getSelectedWallet(state),
    wallet => (wallet ? wallet.selectedBlockchain : '')
);

export const getSelectedBlockchain = (state: IReduxState) => {
    return getWalletSelectedBlockchain(state) || getBlockchains(state)[0];
};

export const getSelectedWallet = createSelector(
    (state: IReduxState) => state.wallets,
    (wallets: IWalletsState) => {
        return (
            Object.values(wallets).find(wallet => wallet.selected === true) ||
            Object.values(wallets)[0]
        );
    }
);

export const getWalletByPubKey = (reduxState: IReduxState, walletPubKey: string): IWalletState =>
    createSelector(
        (state: IReduxState) => state.wallets,
        (wallets: IWalletsState) => {
            return Object.values(wallets)?.find(
                w => w.id === walletPubKey || w.walletPublicKey === walletPubKey
            );
        }
    )(reduxState);

export const getSelectedAccount = createSelector(
    (state: IReduxState): IWalletState => getSelectedWallet(state),
    (state: IReduxState): Blockchain => getSelectedBlockchain(state),
    (wallet, selectedBlockchain) => {
        if (wallet === undefined) {
            return undefined;
        }
        const accounts = wallet.accounts.filter(
            account => account.blockchain === selectedBlockchain
        );
        const acc = accounts
            ? accounts.find(
                  (account: IAccountState) =>
                      account.selected === true && account.blockchain === wallet.selectedBlockchain
              )
            : undefined;
        return acc || accounts[0];
    }
);

export const getAccountFilteredTransactions = (
    state: IReduxState,
    accountIndex: number,
    blockchain: Blockchain,
    token: ITokenState
): IBlockchainTransaction[] => {
    const selectedWallet = getSelectedWallet(state);
    const chainId = getChainId(state, blockchain);

    const account: IAccountState = selectedWallet.accounts.find(
        acc => acc.index === accountIndex && acc.blockchain === blockchain
    );
    const transactions = selectedWallet.transactions;

    const addressToLowercase = account.address.toLowerCase();

    if (transactions) {
        return Object.values(transactions)
            .filter(
                tx =>
                    (tx.address.toLowerCase() === addressToLowercase ||
                        tx.toAddress?.toLowerCase() === addressToLowercase ||
                        (tx.data?.params &&
                            tx.data?.params[0]?.toLowerCase() === addressToLowercase)) &&
                    tx.blockchain === blockchain &&
                    tx.chainId === chainId &&
                    tx.token?.symbol?.toLowerCase() === token?.symbol?.toLowerCase()
            )
            .sort(
                (tx1: IBlockchainTransaction, tx2: IBlockchainTransaction) =>
                    tx2.date?.signed - tx1.date?.signed
            );
    }
};

export const getSelectedAccountTransactions = (state: IReduxState): IBlockchainTransaction[] => {
    const selectedWallet = getSelectedWallet(state);
    const selectedAccount = getSelectedAccount(state);
    const blockchain = getSelectedBlockchain(state);
    const chainId = getChainId(state, blockchain);

    if (selectedWallet === undefined || selectedAccount === undefined || blockchain === undefined)
        return [];

    const account: IAccountState = selectedWallet.accounts.find(
        acc => acc.index === selectedAccount.index && acc.blockchain === selectedAccount.blockchain
    );

    const addressToLowercase = account.address.toLowerCase();

    const transactions = selectedWallet.transactions;
    if (transactions) {
        return Object.values(selectedWallet.transactions)
            .filter(
                tx =>
                    (tx.address.toLowerCase() === addressToLowercase ||
                        tx.toAddress?.toLowerCase() === addressToLowercase ||
                        (tx.data?.params &&
                            tx.data?.params[0]?.toLowerCase() === addressToLowercase)) &&
                    tx.blockchain === blockchain &&
                    tx.chainId === chainId
            )
            .sort(
                (tx1: IBlockchainTransaction, tx2: IBlockchainTransaction) =>
                    tx2.date?.created - tx1.date?.created
            );
    }

    return [];
};

export const getSelectedAccountTransaction = (
    state: IReduxState,
    txId: string
): IBlockchainTransaction => {
    const selectedWallet = getSelectedWallet(state);
    const selectedAccount = getSelectedAccount(state);
    const blockchain = getSelectedBlockchain(state);
    const chainId = getChainId(state, blockchain);

    if (selectedWallet === undefined || selectedAccount === undefined || blockchain === undefined)
        return undefined;

    const account: IAccountState = selectedWallet.accounts.find(
        acc => acc.index === selectedAccount.index && acc.blockchain === selectedAccount.blockchain
    );

    const addressToLowercase = account.address.toLowerCase();

    const transactions = selectedWallet.transactions;
    if (transactions) {
        return Object.values(selectedWallet.transactions).find(
            tx =>
                tx.id.toLowerCase() === txId.toLowerCase() &&
                (tx.address.toLowerCase() === addressToLowercase ||
                    tx.toAddress?.toLowerCase() === addressToLowercase ||
                    (tx.data?.params &&
                        tx.data?.params[0]?.toLowerCase() === addressToLowercase)) &&
                tx.blockchain === blockchain &&
                tx.chainId === chainId
        );
    }

    return undefined;
};

export const getAccounts = (state: IReduxState, blockchain: Blockchain): IAccountState[] => {
    const chainId = getChainId(state, blockchain);
    const accounts = getSelectedWallet(state).accounts.filter(account => {
        if (
            account.blockchain === blockchain &&
            (chainId === account?.chainId || account.chainId === undefined)
        ) {
            return account;
        }
    });

    return accounts;
};

export const getSelectedBlockchainAccounts = (state: IReduxState): IAccountState[] => {
    return (
        getSelectedWallet(state)?.accounts.filter(acc => {
            if (acc.blockchain === getSelectedBlockchain(state)) {
                return acc;
            }
        }) || []
    );
};

export const getAccount = (
    state: IReduxState,
    accountIndex: number,
    blockchain: Blockchain
): IAccountState =>
    getSelectedWallet(state).accounts.find(
        acc => acc.index === accountIndex && acc.blockchain === blockchain
    );

// search for wallet that contains specific address and return it
export const getWalletWithAddress = (
    state: IReduxState,
    addresses: string[],
    blockchain: Blockchain
): IWalletState[] =>
    Object.values(state.wallets).filter(wallet =>
        (wallet?.accounts || []).some(
            account =>
                account.blockchain === blockchain &&
                addresses.includes(account.address.toLowerCase())
        )
    );

// search for wallet that contains specific transaction and return it
export const getWalletAndTransactionForHash = (
    state: IReduxState,
    transactionHash: string
): { walletId: string; transaction: IBlockchainTransaction } => {
    let transaction: IBlockchainTransaction;
    const wallets = Object.values(state.wallets).filter(wallet => {
        if ((wallet?.transactions || {})[transactionHash] !== undefined) {
            transaction = wallet.transactions[transactionHash];
            return wallet;
        }
    });
    if (wallets.length) return { walletId: wallets[0].id, transaction };
    return undefined;
};

export const generateAccountConfig = (blockchain: Blockchain): IAccountState => {
    return {
        index: 0,
        type: AccountType.DEFAULT,
        selected: false,
        publicKey: undefined,
        address: undefined,
        blockchain,
        tokens: generateTokensConfig(blockchain)
    };
};

export const getNrPendingTransactions = (state: IReduxState): number => {
    const transactions = getSelectedAccountTransactions(state) || [];

    const selectedAccount = getSelectedAccount(state);

    if (selectedAccount) {
        return transactions.filter(
            tx => tx.status === TransactionStatus.PENDING && tx.address === selectedAccount.address
        ).length;
    }

    return transactions.filter(tx => tx.status === TransactionStatus.PENDING).length;
};

'''
'''--- src/redux/wallets/state.ts ---
import { WalletType } from '../../core/wallet/types';
import { Blockchain, IBlockchainTransaction, ChainIdType } from '../../core/blockchain/types';
import { HWVendor, HWModel, HWConnection } from '../../core/wallet/hw-wallet/types';

export interface IWalletsState {
    [id: string]: IWalletState;
}

export interface IWalletState {
    id: string;
    walletPublicKey: string;
    name: string;
    deviceId?: string;
    selected: boolean;
    selectedBlockchain: Blockchain;
    hwOptions?: IWalletHWOptions;
    type: WalletType;
    accounts: IAccountState[];
    transactions?: {
        [id: string]: IBlockchainTransaction;
    };
}

export interface IWalletHWOptions {
    deviceId: string;
    deviceVendor: HWVendor;
    deviceModel: HWModel;
    connectionType: HWConnection;
}

export interface ITokensAccountState {
    [chainId: string]: {
        [symbol: string]: ITokenState;
    };
}

export interface IAccountState {
    index: number;
    type: AccountType;
    order?: number; // TODO: implement this
    selected: boolean;
    name?: string;
    blockchain: Blockchain;
    address: string;
    publicKey: string;
    nonce?: number;
    tokens: ITokensAccountState;
    chainId?: ChainIdType;
    meta?: {
        owner?: string;
    };
}

export interface ITokenState {
    symbol: string;
    order: number;
    active: boolean;
    balance?: ITokenStakeBalance;
}

export interface ITokenStakeBalance {
    value: string;
    inProgress: boolean;
    timestamp: number;
    error: any;
    available: string;
    total: string;
    detailed: any;
    unstaked?: string;
}

export enum AccountType {
    DEFAULT = 'DEFAULT',
    ROOT = 'ROOT',
    LOCKUP_CONTRACT = 'LOCKUP_CONTRACT'
}

'''
'''--- src/screens/blockchain/near/create-account/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';
import { ph, pw } from '../../../../styles';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground
        },
        scrollContainer: {
            flexGrow: 1,
            paddingHorizontal: BASE_DIMENSION * 2,
            paddingBottom: BASE_DIMENSION * 7
        },
        moonletImage: {
            height: ph(20),
            width: pw(50),
            alignSelf: 'center',
            resizeMode: 'contain',
            marginVertical: BASE_DIMENSION * 6
        },
        chooseUsernameText: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            color: theme.colors.text,
            fontWeight: 'bold',
            textAlign: 'center',
            marginBottom: BASE_DIMENSION * 5,
            marginHorizontal: BASE_DIMENSION * 6
        },
        createButton: {
            marginHorizontal: BASE_DIMENSION * 2
        },
        domain: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.text,
            justifyContent: 'flex-end',
            alignItems: 'center',
            alignSelf: 'center'
        },
        inputContainer: {
            marginBottom: BASE_DIMENSION * 4
        },
        inputBox: {
            height: BASE_DIMENSION * 5 + BASE_DIMENSION / 2,
            borderRadius: BORDER_RADIUS,
            backgroundColor: theme.colors.cardBackground,
            paddingHorizontal: BASE_DIMENSION * 2,
            flexDirection: 'row',
            marginBottom: BASE_DIMENSION / 2
        },
        inputText: {
            flex: 1,
            color: theme.colors.text,
            paddingRight: BASE_DIMENSION * 2,
            fontSize: normalizeFontAndLineHeight(17)
        },
        infoText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20)
        },
        checkingText: {
            color: theme.colors.error
        },
        errorText: {
            color: theme.colors.negative
        },
        congratsText: {
            color: theme.colors.accent
        }
    });

'''
'''--- src/screens/blockchain/near/recover-account/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';
import { ph, pw } from '../../../../styles';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground
        },
        scrollContainer: {
            flexGrow: 1,
            paddingHorizontal: BASE_DIMENSION * 2,
            paddingBottom: BASE_DIMENSION * 4
        },
        moonletImage: {
            height: ph(20),
            width: pw(50),
            alignSelf: 'center',
            resizeMode: 'contain',
            marginVertical: BASE_DIMENSION * 6
        },
        authMoonletUserAccountText: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            color: theme.colors.text,
            fontWeight: 'bold',
            textAlign: 'center',
            marginBottom: BASE_DIMENSION * 5,
            marginHorizontal: BASE_DIMENSION
        },
        copyAuthButton: {
            marginHorizontal: BASE_DIMENSION * 2,
            marginTop: BASE_DIMENSION * 2
        },
        defaultButtonContainer: {
            flex: 1,
            justifyContent: 'flex-end'
        },
        defaultButton: {
            marginHorizontal: BASE_DIMENSION * 2
        },
        domain: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.text,
            justifyContent: 'flex-end',
            alignItems: 'center',
            alignSelf: 'center'
        },
        inputContainer: {
            marginBottom: BASE_DIMENSION * 4
        },
        inputBox: {
            height: BASE_DIMENSION * 5 + BASE_DIMENSION / 2,
            borderRadius: BORDER_RADIUS,
            backgroundColor: theme.colors.cardBackground,
            paddingHorizontal: BASE_DIMENSION * 2,
            flexDirection: 'row',
            marginBottom: BASE_DIMENSION / 2
        },
        inputText: {
            flex: 1,
            color: theme.colors.text,
            paddingRight: BASE_DIMENSION * 2,
            fontSize: normalizeFontAndLineHeight(17)
        },
        infoText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20)
        },
        checkingText: {
            color: theme.colors.error
        },
        errorText: {
            color: theme.colors.negative
        },
        congratsText: {
            color: theme.colors.accent
        },
        createHereText: {
            color: theme.colors.accent
        },
        authProgressContainer: {
            flex: 1,
            justifyContent: 'center',
            marginTop: BASE_DIMENSION,
            marginBottom: BASE_DIMENSION * 2
        },
        loadingContainer: {
            paddingBottom: BASE_DIMENSION * 3
        },
        authProgressText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.accent,
            textAlign: 'center'
        },
        continueWith: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.text,
            fontWeight: 'bold',
            marginBottom: BASE_DIMENSION,
            marginLeft: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/screens/connect-hardware-wallet/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION, normalize, normalizeFontAndLineHeight } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            paddingHorizontal: BASE_DIMENSION,
            backgroundColor: theme.colors.appBackground,
            height: '100%'
        },
        configContainer: {
            flex: 1
        },
        connectionContainer: {
            flexDirection: 'row',
            alignItems: 'center'
        },
        activityContainer: {
            marginBottom: BASE_DIMENSION * 2,
            alignItems: 'center'
        },
        bottomContainer: {
            flex: 0,
            justifyContent: 'center',
            alignSelf: 'stretch',
            alignItems: 'center',
            marginBottom: BASE_DIMENSION * 5
        },
        bottomButton: {
            width: '80%'
        },
        textIndicator: {
            width: '90%',
            textAlign: 'center',
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION * 2
        },
        text: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.text
        },
        headerRow: {
            flex: 1,
            flexDirection: 'row',
            justifyContent: 'space-between',
            marginTop: BASE_DIMENSION * 4
        },
        headerDescription: {
            flexDirection: 'row',
            justifyContent: 'space-between',
            marginBottom: BASE_DIMENSION * 4
        },
        circle: {
            height: normalize(50),
            width: normalize(50),
            borderRadius: normalize(25),
            padding: BASE_DIMENSION,
            marginBottom: BASE_DIMENSION,
            alignSelf: 'center',
            backgroundColor: theme.colors.cardBackground
        },
        circleSelected: {
            backgroundColor: theme.colors.accentSecondary
        },
        number: {
            fontSize: normalizeFontAndLineHeight(28),
            lineHeight: normalizeFontAndLineHeight(34),
            textAlign: 'center',
            color: theme.colors.textSecondary
        },
        numberSelected: {
            color: theme.colors.accent
        },
        divider: {
            flex: 1,
            height: 2,
            alignSelf: 'center',
            backgroundColor: theme.colors.cardBackground
        },
        dividerSelected: {
            backgroundColor: theme.colors.accentSecondary
        }
    });

'''
'''--- src/screens/create-wallet-confirm-mnemonic/styles.ts ---
import { StyleSheet, Dimensions } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalizeFontAndLineHeight,
    SCREEN_HEIGHT
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingHorizontal: BASE_DIMENSION * 2,
            paddingTop: BASE_DIMENSION * 4,
            paddingBottom: BASE_DIMENSION * 7,
            alignItems: 'center',
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT // used for web
        },
        inputContainer: {
            height: Dimensions.get('window').height / 2,
            width: '100%',
            justifyContent: 'center'
        },
        inputWrapper: {
            height: BASE_DIMENSION * 5,
            paddingVertical: BASE_DIMENSION,
            borderRadius: BORDER_RADIUS,
            color: theme.colors.text,
            backgroundColor: theme.colors.inputBackground,
            paddingHorizontal: BASE_DIMENSION + BASE_DIMENSION / 2,
            marginBottom: BASE_DIMENSION * 2
        },
        inputText: {
            fontSize: normalizeFontAndLineHeight(14),
            lineHeight: normalizeFontAndLineHeight(21)
        },
        errorMessage: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(19),
            color: theme.colors.error,
            textAlign: 'center',
            marginVertical: BASE_DIMENSION * 2
        },
        testWords: {
            flexDirection: 'row',
            justifyContent: 'center',
            textAlign: 'center'
        },
        label: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            paddingLeft: BASE_DIMENSION * 2,
            color: theme.colors.textSecondary
        }
    });

'''
'''--- src/screens/create-wallet-mnemonic/styles.ts ---
import { StyleSheet, Platform } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION, normalizeFontAndLineHeight, SCREEN_HEIGHT } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingHorizontal: BASE_DIMENSION * 2,
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT // used for web
        },
        title: {
            fontSize: normalizeFontAndLineHeight(20),
            lineHeight: normalizeFontAndLineHeight(25),
            color: theme.colors.textSecondary,
            paddingTop: BASE_DIMENSION * 2
        },
        mnemonicContainer: {
            flex: 1,
            justifyContent: 'center',
            flexDirection: 'column'
        },
        mnemonicInfoText: {
            fontSize: normalizeFontAndLineHeight(20),
            lineHeight: normalizeFontAndLineHeight(25),
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION * 2
        },
        secretWord: {
            fontSize: normalizeFontAndLineHeight(23),
            lineHeight: normalizeFontAndLineHeight(34),
            color: theme.colors.textSecondary,
            marginLeft: BASE_DIMENSION * 5,
            fontWeight: 'bold'
        },
        checkboxContainer: {
            flexDirection: 'row',
            marginBottom: BASE_DIMENSION,
            paddingHorizontal: BASE_DIMENSION * 2
        },
        checkboxText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(21),
            color: theme.colors.text,
            marginRight: Platform.select({
                ios: BASE_DIMENSION * 4,
                default: BASE_DIMENSION * 2
            })
        },
        bottomContainer: {
            marginHorizontal: BASE_DIMENSION * 2,
            marginBottom: BASE_DIMENSION * 6
        },
        copyButton: {
            marginBottom: BASE_DIMENSION * 2,
            marginTop: BASE_DIMENSION
        },
        unveilButton: {
            marginTop: BASE_DIMENSION * 2,
            marginHorizontal: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/screens/dashboard/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    LETTER_SPACING,
    SCREEN_HEIGHT
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT
        },
        coinBalanceCard: {
            backgroundColor: theme.colors.appBackground,
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            justifyContent: 'center'
        },
        dashboardContainer: {
            flexGrow: 1,
            paddingHorizontal: BASE_DIMENSION * 2
        },
        darkerText: {
            color: theme.colors.textSecondary
        },
        row: {
            flexDirection: 'row',
            justifyContent: 'center'
        },
        rowContainer: {
            flexDirection: 'row',
            marginBottom: BASE_DIMENSION,
            justifyContent: 'center'
        },
        account: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.textSecondary,
            marginRight: BASE_DIMENSION
        },
        address: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.accent
        },
        mainText: {
            fontWeight: 'bold',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.white,
            marginRight: BASE_DIMENSION
        },
        secondaryText: {
            fontSize: normalizeFontAndLineHeight(16),
            color: theme.colors.textSecondary
        },
        icon: {
            alignSelf: 'center',
            color: theme.colors.textSecondary,
            fontWeight: 'bold',
            marginLeft: BASE_DIMENSION + BASE_DIMENSION / 2
        }
    });

'''
'''--- src/screens/dashboard/styles.web-wallet.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground
        }
    });

'''
'''--- src/screens/ledger/components/confirm-connections/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    LETTER_SPACING,
    normalize,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 6,
            paddingHorizontal: BASE_DIMENSION * 2,
            paddingBottom: BASE_DIMENSION * 6
        },
        image: {
            width: '100%',
            height: normalize(260)
        },
        primaryText: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            fontWeight: 'bold',
            letterSpacing: LETTER_SPACING,
            textAlign: 'center',
            color: theme.colors.text,
            marginBottom: BASE_DIMENSION,
            marginTop: BASE_DIMENSION * 2
        },
        secondaryText: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            textAlign: 'center',
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION * 2 + BASE_DIMENSION / 2,
            paddingHorizontal: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/screens/ledger/components/failed-component/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    LETTER_SPACING,
    normalize,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 6,
            paddingHorizontal: BASE_DIMENSION * 4,
            paddingBottom: BASE_DIMENSION * 6
        },
        image: {
            width: '100%',
            height: normalize(260)
        },
        primaryText: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            fontWeight: 'bold',
            letterSpacing: LETTER_SPACING,
            textAlign: 'center',
            color: theme.colors.text,
            marginBottom: BASE_DIMENSION,
            marginTop: BASE_DIMENSION * 2
        },
        secondaryText: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            textAlign: 'center',
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION / 2
        },
        troubleshooText: {
            color: theme.colors.accent,
            marginBottom: BASE_DIMENSION
        }
    });

'''
'''--- src/screens/ledger/components/location-required/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    LETTER_SPACING,
    normalize,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 6,
            paddingHorizontal: BASE_DIMENSION * 4,
            paddingBottom: BASE_DIMENSION * 6
        },
        image: {
            width: '100%',
            height: normalize(260)
        },
        primaryText: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            fontWeight: 'bold',
            letterSpacing: LETTER_SPACING,
            textAlign: 'center',
            color: theme.colors.text,
            marginBottom: BASE_DIMENSION,
            marginTop: BASE_DIMENSION * 2
        },
        secondaryText: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            textAlign: 'center',
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION / 2
        },
        troubleshooText: {
            color: theme.colors.accent,
            marginBottom: BASE_DIMENSION
        }
    });

'''
'''--- src/screens/ledger/components/open-app/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    LETTER_SPACING,
    normalize,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 6,
            paddingHorizontal: BASE_DIMENSION * 2,
            paddingBottom: BASE_DIMENSION * 6
        },
        image: {
            width: '100%',
            height: normalize(260)
        },
        primaryText: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            fontWeight: 'bold',
            letterSpacing: LETTER_SPACING,
            textAlign: 'center',
            color: theme.colors.text,
            marginBottom: BASE_DIMENSION,
            marginTop: BASE_DIMENSION * 2
        },
        secondaryText: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            textAlign: 'center',
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION * 2 + BASE_DIMENSION / 2,
            paddingHorizontal: BASE_DIMENSION
        }
    });

'''
'''--- src/screens/ledger/components/review-message/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    LETTER_SPACING,
    normalize,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 6,
            paddingHorizontal: BASE_DIMENSION * 2,
            paddingBottom: BASE_DIMENSION * 6
        },
        image: {
            width: '100%',
            height: normalize(260)
        },
        primaryText: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            fontWeight: 'bold',
            letterSpacing: LETTER_SPACING,
            textAlign: 'center',
            color: theme.colors.text,
            marginBottom: BASE_DIMENSION,
            marginTop: BASE_DIMENSION * 2
        },
        secondaryText: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            textAlign: 'center',
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION * 2 + BASE_DIMENSION / 2,
            paddingHorizontal: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/screens/ledger/components/review-transaction/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    LETTER_SPACING,
    normalize,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 6,
            paddingHorizontal: BASE_DIMENSION * 2,
            paddingBottom: BASE_DIMENSION * 6
        },
        image: {
            width: '100%',
            height: normalize(260)
        },
        primaryText: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            fontWeight: 'bold',
            letterSpacing: LETTER_SPACING,
            textAlign: 'center',
            color: theme.colors.text,
            marginBottom: BASE_DIMENSION,
            marginTop: BASE_DIMENSION * 2
        },
        secondaryText: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            textAlign: 'center',
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION * 2 + BASE_DIMENSION / 2,
            paddingHorizontal: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/screens/ledger/components/search-ledger/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    LETTER_SPACING,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 6,
            paddingHorizontal: BASE_DIMENSION * 4,
            paddingBottom: BASE_DIMENSION * 4
        },
        primaryText: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            fontWeight: 'bold',
            letterSpacing: LETTER_SPACING,
            textAlign: 'center',
            color: theme.colors.text,
            marginBottom: BASE_DIMENSION,
            marginTop: BASE_DIMENSION * 2
        },
        secondaryText: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            textAlign: 'center',
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION * 2
        },
        loadingContainer: {
            flex: 1
        },
        noteText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.textTertiary
        },
        cardText: {
            fontSize: normalizeFontAndLineHeight(18),
            lineHeight: normalizeFontAndLineHeight(25),
            fontWeight: '500',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.textSecondary
        }
    });

'''
'''--- src/screens/ledger/components/sign-declined/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    LETTER_SPACING,
    normalize,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 6,
            paddingHorizontal: BASE_DIMENSION * 4,
            paddingBottom: BASE_DIMENSION * 6
        },
        image: {
            width: '100%',
            height: normalize(260)
        },
        primaryText: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            fontWeight: 'bold',
            letterSpacing: LETTER_SPACING,
            textAlign: 'center',
            color: theme.colors.text,
            marginBottom: BASE_DIMENSION,
            marginTop: BASE_DIMENSION * 2
        },
        secondaryText: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            textAlign: 'center',
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION / 2
        },
        cancelButton: {
            marginBottom: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/screens/ledger/components/smartcontract-warning/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    LETTER_SPACING,
    normalize,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 6,
            paddingHorizontal: BASE_DIMENSION * 4,
            paddingBottom: BASE_DIMENSION * 6
        },
        image: {
            width: '100%',
            height: normalize(260)
        },
        primaryText: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            fontWeight: 'bold',
            letterSpacing: LETTER_SPACING,
            textAlign: 'center',
            color: theme.colors.text,
            marginBottom: BASE_DIMENSION,
            marginTop: BASE_DIMENSION * 2
        },
        secondaryText: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            textAlign: 'center',
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION / 2
        },
        troubleshooText: {
            color: theme.colors.accent,
            marginBottom: BASE_DIMENSION
        }
    });

'''
'''--- src/screens/ledger/components/success-connect/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    LETTER_SPACING,
    normalize,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 6,
            paddingHorizontal: BASE_DIMENSION * 2,
            paddingBottom: BASE_DIMENSION * 6
        },
        image: {
            width: '100%',
            height: normalize(260)
        },
        primaryText: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            fontWeight: 'bold',
            letterSpacing: LETTER_SPACING,
            textAlign: 'center',
            color: theme.colors.text,
            marginBottom: BASE_DIMENSION,
            marginTop: BASE_DIMENSION * 2
        },
        secondaryText: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            textAlign: 'center',
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION * 2 + BASE_DIMENSION / 2,
            paddingHorizontal: BASE_DIMENSION * 2
        },
        cardText: {
            fontSize: normalizeFontAndLineHeight(18),
            lineHeight: normalizeFontAndLineHeight(25),
            fontWeight: '500',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.textSecondary
        },
        cardSecondaryText: {
            fontSize: normalizeFontAndLineHeight(16),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.textSecondary
        }
    });

'''
'''--- src/screens/ledger/components/troubleshooting/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import { ICON_CONTAINER_SIZE, BASE_DIMENSION, SCREEN_HEIGHT } from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            justifyContent: 'center',
            backgroundColor: theme.colors.appBackground
        },
        button: {
            flexDirection: 'row',
            alignItems: 'center'
        },
        iconContainer: {
            width: ICON_CONTAINER_SIZE,
            height: ICON_CONTAINER_SIZE,
            alignItems: 'center',
            justifyContent: 'center',
            marginLeft: BASE_DIMENSION
        },
        icon: {
            color: theme.colors.accent
        },
        webviewContainer: {
            flex: 1,
            overflow: 'hidden',
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT // used for web
        },
        loadingIndicator: {
            position: 'absolute',
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            backgroundColor: theme.colors.appBackground
        }
    });

'''
'''--- src/screens/ledger/components/verification-failed/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    LETTER_SPACING,
    normalize,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 6,
            paddingHorizontal: BASE_DIMENSION * 4,
            paddingBottom: BASE_DIMENSION * 6
        },
        image: {
            width: '100%',
            height: normalize(260)
        },
        primaryText: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            fontWeight: 'bold',
            letterSpacing: LETTER_SPACING,
            textAlign: 'center',
            color: theme.colors.text,
            marginBottom: BASE_DIMENSION,
            marginTop: BASE_DIMENSION * 2
        },
        secondaryText: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            textAlign: 'center',
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION / 2
        },
        troubleshooText: {
            color: theme.colors.accent,
            marginBottom: BASE_DIMENSION
        }
    });

'''
'''--- src/screens/ledger/components/verify-address/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    LETTER_SPACING,
    normalize,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 6,
            paddingHorizontal: BASE_DIMENSION * 2,
            paddingBottom: BASE_DIMENSION * 6
        },
        image: {
            width: '100%',
            height: normalize(260)
        },
        primaryText: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            fontWeight: 'bold',
            letterSpacing: LETTER_SPACING,
            textAlign: 'center',
            color: theme.colors.text,
            marginBottom: BASE_DIMENSION,
            marginTop: BASE_DIMENSION * 2
        },
        secondaryText: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            textAlign: 'center',
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION * 2 + BASE_DIMENSION / 2,
            paddingHorizontal: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/screens/ledger/styles.ts ---
import { Platform, StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    isIphoneXorAbove,
    LETTER_SPACING,
    normalizeFontAndLineHeight
} from '../../styles/dimensions';

export const CONTAINER_TOP_PADDING =
    Platform.OS === 'ios'
        ? isIphoneXorAbove()
            ? BASE_DIMENSION * 8
            : BASE_DIMENSION * 6
        : BASE_DIMENSION * 2;

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            position: 'absolute',
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            flex: 1,
            backgroundColor: theme.colors.appBackground,
            paddingTop: CONTAINER_TOP_PADDING
        },
        header: {
            flexDirection: 'row',
            width: '100%'
        },
        defaultHeaderContainer: {
            flex: 1
        },
        headerTitleContainer: {
            flex: 1,
            justifyContent: 'center'
        },
        headerTitleStyle: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            color: theme.colors.text,
            letterSpacing: LETTER_SPACING,
            textAlign: 'center',
            fontWeight: 'bold'
        }
    });

'''
'''--- src/screens/manage-accounts/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    ICON_CONTAINER_SIZE,
    normalize,
    normalizeFontAndLineHeight,
    LETTER_SPACING,
    SCREEN_HEIGHT
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground,
            paddingHorizontal: BASE_DIMENSION * 2,
            height: SCREEN_HEIGHT
        },
        scrollView: {
            flexGrow: 1,
            paddingTop: BASE_DIMENSION * 4,
            paddingBottom: BASE_DIMENSION * 2
        },
        rowContainer: {
            flex: 1,
            flexDirection: 'row',
            backgroundColor: theme.colors.cardBackground,
            borderRadius: BORDER_RADIUS,
            borderWidth: 2,
            padding: BASE_DIMENSION,
            alignItems: 'center',
            marginBottom: BASE_DIMENSION,
            paddingVertical: BASE_DIMENSION * 2
        },
        firstAmount: {
            fontWeight: '500',
            fontSize: normalizeFontAndLineHeight(18),
            lineHeight: normalizeFontAndLineHeight(25),
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text
        },
        secondAmount: {
            fontSize: normalizeFontAndLineHeight(16),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.textSecondary
        },
        menuIcon: {
            color: theme.colors.accent
        },
        accountIcon: {
            color: theme.colors.accent,
            alignSelf: 'center'
        },
        infoContainer: {
            flex: 1,
            flexDirection: 'row'
        },
        iconContainer: {
            width: ICON_CONTAINER_SIZE,
            height: ICON_CONTAINER_SIZE,
            justifyContent: 'center',
            alignItems: 'center'
        },
        amountContainer: {
            display: 'flex',
            flexDirection: 'column',
            marginLeft: BASE_DIMENSION
        },

        firstRow: {
            flexDirection: 'row',
            marginBottom: BASE_DIMENSION / 4,
            width: '100%'
        },
        accountName: {
            fontSize: normalizeFontAndLineHeight(18),
            lineHeight: normalizeFontAndLineHeight(25),
            fontWeight: '500',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text,
            marginRight: BASE_DIMENSION
        },
        accountAddress: {
            fontSize: normalizeFontAndLineHeight(18),
            lineHeight: normalizeFontAndLineHeight(25),
            fontWeight: '500',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.accent,
            flexShrink: 1
        },
        fistAmountText: {
            color: theme.colors.textSecondary
        },
        secondAmountText: {
            marginLeft: BASE_DIMENSION,
            color: theme.colors.textSecondary
        },
        bottomContainer: {
            marginBottom: BASE_DIMENSION * 4
        },
        bottomButton: {
            marginHorizontal: BASE_DIMENSION * 2,
            marginTop: BASE_DIMENSION * 2
        },

        // Swipeable left actions
        leftActionsContainer: {
            flexDirection: 'row'
        },
        action: {
            justifyContent: 'center',
            alignItems: 'center',
            width: normalize(72)
        },
        iconActionPositive: {
            height: normalize(40),
            color: theme.colors.accent
        },
        iconActionNegative: {
            height: normalize(40),
            color: theme.colors.error
        },
        textActionPositive: {
            fontSize: normalizeFontAndLineHeight(10),
            color: theme.colors.accent
        },
        textActionNegative: {
            fontSize: normalizeFontAndLineHeight(10),
            color: theme.colors.error
        }
    });

'''
'''--- src/screens/manage-token/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    ICON_CONTAINER_SIZE,
    normalizeFontAndLineHeight,
    LETTER_SPACING
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingHorizontal: BASE_DIMENSION * 2,
            paddingVertical: BASE_DIMENSION * 5,
            flexDirection: 'column',
            backgroundColor: theme.colors.appBackground
        },
        inputContainer: {
            flex: 1,
            flexDirection: 'column'
        },
        inputBox: {
            height: BASE_DIMENSION * 5,
            borderRadius: BORDER_RADIUS,
            alignSelf: 'stretch',
            backgroundColor: theme.colors.cardBackground,
            paddingHorizontal: BASE_DIMENSION,
            flexDirection: 'row',
            justifyContent: 'space-between',
            alignItems: 'center',
            marginBottom: BASE_DIMENSION * 2
        },
        input: {
            flex: 1,
            fontSize: normalizeFontAndLineHeight(15),
            color: theme.colors.text
        },
        bottomButtonContainer: {
            marginHorizontal: BASE_DIMENSION * 2
        },
        searchIcon: {
            alignSelf: 'center',
            color: theme.colors.textTertiary,
            marginRight: BASE_DIMENSION
        },
        closeIconContainer: {
            paddingLeft: BASE_DIMENSION,
            justifyContent: 'center'
        },
        closeIcon: {
            alignSelf: 'center',
            color: theme.colors.accent
        },
        tokenCardContainer: {
            backgroundColor: theme.colors.cardBackground,
            borderWidth: 2,
            borderColor: theme.colors.cardBackground,
            borderRadius: BORDER_RADIUS,
            paddingHorizontal: BASE_DIMENSION,
            paddingVertical: BASE_DIMENSION * 2,
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            marginBottom: BASE_DIMENSION,
            flexDirection: 'row'
        },
        tokenSelectedContainer: {
            borderColor: theme.colors.accentSecondary
        },
        accountInfoContainer: {
            flex: 1,
            display: 'flex',
            flexDirection: 'column',
            marginHorizontal: BASE_DIMENSION
        },
        iconContainer: {
            width: ICON_CONTAINER_SIZE,
            height: ICON_CONTAINER_SIZE,
            justifyContent: 'center',
            alignItems: 'center'
        },
        icon: {
            color: theme.colors.accent
        },
        address: {
            fontSize: normalizeFontAndLineHeight(16),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.textSecondary
        },
        tokenNameText: {
            fontSize: normalizeFontAndLineHeight(18),
            lineHeight: normalizeFontAndLineHeight(25),
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text,
            fontWeight: '500'
        },
        tokenAddressText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            letterSpacing: LETTER_SPACING,
            color: theme.colors.textTertiary
        },
        errorWrapper: {
            flexDirection: 'column',
            marginTop: BASE_DIMENSION * 10
        },
        noMatchText: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            color: theme.colors.textTertiary,
            letterSpacing: LETTER_SPACING,
            fontWeight: 'bold',
            marginBottom: BASE_DIMENSION,
            textAlign: 'center'
        },
        noGiveUpText: {
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.textTertiary,
            textAlign: 'center'
        }
    });

'''
'''--- src/screens/notifications/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    SCREEN_HEIGHT,
    LETTER_SPACING,
    normalize
} from '../../styles/dimensions';
import { ph, pw } from '../../styles';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground,
            flexDirection: 'column',
            height: SCREEN_HEIGHT
        },
        scrollContainer: {
            flexGrow: 1,
            paddingHorizontal: BASE_DIMENSION * 3,
            paddingTop: BASE_DIMENSION * 4,
            paddingBottom: BASE_DIMENSION * 8
        },
        rowContainer: {
            flexDirection: 'row',
            marginBottom: BASE_DIMENSION * 2,
            paddingHorizontal: BASE_DIMENSION / 2
        },
        rowTextContainer: {
            flex: 1,
            flexDirection: 'column'
        },
        title: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.white,
            fontWeight: '600',
            alignSelf: 'center'
        },
        subtitle: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            color: theme.colors.text
        },
        rightIcon: {
            alignSelf: 'center',
            color: theme.colors.accent
        },
        emptyContainer: {
            flex: 1,
            marginTop: BASE_DIMENSION * 3
        },
        logoImage: {
            height: ph(30),
            width: pw(60),
            alignSelf: 'center',
            resizeMode: 'contain',
            marginBottom: BASE_DIMENSION * 3
        },
        emptyNotifTitle: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            color: theme.colors.textTertiary,
            fontWeight: 'bold',
            letterSpacing: LETTER_SPACING,
            marginBottom: BASE_DIMENSION,
            textAlign: 'center'
        },
        emptyNotifSubtitle: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.textTertiary,
            textAlign: 'center',
            paddingHorizontal: BASE_DIMENSION
        },
        loadingContainer: {
            paddingTop: BASE_DIMENSION,
            paddingBottom: BASE_DIMENSION * 6
        },
        notifIcon: {
            width: normalize(18),
            height: normalize(18),
            marginRight: BASE_DIMENSION
        }
    });

'''
'''--- src/screens/onboarding/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { pw } from '../../styles';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    LETTER_SPACING
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground
        },
        topContainer: {
            flex: 1,
            justifyContent: 'center',
            marginBottom: BASE_DIMENSION * 4
        },
        buttonsContainer: {
            paddingHorizontal: BASE_DIMENSION * 4,
            marginBottom: BASE_DIMENSION * 7
        },
        topButtons: {
            flexDirection: 'row',
            marginBottom: BASE_DIMENSION * 2
        },
        leftButton: {
            marginRight: BASE_DIMENSION / 2
        },
        rightButton: {
            marginLeft: BASE_DIMENSION / 2
        },
        bottomButton: {
            marginBottom: BASE_DIMENSION * 2
        },
        logoImage: {
            width: pw(60),
            resizeMode: 'contain',
            alignSelf: 'center'
        },
        textContainer: {
            marginHorizontal: BASE_DIMENSION * 4
        },
        welcomeTitle: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            fontWeight: 'bold',
            textAlign: 'center',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text,
            marginBottom: BASE_DIMENSION
        },
        welcomeText: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            textAlign: 'center',
            color: theme.colors.textSecondary
        }
    });

'''
'''--- src/screens/pos-actions/components/confirm-component/styles.ts ---
import { StyleSheet, Platform } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    SCREEN_HEIGHT,
    isIphoneXorAbove,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            flexDirection: 'column',
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT // used for web,
        },
        content: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 2,
            paddingBottom: Platform.select({
                default: BASE_DIMENSION * 10,
                ios: isIphoneXorAbove() ? BASE_DIMENSION * 11 : BASE_DIMENSION * 10
            })
        },
        headerSteps: {
            marginBottom: BASE_DIMENSION
        },

        receipientLabel: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            paddingLeft: BASE_DIMENSION,
            color: theme.colors.textSecondary
        },
        confirmTransactionContainer: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 3,
            paddingHorizontal: BASE_DIMENSION * 2
        },
        confirmTransactionText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.textSecondary,
            alignSelf: 'center'
        },
        inputBox: {
            height: BASE_DIMENSION * 5,
            borderRadius: BORDER_RADIUS,
            backgroundColor: theme.colors.inputBackground,
            paddingHorizontal: BASE_DIMENSION,
            flexDirection: 'row',
            justifyContent: 'space-between',
            alignItems: 'center'
        }
    });

'''
'''--- src/screens/pos-actions/components/enter-amount-component/styles.ts ---
import { StyleSheet, Platform } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import { BASE_DIMENSION, SCREEN_HEIGHT, isIphoneXorAbove } from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            flexDirection: 'column',
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT // used for web,
        },
        content: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 2,
            paddingBottom: Platform.select({
                default: BASE_DIMENSION * 10,
                ios: isIphoneXorAbove() ? BASE_DIMENSION * 11 : BASE_DIMENSION * 10
            })
        },
        headerSteps: {
            marginBottom: BASE_DIMENSION
        },
        amountContainer: {
            marginHorizontal: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/screens/pos-actions/components/validator-delegate-amount/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    ICON_CONTAINER_SIZE,
    normalizeFontAndLineHeight,
    LETTER_SPACING
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexDirection: 'row',
            padding: BASE_DIMENSION + BASE_DIMENSION / 2,
            paddingHorizontal: BASE_DIMENSION * 3
        },
        icon: {
            width: ICON_CONTAINER_SIZE,
            height: ICON_CONTAINER_SIZE,
            borderRadius: ICON_CONTAINER_SIZE,
            alignSelf: 'center',
            marginRight: BASE_DIMENSION + BASE_DIMENSION / 2
        },
        labelContainer: {
            flexDirection: 'row',
            alignItems: 'baseline',
            marginBottom: BASE_DIMENSION / 2
        },
        labelName: {
            fontSize: normalizeFontAndLineHeight(16),
            fontWeight: '500',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text,
            textAlign: 'center',
            marginRight: BASE_DIMENSION / 2
        },
        website: {
            fontSize: normalizeFontAndLineHeight(11),
            color: theme.colors.textSecondary
        },
        rankText: {
            fontSize: normalizeFontAndLineHeight(10),
            color: theme.colors.textTertiary
        },
        amount: {
            fontSize: normalizeFontAndLineHeight(14),
            lineHeight: normalizeFontAndLineHeight(19),
            fontWeight: '500',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.textSecondary,
            alignSelf: 'center'
        }
    });

'''
'''--- src/screens/pos-actions/pos-action-delegate/delegate-enter-amount/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground
        }
    });

'''
'''--- src/screens/pos-actions/pos-action-quick-delegate/quick-delegate-enter-amount/styles.ts ---
import { StyleSheet, Platform } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    SCREEN_HEIGHT,
    normalize,
    isIphoneXorAbove,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            flexDirection: 'column',
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT // used for web,
        },
        content: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 2,
            paddingBottom: Platform.select({
                default: BASE_DIMENSION * 10,
                ios: isIphoneXorAbove() ? BASE_DIMENSION * 11 : BASE_DIMENSION * 10
            })
        },
        listContainer: {
            marginTop: BASE_DIMENSION * 3,
            marginHorizontal: BASE_DIMENSION * 2
        },
        headerSteps: {
            marginBottom: BASE_DIMENSION
        },
        actionContainer: {
            marginTop: BASE_DIMENSION * 2,
            width: normalize(170),
            flexDirection: 'row',
            borderRadius: BORDER_RADIUS / 2,
            borderColor: theme.colors.accent,
            borderWidth: 1,
            justifyContent: 'center',
            alignSelf: 'center'
        },
        actionCounterText: {
            flex: 1,
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(20),
            fontWeight: '600',
            color: theme.colors.text,
            textAlign: 'center',
            alignSelf: 'center'
        },
        actionIconContainer: {
            flex: 1,
            justifyContent: 'center',
            alignItems: 'center',
            alignContent: 'center',
            paddingVertical: BASE_DIMENSION / 2,
            paddingHorizontal: BASE_DIMENSION / 2
        },
        actionIcon: {
            color: theme.colors.accent,
            alignSelf: 'center'
        },
        amountContainer: {
            marginHorizontal: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/screens/pos-actions/pos-action-quick-delegate/quick-delegate-select-validator/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import { ph, pw } from '../../../../styles';
import {
    BASE_DIMENSION,
    LETTER_SPACING,
    normalizeFontAndLineHeight,
    SCREEN_HEIGHT
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            flexDirection: 'column',
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT // used for web,
        },
        content: {
            flex: 1
        },
        listContainer: {
            flex: 1,
            marginHorizontal: BASE_DIMENSION * 2
        },
        validatorsList: {
            paddingTop: BASE_DIMENSION * 2,
            paddingBottom: BASE_DIMENSION * 11
        },
        loadingContainer: {
            flex: 1,
            justifyContent: 'center'
        },
        emptySection: {
            flex: 1,
            flexDirection: 'column',
            justifyContent: 'center'
        },
        logoImage: {
            height: ph(20),
            width: pw(50),
            alignSelf: 'center',
            resizeMode: 'contain',
            marginBottom: BASE_DIMENSION * 2
        },
        noNodesText: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            fontWeight: 'bold',
            textAlign: 'center',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/screens/pos-actions/pos-action-redelegate/redelegate-confirm/styles.ts ---
import { StyleSheet, Platform } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    SCREEN_HEIGHT,
    isIphoneXorAbove,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            flexDirection: 'column',
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT // used for web,
        },
        content: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 2,
            paddingBottom: Platform.select({
                default: BASE_DIMENSION * 10,
                ios: isIphoneXorAbove() ? BASE_DIMENSION * 11 : BASE_DIMENSION * 10
            })
        },
        headerSteps: {
            marginBottom: BASE_DIMENSION
        },

        receipientLabel: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            paddingLeft: BASE_DIMENSION,
            color: theme.colors.textSecondary
        },
        confirmTransactionContainer: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 3,
            paddingHorizontal: BASE_DIMENSION * 2
        },
        confirmTransactionText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.textSecondary,
            alignSelf: 'center'
        },
        inputBox: {
            height: BASE_DIMENSION * 5,
            borderRadius: BORDER_RADIUS,
            backgroundColor: theme.colors.inputBackground,
            paddingHorizontal: BASE_DIMENSION,
            flexDirection: 'row',
            justifyContent: 'space-between',
            alignItems: 'center'
        }
    });

'''
'''--- src/screens/pos-actions/pos-action-redelegate/redelegate-enter-amount/styles.ts ---
import { StyleSheet, Platform } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    SCREEN_HEIGHT,
    normalize,
    isIphoneXorAbove,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            flexDirection: 'column',
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT // used for web,
        },
        content: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 2,
            paddingBottom: Platform.select({
                default: BASE_DIMENSION * 10,
                ios: isIphoneXorAbove() ? BASE_DIMENSION * 11 : BASE_DIMENSION * 10
            })
        },
        listContainer: {
            marginTop: BASE_DIMENSION * 3,
            marginHorizontal: BASE_DIMENSION * 2
        },
        headerSteps: {
            marginBottom: BASE_DIMENSION
        },
        actionContainer: {
            marginTop: BASE_DIMENSION * 2,
            width: normalize(170),
            flexDirection: 'row',
            borderRadius: BORDER_RADIUS / 2,
            borderColor: theme.colors.accent,
            borderWidth: 1,
            justifyContent: 'center',
            alignSelf: 'center'
        },
        actionCounterText: {
            flex: 1,
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(20),
            fontWeight: '600',
            color: theme.colors.text,
            textAlign: 'center',
            alignSelf: 'center'
        },
        actionIconContainer: {
            flex: 1,
            justifyContent: 'center',
            alignItems: 'center',
            alignContent: 'center',
            paddingVertical: BASE_DIMENSION / 2,
            paddingHorizontal: BASE_DIMENSION / 2
        },
        actionIcon: {
            color: theme.colors.accent,
            alignSelf: 'center'
        },
        amountContainer: {
            marginHorizontal: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/screens/pos-actions/pos-action-redelegate/redelegate-select-validator/styles.ts ---
import { StyleSheet, Platform } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    SCREEN_HEIGHT,
    isIphoneXorAbove,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            flexDirection: 'column',
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT // used for web,
        },
        content: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 2,
            paddingBottom: Platform.select({
                default: BASE_DIMENSION * 10,
                ios: isIphoneXorAbove() ? BASE_DIMENSION * 11 : BASE_DIMENSION * 10
            })
        },
        listContainer: {
            marginHorizontal: BASE_DIMENSION * 2
        },
        listContainerValidators: {
            flex: 1,
            marginHorizontal: BASE_DIMENSION * 2,
            paddingBottom: BASE_DIMENSION * 6
        },
        headerSteps: {
            marginBottom: BASE_DIMENSION * 3
        },
        bottomText: {
            position: 'absolute',
            bottom: 0,
            left: 0,
            right: 0,
            paddingBottom: 100,
            backgroundColor: theme.colors.appBackground,
            color: theme.colors.textSecondary,
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(16),
            marginHorizontal: BASE_DIMENSION * 2,
            paddingTop: BASE_DIMENSION / 2
        }
    });

'''
'''--- src/screens/pos-actions/pos-basic-action-smart-screen-wrapper/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../core/theme/itheme';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground
        }
    });

'''
'''--- src/screens/pos-actions/pos-basic-action/styles.ts ---
import { StyleSheet, Platform } from 'react-native';
import { ITheme } from '../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    SCREEN_HEIGHT,
    isIphoneXorAbove,
    normalizeFontAndLineHeight
} from '../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            flexDirection: 'column',
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT // used for web,
        },
        content: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 2,
            paddingBottom: Platform.select({
                default: BASE_DIMENSION * 10,
                ios: isIphoneXorAbove() ? BASE_DIMENSION * 11 : BASE_DIMENSION * 10
            })
        },
        amountContainer: {
            marginHorizontal: BASE_DIMENSION * 2
        },

        unlockContainerText: {
            textAlign: 'center'
        },
        unlockTextChildren: {
            color: theme.colors.textSecondary,
            fontSize: normalizeFontAndLineHeight(16),
            lineHeight: normalizeFontAndLineHeight(18)
        },
        bottomText: {
            position: 'absolute',
            bottom: 0,
            marginBottom: 100,
            color: theme.colors.textSecondary,
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(16),
            marginHorizontal: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/screens/pos-actions/process-transactions/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    BORDER_RADIUS,
    LETTER_SPACING
} from '../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            position: 'absolute',
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            flex: 1,
            backgroundColor: theme.colors.appBackground
        },
        screenTitle: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            color: theme.colors.text,
            letterSpacing: LETTER_SPACING,
            textAlign: 'center',
            fontWeight: 'bold',
            marginBottom: BASE_DIMENSION * 4
        },
        title: {
            fontSize: normalizeFontAndLineHeight(16),
            lineHeight: normalizeFontAndLineHeight(22),
            fontWeight: '400',
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION * 4,
            paddingHorizontal: BASE_DIMENSION * 2,
            textAlign: 'center'
        },
        errorFundsTitle: {
            fontSize: normalizeFontAndLineHeight(16),
            lineHeight: normalizeFontAndLineHeight(21),
            fontWeight: '400',
            color: theme.colors.error,
            marginBottom: BASE_DIMENSION * 4,
            paddingHorizontal: BASE_DIMENSION * 2,
            textAlign: 'center'
        },
        warningFeesTitle: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            fontWeight: '600',
            color: theme.colors.warning,
            marginBottom: BASE_DIMENSION * 4,
            paddingHorizontal: BASE_DIMENSION * 2,
            textAlign: 'center'
        },
        contentScrollView: {
            flexGrow: 1
        },
        cardContainer: {
            flexDirection: 'column',
            backgroundColor: theme.colors.cardBackground,
            borderRadius: BORDER_RADIUS,
            marginBottom: BASE_DIMENSION * 2,
            marginHorizontal: BASE_DIMENSION * 2,
            paddingVertical: BASE_DIMENSION,
            paddingHorizontal: BASE_DIMENSION
        },
        cardLeftIcon: {
            alignSelf: 'center'
        },
        cardTextContainer: {
            flex: 1,
            flexDirection: 'column',
            paddingRight: BASE_DIMENSION * 2
        },
        topText: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION / 2
        },
        middleText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.textTertiary
        },
        bottomText: {
            fontSize: normalizeFontAndLineHeight(12),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.textTertiary
        },
        continueButton: {
            marginTop: BASE_DIMENSION,
            marginHorizontal: BASE_DIMENSION * 2,
            marginBottom: BASE_DIMENSION * 5
        },
        failedText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.negative,
            alignSelf: 'center'
        },
        successIcon: {
            alignSelf: 'center',
            color: theme.colors.accent
        },
        transactionIconContainer: {
            justifyContent: 'center',
            marginRight: BASE_DIMENSION * 2
        },
        header: {
            flexDirection: 'row',
            width: '100%',
            height: 44,
            marginBottom: BASE_DIMENSION * 2
        },
        defaultHeaderContainer: {
            flex: 1
        },
        headerTitleContainer: {
            justifyContent: 'center'
        },
        headerTitleStyle: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            color: theme.colors.text,
            letterSpacing: LETTER_SPACING,
            textAlign: 'center',
            fontWeight: 'bold'
        },
        confirmationsContainer: {
            flexDirection: 'row',
            marginTop: BASE_DIMENSION * 2
        },
        confirmationsTextContainer: {
            marginRight: BASE_DIMENSION
        },
        confirmationsText: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(17),
            fontWeight: 'bold',
            color: theme.colors.white,
            textAlign: 'center'
        },
        confirmationsDetails: {
            fontSize: normalizeFontAndLineHeight(14),
            lineHeight: normalizeFontAndLineHeight(19),
            color: theme.colors.textTertiary,
            alignSelf: 'center'
        }
    });

'''
'''--- src/screens/privacy-policy/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground,
            justifyContent: 'center'
        }
    });

'''
'''--- src/screens/promo-details/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            flexDirection: 'column',
            backgroundColor: theme.colors.appBackground
        },
        scrollContainer: {
            flexGrow: 1,
            marginHorizontal: BASE_DIMENSION * 2,
            paddingVertical: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/screens/quick-stake-select-validator/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            flexDirection: 'column',
            backgroundColor: theme.colors.appBackground
        },
        scrollContainer: {
            flexGrow: 1,
            marginHorizontal: BASE_DIMENSION * 2,
            paddingTop: BASE_DIMENSION * 2,
            paddingBottom: BASE_DIMENSION * 12
        }
    });

'''
'''--- src/screens/receive/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    SCREEN_HEIGHT,
    normalizeFontAndLineHeight,
    LETTER_SPACING
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 2,
            paddingBottom: BASE_DIMENSION,
            flexDirection: 'column',
            justifyContent: 'space-evenly',
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT // used for web
        },
        qrCodeContainer: {
            flexDirection: 'column',
            justifyContent: 'center',
            alignItems: 'center',
            marginBottom: BASE_DIMENSION * 2
        },
        qrCode: {
            color: theme.colors.white,
            borderColor: theme.colors.white,
            borderWidth: BASE_DIMENSION * 2
        },
        bottomButton: {
            marginHorizontal: BASE_DIMENSION * 4
        },
        fullAddressContainer: {
            justifyContent: 'center',
            marginBottom: BASE_DIMENSION * 2
        },
        fullAddress: {
            flexShrink: 1,
            flexWrap: 'wrap',
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(20),
            letterSpacing: LETTER_SPACING,
            color: theme.colors.textTertiary,
            textAlign: 'center',
            paddingHorizontal: BASE_DIMENSION * 5
        }
    });

'''
'''--- src/screens/recover-wallet/styles.ts ---
import { StyleSheet, Platform } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalize,
    SCREEN_HEIGHT,
    normalizeFontAndLineHeight
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground,
            padding: BASE_DIMENSION * 2,
            height: SCREEN_HEIGHT // used for web
        },
        mnemonicContainer: {
            marginTop: BASE_DIMENSION * 3,
            backgroundColor: theme.colors.cardBackground,
            borderRadius: BORDER_RADIUS,
            marginBottom: BASE_DIMENSION * 2,
            paddingTop: BASE_DIMENSION / 4,
            paddingBottom: BASE_DIMENSION * 2 - BASE_DIMENSION / 2,
            paddingLeft: BASE_DIMENSION / 4,
            paddingRight: BASE_DIMENSION
        },
        suggestionsContainer: {
            flexGrow: 1
        },
        mnemonicLine: {
            flexDirection: 'row',
            paddingVertical: Platform.OS === 'ios' ? BASE_DIMENSION / 2 : 0
        },
        inputContainer: {
            flex: 1,
            flexDirection: 'row',
            height: normalize(30)
        },
        inputLabel: {
            textAlign: 'right',
            alignSelf: 'center',
            fontSize: normalizeFontAndLineHeight(10),
            width: normalize(18),
            lineHeight: normalizeFontAndLineHeight(30),
            color: theme.colors.text,
            paddingTop: BASE_DIMENSION / 4
        },
        suggestionButton: {
            marginRight: BASE_DIMENSION
        },
        bottomButton: {
            flex: 1,
            flexBasis: 0,
            marginHorizontal: BASE_DIMENSION / 2
        },
        pasteButton: {
            marginTop: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/screens/send/components/account-list/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    ICON_CONTAINER_SIZE,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        contentContainer: {
            flex: 1,
            flexDirection: 'column',
            justifyContent: 'flex-end',
            marginTop: BASE_DIMENSION * 5
        },
        rowContainer: {
            flex: 1,
            flexDirection: 'row',
            justifyContent: 'space-between',
            padding: BASE_DIMENSION
        },
        address: {
            color: theme.colors.textSecondary
        },
        name: {
            color: theme.colors.text,
            fontSize: normalizeFontAndLineHeight(18),
            lineHeight: normalizeFontAndLineHeight(23)
        },
        selectedText: {
            color: theme.colors.accent
        },
        divider: {
            width: '100%',
            height: 1,
            backgroundColor: 'rgba(0,0,0,0.4)'
        },
        iconContainer: {
            justifyContent: 'center',
            alignItems: 'center',
            height: ICON_CONTAINER_SIZE,
            width: ICON_CONTAINER_SIZE
        },
        icon: {
            color: theme.colors.accent,
            alignSelf: 'center'
        }
    });

'''
'''--- src/screens/send/components/add-address/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    ICON_CONTAINER_SIZE,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            margin: BASE_DIMENSION * 2,
            paddingTop: BASE_DIMENSION
        },
        receipientLabel: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            paddingLeft: BASE_DIMENSION,
            color: theme.colors.textSecondary
        },
        inputAddress: {
            flex: 1,
            color: theme.colors.text,
            fontSize: normalizeFontAndLineHeight(15),
            padding: 0
        },
        inputBox: {
            height: BASE_DIMENSION * 5,
            borderRadius: BORDER_RADIUS,
            alignSelf: 'stretch',
            backgroundColor: theme.colors.inputBackground,
            paddingLeft: BASE_DIMENSION + BASE_DIMENSION / 2,
            paddingRight: BASE_DIMENSION,
            flexDirection: 'row',
            justifyContent: 'space-between',
            alignItems: 'center'
        },
        rightAddressButton: {
            height: ICON_CONTAINER_SIZE,
            width: ICON_CONTAINER_SIZE,
            justifyContent: 'flex-end',
            alignItems: 'center',
            flexDirection: 'row',
            marginRight: BASE_DIMENSION / 2
        },
        buttonRightOptions: {
            marginBottom: BASE_DIMENSION,
            alignItems: 'flex-end'
        },
        textTranferButton: {
            color: theme.colors.accent,
            lineHeight: normalizeFontAndLineHeight(19)
        },
        addressNotInBookText: {
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.accent
        },
        displayAddress: {
            marginTop: BASE_DIMENSION,
            paddingLeft: BASE_DIMENSION,
            marginBottom: BASE_DIMENSION,
            color: theme.colors.textSecondary,
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(19)
        },
        displayError: {
            paddingLeft: BASE_DIMENSION,
            marginBottom: BASE_DIMENSION,
            color: theme.colors.error,
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(19)
        },
        receipientWarning: {
            paddingLeft: BASE_DIMENSION,
            marginBottom: BASE_DIMENSION,
            color: theme.colors.warning,
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(19)
        },
        icon: {
            color: theme.colors.accent
        }
    });

'''
'''--- src/screens/send/components/address-book/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalize,
    normalizeFontAndLineHeight,
    LETTER_SPACING
} from '../../../../styles/dimensions';
import { pw, ph } from '../../../../styles';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1
        },
        contentContainer: {
            flex: 1,
            flexDirection: 'column',
            justifyContent: 'flex-end',
            marginTop: BASE_DIMENSION * 5
        },
        emptyAddressContainer: {
            flex: 1,
            justifyContent: 'center',
            alignSelf: 'center'
        },
        logoImage: {
            height: ph(20),
            width: pw(40),
            alignSelf: 'center',
            resizeMode: 'contain',
            marginBottom: BASE_DIMENSION * 3
        },
        emptyAddressText: {
            fontWeight: 'bold',
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            textAlign: 'center',
            letterSpacing: LETTER_SPACING,
            opacity: 0.4,
            color: theme.colors.text,
            marginBottom: BASE_DIMENSION
        },
        addAddressBookText: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            textAlign: 'center',
            opacity: 0.3,
            paddingHorizontal: BASE_DIMENSION * 2,
            color: theme.colors.text
        },
        rowContainer: {
            flex: 1,
            flexDirection: 'row',
            justifyContent: 'space-between',
            paddingVertical: BASE_DIMENSION,
            paddingLeft: BASE_DIMENSION,
            backgroundColor: theme.colors.appBackground
        },
        address: {
            color: theme.colors.textSecondary
        },
        name: {
            color: theme.colors.text,
            fontSize: normalizeFontAndLineHeight(18),
            lineHeight: normalizeFontAndLineHeight(23)
        },
        divider: {
            width: '100%',
            height: 1,
            backgroundColor: 'rgba(0,0,0,0.4)'
        },
        icon: {
            alignSelf: 'center',
            color: theme.colors.accent,
            padding: BASE_DIMENSION / 2
        },
        leftIcon: {
            paddingLeft: BASE_DIMENSION * 2,
            paddingRight: BASE_DIMENSION * 2
        },
        sectionTitle: {
            fontWeight: '600',
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.text,
            paddingTop: BASE_DIMENSION
        },
        selectedText: {
            color: theme.colors.accent
        },
        leftActionsContainer: {
            flexDirection: 'row'
        },
        action: {
            justifyContent: 'center',
            alignItems: 'center',
            width: normalize(72)
        },
        iconActionPositive: {
            height: normalize(40),
            color: theme.colors.accent
        },
        iconActionNegative: {
            height: normalize(40),
            color: theme.colors.error
        },
        textActionPositive: {
            fontSize: normalizeFontAndLineHeight(10),
            color: theme.colors.accent
        },
        textActionNegative: {
            fontSize: normalizeFontAndLineHeight(10),
            color: theme.colors.error
        }
    });

'''
'''--- src/screens/send/components/eip1559-fees-advanced/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 0
        },
        input: {
            flex: 1,
            color: theme.colors.text,
            paddingRight: BASE_DIMENSION * 2,
            fontSize: normalizeFontAndLineHeight(15)
        },
        inputBox: {
            height: BASE_DIMENSION * 5,
            borderRadius: BORDER_RADIUS,
            backgroundColor: theme.colors.inputBackground,
            paddingHorizontal: BASE_DIMENSION,
            flexDirection: 'row'
        },
        priceLabel: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            color: theme.colors.textSecondary,
            marginTop: BASE_DIMENSION
        },
        gasPriceUnit: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            color: theme.colors.textSecondary,
            paddingLeft: BASE_DIMENSION / 2,
            marginTop: BASE_DIMENSION
        },
        displayError: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(19),
            paddingLeft: BASE_DIMENSION,
            marginBottom: BASE_DIMENSION,
            color: theme.colors.error
        }
    });

'''
'''--- src/screens/send/components/enter-amount/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            marginTop: BASE_DIMENSION * 3,
            marginBottom: BASE_DIMENSION * 3
        },
        inputText: {
            flex: 1,
            color: theme.colors.text,
            fontSize: normalizeFontAndLineHeight(15),
            padding: 0,
            paddingRight: BASE_DIMENSION * 2
        },
        inputBox: {
            height: BASE_DIMENSION * 5,
            borderRadius: BORDER_RADIUS,
            backgroundColor: theme.colors.inputBackground,
            paddingHorizontal: BASE_DIMENSION,
            flexDirection: 'row'
        },
        displayError: {
            flex: 1,
            paddingLeft: BASE_DIMENSION,
            color: theme.colors.error,
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(19)
        },
        displayNotice: {
            flex: 1,
            paddingLeft: BASE_DIMENSION,
            color: theme.colors.warning,
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(19)
        },
        noticeView: {},
        receipientWarning: {
            paddingLeft: BASE_DIMENSION,
            marginBottom: BASE_DIMENSION,
            color: theme.colors.warning,
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(19)
        },
        buttonRightOptions: {
            width: '100%',
            flexDirection: 'row',
            marginVertical: BASE_DIMENSION,
            alignSelf: 'flex-end',
            justifyContent: 'space-between'
        },
        textBalance: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            color: theme.colors.textSecondary,
            marginRight: BASE_DIMENSION / 2
        },
        allBalanceText: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            color: theme.colors.accent
        },
        addValueBox: {
            flex: 1,
            borderWidth: 1,
            borderColor: theme.colors.textTertiary,
            borderRadius: BORDER_RADIUS,
            paddingVertical: BASE_DIMENSION,
            marginHorizontal: BASE_DIMENSION / 2
        },
        addValueText: {
            fontSize: normalizeFontAndLineHeight(12),
            lineHeight: normalizeFontAndLineHeight(16),
            color: theme.colors.text,
            textAlign: 'center'
        },
        amountsContainer: {
            flexDirection: 'row',
            justifyContent: 'space-between'
        },
        receipientLabel: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            paddingLeft: BASE_DIMENSION,
            color: theme.colors.textSecondary
        }
    });

'''
'''--- src/screens/send/components/extra-fields/memo/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalizeFontAndLineHeight
} from '../../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {},
        inputBoxTop: {
            marginTop: 0,
            marginBottom: BASE_DIMENSION
        },
        inputText: {
            flex: 1,
            color: theme.colors.text,
            paddingRight: BASE_DIMENSION * 2,
            fontSize: normalizeFontAndLineHeight(15)
        },
        inputBox: {
            height: BASE_DIMENSION * 5,
            borderRadius: BORDER_RADIUS,
            backgroundColor: theme.colors.inputBackground,
            paddingHorizontal: BASE_DIMENSION,
            flexDirection: 'row'
        },
        label: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            color: theme.colors.textSecondary,
            paddingLeft: BASE_DIMENSION,
            marginTop: BASE_DIMENSION
        }
    });

'''
'''--- src/screens/send/components/fee-options/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    LETTER_SPACING,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            marginBottom: BASE_DIMENSION
        },
        buttonRightOptions: {
            alignItems: 'flex-end',
            alignSelf: 'center'
        },
        textTranferButton: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            color: theme.colors.accent
        },
        list: {
            flexGrow: 1,
            justifyContent: 'flex-start'
        },
        displayErrorFees: {
            flex: 1,
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(19),
            paddingLeft: BASE_DIMENSION,
            color: theme.colors.error
        },
        retryButton: {
            marginHorizontal: BASE_DIMENSION * 2,
            marginTop: BASE_DIMENSION * 2,
            alignSelf: 'center',
            width: '50%'
        },
        retryContainer: {
            flex: 1,
            alignContent: 'center'
        },
        retryText: {
            fontSize: normalizeFontAndLineHeight(20),
            fontWeight: 'bold',
            letterSpacing: LETTER_SPACING,
            textAlign: 'center',
            color: theme.colors.text,
            marginTop: BASE_DIMENSION * 8,
            marginBottom: BASE_DIMENSION
        },
        retrySubtitleText: {
            fontSize: normalizeFontAndLineHeight(15),
            letterSpacing: LETTER_SPACING,
            textAlign: 'center',
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION
        }
    });

'''
'''--- src/screens/send/components/fee-preset/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            margin: BASE_DIMENSION,
            backgroundColor: theme.colors.cardBackground,
            borderRadius: BORDER_RADIUS,
            borderWidth: 2,
            borderColor: theme.colors.cardBackground,
            alignItems: 'center',
            padding: BASE_DIMENSION
        },
        containerSelected: {
            borderColor: theme.colors.accentSecondary
        },
        fee: {
            fontSize: normalizeFontAndLineHeight(16),
            lineHeight: normalizeFontAndLineHeight(21),
            color: theme.colors.textSecondary
        },
        feeConverted: {
            color: theme.colors.textSecondary,
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20)
        },
        containerFeeConverted: {
            flexDirection: 'row',
            alignItems: 'baseline'
        },
        feeTitle: {
            fontSize: normalizeFontAndLineHeight(16),
            lineHeight: normalizeFontAndLineHeight(25),
            color: theme.colors.textSecondary
        },
        textSelected: {
            color: theme.colors.text
        }
    });

'''
'''--- src/screens/send/components/fee-total/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {},
        feeTitle: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            color: theme.colors.textSecondary
        },
        feeWrapper: {
            borderRadius: BORDER_RADIUS,
            backgroundColor: theme.colors.cardBackground,
            paddingLeft: BASE_DIMENSION * 2,
            paddingVertical: BASE_DIMENSION
        },
        fee: {
            color: theme.colors.textSecondary,
            fontSize: normalizeFontAndLineHeight(16),
            lineHeight: normalizeFontAndLineHeight(21)
        },
        approxSign: {
            color: theme.colors.textSecondary
        },
        feeConverted: {
            color: theme.colors.textSecondary,
            fontSize: normalizeFontAndLineHeight(12),
            lineHeight: normalizeFontAndLineHeight(17)
        },
        containerFeeConverted: {
            paddingLeft: BASE_DIMENSION * 2,
            flexDirection: 'row',
            alignItems: 'baseline'
        }
    });

'''
'''--- src/screens/send/components/gas-fee-advanced/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 0
        },
        input: {
            flex: 1,
            color: theme.colors.text,
            paddingRight: BASE_DIMENSION * 2,
            fontSize: normalizeFontAndLineHeight(15)
        },
        inputBox: {
            height: BASE_DIMENSION * 5,
            borderRadius: BORDER_RADIUS,
            backgroundColor: theme.colors.inputBackground,
            paddingHorizontal: BASE_DIMENSION,
            flexDirection: 'row'
        },
        priceLabel: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            color: theme.colors.textSecondary,
            marginTop: BASE_DIMENSION
        },
        gasPriceUnit: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            color: theme.colors.textSecondary,
            paddingLeft: BASE_DIMENSION / 2,
            marginTop: BASE_DIMENSION
        },
        displayError: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(19),
            paddingLeft: BASE_DIMENSION,
            marginBottom: BASE_DIMENSION,
            color: theme.colors.error
        }
    });

'''
'''--- src/screens/send/components/header-step-by-step/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalize,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            marginHorizontal: BASE_DIMENSION * 2
        },
        headerRow: {
            flexDirection: 'row',
            justifyContent: 'center',
            marginHorizontal: BASE_DIMENSION,
            marginBottom: BASE_DIMENSION
        },
        headerDescription: {
            flexDirection: 'row',
            justifyContent: 'space-between',
            marginHorizontal: BASE_DIMENSION
        },
        circle: {
            flexDirection: 'column',
            justifyContent: 'center',
            height: normalize(40),
            width: normalize(40),
            borderRadius: normalize(20),
            backgroundColor: theme.colors.textTertiary
        },
        circleSelected: {
            backgroundColor: theme.colors.accentSecondary
        },
        number: {
            fontSize: normalizeFontAndLineHeight(19),
            lineHeight: normalizeFontAndLineHeight(24),
            textAlign: 'center',
            color: theme.colors.textSecondary
        },
        numberSelected: {
            color: theme.colors.accent
        },
        divider: {
            height: 2,
            alignSelf: 'center',
            backgroundColor: theme.colors.textTertiary
        },
        dividerSelected: {
            backgroundColor: theme.colors.accentSecondary
        },
        text: {
            fontSize: normalizeFontAndLineHeight(11),
            lineHeight: normalizeFontAndLineHeight(13),
            color: theme.colors.text,
            textAlign: 'center'
        }
    });

'''
'''--- src/screens/send/styles.ts ---
import { StyleSheet, Platform } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    SCREEN_HEIGHT,
    normalizeFontAndLineHeight,
    isIphoneXorAbove
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            flexDirection: 'column',
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT // used for web
        },
        content: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 3,
            paddingBottom: Platform.select({
                default: BASE_DIMENSION * 10,
                ios: isIphoneXorAbove() ? BASE_DIMENSION * 11 : BASE_DIMENSION * 10
            })
        },
        receipientLabel: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            paddingLeft: BASE_DIMENSION,
            color: theme.colors.textSecondary
        },
        inputBox: {
            height: BASE_DIMENSION * 5,
            borderRadius: BORDER_RADIUS,
            backgroundColor: theme.colors.inputBackground,
            paddingHorizontal: BASE_DIMENSION,
            flexDirection: 'row',
            justifyContent: 'space-between',
            alignItems: 'center'
        },
        displayAddress: {
            paddingLeft: BASE_DIMENSION,
            marginBottom: BASE_DIMENSION,
            color: theme.colors.textSecondary,
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(19)
        },
        icon: {
            color: theme.colors.accent
        },

        //
        amountContainer: {
            flex: 1,
            marginHorizontal: BASE_DIMENSION * 2
        },

        // step 3
        confirmTransactionContainer: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 3,
            paddingHorizontal: BASE_DIMENSION * 2
        },
        confirmTransactionText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.textSecondary,
            alignSelf: 'center'
        },

        // Other
        loadingModalContainer: {
            flexDirection: 'column',
            paddingHorizontal: BASE_DIMENSION * 4
        },
        loadingModalMessage: {
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.textSecondary,
            textAlign: 'center',
            marginTop: BASE_DIMENSION,
            marginBottom: BASE_DIMENSION * 8
        }
    });

'''
'''--- src/screens/settings/backup-wallet/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    LETTER_SPACING
} from '../../../styles/dimensions';
import { ph, pw } from '../../../styles';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            padding: BASE_DIMENSION,
            backgroundColor: theme.colors.appBackground,
            justifyContent: 'center'
        },
        logoImage: {
            height: ph(20),
            width: pw(40),
            alignSelf: 'center',
            resizeMode: 'contain'
        },
        launchingSoonText: {
            fontWeight: 'bold',
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            textAlign: 'center',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text,
            marginBottom: BASE_DIMENSION
        },
        workInProgress: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.textSecondary,
            textAlign: 'center'
        }
    });

'''
'''--- src/screens/settings/blockchain-portfolio/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../core/theme/itheme';
import { BASE_DIMENSION, SCREEN_HEIGHT } from '../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingHorizontal: BASE_DIMENSION * 2,
            paddingVertical: BASE_DIMENSION * 3,
            flexDirection: 'column',
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT
        }
    });

'''
'''--- src/screens/settings/network-options/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    LETTER_SPACING
} from '../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingHorizontal: BASE_DIMENSION * 2,
            paddingVertical: BASE_DIMENSION * 3,
            flexDirection: 'column',
            backgroundColor: theme.colors.appBackground
        },
        rowContainer: {
            flexDirection: 'row',
            paddingVertical: BASE_DIMENSION * 2,
            alignItems: 'center'
        },
        textHeader: {
            color: theme.colors.textSecondary,
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            marginTop: BASE_DIMENSION * 2
        },
        textRow: {
            flex: 1,
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(21),
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text
        },
        textRowValue: {
            fontSize: normalizeFontAndLineHeight(15),
            color: theme.colors.textSecondary,
            paddingRight: BASE_DIMENSION
        },
        switch: {
            justifyContent: 'flex-end',
            alignItems: 'flex-end',
            flex: 1,
            paddingRight: 0
        },
        divider: {
            width: '100%',
            height: 1,
            backgroundColor: theme.colors.settingsDivider
        },
        rightContainer: {
            flex: 1,
            flexDirection: 'row',
            alignItems: 'center',
            justifyContent: 'flex-end',
            paddingRight: BASE_DIMENSION
        },
        rightText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.textSecondary,
            marginRight: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/screens/settings/network-selection/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    LETTER_SPACING
} from '../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingHorizontal: BASE_DIMENSION * 2,
            paddingVertical: BASE_DIMENSION * 3,
            flexDirection: 'column',
            backgroundColor: theme.colors.appBackground
        },
        rowContainer: {
            flexDirection: 'row',
            paddingVertical: BASE_DIMENSION * 2,
            alignItems: 'center'
        },
        textRow: {
            flex: 1,
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(21),
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text
        },
        textRowValue: {
            fontSize: normalizeFontAndLineHeight(15),
            color: theme.colors.textSecondary,
            paddingRight: BASE_DIMENSION
        },
        divider: {
            width: '100%',
            height: 1,
            backgroundColor: theme.colors.settingsDivider
        },
        rightContainer: {
            flex: 1,
            flexDirection: 'row',
            alignItems: 'center'
        },
        rightText: {
            flex: 1,
            fontSize: normalizeFontAndLineHeight(12),
            lineHeight: normalizeFontAndLineHeight(16),
            color: theme.colors.textSecondary,
            marginRight: BASE_DIMENSION * 2
        },
        icon: {
            color: theme.colors.accent
        }
    });

'''
'''--- src/screens/settings/set-currency/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    LETTER_SPACING
} from '../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexGrow: 1,
            paddingHorizontal: BASE_DIMENSION * 2,
            paddingVertical: BASE_DIMENSION * 3,
            flexDirection: 'column',
            backgroundColor: theme.colors.appBackground
        },
        rowContainer: {
            flexDirection: 'row',
            paddingVertical: BASE_DIMENSION * 2,
            alignItems: 'center'
        },
        textRow: {
            flex: 1,
            fontSize: normalizeFontAndLineHeight(20),
            lineHeight: normalizeFontAndLineHeight(25),
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text
        },
        divider: {
            width: '100%',
            height: 1,
            backgroundColor: theme.colors.settingsDivider
        },
        icon: {
            paddingRight: 8,
            color: theme.colors.accent
        }
    });

'''
'''--- src/screens/settings/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    SCREEN_HEIGHT,
    LETTER_SPACING
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            flexDirection: 'column',
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT // used for web
        },
        scrollContainer: {
            flexGrow: 1,
            paddingHorizontal: BASE_DIMENSION * 2
        },
        rowContainer: {
            flexDirection: 'row',
            paddingVertical: BASE_DIMENSION * 2,
            alignItems: 'center'
        },
        colContainer: {
            flexDirection: 'column',
            paddingVertical: BASE_DIMENSION * 2
        },
        textHeader: {
            color: theme.colors.textSecondary,
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            marginTop: BASE_DIMENSION * 2
        },
        textRow: {
            flex: 1,
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(21),
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text
        },
        textRowMargin: {
            marginBottom: BASE_DIMENSION
        },
        rightValue: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.textTertiary,
            paddingRight: BASE_DIMENSION
        },
        divider: {
            width: '100%',
            height: 1,
            backgroundColor: theme.colors.settingsDivider
        },
        rightContainer: {
            flex: 1,
            flexDirection: 'row',
            justifyContent: 'flex-end',
            alignItems: 'center'
        },
        icon: {
            color: theme.colors.accent
        },
        button: {
            margin: BASE_DIMENSION * 3
        }
    });

'''
'''--- src/screens/smart-scan/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    SCREEN_HEIGHT,
    LETTER_SPACING
} from '../../styles/dimensions';
import { pw, ph } from '../../styles';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingHorizontal: BASE_DIMENSION * 2,
            paddingTop: BASE_DIMENSION * 3,
            justifyContent: 'center',
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT // used for web
        },
        logoImage: {
            height: ph(20),
            width: pw(40),
            alignSelf: 'center',
            resizeMode: 'contain'
        },
        textSection: {
            flex: 1,
            flexDirection: 'column',
            justifyContent: 'center'
        },
        launchingSoonText: {
            fontWeight: 'bold',
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            textAlign: 'center',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text,
            marginBottom: BASE_DIMENSION * 2
        },
        newSectionText: {
            lineHeight: normalizeFontAndLineHeight(22),
            textAlign: 'center',
            color: theme.colors.textSecondary
        },
        skeletonRow: {
            marginVertical: BASE_DIMENSION
        }
    });

'''
'''--- src/screens/smart-screen/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground
        },
        scrollView: {
            flexGrow: 1
        },
        errorContainer: {
            flex: 1,
            justifyContent: 'center'
        },
        gradientBackground: {
            position: 'absolute',
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            flex: 1
        },
        skeletonContainer: {
            flex: 1,
            padding: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/screens/statistics/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    SCREEN_HEIGHT,
    LETTER_SPACING
} from '../../styles/dimensions';
import { pw, ph } from '../../styles';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingHorizontal: BASE_DIMENSION * 2,
            paddingTop: BASE_DIMENSION * 3,
            justifyContent: 'center',
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT // used for web
        },
        logoImage: {
            height: ph(20),
            width: pw(40),
            alignSelf: 'center',
            resizeMode: 'contain'
        },
        textSection: {
            flex: 1,
            flexDirection: 'column',
            justifyContent: 'center'
        },
        launchingSoonText: {
            fontWeight: 'bold',
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            textAlign: 'center',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text,
            marginBottom: BASE_DIMENSION * 2
        },
        newSectionText: {
            lineHeight: normalizeFontAndLineHeight(22),
            textAlign: 'center',
            color: theme.colors.textSecondary
        },
        skeletonRow: {
            marginVertical: BASE_DIMENSION
        }
    });

'''
'''--- src/screens/terms-conditions/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground,
            justifyContent: 'center'
        }
    });

'''
'''--- src/screens/token/components/account-settings/components/view-key/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalizeFontAndLineHeight,
    LETTER_SPACING
} from '../../../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        contentContainer: {
            flex: 1,
            flexDirection: 'column'
        },
        keyWrapper: {
            flex: 1,
            justifyContent: 'center',
            paddingHorizontal: BASE_DIMENSION * 3
        },
        keyText: {
            color: theme.colors.text,
            fontSize: normalizeFontAndLineHeight(20),
            lineHeight: normalizeFontAndLineHeight(25),
            textAlign: 'center',
            letterSpacing: LETTER_SPACING,
            flexWrap: 'wrap',
            flexShrink: 1
        },
        tipWrapper: {
            flexDirection: 'row',
            backgroundColor: theme.colors.warning,
            padding: BASE_DIMENSION,
            borderRadius: BORDER_RADIUS,
            marginHorizontal: BASE_DIMENSION * 2,
            marginBottom: BASE_DIMENSION * 3
        },
        tipText: {
            flex: 1,
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            color: theme.colors.cardBackground
        },
        alertIcon: {
            alignSelf: 'center',
            color: theme.colors.cardBackground,
            marginRight: BASE_DIMENSION
        },
        divider: {
            width: '100%',
            height: 1,
            backgroundColor: 'rgba(0,0,0,0.4)',
            marginBottom: BASE_DIMENSION * 2
        },
        holdUnveilContainer: {
            flexDirection: 'row',
            paddingBottom: BASE_DIMENSION * 2,
            alignItems: 'center'
        },
        copyClipboardContainer: {
            flexDirection: 'row',
            paddingBottom: BASE_DIMENSION * 2,
            alignItems: 'center'
        },
        icon: {
            paddingHorizontal: BASE_DIMENSION * 2,
            color: theme.colors.accent
        },
        textRow: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.accent
        }
    });

'''
'''--- src/screens/token/components/account-settings/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    ICON_CONTAINER_SIZE,
    normalize,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            position: 'absolute',
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            backgroundColor: theme.colors.overlayBackground,
            flex: 1,
            justifyContent: 'center',
            alignContent: 'center'
        },
        modalContainer: {
            backgroundColor: theme.colors.cardBackground,
            height: normalize(380),
            borderRadius: BORDER_RADIUS * 2,
            marginHorizontal: BASE_DIMENSION * 3
        },
        contentContainer: {
            marginTop: BASE_DIMENSION * 5
        },
        rowContainer: {
            flexDirection: 'row',
            paddingVertical: BASE_DIMENSION * 2
        },
        rowChild: {
            flex: 1,
            flexDirection: 'row',
            justifyContent: 'space-between'
        },
        header: {
            height: ICON_CONTAINER_SIZE,
            alignItems: 'center',
            flexDirection: 'row',
            justifyContent: 'space-between',
            marginTop: BASE_DIMENSION
        },
        backButtonWrapper: {
            flex: 1
        },
        backButtonContainer: {
            flex: 1,
            flexDirection: 'row',
            paddingLeft: BASE_DIMENSION * 2
        },
        backText: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.text
        },
        doneWrapper: {
            flex: 1,
            alignItems: 'flex-end'
        },
        doneButton: {
            color: theme.colors.accent,
            paddingRight: BASE_DIMENSION * 2
        },
        titleWrapper: {
            flex: 2
        },
        title: {
            lineHeight: normalizeFontAndLineHeight(19),
            textAlign: 'center',
            fontWeight: 'bold'
        },
        leftIcon: {
            color: theme.colors.textSecondary,
            marginHorizontal: BASE_DIMENSION * 2
        },
        rightIcon: {
            color: theme.colors.accent,
            marginHorizontal: BASE_DIMENSION * 2
        },
        icon: {
            color: theme.colors.accent,
            alignSelf: 'center'
        },
        textRow: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.textSecondary
        }
    });

'''
'''--- src/screens/token/components/add-token/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    SCREEN_HEIGHT,
    normalizeFontAndLineHeight,
    LETTER_SPACING,
    normalize
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground,
            paddingVertical: BASE_DIMENSION * 6,
            paddingHorizontal: BASE_DIMENSION * 2,
            height: SCREEN_HEIGHT
        },
        amountText: {
            fontSize: normalizeFontAndLineHeight(18),
            lineHeight: normalizeFontAndLineHeight(25),
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text,
            fontWeight: '500',
            alignSelf: 'center'
        },
        amountConvertedText: {
            fontSize: normalizeFontAndLineHeight(16),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.textSecondary
        },
        addButton: {
            marginHorizontal: BASE_DIMENSION * 2,
            paddingTop: BASE_DIMENSION
        },

        // Swipeable left actions
        leftActionsContainer: {
            flexDirection: 'row'
        },
        action: {
            justifyContent: 'center',
            alignItems: 'center',
            width: normalize(72)
        },
        iconActionPositive: {
            height: normalize(40),
            color: theme.colors.accent
        },
        iconActionNegative: {
            height: normalize(40),
            color: theme.colors.error
        },
        textActionPositive: {
            fontSize: normalizeFontAndLineHeight(10),
            color: theme.colors.accent
        },
        textActionNegative: {
            fontSize: normalizeFontAndLineHeight(10),
            color: theme.colors.error
        }
    });

'''
'''--- src/screens/token/components/default-token/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import { ph, pw } from '../../../../styles';
import {
    BASE_DIMENSION,
    LETTER_SPACING,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground,
            paddingHorizontal: BASE_DIMENSION
        },
        scrollContainer: {
            flexGrow: 1,
            paddingTop: BASE_DIMENSION * 5
        },
        balanceContainer: {
            marginTop: BASE_DIMENSION,
            flexWrap: 'wrap',
            justifyContent: 'center',
            flexDirection: 'row'
        },
        buttonsContainer: {
            marginTop: BASE_DIMENSION * 8,
            marginBottom: BASE_DIMENSION * 2,
            marginHorizontal: BASE_DIMENSION,
            flexWrap: 'wrap',
            justifyContent: 'center',
            flexDirection: 'row'
        },
        button: {
            marginHorizontal: BASE_DIMENSION / 2
        },
        transactionsTitle: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            color: theme.colors.text,
            opacity: 0.87,
            fontWeight: 'bold',
            marginLeft: BASE_DIMENSION * 2
        },
        emptySection: {
            flex: 1,
            flexDirection: 'column',
            justifyContent: 'center'
        },
        logoImage: {
            height: ph(20),
            width: pw(50),
            alignSelf: 'center',
            resizeMode: 'contain',
            marginBottom: BASE_DIMENSION * 2
        },
        emptySectionTitle: {
            fontWeight: 'bold',
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            textAlign: 'center',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION
        },
        emptySectionSubtitle: {
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.textTertiary,
            textAlign: 'center',
            paddingHorizontal: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/screens/token/components/delegate-token/components/stats-component/styles.ts ---
import { StyleSheet } from 'react-native';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalizeFontAndLineHeight
} from '../../../../../../styles/dimensions';
import { ITheme } from '../../../../../../core/theme/itheme';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexDirection: 'column'
        },
        topStatsContainer: {
            flexDirection: 'row',
            backgroundColor: theme.colors.cardBackground,
            borderRadius: BORDER_RADIUS,
            paddingVertical: BASE_DIMENSION,
            justifyContent: 'space-evenly'
        },
        statContainer: {
            flexDirection: 'column'
        },
        statLabelText: {
            fontSize: normalizeFontAndLineHeight(11),
            lineHeight: normalizeFontAndLineHeight(13),
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION / 2,
            textAlign: 'center'
        },
        statValueText: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            fontWeight: '600',
            color: theme.colors.text,
            textAlign: 'center'
        },
        accountSummary: {
            marginVertical: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/screens/token/components/delegate-token/components/tabs/account-tab/styles.ts ---
import { StyleSheet } from 'react-native';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    LETTER_SPACING
} from '../../../../../../../styles/dimensions';
import { ITheme } from '../../../../../../../core/theme/itheme';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground,
            paddingHorizontal: BASE_DIMENSION,
            marginTop: BASE_DIMENSION * 3,
            paddingBottom: BASE_DIMENSION * 5
        },
        text: {
            fontWeight: 'bold',
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            textAlign: 'center',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text,
            marginBottom: BASE_DIMENSION * 2
        },
        bottomContainer: {
            marginTop: BASE_DIMENSION * 3,
            marginHorizontal: BASE_DIMENSION * 2
        },
        buttonsRowContainer: {
            flexDirection: 'row',
            marginBottom: BASE_DIMENSION * 2,
            marginHorizontal: -BASE_DIMENSION / 2 // used to remove horizontal margins from buttons
        },
        button: {
            marginHorizontal: BASE_DIMENSION / 2
        },
        affiliateBanner: {
            marginTop: BASE_DIMENSION,
            marginBottom: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/screens/token/components/delegate-token/components/tabs/delegations-tab/styles.ts ---
import { StyleSheet } from 'react-native';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    LETTER_SPACING
} from '../../../../../../../styles/dimensions';
import { ITheme } from '../../../../../../../core/theme/itheme';
import { ph, pw } from '../../../../../../../styles';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground,
            paddingHorizontal: BASE_DIMENSION,
            marginTop: BASE_DIMENSION * 3,
            paddingBottom: BASE_DIMENSION * 5
        },
        inputContainer: {
            marginHorizontal: BASE_DIMENSION * 2,
            marginBottom: BASE_DIMENSION
        },
        bottomContainer: {
            marginTop: BASE_DIMENSION * 3,
            marginHorizontal: BASE_DIMENSION * 2
        },
        text: {
            fontWeight: 'bold',
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            textAlign: 'center',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text,
            marginBottom: BASE_DIMENSION * 2
        },
        emptySection: {
            flex: 1,
            flexDirection: 'column',
            justifyContent: 'center'
        },
        logoImage: {
            height: ph(20),
            width: pw(50),
            alignSelf: 'center',
            resizeMode: 'contain',
            marginBottom: BASE_DIMENSION * 2
        },
        noValidatorsText: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            fontWeight: 'bold',
            textAlign: 'center',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION * 2
        },
        sectionAvailableText: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            textAlign: 'center',
            color: theme.colors.textTertiary,
            paddingHorizontal: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/screens/token/components/delegate-token/components/tabs/transactions-tab/styles.ts ---
import { StyleSheet } from 'react-native';
import { BASE_DIMENSION } from '../../../../../../../styles/dimensions';
import { ITheme } from '../../../../../../../core/theme/itheme';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground,
            marginTop: BASE_DIMENSION,
            marginHorizontal: -BASE_DIMENSION - BASE_DIMENSION / 2 // TODO: fix this later on
        }
    });

'''
'''--- src/screens/token/components/delegate-token/components/tabs/validators-tab/styles.ts ---
import { StyleSheet } from 'react-native';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    LETTER_SPACING
} from '../../../../../../../styles/dimensions';
import { ITheme } from '../../../../../../../core/theme/itheme';
import { ph, pw } from '../../../../../../../styles';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground,
            paddingHorizontal: BASE_DIMENSION,
            marginTop: BASE_DIMENSION * 3,
            paddingBottom: BASE_DIMENSION * 5
        },
        inputContainer: {
            marginHorizontal: BASE_DIMENSION * 2,
            marginBottom: BASE_DIMENSION
        },
        text: {
            fontWeight: 'bold',
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            textAlign: 'center',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text,
            marginBottom: BASE_DIMENSION * 2
        },
        bottomContainer: {
            marginTop: BASE_DIMENSION * 3,
            marginHorizontal: BASE_DIMENSION * 2
        },
        emptySection: {
            flex: 1,
            flexDirection: 'column',
            justifyContent: 'center'
        },
        logoImage: {
            height: ph(20),
            width: pw(50),
            alignSelf: 'center',
            resizeMode: 'contain',
            marginBottom: BASE_DIMENSION * 2
        },
        noNodesText: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            fontWeight: 'bold',
            textAlign: 'center',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/screens/token/components/delegate-token/components/validators/validator-card/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../../../../core/theme/itheme';
import {
    BORDER_RADIUS,
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    ICON_CONTAINER_SIZE
} from '../../../../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        cardContainer: {
            backgroundColor: theme.colors.cardBackground,
            flexDirection: 'column',
            borderRadius: BORDER_RADIUS,
            paddingVertical: BASE_DIMENSION * 2,
            paddingLeft: BASE_DIMENSION * 2,
            paddingRight: BASE_DIMENSION * 3,
            marginBottom: BASE_DIMENSION
        },
        topContainer: {
            flexDirection: 'row',
            marginBottom: BASE_DIMENSION * 2
        },
        topRow: {
            flex: 1,
            flexDirection: 'column',
            marginRight: BASE_DIMENSION * 4
        },
        topRowFirstLine: {
            flexDirection: 'row',
            justifyContent: 'space-between',
            paddingBottom: BASE_DIMENSION / 2
        },
        topRowSecondLine: {
            flexDirection: 'row',
            justifyContent: 'space-between'
        },
        primaryTextContainer: {
            flexDirection: 'row',
            alignItems: 'baseline'
        },
        primaryText: {
            fontSize: normalizeFontAndLineHeight(16),
            fontWeight: '500',
            color: theme.colors.text
        },
        secondaryText: {
            fontSize: normalizeFontAndLineHeight(11),
            lineHeight: normalizeFontAndLineHeight(13),
            color: theme.colors.textSecondary
        },
        tertiaryText: {
            fontSize: normalizeFontAndLineHeight(10),
            color: theme.colors.textTertiary
        },
        imageStyle: {
            width: ICON_CONTAINER_SIZE,
            height: ICON_CONTAINER_SIZE,
            marginRight: BASE_DIMENSION + BASE_DIMENSION / 2,
            marginTop: BASE_DIMENSION / 2,
            borderRadius: ICON_CONTAINER_SIZE
        },
        amountText: {
            fontSize: normalizeFontAndLineHeight(11),
            color: theme.colors.text
        },
        chevronRight: {
            alignSelf: 'flex-end',
            color: theme.colors.accent
        },
        bottomContainer: {
            flexDirection: 'row',
            justifyContent: 'space-between'
        },
        bottomPrimaryText: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            fontWeight: '600',
            color: theme.colors.text,
            textAlign: 'center'
        },
        bottomSecondaryText: {
            fontSize: normalizeFontAndLineHeight(11),
            lineHeight: normalizeFontAndLineHeight(13),
            color: theme.colors.textSecondary,
            textAlign: 'center'
        }
    });

'''
'''--- src/screens/token/components/delegate-token/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalizeFontAndLineHeight
} from '../../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground,
            paddingHorizontal: BASE_DIMENSION,
            marginTop: BASE_DIMENSION * 3
        },
        tabContainer: {
            flexDirection: 'row',
            paddingHorizontal: BASE_DIMENSION // TODO: remove this if screen already has this
        },
        tabInactive: {
            flex: 1,
            paddingVertical: BASE_DIMENSION,
            borderRadius: BORDER_RADIUS * 2
        },
        tabActive: {
            backgroundColor: theme.colors.textTertiary
        },
        tabTextActive: {
            color: theme.colors.accent // this is for active
        },
        tabTextInactive: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            textAlign: 'center',
            color: theme.colors.textSecondary // this is for inactive
        }
    });

'''
'''--- src/screens/token/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION, normalizeFontAndLineHeight, SCREEN_HEIGHT } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT // used for web
        },
        scrollContainer: {
            flexGrow: 1,
            paddingTop: BASE_DIMENSION * 5
        },
        balanceContainer: {
            marginTop: BASE_DIMENSION,
            flexWrap: 'wrap',
            justifyContent: 'center',
            flexDirection: 'row'
        },
        buttonsContainer: {
            marginTop: BASE_DIMENSION * 8,
            marginBottom: BASE_DIMENSION * 2,
            marginHorizontal: BASE_DIMENSION,
            flexWrap: 'wrap',
            justifyContent: 'center',
            flexDirection: 'row'
        },
        button: {
            flex: 1,
            marginHorizontal: BASE_DIMENSION / 2
        },
        transactionsTitle: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            color: theme.colors.text,
            opacity: 0.87,
            fontWeight: 'bold',
            marginLeft: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/screens/total-balance/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION, normalizeFontAndLineHeight } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground,
            paddingHorizontal: BASE_DIMENSION * 2,
            paddingVertical: BASE_DIMENSION * 4
        },
        rowContainer: {
            flexDirection: 'row'
        },
        cumulativeText: {
            fontSize: normalizeFontAndLineHeight(20),
            color: theme.colors.text
        },
        switch: {
            justifyContent: 'flex-end',
            alignItems: 'flex-end',
            flex: 1,
            paddingRight: 0
        },
        cumulativeTextInfo: {
            color: theme.colors.textSecondary,
            marginTop: BASE_DIMENSION * 4
        }
    });

'''
'''--- src/screens/transaction-details/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION, normalizeFontAndLineHeight, SCREEN_HEIGHT } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 4,
            paddingBottom: BASE_DIMENSION * 2,
            paddingHorizontal: BASE_DIMENSION * 2,
            flexDirection: 'column',
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT
        },
        scrollConainter: {
            flexGrow: 1,
            paddingBottom: BASE_DIMENSION * 2
        },
        rowContainer: {
            flexDirection: 'column',
            paddingVertical: BASE_DIMENSION,
            marginBottom: BASE_DIMENSION + BASE_DIMENSION / 2
        },
        transactionIdContainer: {
            flexDirection: 'row',
            paddingVertical: BASE_DIMENSION,
            marginBottom: BASE_DIMENSION + BASE_DIMENSION / 2
        },
        transactionId: {
            flex: 1,
            flexDirection: 'column',
            paddingRight: BASE_DIMENSION * 4
        },
        textPrimary: {
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.text,
            marginBottom: BASE_DIMENSION / 2
        },
        textSecondary: {
            fontSize: normalizeFontAndLineHeight(16),
            lineHeight: normalizeFontAndLineHeight(21),
            color: theme.colors.textTertiary
        },
        icon: {
            color: theme.colors.accent,
            alignSelf: 'center'
        },
        removeTxButton: {
            borderColor: theme.colors.error
        },
        removeTxButtonText: {
            color: theme.colors.error
        }
    });

'''
'''--- src/screens/transaction-request/qr-code-tx-request/styles.ts ---
import { StyleSheet, Platform } from 'react-native';
import { ITheme } from '../../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    BORDER_RADIUS,
    isIphoneXorAbove
} from '../../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flexGrow: 1,
            paddingHorizontal: BASE_DIMENSION * 2,
            paddingBottom: Platform.select({
                default: BASE_DIMENSION * 10,
                ios: isIphoneXorAbove() ? BASE_DIMENSION * 11 : BASE_DIMENSION * 10
            })
        },
        inputContainer: {
            flexDirection: 'column',
            marginBottom: BASE_DIMENSION
        },
        receipientLabel: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            paddingLeft: BASE_DIMENSION,
            color: theme.colors.textSecondary
        },
        inputBox: {
            height: BASE_DIMENSION * 5,
            borderRadius: BORDER_RADIUS,
            backgroundColor: theme.colors.inputBackground,
            paddingHorizontal: BASE_DIMENSION,
            flexDirection: 'row',
            justifyContent: 'space-between',
            alignItems: 'center'
        },
        confirmTransactionText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.textSecondary,
            alignSelf: 'center'
        },
        inputText: {
            flex: 1,
            color: theme.colors.textSecondary,
            paddingRight: BASE_DIMENSION * 2,
            fontSize: normalizeFontAndLineHeight(15)
        },
        leftIcon: {
            color: theme.colors.accent,
            alignSelf: 'center',
            paddingRight: BASE_DIMENSION
        },
        insufficientFunds: {
            fontSize: normalizeFontAndLineHeight(14),
            lineHeight: normalizeFontAndLineHeight(19),
            color: theme.colors.error,
            marginBottom: BASE_DIMENSION
        }
    });

'''
'''--- src/screens/transaction-request/styles.ts ---
import { StyleSheet, Platform } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    BORDER_RADIUS,
    isIphoneXorAbove,
    LETTER_SPACING
} from '../../styles/dimensions';
import { pw, ph } from '../../styles';

// TODO: check this or find a better way
export const CONTAINER_TOP_PADDING =
    Platform.OS === 'ios'
        ? isIphoneXorAbove()
            ? BASE_DIMENSION * 8
            : BASE_DIMENSION * 6
        : BASE_DIMENSION * 2;

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            position: 'absolute',
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            flex: 1,
            backgroundColor: theme.colors.appBackground,
            paddingTop: CONTAINER_TOP_PADDING
        },
        closeButtonContainer: {
            position: 'absolute',
            top: CONTAINER_TOP_PADDING - BASE_DIMENSION / 2,
            left: BASE_DIMENSION + BASE_DIMENSION / 2,
            padding: BASE_DIMENSION
        },
        closeButton: {
            color: theme.colors.accent,
            alignSelf: 'center'
        },
        title: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            color: theme.colors.text,
            letterSpacing: LETTER_SPACING,
            textAlign: 'center',
            fontWeight: 'bold',
            marginBottom: BASE_DIMENSION
        },
        content: {
            flex: 1,
            paddingTop: BASE_DIMENSION * 4 // maybe remove this
        },
        moonletTransferContainer: {
            flex: 1,
            paddingHorizontal: BASE_DIMENSION * 2
        },
        errorWrapper: {
            flex: 1,
            paddingHorizontal: BASE_DIMENSION * 3,
            paddingBottom: BASE_DIMENSION * 6
        },
        inputContainer: {
            flexDirection: 'column',
            marginBottom: BASE_DIMENSION
        },
        receipientLabel: {
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            paddingLeft: BASE_DIMENSION,
            color: theme.colors.textSecondary
        },
        inputBox: {
            height: BASE_DIMENSION * 5,
            borderRadius: BORDER_RADIUS,
            backgroundColor: theme.colors.inputBackground,
            paddingHorizontal: BASE_DIMENSION,
            flexDirection: 'row',
            justifyContent: 'space-between',
            alignItems: 'center'
        },
        confirmTransactionText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.textSecondary,
            alignSelf: 'center'
        },
        errorContainer: {
            flex: 1,
            justifyContent: 'center',
            flexDirection: 'column'
        },
        logoImage: {
            height: ph(30),
            width: pw(60),
            alignSelf: 'center',
            resizeMode: 'contain',
            marginBottom: BASE_DIMENSION
        },
        errorMessage: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            textAlign: 'center',
            color: theme.colors.textSecondary
        }
    });

'''
'''--- src/screens/transactions-history/list-transactions-history/styles.ts ---
import { StyleSheet } from 'react-native';
import {
    BASE_DIMENSION,
    BORDER_RADIUS,
    normalizeFontAndLineHeight,
    LETTER_SPACING
} from '../../../styles/dimensions';
import { ITheme } from '../../../core/theme/itheme';
import { ph, pw } from '../../../styles';

export default (theme: ITheme) =>
    StyleSheet.create({
        transactionsContainer: {
            flex: 1,
            padding: BASE_DIMENSION * 2
        },
        transactionListItem: {
            flexDirection: 'row',
            paddingHorizontal: BASE_DIMENSION,
            borderRadius: BORDER_RADIUS,
            marginBottom: BASE_DIMENSION
        },
        transactionIconContainer: {
            justifyContent: 'center',
            marginRight: BASE_DIMENSION
        },
        transactionIcon: {
            alignSelf: 'center'
        },
        transactionTextContainer: {
            flex: 1,
            marginLeft: BASE_DIMENSION
        },
        transactionAmountContainer: {
            flexDirection: 'row',
            alignItems: 'baseline'
        },
        transactionTextPrimary: {
            lineHeight: normalizeFontAndLineHeight(21),
            color: theme.colors.text
        },
        transactionTextSecondary: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.textTertiary
        },
        transactionRightIcon: {
            color: theme.colors.accent,
            alignSelf: 'center'
        },
        emptySection: {
            flex: 1,
            flexDirection: 'column',
            justifyContent: 'center'
        },
        logoImage: {
            height: ph(20),
            width: pw(50),
            alignSelf: 'center',
            resizeMode: 'contain',
            marginBottom: BASE_DIMENSION * 2
        },
        noTransactionsText: {
            fontWeight: 'bold',
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            textAlign: 'center',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.textSecondary,
            marginBottom: BASE_DIMENSION
        },
        transactionHistoryText: {
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.textTertiary,
            textAlign: 'center',
            paddingHorizontal: BASE_DIMENSION * 2
        },
        transactionListItemPending: {
            backgroundColor: theme.colors.cardBackground,
            paddingVertical: BASE_DIMENSION * 2
        },
        transactionListItemOthers: {
            backgroundColor: theme.colors.appBackground,
            paddingVertical: BASE_DIMENSION
        }
    });

'''
'''--- src/screens/transactions-history/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { SCREEN_HEIGHT } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT // used for web
        }
    });

'''
'''--- src/screens/validator-screen/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { ph, pw } from '../../styles';
import {
    SCREEN_HEIGHT,
    BASE_DIMENSION,
    normalize,
    normalizeFontAndLineHeight,
    LETTER_SPACING
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT,
            paddingVertical: BASE_DIMENSION * 5,
            paddingHorizontal: BASE_DIMENSION * 3
        },
        topContainer: {
            flexDirection: 'column',
            marginBottom: BASE_DIMENSION * 3,
            alignItems: 'center'
        },
        topText: {
            fontSize: normalizeFontAndLineHeight(15),
            lineHeight: normalizeFontAndLineHeight(20),
            color: theme.colors.textSecondary
        },
        title: {
            fontSize: normalizeFontAndLineHeight(30),
            lineHeight: normalizeFontAndLineHeight(41),
            color: theme.colors.white,
            letterSpacing: LETTER_SPACING,
            marginVertical: BASE_DIMENSION,
            textAlign: 'center'
        },
        token: {
            fontSize: normalizeFontAndLineHeight(16),
            lineHeight: normalizeFontAndLineHeight(21),
            color: theme.colors.white
        },
        subTitle: {
            fontSize: normalizeFontAndLineHeight(16),
            lineHeight: normalizeFontAndLineHeight(21),
            color: theme.colors.text,
            textAlign: 'center'
        },
        bottomContainer: {
            marginHorizontal: BASE_DIMENSION
        },
        addressNoExistContainer: {
            flex: 1,
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT,
            justifyContent: 'center'
        },
        logoImage: {
            height: ph(20),
            width: pw(50),
            alignSelf: 'center',
            resizeMode: 'contain',
            marginBottom: BASE_DIMENSION * 2
        },

        // navigation
        navigationImage: {
            height: normalize(36),
            width: normalize(36),
            borderRadius: normalize(36),
            marginRight: BASE_DIMENSION * 2,
            alignSelf: 'center'
        },
        labelName: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            fontWeight: 'bold',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.white,
            textAlign: 'center'
        },
        website: {
            fontSize: normalizeFontAndLineHeight(11),
            lineHeight: normalizeFontAndLineHeight(13),
            color: theme.colors.textSecondary,
            textAlign: 'center'
        }
    });

'''
'''--- src/screens/view-wallet-mnemonic/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { BASE_DIMENSION, BORDER_RADIUS, normalizeFontAndLineHeight } from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            padding: BASE_DIMENSION * 2,
            flexDirection: 'column',
            backgroundColor: theme.colors.appBackground
        },
        topContainer: {
            flex: 1
        },
        bottomContainer: {
            marginHorizontal: BASE_DIMENSION * 2,
            marginBottom: BASE_DIMENSION * 4
        },
        mnemonicContainer: {
            backgroundColor: theme.colors.cardBackground,
            borderRadius: BORDER_RADIUS,
            alignSelf: 'stretch',
            padding: BASE_DIMENSION * 2,
            marginVertical: BASE_DIMENSION * 2
        },
        mnemonicLine: {
            flexDirection: 'row',
            paddingVertical: BASE_DIMENSION
        },
        mnemonicWord: {
            flex: 1,
            flexBasis: 0
        },
        tipWrapper: {
            flexDirection: 'row',
            backgroundColor: theme.colors.warning,
            padding: BASE_DIMENSION,
            borderRadius: BORDER_RADIUS
        },
        tipText: {
            flex: 1,
            fontSize: normalizeFontAndLineHeight(13),
            lineHeight: normalizeFontAndLineHeight(18),
            color: theme.colors.cardBackground
        },
        alertIcon: {
            alignSelf: 'center',
            color: theme.colors.cardBackground,
            marginRight: BASE_DIMENSION
        },
        unveilButton: {
            marginTop: BASE_DIMENSION * 2
        }
    });

'''
'''--- src/screens/wallets/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import { ph, pw } from '../../styles';
import {
    BASE_DIMENSION,
    SCREEN_HEIGHT,
    normalize,
    normalizeFontAndLineHeight,
    LETTER_SPACING
} from '../../styles/dimensions';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            padding: BASE_DIMENSION * 2,
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT // used for web
        },
        scrollContainer: {
            flex: 1,
            marginBottom: BASE_DIMENSION * 2
        },
        walletList: {
            flexGrow: 1,
            paddingVertical: BASE_DIMENSION * 2
        },
        buttonContainer: {
            flexDirection: 'row',
            marginBottom: BASE_DIMENSION * 3
        },
        bottomButton: {
            marginHorizontal: BASE_DIMENSION / 2
        },
        leftActionsContainer: {
            flexDirection: 'row'
        },
        action: {
            justifyContent: 'center',
            alignItems: 'center',
            width: normalize(72)
        },
        iconActionPositive: {
            height: normalize(40),
            color: theme.colors.accent
        },
        iconActionNegative: {
            height: normalize(40),
            color: theme.colors.error
        },
        textActionPositive: {
            fontSize: normalizeFontAndLineHeight(10),
            color: theme.colors.accent
        },
        textActionNegative: {
            fontSize: normalizeFontAndLineHeight(10),
            color: theme.colors.error
        },
        emptyWalletsContainer: {
            flex: 1,
            alignSelf: 'center',
            justifyContent: 'center'
        },
        connectLedger: {
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            color: theme.colors.text,
            letterSpacing: LETTER_SPACING,
            fontWeight: 'bold',
            marginBottom: BASE_DIMENSION,
            textAlign: 'center'
        },
        quicklyConnectLedger: {
            fontSize: normalizeFontAndLineHeight(17),
            lineHeight: normalizeFontAndLineHeight(22),
            color: theme.colors.textSecondary,
            textAlign: 'center',
            paddingHorizontal: BASE_DIMENSION * 4
        },
        logoImage: {
            height: ph(30),
            width: pw(60),
            alignSelf: 'center',
            resizeMode: 'contain',
            marginBottom: BASE_DIMENSION * 6
        },
        affiliateBanner: {
            marginTop: BASE_DIMENSION * 4
        }
    });

'''
'''--- src/screens/watch/styles.ts ---
import { StyleSheet } from 'react-native';
import { ITheme } from '../../core/theme/itheme';
import {
    BASE_DIMENSION,
    normalizeFontAndLineHeight,
    SCREEN_HEIGHT,
    LETTER_SPACING
} from '../../styles/dimensions';
import { pw, ph } from '../../styles';

export default (theme: ITheme) =>
    StyleSheet.create({
        container: {
            flex: 1,
            paddingHorizontal: BASE_DIMENSION * 2,
            paddingTop: BASE_DIMENSION * 3,
            justifyContent: 'center',
            backgroundColor: theme.colors.appBackground,
            height: SCREEN_HEIGHT // used for web
        },
        logoImage: {
            height: ph(20),
            width: pw(40),
            alignSelf: 'center',
            resizeMode: 'contain'
        },
        textSection: {
            flex: 1,
            flexDirection: 'column',
            justifyContent: 'center'
        },
        launchingSoonText: {
            fontWeight: 'bold',
            fontSize: normalizeFontAndLineHeight(22),
            lineHeight: normalizeFontAndLineHeight(28),
            textAlign: 'center',
            letterSpacing: LETTER_SPACING,
            color: theme.colors.text,
            marginBottom: BASE_DIMENSION * 2
        },
        newSectionText: {
            lineHeight: normalizeFontAndLineHeight(22),
            textAlign: 'center',
            color: theme.colors.textSecondary
        },
        skeletonRow: {
            marginVertical: BASE_DIMENSION
        }
    });

'''
'''--- src/styles/colors.ts ---
export const COLORS = {
    WHITE: '#FFFFFF',
    BLACK: '#000000',

    AQUA: '#00DAFF', // main color
    LIGHT_AQUA: '#00515E', // cards outline

    GAINSBORO_WHITE: '#E0E0E0', // WHITE_87: headers from page
    DARK_GRAY: '#B1B1B1', // WHITE_67 - texts from page
    DIM_GRAY: '#6A6A6A', // WHITE_37 - texts from fields

    SHARK_GRAY: '#28282A', // all cards
    COD_GRAY: '#121212', // page background
    VERY_DARK_GRAY: '#1A1A1A', // bottom sheet
    GUN_POWDER_GRAY: '#4E4E53', // input background

    HOT_GREEN: '#00E676',
    LIME_GREEN: '#27AE60',

    HOT_RED: '#E91E63',
    LIGHT_RED: '#FFAB91',
    YELLOW: '#F2C94C',

    // Validators
    GREEN: '#00E676'
};

'''
'''--- src/styles/common.ts ---
import { Dimensions } from 'react-native';

const { width, height } = Dimensions.get('window');
const widthPercent = width / 100;
const heightPercent = height / 100;

// percentage of screen width
export const pw = (d: number) => widthPercent * d;

// percentage of screen height
export const ph = (d: number) => heightPercent * d;

export const adjustColor = (color: string, amount: number) => {
    return (
        '#' +
        color
            .replace(/^#/, '')
            .replace(/../g, c =>
                ('0' + Math.min(255, Math.max(0, parseInt(c, 16) + amount)).toString(16)).substr(-2)
            )
    );
};

'''
'''--- src/styles/dimensions.ts ---
import { Platform, Dimensions, PixelRatio } from 'react-native';
import DeviceInfo from 'react-native-device-info';

export const { width: SCREEN_WIDTH } = Dimensions.get('window');

// based on iPhone 11's scale
const scale = SCREEN_WIDTH / 414;
export const SCALE = scale;

// can be used for width, height, top, bottom, fontSize, borderRadius, margin, padding, etc.
export const normalize = (size: number) => Math.round(PixelRatio.roundToNearestPixel(size * scale));

export const normalizeFontAndLineHeight = (size: number) => {
    const fontScale = __DEV__ ? 1 : DeviceInfo.getFontScaleSync();

    if (fontScale && Number(fontScale)) {
        return Math.round(PixelRatio.roundToNearestPixel(size / Number(fontScale)));
    } else {
        return normalize(size);
    }
};

export const normalizeLetterSpacing = (size: number) => Number((size * scale).toFixed(2));

export const BORDER_RADIUS = normalize(8);
export const BASE_DIMENSION = normalize(8);
export const ICON_SIZE = normalize(24);
export const ICON_CONTAINER_SIZE = normalize(44);
export const LETTER_SPACING = normalizeLetterSpacing(0.38);

export const SCREEN_HEIGHT =
    Platform.OS === 'web' ? Dimensions.get('window').height - 64 : Dimensions.get('window').height;

export const isIphoneXorAbove = () =>
    Platform.OS === 'ios' &&
    ((SCREEN_WIDTH === 375 && SCREEN_HEIGHT === 812) || // iPhone X, XS, 11 Pro
        (SCREEN_WIDTH === 414 && SCREEN_HEIGHT === 896)); // iPhone XS Max, XR, 11, 11 Pro Max

'''
'''--- src/styles/index.ts ---
export * from './colors';
export * from './common';

'''
'''--- src/styles/themes/dark-theme.ts ---
import { ITheme } from '../../core/theme/itheme';
import { COLORS } from '../colors';

export const darkTheme: ITheme = {
    dark: true,
    shadowGradient: ['#00000000', '#000000CC'],

    fontSize: {
        small: 12,
        regular: 16,
        large: 20
    },

    colors: {
        accent: COLORS.AQUA,
        accentSecondary: COLORS.LIGHT_AQUA,

        text: COLORS.GAINSBORO_WHITE,
        textSecondary: COLORS.DARK_GRAY,
        textTertiary: COLORS.DIM_GRAY,

        positive: COLORS.HOT_GREEN,
        positiveSecondary: COLORS.LIME_GREEN,

        negative: COLORS.HOT_RED,
        error: COLORS.LIGHT_RED,
        warning: COLORS.YELLOW,

        cardBackground: COLORS.SHARK_GRAY,
        appBackground: COLORS.COD_GRAY,
        bottomSheetBackground: COLORS.VERY_DARK_GRAY,
        overlayBackground: COLORS.BLACK + '90',

        settingsDivider: COLORS.BLACK,
        inputBackground: COLORS.GUN_POWDER_GRAY,
        disabledButton: COLORS.DARK_GRAY,

        gradientLight: COLORS.COD_GRAY,
        gradientDark: COLORS.BLACK,

        labelUndelegate: COLORS.LIGHT_RED,
        labelRedelegate: COLORS.HOT_RED,
        labelReward: COLORS.GREEN,

        white: COLORS.WHITE,
        black: COLORS.BLACK
    }
};

'''
'''--- src/styles/themes/light-theme.ts ---
import { ITheme } from '../../core/theme/itheme';
import { darkTheme } from './dark-theme';

export const lightTheme: ITheme = darkTheme;

'''
'''--- src/typings.d.ts ---
declare module 'react-native-camera-kit';
declare module '@ledgerhq/react-native-hw-transport-ble';
declare module '*.svg' {
    const content: React.FunctionComponent<React.SVGAttributes<SVGElement>>;
    export default content;
}

'''
'''--- tsconfig.json ---
{
    "compilerOptions": {
        "allowJs": true,
        "allowSyntheticDefaultImports": true,
        "experimentalDecorators": true,
        "esModuleInterop": true,
        "isolatedModules": true,
        "jsx": "react",
        "lib": ["es2017", "dom"],
        "module": "commonjs",
        "moduleResolution": "node",
        "noEmit": false,
        "strict": false,
        "target": "es2018",
        "resolveJsonModule": true,
        "noUnusedLocals": true,
        "typeRoots": ["node_modules/@types"],
        "types": ["jest"],
        "skipLibCheck": true,
        "noImplicitAny": false
    },
    "include": ["src"],
    "exclude": [
        "node_modules",
        "babel.config.js",
        "metro.config.js",
        "jest.config.js",
        "src/**/__mocks__",
        "src/**/__tests__"
    ]
}

'''
'''--- tslint.json ---
{
    "extends": ["tslint:latest", "tslint-config-prettier"],
    "rules": {
        "ordered-imports": false,
        "object-literal-sort-keys": false,
        "no-submodule-imports": false,
        "react-no-dangerous-html": [true],
        "no-unused-expression": [
            "error",
            {
                "allowShortCircuit": true,
                "allowTernary": true,
                "allowTaggedTemplates": true
            }
        ]
    },
    "rulesDirectory": ["node_modules/tslint-microsoft-contrib"]
}

'''
'''--- web-wallet/babel.config.js ---
// babel.config.js
module.exports = {
    presets: [['@babel/preset-env', { targets: { node: 'current' } }], '@babel/preset-typescript']
};

'''
'''--- web-wallet/index.html ---
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	<link rel="stylesheet" href="./resources/fonts/icons.css"/>
	<title>Moonlet Wallet</title>
</head>
<body style="width: 350px; height: 600px; overflow: hidden; background-color: #121212;">
	<noscript>
		You need to enable JavaScript to run this app.
	</noscript>
	<div id="root" style="display: flex;height: 100vh;"></div>
</body>
</html>
'''
'''--- web-wallet/webpack.config.js ---
require('dotenv').config();

const fs = require('fs');
const path = require('path');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MomentLocalesPlugin = require('moment-locales-webpack-plugin');

const pkg = require('../package.json');
const appDirectory = path.resolve(__dirname, '../');

const BUILD = process.env.BUILD || 0;
const TARGET = process.env.TARGET || 'release';
const VERSION = `${pkg.version}.${BUILD}`;

const dotenvWhitelistFile = fs
    .readFileSync(path.resolve(__dirname, '../src/config/.env.whitelist'))
    .toString();
const envVarsWhitelist = dotenvWhitelistFile
    .split('\n')
    .map(v => v.trim())
    .filter(Boolean)
    .map(v => v.substring(0, v.indexOf('=')));
const ENV_VARS = {};
for (let v of envVarsWhitelist) {
    if (v.indexOf('MOONLET_') === 0) {
        ENV_VARS[`process.env.${v}`] = JSON.stringify(process.env[v]);
    }
}

// This is needed for webpack to compile JavaScript.
// Many OSS React Native packages are not compiled to ES5 before being
// published. If you depend on uncompiled packages they may cause webpack build
// errors. To fix this webpack can be configured to compile to the necessary
// `node_module`.
const babelLoaderConfiguration = {
    test: /\.js$/,
    // Add every directory that needs to be compiled by Babel during the build.
    include: [
        // path.resolve(appDirectory, 'index.web.js'),
        // path.resolve(appDirectory, 'src'),
        path.resolve(appDirectory, 'node_modules/react-native'),
        path.resolve(appDirectory, 'node_modules/@react-navigation'),
        path.resolve(appDirectory, 'node_modules/react-native-dialog'),
        path.resolve(appDirectory, 'node_modules/react-native-animatable'),
        path.resolve(appDirectory, 'node_modules/react-navigation'),
        path.resolve(appDirectory, 'node_modules/react-navigation-stack'),
        path.resolve(appDirectory, 'node_modules/react-navigation-tabs'),
        path.resolve(appDirectory, 'node_modules/react-native-reanimated'),
        path.resolve(appDirectory, 'node_modules/react-native-linear-gradient'),
        path.resolve(appDirectory, 'node_modules/react-native-screens'),
        path.resolve(appDirectory, 'node_modules/react-native-tab-view'),
        path.resolve(appDirectory, 'node_modules/react-native-safe-area-view'),
        path.resolve(appDirectory, 'node_modules/react-native-vector-icons'),
        path.resolve(appDirectory, 'node_modules/react-native-gesture-handler'),
        path.resolve(appDirectory, 'node_modules/@react-native-community/async-storage'),
        path.resolve(appDirectory, 'node_modules/react-native-secure-key-store'),
        path.resolve(appDirectory, 'node_modules/react-native-qrcode-svg'),
        path.resolve(appDirectory, 'node_modules/react-native-draggable-flatlist'),
        path.resolve(appDirectory, 'node_modules/react-native-fast-image'),
        path.resolve(appDirectory, 'node_modules/react-native-keyboard-aware-scroll-view'),
        path.resolve(appDirectory, 'node_modules/react-native-firebase'),
        path.resolve(appDirectory, 'node_modules/react-native-ble-plx'),
        path.resolve(appDirectory, 'node_modules/@ledgerhq')
        // path.resolve(appDirectory, 'node_modules/react-native-uncompiled')
    ],
    use: {
        loader: 'babel-loader',
        options: {
            cacheDirectory: true,
            // The 'react-native' preset is recommended to match React Native's packager
            presets: ['module:metro-react-native-babel-preset', '@babel/preset-env'],
            // Re-write paths to import only the modules needed by the app
            plugins: ['react-native-web', '@babel/plugin-proposal-class-properties']
        }
    }
};

// This is needed for webpack to import static images in JavaScript files.
const imageLoaderConfiguration = {
    test: /\.(gif|jpe?g|png|svg)$/,
    use: {
        loader: 'url-loader',
        options: {
            name: '[name].[ext]'
        }
    }
};

module.exports = (env, argv) => ({
    entry: {
        // load any web API polyfills
        // path.resolve(appDirectory, 'polyfills-web.js'),
        // your web-specific entry file
        'bundle.app': path.resolve(appDirectory, 'index.web-wallet.js')
    },

    plugins: [
        new HtmlWebpackPlugin({
            chunks: ['bundle.app'],
            template: './web-wallet/index.html',
            filename: 'index.html'
        }),
        new webpack.DefinePlugin({
            __DEV__: argv.mode === 'development',
            ...ENV_VARS,
            'process.env.TARGET': `"${TARGET}"`,
            'process.env.VERSION': `"${VERSION}"`
        }),
        new MomentLocalesPlugin({
            localesToKeep: ['en']
        })
    ],

    // configures where the build ends up
    output: {
        filename: '[name].js',
        path: path.resolve(appDirectory, `web-wallet/build/${TARGET}`)
    },

    // ...the rest of your config

    module: {
        rules: [
            babelLoaderConfiguration,
            imageLoaderConfiguration,
            {
                test: /\.tsx?$/,
                loader: 'ts-loader',
                options: {
                    allowTsInNodeModules: true,
                    logInfoToStdOut: true,
                    logLevel: 'info',
                    onlyCompileBundledFiles: true
                }
            }
        ]
    },

    resolve: {
        // This will only alias the exact import "react-native"
        alias: {
            'react-native$': 'react-native-web',
            'react-native-linear-gradient$': 'react-native-web-linear-gradient',
            '@sentry/react-native$': '@sentry/browser',
            // 'lottie-react-native$': 'react-native-web-lottie',
            'react-native-device-info$': path.resolve(
                __dirname,
                '../src/react-native-web/react-native-device-info'
            )
        },
        // If you're working on a multi-platform React Native app, web-specific
        // module implementations should be written in files using the extension
        // `.web.js`.
        extensions: [
            '.web-wallet.js',
            '.web.js',
            '.js',
            '.web-wallet.ts',
            '.web.ts',
            '.ts',
            '.web-wallet.tsx',
            '.web.tsx',
            '.tsx'
        ]
    },

    devtool: 'source-map',
    devServer: {
        hot: true
    }
});

'''