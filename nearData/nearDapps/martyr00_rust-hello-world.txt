*GitHub Repository "martyr00/rust-hello-world"*

'''--- .github/dependabot.yml ---
version: 2
updates:
- package-ecosystem: cargo
  directory: "/contract"
  schedule:
    interval: daily
  open-pull-requests-limit: 10

'''
'''--- .github/workflows/tests.yml ---
name: Tests
on: push
jobs:
  tests:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '12'
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
      - name: Install modules
        run: yarn
      - name: Run tests
        env:
          IS_GITHUB_ACTION: true
        run: yarn test
'''
'''--- .gitpod.yml ---
image:
  file: .gitpod.Dockerfile
# Options to prebuild the image after github events and set notifications/badges
github:
  prebuilds:
    # enable for the master/default branch (defaults to true)
    master: true
    # enable for all branches in this repo (defaults to false)
    branches: true
    # enable for pull requests coming from this repo (defaults to true)
    pullRequests: true
    # enable for pull requests coming from forks (defaults to false)
    pullRequestsFromForks: true
    # add a check to pull requests (defaults to true)
    addCheck: true
    # add a "Review in Gitpod" button as a comment to pull requests (defaults to false)
    addComment: true
    # add a "Review in Gitpod" button to the pull request's description (defaults to false)
    addBadge: false
    # add a label once the prebuild is ready to pull requests (defaults to false)
    addLabel: false

# List the start up tasks. You can start them in parallel in multiple terminals. See https://www.gitpod.io/docs/config-start-tasks/
tasks:
  - before: echo "nvm use default" >> ~/.bashrc && npm install -g near-cli && nvm use default
    init: yarn && yarn build && yarn test:cargo
    command: source ~/.bashrc; gp open README-Gitpod.md && yarn deploy:dev && source ./neardev/dev-account.env && yarn start:dev

ports:
  - port: 1234
    onOpen: open-browser
  - port: 5000
    onOpen: ignore
'''
'''--- .theia/settings.json ---
{
    "editor.wordWrap": "on",
    "editor.fontSize": 19,
    "terminal.integrated.fontSize": 17,
    "editor.suggestFontSize": 16
}

'''
'''--- .travis.yml ---
language: rust
rust:
  - stable
os:
  - linux
  - osx
  - windows
env:
  - NODE_ENV=ci YARN_GPG=no
cache: cargo
before_install:
  - rustup target add wasm32-unknown-unknown
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then HOME="/c/Users/travis" && export NVS_HOME=$ProgramData/nvs && git clone --single-branch https://github.com/jasongin/nvs $NVS_HOME && source $NVS_HOME/nvs.sh && nvs --version && nvs add 12 && nvs use 12; fi
  - if [[ ! "$TRAVIS_OS_NAME" == "windows" ]]; then nvm install 12 && nvm use 12; fi
  - npm install -g yarn
  - yarn
git:
  autocrlf: false
script:
  - yarn test
'''
'''--- README-Gitpod.md ---
Counter example in Rust - Gitpod version
==================================================

This README is specific to Gitpod and this example. For local development, please see [README.md](README.md).

## Description

In Gitpod, the counter will start automatically. Please look in the terminal for a link to follow.

This contract implements simple counter backed by storage on blockchain.
Contract in `contract/src/lib.rs` provides methods to increment / decrement counter and get it's current value or reset.

Plus and minus buttons increase and decrease value correspondingly. When button L is toggled, a little light turns on, just for fun. RS button is for reset. LE and RE buttons to let the robot wink at you.

## To Test

```
cd contract
cargo test -- --nocapture
```

## To Explore

- `contract/src/lib.rs` for the contract code
- `src/index.html` for the front-end HTML
- `src/main.js` for the JavaScript front-end code and how to integrate contracts
- `src/test.js` for the JS tests for the contract

## Data collection

By using Gitpod in this project, you agree to opt-in to basic, anonymous analytics. No personal information is transmitted. Instead, these usage statistics aid in discovering potential bugs and user flow information.

'''
'''--- README.md ---
Counter example in Rust
=================================

[![Open in Gitpod!](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/near-examples/rust-counter)

<!-- MAGIC COMMENT: DO NOT DELETE! Everything above this line is hidden on NEAR Examples page -->

## Description

This contract implements simple counter backed by storage on blockchain.
Contract in `contract/src/lib.rs` provides methods to increment / decrement counter and get it's current value or reset.

Plus and minus buttons increase and decrease value correspondingly. When button L is toggled, a little light turns on, just for fun. RS button is for reset. LE and RE buttons to let the robot wink at you.

## To Run
Open in the Gitpod link above or clone the repository.

```
git clone https://github.com/near-examples/rust-counter
```

## Setup [Or skip to Login if in Gitpod](#login)
Install dependencies:

```
yarn
```

If you don't have `Rust` installed, complete the following 3 steps:

1) Install Rustup by running:

```
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
```

([Taken from official installation guide](https://www.rust-lang.org/tools/install))

2) Configure your current shell by running:

```
source $HOME/.cargo/env
```

3) Add wasm target to your toolchain by running:

```
rustup target add wasm32-unknown-unknown
```

Next, make sure you have `near-cli` by running:

```
near --version
```

If you need to install `near-cli`:

```
npm install near-cli -g
```

## Login
If you do not have a NEAR account, please create one with [NEAR Wallet](https://wallet.testnet.near.org).

In the project root, login with `near-cli` by following the instructions after this command:

```
near login
```

Modify the top of `src/config.js`, changing the `CONTRACT_NAME` to be the NEAR account that was just used to log in.

```javascript
…
const CONTRACT_NAME = 'YOUR_ACCOUNT_NAME_HERE'; /* TODO: fill this in! */
…
```

Start the example!

```
yarn start
```

## To Test

```
cd contract
cargo test -- --nocapture
```

## To Explore

- `contract/src/lib.rs` for the contract code
- `src/index.html` for the front-end HTML
- `src/main.js` for the JavaScript front-end code and how to integrate contracts
- `src/test.js` for the JS tests for the contract

## To Build the Documentation

```
cd contract
cargo doc --no-deps --open
```

'''
'''--- contract/Cargo.toml ---
[package]
name = "rust-counter-tutorial"
version = "0.1.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "3.1.0"

[dev-dependencies]
near-sdk-sim = "3.1.0"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

'''
'''--- contract/src/lib.rs ---
//! This contract implements simple counter backed by storage on blockchain.
//!
//! The contract provides methods to [increment] / [decrement] counter and
//! [get it's current value][get_num] or [reset].
//!
//! [increment]: struct.Counter.html#method.increment
//! [decrement]: struct.Counter.html#method.decrement
//! [get_num]: struct.Counter.html#method.get_num
//! [reset]: struct.Counter.html#method.reset

use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{env, near_bindgen};
use near_sdk::serde::de::Unexpected::Str;

near_sdk::setup_alloc!();

#[near_bindgen]
#[derive(Default, BorshDeserialize, BorshSerialize)]
pub struct Counter {
    // See more data types at https://doc.rust-lang.org/book/ch03-02-data-types.html
    val: i8, // i8 is signed. unsigned integers are also available: u8, u16, u32, u64, u128
}

#[near_bindgen]
impl Counter {
    /// Returns 8-bit signed integer of the counter value.
    ///
    /// This must match the type from our struct's 'val' defined above.
    ///
    /// Note, the parameter is `&self` (without being mutable) meaning it doesn't modify state.
    /// In the frontend (/src/main.js) this is added to the "viewMethods" array
    /// using near-cli we can call this by:
    ///
    /// ```bash
    /// near view counter.YOU.testnet get_num
    /// ```
    pub fn get_num(&self) -> i8 {
        return self.val;
    }

    pub fn get_text(&self) -> &'static str {
        let text = "Hello, world";
        return text;
    }

    /// Increment the counter.
    ///
    /// Note, the parameter is "&mut self" as this function modifies state.
    /// In the frontend (/src/main.js) this is added to the "changeMethods" array
    /// using near-cli we can call this by:
    ///
    /// ```bash
    /// near call counter.YOU.testnet increment --accountId donation.YOU.testnet
    /// ```
    pub fn increment(&mut self) {
        // note: adding one like this is an easy way to accidentally overflow
        // real smart contracts will want to have safety checks
        // e.g. self.val = i8::wrapping_add(self.val, 1);
        // https://doc.rust-lang.org/std/primitive.i8.html#method.wrapping_add
        self.val += 1;
        let log_message = format!("Increased number to {}", self.val);
        env::log(log_message.as_bytes());
        after_counter_change();
    }

    /// Decrement (subtract from) the counter.
    ///
    /// In (/src/main.js) this is also added to the "changeMethods" array
    /// using near-cli we can call this by:
    ///
    /// ```bash
    /// near call counter.YOU.testnet decrement --accountId donation.YOU.testnet
    /// ```
    pub fn decrement(&mut self) {
        // note: subtracting one like this is an easy way to accidentally overflow
        // real smart contracts will want to have safety checks
        // e.g. self.val = i8::wrapping_sub(self.val, 1);
        // https://doc.rust-lang.org/std/primitive.i8.html#method.wrapping_sub
        self.val -= 1;
        let log_message = format!("Decreased number to {}", self.val);
        env::log(log_message.as_bytes());
        after_counter_change();
    }

    /// Reset to zero.
    pub fn reset(&mut self) {
        self.val = 0;
        // Another way to log is to cast a string into bytes, hence "b" below:
        env::log(b"Reset counter to zero");
    }
}

// unlike the struct's functions above, this function cannot use attributes #[derive(…)] or #[near_bindgen]
// any attempts will throw helpful warnings upon 'cargo build'
// while this function cannot be invoked directly on the blockchain, it can be called from an invoked function
fn after_counter_change() {
    // show helpful warning that i8 (8-bit signed integer) will overflow above 127 or below -128
    env::log("Make sure you don't overflow, my friend.".as_bytes());
}

/*
 * the rest of this file sets up unit tests
 * to run these, the command will be:
 * cargo test --package rust-counter-tutorial -- --nocapture
 * Note: 'rust-counter-tutorial' comes from cargo.toml's 'name' key
 */

// use the attribute below for unit tests
'''
'''--- contract/tests/sim/main.rs ---
pub use near_sdk::json_types::{Base64VecU8, ValidAccountId, WrappedDuration, U64};
use near_sdk::serde_json::json;
use near_sdk_sim::{call, view, deploy, init_simulator, ContractAccount, UserAccount};
use rust_counter_tutorial::CounterContract;

near_sdk_sim::lazy_static_include::lazy_static_include_bytes! {
    COUNTER_BYTES => "../out/main.wasm",
}

pub const DEFAULT_GAS: u64 = 300_000_000_000_000;

fn init() -> (UserAccount, ContractAccount<CounterContract>) {
    let root = init_simulator(None);

    // Deploy the compiled Wasm bytes
    let counter: ContractAccount<CounterContract> = deploy!(
         contract: CounterContract,
         contract_id: "counter".to_string(),
         bytes: &COUNTER_BYTES,
         signer_account: root
     );

    (root, counter)
}

#[test]
fn simulate_increment() {
    let (root, counter) = init();

    // Get number on account that hasn't incremented or decremented
    let mut current_num: i8 = view!(
        counter.get_num()
    ).unwrap_json();
    println!("Number before: {}", &current_num);
    assert_eq!(&current_num, &0, "Initial number should be zero.");

    // Call the increment function
    call!(
        root,
        counter.increment()
    ).assert_success();

    current_num = view!(
        counter.get_num()
    ).unwrap_json();
    println!("Number after first increment: {}", &current_num);
    assert_eq!(&current_num, &1, "After incrementing, the number should be one.");

    // Now use the non-macro approach to increment the number.
    root.call(
        counter.account_id(),
        "increment",
        &json!({})
            .to_string()
            .into_bytes(),
        DEFAULT_GAS,
        0, // attached deposit
    ).assert_success();

    // Similarly, use the non-macro approach to check the value.
    current_num = root.view(
        counter.account_id(),
        "get_num",
        &json!({})
            .to_string()
            .into_bytes(),
    ).unwrap_json();
    println!("Number after second increment: {}", &current_num);
    assert_eq!(&current_num, &2, "After incrementing twice, the number should be two.");
}

'''
'''--- neardev/dev-account.env ---
CONTRACT_NAME=dev-1645280800624-60679561126376
'''
'''--- neardev/shared-test-staging/test.near.json ---
{"account_id":"test.near","private_key":"ed25519:2wyRcSwSuHtRVmkMCGjPwnzZmQLeXLzLLyED1NDMt4BjnKgQL6tF85yBx6Jr26D2dUNeC716RBoTxntVHsegogYw"}

'''
'''--- neardev/shared-test/test.near.json ---
{"account_id":"test.near","private_key":"ed25519:2wyRcSwSuHtRVmkMCGjPwnzZmQLeXLzLLyED1NDMt4BjnKgQL6tF85yBx6Jr26D2dUNeC716RBoTxntVHsegogYw"}

'''
'''--- package.json ---
{
  "name": "rust-counter",
  "description": "Counter Smart Contract\n\nThis project contains implementation of counter backed by blockchain, written in Rust.",
  "version": "0.0.1",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "build": "cd contract && cargo build --target wasm32-unknown-unknown --release",
    "postbuild": "cp contract/target/wasm32-unknown-unknown/release/rust_counter_tutorial.wasm ./out/main.wasm",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d src",
    "deploy": "yarn build && yarn deploy:contract",
    "deploy:dev": "yarn build && near dev-deploy",
    "dev": "yarn deploy:dev && yarn start:dev",
    "prestart": "yarn build && yarn deploy:contract",
    "start": "parcel src/index.html",
    "start:dev": "env-cmd -f ./neardev/dev-account.env parcel src/index.html",
    "test:cargo": "cd contract && cargo test -- --nocapture",
    "test": "yarn build && yarn test:cargo && jest"
  },
  "devDependencies": {
    "env-cmd": "^10.1.0",
    "gh-pages": "~3.2.3",
    "jest": "~27.3.1",
    "jest-environment-node": "~27.3.1",
    "near-cli": "^2.1.1",
    "nodemon": "~2.0.14",
    "parcel-bundler": "~1.12.5"
  },
  "jest": {
    "testEnvironment": "near-cli/test_environment"
  },
  "dependencies": {
    "near-api-js": "^0.43.1",
    "regenerator-runtime": "^0.13.9"
  }
}

'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'asdf.test'; /* TODO: change this to your account */

function getConfig (env) {
  switch (env) {
    case 'production':
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org'
      }
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org'
      }
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org'
      }
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME
      }
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      }
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      }
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
  <link href="https://fonts.googleapis.com/css?family=Arvo&display=swap" rel="stylesheet">
  <style>
      h1 {
        margin-top: 3em;
        margin-bottom: 1em;
      }
      .scene {
        height: 350px;
      }
      .face {
        margin: auto;
        width: 66%;
        height: 72%;
        background-color: #fffaf2;
      }
      .number {
        text-align: center;
        margin:auto;
        width: 66%;
        height: 28%;
        background-color: #ffd9f8;
        border-top: 5px dotted #82174d;
        font-size:1.5rem;
      }
      .eyes-row {
        display: flex;
        justify-content: space-around;
        margin-top: 24%;
        padding: 0 8px;
      }
      .closed {
        width: 22px;
        height: 13px;
        border-top-left-radius: 100px;
        border-top-right-radius: 100px;
        border-left: 2px solid #ffa4b1;
        border-right: 2px solid #ffa4b1;
        border-top: 2px solid #ffa4b1;
        margin-bottom: 12px;
      }
      .eye {
        width: 26px;
        height: 26px;
        border-radius: 100px;
        background-color: #ffa4b1;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 1px;
      }
      .eye .pupil {
        position: relative;
        width: 18px;
        height: 18px;
        border-radius: 100px;
        background-color: #82174d;
      }
      .eye .pupil:before {
        content: "";
        width: 6px;
        height: 6px;
        position: absolute;
        background-color: #fff;
        top: 4px;
        left: 3px;
        border-radius: 100px;
      }
      .eye .pupil:after {
        content: "";
        width: 3px;
        height: 3px;
        position: absolute;
        background-color: #fff;
        top: 9px;
        left: 12px;
        border-radius: 100px;
      }
      .mouth-row {
        display: flex;
        flex-direction: column;
        justify-content: space-around;
        align-items: center;
      }
      .mouth-row .mouth {
        margin-top: 3%;
      }
      .mouth-row .tongue {
        position:absolute;
        width: 10px;
        height: 10px;
        background-color: #FF585D;
        border-radius: 50% 50% 30%;
        margin: 5px 0;
      }
      .mouth-row .mouth.smile {
        height: 16px;
        width: 32px;
        border-bottom-left-radius: 32px;
        border-bottom-right-radius: 32px;
        background-color: #82174d;
        top: 120px;
      }
      .mouth-row .mouth.cry {
        height: 16px;
        width: 32px;
        border-top-left-radius: 32px;
        border-top-right-radius: 32px;
        background-color: #82174d;
        top: 120px;
      }
      .mouth-row .mouth:before {
        content: "";
        left: 43px;
        margin-top: 1%;
        border-radius: 100%;
        height: 5%;
        width: 11.5%;
        background-color: #f56f79;
        position: absolute;
      }
      .mouth-row .mouth:after {
        content: "";
        left: 106px;
        margin-top: 1%;
        border-radius: 100%;
        height: 5%;
        width: 11.5%;
        background-color: #f56f79;
        position: absolute;
      }
      .gameboy {
        position: relative;
        width: 400px;
        margin: auto;
      }
      .body-shape {
        position: absolute;
        height: 300px;
        width: 205px;
        border-radius: 15px;
      }
      .body-shape .shadow {
        height: 290px;
      }
      .body-shape .screen {
        margin: 20px;
        position: relative;
        width: 168px;
        height: 134px;
        background-color: #82174d;
        border-radius: 4px;
        display: flex;
        flex-direction: column;
        justify-items: center;
      }
      .body-shape .dot {
        content: "";
        width: 8px;
        height: 8px;
        position: absolute;
        background-color: #ffa4b1;
        top: 40px;
        left: 10px;
        border-radius: 100px;
      }
      .body-shape .on {
        background-color: #F0EC74;
      }
      .body-shape .buttons {
        display: flex;
        flex-direction: column;
        justify-content: space-around;
        width: 100%;
      }
      .body-shape .buttons .row {
        display: flex;
      }
      .body-shape .buttons .selects {
        margin-top: 10px;
        padding-left: 140px;
      }
      .body-shape .buttons .arrows {
        position: relative;
        height: 40px;
        width: 40px;
        border-radius: 100px;
        background-color: #ffa4b1;
        margin-left: 30px;
        padding: 0;
        cursor: grab;
      }
      .body-shape .buttons .arrows:disabled {
        opacity: 0.8;
        background-color: #d18892;
      }
      .body-shape .buttons .arrows .updown {
        position: relative;
        height: 35px;
        width: 10px;
        background-color: #82174d;
        border-radius: 2px;
        top: -8px;
        left: 14px;
      }
      .body-shape .buttons .arrows .left {
        position: relative;
        width: 35px;
        height: 10px;
        background-color: #82174d;
        border-radius: 2px;
        top: 14px;
        left: 2px;
      }
      .body-shape .buttons .arrows .right {
        position: relative;
        width: 35px;
        height: 10px;
        background-color: #82174d;
        border-radius: 2px;
        left: 2px;
      }
      .body-shape .buttons .ab {
        width: 64px;
        height: 64px;
        background-color: #ffa4b1;
        border-radius: 10px;
        transform: rotate(45deg);
        font-size: 0.6rem;
        text-align: center;
      }
      .body-shape .buttons .ab .r {
        width: 24px;
        height: 24px;
        border-radius: 100%;
        background-color: #82174d;
        position: absolute;
        transform: rotate(-45deg);
        padding: 5px;
        color: #ffa4b1;
        cursor:pointer;
        box-shadow:-1px 0 1px #4B4F54;
      }
      .body-shape .buttons .ab .r:hover {
        opacity: 0.8;
      }
      .body-shape .buttons .ab .r:active {
        background-color: #F0EC74;
        opacity: 1;
      }
      .body-shape .buttons .ab .a {
        top: 4px;
        left: 4px;
      }
      .body-shape .buttons .ab .b {
        top: 4px;
        left: 36px;
      }
      .body-shape .buttons .ab .c {
        top: 36px;
        left: 4px;
      }
      .body-shape .buttons .ab .d {
        top: 36px;
        left: 36px;
      }
      .shadow {
        background-color: #888ad0;
        z-index: 0;
        left: -17px;
        top: 26px;
      }
      .side {
        background-color: #82174d;
        z-index: 1;
      }
      .front {
        background-color: #f56f79;
        left: 26px;
        z-index: 2;
      }
      .loader,
      .loader:before,
      .loader:after {
        background: #f56f79;
        -webkit-animation: load1 1s infinite ease-in-out;
        animation: load1 1s infinite ease-in-out;
        width: 0.4rem;
        height: 4em;
      }
      .loader {
        color: #f56f79;
        margin: 2px auto;
        font-size: 0.2rem;
        -webkit-transform: translateZ(0);
        -ms-transform: translateZ(0);
        transform: translateZ(0);
        -webkit-animation-delay: -0.16s;
        animation-delay: -0.16s;
      }
      .loader:before,
      .loader:after {
        position: absolute;
        top: 0;
        content: '';
      }
      .loader:before {
        left: -1.5em;
        -webkit-animation-delay: -0.32s;
        animation-delay: -0.32s;
      }
      .loader:after {
        left: 1.5em;
      }
      @-webkit-keyframes load1 {
        0%,
        80%,
        100% {
          box-shadow: 0 0;
          height: 2em;
        }
        40% {
          box-shadow: 0 -2em;
          height: 3em;
        }
      }
      @keyframes load1 {
        0%,
        80%,
        100% {
          box-shadow: 0 0;
          height: 2em;
        }
        40% {
          box-shadow: 0 -2em;
          height: 3em;
        }
      }
    </style>
</head>
<body style="background: #eef2fe; font-family: 'Arvo', serif;">
  <div class="container">
    <h1>This is just a counter, but this time on blockchain!</h1>

    <div class="sign-in" style="display: none;">
      <p>You'll need to sign in to call contract methods:</p>
      <button class="btn btn-primary" style="background-color: #0072CE;">Sign In</button>
    </div>

    <div class="after-sign-in" style="display: none;">
        <div class="scene">
          <div class="gameboy">
            <div class="body-shape shadow"></div>
            <div class="body-shape side"></div>
            <div class="body-shape front">
              <div class="screen">
                <div class="dot"></div>
                <div class="face">
                  <div class="eyes-row">
                    <div id="left" class="closed">
                      <div class="pupil"></div>
                    </div>
                    <div id="right" class="closed">
                      <div class="pupil"></div>
                    </div>
                  </div>
                  <div class="mouth-row">
                    <div class="mouth smile"></div>
                    <div class="tongue"></div>
                  </div>
                </div>
                <div id="show" class="number"></div>
              </div>
              <div class="buttons">
                <div class="row">
                  <button id="plus" class="arrows">
                    <div class="left">
                    </div>
                    <div class="updown">
                    </div>
                  </button>
                  <button id="minus" class="arrows">
                    <div class="right">
                    </div>
                  </button>
                </div>
                <div class="selects row">
                  <div class="ab">
                    <div id="a" class="r a">RS</div>
                    <div id="b" class="r b">LE</div>
                    <div id="c" class="r c">RE</div>
                    <div id="d" class="r d">L</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="sign-out">
          <button class="btn btn-primary" style="background-color: #0072CE;">Sign Out</button>
        </div>
    </div>
  </div>
  <script src="./main.js"></script>
</body>
</html>

'''
'''--- src/loader.html ---
<head>
    <script>
        window.paceOptions = {
            elements: {
                selectors: ['.never-appears']
            }
        };
    </script>
    <script src="https://cdn.jsdelivr.net/gh/HubSpot/pace@v0.5.3/pace.min.js"></script>
    <link href="https://cdn.jsdelivr.net/gh/HubSpot/pace@v0.5.3/themes/black/pace-theme-center-radar.css" rel="stylesheet" />
</head>
'''
'''--- src/main.js ---
import "regenerator-runtime/runtime";
import * as nearAPI from "near-api-js";
import getConfig from "./config";
const nearConfig = getConfig(process.env.NODE_ENV || "development");

async function connect(nearConfig) {
  // Connects to NEAR and provides `near`, `walletAccount` and `contract` objects in `window` scope
  // Initializing connection to the NEAR node.
  window.near = await nearAPI.connect({
    deps: {
      keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore()
    },
    ...nearConfig
  });

  // Needed to access wallet login
  window.walletConnection = new nearAPI.WalletConnection(window.near);

  // Initializing our contract APIs by contract name and configuration.
  window.contract = await new nearAPI.Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read-only – they don't modify the state, but usually return some value
    viewMethods: ['get_num'],
    // Change methods can modify the state, but you don't receive the returned value when called
    changeMethods: ['increment', 'decrement', 'reset'],
    // Sender is the account ID to initialize transactions.
    // getAccountId() will return empty string if user is still unauthorized
    sender: window.walletConnection.getAccountId()
  });
}

function errorHelper(err) {
  // if there's a cryptic error, provide more helpful feedback and instructions here
  // TODO: as soon as we get the error codes propagating back, use those
  if (err.message.includes('Cannot deserialize the contract state')) {
    console.warn('NEAR Warning: the contract/account seems to have state that is not (or no longer) compatible.\n' +
        'This may require deleting and recreating the NEAR account as shown here:\n' +
        'https://stackoverflow.com/a/60767144/711863');
  }
  if (err.message.includes('Cannot deserialize the contract state')) {
    console.warn('NEAR Warning: the contract/account seems to have state that is not (or no longer) compatible.\n' +
        'This may require deleting and recreating the NEAR account as shown here:\n' +
        'https://stackoverflow.com/a/60767144/711863');
  }
  console.error(err);
}

function updateUI() {
  if (!window.walletConnection.getAccountId()) {
    Array.from(document.querySelectorAll('.sign-in')).map(it => it.style = 'display: block;');
  } else {
    Array.from(document.querySelectorAll('.after-sign-in')).map(it => it.style = 'display: block;');
    contract.get_num().then(count => {
      document.querySelector('#show').classList.replace('loader','number');
      document.querySelector('#show').innerText = count === undefined ? 'calculating...' : count;
      document.querySelector('#left').classList.toggle('eye');
      document.querySelectorAll('button').forEach(button => button.disabled = false);
      if (count >= 0) {
        document.querySelector('.mouth').classList.replace('cry','smile');
      } else {
        document.querySelector('.mouth').classList.replace('smile','cry');
      }
      if (count > 20 || count < -20) {
        document.querySelector('.tongue').style.display = 'block';
      } else {
        document.querySelector('.tongue').style.display = 'none';
      }
    }).catch(err => errorHelper(err));
  }
}

document.querySelector('#plus').addEventListener('click', () => {
  document.querySelectorAll('button').forEach(button => button.disabled = true);
  document.querySelector('#show').classList.replace('number','loader');
  document.querySelector('#show').innerText = '';
  contract.increment().then(updateUI);
});
document.querySelector('#minus').addEventListener('click', () => {
  document.querySelectorAll('button').forEach(button => button.disabled = true);
  document.querySelector('#show').classList.replace('number','loader');
  document.querySelector('#show').innerText = '';
  contract.decrement().then(updateUI);
});
document.querySelector('#a').addEventListener('click', () => {
  document.querySelectorAll('button').forEach(button => button.disabled = true);
  document.querySelector('#show').classList.replace('number','loader');
  document.querySelector('#show').innerText = '';
  contract.reset().then(updateUI);
});
document.querySelector('#c').addEventListener('click', () => {
  document.querySelector('#left').classList.toggle('eye');
});
document.querySelector('#b').addEventListener('click', () => {
  document.querySelector('#right').classList.toggle('eye');
});
document.querySelector('#d').addEventListener('click', () => {
  document.querySelector('.dot').classList.toggle('on');
});

// Log in user using NEAR Wallet on "Sign In" button click
document.querySelector('.sign-in .btn').addEventListener('click', () => {
  walletConnection.requestSignIn(nearConfig.contractName, 'Rust Counter Example');
});

document.querySelector('.sign-out .btn').addEventListener('click', () => {
  walletConnection.signOut();
  // TODO: Move redirect to .signOut() ^^^
  window.location.replace(window.location.origin + window.location.pathname);
});

window.nearInitPromise = connect(nearConfig)
    .then(updateUI)
    .catch(console.error);

'''
'''--- src/test-setup.js ---
(function () {
  let params = new URL(window.location).searchParams;
  let keyStore = new nearlib.keyStores.InMemoryKeyStore();
  nearConfig.contractName = params.get('contractName') || nearConfig.contractName;
  keyStore.setKey(nearConfig.networkId, nearConfig.contractName, nearlib.KeyPair.fromString(params.get('privateKey')));
  nearConfig.deps = { keyStore };
})();

'''
'''--- src/test.js ---
describe('Token', function () {
  let near;
  let contract;
  let accountId;

  beforeAll(async function () {
    console.log('nearConfig', nearConfig);
    near = await nearlib.connect(nearConfig);
    accountId = nearConfig.contractName;
    contract = await near.loadContract(nearConfig.contractName, {
      viewMethods: ['get_num'],
      changeMethods: ['increment', 'decrement', 'reset'],
      sender: accountId
    });
  });

  describe('counter', function () {
    it('can be incremented', async function () {
      const startCounter = await contract.get_num();
      await contract.increment();
      const endCounter = await contract.get_num();
      expect(endCounter).toEqual(startCounter + 1);
    });
    it('can be decremented', async function () {
      await contract.increment();
      const startCounter = await contract.get_num();
      await contract.decrement();
      const endCounter = await contract.get_num();
      expect(endCounter).toEqual(startCounter - 1);
    });
    it('can be reset', async function () {
      await contract.increment();
      const startCounter = await contract.get_num();
      await contract.reset();
      const endCounter = await contract.get_num();
      expect(endCounter).toEqual(0);
    });
  });
});
'''