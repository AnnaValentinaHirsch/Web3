*GitHub Repository "Learn-NEAR-Club/near-dice"*

'''--- README.md ---
NCD-GroupA-Demo
==================

This is a homework demo project for NCD program phase-1.

Rolling Dice On NEAR
====================

Guys, let's roll dice on NEAR.  

## Why dice

Randomness is always a key focus on any blockchain. We wanna show you how convenient that a random number can get on NEAR blockchain.  
  
To achieve that, it is hard to believe there is a better way than to make a dice dapp.  

Beyond what you can see in this demo, NEAR can even generate independent randomness not per block, but per receipt!

## How to play

On home page, user can see the whole status of playground without login, i.e. an NEAR account is not necessary. He would have full imformation about owner account of this contract, dice price, commission fee rate, the size of current jackpod and etc.  

Then, user can login with NEAR account and buy several dices. With dices bought, he can guess a number and roll dice again and again. If the dice point is equal to his guess, half of jackpod would belong to him. Otherwise the amount he paid for the dice would belong to the jackpod.  

During playing, the latest 20 win records would appear and be auto refreshed on screen too. 

About Contract
====================
It's need to be mentioned that it is a pure dapp project, which means there is no centralized backend nor data server, all persistent information is stored and mananged on NEAR chain by a contract.

## Contract Structure

```rust
/// This structure describe a winning event
#[derive(BorshDeserialize, BorshSerialize)]
pub struct WinnerInfo {
    pub user: AccountId,  // winner accountId
    pub amount: Balance,  // how much he got as win reward
    pub height: BlockHeight,  // the block hight this event happened
    pub ts: u64,  // the timestamp this event happened
}

/// main structure of this contract
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct NearDice {
    pub owner_id: AccountId,  // owner can adjust params of this playground
    pub dice_number: u8,  // how many dices one rolling event uses
    pub rolling_fee: Balance,  // how much a dice costs when user buys it
    pub jack_pod: Balance,  // as name shows and half of it would belong to the winner
    pub owner_pod: Balance,  // winner would share a tip to the playground, this is where those tips go
    pub reward_fee_fraction: RewardFeeFraction,  // a fraction defines tip rate
    // an always grow vector records all win event, 
    // as a demo, we ignore the management of its size, 
    // but in real project, it must be taken care of, 
    // maybe has a maximum length and remove the oldest item when exceeds.
    pub win_history: Vector<WinnerInfo>,
    // records dice user bought by his payment amount. 
    // This map has a mechanism to shrink, 
    // when a user's balance is reduce to zero, the entry would be removed.
    pub accounts: LookupMap<AccountId, Balance>,
}

```

## Contract Interface

```rust
/// winner's tip rate
pub struct RewardFeeFraction {
    pub numerator: u32,
    pub denominator: u32,
}

/// a human readable version for win event struct, used in return value to caller
pub struct HumanReadableWinnerInfo {
    pub user: AccountId,  // winner accountId
    pub amount: U128,  // the reward he got
    pub height: U64,  // block height the event happens
    pub ts: U64,  // timestamp the event happens
}

/// status of this playground, as return value of get_contract_info
pub struct HumanReadableContractInfo {
    pub owner: AccountId,  // who runs this playground, if you feel bad, just sue him :)
    pub jack_pod: U128,  // you know what it means
    pub owner_pod: U128, // winner's tip goes to here, owner can withdraw
    pub dice_number: u8, // how many dice we use in one rolling event
    pub rolling_fee: U128,  // how much a dice costs when user wanna buy it
}

/// every roll_dice event would return this info
pub struct HumanReadableDiceResult {
    pub user: AccountId,  // who rolls
    pub user_guess: u8,  // the number he guess
    pub dice_point: u8,  // the number dice shows
    pub reward_amount: U128,  // reward he got
    pub jackpod_left: U128,  // jackpod after this event
    pub height: U64,  // the block height when he rolls
    pub ts: U64,  // the timestamp when he rolls
}

//****************/
//***** INIT *****/
//****************/

/// initialization of this contract
 #[init]
pub fn new(
   owner_id: AccountId,
   dice_number: u8,
   rolling_fee: U128,
   reward_fee_fraction: RewardFeeFraction,
) -> Self;

//***************************/
//***** OWNER FUNCTIONS *****/
//***************************/

/// deposit to jackpod, used for initalizing the very first jackpod,
/// otherwise, the jackpod is initialized as 0.
#[payable]
pub fn deposit_jackpod(&mut self);

/// withdraw ownerpod to owner's account
pub fn withdraw_ownerpod(&mut self, amount: U128);

/// Updates current reward fee fraction to the new given fraction.
pub fn update_reward_fee_fraction(&mut self, reward_fee_fraction: RewardFeeFraction);

/// Updates current dice number used in one rolling event.
pub fn update_dice_number(&mut self, dice_number: u8);

/// Updates current dice price.
pub fn update_rolling_fee(&mut self, rolling_fee: U128);

//**************************/
//***** USER FUNCTIONS *****/
//**************************/

/// user deposit near to buy dice. 
/// he can buy multiple dices,
/// any leftover amount would refund
/// eg: rolling_fee is 1 Near, he can buy_dice with 4.4 Near and got 4 dices and 0.4 Near refund.
#[payable]
pub fn buy_dice(&mut self);

/// user roll dice once, then his available dice count would reduce by one.
pub fn roll_dice(&mut self, target: u8) -> HumanReadableDiceResult;

//**************************/
//***** VIEW FUNCTIONS *****/
//**************************/

/// get a list of winn events in LIFO order
/// best practise is set from_index to 0, and limit to 20,
/// that means to get latest 20 win events information with latest first order.
pub fn get_win_history(&self, from_index: u64, limit: u64) -> Vec<HumanReadableWinnerInfo>;

/// get current playground status
pub fn get_contract_info(&self) -> HumanReadableContractInfo;

/// get current winner tip rate
pub fn get_reward_fee_fraction(&self) -> RewardFeeFraction;

/// get account's available dice count
pub fn get_account_dice_count(&self, account_id: String) -> u8;

```

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] â‰¥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/src` folder. `/src/main.js` is a great
   place to start exploring.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `NCD-GroupA-Demo.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `NCD-GroupA-Demo.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account NCD-GroupA-Demo.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'NCD-GroupA-Demo.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [Vue]: https://vuejs.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- babel.config.js ---
module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset'
  ]
}

'''
'''--- contract/Cargo.toml ---
[package]
name = "neardice"
version = "0.1.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "2.0.0"
uint = { version = "0.8.3", default-features = false }

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

[workspace]
members = []

'''
'''--- contract/README.md ---
NCD-GroupA-Demo Smart Contract
==================

A demo contract for NCD Pojrect Phase-1.

Play with this contract
========================
the contract is deployed at testnet with the name `dev-1614240595058-5266655`

you can set it to env for later use:
```shell
export CONTRACTID=dev-1614240595058-5266655
```

## Look around
```shell
# return playground info
near view $CONTRACTID get_contract_info ''
# return winner tip rate
near view $CONTRACTID get_reward_fee_fraction ''
# return win history list
near view $CONTRACTID get_win_history '{"from_index": 0, "limit": 100}'
# return dice count that alice has
near view $CONTRACTID get_account_dice_count '{"account_id": "alice.testnet"}'
```
## Let's play
```shell
# attached 3 Near to buy 3 dices
near call $CONTRACTID buy_dice '' --amount=3 --account_id=alice.testnet
#check user's dice, would return 3 here
near view $CONTRACTID get_account_dice_count '{"account_id": "alice.testnet"}'
# roll dice 3 times, say how luck you are
near call $CONTRACTID roll_dice '{"target": 1}' --account_id=alice.testnet
near call $CONTRACTID roll_dice '{"target": 3}' --account_id=alice.testnet
near call $CONTRACTID roll_dice '{"target": 4}' --account_id=alice.testnet
```

Build Deploy and Init
======================

Before you compile this code, you will need to install Rust with [correct target]

```shell
# building it
srouce ./build.sh
```

```shell
# dev-deploy or deploy it
near dev-deploy res/neardice.wasm

# say it was deploy at $CONTRACTID, then init it 
near call $CONTRACTID new \
  '{"owner_id": "boss.testnet", "dice_number": 1, 
  "rolling_fee": "1000000000000000000000000", 
  "reward_fee_fraction": {"numerator": 5, "denominator": 100}}' \
  --account_id=$CONTRACTID
```

```shell
# last step to open the playgroud is 
# to deposit to the jackpod the very first time
near call $CONTRACTID deposit_jackpod '' --amount=50 --account_id=boss.testnet
```

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`. You can compile it with
   the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/roles/developer/contracts/intro
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contract/build.sh ---
#!/bin/bash
set -e

RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release
cp target/wasm32-unknown-unknown/release/neardice.wasm ./res/

'''
'''--- contract/compile.js ---
// This file does two things:
//
// 1. Compile the Rust contract using cargo (see buildCmd below). This will
//    create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')
const path = require('path')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// Rust project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js
// --debug`. Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
// Note: see other flags in ./cargo/config. Unfortunately, you cannot set the
// `--target option` in Cargo.toml.
const buildCmd = debug
  ? 'cargo build --target wasm32-unknown-unknown'
  : 'cargo build --target wasm32-unknown-unknown --release'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder â€“
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require('fs').readFileSync(`${__dirname}/Cargo.toml`).toString().match(/name = "([^"]+)"/)[1]
  const outFile = `./target/wasm32-unknown-unknown/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  const linkPath = path.relative(linkDir, outFile)

  sh.ln('-s', linkPath, link)
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- contract/src/lib.rs ---
/*
 * This is NearDice contract:
 *
 *
 *
 */

// To conserve gas, efficient serialization is achieved through Borsh (http://borsh.io/)
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::wee_alloc;
use near_sdk::json_types::{U64, U128};
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{env, near_bindgen, AccountId, Balance, BlockHeight, Promise};
use near_sdk::collections::{Vector, LookupMap};
use uint::construct_uint;

construct_uint! {
    /// 256-bit unsigned integer.
    pub struct U256(4);
}

#[global_allocator]
static ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize, Clone)]
#[serde(crate = "near_sdk::serde")]
pub struct RewardFeeFraction {
    pub numerator: u32,
    pub denominator: u32,
}

impl RewardFeeFraction {
    pub fn assert_valid(&self) {
        assert_ne!(self.denominator, 0, "Denominator must be a positive number");
        assert!(
            self.numerator <= self.denominator,
            "The reward fee must be less or equal to 1"
        );
    }

    pub fn multiply(&self, value: Balance) -> Balance {
        (U256::from(self.numerator) * U256::from(value) / U256::from(self.denominator)).as_u128()
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct WinnerInfo {
    pub user: AccountId,  // winner
    pub amount: Balance, // win prize
    pub height: BlockHeight,
    pub ts: u64,
}

#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableWinnerInfo {
    pub user: AccountId,
    pub amount: U128,
    pub height: U64,
    pub ts: U64,
}

#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableContractInfo {
    pub owner: AccountId,
    pub jack_pod: U128,
    pub owner_pod: U128,
    pub dice_number: u8,
    pub rolling_fee: U128,
}

#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct HumanReadableDiceResult {
    pub user: AccountId,
    pub user_guess: u8,
    pub dice_point: u8,
    pub reward_amount: U128,
    pub jackpod_left: U128,
    pub height: U64,
    pub ts: U64,
}

// Structs in Rust are similar to other languages, and may include impl keyword as shown below
// Note: the names of the structs are not important when calling the smart contract, but the function names are
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct NearDice {
    pub owner_id: AccountId,
    pub dice_number: u8,
    pub rolling_fee: Balance,  // how many NEAR needed to roll once.
    pub jack_pod: Balance,  // half of them would be show to user as jack_pod amount
    pub owner_pod: Balance,  // incoming of the contract, can be withdraw by owner
    pub reward_fee_fraction: RewardFeeFraction,
    pub win_history: Vector<WinnerInfo>,
    pub accounts: LookupMap<AccountId, Balance>,  // record user deposit to buy dice
}

impl Default for NearDice {
    fn default() -> Self {
        env::panic(b"dice contract should be initialized before usage")
    }
}

#[near_bindgen]
impl NearDice {

    #[init]
    pub fn new(
        owner_id: AccountId,
        dice_number: u8,
        rolling_fee: U128,
        reward_fee_fraction: RewardFeeFraction,
    ) -> Self {
        assert!(!env::state_exists(), "Already initialized");
        reward_fee_fraction.assert_valid();
        assert!(
            env::is_valid_account_id(owner_id.as_bytes()),
            "The owner account ID is invalid"
        );

        Self {
            owner_id,
            dice_number,
            rolling_fee: rolling_fee.into(),
            jack_pod: 0_u128,
            owner_pod: 0_u128,
            reward_fee_fraction,
            win_history: Vector::new(b"w".to_vec()),
            accounts: LookupMap::new(b"a".to_vec()),
        }
    }

    //***********************/
    // owner functions
    //***********************/

    fn assert_owner(&self) {
        assert_eq!(
            env::predecessor_account_id(),
            self.owner_id,
            "Can only be called by the owner"
        );
    }
    ///
    pub fn withdraw_ownerpod(&mut self, amount: U128) {
        self.assert_owner();
        let amount: Balance = amount.into();
        assert!(
            self.owner_pod >= amount,
            "The owner pod has insurficent funds"
        );

        let account_id = env::predecessor_account_id();
        self.owner_pod -= amount;
        Promise::new(account_id).transfer(amount);
    }

    #[payable]
    pub fn deposit_jackpod(&mut self) {
        self.assert_owner();
        let amount = env::attached_deposit();
        self.jack_pod += amount;
    }

    /// Owner's method.
    /// Updates current reward fee fraction to the new given fraction.
    pub fn update_reward_fee_fraction(&mut self, reward_fee_fraction: RewardFeeFraction) {
        self.assert_owner();
        reward_fee_fraction.assert_valid();
        self.reward_fee_fraction = reward_fee_fraction;
    }

    pub fn update_dice_number(&mut self, dice_number: u8) {
        self.assert_owner();
        self.dice_number = dice_number;
    }

    pub fn update_rolling_fee(&mut self, rolling_fee: U128) {
        self.assert_owner();
        self.rolling_fee = rolling_fee.into();
    }

    //***********************/
    // rolling functions
    //***********************/

    #[payable]
    pub fn buy_dice(&mut self) {
        // check called by real user NOT from other contracts
        let account_id = env::predecessor_account_id();
        assert_eq!(
            account_id.clone(),
            env::signer_account_id(),
            "This method must be called directly from user."
        );
        // check user attached enough rolling fee to buy at least one dice
        let amount = env::attached_deposit();
        assert!(
            amount >= self.rolling_fee,
            format!("You must deposit more than {}", self.rolling_fee)
        );

        let buy_dice_count = amount / self.rolling_fee;
        let leftover = amount - buy_dice_count * self.rolling_fee;

        let old_value = self.accounts.get(&account_id).unwrap_or(0);
        self.accounts.insert(&account_id, &(old_value + buy_dice_count * self.rolling_fee));

        // change refund
        if leftover > 0 {
            Promise::new(account_id).transfer(leftover);
        }
    }

    /// rolling dice
    /// check the deposit is larger than rolling_fee NEAR, and return leftover back to caller at end of call,
    /// add rolling_fee NEAR to jackpod and get random number between [1, self.dice_number * 6],
    /// if identical to target, modify jackpod amount and transfer half of jackpod to caller (within a tip to the owner_pod)
    pub fn roll_dice(&mut self, target: u8) -> HumanReadableDiceResult {

        // check called by real user NOT from other contracts
        let account_id = env::predecessor_account_id();
        assert_eq!(
            account_id.clone(),
            env::signer_account_id(),
            "This method must be called directly from user."
        );

        // check user has at least one dice remain
        let balance = self.accounts.get(&account_id).unwrap_or(0);
        assert!(
            balance / self.rolling_fee >= 1,
            "You must at least have one dice to play"
        );

        // update account dice
        let leftover = balance - self.rolling_fee;
        if leftover == 0 {
            self.accounts.remove(&account_id);
        } else {
            self.accounts.insert(&account_id, &leftover);
        }
        // always update jack_pod before rolling dice
        self.jack_pod += self.rolling_fee;

        // rolling dice here
        let random_u8: u8 = env::random_seed().iter().fold(0_u8, |acc, x| acc.wrapping_add(*x));
        let dice_point = self.dice_number as u16 * 6_u16 * random_u8 as u16 / 0x100_u16 + 1;

        let mut result = HumanReadableDiceResult {
            user: account_id.clone(),
            user_guess: target,
            dice_point: dice_point as u8,
            reward_amount: 0.into(),  // if win, need update
            jackpod_left: self.jack_pod.into(),  // if win, need update
            height: env::block_index().into(),
            ts: env::block_timestamp().into(),
        };

        // let's see how lucky caller is this time
        if target == dice_point as u8 {  // Wow, he wins
            // figure out gross reward and update jack pod
            let gross_reward = self.jack_pod / 2;
            self.jack_pod -= gross_reward;
            // split gross to net and owner fee
            let owners_fee = self.reward_fee_fraction.multiply(gross_reward);
            result.reward_amount = (gross_reward - owners_fee).into();
            result.jackpod_left = self.jack_pod.into();
            // update owner pod
            self.owner_pod += owners_fee;
            // records this winning
            self.win_history.push(&WinnerInfo {
                user: account_id.clone(),
                amount: gross_reward - owners_fee,
                height: env::block_index(),
                ts: env::block_timestamp(),
            });
        }

        result
    }

    //***********************/
    // view functions
    //***********************/

    fn get_hr_info(&self, index: u64) -> HumanReadableWinnerInfo {
        let info = self.win_history.get(index).expect("Error: no this item in winner history!");
        HumanReadableWinnerInfo {
            user: info.user.clone(),
            amount: info.amount.into(),
            height: info.height.into(),
            ts: info.ts.into(),
        }
    }

    /// Returns the list of winner info in LIFO order
    pub fn get_win_history(&self, from_index: u64, limit: u64) -> Vec<HumanReadableWinnerInfo> {
        let counts: u64 = self.win_history.len() as u64;
        (from_index..std::cmp::min(from_index + limit, counts))
            .map(|index| self.get_hr_info(counts - index - 1))  // reverse to get LIFO order
            .collect()
    }

    pub fn get_contract_info(&self) -> HumanReadableContractInfo {
        HumanReadableContractInfo {
            owner: self.owner_id.clone(),
            jack_pod: self.jack_pod.into(),
            owner_pod: self.owner_pod.into(),
            dice_number: self.dice_number,
            rolling_fee: self.rolling_fee.into(),
        }
    }

    /// Returns the current reward fee as a fraction.
    pub fn get_reward_fee_fraction(&self) -> RewardFeeFraction {
        self.reward_fee_fraction.clone()
    }

    /// return user's available dice count
    pub fn get_account_dice_count(&self, account_id: String) -> u8 {
        let balance = self.accounts.get(&account_id.into()).unwrap_or(0);
        (balance / self.rolling_fee) as u8
    }
}

/*
 * The rest of this file holds the inline tests for the code above
 * Learn more about Rust tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html
 *
 * To run from contract directory:
 * cargo test -- --nocapture
 *
 * From project root, to run in combination with frontend tests:
 * yarn test
 *
 */

#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::{testing_env, MockedBlockchain};

    mod test_utils;
    use test_utils::*;

    fn account_casino() -> String {
        "casino".to_string()
    }

    fn accunt_bob() -> String {
        "bob".to_string()
    }

    const ROLLING_FEE: u128 = 1_000_000_000_000_000_000_000_000;

    fn start_casino() -> NearDice {
        // initialize contract and deposit jackpod with 100 NEAR
        let context = VMContextBuilder::new()
            .current_account_id(account_casino())
            .predecessor_account_id(account_casino())
            .signer_account_id(account_casino())
            .attached_deposit(ROLLING_FEE * 100)
            .finish();
        testing_env!(context.clone());
        let mut contract = NearDice::new(account_casino(), 1_u8, U128(ROLLING_FEE), RewardFeeFraction {
            numerator: 1,
            denominator: 20
        });
        contract.deposit_jackpod();

        contract
    }

    #[test]
    fn test_buy_dice() {
        let mut contract = start_casino();
        let info = contract.get_contract_info();
        assert_eq!(info.jack_pod, U128(ROLLING_FEE * 100));

        // buy 10 NEAR for rolling dices
        let context = VMContextBuilder::new()
            .predecessor_account_id(accunt_bob())
            .signer_account_id(accunt_bob())
            .attached_deposit(ROLLING_FEE * 10)
            .finish();
        testing_env!(context.clone());
        contract.buy_dice();
        assert_eq!(contract.get_account_dice_count(accunt_bob()), 10);

        // buy 25 more NEAR for rolling dices
        let context = VMContextBuilder::new()
            .predecessor_account_id(accunt_bob())
            .signer_account_id(accunt_bob())
            .attached_deposit(ROLLING_FEE * 25)
            .finish();
        testing_env!(context.clone());
        contract.buy_dice();
        assert_eq!(contract.get_account_dice_count(accunt_bob()), 35);
    }

    #[test]
    #[should_panic(expected = "You must at least have one dice to play")]
    fn test_roll_dice_before_buy_dice() {
        let mut contract = start_casino();
        let info = contract.get_contract_info();
        assert_eq!(info.jack_pod, U128(ROLLING_FEE * 100));

        // roll dice 6 without buying dice
        let context = VMContextBuilder::new()
            .predecessor_account_id(accunt_bob())
            .signer_account_id(accunt_bob())
            .finish();
        testing_env!(context.clone());
        contract.roll_dice(6);
    }

    #[test]
    #[should_panic(expected = "You must at least have one dice to play")]
    fn test_roll_dice_but_exceeds_limit() {
        let mut contract = start_casino();
        let info = contract.get_contract_info();
        assert_eq!(info.jack_pod, U128(ROLLING_FEE * 100));

        // buy 2 NEAR for rolling dices
        let context = VMContextBuilder::new()
            .predecessor_account_id(accunt_bob())
            .signer_account_id(accunt_bob())
            .attached_deposit(ROLLING_FEE * 2)
            .finish();
        testing_env!(context.clone());
        contract.buy_dice();
        assert_eq!(contract.get_account_dice_count(accunt_bob()), 2);

        let context = VMContextBuilder::new()
            .predecessor_account_id(accunt_bob())
            .signer_account_id(accunt_bob())
            .finish();
        testing_env!(context.clone());
        // roll dice 1
        contract.roll_dice(1);
        assert_eq!(contract.get_account_dice_count(accunt_bob()), 1);
        // roll dice 2
        contract.roll_dice(2);
        assert_eq!(contract.get_account_dice_count(accunt_bob()), 0);
        // roll dice 3
        contract.roll_dice(3);
    }

    #[test]
    fn test_roll_dice_successfully() {
        let mut contract = start_casino();
        let info = contract.get_contract_info();
        assert_eq!(info.jack_pod, U128(ROLLING_FEE * 100));

        // buy 5 NEAR for rolling dices
        let context = VMContextBuilder::new()
            .predecessor_account_id(accunt_bob())
            .signer_account_id(accunt_bob())
            .attached_deposit(ROLLING_FEE * 5)
            .finish();
        testing_env!(context.clone());
        contract.buy_dice();
        assert_eq!(contract.get_account_dice_count(accunt_bob()), 5);

        let context = VMContextBuilder::new()
            .predecessor_account_id(accunt_bob())
            .signer_account_id(accunt_bob())
            .finish();
        testing_env!(context.clone());
        // roll dice 6
        contract.roll_dice(6);
        assert_eq!(contract.get_account_dice_count(accunt_bob()), 4);
        // roll dice 5
        contract.roll_dice(5);
        assert_eq!(contract.get_account_dice_count(accunt_bob()), 3);
        // roll dice 4
        contract.roll_dice(4);
        assert_eq!(contract.get_account_dice_count(accunt_bob()), 2);
        // roll dice 3
        contract.roll_dice(3);
        assert_eq!(contract.get_account_dice_count(accunt_bob()), 1);
        // roll dice 2
        contract.roll_dice(2);
        assert_eq!(contract.get_account_dice_count(accunt_bob()), 0);
    }
}

'''
'''--- contract/src/tests/test_utils.rs ---
use near_sdk::{AccountId, VMContext};
use near_sdk::{Balance, BlockHeight, EpochHeight};

pub struct VMContextBuilder {
    context: VMContext,
}

impl VMContextBuilder {
    pub fn new() -> Self {
        Self {
            context: VMContext {
                current_account_id: "".to_string(),
                signer_account_id: "".to_string(),
                signer_account_pk: vec![0, 1, 2],
                predecessor_account_id: "".to_string(),
                input: vec![],
                epoch_height: 0,
                block_index: 0,
                block_timestamp: 0,
                account_balance: 0,
                account_locked_balance: 0,
                storage_usage: 10u64.pow(6),
                attached_deposit: 0,
                prepaid_gas: 10u64.pow(18),
                random_seed: vec![0, 1, 2],
                is_view: false,
                output_data_receivers: vec![],
            },
        }
    }

    #[allow(dead_code)]
    pub fn current_account_id(mut self, account_id: AccountId) -> Self {
        self.context.current_account_id = account_id;
        self
    }

    #[allow(dead_code)]
    pub fn signer_account_id(mut self, account_id: AccountId) -> Self {
        self.context.signer_account_id = account_id;
        self
    }

    #[allow(dead_code)]
    pub fn predecessor_account_id(mut self, account_id: AccountId) -> Self {
        self.context.predecessor_account_id = account_id;
        self
    }

    #[allow(dead_code)]
    pub fn block_index(mut self, block_index: BlockHeight) -> Self {
        self.context.block_index = block_index;
        self
    }

    #[allow(dead_code)]
    pub fn epoch_height(mut self, epoch_height: EpochHeight) -> Self {
        self.context.epoch_height = epoch_height;
        self
    }

    #[allow(dead_code)]
    pub fn attached_deposit(mut self, amount: Balance) -> Self {
        self.context.attached_deposit = amount;
        self
    }

    #[allow(dead_code)]
    pub fn account_balance(mut self, amount: Balance) -> Self {
        self.context.account_balance = amount;
        self
    }

    #[allow(dead_code)]
    pub fn account_locked_balance(mut self, amount: Balance) -> Self {
        self.context.account_locked_balance = amount;
        self
    }

    pub fn finish(self) -> VMContext {
        self.context
    }
}

'''
'''--- copy-dev-account.js ---
let fs=require('fs')
// copy created contract name for vue-cli-service at ./.env
// const contractNameFilePath = './neardev/dev-account';
// const existingContractName = fs.readFileSync(contractNameFilePath, { encoding: "utf8" }).trim();
// dev-1614170766884-7229574
const existingContractName = 'dev-1614240595058-5266655';
const vueEnvFile = "./.env.development.local"
fs.writeFileSync(vueEnvFile , "VUE_APP_CONTRACT_NAME=" + existingContractName)
// console.log(`copied ${contractNameFilePath} to ${vueEnvFile}`)
'''
'''--- jest.config.js ---
module.exports = {
  preset: '@vue/cli-plugin-unit-jest',
  modulePaths: [
    "node_modules",
    "src"
  ]
}

'''
'''--- package.json ---
{
  "name": "NCD-GroupA-Demo",
  "version": "0.0.1",
  "license": "UNLICENSED",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "",
    "build:contract:debug": "",
    "build:web": "node copy-dev-account.js && vue-cli-service build",
    "dev:deploy:contract": "",
    "deploy:contract": "",
    "deploy:pages": "gh-pages -d dist/",
    "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "prestart": "npm run build:contract:debug && npm run dev:deploy:contract",
    "start": "echo The app is starting! It will automatically open in your browser when ready && npm run serve",
    "dev": "nodemon --watch contract/src -e rs --exec \"npm run start\"",
    "test:web": "vue-cli-service test:unit",
    "test:contract": "npm run build:contract:debug && cd contract && cargo test -- --nocapture && cd ..",
    "test": "npm run test:contract && npm run test:web",
    "serve": "node copy-dev-account.js && vue-cli-service serve --open",
    "lint": "eslint . --ext .js --ext .vue --fix"
  },
  "dependencies": {
    "bootstrap": "^4.6.0",
    "bootstrap-vue": "^2.21.2",
    "core-js": "~3.6.5",
    "near-api-js": "~0.35.0",
    "vue": "~2.6.11",
    "vue-loading-overlay": "^3.4.2"
  },
  "devDependencies": {
    "@vue/cli-plugin-babel": "~4.5.8",
    "@vue/cli-plugin-eslint": "~4.5.8",
    "@vue/cli-plugin-unit-jest": "~4.5.4",
    "@vue/cli-service": "~4.5.8",
    "@vue/test-utils": "~1.1.1",
    "env-cmd": "~10.1.0",
    "eslint": "~7.15.0",
    "eslint-plugin-vue": "~7.2.0",
    "gh-pages": "~3.1.0",
    "near-cli": "~1.4.0",
    "nodemon": "~2.0.4",
    "shelljs": "~0.8.4",
    "vue-template-compiler": "~2.6.11"
  },
  "eslintConfig": {
    "globals": {
      "process": true
    },
    "ignorePatterns": [
      "src/config.js",
      "/tests/*.spec.js",
      "copy-dev-account.js"
    ],
    "env": {
      "browser": true,
      "es2020": true
    },
    "extends": [
      "eslint:recommended",
      "plugin:vue/essential"
    ],
    "parserOptions": {
      "ecmaVersion": 2017,
      "sourceType": "module"
    },
    "plugins": [
      "vue"
    ],
    "rules": {
      "indent": [
        2,
        2
      ],
      "quotes": [
        "off",
        "double"
      ],
      "vue/html-indent": [
        "error",
        2,
        {
          "alignAttributesVertically": true
        }
      ]
    }
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead"
  ]
}

'''
'''--- src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.VUE_APP_CONTRACT_NAME || 'dev-1614240595058-5266655' // 'NCD-GroupA-Demo'

function getConfig(env) {
  switch (env) {

    case 'production':
    case 'mainnet':
      // return {
      //   networkId: 'mainnet',
      //   nodeUrl: 'https://rpc.mainnet.near.org',
      //   contractName: CONTRACT_NAME,
      //   walletUrl: 'https://wallet.near.org',
      //   helperUrl: 'https://helper.mainnet.near.org',
      //   explorerUrl: 'https://explorer.mainnet.near.org',
      // }
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        explorerUrl: 'https://explorer.testnet.near.org',
      }
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org',
        explorerUrl: 'https://explorer.betanet.near.org',
      }
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME,
      }
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near',
      }
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near',
      }
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/global.css ---
.main {
	background-image: url('assets/satoshi-dice-background.png') , linear-gradient(to right, rgb(131, 96, 195), rgb(46, 191, 145));
	background-size: cover;
}
.shadow {
	background: rgba(0, 0, 0, 0.2);
    border-radius: 5px;
    color: rgb(255, 255, 255);
    text-align: center;
    margin: auto;
    width: 100%;
}
.number-item {
	float: left;
	list-style: none;
	padding: 10px;
}
.number-item a {
	display: block;
	width: 24px;
	height: 24px;
	line-height: 16px;
	padding: 4px;
	border-radius: 12px;
	background: #fff;
	color: #000;
	font-size: 14px;
	margin: 0 10px;
}
.number-item a.active {
	background: #000;
	color: #fff;
}
.number-item a:hover {
	cursor: pointer;
}
'''
'''--- src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- src/main.js ---
import Vue from "vue"
import { BootstrapVue } from 'bootstrap-vue'
import App from "./App.vue"

// Import Bootstrap an BootstrapVue CSS files (order is important)
import 'bootstrap/dist/css/bootstrap.css'
import 'bootstrap-vue/dist/bootstrap-vue.css'

// Make BootstrapVue available throughout your project
Vue.use(BootstrapVue)

import { initContract } from "./utils"

Vue.config.productionTip = false

window.nearInitPromise = initContract()
  .then(() => {
    new Vue({
      render: h => h(App),
    }).$mount("#app")
  })
  
'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['get_greeting'],
    changeMethods: [],
    sender: window.accountId
  })

  window.walletConnection = {
    requestSignIn() {
    },
    signOut() {
    },
    isSignedIn() {
      return true
    },
    getAccountId() {
      return window.accountId
    }
  }
})

test('get_greeting', async () => {
  const message = await window.contract.get_greeting({ account_id: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

console.log(nearConfig)

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['get_greeting','get_account_dice_count','get_win_history','get_contract_info'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['set_greeting','roll_dice','buy_dice'],
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''
'''--- tests/unit/Notification.spec.js ---
import { shallowMount } from '@vue/test-utils'
import Notification from 'components/Notification.vue'

describe('Notification.vue Test', () => {
  it('renders message when component is created', () => {
    // render the component
    const wrapper = shallowMount(Notification, {
      propsData: {
        msg: 'Test Message'
      }
    })

    console.log(wrapper.text())

    //check msg prop
    expect(wrapper.props("msg")).toMatch('Test Message')

    // check that the message is rendered
    expect(wrapper.text()).toMatch('Test Message')

    // check that additional the text is rendered
    expect(wrapper.text()).toMatch('in contract')

  })
})
'''
'''--- tests/unit/SignedIn.spec.js ---
import { shallowMount } from '@vue/test-utils'
import SignedIn from 'components/SignedIn.vue'
import Notification from 'components/Notification.vue'

describe('SignedIn.vue Test', () => {
  it('compose component', () => {
    // render the component
    const wrapper = shallowMount(SignedIn, {})

    // check that the text is rendered
    expect(wrapper.text()).toMatch('This greeting is stored on the NEAR blockchain')

    // check that the logout button is rendered
    expect(wrapper.find('button').text()).toBe("Sign out")

    // check that the save button is rendered
    expect(wrapper.find('#save').text()).toBe("Save")

    // check the notification component is present
    expect(wrapper.findComponent(Notification).exists()).toBe(true)

  })
})
'''
'''--- tests/unit/SignedOut.spec.js ---
import { shallowMount } from '@vue/test-utils'
import SignedOut from 'components/SignedOut.vue'

describe('SignedOut.vue Test', () => {
  it('compose main page', () => {
    // render the component
    const wrapper = shallowMount(SignedOut, {})

    // check that the text is rendered
    expect(wrapper.text()).toMatch('Welcome to NEAR')

    // check that the login button rendered
    expect(wrapper.find('button').text()).toBe("Sign in")

  })
})
'''