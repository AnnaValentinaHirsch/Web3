*GitHub Repository "k3rn3lpanicc/near-payment-contract"*

'''--- Cargo.toml ---
[package]
name = "status-message"
version = "0.1.0"
authors = ["Near Inc <hello@nearprotocol.com>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
serde = { version = "*", features = ["derive"] }
serde_json = "*"
near-sdk = "4.0.0"
base16 = { version = "0.2", default-features = false, features = ["alloc"] }

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

'''
'''--- README.md ---
# near-payment-contract
Payment Contract for NEAR

'''
'''--- deploy/deploy.bat ---
near-cli.exe contract deploy 2f477fd42bf3885e4a222024b90df26d1b8f1ad00502f5c895f931a83d97ce6f use-file status_message.wasm without-init-call network-config testnet sign-with-access-key-file paymentdeployer.json
'''
'''--- deploy/paymentdeployer.json ---
{"implicit_account_id":"2f477fd42bf3885e4a222024b90df26d1b8f1ad00502f5c895f931a83d97ce6f","master_seed_phrase":"fall flat order fly total dinner clean oxygen person couple wealth gloom","private_key":"ed25519:3B2sL2samG5hYyAaBLaUYv6ftozFgfPjZtw5NEQoSBo7mfr4u85DhjrApeTHMXcuEQd2HwNUJNd9MX9UsUpkWSxW","public_key":"ed25519:4BZPyhhStuQQmQ9FhY5ZB4PE3ZTBH3E3F5DNVWFJo1UJ","seed_phrase_hd_path":"m/44'/397'/0'"}
'''
'''--- keys/k3rn3lpanic.json ---
{"implicit_account_id":"7875e128ffdab2513e27180a406280630476c9a13787da2c6c30677a1a14b936","master_seed_phrase":"    ","private_key":"ed25519:2zbiQ3w85M4LRAnvv8Jg7Rx4X2QdvqpMPiZ8cX7ZASBxsRvCrQ5hBrAqazGMNNwpn45MQ94S747oa1uUNE29y4AZ","public_key":"ed25519:97EBGPGVjBL5h6CZyCjvrqrFN8is48uqVjQZnzFFGhDf","seed_phrase_hd_path":"m/44'/397'/0'"}
'''
'''--- src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{near_bindgen, AccountId, Promise};

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct DroplinkedStorage {
    droplinked_account : AccountId, 
    fee : u128,
}

impl Default for DroplinkedStorage {
    fn default() -> Self {
        Self {
            droplinked_account : AccountId::new_unchecked("droplinked_payment.testnet".to_string()),
            fee : 1000u128 ,// 1000 = 1% fee
        }
    }
}

#[near_bindgen]
impl DroplinkedStorage {
    #[payable]
    pub fn direct_pay(&mut self, product_price : String, shipping_price : String, tax_price : String, recipient : AccountId) -> Promise {
        let product_price_u128 = product_price.parse::<u128>().unwrap();
        let shipping_price_u128 = shipping_price.parse::<u128>().unwrap();
        let tax_price_u128 = tax_price.parse::<u128>().unwrap();
        if near_sdk::env::attached_deposit() < product_price_u128 + shipping_price_u128 + tax_price_u128{
            near_sdk::env::panic_str("deposit is too low");
        }
        let droplinked_share = product_price_u128 * self.fee / 100000;
        Promise::new(recipient).transfer(((product_price_u128 + shipping_price_u128 + tax_price_u128 )-droplinked_share).into());
        Promise::new(self.droplinked_account.clone()).transfer(droplinked_share.into())
    }
}
'''