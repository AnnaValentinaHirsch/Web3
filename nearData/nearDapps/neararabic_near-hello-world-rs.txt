*GitHub Repository "neararabic/near-hello-world-rs"*

'''--- Cargo.toml ---
[package]
name = "near-rust-helloworld"
version = "0.1.0"
authors = ["Mohammed Hassan <mhassanist@testnear.net>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "3.1.0"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true
'''
'''--- README.md ---
# مرحباً نير مع رست NEAR Rust Hello World!

مشروع بسيط يعمل كنقطة بداية لمشاريعك ( العقود الذكية) على شبكة نيــر باستخدام لغة البرمجة رست Rust

## لتشغيل المشروع

يحتاج المشروع لتثبيت أدوات التطوير الخاصة بلغة رست و ويب أسمبلي rust and web assembly tool chain
يمكن اتباع خطوات تثبيتهم هنــاhttps://www.near-sdk.io/

1- قم بنسخ المشروع لجهازك clone

2- من داخل مجلد المشروع فى شاشة الأوامر terminal قم بكتابة الأمر التالي

```
env 'RUSTFLAGS=-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release
```

- ملحوظة: الجزء `env 'RUSTFLAGS=-C link-arg=-s'` يقوم بعمل تحسين لعملية تحويل الكود و يؤثر جذرياً على حجم الملف الناتج و بالتالى تكلفة رفع الملف و استضافته على البلوك تشين. إذا كان الملف الناتج من العملية السابقة أكبر من 200 كيلو بايت لديك (14 ميجا بايت مثلاً أو أكثر) فهذا يعنى أن الأمر لم يعمل بشكل صحيح و يجب عليك فحص إعدادات رست و تفعيله.

3- ستلاحظ وجود ملفات جديدة تم انشائها داخل مجلد target و منها الملف `near_rust_helloworld.wasm`

4- يمكنك رفع هذا الملف مباشرة على البلوك تشين بالطرق المعتادة مثل

```
 near dev-deploy .\target\wasm32-unknown-unknown\release\near_rust_helloworld.wasm
```

5- يمكنك التجربة باستدعاء الدالة `hello_world`

```
near view CONTRACT_ACCOUNT_ID hello_world
```

'''
'''--- rustfmt.toml ---
tab_spaces = 2

'''
'''--- src/lib.rs ---
//نحتاج استيراد التالي حتى يمكن لبيئة العمل ترجمة السطور التالية و تحويلها لكود يعمل على البلوك تشين
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::near_bindgen;

near_sdk::setup_alloc!();
//ماكرو حتى يمكن لبيئة العمل ترجمة الكود التالي الى كود يعمل على البلوك تشين
#[near_bindgen]
#[derive(Default, BorshDeserialize, BorshSerialize)]

//المكون الرئيسي للعقد الذكي - ستركتشر
pub struct Contract {
  //يمكن تعريف المتغيرات هنا
}

//الدوال الملحقة بالاستركتشر السابق تعريفه
#[near_bindgen]
impl Contract {
  //تعريف الدوال هنا
  pub fn hello_world(&self) -> std::string::String {
    return "Hello from Rust!".to_string();
  }
}

'''